[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "all right wow full room I'm just going to jump right in",
    "start": "4600",
    "end": "10120"
  },
  {
    "text": "about 15 years ago my stepmother and we'll call her Francis for the sake of this conversation became ill she had",
    "start": "10120",
    "end": "17279"
  },
  {
    "text": "aches through her whole body she had weakness she had difficulty standing and",
    "start": "17279",
    "end": "22400"
  },
  {
    "text": "by the time they got her to the hospital she had paralysis in her arms and legs and it was a terrifying experience for",
    "start": "22400",
    "end": "28599"
  },
  {
    "text": "her and obviously for us as well Well turns out she had something called gon Beret Syndrome has anybody heard of",
    "start": "28599",
    "end": "35800"
  },
  {
    "start": "32000",
    "end": "32000"
  },
  {
    "text": "this before I'm just curious oh lots of people good well not good hopefully you",
    "start": "35800",
    "end": "41160"
  },
  {
    "text": "haven't had firsthand experience with it it's an autoimmune disorder and it's a really interesting one uh it's triggered",
    "start": "41160",
    "end": "48280"
  },
  {
    "text": "by some kind of external factor which is fairly common with autoimmune disorders but what's interesting about this one is",
    "start": "48280",
    "end": "54199"
  },
  {
    "text": "that the antibodies will directly attack What's called the myin sheath that wraps around the axon that long SE in nerve",
    "start": "54199",
    "end": "60960"
  },
  {
    "text": "cells and it essentially eats away at it such that the signals become very",
    "start": "60960",
    "end": "66000"
  },
  {
    "text": "diffuse and so you can imagine these symptoms of pain and weakness and paralysis are all quite logical when you",
    "start": "66000",
    "end": "72240"
  },
  {
    "text": "understand what's going on the good news is is that it's treatable uh either through",
    "start": "72240",
    "end": "78040"
  },
  {
    "text": "plasmapheresis where they filter your blood outside your body or antibody therapy and that was successful the",
    "start": "78040",
    "end": "83600"
  },
  {
    "text": "latter was successful for Francis what was interesting also was her reaction to this condition",
    "start": "83600",
    "end": "90840"
  },
  {
    "text": "she became much more disciplined about her health she started eating right exercising more she started pictate",
    "start": "90840",
    "end": "98200"
  },
  {
    "text": "doing chiong and taii to improve her health and she was committed to having this kind of event never happened to her",
    "start": "98200",
    "end": "106600"
  },
  {
    "text": "again and what this event uh really underscores for me is how amazing the",
    "start": "106600",
    "end": "112719"
  },
  {
    "text": "human body is uh and how something as simple as the act of breathing or interacting with the world is actually a",
    "start": "112719",
    "end": "119320"
  },
  {
    "text": "pretty morac ulous thing and it's actually an act of Bravery to a certain extent there are so many forces in the",
    "start": "119320",
    "end": "125360"
  },
  {
    "text": "world so many allergens and bacterial infections and various things that can",
    "start": "125360",
    "end": "130520"
  },
  {
    "text": "cause problems for us and so you might be wondering why the hell are we talking about this at a",
    "start": "130520",
    "end": "136200"
  },
  {
    "text": "microservices uh talk but just as breathing is a miraculous Act of Bravery so is taking",
    "start": "136200",
    "end": "143200"
  },
  {
    "text": "traffic in your microservice architecture you might have traffic spikes you might have a Dos attack you",
    "start": "143200",
    "end": "150000"
  },
  {
    "text": "might introduce changes into your own environment that can take the entire service down and prevent your customers",
    "start": "150000",
    "end": "155680"
  },
  {
    "text": "from accessing it and so this is why we're here today we're going to talk about microservice architectures which",
    "start": "155680",
    "end": "161440"
  },
  {
    "text": "have huge benefits but also talk about the challenges and the solutions that Netflix has discovered over the last",
    "start": "161440",
    "end": "168400"
  },
  {
    "text": "seven years uh wrestling with a lot of these kinds of failures and conditions so I'm going to do a little",
    "start": "168400",
    "end": "174760"
  },
  {
    "text": "bit of an introduction I'll introduce myself and I'm going to spend a little bit of time LEL setting on microservice",
    "start": "174760",
    "end": "181680"
  },
  {
    "text": "Basics so we're all using the same vocabulary as we go through this and then we'll spend the majority of our",
    "start": "181680",
    "end": "186959"
  },
  {
    "text": "time talking about the challenges and solutions that Netflix has encountered and then we'll spend a little bit of",
    "start": "186959",
    "end": "192120"
  },
  {
    "text": "time talking about the relationship between organization and architecture and how that's relevant to this",
    "start": "192120",
    "end": "198319"
  },
  {
    "text": "discussion so by way of introduction hello I'm Josh Evans uh I started at",
    "start": "198319",
    "end": "203799"
  },
  {
    "start": "200000",
    "end": "200000"
  },
  {
    "text": "Netflix uh had a career before this but I this is the most relevant part uh in 1999 joined Netflix about a month before",
    "start": "203799",
    "end": "211280"
  },
  {
    "text": "the subscription DVD service launched uh I was in the e-commerce space as an engineer and then a manager uh and got",
    "start": "211280",
    "end": "218080"
  },
  {
    "text": "to see that transition from an e-commerce perspective in terms of how we integrated streaming into the existing DVD",
    "start": "218080",
    "end": "224480"
  },
  {
    "text": "business 2009 I moved over right into the heart of streaming managing a team that's today called playback services",
    "start": "224480",
    "end": "231439"
  },
  {
    "text": "this is the team that does DRM and manifest delivery recording Telemetry coming back from devices uh I also",
    "start": "231439",
    "end": "238120"
  },
  {
    "text": "managed this this team during a time when we were going International getting onto every possible device in the world",
    "start": "238120",
    "end": "245000"
  },
  {
    "text": "and just this side project of moving from data center to Cloud so it's actually quite an interesting and exciting",
    "start": "245000",
    "end": "250959"
  },
  {
    "text": "time for the last three years I've been managing a team called operations engineering where we focus on",
    "start": "250959",
    "end": "256799"
  },
  {
    "text": "operational excellence engineering velocity uh monitoring and alerting so think about things like delivery uh",
    "start": "256799",
    "end": "263479"
  },
  {
    "text": "chaos engineering a whole wide variety of functions to help Netflix Engineers be successful operating their own",
    "start": "263479",
    "end": "269240"
  },
  {
    "text": "services is in the cloud so you'll see that there's an end date there I actually left Netflix about a month ago",
    "start": "269240",
    "end": "276240"
  },
  {
    "text": "and today I'm actually thinking a lot about Ariana Huffington uh catching up on my sleep for the first time in quite",
    "start": "276240",
    "end": "282120"
  },
  {
    "text": "some time uh taking some time off spending time with my family trying to figure out what this work life balance",
    "start": "282120",
    "end": "288479"
  },
  {
    "text": "thing looks like uh actually this will be mostly life balance which will be great big shift from what I was doing",
    "start": "288479",
    "end": "293840"
  },
  {
    "text": "before uh Netflix as you know is the leader in subscription Internet TV service it produces es or licenses",
    "start": "293840",
    "end": "301039"
  },
  {
    "start": "295000",
    "end": "295000"
  },
  {
    "text": "Hollywood independent and local content has a growing slate of pretty amazing",
    "start": "301039",
    "end": "306520"
  },
  {
    "text": "originals and at this point is at about 86 million members uh globally and",
    "start": "306520",
    "end": "311880"
  },
  {
    "text": "growing quite rapidly Netflix is in about 190 countries today and has",
    "start": "311880",
    "end": "317240"
  },
  {
    "text": "localized in tens of languages that's user interface subs and dubs thousands of device platforms and",
    "start": "317240",
    "end": "325600"
  },
  {
    "text": "all of this is running on microservices on AWS",
    "start": "325600",
    "end": "331240"
  },
  {
    "text": "so let's dig in and let's talk about the microservices uh from the abstract sense",
    "start": "331800",
    "end": "337680"
  },
  {
    "start": "336000",
    "end": "336000"
  },
  {
    "text": "and I'd like to start by talking about what microservices are not I'm going to go back to 2000 my early days at Netflix",
    "start": "337680",
    "end": "344520"
  },
  {
    "text": "when we were a web-based business where people put DVDs in their queue and had them shipped out and returned and all of",
    "start": "344520",
    "end": "351199"
  },
  {
    "text": "that so we had a pretty simple infrastructure this was in a data center Hardware based load balancer actually",
    "start": "351199",
    "end": "357759"
  },
  {
    "text": "very expensive Hardware that we put put our that we used as our Linux hosts",
    "start": "357759",
    "end": "362919"
  },
  {
    "text": "running a fairly standard configuration of an Apache reverse proxy and tomcat",
    "start": "362919",
    "end": "368280"
  },
  {
    "text": "and this one application that we called Java web it's kind of everything that was in Java that our customers needed to",
    "start": "368280",
    "end": "375000"
  },
  {
    "text": "access now this was connected directly to an Oracle database using jdbc which was then interconnect with other Oracle",
    "start": "375000",
    "end": "382000"
  },
  {
    "text": "databases using database links the first problem with this",
    "start": "382000",
    "end": "387319"
  },
  {
    "text": "architecture was that the codebase for Java web was monolithic in the sense that everybody was contributing to one",
    "start": "387319",
    "end": "394440"
  },
  {
    "text": "code base that got deployed on a weekly or bi-weekly basis and the problem with that was is",
    "start": "394440",
    "end": "400639"
  },
  {
    "text": "when a change was introduced that caused a problem it was difficult to diagnose we probably spent well over a week",
    "start": "400639",
    "end": "407160"
  },
  {
    "text": "troubleshooting a slow moving memory leak took about a day to happen we tried pulling out pieces of code and running",
    "start": "407160",
    "end": "413039"
  },
  {
    "text": "it again to see what would happen and because so many changes were rolling into that one application this took an",
    "start": "413039",
    "end": "418800"
  },
  {
    "text": "extended period perod of time the database was also monolithic in",
    "start": "418800",
    "end": "424919"
  },
  {
    "text": "even a more severe sense it was one piece of Hardware running one big Oracle",
    "start": "424919",
    "end": "430039"
  },
  {
    "text": "database that we called the store database and when this went down everything went down and every year as",
    "start": "430039",
    "end": "437199"
  },
  {
    "text": "we started to get into the holiday Peak we were scrambling to find bigger and bigger Hardware so that we could",
    "start": "437199",
    "end": "442840"
  },
  {
    "text": "vertically scale this application probably one of the most painful pieces from the engineering",
    "start": "442840",
    "end": "448879"
  },
  {
    "text": "perspective other than the outages that might have happened was the lack of agility that we had because everything was so deeply",
    "start": "448879",
    "end": "454919"
  },
  {
    "text": "interconnected we had Direct calls into the database we had many applications directly referencing table schemas and I",
    "start": "454919",
    "end": "461319"
  },
  {
    "text": "can remember trying to add a column to a table was a big cross functional project for us so this is a great example of how",
    "start": "461319",
    "end": "468319"
  },
  {
    "text": "not to build services today although this was the common pattern back in the late '90s and early",
    "start": "468319",
    "end": "475199"
  },
  {
    "text": "2000s so what is a microservice does uh anybody want to volunte hear their",
    "start": "475199",
    "end": "480520"
  },
  {
    "text": "understanding or definition of what a microservice is sort of curious what I'll get here somebody some brave soul",
    "start": "480520",
    "end": "486680"
  },
  {
    "text": "there we go what's a microservice data",
    "start": "486680",
    "end": "492080"
  },
  {
    "text": "own say it again Contex and data ownership context Bound in data",
    "start": "492080",
    "end": "497800"
  },
  {
    "text": "ownership I like that I'm going to give you the Martin Fowler definition this is a good place",
    "start": "497800",
    "end": "503120"
  },
  {
    "text": "to start that's definitely a key piece I'm going to read this to you so you don't have to microservice architecture",
    "start": "503120",
    "end": "508960"
  },
  {
    "text": "Style is an approach to developing a single application as a suite of small Services each running in its own process",
    "start": "508960",
    "end": "515159"
  },
  {
    "text": "and commuting with a lightweight mechanis lightweight mechanisms often an HTTP resource API so I think we all know",
    "start": "515159",
    "end": "521320"
  },
  {
    "text": "this it's it's a somewhat abstract definition it's very technically correct but it doesn't really give you enough of the flavor I think of what it means to",
    "start": "521320",
    "end": "528399"
  },
  {
    "text": "build microservices when I think about it I think of it as this extreme reaction to",
    "start": "528399",
    "end": "534360"
  },
  {
    "start": "530000",
    "end": "530000"
  },
  {
    "text": "that experience that I had back in 2000 with monolithic applications separ op ation of concerns",
    "start": "534360",
    "end": "540560"
  },
  {
    "text": "being probably one of the most critical things that it encourages modularity the ability to encapsulate your data",
    "start": "540560",
    "end": "547480"
  },
  {
    "text": "structures behind something so that you don't have to deal with all of this coordination scalability they tend to",
    "start": "547480",
    "end": "553800"
  },
  {
    "text": "lend themselves to horizontal scaling if you approach it correctly and workload partitioning because it's a distributed",
    "start": "553800",
    "end": "560600"
  },
  {
    "text": "system you can take your work and break it out into smaller components which make it more manageable and then of course none of",
    "start": "560600",
    "end": "567839"
  },
  {
    "text": "this really works well from my perspective unless you're running it in a virtualized and elastic environment it",
    "start": "567839",
    "end": "573880"
  },
  {
    "text": "is much much harder to manage microservices if you're not doing it in this kind of environment you need to be",
    "start": "573880",
    "end": "579760"
  },
  {
    "text": "able to automate your operations as much as possible and On Demand provisioning is a huge huge benefit that I wouldn't",
    "start": "579760",
    "end": "586240"
  },
  {
    "text": "want to give up without we building this going back to that theme of the human body and biology you can think of",
    "start": "586240",
    "end": "592959"
  },
  {
    "text": "microservices also as organs in an organ system and these systems that then come",
    "start": "592959",
    "end": "598440"
  },
  {
    "text": "together to form the overall organism so let's take a look at the Netflix architecture a little bit and see how",
    "start": "598440",
    "end": "604160"
  },
  {
    "text": "that Maps there's a proxy layer that's behind the elb called Zuul that does dynamic",
    "start": "604160",
    "end": "610800"
  },
  {
    "text": "routing there's a tier that was our Legacy tier called nccp that supported our earlier devices plus fundamental",
    "start": "610800",
    "end": "617360"
  },
  {
    "text": "playback capabilities and there's our Netflix API which is our API Gateway that today is",
    "start": "617360",
    "end": "623880"
  },
  {
    "text": "part really core to our modern architecture calling out into all of the other services to fulfill requests for",
    "start": "623880",
    "end": "630720"
  },
  {
    "text": "customers this aggregate set that we've just walked through we consider our Edge service there's some a few auxiliary",
    "start": "630720",
    "end": "637279"
  },
  {
    "text": "Services as well like DRM that support this that are also part of the edge and then this soup on the right hand side is",
    "start": "637279",
    "end": "644680"
  },
  {
    "text": "a combination of middle tier and platform services that enable the service to function",
    "start": "644680",
    "end": "650279"
  },
  {
    "text": "overall to give you a sense of what these organs look like these entities here are a few examples we have an AB",
    "start": "650279",
    "end": "657600"
  },
  {
    "text": "testing infrastructure and there's an a B service that returns back values if you want to know what tests a customer",
    "start": "657600",
    "end": "663440"
  },
  {
    "text": "should be in we have a subscriber service that is called from almost everything to find out information about",
    "start": "663440",
    "end": "669360"
  },
  {
    "text": "our customers a recommendation system that provides the information necessary",
    "start": "669360",
    "end": "674560"
  },
  {
    "text": "to build the list of movies that get presented to each customer as a unique experience and then of course there's platform services that perform the more",
    "start": "674560",
    "end": "681320"
  },
  {
    "text": "fundamental capabilities routing to get to to so microservices can find each other Dynamic configuration",
    "start": "681320",
    "end": "688560"
  },
  {
    "text": "cryptographic operations and then of course there's the persistence layers as well these are the kinds of objects that",
    "start": "688560",
    "end": "695360"
  },
  {
    "text": "live in this ecosystem now I also want to underscore that microservices are an",
    "start": "695360",
    "end": "701519"
  },
  {
    "start": "697000",
    "end": "697000"
  },
  {
    "text": "abstraction we tend to think of them very simplistically as here's my nice horizontally scaled microservice and",
    "start": "701519",
    "end": "708680"
  },
  {
    "text": "people are going to call me which is great if it's that simple but it's it's almost never that simple at some point",
    "start": "708680",
    "end": "714680"
  },
  {
    "text": "you need data uh your service is going to need to pull on data for a variety of reasons it might be subscriber",
    "start": "714680",
    "end": "720519"
  },
  {
    "text": "information it might be recommendations but that data is typically stored in your persistence layer and then for convenience and this",
    "start": "720519",
    "end": "727200"
  },
  {
    "text": "is a really a uh Netflix approach that I think many others have embraced but",
    "start": "727200",
    "end": "732600"
  },
  {
    "text": "definitely specific to Netflix as well is to start providing client libraries and this were mostly Java based uh so",
    "start": "732600",
    "end": "739360"
  },
  {
    "text": "client libraries uh for doing those basic data access uh types of operations now at some point as you",
    "start": "739360",
    "end": "746560"
  },
  {
    "text": "scale you're probably going to need to front this with a cache um because the Service Plus the database may not",
    "start": "746560",
    "end": "751800"
  },
  {
    "text": "perform well enough and so you're going to have a cash client as well and then now you need to start",
    "start": "751800",
    "end": "757760"
  },
  {
    "text": "thinking about orchestration so I'm going to hit the cache first then if that fails I need to go to the service",
    "start": "757760",
    "end": "763680"
  },
  {
    "text": "which is going to call the database it'll return a response back and then of course you want to make sure you backfill the cach so that it's hot the",
    "start": "763680",
    "end": "769800"
  },
  {
    "text": "next time you call it which might just be a few milliseconds later now this client library is going",
    "start": "769800",
    "end": "774920"
  },
  {
    "text": "to be embedded within the applications that want to consume your microservice and so it's important to realize from",
    "start": "774920",
    "end": "781040"
  },
  {
    "text": "their perspective this entire set of Technologies this whole complex",
    "start": "781040",
    "end": "786720"
  },
  {
    "text": "configuration is your microservice it's not this very simple stateless thing which is is nice from sort of a pure",
    "start": "786720",
    "end": "793120"
  },
  {
    "text": "perspective but it actually has these sort of complex uh structures to them so that's the level set on",
    "start": "793120",
    "end": "799920"
  },
  {
    "text": "microservices and now let's go ahead and let's dig in on the challenges that we've encountered over the last seven",
    "start": "799920",
    "end": "805480"
  },
  {
    "text": "years and some of the solutions and philosophies behind that",
    "start": "805480",
    "end": "811120"
  },
  {
    "start": "813000",
    "end": "813000"
  },
  {
    "text": "so I love junk food um and I love this image because I think in many cases the",
    "start": "813880",
    "end": "819839"
  },
  {
    "text": "problems and solutions have to do with the habits that we have and how we approach microservices and so the goal",
    "start": "819839",
    "end": "825800"
  },
  {
    "text": "is to get us to eat more vegetables uh in many cases um we're going to break this down into four sort of primary",
    "start": "825800",
    "end": "832800"
  },
  {
    "text": "areas that we're going to investigate there are four dimensions uh in terms of how we address these challenges",
    "start": "832800",
    "end": "840680"
  },
  {
    "text": "dependency scale variance within your architecture",
    "start": "840680",
    "end": "846160"
  },
  {
    "text": "and how you introduce change we're going to start with dependencies and I'm going to break this",
    "start": "846160",
    "end": "852240"
  },
  {
    "text": "down into four use cases within dependencies in service requests this is",
    "start": "852240",
    "end": "858279"
  },
  {
    "text": "the call from microservice A to microservice B in order to fulfill some larger requests and just as we were talking",
    "start": "858279",
    "end": "865519"
  },
  {
    "start": "864000",
    "end": "864000"
  },
  {
    "text": "about earlier with the nerve cells and the conduction everything's great when it's all working but when it's",
    "start": "865519",
    "end": "871399"
  },
  {
    "text": "challenging it can feel like you're crossing a vast chasm in the case of a service calling another service you've",
    "start": "871399",
    "end": "878680"
  },
  {
    "text": "just taken on a huge Risk by just going off process and off your box you could",
    "start": "878680",
    "end": "883880"
  },
  {
    "text": "run into Network latency and congestion you could have Hardware failures that prevent routing of your traffic or the",
    "start": "883880",
    "end": "891079"
  },
  {
    "text": "service you're calling might be in bad shape it might have had a bad deployment and have some kind of logical bugs or it",
    "start": "891079",
    "end": "896600"
  },
  {
    "text": "might not be properly scaled and so it can simply fail or be very slow and you might end up timing out when you call",
    "start": "896600",
    "end": "904199"
  },
  {
    "start": "904000",
    "end": "904000"
  },
  {
    "text": "it the disaster scenario and we've seen this more than I'd like to admit is the",
    "start": "904199",
    "end": "909560"
  },
  {
    "text": "scenario where you've got one service that fails with improper defenses",
    "start": "909560",
    "end": "915000"
  },
  {
    "text": "against that one service failing it can Cascade and take down your entire service for your members and God forbid",
    "start": "915000",
    "end": "922199"
  },
  {
    "text": "you deployed that bad change out to multiple regions if you have a multi- region strategy because now you've really just got no place to go to",
    "start": "922199",
    "end": "928600"
  },
  {
    "text": "recover you just have to fix the problem in place so to deal with this Netflix",
    "start": "928600",
    "end": "934920"
  },
  {
    "text": "created histrix which has a few really nice properties it's got a structured way for handling timeouts and retries it",
    "start": "934920",
    "end": "941360"
  },
  {
    "text": "has this concept of a fallback so if I can't call service B can I return some",
    "start": "941360",
    "end": "946839"
  },
  {
    "text": "static response or something that will allow the customer to continue using the product instead of Simply getting an",
    "start": "946839",
    "end": "952199"
  },
  {
    "text": "error and then the other big benefit of histrix is isolated thread pools and",
    "start": "952199",
    "end": "957959"
  },
  {
    "text": "this concept of circuit if I keep hammering away at service B and it just keeps failing maybe I should",
    "start": "957959",
    "end": "963399"
  },
  {
    "text": "stop calling it and fail fast return that fall back and wait for it to",
    "start": "963399",
    "end": "968680"
  },
  {
    "text": "recover so this has been a great Innovation for Netflix it's been used quite",
    "start": "968680",
    "end": "973800"
  },
  {
    "text": "broadly but the fundamental question comes in now I've got all my historic settings in place and I think I've got",
    "start": "973800",
    "end": "979160"
  },
  {
    "text": "it all right but how do you really know if it's going to work and especially how do you know it's going to work under at",
    "start": "979160",
    "end": "984759"
  },
  {
    "text": "scale the best way to do this going back to our biology theme is inoculation",
    "start": "984759",
    "end": "990720"
  },
  {
    "start": "985000",
    "end": "985000"
  },
  {
    "text": "where you might take a Dead version of a virus and inject it to develop the antibodies to defend against the live",
    "start": "990720",
    "end": "997040"
  },
  {
    "text": "version and likewise fault injection in production accomplishes the same thing",
    "start": "997040",
    "end": "1002440"
  },
  {
    "start": "998000",
    "end": "998000"
  },
  {
    "text": "and Netflix created fit the fault injection test framework in order to do this you can do synthetic transactions",
    "start": "1002440",
    "end": "1010160"
  },
  {
    "text": "which are overridden basically at the accounter or the device level or you can actually do a percentage of live traffic",
    "start": "1010160",
    "end": "1016639"
  },
  {
    "text": "so once you've determined that everything works functionally now you want to put it under load and see what happens with real",
    "start": "1016639",
    "end": "1023199"
  },
  {
    "text": "customers and of course you want to be able to test it no matter how you call that service whether you call it",
    "start": "1023199",
    "end": "1029400"
  },
  {
    "text": "directly whether you call it indirectly you want to make sure that your requests are decorated with the right context so",
    "start": "1029400",
    "end": "1035678"
  },
  {
    "text": "that you can fail it universally just as if the service was really down in production without actually taking it",
    "start": "1035679",
    "end": "1042160"
  },
  {
    "text": "down so this is all great this is sort of a point-to-point perspective but imagine now that you've",
    "start": "1042160",
    "end": "1048280"
  },
  {
    "text": "got 100 microservices and each one of those might have a dependency on other services or multiple other services",
    "start": "1048280",
    "end": "1055640"
  },
  {
    "text": "there's a big challenge about how do you constrain the scope of the testing that you need to do so that you're not",
    "start": "1055640",
    "end": "1061840"
  },
  {
    "text": "testing millions of permutations of services calling each other this is even more important when",
    "start": "1061840",
    "end": "1068720"
  },
  {
    "start": "1067000",
    "end": "1067000"
  },
  {
    "text": "you think about it from an availability perspective imagine you've only got 10 services in your entire microservice",
    "start": "1068720",
    "end": "1075480"
  },
  {
    "text": "infrastructure and each one of them is up for four nines of avail availability that gives you 53 minutes a year that",
    "start": "1075480",
    "end": "1081919"
  },
  {
    "text": "that service can be down now that's great as an availability number but when you combine them all the",
    "start": "1081919",
    "end": "1088559"
  },
  {
    "text": "aggregate failures that would have happened throughout that year you actually will end up with three nines of",
    "start": "1088559",
    "end": "1094120"
  },
  {
    "text": "availability for your overall service and that's somewhere in the ballpark of between eight and nine hours",
    "start": "1094120",
    "end": "1100320"
  },
  {
    "text": "a year a big difference and so to address this",
    "start": "1100320",
    "end": "1105400"
  },
  {
    "start": "1105000",
    "end": "1105000"
  },
  {
    "text": "Netflix defined this concept of critical microservices the one ones that are necessary to have basic functionality",
    "start": "1105400",
    "end": "1112120"
  },
  {
    "text": "work can the customer load the app browse and find something to watch it might just be a list of the most popular",
    "start": "1112120",
    "end": "1118640"
  },
  {
    "text": "movies hit play and have it actually work and so we've taken this approach",
    "start": "1118640",
    "end": "1124200"
  },
  {
    "text": "and identified those Services as a group and then created fit recipes that",
    "start": "1124200",
    "end": "1130840"
  },
  {
    "text": "essentially Blacklist all of the other services that are not critical and this",
    "start": "1130840",
    "end": "1136280"
  },
  {
    "text": "way we can actually test this out and we have tested this for sure short periods of time in production to make sure that",
    "start": "1136280",
    "end": "1142120"
  },
  {
    "text": "the the service actually functions when all those dependencies go away so this",
    "start": "1142120",
    "end": "1147640"
  },
  {
    "text": "is a much simpler approach to trying to do all of the point-to-point interactions and has actually been very",
    "start": "1147640",
    "end": "1153120"
  },
  {
    "text": "successful for Netflix and finding critical errors so let's now talk about client",
    "start": "1153120",
    "end": "1158960"
  },
  {
    "text": "libraries shifting gears completely when we first started moving to the cloud we had some very heated discussions about",
    "start": "1158960",
    "end": "1165960"
  },
  {
    "text": "client libraries there were a bunch of folks uh who had done great work from Yahoo had who had come to Netflix who",
    "start": "1165960",
    "end": "1172240"
  },
  {
    "text": "were espousing the model of barebones rest just call the service don't create any client libraries don't deal with all",
    "start": "1172240",
    "end": "1178799"
  },
  {
    "text": "of that um just go Bare Bones and yet at the same time there are really compelling Arguments for building client",
    "start": "1178799",
    "end": "1185600"
  },
  {
    "text": "libraries if I have common logic and common access patterns for calling my service and I've got 20 or 30 different",
    "start": "1185600",
    "end": "1192440"
  },
  {
    "text": "dependencies do I really want every single one of those teams writing the same code or slightly different code",
    "start": "1192440",
    "end": "1198159"
  },
  {
    "text": "over and over again or do we want to Simply consolidate that down into common business logic and common access",
    "start": "1198159",
    "end": "1204559"
  },
  {
    "text": "patterns and this was so compelling that this is actually what we did now the Big Challenge here is that",
    "start": "1204559",
    "end": "1211640"
  },
  {
    "start": "1208000",
    "end": "1208000"
  },
  {
    "text": "this is a slippery slope back towards having a new kind of monolith where now",
    "start": "1211640",
    "end": "1216720"
  },
  {
    "text": "our API Gateway in this case which might be hitting a 100 Services is now running a lot of code in process that they",
    "start": "1216720",
    "end": "1223720"
  },
  {
    "text": "didn't write this takes us all the way back to 2000 running lots of code in the the same common codee",
    "start": "1223720",
    "end": "1231240"
  },
  {
    "text": "base it's a lot like a parasitic infection if you really think about it this little nasty thing here is not the",
    "start": "1231240",
    "end": "1237880"
  },
  {
    "start": "1232000",
    "end": "1232000"
  },
  {
    "text": "size of Godzilla it's not going to take down Tokyo but it will infest your intestines it'll attach to your blood",
    "start": "1237880",
    "end": "1244000"
  },
  {
    "text": "vessels and drink your blood like a vampire this is called a hookworm and a full-blown infestation can actually lead",
    "start": "1244000",
    "end": "1250200"
  },
  {
    "text": "to pretty severe anemia and make you weak and likewise client libraries can",
    "start": "1250200",
    "end": "1256440"
  },
  {
    "text": "do all kinds of things that you have no knowledge of that might also weaken your service they might consume more Heap",
    "start": "1256440",
    "end": "1262440"
  },
  {
    "text": "than you expect they might have logical defects that cause failures within your application and they might have",
    "start": "1262440",
    "end": "1268080"
  },
  {
    "text": "transitive dependencies that pull in other libraries that conflict in terms of versions and break your builds and",
    "start": "1268080",
    "end": "1274360"
  },
  {
    "text": "all of this has happened especially with the API team because they're consuming so many libraries from so many",
    "start": "1274360",
    "end": "1280840"
  },
  {
    "text": "teams and there's no cut and dry answer here there's been a lot of discussion",
    "start": "1280840",
    "end": "1287360"
  },
  {
    "start": "1282000",
    "end": "1282000"
  },
  {
    "text": "about this it's been somewhat controversial even over the last year or so the general consensus has been though",
    "start": "1287360",
    "end": "1293559"
  },
  {
    "text": "to try to simplify those libraries there's not a desire to move all the way to that barebones rest model but there",
    "start": "1293559",
    "end": "1300240"
  },
  {
    "text": "is a desire to limit the amount of logic and Heap consumption happening there and you want to make sure that people have",
    "start": "1300240",
    "end": "1305960"
  },
  {
    "text": "the ability to make smart thoughtful decisions on a case-by Case basis so we'll see how this all unfolds this is",
    "start": "1305960",
    "end": "1311559"
  },
  {
    "text": "sort of an ongoing conversation and mostly I'm bringing up here so all of you can be sort of thoughtful about these trade-offs and understand that",
    "start": "1311559",
    "end": "1320159"
  },
  {
    "text": "now persistence is something that I think Netflix got right early on there isn't there isn't a war story here about how we got it wrong um and let me tell",
    "start": "1320159",
    "end": "1327440"
  },
  {
    "text": "you how we got it right we got it right by starting off thinking about the right",
    "start": "1327440",
    "end": "1332520"
  },
  {
    "start": "1329000",
    "end": "1329000"
  },
  {
    "text": "constructs and about cap theorem I assume how many people are not familiar with cap theorem I'm just sort of",
    "start": "1332520",
    "end": "1338600"
  },
  {
    "text": "curious Okay so we've got a few let's go ahead and level set here this is the simplest definition that that allowed me",
    "start": "1338600",
    "end": "1345279"
  },
  {
    "text": "to get my brain around what this really was in the presence of a Network partition you must choose between",
    "start": "1345279",
    "end": "1350919"
  },
  {
    "text": "consistency and availability in this case here you might have a service running a network a and",
    "start": "1350919",
    "end": "1357679"
  },
  {
    "text": "it wants to write to databases a copy of the same data into into databases that",
    "start": "1357679",
    "end": "1363400"
  },
  {
    "text": "are running in three different networks or in AWS this might be three different availability zones the fundamental question is what",
    "start": "1363400",
    "end": "1370000"
  },
  {
    "text": "do you do when you can't get to one or more of them do you just fail and give back an error or do you write to the",
    "start": "1370000",
    "end": "1376440"
  },
  {
    "text": "ones you can get to and then fix it up afterwards Netflix chose the latter and",
    "start": "1376440",
    "end": "1382880"
  },
  {
    "start": "1381000",
    "end": "1381000"
  },
  {
    "text": "embraced this concept of eventual consistency where we don't expect every single right to be read back immediately",
    "start": "1382880",
    "end": "1389200"
  },
  {
    "text": "from any one of the sources that we've written the data to and Cassandra does this really well and has lots of",
    "start": "1389200",
    "end": "1396760"
  },
  {
    "text": "flexibility so the client might write to only one node which then orchestrates and writes to multiple nodes and there's",
    "start": "1396760",
    "end": "1403440"
  },
  {
    "text": "a concept of local Quorum where you can say I need this many nodes to respond back and say that they've actually",
    "start": "1403440",
    "end": "1409200"
  },
  {
    "text": "committed the change before I'm going to assume that it's written out and that could be one node if you really want to",
    "start": "1409200",
    "end": "1414760"
  },
  {
    "text": "take on some risk in terms of the durability but you're willing to get very high availability or you can dial",
    "start": "1414760",
    "end": "1420799"
  },
  {
    "text": "it up the other way and say I want it to be all the nodes that I want to write to so let's move on I'm just going to",
    "start": "1420799",
    "end": "1427400"
  },
  {
    "text": "briefly talk about infrastructure because there's this is a whole topic unto itself but at some point your",
    "start": "1427400",
    "end": "1434799"
  },
  {
    "text": "infrastructure whether it's AWS or Google or things that you've built built yourself is going to fail the point here",
    "start": "1434799",
    "end": "1441480"
  },
  {
    "text": "is not not that Amazon can't keep their services up they're actually very very good at it but that everything",
    "start": "1441480",
    "end": "1447120"
  },
  {
    "text": "fails and the the the mistake if I were going to put blame on anybody in terms of what happened in Christmas Eve of",
    "start": "1447120",
    "end": "1453279"
  },
  {
    "text": "2012 when the elb control plane went down was that we we put all our eggs in one basket we put them all in Us East",
    "start": "1453279",
    "end": "1460480"
  },
  {
    "text": "one and so when there was a failure there and by the way we've induced enough of our own to know that this is",
    "start": "1460480",
    "end": "1465640"
  },
  {
    "text": "also true there was no place to go and so Netflix developed a multi- region",
    "start": "1465640",
    "end": "1471520"
  },
  {
    "text": "strategy with three AWS regions such that if any one of them failed completely we can still push all the",
    "start": "1471520",
    "end": "1478039"
  },
  {
    "text": "traffic over to the other surviving regions so I did a talk on this earlier",
    "start": "1478039",
    "end": "1485360"
  },
  {
    "text": "in the year uh so I would encourage you to take a look at it if you want to get really deep into the multi- region strategy and all the reasons that it",
    "start": "1485360",
    "end": "1491760"
  },
  {
    "text": "evolved the way that it did um but at this point I'm going to put a pin in this I'm going to move",
    "start": "1491760",
    "end": "1496919"
  },
  {
    "text": "forward so let's talk about scale now and with scale I'm going to give you three cases uh the stateless service",
    "start": "1496919",
    "end": "1503799"
  },
  {
    "text": "scenario the stateful service scenario these sort of fundamental components and then the hybrid similar to the diagram",
    "start": "1503799",
    "end": "1510799"
  },
  {
    "text": "that we were looking at earlier where it's an orchestrated set of things that come",
    "start": "1510799",
    "end": "1516158"
  },
  {
    "text": "together okay another question what's a stateless",
    "start": "1516559",
    "end": "1522480"
  },
  {
    "start": "1517000",
    "end": "1517000"
  },
  {
    "text": "service anybody have an idea want to throw out their idea their definition of it",
    "start": "1522480",
    "end": "1528960"
  },
  {
    "text": "ah brave soul",
    "start": "1528960",
    "end": "1531880"
  },
  {
    "text": "good okay that's close that's interesting um I start with it's not a",
    "start": "1536200",
    "end": "1541760"
  },
  {
    "text": "cach or a database you're not storing massive amounts of data you will frequently have frequently accessed",
    "start": "1541760",
    "end": "1548320"
  },
  {
    "text": "metadata cached in memory so there's the nonvolatile nature of that or configuration",
    "start": "1548320",
    "end": "1554399"
  },
  {
    "text": "information um typically you won't have instance Affinity where you expect a customer to stick to a particular",
    "start": "1554399",
    "end": "1561039"
  },
  {
    "text": "instance repeatedly and the most important thing is that the loss of a node is",
    "start": "1561039",
    "end": "1566480"
  },
  {
    "text": "essentially a non-event it's not something that we should spend a lot of time worrying about and it's it and it",
    "start": "1566480",
    "end": "1571960"
  },
  {
    "text": "recovers very quickly so you should be able to boot and spin up a new one to replace a bad node relatively",
    "start": "1571960",
    "end": "1578960"
  },
  {
    "text": "easily and the best strategy here is one going back to biology is one of replication just as with mitosis we can",
    "start": "1578960",
    "end": "1585919"
  },
  {
    "text": "create cells on demand our cells are constantly dying and constantly being replenished autoscaling accomplishes",
    "start": "1585919",
    "end": "1592520"
  },
  {
    "start": "1591000",
    "end": "1591000"
  },
  {
    "text": "this I'm sure most people are familiar with autoscaling but I can't underscore enough how fundamental this is and how",
    "start": "1592520",
    "end": "1598399"
  },
  {
    "text": "much this is table Stakes for running microservices in a cloud you've got your Min and your max you've got a metric",
    "start": "1598399",
    "end": "1604559"
  },
  {
    "text": "you're using to determine whether you need to scale up your group and then when you need to have a new instance spun up you simply pull a new image out",
    "start": "1604559",
    "end": "1610520"
  },
  {
    "text": "of S3 and you spin it back up the advantages are several you get",
    "start": "1610520",
    "end": "1616159"
  },
  {
    "text": "compute efficiency because you're typically using on demand capacity your nodes get replaced easily and most",
    "start": "1616159",
    "end": "1622840"
  },
  {
    "text": "importantly actually is when you get traffic spikes if you get a DS attack if you introduce a performance bug",
    "start": "1622840",
    "end": "1629240"
  },
  {
    "text": "autoscaling allows you to absorb that change while you're figuring out what actually happens so this has saved us",
    "start": "1629240",
    "end": "1635520"
  },
  {
    "text": "many many times strongly recommend it and then of course you want to make sure it always works by applying chaos chaos",
    "start": "1635520",
    "end": "1641559"
  },
  {
    "start": "1638000",
    "end": "1638000"
  },
  {
    "text": "monkey was our very first sort of chaos tool and it simply confirms that when a node dies it everything still continues",
    "start": "1641559",
    "end": "1648799"
  },
  {
    "text": "to work this has been such a non-issue for Netflix since we've implemented chaos monkey I kind of want to knock",
    "start": "1648799",
    "end": "1653960"
  },
  {
    "text": "wood as I say that um this just doesn't take our service down anymore losing an",
    "start": "1653960",
    "end": "1659440"
  },
  {
    "text": "individual node is is very much the non-event that we want it to be so let's",
    "start": "1659440",
    "end": "1664600"
  },
  {
    "text": "jump in let's talk about stateful services and they are the opposite obviously of a uh stateless one it is",
    "start": "1664600",
    "end": "1671480"
  },
  {
    "start": "1665000",
    "end": "1665000"
  },
  {
    "text": "databases in caches it is sometimes a custom app and we did this a custom app",
    "start": "1671480",
    "end": "1677240"
  },
  {
    "text": "that has internal ized caches but of like large amounts of data and we had a service tier that did this and as soon",
    "start": "1677240",
    "end": "1683519"
  },
  {
    "text": "as we went multi- region and tried to come up with generic strategies for replicating data this was the biggest",
    "start": "1683519",
    "end": "1688640"
  },
  {
    "text": "problem we had so I strongly recommend you try to avoid storing your business logic and your state all within one",
    "start": "1688640",
    "end": "1694440"
  },
  {
    "text": "application if you can avoid it now in this case what's meaningful is again the",
    "start": "1694440",
    "end": "1699519"
  },
  {
    "text": "opposite of stateless which is that the loss of a node is a notable event it may take hours to replace that node and spin",
    "start": "1699519",
    "end": "1706440"
  },
  {
    "text": "up a new one so it is something that you need to be much more careful about so I'm going to talk about and I'm going to",
    "start": "1706440",
    "end": "1712640"
  },
  {
    "text": "sort of tipping my hand here two different approaches for how we dealt with caching to sort of underscore this",
    "start": "1712640",
    "end": "1719200"
  },
  {
    "text": "and again we as I said we had a number of people who were from Yahoo who were uh who had experience using ha proxy and",
    "start": "1719200",
    "end": "1725279"
  },
  {
    "text": "Squid caches and a pattern where they had dedicated nodes for customers so a",
    "start": "1725279",
    "end": "1730399"
  },
  {
    "text": "given customer would always hit the same node for the cache and there was only one copy of that data the challenge is of course when",
    "start": "1730399",
    "end": "1737640"
  },
  {
    "text": "that node goes down you've got a single point of failure and those customers would be unable to access that service",
    "start": "1737640",
    "end": "1744240"
  },
  {
    "text": "but even worse because this was in the early days we didn't have proper historic uh settings in place we didn't",
    "start": "1744240",
    "end": "1749760"
  },
  {
    "text": "have the bulk heading and the separation and isolation of thread pools and so I can still remember being on a call where",
    "start": "1749760",
    "end": "1756000"
  },
  {
    "text": "one node went down and all of Netflix went down along with it it took us three",
    "start": "1756000",
    "end": "1761399"
  },
  {
    "text": "and a half hours to bring it back up to wait for that cash to refill itself before we could fulfill requests",
    "start": "1761399",
    "end": "1768600"
  },
  {
    "text": "so that's the anti- pattern the single point of failure pattern and going back to biology",
    "start": "1768600",
    "end": "1774799"
  },
  {
    "text": "redundancy is fundamental we have two kidneys so that if one fails we still",
    "start": "1774799",
    "end": "1779840"
  },
  {
    "text": "have another one we have two lungs same thing now it does give us increased capacity but we can live with only one",
    "start": "1779840",
    "end": "1785960"
  },
  {
    "text": "of them and just as um your human body does that Netflix has approached an",
    "start": "1785960",
    "end": "1791519"
  },
  {
    "text": "architecture using a technology called evach and evach is essentially a wrapper around mcash D it is sharted similar to",
    "start": "1791519",
    "end": "1799240"
  },
  {
    "text": "the squid caches but multiple copies are written out to multiple noes so every time a write happens not only does it",
    "start": "1799240",
    "end": "1805720"
  },
  {
    "text": "write it out to multiple nodes but it writes them into different availability zones so it sprays them across and",
    "start": "1805720",
    "end": "1811080"
  },
  {
    "text": "separates them across the network partitions and likewise when we do reads reads are local because you want that",
    "start": "1811080",
    "end": "1817279"
  },
  {
    "text": "local efficiency but the application can fall back to reading across availability zones if it needs to to get to those",
    "start": "1817279",
    "end": "1823120"
  },
  {
    "text": "other nodes this is a success pattern that has been repeated throughout um EV",
    "start": "1823120",
    "end": "1828640"
  },
  {
    "text": "cache is is uh used by virtually every service that needs a cache today uh at",
    "start": "1828640",
    "end": "1833960"
  },
  {
    "text": "Netflix uh and it's been highly useful to us uh in lots of good ways now let's talk about the",
    "start": "1833960",
    "end": "1839960"
  },
  {
    "start": "1839000",
    "end": "1839000"
  },
  {
    "text": "combination of the two this this is the scenario we talked about earlier where you've got a hybrid",
    "start": "1839960",
    "end": "1846840"
  },
  {
    "text": "service it's very easy in this case to take EV Cas for granted let me tell you",
    "start": "1846840",
    "end": "1852600"
  },
  {
    "text": "why it can handle 30 million requests per second across the Clusters we have globally",
    "start": "1852600",
    "end": "1858519"
  },
  {
    "text": "which is 2 trillion requests per day it stores hundreds of billions of objects",
    "start": "1858519",
    "end": "1864399"
  },
  {
    "text": "in tens of thousands of M casd instances and here's the the biggest win here it",
    "start": "1864399",
    "end": "1870120"
  },
  {
    "text": "consistently scales in a linear way such that requests can be returned within a matter of milliseconds no matter what",
    "start": "1870120",
    "end": "1876080"
  },
  {
    "text": "the load is obviously you need to have enough nodes but it scales really well and uh we had a scenario several years",
    "start": "1876080",
    "end": "1883039"
  },
  {
    "start": "1881000",
    "end": "1881000"
  },
  {
    "text": "ago where our subscriber service was leaning on EVC a little bit too much and",
    "start": "1883039",
    "end": "1888440"
  },
  {
    "text": "this is another anti pattern worth talking about it was called by almost every service I mean everybody wants to",
    "start": "1888440",
    "end": "1894360"
  },
  {
    "text": "know about the subscriber and you know what's their customer ID and how do I go access some other piece of information",
    "start": "1894360",
    "end": "1900639"
  },
  {
    "text": "it had online and offline calls going to the same cluster the same evach cluster so batch processes doing recommendations",
    "start": "1900639",
    "end": "1907919"
  },
  {
    "text": "looking up subscriber information plus the real-time call Path and in many cases it was called",
    "start": "1907919",
    "end": "1914399"
  },
  {
    "text": "multiple times even with the same application within the life cycle of a sing single request it was treated as if",
    "start": "1914399",
    "end": "1920320"
  },
  {
    "text": "you could freely call the cash as often as you wanted to so that at Peak we were",
    "start": "1920320",
    "end": "1925720"
  },
  {
    "text": "seeing load of 800,000 to a million requests per second against the service tier the fallback was a logical one when",
    "start": "1925720",
    "end": "1932679"
  },
  {
    "text": "you were thinking about it from a oneoff perspective I just got a cash Miss let me go call into the service the problem",
    "start": "1932679",
    "end": "1939080"
  },
  {
    "text": "was the fallback also when the entire EV cash layer went down was still a fallback to the service and the database",
    "start": "1939080",
    "end": "1945519"
  },
  {
    "text": "and that's the anti pattern the service in the database couldn't possibly handle the load that EVC was shouldering and so the right",
    "start": "1945519",
    "end": "1952960"
  },
  {
    "text": "approach uh was to fail fast so with this excessive load we saw EV Cas go",
    "start": "1952960",
    "end": "1959080"
  },
  {
    "text": "down it took down the entire subscriber service and the solutions were several",
    "start": "1959080",
    "end": "1964919"
  },
  {
    "text": "the first thing is is stop hammering away at the same set of systems for batch and real",
    "start": "1964919",
    "end": "1970960"
  },
  {
    "text": "time do request level caching so you're not repeatedly calling the same service over and over again as if it was free",
    "start": "1970960",
    "end": "1978039"
  },
  {
    "text": "make that first hit expensive and the rest of them free throughout the life cycle of the request and something we",
    "start": "1978039",
    "end": "1983519"
  },
  {
    "text": "haven't done yet but will uh very likely do is embed a secure token within the",
    "start": "1983519",
    "end": "1988840"
  },
  {
    "text": "devices themselves that they pass with their requests so if the subscriber service is unavailable you can fall back",
    "start": "1988840",
    "end": "1995240"
  },
  {
    "text": "to that data stored in that encrypted token it should have enough information to identify the customer and do the",
    "start": "1995240",
    "end": "2000639"
  },
  {
    "text": "fundamental operations for uh keeping the service up for that customer they can get some kind of reasonable",
    "start": "2000639",
    "end": "2005960"
  },
  {
    "text": "experience and then of course you want to put this under load using chaos exercises using",
    "start": "2005960",
    "end": "2011720"
  },
  {
    "text": "tools like fit now let's move on and let's talk about variance this is Variety in your",
    "start": "2011720",
    "end": "2017840"
  },
  {
    "text": "architecture and the more variance you have the greater your challenges are going to be because it increases the",
    "start": "2017840",
    "end": "2023120"
  },
  {
    "text": "complexity of the environment you're managing I'm going to talk about two use cases one is operational drift that",
    "start": "2023120",
    "end": "2030360"
  },
  {
    "text": "happens over time the other is the introduction that we've had recently over the last few years of new languages",
    "start": "2030360",
    "end": "2036679"
  },
  {
    "text": "and containers within our architecture operational drift is",
    "start": "2036679",
    "end": "2041720"
  },
  {
    "text": "something that's unintentional we don't do this on purpose but it does happen quite",
    "start": "2041720",
    "end": "2047639"
  },
  {
    "start": "2045000",
    "end": "2045000"
  },
  {
    "text": "naturally drift over time looks something like you know setting your alert alert thresholds and keeping those",
    "start": "2047639",
    "end": "2053200"
  },
  {
    "text": "maintained because those will change over time your timeouts and your retry settings might change maybe you've added",
    "start": "2053200",
    "end": "2058800"
  },
  {
    "text": "a new batch operation that should take longer your throughput will likely degrade over time unless you're",
    "start": "2058800",
    "end": "2064158"
  },
  {
    "text": "constantly squeeze testing because as you add new functionality that's likely to slow things things down and then you can also get this drift sort of across",
    "start": "2064159",
    "end": "2070960"
  },
  {
    "text": "Services let's say you found a great practice for keeping Services up and running but only half of your teams have",
    "start": "2070960",
    "end": "2076599"
  },
  {
    "text": "actually embraced that practice so the first time we go and reach out to teams and say hey let's go",
    "start": "2076599",
    "end": "2082878"
  },
  {
    "text": "figure this out let's go get your alerts all tuned let's do some squeeze testing let's let's get you all tuned up and",
    "start": "2082879",
    "end": "2088599"
  },
  {
    "text": "make sure service is going to be highly reliable and well performant and usually we get a pretty enthusiastic response on",
    "start": "2088599",
    "end": "2094679"
  },
  {
    "text": "that first pass but humans are not very good at doing this very repetitive sort of manual stuff uh most people would",
    "start": "2094679",
    "end": "2102000"
  },
  {
    "text": "rather be doing something else or they need to do their day job like go and build product for their product managers the next AB test we need to roll out and",
    "start": "2102000",
    "end": "2109400"
  },
  {
    "text": "so the next time we go we tend not to get that same level of enthusiasm when we say hey sorry but you're going to",
    "start": "2109400",
    "end": "2115160"
  },
  {
    "text": "need to go do this again uh you can really take a lesson again from biology with this concept of",
    "start": "2115160",
    "end": "2121920"
  },
  {
    "start": "2118000",
    "end": "2118000"
  },
  {
    "text": "autonomic the the autonomic nervous system there's lots of functions that your body just takes care of and you",
    "start": "2121920",
    "end": "2128200"
  },
  {
    "text": "don't have to think about it you don't have to think about how you digest food you don't have to think about breathing",
    "start": "2128200",
    "end": "2133680"
  },
  {
    "text": "or you would die when you fell asleep and likewise you want to make sure you set up an environment where you",
    "start": "2133680",
    "end": "2139480"
  },
  {
    "start": "2137000",
    "end": "2137000"
  },
  {
    "text": "can make as many of these best practices subconscious or not even not required",
    "start": "2139480",
    "end": "2145400"
  },
  {
    "text": "for people to really spend a lot of time thinking about and the way that we've done that at Netflix is by building out",
    "start": "2145400",
    "end": "2150640"
  },
  {
    "text": "a cycle of continuous learning and Automation and typically that learning comes from some kind of incident we just",
    "start": "2150640",
    "end": "2157960"
  },
  {
    "text": "had an outage we get people on a call we hopefully alleviate customer pain we do",
    "start": "2157960",
    "end": "2164160"
  },
  {
    "text": "an incident review to make sure that we understand what happened and then immediately do some kind of remediation hopefully to make sure at least",
    "start": "2164160",
    "end": "2170440"
  },
  {
    "text": "tactically that that works well but then we do some analysis is this a new",
    "start": "2170440",
    "end": "2176119"
  },
  {
    "text": "pattern is there a Best practice that we can derive from this is this a recurring issue where if we could come up with",
    "start": "2176119",
    "end": "2181880"
  },
  {
    "text": "some kind of solution it would be very high impact and then of course you want to automate that where ever possible and",
    "start": "2181880",
    "end": "2189319"
  },
  {
    "text": "then of course you want to drive adoption to make sure that that gets integrated this is how knowledge becomes code and gets integrated directly into",
    "start": "2189319",
    "end": "2196560"
  },
  {
    "text": "your microservice architecture over the years we've accumulated a set of these best",
    "start": "2196560",
    "end": "2202319"
  },
  {
    "start": "2199000",
    "end": "2199000"
  },
  {
    "text": "practices we call it production ready this is a checklist and it's a program within Netflix virtually every single",
    "start": "2202319",
    "end": "2208599"
  },
  {
    "text": "one of these has some kind of automation behind it and a continuous Improvement model where we're trying to to make them",
    "start": "2208599",
    "end": "2215000"
  },
  {
    "text": "better whether that's having a great alerting strategy making sure you're using Auto scaling using chaos monkey to",
    "start": "2215000",
    "end": "2220960"
  },
  {
    "text": "test out your stateless service doing red black pushes to make sure that you can roll back quickly and one of the",
    "start": "2220960",
    "end": "2226720"
  },
  {
    "text": "really important ones staging your deployments so that you don't push out bad code to all regions",
    "start": "2226720",
    "end": "2234040"
  },
  {
    "text": "simultaneously of course all of these are automated and now I'm going to jump over",
    "start": "2234079",
    "end": "2239800"
  },
  {
    "text": "I'm going to talk about polyglot and containers this is something that's come about really just in the last few years",
    "start": "2239800",
    "end": "2245359"
  },
  {
    "text": "and this is an intentional form of variance these are people people consciously going I want to introduce new technologies into the microservice",
    "start": "2245359",
    "end": "2253680"
  },
  {
    "text": "architecture when I first started managing operations engineering about three years ago we came up with this",
    "start": "2253680",
    "end": "2259400"
  },
  {
    "text": "construct of the paved road the paveed road was a set of sort best breed technologies that worked best for",
    "start": "2259400",
    "end": "2265520"
  },
  {
    "text": "Netflix with Automation and integration sort of baked in so that our developers could be as agile as possible that if",
    "start": "2265520",
    "end": "2272160"
  },
  {
    "text": "they got on the pave Road they were going to have a really really efficient experience we focused on Java and what",
    "start": "2272160",
    "end": "2279280"
  },
  {
    "text": "I'm now going to call barebones ec2 which is a bit of an oxymoron um but basically using ECT as",
    "start": "2279280",
    "end": "2284920"
  },
  {
    "text": "ec2 as opposed to Containers while we were building that out and very proud of ourselves for",
    "start": "2284920",
    "end": "2290960"
  },
  {
    "text": "getting this working well our internal customers our engineering customers were going off-road and building out their",
    "start": "2290960",
    "end": "2297720"
  },
  {
    "text": "own paths started innocuously enough with python doing operational work made",
    "start": "2297720",
    "end": "2303400"
  },
  {
    "text": "perfect sense we had some back office applications written in Ruby",
    "start": "2303400",
    "end": "2308839"
  },
  {
    "text": "and then things got sort of interesting when our web team said you know we're going to abandon the jvm and we're actually going to rewrite the web",
    "start": "2308839",
    "end": "2314200"
  },
  {
    "text": "application in node js that's when things got very interesting and then as we add it in Docker Things become very",
    "start": "2314200",
    "end": "2322520"
  },
  {
    "text": "challenging now the reasons we did this were logical it made a lot of sense to embrace these",
    "start": "2322520",
    "end": "2328839"
  },
  {
    "text": "Technologies however things got real when we start talking about putting these Technologies into the critical",
    "start": "2328839",
    "end": "2334880"
  },
  {
    "start": "2329000",
    "end": "2329000"
  },
  {
    "text": "path for our customers and it actually makes a lot of sense to do so let me tell you",
    "start": "2334880",
    "end": "2340000"
  },
  {
    "text": "why so the API Gateway actually had a capability or has a capability to",
    "start": "2340000",
    "end": "2345240"
  },
  {
    "text": "integrate groovy scripts that can act as endpoints for the UI teams and they can verion every single one of those scripts",
    "start": "2345240",
    "end": "2351839"
  },
  {
    "text": "so that as they make changes they can deploy a change out into production that has a into onto devices out in the field",
    "start": "2351839",
    "end": "2358040"
  },
  {
    "text": "and have that sync up with that endpoint that's running within the API Gateway but this is another example of the",
    "start": "2358040",
    "end": "2364640"
  },
  {
    "text": "monolith lots of code running in process cess with a lot of variety and people",
    "start": "2364640",
    "end": "2369960"
  },
  {
    "text": "with different understandings of how that service works and we had situations where endpoints got deleted or where the",
    "start": "2369960",
    "end": "2376680"
  },
  {
    "text": "script or some script went rogue generated too many versions of something and ate up all of the memory available",
    "start": "2376680",
    "end": "2383040"
  },
  {
    "text": "on the API service so again a monolithic pattern to be avoided and so the logical",
    "start": "2383040",
    "end": "2389119"
  },
  {
    "text": "solution is to take those endpoints and push them out of the API service and in",
    "start": "2389119",
    "end": "2394960"
  },
  {
    "text": "this case the plan is to move those into node.js little nodejs applications",
    "start": "2394960",
    "end": "2400640"
  },
  {
    "text": "running in Docker containers and then those would of course call back into the API service",
    "start": "2400640",
    "end": "2406160"
  },
  {
    "text": "and now we've got our separation of concerns again now we can isolate any breakage or challenges that are",
    "start": "2406160",
    "end": "2412400"
  },
  {
    "text": "introduced by those node applications now this doesn't come with a CO come without a cost in fact there's",
    "start": "2412400",
    "end": "2419200"
  },
  {
    "start": "2416000",
    "end": "2416000"
  },
  {
    "text": "a rather large cost that comes with these kinds of changes and so it's very important to be thoughtful about it the",
    "start": "2419200",
    "end": "2425880"
  },
  {
    "text": "UI teams that were using the groovy scripts were used to a very efficient model for how they did their development",
    "start": "2425880",
    "end": "2431760"
  },
  {
    "text": "they didn't have to spend a lot of time managing the infrastructure they got to write scripts check them in and they were done and so trying to replicate",
    "start": "2431760",
    "end": "2438760"
  },
  {
    "text": "that with a nodejs and Docker container methodology takes a substantial amount of additional",
    "start": "2438760",
    "end": "2445079"
  },
  {
    "text": "work the insight and triage capabilities are different if you're running in a container and you're asking about how much CPU is being consumed or how much",
    "start": "2445079",
    "end": "2451720"
  },
  {
    "text": "memory you have to treat that differently you have to have different tooling and you have to instrument those applications in different ways we have a",
    "start": "2451720",
    "end": "2459280"
  },
  {
    "text": "base Ami that's was pretty generic that was used across all of our applications now that's being fragmented out and more",
    "start": "2459280",
    "end": "2466640"
  },
  {
    "text": "specialized node management is huge there is no architecture out there or no",
    "start": "2466640",
    "end": "2471960"
  },
  {
    "text": "technology out there today that we can use out of the box that allows us to manage these applications the way that",
    "start": "2471960",
    "end": "2477280"
  },
  {
    "text": "we want to in the cloud and so there's an entirely new tier called Titus being built that allows us to do all the",
    "start": "2477280",
    "end": "2483880"
  },
  {
    "text": "workload management and the equivalent of autoscaling and node rep placement and all of that so Netflix is making a",
    "start": "2483880",
    "end": "2489480"
  },
  {
    "text": "fairly huge investment in that area and then all the work we did over the years running in the jvm with our platform",
    "start": "2489480",
    "end": "2496400"
  },
  {
    "text": "code uh making people efficient by providing a bunch of services now we have decisions to make do we duplicate",
    "start": "2496400",
    "end": "2502720"
  },
  {
    "text": "them do we not provide them and let those teams running in node have to write their own direct rest calls and",
    "start": "2502720",
    "end": "2507760"
  },
  {
    "text": "manage all of that themselves uh so that's being discussed and there's a certain amount of compromise happening there some of the platform functionality",
    "start": "2507760",
    "end": "2514599"
  },
  {
    "text": "is going to be written natively in node for example and then of course anytime you introduce a new technology into production we saw",
    "start": "2514599",
    "end": "2521280"
  },
  {
    "text": "this when we move to the cloud we saw this every time we've done a major re architecture you're going to break things and they things will break in",
    "start": "2521280",
    "end": "2527760"
  },
  {
    "text": "interesting and new ways that you haven't yet encountered and so there's a learning curve before you're actually",
    "start": "2527760",
    "end": "2532960"
  },
  {
    "text": "going to become good at this and so rather than one pave road we now have a proliferation of pave roads",
    "start": "2532960",
    "end": "2540599"
  },
  {
    "text": "and this is a real challenge for the teams that are centralized that that are finite that are trying to provide support to the rest of the engineering",
    "start": "2540599",
    "end": "2546839"
  },
  {
    "text": "organiz a so we had a big debate about this a few months ago and The Stance where we landed was the most important",
    "start": "2546839",
    "end": "2554000"
  },
  {
    "start": "2547000",
    "end": "2547000"
  },
  {
    "text": "thing was to make sure that we really raised awareness of cost so that when we're making these architectural decisions people are well informed and",
    "start": "2554000",
    "end": "2559880"
  },
  {
    "text": "they can make good choices we're going to constrain the amount of support and focus primarily",
    "start": "2559880",
    "end": "2565960"
  },
  {
    "text": "still on jvm but obviously this new use case of node and doncker is pretty critical and so there's a lot of energy",
    "start": "2565960",
    "end": "2571480"
  },
  {
    "text": "going into supporting that and then of course logically logically we'd have to prioritize by impact with a finite",
    "start": "2571480",
    "end": "2577880"
  },
  {
    "text": "number of people who can work on these types of things and where possible seek reusable Solutions delivery is",
    "start": "2577880",
    "end": "2583880"
  },
  {
    "text": "relatively generic so you can probably support a wide variety of languages and platforms with delivery um so that's one example there",
    "start": "2583880",
    "end": "2591200"
  },
  {
    "text": "one other example is client libraries that are relatively simple can potentially be autogenerated so you can",
    "start": "2591200",
    "end": "2596880"
  },
  {
    "text": "create a Ruby version and a python version and a Java version so we're seeking those kinds of solutions again",
    "start": "2596880",
    "end": "2602520"
  },
  {
    "text": "this is one of those places where there's no one cut and dry right way to do this um hopefully this is good food",
    "start": "2602520",
    "end": "2608440"
  },
  {
    "text": "for thought if you're dealing with these kinds of situations so let's talk about that last element now",
    "start": "2608440",
    "end": "2615640"
  },
  {
    "text": "change what we do know is that when we change when we are in the office when we",
    "start": "2615640",
    "end": "2621280"
  },
  {
    "text": "are making changes in production we break things this is outages by day of week lo and behold on the weekend things",
    "start": "2621280",
    "end": "2627240"
  },
  {
    "text": "tend to break less here's the really interesting one by time of day 9:00 in the morning boom time to push changes",
    "start": "2627240",
    "end": "2634240"
  },
  {
    "text": "time to break Netflix so um we know that that happens um and so",
    "start": "2634240",
    "end": "2640559"
  },
  {
    "text": "the fundamental question here is how do you achieve velocity but with confidence how do I move as fast as possible and",
    "start": "2640559",
    "end": "2646400"
  },
  {
    "text": "without worrying about breaking things all the time the way that we address that is by",
    "start": "2646400",
    "end": "2651839"
  },
  {
    "start": "2650000",
    "end": "2650000"
  },
  {
    "text": "creating a new delivery platform this replaced Asgard which was our Workhorse for many years this new platform was a",
    "start": "2651839",
    "end": "2659119"
  },
  {
    "text": "global Cloud management platform but also a delivery an automated delivery system and here's what's really critical",
    "start": "2659119",
    "end": "2666400"
  },
  {
    "start": "2664000",
    "end": "2664000"
  },
  {
    "text": "here spinner was designed to integrate best practices such that as things are",
    "start": "2666400",
    "end": "2672079"
  },
  {
    "text": "deploying out into production we can integrate these Lessons Learned these automated uh components directly into",
    "start": "2672079",
    "end": "2678160"
  },
  {
    "text": "the path for delivery in the pipeline we see here it's using two things that we value highly automated Canary analysis",
    "start": "2678160",
    "end": "2685079"
  },
  {
    "text": "where you put a trickle of traffic or some traffic into a new version of the code with live production traffic and",
    "start": "2685079",
    "end": "2691319"
  },
  {
    "text": "then you determine whether or not the new code is as good or better than the old code and Stage deployment ments",
    "start": "2691319",
    "end": "2697720"
  },
  {
    "text": "where you want to make sure you deploy uh I'm getting the 5 minute sign you want to make sure you deploy one region",
    "start": "2697720",
    "end": "2704079"
  },
  {
    "text": "at a time so that if something breaks you can go to other regions you can see the list here of other functions that",
    "start": "2704079",
    "end": "2710200"
  },
  {
    "text": "are integrated and long term the production ready checklist we talked about earlier is fodder for a whole wide",
    "start": "2710200",
    "end": "2716680"
  },
  {
    "text": "variety of things that longterm should be integrated into the delivery pipeline I'm cheating a little bit here",
    "start": "2716680",
    "end": "2723599"
  },
  {
    "text": "because of time constraints luckily I can um and I did a talk last year",
    "start": "2723599",
    "end": "2728720"
  },
  {
    "text": "reinvent that might be of interest to you if you really want to dig into how these functions deeply integrate with",
    "start": "2728720",
    "end": "2733960"
  },
  {
    "text": "each other how does the production ready performance and reliability chaos engineering integrate with Spiner and",
    "start": "2733960",
    "end": "2739559"
  },
  {
    "text": "continuous delivery monitoring systems Etc so I would encourage you to check it out now I'm going to close this out with",
    "start": "2739559",
    "end": "2746480"
  },
  {
    "text": "a short story about organization and architecture in the early days there was",
    "start": "2746480",
    "end": "2752760"
  },
  {
    "start": "2750000",
    "end": "2750000"
  },
  {
    "text": "a team called electronic delivery that's what actually the first version of streaming was called electronic delivery",
    "start": "2752760",
    "end": "2757960"
  },
  {
    "text": "we didn't have a term streaming back then in fact originally we were going to do download and had a hard drive in some",
    "start": "2757960",
    "end": "2763200"
  },
  {
    "text": "kind of device and the very first version of the Netflix ready device platform looks something like this it",
    "start": "2763200",
    "end": "2768839"
  },
  {
    "text": "had fundamental capabilities like networking capabilities built in the platform functionality around security",
    "start": "2768839",
    "end": "2774440"
  },
  {
    "text": "activation playback and then there was a user interface the user interface was actually relatively simple at the time",
    "start": "2774440",
    "end": "2781839"
  },
  {
    "text": "it was using something called a que reader where you'd go to the website and add something into your queue and then go to the device and see if it show",
    "start": "2781839",
    "end": "2786880"
  },
  {
    "text": "showed up what was also nice is this was developed under one organization which",
    "start": "2786880",
    "end": "2792160"
  },
  {
    "text": "was called electronic delivery and so the client team and the server team were all one organization so they had this great tight working relationship it was",
    "start": "2792160",
    "end": "2799040"
  },
  {
    "text": "very collaborative and the design that they had developed or that we had developed was XML pay XML base payloads",
    "start": "2799040",
    "end": "2806119"
  },
  {
    "text": "custom response codes within those XML responses and versioned firmware",
    "start": "2806119",
    "end": "2811160"
  },
  {
    "text": "releases that would go out over long Cycles now in parallel the Netflix API",
    "start": "2811160",
    "end": "2816480"
  },
  {
    "text": "was created for the DVD business to try and stimulate applications external",
    "start": "2816480",
    "end": "2821520"
  },
  {
    "text": "applications that would drive traffic back to Netflix we said let a thousand flowers bloom we hoped that this would",
    "start": "2821520",
    "end": "2826839"
  },
  {
    "text": "be wildly successful it really wasn't it didn't really generate a huge amount of value to Netflix however the Netflix API",
    "start": "2826839",
    "end": "2835040"
  },
  {
    "text": "was well poised to help us out with our UI Innovation it contained content metadata",
    "start": "2835040",
    "end": "2841200"
  },
  {
    "text": "so all the data about what movies are available and could generate lists and it had a generalized rest API Json based",
    "start": "2841200",
    "end": "2848839"
  },
  {
    "text": "schema HTTP based response codes this starting to feel like a more modern architecture here and it did Du as an",
    "start": "2848839",
    "end": "2855079"
  },
  {
    "text": "ooff security model because that's what was required at the time for external apps that evolved over time to something else but what matters here is that from",
    "start": "2855079",
    "end": "2862640"
  },
  {
    "start": "2861000",
    "end": "2861000"
  },
  {
    "text": "a device perspective we now had fragmentation across these two tiers we now had two Edge Services functioning in",
    "start": "2862640",
    "end": "2869760"
  },
  {
    "text": "very very different ways one was rest base Json ooth the other was RPC XML and",
    "start": "2869760",
    "end": "2876559"
  },
  {
    "text": "a Custom Security mechanism for dealing with tokens and there was a firewall essentially between these two teams in",
    "start": "2876559",
    "end": "2882960"
  },
  {
    "text": "fact because the API originally wasn't as well scaled as nccp there was a lot of frustration between teams every time",
    "start": "2882960",
    "end": "2888680"
  },
  {
    "text": "API went down my team got called and so there was some friction there we really wanted them to be able to get that up and running but this distinction this",
    "start": "2888680",
    "end": "2895920"
  },
  {
    "text": "unique Services protocols schemas security models meant that God forbid you were a client developer and you had",
    "start": "2895920",
    "end": "2901400"
  },
  {
    "text": "to span both of these worlds and try to get work done you were switching between completely different contexts and we",
    "start": "2901400",
    "end": "2906920"
  },
  {
    "text": "actually had examples where we wanted to be able to do things like return limited duration licenses back with the list of",
    "start": "2906920",
    "end": "2913240"
  },
  {
    "text": "movies that were coming back for the user interface so when I you click through and hit play it was instantaneous as opposed to having to",
    "start": "2913240",
    "end": "2919680"
  },
  {
    "text": "make another roundtrip call to do DRM so because of this I had a",
    "start": "2919680",
    "end": "2925200"
  },
  {
    "text": "conversation with one of the engineers a very senior engineer at Netflix and I asked him what's the right long-term",
    "start": "2925200",
    "end": "2932160"
  },
  {
    "text": "architecture can we do an exercise here and go figure this out and this is a gentleman named out and of course Very",
    "start": "2932160",
    "end": "2938000"
  },
  {
    "text": "thoughtfully the first question he had to me seconds later was do you care about the organizational implications",
    "start": "2938000",
    "end": "2944079"
  },
  {
    "text": "what happens if we have to integrate these things what happens we have to break the way we do things well this is very relevant to",
    "start": "2944079",
    "end": "2950680"
  },
  {
    "start": "2949000",
    "end": "2949000"
  },
  {
    "text": "something called Conway's law does anybody I'm hearing some laughter so whoever laughed first uh",
    "start": "2950680",
    "end": "2957520"
  },
  {
    "text": "tell me what Conway's law is relationship your servic",
    "start": "2957520",
    "end": "2964640"
  },
  {
    "text": "relationship all right good here's the sort of more sort of uh detailed",
    "start": "2964640",
    "end": "2970200"
  },
  {
    "text": "explanation organizations which Design Systems are constrained to produce designs which are copies of the communication structures of these",
    "start": "2970200",
    "end": "2976200"
  },
  {
    "text": "organizations they're very abstract I like this one a little better any piece of software reflects the organizational",
    "start": "2976200",
    "end": "2982040"
  },
  {
    "text": "structure that produced it here's my favorite one you have four teams working",
    "start": "2982040",
    "end": "2987119"
  },
  {
    "text": "on a compiler you'll end up with a four pass compiler so Netflix had a forast",
    "start": "2987119",
    "end": "2992960"
  },
  {
    "text": "compiler uh that's where we were and the problem with this is this is the tail wagging the dog this is not Solutions",
    "start": "2992960",
    "end": "3000119"
  },
  {
    "text": "first this is organization first that was driving the architecture that we had and when we think about this this is",
    "start": "3000119",
    "end": "3006799"
  },
  {
    "text": "this is essentially going back to this illustration we had before we had our Gateway we had nccp which is handling",
    "start": "3006799",
    "end": "3011880"
  },
  {
    "text": "Legacy devices plus playback support we had API this was just a mess and so the",
    "start": "3011880",
    "end": "3017359"
  },
  {
    "start": "3017000",
    "end": "3017000"
  },
  {
    "text": "architecture we ended up developing was something we call Blade Runner because we're talking about the edge services",
    "start": "3017359",
    "end": "3023040"
  },
  {
    "text": "and the capabilities of nccp became decomposed and integrated directly into",
    "start": "3023040",
    "end": "3028680"
  },
  {
    "text": "the Zu proxy layer the API Gateway and that appropriate pieces were pushed out into new smaller microservices that that",
    "start": "3028680",
    "end": "3036359"
  },
  {
    "text": "handle more fundamental capabilities like security and features around playback like subtitles and dubs and",
    "start": "3036359",
    "end": "3042760"
  },
  {
    "text": "serving metadata so the Lessons Learned here",
    "start": "3042760",
    "end": "3047799"
  },
  {
    "start": "3045000",
    "end": "3045000"
  },
  {
    "text": "this gave us greater capability and it gave us greater agility long term by",
    "start": "3047799",
    "end": "3052839"
  },
  {
    "text": "unifying these things and thinking about the client and what their experience was were able to produce something much more",
    "start": "3052839",
    "end": "3058040"
  },
  {
    "text": "powerful and we ended up refactoring the organization in response I ended up actually moving on my whole team got",
    "start": "3058040",
    "end": "3063799"
  },
  {
    "text": "folded under the Netflix API team and that's when I moved over to operations engineering and that was the right thing",
    "start": "3063799",
    "end": "3069839"
  },
  {
    "text": "to do for the business Lessons Learned Solutions first team second and be",
    "start": "3069839",
    "end": "3075680"
  },
  {
    "text": "willing to make those organizational changes so I'm going to briefly recap I have zero minutes I'm going to go over",
    "start": "3075680",
    "end": "3081720"
  },
  {
    "text": "just a couple of minutes uh just so we can wrap up cleanly here so microservice architectures are complex and organic",
    "start": "3081720",
    "end": "3088760"
  },
  {
    "text": "and it's best to think about them that way and their health depends on a discipline and about injecting chaos",
    "start": "3088760",
    "end": "3095079"
  },
  {
    "text": "into that environment on a regular basis for dependencies you want to use circuit breakers and fallbacks and apply chaos",
    "start": "3095079",
    "end": "3102799"
  },
  {
    "start": "3097000",
    "end": "3097000"
  },
  {
    "text": "you want to have simple clients eventual consistency and a multi- region failover",
    "start": "3102799",
    "end": "3108599"
  },
  {
    "text": "strategy for scale Embrace autoscaling please it's so simple and it's a great",
    "start": "3108599",
    "end": "3114040"
  },
  {
    "text": "benefit reduce single points of failure partition your workloads have a failur",
    "start": "3114040",
    "end": "3119079"
  },
  {
    "text": "driven design like embedding requests and doing request level caching and of course do chaos but again chaos under",
    "start": "3119079",
    "end": "3124559"
  },
  {
    "text": "load to make sure that what you think is true is actually true for variance engineer your operations as much as",
    "start": "3124559",
    "end": "3131359"
  },
  {
    "text": "possible to make those automatic understand and socialize the cost of variance and prioritize the",
    "start": "3131359",
    "end": "3137640"
  },
  {
    "text": "support if you have a centralized organization and most most organizations do prioritize by impact to make sure",
    "start": "3137640",
    "end": "3144200"
  },
  {
    "text": "that you're you're as efficient as possible on change you want automated delivery and you want to integrate your",
    "start": "3144200",
    "end": "3149400"
  },
  {
    "text": "best practices on a regular basis and again Solutions first team second",
    "start": "3149400",
    "end": "3155440"
  },
  {
    "text": "there's a lot of technologies that support these strategies that Netflix has open sourced if you're not familiar",
    "start": "3155440",
    "end": "3161000"
  },
  {
    "text": "with it I think a lot of people are um go check out Netflix OSS and also check out the Netflix Tech",
    "start": "3161000",
    "end": "3166960"
  },
  {
    "text": "blog where there are regular announcements about how things are done at Netflix how things are done at scale",
    "start": "3166960",
    "end": "3172160"
  },
  {
    "text": "announcements about new open- source tools like visceral which is the tool that generated the visuals we've been",
    "start": "3172160",
    "end": "3177200"
  },
  {
    "text": "looking at throughout and I think we're out of time at this point um do we have time for",
    "start": "3177200",
    "end": "3183640"
  },
  {
    "start": "3180000",
    "end": "3180000"
  },
  {
    "text": "questions or should I just take it out outside if you can all right well I push the limits thank you very much thank you",
    "start": "3183640",
    "end": "3189520"
  },
  {
    "text": "everybody",
    "start": "3189520",
    "end": "3192520"
  }
]