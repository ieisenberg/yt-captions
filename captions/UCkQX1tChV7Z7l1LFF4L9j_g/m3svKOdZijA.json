[
  {
    "text": "[Music]",
    "start": "820",
    "end": "9370"
  },
  {
    "text": "okay um I'm going to get started because it's the last Talk of the day everybody probably wants to go get a drink I want",
    "start": "9719",
    "end": "15400"
  },
  {
    "text": "to go get a drink is there after parties does anybody know all right cool thank",
    "start": "15400",
    "end": "20960"
  },
  {
    "text": "somebody grab me and take me to one um so you can yell at me for this talk so um this talk I originally wanted",
    "start": "20960",
    "end": "30080"
  },
  {
    "text": "the talk about um lenses and traversible um yeah but it turned out",
    "start": "30080",
    "end": "36640"
  },
  {
    "text": "that um you know I've given a couple similar talks and if you've seen um uh me talk at HTML 5 Dev comp before I've",
    "start": "36640",
    "end": "43600"
  },
  {
    "text": "spoken about Point free and um type classes and this is kind of a mixture of all that I don't think I could have uh",
    "start": "43600",
    "end": "50920"
  },
  {
    "text": "written a talk about anything else because it's people are still trying to get their heads wrapped around this and",
    "start": "50920",
    "end": "56920"
  },
  {
    "text": "and I guess I am too and I don't want to go too far without hitting the basics so",
    "start": "56920",
    "end": "62920"
  },
  {
    "text": "um pretty much going to talk about uh Point free programming and type classes all in the context of",
    "start": "62920",
    "end": "69720"
  },
  {
    "text": "underscore um so yeah and I'm going to bash underscore like crazy you guys not",
    "start": "69720",
    "end": "76119"
  },
  {
    "text": "really not so okay so I I do love underscore I think it's great um so I'm",
    "start": "76119",
    "end": "81320"
  },
  {
    "text": "not I'm not here to make fun of it or say it's terrible or be like low Dash rules and you know it doesn't work on node and things like that um so uh I am",
    "start": "81320",
    "end": "90840"
  },
  {
    "text": "here to talk about uh functional programming and uh I think that underscore does a terrible job of of",
    "start": "90840",
    "end": "98280"
  },
  {
    "text": "saying functional you know it says it's functional but it's not really um when",
    "start": "98280",
    "end": "103799"
  },
  {
    "text": "you compare it to a real functional language um and you know I'll read blog posts all the time on things like oh",
    "start": "103799",
    "end": "111479"
  },
  {
    "text": "yeah here's the functional way this means I'm passing arguments around and I'm really verbose and it's basically procedural but that's what you know I",
    "start": "111479",
    "end": "118479"
  },
  {
    "text": "think the perception of functional program is um and it's getting better and better every year uh but underscore",
    "start": "118479",
    "end": "124200"
  },
  {
    "text": "is marketing themselves saying that they have uh these these functions um and I",
    "start": "124200",
    "end": "129679"
  },
  {
    "text": "want to examine that and kind of take a close look at what you would really do uh and compare that to what underscore",
    "start": "129679",
    "end": "135239"
  },
  {
    "text": "is doing um so we could see what turns out you know it can be a beautiful Paradigm all right so the agenda is",
    "start": "135239",
    "end": "142680"
  },
  {
    "text": "currying composition funs and random stuff um so if you already know all this",
    "start": "142680",
    "end": "147800"
  },
  {
    "text": "stuff I won't be offended if you leave we're going to go over it okay so currying um I just put that in there to",
    "start": "147800",
    "end": "155319"
  },
  {
    "text": "wake you guys up because it's like the last Talk of the day and it's really exciting",
    "start": "155319",
    "end": "160800"
  },
  {
    "text": "background uh so currying is just a function that takes uh keeps returning a new function until it gets all its",
    "start": "160800",
    "end": "167400"
  },
  {
    "text": "arguments um and we can look at that a little bit closer here so with this",
    "start": "167400",
    "end": "174800"
  },
  {
    "text": "function add um I should point out these type signatures are just comments um um",
    "start": "174800",
    "end": "180280"
  },
  {
    "text": "we've been working on a type parser but haven't gotten too far so uh with ADD uh",
    "start": "180280",
    "end": "186159"
  },
  {
    "text": "we take X and we return a new function that takes the Y and then we add them together and uh you can call it we have",
    "start": "186159",
    "end": "193239"
  },
  {
    "text": "add three and when we call add with three we we say that's partially",
    "start": "193239",
    "end": "198319"
  },
  {
    "text": "applying it with three then we get a new function back and that function we can call with four we'll get seven and we",
    "start": "198319",
    "end": "205480"
  },
  {
    "text": "can call it again with five and get eight so it's like it made us a new function uh we just gave it an argument",
    "start": "205480",
    "end": "211040"
  },
  {
    "text": "and we got a new function back um and then we have this like weird butt",
    "start": "211040",
    "end": "216439"
  },
  {
    "text": "looking thing if we try to call it all together and that's not cool um so wujs",
    "start": "216439",
    "end": "222840"
  },
  {
    "text": "has an awesome uh function called autoc Curry and in autoc curry you basically",
    "start": "222840",
    "end": "229400"
  },
  {
    "text": "you can just keep throwing arguments at a function and it'll just keep returning you a function uh until it gets all its",
    "start": "229400",
    "end": "235799"
  },
  {
    "text": "arguments so you can see there in the bottom they're just like parentheses and you know any combination you can think",
    "start": "235799",
    "end": "241680"
  },
  {
    "text": "of and you still get a function back until it gets all its arguments uh so we've just stolen that function and extended the function prototype with it",
    "start": "241680",
    "end": "249280"
  },
  {
    "text": "uh so now um with uh add you can just slap Auto Curry at the end and when we",
    "start": "249280",
    "end": "256079"
  },
  {
    "text": "call add three there uh we get a new function back that's just waiting for its last argument and it works just like",
    "start": "256079",
    "end": "261919"
  },
  {
    "text": "before um except we don't have that weird but looking thing it's just you can call it all together so awesome um",
    "start": "261919",
    "end": "270080"
  },
  {
    "text": "oh I should also say just raise your hand or walk up to the mic if you have any questions um and if you're taking",
    "start": "270080",
    "end": "275960"
  },
  {
    "text": "the class in a couple days you'll probably see a couple of these slides over and over again so um but they'll be way more in",
    "start": "275960",
    "end": "282000"
  },
  {
    "text": "depth okay so here's another example um full name full name takes uh three",
    "start": "282000",
    "end": "288400"
  },
  {
    "text": "arguments here so we can call it with Hunter S Thompson and we get the name out um or we can call it just with the",
    "start": "288400",
    "end": "295240"
  },
  {
    "text": "first um and so we get this new function called Bill something uh and that's",
    "start": "295240",
    "end": "300400"
  },
  {
    "text": "waiting for its middle and last and if we give it that we get Bill Cosby out so um and here's another one we can call",
    "start": "300400",
    "end": "307080"
  },
  {
    "text": "Bill something with just the middle name and uh we'll get Bill Clinton if we give it the last so you can pretty much keep",
    "start": "307080",
    "end": "312600"
  },
  {
    "text": "giving it arguments peace meal if you want um this is just an example of like how you can use it to get a feel for it",
    "start": "312600",
    "end": "319120"
  },
  {
    "text": "so why would we do this well all right so here's a function called modulo uh and if you've ever used modulo",
    "start": "319120",
    "end": "327120"
  },
  {
    "text": "before um you know you pretty much you're going to call it with two I think",
    "start": "327120",
    "end": "332520"
  },
  {
    "text": "that's what I do um so we can make a new function down there called is odd just",
    "start": "332520",
    "end": "337680"
  },
  {
    "text": "by partially applying modulo with the number two and it comes out with zero if it's uh even and one if it's odd so it's",
    "start": "337680",
    "end": "346560"
  },
  {
    "text": "true or false uh so that's that's a pretty cool application of it we've got a new function that's pretty useful just",
    "start": "346560",
    "end": "353680"
  },
  {
    "text": "by partially applying modulo and here's another example we've got this function filter filter and uh",
    "start": "353680",
    "end": "361280"
  },
  {
    "text": "all it's doing is wrapping the native filter uh but uh if we call it with is",
    "start": "361280",
    "end": "366759"
  },
  {
    "text": "OD you know it runs and if we partially apply it with is OD we get a whole new function back uh and uh that's pretty",
    "start": "366759",
    "end": "374800"
  },
  {
    "text": "useful it always get the odd odd numbers out of the array um but what's crazy here is is odd is partially applied",
    "start": "374800",
    "end": "380800"
  },
  {
    "text": "itself right so you have a partially applied is odd with a partially applied filter and we've got a a third function",
    "start": "380800",
    "end": "386639"
  },
  {
    "text": "out of that that's really useful so um this stuff is you know you're building new functions by giving functions",
    "start": "386639",
    "end": "393560"
  },
  {
    "text": "arguments so let's look at an example of that and here's where we're going to examine the underscore way um so let's",
    "start": "393560",
    "end": "401840"
  },
  {
    "text": "take a second to digest this so you have uh we're going to call this with first",
    "start": "401840",
    "end": "407000"
  },
  {
    "text": "two letters here um or that's our function name and it'll just run through an array and return us the first two",
    "start": "407000",
    "end": "414400"
  },
  {
    "text": "letters uh back can everybody see the comment to out one is that cool um so",
    "start": "414400",
    "end": "421039"
  },
  {
    "text": "looking at this we've got a function that takes words we're going to map over those words and for every word uh we're",
    "start": "421039",
    "end": "427160"
  },
  {
    "text": "going to grab the first two uh so I don't know uh in underscore the two is",
    "start": "427160",
    "end": "432360"
  },
  {
    "text": "optional but we're going to pretend it's not here so we uh we can rewrite this in",
    "start": "432360",
    "end": "438319"
  },
  {
    "text": "a way more functional way um let's leave the top one for reference there so here uh if we if we",
    "start": "438319",
    "end": "445960"
  },
  {
    "text": "just examine this um if if if this function took its arguments in the other",
    "start": "445960",
    "end": "452280"
  },
  {
    "text": "order we could partially apply it with two and that'd be pretty useful uh",
    "start": "452280",
    "end": "457720"
  },
  {
    "text": "because then it'd be a function just waiting for its word and if we just take that word off",
    "start": "457720",
    "end": "464319"
  },
  {
    "text": "we could put it in place of this whole function wrapper here since it is a function waiting waiting for a word so",
    "start": "464319",
    "end": "472400"
  },
  {
    "text": "does that make sense you guys with me we've just flipped the arguments and now this is a function since it's partially",
    "start": "472400",
    "end": "478639"
  },
  {
    "text": "applied it'll just get each of these words and run and actually it turns out that map uh if we flip",
    "start": "478639",
    "end": "485479"
  },
  {
    "text": "this then this would be a function these words and these words kind of match up",
    "start": "485479",
    "end": "491199"
  },
  {
    "text": "and we can just take this off now it's a function waiting for words so there we",
    "start": "491199",
    "end": "496680"
  },
  {
    "text": "go and that's all we needed so um it's it's pretty cool with this curring and",
    "start": "496680",
    "end": "502400"
  },
  {
    "text": "partial application thing if underscore did that we could have just done this and it's pretty expressive we could say",
    "start": "502400",
    "end": "508639"
  },
  {
    "text": "hey I just want to map the first two and turns out it's not specific to letters at all we don't need letters there um so",
    "start": "508639",
    "end": "515440"
  },
  {
    "text": "we're just going to I know map the first two here and so I could I could look at",
    "start": "515440",
    "end": "521120"
  },
  {
    "text": "this and say you know I've got words words word word and I've got this whole",
    "start": "521120",
    "end": "526480"
  },
  {
    "text": "ceremony around here um I don't even really need any of that I could just kind of call this in line to be honest",
    "start": "526480",
    "end": "534279"
  },
  {
    "text": "it reads really well to me um so map the first two of these things and that'll work with anything so there's just an",
    "start": "534279",
    "end": "541160"
  },
  {
    "text": "example probably kind of straw Manish but I just wanted to show you guys if you know underscore was a little bit",
    "start": "541160",
    "end": "547760"
  },
  {
    "text": "more functional we could do that so um let's give us a point here on our normal",
    "start": "547760",
    "end": "553959"
  },
  {
    "text": "functional style here um for for being able to remove all the data and be",
    "start": "553959",
    "end": "559480"
  },
  {
    "text": "completely data generic there so it's reusable uh and let's actually get another Point um just to drive it home",
    "start": "559480",
    "end": "566120"
  },
  {
    "text": "that uh you know there's way less code on the screen so it's more maintainable",
    "start": "566120",
    "end": "571360"
  },
  {
    "text": "uh and third just because it didn't even need to exist in the first place um all right so underscores API prevents you",
    "start": "571360",
    "end": "579079"
  },
  {
    "text": "from currying because the arguments are backwards um so that's kind of a bummer",
    "start": "579079",
    "end": "584560"
  },
  {
    "text": "um so yeah there's currying it's got uh you can make generic functions it's like a it's like a little function Factory",
    "start": "584560",
    "end": "590680"
  },
  {
    "text": "and uh you can get pretty pretty tur and concise with your definitions uh and",
    "start": "590680",
    "end": "596120"
  },
  {
    "text": "it's good for composition which we're about to talk about uh does anybody have any questions about that before I go on",
    "start": "596120",
    "end": "601600"
  },
  {
    "text": "because it's kind of important all right cool all right so composition um",
    "start": "601600",
    "end": "608240"
  },
  {
    "text": "composition is uh let's see here well it's in underscore so that's great underscore has compose um and how many",
    "start": "608240",
    "end": "616519"
  },
  {
    "text": "here do you guys use compose here show of hands how many people use compose all right we've got almost a",
    "start": "616519",
    "end": "622760"
  },
  {
    "text": "hand hey all right like four uh how many people here use chain can you raise your",
    "start": "622760",
    "end": "628000"
  },
  {
    "text": "hand if you use chain y like everybody all right um well uh yeah chain is mentioned",
    "start": "628000",
    "end": "635440"
  },
  {
    "text": "like so much throughout the documentation and compose is mentioned in like the release notes and where it's",
    "start": "635440",
    "end": "641000"
  },
  {
    "text": "defined um so let's kind of go over what compose is um so here uh you're pretty",
    "start": "641000",
    "end": "647040"
  },
  {
    "text": "much going to stick two functions together to get a new function uh you're just composing them and it'll run both",
    "start": "647040",
    "end": "653040"
  },
  {
    "text": "functions right to left let's look at that a little closer here uh so if you want to write a really really terribly",
    "start": "653040",
    "end": "660240"
  },
  {
    "text": "inefficient uh way to get the last element in an array uh you could do something like this so we get uh this",
    "start": "660240",
    "end": "666800"
  },
  {
    "text": "last function that takes X's that's our array and we're going to reverse them and grab the first one uh so that'll be",
    "start": "666800",
    "end": "674639"
  },
  {
    "text": "a good way to get the last um but we can write that in another way we could write it like this uh which is just the",
    "start": "674639",
    "end": "681240"
  },
  {
    "text": "composition of reverse and first and there's two uh well let's see how that works real quick boom um so we",
    "start": "681240",
    "end": "688560"
  },
  {
    "text": "get the uh last element because it reverses it and then uh grabs the first one so it almost runs right to left",
    "start": "688560",
    "end": "696480"
  },
  {
    "text": "passing the output of one function into the input of the next um and you can use more than two functions but uh we'll",
    "start": "696480",
    "end": "702880"
  },
  {
    "text": "keep it simple and stick with two uh so there's there's some key differences here um in last on the the top version",
    "start": "702880",
    "end": "712120"
  },
  {
    "text": "uh we actually uh mention X's of course in a different way so we're referring to",
    "start": "712120",
    "end": "717639"
  },
  {
    "text": "arguments and data in that one and the one under it we're not at all we're just saying glue these two functions together",
    "start": "717639",
    "end": "724079"
  },
  {
    "text": "uh and also in the top one we're specifying we're actually baking in an order of evaluation for JavaScript",
    "start": "724079",
    "end": "731200"
  },
  {
    "text": "JavaScript can't evaluate it in a different way it's like I have to read uh this Top Line first and then the next",
    "start": "731200",
    "end": "738519"
  },
  {
    "text": "line um but in our comp composed version It's a declarative it just says all",
    "start": "738519",
    "end": "744600"
  },
  {
    "text": "right well you know some other process is going to handle this um so we're not going to bake in order evaluation um",
    "start": "744600",
    "end": "750839"
  },
  {
    "text": "even though we know it goes right to left and it passes the output in the next JavaScript is like okay something",
    "start": "750839",
    "end": "755959"
  },
  {
    "text": "else is going to handle this uh and it's it's a way more declarative higher level way of programming uh leads to things",
    "start": "755959",
    "end": "762199"
  },
  {
    "text": "like parallelization and stuff like that if that's a word all right so here's another example",
    "start": "762199",
    "end": "769040"
  },
  {
    "text": "uh just so we can wrap our heads around compose um so we have this word count word count function uh takes a string it",
    "start": "769040",
    "end": "776639"
  },
  {
    "text": "splits on the spaces and then we're going to grab the length um and so it'll tell us the uh length of",
    "start": "776639",
    "end": "782959"
  },
  {
    "text": "the words and it's the same way to do it now notice here uh we're going to",
    "start": "782959",
    "end": "788040"
  },
  {
    "text": "partially apply split so uh split takes the spaces and it's still waiting for its string and so when we call word c",
    "start": "788040",
    "end": "795000"
  },
  {
    "text": "with the string that finishes split and runs it and then the output of split goes into length uh so partial",
    "start": "795000",
    "end": "801680"
  },
  {
    "text": "application currying um you know a curried function can be partially applied uh they kind of play together",
    "start": "801680",
    "end": "807920"
  },
  {
    "text": "with composition because because uh you want to just kind of make it so your your data flows through this this kind",
    "start": "807920",
    "end": "814120"
  },
  {
    "text": "of chain of functions so it's like chain but backwards uh and we don't have to wrap and unwrap data",
    "start": "814120",
    "end": "820399"
  },
  {
    "text": "explicitly um so uh here's a here's a cool example of us um you're actually",
    "start": "820399",
    "end": "826440"
  },
  {
    "text": "able to uh unest functions with it because it's going to call replace first",
    "start": "826440",
    "end": "832959"
  },
  {
    "text": "then comment create well if you compose them it'll call the right one and then the left one so it kind of cleans up",
    "start": "832959",
    "end": "838480"
  },
  {
    "text": "nesting to which I thought was cool to show all right uh so here it goes",
    "start": "838480",
    "end": "844360"
  },
  {
    "text": "category Theory shout out to John Bender so um there's the in acccurate uh",
    "start": "844360",
    "end": "851920"
  },
  {
    "text": "definition of what category theory is it's a it's basically a mathematics around uh center around transforming",
    "start": "851920",
    "end": "858959"
  },
  {
    "text": "values is the way I would say it in a in the terms that I understand so we've got",
    "start": "858959",
    "end": "864920"
  },
  {
    "text": "uh a couple of uh here's an example all right so these two circles on the left",
    "start": "864920",
    "end": "871600"
  },
  {
    "text": "you the one on the left one in the middle they're both you know type A that's type person in this example and",
    "start": "871600",
    "end": "878120"
  },
  {
    "text": "the last one is the type B which is uh I guess it's like breakfast foods um and",
    "start": "878120",
    "end": "884399"
  },
  {
    "text": "gnf are functions so if G andf are pure functions every time I call G with John",
    "start": "884399",
    "end": "891000"
  },
  {
    "text": "I'll get Mary like every time no matter what every time I call G with Mary I get John uh so you're just kind of",
    "start": "891000",
    "end": "897000"
  },
  {
    "text": "connecting the dots there and if if I call uh you know G then f um with Mary",
    "start": "897000",
    "end": "903399"
  },
  {
    "text": "I'm just going to get eggs you can just kind of follow the the way the lines go and we say we can just compose those uh",
    "start": "903399",
    "end": "910000"
  },
  {
    "text": "and we can just cut out the middleman uh and that's really useful and there's a whole set of you know formulas and and",
    "start": "910000",
    "end": "917079"
  },
  {
    "text": "things you can look up and learn that's actually applicable dayto day and this is that like math is and programming",
    "start": "917079",
    "end": "923160"
  },
  {
    "text": "stop using math and programming stuff I mean it's just you know a useful Guiding Light that you can be like oh look at",
    "start": "923160",
    "end": "928759"
  },
  {
    "text": "this I'm just composing these two things it's like a formula and I can use this to help me so uh yeah that little dot",
    "start": "928759",
    "end": "936440"
  },
  {
    "text": "there should have mentioned is the composition operator uh and this stuff can get really complex uh but it's",
    "start": "936440",
    "end": "942839"
  },
  {
    "text": "really just connecting the dots at the end of the day uh and you know there's there's some cool stuff down at the",
    "start": "942839",
    "end": "948079"
  },
  {
    "text": "bottom it's demonstrating associativity uh where it doesn't matter if you group the gnf um or the g& H first uh you're",
    "start": "948079",
    "end": "956440"
  },
  {
    "text": "always going to get the same results uh so that's pretty cool um so let's look",
    "start": "956440",
    "end": "962160"
  },
  {
    "text": "at an example of composition let's see",
    "start": "962160",
    "end": "967560"
  },
  {
    "text": "here okay so we're going to compare it against underscores chain because I think that's the deao way to do this and",
    "start": "967560",
    "end": "973800"
  },
  {
    "text": "everybody seems to use chain so um let's let's take a look at this compared to the composed version of it so we're",
    "start": "973800",
    "end": "980920"
  },
  {
    "text": "going to redefine sorted phones here and we're going to say all right well chain",
    "start": "980920",
    "end": "986079"
  },
  {
    "text": "just wraps our users uh so that we can call Dot on it because we",
    "start": "986079",
    "end": "991680"
  },
  {
    "text": "love calling dot on things and value just unwraps it well so the only",
    "start": "991680",
    "end": "999120"
  },
  {
    "text": "important stuff is right here really so let's grab that um I'm just going to compose and",
    "start": "999120",
    "end": "1007120"
  },
  {
    "text": "since it's backwards we're going to compose the sort by uh and then the map I know I should",
    "start": "1007120",
    "end": "1014160"
  },
  {
    "text": "learn B all right so there we go um",
    "start": "1014160",
    "end": "1019759"
  },
  {
    "text": "now that's a little bit off the screen on mine but you can see it's uh that's we're done that's it uh we don't need",
    "start": "1019759",
    "end": "1027000"
  },
  {
    "text": "the you know the function wrapper and all that stuff I should have left it for uh reference but uh what's cool is since",
    "start": "1027000",
    "end": "1033319"
  },
  {
    "text": "we're doing functional programming and we could we could see that we've got a function that takes some argument and",
    "start": "1033319",
    "end": "1038678"
  },
  {
    "text": "we're just calling DOT phone functions and you know we're going to call Dot on it why don't we make a DOT",
    "start": "1038679",
    "end": "1044319"
  },
  {
    "text": "function call that dot we'll use our Fancy Auto Curry",
    "start": "1044319",
    "end": "1051320"
  },
  {
    "text": "here and that's just going to take a property and an object and we'll just use the bracket so um there we go so now",
    "start": "1051440",
    "end": "1060760"
  },
  {
    "text": "we can actually just call Dot on phone and Dot on our sign up",
    "start": "1060760",
    "end": "1070160"
  },
  {
    "text": "date that kind of cleans it up quite a bit feel like Bob Ross up here or",
    "start": "1071039",
    "end": "1076720"
  },
  {
    "text": "something there we go isn't that lovely isn't that a beautiful beautiful way to clean this up thank you thank",
    "start": "1076720",
    "end": "1083080"
  },
  {
    "text": "you uh so yeah so there's there's a composition and it kind of gets rid of the wrapping and unwrapping and the",
    "start": "1083080",
    "end": "1089320"
  },
  {
    "text": "ceremony of the functions uh you can see all this extra stuff is gone so uh let's",
    "start": "1089320",
    "end": "1094799"
  },
  {
    "text": "let's get back to our lovely pointing system um so we were at three to zero we're going to give it another point for",
    "start": "1094799",
    "end": "1100159"
  },
  {
    "text": "being uh completely uh data generic once again in a different way and then um",
    "start": "1100159",
    "end": "1106559"
  },
  {
    "text": "let's see let's uh if you looked at it it was actually um let's take another",
    "start": "1106559",
    "end": "1112120"
  },
  {
    "text": "peek here uh we've got this is kind of programming in a declarative almost like",
    "start": "1112120",
    "end": "1117400"
  },
  {
    "text": "a formula uh we're switching our mentality from you know the uh sequence",
    "start": "1117400",
    "end": "1122520"
  },
  {
    "text": "of events back to this kind of we can we can actually derive properties from that and I think that's really important and",
    "start": "1122520",
    "end": "1129000"
  },
  {
    "text": "so uh let's give us another point for that guy um and another one oh I was I",
    "start": "1129000",
    "end": "1135159"
  },
  {
    "text": "was going to give me another one but oh well all right so this is what this is what our code at luur uh looks like",
    "start": "1135159",
    "end": "1141320"
  },
  {
    "text": "that's where I work we're always hiring come find me if you want to write this crazy stuff um and almost everything is",
    "start": "1141320",
    "end": "1148000"
  },
  {
    "text": "using compose uh so I just wanted to point that out like it's a really you",
    "start": "1148000",
    "end": "1153240"
  },
  {
    "text": "know it's a Cornerstone of of what we're doing and um this stuff really works this is straight up production code um",
    "start": "1153240",
    "end": "1159400"
  },
  {
    "text": "poor clients right but um here we go okay so underscore promotes promotes",
    "start": "1159400",
    "end": "1164600"
  },
  {
    "text": "chain as the function of choice and uh you know a lot of people tend to use that over uh composition which is a",
    "start": "1164600",
    "end": "1171559"
  },
  {
    "text": "shame because composition has a whole math backing it and uh you know pretty",
    "start": "1171559",
    "end": "1177039"
  },
  {
    "text": "powerful okay composition so you build new functions from other ones uh you can have generic programs uh it's really",
    "start": "1177039",
    "end": "1183840"
  },
  {
    "text": "high level coding it's you know totally declarative uh not really specifying sequence and you got the math backing",
    "start": "1183840",
    "end": "1190039"
  },
  {
    "text": "it okay onto the heavy stuff take a break for a",
    "start": "1190039",
    "end": "1196280"
  },
  {
    "text": "second all right are you guys still with me I know it's like five something hey what's up the question is uh can we",
    "start": "1197200",
    "end": "1204559"
  },
  {
    "text": "compare performance um I'd love for somebody to like do some serious benchmarks I I don't care about",
    "start": "1204559",
    "end": "1210400"
  },
  {
    "text": "performance so I've just been writing code ignorantly and just delivering it was that yeah but it's it's totally I",
    "start": "1210400",
    "end": "1217120"
  },
  {
    "text": "mean it's been working fine for us and and I haven't had any real problems so",
    "start": "1217120",
    "end": "1222240"
  },
  {
    "text": "up can I do what in JavaScript oh no you can't do tailor",
    "start": "1222240",
    "end": "1227440"
  },
  {
    "text": "recursion U but we're we're using a set of uh you know abstract functions that don't really I mean they might wrap",
    "start": "1227440",
    "end": "1232960"
  },
  {
    "text": "Loops or something in the background but we're not doing explicit tailor call recursion um and I don't think there's a",
    "start": "1232960",
    "end": "1238679"
  },
  {
    "text": "need to do that I think you can use uh you know patterns to capture the recursion um or higher order functions",
    "start": "1238679",
    "end": "1246280"
  },
  {
    "text": "all right into the funs okay so um this",
    "start": "1246280",
    "end": "1252200"
  },
  {
    "text": "all right who who knows how to solve this problem this is you're trying to call it plus one you have an array it't",
    "start": "1252200",
    "end": "1258600"
  },
  {
    "text": "wants an X but it doesn't have an X it has an array so what do we do how do we",
    "start": "1258600",
    "end": "1263640"
  },
  {
    "text": "solve this yeah you want to you want to run over you want to iterate over the list",
    "start": "1263640",
    "end": "1269400"
  },
  {
    "text": "um or did you say with list we oh we lift oh yeah that's way better okay well you're you're way too",
    "start": "1269400",
    "end": "1276799"
  },
  {
    "text": "advanced all right so anyway we're going to iterate over this uh array um and we",
    "start": "1276799",
    "end": "1282679"
  },
  {
    "text": "could just we could just map map the function over it and we get a four back uh so so uh I know a lot of people",
    "start": "1282679",
    "end": "1290120"
  },
  {
    "text": "probably have done this you know you guys use map right who uses map anybody all right great awesome so we're all",
    "start": "1290120",
    "end": "1295320"
  },
  {
    "text": "using map and map's great uh and and that solves this problem well if you",
    "start": "1295320",
    "end": "1300880"
  },
  {
    "text": "look at it a little bit closer yes it's like we are lifting this plus one into the array uh if you look over at the",
    "start": "1300880",
    "end": "1308080"
  },
  {
    "text": "kind of grade out it's like we put it inside there and we're running the function on it and then it comes back",
    "start": "1308080",
    "end": "1313360"
  },
  {
    "text": "out as a four uh and if we remove the syntactic sugar which uh I just realized",
    "start": "1313360",
    "end": "1319159"
  },
  {
    "text": "that that's probably not going to work but let's pretend it does uh if you give it multiple arguments it makes an array",
    "start": "1319159",
    "end": "1324720"
  },
  {
    "text": "if you give it one it makes a blank one with that length but anyway so we removed the syntactic sugar and uh you",
    "start": "1324720",
    "end": "1331679"
  },
  {
    "text": "know it's the same thing so could we do this with any object let's see is map",
    "start": "1331679",
    "end": "1336720"
  },
  {
    "text": "more abstract than just working on arrays and we certainly can uh so let's",
    "start": "1336720",
    "end": "1342559"
  },
  {
    "text": "let's talk about that all right so how would it work well if you wanted to map aun function over",
    "start": "1342559",
    "end": "1349039"
  },
  {
    "text": "my object what it would probably happen is it would kind of take what's out you",
    "start": "1349039",
    "end": "1354799"
  },
  {
    "text": "know from inside my object and pass it into the function uh and I could run any function uh over my object and it would",
    "start": "1354799",
    "end": "1361919"
  },
  {
    "text": "actually you know open it up run the function on the contents and then close it back up for me uh and that's exactly",
    "start": "1361919",
    "end": "1368679"
  },
  {
    "text": "the intuition you should have when you're thinking of map I'm going to map this function over over this object it's",
    "start": "1368679",
    "end": "1375480"
  },
  {
    "text": "like I put my value in a bubble and I have to open up the bubble and run the function on it and close it back up so",
    "start": "1375480",
    "end": "1383000"
  },
  {
    "text": "let's see what this looks like um a little closer so we're going to add you know add one to that three there um and",
    "start": "1383000",
    "end": "1390840"
  },
  {
    "text": "if my my object is just a Constructor um you know we can and we just arbitrarily",
    "start": "1390840",
    "end": "1396799"
  },
  {
    "text": "pick Val just to refer to the value inside it um well if we Define map for",
    "start": "1396799",
    "end": "1402240"
  },
  {
    "text": "it it would look just like the the comment up there we're just going to run the function over the Val so uh this is",
    "start": "1402240",
    "end": "1409360"
  },
  {
    "text": "kind of a distinct difference of how we treat um types in functional programming",
    "start": "1409360",
    "end": "1414559"
  },
  {
    "text": "from the objects uh we're really going to look at you know the objects as containers or contexts for our values uh",
    "start": "1414559",
    "end": "1421760"
  },
  {
    "text": "and then we can use them to dynamically dispatch our functions on them uh so we're going to look at this a little bit",
    "start": "1421760",
    "end": "1427159"
  },
  {
    "text": "closer uh but basically uh we get to Define map on anything uh and by",
    "start": "1427159",
    "end": "1432720"
  },
  {
    "text": "defining map on a object that object becomes a functor um all it is is a",
    "start": "1432720",
    "end": "1438520"
  },
  {
    "text": "interfaces you know if you define map you have a functor okay uh so let's look",
    "start": "1438520",
    "end": "1444360"
  },
  {
    "text": "at some actual useful practic applications of this um so up here we have our our friend maybe uh and the",
    "start": "1444360",
    "end": "1451799"
  },
  {
    "text": "very top line there we're going to map plus one over our maybe and it's just going to add one to it and uh the middle",
    "start": "1451799",
    "end": "1458360"
  },
  {
    "text": "line it says maybe null and it actually doesn't do anything it just ignores it",
    "start": "1458360",
    "end": "1463480"
  },
  {
    "text": "and that's the behavior of maybe maybe says um I might have this value or I might not have this value um and if I",
    "start": "1463480",
    "end": "1470399"
  },
  {
    "text": "don't don't even run the function just return me the maybe back and we can just Define this really easily by saying if",
    "start": "1470399",
    "end": "1477159"
  },
  {
    "text": "you've got a value run it if you don't don't so that's a pretty cool thing uh",
    "start": "1477159",
    "end": "1482240"
  },
  {
    "text": "it's basically uh the null check but abstracted into a funter so if you have",
    "start": "1482240",
    "end": "1487919"
  },
  {
    "text": "an OB or if you have a value let say a number or an object or anything and you put it inside of maybe uh you basically",
    "start": "1487919",
    "end": "1494960"
  },
  {
    "text": "are forced to map over it you can't just run your function on your value anymore it's inside the maybe so you have to map",
    "start": "1494960",
    "end": "1501240"
  },
  {
    "text": "over that just like we saw with the list and that gives you some kind of like Dynamic type safety that's really",
    "start": "1501240",
    "end": "1507159"
  },
  {
    "text": "interesting to me um we'll look at that a little bit more uh so here's another one this is a either and uh the way",
    "start": "1507159",
    "end": "1515559"
  },
  {
    "text": "either works is it kind of takes two parameters one the one on the left would be its its first parameter would be its",
    "start": "1515559",
    "end": "1522000"
  },
  {
    "text": "uh default value and its second one is is the value that we're going to use so",
    "start": "1522000",
    "end": "1528720"
  },
  {
    "text": "um if it's there so the Top Line there we're going to map plus one over that either and because it has that that",
    "start": "1528720",
    "end": "1535600"
  },
  {
    "text": "second value it's going to use that one so we get either one and three because it added one to that two and then on the",
    "start": "1535600",
    "end": "1542360"
  },
  {
    "text": "second line uh since it doesn't have its its value uh on the right it's going to",
    "start": "1542360",
    "end": "1547679"
  },
  {
    "text": "just use its default its first argument you guys see that is that being kind of confusing no all right so if you if you",
    "start": "1547679",
    "end": "1555679"
  },
  {
    "text": "look at either as a left and a right and you call its left argument it's default and Its Right is the one that's going to",
    "start": "1555679",
    "end": "1562320"
  },
  {
    "text": "get uh given to it it'll actually use the right one if it has it and it won't",
    "start": "1562320",
    "end": "1567720"
  },
  {
    "text": "if it it'll just use the default so it's an abstraction over default values almost or you could use it to do pure uh",
    "start": "1567720",
    "end": "1574480"
  },
  {
    "text": "error checking and stuff but this is kind of how you'd Implement that you'd say hey if I have my right value uh just",
    "start": "1574480",
    "end": "1580159"
  },
  {
    "text": "run the function on it uh and if I don't run it on the left value and so I get",
    "start": "1580159",
    "end": "1585760"
  },
  {
    "text": "defaults um so I also wanted to point out there's all this promise stuff going",
    "start": "1585760",
    "end": "1590919"
  },
  {
    "text": "on and everybody's freaking out about promises uh well if you just suggested",
    "start": "1590919",
    "end": "1596600"
  },
  {
    "text": "that um promises are funs and all you have to do is map something over it um",
    "start": "1596600",
    "end": "1602120"
  },
  {
    "text": "that Ajax get posts you know if that returns a promise I'm just going to map populate table over that eventual value",
    "start": "1602120",
    "end": "1608120"
  },
  {
    "text": "you know I don't really want to get too far into this but it's pretty kickass like it's the intuition is there I don't",
    "start": "1608120",
    "end": "1613960"
  },
  {
    "text": "need to learn about then and when and on and all the different libraries I can just map over it and it's a unified API",
    "start": "1613960",
    "end": "1621960"
  },
  {
    "text": "uh yes okay uh so let's look at an example here",
    "start": "1621960",
    "end": "1628240"
  },
  {
    "text": "um all right it's 526 let's make make this happen let's make this",
    "start": "1628240",
    "end": "1634279"
  },
  {
    "text": "count all right so here um we're gonna get some random ass div up here and uh",
    "start": "1634279",
    "end": "1641919"
  },
  {
    "text": "we've got our function let's or our program let's look at this so update greeting HTML uh is going to take the",
    "start": "1641919",
    "end": "1649440"
  },
  {
    "text": "current user we're going to call get greeting first because that's how compose works",
    "start": "1649440",
    "end": "1655120"
  },
  {
    "text": "and that's going to pass the user into get greeting and call Dot name on it you guys remember Dot from the other example",
    "start": "1655120",
    "end": "1661600"
  },
  {
    "text": "it's pretty cool um and uh then we're going to concat welcome to that so you you end up with",
    "start": "1661600",
    "end": "1667640"
  },
  {
    "text": "something like you know uh welcome Bob so that's a pretty cool",
    "start": "1667640",
    "end": "1674840"
  },
  {
    "text": "thing and that it sets the HTML of our div after you get that string uh so what",
    "start": "1674840",
    "end": "1680360"
  },
  {
    "text": "happens when we don't have a current user uh the user isn't logged in yet uh",
    "start": "1680360",
    "end": "1685399"
  },
  {
    "text": "well you know how do you even null check up here we just saw that with this thing called maybe uh so let's let's say I'm",
    "start": "1685399",
    "end": "1693600"
  },
  {
    "text": "going to put my uh current user in a maybe and I actually can't run this you",
    "start": "1693600",
    "end": "1699760"
  },
  {
    "text": "know this function on uh my maybe anymore it doesn't take a maybe it takes a user uh so what I have to do is map",
    "start": "1699760",
    "end": "1705559"
  },
  {
    "text": "over it so let's just map this function over",
    "start": "1705559",
    "end": "1710679"
  },
  {
    "text": "that and I'm done uh and none of my program changed um and that's pretty",
    "start": "1710679",
    "end": "1717760"
  },
  {
    "text": "awesome right uh so so all I've done is say I don't know if I have this view user or not let's just wrap it on maybe",
    "start": "1717760",
    "end": "1724440"
  },
  {
    "text": "and map over it uh and let's say our boss comes back and he's like you you guys it's missing the whole welcome",
    "start": "1724440",
    "end": "1730080"
  },
  {
    "text": "Banner you know if they're not logged in it doesn't say anything we could say well why don't we use either we'll say",
    "start": "1730080",
    "end": "1736200"
  },
  {
    "text": "either and we'll just make some kind of you know blankie there we go and now it says",
    "start": "1736200",
    "end": "1744120"
  },
  {
    "text": "welcome blankie uh so that's that's you know we've changed the value uh going",
    "start": "1744120",
    "end": "1750480"
  },
  {
    "text": "into our app this is the calling code this this is our app up here you know",
    "start": "1750480",
    "end": "1755519"
  },
  {
    "text": "from here to there uh and this is just the the caller there so uh and notice",
    "start": "1755519",
    "end": "1761640"
  },
  {
    "text": "that this doesn't mention that data you know we've been we spent half this talk just removing data from our app and just",
    "start": "1761640",
    "end": "1768240"
  },
  {
    "text": "gluing functions together and partially applying them and we're not really making any references uh to it and now",
    "start": "1768240",
    "end": "1774320"
  },
  {
    "text": "this data that doesn't exist in our app is getting wrapped and making our app work differently how crazy is that",
    "start": "1774320",
    "end": "1780279"
  },
  {
    "text": "that's like you know really powerful so uh just wanted to point that out and if",
    "start": "1780279",
    "end": "1786039"
  },
  {
    "text": "you know this user wasn't there yet let's say they're coming from the database and you know we've got this",
    "start": "1786039",
    "end": "1791440"
  },
  {
    "text": "promise there it would work exactly the same way I just wanted to throw promises in there sound cool all right",
    "start": "1791440",
    "end": "1799159"
  },
  {
    "text": "um so there's that uh let's give us more points and do we get to eight no we",
    "start": "1799159",
    "end": "1805480"
  },
  {
    "text": "don't get to eight okay so underscore explicitly prevents extending map it even checks to see if you've defined map",
    "start": "1805480",
    "end": "1812480"
  },
  {
    "text": "on your object and then it's like no it's not the native map uh so it's funny that it does that check and if it has a",
    "start": "1812480",
    "end": "1818880"
  },
  {
    "text": "map it actually has to map uh match the native one so uh if you look at the map",
    "start": "1818880",
    "end": "1824080"
  },
  {
    "text": "defined in underscore it's going to work on arguments objects an array uh but you know we'd have to get in",
    "start": "1824080",
    "end": "1830640"
  },
  {
    "text": "there and mess with it to change it and here um you know it's just a funter interface I should be able to Define map",
    "start": "1830640",
    "end": "1836760"
  },
  {
    "text": "uh as a funter so that's not very functional at all that's it's a bummer um all right so that's uh funter and",
    "start": "1836760",
    "end": "1843559"
  },
  {
    "text": "it's not just map um there's reduce there's compose even uh there's a type class for that you can uh do all sorts",
    "start": "1843559",
    "end": "1850240"
  },
  {
    "text": "of great stuff um and uh let's see you've got um uh there's formulas",
    "start": "1850240",
    "end": "1856360"
  },
  {
    "text": "associated with map that you can drive and use and the whole funter laws uh and",
    "start": "1856360",
    "end": "1861639"
  },
  {
    "text": "that Dynamic Tye safety we were talking about um if I know a Valu is going into my app and it may or may not be there or",
    "start": "1861639",
    "end": "1868679"
  },
  {
    "text": "it'll eventually be there in the case of a promise I could just wrap that in a maybe or a promise or whatever and the",
    "start": "1868679",
    "end": "1874919"
  },
  {
    "text": "rest of my app is forced to deal with it because it can't get to the value without mapping over it and that's crazy",
    "start": "1874919",
    "end": "1881120"
  },
  {
    "text": "awesome that's forces you guys to be like oh well all right let's map over this and it just works I don't I don't",
    "start": "1881120",
    "end": "1886720"
  },
  {
    "text": "have to make those mistakes anymore more um all right uh that's pretty much my talk so in conclusion um I'm clocking in",
    "start": "1886720",
    "end": "1894480"
  },
  {
    "text": "pretty early here it gives us some time for talks um so in conclusion um I was",
    "start": "1894480",
    "end": "1900200"
  },
  {
    "text": "going to say a thing or two about uh you know I think underscore could be a lot more functional and uh we do love it we",
    "start": "1900200",
    "end": "1907519"
  },
  {
    "text": "do use it I you know I think there's other libraries that are just as good but um you know it's great to have a",
    "start": "1907519",
    "end": "1912559"
  },
  {
    "text": "standard and uh I wish we had a standard uh library that we could use for functional program in uh and we started",
    "start": "1912559",
    "end": "1919559"
  },
  {
    "text": "one called score under just to be cheeky because it reverses the arguments anyway um I'll uh",
    "start": "1919559",
    "end": "1928559"
  },
  {
    "text": "yeah so if you check out luer GitHub um there should be a score under there if there's not I'll put it up tonight um",
    "start": "1928559",
    "end": "1933919"
  },
  {
    "text": "but I was hoping we'd get some more open- Source effort because uh I think you know next time I'd love to talk",
    "start": "1933919",
    "end": "1939679"
  },
  {
    "text": "about traversible and lenses and uh you know I think this point free and these type class talks are great and and I",
    "start": "1939679",
    "end": "1946639"
  },
  {
    "text": "hope more people get into it um and I hope we build a bigger Community because it's really small",
    "start": "1946639",
    "end": "1951720"
  },
  {
    "text": "right now and clients are like can't believe you gave me this app this is crazy",
    "start": "1951720",
    "end": "1956960"
  },
  {
    "text": "um so does anybody have any questions or just want to shoot the crap because we got some time what's",
    "start": "1956960",
    "end": "1963840"
  },
  {
    "text": "up okay so like what what should the API be if you were going to create",
    "start": "1963840",
    "end": "1970519"
  },
  {
    "text": "a oh that's a really good question um as as a matter of fact uh so so we use it's",
    "start": "1974320",
    "end": "1981120"
  },
  {
    "text": "it's weird when you're programming functionally you kind of want the world to be a function like everything to be a function um and so we found ourselves",
    "start": "1981120",
    "end": "1989080"
  },
  {
    "text": "wrapping the entire array uh built-in array stuff and string stuff and um all",
    "start": "1989080",
    "end": "1995880"
  },
  {
    "text": "it does is auto Curry and put its argument last it's array or string last uh and it works fine I mean it might be",
    "start": "1995880",
    "end": "2001799"
  },
  {
    "text": "terribly unperformed but it might I mean it seems to be all right for me uh so uh",
    "start": "2001799",
    "end": "2007760"
  },
  {
    "text": "I shouldn't be saying these things um no it's it's been fine it's in production code they're big clients and everybody's",
    "start": "2007760",
    "end": "2014279"
  },
  {
    "text": "happy so it's no big deal and we end up with really small maintainable and parallelizable programs so it's it's",
    "start": "2014279",
    "end": "2019519"
  },
  {
    "text": "really cool we usually uh make mobile apps so you can uh do that on that so uh",
    "start": "2019519",
    "end": "2026519"
  },
  {
    "text": "yeah I would to answer your question about uh what kind of functions would you like to see I think I think just the",
    "start": "2026519",
    "end": "2032039"
  },
  {
    "text": "few uh standard you know like map filter reduce and and things like that like",
    "start": "2032039",
    "end": "2037360"
  },
  {
    "text": "those those are great and um the array and string uh extensions to be able to",
    "start": "2037360",
    "end": "2042880"
  },
  {
    "text": "program uh functionally and uh I'll compose that works correctly because the",
    "start": "2042880",
    "end": "2048520"
  },
  {
    "text": "order of evaluation in JavaScript it kind of messes up a a formula or two for you uh even though it's assoc",
    "start": "2048520",
    "end": "2055040"
  },
  {
    "text": "associative you can group as many uh functions as you want in side compose uh",
    "start": "2055040",
    "end": "2060280"
  },
  {
    "text": "but it doesn't actually evaluate them in the right order when you give it multiple arguments and stuff so that's",
    "start": "2060280",
    "end": "2066440"
  },
  {
    "text": "interesting oh so um I originally actually started uh",
    "start": "2066440",
    "end": "2072079"
  },
  {
    "text": "doing score under by taking underscore running through each to the functions flipping the arguments and calling autoc",
    "start": "2072079",
    "end": "2078440"
  },
  {
    "text": "Curry on them and uh that was that was kind of a I thought it would be cool because under underscore could keep",
    "start": "2078440",
    "end": "2083679"
  },
  {
    "text": "updating and it would just like change it um but uh then we ended up using low",
    "start": "2083679",
    "end": "2088760"
  },
  {
    "text": "Dash and tweaking that and now we're just kind of uh I don't know where it is it's out there uh but the I don't think",
    "start": "2088760",
    "end": "2095878"
  },
  {
    "text": "it's more than than the normal Library just all we did was get in there and mess with low Dash so it's the same size as low dash at this point um I love that",
    "start": "2095879",
    "end": "2103720"
  },
  {
    "text": "I'm talking about low Dash even though it's an underscore talk all right um so is anybody going to",
    "start": "2103720",
    "end": "2110320"
  },
  {
    "text": "that class on Wednesday all right cool hey what's going on how did oh man I gotta talk to",
    "start": "2110320",
    "end": "2116720"
  },
  {
    "text": "you after this did you have a question over there that's a good question you know",
    "start": "2116720",
    "end": "2122200"
  },
  {
    "text": "what I haven't T I should I should uh totally troll him I mean not no uh I",
    "start": "2122200",
    "end": "2127920"
  },
  {
    "text": "think the thing is that you know in in JavaScript you're going to get these like it looks right to put your your um",
    "start": "2127920",
    "end": "2135800"
  },
  {
    "text": "you know function last like that's what looks right to people and so I think",
    "start": "2135800",
    "end": "2142160"
  },
  {
    "text": "when we're like oh well this is functional and you know this is is objectoriented you know like it's not",
    "start": "2142160",
    "end": "2149960"
  },
  {
    "text": "it's not functional you know this is so I mean maybe it is I guess it is technically but I think it can be a lot",
    "start": "2149960",
    "end": "2156040"
  },
  {
    "text": "better is all I'm saying and so I I should write but I think a lot of people would probably be like currying is too",
    "start": "2156040",
    "end": "2161920"
  },
  {
    "text": "confusing without type signatures which is why we add type signatures all the time in comments um and I've got a thing",
    "start": "2161920",
    "end": "2168640"
  },
  {
    "text": "or two to say about that but I don't want to waste too much time so but anyway I think that's all I got so far",
    "start": "2168640",
    "end": "2174359"
  },
  {
    "text": "anybody else all right I'll see you guys later thank you",
    "start": "2174359",
    "end": "2179810"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2179810",
    "end": "2191849"
  }
]