[
  {
    "start": "0",
    "end": "71000"
  },
  {
    "text": "[Music]",
    "start": "560",
    "end": "16838"
  },
  {
    "text": "so this is going to be a tour of D jango's nasal passage a journey from its stock test equipment over to a wondrous",
    "start": "16920",
    "end": "23359"
  },
  {
    "text": "boilerplate free world where you can enjoy ponies and things like that um so",
    "start": "23359",
    "end": "29199"
  },
  {
    "text": "first welcome to V secret layer um we're trying to here reduce the influence of",
    "start": "29199",
    "end": "34320"
  },
  {
    "text": "politics or excuse me Frant slip reduce reduce the influence of money in",
    "start": "34320",
    "end": "39600"
  },
  {
    "text": "politics by replacing like expensive broadcast media like TV and billboards and things with more efficient",
    "start": "39600",
    "end": "45399"
  },
  {
    "text": "peer-to-peer interactions where people aren't as annoyed by their phone ringing from robots all the",
    "start": "45399",
    "end": "50760"
  },
  {
    "text": "time um we do some fairly thorough applications of Dango here and uh from",
    "start": "50760",
    "end": "56399"
  },
  {
    "text": "pretty heavyweight testing we have about 1,700 tests right now uh and we found the stock Django test framework well",
    "start": "56399",
    "end": "63519"
  },
  {
    "text": "really easy to get started with is um not enough once your program scales",
    "start": "63519",
    "end": "68840"
  },
  {
    "text": "Beyond trivial uh here are a couple things that are wrong with it so almost immediately",
    "start": "68840",
    "end": "74880"
  },
  {
    "start": "71000",
    "end": "71000"
  },
  {
    "text": "you get far too many tests to fit in this that one little test stop Pi module",
    "start": "74880",
    "end": "80000"
  },
  {
    "text": "so of course you turn it into a package right you blow it up you split it out into little things but then you have to import all the names from those little",
    "start": "80000",
    "end": "86320"
  },
  {
    "text": "things up into init.py and that's not only annoying but error prone as we'll",
    "start": "86320",
    "end": "92479"
  },
  {
    "text": "see things also end up slower than they could be you end up having to do a full database flush for every transaction",
    "start": "92479",
    "end": "99240"
  },
  {
    "text": "test case you have um and a full fixture reload for each test that uses fixtures",
    "start": "99240",
    "end": "105520"
  },
  {
    "text": "also the test Runner creates a an entirely new database for each uh time you invoke it each time you go back and",
    "start": "105520",
    "end": "111560"
  },
  {
    "text": "R run the tests new database very expensive uh third the default test",
    "start": "111560",
    "end": "116640"
  },
  {
    "text": "Runner is kind of overzealous not only does it test your code but it tests",
    "start": "116640",
    "end": "121880"
  },
  {
    "text": "everything else that happens to be in installed apps and that's going to be a lot of third party stuff that's already",
    "start": "121880",
    "end": "127479"
  },
  {
    "text": "proven to work so at best you're testing whether you have the third party stuff configured right and at worst uh you're",
    "start": "127479",
    "end": "134599"
  },
  {
    "text": "just wasting your time running tests on things that are already known good the let's see here UI I find the",
    "start": "134599",
    "end": "141519"
  },
  {
    "text": "default U testing UI to be pretty rough you don't get any tracebacks until everything is done in true text testr",
    "start": "141519",
    "end": "148720"
  },
  {
    "text": "Runner fashion and there's a lot of trash in the output a lot of uh 80 equal signs here 80 equal signs there what's a",
    "start": "148720",
    "end": "155640"
  },
  {
    "text": "line skip between friends um there are no facilities also for round tripping back into the code so when something",
    "start": "155640",
    "end": "162519"
  },
  {
    "text": "goes wrong you got to eyeball that line number out of there and and dig around in the file system and bring your editor",
    "start": "162519",
    "end": "168159"
  },
  {
    "text": "up and all that stuff you know computer should be good at that and then finally the uh extensibility story is kind of",
    "start": "168159",
    "end": "175560"
  },
  {
    "text": "unscalable if you make say a Django testr Runner subass that does does XML",
    "start": "175560",
    "end": "181040"
  },
  {
    "text": "output uh and you can't just mix in somebody else's that does say say limits",
    "start": "181040",
    "end": "186400"
  },
  {
    "text": "limits you to testing just the applications that are yours not easy to compose those so nose is going to help",
    "start": "186400",
    "end": "193519"
  },
  {
    "text": "us solve all of that thing all those things it's a really nice test framework it draws on the unit test Heritage and",
    "start": "193519",
    "end": "199879"
  },
  {
    "text": "then it puts it on steroids it questions a lot of the limitations that come out of the strict static kind of junit",
    "start": "199879",
    "end": "206120"
  },
  {
    "text": "descended test Frameworks and gives you the tools to test more stuff in fewer lines I love it so let's talk about nose",
    "start": "206120",
    "end": "214680"
  },
  {
    "text": "and how you apply it to Jango before we dig too deep into its capabilities uh here's how you install",
    "start": "214680",
    "end": "221439"
  },
  {
    "text": "it you just pip install Jango nose which is a shim that implements ajango test",
    "start": "221439",
    "end": "227760"
  },
  {
    "start": "223000",
    "end": "223000"
  },
  {
    "text": "Runner and then just calls out to nose and invokes that from there nose itself",
    "start": "227760",
    "end": "233120"
  },
  {
    "text": "is a requirement of Jango no so that just gets pulled down automatically you don't have to install that explicitly and then all it's left to do",
    "start": "233120",
    "end": "240439"
  },
  {
    "text": "is set up your settings just add Jango nose to your installed apps and set the test Runner to Jango",
    "start": "240439",
    "end": "248200"
  },
  {
    "text": "nose's fancy little test Runner now let's see what that gets us first of all we have",
    "start": "248200",
    "end": "255720"
  },
  {
    "start": "253000",
    "end": "253000"
  },
  {
    "text": "Discovery so Django stock test Runner as we said makes you pull everything into test. init or",
    "start": "255720",
    "end": "263000"
  },
  {
    "text": "test.py nose on the other hand makes all of this go poof instead nose finds your tests by",
    "start": "263000",
    "end": "270600"
  },
  {
    "text": "name so these are some test-like names if nose finds a class or a",
    "start": "270600",
    "end": "277199"
  },
  {
    "text": "function with a test like name inside a module with a test like name it considers that to be a",
    "start": "277199",
    "end": "284039"
  },
  {
    "text": "test and if you have something that doesn't fit that pattern you can always use a decorator no this isn't a test yes",
    "start": "284039",
    "end": "291039"
  },
  {
    "text": "this really is a test of course subclasses of uh unit test. test case are always considered",
    "start": "291039",
    "end": "297479"
  },
  {
    "text": "tests so all of your old Django tests continue to be found recognized and",
    "start": "297479",
    "end": "302800"
  },
  {
    "text": "run so the application of these Simple Rules kills off a whole bunch of boilerplate eliminates several classes",
    "start": "302800",
    "end": "308840"
  },
  {
    "text": "of Errors for example since we don't have to import into in it anymore uh you don't have to worry about",
    "start": "308840",
    "end": "316720"
  },
  {
    "text": "things getting shadowed uh we've had this happen a couple of times to us we end up with",
    "start": "316720",
    "end": "323319"
  },
  {
    "text": "something called you know such and such test case in one test module and something else called such and such test",
    "start": "323319",
    "end": "329160"
  },
  {
    "text": "case in another module next to it you do some pretty naive import Stars into in it one of them wins one of them doesn't",
    "start": "329160",
    "end": "335720"
  },
  {
    "text": "run not a lot of fun you get no errors nothing to track down it's just you know six months later you realize you know",
    "start": "335720",
    "end": "341199"
  },
  {
    "text": "this test hasn't been running for ever since it was written um the other fun thing about not",
    "start": "341199",
    "end": "348240"
  },
  {
    "text": "having to uh import up into in it is you can reverse the typical import Direction",
    "start": "348240",
    "end": "354319"
  },
  {
    "text": "you can use in it well first of all you can leave it blank or what I like to do is I put my base test classes in there",
    "start": "354319",
    "end": "360960"
  },
  {
    "text": "or little Standalone testing utilities that are application specific and then you can import down from that into your",
    "start": "360960",
    "end": "366400"
  },
  {
    "text": "test modules without having to worry about circular Imports or anything um you don't end up forgetting",
    "start": "366400",
    "end": "374080"
  },
  {
    "text": "to import things that's happened to us a couple of times and then finally you don't have these long Java likee crazy",
    "start": "374080",
    "end": "381360"
  },
  {
    "text": "long names in order to maintain uniqueness so all good",
    "start": "381360",
    "end": "386680"
  },
  {
    "text": "stuff uh and then remember how the testr runner ran through all the installed apps well Dango nose doesn't do that it",
    "start": "387080",
    "end": "392599"
  },
  {
    "text": "only looks in the folders within your actual project so it tests only your code saving",
    "start": "392599",
    "end": "398800"
  },
  {
    "text": "you uh a lot of compute Cycles really you save a bunch of time every time you test this also means that you can have",
    "start": "398800",
    "end": "405560"
  },
  {
    "text": "code in your Django project that's tested but doesn't live in a Django app",
    "start": "405560",
    "end": "411000"
  },
  {
    "text": "so you can have root level stuff in there Stills tested so with all that",
    "start": "411000",
    "end": "416160"
  },
  {
    "text": "freedom how should you organize your tests here's my favorite way I still like to",
    "start": "416160",
    "end": "421599"
  },
  {
    "text": "Nestle my tests inside a uh tests package in each app why not why change things that work uh the init is either",
    "start": "421599",
    "end": "429000"
  },
  {
    "text": "blank or like I said full of Base classes and then tests go in test whatever files test models test views",
    "start": "429000",
    "end": "435680"
  },
  {
    "text": "test robbers that naming convention is nice for making the tests all kind of clumped together in contrast with other",
    "start": "435680",
    "end": "441879"
  },
  {
    "text": "artifacts you might have sitting in there maybe an image file for testing some pill stuff sample data",
    "start": "441879",
    "end": "447720"
  },
  {
    "text": "file another perfectly reasonable convention is to put the high entropy words first model tests view tests and",
    "start": "447720",
    "end": "454919"
  },
  {
    "text": "nose is happy to recognize those as well and those are a little bit easier to do type to select little shorter to do tab",
    "start": "454919",
    "end": "460720"
  },
  {
    "text": "completion on uh it vas and we also toyed with splitting tests into a deeper hierarchy",
    "start": "460720",
    "end": "466759"
  },
  {
    "text": "you know tests and then put a models folder inside there and have a file per model that you're testing and do a matter of personal",
    "start": "466759",
    "end": "473919"
  },
  {
    "text": "preference but we found that that made us dink around too much in the file system and willing to take some some",
    "start": "473919",
    "end": "480479"
  },
  {
    "text": "longer test modules as a trade-off another cool thing that NOS",
    "start": "480479",
    "end": "486400"
  },
  {
    "start": "485000",
    "end": "485000"
  },
  {
    "text": "let you do is break out of the test class pattern when it makes",
    "start": "486400",
    "end": "491720"
  },
  {
    "text": "sense you can just have Flatout functions as tests so if you have something that for example doesn't",
    "start": "491720",
    "end": "497120"
  },
  {
    "text": "require uh the typical D Jango database you know roll back and uh you set up te",
    "start": "497120",
    "end": "502560"
  },
  {
    "text": "down kind of things you can just make a function perfectly happy test and then",
    "start": "502560",
    "end": "508319"
  },
  {
    "text": "Jango gives you these little helpers procedures like EQ underscore uh to replace things like",
    "start": "508319",
    "end": "513320"
  },
  {
    "text": "self assert equals uh nevertheless there are",
    "start": "513320",
    "end": "518518"
  },
  {
    "text": "allowances for setup and tear down so you can uh see The Decorator here and",
    "start": "518519",
    "end": "524240"
  },
  {
    "text": "that just takes two parameters a setup function the tear down function and you can put the setup and tear down functions out at the root level or in a",
    "start": "524240",
    "end": "529680"
  },
  {
    "text": "library and you can mix and match uh something I'd like to do in the future with jeno knows is provide Dango",
    "start": "529680",
    "end": "535200"
  },
  {
    "text": "database set up and tear down as Standalone procedures like that so that you could use the in top little functions if you felt the",
    "start": "535200",
    "end": "542000"
  },
  {
    "text": "need uh to support function tests further there are package",
    "start": "542000",
    "end": "548959"
  },
  {
    "text": "module uh as well as a class and test level setup and tear down so if you put a setup procedure at the top of your uh",
    "start": "548959",
    "end": "556560"
  },
  {
    "text": "say in it in a package that'll happen before any test in the package is run similarly if you put a tear down in",
    "start": "556560",
    "end": "562320"
  },
  {
    "text": "there that gets run after all the tests in that package get run if you want to get really crazy you",
    "start": "562320",
    "end": "569839"
  },
  {
    "start": "567000",
    "end": "567000"
  },
  {
    "text": "can generate your tests dynamically now this is kind of a niche thing admittedly but sometimes it feels",
    "start": "569839",
    "end": "575800"
  },
  {
    "text": "nice to generate several similar assertions programmatically like in a for Loop uh in unit test say you had a",
    "start": "575800",
    "end": "583399"
  },
  {
    "text": "bunch of asserts in a for Loop when that first one fails that whole test is is",
    "start": "583399",
    "end": "589320"
  },
  {
    "text": "shot now you have to go correct some things and you don't get any more information about the uh assertions that",
    "start": "589320",
    "end": "595120"
  },
  {
    "text": "didn't get run until you rerun the thing in noes if you use a test",
    "start": "595120",
    "end": "600360"
  },
  {
    "text": "generator you can keep on going so you can make a bunch of independent assertions and you get all your feedback",
    "start": "600360",
    "end": "605600"
  },
  {
    "text": "right at the top you can't use this in uh unit test test case sub classes but it works",
    "start": "605600",
    "end": "612079"
  },
  {
    "text": "everywhere else now here's a fun trick you can do with attributes you can use this uh Adder",
    "start": "612079",
    "end": "620560"
  },
  {
    "start": "614000",
    "end": "614000"
  },
  {
    "text": "decorator that nose provides to stick arbitrary tags onto your tests it works",
    "start": "620560",
    "end": "626399"
  },
  {
    "text": "on classes it works on functions and they can be unvalued like the top one or valued like the bottom one and then when",
    "start": "626399",
    "end": "634079"
  },
  {
    "text": "you invoke NOS which you do through the typical managed by test you can say I",
    "start": "634079",
    "end": "639760"
  },
  {
    "text": "want you to only run my selenium tests that is the tests where an attribute called selenium",
    "start": "639760",
    "end": "646040"
  },
  {
    "text": "exists or you can do kind of bullying Expressions you can say give me the ones that are priority equals two and speed",
    "start": "646040",
    "end": "653079"
  },
  {
    "text": "equal slow or you can do alternation you can say give me the ones that are priority to or with a slow speed really really",
    "start": "653079",
    "end": "661079"
  },
  {
    "text": "handy stuff I can't wait to take more advantage of it uh lots of other goodies I mean we",
    "start": "661079",
    "end": "666160"
  },
  {
    "text": "could go all day about noes but it has say custom error classes so the typical unit test stuff you've got errors and",
    "start": "666160",
    "end": "672120"
  },
  {
    "text": "you've got failures right what if there were other kinds of useful things like you could yield a deprecation for",
    "start": "672120",
    "end": "677240"
  },
  {
    "text": "example and say well yeah it's passing but it sucks uh skips skips I think knows either originate of those or",
    "start": "677240",
    "end": "683800"
  },
  {
    "text": "certainly had them before unit Test 2 came out uh todos you could see something yielding a Todo like yeah you",
    "start": "683800",
    "end": "689560"
  },
  {
    "text": "know this test is here but it's not really doing what I want um XML output you get that for free so if you're want",
    "start": "689560",
    "end": "695240"
  },
  {
    "text": "to use Jenkins or something you just pass it I think it's D- with- XML um",
    "start": "695240",
    "end": "701240"
  },
  {
    "text": "that's what we're using to integrate with uh cruise control in our case uh lots of extensibility all these",
    "start": "701240",
    "end": "708279"
  },
  {
    "text": "these uh things I've been showing the discovery and the attribute thing those are implemented as plugins so you can customize all that stuff and the plugins",
    "start": "708279",
    "end": "715480"
  },
  {
    "text": "all get away with get along with each other really nicely they compose well uh you get the plugins obviously there's",
    "start": "715480",
    "end": "722600"
  },
  {
    "text": "a good ecosystem of plugins going on and there's even some multiprocessor support though I haven't got it working with",
    "start": "722600",
    "end": "728480"
  },
  {
    "text": "Django yet due to you know contention for a database but that's a a good future thing to look",
    "start": "728480",
    "end": "735320"
  },
  {
    "text": "at um I hope to get more into some of this in my Jango con talk next week this is this is a",
    "start": "735320",
    "end": "741600"
  },
  {
    "text": "preview so let's talk a little bit about some of the specific optimizations that",
    "start": "741600",
    "end": "747600"
  },
  {
    "text": "Jango nose provides earlier when I said it was just a shim I told a little FIB uh it sure started out",
    "start": "747600",
    "end": "755079"
  },
  {
    "text": "that way but by now it's got all these crazy performance enhancing features that you can optionally take advantage",
    "start": "755079",
    "end": "761120"
  },
  {
    "text": "of uh so to demonstrate those I'm going to use the example of support. mozilla.org",
    "start": "761120",
    "end": "766600"
  },
  {
    "text": "affectionately nicknamed Sumo which I used to work on now it's got about 1200",
    "start": "766600",
    "end": "775279"
  },
  {
    "text": "tests uh gets about a billion hits a month it's kind of a moderate ized site for Mozilla and over time those tests",
    "start": "775279",
    "end": "782320"
  },
  {
    "text": "have grown to take about 20 minutes on the build server and 5 minutes locally",
    "start": "782320",
    "end": "788320"
  },
  {
    "text": "um now five minutes might not sound like long it's easy enough to say but uh it's worth saying a few words about why",
    "start": "788320",
    "end": "794680"
  },
  {
    "text": "faster tests are desirable first and foremost you save all the sword fighting time while the tests",
    "start": "794680",
    "end": "801639"
  },
  {
    "text": "run saved injuries this way save chairs more importantly you uh recoup",
    "start": "801639",
    "end": "807959"
  },
  {
    "text": "the time you would have lost and context switching reestablishing your flow getting stuff back into your",
    "start": "807959",
    "end": "813639"
  },
  {
    "text": "head uh third when people know it's going to take seven to I think that's seven minutes right now need to optimize",
    "start": "813639",
    "end": "820760"
  },
  {
    "text": "they skip running pieces of them they say well I was just working in this app I'll just run this app's tests right so you run some of the tests or none of the",
    "start": "820760",
    "end": "827320"
  },
  {
    "text": "tests and then of course you break the build because you didn't run all the tests uh so lots of lots of good reasons",
    "start": "827320",
    "end": "834720"
  },
  {
    "text": "to optimize here so where does Django nose go looking for for that extra speed",
    "start": "834720",
    "end": "841279"
  },
  {
    "text": "well there's generally only one real answer for that and that is Io if you take a look at this little",
    "start": "841279",
    "end": "848079"
  },
  {
    "text": "chart it represents one nond of access time as a single Pixel now just take a",
    "start": "848079",
    "end": "853720"
  },
  {
    "text": "look at how all the levels of memory hierarchy combined are just dwarfed by",
    "start": "853720",
    "end": "859440"
  },
  {
    "text": "that mechanical hard drive it's it's horrendous so if you can take a chunk out of that that's where to go first now",
    "start": "859440",
    "end": "865920"
  },
  {
    "text": "I'm luy enough to have an SSD in this box and things are a lot faster uh theoretically an SSD has an access",
    "start": "865920",
    "end": "872279"
  },
  {
    "text": "time on the order of 100 nond so just a little bit more than core Ram but in fact you end up bottl knucking on right",
    "start": "872279",
    "end": "878399"
  },
  {
    "text": "you reads are cheap but wrs they're Amplified or they're just flat out honestly slow so little less true than",
    "start": "878399",
    "end": "885800"
  },
  {
    "text": "it was five years ago still the case um if you have a Mac I recommend getting",
    "start": "885800",
    "end": "893440"
  },
  {
    "text": "a copy of uh IAT menus or menu meters U similar things for other platforms I me",
    "start": "893440",
    "end": "898800"
  },
  {
    "text": "l has tons of them out of the box really great for establishing a baseline expectation of what a reasonable test",
    "start": "898800",
    "end": "905240"
  },
  {
    "text": "load is uh python is terrible at multi-processor use in general and",
    "start": "905240",
    "end": "910600"
  },
  {
    "text": "certainly is single threaded for uh Dango tests so if you see python not hitting 100% that probably means you can",
    "start": "910600",
    "end": "917680"
  },
  {
    "text": "optimize a little bit more our current tests run at about 70 something percent",
    "start": "917680",
    "end": "923440"
  },
  {
    "text": "we could do better we're better than we were I think we started at 30",
    "start": "923440",
    "end": "928920"
  },
  {
    "start": "929000",
    "end": "929000"
  },
  {
    "text": "let's see here so we can confirm our IO rule of thumb by applying a couple of profiling tools first of all obviously",
    "start": "929319",
    "end": "937240"
  },
  {
    "text": "the python profiler but un obviously it doesn't tell you anything about IO time",
    "start": "937240",
    "end": "942759"
  },
  {
    "text": "at all it just tells you oh it's about 4 seconds on the CPU well great but my test took a minute",
    "start": "942759",
    "end": "948639"
  },
  {
    "text": "and a half to run where's the rest of the time so we bust out the handy Unix time command which is nice it gives you",
    "start": "948639",
    "end": "956480"
  },
  {
    "text": "not only the CPU time but the clock time and handy little ratios you don't have",
    "start": "956480",
    "end": "961600"
  },
  {
    "text": "to do any math take a look at the CPU percentage see it's using 30% and you can conclude that whatever I was doing",
    "start": "961600",
    "end": "968680"
  },
  {
    "text": "in my tests a lot of it is spent in Cycles outside my process either it's waiting on iO or I've you know fired off",
    "start": "968680",
    "end": "975440"
  },
  {
    "text": "some other process that's doing some computation for me so a little bit more digging in the",
    "start": "975440",
    "end": "980759"
  },
  {
    "text": "case of almost any Django project shows that to be database IO which is why Jango nose provides four optimizations",
    "start": "980759",
    "end": "986639"
  },
  {
    "text": "for reducing it first of which is fast fixture test cases so test fixtures uh hands up if",
    "start": "986639",
    "end": "994160"
  },
  {
    "text": "you've ed test text fixtures familiar with test fixtures yeah love them hate",
    "start": "994160",
    "end": "1000399"
  },
  {
    "text": "them okay evenly divided a lot of lot of no no opinions there uh so test fixture",
    "start": "1000399",
    "end": "1005759"
  },
  {
    "text": "data typically goes into a Json file kind of like this one this is an actual test fixture from The Forum application",
    "start": "1005759",
    "end": "1012160"
  },
  {
    "text": "in Sumo and this one's on the small side about 39 objects um trouble is uh you",
    "start": "1012160",
    "end": "1019199"
  },
  {
    "text": "got to blow a SQL statement to make each of these objects so that's 39 SQL inserts even in D Jango 1.4 you can't",
    "start": "1019199",
    "end": "1026360"
  },
  {
    "text": "use bulk inserts for this because of the possibility of post save hooks existing and wanting to insert you know",
    "start": "1026360",
    "end": "1031678"
  },
  {
    "text": "additional objects or do important things so you still need a SQL statement for each",
    "start": "1031679",
    "end": "1037360"
  },
  {
    "text": "one and here's one of sumo's test classes that uses that fixture along with two other similarly sized ones a",
    "start": "1037360",
    "end": "1043880"
  },
  {
    "text": "couple dozen inserts and it took four minutes to run it was not",
    "start": "1043880",
    "end": "1049559"
  },
  {
    "text": "computationally intense so what's going on it seems like an awfully long time to take to run to load a couple of dozen",
    "start": "1049559",
    "end": "1056400"
  },
  {
    "text": "database rows well if you want to find out what's going on uh in the case of my SQL for",
    "start": "1056400",
    "end": "1062240"
  },
  {
    "text": "example you just log in uh as root and say set General Global type",
    "start": "1062240",
    "end": "1071320"
  },
  {
    "text": "that then it'll start tailing every statement it receives to a file you can take a look at that and it becomes clear",
    "start": "1071320",
    "end": "1078400"
  },
  {
    "text": "that not only is the uh fixture reloaded once",
    "start": "1078400",
    "end": "1086240"
  },
  {
    "text": "per class but in fact it's reloaded once per each test so 39 times number of",
    "start": "1086240",
    "end": "1093000"
  },
  {
    "text": "fixtures times 20 tests in here starts to add up to four minutes each test begins a",
    "start": "1093000",
    "end": "1099559"
  },
  {
    "text": "transaction loads the fixtures runs its stuff and then rolls back the transaction back to a blank database",
    "start": "1099559",
    "end": "1106360"
  },
  {
    "text": "it's very tidy but very inefficient so you know run roll back load it roll back",
    "start": "1106360",
    "end": "1112320"
  },
  {
    "text": "load it roll back so on Sumo this was 37,58736",
    "start": "1112320",
    "end": "1119600"
  },
  {
    "start": "1123000",
    "end": "1123000"
  },
  {
    "text": "in this class unit Test 2 brings that knows has had that for a while it loads up the",
    "start": "1139159",
    "end": "1144960"
  },
  {
    "text": "fixtures it commits them that's the difference so then when we run our tests",
    "start": "1144960",
    "end": "1150840"
  },
  {
    "text": "we run the test and we roll back which takes us not to a blank database but back to a pristine set of",
    "start": "1150840",
    "end": "1157360"
  },
  {
    "text": "fixtures and then finally when we're done we tear down the class by removing",
    "start": "1157360",
    "end": "1162840"
  },
  {
    "text": "the fixtures explicitly truncating tables taking rows out whatever and then committing now how do we know what to",
    "start": "1162840",
    "end": "1168720"
  },
  {
    "text": "rip out well we have a modified version of Django's stock fixture loading routine",
    "start": "1168720",
    "end": "1174720"
  },
  {
    "text": "we run that through a dry run it records what it was going to do and then we know what to rip",
    "start": "1174720",
    "end": "1181480"
  },
  {
    "text": "out so let's see how we did with the stock Jango fixture loading Sumo fired off",
    "start": "1181840",
    "end": "1187600"
  },
  {
    "text": "37,58736",
    "start": "1187600",
    "end": "1190600"
  },
  {
    "text": "that's nine times less database traffic or if you look at it in terms of",
    "start": "1195200",
    "end": "1201080"
  },
  {
    "text": "time the stock fixtures are just over 5 minutes and the per class fixtures come",
    "start": "1201080",
    "end": "1207080"
  },
  {
    "text": "in at about a minute and a half so you can get these improvements",
    "start": "1207080",
    "end": "1212240"
  },
  {
    "text": "yourself you just have to subass the fast fixture test case instead of test",
    "start": "1212240",
    "end": "1218720"
  },
  {
    "start": "1216000",
    "end": "1216000"
  },
  {
    "text": "case oh and the there's one little caveat there that if you have post safe handlers you can't do that but uh that's",
    "start": "1218720",
    "end": "1225880"
  },
  {
    "text": "something that could be solved and I welcome patches um oh in fact there was an additional 4",
    "start": "1225880",
    "end": "1231200"
  },
  {
    "text": "seconds saved here by reusing a single database Connection in Django NOS uh Jango tends to Flap The Connection open",
    "start": "1231200",
    "end": "1237280"
  },
  {
    "text": "and closed a lot be very very conservative so we went ahead and put the branch in to say well in this",
    "start": "1237280",
    "end": "1242679"
  },
  {
    "text": "database it's safe in this database it's not and we saved 4 seconds takes us down to 93 seconds so big Improvement and uh",
    "start": "1242679",
    "end": "1250200"
  },
  {
    "text": "all thanks to getting rid of IO but there are additional speed optimizations that we can apply there is",
    "start": "1250200",
    "end": "1256440"
  },
  {
    "text": "fixture bundling which is kind of exotic these are three actual test cases from sumo uh they use the same fixtures as",
    "start": "1256440",
    "end": "1263679"
  },
  {
    "text": "you can see now if you wanted to optimize this you could merge them all into one class",
    "start": "1263679",
    "end": "1269720"
  },
  {
    "text": "right so they're only loaded at the top of the one class and then unloaded again just once but then you can't organize",
    "start": "1269720",
    "end": "1275919"
  },
  {
    "text": "your class your uh test classes as you want it's nice to conceptually group these things sometimes so what do we do well we take",
    "start": "1275919",
    "end": "1283600"
  },
  {
    "text": "advantage of one of nose's little hooks nose has this prepare test hook which is",
    "start": "1283600",
    "end": "1288919"
  },
  {
    "text": "kind of misnamed what it really should be called is prepare Suite uh so at the very beginning before any tests are run",
    "start": "1288919",
    "end": "1294679"
  },
  {
    "text": "it says all right prepare test youve implemented this here's the suite do what you want and we decided to do some",
    "start": "1294679",
    "end": "1300240"
  },
  {
    "text": "evil things so here's how it typically happens when nose runs your test cases it runs them in basically alphabetical",
    "start": "1300240",
    "end": "1306039"
  },
  {
    "text": "order like this uh so you know test case one right loads fixtures a b and c tears them down",
    "start": "1306039",
    "end": "1314080"
  },
  {
    "text": "test case two loads ABC and D tears them down test case three loads A and C again",
    "start": "1314080",
    "end": "1319279"
  },
  {
    "text": "redundantly and tears them down let's save that work so by using prepared test we can write a plugin to dynamically",
    "start": "1319279",
    "end": "1325799"
  },
  {
    "text": "reorder these tests so that we don't repeat any work",
    "start": "1325799",
    "end": "1331840"
  },
  {
    "text": "so how does this work well we have uh we load it there obviously we load the next",
    "start": "1331840",
    "end": "1337440"
  },
  {
    "text": "picture is there and the next picture is there but how do they know what to do we put advisory bits on the first test case",
    "start": "1337440",
    "end": "1345400"
  },
  {
    "text": "of each group and the last test case of each group and then in a decoupled way",
    "start": "1345400",
    "end": "1350520"
  },
  {
    "text": "we have a our fast fixture test case says am I the first test case in the group well if so I better set up the",
    "start": "1350520",
    "end": "1356080"
  },
  {
    "text": "fixtures am I the last test case well if so I better tear them down otherwise I don't have to do anything I can just",
    "start": "1356080",
    "end": "1362559"
  },
  {
    "text": "cruise on do my tests and I have to worry about doing any IO and I save all that time um throughout all this test",
    "start": "1362559",
    "end": "1369760"
  },
  {
    "text": "Independence is fully preserved we're just factoring out pointlessly repeated setup now a future optimization you",
    "start": "1369760",
    "end": "1376440"
  },
  {
    "text": "could easily see here is to uh be smart about subsets right we've set up a and C we could leave them there and then just",
    "start": "1376440",
    "end": "1383039"
  },
  {
    "text": "bring in D I'm sure that's computationally intense but as we saw from the memory hierarchy diagram uh",
    "start": "1383039",
    "end": "1388320"
  },
  {
    "text": "computation is all free you can do as much computation as you want to avoid hitting the disc um if you have any trouble with",
    "start": "1388320",
    "end": "1395600"
  },
  {
    "text": "this you probably have order dependencies in your tests so take a look at things like Singleton uh local",
    "start": "1395600",
    "end": "1401799"
  },
  {
    "text": "is a big thing if you're activating or deactivating any locals in your tests those are thread locals and tend to leak",
    "start": "1401799",
    "end": "1406919"
  },
  {
    "text": "especially if you have an exception or something uh and then any other thread locals are a great place for state to hide",
    "start": "1406919",
    "end": "1414400"
  },
  {
    "text": "out so what impacted fixture bundling have on our test project here well",
    "start": "1414400",
    "end": "1419679"
  },
  {
    "text": "before bundling we had 114 test classes with fixtures and we did the loading unloading 114 times however it turns out",
    "start": "1419679",
    "end": "1426919"
  },
  {
    "text": "there were only 11 distinct sets of fixtures so with bundling we can save",
    "start": "1426919",
    "end": "1431960"
  },
  {
    "text": "about a quarter of the time off of our already improved test run all you have to do to take advantage",
    "start": "1431960",
    "end": "1437840"
  },
  {
    "text": "of fixture bundle bunding is subass f fast fixture test case say that five times fast and then past the uh with",
    "start": "1437840",
    "end": "1445679"
  },
  {
    "text": "fixture bundling flag when you invoke your test Runner so another place that I shaved",
    "start": "1445679",
    "end": "1451480"
  },
  {
    "text": "some time off is database reuse waiting for database setup is no fun at all",
    "start": "1451480",
    "end": "1457039"
  },
  {
    "start": "1453000",
    "end": "1453000"
  },
  {
    "text": "especially when you're just running a trivial test that adds two numbers or does little computation or something um I think our current project",
    "start": "1457039",
    "end": "1464200"
  },
  {
    "text": "takes like 15 seconds or something to set up our three different databases",
    "start": "1464200",
    "end": "1469279"
  },
  {
    "text": "and if you run on Amazon you can just go to get some lunch because that's that's going to take 10 minutes to set up it's",
    "start": "1469279",
    "end": "1475840"
  },
  {
    "text": "insane um so what I realized is at the",
    "start": "1475840",
    "end": "1480919"
  },
  {
    "text": "end of your test run your database is in a valid state so",
    "start": "1480919",
    "end": "1487159"
  },
  {
    "text": "why would I redo all that work at the front of the next one why not just leave it alone at the end of the last one why",
    "start": "1487159",
    "end": "1492279"
  },
  {
    "text": "you know don't tear it down and then just reuse it as is so we did that",
    "start": "1492279",
    "end": "1500120"
  },
  {
    "text": "uh the flag is not the the the uh the switch isn't very observant I'll",
    "start": "1500120",
    "end": "1506799"
  },
  {
    "text": "say you have to uh keep track if you make any schema changes for example you have to omit the flag next time you run",
    "start": "1506799",
    "end": "1513000"
  },
  {
    "text": "it and say look you better go ahead and re initialize uh but otherwise you save you know a good 10 seconds of database setup",
    "start": "1513000",
    "end": "1522720"
  },
  {
    "text": "time and there's the flag it's it's a strange invocation um because of the way",
    "start": "1522720",
    "end": "1528760"
  },
  {
    "text": "the test Runners call each other I couldn't make it an argument yet uh so it's kind of an environment variable you",
    "start": "1528760",
    "end": "1534000"
  },
  {
    "text": "just kind of do that but you know research continues and that gets us within within a whisker of a minute for that project",
    "start": "1534000",
    "end": "1540320"
  },
  {
    "text": "which is about where I parked that's that's about all I could stand so here's a a summary of the",
    "start": "1540320",
    "end": "1546159"
  },
  {
    "text": "optimization so far stock Django and the per class test fixtur is the big win fixture bundling knocks another quarter",
    "start": "1546159",
    "end": "1552080"
  },
  {
    "text": "off of that and then database reuse takes that last little 10-second annoyance off if that Sav four minutes per test",
    "start": "1552080",
    "end": "1559320"
  },
  {
    "text": "run like in this um and you have a team of four and they run their test Suite maybe four times a day",
    "start": "1559320",
    "end": "1566080"
  },
  {
    "text": "conservatively um you save about an hour a day that comes out to 261 hours or 32",
    "start": "1566080",
    "end": "1573520"
  },
  {
    "text": "working days per year so I figure every team member can take an extra week",
    "start": "1573520",
    "end": "1579279"
  },
  {
    "text": "off and if you do happen to be using D Jango and have a lot of fixture heavy tests uh tests uh you get all this",
    "start": "1579279",
    "end": "1586679"
  },
  {
    "text": "pretty cheaply by using Jango nose so let's talk about user",
    "start": "1586679",
    "end": "1592320"
  },
  {
    "text": "interface uh even though we are technical people we still have feelings and they can still be hurt by",
    "start": "1592320",
    "end": "1599320"
  },
  {
    "text": "inconsiderate software and I cannot help but rant a",
    "start": "1599320",
    "end": "1604559"
  },
  {
    "text": "little bit about what we put ourselves through with the dots so this is the uh standard D Jango",
    "start": "1604559",
    "end": "1611240"
  },
  {
    "start": "1608000",
    "end": "1608000"
  },
  {
    "text": "test display it basically is what standard unit test text test Runner",
    "start": "1611240",
    "end": "1616440"
  },
  {
    "text": "spits out uh I took the liberty of trimming out some of the timec consuming setups this",
    "start": "1616440",
    "end": "1622320"
  },
  {
    "text": "actually it's not real time now I can see I got an error there right but I can't see what the heck went",
    "start": "1622320",
    "end": "1628039"
  },
  {
    "text": "wrong so I've just got to sit here and wait until the very end when hopefully all the tracebacks will show up all at",
    "start": "1628039",
    "end": "1634399"
  },
  {
    "text": "once G GD what yeah I could I could invoke estrace and try to guess what's going",
    "start": "1634399",
    "end": "1641039"
  },
  {
    "text": "now um so I find that pretty inconsiderate in fact I don't even know",
    "start": "1641039",
    "end": "1646080"
  },
  {
    "text": "how long I'm going to have to wait to see my results like should I get a sandwich or should I get you know a",
    "start": "1646080",
    "end": "1652039"
  },
  {
    "text": "spouse or in fact this goes on for over two minutes so we'll just sit and we'll",
    "start": "1652039",
    "end": "1658240"
  },
  {
    "text": "wait while this goes no just kidding um",
    "start": "1658240",
    "end": "1663559"
  },
  {
    "text": "I might not just be just kidding because when I was uh trying this earlier I actually couldn't get it to skip to the end yeah it's doing that",
    "start": "1663559",
    "end": "1669360"
  },
  {
    "text": "again so yeah so everybody knows what the output",
    "start": "1669360",
    "end": "1675440"
  },
  {
    "text": "fin finally looks like um you end up with these w lines full of garbage that say equal signs yay or traceback most",
    "start": "1675440",
    "end": "1683600"
  },
  {
    "text": "recent line last as if you've never read a traceback before uh and then in CA unless you're using like some kind of",
    "start": "1683600",
    "end": "1689440"
  },
  {
    "text": "fancy IDE or something you've got to fet that number out and figure out what what crazy line wrapped file it was and get",
    "start": "1689440",
    "end": "1696120"
  },
  {
    "text": "into your editor and it's a pain in the neck and computer should be good at doing this for us what a waste of time",
    "start": "1696120",
    "end": "1701760"
  },
  {
    "text": "so wouldn't it' be nice instead if we had something like this uh this is an",
    "start": "1701760",
    "end": "1706840"
  },
  {
    "text": "alternative test Runner that I put together works with your existing tests you don't have to do anything it's got a little little",
    "start": "1706840",
    "end": "1714960"
  },
  {
    "text": "progress bar fires up down to the lower right you can always see what test is running over to the",
    "start": "1714960",
    "end": "1720799"
  },
  {
    "text": "left you can see the tracebacks as they happen and there are uh no wasted lines",
    "start": "1720799",
    "end": "1728519"
  },
  {
    "text": "uh the tracebacks are are even formatted interestingly they're actually more useful than they look they're pretty but",
    "start": "1728519",
    "end": "1734440"
  },
  {
    "text": "they're also very useful um so we we omit the the useless lines the equal signs the most recent line last that",
    "start": "1734440",
    "end": "1740600"
  },
  {
    "text": "kind of stuff but also we omit test frames that aren't interesting so test frames that um are out of the guts of",
    "start": "1740600",
    "end": "1747720"
  },
  {
    "text": "unit test or are part of a comparator like nose's EQ uncore or assert equals",
    "start": "1747720",
    "end": "1754279"
  },
  {
    "text": "those things get stripped off in fact the first frame of every traceback is guaranteed to be the one out of your",
    "start": "1754279",
    "end": "1762200"
  },
  {
    "text": "test uh let's see try to compress it horizontally all the path names are",
    "start": "1762200",
    "end": "1767720"
  },
  {
    "text": "option relativized the uh function names are colored so you can just scan down",
    "start": "1767720",
    "end": "1773399"
  },
  {
    "text": "through the stack and see what's going on figure out where you are and then you can actually copy and",
    "start": "1773399",
    "end": "1778519"
  },
  {
    "text": "paste these bold test names at your prompt to rerun them so you say manage test and then paste that thing and you",
    "start": "1778519",
    "end": "1785159"
  },
  {
    "text": "can rerun a failed test very easily like that but my favorite part of all is these editor shortcuts I call them these",
    "start": "1785159",
    "end": "1791559"
  },
  {
    "text": "gray things that happen to start in my case with BB edit here's how they work",
    "start": "1791559",
    "end": "1799159"
  },
  {
    "text": "so once you know where you want to go you just triple click on one of these editor shortcuts copy paste real quick",
    "start": "1799159",
    "end": "1805919"
  },
  {
    "text": "and you pop up right in your editor at the line that that indicates Works in emac Works in VI Works in textmate Works",
    "start": "1805919",
    "end": "1812679"
  },
  {
    "text": "in BB edit Works in anything that that takes the little plus command line Syntax for uh indicating a line to edit",
    "start": "1812679",
    "end": "1820240"
  },
  {
    "text": "on uh nose Progressive is on piie you can grab it right now just pip install",
    "start": "1820240",
    "end": "1825440"
  },
  {
    "text": "nose Progressive and then pass with aggressive when you do your tests I like to mash all that into an alias so I",
    "start": "1825440",
    "end": "1830679"
  },
  {
    "text": "don't have to type it all the time great well thank you so much",
    "start": "1830679",
    "end": "1837799"
  },
  {
    "text": "[Music]",
    "start": "1841560",
    "end": "1849180"
  }
]