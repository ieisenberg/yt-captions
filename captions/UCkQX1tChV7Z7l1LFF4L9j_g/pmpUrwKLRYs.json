[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "thank you well so yeah hello I'm Karl and I will be talking you a bit about",
    "start": "3939",
    "end": "11110"
  },
  {
    "text": "rust and networking I was gonna open with a joke but I've learned that the",
    "start": "11110",
    "end": "17080"
  },
  {
    "text": "talks were rated so I'll skip that so who here knows as use rust maybe how",
    "start": "17080",
    "end": "24880"
  },
  {
    "text": "about that has written anything with rust alright so there's already a good amount good number of you and anyone",
    "start": "24880",
    "end": "30669"
  },
  {
    "text": "here has never heard about rust at all yeah it's growing or growing alright so",
    "start": "30669",
    "end": "36970"
  },
  {
    "text": "I actually got started riding with get I got started with rust what I had my",
    "start": "36970",
    "end": "42490"
  },
  {
    "text": "first kid this is number two sorry I didn't specify but I was spending a lot of time up at nights not sleeping and I",
    "start": "42490",
    "end": "50770"
  },
  {
    "text": "was like I should do something with his time you know just holding a small child I could use my laptop to multitask and I was like alright I'm",
    "start": "50770",
    "end": "57670"
  },
  {
    "text": "sleep-deprived let's ride a distributed database what why not",
    "start": "57670",
    "end": "63010"
  },
  {
    "text": "spoiler alert it never happened but before I like I was gonna get started",
    "start": "63010",
    "end": "68200"
  },
  {
    "text": "like like all good engineers I was like let's like shut the language up to this",
    "start": "68200",
    "end": "73960"
  },
  {
    "text": "point my career as I started with Ruby and I kind of got into writing a lot of",
    "start": "73960",
    "end": "79090"
  },
  {
    "text": "Java and using JVM based languages so I thought I'd take some time and kind of",
    "start": "79090",
    "end": "84609"
  },
  {
    "text": "do a survey of what's other modern databases used and what I learned",
    "start": "84609",
    "end": "90609"
  },
  {
    "text": "surprised me no turns out a lot of newer projects opt for languages that include",
    "start": "90609",
    "end": "98049"
  },
  {
    "start": "92000",
    "end": "145000"
  },
  {
    "text": "a runtime and by a runtime I mean a fairly heavy one like Java as a virtual machine comes with the jet go has a",
    "start": "98049",
    "end": "104770"
  },
  {
    "text": "garbage collector it has a scheduler or does that growth anyway Ruby and all these other more dynamic languages come",
    "start": "104770",
    "end": "110950"
  },
  {
    "text": "with like of basically virtual machines or interpreters as well and these",
    "start": "110950",
    "end": "117369"
  },
  {
    "text": "runtimes when they're called runtime because they run logic at runtime when the process is",
    "start": "117369",
    "end": "123670"
  },
  {
    "text": "running and this logic that they have to run takes like takes away some",
    "start": "123670",
    "end": "129160"
  },
  {
    "text": "performance from the language and when you think of a database you might be like okay we've this is something that",
    "start": "129160",
    "end": "135430"
  },
  {
    "text": "we want to have as much performance so the fact that these languages are",
    "start": "135430",
    "end": "143420"
  },
  {
    "text": "picked more often than not is a bit surprising but what is the alternative it's like kind of historically the more",
    "start": "143420",
    "end": "150440"
  },
  {
    "text": "traditional answer is C or C++ I'm sure everyone here is familiar with that it's",
    "start": "150440",
    "end": "156080"
  },
  {
    "text": "those languages have been around for quite a long time they don't come with a",
    "start": "156080",
    "end": "161900"
  },
  {
    "text": "runtime like they come technically with a very very small runtime but um it doesn't matter for this but when you see",
    "start": "161900",
    "end": "169100"
  },
  {
    "text": "or C++ memory management's becomes your job just do it live and by memory",
    "start": "169100",
    "end": "176720"
  },
  {
    "start": "172000",
    "end": "208000"
  },
  {
    "text": "management I mean allocating your memory so that you have somewhere to store data make a tracking your references to it's making",
    "start": "176720",
    "end": "183590"
  },
  {
    "text": "sure you free at the right spot when you free it of course it gets reclaimed and it's your job to make sure you do you",
    "start": "183590",
    "end": "190370"
  },
  {
    "text": "know just small things like never access it again afterwards and and that's hard",
    "start": "190370",
    "end": "197570"
  },
  {
    "text": "enough in of itself if you throw in threads or concurrency try to access data from multiple threads it gets a",
    "start": "197570",
    "end": "205340"
  },
  {
    "text": "little bit more complicated now what happens when you get wrong no has anyone",
    "start": "205340",
    "end": "210620"
  },
  {
    "start": "208000",
    "end": "249000"
  },
  {
    "text": "had a debug and yet like something like this in production yeah yeah well it's",
    "start": "210620",
    "end": "217940"
  },
  {
    "text": "not fun but that's also the best-case scenario like if you get a sec V you",
    "start": "217940",
    "end": "223190"
  },
  {
    "text": "should be like thank goodness because if you don't get this egg V your process",
    "start": "223190",
    "end": "229070"
  },
  {
    "text": "keeps running doing its thing but not really doing it right you know maybe",
    "start": "229070",
    "end": "234290"
  },
  {
    "text": "it's exposing some secrets to the world things that you don't want outside world",
    "start": "234290",
    "end": "239510"
  },
  {
    "text": "to know but that's just kind of you know",
    "start": "239510",
    "end": "245060"
  },
  {
    "text": "the way it is when you were you C or C++ you know as long as you don't make mistakes everything's okay but people",
    "start": "245060",
    "end": "252350"
  },
  {
    "start": "249000",
    "end": "305000"
  },
  {
    "text": "make mistakes like I definitely have written a bug or two in my life I maybe",
    "start": "252350",
    "end": "258440"
  },
  {
    "text": "I'm the only one but I don't think so but you asked some kind of users of C or",
    "start": "258440",
    "end": "266270"
  },
  {
    "text": "C++ like a really experience I've using been using it for years and they're like some answers might be well it's actually",
    "start": "266270",
    "end": "272360"
  },
  {
    "text": "not that hard when you use the right subset of the language I'm you might have heard that it's like it's it",
    "start": "272360",
    "end": "277580"
  },
  {
    "text": "actually works pretty well of course then you ask different people what that subset is you might get different answers or you might get answers like oh",
    "start": "277580",
    "end": "284449"
  },
  {
    "text": "it's it's true but you can just use linting tools right those will catch your bugs well there are linting tools",
    "start": "284449",
    "end": "290000"
  },
  {
    "text": "and they work pretty well but they're not infallible and really it just kind",
    "start": "290000",
    "end": "295250"
  },
  {
    "text": "of takes like one or two bugs do end up with like not some great situations I",
    "start": "295250",
    "end": "304520"
  },
  {
    "text": "guess so I guess like historically this is kind of the trade-off that you have to make when picking language on one",
    "start": "304520",
    "end": "310880"
  },
  {
    "start": "305000",
    "end": "339000"
  },
  {
    "text": "hand you have speed of C and C++ but you lose the safety that a runtime",
    "start": "310880",
    "end": "316490"
  },
  {
    "text": "especially the garbage collector a part of a runtime will give you because the garbage collector when you run that it",
    "start": "316490",
    "end": "321650"
  },
  {
    "text": "manages the memory for you when you you just ask say hey store this data from me give me references and the garbage",
    "start": "321650",
    "end": "327800"
  },
  {
    "text": "collector runtime tracks all those references and will keep the memory around for you until it deems that that",
    "start": "327800",
    "end": "334430"
  },
  {
    "text": "memory can be accessed anymore that just takes some runtime cost so enter rust",
    "start": "334430",
    "end": "340760"
  },
  {
    "start": "339000",
    "end": "411000"
  },
  {
    "text": "rust is a pretty new language at this points it's skip I guess one more natto maybe was it",
    "start": "340760",
    "end": "347900"
  },
  {
    "text": "three three years and should go and change so it came out as a little research and it builds itself as a",
    "start": "347900",
    "end": "353240"
  },
  {
    "text": "systems programming language and systems programming language means different things to different people but like I",
    "start": "353240",
    "end": "359360"
  },
  {
    "text": "kind of go by if you write an operating system if you can write device drivers if you can take write something that language and embed it in Ruby or other",
    "start": "359360",
    "end": "367070"
  },
  {
    "text": "languages that that's kind of what makes a systems programming language and to achieve this it cannot have a run it",
    "start": "367070",
    "end": "374930"
  },
  {
    "text": "cannot have a garbage collector it cannot really do any stack management it can't do any of these things that job or",
    "start": "374930",
    "end": "379970"
  },
  {
    "text": "go what do it but the big thing about it the kind of the the new the the big new",
    "start": "379970",
    "end": "387949"
  },
  {
    "text": "feature that it brings to the table is that it offers all of like it does all",
    "start": "387949",
    "end": "393680"
  },
  {
    "text": "of this without the runtime but it's still guarantees memory savings so the bugs around like accessing uninitialized",
    "start": "393680",
    "end": "399950"
  },
  {
    "text": "memory etc etc from C or C++ if you're you write a program in Russ and it compiles it's guaranteed to not",
    "start": "399950",
    "end": "407880"
  },
  {
    "text": "have any of those bugs and basically now that trade-off you don't have to make",
    "start": "407880",
    "end": "414660"
  },
  {
    "start": "411000",
    "end": "452000"
  },
  {
    "text": "any more you're like okay I can get speed and safety with rust and that's that's a pretty big deal especially for",
    "start": "414660",
    "end": "422970"
  },
  {
    "text": "someone like me I came you know I didn't I grew I like I grew up I grew out like",
    "start": "422970",
    "end": "429000"
  },
  {
    "text": "I started programming and Ruby I didn't really have any formal programming education",
    "start": "429000",
    "end": "434100"
  },
  {
    "text": "I've always before been kind of afraid of getting really deep down in the",
    "start": "434100",
    "end": "439800"
  },
  {
    "text": "systems level because I'm like I'm gonna mess it up just using R Us makes it a",
    "start": "439800",
    "end": "444990"
  },
  {
    "text": "bit more approachable because you don't have to worry about those kinds of problems in words it just makes it easier and more approachable so because",
    "start": "444990",
    "end": "453090"
  },
  {
    "start": "452000",
    "end": "470000"
  },
  {
    "text": "it doesn't have any of the runtime it hand it's still guarantees the memory safety it has to do this by checking the",
    "start": "453090",
    "end": "460680"
  },
  {
    "text": "program at compile time so it's not it's kind of like a linter but it's stronger in that it just won't compile if it",
    "start": "460680",
    "end": "467460"
  },
  {
    "text": "can't guarantee the safety and the way it does that is what it calls over ship",
    "start": "467460",
    "end": "475620"
  },
  {
    "start": "470000",
    "end": "511000"
  },
  {
    "text": "it's a bundle of features but roughly it's it's like the rust memory mode right so like garbage collected it might",
    "start": "475620",
    "end": "483150"
  },
  {
    "text": "be a memory model but for us it's ownership and it's able to by using this",
    "start": "483150",
    "end": "488370"
  },
  {
    "text": "model track memory that's allocated whether it's the heap or the staff or ever and similar and similar to I guess",
    "start": "488370",
    "end": "495830"
  },
  {
    "text": "garbage collector you can have multiple references that memory and when all the references go out of scope or are gone",
    "start": "495830",
    "end": "502920"
  },
  {
    "text": "and that data is not accessible anymore rust is able to clean it up for you but it does that at compelled to so the",
    "start": "502920",
    "end": "511200"
  },
  {
    "start": "511000",
    "end": "606000"
  },
  {
    "text": "way it works it's starts off by saying data has one owner so when you allocate",
    "start": "511200",
    "end": "516300"
  },
  {
    "text": "a piece of memory like a string or something and you assign it to a variable that like variable is the owner",
    "start": "516300",
    "end": "522630"
  },
  {
    "text": "of that string and that can only be at one time one owner so quick little code",
    "start": "522630",
    "end": "530580"
  },
  {
    "text": "example I'll keep the string I decided to fool so who's the owner",
    "start": "530580",
    "end": "536140"
  },
  {
    "text": "now who's deciding to bar bar is now the owner who was handed off ownership it's",
    "start": "536140",
    "end": "541180"
  },
  {
    "text": "can't access string anymore that's string anymore and then we're just gonna print that string it passes the variant",
    "start": "541180",
    "end": "548680"
  },
  {
    "text": "the string gets passed into the function and ownership gets transferred into the function and use it so because from that",
    "start": "548680",
    "end": "558340"
  },
  {
    "text": "string function like the the string once the function returns that string is no longer accessible Russ knows okay I'm",
    "start": "558340",
    "end": "565180"
  },
  {
    "text": "going to inject the free at that point when the function returns the string is freed and now if you do something not",
    "start": "565180",
    "end": "576490"
  },
  {
    "text": "like if you violate the like the requirements of rust so here we set",
    "start": "576490",
    "end": "582190"
  },
  {
    "text": "create a string assign it to foo and then again assign food a bar but now I'm trying to pass foo into the function now",
    "start": "582190",
    "end": "589090"
  },
  {
    "text": "foo gave up ownership it can't use that string anymore the compiler is going to complain it's gonna say oh no sorry",
    "start": "589090",
    "end": "595690"
  },
  {
    "text": "pretty helpful message actually so that's kind of the main like built the",
    "start": "595690",
    "end": "602740"
  },
  {
    "text": "first building block of rust and ownership now using like only being able",
    "start": "602740",
    "end": "608620"
  },
  {
    "start": "606000",
    "end": "708000"
  },
  {
    "text": "to access memory through a single variable is not will is not it's a bit",
    "start": "608620",
    "end": "616660"
  },
  {
    "text": "limiting limiting so there are other ways like there's ways to get more references to a single piece of memory",
    "start": "616660",
    "end": "622780"
  },
  {
    "text": "but and the way it's called borrowing data so there's still a like an owner a",
    "start": "622780",
    "end": "628540"
  },
  {
    "text": "single owner that owns that data but yeah other kind of code location like",
    "start": "628540",
    "end": "634090"
  },
  {
    "text": "other variables can borrow the data and that's to borrow they'll get a reference just like a pointer but instead of but",
    "start": "634090",
    "end": "643360"
  },
  {
    "text": "but so the two pointers will point us so the pointer will points to the data and",
    "start": "643360",
    "end": "648370"
  },
  {
    "text": "the owner will still have access to it but the requirement is that at compile time Russ can ensure that the the",
    "start": "648370",
    "end": "656920"
  },
  {
    "text": "reference so the the reference to the that is borrowing the data goes out of scope before the owner does so in other",
    "start": "656920",
    "end": "664540"
  },
  {
    "text": "words at compile time rust has to ensure that all references to the piece of data",
    "start": "664540",
    "end": "669550"
  },
  {
    "text": "go out of scope before that data is freed so before the owner goes out of scope so again a similar example but",
    "start": "669550",
    "end": "679300"
  },
  {
    "text": "this time that ampersand foo gets a reference so by doing that foo still owns the string bar borrows the string",
    "start": "679300",
    "end": "687940"
  },
  {
    "text": "and you see the print function now takes reference so you can pass in foo and you",
    "start": "687940",
    "end": "694120"
  },
  {
    "text": "can pass a bar and you still can use the string is still owned by foo and Foos gonna go ahead scope here but foo but",
    "start": "694120",
    "end": "701830"
  },
  {
    "text": "the compiler knows that when foo goes out of scope all the references are gone it does that statically now here I'm",
    "start": "701830",
    "end": "709630"
  },
  {
    "start": "708000",
    "end": "759000"
  },
  {
    "text": "just gonna add a little drop it's kind of a small function that just does it's like explicit freeing and all it does is",
    "start": "709630",
    "end": "714790"
  },
  {
    "text": "just takes a piece of data and does nothing with it so it takes data by ownership does nothing with it Russell",
    "start": "714790",
    "end": "720400"
  },
  {
    "text": "Jack's a free right when drop returns so now foo is the owner still and we",
    "start": "720400",
    "end": "728560"
  },
  {
    "text": "have some references like bar references it but now we're trying to pass foo into the drop function and that would cause",
    "start": "728560",
    "end": "735220"
  },
  {
    "text": "the owner foo to go away while they're still outstanding references and this",
    "start": "735220",
    "end": "740710"
  },
  {
    "text": "would be like if this could compile that would give you some use after free a use after free bugs but the Russ compiler",
    "start": "740710",
    "end": "747280"
  },
  {
    "text": "prevents it now these references are all immutable that means that if you get a",
    "start": "747280",
    "end": "754990"
  },
  {
    "text": "immutable reference you can read the data but you can't write to it now sometimes it's also useful to be able to",
    "start": "754990",
    "end": "761320"
  },
  {
    "start": "759000",
    "end": "820000"
  },
  {
    "text": "mutate data so there's a there's an equivalent kind of you can get mutable",
    "start": "761320",
    "end": "766630"
  },
  {
    "text": "references now the difference so in order for the ownership system to work",
    "start": "766630",
    "end": "772330"
  },
  {
    "text": "there are a few requirements so one is one owner you can have as many immutable",
    "start": "772330",
    "end": "780460"
  },
  {
    "text": "references to that data as you want as long as the as long as all the",
    "start": "780460",
    "end": "785650"
  },
  {
    "text": "references go out of scope before the owner and you can only have one single mutable",
    "start": "785650",
    "end": "791480"
  },
  {
    "text": "reference to a piece of data at any given time as long as a reference goes away before the owner goes out of scope",
    "start": "791480",
    "end": "798530"
  },
  {
    "text": "and you if you have a mutable reference you cannot have any immutable references all right so those are the rules if you",
    "start": "798530",
    "end": "804920"
  },
  {
    "text": "can get that you're good so we're trying to do the exact same thing that we did",
    "start": "804920",
    "end": "810650"
  },
  {
    "text": "with mutable mutable references but now I switch it to mute and it doesn't work",
    "start": "810650",
    "end": "815840"
  },
  {
    "text": "because that would violate the rule now here's like a more complicated or like",
    "start": "815840",
    "end": "822620"
  },
  {
    "text": "example like here we're creating a vector so a vector just like a global",
    "start": "822620",
    "end": "827750"
  },
  {
    "text": "array we can push a string into it then a bunch of code like let's say it's a",
    "start": "827750",
    "end": "833300"
  },
  {
    "text": "really big function Val take a reference an immutable reference to the first",
    "start": "833300",
    "end": "838430"
  },
  {
    "text": "entry in the vector and then later we try to push a new string into the vector",
    "start": "838430",
    "end": "844250"
  },
  {
    "text": "so in order to push that's gonna require mutating the vector so that's gonna require a single like to get a mutable",
    "start": "844250",
    "end": "850250"
  },
  {
    "text": "reference but because your Val actually holds an immutable reference to the",
    "start": "850250",
    "end": "855470"
  },
  {
    "text": "vector and this isn't going to compile and just anyone and you know if you're just looking at this you might think",
    "start": "855470",
    "end": "860570"
  },
  {
    "text": "like oh well I don't see why that's it would be bad to do this I'm not actually touching the like value why can't I push",
    "start": "860570",
    "end": "867470"
  },
  {
    "text": "into the vector does anyone could imagine what might happen why is it prevented it's okay so I mean like the",
    "start": "867470",
    "end": "876020"
  },
  {
    "text": "vector when you push new value it might internally reallocate storage so there has to be memory inside the vector to",
    "start": "876020",
    "end": "882470"
  },
  {
    "text": "store the values and since it's growable it might start with like a small small amount of memory and then you push in a",
    "start": "882470",
    "end": "888620"
  },
  {
    "text": "value and that's going to move all of the existing values into a larger chunk of memory so pushing could cause the",
    "start": "888620",
    "end": "895880"
  },
  {
    "text": "memory of all elements like all the values in within the vector to move and if you have a reference to one of these",
    "start": "895880",
    "end": "901790"
  },
  {
    "text": "values that's gonna end up being a dead reference because the actual data gets moved so if you did this in C or C++ you",
    "start": "901790",
    "end": "910220"
  },
  {
    "text": "would end up with a lovely use after well access uninitialized memory use after free and but rust",
    "start": "910220",
    "end": "917470"
  },
  {
    "text": "doesn't let you do that it's like okay don't do this this is bad alright so",
    "start": "917470",
    "end": "923740"
  },
  {
    "start": "923000",
    "end": "1047000"
  },
  {
    "text": "next you're like me that's the ownership system all those are the checks that the compiler does at compile time and once",
    "start": "923740",
    "end": "931990"
  },
  {
    "text": "if you only use borrowing and like the ownership system the result the resulting program will have no like",
    "start": "931990",
    "end": "938800"
  },
  {
    "text": "runtime cost all the guarantees have been done at compile time now the you",
    "start": "938800",
    "end": "944200"
  },
  {
    "text": "can get a lot done with within those constraints but sometimes like you do get into situations where you need to",
    "start": "944200",
    "end": "951550"
  },
  {
    "text": "move beyond like you have to do something that the competitive the ownership system won't let you do out of",
    "start": "951550",
    "end": "957100"
  },
  {
    "text": "the box so let's say you just simply have the requirement of you want a piece of data and you want to references to it",
    "start": "957100",
    "end": "962709"
  },
  {
    "text": "but you can't ask you can't statically determine which like reference is going to outlive the other so because there",
    "start": "962709",
    "end": "968769"
  },
  {
    "text": "can only be one owner and references have to be shorter-lived at compile time that this you would not be able to",
    "start": "968769",
    "end": "975880"
  },
  {
    "text": "represent two references with they'll get free to a runtime kind of point so",
    "start": "975880",
    "end": "981910"
  },
  {
    "text": "you don't how if you hit the keys like that you don't have to be like all right well nothing works anymore I'm just going to go back to on everything be on",
    "start": "981910",
    "end": "988779"
  },
  {
    "text": "safe what you can do is you build like a small abstraction that encompasses like",
    "start": "988779",
    "end": "995769"
  },
  {
    "text": "that that lets you do what you need to do and the implementation might be a little unsafe but it provides a safe API",
    "start": "995769",
    "end": "1004019"
  },
  {
    "text": "and it can leverage a number of the like rust capabilities to just be able to",
    "start": "1004019",
    "end": "1010260"
  },
  {
    "text": "provide like an API that's going to be safe to the user so in this case this is a reference counted cell reference",
    "start": "1010260",
    "end": "1017550"
  },
  {
    "text": "counting is just like you you count the number of references to it and when the number of references go down to zero the",
    "start": "1017550",
    "end": "1024660"
  },
  {
    "text": "data gets free and there we just create a new one we get a first reference clone",
    "start": "1024660",
    "end": "1029699"
  },
  {
    "text": "it get a second one so drop here drops the reference it doesn't drop the data so the first reference goes out and then we can still",
    "start": "1029699",
    "end": "1035790"
  },
  {
    "text": "access the second one so the main point is this you like Derrick like you can",
    "start": "1035790",
    "end": "1042780"
  },
  {
    "text": "get around the limitations of borrow checker by using these kinds of primitives now how would you implement",
    "start": "1042780",
    "end": "1048250"
  },
  {
    "start": "1047000",
    "end": "1118000"
  },
  {
    "text": "that this is just like a little quick snippet but clone like it just",
    "start": "1048250",
    "end": "1054340"
  },
  {
    "text": "increments the rough count so the star mut is a unsafe pointer it's basically the equivalent the equivalent of what a",
    "start": "1054340",
    "end": "1060250"
  },
  {
    "text": "see pointer would be just completely no guarantees at all and to access that you have to wrap your code with a unsafe",
    "start": "1060250",
    "end": "1068860"
  },
  {
    "text": "block so when you wrap code with unsafe block you're saying don't check any of this compiler because you're not going",
    "start": "1068860",
    "end": "1074980"
  },
  {
    "text": "to be able to but the point is like here because rusts strong ownership and the",
    "start": "1074980",
    "end": "1082180"
  },
  {
    "text": "fact that it can tell when data gets dropped exactly you're able to write a little hook that says when the RCE",
    "start": "1082180",
    "end": "1088510"
  },
  {
    "text": "handle gets dropped runs a little bit of code so you as the user of the API you",
    "start": "1088510",
    "end": "1094030"
  },
  {
    "text": "don't have to manually increment and decrement references you just use the data and once the reference goes out of",
    "start": "1094030",
    "end": "1099820"
  },
  {
    "text": "scope it's able to track it and eventually clear it and the lot standard library comes with a number of these",
    "start": "1099820",
    "end": "1105760"
  },
  {
    "text": "containers and just utilities a workaround limitations honestly like with just the standard library and the",
    "start": "1105760",
    "end": "1112030"
  },
  {
    "text": "base of the ownership rules you can write basically anything so when you're",
    "start": "1112030",
    "end": "1118420"
  },
  {
    "start": "1118000",
    "end": "1157000"
  },
  {
    "text": "getting start with rust sometimes it feels a little bit like this it's actually a little bit frustrating get started start it because you think",
    "start": "1118420",
    "end": "1124980"
  },
  {
    "text": "either like you might come from a background where you really think you know what you're doing and you're like",
    "start": "1124980",
    "end": "1130210"
  },
  {
    "text": "why don't you just let me compile it but my experience nine times out of ten",
    "start": "1130210",
    "end": "1136360"
  },
  {
    "text": "I was the one that was wrong probably because I came from a garbage collected background and I didn't really know what",
    "start": "1136360",
    "end": "1142270"
  },
  {
    "text": "I was doing but it was definitely a little bit of a frustrating experience so my warning is like at first if you",
    "start": "1142270",
    "end": "1148630"
  },
  {
    "text": "try it it might be a little frustrating but then you build up an intuition and the borrowed checker gets out of your way you kind of know how to out of the",
    "start": "1148630",
    "end": "1154840"
  },
  {
    "text": "box out of structure code and make it happy and Russ gets you features beyond",
    "start": "1154840",
    "end": "1161230"
  },
  {
    "start": "1157000",
    "end": "1190000"
  },
  {
    "text": "just basic memory management because the ownership model can be used like kind of like like kind of like what I hit in to",
    "start": "1161230",
    "end": "1167770"
  },
  {
    "text": "strut to design api's that are safe to use that prevent you from writing like bugs that you might otherwise even write",
    "start": "1167770",
    "end": "1174070"
  },
  {
    "text": "in a language like Java or go and this works out particularly well with concurrency",
    "start": "1174070",
    "end": "1179799"
  },
  {
    "text": "because most data rates problems are our data problems I can who like what thread",
    "start": "1179799",
    "end": "1185169"
  },
  {
    "text": "owns the data like are you coordinating access to the route like do you have multiple references so quick example you",
    "start": "1185169",
    "end": "1192249"
  },
  {
    "text": "have a channel a channel is just a queue like a way to send messages like go has",
    "start": "1192249",
    "end": "1197440"
  },
  {
    "text": "channels this exact same thing basic T TX is the transmit side RX receive there",
    "start": "1197440",
    "end": "1204070"
  },
  {
    "text": "we move the receive to another thread and then we're sending the message but",
    "start": "1204070",
    "end": "1210369"
  },
  {
    "text": "because it's rust when you send the message you're passing ownership of that data into the channel and you're not",
    "start": "1210369",
    "end": "1217539"
  },
  {
    "text": "allowed to use it after you do that and if you did use it while in Java or",
    "start": "1217539",
    "end": "1224619"
  },
  {
    "text": "whatnot it would not be memory unsafe and that you won't access uninitialized memory but you will get into concurrency bugs",
    "start": "1224619",
    "end": "1230519"
  },
  {
    "text": "which can be very fun to debug and then",
    "start": "1230519",
    "end": "1235960"
  },
  {
    "text": "new Texas also leverage the ownership ownership system and usually when you",
    "start": "1235960",
    "end": "1241629"
  },
  {
    "start": "1236000",
    "end": "1313000"
  },
  {
    "text": "use a mutex and like other languages you're protecting your guarding code",
    "start": "1241629",
    "end": "1246820"
  },
  {
    "text": "sections but so you you say ok this is my critical section I'm gonna lock above I'm gonna unlock below and it can be a",
    "start": "1246820",
    "end": "1255399"
  },
  {
    "text": "little error-prone with rust instead you guard data so we put some",
    "start": "1255399",
    "end": "1261729"
  },
  {
    "text": "data that we want to protect we put in a mutex and the Ark is just an atomic reference counted to sell so it's the",
    "start": "1261729",
    "end": "1267879"
  },
  {
    "text": "same as our see it just works that uses Atomics internally so it works across threads and they're what wouldn't call",
    "start": "1267879",
    "end": "1274570"
  },
  {
    "text": "lock mutex dot lock that returns a value called a guard and that value is how you",
    "start": "1274570",
    "end": "1280479"
  },
  {
    "text": "can access the data inside and this tick a is how it references a lifetime a bit",
    "start": "1280479",
    "end": "1285519"
  },
  {
    "text": "beyond the scope but basically guard is is a wrapped reference to the internal",
    "start": "1285519",
    "end": "1291369"
  },
  {
    "text": "data but because it's a value and you can implement drop handles right you can say when guard goes out of scope run",
    "start": "1291369",
    "end": "1297580"
  },
  {
    "text": "this code you can move the unlock functionality into the drop of the guard",
    "start": "1297580",
    "end": "1303129"
  },
  {
    "text": "so all you do is you just lock you get the guard you use it as if it was just a regular pointer to the data and then you",
    "start": "1303129",
    "end": "1308979"
  },
  {
    "text": "forget to forget about it you don't need to worry about unlocking just how is done for you now was like",
    "start": "1308979",
    "end": "1315360"
  },
  {
    "start": "1313000",
    "end": "1359000"
  },
  {
    "text": "rust has a ton of other like language features there it's a pretty nice",
    "start": "1315360",
    "end": "1321840"
  },
  {
    "text": "language but again ownership is the kind of the main reason for rust and this is",
    "start": "1321840",
    "end": "1331770"
  },
  {
    "text": "rust mission statement like fast reliable productive and that's it's a pretty lofty goal can like the rust",
    "start": "1331770",
    "end": "1339750"
  },
  {
    "text": "developers are trying to one give you a language that doesn't ever compromise on",
    "start": "1339750",
    "end": "1344940"
  },
  {
    "text": "performance while at the same time not allow me to write will let you write as",
    "start": "1344940",
    "end": "1352470"
  },
  {
    "text": "few bugs as possible and without getting in your way so it's trying to be as productive as possible it's it's a tough",
    "start": "1352470",
    "end": "1357870"
  },
  {
    "text": "order so might so I again like I started rust I started using the rest four years",
    "start": "1357870",
    "end": "1363990"
  },
  {
    "start": "1359000",
    "end": "3059000"
  },
  {
    "text": "ago to trying to write I was like alright I'm writing my distributed database I'm going to use rust and when",
    "start": "1363990",
    "end": "1370470"
  },
  {
    "text": "I Scott started there was like there's basically no ecosystem at all so like most people prom I decisions probably",
    "start": "1370470",
    "end": "1378090"
  },
  {
    "text": "should have been like this is a cool language you know but I'll wait for her I'll wait for it to mature a bit like I",
    "start": "1378090",
    "end": "1383520"
  },
  {
    "text": "mean I I wasn't trying to do anything real so I was like alright yak shave time we're gonna get down and implement",
    "start": "1383520",
    "end": "1389550"
  },
  {
    "text": "the world alright and I've I'm still working on that I haven't actually gotten outs back to the database part yet so maybe maybe for kid number two so",
    "start": "1389550",
    "end": "1399330"
  },
  {
    "text": "I was like alright it's an opportunity to start working on a networking library",
    "start": "1399330",
    "end": "1406230"
  },
  {
    "text": "for rust called Tokyo and it's also an opportunity to be like okay I have used",
    "start": "1406230",
    "end": "1412710"
  },
  {
    "text": "plenty of other non-blocking asynchronous or like what event-driven like all the buzzwords libraries right",
    "start": "1412710",
    "end": "1419700"
  },
  {
    "text": "and there are a lot of great ones out there they're like really like lots of great ones out there but when writing",
    "start": "1419700",
    "end": "1426780"
  },
  {
    "text": "one a new one you get three like revisit every single decision they make why not and it wasn't",
    "start": "1426780",
    "end": "1434670"
  },
  {
    "text": "just like because I they were all bad I was gonna make it so much better it's also because rust with uh with its",
    "start": "1434670",
    "end": "1441450"
  },
  {
    "text": "functionality and its new features in its ownership system actually chain the trade-offs that you make when designing a library so you can use",
    "start": "1441450",
    "end": "1448860"
  },
  {
    "text": "because you can use the like the ownership system to add like lots of kind to design your API to be more like",
    "start": "1448860",
    "end": "1457560"
  },
  {
    "text": "I guess defensive or the for the end user there's like a lot of decisions that change and that's also how I got",
    "start": "1457560",
    "end": "1467040"
  },
  {
    "text": "involved with boy I started working in Tokyo and buoyance makers of linker D and conduit I know you're familiar with",
    "start": "1467040",
    "end": "1473580"
  },
  {
    "text": "the whole service mesh thing I was not familiar before I started but so roughly a service mesh is like you have all your",
    "start": "1473580",
    "end": "1481620"
  },
  {
    "text": "micro services which are very hot these days and now you got like do you solve",
    "start": "1481620",
    "end": "1487800"
  },
  {
    "text": "the monolith problem but it's like now you have other problems like I've not managed a Microsoft micro service",
    "start": "1487800",
    "end": "1495390"
  },
  {
    "text": "situation myself but it can be tricky so the service mesh right it maker",
    "start": "1495390",
    "end": "1501840"
  },
  {
    "text": "integrates with kubernetes so it's basically a very fancy proxy I just think it has a very fancy proxy that",
    "start": "1501840",
    "end": "1508020"
  },
  {
    "text": "sits in your pod which are terms are not super familiar with but the point is like every single certainly every single",
    "start": "1508020",
    "end": "1515090"
  },
  {
    "text": "server is gonna have to run an instance of this proxy and buoyance started first",
    "start": "1515090",
    "end": "1520290"
  },
  {
    "text": "like way back even before rust really picked up they were like we're gonna",
    "start": "1520290",
    "end": "1525630"
  },
  {
    "text": "write a service match they did the exact same like they went to the exact same situation like a set of questions like",
    "start": "1525630",
    "end": "1531750"
  },
  {
    "text": "do we go with judge job or JVM or do we go with like C or C++ but because it's",
    "start": "1531750",
    "end": "1538040"
  },
  {
    "text": "like the proxy touches every single bit of customer data essentially they ended",
    "start": "1538040",
    "end": "1543660"
  },
  {
    "text": "up starting with Java actually Scala for link or D but it has all like if you're",
    "start": "1543660",
    "end": "1552570"
  },
  {
    "text": "gonna run like a proxy on every single one of your servers with Java Java is not known for being lightweight like",
    "start": "1552570",
    "end": "1558570"
  },
  {
    "text": "it's fast it's plenty fast but getting your memory or the memory of a Java",
    "start": "1558570",
    "end": "1564360"
  },
  {
    "text": "process down is definitely a challenge so linker D initially was not designed",
    "start": "1564360",
    "end": "1572070"
  },
  {
    "text": "to be run on every single server because of the memory requirement the idea was like you had a few large servers you ran",
    "start": "1572070",
    "end": "1577159"
  },
  {
    "text": "really big liquidy processes and from the your app on like in a pod you talk",
    "start": "1577159",
    "end": "1582259"
  },
  {
    "text": "out out of there now that wasn't like if",
    "start": "1582259",
    "end": "1588289"
  },
  {
    "text": "you do that you now are making a network hop instead of talking locally which isn't great so born was like all right",
    "start": "1588289",
    "end": "1594739"
  },
  {
    "text": "let's re-evaluate what we can do like let's write a new piece of software conduits that now is written in rust so",
    "start": "1594739",
    "end": "1602269"
  },
  {
    "text": "it has the proxy part is written in rust and there when they decided to make that",
    "start": "1602269",
    "end": "1607580"
  },
  {
    "text": "change they're like all right we tokyo's around now and now I work there I work at buoyance working on Tokyo so anything",
    "start": "1607580",
    "end": "1618409"
  },
  {
    "text": "you'd like turned out pretty well I'm gonna make a very bold claim I think I'm gonna say Tokyo is the fastest safest",
    "start": "1618409",
    "end": "1623499"
  },
  {
    "text": "networking library out there star that uses operating system sockets like so it",
    "start": "1623499",
    "end": "1630139"
  },
  {
    "text": "doesn't use user land sockets anyway blah blah and I'm not gonna back this up with benchmarks why would I do that I'm",
    "start": "1630139",
    "end": "1635389"
  },
  {
    "text": "going to you well yeah no reason to but I'm gonna sell me my claim I'm gonna I'm",
    "start": "1635389",
    "end": "1641720"
  },
  {
    "text": "going to make an argument for it because like in benchmarks you can fake is pretty fast so as the library like",
    "start": "1641720",
    "end": "1648679"
  },
  {
    "text": "provides everything you would expect from such a library like epoch a cubicle backed IO timers etc etc so it use it has tasks",
    "start": "1648679",
    "end": "1658399"
  },
  {
    "text": "scheduling anyway that's not it's all the stuff that everyone else provides to what a one cool thing is though is the",
    "start": "1658399",
    "end": "1665359"
  },
  {
    "text": "way Tok is not you a big library it's actually a whole set of smaller libraries and you can every one of these pieces can be you standalone or you can",
    "start": "1665359",
    "end": "1671809"
  },
  {
    "text": "mix and match so for example if you did want to take like userland sockets and",
    "start": "1671809",
    "end": "1677840"
  },
  {
    "text": "you could just take like wrap I always it it's not pika it's the other one as DP DK right all right you could just",
    "start": "1677840",
    "end": "1685039"
  },
  {
    "text": "like wrap that and then use everything else that took your provides but two",
    "start": "1685039",
    "end": "1690440"
  },
  {
    "text": "things I think Tokyo does really well like way better than anything else besides being fast and safe is it",
    "start": "1690440",
    "end": "1697399"
  },
  {
    "text": "handles cancellation and back pressure really well so cancellations like let's say you issue an HTTP request like under",
    "start": "1697399",
    "end": "1704149"
  },
  {
    "text": "the hood that HTTP request is going to like maybe it spawns multiple connections because it's like okay let's let's see which endpoint is actually",
    "start": "1704149",
    "end": "1709970"
  },
  {
    "text": "fast so it tries to connect it to two different end points and requires DNS queries to like look out like a resolve",
    "start": "1709970",
    "end": "1716000"
  },
  {
    "text": "the hostname make center etc there's basically a lot of work that might go on just making HTTP request cancellation is",
    "start": "1716000",
    "end": "1723350"
  },
  {
    "text": "like oh if you decide that you don't need the response anymore you how do you stop all that work from happening",
    "start": "1723350",
    "end": "1729650"
  },
  {
    "text": "because in an asynchronous world you it's all happening like somewhere in the background somewhere like canceling",
    "start": "1729650",
    "end": "1736160"
  },
  {
    "text": "Network is historically heart and back pressure now that for them to explain",
    "start": "1736160",
    "end": "1741260"
  },
  {
    "text": "that I defer to wiser people back",
    "start": "1741260",
    "end": "1746510"
  },
  {
    "text": "pressure is the problem of like you are a process that processes water bottles",
    "start": "1746510",
    "end": "1752720"
  },
  {
    "text": "and you are stalled go to sleep and the flight attendant they're just they just",
    "start": "1752720",
    "end": "1758090"
  },
  {
    "text": "generate water bottles for you right but you're asleep you can't drink the water anymore and the flight attendants keep giving you water bottles and they just",
    "start": "1758090",
    "end": "1763490"
  },
  {
    "text": "build up and now you have to deal with these water bottles water but sub water bottles with data and memory it's just",
    "start": "1763490",
    "end": "1769910"
  },
  {
    "text": "it's basically Keys filling up and how do you deal with that so these are are the two problems that I",
    "start": "1769910",
    "end": "1776090"
  },
  {
    "text": "think took your handles really well and I'll explain a bit later how it does it so but the secrets to it being super",
    "start": "1776090",
    "end": "1783050"
  },
  {
    "text": "fast and super is basically did you know work now we already know like rust is a",
    "start": "1783050",
    "end": "1790160"
  },
  {
    "text": "fast language I already explained that but if the library's terrible doesn't matter how fast rust is it's not it's",
    "start": "1790160",
    "end": "1798200"
  },
  {
    "text": "not gonna be fast right so the way Tokyo is structured it's trying to take the",
    "start": "1798200",
    "end": "1805310"
  },
  {
    "text": "idea of like a rust ideas of like how can you provide abstractions that under",
    "start": "1805310",
    "end": "1811730"
  },
  {
    "text": "the hood basically do no additional work over what you would write by hand so the",
    "start": "1811730",
    "end": "1816740"
  },
  {
    "text": "way like the the benchmark is what if you wrote an equivalent like networking process direct handwritten directly with",
    "start": "1816740",
    "end": "1823010"
  },
  {
    "text": "people and so that is like if you didn't use that instruction and when you use Tokyo the end result once it gets",
    "start": "1823010",
    "end": "1829490"
  },
  {
    "text": "compiled down is going to be equivalent to what you would get if you hand wrote it so",
    "start": "1829490",
    "end": "1836790"
  },
  {
    "text": "just a quick like snippet of what it's like maybe to use Tokyo alright so doesn't like the details don't matter",
    "start": "1836790",
    "end": "1843330"
  },
  {
    "text": "too much but the point is like here it's it's pretty high level right it looks like you're just binding you loop over",
    "start": "1843330",
    "end": "1848880"
  },
  {
    "text": "connections you like the copied is just going to copy data from one socket the other then you spawn task so spawn is",
    "start": "1848880",
    "end": "1855330"
  },
  {
    "text": "like just like swanee and go or Erlang it's like you build up these little",
    "start": "1855330",
    "end": "1860370"
  },
  {
    "text": "tasks and you submit them to some executors to run in the background so",
    "start": "1860370",
    "end": "1866360"
  },
  {
    "text": "and the argument is when you write something like this when it compiles down is gonna be equivalent to",
    "start": "1866360",
    "end": "1871410"
  },
  {
    "text": "handwriting a state machine with people so the kind of the way",
    "start": "1871410",
    "end": "1877890"
  },
  {
    "text": "Tokyo structures like manages the asynchronicity and like the programming model is based on futures and future's",
    "start": "1877890",
    "end": "1883980"
  },
  {
    "text": "arms a new idea like every single language has them it's a future is a",
    "start": "1883980",
    "end": "1890400"
  },
  {
    "text": "value that represents like a computation so you have a computation going off in the background the future you is a value",
    "start": "1890400",
    "end": "1896280"
  },
  {
    "text": "they get immediately that represents the completion of that computation and getting the end result if that isn't",
    "start": "1896280",
    "end": "1903060"
  },
  {
    "text": "making sense futures are basically monads I think I hope hopefully that clears it up but the main again the main",
    "start": "1903060",
    "end": "1910050"
  },
  {
    "text": "point is you let's say TCP connects that's going to start an asynchronous process because use a non-blocking",
    "start": "1910050",
    "end": "1917070"
  },
  {
    "text": "socket so you the function is going to return and but the sock is not gonna be connected but you'll get even that you'll immediately get a future",
    "start": "1917070",
    "end": "1923730"
  },
  {
    "text": "representing that from that socket that connected and when you get that you can then chain up more computation so you",
    "start": "1923730",
    "end": "1930420"
  },
  {
    "text": "can just be like okay and then do something with a socket and then do something else so it's instead of kind of having to",
    "start": "1930420",
    "end": "1937350"
  },
  {
    "text": "handwrite state machines you can write your code more synchronous like the code itself can be ordered in the sequence",
    "start": "1937350",
    "end": "1944370"
  },
  {
    "text": "that you want the operations to be and you can do more than just sequential",
    "start": "1944370",
    "end": "1951120"
  },
  {
    "text": "like chaining off sequential like here these two copy future one future - they're gonna happen like concurrently",
    "start": "1951120",
    "end": "1957630"
  },
  {
    "text": "or in parallel I'm not the type of person that splits hairs and then you",
    "start": "1957630",
    "end": "1963480"
  },
  {
    "text": "join them so join takes those two futures and returns a new future that completes when those two complete",
    "start": "1963480",
    "end": "1969929"
  },
  {
    "text": "like the original to complete so the creature one feature to will run in parallel and future three completes when",
    "start": "1969929",
    "end": "1975990"
  },
  {
    "text": "both of them are not and if Tokyo is going to be a zero cost abstraction so",
    "start": "1975990",
    "end": "1982289"
  },
  {
    "text": "not add any runtime cost over what you do my hand futures have to be as well so",
    "start": "1982289",
    "end": "1989730"
  },
  {
    "text": "first let's quick go in really fast let's see roughly what you pull what it would be like to write the state machine",
    "start": "1989730",
    "end": "1995490"
  },
  {
    "text": "with equal cuz that is my arguments gonna end up being the same he pulls",
    "start": "1995490",
    "end": "2001070"
  },
  {
    "text": "roughly to like two things working together like you have non-blocking sockets so you need your general your",
    "start": "2001070",
    "end": "2007549"
  },
  {
    "text": "socket but if they're non blocking so when you do a read if there's no data that is ready to be read the function",
    "start": "2007549",
    "end": "2013730"
  },
  {
    "text": "returns immediately it doesn't block compared the synchronous sockets that will block the thread until data arrives",
    "start": "2013730",
    "end": "2019340"
  },
  {
    "text": "but you could then like just you know loop continuously try to read like read",
    "start": "2019340",
    "end": "2025519"
  },
  {
    "text": "not ready we're not ready to read that ready that would just spin and burn all your CPU so there's the second component",
    "start": "2025519",
    "end": "2031369"
  },
  {
    "text": "as you have an event queue so that is the you pull events off of this queue and when a sockets receives data it will",
    "start": "2031369",
    "end": "2041029"
  },
  {
    "text": "tell you okay hey this sock is ready and then you know okay the socket received and now I can try to read again so you",
    "start": "2041029",
    "end": "2046909"
  },
  {
    "text": "get events from the operating system and then you respond to those events by trying to perform an operation now",
    "start": "2046909",
    "end": "2052819"
  },
  {
    "text": "here's a little bit of pseudocode I would know where I could but real code on the slide it just kind of shows the",
    "start": "2052819",
    "end": "2060230"
  },
  {
    "text": "structure of how the application would be set up you like set up the sockets you register with a pole and you say",
    "start": "2060230",
    "end": "2067579"
  },
  {
    "text": "when the sock is ready give me back token zero token is like whatever like a pointer sized bit of data anything you",
    "start": "2067579",
    "end": "2075020"
  },
  {
    "text": "wants and then you just like so then you get the events and you say okay this events ready like this I get this token",
    "start": "2075020",
    "end": "2080450"
  },
  {
    "text": "and I match that with an action that I have to take and you just do that in a loop over and over and over again now if",
    "start": "2080450",
    "end": "2086210"
  },
  {
    "text": "you get if you want to implement a more involved protocol it gets a little bit",
    "start": "2086210",
    "end": "2094419"
  },
  {
    "text": "more complicated right so I can't then again pseudocode own your inputs but to",
    "start": "2094419",
    "end": "2100630"
  },
  {
    "text": "let's say you want to make do these steps what you have to do is you and you created in some state",
    "start": "2100630",
    "end": "2107300"
  },
  {
    "text": "to track that you create some variable to track the state of your connection they suggest a rest enumeration so it",
    "start": "2107300",
    "end": "2113090"
  },
  {
    "text": "just tracks like a value a socket States gonna be one of these potential values and when you get an event from a pole",
    "start": "2113090",
    "end": "2120890"
  },
  {
    "text": "you load up the state of a socket you're like what state are you in ok you're in this state now I have to try to get you this next day and you",
    "start": "2120890",
    "end": "2127190"
  },
  {
    "text": "just do that really again but it's pretty painful but if you do it you get a lot of benefits you could implement",
    "start": "2127190",
    "end": "2133160"
  },
  {
    "text": "that protocol with no runtime allocations no dynamic dispatch sorry",
    "start": "2133160",
    "end": "2138850"
  },
  {
    "text": "so after comp after compiling Tokyo is going to generate equivalence kind of",
    "start": "2138850",
    "end": "2145430"
  },
  {
    "text": "rental equivalent process and it does",
    "start": "2145430",
    "end": "2150590"
  },
  {
    "text": "that by having a completely different runtime model with futures than you",
    "start": "2150590",
    "end": "2156110"
  },
  {
    "text": "might expect so instead usually futures are you push",
    "start": "2156110",
    "end": "2161480"
  },
  {
    "text": "data through the system with Tokyo you want to pull it and it's a subtle difference I'm gonna get into it a little bit but at a high level",
    "start": "2161480",
    "end": "2168890"
  },
  {
    "text": "Tokyo features look the same like you some look like futures you might use from other languages and this is",
    "start": "2168890",
    "end": "2175100"
  },
  {
    "text": "actually a stumbling block for a lot of people coming in because they have this intuition of how it's going to run and it does something it runs in a",
    "start": "2175100",
    "end": "2182540"
  },
  {
    "text": "completely different way so that's my word of warning so traditionally this is what the",
    "start": "2182540",
    "end": "2189170"
  },
  {
    "text": "sockets going to like a future is going to look like this is the push model so to do it you have a future you have to",
    "start": "2189170",
    "end": "2195620"
  },
  {
    "text": "store the callback you have to allocate the callback and the computation that is running in the background is going to",
    "start": "2195620",
    "end": "2202070"
  },
  {
    "text": "have a pointer to it a pointer to this future and then the consumers gonna have",
    "start": "2202070",
    "end": "2207770"
  },
  {
    "text": "a pointer to that future and then there's a race of saying okay I got the company's computations running and on",
    "start": "2207770",
    "end": "2213020"
  },
  {
    "text": "the consumers running is the consumer and a register the callback first if it registers the callback for us to get this time there is a computation going",
    "start": "2213020",
    "end": "2219350"
  },
  {
    "text": "to come like complete before the consumer registers to callback so",
    "start": "2219350",
    "end": "2225050"
  },
  {
    "text": "there's like so the future itself has to be able to handle both of those like possible permutations in the run time",
    "start": "2225050",
    "end": "2231920"
  },
  {
    "text": "and on top of what I didn't show like you'll probably have to have some sort of like atomic states to make",
    "start": "2231920",
    "end": "2237790"
  },
  {
    "text": "it work in multiple threads it gets pretty involved but then you have the future you can chain up the",
    "start": "2237790",
    "end": "2243550"
  },
  {
    "text": "computations and once you build up that chain of computations with your future",
    "start": "2243550",
    "end": "2248950"
  },
  {
    "text": "it's gonna run so here's the drain sock of future and all the callbacks and at some points like the computation of the",
    "start": "2248950",
    "end": "2255220"
  },
  {
    "text": "finish and it's gonna be like I got the final value I'm gonna push it so I'm gonna call the callbacks I'm gonna push",
    "start": "2255220",
    "end": "2260320"
  },
  {
    "text": "it to down the system and the value is going to just go through all the callbacks eagerly and get to the end but",
    "start": "2260320",
    "end": "2265330"
  },
  {
    "text": "the future has to hold on to it because at some point another callback is first now it gets the backpressure thing comes",
    "start": "2265330",
    "end": "2274030"
  },
  {
    "text": "in if instead of you returning one value like like the future I described you have like a channel so it's going to be",
    "start": "2274030",
    "end": "2280060"
  },
  {
    "text": "many values are going to keep coming off coming through the system through the channel but this time it gets hung up on",
    "start": "2280060",
    "end": "2285940"
  },
  {
    "text": "the callback and the value keeps getting pushed the problem is the pushing parts so this can be resolved like are like",
    "start": "2285940",
    "end": "2294730"
  },
  {
    "text": "all these like are acts and other systems solve it by having a fairly involved API between the two like the",
    "start": "2294730",
    "end": "2301210"
  },
  {
    "text": "Hustle they call back in the channel saying okay I'm actually ready Oh pause Oh anyway it gets involved but with a",
    "start": "2301210",
    "end": "2310720"
  },
  {
    "text": "pull based system instead of like storing callbacks or or anything so here what it so it's while it's a future that",
    "start": "2310720",
    "end": "2317860"
  },
  {
    "text": "represents the completion with Tokyo the future actually is the con is the computation so it's it stores all the",
    "start": "2317860",
    "end": "2325840"
  },
  {
    "text": "only information that it needs to run the computation and then when you try to pull a value out of it that's what",
    "start": "2325840",
    "end": "2331090"
  },
  {
    "text": "drives the computation so here this future just has the socket and stores",
    "start": "2331090",
    "end": "2337600"
  },
  {
    "text": "the number about read and when you try to pull in it pull the value either it",
    "start": "2337600",
    "end": "2343120"
  },
  {
    "text": "returns ready when the value can be returned or it returns not ready saying",
    "start": "2343120",
    "end": "2349210"
  },
  {
    "text": "the computation is not completed yet so in this implementation will you try to",
    "start": "2349210",
    "end": "2354520"
  },
  {
    "text": "read if you get zero that means the socket closed and you're like okay I can finally get the final results of this",
    "start": "2354520",
    "end": "2360310"
  },
  {
    "text": "future and you'll return so next exactly the same API this is",
    "start": "2360310",
    "end": "2367069"
  },
  {
    "text": "like the same high level API for chaining computations but again unlike",
    "start": "2367069",
    "end": "2373040"
  },
  {
    "text": "in the push model these chain computations don't do anything until they're pulled so this is what the then",
    "start": "2373040",
    "end": "2379730"
  },
  {
    "text": "future will look like and it's an amine oome of two different states so I'm",
    "start": "2379730",
    "end": "2385670"
  },
  {
    "text": "starting to get into like okay remember the that you need to represent the state of the connection here you have this",
    "start": "2385670",
    "end": "2393220"
  },
  {
    "text": "Combinator it has the state of like okay I'm trying to run this first future F is the callback and when you run it like",
    "start": "2393220",
    "end": "2402079"
  },
  {
    "text": "you try to you it gets pulled if it's in the first state it tries to get the value out of it",
    "start": "2402079",
    "end": "2407480"
  },
  {
    "text": "and when it does successfully runs the callback and then it gets a future from",
    "start": "2407480",
    "end": "2412579"
  },
  {
    "text": "the callback and then it updates itself saying okay now we're running the second half of the computation so this layout",
    "start": "2412579",
    "end": "2419630"
  },
  {
    "text": "is actually just a plain old struck there's no allocations it just contains like it's just enum which just says",
    "start": "2419630",
    "end": "2426380"
  },
  {
    "text": "either I'm in state a or state B so the way this runs is you go like you start",
    "start": "2426380",
    "end": "2433940"
  },
  {
    "text": "pulling so it goes again through all the callbacks and the pole like the then",
    "start": "2433940",
    "end": "2439309"
  },
  {
    "text": "Combinator or the then future then says okay now I got to find my state I pull my inner one so now it pulls the next",
    "start": "2439309",
    "end": "2445220"
  },
  {
    "text": "one and it's actually just going up the nested stack until it gets to drain socket and then drain socket says",
    "start": "2445220",
    "end": "2452000"
  },
  {
    "text": "alright I am not ready yet because I have not finished raining all the stock and then just returns not ready all the",
    "start": "2452000",
    "end": "2457520"
  },
  {
    "text": "way back down now some point in the future you say and at some point in the futures a little hand wavy but it gets",
    "start": "2457520",
    "end": "2463700"
  },
  {
    "text": "called get when when it's ready to try again and this time calls that like then",
    "start": "2463700",
    "end": "2470480"
  },
  {
    "text": "calls the inner future etc so it goes up the stock drain sock it's going to be ready and that gets returned all the way",
    "start": "2470480",
    "end": "2477530"
  },
  {
    "text": "back down so because so and remember drain socket held actually ran the",
    "start": "2477530",
    "end": "2485420"
  },
  {
    "text": "computation when it got pulled so if you don't pull the future no work happens so",
    "start": "2485420",
    "end": "2492079"
  },
  {
    "text": "because no work happens it can't produce values so in the channel example again you let's say you",
    "start": "2492079",
    "end": "2501140"
  },
  {
    "text": "pulled it a return the value this time the callback stop so the callback itself is waiting on some other computation and",
    "start": "2501140",
    "end": "2509089"
  },
  {
    "text": "it holds the value it in it and then it just says not ready but the next time you pull the pole goes all the way up to",
    "start": "2509089",
    "end": "2516319"
  },
  {
    "text": "that callback that callbacks now it's not ready yet so it's not going to try to call channel again and because it",
    "start": "2516319",
    "end": "2522890"
  },
  {
    "text": "doesn't pull Channel the that work never happens because the work only happens",
    "start": "2522890",
    "end": "2528829"
  },
  {
    "text": "when you pull it so by virtue of doing all that you you just you get back",
    "start": "2528829",
    "end": "2535160"
  },
  {
    "text": "pressure handling for free basically all right so come like getting back to this",
    "start": "2535160",
    "end": "2542929"
  },
  {
    "text": "was the original protocol like we were trying to implement this is how you might write it up using futures and once",
    "start": "2542929",
    "end": "2549589"
  },
  {
    "text": "you compile it it essentially it's going to be a bunch of it's going to be the",
    "start": "2549589",
    "end": "2554929"
  },
  {
    "text": "type to look a lot crazier than this it's gonna be a whole bunch of nested then callbacks which are like two",
    "start": "2554929",
    "end": "2562009"
  },
  {
    "text": "different genomes but it essentially is the same thing as this and it's the same",
    "start": "2562009",
    "end": "2570109"
  },
  {
    "text": "thing as equal and that's why I say it's the fastest basically because it does no",
    "start": "2570109",
    "end": "2576170"
  },
  {
    "text": "no more work than it has to so then there's the there was the magic like Oh at some point in the future it",
    "start": "2576170",
    "end": "2582829"
  },
  {
    "text": "gets pulled remember like that was a little hand wavy the answer to that is that route that that top-level future",
    "start": "2582829",
    "end": "2589489"
  },
  {
    "text": "represents the task you spawn it and then mmm in the background that that",
    "start": "2589489",
    "end": "2594979"
  },
  {
    "text": "starts that's it the crazy diagram but it submits the task to the executor and",
    "start": "2594979",
    "end": "2601029"
  },
  {
    "text": "its job the executors job is going to be to pull the future when it's when",
    "start": "2601029",
    "end": "2608119"
  },
  {
    "text": "there's work to be done roughly the way it happens so remember external events come in with",
    "start": "2608119",
    "end": "2615319"
  },
  {
    "text": "eople so eople gets the events I call those like the drivers of the like the so the socket is like a resource the e",
    "start": "2615319",
    "end": "2622130"
  },
  {
    "text": "pole is a driver so it gets the event from the operating system it's going to",
    "start": "2622130",
    "end": "2628099"
  },
  {
    "text": "say hey socket you are ready to be operated on the socket itself is going to know",
    "start": "2628099",
    "end": "2634320"
  },
  {
    "text": "like which executor it's on so it's gonna inform the executor I'm ready to be read from and it's the execute then",
    "start": "2634320",
    "end": "2640650"
  },
  {
    "text": "will be like okay so this task can be pulled so the way a task the way the",
    "start": "2640650",
    "end": "2645780"
  },
  {
    "text": "executor determines the task needs to be pulled is if any of its resources like sockets become ready so because the test",
    "start": "2645780",
    "end": "2652500"
  },
  {
    "text": "is blocked on the socket to make further progress once the socket transitions to ready it can be pulled again and the",
    "start": "2652500",
    "end": "2661740"
  },
  {
    "text": "thing the thing about the hole like that hole growl like the diagram I just",
    "start": "2661740",
    "end": "2668400"
  },
  {
    "text": "showed in the previous slide and all the different components of Tokyo like I said they're loosely coupled so this is",
    "start": "2668400",
    "end": "2674730"
  },
  {
    "text": "like the full API of how everything fits together everything is basically Lucy",
    "start": "2674730",
    "end": "2681030"
  },
  {
    "text": "couple and only connects we have these two api's so which MIT lets you swap out your executor swap out your like timer",
    "start": "2681030",
    "end": "2687960"
  },
  {
    "text": "mix and match how you want so basically you use rust you get to have your you",
    "start": "2687960",
    "end": "2695130"
  },
  {
    "text": "get to have your cake and eat it too high level like urgh anomic language without sacrificing performance and if",
    "start": "2695130",
    "end": "2702869"
  },
  {
    "text": "you use Tokyo Tokyo plus rust gets you speed and safety for your network programming",
    "start": "2702869",
    "end": "2709338"
  },
  {
    "text": "[Applause] I think there's some time for questions",
    "start": "2711870",
    "end": "2718480"
  },
  {
    "text": "all right I'll do start there and then go oh good sorry I'm not super familiar with rust",
    "start": "2718480",
    "end": "2725830"
  },
  {
    "text": "as rust have like language support for futures or is that just a library contract that you've been yeah I did so",
    "start": "2725830",
    "end": "2732430"
  },
  {
    "text": "right now it's the good thing about rust because it's such a like systems language you it doesn't you can basic",
    "start": "2732430",
    "end": "2739780"
  },
  {
    "text": "implement anything directly link so right now futures is a library there is ongoing work to add some additional",
    "start": "2739780",
    "end": "2746640"
  },
  {
    "text": "async/await capability to the language and at that points that would require",
    "start": "2746640",
    "end": "2752290"
  },
  {
    "text": "compiler supports so some of the the a minimum amount of the futures library",
    "start": "2752290",
    "end": "2758650"
  },
  {
    "text": "will have to move into the language itself but you will still need the futures library to get the full set of",
    "start": "2758650",
    "end": "2765280"
  },
  {
    "text": "capabilities so basically right now it's a library a little bit what async/await a little bit will move in",
    "start": "2765280",
    "end": "2772920"
  },
  {
    "text": "so your examples have eople a lot yeah do you support KQ yeah I will select",
    "start": "2776690",
    "end": "2781819"
  },
  {
    "text": "although yeah I supports all of them basically KQ iocp others it's Thursday I mean there's an",
    "start": "2781819",
    "end": "2788930"
  },
  {
    "text": "abstraction for me Oh is actually the rust abstraction over all of that I just",
    "start": "2788930",
    "end": "2794030"
  },
  {
    "text": "think people because it's easier than a vendor of an IO or whatever okay",
    "start": "2794030",
    "end": "2799069"
  },
  {
    "text": "supports all of it yeah and then one other question from a concurrency perspective you're talking about the fact that you have it built in",
    "start": "2799069",
    "end": "2805670"
  },
  {
    "text": "in the tasks spawning from a rust language perspective is it truly",
    "start": "2805670",
    "end": "2811789"
  },
  {
    "text": "concurrent is it really like spanning cores well so it's in Tokyo spawn is a",
    "start": "2811789",
    "end": "2818119"
  },
  {
    "text": "library thing and it spawns it on an executor the things that like yes so the",
    "start": "2818119",
    "end": "2823190"
  },
  {
    "text": "answer is it depends on the executor Tokyo comes with two it comes with a fully like end to end scheduler so runs",
    "start": "2823190",
    "end": "2830900"
  },
  {
    "text": "it across all cores uses like work stealing the whole like nine yards so",
    "start": "2830900",
    "end": "2835940"
  },
  {
    "text": "it's pretty heavily inspired by like the go and Erlang scheduler so it's in that front it's not intimating it's just",
    "start": "2835940",
    "end": "2842270"
  },
  {
    "text": "copying what others do but if you don't want threading you can also actually say",
    "start": "2842270",
    "end": "2847549"
  },
  {
    "text": "actually don't want to use this threaded executor I'm going to use a single project a single thread an executor or you could say I want to use a threaded",
    "start": "2847549",
    "end": "2854299"
  },
  {
    "text": "one but like keep them siloed like so because you can mix and match the executor you can use whichever one fits",
    "start": "2854299",
    "end": "2860779"
  },
  {
    "text": "your use guys",
    "start": "2860779",
    "end": "2863319"
  },
  {
    "text": "so that's all looks really good I like the state machine stuff but in the",
    "start": "2868430",
    "end": "2875520"
  },
  {
    "text": "course of writing an application with Tokyo how much do people actually have to write their own state machines so",
    "start": "2875520",
    "end": "2881780"
  },
  {
    "text": "right now a good amount so the reason okay so the reason is okay let me just",
    "start": "2881780",
    "end": "2889260"
  },
  {
    "text": "start so the problem is you just want to be able to use borrows with rust but borrows are tied to the stack right it's",
    "start": "2889260",
    "end": "2896970"
  },
  {
    "text": "you have to be able to guarantee that a borrow will outlive will not outlive the",
    "start": "2896970",
    "end": "2903420"
  },
  {
    "text": "owner of the data and not as pretty heavily based off of the stack once you going asynchronous you lose the stack so",
    "start": "2903420",
    "end": "2909930"
  },
  {
    "text": "it gets a bit trickier you can either you can use all the common errors that I showed but when you do that you have to adopt a very functional style where you",
    "start": "2909930",
    "end": "2917040"
  },
  {
    "text": "pass in all your state until each come there and then return it so if you like functional programming you'd be like",
    "start": "2917040",
    "end": "2922200"
  },
  {
    "text": "this is great if you don't so the thing",
    "start": "2922200",
    "end": "2927210"
  },
  {
    "text": "is that like if you get into a more complicated situation where you need like a diplomatic future that takes a",
    "start": "2927210",
    "end": "2933390"
  },
  {
    "text": "right or does some borrowing or not that's when you have to like take that little chunk of logic and write it by",
    "start": "2933390",
    "end": "2938910"
  },
  {
    "text": "hand so you have to implement the future that does that bit of logic that state machine yourself but you don't have to",
    "start": "2938910",
    "end": "2946350"
  },
  {
    "text": "write anything else you can just compose it with the comedies like I showed it's definitely not as easy as it could be",
    "start": "2946350",
    "end": "2952620"
  },
  {
    "text": "right now because a you again you Lu you are kind of working at the borrowed",
    "start": "2952620",
    "end": "2958290"
  },
  {
    "text": "checker but this will be solved with async/await it's basically everyone is like it's old its old those problems go",
    "start": "2958290",
    "end": "2964230"
  },
  {
    "text": "away async/await it's not it's a bit it hasn't been released yet so I'm like I'll talk about",
    "start": "2964230",
    "end": "2969660"
  },
  {
    "text": "it but hopefully by the end of you I was curious in your opinion when is",
    "start": "2969660",
    "end": "2976500"
  },
  {
    "text": "rust not a good choice to build your service with ah well never no no I mean",
    "start": "2976500",
    "end": "2984660"
  },
  {
    "text": "I'm I would say like it's a lot of its the ecosystem so it's like do you want to build a high level",
    "start": "2984660",
    "end": "2990640"
  },
  {
    "text": "up at that point like absolute max rock performance probably doesn't matter as much there's less and like there are",
    "start": "2990640",
    "end": "2997090"
  },
  {
    "text": "some web frameworks for example but I would say at that level I probably",
    "start": "2997090",
    "end": "3003900"
  },
  {
    "text": "wouldn't it it's very use case specific I would say",
    "start": "3003900",
    "end": "3010020"
  },
  {
    "text": "you should never use C or C++ I'm just gonna like just make it that one black away but hopefully I don't offend anyone",
    "start": "3010020",
    "end": "3016110"
  },
  {
    "text": "but besides that if you're picking between like a runtime language versus",
    "start": "3016110",
    "end": "3022850"
  },
  {
    "text": "rust I mean there is it depends right",
    "start": "3022850",
    "end": "3028200"
  },
  {
    "text": "like if you're at the low level I would always use rust like to write a proxy derived database at this point just",
    "start": "3028200",
    "end": "3034050"
  },
  {
    "text": "always use rust tried to what write a web service like just simply because the ecosystems there probably not and then",
    "start": "3034050",
    "end": "3039660"
  },
  {
    "text": "past that once there is ecosystem you have to like decide right there's lots of other factors like what do people",
    "start": "3039660",
    "end": "3046920"
  },
  {
    "text": "already know and your company but the answer is always rest I'll be right",
    "start": "3046920",
    "end": "3056310"
  },
  {
    "text": "outside",
    "start": "3056310",
    "end": "3058460"
  }
]