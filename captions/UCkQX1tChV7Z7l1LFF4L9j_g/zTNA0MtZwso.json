[
  {
    "start": "0",
    "end": "147000"
  },
  {
    "text": "[Music]",
    "start": "1000",
    "end": "7790"
  },
  {
    "text": "my name is Simeon Franklin I am a longtime software developer I've done mostly Python and Django stuff for the",
    "start": "7790",
    "end": "14510"
  },
  {
    "text": "last mmm five or six years but I quit being an honest developer about a year ago in started to work full-time for a",
    "start": "14510",
    "end": "20150"
  },
  {
    "text": "company called maracan√£ so I I now train for a living I teach people Python and",
    "start": "20150",
    "end": "25220"
  },
  {
    "text": "Django and occasionally bits and pieces of JavaScript mostly as penance for my",
    "start": "25220",
    "end": "30289"
  },
  {
    "text": "sins but I've been lots of interesting places talk to lots of interesting developers I was at Facebook last week",
    "start": "30289",
    "end": "35570"
  },
  {
    "text": "I've been to Intel and Cisco and Motorola and Qualcomm you name it been there and if you're interested in the",
    "start": "35570",
    "end": "43309"
  },
  {
    "text": "stuff that I'm interested in hey follow me on twitter SME and franklin hit up my blog ID right there you regularly come",
    "start": "43309",
    "end": "49699"
  },
  {
    "text": "find me in the Python community SF Python meetup in SF is a lot of fun we",
    "start": "49699",
    "end": "54829"
  },
  {
    "text": "meet at Yelp there's beer and pizza and interesting speakers or come down to Bay",
    "start": "54829",
    "end": "59870"
  },
  {
    "text": "Piggy's in the South Bay if that floats your boat and I sometimes go to the django meetup in SF as well don't",
    "start": "59870",
    "end": "65300"
  },
  {
    "text": "organize that one um but you know you might catch me there from time to time and remind me at the end of the talk to",
    "start": "65300",
    "end": "72170"
  },
  {
    "text": "talk more about the wonderful Python community so this talk so I aimed it for",
    "start": "72170",
    "end": "79430"
  },
  {
    "text": "a novice audience for people that don't have experience with Django and I'm hoping to like let's you feel like you",
    "start": "79430",
    "end": "84920"
  },
  {
    "text": "understand an overview how Django works the minimum number of like concepts and",
    "start": "84920",
    "end": "90290"
  },
  {
    "text": "terminology you need to write web applications with Django I want to show you some of my favorite third-party django apps that turns out to be a lot",
    "start": "90290",
    "end": "96020"
  },
  {
    "text": "of what acquiring experience with django involves and then just close off with if your experience with django you know",
    "start": "96020",
    "end": "101990"
  },
  {
    "text": "some python and you're bored with the first two thirds of the talks we'll talk about some advanced python language features that you ought to be using and",
    "start": "101990",
    "end": "107840"
  },
  {
    "text": "how you can use them with django and you know throw some code on the board and see if there's anything that makes us stop and think a little bit and I have",
    "start": "107840",
    "end": "114110"
  },
  {
    "text": "no idea how I'm gonna do on time here so I'm a I'm a race or jump ahead or I may end with twenty minutes for Q&A and it",
    "start": "114110",
    "end": "121250"
  },
  {
    "text": "would be awesome just in terms of the talk in general feel free to ask questions you can interrupt me that's",
    "start": "121250",
    "end": "126560"
  },
  {
    "text": "right if you don't understand something if I'm going too fast raise your hand throw something in my general direction I might throw it back at you just you",
    "start": "126560",
    "end": "133520"
  },
  {
    "text": "know no heckling so let's talk about let's talk about django django is a web",
    "start": "133520",
    "end": "140480"
  },
  {
    "text": "application framework I need to talk about what that means exactly but it's been around for a while it was first released in 2005 it's kind",
    "start": "140480",
    "end": "146840"
  },
  {
    "text": "of a a project that was abstracted from a particular web application made for a newspaper in Lawrence Kansas and it had",
    "start": "146840",
    "end": "154459"
  },
  {
    "start": "147000",
    "end": "195000"
  },
  {
    "text": "some immediate popularity it just it just hit things exactly right a web framework written in Python Ruby on",
    "start": "154459",
    "end": "161030"
  },
  {
    "text": "Rails was hugely becoming hugely popular right at that time and Django is kind of pythons answered Ruby on Rails so tons",
    "start": "161030",
    "end": "167690"
  },
  {
    "text": "of development activity tons of revisions it didn't have kind of a good",
    "start": "167690",
    "end": "173090"
  },
  {
    "text": "formal release cycle until 1.0 in 2008 three years later but had tons of community participation and Django 1.0",
    "start": "173090",
    "end": "179450"
  },
  {
    "text": "is kind of more or less modern Django it just released 1.5 earlier this year and",
    "start": "179450",
    "end": "185360"
  },
  {
    "text": "Django is kind of on a six-month release schedule they promised to come out with a new version every six months as a matter of fact they always slipped by a",
    "start": "185360",
    "end": "191209"
  },
  {
    "text": "few weeks but the the release cycle has been been good for us so with a web",
    "start": "191209",
    "end": "196790"
  },
  {
    "start": "195000",
    "end": "362000"
  },
  {
    "text": "framework it's kind of the same space as competitors Patricia mentioned like Ruby on Rails or maybe heard of pyramid or",
    "start": "196790",
    "end": "202660"
  },
  {
    "text": "nodejs and JavaScript or or other Python things like flask PHP stuff cake PHP",
    "start": "202660",
    "end": "208760"
  },
  {
    "text": "code igniter just the general space is to write quickly write web applications",
    "start": "208760",
    "end": "214790"
  },
  {
    "text": "that are backed by a database and a Django I'm not sure how to convey its popularity it's been successfully use on",
    "start": "214790",
    "end": "221359"
  },
  {
    "text": "really large projects so discuss the internet commenting framework you can have discussed comments you know on your",
    "start": "221359",
    "end": "227269"
  },
  {
    "text": "blog it's a huge site huge traffic site has been written in in Django forever David Kramer the the discus guy has",
    "start": "227269",
    "end": "234049"
  },
  {
    "text": "contribute a lot of performance stuff the Django core and Pinterest maybe know about Pinterest tons of pictures of",
    "start": "234049",
    "end": "239560"
  },
  {
    "text": "social media around pictures cite the onion first parts of mozilla.org that",
    "start": "239560",
    "end": "245209"
  },
  {
    "text": "have to do with collecting data back from the millions of Firefox browsers so jank has been used for lots of large and",
    "start": "245209",
    "end": "250790"
  },
  {
    "text": "successful projects as far as numbers like if you look at pi pi which is the",
    "start": "250790",
    "end": "256609"
  },
  {
    "text": "way you can automatically install Python packages Django version 1.5 had 50,000",
    "start": "256609",
    "end": "262700"
  },
  {
    "text": "plus downloads and it was released in February so it's being actively used there's a site called Django site org",
    "start": "262700",
    "end": "269210"
  },
  {
    "text": "that's supposed to list a lot of sites that use Django it has 4,200 sites listed I can",
    "start": "269210",
    "end": "275000"
  },
  {
    "text": "promise you it's not exhaustive because like I've written 100 sites that aren't on there at all but it's it's widely",
    "start": "275000",
    "end": "280700"
  },
  {
    "text": "used I did think I'd try some Google Trends to show Django being popular but um",
    "start": "280700",
    "end": "286130"
  },
  {
    "text": "screw you Django Unchained he just totally messed up our search keywords so this graph is completely meaningless",
    "start": "286130",
    "end": "291200"
  },
  {
    "text": "paying no attention to it at all but but",
    "start": "291200",
    "end": "296810"
  },
  {
    "text": "it is popular it is widely used it is kind of beloved in the Python community",
    "start": "296810",
    "end": "302050"
  },
  {
    "text": "why Django why might you pick Django it's interesting one of the reasons to",
    "start": "302050",
    "end": "307520"
  },
  {
    "text": "use Django might be a reason that frustrates you a little bit Jake is a project that has paid a lot of attention",
    "start": "307520",
    "end": "313760"
  },
  {
    "text": "to documentation from day one the guys that started it right worked for a newspaper some of them had English",
    "start": "313760",
    "end": "319820"
  },
  {
    "text": "degrees instead of CS degrees they were around writers they valued good clear Thoreau comprehensive documentation so",
    "start": "319820",
    "end": "326330"
  },
  {
    "text": "Jago had great Docs it still does there's a lot of them you might have noticed another reason to pick Django is",
    "start": "326330",
    "end": "333530"
  },
  {
    "text": "Python so if you're like me you love the Python programming language maybe you have a half a dozen languages to compare it to",
    "start": "333530",
    "end": "338840"
  },
  {
    "text": "maybe is your first programming language but I can assure you Python program Python makes me happy happier than",
    "start": "338840",
    "end": "345560"
  },
  {
    "text": "happier than C C++ Java Perl most other",
    "start": "345560",
    "end": "350930"
  },
  {
    "text": "stuff that I've written code in anger visual basic way back when Delphi there are lots of old musty language rattling",
    "start": "350930",
    "end": "357350"
  },
  {
    "text": "around in my brain but kind of the other reason for Django the why Django question is Django is a full stack",
    "start": "357350",
    "end": "364640"
  },
  {
    "start": "362000",
    "end": "412000"
  },
  {
    "text": "framework or you might say its batteries included so Jenko does like everything",
    "start": "364640",
    "end": "370790"
  },
  {
    "text": "almost lots of competitors in this space are frameworks that aim to provide you a",
    "start": "370790",
    "end": "376070"
  },
  {
    "text": "minimal core that you'll extend to do your thing Django tries to give you tools to do everything you could possibly want to do it does a really",
    "start": "376070",
    "end": "381890"
  },
  {
    "text": "good job at that it turns out that it's not enough and we'll look at that in a little bit but jenker just kind of hits",
    "start": "381890",
    "end": "388610"
  },
  {
    "text": "the sweet spot for the typical kind of database backed web applications that",
    "start": "388610",
    "end": "395090"
  },
  {
    "text": "kind of make up 80% of the web applications people have written for the last the last half a decade or so makes",
    "start": "395090",
    "end": "400790"
  },
  {
    "text": "a lot of that stuff easier faster you could check out the docs you've probably",
    "start": "400790",
    "end": "405890"
  },
  {
    "text": "been to docs Django project com take a look at the front page there's a lot of links and if you're gonna be a",
    "start": "405890",
    "end": "411650"
  },
  {
    "text": "Jenga developer yeah you kind of have to read all those links on the front page it's good ducks they're comprehensive",
    "start": "411650",
    "end": "418070"
  },
  {
    "start": "412000",
    "end": "483000"
  },
  {
    "text": "they're they're well organized there's tables of contents there's a good search engine and really the whole framework is",
    "start": "418070",
    "end": "423410"
  },
  {
    "text": "documented there aren't very many undocumented bits and pieces laying about and it's traditionally had a",
    "start": "423410",
    "end": "429620"
  },
  {
    "text": "tutorial which is most people's first exposure to Django so quick show of hands who's done the Django tutorial did",
    "start": "429620",
    "end": "437480"
  },
  {
    "text": "you do it for version 1.5 out of curiosity so now it has like five sections and some extra sections okay",
    "start": "437480",
    "end": "444230"
  },
  {
    "text": "the latest version maybe so do start with the tutorial that's that's still good advice go take the Django tutorial",
    "start": "444230",
    "end": "450920"
  },
  {
    "text": "it'll walk you through some basic concepts especially it up to version 1.5",
    "start": "450920",
    "end": "458030"
  },
  {
    "text": "it did some dumb things but I think make it harder for you getting started and I'm hoping in this talk just to give you",
    "start": "458030",
    "end": "466130"
  },
  {
    "text": "a different introduction to Django the the basic moving pieces that you need to know I still do the tutorial if you",
    "start": "466130",
    "end": "471410"
  },
  {
    "text": "haven't but it might go better after this talk so let's just look at the fundamental like the concepts the",
    "start": "471410",
    "end": "478070"
  },
  {
    "text": "terminology you need a master to write web applications with Django and we'll",
    "start": "478070",
    "end": "483560"
  },
  {
    "start": "483000",
    "end": "527000"
  },
  {
    "text": "do that with a really really basic web application so you want to build a web",
    "start": "483560",
    "end": "489620"
  },
  {
    "text": "application with Django what does that look like might look like Pinterest",
    "start": "489620",
    "end": "495140"
  },
  {
    "text": "people have been there right big front page with lots of pictures people make",
    "start": "495140",
    "end": "500390"
  },
  {
    "text": "accounts people pinned their favorite pictures you can follow people and see the things that they pinned there's lots",
    "start": "500390",
    "end": "505910"
  },
  {
    "text": "of data flowing around lots of dynamic data or you know maybe your interest is",
    "start": "505910",
    "end": "511040"
  },
  {
    "text": "reddit another social networking site pretty much oriented around I'll post a comment or I'll post a link to an",
    "start": "511040",
    "end": "516349"
  },
  {
    "text": "article and then everybody will comment maybe you'll vote me up if my comments are particularly insightful it's almost",
    "start": "516349",
    "end": "522589"
  },
  {
    "text": "like a game right acquiring some score but again there's lots of data there's people relationships points articles",
    "start": "522589",
    "end": "528140"
  },
  {
    "start": "527000",
    "end": "600000"
  },
  {
    "text": "comments lots of data floating around so those are two really different projects",
    "start": "528140",
    "end": "534110"
  },
  {
    "text": "but they're both kind of the sort of thing that you might try and do with Django their HTML interfaces too highly",
    "start": "534110",
    "end": "540070"
  },
  {
    "text": "dynamic data with a relational database back-end it's the kind of thing that the Django is really good at so what do you",
    "start": "540070",
    "end": "547510"
  },
  {
    "text": "have to know to write the next Pinterest well that's gonna be more than this but",
    "start": "547510",
    "end": "554290"
  },
  {
    "text": "let's start with this so the first bit is just that Django is going to be HTTP",
    "start": "554290",
    "end": "559930"
  },
  {
    "text": "in and HTTP out it's gonna hide that from you a little bit but you're gonna",
    "start": "559930",
    "end": "565360"
  },
  {
    "text": "need to understand that so the the diagram here has HTTP requests and HTTP",
    "start": "565360",
    "end": "570940"
  },
  {
    "text": "responses and Django is the stuff in yellow the minimum that you need to know to write a web application is you need",
    "start": "570940",
    "end": "578500"
  },
  {
    "text": "to know about URLs URLs and Django are basically how you say hey the request that's coming in where should it go and",
    "start": "578500",
    "end": "585040"
  },
  {
    "text": "you pick something you gotta know about views views are gonna be the Python",
    "start": "585040",
    "end": "590170"
  },
  {
    "text": "color balls that actually return a response and if you have a really basic web application your view might only use",
    "start": "590170",
    "end": "596340"
  },
  {
    "text": "models to talk to the database and templates to produce some HTML so let's",
    "start": "596340",
    "end": "601570"
  },
  {
    "start": "600000",
    "end": "701000"
  },
  {
    "text": "see if we can understand like this much and again write a really simple trivial web app with that amount of",
    "start": "601570",
    "end": "607120"
  },
  {
    "text": "understanding I'm gonna kind of wave my hands at the installation section go see the documentation but if you know Python",
    "start": "607120",
    "end": "613690"
  },
  {
    "text": "tools you can make a virtual environment you can use pip to install Django and",
    "start": "613690",
    "end": "620070"
  },
  {
    "text": "then there's a couple of concepts you need to know once you have Django actually installed the first concept is",
    "start": "620070",
    "end": "625660"
  },
  {
    "text": "a project so your web application just let's call that a project the web",
    "start": "625660",
    "end": "630970"
  },
  {
    "text": "application is a project and Django comes with a tool to create a project for you kind of a blank empty skeleton",
    "start": "630970",
    "end": "636520"
  },
  {
    "text": "of a project so once you have Django installed you can type a command called Django admin dot py and it takes sub",
    "start": "636520",
    "end": "645700"
  },
  {
    "text": "commands and the sub command that you're interested in at the moment is called start project and you can give your project whatever name you like as long",
    "start": "645700",
    "end": "653050"
  },
  {
    "text": "as the valid Python identifier so don't go crazy with spaces or weird characters stick the alphanumeric and underscore so",
    "start": "653050",
    "end": "660190"
  },
  {
    "text": "I said Django admin start project story time and then just to see what files I got I got a new directory called story",
    "start": "660190",
    "end": "666430"
  },
  {
    "text": "time I've got some settings URLs and a",
    "start": "666430",
    "end": "671770"
  },
  {
    "text": "managed up py in there there's a couple of other files we pretty much own how to pay attention to there's a whiskey file that's kind of",
    "start": "671770",
    "end": "677260"
  },
  {
    "text": "about your deployment and there's an init file - uses what's the init file there for the file it says underscore",
    "start": "677260",
    "end": "687460"
  },
  {
    "text": "underscore init underscore underscore dot py there you go so that files empty",
    "start": "687460",
    "end": "692590"
  },
  {
    "text": "its sizes zero it has no code but that's the special file Python looks at to say can I import this directory as a module",
    "start": "692590",
    "end": "698260"
  },
  {
    "text": "or not so little Python thing there so what does the project have fundamentally",
    "start": "698260",
    "end": "704230"
  },
  {
    "start": "701000",
    "end": "748000"
  },
  {
    "text": "that we're interested in the main thing it has is settings so the settings dot py basically says like okay which",
    "start": "704230",
    "end": "710200"
  },
  {
    "text": "project is this maybe things like what database you're going to talk to or who are the users who can use it and what",
    "start": "710200",
    "end": "716490"
  },
  {
    "text": "what all the configuration details for your particular application are there's a manage that py file there you won't",
    "start": "716490",
    "end": "722440"
  },
  {
    "text": "ever edit edit the manage py file it's just a command runner as to do things in the context of your project you will be",
    "start": "722440",
    "end": "728770"
  },
  {
    "text": "editing that settings and then there's a URLs dot py file and this is your starting point to configure your URLs",
    "start": "728770",
    "end": "734950"
  },
  {
    "text": "which is the very first thing that you need to do so everybody with me so far",
    "start": "734950",
    "end": "742720"
  },
  {
    "text": "I ran Django admin I started a project I haven't edited any files whatsoever yet",
    "start": "742720",
    "end": "747940"
  },
  {
    "text": "I have a directory full of Python files I didn't create them they've got lots of sensible defaults and comments we can",
    "start": "747940",
    "end": "754120"
  },
  {
    "start": "748000",
    "end": "809000"
  },
  {
    "text": "use that manage py file to then run commands from now on you could still use Django admin but manage people I knows",
    "start": "754120",
    "end": "759940"
  },
  {
    "text": "what at what project it's in so the convention is Python manage that py and then some kind of command the first",
    "start": "759940",
    "end": "766180"
  },
  {
    "text": "command I want to try out is run server and run server is a development web server it's not something you should use",
    "start": "766180",
    "end": "772390"
  },
  {
    "text": "in in a production but it does let you point your web browser at your own IP and some weird port it's usually 8000 by",
    "start": "772390",
    "end": "779800"
  },
  {
    "text": "default you can customize that if you want and see a webpage if you have a webpage so did we make a web page well",
    "start": "779800",
    "end": "786070"
  },
  {
    "text": "sort of it works congratulations on your first django powered page we haven't done anything yet except to successfully",
    "start": "786070",
    "end": "792970"
  },
  {
    "text": "install the framework so it has some helpful comments if you plan to use a database edit the database settings in",
    "start": "792970",
    "end": "799240"
  },
  {
    "text": "your settings dot py you're probably gonna need an app so run Python manage py startup and then some app name with",
    "start": "799240",
    "end": "806170"
  },
  {
    "text": "those things and see what we get so another fundamental piece of terminology web applications in Django are projects",
    "start": "806170",
    "end": "814630"
  },
  {
    "start": "809000",
    "end": "844000"
  },
  {
    "text": "and then projects have applications inside them and you actually have a",
    "start": "814630",
    "end": "820510"
  },
  {
    "text": "bunch of applications for free from Django and all the development work that you're gonna do mostly is gonna live",
    "start": "820510",
    "end": "826149"
  },
  {
    "text": "inside of applications so how could I make an application you might expect",
    "start": "826149",
    "end": "831459"
  },
  {
    "text": "from the experience making a project there's a command for that so again I can run Python manage py and command I'm",
    "start": "831459",
    "end": "837579"
  },
  {
    "text": "interested in is startup and startup takes an application name and I'm gonna call my application story so I still",
    "start": "837579",
    "end": "844870"
  },
  {
    "start": "844000",
    "end": "869000"
  },
  {
    "text": "haven't edited any code at all just generating code with these tools and I",
    "start": "844870",
    "end": "853899"
  },
  {
    "text": "get a few more files again just using the find command to show the new directory story that was created inside",
    "start": "853899",
    "end": "860050"
  },
  {
    "text": "of my project and a couple of files inside it I have a views dot py there's that an it again I'm just kind of ignore",
    "start": "860050",
    "end": "865990"
  },
  {
    "text": "that makes it a module tests and models the the start page that we got before",
    "start": "865990",
    "end": "873010"
  },
  {
    "start": "869000",
    "end": "950000"
  },
  {
    "text": "when we started up also hopefully said hey you need to go edit your settings file and you need to specify a database",
    "start": "873010",
    "end": "878440"
  },
  {
    "text": "so I said you know database backed web applications you don't have to use a database to use Django but it takes a",
    "start": "878440",
    "end": "885910"
  },
  {
    "text": "lot of the point out of it if you're not going to use a data store so SQLite is a little toy database the drivers come",
    "start": "885910",
    "end": "892360"
  },
  {
    "text": "with Python so it's a favorite favorite to use for for demos it's um it's not really a database server it's a little",
    "start": "892360",
    "end": "898930"
  },
  {
    "text": "you know database in a file you can think like Microsoft Access or FoxPro if you have experience with any of those technologies don't use it on production",
    "start": "898930",
    "end": "905529"
  },
  {
    "text": "it's it's not multi-user it's reasonably fast and we can use it to do our little",
    "start": "905529",
    "end": "910750"
  },
  {
    "text": "development work so I changed my settings file and said two things the",
    "start": "910750",
    "end": "915880"
  },
  {
    "text": "engine that I want to use is Django DB backends sqlite3 and how did I know that particular string they helpfully left a",
    "start": "915880",
    "end": "922630"
  },
  {
    "text": "comment with the the possible options I could put there and then the name and in this case the name is just going to be a",
    "start": "922630",
    "end": "928990"
  },
  {
    "text": "file that'll be in the current directory for backends I could have chose chosen a lot of other database backends again",
    "start": "928990",
    "end": "935560"
  },
  {
    "text": "there's a comment suggesting the other options but whatever your database preference if you've got one Jenga supports it so",
    "start": "935560",
    "end": "941370"
  },
  {
    "text": "MySQL PostgreSQL mssql Oracle whatever it'll hook up to it hook up to all of them with only slightly",
    "start": "941370",
    "end": "948990"
  },
  {
    "text": "varying degrees of support the other thing I needed to do is what you're going to get used to doing every time",
    "start": "948990",
    "end": "954480"
  },
  {
    "start": "950000",
    "end": "976000"
  },
  {
    "text": "you add an app I need to edit my installed apps directive so this is also",
    "start": "954480",
    "end": "959730"
  },
  {
    "text": "in my settings py and I just added the little line at the bottom that says story there's a list of the Python",
    "start": "959730",
    "end": "966149"
  },
  {
    "text": "import paths to Python modules that are not just Python modules they're also django applications and hey story is the",
    "start": "966149",
    "end": "972269"
  },
  {
    "text": "one I just made stories in there just needed to add that and I'm on to the",
    "start": "972269",
    "end": "978180"
  },
  {
    "start": "976000",
    "end": "1033000"
  },
  {
    "text": "fundamental concepts we got to know about see URLs views models templates",
    "start": "978180",
    "end": "983220"
  },
  {
    "text": "okay so URLs the first one fundamental concept number one this is just the part after the domain right you go someplace",
    "start": "983220",
    "end": "989579"
  },
  {
    "text": "you've got a domain and then you've also got like the bit in red here foo and all web frameworks are pretty much a way to",
    "start": "989579",
    "end": "995670"
  },
  {
    "text": "say well if somebody goes to the path foo what part of your code should I call in response right Django's way of",
    "start": "995670",
    "end": "1003620"
  },
  {
    "text": "handling that is to have us write regular expressions that match a path",
    "start": "1003620",
    "end": "1009860"
  },
  {
    "text": "that's coming in and then include the view that should go along with that particular regular expression so this is",
    "start": "1009860",
    "end": "1016130"
  },
  {
    "text": "the default URLs py and has a couple of comments it says you could write URLs",
    "start": "1016130",
    "end": "1021440"
  },
  {
    "text": "that look like and then it's kind of hard to read strings and R and a caret",
    "start": "1021440",
    "end": "1027890"
  },
  {
    "text": "story time and a slash it's kind of sucks actually",
    "start": "1027890",
    "end": "1033678"
  },
  {
    "start": "1033000",
    "end": "1093000"
  },
  {
    "text": "especially for beginners like again quick show of hands who feels really happy with their red X foo and whatever",
    "start": "1033679",
    "end": "1039918"
  },
  {
    "text": "language can do it nobody feels happy right so jamie zawinski code I think I",
    "start": "1039919",
    "end": "1047089"
  },
  {
    "text": "know have a I have a problem I know I use red X's now I have two problems so",
    "start": "1047089",
    "end": "1052669"
  },
  {
    "text": "it kind of stuck so the first thing you have to do is figure out regular expressions and regular expressions are a mini language for matching patterns",
    "start": "1052669",
    "end": "1058190"
  },
  {
    "text": "and you probably know a little bit about it every character more or less is significant you know why do I have to",
    "start": "1058190",
    "end": "1064790"
  },
  {
    "text": "learn this right away one reason is reg X's are fast and",
    "start": "1064790",
    "end": "1069919"
  },
  {
    "text": "they're really flexible if if like the Django he started in a PHP and Apache world",
    "start": "1069919",
    "end": "1076580"
  },
  {
    "text": "this is seems like the sensible way to do things you're used to writing reg X's the map to paths for like Madhuri write",
    "start": "1076580",
    "end": "1082820"
  },
  {
    "text": "in Apache so it just seems like the obvious way to do it it's it's not painful for you you don't know why should be painful for anybody else and",
    "start": "1082820",
    "end": "1089180"
  },
  {
    "text": "let's say for the beginner fortunately for you you can start out by copying and pasting so for us we're just gonna write",
    "start": "1089180",
    "end": "1094220"
  },
  {
    "start": "1093000",
    "end": "1219000"
  },
  {
    "text": "a single URL and see if we understand the rule so this is my url zui it was",
    "start": "1094220",
    "end": "1101000"
  },
  {
    "text": "automatically generated by the start project and i went in and just put one line of code it had some comments I",
    "start": "1101000",
    "end": "1106580"
  },
  {
    "text": "delete the comments I put in one line of code and that's the bit in the middle that starts with URL and let's let's",
    "start": "1106580",
    "end": "1112880"
  },
  {
    "text": "understand this character by character so python knowledge actually I've got a",
    "start": "1112880",
    "end": "1119889"
  },
  {
    "text": "little piece of code there what's the R for anybody know so it's not a reg X the",
    "start": "1120100",
    "end": "1129680"
  },
  {
    "text": "R thing is Python and it's telling Python that I'm going to type a string and you shouldn't interpret any of the",
    "start": "1129680",
    "end": "1137180"
  },
  {
    "text": "characters inside the string so if you make a string and python normally and you have slash in Python says you don't",
    "start": "1137180",
    "end": "1142190"
  },
  {
    "text": "want to slash and then an you want a single newline character right does a little bit of a character magic for you there's a bunch of things like that the",
    "start": "1142190",
    "end": "1148040"
  },
  {
    "text": "raw string python isn't gonna do any string interpolation on at all and since red X's are full of weird and wacky",
    "start": "1148040",
    "end": "1154160"
  },
  {
    "text": "punctuation it's common to write them with raw strings to make sure that the string you get is a string you typed okay so that's the R and then anybody",
    "start": "1154160",
    "end": "1161240"
  },
  {
    "text": "who does know reg X is what's carrot and then dollar sign mean",
    "start": "1161240",
    "end": "1167049"
  },
  {
    "text": "right so carat is the special syntactical start here in red X's",
    "start": "1170230",
    "end": "1176320"
  },
  {
    "text": "matching a string and dollar is the special end here and I've got nothing between them so I've written a beautiful",
    "start": "1176320",
    "end": "1181630"
  },
  {
    "text": "magical red X it's two characters that basically means I didn't get a path I got nothing",
    "start": "1181630",
    "end": "1188830"
  },
  {
    "text": "the next thing in my url statement is a import path to a django view and we",
    "start": "1188830",
    "end": "1196420"
  },
  {
    "text": "don't know what a view is yet so we'll talk about that in a second for the moment I'll just say it's a Python callable and then the last bit is a name",
    "start": "1196420",
    "end": "1202120"
  },
  {
    "text": "django lets us name our urls naming our urls is really cool because later on instead of hard-coding whatever the",
    "start": "1202120",
    "end": "1208540"
  },
  {
    "text": "particular path might be someplace you can just say hey figure out the path that corresponds to the URL called home",
    "start": "1208540",
    "end": "1215710"
  },
  {
    "text": "it's good practice to get into name all your urls and as usual hey you could go",
    "start": "1215710",
    "end": "1221800"
  },
  {
    "start": "1219000",
    "end": "1245000"
  },
  {
    "text": "read the Django Docs they're excellent they're comprehensive there's links in the slides I'll post a slide so you can go to the right spot",
    "start": "1221800",
    "end": "1228420"
  },
  {
    "text": "okay URLs that everybody get that we just we said hey if you don't have a path go someplace to something not too",
    "start": "1228420",
    "end": "1235600"
  },
  {
    "text": "much yet right okay so views fundamental concept number two that we need to understand a view is Python code that",
    "start": "1235600",
    "end": "1242860"
  },
  {
    "text": "takes a request object and returns a response object that sounds a lot like",
    "start": "1242860",
    "end": "1248110"
  },
  {
    "start": "1245000",
    "end": "1255000"
  },
  {
    "text": "what Django does in general you can write in views a bunch of different ways but let's write a really simple one a",
    "start": "1248110",
    "end": "1256450"
  },
  {
    "start": "1255000",
    "end": "1292000"
  },
  {
    "text": "Python callable well one kind of Python call bow would be a function it takes a request object so that's just a",
    "start": "1256450",
    "end": "1262750"
  },
  {
    "text": "parameter to my function and has to return a response an HTTP response I have no idea how to make an HTTP",
    "start": "1262750",
    "end": "1268660"
  },
  {
    "text": "response unfortunately Django has an HTTP library that will let me give it a string and it'll make an HTTP response which is a",
    "start": "1268660",
    "end": "1275020"
  },
  {
    "text": "bigger thing that's got lots of lots of headers and pieces of data about the response so this is a django view pretty",
    "start": "1275020",
    "end": "1283810"
  },
  {
    "text": "simple right just the function takes a request returns a response and the response says hello world sweet we build",
    "start": "1283810",
    "end": "1292840"
  },
  {
    "start": "1292000",
    "end": "1309000"
  },
  {
    "text": "a web app right you go to no particular place you know kind of just the domain itself and you see hello world it works",
    "start": "1292840",
    "end": "1301110"
  },
  {
    "text": "we don't have any HTML yet and that's part of what we want to do with Web Apps so concept number three that you got to",
    "start": "1301110",
    "end": "1308350"
  },
  {
    "text": "know is templates and especially when you get started you might spend a lot of your time knowing and understanding",
    "start": "1308350",
    "end": "1314230"
  },
  {
    "start": "1309000",
    "end": "1316000"
  },
  {
    "text": "templates we want to make a web application we better build response that's got some HTML in it and so",
    "start": "1314230",
    "end": "1322090"
  },
  {
    "text": "there's a common use case here your application probably has a bunch of HTML that doesn't change right you've got like a header and a footer and a menu",
    "start": "1322090",
    "end": "1328810"
  },
  {
    "text": "and then you've got some HTML that does change a lot you know kind of the middle part of your page maybe it's Pinterest",
    "start": "1328810",
    "end": "1334840"
  },
  {
    "text": "in your showing pictures maybe it's reddit and you're showing stories and comments most web frameworks include",
    "start": "1334840",
    "end": "1341200"
  },
  {
    "text": "template engines and they try to let us manage all this HTML in kind of some common ways basically we can put HTML",
    "start": "1341200",
    "end": "1347710"
  },
  {
    "text": "and then some placeholders and the placeholders might be code and we're probably not lucky enough to be able to",
    "start": "1347710",
    "end": "1353140"
  },
  {
    "text": "code in whatever language it is that writing the framework in in the first place so yeah we get to learn a whole another tiny little programming language",
    "start": "1353140",
    "end": "1360120"
  },
  {
    "text": "but basically just a way for us to deal with big chunks of HTML in a bunch of separate files and hopefully produce an",
    "start": "1360120",
    "end": "1365830"
  },
  {
    "text": "HTML interface so let's look at django support for templates I'm gonna make a",
    "start": "1365830",
    "end": "1371890"
  },
  {
    "start": "1367000",
    "end": "1485000"
  },
  {
    "text": "directory in my application I just happen to know that if you make a directory called templates in your",
    "start": "1371890",
    "end": "1378820"
  },
  {
    "text": "application and you put templates there Django will magically be able to find it I could be more explicit I could go edit",
    "start": "1378820",
    "end": "1384310"
  },
  {
    "text": "my settings and tell it hey my templates are stored over here but for the moment I'm taking advantage of this built in behavior so I made a directory called",
    "start": "1384310",
    "end": "1390820"
  },
  {
    "text": "templates and a subdirectory called story if you know about Django you know",
    "start": "1390820",
    "end": "1395830"
  },
  {
    "text": "why I did this if you don't maybe we'll get to in the QA session explaining why I repeated myself but I'm gonna make a",
    "start": "1395830",
    "end": "1402220"
  },
  {
    "text": "template and call it based HTML so let's make a really minimal based on HTML",
    "start": "1402220",
    "end": "1408040"
  },
  {
    "text": "template it's almost all just plain old HTML and it's like the simplest possible I guess this is an html5 page because it",
    "start": "1408040",
    "end": "1415480"
  },
  {
    "text": "doesn't have a doctype simplest possible page I could make it should all look really familiar if you've ever looked at HTML before except for the middle bit",
    "start": "1415480",
    "end": "1422890"
  },
  {
    "text": "that has brackets and percents and says block content and in block",
    "start": "1422890",
    "end": "1429750"
  },
  {
    "text": "so Gengo comes with a templating language the templating language is what",
    "start": "1432020",
    "end": "1437400"
  },
  {
    "text": "makes our temple it's not just static content but dynamic something's going to happen there in the block it provides a",
    "start": "1437400",
    "end": "1443940"
  },
  {
    "text": "few fundamental concepts tags filters and pretty much just output the ability to say print this variable block is a",
    "start": "1443940",
    "end": "1452010"
  },
  {
    "text": "Django template tag so what does block do for me I got to do one more thing",
    "start": "1452010",
    "end": "1458910"
  },
  {
    "text": "I want to make a second template same directory it's in my story templates",
    "start": "1458910",
    "end": "1465300"
  },
  {
    "text": "story directory and it's called homes out HTML and this is what home dot HTML looks like the first line says extends",
    "start": "1465300",
    "end": "1472080"
  },
  {
    "text": "story base HTML it's got a block again and then the thing in the middle where",
    "start": "1472080",
    "end": "1477810"
  },
  {
    "text": "there's two braces is basically the print statement so I'm just gonna print out some variable hello I don't know",
    "start": "1477810",
    "end": "1484020"
  },
  {
    "text": "where that comes from yet it's kind of cool is the extends block is how Django",
    "start": "1484020",
    "end": "1489300"
  },
  {
    "start": "1485000",
    "end": "1541000"
  },
  {
    "text": "does template inheritance which is the idea that every little template I make doesn't need to have the whole site",
    "start": "1489300",
    "end": "1495180"
  },
  {
    "text": "design in it I'll keep that all in the base template the base template won't change very much and this is the",
    "start": "1495180",
    "end": "1500400"
  },
  {
    "text": "template specific to a specific page in my application it extends the base template and the way Django's extension",
    "start": "1500400",
    "end": "1506460"
  },
  {
    "text": "works is you have name blocks if the child template has the same name block as exists and the parent template the",
    "start": "1506460",
    "end": "1512370"
  },
  {
    "text": "stuff on the child template shows up in the parent template so I have a block content here I had a block content in my base",
    "start": "1512370",
    "end": "1518660"
  },
  {
    "text": "hopefully whatever hollow is is gonna end up in my base everybody still with",
    "start": "1518660",
    "end": "1523740"
  },
  {
    "text": "me am i going at a good speed of them too complicated yet okay and Hello is",
    "start": "1523740",
    "end": "1530310"
  },
  {
    "text": "going to output a variable that needs to be passed by the view so gee that means I get to go back and fix my view in this",
    "start": "1530310",
    "end": "1537300"
  },
  {
    "text": "case I'm gonna import from Jenga dot shortcuts a function called render to response so",
    "start": "1537300",
    "end": "1542490"
  },
  {
    "text": "this is one of those Django things the tutorial will walk you through ways to get lots of things accomplished and",
    "start": "1542490",
    "end": "1548390"
  },
  {
    "text": "Jenko nots will frequently get frustrated with the long way to get things done and write a cool quick and",
    "start": "1548390",
    "end": "1554040"
  },
  {
    "text": "short way to get stuff done and stuff it in the shortcuts module so you're gonna want to know about everything that's in the shortcuts module eventually render",
    "start": "1554040",
    "end": "1561270"
  },
  {
    "text": "to response basically says well I know that you want to make an HTTP response and I know that",
    "start": "1561270",
    "end": "1566370"
  },
  {
    "text": "you want to do it with a template library so if you give me a dictionary of variable names and values and a",
    "start": "1566370",
    "end": "1571889"
  },
  {
    "text": "template I'd be in charge of putting those two things together making an HTTP response out of the resulting string and returning that back out of the view so",
    "start": "1571889",
    "end": "1579600"
  },
  {
    "text": "here I am with my render to response I'm telling it hello is a variable it's just a string its contents our hello world if",
    "start": "1579600",
    "end": "1586769"
  },
  {
    "start": "1585000",
    "end": "1605000"
  },
  {
    "text": "you've done a little bit of Python you'll notice I'm just making a little dictionary in line here and that's gonna render my home template and if",
    "start": "1586769",
    "end": "1593789"
  },
  {
    "text": "everything worked out well I'm back to my web app so welcome to story time hello world yeah we got real HTML now",
    "start": "1593789",
    "end": "1601919"
  },
  {
    "text": "it's so it's actually a web app so",
    "start": "1601919",
    "end": "1608070"
  },
  {
    "start": "1605000",
    "end": "1646000"
  },
  {
    "text": "you're gonna have to learn a bunch about templates tags and filters and don't worry because they're really easy it's",
    "start": "1608070",
    "end": "1614039"
  },
  {
    "text": "just that there's a bunch of them I've got links to the docs here to the templates page and also the reference to",
    "start": "1614039",
    "end": "1619590"
  },
  {
    "text": "the built-in tags and filters there's tags and filters to do everything from logical operations like",
    "start": "1619590",
    "end": "1625049"
  },
  {
    "text": "looping and if inside your HTML to doing string formatting things like saying Facebook style dates you know you give",
    "start": "1625049",
    "end": "1631529"
  },
  {
    "text": "it a date time it says oh about three days ago you know lots of stuff for doing content manipulation none of it is",
    "start": "1631529",
    "end": "1637110"
  },
  {
    "text": "particularly complicated or exotic but it turns out writing django web apps a",
    "start": "1637110",
    "end": "1642120"
  },
  {
    "text": "lot of the programming that you're gonna do is in the template language in the templates so one more concept here",
    "start": "1642120",
    "end": "1649789"
  },
  {
    "start": "1646000",
    "end": "1664000"
  },
  {
    "text": "fundamental concept number four is models we have a web app it says hello",
    "start": "1649789",
    "end": "1656340"
  },
  {
    "text": "inside of a bunch of HTML generated by Python code but there isn't any like dynamic data right we're not talking to",
    "start": "1656340",
    "end": "1662610"
  },
  {
    "text": "the database yet so that's what my models are for this is supposed to be a",
    "start": "1662610",
    "end": "1667620"
  },
  {
    "text": "database backed web app and we're gonna need to create and read an update and delete all that good cred stuff data",
    "start": "1667620",
    "end": "1674130"
  },
  {
    "text": "from a relational database and again you can kind of say so I don't know what relational database I should use I don't",
    "start": "1674130",
    "end": "1680429"
  },
  {
    "text": "know SQL that well I don't even know what SQL means that's okay hopefully",
    "start": "1680429",
    "end": "1686010"
  },
  {
    "start": "1682000",
    "end": "1706000"
  },
  {
    "text": "we're gonna be able to work with just Python code and until we really have to Django is going to obscure some of the",
    "start": "1686010",
    "end": "1692460"
  },
  {
    "text": "complicated details from us but don't worry when you really need to get down to the rescue L you can totally that with Jango basically all you need",
    "start": "1692460",
    "end": "1699879"
  },
  {
    "text": "to know is that models are database tables represented in Python code as Python classes so models are your handle",
    "start": "1699879",
    "end": "1707080"
  },
  {
    "start": "1706000",
    "end": "1818000"
  },
  {
    "text": "to create the table in your database automatically to generate the SQL that",
    "start": "1707080",
    "end": "1713379"
  },
  {
    "text": "you need to update the table in your database so query it to get data out put",
    "start": "1713379",
    "end": "1718869"
  },
  {
    "text": "new data in update or delete stuff that's already there and you might sometimes hear the term thrown out warm",
    "start": "1718869",
    "end": "1724629"
  },
  {
    "text": "it's an object relational mapper that's basically the category that Django's a model implementation falls into and",
    "start": "1724629",
    "end": "1731830"
  },
  {
    "text": "pretty much you just need to know a model that we'll show you in a minute is a database table an instance of a model",
    "start": "1731830",
    "end": "1739299"
  },
  {
    "text": "and make little objects from classes an instance of a model basically corresponds to a database row so here's",
    "start": "1739299",
    "end": "1745600"
  },
  {
    "text": "a model it's really simple this is in my models dot py the models that py was generated automatically for me it didn't",
    "start": "1745600",
    "end": "1753609"
  },
  {
    "text": "have any code in it just a helpful comment put your models here so I actually I think it had the import",
    "start": "1753609",
    "end": "1758739"
  },
  {
    "text": "statement in it but I made a class called line line inherits from models model and line has one class level",
    "start": "1758739",
    "end": "1766809"
  },
  {
    "text": "attribute called text which is an instance of a models dot char field so",
    "start": "1766809",
    "end": "1772690"
  },
  {
    "text": "this is how a lot of stuff in Django works actually you write this declarative class that has class level",
    "start": "1772690",
    "end": "1777940"
  },
  {
    "text": "attributes and there's some kind of relationship going on here my class is a model and it's got individual attributes",
    "start": "1777940",
    "end": "1783960"
  },
  {
    "text": "that our model subclasses somehow or other they're related basically all the",
    "start": "1783960",
    "end": "1790119"
  },
  {
    "text": "all the fields all the field types correspond to database columns so I'm making a text field that can store up to",
    "start": "1790119",
    "end": "1795669"
  },
  {
    "text": "255 characters here how could I use it",
    "start": "1795669",
    "end": "1801179"
  },
  {
    "text": "it's worth noting that there's database stuff going on behind the scenes I didn't specify like a primary key on my",
    "start": "1801179",
    "end": "1807879"
  },
  {
    "text": "table and if you know relational databases you know I probably should have it's okay you don't have to do that Django will notice that I didn't and",
    "start": "1807879",
    "end": "1813999"
  },
  {
    "text": "automatically give me an an ID auto number primary key sort of field behind",
    "start": "1813999",
    "end": "1819309"
  },
  {
    "start": "1818000",
    "end": "1860000"
  },
  {
    "text": "the scenes how could I create the tables you probably used to it by this time",
    "start": "1819309",
    "end": "1824919"
  },
  {
    "text": "there's a management command for that so I run Python managed uh py sync dB it runs through creating tables so it's",
    "start": "1824919",
    "end": "1831520"
  },
  {
    "text": "generating the appropriate SQL from my back-end how do you create tables on SQLite I don't know off the top of my",
    "start": "1831520",
    "end": "1837670"
  },
  {
    "text": "head actually I know like MySQL and Postgres better I don't know if I could type out an SQL create table statement",
    "start": "1837670",
    "end": "1842860"
  },
  {
    "text": "without error in SQLite but that's okay cuz Django is gonna do that for me and",
    "start": "1842860",
    "end": "1848020"
  },
  {
    "text": "you might notice the very bottom one down there at the bottom creating a bunch of tables stuff that comes built",
    "start": "1848020",
    "end": "1853030"
  },
  {
    "text": "in with Django but the bottom one says creating tables story underscore line that's the table that corresponds to the",
    "start": "1853030",
    "end": "1859000"
  },
  {
    "text": "model that I just made so now that I've got my database created I could try just",
    "start": "1859000",
    "end": "1865390"
  },
  {
    "start": "1860000",
    "end": "1974000"
  },
  {
    "text": "using the models API like in the interactive Python shell I'll hold off",
    "start": "1865390",
    "end": "1872530"
  },
  {
    "text": "the question about the interactive Python shell for a moment you probably used it right you can just type Python normally and you get a little prompt",
    "start": "1872530",
    "end": "1878290"
  },
  {
    "text": "it's got three errors you can type Python code and hit enter execute so right away you really ought to be using ipython we'll talk about that I can't",
    "start": "1878290",
    "end": "1885160"
  },
  {
    "text": "just say Python in the context of Django if I want to talk to my models they need to know like which project they're in so",
    "start": "1885160",
    "end": "1890800"
  },
  {
    "text": "they know which database to talk to so there's a management command to launch the Python prompt Python manage py shell",
    "start": "1890800",
    "end": "1897640"
  },
  {
    "text": "starts up a Python shell with the Django environment kind of configured for me and then I can say from story top models",
    "start": "1897640",
    "end": "1903100"
  },
  {
    "text": "import line that's the class I made just kind of looks like a normal Python and things like line text equals that looks",
    "start": "1903100",
    "end": "1910930"
  },
  {
    "text": "like I'm instantiating a class right you call a class in Python to make an instance of it I'm getting back line",
    "start": "1910930",
    "end": "1917620"
  },
  {
    "text": "which is a Python object when I called line dot save that Python object knows what database table its attributes",
    "start": "1917620",
    "end": "1924790"
  },
  {
    "text": "should be stored in and how to get them there it's generating the SQL update statement for me so that's all the",
    "start": "1924790",
    "end": "1929920"
  },
  {
    "text": "Python code it takes to create a new row of data in my database table and I could also like run a query I could say lined",
    "start": "1929920",
    "end": "1936160"
  },
  {
    "text": "out objects dot all and that's behind the scenes creating a select star from whatever my table name is getting all",
    "start": "1936160",
    "end": "1941830"
  },
  {
    "text": "the data back and I get back a thing that kind of looks like a list it's a query set it's a really cool object if you get a little past",
    "start": "1941830",
    "end": "1947410"
  },
  {
    "text": "beginning Django you'll spend a lot of time playing with query sets so let's update our view again and see if we've",
    "start": "1947410",
    "end": "1954100"
  },
  {
    "text": "got through a database backed web application yet the only additional",
    "start": "1954100",
    "end": "1959980"
  },
  {
    "text": "thing I need to do is from models import line so get the model that I made and my view now is",
    "start": "1959980",
    "end": "1967390"
  },
  {
    "text": "gonna return a dictionary again it's got a key called lines and the value is",
    "start": "1967390",
    "end": "1973309"
  },
  {
    "text": "lined out objects that also that's gonna be all the lines I've got in the database headed out to the template which also had to get updated I think I",
    "start": "1973309",
    "end": "1981679"
  },
  {
    "start": "1974000",
    "end": "2050000"
  },
  {
    "text": "mentioned you're gonna have to do some programming in the template I still have the block content thing I've got a tag",
    "start": "1981679",
    "end": "1987769"
  },
  {
    "text": "for an unordered list I think I left off the closing unordered list tag that's really horrible I've got some Django",
    "start": "1987769",
    "end": "1994190"
  },
  {
    "text": "template programming in the middle like four line in lines it's pretty much a Python for loop stuffed in my HTML yeah",
    "start": "1994190",
    "end": "2000340"
  },
  {
    "text": "you got to go look at the docs for the for the template tags for is a built-in template tag and here's another template",
    "start": "2000340",
    "end": "2005409"
  },
  {
    "text": "tag it's called cycle anybody want to guess what cycle does chute",
    "start": "2005409",
    "end": "2016620"
  },
  {
    "text": "indefinitely it's gonna give me one of the other back does anybody know about the Python built-in that does that so",
    "start": "2017830",
    "end": "2024350"
  },
  {
    "text": "you should definitely check out the itertools module in Python there's lots of cool things around iteration and there's itertools cycle that does the",
    "start": "2024350",
    "end": "2030920"
  },
  {
    "text": "same thing you give it a list and it gives you items from the list and when it reaches the end it goes back to the beginning so it's an infinitely long",
    "start": "2030920",
    "end": "2036470"
  },
  {
    "text": "list that you can consume and like repeat some pieces of data okay and then I think we said before a couple of",
    "start": "2036470",
    "end": "2042530"
  },
  {
    "text": "braces that's more or less the way you say print this thing and this case this thing is in a string it's a instance of",
    "start": "2042530",
    "end": "2049460"
  },
  {
    "text": "my line class and instances in my line class have a text attribute so if everything worked out well yeah I have a",
    "start": "2049460",
    "end": "2056540"
  },
  {
    "start": "2050000",
    "end": "2081000"
  },
  {
    "text": "an actual real webapplications pulling some data from the database showing it on the page in some HTML okay",
    "start": "2056540",
    "end": "2063679"
  },
  {
    "text": "URLs views templates and models see the",
    "start": "2063679",
    "end": "2069260"
  },
  {
    "text": "docs as usual how to define your models there's a lot of complicated issues there that we're totally gonna punt on",
    "start": "2069260",
    "end": "2075379"
  },
  {
    "text": "tonight and how to make queries you can make cool and complicated queries with a Django arm and again we're totally punt",
    "start": "2075380",
    "end": "2081560"
  },
  {
    "start": "2081000",
    "end": "2108000"
  },
  {
    "text": "on that unless you have questions in the Q&A period let me show you one more thing in the little app that I'm making there's an admin app that comes with",
    "start": "2081560",
    "end": "2088128"
  },
  {
    "text": "Django it's sort of a selling point for Django just for free more or less I can uncomment a couple lines of my URLs a",
    "start": "2088129",
    "end": "2094190"
  },
  {
    "text": "couple lines in the settings and add an admin dot py file to my application that looks like this pretty much just one",
    "start": "2094190",
    "end": "2100490"
  },
  {
    "text": "line of configuration I'm telling the admin app hey I've got this class line you really ought to I don't know do",
    "start": "2100490",
    "end": "2106670"
  },
  {
    "text": "something with it and for free you get a a crud interface to your data you can go",
    "start": "2106670",
    "end": "2113090"
  },
  {
    "start": "2108000",
    "end": "2116000"
  },
  {
    "text": "edit I can go edit lines add new lines and if I add new lines then the lines",
    "start": "2113090",
    "end": "2118310"
  },
  {
    "start": "2116000",
    "end": "2134000"
  },
  {
    "text": "would show up on the page and I started doing this because my third grade daughter keeps on bringing me stories that she writes for their classmates",
    "start": "2118310",
    "end": "2123800"
  },
  {
    "text": "everybody writes one line they passed the paper down right and you know there once was a girl who had a blue hat suddenly a dragon jumped out you can ice",
    "start": "2123800",
    "end": "2131180"
  },
  {
    "text": "tell like when she's sitting next to a boy by her stories okay so you wrote your first web app you're on your way to",
    "start": "2131180",
    "end": "2137180"
  },
  {
    "start": "2134000",
    "end": "2163000"
  },
  {
    "text": "Facebook or Pinterest right I know so you need ever so much more than just",
    "start": "2137180",
    "end": "2143240"
  },
  {
    "text": "that just like the fundamental concepts and Django actually comes with a ton more so there's a ton of shortcuts to",
    "start": "2143240",
    "end": "2149330"
  },
  {
    "text": "use in views there's forms we haven't talked about that how we can accept data and validate",
    "start": "2149330",
    "end": "2155140"
  },
  {
    "text": "it from the user those model forms to automatically make forms based on our models there's managers and complicated queries",
    "start": "2155140",
    "end": "2161020"
  },
  {
    "text": "there's a caching framework built in there's logging there's like a bunch of stuff that I'm not even gonna say everything just a ton of stuff that you",
    "start": "2161020",
    "end": "2167620"
  },
  {
    "start": "2163000",
    "end": "2182000"
  },
  {
    "text": "have to know about in Django management commands geo Django there's a whole",
    "start": "2167620",
    "end": "2174790"
  },
  {
    "text": "section for doing GIS stuff that I actually don't know enough about and it's weird but all that and it's still",
    "start": "2174790",
    "end": "2181480"
  },
  {
    "text": "not enough so Django was this huge framework there's a ton of batteries included if you went and downloaded the docs as a",
    "start": "2181480",
    "end": "2187090"
  },
  {
    "start": "2182000",
    "end": "2194000"
  },
  {
    "text": "PDF it's like up to 1,200 pages now fortunate like 400 odd is geo Django which you can mostly ignore but there's",
    "start": "2187090",
    "end": "2194620"
  },
  {
    "start": "2194000",
    "end": "2236000"
  },
  {
    "text": "a lot you have to know about and it turns out it's not enough for writing modern web applications so kind of a fundamental thing you do after you take",
    "start": "2194620",
    "end": "2200530"
  },
  {
    "text": "the tutorial as you say I need some more pieces what pieces do I need and it turns out other people have written the",
    "start": "2200530",
    "end": "2205960"
  },
  {
    "text": "pieces that you need third-party applications are a fundamental piece of Django the framework is made to make it",
    "start": "2205960",
    "end": "2211450"
  },
  {
    "text": "easy to compose your project out of lots of apps so you're gonna use lots of third-party apps everybody does it",
    "start": "2211450",
    "end": "2217840"
  },
  {
    "text": "they'll supply missing pieces or maybe even just have like pre-built functionality that's exactly the thing that you need for your project I'm just",
    "start": "2217840",
    "end": "2223780"
  },
  {
    "text": "gonna run you through a quick list without too much explanation of my like top 10 apps and I'm not kidding when I",
    "start": "2223780",
    "end": "2230170"
  },
  {
    "text": "say I could totally do a top 20 Django projects frequently you start and then you install a bunch of favorite",
    "start": "2230170",
    "end": "2235510"
  },
  {
    "text": "apps cuz you know you're gonna need them and I should just mention tools if you don't know like how to use virtual ends",
    "start": "2235510",
    "end": "2240910"
  },
  {
    "start": "2236000",
    "end": "2261000"
  },
  {
    "text": "and pip to install stuff this is kind of fundamental Python knowledge so you should learn about that virtual embassy",
    "start": "2240910",
    "end": "2246160"
  },
  {
    "text": "in to Python 3 3 but in earlier versions of Python you're stuck kind of figuring it out on your own and when you if we",
    "start": "2246160",
    "end": "2253360"
  },
  {
    "text": "get to talk about deployment you should be using fabric real easy and also for",
    "start": "2253360",
    "end": "2258670"
  },
  {
    "text": "your interactive console just use ipython already that's a different talk but you should you should check it out",
    "start": "2258670",
    "end": "2264930"
  },
  {
    "start": "2261000",
    "end": "2302000"
  },
  {
    "text": "so my top 10 apps so this is the stuff you probably will need bits and pieces of this for your project database",
    "start": "2264930",
    "end": "2271630"
  },
  {
    "text": "migrations and this is actually coming soon to django contribute godwyn just had a Kickstarter fundraiser sitting in",
    "start": "2271630",
    "end": "2277810"
  },
  {
    "text": "like five thousand dollars to work on it for a couple of months and move it into the Django project proper and raise",
    "start": "2277810",
    "end": "2282850"
  },
  {
    "text": "$20,000 what database do for you is you can go change the Python code for your models and it'll",
    "start": "2282850",
    "end": "2289210"
  },
  {
    "text": "automatically update your database to match your Python code and you don't actually need this feature if you",
    "start": "2289210",
    "end": "2294940"
  },
  {
    "text": "promise you'll never ever change your models in your project",
    "start": "2294940",
    "end": "2299820"
  },
  {
    "start": "2302000",
    "end": "2342000"
  },
  {
    "text": "djenka debug toolbar got to have this it pretty much answers the question like okay what is going on in this page what",
    "start": "2302080",
    "end": "2307270"
  },
  {
    "text": "view what templates what SQL query is what variables django doesn't help me very much if i start up somebody else's",
    "start": "2307270",
    "end": "2312940"
  },
  {
    "text": "complicated project and see the front page i just have no idea how I got there so the debug tool board gives me a",
    "start": "2312940",
    "end": "2319150"
  },
  {
    "text": "little HTML interface over on the side that tells me actually all those pieces of information how much time it took to",
    "start": "2319150",
    "end": "2324400"
  },
  {
    "text": "build the page how many SQL queries got fired off what templates what variables the templates could see if you haven't",
    "start": "2324400",
    "end": "2330220"
  },
  {
    "text": "used a debug toolbar kick yourself once and then go install it it's totally indispensable I'm lost and confused",
    "start": "2330220",
    "end": "2335560"
  },
  {
    "text": "without it Jenko extras is a favor favorite developer goodies app that I",
    "start": "2335560",
    "end": "2340630"
  },
  {
    "text": "frequently install it's got management commands that make management commands that's not a joke it's useful you can",
    "start": "2340630",
    "end": "2346660"
  },
  {
    "start": "2342000",
    "end": "2353000"
  },
  {
    "text": "graph all your models use show Plus or run server plus to give you cooler shells and a cooler development server",
    "start": "2346660",
    "end": "2355230"
  },
  {
    "text": "crispy forms and floppy forms basically gives you html5 form components like",
    "start": "2355230",
    "end": "2361240"
  },
  {
    "start": "2360000",
    "end": "2369000"
  },
  {
    "text": "client-side validation for free bootstrap compatible output it's basically like beautiful gorgeous forms with no effort on your part",
    "start": "2361240",
    "end": "2367000"
  },
  {
    "text": "and yes I cheated that's two apps in one bullet point but you need both of them haystack is a favorite of mine it's an",
    "start": "2367000",
    "end": "2373420"
  },
  {
    "start": "2369000",
    "end": "2394000"
  },
  {
    "text": "API to search engines and we're talking search engines that you install on your server that serves your data and lets",
    "start": "2373420",
    "end": "2380770"
  },
  {
    "text": "you do things like offer a search box for your data or if you liked this maybe you'd like this other stuff or you",
    "start": "2380770",
    "end": "2387250"
  },
  {
    "text": "searched for so here's the page with the thing you search for highlighted that's really cool functionality haystack makes it easy to do that kind of thing",
    "start": "2387250",
    "end": "2393550"
  },
  {
    "text": "tasty pie makes it easy to make a restful api for Django models a little bit of configuration and you get a big",
    "start": "2393550",
    "end": "2399070"
  },
  {
    "start": "2394000",
    "end": "2422000"
  },
  {
    "text": "tree of JSON data some pre-built views that will let you even edit that data automatically if you like and if you're",
    "start": "2399070",
    "end": "2406030"
  },
  {
    "text": "used to writing JavaScript in the client you're gonna totally need tasty pie or maybe you're gonna write an Android app",
    "start": "2406030",
    "end": "2411190"
  },
  {
    "text": "or an iPhone app for your website it's gonna need to get data somehow or you just want to give other people an API for your site let them write a cron job",
    "start": "2411190",
    "end": "2418809"
  },
  {
    "text": "that fetches data tasty pie makes that sort of thing really trivial I did",
    "start": "2418809",
    "end": "2424179"
  },
  {
    "text": "connect to the server but or to the wireless well if you go look at my talk",
    "start": "2424179",
    "end": "2429549"
  },
  {
    "text": "when I post the slides this is linking to YouTube I've got a video for celery which is huge I can't explain it you'll",
    "start": "2429549",
    "end": "2436630"
  },
  {
    "text": "know when you want it and there's a five minute video that I just totally couldn't cram in here to go take a look",
    "start": "2436630",
    "end": "2441999"
  },
  {
    "start": "2440000",
    "end": "2458000"
  },
  {
    "text": "at celery some easier applications like stuff that you'll want just right away easy thumbnails you got to deal with",
    "start": "2441999",
    "end": "2447969"
  },
  {
    "text": "images easy thumbnails lets you resize stuff in template tags so you can say hey they uploaded this gigantic image",
    "start": "2447969",
    "end": "2453579"
  },
  {
    "text": "resize it to 200 pixels by 200 pixels and keep the resized version around January version give yourself an undo",
    "start": "2453579",
    "end": "2460989"
  },
  {
    "start": "2458000",
    "end": "2474000"
  },
  {
    "text": "unlimited undo on your models people make an edit you don't like it you can go back to the previous version everybody uses revision control software",
    "start": "2460989",
    "end": "2468130"
  },
  {
    "text": "for your code right that's really useful now you can have that for your data too in your Django project and you might",
    "start": "2468130",
    "end": "2473619"
  },
  {
    "text": "check out Django Grappelli which is my favorite like prettier admin skin and it's not just pretty it lets you make a custom dashboard and arrange things the",
    "start": "2473619",
    "end": "2480009"
  },
  {
    "start": "2474000",
    "end": "2493000"
  },
  {
    "text": "way you like it and gives you things like you can drag and drop the order of records in the admin and it will update",
    "start": "2480009",
    "end": "2486579"
  },
  {
    "text": "the the database or autocomplete lookups you start typing and it figured out what it is that you're looking for lots of",
    "start": "2486579",
    "end": "2492609"
  },
  {
    "text": "cool handy stuff for the admin and so I'm flying past some apps that I use just to kind of give you the idea django",
    "start": "2492609",
    "end": "2500499"
  },
  {
    "start": "2493000",
    "end": "2522000"
  },
  {
    "text": "has tons of high quality apps and some of them are totally just to provide you with pre-built functionality you need to",
    "start": "2500499",
    "end": "2505659"
  },
  {
    "text": "register users great there's an app for that make appointments create menus all on and on and on there's an app for",
    "start": "2505659",
    "end": "2513819"
  },
  {
    "text": "everything and that's kind of one of the fundamental like why Django so the Zen",
    "start": "2513819",
    "end": "2519039"
  },
  {
    "text": "of Django is you have an idea that's not it's not your fundamental idea it's not",
    "start": "2519039",
    "end": "2524140"
  },
  {
    "start": "2522000",
    "end": "2545000"
  },
  {
    "text": "your whole application but it's a little piece of it great make an app for that and by the way make an app and share it",
    "start": "2524140",
    "end": "2529209"
  },
  {
    "text": "with me make it redistributable I want to use your app but if you do that you",
    "start": "2529209",
    "end": "2535029"
  },
  {
    "text": "should make it you should make it pythonic and you should make it whatever the heck you're supposed to use to say",
    "start": "2535029",
    "end": "2540369"
  },
  {
    "text": "it looks like Django I don't know what the I don't know what the right word is exactly and that's sometimes like a tiny",
    "start": "2540369",
    "end": "2548319"
  },
  {
    "start": "2545000",
    "end": "2607000"
  },
  {
    "text": "bit complicated so Django isn't mad but if you're not an experienced Python",
    "start": "2548319",
    "end": "2554980"
  },
  {
    "text": "dev it can look a little magical it does use some advanced Python features to try and give you like a nice clean easy to",
    "start": "2554980",
    "end": "2560770"
  },
  {
    "text": "use API I want to show you one but I'm not gonna explain and show you another one and walk through and see what your",
    "start": "2560770",
    "end": "2566890"
  },
  {
    "text": "level of interest is in understanding an advanced language feature that might give you that might give you great power",
    "start": "2566890",
    "end": "2572920"
  },
  {
    "text": "so the first one is declarative classes if you've done Django stuff you kind of",
    "start": "2572920",
    "end": "2578470"
  },
  {
    "text": "recognize this pattern models it's a class it's got attributes that are instances",
    "start": "2578470",
    "end": "2584140"
  },
  {
    "text": "of another class forms it's a class it's got attributes that are instances of another the class model forms same deal",
    "start": "2584140",
    "end": "2591580"
  },
  {
    "text": "third-party apps like tasty pie same kind of looking API you make a class and I can just keep on going like haystack",
    "start": "2591580",
    "end": "2597760"
  },
  {
    "text": "indexes are built that way Django sitemaps the RSS framework everything kind of looks like that and it's really weird because you're",
    "start": "2597760",
    "end": "2604450"
  },
  {
    "text": "building declarative classes whose class attributes are instances of a related",
    "start": "2604450",
    "end": "2610060"
  },
  {
    "start": "2607000",
    "end": "2637000"
  },
  {
    "text": "type so you have models and their model fields forms with form fields but the",
    "start": "2610060",
    "end": "2615670"
  },
  {
    "text": "class that you get back the object you get back by instantiating the class doesn't actually look like the class",
    "start": "2615670",
    "end": "2621700"
  },
  {
    "text": "that you defined at all if you've done enough Python to know the difference between object level variables and class",
    "start": "2621700",
    "end": "2627370"
  },
  {
    "text": "level variables yeah those those bits of code should weird you out a little bit made lots of",
    "start": "2627370",
    "end": "2633580"
  },
  {
    "text": "class level variables instead of object level variables what's going on Python has this feature called meta classes you",
    "start": "2633580",
    "end": "2640090"
  },
  {
    "start": "2637000",
    "end": "2674000"
  },
  {
    "text": "can just totally change what it means to make an instance of a class when you instantiate a class instead of giving",
    "start": "2640090",
    "end": "2645490"
  },
  {
    "text": "you an instance of my class I can give you an instance of some other class just use your class for configuration if I",
    "start": "2645490",
    "end": "2651610"
  },
  {
    "text": "want to and that that's deep dark magic right it isn't it's just a powerful",
    "start": "2651610",
    "end": "2659320"
  },
  {
    "text": "language feature it is deeper than we can go in the you know 15 minutes that we have left but it is within your grasp",
    "start": "2659320",
    "end": "2666910"
  },
  {
    "text": "like you can understand meta classes you could provide an application that uses like that nice style of API let me show",
    "start": "2666910",
    "end": "2673990"
  },
  {
    "text": "you something else that's a little easier a little easier to grasp but it's kind of cool to decorators so getting",
    "start": "2673990",
    "end": "2681160"
  },
  {
    "start": "2674000",
    "end": "2722000"
  },
  {
    "text": "rid of some complexity with decorators if you've done a little bit of Django like just a touch you've probably seen there's a decorate",
    "start": "2681160",
    "end": "2686289"
  },
  {
    "text": "called logged in or sorry login required so you can use the login required",
    "start": "2686289",
    "end": "2691569"
  },
  {
    "text": "decorator just by putting I added one extra line of code to my views well - I",
    "start": "2691569",
    "end": "2696939"
  },
  {
    "text": "imported the decorator and then I said at login required just above my home",
    "start": "2696939",
    "end": "2702519"
  },
  {
    "text": "function which is a view so it's pretty cool what it actually does is if you hit my page and you're not logged in it'll",
    "start": "2702519",
    "end": "2708849"
  },
  {
    "text": "send you off to the login screen and then bring you back and if you are logged in it just lets you see the view",
    "start": "2708849",
    "end": "2714249"
  },
  {
    "text": "that you're on transparently really minimal effort on my part right I just put at log and required I don't really",
    "start": "2714249",
    "end": "2719890"
  },
  {
    "text": "have to know how it works decorators are kind of cool let's write",
    "start": "2719890",
    "end": "2725079"
  },
  {
    "start": "2722000",
    "end": "2824000"
  },
  {
    "text": "a decorator cause it does something cool for us so I'm gonna move fast here if if you haven't done like much functional",
    "start": "2725079",
    "end": "2731890"
  },
  {
    "text": "programming with Python if you haven't looked at decorators before we'll see how we do but I do have a blog post",
    "start": "2731890",
    "end": "2738039"
  },
  {
    "text": "that's you know twelve easy steps to decorators so it's really long it's about as long as this talk and if you",
    "start": "2738039",
    "end": "2743469"
  },
  {
    "text": "haven't done decorators before you could go read that talk and a send me a question send me a comment if something is unclear to you but simply a decorator",
    "start": "2743469",
    "end": "2750219"
  },
  {
    "text": "is just a function that takes a function and returns a function that'll maybe be in place of the original thing so here's",
    "start": "2750219",
    "end": "2756669"
  },
  {
    "text": "the simplest decorator that I can think to write I have a dictionary called",
    "start": "2756669",
    "end": "2762189"
  },
  {
    "text": "library I'll have a function called register a function register takes a",
    "start": "2762189",
    "end": "2768179"
  },
  {
    "text": "parameter that is called F and F's",
    "start": "2768179",
    "end": "2773499"
  },
  {
    "text": "name attribute becomes a key in the dictionary and F becomes the value and I return F anybody unclear about what the",
    "start": "2773499",
    "end": "2780309"
  },
  {
    "text": "function register does two lines are really simple code right puts the name in a dictionary give us back whatever it",
    "start": "2780309",
    "end": "2786939"
  },
  {
    "text": "was that got passed to it okay that is a decorator it turns out so I can say at",
    "start": "2786939",
    "end": "2792909"
  },
  {
    "text": "register just before a function and my function doesn't do anything but that",
    "start": "2792909",
    "end": "2798130"
  },
  {
    "text": "register syntax is basically me telling Python hey my func wrap it in this other",
    "start": "2798130",
    "end": "2803319"
  },
  {
    "text": "thing and substitute whatever this other thing returns in the place of my funk and register returns the original",
    "start": "2803319",
    "end": "2809919"
  },
  {
    "text": "function so my func is totally unmolested unmodified but when python",
    "start": "2809919",
    "end": "2815499"
  },
  {
    "text": "runs this code that library variable is going to end up with a key and a value it'll be a function and the actual function itself if the",
    "start": "2815499",
    "end": "2823119"
  },
  {
    "text": "decorator and it's actually useful because hey that's just what Jango does if you want to make your own custom template tags or filters",
    "start": "2823119",
    "end": "2829720"
  },
  {
    "text": "you can't call arbitrary Python functions and your templates because that might be insecure it has to keep a",
    "start": "2829720",
    "end": "2835599"
  },
  {
    "text": "list somehow and it does it by using a decorator now magic just Python so let's",
    "start": "2835599",
    "end": "2841150"
  },
  {
    "start": "2839000",
    "end": "2856000"
  },
  {
    "text": "make a useful decorator that doesn't come with uh doesn't come with Django it turns out our views need to return a",
    "start": "2841150",
    "end": "2847420"
  },
  {
    "text": "thing called a request context and request context is pretty much there's a lot of variables that you want to see in your template like who's currently",
    "start": "2847420",
    "end": "2852849"
  },
  {
    "text": "logged in for instance we can just get those for free if we make a request context and I can do that manually in my",
    "start": "2852849",
    "end": "2858820"
  },
  {
    "start": "2856000",
    "end": "2875000"
  },
  {
    "text": "view and it really kind of sucks I have to add this third line to my render to",
    "start": "2858820",
    "end": "2864010"
  },
  {
    "text": "response shortcut that says yeah I have a template I have my variables and then go make another dictionary full of",
    "start": "2864010",
    "end": "2870160"
  },
  {
    "text": "variables called a request context and post a file the request to do that it's an ugly line of code don't like that at all",
    "start": "2870160",
    "end": "2875440"
  },
  {
    "start": "2875000",
    "end": "2893000"
  },
  {
    "text": "but we could use the render shortcut to automatically build a request context for us you give the render shortcut the",
    "start": "2875440",
    "end": "2882670"
  },
  {
    "text": "request and the template and your dictionary and it does that request context thing for us so that's better",
    "start": "2882670",
    "end": "2889410"
  },
  {
    "text": "well let's go one step further and here's the code sample that might be",
    "start": "2889410",
    "end": "2896079"
  },
  {
    "start": "2893000",
    "end": "3045000"
  },
  {
    "text": "that might make you think so let's let's take a minute on this code sample we",
    "start": "2896079",
    "end": "2902440"
  },
  {
    "text": "made a class called render inherits from object it has an init function what's the what's the init function on a class",
    "start": "2902440",
    "end": "2910920"
  },
  {
    "text": "more or less the constructor it's not really the constructor but yeah we've mostly donut right constructors in Python which is cool which left-right",
    "start": "2910920",
    "end": "2917230"
  },
  {
    "text": "this initialization function so this is what's gonna be called automatically when I make an instance in my class okay",
    "start": "2917230",
    "end": "2923020"
  },
  {
    "text": "and I'm expecting it to be passed a template I'm just gonna store the template on the object that we have that first mandatory parameter self",
    "start": "2923020",
    "end": "2929440"
  },
  {
    "text": "it's the pointer to whatever the current instance of the object is and then I have an underscore underscore call function how about that any guesses",
    "start": "2929440",
    "end": "2935470"
  },
  {
    "text": "about the underscore call function what that has for me",
    "start": "2935470",
    "end": "2939630"
  },
  {
    "text": "go for it",
    "start": "2941910",
    "end": "2945150"
  },
  {
    "text": "yeah so basically what I have to do is is a decorator has to be a callable which is a function you can call",
    "start": "2949750",
    "end": "2955970"
  },
  {
    "text": "functions right turns out you can call objects - if you provide an underscore",
    "start": "2955970",
    "end": "2961010"
  },
  {
    "text": "underscore call method so you might know about magic methods dunder score methods Python does its operator overloading",
    "start": "2961010",
    "end": "2966289"
  },
  {
    "text": "thing by saying hey if you made a special function that's underscore underscore ad then you'd be able to use Plus on your objects if you made a",
    "start": "2966289",
    "end": "2972529"
  },
  {
    "text": "special function called underscore underscore call you'd be able to use two parentheses the call operator on the end",
    "start": "2972529",
    "end": "2977690"
  },
  {
    "text": "so I just made a class that will make callable objects okay so when you call",
    "start": "2977690",
    "end": "2983089"
  },
  {
    "text": "this object you're gonna pass it a function and it's gonna make a function",
    "start": "2983089",
    "end": "2988250"
  },
  {
    "text": "called wrapper and give you back wrapper instead of the function it was passed in",
    "start": "2988250",
    "end": "2993279"
  },
  {
    "text": "okay so I am making a configurable decorator here and whatever function",
    "start": "2993279",
    "end": "2998660"
  },
  {
    "text": "gets decorated by this decorator is going to be replaced by wrapper so what",
    "start": "2998660",
    "end": "3005260"
  },
  {
    "text": "does wrapper do wrapper calls the original function that's the self dot function part it passes it a request and",
    "start": "3005260",
    "end": "3015160"
  },
  {
    "text": "whatever else had got star args stars is kind of pythons way of saying hey if there were more positional parameters",
    "start": "3015160",
    "end": "3023259"
  },
  {
    "text": "coming into this function then catch them in a variable that'll be a two pole and star args when I call the function",
    "start": "3023259",
    "end": "3029680"
  },
  {
    "text": "is pythons way of saying you know you've got a list of stuff passed this as positional parameters of some other function so it's a it's a flexible",
    "start": "3029680",
    "end": "3037000"
  },
  {
    "text": "function definition and calling piece of syntax and you should totally have star and star start down cold and and then",
    "start": "3037000",
    "end": "3046059"
  },
  {
    "start": "3045000",
    "end": "3135000"
  },
  {
    "text": "it's gonna do hey that's the Django part the render it has a request object it has a template object and has a context",
    "start": "3046059",
    "end": "3053049"
  },
  {
    "text": "it got the context by calling the thing it wrapped around so how would we use this my view looks like this now I have",
    "start": "3053049",
    "end": "3064210"
  },
  {
    "text": "that at login required decorator like I did before you can have as many decorators as you want I have the decorator we just wrote it's called at",
    "start": "3064210",
    "end": "3070329"
  },
  {
    "text": "render I passed the template name and now my view just has to return just the",
    "start": "3070329",
    "end": "3076420"
  },
  {
    "text": "dictionary the template name isn't inside of my function the request doesn't have to be manually passed",
    "start": "3076420",
    "end": "3082210"
  },
  {
    "text": "because my decorator kind intercepts that and gets access to it um quick show of hands if you felt like not",
    "start": "3082210",
    "end": "3089020"
  },
  {
    "text": "that you could write this but that you understand all the code that you just saw the last two slides will see your",
    "start": "3089020",
    "end": "3094420"
  },
  {
    "text": "hand okay so that's totally cool decorators are somewhere between",
    "start": "3094420",
    "end": "3101770"
  },
  {
    "text": "intermediate and advanced Python but let me just encourage you this isn't magic",
    "start": "3101770",
    "end": "3107700"
  },
  {
    "text": "this isn't rocket science it's not just for like special elite people that are going to like be language lawyers or",
    "start": "3107700",
    "end": "3113260"
  },
  {
    "text": "something if you take a piece at a time decorators make sense they use the",
    "start": "3113260",
    "end": "3118630"
  },
  {
    "text": "built-in features language Python supports closures supports the star and the star star operator can define",
    "start": "3118630",
    "end": "3123850"
  },
  {
    "text": "functions inside of functions if you rule about scope and lookup not too bad there's just a lot of moving pieces kind",
    "start": "3123850",
    "end": "3129850"
  },
  {
    "text": "of the point of this is the decorator is cool it made my code a little simpler if I had a bunch of views my code would be",
    "start": "3129850",
    "end": "3134859"
  },
  {
    "text": "a lot simpler but I get students that ask me all the time you know so how do I",
    "start": "3134859",
    "end": "3139869"
  },
  {
    "start": "3135000",
    "end": "3151000"
  },
  {
    "text": "get better at Django and I have three responses for you and the last one is",
    "start": "3139869",
    "end": "3145150"
  },
  {
    "text": "maybe why you're here the first response is just practice you know write some Django apps the best",
    "start": "3145150",
    "end": "3150550"
  },
  {
    "text": "thing is just to plunge in and do it the second thing is you got to read the docs cuz the the documentation for Django is awesome there's a lot of them you are",
    "start": "3150550",
    "end": "3157300"
  },
  {
    "start": "3151000",
    "end": "3180000"
  },
  {
    "text": "gonna have to read every link on the front page sorry about that start with the tutorial make things easy but my",
    "start": "3157300",
    "end": "3162760"
  },
  {
    "text": "answer number three is hey you're here get better at Python or in Python well Django doesn't have any magic it just",
    "start": "3162760",
    "end": "3169570"
  },
  {
    "text": "has Python and a few quote unquote advanced language features to make your life easier doesn't have to make your",
    "start": "3169570",
    "end": "3175210"
  },
  {
    "text": "life easier you can you know write a django app and make my life easier as well if you understand Python well come",
    "start": "3175210",
    "end": "3181720"
  },
  {
    "start": "3180000",
    "end": "3203000"
  },
  {
    "text": "see us at Maracana comm check out our tech TV YouTube channel there's lots of free content about Django and Python and",
    "start": "3181720",
    "end": "3186940"
  },
  {
    "text": "JavaScript and lots of other cool stuff and that's it for my talk [Applause]",
    "start": "3186940",
    "end": "3197870"
  },
  {
    "text": "[Music]",
    "start": "3198110",
    "end": "3205719"
  }
]