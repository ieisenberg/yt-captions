[
  {
    "start": "0",
    "end": "31000"
  },
  {
    "text": "hi my name is Seth lad and welcome to",
    "start": "240",
    "end": "1719"
  },
  {
    "text": "this episode of Dart tips this is part",
    "start": "1719",
    "end": "3639"
  },
  {
    "text": "one in a series about functions the",
    "start": "3639",
    "end": "5120"
  },
  {
    "text": "starward and trusty building blocks of",
    "start": "5120",
    "end": "6879"
  },
  {
    "text": "any app Dart supports top level",
    "start": "6879",
    "end": "9000"
  },
  {
    "text": "functions optional parameters nested",
    "start": "9000",
    "end": "11000"
  },
  {
    "text": "functions passing functions as arguments",
    "start": "11000",
    "end": "12920"
  },
  {
    "text": "to other functions and more it's not",
    "start": "12920",
    "end": "15480"
  },
  {
    "text": "uncommon to build an entire app using",
    "start": "15480",
    "end": "17240"
  },
  {
    "text": "only functions if you think Dart is only",
    "start": "17240",
    "end": "19600"
  },
  {
    "text": "classes and libraries you're inferred",
    "start": "19600",
    "end": "20920"
  },
  {
    "text": "treat this episode will focus on",
    "start": "20920",
    "end": "22920"
  },
  {
    "text": "defining and calling functions let's get",
    "start": "22920",
    "end": "25279"
  },
  {
    "text": "started",
    "start": "25279",
    "end": "27130"
  },
  {
    "text": "[Music]",
    "start": "27130",
    "end": "31400"
  },
  {
    "start": "31000",
    "end": "96000"
  },
  {
    "text": "functions are reusable bundles of logic",
    "start": "31400",
    "end": "33440"
  },
  {
    "text": "they can take zero or more arguments",
    "start": "33440",
    "end": "35040"
  },
  {
    "text": "perform some work and optionally return",
    "start": "35040",
    "end": "36879"
  },
  {
    "text": "a value here's a very simple function",
    "start": "36879",
    "end": "39360"
  },
  {
    "text": "named meaning of life the empty",
    "start": "39360",
    "end": "41399"
  },
  {
    "text": "parentheses means this function does not",
    "start": "41399",
    "end": "43280"
  },
  {
    "text": "take any parameters use the return",
    "start": "43280",
    "end": "45200"
  },
  {
    "text": "statement to return a value in this case",
    "start": "45200",
    "end": "47000"
  },
  {
    "text": "42 if no return statement is specified",
    "start": "47000",
    "end": "49600"
  },
  {
    "text": "the function returns null here's how you",
    "start": "49600",
    "end": "52199"
  },
  {
    "text": "call this function so far so good but",
    "start": "52199",
    "end": "54520"
  },
  {
    "text": "Dart likes to be a tur language so we",
    "start": "54520",
    "end": "56039"
  },
  {
    "text": "can simplify the definition of this",
    "start": "56039",
    "end": "57600"
  },
  {
    "text": "function into a single line this fat",
    "start": "57600",
    "end": "60640"
  },
  {
    "text": "Arrow syntax is syntactic sugar for a",
    "start": "60640",
    "end": "62680"
  },
  {
    "text": "more tur way to return the resulting",
    "start": "62680",
    "end": "64478"
  },
  {
    "text": "value of the expression on the right",
    "start": "64479",
    "end": "66119"
  },
  {
    "text": "hand side of the fat",
    "start": "66119",
    "end": "67720"
  },
  {
    "text": "Arrow functions can of course accept",
    "start": "67720",
    "end": "69960"
  },
  {
    "text": "parameters here's an example this code",
    "start": "69960",
    "end": "72439"
  },
  {
    "text": "works just fine but this is Dart we have",
    "start": "72439",
    "end": "74640"
  },
  {
    "text": "optional type annotations so we can",
    "start": "74640",
    "end": "76240"
  },
  {
    "text": "annotate this method's parameters and",
    "start": "76240",
    "end": "78439"
  },
  {
    "text": "return",
    "start": "78439",
    "end": "79640"
  },
  {
    "text": "type we strongly recommend using type",
    "start": "79640",
    "end": "82200"
  },
  {
    "text": "annotations on the surface area of your",
    "start": "82200",
    "end": "84119"
  },
  {
    "text": "code any code that another user will",
    "start": "84119",
    "end": "86640"
  },
  {
    "text": "interact with functions being a perfect",
    "start": "86640",
    "end": "88439"
  },
  {
    "text": "example should annotate what what types",
    "start": "88439",
    "end": "90240"
  },
  {
    "text": "it expects and what type it returns your",
    "start": "90240",
    "end": "93000"
  },
  {
    "text": "fellow developers will thank you and",
    "start": "93000",
    "end": "94439"
  },
  {
    "text": "your tools will give you even better",
    "start": "94439",
    "end": "95920"
  },
  {
    "text": "feedback functions can take multiple",
    "start": "95920",
    "end": "98280"
  },
  {
    "start": "96000",
    "end": "182000"
  },
  {
    "text": "parameters here's an example this",
    "start": "98280",
    "end": "100520"
  },
  {
    "text": "function has two required parameters a",
    "start": "100520",
    "end": "102280"
  },
  {
    "text": "string for the message and an integer",
    "start": "102280",
    "end": "103960"
  },
  {
    "text": "for the number of exclamation points to",
    "start": "103960",
    "end": "105680"
  },
  {
    "text": "add at the end exclamation points are",
    "start": "105680",
    "end": "108000"
  },
  {
    "text": "loud no doubt about it but sometimes you",
    "start": "108000",
    "end": "110079"
  },
  {
    "text": "may not want to shout so loud of course",
    "start": "110079",
    "end": "113000"
  },
  {
    "text": "one option is to pass zero at the end as",
    "start": "113000",
    "end": "115240"
  },
  {
    "text": "a second parameter like this code shows",
    "start": "115240",
    "end": "118600"
  },
  {
    "text": "however it is hard to read this line of",
    "start": "118600",
    "end": "120240"
  },
  {
    "text": "code a casual Observer may not know what",
    "start": "120240",
    "end": "122840"
  },
  {
    "text": "this magic zero is also wouldn't it be",
    "start": "122840",
    "end": "125399"
  },
  {
    "text": "better to Simply leave off the second",
    "start": "125399",
    "end": "126880"
  },
  {
    "text": "parameter if you don't want to use it",
    "start": "126880",
    "end": "128840"
  },
  {
    "text": "luckily Dart has a way to make this",
    "start": "128840",
    "end": "130599"
  },
  {
    "text": "better wrap one or more parameters with",
    "start": "130599",
    "end": "133239"
  },
  {
    "text": "square brackets to make them optional",
    "start": "133239",
    "end": "135280"
  },
  {
    "text": "here's an example notice how the",
    "start": "135280",
    "end": "137519"
  },
  {
    "text": "function now checks if exclamations is",
    "start": "137519",
    "end": "139599"
  },
  {
    "text": "null which is the value of the parameter",
    "start": "139599",
    "end": "141760"
  },
  {
    "text": "if it was not provided by the",
    "start": "141760",
    "end": "143879"
  },
  {
    "text": "caller now that the second parameter is",
    "start": "143879",
    "end": "146200"
  },
  {
    "text": "optional you can optionally omit it when",
    "start": "146200",
    "end": "148040"
  },
  {
    "text": "you call the function here's an example",
    "start": "148040",
    "end": "150800"
  },
  {
    "text": "we made this function more flexible and",
    "start": "150800",
    "end": "152640"
  },
  {
    "text": "easier to use however there's still",
    "start": "152640",
    "end": "154680"
  },
  {
    "text": "another problem here the second",
    "start": "154680",
    "end": "156239"
  },
  {
    "text": "parameter if it is provided still looks",
    "start": "156239",
    "end": "158160"
  },
  {
    "text": "a bit like a magic number that is the",
    "start": "158160",
    "end": "160560"
  },
  {
    "text": "Casual Observer would not know what this",
    "start": "160560",
    "end": "162440"
  },
  {
    "text": "magic number five means luckily Dart has",
    "start": "162440",
    "end": "165280"
  },
  {
    "text": "a solution for this too you can make",
    "start": "165280",
    "end": "167360"
  },
  {
    "text": "methods even easier to read by using",
    "start": "167360",
    "end": "169200"
  },
  {
    "text": "optional named parameters here's an",
    "start": "169200",
    "end": "171680"
  },
  {
    "text": "example I think adding a simple name to",
    "start": "171680",
    "end": "174200"
  },
  {
    "text": "the parameter makes it obvious what is",
    "start": "174200",
    "end": "175840"
  },
  {
    "text": "going on to Define optional name",
    "start": "175840",
    "end": "178280"
  },
  {
    "text": "parameters wrap the parameter in curly",
    "start": "178280",
    "end": "181879"
  },
  {
    "text": "braces to briefly recap there are two",
    "start": "181879",
    "end": "184360"
  },
  {
    "start": "182000",
    "end": "205000"
  },
  {
    "text": "ways to Define optional parameters",
    "start": "184360",
    "end": "186280"
  },
  {
    "text": "square brackets for optional positional",
    "start": "186280",
    "end": "188400"
  },
  {
    "text": "parameters and curly braces for optional",
    "start": "188400",
    "end": "191040"
  },
  {
    "text": "name parameters there's yet another",
    "start": "191040",
    "end": "193560"
  },
  {
    "text": "benefit from the use of optional",
    "start": "193560",
    "end": "195200"
  },
  {
    "text": "parameters but first the setup sometimes",
    "start": "195200",
    "end": "197840"
  },
  {
    "text": "there's an obvious or default answer for",
    "start": "197840",
    "end": "199879"
  },
  {
    "text": "a parameter only on occasion does it",
    "start": "199879",
    "end": "201840"
  },
  {
    "text": "make sense to pass in something more",
    "start": "201840",
    "end": "203799"
  },
  {
    "text": "unique for example here's a function",
    "start": "203799",
    "end": "206400"
  },
  {
    "text": "that opens an HTTP connection the first",
    "start": "206400",
    "end": "209000"
  },
  {
    "text": "parameter IP is address could be",
    "start": "209000",
    "end": "210519"
  },
  {
    "text": "anything so it's required however almost",
    "start": "210519",
    "end": "212799"
  },
  {
    "text": "all HTTP connections use port 80 so the",
    "start": "212799",
    "end": "215519"
  },
  {
    "text": "second parameter can be optional the",
    "start": "215519",
    "end": "218120"
  },
  {
    "text": "function is easier to use now because",
    "start": "218120",
    "end": "219599"
  },
  {
    "text": "the user doesn't have to specify the",
    "start": "219599",
    "end": "221080"
  },
  {
    "text": "obvious however the code inside the",
    "start": "221080",
    "end": "223360"
  },
  {
    "text": "function is a bit verbose plus there's",
    "start": "223360",
    "end": "225760"
  },
  {
    "text": "no way to express to the user what the",
    "start": "225760",
    "end": "227640"
  },
  {
    "text": "port's value is if it is not",
    "start": "227640",
    "end": "230599"
  },
  {
    "text": "provided luckily Dart lets us specify a",
    "start": "230599",
    "end": "233280"
  },
  {
    "text": "default value for a parameter if that",
    "start": "233280",
    "end": "235200"
  },
  {
    "text": "parameter is optional here's an example",
    "start": "235200",
    "end": "238000"
  },
  {
    "text": "this code is simpler the semantic are",
    "start": "238000",
    "end": "240000"
  },
  {
    "text": "more clear and it is self-documenting",
    "start": "240000",
    "end": "241760"
  },
  {
    "text": "you can use any compile time constant",
    "start": "241760",
    "end": "244319"
  },
  {
    "text": "such as integer literals as shown here",
    "start": "244319",
    "end": "246079"
  },
  {
    "text": "for default",
    "start": "246079",
    "end": "247720"
  },
  {
    "text": "values here are some examples of using",
    "start": "247720",
    "end": "250079"
  },
  {
    "text": "this",
    "start": "250079",
    "end": "251920"
  },
  {
    "text": "function however here's an example that",
    "start": "251920",
    "end": "254239"
  },
  {
    "text": "might not be totally clear notice how I",
    "start": "254239",
    "end": "256519"
  },
  {
    "text": "am passing null as the second parameter",
    "start": "256519",
    "end": "259040"
  },
  {
    "text": "null is a perfectly valid value so in",
    "start": "259040",
    "end": "261519"
  },
  {
    "text": "this case Port will be set to null even",
    "start": "261519",
    "end": "264000"
  },
  {
    "text": "though it has a default value the lesson",
    "start": "264000",
    "end": "266400"
  },
  {
    "text": "here is that default values are only",
    "start": "266400",
    "end": "268120"
  },
  {
    "text": "apply if the caller does not supply any",
    "start": "268120",
    "end": "270160"
  },
  {
    "text": "value for the parameter this means to",
    "start": "270160",
    "end": "272400"
  },
  {
    "text": "really cover your bases you should check",
    "start": "272400",
    "end": "273840"
  },
  {
    "text": "for null even when you use default",
    "start": "273840",
    "end": "276000"
  },
  {
    "start": "276000",
    "end": "364000"
  },
  {
    "text": "values this brings up a good question in",
    "start": "276000",
    "end": "278840"
  },
  {
    "text": "the case of an optional parameter",
    "start": "278840",
    "end": "280440"
  },
  {
    "text": "without a default value can you tell the",
    "start": "280440",
    "end": "282240"
  },
  {
    "text": "difference between a user passing in",
    "start": "282240",
    "end": "284240"
  },
  {
    "text": "null and not passing in anything at all",
    "start": "284240",
    "end": "287000"
  },
  {
    "text": "the parameter will be null either way it",
    "start": "287000",
    "end": "289600"
  },
  {
    "text": "turns out that Dart does indeed have a",
    "start": "289600",
    "end": "291360"
  },
  {
    "text": "way to ask if an optional parameter was",
    "start": "291360",
    "end": "293360"
  },
  {
    "text": "provided when the method was called just",
    "start": "293360",
    "end": "295880"
  },
  {
    "text": "use the question mark parameter syntax",
    "start": "295880",
    "end": "298360"
  },
  {
    "text": "here's an example",
    "start": "298360",
    "end": "301039"
  },
  {
    "text": "like the optional name parameters you",
    "start": "301039",
    "end": "302680"
  },
  {
    "text": "can use default values with optional",
    "start": "302680",
    "end": "304720"
  },
  {
    "text": "positional parameters there is a syntax",
    "start": "304720",
    "end": "307280"
  },
  {
    "text": "difference though you must use equals",
    "start": "307280",
    "end": "309240"
  },
  {
    "text": "with the positional params instead of",
    "start": "309240",
    "end": "311039"
  },
  {
    "text": "colon here's an example of defining an",
    "start": "311039",
    "end": "313440"
  },
  {
    "text": "optional positional parameter with a",
    "start": "313440",
    "end": "315360"
  },
  {
    "text": "default",
    "start": "315360",
    "end": "316680"
  },
  {
    "text": "value moving on you can Define functions",
    "start": "316680",
    "end": "319560"
  },
  {
    "text": "simply at the top level of your code",
    "start": "319560",
    "end": "321639"
  },
  {
    "text": "here's an example I love this because it",
    "start": "321639",
    "end": "323840"
  },
  {
    "text": "means I don't need to wrap functions",
    "start": "323840",
    "end": "325319"
  },
  {
    "text": "side of classes writing a simple script",
    "start": "325319",
    "end": "327880"
  },
  {
    "text": "with dart is easy because of top level",
    "start": "327880",
    "end": "330240"
  },
  {
    "text": "functions now you know that functions",
    "start": "330240",
    "end": "332120"
  },
  {
    "text": "can capitalize on type annotations have",
    "start": "332120",
    "end": "334080"
  },
  {
    "text": "both optional positional and optional",
    "start": "334080",
    "end": "336000"
  },
  {
    "text": "name parameters have default values for",
    "start": "336000",
    "end": "338160"
  },
  {
    "text": "their optional parameters and more",
    "start": "338160",
    "end": "340120"
  },
  {
    "text": "there's a lot more to functions in Dart",
    "start": "340120",
    "end": "342000"
  },
  {
    "text": "and we'll cover nested functions",
    "start": "342000",
    "end": "343560"
  },
  {
    "text": "functions as objects and more in a",
    "start": "343560",
    "end": "345280"
  },
  {
    "text": "future episode thanks for watching I'm",
    "start": "345280",
    "end": "347800"
  },
  {
    "text": "Seth lad and as we say here on Dart tips",
    "start": "347800",
    "end": "349800"
  },
  {
    "text": "stay sharp click here to subscribe to",
    "start": "349800",
    "end": "352080"
  },
  {
    "text": "our channel for more episodes of Dart",
    "start": "352080",
    "end": "353560"
  },
  {
    "text": "tips we appreciate any thoughts you",
    "start": "353560",
    "end": "355160"
  },
  {
    "text": "might have for the series please leave",
    "start": "355160",
    "end": "356600"
  },
  {
    "text": "them in the comments below if you have",
    "start": "356600",
    "end": "358639"
  },
  {
    "text": "any additional questions about Dart",
    "start": "358639",
    "end": "360120"
  },
  {
    "text": "please drop by stack Overflow where Dart",
    "start": "360120",
    "end": "361840"
  },
  {
    "text": "experts are standing by to help you out",
    "start": "361840",
    "end": "363560"
  },
  {
    "text": "see you next time",
    "start": "363560",
    "end": "366680"
  }
]