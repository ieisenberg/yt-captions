[
  {
    "start": "0",
    "end": "72000"
  },
  {
    "text": "hi thanks everyone for coming along to the talk about webassembly and the death of JavaScript yeah I know a very",
    "start": "3930",
    "end": "10530"
  },
  {
    "text": "clickbait II title I must admit I I practiced my talk which is good I",
    "start": "10530",
    "end": "16139"
  },
  {
    "text": "practiced it a JavaScript Meetup just a week ago I must admit when I got up on stage and",
    "start": "16139",
    "end": "22110"
  },
  {
    "text": "looked at the people and the look on their faces I wasn't entirely sure whether they're just come to throw things at me so I'm gonna say the same",
    "start": "22110",
    "end": "28860"
  },
  {
    "text": "thing to you if you want to throw things at me that's absolutely fine would you mind just doing it at the ends because it's",
    "start": "28860",
    "end": "34890"
  },
  {
    "text": "hard to talk when you're kind of dodging around all over the place but yeah cool anyway I'm Colleen Eberhardt I work at a",
    "start": "34890",
    "end": "40800"
  },
  {
    "text": "place called Scott logic and just a little bit about Scott logic we're a uk-based software consultancy we write",
    "start": "40800",
    "end": "47070"
  },
  {
    "text": "large-scale JavaScript applications for the financial sector and I guess that's part of why I'm interested in",
    "start": "47070",
    "end": "53309"
  },
  {
    "text": "webassembly if you write large-scale JavaScript applications you know that it's pretty challenging and webassembly",
    "start": "53309",
    "end": "59250"
  },
  {
    "text": "could potentially solve some of those problems but also I do quite a lot with",
    "start": "59250",
    "end": "65250"
  },
  {
    "text": "webassembly in my spare time as well because it's a very new technology and with new technologies there's a lot of creativity around and it's quite a lot",
    "start": "65250",
    "end": "71640"
  },
  {
    "text": "of fun anyway on to the talk itself pretty standard start to the talk a brief history of the web now I'm gonna",
    "start": "71640",
    "end": "79080"
  },
  {
    "start": "72000",
    "end": "414000"
  },
  {
    "text": "skip the HTML part I'm gonna skip the CSS part and just focus on the languages of the web so most of you will already",
    "start": "79080",
    "end": "86760"
  },
  {
    "text": "know this JavaScript the main language of the web was invented in 1995 in a very short space of time just ten days",
    "start": "86760",
    "end": "93030"
  },
  {
    "text": "by a guy called Brendan Eich and at that point in time the web was very different to the web we know today it was very",
    "start": "93030",
    "end": "99600"
  },
  {
    "text": "static or mostly HTML and JavaScript was it conceived as a way of just adding a",
    "start": "99600",
    "end": "105869"
  },
  {
    "text": "little bit of interactivity to web you know think things like form processing and since then if we look at web based",
    "start": "105869",
    "end": "111840"
  },
  {
    "text": "languages we've had Java applets ActiveX we've had flash Silverlight darts",
    "start": "111840",
    "end": "117000"
  },
  {
    "text": "whatever else and yeah I told you it was brief at 2018 it's still just JavaScript actually for a bit of fun who's used",
    "start": "117000",
    "end": "124740"
  },
  {
    "text": "some of those technologies that I quickly flashed up anyone done Silverlight flat ok loads yeah I'm",
    "start": "124740",
    "end": "130078"
  },
  {
    "text": "putting my hand up I did Silverlight for a while for my sins but yeah the funny thing is 22 years later it",
    "start": "130079",
    "end": "137640"
  },
  {
    "text": "still just JavaScript's which is really hard to get your head around that's quite crazy but the thing is the way we",
    "start": "137640",
    "end": "144959"
  },
  {
    "text": "use JavaScript has changed considerably it's nothing like the way JavaScript was",
    "start": "144959",
    "end": "150390"
  },
  {
    "text": "used in when it was originally conceived in 1995 and I think a great illustration",
    "start": "150390",
    "end": "156540"
  },
  {
    "text": "of that is is just the sheer quantity of JavaScript we're using so I use react quite a bit because you know is the cool",
    "start": "156540",
    "end": "162810"
  },
  {
    "text": "thing to use and the standard way of creating a react application is via this project called create create react app",
    "start": "162810",
    "end": "169620"
  },
  {
    "text": "and if you create a new react based application then look at the number of lines of JavaScript that you've just",
    "start": "169620",
    "end": "174750"
  },
  {
    "text": "downloaded from NPM it's 79 thousands that's a lot of",
    "start": "174750",
    "end": "180209"
  },
  {
    "text": "JavaScript code and and this is a great illustration of the fact that we're using javascript in many different ways",
    "start": "180209",
    "end": "185970"
  },
  {
    "text": "now so only a small fraction of that is the JavaScript that actually becomes part of your application javascript is",
    "start": "185970",
    "end": "192360"
  },
  {
    "text": "now being used for the build processes it's being used to transpile it's being used to package it's being used to treat",
    "start": "192360",
    "end": "199560"
  },
  {
    "text": "ache it's being used for all these different things and then if you look at the actual compiled output within your",
    "start": "199560",
    "end": "205440"
  },
  {
    "text": "browser again it's nothing like the way it was used back in 1995 the code that",
    "start": "205440",
    "end": "211170"
  },
  {
    "text": "that is executed in your browser is highly cryptic it's it's gone through many different transformations and it's",
    "start": "211170",
    "end": "217079"
  },
  {
    "text": "caused a few people to sort of coin the phrase that Java scripts is the assembly language of the web now it's it's a",
    "start": "217079",
    "end": "223110"
  },
  {
    "text": "slightly flawed analogy but I guess you get the main point here the browser is being treated as a compiler target which",
    "start": "223110",
    "end": "230040"
  },
  {
    "text": "is fine there's nothing wrong with that apart from the fact it's not a very good compiler target JavaScript was never",
    "start": "230040",
    "end": "237180"
  },
  {
    "text": "designed for this purpose now to understand why it helps to understand a",
    "start": "237180",
    "end": "242940"
  },
  {
    "text": "little bit more about how JavaScript is actually executed at run time so I took this diagram from a Mozilla blog post",
    "start": "242940",
    "end": "248610"
  },
  {
    "text": "you'll notice that all of my diagrams are stolen from elsewhere because I'm terrible at drawing but anyway what",
    "start": "248610",
    "end": "254850"
  },
  {
    "text": "happens at run time is the first thing that happens is your brow your browser are on downloading your your JavaScript",
    "start": "254850",
    "end": "260100"
  },
  {
    "text": "over HTTP will parse the characters into an abstract syntax tree from there it will generate a byte code which will be",
    "start": "260100",
    "end": "266099"
  },
  {
    "text": "run by an interpreter then what happens is the browser will inspect the",
    "start": "266099",
    "end": "271440"
  },
  {
    "text": "execution it will make various assumptions for example if it keeps seeing a function being invoked with a couple of integers it can make the",
    "start": "271440",
    "end": "277200"
  },
  {
    "text": "assumption that they will always be integers and it can generate a more optimized form of that code so this is",
    "start": "277200",
    "end": "282870"
  },
  {
    "text": "the baseline compilation step and then most browsers have multiple tiers of optimization so what happens is as your",
    "start": "282870",
    "end": "289380"
  },
  {
    "text": "JavaScript is executed it gets faster and faster until such a points that any of those assumptions is that it is made",
    "start": "289380",
    "end": "296070"
  },
  {
    "text": "or proven incorrect and then it has to drop down a few tiers again so this is all fantastically Kurt clever and helps",
    "start": "296070",
    "end": "302580"
  },
  {
    "text": "your JavaScript run really really fast again that looks fine I guess until you",
    "start": "302580",
    "end": "308850"
  },
  {
    "text": "start looking at it from the end-user perspective if you start looking at it as a timeline again shamelessly stolen",
    "start": "308850",
    "end": "315270"
  },
  {
    "text": "diagram this is from Len Clark's cartoon and guide to web assembly which is great if you haven't read it already go ahead",
    "start": "315270",
    "end": "320790"
  },
  {
    "text": "and read it not now so yeah so this is a",
    "start": "320790",
    "end": "326310"
  },
  {
    "text": "very rough sort of timeline of JavaScript execution or on the web but it doesn't really matter what this",
    "start": "326310",
    "end": "331410"
  },
  {
    "text": "javascript is it all takes roughly the same shape so the first thing is it takes a little while to parse the",
    "start": "331410",
    "end": "337110"
  },
  {
    "text": "JavaScript then it takes a little time to compile and optimize it and then typically there will be some form of",
    "start": "337110",
    "end": "343110"
  },
  {
    "text": "reoptimize ation if the assumptions that it makes a proven incorrect it will bounce up and down these different",
    "start": "343110",
    "end": "348630"
  },
  {
    "text": "optimization levels and then there'll be some execution to be honest these steps are slightly interleaved but you get you",
    "start": "348630",
    "end": "354330"
  },
  {
    "text": "get the point and then at the end it's garbage collected this actually matters quite a lot because a lot of people are quite",
    "start": "354330",
    "end": "360840"
  },
  {
    "text": "concerned about how quickly their application is responsive to user inputs",
    "start": "360840",
    "end": "366360"
  },
  {
    "text": "and it's become quite an acute topic on mobile where you're typically resource constrained so the way that JavaScript",
    "start": "366360",
    "end": "372570"
  },
  {
    "text": "executes isn't ideal for making your application responsive quickly and",
    "start": "372570",
    "end": "378450"
  },
  {
    "text": "interestingly the team behind webassembly in their paper they initially published when they described",
    "start": "378450",
    "end": "384270"
  },
  {
    "text": "the language that there's this great quote it says the web has become the most ubiquitous application platform ever and yet by historical accidents the",
    "start": "384270",
    "end": "391680"
  },
  {
    "text": "only natively supported programming language for that platform is JavaScript so the interesting thing here is that",
    "start": "391680",
    "end": "397140"
  },
  {
    "text": "they they acknowledge that it's a historical accident it was never designed to do that in the first place",
    "start": "397140",
    "end": "402690"
  },
  {
    "text": "and again this isn't from a bunch of JavaScript this is from a bunch of people who are actually really quite good at javascript",
    "start": "402690",
    "end": "408270"
  },
  {
    "text": "and love the JavaScript language I think it's a very honest appraisal of of where we've got to today so that brings me on",
    "start": "408270",
    "end": "415590"
  },
  {
    "start": "414000",
    "end": "712000"
  },
  {
    "text": "to webassembly again a quick quote webassembly orgasm is a new portable size and loads time efficient format",
    "start": "415590",
    "end": "422070"
  },
  {
    "text": "suitable for compilation to the web so the interesting thing here is if you put the two quotes side by side you can see",
    "start": "422070",
    "end": "427500"
  },
  {
    "text": "that web assembly was designed specifically to tackle those problems of how javascript is executed it was it was",
    "start": "427500",
    "end": "435000"
  },
  {
    "text": "designed specifically with that purpose in mind unlike JavaScript which was never designed to do this in the first place",
    "start": "435000",
    "end": "441140"
  },
  {
    "text": "so quick chop hands has anyone heard of a SMAS okay a decent number so before",
    "start": "441140",
    "end": "448140"
  },
  {
    "text": "getting into the particulars of web assembly it helps to understand a little bit about ASM Jas so if you've not heard",
    "start": "448140",
    "end": "454050"
  },
  {
    "text": "about it before it doesn't matter this will be a quick intro and if you have heard about it before this will provide",
    "start": "454050",
    "end": "459240"
  },
  {
    "text": "a bit of context and a bit of understanding as to why it existed in the first place so I'm going to jump",
    "start": "459240",
    "end": "464370"
  },
  {
    "text": "into some code don't worry you don't have to read too many of the details here but at the top we've got a simple",
    "start": "464370",
    "end": "471060"
  },
  {
    "text": "function written in C that takes a number and raises it to a power I'm then using the M script and compiler to",
    "start": "471060",
    "end": "477630"
  },
  {
    "text": "compile that into an ASM j/s and the output at the bottom is ASM Jas now I'm",
    "start": "477630",
    "end": "482820"
  },
  {
    "text": "not going to go through it line by line but I want to point out a few key features here firstly you'll notice that it's a function X that takes two",
    "start": "482820",
    "end": "489900"
  },
  {
    "text": "arguments a and B and the first thing it does is it reassigns a to plus a so",
    "start": "489900",
    "end": "495330"
  },
  {
    "text": "that's typically what you do to coerce a a string into a number the net result here is that a is unchanged be it ORS",
    "start": "495330",
    "end": "501450"
  },
  {
    "text": "with 0 again the net result is that B is unchanged what these are actually doing",
    "start": "501450",
    "end": "506850"
  },
  {
    "text": "is they're providing type information it's providing a hint but it's less of a hint is more explicit than that it's",
    "start": "506850",
    "end": "513479"
  },
  {
    "text": "informing at the runtime of the typing here you can see right at the bottom we're returning plus C what this is",
    "start": "513480",
    "end": "519719"
  },
  {
    "text": "telling you is that C is a floating-point number again you can see we've got four loops in in the top half",
    "start": "519720",
    "end": "525420"
  },
  {
    "text": "which had been replaced by du while there are lots and lots of other little changes and we've also got this use wise",
    "start": "525420",
    "end": "531120"
  },
  {
    "text": "use a SM string literal this all looks a little bit strange and confusing and",
    "start": "531120",
    "end": "537580"
  },
  {
    "text": "a couple of points immediately firstly this is entirely valid JavaScript if you run this in any JavaScript runtime it",
    "start": "537580",
    "end": "544840"
  },
  {
    "text": "will execute it will execute just like the C code it will raise a to the power B the interesting thing is what happens",
    "start": "544840",
    "end": "552880"
  },
  {
    "text": "when you run it in a JavaScript environment where it has an inherent understanding of a s MJS so what happens",
    "start": "552880",
    "end": "560140"
  },
  {
    "text": "is the code is passed into an abstract abstract syntax tree again as it is with",
    "start": "560140",
    "end": "565360"
  },
  {
    "text": "regular JavaScript you can't avoid that but at that point it notices the use ASM string literal and from there it",
    "start": "565360",
    "end": "572130"
  },
  {
    "text": "understands that this is a slightly different encoding and from there it can immediately skip the interpreted steps",
    "start": "572130",
    "end": "578440"
  },
  {
    "text": "the baseline compilation step and immediately execute well convert this",
    "start": "578440",
    "end": "584170"
  },
  {
    "text": "code into an efficient compiled version so it's quite an interesting concept so other interesting concepts around is",
    "start": "584170",
    "end": "591460"
  },
  {
    "text": "MJS is it has an interesting memory model the memory of a SMAS is just an array it's effectively a virtual machine",
    "start": "591460",
    "end": "597490"
  },
  {
    "text": "built within JavaScript and when they develop this this was about five years",
    "start": "597490",
    "end": "602500"
  },
  {
    "text": "ago they had some pretty impressive demos things like the Unreal Engine running within a browser I think one",
    "start": "602500",
    "end": "607960"
  },
  {
    "text": "thing to point out here is whilst ASM Jas showed us some fantastic things to",
    "start": "607960",
    "end": "613300"
  },
  {
    "text": "my mind it was very much an experiment it was an experiment in in solving the language problem on the web in a",
    "start": "613300",
    "end": "619270"
  },
  {
    "text": "different way prior to that and most of the approaches have been a plug-in style",
    "start": "619270",
    "end": "624580"
  },
  {
    "text": "model of bolt of runtime on to the side whereas ASM jeaious was about building a",
    "start": "624580",
    "end": "629650"
  },
  {
    "text": "runtime within JavaScript so as a result of the success of ASM j s it really",
    "start": "629650",
    "end": "635950"
  },
  {
    "text": "pointed it was a proof of concept that pointed to a different way which is where web assembly came about so in 2015",
    "start": "635950",
    "end": "641770"
  },
  {
    "text": "the web assembly community group was formed and it had representation from the main browser but vendors and they",
    "start": "641770",
    "end": "647470"
  },
  {
    "text": "decided they were going to create a new runtime that lives side by side with JavaScript that has similar feature sets",
    "start": "647470",
    "end": "654040"
  },
  {
    "text": "in similar concepts to ASM Jas just two years later the MVP was released and by",
    "start": "654040",
    "end": "660130"
  },
  {
    "text": "release I mean available in all browsers without well available in node without flags and available without what they",
    "start": "660130",
    "end": "667480"
  },
  {
    "text": "called runtime switches arguments or whatever or on on the main browsers this is pretty impressive for for two",
    "start": "667480",
    "end": "673030"
  },
  {
    "text": "years if you've followed web specifications you'll know that they have they have a habit of taking a long",
    "start": "673030",
    "end": "678910"
  },
  {
    "text": "time I get very frustrated when I see things like CSS grid taking about 10 years to actually emerge so this is",
    "start": "678910",
    "end": "684880"
  },
  {
    "text": "pretty impressive two years for a new runtime and this is mostly I think a lot of this is down to ASM being a fantastic",
    "start": "684880",
    "end": "692410"
  },
  {
    "text": "proof of concept and finally well one things that most people ask is can I use",
    "start": "692410",
    "end": "697720"
  },
  {
    "text": "it yet so you go into the can I use website and as you can see or all the main browser vendors support web",
    "start": "697720",
    "end": "704320"
  },
  {
    "text": "assembly and globally based on the sort of demographics in the world it's about 72% usage and so that's pretty",
    "start": "704320",
    "end": "711130"
  },
  {
    "text": "impressive as well so what I wanted to do is show you a little bit about web assembly in practice and to do that I'm",
    "start": "711130",
    "end": "717580"
  },
  {
    "start": "712000",
    "end": "1056000"
  },
  {
    "text": "going to show you a little bit of code I mean web assembly itself is at runtime so it's quite complicated so I'm not",
    "start": "717580",
    "end": "722860"
  },
  {
    "text": "going to go into all the details but what I want to do is illustrate some of the main points so first thing is I'm",
    "start": "722860",
    "end": "729400"
  },
  {
    "text": "going to go back to exactly the same simple c function again so again one thing to point out is web assembly as I",
    "start": "729400",
    "end": "735820"
  },
  {
    "text": "mentioned is a compilation target so typically you'll be using some other language to compile to web assembly and",
    "start": "735820",
    "end": "741250"
  },
  {
    "text": "this is what it turns into I've missed out the compilation step because there are quite a few different",
    "start": "741250",
    "end": "746800"
  },
  {
    "text": "compilers you can use to target web assembly M scripting is one of them regardless of what you you you use your",
    "start": "746800",
    "end": "752950"
  },
  {
    "text": "code is is output as a binary format with a dot wasmy some extension so this",
    "start": "752950",
    "end": "759640"
  },
  {
    "text": "is the code that is actually going to be sent over HTTP to your browser so you can see again we don't have to parse the",
    "start": "759640",
    "end": "765520"
  },
  {
    "text": "characters into an ast more typically I know this is a little bit small don't",
    "start": "765520",
    "end": "770950"
  },
  {
    "text": "worry about the details more typically if you want to actually look at the output of the compiler you'll look at it",
    "start": "770950",
    "end": "776200"
  },
  {
    "text": "in web assembly text format or or what so this is exactly the same function here and you can see if you've done any",
    "start": "776200",
    "end": "782440"
  },
  {
    "text": "sort of assembly language programming it starts to feel quite like assembly language at this point a fairly small",
    "start": "782440",
    "end": "788860"
  },
  {
    "text": "instruction set whereas we've got some quite browser specific features here we can export functions we can import",
    "start": "788860",
    "end": "794410"
  },
  {
    "text": "functions and the final thing is how do you actually use this and the important",
    "start": "794410",
    "end": "799720"
  },
  {
    "text": "thing here is that at the moment at least web assembly isn't designed to be a standalone time it's designed to be used in",
    "start": "799720",
    "end": "806589"
  },
  {
    "text": "conjunction with and hosted by JavaScript so the main steps to using a wowser module at the moment are firstly",
    "start": "806589",
    "end": "813550"
  },
  {
    "text": "you've got to read the binary here I'm doing it within nose but it's pretty similar within the browser then you",
    "start": "813550",
    "end": "819310"
  },
  {
    "text": "create a compiled wasm module there is still a simple compilation step and a",
    "start": "819310",
    "end": "824680"
  },
  {
    "text": "verification step as well from the compiled module you create an instance so an instance is a stateful object so",
    "start": "824680",
    "end": "830920"
  },
  {
    "text": "your web assembly module your your C code in this example can hold state and then finally you invoke in this case the",
    "start": "830920",
    "end": "837940"
  },
  {
    "text": "exported functions and again you can also import functions as well so let's",
    "start": "837940",
    "end": "843820"
  },
  {
    "text": "have a look at a slightly more complicated example that example looks pretty simple you might be under the misconception that it's really really",
    "start": "843820",
    "end": "850450"
  },
  {
    "text": "easy actually it's not so easy in a lot of instances so this is a simple hello",
    "start": "850450",
    "end": "855760"
  },
  {
    "text": "world example so here I've got a string setup and I've got this odd-looking function get message riff and I'll show",
    "start": "855760",
    "end": "862329"
  },
  {
    "text": "you why shortly I'm skipping the wasm output and the watt output it's all just",
    "start": "862329",
    "end": "867339"
  },
  {
    "text": "low-level garbage but strings and any type of the numeric type are actually a",
    "start": "867339",
    "end": "874240"
  },
  {
    "text": "little bit challenging to work with when you're using web assembly so web assembly itself only has four types and",
    "start": "874240",
    "end": "880269"
  },
  {
    "text": "they're all numeric so how do you do things like strings or dates or objects this is a very simple example showing",
    "start": "880269",
    "end": "886480"
  },
  {
    "text": "you how you might return a string from your web assembly module so again we start with the same step read the binary",
    "start": "886480",
    "end": "892630"
  },
  {
    "text": "into a buffer create the module and an instance and then the next step is quite interesting here we're obtaining a",
    "start": "892630",
    "end": "898870"
  },
  {
    "text": "reference to the there's a typo there to the linear memory and reading the string so web assembly just like asm.js has the",
    "start": "898870",
    "end": "908140"
  },
  {
    "text": "concept of a contiguous block of memory which is called linear memory and both javascript and web assembly can read and",
    "start": "908140",
    "end": "914620"
  },
  {
    "text": "write to the same memory so the memory is itself another interface between the two so in this case my exported get",
    "start": "914620",
    "end": "922060"
  },
  {
    "text": "message ref function is basically returning a pointer which in this case is an integer offset within that linear",
    "start": "922060",
    "end": "928570"
  },
  {
    "text": "memory array and from there I can do the standard decode and log so again this",
    "start": "928570",
    "end": "933579"
  },
  {
    "text": "hopefully gives you an idea of some of the complexities that you face at the moment when using webassembly so very brief overview",
    "start": "933579",
    "end": "941149"
  },
  {
    "text": "the architecture so and web assembly is itself a stack machine it has four types as I mentioned 67 instructions and there",
    "start": "941149",
    "end": "948709"
  },
  {
    "text": "are some other features of the web assembly runtime which are very much influenced by the fact that it exists as",
    "start": "948709",
    "end": "955160"
  },
  {
    "text": "a web-based runtime so firstly it supports streaming compilation which is a very interesting feature what that",
    "start": "955160",
    "end": "961310"
  },
  {
    "text": "means is as your web assembly modules downloaded you can actually split it into chunks and compile it on multiple",
    "start": "961310",
    "end": "967670"
  },
  {
    "text": "threads at the moment with within Firefox you can actually compile web",
    "start": "967670",
    "end": "974570"
  },
  {
    "text": "assembly faster than you can actually download it off the internet which is really a fantastic feature it also has",
    "start": "974570",
    "end": "981860"
  },
  {
    "text": "very simple validation rules there are again I won't go into all the details but as you can imagine because it's a",
    "start": "981860",
    "end": "986930"
  },
  {
    "text": "web-based runtime a lot of the design around web assembly has been to ensure that it's secure so for example the",
    "start": "986930",
    "end": "993920"
  },
  {
    "text": "stack and the heap are separate so you can't have you can't accidentally overwrite your your program memory for",
    "start": "993920",
    "end": "1000010"
  },
  {
    "text": "example there are also a bunch of other validation rules that are also quite simple again the interface you import",
    "start": "1000010",
    "end": "1006310"
  },
  {
    "text": "your export functions and there's a shared linear memory with JavaScript now part of the reason why web assembly came",
    "start": "1006310",
    "end": "1014290"
  },
  {
    "text": "about so quickly is because the working group had a very keen focus on releasing a Minimum Viable Product in MVP and as a",
    "start": "1014290",
    "end": "1021910"
  },
  {
    "text": "result it's surprisingly simple and there are a lot of use cases you might have where it will be a challenge",
    "start": "1021910",
    "end": "1027850"
  },
  {
    "text": "because of the because of the decisions they made around the MVP in the future they're going to be adding new things",
    "start": "1027850",
    "end": "1033548"
  },
  {
    "text": "garbage collection threading host bindings so host bindings is an interesting concept which will make it",
    "start": "1033549",
    "end": "1039610"
  },
  {
    "text": "easier to interoperate with the hosting environment which is typically the web but it doesn't have to be the web and",
    "start": "1039610",
    "end": "1046410"
  },
  {
    "text": "SIMD an exception handling there are the main point here is that this is just the",
    "start": "1046410",
    "end": "1052120"
  },
  {
    "text": "starting point this isn't the finished solution and there's lots of interesting stuff coming along the way",
    "start": "1052120",
    "end": "1057390"
  },
  {
    "start": "1056000",
    "end": "1286000"
  },
  {
    "text": "so I guess moving on to a more practical note then web assembly language support",
    "start": "1057390",
    "end": "1063549"
  },
  {
    "text": "so again to reinforce it's a compilation target you can write a web assembly by hand it's quite good fun I've done it",
    "start": "1063549",
    "end": "1070360"
  },
  {
    "text": "myself but it's not be practical so what I want to do is touch on some of the the main",
    "start": "1070360",
    "end": "1075560"
  },
  {
    "text": "significant languages and in their current state of webassembly support and also touch on what some people are doing",
    "start": "1075560",
    "end": "1081210"
  },
  {
    "text": "with webassembly so first is C and C++ historically these",
    "start": "1081210",
    "end": "1087120"
  },
  {
    "text": "were the first languages to compile to web assembly because they were the in languages used as part of the ASM Jas",
    "start": "1087120",
    "end": "1092730"
  },
  {
    "text": "project as part of that they built the M scripting compiler so the MM scripts and",
    "start": "1092730",
    "end": "1098070"
  },
  {
    "text": "compiler is based on LLVM low-level virtual machines so that's the compiler technology that's used by a lot of",
    "start": "1098070",
    "end": "1103650"
  },
  {
    "text": "different languages they basically bolted on a new back-end that emitted a SM Jas they've they've made",
    "start": "1103650",
    "end": "1111300"
  },
  {
    "text": "modifications that now emit web assembly so in terms of support C and C++ is one",
    "start": "1111300",
    "end": "1116730"
  },
  {
    "text": "of the best some of the best supported languages for web assembly in terms of what people are doing with it at the",
    "start": "1116730",
    "end": "1123660"
  },
  {
    "text": "moment to be honest not a lot it's really quite new so I'm going to pick out a few examples that will hopefully",
    "start": "1123660",
    "end": "1128960"
  },
  {
    "text": "illustrates some of some of where you might see C it being used in the future one great example is PS PDF kit so this",
    "start": "1128960",
    "end": "1136440"
  },
  {
    "text": "is a company that do that have a product which does PDF rendering which is typically done on the server and it's",
    "start": "1136440",
    "end": "1142410"
  },
  {
    "text": "all written in C and C++ using M script and they were able to use exactly the",
    "start": "1142410",
    "end": "1147420"
  },
  {
    "text": "same code base that are used for server-side rendering compile it to web assembly and they're now using it on the web and I'm pretty sure they've actually",
    "start": "1147420",
    "end": "1153900"
  },
  {
    "text": "got this out as a product now so from their perspective it's production-ready PDF rendering I guess is probably one of",
    "start": "1153900",
    "end": "1160260"
  },
  {
    "text": "those examples where it's quite easy to have a simple little interface to a load of number crunching within web assembly",
    "start": "1160260",
    "end": "1165300"
  },
  {
    "text": "and then emit the result back out again another one actually this is a fun fun",
    "start": "1165300",
    "end": "1171360"
  },
  {
    "text": "little demo so at the moment I would say a lot of the uses of web assembly are",
    "start": "1171360",
    "end": "1177180"
  },
  {
    "text": "are not practical they're fun slightly silly and kind of pushing the boundaries and this is one of my favorite ones so",
    "start": "1177180",
    "end": "1183290"
  },
  {
    "text": "this is a JavaScript runtime you can recognize it because you know one add one and one or two equals three objects",
    "start": "1183290",
    "end": "1190890"
  },
  {
    "text": "plus objects equals nan and objects plus array equals not you're all familiar with that",
    "start": "1190890",
    "end": "1196350"
  },
  {
    "text": "that is JavaScript and we all we all love it but there's something a little bit peculiar about this JavaScript",
    "start": "1196350",
    "end": "1201960"
  },
  {
    "text": "runtime this is actually JavaScript core which is the jobs at runtime within WebKit and Safari and",
    "start": "1201960",
    "end": "1207720"
  },
  {
    "text": "that's written in C++ so the people behind this have take used M scripts and to compile it into web assembly and",
    "start": "1207720",
    "end": "1214020"
  },
  {
    "text": "that's now running within Chrome so I'm running the Safari JavaScript engine on within my Chrome browser which is",
    "start": "1214020",
    "end": "1220620"
  },
  {
    "text": "absolutely nuts not not terribly practical but it's fun what I was",
    "start": "1220620",
    "end": "1228090"
  },
  {
    "text": "thinking actually is because that's a proper JavaScript runtime that should itself run ASM Jas so in the back of my",
    "start": "1228090",
    "end": "1234570"
  },
  {
    "text": "mind I'm thinking on the train home I'm going to try to compile that to ASM Jaso I can have JavaScript core it compiles",
    "start": "1234570",
    "end": "1240720"
  },
  {
    "text": "asm.js running in JavaScript core compiled to web assembly on top of Chrome so I'll let you know on Twitter how I get on it slightly more practical",
    "start": "1240720",
    "end": "1249120"
  },
  {
    "text": "as I mentioned it scott logic we work within the financial world and we've we've done a bit of work with a company",
    "start": "1249120",
    "end": "1254400"
  },
  {
    "text": "called active financial who are distributors of market data and and they",
    "start": "1254400",
    "end": "1260159"
  },
  {
    "text": "provide high frequency market data and most of their stuff works within their",
    "start": "1260159",
    "end": "1265890"
  },
  {
    "text": "own bespoke protocol with the decoding and encoding and written in c++ using",
    "start": "1265890",
    "end": "1270900"
  },
  {
    "text": "web assembly they were able to take exactly the same protocol logic compile it to a web assembly and run it within",
    "start": "1270900",
    "end": "1277260"
  },
  {
    "text": "the browser so this is an example of a an option chain within the browser and compiled with relatively little effort",
    "start": "1277260",
    "end": "1284220"
  },
  {
    "text": "it just is really good now C and C++ as",
    "start": "1284220",
    "end": "1289500"
  },
  {
    "start": "1286000",
    "end": "1567000"
  },
  {
    "text": "I mentioned that they have some of the best support for web assembly other languages as you can imagine other",
    "start": "1289500",
    "end": "1295799"
  },
  {
    "text": "people want to get in on the web assembly game but other languages face certain challenges Java C sharp both of",
    "start": "1295799",
    "end": "1302549"
  },
  {
    "text": "these languages require a garbage collector and unfortunately that makes it a little bit trickier because at the",
    "start": "1302549",
    "end": "1307710"
  },
  {
    "text": "moment web assembly itself does not have a garbage collector it doesn't mean it's impossible and a recent experiment",
    "start": "1307710",
    "end": "1314580"
  },
  {
    "text": "called blazer has been demonstrating a few different approaches to this at the moment it's in a very experimental mode",
    "start": "1314580",
    "end": "1320789"
  },
  {
    "text": "so blazer is a way to run c-sharp within web assembly and they're testing a couple of modes one of them is an",
    "start": "1320789",
    "end": "1326820"
  },
  {
    "text": "interpreted mode where they basically take the take their runtime and compile it to web assembly so that you can run",
    "start": "1326820",
    "end": "1333030"
  },
  {
    "text": "dll's directly within the web plus quite a lot Glu logic to provide the right",
    "start": "1333030",
    "end": "1338340"
  },
  {
    "text": "kind of and the other is in there ahead of time compilation so they actually compiled it directly but within their run time they",
    "start": "1338340",
    "end": "1344519"
  },
  {
    "text": "have to have their own garbage collector blazer itself is a an SP a a single page application framework so they're taking",
    "start": "1344519",
    "end": "1351149"
  },
  {
    "text": "other parts of the asp.net environment and making available within webassembly again highly experimental but again it's",
    "start": "1351149",
    "end": "1358649"
  },
  {
    "text": "illustrating a great deal of interest in this technology from various other areas and there are other people doing quite",
    "start": "1358649",
    "end": "1364169"
  },
  {
    "text": "creative and similar things with Java JavaScript now the interesting thing",
    "start": "1364169",
    "end": "1371009"
  },
  {
    "text": "here is that the web assembly has some fantastic properties that I think",
    "start": "1371009",
    "end": "1376370"
  },
  {
    "text": "firstly it allows other people to bring their languages to the web but it's got properties that that I myself as",
    "start": "1376370",
    "end": "1382320"
  },
  {
    "text": "predominantly a JavaScript developer I'd like that as well I would like my my applications to be",
    "start": "1382320",
    "end": "1387539"
  },
  {
    "text": "compiled into a binary format which is passed quickly and execute quickly who wouldn't want that so there's obviously",
    "start": "1387539",
    "end": "1393990"
  },
  {
    "text": "a desire to compile Java scripts to web assembly as well unfortunately again",
    "start": "1393990",
    "end": "1399090"
  },
  {
    "text": "we've got the issue that it's it's not garbage collected but also sorry that it is garbage collected and webassembly",
    "start": "1399090",
    "end": "1404549"
  },
  {
    "text": "doesn't have a garbage collector yet it also isn't statically typed which again is a significant challenge here and",
    "start": "1404549",
    "end": "1411679"
  },
  {
    "text": "again as I mentioned I keep using the word creativity at the moment and there are some quite creative solutions in the",
    "start": "1411679",
    "end": "1417450"
  },
  {
    "text": "JavaScript space at the moment the first is Walt which is the JavaScript like syntax for web assembly text format so",
    "start": "1417450",
    "end": "1424559"
  },
  {
    "text": "what they've done is that web assembly text format I briefly showed you they've created a thin kind of veneer on top of",
    "start": "1424559",
    "end": "1430500"
  },
  {
    "text": "it using JavaScript and I haven't used Walt personally but that projects seems",
    "start": "1430500",
    "end": "1435960"
  },
  {
    "text": "to have quite a bit of a momentum the one I have used is assembly script so to",
    "start": "1435960",
    "end": "1441750"
  },
  {
    "text": "tackle the typing issue typescript is a popular choice for people who want to have statically typed JavaScript so",
    "start": "1441750",
    "end": "1449610"
  },
  {
    "text": "assembly script takes typescript and employs a slightly different type system so it enforces the web assembly types",
    "start": "1449610",
    "end": "1456899"
  },
  {
    "text": "system on your JavaScript so you're restricted to to the integer types float types objects for example anything else",
    "start": "1456899",
    "end": "1464100"
  },
  {
    "text": "you'd have to import from JavaScript from the hosting JavaScript and but it's already starting to look like quite a",
    "start": "1464100",
    "end": "1470510"
  },
  {
    "text": "variable solution again interestingly typescript is a superset of JavaScript and assembly",
    "start": "1470510",
    "end": "1476270"
  },
  {
    "text": "script is a subset of typescript so we've got a subset of a superset of JavaScript yeah everything is like",
    "start": "1476270",
    "end": "1481940"
  },
  {
    "text": "stacked up in this talk interestingly o assembly script is really a waiting garbage collection supporting web",
    "start": "1481940",
    "end": "1488510"
  },
  {
    "text": "assembly before it can become really powerful and again quick quick demo as as I mentioned I've",
    "start": "1488510",
    "end": "1495500"
  },
  {
    "text": "been playing around with this stuff and a lot of it has been playing with the different languages and the different technologies hands up if you've used d3",
    "start": "1495500",
    "end": "1503330"
  },
  {
    "text": "before ok yeah quite a few of you so one of the popular d3 components is the",
    "start": "1503330",
    "end": "1509659"
  },
  {
    "text": "force layout now this is a forced layout and where the actual",
    "start": "1509659",
    "end": "1515980"
  },
  {
    "text": "the force layout number-crunching is actually being done in web assembly so I took Mike Bosse Docs and code 4 so this",
    "start": "1515980",
    "end": "1524240"
  },
  {
    "text": "uses a few different solar physics models there's an N body sort of physics model there's a Hookes law type spring",
    "start": "1524240",
    "end": "1530720"
  },
  {
    "text": "model and I took I I read Mike Bostock source code and converted that into the assembly script then compiled that into",
    "start": "1530720",
    "end": "1538130"
  },
  {
    "text": "web assembly and then built the interface around it so this is actually using web assembly which is which is",
    "start": "1538130",
    "end": "1544070"
  },
  {
    "text": "quite cool and the interesting thing is I was able to do it in such a way that I preserved",
    "start": "1544070",
    "end": "1549140"
  },
  {
    "text": "exactly the d3 force layout interface so this is this is quite an interesting",
    "start": "1549140",
    "end": "1554480"
  },
  {
    "text": "concept and I think this is one illustration of where web assembly can be used to replace something algorithmic",
    "start": "1554480",
    "end": "1561679"
  },
  {
    "text": "within JavaScript yet provide exactly the same interface to the end user and we'll see more of that shortly finally",
    "start": "1561679",
    "end": "1569830"
  },
  {
    "start": "1567000",
    "end": "1617000"
  },
  {
    "text": "there are many many other languages that compile to a web assembly at the moment but I think probably one of the most",
    "start": "1569830",
    "end": "1575330"
  },
  {
    "text": "significant ones is rust and the reason that rusts become quite significant is firstly there's quite a lot of momentum",
    "start": "1575330",
    "end": "1581330"
  },
  {
    "text": "behind the language itself it's a very popular new language it's quite an elegant language but one of the key",
    "start": "1581330",
    "end": "1586700"
  },
  {
    "text": "points is it doesn't require a garbage collector it has a a memory model that has the concept of ownership which is",
    "start": "1586700",
    "end": "1592700"
  },
  {
    "text": "quite easy to map onto web assembly now as I mentioned there's been a lot of creativity in rust and the community are",
    "start": "1592700",
    "end": "1599620"
  },
  {
    "text": "really backing web assembly in a big way there's a great quote from blog post I",
    "start": "1599620",
    "end": "1605510"
  },
  {
    "text": "read that we're poised to be the language of choice for wisdom they're basically seen a golden opportunity that until",
    "start": "1605510",
    "end": "1611809"
  },
  {
    "text": "webassembly has garbage collection rust has this massive head start and they're they're really pushing it I like trying",
    "start": "1611809",
    "end": "1619129"
  },
  {
    "start": "1617000",
    "end": "1676000"
  },
  {
    "text": "out new things and I've always had I don't know hands up if you've written an emulator before I just just a PV it's",
    "start": "1619129",
    "end": "1626899"
  },
  {
    "text": "always been one of my goals as a developer to write an emulator and I've just never got around to it and I had an Amiga while I was a kid so",
    "start": "1626899",
    "end": "1633799"
  },
  {
    "text": "I thought I'd love to write an amiga or emulator in webassembly then I looked at the amiga architecture and found out it was insanely",
    "start": "1633799",
    "end": "1639799"
  },
  {
    "text": "complicated so my expectations went down I I thought okay I'll do a gameboy no that's actually quite hard as well so",
    "start": "1639799",
    "end": "1647059"
  },
  {
    "text": "then I found this thing called chip eight and chip eight is quite interesting because it's actually a virtual machine it was invented a long",
    "start": "1647059",
    "end": "1653539"
  },
  {
    "text": "time ago and it's actually got a really simple architecture so I thought okay in",
    "start": "1653539",
    "end": "1658759"
  },
  {
    "text": "the space of about two weeks I was able to learn rust I say learn rust I'm cut and paste and mangle rust and create a",
    "start": "1658759",
    "end": "1665990"
  },
  {
    "text": "create a chip AIDS emulator and running within web assembly it was it was lots of fun and again I'd encourage you web",
    "start": "1665990",
    "end": "1673039"
  },
  {
    "text": "assembly is a great place to play around at the moment but that's enough of my",
    "start": "1673039",
    "end": "1678259"
  },
  {
    "text": "hobby projects people are actually doing some much more significant things here and this is again from a Mozilla blog",
    "start": "1678259",
    "end": "1685220"
  },
  {
    "text": "and okay what they wanted to do was use web assembly in a highly practical",
    "start": "1685220",
    "end": "1690350"
  },
  {
    "text": "fashion so if we go back right to the beginning of my presentation you know I showed you that when you do an NPM",
    "start": "1690350",
    "end": "1696080"
  },
  {
    "text": "install and constructor create react app you get 79 thousand lines of JavaScript probably one the modules you'll get",
    "start": "1696080",
    "end": "1702679"
  },
  {
    "text": "within that is the source Maps module and source maps are a concept that allow you to map from one form of your code to",
    "start": "1702679",
    "end": "1709100"
  },
  {
    "text": "another it allows you to unmanned all the mangled mess that we deliver to the browser and again it's written in",
    "start": "1709100",
    "end": "1714860"
  },
  {
    "text": "JavaScript and it's quite computationally intensive and can be a little bit slow so what the team did was",
    "start": "1714860",
    "end": "1721490"
  },
  {
    "text": "they decided to take some of the most computationally intensive parts of that code rewrite it in rust compiled to WebP",
    "start": "1721490",
    "end": "1727549"
  },
  {
    "text": "assembly slot it in whilst maintaining exactly the same interface so I'll just talk you through this graph a little bit",
    "start": "1727549",
    "end": "1733100"
  },
  {
    "text": "because you probably can't see it terribly well we've got three columns we've got Chrome Firefox and Safari",
    "start": "1733100",
    "end": "1738930"
  },
  {
    "text": "the red dots are the the time between a breakpoint being hit and the code being",
    "start": "1738930",
    "end": "1744990"
  },
  {
    "text": "visible to the user the red dots are with the JavaScript version the sort of blueish dots are with the web assembly",
    "start": "1744990",
    "end": "1752160"
  },
  {
    "text": "version what I love about this is it's a great performance measurement because it's real and you'll probably have",
    "start": "1752160",
    "end": "1758970"
  },
  {
    "text": "noticed I haven't said much about the runtime performance of web assembly and most people lead with that and I think",
    "start": "1758970",
    "end": "1765180"
  },
  {
    "text": "that's a mistake I've read a lot of misinformation about web assembly performance I've seen people claiming",
    "start": "1765180",
    "end": "1770900"
  },
  {
    "text": "7080 times in performance increase with web assembly and that's just not the",
    "start": "1770900",
    "end": "1776280"
  },
  {
    "text": "case in all instances I've seen that's just been micro benchmarking issues in",
    "start": "1776280",
    "end": "1781410"
  },
  {
    "text": "practice you can expect a sort of 30 40 % speed increase and part of the reason",
    "start": "1781410",
    "end": "1786960"
  },
  {
    "text": "for that is because javascript itself is actually incredibly fast when I first had started doing web assembly I thought",
    "start": "1786960",
    "end": "1793290"
  },
  {
    "text": "okay I'm gonna make something really fast so I created our Mandelbrot rendering algorithm and I was slightly",
    "start": "1793290",
    "end": "1799800"
  },
  {
    "text": "disappointed that my web assembly version was about two percent faster than JavaScript then I compiled my C",
    "start": "1799800",
    "end": "1806070"
  },
  {
    "text": "code well I didn't compile my well I compiled it natively and executed it and realized that my JavaScript code was",
    "start": "1806070",
    "end": "1812130"
  },
  {
    "text": "almost as fast as the native version so web assembly can't be 80 times faster",
    "start": "1812130",
    "end": "1817140"
  },
  {
    "text": "than Java scripts because there isn't a gap you know it's a bit crazy but this this is really useful because as I",
    "start": "1817140",
    "end": "1823110"
  },
  {
    "text": "mentioned they're measuring something real they're measuring something that affects an end user they're measuring the time between a breakpoint and being",
    "start": "1823110",
    "end": "1829050"
  },
  {
    "text": "able to see the result of the source map decoding and as you can see performance increases range between sort of two to",
    "start": "1829050",
    "end": "1835680"
  },
  {
    "text": "three times also an interesting thing here is web assembly performance is a lot more consistent than JavaScript",
    "start": "1835680",
    "end": "1842160"
  },
  {
    "text": "performance and that again relates to the fact that the JavaScript runtime is quite complex with various tiers of",
    "start": "1842160",
    "end": "1848040"
  },
  {
    "text": "execution so again this is a great example of a very practical use of web",
    "start": "1848040",
    "end": "1853350"
  },
  {
    "text": "assembly right now so I'm going to end with a bit of crystal ball gazing I've",
    "start": "1853350",
    "end": "1859320"
  },
  {
    "start": "1856000",
    "end": "1889000"
  },
  {
    "text": "used the term MVP a few times and I've shown you a few experimental things and",
    "start": "1859320",
    "end": "1864780"
  },
  {
    "text": "I must admit I haven't shown you many practical things yet because it's just a little bit too early there aren't that",
    "start": "1864780",
    "end": "1870420"
  },
  {
    "text": "many people creating practical things with webassembly at the moment so I think now is a good time to start",
    "start": "1870420",
    "end": "1875550"
  },
  {
    "text": "looking into the future and see what webassembly might turn into so some of these are fairly safe bets some of these",
    "start": "1875550",
    "end": "1883950"
  },
  {
    "text": "slightly wild and crazy' and may never come true but you know it's it's fun to speculate so I think this year we're",
    "start": "1883950",
    "end": "1891990"
  },
  {
    "text": "going to see rust C C++ used in production for performance critical algorithmic tasks I have a feeling that",
    "start": "1891990",
    "end": "1898590"
  },
  {
    "text": "you will find yourself web using web assembly without even knowing it there are various JavaScript frameworks",
    "start": "1898590",
    "end": "1905100"
  },
  {
    "text": "various build tools that are already looking at using web assembly and you'll npm install them and you'll just you'll",
    "start": "1905100",
    "end": "1911310"
  },
  {
    "text": "just never know web pack we're going to start seeing web assembly integrated",
    "start": "1911310",
    "end": "1917700"
  },
  {
    "text": "into our standard tool chain so it's easier for authors who are mixing the various different languages rust C++ and",
    "start": "1917700",
    "end": "1924270"
  },
  {
    "text": "so on with JavaScript it's just easier for them to set up their bills and webpack have already released in web pack for support for web assembly again",
    "start": "1924270",
    "end": "1932760"
  },
  {
    "text": "safe bets with with the other languages Java C sharp and so on I think we're going to continue to see a lot of",
    "start": "1932760",
    "end": "1938070"
  },
  {
    "text": "creative experiments proof of concepts I don't think we're going to see anything practical from those languages quite yet",
    "start": "1938070",
    "end": "1944270"
  },
  {
    "text": "another thing native node modules native no modules are real pain to the end user",
    "start": "1944270",
    "end": "1950610"
  },
  {
    "text": "in a lot of instances you're using native known modules because there's a large sizable c plus lot plus library",
    "start": "1950610",
    "end": "1957210"
  },
  {
    "text": "that no one in their right minds wants to rewrite in javascript compiling that to web assembly is a much better",
    "start": "1957210",
    "end": "1963210"
  },
  {
    "text": "approach than than packaging it as a native node module and I think we're going to see that emerge node version",
    "start": "1963210",
    "end": "1969120"
  },
  {
    "text": "eight and beyond supports web assembly and as I mentioned web assembly itself is is evolving so I think it won't be",
    "start": "1969120",
    "end": "1976080"
  },
  {
    "text": "long before we'll see garbage collection support because garbage collection is a big pain point for web assembly at the",
    "start": "1976080",
    "end": "1981330"
  },
  {
    "text": "moment in 2019 again web assembly will gain a lot more features and I think it",
    "start": "1981330",
    "end": "1987480"
  },
  {
    "text": "won't be long before Java and c-sharp become production-ready and we'll start seeing significant things happening with",
    "start": "1987480",
    "end": "1993150"
  },
  {
    "text": "those languages within web assembly I also think this might not be a good",
    "start": "1993150",
    "end": "1998820"
  },
  {
    "text": "thing that we'll see yet another wave of mobile desktop frameworks retargeting the web we see this time and time again",
    "start": "1998820",
    "end": "2005600"
  },
  {
    "text": "taking their existing frameworks and technologies and trying to push them onto the web or the mobile we've got a",
    "start": "2005600",
    "end": "2012049"
  },
  {
    "text": "bit of an addiction so they write once run everywhere concept within the industry and it never seems to work but",
    "start": "2012049",
    "end": "2017720"
  },
  {
    "text": "it doesn't stop us trying and I have a feeling that web assembly will cause yet another wave of that I also think",
    "start": "2017720",
    "end": "2025179"
  },
  {
    "text": "performance gains were failed to materialize and there'll be a backlash from early adopters in the same way that",
    "start": "2025179",
    "end": "2030410"
  },
  {
    "text": "we saw early on within mobile we saw a big backlash against hybrid apps and",
    "start": "2030410",
    "end": "2035419"
  },
  {
    "text": "html5 or mobile and the reason for that is not that the technology is bad it's that our expectations are incorrect we",
    "start": "2035419",
    "end": "2041960"
  },
  {
    "text": "make the wrong choice and then we blame the technology web assembly is going to be a prime target for that kind of thing",
    "start": "2041960",
    "end": "2047859"
  },
  {
    "text": "also around this time I think next year we're going to see some really heavy weight productivity tools moving over to",
    "start": "2047859",
    "end": "2054858"
  },
  {
    "text": "the web Photoshop for example I mean why it'd have to be a fully desktop app wouldn't it be great if it was a web app",
    "start": "2054859",
    "end": "2062060"
  },
  {
    "text": "or a progressive web app but I could go on to Photoshop immediately start using it and in the background it would",
    "start": "2062060",
    "end": "2067940"
  },
  {
    "text": "install itself offline and then I'd be able to use it offline Photoshop is a great example of something that I think",
    "start": "2067940",
    "end": "2074030"
  },
  {
    "text": "is highly compatible with web assembly AutoCAD as well the the graphics package",
    "start": "2074030",
    "end": "2079158"
  },
  {
    "text": "they're already experimenting with targeting web assembly so it might actually come this year 2020 and beyond",
    "start": "2079159",
    "end": "2086929"
  },
  {
    "start": "2085000",
    "end": "2290000"
  },
  {
    "text": "I have a feeling that we'll see JavaScript itself compiled directly to web assembly and again because the web",
    "start": "2086929",
    "end": "2093320"
  },
  {
    "text": "assembly runtime has got some fantastic features that I think every JavaScript developer will one but obviously there's",
    "start": "2093320",
    "end": "2099320"
  },
  {
    "text": "some obstacles in the way there's the there's a typing information which is absent from JavaScript to be honest it",
    "start": "2099320",
    "end": "2105380"
  },
  {
    "text": "wouldn't surprise me if we start seeing proposals and we actually start seeing typing appear within JavaScript as an",
    "start": "2105380",
    "end": "2112369"
  },
  {
    "text": "optional concept I can see a future where you might have the user azzam string literal in the same way that you",
    "start": "2112369",
    "end": "2117830"
  },
  {
    "text": "have a strict strict mode literal to turn on a different way of interpreting JavaScript and the concepts of",
    "start": "2117830",
    "end": "2123170"
  },
  {
    "text": "typescript and flow combining into the language so that anyone writing JavaScript can target web assembly I",
    "start": "2123170",
    "end": "2129820"
  },
  {
    "text": "also think it will have an impact beyond just web development I have a feeling",
    "start": "2129820",
    "end": "2135380"
  },
  {
    "text": "that native Android apps might die out in favor of progressive web apps on webassembly so if you if you've not",
    "start": "2135380",
    "end": "2141030"
  },
  {
    "text": "heard of progressive web apps before they're from an end-user perspective they're simply a way of having a more",
    "start": "2141030",
    "end": "2146160"
  },
  {
    "text": "native experience from a web based application so you can go to a website it will then install itself on your home",
    "start": "2146160",
    "end": "2151680"
  },
  {
    "text": "screen and it will work offline there's a whole umbrella of technologies that make that happen but you if you combine",
    "start": "2151680",
    "end": "2157290"
  },
  {
    "text": "that with the power of web assembly you can build practically anything I have a feeling that Windows will follow suit",
    "start": "2157290",
    "end": "2163500"
  },
  {
    "text": "Windows Store has already got plans to start adopting progressive web apps so",
    "start": "2163500",
    "end": "2168720"
  },
  {
    "text": "why not web assembly as well I do think there's a chance that web assembly will compete with the the the standard",
    "start": "2168720",
    "end": "2176940"
  },
  {
    "text": "concept of running native binaries on our desktop machine because why not its performance its sandboxed its secure it",
    "start": "2176940",
    "end": "2183840"
  },
  {
    "text": "has a lot of great properties that I think are equally applicable on the desktop as well around that time as well",
    "start": "2183840",
    "end": "2190500"
  },
  {
    "text": "this is completely off on a tangent one of the things that strikes me as",
    "start": "2190500",
    "end": "2195570"
  },
  {
    "text": "webassembly has been designed as a way of tackling the problems that have emerged due to the way that we're using",
    "start": "2195570",
    "end": "2201599"
  },
  {
    "text": "javascript today basically we're using javascript in a way that it was never designed for I can't help but think we",
    "start": "2201599",
    "end": "2207960"
  },
  {
    "text": "have the same problems with Dom which is why things like react exist we have some very fanciful complex amazing solutions",
    "start": "2207960",
    "end": "2215670"
  },
  {
    "text": "to the problem but webassembly solves a lot of those problems for JavaScript it wouldn't surprise me if Dom alternative",
    "start": "2215670",
    "end": "2221820"
  },
  {
    "text": "comes along as well why not finally java scripts monopoly will be",
    "start": "2221820",
    "end": "2227700"
  },
  {
    "text": "lost and its popularity will fade now okay okay yes so with me that's good",
    "start": "2227700",
    "end": "2234210"
  },
  {
    "text": "and again that's nothing against the language I write a lot of JavaScript I think it's pretty obvious isn't it all",
    "start": "2234210",
    "end": "2240599"
  },
  {
    "text": "of these other languages will become first-class citizens of the web and the rustic community is a swift community C",
    "start": "2240599",
    "end": "2246930"
  },
  {
    "text": "C++ Java they've all got very very strong communities behind them and the web platform as we know is is ubiquitous so",
    "start": "2246930",
    "end": "2254869"
  },
  {
    "text": "JavaScript the main reason it's become put so popular is probably not because the language itself it's a little bit",
    "start": "2254869",
    "end": "2260940"
  },
  {
    "text": "quirky and that's putting it politely it's more because it has a monopoly on the most ubiquitous platform so I don't",
    "start": "2260940",
    "end": "2267329"
  },
  {
    "text": "think it takes too much imagination to come to the conclusion that JavaScript will start to lose that monopoly and its",
    "start": "2267329",
    "end": "2274470"
  },
  {
    "text": "popularity will fail finally though on the flipside I think the ubiquity of the",
    "start": "2274470",
    "end": "2279990"
  },
  {
    "text": "web will extend further using web assembly it will extend the reach of the",
    "start": "2279990",
    "end": "2285119"
  },
  {
    "text": "web as a whole I'm including things like node in in the sort of far reaches of the web so finally yet webassembly in",
    "start": "2285119",
    "end": "2291960"
  },
  {
    "start": "2290000",
    "end": "2310000"
  },
  {
    "text": "the death of JavaScript and will it die I don't think so will it change into something else I",
    "start": "2291960",
    "end": "2297720"
  },
  {
    "text": "think there's a very strong possibility and I do think that its monopoly will be lost and we'll see it quite a bit less",
    "start": "2297720",
    "end": "2304230"
  },
  {
    "text": "javascript in the future thank you very much",
    "start": "2304230",
    "end": "2309078"
  }
]