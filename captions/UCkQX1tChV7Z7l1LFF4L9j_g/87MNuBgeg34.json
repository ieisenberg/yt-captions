[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "hi I'm Aaron Maxwell an instructor at",
    "start": "3439",
    "end": "5680"
  },
  {
    "text": "New Circle and the author of the",
    "start": "5680",
    "end": "7560"
  },
  {
    "start": "6000",
    "end": "6000"
  },
  {
    "text": "advanced python newsletter and I'd like",
    "start": "7560",
    "end": "10440"
  },
  {
    "text": "to talk to you today about the Observer",
    "start": "10440",
    "end": "12519"
  },
  {
    "text": "pattern in Python now design patterns in",
    "start": "12519",
    "end": "15599"
  },
  {
    "start": "14000",
    "end": "14000"
  },
  {
    "text": "general are very interesting to study",
    "start": "15599",
    "end": "17800"
  },
  {
    "text": "for any object-oriented language because",
    "start": "17800",
    "end": "20640"
  },
  {
    "text": "they are ways to reusa solve problems in",
    "start": "20640",
    "end": "24480"
  },
  {
    "text": "code that are common and come up in many",
    "start": "24480",
    "end": "26640"
  },
  {
    "text": "different contexts because in languages",
    "start": "26640",
    "end": "29519"
  },
  {
    "text": "like Java and C++ and c and PHP there's",
    "start": "29519",
    "end": "34920"
  },
  {
    "text": "been a lot of research done since the",
    "start": "34920",
    "end": "36760"
  },
  {
    "text": "turn of the century and there's a great",
    "start": "36760",
    "end": "39360"
  },
  {
    "text": "big volume body of literature for us to",
    "start": "39360",
    "end": "43039"
  },
  {
    "text": "learn from and use but in Python some",
    "start": "43039",
    "end": "46360"
  },
  {
    "text": "things are different about how you",
    "start": "46360",
    "end": "48000"
  },
  {
    "text": "actually apply them and Implement them",
    "start": "48000",
    "end": "50559"
  },
  {
    "text": "because python has some useful",
    "start": "50559",
    "end": "53280"
  },
  {
    "text": "characteristics that the other languages",
    "start": "53280",
    "end": "55280"
  },
  {
    "text": "don't have features like Dynamic typing",
    "start": "55280",
    "end": "58719"
  },
  {
    "text": "features like fun being first class",
    "start": "58719",
    "end": "61320"
  },
  {
    "text": "objects and other characteristics as",
    "start": "61320",
    "end": "63359"
  },
  {
    "text": "well that lets us Implement design",
    "start": "63359",
    "end": "65799"
  },
  {
    "text": "patterns in Python in a way that is",
    "start": "65799",
    "end": "68159"
  },
  {
    "text": "often simpler more concise and more",
    "start": "68159",
    "end": "70520"
  },
  {
    "text": "maintainable readable and useful now",
    "start": "70520",
    "end": "73600"
  },
  {
    "text": "with the Observer pattern if you're not",
    "start": "73600",
    "end": "75960"
  },
  {
    "text": "familiar with it the idea of the",
    "start": "75960",
    "end": "77600"
  },
  {
    "text": "Observer pattern is that you have some",
    "start": "77600",
    "end": "80439"
  },
  {
    "text": "root object which we'll call the",
    "start": "80439",
    "end": "83200"
  },
  {
    "text": "observable and the observable has some",
    "start": "83200",
    "end": "87200"
  },
  {
    "text": "way to know when some state changes of",
    "start": "87200",
    "end": "90759"
  },
  {
    "text": "Interest we're talking about this very",
    "start": "90759",
    "end": "92200"
  },
  {
    "text": "abstractly here but I'm going to get",
    "start": "92200",
    "end": "93840"
  },
  {
    "text": "very specific with it in a little bit",
    "start": "93840",
    "end": "96439"
  },
  {
    "text": "but something will change that the",
    "start": "96439",
    "end": "98159"
  },
  {
    "text": "observable will know about and you'll",
    "start": "98159",
    "end": "100680"
  },
  {
    "text": "also have a number of other let's say",
    "start": "100680",
    "end": "103399"
  },
  {
    "text": "satellite objects that want to know when",
    "start": "103399",
    "end": "106680"
  },
  {
    "text": "this happens you have a number of other",
    "start": "106680",
    "end": "110000"
  },
  {
    "text": "entities that want to be notified when",
    "start": "110000",
    "end": "113520"
  },
  {
    "text": "this thing changes so you notice the",
    "start": "113520",
    "end": "116280"
  },
  {
    "text": "pattern here we have one speaking to",
    "start": "116280",
    "end": "118840"
  },
  {
    "text": "many though I actually don't like to use",
    "start": "118840",
    "end": "121520"
  },
  {
    "text": "the terminology observable in observers",
    "start": "121520",
    "end": "124520"
  },
  {
    "text": "which is traditional when talking about",
    "start": "124520",
    "end": "126159"
  },
  {
    "text": "the Observer design pattern what I like",
    "start": "126159",
    "end": "129080"
  },
  {
    "text": "to do is call them the publisher and the",
    "start": "129080",
    "end": "131480"
  },
  {
    "text": "subscribers I think that's more clear so",
    "start": "131480",
    "end": "134959"
  },
  {
    "text": "let's look at this in detail with python",
    "start": "134959",
    "end": "138160"
  },
  {
    "text": "and see how it actually works with some",
    "start": "138160",
    "end": "142440"
  },
  {
    "start": "142000",
    "end": "142000"
  },
  {
    "text": "code now let's look at the most simple",
    "start": "145640",
    "end": "148440"
  },
  {
    "text": "way you can implement the Observer",
    "start": "148440",
    "end": "150080"
  },
  {
    "text": "pattern in Python now in these code",
    "start": "150080",
    "end": "152680"
  },
  {
    "text": "examples I'm going to be using Python 3",
    "start": "152680",
    "end": "155760"
  },
  {
    "text": "and if you're using python 2 don't worry",
    "start": "155760",
    "end": "158480"
  },
  {
    "text": "pretty much everything applies all the",
    "start": "158480",
    "end": "160440"
  },
  {
    "text": "concepts directly apply the only thing",
    "start": "160440",
    "end": "162480"
  },
  {
    "text": "that's going to be different is a few",
    "start": "162480",
    "end": "163840"
  },
  {
    "text": "details of syntax so you'll be able to",
    "start": "163840",
    "end": "166280"
  },
  {
    "text": "follow along just fine now let's look at",
    "start": "166280",
    "end": "169200"
  },
  {
    "text": "the code here I have in this file called",
    "start": "169200",
    "end": "172920"
  },
  {
    "text": "Observer one. py because it's our first",
    "start": "172920",
    "end": "175680"
  },
  {
    "text": "example in observer 1py I have two",
    "start": "175680",
    "end": "178760"
  },
  {
    "text": "classes a subscriber class and a",
    "start": "178760",
    "end": "181000"
  },
  {
    "text": "publisher class the subscriber is pretty",
    "start": "181000",
    "end": "183920"
  },
  {
    "text": "simple notice it has a method called",
    "start": "183920",
    "end": "186319"
  },
  {
    "text": "update and this simp this simplest",
    "start": "186319",
    "end": "189840"
  },
  {
    "text": "variant of implementing The Observer",
    "start": "189840",
    "end": "192200"
  },
  {
    "text": "pattern each subscriber must Implement a",
    "start": "192200",
    "end": "195280"
  },
  {
    "text": "method called update doesn't have to be",
    "start": "195280",
    "end": "197720"
  },
  {
    "text": "called update it just has to be",
    "start": "197720",
    "end": "199239"
  },
  {
    "text": "consistent and something that both The",
    "start": "199239",
    "end": "201080"
  },
  {
    "text": "Observer and the Observer bow the",
    "start": "201080",
    "end": "203200"
  },
  {
    "text": "publish uh excuse me the subscriber and",
    "start": "203200",
    "end": "205959"
  },
  {
    "text": "the publisher can agree on and in this",
    "start": "205959",
    "end": "208959"
  },
  {
    "text": "case we have a method called update that",
    "start": "208959",
    "end": "211280"
  },
  {
    "text": "takes one argument which will be a",
    "start": "211280",
    "end": "212959"
  },
  {
    "text": "string again it can take any arguments",
    "start": "212959",
    "end": "215200"
  },
  {
    "text": "so long as all parties involved agree on",
    "start": "215200",
    "end": "217959"
  },
  {
    "text": "it now looking at the publisher class we",
    "start": "217959",
    "end": "220760"
  },
  {
    "text": "have a few interesting things first we",
    "start": "220760",
    "end": "223720"
  },
  {
    "text": "have a method called in it the",
    "start": "223720",
    "end": "226080"
  },
  {
    "text": "Constructor that does one thing it",
    "start": "226080",
    "end": "228760"
  },
  {
    "text": "creates an empty set a set is a useful",
    "start": "228760",
    "end": "232040"
  },
  {
    "text": "data structure to use on the publisher",
    "start": "232040",
    "end": "234239"
  },
  {
    "text": "side to keep track of what's going on",
    "start": "234239",
    "end": "236879"
  },
  {
    "text": "because that's all it needs in this case",
    "start": "236879",
    "end": "239480"
  },
  {
    "text": "then now we have a couple of meth",
    "start": "239480",
    "end": "241560"
  },
  {
    "text": "methods here called",
    "start": "241560",
    "end": "244120"
  },
  {
    "text": "register and what these do is they allow",
    "start": "244120",
    "end": "247040"
  },
  {
    "text": "a subscriber to register itself with the",
    "start": "247040",
    "end": "251120"
  },
  {
    "text": "publisher it allows the Observer to",
    "start": "251120",
    "end": "253959"
  },
  {
    "text": "register itself with the",
    "start": "253959",
    "end": "256160"
  },
  {
    "text": "observable and this is important because",
    "start": "256160",
    "end": "258919"
  },
  {
    "text": "we want to allow any object to register",
    "start": "258919",
    "end": "262440"
  },
  {
    "text": "itself with the Observer so that it can",
    "start": "262440",
    "end": "264800"
  },
  {
    "text": "receive those notifications when the",
    "start": "264800",
    "end": "266400"
  },
  {
    "text": "time comes and register is one side of",
    "start": "266400",
    "end": "269360"
  },
  {
    "text": "it unregister is the other side with",
    "start": "269360",
    "end": "272160"
  },
  {
    "text": "unregistering you're just saying I don't",
    "start": "272160",
    "end": "274080"
  },
  {
    "text": "want to receive these notifications",
    "start": "274080",
    "end": "275639"
  },
  {
    "text": "anymore now how are these notification",
    "start": "275639",
    "end": "278000"
  },
  {
    "text": "sent what does it mean to send a",
    "start": "278000",
    "end": "280479"
  },
  {
    "text": "notification well that's all handled in",
    "start": "280479",
    "end": "283280"
  },
  {
    "text": "the dispatch and it's very simple in the",
    "start": "283280",
    "end": "286199"
  },
  {
    "text": "dispatch method all that happens is that",
    "start": "286199",
    "end": "289960"
  },
  {
    "text": "when this method is invoked then every",
    "start": "289960",
    "end": "293360"
  },
  {
    "text": "subscriber has its update method invoked",
    "start": "293360",
    "end": "297560"
  },
  {
    "text": "passing this argument called message so",
    "start": "297560",
    "end": "300280"
  },
  {
    "text": "notice a couple of things dis patch here",
    "start": "300280",
    "end": "302440"
  },
  {
    "text": "is just another method the publisher can",
    "start": "302440",
    "end": "304800"
  },
  {
    "text": "invoke it itself some other entity can",
    "start": "304800",
    "end": "307440"
  },
  {
    "text": "in certain circumstances invoke it as",
    "start": "307440",
    "end": "309840"
  },
  {
    "text": "well gener just depends on the",
    "start": "309840",
    "end": "311240"
  },
  {
    "text": "architecture of your code and how you",
    "start": "311240",
    "end": "312600"
  },
  {
    "text": "want to use the Observer notice also",
    "start": "312600",
    "end": "315240"
  },
  {
    "text": "that the dispatch method takes a message",
    "start": "315240",
    "end": "318639"
  },
  {
    "text": "which in our case is just a string but",
    "start": "318639",
    "end": "321520"
  },
  {
    "text": "of course it could be an arbitrary",
    "start": "321520",
    "end": "323199"
  },
  {
    "text": "object or even several arguments that",
    "start": "323199",
    "end": "326160"
  },
  {
    "text": "are all arbitrary objects but keeping it",
    "start": "326160",
    "end": "328880"
  },
  {
    "text": "simple here we say for subscriber in",
    "start": "328880",
    "end": "331280"
  },
  {
    "text": "self. subscribers subscriber. update",
    "start": "331280",
    "end": "334479"
  },
  {
    "text": "message very simple now how do we use",
    "start": "334479",
    "end": "338319"
  },
  {
    "text": "this well now we're going to go to this",
    "start": "338319",
    "end": "341319"
  },
  {
    "text": "file called Drive I've called driver",
    "start": "341319",
    "end": "343800"
  },
  {
    "text": "observer. one it's just a driver script",
    "start": "343800",
    "end": "346240"
  },
  {
    "text": "to demonstrate how we use this simple",
    "start": "346240",
    "end": "349240"
  },
  {
    "text": "form of the Observer pattern with this",
    "start": "349240",
    "end": "351759"
  },
  {
    "text": "simple form of the Observer pattern we",
    "start": "351759",
    "end": "353880"
  },
  {
    "text": "start by creating a publisher object",
    "start": "353880",
    "end": "358280"
  },
  {
    "text": "then we're going to create some some",
    "start": "358280",
    "end": "361080"
  },
  {
    "text": "subscribers the next step is that these",
    "start": "361080",
    "end": "364720"
  },
  {
    "text": "subscribers have to register with the",
    "start": "364720",
    "end": "367639"
  },
  {
    "text": "publisher now there's several ways this",
    "start": "367639",
    "end": "369880"
  },
  {
    "text": "can happen in the example you're seeing",
    "start": "369880",
    "end": "372520"
  },
  {
    "text": "here I just have a top level few lines",
    "start": "372520",
    "end": "375680"
  },
  {
    "text": "of code that register a few of these",
    "start": "375680",
    "end": "378919"
  },
  {
    "text": "subscribers but a subscriber can",
    "start": "378919",
    "end": "382039"
  },
  {
    "text": "register Itself by calling pub. register",
    "start": "382039",
    "end": "385960"
  },
  {
    "text": "passing self as an argument so we could",
    "start": "385960",
    "end": "389639"
  },
  {
    "text": "for example design each of these",
    "start": "389639",
    "end": "391840"
  },
  {
    "text": "subscribers to in its",
    "start": "391840",
    "end": "394840"
  },
  {
    "text": "Constructor invoke the registration with",
    "start": "394840",
    "end": "398360"
  },
  {
    "text": "the publisher as a global variable it",
    "start": "398360",
    "end": "400560"
  },
  {
    "text": "could register itself whenever it's at",
    "start": "400560",
    "end": "402759"
  },
  {
    "text": "object creation time now I'm going to",
    "start": "402759",
    "end": "406000"
  },
  {
    "text": "now the next step is we call a method to",
    "start": "406000",
    "end": "408919"
  },
  {
    "text": "dispatch a certain message then one of",
    "start": "408919",
    "end": "412520"
  },
  {
    "text": "the subscribers and the next line",
    "start": "412520",
    "end": "415319"
  },
  {
    "text": "unregisters and then we dispatch again",
    "start": "415319",
    "end": "417879"
  },
  {
    "text": "what happens when we run this",
    "start": "417879",
    "end": "421520"
  },
  {
    "text": "we have the first round of dispatch the",
    "start": "428919",
    "end": "431400"
  },
  {
    "text": "message it's lunchtime that goes out to",
    "start": "431400",
    "end": "434440"
  },
  {
    "text": "all the subscribers one subscriber",
    "start": "434440",
    "end": "437759"
  },
  {
    "text": "decides they don't need to receive these",
    "start": "437759",
    "end": "439280"
  },
  {
    "text": "notifications anymore and when that",
    "start": "439280",
    "end": "441599"
  },
  {
    "text": "happens when we dispatch the next",
    "start": "441599",
    "end": "443360"
  },
  {
    "text": "message time for dinner only those",
    "start": "443360",
    "end": "446199"
  },
  {
    "text": "subscribers that remain receive this",
    "start": "446199",
    "end": "448520"
  },
  {
    "text": "message this is the simplest form of the",
    "start": "448520",
    "end": "451759"
  },
  {
    "text": "Observer pattern in Python but we can do",
    "start": "451759",
    "end": "454360"
  },
  {
    "text": "much more interesting things with the",
    "start": "454360",
    "end": "456560"
  },
  {
    "text": "Observer pattern we can do them in much",
    "start": "456560",
    "end": "458800"
  },
  {
    "text": "more concise readable maintainable and",
    "start": "458800",
    "end": "463080"
  },
  {
    "text": "to a certain extent fun ways than we",
    "start": "463080",
    "end": "465080"
  },
  {
    "text": "could easily in some other languages",
    "start": "465080",
    "end": "467440"
  },
  {
    "text": "let's see how that",
    "start": "467440",
    "end": "469759"
  },
  {
    "start": "469000",
    "end": "469000"
  },
  {
    "text": "works now we just saw the simplest form",
    "start": "469759",
    "end": "472520"
  },
  {
    "text": "of the Observer pattern and how you do",
    "start": "472520",
    "end": "474360"
  },
  {
    "text": "it in Python and this is a common way to",
    "start": "474360",
    "end": "478199"
  },
  {
    "text": "do it where you have a Mythic called",
    "start": "478199",
    "end": "479840"
  },
  {
    "text": "update or something like that as long as",
    "start": "479840",
    "end": "481520"
  },
  {
    "text": "it's consistent between observable and",
    "start": "481520",
    "end": "483960"
  },
  {
    "text": "observer publisher and",
    "start": "483960",
    "end": "485680"
  },
  {
    "text": "subscriber but we can do something a",
    "start": "485680",
    "end": "489000"
  },
  {
    "text": "little different in Python that gives us",
    "start": "489000",
    "end": "490560"
  },
  {
    "text": "more",
    "start": "490560",
    "end": "491599"
  },
  {
    "text": "flexibility and what this relies on the",
    "start": "491599",
    "end": "494360"
  },
  {
    "text": "fact that in Python functions are",
    "start": "494360",
    "end": "496520"
  },
  {
    "text": "treated just like any other object if I",
    "start": "496520",
    "end": "498879"
  },
  {
    "text": "have a function f of n something like",
    "start": "498879",
    "end": "501960"
  },
  {
    "text": "that I can say g equals F and it's like",
    "start": "501960",
    "end": "504280"
  },
  {
    "text": "I'm taking this object using over here",
    "start": "504280",
    "end": "506879"
  },
  {
    "text": "where I call G of N and it acts just",
    "start": "506879",
    "end": "509800"
  },
  {
    "text": "like the original function because it's",
    "start": "509800",
    "end": "512000"
  },
  {
    "text": "the same function just referenced under",
    "start": "512000",
    "end": "514240"
  },
  {
    "text": "two different names f and g and",
    "start": "514240",
    "end": "516760"
  },
  {
    "text": "everything that works with functions",
    "start": "516760",
    "end": "519000"
  },
  {
    "text": "freestanding functions in Python also",
    "start": "519000",
    "end": "521479"
  },
  {
    "text": "works with methods methods of objects so",
    "start": "521479",
    "end": "524640"
  },
  {
    "text": "we're going to exploit that to give us",
    "start": "524640",
    "end": "526519"
  },
  {
    "text": "more flexibility so that a subscriber",
    "start": "526519",
    "end": "529640"
  },
  {
    "text": "can register with the publisher even if",
    "start": "529640",
    "end": "533200"
  },
  {
    "text": "that subscriber has not implemented a",
    "start": "533200",
    "end": "535240"
  },
  {
    "text": "method called update so that it can pass",
    "start": "535240",
    "end": "537880"
  },
  {
    "text": "a different method to register to",
    "start": "537880",
    "end": "540480"
  },
  {
    "text": "register with a different method or even",
    "start": "540480",
    "end": "542279"
  },
  {
    "text": "a freestanding function something else",
    "start": "542279",
    "end": "544519"
  },
  {
    "text": "entirely so we need to make some",
    "start": "544519",
    "end": "546720"
  },
  {
    "text": "modifications so if you look here we",
    "start": "546720",
    "end": "548800"
  },
  {
    "text": "have first the subscriber class from the",
    "start": "548800",
    "end": "551320"
  },
  {
    "text": "simple example above and we have the",
    "start": "551320",
    "end": "554760"
  },
  {
    "text": "publisher just the same as below we need",
    "start": "554760",
    "end": "557240"
  },
  {
    "text": "to make some modifications to both let's",
    "start": "557240",
    "end": "559839"
  },
  {
    "text": "start with the subscriber what I'm going",
    "start": "559839",
    "end": "561760"
  },
  {
    "text": "to do is I'm going to make two different",
    "start": "561760",
    "end": "564079"
  },
  {
    "text": "kinds of subscriber",
    "start": "564079",
    "end": "567839"
  },
  {
    "text": "classes and I could reuse code a little",
    "start": "568200",
    "end": "570839"
  },
  {
    "text": "bit better here but I'm not going to",
    "start": "570839",
    "end": "572399"
  },
  {
    "text": "bother it's a simple",
    "start": "572399",
    "end": "575600"
  },
  {
    "text": "example and the first class the",
    "start": "576519",
    "end": "579079"
  },
  {
    "text": "subscriber one has the same interface",
    "start": "579079",
    "end": "581760"
  },
  {
    "text": "with the update method just like in the",
    "start": "581760",
    "end": "584120"
  },
  {
    "text": "previous example but subscriber 2 has a",
    "start": "584120",
    "end": "587240"
  },
  {
    "text": "different method with under a different",
    "start": "587240",
    "end": "589519"
  },
  {
    "text": "name called receive so what we want to",
    "start": "589519",
    "end": "591959"
  },
  {
    "text": "do is make it so that we can",
    "start": "591959",
    "end": "595680"
  },
  {
    "text": "actually register subscriber 2's Reed me",
    "start": "595680",
    "end": "599399"
  },
  {
    "text": "method with the publisher what do we",
    "start": "599399",
    "end": "601800"
  },
  {
    "text": "have to do for that well a few changes",
    "start": "601800",
    "end": "603680"
  },
  {
    "text": "first in the Constructor of the",
    "start": "603680",
    "end": "605040"
  },
  {
    "text": "publisher class we need to seed self.",
    "start": "605040",
    "end": "608600"
  },
  {
    "text": "subscribers as a dictionary instead of a",
    "start": "608600",
    "end": "611800"
  },
  {
    "text": "set and when the subscriber invokes the",
    "start": "611800",
    "end": "615880"
  },
  {
    "text": "register method we want to provide a",
    "start": "615880",
    "end": "619680"
  },
  {
    "text": "function argument I'm going to call it",
    "start": "619680",
    "end": "622680"
  },
  {
    "text": "call back because conceptually that's",
    "start": "622680",
    "end": "625680"
  },
  {
    "text": "exactly what it is we want the Observer",
    "start": "625680",
    "end": "628560"
  },
  {
    "text": "to have a a call back function invoked",
    "start": "628560",
    "end": "631880"
  },
  {
    "text": "called when the notification goes out",
    "start": "631880",
    "end": "634279"
  },
  {
    "text": "and that's the channel that's the",
    "start": "634279",
    "end": "636200"
  },
  {
    "text": "mechanism by which the subscriber is",
    "start": "636200",
    "end": "638920"
  },
  {
    "text": "notified now what we can do in Python",
    "start": "638920",
    "end": "641920"
  },
  {
    "text": "again I can say okay call back this",
    "start": "641920",
    "end": "644639"
  },
  {
    "text": "argument this third argument called call",
    "start": "644639",
    "end": "647360"
  },
  {
    "text": "back is going to be",
    "start": "647360",
    "end": "648720"
  },
  {
    "text": "optional and if it's not",
    "start": "648720",
    "end": "652600"
  },
  {
    "text": "supplied we're going to fall back to the",
    "start": "653560",
    "end": "656000"
  },
  {
    "text": "original the one called",
    "start": "656000",
    "end": "658240"
  },
  {
    "text": "update",
    "start": "658240",
    "end": "661240"
  },
  {
    "text": "now that's good we have a flexible way",
    "start": "668880",
    "end": "672519"
  },
  {
    "text": "to invoke the register method now the",
    "start": "672519",
    "end": "674839"
  },
  {
    "text": "way we add subscribers is a little bit",
    "start": "674839",
    "end": "678160"
  },
  {
    "text": "different because we have a dictionary",
    "start": "678160",
    "end": "680320"
  },
  {
    "text": "now and we're mapping the subscriber",
    "start": "680320",
    "end": "682680"
  },
  {
    "text": "object to the call",
    "start": "682680",
    "end": "685200"
  },
  {
    "text": "back and",
    "start": "685200",
    "end": "688240"
  },
  {
    "text": "similarly with the unregistered method",
    "start": "688240",
    "end": "691279"
  },
  {
    "text": "we're going to have to remove that from",
    "start": "691279",
    "end": "693240"
  },
  {
    "text": "the dictionary which we do in this",
    "start": "693240",
    "end": "695320"
  },
  {
    "text": "way now the dispatch now the signature",
    "start": "695320",
    "end": "699240"
  },
  {
    "text": "for dispatch is exactly the same the",
    "start": "699240",
    "end": "701959"
  },
  {
    "text": "dispatch method the way the dispatch",
    "start": "701959",
    "end": "704079"
  },
  {
    "text": "method is invoked does not change but",
    "start": "704079",
    "end": "706839"
  },
  {
    "text": "the way we go through the subscribers",
    "start": "706839",
    "end": "710160"
  },
  {
    "text": "and sending all these messages is going",
    "start": "710160",
    "end": "711880"
  },
  {
    "text": "to be different first of all we're going",
    "start": "711880",
    "end": "714880"
  },
  {
    "text": "to iterate through subscriber comma call",
    "start": "714880",
    "end": "718240"
  },
  {
    "text": "back and self. subscribers. items now",
    "start": "718240",
    "end": "722720"
  },
  {
    "text": "this is Python 3 so items returns an",
    "start": "722720",
    "end": "725279"
  },
  {
    "text": "iterator in Python 2 we would want to",
    "start": "725279",
    "end": "727320"
  },
  {
    "text": "say it items instead but once we do this",
    "start": "727320",
    "end": "731360"
  },
  {
    "text": "we have within the",
    "start": "731360",
    "end": "734200"
  },
  {
    "text": "loop we can just call the call back for",
    "start": "734279",
    "end": "738040"
  },
  {
    "text": "the",
    "start": "738040",
    "end": "739120"
  },
  {
    "text": "message and we can do anything else in",
    "start": "739120",
    "end": "741399"
  },
  {
    "text": "this Loop we want but this is a simple",
    "start": "741399",
    "end": "742920"
  },
  {
    "text": "structure that gives us a lot of",
    "start": "742920",
    "end": "745480"
  },
  {
    "text": "flexibility in how we work with uh the",
    "start": "745480",
    "end": "748680"
  },
  {
    "text": "publisher and subscriber relationship",
    "start": "748680",
    "end": "751720"
  },
  {
    "text": "because the subscriber can specify not",
    "start": "751720",
    "end": "754000"
  },
  {
    "text": "only I want to be notified on this state",
    "start": "754000",
    "end": "756399"
  },
  {
    "text": "change or when this interesting event",
    "start": "756399",
    "end": "758000"
  },
  {
    "text": "happens but I want you to notify me in",
    "start": "758000",
    "end": "760279"
  },
  {
    "text": "this specific way there's a lot of",
    "start": "760279",
    "end": "762720"
  },
  {
    "text": "expressive power in this kind of pattern",
    "start": "762720",
    "end": "764839"
  },
  {
    "text": "and it's a lot harder to do in Java or",
    "start": "764839",
    "end": "767360"
  },
  {
    "text": "C++ or PHP or",
    "start": "767360",
    "end": "770079"
  },
  {
    "text": "C how does this work well I have a",
    "start": "770079",
    "end": "772519"
  },
  {
    "text": "little driver",
    "start": "772519",
    "end": "774480"
  },
  {
    "text": "script now going to this we have this is",
    "start": "774480",
    "end": "778959"
  },
  {
    "text": "the",
    "start": "778959",
    "end": "779920"
  },
  {
    "text": "creates a couple of",
    "start": "779920",
    "end": "781279"
  },
  {
    "text": "subscribers of a couple of different",
    "start": "781279",
    "end": "783320"
  },
  {
    "text": "types of subscribers several different",
    "start": "783320",
    "end": "785040"
  },
  {
    "text": "types registers them and dispatches the",
    "start": "785040",
    "end": "788240"
  },
  {
    "text": "two messages we saw before the the",
    "start": "788240",
    "end": "791279"
  },
  {
    "text": "lunchtime announcement and the dinner",
    "start": "791279",
    "end": "792959"
  },
  {
    "text": "time announcement so looks like John",
    "start": "792959",
    "end": "795320"
  },
  {
    "text": "doesn't care about dinner what happens",
    "start": "795320",
    "end": "796959"
  },
  {
    "text": "when we run",
    "start": "796959",
    "end": "799560"
  },
  {
    "text": "this notice what happened the",
    "start": "803519",
    "end": "806440"
  },
  {
    "text": "interesting thing here is that",
    "start": "806440",
    "end": "809320"
  },
  {
    "text": "subscriber 2 Alice does not have an",
    "start": "809320",
    "end": "812800"
  },
  {
    "text": "update method in that object the the",
    "start": "812800",
    "end": "815639"
  },
  {
    "text": "object for Alice has a method called",
    "start": "815639",
    "end": "817839"
  },
  {
    "text": "receive and that we see as evidence in",
    "start": "817839",
    "end": "820920"
  },
  {
    "text": "the output means that she got the",
    "start": "820920",
    "end": "823920"
  },
  {
    "text": "message for its",
    "start": "823920",
    "end": "825639"
  },
  {
    "text": "lunchtime so this is an important",
    "start": "825639",
    "end": "827839"
  },
  {
    "text": "refinement gives you more flexibility in",
    "start": "827839",
    "end": "830120"
  },
  {
    "text": "how you can use the Observer pattern in",
    "start": "830120",
    "end": "831759"
  },
  {
    "text": "Python but we're not done yet we can do",
    "start": "831759",
    "end": "835040"
  },
  {
    "text": "even more and do it very easily compared",
    "start": "835040",
    "end": "838040"
  },
  {
    "text": "to what we can do in other languages",
    "start": "838040",
    "end": "840040"
  },
  {
    "text": "let's look at how that",
    "start": "840040",
    "end": "842959"
  },
  {
    "start": "842000",
    "end": "842000"
  },
  {
    "text": "works something may we may want to do",
    "start": "843000",
    "end": "845720"
  },
  {
    "text": "with the Observer pattern is to have an",
    "start": "845720",
    "end": "848320"
  },
  {
    "text": "observer that can actually notify one",
    "start": "848320",
    "end": "851360"
  },
  {
    "text": "group of subscribers for one kind of",
    "start": "851360",
    "end": "854079"
  },
  {
    "text": "situation and notify a different group",
    "start": "854079",
    "end": "856320"
  },
  {
    "text": "of subscribers for different situation",
    "start": "856320",
    "end": "859399"
  },
  {
    "text": "and we can even have subscribers that",
    "start": "859399",
    "end": "861600"
  },
  {
    "text": "are in both groups we can call these",
    "start": "861600",
    "end": "864600"
  },
  {
    "text": "different situations events all that",
    "start": "864600",
    "end": "867759"
  },
  {
    "text": "means it's kind of a abstract term but",
    "start": "867759",
    "end": "870480"
  },
  {
    "text": "all it means is that we have different",
    "start": "870480",
    "end": "873120"
  },
  {
    "text": "kinds of notifications so we can call",
    "start": "873120",
    "end": "875600"
  },
  {
    "text": "these different events another word we",
    "start": "875600",
    "end": "877360"
  },
  {
    "text": "could use is",
    "start": "877360",
    "end": "878600"
  },
  {
    "text": "channels now how do we implement this in",
    "start": "878600",
    "end": "881040"
  },
  {
    "text": "code well let's look at the code that we",
    "start": "881040",
    "end": "884600"
  },
  {
    "text": "just made with the flexibility of how we",
    "start": "884600",
    "end": "888160"
  },
  {
    "text": "can notify a",
    "start": "888160",
    "end": "889959"
  },
  {
    "text": "subscriber and I'm actually going to",
    "start": "889959",
    "end": "892600"
  },
  {
    "text": "step back instead of having two",
    "start": "892600",
    "end": "894639"
  },
  {
    "text": "different subscriber classes let's just",
    "start": "894639",
    "end": "896880"
  },
  {
    "text": "go back to one and in fact will forgo",
    "start": "896880",
    "end": "900240"
  },
  {
    "text": "that flexibility right now in this",
    "start": "900240",
    "end": "902279"
  },
  {
    "text": "example because these are independent of",
    "start": "902279",
    "end": "904759"
  },
  {
    "text": "each other and they compose you'll see",
    "start": "904759",
    "end": "906639"
  },
  {
    "text": "what I mean as we go",
    "start": "906639",
    "end": "908000"
  },
  {
    "text": "forward now with the publisher we need",
    "start": "908000",
    "end": "910839"
  },
  {
    "text": "to make a few changes here because the",
    "start": "910839",
    "end": "912959"
  },
  {
    "text": "interface we want to provide is that a",
    "start": "912959",
    "end": "915639"
  },
  {
    "text": "subscriber can not only register with",
    "start": "915639",
    "end": "919240"
  },
  {
    "text": "the Observer but register for a specific",
    "start": "919240",
    "end": "922399"
  },
  {
    "text": "event that that Observer can announce so",
    "start": "922399",
    "end": "925839"
  },
  {
    "text": "how does that work well first thing we",
    "start": "925839",
    "end": "927639"
  },
  {
    "text": "need to do is modify the Constructor a",
    "start": "927639",
    "end": "931199"
  },
  {
    "text": "publisher to take several",
    "start": "931199",
    "end": "933399"
  },
  {
    "text": "events and that means that we're our",
    "start": "933399",
    "end": "937160"
  },
  {
    "text": "subscribers attribute of the publisher",
    "start": "937160",
    "end": "939360"
  },
  {
    "text": "class is going to have a little bit",
    "start": "939360",
    "end": "941639"
  },
  {
    "text": "different structure we're going to seat",
    "start": "941639",
    "end": "943880"
  },
  {
    "text": "it as a dictionary mapping event names",
    "start": "943880",
    "end": "947079"
  },
  {
    "text": "which will just be strings to",
    "start": "947079",
    "end": "949639"
  },
  {
    "text": "dictionaries which will each of these",
    "start": "949639",
    "end": "952560"
  },
  {
    "text": "dictionaries will map subscriber objects",
    "start": "952560",
    "end": "954680"
  },
  {
    "text": "to the call back function or method for",
    "start": "954680",
    "end": "957720"
  },
  {
    "text": "that particular event",
    "start": "957720",
    "end": "959560"
  },
  {
    "text": "so the way we're going to initialize",
    "start": "959560",
    "end": "961680"
  },
  {
    "text": "this is to use a dictionary",
    "start": "961680",
    "end": "966399"
  },
  {
    "text": "comprehension this is something that",
    "start": "974360",
    "end": "976319"
  },
  {
    "text": "works in Python 3 and in Python 2 you",
    "start": "976319",
    "end": "978839"
  },
  {
    "text": "can do something similar you actually",
    "start": "978839",
    "end": "980959"
  },
  {
    "text": "can't quite use a dictionary",
    "start": "980959",
    "end": "982240"
  },
  {
    "text": "comprehension here in some versions of",
    "start": "982240",
    "end": "984440"
  },
  {
    "text": "python in all versions of python but",
    "start": "984440",
    "end": "987079"
  },
  {
    "text": "it's a concise way you describe and you",
    "start": "987079",
    "end": "988680"
  },
  {
    "text": "can just just create the dictionary",
    "start": "988680",
    "end": "990519"
  },
  {
    "text": "however You' like now we're going to",
    "start": "990519",
    "end": "993199"
  },
  {
    "text": "also make a little helper method called",
    "start": "993199",
    "end": "995959"
  },
  {
    "text": "get",
    "start": "995959",
    "end": "998279"
  },
  {
    "text": "subscribers all this does is look up in",
    "start": "1005959",
    "end": "1008720"
  },
  {
    "text": "the subscribers attribute and returns",
    "start": "1008720",
    "end": "1011440"
  },
  {
    "text": "what's the dictionary mapping subscriber",
    "start": "1011440",
    "end": "1013360"
  },
  {
    "text": "to their call back for this particular",
    "start": "1013360",
    "end": "1015440"
  },
  {
    "text": "event it'll be a little",
    "start": "1015440",
    "end": "1017160"
  },
  {
    "text": "useful so with register we need to add a",
    "start": "1017160",
    "end": "1020680"
  },
  {
    "text": "new argument and I think it makes more",
    "start": "1020680",
    "end": "1022839"
  },
  {
    "text": "sense",
    "start": "1022839",
    "end": "1023760"
  },
  {
    "text": "semantically in terms of the design of",
    "start": "1023760",
    "end": "1025839"
  },
  {
    "text": "the API to put it as a first argument so",
    "start": "1025839",
    "end": "1028558"
  },
  {
    "text": "let's go ahead and put that there and",
    "start": "1028559",
    "end": "1030199"
  },
  {
    "text": "again event is just a string specifying",
    "start": "1030199",
    "end": "1033000"
  },
  {
    "text": "what kind of event or situation or",
    "start": "1033000",
    "end": "1035640"
  },
  {
    "text": "notification the subscriber wants to be",
    "start": "1035640",
    "end": "1038160"
  },
  {
    "text": "notified about so when we have the",
    "start": "1038160",
    "end": "1041600"
  },
  {
    "text": "signature modified the Callback setup is",
    "start": "1041600",
    "end": "1044038"
  },
  {
    "text": "exactly the same but the way we insert",
    "start": "1044039",
    "end": "1046839"
  },
  {
    "text": "it into our recordkeeping of who wants",
    "start": "1046839",
    "end": "1049760"
  },
  {
    "text": "to know about what is a little different",
    "start": "1049760",
    "end": "1051919"
  },
  {
    "text": "we're going to call the get subscribers",
    "start": "1051919",
    "end": "1054160"
  },
  {
    "text": "method and pass it the event name that",
    "start": "1054160",
    "end": "1057320"
  },
  {
    "text": "returns a dictionary and that dictionary",
    "start": "1057320",
    "end": "1060039"
  },
  {
    "text": "we will",
    "start": "1060039",
    "end": "1061039"
  },
  {
    "text": "then do a lookup with The Who and then",
    "start": "1061039",
    "end": "1064880"
  },
  {
    "text": "register the call back in that",
    "start": "1064880",
    "end": "1067080"
  },
  {
    "text": "way unregister",
    "start": "1067080",
    "end": "1069640"
  },
  {
    "text": "similarly needs to take an event",
    "start": "1069640",
    "end": "1071640"
  },
  {
    "text": "parameter because a subscriber may be",
    "start": "1071640",
    "end": "1074039"
  },
  {
    "text": "registered to several different events",
    "start": "1074039",
    "end": "1076280"
  },
  {
    "text": "and they may want to unregister to some",
    "start": "1076280",
    "end": "1078600"
  },
  {
    "text": "events events but not",
    "start": "1078600",
    "end": "1080559"
  },
  {
    "text": "others so we look up the dictionary the",
    "start": "1080559",
    "end": "1083679"
  },
  {
    "text": "same way get subscribers",
    "start": "1083679",
    "end": "1087919"
  },
  {
    "text": "event and after doing that all we have",
    "start": "1088720",
    "end": "1091320"
  },
  {
    "text": "left is the dispatch method so again",
    "start": "1091320",
    "end": "1094520"
  },
  {
    "text": "we're going to use a",
    "start": "1094520",
    "end": "1096240"
  },
  {
    "text": "consistent signature notice what I've",
    "start": "1096240",
    "end": "1098440"
  },
  {
    "text": "done here I've decided to design the API",
    "start": "1098440",
    "end": "1101400"
  },
  {
    "text": "of my Observer class so that for each of",
    "start": "1101400",
    "end": "1104400"
  },
  {
    "text": "these methods event is the first",
    "start": "1104400",
    "end": "1106120"
  },
  {
    "text": "argument that's intentional makes it",
    "start": "1106120",
    "end": "1108880"
  },
  {
    "text": "easy to remember when you're writing the",
    "start": "1108880",
    "end": "1110440"
  },
  {
    "text": "code out of the right way to do it okay",
    "start": "1110440",
    "end": "1113360"
  },
  {
    "text": "so we have for subscriber comma callback",
    "start": "1113360",
    "end": "1116120"
  },
  {
    "text": "and self. subscribers but again we need",
    "start": "1116120",
    "end": "1119080"
  },
  {
    "text": "to change",
    "start": "1119080",
    "end": "1121720"
  },
  {
    "text": "that it's a pretty simple change this",
    "start": "1121720",
    "end": "1124960"
  },
  {
    "text": "patch method just has to look up the",
    "start": "1124960",
    "end": "1127000"
  },
  {
    "text": "correct subscriber table for the",
    "start": "1127000",
    "end": "1129679"
  },
  {
    "text": "particular event so now we have this and",
    "start": "1129679",
    "end": "1133360"
  },
  {
    "text": "I have a driver here which is very",
    "start": "1133360",
    "end": "1135080"
  },
  {
    "text": "similar to the one we've seen before",
    "start": "1135080",
    "end": "1137080"
  },
  {
    "text": "just using the new publish and",
    "start": "1137080",
    "end": "1139080"
  },
  {
    "text": "subscriber class so let's see how that",
    "start": "1139080",
    "end": "1143360"
  },
  {
    "text": "goes great it works notice how we have",
    "start": "1145600",
    "end": "1149240"
  },
  {
    "text": "some flexibility here because we're",
    "start": "1149240",
    "end": "1152039"
  },
  {
    "text": "going back to the driver we have two",
    "start": "1152039",
    "end": "1154640"
  },
  {
    "text": "different channels here lunch and dinner",
    "start": "1154640",
    "end": "1157400"
  },
  {
    "text": "and different subscribers are registered",
    "start": "1157400",
    "end": "1159480"
  },
  {
    "text": "to each and they get notified",
    "start": "1159480",
    "end": "1161760"
  },
  {
    "text": "appropriately depending on what they're",
    "start": "1161760",
    "end": "1163400"
  },
  {
    "text": "subscribed to so as you can see there's",
    "start": "1163400",
    "end": "1166039"
  },
  {
    "text": "a lot of flexibility in how you can",
    "start": "1166039",
    "end": "1167919"
  },
  {
    "text": "implement the observ erver pattern in",
    "start": "1167919",
    "end": "1169720"
  },
  {
    "text": "Python and if you try to do all the",
    "start": "1169720",
    "end": "1172600"
  },
  {
    "text": "things we've done in this video using",
    "start": "1172600",
    "end": "1174640"
  },
  {
    "text": "some other languages you might find",
    "start": "1174640",
    "end": "1177360"
  },
  {
    "text": "depending on the language that's a lot",
    "start": "1177360",
    "end": "1179240"
  },
  {
    "text": "more work and Python's feature setup",
    "start": "1179240",
    "end": "1182120"
  },
  {
    "text": "Dynamic typing functions being first",
    "start": "1182120",
    "end": "1184159"
  },
  {
    "text": "class objects and some other attributes",
    "start": "1184159",
    "end": "1186760"
  },
  {
    "text": "and aspects of the language as well make",
    "start": "1186760",
    "end": "1188840"
  },
  {
    "text": "it a lot easier to implement certain",
    "start": "1188840",
    "end": "1191760"
  },
  {
    "text": "patterns as the certain design patterns",
    "start": "1191760",
    "end": "1193760"
  },
  {
    "text": "in",
    "start": "1193760",
    "end": "1195960"
  },
  {
    "start": "1195000",
    "end": "1195000"
  },
  {
    "text": "Python",
    "start": "1197640",
    "end": "1199280"
  },
  {
    "text": "okay so that's the Observer pattern in",
    "start": "1199280",
    "end": "1201480"
  },
  {
    "text": "Python and I hope you got a lot out of",
    "start": "1201480",
    "end": "1203760"
  },
  {
    "text": "it as we look together at all the ways",
    "start": "1203760",
    "end": "1206559"
  },
  {
    "text": "you can Implement these design patterns",
    "start": "1206559",
    "end": "1208840"
  },
  {
    "text": "in python and a lot of the flexibility",
    "start": "1208840",
    "end": "1210919"
  },
  {
    "text": "we have now in closing I want to point",
    "start": "1210919",
    "end": "1213559"
  },
  {
    "text": "to a few Reese's sources for you first",
    "start": "1213559",
    "end": "1217120"
  },
  {
    "text": "all the code examples that we work",
    "start": "1217120",
    "end": "1218880"
  },
  {
    "text": "through together are available at the",
    "start": "1218880",
    "end": "1221240"
  },
  {
    "text": "link below at new circle.com so you can",
    "start": "1221240",
    "end": "1223880"
  },
  {
    "text": "go there download that code work through",
    "start": "1223880",
    "end": "1226440"
  },
  {
    "text": "it read it play with it learn from it",
    "start": "1226440",
    "end": "1230000"
  },
  {
    "text": "secondly as I mentioned I'm the writer",
    "start": "1230000",
    "end": "1232480"
  },
  {
    "text": "and author and editor of a newsletter",
    "start": "1232480",
    "end": "1234840"
  },
  {
    "text": "Advanced Python programming a cover",
    "start": "1234840",
    "end": "1237559"
  },
  {
    "text": "topics like these and more and you can",
    "start": "1237559",
    "end": "1239679"
  },
  {
    "text": "subscribe to that again all these links",
    "start": "1239679",
    "end": "1241440"
  },
  {
    "text": "are below at migrate",
    "start": "1241440",
    "end": "1243159"
  },
  {
    "text": "up.com last resource I want to tell you",
    "start": "1243159",
    "end": "1245880"
  },
  {
    "text": "about is an advanced Python Programming",
    "start": "1245880",
    "end": "1248400"
  },
  {
    "text": "course that I'm teaching and it's a",
    "start": "1248400",
    "end": "1250679"
  },
  {
    "text": "4-day course and we can adjust that to",
    "start": "1250679",
    "end": "1252799"
  },
  {
    "text": "your needs and it goes into all these",
    "start": "1252799",
    "end": "1255240"
  },
  {
    "text": "topics and more and it's not for",
    "start": "1255240",
    "end": "1257080"
  },
  {
    "text": "beginners it's for people who already",
    "start": "1257080",
    "end": "1258720"
  },
  {
    "text": "know Python and already have some",
    "start": "1258720",
    "end": "1260440"
  },
  {
    "text": "experience programming and that enables",
    "start": "1260440",
    "end": "1263039"
  },
  {
    "text": "enables us to go into some really",
    "start": "1263039",
    "end": "1264880"
  },
  {
    "text": "fascinating topics thanks a lot I'm",
    "start": "1264880",
    "end": "1267280"
  },
  {
    "text": "Aaron Maxwell and hope you had",
    "start": "1267280",
    "end": "1271200"
  },
  {
    "text": "fun",
    "start": "1278559",
    "end": "1281559"
  }
]