[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "[Music]",
    "start": "3070",
    "end": "8240"
  },
  {
    "text": "so welcome to the Deep dive into Android IPC and specifically binder framework my",
    "start": "8240",
    "end": "14440"
  },
  {
    "text": "name is Alexander garanta and what I um plan on talking about is basically",
    "start": "14440",
    "end": "20000"
  },
  {
    "start": "15000",
    "end": "117000"
  },
  {
    "text": "couple of things you know why IPC matters and specifically on Android and how is binder different than other forms",
    "start": "20000",
    "end": "26480"
  },
  {
    "text": "of IPC and why is it well suited for essentially what we need on Android um",
    "start": "26480",
    "end": "32520"
  },
  {
    "text": "you're you know hopefully you're here because you're interested in binder itself but you may also be interested in",
    "start": "32520",
    "end": "38200"
  },
  {
    "text": "how Android works and binder is basically one of those core pieces that glues everything together without binder",
    "start": "38200",
    "end": "44800"
  },
  {
    "text": "literally the entire system would fall apart so whether it's because like I said you want to take advantage of it",
    "start": "44800",
    "end": "50559"
  },
  {
    "text": "and build your own custom apps Andor low-level system services or you just want to kind of get get a sense of How",
    "start": "50559",
    "end": "56280"
  },
  {
    "text": "It's all put together this is what we plan on covering my my only concern is and this is a little disclaimer right up",
    "start": "56280",
    "end": "62519"
  },
  {
    "text": "front is we only have about 50 minutes this talk when I originally put it together I was aiming for two hours so",
    "start": "62519",
    "end": "68520"
  },
  {
    "text": "I'll have to condense quite a few things and skip over certain points and or even certain slides um I know that sometimes",
    "start": "68520",
    "end": "76400"
  },
  {
    "text": "frustrating to do but it's the only way I'm going to get through it so we're going to talk about things like what",
    "start": "76400",
    "end": "81640"
  },
  {
    "text": "binder is you know IPC advantages comparisons of binder to other Frameworks um binder versus other forms",
    "start": "81640",
    "end": "88240"
  },
  {
    "text": "of IPC that you might have used if you were developing apps on Android some of terminology how how the binder",
    "start": "88240",
    "end": "94720"
  },
  {
    "text": "communicates and how the discovery Works um a little bit about aidl um the",
    "start": "94720",
    "end": "100200"
  },
  {
    "text": "essentially the reference mapping in binder which is one of the interesting pieces of it um we'll talk a little bit",
    "start": "100200",
    "end": "105360"
  },
  {
    "text": "about kind of how you would use binder in a real application uh talk about asynchronous binder and why it's",
    "start": "105360",
    "end": "111240"
  },
  {
    "text": "important memory sharing and concerns around memory binder limitations and a little bit about",
    "start": "111240",
    "end": "117159"
  },
  {
    "start": "117000",
    "end": "138000"
  },
  {
    "text": "security so I'm again my name is Alexander garanta I teach Android I work",
    "start": "117159",
    "end": "123479"
  },
  {
    "text": "for Maracana we focus on Android on open source training and Android is a big part of it I also run the San Francisco",
    "start": "123479",
    "end": "129920"
  },
  {
    "text": "Android User Group as well as jav user group and involved with a bunch of other things related to Android um Android is",
    "start": "129920",
    "end": "135400"
  },
  {
    "text": "basically what I do most of the time these days so what is binder binder is basically an IPC uh framework I like to",
    "start": "135400",
    "end": "144400"
  },
  {
    "start": "138000",
    "end": "255000"
  },
  {
    "text": "call it framework because it's not just the binder as you will see later on we discuss the terminology binder is a lot of things but you can think of it as a",
    "start": "144400",
    "end": "150959"
  },
  {
    "text": "system for basically developing quote unquote object-oriented OS but the idea is we're not developing the OS itself to",
    "start": "150959",
    "end": "158080"
  },
  {
    "text": "be objectoriented which we could do but rather we want to enable an operating system to behave as an oper",
    "start": "158080",
    "end": "163840"
  },
  {
    "text": "object-oriented operating system so rather than thinking of your OS as a bunch of you know system calls you think",
    "start": "163840",
    "end": "169480"
  },
  {
    "text": "of your OS as a bunch of services that have States they have behavior that you can invoked at any time kind of like",
    "start": "169480",
    "end": "175080"
  },
  {
    "text": "micr kernel to some degree um but basically something that can be bolted on to any operating system like for",
    "start": "175080",
    "end": "181000"
  },
  {
    "text": "example Linux so it is essential to Android this diagram I know it's kind of small so let me zoom in a little bit uh",
    "start": "181000",
    "end": "188040"
  },
  {
    "text": "basically gives you an idea that you know pretty much all of the applications all of system Services a lot of the",
    "start": "188040",
    "end": "195319"
  },
  {
    "text": "essentially uh underlying uh framework infrastructure middleware as we call it all depend on Android um binder",
    "start": "195319",
    "end": "202000"
  },
  {
    "text": "especially at the binder and the driver level um in terms of binder itself it comes from open binder it was first uh",
    "start": "202000",
    "end": "208560"
  },
  {
    "text": "developed for Bo back in the day um it was never really never really lived to",
    "start": "208560",
    "end": "213680"
  },
  {
    "text": "see the day as part of BOS uh because b b was acquired by Palm it was then",
    "start": "213680",
    "end": "219239"
  },
  {
    "text": "ported to the Palm kernel uh first the Cobalt and later on the Linux kernel and eventually um was basically built into a",
    "start": "219239",
    "end": "226799"
  },
  {
    "text": "full-fledged Palm OS and served its purpose but that didn't really last too long because as we know you know Palm",
    "start": "226799",
    "end": "233519"
  },
  {
    "text": "didn't really go as as as they hoped they did so when when um HP acquired I",
    "start": "233519",
    "end": "239319"
  },
  {
    "text": "guess later on web OS uh Google acquired uh deian heurn and she was one of the",
    "start": "239319",
    "end": "244480"
  },
  {
    "text": "key members of the B on the the original B team of binder and so along with her",
    "start": "244480",
    "end": "250040"
  },
  {
    "text": "came kind of the knowledge of how to do IPC um in a in an essentially embedded",
    "start": "250040",
    "end": "255199"
  },
  {
    "start": "255000",
    "end": "318000"
  },
  {
    "text": "environment so what is IPC and why do we care about IPC so basically IPC is can",
    "start": "255199",
    "end": "261120"
  },
  {
    "text": "be me can mean a lot of things but ultimately it's used for message passing synchronization sharing memory um",
    "start": "261120",
    "end": "267520"
  },
  {
    "text": "isolating certain key components of the the system um and of course there's also something called RPC so remoting but in",
    "start": "267520",
    "end": "276039"
  },
  {
    "text": "Android as you will see when we talk aboutpc we do not assume any sort of remoting procedural calls um it enables",
    "start": "276039",
    "end": "282759"
  },
  {
    "text": "us to separate things it provides privilege separation data isolation information sharing and modularity",
    "start": "282759",
    "end": "289560"
  },
  {
    "text": "that's kind of one of the key components of it um so when it comes to IPC as you guys know you know being this is a Linux",
    "start": "289560",
    "end": "295960"
  },
  {
    "text": "event uh there's many forms of IPC you know so we could be talking about files we call talking we could be talking",
    "start": "295960",
    "end": "301199"
  },
  {
    "text": "about signals sockets whether we're talking about Unix or TCP sockets pipes semaphor shared memory um you know",
    "start": "301199",
    "end": "308000"
  },
  {
    "text": "message passing Frameworks like for example Q's message bus um and then other forms of IPC like intents content",
    "start": "308000",
    "end": "314680"
  },
  {
    "text": "providers Messenger right and then there's the binder so why binder why",
    "start": "314680",
    "end": "320560"
  },
  {
    "start": "318000",
    "end": "433000"
  },
  {
    "text": "specifically why do we need binder why is it so important so again this diagram on the right hand side kind of gives",
    "start": "320560",
    "end": "326800"
  },
  {
    "text": "shows you the typical stack on Android you guys have seen this probably many times at the bottom we have the kernel",
    "start": "326800",
    "end": "332520"
  },
  {
    "text": "at the top we have the applications and then in the middle we have this middleware while applications tend to be written in Java and in order to take",
    "start": "332520",
    "end": "338800"
  },
  {
    "text": "advantage of the application framework Services um which run in separate processes they actually consume them",
    "start": "338800",
    "end": "344960"
  },
  {
    "text": "using IPC um so this communication from applications down to application framework Services is almost 99% done",
    "start": "344960",
    "end": "353199"
  },
  {
    "text": "using binder framework um going down from the application framework down into the lay lower layers we sometimes see",
    "start": "353199",
    "end": "359520"
  },
  {
    "text": "the the use of binder sometimes we use Unix sockets um and sometimes we directly load the drivers through you",
    "start": "359520",
    "end": "365240"
  },
  {
    "text": "know essentially jni and a bunch of other things like house but that's beyond beyond this talk so in in",
    "start": "365240",
    "end": "372240"
  },
  {
    "text": "Androids binder specifically provides us with security so one of the features of it is that it enables us to run things",
    "start": "372240",
    "end": "378599"
  },
  {
    "text": "in separate processes and as a result of that we get better security isolation um",
    "start": "378599",
    "end": "383800"
  },
  {
    "text": "I sandboxing stability so if things crash because they're running separate processes and because we have a good IPC",
    "start": "383800",
    "end": "389960"
  },
  {
    "text": "framework in place you know they they can be restarted without affecting other things in the system um memory",
    "start": "389960",
    "end": "395120"
  },
  {
    "text": "management so one of the key features of Android memory management is this ability to be able to kill off",
    "start": "395120",
    "end": "400599"
  },
  {
    "text": "applications that are no longer needed um either by activity manager service doing the job or in case it can't uh",
    "start": "400599",
    "end": "406919"
  },
  {
    "text": "cope with memory demands having the low memory killer kit can but for that to work you need to be able to cleanly shut",
    "start": "406919",
    "end": "412280"
  },
  {
    "text": "down the entire process you cannot have applications share the underlying process essential infrastructure you",
    "start": "412280",
    "end": "418199"
  },
  {
    "text": "need IPC to able that process to to be able to exist and be able to still coexist you know with other processes in",
    "start": "418199",
    "end": "424520"
  },
  {
    "text": "the system um and then like I said even um even basically Android's uh own",
    "start": "424520",
    "end": "430520"
  },
  {
    "text": "components and apps all run in separate processes so specifically what is what do binder essentially do for us um it",
    "start": "430520",
    "end": "438520"
  },
  {
    "start": "433000",
    "end": "498000"
  },
  {
    "text": "replaces all forms of IPC or I should say system 5 traditional system 5 based IPC uh on Android so there's no support",
    "start": "438520",
    "end": "445639"
  },
  {
    "text": "on Android for SE so for sis 5 semaphor shared segments message qes and whatnot one of the main reasons for that is",
    "start": "445639",
    "end": "452039"
  },
  {
    "text": "because Android's you know essentially ability to kill out the processes without them having any sort of cleanup",
    "start": "452039",
    "end": "458479"
  },
  {
    "text": "uh action scheduled uh means that if you were to use traditional IPC it may not work very well because you may",
    "start": "458479",
    "end": "465039"
  },
  {
    "text": "essentially end up with resource leakage um and you may have malicious code essentially you know contribute to",
    "start": "465039",
    "end": "471479"
  },
  {
    "text": "denile of service attacks um binder has a built-in IP reference counting",
    "start": "471479",
    "end": "476960"
  },
  {
    "text": "mechanism which enables it to count objects if you will that are shared across process boundaries and when",
    "start": "476960",
    "end": "483080"
  },
  {
    "text": "they're no longer needed because say the process that was sharing them dies those objects can be automatically essentially",
    "start": "483080",
    "end": "489520"
  },
  {
    "text": "well the users of those objects can be notified and those references can be automatically reclaimed without having",
    "start": "489520",
    "end": "495199"
  },
  {
    "text": "any sort of lingering resources be left in the system um this is very key to",
    "start": "495199",
    "end": "500280"
  },
  {
    "start": "498000",
    "end": "682000"
  },
  {
    "text": "essentially why Android binder survives essentially this hostile environment with low memory killer where other IPC",
    "start": "500280",
    "end": "506599"
  },
  {
    "text": "Frameworks don't um one of the other features of of binder compare to other forms of IPC is the so-called thread",
    "start": "506599",
    "end": "514159"
  },
  {
    "text": "migration um programming model so the idea is with binder is you as the client",
    "start": "514159",
    "end": "519399"
  },
  {
    "text": "of the binder framework you basically make an invocation a method invocation on an object that to you appears to be",
    "start": "519399",
    "end": "525680"
  },
  {
    "text": "local um but in reality that object lives somewhere else and what will happen is that your thread will by",
    "start": "525680",
    "end": "531399"
  },
  {
    "text": "default block and on the other side will continue running if you will that method",
    "start": "531399",
    "end": "537279"
  },
  {
    "text": "in invocation code of course it's no longer your thread it's somebody else's thread but what's interesting is that to you it appears like your thread just",
    "start": "537279",
    "end": "544000"
  },
  {
    "text": "jumped on into another process and started executing within the you know those that process boundary um so that's",
    "start": "544000",
    "end": "550240"
  },
  {
    "text": "really key because it enables very easy programming model to exist on Android um",
    "start": "550240",
    "end": "555440"
  },
  {
    "text": "we also have features like for example identifying senders of uh of requests",
    "start": "555440",
    "end": "560560"
  },
  {
    "text": "this is actually very key to Android security being able to know who's talking to whom at any time enables us",
    "start": "560560",
    "end": "566079"
  },
  {
    "text": "to enforce permissions dynamically and this is how most Android services do it we also have unique object mapping",
    "start": "566079",
    "end": "572279"
  },
  {
    "text": "across boundaries um process boundaries so basically if I share a service object a bind their object with another process",
    "start": "572279",
    "end": "579200"
  },
  {
    "text": "and that process shares that same object with yet another process that reference that object is unique across all",
    "start": "579200",
    "end": "585600"
  },
  {
    "text": "processes on the system and the kernel driver ensures of that and this is actually key to how the discovery of",
    "start": "585600",
    "end": "592360"
  },
  {
    "text": "bound Services works on Android as we will talk about in a moment um we also have ability to send file descriptors",
    "start": "592360",
    "end": "597600"
  },
  {
    "text": "across process boundaries so for example if you want to play a media file in a media server you're not sending the the",
    "start": "597600",
    "end": "603880"
  },
  {
    "text": "entire file over you're sending just merily the file descriptor to that file to the other process underneath the hood",
    "start": "603880",
    "end": "609079"
  },
  {
    "text": "the file descriptors get duped and basically copied over to the other side",
    "start": "609079",
    "end": "615480"
  },
  {
    "text": "um Android also comes with something called aidl uh which is basically interface definition language that",
    "start": "615480",
    "end": "620959"
  },
  {
    "text": "allows services to describe their capabilities to clients and moreover Android comes with a tool called the IDL",
    "start": "620959",
    "end": "627440"
  },
  {
    "text": "that can extract proxy and stubs which do automatic marshalling and",
    "start": "627440",
    "end": "632519"
  },
  {
    "text": "unmarshalling of data as we will talk about in a moment all of that you get for free of course only if you do it in",
    "start": "632519",
    "end": "638040"
  },
  {
    "text": "Java but nevertheless the idea is you get you as a cons consumer of the binder framework have actually very little to",
    "start": "638040",
    "end": "644320"
  },
  {
    "text": "do to take advantage of it um you have a fairly uh you know simplified transaction model sorry I should I skip",
    "start": "644320",
    "end": "650120"
  },
  {
    "text": "one um you know very simple support for marshalling and marshalling of common data types although custom types are",
    "start": "650120",
    "end": "655720"
  },
  {
    "text": "also supported um again this autog generation of stubs and proc is important um recursion across process",
    "start": "655720",
    "end": "662360"
  },
  {
    "text": "boundaries is built in so if a process a calls process B and process B calls back into process a that works out of the box",
    "start": "662360",
    "end": "668480"
  },
  {
    "text": "um and if your process a happens to be talking to a binder object which is actually also inside a process a um so",
    "start": "668480",
    "end": "675200"
  },
  {
    "text": "it's not IPC anymore it's local um you are essentially skipping the entire overhead of marshalling and marshalling",
    "start": "675200",
    "end": "681360"
  },
  {
    "text": "and invoking things locally um it is not meant for RPC it is very much oriented",
    "start": "681360",
    "end": "687600"
  },
  {
    "start": "682000",
    "end": "738000"
  },
  {
    "text": "towards CL you know essentially client Service uh or message passing it's not necessarily well suited for streaming um",
    "start": "687600",
    "end": "695240"
  },
  {
    "text": "and is not part of any sort of standard so binder is not part of postic or anything like that so there's you know",
    "start": "695240",
    "end": "701920"
  },
  {
    "text": "essentially it's API and implementation are one and the same um as we will see pretty much everything you do in Android",
    "start": "701920",
    "end": "708639"
  },
  {
    "text": "depends on binder drawing drawing on the screen depends on Andro on binder uh handling touch events depends on binder",
    "start": "708639",
    "end": "715360"
  },
  {
    "text": "um you know playing stuff you know handling call backs to your application depends on binder you know you sending",
    "start": "715360",
    "end": "720560"
  },
  {
    "text": "intents receiving intents and whatnot that all depends on binder so it's extremely important now that said a lot",
    "start": "720560",
    "end": "727440"
  },
  {
    "text": "of Android low-level system Services also take advantage of uh the the Unix domain sockets as a form of",
    "start": "727440",
    "end": "733959"
  },
  {
    "text": "communication so binder is not the only game in town but it's the most common one so a lot of times when I talk about",
    "start": "733959",
    "end": "741279"
  },
  {
    "start": "738000",
    "end": "852000"
  },
  {
    "text": "binder people ask well why why do I need to know about binder why don't I just use intents and content providers and certainly you can I'm not going to go",
    "start": "741279",
    "end": "747839"
  },
  {
    "text": "into too much depth but the idea is that in Android if you have two applications that want to talk to each other they can",
    "start": "747839",
    "end": "752920"
  },
  {
    "text": "literally just have for example their activities open up each other via intents um the activity that it's been",
    "start": "752920",
    "end": "759120"
  },
  {
    "text": "invoked can respond back with some results to the caller via another intent uh you can also start services with",
    "start": "759120",
    "end": "765600"
  },
  {
    "text": "intents you can send intents as broadcast messages you can receive them and whatnot that also is IPC this down",
    "start": "765600",
    "end": "772600"
  },
  {
    "text": "below which I'm going to kind of skip um is an example of how you could do that many of you who have ever written",
    "start": "772600",
    "end": "778560"
  },
  {
    "text": "Android application have probably done something like this but basically you can have an application create an intent",
    "start": "778560",
    "end": "784120"
  },
  {
    "text": "start another application with that intent that intent contains think of it as the parameters of that request the",
    "start": "784120",
    "end": "789720"
  },
  {
    "text": "other application can get that intent handle the get the data out of that intent do some work on the behalf of the",
    "start": "789720",
    "end": "796040"
  },
  {
    "text": "caller create another intent and basically send the result and then the calling application gets the result and",
    "start": "796040",
    "end": "802880"
  },
  {
    "text": "processes that um it works and it's well suited it's very um there's there's",
    "start": "802880",
    "end": "808519"
  },
  {
    "text": "actually slow coupling because these intents are not um are well defined the data parameters are well defined but the",
    "start": "808519",
    "end": "815880"
  },
  {
    "text": "problem is that this is all not really very o it's asynchronous it's not very",
    "start": "815880",
    "end": "820920"
  },
  {
    "text": "well suited for situations where you want you know low latency um and at the",
    "start": "820920",
    "end": "826000"
  },
  {
    "text": "end of the day all of this still underneath a hood uses binder so yes",
    "start": "826000",
    "end": "831240"
  },
  {
    "text": "intents are a form of communication between applications and there's nothing wrong with it especially if you're just",
    "start": "831240",
    "end": "836399"
  },
  {
    "text": "creating simple trivial things but if you want much more essentially you know up to the millisecond notifications",
    "start": "836399",
    "end": "842880"
  },
  {
    "text": "between or communication between multiple apps and you don't want to depend on the asynchronous nature of",
    "start": "842880",
    "end": "848480"
  },
  {
    "text": "intents well then you may want to go that to that bottom level and take a look at binder um another thing that comes up a",
    "start": "848480",
    "end": "855000"
  },
  {
    "start": "852000",
    "end": "961000"
  },
  {
    "text": "lot is Messenger um IPC now messenger I don't know how many of you know is basically a mechanism that allows a",
    "start": "855000",
    "end": "862639"
  },
  {
    "text": "remote process to use a messenger to call back to a local Handler U thereby",
    "start": "862639",
    "end": "868519"
  },
  {
    "text": "passing you messages um so basically the idea is let's say you had an application it's probably best understood if I just",
    "start": "868519",
    "end": "875279"
  },
  {
    "text": "you know explain the code briefly um let's say you have an application that wants to have some other service that do",
    "start": "875279",
    "end": "880880"
  },
  {
    "text": "downloads of a bunch of images or something what it could do is it create an intent to put a bunch of Uris that he",
    "start": "880880",
    "end": "887040"
  },
  {
    "text": "wants downloaded and the then a messenger into that intent and send it over to the service that service on the",
    "start": "887040",
    "end": "894240"
  },
  {
    "text": "other hand would can get that intent get the uis from the from the intent and start acting on those uis for example",
    "start": "894240",
    "end": "901000"
  },
  {
    "text": "say initiate the downloads but say wants to notify the original application when every URI or every your url or I guess",
    "start": "901000",
    "end": "908800"
  },
  {
    "text": "resource gets downloaded what it could do is it could again create a message and then essentially stick that message",
    "start": "908800",
    "end": "914680"
  },
  {
    "text": "into the messenger or send it via the messenger to the other side the other side essentially pass that messenger",
    "start": "914680",
    "end": "921959"
  },
  {
    "text": "which was you know linked to a local Handler that Handler would just get a",
    "start": "921959",
    "end": "927000"
  },
  {
    "text": "call back onto this handle message message you will receive the message and then act on it so that is a form of IPC",
    "start": "927000",
    "end": "933720"
  },
  {
    "text": "it's well more much more it's much better you know to do it this way than to use frequent um um essentially",
    "start": "933720",
    "end": "940360"
  },
  {
    "text": "intents sending bunch of intents because that actually is not even an option so it this particular use case it's it's",
    "start": "940360",
    "end": "946600"
  },
  {
    "text": "pretty good but you know underneath the hood this still uses binder it's still asynchronous um and it's still not the",
    "start": "946600",
    "end": "953319"
  },
  {
    "text": "most well you know the as as well suited for low latency because you still have to go through go through these hand",
    "start": "953319",
    "end": "959160"
  },
  {
    "text": "which are essentially message cues so before we talk about binder how binder works I just want to kind of",
    "start": "959160",
    "end": "965000"
  },
  {
    "start": "961000",
    "end": "1037000"
  },
  {
    "text": "briefly mention a few things about binder just a terminology because binder means a lot of things so first of all",
    "start": "965000",
    "end": "971079"
  },
  {
    "text": "there's a binder as a framework which is essentially the overall IP IPC architecture it's not just the driver",
    "start": "971079",
    "end": "976600"
  },
  {
    "text": "there's Li binder there's these proxies and stops and whatnot a lot of these things essentially come into play when",
    "start": "976600",
    "end": "982199"
  },
  {
    "text": "we when we talk about binder so at the very low level like at the very bottom right here we have the binder driver so",
    "start": "982199",
    "end": "988319"
  },
  {
    "text": "that is what facilitates the actual communication or exchange of messages across process boundaries um yes I know",
    "start": "988319",
    "end": "995120"
  },
  {
    "text": "this is Linux conference this is what we're most interested in but then again this alone would be useless had it not been for the rest of the the",
    "start": "995120",
    "end": "1001560"
  },
  {
    "text": "infrastructure um the protocol so the protocol is just called we communicate with a binder driver and most of the",
    "start": "1001560",
    "end": "1007000"
  },
  {
    "text": "time we're essentially sending it I octal the ibinder interface is",
    "start": "1007000",
    "end": "1012279"
  },
  {
    "text": "essentially a simple interface that defines the the the basic me mechanisms of every binder object finder objects",
    "start": "1012279",
    "end": "1019399"
  },
  {
    "text": "are those things that we actually want to use those are the things that are represent the services we want to interact with so as you will as you will",
    "start": "1019399",
    "end": "1025880"
  },
  {
    "text": "see later on these ibinder objects have capabilities like for example telling us whether they're alive or we can go and",
    "start": "1025880",
    "end": "1032160"
  },
  {
    "text": "subscribe to be notified when they die so this is expressed using the default ibinder interface aidl is I mentioned a",
    "start": "1032160",
    "end": "1039678"
  },
  {
    "text": "language that enables us to Define business operations that go on top of the ibinder interface and essentially",
    "start": "1039679",
    "end": "1046600"
  },
  {
    "text": "that's what you know is what what our clients are ask without the you know the the business operations was the point of",
    "start": "1046600",
    "end": "1051840"
  },
  {
    "text": "using generic ibinder objects um the actual binder object that is a basic",
    "start": "1051840",
    "end": "1057320"
  },
  {
    "text": "implementation of that ibinder interface it provides a very basic infrastructure and that's what we end up extending from",
    "start": "1057320",
    "end": "1064679"
  },
  {
    "text": "when it comes time to build building our own actual binder Services binder tokens",
    "start": "1064679",
    "end": "1070520"
  },
  {
    "text": "are basically think of them as handles think or think of them as pointers but they happen to be agnostic to the",
    "start": "1070520",
    "end": "1076640"
  },
  {
    "text": "process they're in so essentially a bind their object can be referenced via a token or a handle that is unique across",
    "start": "1076640",
    "end": "1084320"
  },
  {
    "text": "an entire operating system so essentially it's a reference that that ends up being unique and can be passed",
    "start": "1084320",
    "end": "1089760"
  },
  {
    "text": "around binder service that's what we are actually consuming that's what we're interacting with so for example location",
    "start": "1089760",
    "end": "1095840"
  },
  {
    "text": "you know a service is is a binder service or activity manager service or power manager service vibrator service",
    "start": "1095840",
    "end": "1101880"
  },
  {
    "text": "you know surface flinger sensor service and so on and so on these are all services that essentially Implement binder um binder client that's we use to",
    "start": "1101880",
    "end": "1109400"
  },
  {
    "start": "1107000",
    "end": "1130000"
  },
  {
    "text": "essentially interact with the service um the binder transaction that's essentially exchange of if you will data",
    "start": "1109400",
    "end": "1116760"
  },
  {
    "text": "between the client and service through the binder driver and the transactions are as you will see fairly simple uh",
    "start": "1116760",
    "end": "1123360"
  },
  {
    "text": "they involve just copy copying data back and forth a lot of a lot of what happens then is handled by the framework um the",
    "start": "1123360",
    "end": "1131000"
  },
  {
    "start": "1130000",
    "end": "1208000"
  },
  {
    "text": "binder parcel is basically a unit of data that that that essentially gets sent across process boundaries um so",
    "start": "1131000",
    "end": "1138280"
  },
  {
    "text": "when we send a message to the remote service we're actually sending it in form of a parcel so marshalling is a",
    "start": "1138280",
    "end": "1144320"
  },
  {
    "text": "mechanism of converting our Rich data types I request that contains for example objects or data types that mean",
    "start": "1144320",
    "end": "1151799"
  },
  {
    "text": "have meaning to us into a parcel our marshalling is the reverse of that taking a parcel that was received",
    "start": "1151799",
    "end": "1158360"
  },
  {
    "text": "through a binder driver essentially and AR marshalling converting it back into Rich say Java or C++ or even C data",
    "start": "1158360",
    "end": "1165679"
  },
  {
    "text": "types into something that we can work with boxies and stubs are the things that get autogenerated and essentially",
    "start": "1165679",
    "end": "1172799"
  },
  {
    "text": "are the are the things that enable automatic marshalling and unmarshalling if you are if you happen to be coding",
    "start": "1172799",
    "end": "1179159"
  },
  {
    "text": "things in Java in which case they are truly autogenerated if you happen to be coding them in C++ then you have to go",
    "start": "1179159",
    "end": "1184760"
  },
  {
    "text": "and write your own proxies and stuffs and finally the context manager that is the thing that enables discovery of",
    "start": "1184760",
    "end": "1191320"
  },
  {
    "text": "binder Services because you know having this remote Pro process somewhere with these binder services available in it is",
    "start": "1191320",
    "end": "1197600"
  },
  {
    "text": "useless unless we get a reference to them to begin with and in Android that context manager is called service",
    "start": "1197600",
    "end": "1204120"
  },
  {
    "text": "manager and that's a Damon that most of you have probably seen if you've done PS so let's take a look at kind of how this",
    "start": "1204120",
    "end": "1210320"
  },
  {
    "text": "communication works so at the end you know what we ultimately want as the",
    "start": "1210320",
    "end": "1215440"
  },
  {
    "text": "users of bind there is to have a client talking to a service they they just happen to be in different processes",
    "start": "1215440",
    "end": "1220600"
  },
  {
    "text": "that's kind of what we are after but in reality we cannot just go into another process and essentially V operations",
    "start": "1220600",
    "end": "1226240"
  },
  {
    "text": "another process because that would violate the process isolation so we have to go through something that has ability to interact with what processes and",
    "start": "1226240",
    "end": "1232559"
  },
  {
    "text": "that's the kernel so that's where the binder driver comes into play so how it typically works is that a service that",
    "start": "1232559",
    "end": "1238200"
  },
  {
    "text": "wants to basically be U consumed by clients will come to the driver and register by essentially spawning off",
    "start": "1238200",
    "end": "1245880"
  },
  {
    "text": "threads that will block on the binder driver in these blocking I octal calls waiting for callbacks to do work so that",
    "start": "1245880",
    "end": "1253600"
  },
  {
    "text": "happens preemptively so when a client wants to actually have service do some work on its behalf have it sends a",
    "start": "1253600",
    "end": "1259520"
  },
  {
    "text": "message to the binder driver the driver then finds the appropriate essentially",
    "start": "1259520",
    "end": "1264559"
  },
  {
    "text": "service to to service that message the Ser one of those service threads unblocks handles that request and",
    "start": "1264559",
    "end": "1270480"
  },
  {
    "text": "essentially sends the the the response back to the binder driver via another one of those threads that again ends up",
    "start": "1270480",
    "end": "1276760"
  },
  {
    "text": "blocking once the response is sent the client at this point gets the message what's interesting is that to client",
    "start": "1276760",
    "end": "1282960"
  },
  {
    "text": "this feels like an as sorry a very synchronous Communication channel and the services you will see even though he",
    "start": "1282960",
    "end": "1288840"
  },
  {
    "text": "has these threads doesn't have to worry about him all of that low-level thread management or thread pooling is",
    "start": "1288840",
    "end": "1294360"
  },
  {
    "text": "automatically handled by the the the the I should say framework I'm not going to say the driver so how does the how how",
    "start": "1294360",
    "end": "1303080"
  },
  {
    "text": "does this actually happen is that most of the time um what we see happening is these I octal calls for read write calls",
    "start": "1303080",
    "end": "1310559"
  },
  {
    "text": "where basically a service will go to the binder driver and say hey I have some data for you of certain size and then I",
    "start": "1310559",
    "end": "1318159"
  },
  {
    "text": "have I I want to get some data back of up to certain size or I should say you know it'll basically get initiate this",
    "start": "1318159",
    "end": "1325600"
  },
  {
    "text": "this structure into which later on the the the the data will be populated so",
    "start": "1325600",
    "end": "1330640"
  },
  {
    "text": "basically what happens is the service G comes to the buy the driver for the first time the right buffer is empty",
    "start": "1330640",
    "end": "1335880"
  },
  {
    "text": "just going to sit there the the the and then the service then blocks when the client comes later on and sends a",
    "start": "1335880",
    "end": "1341880"
  },
  {
    "text": "request to the service the binder driver takes the request copies it into basically the buffer that the service is",
    "start": "1341880",
    "end": "1348559"
  },
  {
    "text": "going to then read from and then tells how much data is in the buffer and then at that point unblocks the service now",
    "start": "1348559",
    "end": "1354840"
  },
  {
    "text": "now the service has some data when it produces result it goes and basically takes the result writes it into again",
    "start": "1354840",
    "end": "1361159"
  },
  {
    "text": "one of these buffers into this right buffer and basically gives go goes and gives it back to the to the the binder",
    "start": "1361159",
    "end": "1367480"
  },
  {
    "text": "driver and so essentially this happens on both the service side and the client side we're just exchanging these buffers",
    "start": "1367480",
    "end": "1373919"
  },
  {
    "text": "back and forth what's in the buffers is something we'll talk about in a moment but basically it's the are the Parcels",
    "start": "1373919",
    "end": "1379799"
  },
  {
    "text": "Plus the handles to who we want to talk to now um there's in these buffers I",
    "start": "1379799",
    "end": "1385880"
  },
  {
    "text": "guess I should also say the there's these bookkeeping commands that basically tells us like for example is this service still alive is this you",
    "start": "1385880",
    "end": "1392440"
  },
  {
    "text": "know if you wanted to Ping something and whatnot we'll talk again about this in a little bit I have to speed up because we're going to run out of time um",
    "start": "1392440",
    "end": "1399440"
  },
  {
    "text": "however one thing I wanted to mention is that most of the time all of this communication that I just mentioned is I octal it's very low level we actually",
    "start": "1399440",
    "end": "1406919"
  },
  {
    "text": "don't want to know anything about it as the consumers of this framework we just want to basically send messages back and",
    "start": "1406919",
    "end": "1412240"
  },
  {
    "text": "forth and and act on messages so that's where the proxies and stuff's come into play so the proxy's job is to basically",
    "start": "1412240",
    "end": "1419640"
  },
  {
    "text": "take this very high level say Java or C++ request you know receive it and then",
    "start": "1419640",
    "end": "1426039"
  },
  {
    "text": "convert it into one of those parcels and then submit an i octal transaction to the binder driver and block on the other",
    "start": "1426039",
    "end": "1433520"
  },
  {
    "text": "hand the Stop's job is to basically listen if you will um to the binder",
    "start": "1433520",
    "end": "1438880"
  },
  {
    "text": "driver call back and then upon receiving the call back Dem marshal or ar Marshall",
    "start": "1438880",
    "end": "1444520"
  },
  {
    "text": "that parcel into something that the service can understand and then call the appropriate call back method in the",
    "start": "1444520",
    "end": "1449880"
  },
  {
    "text": "service the service is coded so that it only knows about these high level method calls for example you know to do",
    "start": "1449880",
    "end": "1456480"
  },
  {
    "text": "something that involves Rich job objects it doesn't know anything about the infrastructure except for the fact that",
    "start": "1456480",
    "end": "1462400"
  },
  {
    "text": "the service has to extend from this binder object and implement this binder interface the rest of the implementation",
    "start": "1462400",
    "end": "1469200"
  },
  {
    "text": "of the service is in no way you know tied to binder framework it doesn't care about it the only other thing the",
    "start": "1469200",
    "end": "1475120"
  },
  {
    "text": "semantical thing that affects it is threading because every time a service gets called it the the invocation of the",
    "start": "1475120",
    "end": "1481520"
  },
  {
    "text": "service method can happen in any one of these threads that was basically preemptively you know over here U tied",
    "start": "1481520",
    "end": "1488720"
  },
  {
    "text": "to the binder driver so except for the multi-threaded behavior and the fact that you have to extend from a particular class the rest of the the",
    "start": "1488720",
    "end": "1495919"
  },
  {
    "text": "infrastructure is completely seamless now one more thing I want to mention before we actually two more things",
    "start": "1495919",
    "end": "1501279"
  },
  {
    "text": "before we move off of this slide one is um to clients are you guys you guys you",
    "start": "1501279",
    "end": "1506520"
  },
  {
    "text": "know let's say you guys as application developers not as system integrators um even this is way too much knowledge for",
    "start": "1506520",
    "end": "1513360"
  },
  {
    "text": "you you guys as a application developers don't even want to know anything about binder about proxies about stops you",
    "start": "1513360",
    "end": "1519440"
  },
  {
    "text": "just want to basically consume some service so what Android does for example for system Services let's say locations",
    "start": "1519440",
    "end": "1526440"
  },
  {
    "text": "manager service activity manager service power manager service and you name it there's like 60 of them plus what they",
    "start": "1526440",
    "end": "1533000"
  },
  {
    "text": "do is they provide these so-called managers so these things a manager's job is basically to be a proxy to a proxy if",
    "start": "1533000",
    "end": "1540360"
  },
  {
    "text": "you will so manager facilitates the discovery of the service you want to talk to and he hides the binder",
    "start": "1540360",
    "end": "1546840"
  },
  {
    "text": "interaction away from you so for example when you're talking to a location manager you are actually talking to a",
    "start": "1546840",
    "end": "1553279"
  },
  {
    "text": "local Java object which underneath the hood if you were to open it up and take a look at it will convert your method",
    "start": "1553279",
    "end": "1560399"
  },
  {
    "text": "calls into remote binder method calls via proxy and the reason why the manager",
    "start": "1560399",
    "end": "1566399"
  },
  {
    "text": "there is to handle certain things like you know exceptions like for example let's say you get a remoting exception",
    "start": "1566399",
    "end": "1571720"
  },
  {
    "text": "if the remote thing dies as well as to handle lookup mechanisms as well as to handle some threading issues for example",
    "start": "1571720",
    "end": "1577960"
  },
  {
    "text": "if you're getting asynchronous callbacks the manager's job is to take those asynchronous callbacks and convert them",
    "start": "1577960",
    "end": "1583440"
  },
  {
    "text": "into something you can handle on the UI thread otherwise you have these thread you know thre issues potentially so for",
    "start": "1583440",
    "end": "1591120"
  },
  {
    "text": "those of you who've done Android devel application development you've been using binder all along you just haven't necessarily noticed them because you've",
    "start": "1591120",
    "end": "1597360"
  },
  {
    "text": "most likely just been using these managers the last part is the Discovery how do you actually find the thing you",
    "start": "1597360",
    "end": "1604039"
  },
  {
    "start": "1599000",
    "end": "1725000"
  },
  {
    "text": "want to talk to you know to begin with well when it comes to Androids built-in Services basically what we need is this",
    "start": "1604039",
    "end": "1611159"
  },
  {
    "text": "thing called context manager so if any of you have done you know PS on an Android you know ad shell you would have",
    "start": "1611159",
    "end": "1617080"
  },
  {
    "text": "seen something called service manager manager that is the context manager another name for it so what the context",
    "start": "1617080",
    "end": "1622480"
  },
  {
    "text": "manager does very early it's actually one of those Damons that gets launched very early by in it um it goes to the",
    "start": "1622480",
    "end": "1629360"
  },
  {
    "text": "binder driver and says hey binder driver I want to be your context manager and the binder driver only allows one",
    "start": "1629360",
    "end": "1635440"
  },
  {
    "text": "context manager at a time to be registered with it then what it does it submits essentially creates a you know",
    "start": "1635440",
    "end": "1641919"
  },
  {
    "text": "bunch of threads and waits on the binder driver it itself is a service a context",
    "start": "1641919",
    "end": "1647480"
  },
  {
    "text": "manager a service manager is a service a binder service so what is its job its",
    "start": "1647480",
    "end": "1654200"
  },
  {
    "text": "job is basically to sit there and allow other services to register themselves",
    "start": "1654200",
    "end": "1660360"
  },
  {
    "text": "with the context manager so for example when you have a location service location service will be registered with",
    "start": "1660360",
    "end": "1666679"
  },
  {
    "text": "the context manager as the location quote quote unquote location service so when a client needs to find location",
    "start": "1666679",
    "end": "1673640"
  },
  {
    "text": "service all it needs to do is ask the context manager so how does that work well basic basically the service at some",
    "start": "1673640",
    "end": "1679799"
  },
  {
    "text": "point will register with the binder driver the service will then use a service manager or context manager proxy",
    "start": "1679799",
    "end": "1687640"
  },
  {
    "text": "because now the service is the client to the context manager then the service this proxy is going to go to buy the",
    "start": "1687640",
    "end": "1692960"
  },
  {
    "text": "driver figure out where the context manager is get a handle to the context manager and then submit a request to",
    "start": "1692960",
    "end": "1698880"
  },
  {
    "text": "context manager and say Hey I want to register myself with you on the other side when the client wants to look up a",
    "start": "1698880",
    "end": "1705440"
  },
  {
    "text": "service to talk to the client submits a request request again via another one of these service manager proxies submits a",
    "start": "1705440",
    "end": "1712159"
  },
  {
    "text": "request and via the request basically gets a reference to the service manager once he has a service manager it asks",
    "start": "1712159",
    "end": "1718080"
  },
  {
    "text": "where's the location service for example and it gets a reference back to it and now the client can go and use it the way",
    "start": "1718080",
    "end": "1724120"
  },
  {
    "text": "we talked about before so if you were to do ad Shell service list you will see the list of a bunch of these services so",
    "start": "1724120",
    "end": "1730799"
  },
  {
    "start": "1725000",
    "end": "1747000"
  },
  {
    "text": "this is essentially for example the name of a service so all these services are registered by simple string based names",
    "start": "1730799",
    "end": "1737080"
  },
  {
    "text": "and then this is the you know aidl that it implements basically or the name of the aidl that implements say for example",
    "start": "1737080",
    "end": "1742360"
  },
  {
    "text": "for location but there's you know 70 plus Services you will find here um this",
    "start": "1742360",
    "end": "1748200"
  },
  {
    "text": "diagram kind of shows you another another way of picturing all of this communication um let me see if I can",
    "start": "1748200",
    "end": "1754080"
  },
  {
    "text": "quickly take you through it it's somewhat redundant but I don't know if it's probably somewhat easier to to grasp so let's say for example you had a",
    "start": "1754080",
    "end": "1760960"
  },
  {
    "text": "service that you wanted to expose to clients how would that work um and let's",
    "start": "1760960",
    "end": "1766000"
  },
  {
    "text": "picture that service being part of the service manager right which is another Dam that we know exist in Android so the very beginning",
    "start": "1766000",
    "end": "1772760"
  },
  {
    "text": "this is kind of starting with a negative you know this service is going to run from a main and it will basically start",
    "start": "1772760",
    "end": "1779000"
  },
  {
    "text": "a pool of threads that will then go to binder so this is Step minus three and",
    "start": "1779000",
    "end": "1785120"
  },
  {
    "text": "essentially block they will just sit there block waiting for requests so they",
    "start": "1785120",
    "end": "1790519"
  },
  {
    "text": "will issue those blocking IAL calls at that point the service will have presumably another thread and that",
    "start": "1790519",
    "end": "1797279"
  },
  {
    "text": "thread will then do a lookup of the service manager which we talked about and it will then register the service",
    "start": "1797279",
    "end": "1802880"
  },
  {
    "text": "with the service manager or context manager again the two names can be used interchangeably so now the client runs",
    "start": "1802880",
    "end": "1809279"
  },
  {
    "text": "the client wants to use the service right how the client goes to service manager I I didn't put in this diagram",
    "start": "1809279",
    "end": "1815000"
  },
  {
    "text": "just because it's again it would involve a lot more errors but basically the client ultimately over here wants to",
    "start": "1815000",
    "end": "1821880"
  },
  {
    "text": "invoke an operation on the service that's what he wants to do invoke some service for some method f and for you",
    "start": "1821880",
    "end": "1829120"
  },
  {
    "text": "know pass some data let's call it some bar I don't know what that is um so this",
    "start": "1829120",
    "end": "1834159"
  },
  {
    "text": "client will basically invoke what it what it thinks you know is a a service",
    "start": "1834159",
    "end": "1839399"
  },
  {
    "text": "reference and Method Fu for some bar but what a client doesn't know or care this",
    "start": "1839399",
    "end": "1844600"
  },
  {
    "text": "is actually what's important is that it's actually talking to a proxy not a remote object right client actually has",
    "start": "1844600",
    "end": "1849840"
  },
  {
    "text": "a reference to a local object that proxy will convert their request from you know",
    "start": "1849840",
    "end": "1856039"
  },
  {
    "text": "some food that you know essentially method called F to a transaction called Fu whoops and into that transaction it",
    "start": "1856039",
    "end": "1862760"
  },
  {
    "text": "will along with the transaction will basically invoke the transaction with these Parcels these Parcels will be",
    "start": "1862760",
    "end": "1868279"
  },
  {
    "text": "autocreated by the proxy and into the parcels we'll take the sbar so we'll",
    "start": "1868279",
    "end": "1873519"
  },
  {
    "text": "take the sumbar and it will basically shove it inside of this data parcel and then we'll invoke some transaction that",
    "start": "1873519",
    "end": "1879919"
  },
  {
    "text": "transaction goes via lip binder through a blocking I octal call to the driver over here to the binder driver the",
    "start": "1879919",
    "end": "1887399"
  },
  {
    "text": "binder driver now realizes that this transaction is referencing essentially the service because the service",
    "start": "1887399",
    "end": "1893039"
  },
  {
    "text": "previously registered itself with it and basically it wakes up one of those threads that was previously blocked on",
    "start": "1893039",
    "end": "1898960"
  },
  {
    "text": "the binder from the service side that thread takes the parcel that that was",
    "start": "1898960",
    "end": "1904000"
  },
  {
    "text": "basically received now through the binder driver UNM Marshals it or I should say gives it to the stop the stop",
    "start": "1904000",
    "end": "1909600"
  },
  {
    "text": "UNM Marshals it figures out that the client wants to invoke a transaction called you know Fu and it actually",
    "start": "1909600",
    "end": "1915840"
  },
  {
    "text": "invokes a method on the service call Fu with that same bar so the this bar you",
    "start": "1915840",
    "end": "1922159"
  },
  {
    "text": "know I call it some bar basically got recreated on in another process it went",
    "start": "1922159",
    "end": "1928360"
  },
  {
    "text": "through a marshalling stage then into essentially copy gets copied across the process boundaries by Vi the binder",
    "start": "1928360",
    "end": "1934679"
  },
  {
    "text": "driver and then on the other side gets recreated into its original state again the marshalling is built in",
    "start": "1934679",
    "end": "1941320"
  },
  {
    "text": "for a lot of the common data types but you can create and roll out your own marshalling and marshalling strategies",
    "start": "1941320",
    "end": "1947440"
  },
  {
    "text": "finally the service now invokes the operation the client requested which was the say the full operation and produces",
    "start": "1947440",
    "end": "1953639"
  },
  {
    "text": "some result the client re or sorry should say the service returns that result that result now goes back to the",
    "start": "1953639",
    "end": "1960840"
  },
  {
    "text": "stub and while the stub gets REM marshaled into now the reply parcel so",
    "start": "1960840",
    "end": "1966480"
  },
  {
    "text": "gets converted from a some result which can be say some Java data type into essentially a series of btes and then",
    "start": "1966480",
    "end": "1973639"
  },
  {
    "text": "via lip binder submits get submitted back to the binder driver right this is again another another one of those",
    "start": "1973639",
    "end": "1979960"
  },
  {
    "text": "blocking calls on the other side we unblocked because the client had been waiting all this time the proxy receives",
    "start": "1979960",
    "end": "1986760"
  },
  {
    "text": "the summar the the reply parcel the proxy the proxy unmarshal the reply",
    "start": "1986760",
    "end": "1992279"
  },
  {
    "text": "object from the reply parcel and it gives back that reply object or some result back to the client so the same",
    "start": "1992279",
    "end": "1999360"
  },
  {
    "text": "some result that got created here and return is the very same object but now",
    "start": "1999360",
    "end": "2005080"
  },
  {
    "text": "reconstructed in another process right that's roughly how things work now this",
    "start": "2005080",
    "end": "2011559"
  },
  {
    "start": "2010000",
    "end": "2099000"
  },
  {
    "text": "is kind of a diagram I showed a couple of years ago actually on when I talked about services in Android this is just",
    "start": "2011559",
    "end": "2016919"
  },
  {
    "text": "it gives you an idea of what let's say location stack on android looks like I'm not going to go over the entire detail",
    "start": "2016919",
    "end": "2022720"
  },
  {
    "text": "but I just want to point out let's say you have wanted to consume a location service right what you would do is you",
    "start": "2022720",
    "end": "2027960"
  },
  {
    "text": "would ask the system for a system service called location what you would get is actually a location manager so",
    "start": "2027960",
    "end": "2034000"
  },
  {
    "text": "what a location manager would implicitly do is do a call to the service manager",
    "start": "2034000",
    "end": "2039159"
  },
  {
    "text": "which is down here to basically figure out where is the location service where is the location service location service",
    "start": "2039159",
    "end": "2046399"
  },
  {
    "text": "was created earlier on inside of the system server and got registered with",
    "start": "2046399",
    "end": "2052520"
  },
  {
    "text": "the service manager via this term called location so here when the client",
    "start": "2052520",
    "end": "2059200"
  },
  {
    "text": "actually says I want to say get last known cordinates what it's doing is it's talking to this but in reality this is",
    "start": "2059200",
    "end": "2066000"
  },
  {
    "text": "first looking up the service and it is then going through a proxy via the binder driver into this stub and via the",
    "start": "2066000",
    "end": "2075240"
  },
  {
    "text": "stub basically into a service and then from the service he goes and talks to these location providers which themselves are services and they talk to",
    "start": "2075240",
    "end": "2081960"
  },
  {
    "text": "HS and drivers and whatnot that's besides the point but basically the binder is key to this jumping from an",
    "start": "2081960",
    "end": "2088638"
  },
  {
    "text": "application space to essentially this middleware space which itself is just another",
    "start": "2088639",
    "end": "2095040"
  },
  {
    "text": "process again I wish I had more time to go over more details but you know I have to speed up so what is aidl so aidl",
    "start": "2095040",
    "end": "2102720"
  },
  {
    "start": "2099000",
    "end": "2345000"
  },
  {
    "text": "basically is the language for describing the services to their clients it looks and feels like Java it's not Java it's",
    "start": "2102720",
    "end": "2108480"
  },
  {
    "text": "similar though um this is an example of an aidl basically um you know service",
    "start": "2108480",
    "end": "2114480"
  },
  {
    "text": "call it some food service generally we would call this save this file into a aidl file with a name that matches the",
    "start": "2114480",
    "end": "2121400"
  },
  {
    "text": "name of the service you will notice that this feels like namespace because it is it's same like Java notice we have this",
    "start": "2121400",
    "end": "2128000"
  },
  {
    "text": "use of imports and now our we Define our interface in this interface we just Define the business methods that the",
    "start": "2128000",
    "end": "2134480"
  },
  {
    "text": "service is supposed to implement and not supposed to has to implement and that the client has to you know can consume",
    "start": "2134480",
    "end": "2140680"
  },
  {
    "text": "these methods are just prototypes um they look and feel like Java so you you define the return type then you define",
    "start": "2140680",
    "end": "2146800"
  },
  {
    "text": "the name method name and you define one or more or zero or more parameters what's different is that unlike Java you",
    "start": "2146800",
    "end": "2153240"
  },
  {
    "text": "can also specify this essentially um flag that determines which way is the",
    "start": "2153240",
    "end": "2159040"
  },
  {
    "text": "data copied for example if you say in let's say you're deleting some something",
    "start": "2159040",
    "end": "2164280"
  },
  {
    "text": "of type bar that means that the data is copied from the client to the service but if the service were to make some",
    "start": "2164280",
    "end": "2169800"
  },
  {
    "text": "changes to Bar let's say bar was mutable those changes would not be visible on the client side um versus over here",
    "start": "2169800",
    "end": "2176880"
  },
  {
    "text": "let's say you had this object bar you wanted to have the service save and maybe the service updates the ID of bar",
    "start": "2176880",
    "end": "2182400"
  },
  {
    "text": "when it gets saved whatever bar may be that basically you know now in out",
    "start": "2182400",
    "end": "2187640"
  },
  {
    "text": "excuse me means the data gets copied both ways so um what happens when you",
    "start": "2187640",
    "end": "2192680"
  },
  {
    "text": "create a file like this um Eclipse if you're doing this in eclipse or if using the Android build system will",
    "start": "2192680",
    "end": "2198440"
  },
  {
    "text": "automatically employ this tool called aidl which is part of the SDK which will generate in the Gen folder this",
    "start": "2198440",
    "end": "2206200"
  },
  {
    "text": "essentially IU service which is the same as the name of the service that of the file we created which implements",
    "start": "2206200",
    "end": "2212640"
  },
  {
    "text": "essentially this interface or extends this ey interface and inside of it defines the stub and then the proxy the",
    "start": "2212640",
    "end": "2220400"
  },
  {
    "text": "stub basically has this on transact method that is how the service is going to receive transactions and the proxy on",
    "start": "2220400",
    "end": "2227160"
  },
  {
    "text": "the other hand has the actual methods the clients are going to use and notice that what those methods do is they",
    "start": "2227160",
    "end": "2233359"
  },
  {
    "text": "create these Parcels convert somehow you know our data types for example this bar",
    "start": "2233359",
    "end": "2238560"
  },
  {
    "text": "into a parcel so somehow they ask the bar to write itself into a parcel and then the the stop or sorry the proxy",
    "start": "2238560",
    "end": "2244520"
  },
  {
    "text": "submits these transactions you know there yes there's more that you know we can go much deeper than this but that's basically underneath the hood what's",
    "start": "2244520",
    "end": "2250599"
  },
  {
    "text": "happening um and then here's the definition of all the methods now written in Java um if you were to do",
    "start": "2250599",
    "end": "2256720"
  },
  {
    "text": "this in C++ you you end up having to basically write a lot of this code yourself so I'm not going to go into",
    "start": "2256720",
    "end": "2261920"
  },
  {
    "text": "details of how that will be done right now so aidl out of the box or binder out of the box framework supports all of",
    "start": "2261920",
    "end": "2268680"
  },
  {
    "text": "these data types especially in the Java land so you know all the Primitives including perimeter arrays character",
    "start": "2268680",
    "end": "2274680"
  },
  {
    "text": "sequences and strings of course F the scriptors which I said get copied as a file descriptor um serializable objects",
    "start": "2274680",
    "end": "2281920"
  },
  {
    "text": "which can get converted to bytes but Java serialization is not the most optim optimal thing in the world and should be",
    "start": "2281920",
    "end": "2287800"
  },
  {
    "text": "avoided uh maps and lists so basically if you have you know objects that are",
    "start": "2287800",
    "end": "2293079"
  },
  {
    "text": "structured into Maps or lists that will be automatically Marshal and unmarshal bundles which are just specialized",
    "start": "2293079",
    "end": "2299319"
  },
  {
    "text": "versions of maps um object arrays sparse arrays and you know sparse booing arrays these are just more specialized and then",
    "start": "2299319",
    "end": "2306280"
  },
  {
    "text": "ibinder so these are the interesting ones so anything you pass to the other side as ibinder gets passed as a",
    "start": "2306280",
    "end": "2312520"
  },
  {
    "text": "reference and not as a copy so basically everything else gets copied including",
    "start": "2312520",
    "end": "2317880"
  },
  {
    "text": "the file scriptor gets copied but ibinder essentially gets passed as a reference which is how the client can",
    "start": "2317880",
    "end": "2323960"
  },
  {
    "text": "for example submit a listener to the service so the service can notify the client of changes of some State via",
    "start": "2323960",
    "end": "2330720"
  },
  {
    "text": "callbacks so in that case the roles change the client when it sends something that's of type ibinder it's",
    "start": "2330720",
    "end": "2336680"
  },
  {
    "text": "essentially becoming a service so the client becomes a service and the service that invokes that call back",
    "start": "2336680",
    "end": "2342240"
  },
  {
    "text": "functionality becomes the client to the original client so however what if you had your own data type something that",
    "start": "2342240",
    "end": "2348760"
  },
  {
    "start": "2345000",
    "end": "2405000"
  },
  {
    "text": "you know you could not basically you know doesn't match one of these so what you would do is you could then create",
    "start": "2348760",
    "end": "2354119"
  },
  {
    "text": "your own custom data class you would just in that class may have you know internally data structures of whatever",
    "start": "2354119",
    "end": "2360079"
  },
  {
    "text": "so you can have whatever you want it in there but the key to making it work with binder is to implement what's known as",
    "start": "2360079",
    "end": "2365480"
  },
  {
    "text": "parcelable parcel is in interface that requires you to basically create a strategy for writing a fixed strategy",
    "start": "2365480",
    "end": "2372480"
  },
  {
    "text": "for writing basically your object into a parcel right and that means boil it down",
    "start": "2372480",
    "end": "2378480"
  },
  {
    "text": "to The Primitives that are supported as well as a mechanism for converting a parcel back into that object so for",
    "start": "2378480",
    "end": "2385680"
  },
  {
    "text": "example if you're sending bar to the service the proxy will call this method to convert your bar into a parcel and",
    "start": "2385680",
    "end": "2393240"
  },
  {
    "text": "when the the service receives this parcel he will conect the stub will call this method to convert that parcel back",
    "start": "2393240",
    "end": "2399319"
  },
  {
    "text": "into the original bar so as long as the the the the two mechanisms match that will work out of the box um I'm not",
    "start": "2399319",
    "end": "2406359"
  },
  {
    "start": "2405000",
    "end": "2417000"
  },
  {
    "text": "going to go into more details than that you can basically you know primi you know primitive values don't require for",
    "start": "2406359",
    "end": "2412200"
  },
  {
    "text": "example directional flag and what not comments get copied and so on and so on that's beside the point you can read it on your own let me just mention this",
    "start": "2412200",
    "end": "2419079"
  },
  {
    "start": "2417000",
    "end": "2556000"
  },
  {
    "text": "briefly um binder basically is um um you know supports these references like I",
    "start": "2419079",
    "end": "2425480"
  },
  {
    "text": "said that that can cross object boundaries and somehow remain unique this is key because for example if a",
    "start": "2425480",
    "end": "2430680"
  },
  {
    "text": "service were to register itself with a service manager let's say a location service registers itself with the",
    "start": "2430680",
    "end": "2436640"
  },
  {
    "text": "service manager what and now the client asks for that handle well that handle",
    "start": "2436640",
    "end": "2441800"
  },
  {
    "text": "needs to work in the client just like it did in the service manager right so these candles need to be able to be",
    "start": "2441800",
    "end": "2447240"
  },
  {
    "text": "shared so what happens is that when you're creating these binder objects the colonel that binder doesn't know",
    "start": "2447240",
    "end": "2453359"
  },
  {
    "text": "anything the colonel binder driver doesn't know anything about him because you know just local binder object but",
    "start": "2453359",
    "end": "2459200"
  },
  {
    "text": "whenever you send a binder object across essentially the process boundary I.E",
    "start": "2459200",
    "end": "2465040"
  },
  {
    "text": "through the B kernel driver the kernel driver notices that that's a binder object and re essentially creates an",
    "start": "2465040",
    "end": "2471280"
  },
  {
    "text": "internal mapping that remembers that that object points to your process and",
    "start": "2471280",
    "end": "2476839"
  },
  {
    "text": "it then creates a handle that it sends to the other side if the other side ever references that handle actually the",
    "start": "2476839",
    "end": "2483079"
  },
  {
    "text": "other side now gets essentially that pseudo handle but the other side you need a local binder object you need a",
    "start": "2483079",
    "end": "2488520"
  },
  {
    "text": "local object that represents the remote object so there's a local reference to what is essentially you know your object",
    "start": "2488520",
    "end": "2494960"
  },
  {
    "text": "so that local reference essentially gets some arbitrary you know not arbitrary but some sort of a pointer if you will",
    "start": "2494960",
    "end": "2501319"
  },
  {
    "text": "in your own Lo local memory space but whenever you then later on invoke an",
    "start": "2501319",
    "end": "2506599"
  },
  {
    "text": "operation where you're writing that memory address to the kernel driver I or referencing that essentially the kernel",
    "start": "2506599",
    "end": "2513839"
  },
  {
    "text": "rewrites that local pointer back to that kind of generic pointer if you will or",
    "start": "2513839",
    "end": "2518960"
  },
  {
    "text": "the handle and then Maps it to what actual process is supposed to have that so there's basically state that is",
    "start": "2518960",
    "end": "2526200"
  },
  {
    "text": "inside of the kernel driver that does the mapping of local pointers to these",
    "start": "2526200",
    "end": "2531920"
  },
  {
    "text": "Global if you will pointers and along with that it does reference counting so",
    "start": "2531920",
    "end": "2537440"
  },
  {
    "text": "that it knows how many times a particular object is being used because he knows knows who you know he gave it",
    "start": "2537440",
    "end": "2543200"
  },
  {
    "text": "to so this is key because this way we can discover when something for example dies or if something is no longer needed",
    "start": "2543200",
    "end": "2549200"
  },
  {
    "text": "the colonel driver can automatically tell the service that is no longer needed so for example service can take",
    "start": "2549200",
    "end": "2554520"
  },
  {
    "text": "it out of service so I'm not going to go into more details on that again we're just running out of time um so let me just briefly",
    "start": "2554520",
    "end": "2561800"
  },
  {
    "start": "2556000",
    "end": "2762000"
  },
  {
    "text": "mention that there is an example here that that I invite you to take a look at where basically I have a little",
    "start": "2561800",
    "end": "2567319"
  },
  {
    "text": "application called Fibonacci that has a simple UI that looks like this you punch",
    "start": "2567319",
    "end": "2572839"
  },
  {
    "text": "in some number you select which Fibonacci algorithm you want to use whether it's going to be implement in Java or C and whether it's going to be",
    "start": "2572839",
    "end": "2579359"
  },
  {
    "text": "implemented recursively or or iteratively and you click on this button and that button basically is supposed to",
    "start": "2579359",
    "end": "2585559"
  },
  {
    "text": "return the result of that Fibonacci calculation what's interesting is that the actual implementation of this",
    "start": "2585559",
    "end": "2590960"
  },
  {
    "text": "Fibonacci algorithms it happens inside of this service whereas the UI lives",
    "start": "2590960",
    "end": "2596960"
  },
  {
    "text": "inside of the client right so let me just briefly mention kind of how things work so this is again coming to the",
    "start": "2596960",
    "end": "2604359"
  },
  {
    "text": "application space so if you're writing applications you'll really quickly realize that the services and clients",
    "start": "2604359",
    "end": "2610839"
  },
  {
    "text": "that use binder directly are going to have to depend on a common interface so when you're sh you know forced to deal",
    "start": "2610839",
    "end": "2616880"
  },
  {
    "text": "with shared code one of the ways to deal to to do that in Android what you know essentially so you're not duplicating",
    "start": "2616880",
    "end": "2622200"
  },
  {
    "text": "code is to create a library projects if you don't know what that means you'll look it up but basically what I do here",
    "start": "2622200",
    "end": "2628040"
  },
  {
    "text": "is I unfortunately I don't have the time to go into that it's essentially it's a project that itself is Deployable but it",
    "start": "2628040",
    "end": "2633880"
  },
  {
    "text": "can be referenced by other projects and any artifact of a library projects get incorporated into your project at build",
    "start": "2633880",
    "end": "2640359"
  },
  {
    "text": "time okay so for example let's say I had wanted to define a common interface and common data types right so so these are",
    "start": "2640359",
    "end": "2648000"
  },
  {
    "text": "the types that are referenced by the client and service um what I would do is I would create a common project that would make it a library project and",
    "start": "2648000",
    "end": "2654640"
  },
  {
    "text": "inside of the project I would then Define my aidl interface and I would create a file called I Fibonacci",
    "start": "2654640",
    "end": "2661559"
  },
  {
    "text": "service. aidl inside of it inside of it I would Define the business operations and then basically",
    "start": "2661559",
    "end": "2667640"
  },
  {
    "text": "um you know that will be the first step um unfortunately this uses custom data",
    "start": "2667640",
    "end": "2673160"
  },
  {
    "text": "types so this will actually not generate anything yet until I do something else so I need to define those custom data",
    "start": "2673160",
    "end": "2679440"
  },
  {
    "text": "types so those custom data types in this case I have a object called or class called Fibonacci request whose job is to",
    "start": "2679440",
    "end": "2686440"
  },
  {
    "text": "basically encode the N which is what you want to do Fibonacci on as well as the type of the algorithm you want to use it",
    "start": "2686440",
    "end": "2693400"
  },
  {
    "text": "do it on and in this case that's just a simple enu well because this is a custom data type",
    "start": "2693400",
    "end": "2699720"
  },
  {
    "text": "I can't just put it in a parcel because parcel doesn't know anything about Fibonacci request so in order for this",
    "start": "2699720",
    "end": "2704760"
  },
  {
    "text": "to play well with a framework what I need to do is Implement parcelable so",
    "start": "2704760",
    "end": "2710079"
  },
  {
    "text": "how do I do that I just add implements partial which forces me to basically write this method which given some",
    "start": "2710079",
    "end": "2716960"
  },
  {
    "text": "parcel I can convert my object into that partiel which essentially means I'm just boiling it down to its Primitives notice",
    "start": "2716960",
    "end": "2724040"
  },
  {
    "text": "the enums all I need to do is get its ordinal value and basically I write it as a simple in on the flip side I",
    "start": "2724040",
    "end": "2730960"
  },
  {
    "text": "basically need to recreate this object from a parcel in order to basically deploy it again so I'm not going to go",
    "start": "2730960",
    "end": "2737599"
  },
  {
    "text": "into uh there's basically the the Fibonacci response which is kind of similar I'm not going to go over it it's not important it's basically just has",
    "start": "2737599",
    "end": "2744200"
  },
  {
    "text": "you know two Longs nothing but same same idea so I mean interest some time I'm",
    "start": "2744200",
    "end": "2749440"
  },
  {
    "text": "just going to essentially move forward um so basically when this is got it um",
    "start": "2749440",
    "end": "2756240"
  },
  {
    "text": "when you now Ro created this this aidl file you now want to create a service so how does",
    "start": "2756240",
    "end": "2761559"
  },
  {
    "text": "that work well if this aidl file was well you know written um the tool aidl",
    "start": "2761559",
    "end": "2766920"
  },
  {
    "start": "2762000",
    "end": "2842000"
  },
  {
    "text": "will automatically run by be run by eclipse and generate this stubborn proxy so what you do is you now create a new",
    "start": "2766920",
    "end": "2774599"
  },
  {
    "text": "you know let's say a service project that service project extends the stub by extending the stub you're basically",
    "start": "2774599",
    "end": "2781079"
  },
  {
    "text": "essentially you are a binder object and that forces you to automatically",
    "start": "2781079",
    "end": "2786520"
  },
  {
    "text": "implement M all of those interface methods that the the stub essentially defined so these are the methods that I",
    "start": "2786520",
    "end": "2793400"
  },
  {
    "text": "had like for example you know FIB you know just a bunch of FIB methods these are the business methods it's not",
    "start": "2793400",
    "end": "2798520"
  },
  {
    "text": "important so the implementation of the these as you can see it's rather simple you're just you know in this case as",
    "start": "2798520",
    "end": "2804319"
  },
  {
    "text": "long as you don't care about this part this part up here the rest of this implementation is pure Java and that's",
    "start": "2804319",
    "end": "2811319"
  },
  {
    "text": "one of the key benefits to bind there you don't have some sort of a loop you're not pulling on some file descriptor you're just writing callback",
    "start": "2811319",
    "end": "2818359"
  },
  {
    "text": "methods and what will happen is when a client submits a method an a a thread will be automatically picked from the",
    "start": "2818359",
    "end": "2825040"
  },
  {
    "text": "thread pool and one of those threads will invoke one of these callback methods you just have to essentially do",
    "start": "2825040",
    "end": "2830359"
  },
  {
    "text": "the work and so it makes the service extremely easy to write so of course you have to worry about protecting some",
    "start": "2830359",
    "end": "2836400"
  },
  {
    "text": "shared state if there is any because there could be multiple concurrent requests happening at the same time so",
    "start": "2836400",
    "end": "2842720"
  },
  {
    "text": "in terms of the clients um I should at this part I'm going to skip this has to do with how you expose the service to",
    "start": "2842720",
    "end": "2848520"
  },
  {
    "text": "the clients it really depends on whether you're writing an application or whether you're writing essentially a um um um",
    "start": "2848520",
    "end": "2855160"
  },
  {
    "text": "you know a system service with a system service all you need to do is construct this object that we previously created",
    "start": "2855160",
    "end": "2861240"
  },
  {
    "text": "this thing and you just go and say service manager would you be so kind to remember this but service manager will",
    "start": "2861240",
    "end": "2866960"
  },
  {
    "text": "not do that for user Services be for security reasons and so you end up",
    "start": "2866960",
    "end": "2872079"
  },
  {
    "text": "having to essentially find another way of exposing it which this talks about and I again I'm running going to run out",
    "start": "2872079",
    "end": "2877319"
  },
  {
    "text": "of time so I'm not going to go into details of it I just want to mention for the client part the client basically how",
    "start": "2877319",
    "end": "2883079"
  },
  {
    "start": "2879000",
    "end": "2942000"
  },
  {
    "text": "uses the service so this just talks about the client this is the whole UI you can literally go through all of this and by the way all this code is on UI on",
    "start": "2883079",
    "end": "2889599"
  },
  {
    "text": "on GitHub but the client basically just has a reference to the service by an interface um but in order for the client",
    "start": "2889599",
    "end": "2896240"
  },
  {
    "text": "to connect to it it needs to get somehow the reference to the remote service this is how he gets it as an ibinder object",
    "start": "2896240",
    "end": "2902480"
  },
  {
    "text": "but the client can't use the ibinder object because it's way too generic so what the client needs is to convert that",
    "start": "2902480",
    "end": "2908240"
  },
  {
    "text": "object into a proxy and this is the one line that basically does that for you this is autogenerated code behind the",
    "start": "2908240",
    "end": "2914680"
  },
  {
    "text": "scenes this will generate a proxy and give it to the client and then when the client when it comes time for the client",
    "start": "2914680",
    "end": "2920119"
  },
  {
    "text": "to use it this is basically all it takes um the client says service. FIB that's it it's a submits a",
    "start": "2920119",
    "end": "2928440"
  },
  {
    "text": "request and it gets a response it doesn't know anything about binder at that point the only thing that makes this binder specific is the fact that",
    "start": "2928440",
    "end": "2934640"
  },
  {
    "text": "this can fail with a remote exception that's basically if the service get gets you know killed in the in the mean in",
    "start": "2934640",
    "end": "2941119"
  },
  {
    "text": "the meantime so I'm not going to go into details of that I also want to invite you to take a look at the asynchronous",
    "start": "2941119",
    "end": "2946480"
  },
  {
    "start": "2942000",
    "end": "2999000"
  },
  {
    "text": "binder which in this case basically what's different is that by adding this",
    "start": "2946480",
    "end": "2951760"
  },
  {
    "text": "oneway keyword for example onto your aidl interface what you're saying to the",
    "start": "2951760",
    "end": "2957559"
  },
  {
    "text": "binder framework is that the client should not block for the service to do the work so the client submits a request",
    "start": "2957559",
    "end": "2965079"
  },
  {
    "text": "and goes back to what it was doing so now how does the client get back the the response in this case the client has",
    "start": "2965079",
    "end": "2971640"
  },
  {
    "text": "a listener that sends to the service what happens is this listenary gets passed as a reference and the client",
    "start": "2971640",
    "end": "2977200"
  },
  {
    "text": "gets gets it basically the the data back that way so there's some threading issues that you have to worry about on",
    "start": "2977200",
    "end": "2982880"
  },
  {
    "text": "the client side when you're using listeners because the callbacks happen on binder threads and if you were to try",
    "start": "2982880",
    "end": "2988280"
  },
  {
    "text": "to Mo update the UI from a binder thread you would basically get one of those exceptions so there's you know then you",
    "start": "2988280",
    "end": "2994200"
  },
  {
    "text": "have to use candlers and whatnot that's where for example messenger makes this easy for you so I'm not going to go into",
    "start": "2994200",
    "end": "3000240"
  },
  {
    "start": "2999000",
    "end": "3024000"
  },
  {
    "text": "the details of it because again we're out of time I want to mention for sharing memory binder has a limit as to",
    "start": "3000240",
    "end": "3005640"
  },
  {
    "text": "how much data you can pass back and forth and that limit is one Meg if you want to share memory one way to do it is",
    "start": "3005640",
    "end": "3011359"
  },
  {
    "text": "to use ash so what you do is you basically create an Ashman region of certain size you put your data into that",
    "start": "3011359",
    "end": "3017000"
  },
  {
    "text": "region and then you send the file the script over to that region to the other side if they want to get access to it again I'm not going to go into details",
    "start": "3017000",
    "end": "3023119"
  },
  {
    "text": "you can read it on your own um other limitations bind the has a limit up to 15 concurrent threads on the on in each",
    "start": "3023119",
    "end": "3030640"
  },
  {
    "start": "3024000",
    "end": "3056000"
  },
  {
    "text": "process so that means that you basically can up to 15 things happening through the binder framework for a given process",
    "start": "3030640",
    "end": "3038480"
  },
  {
    "text": "so for example if the service happens to be doing some blocking work right so",
    "start": "3038480",
    "end": "3044119"
  },
  {
    "text": "it's better not to do it in a binder thread but rather spawn its own thread to do that blocking work and allow the",
    "start": "3044119",
    "end": "3049559"
  },
  {
    "text": "binder thread to go back to the pool and service some other requests especially if that was written to be asynchronously",
    "start": "3049559",
    "end": "3055480"
  },
  {
    "text": "asynchronous to begin with in terms of security I'm just going to mention that there can only be one service manager uh",
    "start": "3055480",
    "end": "3062000"
  },
  {
    "start": "3056000",
    "end": "3079000"
  },
  {
    "text": "at any given time for security reasons and that one service manager by default does not allow untrusted services to",
    "start": "3062000",
    "end": "3069359"
  },
  {
    "text": "bind with it which is why when you're writing application Level Services you end up having to go through this kind of",
    "start": "3069359",
    "end": "3075359"
  },
  {
    "text": "roundabout way of binding it this just talks about how this is done and finally I I want to mention that one of the key",
    "start": "3075359",
    "end": "3082240"
  },
  {
    "start": "3079000",
    "end": "3149000"
  },
  {
    "text": "features of binder is that it sends the information about the client to the service on every request which is then",
    "start": "3082240",
    "end": "3088440"
  },
  {
    "text": "used by services to figure out who the clients are and then based on that information figure out whether those",
    "start": "3088440",
    "end": "3094400"
  },
  {
    "text": "clients should be authorized to make access or or essentially invoke those operations so almost all of the applic",
    "start": "3094400",
    "end": "3101400"
  },
  {
    "text": "framework services in Android are enforced this way although like for example let's say vibrate let's say you",
    "start": "3101400",
    "end": "3107799"
  },
  {
    "text": "wanted to vibrate a device well before the vibrate happens the very first thing that happens is it checks for whether",
    "start": "3107799",
    "end": "3114160"
  },
  {
    "text": "the caller has the permission to vibrate the device and the permission isn't granted you get an exception or for",
    "start": "3114160",
    "end": "3121559"
  },
  {
    "text": "example if you're talking to location service if you don't have the location to access F location sorry if you don't",
    "start": "3121559",
    "end": "3127119"
  },
  {
    "text": "have permission to access F location you get an exception how does this work well underneath the hood we just ask binder",
    "start": "3127119",
    "end": "3133880"
  },
  {
    "text": "who are you you're talking to us once we know who you are by your uid we can go to figure out which application you are",
    "start": "3133880",
    "end": "3139720"
  },
  {
    "text": "once we know which application you are we can ask the package manager which permissions have you have been granted to you so it's a it's a it's a mechanism",
    "start": "3139720",
    "end": "3146599"
  },
  {
    "text": "that basically gets used for almost all permission enforcement on Android um the rest of the the actually only two more",
    "start": "3146599",
    "end": "3151920"
  },
  {
    "start": "3149000",
    "end": "3229000"
  },
  {
    "text": "slides I think we're done um one other feature of binder is this death notification which is very important so",
    "start": "3151920",
    "end": "3157760"
  },
  {
    "text": "for example let's say you go and ask uh location service to get you updates every time location changes and then you",
    "start": "3157760",
    "end": "3164319"
  },
  {
    "text": "die because you get low memory killed or you have some something happens in your process and you forget to unregister",
    "start": "3164319",
    "end": "3170000"
  },
  {
    "text": "well guess what we don't want to have the GPS be you know pulling and sending these updates to nobody right or if you",
    "start": "3170000",
    "end": "3176079"
  },
  {
    "text": "ask for wake clock and you never return it and you die we don't want this wake clock to keep the device awake so what",
    "start": "3176079",
    "end": "3181880"
  },
  {
    "text": "happens is these Services basically track the clients basically through binder and",
    "start": "3181880",
    "end": "3188680"
  },
  {
    "text": "they get notified when the clients die and they automatically do cleanup on the",
    "start": "3188680",
    "end": "3193880"
  },
  {
    "text": "client side when that is detected there's these so-called you'll see you can link to death of any binder object",
    "start": "3193880",
    "end": "3201640"
  },
  {
    "text": "and then once you basically get notified as a death recipient you can for example example you know remove you know that",
    "start": "3201640",
    "end": "3209079"
  },
  {
    "text": "object from for example you know being updated or something else like you know you can shut down whatever you were doing on the on behalf of that object",
    "start": "3209079",
    "end": "3215760"
  },
  {
    "text": "it's actually very key to how Android manages resources had it not been for this we'd be really hard for Android to",
    "start": "3215760",
    "end": "3221799"
  },
  {
    "text": "basically avoid these sort sort of you know essentially bad applications you",
    "start": "3221799",
    "end": "3227240"
  },
  {
    "text": "know creating denial service things and then finally reporting binder has a whole you know through the Pro File",
    "start": "3227240",
    "end": "3233520"
  },
  {
    "start": "3229000",
    "end": "3243000"
  },
  {
    "text": "system uh or through the through the debug file system basically reports on these transactions which I wish I had",
    "start": "3233520",
    "end": "3239079"
  },
  {
    "text": "time to show you but you can kind of try it on your on your own and see what happens um there's a whole bunch of other resources invite you to check out",
    "start": "3239079",
    "end": "3246200"
  },
  {
    "text": "um you know a lot of U you know good slides and and and essentially uh discussion of Android of binder and open",
    "start": "3246200",
    "end": "3252400"
  },
  {
    "text": "binder that's that's worth looking at and so again in summary we took a look at what binder is how it compares to",
    "start": "3252400",
    "end": "3258720"
  },
  {
    "text": "others briefly how it works um you know I briefly talked about how you could implement it I invite you to take a look",
    "start": "3258720",
    "end": "3264440"
  },
  {
    "text": "at the code uh we talked about features like aidl the security and death notification and so on and so on um uh",
    "start": "3264440",
    "end": "3272200"
  },
  {
    "text": "this record this talk will be recorded or actually is being recorded I'll save it and later on upload it to same URL I",
    "start": "3272200",
    "end": "3278520"
  },
  {
    "text": "invite you to check it out and hopefully you guys got something out of it so thank you I'll be here if you have any questions",
    "start": "3278520",
    "end": "3286520"
  },
  {
    "text": "[Music]",
    "start": "3291090",
    "end": "3298690"
  }
]