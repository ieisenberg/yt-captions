[
  {
    "text": "foreign [Music]",
    "start": "0",
    "end": "14249"
  },
  {
    "text": "welcome to my talk shopify's architecture to handle the world's biggest flash Shields my name is spark",
    "start": "15199",
    "end": "21840"
  },
  {
    "text": "the water I lead the insights and Reporting team of Shopify payments Shopify payments is",
    "start": "21840",
    "end": "27180"
  },
  {
    "text": "our built-in Payment Processing solution that we offer to merchants in 17 countries around the world we also",
    "start": "27180",
    "end": "32758"
  },
  {
    "text": "support many payment Integrations from third parties I've been working on various parts of",
    "start": "32759",
    "end": "37920"
  },
  {
    "text": "shopify's payment processing systems for the past five years I'm originally from the Netherlands and I moved to Montreal",
    "start": "37920",
    "end": "43680"
  },
  {
    "text": "Canada for the job back when Shopify was an office-based company you can find me on Twitter ASB to water",
    "start": "43680",
    "end": "51000"
  },
  {
    "text": "in case you're unfamiliar with what we do at Shopify our mission is to make Commerce better for everyone and we do",
    "start": "51000",
    "end": "57059"
  },
  {
    "text": "that by offering a multi-channel platform hosting millions of merchants allowing them to sell wherever their",
    "start": "57059",
    "end": "63059"
  },
  {
    "text": "customers are whether that be via their online storefront social media and also",
    "start": "63059",
    "end": "68760"
  },
  {
    "text": "in person at brick and mortar or pop-up stores all with a single integrated back office for merchants to run their",
    "start": "68760",
    "end": "74820"
  },
  {
    "text": "business from and we've gotten really good over the",
    "start": "74820",
    "end": "79860"
  },
  {
    "text": "past few years handling flash shills and that's why I'm giving this talk flash Hill is a sale for a limited",
    "start": "79860",
    "end": "87119"
  },
  {
    "text": "amount of time often with Limited stock it's over in a Flash because the product can sell out in seconds even if there",
    "start": "87119",
    "end": "93540"
  },
  {
    "text": "are thousands of items in inventory you might think that's not new that",
    "start": "93540",
    "end": "98759"
  },
  {
    "text": "sounds like a regular sale yeah you might have seen videos of crowded shopping malls around the",
    "start": "98759",
    "end": "104759"
  },
  {
    "text": "holiday periods with customers rushing in as soon as the gates open but today these flash shills happen any",
    "start": "104759",
    "end": "111119"
  },
  {
    "text": "time of the year the current iteration of flash Shields was popularized by a digital first",
    "start": "111119",
    "end": "117180"
  },
  {
    "text": "brands with product drops this is a sale of a limited edition of something for example lipstick or a pair",
    "start": "117180",
    "end": "123899"
  },
  {
    "text": "of sneakers and these Brands create hype on their social media platforms which then drives enormous amount of traffic",
    "start": "123899",
    "end": "130319"
  },
  {
    "text": "and sales the moment the product is available now this type of sale poses an",
    "start": "130319",
    "end": "136140"
  },
  {
    "text": "interesting engineering challenge as the amount of merchants that we host grow and they grow their customer base",
    "start": "136140",
    "end": "142319"
  },
  {
    "text": "today's Flash sale will be tomorrow's base load",
    "start": "142319",
    "end": "147260"
  },
  {
    "text": "a quick rundown of how we build Shopify our main tool of choice for building back-end system is Ruby on Rails with my",
    "start": "147780",
    "end": "155160"
  },
  {
    "text": "Sequel redis and memcache as our data stores we use go and Lua in a couple of places",
    "start": "155160",
    "end": "160500"
  },
  {
    "text": "as well mostly for a performance critical backend parts and I'll talk about those later in this talk",
    "start": "160500",
    "end": "166860"
  },
  {
    "text": "on the front end we use react with graphql apis and we use react native for our mobile apps including the point of",
    "start": "166860",
    "end": "173580"
  },
  {
    "text": "sale that I just showed you earlier you may have heard that shopify's main",
    "start": "173580",
    "end": "178800"
  },
  {
    "text": "rails app is a monolith and we deploy this around 40 times a day as hundreds of developers worldwide are working on",
    "start": "178800",
    "end": "185280"
  },
  {
    "text": "it this is a familiar site for folks in the",
    "start": "185280",
    "end": "191700"
  },
  {
    "text": "audience I presume you are browsing for products added to cart and check out",
    "start": "191700",
    "end": "199340"
  },
  {
    "text": "and then this is the perspective from our Merchants admin there's an order ready to be fulfilled",
    "start": "208319",
    "end": "215900"
  },
  {
    "text": "we just saw three major sections of Shopify and in this talk I'll mostly",
    "start": "216959",
    "end": "222120"
  },
  {
    "text": "focus on storefront and checkout since these two see the most traffic",
    "start": "222120",
    "end": "227159"
  },
  {
    "text": "you'll notice that storefront and checkout also have very different characteristics and requirements",
    "start": "227159",
    "end": "233280"
  },
  {
    "text": "storefront is mostly about read traffic while our checkout does most of the writing and has to interact with",
    "start": "233280",
    "end": "238799"
  },
  {
    "text": "external systems as well before we continue I need to introduce a",
    "start": "238799",
    "end": "245099"
  },
  {
    "text": "little bit of our terminology a Shopify pod not to be confused with a kubernetes pod a Shopify pod contains data for",
    "start": "245099",
    "end": "252540"
  },
  {
    "text": "one-to-many shops and it's basically a complete version of Shopify that can run anywhere in the world",
    "start": "252540",
    "end": "258060"
  },
  {
    "text": "it is more than just a relational data chart which is why we use the name pod",
    "start": "258060",
    "end": "264139"
  },
  {
    "text": "and we have multiple of these pods these stateful systems are completely separate from each other",
    "start": "264720",
    "end": "271860"
  },
  {
    "text": "the pods run in a single region and while the data stores are isolated the stateless workers are shared this allows",
    "start": "271860",
    "end": "278940"
  },
  {
    "text": "us to balance the load in a region where a shop on a certain pod is having a flash sale and in case something goes",
    "start": "278940",
    "end": "285780"
  },
  {
    "text": "wrong with a certain pot like an overload MySQL instance this does not affect the other pause or the shops that",
    "start": "285780",
    "end": "291780"
  },
  {
    "text": "are hosted on there we also have multiple regions and a",
    "start": "291780",
    "end": "297360"
  },
  {
    "text": "Shopify pod is active in a single region at a time but exists in two with replication set up from the active to",
    "start": "297360",
    "end": "304259"
  },
  {
    "text": "the non-active region we can fail over an entire pod to another region if need be like some sort of catastrophe happens",
    "start": "304259",
    "end": "312780"
  },
  {
    "text": "with that context we can now talk about how a request gets routed to the appropriate pod",
    "start": "312780",
    "end": "318780"
  },
  {
    "text": "and the part of request is talking about domains which involves a little bit of branding a merchant at signup can choose",
    "start": "318780",
    "end": "327240"
  },
  {
    "text": "a domain that we give them for free a subdomain of my shopify.com and they cannot change it later and",
    "start": "327240",
    "end": "334620"
  },
  {
    "text": "sometimes they don't like that that you might sign up with cool t-shirts as your brand name first and then later decide",
    "start": "334620",
    "end": "340020"
  },
  {
    "text": "that actually you want to be known as t-shirt hero so you can buy or bring to us t-shirthero.com and we'll make sure",
    "start": "340020",
    "end": "346979"
  },
  {
    "text": "that everything is taken care of from there on we'll use this in the rest of our examples",
    "start": "346979",
    "end": "353180"
  },
  {
    "text": "once a request for our store t-shirthero.com enters our Network the",
    "start": "353460",
    "end": "359220"
  },
  {
    "text": "first thing it runs through is open resty and open resties and nginx distribution that supports Lua scripting",
    "start": "359220",
    "end": "366259"
  },
  {
    "text": "we use these scripting capabilities for managing for many things before it actually hits the Ruby unreals",
    "start": "366259",
    "end": "372360"
  },
  {
    "text": "application layer stuff that we do includes blocking Bots and routing traffic to the right pod",
    "start": "372360",
    "end": "378660"
  },
  {
    "text": "now you might be wondering what do bots have to do with it the limited edition merchandise sold in Flash Shields like",
    "start": "378660",
    "end": "385020"
  },
  {
    "text": "those sneakers could fetch double or triple the original price on the secondary Market",
    "start": "385020",
    "end": "390300"
  },
  {
    "text": "and Merchants don't want their products to be sold like that and Bots also Hammer our systems much more than real",
    "start": "390300",
    "end": "396240"
  },
  {
    "text": "buyers do so we try to block them since the pandemic started impacting supply",
    "start": "396240",
    "end": "401280"
  },
  {
    "text": "chain issues the bot problem is also spread to other products like graphics cards or gaming consoles",
    "start": "401280",
    "end": "408300"
  },
  {
    "text": "but back to rounding traffic we have a Lua module called sorting hat that looks up the host in the routing table and",
    "start": "408300",
    "end": "414600"
  },
  {
    "text": "finds the corresponding part that the shop belongs to the request is then routed to the",
    "start": "414600",
    "end": "420419"
  },
  {
    "text": "appropriate region where the Pod is active our reels application receives a request and handles it",
    "start": "420419",
    "end": "427220"
  },
  {
    "text": "as I mentioned before our rails application is a monolith it's probably one of the oldest and biggest rails apps",
    "start": "428039",
    "end": "434400"
  },
  {
    "text": "out there zooming in on the monolith we see that",
    "start": "434400",
    "end": "439979"
  },
  {
    "text": "the checkout component needs to collaborate with a few others in order to get its work done this is a list of some but not all the",
    "start": "439979",
    "end": "447419"
  },
  {
    "text": "components we've subdivided the Shopify app into we have the checkout line items any",
    "start": "447419",
    "end": "453900"
  },
  {
    "text": "discounts or promotions that are applied there are taxes involved Shipping Lines",
    "start": "453900",
    "end": "460259"
  },
  {
    "text": "maybe you paid more for extra shipping and all of these add up to a total",
    "start": "460259",
    "end": "465360"
  },
  {
    "text": "amount that needs to be charged to our buyer since my background is in payments I'll continue pulling that thread a",
    "start": "465360",
    "end": "471780"
  },
  {
    "text": "little bit more for the rest of this talk Shopify supports many different payment processors and payment methods",
    "start": "471780",
    "end": "478080"
  },
  {
    "text": "I'll also use a credit card as an example here since processing credit cards comes with some additional",
    "start": "478080",
    "end": "484800"
  },
  {
    "text": "interesting challenges compared to other payment methods",
    "start": "484800",
    "end": "489620"
  },
  {
    "text": "if you've ever dealt with credit card payments you've heard about something called PCI compliance and this refers to",
    "start": "490380",
    "end": "498120"
  },
  {
    "text": "the payment card industry data security standard the standard sets out six groups of",
    "start": "498120",
    "end": "504120"
  },
  {
    "text": "requirements that need to be adhered to in order to make sure that card information is handled in a secure manner",
    "start": "504120",
    "end": "510000"
  },
  {
    "text": "now these all sound reasonable let's just Implement all of them get our",
    "start": "510000",
    "end": "515279"
  },
  {
    "text": "yearly audit done and slap a compliance sticker on it call it a day easier bringing all of shopify's monolith in",
    "start": "515279",
    "end": "522060"
  },
  {
    "text": "scope would be a problem as I mentioned earlier we have hundreds of developers shipping the monolith around 40 times a",
    "start": "522060",
    "end": "528600"
  },
  {
    "text": "day and having to meet all of these requirements in the way Auditors expect them to would really slow us down",
    "start": "528600",
    "end": "536100"
  },
  {
    "text": "we also allow Merchants to completely customize their Shop's look and feel with HTML templates in JavaScript and we",
    "start": "536100",
    "end": "542880"
  },
  {
    "text": "have an ecosystem of apps that can add functionality to stores so we need to keep all that sensitive card data away",
    "start": "542880",
    "end": "549660"
  },
  {
    "text": "from these things if you were to right click inspect",
    "start": "549660",
    "end": "555839"
  },
  {
    "text": "element on any of these fields you would actually notice that these are iframes hosted on a completely separate domain",
    "start": "555839",
    "end": "562140"
  },
  {
    "text": "from the merchant store and their checkout and this is how we keep the Shopify monolith out of scope we just don't let",
    "start": "562140",
    "end": "569459"
  },
  {
    "text": "it see any card data in the first place I'll show you how that works",
    "start": "569459",
    "end": "574880"
  },
  {
    "text": "when you submit the payment step of the checkout these iframe fields with the card number the card holder name the CVV",
    "start": "575040",
    "end": "583019"
  },
  {
    "text": "and the expiry date are first submitted to an application we call card sync card",
    "start": "583019",
    "end": "588120"
  },
  {
    "text": "sync takes this sensitive data encrypts it and returns a token back to the checkout JavaScript",
    "start": "588120",
    "end": "595019"
  },
  {
    "text": "the checkout code then submits this token alongside all the other checkout data to the main Shopify application",
    "start": "595019",
    "end": "604040"
  },
  {
    "text": "at this point the buyer is presented with a waiting screen with a little spinner that says that their order is",
    "start": "604980",
    "end": "610019"
  },
  {
    "text": "being processed what actually happens is that a background job in the Shopify monolith",
    "start": "610019",
    "end": "615779"
  },
  {
    "text": "passes the token and payment metadata to an app we call card server cart server uses the token to look up",
    "start": "615779",
    "end": "622560"
  },
  {
    "text": "the encrypted data in card sync and decrypts it it then uses this card data and the",
    "start": "622560",
    "end": "629760"
  },
  {
    "text": "other metadata sent from the monolith to find the right payment processor to talk",
    "start": "629760",
    "end": "635279"
  },
  {
    "text": "to using an adapter Library it transformed the standardized call into the processor specific API call",
    "start": "635279",
    "end": "642839"
  },
  {
    "text": "and from there the authorized request goes over the goes for the acquiring",
    "start": "642839",
    "end": "648660"
  },
  {
    "text": "Bank the cart network and the issuing bank that ultimately decides to authorize or decline the charge",
    "start": "648660",
    "end": "656040"
  },
  {
    "text": "assuming the charge is authorized a success response is returned back and the checkout is converted to an order",
    "start": "656040",
    "end": "664279"
  },
  {
    "text": "this is when the buyer sees the order status page thanking them for their",
    "start": "664860",
    "end": "670079"
  },
  {
    "text": "business there's also a confirmation email send any web hoax for apps are fired and the",
    "start": "670079",
    "end": "676860"
  },
  {
    "text": "merchant has their order to fulfill from the admin but this was just a single purchase how",
    "start": "676860",
    "end": "683100"
  },
  {
    "text": "about those big flash sales I mentioned earlier Black Friday and Cyber Monday or bfcm as",
    "start": "683100",
    "end": "690180"
  },
  {
    "text": "we call it is our largest event of the year we have a lot of merchants organizing flash sales during a long",
    "start": "690180",
    "end": "695760"
  },
  {
    "text": "weekend at the end of November to give you an idea of the skill that we're talking about here are last year's",
    "start": "695760",
    "end": "701880"
  },
  {
    "text": "numbers 6.3 billion dollars and total sales with",
    "start": "701880",
    "end": "708240"
  },
  {
    "text": "requests per minute peaking up to 32 million requests per minute",
    "start": "708240",
    "end": "713339"
  },
  {
    "text": "and every year is larger than the previous one too as we have more Merchants choosing our",
    "start": "713339",
    "end": "718440"
  },
  {
    "text": "platform and the merchants businesses themselves are also growing bigger in order to support this growth on all",
    "start": "718440",
    "end": "724440"
  },
  {
    "text": "these fronts we need to Circle back a bit and talk more about our product architecture",
    "start": "724440",
    "end": "730519"
  },
  {
    "text": "much like Parts don't talk to each other neither do shops every unit of work be",
    "start": "731640",
    "end": "737220"
  },
  {
    "text": "it a request or background job should operate on only a single shop at a time",
    "start": "737220",
    "end": "742620"
  },
  {
    "text": "this means that we write code that only cares about shops and not the pots that",
    "start": "742620",
    "end": "747660"
  },
  {
    "text": "they're on and since we don't care about these pods in application code we can actually easily add more of them and",
    "start": "747660",
    "end": "754860"
  },
  {
    "text": "horizontally scale out Shopify to support growth of the platform but as Merchants also then grow at their",
    "start": "754860",
    "end": "762240"
  },
  {
    "text": "individual Pace we occasionally need to rebalance Pause by moving shops around in order to evenly spread load and disk",
    "start": "762240",
    "end": "768959"
  },
  {
    "text": "usage and of course we need to do this with as little downtime as possible",
    "start": "768959",
    "end": "775100"
  },
  {
    "text": "what also follows from the tenant isolation principle is that things that do need to work across multiple shops",
    "start": "775139",
    "end": "782399"
  },
  {
    "text": "need to be either built in a separate application or use our data warehouse for analysis",
    "start": "782399",
    "end": "788700"
  },
  {
    "text": "an example of such an app is shop a that's our one-click checkout solution that is an exclusive feature of Shopify",
    "start": "788700",
    "end": "795540"
  },
  {
    "text": "payments that allows you to easily pay for things across multiple Shopify stores",
    "start": "795540",
    "end": "802820"
  },
  {
    "text": "we'll be moving our example shop to Part 2 to show the process",
    "start": "804839",
    "end": "810240"
  },
  {
    "text": "we first start by copying over all data in my SQL things like products and",
    "start": "810240",
    "end": "817019"
  },
  {
    "text": "orders and we copy over all the rows where the shop ID matches this covers all the existing data but in",
    "start": "817019",
    "end": "824700"
  },
  {
    "text": "order to make sure we get into complete sync we also need to take into account new data as it comes in we do this by",
    "start": "824700",
    "end": "831720"
  },
  {
    "text": "replicating the MySQL bin log the bin log is a stream of events for every row that is modified",
    "start": "831720",
    "end": "839480"
  },
  {
    "text": "we've open sourced a library that does this row copying and Bin log replication we call it ghost fairy and it's",
    "start": "840899",
    "end": "846300"
  },
  {
    "text": "available on GitHub these next few steps will go pretty fast",
    "start": "846300",
    "end": "854940"
  },
  {
    "text": "once we've done our row copying and Bin log replication and we're in near complete sync we lock the shop for any",
    "start": "854940",
    "end": "862500"
  },
  {
    "text": "rights and cue any writing data this is also the moment when we start",
    "start": "862500",
    "end": "868459"
  },
  {
    "text": "copying over jobs and other things in redis",
    "start": "868459",
    "end": "873500"
  },
  {
    "text": "we then update the Pod ID in the routing table once all of that is complete and remove the lock",
    "start": "874200",
    "end": "881959"
  },
  {
    "text": "and we can now serve requests from pod 2. I mentioned that this was pretty fast we can do this for a lot of stores in",
    "start": "882720",
    "end": "890639"
  },
  {
    "text": "less than 10 seconds of down time and even for our larger stores we can do it in less than 20.",
    "start": "890639",
    "end": "896639"
  },
  {
    "text": "you may have noticed that part 1 still contains the old data for our store",
    "start": "896639",
    "end": "901680"
  },
  {
    "text": "t-shirt hero it is deleted asynchronously in order to reclaim the space",
    "start": "901680",
    "end": "908240"
  },
  {
    "text": "bring me back to the three sections we saw at the start we had storefront check out an admin and",
    "start": "909899",
    "end": "916019"
  },
  {
    "text": "one of these is not like the other storefront has a very different kind of traffic pattern and it's also aiming to",
    "start": "916019",
    "end": "922920"
  },
  {
    "text": "provide a different sort of guarantee it also sees much more traffic unfortunately for our merchants not",
    "start": "922920",
    "end": "929279"
  },
  {
    "text": "every window shopper becomes a paying customer we wish over the past couple of years we have",
    "start": "929279",
    "end": "936000"
  },
  {
    "text": "actually Rewritten our storefront rendering code in a separate Ruby application from scratch and we run it",
    "start": "936000",
    "end": "943139"
  },
  {
    "text": "separately from the original monolith while doing so we had to make sure that we wouldn't break any of the existing",
    "start": "943139",
    "end": "949920"
  },
  {
    "text": "Merchant templates which are written in a language we call liquid again open resty and Lewis scripts were",
    "start": "949920",
    "end": "956880"
  },
  {
    "text": "used to make the process seamless for our merchants and their buyers first we ran the new rendering app in a",
    "start": "956880",
    "end": "964079"
  },
  {
    "text": "shadow configuration to verify the HTML was equivalent before we started moving production traffic over and having this",
    "start": "964079",
    "end": "971339"
  },
  {
    "text": "flexibility in scripting also allowed to quickly revert back to rendering from the monolith in case of any regressions",
    "start": "971339",
    "end": "978260"
  },
  {
    "text": "eventually this new implementation became the standard one and it's much faster we can also independently scale",
    "start": "978260",
    "end": "985199"
  },
  {
    "text": "it from other parts of Shopify the next step in scaling this would just",
    "start": "985199",
    "end": "992100"
  },
  {
    "text": "be to never render any HTML at all let the client do it and unlock infinite",
    "start": "992100",
    "end": "997500"
  },
  {
    "text": "scale okay we need to render the API responses still so it's not that easy but over the past five plus years we've",
    "start": "997500",
    "end": "1005420"
  },
  {
    "text": "seen a rise in headless Commerce where our technically Savvy Merchants want to actually completely develop their own",
    "start": "1005420",
    "end": "1011959"
  },
  {
    "text": "front end often these are single page applications using Frameworks like react",
    "start": "1011959",
    "end": "1017660"
  },
  {
    "text": "and we support that too we're building a react-based framework called hydrogen which can optionally be hosted on",
    "start": "1017660",
    "end": "1024199"
  },
  {
    "text": "shopify's network using oxygen now that we've talked a little bit about",
    "start": "1024199",
    "end": "1029839"
  },
  {
    "text": "our architectural approach how do we make sure it all works in practice",
    "start": "1029839",
    "end": "1034959"
  },
  {
    "text": "one way we do that is by load testing and when we do that in production",
    "start": "1035240",
    "end": "1041260"
  },
  {
    "text": "we have a tool for this that we developed that is called Genghis Genghis is a load generator that spins up a lot",
    "start": "1042140",
    "end": "1048919"
  },
  {
    "text": "of worker VMS that then execute Lua scripts and these Lewis scripts describe",
    "start": "1048919",
    "end": "1054620"
  },
  {
    "text": "certain steps of behavior that we see and we don't want to just hit the",
    "start": "1054620",
    "end": "1060260"
  },
  {
    "text": "storefront a million times with the get request because that will only tell us how well the caching works these lure",
    "start": "1060260",
    "end": "1066620"
  },
  {
    "text": "tests can be combined to describe end-to-end flows like browsing adding to cart checking out and anything else we",
    "start": "1066620",
    "end": "1072679"
  },
  {
    "text": "would see in real life it's not a singular flow that we just unleash for example we have different flows",
    "start": "1072679",
    "end": "1078919"
  },
  {
    "text": "describing logged in and Anonymous customers since these two hit different code paths and caches we want to test",
    "start": "1078919",
    "end": "1084980"
  },
  {
    "text": "them separately and make sure all the edge cases are hit",
    "start": "1084980",
    "end": "1090519"
  },
  {
    "text": "so when we set up load testing remember that Shopify has a sharded multi-tenant architecture",
    "start": "1091100",
    "end": "1097220"
  },
  {
    "text": "we run Genghis against a specifically set up Benchmark stores in our production environment every pod has at",
    "start": "1097220",
    "end": "1103700"
  },
  {
    "text": "least one in order to realistically load test we",
    "start": "1103700",
    "end": "1109400"
  },
  {
    "text": "also need to stress our PCI environment but most payment processors would rather",
    "start": "1109400",
    "end": "1114440"
  },
  {
    "text": "not be on the receiving end of these load tests so instead we have set these stores up with a simple Benchmark",
    "start": "1114440",
    "end": "1120799"
  },
  {
    "text": "Gateway also a Go app and The Benchmark Gateway can respond with both successful",
    "start": "1120799",
    "end": "1126559"
  },
  {
    "text": "and failed payments with a realistic distribution of response sign latencies that we see in production",
    "start": "1126559",
    "end": "1133460"
  },
  {
    "text": "and we run these tests at least weekly we want to make sure we find out about",
    "start": "1133460",
    "end": "1139039"
  },
  {
    "text": "bottlenecks first and not through a major Merchant slash sale all these major pieces of infrastructure",
    "start": "1139039",
    "end": "1146179"
  },
  {
    "text": "have their service level objectives sets in an application called Services DB and",
    "start": "1146179",
    "end": "1152480"
  },
  {
    "text": "if during the weekly low testes slos are not met the older the owners are notified and",
    "start": "1152480",
    "end": "1158539"
  },
  {
    "text": "requested to prioritize a fix we consider being fast and important feature",
    "start": "1158539",
    "end": "1164919"
  },
  {
    "text": "but at our scale it is inevitably that something will go wrong so we plan for that",
    "start": "1165260",
    "end": "1171080"
  },
  {
    "text": "we need to understand our dependencies their failure modes and how these impact the end user experience we do this by",
    "start": "1171080",
    "end": "1178280"
  },
  {
    "text": "creating what we call a resiliency Matrix using this Matrix we can develop a plan",
    "start": "1178280",
    "end": "1183440"
  },
  {
    "text": "to run a game day and simulate an outage during these game days we look to see if",
    "start": "1183440",
    "end": "1189140"
  },
  {
    "text": "our alerts and automations trigger is expected and if our developers have the knowledge and process in place to",
    "start": "1189140",
    "end": "1194419"
  },
  {
    "text": "properly respond and for the people who are paying close attention to this slide no shipify is",
    "start": "1194419",
    "end": "1201080"
  },
  {
    "text": "not a typo it's the name of our application that provides shipping services such as purchasing shipping",
    "start": "1201080",
    "end": "1206720"
  },
  {
    "text": "labels one pattern we apply throughout",
    "start": "1206720",
    "end": "1211940"
  },
  {
    "text": "applications to respond to failures is the circuit breaker like the circuit breaker pictured once the circuit is",
    "start": "1211940",
    "end": "1217700"
  },
  {
    "text": "opened or tripped no current flows through we use it to protect data stores and",
    "start": "1217700",
    "end": "1224000"
  },
  {
    "text": "apis both internal and external apis",
    "start": "1224000",
    "end": "1228760"
  },
  {
    "text": "over time a circuit breaker looks a little like this we are talking to a service and we're",
    "start": "1230240",
    "end": "1237140"
  },
  {
    "text": "hitting timeouts a few times in a row knowing that an external server an external resources that goes down tends",
    "start": "1237140",
    "end": "1243799"
  },
  {
    "text": "to stay down for a while we instead once the surface breaker is tripped we raise",
    "start": "1243799",
    "end": "1249860"
  },
  {
    "text": "instantly and we don't wait for another timeout to happen these instantly raising exceptions can",
    "start": "1249860",
    "end": "1255860"
  },
  {
    "text": "be rescued and in some cases used to provide Alternatives a degraded service is better than being completely down",
    "start": "1255860",
    "end": "1262340"
  },
  {
    "text": "for example if redis is storing our user sessions and it goes down we could",
    "start": "1262340",
    "end": "1267559"
  },
  {
    "text": "present a logged out view instead so that potential customers could still browse their storefront instead of",
    "start": "1267559",
    "end": "1272660"
  },
  {
    "text": "getting an HTTP 500 served circuit breakers are also an obvious place to put alerting and monitoring",
    "start": "1272660",
    "end": "1279020"
  },
  {
    "text": "around in order to know for resources back up again after a certain amount of time we",
    "start": "1279020",
    "end": "1286160"
  },
  {
    "text": "do need to allow a couple of requests through in the half open state if these",
    "start": "1286160",
    "end": "1291380"
  },
  {
    "text": "requests are successful the circuit resets to its close state if not the circuit breaker stays open and keeps",
    "start": "1291380",
    "end": "1298640"
  },
  {
    "text": "raising errors for the next little while Shopify developed its own its own",
    "start": "1298640",
    "end": "1304880"
  },
  {
    "text": "Library called semian which implements circus breakers for Ruby's HTTP client as well as clients to connect to redis",
    "start": "1304880",
    "end": "1311720"
  },
  {
    "text": "mySQL and grpc you might be wondering how you're going",
    "start": "1311720",
    "end": "1317600"
  },
  {
    "text": "to test this failure in your unit tests for this we have an app called toxyproxy",
    "start": "1317600",
    "end": "1324020"
  },
  {
    "text": "it's a proxy written in Gold that not only allows us to simulate a service from going down but also inject other",
    "start": "1324020",
    "end": "1330679"
  },
  {
    "text": "kinds of failures from our test Suite we can reliably trigger these figures intoxicroxy and prevent accidental",
    "start": "1330679",
    "end": "1338840"
  },
  {
    "text": "regressions for example in these test cases we make sure that the user gets",
    "start": "1338840",
    "end": "1345020"
  },
  {
    "text": "session call doesn't error out if redis is down",
    "start": "1345020",
    "end": "1349899"
  },
  {
    "text": "one interesting aspect to consider is what do we scope our circuit breaker actually to",
    "start": "1351740",
    "end": "1357200"
  },
  {
    "text": "some Services can be partially down and what with a subset of requests failing most of them are fine",
    "start": "1357200",
    "end": "1364340"
  },
  {
    "text": "a reasonable default from the semian readme pictured here is keying the circuit breaker identifier off of the",
    "start": "1364340",
    "end": "1372140"
  },
  {
    "text": "API endpoint the semian configuration Lambda is called an every HTTP request with the",
    "start": "1372140",
    "end": "1378140"
  },
  {
    "text": "host and Port arguments forwarded and we concatenate these together to create the identifier for the circuit breaker to",
    "start": "1378140",
    "end": "1384200"
  },
  {
    "text": "check most of the time this is fine we don't want to know more about how the other side works because we don't want to",
    "start": "1384200",
    "end": "1390980"
  },
  {
    "text": "tightly cover ourselves to an implementation on the other side but there are a couple of cases where it",
    "start": "1390980",
    "end": "1397700"
  },
  {
    "text": "might make sense to deviate from this payments for example have a sort of a",
    "start": "1397700",
    "end": "1402740"
  },
  {
    "text": "country Dimension to them of course there's regulation but also acquiring done is at a local level for lower costs",
    "start": "1402740",
    "end": "1410600"
  },
  {
    "text": "and better authorization rates so even if you call the same host API worldwide",
    "start": "1410600",
    "end": "1415820"
  },
  {
    "text": "behind the scenes it actually takes a country-specific path by adding the country to the circuit",
    "start": "1415820",
    "end": "1422059"
  },
  {
    "text": "breaker identifier if there's some sort of Upstream outage that prevents payments from being processed for",
    "start": "1422059",
    "end": "1427220"
  },
  {
    "text": "Canadian Merchants we don't want the open circuit to affect American or Mexican merchants and blocking their",
    "start": "1427220",
    "end": "1433100"
  },
  {
    "text": "payments from going through another example here could be is a",
    "start": "1433100",
    "end": "1439039"
  },
  {
    "text": "shipping label aggregator it might make sense to incorporate the name of the carrier instead of a country name",
    "start": "1439039",
    "end": "1446299"
  },
  {
    "text": "in the phase Affairs we'd like to retry before giving up completely but the side effects of retrying a call like the one",
    "start": "1446299",
    "end": "1452659"
  },
  {
    "text": "pictured here could end up costing someone money that's not just something that quickly drains the trust of emergent customers but if these double",
    "start": "1452659",
    "end": "1459500"
  },
  {
    "text": "charges are not corrected after the fact this could also end up with the card holder opening disputes with their bank",
    "start": "1459500",
    "end": "1464960"
  },
  {
    "text": "to get their money back this process would in Turn end up costing the merchant time and money in dispute fees",
    "start": "1464960",
    "end": "1470539"
  },
  {
    "text": "as well in short for processing payments we want exactly once semantics when we send this",
    "start": "1470539",
    "end": "1475940"
  },
  {
    "text": "type of request and we can do that by including an item potency in the request that uniquely identifies this payment",
    "start": "1475940",
    "end": "1481820"
  },
  {
    "text": "attempt at Shopify we've written a library called resumption to make it more easy",
    "start": "1481820",
    "end": "1488360"
  },
  {
    "text": "to write item potent actions for the Ruby developers in this audience we're",
    "start": "1488360",
    "end": "1493400"
  },
  {
    "text": "looking into open sourcing this we Define an action class that contains multiple steps and each step of progress",
    "start": "1493400",
    "end": "1500480"
  },
  {
    "text": "made is recorded in the database each step describes the action it takes",
    "start": "1500480",
    "end": "1505580"
  },
  {
    "text": "and how an item potent call can recover any state before continuing if it's a retry call",
    "start": "1505580",
    "end": "1512679"
  },
  {
    "text": "in this example we have the same item potency key shown in the earlier example",
    "start": "1513260",
    "end": "1518780"
  },
  {
    "text": "but unfortunately when we want to actually call out to our processor a error is raised",
    "start": "1518780",
    "end": "1526059"
  },
  {
    "text": "when our client retries to request with the same item potency we first look up the progress stored in the database we",
    "start": "1526880",
    "end": "1533779"
  },
  {
    "text": "find it and then we run through the recover steps first before trying to call the remote API again this time it",
    "start": "1533779",
    "end": "1540080"
  },
  {
    "text": "succeeds and we handle the remote response given we're coming up near the end of my",
    "start": "1540080",
    "end": "1545480"
  },
  {
    "text": "presentation this graph visualizes how everything I just talked about culminated over the",
    "start": "1545480",
    "end": "1550820"
  },
  {
    "text": "course of the year we scaled up our systems prepared our resiliency matrices ran our load tests and game days and our",
    "start": "1550820",
    "end": "1558020"
  },
  {
    "text": "Merchants had another successful black Friday Cyber Monday weekend you'll notice in this graph two types of",
    "start": "1558020",
    "end": "1564140"
  },
  {
    "text": "load tests were run last year the architecture tests focused on testing the new components introduced",
    "start": "1564140",
    "end": "1570559"
  },
  {
    "text": "like the storefront renderer and changes to our MySQL infrastructure and we ran these tests early to make",
    "start": "1570559",
    "end": "1576320"
  },
  {
    "text": "sure that any gotchas were caught out early and that we had time to address them later in the year the skill tests",
    "start": "1576320",
    "end": "1583039"
  },
  {
    "text": "were the more traditional load tests for which we scaled up to 2021 levels and",
    "start": "1583039",
    "end": "1588860"
  },
  {
    "text": "made sure we were ready for the actual bfcm event",
    "start": "1588860",
    "end": "1593919"
  },
  {
    "text": "here's a quick recap of what we've covered today we started with how a request gets routed to the right Shopify pod and how",
    "start": "1595220",
    "end": "1602059"
  },
  {
    "text": "we can pay a checkout with a credit card without exposing the card details and the PCI compliance requirements to the",
    "start": "1602059",
    "end": "1608480"
  },
  {
    "text": "main Shopify monolith then we talked about scaling up for Black Friday Cyber Monday by adding new",
    "start": "1608480",
    "end": "1614059"
  },
  {
    "text": "PODS moving shops around and extracting storefront rendering from the rails monolith",
    "start": "1614059",
    "end": "1619580"
  },
  {
    "text": "finally we talked about doing load testing in production and our strategies for handling anticipated failures",
    "start": "1619580",
    "end": "1624980"
  },
  {
    "text": "gracefully using circuit breakers toxic proxy and item potent payment apis",
    "start": "1624980",
    "end": "1632260"
  },
  {
    "text": "thanks for attending my talk I hope you found it interesting a lot of these subjects are also covered on our",
    "start": "1632659",
    "end": "1638360"
  },
  {
    "text": "engineering blog which you can find at shopify.engineering and in case you have any questions you can find me on",
    "start": "1638360",
    "end": "1644240"
  },
  {
    "text": "twitter.com as beta water thank you very much",
    "start": "1644240",
    "end": "1649179"
  },
  {
    "text": "thank you for joining us and it's really really interesting presentation and",
    "start": "1652100",
    "end": "1657200"
  },
  {
    "text": "before jumping on the questions for the audience just to warm up and let people have a time to start I'll just ask you",
    "start": "1657200",
    "end": "1665240"
  },
  {
    "text": "that I I I I guess that some special customers that have a high load and",
    "start": "1665240",
    "end": "1671659"
  },
  {
    "text": "really big big stars they they receive a special treatment on on Shopify",
    "start": "1671659",
    "end": "1677960"
  },
  {
    "text": "infrastructure is that correct um as I would say with any multi-tenant",
    "start": "1677960",
    "end": "1684740"
  },
  {
    "text": "system there's always like say that handful or like maybe a few dozen tenants that are like yep 10 20 times",
    "start": "1684740",
    "end": "1691940"
  },
  {
    "text": "bigger than than the next um set of customers um so given that we have a a sharded or",
    "start": "1691940",
    "end": "1700100"
  },
  {
    "text": "a potted architecture um some of these extra extra large merchants and have an entire pod for",
    "start": "1700100",
    "end": "1706220"
  },
  {
    "text": "themselves yes um in other cases where we have just like regular big Merchants",
    "start": "1706220",
    "end": "1713120"
  },
  {
    "text": "um we have other systems in place to make sure that when they do a flash Shield they don't monopolize all the",
    "start": "1713120",
    "end": "1718159"
  },
  {
    "text": "capacity and that smaller Merchants who are co-located on that pod also have a",
    "start": "1718159",
    "end": "1723260"
  },
  {
    "text": "chance to conduct their business yeah that would be my follow-up question is because how do you",
    "start": "1723260",
    "end": "1729740"
  },
  {
    "text": "test this on on the on on to prepare for Flash shapes to avoid one big hot spot",
    "start": "1729740",
    "end": "1737179"
  },
  {
    "text": "to shoot down other small tons of small merchants yeah",
    "start": "1737179",
    "end": "1743299"
  },
  {
    "text": "um so this is this is a continuous uh continuous process of um you know like",
    "start": "1743299",
    "end": "1748640"
  },
  {
    "text": "once a merchant signs up they're a sound a sound a round robin to an available pod",
    "start": "1748640",
    "end": "1755000"
  },
  {
    "text": "um and then it might just happen to be that that one particular Merchant is going to be one of these extra large",
    "start": "1755000",
    "end": "1760159"
  },
  {
    "text": "flash sellers um that's why we have the shop mover so we can adjust as like see how um how",
    "start": "1760159",
    "end": "1766580"
  },
  {
    "text": "Merchants are behaving how they're growing on their pods and then rebalance as needed",
    "start": "1766580",
    "end": "1772658"
  },
  {
    "text": "thank you so the first question from Satish I don't know if there is this word for pet he asked I imagine that",
    "start": "1772700",
    "end": "1779720"
  },
  {
    "text": "part Bots are a very large bets how do you run oh I think it was",
    "start": "1779720",
    "end": "1784820"
  },
  {
    "text": "ownership of the recommend pets um yes Satish I'm gonna assume here you",
    "start": "1784820",
    "end": "1790039"
  },
  {
    "text": "mean pet says in pets versus cattle um as in you know like cattle being completely automized rollouts of things",
    "start": "1790039",
    "end": "1796460"
  },
  {
    "text": "and and pets sort of like being named servers that you babysit and kind of like never um and typically are hand built and and",
    "start": "1796460",
    "end": "1803539"
  },
  {
    "text": "set up yeah um no so pods uh in that regard are",
    "start": "1803539",
    "end": "1809840"
  },
  {
    "text": "um our Kettle um it's just the fact that uh we can come it's a way to kind of like reason",
    "start": "1809840",
    "end": "1815059"
  },
  {
    "text": "about the fact like where is this Merchant is this Merchant on um I don't know part number nine",
    "start": "1815059",
    "end": "1821240"
  },
  {
    "text": "um then you know like yes that is a complete set of Shopify that runs in isolation but we can",
    "start": "1821240",
    "end": "1828799"
  },
  {
    "text": "um uh we can set up new pods very easily and and even recreate them if need be",
    "start": "1828799",
    "end": "1835100"
  },
  {
    "text": "for example when we have to do kubernetes upgrades we can run an entire pod in a single data center",
    "start": "1835100",
    "end": "1842059"
  },
  {
    "text": "um upgrade the passive data center um or even just completely rebuild it over there and then move everything back",
    "start": "1842059",
    "end": "1847340"
  },
  {
    "text": "it is it's definitely not pets I see thank you and the second question about um from Emerson F just curious if",
    "start": "1847340",
    "end": "1855260"
  },
  {
    "text": "you look it into temporal before building resumption and if so how does it compare",
    "start": "1855260",
    "end": "1861919"
  },
  {
    "text": "um we did not um if you look at shopify's background job system kind of like history",
    "start": "1861919",
    "end": "1868820"
  },
  {
    "text": "um Toby our CEO and was a rails core member back in the day",
    "start": "1868820",
    "end": "1874220"
  },
  {
    "text": "um he built uh a delayed job where we insert jobs in the database in a separate process pops them off a queue",
    "start": "1874220",
    "end": "1881179"
  },
  {
    "text": "Works them and updates the database again well as you can imagine that at some point MySQL is just not meant for",
    "start": "1881179",
    "end": "1886640"
  },
  {
    "text": "all that writing and updating of jobs in in high throughput scenarios um then GitHub came along with rescue",
    "start": "1886640",
    "end": "1894140"
  },
  {
    "text": "which was red is based and we for the monolith we're now running a heavily",
    "start": "1894140",
    "end": "1899539"
  },
  {
    "text": "customized worker rescue it's basically something new but at this point um I only heard about temporal quite",
    "start": "1899539",
    "end": "1906080"
  },
  {
    "text": "recently so um but yeah the shopify's background job system has evolved in its own way over",
    "start": "1906080",
    "end": "1912740"
  },
  {
    "text": "the years say thank you and the next question from Satish is how do you determine what is",
    "start": "1912740",
    "end": "1919159"
  },
  {
    "text": "the limit on pot size um yeah so that's with load testing",
    "start": "1919159",
    "end": "1924500"
  },
  {
    "text": "um I had a I had a slide on that where um there was uh the various uh um load",
    "start": "1924500",
    "end": "1931700"
  },
  {
    "text": "testing that we did can I present using this thing because I have the slide here I",
    "start": "1931700",
    "end": "1937100"
  },
  {
    "text": "I don't know anyway it's okay yeah so there there were two types of uh oh I I",
    "start": "1937100",
    "end": "1944120"
  },
  {
    "text": "can share now thank you Eileen all right let me uh oh I need to restart Chrome",
    "start": "1944120",
    "end": "1949940"
  },
  {
    "text": "and set up the anyway I'll um keep that for later",
    "start": "1949940",
    "end": "1955760"
  },
  {
    "text": "um so there were two types of load tests that we did uh dude that's like we have the regular load tests um where we just",
    "start": "1955760",
    "end": "1961940"
  },
  {
    "text": "kind of like are more concerned with the correctness of um of all the uh protection layers uh",
    "start": "1961940",
    "end": "1969080"
  },
  {
    "text": "working and then there's also the uh the scale tests and those are the ones where it's just like let's try and break it",
    "start": "1969080",
    "end": "1975620"
  },
  {
    "text": "let's just keep throwing more and more checkouts at it until we find the limit and then figure out is this a limit that",
    "start": "1975620",
    "end": "1982039"
  },
  {
    "text": "we expected there to be there is it something that we could solve or given that Black Friday is in uh two weeks",
    "start": "1982039",
    "end": "1987919"
  },
  {
    "text": "from now we're just gonna assume this is the limit and since it's good enough and we don't want to introduce last minute",
    "start": "1987919",
    "end": "1993500"
  },
  {
    "text": "changes for stability absolutely thank you and the next question is one that's pretty popular",
    "start": "1993500",
    "end": "1999799"
  },
  {
    "text": "from hang yeah is this monolith something that's going to be broken into microservices",
    "start": "1999799",
    "end": "2006519"
  },
  {
    "text": "um not anytime soon um there is a blog post uh on our engineering blog called uh",
    "start": "2006519",
    "end": "2012940"
  },
  {
    "text": "deconstructing the monolith um which goes into our efforts to",
    "start": "2012940",
    "end": "2018760"
  },
  {
    "text": "um uh componentize these um these various parts of Shopify and",
    "start": "2018760",
    "end": "2025059"
  },
  {
    "text": "the way that we're thinking about it right now is that um things that pertain to a single shop",
    "start": "2025059",
    "end": "2031480"
  },
  {
    "text": "like an order or a chargeback or a refund um it's just easier to keep it in a",
    "start": "2031480",
    "end": "2037899"
  },
  {
    "text": "monolith but we do want to make sure that we don't accidentally evolve into a big",
    "start": "2037899",
    "end": "2044200"
  },
  {
    "text": "pile of spaghetti um so we are we built a system that can enforce these component boundaries and",
    "start": "2044200",
    "end": "2050800"
  },
  {
    "text": "kind of like create API boundaries like you would have with a microservices instead but instead we're not going over",
    "start": "2050800",
    "end": "2058419"
  },
  {
    "text": "the network to make these calls so this way we kind of like are looking to combine Best of Both Worlds no latency",
    "start": "2058419",
    "end": "2064898"
  },
  {
    "text": "no no extra complicated debugging with logs from extra systems but still have",
    "start": "2064899",
    "end": "2070658"
  },
  {
    "text": "some of the isolation principles thank you so much and the next question is how does the rebalancing Works can it",
    "start": "2070659",
    "end": "2077919"
  },
  {
    "text": "be done without downtime uh it was part of my presentation very",
    "start": "2077919",
    "end": "2083378"
  },
  {
    "text": "little down time during the cut over phase where um data is in sync in in like 99.999",
    "start": "2083379",
    "end": "2091858"
  },
  {
    "text": "sync uh where we do have to say um at the old at the old pod for like uh okay",
    "start": "2091859",
    "end": "2098020"
  },
  {
    "text": "we need to stop creating data here otherwise we're never going to be done um and then update our routing layer to",
    "start": "2098020",
    "end": "2105040"
  },
  {
    "text": "now point it to the new part if you have a more specific question there Shivam I would be happy to to go into it absolutely and for the last question",
    "start": "2105040",
    "end": "2112240"
  },
  {
    "text": "right now because I invite everyone to move on through hangout session and",
    "start": "2112240",
    "end": "2118180"
  },
  {
    "text": "um what other we can have people are asking",
    "start": "2118180",
    "end": "2123760"
  },
  {
    "text": "more so we can hear yeah because we have time and what has your rational or your",
    "start": "2123760",
    "end": "2128859"
  },
  {
    "text": "team behind choosing a pod based architecture and in that moment on on the the Hashem that you did in that",
    "start": "2128859",
    "end": "2134859"
  },
  {
    "text": "moment what are the challenges that you didn't foresee yeah uh well I have to say that this was",
    "start": "2134859",
    "end": "2141579"
  },
  {
    "text": "before my time I believe um Shopify outgrew a single database",
    "start": "2141579",
    "end": "2147460"
  },
  {
    "text": "around 2010 2012 I think it was um",
    "start": "2147460",
    "end": "2152980"
  },
  {
    "text": "and basically you know I I imagine part of it was that",
    "start": "2152980",
    "end": "2158859"
  },
  {
    "text": "um you know sharding is kind of like the logical step in case you cannot",
    "start": "2158859",
    "end": "2164260"
  },
  {
    "text": "um just throw more money or bigger Hardware at the problem and that's how it continued to evolve",
    "start": "2164260",
    "end": "2171520"
  },
  {
    "text": "um like going for a rewrite around that time I imagine that Shopify was already too big and you know new features needed",
    "start": "2171520",
    "end": "2177760"
  },
  {
    "text": "to be shipped in a pace um that made a rewrite just not tenable",
    "start": "2177760",
    "end": "2183579"
  },
  {
    "text": "yeah thank you and next question would be how do you aggregate data from all the pods to generate Analytics",
    "start": "2183579",
    "end": "2190720"
  },
  {
    "text": "yep that happens in um so all of the pods data are fed uh from a read replica",
    "start": "2190720",
    "end": "2197500"
  },
  {
    "text": "into our data warehouse um I think it's Presto that we use under",
    "start": "2197500",
    "end": "2203200"
  },
  {
    "text": "the hood there um and yeah like basically our data scientists or even myself",
    "start": "2203200",
    "end": "2208720"
  },
  {
    "text": "um in case you know I am curious about something I I'll I'll need to go to the data warehouse to aggregate",
    "start": "2208720",
    "end": "2215320"
  },
  {
    "text": "across all of our data we'll see and one question that I I always like to ask is",
    "start": "2215320",
    "end": "2221140"
  },
  {
    "text": "what is the challenge that we're working right now in your team I'm sorry what is the",
    "start": "2221140",
    "end": "2227320"
  },
  {
    "text": "problem or challenge that we're we are working right now in your team um right now",
    "start": "2227320",
    "end": "2233859"
  },
  {
    "text": "um I am looking to um make make things even go faster than",
    "start": "2233859",
    "end": "2239619"
  },
  {
    "text": "they already are going today um there's a couple of initiatives that I'm looking into with our financial",
    "start": "2239619",
    "end": "2245920"
  },
  {
    "text": "partners to optimize our kind of like um request uh patterns to see that we",
    "start": "2245920",
    "end": "2251859"
  },
  {
    "text": "can make um individual payment requests go faster and then therefore you know like maybe defer some of the work to be",
    "start": "2251859",
    "end": "2258940"
  },
  {
    "text": "after the payment has been done and then that way um you know make make um the critical moments which is transaction",
    "start": "2258940",
    "end": "2265839"
  },
  {
    "text": "time faster for them and for us and then therefore also for our buyers because they are not waiting at that spinner for",
    "start": "2265839",
    "end": "2271780"
  },
  {
    "text": "like um three seconds but maybe two seconds so it's good for all involved yeah that's super cool and and there is",
    "start": "2271780",
    "end": "2277660"
  },
  {
    "text": "another question can you elaborate this the scaling story front from checkout I assume all the systems storefront and",
    "start": "2277660",
    "end": "2284740"
  },
  {
    "text": "story front and check out are our part of the monolith yeah so that kind of hooks into the",
    "start": "2284740",
    "end": "2291160"
  },
  {
    "text": "multi-repo OR mono repo question as well um storefront the the new storefront",
    "start": "2291160",
    "end": "2296680"
  },
  {
    "text": "renderer system that was built that is now completely separate from um from the monolith so that's where um",
    "start": "2296680",
    "end": "2304119"
  },
  {
    "text": "yeah but it's a very recent part of our Evolution uh that only happened in the last two years or so that that project",
    "start": "2304119",
    "end": "2310599"
  },
  {
    "text": "kicked off and is now fully shipped uh recently um so yeah that means that you know like",
    "start": "2310599",
    "end": "2316660"
  },
  {
    "text": "for over 10 years we've we've scaled up monolithically very well",
    "start": "2316660",
    "end": "2322180"
  },
  {
    "text": "um checkout is still part of the monolith um because it is tied to so many other",
    "start": "2322180",
    "end": "2330280"
  },
  {
    "text": "systems uh you know storefront is um if you if you reduce it to its most simplest form it's almost all read only",
    "start": "2330280",
    "end": "2337180"
  },
  {
    "text": "very heavy cachable traffic and checkout however needs to write to a lot of",
    "start": "2337180",
    "end": "2342460"
  },
  {
    "text": "things on the database um it needs to store the fact that the payment happened",
    "start": "2342460",
    "end": "2348220"
  },
  {
    "text": "um from the checkout create an order object um you know create",
    "start": "2348220",
    "end": "2353260"
  },
  {
    "text": "um uh shipping orders um the balance that needs to be paid out",
    "start": "2353260",
    "end": "2359380"
  },
  {
    "text": "to the merchant it needs to be updated there's like like checkout is in so many places in that",
    "start": "2359380",
    "end": "2365500"
  },
  {
    "text": "regard that um building that into a completely separate service it would be possible because nothing is impossible",
    "start": "2365500",
    "end": "2372040"
  },
  {
    "text": "if you just have enough time and willingness but um that would be such a Monumental",
    "start": "2372040",
    "end": "2379060"
  },
  {
    "text": "undertaking you're basically rewriting Shopify at that point like that's I don't see that happening anytime soon",
    "start": "2379060",
    "end": "2385300"
  },
  {
    "text": "and there is a follow-up question on that is that how does the storefront talks with the checkout",
    "start": "2385300",
    "end": "2390820"
  },
  {
    "text": "it doesn't that's kind of like the beauty of it um what kind of like happens is that uh",
    "start": "2390820",
    "end": "2397060"
  },
  {
    "text": "there is uh you you have a cart right in which you're placing the products and",
    "start": "2397060",
    "end": "2403420"
  },
  {
    "text": "the moment that you know you start entering information like your email address or",
    "start": "2403420",
    "end": "2408700"
  },
  {
    "text": "your shipping address that's when we we start kind of like calling it a checkout instead of just a cart because it seems",
    "start": "2408700",
    "end": "2414280"
  },
  {
    "text": "there's the intent to to pay at some point at the end of this um",
    "start": "2414280",
    "end": "2419560"
  },
  {
    "text": "and so other than that it's it's very decoupled um uh and uh yeah like literally the cards",
    "start": "2419560",
    "end": "2426760"
  },
  {
    "text": "is purely client side uh until you actually start storing some some buyer information",
    "start": "2426760",
    "end": "2431940"
  },
  {
    "text": "and and coming back for the topic of how doing first boundaries between the teams",
    "start": "2431940",
    "end": "2437500"
  },
  {
    "text": "like interface to people doesn't create the spaghett code how do you enforce",
    "start": "2437500",
    "end": "2442900"
  },
  {
    "text": "this do you have some some features functions to keep your architecture to test that the code doesn't bother",
    "start": "2442900",
    "end": "2449500"
  },
  {
    "text": "because the thinners of people is when they are under pressure they usually take shortcuts so how do you enforce",
    "start": "2449500",
    "end": "2456460"
  },
  {
    "text": "this and if you enforce this automatically or not yeah and we do use that automatically I will share it in",
    "start": "2456460",
    "end": "2463720"
  },
  {
    "text": "the chat it is a open source Library called puckverk",
    "start": "2463720",
    "end": "2469119"
  },
  {
    "text": "um and um using static analysis this allows us to",
    "start": "2469119",
    "end": "2475119"
  },
  {
    "text": "um uh analyze uh hey is this is something in the payment processing",
    "start": "2475119",
    "end": "2480339"
  },
  {
    "text": "component talking to Something in the order component but it's kind of like",
    "start": "2480339",
    "end": "2485500"
  },
  {
    "text": "directly using the order object without going through the order public API to",
    "start": "2485500",
    "end": "2491440"
  },
  {
    "text": "update the amount you can imagine with an order there's a lot of State on it right like there is the amount before",
    "start": "2491440",
    "end": "2497260"
  },
  {
    "text": "discounts the amount before taxes the amount before discount and taxes and if I from my com from the payments",
    "start": "2497260",
    "end": "2504160"
  },
  {
    "text": "component just start updating one little number their internal consistency is all messed up and it's going to lead to a",
    "start": "2504160",
    "end": "2509680"
  },
  {
    "text": "lot of pain for everybody involved um and especially the order team I'm",
    "start": "2509680",
    "end": "2514839"
  },
  {
    "text": "using them as kind of like you know the example because they are like to check out sort of like intertwined into almost everything else they're the ones um that",
    "start": "2514839",
    "end": "2522520"
  },
  {
    "text": "have traditionally felt the most pain there so uh they were the ones that were very eager to adopt these new practices",
    "start": "2522520",
    "end": "2528280"
  },
  {
    "text": "and make sure that there would be no way anymore for people to internally mutate that state",
    "start": "2528280",
    "end": "2534160"
  },
  {
    "text": "um either intentionally or by accident and and and this library that you shared is like a feature function that broke",
    "start": "2534160",
    "end": "2540339"
  },
  {
    "text": "the build basically if I do this if uh yeah like um",
    "start": "2540339",
    "end": "2545560"
  },
  {
    "text": "as you can imagine you know like initially we just started logging warnings and eventually",
    "start": "2545560",
    "end": "2551200"
  },
  {
    "text": "um These Warnings are kind of like added to a list being like okay we know that everything on this list that this is bad",
    "start": "2551200",
    "end": "2557440"
  },
  {
    "text": "but if you introduce a new thing that is not yet on that list then it at least it breaks the build which means that me and",
    "start": "2557440",
    "end": "2564220"
  },
  {
    "text": "me breaker um needs to now make a call um am I going to add to that list",
    "start": "2564220",
    "end": "2571000"
  },
  {
    "text": "which is not great but sometimes for reasons of emergency um you you sometimes just need to add a",
    "start": "2571000",
    "end": "2577180"
  },
  {
    "text": "little bit more Badness before you can make it good again in other cases it's just no sorry go back redo your PR like",
    "start": "2577180",
    "end": "2584260"
  },
  {
    "text": "you know um your use case does not warrant making it worse than it is Boy Scout rule make",
    "start": "2584260",
    "end": "2590200"
  },
  {
    "text": "it better and typically uh you know like at Shopify we're all trying to make this",
    "start": "2590200",
    "end": "2596140"
  },
  {
    "text": "system better so usually if you don't know how to do it or maybe you're missing an internal API or not sure",
    "start": "2596140",
    "end": "2601660"
  },
  {
    "text": "which one to use you hit up the order team and being like hey so okay the bill",
    "start": "2601660",
    "end": "2606819"
  },
  {
    "text": "broke I understand this was not the pro this was not how it's supposed to be but can you help me figure out how I am",
    "start": "2606819",
    "end": "2612460"
  },
  {
    "text": "supposed to do it then but yeah it's one of these things where the uh the the question the answer in",
    "start": "2612460",
    "end": "2619180"
  },
  {
    "text": "short is it depends yep yep but usually this type of problems behaves in that",
    "start": "2619180",
    "end": "2624700"
  },
  {
    "text": "way on and and question and about the future is that",
    "start": "2624700",
    "end": "2631000"
  },
  {
    "text": "Shopify is well known but by being one of the height scale of Ruby use cases in the",
    "start": "2631000",
    "end": "2639220"
  },
  {
    "text": "world and how do you feel the future of the language and the platform and ecosystem",
    "start": "2639220",
    "end": "2644380"
  },
  {
    "text": "yeah so Shopify employees uh people who work on",
    "start": "2644380",
    "end": "2650020"
  },
  {
    "text": "Ruby and on Rails itself um so",
    "start": "2650020",
    "end": "2656079"
  },
  {
    "text": "um recent uh in Ruby 3.0 there is an experimental just-in-time compiler",
    "start": "2656079",
    "end": "2661359"
  },
  {
    "text": "called yjit or yet another just in time compiler",
    "start": "2661359",
    "end": "2666700"
  },
  {
    "text": "um and uh where earlier efforts in Ruby to build just-in-time compilation have",
    "start": "2666700",
    "end": "2672880"
  },
  {
    "text": "shown effective in benchmarks the the kind of like the elusive thing was to see an actual speed up in in rails",
    "start": "2672880",
    "end": "2679540"
  },
  {
    "text": "applications or web apps in general since this team was working on Shopify of course you know their mission was to",
    "start": "2679540",
    "end": "2685839"
  },
  {
    "text": "make a jits that would actually also speed up rails use cases um so in Ruby 3.0 it shift as an",
    "start": "2685839",
    "end": "2692859"
  },
  {
    "text": "experimental feature and I think it was somewhere around 20 speed up",
    "start": "2692859",
    "end": "2698319"
  },
  {
    "text": "um in an average Ruby if in an average reels app um they are for Ruby 3.1 which is due to",
    "start": "2698319",
    "end": "2704800"
  },
  {
    "text": "be released this Christmas um they've decided to rewrite it in Rust because they figured it is it's going to",
    "start": "2704800",
    "end": "2711160"
  },
  {
    "text": "be easier to maintain and rust than it is in C and while they are rewriting YG and rust",
    "start": "2711160",
    "end": "2718480"
  },
  {
    "text": "they've also seized a few opportunities to make some small improvements along the way as well",
    "start": "2718480",
    "end": "2726099"
  },
  {
    "text": "I'll also put that in the chats and it's something that we are looking forward",
    "start": "2726099",
    "end": "2731140"
  },
  {
    "text": "for the ecosystem especially because this is this is there's a lot of investment of Shopify in this effort",
    "start": "2731140",
    "end": "2737140"
  },
  {
    "text": "because I followed this work closely yeah and and if Shopify works you'll be",
    "start": "2737140",
    "end": "2743619"
  },
  {
    "text": "soon be able to produce a great use case for this technology and this could be a breakthrough for the whole UB ecosystem",
    "start": "2743619",
    "end": "2749920"
  },
  {
    "text": "I think yeah yeah and and you know you can imagine at our scale running so many",
    "start": "2749920",
    "end": "2755740"
  },
  {
    "text": "application servers um and and many applications that you know like a 20 increase for us is is",
    "start": "2755740",
    "end": "2762099"
  },
  {
    "text": "very sizable as well like that means we have to scale up list servers by for the next Black Friday yeah and probably on",
    "start": "2762099",
    "end": "2769359"
  },
  {
    "text": "your search a scale of the code base you probably have all possible Corner craze in Ruby",
    "start": "2769359",
    "end": "2776500"
  },
  {
    "text": "and rails framework to be tested by such technology so you'll be a good validation for the whole community on",
    "start": "2776500",
    "end": "2782260"
  },
  {
    "text": "this yes yeah our monolith runs um very recent development versions of",
    "start": "2782260",
    "end": "2788200"
  },
  {
    "text": "Ruby and of rails so typically you know when we um when something changes in rails we're among the first to catch any",
    "start": "2788200",
    "end": "2795099"
  },
  {
    "text": "regressions but either in performance or compatibility um so we can then fix that and",
    "start": "2795099",
    "end": "2800859"
  },
  {
    "text": "contribute that back so by the time that version actually is released in a stable version",
    "start": "2800859",
    "end": "2806560"
  },
  {
    "text": "it's basically been tested for at least a year uh at Shopify already and you know we also then spend time upgrading",
    "start": "2806560",
    "end": "2813760"
  },
  {
    "text": "Gems or or whatever that needs needs fixing yeah they're super cool and the",
    "start": "2813760",
    "end": "2818800"
  },
  {
    "text": "last question before we jump from The Hangout is that uh Ryan asked if do you",
    "start": "2818800",
    "end": "2824619"
  },
  {
    "text": "use anything similar to pack work for your gold code as well to avoid the the",
    "start": "2824619",
    "end": "2830380"
  },
  {
    "text": "the dependence Helens spaghetti gold um that's a good question I'll have to",
    "start": "2830380",
    "end": "2835780"
  },
  {
    "text": "admit that my work doesn't involve a lot of writing go um I don't believe we have something",
    "start": "2835780",
    "end": "2842079"
  },
  {
    "text": "like pack work in go because we don't have a very big app like our monolith",
    "start": "2842079",
    "end": "2848280"
  },
  {
    "text": "Ingo at all um go is mostly used for um kind of like very specific pieces of",
    "start": "2848280",
    "end": "2856000"
  },
  {
    "text": "our infrastructure um less so on kind of like the merchant or buyer-facing things",
    "start": "2856000",
    "end": "2861880"
  },
  {
    "text": "um and they they tend to be small very focused apps nothing big and monolithic",
    "start": "2861880",
    "end": "2866980"
  },
  {
    "text": "I think also but here's here's where I'm going to be very honest I don't know go that well I think also ghost packaging",
    "start": "2866980",
    "end": "2872980"
  },
  {
    "text": "system by out of the box is is more strict than what a typical reels app would prescribe you",
    "start": "2872980",
    "end": "2880559"
  },
  {
    "text": "Bart thank you so much for your time this is a great presentation and then a lot of insights for me here and see I",
    "start": "2880660",
    "end": "2887740"
  },
  {
    "text": "invite everyone to hang out more with Bart on the the Hangouts room so see you there and thank you again thanks either",
    "start": "2887740",
    "end": "2894880"
  },
  {
    "text": "this was a lot of fun hoping to see you all there see you bye right",
    "start": "2894880",
    "end": "2901200"
  },
  {
    "text": "[Music]",
    "start": "2903550",
    "end": "2908999"
  }
]