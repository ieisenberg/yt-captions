[
  {
    "start": "0",
    "end": "133000"
  },
  {
    "text": "I hope you're good um I'm really glad to be here at forwardjs I was actually in the past one which was six months ago I",
    "start": "760",
    "end": "8280"
  },
  {
    "text": "suggested Dave since it's one of the few conferences that are done like twice a year to use cember so that they can use",
    "start": "8280",
    "end": "14839"
  },
  {
    "text": "like minor version for every conference per year and every time they change ear major version or something like that",
    "start": "14839",
    "end": "20960"
  },
  {
    "text": "because it's confusing to have like two conferences of the same the same year but I don't know anyway so I'm here to",
    "start": "20960",
    "end": "28160"
  },
  {
    "text": "talk to you about basically react front end and that means that I'll be talking about observables streams and reactive",
    "start": "28160",
    "end": "36239"
  },
  {
    "text": "programming so hands up who has used observables",
    "start": "36239",
    "end": "41559"
  },
  {
    "text": "before okay it's not that many that's good because that means that you learn more probably so my name as I was saying",
    "start": "41559",
    "end": "49079"
  },
  {
    "text": "is Martin gikas but since we are in the tech world my Twitter handle is M gonto",
    "start": "49079",
    "end": "55399"
  },
  {
    "text": "if you want to follow me and increase my ego I would greatly appreciate it so let",
    "start": "55399",
    "end": "60680"
  },
  {
    "text": "me first introduce myself I'm a software developer from buenosaires Argentina so",
    "start": "60680",
    "end": "65920"
  },
  {
    "text": "this is my accent I hope you can understand it and I work at ozero ozero",
    "start": "65920",
    "end": "71680"
  },
  {
    "text": "is basically a SAS that helps you with authentication authorization the idea is that you pick an SDK for like angularjs",
    "start": "71680",
    "end": "79479"
  },
  {
    "text": "node.js iPhone Android whatever and then with a couple lines of code you get authentication working with username and",
    "start": "79479",
    "end": "86560"
  },
  {
    "text": "password or social things like Twitter Facebook GitHub or Enterprise providers like AC directory elab Sul unfortunately",
    "start": "86560",
    "end": "94720"
  },
  {
    "text": "I've run out of t-shirts so I won't be able to make you be my walking promotion today but next time probably I I I'll",
    "start": "94720",
    "end": "101920"
  },
  {
    "text": "have some so I used to be there coding JavaScript all day long so this was me",
    "start": "101920",
    "end": "110240"
  },
  {
    "text": "basically and now I'm actually a developer Advocate um and a lot of",
    "start": "110240",
    "end": "115479"
  },
  {
    "text": "people ask me what does it mean to be a developer Advocate and basically it's the same that I was was doing when I was",
    "start": "115479",
    "end": "120560"
  },
  {
    "text": "17 this is M singing in a karoki but instead of singing in a karoki I'm now speaking about technology in different",
    "start": "120560",
    "end": "127280"
  },
  {
    "text": "events in order to speak you still have to learn and for learning again programming so this talk is actually",
    "start": "127280",
    "end": "135000"
  },
  {
    "start": "133000",
    "end": "226000"
  },
  {
    "text": "about reactive frontend so let's actually start with that but before starting I want to give you a warning",
    "start": "135000",
    "end": "140920"
  },
  {
    "text": "let me actually increase the size this is the great thing about doing presentations with HTML you just zoom in",
    "start": "140920",
    "end": "146879"
  },
  {
    "text": "and everything works so we are going to learn a little bit about functional",
    "start": "146879",
    "end": "152519"
  },
  {
    "text": "programming we're going to learn a little bit about reactive programming but we are not learning anything about",
    "start": "152519",
    "end": "157640"
  },
  {
    "text": "functional reactive programming if I say functional reactive programming too many times a h programmer would come and",
    "start": "157640",
    "end": "163200"
  },
  {
    "text": "shoot at me basically so we're not learning about that just in case if somebody here is a h programmer we're",
    "start": "163200",
    "end": "168800"
  },
  {
    "text": "not doing that so one question that a lot of people of people ask it's like",
    "start": "168800",
    "end": "174760"
  },
  {
    "text": "why should we go functional so I have a very nice familiar imperative code like",
    "start": "174760",
    "end": "180360"
  },
  {
    "text": "the one that we see here this function is just basically checks for odd numbers",
    "start": "180360",
    "end": "185680"
  },
  {
    "text": "so it creates a results array and then it iterates over all the the the the the",
    "start": "185680",
    "end": "192239"
  },
  {
    "text": "the parameter that I got I that's for each to that and then for every number it checks if it's odd and if it's odd it",
    "start": "192239",
    "end": "199840"
  },
  {
    "text": "adds it to the results object with some exclamation marks and then Returns the result something that we can see here is",
    "start": "199840",
    "end": "206239"
  },
  {
    "text": "that we are creating this result object this result array in the beginning and then every time we iterate and we find a",
    "start": "206239",
    "end": "212760"
  },
  {
    "text": "not number we are mutating these results and then eventually returning so this",
    "start": "212760",
    "end": "218720"
  },
  {
    "text": "actually works perfectly this is nice so why should we actually go functional why should we learn functional programming",
    "start": "218720",
    "end": "225599"
  },
  {
    "text": "and the thing is that JavaScript as you know it is going to change very soon and",
    "start": "225599",
    "end": "232840"
  },
  {
    "text": "why is that because cores aren't getting much faster so a few years ago you were",
    "start": "232840",
    "end": "238439"
  },
  {
    "text": "actually coding an application for the browser in JavaScript and it was like really slow really really really slow so",
    "start": "238439",
    "end": "244760"
  },
  {
    "text": "what did you do to make it faster you waited three months to release it and that works because people's CPU",
    "start": "244760",
    "end": "251720"
  },
  {
    "text": "people's processors will get faster so in three months I'm the best programmer in the world because now it's like really performant it's working very well",
    "start": "251720",
    "end": "259040"
  },
  {
    "text": "but unfortunately we don't have that Advantage anymore because now cors aren't getting much faster so what is is",
    "start": "259040",
    "end": "266160"
  },
  {
    "text": "happening now instead of having one core we're having two 48 6 16 20 and what",
    "start": "266160",
    "end": "271840"
  },
  {
    "text": "that means is that if we want to make our applications faster in the browser we can't just wait now we need to be",
    "start": "271840",
    "end": "279360"
  },
  {
    "text": "able to write code that will run in this in this separate course and what that",
    "start": "279360",
    "end": "284639"
  },
  {
    "text": "means is that real concurrency is coming to JavaScript so this is the phase the",
    "start": "284639",
    "end": "290639"
  },
  {
    "text": "first time I said this these are the faes of the people like really is real concurrency coming to JavaScript what",
    "start": "290639",
    "end": "295759"
  },
  {
    "text": "does it mean will I have to change all my code and the nice thing is that it's not yet there but that's the main reason",
    "start": "295759",
    "end": "303199"
  },
  {
    "start": "298000",
    "end": "555000"
  },
  {
    "text": "why you should learn functional programming because functional programming actually has goals that",
    "start": "303199",
    "end": "308280"
  },
  {
    "text": "aligns with parallelism so that means that if I'm writing code that will run in separate concurrent cores functional",
    "start": "308280",
    "end": "316440"
  },
  {
    "text": "programming is good for that and that is because it Embraces immutable state which means that state cannot change and",
    "start": "316440",
    "end": "323240"
  },
  {
    "text": "it also Embraces no side effect in order to explain no side effects really really easy it means that if I'm calling a",
    "start": "323240",
    "end": "329960"
  },
  {
    "text": "function with X it will always return y so that means that whatever the the",
    "start": "329960",
    "end": "336000"
  },
  {
    "text": "function does doesn't depend on external State and doesn't modify external state",
    "start": "336000",
    "end": "341479"
  },
  {
    "text": "if I find a function that returns nothing it has side side effect because it's probably doing some change to some",
    "start": "341479",
    "end": "347759"
  },
  {
    "text": "state so why is this good for concurrency because so who here has",
    "start": "347759",
    "end": "354400"
  },
  {
    "text": "worked with threads either in like java.net or something like that hands up I'm sorry for you so if you have done",
    "start": "354400",
    "end": "362360"
  },
  {
    "text": "that you have used probably logs or mutex or stuff like that because let's imagine you have a thread that writes",
    "start": "362360",
    "end": "368160"
  },
  {
    "text": "one thread that reads and they are both operating on some State and if the the",
    "start": "368160",
    "end": "374240"
  },
  {
    "text": "one that writes does it before the one that it reads everything works but if the one that reads is reading something",
    "start": "374240",
    "end": "380000"
  },
  {
    "text": "before it's written well it won't work and in order to make that work I needed to add locks murx uh like lights and it",
    "start": "380000",
    "end": "387440"
  },
  {
    "text": "was like really hard but the thing is that if we now have some state that doesn't change if we have immutable",
    "start": "387440",
    "end": "394520"
  },
  {
    "text": "state that means that one thread doesn't have to wait for another and we won't have raise conditions anymore and if a",
    "start": "394520",
    "end": "401759"
  },
  {
    "text": "function doesn't change State and all it does is given an X request always return why it's much easier to deag it's much",
    "start": "401759",
    "end": "410160"
  },
  {
    "text": "easier than to maintain so that's that's the main reason why you should learn",
    "start": "410160",
    "end": "416160"
  },
  {
    "text": "functional programming so what does it mean to do fun fun basically we can",
    "start": "416160",
    "end": "421240"
  },
  {
    "text": "already do it with JavaScript we can call this map filter and reduce methods and it works so this is the same",
    "start": "421240",
    "end": "426840"
  },
  {
    "text": "function that I showed before and what it's doing is again it's receiving an array of numbers as a parameter it's",
    "start": "426840",
    "end": "432879"
  },
  {
    "text": "then it's then calling this filter method with a function and what this does is when I call this filter I'm",
    "start": "432879",
    "end": "438879"
  },
  {
    "text": "sending a predicate that will check for every number to see if it's OD or not so",
    "start": "438879",
    "end": "444000"
  },
  {
    "text": "we will iterate over all the numbers of the collection see if they are odd or not and if they are odd then they will",
    "start": "444000",
    "end": "449759"
  },
  {
    "text": "be added to a new array that new array is returned from this filter and then to",
    "start": "449759",
    "end": "455800"
  },
  {
    "text": "that new array I'm calling this map function which basically iterates again over all of the elements of the array",
    "start": "455800",
    "end": "462520"
  },
  {
    "text": "and it just returns that element plus some exclamation marks it again returns a new array and then that's returned so",
    "start": "462520",
    "end": "470319"
  },
  {
    "text": "the main difference is that we don't have this results object that we used to have so we're not mutating State we're",
    "start": "470319",
    "end": "476800"
  },
  {
    "text": "basically creating arrays on every step so this is in able we're not creating new objects so this will be much easier",
    "start": "476800",
    "end": "483000"
  },
  {
    "text": "to paralyze this will be much easier to work once we actually have concurrency in JavaScript so that's it that's the",
    "start": "483000",
    "end": "490599"
  },
  {
    "text": "end of the talk right and the thing is that it's not because I have a friend who was actually working at Netflix and",
    "start": "490599",
    "end": "498400"
  },
  {
    "text": "he actually encountered a problem with this approach so let me first tell you about the application they were doing an",
    "start": "498400",
    "end": "504960"
  },
  {
    "text": "application that's called Argus and it's basically a realtime dashboard for Netflix what they were doing is they had like",
    "start": "504960",
    "end": "511840"
  },
  {
    "text": "all of the people that were watching Netflix they had stats for them like how many movies were they seeing how many TV",
    "start": "511840",
    "end": "517599"
  },
  {
    "text": "shows were they seeing how much time were they paying attention or not so it had like dozens of Graphics it had web",
    "start": "517599",
    "end": "523880"
  },
  {
    "text": "sockets so that it could get real time information for people watching Netflix at that time and also lots of Rich users",
    "start": "523880",
    "end": "530240"
  },
  {
    "text": "interaction which means clicking on a button or things like that so this is the",
    "start": "530240",
    "end": "535959"
  },
  {
    "text": "app so as you can see you can it has like a cros you can zoom in you can change like one day two days and you can",
    "start": "535959",
    "end": "542399"
  },
  {
    "text": "see in real time all of the information that is gotten with lots of graphics and lots of interactions so they built it",
    "start": "542399",
    "end": "550560"
  },
  {
    "text": "they use functional programming because then they they they wanted to paralyze this in the future and they worked",
    "start": "550560",
    "end": "556920"
  },
  {
    "text": "towards the first big demo and they were feeling like really confident because they created reusable components for",
    "start": "556920",
    "end": "564279"
  },
  {
    "text": "these Graphics they were also getting all of the information in real time from the websocket they were using a very big",
    "start": "564279",
    "end": "571360"
  },
  {
    "text": "test data and they got all of the mouse interactions working so they were really really happy they were like this is",
    "start": "571360",
    "end": "577200"
  },
  {
    "text": "going to work so on the demo day they decided to connect this to the production database and well this",
    "start": "577200",
    "end": "586040"
  },
  {
    "text": "happened yeah that's the theme like escaping after it broke so this is what",
    "start": "590480",
    "end": "595519"
  },
  {
    "text": "happened and why did this happen because they were using too much function pring they were using a lot of R map filter",
    "start": "595519",
    "end": "602600"
  },
  {
    "text": "and reduce and what's the problem because let's if we go again to the function I showed you before I was",
    "start": "602600",
    "end": "608720"
  },
  {
    "text": "calling first a filter and then a map how did it work the filter iterated over all the elements of the array that it",
    "start": "608720",
    "end": "615120"
  },
  {
    "text": "got it checked for the odds and returned a new array then we called the map the",
    "start": "615120",
    "end": "620800"
  },
  {
    "text": "map iterated again over all the elements of the array added exclamation marks and return the new AR so that means that",
    "start": "620800",
    "end": "627360"
  },
  {
    "text": "every operation that I do in here is first iterating over all the elements of the collection again so if I have filter",
    "start": "627360",
    "end": "633920"
  },
  {
    "text": "map filter map I will iterate over all the elements of the collection four times and also each of those return a",
    "start": "633920",
    "end": "641399"
  },
  {
    "text": "new AR so in this case I'm I'm I'm returning a function with only the last",
    "start": "641399",
    "end": "647000"
  },
  {
    "text": "array so all the inter intermediary arrays that are created for the filter map filter map which are four new arrays",
    "start": "647000",
    "end": "653440"
  },
  {
    "text": "I don't care about them but they are created and they need to be garbage collected and garbage collection takes a",
    "start": "653440",
    "end": "660040"
  },
  {
    "text": "lot of time if you have too many AR and also iterating over Els also take a lot of time so that means that nothing",
    "start": "660040",
    "end": "666360"
  },
  {
    "text": "worked because they had too much information too much intermediary arise too much garbage collection and this is",
    "start": "666360",
    "end": "672320"
  },
  {
    "text": "when reactive programming actually comes because what they realized is that well",
    "start": "672320",
    "end": "678399"
  },
  {
    "start": "678000",
    "end": "751000"
  },
  {
    "text": "we need stream processing what we need is reactive extensions of sbls so what",
    "start": "678399",
    "end": "684399"
  },
  {
    "text": "is unobservable how do we use it it's basically the same instead of saying R filter MK with do observable filter map",
    "start": "684399",
    "end": "691440"
  },
  {
    "text": "so it's pretty much the same like if you see the syntax but what it's doing behind is very different because when",
    "start": "691440",
    "end": "698399"
  },
  {
    "text": "I'm doing the filter a map to the array it's iterating returning new array when I do it on an observable it's specifying",
    "start": "698399",
    "end": "705959"
  },
  {
    "text": "some transformation that I want to happen so that means that when I do this observable filter map nothing happens",
    "start": "705959",
    "end": "712600"
  },
  {
    "text": "all that I'm doing here is defining a transformation chain that will occur",
    "start": "712600",
    "end": "718680"
  },
  {
    "text": "once I need to get the information and once I need to get the information what it will do is it will iterate over all",
    "start": "718680",
    "end": "724279"
  },
  {
    "text": "the elements from this basic observable and for each of them first it will run this filter operation it will say is",
    "start": "724279",
    "end": "730399"
  },
  {
    "text": "this odd and if it's if it's odd it will then if sorry if it's not odd it will",
    "start": "730399",
    "end": "736360"
  },
  {
    "text": "say okay I don't care if it is odd then it will run it through the map operation",
    "start": "736360",
    "end": "741519"
  },
  {
    "text": "and add this exclamation marks so no intermediary array is created and I'm iterating over the main collection this",
    "start": "741519",
    "end": "748079"
  },
  {
    "text": "observable only once and that's like pretty nice but the question is what else can observables do",
    "start": "748079",
    "end": "755880"
  },
  {
    "start": "751000",
    "end": "886000"
  },
  {
    "text": "and it comes to the definition of an observable an observable is basically a representation of any collection of",
    "start": "755880",
    "end": "762279"
  },
  {
    "text": "values throughout any time so what does it mean an array is a collection of",
    "start": "762279",
    "end": "768120"
  },
  {
    "text": "values at an instant time because right now I'm creating this array with four",
    "start": "768120",
    "end": "773560"
  },
  {
    "text": "values and that array is basically a collection of values but that means that this this is not only an aray it could",
    "start": "773560",
    "end": "780880"
  },
  {
    "text": "be for example Mouse events so Mouse events are basically click click click",
    "start": "780880",
    "end": "786399"
  },
  {
    "text": "is an event object so we could create an observable which is a collection of event objects throughout time because I",
    "start": "786399",
    "end": "794560"
  },
  {
    "text": "click it now I click it in 10 seconds again I click it in 20 seconds then so I can have an observable throughout those",
    "start": "794560",
    "end": "800920"
  },
  {
    "text": "30 seconds that will have these three click events and it's a collection of",
    "start": "800920",
    "end": "806440"
  },
  {
    "text": "values over some time so that is pretty cool and and the thing is",
    "start": "806440",
    "end": "811519"
  },
  {
    "text": "that observes can be merged concatenated and sipped like any other collection so if you have used low Dash or underscore",
    "start": "811519",
    "end": "819240"
  },
  {
    "text": "all of the methods that exist there like not only like this Z merge and cenate but intersect Union all of them that",
    "start": "819240",
    "end": "825079"
  },
  {
    "text": "exist there also work on observables you can also run all of those operations in an observable and also create your",
    "start": "825079",
    "end": "832440"
  },
  {
    "text": "own and the thing is that observ are basically a pattern to do three things",
    "start": "832440",
    "end": "837720"
  },
  {
    "text": "first to start ad is data Stream So to set it up then to emit zero to end",
    "start": "837720",
    "end": "843160"
  },
  {
    "text": "messages and those messages are run through this transformation chain and once that transformation change ends I'm",
    "start": "843160",
    "end": "849399"
  },
  {
    "text": "tearing down this observable and I can do some operation when I'm tearing it down so this is all that observable is",
    "start": "849399",
    "end": "856120"
  },
  {
    "text": "we will see in a in in in in a minute in a few minutes like two examples of how we can do that so that it's not like",
    "start": "856120",
    "end": "862360"
  },
  {
    "text": "this theorical but something that is important is then what is a data stream",
    "start": "862360",
    "end": "867880"
  },
  {
    "text": "and a data stream can be an array of data it can be mouse and keyboard interaction D events Network IO",
    "start": "867880",
    "end": "873519"
  },
  {
    "text": "animation speech recognition Choice think input or anything anything that is a collection of values Through Time can",
    "start": "873519",
    "end": "880920"
  },
  {
    "text": "be unobservable that's basically these are just examples of things that you can do with that so meanwhile going back to",
    "start": "880920",
    "end": "888519"
  },
  {
    "start": "886000",
    "end": "1183000"
  },
  {
    "text": "Netflix uh observ actually solve another problem for them and it's that sockets",
    "start": "888519",
    "end": "893880"
  },
  {
    "text": "die so this they had this this application this dashboard with we",
    "start": "893880",
    "end": "899160"
  },
  {
    "text": "sockets connected to every customer they had so imagine that I'm looking at the dashboard and I'm like yeah this is cool",
    "start": "899160",
    "end": "904720"
  },
  {
    "text": "but I got to move to the other building so I close the laptop lead the minute that I close the laptop lead that socket",
    "start": "904720",
    "end": "910199"
  },
  {
    "text": "is killed and then when I go back I open it back that socket has to be relieved",
    "start": "910199",
    "end": "916839"
  },
  {
    "text": "however it's not that easy because when when you were seeing that dashboard you were actually connected to 10 of",
    "start": "916839",
    "end": "922440"
  },
  {
    "text": "different web sockets each of those web sockets must receive a subscrition message and then you got like different",
    "start": "922440",
    "end": "927959"
  },
  {
    "text": "messages from them which you didn't know which ones you got until now and when it's closed and reopened that means that",
    "start": "927959",
    "end": "934360"
  },
  {
    "text": "I have to keep state of which sockets I I had called before at what state they were where did they have the",
    "start": "934360",
    "end": "940839"
  },
  {
    "text": "subscription did they not and that's like really complicated but this could be an example of how we can actually use",
    "start": "940839",
    "end": "948040"
  },
  {
    "text": "observables to solve it so what they created is first a socket observable and",
    "start": "948040",
    "end": "954079"
  },
  {
    "text": "what you see here is the same pattern as before so when the setup of this observable basically the web socket is",
    "start": "954079",
    "end": "960360"
  },
  {
    "text": "open then it emits the zero to end messages so it gets all the messages",
    "start": "960360",
    "end": "965399"
  },
  {
    "text": "from the websocket and once all the web all all the messages are sent or if there's an",
    "start": "965399",
    "end": "972160"
  },
  {
    "text": "error in the web socket and the connection is closed I get either an error and it closes the socker the",
    "start": "972160",
    "end": "978199"
  },
  {
    "text": "socket or I get all the messages and again it closes the socket so this is a basic observable that wraps the the web",
    "start": "978199",
    "end": "985279"
  },
  {
    "text": "socket and then they had a multiplex data observable built on top of that and what that did is on the setup after the",
    "start": "985279",
    "end": "992079"
  },
  {
    "text": "web socket was opened it sent the subscription message then they filtered out all of the results that they cared",
    "start": "992079",
    "end": "998480"
  },
  {
    "text": "and then once it when it was about to tear down the socket it would send the UN subscription",
    "start": "998480",
    "end": "1004480"
  },
  {
    "text": "message and the most interesting part of this is that observers can retry so in",
    "start": "1004480",
    "end": "1010319"
  },
  {
    "text": "this SEO code what you can see is that I'm first sending the subscription message then I'm filtering over I'm",
    "start": "1010319",
    "end": "1016959"
  },
  {
    "text": "getting all the results from the obal I'm filtering over them and then eventually I'm sending this un",
    "start": "1016959",
    "end": "1022720"
  },
  {
    "text": "subscription and the nice thing about this is that if the laptop is lead is closed that socket will error out and",
    "start": "1022720",
    "end": "1030199"
  },
  {
    "text": "when that socket errors out I can use this retry operation and what the retry",
    "start": "1030199",
    "end": "1035438"
  },
  {
    "text": "will let let me do is retry the whole Ober again what does it mean to retry the whole Ober again it means to open",
    "start": "1035439",
    "end": "1042520"
  },
  {
    "text": "again the web socket connection send the subscription message and start getting the information again so I don't have to",
    "start": "1042520",
    "end": "1048360"
  },
  {
    "text": "code all of that redo and things like that I can just use this retry operator",
    "start": "1048360",
    "end": "1053559"
  },
  {
    "text": "which will take care of actually retrying until it works because the this observable is erroring out because the",
    "start": "1053559",
    "end": "1060160"
  },
  {
    "text": "web socket was actually disconnected this is a pretty complicated example but we'll see a more",
    "start": "1060160",
    "end": "1065440"
  },
  {
    "text": "simple example in a second so before continuing one fair",
    "start": "1065440",
    "end": "1070559"
  },
  {
    "text": "warning you should never trust the developer that has nothing bad to say so in this case what is bad is that rxjs so",
    "start": "1070559",
    "end": "1078240"
  },
  {
    "text": "using OB has a pretty decent learning curve so in order to use observables you",
    "start": "1078240",
    "end": "1083480"
  },
  {
    "text": "have to change the way you think about the problem because it's different how you set the problem up versus how you do",
    "start": "1083480",
    "end": "1089640"
  },
  {
    "text": "it normally and then there are a lot of operators that you need to learn not only this map reduce filter but you have",
    "start": "1089640",
    "end": "1096080"
  },
  {
    "text": "this retry map latest select lat test there are a lot of them and you'll have to learn a few of them so that you can",
    "start": "1096080",
    "end": "1102559"
  },
  {
    "text": "actually use them what happens to me a lot is that I don't know that an operator exists so I build it myself and",
    "start": "1102559",
    "end": "1108840"
  },
  {
    "text": "I'm like oh this existed so why did I lose my time but well that's like part of learning this basically and the other",
    "start": "1108840",
    "end": "1115039"
  },
  {
    "text": "thing for observes is that sometimes they work as sync and sometimes they work sync so for the vanging that can",
    "start": "1115039",
    "end": "1121039"
  },
  {
    "text": "bring a few problems so before going to the two",
    "start": "1121039",
    "end": "1126760"
  },
  {
    "text": "examples I want to show one more thing which is when we were coding before let's imagine that we had a value C and",
    "start": "1126760",
    "end": "1132880"
  },
  {
    "text": "C depending on A and B so I have a plus b and then eventually I'm doing something with C if a and B change I",
    "start": "1132880",
    "end": "1139880"
  },
  {
    "text": "have to be aware of that change so that I can change again C so that means that c is like completely coupled to A and B",
    "start": "1139880",
    "end": "1147640"
  },
  {
    "text": "because every time that A or B change I need to know of that change so I can change back C the next thing with",
    "start": "1147640",
    "end": "1154600"
  },
  {
    "text": "observables is that I can actually have an observable of a an observable of B",
    "start": "1154600",
    "end": "1159880"
  },
  {
    "text": "and I can combine them and create a new observable of c and now I can work with this observable of c and whenever",
    "start": "1159880",
    "end": "1165640"
  },
  {
    "text": "something changes or On A or B that will will automatically change this observable C and what that means is that",
    "start": "1165640",
    "end": "1174039"
  },
  {
    "text": "it's not coupled that now I only have to care about this C observable I don't care with it where it comes from because",
    "start": "1174039",
    "end": "1179480"
  },
  {
    "text": "I know that I will always get the right information but the question is like how",
    "start": "1179480",
    "end": "1185960"
  },
  {
    "start": "1183000",
    "end": "1233000"
  },
  {
    "text": "can we use this today what can we do to use it today right now and for that",
    "start": "1185960",
    "end": "1191159"
  },
  {
    "text": "we're basically going to use our xjs which is reactive extension for JavaScript this library was created by",
    "start": "1191159",
    "end": "1197520"
  },
  {
    "text": "Microsoft one of the main guys who did it was Eric Meer who is like a genius in function programming and observables in",
    "start": "1197520",
    "end": "1203440"
  },
  {
    "text": "general so it's a pretty good library and for these examples I will be using",
    "start": "1203440",
    "end": "1208799"
  },
  {
    "text": "the angular toolkit so this means that all of the examples are angular code however all of all of what I show works",
    "start": "1208799",
    "end": "1216120"
  },
  {
    "text": "for angular works for react works for che they work for everything and reactive extensions have toolkit for all",
    "start": "1216120",
    "end": "1222520"
  },
  {
    "text": "of those Frameworks because the core is always the same they just have like a little layer on top that will make it to",
    "start": "1222520",
    "end": "1228720"
  },
  {
    "text": "be easy to code in that library or or framework so let's actually start simple let's",
    "start": "1228720",
    "end": "1235720"
  },
  {
    "start": "1233000",
    "end": "1775000"
  },
  {
    "text": "imagine a counter app a counter app is like the hello world for observables so in here I have a button and every time I",
    "start": "1235720",
    "end": "1241240"
  },
  {
    "text": "click on the button the counter increases however what you can see is that the counter is not increasing",
    "start": "1241240",
    "end": "1247760"
  },
  {
    "text": "always the same amount every time I click it it increases a different amount and that's because what I'm doing is I'm",
    "start": "1247760",
    "end": "1254039"
  },
  {
    "text": "going to the server I'm asking the server what number should I increase the counter when I get back the result then",
    "start": "1254039",
    "end": "1260679"
  },
  {
    "text": "I first log that somewhere and then I just increase this counter so basically",
    "start": "1260679",
    "end": "1266360"
  },
  {
    "text": "I it's increasing a different number because I'm getting that value from the server so how do we implement this first",
    "start": "1266360",
    "end": "1272840"
  },
  {
    "text": "we have a button and this NG click is like an onclick it's basically an click Handler and what I'm saying is whenever",
    "start": "1272840",
    "end": "1279440"
  },
  {
    "text": "this is Click call this function this increase counter function and then I'm just showing the counter value which",
    "start": "1279440",
    "end": "1285799"
  },
  {
    "text": "will keep on changing whenever I click so if you write like regular angularjs",
    "start": "1285799",
    "end": "1291840"
  },
  {
    "text": "code or regular front end code you will have this increased counter function this increased counter method which will",
    "start": "1291840",
    "end": "1297480"
  },
  {
    "text": "be the event handler and in there what I'm doing is I'm first asking my API",
    "start": "1297480",
    "end": "1302600"
  },
  {
    "text": "server get the counter amount so I'm saying API server how much should I count once I get the value of how much I",
    "start": "1302600",
    "end": "1310000"
  },
  {
    "text": "should count I then log it to some other server because for me it's important to log it and once I get that back I just",
    "start": "1310000",
    "end": "1317799"
  },
  {
    "text": "update this counter object with whatever it had before plus what the server just",
    "start": "1317799",
    "end": "1323320"
  },
  {
    "text": "returned and that's what every time that I click it that's what it's increasing the number so this is how I would do it",
    "start": "1323320",
    "end": "1330000"
  },
  {
    "text": "regularly writing like normal JavaScript code in this case with promises it could be with callbacks or with anything else",
    "start": "1330000",
    "end": "1336880"
  },
  {
    "text": "so how do we turn this to an observable and this is basically the",
    "start": "1336880",
    "end": "1342360"
  },
  {
    "text": "code the first thing that we're doing just because it is angular is adding the module dependency for RX if we were",
    "start": "1342360",
    "end": "1349279"
  },
  {
    "text": "using jQuery or react we would just either include the script tag in the",
    "start": "1349279",
    "end": "1354840"
  },
  {
    "text": "index.html or we would use like commonjs or import system from egasp 6 and we",
    "start": "1354840",
    "end": "1360039"
  },
  {
    "text": "would import this RX dependency once we have that RX dependency we're calling this dollar create observable function",
    "start": "1360039",
    "end": "1367279"
  },
  {
    "text": "so what this is doing is every time that this increase counter is clicked it it",
    "start": "1367279",
    "end": "1373360"
  },
  {
    "text": "will add a new value to my stream to my infinite list so this dollar create",
    "start": "1373360",
    "end": "1378720"
  },
  {
    "text": "function will return me an infinite list of clicks at first it will be empty but",
    "start": "1378720",
    "end": "1384360"
  },
  {
    "text": "then every time that somebody Clicks in there I will have a new value so imagine",
    "start": "1384360",
    "end": "1389480"
  },
  {
    "text": "that it's empty somebody clicks I get a value right now 5 seconds later somebody clicks I get a second value to this",
    "start": "1389480",
    "end": "1396120"
  },
  {
    "text": "infinite click 10 seconds later somebody clicks then I have a third value in this list so all this is doing is creating",
    "start": "1396120",
    "end": "1403480"
  },
  {
    "text": "this infinite list of clicks and after this what I'm adding is the transformation chain that I said before",
    "start": "1403480",
    "end": "1410400"
  },
  {
    "text": "so the first CH transformation I'm doing is I'm converting the clicks to the",
    "start": "1410400",
    "end": "1415520"
  },
  {
    "text": "counter amount I need to sum on each step so I have click click click now I",
    "start": "1415520",
    "end": "1422320"
  },
  {
    "text": "will get three four five and that's because for each click I'm actually",
    "start": "1422320",
    "end": "1428320"
  },
  {
    "text": "converting that to a number that I got from the server once I got that I needed to log",
    "start": "1428320",
    "end": "1434400"
  },
  {
    "text": "it to the server and that log server function is a a function that has a side",
    "start": "1434400",
    "end": "1439840"
  },
  {
    "text": "effect why is that because it returns nothing so that means that it's doing something that has a side effect",
    "start": "1439840",
    "end": "1445760"
  },
  {
    "text": "something that is cool about observ is that we can use this do function which lets me isolate side effects so that",
    "start": "1445760",
    "end": "1452640"
  },
  {
    "text": "they don't bother the rest of my code so in here I'm just logging that number and after that I'm using this scan function",
    "start": "1452640",
    "end": "1460000"
  },
  {
    "text": "and I'm it's basically a sum it's summing every new value that I get to the one that I previously had so again I",
    "start": "1460000",
    "end": "1466279"
  },
  {
    "text": "have click click click that got transformed to three 4 five and",
    "start": "1466279",
    "end": "1472840"
  },
  {
    "text": "now it gets transformed the first value is three because it was 0 + 3 equal 3",
    "start": "1472840",
    "end": "1478240"
  },
  {
    "text": "the second value will now be seven because I had the three I got the four 3",
    "start": "1478240",
    "end": "1483399"
  },
  {
    "text": "+ 4 equal 7 and the last number will actually be a 12 because I had a seven I",
    "start": "1483399",
    "end": "1489720"
  },
  {
    "text": "received a five now I got 12 I did practice the math I'm not that good at math I always come like this but what",
    "start": "1489720",
    "end": "1497200"
  },
  {
    "text": "does it mean that means that had click click click that got converted to 345 and that now got converted to",
    "start": "1497200",
    "end": "1504440"
  },
  {
    "text": "3712 and at this point this is the point at which I want to show the values in",
    "start": "1504440",
    "end": "1511080"
  },
  {
    "text": "the UI this is the point of this transformation chain that I care about and that's when I use this subscribe",
    "start": "1511080",
    "end": "1517640"
  },
  {
    "text": "this subscribe is what changes this stream into an observable and that's because it it it it's still an infinite",
    "start": "1517640",
    "end": "1525240"
  },
  {
    "text": "list but now I'm observing the value because I now I care what value it has",
    "start": "1525240",
    "end": "1531279"
  },
  {
    "text": "so this subscribe is the one that is actually running all of the transformation that I put before if I",
    "start": "1531279",
    "end": "1537840"
  },
  {
    "text": "only put before the flat map they do an scan and I didn't have any subscribe this would know nothing and that's",
    "start": "1537840",
    "end": "1544640"
  },
  {
    "text": "because as I said before an observable is lazy an observable is just the definition of transformation that I want",
    "start": "1544640",
    "end": "1550880"
  },
  {
    "text": "to apply at a certain time and this subscribe is what is triggering these Transformations because I'm saying I",
    "start": "1550880",
    "end": "1557640"
  },
  {
    "text": "care about the values and since I care about the values those values need to be calculated and that means that these",
    "start": "1557640",
    "end": "1563360"
  },
  {
    "text": "Transformations have to be run so in here and saying I care about this 3 72",
    "start": "1563360",
    "end": "1569840"
  },
  {
    "text": "so let's subscribe to that and every time you get a new number in this infinite list notify me so I get this",
    "start": "1569840",
    "end": "1575520"
  },
  {
    "text": "counter and then I'm just setting that to the dollar scope.c counter so it gets shown in the",
    "start": "1575520",
    "end": "1582159"
  },
  {
    "text": "UI I let that sync for a minute second parameter that we have here in the Subscribe is it's a function",
    "start": "1582159",
    "end": "1589159"
  },
  {
    "text": "that will let me handle errors the nice thing about this is that this error function will let me handle errors that",
    "start": "1589159",
    "end": "1595080"
  },
  {
    "text": "can happen either in the flat map in the do in the scan throughout the transformation chain whatever error is",
    "start": "1595080",
    "end": "1601720"
  },
  {
    "text": "there I can actually handle handle it in here in this subscribe and that's it",
    "start": "1601720",
    "end": "1607279"
  },
  {
    "text": "that's all I need and in this case I'm showing everything because I converted click click click to 3 4 five and then",
    "start": "1607279",
    "end": "1614399"
  },
  {
    "text": "to 3 72 then I'm saying okay I want to show that so I I showed the three then the seven then the 12 and that got",
    "start": "1614399",
    "end": "1621159"
  },
  {
    "text": "showed every time that somebody clicked and the nice the last thing is that an",
    "start": "1621159",
    "end": "1627440"
  },
  {
    "text": "observable will always keep on running and that will occupy memory so what I'm doing here is that when somebody goes",
    "start": "1627440",
    "end": "1634200"
  },
  {
    "text": "out of this website of this page in particular I need to dispose this observable so that the memory is not",
    "start": "1634200",
    "end": "1640520"
  },
  {
    "text": "used anymore because this infinite list is infinite so it will always be waiting for new values if if I'm leaving this",
    "start": "1640520",
    "end": "1647320"
  },
  {
    "text": "page that means that no new value will come so I need to tell it dispose yourself so that you can be garbage",
    "start": "1647320",
    "end": "1653000"
  },
  {
    "text": "collected basically so this was my expression the first time I saw this it was like it",
    "start": "1653000",
    "end": "1659919"
  },
  {
    "text": "seems cool but I'm not 100% sure that I'm getting what happens so I don't know",
    "start": "1659919",
    "end": "1665559"
  },
  {
    "text": "if it's because like I'm a child inside and I'm like two years old but I understand things with Graphics so this",
    "start": "1665559",
    "end": "1671399"
  },
  {
    "text": "is what has been happening and doing promotion to buffer apparently this is what happened we got first a click in in",
    "start": "1671399",
    "end": "1678240"
  },
  {
    "text": "this case a circle and that went through a box that is a transformation chain so",
    "start": "1678240",
    "end": "1683399"
  },
  {
    "text": "that click got converted to a three that three is now this diamond diamond was a",
    "start": "1683399",
    "end": "1688799"
  },
  {
    "text": "really hard word to learn in English really hard so because in Spanish it's rbo it's",
    "start": "1688799",
    "end": "1694399"
  },
  {
    "text": "like completely different anyway we got the click converted to the three the three is this diamond and then we're",
    "start": "1694399",
    "end": "1701480"
  },
  {
    "text": "converting this diamond to a sum that sum is a square so now I have this sum",
    "start": "1701480",
    "end": "1707440"
  },
  {
    "text": "again with we had the click went to a transformation chain three went to a transformation chain three again however",
    "start": "1707440",
    "end": "1714840"
  },
  {
    "text": "at some point in time maybe in 10 seconds maybe in 20 I got another click and then that new click that I just",
    "start": "1714840",
    "end": "1721559"
  },
  {
    "text": "received got again through the transformation chain so that click got converted now into a five no sorry to a",
    "start": "1721559",
    "end": "1728559"
  },
  {
    "text": "four and that four got now converted into a seven and then I got another click and that keeps on happening so if",
    "start": "1728559",
    "end": "1736760"
  },
  {
    "text": "I could be like I don't know Superman or whatever and I could be seeing this",
    "start": "1736760",
    "end": "1742960"
  },
  {
    "text": "infinite list throughout time so if I didn't know exactly that time this would be what it looks like imagine that this",
    "start": "1742960",
    "end": "1749640"
  },
  {
    "text": "line is like infinite it means like 10 hours so throughout 10 hours I got 10",
    "start": "1749640",
    "end": "1755120"
  },
  {
    "text": "clicks which got immediately converted to 10 numbers which then got immediately",
    "start": "1755120",
    "end": "1761519"
  },
  {
    "text": "converted to 10 sums and at that point I care and I'm showing it",
    "start": "1761519",
    "end": "1767039"
  },
  {
    "text": "so this is it this is the most important thing to understand and when I",
    "start": "1767039",
    "end": "1773200"
  },
  {
    "text": "understood it I was like Yay I got it but once I got it it was like click on a",
    "start": "1773200",
    "end": "1779799"
  },
  {
    "start": "1775000",
    "end": "2165000"
  },
  {
    "text": "cter are very few events so why do I use observables for that and I was like yeah",
    "start": "1779799",
    "end": "1785760"
  },
  {
    "text": "it's good but it's like really not that useful so let's actually do uh an an",
    "start": "1785760",
    "end": "1792640"
  },
  {
    "text": "example with more events so now we have this forwardjs is awesome and whenever I move them out",
    "start": "1792640",
    "end": "1798559"
  },
  {
    "text": "the forwardjs is awesome text Will Follow Me So if I move it fast it will follow me fast and this is example that",
    "start": "1798559",
    "end": "1806200"
  },
  {
    "text": "we are going to build now something important for example for when we see the code if I move the mouse you can see",
    "start": "1806200",
    "end": "1813000"
  },
  {
    "text": "that the letters move one at a time they don't move immediately after the mouse they move one at a time actually at the",
    "start": "1813000",
    "end": "1819679"
  },
  {
    "text": "100 milliseconds difference between each other so how do we implement the forwardjs is aome because this is",
    "start": "1819679",
    "end": "1826760"
  },
  {
    "text": "obviously something that you would do introduction in every website right so how do we do it so in this case",
    "start": "1826760",
    "end": "1834120"
  },
  {
    "text": "I'm creating a web component with a directive on angular it's not important it's basically saying it will occupy the",
    "start": "1834120",
    "end": "1839760"
  },
  {
    "text": "whole screen and the text will be forwardjs is awesome and then I'm creating this we component in angular",
    "start": "1839760",
    "end": "1844840"
  },
  {
    "text": "with a directive it's not important how I Define it but the important thing is this I'm having first a div which is the",
    "start": "1844840",
    "end": "1852080"
  },
  {
    "text": "one that occupies the whole screen and I'm adding an event for Mouse move so",
    "start": "1852080",
    "end": "1857279"
  },
  {
    "text": "whenever the mouse Mouse is moved throughout the window anywhere I want to",
    "start": "1857279",
    "end": "1862600"
  },
  {
    "text": "be called to this function that is called Mouse move then I'm having a div which is",
    "start": "1862600",
    "end": "1868639"
  },
  {
    "text": "called text container and that div text container will have all this phrase forwardjs is awesome and then inside",
    "start": "1868639",
    "end": "1876200"
  },
  {
    "text": "there I will have sorry I will have one span per each letter of the phrase so",
    "start": "1876200",
    "end": "1882919"
  },
  {
    "text": "one for the f one for the o one for a w and so on and each of those those",
    "start": "1882919",
    "end": "1888120"
  },
  {
    "text": "letters each of those spans will be absolutely positioned I'm I'm I'm setting that position absolutely so that",
    "start": "1888120",
    "end": "1894760"
  },
  {
    "text": "I can move them around the window so this is the template that we have right now now let's see how we code it with",
    "start": "1894760",
    "end": "1902000"
  },
  {
    "text": "this template so again first thing we do is we call this dollar create observable",
    "start": "1902000",
    "end": "1907039"
  },
  {
    "text": "function Mouse moved so what am I creating now I'm creating an infinite list of mouse move events so whenever",
    "start": "1907039",
    "end": "1914760"
  },
  {
    "text": "the mouse is moved I'm getting a new event a new item on this infinite list",
    "start": "1914760",
    "end": "1921120"
  },
  {
    "text": "and the first thing that I'm doing is I'm converting this mouse move event into an offset so this is the text",
    "start": "1921120",
    "end": "1929679"
  },
  {
    "text": "container this is a text this is a mouse I move the mouse in this precise moment",
    "start": "1929679",
    "end": "1935200"
  },
  {
    "text": "there's a difference between the position of the text and the position of the mouse so what I'm doing is I'm",
    "start": "1935200",
    "end": "1941440"
  },
  {
    "text": "converting the mouse move event to a to a to a list of offsets between the",
    "start": "1941440",
    "end": "1947240"
  },
  {
    "text": "phrase and the mouse pointer once I have this list of offsets",
    "start": "1947240",
    "end": "1954600"
  },
  {
    "text": "I actually have to convert that to an offset per letter because I will need to",
    "start": "1954600",
    "end": "1960039"
  },
  {
    "text": "move each letter separately so I had one offset per per word per phrase every",
    "start": "1960039",
    "end": "1968039"
  },
  {
    "text": "time that the mouse is moved now what I'm doing is I'm actually returning a new a new observable inside so what I'm",
    "start": "1968039",
    "end": "1974760"
  },
  {
    "text": "doing is I had Mouse move Mouse move Mouse move I converted that to offset offset offset and now each of these",
    "start": "1974760",
    "end": "1982120"
  },
  {
    "text": "offset offset offset will be converted not to one value but to multiple values",
    "start": "1982120",
    "end": "1987320"
  },
  {
    "text": "it will be converted to one letter so to one value sorry per letter that is on the phrase so that means I had again",
    "start": "1987320",
    "end": "1993799"
  },
  {
    "text": "mouse move Mouse move Mouse move that got convert it to offset offset offset now we'll have f with offset o with",
    "start": "1993799",
    "end": "2000600"
  },
  {
    "text": "offset W with offset f with upset o with upset W with upset all the rest f with",
    "start": "2000600",
    "end": "2006440"
  },
  {
    "text": "upset o with upset W with offset and all the rest so now I'm having in this",
    "start": "2006440",
    "end": "2012639"
  },
  {
    "text": "observable one value per letter and offset that I need to move and now it's",
    "start": "2012639",
    "end": "2019559"
  },
  {
    "text": "actually time to do the animation because I need to move now each of these",
    "start": "2019559",
    "end": "2024840"
  },
  {
    "text": "letters at a different point in time so now again I had the text key here Mouse",
    "start": "2024840",
    "end": "2031760"
  },
  {
    "text": "pointer here I move the mouse pointer I got the offset per letter but now I need to start moving the letter so move the f",
    "start": "2031760",
    "end": "2038679"
  },
  {
    "text": "move the O move the W and that means that I need to move these values one at",
    "start": "2038679",
    "end": "2044440"
  },
  {
    "text": "a time throughout time because as I said before I don't want to move them all at",
    "start": "2044440",
    "end": "2049560"
  },
  {
    "text": "the same time each letter moved differently and this is another place where I can actually use observables",
    "start": "2049560",
    "end": "2055800"
  },
  {
    "text": "because an array is a collection of values at an instant time but an observable is a collection of values",
    "start": "2055800",
    "end": "2062440"
  },
  {
    "text": "throughout time so what I can do is this timer that you see here here this timer",
    "start": "2062440",
    "end": "2068599"
  },
  {
    "text": "operator let me add let me actually convert one value that I had before into",
    "start": "2068599",
    "end": "2075358"
  },
  {
    "text": "a value that will be added to this infinite list at a certain point in time",
    "start": "2075359",
    "end": "2080960"
  },
  {
    "text": "so I had the F with the offset the o with the offset and the W with the offset and now what I'm saying",
    "start": "2080960",
    "end": "2087040"
  },
  {
    "text": "is now with this information send the F with the offset right now send the o",
    "start": "2087040",
    "end": "2092919"
  },
  {
    "text": "with the offset that you need to movees in 100 milliseconds send the W with the offset that need to move in 200",
    "start": "2092919",
    "end": "2099160"
  },
  {
    "text": "milliseconds and so on so in here I'm doing a transformation that is not only transforming a value to another it's",
    "start": "2099160",
    "end": "2106400"
  },
  {
    "text": "transforming the time at which this element will be added to the observable and",
    "start": "2106400",
    "end": "2113040"
  },
  {
    "text": "now what I got from here is the F with the offset I need to move at the 0o",
    "start": "2113040",
    "end": "2118400"
  },
  {
    "text": "millisecond the o with the offset that it needs to move in 100 milliseconds later the W with the offset needs to",
    "start": "2118400",
    "end": "2125280"
  },
  {
    "text": "move in 200 milliseconds and at this Point again I care about what's going on",
    "start": "2125280",
    "end": "2131040"
  },
  {
    "text": "so again in this case I subscribe and now I will be getting the letter that I need to move which and which upset and",
    "start": "2131040",
    "end": "2137839"
  },
  {
    "text": "that's where I move the letter and I also will get these values at a 100 milliseconds difference so I don't even",
    "start": "2137839",
    "end": "2144839"
  },
  {
    "text": "know it here but I will get called to this function with a 100 milliseconds difference and that is what will be",
    "start": "2144839",
    "end": "2151680"
  },
  {
    "text": "making this animation work that is what will we what will be making that whenever I move the mouse each of of the",
    "start": "2151680",
    "end": "2157800"
  },
  {
    "text": "letters move one at a time and then again I have to dispose",
    "start": "2157800",
    "end": "2163599"
  },
  {
    "text": "it so after this I was like Yay now I can finally understand observables I can",
    "start": "2163599",
    "end": "2170800"
  },
  {
    "text": "finally understand like the potential that they have but if you just saw that I showed you it's not that easy to",
    "start": "2170800",
    "end": "2177720"
  },
  {
    "text": "understand at first and that's what I meant when I said that you need to change how you think about problems because we just handled tons of",
    "start": "2177720",
    "end": "2184920"
  },
  {
    "text": "different Mouse move events we built an animation and that's something that is not really easy to make without",
    "start": "2184920",
    "end": "2190480"
  },
  {
    "text": "observables with observables it was easier it was just four Transformations and maybe six lines of code per",
    "start": "2190480",
    "end": "2196160"
  },
  {
    "text": "transformation but in order to be able to build that you have to change the way you think about the problem so that it",
    "start": "2196160",
    "end": "2201760"
  },
  {
    "text": "makes sense in your head to actually do that so something important is that this is",
    "start": "2201760",
    "end": "2208520"
  },
  {
    "text": "actually just the beginning shafar Hussein who is actually my friend that works at Netflix he's in the",
    "start": "2208520",
    "end": "2214920"
  },
  {
    "text": "tc39 and he's actually proposing observables to be added to the browser like promises exist now probably soon we",
    "start": "2214920",
    "end": "2223160"
  },
  {
    "text": "will also have observables in the browser so that means that it's a pretty good moment to start learning about",
    "start": "2223160",
    "end": "2228640"
  },
  {
    "text": "observes because they will actually be part of the browser itself it won't be a library they will be part of the browser",
    "start": "2228640",
    "end": "2235599"
  },
  {
    "text": "that's a proposal that he's sending to the tc39 and also another thing is that if",
    "start": "2235599",
    "end": "2241280"
  },
  {
    "text": "you're using any other Library any other language that is not JavaScript you can still use it there is rx Java rx.net so",
    "start": "2241280",
    "end": "2249640"
  },
  {
    "text": "there's a reactive extension which is the lbrary that lets me do observes for each of the languages that are out there",
    "start": "2249640",
    "end": "2255599"
  },
  {
    "text": "so even if you don't do JavaScript you can do the same thing because the concepts are all the same once you",
    "start": "2255599",
    "end": "2261440"
  },
  {
    "text": "understand what an observable is you just have to learn the syntax but other than that it's the same in whichever language whichever framework whichever",
    "start": "2261440",
    "end": "2269280"
  },
  {
    "text": "anything so my proposal is basically to start reacting to everything it's not react from Facebook it's",
    "start": "2269280",
    "end": "2275760"
  },
  {
    "text": "reactive one more thing before ending let me actually Zoom it so in this link",
    "start": "2275760",
    "end": "2282079"
  },
  {
    "text": "if you go there you will be able to get the slides that I've just shown you also all of the examples that I've just",
    "start": "2282079",
    "end": "2289480"
  },
  {
    "text": "showed you right now they were actually coded they are not like the document that doesn't compile they were actually",
    "start": "2289480",
    "end": "2294880"
  },
  {
    "text": "coded so you will be able to get those examples from there and another thing that you will see there are some",
    "start": "2294880",
    "end": "2300079"
  },
  {
    "text": "additional links reative regarding reactive programming basically it's a Cera course about reactive programming",
    "start": "2300079",
    "end": "2306440"
  },
  {
    "text": "by ersi and edic Meer which is absolutely great and an head course",
    "start": "2306440",
    "end": "2311560"
  },
  {
    "text": "about rxjs and how to use it it's actually pretty good so that's",
    "start": "2311560",
    "end": "2319410"
  },
  {
    "text": "[Applause]",
    "start": "2319410",
    "end": "2329780"
  },
  {
    "text": "it",
    "start": "2332160",
    "end": "2335160"
  }
]