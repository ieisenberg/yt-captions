[
  {
    "text": "[Music]",
    "start": "3320",
    "end": "14289"
  },
  {
    "text": "i'm tom montgomery and this is on block by design so a little bit about me",
    "start": "15200",
    "end": "20880"
  },
  {
    "text": "i've been around doing network protocols and networking for a very long time",
    "start": "20880",
    "end": "27279"
  },
  {
    "text": "exceedingly long since the early 90s most of my work recently has been",
    "start": "27279",
    "end": "33920"
  },
  {
    "text": "involved in the trading community in exchanges and and brokerages trading firms things like",
    "start": "33920",
    "end": "40559"
  },
  {
    "text": "that so in finance but in general i'm more of a high performance",
    "start": "40559",
    "end": "47039"
  },
  {
    "text": "type of uh person i i tend to look at systems that have to",
    "start": "47039",
    "end": "52079"
  },
  {
    "text": "because of their slas be incredibly performant but that's not all other things as well",
    "start": "52079",
    "end": "57760"
  },
  {
    "text": "so anyway what we're going to talk about is uh synchronous and asynchronous designs",
    "start": "57760",
    "end": "63920"
  },
  {
    "text": "the idea of having sequential operation and how that impacts things like performance and",
    "start": "63920",
    "end": "70720"
  },
  {
    "text": "things like that and some hopefully have a few takeaways of things if you're looking to improve performance",
    "start": "70720",
    "end": "75840"
  },
  {
    "text": "in this category uh things you can do we'll talk about the illusion of sequentiality all of our systems provide",
    "start": "75840",
    "end": "82080"
  },
  {
    "text": "this illusion of the sequential nature of how they work",
    "start": "82080",
    "end": "87920"
  },
  {
    "text": "and i think it all boils down to exactly what do you do while waiting and hopefully have some takeaways",
    "start": "87920",
    "end": "94640"
  },
  {
    "text": "so first a little bit about wording here when we talk about sequential or synchronous or blocking we're talking",
    "start": "94640",
    "end": "101040"
  },
  {
    "text": "about the idea that you do some operation you cannot continue",
    "start": "101040",
    "end": "106479"
  },
  {
    "text": "uh to do things until you something has finished or things",
    "start": "106479",
    "end": "111600"
  },
  {
    "text": "like that and this is more exaggerated when you go across some sort of a i call an asynchronous binary boundary it can",
    "start": "111600",
    "end": "117759"
  },
  {
    "text": "be a network it could be something there from one thread to another thread or uh",
    "start": "117759",
    "end": "122960"
  },
  {
    "text": "or a number of different things um this a lot of these things make it more obvious",
    "start": "122960",
    "end": "128399"
  },
  {
    "text": "as opposed to asynchronous or non-blocking types of designs where you do something and then you go out to go",
    "start": "128399",
    "end": "133440"
  },
  {
    "text": "off and do something else and then you come back and uh can you know process the result or something or the the",
    "start": "133440",
    "end": "139520"
  },
  {
    "text": "response or something like that so with sync or synchronous you're looking at",
    "start": "139520",
    "end": "146480"
  },
  {
    "text": "and i'll just use as an example throughout this because it's easy to talk about the idea of a request and a response so you would send a request to",
    "start": "146480",
    "end": "153280"
  },
  {
    "text": "be some processing of it and optionally you might have a response even if the response is simply just to",
    "start": "153280",
    "end": "159200"
  },
  {
    "text": "acknowledge that it has completed so it doesn't always have to involve having a response but there might be",
    "start": "159200",
    "end": "164800"
  },
  {
    "text": "some blocking operation that happens until it is completed so a normal function call",
    "start": "164800",
    "end": "171440"
  },
  {
    "text": "is normally like this and if it's sequential operation and there's nothing not really anything else",
    "start": "171440",
    "end": "176879"
  },
  {
    "text": "to do at that time that's perfectly fine if there are other things that need to be done though or it needs to be done on",
    "start": "176879",
    "end": "181920"
  },
  {
    "text": "something else it's a lost opportunity so async is more about you know the idea",
    "start": "181920",
    "end": "188000"
  },
  {
    "text": "of initiating an operation having some processing of it and you're waiting then for a response",
    "start": "188000",
    "end": "194800"
  },
  {
    "text": "and this could be across you know threads as i mentioned cores nodes",
    "start": "194800",
    "end": "200080"
  },
  {
    "text": "storage all kinds of different things that where there is this opportunity",
    "start": "200080",
    "end": "206080"
  },
  {
    "text": "to do things while you're waiting for the next step or that to complete or something like that",
    "start": "206080",
    "end": "212400"
  },
  {
    "text": "and so the idea of async is really what is what do you do while waiting it's a very big part of this",
    "start": "212400",
    "end": "219280"
  },
  {
    "text": "and just as an aside when we talk about event driven we're talking about actually the idea of on the processing",
    "start": "219280",
    "end": "224879"
  },
  {
    "text": "side you would see a request come in well the nut debt is on request and on the requesting side when a response",
    "start": "224879",
    "end": "231519"
  },
  {
    "text": "comes in you would have on response or on complete or something like that right so we'll use those terms a couple times",
    "start": "231519",
    "end": "237760"
  },
  {
    "text": "throughout this all of our systems provide this illusion of sequentiality this program order of",
    "start": "237760",
    "end": "244080"
  },
  {
    "text": "operation that we really hang our hat on as as developers we look at this and",
    "start": "244080",
    "end": "250000"
  },
  {
    "text": "we can simplify our lives by disillusion but be prepared it is an illusion um",
    "start": "250000",
    "end": "257120"
  },
  {
    "text": "and that's because a compiler can reorder runtimes can reorder cpus can",
    "start": "257120",
    "end": "262639"
  },
  {
    "text": "reorder so everything is happening in parallel not just concurrently but in parallel uh on all",
    "start": "262639",
    "end": "270240"
  },
  {
    "text": "different parts of a system operating systems and so and as well as other things it",
    "start": "270240",
    "end": "275840"
  },
  {
    "text": "may not be the fastest way to just do step one step two step three it",
    "start": "275840",
    "end": "282160"
  },
  {
    "text": "may be faster to do steps one and two at the same time or to do step two before one because of other other",
    "start": "282160",
    "end": "288720"
  },
  {
    "text": "things that can be optimized so but by imposing order on that we can make",
    "start": "288720",
    "end": "294639"
  },
  {
    "text": "some assumptions about the state of things as we move along so ordering has to be imposed and this",
    "start": "294639",
    "end": "301520"
  },
  {
    "text": "is done by things in the cpu such as the load store buffers providing you with this ability to go",
    "start": "301520",
    "end": "307440"
  },
  {
    "text": "ahead and store things to memory or to load them asynchronously our cpus are",
    "start": "307440",
    "end": "313120"
  },
  {
    "text": "all asynchronous storages are the exactly the same way different levels of caching give us this",
    "start": "313120",
    "end": "318560"
  },
  {
    "text": "ability for doing multiple things to be optimized along that path os's with virtual memory and caches do the same",
    "start": "318560",
    "end": "324880"
  },
  {
    "text": "thing even our libraries do this with the ideas of promises and futures um",
    "start": "324880",
    "end": "330479"
  },
  {
    "text": "so the key is to wait uh all of this provides us with this",
    "start": "330479",
    "end": "335600"
  },
  {
    "text": "illusion that it's okay to wait and it can be but that can also have a price",
    "start": "335600",
    "end": "341520"
  },
  {
    "text": "because it is uh the operating system can be scheduled uh when you're waiting for something and you're not doing other",
    "start": "341520",
    "end": "347199"
  },
  {
    "text": "work the operating system is going to take your time slice it's also lost opportunity to do work",
    "start": "347199",
    "end": "353360"
  },
  {
    "text": "that is uh not reliant on what you're waiting for and in some applications it's perfectly",
    "start": "353360",
    "end": "358639"
  },
  {
    "text": "fine and others it's not and by having locks and signaling in that in that path they're they do not",
    "start": "358639",
    "end": "365039"
  },
  {
    "text": "come for free they do impose some uh constraints so let's talk a little bit about that",
    "start": "365039",
    "end": "371440"
  },
  {
    "text": "locks and signaling introduce a serialization into uh a speedup so if",
    "start": "371440",
    "end": "376720"
  },
  {
    "text": "you look at amdahl's law what it's really saying is uh the amount of serialization that you have in your",
    "start": "376720",
    "end": "383440"
  },
  {
    "text": "uh in your system is going to dictate how much speed up you get by throwing",
    "start": "383440",
    "end": "388720"
  },
  {
    "text": "machines or processors at it you it it as you can tell from the graph",
    "start": "388720",
    "end": "393840"
  },
  {
    "text": "if you're not familiar with omdahl's law which i hope you would be uh but it does limit your scaling uh and",
    "start": "393840",
    "end": "400319"
  },
  {
    "text": "even just a simple things such as five percent serialization within a process",
    "start": "400319",
    "end": "405520"
  },
  {
    "text": "and believe me that's a small percent compared to most systems can reduce that scaling dramatically so",
    "start": "405520",
    "end": "412160"
  },
  {
    "text": "that you don't gain much as you keep throwing processors at it and scaling",
    "start": "412160",
    "end": "417680"
  },
  {
    "text": "but that's only part of the issue it also introduces a coherence penalty and if you want to see a precarious penalty",
    "start": "417680",
    "end": "424560"
  },
  {
    "text": "in action think of a meeting where you have five people in it",
    "start": "424560",
    "end": "430479"
  },
  {
    "text": "and how hard it is to to get everyone to sort of agree and understand each other and make sure that everyone knows uh",
    "start": "430479",
    "end": "438080"
  },
  {
    "text": "what is being talked about uh this is coherence it is a penalty",
    "start": "438080",
    "end": "443919"
  },
  {
    "text": "that is attached uh to you know the getting every entity",
    "start": "443919",
    "end": "449039"
  },
  {
    "text": "on the same page and understanding everything when you add in a coherence penalty and do something like that um it",
    "start": "449039",
    "end": "456000"
  },
  {
    "text": "turns out that amdahl was an optimist that it actually starts to decrease the",
    "start": "456000",
    "end": "462400"
  },
  {
    "text": "speed up that you get because the coherence penalty starts to add up and add up and add up and add up",
    "start": "462400",
    "end": "468800"
  },
  {
    "text": "and so that becomes a dominant factor in fact so it's not simply that you have to",
    "start": "468800",
    "end": "474720"
  },
  {
    "text": "reduce the amount of serialization but you also have to realize that there's a coherence locks and signaling have a lot",
    "start": "474720",
    "end": "480160"
  },
  {
    "text": "of coherence and so this limits scaling so one thing to realize is that by adding locks and",
    "start": "480160",
    "end": "486479"
  },
  {
    "text": "and having signaling you are in effect limiting your scaling to some degree but it goes even further than that more",
    "start": "486479",
    "end": "492960"
  },
  {
    "text": "threads more contention more coherence less efficient operation this isn't always the case but it often is",
    "start": "492960",
    "end": "500080"
  },
  {
    "text": "but there is actually more to think about and the reason why we're going through a lot of this or i'm going through a lot",
    "start": "500160",
    "end": "506160"
  },
  {
    "text": "of this is to so that you have some background in terms of thinking about this from a slightly different",
    "start": "506160",
    "end": "512159"
  },
  {
    "text": "perspective um i've had a lot of time to think about it but and as things",
    "start": "512159",
    "end": "518479"
  },
  {
    "text": "systems that i've worked on i've sort of distilled down some things so i always have to sort of set the stage by saying",
    "start": "518479",
    "end": "525839"
  },
  {
    "text": "you know here's some of the things that limit and here's how bad it is but there are things we can do so let's take a",
    "start": "525839",
    "end": "531040"
  },
  {
    "text": "look here so first the synchronous kind of requests and responses say you have three different requests you send one",
    "start": "531040",
    "end": "537440"
  },
  {
    "text": "you wait for the responses and another you say and uh you send the third and you wait for the response um that may be",
    "start": "537440",
    "end": "544000"
  },
  {
    "text": "how your logic has to work um but just realize the throughput of how many",
    "start": "544000",
    "end": "549200"
  },
  {
    "text": "requests you can do is limited by that round trip time not by the processing it's limited by how fast you can",
    "start": "549200",
    "end": "555760"
  },
  {
    "text": "actually send a request and get a response and if you want to take a look at how",
    "start": "555760",
    "end": "560800"
  },
  {
    "text": "our technology has grown response time in systems does not get faster very",
    "start": "560800",
    "end": "566000"
  },
  {
    "text": "quickly in fact we've very much stagnated on that response you can take a look at clock speed for example in",
    "start": "566000",
    "end": "572080"
  },
  {
    "text": "cpus but if you look at network bandwidth storage capacity membrane capacity and somewhat with cpu cores",
    "start": "572080",
    "end": "577760"
  },
  {
    "text": "although that hasn't grown as much you know as the accumulated improvements have grown over time",
    "start": "577760",
    "end": "583920"
  },
  {
    "text": "they have grown more than improvements in response time for example",
    "start": "583920",
    "end": "589040"
  },
  {
    "text": "so from a throughput perspective we are limited if you take a look at it from a",
    "start": "589040",
    "end": "594080"
  },
  {
    "text": "networking perspective and look at it through throughput just in trying to get data across this stop and weight operation of",
    "start": "594080",
    "end": "600640"
  },
  {
    "text": "sending a piece of data waiting for a response and another piece of data waiting for a response is limited by the round trip time you can definitely",
    "start": "600640",
    "end": "606160"
  },
  {
    "text": "calculate it you take the length of your data you divide it by the round trip time and that's it that's as fast as",
    "start": "606160",
    "end": "611440"
  },
  {
    "text": "you're going to go notice that you can only increase the data length or you can decrease the round trip time that's it",
    "start": "611440",
    "end": "617360"
  },
  {
    "text": "you have nothing else to play with but you'd rather kind of have something which was a little bit faster right",
    "start": "617360",
    "end": "623120"
  },
  {
    "text": "you'd have and and this is a good example a fire hydrant let's ignore the pup for a minute but",
    "start": "623120",
    "end": "630000"
  },
  {
    "text": "the fire hydrant has a certain diameter that has a relationship to how much",
    "start": "630000",
    "end": "635440"
  },
  {
    "text": "water it can push out as opposed to a garden hose well our networks are exactly the same",
    "start": "635440",
    "end": "641360"
  },
  {
    "text": "thing and doesn't matter if it's network it doesn't matter if it's the bandwidth on a single chip between cores",
    "start": "641360",
    "end": "647440"
  },
  {
    "text": "all of them have the same thing which is the bandwidth delay product the bandwidth is how much you can put in it on a time that's how big that pipe is",
    "start": "647440",
    "end": "654720"
  },
  {
    "text": "the delay is how long that pipe is in other words the time it takes to traverse the bandwidth",
    "start": "654720",
    "end": "660160"
  },
  {
    "text": "and delay product is the amount of bytes that can be in transit at one time",
    "start": "660160",
    "end": "665279"
  },
  {
    "text": "and notice you know you have a couple different things to play with here to maximize that you have to not only",
    "start": "665279",
    "end": "672640"
  },
  {
    "text": "have a quick request response request response but you also have to have multiple pieces of",
    "start": "672640",
    "end": "678720"
  },
  {
    "text": "data outstanding at a time that in right there so how big is it uh",
    "start": "678720",
    "end": "684720"
  },
  {
    "text": "and well you know the whole different conversation we could have and there's some good stuff in there but it's not",
    "start": "684720",
    "end": "689760"
  },
  {
    "text": "what we're here to talk about today just realize that you want in to be more than just one when it's one you're waiting on",
    "start": "689760",
    "end": "696880"
  },
  {
    "text": "you're waiting on round trips so the key here is while something is",
    "start": "696880",
    "end": "701920"
  },
  {
    "text": "you know processing or you're waiting is to do something and that's one of the takeaways i want you to think of is",
    "start": "701920",
    "end": "707839"
  },
  {
    "text": "there it's a lost opportunity what can you do while waiting and make that more efficient",
    "start": "707839",
    "end": "713839"
  },
  {
    "text": "and the short answer is while waiting do other work having the ability to to actually do",
    "start": "713839",
    "end": "719920"
  },
  {
    "text": "other stuff is great so the first thing is sending more requests as we saw and so the",
    "start": "719920",
    "end": "725920"
  },
  {
    "text": "but the sequence here is how do you distinguish between the requests well that relationship here is you have to correlate them right so you have to be",
    "start": "725920",
    "end": "731839"
  },
  {
    "text": "able to basically identify each individual request and individual response",
    "start": "731839",
    "end": "737120"
  },
  {
    "text": "and that correlation you know gives rise to having things which are a little bit",
    "start": "737120",
    "end": "742399"
  },
  {
    "text": "more interesting right the ordering of them starts to become very relevant",
    "start": "742399",
    "end": "748079"
  },
  {
    "text": "you need to figure out things like how to handle things that are not in order",
    "start": "748079",
    "end": "753920"
  },
  {
    "text": "so you can reorder them and you're just really looking at the relationship between a request and a",
    "start": "753920",
    "end": "759680"
  },
  {
    "text": "response and matching them up but and they can be reordered in any way you want",
    "start": "759680",
    "end": "765600"
  },
  {
    "text": "you know to make things to make things simple but it does it",
    "start": "765600",
    "end": "770800"
  },
  {
    "text": "provide an interesting question of what happens if you get something that you can't make sense of is it invalid do you",
    "start": "770800",
    "end": "776240"
  },
  {
    "text": "drop it do you ignore it uh in this case you know you get you you've sent request zero",
    "start": "776240",
    "end": "781360"
  },
  {
    "text": "and you got response for one um you know in this point you're not sure exactly what the response for one is",
    "start": "781360",
    "end": "788079"
  },
  {
    "text": "um and so that's handling the unexpected when you introduce async into a system",
    "start": "788079",
    "end": "793519"
  },
  {
    "text": "where you're doing things and you're going off and doing other stuff you have to figure out how to handle the",
    "start": "793519",
    "end": "798880"
  },
  {
    "text": "unexpected you know because that's what actually makes a lot of things like network protocols uh how you handle them",
    "start": "798880",
    "end": "805680"
  },
  {
    "text": "is very important and so there's a lot of things we can talk about here but i want to just mention",
    "start": "805680",
    "end": "811120"
  },
  {
    "text": "that errors are events there's no real difference an event it can be a success it can also be an",
    "start": "811120",
    "end": "817760"
  },
  {
    "text": "error so you should think about errors inhaling the expected as if they were events that just crop up in your system",
    "start": "817760",
    "end": "823760"
  },
  {
    "text": "second thing to think about is the unit of work and when we think about this from a",
    "start": "823760",
    "end": "830079"
  },
  {
    "text": "normal threads perspective we're just doing sequential you know processing of data we're doing",
    "start": "830079",
    "end": "835760"
  },
  {
    "text": "work and it's between the system calls that we do work and if you take that same example i",
    "start": "835760",
    "end": "841440"
  },
  {
    "text": "talked about like a request and in a response if you think about it from a",
    "start": "841440",
    "end": "846800"
  },
  {
    "text": "from getting a request in doing some work and then sending a response it's really the time the work done between",
    "start": "846800",
    "end": "852560"
  },
  {
    "text": "system calls system call to receive data system call to send data and the time between these system calls",
    "start": "852560",
    "end": "858720"
  },
  {
    "text": "right that may have a high variance um you know on this server side this isn't so",
    "start": "858720",
    "end": "864800"
  },
  {
    "text": "that complicated but when you start to think about it from the other side where it's i do some work i then wait",
    "start": "864800",
    "end": "871920"
  },
  {
    "text": "and then i get a response now it's highly varying in terms of the time between them which may or may not be a",
    "start": "871920",
    "end": "877920"
  },
  {
    "text": "concern but it is something to realize but when you turn it around and you say something like from an asynchronous",
    "start": "877920",
    "end": "884320"
  },
  {
    "text": "perspective the first thing you should think about is okay what is the work that i can do",
    "start": "884320",
    "end": "890240"
  },
  {
    "text": "between these now it's not simply just between system calls and it's easier to think about this as a",
    "start": "890240",
    "end": "896079"
  },
  {
    "text": "duty cycle in other words a single cycle of work and that should be your first class concern",
    "start": "896079",
    "end": "902240"
  },
  {
    "text": "and i think the easiest way to think about this and is to look at an example in pseudocode",
    "start": "902240",
    "end": "908240"
  },
  {
    "text": "so this is an async duty cycle this looks like a lot of the duty cycles that i",
    "start": "908240",
    "end": "913440"
  },
  {
    "text": "i've written and i've seen written and helped write which is you're basically sitting in a loop while you're running i",
    "start": "913440",
    "end": "919680"
  },
  {
    "text": "usually have some mechanism to terminate it but you usually pull inputs and by pulling i don't i definitely mean going",
    "start": "919680",
    "end": "926160"
  },
  {
    "text": "to see if there's anything to anything to do and if not you simply return and go to the next step you know so you pull",
    "start": "926160",
    "end": "931839"
  },
  {
    "text": "your if there's input you check timeouts you process pending actions and the more complicated work is less in the polling",
    "start": "931839",
    "end": "939040"
  },
  {
    "text": "of the inputs and handling them it's more in the checking for timeouts processing pending actions those types",
    "start": "939040",
    "end": "944959"
  },
  {
    "text": "of things those are more a little bit more complex and then at the e at the end you might idle waiting for",
    "start": "944959",
    "end": "950639"
  },
  {
    "text": "something to do or you might just say okay i'm going to sleep for a millisecond and then come right back",
    "start": "950639",
    "end": "957120"
  },
  {
    "text": "so you you do have a little bit of of flexibility here in terms of",
    "start": "957120",
    "end": "963120"
  },
  {
    "text": "idling waiting for something to do but the key here is you should always think about it as you",
    "start": "963120",
    "end": "968959"
  },
  {
    "text": "can your units of work should always be making progress towards your goal once",
    "start": "968959",
    "end": "974160"
  },
  {
    "text": "you break things down which is where all the complexity comes into play you start to realize that",
    "start": "974160",
    "end": "981519"
  },
  {
    "text": "you know the the idea of making progress and thinking about things as steps like you would normally do in just",
    "start": "981519",
    "end": "987519"
  },
  {
    "text": "listing out logic is kind of the same but the difference here is that you have to think about it as more discrete as",
    "start": "987519",
    "end": "994560"
  },
  {
    "text": "opposed to just being wrapped up so to give an example of this um i've taken just a very simple example",
    "start": "994560",
    "end": "1001519"
  },
  {
    "text": "you let's say you're on a server and you get a request in and the first step you",
    "start": "1001519",
    "end": "1006800"
  },
  {
    "text": "need to do is to validate a user you then you if that's successful you then process the request if it's not",
    "start": "1006800",
    "end": "1013040"
  },
  {
    "text": "successful then you would send an error back and then as once you're done you send a response and that response may be",
    "start": "1013040",
    "end": "1019600"
  },
  {
    "text": "something as simple as okay i process your request but it could be that you generate a",
    "start": "1019600",
    "end": "1024720"
  },
  {
    "text": "response so if you turn that into sort of the asynchronous side you can think about the the request as being an event like",
    "start": "1024720",
    "end": "1032240"
  },
  {
    "text": "on request the next thing you would do is you would request that validate now i've made this",
    "start": "1032240",
    "end": "1037520"
  },
  {
    "text": "deliberately a little bit more complicated the validating of the user in a lot of",
    "start": "1037520",
    "end": "1042558"
  },
  {
    "text": "sequential logic is another blocking operation and that's the actual operation we want to look at from an asynchronous perspective",
    "start": "1042559",
    "end": "1049520"
  },
  {
    "text": "so let's say that we have to request that validation externally so you have to send it send away for it to be validated",
    "start": "1049520",
    "end": "1057039"
  },
  {
    "text": "and come back and this might be from a secure enclave or it could be from another library or it could be",
    "start": "1057039",
    "end": "1063840"
  },
  {
    "text": "something else it could be some from a slowly separate system but the key is that you have to wait at that point",
    "start": "1063840",
    "end": "1069440"
  },
  {
    "text": "so you go off and you process other things other requests that do not have this",
    "start": "1069440",
    "end": "1074559"
  },
  {
    "text": "that don't depend on this step can be processed other pending actions",
    "start": "1074559",
    "end": "1079600"
  },
  {
    "text": "there could be additional input for other requests more requests other on requests that come in",
    "start": "1079600",
    "end": "1085679"
  },
  {
    "text": "but at some point you're going to get a response from that validation it may be positive might be negative let's assume that it's positive here for a moment so",
    "start": "1085679",
    "end": "1092480"
  },
  {
    "text": "you would then process the request at that point and that could spawn other stuff and send the response but what i wanted to",
    "start": "1092480",
    "end": "1098960"
  },
  {
    "text": "sort of point out here is that's the lost opportunity if you simply just did get a",
    "start": "1098960",
    "end": "1104240"
  },
  {
    "text": "request validate user and then you just go to sleep that that's less efficient right it's",
    "start": "1104240",
    "end": "1110960"
  },
  {
    "text": "lost opportunity so you want to see how you would break it down so that's where you would that's where having a duty",
    "start": "1110960",
    "end": "1117200"
  },
  {
    "text": "cycle comes into play that's where that duty cycle helps you to basically look",
    "start": "1117200",
    "end": "1122240"
  },
  {
    "text": "at this and to do other stuff and so breaking it down into states and",
    "start": "1122240",
    "end": "1127760"
  },
  {
    "text": "steps so the for at the first time you actually had a implicit set",
    "start": "1127760",
    "end": "1133840"
  },
  {
    "text": "in the sequential version on the left of states that something went through like request received",
    "start": "1133840",
    "end": "1140880"
  },
  {
    "text": "request being validated request validated okay processing requests",
    "start": "1140880",
    "end": "1145919"
  },
  {
    "text": "sending response those those states are now explicit in a lot of cases on",
    "start": "1145919",
    "end": "1152000"
  },
  {
    "text": "the right so think about it from that perspective you've got those states it's just how you've managed it",
    "start": "1152000",
    "end": "1159280"
  },
  {
    "text": "and one of the more complicated things to handle here is the idea of okay that didn't work and i have to try it again",
    "start": "1159280",
    "end": "1167039"
  },
  {
    "text": "so you know retrying logic is one of the things that makes some of these asynchronous duty",
    "start": "1167039",
    "end": "1173200"
  },
  {
    "text": "cycles much more complicated so things like transient errors back pressure and load are just some of the things that",
    "start": "1173200",
    "end": "1180160"
  },
  {
    "text": "you might look at is transient transient conditions that you then can",
    "start": "1180160",
    "end": "1185360"
  },
  {
    "text": "try again so if we look at that now from a little bit different perspective",
    "start": "1185360",
    "end": "1190960"
  },
  {
    "text": "we take sort of expand this a little bit so on a request request to validate you",
    "start": "1190960",
    "end": "1196080"
  },
  {
    "text": "wait it's okay and you process a request send a response that's the happy path right the not so happy path is when you",
    "start": "1196080",
    "end": "1203919"
  },
  {
    "text": "it's not the case where you get an error on the validate and you say no can't do that it's where you get a error that",
    "start": "1203919",
    "end": "1210400"
  },
  {
    "text": "basically says okay retry and this does not add that much complex",
    "start": "1210400",
    "end": "1215679"
  },
  {
    "text": "complexity if you're tracking it as a set of state changes because you would get the request",
    "start": "1215679",
    "end": "1221440"
  },
  {
    "text": "and if we look at this we'll see this on the right there you would request the validate you wait the same as before",
    "start": "1221440",
    "end": "1227520"
  },
  {
    "text": "on validate if the invalid if the on validate error indicates that you it's not a permanent error like somebody put",
    "start": "1227520",
    "end": "1234159"
  },
  {
    "text": "in bad credentials let's say that it was you know the system for validation was overloaded please wait and retry you",
    "start": "1234159",
    "end": "1240640"
  },
  {
    "text": "would wait some period of time that is not any more complex than waiting for that",
    "start": "1240640",
    "end": "1246159"
  },
  {
    "text": "response right you're simply just waiting for a timeout but the key here is that you would then",
    "start": "1246159",
    "end": "1251840"
  },
  {
    "text": "request validate again and you can add things like a number of retries and things like that but it",
    "start": "1251840",
    "end": "1258400"
  },
  {
    "text": "doesn't really make things more complicated it something may hide this underneath of",
    "start": "1258400",
    "end": "1264720"
  },
  {
    "text": "you for the sequential case but it's just lost opportunity",
    "start": "1264720",
    "end": "1269840"
  },
  {
    "text": "so this is about what i mean by making progress this is making progress at some",
    "start": "1269840",
    "end": "1275440"
  },
  {
    "text": "form every step of the way but again one size enough at all",
    "start": "1275440",
    "end": "1281520"
  },
  {
    "text": "this talk is short uh you know there's lots of things to take away here and uh",
    "start": "1281520",
    "end": "1287200"
  },
  {
    "text": "you know i don't it would be great if we had more time but unfortunately we don't definitely in the q and a here",
    "start": "1287200",
    "end": "1293760"
  },
  {
    "text": "i'm sure there's going to be questions there's going to be comments please you know more than happy to talk about",
    "start": "1293760",
    "end": "1299520"
  },
  {
    "text": "them but and i don't want to get you to think that one size fits all here it does not um takeaways here are",
    "start": "1299520",
    "end": "1306640"
  },
  {
    "text": "the opportunity when you're waiting uh for something external to happen or things like that if you think about it",
    "start": "1306640",
    "end": "1313120"
  },
  {
    "text": "from an asynchronous perspective we may think that a lot of times it's complicated but it's not it's what do you do when waiting",
    "start": "1313120",
    "end": "1319280"
  },
  {
    "text": "sometimes it's easy a question to answer or and leaves us down interesting paths sometimes it doesn't",
    "start": "1319280",
    "end": "1325840"
  },
  {
    "text": "and not all systems need to be async but there's a lot of systems that could really benefit from being asynchronous",
    "start": "1325840",
    "end": "1333039"
  },
  {
    "text": "and thinking about it that way so thank you and we'll take some questions now",
    "start": "1333039",
    "end": "1340960"
  },
  {
    "text": "thank you for a great presentation always enjoy your presentations also thank you to olin",
    "start": "1343120",
    "end": "1348400"
  },
  {
    "text": "for joining the session today um we have a couple of interesting questions on the",
    "start": "1348400",
    "end": "1354000"
  },
  {
    "text": "on the chat uh also i encourage everybody to share questions on the chats uh so uh we can answer them um",
    "start": "1354000",
    "end": "1362080"
  },
  {
    "text": "i had i'm gonna start with a question from me if that's okay um um so so you did talk about the you know",
    "start": "1362080",
    "end": "1369679"
  },
  {
    "text": "the duty cycle and how you would write it so in reality how much",
    "start": "1369679",
    "end": "1374720"
  },
  {
    "text": "a developer actually write that and just you instead but instead use a framework that will do most of the work for them",
    "start": "1374720",
    "end": "1381600"
  },
  {
    "text": "oh uh i think most of the time um developers using used frameworks and",
    "start": "1381600",
    "end": "1387120"
  },
  {
    "text": "patterns that are already in existence they don't do the duty cycle and i think that's perfectly fine",
    "start": "1387120",
    "end": "1393840"
  },
  {
    "text": "but i think that also makes it so that it's easy to miss the idea of what a unit of work is so and to sort of tie",
    "start": "1393840",
    "end": "1401440"
  },
  {
    "text": "that to one of the questions that was asked about you know actor model reactive programming patterns and anti-patterns",
    "start": "1401440",
    "end": "1408320"
  },
  {
    "text": "um what i've seen repeatedly is um when using any of those the idea of a unit of",
    "start": "1408320",
    "end": "1415600"
  },
  {
    "text": "work is sort of lost um and what creeps in is the fact that in that unit of work",
    "start": "1415600",
    "end": "1420960"
  },
  {
    "text": "now you have additional you know basically blocking operations um validation is one",
    "start": "1420960",
    "end": "1426720"
  },
  {
    "text": "that i used here because i've seen multiple times where the idea of okay i got a piece of work in first thing i",
    "start": "1426720",
    "end": "1432000"
  },
  {
    "text": "want to do is go and block waiting for a validation externally and but i'm using",
    "start": "1432000",
    "end": "1437440"
  },
  {
    "text": "an ad you know i'm using the actor model uh this framework and so it's it's efficient but i can't figure out why",
    "start": "1437440",
    "end": "1443919"
  },
  {
    "text": "it's slow right and so that so i think i think the frameworks do a",
    "start": "1443919",
    "end": "1449440"
  },
  {
    "text": "really good job of providing a good model but you still have to have that concern about",
    "start": "1449440",
    "end": "1455039"
  },
  {
    "text": "um what is the unit of work does that unit of work have additional steps that",
    "start": "1455039",
    "end": "1460320"
  },
  {
    "text": "are can be broken down um you know in that in that framework and so",
    "start": "1460320",
    "end": "1465520"
  },
  {
    "text": "i think that um that there's nothing wrong with using those frameworks but to get the most out",
    "start": "1465520",
    "end": "1470559"
  },
  {
    "text": "of them you still have to come back the idea of what is this unit of work and is it",
    "start": "1470559",
    "end": "1475840"
  },
  {
    "text": "can i break it down further um and that that's something i've uh and",
    "start": "1475840",
    "end": "1481039"
  },
  {
    "text": "it's hard none of this is easy uh you know i just want to get that across i'm not trying to wave my hands and say",
    "start": "1481039",
    "end": "1487600"
  },
  {
    "text": "this all is is easy or we should look at it you know more be more diligent or rigorous it's difficult um you know",
    "start": "1487600",
    "end": "1494480"
  },
  {
    "text": "programming is difficult in general this just makes it a little bit harder yeah i agree i mean at twitter we use",
    "start": "1494480",
    "end": "1501600"
  },
  {
    "text": "finego which is a synchronous rpc that most of our services used to communicate and",
    "start": "1501600",
    "end": "1507520"
  },
  {
    "text": "sometimes the negative people have to go and very carefully tell other developers you",
    "start": "1507520",
    "end": "1512559"
  },
  {
    "text": "should don't really do blocking calls inside the critical parts that's not at the point you know you you",
    "start": "1512559",
    "end": "1518080"
  },
  {
    "text": "schedule them using finagle you don't block you know because you know you block all the financial threads and that's that's",
    "start": "1518080",
    "end": "1523440"
  },
  {
    "text": "not a good idea so but we haven't eliminated most of those so but yeah yeah i mean i i i agree that no none of",
    "start": "1523440",
    "end": "1529039"
  },
  {
    "text": "this stuff is easy um uh we can take um uh do you want to elaborate on the couple of questions",
    "start": "1529039",
    "end": "1535440"
  },
  {
    "text": "that we had on the chat so uh the first one from sebastian was like a new recommendations out of this uh",
    "start": "1535440",
    "end": "1541679"
  },
  {
    "text": "model reactive program patters and the patterns would you like to elaborate more a little bit on that yeah yeah i uh",
    "start": "1541679",
    "end": "1548640"
  },
  {
    "text": "one i am a fan of the actor model um i like the again if you look at me the",
    "start": "1548640",
    "end": "1553919"
  },
  {
    "text": "systems that i i have out in open source and have worked on um using cues a lot using the idea of",
    "start": "1553919",
    "end": "1562640"
  },
  {
    "text": "communication and then you know sort of having processing that is done it's it's not",
    "start": "1562640",
    "end": "1568880"
  },
  {
    "text": "i don't want to say it's it's the actor model but i think that model is easier at least for me to think about that",
    "start": "1568880",
    "end": "1574559"
  },
  {
    "text": "might be because of my background with protocols and packets on the wire and units of work",
    "start": "1574559",
    "end": "1580000"
  },
  {
    "text": "are kind of baked into that a lot so i have a very much an affinity for",
    "start": "1580000",
    "end": "1585919"
  },
  {
    "text": "things that make the concept of a unit of work um already to be something that is very",
    "start": "1585919",
    "end": "1592640"
  },
  {
    "text": "front and center and the actor model does that but having said that things like the you know reactive programming",
    "start": "1592640",
    "end": "1599279"
  },
  {
    "text": "especially with the rx style um you know i think have a lot of",
    "start": "1599279",
    "end": "1604320"
  },
  {
    "text": "benefit from the composition side so i always encourage people to look at that",
    "start": "1604320",
    "end": "1610400"
  },
  {
    "text": "you know whether it makes sense to them or not is sort of you know you have to look at various things and see what you",
    "start": "1610400",
    "end": "1615440"
  },
  {
    "text": "know what works for you uh but i think reactive programming has uh a lot that's why i was involved in",
    "start": "1615440",
    "end": "1621279"
  },
  {
    "text": "things like r socket reactive socket and stuff like that um i think that those have a lot of very good things in",
    "start": "1621279",
    "end": "1627679"
  },
  {
    "text": "them uh beyond that i mean patterns and anti-patterns i think learning cueing theory which",
    "start": "1627679",
    "end": "1634000"
  },
  {
    "text": "it may sound intimidating but it's not um most of it is uh you know fairly easy",
    "start": "1634000",
    "end": "1639039"
  },
  {
    "text": "to sort of absorb at the high enough level that you can see far enough to help systems",
    "start": "1639039",
    "end": "1645120"
  },
  {
    "text": "is one of those things that i think pays for itself just like learning basic data structures",
    "start": "1645120",
    "end": "1651279"
  },
  {
    "text": "we should teach a little bit more about cueing theory and things behind it because that's where you know",
    "start": "1651279",
    "end": "1658000"
  },
  {
    "text": "getting an intuition for how cues work and sort of the some of the theory",
    "start": "1658000",
    "end": "1663279"
  },
  {
    "text": "behind them goes a huge way when looking at systems real live systems um you know at least at least it",
    "start": "1663279",
    "end": "1670240"
  },
  {
    "text": "has for me um you know but uh i i i do encourage people to look at that",
    "start": "1670240",
    "end": "1675760"
  },
  {
    "text": "you know beyond that uh technologies frameworks um i i think you you by",
    "start": "1675760",
    "end": "1680960"
  },
  {
    "text": "spending your time more looking at what is behind a framework in other words the concepts you do much better than just looking at",
    "start": "1680960",
    "end": "1687440"
  },
  {
    "text": "how to you know use a framework that may be front and center because that's what you want to do but go deeper go deeper",
    "start": "1687440",
    "end": "1694000"
  },
  {
    "text": "into what is it built on why does it work this way why doesn't it work this other way uh you know asking those",
    "start": "1694000",
    "end": "1699760"
  },
  {
    "text": "questions i think you'll learn a lot you know a tremendous amount yeah that that's a great point um",
    "start": "1699760",
    "end": "1706960"
  },
  {
    "text": "uh uh sebastian i hope to answer your question feel free to follow up with uh",
    "start": "1706960",
    "end": "1712720"
  },
  {
    "text": "more if you want on the chat and again i would encourage everybody to to share some more questions on the chat um the",
    "start": "1712720",
    "end": "1718720"
  },
  {
    "text": "other one from david uh the networking part of the industry has solved this with ccp udp",
    "start": "1718720",
    "end": "1724960"
  },
  {
    "text": "http 3 what has prevented us from solving this in an industry-wide manner at an application level",
    "start": "1724960",
    "end": "1731600"
  },
  {
    "text": "how much time do we have well that one i think you know uh the",
    "start": "1731600",
    "end": "1739760"
  },
  {
    "text": "i guess the the way that i think of it because i'm coming from that uh i spent so much time you know early on in my",
    "start": "1739760",
    "end": "1746159"
  },
  {
    "text": "career learning protocols and learning how protocols were designed and designing protocols and so from my",
    "start": "1746159",
    "end": "1752559"
  },
  {
    "text": "perspective it is a lesson i learned early and had a big influence on me so when i look back",
    "start": "1752559",
    "end": "1758559"
  },
  {
    "text": "and why hasn't you know why haven't we applied a lot of that to applications it's because",
    "start": "1758559",
    "end": "1765360"
  },
  {
    "text": "um just like out as cpus provides you with program order and compilers reorder but with the",
    "start": "1765360",
    "end": "1773200"
  },
  {
    "text": "idea that none of your critical path that you look through in your program and your mind is still going to function",
    "start": "1773200",
    "end": "1779760"
  },
  {
    "text": "step one step two step three by giving this illusion of sequentiality that we can",
    "start": "1779760",
    "end": "1785600"
  },
  {
    "text": "base our mental models on it's given us the idea that it's okay to just you know",
    "start": "1785600",
    "end": "1790720"
  },
  {
    "text": "not be concerned about it why is that the networking level you don't have any",
    "start": "1790720",
    "end": "1795760"
  },
  {
    "text": "any way to not be concerned about it uh especially if you want to make it you know efficient and so i think as",
    "start": "1795760",
    "end": "1803679"
  },
  {
    "text": "things like performance become a little bit more important because of you know",
    "start": "1803679",
    "end": "1808880"
  },
  {
    "text": "in effect climate change you know and i and and we're starting to see that",
    "start": "1808880",
    "end": "1814480"
  },
  {
    "text": "performance is something that people take into consideration for other reasons than just you know the trading community for example",
    "start": "1814480",
    "end": "1821039"
  },
  {
    "text": "um we'll we'll start to see some of this revisited because there's good lessons that we need they just need to be",
    "start": "1821039",
    "end": "1827440"
  },
  {
    "text": "brought into like more of the application space at least that's my thought",
    "start": "1827440",
    "end": "1832960"
  },
  {
    "text": "yeah um quick follow-up from sebastian in preference for an actor model framework herland elixir or akka something else",
    "start": "1833520",
    "end": "1841760"
  },
  {
    "text": "um personally uh you know i actually like erlang and",
    "start": "1841760",
    "end": "1847200"
  },
  {
    "text": "elixir from the standpoint of the mental model and some of that has to do with the fact",
    "start": "1847200",
    "end": "1853520"
  },
  {
    "text": "that as i was kind of learning erlang you know and i got to talk to joe armstrong",
    "start": "1853520",
    "end": "1861279"
  },
  {
    "text": "and got to really kind of sit down and have some good conversations with him and i i",
    "start": "1861279",
    "end": "1866559"
  },
  {
    "text": "it was not surprising to me and after reading his dissertation and every and a lot of the other work",
    "start": "1866559",
    "end": "1873440"
  },
  {
    "text": "it it was something that was clearly so close to where i came from you know from the networking",
    "start": "1873440",
    "end": "1879679"
  },
  {
    "text": "perspective and everything else but there was so much good that was there that i you know i i find when i get to use some",
    "start": "1879679",
    "end": "1887520"
  },
  {
    "text": "erlang i haven't actually used elixir uh you know any more than just playing around with it but erlang i've written a",
    "start": "1887520",
    "end": "1893760"
  },
  {
    "text": "few things in uh especially recently and i really do like kind of the idioms of",
    "start": "1893760",
    "end": "1899440"
  },
  {
    "text": "her legs so from a from a you know aesthetic perspective i i do kind of and",
    "start": "1899440",
    "end": "1905679"
  },
  {
    "text": "i know it's odd i kind of do prefer that akka is something i'm also familiar with",
    "start": "1905679",
    "end": "1911440"
  },
  {
    "text": "um but i haven't used it in any bigger system um i've used go and or and",
    "start": "1911440",
    "end": "1917440"
  },
  {
    "text": "rust and a few others that have pieces of the same things and i think",
    "start": "1917440",
    "end": "1922960"
  },
  {
    "text": "it is really nice to see those but i it's very much more of a personal choice",
    "start": "1922960",
    "end": "1928000"
  },
  {
    "text": "the erlang or elixir thing is simply just something that i've had the opportunity to use heavily you know off and on last several",
    "start": "1928000",
    "end": "1936000"
  },
  {
    "text": "years and really do like uh but it does it's not for everyone um",
    "start": "1936000",
    "end": "1941919"
  },
  {
    "text": "and so i think it you know that's just a personal preference but i i think",
    "start": "1941919",
    "end": "1947679"
  },
  {
    "text": "looking at the keeping an open mind trying things out on your own i think is very valuable so if possible i suggest",
    "start": "1947679",
    "end": "1955519"
  },
  {
    "text": "you know looking at what you know kind of speaks to you um you know using say whenever you use a",
    "start": "1955519",
    "end": "1962240"
  },
  {
    "text": "framework or a language there's always that you know thing of well this works but it's a little clunky and then this",
    "start": "1962240",
    "end": "1968080"
  },
  {
    "text": "isn't great so everything is pretty much bad all over right it doesn't matter it's",
    "start": "1968080",
    "end": "1973919"
  },
  {
    "text": "just personal you find as you use something it i find if you like something you haven't probably used it",
    "start": "1973919",
    "end": "1979600"
  },
  {
    "text": "enough right so you know for me",
    "start": "1979600",
    "end": "1986240"
  },
  {
    "text": "you know i do encourage people to take a look at erlang you know but that doesn't",
    "start": "1986240",
    "end": "1991519"
  },
  {
    "text": "necessarily mean that you should do that and avoid other stuff you should try everything out and see what speaks to",
    "start": "1991519",
    "end": "1996799"
  },
  {
    "text": "you yeah i've always been fascinated by airline and i don't want to spend more time on this but um i was fascinated",
    "start": "1996799",
    "end": "2003360"
  },
  {
    "text": "because i'm a covers collection person and it has a very interesting like memory management model and the fact that like",
    "start": "2003360",
    "end": "2009360"
  },
  {
    "text": "your thread local gc in the language basically the language kind of assures it uh the way structures the uh you know",
    "start": "2009360",
    "end": "2015760"
  },
  {
    "text": "the object so that you know that's been fascinating for me um so",
    "start": "2015760",
    "end": "2021279"
  },
  {
    "text": "talk of different technologies are you familiar with project loom yes uh yeah um um just for a little bit of",
    "start": "2021279",
    "end": "2028799"
  },
  {
    "text": "introduction project loom basically supposed to introduce fibers in java which are very very lightweight trends so the idea is that um you know you can",
    "start": "2028799",
    "end": "2036240"
  },
  {
    "text": "run thousands of them and they're not going to fill up you know your memory because no open we're going to have a",
    "start": "2036240",
    "end": "2041360"
  },
  {
    "text": "full stack and all we're going to have a full uh oh any thoughts on java fibers yeah you're already in my mind uh right here",
    "start": "2041360",
    "end": "2048158"
  },
  {
    "text": "um uh yeah and the ideas are very lightweight and then you can run thousands of them and then you get the",
    "start": "2048159",
    "end": "2054638"
  },
  {
    "text": "best partners but if one of them you know starts doing some uh synchronous io another one will be scheduled then very",
    "start": "2054639",
    "end": "2060240"
  },
  {
    "text": "very quickly so i just needed to kind of give a little bit of introduction any thoughts on that",
    "start": "2060240",
    "end": "2065440"
  },
  {
    "text": "yeah i do um i'm hopeful but uh i'm also of the mind that i've been",
    "start": "2065440",
    "end": "2071280"
  },
  {
    "text": "down this road a couple times where you know the idea of you know sort of let's just have lighter",
    "start": "2071280",
    "end": "2077839"
  },
  {
    "text": "weight threads um has come up a few times and um and what tends to happen is",
    "start": "2077839",
    "end": "2086398"
  },
  {
    "text": "we don't still we we think well this is hidden from me and so i won't take care of it or i won't think about it until",
    "start": "2086399",
    "end": "2092560"
  },
  {
    "text": "you know it becomes an issue um and so i'm hopeful but i don't think that's",
    "start": "2092560",
    "end": "2098320"
  },
  {
    "text": "really where the you know the where we should spend some of that time",
    "start": "2098320",
    "end": "2103440"
  },
  {
    "text": "i don't see it as a panacea and all all of a sudden the coherence penalty and the serialization will go away which are",
    "start": "2103440",
    "end": "2109440"
  },
  {
    "text": "in inherent in a lot of those designs so i i it would be uh",
    "start": "2109440",
    "end": "2115440"
  },
  {
    "text": "it would be very interesting to see how you know this gets applied",
    "start": "2115440",
    "end": "2120480"
  },
  {
    "text": "to some systems that i've seen uh you know i've seen some systems with 600 threads running on you know two cores",
    "start": "2120480",
    "end": "2127119"
  },
  {
    "text": "and they're just painful it's not because of the application design",
    "start": "2127119",
    "end": "2132240"
  },
  {
    "text": "except for the fact that they're just interfering with one another and lightweight threads don't",
    "start": "2132240",
    "end": "2138720"
  },
  {
    "text": "help that they can make it worse so it'll be interesting to see how things",
    "start": "2138720",
    "end": "2145119"
  },
  {
    "text": "go i'm very i'm hopeful but i'm not you know i'm holding my breath in essence to see",
    "start": "2145119",
    "end": "2152240"
  },
  {
    "text": "how that kind of stuff comes out some of the things that have come out of project loom that have impacted the jbm",
    "start": "2152240",
    "end": "2158400"
  },
  {
    "text": "are great though because there are certain things that you know i and others have looked at for many years and thought well this should",
    "start": "2158400",
    "end": "2164800"
  },
  {
    "text": "just be better because this is clearly just bad uh you know looking at them and they have",
    "start": "2164800",
    "end": "2170640"
  },
  {
    "text": "improved a number of those things and i think that's great that's awesome um you know but",
    "start": "2170640",
    "end": "2176320"
  },
  {
    "text": "uh i i'm not exactly sold on the direction but i'm hopeful okay yeah i'm also kind of fascinated to",
    "start": "2176320",
    "end": "2183680"
  },
  {
    "text": "see how you know where is going gonna find usage and where it's gonna improve things so um we'll see um we have a couple more uh",
    "start": "2183680",
    "end": "2190960"
  },
  {
    "text": "minutes i think so um i'll i'll ask one final question so one of the most challenging aspects of doing",
    "start": "2190960",
    "end": "2197839"
  },
  {
    "text": "something like an asynchronous design where you know you send requests and then you kind of get them later is",
    "start": "2197839",
    "end": "2203040"
  },
  {
    "text": "actually um error reporting and error tracking so if you have a linear piece",
    "start": "2203040",
    "end": "2208320"
  },
  {
    "text": "of code you know like okay failed here so i know what's going on if you have an exception in the middle of this request",
    "start": "2208320",
    "end": "2213599"
  },
  {
    "text": "is sometimes it's challenging to kind of associate it with what was going on if that makes sense any any thoughts on",
    "start": "2213599",
    "end": "2219920"
  },
  {
    "text": "that um well a lot of code that i've seen that has a big block and a try and a catch",
    "start": "2219920",
    "end": "2226400"
  },
  {
    "text": "and then it has like io exception and there's like a whole bunch of io that happen it you know some of the sequential",
    "start": "2226400",
    "end": "2233920"
  },
  {
    "text": "logic has the same problem it's when did it so i think in my mind it's context um so yeah",
    "start": "2233920",
    "end": "2240560"
  },
  {
    "text": "you know it it it's really what what was the operation if it's an event that comes in you can",
    "start": "2240560",
    "end": "2246480"
  },
  {
    "text": "handle it just like an event you know so you might think about state change and i think that is easier way to deal with",
    "start": "2246480",
    "end": "2252960"
  },
  {
    "text": "some exceptions in big blocks as well is to think about it break it down and to and to look at it in a different",
    "start": "2252960",
    "end": "2260160"
  },
  {
    "text": "way so i you know in my mind um i think that it makes sense to think of",
    "start": "2260160",
    "end": "2266000"
  },
  {
    "text": "them as events which is something i've harped on for a number of years uh now when you look at these when you look at",
    "start": "2266000",
    "end": "2271599"
  },
  {
    "text": "systems you should think of them as errors should be higher level and handled a little bit",
    "start": "2271599",
    "end": "2276880"
  },
  {
    "text": "you know better in context doesn't mean you handle them locally it means you handle them with the context that they should right right right um you know so",
    "start": "2276880",
    "end": "2284079"
  },
  {
    "text": "that that to me but but it is hard and one of the things that does make them a little bit easier in my mind are things",
    "start": "2284079",
    "end": "2290480"
  },
  {
    "text": "like rx and other patterns that you know an error pro happens as an event um you",
    "start": "2290480",
    "end": "2296400"
  },
  {
    "text": "know that you can deal with slightly separately which forces you to have a little bit more context for for them",
    "start": "2296400",
    "end": "2302720"
  },
  {
    "text": "right right um okay uh thanks again um uh thanks to all the attendees and then",
    "start": "2302720",
    "end": "2308640"
  },
  {
    "text": "we're gonna drop off and then join the zoom hangout so um anybody was",
    "start": "2308640",
    "end": "2314240"
  },
  {
    "text": "interested join us and then we can have a conversation there yeah thank you",
    "start": "2314240",
    "end": "2320920"
  },
  {
    "text": "[Music]",
    "start": "2324110",
    "end": "2330400"
  },
  {
    "text": "you",
    "start": "2331599",
    "end": "2333680"
  }
]