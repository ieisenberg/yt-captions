[
  {
    "text": "[Music]",
    "start": "0",
    "end": "23560"
  },
  {
    "text": "so what I want to talk here is essentially give you we give the talk I",
    "start": "24300",
    "end": "31270"
  },
  {
    "text": "gave at scatter days so that was last week it was a great conference I think a",
    "start": "31270",
    "end": "37629"
  },
  {
    "text": "lot more everybody on the conference really enjoyed not just this thought but",
    "start": "37629",
    "end": "42790"
  },
  {
    "text": "all of the talks are way amazing so the keynote I gave there I want every give",
    "start": "42790",
    "end": "48040"
  },
  {
    "text": "here because I think that maybe there's something interesting for you here as well I assume that most of you here are",
    "start": "48040",
    "end": "54550"
  },
  {
    "text": "scallop programmers so we're going to talk about Scala with style or what style to use mascara so",
    "start": "54550",
    "end": "62430"
  },
  {
    "text": "to give you a little perspective in this talk I'll argue that we are in a transition period between two",
    "start": "62430",
    "end": "70149"
  },
  {
    "text": "programming paradigms imperative object-oriented programming that's what we used so far and I think we are",
    "start": "70149",
    "end": "76450"
  },
  {
    "text": "transitioning to more and more functional in the end I believe it won't be a transition that we will completely",
    "start": "76450",
    "end": "82869"
  },
  {
    "text": "replace one one with the other but we'll see a fusion of these and in this period",
    "start": "82869",
    "end": "88030"
  },
  {
    "text": "of upheaval which we are seeing right now there are many questions of programming techniques and",
    "start": "88030",
    "end": "95229"
  },
  {
    "text": "programming style that have to be revisited so I want to give you my perspective on that",
    "start": "95229",
    "end": "101099"
  },
  {
    "text": "I'm actually pretty old so I'm old enough to know the period of the last",
    "start": "101099",
    "end": "106509"
  },
  {
    "text": "periods of upheaval that was like in the IDS when object-oriented programming took over I was a grad student then and",
    "start": "106509",
    "end": "113080"
  },
  {
    "text": "at the last part of the eighties I was a grad student and before that I was an",
    "start": "113080",
    "end": "118360"
  },
  {
    "text": "undergrad and I remember still when this byte cover came out that was an 81 I was",
    "start": "118360",
    "end": "124959"
  },
  {
    "text": "on an internship at Siemens I think and I read this and I was fascinated but",
    "start": "124959",
    "end": "129970"
  },
  {
    "text": "also thoroughly confused methods messages objects what were they talking",
    "start": "129970",
    "end": "135430"
  },
  {
    "text": "about it was very very weird but somehow fascinating so that was the whole issue",
    "start": "135430",
    "end": "140860"
  },
  {
    "text": "of the byte magazine which was the the premiere magazine for developers of the day of the time about small talk so now",
    "start": "140860",
    "end": "149310"
  },
  {
    "text": "I have a question for you what was the first object-oriented programming language yeah she was it yeah you didn't fall for",
    "start": "149310",
    "end": "157889"
  },
  {
    "text": "small talk even though I had sort of like you to that it was similar 67 right",
    "start": "157889",
    "end": "163560"
  },
  {
    "text": "so that was a good decade before Smalltalk came out and the second then",
    "start": "163560",
    "end": "168689"
  },
  {
    "text": "was small talk so now the question is well what did these languages have in",
    "start": "168689",
    "end": "174030"
  },
  {
    "text": "common or rather why did object oriented programming become popular and I think to answer the question it would be good",
    "start": "174030",
    "end": "180540"
  },
  {
    "text": "to see what similar 67 and small talk have in common so why they become",
    "start": "180540",
    "end": "185699"
  },
  {
    "text": "popular was it because of encapsulation both small talk and sim would have",
    "start": "185699",
    "end": "190739"
  },
  {
    "text": "encapsulation now don't think so code reuse no",
    "start": "190739",
    "end": "196579"
  },
  {
    "text": "dynamic binding probably closer but not directly",
    "start": "196579",
    "end": "202159"
  },
  {
    "text": "dependency inversion that one came much later Liskov substitution principle",
    "start": "202159",
    "end": "208010"
  },
  {
    "text": "open-closed principle you gotta be kidding it I believe it was because of the new",
    "start": "208010",
    "end": "214739"
  },
  {
    "text": "things you could do with the object on it program that's not to say that these principles are not important of course",
    "start": "214739",
    "end": "220229"
  },
  {
    "text": "they are important but to actually get the adoption the initial adoption you",
    "start": "220229",
    "end": "225750"
  },
  {
    "text": "need to fulfill a need that the incumbent cannot fulfill so what was that so it was essentially about the",
    "start": "225750",
    "end": "232859"
  },
  {
    "text": "relationship of methods or operations and data structures the traditional approach is epitomized here with a",
    "start": "232859",
    "end": "239790"
  },
  {
    "text": "linked list you have in a linked list you have only two cases the list is empty or non-empty and then you have an",
    "start": "239790",
    "end": "246299"
  },
  {
    "text": "unbounded number of operations you can map over a list you can reverse it you can print it get an element insert and",
    "start": "246299",
    "end": "253379"
  },
  {
    "text": "so on when similar car came out that was originally as the name implies for",
    "start": "253379",
    "end": "259469"
  },
  {
    "text": "simulation and simulation actually is slightly different from this model there",
    "start": "259469",
    "end": "265199"
  },
  {
    "text": "you have only a fixed number of operations these operations are typically get your",
    "start": "265199",
    "end": "272120"
  },
  {
    "text": "simulator your objects to the next step print it display it in some way copy and",
    "start": "272120",
    "end": "278460"
  },
  {
    "text": "aggregate but then there's an unbounded number of things that you can simulate so possible implementation of the",
    "start": "278460",
    "end": "285060"
  },
  {
    "text": "simulation class would be a car or a road or a molecule or a cell a person a",
    "start": "285060",
    "end": "291270"
  },
  {
    "text": "building a city could be anything really and that was a new challenge because you",
    "start": "291270",
    "end": "296280"
  },
  {
    "text": "suddenly had an unbounded number of possible data types that all were",
    "start": "296280",
    "end": "301610"
  },
  {
    "text": "responding to the same API to the same protocol okay so that was similar small talk was",
    "start": "301610",
    "end": "308970"
  },
  {
    "text": "for three widgets and then we actually see the same situation a fixed number of",
    "start": "308970",
    "end": "314250"
  },
  {
    "text": "operations with something on a GUI widget you can redraw it can form the bounding rectangle you can move it and",
    "start": "314250",
    "end": "321660"
  },
  {
    "text": "so on and you have an unbounded number of possible widgets could be windows or menus or letters of videos curves images",
    "start": "321660",
    "end": "328980"
  },
  {
    "text": "anything really and Smalltalk came out as a language on the alto computer first",
    "start": "328980",
    "end": "334680"
  },
  {
    "text": "personal computer right here at cells Park and that was new for several reasons one was it has a bitmap display",
    "start": "334680",
    "end": "341430"
  },
  {
    "text": "and the second was it had a mouse and for these reasons you could suddenly",
    "start": "341430",
    "end": "346680"
  },
  {
    "text": "have a large number of different forums that he could present to the user",
    "start": "346680",
    "end": "352230"
  },
  {
    "text": "previously with ASCII terminals you were very limited it was about all letters so that was a new thing and Smalltalk was a",
    "start": "352230",
    "end": "358650"
  },
  {
    "text": "language for it so both simulation and gooeys have in common that they need a way to execute a",
    "start": "358650",
    "end": "364919"
  },
  {
    "text": "fixed API with an unknown implementation and it certainly was possible to do this with a procedural language such as C but",
    "start": "364919",
    "end": "372210"
  },
  {
    "text": "it was very cumbersome so I remember at this at the same time there was i b m",
    "start": "372210",
    "end": "378000"
  },
  {
    "text": "and tried to compete against Windows with the operating always - that had a",
    "start": "378000",
    "end": "383010"
  },
  {
    "text": "window manager called presentation manager and that was written in the original style and it was actually very",
    "start": "383010",
    "end": "389130"
  },
  {
    "text": "hard to program compared to something in an object-oriented language so I think I believe that's why everybody migrated to",
    "start": "389130",
    "end": "397110"
  },
  {
    "text": "object programming at first of many people did because to do these things it was just so much easier so",
    "start": "397110",
    "end": "403820"
  },
  {
    "text": "what does it have to do with functional programming so I believe just like o repeated there and function programming",
    "start": "403820",
    "end": "410220"
  },
  {
    "text": "has lots of two dollars methodological advantages I believe I don't need to convince you",
    "start": "410220",
    "end": "416730"
  },
  {
    "text": "that in writing country programs you will use your error rate you can can gain better model arity raise your level",
    "start": "416730",
    "end": "423960"
  },
  {
    "text": "of abstraction get shorter code increase your developer productivity all these advantages are real but I think they are",
    "start": "423960",
    "end": "431490"
  },
  {
    "text": "long and not enough for mainstream adoption counter-argument to that would be well",
    "start": "431490",
    "end": "436800"
  },
  {
    "text": "afterall Lisp has been around for 50 years and so there was time enough to",
    "start": "436800",
    "end": "442110"
  },
  {
    "text": "prove the method object or advantages of functional programming but it hasn't happened and I believe that doesn't mean",
    "start": "442110",
    "end": "448410"
  },
  {
    "text": "that these points are not true I firmly believe they are true but to actually get mainstream a doctor adoption you",
    "start": "448410",
    "end": "454710"
  },
  {
    "text": "need a catalyzer something that starts initial adoption beyond what we see now",
    "start": "454710",
    "end": "460170"
  },
  {
    "text": "I mean I think this adoption so very super encouraging but we need to go the next steps and reach out to",
    "start": "460170",
    "end": "466760"
  },
  {
    "text": "other layers of programmers until after that the other advantages became clear",
    "start": "466760",
    "end": "472950"
  },
  {
    "text": "to everyone and I believe we have this catalyzer now because the catalyzer is essentially the",
    "start": "472950",
    "end": "479460"
  },
  {
    "text": "two forces that drive a lot of software complexity today which come from hardware multi-core and",
    "start": "479460",
    "end": "486150"
  },
  {
    "text": "cloud computing hardware for the first time in a long",
    "start": "486150",
    "end": "492360"
  },
  {
    "text": "time I believe Intel is actually not giving us necessarily the hard way that people asked for I think everybody would",
    "start": "492360",
    "end": "499560"
  },
  {
    "text": "like to have a 50 gigahertz Intel i7 but we don't get a 50 gigahertz Intel i7 in",
    "start": "499560",
    "end": "505650"
  },
  {
    "text": "instead we get 6 cores or 8 cores on that because that's what what can be",
    "start": "505650",
    "end": "510810"
  },
  {
    "text": "provided and furthermore it has this development also has led to a new mode",
    "start": "510810",
    "end": "518130"
  },
  {
    "text": "where you say well if you need more compute power you fire up more service you distribute your load over an elastic",
    "start": "518130",
    "end": "525000"
  },
  {
    "text": "number of servers in a data center and the cloud and that's your new model that's how you get more power but of",
    "start": "525000",
    "end": "531030"
  },
  {
    "text": "course it will affect your programming model you can't just rely to do everything sequentially anymore no more",
    "start": "531030",
    "end": "536370"
  },
  {
    "text": "servers you spread your application over the more you have to think about handling parallelism handling",
    "start": "536370",
    "end": "544060"
  },
  {
    "text": "distribution handing possible failures of your server and so on and I believe",
    "start": "544060",
    "end": "549260"
  },
  {
    "text": "that's the triple challenge that we're facing today parallel how to make use of multi cores CPUs in GPUs and clusters",
    "start": "549260",
    "end": "558760"
  },
  {
    "text": "asynchronous how to deal with asynchronous events and distributed how to deal with delays and failures and it",
    "start": "558760",
    "end": "566300"
  },
  {
    "text": "turns out that mutable state is actually a liability for each one of these because it causes the tough problem of",
    "start": "566300",
    "end": "574070"
  },
  {
    "text": "cache coherence how do you validate your caches if there's a change somewhere over the network of races of versioning",
    "start": "574070",
    "end": "581420"
  },
  {
    "text": "and so on so the essence of functional programming then is that instead of",
    "start": "581420",
    "end": "586550"
  },
  {
    "text": "doing these stepwise modifications of mutable state which are problematic we want to concentrate on transformations",
    "start": "586550",
    "end": "593420"
  },
  {
    "text": "of immutable values so once we are there the question is",
    "start": "593420",
    "end": "599210"
  },
  {
    "text": "what about objects should we forget about object-oriented programming and all program in pure functional languages",
    "start": "599210",
    "end": "605990"
  },
  {
    "text": "like Haskell well some people would recommend that I'm not one of them because I think that what we have",
    "start": "605990",
    "end": "613850"
  },
  {
    "text": "learned about object orientation in modeling systems in decomposing system",
    "start": "613850",
    "end": "619280"
  },
  {
    "text": "stays very valid a lot of the object-oriented techniques really apply to systems architecture and just turning",
    "start": "619280",
    "end": "627320"
  },
  {
    "text": "things from imperative to functional effects that very little so it's fundamentally the question where do we",
    "start": "627320",
    "end": "634040"
  },
  {
    "text": "put things in what how do we structure a system what goes where in the end you",
    "start": "634040",
    "end": "640280"
  },
  {
    "text": "need to think about these things because otherwise you will end up with a simple flat global namespace and where",
    "start": "640280",
    "end": "646880"
  },
  {
    "text": "everything lives and we know that that can't scale to systems beyond the certain size which is way too small",
    "start": "646880",
    "end": "654370"
  },
  {
    "text": "so that brings me if we want to look at objects then then we see that we have to",
    "start": "654370",
    "end": "660290"
  },
  {
    "text": "on the align provides objects a little bit previously objects were characterized by",
    "start": "660290",
    "end": "665360"
  },
  {
    "text": "state identity and we yeah but now if you want to become functional we have to",
    "start": "665360",
    "end": "670480"
  },
  {
    "text": "change that I think state is no longer a property that's necessary associated",
    "start": "670480",
    "end": "675610"
  },
  {
    "text": "with an object think of javelin string that doesn't have mutable state in it and it's a perfectly good object very",
    "start": "675610",
    "end": "681280"
  },
  {
    "text": "nice one at that structurally quality is as we know much better than identity I",
    "start": "681280",
    "end": "686680"
  },
  {
    "text": "mean how many of us have been bitten by the fact that comparing two strings in Java might be true or false depending on",
    "start": "686680",
    "end": "693760"
  },
  {
    "text": "lots of other circumstances in the system and we definitely do want to concentrate on functionality",
    "start": "693760",
    "end": "701130"
  },
  {
    "text": "okay so we want to combine then function and object-oriented programming and I",
    "start": "701130",
    "end": "708040"
  },
  {
    "text": "believe technically that is actually quite possible the challenges are more social they are in a way they lie in the",
    "start": "708040",
    "end": "715840"
  },
  {
    "text": "way one community sees the other that's how many functional programming people see object-oriented programming",
    "start": "715840",
    "end": "722730"
  },
  {
    "text": "right and that's how many objects and programing people see functional",
    "start": "722730",
    "end": "728320"
  },
  {
    "text": "programming it's a little mad scientist where you don't know whether it's crazy or dangerous or - or the - and that's",
    "start": "728320",
    "end": "735970"
  },
  {
    "text": "where we are whereas it really is a bit between the two chairs and",
    "start": "735970",
    "end": "741540"
  },
  {
    "text": "sometimes it's hard to sit between two chairs with much like much more like it",
    "start": "741540",
    "end": "748840"
  },
  {
    "text": "this way sit and look into the sunset but to get there we may get me to get",
    "start": "748840",
    "end": "754120"
  },
  {
    "text": "rid of some baggage first miss concert by concert previous conceptions such as objects need mutable state or they need",
    "start": "754120",
    "end": "761050"
  },
  {
    "text": "reference identity or things like that good so Scala then is a bridge between",
    "start": "761050",
    "end": "767710"
  },
  {
    "text": "those two paradigms and to do this it tries to be at the same time various",
    "start": "767710",
    "end": "774640"
  },
  {
    "text": "organelles so try to make do because it tries to have a large span between",
    "start": "774640",
    "end": "780460"
  },
  {
    "text": "between two schools of programming that have been very very different it tries to be as",
    "start": "780460",
    "end": "787030"
  },
  {
    "text": "orthogonal as possible so to bridge this span with any as few concepts as possible but still to keep the whole",
    "start": "787030",
    "end": "793600"
  },
  {
    "text": "span tries to be expressive and to be an opinion so it doesn't really care about",
    "start": "793600",
    "end": "799670"
  },
  {
    "text": "where on this bridge you are whether you are an imperative side or the functional side or somewhere in the middle but the",
    "start": "799670",
    "end": "806660"
  },
  {
    "text": "language itself lets you do it either way so it naturally adapts to many different programming styles and when I",
    "start": "806660",
    "end": "814040"
  },
  {
    "text": "started out with Scala as an academic I thought well this is great this is clearly the best of all worlds",
    "start": "814040",
    "end": "820279"
  },
  {
    "text": "afterwards I had to learn that well not necessarily because then you have the big problem that well because you have a",
    "start": "820279",
    "end": "828050"
  },
  {
    "text": "choice of such a broad range of styles which ones do which one do you pick it's a hard problem for many people",
    "start": "828050",
    "end": "835330"
  },
  {
    "text": "so certainly Scala is not a better Java and neither is it a Haskell on the JVM",
    "start": "835330",
    "end": "840440"
  },
  {
    "text": "so I want to rule out the two extremes it's definitely something else so I believe that what we will see emerge but",
    "start": "840440",
    "end": "848000"
  },
  {
    "text": "we have to work to get there is a new fusion of functional and object-oriented programming and what I want to do in the",
    "start": "848000",
    "end": "855020"
  },
  {
    "text": "rest of this talk is try to make some tentative steps towards this fusion not",
    "start": "855020",
    "end": "860330"
  },
  {
    "text": "a big design but just in answering just some very concrete questions and also asking you what this answer could be",
    "start": "860330",
    "end": "867320"
  },
  {
    "text": "because sometimes one can very well disagree on them so I want to first start with six",
    "start": "867320",
    "end": "874459"
  },
  {
    "text": "guidelines which I believe help in writing good scholar programs and if you disagree then we I would certainly be",
    "start": "874459",
    "end": "882050"
  },
  {
    "text": "very happy to discuss with you at the end of the talk at the question time or after we before we leave here so the",
    "start": "882050",
    "end": "889580"
  },
  {
    "text": "first one I believe don't believe is controversial that's just keep it simple that's always good just because Scala is",
    "start": "889580",
    "end": "896870"
  },
  {
    "text": "a language where you can master wonderfully really tough problems really complex system it doesn't mean that you",
    "start": "896870",
    "end": "904520"
  },
  {
    "text": "need to bring all these mechanisms to pay pick the simplest thing that does the job pick the simplest thing that",
    "start": "904520",
    "end": "911180"
  },
  {
    "text": "goes from A to B without many contortions here so I think that's",
    "start": "911180",
    "end": "916610"
  },
  {
    "text": "pretty uncontroversial number two that's in a sense a special case of of",
    "start": "916610",
    "end": "923740"
  },
  {
    "text": "that don't pack too much in one expression so that's actually some code",
    "start": "923740",
    "end": "928779"
  },
  {
    "text": "I picked from any repository that shall remain unnamed here",
    "start": "928779",
    "end": "935579"
  },
  {
    "text": "so that's a big expression pretty five lines and takes a while to wrap your",
    "start": "935579",
    "end": "942220"
  },
  {
    "text": "head around it what it does because you have very little help it's just a sea of filters and flat maps and flat hands and",
    "start": "942220",
    "end": "948910"
  },
  {
    "text": "stuff like that so it's amazing what one can get done in a single statement",
    "start": "948910",
    "end": "955410"
  },
  {
    "text": "but that doesn't mean you have to do it so I then try to refactor this thing",
    "start": "955410",
    "end": "961720"
  },
  {
    "text": "sort of guest a little bit what what this could be and here's an alternative way to express the same so I've broken",
    "start": "961720",
    "end": "970660"
  },
  {
    "text": "this down to say well sources is getro class path and filter and we define a",
    "start": "970660",
    "end": "976089"
  },
  {
    "text": "workspace route and then we define a method files of entry that given an entry gives you all the files that",
    "start": "976089",
    "end": "982990"
  },
  {
    "text": "belong to that and finally you see a sources iterator and a flat map files of entries so for each element in sources",
    "start": "982990",
    "end": "990279"
  },
  {
    "text": "give me all the files and concatenate them so now it's sort of more legible",
    "start": "990279",
    "end": "995470"
  },
  {
    "text": "and it's very easy to do this thing particularly in Scala because Scala lets",
    "start": "995470",
    "end": "1000930"
  },
  {
    "text": "you write both Wells and deaths in line and that's one of the great things in Scala that you can actually break out",
    "start": "1000930",
    "end": "1007740"
  },
  {
    "text": "fun behavior not just values but behavior things that that get called and",
    "start": "1007740",
    "end": "1012899"
  },
  {
    "text": "you don't need to go through all the overhead of adding a new method well if you do that in Java you are at least out",
    "start": "1012899",
    "end": "1019110"
  },
  {
    "text": "of ten lines of code here it's a single line you just put it right where you need it and really please do that so I",
    "start": "1019110",
    "end": "1025168"
  },
  {
    "text": "believe a good guideline for Scala code should say it should be every line defines something and you name what you",
    "start": "1025169",
    "end": "1032280"
  },
  {
    "text": "define you don't you don't just string together a long sequence of Combinator's",
    "start": "1032280",
    "end": "1037860"
  },
  {
    "text": "before I put because you can number three prefer functional so",
    "start": "1037860",
    "end": "1043490"
  },
  {
    "text": "functional programming means programming without side effects so your function should be pure going from input to",
    "start": "1043490",
    "end": "1049380"
  },
  {
    "text": "output I don't think it's I need to convince you of the fact but they're",
    "start": "1049380",
    "end": "1054909"
  },
  {
    "text": "good films that contain the same warning here and in this corner prefer functional that",
    "start": "1054909",
    "end": "1062980"
  },
  {
    "text": "means by default use vows not Mars use recursions or combinators not loops use",
    "start": "1062980",
    "end": "1069879"
  },
  {
    "text": "immutable collections of immutable concentrate on transformations not crud",
    "start": "1069879",
    "end": "1075879"
  },
  {
    "text": "not create read update delete code but preferring functional means that",
    "start": "1075879",
    "end": "1081659"
  },
  {
    "text": "sometimes we canna break the rules and it's also important when it's okay to",
    "start": "1081659",
    "end": "1087340"
  },
  {
    "text": "break the rules so I don't want to be dogmatic Scala has a mutable area a mutable part and that's not just to pull",
    "start": "1087340",
    "end": "1095860"
  },
  {
    "text": "in all those Java programmers and then wean them off if every believes a mutable part is there for a purpose so",
    "start": "1095860",
    "end": "1102940"
  },
  {
    "text": "sometimes mutable gives better performance in particular if you're dealing with collections that are very",
    "start": "1102940",
    "end": "1108309"
  },
  {
    "text": "very large significant percentage of your total available memories say and definitely",
    "start": "1108309",
    "end": "1113860"
  },
  {
    "text": "you want to be immutable immutable is known to consume more memory than mutable and sometimes even though not",
    "start": "1113860",
    "end": "1121240"
  },
  {
    "text": "that often but still sometimes it adds convenience so here's some",
    "start": "1121240",
    "end": "1127799"
  },
  {
    "text": "points where adding a var actually would add convenience so my fourth advice",
    "start": "1127799",
    "end": "1133779"
  },
  {
    "text": "would be not to diable is local state local state so why does mutable state we",
    "start": "1133779",
    "end": "1141610"
  },
  {
    "text": "could lead to complexity well the complexity is really in the interaction",
    "start": "1141610",
    "end": "1146919"
  },
  {
    "text": "between different things that's always where complexity comes from it it comes from an interaction that you between",
    "start": "1146919",
    "end": "1152590"
  },
  {
    "text": "different strands that you can't control very well and in the case of mutable state that interaction is clearly that",
    "start": "1152590",
    "end": "1158460"
  },
  {
    "text": "you have different program parts that interact through these variables in a",
    "start": "1158460",
    "end": "1163899"
  },
  {
    "text": "temporal fashion so you have to make sure that where will is set before it is read or a lock is grabbed before you",
    "start": "1163899",
    "end": "1170529"
  },
  {
    "text": "enter a critical region and so on so that's a tricky part because this temporal fashion is not manifest program",
    "start": "1170529",
    "end": "1177840"
  },
  {
    "text": "called code it's a property that arises from program execution and that is very",
    "start": "1177840",
    "end": "1183000"
  },
  {
    "text": "hard to track so that also means that state is the more harmful than more",
    "start": "1183000",
    "end": "1188370"
  },
  {
    "text": "elements of your program it touches or SAS the counter conclusion if state is",
    "start": "1188370",
    "end": "1194159"
  },
  {
    "text": "local it's actually not that harmful at all it's just maybe a nuisance or you might not like it it's all for aesthetic",
    "start": "1194159",
    "end": "1200519"
  },
  {
    "text": "reasons but it's actually you can't really argue that it's very very it complicates your program very much so",
    "start": "1200519",
    "end": "1207149"
  },
  {
    "text": "local state is less harmful than global state so here's an example where I actually sometimes use local state so",
    "start": "1207149",
    "end": "1214409"
  },
  {
    "text": "that's from I think the classifier parser and you see code like wire interfaces bar equals pop pass class",
    "start": "1214409",
    "end": "1222870"
  },
  {
    "text": "header and then you say if there's an annotation then add class file annotation to my interfaces so that",
    "start": "1222870",
    "end": "1229409"
  },
  {
    "text": "means that essentially like telling you well interfaces is",
    "start": "1229409",
    "end": "1234720"
  },
  {
    "text": "what's in the classifier class file header but second rule modification if",
    "start": "1234720",
    "end": "1240330"
  },
  {
    "text": "the thing is an annotation then classifier annotation is also part of the interfaces that's what this says now",
    "start": "1240330",
    "end": "1247019"
  },
  {
    "text": "that uses avoir and an assignment what would it take to write this purely",
    "start": "1247019",
    "end": "1253080"
  },
  {
    "text": "functional well not that much so you could write it this way could say parsed interfaces is passed class header",
    "start": "1253080",
    "end": "1259639"
  },
  {
    "text": "interfaces is if the thing is an annotation then parsed interfaces plus",
    "start": "1259639",
    "end": "1264929"
  },
  {
    "text": "class valid notation as passed interfaces fair enough it's a small difference but the functional version is",
    "start": "1264929",
    "end": "1271080"
  },
  {
    "text": "clearly longer than the non-functional version and not necessarily clear so I",
    "start": "1271080",
    "end": "1276630"
  },
  {
    "text": "believe it actually comes down to a question of naming the functional version if really you want to make this",
    "start": "1276630",
    "end": "1283409"
  },
  {
    "text": "drive this point home that there's a difference between parsed interfaces and interfaces then do it that way it's",
    "start": "1283409",
    "end": "1289230"
  },
  {
    "text": "perfectly good even though it's longer you shouldn't you say the shortest one each time but if you think that this",
    "start": "1289230",
    "end": "1295230"
  },
  {
    "text": "distinction is actually a nuisance and all you're interested is what is the final interfaces then I would say well",
    "start": "1295230",
    "end": "1301610"
  },
  {
    "text": "you don't need to jump through these hoops you can just use a local variable the qualification here is the variable",
    "start": "1301610",
    "end": "1309980"
  },
  {
    "text": "really should have a very clearly delineated scope so yeah ideally after these two lines here",
    "start": "1309980",
    "end": "1316190"
  },
  {
    "text": "the method should or the block should finish and you should just return interfaces then it's clear that nothing",
    "start": "1316190",
    "end": "1322700"
  },
  {
    "text": "bad will happen with this variable if that's a global variable then I would say no by all means no because this",
    "start": "1322700",
    "end": "1329000"
  },
  {
    "text": "global variable of course then is exposed you don't know what code",
    "start": "1329000",
    "end": "1334720"
  },
  {
    "text": "interacts with it and even if your current version is clean and nothing interacts with it it's just an",
    "start": "1334720",
    "end": "1340130"
  },
  {
    "text": "invitation for the next guy that comes along or gal that comes along to actually change that and do some some",
    "start": "1340130",
    "end": "1347390"
  },
  {
    "text": "interaction good more local state examples so here's",
    "start": "1347390",
    "end": "1352700"
  },
  {
    "text": "another example where local state is useful say you have a sequence of items with price and discount attributes and",
    "start": "1352700",
    "end": "1359480"
  },
  {
    "text": "you want to at the end of the cash register you want to get the sum of all the prices and also the sum of all the",
    "start": "1359480",
    "end": "1366110"
  },
  {
    "text": "discounts that you receive so that's easy you just do twice a map and a sub",
    "start": "1366110",
    "end": "1371150"
  },
  {
    "text": "so total prices items map price sum and total discount the same with discount",
    "start": "1371150",
    "end": "1376250"
  },
  {
    "text": "but now I want to say okay love do the same with just one sequence traversal",
    "start": "1376250",
    "end": "1381700"
  },
  {
    "text": "maybe items is an iterator you can traverse it only once what do you do now",
    "start": "1381700",
    "end": "1387820"
  },
  {
    "text": "well you could do it in a purely functional fashion then the canonical version would be I believe a fault left",
    "start": "1387820",
    "end": "1394970"
  },
  {
    "text": "and that's the code that you would get so in the end you define both total price in total discount it's a fold left",
    "start": "1394970",
    "end": "1401720"
  },
  {
    "text": "the initial values are 0 for both and then your function takes the current or",
    "start": "1401720",
    "end": "1407299"
  },
  {
    "text": "T price and T discounted an item and adds things up it's doable but it's not",
    "start": "1407299",
    "end": "1412850"
  },
  {
    "text": "super pretty and another thing that is notable here is that the flow of data is",
    "start": "1412850",
    "end": "1421400"
  },
  {
    "text": "not very apparent in this thing so that's the thing you define those are the initial value you have to sort of",
    "start": "1421400",
    "end": "1427360"
  },
  {
    "text": "mesh them up by position and then they flow into this thing somehow and then the thing finally goes over there it's",
    "start": "1427360",
    "end": "1434320"
  },
  {
    "text": "all very convoluted and I must say that if you write the comparative version",
    "start": "1434320",
    "end": "1439809"
  },
  {
    "text": "then things do are a bit clearer here so we just define the variables total price",
    "start": "1439809",
    "end": "1446980"
  },
  {
    "text": "and total discount and then you iterate through items that you add the item price and item discounted thing so again",
    "start": "1446980",
    "end": "1453460"
  },
  {
    "text": "there you say well probably if the the functional version is in this case more",
    "start": "1453460",
    "end": "1459220"
  },
  {
    "text": "convoluted and imperative one so why not if this is a local",
    "start": "1459220",
    "end": "1465000"
  },
  {
    "text": "computation and local price and local discount are just variables that he used to produce this don't shy away from",
    "start": "1465000",
    "end": "1471720"
  },
  {
    "text": "considering this solution as well but the counterpoint of that is since I",
    "start": "1471720",
    "end": "1480160"
  },
  {
    "text": "said state is the more problematic the more global it is that means if you have mutable objects then you that's",
    "start": "1480160",
    "end": "1488860"
  },
  {
    "text": "something typically much more critical and problematic because mutable objects",
    "start": "1488860",
    "end": "1495250"
  },
  {
    "text": "tend to encapsulate global states so the state is visible for everyone that can",
    "start": "1495250",
    "end": "1500740"
  },
  {
    "text": "get access to this object that could be a large graph and encapsulate sounds good but it does not make the global",
    "start": "1500740",
    "end": "1506919"
  },
  {
    "text": "State go away so there's still a lot of potential for complex entanglements",
    "start": "1506919",
    "end": "1512010"
  },
  {
    "text": "so one thing there is that when you say don't use or be careful with mutable",
    "start": "1512010",
    "end": "1518350"
  },
  {
    "text": "objects it's actually not so clear what that is what is it what is a mutable object is that an object that contains",
    "start": "1518350",
    "end": "1525820"
  },
  {
    "text": "bars not necessarily how about this one we have a class buffer proxy and it",
    "start": "1525820",
    "end": "1533380"
  },
  {
    "text": "takes a buffer when array buffer of T and there's a put method which forwards to the append method and there's a",
    "start": "1533380",
    "end": "1539380"
  },
  {
    "text": "length method is that mutable I would say yes so you could say okay let's",
    "start": "1539380",
    "end": "1545140"
  },
  {
    "text": "modify this maybe we should count mutable structures also just like bars so should not contain bars should not",
    "start": "1545140",
    "end": "1552100"
  },
  {
    "text": "contain collections or any other structures immutable but then what about this",
    "start": "1552100",
    "end": "1558940"
  },
  {
    "text": "so here we have a class memo and that class contains something which is",
    "start": "1558940",
    "end": "1566090"
  },
  {
    "text": "definitely mutable so it's a mutable wishing me cache map in this value and then apply would do a cat or else update",
    "start": "1566090",
    "end": "1575379"
  },
  {
    "text": "so it would give him a key X it would look into in our mammal map if the key",
    "start": "1575379",
    "end": "1583399"
  },
  {
    "text": "is present it would return the current value if not it would use the function to compute the current value that the",
    "start": "1583399",
    "end": "1590690"
  },
  {
    "text": "value for the key store it in the map and return it afterwards is that an",
    "start": "1590690",
    "end": "1595970"
  },
  {
    "text": "object is that object mutable if I create a new instance of mammal what you think",
    "start": "1595970",
    "end": "1602710"
  },
  {
    "text": "who thinks it's mutable okay who thinks it's immutable",
    "start": "1603220",
    "end": "1610269"
  },
  {
    "text": "half-half see you don't agree and the answer is it depends so",
    "start": "1610269",
    "end": "1618850"
  },
  {
    "text": "but if you assume your functions are immutable that you pass this object is",
    "start": "1622090",
    "end": "1628519"
  },
  {
    "text": "indeed immutable so if you create an object like this new memo with the incrementation function that object is",
    "start": "1628519",
    "end": "1635119"
  },
  {
    "text": "immutable why well but the definition I propose",
    "start": "1635119",
    "end": "1641330"
  },
  {
    "text": "here is that as an object is mutable if it's functional behavior depends on its",
    "start": "1641330",
    "end": "1647869"
  },
  {
    "text": "history so what that means is that the effect of a method both without and what",
    "start": "1647869",
    "end": "1654049"
  },
  {
    "text": "other effects it might have depends on what happened to your object before that method was called if that",
    "start": "1654049",
    "end": "1661879"
  },
  {
    "text": "makes a difference the object is mutable if it doesn't make a difference that means the method returns the same result",
    "start": "1661879",
    "end": "1667159"
  },
  {
    "text": "every time we call it then the object is immutable now this memo object this will",
    "start": "1667159",
    "end": "1672980"
  },
  {
    "text": "return the same result every time we call it it will do it in on different routes the first time it will take this",
    "start": "1672980",
    "end": "1679879"
  },
  {
    "text": "incrementation function use it to compute the result but one and once it has a key it will simply give you a look",
    "start": "1679879",
    "end": "1686910"
  },
  {
    "text": "at the key but it will be the same result hopefully the second time around it will return the thing faster well not",
    "start": "1686910",
    "end": "1692880"
  },
  {
    "text": "for the incrementation function but for more complicated functions we'll do it faster okay on the other things get more",
    "start": "1692880",
    "end": "1699990"
  },
  {
    "text": "murky if I actually use a side affecting function for this memo object because",
    "start": "1699990",
    "end": "1705420"
  },
  {
    "text": "then if you analyze things carefully you can say you can observe a side-effect namely that the counter gets incremented",
    "start": "1705420",
    "end": "1712650"
  },
  {
    "text": "the first time you call memo with a certain key because the function gets evaluated but the second time the",
    "start": "1712650",
    "end": "1719430"
  },
  {
    "text": "counter stays the same because it will just look it up in the map so a",
    "start": "1719430",
    "end": "1724880"
  },
  {
    "text": "memorable mutable functions is itself mutable immutable pollutes a little bit",
    "start": "1724880",
    "end": "1730230"
  },
  {
    "text": "the objection good last advice don't stop improving too",
    "start": "1730230",
    "end": "1738060"
  },
  {
    "text": "early so often I found that I could shrink code by a factor of 10 and make",
    "start": "1738060",
    "end": "1744690"
  },
  {
    "text": "it more legible at the same time but I didn't do do that in a single step I",
    "start": "1744690",
    "end": "1749880"
  },
  {
    "text": "didn't step after step after step and often the steps were spread out over several days or weeks where in the",
    "start": "1749880",
    "end": "1757020"
  },
  {
    "text": "meantime I did other things so typically what what would happen is I have a rough solution I said I can improve it this",
    "start": "1757020",
    "end": "1763170"
  },
  {
    "text": "way and I was book would be happy and go away with a better solution and I would come back a day or two later and said",
    "start": "1763170",
    "end": "1769110"
  },
  {
    "text": "well let's have another look at my great solution and then say ah but I know another way how I can make it even",
    "start": "1769110",
    "end": "1774630"
  },
  {
    "text": "better and that I could iterate several times until I have something that is really super tight and good and that's",
    "start": "1774630",
    "end": "1781110"
  },
  {
    "text": "okay so some people are frustrated by that why can't I have the best solution immediately every time and I think",
    "start": "1781110",
    "end": "1788040"
  },
  {
    "text": "that's you know that's unavoidable and this may be the wrong way to look at it",
    "start": "1788040",
    "end": "1793080"
  },
  {
    "text": "the way you look at it should be that isn't it great that you can derive the pleasure of improving your solutions",
    "start": "1793080",
    "end": "1799230"
  },
  {
    "text": "several times so not just 170 I can actually have this pressure several",
    "start": "1799230",
    "end": "1804540"
  },
  {
    "text": "times I think that's an effect for every one of us and I don't propose busywork",
    "start": "1804540",
    "end": "1809700"
  },
  {
    "text": "to just change from one solution to another but often these refactorings give you clear coat and in Scala you can",
    "start": "1809700",
    "end": "1816120"
  },
  {
    "text": "have you can go a long way and I think that's that's we should embrace that and it's a good thing so keep going",
    "start": "1816120",
    "end": "1823010"
  },
  {
    "text": "so if I want to then in the last part of my talk present you a set of choices",
    "start": "1823010",
    "end": "1830450"
  },
  {
    "text": "where one can often argue for one or the other there are different styles to",
    "start": "1830450",
    "end": "1837120"
  },
  {
    "text": "present things and we can discuss when which style would be appropriate the",
    "start": "1837120",
    "end": "1842700"
  },
  {
    "text": "first choice would be in fix operations versus dot so as you know Scala unifies",
    "start": "1842700",
    "end": "1851100"
  },
  {
    "text": "operators and method calls so every operator is a method and that means that you can also use every method which has",
    "start": "1851100",
    "end": "1858630"
  },
  {
    "text": "an parameter as an infix operator so you have a choice do you use the dot method",
    "start": "1858630",
    "end": "1864420"
  },
  {
    "text": "parent syntax or to use the infix operator syntax which one would you choose here no contest you would choose",
    "start": "1864420",
    "end": "1871710"
  },
  {
    "text": "the last one the plus right nobody would write class as a method what about this",
    "start": "1871710",
    "end": "1878280"
  },
  {
    "text": "one here would you write XS map F in line or XS dot map path who would write",
    "start": "1878280",
    "end": "1884340"
  },
  {
    "text": "access map in line D the left part and the dot method part",
    "start": "1884340",
    "end": "1892730"
  },
  {
    "text": "okay interesting it's kind of days I think we had",
    "start": "1892730",
    "end": "1898020"
  },
  {
    "text": "slightly more votes for the dot method part so the west coast seems to be a",
    "start": "1898020",
    "end": "1903720"
  },
  {
    "text": "little bit more operator centric than the East Coast but it's it was flipped anyway so here",
    "start": "1903720",
    "end": "1909900"
  },
  {
    "text": "what I saw was about 40% infix operator 60% methods and it's calibrated where",
    "start": "1909900",
    "end": "1916290"
  },
  {
    "text": "boss maybe 1/3 to 2/3 if I if I do a rough estimate okay what about this",
    "start": "1916290",
    "end": "1923240"
  },
  {
    "text": "it's again I have in fixed operators but now I have a sequence of them and the",
    "start": "1923240",
    "end": "1929130"
  },
  {
    "text": "right hand we have them lined up by dots who would write it like on the left",
    "start": "1929130",
    "end": "1935360"
  },
  {
    "text": "Wow three okay well",
    "start": "1935360",
    "end": "1941720"
  },
  {
    "text": "if you look at legibility then I believe that the left hand side",
    "start": "1941720",
    "end": "1948649"
  },
  {
    "text": "loses clearly so it's it's very hard to see in a long sequence like that",
    "start": "1949130",
    "end": "1954500"
  },
  {
    "text": "what are the verbs and what are the subjects are the objects in in a thing",
    "start": "1954500",
    "end": "1960000"
  },
  {
    "text": "like that because you'd have to count so XS is the first one flat map is a word and fun would be a subject filter not as",
    "start": "1960000",
    "end": "1967140"
  },
  {
    "text": "a verb well it's it gets very hard to keep track the dots give you much more guidance for that okay but the problem",
    "start": "1967140",
    "end": "1974850"
  },
  {
    "text": "is it's an annoying choice you have to make so let me propose just for the sake",
    "start": "1974850",
    "end": "1980370"
  },
  {
    "text": "of fixing one standard something to fix that so the first thing I think that's",
    "start": "1980370",
    "end": "1986059"
  },
  {
    "text": "uncontroversial if a method name is symbolic we use in fix for alpha numeric method names I believe one can use in",
    "start": "1986059",
    "end": "1993299"
  },
  {
    "text": "fix it's a choice optional if there's only one alpha numeric operation in the expression so something like mapping add",
    "start": "1993299",
    "end": "1999990"
  },
  {
    "text": "filter is okay and I typically use that myself in",
    "start": "1999990",
    "end": "2005330"
  },
  {
    "text": "particular if the method name is short like is or contains or add or start",
    "start": "2005330",
    "end": "2010460"
  },
  {
    "text": "stuff like that but once it's more than one then I would prefer change operators",
    "start": "2010460",
    "end": "2015500"
  },
  {
    "text": "like if we wrote this out in in in fix",
    "start": "2015500",
    "end": "2021080"
  },
  {
    "text": "then we would have a problem for instance you would then read mapping space add space filter and here it would",
    "start": "2021080",
    "end": "2028220"
  },
  {
    "text": "throw you because you would sort of pass filter as a work but it can of course be also used as a subject I feel it's",
    "start": "2028220",
    "end": "2034730"
  },
  {
    "text": "perfectly good good name for a subject so I believe we sort of rely on our passing of these things on implicitly",
    "start": "2034730",
    "end": "2041360"
  },
  {
    "text": "knowing what are the combinators and that's an assumption that you might be true for you but not for your readers",
    "start": "2041360",
    "end": "2047570"
  },
  {
    "text": "newcomers to the culpers might really not know what the typical Combinator's in scala are called so they would have a",
    "start": "2047570",
    "end": "2054169"
  },
  {
    "text": "big legibility problem here choice number two alphabetic verses",
    "start": "2054169",
    "end": "2059540"
  },
  {
    "text": "symbolic well that's an an old one and I think we fought these battles last year",
    "start": "2059540",
    "end": "2065030"
  },
  {
    "text": "there were but we had sort of mostly beyond them now I think we have we all",
    "start": "2065030",
    "end": "2070750"
  },
  {
    "text": "we are mostly set on our honor honor on us on a way to decide between those two",
    "start": "2070750",
    "end": "2077060"
  },
  {
    "text": "so we know that identifies in Scala can be alphanumeric or symbolic so operators",
    "start": "2077060",
    "end": "2082940"
  },
  {
    "text": "can be either methods how do you choose do you write XS map F or XS whatever",
    "start": "2082940",
    "end": "2092500"
  },
  {
    "text": "do you write vector + MX or vector add a mix ok yeah you probably would use a",
    "start": "2093609",
    "end": "2100490"
  },
  {
    "text": "plus here right so you would use the symbolic name you write XS forward left",
    "start": "2100490",
    "end": "2105530"
  },
  {
    "text": "set up or zet / : XS up who writes XS for left that oh yeah and who writes the",
    "start": "2105530",
    "end": "2113780"
  },
  {
    "text": "other few have you yeah okay yeah that I was",
    "start": "2113780",
    "end": "2119000"
  },
  {
    "text": "guilty of that one of introducing that one because it's really cool so",
    "start": "2119000",
    "end": "2125078"
  },
  {
    "text": "let me explain to you why this is really cool so fold left is actually very hard",
    "start": "2127030",
    "end": "2132250"
  },
  {
    "text": "to parse because so one one guy somebody told me well look forward left I always",
    "start": "2132250",
    "end": "2139240"
  },
  {
    "text": "thought it it's called forward left because the operation goes from right to left but that's actually wrong it goes from left to right it's confusing the",
    "start": "2139240",
    "end": "2146530"
  },
  {
    "text": "other thing that's confusing about fold left is that the when you write them out",
    "start": "2146530",
    "end": "2151990"
  },
  {
    "text": "these IDs zero actually ends up on the left hand side so it's zero up XS one up",
    "start": "2151990",
    "end": "2158290"
  },
  {
    "text": "XS 2 and so on but here the zero comes after the XS that's the other thing that's very confusing whereas here",
    "start": "2158290",
    "end": "2165130"
  },
  {
    "text": "everything is lined up right and the great intuition is think dominos so that",
    "start": "2165130",
    "end": "2171190"
  },
  {
    "text": "thing here is a domino and it starts with a zero and it's where it goes right and and that and that that's the",
    "start": "2171190",
    "end": "2179230"
  },
  {
    "text": "whole thing so brilliant I thought it was brilliant and nobody nobody here but you see that's the fallacy you think",
    "start": "2179230",
    "end": "2186070"
  },
  {
    "text": "it's brilliant and I'm sure you can think of some of these operators as well that are brilliant but your audience has",
    "start": "2186070",
    "end": "2192430"
  },
  {
    "text": "no clue what you thought and they are just completely puzzled right so that's",
    "start": "2192430",
    "end": "2197560"
  },
  {
    "text": "why I think in retrospect even though maybe some of you are using this",
    "start": "2197560",
    "end": "2202660"
  },
  {
    "text": "operator now maybe after Scala there's quite a few people's air you have to be convinced that it's a cool operator",
    "start": "2202660",
    "end": "2208120"
  },
  {
    "text": "after all but but it's you have to sort of really even",
    "start": "2208120",
    "end": "2214780"
  },
  {
    "text": "if you think it's brilliant and it probably is you you're your typical readers of your",
    "start": "2214780",
    "end": "2222640"
  },
  {
    "text": "programs have no clue what this thing should mean and and you probably won't have a chance to educate them all so",
    "start": "2222640",
    "end": "2229450"
  },
  {
    "text": "it's much better to stick to alphabetic good here's another one that's what I",
    "start": "2229450",
    "end": "2237070"
  },
  {
    "text": "was more lucky with that one so after the slash : d bagel and several other debaters I was really",
    "start": "2237070",
    "end": "2243810"
  },
  {
    "text": "loved to introduce another symbolic operator but I did it anyway so there's",
    "start": "2243810",
    "end": "2249490"
  },
  {
    "text": "a triple question mark in 210 and that was an I think there was a complete win",
    "start": "2249490",
    "end": "2254630"
  },
  {
    "text": "so everybody immediately took the triple question mark it's the right thing and I really that means that for triple",
    "start": "2254630",
    "end": "2260690"
  },
  {
    "text": "question mark that was clear what it meant what else could it mean that this thing is undefined you have to define it",
    "start": "2260690",
    "end": "2266260"
  },
  {
    "text": "and I think furthermore it's good because if we had picked something like to do or undefined that's a thing that",
    "start": "2266260",
    "end": "2273380"
  },
  {
    "text": "sort of drowns in a sea of text we're stupid question mark sticks out you see",
    "start": "2273380",
    "end": "2278420"
  },
  {
    "text": "immediately typically like others where I have to work so that's the advantage so to sum it up my advice would be use",
    "start": "2278420",
    "end": "2284960"
  },
  {
    "text": "symbolic only if the meaning is understood by your target audience beforehand the operator is standard in",
    "start": "2284960",
    "end": "2292310"
  },
  {
    "text": "your application domain typically example a mathematical operators and or and you would like to draw attention to",
    "start": "2292310",
    "end": "2299180"
  },
  {
    "text": "the operator that was the triple question mark because it usually sticks out better than alphabetic and if you",
    "start": "2299180",
    "end": "2306140"
  },
  {
    "text": "call only on reason three it's a very risky thing so probably you want to have at least one or two as well",
    "start": "2306140",
    "end": "2313450"
  },
  {
    "text": "good choice number three loops recursions or combinators so often for",
    "start": "2313450",
    "end": "2320090"
  },
  {
    "text": "the same functionality too you can use one of the three so here we have a simple loop it steps through the numbers",
    "start": "2320090",
    "end": "2327620"
  },
  {
    "text": "up to a limit and it tests a qualified predicate and it will give you the first",
    "start": "2327620",
    "end": "2333440"
  },
  {
    "text": "number that qualifies or limit if none of the numbers qualify so you can do it",
    "start": "2333440",
    "end": "2340190"
  },
  {
    "text": "that way or you can use recursion so here's the because it's purely",
    "start": "2340190",
    "end": "2345380"
  },
  {
    "text": "functional solution for the same thing you say recur with an integer argument",
    "start": "2345380",
    "end": "2351050"
  },
  {
    "text": "if that's greater or equal limit or I qualifies return I otherwise return recur I plus one and you start with",
    "start": "2351050",
    "end": "2358670"
  },
  {
    "text": "recurs Eero or you could use predefined combinators so that would be the that",
    "start": "2358670",
    "end": "2364520"
  },
  {
    "text": "would do the trick so you say go from zero and two lengths find the one that qualifies that would give you an",
    "start": "2364520",
    "end": "2371570"
  },
  {
    "text": "optional result get the option or if the option is not return length which one",
    "start": "2371570",
    "end": "2377000"
  },
  {
    "text": "would you choose here the loop there recursion or the combinators who would",
    "start": "2377000",
    "end": "2382700"
  },
  {
    "text": "choose the loop a couple yeah recursion",
    "start": "2382700",
    "end": "2388510"
  },
  {
    "text": "somewhat more the Combinator's large out yeah that drowns the trance rest okay",
    "start": "2388510",
    "end": "2396280"
  },
  {
    "text": "let's do another one how about this one it's a snap f",
    "start": "2396280",
    "end": "2402490"
  },
  {
    "text": "think with list but first does the same thing or recursion does the same thing well I guess they're pretty clear",
    "start": "2402550",
    "end": "2409610"
  },
  {
    "text": "everybody would pick map I don't even I don't dare to ask you -",
    "start": "2409610",
    "end": "2414820"
  },
  {
    "text": "how about this one so that's X s group - - list map case list X Y X times y",
    "start": "2414820",
    "end": "2423400"
  },
  {
    "text": "then we have a the same thing with a loop so we have a buffer and you step",
    "start": "2423400",
    "end": "2428690"
  },
  {
    "text": "through a list and as long as it's not empty we take two elements off the list put them put their product in the buffer",
    "start": "2428690",
    "end": "2434900"
  },
  {
    "text": "and advance by two elements or we have the same thing as a recursive function",
    "start": "2434900",
    "end": "2440120"
  },
  {
    "text": "so same thing as a loop we if the list has two elements then we take them form",
    "start": "2440120",
    "end": "2445550"
  },
  {
    "text": "the product recurse if the list is nearly give you under which one would you pick here who would pick the group",
    "start": "2445550",
    "end": "2452120"
  },
  {
    "text": "thing the combinators okay still a lot a bit less than previously the the while loop no nobody",
    "start": "2452120",
    "end": "2460280"
  },
  {
    "text": "wants to violet the recursion okay okay good you have good taste so though",
    "start": "2460280",
    "end": "2467170"
  },
  {
    "text": "so do I loop I believe us is clearly the worst here you don't need a while loop here it's it's just distracting it's",
    "start": "2467170",
    "end": "2474080"
  },
  {
    "text": "also the longest of the three solution yeah",
    "start": "2474080",
    "end": "2480280"
  },
  {
    "text": "yeah then I still wouldn't use the while loop I get to that yeah",
    "start": "2482589",
    "end": "2489940"
  },
  {
    "text": "they're grouped version is it's great if you know the commentators",
    "start": "2489940",
    "end": "2495790"
  },
  {
    "text": "because it uses some fancy one like grouped is only available on iterators and uses some fancy construction with",
    "start": "2495790",
    "end": "2502849"
  },
  {
    "text": "this pattern matching closure and things like that so it's great if you know the commentators and everybody else on your",
    "start": "2502849",
    "end": "2508400"
  },
  {
    "text": "team knows them as well that's sort of the fatigue the danger to fall into you know the Combinator's but maybe your",
    "start": "2508400",
    "end": "2514460"
  },
  {
    "text": "co-workers don't and then they would be needlessly puzzled by this code and I believe the third one that's actually",
    "start": "2514460",
    "end": "2521500"
  },
  {
    "text": "underrated so I think one very good style of functional programming is essentially first order function",
    "start": "2521500",
    "end": "2527540"
  },
  {
    "text": "programming not using any high order functions just recursive param matching equations and",
    "start": "2527540",
    "end": "2534470"
  },
  {
    "text": "that does a trick and it's actually sometimes usually often longer than combinators but it might be actually be",
    "start": "2534470",
    "end": "2542299"
  },
  {
    "text": "easier to grasp for newcomers and furthermore it tends to be more efficient as well so if you have if",
    "start": "2542299",
    "end": "2548839"
  },
  {
    "text": "you're unsure whether you need all the power of this thing is very very long then the recursive solution here is",
    "start": "2548839",
    "end": "2555140"
  },
  {
    "text": "actually not good yeah right so that's that's a potential downside here often",
    "start": "2555140",
    "end": "2561290"
  },
  {
    "text": "you can but you could massage the solution so that it does become tail recursive that's a standard approach",
    "start": "2561290",
    "end": "2567290"
  },
  {
    "text": "here so my only reason for the while loop would be yeah if the list is very long then use a list buffer probably",
    "start": "2567290",
    "end": "2574040"
  },
  {
    "text": "yeah that's true if not and use recursion or if you know the",
    "start": "2574040",
    "end": "2580040"
  },
  {
    "text": "Combinator's use them good if we so often these pattern",
    "start": "2580040",
    "end": "2586250"
  },
  {
    "text": "matching recursive solutions are tail recursive and if you can verify by just putting Taric on them and if they are",
    "start": "2586250",
    "end": "2592579"
  },
  {
    "text": "keratosis then they do just run just run just as fast as a while loop so there's",
    "start": "2592579",
    "end": "2598430"
  },
  {
    "text": "not really a reason for performance to go for the imperative solution this one isn't so",
    "start": "2598430",
    "end": "2604660"
  },
  {
    "text": "why does gala have all three well combinators that clearly in most cases",
    "start": "2604660",
    "end": "2610010"
  },
  {
    "text": "the easiest to use anyway they're all done in the library recursive functions are clearly the",
    "start": "2610010",
    "end": "2615940"
  },
  {
    "text": "bedrock of functional programming you want them together with parent matching because that's much clearer and safer",
    "start": "2615940",
    "end": "2621730"
  },
  {
    "text": "than the tests and selections and loops well maybe it's kind I could have done",
    "start": "2621730",
    "end": "2627340"
  },
  {
    "text": "okay without loops but they are familiar and they're sometimes the simplest",
    "start": "2627340",
    "end": "2632500"
  },
  {
    "text": "solution sometimes so my recommendation would be consider combinators first",
    "start": "2632500",
    "end": "2637510"
  },
  {
    "text": "since most of you are already doing that if this becomes too tedious or efficiency is a big concern try to fall",
    "start": "2637510",
    "end": "2644530"
  },
  {
    "text": "back on tail recursive functions and loops can be used in simple cases or when the computation inherently modified",
    "start": "2644530",
    "end": "2652030"
  },
  {
    "text": "State so if that's something sometimes your computation wants to modify State a mutable map or something like that if",
    "start": "2652030",
    "end": "2658150"
  },
  {
    "text": "you do that anyway then you might as well write a loop and loops might actually be the simplest if you inherit",
    "start": "2658150",
    "end": "2664570"
  },
  {
    "text": "if you modify in one iteration a lot of different pieces of mutable state then",
    "start": "2664570",
    "end": "2669910"
  },
  {
    "text": "then a loop can be can be a good choice choice number four procedures or equals",
    "start": "2669910",
    "end": "2677160"
  },
  {
    "text": "so Scala has special syntax for unit return returning procedures so here's a",
    "start": "2677160",
    "end": "2684100"
  },
  {
    "text": "swap method that just swaps two element of an array so that searchers standard",
    "start": "2684100",
    "end": "2690340"
  },
  {
    "text": "implementation and you can write just essentially the block afterwards without writing equals and colon unit or you",
    "start": "2690340",
    "end": "2698260"
  },
  {
    "text": "could write colon unit and equals then it looks just like a normal function so which one do you choose here who chooses",
    "start": "2698260",
    "end": "2705070"
  },
  {
    "text": "the first one quite a lot and it's actually in the official style guide - who - the second one",
    "start": "2705070",
    "end": "2711810"
  },
  {
    "text": "bit less yeah yeah that was actually I believe a mistake historical accident so",
    "start": "2711810",
    "end": "2719560"
  },
  {
    "text": "the reason why procedural syntax was introduced is that very very early on",
    "start": "2719560",
    "end": "2724840"
  },
  {
    "text": "when we did like the first scholar tutorials I was concerned that I'd have to explain unit too early to Java",
    "start": "2724840",
    "end": "2732460"
  },
  {
    "text": "programmers so the thing was we wanted to write like a sort function and the",
    "start": "2732460",
    "end": "2738660"
  },
  {
    "text": "problem was I wanted to get to the thing well how do we write a sort function and just to show them how to map Java to",
    "start": "2738660",
    "end": "2746400"
  },
  {
    "text": "Scala and things like that and then there was this unit and I would have to do this whole detour to say well unit is",
    "start": "2746400",
    "end": "2752700"
  },
  {
    "text": "sort of like void but not really because it's a type of a value and it was scared of that so I said well let's just hide",
    "start": "2752700",
    "end": "2759540"
  },
  {
    "text": "this whole thing we sweep it under the carpet we have special syntax it looks more familiar to Java programmers anyway",
    "start": "2759540",
    "end": "2765330"
  },
  {
    "text": "I believe actually that was a mistake because it traded simplicity for ease of",
    "start": "2765330",
    "end": "2771930"
  },
  {
    "text": "use familiarity so it's definitely more familiar but it's not as easy now you",
    "start": "2771930",
    "end": "2777840"
  },
  {
    "text": "have two versions to do this and furthermore the the easy one has a bad",
    "start": "2777840",
    "end": "2782850"
  },
  {
    "text": "trap namely when you write : unit and then something then the compiler gets thoroughly confused because what it",
    "start": "2782850",
    "end": "2789840"
  },
  {
    "text": "thinks is that you're actually defining an abstract method with result type unit",
    "start": "2789840",
    "end": "2795300"
  },
  {
    "text": "and then it thinks this thing should be a refinement of this result types of ambiguity and initially in the first",
    "start": "2795300",
    "end": "2802710"
  },
  {
    "text": "version so a long time in Scala compiler you got absolutely confusing error",
    "start": "2802710",
    "end": "2807960"
  },
  {
    "text": "messages I think the one you got is probably somewhere here that",
    "start": "2807960",
    "end": "2813800"
  },
  {
    "text": "probably says it wanted a colon here or something like that so in the middle of",
    "start": "2813800",
    "end": "2819060"
  },
  {
    "text": "this it would get confused because it said well this is not a type refinement this is statements but I don't want",
    "start": "2819060",
    "end": "2824250"
  },
  {
    "text": "statements we have put a lot of work in in that in Scala tune eight or two nine",
    "start": "2824250",
    "end": "2830550"
  },
  {
    "text": "I'm not exactly when so when that we special case this thing in the compiler and says well you probably meant to",
    "start": "2830550",
    "end": "2836520"
  },
  {
    "text": "write an equal sign here something like that but it's still very confusing and I think it's it's not worth the added",
    "start": "2836520",
    "end": "2844140"
  },
  {
    "text": "complexity this this opens up so my advice would be don't use procedures in tax and it turns out that it's called--",
    "start": "2844140",
    "end": "2851520"
  },
  {
    "text": "I see people say they will change the style guide and also in IntelliJ where",
    "start": "2851520",
    "end": "2857040"
  },
  {
    "text": "you actually have a refactoring from here to here so automated refactoring",
    "start": "2857040",
    "end": "2863130"
  },
  {
    "text": "IntelliJ they promised me that turned it around so in the next",
    "start": "2863130",
    "end": "2868760"
  },
  {
    "text": "every facts are you from here to here good",
    "start": "2868760",
    "end": "2874700"
  },
  {
    "text": "choice number five private versus nested so say you have an outer method here",
    "start": "2875119",
    "end": "2881700"
  },
  {
    "text": "that uses a helper method for some of its functionality so I've said before",
    "start": "2881700",
    "end": "2887040"
  },
  {
    "text": "it's actually really cool that Scala has this capability to put methods in line so that they don't",
    "start": "2887040",
    "end": "2894450"
  },
  {
    "text": "pollute the global namespace and they're much less overhead so the question is should you always do this so always put",
    "start": "2894450",
    "end": "2900599"
  },
  {
    "text": "it into the innermost scope or are there reasons to put this method sometimes into an outer scope I think in most",
    "start": "2900599",
    "end": "2907680"
  },
  {
    "text": "cases you want to put this into the inner scope definitely you want to do so",
    "start": "2907680",
    "end": "2913050"
  },
  {
    "text": "that would be the outer scope alternative sorry so you would have now the method is Java you make it private you",
    "start": "2913050",
    "end": "2920130"
  },
  {
    "text": "put it here and then you call it like that so which one do you choose so I",
    "start": "2920130",
    "end": "2925410"
  },
  {
    "text": "think in most cases you want the first one you want to put it where the usages with maybe one exception so you",
    "start": "2925410",
    "end": "2933450"
  },
  {
    "text": "definitely want to nest if that means you can save a parameter so here I have",
    "start": "2933450",
    "end": "2939720"
  },
  {
    "text": "modified this Java method and now it actually refers to owner with only is Java then there's a big advantage to",
    "start": "2939720",
    "end": "2946319"
  },
  {
    "text": "keeping it where it is because that means you don't have to pass owner into the method you save on a parameter and",
    "start": "2946319",
    "end": "2951930"
  },
  {
    "text": "that's always good but let's say you don't become you don't capture anything there is no reference",
    "start": "2951930",
    "end": "2958170"
  },
  {
    "text": "to any outer thing then you could argue that there's a legibility problem the other way around because when you look",
    "start": "2958170",
    "end": "2965400"
  },
  {
    "text": "at this method you say well does it is it affected by anything out out here or not and for for small method like it's",
    "start": "2965400",
    "end": "2973950"
  },
  {
    "text": "Java that's very easy you just scan the line and says well it's not affected like that was this thing here well",
    "start": "2973950",
    "end": "2979770"
  },
  {
    "text": "obviously it doesn't refer to own but now think is Java is actually a method that stem line Long's time ten lines",
    "start": "2979770",
    "end": "2985650"
  },
  {
    "text": "long then that becomes a mental effort to see well does it use own or does it not use honor so there you might have a",
    "start": "2985650",
    "end": "2992609"
  },
  {
    "text": "case where you say well it actually might be preferable to move is Java out into a private method because then it",
    "start": "2992609",
    "end": "2998790"
  },
  {
    "text": "becomes clear that well it doesn't need anything from the inner scope",
    "start": "2998790",
    "end": "3004359"
  },
  {
    "text": "so my recommendation would be prefer nesting if either you can save on",
    "start": "3004359",
    "end": "3009950"
  },
  {
    "text": "parameters then it's a no-brainer or also prefer nesting for smallish functions even if nothing is captured",
    "start": "3009950",
    "end": "3015950"
  },
  {
    "text": "and secondly don't nest many levels deep that sort of goes to don't overdo it",
    "start": "3015950",
    "end": "3022040"
  },
  {
    "text": "because if you make nest many levels deep it often becomes very difficult to align just your little thing in your",
    "start": "3022040",
    "end": "3028579"
  },
  {
    "text": "head to say which which which method calls where last choice pattern matching versus",
    "start": "3028579",
    "end": "3034160"
  },
  {
    "text": "dynamic dispatch that sort of brings us back into the object-oriented versus functional or the object-oriented yet",
    "start": "3034160",
    "end": "3041329"
  },
  {
    "text": "versus imperative functional debate that started an object and programming started so let's say you have a",
    "start": "3041329",
    "end": "3047960"
  },
  {
    "text": "hierarchy of shapes like here you have a base class shape and you have them",
    "start": "3047960",
    "end": "3054400"
  },
  {
    "text": "subclasses circle rectangular points and they're all shapes and you want to write",
    "start": "3054400",
    "end": "3059930"
  },
  {
    "text": "a method to compute the area of a shape two ways to do that you can write an",
    "start": "3059930",
    "end": "3065720"
  },
  {
    "text": "area method using pattern matching like this one so you just have cases of all",
    "start": "3065720",
    "end": "3071000"
  },
  {
    "text": "the different shapes and do the right put the right formula in place for each one or you could have area as an",
    "start": "3071000",
    "end": "3078380"
  },
  {
    "text": "abstract method in class shape that gets then implemented by each subclass which",
    "start": "3078380",
    "end": "3084890"
  },
  {
    "text": "one do you choose who would choose the",
    "start": "3084890",
    "end": "3090670"
  },
  {
    "text": "pattern matching version okay how about and who would choose the",
    "start": "3090670",
    "end": "3097609"
  },
  {
    "text": "method okay bit more than half yeah okay so the",
    "start": "3097609",
    "end": "3103069"
  },
  {
    "text": "method has it that's actually an interesting question and I've been going back and forth a",
    "start": "3103069",
    "end": "3109160"
  },
  {
    "text": "little bit that one so first before we go to the answer why",
    "start": "3109160",
    "end": "3114860"
  },
  {
    "text": "the Scala five Scala has both well pattern matching is the functional part comes from functional part and it",
    "start": "3114860",
    "end": "3120620"
  },
  {
    "text": "definitely is very convenient a lot of code becomes very concise and clear",
    "start": "3120620",
    "end": "3127180"
  },
  {
    "text": "dynamic dispatch comes from object oriented programming and it's the core mechanism for extensible systems so you",
    "start": "3127180",
    "end": "3133700"
  },
  {
    "text": "want both but how do you choose between them so I believe that the answer to",
    "start": "3133700",
    "end": "3139730"
  },
  {
    "text": "that is it depends whether your system should be extensible or not and in what",
    "start": "3139730",
    "end": "3146090"
  },
  {
    "text": "direction it would be extensible and that brings us back to this question how object oriented programming started so",
    "start": "3146090",
    "end": "3152390"
  },
  {
    "text": "if you first see extensions with new data alternatives dynamic dispatch is better so for instance if we had added a",
    "start": "3152390",
    "end": "3160130"
  },
  {
    "text": "class play triangle to our shapes then here it would be very smooth we just add",
    "start": "3160130",
    "end": "3165620"
  },
  {
    "text": "a new case class and that would have its own implementation of the area method and we're done whereas if we use the",
    "start": "3165620",
    "end": "3173090"
  },
  {
    "text": "previous method to do to define area we'd have to define both the class and we'd have to go back to this area method",
    "start": "3173090",
    "end": "3180230"
  },
  {
    "text": "and think of the case so we'd have to think of two locations instead of one which is harder to keep in your head on",
    "start": "3180230",
    "end": "3187430"
  },
  {
    "text": "the other hand if you foresee that you would like to add typically two new methods later then I",
    "start": "3187430",
    "end": "3195500"
  },
  {
    "text": "believe pattern matching is advantageous because otherwise you end up here",
    "start": "3195500",
    "end": "3200960"
  },
  {
    "text": "touching all of these classes and adding a new method to each of them whereas whereas with the pattern matching method",
    "start": "3200960",
    "end": "3207110"
  },
  {
    "text": "you would have only a single point that you need to exchange extend sorry",
    "start": "3207110",
    "end": "3212620"
  },
  {
    "text": "if the system is closed and complex so you don't see for CNE extensibility",
    "start": "3212620",
    "end": "3219230"
  },
  {
    "text": "requirements I believe one should also choose pattern matching and that's something we have sort of changed in",
    "start": "3219230",
    "end": "3225740"
  },
  {
    "text": "going around the compiler for Scala is a closed and complex systems or typically you don't add new syntax three cases",
    "start": "3225740",
    "end": "3233600"
  },
  {
    "text": "every week and also the functionality is pretty fixed what you do with it and the",
    "start": "3233600",
    "end": "3240660"
  },
  {
    "text": "current version actually uses dynamic dispatch a lot and I'm sort of shifting",
    "start": "3240660",
    "end": "3245710"
  },
  {
    "text": "over to param matching because it gives me a single point where I can understand the logic the problem with the dynamic",
    "start": "3245710",
    "end": "3253210"
  },
  {
    "text": "dispatch is that the logic is really dispersed and I want to say well what is not the area of a shape but let's say",
    "start": "3253210",
    "end": "3261250"
  },
  {
    "text": "the the symbol that corresponds to a type",
    "start": "3261250",
    "end": "3266730"
  },
  {
    "text": "then if I have a single definition that says well for this type it's that for that type is that for that type is that",
    "start": "3266730",
    "end": "3272619"
  },
  {
    "text": "it's something that I can grasp in my head if I have could to go through all the many hundreds of lines of class",
    "start": "3272619",
    "end": "3278349"
  },
  {
    "text": "definitions that do the different types it's much much more difficult to actually compile and collect this knowledge into",
    "start": "3278349",
    "end": "3286150"
  },
  {
    "text": "something that is a thing that is has has a core definition",
    "start": "3286150",
    "end": "3291430"
  },
  {
    "text": "so that's why it actually believes that when in doubt prefer the para matching solution prefer this one it gives you a",
    "start": "3291430",
    "end": "3298119"
  },
  {
    "text": "single point that where you can understand the logic you have an objection",
    "start": "3298119",
    "end": "3303839"
  },
  {
    "text": "yeah good that's a point yeah yeah with virtual methods the compiler will inform",
    "start": "3320760",
    "end": "3327579"
  },
  {
    "text": "you if you forgot one where's with with pattern matching it will do the same thing but only if the",
    "start": "3327579",
    "end": "3334210"
  },
  {
    "text": "base class is sealed so sealed paste but on the other hand if you have a closed system then I would very much encourage",
    "start": "3334210",
    "end": "3341410"
  },
  {
    "text": "you do seal your base classes because that's that's when things really start to work with your parent matches as well",
    "start": "3341410",
    "end": "3348030"
  },
  {
    "text": "okay what if you want to extend in both",
    "start": "3348030",
    "end": "3353740"
  },
  {
    "text": "dimensions so that's sort of the opposite for complex and close by the system where you want to add new methods",
    "start": "3353740",
    "end": "3359859"
  },
  {
    "text": "and new data types well one thing that we found out to work found to work pretty well in that cases to essentially",
    "start": "3359859",
    "end": "3367359"
  },
  {
    "text": "put a pattern matching solution inside a class that you can inherit so we would have something like a shape handler and",
    "start": "3367359",
    "end": "3374020"
  },
  {
    "text": "it has an area method that essentially deals with all the known shapes and you can add further methods to that and then",
    "start": "3374020",
    "end": "3380470"
  },
  {
    "text": "there could be one if you add new shapes somewhere else in your system there could be an extra shape handler and that",
    "start": "3380470",
    "end": "3386559"
  },
  {
    "text": "would add handle than the new shapes and in would fall back to the super handler",
    "start": "3386559",
    "end": "3392079"
  },
  {
    "text": "for they be the shapes that you have already seen in the base class that's one possible solutions there are many",
    "start": "3392079",
    "end": "3399279"
  },
  {
    "text": "others it's a well studied problem it's called the expression problem and the",
    "start": "3399279",
    "end": "3405220"
  },
  {
    "text": "expression problem is essentially about extensibility of both data and",
    "start": "3405220",
    "end": "3410250"
  },
  {
    "text": "operations in typically object-oriented systems it was the name was coined by my",
    "start": "3410250",
    "end": "3418150"
  },
  {
    "text": "colleague Phil water the expression problem he chose because his standard",
    "start": "3418150",
    "end": "3423730"
  },
  {
    "text": "example where arithmetic expressions syntax trees security that describe arithmetic expressions and of course",
    "start": "3423730",
    "end": "3430299"
  },
  {
    "text": "it's about expressiveness as well expressiveness of languages so conclusions we've seen lots of puzzling",
    "start": "3430299",
    "end": "3437619"
  },
  {
    "text": "choices so I didn't want to hide them from you go right into that and give you some of the design of some of the",
    "start": "3437619",
    "end": "3443430"
  },
  {
    "text": "criteria with which one might choose one or the other and I think it's natural to",
    "start": "3443430",
    "end": "3448950"
  },
  {
    "text": "have all these choices because after all we are breaking new ground here so my mind advice of the talk would be keep",
    "start": "3448950",
    "end": "3456570"
  },
  {
    "text": "things simple think of good names so I think naming is really crucial in",
    "start": "3456570",
    "end": "3461880"
  },
  {
    "text": "everything think so think of many names and good names for the intermediate results in your program and have fun and",
    "start": "3461880",
    "end": "3468150"
  },
  {
    "text": "I think if you follow these three then you're doing all right thank you",
    "start": "3468150",
    "end": "3474500"
  },
  {
    "text": "so we have some time for questions in 15 minutes some like that",
    "start": "3483030",
    "end": "3488880"
  },
  {
    "text": "so the question was should you prefer large interfaces with many methods over",
    "start": "3488880",
    "end": "3494560"
  },
  {
    "text": "small interfaces with them essentially having implicit decorators that provide",
    "start": "3494560",
    "end": "3499720"
  },
  {
    "text": "the other functionality I would say the letter so I believe a good design should",
    "start": "3499720",
    "end": "3508110"
  },
  {
    "text": "have small interfaces that are more modular that get into these decorators now of course the follow-on question is",
    "start": "3508110",
    "end": "3514750"
  },
  {
    "text": "why don't Scala collections have that via then they're not designed that way and I believe they're the the answer is",
    "start": "3514750",
    "end": "3521350"
  },
  {
    "text": "well we laid the groundwork that we could do that only much later in 210 we",
    "start": "3521350",
    "end": "3527050"
  },
  {
    "text": "essentially had essentially very convenient and free implicit decorators with value classes and implicit classes",
    "start": "3527050",
    "end": "3534070"
  },
  {
    "text": "before the overhead was quite large both in the in the notation to actually write",
    "start": "3534070",
    "end": "3539080"
  },
  {
    "text": "these implicit decorators and what's for collections more important it would have",
    "start": "3539080",
    "end": "3544180"
  },
  {
    "text": "had a performance impact because every time you call a method you would have created a new wrapper object and we",
    "start": "3544180",
    "end": "3549640"
  },
  {
    "text": "didn't want to pay that price let's say you call let's say the hey drop two thing which is very fast on less than",
    "start": "3549640",
    "end": "3556660"
  },
  {
    "text": "actually creating this wrapper would actually have slowed this down maybe by by five by several times so that's why",
    "start": "3556660",
    "end": "3564100"
  },
  {
    "text": "we didn't do it but I think now that we have it if we would get a chance to redesign the collections and make it",
    "start": "3564100",
    "end": "3570520"
  },
  {
    "text": "more modular that would be a good idea so general the advice would be implicit parameters and decorators are",
    "start": "3570520",
    "end": "3577840"
  },
  {
    "text": "great and they're really a great tool to motorize your system so by all means consider those",
    "start": "3577840",
    "end": "3584130"
  },
  {
    "text": "okay so the the question was that they found that implicit parameters work",
    "start": "3584130",
    "end": "3590800"
  },
  {
    "text": "really well but implicit conversions post lots of problems so what advice to",
    "start": "3590800",
    "end": "3596830"
  },
  {
    "text": "give there so yeah I mean I completely echo your sentiments implicit parameters generally work really well and as far as",
    "start": "3596830",
    "end": "3603990"
  },
  {
    "text": "I can see not really problematic in most cases implicit conversions",
    "start": "3603990",
    "end": "3609020"
  },
  {
    "text": "essentially there's only one thing we wear in physical conversions our unproblematic and that's essentially",
    "start": "3609020",
    "end": "3616170"
  },
  {
    "text": "when they introduce new methods that you'll immediately consume that that's",
    "start": "3616170",
    "end": "3621420"
  },
  {
    "text": "what I call implicit decorators so essentially you add new methods in the way you would in other languages with",
    "start": "3621420",
    "end": "3627089"
  },
  {
    "text": "extension methods but it's essentially an implicit that injects a method and",
    "start": "3627089",
    "end": "3632099"
  },
  {
    "text": "then you call it and for that we now have special syntax since got a two point and that's implicit classes so",
    "start": "3632099",
    "end": "3637440"
  },
  {
    "text": "with an implicit class you can essentially fire this thing up that leaves them the third part ways I have a",
    "start": "3637440",
    "end": "3643859"
  },
  {
    "text": "implicit conversion from type A to type B and that's sort of kept in there as a",
    "start": "3643859",
    "end": "3649800"
  },
  {
    "text": "convenience thing and then it's true that the more of these things you introduce typically the more problems",
    "start": "3649800",
    "end": "3656790"
  },
  {
    "text": "you cause yourself so a couple you get away with them fine but if you overdo it and you have more and more than things",
    "start": "3656790",
    "end": "3663540"
  },
  {
    "text": "get ambiguous very quickly and confusing very quickly so that's also the reason why these these third kind of implicit",
    "start": "3663540",
    "end": "3670470"
  },
  {
    "text": "conversions we have now put them behind the lock the lock is called a language",
    "start": "3670470",
    "end": "3675750"
  },
  {
    "text": "import so you now have to write import language dot implicit conversions if you want to use that and I would say yes in",
    "start": "3675750",
    "end": "3682829"
  },
  {
    "text": "most cases I would not have advise to use them so I would say if you have a policy in your team don't use that",
    "start": "3682829",
    "end": "3688970"
  },
  {
    "text": "what's behind that lock then I would say that's I think probably a good choice",
    "start": "3688970",
    "end": "3694349"
  },
  {
    "text": "you might have in some specialized reasons where you want happened and of course you can get it by importing it",
    "start": "3694349",
    "end": "3700559"
  },
  {
    "text": "but by default I would say it's a good choice not to use them you cannot extend their case class",
    "start": "3700559",
    "end": "3707720"
  },
  {
    "text": "yes that's true so it's really only formed further alternatives so if one",
    "start": "3707720",
    "end": "3713940"
  },
  {
    "text": "can nothing but but what was the question if you cannot extend the case class then oh you say okay now I get it yet so",
    "start": "3713940",
    "end": "3723359"
  },
  {
    "text": "I believe what you're getting at is to say well if I use dynamic dispatch can",
    "start": "3723359",
    "end": "3728550"
  },
  {
    "text": "have gradual refinements in overrides along a tree and those I can't do with a plain Terran match because it would mean",
    "start": "3728550",
    "end": "3735480"
  },
  {
    "text": "I would have to have case classes that inherit case classes and that's true yeah so if you want to do that not just",
    "start": "3735480",
    "end": "3742830"
  },
  {
    "text": "have a single method that you implement them in essentially a flat sum of types",
    "start": "3742830",
    "end": "3747840"
  },
  {
    "text": "but you want to override this method in further in further refinements than",
    "start": "3747840",
    "end": "3753740"
  },
  {
    "text": "dynamic dispatch is the choice for you but I should say if you do that a lot",
    "start": "3753740",
    "end": "3760140"
  },
  {
    "text": "and also your program code will not be very legible if this is something I mean a lot of overrides in many different",
    "start": "3760140",
    "end": "3766680"
  },
  {
    "text": "cases are typically something that is not very legible because you not only",
    "start": "3766680",
    "end": "3772590"
  },
  {
    "text": "have you have you have to look at all the possible cases now but you might think you have something because you",
    "start": "3772590",
    "end": "3778590"
  },
  {
    "text": "look at in the base class and then actually in the subclass no it's not the implementation you were thinking of so I",
    "start": "3778590",
    "end": "3784560"
  },
  {
    "text": "would do that I mean there's certainly reasons for doing it this way typically performance so if you have a clear",
    "start": "3784560",
    "end": "3790410"
  },
  {
    "text": "contract of what your method is if you have special implementations and special special implementation subclasses that",
    "start": "3790410",
    "end": "3796080"
  },
  {
    "text": "just do the same job but faster nothing against that but I think one has to again see what what what are the",
    "start": "3796080",
    "end": "3803280"
  },
  {
    "text": "application areas of public applicability here so would for monadic operations one can",
    "start": "3803280",
    "end": "3812280"
  },
  {
    "text": "express them with for yield or with map flatmap which to prefer I",
    "start": "3812280",
    "end": "3818270"
  },
  {
    "text": "think that for many people flat map is kind of cool but also confusing what it",
    "start": "3818270",
    "end": "3826530"
  },
  {
    "text": "is so I would say once you have flat maps in your sequence",
    "start": "3826530",
    "end": "3832980"
  },
  {
    "text": "I would typically use a for yield instead it's simpler most people most",
    "start": "3832980",
    "end": "3839760"
  },
  {
    "text": "people understand this better so technically it means if you have more than one generator and you need a flat",
    "start": "3839760",
    "end": "3846240"
  },
  {
    "text": "map then you could use a fork for for expression and it would be typically more legible so nothing against map and",
    "start": "3846240",
    "end": "3854370"
  },
  {
    "text": "filter but flat map let's keep it a secret",
    "start": "3854370",
    "end": "3859860"
  },
  {
    "text": "oh okay so the third alternative would be",
    "start": "3859860",
    "end": "3867940"
  },
  {
    "text": "to use the same thing with type classes so we'd have to see Beaufort area",
    "start": "3867940",
    "end": "3874260"
  },
  {
    "text": "yeah so type classes I didn't think of type classes because so I imagine that",
    "start": "3874260",
    "end": "3882010"
  },
  {
    "text": "what you are after is to have a type class area of area a computer that",
    "start": "3882010",
    "end": "3887890"
  },
  {
    "text": "essentially has implementations for circle rectangle and the other shapes",
    "start": "3887890",
    "end": "3893100"
  },
  {
    "text": "that's a slightly different behavior because then your area actually depends",
    "start": "3893100",
    "end": "3898150"
  },
  {
    "text": "on the static type of something not on the runtime type so it's a different ballgame so my",
    "start": "3898150",
    "end": "3904440"
  },
  {
    "text": "recommendation here would be if your architecture is such that the dispatch",
    "start": "3904440",
    "end": "3911140"
  },
  {
    "text": "always depends on the static type so you you know that that you want me to rely on the runtime type then indeed type",
    "start": "3911140",
    "end": "3918700"
  },
  {
    "text": "classes are a good choice and probably the preferable choice it goes a little bit in the direction of the first",
    "start": "3918700",
    "end": "3924760"
  },
  {
    "text": "question which says well should we put everything in one big API and thereby make it over rideable and dynamically",
    "start": "3924760",
    "end": "3930670"
  },
  {
    "text": "dispatchable or should we put type classes so the answer was preferred type classes but of course that means that",
    "start": "3930670",
    "end": "3936990"
  },
  {
    "text": "essentially these things have the same implementation for all dynamic subtypes",
    "start": "3936990",
    "end": "3942850"
  },
  {
    "text": "of any static type let see if you can assure that then I would say type classes like right in this case I didn't",
    "start": "3942850",
    "end": "3949840"
  },
  {
    "text": "assume that so I didn't consider type classes yeah yeah we had them I think we had Eugene",
    "start": "3949840",
    "end": "3958050"
  },
  {
    "text": "here last week speak last week at a meet-up and maybe he has already said a",
    "start": "3958050",
    "end": "3963820"
  },
  {
    "text": "little bit so I think we are sort of we have a roadmap for what we want to do",
    "start": "3963820",
    "end": "3970120"
  },
  {
    "text": "with macros now so the current state is macros I'm to ten but as an experimental feature so experimental means they might",
    "start": "3970120",
    "end": "3978280"
  },
  {
    "text": "go away or be just all be fundamentally changed in future versions one shouldn't",
    "start": "3978280",
    "end": "3983650"
  },
  {
    "text": "rely on them for anything that that that is is crucial for to be brought forward",
    "start": "3983650",
    "end": "3990980"
  },
  {
    "text": "experiments is fine but currently not much more than that so I believe what we",
    "start": "3990980",
    "end": "3997640"
  },
  {
    "text": "are ending up with in one of the future versions is a",
    "start": "3997640",
    "end": "4002910"
  },
  {
    "text": "restricted version of macros which I call blackbox macros so a macro is just",
    "start": "4002910",
    "end": "4009609"
  },
  {
    "text": "a function it takes arguments that that are expression trees and it gives you",
    "start": "4009609",
    "end": "4015190"
  },
  {
    "text": "back a new expression tree and the crucial point which I believe makes a",
    "start": "4015190",
    "end": "4020920"
  },
  {
    "text": "big difference is whether this function is type-check the way its declared or the way it's expanded so let's say we",
    "start": "4020920",
    "end": "4028450"
  },
  {
    "text": "have a function that says well I give you a I take a string or an expression",
    "start": "4028450",
    "end": "4034690"
  },
  {
    "text": "yielding a string and I give you back and an object",
    "start": "4034690",
    "end": "4040530"
  },
  {
    "text": "so then when you expand the macro actually the expansion would give you",
    "start": "4040530",
    "end": "4046119"
  },
  {
    "text": "back something much more fancy like a list or a boolean or things like that the question is which of the two types",
    "start": "4046119",
    "end": "4052660"
  },
  {
    "text": "does the type checker see object the one that's declared as the return type of the method or string if the answer is",
    "start": "4052660",
    "end": "4060700"
  },
  {
    "text": "the second one that's the current state of it off of experimental macros then",
    "start": "4060700",
    "end": "4065920"
  },
  {
    "text": "that opens the door to do a lot of fancy tricks with types because macros can essentially produce new stuff that only",
    "start": "4065920",
    "end": "4073630"
  },
  {
    "text": "has to type check on expansion on football therefore the declare type can be any in nobody cares and that means",
    "start": "4073630",
    "end": "4080349"
  },
  {
    "text": "you open the floodgates for essentially language extensions that can be as wild",
    "start": "4080349",
    "end": "4085869"
  },
  {
    "text": "as you can imagine unfortunately it also means that there's no chance you can support this thing in",
    "start": "4085869",
    "end": "4093640"
  },
  {
    "text": "plane editors or ideas because it would mean type checking a program means",
    "start": "4093640",
    "end": "4098980"
  },
  {
    "text": "expanding your macros you have to expand your macros before you can type check so we want I think we have said well this",
    "start": "4098980",
    "end": "4106210"
  },
  {
    "text": "was great while it lasted but we don't wanna standardize on that so we",
    "start": "4106210",
    "end": "4111670"
  },
  {
    "text": "Daesan black box macros where we say well essentially the type that's declared in the macro is a type you get",
    "start": "4111670",
    "end": "4117190"
  },
  {
    "text": "that means that I des can actually type check your program perfectly well without macro expansion and it also",
    "start": "4117190",
    "end": "4123338"
  },
  {
    "text": "means that macro expansion essentially essentially it's there to improve your",
    "start": "4123339",
    "end": "4129219"
  },
  {
    "text": "program in some way without fundamentally changing it so macros that would be possible under this new scheme",
    "start": "4129219",
    "end": "4135488"
  },
  {
    "text": "is for instance taking a four inch of a range and replacing it by a while loop",
    "start": "4135489",
    "end": "4140738"
  },
  {
    "text": "or something that could check whether a spore there was a talk about spores that",
    "start": "4140739",
    "end": "4147400"
  },
  {
    "text": "means a closure has escaping references and giving you are warning are an error if it hasn't or things like",
    "start": "4147400",
    "end": "4156150"
  },
  {
    "text": "optimizing your collections so that loops are fused and things like that so all these things will remain possible",
    "start": "4156150",
    "end": "4161738"
  },
  {
    "text": "but you will essentially not be able to sort of undermine the type systems with macros and I think that's sort of a good",
    "start": "4161739",
    "end": "4167620"
  },
  {
    "text": "compromise of power and and tooling and understandability so I think will",
    "start": "4167620",
    "end": "4172630"
  },
  {
    "text": "converge on that one did that answer your question okay good",
    "start": "4172630",
    "end": "4178738"
  },
  {
    "text": "why did we choose not to have lazy evaluation by default",
    "start": "4178739",
    "end": "4184258"
  },
  {
    "text": "there are many problems with lazy evaluation so the first is that of",
    "start": "4185549",
    "end": "4192370"
  },
  {
    "text": "course it's incompatible with side-effects if you ask Simon Jones he says well",
    "start": "4192370",
    "end": "4199090"
  },
  {
    "text": "that's actually good because the biggest the best things with lazy with lazy evaluation in Haskell is it has kept us",
    "start": "4199090",
    "end": "4206140"
  },
  {
    "text": "honest about side effects and that's why I asked and essentially has a very strict regime where any side effects",
    "start": "4206140",
    "end": "4212650"
  },
  {
    "text": "have to be in a Moana so if you have schoo that's the right thing but if you come from a language like Scala which",
    "start": "4212650",
    "end": "4218980"
  },
  {
    "text": "started with side effects from the beginning lazy evaluation is fundamentally compatible with that Universal lazy evaluation in even if you",
    "start": "4218980",
    "end": "4228160"
  },
  {
    "text": "if you use less evals and Scala and I would encourage you that's good practice it also means you should be very careful",
    "start": "4228160",
    "end": "4234400"
  },
  {
    "text": "with side effects with mixing that the side effects because it's rather can be rather surprising when things I",
    "start": "4234400",
    "end": "4241179"
  },
  {
    "text": "evaluated in side effects are all about temporal orderings so the two things something's that's the the more things",
    "start": "4241179",
    "end": "4248000"
  },
  {
    "text": "that are problematic with lazy evaluation Universal lazy evaluation in particular memory graphs so often when you evaluate",
    "start": "4248000",
    "end": "4256850"
  },
  {
    "text": "lazily everything you essentially you get automatic loop unrolling so often",
    "start": "4256850",
    "end": "4262100"
  },
  {
    "text": "your loop or recursive computation it gets unrolled that you get essentially",
    "start": "4262100",
    "end": "4267860"
  },
  {
    "text": "the full graph of all the unrolling Xin your loop in your data structure and that kind of course be huge so Haskell",
    "start": "4267860",
    "end": "4274190"
  },
  {
    "text": "programs can be sometimes rather difficult to debug in their space behavior and again that's not what we",
    "start": "4274190",
    "end": "4279710"
  },
  {
    "text": "wanted for for for for SCADA so I think that's among the two main reasons I actually believe we hit a pretty good",
    "start": "4279710",
    "end": "4286160"
  },
  {
    "text": "compromise to give you a lazy evaluation on demand and I personally haven't",
    "start": "4286160",
    "end": "4291770"
  },
  {
    "text": "really seen many reasons to go beyond that to try to be honest yeah",
    "start": "4291770",
    "end": "4298630"
  },
  {
    "text": "you shouldn't ask me I never wrote anything with Java beans so",
    "start": "4298630",
    "end": "4305110"
  },
  {
    "text": "yeah we're together since said as well you can you know you can have this you can have this annotate very fine state",
    "start": "4307510",
    "end": "4314480"
  },
  {
    "text": "yeah probably my advice would be use play and akka and",
    "start": "4314480",
    "end": "4322490"
  },
  {
    "text": "don't use Java pins so the question was can we like",
    "start": "4322490",
    "end": "4331960"
  },
  {
    "text": "drop the static typing requirements locally and then get to types",
    "start": "4331960",
    "end": "4337210"
  },
  {
    "text": "so in a sense we have that already so we have dynamic you can use dynamic it's",
    "start": "4337210",
    "end": "4342980"
  },
  {
    "text": "again under lock because it gets dangerous so you have to import the import language not dynamic",
    "start": "4342980",
    "end": "4348110"
  },
  {
    "text": "but then dynamic is perfectly good it gives you dynamic types you can have",
    "start": "4348110",
    "end": "4353360"
  },
  {
    "text": "methods any method calling with an amicus tanum it's dynamically chosen so it's dynamically resolved and to get",
    "start": "4353360",
    "end": "4360800"
  },
  {
    "text": "back to static typing we also have a good means and that's pattern matching so I can take an object I don't know",
    "start": "4360800",
    "end": "4366020"
  },
  {
    "text": "what it is but once I have put the parents in place in each pattern then typically I do what the types of my",
    "start": "4366020",
    "end": "4372280"
  },
  {
    "text": "variables are so I think with those two we have that I haven't seen that much",
    "start": "4372280",
    "end": "4377880"
  },
  {
    "text": "reason to go that way except like you say interfacing with something that is",
    "start": "4377880",
    "end": "4383470"
  },
  {
    "text": "inherently dynamic JSON or JavaScript at the whole or things like that then I believe it's very important and that's",
    "start": "4383470",
    "end": "4390040"
  },
  {
    "text": "why we also added dynamic so there was a very nice talk about scalloped jeaious",
    "start": "4390040",
    "end": "4395320"
  },
  {
    "text": "at Scala days by C best Android or any who had met a lot of interest and",
    "start": "4395320",
    "end": "4400450"
  },
  {
    "text": "dynamic is essentially a cornerstone of that because that lets us talk with JavaScript programs directly and if they",
    "start": "4400450",
    "end": "4408700"
  },
  {
    "text": "happen to have types because that that project actually makes then makes use of",
    "start": "4408700",
    "end": "4413740"
  },
  {
    "text": "any typescript type annotations which now also exists for JavaScript and we use them if you don't have them then we",
    "start": "4413740",
    "end": "4420130"
  },
  {
    "text": "fall back to dynamic for these reasons for these scenarios is actually I believe it's very good to have dynamic",
    "start": "4420130",
    "end": "4426790"
  },
  {
    "text": "and is promising one last question do we plan to extend macros to do aspect",
    "start": "4426790",
    "end": "4435790"
  },
  {
    "text": "or any programming over the whole probably not there are",
    "start": "4435790",
    "end": "4441490"
  },
  {
    "text": "some things we are looking at we haven't figured out yet what you would like to do is something like being getters and",
    "start": "4441490",
    "end": "4447550"
  },
  {
    "text": "setters things like that so essentially code generation of methods that's currently specialized if you write beam",
    "start": "4447550",
    "end": "4453940"
  },
  {
    "text": "property on a field you get together and setter it would be nice to be able to",
    "start": "4453940",
    "end": "4459310"
  },
  {
    "text": "generalize that to make that within the capabilities of a macro that takes a",
    "start": "4459310",
    "end": "4465190"
  },
  {
    "text": "load of the compiler the compiler doesn't have to special case it anymore and it opens the door to after other",
    "start": "4465190",
    "end": "4470530"
  },
  {
    "text": "people to do stuff like that and I think we probably want to want to keep it at that not to point cuts and stuff like",
    "start": "4470530",
    "end": "4477040"
  },
  {
    "text": "that I don't think that would happen ok I think we should wrap up then thank you",
    "start": "4477040",
    "end": "4482260"
  },
  {
    "text": "very much for being here",
    "start": "4482260",
    "end": "4485219"
  }
]