[
  {
    "text": "[Music]",
    "start": "1430",
    "end": "12559"
  },
  {
    "text": "first off thank you for coming to my talk building a data science platform in Scola my name is John Dos and I'm CEO",
    "start": "12559",
    "end": "20240"
  },
  {
    "text": "and CTO of Precog and I look forward to sharing our experiences over the past",
    "start": "20240",
    "end": "26000"
  },
  {
    "text": "couple years working with Scala on a very large scale distributed",
    "start": "26000",
    "end": "32000"
  },
  {
    "text": "project first I'm going to talk a bit about what precog is so you can understand the kinds of functional",
    "start": "32520",
    "end": "37760"
  },
  {
    "text": "requirements that went into building it and maybe a bit more about why we chose to use Scala i'll then dive into a highle",
    "start": "37760",
    "end": "46480"
  },
  {
    "text": "overview of our platform's architecture so you can see what's underneath the hood i'll talk a bit about all the",
    "start": "46480",
    "end": "54480"
  },
  {
    "text": "lessons we've learned precog is not a small Scola codebase as I'm about to show you and building it we've",
    "start": "54480",
    "end": "61440"
  },
  {
    "text": "encountered a lot of issues some really great strengths in Scala enable us to",
    "start": "61440",
    "end": "66479"
  },
  {
    "text": "build code faster and more stable and more robust and then some other things in Scolo or the ecosystem kind of get in",
    "start": "66479",
    "end": "73840"
  },
  {
    "text": "our way and and trip us up and I'm going to talk a bit about each of those things in the lessons learned section and then",
    "start": "73840",
    "end": "80720"
  },
  {
    "text": "finally I'm going to conclude with sort of my picture of what's on the horizon",
    "start": "80720",
    "end": "86880"
  },
  {
    "text": "what's the next step for Scala what's the next step that that would help us do an even better job building precog in",
    "start": "86880",
    "end": "93280"
  },
  {
    "text": "the Scola programming language what is precog well you can see",
    "start": "93280",
    "end": "99759"
  },
  {
    "text": "there there's a flashy graphic showing a rocket ship fundamentally Precog is a",
    "start": "99759",
    "end": "105200"
  },
  {
    "text": "data science platform what do I mean by that well I mean we make it very easy for you to store data technically we",
    "start": "105200",
    "end": "112799"
  },
  {
    "text": "deal with immutable data so this is stuff like clickstream data it's behavioral data transactional data",
    "start": "112799",
    "end": "118640"
  },
  {
    "text": "sensor data interaction data activity data all that kind of data out there that's measured or observed by machines",
    "start": "118640",
    "end": "126799"
  },
  {
    "text": "captured automatically as opposed to human entered that is persistent data",
    "start": "126799",
    "end": "132480"
  },
  {
    "text": "and that's the kind of data that precog deals with and that's very important because everyone's probably heard of big",
    "start": "132480",
    "end": "138959"
  },
  {
    "text": "data hype right everything's big data every startup is a big data startup everyone's into big data these days but",
    "start": "138959",
    "end": "145840"
  },
  {
    "text": "no one ever stops to talk about what is big data well if you go back 20 years",
    "start": "145840",
    "end": "151360"
  },
  {
    "text": "the main form of information was uh relational data that humans entered into",
    "start": "151360",
    "end": "157720"
  },
  {
    "text": "databases and technically there's a name for this kind of data it's called entity oriented data it's immutable data it's",
    "start": "157720",
    "end": "164720"
  },
  {
    "text": "like where you live what's your credit card number who do you report to in your organization of course that kind of data",
    "start": "164720",
    "end": "170560"
  },
  {
    "text": "hasn't gone away and it's never going to go away but what started to happen around 1520 years ago is storage became",
    "start": "170560",
    "end": "178080"
  },
  {
    "text": "so incredibly cheap or started becoming so incredibly cheap that companies",
    "start": "178080",
    "end": "183200"
  },
  {
    "text": "started recording not just the current state of entities in the real world or",
    "start": "183200",
    "end": "188640"
  },
  {
    "text": "virtual world but changes to those entities we started recording when people click and when they look at",
    "start": "188640",
    "end": "195120"
  },
  {
    "text": "something when they swipe an ATM card we started recording when sensors are measuring things and right now the",
    "start": "195120",
    "end": "203280"
  },
  {
    "text": "majority of the information created in the world is actually not entered by humans it is captured automatically by",
    "start": "203280",
    "end": "210760"
  },
  {
    "text": "machines machines who are observing us whether it's your application or your",
    "start": "210760",
    "end": "216319"
  },
  {
    "text": "phone your web app your mobile app whatever it is there's a huge amount of information that's being created and and",
    "start": "216319",
    "end": "223200"
  },
  {
    "text": "the reason why this is rapidly exploding and soon will account for most data in the world is is quite simple because",
    "start": "223200",
    "end": "229040"
  },
  {
    "text": "it's not dependent on a human bottleneck so in the next five years the majority of information in the world uh will in",
    "start": "229040",
    "end": "236000"
  },
  {
    "text": "fact be this persistent data records of observations made by machines about your",
    "start": "236000",
    "end": "242319"
  },
  {
    "text": "behavior and the behavior of systems and uh and so forth we make it easy to capture that data we uh allow allow you",
    "start": "242319",
    "end": "250480"
  },
  {
    "text": "to mash it up with other kinds of data do stuff like NLP or other kinds of things that you might want to on ingest",
    "start": "250480",
    "end": "257199"
  },
  {
    "text": "we provide a statist an implementation of a statistically oriented query language that our team built called",
    "start": "257199",
    "end": "262360"
  },
  {
    "text": "Quirl uh that allows you to do data science on that data without having to care about the fact that that data may",
    "start": "262360",
    "end": "269680"
  },
  {
    "text": "be distributed on different clusters you don't have to explicitly think about your data science problems in terms of",
    "start": "269680",
    "end": "276479"
  },
  {
    "text": "how do I decompose this into efficient operations you can just concentrate on what you want to do with your data and a",
    "start": "276479",
    "end": "282400"
  },
  {
    "text": "large part of our precog codebase is designed to efficiently do that and then finally we enable you to",
    "start": "282400",
    "end": "291199"
  },
  {
    "text": "uh deploy that correlable code inside your application so you can build",
    "start": "291199",
    "end": "296320"
  },
  {
    "text": "runtime features like predictions or recommendations or reporting or all kinds of interesting things that you can",
    "start": "296320",
    "end": "302479"
  },
  {
    "text": "do when you have the ability to deeply analyze",
    "start": "302479",
    "end": "306638"
  },
  {
    "text": "data why is this important well right now with all this data explosion of data",
    "start": "308520",
    "end": "315039"
  },
  {
    "text": "it's really really hard to analyze this data most companies who are doing it are writing code themselves on top of Hadoop",
    "start": "315039",
    "end": "321759"
  },
  {
    "text": "map produce jobs and using combinations of lot lots of different tools but this needs to enter mainstream and it needs",
    "start": "321759",
    "end": "327199"
  },
  {
    "text": "to become far far easier uh to do this at scale because data analysis will",
    "start": "327199",
    "end": "333120"
  },
  {
    "text": "change our world forever if you think of all the applications from biioinformatics to just on and on and on",
    "start": "333120",
    "end": "339360"
  },
  {
    "text": "data analysis will end up saving millions tens of millions hundreds of millions of lives and machine",
    "start": "339360",
    "end": "344960"
  },
  {
    "text": "intelligence will change the very nature of society in my",
    "start": "344960",
    "end": "350080"
  },
  {
    "text": "opinion okay this rocket doesn't want to go away",
    "start": "353479",
    "end": "361800"
  },
  {
    "text": "yeah okay so our goals in creating precog were to create something that's highly",
    "start": "362479",
    "end": "368440"
  },
  {
    "text": "performant massively distributed heavily concurrent with a highly functional codebase because we like functional",
    "start": "368440",
    "end": "374639"
  },
  {
    "text": "programming it's easier to reason about it's easier to test and then heavily heavily tested because we're we're uh",
    "start": "374639",
    "end": "380319"
  },
  {
    "text": "positioning PROG as kind of an operational data science platform that you can count on to run 20 247 the",
    "start": "380319",
    "end": "387039"
  },
  {
    "text": "correctness properties of precog were extremely important and we chose Scola because it's a pretty good fit on just",
    "start": "387039",
    "end": "393280"
  },
  {
    "text": "about all of these goals we've had some problems with a few of them and I'll talk about my lessons learned section uh",
    "start": "393280",
    "end": "400080"
  },
  {
    "text": "but overall it's it's worked out quite well i want to kind of give you a sense for how big our project is so I've",
    "start": "400080",
    "end": "407600"
  },
  {
    "text": "compiled some basic statistics",
    "start": "407600",
    "end": "412199"
  },
  {
    "text": "40,000 main line or 40,000 lines of code in main 26,000 lines of code in test",
    "start": "413520",
    "end": "421360"
  },
  {
    "text": "about four years that's pretty big especially when you consider that the information density of Scola code is 10",
    "start": "421360",
    "end": "428400"
  },
  {
    "text": "times what it is in Java so you can add another zero to all those numbers if",
    "start": "428400",
    "end": "433840"
  },
  {
    "text": "you're trying to think about what this codebase would look like in Scola oh I'm sorry that's not precog",
    "start": "433840",
    "end": "441360"
  },
  {
    "text": "that's aka which is a really great open source first project that we use the Scola codebase is actually quite",
    "start": "441360",
    "end": "447840"
  },
  {
    "text": "a bit bigger and created in less time these are the libraries that we",
    "start": "447840",
    "end": "454880"
  },
  {
    "text": "love to use we use aa blue eyes Daniel's GLL parser",
    "start": "454880",
    "end": "460919"
  },
  {
    "text": "competitors SBT Scola actually a lot of our tests are are written in Scola and",
    "start": "460919",
    "end": "466639"
  },
  {
    "text": "that's worked out really well for us scola Z shapeless specs and",
    "start": "466639",
    "end": "475520"
  },
  {
    "text": "spire this is an overview of the architecture of the",
    "start": "476199",
    "end": "481120"
  },
  {
    "text": "platform we tried to make list make this design very modular and if you uh caught",
    "start": "482120",
    "end": "487639"
  },
  {
    "text": "Daniel's keynote address earlier all these are different modules actually inside of every one of these",
    "start": "487639",
    "end": "494240"
  },
  {
    "text": "modules there's lots of different subm modules and we essentially glue it all together at runtime with a cake pattern",
    "start": "494240",
    "end": "500000"
  },
  {
    "text": "which has provided us an enormous amount of flexibility we're able for example to plug in different backends so we have",
    "start": "500000",
    "end": "506000"
  },
  {
    "text": "PCOG running on MongoDB and Postgress SQL um in addition to our own native",
    "start": "506000",
    "end": "511280"
  },
  {
    "text": "data store that's optimized for data science so let's move on to the lessons",
    "start": "511280",
    "end": "519440"
  },
  {
    "text": "learned section lesson number one that I'd say um that that we've learned is",
    "start": "519440",
    "end": "525200"
  },
  {
    "text": "that Scola is a beast and I do mean that in a good way it has a very powerful",
    "start": "525200",
    "end": "530320"
  },
  {
    "text": "type system one of our engineers remarked that kind of once you get the type signature right the function basically writes itself that's not",
    "start": "530320",
    "end": "536640"
  },
  {
    "text": "exactly true but I've seen and written enough scholar to appreciate the sentiment behind that oftentimes when",
    "start": "536640",
    "end": "542880"
  },
  {
    "text": "you do write a function with a complex type signature the the uh definition of that function just falls out naturally",
    "start": "542880",
    "end": "549600"
  },
  {
    "text": "and so does testing it you catch a tremendous number of errors at compile",
    "start": "549600",
    "end": "554640"
  },
  {
    "text": "time and that's very very important the more errors we can catch at compile time the more stable we can make our",
    "start": "554640",
    "end": "561560"
  },
  {
    "text": "platform of course you do have to watch out for compiler crashes you can Scola's",
    "start": "561560",
    "end": "567279"
  },
  {
    "text": "type system is complicated enough the implementation is complicated enough that you can and in fact we we do quite",
    "start": "567279",
    "end": "573279"
  },
  {
    "text": "quite often crash the Scola compiler that's something that you don't often see in Java world the Java compiler is",
    "start": "573279",
    "end": "579519"
  },
  {
    "text": "very very simple compared to the Scola compiler and it's rock",
    "start": "579519",
    "end": "584760"
  },
  {
    "text": "solid as Daniel mentioned earlier in his talk today Scola has a very powerful module",
    "start": "584760",
    "end": "591279"
  },
  {
    "text": "system that I I really feel like is just being discovered it kind of takes a few years before you know the idiomatic way",
    "start": "591279",
    "end": "596959"
  },
  {
    "text": "to do something in a new language and I think we're still pushing the boundaries of what's possible using traits as",
    "start": "596959",
    "end": "605880"
  },
  {
    "text": "modules it's a bit tricky as Daniel mentioned earlier today with application life cycle management which we",
    "start": "605880",
    "end": "612560"
  },
  {
    "text": "discovered actually in the past two months and that caused a couple weeks of pain and suffering as we underwent a",
    "start": "612560",
    "end": "618800"
  },
  {
    "text": "major refactoring of the codebase to bring life cycle management into the cake pattern but I think we've got a",
    "start": "618800",
    "end": "624640"
  },
  {
    "text": "grip on that i don't think we've exactly figured out the best way to do modules in Scola but we've certainly been",
    "start": "624640",
    "end": "631120"
  },
  {
    "text": "pushing the boundaries and Scola has is has enormous",
    "start": "631120",
    "end": "637440"
  },
  {
    "text": "expressiveness i mean there's so many different ways to do things and you can do things so compactly you can solve",
    "start": "637440",
    "end": "642560"
  },
  {
    "text": "some problems just in a few lines of code that would take you dozens perhaps hundreds of lines of code in a language",
    "start": "642560",
    "end": "648560"
  },
  {
    "text": "like Java and on the drawback side that that kind of means that even if you have a team",
    "start": "648560",
    "end": "654720"
  },
  {
    "text": "full of Scola experts in the building sometimes it's not always obvious what the best way to do something is and so",
    "start": "654720",
    "end": "661040"
  },
  {
    "text": "we have to this day actually we have kind of different Scola code styles in our codebase as we're trying to converge",
    "start": "661040",
    "end": "667839"
  },
  {
    "text": "on on something that makes sense for the whole whole",
    "start": "667839",
    "end": "673040"
  },
  {
    "text": "codebase okay so the Scola tooling is in",
    "start": "674200",
    "end": "679440"
  },
  {
    "text": "need of help and my first point to make here is actually something we want to turn into a t-shirt which is SBT lies",
    "start": "679440",
    "end": "688320"
  },
  {
    "text": "and if you've used SBT for a while you'll come to appreciate its phenomenal",
    "start": "688320",
    "end": "693760"
  },
  {
    "text": "incremental compilation which saves you perhaps man days man weeks man years of of your life",
    "start": "693760",
    "end": "701839"
  },
  {
    "text": "compiling your Scala source code files but at the same time it doesn't always",
    "start": "701839",
    "end": "707120"
  },
  {
    "text": "get things right it doesn't always get the dependency resolution right and sometimes SPT clean doesn't clean stuff",
    "start": "707120",
    "end": "713760"
  },
  {
    "text": "so we have wasted a huge amount of time tracking down errors in our build system our build which should be green and and",
    "start": "713760",
    "end": "720399"
  },
  {
    "text": "is green sometimes sometimes goes red for reasons that we can't control and and we trace a lot of these back down to",
    "start": "720399",
    "end": "728320"
  },
  {
    "text": "SPT the builds are slow scola compiler is not a speedy beast and uh if you use",
    "start": "728680",
    "end": "735839"
  },
  {
    "text": "the the traits as modules as as we're doing and you use it extensively over your entire codebase you will find oh",
    "start": "735839",
    "end": "743440"
  },
  {
    "text": "and higher kind of types and all the other stuff we're using you will find that compile times are extremely long",
    "start": "743440",
    "end": "750320"
  },
  {
    "text": "actually it takes longer to compile our codebase it takes to do a full compile",
    "start": "750320",
    "end": "755360"
  },
  {
    "text": "it takes I can't remember the time but it's many many minutes um it takes longer to compile it than it does to run",
    "start": "755360",
    "end": "762320"
  },
  {
    "text": "through quite literally tens of thousands of tests including many scholar check",
    "start": "762320",
    "end": "767720"
  },
  {
    "text": "tests but you know on the other side um we really haven't noticed the pain of",
    "start": "767720",
    "end": "773760"
  },
  {
    "text": "being without an IDE in Java I cannot cannot imagine life without an IDE",
    "start": "773760",
    "end": "779279"
  },
  {
    "text": "because every time you want to rename something or extract some code out there's like so much boilerplate um and",
    "start": "779279",
    "end": "785200"
  },
  {
    "text": "you end up doing that a lot in Scala because of the way it encourages you to design your code is this object-oriented",
    "start": "785200",
    "end": "791000"
  },
  {
    "text": "hierarchy but in Scola you design things a bit different in in a way that turns out to need a lot less refactoring and",
    "start": "791000",
    "end": "797440"
  },
  {
    "text": "you have a lot of power available to you so most of the members on our team actually haven't missed an IDE all that",
    "start": "797440",
    "end": "803519"
  },
  {
    "text": "much we have people using VI people using Emacs um people using Sublime Text",
    "start": "803519",
    "end": "808720"
  },
  {
    "text": "2 uh Daniel of course uses Jeddit one of the two users in the world to use JEEit",
    "start": "808720",
    "end": "813920"
  },
  {
    "text": "for Scala um but it's worked out really well",
    "start": "813920",
    "end": "819760"
  },
  {
    "text": "another very interesting thing especially probably for people coming from a functional background is that",
    "start": "820480",
    "end": "825760"
  },
  {
    "text": "Scola is very good at functional abstraction you might not think so but you can actually do a lot of functional",
    "start": "825760",
    "end": "831920"
  },
  {
    "text": "abstraction in Scala and we use Scola Z or Scola Zed because it abstracts out a",
    "start": "831920",
    "end": "840160"
  },
  {
    "text": "lot of the common if if you will design patterns in functional programming",
    "start": "840160",
    "end": "846560"
  },
  {
    "text": "the documentation admittedly could improve the naming of these esoteric things could perhaps be improved but the",
    "start": "846560",
    "end": "853199"
  },
  {
    "text": "reality is when you're doing functional programming you encounter these patterns quite a lot and it's nice to have",
    "start": "853199",
    "end": "858399"
  },
  {
    "text": "ready-made abstractions as well as implementations for Scola all over the place so we we",
    "start": "858399",
    "end": "865360"
  },
  {
    "text": "heavily use Scola Zed whenever we can and whenever it makes sense to do so um and and we have several Scala Zed",
    "start": "865360",
    "end": "872079"
  },
  {
    "text": "committers on our team that said Skola Zed is not designed for",
    "start": "872079",
    "end": "879000"
  },
  {
    "text": "performance and it makes the choice to use laziness everywhere",
    "start": "879000",
    "end": "884399"
  },
  {
    "text": "uh as well as it makes the choice to write code or the implementation of",
    "start": "884399",
    "end": "890560"
  },
  {
    "text": "Scalazed is written in a very functional way which means almost no duplication",
    "start": "890560",
    "end": "895760"
  },
  {
    "text": "and use of you know every every uh ounce of reusability and abstraction you can find which is great except that does",
    "start": "895760",
    "end": "903600"
  },
  {
    "text": "have runtime overhead so you have to be careful where you use Scalazette if you use it in an inner loop I can promise",
    "start": "903600",
    "end": "910800"
  },
  {
    "text": "you're not going to be writing performant quote higherminded types have have",
    "start": "910800",
    "end": "916079"
  },
  {
    "text": "proven to be indispensable because they allow abstraction at the type level and",
    "start": "916079",
    "end": "921279"
  },
  {
    "text": "we use that in numerous places we there's one thing I'll talk about in a",
    "start": "921279",
    "end": "926639"
  },
  {
    "text": "second actually number three monads are powerful our entire evaluator for Quirrel which is the statistically",
    "start": "926639",
    "end": "932560"
  },
  {
    "text": "oriented query language runs in a monad and it has it has been",
    "start": "932560",
    "end": "938240"
  },
  {
    "text": "tremendously useful we can swap that monad out in our test suite versus our production suite so in our test we can",
    "start": "938240",
    "end": "944880"
  },
  {
    "text": "make everything synchronous for example and in our production codebase everything is a synchronous and uses lots of threads and and and whatnot but",
    "start": "944880",
    "end": "951839"
  },
  {
    "text": "for for testing it's a lot easier to to do it in a synchronous fashion monads themselves um despite their scary",
    "start": "951839",
    "end": "961120"
  },
  {
    "text": "name and you know the scary threemonad laws and all that uh they are actually quite powerful and very useful even in",
    "start": "961120",
    "end": "967680"
  },
  {
    "text": "Scola which is perhaps not the best language in the world for monads uh we found that even the IO monad which",
    "start": "967680",
    "end": "975920"
  },
  {
    "text": "is how you do side effects in in Haskell can be useful in uh Scala and the reason",
    "start": "975920",
    "end": "981600"
  },
  {
    "text": "for that is when you have a largely functional codebase um you you kind of get in the mindset of",
    "start": "981600",
    "end": "987839"
  },
  {
    "text": "thinking that all your code is functional and so if you start calling some function that has a side effect",
    "start": "987839",
    "end": "994160"
  },
  {
    "text": "something bad will happen probably uh almost certain to happen and one way of",
    "start": "994160",
    "end": "999920"
  },
  {
    "text": "dealing with that is to use the IO monad because it serves as a reminder to a programmer that hey this code has a side",
    "start": "999920",
    "end": "1006880"
  },
  {
    "text": "effect and I'm going to have to run that at some point or compose it together with with other monads and eventually at",
    "start": "1006880",
    "end": "1012880"
  },
  {
    "text": "the end of the world run it it's very very useful and we've actually eliminated a number of bugs by using the",
    "start": "1012880",
    "end": "1018880"
  },
  {
    "text": "IO monad just because it enables you to more easily reason about your code that",
    "start": "1018880",
    "end": "1025520"
  },
  {
    "text": "that said I don't think the IO monad is the ultimate ultimate um solution for",
    "start": "1025520",
    "end": "1031360"
  },
  {
    "text": "side effects in Scola due to performance reasons at least at this point in time",
    "start": "1031360",
    "end": "1036720"
  },
  {
    "text": "monad transformers even have been used extensively in our",
    "start": "1036720",
    "end": "1042720"
  },
  {
    "text": "codebase and they allow almost a form of aspectoriented programming where you're",
    "start": "1043799",
    "end": "1049440"
  },
  {
    "text": "weaving features into your code remember I said our evaluator runs in a monad the",
    "start": "1049440",
    "end": "1055679"
  },
  {
    "text": "entire thing runs in a monad and we've been able to independently add features just by modifying the monad stack so for",
    "start": "1055679",
    "end": "1062640"
  },
  {
    "text": "example we wanted error handling we got we added an error monad to that the evaluator didn't change well it changed",
    "start": "1062640",
    "end": "1070080"
  },
  {
    "text": "modestly almost no lines of code were changed uh we wanted the ability to interrupt a query midway through the",
    "start": "1070080",
    "end": "1077200"
  },
  {
    "text": "process we added another monad to do that we wanted the ability to run this",
    "start": "1077200",
    "end": "1082240"
  },
  {
    "text": "asynchronously well that's just another monad so we were able to without changing the evaluator independently",
    "start": "1082240",
    "end": "1088480"
  },
  {
    "text": "weave these different features into that codebase and it's it's beautiful it's extremely powerful um and you you would",
    "start": "1088480",
    "end": "1096640"
  },
  {
    "text": "not be able to do that in in Java world without I mean perhaps you could do it with",
    "start": "1096640",
    "end": "1102600"
  },
  {
    "text": "aspectoriented programming but even then I mean it's completely untyped safe and it blows up runtime for strange reasons",
    "start": "1102600",
    "end": "1109200"
  },
  {
    "text": "it's hard to do that at the statement level what Monad Transformers provide you a way to do is is a way to weave all",
    "start": "1109200",
    "end": "1116559"
  },
  {
    "text": "these different features into the background of your application without changing the code and in a completely",
    "start": "1116559",
    "end": "1121760"
  },
  {
    "text": "type-S safe way and yeah there's a little bit of boilerplate there's a little monad syntax is clunky in Scala",
    "start": "1121760",
    "end": "1128240"
  },
  {
    "text": "there's some type inference problems but boilerplate that you can't get wrong that the Scola compiler will complain if",
    "start": "1128240",
    "end": "1135360"
  },
  {
    "text": "you get it wrong is is uh in my opinion harmless",
    "start": "1135360",
    "end": "1140400"
  },
  {
    "text": "boilerplate okay Scala is good at functional abstraction but let me tell you this the JVM is terrible at",
    "start": "1140600",
    "end": "1146960"
  },
  {
    "text": "functional abstraction first off the JVM hates",
    "start": "1146960",
    "end": "1154320"
  },
  {
    "text": "hates hates with a passion functional composition and the main reason for that is the",
    "start": "1154320",
    "end": "1161679"
  },
  {
    "text": "so-called um megamorphic dispatch problem what happens is if you're",
    "start": "1161679",
    "end": "1167200"
  },
  {
    "text": "calling a function in Java and that function is part of some interface and there's only one implementation let's",
    "start": "1167200",
    "end": "1173200"
  },
  {
    "text": "say of that interface then the JVM will eventually learn that whenever you call",
    "start": "1173200",
    "end": "1178240"
  },
  {
    "text": "that function uh you're referring to a particular concrete implementation and",
    "start": "1178240",
    "end": "1183360"
  },
  {
    "text": "it will be able to take the body of that function and inline it into your code",
    "start": "1183360",
    "end": "1188640"
  },
  {
    "text": "this does two things it eliminates the overhead of the virtual dispatch but it",
    "start": "1188640",
    "end": "1194000"
  },
  {
    "text": "also by bringing the body of that function um in into surrounding context",
    "start": "1194000",
    "end": "1199600"
  },
  {
    "text": "it permits the JVM to do optimizations because it knows what's happening on inside there and and it becomes suddenly",
    "start": "1199600",
    "end": "1207360"
  },
  {
    "text": "this blackbox thing that you can't do any optimizations to something that you can parallelize and reorder instructions",
    "start": "1207360",
    "end": "1213120"
  },
  {
    "text": "and and unbox do all these really interesting things that you simply can't do without inlining And unfortunately",
    "start": "1213120",
    "end": "1221280"
  },
  {
    "text": "uh all Scola code bases that are using functions are uh pathologically megamorphic because all functions",
    "start": "1221280",
    "end": "1228720"
  },
  {
    "text": "inherit from function or function two or function three or function four etc and",
    "start": "1228720",
    "end": "1234000"
  },
  {
    "text": "there are millions and millions of well maybe not millions but certainly tens of thousands of these things in your Scola",
    "start": "1234000",
    "end": "1239320"
  },
  {
    "text": "codebase and it completely prevents the JVM from being able to optimize these things but functional composition is is",
    "start": "1239320",
    "end": "1247760"
  },
  {
    "text": "kind of one of the pillars of functional programming so the JVM is saying don't don't write your programs in a",
    "start": "1247760",
    "end": "1253760"
  },
  {
    "text": "functional style unfortunately similarly the JVM also hates abstraction abstraction is all",
    "start": "1253760",
    "end": "1260480"
  },
  {
    "text": "about removing duplication and operating at a higher uh uh semantic level but the",
    "start": "1260480",
    "end": "1265919"
  },
  {
    "text": "more abstraction you have in the JVM the more overhead you have for example",
    "start": "1265919",
    "end": "1271120"
  },
  {
    "text": "boxing is is actually uh an artifact of abstraction you want to be able to uniformly treat int with float with",
    "start": "1271120",
    "end": "1277679"
  },
  {
    "text": "other kinds of types in your type system and if you abstract over that the only way to do that on the JVM is is to",
    "start": "1277679",
    "end": "1283559"
  },
  {
    "text": "boxing so in in summary uh even though scholars is quite good at functional",
    "start": "1283559",
    "end": "1288880"
  },
  {
    "text": "abstraction the JVM is absolutely terrible at it um and it actively",
    "start": "1288880",
    "end": "1293919"
  },
  {
    "text": "rewards bad behavior and punishes good behavior the better code you write from",
    "start": "1293919",
    "end": "1299039"
  },
  {
    "text": "a functional perspective the worse it will perform on the JVM which is very very sad in my opinion so how do you",
    "start": "1299039",
    "end": "1306640"
  },
  {
    "text": "live with the JVM uh Scola does not have an alternate backend it runs on the JVM",
    "start": "1306640",
    "end": "1312159"
  },
  {
    "text": "it'll probably always run on the JVM how do you live with that right now with tools and technologies that exist well",
    "start": "1312159",
    "end": "1320000"
  },
  {
    "text": "we found the following pattern to work very very well in production and it's to have a functional",
    "start": "1320000",
    "end": "1327280"
  },
  {
    "text": "composable top of your program so at the higher levels of your program everything is purely functional and um it's very",
    "start": "1327280",
    "end": "1334320"
  },
  {
    "text": "very compos composable you can compose those units together um but at the bottom kind of in between in all your",
    "start": "1334320",
    "end": "1341280"
  },
  {
    "text": "different units of composition everything is imperative um or or everything that needs to be is is",
    "start": "1341280",
    "end": "1348360"
  },
  {
    "text": "imperative exposing a purely functional composable interface um and that's very",
    "start": "1348360",
    "end": "1354000"
  },
  {
    "text": "very fast it's it's highly optimized handwritten code um but the point is you",
    "start": "1354000",
    "end": "1359520"
  },
  {
    "text": "don't notice it a whole lot so when you're working in the higher levels of the program uh things are purely",
    "start": "1359520",
    "end": "1365440"
  },
  {
    "text": "declarative you can compose this compose this and and no side effects will occur but as you dig deeper and deeper and",
    "start": "1365440",
    "end": "1371840"
  },
  {
    "text": "deeper you're going to find yourself kind of in in traditional Java land where yes there are side effects these",
    "start": "1371840",
    "end": "1377679"
  },
  {
    "text": "things are being wrapped up as as pure interfaces and that's pretty much um the",
    "start": "1377679",
    "end": "1383120"
  },
  {
    "text": "way you have to do it we've we found this to work very very well over the past year and a half",
    "start": "1383120",
    "end": "1389880"
  },
  {
    "text": "so another thing that you you should be aware of is that hiring for Scola is",
    "start": "1389919",
    "end": "1395679"
  },
  {
    "text": "tricky of course hiring for any software engineer is tricky right today anyone can get a job pretty much by snapping",
    "start": "1395679",
    "end": "1401840"
  },
  {
    "text": "their fingers because there's so much demand for software engineering talent um but hiring for Scola is even trickier",
    "start": "1401840",
    "end": "1411158"
  },
  {
    "text": "um I would say number one you you can if you want hire Java",
    "start": "1411600",
    "end": "1416799"
  },
  {
    "text": "engineers they'll know the JVM and the JVM is its own is its own thing you have",
    "start": "1416799",
    "end": "1422559"
  },
  {
    "text": "to spend a lot of time just to become good at writing software on the JVM so that Java experience is very very useful",
    "start": "1422559",
    "end": "1429919"
  },
  {
    "text": "but it doesn't always work out well and and my experience here is that longtime Java developers um have",
    "start": "1429919",
    "end": "1438400"
  },
  {
    "text": "the Java programming mindset and the Java programming mindset is kind of diametric diametrically opposed to the",
    "start": "1438400",
    "end": "1445120"
  },
  {
    "text": "Scola programming mindset and uh if you hire a Java programmer he will write Scala like he writes Java uh so what I",
    "start": "1445120",
    "end": "1453200"
  },
  {
    "text": "would say is if you choose to go down that path be very careful and closely",
    "start": "1453200",
    "end": "1458799"
  },
  {
    "text": "supervise and closely supervise the the developer you you end up hiring and and",
    "start": "1458799",
    "end": "1463840"
  },
  {
    "text": "don't allow him to infect your codebase because that that that has happened to",
    "start": "1463840",
    "end": "1470200"
  },
  {
    "text": "us so uh Scala unfortunately has quite a large",
    "start": "1470200",
    "end": "1476400"
  },
  {
    "text": "ramp up curve um just by itself so I used to think",
    "start": "1476400",
    "end": "1482559"
  },
  {
    "text": "that you know a developer could probably learn Scola in 6 weeks and then I bumped",
    "start": "1482559",
    "end": "1488960"
  },
  {
    "text": "that estimate to 3 months and now I'm considering bumping it up to a year to",
    "start": "1488960",
    "end": "1494240"
  },
  {
    "text": "two years um and that's to achieve you know reasonable proficiency if not be an expert in the language i think that's",
    "start": "1494240",
    "end": "1500320"
  },
  {
    "text": "much more realistic now combine Scola ramp up curve with the ramp up curve for",
    "start": "1500320",
    "end": "1507120"
  },
  {
    "text": "functional programming and and you're looking at even more time so if you hire a Java developer who's been writing",
    "start": "1507120",
    "end": "1512240"
  },
  {
    "text": "imperative code all day long then it's going to take even more time and then uh",
    "start": "1512240",
    "end": "1517520"
  },
  {
    "text": "finally uh there's there's always going to be something about your domain that's probably unique to the developers you're",
    "start": "1517520",
    "end": "1523279"
  },
  {
    "text": "hiring unless you're just hiring developers to do something that's very very common in in industry like build a",
    "start": "1523279",
    "end": "1529039"
  },
  {
    "text": "website um and that domain knowledge is is yet another source of ramping up um",
    "start": "1529039",
    "end": "1534880"
  },
  {
    "text": "and and for us the domain knowledge is database design theory and distributed",
    "start": "1534880",
    "end": "1540720"
  },
  {
    "text": "systems and concurrent programming and uh programming language design and and all these complicated things the ramp up",
    "start": "1540720",
    "end": "1548000"
  },
  {
    "text": "curve for that is measured in months to years if you add that to the scholar",
    "start": "1548000",
    "end": "1554480"
  },
  {
    "text": "ramp up curve and the functional programming rampup curve you're looking at a long long long time ramping",
    "start": "1554480",
    "end": "1561000"
  },
  {
    "text": "up so what do I recommend well first hire the Scola experts if you can",
    "start": "1561000",
    "end": "1567039"
  },
  {
    "text": "because they already know Scola they they've been through this they know how to write Scola code idiomatic and and",
    "start": "1567039",
    "end": "1572080"
  },
  {
    "text": "hopefully perform it too when necessary um now now keep in mind if if you do hire Scola experts you're still looking",
    "start": "1572080",
    "end": "1578400"
  },
  {
    "text": "at the massive domain ramp up curve for us that's massive for some other companies it's probably not going to be",
    "start": "1578400",
    "end": "1584480"
  },
  {
    "text": "a significant factor um my second choice would be if I can't get my hands on someone who's actively",
    "start": "1584480",
    "end": "1590960"
  },
  {
    "text": "programmed production Scala I'd hire a functional programming engineer now I",
    "start": "1590960",
    "end": "1596320"
  },
  {
    "text": "think the drawback is if they've used for example Okamel or Haskell or",
    "start": "1596320",
    "end": "1601760"
  },
  {
    "text": "languages which don't penalize you so heavily for functional programming then they're going to come into Scola and",
    "start": "1601760",
    "end": "1607600"
  },
  {
    "text": "just be shocked when they write relatively simple program that does not complete in the lifetime of the known",
    "start": "1607600",
    "end": "1612880"
  },
  {
    "text": "universe so but the functional programming experience will be invaluable it's an entirely different way of thinking about",
    "start": "1612880",
    "end": "1619360"
  },
  {
    "text": "solving problems that takes a while to master so the other option I' I'd say",
    "start": "1619360",
    "end": "1626000"
  },
  {
    "text": "that has actually worked pretty well for us is to hire smart but very very junior engineers who don't have a lot of real",
    "start": "1626000",
    "end": "1632320"
  },
  {
    "text": "world experience so they're smart they learn fast the biggest thing about them is that they don't have to drain",
    "start": "1632320",
    "end": "1640640"
  },
  {
    "text": "when you hire someone who's been doing Java or or um JavaScript or or whatever",
    "start": "1640640",
    "end": "1646240"
  },
  {
    "text": "imperative language it is out there they've been doing this stuff for years",
    "start": "1646240",
    "end": "1651440"
  },
  {
    "text": "in some cases 10 years hire an old Java guy you could probably find one who's been doing it since the dawn of Java and",
    "start": "1651440",
    "end": "1658559"
  },
  {
    "text": "every year that they've spent writing code in that style is another year they have to unlearn so we've actually had",
    "start": "1658559",
    "end": "1664960"
  },
  {
    "text": "good experience hiring people who have not written a lot of code at all but who are really really smart um and and we",
    "start": "1664960",
    "end": "1671919"
  },
  {
    "text": "found that the Scola ramp up is faster actually than the old Java guys",
    "start": "1671919",
    "end": "1677480"
  },
  {
    "text": "so what do I see ahead for the future well I'm really excited that supposedly um Scola 2.11 will be focused on",
    "start": "1677480",
    "end": "1684240"
  },
  {
    "text": "performance looking through the the tickets I don't see any game changers in there but still it'll be nice to have a",
    "start": "1684240",
    "end": "1690640"
  },
  {
    "text": "release that's squarely focused at improving performance because I want our team to be able to write more functional",
    "start": "1690640",
    "end": "1697600"
  },
  {
    "text": "code not just way up here but but also down here because functional code is easy to reason about easy to test fewer",
    "start": "1697600",
    "end": "1703840"
  },
  {
    "text": "bugs it's more compact easier to maintain but it's impossible to do that pervasively and consistently in Scola so",
    "start": "1703840",
    "end": "1710640"
  },
  {
    "text": "I'm really excited that that finally we're gonna have a release that's dedicated to improving performance i'm also really excited",
    "start": "1710640",
    "end": "1717840"
  },
  {
    "text": "about improvements to the JVM itself i think one of the biggest benefits is is",
    "start": "1717840",
    "end": "1724080"
  },
  {
    "text": "just going to be lambdas in Java because over time that's going to yield lots of",
    "start": "1724080",
    "end": "1731279"
  },
  {
    "text": "libraries using lambdas which will in turn uh lead to performance problems in",
    "start": "1731279",
    "end": "1736480"
  },
  {
    "text": "Java and performance problems in Scala like no one really pays attention there's not a lot of money behind that",
    "start": "1736480",
    "end": "1742399"
  },
  {
    "text": "but performance problems in Java are going to put serious money behind the effort to make that faster so I think",
    "start": "1742399",
    "end": "1749200"
  },
  {
    "text": "lambdas in Java is quite possibly the best thing that can happen for for Scola's own performance in the long run",
    "start": "1749200",
    "end": "1755840"
  },
  {
    "text": "obviously we're getting stuff like method handles we may or may not be getting fixed noms um and and I hope at",
    "start": "1755840",
    "end": "1762640"
  },
  {
    "text": "some point a lot of uh Java guys are are certainly aware of the problem with",
    "start": "1762640",
    "end": "1768000"
  },
  {
    "text": "megamorphic and lining and or or the impossibility of doing that on the JVM right now and at some point that's going",
    "start": "1768000",
    "end": "1774799"
  },
  {
    "text": "to be addressed I would hope especially with the introduction of lambdas to the JVM",
    "start": "1774799",
    "end": "1779919"
  },
  {
    "text": "so macros also are really really interesting that's something that we can use today with Scollet 210 because with",
    "start": "1779919",
    "end": "1786159"
  },
  {
    "text": "macros you can do basically code generation at compile time and what that allows you to do is for things that have",
    "start": "1786159",
    "end": "1793840"
  },
  {
    "text": "an efficient solution they just have lots of boilerplate and perhaps imperative design you can factor that",
    "start": "1793840",
    "end": "1799120"
  },
  {
    "text": "out into a macro which is you know as cleanly written and as purely functional as you write as you like and then you",
    "start": "1799120",
    "end": "1805840"
  },
  {
    "text": "can generate that imperative boilerplate code that's very very highly optimized",
    "start": "1805840",
    "end": "1811120"
  },
  {
    "text": "um at compile time which is very very interesting and we expect we're not on on 210 yet but we we will be in the near",
    "start": "1811120",
    "end": "1818399"
  },
  {
    "text": "future and we expect to heavily make use of macros for performance optimization and another thing I'm I'm",
    "start": "1818399",
    "end": "1825440"
  },
  {
    "text": "keeping an eye on is uh an effect system because I don't know honestly if in the",
    "start": "1825440",
    "end": "1830960"
  },
  {
    "text": "next 5 years Scola will be so performant that you can use arbitrary levels of",
    "start": "1830960",
    "end": "1836799"
  },
  {
    "text": "monad transformers at the level of your inner loop um I'm",
    "start": "1836799",
    "end": "1842279"
  },
  {
    "text": "more more uh hopeful that the work that's being done around a Scola and effect system would would allow us to uh",
    "start": "1842279",
    "end": "1850080"
  },
  {
    "text": "tag methods as having particular effects and this not incur runtime overhead but",
    "start": "1850080",
    "end": "1855200"
  },
  {
    "text": "provide some not all but a little bit of the benefit of using monads and monad",
    "start": "1855200",
    "end": "1861200"
  },
  {
    "text": "transformers okay so some code to play around with copy down that URL if you",
    "start": "1864200",
    "end": "1870159"
  },
  {
    "text": "can uh yeah uh the first part of it's easy it's",
    "start": "1870159",
    "end": "1876240"
  },
  {
    "text": "just.github.com/jdgo um and then there's a number at the end there",
    "start": "1877159",
    "end": "1882240"
  },
  {
    "text": "4739573 uh also check us out on the web at precog.com um you can learn more about",
    "start": "1882279",
    "end": "1887919"
  },
  {
    "text": "the precog platform okay so we are out of time um I want to thank you uh please",
    "start": "1887919",
    "end": "1893039"
  },
  {
    "text": "do check out that code in particular pay attention to that join signature because it illustrates how if you think about a",
    "start": "1893039",
    "end": "1898480"
  },
  {
    "text": "problem differently you can actually completely change the performance characteristics of code in Scola thank",
    "start": "1898480",
    "end": "1903840"
  },
  {
    "text": "you very much",
    "start": "1903840",
    "end": "1907158"
  },
  {
    "text": "[Music]",
    "start": "1910840",
    "end": "1913960"
  }
]