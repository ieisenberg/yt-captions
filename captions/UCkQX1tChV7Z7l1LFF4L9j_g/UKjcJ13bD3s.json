[
  {
    "text": "[Music]",
    "start": "1430",
    "end": "12759"
  },
  {
    "text": "oh here we go all right yay here what is",
    "start": "12759",
    "end": "15639"
  },
  {
    "text": "asynchronous programming we're going to",
    "start": "15639",
    "end": "17279"
  },
  {
    "text": "talk about sequencing and forking and",
    "start": "17279",
    "end": "18920"
  },
  {
    "text": "testing synchronously okay so there's",
    "start": "18920",
    "end": "21920"
  },
  {
    "text": "two points to this talk one is General",
    "start": "21920",
    "end": "23680"
  },
  {
    "text": "patterns around how to use Scala Futures",
    "start": "23680",
    "end": "26119"
  },
  {
    "text": "and what those patterns are named and",
    "start": "26119",
    "end": "28160"
  },
  {
    "text": "functional programming uh those patterns",
    "start": "28160",
    "end": "30439"
  },
  {
    "text": "actually have far greater impact than",
    "start": "30439",
    "end": "32398"
  },
  {
    "text": "we're going to talk about today um we're",
    "start": "32399",
    "end": "34440"
  },
  {
    "text": "going to just talk about them in context",
    "start": "34440",
    "end": "35920"
  },
  {
    "text": "of Futures uh the testing synchronous Le",
    "start": "35920",
    "end": "39079"
  },
  {
    "text": "bit we might not get to so who am I uh",
    "start": "39079",
    "end": "42440"
  },
  {
    "text": "already said that yay okay this is an a",
    "start": "42440",
    "end": "45960"
  },
  {
    "text": "series of talks I like to call the new",
    "start": "45960",
    "end": "47440"
  },
  {
    "text": "web this these are like the the you know",
    "start": "47440",
    "end": "50160"
  },
  {
    "text": "buzzwords you're going to hear okay",
    "start": "50160",
    "end": "51680"
  },
  {
    "text": "today's talk talks about doing event",
    "start": "51680",
    "end": "53960"
  },
  {
    "text": "driven asynchronous composition of",
    "start": "53960",
    "end": "55840"
  },
  {
    "text": "services all right the basic gist of",
    "start": "55840",
    "end": "57879"
  },
  {
    "text": "this talk is we have a uh",
    "start": "57879",
    "end": "60800"
  },
  {
    "text": "we have a big stack Trace never",
    "start": "60800",
    "end": "63280"
  },
  {
    "text": "mind okay that's because my network I",
    "start": "63280",
    "end": "66479"
  },
  {
    "text": "think uh this is I uh the source code is",
    "start": "66479",
    "end": "69640"
  },
  {
    "text": "under jet inro to FP if you want to take",
    "start": "69640",
    "end": "72479"
  },
  {
    "text": "a look um the source code is an",
    "start": "72479",
    "end": "75439"
  },
  {
    "text": "application that goes and grabs a bunch",
    "start": "75439",
    "end": "77280"
  },
  {
    "text": "of data from GitHub we're aggregating a",
    "start": "77280",
    "end": "79759"
  },
  {
    "text": "bunch of different calls okay we have an",
    "start": "79759",
    "end": "81960"
  },
  {
    "text": "asynchronous we're using dispatch datab",
    "start": "81960",
    "end": "83960"
  },
  {
    "text": "binder dispatch by Nathan one of the",
    "start": "83960",
    "end": "85400"
  },
  {
    "text": "organizers of the conference um to",
    "start": "85400",
    "end": "87799"
  },
  {
    "text": "asynchronously grab data out of GitHub",
    "start": "87799",
    "end": "90119"
  },
  {
    "text": "and we make several calls and we want to",
    "start": "90119",
    "end": "91920"
  },
  {
    "text": "make a aggregate service that is still",
    "start": "91920",
    "end": "95720"
  },
  {
    "text": "asynchronous you know that is still",
    "start": "95720",
    "end": "97320"
  },
  {
    "text": "deferred in the future and that's",
    "start": "97320",
    "end": "99320"
  },
  {
    "text": "essentially what the source code is",
    "start": "99320",
    "end": "100439"
  },
  {
    "text": "doing we're going to go through the",
    "start": "100439",
    "end": "101399"
  },
  {
    "text": "patterns of how you aggregate other",
    "start": "101399",
    "end": "103360"
  },
  {
    "text": "asynchronous services to create a new",
    "start": "103360",
    "end": "105200"
  },
  {
    "text": "asynchronous flow all right what is",
    "start": "105200",
    "end": "108680"
  },
  {
    "text": "asynchronicity it's not as crazy as it",
    "start": "108680",
    "end": "111159"
  },
  {
    "text": "seems it's just a operation happens upon",
    "start": "111159",
    "end": "113600"
  },
  {
    "text": "receip of an indication all right",
    "start": "113600",
    "end": "116119"
  },
  {
    "text": "there's nothing magic about asynchronous",
    "start": "116119",
    "end": "117680"
  },
  {
    "text": "code asynchronous you can have something",
    "start": "117680",
    "end": "119479"
  },
  {
    "text": "that's a synchronous and is terribly",
    "start": "119479",
    "end": "120799"
  },
  {
    "text": "unperformed asynchronous is not special",
    "start": "120799",
    "end": "122719"
  },
  {
    "text": "scaling sauce it's just after something",
    "start": "122719",
    "end": "125479"
  },
  {
    "text": "happens I do something else okay so for",
    "start": "125479",
    "end": "128720"
  },
  {
    "text": "example this is asynchronous I want the",
    "start": "128720",
    "end": "131680"
  },
  {
    "text": "datas I have my serlet thread that then",
    "start": "131680",
    "end": "134280"
  },
  {
    "text": "the the user tells me he wants the data",
    "start": "134280",
    "end": "136720"
  },
  {
    "text": "um I go and make a jdbc call he hits the",
    "start": "136720",
    "end": "139080"
  },
  {
    "text": "database that comes back to the jdbc",
    "start": "139080",
    "end": "141080"
  },
  {
    "text": "connection thread and that comes back to",
    "start": "141080",
    "end": "142360"
  },
  {
    "text": "my Ser thread and I tell the user I",
    "start": "142360",
    "end": "144840"
  },
  {
    "text": "block two threads for a pretty long time",
    "start": "144840",
    "end": "147280"
  },
  {
    "text": "during this process but it's",
    "start": "147280",
    "end": "148440"
  },
  {
    "text": "asynchronous right the runs on receipt",
    "start": "148440",
    "end": "151480"
  },
  {
    "text": "of some signal you know the database was",
    "start": "151480",
    "end": "153400"
  },
  {
    "text": "ready but I'm still blocking the thread",
    "start": "153400",
    "end": "154879"
  },
  {
    "text": "so that's bad what we want to do in",
    "start": "154879",
    "end": "156680"
  },
  {
    "text": "Scola is called asynchronous and",
    "start": "156680",
    "end": "158760"
  },
  {
    "text": "non-blocking okay that's the key is both",
    "start": "158760",
    "end": "160959"
  },
  {
    "text": "of them we the assumption is if I give",
    "start": "160959",
    "end": "164000"
  },
  {
    "text": "up the thread and let somebody else use",
    "start": "164000",
    "end": "165640"
  },
  {
    "text": "it they're going to make better use than",
    "start": "165640",
    "end": "167360"
  },
  {
    "text": "me just holding on to it because this",
    "start": "167360",
    "end": "169959"
  },
  {
    "text": "query will take a while okay it's it's",
    "start": "169959",
    "end": "172519"
  },
  {
    "text": "somewhere else um that's the general",
    "start": "172519",
    "end": "174920"
  },
  {
    "text": "assumption uh in terms of when this",
    "start": "174920",
    "end": "177400"
  },
  {
    "text": "practice is good okay all right",
    "start": "177400",
    "end": "181200"
  },
  {
    "text": "those are the points in time where",
    "start": "181200",
    "end": "182840"
  },
  {
    "text": "somebody else can use my thread so in",
    "start": "182840",
    "end": "185720"
  },
  {
    "text": "schola's future we can define a future",
    "start": "185720",
    "end": "187920"
  },
  {
    "text": "it's a lot simpler than in Java we just",
    "start": "187920",
    "end": "189680"
  },
  {
    "text": "say future and then a block of code and",
    "start": "189680",
    "end": "191400"
  },
  {
    "text": "that block of code will execute sometime",
    "start": "191400",
    "end": "193400"
  },
  {
    "text": "later and we'll get basically",
    "start": "193400",
    "end": "196040"
  },
  {
    "text": "notifications when it's done we can",
    "start": "196040",
    "end": "198200"
  },
  {
    "text": "chain new operations asynchronously on",
    "start": "198200",
    "end": "200640"
  },
  {
    "text": "it so I can say map I can take the",
    "start": "200640",
    "end": "203720"
  },
  {
    "text": "previous value and I can get a new value",
    "start": "203720",
    "end": "208280"
  },
  {
    "text": "after that I can put a computation to",
    "start": "208280",
    "end": "210560"
  },
  {
    "text": "run after the first value is done",
    "start": "210560",
    "end": "212159"
  },
  {
    "text": "Computing somewhere else the",
    "start": "212159",
    "end": "214200"
  },
  {
    "text": "asynchronous piece is this chaining this",
    "start": "214200",
    "end": "216680"
  },
  {
    "text": "take the previous value and do something",
    "start": "216680",
    "end": "218360"
  },
  {
    "text": "else with it the non-blocking piece is",
    "start": "218360",
    "end": "220840"
  },
  {
    "text": "that Futures go off and do something",
    "start": "220840",
    "end": "222319"
  },
  {
    "text": "somewhere else and my current thread can",
    "start": "222319",
    "end": "223799"
  },
  {
    "text": "do something okay all right so why not",
    "start": "223799",
    "end": "227720"
  },
  {
    "text": "use Java's Futures instead of scalas you",
    "start": "227720",
    "end": "229879"
  },
  {
    "text": "know Java has a future",
    "start": "229879",
    "end": "231879"
  },
  {
    "text": "right um yeah no",
    "start": "231879",
    "end": "235000"
  },
  {
    "text": "uh here's here's a really good example",
    "start": "235000",
    "end": "237799"
  },
  {
    "text": "just creating a future uh the difference",
    "start": "237799",
    "end": "239840"
  },
  {
    "text": "between Scala and Java is kind of",
    "start": "239840",
    "end": "241760"
  },
  {
    "text": "intense but more importantly it's about",
    "start": "241760",
    "end": "244200"
  },
  {
    "text": "chaining okay it's about asynchronously",
    "start": "244200",
    "end": "246840"
  },
  {
    "text": "chaining behavior and ending up with a",
    "start": "246840",
    "end": "249079"
  },
  {
    "text": "future at the end okay it's it's the",
    "start": "249079",
    "end": "251720"
  },
  {
    "text": "ability to define a flow of computation",
    "start": "251720",
    "end": "255519"
  },
  {
    "text": "in your program and have that be",
    "start": "255519",
    "end": "257880"
  },
  {
    "text": "asynchronous and really the goal is",
    "start": "257880",
    "end": "260079"
  },
  {
    "text": "never having to block never having to",
    "start": "260079",
    "end": "262479"
  },
  {
    "text": "get the value out of the future if you",
    "start": "262479",
    "end": "263800"
  },
  {
    "text": "can help it that's what you want so um",
    "start": "263800",
    "end": "268000"
  },
  {
    "text": "we're going to talk about sequencing",
    "start": "268000",
    "end": "269280"
  },
  {
    "text": "which is map and Flat map uh from",
    "start": "269280",
    "end": "271479"
  },
  {
    "text": "functional programming we're going to",
    "start": "271479",
    "end": "272759"
  },
  {
    "text": "talk about joining which is zip and",
    "start": "272759",
    "end": "274199"
  },
  {
    "text": "Traverse okay so let's talk a little",
    "start": "274199",
    "end": "277320"
  },
  {
    "text": "about sequencing let's say I'm",
    "start": "277320",
    "end": "278800"
  },
  {
    "text": "developing say a web framework okay and",
    "start": "278800",
    "end": "282000"
  },
  {
    "text": "I have an asynchronous uh API to my data",
    "start": "282000",
    "end": "284919"
  },
  {
    "text": "store so I'm using Mongo's async driver",
    "start": "284919",
    "end": "287360"
  },
  {
    "text": "or I'm using the postgress async driver",
    "start": "287360",
    "end": "289800"
  },
  {
    "text": "I'm not using jdbc okay that's that's",
    "start": "289800",
    "end": "293039"
  },
  {
    "text": "key jdbc is not asynchronous um so uh I",
    "start": "293039",
    "end": "297840"
  },
  {
    "text": "execute my query and I get back a future",
    "start": "297840",
    "end": "300039"
  },
  {
    "text": "database result and then I want to take",
    "start": "300039",
    "end": "302160"
  },
  {
    "text": "that result and I want to do something",
    "start": "302160",
    "end": "303400"
  },
  {
    "text": "else with it so I map it I take I map",
    "start": "303400",
    "end": "306520"
  },
  {
    "text": "the data that I get back from the query",
    "start": "306520",
    "end": "308800"
  },
  {
    "text": "and I generate some HTML now I have",
    "start": "308800",
    "end": "311600"
  },
  {
    "text": "future HTML that future HTML is done",
    "start": "311600",
    "end": "314600"
  },
  {
    "text": "after the query is done and after the",
    "start": "314600",
    "end": "316000"
  },
  {
    "text": "HTML has been rendered and it happens on",
    "start": "316000",
    "end": "318120"
  },
  {
    "text": "some other thread I don't care when",
    "start": "318120",
    "end": "320280"
  },
  {
    "text": "that's done I need to write it out to",
    "start": "320280",
    "end": "321479"
  },
  {
    "text": "the socket so again I map it when this",
    "start": "321479",
    "end": "323919"
  },
  {
    "text": "is done go run this code okay write it",
    "start": "323919",
    "end": "327160"
  },
  {
    "text": "out to the socket and the socket I get",
    "start": "327160",
    "end": "329319"
  },
  {
    "text": "essent",
    "start": "329319",
    "end": "330360"
  },
  {
    "text": "um in the handle request method we'll",
    "start": "330360",
    "end": "332120"
  },
  {
    "text": "assume that so if you look here I have a",
    "start": "332120",
    "end": "334479"
  },
  {
    "text": "flow of Futures I never actually get the",
    "start": "334479",
    "end": "336880"
  },
  {
    "text": "result out of the future but I still",
    "start": "336880",
    "end": "338720"
  },
  {
    "text": "accomplish an endtoend goal of",
    "start": "338720",
    "end": "340479"
  },
  {
    "text": "computation okay Futures are a way of um",
    "start": "340479",
    "end": "344919"
  },
  {
    "text": "flowing together computation it's",
    "start": "344919",
    "end": "346840"
  },
  {
    "text": "basically a",
    "start": "346840",
    "end": "348479"
  },
  {
    "text": "runtime all right let's say I refactor",
    "start": "348479",
    "end": "352120"
  },
  {
    "text": "My Method now that's that's what map is",
    "start": "352120",
    "end": "354720"
  },
  {
    "text": "essentially after one future is done I",
    "start": "354720",
    "end": "356520"
  },
  {
    "text": "have a computation I run with its result",
    "start": "356520",
    "end": "358440"
  },
  {
    "text": "and do some more stuff let's say I",
    "start": "358440",
    "end": "360440"
  },
  {
    "text": "refactor though and I I make my render",
    "start": "360440",
    "end": "362199"
  },
  {
    "text": "method and my render method has to go",
    "start": "362199",
    "end": "363840"
  },
  {
    "text": "off and do some other complicated things",
    "start": "363840",
    "end": "365560"
  },
  {
    "text": "that it needs to do using Futures",
    "start": "365560",
    "end": "367919"
  },
  {
    "text": "because it's going to you know defer",
    "start": "367919",
    "end": "369440"
  },
  {
    "text": "some calculations until something's",
    "start": "369440",
    "end": "371840"
  },
  {
    "text": "done uh so my render method now returns",
    "start": "371840",
    "end": "374319"
  },
  {
    "text": "a future of HTML all right so after I",
    "start": "374319",
    "end": "377199"
  },
  {
    "text": "get my database query here I'm going to",
    "start": "377199",
    "end": "380479"
  },
  {
    "text": "call map on the result and and render it",
    "start": "380479",
    "end": "383599"
  },
  {
    "text": "but what do I get back for map I get",
    "start": "383599",
    "end": "386360"
  },
  {
    "text": "back a future of future HTML",
    "start": "386360",
    "end": "389960"
  },
  {
    "text": "it's nested if I want to I can't you",
    "start": "389960",
    "end": "393319"
  },
  {
    "text": "know I have to defer into the future",
    "start": "393319",
    "end": "395440"
  },
  {
    "text": "then defer into the future so these",
    "start": "395440",
    "end": "397080"
  },
  {
    "text": "nested maps and everything it's really",
    "start": "397080",
    "end": "398520"
  },
  {
    "text": "really ugly we have a solution for that",
    "start": "398520",
    "end": "401440"
  },
  {
    "text": "it's called flat map okay for those who",
    "start": "401440",
    "end": "404120"
  },
  {
    "text": "are unfamiliar with with the scholars",
    "start": "404120",
    "end": "406560"
  },
  {
    "text": "collections",
    "start": "406560",
    "end": "408280"
  },
  {
    "text": "um flat map is is used in there if",
    "start": "408280",
    "end": "411400"
  },
  {
    "text": "you're unfamiliar with this concept",
    "start": "411400",
    "end": "412800"
  },
  {
    "text": "essentially what you're doing is you are",
    "start": "412800",
    "end": "414880"
  },
  {
    "text": "flattening and mapping at the same time",
    "start": "414880",
    "end": "417039"
  },
  {
    "text": "where flattening is if I have a future",
    "start": "417039",
    "end": "420199"
  },
  {
    "text": "of future of a I get back a future of a",
    "start": "420199",
    "end": "423120"
  },
  {
    "text": "if I have say a list of list of a uh",
    "start": "423120",
    "end": "426080"
  },
  {
    "text": "flattening gives me back just a single",
    "start": "426080",
    "end": "428080"
  },
  {
    "text": "list with all of those lists aggregated",
    "start": "428080",
    "end": "430160"
  },
  {
    "text": "together um with Futures it's a little",
    "start": "430160",
    "end": "432360"
  },
  {
    "text": "bit different it's just a way of saying",
    "start": "432360",
    "end": "434240"
  },
  {
    "text": "when the inner one is done you know I",
    "start": "434240",
    "end": "436280"
  },
  {
    "text": "want that guy not the outer one okay",
    "start": "436280",
    "end": "439759"
  },
  {
    "text": "does",
    "start": "439759",
    "end": "440919"
  },
  {
    "text": "that I know I'm talking fast but we're",
    "start": "440919",
    "end": "443120"
  },
  {
    "text": "like five minutes behind sorry guys okay",
    "start": "443120",
    "end": "445479"
  },
  {
    "text": "so flat map fixes the type signature so",
    "start": "445479",
    "end": "447919"
  },
  {
    "text": "now I can delegate to a another",
    "start": "447919",
    "end": "451199"
  },
  {
    "text": "asynchronous method so if I'm chaining a",
    "start": "451199",
    "end": "453000"
  },
  {
    "text": "set of asynchronous methods where I take",
    "start": "453000",
    "end": "454879"
  },
  {
    "text": "in some input get a future of something",
    "start": "454879",
    "end": "457360"
  },
  {
    "text": "I'm using map and Flat map okay to chain",
    "start": "457360",
    "end": "460080"
  },
  {
    "text": "these things in Scala we have syntactic",
    "start": "460080",
    "end": "463000"
  },
  {
    "text": "sugar for that it's called a four",
    "start": "463000",
    "end": "465199"
  },
  {
    "text": "expression so just like a collection I",
    "start": "465199",
    "end": "467919"
  },
  {
    "text": "can use a for expression and say for the",
    "start": "467919",
    "end": "470159"
  },
  {
    "text": "data I get from the asynchronous query",
    "start": "470159",
    "end": "473400"
  },
  {
    "text": "uh call render with that data and then",
    "start": "473400",
    "end": "475520"
  },
  {
    "text": "give me the HTML back and then yield you",
    "start": "475520",
    "end": "478680"
  },
  {
    "text": "know find finally go write out the HTML",
    "start": "478680",
    "end": "482039"
  },
  {
    "text": "all right using four Expressions it's",
    "start": "482039",
    "end": "485319"
  },
  {
    "text": "akin to what you do with collections you",
    "start": "485319",
    "end": "487080"
  },
  {
    "text": "can think of Futures is a collection of",
    "start": "487080",
    "end": "488479"
  },
  {
    "text": "just one element and if I iterate over",
    "start": "488479",
    "end": "490599"
  },
  {
    "text": "it I'm essentially waiting until that",
    "start": "490599",
    "end": "492879"
  },
  {
    "text": "future is done to execute code okay um",
    "start": "492879",
    "end": "496560"
  },
  {
    "text": "but this is essentially How We Do future",
    "start": "496560",
    "end": "498720"
  },
  {
    "text": "flow in terms of um",
    "start": "498720",
    "end": "501400"
  },
  {
    "text": "sequencing the query has to return first",
    "start": "501400",
    "end": "504919"
  },
  {
    "text": "before I can call render that's key here",
    "start": "504919",
    "end": "508599"
  },
  {
    "text": "render does not get called until the",
    "start": "508599",
    "end": "510159"
  },
  {
    "text": "query is finished I'm not doing two",
    "start": "510159",
    "end": "511879"
  },
  {
    "text": "things at the same time I'm doing this",
    "start": "511879",
    "end": "513800"
  },
  {
    "text": "and then this and then this okay monatic",
    "start": "513800",
    "end": "517479"
  },
  {
    "text": "flow is kind of what I'm calling this",
    "start": "517479",
    "end": "520518"
  },
  {
    "text": "the fact that we can do this is because",
    "start": "520519",
    "end": "522320"
  },
  {
    "text": "we have a monad against futures for",
    "start": "522320",
    "end": "524760"
  },
  {
    "text": "those of you who aren't familiar with",
    "start": "524760",
    "end": "525760"
  },
  {
    "text": "monad it's a really funny term um comes",
    "start": "525760",
    "end": "528080"
  },
  {
    "text": "from category Theory we'll talk about",
    "start": "528080",
    "end": "529480"
  },
  {
    "text": "that specifically but there's",
    "start": "529480",
    "end": "530560"
  },
  {
    "text": "essentially an interface on future that",
    "start": "530560",
    "end": "532800"
  },
  {
    "text": "allows us to use four expressions in",
    "start": "532800",
    "end": "534680"
  },
  {
    "text": "this style okay and this is a flow a",
    "start": "534680",
    "end": "537120"
  },
  {
    "text": "sequence of operations monads are",
    "start": "537120",
    "end": "539040"
  },
  {
    "text": "actually more powerful than just",
    "start": "539040",
    "end": "540240"
  },
  {
    "text": "defining flows but that's what this",
    "start": "540240",
    "end": "542240"
  },
  {
    "text": "pattern is",
    "start": "542240",
    "end": "543959"
  },
  {
    "text": "okay so what is it I have a series of op",
    "start": "543959",
    "end": "547279"
  },
  {
    "text": "operations I need to run okay I can run",
    "start": "547279",
    "end": "549720"
  },
  {
    "text": "them inside of a future modad I can run",
    "start": "549720",
    "end": "552079"
  },
  {
    "text": "inside in a synchronous um I can run",
    "start": "552079",
    "end": "554920"
  },
  {
    "text": "them inside of a collection so that is",
    "start": "554920",
    "end": "557200"
  },
  {
    "text": "where I have a collection of things and",
    "start": "557200",
    "end": "558640"
  },
  {
    "text": "another collection of things and I'm",
    "start": "558640",
    "end": "560440"
  },
  {
    "text": "digging into collections like a tree all",
    "start": "560440",
    "end": "562680"
  },
  {
    "text": "right um have you used it before anytime",
    "start": "562680",
    "end": "565399"
  },
  {
    "text": "you use four Expressions you're using",
    "start": "565399",
    "end": "567360"
  },
  {
    "text": "this concept what I'm trying to show you",
    "start": "567360",
    "end": "569519"
  },
  {
    "text": "is that it's not four expressions are",
    "start": "569519",
    "end": "571079"
  },
  {
    "text": "not just about collections it's about",
    "start": "571079",
    "end": "574040"
  },
  {
    "text": "computations",
    "start": "574040",
    "end": "575560"
  },
  {
    "text": "okay all right so if you have map and",
    "start": "575560",
    "end": "578880"
  },
  {
    "text": "Flat map and some sort of factory method",
    "start": "578880",
    "end": "580519"
  },
  {
    "text": "that's all you need to use this pattern",
    "start": "580519",
    "end": "582079"
  },
  {
    "text": "that's the basic of it it's really",
    "start": "582079",
    "end": "584320"
  },
  {
    "text": "really lowlevel and",
    "start": "584320",
    "end": "586320"
  },
  {
    "text": "Abstract all right now let's talk about",
    "start": "586320",
    "end": "588200"
  },
  {
    "text": "joining because this is more exciting",
    "start": "588200",
    "end": "589880"
  },
  {
    "text": "this is when we actually can compose",
    "start": "589880",
    "end": "591440"
  },
  {
    "text": "Services all right if I have uh a query",
    "start": "591440",
    "end": "594800"
  },
  {
    "text": "to go get the users and a query to go",
    "start": "594800",
    "end": "596279"
  },
  {
    "text": "get projects because say I'm GitHub or",
    "start": "596279",
    "end": "598839"
  },
  {
    "text": "something um and I want to join these",
    "start": "598839",
    "end": "600680"
  },
  {
    "text": "two things",
    "start": "600680",
    "end": "601800"
  },
  {
    "text": "together um I use what's called zip all",
    "start": "601800",
    "end": "605480"
  },
  {
    "text": "right so let's take a look at what zip",
    "start": "605480",
    "end": "608160"
  },
  {
    "text": "is if I take users and projects I have a",
    "start": "608160",
    "end": "610839"
  },
  {
    "text": "future result for both and I zip them",
    "start": "610839",
    "end": "613200"
  },
  {
    "text": "together I get back a tuple where the",
    "start": "613200",
    "end": "616320"
  },
  {
    "text": "left hand side is the one query result",
    "start": "616320",
    "end": "618760"
  },
  {
    "text": "and the right hand side is the other",
    "start": "618760",
    "end": "619760"
  },
  {
    "text": "query result okay looks like that joins",
    "start": "619760",
    "end": "623959"
  },
  {
    "text": "them together into a single future so",
    "start": "623959",
    "end": "626959"
  },
  {
    "text": "they both execute concurrently at the",
    "start": "626959",
    "end": "628959"
  },
  {
    "text": "same time time possibly depending on how",
    "start": "628959",
    "end": "631200"
  },
  {
    "text": "many cores I have and how many are",
    "start": "631200",
    "end": "632279"
  },
  {
    "text": "available but they they could",
    "start": "632279",
    "end": "634079"
  },
  {
    "text": "potentially run at the same time and",
    "start": "634079",
    "end": "635639"
  },
  {
    "text": "then when they're both done this new",
    "start": "635639",
    "end": "636839"
  },
  {
    "text": "future is complete so it's how I take",
    "start": "636839",
    "end": "639560"
  },
  {
    "text": "two different flows and join them",
    "start": "639560",
    "end": "642519"
  },
  {
    "text": "together okay so that's",
    "start": "642519",
    "end": "646000"
  },
  {
    "text": "zip um in in the",
    "start": "646000",
    "end": "648440"
  },
  {
    "text": "actual uh the pattern we're going to",
    "start": "648440",
    "end": "650639"
  },
  {
    "text": "call It's It has a completely different",
    "start": "650639",
    "end": "652760"
  },
  {
    "text": "method signature but for now zip is",
    "start": "652760",
    "end": "655480"
  },
  {
    "text": "efficient enough for us okay what about",
    "start": "655480",
    "end": "659000"
  },
  {
    "text": "colle CS let's say I have a list of",
    "start": "659000",
    "end": "662000"
  },
  {
    "text": "things that I'm doing sometime in the",
    "start": "662000",
    "end": "663839"
  },
  {
    "text": "future and I want to get back HTML so I",
    "start": "663839",
    "end": "666680"
  },
  {
    "text": "have a list of database results I have",
    "start": "666680",
    "end": "668240"
  },
  {
    "text": "to execute and I want to join all those",
    "start": "668240",
    "end": "670880"
  },
  {
    "text": "together and get back a single HTML in",
    "start": "670880",
    "end": "672720"
  },
  {
    "text": "the future sometime",
    "start": "672720",
    "end": "675120"
  },
  {
    "text": "okay well this is what's known as a fork",
    "start": "675120",
    "end": "677519"
  },
  {
    "text": "join okay I have a set of collections I",
    "start": "677519",
    "end": "680399"
  },
  {
    "text": "have a set of asynchronous operations",
    "start": "680399",
    "end": "682399"
  },
  {
    "text": "that are running on each of those items",
    "start": "682399",
    "end": "684480"
  },
  {
    "text": "and when it's all done I join back",
    "start": "684480",
    "end": "686399"
  },
  {
    "text": "together so the components I have is I",
    "start": "686399",
    "end": "688800"
  },
  {
    "text": "have a list of things an async operation",
    "start": "688800",
    "end": "691480"
  },
  {
    "text": "that takes one of those items and",
    "start": "691480",
    "end": "693440"
  },
  {
    "text": "returns a future thing and I want to get",
    "start": "693440",
    "end": "696000"
  },
  {
    "text": "a futured list okay if I'm using map and",
    "start": "696000",
    "end": "699519"
  },
  {
    "text": "Flat map it looks kind of weird um but",
    "start": "699519",
    "end": "702920"
  },
  {
    "text": "there's this handy thing in AA called or",
    "start": "702920",
    "end": "705200"
  },
  {
    "text": "in the future API sorry called Traverse",
    "start": "705200",
    "end": "708160"
  },
  {
    "text": "all right Traverse iterates over the",
    "start": "708160",
    "end": "710240"
  },
  {
    "text": "queries takes an asynchronous yeah it",
    "start": "710240",
    "end": "712519"
  },
  {
    "text": "takes the queries which is your",
    "start": "712519",
    "end": "714279"
  },
  {
    "text": "list an asynchronous operation which is",
    "start": "714279",
    "end": "717200"
  },
  {
    "text": "for every query I go run it and I get",
    "start": "717200",
    "end": "719000"
  },
  {
    "text": "back a future query result and it's",
    "start": "719000",
    "end": "721639"
  },
  {
    "text": "going to give me back a future list of",
    "start": "721639",
    "end": "724680"
  },
  {
    "text": "all the results okay that's what",
    "start": "724680",
    "end": "726920"
  },
  {
    "text": "Traverse does the method signature for",
    "start": "726920",
    "end": "729320"
  },
  {
    "text": "that sucker looks really really painful",
    "start": "729320",
    "end": "731839"
  },
  {
    "text": "when you first hit it but that's",
    "start": "731839",
    "end": "733320"
  },
  {
    "text": "essentially all it is I have a list I",
    "start": "733320",
    "end": "736079"
  },
  {
    "text": "have an asynchronous operation or an",
    "start": "736079",
    "end": "738079"
  },
  {
    "text": "operation within a",
    "start": "738079",
    "end": "739760"
  },
  {
    "text": "context and I want to get back a list of",
    "start": "739760",
    "end": "743199"
  },
  {
    "text": "things inside of my context",
    "start": "743199",
    "end": "746079"
  },
  {
    "text": "okay so um zip is essentially an",
    "start": "746079",
    "end": "750240"
  },
  {
    "text": "applicative funter if you have an",
    "start": "750240",
    "end": "751839"
  },
  {
    "text": "applicative functor you have a zip",
    "start": "751839",
    "end": "753320"
  },
  {
    "text": "operation not necessarily vice versa but",
    "start": "753320",
    "end": "756600"
  },
  {
    "text": "anyway um so this pattern that we're",
    "start": "756600",
    "end": "760160"
  },
  {
    "text": "using here is I have a set of operations",
    "start": "760160",
    "end": "762279"
  },
  {
    "text": "that I need to run and then when they",
    "start": "762279",
    "end": "764959"
  },
  {
    "text": "all of them are complete I have a",
    "start": "764959",
    "end": "766480"
  },
  {
    "text": "joining",
    "start": "766480",
    "end": "767720"
  },
  {
    "text": "operation to to uh you know combine the",
    "start": "767720",
    "end": "771000"
  },
  {
    "text": "values from those initial operations",
    "start": "771000",
    "end": "773160"
  },
  {
    "text": "okay so I essentially have an as cyclic",
    "start": "773160",
    "end": "776120"
  },
  {
    "text": "graph of things to do how many of you",
    "start": "776120",
    "end": "779399"
  },
  {
    "text": "guys are familiar with required",
    "start": "779399",
    "end": "781279"
  },
  {
    "text": "JS anyone okay for those of you familiar",
    "start": "781279",
    "end": "784360"
  },
  {
    "text": "requirejs is the simplest example of",
    "start": "784360",
    "end": "786920"
  },
  {
    "text": "applicative functors I have a set of",
    "start": "786920",
    "end": "789720"
  },
  {
    "text": "dependencies of of of JavaScript modules",
    "start": "789720",
    "end": "793120"
  },
  {
    "text": "um that I depend on when I Define a new",
    "start": "793120",
    "end": "794880"
  },
  {
    "text": "one and once those are all initialized",
    "start": "794880",
    "end": "797000"
  },
  {
    "text": "it calls the function that initializes",
    "start": "797000",
    "end": "798959"
  },
  {
    "text": "me and I get each of those modules in as",
    "start": "798959",
    "end": "801480"
  },
  {
    "text": "an argument that's what requirejs does",
    "start": "801480",
    "end": "804240"
  },
  {
    "text": "that's what applicative functors are",
    "start": "804240",
    "end": "805920"
  },
  {
    "text": "okay and that's just a way of defining",
    "start": "805920",
    "end": "807959"
  },
  {
    "text": "load order well what else looks kind of",
    "start": "807959",
    "end": "810360"
  },
  {
    "text": "like required JS Springs Bean container",
    "start": "810360",
    "end": "813120"
  },
  {
    "text": "crap is kind of like required JS if you",
    "start": "813120",
    "end": "816320"
  },
  {
    "text": "will it handles initialization order",
    "start": "816320",
    "end": "818040"
  },
  {
    "text": "that's this pattern of you know joining",
    "start": "818040",
    "end": "820680"
  },
  {
    "text": "computations the pattern is so",
    "start": "820680",
    "end": "822600"
  },
  {
    "text": "fundamentally simple that in Scala we",
    "start": "822600",
    "end": "824760"
  },
  {
    "text": "normally we normally look at Spring as",
    "start": "824760",
    "end": "826959"
  },
  {
    "text": "being bloated because we see the",
    "start": "826959",
    "end": "829160"
  },
  {
    "text": "fundamental pattern of just if I have an",
    "start": "829160",
    "end": "831399"
  },
  {
    "text": "applicative functor on some sort of",
    "start": "831399",
    "end": "832920"
  },
  {
    "text": "context I can join these computations",
    "start": "832920",
    "end": "834959"
  },
  {
    "text": "together and make sure that the",
    "start": "834959",
    "end": "836399"
  },
  {
    "text": "initialization order is correct I'm",
    "start": "836399",
    "end": "838600"
  },
  {
    "text": "defining my dependencies that's what",
    "start": "838600",
    "end": "840920"
  },
  {
    "text": "this pattern is all about that's what",
    "start": "840920",
    "end": "843519"
  },
  {
    "text": "we're doing with Futures okay it's just",
    "start": "843519",
    "end": "846040"
  },
  {
    "text": "we need that zip",
    "start": "846040",
    "end": "847639"
  },
  {
    "text": "operation what about Traverse Traverse",
    "start": "847639",
    "end": "849880"
  },
  {
    "text": "looks a little bit different you uh you",
    "start": "849880",
    "end": "851680"
  },
  {
    "text": "know it what does this pattern look like",
    "start": "851680",
    "end": "853320"
  },
  {
    "text": "I have a collection like entity I have",
    "start": "853320",
    "end": "855560"
  },
  {
    "text": "an operation to run against each element",
    "start": "855560",
    "end": "857720"
  },
  {
    "text": "of that collection like entity and the",
    "start": "857720",
    "end": "860279"
  },
  {
    "text": "operation returns values inside of the",
    "start": "860279",
    "end": "862759"
  },
  {
    "text": "context that I want it to return values",
    "start": "862759",
    "end": "865399"
  },
  {
    "text": "in so um when have you used this before",
    "start": "865399",
    "end": "869920"
  },
  {
    "text": "well uh Traverse is the lowest level",
    "start": "869920",
    "end": "874000"
  },
  {
    "text": "pattern for iteration over collections",
    "start": "874000",
    "end": "877000"
  },
  {
    "text": "if you look at Scholar's collections",
    "start": "877000",
    "end": "878360"
  },
  {
    "text": "hierarchy what's the lowest level anyone",
    "start": "878360",
    "end": "881839"
  },
  {
    "text": "know traversible yeah traversible just",
    "start": "881839",
    "end": "884880"
  },
  {
    "text": "defs what we call an internal iterator",
    "start": "884880",
    "end": "888320"
  },
  {
    "text": "all right the collection uh when I when",
    "start": "888320",
    "end": "891040"
  },
  {
    "text": "I make use of traversible um the only",
    "start": "891040",
    "end": "893519"
  },
  {
    "text": "thing the collection has to do is Define",
    "start": "893519",
    "end": "895279"
  },
  {
    "text": "how to Traverse over each element and",
    "start": "895279",
    "end": "897079"
  },
  {
    "text": "run a function against them it doesn't",
    "start": "897079",
    "end": "899440"
  },
  {
    "text": "actually give you an iterator that you",
    "start": "899440",
    "end": "901800"
  },
  {
    "text": "can use it says I know how to iterate",
    "start": "901800",
    "end": "904279"
  },
  {
    "text": "better okay it's an internal iterator it",
    "start": "904279",
    "end": "906079"
  },
  {
    "text": "controls the iteration that is what the",
    "start": "906079",
    "end": "908639"
  },
  {
    "text": "traversal method here is doing",
    "start": "908639",
    "end": "910880"
  },
  {
    "text": "essentially if you have one of these",
    "start": "910880",
    "end": "912519"
  },
  {
    "text": "things which is the simplest possible",
    "start": "912519",
    "end": "915120"
  },
  {
    "text": "iterator to implement for any collection",
    "start": "915120",
    "end": "918000"
  },
  {
    "text": "um you can make use of this pattern okay",
    "start": "918000",
    "end": "920680"
  },
  {
    "text": "but it's essentially just",
    "start": "920680",
    "end": "922959"
  },
  {
    "text": "iteration um and now we're going to go a",
    "start": "922959",
    "end": "925160"
  },
  {
    "text": "little crazy okay so I was showing how",
    "start": "925160",
    "end": "928639"
  },
  {
    "text": "to compose together uh this flow if we",
    "start": "928639",
    "end": "932120"
  },
  {
    "text": "take a look at code is that readable",
    "start": "932120",
    "end": "934120"
  },
  {
    "text": "that's probably not is it okay um so",
    "start": "934120",
    "end": "939319"
  },
  {
    "text": "here's our GitHub service okay our",
    "start": "939319",
    "end": "941920"
  },
  {
    "text": "GitHub service is I have a set of",
    "start": "941920",
    "end": "943480"
  },
  {
    "text": "project statistics I want to run on a",
    "start": "943480",
    "end": "945560"
  },
  {
    "text": "given GitHub project um what I need to",
    "start": "945560",
    "end": "948360"
  },
  {
    "text": "do is I need to pull out the pull",
    "start": "948360",
    "end": "949920"
  },
  {
    "text": "request from the API this pull request",
    "start": "949920",
    "end": "952440"
  },
  {
    "text": "if you see can you guys see the",
    "start": "952440",
    "end": "955519"
  },
  {
    "text": "Highlight the F oh crap this is Clips",
    "start": "956639",
    "end": "959399"
  },
  {
    "text": "man I",
    "start": "959399",
    "end": "961319"
  },
  {
    "text": "uh yeah hold on",
    "start": "961319",
    "end": "965199"
  },
  {
    "text": "let's yeah no let's yeah let's just use",
    "start": "965399",
    "end": "967920"
  },
  {
    "text": "VI it'll be it'll be way",
    "start": "967920",
    "end": "970959"
  },
  {
    "text": "easier uh Source main Scala let's look",
    "start": "970959",
    "end": "974000"
  },
  {
    "text": "at the Futures one all right",
    "start": "974000",
    "end": "978519"
  },
  {
    "text": "so we we'll fix it in a sec okay all",
    "start": "979040",
    "end": "983079"
  },
  {
    "text": "right is that readable bigger smaller",
    "start": "983079",
    "end": "988519"
  },
  {
    "text": "okay all right so we want project",
    "start": "990240",
    "end": "993480"
  },
  {
    "text": "statistics um we and we want to get them",
    "start": "993480",
    "end": "996279"
  },
  {
    "text": "back in the future but the project",
    "start": "996279",
    "end": "998279"
  },
  {
    "text": "statistics we're looking at in GitHub",
    "start": "998279",
    "end": "999839"
  },
  {
    "text": "we're going to call it the fort KNX",
    "start": "999839",
    "end": "1001279"
  },
  {
    "text": "statistic so this is how hard is it for",
    "start": "1001279",
    "end": "1003399"
  },
  {
    "text": "an external contributor to get their",
    "start": "1003399",
    "end": "1004680"
  },
  {
    "text": "pool request in and we're going to",
    "start": "1004680",
    "end": "1006560"
  },
  {
    "text": "assume that over the last 100 pool",
    "start": "1006560",
    "end": "1009000"
  },
  {
    "text": "requests the percent that are",
    "start": "1009000",
    "end": "1011639"
  },
  {
    "text": "accepted uh of from outside contributors",
    "start": "1011639",
    "end": "1014519"
  },
  {
    "text": "is going to be indicative of how hard it",
    "start": "1014519",
    "end": "1016319"
  },
  {
    "text": "is to get a pool request in that's",
    "start": "1016319",
    "end": "1017800"
  },
  {
    "text": "actually a complete lie",
    "start": "1017800",
    "end": "1019360"
  },
  {
    "text": "but that's what we're going to calculate",
    "start": "1019360",
    "end": "1020920"
  },
  {
    "text": "for fun okay so we grab all our pool",
    "start": "1020920",
    "end": "1023680"
  },
  {
    "text": "requests and pool request returns a",
    "start": "1023680",
    "end": "1025959"
  },
  {
    "text": "future of a sequence of pull requests we",
    "start": "1025959",
    "end": "1028360"
  },
  {
    "text": "grab all our collaborators the",
    "start": "1028360",
    "end": "1029720"
  },
  {
    "text": "collaborators are people who have Commit",
    "start": "1029720",
    "end": "1031038"
  },
  {
    "text": "rights on the project we have to grab it",
    "start": "1031039",
    "end": "1033120"
  },
  {
    "text": "in a separate API call it's a completely",
    "start": "1033120",
    "end": "1035438"
  },
  {
    "text": "different API call in GitHub that",
    "start": "1035439",
    "end": "1037000"
  },
  {
    "text": "returns a future sequence of",
    "start": "1037000",
    "end": "1038720"
  },
  {
    "text": "collaborators then we zip the two things",
    "start": "1038720",
    "end": "1041400"
  },
  {
    "text": "together okay so we get a tuple that has",
    "start": "1041400",
    "end": "1044839"
  },
  {
    "text": "our sequence of collaborators or",
    "start": "1044839",
    "end": "1046000"
  },
  {
    "text": "sequence of pull requests and then we",
    "start": "1046000",
    "end": "1047640"
  },
  {
    "text": "join them together in",
    "start": "1047640",
    "end": "1049360"
  },
  {
    "text": "uh a map function so we map that and",
    "start": "1049360",
    "end": "1052559"
  },
  {
    "text": "generate our project statistics project",
    "start": "1052559",
    "end": "1054280"
  },
  {
    "text": "statistics is a class that calculates",
    "start": "1054280",
    "end": "1056120"
  },
  {
    "text": "all the statistics and his Constructor",
    "start": "1056120",
    "end": "1057559"
  },
  {
    "text": "because I was lazy um it's not actually",
    "start": "1057559",
    "end": "1059480"
  },
  {
    "text": "method but anyway so that's that's what",
    "start": "1059480",
    "end": "1062720"
  },
  {
    "text": "it does and now we want for a GitHub",
    "start": "1062720",
    "end": "1065200"
  },
  {
    "text": "user we want to take a look at all his",
    "start": "1065200",
    "end": "1066679"
  },
  {
    "text": "projects and see how their Fort KNX",
    "start": "1066679",
    "end": "1069280"
  },
  {
    "text": "levels compare um so given a user we get",
    "start": "1069280",
    "end": "1073200"
  },
  {
    "text": "back Sor I just check in time um we get",
    "start": "1073200",
    "end": "1077039"
  },
  {
    "text": "back future statistics and uh",
    "start": "1077039",
    "end": "1080400"
  },
  {
    "text": "for each project of that user we have to",
    "start": "1080400",
    "end": "1083120"
  },
  {
    "text": "make an API call okay and we get back a",
    "start": "1083120",
    "end": "1085520"
  },
  {
    "text": "future sequence of projects so this",
    "start": "1085520",
    "end": "1087799"
  },
  {
    "text": "project here is a sequence of GitHub",
    "start": "1087799",
    "end": "1089400"
  },
  {
    "text": "projects and then we Traverse over each",
    "start": "1089400",
    "end": "1091600"
  },
  {
    "text": "of them right traversal um for every",
    "start": "1091600",
    "end": "1095280"
  },
  {
    "text": "project we make an asynchronous call and",
    "start": "1095280",
    "end": "1097400"
  },
  {
    "text": "we get back a future sequence of",
    "start": "1097400",
    "end": "1099159"
  },
  {
    "text": "statistics for every project of the user",
    "start": "1099159",
    "end": "1102559"
  },
  {
    "text": "and we return back the statistics for",
    "start": "1102559",
    "end": "1104400"
  },
  {
    "text": "that user and his set of projects and",
    "start": "1104400",
    "end": "1107080"
  },
  {
    "text": "then we print them out and I'm going to",
    "start": "1107080",
    "end": "1109360"
  },
  {
    "text": "run it but it might uh since The",
    "start": "1109360",
    "end": "1112280"
  },
  {
    "text": "Internet's been awesome here uh it might",
    "start": "1112280",
    "end": "1115760"
  },
  {
    "text": "might blow up and do something weird",
    "start": "1115760",
    "end": "1118120"
  },
  {
    "text": "it's accessing GitHub is my user we're",
    "start": "1118120",
    "end": "1120240"
  },
  {
    "text": "going to compare Scala and AA which is a",
    "start": "1120240",
    "end": "1122720"
  },
  {
    "text": "fun",
    "start": "1122720",
    "end": "1123520"
  },
  {
    "text": "one um yeah those AA guys they're",
    "start": "1123520",
    "end": "1126559"
  },
  {
    "text": "they're they're actually Fort Knox okay",
    "start": "1126559",
    "end": "1130039"
  },
  {
    "text": "so what would be ideal I have this this",
    "start": "1130039",
    "end": "1133799"
  },
  {
    "text": "this thing running in in Futures but",
    "start": "1133799",
    "end": "1135760"
  },
  {
    "text": "what if I don't want to run it",
    "start": "1135760",
    "end": "1136919"
  },
  {
    "text": "asynchronously what if I'm bugging and I",
    "start": "1136919",
    "end": "1139320"
  },
  {
    "text": "want to run it synchronously how do I do",
    "start": "1139320",
    "end": "1141360"
  },
  {
    "text": "that well actually the way you do that",
    "start": "1141360",
    "end": "1143880"
  },
  {
    "text": "is you pull out the abstractions for map",
    "start": "1143880",
    "end": "1148440"
  },
  {
    "text": "for flat map for zip and for traversal",
    "start": "1148440",
    "end": "1152280"
  },
  {
    "text": "external to the context you're running",
    "start": "1152280",
    "end": "1154480"
  },
  {
    "text": "in so I'm going to fly through these",
    "start": "1154480",
    "end": "1156919"
  },
  {
    "text": "it's not important you can look them up",
    "start": "1156919",
    "end": "1158360"
  },
  {
    "text": "on your own they have names external map",
    "start": "1158360",
    "end": "1161000"
  },
  {
    "text": "is what we call a functor in functional",
    "start": "1161000",
    "end": "1162960"
  },
  {
    "text": "programming okay I Define a context type",
    "start": "1162960",
    "end": "1166480"
  },
  {
    "text": "where it's a context that contains",
    "start": "1166480",
    "end": "1168159"
  },
  {
    "text": "something in this case a future and I",
    "start": "1168159",
    "end": "1171200"
  },
  {
    "text": "Define a map method that given a value",
    "start": "1171200",
    "end": "1173280"
  },
  {
    "text": "in the context and an operation that",
    "start": "1173280",
    "end": "1175640"
  },
  {
    "text": "takes the item in it and Maps it to",
    "start": "1175640",
    "end": "1177960"
  },
  {
    "text": "something else I can get back a new",
    "start": "1177960",
    "end": "1180159"
  },
  {
    "text": "context with that you know adapted",
    "start": "1180159",
    "end": "1183440"
  },
  {
    "text": "element this funter exists for option it",
    "start": "1183440",
    "end": "1186480"
  },
  {
    "text": "exists for collections it exists for",
    "start": "1186480",
    "end": "1187840"
  },
  {
    "text": "futures and it exists for something I'm",
    "start": "1187840",
    "end": "1189640"
  },
  {
    "text": "calling synchronous okay which is the",
    "start": "1189640",
    "end": "1192440"
  },
  {
    "text": "which is identity um for flat map it's",
    "start": "1192440",
    "end": "1195480"
  },
  {
    "text": "called a monad yeah it's a weird name um",
    "start": "1195480",
    "end": "1198320"
  },
  {
    "text": "same as functor uh but this is",
    "start": "1198320",
    "end": "1200840"
  },
  {
    "text": "essentially the interface that I can",
    "start": "1200840",
    "end": "1202120"
  },
  {
    "text": "extract and then I can make use of these",
    "start": "1202120",
    "end": "1203640"
  },
  {
    "text": "patterns um for zip I can do the same",
    "start": "1203640",
    "end": "1206679"
  },
  {
    "text": "thing with applicative functors I can",
    "start": "1206679",
    "end": "1209080"
  },
  {
    "text": "have an external zip I take the two",
    "start": "1209080",
    "end": "1210679"
  },
  {
    "text": "contexts and return the context and for",
    "start": "1210679",
    "end": "1212760"
  },
  {
    "text": "dverse it looks different Traverse I",
    "start": "1212760",
    "end": "1215919"
  },
  {
    "text": "need a",
    "start": "1215919",
    "end": "1217000"
  },
  {
    "text": "collection and the Traverse method needs",
    "start": "1217000",
    "end": "1219840"
  },
  {
    "text": "to know the context of the operations",
    "start": "1219840",
    "end": "1222520"
  },
  {
    "text": "that you're traversing over okay that's",
    "start": "1222520",
    "end": "1224720"
  },
  {
    "text": "where I need the an applicative funter",
    "start": "1224720",
    "end": "1226720"
  },
  {
    "text": "for that context traversal can use any",
    "start": "1226720",
    "end": "1230280"
  },
  {
    "text": "applicative funter meaning it can atus",
    "start": "1230280",
    "end": "1232159"
  },
  {
    "text": "over a whole bunch of different contexts",
    "start": "1232159",
    "end": "1234240"
  },
  {
    "text": "I can go over U well I should say go",
    "start": "1234240",
    "end": "1237720"
  },
  {
    "text": "read a paper called the essence of the",
    "start": "1237720",
    "end": "1239559"
  },
  {
    "text": "iterator pattern and you will see all",
    "start": "1239559",
    "end": "1241159"
  },
  {
    "text": "sorts of neat things you can do with",
    "start": "1241159",
    "end": "1243159"
  },
  {
    "text": "traversal one of my favorite examples is",
    "start": "1243159",
    "end": "1245960"
  },
  {
    "text": "I can take a collection and using a",
    "start": "1245960",
    "end": "1248640"
  },
  {
    "text": "context of a half filled out graph I can",
    "start": "1248640",
    "end": "1251360"
  },
  {
    "text": "go Traverse and fill out the graph with",
    "start": "1251360",
    "end": "1253360"
  },
  {
    "text": "the values from the collection which is",
    "start": "1253360",
    "end": "1255320"
  },
  {
    "text": "kind of cool all sorts of neat different",
    "start": "1255320",
    "end": "1257600"
  },
  {
    "text": "weird patterns I'm just showing you the",
    "start": "1257600",
    "end": "1259679"
  },
  {
    "text": "basics of the most common one that you",
    "start": "1259679",
    "end": "1262039"
  },
  {
    "text": "will probably hit now Okay then if I",
    "start": "1262039",
    "end": "1265720"
  },
  {
    "text": "want to do synchronous or asynchronous I",
    "start": "1265720",
    "end": "1267320"
  },
  {
    "text": "take my statistic service that user",
    "start": "1267320",
    "end": "1269360"
  },
  {
    "text": "statistic service code you just saw and",
    "start": "1269360",
    "end": "1271279"
  },
  {
    "text": "I throw a type parameter for the context",
    "start": "1271279",
    "end": "1274279"
  },
  {
    "text": "I want it to run it okay now the the",
    "start": "1274279",
    "end": "1278559"
  },
  {
    "text": "implementation that I'm going to use is",
    "start": "1278559",
    "end": "1280120"
  },
  {
    "text": "running it in the future okay with the",
    "start": "1280120",
    "end": "1283000"
  },
  {
    "text": "Futures but that context the only thing",
    "start": "1283000",
    "end": "1285320"
  },
  {
    "text": "I need is a monad instance that's what",
    "start": "1285320",
    "end": "1288000"
  },
  {
    "text": "the colon monad is it it says that I",
    "start": "1288000",
    "end": "1290279"
  },
  {
    "text": "need a value of the monad instance for",
    "start": "1290279",
    "end": "1292559"
  },
  {
    "text": "this type and if I have that the entire",
    "start": "1292559",
    "end": "1295360"
  },
  {
    "text": "service runs well I can Implement that",
    "start": "1295360",
    "end": "1298400"
  },
  {
    "text": "for synchronous behavior and then I can",
    "start": "1298400",
    "end": "1301320"
  },
  {
    "text": "run my tests synchronously without",
    "start": "1301320",
    "end": "1303760"
  },
  {
    "text": "having to defer and",
    "start": "1303760",
    "end": "1305279"
  },
  {
    "text": "wait okay um yeah not questions because",
    "start": "1305279",
    "end": "1309440"
  },
  {
    "text": "we have to show you I'll just show you",
    "start": "1309440",
    "end": "1311679"
  },
  {
    "text": "oh great yeah internet I'm sorry guys I",
    "start": "1311679",
    "end": "1315840"
  },
  {
    "text": "should have printed out what it looks",
    "start": "1315840",
    "end": "1317520"
  },
  {
    "text": "like um yeah okay",
    "start": "1317520",
    "end": "1320559"
  },
  {
    "text": "so if you look at uh our testing here",
    "start": "1320559",
    "end": "1324559"
  },
  {
    "text": "when we do our test of the generic",
    "start": "1324559",
    "end": "1326720"
  },
  {
    "text": "service what we",
    "start": "1326720",
    "end": "1328919"
  },
  {
    "text": "do is we Define a new API which is in",
    "start": "1328919",
    "end": "1332600"
  },
  {
    "text": "the single threaded context single",
    "start": "1332600",
    "end": "1334320"
  },
  {
    "text": "threaded is a type I'll let you guys",
    "start": "1334320",
    "end": "1336799"
  },
  {
    "text": "guess what the type is anyone anyone",
    "start": "1336799",
    "end": "1340320"
  },
  {
    "text": "know yeah okay few um we'll guess later",
    "start": "1340320",
    "end": "1344480"
  },
  {
    "text": "but essentially uh when I Define the",
    "start": "1344480",
    "end": "1346919"
  },
  {
    "text": "projects uh method I'm stubbing it out",
    "start": "1346919",
    "end": "1349520"
  },
  {
    "text": "and I am stubbing out just returning",
    "start": "1349520",
    "end": "1351320"
  },
  {
    "text": "directly some data as if it's the GitHub",
    "start": "1351320",
    "end": "1354520"
  },
  {
    "text": "API and I do the same thing for all of",
    "start": "1354520",
    "end": "1356760"
  },
  {
    "text": "the GitHub API that abstraction I have",
    "start": "1356760",
    "end": "1359600"
  },
  {
    "text": "um for single threaded instead of future",
    "start": "1359600",
    "end": "1361840"
  },
  {
    "text": "and then I can just instantiate the",
    "start": "1361840",
    "end": "1363559"
  },
  {
    "text": "generic statistics service with my",
    "start": "1363559",
    "end": "1365840"
  },
  {
    "text": "single threaded API that's stubbed out",
    "start": "1365840",
    "end": "1368960"
  },
  {
    "text": "and all my calls happen on the local",
    "start": "1368960",
    "end": "1371559"
  },
  {
    "text": "thread I'm not deferring things for",
    "start": "1371559",
    "end": "1373320"
  },
  {
    "text": "futures and I don't have to deal with",
    "start": "1373320",
    "end": "1374919"
  },
  {
    "text": "the overhead and the complexity of",
    "start": "1374919",
    "end": "1377679"
  },
  {
    "text": "threads and trying to wait for things to",
    "start": "1377679",
    "end": "1379679"
  },
  {
    "text": "happen and figuring out you know what",
    "start": "1379679",
    "end": "1381799"
  },
  {
    "text": "what's an appropriate timeout for this",
    "start": "1381799",
    "end": "1383360"
  },
  {
    "text": "test you know like I have to wait for a",
    "start": "1383360",
    "end": "1385960"
  },
  {
    "text": "certain amount of time for it to be done",
    "start": "1385960",
    "end": "1387400"
  },
  {
    "text": "it did it deadlock no it's all",
    "start": "1387400",
    "end": "1389080"
  },
  {
    "text": "synchronous if I get any sort of",
    "start": "1389080",
    "end": "1390360"
  },
  {
    "text": "exceptions or anything it happens",
    "start": "1390360",
    "end": "1391600"
  },
  {
    "text": "directly okay so what I've done by",
    "start": "1391600",
    "end": "1394679"
  },
  {
    "text": "extracting out those patterns is now I",
    "start": "1394679",
    "end": "1397000"
  },
  {
    "text": "can change the behavior of that flow of",
    "start": "1397000",
    "end": "1399799"
  },
  {
    "text": "code when we talk about functional",
    "start": "1399799",
    "end": "1401679"
  },
  {
    "text": "programming I mean that's that's a big",
    "start": "1401679",
    "end": "1403039"
  },
  {
    "text": "thing in functional programming is for",
    "start": "1403039",
    "end": "1405159"
  },
  {
    "text": "the same code that I have I can change",
    "start": "1405159",
    "end": "1407880"
  },
  {
    "text": "the actual execution model that's what",
    "start": "1407880",
    "end": "1410360"
  },
  {
    "text": "that's what things like mon ads help you",
    "start": "1410360",
    "end": "1411880"
  },
  {
    "text": "do",
    "start": "1411880",
    "end": "1414039"
  },
  {
    "text": "okay so if that goal is worth it um and",
    "start": "1414039",
    "end": "1417919"
  },
  {
    "text": "that's what you want to do you go with",
    "start": "1417919",
    "end": "1419520"
  },
  {
    "text": "the complexity of abstracting these",
    "start": "1419520",
    "end": "1421080"
  },
  {
    "text": "things out having the context having the",
    "start": "1421080",
    "end": "1422760"
  },
  {
    "text": "the crazy type parameters and that kind",
    "start": "1422760",
    "end": "1424080"
  },
  {
    "text": "of thing if you're just doing stuff",
    "start": "1424080",
    "end": "1426559"
  },
  {
    "text": "asynchronously and it's always going to",
    "start": "1426559",
    "end": "1427760"
  },
  {
    "text": "be asynchronous you don't care um maybe",
    "start": "1427760",
    "end": "1430159"
  },
  {
    "text": "the overhead is not worth it for you",
    "start": "1430159",
    "end": "1431520"
  },
  {
    "text": "right it's it's up to you to make that",
    "start": "1431520",
    "end": "1433159"
  },
  {
    "text": "decision I'm just trying to show you the",
    "start": "1433159",
    "end": "1434720"
  },
  {
    "text": "power you can get by going that next",
    "start": "1434720",
    "end": "1437200"
  },
  {
    "text": "level so",
    "start": "1437200",
    "end": "1439360"
  },
  {
    "text": "I know we kind of flew through that",
    "start": "1439360",
    "end": "1440960"
  },
  {
    "text": "because uh I had technical issues as",
    "start": "1440960",
    "end": "1443400"
  },
  {
    "text": "always I apologize um any",
    "start": "1443400",
    "end": "1447600"
  },
  {
    "text": "questions we have one minute yeah why",
    "start": "1449080",
    "end": "1452000"
  },
  {
    "text": "not use a for comprehension oh okay so",
    "start": "1452000",
    "end": "1454039"
  },
  {
    "text": "one of the one of the common mistakes",
    "start": "1454039",
    "end": "1455520"
  },
  {
    "text": "that people make",
    "start": "1455520",
    "end": "1459000"
  },
  {
    "text": "um is when you do a for expression okay",
    "start": "1459880",
    "end": "1465159"
  },
  {
    "text": "uh come on import",
    "start": "1465159",
    "end": "1469279"
  },
  {
    "text": "concurrent uh underscore import executor",
    "start": "1469279",
    "end": "1475520"
  },
  {
    "text": "no execution context what is",
    "start": "1475520",
    "end": "1479640"
  },
  {
    "text": "it implicit do Global yay okay so one",
    "start": "1479640",
    "end": "1483760"
  },
  {
    "text": "mistake people make",
    "start": "1483760",
    "end": "1485640"
  },
  {
    "text": "is I want to do something in the future",
    "start": "1485640",
    "end": "1488480"
  },
  {
    "text": "so I'm going to print Lin you know one",
    "start": "1488480",
    "end": "1491320"
  },
  {
    "text": "and then I'm going to return one in the",
    "start": "1491320",
    "end": "1493559"
  },
  {
    "text": "future okay then I'm going to do this",
    "start": "1493559",
    "end": "1496120"
  },
  {
    "text": "thing here and print Lin",
    "start": "1496120",
    "end": "1500320"
  },
  {
    "text": "two all right what's the problem here if",
    "start": "1501440",
    "end": "1505000"
  },
  {
    "text": "I do or sorry not not what's the problem",
    "start": "1505000",
    "end": "1507159"
  },
  {
    "text": "but do you expect these two things to",
    "start": "1507159",
    "end": "1509240"
  },
  {
    "text": "run in",
    "start": "1509240",
    "end": "1510679"
  },
  {
    "text": "parallel a lot of people mistakenly",
    "start": "1510679",
    "end": "1513480"
  },
  {
    "text": "assume that they're going to run in",
    "start": "1513480",
    "end": "1515360"
  },
  {
    "text": "parallel but they don't the second",
    "start": "1515360",
    "end": "1517440"
  },
  {
    "text": "future doesn't get spawned off until the",
    "start": "1517440",
    "end": "1519919"
  },
  {
    "text": "first future is done so no matter what I",
    "start": "1519919",
    "end": "1522559"
  },
  {
    "text": "always get X Plus y or sorry uh",
    "start": "1522559",
    "end": "1526960"
  },
  {
    "text": "wow I did something bad to my spt sorry",
    "start": "1526960",
    "end": "1530080"
  },
  {
    "text": "guys um holy crap",
    "start": "1530080",
    "end": "1532760"
  },
  {
    "text": "yeah let's uh you didn't see that",
    "start": "1532760",
    "end": "1537840"
  },
  {
    "text": "um yeah most people most people expect",
    "start": "1537840",
    "end": "1541000"
  },
  {
    "text": "expect these things to run in tandem you",
    "start": "1541000",
    "end": "1542799"
  },
  {
    "text": "know both Futures run at the same time",
    "start": "1542799",
    "end": "1544200"
  },
  {
    "text": "but the first one will always run before",
    "start": "1544200",
    "end": "1546039"
  },
  {
    "text": "the second one applicative funter is the",
    "start": "1546039",
    "end": "1547840"
  },
  {
    "text": "only way that you cannot care about",
    "start": "1547840",
    "end": "1549360"
  },
  {
    "text": "execution order when you join two things",
    "start": "1549360",
    "end": "1551440"
  },
  {
    "text": "together okay and the other reason is",
    "start": "1551440",
    "end": "1554000"
  },
  {
    "text": "that there are more things that are",
    "start": "1554000",
    "end": "1555480"
  },
  {
    "text": "applicative functors than can be in four",
    "start": "1555480",
    "end": "1557520"
  },
  {
    "text": "expressions",
    "start": "1557520",
    "end": "1559240"
  },
  {
    "text": "uh mathematically so it's a more it's",
    "start": "1559240",
    "end": "1562080"
  },
  {
    "text": "it's a looser restriction it's easier to",
    "start": "1562080",
    "end": "1564039"
  },
  {
    "text": "find things that fit that it's easier to",
    "start": "1564039",
    "end": "1567320"
  },
  {
    "text": "implement too um yeah",
    "start": "1567320",
    "end": "1570720"
  },
  {
    "text": "any yes yield yield really should be",
    "start": "1570720",
    "end": "1574640"
  },
  {
    "text": "there it doesn't need to be there if",
    "start": "1574640",
    "end": "1576440"
  },
  {
    "text": "it's a if it's a future yeah so with",
    "start": "1576440",
    "end": "1578559"
  },
  {
    "text": "Futures we have um the difference",
    "start": "1578559",
    "end": "1580399"
  },
  {
    "text": "between having a yield and not having a",
    "start": "1580399",
    "end": "1581880"
  },
  {
    "text": "yield is whether or not you have a for",
    "start": "1581880",
    "end": "1583279"
  },
  {
    "text": "each method um if you have a four each",
    "start": "1583279",
    "end": "1586080"
  },
  {
    "text": "method you can use yield and you know",
    "start": "1586080",
    "end": "1588440"
  },
  {
    "text": "get rid of all that complexity but",
    "start": "1588440",
    "end": "1589960"
  },
  {
    "text": "there's no harm in having yield and",
    "start": "1589960",
    "end": "1592360"
  },
  {
    "text": "there is harm if you don't have a for",
    "start": "1592360",
    "end": "1594480"
  },
  {
    "text": "each method and not having yield so",
    "start": "1594480",
    "end": "1596600"
  },
  {
    "text": "that's why I have yield always um but",
    "start": "1596600",
    "end": "1599760"
  },
  {
    "text": "that that that's the specific reason",
    "start": "1599760",
    "end": "1601600"
  },
  {
    "text": "again a future of unit I can just as",
    "start": "1601600",
    "end": "1603640"
  },
  {
    "text": "easily ignore as something that returns",
    "start": "1603640",
    "end": "1605360"
  },
  {
    "text": "unit so well but yeah I mean you can",
    "start": "1605360",
    "end": "1609000"
  },
  {
    "text": "call git right but you need to figure",
    "start": "1609000",
    "end": "1611440"
  },
  {
    "text": "out the right timeout for that operation",
    "start": "1611440",
    "end": "1613520"
  },
  {
    "text": "when you call get so in this case it's a",
    "start": "1613520",
    "end": "1615919"
  },
  {
    "text": "little trivial you know it's it's going",
    "start": "1615919",
    "end": "1617279"
  },
  {
    "text": "to return immediately I stu things out",
    "start": "1617279",
    "end": "1619520"
  },
  {
    "text": "but when you're dealing with um",
    "start": "1619520",
    "end": "1621200"
  },
  {
    "text": "asynchronous code in general uh there's",
    "start": "1621200",
    "end": "1623279"
  },
  {
    "text": "always a question of how long do I wait",
    "start": "1623279",
    "end": "1624880"
  },
  {
    "text": "for all the threading and locking and",
    "start": "1624880",
    "end": "1626200"
  },
  {
    "text": "crap to to end um that's the right value",
    "start": "1626200",
    "end": "1629840"
  },
  {
    "text": "you could use INF but if you happen to",
    "start": "1629840",
    "end": "1631679"
  },
  {
    "text": "have some sort of exception thrown and",
    "start": "1631679",
    "end": "1633120"
  },
  {
    "text": "maybe things don't propagate correctly",
    "start": "1633120",
    "end": "1635640"
  },
  {
    "text": "um your code gets really really hard to",
    "start": "1635640",
    "end": "1637159"
  },
  {
    "text": "debug so the idea here is I want that",
    "start": "1637159",
    "end": "1639840"
  },
  {
    "text": "synchronous flow so when I step through",
    "start": "1639840",
    "end": "1641399"
  },
  {
    "text": "a debugger I see this happen then this",
    "start": "1641399",
    "end": "1643399"
  },
  {
    "text": "happen then this happen versus with",
    "start": "1643399",
    "end": "1645600"
  },
  {
    "text": "Futures you know I have to start",
    "start": "1645600",
    "end": "1647039"
  },
  {
    "text": "tracking things across threads so it",
    "start": "1647039",
    "end": "1648960"
  },
  {
    "text": "helps me write my tests essentially and",
    "start": "1648960",
    "end": "1652360"
  },
  {
    "text": "again if if if you don't need that um",
    "start": "1652360",
    "end": "1657039"
  },
  {
    "text": "abstraction for your particular code",
    "start": "1657039",
    "end": "1658480"
  },
  {
    "text": "base it might not be worthwhile to pull",
    "start": "1658480",
    "end": "1660039"
  },
  {
    "text": "things out um if you do pull things out",
    "start": "1660039",
    "end": "1662279"
  },
  {
    "text": "you do have a lot more context in which",
    "start": "1662279",
    "end": "1663880"
  },
  {
    "text": "stuff can run anyway it's a it's a",
    "start": "1663880",
    "end": "1667200"
  },
  {
    "text": "trade-off",
    "start": "1667200",
    "end": "1669720"
  },
  {
    "text": "yeah cool well thanks guys sorry talked",
    "start": "1669720",
    "end": "1672519"
  },
  {
    "text": "really fast 30 minutes is awesome and",
    "start": "1672519",
    "end": "1674440"
  },
  {
    "text": "thanks for having me",
    "start": "1674440",
    "end": "1677530"
  },
  {
    "text": "[Applause]",
    "start": "1677530",
    "end": "1681130"
  },
  {
    "text": "[Music]",
    "start": "1681860",
    "end": "1685000"
  }
]