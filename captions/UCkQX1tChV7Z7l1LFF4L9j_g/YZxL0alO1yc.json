[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "19680"
  },
  {
    "text": "So today we're going to be talking about effective Scala which is a fun fun thing",
    "start": "19680",
    "end": "25599"
  },
  {
    "text": "so who am I why should you listen to me well I am a software engineer here I've",
    "start": "25599",
    "end": "30679"
  },
  {
    "text": "done a lot of scholar over the years I'm also a blogger and author and a nerd but more importantly according to Clouts I'm",
    "start": "30679",
    "end": "37360"
  },
  {
    "text": "a unicorn expert so reasons why you should listen to this",
    "start": "37360",
    "end": "42960"
  },
  {
    "text": "talk now all right so first let's talk about what is Scala what is effective Scala right we want to optimize our use",
    "start": "42960",
    "end": "49920"
  },
  {
    "text": "of Scala to solve real world problems without explosions broken thumbs and",
    "start": "49920",
    "end": "55039"
  },
  {
    "text": "bullet wounds right so in any language you can write terrible code",
    "start": "55039",
    "end": "60519"
  },
  {
    "text": "Scola does not prevent you from writing terrible code that's not the kind of language it's designed to be it's designed to help you write really really",
    "start": "60519",
    "end": "66920"
  },
  {
    "text": "elegant code right but in so doing you could potentially um write terrible code",
    "start": "66920",
    "end": "72680"
  },
  {
    "text": "if you wanted we don't stop you okay so effective Scola is trying to write nice",
    "start": "72680",
    "end": "78280"
  },
  {
    "text": "elegant code avoiding pitfalls knowing where they are and uh succeeding in your",
    "start": "78280",
    "end": "83479"
  },
  {
    "text": "daily work so let's start with a few Basics okay by",
    "start": "83479",
    "end": "89600"
  },
  {
    "text": "the way this talk is going to be a whole lot of different concepts and a whole lot of hey maybe you should go look that up somewhere else because I can't talk",
    "start": "89600",
    "end": "95840"
  },
  {
    "text": "about it in 45 minutes all right so just bear with me here it's gon to there's",
    "start": "95840",
    "end": "100960"
  },
  {
    "text": "there's a few of these all right first off in Scala this is this is the most basic principle right",
    "start": "100960",
    "end": "107600"
  },
  {
    "text": "Expressions not statements in everything Scala is an expression right everything",
    "start": "107600",
    "end": "113920"
  },
  {
    "start": "110000",
    "end": "175000"
  },
  {
    "text": "in Scala is an expression everything returns a value you can make use of this here's some code it's",
    "start": "113920",
    "end": "120479"
  },
  {
    "text": "erative right I want to get an error message for a given error code all right",
    "start": "120479",
    "end": "126320"
  },
  {
    "text": "I create a ver result I match over my arrow code assign to the result and at the end I return it what does that look",
    "start": "126320",
    "end": "133160"
  },
  {
    "text": "like Java it we're not Java okay what we can do in Scala bam don't do that that",
    "start": "133160",
    "end": "140040"
  },
  {
    "text": "was explosions right what we can do in Scala is we don't even need that extra um curly",
    "start": "140040",
    "end": "148519"
  },
  {
    "text": "brace right we we don't need all of that setup we just have a single simple",
    "start": "148519",
    "end": "154480"
  },
  {
    "text": "function that is one expression when you get into the the uh",
    "start": "154480",
    "end": "160360"
  },
  {
    "text": "groove of Scala you end up with lots and lots and lots of small functions that are one expression that one expression",
    "start": "160360",
    "end": "166480"
  },
  {
    "text": "might be several lines like in this case but small functions that are one expression are very very very easy to",
    "start": "166480",
    "end": "172159"
  },
  {
    "text": "maintain very easy to figure out what's going on all right another Basics use the read",
    "start": "172159",
    "end": "178879"
  },
  {
    "text": "of Val print Loop inbt we call it a console in uh in Maven",
    "start": "178879",
    "end": "184280"
  },
  {
    "text": "I think they also call it a console some people call it an interpreter like the Ides and stuff it's the same thing right",
    "start": "184280",
    "end": "191080"
  },
  {
    "text": "when you are developing scholar code go into The Interpreter and play around",
    "start": "191080",
    "end": "196440"
  },
  {
    "text": "with what you're doing you'll get a good feel for what types of apis you're writing how elegant it is what the type",
    "start": "196440",
    "end": "202560"
  },
  {
    "text": "system is doing behind the scenes for you the reppel is going to print types for you it's going to tell you what's",
    "start": "202560",
    "end": "208159"
  },
  {
    "text": "returned from functions right experiment experiment experiment in Scala this is",
    "start": "208159",
    "end": "213720"
  },
  {
    "text": "the first level of testing is the repple after that you can start writing your tests and write your code that sort of",
    "start": "213720",
    "end": "220080"
  },
  {
    "start": "220000",
    "end": "380000"
  },
  {
    "text": "thing it's a great way to learn new libraries all right finally stay immutable right mutable variables have a",
    "start": "220080",
    "end": "228120"
  },
  {
    "text": "lot of things that you cannot do with them for example I cannot share them safely",
    "start": "228120",
    "end": "234439"
  },
  {
    "text": "across threads right I have to lock locking is",
    "start": "234439",
    "end": "239480"
  },
  {
    "text": "slow I can't really hash on their attributes because they could",
    "start": "239480",
    "end": "244599"
  },
  {
    "text": "change right that's that's no good um equality is really painful with a",
    "start": "244599",
    "end": "251400"
  },
  {
    "text": "mutable variable right because it can mutate I'm not guaranteed it's going to be the same for two objects in fact the",
    "start": "251400",
    "end": "257880"
  },
  {
    "text": "equality itself could mutate the thing right um it's sh safe to share internal",
    "start": "257880",
    "end": "264360"
  },
  {
    "text": "state of an object if it's immutable so I can grab pieces out of an object and share them elsewhere how do we do this",
    "start": "264360",
    "end": "270080"
  },
  {
    "text": "Scala they're called closures if I write functions against a",
    "start": "270080",
    "end": "275680"
  },
  {
    "text": "mutable object and I pass mutable State over to another thread it's the most",
    "start": "275680",
    "end": "281720"
  },
  {
    "text": "common threading mistake with mutability in Scala I think there was a thread",
    "start": "281720",
    "end": "286800"
  },
  {
    "text": "about that on about AA recently right don't do it limit your mutability to where it",
    "start": "286800",
    "end": "294120"
  },
  {
    "text": "makes sense right and then use immutability expose things as immutable",
    "start": "294120",
    "end": "300639"
  },
  {
    "text": "one thing you can do is you can actually mutate locally",
    "start": "300639",
    "end": "306320"
  },
  {
    "text": "with a mutable variable and you can only expose an immutable interface right and",
    "start": "306320",
    "end": "311960"
  },
  {
    "text": "that actually is still thread safe as long as the only time another thread sees the variable is the immutable interface right so avoid",
    "start": "311960",
    "end": "319919"
  },
  {
    "text": "mutability don't fear it necessarily although a healthy amount of fear is fine okay all right finally co- and",
    "start": "319919",
    "end": "328000"
  },
  {
    "text": "contravariance you cannot make a covariant or a contravariant type that's mutable it's",
    "start": "328000",
    "end": "336039"
  },
  {
    "text": "impossible now if you're going to cast and cheat the type system that's fine but expect runtime explosions later",
    "start": "336039",
    "end": "342800"
  },
  {
    "text": "right you you you absolutely cannot so that is why all the scolar collections generic apis where we want nice co and",
    "start": "342800",
    "end": "350319"
  },
  {
    "text": "Contra variant what kind of interfaces are they well the default is immutable okay",
    "start": "350319",
    "end": "356520"
  },
  {
    "text": "finally Runar is going to give you free candy if you keep things immutable he looks a little",
    "start": "356520",
    "end": "363919"
  },
  {
    "text": "surprised all right so again using immutably doesn't mean a lack of",
    "start": "363919",
    "end": "369280"
  },
  {
    "text": "mutation right I can still have local mutable State and expose things immutably to other threads and it'll",
    "start": "369280",
    "end": "375360"
  },
  {
    "text": "still be fine but please do not close over a mutable State it's dangerous okay next up use option don't",
    "start": "375360",
    "end": "385720"
  },
  {
    "start": "380000",
    "end": "630000"
  },
  {
    "text": "use null all right if I um if I'm taking in user input for",
    "start": "385720",
    "end": "392919"
  },
  {
    "text": "how to connect to a database or sorry this is this is authenticating a user on a web Ser web framework",
    "start": "392919",
    "end": "400400"
  },
  {
    "text": "right uh I can if I take in options have my code still be nice and simple using",
    "start": "400400",
    "end": "405960"
  },
  {
    "text": "four Expressions right I can pull out the username from the option pull out the password and",
    "start": "405960",
    "end": "411160"
  },
  {
    "text": "authenticate if possible only if these things are there and if they're not there something else happens well I can",
    "start": "411160",
    "end": "417960"
  },
  {
    "text": "delay explosion and I can use get or else to delay my explosions I think that should have a yield sorry anyway so flat",
    "start": "417960",
    "end": "425840"
  },
  {
    "text": "map it and NP is not for me right let's use option to",
    "start": "425840",
    "end": "432240"
  },
  {
    "text": "avoid null pointer exceptions in scallet there should be no reason to use null",
    "start": "432240",
    "end": "438759"
  },
  {
    "text": "for a non-initialized value right okay",
    "start": "438759",
    "end": "443960"
  },
  {
    "text": "finally style you'll know it when you have it right but we're not Java we're",
    "start": "443960",
    "end": "450840"
  },
  {
    "text": "not Ruby we're not hll okay style that I'm pulling from",
    "start": "450840",
    "end": "456680"
  },
  {
    "text": "java I need to analyze what parts of this are because of random Java gotas",
    "start": "456680",
    "end": "464039"
  },
  {
    "text": "that don't really make sense at all in Scala right what parts of that style don't apply to Scala and throw those",
    "start": "464039",
    "end": "469919"
  },
  {
    "text": "away because they're not going to help you out at all same with Ruby if I'm coming from Ruby and I have Ruby style",
    "start": "469919",
    "end": "476280"
  },
  {
    "text": "that I make use of obviously scol is a static language so the 's going to be different styles that we need to apply",
    "start": "476280",
    "end": "482639"
  },
  {
    "text": "same with hasal right Scola is not hasal finally with style the most important thing is you",
    "start": "482639",
    "end": "489639"
  },
  {
    "text": "get your entire team to agree or you're going to have mismatch style right",
    "start": "489639",
    "end": "496039"
  },
  {
    "text": "personally I I would say find some automated tool like scalariform that you can enforce and then just call it quits",
    "start": "496039",
    "end": "502120"
  },
  {
    "text": "there that's uh usually the best way to enforce style otherwise it's a constant battle and lots of bickering and it's",
    "start": "502120",
    "end": "508440"
  },
  {
    "text": "not really a useful conversation to writing programs right",
    "start": "508440",
    "end": "514360"
  },
  {
    "text": "okay so that said let's talk a little bit about Style hey all right use DEA",
    "start": "514360",
    "end": "520959"
  },
  {
    "text": "for abstract members why do we use de for abstract members right well because death can be",
    "start": "520959",
    "end": "529040"
  },
  {
    "text": "overridden by vow death can be overridden by lazy vow death can be overridden by VAR",
    "start": "529040",
    "end": "536320"
  },
  {
    "text": "right so when I'm making an abstract class if I don't know or care whether or not it's a Val a just use de default to",
    "start": "536320",
    "end": "544399"
  },
  {
    "text": "using defs in your traits even if you think it's going to be a value use a def why because I can optimize later right",
    "start": "544399",
    "end": "552320"
  },
  {
    "text": "it's a decision for my implementer not for me def is good enough for",
    "start": "552320",
    "end": "558959"
  },
  {
    "text": "everyone annotate non-trivial return types for public",
    "start": "558959",
    "end": "564560"
  },
  {
    "text": "methods so you don't have to annotate return Types on methods but there's two",
    "start": "564560",
    "end": "569720"
  },
  {
    "text": "things that this gives you okay by annotating them if they're public one it's documentation so when I go read",
    "start": "569720",
    "end": "576320"
  },
  {
    "text": "your code I can figure out what's going on especially if you're using some really really complicated types right",
    "start": "576320",
    "end": "581880"
  },
  {
    "text": "that will will help me as somebody else coming into the code figure out what's going on the second",
    "start": "581880",
    "end": "587839"
  },
  {
    "text": "reason is I it limits the ability of accidentally exposing some sort of",
    "start": "587839",
    "end": "593880"
  },
  {
    "text": "structural type or some sort of refined type that is not the abstract type I want to return",
    "start": "593880",
    "end": "599920"
  },
  {
    "text": "so if I have a factory method that's returning several of of different",
    "start": "599920",
    "end": "606240"
  },
  {
    "text": "implementations of some abstract interface annotate with that abstract interface so you make sure that abstract interface is always returned if you",
    "start": "606240",
    "end": "613040"
  },
  {
    "text": "don't you could potentially wind up with a common super type that's not the abstract interface right some I might",
    "start": "613040",
    "end": "619880"
  },
  {
    "text": "expose more details than I want to expose so don't expose",
    "start": "619880",
    "end": "624920"
  },
  {
    "text": "yourselves all right and uh after that we're going to switch into a little o again the talk is",
    "start": "624920",
    "end": "633000"
  },
  {
    "start": "630000",
    "end": "715000"
  },
  {
    "text": "sort of uh flowing hope you don't mind all right so composition can include",
    "start": "633000",
    "end": "638120"
  },
  {
    "text": "inheritance in Scala right I can define a logger trait and then I can define a companion",
    "start": "638120",
    "end": "645440"
  },
  {
    "text": "trait called has logger which just says that I have a logger notice it's a deaf and not a",
    "start": "645440",
    "end": "651680"
  },
  {
    "text": "vow that way if I want to override it in an implementation with a lazy vow I can",
    "start": "651680",
    "end": "657480"
  },
  {
    "text": "if I want to override it with a vow I can it's fine okay trait has awesome",
    "start": "657480",
    "end": "662760"
  },
  {
    "text": "logger now I'm composing using the has awesome logger trait I'm",
    "start": "662760",
    "end": "669320"
  },
  {
    "text": "mixing it into a class and I get an instance of awesome logger that is a delegate it's it's it's a composition",
    "start": "669320",
    "end": "675680"
  },
  {
    "text": "right so I'm using inheritance to express my composition this is something that's completely possible in scholar",
    "start": "675680",
    "end": "681760"
  },
  {
    "text": "this is one of the two paradigms that we blend if you're in O this can make sense",
    "start": "681760",
    "end": "686839"
  },
  {
    "text": "if you're in FP that might not make sense at all we'll see",
    "start": "686839",
    "end": "692079"
  },
  {
    "text": "okay finally that's that's actually finally for o so so those are some basic oo",
    "start": "692079",
    "end": "698680"
  },
  {
    "text": "rules right abstract deps and Abstract members you can compose with oo and make",
    "start": "698680",
    "end": "705959"
  },
  {
    "text": "sure you annotate your public return types okay to avoid exposing implementation details now",
    "start": "705959",
    "end": "713760"
  },
  {
    "text": "implicits this is hey last year right limit the scope of your implicits gave",
    "start": "713760",
    "end": "719240"
  },
  {
    "start": "715000",
    "end": "840000"
  },
  {
    "text": "gave a talk on this last year uh and uh I'm going to reiterate the same points",
    "start": "719240",
    "end": "725160"
  },
  {
    "text": "okay so your implicit scope in Scala starts by looking at implicits defined",
    "start": "725160",
    "end": "731720"
  },
  {
    "text": "in your current scope explicit Imports and then Wild Card Imports right that's the shadowing",
    "start": "731720",
    "end": "738880"
  },
  {
    "text": "rules if I find a type in one of those areas I immediately succeed and they are",
    "start": "738880",
    "end": "744519"
  },
  {
    "text": "all kind of you know looked at at once so if I find more than one I get an amb it after I look at that scope then I",
    "start": "744519",
    "end": "752360"
  },
  {
    "text": "start looking at the parts of a type and this is where putting implicits and companion objects can be really handy",
    "start": "752360",
    "end": "757720"
  },
  {
    "text": "right I can throw implicits and companion objects and not have to explicitly import them or put them in my current",
    "start": "757720",
    "end": "763279"
  },
  {
    "text": "Scope when you write code put your implicits in the companion",
    "start": "763279",
    "end": "769000"
  },
  {
    "text": "objects put them in the parts of the type because if you don't it's really",
    "start": "769000",
    "end": "774240"
  },
  {
    "text": "really really hard for someone to come back later and override the implicit that you added and we can all assume",
    "start": "774240",
    "end": "780480"
  },
  {
    "text": "that our code is perfect and pristine but in practice I really want to allow my users to overwrite the things that I",
    "start": "780480",
    "end": "787160"
  },
  {
    "text": "screwed up I don't trust myself right so again let your user customize as",
    "start": "787160",
    "end": "794680"
  },
  {
    "text": "needed avoid implicit views these are",
    "start": "794680",
    "end": "799760"
  },
  {
    "text": "overused thanks Daniel hey so so Daniel just so you know I am wearing shoes I",
    "start": "799760",
    "end": "807040"
  },
  {
    "text": "apologize all right anyway avoid implicit views right these are the most",
    "start": "807040",
    "end": "812639"
  },
  {
    "text": "overused thing when you first start in Scala they are ridiculously handy there's going to be times where you need",
    "start": "812639",
    "end": "818399"
  },
  {
    "text": "them but avoid them in general there usually there's usually a better mechanism that you can use instead of an",
    "start": "818399",
    "end": "824199"
  },
  {
    "text": "implicit View and then when you absolutely find out you need it use it right it should be the last thing in",
    "start": "824199",
    "end": "829920"
  },
  {
    "text": "your toolbox as opposed to the first thing and watch out for the implicit",
    "start": "829920",
    "end": "836519"
  },
  {
    "text": "cat okay so next implicits are great really",
    "start": "837800",
    "end": "845440"
  },
  {
    "start": "840000",
    "end": "1275000"
  },
  {
    "text": "really really great if you use implicit values some examples type constraints",
    "start": "845440",
    "end": "851759"
  },
  {
    "text": "type traits there's going to be a talk on type traits later you should go listen to it here's a little a little uh",
    "start": "851759",
    "end": "857920"
  },
  {
    "text": "helper well first we'll talk about type constraints right okay so if I have a",
    "start": "857920",
    "end": "864240"
  },
  {
    "text": "generic buffer and I want to expose a two Java bite buffer method and I only",
    "start": "864240",
    "end": "869480"
  },
  {
    "text": "want to expose it if my generic buffer is a bite I can use an implicit constraint there to say is my T an",
    "start": "869480",
    "end": "877399"
  },
  {
    "text": "instance of bite what that's actually doing is the compiler is looking up an implicit that has to abide by some uh",
    "start": "877399",
    "end": "885680"
  },
  {
    "text": "type system restrictions to say that t is bite yes there's a way to do this without implicits is that your",
    "start": "885680",
    "end": "891880"
  },
  {
    "text": "question oh I am missed how am I missing the parameter name oh right right right yeah sorry",
    "start": "892240",
    "end": "899480"
  },
  {
    "text": "there should be an X colon T yeah so",
    "start": "899480",
    "end": "904240"
  },
  {
    "text": "here if you saw that there should be a parameter name there sorry sorry for that slide",
    "start": "904759",
    "end": "911759"
  },
  {
    "text": "anyway I I hope that you get the idea though implicits can be used to enforce type constraints so I can have really",
    "start": "911759",
    "end": "917600"
  },
  {
    "text": "really really rich apis and again is that an implicit view",
    "start": "917600",
    "end": "923839"
  },
  {
    "text": "no but it's on the class and it's still safe it's still type safe right",
    "start": "923839",
    "end": "930600"
  },
  {
    "text": "okay um oh and and for examples of these you can look at the collections at",
    "start": "930600",
    "end": "935639"
  },
  {
    "text": "library if you've seen the flatten method right flatten takes an implicit to determine if the underlying type",
    "start": "935639",
    "end": "942440"
  },
  {
    "text": "parameter is a a nested collection and then it can work so you're type safe",
    "start": "942440",
    "end": "948399"
  },
  {
    "text": "you're using implicits to help enforce type safety okay type traits here's an",
    "start": "948399",
    "end": "953440"
  },
  {
    "text": "example I can def find an abstract trait I can call it encodable",
    "start": "953440",
    "end": "959839"
  },
  {
    "text": "and it's an encodable for type T right it tells me how to encode",
    "start": "959839",
    "end": "965440"
  },
  {
    "text": "T's so I have defa encode that takes a t and returns an array of bytes I have a decode that takes a bite buffer and",
    "start": "965440",
    "end": "971759"
  },
  {
    "text": "gives me back a t right then in object encode because",
    "start": "971759",
    "end": "977160"
  },
  {
    "text": "that trait might be annoying to look up and use I Define an encode method with this funny colon after the type that is",
    "start": "977160",
    "end": "984000"
  },
  {
    "text": "a context bound it means there has to be a type trait available for T so I need",
    "start": "984000",
    "end": "989319"
  },
  {
    "text": "to be able to find on implicit scope an encodable of T",
    "start": "989319",
    "end": "994399"
  },
  {
    "text": "right and then I just implicitly look up that encodable in the implementation and",
    "start": "994399",
    "end": "1000639"
  },
  {
    "text": "call encode so now I have an encode method that can take any generic T if there's an implicit encodable available",
    "start": "1000639",
    "end": "1007079"
  },
  {
    "text": "well how do I make implicit encodes available I take a companion object for",
    "start": "1007079",
    "end": "1012279"
  },
  {
    "text": "encodable and I add defaults for stand the standard library right I Define um",
    "start": "1012279",
    "end": "1017600"
  },
  {
    "text": "you know int encodable as an implicit object that extends encodable and I give it an",
    "start": "1017600",
    "end": "1023160"
  },
  {
    "text": "implementation and I can do the same thing with tup encodable the way I do it with Tuple is I actually chain my",
    "start": "1023160",
    "end": "1029918"
  },
  {
    "text": "implicits I Define an implicit tupal encodable of ab right I take an",
    "start": "1029919",
    "end": "1035360"
  },
  {
    "text": "encodable of a and encodable of B implicitly Chained and then I can design",
    "start": "1035360",
    "end": "1042038"
  },
  {
    "text": "my encodable of tupal of ab I can do the same thing with sequences I can do the same thing with option either right and",
    "start": "1042039",
    "end": "1049320"
  },
  {
    "text": "now I have a way of encoding generic types and as a user if I make a new to",
    "start": "1049320",
    "end": "1057400"
  },
  {
    "text": "awesome right if I have some awesome domain object that I want to",
    "start": "1057400",
    "end": "1062679"
  },
  {
    "text": "save I can in my companion objects provide the implicit trait for how to",
    "start": "1062679",
    "end": "1067720"
  },
  {
    "text": "encode it and that will be the default one used now do you know what's gorgeous about this right what's really gorgeous",
    "start": "1067720",
    "end": "1074840"
  },
  {
    "text": "about this encodable method if I don't like the way something is coded I can in",
    "start": "1074840",
    "end": "1080880"
  },
  {
    "text": "my local scope override the implicit encodable for that",
    "start": "1080880",
    "end": "1087080"
  },
  {
    "text": "type so I can change the way things are encoded in my application if I don't like the default for some sort of",
    "start": "1087080",
    "end": "1093360"
  },
  {
    "text": "optimization right I need to make sure I use that when I decode but um it's a very very beautiful very very expressive",
    "start": "1093360",
    "end": "1100760"
  },
  {
    "text": "thing okay this is this is another way to kind of mix in Behavior that's really",
    "start": "1100760",
    "end": "1105840"
  },
  {
    "text": "really really flexible all right so that is typee traits another",
    "start": "1105840",
    "end": "1113120"
  },
  {
    "text": "thing they are external to your class hierarchy right I'm monkey patching on",
    "start": "1113120",
    "end": "1118880"
  },
  {
    "text": "existing classes I don't control if I need to add some Behavior to The Scholar",
    "start": "1118880",
    "end": "1124039"
  },
  {
    "text": "standard Library this is how I do it it's far better than implicit views",
    "start": "1124039",
    "end": "1130320"
  },
  {
    "text": "okay overridable car site I separate my extractions one class can have more than one implementation of a given type trait",
    "start": "1130320",
    "end": "1138440"
  },
  {
    "text": "um and finally you can use this to denote roles in methods so if I have a",
    "start": "1138440",
    "end": "1144559"
  },
  {
    "text": "synchronized method and I have a source in sync and I want to synchronize things from the source to the sync the type class source and sync denote the role in",
    "start": "1144559",
    "end": "1152559"
  },
  {
    "text": "the method right now let's say I have a file which is my source or a directory and I have a directory which is my sync",
    "start": "1152559",
    "end": "1159799"
  },
  {
    "text": "right directory will support both sources and syncs but depending on where I put it in that method determines what",
    "start": "1159799",
    "end": "1165039"
  },
  {
    "text": "role it takes so type classes can enforce roles and inside of this generic",
    "start": "1165039",
    "end": "1170200"
  },
  {
    "text": "method with F andt I can only pull things from from I can't put things in",
    "start": "1170200",
    "end": "1175480"
  },
  {
    "text": "there even though a directory implements the source and the sync type classes",
    "start": "1175480",
    "end": "1180840"
  },
  {
    "text": "because F only accepts Source I can only use f as a",
    "start": "1180840",
    "end": "1185960"
  },
  {
    "text": "source right so I'm enforcing roles with type classes beautiful beautiful things",
    "start": "1185960",
    "end": "1192039"
  },
  {
    "text": "one of the most important things I think you should learn in schola all right in the type",
    "start": "1192039",
    "end": "1197640"
  },
  {
    "text": "system you should also try to preserve specific types I'm going to go back here do you notice in this synchronize right",
    "start": "1197640",
    "end": "1204720"
  },
  {
    "text": "I can take a generic f&t and return an F of that's the same concept here we want",
    "start": "1204720",
    "end": "1210360"
  },
  {
    "text": "to preserve specific types because the type system will help us out more if it knows specifically what we want we won't",
    "start": "1210360",
    "end": "1216240"
  },
  {
    "text": "have to resort to reflection the more we keep in the type system the more it can do for us an",
    "start": "1216240",
    "end": "1222919"
  },
  {
    "text": "example if I have a method that takes a collection and returns an instance of",
    "start": "1222919",
    "end": "1228280"
  },
  {
    "text": "the same collection right it's better to actually try to",
    "start": "1228280",
    "end": "1233880"
  },
  {
    "text": "preserve the original instance this way Scala knows if I start",
    "start": "1233880",
    "end": "1240440"
  },
  {
    "text": "with a vector I will return a vector and I won't accidentally give me a list because it thinks it can because I've",
    "start": "1240440",
    "end": "1247679"
  },
  {
    "text": "lost type information right so this is important the other side of that coin is",
    "start": "1247679",
    "end": "1254320"
  },
  {
    "text": "if you uh if you're not returning if I'm not returning that t and the result of the method then I don't need the type",
    "start": "1254320",
    "end": "1261240"
  },
  {
    "text": "parameter there's no reason for it right but if I am returning something and I know that it could be any of a subass of",
    "start": "1261240",
    "end": "1267880"
  },
  {
    "text": "a thing right make sure you annotate with a type parameter to preserve that specific type it'll help",
    "start": "1267880",
    "end": "1273640"
  },
  {
    "text": "you out in the long run a little bit about collections you should know",
    "start": "1273640",
    "end": "1280679"
  },
  {
    "start": "1275000",
    "end": "1405000"
  },
  {
    "text": "them we have a nice collections API okay we have traversible traversible is all",
    "start": "1280679",
    "end": "1287080"
  },
  {
    "text": "about internal iteration if I want a collection where the collection controls",
    "start": "1287080",
    "end": "1292440"
  },
  {
    "text": "when to start and stop traversing and he knows when it happens that's traversible beautiful thing about traversible I can",
    "start": "1292440",
    "end": "1299000"
  },
  {
    "text": "have a traversible that opens a resource pulls things in from the resource and closes it when it's done with uh",
    "start": "1299000",
    "end": "1306120"
  },
  {
    "text": "traversing and it's safe because traversible knows exactly when all that happens right he controls his own",
    "start": "1306120",
    "end": "1313120"
  },
  {
    "text": "iteration iterable is when I want to let someone else control my iteration I give them an iterator okay that's also really",
    "start": "1313120",
    "end": "1319520"
  },
  {
    "text": "handy there's a lot of performance you can get from just dropping down to iterator um sequence set map hopefully",
    "start": "1319520",
    "end": "1326679"
  },
  {
    "text": "those are transparent and then we have index seek and linear seek these are two I'd like to point out index seek is",
    "start": "1326679",
    "end": "1332919"
  },
  {
    "text": "supposed to have efficient indexing linear seek is supposed to have efficient headtail",
    "start": "1332919",
    "end": "1339000"
  },
  {
    "text": "decomposition if you want to index do not use a list a list is a linear sequence a list is for head tail",
    "start": "1339000",
    "end": "1345840"
  },
  {
    "text": "decomposition don't use list as your default collection if you're coming from java we would always type array list and",
    "start": "1345840",
    "end": "1351919"
  },
  {
    "text": "then you go to Scala and you drop the array part right oh I'm immutable great no you're still using the wrong",
    "start": "1351919",
    "end": "1357600"
  },
  {
    "text": "collection most likely use",
    "start": "1357600",
    "end": "1361158"
  },
  {
    "text": "Vector okay also know your collections apis right so",
    "start": "1367880",
    "end": "1376240"
  },
  {
    "text": "this is I I I just use reflection grabbed all of the methods on sequence and printed them out I didn't type that",
    "start": "1376240",
    "end": "1382159"
  },
  {
    "text": "by hand in case you're wondering um so yeah there's there's a lot of goodness there um I think Paul has kept us pretty",
    "start": "1382159",
    "end": "1389440"
  },
  {
    "text": "uh pretty happy with random things he adds that are really ridiculously useful so almost any time I need some method it",
    "start": "1389440",
    "end": "1396640"
  },
  {
    "text": "happens to be in the collections API usually right already there's very very rarely do I have to add anything to it",
    "start": "1396640",
    "end": "1404000"
  },
  {
    "text": "so all right now we're going to skip over",
    "start": "1404000",
    "end": "1409200"
  },
  {
    "start": "1405000",
    "end": "1552000"
  },
  {
    "text": "to actors a little bit okay with actors you want to create",
    "start": "1409200",
    "end": "1415120"
  },
  {
    "text": "scheduler and failure zones That's What actors are all about right let it fail but don't just let it fail control the",
    "start": "1415120",
    "end": "1422440"
  },
  {
    "text": "area of failure right things that are talking to the web and my internal indexing service",
    "start": "1422440",
    "end": "1430159"
  },
  {
    "text": "I want to keep those things separate right not only do I want to keep them separate I want to have a different",
    "start": "1430159",
    "end": "1435679"
  },
  {
    "text": "threadpool for one versus the other so one can't St the other piece of my system one of the beauties of actors is",
    "start": "1435679",
    "end": "1441760"
  },
  {
    "text": "all about topology it's about the topology of your system you want to make sure when you design that topology that",
    "start": "1441760",
    "end": "1448640"
  },
  {
    "text": "you pay attention to which pieces of the system could starve the others and keep them separate okay actually use",
    "start": "1448640",
    "end": "1456440"
  },
  {
    "text": "different schedulers actually prevent one system from destroying another on that jvm or you know send one onto one",
    "start": "1456440",
    "end": "1464679"
  },
  {
    "text": "machine and one onto another that sort of thing but you should still have n Plus to replication anyway same so it's",
    "start": "1464679",
    "end": "1471360"
  },
  {
    "text": "the same it's the same with scheduling and failure and they might be different you might have a different supervisor",
    "start": "1471360",
    "end": "1477880"
  },
  {
    "text": "hierarchy then you have a threadpool hierarchy right for these zones that's perfectly acceptable and",
    "start": "1477880",
    "end": "1485080"
  },
  {
    "text": "totally reasonable but please make sure that when one part of your system dies the",
    "start": "1485080",
    "end": "1491039"
  },
  {
    "text": "rest doesn't die or you're not really getting the most out of",
    "start": "1491039",
    "end": "1496279"
  },
  {
    "text": "actors okay dynamic topologies don't be afraid to have an actor change State",
    "start": "1496279",
    "end": "1502919"
  },
  {
    "text": "that's kind of what they're all about right don't be afraid to instantiate new actors that provide extra Behavior",
    "start": "1502919",
    "end": "1510640"
  },
  {
    "text": "around your actor don't be afraid afraid to get rid of actors actors are all about Dynamic typologies expanding and",
    "start": "1510640",
    "end": "1517480"
  },
  {
    "text": "moving based on what you need to do to handle the current input to your system",
    "start": "1517480",
    "end": "1524399"
  },
  {
    "text": "right move things around change your topology to optim imiz at runtime it's",
    "start": "1524399",
    "end": "1530039"
  },
  {
    "text": "actually that code becomes really really simple in an actor system finally just use AA right AKA is",
    "start": "1530039",
    "end": "1539360"
  },
  {
    "text": "pretty much the best actor system on the jvm and that's not just because I work at typ safe it's because I've actually",
    "start": "1539360",
    "end": "1545559"
  },
  {
    "text": "tried to use all of them um and uh yeah AKA is amazing especially with the 2.0",
    "start": "1545559",
    "end": "1552360"
  },
  {
    "start": "1552000",
    "end": "1801000"
  },
  {
    "text": "release finally we're going to talk a little tiny bit about functional",
    "start": "1552360",
    "end": "1557520"
  },
  {
    "text": "programming okay functional programming has a bunch of awesome patterns from category",
    "start": "1557520",
    "end": "1563919"
  },
  {
    "text": "Theory okay some of them are really useful you use them all the time some of",
    "start": "1563919",
    "end": "1569559"
  },
  {
    "text": "them if you're writing pure FP you will use all the time not all of us are writing pure FP all the time but I'm",
    "start": "1569559",
    "end": "1575720"
  },
  {
    "text": "going to cover the ones that are actually useful I would say in almost all your code here's an example using",
    "start": "1575720",
    "end": "1582760"
  },
  {
    "text": "applicative if I have a bunch of options again right I can use use this funny",
    "start": "1582760",
    "end": "1589120"
  },
  {
    "text": "little symbol from Scala Ed you could also Define your own applicative builders that don't use funny symbols um",
    "start": "1589120",
    "end": "1596120"
  },
  {
    "text": "if you don't like funny symbols anyway this is essentially taking those three options and joining them into a",
    "start": "1596120",
    "end": "1602880"
  },
  {
    "text": "tuple right that I can apply to that function so driver manager get",
    "start": "1602880",
    "end": "1608360"
  },
  {
    "text": "connection takes a username a URL username and password and I'm taking what's in the option and sending it to",
    "start": "1608360",
    "end": "1614600"
  },
  {
    "text": "it and giving myself a new Option okay that's all that code is doing that's a a",
    "start": "1614600",
    "end": "1620320"
  },
  {
    "text": "big simplification the beauty of this is that it does it in parallel so if you remember with four Expressions if I had",
    "start": "1620320",
    "end": "1626919"
  },
  {
    "text": "that for expression example if URL doesn't exist right then it's never ever",
    "start": "1626919",
    "end": "1633679"
  },
  {
    "text": "going to look in username right it's never ever going to look in password it stops when it finds",
    "start": "1633679",
    "end": "1640000"
  },
  {
    "text": "out that URL doesn't exist so there's something in Scala Zed called validation",
    "start": "1640000",
    "end": "1645399"
  },
  {
    "text": "which people love there's something in Scola called either that we can do this with to um if option is instead or sorry lift",
    "start": "1645399",
    "end": "1652840"
  },
  {
    "text": "has what they call box right it's the same thing if instead of an option I have something that could",
    "start": "1652840",
    "end": "1660919"
  },
  {
    "text": "be a value or an error message this will let me group my error messages and save",
    "start": "1660919",
    "end": "1667080"
  },
  {
    "text": "them for later so that when I discover there's an error State I can print all of them to",
    "start": "1667080",
    "end": "1672440"
  },
  {
    "text": "my user at the same time applicatives are like four expressions but they're",
    "start": "1672440",
    "end": "1679120"
  },
  {
    "text": "parallel right I'm doing all of these things we're trying to make sure all of them can happen all right applicatives",
    "start": "1679120",
    "end": "1685440"
  },
  {
    "text": "are the parallel version of monads and",
    "start": "1685440",
    "end": "1690600"
  },
  {
    "text": "uh you have to say that word sometime right anyway four expressions are how we",
    "start": "1690600",
    "end": "1695799"
  },
  {
    "text": "Express monads in Scala applicatives well you use this funny operator from",
    "start": "1695799",
    "end": "1700960"
  },
  {
    "text": "Scala Ed if you want to use them now all right now you should learn Scala Ed why do I say that the validation class the",
    "start": "1700960",
    "end": "1708360"
  },
  {
    "text": "applicative these things are awesome you can use them in lots and lots of real life code you don't have to go crazy and",
    "start": "1708360",
    "end": "1716840"
  },
  {
    "text": "pull in all of Scala Ed for it to be useful in your program here I just threw",
    "start": "1716840",
    "end": "1722240"
  },
  {
    "text": "a bunch of the funny operators of why people are scared of Scala Ed right so if you take two concepts apply some",
    "start": "1722240",
    "end": "1728399"
  },
  {
    "text": "magic enrich it and then join it with love flat map some awesome you'll",
    "start": "1728399",
    "end": "1735279"
  },
  {
    "text": "achieve Harmony right that's what that says okay and so I also just described",
    "start": "1735279",
    "end": "1741519"
  },
  {
    "text": "what those operators do right so the Little Star there by the way is the same as this operator but I can never type it",
    "start": "1741519",
    "end": "1749720"
  },
  {
    "text": "so I had to cut and paste anyway so in Scala Zed there are some useful things",
    "start": "1749720",
    "end": "1755600"
  },
  {
    "text": "right there's some useful things we can learn from functional programming Scala is about a blend it's about knowing when",
    "start": "1755600",
    "end": "1762120"
  },
  {
    "text": "to use o knowing when to use FP joining the two together right",
    "start": "1762120",
    "end": "1769159"
  },
  {
    "text": "classes functions methods Expressions that's Scala that is",
    "start": "1769159",
    "end": "1774720"
  },
  {
    "text": "the beauty of Scala it's a unifier we're trying to blend okay when you work in",
    "start": "1774720",
    "end": "1779960"
  },
  {
    "text": "the blend that's when you're achieving the optimum use of Scala the type INF ferenc is going to work better for you",
    "start": "1779960",
    "end": "1786919"
  },
  {
    "text": "um your code is going to look very clean right if you go too far to one extreme",
    "start": "1786919",
    "end": "1792279"
  },
  {
    "text": "you're going to start to fight the compiler all right so that that is",
    "start": "1792279",
    "end": "1798799"
  },
  {
    "text": "effective Scola at the end this all of these Concepts if you were to uh purchase a",
    "start": "1798799",
    "end": "1805600"
  },
  {
    "start": "1801000",
    "end": "2269000"
  },
  {
    "text": "book called Scala and depth um these are all covered in far more detail in there and I know that this was kind of a fire",
    "start": "1805600",
    "end": "1811679"
  },
  {
    "text": "hose so to be a fun keynote I thought maybe I would open it",
    "start": "1811679",
    "end": "1817120"
  },
  {
    "text": "up to questions a little bit at the end um I yeah so if you guys would like to",
    "start": "1817120",
    "end": "1822519"
  },
  {
    "text": "ask any questions feel free yes so the question is will Concepts and scaled",
    "start": "1822519",
    "end": "1827720"
  },
  {
    "text": "make get into the standard library right um I so the answer to that is actually",
    "start": "1827720",
    "end": "1833600"
  },
  {
    "text": "that we have in we have a Scala incubator so if Scala Zed puts things into the Scala incubator the Scola",
    "start": "1833600",
    "end": "1840200"
  },
  {
    "text": "incubator is what's meant to go into the standard library right now we're being very very protective of the standard library because we want to make it",
    "start": "1840200",
    "end": "1846600"
  },
  {
    "text": "binary compatible um and so that's why very little has been able to make it in in",
    "start": "1846600",
    "end": "1851640"
  },
  {
    "text": "the past",
    "start": "1851640",
    "end": "1855320"
  },
  {
    "text": "yeah right so the question is with Collections and preserving specific types and I want to use say a map method",
    "start": "1856720",
    "end": "1863559"
  },
  {
    "text": "that has all sorts of other things to pull in um and it's it's kind of hard to make it preserve specific types or or",
    "start": "1863559",
    "end": "1869480"
  },
  {
    "text": "the map method right where it could change the type um in my book I have an example where you aren't preserving",
    "start": "1869480",
    "end": "1876320"
  },
  {
    "text": "necessarily the type you got in you're preserving the most specific type map can",
    "start": "1876320",
    "end": "1881360"
  },
  {
    "text": "return right so you're preserving the most specific type that you can keep so",
    "start": "1881360",
    "end": "1886639"
  },
  {
    "text": "the reason why this is important I don't know if if you guys know this if I have a bit set what's a bit set it's a set of in it's compressed right so I'm looking",
    "start": "1886639",
    "end": "1895399"
  },
  {
    "text": "for bite positions and that's where I put whether or not an in exists it's great for little enumerations to make",
    "start": "1895399",
    "end": "1900720"
  },
  {
    "text": "them smaller in memory however if I call map on a bit set and I call underscore two string what does what's",
    "start": "1900720",
    "end": "1908600"
  },
  {
    "text": "returned right a uh a set of string no longer a bit set it escapes it goes to a",
    "start": "1908600",
    "end": "1914760"
  },
  {
    "text": "lease specific type because I can't have a bit set of strengths so that's the uniform type or return type principle in",
    "start": "1914760",
    "end": "1922039"
  },
  {
    "text": "Scola um if I'm going to write a method that's generic and I want to accept bit set and I want to return the most",
    "start": "1922039",
    "end": "1928559"
  },
  {
    "text": "specific type with the collection there's a little bit overhead I have to do and again um well I wish I had an",
    "start": "1928559",
    "end": "1936200"
  },
  {
    "text": "example here anyway that that's a really good question and it depends on what you're",
    "start": "1936200",
    "end": "1941840"
  },
  {
    "text": "writing right so the question is it it it can be over to",
    "start": "1941840",
    "end": "1948360"
  },
  {
    "text": "write generic methods across all collections right there's there's overhead involved there's some implicit magic a lot of type parameters and in my",
    "start": "1948360",
    "end": "1956039"
  },
  {
    "text": "day-to-day life if I only need a vector all the time why not just explicitly say",
    "start": "1956039",
    "end": "1961840"
  },
  {
    "text": "Vector right so the response to that is if I'm writing a",
    "start": "1961840",
    "end": "1966880"
  },
  {
    "text": "method right or if I'm if I'm writing my my data access layer right I'm going to annotate Vector because it's the most",
    "start": "1966880",
    "end": "1972720"
  },
  {
    "text": "specific type and I want to preserve that through the type system if I'm writing a generic method that needs to",
    "start": "1972720",
    "end": "1978039"
  },
  {
    "text": "go against any possible thing in the whole world that could be a collection",
    "start": "1978039",
    "end": "1983240"
  },
  {
    "text": "that's when I have to go to the extra effort to try to preserve the specific type if I'm writing a utility Library if I'm writing my data Library where I know",
    "start": "1983240",
    "end": "1989919"
  },
  {
    "text": "it's a vector and I know I can just return things that are vector then I don't have to go to any extra work",
    "start": "1989919",
    "end": "1996200"
  },
  {
    "text": "because I'm still preserving the specific type know it's a vector want it to be a vector and stay a vector um so",
    "start": "1996200",
    "end": "2002360"
  },
  {
    "text": "so there's there's a dichotomy there right it depends on where you're writing the code am I writing a library I want",
    "start": "2002360",
    "end": "2007840"
  },
  {
    "text": "everyone to be able to use or am I writing my specific domain right once I'm in my domain I should have specific",
    "start": "2007840",
    "end": "2013679"
  },
  {
    "text": "types and I should just never have to worry about it but to be able to do that all of the generic stuff has to be able",
    "start": "2013679",
    "end": "2019600"
  },
  {
    "text": "to preserve those specific types otherwise you start running into problems you start having to called you know two Vector I don't even know if two",
    "start": "2019600",
    "end": "2026279"
  },
  {
    "text": "Vector exists anyway yeah the question is is there going to be more attempts to",
    "start": "2026279",
    "end": "2031639"
  },
  {
    "text": "use type classes in the standard Library uh the only two instances right now are like ordered and something else orine",
    "start": "2031639",
    "end": "2038440"
  },
  {
    "text": "sorry and uh another guy like that Ken build from happens to be a type",
    "start": "2038440",
    "end": "2044880"
  },
  {
    "text": "class it happens to be a very funky looking type class so if you're want to learn the type class pattern look at ordering in the standard Library um yeah",
    "start": "2044880",
    "end": "2053440"
  },
  {
    "text": "so again this goes back to the whole we are very being very very cautious about we throw in the standard Library very",
    "start": "2053440",
    "end": "2060118"
  },
  {
    "text": "very very cautious so I would love to see a typ class Library try to go",
    "start": "2060119",
    "end": "2066240"
  },
  {
    "text": "through scalla incubation hint hint I would love to see that",
    "start": "2066240",
    "end": "2071878"
  },
  {
    "text": "right but it has to go through the approval process and and and all that to make it in and right now I would say the",
    "start": "2071879",
    "end": "2078720"
  },
  {
    "text": "the odds of things entering the standard Library um without going through without",
    "start": "2078720",
    "end": "2083839"
  },
  {
    "text": "you having seen them as a library for a long time and work out bugs and prove that that design is viable is low so if",
    "start": "2083839",
    "end": "2091800"
  },
  {
    "text": "you want such a thing in the standard library that it it needs to it needs to go through some stabilization process",
    "start": "2091800",
    "end": "2097480"
  },
  {
    "text": "right right so existing projects that are stable that people like and don't complain about in Scala that they",
    "start": "2097480",
    "end": "2103560"
  },
  {
    "text": "consider canonical have a good shot of potentially making it in if they're if they go through incubation versus just",
    "start": "2103560",
    "end": "2109760"
  },
  {
    "text": "some random untested Library so what's currently in scalla incubator is the question so we have scallet arm scalla",
    "start": "2109760",
    "end": "2118280"
  },
  {
    "text": "IO um I think I think technically anti aals considered in the incubator",
    "start": "2118280",
    "end": "2126520"
  },
  {
    "text": "right so so well well it's at least getting proven out there so",
    "start": "2130440",
    "end": "2138320"
  },
  {
    "text": "yeah that's uh right so we that's the other thing right the um I don't know if",
    "start": "2138640",
    "end": "2143839"
  },
  {
    "text": "you saw the community extension library for Scala that's kind of where the incubator has sort of moved so incubator",
    "start": "2143839",
    "end": "2149520"
  },
  {
    "text": "is like a place where you can add Scala projects and then the Scola Community extensions library is our way of we want",
    "start": "2149520",
    "end": "2155960"
  },
  {
    "text": "to expand the standard Library but we want to make sure these libraries prove themselves before making it into core so",
    "start": "2155960",
    "end": "2162920"
  },
  {
    "text": "um I think with spt 0.12 we'll be able to have the Scala Community extension Library be um built and deployed for you",
    "start": "2162920",
    "end": "2169960"
  },
  {
    "text": "for every version of Scala and that is just going to include projects that we we consider core fundamental in Scala um",
    "start": "2169960",
    "end": "2178359"
  },
  {
    "text": "anti XML is one Scala IO Scala arm um I think we're just going to pull in all",
    "start": "2178359",
    "end": "2184400"
  },
  {
    "text": "the testing libraries but I can't I can't say for certain there's a committee of of a few people uh one person in epfl One me Martin and then a",
    "start": "2184400",
    "end": "2192520"
  },
  {
    "text": "few external um contributors that decide what makes it in there and how how that happens so that's the community",
    "start": "2192520",
    "end": "2199040"
  },
  {
    "text": "extensions Library so so Scala X okay the question is is this called Scala X",
    "start": "2199040",
    "end": "2204520"
  },
  {
    "text": "all right Scala X and Scala Zed are Scola Community extension libraries that",
    "start": "2204520",
    "end": "2210000"
  },
  {
    "text": "were generated by people out you know not necessarily inside of the scolar",
    "start": "2210000",
    "end": "2215119"
  },
  {
    "text": "project okay they're just libraries um this this is going to be something",
    "start": "2215119",
    "end": "2220280"
  },
  {
    "text": "that's sponsored by uh us under Scala right it's sponsored by epfl it's sponsored by typ safe to have a set of",
    "start": "2220280",
    "end": "2227520"
  },
  {
    "text": "libraries that we consider we would love to be in the standard library but we want to validate them first so that it's",
    "start": "2227520",
    "end": "2234839"
  },
  {
    "text": "going to be something different and also it will just use the name of the original Library so again",
    "start": "2234839",
    "end": "2242520"
  },
  {
    "text": "Scala X or Scala iio Scala arm anti XML we're not going to make those libraries",
    "start": "2242520",
    "end": "2247920"
  },
  {
    "text": "changed to bring them in here we're just going to be promoting them as hey we consider these core we'd like to have them in the standard please test them",
    "start": "2247920",
    "end": "2254000"
  },
  {
    "text": "more right all right thanks guys [Applause]",
    "start": "2254000",
    "end": "2263789"
  },
  {
    "text": "[Music]",
    "start": "2264040",
    "end": "2271659"
  }
]