[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": "hey folks before we get into today's podcast i wanted to let you know about our upcoming qcon software development",
    "start": "960",
    "end": "7120"
  },
  {
    "text": "conference we will be back online with qcon plus may 10th to the 20th join the",
    "start": "7120",
    "end": "12880"
  },
  {
    "text": "world's most innovative senior software engineers across multiple domains in person and online as they share their",
    "start": "12880",
    "end": "19279"
  },
  {
    "text": "real-world implementation of emerging trends and practices you can learn more about the events at qconferences.com",
    "start": "19279",
    "end": "26400"
  },
  {
    "text": "and we hope to see you there",
    "start": "26400",
    "end": "30359"
  },
  {
    "text": "hello and welcome to the inf q podcast i'm charles humble one of the co-hosts",
    "start": "31920",
    "end": "37280"
  },
  {
    "text": "of the show and editor-in-chief of cloud native consultancy firm container solutions my guest this week is liz rice",
    "start": "37280",
    "end": "44800"
  },
  {
    "text": "liz is chief open source officer with cloud native networking and security specialists eye surveillant creators of",
    "start": "44800",
    "end": "50960"
  },
  {
    "text": "the psyllium ebpf based networking project she is also the chair of the cncf's technical oversight committee and",
    "start": "50960",
    "end": "58320"
  },
  {
    "text": "is the author of container security a book published by o'reilly for today's podcast the focus is on ebpf we'll",
    "start": "58320",
    "end": "65680"
  },
  {
    "text": "explore what it is how it works under the hood and what you can and can't do with it we'll also talk a little bit",
    "start": "65680",
    "end": "71920"
  },
  {
    "text": "about the psyllium project liz welcome to the infinique podcast hi thanks for",
    "start": "71920",
    "end": "77520"
  },
  {
    "start": "77000",
    "end": "221000"
  },
  {
    "text": "having me so i thought a good place to start would be with a couple of definitions because i think some of our listeners might not",
    "start": "77520",
    "end": "83680"
  },
  {
    "text": "be that familiar with some of what we're going to talk about and it's maybe an obvious thing to start with but could you just briefly describe what it is",
    "start": "83680",
    "end": "90400"
  },
  {
    "text": "that the linux kernel actually does yeah i think it's really important to level",
    "start": "90400",
    "end": "95520"
  },
  {
    "text": "set that because ebpf allows us to run custom programs in the kernel but if",
    "start": "95520",
    "end": "101040"
  },
  {
    "text": "you're not completely familiar with what the kernel is that doesn't make a lot of sense and i think the kernel is one of",
    "start": "101040",
    "end": "107280"
  },
  {
    "text": "those things that a lot of developers a lot of engineers kind of take for granted and they know maybe that there's",
    "start": "107280",
    "end": "114479"
  },
  {
    "text": "a thing called user space and a thing called the kernel but maybe after that it starts getting a little bit",
    "start": "114479",
    "end": "120240"
  },
  {
    "text": "wishy-washy i certainly remember not having a clear understanding of that in the past so what does the canal do for us the",
    "start": "120240",
    "end": "127439"
  },
  {
    "text": "kernel is the part of the operating system that lets applications do things",
    "start": "127439",
    "end": "134080"
  },
  {
    "text": "with hardware so every time we want to write something to the screen or",
    "start": "134080",
    "end": "140400"
  },
  {
    "text": "get something from the network or maybe read something from a file even accessing memory it all involves",
    "start": "140400",
    "end": "147440"
  },
  {
    "text": "hardware and you can't from user space where our applications run you can't",
    "start": "147440",
    "end": "153200"
  },
  {
    "text": "directly access that hardware we use the kernel to do it on our behalf and the",
    "start": "153200",
    "end": "158720"
  },
  {
    "text": "kernel is privileged and able to get at the hardware for us",
    "start": "158720",
    "end": "164080"
  },
  {
    "text": "so our applications every time they want to do one of these things like read from a",
    "start": "164080",
    "end": "169680"
  },
  {
    "text": "file they have to make what's called a system call and that's the interface where our",
    "start": "169680",
    "end": "177040"
  },
  {
    "text": "application is saying please read a number of bytes from a file for example and most of the time we're not really",
    "start": "177040",
    "end": "183920"
  },
  {
    "text": "aware of that because the programming languages that we use day to day give us higher level abstractions so we don't",
    "start": "183920",
    "end": "189599"
  },
  {
    "text": "really need to get involved with the syscalls typically you know for most developers",
    "start": "189599",
    "end": "195840"
  },
  {
    "text": "but it's good to know you know good to have an understanding of that and then in a cloud native context it's perhaps",
    "start": "195840",
    "end": "201599"
  },
  {
    "text": "worth saying as well that there is only the one kernel so regardless of whether you're running with virtual machines or",
    "start": "201599",
    "end": "206879"
  },
  {
    "text": "with bare metal however many applications you're running they are all sharing that same privileged kernel and",
    "start": "206879",
    "end": "214319"
  },
  {
    "text": "that kernel is doing all of the communication between the underlying hardware and the applications running on",
    "start": "214319",
    "end": "220560"
  },
  {
    "text": "it while we're doing this level setting we should also mention something else so ebpf stands for extended berkeley packet",
    "start": "220560",
    "end": "227840"
  },
  {
    "start": "221000",
    "end": "334000"
  },
  {
    "text": "filter what's a packet filter yeah it's a great question i quite often say that the ebpf initials don't",
    "start": "227840",
    "end": "234879"
  },
  {
    "text": "necessarily help us understand very much about what ebpf is today but it really",
    "start": "234879",
    "end": "240000"
  },
  {
    "text": "reflects the history so packet filtering is this idea that if you have network",
    "start": "240000",
    "end": "246319"
  },
  {
    "text": "traffic flowing in or out of your computer you might want to",
    "start": "246319",
    "end": "251760"
  },
  {
    "text": "look at individual packets maybe do something interesting with individual packets maybe a lot of i guess energy in",
    "start": "251760",
    "end": "259040"
  },
  {
    "text": "networking a lot of the time people are debugging networking issues and in order to do that you might need to filter out",
    "start": "259040",
    "end": "265280"
  },
  {
    "text": "and look at just the traffic going to a particular destination for example this",
    "start": "265280",
    "end": "270880"
  },
  {
    "text": "idea of filtering is that you've got this enormous stream of packets but you",
    "start": "270880",
    "end": "276080"
  },
  {
    "text": "can just look at the ones you're interested in so initially the idea of berkeley packet filtering was",
    "start": "276080",
    "end": "282479"
  },
  {
    "text": "to be able to specify what kinds of packets you're interested in perhaps by looking at the address",
    "start": "282479",
    "end": "290479"
  },
  {
    "text": "and you'd get a copy of those packets that you could then examine and use for kind of debugging purposes without",
    "start": "290479",
    "end": "296240"
  },
  {
    "text": "having to wade through this enormous stream of everything that's happening on the machine and then in order to do the",
    "start": "296240",
    "end": "302880"
  },
  {
    "text": "actual packet filtering what is it that we have we have a little bit of code that says",
    "start": "302880",
    "end": "311120"
  },
  {
    "text": "does this packet match my filter and kernel developers started to think well",
    "start": "311120",
    "end": "316240"
  },
  {
    "text": "this is like a little you know almost like a little virtual machine here what if we could do more powerful things with",
    "start": "316240",
    "end": "322320"
  },
  {
    "text": "these programs that we're running to look at network packets what if we could run them in other contexts not just",
    "start": "322320",
    "end": "330000"
  },
  {
    "text": "looking at a network packet but maybe some other operations that the kernel is doing right and that's how you get to",
    "start": "330000",
    "end": "335840"
  },
  {
    "start": "334000",
    "end": "486000"
  },
  {
    "text": "the sort of extended bit it's again perhaps worth saying the original berkeley packet filter itself is quite old in tech terms the first release was",
    "start": "335840",
    "end": "343199"
  },
  {
    "text": "1992 it's the original packet filter from bsd so what is the extended bit",
    "start": "343199",
    "end": "349440"
  },
  {
    "text": "what does the e bit at one level extended just means we're going to use this concept of running",
    "start": "349440",
    "end": "356479"
  },
  {
    "text": "custom programs somewhere in the kernel it also i think in that kind of bucket of things that",
    "start": "356479",
    "end": "362960"
  },
  {
    "text": "gets differentiate what we might call ebpf from bpf there was a change to the kind of instruction set that was used",
    "start": "362960",
    "end": "369280"
  },
  {
    "text": "for writing those ebpf programs and there was also the introduction of a",
    "start": "369280",
    "end": "374560"
  },
  {
    "text": "thing called maps what are they maps are data structures that you can share",
    "start": "374560",
    "end": "380319"
  },
  {
    "text": "between different bpf programs or between a bpf program and user space so",
    "start": "380319",
    "end": "387120"
  },
  {
    "text": "it's how we can communicate information between an application and the ebpf",
    "start": "387120",
    "end": "393199"
  },
  {
    "text": "programs that he's interested in so for example if you're getting observability data from an ebpf program that's running",
    "start": "393199",
    "end": "400400"
  },
  {
    "text": "in the kernel it's going to throw the data maybe all the events that you want to observe it's going to throw that",
    "start": "400400",
    "end": "405759"
  },
  {
    "text": "information into a map and the user space application can read the data out",
    "start": "405759",
    "end": "411759"
  },
  {
    "text": "of the map at a later point so yeah maps engine instruction sets and the variety",
    "start": "411759",
    "end": "418880"
  },
  {
    "text": "of different places that we can hook programs in i think that really characterizes what makes the e of ebpf",
    "start": "418880",
    "end": "426560"
  },
  {
    "text": "right yes and then the maps of course give you a way of handling state which",
    "start": "426560",
    "end": "431680"
  },
  {
    "text": "is interesting are there different types of maps there's a variety of different types of map but they're essentially all",
    "start": "431680",
    "end": "439199"
  },
  {
    "text": "kind of key value stores and you can write into them from user space and from",
    "start": "439199",
    "end": "444240"
  },
  {
    "text": "kernel space and you can read from them in user space and kernel space so you can use them to transfer information",
    "start": "444240",
    "end": "451199"
  },
  {
    "text": "between the two you can also share them between different bpf programs so you might have one bpf program",
    "start": "451199",
    "end": "458479"
  },
  {
    "text": "attached to one event and another bpf program attached to a different event perhaps at two different points in the",
    "start": "458479",
    "end": "464479"
  },
  {
    "text": "networking stack and you can share information between those two programs using a map so you might for example",
    "start": "464479",
    "end": "470960"
  },
  {
    "text": "correlate knowledge of the networking endpoints between programs that attach",
    "start": "470960",
    "end": "476319"
  },
  {
    "text": "at the socket layer which is as close as it can be to the application and another program acting at the xdp layer",
    "start": "476319",
    "end": "483280"
  },
  {
    "text": "which is as close as it can be to the network interface when we think about a programming",
    "start": "483280",
    "end": "490160"
  },
  {
    "text": "language inside another environment i might think about say lua in a gaming",
    "start": "490160",
    "end": "496080"
  },
  {
    "text": "engine or maybe javascript in a web browser are those useful points of",
    "start": "496080",
    "end": "501120"
  },
  {
    "text": "comparison do you think actually there really are there's a chat called brendan greg who did a lot of the",
    "start": "501120",
    "end": "506560"
  },
  {
    "text": "kind of pioneering work for using ebpf for observability and i believe it's a",
    "start": "506560",
    "end": "512080"
  },
  {
    "text": "quote from him that describes it says that ebpf is to the kernel as javascript",
    "start": "512080",
    "end": "518159"
  },
  {
    "text": "is to html it makes it programmable and it allows you to do dynamic changes to",
    "start": "518159",
    "end": "523760"
  },
  {
    "text": "what in the javascript world you know you would have a static web page suddenly it becomes dynamic we have this",
    "start": "523760",
    "end": "529839"
  },
  {
    "text": "programmable ability and that's a nice analogy for evpf in the kernel what's",
    "start": "529839",
    "end": "535519"
  },
  {
    "start": "535000",
    "end": "748000"
  },
  {
    "text": "the underlying motivation for this linux is open source so couldn't you just you",
    "start": "535519",
    "end": "540720"
  },
  {
    "text": "know get the changes you need into the kernel if you need them so i think there's a couple of angles to this one",
    "start": "540720",
    "end": "546320"
  },
  {
    "text": "is linux is enormous and very complicated you know i think it's 30 million odd lines of code",
    "start": "546320",
    "end": "553600"
  },
  {
    "text": "in the linux kernel so if you want to make a change to it it's not going to be",
    "start": "553600",
    "end": "558880"
  },
  {
    "text": "a trivial undertaking and you're going to have to deal with convincing the",
    "start": "558880",
    "end": "563920"
  },
  {
    "text": "whole community that a change that you want to make is appropriate and that it's going to be useful for the linux",
    "start": "563920",
    "end": "570720"
  },
  {
    "text": "community as a whole and maybe you want to do something you know really bespoke and you know that wouldn't necessarily",
    "start": "570720",
    "end": "576880"
  },
  {
    "text": "be useful for everybody so it might not be appropriate to accept a change that",
    "start": "576880",
    "end": "582000"
  },
  {
    "text": "you might want to make for a specific purpose into the general purpose linux kernel so even if you",
    "start": "582000",
    "end": "589120"
  },
  {
    "text": "convince everyone that your change is a really good idea you would make the change and it might",
    "start": "589120",
    "end": "595120"
  },
  {
    "text": "get accepted maybe you're a super fast programmer and it takes virtually no time to get that code written and get it",
    "start": "595120",
    "end": "600800"
  },
  {
    "text": "accepted into the kernel but then there is this huge delay between code being added to the mainstream linux",
    "start": "600800",
    "end": "609600"
  },
  {
    "text": "kernel repos and actually being run in production it literally takes years you don't just",
    "start": "609600",
    "end": "616880"
  },
  {
    "text": "download the kernel onto your machine you'll typically take a linux distribution like rel or ubuntu or arch",
    "start": "616880",
    "end": "624160"
  },
  {
    "text": "or alpine or whatever and those distributions are packaging up stable",
    "start": "624160",
    "end": "630160"
  },
  {
    "text": "releases of the kernel but quite often they're years old they're often using",
    "start": "630160",
    "end": "635680"
  },
  {
    "text": "time to convince themselves of the stability of those versions of the kernel the",
    "start": "635680",
    "end": "642160"
  },
  {
    "text": "latest rel release i'm trying to remember it i think it's using a kernel that's from",
    "start": "642160",
    "end": "647519"
  },
  {
    "text": "2017 or 2018 i think 2018. we could check on that you know so it's three to",
    "start": "647519",
    "end": "652800"
  },
  {
    "text": "four years between code making it into a kernel release and actually being",
    "start": "652800",
    "end": "658399"
  },
  {
    "text": "included in the distribution that you might run in an enterprise environment so you probably don't want to wait three",
    "start": "658399",
    "end": "665200"
  },
  {
    "text": "or four years for your change to the kernel yeah if we can just load it dynamically we don't even have to reboot the machine",
    "start": "665200",
    "end": "671760"
  },
  {
    "text": "you can literally just load a program into the kernel dynamically and that can",
    "start": "671760",
    "end": "677200"
  },
  {
    "text": "be amazing for running custom codes but making custom behaviors and also for",
    "start": "677200",
    "end": "683519"
  },
  {
    "text": "security mitigations there's a really great example of the idea of a packet of",
    "start": "683519",
    "end": "689120"
  },
  {
    "text": "death what's a packet of death so if you have a colonel vulnerability that for",
    "start": "689120",
    "end": "694560"
  },
  {
    "text": "whatever reason isn't able to handle a particularly crafted network packet you",
    "start": "694560",
    "end": "700079"
  },
  {
    "text": "know perhaps there's a length field that is incorrectly set up and the colonel",
    "start": "700079",
    "end": "705360"
  },
  {
    "text": "through a vulnerability maybe doesn't handle that correctly and and reads off the end of the buffer or something like",
    "start": "705360",
    "end": "710639"
  },
  {
    "text": "that and with ebpf there have been at least one case of this where to mitigate",
    "start": "710639",
    "end": "717200"
  },
  {
    "text": "a packet of death vulnerability you can just have an ebpf program distribute that immediately load it into production",
    "start": "717200",
    "end": "724560"
  },
  {
    "text": "environments and you are immediately no longer vulnerable to the packet of death that would have otherwise crashed your",
    "start": "724560",
    "end": "731279"
  },
  {
    "text": "production machines literally in a matter of you know minutes rather than waiting for a",
    "start": "731279",
    "end": "737760"
  },
  {
    "text": "security patch can mitigate this kind of security issue i think that's a really powerful example of how ebpf can be",
    "start": "737760",
    "end": "745680"
  },
  {
    "text": "really useful from a security patching perspective it's interesting that you bring up the security angle because",
    "start": "745680",
    "end": "751120"
  },
  {
    "text": "obviously if i'm running custom code in kernel space there's not a lot i can't do there are",
    "start": "751120",
    "end": "758000"
  },
  {
    "text": "an awful lot of things i could do as a malicious actor in a system once i've got code loaded there so how does the",
    "start": "758000",
    "end": "765440"
  },
  {
    "text": "verifier work in ebpf how safe is it how secure is it when you load a bpf program into the",
    "start": "765440",
    "end": "773120"
  },
  {
    "text": "kernel it goes through a step called verification and this is checking that",
    "start": "773120",
    "end": "779200"
  },
  {
    "text": "the program is safe to run it's got to be safe from the perspective of not crashing so it's going to analyze the",
    "start": "779200",
    "end": "785839"
  },
  {
    "text": "program and make sure that it's going to run to completion that it's not doing any null pointer d",
    "start": "785839",
    "end": "792240"
  },
  {
    "text": "references when you're writing programs you have to explicitly check every single pointer to",
    "start": "792240",
    "end": "798959"
  },
  {
    "text": "make sure that it's not null before you dereference it otherwise the verifier will reject your program",
    "start": "798959",
    "end": "805839"
  },
  {
    "text": "and you're also limited in what you're allowed to do in terms of accessing memory and in",
    "start": "805839",
    "end": "811440"
  },
  {
    "text": "order to get information about the kernel there are a set of what are called bpf helper functions so for",
    "start": "811440",
    "end": "818000"
  },
  {
    "text": "example if you want to find out the current time or the current process id",
    "start": "818000",
    "end": "823760"
  },
  {
    "text": "you'd use a helper function to do that and depending on the context in which you're running a bpf program",
    "start": "823760",
    "end": "830959"
  },
  {
    "text": "you're allowed to use a different set of helper functions you wouldn't be allowed to",
    "start": "830959",
    "end": "836480"
  },
  {
    "text": "access a helper function related to a network packet if you weren't in the context of processing a network packet",
    "start": "836480",
    "end": "843360"
  },
  {
    "text": "for example and these helper functions make sure that you're only accessing memory that",
    "start": "843360",
    "end": "850079"
  },
  {
    "text": "the particular process related to this function is allowed to access so that helps from a security",
    "start": "850079",
    "end": "857120"
  },
  {
    "text": "point of view ensure that one application can't use bpf to read data",
    "start": "857120",
    "end": "862480"
  },
  {
    "text": "from another applications process for example so that bpf verification process",
    "start": "862480",
    "end": "867680"
  },
  {
    "text": "is very strict can be quite a challenge to get your bpf programs to pass the verification step",
    "start": "867680",
    "end": "874800"
  },
  {
    "text": "it's one of the kind of i guess arts of programming for pppf but it's an extremely powerful way of sandboxing",
    "start": "874800",
    "end": "882480"
  },
  {
    "text": "what your different bpf programs can do that said",
    "start": "882480",
    "end": "887519"
  },
  {
    "text": "bpf programs are very powerful and a correct bpf program could still be",
    "start": "887519",
    "end": "893279"
  },
  {
    "text": "written by a malicious user or loaded by a malicious user to do something that",
    "start": "893279",
    "end": "898880"
  },
  {
    "text": "might be totally legitimate in one scenario and completely malicious in another so for example if i let you",
    "start": "898880",
    "end": "907040"
  },
  {
    "text": "load a packet filter into my running system you can start looking all my network",
    "start": "907040",
    "end": "913279"
  },
  {
    "text": "traffic that's not necessarily what i want you to be able to do you know you could be sending it off to a different",
    "start": "913279",
    "end": "918320"
  },
  {
    "text": "network destination so you know more allow someone to run bpf code than you",
    "start": "918320",
    "end": "923440"
  },
  {
    "text": "would allow them to have root access to your machine it's something that comes",
    "start": "923440",
    "end": "928800"
  },
  {
    "text": "with great privilege and great responsibility we've kind of hinted at this already but we should probably make it explicit just because i think the",
    "start": "928800",
    "end": "935600"
  },
  {
    "start": "931000",
    "end": "1021000"
  },
  {
    "text": "name is slightly confusing so this isn't purely about networking there are quite a lot of other",
    "start": "935600",
    "end": "941240"
  },
  {
    "text": "non-networking use cases that you can use eppf for right things like tracing",
    "start": "941240",
    "end": "946560"
  },
  {
    "text": "profiling security and so on absolutely it's a really great point and there's been a lot of use for observability i",
    "start": "946560",
    "end": "955360"
  },
  {
    "text": "mentioned brendan greg and the work that he did and does at netflix he and others",
    "start": "955360",
    "end": "961040"
  },
  {
    "text": "have built this huge array of tools that allow you to inspect what's going on and",
    "start": "961040",
    "end": "967120"
  },
  {
    "text": "measure what's going on in you know you mention it across the kernel there will be a tool to measure it you know looking",
    "start": "967120",
    "end": "973839"
  },
  {
    "text": "at what files are being opened looking at the speed of io there's dozens of",
    "start": "973839",
    "end": "979199"
  },
  {
    "text": "these little command line tools that you can run to get data about how your system is performing",
    "start": "979199",
    "end": "985440"
  },
  {
    "text": "really really powerful and show the breadth of what you can do from an observability perspective",
    "start": "985440",
    "end": "991199"
  },
  {
    "text": "and then if we start thinking about observing what's happening in a running",
    "start": "991199",
    "end": "996720"
  },
  {
    "text": "system we can look at what an application is doing i mentioned the idea of observing what files are being",
    "start": "996720",
    "end": "1003680"
  },
  {
    "text": "opened and you could use that from a security perspective you can say well is this",
    "start": "1003680",
    "end": "1010240"
  },
  {
    "text": "file that this application's looking at is that legitimate for example and",
    "start": "1010240",
    "end": "1015279"
  },
  {
    "text": "another really great example of um security use of bpf is setcom okay so the word",
    "start": "1015279",
    "end": "1022560"
  },
  {
    "start": "1021000",
    "end": "1140000"
  },
  {
    "text": "setcomp is a contraction of secure computing or secure computing made and that's the linux kernel feature that",
    "start": "1022560",
    "end": "1028640"
  },
  {
    "text": "allows you to restrict the actions available within a running container via profiles how does that work in this",
    "start": "1028640",
    "end": "1034880"
  },
  {
    "text": "context you associate a setcomp profile with an application to say",
    "start": "1034880",
    "end": "1040480"
  },
  {
    "text": "this application is allowed to run this set of system calls so we mentioned syscalls before this this interface",
    "start": "1040480",
    "end": "1047918"
  },
  {
    "text": "between user space and the kernel and occasionally there are system calls that it doesn't make sense for many",
    "start": "1047919",
    "end": "1054559"
  },
  {
    "text": "applications to have access to can you give an example very few applications that you're",
    "start": "1054559",
    "end": "1061039"
  },
  {
    "text": "running day to day should be able to change the system time on your platform you want that system time to be kind of",
    "start": "1061039",
    "end": "1067600"
  },
  {
    "text": "fixed and known so a lot of second profiles would disallow the setting of",
    "start": "1067600",
    "end": "1072880"
  },
  {
    "text": "time on the machine so setcomp is a really commonly used use of bps that a",
    "start": "1072880",
    "end": "1078960"
  },
  {
    "text": "lot of people don't realize is actually using ppf to do it but you can take that a lot further we",
    "start": "1078960",
    "end": "1084559"
  },
  {
    "text": "can write evpf code to not just look at system calls but look at a much broader",
    "start": "1084559",
    "end": "1091039"
  },
  {
    "text": "range of events there's some really great work being done around the linux security module",
    "start": "1091039",
    "end": "1097840"
  },
  {
    "text": "interface so it's called bpf lsm this is the interface within the kernel that",
    "start": "1097840",
    "end": "1103919"
  },
  {
    "text": "tools like app armor use to police whether or not operations are",
    "start": "1103919",
    "end": "1109840"
  },
  {
    "text": "permissible or not from a security perspective you'd have a security profile and with bpflsm we can make",
    "start": "1109840",
    "end": "1115520"
  },
  {
    "text": "those profiles much more dynamic we can be a lot more driven by the context of the application and so i think there's",
    "start": "1115520",
    "end": "1122000"
  },
  {
    "text": "going to be some really powerful tools built on bpf lsm and those are not just",
    "start": "1122000",
    "end": "1127679"
  },
  {
    "text": "about observing whether or not behavior is good or bad but they can actually prevent",
    "start": "1127679",
    "end": "1132960"
  },
  {
    "text": "for example i'm not going to let this application access that file above and beyond what the file",
    "start": "1132960",
    "end": "1138640"
  },
  {
    "text": "permissions would permit there's an interesting thing here which i think is worth just sort of pulling out and",
    "start": "1138640",
    "end": "1144240"
  },
  {
    "start": "1140000",
    "end": "1278000"
  },
  {
    "text": "making explicit when i think about ebpf i think about people writing custom code",
    "start": "1144240",
    "end": "1149440"
  },
  {
    "text": "to run in the container in the kernel in production but actually probably a more",
    "start": "1149440",
    "end": "1154640"
  },
  {
    "text": "common use case like the sac comp example we were just talking about is something more like an end user someone",
    "start": "1154640",
    "end": "1160799"
  },
  {
    "text": "who's deploying a pre-written ebpf program in order to modify the behavior",
    "start": "1160799",
    "end": "1166240"
  },
  {
    "text": "of a linux kernel in some way yeah i think for most users",
    "start": "1166240",
    "end": "1171919"
  },
  {
    "text": "they will find it quite challenging to write bpf programs now personally i'm",
    "start": "1171919",
    "end": "1178880"
  },
  {
    "text": "someone who loves to kind of get involved write some code to really understand how things work and i know",
    "start": "1178880",
    "end": "1185280"
  },
  {
    "text": "enough to know that i can write some basic bpf code but i can rapidly get to",
    "start": "1185280",
    "end": "1190320"
  },
  {
    "text": "the point where you are dealing with linux kernel structures and events that",
    "start": "1190320",
    "end": "1196000"
  },
  {
    "text": "happen in the context of the kernel so you quite quickly need some knowledge about how the kernel's operating and",
    "start": "1196000",
    "end": "1203120"
  },
  {
    "text": "that's pretty in-depth knowledge which most of us don't have so",
    "start": "1203120",
    "end": "1208159"
  },
  {
    "text": "although i'm really quite excited about kind of getting in there and looking at ubpf code to understand it the reality",
    "start": "1208159",
    "end": "1215360"
  },
  {
    "text": "of it is that for most of us that's an intellectual exercise rather than something we'd really want to build i",
    "start": "1215360",
    "end": "1220880"
  },
  {
    "text": "think the use of ebpf as a platform it's going to be based on people",
    "start": "1220880",
    "end": "1226240"
  },
  {
    "text": "using tools using projects using products that are already written and",
    "start": "1226240",
    "end": "1231600"
  },
  {
    "text": "perhaps they can define particular profiles that are using ebpf to implement that",
    "start": "1231600",
    "end": "1237440"
  },
  {
    "text": "tool psyllium would be a really great example of that so psyllium is a networking project it's known as a",
    "start": "1237440",
    "end": "1243840"
  },
  {
    "text": "kubernetes cni although it can be used for networking in non-kubernetes environments as well",
    "start": "1243840",
    "end": "1249520"
  },
  {
    "text": "and as an example of a profile for example psyllium can enforce networking",
    "start": "1249520",
    "end": "1255360"
  },
  {
    "text": "security profiles and you would write your profile in terms of what ip",
    "start": "1255360",
    "end": "1261200"
  },
  {
    "text": "addresses or even what domain names a particular application is allowed to access psyllium can convert that into",
    "start": "1261200",
    "end": "1269280"
  },
  {
    "text": "ebpf programs that enforce that profile so you don't have to know about the ebpf",
    "start": "1269280",
    "end": "1275600"
  },
  {
    "text": "code in order to use that security profile i want to come back to cilium in a second actually but before we go there",
    "start": "1275600",
    "end": "1282480"
  },
  {
    "start": "1278000",
    "end": "1387000"
  },
  {
    "text": "if you want to write programs for ebpf obviously the underlying format is bytecode it looks a bit like x86",
    "start": "1282480",
    "end": "1289440"
  },
  {
    "text": "assembly maybe or perhaps java byte code if people are familiar with that but how do you actually write it do you write it",
    "start": "1289440",
    "end": "1295280"
  },
  {
    "text": "as byte code or do you write it in some higher level language and then compile it across there are people who do write",
    "start": "1295280",
    "end": "1301120"
  },
  {
    "text": "bytecode directly i'm not one of them so you have to have compiler support to",
    "start": "1301120",
    "end": "1306400"
  },
  {
    "text": "compile to the bpf byte code and today that compiler support is available in",
    "start": "1306400",
    "end": "1312240"
  },
  {
    "text": "clang if you want to write code in c and more recently you can also compile",
    "start": "1312240",
    "end": "1317679"
  },
  {
    "text": "rus code to bpf targets so those are your limited choices for writing the",
    "start": "1317679",
    "end": "1323600"
  },
  {
    "text": "code that's going to run actually within the kernel itself there are certainly",
    "start": "1323600",
    "end": "1328799"
  },
  {
    "text": "circumstances where you really just want to write the bpf code and then you can use there are things like bpf tool which",
    "start": "1328799",
    "end": "1335440"
  },
  {
    "text": "is general purpose you can do quite a lot of things with bpf tool but one of the things you can do is load programs into the kernel so",
    "start": "1335440",
    "end": "1344159"
  },
  {
    "text": "you wouldn't necessarily have to write your own user space code but most of the time we do want to write something in",
    "start": "1344159",
    "end": "1351360"
  },
  {
    "text": "user space as well that's going to perhaps configure the ebpf code perhaps",
    "start": "1351360",
    "end": "1356400"
  },
  {
    "text": "get information out of that bpf program so we're often going to be writing not just",
    "start": "1356400",
    "end": "1362159"
  },
  {
    "text": "the kernel code but also some user space code and there's a much broader range of support for different languages there",
    "start": "1362159",
    "end": "1368960"
  },
  {
    "text": "are libraries for go there are libraries for python rust there's a framework",
    "start": "1368960",
    "end": "1374240"
  },
  {
    "text": "called bcc which supports c and python and lua to my recollection",
    "start": "1374240",
    "end": "1380720"
  },
  {
    "text": "so yeah you have a lot more choice for your user space language than you do for the code that eventually becomes the",
    "start": "1380720",
    "end": "1386480"
  },
  {
    "text": "bytecode i mean how does my ebpf program actually hook into the kernel are there",
    "start": "1386480",
    "end": "1392159"
  },
  {
    "start": "1387000",
    "end": "1563000"
  },
  {
    "text": "like predefined hook points that i have or how does that work you've actually got a huge range of places that you can",
    "start": "1392159",
    "end": "1399679"
  },
  {
    "text": "hook your bpf programs too there's what's called k probes and k rep probes",
    "start": "1399679",
    "end": "1404880"
  },
  {
    "text": "which are the entry point and exit point from any kernel function so if you know",
    "start": "1404880",
    "end": "1411120"
  },
  {
    "text": "the name of the function you can hook into it you can also hook to any trace points",
    "start": "1411120",
    "end": "1416400"
  },
  {
    "text": "some of those trace points are kind of well defined and not going to change from one kernel version to the next",
    "start": "1416400",
    "end": "1422400"
  },
  {
    "text": "other trace points might move around so you kind of maybe have to know what you're doing a little bit there are",
    "start": "1422400",
    "end": "1427679"
  },
  {
    "text": "events like network events so the arrival of a network packet that kind of takes me to a thing called xtp which i",
    "start": "1427679",
    "end": "1434799"
  },
  {
    "text": "think is just brilliant so xdp stands for express datapath and the idea of",
    "start": "1434799",
    "end": "1440559"
  },
  {
    "text": "this was well you know if we've got network packets arriving from an external network they're coming through",
    "start": "1440559",
    "end": "1446960"
  },
  {
    "text": "a network interface card and then they get to the kernel we want to look at those packets as quickly as",
    "start": "1446960",
    "end": "1452640"
  },
  {
    "text": "possible maybe we want to run a program that's going to drop packets so the earlier we can drop them the less",
    "start": "1452640",
    "end": "1458400"
  },
  {
    "text": "work had to be done to handle that packet so the idea of xgp was well wouldn't it be cool if we didn't even have to get",
    "start": "1458400",
    "end": "1464640"
  },
  {
    "text": "that packet as far as the kernel what if the network interface card could handle it for us so xdp is a type of ebpf",
    "start": "1464640",
    "end": "1472080"
  },
  {
    "text": "program that you can run on the network not all cards support it not all network",
    "start": "1472080",
    "end": "1477120"
  },
  {
    "text": "drivers support it but it's a really nice concept i think that you could offload or program to run actually on a",
    "start": "1477120",
    "end": "1483520"
  },
  {
    "text": "different piece of hardware that's really cool actually i love things like that what's the overhead like if i'm",
    "start": "1483520",
    "end": "1490640"
  },
  {
    "text": "running an ebpf program in my kernel so this is one of those questions that kind of comes up and i always feel like well",
    "start": "1490640",
    "end": "1497039"
  },
  {
    "text": "it's as long as a piece of string you know i could write a pathologically poor ebpf program and attach it to every",
    "start": "1497039",
    "end": "1504080"
  },
  {
    "text": "single possible event and you would definitely notice the difference but typically",
    "start": "1504080",
    "end": "1510000"
  },
  {
    "text": "performance is excellent and in a lot of cases what your ebpf program is doing on",
    "start": "1510000",
    "end": "1517200"
  },
  {
    "text": "an individual event basis is very small you know maybe we're looking at a network packet and dropping it or saying",
    "start": "1517200",
    "end": "1524720"
  },
  {
    "text": "no send this one over here maybe not doing a lot per event but doing that event millions of times",
    "start": "1524720",
    "end": "1531679"
  },
  {
    "text": "it's typically going to run very quickly because it's running in the kernel there's no context switch between kernel",
    "start": "1531679",
    "end": "1537760"
  },
  {
    "text": "and user space for example if we can handle that event entirely within the kernel",
    "start": "1537760",
    "end": "1543360"
  },
  {
    "text": "dropping network packets being a really great example of something that if you don't have to transition to user space",
    "start": "1543360",
    "end": "1549039"
  },
  {
    "text": "that's going to be way more performant so typically ebpf tooling is",
    "start": "1549039",
    "end": "1556159"
  },
  {
    "text": "dramatically more performant than the equivalent in user space because we can",
    "start": "1556159",
    "end": "1561360"
  },
  {
    "text": "avoid these transitions you mentioned psyllium earlier so sort of changing tax slightly let's talk about psyllium a",
    "start": "1561360",
    "end": "1567840"
  },
  {
    "start": "1563000",
    "end": "1751000"
  },
  {
    "text": "little bit so how do psyllium and ebpf relate to each other yeah so i think this is something that",
    "start": "1567840",
    "end": "1574640"
  },
  {
    "text": "maybe it's not always obvious to people when they see psyllium the project the people who created the cilium project",
    "start": "1574640",
    "end": "1581279"
  },
  {
    "text": "were involved in the early days of ebpf as well people like thomas graf and daniel balkman who were working on",
    "start": "1581279",
    "end": "1588159"
  },
  {
    "text": "networking in the kernel and still do and specifically looking at ebpf in the",
    "start": "1588159",
    "end": "1594720"
  },
  {
    "text": "kernel and realizing how powerful this could be for networking for the ability to sidestep some of the things like ip",
    "start": "1594720",
    "end": "1601120"
  },
  {
    "text": "tables which as your ip tables grow they become less performant particularly in",
    "start": "1601120",
    "end": "1607120"
  },
  {
    "text": "an environment like kubernetes where your pods are coming up and down all the time which means your ip address is",
    "start": "1607120",
    "end": "1612320"
  },
  {
    "text": "coming up and down all the time which means if you're using ip tables you have to rewrite those tables all the time and",
    "start": "1612320",
    "end": "1617840"
  },
  {
    "text": "they're not designed to make small changes related to one endpoint so",
    "start": "1617840",
    "end": "1623279"
  },
  {
    "text": "thomas and daniel and others had realized that this was a really great opportunity for ebpf to rationalize the",
    "start": "1623279",
    "end": "1629200"
  },
  {
    "text": "way that networking could work so psyllium has its roots in networking it",
    "start": "1629200",
    "end": "1635120"
  },
  {
    "text": "does kind of go hand-in-hand with ebpf development because some of the psyllium",
    "start": "1635120",
    "end": "1640399"
  },
  {
    "text": "maintainers are also making changes in the kernel the kernel maintainers as well",
    "start": "1640399",
    "end": "1646000"
  },
  {
    "text": "so we can see the development of sodium and ebpf kind of stepping up together over time but today cilium is primarily",
    "start": "1646000",
    "end": "1655039"
  },
  {
    "text": "known i think for networking but also providing a bunch of observability and security",
    "start": "1655039",
    "end": "1661279"
  },
  {
    "text": "features as well that are sometimes less well-known we have a component called hubble that gives you really great",
    "start": "1661279",
    "end": "1667520"
  },
  {
    "text": "network flow visibility so you can see where traffic is flowing within your network and",
    "start": "1667520",
    "end": "1673039"
  },
  {
    "text": "within kubernetes identities because it's aware of the pods services all the",
    "start": "1673039",
    "end": "1678720"
  },
  {
    "text": "kind of kubernetes identity information is known by psyllium so we can very",
    "start": "1678720",
    "end": "1684240"
  },
  {
    "text": "easily show you not just that this packet went from ip address a to ip",
    "start": "1684240",
    "end": "1690320"
  },
  {
    "text": "address b but also what kubernetes entities were involved in that network flight and also security i mean i",
    "start": "1690320",
    "end": "1696880"
  },
  {
    "text": "mentioned network policy earlier there's also some really interesting work that we've",
    "start": "1696880",
    "end": "1702640"
  },
  {
    "text": "been experimenting with let's say an application makes a network connection we know what kubernetes entity was",
    "start": "1702640",
    "end": "1709440"
  },
  {
    "text": "involved but we also know what process was involved and we can use that information to find out what was the",
    "start": "1709440",
    "end": "1716399"
  },
  {
    "text": "executable that was running at the time and was that an expected executable did we expect that executable to be opening",
    "start": "1716399",
    "end": "1723679"
  },
  {
    "text": "that network connection does this look like a cryptocurrency miner for example do we expect a pod to run for the days",
    "start": "1723679",
    "end": "1732320"
  },
  {
    "text": "and then suddenly start creating network connections or is that perhaps a sign that the pod has been compromised in",
    "start": "1732320",
    "end": "1738480"
  },
  {
    "text": "some way so combining the network information with some knowledge about what the application is that's running",
    "start": "1738480",
    "end": "1746399"
  },
  {
    "text": "can provide some really powerful sort of higher level runtime security tooling as well now google announced that they were",
    "start": "1746399",
    "end": "1752960"
  },
  {
    "start": "1751000",
    "end": "2035000"
  },
  {
    "text": "using psyllium for a new data plane for gke and i know that you've also now",
    "start": "1752960",
    "end": "1759679"
  },
  {
    "text": "introduced a beta for an ebpf based service mesh as part of psyllium 1.11 so",
    "start": "1759679",
    "end": "1767120"
  },
  {
    "text": "can you talk a little bit about that i'm presuming there's some efficiency gains there as against the sort of",
    "start": "1767120",
    "end": "1772559"
  },
  {
    "text": "conventional site car proxy model that we typically use but can you talk a",
    "start": "1772559",
    "end": "1777600"
  },
  {
    "text": "little bit about that why is psyllium a good solution to the problem that service mesh is trying",
    "start": "1777600",
    "end": "1783279"
  },
  {
    "text": "to solve yeah so different people's interpretation of what service mesh is",
    "start": "1783279",
    "end": "1789039"
  },
  {
    "text": "varies from one person to the next but if we look at some of the individual capabilities of service meshes well one",
    "start": "1789039",
    "end": "1795600"
  },
  {
    "text": "thing it's doing is it's load balancing traffic here are three different versions of the same application but",
    "start": "1795600",
    "end": "1801600"
  },
  {
    "text": "we're going to canary test between these three different versions for example that's load balancing it's a network",
    "start": "1801600",
    "end": "1808159"
  },
  {
    "text": "function that we already had in psyllium getting observability into traffic",
    "start": "1808159",
    "end": "1814480"
  },
  {
    "text": "observability is a big part i think of what people expect from a service mesh for some time selium has worked with the",
    "start": "1814480",
    "end": "1822000"
  },
  {
    "text": "envoy proxy we have observability at kind of layer 3 4 within civilium itself",
    "start": "1822000",
    "end": "1827279"
  },
  {
    "text": "and then we can also use envoy to get observability at layer 7.",
    "start": "1827279",
    "end": "1832559"
  },
  {
    "text": "so that kind of observability angle was kind of already almost there things like identity awareness you know",
    "start": "1832559",
    "end": "1839760"
  },
  {
    "text": "psyllium is already identity aware tls termination and ingress capabilities",
    "start": "1839760",
    "end": "1847279"
  },
  {
    "text": "we were kind of already at like we've got kind of 90 of what people expect a",
    "start": "1847279",
    "end": "1852399"
  },
  {
    "text": "service mesh to be how do we take it that last step so what we're doing in there beta is really saying",
    "start": "1852399",
    "end": "1858960"
  },
  {
    "text": "well here is psyllium as the data plane for your service mesh how do users want to configure that",
    "start": "1858960",
    "end": "1864480"
  },
  {
    "text": "what's the kind of control plane what's the management interface that people want to use to configure that i think",
    "start": "1864480",
    "end": "1870799"
  },
  {
    "text": "one of the reasons why it's really really compelling is we talked before",
    "start": "1870799",
    "end": "1875840"
  },
  {
    "text": "about how ebpf allows you to avoid these transitions between kernel and user",
    "start": "1875840",
    "end": "1881200"
  },
  {
    "text": "space and if you look at the path that a network packet takes",
    "start": "1881200",
    "end": "1886559"
  },
  {
    "text": "when you're using a sidecar model service mesh which is the model that",
    "start": "1886559",
    "end": "1892000"
  },
  {
    "text": "service meshes have all used thus far every single pod's got its own sidecar so if we imagine traffic flowing between",
    "start": "1892000",
    "end": "1898799"
  },
  {
    "text": "two different pods a network packet has to go sort of through the networking stack on the kernel",
    "start": "1898799",
    "end": "1904640"
  },
  {
    "text": "up to the proxy that's in user space in the sidecar back down into the kernel to",
    "start": "1904640",
    "end": "1910240"
  },
  {
    "text": "be then routed to the application and if it's coming from the application to another application pod it's going to do",
    "start": "1910240",
    "end": "1917600"
  },
  {
    "text": "that transition into the sidecar so as it leaves one pod and then again as it",
    "start": "1917600",
    "end": "1922880"
  },
  {
    "text": "enters another pod so we've transitioned that packet in and out of the kernel kind of endless times",
    "start": "1922880",
    "end": "1930960"
  },
  {
    "text": "and because psyllium is inherently involved in the networking at either end",
    "start": "1930960",
    "end": "1936559"
  },
  {
    "text": "of the pod we don't have to keep passing it backwards and forwards through these user space proxies we can have a single",
    "start": "1936559",
    "end": "1943840"
  },
  {
    "text": "instance of the proxy running on the kernel and take that network packet straight from one pod",
    "start": "1943840",
    "end": "1950640"
  },
  {
    "text": "through the kernel to that proxy proxy can decide what to do with it and then it transitions into the kernel just that",
    "start": "1950640",
    "end": "1957120"
  },
  {
    "text": "one more time so the early indications performance-wise are really really good i think that was",
    "start": "1957120",
    "end": "1963679"
  },
  {
    "text": "what we expected to see because of the greater well much much fewer transition points",
    "start": "1963679",
    "end": "1970320"
  },
  {
    "text": "and it's good to see that's actually turning out to be true it's working out in practice yeah that's",
    "start": "1970320",
    "end": "1975360"
  },
  {
    "text": "excellent yes psyllium 1.11 came out in december of last year",
    "start": "1975360",
    "end": "1980720"
  },
  {
    "text": "what else is new and exciting for you in that release i think i mentioned that",
    "start": "1980720",
    "end": "1985840"
  },
  {
    "text": "psyllium is not exclusively used in kubernetes environments and a lot of the",
    "start": "1985840",
    "end": "1991919"
  },
  {
    "text": "additional features that we've been working on over the last couple of releases have been enabling particularly",
    "start": "1991919",
    "end": "1999120"
  },
  {
    "text": "kind of large-scale networks to use psyllium either in a kind of combined kubernetes and and bgp environment or",
    "start": "1999120",
    "end": "2006480"
  },
  {
    "text": "perhaps in a standalone networking environment so some of the interesting things involve what if you've got two",
    "start": "2006480",
    "end": "2012640"
  },
  {
    "text": "different kubernetes clusters running in different data centers and you own the bgp connection between the two so we can",
    "start": "2012640",
    "end": "2019600"
  },
  {
    "text": "enable psyllium kind of understanding that endpoints the ip address management at either end of that and advertising it",
    "start": "2019600",
    "end": "2026080"
  },
  {
    "text": "across your bgp network so some of these kind of more on-prem high scale",
    "start": "2026080",
    "end": "2031360"
  },
  {
    "text": "capabilities that some of our users have really been asking for that's fantastic if listeners want to go and learn more",
    "start": "2031360",
    "end": "2038720"
  },
  {
    "start": "2035000",
    "end": "2148000"
  },
  {
    "text": "about either ebpf or psyllium where is a good place for them to go and maybe get",
    "start": "2038720",
    "end": "2044640"
  },
  {
    "text": "started if they want to look at web pages seleum.io and ebpf.io",
    "start": "2044640",
    "end": "2051679"
  },
  {
    "text": "are a great place to start if they want to find knowledgeable people and",
    "start": "2051679",
    "end": "2056720"
  },
  {
    "text": "communicate with them there is a really great ebpf and psyllium slack community",
    "start": "2056720",
    "end": "2061919"
  },
  {
    "text": "i mentioned before about how psyllium and evpf have kind of grown together in kind of lockstep and that's really why",
    "start": "2061919",
    "end": "2068638"
  },
  {
    "text": "the slack community covers both ebpf and psyllium we have this sort of history of both the ebpf implementation and the",
    "start": "2068639",
    "end": "2075599"
  },
  {
    "text": "psyllium implementation community there i mean it's a really great community and there's a lot of helpful people if you",
    "start": "2075599",
    "end": "2082000"
  },
  {
    "text": "want to come and ask questions and learn about evpf maybe i'll also mention",
    "start": "2082000",
    "end": "2087280"
  },
  {
    "text": "myself and my colleague duffy cooley host a weekly we call it ebpf and",
    "start": "2087280",
    "end": "2092878"
  },
  {
    "text": "psyllium office hours which loosely stands for echo so on fridays you can come and join us on youtube we explore",
    "start": "2092879",
    "end": "2099760"
  },
  {
    "text": "lots of topics related to evpf tooling and psyllium and that whole world and we",
    "start": "2099760",
    "end": "2104880"
  },
  {
    "text": "very much welcome people coming and getting involved chatting with us asking us questions particularly on the live stream fantastic and i'll make sure that",
    "start": "2104880",
    "end": "2111839"
  },
  {
    "text": "all of those links are included in the show notes for this episode when it appears on infoqueue.com liz thank you",
    "start": "2111839",
    "end": "2119839"
  },
  {
    "text": "so much for joining me this week on the infocu podcast my absolute pleasure thanks for having me",
    "start": "2119839",
    "end": "2128280"
  },
  {
    "text": "[Music]",
    "start": "2132730",
    "end": "2147680"
  },
  {
    "text": "you",
    "start": "2148000",
    "end": "2150079"
  }
]