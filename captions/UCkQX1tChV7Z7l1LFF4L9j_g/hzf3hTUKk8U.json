[
  {
    "start": "0",
    "end": "173000"
  },
  {
    "text": "all right so my name is renar I'm gonna be talking about things that I don't normally talk about uh things that make",
    "start": "8160",
    "end": "14080"
  },
  {
    "text": "me uncomfortable I'm I'm going to be talking about how functional programming",
    "start": "14080",
    "end": "19199"
  },
  {
    "text": "is terrible okay um now those who know me you know",
    "start": "19199",
    "end": "25359"
  },
  {
    "text": "that I'm you know I'm a functional programming Zealot and extremist uh but I'm going to do kind of like a",
    "start": "25359",
    "end": "30480"
  },
  {
    "text": "Counterpoint to that here now I'm going to talk about sort of the other side of things",
    "start": "30480",
    "end": "35640"
  },
  {
    "text": "okay but you know obviously this is hyper and it has a happy ending so you know if you were worried about that then",
    "start": "35640",
    "end": "41000"
  },
  {
    "text": "you can rest easy okay so first of all let's talk about",
    "start": "41000",
    "end": "50559"
  },
  {
    "text": "um how do I skip to the next slot here we go so first let's talk about what",
    "start": "50559",
    "end": "55719"
  },
  {
    "text": "functional programming is what what do I mean when I say functional programming uh so I don't mean you know a buzzwordy",
    "start": "55719",
    "end": "61600"
  },
  {
    "text": "fuzzy kind of thing like oh I'm doing functional programming because I'm doing maps and filters um I mean you know uh",
    "start": "61600",
    "end": "69240"
  },
  {
    "text": "programming where your entire program is a single referentially transparent expression composed of other",
    "start": "69240",
    "end": "74880"
  },
  {
    "text": "referentially transparent Expressions okay no side effects uh you know no",
    "start": "74880",
    "end": "81159"
  },
  {
    "text": "mutability no no Global mutable State uh and that kind of thing you still do you know IO and that kind of thing but you",
    "start": "81159",
    "end": "88040"
  },
  {
    "text": "do them in a compositional way you know like with with the Scola Ed stream uh library and that kind of thing okay so",
    "start": "88040",
    "end": "94880"
  },
  {
    "text": "everything purely functional that's what I mean by functional programming so let's talk about the reasons why this",
    "start": "94880",
    "end": "102159"
  },
  {
    "text": "can be terrible so the reason number one that functional programming is terrible in Scala is that it insists on tail call",
    "start": "102159",
    "end": "110040"
  },
  {
    "text": "elimination this is not optional and Scala does not have this so this is kind",
    "start": "110040",
    "end": "115840"
  },
  {
    "text": "of a a terrible requirement so what are tail calls let's",
    "start": "115840",
    "end": "120960"
  },
  {
    "text": "first you know get that out of the way uh tail calls are uh the last thing that",
    "start": "120960",
    "end": "126640"
  },
  {
    "text": "a function does right so here the call uh B of V is in tail position because",
    "start": "126640",
    "end": "132879"
  },
  {
    "text": "it's the last thing that this function Fu does uh in the true branch of this if statement right there's nothing further",
    "start": "132879",
    "end": "139239"
  },
  {
    "text": "to be done after calling B of there's nothing further that Fu needs to do uh",
    "start": "139239",
    "end": "144599"
  },
  {
    "text": "and conversely C of V here is a call that is not in tail position it's not a tail call because it still has to add",
    "start": "144599",
    "end": "150840"
  },
  {
    "text": "one to the result uh the result is I mean the uh the effect of that is that",
    "start": "150840",
    "end": "157120"
  },
  {
    "text": "uh theoretically at least the compiler could uh figure out that Fu has no",
    "start": "157120",
    "end": "162200"
  },
  {
    "text": "further work to do after calling B and then b instead of returning to Fu could return to the caller of Fu and that",
    "start": "162200",
    "end": "168720"
  },
  {
    "text": "elimination of Stack frames uh is tail call elimination now Scola does some tail",
    "start": "168720",
    "end": "175280"
  },
  {
    "start": "173000",
    "end": "173000"
  },
  {
    "text": "call elimination it can eliminate self-recursive tail calls uh so here's a a recursive definition of",
    "start": "175280",
    "end": "182319"
  },
  {
    "text": "a factorial function that is not tail recursive uh and so you know no tail calls here we can't do anything but we",
    "start": "182319",
    "end": "188120"
  },
  {
    "text": "can refactor this to be tail recursive so here we can uh actually see that the",
    "start": "188120",
    "end": "195360"
  },
  {
    "text": "uh the go function this helper function is calling itself as the last step and",
    "start": "195360",
    "end": "200519"
  },
  {
    "text": "so Scala will actually figure out that you know there's nothing else that go needs to to do after it calls itself and",
    "start": "200519",
    "end": "208120"
  },
  {
    "text": "so it'll actually compile this to a jump instead of a function call and a jump is",
    "start": "208120",
    "end": "213640"
  },
  {
    "text": "exactly what a while loop is compiled to so this while loop version of the",
    "start": "213640",
    "end": "218680"
  },
  {
    "text": "factorial function is exactly equivalent to the tail recursive uh function that we saw before but Scala does nothing to",
    "start": "218680",
    "end": "227120"
  },
  {
    "start": "225000",
    "end": "225000"
  },
  {
    "text": "help you with intermethod tail calls with tail calls uh between methods for",
    "start": "227120",
    "end": "232680"
  },
  {
    "text": "example where this Fu function is calling B fun this B function uh because",
    "start": "232680",
    "end": "237720"
  },
  {
    "text": "and this is because of Java's call semantics so Scala has made this design choice that uh Java's call semantics",
    "start": "237720",
    "end": "245519"
  },
  {
    "text": "have to be emulated or you know have to be compatible with with scholas and so when you call a method you know it",
    "start": "245519",
    "end": "252000"
  },
  {
    "text": "implements it as the bite code you know uh invoke function and so Java's call",
    "start": "252000",
    "end": "258440"
  },
  {
    "text": "Syms require that there is a stack frame for every function call and that's a real problem for functional programming",
    "start": "258440",
    "end": "265240"
  },
  {
    "start": "263000",
    "end": "263000"
  },
  {
    "text": "because functional programming being terrible as it is it insists on taale",
    "start": "265240",
    "end": "270919"
  },
  {
    "text": "calls why is that why is this important for functional programming well it's because in",
    "start": "270919",
    "end": "278680"
  },
  {
    "text": "functional programming you may want to compose a lot of functions together and you want",
    "start": "278680",
    "end": "284000"
  },
  {
    "text": "it to be completely transparent that when you have a function and it's",
    "start": "284000",
    "end": "289120"
  },
  {
    "text": "composed of a lot of other functions you want that to be transparent to the user but it's not because when you take a",
    "start": "289120",
    "end": "296199"
  },
  {
    "text": "list of functions like this let's say you have here a list of 100,000 functions and you compose them all",
    "start": "296199",
    "end": "301960"
  },
  {
    "text": "together and then you call the resulting function of type A to a that is going to overflow the stack it's going to just",
    "start": "301960",
    "end": "308000"
  },
  {
    "text": "crash and there's some point at which that that list becomes one too long and",
    "start": "308000",
    "end": "313199"
  },
  {
    "text": "it's not consistent between you know 999 functions and 1,000 functions it's going to just like you know overflow the stock",
    "start": "313199",
    "end": "320759"
  },
  {
    "text": "at that sort of breaking point and that's really terrible the solution to this uh in",
    "start": "320759",
    "end": "328520"
  },
  {
    "text": "languages like Scola don't have tail call elimination is to use trampolines and the way trans trampolines work is",
    "start": "328520",
    "end": "335720"
  },
  {
    "start": "334000",
    "end": "334000"
  },
  {
    "text": "that you have a data structure that represents your computation so instead of you know just making calls uh you",
    "start": "335720",
    "end": "341919"
  },
  {
    "text": "capture you suspend the computation and you capture it in a data structure and and here's how that works",
    "start": "341919",
    "end": "348280"
  },
  {
    "text": "you have a data type like this here I'm calling a tail wck uh it can be one of",
    "start": "348280",
    "end": "353479"
  },
  {
    "text": "two things it can either return a value in which case it will be constructed as one of these return uh cas",
    "start": "353479",
    "end": "360280"
  },
  {
    "text": "where we'll actually have a value of type A or it could be a suspension where",
    "start": "360280",
    "end": "365400"
  },
  {
    "text": "you have a function a resumption function that you know something can call to sort of execute a single step of",
    "start": "365400",
    "end": "372000"
  },
  {
    "text": "your computation and the result of resume is another one of these tail Rex so you can imagine that this is sort of",
    "start": "372000",
    "end": "377599"
  },
  {
    "text": "like a list of resumptions where you know you call one resumption and it gives you the next one and then you call",
    "start": "377599",
    "end": "383479"
  },
  {
    "text": "that and it gives you the next one and so you can sort of Step through the computation one step at a time in a",
    "start": "383479",
    "end": "389759"
  },
  {
    "text": "recursive Loop right until you hit one of these return things okay and that's",
    "start": "389759",
    "end": "395680"
  },
  {
    "text": "going to be at the at the very end when the computation has finished and so that gives you uh the ability to to be tail",
    "start": "395680",
    "end": "403720"
  },
  {
    "text": "recursive so instead of returning a value that you get from a function call you put the function call inside one of",
    "start": "403720",
    "end": "410360"
  },
  {
    "text": "these suspensions and return that and the way that we can uh use this",
    "start": "410360",
    "end": "418199"
  },
  {
    "text": "uh in our in our composition here is we",
    "start": "418199",
    "end": "423479"
  },
  {
    "text": "uh we instead of composing just saying like and then instead of calling our functions uh directly",
    "start": "423479",
    "end": "430160"
  },
  {
    "text": "we and this is much longer you know and and more sort of difficult to to see but",
    "start": "430160",
    "end": "435199"
  },
  {
    "text": "so we start with uh sort of the base case is that we return the answer right",
    "start": "435199",
    "end": "440319"
  },
  {
    "text": "and then sort of at each element at each function in this in this list we suspend before we call that function and uh so",
    "start": "440319",
    "end": "449599"
  },
  {
    "text": "at the end we then pass you know A1 to the to the result and that's going to give us a a tail wreck that we then call",
    "start": "449599",
    "end": "455199"
  },
  {
    "text": "run on and run is uh is you know a tail recursive Loop that's going to then walk",
    "start": "455199",
    "end": "462199"
  },
  {
    "text": "over all of those suspends and is going to you know actually run the computation",
    "start": "462199",
    "end": "468520"
  },
  {
    "text": "okay uh and a tail recursive loop loop like that is called a trampoline because we're constantly bouncing back and forth",
    "start": "468520",
    "end": "475000"
  },
  {
    "text": "between you know this function here that we have compose all and the ter recursive Loop which is the",
    "start": "475000",
    "end": "482440"
  },
  {
    "text": "the run method so this does not come for free",
    "start": "482440",
    "end": "488039"
  },
  {
    "text": "trampolines have a definite memory overhead uh there there's a limited memory overhead because uh this these",
    "start": "488039",
    "end": "495879"
  },
  {
    "text": "suspensions are being generated lazily you don't have all of them you know on your HEAP at the same time but they have",
    "start": "495879",
    "end": "502599"
  },
  {
    "text": "to be created and so you have garbage overhead and that means it has a performance overhead and it has a",
    "start": "502599",
    "end": "508479"
  },
  {
    "text": "further performance over head because you're constantly jumping back and forth between two methods it's not um",
    "start": "508479",
    "end": "514479"
  },
  {
    "text": "necessarily a hot spot so when just in time compilation kicks in it can't",
    "start": "514479",
    "end": "519760"
  },
  {
    "text": "necessarily figure out that you have a hot Loop all right so this can have",
    "start": "519760",
    "end": "525120"
  },
  {
    "text": "devastating performance uh implications but function composition in",
    "start": "525120",
    "end": "533360"
  },
  {
    "text": "Scala can't be done basically in in any sort of large degree without without",
    "start": "533360",
    "end": "539800"
  },
  {
    "text": "trampolines and monads can't be used like they're basically useless without",
    "start": "539800",
    "end": "544959"
  },
  {
    "text": "trampolines non- trampoline monads uh if if you have you know a chain of flat",
    "start": "544959",
    "end": "550320"
  },
  {
    "text": "Maps where you have you know something and then flat map and then there's a function that calls flat map again and",
    "start": "550320",
    "end": "556120"
  },
  {
    "text": "if you do that on a loop that's going to overflow the stack and there's no way around that except using trampolines and",
    "start": "556120",
    "end": "562720"
  },
  {
    "text": "that is terrible so reason number two that",
    "start": "562720",
    "end": "567880"
  },
  {
    "text": "functional programming is terrible is that it insists on higher kinded types higher kinded types uh allow you to to",
    "start": "567880",
    "end": "576040"
  },
  {
    "text": "do uh uh codus and and so uh to to write",
    "start": "576040",
    "end": "582720"
  },
  {
    "text": "sort of higher order abstractions that you know so you don't repeat yourself all the time uh you need to have higher",
    "start": "582720",
    "end": "589200"
  },
  {
    "text": "kinded types so I mean Heather talked about higher kinds so I'm not going to",
    "start": "589200",
    "end": "594760"
  },
  {
    "text": "uh talk too much about what what that means but so uh you can think of kinds",
    "start": "594760",
    "end": "599920"
  },
  {
    "text": "as the types of types right so int has the simplest kind it's it's of kind star",
    "start": "599920",
    "end": "606279"
  },
  {
    "start": "603000",
    "end": "603000"
  },
  {
    "text": "or you know it has no further sort of uh shape doesn't have any uh content um and list of in is another",
    "start": "606279",
    "end": "614440"
  },
  {
    "text": "sort of simple type but list by itself is not a type it's a type Constructor it needs a type to construct the type so",
    "start": "614440",
    "end": "621000"
  },
  {
    "text": "you know you have list you give it a type of kind star like int and it gives you another type of kind star which is",
    "start": "621000",
    "end": "626200"
  },
  {
    "text": "list of int and then either is a binary type Constructor takes two stars uh and gives you one star and monad is a higher",
    "start": "626200",
    "end": "634360"
  },
  {
    "text": "kind is a higher order type Constructor it takes a type Constructor of kind star to star as its type argument and gives",
    "start": "634360",
    "end": "640160"
  },
  {
    "text": "you a type of kind star now in Scala this is annotated uh",
    "start": "640160",
    "end": "645680"
  },
  {
    "text": "with these underscores and brackets uh so if you have a higher kinded type like TC here a higher order type Constructor",
    "start": "645680",
    "end": "652040"
  },
  {
    "text": "you know you annotate it with these underscores and Open brackets and and more underscores",
    "start": "652040",
    "end": "657360"
  },
  {
    "text": "okay so what does this bias it buys us Cod ruse we can uh write functions like",
    "start": "657360",
    "end": "664600"
  },
  {
    "text": "this like Traverse and sequence which are very general and extremely useful uh so Traverse is kind of like",
    "start": "664600",
    "end": "673880"
  },
  {
    "text": "map uh except that the the function f is not from A to B it's from a to G of B",
    "start": "673880",
    "end": "681360"
  },
  {
    "text": "okay where G is some applicative functor okay",
    "start": "681360",
    "end": "687200"
  },
  {
    "text": "and uh what that means in practice is that whatever G may be it could be",
    "start": "687200",
    "end": "692360"
  },
  {
    "text": "option or it could be future uh or something else what it means in practice",
    "start": "692360",
    "end": "697680"
  },
  {
    "text": "is that you know you sort of map over this list uh with with this function f producing a bunch of Futures and then",
    "start": "697680",
    "end": "704079"
  },
  {
    "text": "this function will then take all of those Futures and combine them into one future that runs all of those other Futures in parallel and gives you a list",
    "start": "704079",
    "end": "710200"
  },
  {
    "text": "of the results so you can see that the the result type of Traverse is G of list of B",
    "start": "710200",
    "end": "716360"
  },
  {
    "text": "so uh a simple sort of derivative comp combinator that you can write is sequence where if you have say a list of",
    "start": "716360",
    "end": "722959"
  },
  {
    "text": "Futures it can give you a future of a list of all the answers of those Futures if you have a list of options it can",
    "start": "722959",
    "end": "729079"
  },
  {
    "text": "give you an option that's none if any of the input options are none or some of all the answers if all of them are are",
    "start": "729079",
    "end": "735760"
  },
  {
    "text": "some okay importantly you have to write this only once because you can abstract",
    "start": "735760",
    "end": "741079"
  },
  {
    "text": "over the type Constructor and over the applicative functor G and you can take uh that type Constructor so you can say",
    "start": "741079",
    "end": "747600"
  },
  {
    "text": "sequence and Traverse have higher kind of types so you write this once and for",
    "start": "747600",
    "end": "754639"
  },
  {
    "start": "754000",
    "end": "754000"
  },
  {
    "text": "all so applicative functors are things like future list option uh and it's useful for all of",
    "start": "754639",
    "end": "760880"
  },
  {
    "text": "those things but but here's there's one of these things is not like the other right State here uh I think somebody",
    "start": "760880",
    "end": "767760"
  },
  {
    "text": "talked about before uh state is is a way of sort of purely functionally",
    "start": "767760",
    "end": "774000"
  },
  {
    "text": "representing a stateful computation you know it's just a function it takes an input State and it produces an output",
    "start": "774000",
    "end": "780560"
  },
  {
    "text": "State together with a value that's computed from that state um and you know mapping over this and",
    "start": "780560",
    "end": "787440"
  },
  {
    "text": "flat mapping over this are um it's just function composition okay but if you",
    "start": "787440",
    "end": "793680"
  },
  {
    "text": "want to use this with Traverse you can't do that because Scala",
    "start": "793680",
    "end": "799120"
  },
  {
    "start": "795000",
    "end": "795000"
  },
  {
    "text": "uh lacks this this higher order unification that that Lars was talking about uh so what happens is that because",
    "start": "799120",
    "end": "806519"
  },
  {
    "text": "state has a different kind of different shape a different kind than option list and uh and",
    "start": "806519",
    "end": "813519"
  },
  {
    "text": "future uh Scola will not be able to figure out that this is is okay to do",
    "start": "813519",
    "end": "818639"
  },
  {
    "text": "that I can actually use you know the state applicative funter here and and write",
    "start": "818639",
    "end": "823839"
  },
  {
    "text": "this uh so it's actually going to tell me that there are no type parameters no",
    "start": "823839",
    "end": "829240"
  },
  {
    "text": "type parameters for method Traverse that exist so that it can be applied to the arguments that I gave it and that is a",
    "start": "829240",
    "end": "834639"
  },
  {
    "text": "blatant lie and I can prove that because all I have to do is just tell it hey",
    "start": "834639",
    "end": "840240"
  },
  {
    "text": "there you know you there is a type Constructor I'm going to call it Lambda that has the right kind it takes a",
    "start": "840240",
    "end": "845639"
  },
  {
    "text": "single type argument X and it is equal to state of int and x and then this is",
    "start": "845639",
    "end": "850759"
  },
  {
    "text": "all going to work just fine but I have to do this now everywhere I call",
    "start": "850759",
    "end": "855880"
  },
  {
    "text": "Traverse with anything that you know I want to sort of like partially apply that doesn't fit into this neat picture",
    "start": "855880",
    "end": "863279"
  },
  {
    "text": "uh of you know type Constructors with with a single type argument now if if if uh Scala we can",
    "start": "863279",
    "end": "871360"
  },
  {
    "start": "869000",
    "end": "869000"
  },
  {
    "text": "imagine a Scala that had this feature of type currying um where you know instead of",
    "start": "871360",
    "end": "877360"
  },
  {
    "text": "having or we could have in addition to having state that takes two type arguments of kind star we could have a",
    "start": "877360",
    "end": "883600"
  },
  {
    "text": "state that has you know two type argument lists very much like we have cured functions at the value level so we",
    "start": "883600",
    "end": "889240"
  },
  {
    "text": "could have a state that takes you know a type argument of kind star which then",
    "start": "889240",
    "end": "894279"
  },
  {
    "text": "returns a type Constructor that get takes the other one okay and then we could just partially apply state with",
    "start": "894279",
    "end": "899519"
  },
  {
    "text": "int and that would have the correct shape the correct kind to be used as an applicative and then everything would",
    "start": "899519",
    "end": "905199"
  },
  {
    "text": "just work uh but it doesn't so we need to resort to violence like",
    "start": "905199",
    "end": "912199"
  },
  {
    "start": "907000",
    "end": "907000"
  },
  {
    "text": "unapply um so this unapply thing uh lets you",
    "start": "912199",
    "end": "918600"
  },
  {
    "text": "say if you have an implicit instance of this unapply thing uh it lets you say",
    "start": "918600",
    "end": "924480"
  },
  {
    "text": "that you know if I want to Traverse a list with a function from a to some other type G of B uh I I take",
    "start": "924480",
    "end": "933079"
  },
  {
    "text": "implicit evidence that there exists some type Constructor M that is an applicative",
    "start": "933079",
    "end": "939160"
  },
  {
    "text": "functor and and G of B can be deconstructed into uh M and A so a type Constructor M",
    "start": "939160",
    "end": "948160"
  },
  {
    "text": "and a value a where GB is equal to the Type M A",
    "start": "948160",
    "end": "953560"
  },
  {
    "text": "okay and you know this is this is really kind of kind of painful to look at but",
    "start": "953560",
    "end": "958959"
  },
  {
    "text": "you know again schaly and uh and uh shapeless uh do this boilerplate work so",
    "start": "958959",
    "end": "964639"
  },
  {
    "text": "that you don't have to but you do have to write your own you know Traverse instances if you if you",
    "start": "964639",
    "end": "970440"
  },
  {
    "text": "want to write your own uh type instructors okay so uh when we've written that Traverse U which is written",
    "start": "970440",
    "end": "976800"
  },
  {
    "text": "in terms of Traverse uh we can now pass it as state action and everything will be honky",
    "start": "976800",
    "end": "983880"
  },
  {
    "text": "dor so kinds in Scala uh are are really",
    "start": "984240",
    "end": "990040"
  },
  {
    "text": "sort of insufficient for uh for our purposes here it's really kind of terrible that",
    "start": "990040",
    "end": "996040"
  },
  {
    "text": "we have to do this this work at all so kinds are never inferred you",
    "start": "996040",
    "end": "1003079"
  },
  {
    "text": "always have to supply uh kind annotations so you can't say you know I",
    "start": "1003079",
    "end": "1008160"
  },
  {
    "text": "have some type you know something M and it may be a type Constructor I don't know Scola you go figure it out it can't",
    "start": "1008160",
    "end": "1015160"
  },
  {
    "text": "do that you have to always uh annotate and not only do you have to annotate",
    "start": "1015160",
    "end": "1021360"
  },
  {
    "text": "them you also have to annotate the kinds of the arguments to your type Constructors so when you when you have",
    "start": "1021360",
    "end": "1028520"
  },
  {
    "text": "uh you know uh when you annotate the the the kind as a type Constructor and that",
    "start": "1028520",
    "end": "1033600"
  },
  {
    "text": "type Constructor takes arguments you have to annotate whether that type is a type Constructor and what the kinds of",
    "start": "1033600",
    "end": "1038880"
  },
  {
    "text": "the arguments to those type Constructors are as well so it really gets invariance is part of the kind of any type I didn't",
    "start": "1038880",
    "end": "1045199"
  },
  {
    "text": "even mention that so that's horrible so how can we make functional",
    "start": "1045199",
    "end": "1050679"
  },
  {
    "start": "1047000",
    "end": "1047000"
  },
  {
    "text": "programming less terrible well some suggestions we could have tail call",
    "start": "1050679",
    "end": "1056039"
  },
  {
    "text": "elimination that would be fantastic but we don't have it uh it would be nice to have kind",
    "start": "1056039",
    "end": "1062440"
  },
  {
    "text": "inference or you know a kind system at all uh but you know for for now we just",
    "start": "1062440",
    "end": "1068880"
  },
  {
    "text": "have to annotate everything with with our kinds and sort of you know uh use",
    "start": "1068880",
    "end": "1075000"
  },
  {
    "text": "implicit evidence whenever we need to do anything complicated we do type level computations uh it would be great to have better type",
    "start": "1075000",
    "end": "1081120"
  },
  {
    "text": "inference you know like just when you need type inference just when you need to sort of tie the knot and say okay",
    "start": "1081120",
    "end": "1086480"
  },
  {
    "text": "figure this out for me I have a recursive function figure out what the type of this thing is nope can't do it",
    "start": "1086480",
    "end": "1092000"
  },
  {
    "text": "it's a recursive function you got to give it you got to give me a a type annotation okay uh and again all this",
    "start": "1092000",
    "end": "1099760"
  },
  {
    "text": "has memory overhead so whenever we do functional programming we work with unboxed function reference I mean with",
    "start": "1099760",
    "end": "1105280"
  },
  {
    "text": "boxed function references so whenever you have a a first class function It's actually an object and and that's really",
    "start": "1105280",
    "end": "1112039"
  },
  {
    "text": "just a waste of memory that doesn't doesn't need to happen uh the sort of",
    "start": "1112039",
    "end": "1117280"
  },
  {
    "text": "the general direction that we should be going towards is to minimize the runtime representation of you know of of our",
    "start": "1117280",
    "end": "1124080"
  },
  {
    "text": "denotations of our of our functional uh representations okay it would be nice to",
    "start": "1124080",
    "end": "1129640"
  },
  {
    "text": "have real existential types but we don't have those um it would be great you know if when I pattern match on something",
    "start": "1129640",
    "end": "1135960"
  },
  {
    "text": "that has an existential type I would get something other than a Class cast and then a Class cast exception at",
    "start": "1135960",
    "end": "1141440"
  },
  {
    "text": "runtime uh it would be awesome to have Universal quantification so we can talk about things like you know parametric uh",
    "start": "1141440",
    "end": "1147919"
  },
  {
    "text": "polymorphism and you know rank two uh and rank n uh type functions so that we",
    "start": "1147919",
    "end": "1153960"
  },
  {
    "text": "can really uh take you make use of parametricity and another thing that's",
    "start": "1153960",
    "end": "1160159"
  },
  {
    "text": "kind of terrible is that you can have side effects everywhere you can throw exceptions wherever you want and you",
    "start": "1160159",
    "end": "1167480"
  },
  {
    "text": "know Scola isn't going to tell you anything about uh whether that's going on okay so whenever you call something",
    "start": "1167480",
    "end": "1174799"
  },
  {
    "text": "you can't be sure you can't be sure that it's not going to you know fire the missiles",
    "start": "1174799",
    "end": "1180960"
  },
  {
    "text": "right so that's you know that makes me depressed so so what is functional programming",
    "start": "1180960",
    "end": "1187919"
  },
  {
    "start": "1184000",
    "end": "1184000"
  },
  {
    "text": "really for is it really just a hair shirt are we just you know putting this thing on because you know we want to be",
    "start": "1187919",
    "end": "1193360"
  },
  {
    "text": "you know academics and you know should we just throw this stuff out and just use Global mutable stator everywhere you",
    "start": "1193360",
    "end": "1199320"
  },
  {
    "text": "know cuz you know that's going to be fast and and and and",
    "start": "1199320",
    "end": "1205480"
  },
  {
    "text": "whatever uh and no no we should not right because",
    "start": "1205480",
    "end": "1213919"
  },
  {
    "text": "why why shouldn't we well because the alternative is even more terrible the alternative is you know Global mutable",
    "start": "1213919",
    "end": "1221400"
  },
  {
    "text": "State the alternative is remaining at the status quo you know it's it's side effects and and horribleness okay okay",
    "start": "1221400",
    "end": "1229120"
  },
  {
    "text": "the alternative to functional programming is unreasonable and incoherent code",
    "start": "1229120",
    "end": "1234679"
  },
  {
    "text": "okay so in truth functional programming is actually a huge win even with all",
    "start": "1234679",
    "end": "1239960"
  },
  {
    "text": "these annoyances and I would say compar to those wins these annoyances are very",
    "start": "1239960",
    "end": "1245080"
  },
  {
    "text": "very minor which is why I do functional programming in Scola at",
    "start": "1245080",
    "end": "1250520"
  },
  {
    "text": "all so reason number one that functional programming is awesome is",
    "start": "1250520",
    "end": "1255960"
  },
  {
    "text": "modularity okay now what's modularity modularity is the property that your",
    "start": "1255960",
    "end": "1262000"
  },
  {
    "start": "1259000",
    "end": "1259000"
  },
  {
    "text": "software can be separated into its constituent parts and those parts can be",
    "start": "1262000",
    "end": "1267919"
  },
  {
    "text": "reused independently of the whole and they can be reused in sort of Novel ways they can be reused in ways that you did",
    "start": "1267919",
    "end": "1273559"
  },
  {
    "text": "not anticipate when you created those parts all right what does that buy you in practice",
    "start": "1273559",
    "end": "1280720"
  },
  {
    "text": "it buys you modularity uh sorry what does modularity buy you in practice it buys you",
    "start": "1280720",
    "end": "1286520"
  },
  {
    "text": "reusability uh because you know obviously if you can take out your the the parts of your uh of your program and",
    "start": "1286520",
    "end": "1292799"
  },
  {
    "text": "then you can reuse them sort of independently of the whole obviously that's going to give you reusable",
    "start": "1292799",
    "end": "1298000"
  },
  {
    "text": "code uh it's going to give you testability because if you could take your thing apart you know you can pull",
    "start": "1298000",
    "end": "1303400"
  },
  {
    "text": "out a part of your program and it's not like going to have wires hanging off of it that you don't know what are you know",
    "start": "1303400",
    "end": "1308679"
  },
  {
    "text": "what are and then you can test that thing independently of everything else",
    "start": "1308679",
    "end": "1313919"
  },
  {
    "text": "you know it's always safe to test a a purely functional component and these things are",
    "start": "1313919",
    "end": "1319120"
  },
  {
    "text": "parallelizable as well because you know it's safe to separate things out and run them separately in a separate thread if",
    "start": "1319120",
    "end": "1326000"
  },
  {
    "text": "you know if that makes sense and you gain this property for the simple reason that functions are modular",
    "start": "1326000",
    "end": "1333279"
  },
  {
    "start": "1327000",
    "end": "1327000"
  },
  {
    "text": "and functions are modular because you know whenever you have an A",
    "start": "1333279",
    "end": "1339159"
  },
  {
    "text": "and you want a b and then you have a function of type A to be it's always safe to just take your function of type",
    "start": "1339159",
    "end": "1344679"
  },
  {
    "text": "A Tob and put it there yeah it always makes sense uh there's",
    "start": "1344679",
    "end": "1350960"
  },
  {
    "text": "nothing else that you need to worry about it's always testable because you can always",
    "start": "1350960",
    "end": "1356960"
  },
  {
    "text": "take uh a function and you can test it you can always function of type A to B it's always safe to just give it its",
    "start": "1356960",
    "end": "1362840"
  },
  {
    "text": "arguments and look at the result and see if the result is what you expect it's eminently testable and it's always safe",
    "start": "1362840",
    "end": "1369279"
  },
  {
    "text": "to call a function from multiple threads uh and the Order of execution is not",
    "start": "1369279",
    "end": "1374520"
  },
  {
    "text": "going to matter because you know no mutation is going to escape and and and uh you know the pure function is just",
    "start": "1374520",
    "end": "1380080"
  },
  {
    "text": "going to return a value all right reason number two that",
    "start": "1380080",
    "end": "1386640"
  },
  {
    "text": "functional programming is awesome is compositionality now compositionality is the property that",
    "start": "1386640",
    "end": "1393640"
  },
  {
    "start": "1390000",
    "end": "1390000"
  },
  {
    "text": "your software can be understood as a whole by understanding its parts and the",
    "start": "1393640",
    "end": "1400640"
  },
  {
    "text": "rules governing the composition all right and what that means in practice is",
    "start": "1400640",
    "end": "1408559"
  },
  {
    "text": "is scalability because large programs become exactly the same as small",
    "start": "1408559",
    "end": "1414159"
  },
  {
    "text": "programs they're going to be composed of some parts they can be individually understood and the laws uh are going to",
    "start": "1414159",
    "end": "1421760"
  },
  {
    "text": "ensure that as things get larger they don't get more complex you know you're going to just if you have a function of",
    "start": "1421760",
    "end": "1427840"
  },
  {
    "text": "type A to B it doesn't matter if that function is composed of a trillion other functions you know the the interface",
    "start": "1427840",
    "end": "1433840"
  },
  {
    "text": "remains exactly the same and you reason about this thing exactly the same way so so compositional programs are reasonable",
    "start": "1433840",
    "end": "1440640"
  },
  {
    "text": "because at every level you have pieces that can be individually understood by looking at their pieces and how they fit",
    "start": "1440640",
    "end": "1449320"
  },
  {
    "text": "together and so you get this property of composition comp compositionality by the simple fact that",
    "start": "1449320",
    "end": "1455520"
  },
  {
    "start": "1451000",
    "end": "1451000"
  },
  {
    "text": "functions are compositional you know if you have a function f of type A to B if you have a function G of type B to C you",
    "start": "1455520",
    "end": "1461400"
  },
  {
    "text": "can always put them together into a composite function of type a to c and that is also just a function and that",
    "start": "1461400",
    "end": "1467120"
  },
  {
    "text": "could be composed of 100 other functions and it can be used in compositions as",
    "start": "1467120",
    "end": "1472799"
  },
  {
    "text": "well okay so let's Tak gets me through through the third reason that functional programming",
    "start": "1473039",
    "end": "1479080"
  },
  {
    "text": "is awesome and I think that this is something something that we don't talk about enough and and we need to we need",
    "start": "1479080",
    "end": "1484679"
  },
  {
    "text": "to talk about this right functional programming makes us happy right because because I mean no I",
    "start": "1484679",
    "end": "1493640"
  },
  {
    "text": "mean I'm being serious I I really think that you know like oh yeah we're logic and we're programmers so you know we got",
    "start": "1493640",
    "end": "1499919"
  },
  {
    "text": "to like you know we got to not talk about our feelings and we got to you know just get on with it but no why why",
    "start": "1499919",
    "end": "1508279"
  },
  {
    "text": "do we get on with it why are we here at all why do we program well because programming is exhilarating programming",
    "start": "1508279",
    "end": "1513600"
  },
  {
    "text": "is exciting it's awesome at least you know at first when",
    "start": "1513600",
    "end": "1519000"
  },
  {
    "text": "you start a new project right it's it's great you know you start a new project you feel you know awesome you're coding",
    "start": "1519000",
    "end": "1524600"
  },
  {
    "text": "away and then after a while your project sort of you you lose control of it it",
    "start": "1524600",
    "end": "1529760"
  },
  {
    "text": "starts to become it starts to feel see I'm talking about my feelings it starts",
    "start": "1529760",
    "end": "1534960"
  },
  {
    "text": "it starts to feel like a big M of mud it starts to feel like you're trudging through a swamp whenever you want to",
    "start": "1534960",
    "end": "1540159"
  },
  {
    "text": "change anything and it starts to feel you know like you have a sense of revulsion like you don't want to touch",
    "start": "1540159",
    "end": "1546320"
  },
  {
    "text": "the code base because you know it it might break or you know it's going to be very difficult to get through and so",
    "start": "1546320",
    "end": "1553399"
  },
  {
    "text": "fixing bugs becomes uh you know difficult you start to procrastinate",
    "start": "1553399",
    "end": "1558559"
  },
  {
    "text": "it's terrible so reasons why functional programming implies happiness is that",
    "start": "1558559",
    "end": "1565640"
  },
  {
    "text": "you have you know less of this friction and frustration uh because um functional",
    "start": "1565640",
    "end": "1572120"
  },
  {
    "start": "1570000",
    "end": "1570000"
  },
  {
    "text": "programs are are uh modular you can you know pull things out and you can move",
    "start": "1572120",
    "end": "1577399"
  },
  {
    "text": "them around so there's less of this friction that you know whenever you pull something something out is going to be",
    "start": "1577399",
    "end": "1582799"
  },
  {
    "text": "stuck to all kinds of other things but you can always just you know take something out maybe throw it away repl",
    "start": "1582799",
    "end": "1588480"
  },
  {
    "text": "with something else it's it makes things very sort of easy and and pleasant uh things are more predictable so",
    "start": "1588480",
    "end": "1596559"
  },
  {
    "text": "functional programs you know they they they behave according to certain laws",
    "start": "1596559",
    "end": "1601960"
  },
  {
    "text": "and so uh if you make a mistake you know the laws will ensure that that you know",
    "start": "1601960",
    "end": "1608240"
  },
  {
    "text": "that mistake is going to have some effect that that that is sort of bounded by something sensible you know it's it's",
    "start": "1608240",
    "end": "1614679"
  },
  {
    "text": "not that if you make a mistake over here then this thing way over here is going to break that has no seeming relation to",
    "start": "1614679",
    "end": "1620840"
  },
  {
    "text": "that at all so it really kind of constrains things and you have less cognitive load",
    "start": "1620840",
    "end": "1628279"
  },
  {
    "text": "because there are fewer things that you need to keep in your head the only things you need to keep in your head are sort of the broad abstractions and the",
    "start": "1628279",
    "end": "1634320"
  },
  {
    "text": "implementation details kind of fade away you know and and uh I for myself like",
    "start": "1634320",
    "end": "1641679"
  },
  {
    "text": "whenever somebody asked me like oh how does this you know this library that you wrote like how does it work you know under the hood I'm like I don't know",
    "start": "1641679",
    "end": "1647679"
  },
  {
    "text": "it's a mon you know it's like I I don't have to know I I only have to know I",
    "start": "1647679",
    "end": "1653720"
  },
  {
    "text": "have to keep in the back of my head some abstract principles some laws and then when I come back to it I know that it's",
    "start": "1653720",
    "end": "1659960"
  },
  {
    "text": "going to make sense because you know I I know that I wrote it according to those laws I don't really know or care how I",
    "start": "1659960",
    "end": "1666039"
  },
  {
    "text": "actually did it okay and the solution space is is smaller so there are fewer programs that",
    "start": "1666039",
    "end": "1673360"
  },
  {
    "text": "you can write and that doesn't mean that oh you know we're constrained and we're in a you know we're in a straight jacket",
    "start": "1673360",
    "end": "1679399"
  },
  {
    "text": "and we can't you know do anything it's it doesn't constrain what you can do just how you can do it you can think of",
    "start": "1679399",
    "end": "1685679"
  },
  {
    "text": "it as as roads you know roads constrain you so that you don't like drive into the Wilderness and get you know stuck in",
    "start": "1685679",
    "end": "1692360"
  },
  {
    "text": "a in a rut uh in a ditch and and or get killed or something but they still allow",
    "start": "1692360",
    "end": "1697559"
  },
  {
    "text": "you to go you know wherever you need to go um and so the the search for the uh",
    "start": "1697559",
    "end": "1704919"
  },
  {
    "text": "for the solution to a problem is really sort of constrained along a path or it's",
    "start": "1704919",
    "end": "1710039"
  },
  {
    "text": "sort of like a branching path all right and this makes finding the solution much more pleasant because you're much less",
    "start": "1710039",
    "end": "1716440"
  },
  {
    "text": "likely to run into trouble and this makes you more productive because you can find the solution faster because the",
    "start": "1716440",
    "end": "1721799"
  },
  {
    "text": "space is smaller and uh lastly it gives you Pride",
    "start": "1721799",
    "end": "1727360"
  },
  {
    "text": "because once you've built something you can be sort of sure that that it",
    "start": "1727360",
    "end": "1734080"
  },
  {
    "text": "uh you know that it conforms to to what you were trying to to to accomplish uh",
    "start": "1734080",
    "end": "1739360"
  },
  {
    "text": "you know it it looks and feels clean it is a solution that is reasonable and you",
    "start": "1739360",
    "end": "1744480"
  },
  {
    "text": "can hold it in your head and you can look at it and you can say well this is you know this makes sense it's",
    "start": "1744480",
    "end": "1751000"
  },
  {
    "text": "awesome okay so I asked some people on on Twitter how does functional",
    "start": "1751000",
    "end": "1756559"
  },
  {
    "text": "programming make you feel and the response was overwhelmingly positive uh",
    "start": "1756559",
    "end": "1762279"
  },
  {
    "text": "so for example Rob said functional programming makes me happy because there's never any unstated content to",
    "start": "1762279",
    "end": "1768440"
  },
  {
    "text": "have to know about so it reduces his cognitive load it makes him more relaxed uh and yeah Richard says makes",
    "start": "1768440",
    "end": "1776679"
  },
  {
    "text": "me feel calm I don't have to keep as much in my head to get stuff done my favorite one is by Katie where she says",
    "start": "1776679",
    "end": "1782960"
  },
  {
    "text": "functional programming makes me feel sane I feel like a mathematician and an artist living in a beautiful",
    "start": "1782960",
    "end": "1789120"
  },
  {
    "text": "structurally sound clean house so I I I wish we would talk about you know our",
    "start": "1789120",
    "end": "1796200"
  },
  {
    "text": "feelings more you know because this this stuff is is great it's",
    "start": "1796200",
    "end": "1801320"
  },
  {
    "text": "inspiring it makes me want to work uh because you know why are we here",
    "start": "1801320",
    "end": "1806640"
  },
  {
    "start": "1802000",
    "end": "1802000"
  },
  {
    "text": "at the end of the day I mean we're we're not here to you know increase social utility or to you know increase the the",
    "start": "1806640",
    "end": "1813360"
  },
  {
    "text": "bottom line for the for the company no we're here because you know functional programming is or programming in general",
    "start": "1813360",
    "end": "1818720"
  },
  {
    "text": "is awesome and functional programming sort of amplifies that so in summary functional programming yes it can be",
    "start": "1818720",
    "end": "1824880"
  },
  {
    "text": "awkward and terrible uh but the alternative isn't impossible right the",
    "start": "1824880",
    "end": "1830080"
  },
  {
    "text": "alternative you know if I couldn't do any functional programming in Scola I would not write a single line of Scola I",
    "start": "1830080",
    "end": "1835720"
  },
  {
    "text": "would just not do it because the benefits are just too great to pass up and so we have to insist that our",
    "start": "1835720",
    "end": "1842919"
  },
  {
    "text": "tools get better at this we have to insist that Scola get better at this or we have to just leave it behind because",
    "start": "1842919",
    "end": "1848320"
  },
  {
    "text": "I really think the alternative is an impossibility the alternative is uh you",
    "start": "1848320",
    "end": "1853720"
  },
  {
    "text": "know the status quo we have to be able to move forward and I I really think that uh compositional and modular",
    "start": "1853720",
    "end": "1860960"
  },
  {
    "text": "software you know and and re being able to reason compositionally about software",
    "start": "1860960",
    "end": "1866120"
  },
  {
    "text": "is the way to get us to you know programming sort of in the large and",
    "start": "1866120",
    "end": "1871240"
  },
  {
    "text": "this last point I just want to emphasize that your happiness matters okay like pay attention to what makes you happy",
    "start": "1871240",
    "end": "1878120"
  },
  {
    "text": "like don't don't resign yourself to just like working for the man and like doing the thing that's pragmatic or whatever",
    "start": "1878120",
    "end": "1885240"
  },
  {
    "text": "but you know pay attention to to you know what makes you makes you happy as a as a programmer because ultimately",
    "start": "1885240",
    "end": "1891399"
  },
  {
    "text": "that's that's what life is all about and like happiness is how you experience what it's like to be alive thank",
    "start": "1891399",
    "end": "1900120"
  },
  {
    "text": "you so I don't think I have time for couple questions if anybody else",
    "start": "1907440",
    "end": "1912919"
  },
  {
    "text": "yeah can it or will can functional programming in Scala get better and will will it get better uh from what I've",
    "start": "1912919",
    "end": "1919840"
  },
  {
    "text": "heard today uh yeah it can um I think that uh you know it's never it's",
    "start": "1919840",
    "end": "1925600"
  },
  {
    "text": "software right you can do anything it it's never the end of the road uh and so if you have something that is",
    "start": "1925600",
    "end": "1931519"
  },
  {
    "text": "intractable and terrible you can always just throw it away and you can start from scratch I mean you know there're they're starting over with this do",
    "start": "1931519",
    "end": "1938399"
  },
  {
    "text": "language they're starting from a calculus that is reasonable and so yeah no I think that",
    "start": "1938399",
    "end": "1943799"
  },
  {
    "text": "uh I I really don't know the answer but it's certainly not outside the realm of",
    "start": "1943799",
    "end": "1949240"
  },
  {
    "text": "possibility another question well I mean High School does have other problems uh but yeah I I mean",
    "start": "1949240",
    "end": "1957559"
  },
  {
    "text": "I think High School generally has the things uh that I want and yeah I you know when I'm sort of programming on my",
    "start": "1957559",
    "end": "1963639"
  },
  {
    "text": "own I I tend to choose High School uh just because like I I don't have to deal",
    "start": "1963639",
    "end": "1969440"
  },
  {
    "text": "with a lot of these these things but there are other things that I may need to deal with if I if I want to write uh",
    "start": "1969440",
    "end": "1975679"
  },
  {
    "text": "whenever I need to write something that's uh uh you know sort of for production or whatever I I tend to find",
    "start": "1975679",
    "end": "1982240"
  },
  {
    "text": "that a lot of libraries don't exist yet and so I might have to write them myself",
    "start": "1982240",
    "end": "1987360"
  },
  {
    "text": "so but that's you know that's not a permanent problem obviously so we can always we can always get",
    "start": "1987360",
    "end": "1993600"
  },
  {
    "text": "better for something like that I don't have a vision for what that would look like I think that uh I think ultimately",
    "start": "1993600",
    "end": "2001799"
  },
  {
    "text": "either Java's uh call semantics have to get better or you know it have to Supply",
    "start": "2001799",
    "end": "2008399"
  },
  {
    "text": "a tail call bite code or something uh and failing that we yeah we basically",
    "start": "2008399",
    "end": "2013519"
  },
  {
    "text": "have to just Implement our own runtime and I mean that's you know it's",
    "start": "2013519",
    "end": "2019639"
  },
  {
    "text": "software uh there was a question over here I'm gonna take one more what are your thoughts on memory easier I I don't",
    "start": "2019639",
    "end": "2027159"
  },
  {
    "text": "I don't know that that's true that you can reason about memory easier uh you certainly can't reason about memory",
    "start": "2027159",
    "end": "2033080"
  },
  {
    "text": "usage compositionally so if you if you start to uh you know compose your",
    "start": "2033080",
    "end": "2038120"
  },
  {
    "text": "programs of of oh I'm sorry I got to repeat the question the question is do you get better memory usage from uh can",
    "start": "2038120",
    "end": "2045760"
  },
  {
    "text": "can you reason about memory usage easier with imperative programming than functional programming I think the answer to that is no okay that's",
    "start": "2045760",
    "end": "2054079"
  },
  {
    "text": "all that's all I'm gonna say okay thank you very much I'm out of",
    "start": "2054079",
    "end": "2059878"
  },
  {
    "text": "time",
    "start": "2059879",
    "end": "2062878"
  }
]