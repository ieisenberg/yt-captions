[
  {
    "text": "foreign [Music]",
    "start": "0",
    "end": "14249"
  },
  {
    "text": "thank you so much for coming my name is Lily Mara I'm an engineering manager at one signal in San Mateo California",
    "start": "15500",
    "end": "22680"
  },
  {
    "text": "I've been using rust professionally on sort of side of desk projects since about 2017 and in 2019 I started at one",
    "start": "22680",
    "end": "29279"
  },
  {
    "text": "signal where it's used as a primary language I spoke at rusconf 2021 about the",
    "start": "29279",
    "end": "35340"
  },
  {
    "text": "importance of not over optimizing our rest programs I've spoken at many rust meetup groups and I'm the author of the",
    "start": "35340",
    "end": "42239"
  },
  {
    "text": "book refactoring to rest heard of rust before you have probably heard one thing over and over and over",
    "start": "42239",
    "end": "49500"
  },
  {
    "text": "again you've probably heard that it's pretty fast It generally performs on par with",
    "start": "49500",
    "end": "55199"
  },
  {
    "text": "something like C or C plus it's way faster than some Dynamic",
    "start": "55199",
    "end": "60960"
  },
  {
    "text": "languages that we're maybe using like python or Ruby and if you have an older monolithic application written in one of",
    "start": "60960",
    "end": "67740"
  },
  {
    "text": "these languages maybe with something like Django or rails then it might be tempting if you're performance",
    "start": "67740",
    "end": "72960"
  },
  {
    "text": "constrained to say well let's stir this whole thing out and let's uh let's start over with rest you",
    "start": "72960",
    "end": "79500"
  },
  {
    "text": "know rest is fast we want to go fast let's rewrite it in Rust",
    "start": "79500",
    "end": "84720"
  },
  {
    "text": "this is a very tempting idea but the realities often as they do encroach on",
    "start": "84720",
    "end": "90659"
  },
  {
    "text": "our perfect vision full rewrite projects can often be quite problematic for a number of reasons",
    "start": "90659",
    "end": "97200"
  },
  {
    "text": "um some of which they can often take a lot longer than we expect we think something's going to",
    "start": "97200",
    "end": "102540"
  },
  {
    "text": "take a month it ends up taking three years we think something is going to be really really easy we realize that the",
    "start": "102540",
    "end": "108659"
  },
  {
    "text": "problem was so much more complicated than we realized we can introduce new bugs because",
    "start": "108659",
    "end": "115200"
  },
  {
    "text": "different programming languages have different paradigms and when you're trying to adapt old code into a new",
    "start": "115200",
    "end": "121020"
  },
  {
    "text": "system you can misunderstand the way the old",
    "start": "121020",
    "end": "126600"
  },
  {
    "text": "thing worked full rewrites often also do not fix underlying architectural problems so",
    "start": "126600",
    "end": "133739"
  },
  {
    "text": "this might be things like you know using the wrong database technology it might also be things in",
    "start": "133739",
    "end": "140280"
  },
  {
    "text": "the code we think a piece of code looks ugly because we don't understand everything that's going on and we try",
    "start": "140280",
    "end": "145440"
  },
  {
    "text": "and rewrite it in a simpler way we realize that oh there actually was a reason we did all those things in a very",
    "start": "145440",
    "end": "151860"
  },
  {
    "text": "strange way in the original code so for rewrite projects are often",
    "start": "151860",
    "end": "157140"
  },
  {
    "text": "problematic so what what else is available to us there's also microservices of course we",
    "start": "157140",
    "end": "164220"
  },
  {
    "text": "can break out our monolith into multiple Services we can we can put the performance where it needs to be put and",
    "start": "164220",
    "end": "171780"
  },
  {
    "text": "leave the monolithic stuff in the monolith but if you're working at a place that",
    "start": "171780",
    "end": "177180"
  },
  {
    "text": "doesn't really have a robust infrastructure for managing a bunch of microservices maybe you're working at a",
    "start": "177180",
    "end": "183060"
  },
  {
    "text": "place where there really is just one monolith rolled out on a couple of boxes and you're really not ready for the",
    "start": "183060",
    "end": "189120"
  },
  {
    "text": "architectural shift of going to a bunch of microservices what do you do in this case",
    "start": "189120",
    "end": "197239"
  },
  {
    "text": "we're going to discuss the feasibility aspect in a little bit more detail later but the gist of it is that microservices",
    "start": "199200",
    "end": "205200"
  },
  {
    "text": "are always the best option for everybody in every circumstance of course",
    "start": "205200",
    "end": "211080"
  },
  {
    "text": "so I would like today to propose an alternative that uh that we can use and",
    "start": "211080",
    "end": "216480"
  },
  {
    "text": "for the purposes of having a term for it I'm going to refer to it as ffi refactoring",
    "start": "216480",
    "end": "223560"
  },
  {
    "text": "by refactoring is where we take a little piece of the code we rewrite it in a faster language in",
    "start": "223560",
    "end": "230700"
  },
  {
    "text": "this case rust and we connect it to the original code base using cffi",
    "start": "230700",
    "end": "237239"
  },
  {
    "text": "this is something that's going to be a little bit abstracted for us and it's going to be made a lot easier by some of the binding libraries that we're going",
    "start": "237239",
    "end": "242760"
  },
  {
    "text": "to be using but the underlying technology is cffi so we're going to refer to it as ffi refactoring",
    "start": "242760",
    "end": "248640"
  },
  {
    "text": "we're also going to be using the terms host language to refer to the original programming language and guess language",
    "start": "248640",
    "end": "254340"
  },
  {
    "text": "to refer to the new programming language",
    "start": "254340",
    "end": "258260"
  },
  {
    "text": "so when is this an acceptable strategy for us to use as I said before if you're working at a",
    "start": "259739",
    "end": "266100"
  },
  {
    "text": "place that has a really robust infrastructure for working with lots of microservices then",
    "start": "266100",
    "end": "273180"
  },
  {
    "text": "maybe consider using a microservice like if there's an existing pattern sitting",
    "start": "273180",
    "end": "279180"
  },
  {
    "text": "there ready for you to use maybe just use that existing pattern it's generally much easier to follow",
    "start": "279180",
    "end": "285800"
  },
  {
    "text": "what's already sitting there than to try and Blaze a new Trail",
    "start": "285800",
    "end": "291000"
  },
  {
    "text": "what if you're in a place where there isn't a robust infrastructure for microservices",
    "start": "291000",
    "end": "297180"
  },
  {
    "text": "if architecturally shifting to microservices would be really difficult for you or maybe you're running code on",
    "start": "297180",
    "end": "303180"
  },
  {
    "text": "an end user device and you don't necessarily want to have a bunch of binaries talking to each other over networking local loopback networking in",
    "start": "303180",
    "end": "312300"
  },
  {
    "text": "order to uh run your program then maybe ffi refactoring is a better option for you",
    "start": "312300",
    "end": "320720"
  },
  {
    "text": "there are some unfortunate realities that we're going to need to discuss when we're going to ffi refactoring",
    "start": "321479",
    "end": "327479"
  },
  {
    "text": "because we're going to move to multiple languages for our program we are probably going to be complicating our",
    "start": "327479",
    "end": "333479"
  },
  {
    "text": "deployments a bit right because we're going to have to ship not just a bunch of python and Ruby",
    "start": "333479",
    "end": "338940"
  },
  {
    "text": "files to the servers we're going to have to compile rust beforehand we're going to have to ship rust Dynamic Library",
    "start": "338940",
    "end": "345300"
  },
  {
    "text": "files to our servers we're going to have to make sure OS versions and compiler versions match up",
    "start": "345300",
    "end": "351180"
  },
  {
    "text": "this will get slightly more complicated it's possible that we can add bugs just",
    "start": "351180",
    "end": "357060"
  },
  {
    "text": "like with a fully right project all we're doing now is a rewrite on a smaller scale so",
    "start": "357060",
    "end": "363240"
  },
  {
    "text": "because we're re-implementing code we can of course create bugs but because it's on a smaller scale the",
    "start": "363240",
    "end": "370080"
  },
  {
    "text": "the chance for that is maybe a little bit less we will definitely have to watch out for translation bugs because",
    "start": "370080",
    "end": "375660"
  },
  {
    "text": "we're moving between multiple programming languages we don't have to just worry about the quirks of python we",
    "start": "375660",
    "end": "381240"
  },
  {
    "text": "also have to worry about the quirks of python and rust and the quirks of translating python data structures to",
    "start": "381240",
    "end": "387720"
  },
  {
    "text": "rust data structures so what makes a good project for an ffi",
    "start": "387720",
    "end": "395819"
  },
  {
    "text": "refactor as I've kept hammering home it's",
    "start": "395819",
    "end": "401880"
  },
  {
    "text": "it's very similar to the discussion that we've been having for several years now of microservices versus monoliths",
    "start": "401880",
    "end": "410960"
  },
  {
    "text": "do we want to make our big deploy even bigger or do we want to split it out into a bunch of stuff",
    "start": "411419",
    "end": "418340"
  },
  {
    "text": "microservices can be great you can scale independently you can upgrade independently you can deploy",
    "start": "418919",
    "end": "424740"
  },
  {
    "text": "independently one thing going down doesn't necessarily take everything else down there's lots of reasons to use",
    "start": "424740",
    "end": "430139"
  },
  {
    "text": "microservices but there's also reasons to consider doing an ffi refactor as I've said if",
    "start": "430139",
    "end": "437160"
  },
  {
    "text": "you have if you have uh if you have a monolith and it would be",
    "start": "437160",
    "end": "443520"
  },
  {
    "text": "difficult for you to go to a microservices-based approach maybe do ffi refactoring or it may also be the",
    "start": "443520",
    "end": "450300"
  },
  {
    "text": "case that you need to do a very slight performance bump and that could be maybe dwarfed by networking overhead and if",
    "start": "450300",
    "end": "458099"
  },
  {
    "text": "you use an ffi refactor you can keep everything within memory within a single process and you can get some serious",
    "start": "458099",
    "end": "465120"
  },
  {
    "text": "performance benefits by doing that you should also consider what language",
    "start": "465120",
    "end": "470400"
  },
  {
    "text": "you're using as your host language so if we take a look at this little Compass here",
    "start": "470400",
    "end": "475919"
  },
  {
    "text": "we can see there are some languages that are going to be slower than rust where re doing an ffi",
    "start": "475919",
    "end": "483180"
  },
  {
    "text": "refactor to rest will probably improve performance and C and C plus plus",
    "start": "483180",
    "end": "488280"
  },
  {
    "text": "generally are like on par with rust as far as performance goes maybe slightly",
    "start": "488280",
    "end": "494039"
  },
  {
    "text": "faster so re doing an ffi refactor Trust might actually decrease performance a little bit",
    "start": "494039",
    "end": "499800"
  },
  {
    "text": "you should also consider how the tooling is for your language so some languages Ruby python node.js have really really",
    "start": "499800",
    "end": "507720"
  },
  {
    "text": "good tooling for integrating with rust Lua also has quite good tooling for",
    "start": "507720",
    "end": "512820"
  },
  {
    "text": "integrating with rust so languages in this upper right quadrant right here are going to be really good choices for us",
    "start": "512820",
    "end": "518159"
  },
  {
    "text": "to use for an ffi refactor if you're dealing with something that has poor tooling or something that's",
    "start": "518159",
    "end": "524640"
  },
  {
    "text": "really not going to get much of a performance benefit from refactoring to rest than",
    "start": "524640",
    "end": "529680"
  },
  {
    "text": "you should maybe consider other options go is a pretty interesting choice because go is at a similar performance",
    "start": "529680",
    "end": "537779"
  },
  {
    "text": "level to rest rust is generally faster because it doesn't have a garbage collector it doesn't have quite as heavy",
    "start": "537779",
    "end": "543779"
  },
  {
    "text": "of a run time however the tooling is not great because if we wanted to integrate",
    "start": "543779",
    "end": "549779"
  },
  {
    "text": "go with rust we have to rely on the cffi and go developers can tell you that once",
    "start": "549779",
    "end": "556680"
  },
  {
    "text": "you have to invoke the cffi in go it slows down a lot so",
    "start": "556680",
    "end": "563760"
  },
  {
    "text": "there hasn't been a whole lot of development work on building out great go Bindings that I'm aware of at least",
    "start": "563760",
    "end": "569700"
  },
  {
    "text": "because people are aware that there's this huge performance penalty that will have to be paid if you want to do an ffi",
    "start": "569700",
    "end": "578100"
  },
  {
    "text": "linking between go and rust so generally speaking a language like",
    "start": "578100",
    "end": "583500"
  },
  {
    "text": "Ruby python node Lua is going to be a really good choice and others not so good",
    "start": "583500",
    "end": "589860"
  },
  {
    "text": "so for the purposes of having a concrete example to talk through in the rest of",
    "start": "589860",
    "end": "595260"
  },
  {
    "text": "this talk we are going to imagine that you're a developer you're working on a",
    "start": "595260",
    "end": "600720"
  },
  {
    "text": "flask HTTP server application that's written in Python",
    "start": "600720",
    "end": "606060"
  },
  {
    "text": "we're just going to take a look at this one Handler just so that we have something really small and concise that we can deal with this Handler if we can",
    "start": "606060",
    "end": "613160"
  },
  {
    "text": "see it takes in a list of numbers in a Json request post body",
    "start": "613160",
    "end": "618779"
  },
  {
    "text": "and it computes several statistical properties about those numbers it computes the range which is the the",
    "start": "618779",
    "end": "625680"
  },
  {
    "text": "difference between the maximum and the minimum values it computes the quartiles which are the 25th 50th and 75th",
    "start": "625680",
    "end": "633300"
  },
  {
    "text": "percentiles it computes the mean the average of all the numbers and it computes the standard",
    "start": "633300",
    "end": "639779"
  },
  {
    "text": "deviation which is something that I don't exactly know the definition of but statisticians tell me it's important",
    "start": "639779",
    "end": "647640"
  },
  {
    "text": "so let's see how we can do an ffi refactor let's see how we can redo this in rest",
    "start": "647640",
    "end": "653339"
  },
  {
    "text": "let's go um in this section as I'm talking through rust code I have been advised by",
    "start": "653339",
    "end": "659940"
  },
  {
    "text": "the conference organizers that it is better to talk at a more advanced level and assume",
    "start": "659940",
    "end": "666899"
  },
  {
    "text": "that people will do some research outside so there is a free resource at",
    "start": "666899",
    "end": "672920"
  },
  {
    "text": "doc.rustlang.org book this is the this is the book The Rest",
    "start": "672920",
    "end": "678540"
  },
  {
    "text": "programming language written by Steve klabnik and Carol Nichols Golding it's available for free online and there's a",
    "start": "678540",
    "end": "685500"
  },
  {
    "text": "few places where I'm going to be calling out uh Which chapter in the rest programming language you should read",
    "start": "685500",
    "end": "692040"
  },
  {
    "text": "through if you would like to get some more information on one of these subjects but if you are interested in Russ more generally I would highly",
    "start": "692040",
    "end": "698160"
  },
  {
    "text": "recommend reading through the book because it's a pretty good book alrighty so we're going to get started",
    "start": "698160",
    "end": "704700"
  },
  {
    "text": "by creating a new rust project by running cargo new dash dash lib our stats this is going to create a couple",
    "start": "704700",
    "end": "710880"
  },
  {
    "text": "new files for us the first one is cargo.tamil which is sort of like the the package managers uh registry file",
    "start": "710880",
    "end": "719100"
  },
  {
    "text": "sort of like package.json in a node project and it's going to create a lib.rs file this is the the entry point",
    "start": "719100",
    "end": "725700"
  },
  {
    "text": "for our our crate so let's open up that cargo.tamil file",
    "start": "725700",
    "end": "731820"
  },
  {
    "text": "and we're going to add a couple of dependencies the first one is we're going to add a statistics crate version 0.15 of a crate",
    "start": "731820",
    "end": "740459"
  },
  {
    "text": "called status if you noticed in the python code we were actually using the statistics",
    "start": "740459",
    "end": "745800"
  },
  {
    "text": "module from Python's standard Library rust has a much much smaller standard",
    "start": "745800",
    "end": "750899"
  },
  {
    "text": "Library than pythons it basically only includes OS Primitives things like files",
    "start": "750899",
    "end": "757519"
  },
  {
    "text": "threads basic timer functionality and some networking code",
    "start": "757519",
    "end": "765120"
  },
  {
    "text": "as well as some generic data structures python has a very very large standard Library by comparison so we're bringing",
    "start": "765120",
    "end": "772139"
  },
  {
    "text": "in this Statistics rate so that we have access to some statistical functions",
    "start": "772139",
    "end": "777959"
  },
  {
    "text": "we're also going to be bringing in version 0.16 of the pi 03 crate Pi 03 is",
    "start": "777959",
    "end": "783480"
  },
  {
    "text": "going to be used to generate the Bindings that talk between rust and python we're also going to need to enable the",
    "start": "783480",
    "end": "790200"
  },
  {
    "text": "extension module feature this is required for making an extension module making something that compiles rust code",
    "start": "790200",
    "end": "797579"
  },
  {
    "text": "into something that python knows how to deal with there are other features available for doing different things you",
    "start": "797579",
    "end": "802680"
  },
  {
    "text": "can for example write rust code that runs python code",
    "start": "802680",
    "end": "808680"
  },
  {
    "text": "lots of different options available to us we're also going to add a little bit of",
    "start": "808680",
    "end": "814680"
  },
  {
    "text": "metadata further up in the cargo.tamil we're going to set the crate type to be",
    "start": "814680",
    "end": "820380"
  },
  {
    "text": "a c die lib so normally when we compile rust we're actually compiling",
    "start": "820380",
    "end": "825660"
  },
  {
    "text": "code that is only useful to the same version of the rust compiler on",
    "start": "825660",
    "end": "831899"
  },
  {
    "text": "the same Hardware architecture so setting the crate type to see dialib will actually cause us to use C calling",
    "start": "831899",
    "end": "838740"
  },
  {
    "text": "conventions and this is necessary so that the python interpreter knows how to call our functions",
    "start": "838740",
    "end": "845839"
  },
  {
    "text": "now the uh the general architecture of of what we're going to do here",
    "start": "846660",
    "end": "851820"
  },
  {
    "text": "we have our python code we have our rust code uh the flask library is going to call",
    "start": "851820",
    "end": "858180"
  },
  {
    "text": "into our python HTTP Handler which is going to deserialize the Json response the Json request body",
    "start": "858180",
    "end": "864600"
  },
  {
    "text": "it's going to send that over across the ffi boundary into rust which is going to compute the statistics then we're going",
    "start": "864600",
    "end": "871680"
  },
  {
    "text": "to send that back across the ffi boundary to Python and that is going to be serialized back into Json",
    "start": "871680",
    "end": "878279"
  },
  {
    "text": "which is then going to go back out to the HTTP client we could",
    "start": "878279",
    "end": "883980"
  },
  {
    "text": "pretty easily perhaps more easily even have the Json deserialize and serialize",
    "start": "883980",
    "end": "890100"
  },
  {
    "text": "steps happen inside of rust but I didn't want to do that because it",
    "start": "890100",
    "end": "895260"
  },
  {
    "text": "kind of goes against the spirit of this talk like the the idea is that we can take one piece of functionality and we",
    "start": "895260",
    "end": "901620"
  },
  {
    "text": "can rewrite that one piece of functionality in rest and in my mind the",
    "start": "901620",
    "end": "906720"
  },
  {
    "text": "the Json serialized deserializing is some extra piece of work that you know",
    "start": "906720",
    "end": "913440"
  },
  {
    "text": "needs to say in Python for for some reason so we're going to keep that in Python",
    "start": "913440",
    "end": "919800"
  },
  {
    "text": "it's also going to give us the opportunity to see how we can pass structured data back and forth between",
    "start": "919800",
    "end": "925079"
  },
  {
    "text": "these two languages because if we were doing the Json parsing and serializing in Rust then we would",
    "start": "925079",
    "end": "932880"
  },
  {
    "text": "actually be just be passing strings back and forth and that's a little bit less interesting",
    "start": "932880",
    "end": "938579"
  },
  {
    "text": "so now let's go ahead and jump into the code we're going to open up the lib.rs file",
    "start": "938579",
    "end": "944820"
  },
  {
    "text": "in the source directory and there's going to be a bunch of starter code in there and we're just going to go ahead and delete all that",
    "start": "944820",
    "end": "950399"
  },
  {
    "text": "and we're going to create a new function called compute stats it's going to take in a VEC of X f64s",
    "start": "950399",
    "end": "957540"
  },
  {
    "text": "that is a growable array of floating Point 64-bit floating Point numbers that",
    "start": "957540",
    "end": "963899"
  },
  {
    "text": "lives on the Heap and we're going to collect numbers but what is our what is our return type",
    "start": "963899",
    "end": "969300"
  },
  {
    "text": "going to be on this function so let's let's look back to the python code really briefly",
    "start": "969300",
    "end": "976260"
  },
  {
    "text": "the python code returns a Json object that has these four properties it has a range quartiles means and STD Dev",
    "start": "976260",
    "end": "984500"
  },
  {
    "text": "standard deviation in Rust we generally don't pass around",
    "start": "984500",
    "end": "990120"
  },
  {
    "text": "like Anonymous dictionaries that have complex types for the values generally speaking we use",
    "start": "990120",
    "end": "996959"
  },
  {
    "text": "structs that have well-typed fields so we're going to create a new struct in",
    "start": "996959",
    "end": "1002779"
  },
  {
    "text": "our rust code we're going to call it statistics response and it's going to have those expected",
    "start": "1002779",
    "end": "1007820"
  },
  {
    "text": "four fields in it it's going to have three f64 values for the range the mean",
    "start": "1007820",
    "end": "1013519"
  },
  {
    "text": "and the standard deviation and it's also going to have a quartiles field that has an array of three f64",
    "start": "1013519",
    "end": "1021380"
  },
  {
    "text": "values so this is going to match the structure of of our python code and then we'll set the return type of",
    "start": "1021380",
    "end": "1027798"
  },
  {
    "text": "our compute stats function to be that statistics response type",
    "start": "1027799",
    "end": "1032678"
  },
  {
    "text": "we're now going to need to bring in a couple of types from the stat RS Library",
    "start": "1034280",
    "end": "1039740"
  },
  {
    "text": "these are these are all necessary and I know there's a lot of them but we're going to bring in data distribution Max",
    "start": "1039740",
    "end": "1046520"
  },
  {
    "text": "Min and Order statistics some of these are types some of these",
    "start": "1046520",
    "end": "1053240"
  },
  {
    "text": "are traits but we need to bring all of them in so that we can compute the statistics that we need to",
    "start": "1053240",
    "end": "1059720"
  },
  {
    "text": "alrighty jumping down back into our compute stats function we're going to take that Vector of",
    "start": "1059720",
    "end": "1066740"
  },
  {
    "text": "numbers and we're going to put it into a data which is a type that we just pulled out of the stat RS crate",
    "start": "1066740",
    "end": "1072320"
  },
  {
    "text": "this is necessary because a lot of the traits that we just pulled in they can only be called on a data instance and",
    "start": "1072320",
    "end": "1079940"
  },
  {
    "text": "not on a vector directly you can also see that we marked our data as being mutable",
    "start": "1079940",
    "end": "1086360"
  },
  {
    "text": "that is because in order to compute some of these statistics stat RS is actually going to shuffle",
    "start": "1086360",
    "end": "1092000"
  },
  {
    "text": "some of the elements in our uh in our data structure around and if you're used to coming from a",
    "start": "1092000",
    "end": "1099919"
  },
  {
    "text": "language like python or Ruby or Java then this might seem a little bit",
    "start": "1099919",
    "end": "1105260"
  },
  {
    "text": "strange to you because normally I think in those languages",
    "start": "1105260",
    "end": "1110419"
  },
  {
    "text": "if items need to be shuffled around is pretty common for the library to actually make a defensive copy",
    "start": "1110419",
    "end": "1115700"
  },
  {
    "text": "of whatever your your input buffer is so that as a user of that Library you're not",
    "start": "1115700",
    "end": "1122539"
  },
  {
    "text": "going to have your data changed around but generally speaking rust takes the exact opposite approach where if things",
    "start": "1122539",
    "end": "1128660"
  },
  {
    "text": "need to be mutated under the hood that will be exposed to the users so that if",
    "start": "1128660",
    "end": "1134480"
  },
  {
    "text": "the original order of your data buffer was not strictly required",
    "start": "1134480",
    "end": "1139520"
  },
  {
    "text": "you don't have to do any defensive copies at all and your code can be just a Teensy bit little faster so if you",
    "start": "1139520",
    "end": "1147200"
  },
  {
    "text": "have a really really big set of numbers that you're Computing statistics on you don't need to copy those at all you know",
    "start": "1147200",
    "end": "1153980"
  },
  {
    "text": "you can have a multi-gigabyte Vector of of numbers to compute statistics on and they'll just be",
    "start": "1153980",
    "end": "1160220"
  },
  {
    "text": "shuffled around in memory as required instead of needing to be copied just to preserve ordering that we don't",
    "start": "1160220",
    "end": "1166460"
  },
  {
    "text": "necessarily care about alrighty now we can get to filling in",
    "start": "1166460",
    "end": "1172340"
  },
  {
    "text": "our statistics response so we'll we'll put an instance of",
    "start": "1172340",
    "end": "1177380"
  },
  {
    "text": "Statistics response at the end of our function and we'll start filling in the fields Computing the range is relatively",
    "start": "1177380",
    "end": "1183919"
  },
  {
    "text": "straightforward very similar to what we did in Python we'll subtract the Max from the min",
    "start": "1183919",
    "end": "1190340"
  },
  {
    "text": "Computing the quartiles is also pretty straightforward we can use the lower quartile median and upper quartile",
    "start": "1190340",
    "end": "1196640"
  },
  {
    "text": "functions on our data instance",
    "start": "1196640",
    "end": "1201820"
  },
  {
    "text": "Computing the mean is very straightforward but it does have one little extra trick on it notice that the",
    "start": "1201919",
    "end": "1207980"
  },
  {
    "text": "call here is data.mean.unwrap so what is this unwrapped telling us",
    "start": "1207980",
    "end": "1213980"
  },
  {
    "text": "well for that we're going to need to jump to the definition of the distribution trait",
    "start": "1213980",
    "end": "1219080"
  },
  {
    "text": "and we can see that uh that the mean function does not actually return a value directly it returns an option",
    "start": "1219080",
    "end": "1225860"
  },
  {
    "text": "value um this is something that's unique to rust and some other ml type",
    "start": "1225860",
    "end": "1232400"
  },
  {
    "text": "languages and if you're used to coming from a different language you're probably used to dealing with null",
    "start": "1232400",
    "end": "1237799"
  },
  {
    "text": "values null values are a special kind of value",
    "start": "1237799",
    "end": "1243020"
  },
  {
    "text": "that can generally be assigned to variables of any type and",
    "start": "1243020",
    "end": "1249080"
  },
  {
    "text": "if you if you want to write code that correctly handles null values you",
    "start": "1249080",
    "end": "1254960"
  },
  {
    "text": "basically need to Pepper checks all over your code you need to repeat those checks because any string instance or",
    "start": "1254960",
    "end": "1262520"
  },
  {
    "text": "array instance or hash map instance might actually secretly be holding a none value",
    "start": "1262520",
    "end": "1269660"
  },
  {
    "text": "um Russ does not have the concepts of Russ does not have the concept of null",
    "start": "1269660",
    "end": "1274880"
  },
  {
    "text": "it doesn't have a secret variable that can be assigned to variables of any type so instead rust",
    "start": "1274880",
    "end": "1283280"
  },
  {
    "text": "has a special type called option and instead of being a special value",
    "start": "1283280",
    "end": "1288679"
  },
  {
    "text": "that can be assigned to variables of any type an option is a wrapper that goes",
    "start": "1288679",
    "end": "1296059"
  },
  {
    "text": "around that goes around a variable and if you have a",
    "start": "1296059",
    "end": "1302000"
  },
  {
    "text": "if you have an f64 for example if you have that 64-bit floating Point number that is always guaranteed to be",
    "start": "1302000",
    "end": "1308120"
  },
  {
    "text": "initialized to something if you have a vac that is always guaranteed to be initialized to something but if you have",
    "start": "1308120",
    "end": "1314419"
  },
  {
    "text": "an option vac or an option f64. then you have to write",
    "start": "1314419",
    "end": "1319520"
  },
  {
    "text": "the code that deals with the possibility that that thing is not initialized and",
    "start": "1319520",
    "end": "1324679"
  },
  {
    "text": "that could look something like this so we can use a match statement and we we need to deal with the case",
    "start": "1324679",
    "end": "1330919"
  },
  {
    "text": "that there's nothing there if we want to deal with the thing that is inside of",
    "start": "1330919",
    "end": "1336860"
  },
  {
    "text": "the option so comparing the two option versus null",
    "start": "1336860",
    "end": "1344320"
  },
  {
    "text": "option is strongly typed you can't get away with forgetting to check something",
    "start": "1344320",
    "end": "1350059"
  },
  {
    "text": "you can also centralize your checks which is really really nice and really really powerful because like I said when you're dealing",
    "start": "1350059",
    "end": "1356659"
  },
  {
    "text": "with null values you don't necessarily know that the input the input value to a function or",
    "start": "1356659",
    "end": "1364880"
  },
  {
    "text": "the return value from a function isn't null because it's according to the type system it's",
    "start": "1364880",
    "end": "1369919"
  },
  {
    "text": "theoretically possible for any function in say Java or Ruby or python to return null",
    "start": "1369919",
    "end": "1376039"
  },
  {
    "text": "so we end up repeating null checks all over the place but with option because it's strongly",
    "start": "1376039",
    "end": "1382100"
  },
  {
    "text": "typed you can convert an option back into a vac and then as long as you write the rest",
    "start": "1382100",
    "end": "1388700"
  },
  {
    "text": "of your code to deal with a VEC you know that it's initialized and you never have to do that check again it's",
    "start": "1388700",
    "end": "1394280"
  },
  {
    "text": "very very convenient and it leads to Great Peace of Mind knowing that things are initialized",
    "start": "1394280",
    "end": "1401240"
  },
  {
    "text": "so let's let's jump back to our code and see what that one that one line that we made all that fuss was about",
    "start": "1401240",
    "end": "1407840"
  },
  {
    "text": "on this line we have data.mean which remember returns an option f64 and then",
    "start": "1407840",
    "end": "1413179"
  },
  {
    "text": "we call unwrap on it unwrap is a function for dealing with options it will look at the thing it will look at",
    "start": "1413179",
    "end": "1419539"
  },
  {
    "text": "the option and if there's a value present it Returns the value and if there's no value present it will",
    "start": "1419539",
    "end": "1425720"
  },
  {
    "text": "actually Panic the whole thread and make the thread abort well make the thread",
    "start": "1425720",
    "end": "1430820"
  },
  {
    "text": "unwind up to a point where there's a panic Handler generally speaking in production code you don't want to be using unwrap you",
    "start": "1430820",
    "end": "1437659"
  },
  {
    "text": "want to be using proper proper handling of our options with a match statement like we had previously",
    "start": "1437659",
    "end": "1444020"
  },
  {
    "text": "but this is this is quick and dirty so we're gonna we're gonna use an an unwrap if you'd like some more information on",
    "start": "1444020",
    "end": "1450620"
  },
  {
    "text": "using options I believe you can read chapter six of the rust programming language",
    "start": "1450620",
    "end": "1456220"
  },
  {
    "text": "similarly when we calculate the standard deviation this function also returns an option so",
    "start": "1456260",
    "end": "1462140"
  },
  {
    "text": "we're also going to need to use unwrap on it now we have our statistics response it's",
    "start": "1462140",
    "end": "1468380"
  },
  {
    "text": "got all the fields in it but it's actually not very useful to us yet because it's a rust function that",
    "start": "1468380",
    "end": "1474140"
  },
  {
    "text": "returns a rust data type and we need a python function we need something that we can run from Python and call from our",
    "start": "1474140",
    "end": "1480080"
  },
  {
    "text": "flask HTTP Handler we don't have it yet so let's do that we're going to need to",
    "start": "1480080",
    "end": "1486080"
  },
  {
    "text": "import some more types from this time Pi O3 Pi O3 remember is the the uh the rest",
    "start": "1486080",
    "end": "1493640"
  },
  {
    "text": "crate that allows us to write bindings between Python and rust we're going to bring in pi O3 Prelude",
    "start": "1493640",
    "end": "1499760"
  },
  {
    "text": "star a Prelude is a convention but not necessarily a requirement for rest",
    "start": "1499760",
    "end": "1505940"
  },
  {
    "text": "crates if there's a lot of types and traits and macros and things that need to be brought in in order for your crate",
    "start": "1505940",
    "end": "1513080"
  },
  {
    "text": "to be really useful it can be common for create authors to include a module",
    "start": "1513080",
    "end": "1518240"
  },
  {
    "text": "called Prelude that includes all the most commonly needed things so you can use a",
    "start": "1518240",
    "end": "1524720"
  },
  {
    "text": "glob import like this as we're doing here now uh before we can make a python",
    "start": "1524720",
    "end": "1532880"
  },
  {
    "text": "function we actually need to make a module first a python module so a thing that can be imported in Python",
    "start": "1532880",
    "end": "1541039"
  },
  {
    "text": "and in order to do that we need to write a function that has the same name as our crate which recall is our stats so write",
    "start": "1541039",
    "end": "1548419"
  },
  {
    "text": "a function called our stats and we're going to add this little annotation above it Pi module this is coming from",
    "start": "1548419",
    "end": "1556640"
  },
  {
    "text": "the Prelude of Pi 03 and it is going to automatically expand at compile time",
    "start": "1556640",
    "end": "1562520"
  },
  {
    "text": "into a bunch of uh see stuff that the python interpreter",
    "start": "1562520",
    "end": "1569000"
  },
  {
    "text": "knows how to read and knows how to turn into a module this is going to require us to add a",
    "start": "1569000",
    "end": "1575059"
  },
  {
    "text": "couple of parameters to this function that are not both going to be used but they're both required based on the",
    "start": "1575059",
    "end": "1580279"
  },
  {
    "text": "definition of the pi module macro the first one is just called python this",
    "start": "1580279",
    "end": "1586940"
  },
  {
    "text": "is a type that comes from PI 03 and it represents taking the Gill the global interpreter lock",
    "start": "1586940",
    "end": "1592340"
  },
  {
    "text": "of the Python interpreter so a lot of times if you're constructing a python type",
    "start": "1592340",
    "end": "1597980"
  },
  {
    "text": "you need access to the python type",
    "start": "1597980",
    "end": "1604159"
  },
  {
    "text": "and this is this is to prove to Pi O3 that you are holding onto the Gill",
    "start": "1604159",
    "end": "1609440"
  },
  {
    "text": "because it's uh it's kind of easy to misuse the guilt when you're writing a",
    "start": "1609440",
    "end": "1615200"
  },
  {
    "text": "python C code since we're not actually using it in in this function we're going to prefix it",
    "start": "1615200",
    "end": "1620960"
  },
  {
    "text": "with an underscore so that the rust compiler doesn't complain and say Hey you have an unused parameter on this",
    "start": "1620960",
    "end": "1626419"
  },
  {
    "text": "function alrighty next up we are going to add a a",
    "start": "1626419",
    "end": "1631640"
  },
  {
    "text": "parameter called M and this is going to be a reference to a pi module type as implied this is a reference to an empty",
    "start": "1631640",
    "end": "1639080"
  },
  {
    "text": "python module and inside the body of this function we are going to add our",
    "start": "1639080",
    "end": "1644659"
  },
  {
    "text": "new uh compute stats function to the python module",
    "start": "1644659",
    "end": "1649880"
  },
  {
    "text": "we also need to set a return type for our PI module function for our stats function and that return",
    "start": "1649880",
    "end": "1656000"
  },
  {
    "text": "type is going to be Pi result open parenthesis close parentheses",
    "start": "1656000",
    "end": "1661520"
  },
  {
    "text": "now there's a couple interesting things going on in here so we're going to take just a sec and uh jump through them real",
    "start": "1661520",
    "end": "1668480"
  },
  {
    "text": "quick the results type is the way that we",
    "start": "1668480",
    "end": "1673940"
  },
  {
    "text": "handle errors in Rust so rust does not have an exception system that bubbles values up and",
    "start": "1673940",
    "end": "1681260"
  },
  {
    "text": "lets you catch exceptions with with handlers instead much like with options we have a result",
    "start": "1681260",
    "end": "1687980"
  },
  {
    "text": "type that has two branches it has an okay branch which also contains a",
    "start": "1687980",
    "end": "1693679"
  },
  {
    "text": "success value inside of it and there's an error branch that also contains an error value inside of it",
    "start": "1693679",
    "end": "1699679"
  },
  {
    "text": "these are strongly typed so if you want to assume that your function returned to",
    "start": "1699679",
    "end": "1705559"
  },
  {
    "text": "successful result and get the successful result out you have to deal with the possibility that your function returned",
    "start": "1705559",
    "end": "1711440"
  },
  {
    "text": "an error and that code generally looks like this just like with option we would use a",
    "start": "1711440",
    "end": "1717200"
  },
  {
    "text": "match statement and we'd say if it's okay then pull the value out and do something with it if there was an error",
    "start": "1717200",
    "end": "1722659"
  },
  {
    "text": "pull the air out and do something with it so that is result if you'd like more",
    "start": "1722659",
    "end": "1728659"
  },
  {
    "text": "information on using the result type for error handling I believe you can read chapter nine of the rest programming",
    "start": "1728659",
    "end": "1734779"
  },
  {
    "text": "language but we also had something inside of the result type we had that open parenthesis",
    "start": "1734779",
    "end": "1741020"
  },
  {
    "text": "close parenthesis and this is something called the unit type which is uh an",
    "start": "1741020",
    "end": "1746419"
  },
  {
    "text": "empty Tuple it's an interesting thing that's somewhat unique to rust",
    "start": "1746419",
    "end": "1751960"
  },
  {
    "text": "this is somewhat similar but not exactly similar to a null value so a null value remember",
    "start": "1752059",
    "end": "1759320"
  },
  {
    "text": "we said Can generally be assigned to values of any type but the unit type is actually a type in",
    "start": "1759320",
    "end": "1766700"
  },
  {
    "text": "and of itself and so you cannot actually assign assign the unit value to anything other",
    "start": "1766700",
    "end": "1774260"
  },
  {
    "text": "than a variable of the unit type it represents nothing",
    "start": "1774260",
    "end": "1780140"
  },
  {
    "text": "so if we if we jump back to our function it has a pi result return type which is actually just a",
    "start": "1780140",
    "end": "1787760"
  },
  {
    "text": "it's actually just a wrapper type an alias type that comes from the pi 03 crate",
    "start": "1787760",
    "end": "1793100"
  },
  {
    "text": "and it has its its error side always set to being a pi 03 python error",
    "start": "1793100",
    "end": "1799820"
  },
  {
    "text": "um and you just have to fill in the success side and so we have our success side set to",
    "start": "1799820",
    "end": "1805580"
  },
  {
    "text": "the unit type because remember that a result is going to",
    "start": "1805580",
    "end": "1812120"
  },
  {
    "text": "communicate either a success or an error and we really only have side effects in this function we'll have",
    "start": "1812120",
    "end": "1818960"
  },
  {
    "text": "the side effect of defining a function in here putting a function onto our module there's not like a value that we",
    "start": "1818960",
    "end": "1826940"
  },
  {
    "text": "can return we're not like fetching something from a database that might fail so there's not a great",
    "start": "1826940",
    "end": "1835299"
  },
  {
    "text": "Sentinel value that we could return so we're going to use the unit type instead",
    "start": "1835299",
    "end": "1841059"
  },
  {
    "text": "so the body of this function we're just going to put that uh that okay that success case with the unit value inside",
    "start": "1842360",
    "end": "1849260"
  },
  {
    "text": "of it and this isn't going to Define our compute stats function in a way that",
    "start": "1849260",
    "end": "1854480"
  },
  {
    "text": "python knows how to deal with but it is going to define a python module called our stats so",
    "start": "1854480",
    "end": "1861200"
  },
  {
    "text": "let's try and use it real quick so we'll jump back over to the python code we will add import R stats to the",
    "start": "1861200",
    "end": "1868640"
  },
  {
    "text": "top and we'll try to run our python code and we're going to get a giant error",
    "start": "1868640",
    "end": "1874880"
  },
  {
    "text": "because there's no module name there's no module named our stats that python knows how to import",
    "start": "1874880",
    "end": "1881600"
  },
  {
    "text": "if you if you nested your R stats folder directly under the folder where the",
    "start": "1881600",
    "end": "1887179"
  },
  {
    "text": "python code is this is actually going to work but it's not actually going to be importing the",
    "start": "1887179",
    "end": "1892700"
  },
  {
    "text": "module that we care about it's actually it's just going to be importing the directory in in a way that python can",
    "start": "1892700",
    "end": "1899179"
  },
  {
    "text": "can default to sometimes the python module system is a little confusing anyways we want to write something that",
    "start": "1899179",
    "end": "1907399"
  },
  {
    "text": "is actually going to be importing our rest code not just a directory so still on the CLI we're going to",
    "start": "1907399",
    "end": "1914360"
  },
  {
    "text": "install a developer tool that's created by the pi O3 team called Maturin",
    "start": "1914360",
    "end": "1919880"
  },
  {
    "text": "we're going to jump into our our stats folder the the folder with our rust code and we're going to run mature and",
    "start": "1919880",
    "end": "1925880"
  },
  {
    "text": "develop this is going to compile our rust code and generate some python bindings for it",
    "start": "1925880",
    "end": "1934100"
  },
  {
    "text": "now if we run flask run it's going to start up successfully there's not going to be an error because that python",
    "start": "1934100",
    "end": "1941480"
  },
  {
    "text": "module is going to be present it is going to know how to import our stats alrighty so let's jump back over to our",
    "start": "1941480",
    "end": "1948980"
  },
  {
    "text": "rust code and see what we can do let's bring in our compute stats function",
    "start": "1948980",
    "end": "1954740"
  },
  {
    "text": "on top of the compute stats function we're going to add this Pi function annotation and that is going to add some extra code",
    "start": "1954740",
    "end": "1962299"
  },
  {
    "text": "at compile time once again that is going to transform the input types and the output types into something that python",
    "start": "1962299",
    "end": "1968539"
  },
  {
    "text": "knows how to deal with so if we actually try to compile this rust code right now it's actually going",
    "start": "1968539",
    "end": "1973880"
  },
  {
    "text": "to give us a huge compiler error and it's going to say it doesn't actually know",
    "start": "1973880",
    "end": "1979100"
  },
  {
    "text": "how to turn a statistics response into something that python knows how to deal with",
    "start": "1979100",
    "end": "1984320"
  },
  {
    "text": "so we gotta fix that we can do that by adding some more of these little decorators onto our rust",
    "start": "1984320",
    "end": "1990140"
  },
  {
    "text": "code we're going to add the pi class attribute macro on top of our statistics response struct and we're going to add",
    "start": "1990140",
    "end": "1997220"
  },
  {
    "text": "the pi O3 get attribute macro on top of all the fields",
    "start": "1997220",
    "end": "2002559"
  },
  {
    "text": "of our statistics response this is necessary so that we can access all these individual Fields otherwise they",
    "start": "2002559",
    "end": "2008919"
  },
  {
    "text": "would just sort of be hidden from the python side",
    "start": "2008919",
    "end": "2013440"
  },
  {
    "text": "next we're going to jump down into our module definition function and we are going to put in this somewhat",
    "start": "2019720",
    "end": "2026559"
  },
  {
    "text": "complicated line of code it's I know it's a lot to look at but it is well documented and all the steps are are",
    "start": "2026559",
    "end": "2032559"
  },
  {
    "text": "necessary um we're going to call the add function function on our module and we're going",
    "start": "2032559",
    "end": "2039220"
  },
  {
    "text": "to pass that the results of the wrap Pi function macro on our compute stats",
    "start": "2039220",
    "end": "2044860"
  },
  {
    "text": "function and that also needs access to the module and then these question marks that are",
    "start": "2044860",
    "end": "2050618"
  },
  {
    "text": "here at the end are are air handling so those are actually going to be doing an early return if",
    "start": "2050619",
    "end": "2057220"
  },
  {
    "text": "if those expressions fail if they evaluate to error responses",
    "start": "2057220",
    "end": "2062919"
  },
  {
    "text": "so we're almost there we're so close we have re-implemented the functionality we",
    "start": "2062919",
    "end": "2069460"
  },
  {
    "text": "have generated the python bindings we have exposed those bindings to Python and we have generated a python class",
    "start": "2069460",
    "end": "2075460"
  },
  {
    "text": "that we can use in order to get access to our fields",
    "start": "2075460",
    "end": "2081878"
  },
  {
    "text": "Let's uh let's recompile our rust code so we'll run cargo build from the command line and we don't need to run",
    "start": "2081879",
    "end": "2089440"
  },
  {
    "text": "mature and develop again because of the Sim links that were created we can just recompile normally and this is going to",
    "start": "2089440",
    "end": "2094960"
  },
  {
    "text": "regenerate everything that's required now we can uh we can do the python the",
    "start": "2094960",
    "end": "2103000"
  },
  {
    "text": "python refactoring over in the python code we can change up our Handler a little",
    "start": "2103000",
    "end": "2108400"
  },
  {
    "text": "bit um we can call our stats dot compute stats",
    "start": "2108400",
    "end": "2113680"
  },
  {
    "text": "that's the function that we exposed that we wrote and we exposed and we'll pass it our numbers just the",
    "start": "2113680",
    "end": "2119680"
  },
  {
    "text": "normal numbers that that come straight out of the requests Json body",
    "start": "2119680",
    "end": "2124900"
  },
  {
    "text": "and then we are going to pass all of the fields from our response from the",
    "start": "2124900",
    "end": "2130359"
  },
  {
    "text": "statistics response into flask's jsonify function",
    "start": "2130359",
    "end": "2135599"
  },
  {
    "text": "we actually do have to walk all of the fields here individually unfortunately Pi O3 does not automatically generate",
    "start": "2135599",
    "end": "2143020"
  },
  {
    "text": "Json deserializable Pi classes we could do it with a little bit of extra work but",
    "start": "2143020",
    "end": "2148599"
  },
  {
    "text": "um we're not going to do that in this talk so we're just going to walk walk all the fields manually",
    "start": "2148599",
    "end": "2155560"
  },
  {
    "text": "and uh yeah we can now boot up our flask application and we can try running it we",
    "start": "2155560",
    "end": "2162280"
  },
  {
    "text": "can try running our HTTP Handler so let's use Curl we'll hit that stats endpoint and we do get some numbers back",
    "start": "2162280",
    "end": "2169300"
  },
  {
    "text": "awesome it's it's all working everything's flowing great let's also uh just for fun let's compare",
    "start": "2169300",
    "end": "2176800"
  },
  {
    "text": "the results from our python Handler the original python Handler that was 100 python as well as our refactored Handler",
    "start": "2176800",
    "end": "2185460"
  },
  {
    "text": "and oh dear there are actually some differences in here these are these values are are not the same",
    "start": "2186579",
    "end": "2193480"
  },
  {
    "text": "the quartiles fields are different between Python and rust and in my research I learned that there",
    "start": "2193480",
    "end": "2200380"
  },
  {
    "text": "are some differences in statistical libraries and how they compute quartiles",
    "start": "2200380",
    "end": "2205599"
  },
  {
    "text": "of of large data series so uh what do we do",
    "start": "2205599",
    "end": "2213339"
  },
  {
    "text": "well I'm not an engineer anymore but let me think back on my time as a",
    "start": "2213339",
    "end": "2221320"
  },
  {
    "text": "staff engineer and give you a great answer to that question",
    "start": "2221320",
    "end": "2227640"
  },
  {
    "text": "it depends that's right you actually have to use your brain you have to think about the",
    "start": "2227859",
    "end": "2233619"
  },
  {
    "text": "needs of your system and you have to figure out exactly what you need to do there's a number of strategies that we",
    "start": "2233619",
    "end": "2239500"
  },
  {
    "text": "can take to fix this problem depending on their needs what can we do there's two broad things",
    "start": "2239500",
    "end": "2246640"
  },
  {
    "text": "we can do we can maintain the existing Behavior exactly or we can figure out if there's a way we",
    "start": "2246640",
    "end": "2252940"
  },
  {
    "text": "can deal with it maybe this this change is acceptable for",
    "start": "2252940",
    "end": "2259240"
  },
  {
    "text": "your system for some reason I don't know why it might be but maybe it is maybe you can update your clients so they can",
    "start": "2259240",
    "end": "2264880"
  },
  {
    "text": "deal with this change but maybe it is possible for you to deal with it",
    "start": "2264880",
    "end": "2270339"
  },
  {
    "text": "but if you want to maintain Behavior you need your code to return exactly the same stuff what can we do",
    "start": "2270339",
    "end": "2276820"
  },
  {
    "text": "there's a couple strategies we can explore we could try using a different Library maybe there's something other",
    "start": "2276820",
    "end": "2282579"
  },
  {
    "text": "than stat RS that has the same return values for quartiles as the python code",
    "start": "2282579",
    "end": "2290200"
  },
  {
    "text": "what if that's not an option maybe we could re-implement python statistics library in Rust",
    "start": "2290200",
    "end": "2297339"
  },
  {
    "text": "maybe it's not quite as fast as as stat RS but even just rewriting the exact",
    "start": "2297339",
    "end": "2303040"
  },
  {
    "text": "same code can often be much faster because python is going to have a lot more copying a lot more GC overhead than",
    "start": "2303040",
    "end": "2309880"
  },
  {
    "text": "something like rest will there's another option too because we're taking an incremental approach here we",
    "start": "2309880",
    "end": "2316540"
  },
  {
    "text": "could actually leave the quartile calculation within python completely",
    "start": "2316540",
    "end": "2322320"
  },
  {
    "text": "we don't need to do everything in Rust it's just something that we can do um",
    "start": "2322540",
    "end": "2328480"
  },
  {
    "text": "yes So based on what your needs are based on your specific situation you need to",
    "start": "2328480",
    "end": "2334119"
  },
  {
    "text": "explore one of these options I left this error in here on purpose so that we could discuss this",
    "start": "2334119",
    "end": "2340180"
  },
  {
    "text": "um it's very important yeah",
    "start": "2340180",
    "end": "2343859"
  },
  {
    "text": "alrighty now that we have our functionality written let's talk about how we could test it",
    "start": "2345940",
    "end": "2351220"
  },
  {
    "text": "I know everybody loves writing tests everybody loves having super long test Suites but tests are super important",
    "start": "2351220",
    "end": "2357400"
  },
  {
    "text": "especially when we're going between multiple languages so we're going to re we're going to",
    "start": "2357400",
    "end": "2363339"
  },
  {
    "text": "write some some unit tests in our rust code so that we can do automatic validation",
    "start": "2363339",
    "end": "2368920"
  },
  {
    "text": "we're going to create a new module at the bottom of our rust code called tests the name of the module isn't strictly",
    "start": "2368920",
    "end": "2374440"
  },
  {
    "text": "important it's just convention we're going to add an attribute macro on",
    "start": "2374440",
    "end": "2379599"
  },
  {
    "text": "top of the module this is going to do conditional compilation for us so the",
    "start": "2379599",
    "end": "2385839"
  },
  {
    "text": "test code is not going to be included in any production builds it's only going to be compiled when we write test code",
    "start": "2385839",
    "end": "2394500"
  },
  {
    "text": "we are going to import the compute stats function from the root of the crate into our test module and we're going to write",
    "start": "2395200",
    "end": "2402579"
  },
  {
    "text": "a new function called test 9 numbers",
    "start": "2402579",
    "end": "2407040"
  },
  {
    "text": "adding the test attribute macro on top of our function is going to give us the ability to have our function picked up",
    "start": "2408520",
    "end": "2415540"
  },
  {
    "text": "by rust automated test harness and it will run the function and give us",
    "start": "2415540",
    "end": "2421540"
  },
  {
    "text": "an alert if the function panics which is is going to happen if if any of our assertions fail",
    "start": "2421540",
    "end": "2428040"
  },
  {
    "text": "pop in some known some known numbers Let's uh calculate the statistics for",
    "start": "2429160",
    "end": "2436420"
  },
  {
    "text": "that set of known numbers and we're going to add in some assertions and these are easy to",
    "start": "2436420",
    "end": "2442000"
  },
  {
    "text": "calculate because it's only numbers",
    "start": "2442000",
    "end": "2446880"
  },
  {
    "text": "we can run our tests by using cargo test and this is going to tell us that we had",
    "start": "2447119",
    "end": "2454300"
  },
  {
    "text": "is it going to compile our code for us and it's going to tell us that we had one test function and it ran",
    "start": "2454300",
    "end": "2459460"
  },
  {
    "text": "successfully now one unit test is obviously not enough to",
    "start": "2459460",
    "end": "2465760"
  },
  {
    "text": "to deal with a whole big refactor like this like I said we're going between multiple languages and we really need to",
    "start": "2465760",
    "end": "2471339"
  },
  {
    "text": "be careful with our testing so you should be leveraging existing tests",
    "start": "2471339",
    "end": "2476560"
  },
  {
    "text": "you should be leveraging the tests that already exists in Python and you should be updating those so that they're",
    "start": "2476560",
    "end": "2482500"
  },
  {
    "text": "capable of testing not just the python code but the rust code as well because compute stats is just a normal python",
    "start": "2482500",
    "end": "2489220"
  },
  {
    "text": "function you can call it from either place you can rely on dependency injection as",
    "start": "2489220",
    "end": "2496599"
  },
  {
    "text": "well so that you can test you can test more code paths with both the python",
    "start": "2496599",
    "end": "2501640"
  },
  {
    "text": "code and the rust code and something else you can do is actually do randomized testing between",
    "start": "2501640",
    "end": "2507900"
  },
  {
    "text": "the old code and the new code so generate a random input feed it into the old code see what it gets you back and",
    "start": "2507900",
    "end": "2515200"
  },
  {
    "text": "then feed it into the new code and compare those two results they should match up",
    "start": "2515200",
    "end": "2520980"
  },
  {
    "text": "let's also talk about performance we did this whole thing with the goal of making our code faster",
    "start": "2524500",
    "end": "2530320"
  },
  {
    "text": "did we do it let's see we can use Python's time it module to do some micro",
    "start": "2530320",
    "end": "2536740"
  },
  {
    "text": "benchmarking so for the purposes of this micro Benchmark",
    "start": "2536740",
    "end": "2542020"
  },
  {
    "text": "stats Pi is a function that has the original code of our python HTTP Handler in it we're going to feed in those nine",
    "start": "2542020",
    "end": "2548740"
  },
  {
    "text": "numbers and we're going to run this 10 000 times we're going to do a very similar thing",
    "start": "2548740",
    "end": "2554440"
  },
  {
    "text": "with our rust code we're going to take those nine numbers and we are going to compute those stats ten thousand times",
    "start": "2554440",
    "end": "2561520"
  },
  {
    "text": "and let's see what we got what happened we can see that the rust code ran about",
    "start": "2561520",
    "end": "2569740"
  },
  {
    "text": "a hundred times faster than the python code a little more than 10 times 100 times faster actually and this seems really promising this is",
    "start": "2569740",
    "end": "2576640"
  },
  {
    "text": "very cool so remember that this is a benchmark that's running through python so",
    "start": "2576640",
    "end": "2583420"
  },
  {
    "text": "we're we're not just getting the faster code because it's all in Rust but",
    "start": "2583420",
    "end": "2589319"
  },
  {
    "text": "there is a certain amount of overhead that comes from it being in Python too so this is you know",
    "start": "2589319",
    "end": "2595119"
  },
  {
    "text": "somewhat Fair but there's a little bit of uh",
    "start": "2595119",
    "end": "2601900"
  },
  {
    "text": "there's a little bit of trickery going on in here because remember we ran the test 10 000 times and this is actually",
    "start": "2601900",
    "end": "2607540"
  },
  {
    "text": "the total time once we add in the average time it starts to get a little bit less",
    "start": "2607540",
    "end": "2613660"
  },
  {
    "text": "impressive right because you divide those numbers by 10 000 and you realize oh well the python code was",
    "start": "2613660",
    "end": "2620920"
  },
  {
    "text": "pretty pretty quick on its own already um yes",
    "start": "2620920",
    "end": "2626680"
  },
  {
    "text": "this is not an extremely slow problem I was feeling a little bit uncreative when I came up with this",
    "start": "2626680",
    "end": "2633160"
  },
  {
    "text": "problem but if you started with something that was taking you know 500 milliseconds a",
    "start": "2633160",
    "end": "2639880"
  },
  {
    "text": "second five seconds in Python code you know you might expect to see significantly more",
    "start": "2639880",
    "end": "2646839"
  },
  {
    "text": "impressive results from from refactoring to rust so we did make the thing 100 times faster that did actually happen",
    "start": "2646839",
    "end": "2652660"
  },
  {
    "text": "however it was already operating at a relatively quick speed in the python to",
    "start": "2652660",
    "end": "2658060"
  },
  {
    "text": "begin with we also have to consider macro benchmarking it's really tempting to",
    "start": "2658060",
    "end": "2665260"
  },
  {
    "text": "just want to do a micro Benchmark like just put the teeniest bit of code on the",
    "start": "2665260",
    "end": "2671200"
  },
  {
    "text": "bench and test that like that's going to give you the best results or the the best looking results at least",
    "start": "2671200",
    "end": "2677020"
  },
  {
    "text": "but if we do a macro Benchmark that compares the HTTP performance of the old code and the new code we can see that",
    "start": "2677020",
    "end": "2683319"
  },
  {
    "text": "it's it's like about a 15 performance difference between Python and rust and that's because a lot of the time that is",
    "start": "2683319",
    "end": "2690099"
  },
  {
    "text": "spent in our HTTP endpoint is going into the flask Library itself and it's HTTP",
    "start": "2690099",
    "end": "2696700"
  },
  {
    "text": "handling and the Json serializing deserializing so once again we should be picking",
    "start": "2696700",
    "end": "2702460"
  },
  {
    "text": "something that is pretty CPU bound where we're spending a lot of our time in one place and we should be pulling that into",
    "start": "2702460",
    "end": "2708579"
  },
  {
    "text": "rest micro benchmarks and macro benchmarks are both super important they're both",
    "start": "2708579",
    "end": "2714520"
  },
  {
    "text": "they both have their uses but uh it is important it is important to do macro",
    "start": "2714520",
    "end": "2720160"
  },
  {
    "text": "benchmarks and to make sure you know how your system is actually performing under load",
    "start": "2720160",
    "end": "2726900"
  },
  {
    "text": "alrighty so we've gone through quite a bit in in kind of a short period of time today uh we looked at ffi refactoring",
    "start": "2727119",
    "end": "2735280"
  },
  {
    "text": "and what it is we looked at how to think about the feasibility of an ffi refactoring project",
    "start": "2735280",
    "end": "2740740"
  },
  {
    "text": "we learned how we can use the pi O3 library to do an ffi refactoring project",
    "start": "2740740",
    "end": "2745960"
  },
  {
    "text": "we learned a little bit about how we can test systems using rust's testing",
    "start": "2745960",
    "end": "2751300"
  },
  {
    "text": "framework and we looked at how we could do some benchmarking strategies for an ffi refactoring project",
    "start": "2751300",
    "end": "2758020"
  },
  {
    "text": "alrighty I had so much fun putting this talk together and speaking with everybody today thank you so much for coming thank",
    "start": "2758020",
    "end": "2764980"
  },
  {
    "text": "you so much for listening uh if you enjoyed this talk I really hope that you'll check out my book refactoring to",
    "start": "2764980",
    "end": "2770260"
  },
  {
    "text": "rest it's available at manning.com and I do have some discount codes as well as a",
    "start": "2770260",
    "end": "2777220"
  },
  {
    "text": "few copies of my book that I'm going to be raffling off for free on the slack Channel after this talk I hope you'll",
    "start": "2777220",
    "end": "2783880"
  },
  {
    "text": "come and check those out thank you",
    "start": "2783880",
    "end": "2789420"
  },
  {
    "text": "[Music]",
    "start": "2790040",
    "end": "2796330"
  }
]