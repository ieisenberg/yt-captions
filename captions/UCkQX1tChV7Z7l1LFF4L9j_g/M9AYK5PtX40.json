[
  {
    "text": "thank you very much thank you very much Wes for a very kind introduction so clearly so obvious for my employers",
    "start": "3960",
    "end": "11990"
  },
  {
    "text": "during my career I spend a lot of time working on JVMs I was for Oracle and",
    "start": "11990",
    "end": "18449"
  },
  {
    "text": "before that Sun in the June the hospital for over seven years then after a short stint on Adobe have been at Twitter in",
    "start": "18449",
    "end": "24839"
  },
  {
    "text": "the Twitter VM team for just over three years now and a Twitter we of course evaluate technologies that we're gonna use in the",
    "start": "24839",
    "end": "30720"
  },
  {
    "text": "future so currently we're on Java 8 but Java 9 is coming so we started looking",
    "start": "30720",
    "end": "35730"
  },
  {
    "text": "into it so I'm gonna share some of my experiences about Java 9 so as we know Java 9 is almost upon us right so this",
    "start": "35730",
    "end": "43860"
  },
  {
    "text": "was the initial prediction and well it's been pushed out a couple you know a couple of times so hopefully in July of",
    "start": "43860",
    "end": "50340"
  },
  {
    "text": "next year we're gonna have the first general availability release for Gemini that we can all move to and start using",
    "start": "50340",
    "end": "56700"
  },
  {
    "text": "right so what are the new features the new interesting features that are are that will appear in Java 9 well the",
    "start": "56700",
    "end": "64830"
  },
  {
    "text": "obvious one is jigsaw the new module system I would like to take a moment now to say that I know everybody's",
    "start": "64830",
    "end": "70590"
  },
  {
    "text": "complaining about the delays however this is a huge task right you have a very mature language you try to retrofit",
    "start": "70590",
    "end": "76590"
  },
  {
    "text": "it with a module system this is a huge a complicated task so given my live - give them a little bit of slack about the delays I'm glad",
    "start": "76590",
    "end": "83580"
  },
  {
    "text": "that they're trying to do it right rather a rush again getting wrong and they will have to live with words and for many many many years to come right",
    "start": "83580",
    "end": "89130"
  },
  {
    "text": "so everybody we talk about jigsaw well what's what else is there in Java 9 well Gil in the morning touched a little bit",
    "start": "89130",
    "end": "95460"
  },
  {
    "text": "but well there is a long list of features in Java 9 that nobody talks about because everybody suggests with",
    "start": "95460",
    "end": "101460"
  },
  {
    "text": "jigsaw right so for this talk I'm gonna concentrate on a few of these okay and in particular concentrate on three and",
    "start": "101460",
    "end": "108630"
  },
  {
    "text": "features that are related to performance performance tuning profiling etc so the",
    "start": "108630",
    "end": "114510"
  },
  {
    "text": "first thing we're gonna touch upon and is going to affect a lot of folks is the unified JVM login framework and wall of",
    "start": "114510",
    "end": "121020"
  },
  {
    "text": "GC logs right so hands up who has like who reads GC logs that work regularly ok",
    "start": "121020",
    "end": "129239"
  },
  {
    "text": "a few people who hates GC logs with a passion all right excellent you have the idea so for anybody who",
    "start": "129239",
    "end": "136409"
  },
  {
    "text": "hasn't seen GC logs I'm gonna a little bit of a kind of overview and whyever terrible and why you know the",
    "start": "136409",
    "end": "142810"
  },
  {
    "text": "jvm the new logging framework is you're not gonna help us a lot from nine so here is an example of a GC log if you",
    "start": "142810",
    "end": "150609"
  },
  {
    "text": "just you know type Java that agency which shows you hey you have this option verbose that you can say GC and you",
    "start": "150609",
    "end": "155980"
  },
  {
    "text": "enable for most you CA you get something like this and every log record represents a garbage collection you have",
    "start": "155980",
    "end": "162250"
  },
  {
    "text": "some information about what caused the garbage collection is a location failure in this case you have a heap information",
    "start": "162250",
    "end": "167290"
  },
  {
    "text": "before and after and how long did you see lasted right so that's the proposed disinformation and nobody uses verbose",
    "start": "167290",
    "end": "173260"
  },
  {
    "text": "receive during like really serious about doing GC tuning because it has very very",
    "start": "173260",
    "end": "179349"
  },
  {
    "text": "minimal information and most of the time it doesn't tell you you know what when you know what went wrong here did you see what happened and what potentially",
    "start": "179349",
    "end": "185799"
  },
  {
    "text": "caused causing the issue so the minimum number of arguments I would command line",
    "start": "185799",
    "end": "190870"
  },
  {
    "text": "arguments I would recommend that you enable and again we have to survive with Java 8 for the time being at least until",
    "start": "190870",
    "end": "197139"
  },
  {
    "text": "July so this is not too late to actually start using these options right the minimum number of our parameters are",
    "start": "197139",
    "end": "204040"
  },
  {
    "text": "these and if you enable them so well I'm gonna cover the first five the last one",
    "start": "204040",
    "end": "210040"
  },
  {
    "text": "basically sends that UC log to a file is very very helpful so it doesn't mess up your output right and the output doesn't",
    "start": "210040",
    "end": "215829"
  },
  {
    "text": "mess up the output of the GC lock so please you know use that option so I'm gonna show you what the other five do so",
    "start": "215829",
    "end": "222639"
  },
  {
    "text": "the output from a single GC looks like this and somebody looks at for the first time it is like completely overwhelming",
    "start": "222639",
    "end": "227979"
  },
  {
    "text": "right so I'm gonna kind of go slowly through it and dissect it a little bit so first pretty see details the first",
    "start": "227979",
    "end": "236829"
  },
  {
    "text": "thing that shows you is otherwise a GC the the cause of the GC allocation fail by the way there was no failure right in",
    "start": "236829",
    "end": "242680"
  },
  {
    "text": "the VM and what that means is basically the location could not be satisfied because the young generation was full",
    "start": "242680",
    "end": "248620"
  },
  {
    "text": "and it has to be collected before the allocation can be satisfied right but having failure in the lock just freaks out everybody who you know hasn't",
    "start": "248620",
    "end": "254949"
  },
  {
    "text": "seen this before so you know don't use the word failure in a log when there is really like no drama okay okay so during",
    "start": "254949",
    "end": "262630"
  },
  {
    "text": "the GC the previous details will also show you the different parts of the of the heap that were collected in this",
    "start": "262630",
    "end": "268419"
  },
  {
    "text": "case there was a young collection and the p√§rnu shows and the young collection took just under 38 milliseconds and then",
    "start": "268419",
    "end": "276550"
  },
  {
    "text": "only the young collection happened during this GC so the whole collection was 38 milliseconds the other thing that",
    "start": "276550",
    "end": "282689"
  },
  {
    "text": "produces details shows the shows shows is the GC I'm sorry the CPU times it",
    "start": "282689",
    "end": "288550"
  },
  {
    "text": "shows user system in real time as measured during that you see and it's really helpful for example if suddenly",
    "start": "288550",
    "end": "295539"
  },
  {
    "text": "your GC times go up but the the user time doesn't go up stays roughly the same that means that maybe another",
    "start": "295539",
    "end": "301599"
  },
  {
    "text": "process started running on the same machine pre-empting the you know the JVM right if you suddenly you start seeing",
    "start": "301599",
    "end": "307689"
  },
  {
    "text": "system time going up maybe your the JVM is paging right and these will cause very very long disease so from from",
    "start": "307689",
    "end": "313479"
  },
  {
    "text": "those you can actually get like a better idea what happened whether an external event start reflecting particular disease or is really the heap shape",
    "start": "313479",
    "end": "321879"
  },
  {
    "text": "itself so in orange we have you know the output from premature print GC",
    "start": "321879",
    "end": "328599"
  },
  {
    "text": "timestamps which is in timestamp in seconds from the when the VM started and",
    "start": "328599",
    "end": "334360"
  },
  {
    "text": "this is very helpful because you can tell how far apart the GCS are in blue",
    "start": "334360",
    "end": "341460"
  },
  {
    "text": "who have the output from print heap at GC and this is very very helpful he tells you for every space in the in the",
    "start": "341460",
    "end": "348399"
  },
  {
    "text": "heap if the young generation the spaces within a young generation in the survivor in the old generation the meta",
    "start": "348399",
    "end": "353800"
  },
  {
    "text": "space it tells you what the occupancy was and how big the space was before and after that you see and that's really",
    "start": "353800",
    "end": "359379"
  },
  {
    "text": "helpful cuz you you see what's growing in the GC whether a particular you know whether the old generation is growing",
    "start": "359379",
    "end": "364539"
  },
  {
    "text": "fast or slow or how full the survivors are etc this is very very useful information then in magenta is the",
    "start": "364539",
    "end": "372189"
  },
  {
    "text": "output from print reference GC this tells us how long the GC spend processing references references here",
    "start": "372189",
    "end": "377710"
  },
  {
    "text": "are basically instances of classes that the subclass java.lang ref reference",
    "start": "377710",
    "end": "383080"
  },
  {
    "text": "right like quick references phantom reference etc so again sometimes maybe the application is are using a lot of",
    "start": "383080",
    "end": "389409"
  },
  {
    "text": "finalized errs suddenly your GC times go up maybe they're caused because of their caused by the",
    "start": "389409",
    "end": "395699"
  },
  {
    "text": "the final reference processing which is related to analyzers being being very high finally print tenure distribution",
    "start": "395699",
    "end": "404039"
  },
  {
    "text": "shows you how many of us in green shows you how many bytes per age cohort were",
    "start": "404039",
    "end": "409620"
  },
  {
    "text": "copied within a young generation and by an age cohort is like objects that have",
    "start": "409620",
    "end": "414900"
  },
  {
    "text": "survived a certain number of collections in the young generation so h1 is objects that have survived one young collection to origin ever",
    "start": "414900",
    "end": "421349"
  },
  {
    "text": "survived two young collections etc and this is very helpful cause it tells you the lifetime or expected lifetime of of",
    "start": "421349",
    "end": "428550"
  },
  {
    "text": "your certainly the objects so if that changes maybe something's going on in the application or maybe you know that",
    "start": "428550",
    "end": "434789"
  },
  {
    "text": "that could be reflected on the GC times go up so all this information is really",
    "start": "434789",
    "end": "439919"
  },
  {
    "text": "helpful this is what we enabled at Twitter where we have an elaborate monitoring infrastructure that to my",
    "start": "439919",
    "end": "446699"
  },
  {
    "text": "colleague Megan talked about yesterday but when we need to drill down what's going on for that particular VM we do",
    "start": "446699",
    "end": "452310"
  },
  {
    "text": "let me look at you see lock and all these information is really helpful however it looks like a freaking mess",
    "start": "452310",
    "end": "457319"
  },
  {
    "text": "right and apart from all the nice colors that are used right so at this point I",
    "start": "457319",
    "end": "463710"
  },
  {
    "text": "would you know allow me to give you a quick overview about why the GC logs are terrible right so so where do I start so",
    "start": "463710",
    "end": "469500"
  },
  {
    "text": "first lines are split so this was to be one line but because I enable print",
    "start": "469500",
    "end": "474689"
  },
  {
    "text": "reference GC and pre-tenure distribution the output basically was generated between the first part of the line of",
    "start": "474689",
    "end": "481080"
  },
  {
    "text": "the second this way the line is split and I don't know whether you can see that premiere hope the curtain is not at",
    "start": "481080",
    "end": "486779"
  },
  {
    "text": "the front there is an orphan : either at the bottom left why is it doing there well the output is",
    "start": "486779",
    "end": "493080"
  },
  {
    "text": "supposed to be curly bracket I'm sorry square bracket p√§rnu : and then tell you something about the young generation but",
    "start": "493080",
    "end": "499379"
  },
  {
    "text": "again that split because of the extra lines in between there's a distinct lack of white space especially before before",
    "start": "499379",
    "end": "506039"
  },
  {
    "text": "timestamps there is a lot of finesse oops sorry I've got too excited about",
    "start": "506039",
    "end": "512909"
  },
  {
    "text": "this so there is a lot of unnecessary for what the hell is this these are the address ranges of the different parts of",
    "start": "512909",
    "end": "519690"
  },
  {
    "text": "the heap why is it helpful and why is he filling up my log there is duplicate information so the occupancy before and",
    "start": "519690",
    "end": "527040"
  },
  {
    "text": "after the disease replicate the both a prenup GC and with princessy details right",
    "start": "527040",
    "end": "533340"
  },
  {
    "text": "so all those complains now there are the mild ones now let's go to the uglier ones so this is a full GC so let's kind",
    "start": "533340",
    "end": "542460"
  },
  {
    "text": "of drill down on the important parts well instead of GC that were saying before now he says Fuji C remember then",
    "start": "542460",
    "end": "548910"
  },
  {
    "text": "then it tells us which part of which space in the heap was collected in this case is instead of party you say CMS",
    "start": "548910",
    "end": "554160"
  },
  {
    "text": "right cause CMS is the same as all generation and the old generation was collected now so we have square bracket",
    "start": "554160",
    "end": "559320"
  },
  {
    "text": "CMS : and then it tells you that the OL generation was collected and then it took like 1.4 seconds right now let's",
    "start": "559320",
    "end": "566040"
  },
  {
    "text": "look at this GC which says GC says p√§rnu but it took two seconds why this young",
    "start": "566040",
    "end": "572820"
  },
  {
    "text": "GC was so slow well actually what's up fools you see in these guys so we see a",
    "start": "572820",
    "end": "578340"
  },
  {
    "text": "mess even if it doesn't say Fuji see the log there might have been a full GC and the way you you have to recognize it of",
    "start": "578340",
    "end": "584310"
  },
  {
    "text": "course is by looking for the string square bracket CMS :",
    "start": "584310",
    "end": "589440"
  },
  {
    "text": "because that tells you that part to taiga you know that collection the old generation was collected but actually",
    "start": "589440",
    "end": "594450"
  },
  {
    "text": "like because the string square bracket team as : doesn't appear because again is split by some extra output in the log",
    "start": "594450",
    "end": "600450"
  },
  {
    "text": "so it's a complete mess right it gets even worse believe it or not this is a",
    "start": "600450",
    "end": "606390"
  },
  {
    "text": "similar GC to the one I showed you previously but if it's not obvious now the line is actually split because some",
    "start": "606390",
    "end": "613650"
  },
  {
    "text": "other output from a different thread so in this case the concurrent marking thread is generating some GC logging",
    "start": "613650",
    "end": "619800"
  },
  {
    "text": "output and was emitted half way through the output of the of the out of the",
    "start": "619800",
    "end": "626580"
  },
  {
    "text": "other GC so now you have randomly inter lead output from like two different",
    "start": "626580",
    "end": "631590"
  },
  {
    "text": "threads and this is a mild case that you can maybe be able to parse but some cases so like messed up that is just",
    "start": "631590",
    "end": "637590"
  },
  {
    "text": "impossible to to actually make any heads or tail of it so why do you log suck",
    "start": "637590",
    "end": "643590"
  },
  {
    "text": "I've been dealing with this for years so formatting is inconsistent I didn't",
    "start": "643590",
    "end": "648930"
  },
  {
    "text": "touch on this but different formatting for is GC so you you know not only you have to write the code to parse one you",
    "start": "648930",
    "end": "655020"
  },
  {
    "text": "know the like let's say the same as though you have to write the code again like two other times the parts you know if you want paroled and",
    "start": "655020",
    "end": "661220"
  },
  {
    "text": "there is missing information output is split and also concurrent output causes",
    "start": "661220",
    "end": "667320"
  },
  {
    "text": "like random interleaving and because of the stew basically they cannot be parsed reliably I mean everybody has some sort",
    "start": "667320",
    "end": "673050"
  },
  {
    "text": "of usually Python script that can parse them and it doesn't work all the time or it misses information it's terrible I",
    "start": "673050",
    "end": "678120"
  },
  {
    "text": "mean it's 2016 I mean come on really okay so thank you very much for listening so but still going back to",
    "start": "678120",
    "end": "685950"
  },
  {
    "text": "this still this is really really really interesting information in the log that we learn a lot from it so let's see how",
    "start": "685950",
    "end": "692880"
  },
  {
    "text": "we'll be able to get the same information in JDK 9 with a new JVM unified logging so the first thing to",
    "start": "692880",
    "end": "703860"
  },
  {
    "text": "point out is that all those parameters that I mentioned they are gone in JDK 9 right they're not like deprecated",
    "start": "703860",
    "end": "709170"
  },
  {
    "text": "they're just gone so let's all take a moment to commemorate their demise and ya know it's supposed to be a joke yes I",
    "start": "709170",
    "end": "716580"
  },
  {
    "text": "know it's blank and and thank them for the service ok you spoiled it now our new favorite",
    "start": "716580",
    "end": "724980"
  },
  {
    "text": "argument in JDK 9 ok take no don't do that joke again so our new argument",
    "start": "724980",
    "end": "732420"
  },
  {
    "text": "favorite argument JK 9 is it's gonna be X log ok and there is only one",
    "start": "732420",
    "end": "738020"
  },
  {
    "text": "command-line argument X log and then you pass lots of options that you control you control the log in different ways so I'm just gonna kind of build up on that",
    "start": "738020",
    "end": "744600"
  },
  {
    "text": "over the next few slides so the simplest version is basically X log colon and a tag in this case GC lock : GC it will",
    "start": "744600",
    "end": "752610"
  },
  {
    "text": "enable log records that are tagged with attack GC ok and there are many tax or a",
    "start": "752610",
    "end": "757860"
  },
  {
    "text": "time kind of corresponds to maybe like a JVM module like GC will have class loading unloading with class exceptions",
    "start": "757860",
    "end": "764700"
  },
  {
    "text": "or s etc but I'm concentrate on GC because you know hey I'm a GC died right and I'll be talking about DC locks I",
    "start": "764700",
    "end": "769980"
  },
  {
    "text": "hope it's ok you can also give a logging level for for a particular tag so you",
    "start": "769980",
    "end": "775860"
  },
  {
    "text": "say Tod equals and the level so in this case x log G C equals debug so we'll enable debug level or logging level for",
    "start": "775860",
    "end": "784380"
  },
  {
    "text": "the GC tag and the levels are apparently what most people expect you know error warning in for the back-trace if you",
    "start": "784380",
    "end": "790829"
  },
  {
    "text": "don't give a level it defaults to info all right so let's look at the output from from a VM that I",
    "start": "790829",
    "end": "798149"
  },
  {
    "text": "enabled X log GC which is equivalent to GC go simple right so this is a log",
    "start": "798149",
    "end": "804779"
  },
  {
    "text": "record it looks very familiar right compared to what we seen earlier and the",
    "start": "804779",
    "end": "810149"
  },
  {
    "text": "second part kind of looks like verbose GC the output I sold earlier is very very similar but the first part there is",
    "start": "810149",
    "end": "816029"
  },
  {
    "text": "some new parts in the first part the the first thing to point out is like the first part of iya of the record this is",
    "start": "816029",
    "end": "822509"
  },
  {
    "text": "a timestamp again is in seconds since the start of the VM right very similar to what we saw before something",
    "start": "822509",
    "end": "827519"
  },
  {
    "text": "is going to catch a lot of people though is that this timestamp correspond to the time the log record was generated not",
    "start": "827519",
    "end": "833069"
  },
  {
    "text": "the start of the GC so you want to find the start of the GC you have to subtract it by just from this you have to",
    "start": "833069",
    "end": "840480"
  },
  {
    "text": "subtract the time of the GC from that timestamp okay and it's different compared to like verbose GC so keep that",
    "start": "840480",
    "end": "845699"
  },
  {
    "text": "in mind the other part of the output that contains the level in this case",
    "start": "845699",
    "end": "851610"
  },
  {
    "text": "info right and at the tab that generated a la grecque record in this case GC finally for and remember that the the",
    "start": "851610",
    "end": "859709"
  },
  {
    "text": "logging framework is normally for GC but on all the GC records have a GC ID so",
    "start": "859709",
    "end": "865559"
  },
  {
    "text": "this says that this GC was the 634 GC in the you know in the log and this is really helpful because you can have",
    "start": "865559",
    "end": "871410"
  },
  {
    "text": "several log records that basically belong to the same GC and that's a very easy way to combine them you don't have",
    "start": "871410",
    "end": "876959"
  },
  {
    "text": "to deal with like nesting and and all that nonsense so this is actually way nicer so the tags are hierarchical so we",
    "start": "876959",
    "end": "885480"
  },
  {
    "text": "saw GC you can actually add several tags you know that makes sense and separate",
    "start": "885480",
    "end": "890910"
  },
  {
    "text": "it with classes so here we have X log GC plus heap and I will enable heap output",
    "start": "890910",
    "end": "897139"
  },
  {
    "text": "GC heap output okay and and then if you want to enable all kind of sub tags if",
    "start": "897139",
    "end": "903269"
  },
  {
    "text": "you want of a particular tag view you can use star so G C star will enable all the GC plus bla tags so it's kind of",
    "start": "903269",
    "end": "909569"
  },
  {
    "text": "convenient and that you know not all paths combinations make sense so I have",
    "start": "909569",
    "end": "914639"
  },
  {
    "text": "some examples here keeper F and CPU make sense for GC as we see a little later",
    "start": "914639",
    "end": "919769"
  },
  {
    "text": "but load and unload make sense for class for you know for class records like close to claim you know enables class",
    "start": "919769",
    "end": "925769"
  },
  {
    "text": "loading and class unloading log records so apart from you know",
    "start": "925769",
    "end": "932110"
  },
  {
    "text": "deciding which tags you're gonna enable and at which level you can also decide where to send the output so after the",
    "start": "932110",
    "end": "938680"
  },
  {
    "text": "tag and level output level options you can add the output option which is : and",
    "start": "938680",
    "end": "945520"
  },
  {
    "text": "inside our spanner output stander error or file it goes in a file name and you can omit the file equals if you want to",
    "start": "945520",
    "end": "951660"
  },
  {
    "text": "the default is standard output as you'd expect and the file name can actually",
    "start": "951660",
    "end": "958270"
  },
  {
    "text": "include some special strings like like in it is the case for JDK 8 like percent P which will be replaced by the pit of",
    "start": "958270",
    "end": "964990"
  },
  {
    "text": "the process percent T which will be replaced by the time the JVM started etc these are really helpful if you storing",
    "start": "964990",
    "end": "971170"
  },
  {
    "text": "lots of logs on the same directory they don't keep overwriting each other that you can kind of separate them you can",
    "start": "971170",
    "end": "978100"
  },
  {
    "text": "also control what decorators to enable so after the output the output option you say again : and then a series of",
    "start": "978100",
    "end": "984040"
  },
  {
    "text": "decorators separate by comma and different will enable you know different decorators will show different things",
    "start": "984040",
    "end": "989860"
  },
  {
    "text": "like time you will show you am kind of a timestamp kind of that shows date and",
    "start": "989860",
    "end": "995680"
  },
  {
    "text": "hour and time and all that stuff is similar to preen GC date stamps that in JDK 8 uptime is what we saw earlier you",
    "start": "995680",
    "end": "1001740"
  },
  {
    "text": "can you can add the the P double process as decorator etc the default is uptime",
    "start": "1001740",
    "end": "1006810"
  },
  {
    "text": "level in tags so let's look at a example output this is GC and then we enabled",
    "start": "1006810",
    "end": "1014670"
  },
  {
    "text": "with the decorators time and paid so instead of what we're seeing before now you see that time generates this very",
    "start": "1014670",
    "end": "1021260"
  },
  {
    "text": "elaborate date stamp right and then the second column is the page why is this",
    "start": "1021260",
    "end": "1026730"
  },
  {
    "text": "helpful maybe you end up sending the output from different VMs to the same place so again so you can reliably",
    "start": "1026730",
    "end": "1032000"
  },
  {
    "text": "separate it something to point out though notice that the two columns in the in the option so it's log GC colon",
    "start": "1032000",
    "end": "1039510"
  },
  {
    "text": "colon time comma page why is that because the the syntax is that it's you",
    "start": "1039510",
    "end": "1045209"
  },
  {
    "text": "pass the tag information and then you pass the output information call on the output and then call on the decorators",
    "start": "1045210",
    "end": "1051240"
  },
  {
    "text": "so if I had only : time coma page I had only one colon that would be interpreted as a file name so it will actually",
    "start": "1051240",
    "end": "1058530"
  },
  {
    "text": "create a file name called time to come up and we send a log to the that file right I really hate this a find is really",
    "start": "1058530",
    "end": "1064190"
  },
  {
    "text": "frustrating but that's okay so I've showed you enough on how to enable",
    "start": "1064190",
    "end": "1070039"
  },
  {
    "text": "different things within the new in the new logging framework so how can we get",
    "start": "1070039",
    "end": "1075860"
  },
  {
    "text": "output similar to what I show you earlier in JDK 9 so this is the incantation this is one line so",
    "start": "1075860",
    "end": "1081740"
  },
  {
    "text": "something I didn't mention earlier is that you can enable different times at different levels and you separate them",
    "start": "1081740",
    "end": "1086929"
  },
  {
    "text": "by comma right so we have now GC star so all the tags of the GC tags at info",
    "start": "1086929",
    "end": "1092990"
  },
  {
    "text": "level because that's the default coma gc+ ref at the bug level and then GC age at race level then we send the file to a",
    "start": "1092990",
    "end": "1100429"
  },
  {
    "text": "particularly they should send a look to a particular file name and we only enable the decorators types a nap time I",
    "start": "1100429",
    "end": "1106549"
  },
  {
    "text": "don't think the levels actually you know the showing what the level that generator lock record in me I don't think is very helpful they log it just",
    "start": "1106549",
    "end": "1112370"
  },
  {
    "text": "makes the log larger and these are a kind of an one-to-one correspondence these are roughly equivalent to the",
    "start": "1112370",
    "end": "1118370"
  },
  {
    "text": "parameters or so you are here roughy so let's look at what the lock looks like like now so this from from one GC with",
    "start": "1118370",
    "end": "1125840"
  },
  {
    "text": "with those arguments so we have a log",
    "start": "1125840",
    "end": "1131030"
  },
  {
    "text": "record of the start that says that's the start of the GC a log record at the end that says the end of the GC and how long it took we have the CPU times that I saw",
    "start": "1131030",
    "end": "1139549"
  },
  {
    "text": "earlier is very similar to what we're seeing with previously details then again with the GC start at times we also",
    "start": "1139549",
    "end": "1147080"
  },
  {
    "text": "get some heap information in blue again the nice column showing correspond to",
    "start": "1147080",
    "end": "1152780"
  },
  {
    "text": "the colors are sold earlier right and the width showing the using the app time",
    "start": "1152780",
    "end": "1159020"
  },
  {
    "text": "decorator you now get those timestamps and if you get the timestamp that was generated at the start of the GC that's",
    "start": "1159020",
    "end": "1164929"
  },
  {
    "text": "the actual time some without the other you want don't do it the time some at the end of the GC cause remember that's that's not the start of the GC is like",
    "start": "1164929",
    "end": "1171440"
  },
  {
    "text": "when the log record was generated as I said earlier with GC ref a debug level",
    "start": "1171440",
    "end": "1177260"
  },
  {
    "text": "we enable the referencing processing information again in magenta and finally",
    "start": "1177260",
    "end": "1182570"
  },
  {
    "text": "in green is the a tenure distribution and as enabled with GC age at the trace level okay so this is very similar very",
    "start": "1182570",
    "end": "1189980"
  },
  {
    "text": "similar information to what I saw earlier and it's actually all more precise which is really nice so your local OTT however there's",
    "start": "1189980",
    "end": "1198600"
  },
  {
    "text": "something missing and is that the much more detail about the heap shape so here you have like a genuine information",
    "start": "1198600",
    "end": "1204210"
  },
  {
    "text": "about this was the occupancy of the young generation before and after but I really want to know how the survivors were helpful the Eden's was etcetera",
    "start": "1204210",
    "end": "1211170"
  },
  {
    "text": "that's really really helpful information when we track things issues down can you do that it not yes you can yes we can",
    "start": "1211170",
    "end": "1218190"
  },
  {
    "text": "that's a kind of appropriate for an election day man everybody's asleep today okay so and you just enable the GC",
    "start": "1218190",
    "end": "1226920"
  },
  {
    "text": "heap tag at the bug level that's basically exactly the same marker that pre as with premium GC that I saw you",
    "start": "1226920",
    "end": "1232890"
  },
  {
    "text": "earlier in fact this is it with all the extra useless information we don't need but you have the exact the exact heap",
    "start": "1232890",
    "end": "1240240"
  },
  {
    "text": "information that is really helpful okay this will triple your log size I think but it's it's really helpful so if you",
    "start": "1240240",
    "end": "1246870"
  },
  {
    "text": "can handle the extra size is really worth it okay just a couple of quick",
    "start": "1246870",
    "end": "1252030"
  },
  {
    "text": "things you can enable log rotation this is done with extra parameters in JDK 8 here you just add yet another set",
    "start": "1252030",
    "end": "1260040"
  },
  {
    "text": "of options to the X log command-line arguments so file count for file size 16 Meg's so the log will rotate up to on up",
    "start": "1260040",
    "end": "1268710"
  },
  {
    "text": "to four files and each file is going to be up to 16 Meg's and the cool thing is that you can actually enable different",
    "start": "1268710",
    "end": "1274830"
  },
  {
    "text": "logs so let's say we want to enable some basic logging like GC the the GC tag at",
    "start": "1274830",
    "end": "1282720"
  },
  {
    "text": "the very basic level it's tender standard output so we're looking at the console to see what's going on right but then we want to enable more logging that",
    "start": "1282720",
    "end": "1289800"
  },
  {
    "text": "goes to a file you can get a past different parameters in this case we'll just send much more information to the",
    "start": "1289800",
    "end": "1295110"
  },
  {
    "text": "to the log file so that's that's really cool that's something you can do right now and that's actually something very very cool and mainly concentrated on GC",
    "start": "1295110",
    "end": "1302670"
  },
  {
    "text": "tags but of course other useful things that you can other usable tags that you can enable class loading and loading is",
    "start": "1302670",
    "end": "1308220"
  },
  {
    "text": "an obvious one just to see where classes are being you know they're coming from exception so you can actually get local",
    "start": "1308220",
    "end": "1314520"
  },
  {
    "text": "record for every time an exception it's known even if it's caught of course so if suddenly you think that your application is throw lots of exceptions",
    "start": "1314520",
    "end": "1320610"
  },
  {
    "text": "that there is some performance issue you can track it with that etc",
    "start": "1320610",
    "end": "1325280"
  },
  {
    "text": "so in summary this is a huge improvement right we have more control over the",
    "start": "1326160",
    "end": "1332380"
  },
  {
    "text": "output you can enable multiple logs there is no interleaving a split lines anymore every log records guarantee to",
    "start": "1332380",
    "end": "1338410"
  },
  {
    "text": "be on one line there's no you know screwing around by different threads etc and it can be much more reliably parsed",
    "start": "1338410",
    "end": "1344500"
  },
  {
    "text": "so I'm definitely looking forward to have know how to deal with the current GC logs and kind of dealing with this",
    "start": "1344500",
    "end": "1350020"
  },
  {
    "text": "which is gonna be great so hopefully you're gonna find that helpful as well okay alright so moving on to the next",
    "start": "1350020",
    "end": "1355540"
  },
  {
    "text": "topic which i think is kind of cool I don't know whether is anybody's been keeping up with what is so it's compact",
    "start": "1355540",
    "end": "1361360"
  },
  {
    "text": "strings so I'll give a little bit of um kind of how the string class evolved in",
    "start": "1361360",
    "end": "1367960"
  },
  {
    "text": "Java starting with like the beginning of time I the first Java release up to JDK",
    "start": "1367960",
    "end": "1372970"
  },
  {
    "text": "up to Java six so until Java six string class had four fields it had the value",
    "start": "1372970",
    "end": "1381070"
  },
  {
    "text": "field which was a character array that was pointing to the the array that contained the payload or the string it",
    "start": "1381070",
    "end": "1386710"
  },
  {
    "text": "had an offset an account which was which defines basically the subset of the",
    "start": "1386710",
    "end": "1392110"
  },
  {
    "text": "array that actually contains the payload that B string corresponds to right so if",
    "start": "1392110",
    "end": "1397780"
  },
  {
    "text": "you want to do substring you just you didn't have to replicate the character you just create another string with different offset and can't get that",
    "start": "1397780",
    "end": "1404110"
  },
  {
    "text": "different if you essentially on the same character array and finally a hash field so if you want to hash the string you",
    "start": "1404110",
    "end": "1411370"
  },
  {
    "text": "only calculate the hash ones because sometimes could be time-consuming and then you store it and then you keep reusing it okay so from JDK 7 the",
    "start": "1411370",
    "end": "1419020"
  },
  {
    "text": "removed actually the offset an account field so now you only have the hash and then the value field which points to the",
    "start": "1419020",
    "end": "1426040"
  },
  {
    "text": "character array so now the character array basically always contains the ID you know all the characters that belong",
    "start": "1426040",
    "end": "1433000"
  },
  {
    "text": "you know that you know that the string represents and if you substring then you know you you might get like a new",
    "start": "1433000",
    "end": "1438820"
  },
  {
    "text": "character array there is a huge amount of trade performance trade-offs and other than footprint arrows between the",
    "start": "1438820",
    "end": "1444100"
  },
  {
    "text": "two different schemes so and I won't go into them right now you can ask me later but this seems to work pretty well in",
    "start": "1444100",
    "end": "1449950"
  },
  {
    "text": "most cases ok so now let's see how big in in bytes are string of a given length",
    "start": "1449950",
    "end": "1455830"
  },
  {
    "text": "is so at least in hotspot so we have 24 bytes for the string",
    "start": "1455830",
    "end": "1461440"
  },
  {
    "text": "object so it's the header of the string instance plus the payload then 16 bytes for the array header and then 2 times",
    "start": "1461440",
    "end": "1469600"
  },
  {
    "text": "the length of the string because characters in Java are unicode right so there are two bytes each so let's put",
    "start": "1469600",
    "end": "1476380"
  },
  {
    "text": "let's just pick an example at random so let's say we want to calculate the size of a 140 character string so it's",
    "start": "1476380",
    "end": "1483640"
  },
  {
    "text": "basically 320 the only ways got the joke everybody's like looking really serious",
    "start": "1483640",
    "end": "1490409"
  },
  {
    "text": "okay so how can we improve on this further so the observation is that if if",
    "start": "1490500",
    "end": "1497530"
  },
  {
    "text": "for example strings are tweets and I tweet in English right and you generally using only the Latin character set and",
    "start": "1497530",
    "end": "1503260"
  },
  {
    "text": "you don't use unicode half of your your character is basically going to be zeros",
    "start": "1503260",
    "end": "1508420"
  },
  {
    "text": "because the look the cards can actually be encoded in one bite and then the rest is not really not gonna be used if again",
    "start": "1508420",
    "end": "1514000"
  },
  {
    "text": "if you don't take advantage of the full Unicode so it would be really nice to be able to in if that's the case would be",
    "start": "1514000",
    "end": "1519460"
  },
  {
    "text": "really nice to be able to represent the do to have a different representation",
    "start": "1519460",
    "end": "1525429"
  },
  {
    "text": "for for the you know the character array that is more compact okay and this is exactly what the string class in JDK 9",
    "start": "1525429",
    "end": "1532179"
  },
  {
    "text": "does so notice that we still have the value field but now it's a byte array is",
    "start": "1532179",
    "end": "1537370"
  },
  {
    "text": "not a character array okay and we'll have a new field which is called the coder the coder is either Latin or",
    "start": "1537370",
    "end": "1544690"
  },
  {
    "text": "Unicode and I believe 0 & 1 there are two they are the actual values and the coder tells you how the string is",
    "start": "1544690",
    "end": "1550990"
  },
  {
    "text": "encoded so if it's Latin then the the byte array has one byte per character",
    "start": "1550990",
    "end": "1556510"
  },
  {
    "text": "and if it's unicode the color the byte array has two bytes per character okay and let's do the calculation again to",
    "start": "1556510",
    "end": "1565630"
  },
  {
    "text": "see how much space this takes up now again the calculation is that okay so we",
    "start": "1565630",
    "end": "1571929"
  },
  {
    "text": "have 24 bytes for the string up from the string object science you should be gone",
    "start": "1571929",
    "end": "1577990"
  },
  {
    "text": "you add in a new field how can he still be 24 bytes what's 24 bytes before when you didn't have the color field so it",
    "start": "1577990",
    "end": "1583750"
  },
  {
    "text": "turns out that the VM Alliance objects to eight bytes and the world had four bytes to spare from before so that was lucky so you add a field in the object size",
    "start": "1583750",
    "end": "1590470"
  },
  {
    "text": "doesn't doesn't increase that's very nice and yeah if you use only the Latin",
    "start": "1590470",
    "end": "1596800"
  },
  {
    "text": "character set you don't have to you know multiply by two and now the string size",
    "start": "1596800",
    "end": "1602050"
  },
  {
    "text": "of a string with 140 characters it goes from 320 to 180 which is a huge",
    "start": "1602050",
    "end": "1607150"
  },
  {
    "text": "improvement so some numbers published from bat by Oracle so there for typical",
    "start": "1607150",
    "end": "1613809"
  },
  {
    "text": "applications in double quotes whatever that means that mostly used Latin character said and don't use Unicode",
    "start": "1613809",
    "end": "1618910"
  },
  {
    "text": "heavily they observe a 5 to 15% memory fruit production which is very nice your mileage might vary depending on how",
    "start": "1618910",
    "end": "1625390"
  },
  {
    "text": "heavily you use strings and also observed 32.7% throughput improvement and this is because of two reasons first",
    "start": "1625390",
    "end": "1632800"
  },
  {
    "text": "the GCS are faster and less frequent there are less frequent because now the strings are smaller so it takes more it",
    "start": "1632800",
    "end": "1638890"
  },
  {
    "text": "takes longer to fill up the yang generate and there are faster because the copy less because now you don't have to copy what's you know 16 bytes per",
    "start": "1638890",
    "end": "1645250"
  },
  {
    "text": "character and also the main reason why the put the throughput improvement I",
    "start": "1645250",
    "end": "1650710"
  },
  {
    "text": "believe is because of better cache utilization now you can fit much more into cache line you know much more characters into a cache line than before",
    "start": "1650710",
    "end": "1657190"
  },
  {
    "text": "so you decrease the number of cache misses um folks might remember that in",
    "start": "1657190",
    "end": "1667170"
  },
  {
    "text": "anybody remembers this in JDK 6 updates there was an option use compressed strings that did something very similar",
    "start": "1667170",
    "end": "1672970"
  },
  {
    "text": "ok anybody remembers it yeah a few people ok no yes yes you I so this is",
    "start": "1672970",
    "end": "1680800"
  },
  {
    "text": "similar but it's done kind of properly in double ports so the complexity tracks on a much bigger project so it is on by",
    "start": "1680800",
    "end": "1687340"
  },
  {
    "text": "default because the the doesn't seem to be a huge or actually there's very little overhead even if you use a lot of",
    "start": "1687340",
    "end": "1694150"
  },
  {
    "text": "unique codes you just don't take don't you know you don't have the footprint reduction but there's no much overhead",
    "start": "1694150",
    "end": "1699429"
  },
  {
    "text": "with that it is more complete and it's done in a way that they changed a lot of",
    "start": "1699429",
    "end": "1704800"
  },
  {
    "text": "other classes that kind of relied on the fact of the the chain a lot of hard",
    "start": "1704800",
    "end": "1710440"
  },
  {
    "text": "relies stringbuilder that knows upon the encoding so it can actually pass the right thing rather than having to kind of encoding decode byte arrays to",
    "start": "1710440",
    "end": "1716920"
  },
  {
    "text": "character in backwards use compress strings it was much more limited it only changed the string class and in order",
    "start": "1716920",
    "end": "1722620"
  },
  {
    "text": "for everybody to be there anybody else to interface with a string class the in the the the battery had to basically",
    "start": "1722620",
    "end": "1728290"
  },
  {
    "text": "be translated to the character array so it's a much better much better approach",
    "start": "1728290",
    "end": "1733690"
  },
  {
    "text": "it has better performance improvements and it's much more maintainable I think I believe one of the reasons that",
    "start": "1733690",
    "end": "1738850"
  },
  {
    "text": "dropped it from seven the drop the use compressed rings option from seven it was likely it was kind of hard to maintain okay so this is a very nice",
    "start": "1738850",
    "end": "1746040"
  },
  {
    "text": "improvement in Java nine again you kind of get it for free by just using strings the string API doesn't change it's",
    "start": "1746040",
    "end": "1751780"
  },
  {
    "text": "basically all the changes are kind of under the covers so the third topic I will talk about which I person thing is really cool they",
    "start": "1751780",
    "end": "1760330"
  },
  {
    "text": "new is the new stock walking API so first why do you want to walk the stock from from Java so there are a few",
    "start": "1760330",
    "end": "1767440"
  },
  {
    "text": "reasons why you want to do that the most obvious one is logging so you have some rare and maybe expensive event that",
    "start": "1767440",
    "end": "1774400"
  },
  {
    "text": "happens maybe you want to take a stack trace and when you log it along with the event to maybe get to work out what you",
    "start": "1774400",
    "end": "1780160"
  },
  {
    "text": "know what caused it what was going on etc other reasons includes well you have a library you want to know who's calling",
    "start": "1780160",
    "end": "1786160"
  },
  {
    "text": "to the library you have to walk the stack ignore all the other frames that belong to methods in your library and",
    "start": "1786160",
    "end": "1791980"
  },
  {
    "text": "just reach the the one outside your library and that's your caller another reason is to find out the first",
    "start": "1791980",
    "end": "1798640"
  },
  {
    "text": "privilege frame so you will need to do some access control on a particular operation you go down the stack find the",
    "start": "1798640",
    "end": "1805690"
  },
  {
    "text": "first previous frame and know what kind of privileges he has in order to know whether we can do that operation or not so in JDK 8 and earlier the only way to",
    "start": "1805690",
    "end": "1814450"
  },
  {
    "text": "get a stock stack trace was to call the get stack trace method on thread so that",
    "start": "1814450",
    "end": "1820270"
  },
  {
    "text": "returns big array of stack trace elements one stack trace element per stack frame in the stack and and you",
    "start": "1820270",
    "end": "1830020"
  },
  {
    "text": "know depending on how big big you know how deep your stock is then that array could be quite large and then you can",
    "start": "1830020",
    "end": "1836050"
  },
  {
    "text": "just use it in this case I just iterate over the elements I just bring the method name of each of its stack frame",
    "start": "1836050",
    "end": "1841510"
  },
  {
    "text": "from corresponds to a stack frame so the disadvantage of this is that is the cost is proportional to the stack there so",
    "start": "1841510",
    "end": "1847690"
  },
  {
    "text": "the deeper your stack so let's say you are done or 600-700 methods deep then it could take a you know a reasonable",
    "start": "1847690",
    "end": "1853510"
  },
  {
    "text": "amount of time to actually construct all those stack trace elements and add them to to the",
    "start": "1853510",
    "end": "1858970"
  },
  {
    "text": "and also the food broom is also proportional as well and as I was showing earlier during the examples you",
    "start": "1858970",
    "end": "1864430"
  },
  {
    "text": "don't always need to in the info know stack frames you might need the if one on the top five or the top ten or something and it's kind of a waste to",
    "start": "1864430",
    "end": "1870730"
  },
  {
    "text": "get all this information just throw it away so adjudicate now the new stock walking API improves all this by quite a lot but",
    "start": "1870730",
    "end": "1878110"
  },
  {
    "text": "I would take a couple of minutes first to describe why doing our do we start",
    "start": "1878110",
    "end": "1884410"
  },
  {
    "text": "walking in a more flexible way it's actually a very tricky thing to do I don't know if it's obvious or not it was",
    "start": "1884410",
    "end": "1890440"
  },
  {
    "text": "not obvious to me initially so this is you know Java running Java thread there",
    "start": "1890440",
    "end": "1895750"
  },
  {
    "text": "are some stack frames on the stack the stack grows up the way the agenda boxes corresponding each corresponds to one",
    "start": "1895750",
    "end": "1900940"
  },
  {
    "text": "stack frame right and that's at this point the Java the thread says I want to walk the stack right and of course you",
    "start": "1900940",
    "end": "1908770"
  },
  {
    "text": "know you call some method which of course has to push like another stack frame on on this on the stack right and let's say we want to do the iteration",
    "start": "1908770",
    "end": "1914620"
  },
  {
    "text": "with say a stream okay so we create you know it creates a stream object that Horan's blob is is supposed to be a",
    "start": "1914620",
    "end": "1921310"
  },
  {
    "text": "string object in the heap right that's pointed to by the the top stack frame right and the stream object knows how to",
    "start": "1921310",
    "end": "1926980"
  },
  {
    "text": "go to the first stack frame that is below the one that created it right in",
    "start": "1926980",
    "end": "1932980"
  },
  {
    "text": "it has it has it address say that it can go and look at the information and then from there it can go to the previous on etc right straightforward now if we're",
    "start": "1932980",
    "end": "1941230"
  },
  {
    "text": "not careful remember this is just the last moment is just an object in Java so we were no careful what we can do is",
    "start": "1941230",
    "end": "1946570"
  },
  {
    "text": "you can read returned by from a few methods right we now go down the stack and pass the stream object or actually",
    "start": "1946570",
    "end": "1953590"
  },
  {
    "text": "down the stack in this case right and then we can just call some new methods",
    "start": "1953590",
    "end": "1958930"
  },
  {
    "text": "now and then pass that stream object as an argument and now the top level frame",
    "start": "1958930",
    "end": "1965200"
  },
  {
    "text": "has a pointer to the stream object and if we try to do an iteration we're gonna crash and burn because the stack just",
    "start": "1965200",
    "end": "1970270"
  },
  {
    "text": "changed under our feet right the by virtue of just returning from a master",
    "start": "1970270",
    "end": "1976630"
  },
  {
    "text": "calling new methods you just basically messed up the stack so and there is no reasonable way address reasonable",
    "start": "1976630",
    "end": "1981730"
  },
  {
    "text": "performance you know trade-off to actually keep up keep the what's in the stream and what's happening to the start",
    "start": "1981730",
    "end": "1988180"
  },
  {
    "text": "to keep them in saying it's just it's way too expensive it would be impossible so the way to fix this is we have to",
    "start": "1988180",
    "end": "1995310"
  },
  {
    "text": "ensure that when you try to do when you're doing the iteration you should never basically go below that top frame",
    "start": "1995310",
    "end": "2000320"
  },
  {
    "text": "so all the stack frames that the stream nose had to iterate over the remain basically intact so it can iterate over",
    "start": "2000320",
    "end": "2007730"
  },
  {
    "text": "them safely and this is exactly what the new stock working API does so there's a",
    "start": "2007730",
    "end": "2013070"
  },
  {
    "text": "new class that working java.lang and instead of just retaining a stream which is the obvious thing to do right and explain but just explain is very unsafe",
    "start": "2013070",
    "end": "2019520"
  },
  {
    "text": "thing to do now it has a walk function a walk method that takes a function that",
    "start": "2019520",
    "end": "2025130"
  },
  {
    "text": "takes a stream of stack frames I would tell tell you a little bit later what the stack frame is and returns a result",
    "start": "2025130",
    "end": "2030560"
  },
  {
    "text": "and that result is returned further by the work function so you're into lambda heaven here when you start doing the",
    "start": "2030560",
    "end": "2036890"
  },
  {
    "text": "stock walking so here's an example was similar to what I showed earlier you just we call walk and you take the",
    "start": "2036890",
    "end": "2043670"
  },
  {
    "text": "stream and then you map the frame to the method name and then you just print the method names right this is similar",
    "start": "2043670",
    "end": "2048770"
  },
  {
    "text": "example to what I showed earlier so why is this safe there are a couple of reasons why actually the main reason is",
    "start": "2048770",
    "end": "2056179"
  },
  {
    "text": "that the stream cannot be used outside the walk method it is possible if you're",
    "start": "2056179",
    "end": "2061310"
  },
  {
    "text": "like really naughty you pass a lambda that stores the stream to a static field or creates a new thread and passes it to",
    "start": "2061310",
    "end": "2067790"
  },
  {
    "text": "the other thread so you can actually even run the new thread can run concurrently with the walk method right after that riedel is just to see what's",
    "start": "2067790",
    "end": "2073490"
  },
  {
    "text": "going to happen and it turns out the stream cannot be used outside walk for a couple of reasons first it is closed before walk returns",
    "start": "2073490",
    "end": "2080629"
  },
  {
    "text": "so if the same thread tries to access the stream we'll get an exception and also it cannot be accessed by any other",
    "start": "2080630",
    "end": "2086629"
  },
  {
    "text": "thread so when the stream is created it has the pointer to the thread that created also if another thread tries to access it we just get an exception as",
    "start": "2086630",
    "end": "2092960"
  },
  {
    "text": "well so the stream is only really usable within the walk method and this is what makes this iteration safe so about just",
    "start": "2092960",
    "end": "2101000"
  },
  {
    "text": "a few examples and as I said this is just more like an exercise on how to do something in with lambdas so so here we",
    "start": "2101000",
    "end": "2107870"
  },
  {
    "text": "want to get like a series of interesting frames but ever an interesting with double quotes right whatever an interesting frame is so it's very",
    "start": "2107870",
    "end": "2114920"
  },
  {
    "text": "straightforward we take the stream we like filter it based on a method call it's interesting and then we collect into a list this will go through the",
    "start": "2114920",
    "end": "2122150"
  },
  {
    "text": "entire stack but we'll only create a list of the the frames are interesting if we wanted",
    "start": "2122150",
    "end": "2129329"
  },
  {
    "text": "to limit it it's easy you just add limit 32 and this would only look look up to",
    "start": "2129329",
    "end": "2134430"
  },
  {
    "text": "32 frames and it would not go further so this is a very nice way to kind of bound the cost of this operation both in terms",
    "start": "2134430",
    "end": "2140700"
  },
  {
    "text": "of memory footprint and also in terms of time you know how long it will take to finish and if you want to pick a",
    "start": "2140700",
    "end": "2147539"
  },
  {
    "text": "particular frame again you can filter it based on something and then return fine first and then you get the result or not",
    "start": "2147539",
    "end": "2153509"
  },
  {
    "text": "because it returns an option because there might not be a result right so the",
    "start": "2153509",
    "end": "2158759"
  },
  {
    "text": "stack frame interface I showed you earlier is some inner interface of stack",
    "start": "2158759",
    "end": "2164099"
  },
  {
    "text": "worker and with extra policies for the slightly dodgy syntax there so it's an intern interface of the stock walker",
    "start": "2164099",
    "end": "2170460"
  },
  {
    "text": "class it has methods similar to what the stack trace element class has so you can",
    "start": "2170460",
    "end": "2175470"
  },
  {
    "text": "get the class name you can get the method name blah blah blah but on top of this you can get the declaring class the",
    "start": "2175470",
    "end": "2183599"
  },
  {
    "text": "class whose method that the method that off of the frame belongs to and this",
    "start": "2183599",
    "end": "2189450"
  },
  {
    "text": "interesting course if you'd only have the class name you cannot always get the class right why because the class loaders you can have the same class with",
    "start": "2189450",
    "end": "2195329"
  },
  {
    "text": "the same name loaded multiple times by different loaders so you don't know which one it is but with this you can",
    "start": "2195329",
    "end": "2200700"
  },
  {
    "text": "and there is also a convenience method that translates a stack frame to a struct trace elements if you already have code the operation of a stack trace",
    "start": "2200700",
    "end": "2207119"
  },
  {
    "text": "elements you can just use that alright so just to summarize the the new stop",
    "start": "2207119",
    "end": "2214739"
  },
  {
    "text": "walking app is actually very flexible and powerful it has way better performance characteristics compared to what was there before and I believe",
    "start": "2214739",
    "end": "2220859"
  },
  {
    "text": "there are several parts of the JDK have already been updated to use that instead of whatever scheme that they were using",
    "start": "2220859",
    "end": "2226230"
  },
  {
    "text": "before and it might kind of allow allow stuck walking to be done instead of",
    "start": "2226230",
    "end": "2232019"
  },
  {
    "text": "situations that before it was too expensive like for example you have some logging system and you say well I cannot",
    "start": "2232019",
    "end": "2237089"
  },
  {
    "text": "afford you know we look reasonably frequently I cannot afford get like a fool you know stacktrace because too",
    "start": "2237089",
    "end": "2242249"
  },
  {
    "text": "expensive but I can I can afford you know look at the top five frames and just log that just in case just the",
    "start": "2242249",
    "end": "2248039"
  },
  {
    "text": "cases is helpful before you gonna do that maybe now you can do that alright so I cover the three main topics and we",
    "start": "2248039",
    "end": "2254730"
  },
  {
    "text": "have a bonus topic that will cover last that I think is very cool so using the immortal words of Morpheus",
    "start": "2254730",
    "end": "2262349"
  },
  {
    "text": "so what if I told you you can write a just-in-time compiler in Java and this",
    "start": "2262349",
    "end": "2269369"
  },
  {
    "text": "is exactly what you can do with a new JVM see I the Java JVM compiler interface and by compiler we're talking",
    "start": "2269369",
    "end": "2275849"
  },
  {
    "text": "about a JIT that translates byte codes into machine code while the game is",
    "start": "2275849",
    "end": "2281760"
  },
  {
    "text": "running not Java C right this is very cool everybody's like looking perplexed or you've seen this before okay",
    "start": "2281760",
    "end": "2287400"
  },
  {
    "text": "people are looking perplexed alright so I will give a little bit of an overview how kind of the legit works in Java and",
    "start": "2287400",
    "end": "2294210"
  },
  {
    "text": "how it interacts with the rest of the VM so when a method is executed in hotspot",
    "start": "2294210",
    "end": "2299250"
  },
  {
    "text": "it can be executed at three different levels so first it can be interpreted then compiled by if it's hot enough",
    "start": "2299250",
    "end": "2305369"
  },
  {
    "text": "whatever that means it compiled by the client compiler C 1 and if it's like still remains hot it would be compiled",
    "start": "2305369",
    "end": "2311369"
  },
  {
    "text": "by the server compilers C 2 and all that stuff if you enable tier compilation that were neighbor both compilers to",
    "start": "2311369",
    "end": "2316650"
  },
  {
    "text": "work in in the same VM and what's the trade-off between the two different compilers the client compiler is a fast",
    "start": "2316650",
    "end": "2323910"
  },
  {
    "text": "compiler but generates so and so code the server compiler is a much slower compiler but generates much better code",
    "start": "2323910",
    "end": "2329400"
  },
  {
    "text": "okay so you want to compile with a clang compiler maybe to kind of get improve",
    "start": "2329400",
    "end": "2335130"
  },
  {
    "text": "startup a little bit but ultimately you want to compile the server compiler to have great throughput in along in the",
    "start": "2335130",
    "end": "2341099"
  },
  {
    "text": "long run so I'll cover a little bit the interaction between JVM and the JIT",
    "start": "2341099",
    "end": "2346589"
  },
  {
    "text": "compiler so the JVM has a code cache and the code cache contains",
    "start": "2346589",
    "end": "2351930"
  },
  {
    "text": "all the methods that have been compiled by the JIT and and you know and that's how they are executed for every method",
    "start": "2351930",
    "end": "2359910"
  },
  {
    "text": "it has a set of dependencies so when a JIT compilers a particular method it makes a set of assumptions like for",
    "start": "2359910",
    "end": "2367560"
  },
  {
    "text": "example it can assume that hey the only class that has been loaded that implements them the interface map is",
    "start": "2367560",
    "end": "2373680"
  },
  {
    "text": "hash map so every time I see an instance of type map I can actually safely assume",
    "start": "2373680",
    "end": "2379589"
  },
  {
    "text": "that it's a hash map because it has to be there's no other you know there's no other class that it can be so you can",
    "start": "2379589",
    "end": "2385440"
  },
  {
    "text": "make maybe generate better code that's you know making that assumption but it has to record that assumption somewhere because maybe five minutes later three",
    "start": "2385440",
    "end": "2392250"
  },
  {
    "text": "map is loaded validates that assumption and in that case the VM has to go through the dependencies and invalidate parts you",
    "start": "2392250",
    "end": "2398940"
  },
  {
    "text": "know several compiled methods that happen some so that doesn't hold anymore and on top of this of course it has the",
    "start": "2398940",
    "end": "2406829"
  },
  {
    "text": "GBM has out of metadata like you know class information class by codes method",
    "start": "2406829",
    "end": "2412200"
  },
  {
    "text": "signature field signature blah-di-blah-di-blah you know all that stuff what's in the class file basically and also make",
    "start": "2412200",
    "end": "2418710"
  },
  {
    "text": "things lots of profiling information which methods are hot which part of",
    "start": "2418710",
    "end": "2424109"
  },
  {
    "text": "methods tend to be executed more so which which paths through so a",
    "start": "2424109",
    "end": "2430769"
  },
  {
    "text": "particular method tends to be hotter than others etc so when are the VM",
    "start": "2430769",
    "end": "2435859"
  },
  {
    "text": "notices that a particular method is hot it tells the G can you please compile this and the way does that usually just",
    "start": "2435859",
    "end": "2442859"
  },
  {
    "text": "adds that as as that to IQ that the compiler basically looks every time they",
    "start": "2442859",
    "end": "2448079"
  },
  {
    "text": "finishes a compilation so the JIT start compiling the method and it has to",
    "start": "2448079",
    "end": "2453420"
  },
  {
    "text": "request a lot of information from the VM while it's compiling the method the information includes give me the by",
    "start": "2453420",
    "end": "2458759"
  },
  {
    "text": "codes give me the signature of the method that that is being called give me the bios of",
    "start": "2458759",
    "end": "2463980"
  },
  {
    "text": "my method maybe wants to inline it sting nature of fields layout of objects",
    "start": "2463980",
    "end": "2469739"
  },
  {
    "text": "because the VM ultimately decides what the object layout is going to be etc finally when the the code is a weather",
    "start": "2469739",
    "end": "2478200"
  },
  {
    "text": "JIT finishes and finish the compilation it puts back puts the generated code in",
    "start": "2478200",
    "end": "2484289"
  },
  {
    "text": "the code cache right you see the new items that appeared there right and then also remember that it has to also add",
    "start": "2484289",
    "end": "2490140"
  },
  {
    "text": "the set of dependencies that that code depends on it's basically the assumption that the JIT made while it was compiling",
    "start": "2490140",
    "end": "2495809"
  },
  {
    "text": "then that method just the case they're gonna be invalid evaluated later so how",
    "start": "2495809",
    "end": "2504089"
  },
  {
    "text": "does this work with JVM CI so in when you neighbor JMC I basically eat the JVM",
    "start": "2504089",
    "end": "2510569"
  },
  {
    "text": "CI compiler which is written in Java and implements interface JVM CI compiler it",
    "start": "2510569",
    "end": "2515670"
  },
  {
    "text": "replaces the server compiler ok and JVM",
    "start": "2515670",
    "end": "2521069"
  },
  {
    "text": "see either interface basically defines that interaction between the compiler it and in Java the VM and it's done so that's so in Java okay",
    "start": "2521069",
    "end": "2528990"
  },
  {
    "text": "and what I tried to say earlier is that a lot of it there actually is not like Jimmy you know compiled this method okay",
    "start": "2528990",
    "end": "2535140"
  },
  {
    "text": "here's the here's the result the result is usually like I think a byte array right it returns the machine code in a byte array",
    "start": "2535140",
    "end": "2540390"
  },
  {
    "text": "so a lot of the complexity of JVM CI is just the interaction between the",
    "start": "2540390",
    "end": "2545550"
  },
  {
    "text": "compiler and the JVM when the compiler needs to get metadata information from the JVM profiling information of the",
    "start": "2545550",
    "end": "2550559"
  },
  {
    "text": "angiogram here is the set of dependencies that you have to add to that method etc so this is a lot of you know by the time you know so this allows",
    "start": "2550559",
    "end": "2558569"
  },
  {
    "text": "with a complexity for JVM cia's so why you want to do that why you want to write a JIT in Java well it's easier to",
    "start": "2558569",
    "end": "2565260"
  },
  {
    "text": "write and maintain right I assume like most people here will assume that writing Java is easier to write them in",
    "start": "2565260",
    "end": "2571680"
  },
  {
    "text": "thing unlike C++ it is safer so compilers have bugs right if C 2 crashes",
    "start": "2571680",
    "end": "2577319"
  },
  {
    "text": "it takes down a VM in this case if the compiler has a bug you will throw an exception right and it will be caught",
    "start": "2577319",
    "end": "2582599"
  },
  {
    "text": "and that compiler should be abandoned by the VM stays and then you can just call it again right and it is pluggable and",
    "start": "2582599",
    "end": "2588900"
  },
  {
    "text": "this is actually pretty cool so imagine and kind of being a little bit optimistic here but imagine like",
    "start": "2588900",
    "end": "2594089"
  },
  {
    "text": "your child's not alright who's been working on JRuby for a long time right and then he comes up with a really cool",
    "start": "2594089",
    "end": "2599520"
  },
  {
    "text": "way to optimize jvj Ruby by codes in the jet but if you wanted to go release that",
    "start": "2599520",
    "end": "2605790"
  },
  {
    "text": "currently has to released his own JVM which is kind of not not easy and it has to basically you know release every time",
    "start": "2605790",
    "end": "2611040"
  },
  {
    "text": "it'll release an update every time I new up JVM you know a new jdk update goes out but maybe with this you can just",
    "start": "2611040",
    "end": "2617549"
  },
  {
    "text": "distribute the JIT along with JRuby and then you know it would just you know in and the VM will just pick it up without",
    "start": "2617549",
    "end": "2624119"
  },
  {
    "text": "having to you know rebuild the VM etc and it's actually pretty cool right one thing to point out though is that you",
    "start": "2624119",
    "end": "2630390"
  },
  {
    "text": "know you know write once run anywhere what it doesn't hold here for a couple of reasons and maybe everybody's gonna be surprised and that this is the case",
    "start": "2630390",
    "end": "2636780"
  },
  {
    "text": "but there are a couple of reasons first the the generate machine code so it's generating machine code for a particular",
    "start": "2636780",
    "end": "2642420"
  },
  {
    "text": "architecture right so in order to make it usable for more architectures then you have to basically have a JIT that",
    "start": "2642420",
    "end": "2648569"
  },
  {
    "text": "would differ a back-end okay and there are second reason why it's not as very portable is that a particular VM",
    "start": "2648569",
    "end": "2654329"
  },
  {
    "text": "has certain it does things in a certain way like the way allocation works is differ",
    "start": "2654329",
    "end": "2659460"
  },
  {
    "text": "you know hot smoker - j9 the way synchronization works is different in hotspot number than j9 and the G has to",
    "start": "2659460",
    "end": "2669000"
  },
  {
    "text": "kind of generate code that deals with synchronization or a location etc just to get best performance so the G is you",
    "start": "2669000",
    "end": "2677220"
  },
  {
    "text": "know the G can be actually targeting a specific VF for a specific architecture so it's not you know as portable as you",
    "start": "2677220",
    "end": "2682770"
  },
  {
    "text": "expect but it's still easier to write and maintain and all that stuff so yes",
    "start": "2682770",
    "end": "2687990"
  },
  {
    "text": "there is a JIT written in java is called growl it's a high performers dynamic compiler done at oracle labs interacts",
    "start": "2687990",
    "end": "2694500"
  },
  {
    "text": "with hotspot through jb NCI and it's open source and you can download it you can download that jdk 9 early early",
    "start": "2694500",
    "end": "2701700"
  },
  {
    "text": "access and then there is like a long set of command-line argument you have to pass there's an incantation and then you",
    "start": "2701700",
    "end": "2707970"
  },
  {
    "text": "you actually you not be running with a JIT in Java and a couple things if you",
    "start": "2707970",
    "end": "2715619"
  },
  {
    "text": "use growl so whom implies the compiler so the compiler is Java right first is gonna be interpreted and then well",
    "start": "2715619",
    "end": "2721099"
  },
  {
    "text": "currently only c1 will compile the the compiler because by the time the compiler gets gets really hot you",
    "start": "2721099",
    "end": "2726420"
  },
  {
    "text": "probably got compiled a lot of things so there's no point in optimizing it further however there is another JP that",
    "start": "2726420",
    "end": "2731700"
  },
  {
    "text": "was recently announced ahead of time compiler that would be able to compile the JIT compiler ahead of time so you",
    "start": "2731700",
    "end": "2738000"
  },
  {
    "text": "don't have to compile it when the VM starts out right and it is enough the ahead of time compiler is also grabbed",
    "start": "2738000",
    "end": "2743579"
  },
  {
    "text": "base so in this case growl will be compiling itself which is kind of critical something to note though is that there is some extra heap overhead",
    "start": "2743579",
    "end": "2750030"
  },
  {
    "text": "and pressure if using growl why because it's just a java application right so it would create data structures in the heap",
    "start": "2750030",
    "end": "2756329"
  },
  {
    "text": "and it does have some state that it maintains with some between come violations so there would be some extra overhead in in the heap if you Ronnie so",
    "start": "2756329",
    "end": "2764130"
  },
  {
    "text": "you have to take into account when you size your your heat and just to summarize this so this is my colleague",
    "start": "2764130",
    "end": "2771089"
  },
  {
    "text": "Chris before he joined us he was actually the in the compiler group for",
    "start": "2771089",
    "end": "2776250"
  },
  {
    "text": "in the hospital compiler group at Oracle and he worked on this and this actually are real tweaked I usually kind of have joked which",
    "start": "2776250",
    "end": "2782579"
  },
  {
    "text": "sometimes but these are real tweet they said this is one of the most important things I've worked on in a while so that's all I had thank you very much for",
    "start": "2782579",
    "end": "2789450"
  },
  {
    "text": "coming thank you very much for for come even though they told you know the title",
    "start": "2789450",
    "end": "2794490"
  },
  {
    "text": "of the talk did not have micro-services server less agile and I don't know what else so it was great they have you here",
    "start": "2794490",
    "end": "2800550"
  },
  {
    "text": "and I can take questions thank you very much",
    "start": "2800550",
    "end": "2804589"
  },
  {
    "text": "any questions so in the beginning you",
    "start": "2807500",
    "end": "2817410"
  },
  {
    "text": "listed big list of the features yeah so any other features that that you can",
    "start": "2817410",
    "end": "2822990"
  },
  {
    "text": "tell like in five seconds oh I kind of which was to pick so Gil went a few you",
    "start": "2822990",
    "end": "2829109"
  },
  {
    "text": "know over a few of them earlier not sure I tried to kind of keep keep two features that kind of had had to be kind",
    "start": "2829109",
    "end": "2835140"
  },
  {
    "text": "of kind of performance and profiling related so these were the ones that kind of found interesting yeah so the unified",
    "start": "2835140",
    "end": "2844830"
  },
  {
    "text": "JVM logging is there another set of options after another column where you",
    "start": "2844830",
    "end": "2850470"
  },
  {
    "text": "can specify the format of those logs no no so so the yeah that's not good",
    "start": "2850470",
    "end": "2857520"
  },
  {
    "text": "question so no so yeah apart from the decorators that you to anything after",
    "start": "2857520",
    "end": "2863280"
  },
  {
    "text": "that is basically a string so any generates a string so hotspot does have",
    "start": "2863280",
    "end": "2869430"
  },
  {
    "text": "a way to log in a structured format which is JFR and it's an Oracle product",
    "start": "2869430",
    "end": "2874619"
  },
  {
    "text": "and it's not open JDK so if you want to do that you have to basically use an or at Oracle product to do that yeah and",
    "start": "2874619",
    "end": "2883770"
  },
  {
    "text": "anybody else you can hug around here if you want to come in grab if you're gonna",
    "start": "2883770",
    "end": "2890700"
  },
  {
    "text": "go to the Java open space it'll be in the Pacific BC downstairs yeah thank you",
    "start": "2890700",
    "end": "2897050"
  }
]