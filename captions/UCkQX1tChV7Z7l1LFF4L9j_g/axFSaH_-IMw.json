[
  {
    "text": "[Music]",
    "start": "3360",
    "end": "6550"
  },
  {
    "text": "how many of you have decomposed the",
    "start": "9840",
    "end": "11519"
  },
  {
    "text": "monolith into microservices",
    "start": "11519",
    "end": "14320"
  },
  {
    "text": "and how many of you have created a",
    "start": "14320",
    "end": "15839"
  },
  {
    "text": "multi-tenant microservice to eliminate",
    "start": "15839",
    "end": "18000"
  },
  {
    "text": "the need for other microservices",
    "start": "18000",
    "end": "20960"
  },
  {
    "text": "over the years twitter's learned a lot",
    "start": "20960",
    "end": "22800"
  },
  {
    "text": "in this space",
    "start": "22800",
    "end": "24000"
  },
  {
    "text": "and we now have a new api plan that we",
    "start": "24000",
    "end": "26240"
  },
  {
    "text": "hope will scale well into the future",
    "start": "26240",
    "end": "29039"
  },
  {
    "text": "today i'm excited to run through a brief",
    "start": "29039",
    "end": "30960"
  },
  {
    "text": "history of the twitter apis",
    "start": "30960",
    "end": "32960"
  },
  {
    "text": "followed by a discussion of the goals",
    "start": "32960",
    "end": "34800"
  },
  {
    "text": "and design of our new public api",
    "start": "34800",
    "end": "36640"
  },
  {
    "text": "platform",
    "start": "36640",
    "end": "37680"
  },
  {
    "text": "and then we'll finish with a real",
    "start": "37680",
    "end": "39040"
  },
  {
    "text": "end-to-end example of how twitter",
    "start": "39040",
    "end": "40640"
  },
  {
    "text": "engineers build api endpoints using open",
    "start": "40640",
    "end": "43040"
  },
  {
    "text": "api spec graphql",
    "start": "43040",
    "end": "44879"
  },
  {
    "text": "and scala so first let's start with some",
    "start": "44879",
    "end": "47600"
  },
  {
    "text": "history",
    "start": "47600",
    "end": "48719"
  },
  {
    "text": "our journey starts 14 years ago in 2006",
    "start": "48719",
    "end": "52000"
  },
  {
    "text": "when twitter launched our first public",
    "start": "52000",
    "end": "54239"
  },
  {
    "text": "http api",
    "start": "54239",
    "end": "55760"
  },
  {
    "text": "which was served from a single ruby and",
    "start": "55760",
    "end": "57600"
  },
  {
    "text": "rails monolith which later became known",
    "start": "57600",
    "end": "59760"
  },
  {
    "text": "as",
    "start": "59760",
    "end": "60239"
  },
  {
    "text": "the monorail by 2010 we had one of the",
    "start": "60239",
    "end": "63199"
  },
  {
    "text": "largest ruby on rail systems in the",
    "start": "63199",
    "end": "65198"
  },
  {
    "text": "world",
    "start": "65199",
    "end": "66400"
  },
  {
    "text": "but given its growing and complex single",
    "start": "66400",
    "end": "68799"
  },
  {
    "text": "code base",
    "start": "68799",
    "end": "69520"
  },
  {
    "text": "it was becoming increasingly difficult",
    "start": "69520",
    "end": "71360"
  },
  {
    "text": "to make changes",
    "start": "71360",
    "end": "72560"
  },
  {
    "text": "and more and more challenging to",
    "start": "72560",
    "end": "74320"
  },
  {
    "text": "paralyze work among our engineering",
    "start": "74320",
    "end": "76240"
  },
  {
    "text": "teams",
    "start": "76240",
    "end": "77280"
  },
  {
    "text": "it was time for a migration and in 2012",
    "start": "77280",
    "end": "81040"
  },
  {
    "text": "we completed migrating our public api",
    "start": "81040",
    "end": "83520"
  },
  {
    "text": "off of the rails monorail and onto",
    "start": "83520",
    "end": "85920"
  },
  {
    "text": "numerous thrift jbm microservices",
    "start": "85920",
    "end": "88720"
  },
  {
    "text": "fronted by a single http jvm",
    "start": "88720",
    "end": "91439"
  },
  {
    "text": "microservice",
    "start": "91439",
    "end": "92240"
  },
  {
    "text": "named woodstar woodstar was instrumental",
    "start": "92240",
    "end": "96000"
  },
  {
    "text": "in getting almost",
    "start": "96000",
    "end": "96880"
  },
  {
    "text": "all twitter traffic onto the jvm but",
    "start": "96880",
    "end": "100320"
  },
  {
    "text": "in time it became its own smaller",
    "start": "100320",
    "end": "102720"
  },
  {
    "text": "monolith",
    "start": "102720",
    "end": "103439"
  },
  {
    "text": "which was becoming increasingly",
    "start": "103439",
    "end": "104960"
  },
  {
    "text": "difficult to change and operate",
    "start": "104960",
    "end": "107280"
  },
  {
    "text": "the drums started beating once again it",
    "start": "107280",
    "end": "110000"
  },
  {
    "text": "was time for another migration",
    "start": "110000",
    "end": "112720"
  },
  {
    "text": "and in 2014 we completed the second",
    "start": "112720",
    "end": "114960"
  },
  {
    "text": "migration from a single woodstar",
    "start": "114960",
    "end": "116960"
  },
  {
    "text": "api service to a set of 14 http",
    "start": "116960",
    "end": "120399"
  },
  {
    "text": "microservices",
    "start": "120399",
    "end": "121680"
  },
  {
    "text": "running on an internal jvm framework",
    "start": "121680",
    "end": "123920"
  },
  {
    "text": "named macaw",
    "start": "123920",
    "end": "125840"
  },
  {
    "text": "while the microservices approach enabled",
    "start": "125840",
    "end": "128160"
  },
  {
    "text": "increased development speeds at first",
    "start": "128160",
    "end": "130479"
  },
  {
    "text": "it also resulted in a scattered and",
    "start": "130479",
    "end": "132879"
  },
  {
    "text": "disjointed twitter api",
    "start": "132879",
    "end": "134800"
  },
  {
    "text": "as independent teams designed and built",
    "start": "134800",
    "end": "137120"
  },
  {
    "text": "endpoints for their specific use cases",
    "start": "137120",
    "end": "139840"
  },
  {
    "text": "with little coordination fast forward to",
    "start": "139840",
    "end": "143280"
  },
  {
    "text": "2017 when the twitter app",
    "start": "143280",
    "end": "145120"
  },
  {
    "text": "started using some new internal only",
    "start": "145120",
    "end": "147440"
  },
  {
    "text": "rest and graphql apis",
    "start": "147440",
    "end": "150080"
  },
  {
    "text": "having internal only rest and graphql",
    "start": "150080",
    "end": "152400"
  },
  {
    "text": "apis helped our twitter app teams move",
    "start": "152400",
    "end": "154800"
  },
  {
    "text": "fast",
    "start": "154800",
    "end": "155360"
  },
  {
    "text": "and iterate quickly without having to",
    "start": "155360",
    "end": "157599"
  },
  {
    "text": "rely exclusively on the public api",
    "start": "157599",
    "end": "160400"
  },
  {
    "text": "which at this point was time consuming",
    "start": "160400",
    "end": "162640"
  },
  {
    "text": "to change",
    "start": "162640",
    "end": "164560"
  },
  {
    "text": "in early 2019 we started to plan for the",
    "start": "164560",
    "end": "167280"
  },
  {
    "text": "next major version of the twitter public",
    "start": "167280",
    "end": "169360"
  },
  {
    "text": "api",
    "start": "169360",
    "end": "170000"
  },
  {
    "text": "and we knew we needed a new architecture",
    "start": "170000",
    "end": "172160"
  },
  {
    "text": "to address the public api's slow",
    "start": "172160",
    "end": "174080"
  },
  {
    "text": "iteration speeds",
    "start": "174080",
    "end": "175360"
  },
  {
    "text": "and continued fragmentation which brings",
    "start": "175360",
    "end": "178239"
  },
  {
    "text": "us to this year",
    "start": "178239",
    "end": "179120"
  },
  {
    "text": "when our new architecture started",
    "start": "179120",
    "end": "180720"
  },
  {
    "text": "powering the public api platform",
    "start": "180720",
    "end": "182720"
  },
  {
    "text": "which now hosts our first api v2",
    "start": "182720",
    "end": "185200"
  },
  {
    "text": "endpoints",
    "start": "185200",
    "end": "186959"
  },
  {
    "text": "so with that brief history behind us",
    "start": "186959",
    "end": "189280"
  },
  {
    "text": "let's now look at the goals and",
    "start": "189280",
    "end": "190879"
  },
  {
    "text": "architecture behind our new public api",
    "start": "190879",
    "end": "193200"
  },
  {
    "text": "platform",
    "start": "193200",
    "end": "195040"
  },
  {
    "text": "for our new platform we knew we needed a",
    "start": "195040",
    "end": "197280"
  },
  {
    "text": "new architecture that can more easily",
    "start": "197280",
    "end": "199360"
  },
  {
    "text": "scale with the large number of api",
    "start": "199360",
    "end": "201280"
  },
  {
    "text": "endpoints",
    "start": "201280",
    "end": "202319"
  },
  {
    "text": "needed to serve current and future",
    "start": "202319",
    "end": "204000"
  },
  {
    "text": "functionality going forward",
    "start": "204000",
    "end": "206239"
  },
  {
    "text": "as part of this design process we",
    "start": "206239",
    "end": "208000"
  },
  {
    "text": "drafted the following goals",
    "start": "208000",
    "end": "210720"
  },
  {
    "text": "our abstraction goal is to enable",
    "start": "210720",
    "end": "213200"
  },
  {
    "text": "twitter engineers building the twitter",
    "start": "213200",
    "end": "214799"
  },
  {
    "text": "api",
    "start": "214799",
    "end": "215599"
  },
  {
    "text": "to focus on querying and mutating only",
    "start": "215599",
    "end": "218239"
  },
  {
    "text": "the data they care about",
    "start": "218239",
    "end": "219840"
  },
  {
    "text": "without needing to worry about the",
    "start": "219840",
    "end": "221440"
  },
  {
    "text": "infrastructure and operations of running",
    "start": "221440",
    "end": "223840"
  },
  {
    "text": "a production http service",
    "start": "223840",
    "end": "226959"
  },
  {
    "text": "our ownership goals seek to contain core",
    "start": "226959",
    "end": "229440"
  },
  {
    "text": "and common api logic",
    "start": "229440",
    "end": "231200"
  },
  {
    "text": "in a single place owned by a single api",
    "start": "231200",
    "end": "234159"
  },
  {
    "text": "platform team",
    "start": "234159",
    "end": "235760"
  },
  {
    "text": "while also allowing non-common api",
    "start": "235760",
    "end": "238720"
  },
  {
    "text": "components to be authored and owned by",
    "start": "238720",
    "end": "240879"
  },
  {
    "text": "different teams",
    "start": "240879",
    "end": "242959"
  },
  {
    "text": "and our goal of consistency is to",
    "start": "242959",
    "end": "244560"
  },
  {
    "text": "provide a consistent experience for",
    "start": "244560",
    "end": "246319"
  },
  {
    "text": "external developers by relying on our",
    "start": "246319",
    "end": "248400"
  },
  {
    "text": "api design principles",
    "start": "248400",
    "end": "250000"
  },
  {
    "text": "to reinforce uniformity with the above",
    "start": "250000",
    "end": "253200"
  },
  {
    "text": "goals in mind we've built a common",
    "start": "253200",
    "end": "255200"
  },
  {
    "text": "platform to host",
    "start": "255200",
    "end": "256400"
  },
  {
    "text": "all of our new twitter api endpoints",
    "start": "256400",
    "end": "259680"
  },
  {
    "text": "to operate this multi-tenant platform at",
    "start": "259680",
    "end": "261840"
  },
  {
    "text": "scale we",
    "start": "261840",
    "end": "262720"
  },
  {
    "text": "had to minimize any endpoint specific",
    "start": "262720",
    "end": "265040"
  },
  {
    "text": "business logic",
    "start": "265040",
    "end": "266400"
  },
  {
    "text": "otherwise the system would quickly",
    "start": "266400",
    "end": "268400"
  },
  {
    "text": "become yet another",
    "start": "268400",
    "end": "269600"
  },
  {
    "text": "unmaintainable monolith a powerful data",
    "start": "269600",
    "end": "273040"
  },
  {
    "text": "access layer",
    "start": "273040",
    "end": "274000"
  },
  {
    "text": "that emphasized declarative queries over",
    "start": "274000",
    "end": "276479"
  },
  {
    "text": "imperative code",
    "start": "276479",
    "end": "277600"
  },
  {
    "text": "was crucial to this strategy",
    "start": "277600",
    "end": "280720"
  },
  {
    "text": "as we discussed earlier in 2017 our",
    "start": "280720",
    "end": "283199"
  },
  {
    "text": "twitter applications began using an",
    "start": "283199",
    "end": "285120"
  },
  {
    "text": "internal only graphql api and this",
    "start": "285120",
    "end": "288320"
  },
  {
    "text": "momentum built throughout 2019 when",
    "start": "288320",
    "end": "290639"
  },
  {
    "text": "migrations to graphql",
    "start": "290639",
    "end": "292160"
  },
  {
    "text": "started to happen across the company it",
    "start": "292160",
    "end": "294720"
  },
  {
    "text": "was perfect timing",
    "start": "294720",
    "end": "296160"
  },
  {
    "text": "and our team followed suit as we",
    "start": "296160",
    "end": "297840"
  },
  {
    "text": "realized that the data querying needs of",
    "start": "297840",
    "end": "300160"
  },
  {
    "text": "the public twitter api",
    "start": "300160",
    "end": "301919"
  },
  {
    "text": "are similar to the needs of our twitter",
    "start": "301919",
    "end": "303680"
  },
  {
    "text": "mobile and desktop clients",
    "start": "303680",
    "end": "306000"
  },
  {
    "text": "put another way twitter clients query",
    "start": "306000",
    "end": "308479"
  },
  {
    "text": "for data",
    "start": "308479",
    "end": "309280"
  },
  {
    "text": "and render uis while the public twitter",
    "start": "309280",
    "end": "312320"
  },
  {
    "text": "apis",
    "start": "312320",
    "end": "313039"
  },
  {
    "text": "query for data and render json",
    "start": "313039",
    "end": "316400"
  },
  {
    "text": "a bonus from consolidating our data",
    "start": "316400",
    "end": "318479"
  },
  {
    "text": "querying through a single interface",
    "start": "318479",
    "end": "320639"
  },
  {
    "text": "is that the public twitter api can now",
    "start": "320639",
    "end": "322560"
  },
  {
    "text": "easily deliver",
    "start": "322560",
    "end": "323680"
  },
  {
    "text": "new twitter features by querying for",
    "start": "323680",
    "end": "325919"
  },
  {
    "text": "graphql data",
    "start": "325919",
    "end": "326960"
  },
  {
    "text": "already being directly used by our",
    "start": "326960",
    "end": "328880"
  },
  {
    "text": "consumer apps",
    "start": "328880",
    "end": "330880"
  },
  {
    "text": "with the graphql-based platform approach",
    "start": "330880",
    "end": "332880"
  },
  {
    "text": "decided we needed a multi-tenant way for",
    "start": "332880",
    "end": "335280"
  },
  {
    "text": "different teams to build",
    "start": "335280",
    "end": "336639"
  },
  {
    "text": "and contribute to the overall twitter",
    "start": "336639",
    "end": "338320"
  },
  {
    "text": "api",
    "start": "338320",
    "end": "339840"
  },
  {
    "text": "to facilitate this we designed several",
    "start": "339840",
    "end": "341840"
  },
  {
    "text": "plugable platform components",
    "start": "341840",
    "end": "343919"
  },
  {
    "text": "and in this talk we'll focus on resource",
    "start": "343919",
    "end": "346160"
  },
  {
    "text": "fields and selections",
    "start": "346160",
    "end": "348960"
  },
  {
    "text": "resource field components are used to",
    "start": "348960",
    "end": "350800"
  },
  {
    "text": "create the core resources in our systems",
    "start": "350800",
    "end": "353520"
  },
  {
    "text": "for example tweet resources and user",
    "start": "353520",
    "end": "356000"
  },
  {
    "text": "resources",
    "start": "356000",
    "end": "357680"
  },
  {
    "text": "and selection components are used to",
    "start": "357680",
    "end": "359440"
  },
  {
    "text": "define how to find",
    "start": "359440",
    "end": "360960"
  },
  {
    "text": "resources for example tweet lookup by id",
    "start": "360960",
    "end": "364840"
  },
  {
    "text": "selection or tweet lookup by search",
    "start": "364840",
    "end": "367680"
  },
  {
    "text": "selection",
    "start": "367680",
    "end": "369440"
  },
  {
    "text": "using these components teams can",
    "start": "369440",
    "end": "371360"
  },
  {
    "text": "independently own and contribute",
    "start": "371360",
    "end": "373199"
  },
  {
    "text": "different parts of the overall twitter",
    "start": "373199",
    "end": "374720"
  },
  {
    "text": "api",
    "start": "374720",
    "end": "375520"
  },
  {
    "text": "while still returning uniform",
    "start": "375520",
    "end": "377360"
  },
  {
    "text": "representations and responses",
    "start": "377360",
    "end": "380639"
  },
  {
    "text": "at this point in the story you may be",
    "start": "380639",
    "end": "382240"
  },
  {
    "text": "curious where endpoint specific business",
    "start": "382240",
    "end": "384400"
  },
  {
    "text": "logic",
    "start": "384400",
    "end": "385199"
  },
  {
    "text": "actually lives we offer two options here",
    "start": "385199",
    "end": "389120"
  },
  {
    "text": "when an endpoint's business logic can be",
    "start": "389120",
    "end": "391039"
  },
  {
    "text": "represented in strato ql",
    "start": "391039",
    "end": "392960"
  },
  {
    "text": "which is the language used by twitter's",
    "start": "392960",
    "end": "394800"
  },
  {
    "text": "internal data catalog",
    "start": "394800",
    "end": "396080"
  },
  {
    "text": "system then we only need to write a",
    "start": "396080",
    "end": "398479"
  },
  {
    "text": "function in a strato-hosted managed",
    "start": "398479",
    "end": "400800"
  },
  {
    "text": "column",
    "start": "400800",
    "end": "401600"
  },
  {
    "text": "without requiring a separate service",
    "start": "401600",
    "end": "404720"
  },
  {
    "text": "otherwise the business logic is",
    "start": "404720",
    "end": "406400"
  },
  {
    "text": "contained in a financial thrift",
    "start": "406400",
    "end": "408080"
  },
  {
    "text": "microservice",
    "start": "408080",
    "end": "408960"
  },
  {
    "text": "written in scala exposed by a thrift",
    "start": "408960",
    "end": "411680"
  },
  {
    "text": "strato column",
    "start": "411680",
    "end": "413520"
  },
  {
    "text": "in either case since the platform",
    "start": "413520",
    "end": "415680"
  },
  {
    "text": "provides the common http needs",
    "start": "415680",
    "end": "418080"
  },
  {
    "text": "for api endpoints new apis can be",
    "start": "418080",
    "end": "420960"
  },
  {
    "text": "released without spinning up",
    "start": "420960",
    "end": "422880"
  },
  {
    "text": "a new http service and",
    "start": "422880",
    "end": "426000"
  },
  {
    "text": "if an endpoint can be constructed by",
    "start": "426000",
    "end": "427919"
  },
  {
    "text": "querying for already existing graphql",
    "start": "427919",
    "end": "430080"
  },
  {
    "text": "data",
    "start": "430080",
    "end": "431120"
  },
  {
    "text": "or if an endpoint's business logic can",
    "start": "431120",
    "end": "433440"
  },
  {
    "text": "be implemented in stratoql then we can",
    "start": "433440",
    "end": "436400"
  },
  {
    "text": "bypass",
    "start": "436400",
    "end": "437039"
  },
  {
    "text": "almost all service owning",
    "start": "437039",
    "end": "438639"
  },
  {
    "text": "responsibilities for that api endpoint",
    "start": "438639",
    "end": "442479"
  },
  {
    "text": "now that i've discussed the history of",
    "start": "442479",
    "end": "443919"
  },
  {
    "text": "the twitter apis and the high level",
    "start": "443919",
    "end": "446080"
  },
  {
    "text": "goals and design of our new public api",
    "start": "446080",
    "end": "448319"
  },
  {
    "text": "platform",
    "start": "448319",
    "end": "449199"
  },
  {
    "text": "let's walk through an intent example",
    "start": "449199",
    "end": "450800"
  },
  {
    "text": "that shows how to create two",
    "start": "450800",
    "end": "452479"
  },
  {
    "text": "new twitter api endpoints",
    "start": "452479",
    "end": "455840"
  },
  {
    "text": "the requirements from our product",
    "start": "455840",
    "end": "457280"
  },
  {
    "text": "manager are as follows",
    "start": "457280",
    "end": "459520"
  },
  {
    "text": "we must handle an http get request to",
    "start": "459520",
    "end": "462000"
  },
  {
    "text": "slash two tweets",
    "start": "462000",
    "end": "463680"
  },
  {
    "text": "that contains a single tweet id in the",
    "start": "463680",
    "end": "465840"
  },
  {
    "text": "path",
    "start": "465840",
    "end": "466960"
  },
  {
    "text": "if the request is ill-formed return a",
    "start": "466960",
    "end": "469360"
  },
  {
    "text": "400 band request",
    "start": "469360",
    "end": "471360"
  },
  {
    "text": "otherwise return an http 200.json",
    "start": "471360",
    "end": "474240"
  },
  {
    "text": "response",
    "start": "474240",
    "end": "475199"
  },
  {
    "text": "containing a single tweet id with its",
    "start": "475199",
    "end": "477440"
  },
  {
    "text": "default id",
    "start": "477440",
    "end": "478720"
  },
  {
    "text": "and text fields we must also handle an",
    "start": "478720",
    "end": "483039"
  },
  {
    "text": "http get request to slash two tweets",
    "start": "483039",
    "end": "485919"
  },
  {
    "text": "search recent that accepts a query",
    "start": "485919",
    "end": "489199"
  },
  {
    "text": "max results and next token query params",
    "start": "489199",
    "end": "492560"
  },
  {
    "text": "again if the request is ill-formed",
    "start": "492560",
    "end": "494319"
  },
  {
    "text": "return a 400 band request",
    "start": "494319",
    "end": "496720"
  },
  {
    "text": "otherwise return an http 200 json",
    "start": "496720",
    "end": "499360"
  },
  {
    "text": "response",
    "start": "499360",
    "end": "500319"
  },
  {
    "text": "containing a list of tweets and the next",
    "start": "500319",
    "end": "502720"
  },
  {
    "text": "token",
    "start": "502720",
    "end": "503360"
  },
  {
    "text": "so that customers can paginate through",
    "start": "503360",
    "end": "504960"
  },
  {
    "text": "the results",
    "start": "504960",
    "end": "506400"
  },
  {
    "text": "and similar to tweet by id we need to",
    "start": "506400",
    "end": "508240"
  },
  {
    "text": "return the same standard tweet format",
    "start": "508240",
    "end": "510639"
  },
  {
    "text": "that's used everywhere else in the",
    "start": "510639",
    "end": "512080"
  },
  {
    "text": "twitter api",
    "start": "512080",
    "end": "514399"
  },
  {
    "text": "our requirements will need us to create",
    "start": "514399",
    "end": "516240"
  },
  {
    "text": "a tweet resource which has an id and a",
    "start": "516240",
    "end": "518399"
  },
  {
    "text": "text field that are always returned by",
    "start": "518399",
    "end": "520320"
  },
  {
    "text": "default",
    "start": "520320",
    "end": "521360"
  },
  {
    "text": "so on screen you could see where both of",
    "start": "521360",
    "end": "523120"
  },
  {
    "text": "these resource fields would be defined",
    "start": "523120",
    "end": "525360"
  },
  {
    "text": "in our common config directory",
    "start": "525360",
    "end": "528399"
  },
  {
    "text": "first let's define the tweet id field on",
    "start": "528399",
    "end": "531360"
  },
  {
    "text": "the top of the screen you can see the",
    "start": "531360",
    "end": "532880"
  },
  {
    "text": "contents of the fragment.graphql file",
    "start": "532880",
    "end": "536000"
  },
  {
    "text": "this fragment is used to retrieve all",
    "start": "536000",
    "end": "537760"
  },
  {
    "text": "the tweet data needed to render just",
    "start": "537760",
    "end": "539680"
  },
  {
    "text": "this field",
    "start": "539680",
    "end": "540800"
  },
  {
    "text": "in this case we query for the id string",
    "start": "540800",
    "end": "543040"
  },
  {
    "text": "field in the graphql schema",
    "start": "543040",
    "end": "545519"
  },
  {
    "text": "on the bottom of the screen you can see",
    "start": "545519",
    "end": "546959"
  },
  {
    "text": "the contents of the field.scala file",
    "start": "546959",
    "end": "549360"
  },
  {
    "text": "which is used to configure various",
    "start": "549360",
    "end": "551279"
  },
  {
    "text": "aspects of the field",
    "start": "551279",
    "end": "553360"
  },
  {
    "text": "the owning team is used to determine",
    "start": "553360",
    "end": "555120"
  },
  {
    "text": "where to send automated pages when this",
    "start": "555120",
    "end": "557040"
  },
  {
    "text": "field is experiencing problems",
    "start": "557040",
    "end": "559279"
  },
  {
    "text": "the always include field is set to true",
    "start": "559279",
    "end": "561279"
  },
  {
    "text": "which makes this a default field",
    "start": "561279",
    "end": "563920"
  },
  {
    "text": "we then specify that this field should",
    "start": "563920",
    "end": "565680"
  },
  {
    "text": "be returned in all major and minor",
    "start": "565680",
    "end": "567519"
  },
  {
    "text": "versions of our api",
    "start": "567519",
    "end": "569279"
  },
  {
    "text": "and finally we use a special path based",
    "start": "569279",
    "end": "571440"
  },
  {
    "text": "renderer which lets us declaratively",
    "start": "571440",
    "end": "573440"
  },
  {
    "text": "specify how to render the field",
    "start": "573440",
    "end": "575440"
  },
  {
    "text": "without the need for imperative code",
    "start": "575440",
    "end": "578080"
  },
  {
    "text": "when imperative code",
    "start": "578080",
    "end": "579200"
  },
  {
    "text": "is needed for rendering or error",
    "start": "579200",
    "end": "581120"
  },
  {
    "text": "handling it will exist",
    "start": "581120",
    "end": "582560"
  },
  {
    "text": "in this scala file but the platform has",
    "start": "582560",
    "end": "584800"
  },
  {
    "text": "a goal to limit the need for imperative",
    "start": "584800",
    "end": "586800"
  },
  {
    "text": "code wherever possible",
    "start": "586800",
    "end": "589839"
  },
  {
    "text": "next let's look at how we define the",
    "start": "589839",
    "end": "592320"
  },
  {
    "text": "tweet.text field",
    "start": "592320",
    "end": "594480"
  },
  {
    "text": "since the graphql and scala files will",
    "start": "594480",
    "end": "596399"
  },
  {
    "text": "look almost identical to the tweet.id",
    "start": "596399",
    "end": "598560"
  },
  {
    "text": "field let's focus the slide in the two",
    "start": "598560",
    "end": "600640"
  },
  {
    "text": "additional files that are present",
    "start": "600640",
    "end": "602959"
  },
  {
    "text": "the first file at the top is a project",
    "start": "602959",
    "end": "605120"
  },
  {
    "text": "file which allows different directories",
    "start": "605120",
    "end": "607200"
  },
  {
    "text": "in twitter's monorepo",
    "start": "607200",
    "end": "608399"
  },
  {
    "text": "to be owned by different teams in this",
    "start": "608399",
    "end": "610880"
  },
  {
    "text": "case we include a project file which",
    "start": "610880",
    "end": "612640"
  },
  {
    "text": "indicates that the tweet text field",
    "start": "612640",
    "end": "615279"
  },
  {
    "text": "is owned by the api vnex developers",
    "start": "615279",
    "end": "617600"
  },
  {
    "text": "group in fabricator",
    "start": "617600",
    "end": "618720"
  },
  {
    "text": "which is the system where twitter",
    "start": "618720",
    "end": "620079"
  },
  {
    "text": "performs its code reviews",
    "start": "620079",
    "end": "622079"
  },
  {
    "text": "by specifying this project level",
    "start": "622079",
    "end": "623680"
  },
  {
    "text": "ownership fabricator will then ensure",
    "start": "623680",
    "end": "625839"
  },
  {
    "text": "that all changes to this directory",
    "start": "625839",
    "end": "627920"
  },
  {
    "text": "have a ship it from at least one member",
    "start": "627920",
    "end": "629839"
  },
  {
    "text": "of the owning team",
    "start": "629839",
    "end": "631680"
  },
  {
    "text": "the second file at the bottom is a",
    "start": "631680",
    "end": "633480"
  },
  {
    "text": "slows.json file",
    "start": "633480",
    "end": "635040"
  },
  {
    "text": "where the field owner can define a",
    "start": "635040",
    "end": "636959"
  },
  {
    "text": "service level objective",
    "start": "636959",
    "end": "638560"
  },
  {
    "text": "for retrieving and rendering this",
    "start": "638560",
    "end": "640160"
  },
  {
    "text": "individual field",
    "start": "640160",
    "end": "641760"
  },
  {
    "text": "for this example we'll specify this",
    "start": "641760",
    "end": "643600"
  },
  {
    "text": "field should have a 30-day rolling",
    "start": "643600",
    "end": "645360"
  },
  {
    "text": "success rate",
    "start": "645360",
    "end": "646000"
  },
  {
    "text": "objective of 99",
    "start": "646000",
    "end": "649120"
  },
  {
    "text": "note that this file is optional and if",
    "start": "649120",
    "end": "651360"
  },
  {
    "text": "it's not present a default api wise slo",
    "start": "651360",
    "end": "654560"
  },
  {
    "text": "will be used at this point we've defined",
    "start": "654560",
    "end": "658880"
  },
  {
    "text": "two fields in a tweet at the top left",
    "start": "658880",
    "end": "661680"
  },
  {
    "text": "you can see the graphql fragment for",
    "start": "661680",
    "end": "663440"
  },
  {
    "text": "retrieving the id string field",
    "start": "663440",
    "end": "665760"
  },
  {
    "text": "and below it you can see the graphql",
    "start": "665760",
    "end": "667600"
  },
  {
    "text": "fragment for returning the full text",
    "start": "667600",
    "end": "669360"
  },
  {
    "text": "field",
    "start": "669360",
    "end": "670399"
  },
  {
    "text": "part of the platform's build process is",
    "start": "670399",
    "end": "672240"
  },
  {
    "text": "to read through the entire config",
    "start": "672240",
    "end": "673920"
  },
  {
    "text": "directory",
    "start": "673920",
    "end": "674800"
  },
  {
    "text": "and generate platform fragments that can",
    "start": "674800",
    "end": "676720"
  },
  {
    "text": "be used whenever a tweet needs to be",
    "start": "676720",
    "end": "678640"
  },
  {
    "text": "rendered",
    "start": "678640",
    "end": "679760"
  },
  {
    "text": "we can now issue a single graphql query",
    "start": "679760",
    "end": "682240"
  },
  {
    "text": "with the platform tweet fragment shown",
    "start": "682240",
    "end": "684079"
  },
  {
    "text": "on the right",
    "start": "684079",
    "end": "685040"
  },
  {
    "text": "instead of needing to request two",
    "start": "685040",
    "end": "686640"
  },
  {
    "text": "separate graphql queries containing the",
    "start": "686640",
    "end": "688560"
  },
  {
    "text": "fragments on the left",
    "start": "688560",
    "end": "690480"
  },
  {
    "text": "we can now see the key role that graphql",
    "start": "690480",
    "end": "692720"
  },
  {
    "text": "plays in our component based",
    "start": "692720",
    "end": "694000"
  },
  {
    "text": "architecture",
    "start": "694000",
    "end": "694880"
  },
  {
    "text": "as we utilize graphql fragments as our",
    "start": "694880",
    "end": "697200"
  },
  {
    "text": "unit of rendering reuse",
    "start": "697200",
    "end": "699279"
  },
  {
    "text": "and if you're familiar with react our",
    "start": "699279",
    "end": "701360"
  },
  {
    "text": "setup is similar to how react relay",
    "start": "701360",
    "end": "703920"
  },
  {
    "text": "combines individual ui fragments into",
    "start": "703920",
    "end": "706880"
  },
  {
    "text": "larger fragments depending on which ui",
    "start": "706880",
    "end": "708959"
  },
  {
    "text": "components",
    "start": "708959",
    "end": "709760"
  },
  {
    "text": "are included in a composite ui page",
    "start": "709760",
    "end": "713040"
  },
  {
    "text": "next let's look at how we configure",
    "start": "713040",
    "end": "714839"
  },
  {
    "text": "selections recall that selections are",
    "start": "714839",
    "end": "717279"
  },
  {
    "text": "how resources are found in our apis",
    "start": "717279",
    "end": "720560"
  },
  {
    "text": "for this example we'll implement two",
    "start": "720560",
    "end": "722639"
  },
  {
    "text": "selections",
    "start": "722639",
    "end": "723680"
  },
  {
    "text": "tweet by id and tweet by search",
    "start": "723680",
    "end": "727279"
  },
  {
    "text": "first let's define a selection for",
    "start": "727279",
    "end": "729200"
  },
  {
    "text": "looking up a tweet by its id",
    "start": "729200",
    "end": "731600"
  },
  {
    "text": "on the left of your screen you can see",
    "start": "731600",
    "end": "733120"
  },
  {
    "text": "the opening pi.yaml file that defines",
    "start": "733120",
    "end": "735519"
  },
  {
    "text": "where the selection will be exposed in",
    "start": "735519",
    "end": "737519"
  },
  {
    "text": "our twitter api",
    "start": "737519",
    "end": "739120"
  },
  {
    "text": "the version prefix variable is a",
    "start": "739120",
    "end": "740959"
  },
  {
    "text": "placeholder that the platform fills in",
    "start": "740959",
    "end": "742800"
  },
  {
    "text": "for whatever major version of our api",
    "start": "742800",
    "end": "745600"
  },
  {
    "text": "is currently enabled and the id variable",
    "start": "745600",
    "end": "748959"
  },
  {
    "text": "is a path parameter which is a required",
    "start": "748959",
    "end": "750959"
  },
  {
    "text": "string that must conform to the",
    "start": "750959",
    "end": "752639"
  },
  {
    "text": "specified regex",
    "start": "752639",
    "end": "754720"
  },
  {
    "text": "on the top right you can see the",
    "start": "754720",
    "end": "756079"
  },
  {
    "text": "contents of the selection.graphql",
    "start": "756079",
    "end": "758160"
  },
  {
    "text": "file which specifies a graphql query for",
    "start": "758160",
    "end": "760880"
  },
  {
    "text": "retrieving tweets",
    "start": "760880",
    "end": "762800"
  },
  {
    "text": "note that the required string param in",
    "start": "762800",
    "end": "764880"
  },
  {
    "text": "the graphql query",
    "start": "764880",
    "end": "766480"
  },
  {
    "text": "corresponds to the required path",
    "start": "766480",
    "end": "768560"
  },
  {
    "text": "parameter defined in the openapi.yaml",
    "start": "768560",
    "end": "771120"
  },
  {
    "text": "file",
    "start": "771120",
    "end": "772399"
  },
  {
    "text": "we then call the tweak by rest id field",
    "start": "772399",
    "end": "774720"
  },
  {
    "text": "in twitter's graphql schema",
    "start": "774720",
    "end": "776480"
  },
  {
    "text": "which returns a tweet type and then",
    "start": "776480",
    "end": "779040"
  },
  {
    "text": "specify",
    "start": "779040",
    "end": "779920"
  },
  {
    "text": "that we wish a platform tweet to be",
    "start": "779920",
    "end": "782399"
  },
  {
    "text": "returned",
    "start": "782399",
    "end": "783760"
  },
  {
    "text": "recall that the platform tweet is",
    "start": "783760",
    "end": "785600"
  },
  {
    "text": "composed of all the data that's needed",
    "start": "785600",
    "end": "787839"
  },
  {
    "text": "to render a tweet",
    "start": "787839",
    "end": "789040"
  },
  {
    "text": "depending on the customer's request and",
    "start": "789040",
    "end": "792000"
  },
  {
    "text": "finally we have the selection.scala file",
    "start": "792000",
    "end": "794320"
  },
  {
    "text": "which is similar to route.scala which we",
    "start": "794320",
    "end": "796639"
  },
  {
    "text": "just looked at",
    "start": "796639",
    "end": "798800"
  },
  {
    "text": "putting all the pieces together the top",
    "start": "798800",
    "end": "800959"
  },
  {
    "text": "row on screen",
    "start": "800959",
    "end": "802240"
  },
  {
    "text": "shows an http request for slash two",
    "start": "802240",
    "end": "805040"
  },
  {
    "text": "tweets 20",
    "start": "805040",
    "end": "806240"
  },
  {
    "text": "that comes into the api platform",
    "start": "806240",
    "end": "808320"
  },
  {
    "text": "resulting in a graphql query",
    "start": "808320",
    "end": "810240"
  },
  {
    "text": "named tweet by id that's sent with a",
    "start": "810240",
    "end": "812560"
  },
  {
    "text": "graphql variable",
    "start": "812560",
    "end": "814399"
  },
  {
    "text": "that sets id to the tweet 20 found",
    "start": "814399",
    "end": "817519"
  },
  {
    "text": "in the incoming http request each",
    "start": "817519",
    "end": "820480"
  },
  {
    "text": "resource field then reads the graphql",
    "start": "820480",
    "end": "822720"
  },
  {
    "text": "response",
    "start": "822720",
    "end": "823440"
  },
  {
    "text": "and renders its field value resulting in",
    "start": "823440",
    "end": "826079"
  },
  {
    "text": "the render tweet seen in the bottom",
    "start": "826079",
    "end": "829440"
  },
  {
    "text": "next up we need to create a selection",
    "start": "829440",
    "end": "831600"
  },
  {
    "text": "for retrieving tweets by search",
    "start": "831600",
    "end": "834079"
  },
  {
    "text": "similar to tweet lookup by id we define",
    "start": "834079",
    "end": "836480"
  },
  {
    "text": "an open api.yama file",
    "start": "836480",
    "end": "838320"
  },
  {
    "text": "this time containing additional typed",
    "start": "838320",
    "end": "840320"
  },
  {
    "text": "and schema validated query params",
    "start": "840320",
    "end": "843800"
  },
  {
    "text": "selection.graphql is where we search for",
    "start": "843800",
    "end": "845680"
  },
  {
    "text": "tweets using a search query",
    "start": "845680",
    "end": "848079"
  },
  {
    "text": "and note that the place where with the",
    "start": "848079",
    "end": "850639"
  },
  {
    "text": "platform tweet fragment is put in the",
    "start": "850639",
    "end": "852560"
  },
  {
    "text": "query",
    "start": "852560",
    "end": "853440"
  },
  {
    "text": "that's where we expect tweets to be",
    "start": "853440",
    "end": "855040"
  },
  {
    "text": "returned and as a reminder our graphql",
    "start": "855040",
    "end": "858160"
  },
  {
    "text": "schema is based on our strato data",
    "start": "858160",
    "end": "860079"
  },
  {
    "text": "catalog system",
    "start": "860079",
    "end": "861120"
  },
  {
    "text": "so in this example when we query for the",
    "start": "861120",
    "end": "863360"
  },
  {
    "text": "match tweets graphql field",
    "start": "863360",
    "end": "865440"
  },
  {
    "text": "it's actually implemented as a thrift",
    "start": "865440",
    "end": "867279"
  },
  {
    "text": "service in this case named ie",
    "start": "867279",
    "end": "869920"
  },
  {
    "text": "id hunter which takes a search query",
    "start": "869920",
    "end": "872959"
  },
  {
    "text": "string",
    "start": "872959",
    "end": "873600"
  },
  {
    "text": "num results and a token as an input and",
    "start": "873600",
    "end": "876480"
  },
  {
    "text": "returns match tweet ids",
    "start": "876480",
    "end": "878160"
  },
  {
    "text": "and a cursor as output finally we have a",
    "start": "878160",
    "end": "881639"
  },
  {
    "text": "selection.scala file which has an",
    "start": "881639",
    "end": "883600"
  },
  {
    "text": "optional fail hole request method",
    "start": "883600",
    "end": "885600"
  },
  {
    "text": "defined to produce more detailed http",
    "start": "885600",
    "end": "888399"
  },
  {
    "text": "400 responses",
    "start": "888399",
    "end": "889920"
  },
  {
    "text": "based on what our thrift service returns",
    "start": "889920",
    "end": "892320"
  },
  {
    "text": "to us",
    "start": "892320",
    "end": "894240"
  },
  {
    "text": "putting all the pieces together if an",
    "start": "894240",
    "end": "896000"
  },
  {
    "text": "http request for slash 2",
    "start": "896000",
    "end": "898079"
  },
  {
    "text": "tweet search recent comes into the api",
    "start": "898079",
    "end": "900720"
  },
  {
    "text": "with a max results value that doesn't",
    "start": "900720",
    "end": "902720"
  },
  {
    "text": "validate against the open api",
    "start": "902720",
    "end": "904480"
  },
  {
    "text": "defined schema the no graphql request is",
    "start": "904480",
    "end": "907360"
  },
  {
    "text": "ever issued",
    "start": "907360",
    "end": "908160"
  },
  {
    "text": "and we directly return a 400 response",
    "start": "908160",
    "end": "910399"
  },
  {
    "text": "with a nice error message",
    "start": "910399",
    "end": "912800"
  },
  {
    "text": "and now let's look at a well-formed http",
    "start": "912800",
    "end": "915040"
  },
  {
    "text": "request",
    "start": "915040",
    "end": "916160"
  },
  {
    "text": "this time we issue a graphql request",
    "start": "916160",
    "end": "918160"
  },
  {
    "text": "with the graphql variables",
    "start": "918160",
    "end": "919760"
  },
  {
    "text": "populated from the http request query",
    "start": "919760",
    "end": "922160"
  },
  {
    "text": "params",
    "start": "922160",
    "end": "923680"
  },
  {
    "text": "and then at the bottom we render tweets",
    "start": "923680",
    "end": "925519"
  },
  {
    "text": "in the standard expected format with the",
    "start": "925519",
    "end": "927440"
  },
  {
    "text": "default id and text fields",
    "start": "927440",
    "end": "929600"
  },
  {
    "text": "hooray we've successfully built two new",
    "start": "929600",
    "end": "932079"
  },
  {
    "text": "api endpoints capable of selecting a",
    "start": "932079",
    "end": "934240"
  },
  {
    "text": "tweet by id",
    "start": "934240",
    "end": "935440"
  },
  {
    "text": "and by a search query but wait",
    "start": "935440",
    "end": "938800"
  },
  {
    "text": "a new requirement comes in and our",
    "start": "938800",
    "end": "940639"
  },
  {
    "text": "product managers want to start exposing",
    "start": "940639",
    "end": "942639"
  },
  {
    "text": "tweet metrics through our api",
    "start": "942639",
    "end": "945279"
  },
  {
    "text": "this new field will have a separate",
    "start": "945279",
    "end": "946800"
  },
  {
    "text": "engineering team working on it",
    "start": "946800",
    "end": "948399"
  },
  {
    "text": "and will be optionally returned only if",
    "start": "948399",
    "end": "950720"
  },
  {
    "text": "customers request it",
    "start": "950720",
    "end": "952480"
  },
  {
    "text": "this new field will be named public",
    "start": "952480",
    "end": "954399"
  },
  {
    "text": "metrics and on screen you can see how",
    "start": "954399",
    "end": "956720"
  },
  {
    "text": "this new field will be configured",
    "start": "956720",
    "end": "959120"
  },
  {
    "text": "as we see in with the tweet id and tweet",
    "start": "959120",
    "end": "961199"
  },
  {
    "text": "text fields",
    "start": "961199",
    "end": "962160"
  },
  {
    "text": "we first define a graphql fragment to",
    "start": "962160",
    "end": "964240"
  },
  {
    "text": "retrieve the data we need to render",
    "start": "964240",
    "end": "966480"
  },
  {
    "text": "and then we include a field.scala file",
    "start": "966480",
    "end": "969120"
  },
  {
    "text": "notably this time",
    "start": "969120",
    "end": "970320"
  },
  {
    "text": "setting always include to false with",
    "start": "970320",
    "end": "972959"
  },
  {
    "text": "this new field defined the api platform",
    "start": "972959",
    "end": "975279"
  },
  {
    "text": "will now make this field available to",
    "start": "975279",
    "end": "977120"
  },
  {
    "text": "any api customer that specifies",
    "start": "977120",
    "end": "979600"
  },
  {
    "text": "that they want this optional field",
    "start": "979600",
    "end": "982800"
  },
  {
    "text": "now since this new field is optional",
    "start": "982800",
    "end": "985040"
  },
  {
    "text": "we'll only want a query for it when an",
    "start": "985040",
    "end": "987040"
  },
  {
    "text": "api customer actually requests it",
    "start": "987040",
    "end": "989839"
  },
  {
    "text": "to do this let's look at the platform",
    "start": "989839",
    "end": "991839"
  },
  {
    "text": "tweet fragment that our platform now",
    "start": "991839",
    "end": "993680"
  },
  {
    "text": "generates",
    "start": "993680",
    "end": "995040"
  },
  {
    "text": "as you can see on the right our api",
    "start": "995040",
    "end": "996959"
  },
  {
    "text": "platform adds a graphql include",
    "start": "996959",
    "end": "999040"
  },
  {
    "text": "directive",
    "start": "999040",
    "end": "999920"
  },
  {
    "text": "on every part of the query associated",
    "start": "999920",
    "end": "1002240"
  },
  {
    "text": "with an optional field",
    "start": "1002240",
    "end": "1004240"
  },
  {
    "text": "in this case you could see that enabling",
    "start": "1004240",
    "end": "1006240"
  },
  {
    "text": "the public metrics field variable",
    "start": "1006240",
    "end": "1008079"
  },
  {
    "text": "will result in these public metric",
    "start": "1008079",
    "end": "1009759"
  },
  {
    "text": "fields being included",
    "start": "1009759",
    "end": "1012320"
  },
  {
    "text": "now some of you may be wondering why we",
    "start": "1012320",
    "end": "1014240"
  },
  {
    "text": "need to use an include directive instead",
    "start": "1014240",
    "end": "1016000"
  },
  {
    "text": "of just including these optional fields",
    "start": "1016000",
    "end": "1018160"
  },
  {
    "text": "in a query when a customer requests them",
    "start": "1018160",
    "end": "1021120"
  },
  {
    "text": "the reason",
    "start": "1021120",
    "end": "1021759"
  },
  {
    "text": "is that the twitter's graphql system",
    "start": "1021759",
    "end": "1024160"
  },
  {
    "text": "does not allow",
    "start": "1024160",
    "end": "1025120"
  },
  {
    "text": "arbitrary queries to be run in",
    "start": "1025120",
    "end": "1026798"
  },
  {
    "text": "production instead we utilize persistent",
    "start": "1026799",
    "end": "1029760"
  },
  {
    "text": "queries which require our api platform",
    "start": "1029760",
    "end": "1032000"
  },
  {
    "text": "to submit all queries at build time",
    "start": "1032000",
    "end": "1034720"
  },
  {
    "text": "in exchange for an operation id that is",
    "start": "1034720",
    "end": "1036959"
  },
  {
    "text": "then used in production",
    "start": "1036959",
    "end": "1039600"
  },
  {
    "text": "okay so next let's see what a customer",
    "start": "1039600",
    "end": "1041839"
  },
  {
    "text": "request looks like for this new optional",
    "start": "1041839",
    "end": "1043760"
  },
  {
    "text": "field",
    "start": "1043760",
    "end": "1044480"
  },
  {
    "text": "first up is tweet by id at the top of",
    "start": "1044480",
    "end": "1046558"
  },
  {
    "text": "the screen you can see an http request",
    "start": "1046559",
    "end": "1048720"
  },
  {
    "text": "requesting our new public metrics field",
    "start": "1048720",
    "end": "1051360"
  },
  {
    "text": "because an optional field is now",
    "start": "1051360",
    "end": "1052799"
  },
  {
    "text": "specified we set an additional graphql",
    "start": "1052799",
    "end": "1055039"
  },
  {
    "text": "variable named public metrics field to",
    "start": "1055039",
    "end": "1056960"
  },
  {
    "text": "trip",
    "start": "1056960",
    "end": "1057600"
  },
  {
    "text": "which will enable our graphql include",
    "start": "1057600",
    "end": "1059440"
  },
  {
    "text": "directives to include the additional",
    "start": "1059440",
    "end": "1061280"
  },
  {
    "text": "fields we need to query",
    "start": "1061280",
    "end": "1062960"
  },
  {
    "text": "we can skip over the graphql response",
    "start": "1062960",
    "end": "1065120"
  },
  {
    "text": "and then jump to the bottom",
    "start": "1065120",
    "end": "1066480"
  },
  {
    "text": "where we could see the individual",
    "start": "1066480",
    "end": "1068000"
  },
  {
    "text": "requested tweet now with the new public",
    "start": "1068000",
    "end": "1070080"
  },
  {
    "text": "metrics data included",
    "start": "1070080",
    "end": "1072320"
  },
  {
    "text": "next let's look at the tweet by search",
    "start": "1072320",
    "end": "1074400"
  },
  {
    "text": "request and at the top of the screen you",
    "start": "1074400",
    "end": "1076320"
  },
  {
    "text": "can see an http request with the new",
    "start": "1076320",
    "end": "1078400"
  },
  {
    "text": "public metrics field specified",
    "start": "1078400",
    "end": "1080559"
  },
  {
    "text": "once again the public metrics field",
    "start": "1080559",
    "end": "1082400"
  },
  {
    "text": "graphql variable is set to true",
    "start": "1082400",
    "end": "1084480"
  },
  {
    "text": "and then below we can see the search",
    "start": "1084480",
    "end": "1086080"
  },
  {
    "text": "results with the two default id and text",
    "start": "1086080",
    "end": "1088480"
  },
  {
    "text": "fields",
    "start": "1088480",
    "end": "1089280"
  },
  {
    "text": "along with the optionally requested",
    "start": "1089280",
    "end": "1091039"
  },
  {
    "text": "public metrics",
    "start": "1091039",
    "end": "1092960"
  },
  {
    "text": "these examples hopefully illustrate",
    "start": "1092960",
    "end": "1094880"
  },
  {
    "text": "where our api platform",
    "start": "1094880",
    "end": "1096320"
  },
  {
    "text": "really shines in letting individual",
    "start": "1096320",
    "end": "1098320"
  },
  {
    "text": "developer teams focus on specific api",
    "start": "1098320",
    "end": "1101200"
  },
  {
    "text": "components in this case adding a new",
    "start": "1101200",
    "end": "1103280"
  },
  {
    "text": "tweet field",
    "start": "1103280",
    "end": "1104720"
  },
  {
    "text": "the platform then combines all the",
    "start": "1104720",
    "end": "1106559"
  },
  {
    "text": "components together to ensure",
    "start": "1106559",
    "end": "1108320"
  },
  {
    "text": "consistent overall api so now that we've",
    "start": "1108320",
    "end": "1111919"
  },
  {
    "text": "satisfied all the product requirements",
    "start": "1111919",
    "end": "1114320"
  },
  {
    "text": "let's briefly look at how we alert and",
    "start": "1114320",
    "end": "1116080"
  },
  {
    "text": "monitor on our new apis",
    "start": "1116080",
    "end": "1119120"
  },
  {
    "text": "all components in our api platform have",
    "start": "1119120",
    "end": "1121280"
  },
  {
    "text": "service level objectives defined",
    "start": "1121280",
    "end": "1123360"
  },
  {
    "text": "and our platform ensures that each of",
    "start": "1123360",
    "end": "1125200"
  },
  {
    "text": "these components gets automated alerts",
    "start": "1125200",
    "end": "1127120"
  },
  {
    "text": "and monitoring dashboards generated for",
    "start": "1127120",
    "end": "1128960"
  },
  {
    "text": "them",
    "start": "1128960",
    "end": "1130000"
  },
  {
    "text": "and on screen you can see what a",
    "start": "1130000",
    "end": "1131520"
  },
  {
    "text": "pagerduty alert looks like for an api",
    "start": "1131520",
    "end": "1134840"
  },
  {
    "text": "component",
    "start": "1134840",
    "end": "1136320"
  },
  {
    "text": "then from this alert our customers can",
    "start": "1136320",
    "end": "1138320"
  },
  {
    "text": "click through to a grafana slo dashboard",
    "start": "1138320",
    "end": "1140960"
  },
  {
    "text": "showing the status of their long-term",
    "start": "1140960",
    "end": "1143039"
  },
  {
    "text": "slo and the various errors scoped down",
    "start": "1143039",
    "end": "1145760"
  },
  {
    "text": "to",
    "start": "1145760",
    "end": "1146080"
  },
  {
    "text": "individual api components seen across",
    "start": "1146080",
    "end": "1149039"
  },
  {
    "text": "the last one hour",
    "start": "1149039",
    "end": "1150240"
  },
  {
    "text": "six hours and three day bird windows",
    "start": "1150240",
    "end": "1152720"
  },
  {
    "text": "which is what our alerts are based on",
    "start": "1152720",
    "end": "1155760"
  },
  {
    "text": "now i'd love to do an entire talk in",
    "start": "1155760",
    "end": "1157840"
  },
  {
    "text": "just this slide",
    "start": "1157840",
    "end": "1158960"
  },
  {
    "text": "but since i lack the time at the moment",
    "start": "1158960",
    "end": "1160720"
  },
  {
    "text": "to dive in much deeper",
    "start": "1160720",
    "end": "1162160"
  },
  {
    "text": "i'll quickly mention two things first",
    "start": "1162160",
    "end": "1165360"
  },
  {
    "text": "since each component in our api is owned",
    "start": "1165360",
    "end": "1167520"
  },
  {
    "text": "by a single team",
    "start": "1167520",
    "end": "1168880"
  },
  {
    "text": "we ensure that critical 24 7 pages are",
    "start": "1168880",
    "end": "1171600"
  },
  {
    "text": "only dispatched for problems that a team",
    "start": "1171600",
    "end": "1173679"
  },
  {
    "text": "controls",
    "start": "1173679",
    "end": "1174799"
  },
  {
    "text": "for example if the tweet public metrics",
    "start": "1174799",
    "end": "1177520"
  },
  {
    "text": "field starts failing",
    "start": "1177520",
    "end": "1178720"
  },
  {
    "text": "which causes the entire tweet by id and",
    "start": "1178720",
    "end": "1180720"
  },
  {
    "text": "tweet by search rats to fail",
    "start": "1180720",
    "end": "1182640"
  },
  {
    "text": "then the field owner will be paged and",
    "start": "1182640",
    "end": "1184799"
  },
  {
    "text": "woken up",
    "start": "1184799",
    "end": "1185840"
  },
  {
    "text": "but will never wake up the route owners",
    "start": "1185840",
    "end": "1188160"
  },
  {
    "text": "as there would be nothing actionable for",
    "start": "1188160",
    "end": "1190000"
  },
  {
    "text": "them to do secondly",
    "start": "1190000",
    "end": "1192480"
  },
  {
    "text": "for deciding and when to alert on issues",
    "start": "1192480",
    "end": "1194960"
  },
  {
    "text": "we use the multiple burn rates alert",
    "start": "1194960",
    "end": "1196960"
  },
  {
    "text": "technique from google's excellent book",
    "start": "1196960",
    "end": "1198880"
  },
  {
    "text": "titled",
    "start": "1198880",
    "end": "1199440"
  },
  {
    "text": "the site reliability workbook and i'd",
    "start": "1199440",
    "end": "1201760"
  },
  {
    "text": "highly recommend checking out this book",
    "start": "1201760",
    "end": "1203600"
  },
  {
    "text": "to learn more about this powerful",
    "start": "1203600",
    "end": "1205280"
  },
  {
    "text": "technique",
    "start": "1205280",
    "end": "1207360"
  },
  {
    "text": "in closing thanks for joining me as we",
    "start": "1207360",
    "end": "1209520"
  },
  {
    "text": "walk through a brief history of",
    "start": "1209520",
    "end": "1210799"
  },
  {
    "text": "twitter's apis",
    "start": "1210799",
    "end": "1212159"
  },
  {
    "text": "followed by why we built the api",
    "start": "1212159",
    "end": "1213919"
  },
  {
    "text": "platform and then finished off with a",
    "start": "1213919",
    "end": "1215919"
  },
  {
    "text": "handful of real world api examples",
    "start": "1215919",
    "end": "1219120"
  },
  {
    "text": "for twitter this new api platform is",
    "start": "1219120",
    "end": "1221520"
  },
  {
    "text": "just the start of our journey",
    "start": "1221520",
    "end": "1222880"
  },
  {
    "text": "and our work is far from done notably we",
    "start": "1222880",
    "end": "1226000"
  },
  {
    "text": "have",
    "start": "1226000",
    "end": "1226320"
  },
  {
    "text": "many more existing endpoints to migrate",
    "start": "1226320",
    "end": "1228559"
  },
  {
    "text": "and entirely new public endpoints to",
    "start": "1228559",
    "end": "1230400"
  },
  {
    "text": "build",
    "start": "1230400",
    "end": "1231600"
  },
  {
    "text": "and yes if you're keeping track us",
    "start": "1231600",
    "end": "1233679"
  },
  {
    "text": "migrating existing v11 endpoints to v2",
    "start": "1233679",
    "end": "1237120"
  },
  {
    "text": "does mean that twitter is currently in",
    "start": "1237120",
    "end": "1238880"
  },
  {
    "text": "the midst of our third major api",
    "start": "1238880",
    "end": "1240960"
  },
  {
    "text": "migration",
    "start": "1240960",
    "end": "1242159"
  },
  {
    "text": "so here's hoping good things really come",
    "start": "1242159",
    "end": "1244320"
  },
  {
    "text": "in threes",
    "start": "1244320",
    "end": "1245679"
  },
  {
    "text": "thank you",
    "start": "1245679",
    "end": "1249840"
  }
]