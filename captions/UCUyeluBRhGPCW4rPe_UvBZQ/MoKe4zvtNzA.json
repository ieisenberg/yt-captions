[
  {
    "text": "what color is your function I don't know about you but nothing gets me going in",
    "start": "60",
    "end": "5940"
  },
  {
    "text": "the morning like a good old-fashioned programming language rant okay okay okay okay okay guess who just turned off",
    "start": "5940",
    "end": "11880"
  },
  {
    "text": "alerts this guy press the like button uh it stirs the blood to see someone skewer",
    "start": "11880",
    "end": "17880"
  },
  {
    "text": "one of those blub languages the hell's a blood language",
    "start": "17880",
    "end": "25580"
  },
  {
    "text": "okay I don't wanna I don't want to find out what a blood language is I can't do that I can't do that uh the plebians use",
    "start": "29340",
    "end": "34800"
  },
  {
    "text": "muddling through their day with it between uh furative visits to stack Overflow I think that's a reference to",
    "start": "34800",
    "end": "40680"
  },
  {
    "text": "JavaScript JavaScript I love it meanwhile you and I only use the most enlightened of",
    "start": "40680",
    "end": "47040"
  },
  {
    "text": "languages Sizzle sharp chisel",
    "start": "47040",
    "end": "51660"
  },
  {
    "text": "tools designed for manicured hands of expert crafts persons such as ourselves",
    "start": "52640",
    "end": "57840"
  },
  {
    "text": "okay that's pretty funny uh of course as the author of said uh",
    "start": "57840",
    "end": "63359"
  },
  {
    "text": "screed I run a risk the language I mock could be the one you like without realizing it I could have let the rabble",
    "start": "63359",
    "end": "70260"
  },
  {
    "text": "into my blog pitchforks and torches at the ready and my foolhardy pamphlet could draw their ire",
    "start": "70260",
    "end": "77640"
  },
  {
    "text": "it's true I'm going to cut the music because one time I ruined a recording because of it to protect myself from the",
    "start": "77640",
    "end": "82799"
  },
  {
    "text": "heat of those flames and to avoid offending your possible delicate sensibilities instead I'll rant about",
    "start": "82799",
    "end": "88140"
  },
  {
    "text": "the language I just made up a straw man whose sole purpose is to set a flame okay okay okay I know this seems",
    "start": "88140",
    "end": "94860"
  },
  {
    "text": "pointless right trust me by the end you'll see whose face or faces have been painted on this straw Noggin",
    "start": "94860",
    "end": "102920"
  },
  {
    "text": "okay I'm kind of curious now now you got you got me tickled okay you got me tickled learning an entire new crappy",
    "start": "104220",
    "end": "109560"
  },
  {
    "text": "language just for a blog is a tall order so let's say most let's see let's just say it's mostly similar to the one you",
    "start": "109560",
    "end": "114600"
  },
  {
    "text": "and I already know we'll say it has syntax sort of like JS curly braces and semicolons if Wows Etc the lingua Franca",
    "start": "114600",
    "end": "121979"
  },
  {
    "text": "of the programming Grotto uh I'm picking up JS not because that's what the post is about it's just that it's the",
    "start": "121979",
    "end": "127320"
  },
  {
    "text": "language you statistically representation of the average reader are most likely to be able to grock viola",
    "start": "127320",
    "end": "134239"
  },
  {
    "text": "foreign by the way this is a beautiful sentence okay if you don't love this if you",
    "start": "141959",
    "end": "149640"
  },
  {
    "text": "aren't in love with what you just read you're crazy okay I'm not in love with your color scheme uh what what is this",
    "start": "149640",
    "end": "155520"
  },
  {
    "text": "what is that what is what is this is this because I'm using dark readers am I screwing up your color here hold on",
    "start": "155520",
    "end": "161099"
  },
  {
    "text": "goodness uh we're gonna keep it like this uh just because our let's see because our straw man is a modern shitty",
    "start": "161099",
    "end": "166440"
  },
  {
    "text": "language we also have first class functions so",
    "start": "166440",
    "end": "171480"
  },
  {
    "text": "you can make something like this uh filter night nice kerning bro",
    "start": "171480",
    "end": "176580"
  },
  {
    "text": "hey bro nice kerning uh uh why why is this so effed up but this",
    "start": "176580",
    "end": "182640"
  },
  {
    "text": "isn't what happened there what happened to this filter anyways filter blah blah blah blah blah blah",
    "start": "182640",
    "end": "189660"
  },
  {
    "text": "blah nobody cares this is one of those higher order functions and like the name implies they are classy uh as all get",
    "start": "189660",
    "end": "196560"
  },
  {
    "text": "out and super useful you're probably used to uh used to them for mucking around with collections but once you",
    "start": "196560",
    "end": "202379"
  },
  {
    "text": "internalize the concept you start using them damn near everywhere is this a higher order function",
    "start": "202379",
    "end": "208019"
  },
  {
    "text": "I don't think this is a higher order function right isn't a higher order function a function that returns a function",
    "start": "208019",
    "end": "214440"
  },
  {
    "text": "or am I completely wrong on that isn't this just a function that uses functions like this itself isn't a higher order",
    "start": "214440",
    "end": "221340"
  },
  {
    "text": "wouldn't you actually have something called filter that you pass in a predicate to and then returns a function",
    "start": "221340",
    "end": "226799"
  },
  {
    "text": "that you can pass any collection to so if you use a function you're a higher order function I think you guys are",
    "start": "226799",
    "end": "232680"
  },
  {
    "text": "wrong you're thinking of curing yes curing creates higher order functions if I just higher order dummy okay whatever I'm too",
    "start": "232680",
    "end": "240659"
  },
  {
    "text": "stupid to understand this uh is uh let's say hi okay okay okay hold on before we continue on let's just settle the debate",
    "start": "240659",
    "end": "247200"
  },
  {
    "text": "let's just settle the debate okay we're gonna just settle the debate right here right now uh new poll",
    "start": "247200",
    "end": "254400"
  },
  {
    "text": "higher order function simply has to take in function",
    "start": "254400",
    "end": "260820"
  },
  {
    "text": "must return function okay so that's 50 right which means that I'm 100 wrong",
    "start": "260820",
    "end": "266160"
  },
  {
    "text": "okay cool cool hey cool this is one of those higher order functions and like the name implies they are classy as all",
    "start": "266160",
    "end": "273479"
  },
  {
    "text": "get out and super useful you're probably used to uh to them for mucking around with collections but once you",
    "start": "273479",
    "end": "278699"
  },
  {
    "text": "internalize the concepts start using them damn near Everywhere by the way this is like the bane of my existence",
    "start": "278699",
    "end": "284400"
  },
  {
    "text": "when you're debugging code where people are just like I I dude sometimes the debugging can be",
    "start": "284400",
    "end": "291600"
  },
  {
    "text": "such a pain in the ass it can be very ass painting I I know you",
    "start": "291600",
    "end": "297000"
  },
  {
    "text": "functional Bros out there are just like currying as for you occurring as the Lord's language well I'm not as smart as",
    "start": "297000",
    "end": "302460"
  },
  {
    "text": "you it feels hard sometimes when you have a function that's Curry taking in functions that are also occurred and",
    "start": "302460",
    "end": "308160"
  },
  {
    "text": "you're trying to figure out who is the one that done [ __ ] up okay it's hard",
    "start": "308160",
    "end": "313199"
  },
  {
    "text": "sometimes it's hard for us small brains okay a small tiny brains find that very",
    "start": "313199",
    "end": "319199"
  },
  {
    "text": "hard okay a fun Funk Funk Funk is a hard function to understand",
    "start": "319199",
    "end": "325638"
  },
  {
    "text": "uh let's see maybe in your testing framework and apple it ain't no orange Apple not to be an orange fax or would",
    "start": "325740",
    "end": "332280"
  },
  {
    "text": "you need to parse some data uh tokens match token left bracket consume token right bracket hell yeah uh so to go",
    "start": "332280",
    "end": "339000"
  },
  {
    "text": "let's see so so you go to town and write all sorts of awesome reusable libraries and applications passing around functions calling functions returning",
    "start": "339000",
    "end": "345539"
  },
  {
    "text": "functions functapalooza absolutely this was Netflix app at one point what color is your function except wait here's",
    "start": "345539",
    "end": "352259"
  },
  {
    "text": "where our language gets screwed it has this one peculiar feature every function has a color and each function Anonymous",
    "start": "352259",
    "end": "358139"
  },
  {
    "text": "callback a regular named one is either red or blue instead of a single function keyword there are two blue function red",
    "start": "358139",
    "end": "364979"
  },
  {
    "text": "function this is a blue function this is a red function there are no colorless functions in the language want to make a",
    "start": "364979",
    "end": "371340"
  },
  {
    "text": "function gotta pick a color then's the rules and actually there are a couple more rules you have to follow too the",
    "start": "371340",
    "end": "377520"
  },
  {
    "text": "way you can call a function depends on its color imagine blue call syntax and a red call syntax something like this okay",
    "start": "377520",
    "end": "384539"
  },
  {
    "text": "so I I think we can I think we can clearly see where this is going blue",
    "start": "384539",
    "end": "389699"
  },
  {
    "text": "being one of these being synchronous and one being async right I think I I believe I've heard this before I've",
    "start": "389699",
    "end": "395100"
  },
  {
    "text": "again I've never really read into this so it just feels exciting when calling a function you need you need to use the",
    "start": "395100",
    "end": "400620"
  },
  {
    "text": "call that corresponds to the color uh if you get it wrong call a red function with a blue after the parenthesis",
    "start": "400620",
    "end": "406860"
  },
  {
    "text": "parenthesis or vice versa it does something bad dredge up some long Forgotten Nightmare from your childhood like a clown with the snakes for arms",
    "start": "406860",
    "end": "413460"
  },
  {
    "text": "hiding under your bed that jumps out of your monitor and sucks out your",
    "start": "413460",
    "end": "419720"
  },
  {
    "text": "I don't vitrius vitreous vitreous vitreous vitreous humor I",
    "start": "419759",
    "end": "427259"
  },
  {
    "text": "I've never heard this term used in this way is this a version of vitriol but used as an adjective",
    "start": "427259",
    "end": "434600"
  },
  {
    "text": "like a let's see like glass and an appearance or physical properties substance derive from something",
    "start": "435120",
    "end": "440940"
  },
  {
    "text": "containing glass I don't get that your see-through humor",
    "start": "440940",
    "end": "446520"
  },
  {
    "text": "I don't get it an annoying rule right oh and one more thing you can only call a red function from within another red",
    "start": "446520",
    "end": "452160"
  },
  {
    "text": "function you can call a blue function from within a red one that is kosher okay but you",
    "start": "452160",
    "end": "458639"
  },
  {
    "text": "can't go the other way around if you try to do this you're going to get a visit from the old spider mouth uh from",
    "start": "458639",
    "end": "463979"
  },
  {
    "text": "nightclown Good Old class good old classic spider mouth uh this makes writing higher order functions like our",
    "start": "463979",
    "end": "470639"
  },
  {
    "text": "filter example trick here we have to pick a color for it and that affects the colors of the functions we're allowed to",
    "start": "470639",
    "end": "475680"
  },
  {
    "text": "pass it in or pass to it the obvious solution is to make filter red that way it can take either red or blue functions",
    "start": "475680",
    "end": "481860"
  },
  {
    "text": "and call them but then we run into the next itchy spot in the hair hair shirt",
    "start": "481860",
    "end": "487020"
  },
  {
    "text": "that is this language the hair shirt okay I also don't know this term can someone explain to me what a hair shirt",
    "start": "487020",
    "end": "492780"
  },
  {
    "text": "is what a boring blog post this is incredible blog post",
    "start": "492780",
    "end": "499280"
  },
  {
    "text": "this is a great great blog post uh red functions are more painful to",
    "start": "501060",
    "end": "506160"
  },
  {
    "text": "call for now I won't precisely Define painful but just imagine that program would have to jump through some kind of annoying Hoops every time they call a",
    "start": "506160",
    "end": "512820"
  },
  {
    "text": "red function maybe it's really verbose or maybe you can't do it inside certain kinds of statements maybe you can only call them on line numbers that are prime",
    "start": "512820",
    "end": "519360"
  },
  {
    "text": "uh for those let's see a hair short is a bandana slash do-rag",
    "start": "519360",
    "end": "524820"
  },
  {
    "text": "what I've never heard that term uh what matters is that you decide to make a function red everyone using your",
    "start": "524820",
    "end": "530700"
  },
  {
    "text": "API will want to spit in your coffee or deposit some even less Savory fluids in",
    "start": "530700",
    "end": "535800"
  },
  {
    "text": "it oh vitreous humor is the fluid in your eye",
    "start": "535800",
    "end": "540899"
  },
  {
    "text": "oh okay alas a sadistic language designers and we all know programming",
    "start": "540899",
    "end": "545940"
  },
  {
    "text": "language designers are sadists don't we jabbed one final thorn in our side five some core Library functions are red",
    "start": "545940",
    "end": "551820"
  },
  {
    "text": "there are some functions built into the platform functions that we need to use that we are unable to write ourselves",
    "start": "551820",
    "end": "557339"
  },
  {
    "text": "that only come in red at this point a reasonable person might think the language hates us",
    "start": "557339",
    "end": "563779"
  },
  {
    "text": "that's actually pretty funny it's functional programming's fault you",
    "start": "568380",
    "end": "573480"
  },
  {
    "text": "might be thinking that the problem here is that we're trying to use higher order functions it just stops flouncing flouncing around and all of that",
    "start": "573480",
    "end": "579779"
  },
  {
    "text": "functional flippery and right normal Blue Collar first order functions like God intended we'd spare ourselves all",
    "start": "579779",
    "end": "585420"
  },
  {
    "text": "the headaches well I mean in some sense if you can if you can thread you can do this right if",
    "start": "585420",
    "end": "591240"
  },
  {
    "text": "you can run your own threads you can just always always blue right you can just always blue the son of a [ __ ] and we can call it a day uh if only let's",
    "start": "591240",
    "end": "598019"
  },
  {
    "text": "see if we only call Blue functions make our function blue otherwise it make it red as long as we never make functions",
    "start": "598019",
    "end": "604380"
  },
  {
    "text": "that accept functions we don't have to worry about trying to be polymorphic over function color polychromatic or any",
    "start": "604380",
    "end": "610620"
  },
  {
    "text": "nonsense like that but alas higher order functions are just one example this problem is uh pervasive",
    "start": "610620",
    "end": "615899"
  },
  {
    "text": "uh anytime we want to break our program down into separate functions to get reused so for those that like",
    "start": "615899",
    "end": "622880"
  },
  {
    "text": "I know I I like this okay because this you know I've never really been one to formalize",
    "start": "624720",
    "end": "630120"
  },
  {
    "text": "a lot of my I just blew myself I've never been someone to formalize how I feel about things",
    "start": "630120",
    "end": "635820"
  },
  {
    "text": "uh I just have like these road maps in my head about when do I make a function async or not and I always have this just",
    "start": "635820",
    "end": "642180"
  },
  {
    "text": "just I just hate it because once I do it it spreads like you know it spreads everywhere and obviously this I assume",
    "start": "642180",
    "end": "648480"
  },
  {
    "text": "this is just simply an explanation of async and that's all it is it's just like man there's times where you want to",
    "start": "648480",
    "end": "655079"
  },
  {
    "text": "create something that's synchronous and then it has to be asynchronous and then it's just the worst because it gets",
    "start": "655079",
    "end": "660300"
  },
  {
    "text": "stuck in these weird constructs of the language you know and it just it just makes it so annoying sometimes for example let's say",
    "start": "660300",
    "end": "666720"
  },
  {
    "text": "we have a little nice blob of code that I don't know implements dykstra's algorithm over a graph representing how",
    "start": "666720",
    "end": "671760"
  },
  {
    "text": "much your social network are crushing on each other I spent way too long trying to decide what result would even",
    "start": "671760",
    "end": "677279"
  },
  {
    "text": "represent transitive undesirability what what later you end up needing to",
    "start": "677279",
    "end": "684600"
  },
  {
    "text": "use this same blob of code somewhere else you do the natural thing and hoist it into a separate function you call it from the old place and your new code",
    "start": "684600",
    "end": "690600"
  },
  {
    "text": "that uses it but what color should it be obviously you'll make it blue if you can but what if it uses some of those nasty",
    "start": "690600",
    "end": "696180"
  },
  {
    "text": "red only core libraries uh well what if the new place you want to call it is blue you'll have to turn it red then",
    "start": "696180",
    "end": "702180"
  },
  {
    "text": "you'll have to turn the function that calls it red uh no matter what you'll you'll have to think about some color",
    "start": "702180",
    "end": "707880"
  },
  {
    "text": "constantly it will be the sand in your swimsuit on the beach vacation of development",
    "start": "707880",
    "end": "714380"
  },
  {
    "text": "fact of course I I mean this is another reason I mean really what this is is speaking about like if you just drop the",
    "start": "716760",
    "end": "722399"
  },
  {
    "text": "idea of what color is your function the thing the thing that's really hard and this is one thing that I find",
    "start": "722399",
    "end": "728279"
  },
  {
    "text": "annoying about rust is that when you have a value that you have to lift it kind of starts spreading that value",
    "start": "728279",
    "end": "735120"
  },
  {
    "text": "so like error handling once you have a function that needs air handling you have to lift the value or",
    "start": "735120",
    "end": "742380"
  },
  {
    "text": "you use syntax and it just keeps on it keeps on going this thing and",
    "start": "742380",
    "end": "747839"
  },
  {
    "text": "I can find it I I can definitely understand why people find it annoying because or else you have to start doing",
    "start": "747839",
    "end": "753000"
  },
  {
    "text": "this like if else business and it doesn't quite work that well especially with the borrow Checker just makes it a huge pain in the ass",
    "start": "753000",
    "end": "759860"
  },
  {
    "text": "it can be very frustrating like I totally get this even Beyond just async await right",
    "start": "760040",
    "end": "766260"
  },
  {
    "text": "um it's just like observables observables do the exact same thing it's an extremely extremely leaky interface",
    "start": "766260",
    "end": "772620"
  },
  {
    "text": "that once you start using them it just goes everywhere and you can't help it because one function that has it",
    "start": "772620",
    "end": "778740"
  },
  {
    "text": "the rest of the functions must have it of course I'm not really talking about color here am I it's just an allegory a",
    "start": "778740",
    "end": "783779"
  },
  {
    "text": "literary trick the SN the snitches isn't about the stars on the bellies I don't even get that uh",
    "start": "783779",
    "end": "790680"
  },
  {
    "text": "wait what it's about race what the hell are we talking about by now you have a inkling of what color actually",
    "start": "790680",
    "end": "796019"
  },
  {
    "text": "represents if not here here's the big reveal red functions are asynchronous ones if you're programming in JavaScript",
    "start": "796019",
    "end": "801240"
  },
  {
    "text": "on node.js every time you define a function that returns a value by invoking a callback you just made a red function look back at that list of rules",
    "start": "801240",
    "end": "808200"
  },
  {
    "text": "and see how my metaphor Stacks up synchronous function return values async ones do not instead they invoke callbacks yep synchronous functions give",
    "start": "808200",
    "end": "814860"
  },
  {
    "text": "their result as a return value async functions give it by a callback you pass in this is before the time of",
    "start": "814860",
    "end": "820380"
  },
  {
    "text": "standardized syntax of async await exact same thing is it it's a doctor who book okay well",
    "start": "820380",
    "end": "826500"
  },
  {
    "text": "that I'm not a child I have I don't know okay I don't read Doctor Who because I'm not a baby okay and you know what I read",
    "start": "826500",
    "end": "832139"
  },
  {
    "text": "to my kids A Wheel of Time okay I don't read them Doctor Who or whatever it is Doctor whatever it is Doctor Who book that's not right either",
    "start": "832139",
    "end": "838680"
  },
  {
    "text": "what the hell is it doctor soos as the Dr Seuss you mean not Doctor",
    "start": "838680",
    "end": "843899"
  },
  {
    "text": "Who Dr Seuss yeah okay I was about to say Doctor Who wait a second that's a completely",
    "start": "843899",
    "end": "849779"
  },
  {
    "text": "different doctor Wheel of Time hell yeah uh you can't call an async function from a synchronous one because you won't be",
    "start": "849779",
    "end": "855600"
  },
  {
    "text": "able to determine the results until the async one completes later correct async functions don't compose in Expressions",
    "start": "855600",
    "end": "860820"
  },
  {
    "text": "because of the callbacks uh have different error handling and can't be used with try catch okay well some of",
    "start": "860820",
    "end": "866519"
  },
  {
    "text": "this has changed but also not incorrect right so you can't chain async function still in JavaScript you have to do the",
    "start": "866519",
    "end": "872880"
  },
  {
    "text": "little you have to go full lisp on it and be like because they chose prefix uh syntax so it's like await this thing",
    "start": "872880",
    "end": "880019"
  },
  {
    "text": "parentheses to Json await that thing get this value like right like it just it",
    "start": "880019",
    "end": "886500"
  },
  {
    "text": "just grows uh notes hole stick is that the core libs are all asynchronous though they",
    "start": "886500",
    "end": "891779"
  },
  {
    "text": "dial that back by started adding sync yep they did when people talk about callback hell they're talking about how annoying it is to have red functions in",
    "start": "891779",
    "end": "898019"
  },
  {
    "text": "their language when the when they create 4089 libraries for doing asynchronous",
    "start": "898019",
    "end": "903480"
  },
  {
    "text": "programming",
    "start": "903480",
    "end": "905959"
  },
  {
    "text": "I don't think the author saw this one coming okay I don't think they saw that one coming",
    "start": "909600",
    "end": "916320"
  },
  {
    "text": "where it was actually going to effectively",
    "start": "916320",
    "end": "921500"
  },
  {
    "text": "13x side in functions make you crazy yeah I get that I prefer my sayadar functions uh yeah",
    "start": "921779",
    "end": "930600"
  },
  {
    "text": "should have should have should have saw that one coming should never put a language you should have put the ever-growing amount I mean he's very",
    "start": "930600",
    "end": "935760"
  },
  {
    "text": "flowery with his language as it is he could have made a creative ever growing uh they're trying to cope",
    "start": "935760",
    "end": "940920"
  },
  {
    "text": "at the library level with the problem that the language foisted upon them update nice hey nice comma hey nice comma bro",
    "start": "940920",
    "end": "950699"
  },
  {
    "text": "I I promise the future is better uh people in node Community have realized that callbacks are a pain for a long",
    "start": "950699",
    "end": "956459"
  },
  {
    "text": "time and have looked around for Solutions one technique that gets a bunch of people excited is promises which you may also know by their rapper",
    "start": "956459",
    "end": "962519"
  },
  {
    "text": "name Futures okay uh these are sort of jacked up rapper around callbacks and an",
    "start": "962519",
    "end": "967620"
  },
  {
    "text": "air handler if you think of passing a callback an error back to a function as a concept A promise is basically a",
    "start": "967620",
    "end": "973980"
  },
  {
    "text": "reification of that idea it's a first class object that represents asynchronous operation I jammed a bunch",
    "start": "973980",
    "end": "979500"
  },
  {
    "text": "of fancy PL languages language in that paragraph So it probably sounds like a sweet deal but it's basically snake oil",
    "start": "979500",
    "end": "985440"
  },
  {
    "text": "promises do make async code a little easier to write they can pose a bit better so rule four isn't quite so",
    "start": "985440",
    "end": "991320"
  },
  {
    "text": "onerous but honestly it's like the difference between being punched in the gut versus being punched in the privates",
    "start": "991320",
    "end": "998100"
  },
  {
    "text": "foreign",
    "start": "998100",
    "end": "1000279"
  },
  {
    "text": "statement oh my goodness I just love that",
    "start": "1006220",
    "end": "1014000"
  },
  {
    "text": "technically less painful yes but I don't think anyone should get really thrilled about the value proposition",
    "start": "1014000",
    "end": "1020980"
  },
  {
    "text": "oh this is this literally might be my favorite statement ever read like of all time you",
    "start": "1023860",
    "end": "1031579"
  },
  {
    "text": "can't still use them with the you still can't use them with the exception handling or other control flow statements uh you can now uh you still",
    "start": "1031579",
    "end": "1038058"
  },
  {
    "text": "can't call a function that returns a future from synchronous code well you can but if you do the person uh who",
    "start": "1038059",
    "end": "1043819"
  },
  {
    "text": "later maintains your code will invent a time machine travel back in time to the moment you did this and stab you in the face with a number two pencil yep you",
    "start": "1043819",
    "end": "1050780"
  },
  {
    "text": "still uh you're you've still divided your entire world into asynchronous and synchronous halves and all the misery that entails so even if your language",
    "start": "1050780",
    "end": "1057620"
  },
  {
    "text": "features promises or Futures uh its face looks an awful lot like one of those uh",
    "start": "1057620",
    "end": "1063799"
  },
  {
    "text": "one of my straw men oh gosh I couldn't read that thing its face looks an awful light off a lot like one on my straw man",
    "start": "1063799",
    "end": "1070160"
  },
  {
    "text": "okay goodness gracious yes even means Dart the language I work on that's why I'm so excited about the team are",
    "start": "1070160",
    "end": "1075919"
  },
  {
    "text": "experimenting with other concurrency models all right",
    "start": "1075919",
    "end": "1080080"
  },
  {
    "text": "I love JavaScript oh you do you love JavaScript too okay cool",
    "start": "1081020",
    "end": "1087820"
  },
  {
    "text": "that's neat uh c-sharp programmers are probably feeling pretty smug right now uh condition they've increasingly Fallen",
    "start": "1091640",
    "end": "1097940"
  },
  {
    "text": "prey to as the heisen uh the hilsenberg is that's what I don't even know how to say that word",
    "start": "1097940",
    "end": "1103960"
  },
  {
    "text": "hillsborg and Company have uh peeled sweet feature after sweet feature into the language in C sharp you can use a",
    "start": "1103960",
    "end": "1110120"
  },
  {
    "text": "weight keyword to invoke an asynchronous function yeah let's uh this lets you this lets you make asynchronous calls",
    "start": "1110120",
    "end": "1116480"
  },
  {
    "text": "just as easily you can synchronous ones with a tiny addition of a cute little keyword uh you can Nest await calls and",
    "start": "1116480",
    "end": "1122600"
  },
  {
    "text": "expressions you can use them in exception handling code okay so this is all done in JavaScript now obviously stuff uh stuff them into control flow go",
    "start": "1122600",
    "end": "1129200"
  },
  {
    "text": "nuts Make It Rain await calls like they are dollars in the advance you got for your new rap album async await is nice",
    "start": "1129200",
    "end": "1135679"
  },
  {
    "text": "which is why we're adding it to Dart it makes it a lot easier to write asynchronous code you know uh but is",
    "start": "1135679",
    "end": "1141919"
  },
  {
    "text": "coming uh it is but you still have to divide the world into those are async functions uh those async functions are",
    "start": "1141919",
    "end": "1148400"
  },
  {
    "text": "easy to write but they're still async functions you've got uh you've still got two colors async await solves an annoying rule four uh they make red",
    "start": "1148400",
    "end": "1155240"
  },
  {
    "text": "functions not much worse to call than blue ones but all of the other rules still apply synchronous functions return",
    "start": "1155240",
    "end": "1160760"
  },
  {
    "text": "values yep uh sync functions uh let's see yep uh you need the colon async function you've got this wrapper object",
    "start": "1160760",
    "end": "1166520"
  },
  {
    "text": "when you actually want T yep yep aside from the liberal garnish of a weight we did uh we did fix this C Sharp's core",
    "start": "1166520",
    "end": "1173600"
  },
  {
    "text": "library is actually older than I think so I guess I'll never have this problem yep I mean this is all true this is all very",
    "start": "1173600",
    "end": "1179419"
  },
  {
    "text": "very true it is better I will uh I will take async await over a bear callbacks or Futures any day of the week yep but",
    "start": "1179419",
    "end": "1185780"
  },
  {
    "text": "we're lying to ourselves if we think all of our troubles are gone as soon as you start trying to write higher order functions and reuse code you're right",
    "start": "1185780",
    "end": "1192260"
  },
  {
    "text": "back to realizing color is still there bleeding all over your code base yes this is very true as someone who has to",
    "start": "1192260",
    "end": "1197480"
  },
  {
    "text": "do this I I really do hope I like async iterators those are pretty",
    "start": "1197480",
    "end": "1202520"
  },
  {
    "text": "cool in in JavaScript they they tend to at least fix some of the issues because then you can do a little bit more but it",
    "start": "1202520",
    "end": "1209480"
  },
  {
    "text": "still is kind of a pain in the ass uh ugh uh what language isn't colored so",
    "start": "1209480",
    "end": "1215780"
  },
  {
    "text": "JS Dart C sharp python have this problem coffeescript and most other languages that compile to JavaScript to do too which is why Dart inherited it I think",
    "start": "1215780",
    "end": "1222980"
  },
  {
    "text": "even closure script has an issue though they've tried really hard to push against it in their core async stuff want to know which one doesn't Java I",
    "start": "1222980",
    "end": "1230539"
  },
  {
    "text": "know right how often do you say yeah Java is the the one that really does it right",
    "start": "1230539",
    "end": "1237580"
  },
  {
    "text": "but there you go in their defense they're actively trying to correct this oversight by moving Futures in async IO",
    "start": "1238039",
    "end": "1243679"
  },
  {
    "text": "it's like a race to the bottom c-sharp also can avoid this problem too they've opted into having color uh",
    "start": "1243679",
    "end": "1250100"
  },
  {
    "text": "before they added async await and all their task T stuff you could just use regular sync apis three more languages",
    "start": "1250100",
    "end": "1256940"
  },
  {
    "text": "that don't have this problem go Lua and Ruby yeah uh any guess what they have in",
    "start": "1256940",
    "end": "1263360"
  },
  {
    "text": "common threads and more precisely multiple independent call Stacks that can be switched between it isn't",
    "start": "1263360",
    "end": "1269000"
  },
  {
    "text": "strictly necessary for them to be operating system threads go routines go routines and go co-routines in Lua and",
    "start": "1269000",
    "end": "1274640"
  },
  {
    "text": "fibers and Ruby are perfectly adequate yep yes yes go routines just make it super simple right you don't really have",
    "start": "1274640",
    "end": "1280880"
  },
  {
    "text": "to think about anything and I think that that is really nice I actually really like this fact",
    "start": "1280880",
    "end": "1286880"
  },
  {
    "text": "go does have the problem your functions that return channels well no Channel I don't think that's",
    "start": "1286880",
    "end": "1293179"
  },
  {
    "text": "really a problem right a channel is just a concept that doesn't have anything to do with with",
    "start": "1293179",
    "end": "1299240"
  },
  {
    "text": "with threading or coloring",
    "start": "1299240",
    "end": "1302740"
  },
  {
    "text": "I don't think they do at least I'd have to think about it but I'm pretty sure threads or channels are just a little bit different",
    "start": "1307100",
    "end": "1312440"
  },
  {
    "text": "maybe you're right waiting on a channel is coloring no",
    "start": "1312440",
    "end": "1318320"
  },
  {
    "text": "because you don't have to call anything differently that's the point is that when a function is red or blue there's",
    "start": "1318320",
    "end": "1324440"
  },
  {
    "text": "specific syntax to calling that function that's different so you have async await",
    "start": "1324440",
    "end": "1329659"
  },
  {
    "text": "or in a rust you have dot await or in whatever other crazy language you have some other operator right uh you have",
    "start": "1329659",
    "end": "1336320"
  },
  {
    "text": "I'm sure there's one in Zig that I just don't even know about but nonetheless you have some special syntax you have to",
    "start": "1336320",
    "end": "1342320"
  },
  {
    "text": "apply to the situation a channel though you literally call it and return it no differencing to your",
    "start": "1342320",
    "end": "1349280"
  },
  {
    "text": "function and it goes and it does its own thing and then comes back and you get the value back out right",
    "start": "1349280",
    "end": "1355520"
  },
  {
    "text": "so it's like you don't have to do any sort of special syntaxing they just have a lift operator that freezes your",
    "start": "1355520",
    "end": "1361580"
  },
  {
    "text": "current thread until it's done which I think is that's that's perfect right I think that's perfectly fine",
    "start": "1361580",
    "end": "1368980"
  },
  {
    "text": "I think that's perfectly and completely acceptable as as it is so I don't think goes colored",
    "start": "1371299",
    "end": "1377659"
  },
  {
    "text": "I'm pretty sure go is not a colored language the remembrance of the operations of the past the fundamental problem is how do you pick up where you",
    "start": "1377659",
    "end": "1383539"
  },
  {
    "text": "left off when an operation completes you build something let's you build something up let's see oh my goodness you've built up some big call stack and",
    "start": "1383539",
    "end": "1389960"
  },
  {
    "text": "then you call some i o operation for performance that operation uses the operating system's underlying asynchronous API you cannot wait for it",
    "start": "1389960",
    "end": "1397460"
  },
  {
    "text": "to complete because you it won't you have to return all the way back to your languages event Loop and give the OS some time to spin before it will be done",
    "start": "1397460",
    "end": "1404480"
  },
  {
    "text": "once operation completes you need to resume what you were doing the usual way a language remembers where it was is the",
    "start": "1404480",
    "end": "1410720"
  },
  {
    "text": "call stack that tracks all the functions that are currently being invoked and where the instruction pointers is in",
    "start": "1410720",
    "end": "1416179"
  },
  {
    "text": "each one yeah but let's see so this is just basic explanation of an event Loop so that's why you can't that's why and",
    "start": "1416179",
    "end": "1422299"
  },
  {
    "text": "that's why you can't like you can't do a function with a callback and then",
    "start": "1422299",
    "end": "1429620"
  },
  {
    "text": "do a while loop right afterwards it will never get called it's because you have to return control to the event",
    "start": "1429620",
    "end": "1435559"
  },
  {
    "text": "Loop before anything can even kick off or do anything because that's just that's JavaScript I love it uh but to do async",
    "start": "1435559",
    "end": "1443240"
  },
  {
    "text": "i o you have to unwind and discard the entire C call stack uh kind of a catch-22. you have to let's see you can",
    "start": "1443240",
    "end": "1448640"
  },
  {
    "text": "do super fast I O you just can't do anything with the result every language that has async i o in its core or in",
    "start": "1448640",
    "end": "1454760"
  },
  {
    "text": "this case JS the browser's event Loop copes with this in some way node with its of ever marching to the right",
    "start": "1454760",
    "end": "1460100"
  },
  {
    "text": "callbacks uh stuff all those call frames enclosures yep that's all that happens",
    "start": "1460100",
    "end": "1466659"
  },
  {
    "text": "that's all that happens each of those uh functions Expressions closes over the surrounding context that moves the parameter like ice cream and caramel off",
    "start": "1467179",
    "end": "1473780"
  },
  {
    "text": "the call stack and into the Heap well no that's not true that's when it comes to this that's that's not what ever happens",
    "start": "1473780",
    "end": "1479900"
  },
  {
    "text": "in JavaScript obviously with JavaScript it's always on the it's always in the Heap I mean JavaScript is always Heap",
    "start": "1479900",
    "end": "1486860"
  },
  {
    "text": "always Heap that's just all JavaScript does uh all the call stack into the Heap when the outer function Returns the call",
    "start": "1486860",
    "end": "1492320"
  },
  {
    "text": "stack is trashed it's cool the data is still floating around the Heap uh the problem is that you have to manually reify every damn one of these steps",
    "start": "1492320",
    "end": "1499280"
  },
  {
    "text": "there's actually a name for this transformation continue it continuation passing style it was invented by a",
    "start": "1499280",
    "end": "1505100"
  },
  {
    "text": "language hackers in the 70s as an intermediate representation to use in the internals of their compilers it's a",
    "start": "1505100",
    "end": "1510799"
  },
  {
    "text": "really bizarre way to represent code that happens to make some compiler optimizations easier to do oh",
    "start": "1510799",
    "end": "1517100"
  },
  {
    "text": "that's weird uh no one ever thought for let's see no no one ever for a second",
    "start": "1517100",
    "end": "1522559"
  },
  {
    "text": "thought uh that a programmer would write actual code like that and then node came",
    "start": "1522559",
    "end": "1527600"
  },
  {
    "text": "along and all of a sudden here we are pretending to be a compiler back ends where did we go wrong",
    "start": "1527600",
    "end": "1534159"
  },
  {
    "text": "that's that's a pretty great statement uh no that promises and Futures don't actually buy you anything either if you",
    "start": "1536299",
    "end": "1542179"
  },
  {
    "text": "use them you know you're still hand creating giant piles of function literals and you're passing them to the dot then instead of uh to the",
    "start": "1542179",
    "end": "1548299"
  },
  {
    "text": "asynchronous function itself yes this is true you're you're not you're not buying anything here",
    "start": "1548299",
    "end": "1553580"
  },
  {
    "text": "awaiting is generated solution async away does help if you peel back the compiler skull and see what it's doing",
    "start": "1553580",
    "end": "1558860"
  },
  {
    "text": "in there uh when it hits a weight you can see that it's actually doing uh the CPS transform that's why you need to use",
    "start": "1558860",
    "end": "1564500"
  },
  {
    "text": "a weight in C sharp it's a clue to the compiler to say break the function in half here everything after the await",
    "start": "1564500",
    "end": "1570380"
  },
  {
    "text": "gets hoisted into a new function that the compiler synthesizes on your behalf yeah this is why async away didn't need",
    "start": "1570380",
    "end": "1576320"
  },
  {
    "text": "any runtime support in.net framework the compiler compiles it away in a series of change closures that it actually uh that",
    "start": "1576320",
    "end": "1582980"
  },
  {
    "text": "it can already handle interestingly closures themselves also don't need runtime support they get compiled into",
    "start": "1582980",
    "end": "1588500"
  },
  {
    "text": "Anonymous classes in C sharp the closures are really poor man's objects huh okay that's interesting that you didn't",
    "start": "1588500",
    "end": "1594679"
  },
  {
    "text": "yeah you didn't need a run time for that that's cool that's cool that they had a single weight without a run time",
    "start": "1594679",
    "end": "1601360"
  },
  {
    "text": "okay okay I didn't realize that when I built a compiler myself back in the day for uh mini Pascal we effectively did",
    "start": "1601400",
    "end": "1608779"
  },
  {
    "text": "this we could there was no because I built it for uh uh it was called IL back",
    "start": "1608779",
    "end": "1614179"
  },
  {
    "text": "in the day this was before llvm it was Microsoft's Intermediate Language so it's like a language to represents all",
    "start": "1614179",
    "end": "1620299"
  },
  {
    "text": "of its languages that it has to be compiled into this intermediate style that will then be compiled into the",
    "start": "1620299",
    "end": "1625940"
  },
  {
    "text": "correct Target and so we had to build a compiler for IL and IL didn't have",
    "start": "1625940",
    "end": "1631760"
  },
  {
    "text": "closure so what did we have to do we had to generate a whole bunch of like these",
    "start": "1631760",
    "end": "1637159"
  },
  {
    "text": "functions that you'd actually secretly pass a bunch of values to right and so",
    "start": "1637159",
    "end": "1643460"
  },
  {
    "text": "we had to like create a bunch of it it was fun it was a cool project it really taught me a lot about some really weird",
    "start": "1643460",
    "end": "1648919"
  },
  {
    "text": "things you might be wondering when am I going to bring up generators uh does your language have a yield keyword then",
    "start": "1648919",
    "end": "1654320"
  },
  {
    "text": "it can do something very similar in fact I believe generators in async await are isomorphic I've got a bit of code",
    "start": "1654320",
    "end": "1659779"
  },
  {
    "text": "floating around in some dark corner of my hard disk that implements a generator Style game Loop using only async await",
    "start": "1659779",
    "end": "1667340"
  },
  {
    "text": "I'm not sure if I think that's a good idea oh wait where was I all right so with callbacks promises a single weight",
    "start": "1667340",
    "end": "1672559"
  },
  {
    "text": "and generators are ultimately end up taking your asynchronous functions and sparing it out into a bunch of closures",
    "start": "1672559",
    "end": "1678200"
  },
  {
    "text": "that live over in the Heap yeah that's that's correct uh your function passes the outermost one into the runtime and",
    "start": "1678200",
    "end": "1684380"
  },
  {
    "text": "when you the event Loop or i o operation is done it invokes the function and you have to pick it up where you left it off but that means everything above you also",
    "start": "1684380",
    "end": "1691820"
  },
  {
    "text": "has to return you still have to unwind the whole stack yep every single time that's the only way to progress things forward uh that's just how event loops",
    "start": "1691820",
    "end": "1698240"
  },
  {
    "text": "work dog that's just how they work dog uh this is where the red function can only be called from Red functions rule comes from you have to a closure you",
    "start": "1698240",
    "end": "1704840"
  },
  {
    "text": "have to closer if I have the entire call stack all the way back to main or the event happen Handler",
    "start": "1704840",
    "end": "1710900"
  },
  {
    "text": "I know do you do you guys not know about this part",
    "start": "1710900",
    "end": "1716000"
  },
  {
    "text": "how many in chat really like how many in chat is this completely like novel concept to that have just never really",
    "start": "1716000",
    "end": "1721760"
  },
  {
    "text": "thought about this I think somebody literally just said observables for the win observables are",
    "start": "1721760",
    "end": "1728539"
  },
  {
    "text": "literally this multiplied observables are just as red",
    "start": "1728539",
    "end": "1737080"
  },
  {
    "text": "new to me really wow okay no idea anyways it is it observables aren't they",
    "start": "1738500",
    "end": "1745039"
  },
  {
    "text": "don't buy you anything in fact they just they just buy you a more complicated",
    "start": "1745039",
    "end": "1750320"
  },
  {
    "text": "version of this because now an observable isn't just a one-to-one operation it's actually a one-to-many",
    "start": "1750320",
    "end": "1757520"
  },
  {
    "text": "operation that's like an entire new level of complication",
    "start": "1757520",
    "end": "1763640"
  },
  {
    "text": "right when you have to handle the idea that your function could execute more than once or your return value could be",
    "start": "1763640",
    "end": "1769399"
  },
  {
    "text": "more than once it's like a whole thing it is an entire it's an entire thing I",
    "start": "1769399",
    "end": "1774980"
  },
  {
    "text": "enjoy piping go for it I'm too tired for this I'm gonna get the milk okay go go for it",
    "start": "1774980",
    "end": "1780020"
  },
  {
    "text": "buddy all right uh where are you",
    "start": "1780020",
    "end": "1785260"
  },
  {
    "text": "okay we are almost done here awesome okay reified reified uh call Stacks but if you have let's see but if you have",
    "start": "1786500",
    "end": "1792320"
  },
  {
    "text": "threads green or Os level you don't need to do that you can just suspend the entire uh thread and hop straight back to the OS or the event Loop without",
    "start": "1792320",
    "end": "1798919"
  },
  {
    "text": "having to return from all those functions yeah so this is exactly this is literally what I was saying",
    "start": "1798919",
    "end": "1804500"
  },
  {
    "text": "you could just always be blue and just have threads right that just works go is a language that does this most beautifully in my opinion as soon as you",
    "start": "1804500",
    "end": "1810980"
  },
  {
    "text": "do any i o operation it just Parks the go routine and resumes the other ones that aren't blocked on aisle I actually do think goat does this the best go",
    "start": "1810980",
    "end": "1817159"
  },
  {
    "text": "hands down just does this the best if that's why go I think is such a great language I just wish it had just such a",
    "start": "1817159",
    "end": "1823880"
  },
  {
    "text": "small amount of effort into go I think could make it so good if we just had slightly if we could just come up with a",
    "start": "1823880",
    "end": "1830899"
  },
  {
    "text": "convention that makes it easy to return errors if there errors right I know they're kind of working on it I know",
    "start": "1830899",
    "end": "1837020"
  },
  {
    "text": "there's been discusses of it just do what Zig did right try this function if",
    "start": "1837020",
    "end": "1842360"
  },
  {
    "text": "it returns an error for as the first argument or the last argument however you want to define the convention then",
    "start": "1842360",
    "end": "1847760"
  },
  {
    "text": "get the hell out of there return that error back up right just don't make us right if Air does not equal nil right",
    "start": "1847760",
    "end": "1853640"
  },
  {
    "text": "that's it go everything else about go is fantastic I like its Simplicity uh I would love",
    "start": "1853640",
    "end": "1860299"
  },
  {
    "text": "more generics obviously I want to make a go more complex all the time I'm not sure if that's good though I don't know",
    "start": "1860299",
    "end": "1866179"
  },
  {
    "text": "if it's good that's my one problem with ghost that I want all these things but I'm not sure if I just recreate the mess I already have uh if you look at the i o",
    "start": "1866179",
    "end": "1872299"
  },
  {
    "text": "operations in the standard Library they seem synchronous in other words they just do the work and then return the results when they are done but that's",
    "start": "1872299",
    "end": "1877399"
  },
  {
    "text": "not uh but it's not that they are synchronous in the sense that they would uh that it would mean in JavaScript other go code can run while one of these",
    "start": "1877399",
    "end": "1884480"
  },
  {
    "text": "operations is pending it's that go has eliminated the distinction between synchronous and asynchronous code",
    "start": "1884480",
    "end": "1889940"
  },
  {
    "text": "concurrency and go is a facet of how you choose to model your program and not the colors seared into each function in the",
    "start": "1889940",
    "end": "1896600"
  },
  {
    "text": "standard Library this means all the pain of the five rules I've mentioned above is completely and totally eliminated so",
    "start": "1896600",
    "end": "1901760"
  },
  {
    "text": "the next time you start telling me about some hot new language and how it's awesome uh or how awesome its",
    "start": "1901760",
    "end": "1907640"
  },
  {
    "text": "concurrency story is because it has asynchronous apis now you have to know why I started grinding my teeth because",
    "start": "1907640",
    "end": "1913460"
  },
  {
    "text": "it means you're right back to functions and blue ones yep so rust certainly has this problem and I've",
    "start": "1913460",
    "end": "1920419"
  },
  {
    "text": "definitely found this problem to be quite annoying in Rust I actually find one thing that's even more annoying in Rust is that since Futures are pull if",
    "start": "1920419",
    "end": "1927620"
  },
  {
    "text": "you don't add the dot await and you ignore say a warning it like doesn't execute at all and then",
    "start": "1927620",
    "end": "1934399"
  },
  {
    "text": "you're like dude what where where am I why isn't this happening like that can be",
    "start": "1934399",
    "end": "1939919"
  },
  {
    "text": "like I don't like hot I don't like hot promises or hot async code but at the",
    "start": "1939919",
    "end": "1945020"
  },
  {
    "text": "same time I kind of like hot hotness right uh they're trying to solve the problem with keyword generics the thing",
    "start": "1945020",
    "end": "1950480"
  },
  {
    "text": "which is in the proposal uh with the crazy syntax yes I know but is that any better",
    "start": "1950480",
    "end": "1956000"
  },
  {
    "text": "I'm not sure if that's any better right uh are we written in regards to",
    "start": "1956000",
    "end": "1961340"
  },
  {
    "text": "colorless the zig functions in that article I haven't uh I haven't uh done anything with I don't",
    "start": "1961340",
    "end": "1967100"
  },
  {
    "text": "know enough Zig asynchronously to have like a strong opinion or even any opinions uh our go routines running in",
    "start": "1967100",
    "end": "1973399"
  },
  {
    "text": "parallel or just concurrently they're both they're parallel you can run them parallel parallel uh they're just green",
    "start": "1973399",
    "end": "1981140"
  },
  {
    "text": "threads right so it depends on your like operating system and and the run time so if you have one core",
    "start": "1981140",
    "end": "1988399"
  },
  {
    "text": "you can't really run it in parallel you know what I mean but you can get parallel X like so so",
    "start": "1988399",
    "end": "1994279"
  },
  {
    "text": "here's a really simple test you can do to prove it just go create a map go create a bunch of go threads and have",
    "start": "1994279",
    "end": "2000460"
  },
  {
    "text": "them or go routines and have them uh effectively just just have them effectively uh just all",
    "start": "2000460",
    "end": "2007299"
  },
  {
    "text": "read and write to the same map you'll get a concurrent you'll get it like a data race issue really quickly",
    "start": "2007299",
    "end": "2012640"
  },
  {
    "text": "right you'll get a data race super quick which means they're parallel they're not",
    "start": "2012640",
    "end": "2017799"
  },
  {
    "text": "concurrent well they're also I mean anything that's parallel parallel I mean in a sense is also concurrent",
    "start": "2017799",
    "end": "2025299"
  },
  {
    "text": "uh C sharp is experimenting with green threads now they're good hey I saw that I saw that uh red and blue functions",
    "start": "2025299",
    "end": "2030640"
  },
  {
    "text": "green thread so what's the alpha Channel nobody knows nobody knows what the alpha channel is but we're going to discover",
    "start": "2030640",
    "end": "2035860"
  },
  {
    "text": "it one day and it's going to solve all of our problems and make programming beautiful again",
    "start": "2035860",
    "end": "2041200"
  },
  {
    "text": "the name is the green threadogen",
    "start": "2041200",
    "end": "2046440"
  }
]