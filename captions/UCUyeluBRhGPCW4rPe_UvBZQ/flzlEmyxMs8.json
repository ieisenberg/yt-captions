[
  {
    "text": "we are going to crush this little this little chalange okay are you guys ready to",
    "start": "80",
    "end": "5120"
  },
  {
    "text": "crush some [Music]",
    "start": "5120",
    "end": "13030"
  },
  {
    "text": "chalange hi I'm Lydia hiy and I created this JavaScript quiz course to have a fun and interactive way to teach you all",
    "start": "13160",
    "end": "19880"
  },
  {
    "text": "about the fundamentals of JavaScript I really want I I I I hope we're not",
    "start": "19880",
    "end": "25160"
  },
  {
    "text": "getting Bamboozled here but I I believe we should be getting some yes okay so we got we got a we got a lot of questions",
    "start": "25160",
    "end": "30560"
  },
  {
    "text": "coming up that's just don't worry it's just an intro in this course I'll prompt you 50 questions about topics like the event Loop Scopes and closures the disc",
    "start": "30560",
    "end": "37760"
  },
  {
    "text": "keyw classes and prototypes garbage collection and so much more so get ready",
    "start": "37760",
    "end": "43039"
  },
  {
    "text": "to test your foundational JavaScript knowledge and have fun I'm ready l so then we have the very first question to",
    "start": "43039",
    "end": "49760"
  },
  {
    "text": "put the logs in the correct order so we have the promise resolve the then call back Q microtasks set timeout a regular",
    "start": "49760",
    "end": "56879"
  },
  {
    "text": "console log oh okay so put the the logs in the correct order okay I think I could do this we got a promise resolve",
    "start": "56879",
    "end": "63199"
  },
  {
    "text": "then console log one we got a Q microtask 2 we got a set timeout three at zero we got a four then we have a",
    "start": "63199",
    "end": "71040"
  },
  {
    "text": "console log five and then we got a six so my guess is it's going to go like this it's going to go four",
    "start": "71040",
    "end": "77080"
  },
  {
    "text": "2 1 3 5 6 oh no no no no no no no no no no",
    "start": "77080",
    "end": "85479"
  },
  {
    "text": "no no because this is a promise. resolve. then this should actually I believe actually get double put on on",
    "start": "85479",
    "end": "91320"
  },
  {
    "text": "this one hold on hold on so it should be four two oh I don't know how set timeout",
    "start": "91320",
    "end": "96360"
  },
  {
    "text": "versus Promise goes okay so I'm going to go four so",
    "start": "96360",
    "end": "101759"
  },
  {
    "text": "some people are saying five I think you're wrong on that so I think oh crap no oh my goodness you're right this is a",
    "start": "101759",
    "end": "107439"
  },
  {
    "text": "Constructor oh I'm so stupid this is a Constructor right here so it should be four",
    "start": "107439",
    "end": "112560"
  },
  {
    "text": "five four five is this a Constructor does does this count as a Constructor I",
    "start": "112560",
    "end": "119039"
  },
  {
    "text": "can never Okay so so I'm going to go 456 2 31",
    "start": "119039",
    "end": "126200"
  },
  {
    "text": "456 2 31 that's how I'm going to do it 456",
    "start": "126200",
    "end": "133519"
  },
  {
    "text": "231 456 231 yeah so I I see some people saying 456 231 this is just bad code",
    "start": "133519",
    "end": "139280"
  },
  {
    "text": "it's not bad code it's teaching you the order like you should be able to do that right some people are saying 145 623",
    "start": "139280",
    "end": "147640"
  },
  {
    "text": "really you're wrong on that one so a resolve so for a resolve to happen in a",
    "start": "147640",
    "end": "153200"
  },
  {
    "text": "promise it require it puts it back onto the event Loop and so that's that's a thing and so that means a DOT then",
    "start": "153200",
    "end": "158959"
  },
  {
    "text": "should come afterwards so my guess is this gets two ticks maybe this one's the only one that I'm",
    "start": "158959",
    "end": "165159"
  },
  {
    "text": "not sure where this one at a zero does this get just put where I don't know what a how a zero interacts with the",
    "start": "165159",
    "end": "171360"
  },
  {
    "text": "resolve a new promise Constructor and then the async function so it's up to you to put these in the correct order",
    "start": "171360",
    "end": "177720"
  },
  {
    "text": "how you think that they'll be logged and then afterward we'll see if you have it right all right all right we already oh",
    "start": "177720",
    "end": "183440"
  },
  {
    "text": "I didn't real I didn't I didn't realize would be 4 5 6 1",
    "start": "183440",
    "end": "189879"
  },
  {
    "text": "2 3 damn I'm in",
    "start": "189879",
    "end": "197080"
  },
  {
    "text": "shambles I'm shambled right now I thought the microtask que",
    "start": "197080",
    "end": "204840"
  },
  {
    "text": "happened before the set timeout you're so as dude I'm a skill",
    "start": "204840",
    "end": "210640"
  },
  {
    "text": "I'm I have skill issues set timeout gets put on the aing Q yeah but I thought that unsubbing dude senior Netflix dude",
    "start": "210640",
    "end": "218360"
  },
  {
    "text": "you know here's the deal here's the deal yeah you know this codes huh you know you know what I mean fellas and",
    "start": "218360",
    "end": "224519"
  },
  {
    "text": "ladies you know I'm blocking Lydia here I'll stop blocking her that's kind of an that kind of an move here um but",
    "start": "224519",
    "end": "231400"
  },
  {
    "text": "you know what I'm talking about like this C's totally for for for real you know what I",
    "start": "231400",
    "end": "237000"
  },
  {
    "text": "mean that's so first let's just see what happens when we execute this scpt so the very",
    "start": "237000",
    "end": "244040"
  },
  {
    "text": "first thing is that we call promise. resolve and this just gets edited to the call stack because it's a regular",
    "start": "244040",
    "end": "249280"
  },
  {
    "text": "invocation and it's an immediately resolved promise so the then call back",
    "start": "249280",
    "end": "254560"
  },
  {
    "text": "is or the then function it's pushed to the call stack right away which then schedules that microtask because it's",
    "start": "254560",
    "end": "260040"
  },
  {
    "text": "the call back to the then uh chain method that was as we just saw that is a a",
    "start": "260040",
    "end": "266000"
  },
  {
    "text": "microtask then we call Q microtask so that Q microtask is added to the call stack but that then schedules that",
    "start": "266000",
    "end": "271800"
  },
  {
    "text": "microtask yep which is conso 2 then we have to set time oh that goes into this",
    "start": "271800",
    "end": "277440"
  },
  {
    "text": "guy oh see that's see that that was my question which was I thought promised",
    "start": "277440",
    "end": "282919"
  },
  {
    "text": "out resolve went to this quote unquote macro task queue I didn't realize it was on the microtask",
    "start": "282919",
    "end": "289360"
  },
  {
    "text": "that's why I went with ah dang it time out gets added to the call stack and that schedules the call back and the web",
    "start": "289360",
    "end": "294600"
  },
  {
    "text": "API which on the next tick gets pushed to the regular task q and and at the",
    "start": "294600",
    "end": "299880"
  },
  {
    "text": "same time console log four is pushed to the call stack this is just a regular function so four is logged as the very",
    "start": "299880",
    "end": "306400"
  },
  {
    "text": "first value yeah yeah then on the next line we have the new promise Constructor",
    "start": "306400",
    "end": "311800"
  },
  {
    "text": "The Constructor and the body of new promise is just executed synchronously and that can be a bit counterintuitive",
    "start": "311800",
    "end": "317720"
  },
  {
    "text": "because a lot of people think that the they resolve asynchronously they construct synchronously it's such a pain",
    "start": "317720",
    "end": "324600"
  },
  {
    "text": "in the ass honestly writing code that tests heavy promised code is such a pain in the",
    "start": "324600",
    "end": "330600"
  },
  {
    "text": "ass it it really is it truly truly is uh just because whenever you have to line",
    "start": "330600",
    "end": "336160"
  },
  {
    "text": "these things up and you really want to be able to do man i' I've gotten into some situations where testing it can",
    "start": "336160",
    "end": "341400"
  },
  {
    "text": "become just such an annoying process of elimination I have these like extra like",
    "start": "341400",
    "end": "346919"
  },
  {
    "text": "just one more tick functions you know what I mean like there's like an await tick it's just like dude I'm so stupid",
    "start": "346919",
    "end": "352720"
  },
  {
    "text": "that I have this like I'm so stupid it could have just been an exe new promise Constructor body is also",
    "start": "352720",
    "end": "359639"
  },
  {
    "text": "run asynchronously that's not the case it's only like that the resolve will execute the rest asynchronously yeah",
    "start": "359639",
    "end": "366360"
  },
  {
    "text": "this is just push to the call stack which then logs five so the second log is",
    "start": "366360",
    "end": "371680"
  },
  {
    "text": "five and then I assume this uh async function like a what did they call that an immediately invoked function",
    "start": "371680",
    "end": "377440"
  },
  {
    "text": "execution or whatever I Fe whatever whatever the old term is I can't even remember all those terms anymore I'm too",
    "start": "377440",
    "end": "382919"
  },
  {
    "text": "old for this uh but I believe this effectively an async version of this is no different than a new promise I and",
    "start": "382919",
    "end": "390759"
  },
  {
    "text": "then we have the immediately invoked async function and again also here that body is just run synchronously it's only",
    "start": "390759",
    "end": "397599"
  },
  {
    "text": "the like a weighted value where the asynchronous part um kind of begins",
    "start": "397599",
    "end": "403039"
  },
  {
    "text": "we'll also look at that and just and that makes sense because a do then is no different than calling a weight right",
    "start": "403039",
    "end": "408599"
  },
  {
    "text": "and a weight and Dot then are the same thing which get pushed onto the next one that's why you know this is why whenever",
    "start": "408599",
    "end": "414080"
  },
  {
    "text": "you have super awaited code within a server you can actually completely like",
    "start": "414080",
    "end": "419479"
  },
  {
    "text": "you can you actually slow down your entire server because you just get these huge microtask cues coming on as opposed",
    "start": "419479",
    "end": "426360"
  },
  {
    "text": "to like just processing the thing in this moment and so there are some there are some tricksy things now I understand",
    "start": "426360",
    "end": "432680"
  },
  {
    "text": "why pry went to go I mean that's the problem is when you when you write CLI applications it is common to run into",
    "start": "432680",
    "end": "439560"
  },
  {
    "text": "this type of stuff not obviously like this kind of code but you run into a bunch of stuff that has this you just",
    "start": "439560",
    "end": "444639"
  },
  {
    "text": "have to write a lot of you just have to write a lot of concurrent handling code a second",
    "start": "444639",
    "end": "449960"
  },
  {
    "text": "this is the first thing so cons gets loged to the if you can't look at code",
    "start": "449960",
    "end": "455240"
  },
  {
    "text": "and understand mostly how it's executing I mean that's a generally that makes it more difficult like this is all",
    "start": "455240",
    "end": "461759"
  },
  {
    "text": "intuitive I can reason out most of this and I I mean I had a little bit of it wrong but I can reason out most of it",
    "start": "461759",
    "end": "468199"
  },
  {
    "text": "but you shouldn't have to reason that hard to come to a conclusion so so now",
    "start": "468199",
    "end": "474360"
  },
  {
    "text": "the call stack is empty so the first thing that happens is that the microtask Q gets uh checked and the first uh task",
    "start": "474360",
    "end": "482560"
  },
  {
    "text": "there I guess added to the call stack so the call back for the then method so call or conso log one so in other words",
    "start": "482560",
    "end": "489000"
  },
  {
    "text": "you could actually potenti you could actually like starve out the macro task like did anyone see that so if I had a",
    "start": "489000",
    "end": "494080"
  },
  {
    "text": "loop that kept on doing promise resolve in some sense I could actually steal out and prevent the macro task from",
    "start": "494080",
    "end": "500639"
  },
  {
    "text": "executing even though it's a set timeout zero like those are the things people don't think about and they're real like",
    "start": "500639",
    "end": "506680"
  },
  {
    "text": "they can really cause some odd problems one gets logged and the same for two",
    "start": "506680",
    "end": "512919"
  },
  {
    "text": "which was that Q microtask call back so the next one is two and then there's nothing in the microtask que there was",
    "start": "512919",
    "end": "518839"
  },
  {
    "text": "something in the task queue so that thing is pushed to call stack and logged logs three let's go we can use classes",
    "start": "518839",
    "end": "525800"
  },
  {
    "text": "and we all right all right all right here we go classes I'm pretty good at this one here we go I went to college",
    "start": "525800",
    "end": "532240"
  },
  {
    "text": "during the clean code days I'm going to nail this one are you ready for this one this looks like my this looks like my",
    "start": "532240",
    "end": "538120"
  },
  {
    "text": "very first time I ever tried to to build a game and but there's there's only four levels so it's like that's not even that",
    "start": "538120",
    "end": "545560"
  },
  {
    "text": "that much inheritance compared to my first game my first game was definitely seven seven levels minimum minimum we",
    "start": "545560",
    "end": "552800"
  },
  {
    "text": "can also extend classes so in this case you know we have an animal class and we can create a mammal it's still an animal",
    "start": "552800",
    "end": "558200"
  },
  {
    "text": "so we still want to have some of these properties in this case name like all animals have names all mammals have names but mammals can breathe unlike",
    "start": "558200",
    "end": "564480"
  },
  {
    "text": "that's not all animals now we have a k9 well k9's extend mammal cuz they can breathe but then they can also how yeah",
    "start": "564480",
    "end": "572360"
  },
  {
    "text": "you know when you reason about why we did this to begin with isn't it just so funny like this all makes intuitive",
    "start": "572360",
    "end": "579519"
  },
  {
    "text": "sense like yeah not all animals not all animals breathe so we got a mammal subass this makes perfect sense and",
    "start": "579519",
    "end": "586200"
  },
  {
    "text": "canines man they can howl right you know what I'm talking about and dogs they wig tail you know like this all makes sense",
    "start": "586200",
    "end": "592279"
  },
  {
    "text": "and then we have dogs which sends K9 but they can actually wag their tail which I just learned yesterday that not all",
    "start": "592279",
    "end": "597480"
  },
  {
    "text": "Kines do it's just dogs and wolves I guess but anyway like we can make it and wolves now you ruined it okay so are are",
    "start": "597480",
    "end": "606000"
  },
  {
    "text": "hyenas canines breathable yeah you would have just used a breathable interface that's what we would have used more",
    "start": "606000",
    "end": "611920"
  },
  {
    "text": "specific every time now of course when we create a class there is something to remember is that all the properties in",
    "start": "611920",
    "end": "618720"
  },
  {
    "text": "Constructor are specific to that instance and everything not on the constructors added to the Prototype so",
    "start": "618720",
    "end": "626000"
  },
  {
    "text": "in this case we have dog one and dog two and we ofg we have name and breed on the",
    "start": "626000",
    "end": "632560"
  },
  {
    "text": "Constructor so they all get added to that instance so they all take a memory we have name and breed like Mex and",
    "start": "632560",
    "end": "639480"
  },
  {
    "text": "Labrador and then we have spot and dmti it's not",
    "start": "639480",
    "end": "644760"
  },
  {
    "text": "extending dog which I'm having a hard time here okay it's not or it's not extending can9 so I'm I'm struggling",
    "start": "645040",
    "end": "651200"
  },
  {
    "text": "here but bark and wag tail are all defined on the Prototype so it's not directly on the instance it goes down to",
    "start": "651200",
    "end": "656760"
  },
  {
    "text": "prototype chain to find those methods so if we were to invoke them JavaScript would be like oh well I don't have the bark method on the instance I'll go down",
    "start": "656760",
    "end": "663399"
  },
  {
    "text": "the Prototype chain and then it finds it on Dr prototype so as you can also Imagine The",
    "start": "663399",
    "end": "670440"
  },
  {
    "text": "yep like the methods that all instances would have in common we want to add to the Prototype because this doesn't take",
    "start": "670440",
    "end": "676200"
  },
  {
    "text": "up memory if like bark and wag tail would be on the Constructor we would just have two identical like functions",
    "start": "676200",
    "end": "682880"
  },
  {
    "text": "but each on an instant so this would all take a memory for for good call out by the way that's good that's good that's",
    "start": "682880",
    "end": "689040"
  },
  {
    "text": "good little piece of knowledge if you didn't sorry this way if you didn't know that's a good good I like it I I like",
    "start": "689040",
    "end": "694560"
  },
  {
    "text": "this for no reason uh yeah we can get the Prototype",
    "start": "694560",
    "end": "700560"
  },
  {
    "text": "uh of a specific instance with undor Proto this is deprecated because it can be uh a bit dangerous because you can",
    "start": "700560",
    "end": "706120"
  },
  {
    "text": "also modify the Prototype that way and you should not do that come on it's JavaScript of course who has it okay",
    "start": "706120",
    "end": "713000"
  },
  {
    "text": "Real Talk who here hasn't modified the Prototype at least once okay you know",
    "start": "713000",
    "end": "721079"
  },
  {
    "text": "what I mean like you're telling me that like a you know night out on the town you haven't just done it once come on",
    "start": "721079",
    "end": "727160"
  },
  {
    "text": "come on you gotta you got to do it at least like you",
    "start": "727160",
    "end": "733560"
  },
  {
    "text": "know JS not even once dogpro dod's yep you got to do it every now and then you",
    "start": "733560",
    "end": "739360"
  },
  {
    "text": "know what I mean you got to do it final locked private abstract class",
    "start": "739360",
    "end": "744560"
  },
  {
    "text": "animal I love that c beautiful or you can do or you can use object get prototype off and then the instance to",
    "start": "744560",
    "end": "751199"
  },
  {
    "text": "get the Prototype just something to remember off okay all right next one which of the following statements are",
    "start": "751199",
    "end": "756279"
  },
  {
    "text": "true so we have a dog CL all right here we go here we go I'm",
    "start": "756279",
    "end": "763560"
  },
  {
    "text": "ready I hope you guys are ready I think we got this okay so my head is clearly in the way there you go you can you can",
    "start": "763560",
    "end": "769480"
  },
  {
    "text": "see that it says Max and spot okay so we have Constructor dog takes username as",
    "start": "769480",
    "end": "774800"
  },
  {
    "text": "username well what the hell's username I that must be an Oopsy Daisy typo right maybe is that an Oopsy Daisy",
    "start": "774800",
    "end": "782480"
  },
  {
    "text": "I we'll call we'll call that an oopsie okay so we get uh we'll get Max and spot here uh does dog one WG tail equal dog",
    "start": "782480",
    "end": "791040"
  },
  {
    "text": "two wagtail yes I will go with yes does dog one",
    "start": "791040",
    "end": "800160"
  },
  {
    "text": "wagtail equal dog two wagtail no",
    "start": "800160",
    "end": "806040"
  },
  {
    "text": "no no it doesn't does eight equal D no",
    "start": "806040",
    "end": "811079"
  },
  {
    "text": "all right does dog one bark equal dog two bark yes it does yes it does does uh",
    "start": "811079",
    "end": "817000"
  },
  {
    "text": "object get prototype of dog one equal prototype of dog two I would say yes and dog one Constructor equals dog two",
    "start": "817000",
    "end": "822839"
  },
  {
    "text": "Constructor yes so I'm going to go like this true false true true true that's what I'm going",
    "start": "822839",
    "end": "830720"
  },
  {
    "text": "with that's what I'm going that in the Constructor has a username and a wagtail function and E is false I don't know y e",
    "start": "830720",
    "end": "839120"
  },
  {
    "text": "is false I I figured it'd be the same function reference b b makes sense here's the",
    "start": "839120",
    "end": "845880"
  },
  {
    "text": "reason why B makes sense is uh B should be false because wagtail is a function",
    "start": "845880",
    "end": "852160"
  },
  {
    "text": "defined within the Constructor so each time this is a new function that is being created here right this is brand",
    "start": "852160",
    "end": "858160"
  },
  {
    "text": "new there's there's every single time you invoke a new or you instantiate a new dog that's a new function so",
    "start": "858160",
    "end": "863680"
  },
  {
    "text": "therefore WG tail should not equal the same WG tail uh this one I don't believe you on the this one because this I",
    "start": "863680",
    "end": "870480"
  },
  {
    "text": "believe if I'm not mistaken bark uh this is only defined once on its",
    "start": "870480",
    "end": "876000"
  },
  {
    "text": "prototype C is going to be true this is not defined on this is defined once on the Prototype",
    "start": "876000",
    "end": "883079"
  },
  {
    "text": "yeah yeah yeah yeah yeah uh D I just assume since",
    "start": "883079",
    "end": "889920"
  },
  {
    "text": "there's no extends here or even if there was an extends here the Prototype is the same either way it's object right uh",
    "start": "889920",
    "end": "896399"
  },
  {
    "text": "Constructor I assume it's the same because this function does not change so I I'm going to go with I'm going to go",
    "start": "896399",
    "end": "902040"
  },
  {
    "text": "with true false true true true true one false which is Wake tail it also has a",
    "start": "902040",
    "end": "907440"
  },
  {
    "text": "bark method uh on the on the class body and then we have two instances we have dog one and dog two um",
    "start": "907440",
    "end": "916199"
  },
  {
    "text": "and I think e is false because it contains WG tail which is different in each in instance no I think you might be",
    "start": "916199",
    "end": "922120"
  },
  {
    "text": "misunderstanding Constructors in general so let's just jump over here really quickly so if I go Class A uh Ang go",
    "start": "922120",
    "end": "927440"
  },
  {
    "text": "like this if I go a do instructor it's a function right and so these functions it's it's you like a",
    "start": "927440",
    "end": "936480"
  },
  {
    "text": "like the actual function inside is is a black box so you don't have to compare what's actually happening is is it the",
    "start": "936480",
    "end": "942399"
  },
  {
    "text": "same function pointer effectively or is chat Frozen come on chat hold on one",
    "start": "942399",
    "end": "948680"
  },
  {
    "text": "second chat's Frozen I realize that you know anyone who's watching doesn't get to see all the insightful and amazing",
    "start": "948680",
    "end": "954519"
  },
  {
    "text": "comments by chat which by the way they are very insightful they're very amazing",
    "start": "954519",
    "end": "959759"
  },
  {
    "text": "extremely low amount of dick and balls comments like I'm I'm very impressed everybody you guys have done a great job",
    "start": "959759",
    "end": "964839"
  },
  {
    "text": "you guys have done a just a Fantastical job thanks it's cold in here dick dick",
    "start": "964839",
    "end": "971040"
  },
  {
    "text": "dick thank you moderator mods everybody you know good oldfashioned and ball torture mods",
    "start": "971040",
    "end": "978759"
  },
  {
    "text": "like nothing makes me happier all right yeah it's up to you to see which ones would be strictly equal to each other",
    "start": "978759",
    "end": "985199"
  },
  {
    "text": "all right let's see I think I I think I I am correct so the right statements are a c d and",
    "start": "985199",
    "end": "993079"
  },
  {
    "text": "e so what we have here is we have the dog prototype and then we have two instances we have dog one and dog two so",
    "start": "993079",
    "end": "999160"
  },
  {
    "text": "first saying that dog one dog wag tail equals dog two wag tail where we're like",
    "start": "999160",
    "end": "1005160"
  },
  {
    "text": "strictly equaling The Returned value of wag tail and that is just a string wagging tail and strings are equally or",
    "start": "1005160",
    "end": "1012720"
  },
  {
    "text": "strictly equal to each other however when we compare the actual function to each other then they're not because you",
    "start": "1012720",
    "end": "1019199"
  },
  {
    "text": "can tell I didn't pre-at cuz I didn't get the first one right cuz I'm a dumb dumb we have the function on the Constructor so they both point to",
    "start": "1019199",
    "end": "1025918"
  },
  {
    "text": "different function objects in memory and when strictly comparing objects it's false it's real talk people keep saying",
    "start": "1025919",
    "end": "1032480"
  },
  {
    "text": "that I now get a job uh you know what hey guess what real talk if I went into a place and they're like all right you",
    "start": "1032480",
    "end": "1038600"
  },
  {
    "text": "get to start now welcome to your four layers of inheritance we are doing the",
    "start": "1038600",
    "end": "1043798"
  },
  {
    "text": "strategy Builder abstract config Factory pattern here I would uh just",
    "start": "1043799",
    "end": "1049960"
  },
  {
    "text": "quit Deuces I just I just hit him with the the classic the classic really I just be",
    "start": "1049960",
    "end": "1057039"
  },
  {
    "text": "like hey I genuinely appreciate this thank you goodbye that's what I do right there I",
    "start": "1057039",
    "end": "1064080"
  },
  {
    "text": "do that he's finally gone is that we're comparing different references to different spots in memory so that one's",
    "start": "1064080",
    "end": "1070679"
  },
  {
    "text": "false but in this case it's also kind of stupid that we added it to the Constructor cuz it's just a function we should have added it to the Prototype",
    "start": "1070679",
    "end": "1076799"
  },
  {
    "text": "yeah that's just what happens when we add it to to the Constructor um and comparing doc 1. bark and Doc two. bark",
    "start": "1076799",
    "end": "1082480"
  },
  {
    "text": "well that is the same because they both point to the bark method on the doc prototype so they both point to the same",
    "start": "1082480",
    "end": "1088520"
  },
  {
    "text": "function object so the same spot in memory so that's true um object get prototype of Doc one and Doc two that's",
    "start": "1088520",
    "end": "1094919"
  },
  {
    "text": "also true that both point to the same prototype and Doc one a Constructor and Doc two the Constructor that is just",
    "start": "1094919",
    "end": "1100799"
  },
  {
    "text": "pointing to the Constructor function on the Prototype and that actually gets called when we um create a new instance",
    "start": "1100799",
    "end": "1106360"
  },
  {
    "text": "so when we say like I wanted to see some what's it called I I was hoping to see a little bit of up and down the yo-yo",
    "start": "1106360",
    "end": "1111840"
  },
  {
    "text": "problem when it comes to this stuff new dog actually that Constructor function is called but it's not there um but yeah",
    "start": "1111840",
    "end": "1118440"
  },
  {
    "text": "we're just comparing the same function object to each other so the same spot in memory so that one is true this is a",
    "start": "1118440",
    "end": "1124760"
  },
  {
    "text": "good exercise I I do like the yo-yo problem where you're trying to like call into these different level of functions like who calls who it's kind of fun does",
    "start": "1124760",
    "end": "1131799"
  },
  {
    "text": "JavaScript even compare uh compare the place in memory ex uh ever except for uh optimizations yeah of course like if you",
    "start": "1131799",
    "end": "1138159"
  },
  {
    "text": "do do like function equivalence of course it's going to do because it's going to be a it's it's a JS object it's a wrapper object and it's going to be a",
    "start": "1138159",
    "end": "1144280"
  },
  {
    "text": "you know a function underneath a V8 function or whatever it is and I'm sure they're just comparing like the memory address to say is this the same",
    "start": "1144280",
    "end": "1150679"
  },
  {
    "text": "function because Constructor would be the same but WG will not be the same even though it it is underneath the hood",
    "start": "1150679",
    "end": "1157559"
  },
  {
    "text": "it's actually pointing to the same set of bite code but the function instance are different because you can attach",
    "start": "1157559",
    "end": "1163200"
  },
  {
    "text": "things to functions remember you can like do WG tail. Fu equals bar and that's just valid why is that valid I",
    "start": "1163200",
    "end": "1169200"
  },
  {
    "text": "don't know that's just what happened 7day cocaine rage that was javascript's birthing add wack tail to your",
    "start": "1169200",
    "end": "1175880"
  },
  {
    "text": "Constructor doesn't make sense it's not instance dependent so they yeah it",
    "start": "1175880",
    "end": "1181039"
  },
  {
    "text": "should have been on the Prototype just like bark we can create generator functions with the little as so I'm not",
    "start": "1181039",
    "end": "1187440"
  },
  {
    "text": "very good at generators it's just something I've never really done a lot interest after the",
    "start": "1187440",
    "end": "1195720"
  },
  {
    "text": "function keyword and essentially what this does is a generator function returns an",
    "start": "1195720",
    "end": "1201559"
  },
  {
    "text": "iterator um and this is a special type of object that contains methods like",
    "start": "1201559",
    "end": "1206840"
  },
  {
    "text": "next return and throw and it also has a state and with this iterator we can uh call the next method which kind of just",
    "start": "1206840",
    "end": "1213440"
  },
  {
    "text": "like changes the state you're running and then Returns the value that gets yielded from the generator function so",
    "start": "1213440",
    "end": "1220600"
  },
  {
    "text": "imagine if JavaScript had options like imagine if you had an option here it could be none to signify",
    "start": "1220600",
    "end": "1229039"
  },
  {
    "text": "that we're done but guess what it doesn't Okay uh generators are kind of magic yeah like I understand the point",
    "start": "1229039",
    "end": "1234600"
  },
  {
    "text": "of having a generator like I'd write a generator to do a file system walk and then the next function can just call uh",
    "start": "1234600",
    "end": "1239919"
  },
  {
    "text": "you know next on it until you're done getting all the getting all the the things you know what I",
    "start": "1239919",
    "end": "1245679"
  },
  {
    "text": "mean in this case we yield one so whenever we call next the value is one and done is false because there are",
    "start": "1245679",
    "end": "1252000"
  },
  {
    "text": "still more values to be yielded within did you just say in Python the generator",
    "start": "1252000",
    "end": "1257280"
  },
  {
    "text": "throws an exception when one done nice you know",
    "start": "1257280",
    "end": "1262960"
  },
  {
    "text": "that's that I mean that's a way that that is a way to to say you're",
    "start": "1262960",
    "end": "1268400"
  },
  {
    "text": "done with this iterator or generator or whatever the hell it is you know that's what I that's",
    "start": "1268400",
    "end": "1275640"
  },
  {
    "text": "that now that's software it's called Step it's called",
    "start": "1275640",
    "end": "1281799"
  },
  {
    "text": "stop iteration sounds awesome I that's what I",
    "start": "1281799",
    "end": "1286919"
  },
  {
    "text": "think is great I mean that's how I would have designed it the generator function so whenever we call it",
    "start": "1286919",
    "end": "1292919"
  },
  {
    "text": "again hello yes it changes back to running and then it you know returns",
    "start": "1292919",
    "end": "1298360"
  },
  {
    "text": "that value but we have to explicitly invoke next to to actually do that because with regular functions you know",
    "start": "1298360",
    "end": "1304919"
  },
  {
    "text": "it's like kind of this All or Nothing approach whenever we call a regular function it will just honestly I should use generators more I realize I don't",
    "start": "1304919",
    "end": "1311400"
  },
  {
    "text": "use them enough and they're actually pretty dang convenient uh are generators supported in V8 or is it still",
    "start": "1311400",
    "end": "1316960"
  },
  {
    "text": "transpiled nonsense with a huge gigantic State and the world's greatest debugging experience is it still that or is it is",
    "start": "1316960",
    "end": "1323919"
  },
  {
    "text": "it now first class can I jump jump over here and go function",
    "start": "1323919",
    "end": "1329240"
  },
  {
    "text": "FU oh nice nice let's go let's go all right all right rock on all right",
    "start": "1329240",
    "end": "1336400"
  },
  {
    "text": "execute that entire body there's no way for us to kind of pause it in between with the generator function we can hey",
    "start": "1336400",
    "end": "1342360"
  },
  {
    "text": "FR master um yeah and it'll just keep doing this until we actually return from the generator function either explicit",
    "start": "1342360",
    "end": "1348240"
  },
  {
    "text": "implicitly in which case done is true now the cool thing with and then it's",
    "start": "1348240",
    "end": "1353480"
  },
  {
    "text": "closed and you can use generators yeah I was about to say you can just use them straight up in four four loops and then you can have do they have acing",
    "start": "1353480",
    "end": "1359520"
  },
  {
    "text": "generation support right because then you can do 408 I should use I I always want to use",
    "start": "1359520",
    "end": "1365279"
  },
  {
    "text": "more of that like I've been using it a lot lately for read line 408 and I I",
    "start": "1365279",
    "end": "1371640"
  },
  {
    "text": "like it I I I do like 408s they're pretty they're pretty good they're",
    "start": "1371640",
    "end": "1376960"
  },
  {
    "text": "pretty dang good she does know her stuff yeah she she works at vercell too if I'm not mistaken",
    "start": "1376960",
    "end": "1382720"
  },
  {
    "text": "with iterators is that or with uh generator functions is that we can then you know create iterables so we can use",
    "start": "1382720",
    "end": "1389120"
  },
  {
    "text": "the spread operator uh on the iterator that gets returned from the generator function and use stuff like four off um",
    "start": "1389120",
    "end": "1396320"
  },
  {
    "text": "and you can see that whenever we do that only the yielded values get logged so not their actual return value this was a",
    "start": "1396320",
    "end": "1403000"
  },
  {
    "text": "great little uh quick quick refresher on generators I I feel like I knew all these things I just so I forget about",
    "start": "1403000",
    "end": "1408679"
  },
  {
    "text": "that whole value done uh type uh the uh box value I forget about the Box value",
    "start": "1408679",
    "end": "1413880"
  },
  {
    "text": "that comes out of a generator but now I know so this question is pretty much the",
    "start": "1413880",
    "end": "1419960"
  },
  {
    "text": "same as this uh this example that I show here but question 21 is what gets logged",
    "start": "1419960",
    "end": "1425679"
  },
  {
    "text": "so we have the generator function count that yields one two and then returns three and then we have a four off method",
    "start": "1425679",
    "end": "1432919"
  },
  {
    "text": "that logs the value of the returned uh iterator object that gets returned from",
    "start": "1432919",
    "end": "1438159"
  },
  {
    "text": "the count generator function so with a log either 1 2 3 one two promise 3 1 or",
    "start": "1438159",
    "end": "1443919"
  },
  {
    "text": "one two hold on I don't know what comes out of I don't know what comes out I I I",
    "start": "1443919",
    "end": "1449360"
  },
  {
    "text": "maybe I didn't listen to it what's the difference between a return versus this I thought a return even in the previous",
    "start": "1449360",
    "end": "1455360"
  },
  {
    "text": "example right the previous example example right right right right even",
    "start": "1455360",
    "end": "1461400"
  },
  {
    "text": "this one had done true which was just return for I think there's no async generator in here right so this should",
    "start": "1461400",
    "end": "1467679"
  },
  {
    "text": "just be all I think I think this one should be pretty easy right I I I would",
    "start": "1467679",
    "end": "1473080"
  },
  {
    "text": "assume it's 1 2 3 am I wrong on that am I",
    "start": "1473080",
    "end": "1479679"
  },
  {
    "text": "dumb wait hold on when you do a for Loop do you pass in the generator itself or do you invoke the generator okay so you",
    "start": "1480559",
    "end": "1486000"
  },
  {
    "text": "invoke the generator to pass it in I think it's one two three why would it not be one two3 why would it not be why",
    "start": "1486000",
    "end": "1492080"
  },
  {
    "text": "would three not count as well because it should execute the four Loop once right",
    "start": "1492080",
    "end": "1499480"
  },
  {
    "text": "it's e she just said yield yield return is it because the dun so D really",
    "start": "1499480",
    "end": "1507480"
  },
  {
    "text": "no damn that if dude if three don't get returned if if three don't get returned",
    "start": "1507480",
    "end": "1515279"
  },
  {
    "text": "I'm going to I'm going to be emotionally bruised the right hand areer is one and",
    "start": "1515279",
    "end": "1521399"
  },
  {
    "text": "two and it's shambles I me just I just figured it had",
    "start": "1526679",
    "end": "1532720"
  },
  {
    "text": "to be a because it's too clever to be B you know what I mean or E it's just too",
    "start": "1532720",
    "end": "1538840"
  },
  {
    "text": "clever like there ain't no way there just ain't no way that that's going to be real dude Netflix engineer by the",
    "start": "1538840",
    "end": "1546799"
  },
  {
    "text": "way this is genuinely the worst designed language in the in the world this is the",
    "start": "1548679",
    "end": "1554320"
  },
  {
    "text": "worst designed language in the actual World okay like this is such an",
    "start": "1554320",
    "end": "1559760"
  },
  {
    "text": "F L take by JS dude L plus ratio plus what the hell are you doing I'm gonna",
    "start": "1559760",
    "end": "1567080"
  },
  {
    "text": "take a picture of this one and give I I tested my JavaScript knowledge and I got two out of three",
    "start": "1567080",
    "end": "1573880"
  },
  {
    "text": "wrong I'm a loser you're just hating it because you have skill issues I'm hating",
    "start": "1573880",
    "end": "1579039"
  },
  {
    "text": "it because it sucks Twitter I failed I literally failed I",
    "start": "1579039",
    "end": "1585039"
  },
  {
    "text": "literally failed I literally failed I hate JavaScript actually I prefer L plus I",
    "start": "1585039",
    "end": "1592000"
  },
  {
    "text": "prefer L plus uh plus ratio plus bad language design there we go what is this what",
    "start": "1592000",
    "end": "1602159"
  },
  {
    "text": "what why oh my goodness I cannot believe that the done true with the value does",
    "start": "1602159",
    "end": "1608480"
  },
  {
    "text": "not get piped through I mean I guess I understand why but it's so stupid I'm",
    "start": "1608480",
    "end": "1613760"
  },
  {
    "text": "just going to copy this and like what's going on in the",
    "start": "1613760",
    "end": "1620000"
  },
  {
    "text": "console it's because the value is we have this generator function but when whenever or I understand why because",
    "start": "1620000",
    "end": "1626840"
  },
  {
    "text": "typically if there's no return value it actually has an implicit return undefined which is then going to be",
    "start": "1626840",
    "end": "1632120"
  },
  {
    "text": "considered you know done is true so therefore you should break from the for Loop because you are done iterating but",
    "start": "1632120",
    "end": "1638440"
  },
  {
    "text": "you are actually returning out a value at the end so that means you should never return a value you should only",
    "start": "1638440",
    "end": "1643840"
  },
  {
    "text": "yield values and just assume the returned undefined at the end but still this is so stupid it's just like the",
    "start": "1643840",
    "end": "1650640"
  },
  {
    "text": "worst it's just I just want to let you know that I'm angry set thebolt to",
    "start": "1650640",
    "end": "1656640"
  },
  {
    "text": "count what the f did you just say so again this doesn't whenever we invoke count we're not running any fun the why",
    "start": "1656640",
    "end": "1662919"
  },
  {
    "text": "is return mandatory it's not mandatory there's there's an implicit return to undefine in every single JavaScript",
    "start": "1662919",
    "end": "1669919"
  },
  {
    "text": "function function or anything like unlike if we you know had like function count this would execute the function",
    "start": "1669919",
    "end": "1675799"
  },
  {
    "text": "that's not the case with a generator function function so now it you can see that it is suspended that's kind of what",
    "start": "1675799",
    "end": "1681399"
  },
  {
    "text": "I just tried to show you and then it has the Prototype generator and this contains next return and throw and this",
    "start": "1681399",
    "end": "1688840"
  },
  {
    "text": "gets used by um methods that need an iterable or that you know iterate over",
    "start": "1688840",
    "end": "1696200"
  },
  {
    "text": "iterable so the con or for off or give me the evidence that's that that's true",
    "start": "1696200",
    "end": "1704120"
  },
  {
    "text": "what's true what are you asking evidence for big screen what are you asking evidence",
    "start": "1704120",
    "end": "1709760"
  },
  {
    "text": "for RZ give me the RZ or you're about to get a RZ straining order well you you invoked the function to get the",
    "start": "1709760",
    "end": "1715519"
  },
  {
    "text": "generator the generator out get Give me the give me the RZ or you're getting the RZ okay you you make the choice uh by",
    "start": "1715519",
    "end": "1722679"
  },
  {
    "text": "the way I got to ask a variant of the crystal ball problem I used your strategy and guess what the interviewer did not understand it let's go you are",
    "start": "1722679",
    "end": "1728679"
  },
  {
    "text": "stressing us out senior engineer get Riz where's the RZ hi hi everybody's waiting",
    "start": "1728679",
    "end": "1733919"
  },
  {
    "text": "patiently RZ which one uh that every function has an undefined implicit return value well",
    "start": "1733919",
    "end": "1740159"
  },
  {
    "text": "of course it does how easy what's the what what comes out of",
    "start": "1740159",
    "end": "1747080"
  },
  {
    "text": "bar I can do that a is undefined it returned nothing",
    "start": "1747080",
    "end": "1754480"
  },
  {
    "text": "it's it's implicit like it's already it's already there you could just do that welcome to JavaScript there is no",
    "start": "1754480",
    "end": "1761360"
  },
  {
    "text": "void you can assign void okay gross yeah you're welcome you're welcome you",
    "start": "1761360",
    "end": "1770399"
  },
  {
    "text": "got you don't get theing so we can use like it this is one two uh or you know",
    "start": "1770399",
    "end": "1776840"
  },
  {
    "text": "the cons value of it I can't oh my goodness I can't believe this is true I",
    "start": "1776840",
    "end": "1781919"
  },
  {
    "text": "can't tell if I'm really upset and my body's doing this out of upsetness due to the spread operator returning only",
    "start": "1781919",
    "end": "1787200"
  },
  {
    "text": "one and two or if I really do have to pee I cannot actually tell the difference between the two right now",
    "start": "1787200",
    "end": "1792320"
  },
  {
    "text": "other than I'm very upset about we do it again now you can see that let me just log this and you can see that it's",
    "start": "1792320",
    "end": "1798039"
  },
  {
    "text": "closed now and that is because we uh the like iterator itself we've kind of like",
    "start": "1798039",
    "end": "1805360"
  },
  {
    "text": "exhausted now we've already you know yielded all the values so now it's closed of course what we can do is just",
    "start": "1805360",
    "end": "1811679"
  },
  {
    "text": "create another one so it two yeah yeah yeah count let's do it again and this is fine we can just itate over two again",
    "start": "1811679",
    "end": "1819279"
  },
  {
    "text": "that's fine because like we just created a new object based on that generator function but once it's closed once we've",
    "start": "1819279",
    "end": "1824360"
  },
  {
    "text": "already yielded all the values we cannot reuse the same iterable that makes sense I mean that's all type of iterators all",
    "start": "1824360",
    "end": "1830720"
  },
  {
    "text": "right uh this was fantastic by the way I just learned that I don't know J I don't",
    "start": "1830720",
    "end": "1836080"
  },
  {
    "text": "know JavaScript aen okay this is this is real I feel bad and I got a pie so bad",
    "start": "1836080",
    "end": "1841840"
  },
  {
    "text": "oh my goodness it's coming out as we",
    "start": "1841840",
    "end": "1845640"
  }
]