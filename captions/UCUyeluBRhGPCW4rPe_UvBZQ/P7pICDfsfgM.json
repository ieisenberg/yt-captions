[
  {
    "text": "go 1.22 fixing some for loops and go",
    "start": "0",
    "end": "3060"
  },
  {
    "text": "this is kind of exciting go 1.21",
    "start": "3060",
    "end": "5819"
  },
  {
    "text": "includes a preview uh let's see of a",
    "start": "5819",
    "end": "8820"
  },
  {
    "text": "change of for Loop scoping we plan to",
    "start": "8820",
    "end": "10800"
  },
  {
    "text": "ship and go one two two removing one of",
    "start": "10800",
    "end": "12480"
  },
  {
    "text": "the most common go mistakes so this is",
    "start": "12480",
    "end": "13860"
  },
  {
    "text": "awesome this is great if you've written",
    "start": "13860",
    "end": "15599"
  },
  {
    "text": "any amount of go code you've probably",
    "start": "15599",
    "end": "16920"
  },
  {
    "text": "made this mistake of keeping a reference",
    "start": "16920",
    "end": "18420"
  },
  {
    "text": "to a loop variable variable past the end",
    "start": "18420",
    "end": "20520"
  },
  {
    "text": "of its iteration at which point it takes",
    "start": "20520",
    "end": "22380"
  },
  {
    "text": "on a new value that you didn't want for",
    "start": "22380",
    "end": "24119"
  },
  {
    "text": "example consider this program",
    "start": "24119",
    "end": "26039"
  },
  {
    "text": "there we go four V value ranges print",
    "start": "26039",
    "end": "28500"
  },
  {
    "text": "this who hasn't done this one",
    "start": "28500",
    "end": "30480"
  },
  {
    "text": "this also like if you ever did let I in",
    "start": "30480",
    "end": "33540"
  },
  {
    "text": "uh uh JavaScript same same experience",
    "start": "33540",
    "end": "36360"
  },
  {
    "text": "wait for all go routines uh the three",
    "start": "36360",
    "end": "39300"
  },
  {
    "text": "let's see the three created go routines",
    "start": "39300",
    "end": "41040"
  },
  {
    "text": "are all printed the same variable V so",
    "start": "41040",
    "end": "42899"
  },
  {
    "text": "they usually print c c instead of",
    "start": "42899",
    "end": "44820"
  },
  {
    "text": "printing a b and c and some ordering",
    "start": "44820",
    "end": "46379"
  },
  {
    "text": "okay this is cool so you can now just do",
    "start": "46379",
    "end": "48300"
  },
  {
    "text": "this although concurrency is often",
    "start": "48300",
    "end": "49620"
  },
  {
    "text": "involved it does not need to be this",
    "start": "49620",
    "end": "50879"
  },
  {
    "text": "example is the same problem but with no",
    "start": "50879",
    "end": "52620"
  },
  {
    "text": "go routines for I okay we do a little",
    "start": "52620",
    "end": "54719"
  },
  {
    "text": "simple one uh append prints function",
    "start": "54719",
    "end": "56820"
  },
  {
    "text": "print oh there you go yeah there you go",
    "start": "56820",
    "end": "59340"
  },
  {
    "text": "this exact same thing exact same thing",
    "start": "59340",
    "end": "61199"
  },
  {
    "text": "in JavaScript people would create and",
    "start": "61199",
    "end": "63899"
  },
  {
    "text": "immediately invoked function that takes",
    "start": "63899",
    "end": "65580"
  },
  {
    "text": "in the argument and all sorts of crazy",
    "start": "65580",
    "end": "67200"
  },
  {
    "text": "stuff this kind of mistake has caused",
    "start": "67200",
    "end": "69420"
  },
  {
    "text": "production problems and many companies",
    "start": "69420",
    "end": "70860"
  },
  {
    "text": "including publicly documented issue at",
    "start": "70860",
    "end": "72720"
  },
  {
    "text": "let uh at let's encrypt",
    "start": "72720",
    "end": "75600"
  },
  {
    "text": "as an encryption company getting caught",
    "start": "75600",
    "end": "77820"
  },
  {
    "text": "by a for Loop I'm not gonna lie to you",
    "start": "77820",
    "end": "80820"
  },
  {
    "text": "it greatly makes me feel less confident",
    "start": "80820",
    "end": "84360"
  },
  {
    "text": "uh this is actually a really this this",
    "start": "84360",
    "end": "86340"
  },
  {
    "text": "happens in a bunch of languages right it",
    "start": "86340",
    "end": "88439"
  },
  {
    "text": "just can't happen in Rust right",
    "start": "88439",
    "end": "92220"
  },
  {
    "text": "let's not yeah this is a skill issue in",
    "start": "92220",
    "end": "94439"
  },
  {
    "text": "that instance The Accidental capture of",
    "start": "94439",
    "end": "95880"
  },
  {
    "text": "a loop variable was spread across",
    "start": "95880",
    "end": "97320"
  },
  {
    "text": "multiple functions and much more",
    "start": "97320",
    "end": "98520"
  },
  {
    "text": "difficult to notice",
    "start": "98520",
    "end": "100320"
  },
  {
    "text": "nice uh converts the mapping of a domain",
    "start": "100320",
    "end": "103140"
  },
  {
    "text": "to auth2 models into a protobuf",
    "start": "103140",
    "end": "105180"
  },
  {
    "text": "authorization map okay so what do we got",
    "start": "105180",
    "end": "107159"
  },
  {
    "text": "here we get a response we get the",
    "start": "107159",
    "end": "108299"
  },
  {
    "text": "authorizations we go over the range make",
    "start": "108299",
    "end": "109799"
  },
  {
    "text": "a copy of K because it'll be reassigned",
    "start": "109799",
    "end": "111360"
  },
  {
    "text": "in each Loop all right",
    "start": "111360",
    "end": "113040"
  },
  {
    "text": "um there we go OS PB we do a little bit",
    "start": "113040",
    "end": "115200"
  },
  {
    "text": "of that pass in the value return error",
    "start": "115200",
    "end": "116939"
  },
  {
    "text": "if nil append this",
    "start": "116939",
    "end": "119399"
  },
  {
    "text": "okay a reference to K copy bam the uh",
    "start": "119399",
    "end": "122579"
  },
  {
    "text": "let's see the author of this code",
    "start": "122579",
    "end": "123600"
  },
  {
    "text": "clearly understood the uh General",
    "start": "123600",
    "end": "125219"
  },
  {
    "text": "problem because he made a copy of K but",
    "start": "125219",
    "end": "127320"
  },
  {
    "text": "it turns out the model to auth PB used",
    "start": "127320",
    "end": "129780"
  },
  {
    "text": "pointers in the field of V when",
    "start": "129780",
    "end": "131400"
  },
  {
    "text": "constructing yep",
    "start": "131400",
    "end": "134939"
  },
  {
    "text": "yep",
    "start": "135000",
    "end": "136319"
  },
  {
    "text": "classic",
    "start": "136319",
    "end": "138120"
  },
  {
    "text": "didn't didn't V copy only gave him the K",
    "start": "138120",
    "end": "140580"
  },
  {
    "text": "copy you can't dude you can't give the K",
    "start": "140580",
    "end": "142680"
  },
  {
    "text": "copy without the V copy yeah I didn't",
    "start": "142680",
    "end": "145140"
  },
  {
    "text": "see that one okay not not skill issue",
    "start": "145140",
    "end": "147540"
  },
  {
    "text": "anymore to be honest again this is a",
    "start": "147540",
    "end": "149099"
  },
  {
    "text": "tricky one",
    "start": "149099",
    "end": "150180"
  },
  {
    "text": "I see this this was a tricky one",
    "start": "150180",
    "end": "153000"
  },
  {
    "text": "okay",
    "start": "153000",
    "end": "155160"
  },
  {
    "text": "yes you also need to make a copy of heat",
    "start": "155160",
    "end": "156959"
  },
  {
    "text": "tools we uh have been written to",
    "start": "156959",
    "end": "158879"
  },
  {
    "text": "identify these mistakes but it's hard to",
    "start": "158879",
    "end": "160440"
  },
  {
    "text": "analyze whether a reference to a",
    "start": "160440",
    "end": "161819"
  },
  {
    "text": "variable outlived its iteration or not",
    "start": "161819",
    "end": "163500"
  },
  {
    "text": "absolutely it's it's very very hard",
    "start": "163500",
    "end": "165060"
  },
  {
    "text": "these tools must choose between false",
    "start": "165060",
    "end": "166860"
  },
  {
    "text": "negatives and false positives the loop",
    "start": "166860",
    "end": "168780"
  },
  {
    "text": "closure analyzer used by go vet and go",
    "start": "168780",
    "end": "172019"
  },
  {
    "text": "please opts for false negatives only",
    "start": "172019",
    "end": "174360"
  },
  {
    "text": "reporting when it's sure there is a",
    "start": "174360",
    "end": "175980"
  },
  {
    "text": "problem but missing others other",
    "start": "175980",
    "end": "177420"
  },
  {
    "text": "Checkers opt for false positives uh",
    "start": "177420",
    "end": "179700"
  },
  {
    "text": "accusing correct code of being incorrect",
    "start": "179700",
    "end": "181379"
  },
  {
    "text": "we rarely analyze the analysis of",
    "start": "181379",
    "end": "183480"
  },
  {
    "text": "commits adding x equals x lines in open",
    "start": "183480",
    "end": "186000"
  },
  {
    "text": "source go code expecting to find bug",
    "start": "186000",
    "end": "187920"
  },
  {
    "text": "fixes instead we found many unnecessary",
    "start": "187920",
    "end": "189959"
  },
  {
    "text": "lines being added suggesting instead",
    "start": "189959",
    "end": "192000"
  },
  {
    "text": "that popular Checkers have significant",
    "start": "192000",
    "end": "193560"
  },
  {
    "text": "false positive rates but developers add",
    "start": "193560",
    "end": "196080"
  },
  {
    "text": "the lines anyways to keep the checkers",
    "start": "196080",
    "end": "197700"
  },
  {
    "text": "happy",
    "start": "197700",
    "end": "198540"
  },
  {
    "text": "yeah see I don't like that yeah this is",
    "start": "198540",
    "end": "201000"
  },
  {
    "text": "a great this is a great change by the",
    "start": "201000",
    "end": "202739"
  },
  {
    "text": "way and go let's just avoid the whole",
    "start": "202739",
    "end": "204540"
  },
  {
    "text": "effing problem",
    "start": "204540",
    "end": "205739"
  },
  {
    "text": "one pair of examples we found was",
    "start": "205739",
    "end": "207540"
  },
  {
    "text": "particularly Illuminating this uh this",
    "start": "207540",
    "end": "209879"
  },
  {
    "text": "diff was one program",
    "start": "209879",
    "end": "212720"
  },
  {
    "text": "and another program was this",
    "start": "213720",
    "end": "216959"
  },
  {
    "text": "oof",
    "start": "216959",
    "end": "218840"
  },
  {
    "text": "uh let's see one of these two diffs is a",
    "start": "218840",
    "end": "221519"
  },
  {
    "text": "bug fix the other is unnecessary change",
    "start": "221519",
    "end": "223680"
  },
  {
    "text": "you can't tell which is which unless you",
    "start": "223680",
    "end": "225840"
  },
  {
    "text": "know more about the types and functions",
    "start": "225840",
    "end": "227340"
  },
  {
    "text": "involved yeah see that's the thing is I",
    "start": "227340",
    "end": "230159"
  },
  {
    "text": "don't know monitor seems probably",
    "start": "230159",
    "end": "232560"
  },
  {
    "text": "correct but maybe this also isn't",
    "start": "232560",
    "end": "236280"
  },
  {
    "text": "I don't know what this stop channel is I",
    "start": "236280",
    "end": "238860"
  },
  {
    "text": "don't even know how Informer I don't",
    "start": "238860",
    "end": "240360"
  },
  {
    "text": "know anything right here right I don't",
    "start": "240360",
    "end": "242459"
  },
  {
    "text": "even know",
    "start": "242459",
    "end": "243440"
  },
  {
    "text": "uh have you used go routines I know go",
    "start": "243440",
    "end": "245760"
  },
  {
    "text": "routines I'm just curious which one",
    "start": "245760",
    "end": "247140"
  },
  {
    "text": "causes a bug and which one doesn't you",
    "start": "247140",
    "end": "248580"
  },
  {
    "text": "can't tell the fix and go one two two we",
    "start": "248580",
    "end": "250439"
  },
  {
    "text": "plan to change for Loops to make these",
    "start": "250439",
    "end": "251760"
  },
  {
    "text": "variables have a per iteration scope",
    "start": "251760",
    "end": "253500"
  },
  {
    "text": "instead of per Loop scope uh this will",
    "start": "253500",
    "end": "256380"
  },
  {
    "text": "change let's see this change will fix",
    "start": "256380",
    "end": "258419"
  },
  {
    "text": "the examples above so they will also no",
    "start": "258419",
    "end": "261000"
  },
  {
    "text": "longer uh buggy go let's see so that",
    "start": "261000",
    "end": "263580"
  },
  {
    "text": "they are no longer buggy go programs it",
    "start": "263580",
    "end": "265979"
  },
  {
    "text": "will end the production problems caused",
    "start": "265979",
    "end": "267479"
  },
  {
    "text": "by such a mistake and it will remove the",
    "start": "267479",
    "end": "268979"
  },
  {
    "text": "need for imprecise tools that prompt",
    "start": "268979",
    "end": "270660"
  },
  {
    "text": "users to make unnecessary changes to",
    "start": "270660",
    "end": "272160"
  },
  {
    "text": "their code this is a great change by the",
    "start": "272160",
    "end": "273840"
  },
  {
    "text": "way this is a great change to ensure",
    "start": "273840",
    "end": "275880"
  },
  {
    "text": "backwards compatibility with existing",
    "start": "275880",
    "end": "277440"
  },
  {
    "text": "code that was my next question which is",
    "start": "277440",
    "end": "278699"
  },
  {
    "text": "goes like goes really all about",
    "start": "278699",
    "end": "280919"
  },
  {
    "text": "backwards compatibility the new",
    "start": "280919",
    "end": "282720"
  },
  {
    "text": "semantics will only apply in packages",
    "start": "282720",
    "end": "284460"
  },
  {
    "text": "containing a module declared uh go 1.22",
    "start": "284460",
    "end": "287699"
  },
  {
    "text": "or later in their go mod files this per",
    "start": "287699",
    "end": "290520"
  },
  {
    "text": "module decision provides developer",
    "start": "290520",
    "end": "292380"
  },
  {
    "text": "control of gradual updates to their",
    "start": "292380",
    "end": "294300"
  },
  {
    "text": "semantics throughout their code base it",
    "start": "294300",
    "end": "295680"
  },
  {
    "text": "also is possible to use Go slash build",
    "start": "295680",
    "end": "297360"
  },
  {
    "text": "lines to control the decisions per file",
    "start": "297360",
    "end": "299460"
  },
  {
    "text": "okay okay",
    "start": "299460",
    "end": "301380"
  },
  {
    "text": "okay okay that's pretty cool old code",
    "start": "301380",
    "end": "304080"
  },
  {
    "text": "will continue to mean exactly what it",
    "start": "304080",
    "end": "305639"
  },
  {
    "text": "means today uh the fix only applies to",
    "start": "305639",
    "end": "308699"
  },
  {
    "text": "new and updated code this will give",
    "start": "308699",
    "end": "310080"
  },
  {
    "text": "developers control over when the",
    "start": "310080",
    "end": "311280"
  },
  {
    "text": "semantics change to a particular package",
    "start": "311280",
    "end": "312600"
  },
  {
    "text": "as consequences of our forward",
    "start": "312600",
    "end": "314040"
  },
  {
    "text": "compatibility work yeah I mean you have",
    "start": "314040",
    "end": "316080"
  },
  {
    "text": "to do forward compatibility stuff",
    "start": "316080",
    "end": "317340"
  },
  {
    "text": "sometimes it's not great uh basically",
    "start": "317340",
    "end": "319919"
  },
  {
    "text": "rushed editions yeah yeah you got it uh",
    "start": "319919",
    "end": "322440"
  },
  {
    "text": "let's see go one two one will not",
    "start": "322440",
    "end": "324840"
  },
  {
    "text": "attempt to compile code that declares go",
    "start": "324840",
    "end": "326520"
  },
  {
    "text": "one two two or later will that make",
    "start": "326520",
    "end": "328259"
  },
  {
    "text": "sense we will include a special case",
    "start": "328259",
    "end": "329820"
  },
  {
    "text": "with the same effect uh in the point",
    "start": "329820",
    "end": "331500"
  },
  {
    "text": "releases of go one two 128 and 119 13 so",
    "start": "331500",
    "end": "336240"
  },
  {
    "text": "that go 122 is released uh one go one",
    "start": "336240",
    "end": "338759"
  },
  {
    "text": "two two is released the code written",
    "start": "338759",
    "end": "340320"
  },
  {
    "text": "depending on the new semantics will",
    "start": "340320",
    "end": "341639"
  },
  {
    "text": "never be compiled with the old semantics",
    "start": "341639",
    "end": "343320"
  },
  {
    "text": "unless people are using a very old",
    "start": "343320",
    "end": "344639"
  },
  {
    "text": "version of unsupported go okay you can",
    "start": "344639",
    "end": "346919"
  },
  {
    "text": "go preview the fix you can do a little",
    "start": "346919",
    "end": "348780"
  },
  {
    "text": "go experiment Loop VAR okay fixing a",
    "start": "348780",
    "end": "351479"
  },
  {
    "text": "buggy test although we had no production",
    "start": "351479",
    "end": "353039"
  },
  {
    "text": "problems to prepare for that switch we",
    "start": "353039",
    "end": "354840"
  },
  {
    "text": "did uh have to correct many buggy tests",
    "start": "354840",
    "end": "357120"
  },
  {
    "text": "that we're not testing what they thought",
    "start": "357120",
    "end": "358320"
  },
  {
    "text": "they were testing like this oh that's",
    "start": "358320",
    "end": "359699"
  },
  {
    "text": "funny they had their own test breaking",
    "start": "359699",
    "end": "363840"
  },
  {
    "text": "think about think about how that has to",
    "start": "363840",
    "end": "366060"
  },
  {
    "text": "feel when you make a change to be like",
    "start": "366060",
    "end": "368280"
  },
  {
    "text": "okay this is correct go code all right",
    "start": "368280",
    "end": "370919"
  },
  {
    "text": "me the go compiler writer who's an",
    "start": "370919",
    "end": "372960"
  },
  {
    "text": "expert at go let me just oh we have a",
    "start": "372960",
    "end": "375060"
  },
  {
    "text": "bunch of test breaking laughs",
    "start": "375060",
    "end": "379380"
  },
  {
    "text": "like if even the expert of experts at go",
    "start": "379979",
    "end": "385139"
  },
  {
    "text": "can't write it correctly",
    "start": "385139",
    "end": "388440"
  },
  {
    "text": "it's a good feature can we all agree",
    "start": "388440",
    "end": "390000"
  },
  {
    "text": "that's probably a good feature at this",
    "start": "390000",
    "end": "391259"
  },
  {
    "text": "point probably a good feature Tessa",
    "start": "391259",
    "end": "393660"
  },
  {
    "text": "wrong is the worst test wrong are",
    "start": "393660",
    "end": "395460"
  },
  {
    "text": "actually the worst",
    "start": "395460",
    "end": "397139"
  },
  {
    "text": "they're actually the worst yeah that's",
    "start": "397139",
    "end": "398940"
  },
  {
    "text": "actually really funny oh man",
    "start": "398940",
    "end": "401400"
  },
  {
    "text": "oh man test all even buggy that is so",
    "start": "401400",
    "end": "405780"
  },
  {
    "text": "funny",
    "start": "405780",
    "end": "406800"
  },
  {
    "text": "that is just so dang funny ah love it I",
    "start": "406800",
    "end": "411840"
  },
  {
    "text": "love go so much I actually do like go",
    "start": "411840",
    "end": "413340"
  },
  {
    "text": "quite a bit uh let's help those losers I",
    "start": "413340",
    "end": "416160"
  },
  {
    "text": "loved I love go quite a bit so I'm happy",
    "start": "416160",
    "end": "418500"
  },
  {
    "text": "with all good changes positive changes a",
    "start": "418500",
    "end": "420720"
  },
  {
    "text": "hundred percent uh uh code coverage on",
    "start": "420720",
    "end": "423539"
  },
  {
    "text": "point dude I know this is exactly why uh",
    "start": "423539",
    "end": "426180"
  },
  {
    "text": "code coverage is just such a stupid term",
    "start": "426180",
    "end": "428280"
  },
  {
    "text": "is because you can just make bad ones",
    "start": "428280",
    "end": "430620"
  },
  {
    "text": "try it out hmx plus go yesterday it's",
    "start": "430620",
    "end": "432539"
  },
  {
    "text": "glorious it is it's legitimately",
    "start": "432539",
    "end": "434100"
  },
  {
    "text": "glorious hey I like go",
    "start": "434100",
    "end": "436740"
  },
  {
    "text": "go 1.22 is getting better we're starting",
    "start": "436740",
    "end": "439080"
  },
  {
    "text": "to get all these great generic functions",
    "start": "439080",
    "end": "440940"
  },
  {
    "text": "of types where you can just do Min and",
    "start": "440940",
    "end": "442740"
  },
  {
    "text": "Max and all these things on any numbers",
    "start": "442740",
    "end": "444539"
  },
  {
    "text": "and things are just starting to work so",
    "start": "444539",
    "end": "446400"
  },
  {
    "text": "goes actually becoming like a really",
    "start": "446400",
    "end": "448500"
  },
  {
    "text": "good modern language and I'm getting",
    "start": "448500",
    "end": "450479"
  },
  {
    "text": "very very very excited for its future",
    "start": "450479",
    "end": "453360"
  },
  {
    "text": "love to see this love to see some of the",
    "start": "453360",
    "end": "456000"
  },
  {
    "text": "fixes coming in down the pipe let's go",
    "start": "456000",
    "end": "460020"
  },
  {
    "text": "a Jen",
    "start": "460020",
    "end": "462680"
  }
]