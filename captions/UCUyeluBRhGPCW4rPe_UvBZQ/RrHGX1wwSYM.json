[
  {
    "text": "so this is what we're going to be discussing today which is this performance diagram which is 1 billion nested Loop iterations thus showing zigg",
    "start": "240",
    "end": "8200"
  },
  {
    "text": "as the fastest of them all then rust and C they're all really really close Fortran did really good Odin Dart",
    "start": "8200",
    "end": "14839"
  },
  {
    "text": "they're all pretty far up there and then at the very very bottom you got languages like R Lua python Ruby Ruby",
    "start": "14839",
    "end": "21160"
  },
  {
    "text": "wet kind of what you would I guess what people would generally expect to see if",
    "start": "21160",
    "end": "26320"
  },
  {
    "text": "you were to measure such a loop uh kind of this distribution the fast languages on top the slow and interpreted",
    "start": "26320",
    "end": "31840"
  },
  {
    "text": "languages more on the bottom but we are going to Deep dive in it and what we have on today is Casey who is much",
    "start": "31840",
    "end": "38960"
  },
  {
    "text": "better than I am at all these type of things and he will be able to explain to us perhaps some of the downfalls of this",
    "start": "38960",
    "end": "44399"
  },
  {
    "text": "type of approach what is it really actually measuring and if this is really even a good thing to consider ever or",
    "start": "44399",
    "end": "50879"
  },
  {
    "text": "for any reason is that fair is that a fair intro that that is a fair intro Prime and and I think also I don't know",
    "start": "50879",
    "end": "57960"
  },
  {
    "text": "if you wanted to maybe start with sort of a a a slightly more abstract comment which is because you",
    "start": "57960",
    "end": "65880"
  },
  {
    "text": "said this and I 100% agree with you these bouncy back and forth diagrams are",
    "start": "65880",
    "end": "72240"
  },
  {
    "text": "not good to begin with and I feel like you you said you didn't want to elaborate but I would appreciate it if",
    "start": "72240",
    "end": "77799"
  },
  {
    "text": "you'd elaborate because I'd like to know your thoughts on this since I am not a fan of these diagrams myself okay so generally my my General elaborations on",
    "start": "77799",
    "end": "86119"
  },
  {
    "text": "these ones is say you want to choose a language that is both convenient and fairly fast and so you go to one of",
    "start": "86119",
    "end": "92479"
  },
  {
    "text": "these kind of items and you see on here okay I got Zig rust and see okay those are like hard languages okay go down",
    "start": "92479",
    "end": "98280"
  },
  {
    "text": "here and I see that go and node are effectively the exact same speed you can see right here they're almost the exact",
    "start": "98280",
    "end": "104200"
  },
  {
    "text": "same speed the difference between 1 second versus 1.1 second right so you're just like oh I can really just use go or",
    "start": "104200",
    "end": "111479"
  },
  {
    "text": "I can really just use node I like JavaScript so I should have the same speed as both go or JavaScript and this",
    "start": "111479",
    "end": "116600"
  },
  {
    "text": "is like a giant lie and the reason why is that uh in the node world when it",
    "start": "116600",
    "end": "121840"
  },
  {
    "text": "starts running you are going to get some sort of jitting that's going to happen and something's going to run and which is going to make this a fairly fast",
    "start": "121840",
    "end": "128399"
  },
  {
    "text": "operation but this doesn't look like any real programming no one has a for loop as a service let alone a billion for",
    "start": "128399",
    "end": "134840"
  },
  {
    "text": "loop as a service this is just not real there's no memory being created which is a very big downfall of say node versus",
    "start": "134840",
    "end": "140879"
  },
  {
    "text": "go there's all these things that happen right like even here bun is somehow faster than go which makes me just have",
    "start": "140879",
    "end": "146840"
  },
  {
    "text": "so many questions as to even how this is written because how it's measured involves running the",
    "start": "146840",
    "end": "153760"
  },
  {
    "text": "program which will take in a command line argument and then run measure how long it takes and then spit it back out and does it like three times if I'm not",
    "start": "153760",
    "end": "160239"
  },
  {
    "text": "mistaken now you have to go okay well when it runs bun bun runs and then loads up JavaScript core and then JavaScript",
    "start": "160239",
    "end": "167080"
  },
  {
    "text": "core interprets it at some point JavaScript optimizes and then at some core at some point JavaScript core is going to run it maybe it doesn't even",
    "start": "167080",
    "end": "173040"
  },
  {
    "text": "optimize it I don't even know what it does right whereas go should just run the thing so go being slower already",
    "start": "173040",
    "end": "178400"
  },
  {
    "text": "shows me that there's likely errors in this measurement and then on top of that that it's going to make people look at these things and go oh it's all the same",
    "start": "178400",
    "end": "185080"
  },
  {
    "text": "anyways and it's like no it's actually massively different if you were to write a server throw in some like handling of",
    "start": "185080",
    "end": "190440"
  },
  {
    "text": "requests and this thing could be 10 times faster and you're getting about the same difficulty of programming it just makes people make bad guesses when",
    "start": "190440",
    "end": "198040"
  },
  {
    "text": "they don't even know like they don't understand why these are destructive or not informative uh diagram shall I say",
    "start": "198040",
    "end": "205159"
  },
  {
    "text": "so that's my personal feeling is always measure real things don't measure fake small things",
    "start": "205159",
    "end": "210640"
  },
  {
    "text": "so that's a that's an excellent point that's even drilled down even a little further than I was even than I was",
    "start": "210640",
    "end": "216319"
  },
  {
    "text": "thinking I was just literally thinking at the top level those bouncing bars",
    "start": "216319",
    "end": "221760"
  },
  {
    "text": "that go back and forth what what is that telling like I literally can't read that",
    "start": "221760",
    "end": "227519"
  },
  {
    "text": "I don't know about you but like you look at it like you look and there's two things that are the same number almost",
    "start": "227519",
    "end": "232599"
  },
  {
    "text": "and their bars are kind of bouncing back I guess at similar speed but I can't tell it's it's like it's bad visual",
    "start": "232599",
    "end": "240000"
  },
  {
    "text": "visualization just to begin with before we even talk about all the things that you just talked about all of which are",
    "start": "240000",
    "end": "246200"
  },
  {
    "text": "completely valid as well it's like the presentation of this Benchmark already",
    "start": "246200",
    "end": "251280"
  },
  {
    "text": "was a problem right uh but so so I was literally talking about just the bouncing ball part of it but but all the",
    "start": "251280",
    "end": "257959"
  },
  {
    "text": "things you said are true too yeah sorry that's that's what I think is destructive but yes I I think you're also right on that which is that this",
    "start": "257959",
    "end": "264360"
  },
  {
    "text": "it's very hard like cuz if you were to kind of like scroll into it like now you're just like wow things are just moving all over the place",
    "start": "264360",
    "end": "271600"
  },
  {
    "text": "it's very hard to see why this is actually this one is so much faster than this one CU you're like ah it's just kind of off yeah like I don't know like",
    "start": "271600",
    "end": "279039"
  },
  {
    "text": "which one's FAS you can tell the bottom slower than the top that's about it but anyway um yeah for this particular",
    "start": "279039",
    "end": "285680"
  },
  {
    "text": "Benchmark it was very very strange I guess uh we can talk about sort of the high level stuff like that you just",
    "start": "285680",
    "end": "291280"
  },
  {
    "text": "mentioned and then we'll go in I I prepared some things because I really wanted to talk about the the sort of",
    "start": "291280",
    "end": "297400"
  },
  {
    "text": "some underlying things about benchmarks that think are important I would love to hear this so uh the first thing I would",
    "start": "297400",
    "end": "304320"
  },
  {
    "text": "say is this is this is one of those things where I I want to make a",
    "start": "304320",
    "end": "310280"
  },
  {
    "text": "distinction between what I would call A Benchmark for comparison purposes and",
    "start": "310280",
    "end": "317560"
  },
  {
    "text": "and I wish we had different names for these a benchmark for comparison purposes versus a benchmark for",
    "start": "317560",
    "end": "323240"
  },
  {
    "text": "demonstration purposes and one of the big reasons I wanted to do this stream today uh well one of the reason I wanted",
    "start": "323240",
    "end": "329880"
  },
  {
    "text": "to do it last week but unfortunately I couldn't make it I wanted to do this stream was that uh I feel like this is",
    "start": "329880",
    "end": "336400"
  },
  {
    "text": "not talked about and people I think get the wrong Impressions because they see people doing certain benchmarks possibly",
    "start": "336400",
    "end": "344199"
  },
  {
    "text": "people uh who they trust doing certain benchmarks and then they go oh okay",
    "start": "344199",
    "end": "351479"
  },
  {
    "text": "that's how you do a comparison between two things and then they do I'm going to",
    "start": "351479",
    "end": "356759"
  },
  {
    "text": "do that for languages right so you look at someone uh who who does some kind of",
    "start": "356759",
    "end": "362960"
  },
  {
    "text": "a benchmarking like agner fog or Daniel l or somebody who's a performance expert is doing",
    "start": "362960",
    "end": "368840"
  },
  {
    "text": "this and you see them running this thing which oftentimes we will some call like a micro Benchmark like the things in",
    "start": "368840",
    "end": "376440"
  },
  {
    "text": "this uh that that are shown here they're very tiny there's almost no code in them",
    "start": "376440",
    "end": "381639"
  },
  {
    "text": "I'll bring up code while you keep on going oh yes um uh there's almost no code in these benchmarks and uh that",
    "start": "381639",
    "end": "389599"
  },
  {
    "text": "that they're actually comparing right and it's possible that the person who's",
    "start": "389599",
    "end": "395759"
  },
  {
    "text": "doing that is an expert and the reason that they have created this very very small piece of code is to isolate some",
    "start": "395759",
    "end": "404520"
  },
  {
    "text": "very specific thing that either they're trying to learn about meaning they're trying to probe some Hardware Thing by",
    "start": "404520",
    "end": "410440"
  },
  {
    "text": "constructing just the right sequence or they're trying to demonstrate it to you so I I will show",
    "start": "410440",
    "end": "416560"
  },
  {
    "text": "these sometimes I'll I'll make a little Benchmark I'll be like here and we'll change this one thing did you see that change and then I'll say that change is",
    "start": "416560",
    "end": "423319"
  },
  {
    "text": "because of this right okay now people take away from that sometimes an",
    "start": "423319",
    "end": "429720"
  },
  {
    "text": "erroneous conclusion which is that that Benchmark is like proving that thing or",
    "start": "429720",
    "end": "435960"
  },
  {
    "text": "that is something we would use to compare two things knowing nothing else but that's not true you wouldn't do that",
    "start": "435960",
    "end": "442520"
  },
  {
    "text": "what that was was an exploration or a demonstration a thing that after already",
    "start": "442520",
    "end": "448000"
  },
  {
    "text": "having understood the problem and had a very complete model for what the machine was doing we then poked at",
    "start": "448000",
    "end": "454639"
  },
  {
    "text": "this one thing in a specific way to show it to you or to confirm it for ourselves",
    "start": "454639",
    "end": "459759"
  },
  {
    "text": "one or the other right okay yeah I get that in no circumstance should anyone be",
    "start": "459759",
    "end": "465639"
  },
  {
    "text": "using that as a like a language Benchmark like here's how this language",
    "start": "465639",
    "end": "470840"
  },
  {
    "text": "performs right at at at the very maximal use of it you would only want to say oh",
    "start": "470840",
    "end": "477639"
  },
  {
    "text": "I decided to test this one thing about languages I know how they all work I isolated all of these parts of the",
    "start": "477639",
    "end": "483639"
  },
  {
    "text": "languages and then I poked at this little thing and here I'm showing you how each one handles this aspect of you",
    "start": "483639",
    "end": "490080"
  },
  {
    "text": "know in this case Loops let's say totally valid but if you're just like language benchmarks here's loops and it",
    "start": "490080",
    "end": "497120"
  },
  {
    "text": "just you show this thing it's like no no no no no no no like that is not at all an acceptable way to use that kind of a",
    "start": "497120",
    "end": "503400"
  },
  {
    "text": "benchmark and so I'd like to draw a distinction between that kind of Benchmark and the kind of benchmarks that people are are then in their head",
    "start": "503400",
    "end": "510599"
  },
  {
    "text": "interpreting the results to be and those are the kinds like like The Gamers Nexus runs or Hardware unboxed where they're",
    "start": "510599",
    "end": "517000"
  },
  {
    "text": "like we took Harry Potter and we ran around this part of the like Hogwart",
    "start": "517000",
    "end": "522159"
  },
  {
    "text": "school and we saw which GPU ran it the fastest right and then they show a chart",
    "start": "522159",
    "end": "527680"
  },
  {
    "text": "not unlike well they show better charts than that bouncing one but you know they show a chart and they're like the 4090",
    "start": "527680",
    "end": "533800"
  },
  {
    "text": "is 20% faster than the 4070 or something people look at these benchmarks like",
    "start": "533800",
    "end": "541000"
  },
  {
    "text": "this language benchmarks which are showing not at all what they think they're showing they're interpreting them as those kind of Benchmark and",
    "start": "541000",
    "end": "547839"
  },
  {
    "text": "that's a benchmark for comparison purposes and that to me is the thing I wanted to start off just sort of really",
    "start": "547839",
    "end": "554880"
  },
  {
    "text": "underscoring is you have to if you're building benchmarks you have to know what you are building them for and if",
    "start": "554880",
    "end": "561800"
  },
  {
    "text": "you're planning to do something like comparison like let's see how R does versus C in something you cannot just do",
    "start": "561800",
    "end": "570000"
  },
  {
    "text": "you you can't put it out there like it's sort of this Benchmark like the the The Gamers Nexus like how fast is my GPU",
    "start": "570000",
    "end": "576880"
  },
  {
    "text": "kind of Benchmark which is running real workloads that you actually care about gigantic you know massive gaming setups",
    "start": "576880",
    "end": "583360"
  },
  {
    "text": "and running them and actually seeing which thing's fastest you can't compare it to something like this which is just",
    "start": "583360",
    "end": "588440"
  },
  {
    "text": "like hey we made a loop and we're not really sure what it's doing you know what I mean so so there I'll just say that first if that makes sense I I do I",
    "start": "588440",
    "end": "595760"
  },
  {
    "text": "think that makes sense and even to the like the The Gamers Nexus comment there's still comparing a specific spot",
    "start": "595760",
    "end": "601399"
  },
  {
    "text": "with a set of specific things that are running and saying in this one simulation it's running 20% faster it's",
    "start": "601399",
    "end": "607560"
  },
  {
    "text": "not even saying that this card in all cases runs 20% faster it's like no in Hogwarts in this in you know in Raven",
    "start": "607560",
    "end": "615519"
  },
  {
    "text": "claw headquarters it's 20% faster so it's like it's trying to draw a distinction In This Moment In This Time",
    "start": "615519",
    "end": "620959"
  },
  {
    "text": "It's very specific whereas this was not presented as a very specific thing but actually as like a generalized thing and",
    "start": "620959",
    "end": "627160"
  },
  {
    "text": "I think I think that makes a lot of sense because I I guess I didn't really think about it from that way you're taking a singular operation and you're",
    "start": "627160",
    "end": "634120"
  },
  {
    "text": "extending it to be the representation of the whole it's like saying that if you could only see just you know it's like",
    "start": "634120",
    "end": "639720"
  },
  {
    "text": "the the the classic old uh elephant argument where they're like you know the the argument for relativism where it's",
    "start": "639720",
    "end": "644880"
  },
  {
    "text": "like you know one person's touching the trunk and they're saying oh well an elephant has a really long nose and another person's touching a leg and be",
    "start": "644880",
    "end": "650320"
  },
  {
    "text": "like no it actually has really strong tree trunk like item right it's just like okay yes we get it like this is not",
    "start": "650320",
    "end": "655920"
  },
  {
    "text": "a good generalization of what the hole is it's just this is a very specific uh",
    "start": "655920",
    "end": "661079"
  },
  {
    "text": "very narrow test to say what is faster for this one single thing yes and uh and",
    "start": "661079",
    "end": "668440"
  },
  {
    "text": "not even that as we'll see in a second so when uh so when you know let's just",
    "start": "668440",
    "end": "674519"
  },
  {
    "text": "talk really quickly before we get into those nitty grey details because the nitty GRE I think are very interesting and they are Al something I want to talk",
    "start": "674519",
    "end": "680040"
  },
  {
    "text": "about but the so the you know moving to like what would you want to see so it",
    "start": "680040",
    "end": "685800"
  },
  {
    "text": "let's suppose we were doing a benchmark on Loop looping in languages what would we want to see we want to see something",
    "start": "685800",
    "end": "691279"
  },
  {
    "text": "like Gamers Nexus here's uh so again you look at one of those things Hardware box",
    "start": "691279",
    "end": "696519"
  },
  {
    "text": "Gamers Nexus I don't Linus Tech tips I don't know who are the people who do these kind of benchmarks for gamers right um but you look at what they do",
    "start": "696519",
    "end": "704720"
  },
  {
    "text": "and like you pointed out it's not just Hogwarts even they're like oh okay we you know we did Harry Potter and we did",
    "start": "704720",
    "end": "711000"
  },
  {
    "text": "Call of Duty and we do this and that and that and they show like 41 games or something on that chart right so not",
    "start": "711000",
    "end": "717519"
  },
  {
    "text": "only are they running real things that the gamer actually wants to use this",
    "start": "717519",
    "end": "722600"
  },
  {
    "text": "card for so that there's no like contrivances they're not just like running little how fast triang pixel",
    "start": "722600",
    "end": "729560"
  },
  {
    "text": "yeah it's showing a real workload but it's also showing a variety of workloads",
    "start": "729560",
    "end": "734680"
  },
  {
    "text": "right and so what we would want to see for a language test is something like that 40 representative large like things",
    "start": "734680",
    "end": "742000"
  },
  {
    "text": "that involve looping that that have heavy looped elements to them those",
    "start": "742000",
    "end": "747600"
  },
  {
    "text": "workloads written in all the different languages and then run that that's what you would want to see right and then the",
    "start": "747600",
    "end": "753639"
  },
  {
    "text": "person can look at the source to it and look at the performance of it and go oh how easy does this Source look to me to",
    "start": "753639",
    "end": "759880"
  },
  {
    "text": "create how easy is it for me to read do I like the language and then what's the performance of the language how much am",
    "start": "759880",
    "end": "765399"
  },
  {
    "text": "I giving up versus this other language that would be very useful but not like this is not useful at all as as we'll",
    "start": "765399",
    "end": "772360"
  },
  {
    "text": "see can I can I throw something else in there also like saying this is a loop in",
    "start": "772360",
    "end": "777519"
  },
  {
    "text": "a language is all it it feels a bit stupid and what I what I mean by stupid is that I would assume that the slowest",
    "start": "777519",
    "end": "784880"
  },
  {
    "text": "part of this entire Loop has nothing to do with the loop itself because I assume the loop itself is an add instruction",
    "start": "784880",
    "end": "791199"
  },
  {
    "text": "and a jump instruction or some sort of comparison jump instruction like that's what the loop is like are you actually",
    "start": "791199",
    "end": "796920"
  },
  {
    "text": "gaining so if you do any other any other workload it seems to me is like what you're really testing is the workload",
    "start": "796920",
    "end": "803079"
  },
  {
    "text": "you're not even really testing the loop cuz I assume the loop shows up very small comparatively to any workload you",
    "start": "803079",
    "end": "808760"
  },
  {
    "text": "could even even do anyways well and this matters more than",
    "start": "808760",
    "end": "814160"
  },
  {
    "text": "even uh than even you would think at first uh blush because so first of all",
    "start": "814160",
    "end": "819720"
  },
  {
    "text": "in compiled languages uh that are going to be generating very efficient code",
    "start": "819720",
    "end": "825199"
  },
  {
    "text": "what you said is kind of literally true right meaning it's going to produce a very straightforward you know uh",
    "start": "825199",
    "end": "831920"
  },
  {
    "text": "increment or decrement depending on how itd structure the loop and then uh a comparison and a jump or it might not",
    "start": "831920",
    "end": "837880"
  },
  {
    "text": "even do a comparison jump it might just use the the decrement to to do the jump depends what it does right that's how",
    "start": "837880",
    "end": "842920"
  },
  {
    "text": "creative it wants to be but you know something like that and those instructions are going to be probably",
    "start": "842920",
    "end": "849880"
  },
  {
    "text": "hidden in the shadow of all the other things you're doing and will almost end up being free usually right yeah um and",
    "start": "849880",
    "end": "858480"
  },
  {
    "text": "uh and so what you risk when you when you test them like this is you're like well you risk testing how efficiently it",
    "start": "858480",
    "end": "865839"
  },
  {
    "text": "generated those things because there's no work necessarily some we you know not in this particular because we're going",
    "start": "865839",
    "end": "871480"
  },
  {
    "text": "to talk about this Loop has some really bad issues that we're going to talk about in a second that make it even worse than this by saying if you were to",
    "start": "871480",
    "end": "877199"
  },
  {
    "text": "construct some even more simplistic Loop than this one you run the risk of measuring something the compiler is",
    "start": "877199",
    "end": "883160"
  },
  {
    "text": "doing that you will never actually care about in practice because if it was slightly less efficient as generating",
    "start": "883160",
    "end": "888600"
  },
  {
    "text": "those uh sort of loop uh M maintenance instructions you would never know if you",
    "start": "888600",
    "end": "893759"
  },
  {
    "text": "had normal work in there you just wouldn't know because that you have other the CPU is just going to chew through them as a sideband thing it",
    "start": "893759",
    "end": "899199"
  },
  {
    "text": "doesn't even look at anyway so so there's that but suppose we're in a language that's not very efficient right",
    "start": "899199",
    "end": "907120"
  },
  {
    "text": "well then what we're saying makes even more could could become even more important suppose you're a language",
    "start": "907120",
    "end": "913240"
  },
  {
    "text": "where it's like all the arithm arithmetic including the loop like for I part is done in like big int or",
    "start": "913240",
    "end": "920240"
  },
  {
    "text": "something right it's like it's like the language only has doubles and and the loops are done in doubles like who knows",
    "start": "920240",
    "end": "926079"
  },
  {
    "text": "right you could imagine some weird things about language that would come into play here yeah well then when you",
    "start": "926079",
    "end": "932040"
  },
  {
    "text": "measure the loop the performance of this loop it's going to be like oh my God like it the the loop overhead is massive",
    "start": "932040",
    "end": "938800"
  },
  {
    "text": "because it has to do all this extra work on every Loop iteration but then you realize well okay the loop overhead",
    "start": "938800",
    "end": "946000"
  },
  {
    "text": "though for this language won't be all that massive uh compared to what the Loop's actually going to do which is",
    "start": "946000",
    "end": "952279"
  },
  {
    "text": "gonna also have to do all that stuff so it's like yes this is that just means this is a relatively slow language but",
    "start": "952279",
    "end": "958639"
  },
  {
    "text": "it wouldn't necessarily tell you anything that like the loop performance of that language needs to be improved",
    "start": "958639",
    "end": "963880"
  },
  {
    "text": "because that's not really what's going on what's going on is you're just writing in a language that has very expensive integers and you have to",
    "start": "963880",
    "end": "970160"
  },
  {
    "text": "understand that or be okay with that you had to have chosen that right so again even in that case where you think it's",
    "start": "970160",
    "end": "975720"
  },
  {
    "text": "telling you something it's really possibly misleading you even then um and so I just want to I just want to get",
    "start": "975720",
    "end": "982600"
  },
  {
    "text": "that out there that's it's like when you don't have a loop body that's actually doing anything you draw very odd",
    "start": "982600",
    "end": "988240"
  },
  {
    "text": "conclusions about what's going on and that's just not a great place to be right so we'll say that interesting yeah",
    "start": "988240",
    "end": "994560"
  },
  {
    "text": "I actually never even thought about even just the integer representation could be an expensive or inexpensive thing I mean JavaScript only in the last what five",
    "start": "994560",
    "end": "1002959"
  },
  {
    "text": "six years got Smee small integers where they don't actually have to be Heap allocated they're actually just a part",
    "start": "1002959",
    "end": "1008920"
  },
  {
    "text": "of the Heap address instead with a little tag in front of it and so like those are those are just fundamentally",
    "start": "1008920",
    "end": "1013959"
  },
  {
    "text": "cheaper because now they're they're just uh you know they're just they're the thing as opposed to a pointer to the",
    "start": "1013959",
    "end": "1019199"
  },
  {
    "text": "thing and so that could be a massive difference between languages that say don't ever have that any sort of interpreted language and so yeah I never",
    "start": "1019199",
    "end": "1025199"
  },
  {
    "text": "even thought about that that's really interesting uh well let's dive in then I assume unless you have any other stuff",
    "start": "1025199",
    "end": "1030678"
  },
  {
    "text": "you want to talk about high level no no I can we can we can do a code review of emoji code if you want to at some point",
    "start": "1030679",
    "end": "1036600"
  },
  {
    "text": "since I I totally I you're gonna have to explain it all to me though because I don't I do not know Emoji code oh I know",
    "start": "1036600",
    "end": "1042720"
  },
  {
    "text": "it I only know how to read it all right I'm gonna put you big screen okay",
    "start": "1042720",
    "end": "1049360"
  },
  {
    "text": "you can cover me too I'm not too worried about being covered no no you got where are you prime you're not there at all I'm not there at all and I think it's",
    "start": "1049360",
    "end": "1055080"
  },
  {
    "text": "okay because we got to keep you on no we got to have a prime face you can't it can't show up above maybe if it can't it",
    "start": "1055080",
    "end": "1061760"
  },
  {
    "text": "can't that's fine with me of course it can but hold on there it is yeah here let me let me make myself real small",
    "start": "1061760",
    "end": "1066880"
  },
  {
    "text": "yeah that's what we want there you go hey look how small I am now perfect now I gotta do one more one more flipping",
    "start": "1066880",
    "end": "1072919"
  },
  {
    "text": "again just you got to flip every time whoop There we go yep okay uh so here is",
    "start": "1072919",
    "end": "1080240"
  },
  {
    "text": "that source code that you just had up this is uh for the C version could you",
    "start": "1080240",
    "end": "1085720"
  },
  {
    "text": "zoom in a couple times for us yes yeah typically you want to pretend like you have really bad Vision when you're on",
    "start": "1085720",
    "end": "1091600"
  },
  {
    "text": "YouTube is that good or yeah yeah that I mean that I think that's fine is everyone fine with",
    "start": "1091600",
    "end": "1097559"
  },
  {
    "text": "that I think everyone is generally fine people are saying what is this ID people just have not they can't handle the",
    "start": "1097559",
    "end": "1103760"
  },
  {
    "text": "notepad++ they just don't have that energy uh this is just this is not an",
    "start": "1103760",
    "end": "1109559"
  },
  {
    "text": "IDE or anything it's just uh it's just notepad++ so I can show some code Snippets yeah um I don't use notepad++",
    "start": "1109559",
    "end": "1116559"
  },
  {
    "text": "for programming I do use it for this purpose though if I'm pulling up random things so that that that part is true",
    "start": "1116559",
    "end": "1122520"
  },
  {
    "text": "okay I'd first like to start off with a knit obviously you have a space between function name and parenthesis I find",
    "start": "1122520",
    "end": "1127919"
  },
  {
    "text": "this to be completely rework the whole code I I do or they do they do Whoever",
    "start": "1127919",
    "end": "1135039"
  },
  {
    "text": "has it on here triggered I'm completely triggered right now I don't think I I never do that so that",
    "start": "1135039",
    "end": "1142320"
  },
  {
    "text": "that's them that's whoever submitted the C Benchmark uh code here okay all right",
    "start": "1142320",
    "end": "1148200"
  },
  {
    "text": "sorry for interrupting let's start no no um so if we take a look at this code",
    "start": "1148200",
    "end": "1154120"
  },
  {
    "text": "right um you could see this I'll explain the general structure of it really",
    "start": "1154120",
    "end": "1159400"
  },
  {
    "text": "quickly and I can also explain sort of probably why it looks the way it does",
    "start": "1159400",
    "end": "1164960"
  },
  {
    "text": "I'm guessing what happened here you know I'm just just imagining in my head what probably happened here is when they",
    "start": "1164960",
    "end": "1171760"
  },
  {
    "text": "were writing these benchmarks what they found is that you know quote unquote aot",
    "start": "1171760",
    "end": "1176840"
  },
  {
    "text": "languages right like ahead of time comp compilation languages like C uh like",
    "start": "1176840",
    "end": "1182080"
  },
  {
    "text": "Odin like rust you know probably things like go as well I'm not sure uh to what",
    "start": "1182080",
    "end": "1188400"
  },
  {
    "text": "extent I don't have much experience with yeah Go's ahead of time compilation it's ahead of time and and so you know I",
    "start": "1188400",
    "end": "1194960"
  },
  {
    "text": "assume it would do this I just don't know if it does or not but those languages is you know that go through llvm backends and stuff like that as",
    "start": "1194960",
    "end": "1202240"
  },
  {
    "text": "well what they're going to do is they're going to eliminate these Loops pretty",
    "start": "1202240",
    "end": "1207640"
  },
  {
    "text": "aggressively so if you don't put something in here inside the body of the",
    "start": "1207640",
    "end": "1213200"
  },
  {
    "text": "loop that is unpredictable right then these Loops will just collapse the the",
    "start": "1213200",
    "end": "1219760"
  },
  {
    "text": "compilers will just look at what you did run it basically produce the result and",
    "start": "1219760",
    "end": "1225600"
  },
  {
    "text": "replace the loop with the result right so what you can see them doing here and",
    "start": "1225600",
    "end": "1231280"
  },
  {
    "text": "I do not fundamentally understand why it looks like it does here maybe for other",
    "start": "1231280",
    "end": "1236880"
  },
  {
    "text": "languages but what they're doing is trying to get external information that cannot be predicted and to use that in",
    "start": "1236880",
    "end": "1244720"
  },
  {
    "text": "the body of the loop so the loops won't go away so you can see them one thing they're doing is they're reading a",
    "start": "1244720",
    "end": "1251080"
  },
  {
    "text": "integer from the command line and see for those of you who don't know these are the command line arguments here this",
    "start": "1251080",
    "end": "1256880"
  },
  {
    "text": "argv uh you know first first one zero is the name of the executable the second",
    "start": "1256880",
    "end": "1262520"
  },
  {
    "text": "one is the first thing that the person put after that so when you type it in so here you can see them they're they're",
    "start": "1262520",
    "end": "1268120"
  },
  {
    "text": "reading it in they're converting it to an integer so that they have a value U that is not known to the compiler right",
    "start": "1268120",
    "end": "1275760"
  },
  {
    "text": "compiler can't know what U is because it comes from the user and they're using that as a mod as",
    "start": "1275760",
    "end": "1281720"
  },
  {
    "text": "the as with the modulus operator here so it's doing a divide effectively by U so",
    "start": "1281720",
    "end": "1287240"
  },
  {
    "text": "that is their first attempt to make sure that the uh basically the body of this",
    "start": "1287240",
    "end": "1293400"
  },
  {
    "text": "Loop is not optimized away does that make sense yep okay and then for some",
    "start": "1293400",
    "end": "1299880"
  },
  {
    "text": "unknown reason and they don't know why because one value should in theory be sufficient or if you wanted another one",
    "start": "1299880",
    "end": "1306360"
  },
  {
    "text": "just read another read the next argument uh they then go ahead and ask the random",
    "start": "1306360",
    "end": "1312559"
  },
  {
    "text": "number generator to produce another one for them and of course the random number",
    "start": "1312559",
    "end": "1317600"
  },
  {
    "text": "generator would produce a known value as well if you didn't first seed it with something unknown and that unknown in",
    "start": "1317600",
    "end": "1324880"
  },
  {
    "text": "this case is calling the time function so what time of day is it seeed the random number generator with that then",
    "start": "1324880",
    "end": "1331200"
  },
  {
    "text": "we generate a random number and that gives us something for our outer loop uh to be adding which is this R here and it",
    "start": "1331200",
    "end": "1338320"
  },
  {
    "text": "also does one other thing because you'll notice they decided again for not I'm",
    "start": "1338320",
    "end": "1344520"
  },
  {
    "text": "not quite clear why probably again because they were trying to have the loop do a certain type of work work and they were trying to figure out how to",
    "start": "1344520",
    "end": "1349799"
  },
  {
    "text": "not get the uh loop optimized away they're keeping an array of 10,000 items",
    "start": "1349799",
    "end": "1355760"
  },
  {
    "text": "and this Loop updates like it writes back to all 10,000 items the outer loop",
    "start": "1355760",
    "end": "1361080"
  },
  {
    "text": "Loops through all 10,000 and you can see them getting written to right at the end",
    "start": "1361080",
    "end": "1366240"
  },
  {
    "text": "they select a specific one of those 10,000 items using the random selection",
    "start": "1366240",
    "end": "1372760"
  },
  {
    "text": "that they pulled here and again my guess is the reason they did that is because if they didn't the comp would notice",
    "start": "1372760",
    "end": "1379279"
  },
  {
    "text": "that those values were all unused except for the one that you ended up printing out at the end and throw them away make",
    "start": "1379279",
    "end": "1384799"
  },
  {
    "text": "sense yep that's what I ass all this was for was exactly all those things to avoid any sort of weird compilation so",
    "start": "1384799",
    "end": "1392320"
  },
  {
    "text": "there you go that's that's what they're doing in this Loop very very simple stuff but that's what they're doing I",
    "start": "1392320",
    "end": "1398720"
  },
  {
    "text": "think it's all because of that if we look at the actual Loop inside the the",
    "start": "1398720",
    "end": "1404520"
  },
  {
    "text": "very interior of the loop what they're doing is for you know the outer Loop they're selecting one of the elements",
    "start": "1404520",
    "end": "1410880"
  },
  {
    "text": "they're doing the elements in order they're selecting one of the elements and for that first you know for",
    "start": "1410880",
    "end": "1416480"
  },
  {
    "text": "whichever element they're picking they're just doing a summation so you know for a 100,00 times in the interior",
    "start": "1416480",
    "end": "1423679"
  },
  {
    "text": "they're going to sum into that location the sum of whatever the loop",
    "start": "1423679",
    "end": "1430919"
  },
  {
    "text": "count is so J in this case uh divided by that number that came in they're doing",
    "start": "1430919",
    "end": "1437080"
  },
  {
    "text": "the modulus so the remaining effectively it's not quite the remainder in C uh it's modulus in C is is it's it the way",
    "start": "1437080",
    "end": "1444880"
  },
  {
    "text": "that it handles negatives is slightly different so I don't want to confused there but basically this is like Computing the remainder right it's like",
    "start": "1444880",
    "end": "1451279"
  },
  {
    "text": "the remainder of the loop count divided by this uh thing that came in whatever number they they picked so that's all",
    "start": "1451279",
    "end": "1458080"
  },
  {
    "text": "the Loop's going to do right all right we're following we're following by the way isn't that always",
    "start": "1458080",
    "end": "1463559"
  },
  {
    "text": "the same number which which one j u this doesn't",
    "start": "1463559",
    "end": "1468880"
  },
  {
    "text": "that Su produce the same number every single time um you know because it's j modul u",
    "start": "1468880",
    "end": "1475840"
  },
  {
    "text": "which is kind of like uh for 1 to 100,000 would produce the same J modulus U every single time starts at zero it's",
    "start": "1475840",
    "end": "1482080"
  },
  {
    "text": "actually just like a constant once it's computed once you know now that you mention",
    "start": "1482080",
    "end": "1489000"
  },
  {
    "text": "that yes and that is very strange cuz you know what I don't think I've seen",
    "start": "1489000",
    "end": "1495440"
  },
  {
    "text": "any compiler notice that Prime you're better than all the compilers I knew I could defeat a compiler you know my",
    "start": "1495440",
    "end": "1502640"
  },
  {
    "text": "friends have always told me I've defeated the compiler before but it's never been a compliment this is very nice because they don't update you like",
    "start": "1502640",
    "end": "1509679"
  },
  {
    "text": "you would what you would probably want to do here I mean there's many things You' want to do such as not write any of this but uh the you would have to update",
    "start": "1509679",
    "end": "1518320"
  },
  {
    "text": "you here somehow right um yeah and yeah no they they you have",
    "start": "1518320",
    "end": "1524640"
  },
  {
    "text": "to update you by some sort of amount such that every time it runs it doesn't Rec comp 0 through 1,000 moduled by you",
    "start": "1524640",
    "end": "1530880"
  },
  {
    "text": "or 100,000 moduled by you every single time cuz that's just a the same thing yeah you're right and you know I don't",
    "start": "1530880",
    "end": "1539320"
  },
  {
    "text": "think I mean I guess now hold on a second sorry we're jumping ahead briefly here everyone I don't think the",
    "start": "1539320",
    "end": "1546159"
  },
  {
    "text": "compiler does that does it maybe they did and I just don't know",
    "start": "1546159",
    "end": "1553600"
  },
  {
    "text": "about it no they don't so sadly Prime",
    "start": "1553600",
    "end": "1558640"
  },
  {
    "text": "you're probably going to have to I don't I don't know so technically I don't know",
    "start": "1558640",
    "end": "1564360"
  },
  {
    "text": "what your role is at the company the terminal. shop company but you may have to resign and go work on the llvm team",
    "start": "1564360",
    "end": "1571799"
  },
  {
    "text": "because I'm pretty sure they didn't catch that I don't think they caught that hole there's a bunch of people being like Oh no J is you know edited by",
    "start": "1571799",
    "end": "1580320"
  },
  {
    "text": "j++ okay for those that aren't understanding What's Happening Here think about this for one second use a constant let's just call it 42 and",
    "start": "1580320",
    "end": "1587360"
  },
  {
    "text": "you're gonna take 0 through 100,000 you're going to take a modulo of each one of those values and",
    "start": "1587360",
    "end": "1593360"
  },
  {
    "text": "you're going to sum that starting at zero if you were to do it again it should produce the same value if no",
    "start": "1593360",
    "end": "1599039"
  },
  {
    "text": "matter how many times you do it taking zero through 100,000 summing each one of those values moduled by 42 is going to",
    "start": "1599039",
    "end": "1606919"
  },
  {
    "text": "produce the same value every single time that's what that Loop is doing because U never changes J is the same value every",
    "start": "1606919",
    "end": "1613640"
  },
  {
    "text": "single time it goes from zero to 100,000 every single time I a sub I always",
    "start": "1613640",
    "end": "1619840"
  },
  {
    "text": "starts off as zero so for those that don't really get it you're just yeah there you go than thank you very much that's exactly it that produces the same",
    "start": "1619840",
    "end": "1626480"
  },
  {
    "text": "value every single time no matter what you do so Prime is just saying look just make one Loop do separate these Loops",
    "start": "1626480",
    "end": "1633720"
  },
  {
    "text": "pull this Loop out beforehand produce the base value then do a four I Loop",
    "start": "1633720",
    "end": "1639000"
  },
  {
    "text": "here to 10,000 writing the base Value Plus R which is also another constant",
    "start": "1639000",
    "end": "1644640"
  },
  {
    "text": "value at the plus the thing this is so good you just started",
    "start": "1644640",
    "end": "1652080"
  },
  {
    "text": "B I didn't even I was just focusing on the Cen side I didn't even look at that part of it uh but as you were saying it",
    "start": "1652080",
    "end": "1659440"
  },
  {
    "text": "Prime I'm like wow this is even worse than I thought okay but anyway sorry sorry for the distraction it's just I",
    "start": "1659440",
    "end": "1666159"
  },
  {
    "text": "you know that's not distra that's perfect example no that's a perfect example of what's wrong with this",
    "start": "1666159",
    "end": "1671679"
  },
  {
    "text": "Benchmark right yeah so the idea could be that it could actually end up getting compiled so maybe the difference between",
    "start": "1671679",
    "end": "1676919"
  },
  {
    "text": "clang and LM Maybe of them would actually compile it away versus the other who knows maybe there's something that would actually catch this as a",
    "start": "1676919",
    "end": "1683399"
  },
  {
    "text": "constant yeah I I now I want to go look and try a bunch of compilers to see if anybody notices that um so that's that's",
    "start": "1683399",
    "end": "1691679"
  },
  {
    "text": "pretty interesting maybe there's a reason why technically they can't do that because of C semantics or something like this yeah but anyway yet again",
    "start": "1691679",
    "end": "1700240"
  },
  {
    "text": "another reason why it's just don't do this right don't create contrived examples as comparisons like this",
    "start": "1700240",
    "end": "1707080"
  },
  {
    "text": "because the only way that this kind of thing is useful is when you know what you're probing for when you when you're",
    "start": "1707080",
    "end": "1712480"
  },
  {
    "text": "looking for a specific thing and you're like testing that very specific thing which is not what's going on here so anyway yeah that's a great catch though",
    "start": "1712480",
    "end": "1718880"
  },
  {
    "text": "Prime I mean I think it could I think a compiler probably could uh yeah go ahead and hoist that and then just rep it out",
    "start": "1718880",
    "end": "1725960"
  },
  {
    "text": "uh but anyway so let's talk about what actually happens here though so the biggest",
    "start": "1725960",
    "end": "1733960"
  },
  {
    "text": "problem that you get with something like this is in their attempts to make this",
    "start": "1733960",
    "end": "1741279"
  },
  {
    "text": "Loop body not go away entirely what they ended up doing is they ended up doing a",
    "start": "1741279",
    "end": "1747200"
  },
  {
    "text": "modulus by an integer that is not known to the compiler now this is something that you",
    "start": "1747200",
    "end": "1754600"
  },
  {
    "text": "never ever ever want to do I oddly enough see it in people's benchmarks",
    "start": "1754600",
    "end": "1761120"
  },
  {
    "text": "fairly frequently because I don't think people understand just exactly what happens when you do uh inter divide",
    "start": "1761120",
    "end": "1769519"
  },
  {
    "text": "integer divide is like one of the worst operations you can ask the CPU to do that it like that it does",
    "start": "1769519",
    "end": "1775799"
  },
  {
    "text": "natively it's very very difficult for the CPU and there really are no CPUs",
    "start": "1775799",
    "end": "1781720"
  },
  {
    "text": "that you currently would experience I mean I guess I don't know about maybe the I don't know how bad M series is um",
    "start": "1781720",
    "end": "1788919"
  },
  {
    "text": "I don't know what they've got for a divider on there because I don't have one but you know like on in the x64 world where we live it's just you just",
    "start": "1788919",
    "end": "1796600"
  },
  {
    "text": "don't want to do it and just to give you some uh perspective on that this machine",
    "start": "1796600",
    "end": "1802200"
  },
  {
    "text": "right here is a bit old it's a Skylake machine but I also have the zen4 up here uh those of you who've seen me on Prim",
    "start": "1802200",
    "end": "1808480"
  },
  {
    "text": "stream before know I love to show uh what the actual instructions are so the instruction that you're going to be",
    "start": "1808480",
    "end": "1814159"
  },
  {
    "text": "doing here is going to be like an iiv instruction uh that's the thing that asks the CPU to do a division between",
    "start": "1814159",
    "end": "1821240"
  },
  {
    "text": "integers and what you can see here is this thing under ports as I've explained",
    "start": "1821240",
    "end": "1827200"
  },
  {
    "text": "on previous streams I'll just say it one more time for clarity this tells you how many operations basically the CPU has to",
    "start": "1827200",
    "end": "1835720"
  },
  {
    "text": "do and on which of its execution units it's going to have to do them so for",
    "start": "1835720",
    "end": "1841000"
  },
  {
    "text": "just this one divide it's going to have to do this you can read this as two",
    "start": "1841000",
    "end": "1846799"
  },
  {
    "text": "operations on Port zero then so this plus is like then or or and to on Port",
    "start": "1846799",
    "end": "1855159"
  },
  {
    "text": "015 or six any of the ports could do it okay quick Interruption the plus means",
    "start": "1855159",
    "end": "1860440"
  },
  {
    "text": "serial right it does not mean uh parallel not NE we don't know okay you",
    "start": "1860440",
    "end": "1865720"
  },
  {
    "text": "don't know okay okay not entirely serial uh but some of them may be serialized we",
    "start": "1865720",
    "end": "1871639"
  },
  {
    "text": "don't have that information we typically don't get that information these are these are even just this information is",
    "start": "1871639",
    "end": "1877519"
  },
  {
    "text": "found by micro Benchmark probing by by doing the kinds of things I was saying before where we're making things in like",
    "start": "1877519",
    "end": "1883000"
  },
  {
    "text": "looking at it okay okay um and one on zero or six another one on one or five",
    "start": "1883000",
    "end": "1890080"
  },
  {
    "text": "and then four on port five right so normally if you look at like an ad it's",
    "start": "1890080",
    "end": "1896880"
  },
  {
    "text": "like one operation right it's like one on 0 one five or six or something like that so when you do an integer modulus",
    "start": "1896880",
    "end": "1906399"
  },
  {
    "text": "that you basically spam all of the execution ports of like an Intel processor with tons of crap that it has",
    "start": "1906399",
    "end": "1912679"
  },
  {
    "text": "to do and you look over and you look at the latencies so these are how many cycles you would expect to get the",
    "start": "1912679",
    "end": "1918679"
  },
  {
    "text": "result back in so here you see like 23 or something on the ballpark of between 20 and 30 latency right so that's 20 or3",
    "start": "1918679",
    "end": "1926720"
  },
  {
    "text": "Cycles right um and the throughput which means how many of these you could like",
    "start": "1926720",
    "end": "1932039"
  },
  {
    "text": "overlap basically uh if you if you were just issuing random modulus that didn't",
    "start": "1932039",
    "end": "1937679"
  },
  {
    "text": "depend on each other then the maximum throughput you could hope for would be six okay so really ugly stuff compared",
    "start": "1937679",
    "end": "1946880"
  },
  {
    "text": "to something like an addition or anything like that where you where not only you know if you look at something",
    "start": "1946880",
    "end": "1952159"
  },
  {
    "text": "like ad so that that we're done with that I can just uh try to show you an example like if you wanted to add two",
    "start": "1952159",
    "end": "1959360"
  },
  {
    "text": "register values together for example uh what you would see there is it's like oh",
    "start": "1959360",
    "end": "1965120"
  },
  {
    "text": "uh not only oops click on that not only is there only one operation the CPU will",
    "start": "1965120",
    "end": "1970679"
  },
  {
    "text": "have to do and it can also do it on any of four different ports which means that if you are just issuing these you know a",
    "start": "1970679",
    "end": "1977519"
  },
  {
    "text": "bunch of of them that are unrelated you can do four at a time that's what 0.25 means it means a quarter cycle to do",
    "start": "1977519",
    "end": "1984039"
  },
  {
    "text": "your ad why because it can do four at a time so effectively any one of them you know when you if you have enough of them",
    "start": "1984039",
    "end": "1990240"
  },
  {
    "text": "and you're doing them in bulk will only take a quarter cycle right so a quarter cycle versus six Cycles tells you",
    "start": "1990240",
    "end": "1998000"
  },
  {
    "text": "something about the ratio of you know the expense okay yeah so when we come",
    "start": "1998000",
    "end": "2004960"
  },
  {
    "text": "back here and you see literally what's in the body of this an ad which as I",
    "start": "2004960",
    "end": "2010360"
  },
  {
    "text": "just said is basically what we would call free right it's so free that it's on the order of like the loop increment",
    "start": "2010360",
    "end": "2016480"
  },
  {
    "text": "in terms of what we're expecting the compiler to be uh the uh CPU to be doing",
    "start": "2016480",
    "end": "2021639"
  },
  {
    "text": "then we've got this right here which is this monster of an operation that's",
    "start": "2021639",
    "end": "2026960"
  },
  {
    "text": "going to take you know some number of Cycles probably six or more",
    "start": "2026960",
    "end": "2032399"
  },
  {
    "text": "right so when you look at this you're just ask the question well okay what are you Ben marking now at that point none",
    "start": "2032399",
    "end": "2040320"
  },
  {
    "text": "of these languages are really going to be able to do very much about that like",
    "start": "2040320",
    "end": "2045600"
  },
  {
    "text": "they have to run these divides on CPU as Prime just demonstrated really",
    "start": "2045600",
    "end": "2050679"
  },
  {
    "text": "all you're going to be benchmarking is to see whether or not one of those compilers was smart enough to take this",
    "start": "2050679",
    "end": "2057000"
  },
  {
    "text": "out and do it ahead of time right that's what that's the only way you could really get a meaningful win on this",
    "start": "2057000",
    "end": "2063398"
  },
  {
    "text": "particular Benchmark and what you can see from the construction of the Benchmark is they've",
    "start": "2063399",
    "end": "2069280"
  },
  {
    "text": "tried very hard to keep preventing compile like they probably like looked and every time the compiler was able to",
    "start": "2069280",
    "end": "2074679"
  },
  {
    "text": "do something like that they added a new prevention for it so not only are they basically creating a benchmark where the",
    "start": "2074679",
    "end": "2081118"
  },
  {
    "text": "only meaningful thing between aot aot languages would be what are you actually going to be able to optimize out but",
    "start": "2081119",
    "end": "2088280"
  },
  {
    "text": "then they prevented them from optimizing that out so what are we left with we're left with just a giant string of divides",
    "start": "2088280",
    "end": "2095638"
  },
  {
    "text": "that will just choke the CPU so that is what you'll be waiting for and and here's the other part of it before we",
    "start": "2095639",
    "end": "2101680"
  },
  {
    "text": "get into the couple other finder points here and the bigger issue is what's the",
    "start": "2101680",
    "end": "2109359"
  },
  {
    "text": "definition of modulus in the language if the language defines modulus",
    "start": "2109359",
    "end": "2116000"
  },
  {
    "text": "to be something that let's say throws an exception if it is zero right well now",
    "start": "2116000",
    "end": "2123160"
  },
  {
    "text": "that language has to throw extra work into this Benchmark somewhere to check",
    "start": "2123160",
    "end": "2128560"
  },
  {
    "text": "to see if you was Zero if the language is smart it will put it up above here",
    "start": "2128560",
    "end": "2133920"
  },
  {
    "text": "but like my understanding is language is like go or something will have a or rust might have a thing in there that go oh",
    "start": "2133920",
    "end": "2140400"
  },
  {
    "text": "check to see if that's it if it is I have to throw an exception or do a panic because I'm not allowed to actually have",
    "start": "2140400",
    "end": "2146599"
  },
  {
    "text": "the the the build fault right it has to do this other thing that my language",
    "start": "2146599",
    "end": "2152839"
  },
  {
    "text": "defines that it's not supposed to go through the fault Handler or something right that's a purely light like you've",
    "start": "2152839",
    "end": "2158920"
  },
  {
    "text": "added something to the interior of this without telling the language that it",
    "start": "2158920",
    "end": "2164000"
  },
  {
    "text": "doesn't have to worry about that well that's a pretty big issue right okay yeah so there's that right",
    "start": "2164000",
    "end": "2172480"
  },
  {
    "text": "so when we look at the differences between these compiled languages and for some reason they still ranked them they",
    "start": "2172480",
    "end": "2178880"
  },
  {
    "text": "there wasn't like an interval or some like thing that said well anything that's above 6 is just the same because",
    "start": "2178880",
    "end": "2185400"
  },
  {
    "text": "this is all noise or whatever so you're timing that aspect of it how long does it take to do any checking that it has",
    "start": "2185400",
    "end": "2191400"
  },
  {
    "text": "to do you're timing to see how long the random number generator takes to initialize and run you're timing how",
    "start": "2191400",
    "end": "2198200"
  },
  {
    "text": "long that language takes to convert in ask to integer and to retrieve a command line argument and and and and and right",
    "start": "2198200",
    "end": "2206520"
  },
  {
    "text": "yeah so and I assume most of those are like there's so I would assume initializing a random number generator",
    "start": "2206520",
    "end": "2212720"
  },
  {
    "text": "and then getting a random number generator and modulo that by 10,000 is like the same equivalent cost of doing",
    "start": "2212720",
    "end": "2219920"
  },
  {
    "text": "10,000 for Loop iterations like it's just like massively huge comparatively that it's just like it's it's huge it",
    "start": "2219920",
    "end": "2227000"
  },
  {
    "text": "it's not it's not um but it's not nothing and that's why you see that",
    "start": "2227000",
    "end": "2232440"
  },
  {
    "text": "separation at the top yeah right is there all these other things and then the checking right uh and and what and",
    "start": "2232440",
    "end": "2238960"
  },
  {
    "text": "what's more depending on how we Define modulus you may have to do extra work in here too in the body of the loop to",
    "start": "2238960",
    "end": "2245880"
  },
  {
    "text": "produce what the actual answer is because maybe modulus is different in your language and and we're not even getting to the part where oh in some",
    "start": "2245880",
    "end": "2252560"
  },
  {
    "text": "languages modulus might be uh infinite Precision like we talked about before right so maybe you know and then you're",
    "start": "2252560",
    "end": "2259160"
  },
  {
    "text": "into a whole another world of hurt right uh and and and who knows right so there's there's all this other crap",
    "start": "2259160",
    "end": "2264920"
  },
  {
    "text": "infinite Precision is the wrong word for but you know what I mean like hype like big in or something like that doing weird stuff with modulus who",
    "start": "2264920",
    "end": "2271520"
  },
  {
    "text": "knows so again really really bad but",
    "start": "2271520",
    "end": "2277119"
  },
  {
    "text": "that's just me talking at you what I wanted to show now was just how ridiculously weird this stuff is and how",
    "start": "2277119",
    "end": "2284000"
  },
  {
    "text": "it doesn't really capture what you would want compilers to do anyway and etc etc",
    "start": "2284000",
    "end": "2289200"
  },
  {
    "text": "can I can I interject for one quick second if I'm not mistaken with JavaScript if you have a the small",
    "start": "2289200",
    "end": "2294520"
  },
  {
    "text": "integer requirement can exceed uh uh 2 to the 31 if I'm not mistaken and in",
    "start": "2294520",
    "end": "2300359"
  },
  {
    "text": "this Loop you may accidentally Exceed 2 to the 31 I don't know how big U is or what the actual final value could be but",
    "start": "2300359",
    "end": "2306319"
  },
  {
    "text": "you could theoretically go from a SME which is going to be much much faster into an actual like Heap stored int and",
    "start": "2306319",
    "end": "2312880"
  },
  {
    "text": "then I believe once you do that it could change all of them I'm not exactly sure how all those things work there's like a whole dance around optimization of",
    "start": "2312880",
    "end": "2319480"
  },
  {
    "text": "integers as you're talking about that prove your point which is very fair which is handling ins can be very",
    "start": "2319480",
    "end": "2325280"
  },
  {
    "text": "expensive it it all depends on language semantics and again so so again May if",
    "start": "2325280",
    "end": "2331640"
  },
  {
    "text": "you were trying to demonstrate that if you're like let's look at numerical language you know semantics of numbers",
    "start": "2331640",
    "end": "2337960"
  },
  {
    "text": "in languages and I want to Benchmark that and what the costs are of that great if you know what you're doing and",
    "start": "2337960",
    "end": "2343440"
  },
  {
    "text": "you understand all the languages and you show it clearly that's good that's information people can use what you're",
    "start": "2343440",
    "end": "2350200"
  },
  {
    "text": "doing here is calling something a looping Benchmark that actually doesn't really have anything to do with looping yeah right that's what's",
    "start": "2350200",
    "end": "2356400"
  },
  {
    "text": "actually going on like yeah we're not really the loop is talk just meant to make work happen a long time yeah right",
    "start": "2356400",
    "end": "2364040"
  },
  {
    "text": "so anyway so that's that's you know one of the biggest problems but uh another thing that I just wanted",
    "start": "2364040",
    "end": "2370319"
  },
  {
    "text": "to point out here is so let's suppose that we did want to Benchmark like like now I'm trying to move it from like",
    "start": "2370319",
    "end": "2375920"
  },
  {
    "text": "negative like please don't do this like this was bad this is not a good Benchmark please stop uh let me shift it",
    "start": "2375920",
    "end": "2382520"
  },
  {
    "text": "to just demonstrating why I think it's important to understand what's going on and say if we did want to make a loop",
    "start": "2382520",
    "end": "2388359"
  },
  {
    "text": "looping Benchmark micro benchmarks for looping what would we actually be looking for and why is this not it",
    "start": "2388359",
    "end": "2395480"
  },
  {
    "text": "right so at that high end you saw there was all these languages uh listed there",
    "start": "2395480",
    "end": "2401079"
  },
  {
    "text": "there's like you know like Zig rust and c and Java with not Java um uh C was",
    "start": "2401079",
    "end": "2408680"
  },
  {
    "text": "actually really high up on that L yeah basically languages that can that can do loops you know that legit Loops",
    "start": "2408680",
    "end": "2414920"
  },
  {
    "text": "to something sensible they're all up at the top well languages aren't all",
    "start": "2414920",
    "end": "2420440"
  },
  {
    "text": "created equal even up at the top for looping and what you actually want to",
    "start": "2420440",
    "end": "2425599"
  },
  {
    "text": "measure uh you know like for TR would be an example of one that has good Loop semantics or something like that right",
    "start": "2425599",
    "end": "2431680"
  },
  {
    "text": "ispc would be one of the best examples right uh which is now sort of built",
    "start": "2431680",
    "end": "2437359"
  },
  {
    "text": "into clvm I don't I don't know the spefic of where it migrated to but um if",
    "start": "2437359",
    "end": "2443760"
  },
  {
    "text": "you look at something like this normally what we're looking at when we look at loops and we want to Benchmark them and",
    "start": "2443760",
    "end": "2450800"
  },
  {
    "text": "again I think this was lost on the people who made The Benchmark because they're thinking kind of old school programming like 1990s style programming",
    "start": "2450800",
    "end": "2458800"
  },
  {
    "text": "modern Loop Benchmark should be about vectorization right when you're looking at Loop performance the only time you",
    "start": "2458800",
    "end": "2465520"
  },
  {
    "text": "would really be caring about Loop performance you want vectorization like it needs to be vectorized if it's going to be fast so we want it to take things",
    "start": "2465520",
    "end": "2473880"
  },
  {
    "text": "that we write in scaler right meaning we are just writing things that look to us",
    "start": "2473880",
    "end": "2480400"
  },
  {
    "text": "normal like AI equals AI plus J mod U right and we want it to turn them into",
    "start": "2480400",
    "end": "2486119"
  },
  {
    "text": "things that are operating wide so on many values at once using the simd the",
    "start": "2486119",
    "end": "2491280"
  },
  {
    "text": "power of you know AVX 512 or something you know inside uh the the CPU we want",
    "start": "2491280",
    "end": "2496880"
  },
  {
    "text": "it to be doing that for us that would that's what we would be benchmarking for language for looping right now what",
    "start": "2496880",
    "end": "2503839"
  },
  {
    "text": "they've done here is they've made it so that's not possible because by doing a modulus what you've done is ensured more",
    "start": "2503839",
    "end": "2511440"
  },
  {
    "text": "or less that unless the compiler is incred incredibly Squinky uh it's not",
    "start": "2511440",
    "end": "2516720"
  },
  {
    "text": "going to be able to vectorize because again like I said anytime you see a modulus or a divide by a number that",
    "start": "2516720",
    "end": "2523160"
  },
  {
    "text": "isn't known if it's known that's okay because there's other things can happen but by a number that isn't known it's a",
    "start": "2523160",
    "end": "2529680"
  },
  {
    "text": "huge huge red flag as as the kids today say because the CPUs today don't have uh",
    "start": "2529680",
    "end": "2537400"
  },
  {
    "text": "divides that operate wide so so if you look at like vector instruction sets they really don't have a divide because",
    "start": "2537400",
    "end": "2544640"
  },
  {
    "text": "it's again you saw how bad it is to they they often times just don't support",
    "start": "2544640",
    "end": "2549880"
  },
  {
    "text": "that not that we wouldn't love to have it it's just it just isn't in there right is it is it because the number of",
    "start": "2549880",
    "end": "2555160"
  },
  {
    "text": "ports that can perform it and the length of it just make it so that it kind of like defeats simd itself or what's the",
    "start": "2555160",
    "end": "2562040"
  },
  {
    "text": "uh what's the problem because I I I don't quite understand it I guess uh I",
    "start": "2562040",
    "end": "2568040"
  },
  {
    "text": "don't know but here I guess here is here is a if you if",
    "start": "2568040",
    "end": "2573440"
  },
  {
    "text": "you want an answer that's almost certainly wrong and you should ignore my assumption is because in order to do a",
    "start": "2573440",
    "end": "2579520"
  },
  {
    "text": "divide in a reasonable amount of time you need a lookup table I think or at",
    "start": "2579520",
    "end": "2584559"
  },
  {
    "text": "least used to this is maybe like say it's old and they probably don't want to bake those lookup tables into every lane",
    "start": "2584559",
    "end": "2590200"
  },
  {
    "text": "of the simd thing they do for things that really matter like reciprocal or reciprocal square roots those sorts of",
    "start": "2590200",
    "end": "2597040"
  },
  {
    "text": "things because those are really common in in highly optimized like vector math",
    "start": "2597040",
    "end": "2602400"
  },
  {
    "text": "stuff but they don't uh as far as I know they don't do it for",
    "start": "2602400",
    "end": "2607640"
  },
  {
    "text": "uh integer divide right they will do it for like floating Point divide because floating Point divide matters to the",
    "start": "2607640",
    "end": "2613760"
  },
  {
    "text": "benchmarks but because people don't do integer divides in math benchmarks they're not GNA they're not going to I",
    "start": "2613760",
    "end": "2620559"
  },
  {
    "text": "don't know put put that work in to to make it I I I don't know to be completely honest with you I I really",
    "start": "2620559",
    "end": "2626400"
  },
  {
    "text": "don't um it would be great to have a hardware engineer tell us why they don't want to do it but uh obviously they",
    "start": "2626400",
    "end": "2634000"
  },
  {
    "text": "could it just it's too expensive for them to want to do I guess um so",
    "start": "2634000",
    "end": "2640880"
  },
  {
    "text": "anyway but I'm glad you mentioned that because the next thing I want to show you is some kind of weird things that",
    "start": "2640880",
    "end": "2647520"
  },
  {
    "text": "happen here so let's take a look uh I'm going to show you the the assembly uh that's produced from this now so this is",
    "start": "2647520",
    "end": "2653680"
  },
  {
    "text": "using clang 15 which is the same version that's installed on this machine so if I",
    "start": "2653680",
    "end": "2659200"
  },
  {
    "text": "you know I can run this thing I I made I I I built this on my machine nice and uh",
    "start": "2659200",
    "end": "2665280"
  },
  {
    "text": "I I have theirs like code orig is what I called for original is the one that they",
    "start": "2665280",
    "end": "2671119"
  },
  {
    "text": "ship so the one that we're looking at now this is the thing hyperfine they're running my machine is old this is a",
    "start": "2671119",
    "end": "2677359"
  },
  {
    "text": "machine from 2017 he was running it on like a modern M series processor so his is obviously faster I think his was 0.",
    "start": "2677359",
    "end": "2684720"
  },
  {
    "text": "five right like it and on mine it's 1734 or whatever right so mine's quite a bit",
    "start": "2684720",
    "end": "2690800"
  },
  {
    "text": "slower uh but that's you know that's running that code on this machine that's what we get and what was that running",
    "start": "2690800",
    "end": "2696599"
  },
  {
    "text": "well it was running running this right it was running this code here what did the compiler do well you could see that",
    "start": "2696599",
    "end": "2701960"
  },
  {
    "text": "effectively what it did is it unrolled the loop right iive iive iive iive it",
    "start": "2701960",
    "end": "2708400"
  },
  {
    "text": "enrolled the loop four times and then it does you know remember",
    "start": "2708400",
    "end": "2713599"
  },
  {
    "text": "you were saying um what is the loop you you said it's an increment a comparison and a jump well here's your increment",
    "start": "2713599",
    "end": "2720000"
  },
  {
    "text": "comparison and jump Prime they're right there just as you uh anticipated they would be right and you can see it's",
    "start": "2720000",
    "end": "2727160"
  },
  {
    "text": "adding four instead of one because it unrolled the loop four times so it's going up by four right it's comparing to",
    "start": "2727160",
    "end": "2734200"
  },
  {
    "text": "see whether it's hit that cap right what we told it to go to and then it's jumping back up to here so it's doing",
    "start": "2734200",
    "end": "2741280"
  },
  {
    "text": "the divide divide divide divide stupid question uh yeah there are no stupid questions in Assembly Language um you",
    "start": "2741280",
    "end": "2748319"
  },
  {
    "text": "just wait but y four not eight like is there is there some sort of magic to how",
    "start": "2748319",
    "end": "2753800"
  },
  {
    "text": "many you want to do before it's actually better to do the jump",
    "start": "2753800",
    "end": "2758920"
  },
  {
    "text": "well to be completely honest with you because I I this question was",
    "start": "2759319",
    "end": "2765760"
  },
  {
    "text": "investigated slightly by me beforehand okay to be completely honest with you",
    "start": "2765760",
    "end": "2771599"
  },
  {
    "text": "I'm not sure what the internal metrics are for clang um one of the things you",
    "start": "2771599",
    "end": "2779160"
  },
  {
    "text": "have to remember and I don't know the specifics of what it does internally but you know there's all these like things I",
    "start": "2779160",
    "end": "2786040"
  },
  {
    "text": "don't remember what the uh is it is it [Music]",
    "start": "2786040",
    "end": "2792119"
  },
  {
    "text": "m something like minus M avx2 yeah um there's all these settings",
    "start": "2792119",
    "end": "2798880"
  },
  {
    "text": "that you pass potentially that tell it about what level of machine it's operating",
    "start": "2798880",
    "end": "2804240"
  },
  {
    "text": "on right and I don't know because I don't spend a whole lot of time poking",
    "start": "2804240",
    "end": "2811760"
  },
  {
    "text": "at the optimizer in clang I don't know to what extent this UNR rolling level",
    "start": "2811760",
    "end": "2818079"
  },
  {
    "text": "represents some kind of average best guess for how many times it would make sense to unroll something given that it",
    "start": "2818079",
    "end": "2825359"
  },
  {
    "text": "doesn't know exactly which x64 processor you're running on okay right four isn't",
    "start": "2825359",
    "end": "2832000"
  },
  {
    "text": "probably optimal I think eight would have been better actually in this case and again it's because at least I",
    "start": "2832000",
    "end": "2839040"
  },
  {
    "text": "believe these iives because they're flooding so many of those operations in there if you can have more of them in",
    "start": "2839040",
    "end": "2846040"
  },
  {
    "text": "flight at an given time it helps to make sure you're maximally utilizing all those ports and not waiting right um",
    "start": "2846040",
    "end": "2854240"
  },
  {
    "text": "because you want to try you you want to try to make sure that this this sort",
    "start": "2854240",
    "end": "2860640"
  },
  {
    "text": "of you've got all these ads happening right and the ads are kind of uh uh",
    "start": "2860640",
    "end": "2866559"
  },
  {
    "text": "adding into a single value right and because those ads and the and that idiv",
    "start": "2866559",
    "end": "2873880"
  },
  {
    "text": "are all using the same port as this ad here is going to be doing and this comp",
    "start": "2873880",
    "end": "2881680"
  },
  {
    "text": "unlike a normal Loop you are actually potentially contending for",
    "start": "2881680",
    "end": "2887160"
  },
  {
    "text": "resources with your own you know with with your own Loop maintenance right",
    "start": "2887160",
    "end": "2893319"
  },
  {
    "text": "which normally we wouldn't expect like that's not what we would normally expect we would expect like some loads and",
    "start": "2893319",
    "end": "2898680"
  },
  {
    "text": "stores in here that would you know be taking time and using different ports we would expect some Vector operations in",
    "start": "2898680",
    "end": "2905160"
  },
  {
    "text": "here or floating Point operations something to take the pressure off of the uh the five adders or four adders",
    "start": "2905160",
    "end": "2912160"
  },
  {
    "text": "depending on which CPU you're on right um but that's not the case so",
    "start": "2912160",
    "end": "2917880"
  },
  {
    "text": "because the idiv is spamming those uh adders and the ad is spamming those adders and there's really nothing else",
    "start": "2917880",
    "end": "2924200"
  },
  {
    "text": "here I unrolling actually helps okay so I don't know how it decided four okay",
    "start": "2924200",
    "end": "2930559"
  },
  {
    "text": "four assume some level has to because you can put more more than one instruction can be in flight at any one time so I assume some level of unrolling",
    "start": "2930559",
    "end": "2937760"
  },
  {
    "text": "has to well because I assume the jumping defeats the uh the UN like the multiple",
    "start": "2937760",
    "end": "2943280"
  },
  {
    "text": "instructions in Flight correct no and that is why got them uh uh it's no no it's a",
    "start": "2943280",
    "end": "2951400"
  },
  {
    "text": "it's a very good question actually um so what happens with this code in the front",
    "start": "2951400",
    "end": "2957040"
  },
  {
    "text": "end of the CPU is the front end is going to assume that this jump happens it's",
    "start": "2957040",
    "end": "2963079"
  },
  {
    "text": "just going to assume that so what you're actually going to get FL blowing to the back end is just Infinity of copies of",
    "start": "2963079",
    "end": "2969960"
  },
  {
    "text": "that okay so it's as if you unrolled it a billion times yourself anyway so all",
    "start": "2969960",
    "end": "2976280"
  },
  {
    "text": "that's really happening when you unroll the loop is you're saving these two operations right you don't have to do",
    "start": "2976280",
    "end": "2983839"
  },
  {
    "text": "four of them now you only have to do one of each okay yeah yeah yeah yeah okay",
    "start": "2983839",
    "end": "2989160"
  },
  {
    "text": "that makes sense and normally like I said normally again one of the reasons is such a bad bmark normally you",
    "start": "2989160",
    "end": "2996160"
  },
  {
    "text": "wouldn't care about that like normally you have spare Adder right capacity to",
    "start": "2996160",
    "end": "3002079"
  },
  {
    "text": "do an add comp jump like that so it just doesn't matter like those ports those",
    "start": "3002079",
    "end": "3007680"
  },
  {
    "text": "execution units are just sitting there not doing anything anyway they're not under as much pressure as everything",
    "start": "3007680",
    "end": "3013160"
  },
  {
    "text": "else so you just have them and you don't care so typically you don't need to",
    "start": "3013160",
    "end": "3018440"
  },
  {
    "text": "unroll a loop for that reason right Um",
    "start": "3018440",
    "end": "3024000"
  },
  {
    "text": "this can I ask you to execute one more set of commands I've seen this pop up in chat like 50 times now people are saying",
    "start": "3024000",
    "end": "3030640"
  },
  {
    "text": "Dash March equals native I assume that's machine architecture equals native Dash",
    "start": "3030640",
    "end": "3036319"
  },
  {
    "text": "March equals native Native no just equals native for for Skylake oh wait",
    "start": "3036319",
    "end": "3042040"
  },
  {
    "text": "but it's what's it g to use uh I don't know what what uh God bolts native is",
    "start": "3042040",
    "end": "3048119"
  },
  {
    "text": "neither do I but people keep saying it's going to do something different it's going to make a bigger unroll maybe yeah so it there you go it unrolled a little",
    "start": "3048119",
    "end": "3054400"
  },
  {
    "text": "more right okay two three four five six seven eight so it picked eight as I",
    "start": "3054400",
    "end": "3061520"
  },
  {
    "text": "predicted right okay so it's effectively this it's able to understand whatever",
    "start": "3061520",
    "end": "3066839"
  },
  {
    "text": "machine it's running on more inherently with that yeah well that's why I said",
    "start": "3066839",
    "end": "3072040"
  },
  {
    "text": "like I don't know the switches very well you probably don't want March n i mean for a benchmark you might because you're",
    "start": "3072040",
    "end": "3078359"
  },
  {
    "text": "T you you might want to be interrogating your own machine I don't know what a sensible thing is to pass here these",
    "start": "3078359",
    "end": "3085040"
  },
  {
    "text": "days is I guess what I'm saying like what should you probably pass here clang",
    "start": "3085040",
    "end": "3090400"
  },
  {
    "text": "experts would know they'd be like oh you probably want blah because it's a good mix of like targeting Zen four and five",
    "start": "3090400",
    "end": "3098480"
  },
  {
    "text": "but also not bad on you know I don't know right okay the purpose of all this just again for us Layman is that when",
    "start": "3098480",
    "end": "3105160"
  },
  {
    "text": "you're Distributing when you're when you're passing out a distributable you want to compile it in such a way that it runs on all machines but it also runs",
    "start": "3105160",
    "end": "3111599"
  },
  {
    "text": "the most optimal and so by doing something like March native I'm saying March native for just me let me have",
    "start": "3111599",
    "end": "3117400"
  },
  {
    "text": "that uh by doing that uh it it will build it the best for your machine but",
    "start": "3117400",
    "end": "3122720"
  },
  {
    "text": "you still may run on a bunch of different processors where it actually runs inherently worse and so it's like there's different options to say hey",
    "start": "3122720",
    "end": "3128920"
  },
  {
    "text": "this will run the best on the most amount versus this will run the best on a single instance it's like you're flipping these two switches right and",
    "start": "3128920",
    "end": "3136240"
  },
  {
    "text": "that is just not something I ever do right like I I I always like okay if there's a performance critical part of",
    "start": "3136240",
    "end": "3141440"
  },
  {
    "text": "my code that I you know I try to write all my codes so it runs pretty good and then the performance critical Parts I",
    "start": "3141440",
    "end": "3146520"
  },
  {
    "text": "hand tune them usually with intrinsic so I basically if I'm going to if I want it unroll it I'll unroll it myself right so",
    "start": "3146520",
    "end": "3152680"
  },
  {
    "text": "so ially don't do that kind of stuff um so I couldn't tell you what the best flavors are of things but the point I",
    "start": "3152680",
    "end": "3160720"
  },
  {
    "text": "was making before prior to March native was just there are all these M Arch and",
    "start": "3160720",
    "end": "3167200"
  },
  {
    "text": "M Flags where you can specify things this one just tells it it can use the more advanced instruction sets uh like",
    "start": "3167200",
    "end": "3174119"
  },
  {
    "text": "avx2 or AVX 512 or that sort of stuff and then the other ones you can say like first particular CPU cores like I said",
    "start": "3174119",
    "end": "3180240"
  },
  {
    "text": "you know telling it that it may be like oh okay I should unroll this more or oh I should unroll it less right and so",
    "start": "3180240",
    "end": "3186680"
  },
  {
    "text": "that's those are just metrics based on that CPU core that it's using that makes and I don't know I don't know where it's",
    "start": "3186680",
    "end": "3192520"
  },
  {
    "text": "getting those metrics or how accurate they are for any particular core but that's what's up okay so yeah a lot of",
    "start": "3192520",
    "end": "3197640"
  },
  {
    "text": "these tools are just meant for like if you're running a heavy workload on a machine you own and you want it to be the most specifically best for this",
    "start": "3197640",
    "end": "3204079"
  },
  {
    "text": "particular machine then you run extra things yeah it's because you own it you know it you can really make it the exact",
    "start": "3204079",
    "end": "3210079"
  },
  {
    "text": "way you want versus for your server yeah you know what the server is you want it to be",
    "start": "3210079",
    "end": "3216680"
  },
  {
    "text": "optimally performant etc etc okay so",
    "start": "3216680",
    "end": "3221760"
  },
  {
    "text": "that's what's going on in here and as you can see uh there is no vectorization of this Loop right it unrolled it",
    "start": "3221760",
    "end": "3228680"
  },
  {
    "text": "meaning it's doing four of these in here yep but it did not vectorize it because you can see it's still going up by four",
    "start": "3228680",
    "end": "3235200"
  },
  {
    "text": "if this was doing if if these instructions were Vector instructions so they were doing more than one computation for the instruction",
    "start": "3235200",
    "end": "3242680"
  },
  {
    "text": "obviously we wouldn't be going up by four anymore we'd be going up by four times whatever the vector width is if the vector width was eight it'd be four",
    "start": "3242680",
    "end": "3248760"
  },
  {
    "text": "time8 right it'd be 32 or something um so we know we're still and of course",
    "start": "3248760",
    "end": "3254119"
  },
  {
    "text": "also if you know a semi language you know that you're not because you see the instructions you're like well iiv that's a scaler instruction it isn't simd it",
    "start": "3254119",
    "end": "3260920"
  },
  {
    "text": "doesn't take advantage of wide execution okay so that's uh what's going on there",
    "start": "3260920",
    "end": "3267000"
  },
  {
    "text": "what I wanted to show was like well okay suppose that you know because you're a",
    "start": "3267000",
    "end": "3272640"
  },
  {
    "text": "cheeky the person who you you want C to look better on this Benchmark so when",
    "start": "3272640",
    "end": "3277799"
  },
  {
    "text": "you submit it you because the people who do the Benchmark don't know you submit the same Benchmark and you know you can",
    "start": "3277799",
    "end": "3285000"
  },
  {
    "text": "see this is almost exactly the same code it's like can you hold on just one second my dogs are barking and I got to go figure",
    "start": "3285000",
    "end": "3291240"
  },
  {
    "text": "out what that is hold on just one second all right hey sorry my dog like a",
    "start": "3291240",
    "end": "3296720"
  },
  {
    "text": "quarter of a deer carcass and apparently was celebrating I'm not really sure what's going on out there so I'm just going to leave it and pretend it doesn't",
    "start": "3296720",
    "end": "3304520"
  },
  {
    "text": "exist that sounds uh that sounds serious yeah I don't want to touch it so I'm just like all right you have it I don't",
    "start": "3304520",
    "end": "3310599"
  },
  {
    "text": "I don't know what's happening all right fair enough so if you look here all I've done",
    "start": "3310599",
    "end": "3317440"
  },
  {
    "text": "at the exact it's the exact same thing right all I did is add the math.h include so that I could call trunk and I",
    "start": "3317440",
    "end": "3325280"
  },
  {
    "text": "replaced this jod U with doing the modulus in double right so double",
    "start": "3325280",
    "end": "3332280"
  },
  {
    "text": "Precision floating Point arithmetic I've replaced it so that I take the quotient",
    "start": "3332280",
    "end": "3337400"
  },
  {
    "text": "by literally doing the modulus manually myself J divided by U truncate that",
    "start": "3337400",
    "end": "3343920"
  },
  {
    "text": "value then subtract what the the multiplication of that back up from the original value literally taking the",
    "start": "3343920",
    "end": "3351200"
  },
  {
    "text": "remainder by like divide truncate multiply subtract right cool yeah yeah",
    "start": "3351200",
    "end": "3356559"
  },
  {
    "text": "yeah manually yeah that's right this you're getting back to grade school at this point let's go yeah yeah right so",
    "start": "3356559",
    "end": "3364440"
  },
  {
    "text": "suppose someone wanted to you know make C look really good on this Benchmark so you resubmit this code and you put in",
    "start": "3364440",
    "end": "3371680"
  },
  {
    "text": "some cheeky comment like uh C doesn't support proper modulus so just you know",
    "start": "3371680",
    "end": "3376839"
  },
  {
    "text": "trying to make this more accurate or something right you know yeah some dodgy comment to sneak it through right uh and",
    "start": "3376839",
    "end": "3383839"
  },
  {
    "text": "by the way I I have a check in here which we can run if if anyone doesn't believe me this is this will compute literally exactly the same thing uh you",
    "start": "3383839",
    "end": "3391480"
  },
  {
    "text": "can run this check and you will get no matter what you put in for you you will get the correct uh answers",
    "start": "3391480",
    "end": "3397760"
  },
  {
    "text": "here so if we were to run this code now well you know over here Cod double.",
    "start": "3397760",
    "end": "3405760"
  },
  {
    "text": "exe uh using the exact same benchmarking Suite you know and everything it's like",
    "start": "3405760",
    "end": "3410920"
  },
  {
    "text": "oh hey it's like four times as fast not only do I blow away my own result but on",
    "start": "3410920",
    "end": "3416480"
  },
  {
    "text": "this 2017 computer I blow away their result they were getting on an M series",
    "start": "3416480",
    "end": "3422240"
  },
  {
    "text": "Mac right what that's so sweet right uh and so so what happened",
    "start": "3422240",
    "end": "3430039"
  },
  {
    "text": "here right let's let's paste this in and you can see you should definitely make a PR for that it just make C look so good",
    "start": "3430039",
    "end": "3437839"
  },
  {
    "text": "yeah right uh actually C is the best language in the world yeah this is why I say this is all pretty stupid so let's",
    "start": "3437839",
    "end": "3446319"
  },
  {
    "text": "take a look at what happened oh that's stuff right is that what's happening yeah exactly exactly right it's exactly",
    "start": "3446319",
    "end": "3451599"
  },
  {
    "text": "what you think um so you can see in here we're still getting uh some unrolling",
    "start": "3451599",
    "end": "3457319"
  },
  {
    "text": "happening right we've got multiple uh VD PDS VD PD is when you're going to divide",
    "start": "3457319",
    "end": "3464760"
  },
  {
    "text": "so the way you can read this is V prefix just is a thing that was introduced to",
    "start": "3464760",
    "end": "3471359"
  },
  {
    "text": "to patch over some nastiness uh of the original that they need to extend out to",
    "start": "3471359",
    "end": "3478000"
  },
  {
    "text": "The Wider registers with AVX and also fix some things about whether or not uh",
    "start": "3478000",
    "end": "3483400"
  },
  {
    "text": "implicit memory arguments or so V prefix instructions you can really ignore the V",
    "start": "3483400",
    "end": "3489720"
  },
  {
    "text": "the V is is is a prefix that goes on it for historical architectural reasons you can ignore so really the instruction",
    "start": "3489720",
    "end": "3496280"
  },
  {
    "text": "that you care about is div PD and the V is on there because it has to be if it wants to use the the AVX registers the",
    "start": "3496280",
    "end": "3503880"
  },
  {
    "text": "eight the eight wide registers yeah so div PD is really the instruction we're talking about it's divide packed doubles",
    "start": "3503880",
    "end": "3512640"
  },
  {
    "text": "the packed because it's simd so there's multiple doubles packed into a single one D for double meaning 64bit floating",
    "start": "3512640",
    "end": "3519520"
  },
  {
    "text": "Point instead of 32-bit floating point right so what you can see here is it's literally just doing what we told it to",
    "start": "3519520",
    "end": "3526119"
  },
  {
    "text": "do adds divides and multiplies here right and it's just doing a bunch of",
    "start": "3526119",
    "end": "3531599"
  },
  {
    "text": "those and the round PD is the is the truncation part etc etc um",
    "start": "3531599",
    "end": "3536920"
  },
  {
    "text": "so anyway it's doing this stuff and then this uh this uh VC convert by the way",
    "start": "3536920",
    "end": "3542039"
  },
  {
    "text": "also because it needs to convert it to an integer to add so there's also the part where it actually turns it into an Inger to do the ad but that's s separ",
    "start": "3542039",
    "end": "3548960"
  },
  {
    "text": "okay so anyway it's doing all of this uh work now but it's basically the same",
    "start": "3548960",
    "end": "3554160"
  },
  {
    "text": "thing like effectively we're doing the same uh kind of work that we were doing before it's just now instead of it",
    "start": "3554160",
    "end": "3561280"
  },
  {
    "text": "having to use the idiv instruction it's able to use a few simd instructions",
    "start": "3561280",
    "end": "3566599"
  },
  {
    "text": "instead and because of that it can now do eight at a time so instead of this",
    "start": "3566599",
    "end": "3571680"
  },
  {
    "text": "Loop having to go from0 to 100,000 by increments of one or in this case",
    "start": "3571680",
    "end": "3577119"
  },
  {
    "text": "increments of four doing four separate ones at a time which is still the same as doing them one at a time right now",
    "start": "3577119",
    "end": "3583760"
  },
  {
    "text": "we're able to go eight at a time and unroll if we want to which it did want to uh to you know by four so we're",
    "start": "3583760",
    "end": "3591400"
  },
  {
    "text": "actually going to go up by you know something like 32 or who knows what it ended up doing here let's see see what",
    "start": "3591400",
    "end": "3596440"
  },
  {
    "text": "what we ended up actually thinking here we've got a 16 on that one oh sorry it",
    "start": "3596440",
    "end": "3603640"
  },
  {
    "text": "won't be eight at a time my bad four at a time four times faster as well so okay",
    "start": "3603640",
    "end": "3612200"
  },
  {
    "text": "why is it for time Doubles Doubles spot my brain my brain is hard is hardwired",
    "start": "3612200",
    "end": "3618319"
  },
  {
    "text": "for float so anytime I see the V I'm like oh it's eight at a time no it's not four a time so I was like this should be",
    "start": "3618319",
    "end": "3623400"
  },
  {
    "text": "32 it's not 16 why unrolled four times plus we're four wide right so off we go",
    "start": "3623400",
    "end": "3631520"
  },
  {
    "text": "and now we can get effectively you know massive performance increase just by",
    "start": "3631520",
    "end": "3637799"
  },
  {
    "text": "avoiding that divider which was preventing our loop from uh from from",
    "start": "3637799",
    "end": "3643280"
  },
  {
    "text": "being properly vectorized did I type any of that in I did not you will notice",
    "start": "3643280",
    "end": "3648480"
  },
  {
    "text": "that this is completely scaler I never mentioned anything about doing this wide",
    "start": "3648480",
    "end": "3654720"
  },
  {
    "text": "the compiler just knows once it sees something it can vectorize it it's going to try right Loop",
    "start": "3654720",
    "end": "3661280"
  },
  {
    "text": "vectorization is what you want so can I pause you just for one second I'm sorry for pausing you we just got a raid from",
    "start": "3661280",
    "end": "3667440"
  },
  {
    "text": "study time hey study time thank you very much for uh the raid uh Casey can you switch back to the original code just",
    "start": "3667440",
    "end": "3673000"
  },
  {
    "text": "for one quick second so people can see it so this is the original code there's this big thing going on that is a",
    "start": "3673000",
    "end": "3678480"
  },
  {
    "text": "benchmark comparison test between languages saying hey this language is much much faster no this language is much much faster thank you for the",
    "start": "3678480",
    "end": "3684520"
  },
  {
    "text": "everyone's calling it a furry raid let's go I can get a couple cats out we can make it into a furry raid but uh Casey's",
    "start": "3684520",
    "end": "3690160"
  },
  {
    "text": "Wicked SM right and so this code right here now can you show the other",
    "start": "3690160",
    "end": "3695960"
  },
  {
    "text": "code this other code that you're seeing which looks more complex you know even erasing that that just looks more",
    "start": "3695960",
    "end": "3702200"
  },
  {
    "text": "complex one wouldn't know but this code right here runs four times as fast as the previous one due to how the compiler",
    "start": "3702200",
    "end": "3708359"
  },
  {
    "text": "can optimize it and all that and he's going to show how uh or he's been showing how some of these micro",
    "start": "3708359",
    "end": "3714200"
  },
  {
    "text": "benchmarks like you don't realign what is actually happening underneath the hood and so it just seems like oh",
    "start": "3714200",
    "end": "3721760"
  },
  {
    "text": "this one is this fast or oh no C's not all that fast but really what's actually happening is you're just not writing good code and he's just proven that",
    "start": "3721760",
    "end": "3728920"
  },
  {
    "text": "these tests aren't really actually showing um what you think they're showing you're actually showing uh you",
    "start": "3728920",
    "end": "3735680"
  },
  {
    "text": "defeating the compiler more than what the compiler is designed to do and this I mean for me I just would never have guessed doing a bunch of casting doing",
    "start": "3735680",
    "end": "3741680"
  },
  {
    "text": "all that truncating all this would actually be significantly faster",
    "start": "3741680",
    "end": "3746799"
  },
  {
    "text": "than the other way around so this is just mindblowing for me so what we see",
    "start": "3746799",
    "end": "3752200"
  },
  {
    "text": "here yeah it's just like look if you've got an integer modulus in here you're basically destroying any compiler's",
    "start": "3752200",
    "end": "3758279"
  },
  {
    "text": "ability to do anything with your Loop just right there uh and so again compilers can do very creative",
    "start": "3758279",
    "end": "3766599"
  },
  {
    "text": "stuff if they know what the actual integer modulus value is so for example if they knew that U was going to be",
    "start": "3766599",
    "end": "3773000"
  },
  {
    "text": "equal to 17 even even a non power of two number they can then do something very",
    "start": "3773000",
    "end": "3780079"
  },
  {
    "text": "creative here by turning that into a special series of operations that compute the modulus without actually",
    "start": "3780079",
    "end": "3786480"
  },
  {
    "text": "having to do a divide but if that number is unknown as they have forced it to be here all bets are off and that is just",
    "start": "3786480",
    "end": "3792920"
  },
  {
    "text": "all that will that is what will dominate the entire runtime of the loop will be that integer modulus and so breaking it",
    "start": "3792920",
    "end": "3799440"
  },
  {
    "text": "into something that the CPU can do natively and can do wide which I did here where we just break it into",
    "start": "3799440",
    "end": "3804720"
  },
  {
    "text": "something where I can a 32-bit integer modulus by just using 64-bit floating Point math paradoxically right you would",
    "start": "3804720",
    "end": "3812760"
  },
  {
    "text": "not think that that would speed it up but because integer modules is such a special purpose operation that is slow",
    "start": "3812760",
    "end": "3819760"
  },
  {
    "text": "um on the CPU uh doing so actually speeds it up dramatically because uh although again",
    "start": "3819760",
    "end": "3826680"
  },
  {
    "text": "it is more instructions those instructions can operate on four things at a time on AVX 512 you would get an",
    "start": "3826680",
    "end": "3833079"
  },
  {
    "text": "even bigger boost here because then you could operate on eight at a time because the register widening happens again so I",
    "start": "3833079",
    "end": "3838279"
  },
  {
    "text": "think zen5 right here uh we would be which I don't uh this this machine isn't",
    "start": "3838279",
    "end": "3844359"
  },
  {
    "text": "my machine downstairs is I'm tempted to go run it on there but uh so we are stuck with just avx2 on the sky machine",
    "start": "3844359",
    "end": "3852520"
  },
  {
    "text": "um you would expect an even bigger boost if you switch this to AVX 512 because",
    "start": "3852520",
    "end": "3857760"
  },
  {
    "text": "then it will unroll the loop and do eight not on it will vectorize the loop at eight wide still probably do you know",
    "start": "3857760",
    "end": "3864559"
  },
  {
    "text": "four four uh unrolls or something you know uh but it'll go uh eight wide at",
    "start": "3864559",
    "end": "3870319"
  },
  {
    "text": "that time and you'll get another doubling of your performance there uh probably depends on yeah some level of",
    "start": "3870319",
    "end": "3876319"
  },
  {
    "text": "double approximately sometimes they have to downclock like you can't run at the same clock speed when you're running AVX 512",
    "start": "3876319",
    "end": "3883599"
  },
  {
    "text": "code there's there's some things like that that that you you know you have sort of restrictions but for the most",
    "start": "3883599",
    "end": "3888960"
  },
  {
    "text": "part it is going to get faster especially on Zen 5 which has single cycle uh AVX 512 so it's that's like",
    "start": "3888960",
    "end": "3895720"
  },
  {
    "text": "it's a beast uh zen zen 5 is is an absolute Monster uh so so yeah so again",
    "start": "3895720",
    "end": "3904400"
  },
  {
    "text": "the just to bring this back to the original Point why are we looking at all this stuff well again if you are going",
    "start": "3904400",
    "end": "3912880"
  },
  {
    "text": "to be creating very small things that generally would be classified as a micro Benchmark which this sort of",
    "start": "3912880",
    "end": "3919279"
  },
  {
    "text": "is they really cannot be used for things like language comparison that is not",
    "start": "3919279",
    "end": "3924839"
  },
  {
    "text": "what you should be doing with this as I just demonstrated very small differences even in the same language with how you",
    "start": "3924839",
    "end": "3931960"
  },
  {
    "text": "chose to phrase an operation will dramatically affect what the compiler can do so as a language comparison it",
    "start": "3931960",
    "end": "3939359"
  },
  {
    "text": "simply doesn't make sense the only time you want to be using micro benchmarks is for exploratory purposes so you are",
    "start": "3939359",
    "end": "3946079"
  },
  {
    "text": "trying to determine something about what the language is doing like this Benchmark makes perfect sense if what I was trying to do is is explore the",
    "start": "3946079",
    "end": "3953200"
  },
  {
    "text": "ramifications of having an integer modulus in my code right now all of a",
    "start": "3953200",
    "end": "3958680"
  },
  {
    "text": "sudden it makes it makes perfect sense why I've created this Benchmark um so exploratory purposes",
    "start": "3958680",
    "end": "3964920"
  },
  {
    "text": "fine or an expert doing a demonstration right if someone wants to say I'm trying",
    "start": "3964920",
    "end": "3970599"
  },
  {
    "text": "to demonstrate this thing to you I've created these little benchmarks let me show you how it works totally valid not",
    "start": "3970599",
    "end": "3977079"
  },
  {
    "text": "valid is let me compare these two things and tell you about whether you should",
    "start": "3977079",
    "end": "3982760"
  },
  {
    "text": "use one or the other one or whether one is good or not or rank them in a list like that this is a completely",
    "start": "3982760",
    "end": "3989920"
  },
  {
    "text": "inappropriate way to do that and the reason is because of all of these things imagine a language Lua would be one for",
    "start": "3989920",
    "end": "3998760"
  },
  {
    "text": "example and I'm actually kind of surprised that it didn't do better on the Benchmark I wonder if there's something else going on like because",
    "start": "3998760",
    "end": "4004160"
  },
  {
    "text": "startup time is too expensive or something else like that there are languages that Define",
    "start": "4004160",
    "end": "4010160"
  },
  {
    "text": "everything as happening in double well if this was happening in double Lua could have gone for wide automatically",
    "start": "4010160",
    "end": "4016839"
  },
  {
    "text": "on this thing so actually Lua could have been at the top of that list probably if",
    "start": "4016839",
    "end": "4022839"
  },
  {
    "text": "they had put in the right arguments like my guess is the only reason someone didn't come up with lu being the fastest",
    "start": "4022839",
    "end": "4028520"
  },
  {
    "text": "language is because someone screwed up how they ran the test or maybe the compiler at the outside is too slow or",
    "start": "4028520",
    "end": "4034480"
  },
  {
    "text": "something like that right but in general this is why you don't do",
    "start": "4034480",
    "end": "4040119"
  },
  {
    "text": "this and by the way that would have been hilarious making Lua at the top awesome because people would have just like the",
    "start": "4040119",
    "end": "4045839"
  },
  {
    "text": "amount of people going I don't even understand the universe would just it would have just been beautiful I wish it",
    "start": "4045839",
    "end": "4051440"
  },
  {
    "text": "had you could still make it happen why you looking at me Prime this",
    "start": "4051440",
    "end": "4058520"
  },
  {
    "text": "is your kind of deal why don't you why don't you try to try to get this code submitted see if you could get this I'll send it to you if you want to try and",
    "start": "4058520",
    "end": "4065119"
  },
  {
    "text": "sneak it in the problem is that there's video evidence of it of of us talking about I know I know um then it'll be",
    "start": "4065119",
    "end": "4072039"
  },
  {
    "text": "just a new race you'll just you'll just open up a new race yeah well that's what it already is in a way you know the",
    "start": "4072039",
    "end": "4078359"
  },
  {
    "text": "worst part is is you may remember this from way back in the day uh but in like JavaScript land you if you had an array you'd set length to zero instead of",
    "start": "4078359",
    "end": "4085440"
  },
  {
    "text": "creating a new array because it was actually much much faster just to reuse your array and like all these like",
    "start": "4085440",
    "end": "4090880"
  },
  {
    "text": "incantations You' kind of come up with or ways in which you could do stuff faster guarantee you there would be an",
    "start": "4090880",
    "end": "4096480"
  },
  {
    "text": "npm package by the end of this afternoon called Fast div that people would use instead that you call a function to",
    "start": "4096480",
    "end": "4102719"
  },
  {
    "text": "divide by swiftly it wouldn't work but nonetheless you",
    "start": "4102719",
    "end": "4108159"
  },
  {
    "text": "would see these type of uh like these things crop up all over the world being like oh this is the secret way to do",
    "start": "4108159",
    "end": "4114080"
  },
  {
    "text": "it yep I I mean it's actually more dangerous for people to know this",
    "start": "4114080",
    "end": "4120199"
  },
  {
    "text": "because we will then have npm packages to deal with it look this is this is why",
    "start": "4120199",
    "end": "4125359"
  },
  {
    "text": "I stay out of those things I stay out I try to come on to streams and explain to",
    "start": "4125359",
    "end": "4132679"
  },
  {
    "text": "people not to do these things that that is where my responsibility ends afterwards you guys can left pad",
    "start": "4132679",
    "end": "4139359"
  },
  {
    "text": "everything if that's what you think should happen I don't want to get involved it's true okay I I actually",
    "start": "4139359",
    "end": "4147560"
  },
  {
    "text": "agree with you you know you just provide the tools but you tell them to be used responsibly and or or or irresponsibly I",
    "start": "4147560",
    "end": "4154080"
  },
  {
    "text": "don't know you know do do what you have to do yeah so that's it I think I think",
    "start": "4154080",
    "end": "4159560"
  },
  {
    "text": "we've covered just about itless anyone has any questions uh but that is just",
    "start": "4159560",
    "end": "4164960"
  },
  {
    "text": "while any questions we can we can I can be glad to kind of throw up some questions and see what people have to say about",
    "start": "4164960",
    "end": "4170758"
  },
  {
    "text": "all this uh just CU it's more it's kind of curious I got some people running up here but if not we can always um I can",
    "start": "4170759",
    "end": "4178120"
  },
  {
    "text": "always walk you through some sweet Emoji code yeah yeah okay you know what let me",
    "start": "4178120",
    "end": "4183520"
  },
  {
    "text": "let me switch well I guess if anyone has a question was faster than go by the way which is also I swear they're doing",
    "start": "4183520",
    "end": "4188600"
  },
  {
    "text": "something wrong with go now like I'm upset about because go should because go is a compiled thing so it should you know you",
    "start": "4188600",
    "end": "4195880"
  },
  {
    "text": "shouldn't be tripping up the garbage collection which should make it run that slow there should be nothing to it other than just running compiled codes there",
    "start": "4195880",
    "end": "4202600"
  },
  {
    "text": "should be like reasonably close to something like rust or C I would just assume there's very little runtime you",
    "start": "4202600",
    "end": "4208440"
  },
  {
    "text": "know there's that slight runtime initialization overhead and then everything else should be or slight",
    "start": "4208440",
    "end": "4213840"
  },
  {
    "text": "maybe that's why it's not maybe it's actually not so slight as I think it is maybe that's all it's really showing me is that goes overhead to initialize the",
    "start": "4213840",
    "end": "4219520"
  },
  {
    "text": "environment is much higher than I thought yeah I mean all languages that",
    "start": "4219520",
    "end": "4226000"
  },
  {
    "text": "have a heavy startup cost are going to get Ser seriously penalized in this Benchmark because uh the amount of work",
    "start": "4226000",
    "end": "4234000"
  },
  {
    "text": "being done again is not very much so the overhead of just starting up if your if",
    "start": "4234000",
    "end": "4239840"
  },
  {
    "text": "your language does a bunch of prepwork before starting that's really bad right",
    "start": "4239840",
    "end": "4245199"
  },
  {
    "text": "in this Benchmark yeah because this Benchmark does not time the loop it times the entirety from starting the",
    "start": "4245199",
    "end": "4251520"
  },
  {
    "text": "program through the loop to the print statement correct so obtaining your standard out and",
    "start": "4251520",
    "end": "4257440"
  },
  {
    "text": "depending on how it prints out could also you know you're also like console.log does something different than process.st standard out. right so I",
    "start": "4257440",
    "end": "4264280"
  },
  {
    "text": "assume it does even the code that's creating asky from an integer that's measured here right like all of it's",
    "start": "4264280",
    "end": "4271560"
  },
  {
    "text": "measured um that's crazy yeah uh let's see we don't let's see uh",
    "start": "4271560",
    "end": "4278360"
  },
  {
    "text": "someone is saying let's see we don't have to we don't have to consider cash hits and Branch predictions in this case",
    "start": "4278360",
    "end": "4283440"
  },
  {
    "text": "right yeah for some unknown reason um and I I",
    "start": "4283440",
    "end": "4288800"
  },
  {
    "text": "I guess I don't really know why they did make this particular array uh slightly",
    "start": "4288800",
    "end": "4296600"
  },
  {
    "text": "larger than the L1 cache on many x64",
    "start": "4296600",
    "end": "4301679"
  },
  {
    "text": "machines but it is uh not larger than the L1 cache on the Mac he was running",
    "start": "4301679",
    "end": "4307800"
  },
  {
    "text": "it on which means this entire thing is in the cache like this is 10,000 4 byte",
    "start": "4307800",
    "end": "4314760"
  },
  {
    "text": "integers are 40K uh and I believe the M Series has a 64k L1 data cache I don't really",
    "start": "4314760",
    "end": "4322960"
  },
  {
    "text": "remember but I think it's like that uh so technically this whole thing will be in the cache anyway and even if it",
    "start": "4322960",
    "end": "4329320"
  },
  {
    "text": "wasn't it wouldn't really matter because this despite the fact that it looks like it's doing rights here it's not actually",
    "start": "4329320",
    "end": "4335960"
  },
  {
    "text": "because the compiler knows these are not marked as volatile or anything so the compiler is is under no obligation to",
    "start": "4335960",
    "end": "4342239"
  },
  {
    "text": "actually flush them and as we see uh back in the code here it doesn't let me let me grab the",
    "start": "4342239",
    "end": "4348880"
  },
  {
    "text": "uh so this was the original right uh the original um code for the the thing and",
    "start": "4348880",
    "end": "4355639"
  },
  {
    "text": "you can see it does everything excuse me uh it does everything in such a way as",
    "start": "4355639",
    "end": "4362480"
  },
  {
    "text": "to avoid actually doing um the the right",
    "start": "4362480",
    "end": "4367600"
  },
  {
    "text": "back right it's it's like just kind of summing it in place so it has to do",
    "start": "4367600",
    "end": "4372639"
  },
  {
    "text": "loads here but it does doesn't have to generate any right traffic so as long as",
    "start": "4372639",
    "end": "4379560"
  },
  {
    "text": "these were being serviced on the order of the speed of this modulus you'd",
    "start": "4379560",
    "end": "4385719"
  },
  {
    "text": "probably be fine but like I said in this case they should generally be I",
    "start": "4385719",
    "end": "4391920"
  },
  {
    "text": "mean they're all going to be in the cache and this Loop is looping over the same ones so you you know the my would",
    "start": "4391920",
    "end": "4397360"
  },
  {
    "text": "only be right at the beginning anyway this again it's the weird thing you would expect this to be J wouldn't you I",
    "start": "4397360",
    "end": "4404560"
  },
  {
    "text": "mean you know what I mean you would expect these to be flipped and this to be J so that you you were so that you",
    "start": "4404560",
    "end": "4409960"
  },
  {
    "text": "were yeah yeah you're not summing up a specific spot yes but it's not and so it's like let's suppose I got a cash",
    "start": "4409960",
    "end": "4416520"
  },
  {
    "text": "Miss because you know it doesn't all fit so we we clear them all out and then we go back to the beginning and now we're",
    "start": "4416520",
    "end": "4422239"
  },
  {
    "text": "going to get a cash Miss well I'll miss the first time but I'm looping a 100,000 times and so these will all be in the",
    "start": "4422239",
    "end": "4428880"
  },
  {
    "text": "cash then right um so yeah yeah I assume the",
    "start": "4428880",
    "end": "4435760"
  },
  {
    "text": "10,000 was because 10,000 is a number I like I I I don't think there was some sort of scientific",
    "start": "4435760",
    "end": "4442400"
  },
  {
    "text": "end or like really like direct thought through of like oh this is what the L1 cache size is uh so so so yeah but",
    "start": "4442400",
    "end": "4450000"
  },
  {
    "text": "anyway that's kind of a long wited way of saying cash misses I wouldn't expect to really have any effect here uh they I",
    "start": "4450000",
    "end": "4456400"
  },
  {
    "text": "don't think they would matter just because of the way that they've structured it doesn't really rely on any",
    "start": "4456400",
    "end": "4461639"
  },
  {
    "text": "kind of random access pattern that's pulling things in or anything like that and the other thing is uh in this",
    "start": "4461639",
    "end": "4468600"
  },
  {
    "text": "particular case they asked about Branch mispredictions there really are no branches other than the loop so they're",
    "start": "4468600",
    "end": "4475520"
  },
  {
    "text": "always going to be perfectly predicted because pretty much they're going to run 99,999 times correctly and one",
    "start": "4475520",
    "end": "4483159"
  },
  {
    "text": "misprediction for the outer loop right and uh 100 uh",
    "start": "4483159",
    "end": "4488320"
  },
  {
    "text": "99,999 times correctly and one misprediction for the in Loop right yeah uh so you wouldn't really Branch",
    "start": "4488320",
    "end": "4495719"
  },
  {
    "text": "mispredictions even for a fairly crappy Branch Mis predictor you wouldn't really expect it to have any problem so",
    "start": "4495719",
    "end": "4503679"
  },
  {
    "text": "um okay I guess so here's a question that I just see frequently showing up on the",
    "start": "4503679",
    "end": "4509560"
  },
  {
    "text": "chat which is if you had to make a language comparison performance thing how would",
    "start": "4509560",
    "end": "4516840"
  },
  {
    "text": "you go about it um I mean I think the reason we don't",
    "start": "4516840",
    "end": "4522000"
  },
  {
    "text": "really have something like that is because it's very difficult to make something that's actually useful and the",
    "start": "4522000",
    "end": "4528159"
  },
  {
    "text": "reason it's difficult is because what you want is very much like I was talking",
    "start": "4528159",
    "end": "4533320"
  },
  {
    "text": "about at the very beginning of the stream when I mentioned like Gamers Nexus Hardware unbox those kind of channels that do like hey I'm going to",
    "start": "4533320",
    "end": "4540600"
  },
  {
    "text": "run this entire game um or these the segments of these games and I'm going to",
    "start": "4540600",
    "end": "4546120"
  },
  {
    "text": "run that whole thing measure its frames per second what the 1% lows are all that",
    "start": "4546120",
    "end": "4551239"
  },
  {
    "text": "stuff gather that for 40 games and then here's a big chart that's a pretty good Benchmark for comparison purposes right",
    "start": "4551239",
    "end": "4558520"
  },
  {
    "text": "for languages ideally we would want something similar right we want something where we're basically going to say like here's a real thing we care",
    "start": "4558520",
    "end": "4565679"
  },
  {
    "text": "about doing it's an https server and we're going to serve this many client",
    "start": "4565679",
    "end": "4571040"
  },
  {
    "text": "requests this specific set of client requests or whatever right and we got to get back actual answers from actual",
    "start": "4571040",
    "end": "4576239"
  },
  {
    "text": "files on the drive and all that stuff you would want a bunch of workloads like",
    "start": "4576239",
    "end": "4581440"
  },
  {
    "text": "that that you run and you go when you write these in these languages here's what you actually get and the reason why",
    "start": "4581440",
    "end": "4588400"
  },
  {
    "text": "I think that's really difficult is in order to be good they have to be not toy right you have to actually develop a",
    "start": "4588400",
    "end": "4594400"
  },
  {
    "text": "whole like htps server or something in there right and it can't all just be you",
    "start": "4594400",
    "end": "4600000"
  },
  {
    "text": "know opening open SSL or something because then it's all just benchmarking C because that's all written in C++ or",
    "start": "4600000",
    "end": "4605800"
  },
  {
    "text": "something right so uh you have to you have to make a bunch of code in these",
    "start": "4605800",
    "end": "4612520"
  },
  {
    "text": "languages and you know no one wants to do that they would rather do this right so I think it's pretty hard to make a",
    "start": "4612520",
    "end": "4618719"
  },
  {
    "text": "good language comparison uh hard may be the wrong word time consuming it's a lot",
    "start": "4618719",
    "end": "4624679"
  },
  {
    "text": "of work it's a lot of elbow grease for people to put in creating these things and then you also have to have some kind",
    "start": "4624679",
    "end": "4630480"
  },
  {
    "text": "of an idea of how you're going to keep that fair if the programmer who wrote uh your rust code is very good at writing",
    "start": "4630480",
    "end": "4637120"
  },
  {
    "text": "efficient rust code but the programmer who writes your um go code is just",
    "start": "4637120",
    "end": "4642239"
  },
  {
    "text": "really bad right that makes go look look like it's not very good right but that's",
    "start": "4642239",
    "end": "4648080"
  },
  {
    "text": "not true yeah so you have a lot of problems to so so I think the reason we haven't seen a good one is because it's",
    "start": "4648080",
    "end": "4653960"
  },
  {
    "text": "very very difficult uh it's a very very difficult question to ask and I'm not",
    "start": "4653960",
    "end": "4659000"
  },
  {
    "text": "sure I'm I'm not sure I'd expect to see I think you have to do a more targeted",
    "start": "4659000",
    "end": "4664360"
  },
  {
    "text": "assessment yourself uh if you really want to know what Which languages is are",
    "start": "4664360",
    "end": "4669400"
  },
  {
    "text": "are better at something uh for you and I think like what you said with the gamer Nexus stuff",
    "start": "4669400",
    "end": "4675080"
  },
  {
    "text": "kind of shows how unfair it is because with the gamer Nexus stuff if you take a game and you run a specific path all the",
    "start": "4675080",
    "end": "4680120"
  },
  {
    "text": "way through the game you're going to get generally the same things computed each time and you're only changing out the underlying Hardware whereas this is like",
    "start": "4680120",
    "end": "4686600"
  },
  {
    "text": "you could see even with just how you wrote it you being more talented with the old C you were able to write it in such a way that's vast probably it's",
    "start": "4686600",
    "end": "4694000"
  },
  {
    "text": "considerably different than the rest of the exercises showed but you were able to be much faster because you knew all these tricks and so it's just like each",
    "start": "4694000",
    "end": "4700719"
  },
  {
    "text": "one of the shapes are even going to be fundamentally different how people are writing the code if they it's specific for their language so it's not like",
    "start": "4700719",
    "end": "4707040"
  },
  {
    "text": "you're testing the same thing on different speeds and memory instead you're actually testing different things",
    "start": "4707040",
    "end": "4713000"
  },
  {
    "text": "potentially on the same CPU or maybe even different CPUs you can get like all sorts of crazy there's a lot there's",
    "start": "4713000",
    "end": "4718480"
  },
  {
    "text": "like an area of differences as opposed to just like a a line of differences yeah and you know that's why",
    "start": "4718480",
    "end": "4726199"
  },
  {
    "text": "I say like I'm just not sure especially because half these languages go through llvm backend anyway right like it's like",
    "start": "4726199",
    "end": "4732800"
  },
  {
    "text": "their code gen is actually the same and it's just a question of what the semantics are that you're putting in",
    "start": "4732800",
    "end": "4738360"
  },
  {
    "text": "that gets fed to that code genen right so uh you end up with",
    "start": "4738360",
    "end": "4744159"
  },
  {
    "text": "yeah it's a difficult problem if you actually wanted to solve it I don't blame them for not solving it but I wish",
    "start": "4744159",
    "end": "4750639"
  },
  {
    "text": "they just wouldn't do this sort of thing if you do want to interrogate how do loops work in various languages so let",
    "start": "4750639",
    "end": "4757520"
  },
  {
    "text": "maybe take an easier case let's say we wanted to talk about how inefficient are Loops in languages generally don't do",
    "start": "4757520",
    "end": "4764520"
  },
  {
    "text": "this just do some disassemblies of what the loops invariance like maintenance code",
    "start": "4764520",
    "end": "4772120"
  },
  {
    "text": "is and show it be like oh here's how you know I mean I've done this for python before on uh on computer enhance one of",
    "start": "4772120",
    "end": "4778880"
  },
  {
    "text": "the things we do right I take the python code to add two numbers together right A plus b that's it C equals a plus b uh",
    "start": "4778880",
    "end": "4786159"
  },
  {
    "text": "and I show like oh well python goes through you know hundred some odd instructions just to do that instead of",
    "start": "4786159",
    "end": "4792000"
  },
  {
    "text": "the one instruction it would take in or normal language that's useful to people",
    "start": "4792000",
    "end": "4797480"
  },
  {
    "text": "it's like oh okay when I'm running interpreted python I'm in trouble right I I really should be thinking you know",
    "start": "4797480",
    "end": "4802760"
  },
  {
    "text": "if I if I actually care about this I need to use some kind of compiled python alternative uh because it's going to be",
    "start": "4802760",
    "end": "4810040"
  },
  {
    "text": "really costly uh to do anything in the in Python proper so you know just having",
    "start": "4810040",
    "end": "4815199"
  },
  {
    "text": "that frame of reference that's pretty valuable and again you can do that just by looking at what happens you don't have to create a little synthetic",
    "start": "4815199",
    "end": "4821440"
  },
  {
    "text": "Benchmark like this that's you know misleading uh I think TJ said it really well which is I think it also doesn't",
    "start": "4821440",
    "end": "4828000"
  },
  {
    "text": "show it well because you spend if you spend a thousand hours making one Benchmark fast doesn't mean that the",
    "start": "4828000",
    "end": "4833239"
  },
  {
    "text": "average the easy idiomatic code is also fast they don't compare really at all so it doesn't even translate to production",
    "start": "4833239",
    "end": "4839600"
  },
  {
    "text": "code really because maybe no one writes the optimized version of go or see or whatever in real life yeah it's because",
    "start": "4839600",
    "end": "4844760"
  },
  {
    "text": "you have you have constraints you have things you need to get done you have to move fast this is very different two different mentalities going on here too",
    "start": "4844760",
    "end": "4852280"
  },
  {
    "text": "well and I would also I would use that that comment which is very accurate to underscore something we've said but",
    "start": "4852280",
    "end": "4857639"
  },
  {
    "text": "we'll say it again because I think it's very important intentionally thwarting the compilers optimizations which is",
    "start": "4857639",
    "end": "4864080"
  },
  {
    "text": "what this Benchmark is designed to do uh the way they've written it it is",
    "start": "4864080",
    "end": "4869840"
  },
  {
    "text": "bad because what the average programmer actually wants is to know that the compiler will be doing those",
    "start": "4869840",
    "end": "4875840"
  },
  {
    "text": "optimizations for them right the whole point is you don't want to have to think",
    "start": "4875840",
    "end": "4881840"
  },
  {
    "text": "about what the most efficient way is to add a bunch of things together in a loop you want the compiler to come in and go like oh I got you buddy and fix that up",
    "start": "4881840",
    "end": "4889480"
  },
  {
    "text": "for you that's that's the actual value add to you as a programmer is not having to know what the correct way was to",
    "start": "4889480",
    "end": "4896199"
  },
  {
    "text": "structure that thing and so by benchmarking effectively how do we prevent these compilers from doing a",
    "start": "4896199",
    "end": "4902760"
  },
  {
    "text": "good job you're you're taking away almost the only thing uh that the average programmer actually would want",
    "start": "4902760",
    "end": "4908239"
  },
  {
    "text": "to know about looping which is will the compiler step in and help me if I write",
    "start": "4908239",
    "end": "4914199"
  },
  {
    "text": "something fairly obvious will it be able to just know oh let me do the clever thing for you there right yeah and",
    "start": "4914199",
    "end": "4921239"
  },
  {
    "text": "they've they've effectively said no you know compiler you can't you know don't do that and that yeah that actually",
    "start": "4921239",
    "end": "4928840"
  },
  {
    "text": "makes a lot of sense it's it's it's it's like the inverse of it all which is that it it's not making it clear obvious what",
    "start": "4928840",
    "end": "4935480"
  },
  {
    "text": "what our goal is the inverse yeah yes it's the inverse of what you actually would want to know about the compiler's",
    "start": "4935480",
    "end": "4940520"
  },
  {
    "text": "loop Behavior so it's crazy well hey I appreciate this",
    "start": "4940520",
    "end": "4945679"
  },
  {
    "text": "I'm very glad we got to do this me too thanks for having me back on I I really appreciate it and and uh I was I was",
    "start": "4945679",
    "end": "4952000"
  },
  {
    "text": "excited for this one because I I was pretty upset about that Benchmark I don't know how seriously people actually",
    "start": "4952000",
    "end": "4957520"
  },
  {
    "text": "were taking it but I was like oh man I hope people aren't it made it to LinkedIn they made it to LinkedIn so you already know that there like there has",
    "start": "4957520",
    "end": "4964679"
  },
  {
    "text": "been internal talks and stuff like that oh no people have probably switched from",
    "start": "4964679",
    "end": "4970400"
  },
  {
    "text": "node to bun or in the attempt of switching from node to bun okay and not",
    "start": "4970400",
    "end": "4975560"
  },
  {
    "text": "say writing something in go because they looked at this Benchmark and saw that in fact if you really do look at it here",
    "start": "4975560",
    "end": "4982679"
  },
  {
    "text": "I'm going to make you small if you really do look at it but is in fact faster than",
    "start": "4982679",
    "end": "4989320"
  },
  {
    "text": "go so you know like something like this has happened like someone has used this like at least once this has happened you",
    "start": "4990239",
    "end": "4996120"
  },
  {
    "text": "know it you just can't even help it it's just a part of life oh God okay well",
    "start": "4996120",
    "end": "5002040"
  },
  {
    "text": "yeah I mean I don't have opinions about things like node versus bunner or anything like that right but what I do have opinions on is please don't use",
    "start": "5002040",
    "end": "5008600"
  },
  {
    "text": "this Benchmark for that yeah uh this Benchmark should not be used for anything it's it's not a useful",
    "start": "5008600",
    "end": "5013719"
  },
  {
    "text": "Benchmark it should be disregarded completely",
    "start": "5013719",
    "end": "5018120"
  }
]