[
  {
    "text": "let's do the next thing here why after 6 years I'm over graphql okay okay",
    "start": "120",
    "end": "5200"
  },
  {
    "text": "reasonable I I just wanted to make sure this wasn't just like a mega article sometimes you get these articles and it's just like I henceforth shall",
    "start": "5200",
    "end": "11759"
  },
  {
    "text": "Proclaim that any further usage of graphql shall be prohibited within the bounds of my kingdom set forth by",
    "start": "11759",
    "end": "18640"
  },
  {
    "text": "principle of section for and you're like dude I can't I can't read all of that I can't I can't do all of that I just can't I need you to like I need you to",
    "start": "18640",
    "end": "26599"
  },
  {
    "text": "bring it in a little bit all right why after six years I'm over ql by the way so I have a lot of experience in these",
    "start": "26599",
    "end": "33160"
  },
  {
    "text": "type of data Fetchers I never actually used graphql I met uh I met with the team creating graphql before people knew",
    "start": "33160",
    "end": "40920"
  },
  {
    "text": "what graphql was to talk about data fetching and caching and things like that so like I I I used to be very",
    "start": "40920",
    "end": "47640"
  },
  {
    "text": "deeply familiar with this entire like world uh but I've long since dipped out",
    "start": "47640",
    "end": "53320"
  },
  {
    "text": "of that one the graph graphql is an incredible piece of technology that has captured a lot of Mind share since I",
    "start": "53320",
    "end": "58640"
  },
  {
    "text": "first started slinging it in production in 2018 you won't have to look far back",
    "start": "58640",
    "end": "63879"
  },
  {
    "text": "on this rather inactive blog to see I previously championed this technology after building many a react Spa on top",
    "start": "63879",
    "end": "70840"
  },
  {
    "text": "the hodgepodge of untyped Json rest apis I found graph queel a breath of fresh",
    "start": "70840",
    "end": "75960"
  },
  {
    "text": "air I was truly a graph quel hype train member okay okay okay okay that's I I",
    "start": "75960",
    "end": "82840"
  },
  {
    "text": "like the intro I'm excited about this what changed however as the years have gone on and I've had the opportunity to",
    "start": "82840",
    "end": "88840"
  },
  {
    "text": "deploy uh to environments where nonfunctional requirements like security performance and maintainability were",
    "start": "88840",
    "end": "95200"
  },
  {
    "text": "more of a concern this is dude that is such a like this right here is such a crazy",
    "start": "95200",
    "end": "101520"
  },
  {
    "text": "statement to contrast with graphql this is the crazy statement my perspective has changed in this article I'd like to",
    "start": "101520",
    "end": "107479"
  },
  {
    "text": "take you through why today I would not recommend graph quel to most people and what I think is our better Alternatives",
    "start": "107479",
    "end": "115159"
  },
  {
    "text": "dude that's funny yeah I would I would use graphql except I would use it if you have concerns about security performance",
    "start": "115159",
    "end": "122240"
  },
  {
    "text": "or maintainability but besides for those three small mole Hills really If we're",
    "start": "122240",
    "end": "128599"
  },
  {
    "text": "honest about it mole Hills I would say you could use graph graph quel she was like what all right throughout uh uh",
    "start": "128599",
    "end": "135959"
  },
  {
    "text": "throughout I will use Ruby code uh oh I can't read Ruby code uh with the excellent graph quel Ruby library for",
    "start": "135959",
    "end": "142920"
  },
  {
    "text": "examples but I believe many of these problems are ubiquitous across choice of language slra quel Library if you know",
    "start": "142920",
    "end": "150040"
  },
  {
    "text": "better Solutions and uh mitigations please do leave a comment now let's begin attack service it was obvious from",
    "start": "150040",
    "end": "156599"
  },
  {
    "text": "gra graph qu's beginning that exposing a query language to untrusted clients increases the attack surface of an",
    "start": "156599",
    "end": "161760"
  },
  {
    "text": "application absolutely the amount the the availability of a simple while loop destroying your service is incredibly",
    "start": "161760",
    "end": "168760"
  },
  {
    "text": "higher when you have one of these type of like this as an availability all I have to do if you don't have things like",
    "start": "168760",
    "end": "175599"
  },
  {
    "text": "well thought through if you have a large list of data all I I have to do is",
    "start": "175599",
    "end": "180720"
  },
  {
    "text": "request large lists of data from you and I can effectively hold down your CPUs",
    "start": "180720",
    "end": "186080"
  },
  {
    "text": "and take like I could take all your CPUs from you with a just a while loop and so there's a lot of stuff you got to think",
    "start": "186080",
    "end": "192000"
  },
  {
    "text": "about uh nevertheless the variety of attacks to consider was even broader than I imagine and mitigating them is",
    "start": "192000",
    "end": "198000"
  },
  {
    "text": "quite a burden uh here's the worst I've had to deal with over the years",
    "start": "198000",
    "end": "203280"
  },
  {
    "text": "authorization I think this is the most widely widely understood risk of graph quel so I won't go into it uh into too",
    "start": "203280",
    "end": "209519"
  },
  {
    "text": "much depth here tldr if you expose a fully self-documented quering API uh to",
    "start": "209519",
    "end": "214760"
  },
  {
    "text": "all clients you better be damn sure that every field is authorized against the current user appropriately to the",
    "start": "214760",
    "end": "219879"
  },
  {
    "text": "context in which that field is being fetched initial initially authorizing objects seems like enough but this",
    "start": "219879",
    "end": "226560"
  },
  {
    "text": "quickly becomes insufficient for example say we are on X API handle I'm allowed",
    "start": "226560",
    "end": "232000"
  },
  {
    "text": "to view this uh thing email I shouldn't view this user blocked users and",
    "start": "232000",
    "end": "237159"
  },
  {
    "text": "sometimes I shouldn't even be able to see their public info because contact matters yeah that's fair is X like",
    "start": "237159",
    "end": "242360"
  },
  {
    "text": "Twitter I think so I think they're pretty I think they're pretty close uh you got to go the other way go towards",
    "start": "242360",
    "end": "247480"
  },
  {
    "text": "stricter schema with grpc and similar yeah I think that's that's probably Fair uh grpc is is a very interesting kind of",
    "start": "247480",
    "end": "254599"
  },
  {
    "text": "difference on this we dos ourselves with our graph quo queries you will dos",
    "start": "254599",
    "end": "259680"
  },
  {
    "text": "yourself it's not even dosing you could just straight just Doss it a single person can just destroy things uh one",
    "start": "259680",
    "end": "265199"
  },
  {
    "text": "wonders how much graph Quil holds responsibility for broken Access Control climbing to the uh oas's uh top 10's",
    "start": "265199",
    "end": "272000"
  },
  {
    "text": "number one spot wow one mitigation here is to make your API secure by default by",
    "start": "272000",
    "end": "277080"
  },
  {
    "text": "integrating with your graph quel libraries authorization framework every object returned Andor field resolved",
    "start": "277080",
    "end": "283080"
  },
  {
    "text": "your authorization system is called to confirm that the current user has access which also can be it's very very",
    "start": "283080",
    "end": "289000"
  },
  {
    "text": "interesting because it can also be there's a lot of performance implications and complexity of programming when you have to do this at",
    "start": "289000",
    "end": "295520"
  },
  {
    "text": "this layer it just feels difficult uh compare uh this to rest world where generally speaking you would authorize",
    "start": "295520",
    "end": "301960"
  },
  {
    "text": "every endpoint a far smaller task yes you're authorizing the usage of that endpoint which is a very simple thing to",
    "start": "301960",
    "end": "308440"
  },
  {
    "text": "get right authorizing every last like field that feels like a really hard like",
    "start": "308440",
    "end": "314400"
  },
  {
    "text": "it I mean in my head that doesn't feel tenable yeah a well-defined wall is much easier to Define like build the wall",
    "start": "314400",
    "end": "320800"
  },
  {
    "text": "build the wall way easier than trying to build the wall around little individual ones all right uh not uh not just the",
    "start": "320800",
    "end": "327600"
  },
  {
    "text": "field but the context in which it is used yeah there's a lot of there's a lot of stuff you have to do there rate",
    "start": "327600",
    "end": "333199"
  },
  {
    "text": "limiting with graph quel we cannot assume that all requests are equally hard on the server this is also very",
    "start": "333199",
    "end": "339039"
  },
  {
    "text": "very true uh I can only do this in the shape of falor which is the uh alternative data fetching Library",
    "start": "339039",
    "end": "344880"
  },
  {
    "text": "provided by Netflix that I help right uh but the idea is really really simple I can get your I can get your movies right",
    "start": "344880",
    "end": "351479"
  },
  {
    "text": "I can say hey give me your movies give me 0 through 10 give me 0 through 10",
    "start": "351479",
    "end": "357039"
  },
  {
    "text": "right so because you know it's it's a list of list of movies really it's a low Mo 0 through 10 and then the fields that",
    "start": "357039",
    "end": "362960"
  },
  {
    "text": "I want right well okay this seems a pretty reasonable request I'm going to request 100 movies well what prevents a",
    "start": "362960",
    "end": "369000"
  },
  {
    "text": "malicious user from not saying zero through 1,000 just take request copy as",
    "start": "369000",
    "end": "374319"
  },
  {
    "text": "curl and just change this little bit of data and boom all of a sudden I'm searching for a million videos on the",
    "start": "374319",
    "end": "380479"
  },
  {
    "text": "back end I'm just saying you can accidentally end up requesting a lot of data and then all of a sudden you know",
    "start": "380479",
    "end": "386400"
  },
  {
    "text": "it's not like welcome to Costco cashing is not necessarily Easy A C surf yeah you could use C- surf but then someone",
    "start": "386400",
    "end": "392039"
  },
  {
    "text": "can still there's still ways people can edit stuff right it's not crazy to like make it difficult uh with graph Quil we",
    "start": "392039",
    "end": "398880"
  },
  {
    "text": "cannot assume that all requests are equally hard on the server there is no limit to how big a query can be even the uh even in a completely empty schema by",
    "start": "398880",
    "end": "405720"
  },
  {
    "text": "the way this was the uh huge security risk that I created at Netflix I I mean it's hard for me to say that I solely",
    "start": "405720",
    "end": "411120"
  },
  {
    "text": "created it there was lots of really talented Engineers that really designed a situation in which could ultimately be",
    "start": "411120",
    "end": "417280"
  },
  {
    "text": "used to strangle Netflix with a simple while with a three line bash script uh",
    "start": "417280",
    "end": "422400"
  },
  {
    "text": "and you couldn't roll back you could only roll forward even in a completely empty empty schema the types exposed for",
    "start": "422400",
    "end": "427720"
  },
  {
    "text": "introspection are cyclical so it is possible to craft a valid query that returns megabytes of Json goodbye server",
    "start": "427720",
    "end": "434720"
  },
  {
    "text": "that's all you need to do uh I uh just tested this attack against a very popular graph Quil website API Explorer",
    "start": "434720",
    "end": "440680"
  },
  {
    "text": "and got 500 responses back after 10 seconds oh dang schema type type name",
    "start": "440680",
    "end": "446360"
  },
  {
    "text": "interfaces possible types interfaces possible names name um I just ate 10 seconds of someone's CPU",
    "start": "446360",
    "end": "452759"
  },
  {
    "text": "time running this whites space removed 128 byte query two to the S query and it",
    "start": "452759",
    "end": "460000"
  },
  {
    "text": "doesn't even require me to be logged in dude okay again again a three line bash",
    "start": "460000",
    "end": "465599"
  },
  {
    "text": "script assuming you put dun on its own line in the wild true Loop you could",
    "start": "465599",
    "end": "471639"
  },
  {
    "text": "just you could just destroy someone's server it doesn't even require a Dos it just requires you're just dossing",
    "start": "471639",
    "end": "477680"
  },
  {
    "text": "yourself curl in a loop baby that's it uh comment it's funny that he mentions this cuz this was the exact thing that I",
    "start": "477680",
    "end": "483599"
  },
  {
    "text": "brought up at the very beginning which is the danger of these kind of things is that you open up anybody to query how",
    "start": "483599",
    "end": "488960"
  },
  {
    "text": "they want and if someone finds an attack Vector to query your server in such a way that it causes the optimal usage of",
    "start": "488960",
    "end": "494919"
  },
  {
    "text": "your CPU they've effectively just handcuffed you like they just win they've now just destroyed your business",
    "start": "494919",
    "end": "502039"
  },
  {
    "text": "and if they choose to destroy you you're going to have to figure out how to change that yeah it's a denial of wallet",
    "start": "502039",
    "end": "507919"
  },
  {
    "text": "they're going to make you they're going to make you if you have like Auto Magic horizontally scaling going on they could",
    "start": "507919",
    "end": "514080"
  },
  {
    "text": "just boom wallet gone you know what I'm going to do I'm going to hit you with that while loop I'm going to make this request once a second we'll DS it so you",
    "start": "514080",
    "end": "521399"
  },
  {
    "text": "can't really tell who's it's coming from it's not like a really high rate of request so cloudflare is not going to have any idea right and then by the way",
    "start": "521399",
    "end": "528720"
  },
  {
    "text": "Cloud flare will see that you're taking all the CPU time and then Cloud flare will be like yo give me $120,000 right",
    "start": "528720",
    "end": "535240"
  },
  {
    "text": "now or you're done I'm turning off your machines tomorrow and they're going to hit you with that trusted safety team",
    "start": "535240",
    "end": "540640"
  },
  {
    "text": "which is actually just going to be the sales team that's not going to tell you anything that's going wrong but that you just owe them a ton of money you're not",
    "start": "540640",
    "end": "546839"
  },
  {
    "text": "going to just get denial of service you're going to get the old the good oldfashioned Cloud flare extortion The",
    "start": "546839",
    "end": "552839"
  },
  {
    "text": "Trusted sales team I love Cloud flare uh a common uh mitigation for this attack is to estimate the complexity of uh",
    "start": "552839",
    "end": "559600"
  },
  {
    "text": "resolving every single field in a schema and abandon queries that exceed the maximum complexity value nice that's uh",
    "start": "559600",
    "end": "566040"
  },
  {
    "text": "that's effectively what we did with falor if your uh we would we would parse your query which are much simpler queries by the way we'd parse your query",
    "start": "566040",
    "end": "573279"
  },
  {
    "text": "and say are you requesting more than like 3,000 objects oh you are then no or whatever our limit was I can't remember",
    "start": "573279",
    "end": "579959"
  },
  {
    "text": "maybe it's like 200 or you know there's some amount of things you can't request more than this amount of things and we",
    "start": "579959",
    "end": "586040"
  },
  {
    "text": "did that before the request got into our system which would thus prevent the problem from happening uh uh let's see",
    "start": "586040",
    "end": "592800"
  },
  {
    "text": "capture the actual complexity of the Run query and take it out of the bucket of credits that resets at some interval",
    "start": "592800",
    "end": "598279"
  },
  {
    "text": "allow some sort of query to runc given some sort of budget and when that budget's exceeded you don't run that",
    "start": "598279",
    "end": "604320"
  },
  {
    "text": "query anymore that sounds a little bit more dangerous if I if I'm if I'm understanding this what what's being said here this sounds much more",
    "start": "604320",
    "end": "610959"
  },
  {
    "text": "dangerous in the sense that you're causing you could cause real users to not be able to get data because they're",
    "start": "610959",
    "end": "617000"
  },
  {
    "text": "like ah sorry um you know sorry already been used Al alter uh alternative rate limit",
    "start": "617000",
    "end": "624720"
  },
  {
    "text": "yeah it's an alternative rate limit yeah it's interesting uh this calculation is as delicate Affair uh is a delicate",
    "start": "624720",
    "end": "630880"
  },
  {
    "text": "Affair to get right let me see what it is preventative query complexity what the hell is this language that I'm even",
    "start": "630880",
    "end": "636440"
  },
  {
    "text": "looking at looks like we're slicing and grabbing stuff out I don't even know what it is honestly I don't even know",
    "start": "636440",
    "end": "643000"
  },
  {
    "text": "what this language is like I don't even know how to read this one I don't know how to read that okay if your limit is",
    "start": "643000",
    "end": "648200"
  },
  {
    "text": "Staff else you're going to get let's see oh the limit so we just do limit Times Child complexity and child complexity",
    "start": "648200",
    "end": "654519"
  },
  {
    "text": "has some value so it must run up up the chain it starts at the little Leafs and",
    "start": "654519",
    "end": "659959"
  },
  {
    "text": "defines how difficult it is and then goes up and just like keeps adding them that's must be what it is Ruby is",
    "start": "659959",
    "end": "665279"
  },
  {
    "text": "interesting for sure yeah okay that I mean that makes sense right it's like uh how I imagine whatever is going on there",
    "start": "665279",
    "end": "671320"
  },
  {
    "text": "is pretty simple right you have like your big query that's I'm going to just draw as a tree because I I don't know why I'm drawing it as a tree uh we're",
    "start": "671320",
    "end": "677519"
  },
  {
    "text": "going to draw it as a tree and so if each one of these are worth 10 you then you know okay this is going to be worth",
    "start": "677519",
    "end": "682839"
  },
  {
    "text": "20 this is worth 20 then this thing must be worth 40 anyways I can read recovering Ruby Dev okay I I don't know",
    "start": "682839",
    "end": "689079"
  },
  {
    "text": "I have no idea what I I literally had no idea what anything meant uh you can uh make an assumption about the comp",
    "start": "689079",
    "end": "695320"
  },
  {
    "text": "complexity of these but if you are wrong you may end up rate limiting valid queries and not rate limiting invalid",
    "start": "695320",
    "end": "700360"
  },
  {
    "text": "queries yep to make matters worse it's common for graph that make up the schema to contain Cycles let's say you run a",
    "start": "700360",
    "end": "706880"
  },
  {
    "text": "Blog with articles and each article has multiple tags and from these you can see Associated articles nice when estimating",
    "start": "706880",
    "end": "712880"
  },
  {
    "text": "the complexity of tag related tags you might assume that an article will never have more than five tags so you set the",
    "start": "712880",
    "end": "718519"
  },
  {
    "text": "field complexity to five or five times the children complexity the problem here is that the article related Tes can be its own child so your estimates uh",
    "start": "718519",
    "end": "725480"
  },
  {
    "text": "inaccuracy can compound exponentially and the formula should be n n to the 5ifth power time",
    "start": "725480",
    "end": "731800"
  },
  {
    "text": "one uh so given this query nice look at that bam bam bam bam bam look at look at",
    "start": "731800",
    "end": "737079"
  },
  {
    "text": "how good that is just just related take the hell out of them that's actually super billiant by the way just get",
    "start": "737079",
    "end": "742920"
  },
  {
    "text": "related tags of related tags of related tags of related tags of related tags nice you can expect the complexity of uh",
    "start": "742920",
    "end": "749360"
  },
  {
    "text": "five to the power of five or that big number if an attacker is able to find an article with 10 tags they can trigger a",
    "start": "749360",
    "end": "755440"
  },
  {
    "text": "query with true complexity of something like that 20x greater than estimated uh a partial migration here is to prevent",
    "start": "755440",
    "end": "762240"
  },
  {
    "text": "deeply nested queries however the example above demonstrates that this is not really a defense as it's not an",
    "start": "762240",
    "end": "768120"
  },
  {
    "text": "unusual deep query W uh graphql Ruby's default maximum depth is 13 this is just",
    "start": "768120",
    "end": "773800"
  },
  {
    "text": "seven dang okay yeah this is just yeah this is I mean this is just the same",
    "start": "773800",
    "end": "779279"
  },
  {
    "text": "this is just the literally the exact same problem falor had a partial migration here is to prevent deeply nested oh we already read that compare",
    "start": "779279",
    "end": "785800"
  },
  {
    "text": "this rate limiting to rest endpoint which generally have comparable response times in this case all you need is a",
    "start": "785800",
    "end": "790880"
  },
  {
    "text": "bucket rate limiter that prevents users from exceeding say 200 requests per minute across all endpoints if you do",
    "start": "790880",
    "end": "796360"
  },
  {
    "text": "have slower endpoints say a CSV report or PDF generator you can uh Define a more aggressive rate limits with these",
    "start": "796360",
    "end": "802199"
  },
  {
    "text": "some HTTP middleware is pretty trivial yeah that makes sense you just say hey you can't I I mean I don't know what",
    "start": "802199",
    "end": "808639"
  },
  {
    "text": "this API is actually doing I assume it's probably my assumption is it's some sort of inmemory caching from the same user",
    "start": "808639",
    "end": "814120"
  },
  {
    "text": "can't hit the same end point more than this amount of 200 times within 60 seconds I assume that's what it's saying",
    "start": "814120",
    "end": "820040"
  },
  {
    "text": "but yeah this makes perfect sense okay yeah H ttyp yeah there's some htdp going on here this technology makes me so",
    "start": "820040",
    "end": "826399"
  },
  {
    "text": "annoyed uh how can they not see how can they not see uh that it's just uh that this is just broken allowing a client to",
    "start": "826399",
    "end": "832959"
  },
  {
    "text": "go nuts with silly patches on top um that's because the the you got to understand that the the results",
    "start": "832959",
    "end": "840560"
  },
  {
    "text": "the the ideal goal of this type of technology is I guess what you could say is is Noble in some sense um it it",
    "start": "840560",
    "end": "847079"
  },
  {
    "text": "allows the client to be able to change and move in a really quick sense because",
    "start": "847079",
    "end": "853639"
  },
  {
    "text": "they are able to Pivot however they want to Pivot without having the back end needing to sink because if like like",
    "start": "853639",
    "end": "860759"
  },
  {
    "text": "real talk if you had a you know a get friends you know endpoint and get",
    "start": "860759",
    "end": "866480"
  },
  {
    "text": "friends uh returned some set of in which you needed a new field added",
    "start": "866480",
    "end": "872399"
  },
  {
    "text": "you'd have to go figure out what team is in charge of get friends because you don't got no friends and then you need",
    "start": "872399",
    "end": "879360"
  },
  {
    "text": "to be able to convince them that they need to add this field but then they're going to be like well if you add this",
    "start": "879360",
    "end": "885160"
  },
  {
    "text": "field every single person that calls get friends is then they're going to also have this extra field it's going to",
    "start": "885160",
    "end": "890639"
  },
  {
    "text": "cause a huge amount of more data to be transferred and we're not really sure if you uh if we want to do this then you",
    "start": "890639",
    "end": "896440"
  },
  {
    "text": "have to have these long talks you have to get managers involved and and there's all this crappy work sometimes especially in larger orgs just to get",
    "start": "896440",
    "end": "902920"
  },
  {
    "text": "friends you don't got no friends because you can't get them to add a field and now you're angry and then you lose even",
    "start": "902920",
    "end": "908959"
  },
  {
    "text": "more friends because you got so angry you may have said some things that you perhaps say regret during a meeting okay",
    "start": "908959",
    "end": "916120"
  },
  {
    "text": "that's why these things exist and I totally get it get friends 2 that actually exists I cannot tell you how",
    "start": "916120",
    "end": "921399"
  },
  {
    "text": "many get friends 2 exist at Netflix there's a lot of there's a lot of apis that are literally just like fetch video",
    "start": "921399",
    "end": "927800"
  },
  {
    "text": "two because you know what fetch video one did one way and people needed something else and we have to keep these",
    "start": "927800",
    "end": "933800"
  },
  {
    "text": "things up so it's like I guess here you go here's fetch video two uh XYZ is",
    "start": "933800",
    "end": "939839"
  },
  {
    "text": "deprecated use V2 endpoint yeah making enemies at meetings is my superpower there you go yeah yeah uh query parsing",
    "start": "939839",
    "end": "949399"
  },
  {
    "text": "before query uh is executed uh it is First parsed Once uh we once received a pent test report evidence that it's",
    "start": "949399",
    "end": "955480"
  },
  {
    "text": "possible to craft an invalid query string that uh out of memory to the server for example this is actually",
    "start": "955480",
    "end": "962480"
  },
  {
    "text": "really funny crafting complex to parse queries is such a brilliant idea that's one thing we just didn't really have for",
    "start": "962480",
    "end": "968759"
  },
  {
    "text": "falor because falor was really really really simple uh it's query language I'm not saying it was good but it was really",
    "start": "968759",
    "end": "974560"
  },
  {
    "text": "really simple uh big part of the reason uh that this problem exists is because front end has a different locality of behavior entirely this would uh never be",
    "start": "974560",
    "end": "981720"
  },
  {
    "text": "a problem in HDMX yeah yeah in most live Services you could never create this problem right because the person that's",
    "start": "981720",
    "end": "988480"
  },
  {
    "text": "working on like in any of those live service ones the problem always exists you know you're always working in the",
    "start": "988480",
    "end": "994040"
  },
  {
    "text": "middle of both the front and the back so you can kind of help with this uh I can make it uh to Boseman oh you're coming",
    "start": "994040",
    "end": "999160"
  },
  {
    "text": "to Boseman let's go let's go uh this is syntactically valid query but invalid for our schema a spec compliant server",
    "start": "999160",
    "end": "1005920"
  },
  {
    "text": "will parse this and start building an error response containing thousands of Errors which found to consume 200x more",
    "start": "1005920",
    "end": "1011839"
  },
  {
    "text": "memory than the query string itself because this memory amplification it's not enough just to limit the payload",
    "start": "1011839",
    "end": "1017519"
  },
  {
    "text": "size you also have to limit valid queries that are larger than the smallest dangerous malicious query that",
    "start": "1017519",
    "end": "1023120"
  },
  {
    "text": "is pretty great if your server exposes the concept of maximum number of Errors to a crew before abandoning parsing this",
    "start": "1023120",
    "end": "1029319"
  },
  {
    "text": "can be uh this can be mitigated okay that's funny but dang if not you'll have to roll your own solution there is no",
    "start": "1029319",
    "end": "1035678"
  },
  {
    "text": "rest equivalent to this attack of this severity facts on facts on facts 200x is",
    "start": "1035679",
    "end": "1040880"
  },
  {
    "text": "wild yes 200x seems wild for every you get you literally 200x or two 2,000x the",
    "start": "1040880",
    "end": "1047280"
  },
  {
    "text": "the size of the query string for much memory you use that is pretty wild we going fish boys uh when it comes to",
    "start": "1047280",
    "end": "1052880"
  },
  {
    "text": "Performance in graph quel people often talk about its incompatibility with HTP caching for me personally this has not",
    "start": "1052880",
    "end": "1058840"
  },
  {
    "text": "been an issue for SAS applications data is usually highly user specific and serving stale data is unacceptable yeah",
    "start": "1058840",
    "end": "1064640"
  },
  {
    "text": "this is very very fair most I mean there is data that you want to have cached and there's data that you really just could",
    "start": "1064640",
    "end": "1070600"
  },
  {
    "text": "never cash so I found myself missing response caches from cash invalidation bugs they cause yeah uh also very",
    "start": "1070600",
    "end": "1077520"
  },
  {
    "text": "interesting thing here though is is that to be completely Fair a lot of times these client side caching libraries or",
    "start": "1077520",
    "end": "1083320"
  },
  {
    "text": "client side fetching data fetching libraries will also have a client cash in which you just need to have another",
    "start": "1083320",
    "end": "1089880"
  },
  {
    "text": "notion of cash and validation so in in in the falor world I'm going to speak of",
    "start": "1089880",
    "end": "1095320"
  },
  {
    "text": "it and through the Falco world because it's just the one I know right uh every one of your your pieces of data right so",
    "start": "1095320",
    "end": "1100760"
  },
  {
    "text": "it' have a type you'd have a type atom this would be a piece of data and it' actually have an expires field on it so",
    "start": "1100760",
    "end": "1108840"
  },
  {
    "text": "expires field and so it's like hey here's an H here's HTP caching but on a",
    "start": "1108840",
    "end": "1113960"
  },
  {
    "text": "field level so like it's also really hard sex PES yeah you get the idea and",
    "start": "1113960",
    "end": "1119640"
  },
  {
    "text": "so I I find that a lot of times these these cashing these Dynamic cashing libraries you also have to like consider",
    "start": "1119640",
    "end": "1124679"
  },
  {
    "text": "that the Major Performance problems I did find myself dealing with were data fetching and the N plus1 problem I love",
    "start": "1124679",
    "end": "1129799"
  },
  {
    "text": "the N plus one problem it's greatest one ever uh I think the issue is pretty widely understood nowadays tldr if a field resolver hits an external data",
    "start": "1129799",
    "end": "1136360"
  },
  {
    "text": "source such as a DB or HTP API uh and it's nested in a list containing nend items it will do those calls end times",
    "start": "1136360",
    "end": "1143559"
  },
  {
    "text": "it's beautiful too because it doesn't know the unfortunately the misile doesn't know where it is because it it",
    "start": "1143559",
    "end": "1149159"
  },
  {
    "text": "because it doesn't know where it isn't and that's you know that's like a really classic problem right here just write a",
    "start": "1149159",
    "end": "1154840"
  },
  {
    "text": "dedicated endpoint and said yep that's why those things work better a dedicated endpoint uh is just much much simpler",
    "start": "1154840",
    "end": "1161039"
  },
  {
    "text": "you can just simply request I'm not playing the video NJ dude I'm not playing the video you can just request",
    "start": "1161039",
    "end": "1166559"
  },
  {
    "text": "exactly what you want if you have an endpoint you can't do that sometimes with graphql because it has to go through it has to maintain all these",
    "start": "1166559",
    "end": "1172559"
  },
  {
    "text": "things and then when you get the data back you then have to make another decision based on that the results of that to get the next thing because",
    "start": "1172559",
    "end": "1177600"
  },
  {
    "text": "you're letting the client Drive the data fetching as opposed to the back end which can contain that exact same logic",
    "start": "1177600",
    "end": "1182840"
  },
  {
    "text": "except it just makes one request and it's a much easier to kind of formulate the exact query that you want um unique",
    "start": "1182840",
    "end": "1188200"
  },
  {
    "text": "to graphql though is the fact that since it's a query language this can become a problem with no backend changes when the client modifies a query as a result I",
    "start": "1188200",
    "end": "1194960"
  },
  {
    "text": "found you end up having to defensively introduce the data loader abstraction every just in case a client ends up",
    "start": "1194960",
    "end": "1200440"
  },
  {
    "text": "fetching a field in a list context in the future this is a lot of boiler plate to write and maintain meanwhile in rest",
    "start": "1200440",
    "end": "1206960"
  },
  {
    "text": "we can generally hoist n plus1 queries up to the controller which I think is a pattern much easier to wrap your head",
    "start": "1206960",
    "end": "1212679"
  },
  {
    "text": "around blogs controller I don't even dude blogs controller is just less than application controller just not even",
    "start": "1212679",
    "end": "1219720"
  },
  {
    "text": "it's just not even a thing okay blogs weak uh limit 25 includes these things",
    "start": "1219720",
    "end": "1225919"
  },
  {
    "text": "serializer render the tags I can't even read this I even know what I'm reading Ruby just looks crazy find PR Pam's ID",
    "start": "1225919",
    "end": "1232240"
  },
  {
    "text": "render Jon serialize blogs uh no prefetching necessary here since n is equal to one yeah I know it's inherits",
    "start": "1232240",
    "end": "1238799"
  },
  {
    "text": "from I know it's inherits from it's just funnier to read this with all my all my normal stuff Ruby as crazy it is",
    "start": "1238799",
    "end": "1244919"
  },
  {
    "text": "authorization and the N plus1 problem but wait there's more n plus 1es if you follow your advice earlier of integrating your libraries authorization",
    "start": "1244919",
    "end": "1251000"
  },
  {
    "text": "framework you've now got a whole new category of n plus1 problems to deal with let's continue with our xapi",
    "start": "1251000",
    "end": "1256280"
  },
  {
    "text": "example this is actually a brilliant take right here this is is a brilliant data fetching take right here user type",
    "start": "1256280",
    "end": "1261559"
  },
  {
    "text": "goes for a graph quel base object you have a string you have a birthday authorization with uh view Pipi um user",
    "start": "1261559",
    "end": "1268520"
  },
  {
    "text": "policy view pipy deaf friends with record oh no I hit the DB to fetch the user's friend list yeah oh brilliant",
    "start": "1268520",
    "end": "1274840"
  },
  {
    "text": "brilliant because not only do you do that when you come back and you realize you have more data to hit you just keep on hitting this thing over and over",
    "start": "1274840",
    "end": "1281159"
  },
  {
    "text": "again ah what a great observation yeah and then if you do this yeah it runs at end times oh beautiful this is uh",
    "start": "1281159",
    "end": "1287279"
  },
  {
    "text": "actually trickier to deal with than our previous example because authorization code is not always run in graph Quil context it may for example be run in a",
    "start": "1287279",
    "end": "1294440"
  },
  {
    "text": "background job or an HTML endpoint that means we can't just reach for the data loader uh uh naively because data",
    "start": "1294440",
    "end": "1300720"
  },
  {
    "text": "loaders expect to be run with the uh within graph quel uh in the Ruby implementation anyways in my experience",
    "start": "1300720",
    "end": "1306279"
  },
  {
    "text": "this is the biggest source of performance issues we would regularly find that our queries are spending more time authorizing data than anything else",
    "start": "1306279",
    "end": "1313600"
  },
  {
    "text": "again this probably simply doesn't exist in the rest world you know this is a lot of work",
    "start": "1313600",
    "end": "1319039"
  },
  {
    "text": "to avoid rest have you actually like real talk the amount of just tribal",
    "start": "1319039",
    "end": "1325799"
  },
  {
    "text": "knowledge you have to have to truly run something like this the amount of expertise is it really worth just not",
    "start": "1325799",
    "end": "1332559"
  },
  {
    "text": "having a rest endpoint why is rest hated so much because people make bad uh because people make bad rest end points",
    "start": "1332559",
    "end": "1339080"
  },
  {
    "text": "right they they go way too atomized and so then all a sudden you find yourself making 5,000 requests for something and they're just like this sucks why would I",
    "start": "1339080",
    "end": "1345799"
  },
  {
    "text": "ever use this and it's like yeah maybe you don't want to adom things maybe you kind of you know maybe you want to make",
    "start": "1345799",
    "end": "1351240"
  },
  {
    "text": "something that you can just call larger sets of data and just grab that one thing out I that's at least what I find",
    "start": "1351240",
    "end": "1356880"
  },
  {
    "text": "most rest end points end up getting um getting like hated on for is that rest",
    "start": "1356880",
    "end": "1362919"
  },
  {
    "text": "is like communism no one has ever tried it for real uh rest has no conference so nobody",
    "start": "1362919",
    "end": "1369360"
  },
  {
    "text": "likes it anymore this is fair this is fair uh I have my let's see I have mitigated this using a nasty things like",
    "start": "1369360",
    "end": "1375240"
  },
  {
    "text": "request level globals to memorize data access policy calls but but it's never felt great yeah coupling in my",
    "start": "1375240",
    "end": "1381360"
  },
  {
    "text": "experience a mature graph quel codebase your business logic is forced into the transport layer this happens through a",
    "start": "1381360",
    "end": "1386600"
  },
  {
    "text": "number of mechanisms some of which already talked about solving data authorization leads to peppering authorization rules throughout your",
    "start": "1386600",
    "end": "1392320"
  },
  {
    "text": "graph quel types solving mutation let's see argument authorization leads to peppering authorization rules throughout",
    "start": "1392320",
    "end": "1397840"
  },
  {
    "text": "your graph quel arguments uh solving resolver data fetching n plus1 leads to moving this logic into the graph Quil",
    "start": "1397840",
    "end": "1403760"
  },
  {
    "text": "specific data loaders leveraging the lovely relay connections pattern leads to moving data fetching logic into graph",
    "start": "1403760",
    "end": "1410440"
  },
  {
    "text": "specific custom connection objects I don't even know what that means but that sounds great the net effect of all of",
    "start": "1410440",
    "end": "1415919"
  },
  {
    "text": "this is meaningfully uh test your application you must extensively test at the integration layer by running graph",
    "start": "1415919",
    "end": "1421520"
  },
  {
    "text": "quo queries I have found this makes for a painful experience any errors encounted are captured by the framework",
    "start": "1421520",
    "end": "1426919"
  },
  {
    "text": "leading to the fun task of reading stack traces in Jon graph qual error responses",
    "start": "1426919",
    "end": "1432679"
  },
  {
    "text": "since so much around authorization and data loaders happens inside the framework debugging is often much harder",
    "start": "1432679",
    "end": "1438240"
  },
  {
    "text": "as the breakpoint you want is not in application code now I can understand that that does that does sound very",
    "start": "1438240",
    "end": "1444159"
  },
  {
    "text": "painful this does not sound good um uh and of course again since it's a query language you're going to be writing a",
    "start": "1444159",
    "end": "1449960"
  },
  {
    "text": "lot more tests to confirm that all these argument and field level behaviors were mentioned are working correctly you know",
    "start": "1449960",
    "end": "1455480"
  },
  {
    "text": "this is a lot of work to avoid writing squeal why do people hate writing squeal you know just throw a little bit of",
    "start": "1455480",
    "end": "1460840"
  },
  {
    "text": "squeal light in front of that and just call it a day okay just call it just call it a day dang man uh take it an",
    "start": "1460840",
    "end": "1468000"
  },
  {
    "text": "aggregate the various mitigations to security and performance issues we've gone through add significant complexity",
    "start": "1468000",
    "end": "1473640"
  },
  {
    "text": "to uh to a code base it's not that rest does not have its problems uh though it certainly has fewer it's just that rest",
    "start": "1473640",
    "end": "1480440"
  },
  {
    "text": "Solutions are generally much simpler for a back-end developer to implement and understand it's also really simple for a",
    "start": "1480440",
    "end": "1486000"
  },
  {
    "text": "front-end person to understand as well how do I get friends call Api V1 friends",
    "start": "1486000",
    "end": "1491960"
  },
  {
    "text": "there you go here's this you can also have a you know you have Swagger and all those whatever all those little Auto generators of of of giving you your your",
    "start": "1491960",
    "end": "1499320"
  },
  {
    "text": "nice little end point and everything it's it's really not hard I'm pretty sure the Ruby on Rails programmers are",
    "start": "1499320",
    "end": "1504360"
  },
  {
    "text": "at fault somehow I mean they always are dhh mentioned they truly are U also graph",
    "start": "1504360",
    "end": "1510240"
  },
  {
    "text": "Quil is not for a single DB uh query aggregation but for multi uh multistore graph lookups yes this is true it is it",
    "start": "1510240",
    "end": "1517440"
  },
  {
    "text": "is inherently more complex for that exact reason uh uh so those are major",
    "start": "1517440",
    "end": "1522520"
  },
  {
    "text": "reasons I am for the most part over graph queel I have a few more peeves but uh this article kept growing further",
    "start": "1522520",
    "end": "1528600"
  },
  {
    "text": "that I'll summarize them here graph quel discourage breaking changes and provides no tools to deal with them this adds",
    "start": "1528600",
    "end": "1533760"
  },
  {
    "text": "needless complexity for those who control all their clients who will have to find workarounds Reliance on HTTP",
    "start": "1533760",
    "end": "1539760"
  },
  {
    "text": "response codes turns up everywhere in tuling my favorite my favorite one of all time I know it exists is the the guy",
    "start": "1539760",
    "end": "1547440"
  },
  {
    "text": "getting a piece of paper from his friend in class and then he opens it up and it says success 100 error and then gives",
    "start": "1547440",
    "end": "1554080"
  },
  {
    "text": "out an error thing that's my favorite part about graph quel or any of these data fetching Li is that errs have to be",
    "start": "1554080",
    "end": "1559600"
  },
  {
    "text": "transferred through a successful request nothing is better than the successful err nothing nothing is better than the",
    "start": "1559600",
    "end": "1566120"
  },
  {
    "text": "successful err uh so dealing with the fact that 200 can mean everything from everything is okay through to everything",
    "start": "1566120",
    "end": "1573000"
  },
  {
    "text": "is down to be quite annoying yes it is it very much so is the two the successful fail is is is painful uh task",
    "start": "1573000",
    "end": "1580440"
  },
  {
    "text": "failed successfully fetching all your data in one query with uh in the http2",
    "start": "1580440",
    "end": "1586000"
  },
  {
    "text": "plus age is often not beneficial to response to time in fact it will worsen if your server is not parallelized",
    "start": "1586000",
    "end": "1591399"
  },
  {
    "text": "versus sending separate requests to separate servers to process and parallel Alternatives uh okay end of rant what",
    "start": "1591399",
    "end": "1597399"
  },
  {
    "text": "would I recommend inste to be upfront I'm definitely early in the hype cycle here but right now uh my view is that if",
    "start": "1597399",
    "end": "1604120"
  },
  {
    "text": "you control all your clients uh have more than three clients uh have a client written in a statically typed language",
    "start": "1604120",
    "end": "1610679"
  },
  {
    "text": "and are using more uh more than one language across the servers and clients you're probably better off using an open",
    "start": "1610679",
    "end": "1617200"
  },
  {
    "text": "API 3.0 compliant Json rest API if let's see if as in my experience the main",
    "start": "1617200",
    "end": "1623080"
  },
  {
    "text": "thing your frontend devs like about graphql is that it's self-documenting type safe nature I think uh this will",
    "start": "1623080",
    "end": "1628679"
  },
  {
    "text": "work well for you Tooling in this area has improved a lot since graph Quil came onto the scene and there are many options for generating of typed client",
    "start": "1628679",
    "end": "1635600"
  },
  {
    "text": "code even down to framework specific data fetching libraries uh my experience so far is pretty close to the best parts",
    "start": "1635600",
    "end": "1641559"
  },
  {
    "text": "of what I use graphql for without the complexity uh of Facebook needed okay I I don't know anything about I I have not",
    "start": "1641559",
    "end": "1648240"
  },
  {
    "text": "really use this I haven't built a rest end point in some amount of time and so",
    "start": "1648240",
    "end": "1653840"
  },
  {
    "text": "all right that sounds pretty nice sorry I saw some saw some ones um I thought I saw I thought I saw a good one from Judo",
    "start": "1653840",
    "end": "1659640"
  },
  {
    "text": "coming in here okay maybe I didn't my bad maybe I didn't uh let see the most horrible projects I've seen have been",
    "start": "1659640",
    "end": "1665320"
  },
  {
    "text": "projects where a crud back end and a front end have separate separated through API specs yeah that's basically",
    "start": "1665320",
    "end": "1671000"
  },
  {
    "text": "uh Swagger plus client coachen okay yeah that's what that's what I thought it was but I wasn't sure we uh generated a go a",
    "start": "1671000",
    "end": "1676720"
  },
  {
    "text": "go client code using open API spec it's great okay that's fine did you have some indication to a good course for a rust",
    "start": "1676720",
    "end": "1682480"
  },
  {
    "text": "language dude where are you getting that question from uh I feel it's fair to note at this point that the worst",
    "start": "1682480",
    "end": "1687960"
  },
  {
    "text": "offenders of the successful aor crowd are net programmers observationally are they the kings of",
    "start": "1687960",
    "end": "1693880"
  },
  {
    "text": "the of the successful air let's see as with graph Quil there's a couple implementation approaches implementation",
    "start": "1693880",
    "end": "1699240"
  },
  {
    "text": "first tooling generates open API specs from a typed slpe hinted servers fast API and Python and SOA and typescript",
    "start": "1699240",
    "end": "1706240"
  },
  {
    "text": "are good examples of this approach this is the approach I have for most experiences with and I think it works",
    "start": "1706240",
    "end": "1711279"
  },
  {
    "text": "well uh I think people I mean as if I if I were to gauge what people like based on Twitter it seems like people like",
    "start": "1711279",
    "end": "1718240"
  },
  {
    "text": "trpc or Tan t tan query tan query query tan tan queries uh specification first",
    "start": "1718240",
    "end": "1725120"
  },
  {
    "text": "is the equivalent to schema first in graph quel spec first tooling generates code from handwritten spec I can't say",
    "start": "1725120",
    "end": "1730919"
  },
  {
    "text": "I've ever looked at open API yaml file and I thought I would have loved to written that myself but the recent",
    "start": "1730919",
    "end": "1735960"
  },
  {
    "text": "release of typees spec changes uh things entirely with it I could be quite let's see it could be it could come a quite",
    "start": "1735960",
    "end": "1742919"
  },
  {
    "text": "elegant scheme of first workflow write a succinct human readable typescript schema uh or type spec uh schema",
    "start": "1742919",
    "end": "1749720"
  },
  {
    "text": "generate an open API yaml spec from it generate statically typed API client for your frontend language Choice uh",
    "start": "1749720",
    "end": "1755080"
  },
  {
    "text": "generate statically typed server handlers for your backend language and server framework uh write an implementation for that Handler that",
    "start": "1755080",
    "end": "1761679"
  },
  {
    "text": "compiles safe in the knowledge that it will be type safe uh this approach is less mature but I think it has a lot of",
    "start": "1761679",
    "end": "1766960"
  },
  {
    "text": "promise okay 10 tanack is really nice yeah tan stack query yeah tan stack okay I mean Tanner's a very smart engineer so",
    "start": "1766960",
    "end": "1773200"
  },
  {
    "text": "I'm not surprised if if he wrote something awesome I think any protocol that allows you to autogenerate a typed client with defined off is basically",
    "start": "1773200",
    "end": "1780080"
  },
  {
    "text": "okay yeah yeah that's why I think grpc is is as successful as it is and I'm sure if it wasn't if it didn't",
    "start": "1780080",
    "end": "1786559"
  },
  {
    "text": "originally start off in the Google world and they made it a bit more web friendly and really focused on getting it to work",
    "start": "1786559",
    "end": "1793120"
  },
  {
    "text": "well with JavaScript I think that it would have been a a grpc would have been a really huge Contender and most people",
    "start": "1793120",
    "end": "1799880"
  },
  {
    "text": "would be talking about grpc uh but it it didn't start that way it was very googly it's very googly they're like H what is",
    "start": "1799880",
    "end": "1806399"
  },
  {
    "text": "this not go I don't care what the hell is this I'm not going to write anything for it uh Precision queries let's see",
    "start": "1806399",
    "end": "1811760"
  },
  {
    "text": "are also a mitigation for this and many attacks oh am I missing something let's",
    "start": "1811760",
    "end": "1817000"
  },
  {
    "text": "see to me it seems like a powerful and simpler options are here and I'm excited to learn their drawbacks persistent",
    "start": "1817000",
    "end": "1822840"
  },
  {
    "text": "queries are also a mitigation for this and many attacks but if you actually want to expose CU oh is this this must be one two three from the I don't even",
    "start": "1822840",
    "end": "1829279"
  },
  {
    "text": "know where those one those three were okay there we go Apache Thrift uh wasn't",
    "start": "1829279",
    "end": "1834960"
  },
  {
    "text": "that an Uber wasn't Thrift originally an Uber Library wasn't that just another one of these attempts to create an",
    "start": "1834960",
    "end": "1840240"
  },
  {
    "text": "effectively a typed RPC business um grpc",
    "start": "1840240",
    "end": "1845960"
  },
  {
    "text": "compatible uh compat compatible also has a really web friendly API the supported language is a bit lacking though yeah",
    "start": "1845960",
    "end": "1851679"
  },
  {
    "text": "but it Facebook I think uh not uh no it was uh it it was before Uber okay it was",
    "start": "1851679",
    "end": "1857679"
  },
  {
    "text": "before Uber I know Uber used a lot of thrift mustache man I know you're busy right now but I need to know if stas and I should start editing that video or if",
    "start": "1857679",
    "end": "1864000"
  },
  {
    "text": "you're doing an entire re-shoot I'm going to try to do a re-shoot potentially today let me I'll tell you at uh noon okay anyways hey I appreciate",
    "start": "1864000",
    "end": "1871279"
  },
  {
    "text": "that the name is that was a pretty good article I like that article I like that article the moral of the story graphql",
    "start": "1871279",
    "end": "1877039"
  },
  {
    "text": "is the devil uh I think the moral of the story is that you're likely never working in any sufficiently complex",
    "start": "1877039",
    "end": "1883799"
  },
  {
    "text": "environment that would require such a such an intense solution that you're going to probably bite off more than you",
    "start": "1883799",
    "end": "1889799"
  },
  {
    "text": "can chew you're going to write much more code you're going to have to become an expert in things you may not want to become an expert in to successfully use",
    "start": "1889799",
    "end": "1896360"
  },
  {
    "text": "something in a decent way a genen",
    "start": "1896360",
    "end": "1902320"
  }
]