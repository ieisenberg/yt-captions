[
  {
    "text": "the fast squirt am I allowed to call it the fast squirt okay who is seeing this one I've seen it",
    "start": "0",
    "end": "7200"
  },
  {
    "text": "a couple of times only to forget it in a week I know I watched it I'm like wow",
    "start": "7200",
    "end": "12300"
  },
  {
    "text": "I'm smarter like 30 minutes later someone's like Hey how do you do the fastest in uh the fast squirt and I'm",
    "start": "12300",
    "end": "18840"
  },
  {
    "text": "like uh",
    "start": "18840",
    "end": "24199"
  },
  {
    "text": "uh should we watch it okay well everybody",
    "start": "25199",
    "end": "31199"
  },
  {
    "text": "wants to watch it all right let's go game company it's software open source the engine for their video game Quake 3",
    "start": "31199",
    "end": "37559"
  },
  {
    "text": "arena in that source code fans of the game discovered an algorithm that was so ingenious it quickly became famous and",
    "start": "37559",
    "end": "44579"
  },
  {
    "text": "the only thing this algorithm does is calculate the inverse of a square root it was the inverse Square it is the",
    "start": "44579",
    "end": "50460"
  },
  {
    "text": "inverse squirt see I thought it was just the squirt not the inverse chord by the way this is clearly called a squirt the",
    "start": "50460",
    "end": "56340"
  },
  {
    "text": "square root that's not true that's not real okay if I had to write a piece of code that",
    "start": "56340",
    "end": "62399"
  },
  {
    "text": "would calculate the inverse of a square root this is how I would do it here I'm using the C programming language the",
    "start": "62399",
    "end": "68640"
  },
  {
    "text": "same programming language used for Quake 3. but to be fair I wouldn't actually write problem one didn't use rust it's",
    "start": "68640",
    "end": "75900"
  },
  {
    "text": "probably faster in Rust honestly they probably it's so safe and fast it probably works",
    "start": "75900",
    "end": "81299"
  },
  {
    "text": "every time",
    "start": "81299",
    "end": "83720"
  },
  {
    "text": "write the square root in there myself people who work more closely with the c language or with CPU design have already",
    "start": "87000",
    "end": "93299"
  },
  {
    "text": "figured out how to calculate the square root and the provided algorithm to us in the math.h file that we programmers can",
    "start": "93299",
    "end": "100020"
  },
  {
    "text": "then just include in our program so what could possibly be so interesting about the Quake 3 algorithm How does its",
    "start": "100020",
    "end": "107280"
  },
  {
    "text": "software calculate inverse square roots",
    "start": "107280",
    "end": "111020"
  },
  {
    "text": "at first glance it doesn't seem to make any sense where does this number 0x5f3759df come from what does this have",
    "start": "112619",
    "end": "119640"
  },
  {
    "text": "to do with taking square roots and why is there a disgusting curse word in the second comment",
    "start": "119640",
    "end": "125659"
  },
  {
    "text": "there's a disgusting curse word yeah no he should have abbreviated it if",
    "start": "125880",
    "end": "131160"
  },
  {
    "text": "you would have put WTF would have been way less offensive he should have got the I mean come on everybody knows about this I know it is actually funny that he",
    "start": "131160",
    "end": "137760"
  },
  {
    "text": "put this comment here and this is somehow he has text reveal animations I know",
    "start": "137760",
    "end": "143459"
  },
  {
    "text": "those were pretty sexy I'm not gonna lie to you this is the only way one should comment code it's a sexy curse word",
    "start": "143459",
    "end": "150079"
  },
  {
    "text": "I like how this one's commented out though I don't know why second iteration",
    "start": "150780",
    "end": "156120"
  },
  {
    "text": "can be removed oh yeah we'll learn about it should be magic happens here that's really okay so I I did one time come",
    "start": "156120",
    "end": "161940"
  },
  {
    "text": "across a piece of code when I was programming robots for the government uh to help destroy people uh there was this",
    "start": "161940",
    "end": "168060"
  },
  {
    "text": "one piece of code that was in C and it was just a series of constants and variables just being right and left",
    "start": "168060",
    "end": "175140"
  },
  {
    "text": "shifted and added to and the only comment on it was we add two because it's 5.",
    "start": "175140",
    "end": "182459"
  },
  {
    "text": "not a single other comment in the entire system",
    "start": "182459",
    "end": "189560"
  },
  {
    "text": "and guess what there was neither a two Nora 5.",
    "start": "193019",
    "end": "199080"
  },
  {
    "text": "anywhere within that code a bunch of constants oh there's a bunch of numbers there were sevens",
    "start": "199080",
    "end": "205620"
  },
  {
    "text": "there was Niners I mean there was everything in there but there was not a two or a five explicitly and I was just",
    "start": "205620",
    "end": "211680"
  },
  {
    "text": "just so confused I'm kidding it didn't actually there's no killing anybody okay it's just a fun store to say you know uh",
    "start": "211680",
    "end": "217739"
  },
  {
    "text": "senior VP of lead engineer I know caviar no I haven't",
    "start": "217739",
    "end": "223319"
  },
  {
    "text": "I bet you the Apollo Source probably has some pretty hilarious stuff in this video I will show you how with some cool",
    "start": "223319",
    "end": "229019"
  },
  {
    "text": "bit manipulation you can take in for square roots and the algorithm that does this Bears the name the fast inverse",
    "start": "229019",
    "end": "234599"
  },
  {
    "text": "square root first of all why would the game engine want to calculate 1 divided by square",
    "start": "234599",
    "end": "240599"
  },
  {
    "text": "root of x if you want to implement physics and like I don't care we already know looking at the code again we can",
    "start": "240599",
    "end": "245879"
  },
  {
    "text": "see that the beginning is pretty harmless we are given a number called number as input the number we're supposed to take the inverse square root",
    "start": "245879",
    "end": "252120"
  },
  {
    "text": "of first with the variable I I'm pretty sure this is actually a type I mean I've been doing a lot of typescript lately",
    "start": "252120",
    "end": "257459"
  },
  {
    "text": "that's that's actually the type the the the name is is float",
    "start": "257459",
    "end": "263100"
  },
  {
    "text": "we declare a 32-bit number then we declare to a 32-bit decimal numbers X2 and Y and then we store 1.5",
    "start": "263100",
    "end": "270600"
  },
  {
    "text": "into the variable with the obvious name three halves the next two lines is simply copy half",
    "start": "270600",
    "end": "276240"
  },
  {
    "text": "of the input into X2 and the whole input into y but it's after that where the magic happens take a moment to look at",
    "start": "276240",
    "end": "282180"
  },
  {
    "text": "it again okay so obviously the first thing right",
    "start": "282180",
    "end": "288180"
  },
  {
    "text": "here is that I assume a float and a long are",
    "start": "288180",
    "end": "293639"
  },
  {
    "text": "the same size in C architecture right because it's a double and a long long correct",
    "start": "293639",
    "end": "300139"
  },
  {
    "text": "did I get that correct I think I'm correct on that one so by casting it",
    "start": "300360",
    "end": "306660"
  },
  {
    "text": "as a pointer taking a reference and casting the reference as a pointer to a",
    "start": "306660",
    "end": "311880"
  },
  {
    "text": "long you don't convert you don't do a convert cast instead you actually just",
    "start": "311880",
    "end": "316979"
  },
  {
    "text": "you literally map the floating bits onto a long bit right",
    "start": "316979",
    "end": "323400"
  },
  {
    "text": "what the hell's even that I just I literally just explained it so I I believe I understand what's happening here so before he goes on here just",
    "start": "323400",
    "end": "329820"
  },
  {
    "text": "looking at the code we have a pointer to y Y is a float",
    "start": "329820",
    "end": "335940"
  },
  {
    "text": "we cast it as a pointer to a long and then we concrete ties it meaning that",
    "start": "335940",
    "end": "341520"
  },
  {
    "text": "the bits that are in the float are mapped now in the long it's not value",
    "start": "341520",
    "end": "346560"
  },
  {
    "text": "casted it's bit value casted by the way this does not lead to",
    "start": "346560",
    "end": "352080"
  },
  {
    "text": "security bugs okay this is not how you accidentally rmrf your home directory because you made a tilde directory in",
    "start": "352080",
    "end": "358680"
  },
  {
    "text": "one of your subdirectories and you didn't realize it that's not how these things happen okay",
    "start": "358680",
    "end": "363680"
  },
  {
    "text": "well the longer you look at it the lesson makes sense and the comments on the right are not really helpful either",
    "start": "365520",
    "end": "370979"
  },
  {
    "text": "but they do hint that there are three steps to this algorithm puzzling together these three steps will show us",
    "start": "370979",
    "end": "376080"
  },
  {
    "text": "the brilliancy of this algorithm but before we start with these three steps let's first take a look at binary",
    "start": "376080",
    "end": "381720"
  },
  {
    "text": "numbers we said that in the first line we declare a 32-bit integer in the C programming language called a long that",
    "start": "381720",
    "end": "388080"
  },
  {
    "text": "means we're given 32 bits and we can represent oh I really think one of the greatest tragedies",
    "start": "388080",
    "end": "393539"
  },
  {
    "text": "in all of programming is that",
    "start": "393539",
    "end": "398418"
  },
  {
    "text": "there's int there's short there's int there's long",
    "start": "399060",
    "end": "405720"
  },
  {
    "text": "and there's long long and nobody was like we should probably just use numbers",
    "start": "405720",
    "end": "411060"
  },
  {
    "text": "how about we just call this one i-64. oh there's also Char and bite",
    "start": "411060",
    "end": "416220"
  },
  {
    "text": "which Char may not be a byte equivalent in length",
    "start": "416220",
    "end": "420800"
  },
  {
    "text": "have you not had a long long yeah there's long longs",
    "start": "421560",
    "end": "426720"
  },
  {
    "text": "it just just to me that's like the greatest tragedy ever that in during during the conceptions of this that they",
    "start": "426720",
    "end": "433800"
  },
  {
    "text": "didn't they're just like ah it's this big will happen if we want to double it that's long end I want to long it or a",
    "start": "433800",
    "end": "441539"
  },
  {
    "text": "short end really you can NC I believe you you know you can just say short or you can",
    "start": "441539",
    "end": "446880"
  },
  {
    "text": "actually say short int so it means cut in half short",
    "start": "446880",
    "end": "452639"
  },
  {
    "text": "int long end",
    "start": "452639",
    "end": "456080"
  },
  {
    "text": "yes it's there's no double long long",
    "start": "458759",
    "end": "464280"
  },
  {
    "text": "thankfully we now have standard end yeah the standard end I only use that specifying Things based on like words",
    "start": "464280",
    "end": "469620"
  },
  {
    "text": "and meanings is just the worst uh let's say that long long long and short",
    "start": "469620",
    "end": "475440"
  },
  {
    "text": "falls under the exact same problem as like undefined versus null you're putting meaning on something you're",
    "start": "475440",
    "end": "481620"
  },
  {
    "text": "putting you're putting some sort of like idea on top of a word that doesn't fit",
    "start": "481620",
    "end": "486660"
  },
  {
    "text": "one to one I hate I hate those kind of remember with it okay but I think you all know how to do that this is one two",
    "start": "486660",
    "end": "492419"
  },
  {
    "text": "three four and so on up to around 2 billion but in the next line",
    "start": "492419",
    "end": "497880"
  },
  {
    "text": "signed long the we declare two decimal numbers and C called a float again we're given 32 bits",
    "start": "497880",
    "end": "505500"
  },
  {
    "text": "and we have to represent the decimal number with it how would you do that if you and I were designing decimal numbers",
    "start": "505500",
    "end": "511259"
  },
  {
    "text": "this is probably one way we would do it just put a decimal point in the middle in front of that's not what you do I had",
    "start": "511259",
    "end": "517440"
  },
  {
    "text": "to hand calculate out these things as part of like graduating from college you know how hard it is to do floating Point",
    "start": "517440",
    "end": "523919"
  },
  {
    "text": "operations or like how you do multiplication on a CPU like the iterations of addition and all that",
    "start": "523919",
    "end": "529560"
  },
  {
    "text": "stuff that stuff's really hard it was really fun it's a decimal point we count in the usual way one two three four and so on",
    "start": "529560",
    "end": "537000"
  },
  {
    "text": "and after the decimal point there no surprises either just remind yourself that this is binary so instead of tenths",
    "start": "537000",
    "end": "542820"
  },
  {
    "text": "hundredths and thousands we have halves fourths eights sixteenths and any combination of them yeah give your",
    "start": "542820",
    "end": "549060"
  },
  {
    "text": "three-fourths also known as 0.75 but this idea is actually terrible yeah",
    "start": "549060",
    "end": "554100"
  },
  {
    "text": "it's fun in the sense that I think a good way to describe the",
    "start": "554100",
    "end": "559860"
  },
  {
    "text": "difference between long and long long is by looking at Theo's mustache compared to Primes",
    "start": "559860",
    "end": "566660"
  },
  {
    "text": "foreign",
    "start": "573720",
    "end": "575899"
  },
  {
    "text": "mustache okay we're not gonna do that not in this chat okay this chat okay",
    "start": "583459",
    "end": "588899"
  },
  {
    "text": "stash comments let's keep it on the minimum okay you know sure mine is majestic",
    "start": "588899",
    "end": "596760"
  },
  {
    "text": "beautiful full-bodied free range and grass-fed",
    "start": "596760",
    "end": "603839"
  },
  {
    "text": "and sure I mean Theo's mustache is not nearly as glorious I mean but he's trying you know what and you can't ever",
    "start": "603839",
    "end": "609779"
  },
  {
    "text": "be upset at somebody trying okay he's an intern in the mustache Department I just",
    "start": "609779",
    "end": "615060"
  },
  {
    "text": "happen to be a VP you know like I shouldn't look down on him he's doing the Lord's work out there as an intern",
    "start": "615060",
    "end": "620279"
  },
  {
    "text": "okay the world goes around on internships okay and I'm happy that he's deciding to intern in the mustache",
    "start": "620279",
    "end": "625860"
  },
  {
    "text": "Department we're happy to have him we've decimated the range of numbers we",
    "start": "625860",
    "end": "631320"
  },
  {
    "text": "can represent before we could represent numbers to around 2 billion now only to about 32 000. luckily people much",
    "start": "631320",
    "end": "638820"
  },
  {
    "text": "smarter than us have found a better way to make use of those 32 bits they took inspiration from scientific notation",
    "start": "638820",
    "end": "645480"
  },
  {
    "text": "the same way we can systematically represent numbers like 23 000 as 2.3 times 10 to the 4 and 0.0034 as 3.4",
    "start": "645480",
    "end": "652680"
  },
  {
    "text": "times 10 to the minus 3 we can also represent them in a binary system where here for example 1 1 0 0 could for",
    "start": "652680",
    "end": "659399"
  },
  {
    "text": "example be 1.1 times 2 to the 4. the standard they came up with takes the",
    "start": "659399",
    "end": "664620"
  },
  {
    "text": "name IEEE 754-185 I triple East standard seven",
    "start": "664620",
    "end": "669779"
  },
  {
    "text": "five one eight defines the following we are as usual given 30. the first bit is the sign bit if it is zero the number is",
    "start": "669779",
    "end": "676620"
  },
  {
    "text": "positive that's how you get negative zero by the way if you're wondering this little first bit that's how that's how",
    "start": "676620",
    "end": "682320"
  },
  {
    "text": "it all that's how it's all done that one little guy makes it that's it if it is one the number is negative",
    "start": "682320",
    "end": "689100"
  },
  {
    "text": "but the number is Quake three provides to the Fast and the square root are always positive I mean obviously they're",
    "start": "689100",
    "end": "694560"
  },
  {
    "text": "positive if we would have to calculate one divided by square root of minus five something definitely has gone wrong so",
    "start": "694560",
    "end": "700200"
  },
  {
    "text": "for the rest of this video we ignore the sign bit as it is always zero then the next eight bits Define the",
    "start": "700200",
    "end": "706680"
  },
  {
    "text": "exponent that means two to the one two to the two two to the three two to the four and so on with 8 Bits we can",
    "start": "706680",
    "end": "712620"
  },
  {
    "text": "represent numbers between 0 and 255. but that's not exactly what we need we also want negative exponents",
    "start": "712620",
    "end": "719519"
  },
  {
    "text": "this is why everything is actually shifted down by 127. so instead of 2 to the four we actually",
    "start": "719519",
    "end": "725160"
  },
  {
    "text": "have 2 to the four minus 127. if we actually want the exponent to before the bits need to be set to 131 because 131",
    "start": "725160",
    "end": "733260"
  },
  {
    "text": "minus 127 is for classic the last 23 bits are the montissa they",
    "start": "733260",
    "end": "739560"
  },
  {
    "text": "might as usual in scientific notation we want I had a teacher that just loved that I swear I heard the term mentisa",
    "start": "739560",
    "end": "746600"
  },
  {
    "text": "one million times in my life okay Mandisa",
    "start": "746600",
    "end": "751920"
  },
  {
    "text": "I wanted to denote one digit followed by the comma followed by the decimal places but with 23 bits we can represent",
    "start": "751920",
    "end": "758459"
  },
  {
    "text": "numbers from zero to but not including 2 to the 23. again that's not exactly what",
    "start": "758459",
    "end": "763620"
  },
  {
    "text": "we need for scientific notation we need the montissa to go from 1 to 10 or in binary scientific notation to go from",
    "start": "763620",
    "end": "769800"
  },
  {
    "text": "one to two so we could do something that we've already done before put that little",
    "start": "769800",
    "end": "775139"
  },
  {
    "text": "range there said two to one I got I just my brain just divided by zero there for a quick second the comma after the first",
    "start": "775139",
    "end": "780899"
  },
  {
    "text": "bit this automatically gives us numbers from one to two but this naive approach is wasteful you",
    "start": "780899",
    "end": "786600"
  },
  {
    "text": "see the people that design standard 754 realized that in binary something happens that happens in no other base",
    "start": "786600",
    "end": "794420"
  },
  {
    "text": "what look at the first digit in scientific notation the first digit is by definition always non-zero but in",
    "start": "795720",
    "end": "802680"
  },
  {
    "text": "binary there is only one digit that is not zero one and if we know that the first digit will",
    "start": "802680",
    "end": "808200"
  },
  {
    "text": "always be a one there is no need to store it thus we can save one bit by moving the comma one double the value",
    "start": "808200",
    "end": "814139"
  },
  {
    "text": "being an extra one in the number it represents now armentiza is between one and two",
    "start": "814139",
    "end": "819600"
  },
  {
    "text": "even though 23 bits gave us numbers between 0 and 2 to the 23 we scaled them down to get numbers between zero and one",
    "start": "819600",
    "end": "825839"
  },
  {
    "text": "and then we added an extra one to get numbers between 1 and 2. and this already is the main part of",
    "start": "825839",
    "end": "832380"
  },
  {
    "text": "IEEE standard 754 but just the so-called Norm I want you to take a little quick second here you know we're watching a",
    "start": "832380",
    "end": "839100"
  },
  {
    "text": "pretty intensely technical video and",
    "start": "839100",
    "end": "846000"
  },
  {
    "text": "just think about this for a second casual color think about this casual",
    "start": "846000",
    "end": "851100"
  },
  {
    "text": "color okay just put your think cap on for a second when was the last time you thought about anything I know most of you probably",
    "start": "851100",
    "end": "858000"
  },
  {
    "text": "programmed typescript JavaScript Ruby on Rails Lua for for a living and",
    "start": "858000",
    "end": "865920"
  },
  {
    "text": "let's just be real when you do substring of a string you're not even sure if you're copying it or",
    "start": "865920",
    "end": "871620"
  },
  {
    "text": "creating a reference to it you don't even know so when we're breaking down how a how a",
    "start": "871620",
    "end": "876660"
  },
  {
    "text": "float works this shit's like magic okay this is like we deal with so little",
    "start": "876660",
    "end": "883680"
  },
  {
    "text": "stuff in modern world like you forget how crazy the foundation is on computer",
    "start": "883680",
    "end": "890339"
  },
  {
    "text": "science like some dude was sitting there up at like three in the morning being like",
    "start": "890339",
    "end": "896820"
  },
  {
    "text": "if you dropped a one you got to you got to represent like it comes running in like I'll save the pit a safe one bit of",
    "start": "896820",
    "end": "904320"
  },
  {
    "text": "probably like people like high-fiving him he's like running and you're just like what right like that it's just crazy it just",
    "start": "904320",
    "end": "911220"
  },
  {
    "text": "makes no sense like the world we live in this is is it's just so different right",
    "start": "911220",
    "end": "918420"
  },
  {
    "text": "now people come running in they're like what happened he's like I use 600 tail",
    "start": "918420",
    "end": "924440"
  },
  {
    "text": "s and everyone's like high-fiving and man the borders are so round but so not",
    "start": "926639",
    "end": "931860"
  },
  {
    "text": "round at the same time it's amazing foreign",
    "start": "931860",
    "end": "938540"
  },
  {
    "text": "I can slow count these nuts I'm sorry is that sexual harassment",
    "start": "940320",
    "end": "945899"
  },
  {
    "text": "realize numbers the informed viewer knows that the standard also includes denormalized numbers not a number",
    "start": "945899",
    "end": "951720"
  },
  {
    "text": "Infinities and two zeros but we won't go into those because in Quake 3 it just happens that these are never inputs into",
    "start": "951720",
    "end": "958079"
  },
  {
    "text": "our algorithm otherwise something definitely has gone wrong anyway at no point should our game engine have to",
    "start": "958079",
    "end": "963779"
  },
  {
    "text": "normalize a vector with infinite length for this algorithm and for the rest of this video it will be useful to think of",
    "start": "963779",
    "end": "969540"
  },
  {
    "text": "the mantissa and exponent as the binary numbers they are if we are given two numbers one being the mantissa and one",
    "start": "969540",
    "end": "975240"
  },
  {
    "text": "being the exponent 23 bits and 8 Bits respectively we can get a bit representation with 2 to the 23 times e",
    "start": "975240",
    "end": "981240"
  },
  {
    "text": "plus M if you think about it because multiplying e by 2 to the 23 just shifts",
    "start": "981240",
    "end": "986399"
  },
  {
    "text": "e by 23 digits so that's how one could write the bits but we get the actual number behind the",
    "start": "986399",
    "end": "992100"
  },
  {
    "text": "bits with this formula this should seem familiar to you here we have the exponent with 127 subtracted from it and",
    "start": "992100",
    "end": "999300"
  },
  {
    "text": "here we have the mantissa with the extra one in front but now something completely different",
    "start": "999300",
    "end": "1004459"
  },
  {
    "text": "for no obvious reason at all let's take the logarithm of that expression since we're doing computer science here we",
    "start": "1004459",
    "end": "1010579"
  },
  {
    "text": "take the logarithm base too we simplify as much as we can",
    "start": "1010579",
    "end": "1016060"
  },
  {
    "text": "for no apparent reason let's just take the logarithm you're just like okay like how many of you just",
    "start": "1016639",
    "end": "1022579"
  },
  {
    "text": "accepted the fact that he just out of nowhere tossed out a log like that just throws out a log and you're just",
    "start": "1022579",
    "end": "1028880"
  },
  {
    "text": "like okay yeah the log of bass too yeah it's base two because it's binary we all know that it's easy it's binary come on",
    "start": "1028880",
    "end": "1034339"
  },
  {
    "text": "really log is normal this is a normal log",
    "start": "1034339",
    "end": "1040640"
  },
  {
    "text": "I mean I mean I mean we should all be familiar with the natural log at least",
    "start": "1040640",
    "end": "1046579"
  },
  {
    "text": "and take out the exponent but then we get stuck but not so the creators of Quake developer Gary taroli knew a trick to",
    "start": "1046579",
    "end": "1053600"
  },
  {
    "text": "get rid of the logarithm you see the trick is an approximation to log of 1 plus X for small values of X",
    "start": "1053600",
    "end": "1059840"
  },
  {
    "text": "log of 1 plus X is approximately equal to X if you think about it this approximation is actually correct for x",
    "start": "1059840",
    "end": "1066440"
  },
  {
    "text": "equals 0 and x equals one but we'll add an additional term mu this",
    "start": "1066440",
    "end": "1071660"
  },
  {
    "text": "correction term can be chosen freely again with mu equal to 0 this approximation is correct at zero and one",
    "start": "1071660",
    "end": "1077360"
  },
  {
    "text": "but it turns out that setting mu to this number gives the smallest error on average for numbers between 0 and 1.",
    "start": "1077360",
    "end": "1084200"
  },
  {
    "text": "so going back to our formula we apply our trick as M divided by 2 to the 23 is indeed a value between 0 and 1.",
    "start": "1084200",
    "end": "1091520"
  },
  {
    "text": "we rearrange a little bit more and we finally see why we did all those calculations",
    "start": "1091520",
    "end": "1098600"
  },
  {
    "text": "M plus e",
    "start": "1098600",
    "end": "1101559"
  },
  {
    "text": "that man just tossed out like 17 maps that quick map just a little quick math obviously see it this way okay so you",
    "start": "1105679",
    "end": "1112520"
  },
  {
    "text": "know I used to be really good at math uh I was really really good at math but I'm not good at math anymore like",
    "start": "1112520",
    "end": "1119240"
  },
  {
    "text": "when I see this I go oh yeah I like I'd have to sit down I I'm sure I could get to this this position it would",
    "start": "1119240",
    "end": "1126799"
  },
  {
    "text": "just take a moment right like how we just did that you know he like you know like come on",
    "start": "1126799",
    "end": "1132740"
  },
  {
    "text": "let's go back here trick all right so he converts this thing this just becomes X Plus mu plus this m divided by 2 to 23",
    "start": "1132740",
    "end": "1140960"
  },
  {
    "text": "is indeed a value between zero and one okay",
    "start": "1140960",
    "end": "1145539"
  },
  {
    "text": "we rearrange a little bit more yep",
    "start": "1146480",
    "end": "1152120"
  },
  {
    "text": "or and we finally see why we yeah we did all those calculations",
    "start": "1152120",
    "end": "1158679"
  },
  {
    "text": "okay that makes sense look at that skill Gap is that skill Gap uh nonchalant problem",
    "start": "1160280",
    "end": "1165860"
  },
  {
    "text": "solving 101 yeah okay perfect M plus e times two to the 23 appears that's our",
    "start": "1165860",
    "end": "1171559"
  },
  {
    "text": "bits representation there we go that's where that number comes from how much you want to be interested we applied the logarithm to our formula and got the bit",
    "start": "1171559",
    "end": "1178280"
  },
  {
    "text": "representation just scaled and shifted by some constants so in some sense the bit representation of a number is its",
    "start": "1178280",
    "end": "1184160"
  },
  {
    "text": "own logarithm armed with this knowledge we can finally start with the three steps of the fast inverse square root",
    "start": "1184160",
    "end": "1190400"
  },
  {
    "text": "hit me Daddy",
    "start": "1190400",
    "end": "1193179"
  },
  {
    "text": "okay here we go the first step is actually not complicated it just looks complicated because it's memory address trickery yep so we started why and now",
    "start": "1196340",
    "end": "1204020"
  },
  {
    "text": "we want to do cool bit manipulation tricks floats unfortunately don't come with the tools we need I'm gonna skip that one because that one that one's",
    "start": "1204020",
    "end": "1210080"
  },
  {
    "text": "fairly obvious just reinterpret what you're pointing at as a long instead of a float",
    "start": "1210080",
    "end": "1217720"
  },
  {
    "text": "that's what that step is",
    "start": "1219700",
    "end": "1223419"
  },
  {
    "text": "yo yo baby yo baby can you play for me you'll pay me can you please okay oh",
    "start": "1226460",
    "end": "1232700"
  },
  {
    "text": "there we go we're at the what the stage the intuition behind the second step is the following remind yourself bit",
    "start": "1232700",
    "end": "1239299"
  },
  {
    "text": "shifting a number to the left doubles it yep and shifting it to the right half sit classic but what would happen if we did",
    "start": "1239299",
    "end": "1246080"
  },
  {
    "text": "something like this to an exponent doubling an exponent squares the number and having the exponent gives us the",
    "start": "1246080",
    "end": "1251900"
  },
  {
    "text": "square root but now also negating the exponent gives us 1 divided by square root of x that's exactly what we need",
    "start": "1251900",
    "end": "1258500"
  },
  {
    "text": "so let's remind ourselves what our goal is here we have our number stored into Y and our goal was to calculate one",
    "start": "1258500",
    "end": "1263539"
  },
  {
    "text": "divided by square root of Y as I've already said calculating this directly is too hard and too expensive but we've",
    "start": "1263539",
    "end": "1269720"
  },
  {
    "text": "extracted the bits from Y and we've seen with the IEEE standard 754 that the bits of a number are in some sense its own",
    "start": "1269720",
    "end": "1275660"
  },
  {
    "text": "logarithm that means in I we have stored log of Y up to some scaling and shifting I claim",
    "start": "1275660",
    "end": "1282080"
  },
  {
    "text": "that their problem becomes way easier if we work with logs instead of trying so hard to calculate one divided by square",
    "start": "1282080",
    "end": "1287360"
  },
  {
    "text": "root of Y we instead calculate log of 1 divided by square root of Y we rewrite this to log of Y to the power of minus a",
    "start": "1287360",
    "end": "1294020"
  },
  {
    "text": "half so we can take out the exponent calculating this is stupidly easy you might think oh no we have a division in",
    "start": "1294020",
    "end": "1300679"
  },
  {
    "text": "there didn't you say in the beginning that divisions are slow well yes but remember instead of dividing by two we just pitch",
    "start": "1300679",
    "end": "1307940"
  },
  {
    "text": "shift once to the right this already explains why we do minus I bit shifted ones to the right",
    "start": "1307940",
    "end": "1313400"
  },
  {
    "text": "but why is this number 0x5537590f here again that's two to the 23 let's go well because our logarithm",
    "start": "1313400",
    "end": "1319640"
  },
  {
    "text": "is actually scaled and shifted so let's calculate and understand where it comes from not at all let gamma be our",
    "start": "1319640",
    "end": "1325220"
  },
  {
    "text": "solution then we know that log of gamma equals to log of Y to the power minus a half which",
    "start": "1325220",
    "end": "1330559"
  },
  {
    "text": "equals to minus a half times log of Y now we replace the logarithm with the bit representation",
    "start": "1330559",
    "end": "1337720"
  },
  {
    "text": "and then we just solve for the bits of gamma I'll spare us the details but this is the result",
    "start": "1340179",
    "end": "1346700"
  },
  {
    "text": "the magic number turns out to be the remnants of the error term mu the scaling factor and the shifting",
    "start": "1346700",
    "end": "1353000"
  },
  {
    "text": "now we have the bits of a solution I always forget how easy that was uh like I'm over here thinking about",
    "start": "1353000",
    "end": "1359659"
  },
  {
    "text": "like that that's so difficult but not that was it's dude it's just we can just reverse the steps from the",
    "start": "1359659",
    "end": "1366500"
  },
  {
    "text": "evil bit hack to get back the actual solution from those bits well actually not the exact solution just an",
    "start": "1366500",
    "end": "1372860"
  },
  {
    "text": "approximation this is why we need the third step",
    "start": "1372860",
    "end": "1377679"
  },
  {
    "text": "who thinks of this well you got to remember that during this age a how fast",
    "start": "1379640",
    "end": "1384679"
  },
  {
    "text": "was a processor so this was late 80s so the processor was 16 megahertz",
    "start": "1384679",
    "end": "1392179"
  },
  {
    "text": "am I correct on that one uh how fast uh CPU 1988",
    "start": "1392179",
    "end": "1399740"
  },
  {
    "text": "to me oh no here we go okay we're up to eight",
    "start": "1406940",
    "end": "1412280"
  },
  {
    "text": "do we have some 80s okay so let's just say it's 88. yeah we're sitting at like 10. oh I mean I guess you could have",
    "start": "1412280",
    "end": "1417320"
  },
  {
    "text": "some 25s 10 is somewhere between 10 to 25.",
    "start": "1417320",
    "end": "1422419"
  },
  {
    "text": "right is this for Quake three I thought this was uh prior to is this Quake threes oh",
    "start": "1422419",
    "end": "1427880"
  },
  {
    "text": "okay it's 99 megahertz okay okay so I was a decade off my bad my fault okay so now a decade we're looking",
    "start": "1427880",
    "end": "1434720"
  },
  {
    "text": "pretty good right we're looking we're looking like we're like hundreds of megahertz",
    "start": "1434720",
    "end": "1440260"
  },
  {
    "text": "um do you know how many operations you have",
    "start": "1440960",
    "end": "1446120"
  },
  {
    "text": "to perform for a division and this square root",
    "start": "1446120",
    "end": "1451820"
  },
  {
    "text": "we're talking like I mean it's it's hundreds upon hundreds of machine instructions but then we do that",
    "start": "1451820",
    "end": "1458419"
  },
  {
    "text": "for like thousands of things it's like you you you just you just couldn't right like there was not enough",
    "start": "1458419",
    "end": "1464419"
  },
  {
    "text": "there's not enough units of power to actually do that you know what I mean so you have to",
    "start": "1464419",
    "end": "1472460"
  },
  {
    "text": "you have to really have I don't understand the gentleman coding or anything yeah of course we code baby we",
    "start": "1472460",
    "end": "1477620"
  },
  {
    "text": "code so much [ __ ] we also like to watch things why you gotta be like that white guy coming here",
    "start": "1477620",
    "end": "1482900"
  },
  {
    "text": "with that with that small twitch energy okay",
    "start": "1482900",
    "end": "1487940"
  },
  {
    "text": "okay right now your flops are small okay I want you to bring up your flops floating Point operations don't forget that",
    "start": "1487940",
    "end": "1494980"
  },
  {
    "text": "after the previous step we have a pretty decent approximation but we did pick up some error terms here and there but",
    "start": "1495980",
    "end": "1501380"
  },
  {
    "text": "thanks to Newton's method we can make a really good approximation out of a decent one classic native 500 years",
    "start": "1501380",
    "end": "1506539"
  },
  {
    "text": "later method finds a root for a given function meaning and finds an X for which f of x equals zero it does so by",
    "start": "1506539",
    "end": "1512120"
  },
  {
    "text": "taking an approximation and returning a better approximation you keep on neutralizing the process until you're close enough to the actual solution but",
    "start": "1512120",
    "end": "1518900"
  },
  {
    "text": "it turns out that here we are already close enough to the actual solution that one iteration suffices to get an error",
    "start": "1518900",
    "end": "1524720"
  },
  {
    "text": "within one percent welcome to Costco the only things new face method needs is the function and",
    "start": "1524720",
    "end": "1531140"
  },
  {
    "text": "its derivative and what Newton's method does is that it takes an x value and tries to guess by how much it is off",
    "start": "1531140",
    "end": "1536900"
  },
  {
    "text": "from being a root it does so by calculating f of x and its derivative yep",
    "start": "1536900",
    "end": "1543980"
  },
  {
    "text": "then it does you can write f of x as Y and the derivative as d y over DX",
    "start": "1543980",
    "end": "1550240"
  },
  {
    "text": "we have the ratio between Y and the X offset and Y itself so to get the X offset we just divide y by the ratio",
    "start": "1550700",
    "end": "1559539"
  },
  {
    "text": "so then we simply subtract this offsets the informed viewer can now verify that",
    "start": "1562039",
    "end": "1568820"
  },
  {
    "text": "the last line is one such Newton iteration applied",
    "start": "1568820",
    "end": "1573220"
  },
  {
    "text": "you know thank you Zaskar welcome to Costco I love you Newton plus ratio dude",
    "start": "1575240",
    "end": "1583360"
  },
  {
    "text": "um",
    "start": "1584059",
    "end": "1586120"
  },
  {
    "text": "I would like to say that when you're watching uh math stuff and someone's like the informed viewer",
    "start": "1589940",
    "end": "1596059"
  },
  {
    "text": "nothing makes you feel so stupid in your lifetime I guess we're a bunch of not informed",
    "start": "1596059",
    "end": "1602419"
  },
  {
    "text": "viewers oh man Newton was not a sex Hatter",
    "start": "1602419",
    "end": "1609760"
  },
  {
    "text": "tides to the function f of y equals one divided by y squared minus X notice that",
    "start": "1611120",
    "end": "1616880"
  },
  {
    "text": "y being a root of this function Newton could most certainly not invert a binary tree okay Gauss could Gauss was really",
    "start": "1616880",
    "end": "1622580"
  },
  {
    "text": "good he did that whole like German map min max flow how many times you could enter an exit German seven River City",
    "start": "1622580",
    "end": "1628820"
  },
  {
    "text": "thing you know what I'm talking about action is equivalent to Y being the inverse square root of x",
    "start": "1628820",
    "end": "1635740"
  },
  {
    "text": "I really encourage you to verify this last line of code since it's really surprising that even though both the",
    "start": "1636740",
    "end": "1642080"
  },
  {
    "text": "function and Newton's method have a division in them the Code does not which means that our algorithm is and stays",
    "start": "1642080",
    "end": "1648140"
  },
  {
    "text": "fast now we finally understand the fast inverse square root it only took us the",
    "start": "1648140",
    "end": "1653539"
  },
  {
    "text": "knowledge of the IEEE standard 754 a trick to outsmart the C programming language magic bit operations and the",
    "start": "1653539",
    "end": "1659840"
  },
  {
    "text": "calculus behind Newton's method to be real",
    "start": "1659840",
    "end": "1666080"
  },
  {
    "text": "I only outdone these C programming language okay I'm like seg Falton",
    "start": "1666080",
    "end": "1671840"
  },
  {
    "text": "but real talk like I mean just just sit there for a second and think about that",
    "start": "1671840",
    "end": "1676940"
  },
  {
    "text": "like this guy",
    "start": "1676940",
    "end": "1684700"
  },
  {
    "text": "could come up with that like the fact that we're watching a video about how it happened didn't mean",
    "start": "1685640",
    "end": "1693080"
  },
  {
    "text": "that we're watching a video of it happening in real time this person had to just like look at the formula and be",
    "start": "1693080",
    "end": "1699020"
  },
  {
    "text": "like wait a second weapon if I take a log takes the log he's like oh gosh",
    "start": "1699020",
    "end": "1706400"
  },
  {
    "text": "classic 2 to the 23 mantissa trick black Bam Bam Bam look at that I just reduced it wait a second right like just kept on",
    "start": "1706400",
    "end": "1713480"
  },
  {
    "text": "like just kept on going and then it was like boom no division",
    "start": "1713480",
    "end": "1719179"
  },
  {
    "text": "no division no squirting let's go what I don't know this stuff",
    "start": "1719179",
    "end": "1727840"
  },
  {
    "text": "I can't fathom how much time this would have taken me by myself to come up with if someone",
    "start": "1728600",
    "end": "1734360"
  },
  {
    "text": "said there was a solution that was significantly faster and you need to use extreme math to understand it I think I",
    "start": "1734360",
    "end": "1740600"
  },
  {
    "text": "could figure out maybe in one year if I devoted all my energy and Life Source to it I might",
    "start": "1740600",
    "end": "1749140"
  },
  {
    "text": "did it it's crazy",
    "start": "1761600",
    "end": "1767059"
  },
  {
    "text": "twitch is off today twitch has been just having a bad day recently regularly um is anybody here else worried that",
    "start": "1767059",
    "end": "1773539"
  },
  {
    "text": "twitch is like that we don't know something is about to happen to Twitch like when you really",
    "start": "1773539",
    "end": "1778700"
  },
  {
    "text": "think about it we have significantly more ads poor service",
    "start": "1778700",
    "end": "1783860"
  },
  {
    "text": "recently it's something about to happen you know something about that happened this was not CarMax so Carmack did not",
    "start": "1783860",
    "end": "1790460"
  },
  {
    "text": "do this Carmack let's see don't look at that oh don't look at that either that's Carmack did not write this they",
    "start": "1790460",
    "end": "1796940"
  },
  {
    "text": "mentioned the person's name it's the it's the Forgotten developer right it's not Ramos",
    "start": "1796940",
    "end": "1803299"
  },
  {
    "text": "and it's not uh Carmack I don't know who it is twitch is dying",
    "start": "1803299",
    "end": "1808820"
  },
  {
    "text": "let's all go to Mastodon that's it we're going to Mastodon everybody everybody get out your distributed Federated",
    "start": "1808820",
    "end": "1815600"
  },
  {
    "text": "systems we're going to Mastodon",
    "start": "1815600",
    "end": "1819460"
  }
]