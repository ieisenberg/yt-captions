[
  {
    "text": "all right so this is actually pretty surprising we have a uh security uh rce",
    "start": "40",
    "end": "5960"
  },
  {
    "text": "in open SSH going on here uh CSV was filed this is CSV uh CV CSV cve 2024",
    "start": "5960",
    "end": "15480"
  },
  {
    "text": "6387 are you ready for some remote code execution open SSH let's go preliminary",
    "start": "15480",
    "end": "22400"
  },
  {
    "text": "note open SSH is one of the most secure software in the world this vulnerability is one slip up in an otherwise near",
    "start": "22400",
    "end": "28960"
  },
  {
    "text": "Flawless implementation is defense in-depth design and code are a model and an inspiration and we should thank open",
    "start": "28960",
    "end": "35440"
  },
  {
    "text": "s's Developers for their exemplary work agreed absolutely uh we discovered a",
    "start": "35440",
    "end": "40920"
  },
  {
    "text": "vulnerability a signal Handler raise condition in open SSH server sshd if a client does not authenticate within",
    "start": "40920",
    "end": "47000"
  },
  {
    "text": "login grace Time seconds 120 by default 600 in old old open SSH versions then",
    "start": "47000",
    "end": "52320"
  },
  {
    "text": "SD's Sig alarm Handler is called asynchronously but this signal Handler calls various functions that are not",
    "start": "52320",
    "end": "57920"
  },
  {
    "text": "async signal safe for example CIS log this race condition",
    "start": "57920",
    "end": "63280"
  },
  {
    "text": "affects sshd in its default configuration oh man this is one of",
    "start": "63280",
    "end": "68479"
  },
  {
    "text": "those this is one of those attacks that are just crazy these are one of those attacks that I just don't even have the skills to understand but let's go",
    "start": "68479",
    "end": "74600"
  },
  {
    "text": "through let's see what we got here our investigation we realized that this vulnerability is in fact a regression of",
    "start": "74600",
    "end": "80720"
  },
  {
    "text": "cve 2006 5051 signal Handler raise condition and open SSH 4 4.4 allows",
    "start": "80720",
    "end": "88079"
  },
  {
    "text": "remote attackers to cause a denial of service service crash and possibly known execute uh execute arbitrary code this",
    "start": "88079",
    "end": "94840"
  },
  {
    "text": "was reported in 2006 by Mark Dow oh man all right we're getting deep here this",
    "start": "94840",
    "end": "101560"
  },
  {
    "text": "regression was introduced in October 2020 open SSH 8.5 P1 by Commit This",
    "start": "101560",
    "end": "107640"
  },
  {
    "text": "revised log infrastructure for open SSH which accidentally removed an ifdef do log safe in Sig hand from sigai a",
    "start": "107640",
    "end": "115719"
  },
  {
    "text": "function that is directly called an SD's Sig arm Handler in other words open SSH before 4.1 or 4.4 P1 is vulnerable to",
    "start": "115719",
    "end": "123119"
  },
  {
    "text": "the signal Handler race condition if not backport patched against CV 2006 5051 or",
    "start": "123119",
    "end": "129599"
  },
  {
    "text": "not patched against CV 2008 4109 which was an incorrect fix for 2006 5051 wow",
    "start": "129599",
    "end": "136239"
  },
  {
    "text": "4.4 4.4 P1 less than open SSH and up to",
    "start": "136239",
    "end": "141360"
  },
  {
    "text": "8.5 P1 is not vulnerable to the signal Handler race condition because the ifdef do log safe in Sig",
    "start": "141360",
    "end": "148080"
  },
  {
    "text": "hand which is Sig Handler by the way I know I know things uh that was added to Sig die by this patch for 2006 5051",
    "start": "148080",
    "end": "155599"
  },
  {
    "text": "transformed this unsafe function into a safe exit one call everything that's less than this",
    "start": "155599",
    "end": "162640"
  },
  {
    "text": "everything between these two is vulnerable again to the signal Handler race condition because of the if def do log safe Sig hand was accidentally",
    "start": "162640",
    "end": "168680"
  },
  {
    "text": "removed from Sig die oh so 9.8 is fine are they saying this must have been that",
    "start": "168680",
    "end": "174319"
  },
  {
    "text": "um responsible disclosure this vulnerability is exploited remotely on gpsy based Linux systems where Cy log",
    "start": "174319",
    "end": "180480"
  },
  {
    "text": "itself calls async signal unsafe function for example malakin free an unauthenticated remote code execution as",
    "start": "180480",
    "end": "187319"
  },
  {
    "text": "root because it affects SD's privilege code which is not sandbox and runs with full privileges we have not investigated",
    "start": "187319",
    "end": "194360"
  },
  {
    "text": "any other libc or operating system but open BSD is notably not vulnerable",
    "start": "194360",
    "end": "199400"
  },
  {
    "text": "because its Sig alarm Handler call CIS log R an asynchronous signal safer version of CIS log which was invented by",
    "start": "199400",
    "end": "206519"
  },
  {
    "text": "BSD in 2001 okay I want to see some examples here I",
    "start": "206519",
    "end": "212799"
  },
  {
    "text": "I think I think I think we see what's happening here uh open BSD Chad yep okay",
    "start": "212799",
    "end": "218000"
  },
  {
    "text": "uh security vulnerability introduced by unnecessary complexity I'm not sure if it's unnecessary complexity it sounds like it's perfect complex complexity",
    "start": "218000",
    "end": "224239"
  },
  {
    "text": "right when you're unable to be logged in after the after the timeout period you go into this little logging thing and",
    "start": "224239",
    "end": "230760"
  },
  {
    "text": "then you die and then somebody removed an if def for when you're in a specific case and then this causes a problem",
    "start": "230760",
    "end": "237879"
  },
  {
    "text": "nevertheless we immediately faced three major problems uh from a theoretical point of view we must find a useful code",
    "start": "237879",
    "end": "243360"
  },
  {
    "text": "path that if interrupted at the right time by Sig alarm leaves SD in inconsistent State and we must then",
    "start": "243360",
    "end": "248879"
  },
  {
    "text": "exploit this inconsistent State instead of Cal arm Handler is this okay so what I'm now",
    "start": "248879",
    "end": "258359"
  },
  {
    "text": "reading is this is a theoretical bug not a",
    "start": "258560",
    "end": "264080"
  },
  {
    "text": "practical boots on the ground bug is that safe to say cuz we've been hearing a lot about this where we get a we get a",
    "start": "264080",
    "end": "271360"
  },
  {
    "text": "ton of like uh a lot of Open Source uh things are getting a ton of information in in which may or may not be super",
    "start": "271360",
    "end": "277320"
  },
  {
    "text": "useful from a particular let's see from a practical point of view we must find a way to reach this useful code path in",
    "start": "277320",
    "end": "282400"
  },
  {
    "text": "sshd and maximize our chances of interrupting it at the right time from a timing point of view we must find a way to further increase our chances of",
    "start": "282400",
    "end": "289120"
  },
  {
    "text": "interrupting this useful code path at the right time remotely all right so let's see I just checked yuntu 20 uh",
    "start": "289120",
    "end": "294600"
  },
  {
    "text": "2204 and 2404 and they are using SSH version 8.9 which is Tech or 9.8 or 8.9",
    "start": "294600",
    "end": "302160"
  },
  {
    "text": "okay so this this sounds like it it may not be as big of a problem as we see we may not be able to take advantage of it",
    "start": "302160",
    "end": "307800"
  },
  {
    "text": "okay 8.9 so in other words uh 2020 uh 2204 and 2404 both are technically",
    "start": "307800",
    "end": "314280"
  },
  {
    "text": "vulnerable to this bug to focus on these uh three problems without having to immediately fight against all modern",
    "start": "314280",
    "end": "319840"
  },
  {
    "text": "operating system Protections in particular aslr and NX we decided to exploit old op SSH versions first on",
    "start": "319840",
    "end": "327759"
  },
  {
    "text": "i386 and then based on that experience recent versions first uh SSH 2.0 open",
    "start": "327759",
    "end": "332960"
  },
  {
    "text": "SSH 34 P1 Debian 31 okay a lot of this Woody uh from this one right here uh",
    "start": "332960",
    "end": "339360"
  },
  {
    "text": "this is the first Debian version that has privileged separation enabled by default and that is patched against all critical vulnerabilities of that era all",
    "start": "339360",
    "end": "345960"
  },
  {
    "text": "right to remotely exploit this version We interrupt a call to free with a Sig alarm inside SD's public key Parson code",
    "start": "345960",
    "end": "352880"
  },
  {
    "text": "then Le let's see leave the Heap in an inconsistent State and exploit this inconsistent State during another call",
    "start": "352880",
    "end": "358680"
  },
  {
    "text": "to free in side Sig alarm Handler our experiments takes uh 10,000 tries on average to win this race condition oh",
    "start": "358680",
    "end": "367160"
  },
  {
    "text": "okay so it's not purely theoretical they are able to do it on the older versions",
    "start": "367160",
    "end": "373400"
  },
  {
    "text": "okay with 10 connections Max startups accepting uh accepted per 600 seconds it",
    "start": "373400",
    "end": "379520"
  },
  {
    "text": "takes one week on average to obtain a remote root shell okay I mean that's",
    "start": "379520",
    "end": "384960"
  },
  {
    "text": "still real that's that's definitely real I mean this is obviously a very old version of it right cuz they said uh uh",
    "start": "384960",
    "end": "390440"
  },
  {
    "text": "Debian version Woody I don't even know what version Woody is but Woody had to be a a long time ago uh second ssh2 this",
    "start": "390440",
    "end": "399199"
  },
  {
    "text": "big thing right here from Ubuntu this big thing uh this is the last Ubuntu version that still had vulnerable to",
    "start": "399199",
    "end": "404880"
  },
  {
    "text": "2006 -51 signal Handler race condition right so this is before 4.4 so this is",
    "start": "404880",
    "end": "410199"
  },
  {
    "text": "before 2006 um to remotely exploit this version We interrupt a call to Pam start with",
    "start": "410199",
    "end": "416240"
  },
  {
    "text": "Sig alarm leave one Pam's instructions in an inconsistent state and exploit inconsistent State during a call to Pam",
    "start": "416240",
    "end": "422319"
  },
  {
    "text": "end inside a Sig arm Handler our experiments it takes 10,000 tries on average to win this race condition IE 10",
    "start": "422319",
    "end": "429280"
  },
  {
    "text": "connections okay and at 120 seconds it takes one to two days to uh remain a",
    "start": "429280",
    "end": "435080"
  },
  {
    "text": "remote uh remote shell okay",
    "start": "435080",
    "end": "441479"
  },
  {
    "text": "okay all right here we go we're on this version of deian uh this is the current deian stable version and it is",
    "start": "441479",
    "end": "447560"
  },
  {
    "text": "vulnerable to the regression of CV 20 65055 to remotely exploit this version we uh interrupt a call to Malik with Sig",
    "start": "447560",
    "end": "454800"
  },
  {
    "text": "alarm inside SD's public key parsing code leave the Heap in an inconsistent State and exploit this inconsistent",
    "start": "454800",
    "end": "460879"
  },
  {
    "text": "State during another call to Malik inside Sig alarm Handler more precisely inside CIS log in our experiments it",
    "start": "460879",
    "end": "466159"
  },
  {
    "text": "takes up to 10,000 tries on average to win this race condition so 3 to four hours with 100 connections Max startups",
    "start": "466159",
    "end": "472840"
  },
  {
    "text": "accepted 100 let's see 120 seconds ultimately it takes 68 hours on average to obtain remote shell uh pig as we only",
    "start": "472840",
    "end": "479879"
  },
  {
    "text": "guess the lib uh lib the G lib C's address correctly half of the time a",
    "start": "479879",
    "end": "485919"
  },
  {
    "text": "aslr is where they uh they effectively take uh in program memory pointers and",
    "start": "485919",
    "end": "491759"
  },
  {
    "text": "sanitize them right it's definitely this definitely does not uh this is definitely not",
    "start": "491759",
    "end": "497000"
  },
  {
    "text": "um uh this is no longer theoretical it sounds like right it randomizes it right",
    "start": "497000",
    "end": "502960"
  },
  {
    "text": "I know it's randomized but it's it's yeah it's address uh layout randomization yeah okay that's what I",
    "start": "502960",
    "end": "508319"
  },
  {
    "text": "thought okay address space layout randomization yes I've heard about this I've heard about",
    "start": "508319",
    "end": "514240"
  },
  {
    "text": "this thing I'm just a dumb programmer aren't we all this research is still a work in progress we have targeted",
    "start": "514240",
    "end": "520719"
  },
  {
    "text": "virtual machines only not bare metal servers on a mostly stable Network to link 10 milliseconds package Jitter okay",
    "start": "520719",
    "end": "528080"
  },
  {
    "text": "so not not not a not a lot of uh not a lot of time right here we are con we are",
    "start": "528080",
    "end": "533600"
  },
  {
    "text": "convinced that various aspects of our exploits can greatly improve we have started to work on an amd64 exploit",
    "start": "533600",
    "end": "541120"
  },
  {
    "text": "which is much harder because of the stronger aslr interesting a few days after we",
    "start": "541120",
    "end": "546240"
  },
  {
    "text": "started our work on amd64 we noticed the following bug report in open SSH bugzilla about deadlock and sshd S uh",
    "start": "546240",
    "end": "552720"
  },
  {
    "text": "sigal arm Handler all right uh we therefore decided to contact op s's developers immediately to let them know",
    "start": "552720",
    "end": "559240"
  },
  {
    "text": "that this deadlock is caused by an exploit exploitable vulnerability we put our AMD work on hold and we started to",
    "start": "559240",
    "end": "564760"
  },
  {
    "text": "write this advisory this is actually pretty cool this is uh this is actually really",
    "start": "564760",
    "end": "571240"
  },
  {
    "text": "really wild so this is from 2005 version Theory I do like that they have a little",
    "start": "571240",
    "end": "577680"
  },
  {
    "text": "quote every single time they have a little quote upon every single little section okay Theory but that's but",
    "start": "577680",
    "end": "584200"
  },
  {
    "text": "that's not like me I'm breaking free the interruptor okay what are the interrupts I don't know this",
    "start": "584200",
    "end": "590000"
  },
  {
    "text": "reference I I assumed it was a band yeah it is new album completely reasonable I",
    "start": "590000",
    "end": "597200"
  },
  {
    "text": "knew it I knew it all right the S alarm Handler of this open SSH version calls packet close which calls buffer free",
    "start": "597200",
    "end": "604120"
  },
  {
    "text": "which calls x free and hence free which is not a sync signal safe okay so Grace",
    "start": "604120",
    "end": "609880"
  },
  {
    "text": "alarm Handler dang man what what a code what a code",
    "start": "609880",
    "end": "617600"
  },
  {
    "text": "threading going on here so you have to hit it you have to hit a signal uh uh",
    "start": "617600",
    "end": "622760"
  },
  {
    "text": "some sort of signal while calling this so that's why it takes like one in 10,000 tries cuz you're trying to do a timing attack and that's why was so",
    "start": "622760",
    "end": "629640"
  },
  {
    "text": "important where they mentioned packet um packet distribution right so a big thing about packet distribution is often",
    "start": "629640",
    "end": "635760"
  },
  {
    "text": "you'll see something like that right where whoopsies that was a terrible one I hit my mouse next to me right where",
    "start": "635760",
    "end": "642079"
  },
  {
    "text": "you're going to see something like this right this is a zero over here which virtually no",
    "start": "642079",
    "end": "647880"
  },
  {
    "text": "packets go right here and then you have really fast packets then you have the majority of packets Landing right here",
    "start": "647880",
    "end": "652959"
  },
  {
    "text": "and then you have this really long tail of possible packets so for you to be able to cause this cant you have to land",
    "start": "652959",
    "end": "659839"
  },
  {
    "text": "and sending packets my assumption is that they have the 120 seconds is when",
    "start": "659839",
    "end": "664959"
  },
  {
    "text": "it's closing they use that as a as a means to try to timeout packets being",
    "start": "664959",
    "end": "670120"
  },
  {
    "text": "sent to hit this and that's why it only works with default configuration because they can figure out that I guess you",
    "start": "670120",
    "end": "675760"
  },
  {
    "text": "could technically run enough sessions you can figure out the uh configuration you can figure out the default or the",
    "start": "675760",
    "end": "680959"
  },
  {
    "text": "configuration for timeouts I assume this is how they're doing it and so if you send a packet if you expect Clos down to",
    "start": "680959",
    "end": "687000"
  },
  {
    "text": "happen in 120 seconds and you're sting measuring latency and latency varies between 10 milliseconds to 100",
    "start": "687000",
    "end": "693639"
  },
  {
    "text": "milliseconds you're trying to land a packet is my assumption of what's going on here is you're trying to land a",
    "start": "693639",
    "end": "698959"
  },
  {
    "text": "packet right here at this perfect moment I think that's what they're trying to say so that way it's calling and it's",
    "start": "698959",
    "end": "706079"
  },
  {
    "text": "doing it's it's calling it's it's being interrupted during the middle of a free that's way smarter than",
    "start": "706079",
    "end": "713160"
  },
  {
    "text": "I am yeah I this is vastly outside of my my understanding but I think that's what I'm reading right now yeah dude it's",
    "start": "713160",
    "end": "718959"
  },
  {
    "text": "like seriously way way smarter than me that is incredible research consequently we started to read the Malik code of",
    "start": "718959",
    "end": "725920"
  },
  {
    "text": "this uh Debian dude when you're reading Malik you are deep the see uh if a first",
    "start": "725920",
    "end": "732279"
  },
  {
    "text": "uh if the first call to free can be interrupted by Sig alarm and exported during a second call to free inside the",
    "start": "732279",
    "end": "737680"
  },
  {
    "text": "sigle arm Handler at lines this right here above because the lib G the the G",
    "start": "737680",
    "end": "742800"
  },
  {
    "text": "libc Malik is not hardened against the unlink technique pioneered by solar designer in 2000 we quickly spotted an",
    "start": "742800",
    "end": "749800"
  },
  {
    "text": "interesting code path in chunk free okay so we have a Malik right so we have our",
    "start": "749800",
    "end": "755720"
  },
  {
    "text": "pointer we have our internal size all that if I'm not mistaken if I'm not mistaken how Malik effectively works in",
    "start": "755720",
    "end": "761839"
  },
  {
    "text": "the simplest part is that when you ask for a chunk of memory it gives you a pointer to this part of the memory but",
    "start": "761839",
    "end": "767120"
  },
  {
    "text": "behind it is a header and so if you just go to this pointer and walk backwards you effectively get to the header size",
    "start": "767120",
    "end": "773560"
  },
  {
    "text": "if I'm not mistaken that's like the basics of how Malik worked that's why when you free a pointer it knows how to",
    "start": "773560",
    "end": "778680"
  },
  {
    "text": "free the pointer because it has it has it has this right here it effectively",
    "start": "778680",
    "end": "783880"
  },
  {
    "text": "has a header hidden behind the memory chunk all right so this is just code I don't quite understand here so we got",
    "start": "783880",
    "end": "789760"
  },
  {
    "text": "ourselves a structure we got ourselves an unlink which Just Hits it with the old P dude nothing like a macro quick",
    "start": "789760",
    "end": "795920"
  },
  {
    "text": "macro unlink with the BK PK FD file descriptor maybe file descriptor BK BK",
    "start": "795920",
    "end": "802639"
  },
  {
    "text": "yeah oh okay so this is unlinking okay this looks like a two-way this looks like some sort of linked list going on",
    "start": "802639",
    "end": "808000"
  },
  {
    "text": "here right because we have the K and we have the FD and we're pointing them at each",
    "start": "808000",
    "end": "814800"
  },
  {
    "text": "other I don't know what it's doing all right I can't read this code I'm not smart enough here all right so there we",
    "start": "814800",
    "end": "821320"
  },
  {
    "text": "go here we go to exploit this code path we arranged for SD's Heap to have the following",
    "start": "821320",
    "end": "826519"
  },
  {
    "text": "layout are all maloc chunks of memory PS F and B are their previous size are",
    "start": "826519",
    "end": "833079"
  },
  {
    "text": "their previous size size FD and BK Fields I don't know what BK stands for okay so you have chunk X chunk Y and",
    "start": "833079",
    "end": "839600"
  },
  {
    "text": "chunk Z so how do you how do you arrange the Heap to look like this is it just",
    "start": "839600",
    "end": "844759"
  },
  {
    "text": "sending in three packets it must be sending in three packets Burger King",
    "start": "844759",
    "end": "852800"
  },
  {
    "text": "obviously back BK back it's so",
    "start": "852800",
    "end": "859880"
  },
  {
    "text": "simple it's so simple it's like right there bger King uh first if the call to",
    "start": "859880",
    "end": "866320"
  },
  {
    "text": "free chunk Y is interrupted by sarm after line this but before Line This",
    "start": "866320",
    "end": "871759"
  },
  {
    "text": "Then chunk Y is already marked as free because chunk Z's previous uh pre inuse",
    "start": "871759",
    "end": "876920"
  },
  {
    "text": "bit is cleared at line this okay okay so there must be some sort of Arena allocator that's using a linked list to",
    "start": "876920",
    "end": "883279"
  },
  {
    "text": "walk the Arenas is that's what it is uh but it is not yet linked into the doubly uh its doubly linked list at line 3 uh",
    "start": "883279",
    "end": "890399"
  },
  {
    "text": "3251 in other words the chunk wise uh FD and or forward yeah that's forward and",
    "start": "890399",
    "end": "895920"
  },
  {
    "text": "backp pointers still contain user data attack Control Data okay okay welcome to the arena yeah",
    "start": "895920",
    "end": "903320"
  },
  {
    "text": "second if inside sigle arm Handler packet clo calls free chunk X then the code block at lines these ones right",
    "start": "903320",
    "end": "910639"
  },
  {
    "text": "here is entered because y chunk is Mark free and chunk Y is unlined and so the so-called aa4 [ __ ]",
    "start": "910639",
    "end": "917839"
  },
  {
    "text": "primitive almost arbitrary 4 byte mired overwrite what a name man this is wildly",
    "start": "917839",
    "end": "925360"
  },
  {
    "text": "low uh because chunk wise FD uh back or for and back pointers are still attacker",
    "start": "925360",
    "end": "930639"
  },
  {
    "text": "controlled for more information on the unlink technique and uh primitive check",
    "start": "930639",
    "end": "935680"
  },
  {
    "text": "out this one okay so this is the jpeg interesting now I want to learn more",
    "start": "935680",
    "end": "940880"
  },
  {
    "text": "about this dang it I just want to learn about all of them last with the aa4 BM Prim [ __ ]",
    "start": "940880",
    "end": "947800"
  },
  {
    "text": "primitive we overwrite the uh gbc's free hook function pointer this old Dean",
    "start": "947800",
    "end": "953160"
  },
  {
    "text": "version does not have aslr nor NX with with the addresses of our Shell Code in the Heap thus Achi remote code execution",
    "start": "953160",
    "end": "960240"
  },
  {
    "text": "during the next Call of free dang okay so that's why it was so simple to do",
    "start": "960240",
    "end": "965839"
  },
  {
    "text": "woody is because since you didn't have this it was really easy to uh you could",
    "start": "965839",
    "end": "971440"
  },
  {
    "text": "just had a defined address in which was free hook so you never really had to okay okay so that's why they started on",
    "start": "971440",
    "end": "978240"
  },
  {
    "text": "Woody just to verify that it worked this makes more sense uh for the for the link it's right here okay",
    "start": "978240",
    "end": "985639"
  },
  {
    "text": "practice they're taking over uh now they are taking over and they got complete",
    "start": "985639",
    "end": "990880"
  },
  {
    "text": "control the interrupts Liberty again beautiful to mount this attack against sshd we interrupted a call to free",
    "start": "990880",
    "end": "998079"
  },
  {
    "text": "inside SD's parsing code of the DSA public key I.E line 144 below is our",
    "start": "998079",
    "end": "1004319"
  },
  {
    "text": "free chunk Y and exploit uh it during one of the free calls in packet close",
    "start": "1004319",
    "end": "1009639"
  },
  {
    "text": "one of the lines 341 to 344 above is our free chunk okay buffer get big numb too",
    "start": "1009639",
    "end": "1015360"
  },
  {
    "text": "damn I I don't even know what's going on here so get a buffer get string must be",
    "start": "1015360",
    "end": "1020519"
  },
  {
    "text": "some sort of uh here's the buffer you must get some sort of length that I'm",
    "start": "1020519",
    "end": "1026120"
  },
  {
    "text": "not really sure what I'm not even sure what's going on here b b binary to big number then free",
    "start": "1026120",
    "end": "1033400"
  },
  {
    "text": "the bin then free bin initially however we were never able to win this race condition uh interrupt the free call",
    "start": "1033400",
    "end": "1039480"
  },
  {
    "text": "with uh at line 144 this one right here okay at the right time eventually we realized that we could greatly improve",
    "start": "1039480",
    "end": "1045240"
  },
  {
    "text": "our chances of winning this race condition uh the DSA public key Parson code allows us to call free four times",
    "start": "1045240",
    "end": "1052799"
  },
  {
    "text": "at lines 704 through 707 below and furthermore sshd allows us to attempt six user",
    "start": "1052799",
    "end": "1058720"
  },
  {
    "text": "authentications uh if any one of these 24 free calls is interrupted at the right time then uh then we later achieve",
    "start": "1058720",
    "end": "1065679"
  },
  {
    "text": "remote code execution in Sig alarm Handler oh because it does it like look at that it just does it back to back to",
    "start": "1065679",
    "end": "1072039"
  },
  {
    "text": "back to back oh so that's how they're doing is they're waiting for the most like something that just has such a",
    "start": "1072039",
    "end": "1078039"
  },
  {
    "text": "large chunk of freeze happening that all they have to do is just keep on tossing things in there and interrupt it okay uh",
    "start": "1078039",
    "end": "1084960"
  },
  {
    "text": "with this Improvement we finally won the race condition after one month wow we were happy and it did a root shell dance",
    "start": "1084960",
    "end": "1091520"
  },
  {
    "text": "uh but we also felt that there is still room for improvement timing don't worry",
    "start": "1091520",
    "end": "1096559"
  },
  {
    "text": "just wait and see the interruptor Haven't Seen the Last of Me therefore again I love I am dude I am in absolute",
    "start": "1096559",
    "end": "1103559"
  },
  {
    "text": "love with the fact that they keep quoting a single band called The interrupts in an attack that it's all",
    "start": "1103559",
    "end": "1110200"
  },
  {
    "text": "about interrupting program flow this is just so good I can't imagine I can I",
    "start": "1110200",
    "end": "1115280"
  },
  {
    "text": "cannot fathom fighting a race condition for that long well especially since they said the following phrase that they tried to do this one for a long time and",
    "start": "1115280",
    "end": "1122320"
  },
  {
    "text": "figured out they just couldn't make it happen so how long was this running where they were trying to interrupt this",
    "start": "1122320",
    "end": "1129400"
  },
  {
    "text": "before they found this and then tried that which this then ran for one month right like how long has this",
    "start": "1129400",
    "end": "1137120"
  },
  {
    "text": "research been going on we therefore implemented the following three-fold timing strategy we do not",
    "start": "1137120",
    "end": "1142720"
  },
  {
    "text": "wait until the last moment to send our rather large DSA public key ah uh to sshd instead we send the entire packet",
    "start": "1142720",
    "end": "1149840"
  },
  {
    "text": "minus one bite the last bite long before the login Grace time okay okay so oh yes",
    "start": "1149840",
    "end": "1155679"
  },
  {
    "text": "so they're hanging it because it's minus one bite so it's waiting for that last bite before it sends it off as a complete packet okay we're starting to",
    "start": "1155679",
    "end": "1161799"
  },
  {
    "text": "take shape here and then send off the very last bite at the very last moment to minimize the effects of network",
    "start": "1161799",
    "end": "1167039"
  },
  {
    "text": "delays yes cuz if you have one one packet there's like this weird thing that happens in networks where one",
    "start": "1167039",
    "end": "1173600"
  },
  {
    "text": "packet is vastly faster than two packets like the the the difference",
    "start": "1173600",
    "end": "1179799"
  },
  {
    "text": "between one and two is vast I've heard numbers tossed out you're going to have to get uh some coding guy from Netflix",
    "start": "1179799",
    "end": "1185200"
  },
  {
    "text": "to talk about this but he mentioned one time to me that one packet versus two",
    "start": "1185200",
    "end": "1190880"
  },
  {
    "text": "packets um is something along the same lines as",
    "start": "1190880",
    "end": "1196039"
  },
  {
    "text": "one packet versus 20 like the timing difference is not that much",
    "start": "1196039",
    "end": "1202799"
  },
  {
    "text": "difference it's like vastly different one is extremely fast versus two or more",
    "start": "1202799",
    "end": "1209559"
  },
  {
    "text": "is just like a huge window for like problems I've heard that before too yeah I don't know the exact amount but I",
    "start": "1209559",
    "end": "1216280"
  },
  {
    "text": "heard there's just like this there's just a whole problem set once you send more than one packet so this makes perfect sense if you want to really time",
    "start": "1216280",
    "end": "1222039"
  },
  {
    "text": "the attack you have a singular packet that you send we keep track of the median round",
    "start": "1222039",
    "end": "1227400"
  },
  {
    "text": "trip time by regularly sending packets that produce responses from sshd called it called it called it okay",
    "start": "1227400",
    "end": "1235840"
  },
  {
    "text": "this makes sense this makes sense H and keep track of the difference between the moment we are expecting our connection",
    "start": "1235840",
    "end": "1241600"
  },
  {
    "text": "to be closed by sshd essentially the moment we received the first bite of the sshd banner plus the login Grace time",
    "start": "1241600",
    "end": "1248400"
  },
  {
    "text": "and the moment our connection is really closed by sshd according and adjusted our timing I.E the moment we send the",
    "start": "1248400",
    "end": "1254559"
  },
  {
    "text": "last bite of our DSA packet Dam",
    "start": "1254559",
    "end": "1260159"
  },
  {
    "text": "dang okay so they are trying to they they're they're literally trying to get something to start running the DSA",
    "start": "1260159",
    "end": "1266000"
  },
  {
    "text": "packet and then using that 1202 login Grace time to then interrupt it and call",
    "start": "1266000",
    "end": "1271919"
  },
  {
    "text": "free okay these times are interrupt free call with the Sig Handler with the Sig",
    "start": "1271919",
    "end": "1277799"
  },
  {
    "text": "Sig abort uh these time differences allow us to track clock skews and network delays",
    "start": "1277799",
    "end": "1282919"
  },
  {
    "text": "which show predictable patterns over time we experimented with linear and spline regressions but in the end",
    "start": "1282919",
    "end": "1288320"
  },
  {
    "text": "nothing worked better than simply reusing the most recent measurements let's go that's that's because like I",
    "start": "1288320",
    "end": "1293640"
  },
  {
    "text": "mean the problem about networks is networks aren't like what happened one hour ago isn't really an indication of",
    "start": "1293640",
    "end": "1299960"
  },
  {
    "text": "what is going to be happening now even what happened 10 minutes ago may not be an indication to what's happening now",
    "start": "1299960",
    "end": "1306559"
  },
  {
    "text": "like there's just so much variation in in in in networks possibly deep learning might yield even better results a calman",
    "start": "1306559",
    "end": "1313559"
  },
  {
    "text": "filter uh this is left as an exercise for the interested reader uh more more importantly we further increased our",
    "start": "1313559",
    "end": "1320240"
  },
  {
    "text": "chances of winning this race condition by slowly adjusting our timing through involuntary feedback from sshd if you",
    "start": "1320240",
    "end": "1325960"
  },
  {
    "text": "receive a response S2 message user off filed to our DSA public key packet then",
    "start": "1325960",
    "end": "1331799"
  },
  {
    "text": "we sent it off then we sent it too early SD had time to receive our packet in an unprivileged child parse it and send it",
    "start": "1331799",
    "end": "1338640"
  },
  {
    "text": "to the privileged child parse it there and send the response all the way back to us if we cannot even send the last",
    "start": "1338640",
    "end": "1343960"
  },
  {
    "text": "bite of our DSA packet then we waited too long sshd received a s alarm and closed our con connection if we can send",
    "start": "1343960",
    "end": "1349799"
  },
  {
    "text": "the last bite of our DSA packet and receive no response before sshd closes our connection then our timing was",
    "start": "1349799",
    "end": "1355000"
  },
  {
    "text": "reasonably accurate interesting okay yeah because you're you're not only not only are you facing Network variations",
    "start": "1355000",
    "end": "1362640"
  },
  {
    "text": "you're also facing CPU stuff just assuming that you may not you may have all sorts of different problems right",
    "start": "1362640",
    "end": "1368679"
  },
  {
    "text": "what happen if they're in what happen if they're in a shared environment right there's all sorts of then variations of timing on top of",
    "start": "1368679",
    "end": "1375559"
  },
  {
    "text": "this that's crazy this is crazy crazy this feedback allow man this is so",
    "start": "1375559",
    "end": "1381960"
  },
  {
    "text": "cool this feedback allows us to Target what we call the large race condition window hitting it does not guarantee",
    "start": "1381960",
    "end": "1388080"
  },
  {
    "text": "what we win uh that we win the race condition but inside this large window there are 25 small race",
    "start": "1388080",
    "end": "1394840"
  },
  {
    "text": "windows it's so smart inside the 24 free calls that if hit guarantee that we do",
    "start": "1395240",
    "end": "1401640"
  },
  {
    "text": "win the race condition with these improvements it takes 10,000 tries approximately 10,000 tries on average to",
    "start": "1401640",
    "end": "1406960"
  },
  {
    "text": "win this race condition I.E 10 connections 600 seconds log and grace Time one week but the new ones are much",
    "start": "1406960",
    "end": "1413760"
  },
  {
    "text": "smaller it's only 120 seconds which cuts it down to one to two days all right Theory take one I sleep when the Sun",
    "start": "1413760",
    "end": "1420159"
  },
  {
    "text": "starts to rise the interruptor alien the Sig alarm handles uh Handler",
    "start": "1420159",
    "end": "1425760"
  },
  {
    "text": "of this open SSH version does not call packet close anymore moreover this Ubuntu uh glibc 236 always takes a",
    "start": "1425760",
    "end": "1432720"
  },
  {
    "text": "mandatory lock when entering the functions of the Malik family even if a single thread like SSH which prevents us",
    "start": "1432720",
    "end": "1439320"
  },
  {
    "text": "from interrupting a call to one of the Malo functions and later exploding it during another call to these functions",
    "start": "1439320",
    "end": "1445159"
  },
  {
    "text": "they would always deadlock we must find another solution oh this is exciting hey I'm gonna get a quick hey flip take this",
    "start": "1445159",
    "end": "1451480"
  },
  {
    "text": "part out I'm gonna get a quick drink of water flip take it out cve 20 uh 2006 I'm just going to call uh 20 I'm just",
    "start": "1451480",
    "end": "1457679"
  },
  {
    "text": "going to call it by the year because it looks like there's one per year so we should be just fine so 2006 cve mentions a double free in gssapi but gssapi or uh",
    "start": "1457679",
    "end": "1467279"
  },
  {
    "text": "cerberos is not enabled by default so this does not sound very appealing on the other hand Pam is enabled by default",
    "start": "1467279",
    "end": "1473440"
  },
  {
    "text": "and Pam end is called by sshd sigle arm Handler and is of course not async signal safe we therefore searched a uh",
    "start": "1473440",
    "end": "1481360"
  },
  {
    "text": "for a few or oh my goodness we searched for a Pam function that if interrupted by Sig alarm uh at the right time would",
    "start": "1481360",
    "end": "1488159"
  },
  {
    "text": "leave Pam's internal structures in an inconsistent State exploitable during Pam end in the sigal arm Handler and we",
    "start": "1488159",
    "end": "1494360"
  },
  {
    "text": "found Pam set data all right what do we got here so is it the Malo is is that what they're trying to do is they're trying to during Malik stuff but I",
    "start": "1494360",
    "end": "1500760"
  },
  {
    "text": "thought Mal I thought all the Malik stuff is is thread safe so it must be something else that I do not understand if this function is interrupted by Sig",
    "start": "1500760",
    "end": "1506960"
  },
  {
    "text": "alarm after line 66 but before line 74 then the data entry is already linked",
    "start": "1506960",
    "end": "1512600"
  },
  {
    "text": "into Pam's structure Pam H but is cleaned up let's see but it's cleanup field a function pointer is not yet",
    "start": "1512600",
    "end": "1518600"
  },
  {
    "text": "initialized since the Malik on 57 does not initialize its memory if we are able to control cleanup through leftovers",
    "start": "1518600",
    "end": "1525440"
  },
  {
    "text": "from previous Heap allocations then we can uh execute arbitrary code when Pam end oh calls Pam free data so there okay",
    "start": "1525440",
    "end": "1534880"
  },
  {
    "text": "so if I'm reading this correctly they want to cause the abort to happen here",
    "start": "1534880",
    "end": "1539960"
  },
  {
    "text": "to call a cleanup somewhere else but before that happens this value needs to be set to a specific different function",
    "start": "1539960",
    "end": "1547480"
  },
  {
    "text": "pointer so that when it calls cleanup it calls cleanup on the function they",
    "start": "1547480",
    "end": "1552760"
  },
  {
    "text": "control okay okay clever I literally have have no",
    "start": "1552760",
    "end": "1559640"
  },
  {
    "text": "idea how they set this value okay uh Pam free data uh Handler",
    "start": "1559640",
    "end": "1565559"
  },
  {
    "text": "tpam struct let's see let's see this one we have the data last data equals the data while last um this yep there it",
    "start": "1565559",
    "end": "1573200"
  },
  {
    "text": "goes it it calls the cleanup this would have been extremely simple exploit unfortunately we completely overlooked",
    "start": "1573200",
    "end": "1578640"
  },
  {
    "text": "that Pam set data can only be called from Pam modules if we interrupt it with Sig alarm then Pam caller is or Pam",
    "start": "1578640",
    "end": "1586799"
  },
  {
    "text": "caller is is still Pam called from module in which case Pam end returns immediately without ever calling Pam",
    "start": "1586799",
    "end": "1592960"
  },
  {
    "text": "free data back to the drawing board okay Theory take two not giving up is not what we do the interruptor title",
    "start": "1592960",
    "end": "1601640"
  },
  {
    "text": "holder we noticed that I dude they must have been jamming to the interrupts for months straight for literal months",
    "start": "1601640",
    "end": "1608039"
  },
  {
    "text": "straight we notice that at line 601 below sshd passes a pointer to its Global SSH Pam Handler pointer directly",
    "start": "1608039",
    "end": "1616000"
  },
  {
    "text": "at p uh to Pam start which is called once per connection static Pam handle",
    "start": "1616000",
    "end": "1621159"
  },
  {
    "text": "uh-oh uhoh shapam handle goes in here error",
    "start": "1621159",
    "end": "1627200"
  },
  {
    "text": "okay we set this thing therefore we therefore decided to look into pamart itself if interrupted by",
    "start": "1627200",
    "end": "1633799"
  },
  {
    "text": "sigal arm we might leave the structure pointed uh to by spam Handler in an inconsistent state which could then be",
    "start": "1633799",
    "end": "1640200"
  },
  {
    "text": "exploited inside the Sig alarm Handler when Pam and SSH handle or SSH Pam",
    "start": "1640200",
    "end": "1645399"
  },
  {
    "text": "handle yep is called okay Pam start all right there it is so there we go so",
    "start": "1645399",
    "end": "1650880"
  },
  {
    "text": "we have a CAC and we have an init our handlers uh we have an init handlers",
    "start": "1650880",
    "end": "1656080"
  },
  {
    "text": "which has we read from a config file we have config file which adds Pam Handler",
    "start": "1656080",
    "end": "1661799"
  },
  {
    "text": "we have add Pam Handler which grabs these handlers sees if it's uh authenticated",
    "start": "1661799",
    "end": "1667880"
  },
  {
    "text": "and we Malo the size of the structure and we set the next and all I think",
    "start": "1667880",
    "end": "1673240"
  },
  {
    "text": "I barely understand this code dude I don't know why I'm so bad at reading C can we just get this in Zig",
    "start": "1673240",
    "end": "1681399"
  },
  {
    "text": "already can we just get this in Zig uh at line 32 Pam start immediately sets",
    "start": "1681440",
    "end": "1686760"
  },
  {
    "text": "sshds SSH Pam handle to a cated uh chunk of memory this is safe because calic",
    "start": "1686760",
    "end": "1693360"
  },
  {
    "text": "initializes this memory to zero that's right uh on the other hand if Pam ad Handler which is called multiple times",
    "start": "1693360",
    "end": "1700240"
  },
  {
    "text": "by Pam start is interrupted by Sig alarm after line 874 but before line 886 the",
    "start": "1700240",
    "end": "1706679"
  },
  {
    "text": "maloc structure is l linked into Pam but its next field is not yet initialized if we were able to control next through",
    "start": "1706679",
    "end": "1713240"
  },
  {
    "text": "leftovers from previous Heap allocations then we can pass an arbitrary pointer to free during the call to Pam end I still",
    "start": "1713240",
    "end": "1720480"
  },
  {
    "text": "don't understand how they pass this arbitrary pointer that's what confuses me how does it how do they set it up in",
    "start": "1720480",
    "end": "1726960"
  },
  {
    "text": "such a way that they can do",
    "start": "1726960",
    "end": "1730518"
  },
  {
    "text": "this okay so is it is it something where they are able to allocate memory",
    "start": "1732279",
    "end": "1738600"
  },
  {
    "text": "from the Heap then they know that this memory is freed and then they know that",
    "start": "1738600",
    "end": "1743840"
  },
  {
    "text": "this memory is somehow reallocated with something that's smaller and thus its",
    "start": "1743840",
    "end": "1749039"
  },
  {
    "text": "offset is something they set earlier to point to a certain address is that like",
    "start": "1749039",
    "end": "1754080"
  },
  {
    "text": "is that what this is going it reuses noers okay okay so am I",
    "start": "1754080",
    "end": "1761159"
  },
  {
    "text": "understanding this correctly cuz that way then this handle because they know the size of this so if they can just get",
    "start": "1761159",
    "end": "1767559"
  },
  {
    "text": "the correct thing in place here and then when it's re when it's that's how I understand it",
    "start": "1767559",
    "end": "1774760"
  },
  {
    "text": "yeah yes people are saying yes but I think people say yes to whatever I say sometimes that's that is kind of where",
    "start": "1775720",
    "end": "1782279"
  },
  {
    "text": "it goes yeah I think sometimes people say yes to whatever I say no yes they're",
    "start": "1782279",
    "end": "1788000"
  },
  {
    "text": "trying yes yes yes yes okay so yes someone said it correctly yes that's the whole point of the interrupt is that",
    "start": "1788000",
    "end": "1793440"
  },
  {
    "text": "they're trying to they're trying to grab the freed memory before it gets clear and redirected yes they're trying to call a a second they're trying to",
    "start": "1793440",
    "end": "1799440"
  },
  {
    "text": "interrupt during a read or during a free process to leave it in a specific state that would then be called into something",
    "start": "1799440",
    "end": "1808960"
  },
  {
    "text": "remotely and then if you could just set that address so my my assumption of how this is works is that what this is is",
    "start": "1808960",
    "end": "1815440"
  },
  {
    "text": "that uh here I'm going to redraw this so this is how it this is how this quote unquote Works in my head Let's Pretend",
    "start": "1815440",
    "end": "1822279"
  },
  {
    "text": "the size of this thing is like this big and they have a chunk that they can override so if they can call it before",
    "start": "1822279",
    "end": "1827960"
  },
  {
    "text": "fors freed and then this Handler gets called if they set this address to be like say right here and then this is the",
    "start": "1827960",
    "end": "1834320"
  },
  {
    "text": "actual code execution right I just drew an American flag [ __ ] yeah Eagles yeah",
    "start": "1834320",
    "end": "1840159"
  },
  {
    "text": "yeah Eagles",
    "start": "1840159",
    "end": "1843240"
  },
  {
    "text": "Eagles Eagles hell yeah hell yeah look at that eagle America yeah get",
    "start": "1848519",
    "end": "1856039"
  },
  {
    "text": "guns yeah this is shotgun hell",
    "start": "1856039",
    "end": "1861158"
  },
  {
    "text": "yeah um yeah there you go what the [ __ ] is a",
    "start": "1861600",
    "end": "1866639"
  },
  {
    "text": "kilometer right and so then then they execute then they just effectively offset this into the struct further",
    "start": "1866639",
    "end": "1872159"
  },
  {
    "text": "where they can execute the code I think that's what I'm understanding because they also said a rather large DS DSA DS",
    "start": "1872159",
    "end": "1879600"
  },
  {
    "text": "something dsse uh encryption I don't know that I don't know the encryptions very well I don't know these things right I think that's what I'm I'm seeing",
    "start": "1879600",
    "end": "1887440"
  },
  {
    "text": "or understanding well Malik will get a pointer um well Malik will get a will",
    "start": "1887440",
    "end": "1894760"
  },
  {
    "text": "get a pointer to the Heap that will not be uh that will not be cleared so if it has data it will still be there yes so",
    "start": "1894760",
    "end": "1900919"
  },
  {
    "text": "did I think I I think I effectively am understanding how this is working in a very very very primitive childish",
    "start": "1900919",
    "end": "1910240"
  },
  {
    "text": "way all right so there we go see we call the free Handler and the free Handler calls the auxiliary free Handler which",
    "start": "1910240",
    "end": "1917120"
  },
  {
    "text": "then calls this Pam drop then we have the mem set then we just set a bunch of zeros and then we then we last okay so",
    "start": "1917120",
    "end": "1924480"
  },
  {
    "text": "what is going on here so what is this because of the Malik and ubuntu's lib GC already hardened against the old",
    "start": "1924480",
    "end": "1929559"
  },
  {
    "text": "unleaked Technique we decided to transform our arbitrary free into a Malik uh baleric com's House of",
    "start": "1929559",
    "end": "1937799"
  },
  {
    "text": "mind this must be some really well-known",
    "start": "1937799",
    "end": "1943120"
  },
  {
    "text": "thing is a heap exploitation technique detailed in the Malik uh Mala facet",
    "start": "1943120",
    "end": "1948519"
  },
  {
    "text": "fium document which is a renowned resource in the field of computer security and exploitation this document",
    "start": "1948519",
    "end": "1954279"
  },
  {
    "text": "was created in 2002 and explores various methods to exploit ganu C libraries uh GBC Malik implementation for arbitrary",
    "start": "1954279",
    "end": "1961279"
  },
  {
    "text": "code execution and other Mal malicious Activities The House of the Mind techniques specifically involves manipulating the program's memory",
    "start": "1961279",
    "end": "1967600"
  },
  {
    "text": "allocation process to write a large value a heap pointer to an arbitary address this is typically done by",
    "start": "1967600",
    "end": "1973799"
  },
  {
    "text": "exploding a single bite override to influence the arena handling in lib G uh",
    "start": "1973799",
    "end": "1979120"
  },
  {
    "text": "gbc's Malik system the primary goal is to cont uh to control the arena structure to facilitate further",
    "start": "1979120",
    "end": "1985679"
  },
  {
    "text": "exploitation however this technique and several others describe in the Malik uh",
    "start": "1985679",
    "end": "1991120"
  },
  {
    "text": "malarum I think I'm saying that micerium I don't know how to say that word uh have been migrated to more recent",
    "start": "1991120",
    "end": "1997039"
  },
  {
    "text": "versions of lib due to Integrity checks okay we free our uh our own non-main",
    "start": "1997039",
    "end": "2002600"
  },
  {
    "text": "area chunk point to our fake uh Arena to S sshds got LT the Ubuntu sshd has aslr",
    "start": "2002600",
    "end": "2010279"
  },
  {
    "text": "but not uh pi and overwrite and overwrite exits entry with the address",
    "start": "2010279",
    "end": "2016080"
  },
  {
    "text": "inside our Shell Code in the Heap this ubuntu's Heap is still executable by default and more information of malx Mal",
    "start": "2016080",
    "end": "2022559"
  },
  {
    "text": "okay right here practice I have learned everything the hard way the interruptor the hard way to mount this attack",
    "start": "2022559",
    "end": "2028480"
  },
  {
    "text": "against sshd we initial we initially faced three problems the house of the Mind requires us to store a pointer to",
    "start": "2028480",
    "end": "2033799"
  },
  {
    "text": "our fake Arena right here in the Heap but we are able to store attacker controlled data uh at such a high",
    "start": "2033799",
    "end": "2039919"
  },
  {
    "text": "address because sshd calls Pam start at the very beginning of the user authentication we do not control",
    "start": "2039919",
    "end": "2045200"
  },
  {
    "text": "anything except the username itself luckily a username of length 128",
    "start": "2045200",
    "end": "2051560"
  },
  {
    "text": "KB who's who's allowing that well there's your problem uh shorter than the",
    "start": "2062359",
    "end": "2069079"
  },
  {
    "text": "default M mmap threshold allows us to store our own data at this address the",
    "start": "2069079",
    "end": "2074480"
  },
  {
    "text": "size of the field of our fake non-main area chunk must not be too large to pass free security checks I.E it must contain",
    "start": "2074480",
    "end": "2081240"
  },
  {
    "text": "null bites but are long oh yeah you contain null bites to like think that there's nothing left in the string but",
    "start": "2081240",
    "end": "2087158"
  },
  {
    "text": "our long username is null terminated string that cannot contain null bites luckily we remember that Pam free",
    "start": "2087159",
    "end": "2092520"
  },
  {
    "text": "handlers auxiliary zero the structure uh that it frees yes yes right here here we",
    "start": "2092520",
    "end": "2098800"
  },
  {
    "text": "remember reading that one okay yeah yeah yeah yeah yeah yeah we therefore Patch the size field of our fake chunk with",
    "start": "2098800",
    "end": "2104960"
  },
  {
    "text": "the uh with such a memet zero and only then free it we must let's see wow okay",
    "start": "2104960",
    "end": "2111200"
  },
  {
    "text": "I'm perplexed at this point of what they're doing and now I can't I can't",
    "start": "2111200",
    "end": "2116480"
  },
  {
    "text": "understand what's happening so during the initialization they set up a a fake memory Arena by overriding the username",
    "start": "2116480",
    "end": "2123920"
  },
  {
    "text": "due to the hard requirement of the threshold and then somehow they get it",
    "start": "2123920",
    "end": "2130680"
  },
  {
    "text": "to point in there in which then they can actually make it so that it looks like it's been faked and then they can Zer",
    "start": "2130680",
    "end": "2135839"
  },
  {
    "text": "out specific parts to make it so that this one doesn't acally erase into stuff",
    "start": "2135839",
    "end": "2141520"
  },
  {
    "text": "they don't want to erase into we must survive several calls to free right here",
    "start": "2141520",
    "end": "2146680"
  },
  {
    "text": "and above before free of our fake non-main area Chunk we transform these frees into no Ops by pointing them to",
    "start": "2146680",
    "end": "2152319"
  },
  {
    "text": "fake is is mapped chunks free calls munmap chunk which call calls mmap which",
    "start": "2152319",
    "end": "2158680"
  },
  {
    "text": "fails because these these fake is mapped chunks are misaligned effectively and no op because assertion failures are not",
    "start": "2158680",
    "end": "2165359"
  },
  {
    "text": "enforced in this ubuntu's",
    "start": "2165359",
    "end": "2169680"
  },
  {
    "text": "GBC yeah fix user name can be no longer than 50 characters and shut the hell up",
    "start": "2171440",
    "end": "2176839"
  },
  {
    "text": "uh finally our long username allows us to control the potentially uninitialized next field of the 20 different",
    "start": "2176839",
    "end": "2182599"
  },
  {
    "text": "structures although leftovers from temporary copies for a long username because Pam start calls Pam ad Handler",
    "start": "2182599",
    "end": "2189480"
  },
  {
    "text": "multiple times I.E our large race window contains 20 small race Windows timing",
    "start": "2189480",
    "end": "2195400"
  },
  {
    "text": "the same tricks they used before the interruptor Divide us I can tell what kind of band The interruptor is based on",
    "start": "2195400",
    "end": "2202280"
  },
  {
    "text": "these little quotes okay I'm getting I'm getting definitely some Anti Flag Vibes going on right",
    "start": "2202280",
    "end": "2209480"
  },
  {
    "text": "now uh for this attack against you the definitely a punk rock band I would say the interrupts have to be a punk rock",
    "start": "2209480",
    "end": "2216200"
  },
  {
    "text": "punk rock band at this point just based on this some 70s 80s punk rock band how",
    "start": "2216200",
    "end": "2221720"
  },
  {
    "text": "do people find this depression Anti Flag yeah SCA Punk yeah",
    "start": "2221720",
    "end": "2228000"
  },
  {
    "text": "he is literally showing you yeah looks like an indie band okay could be Indie yeah I could see that for this attack",
    "start": "2228000",
    "end": "2234079"
  },
  {
    "text": "against Ubuntu 606 wow that's an that's old ass Ubuntu we simply reused the timing strategy we used against Debian",
    "start": "2234079",
    "end": "2240599"
  },
  {
    "text": "30 R6 it takes a 10,000 tries on average to win this race condition with 10 connections so that's 1 to two days okay",
    "start": "2240599",
    "end": "2247560"
  },
  {
    "text": "okay note because of this Ubuntu uh GBC always takes a mandatory lock when entering a function of Malik family an",
    "start": "2247560",
    "end": "2254240"
  },
  {
    "text": "unlucky attack or might deadlock all 10 Max startup connections before obtaining a root shell we have not tried to work",
    "start": "2254240",
    "end": "2260800"
  },
  {
    "text": "around this problem because our ultimate goal was to exploit modern open SSH anyways okay good next section so this",
    "start": "2260800",
    "end": "2268599"
  },
  {
    "text": "is modern SSH right this is okay so now we're on to Modern now that you're ready take the",
    "start": "2268599",
    "end": "2275640"
  },
  {
    "text": "Demon's head on let's go let's go interrupter what a quote what a quote",
    "start": "2275640",
    "end": "2280839"
  },
  {
    "text": "the signal alarm Handler to this SSH version does not call packet closed nor Pam end in fact it only calls one",
    "start": "2280839",
    "end": "2286359"
  },
  {
    "text": "interesting function CIS log Sig die SSH remote IP add Port oh it is this is this",
    "start": "2286359",
    "end": "2293280"
  },
  {
    "text": "SSH remote IP Adder the same one of node IP do they not know there's an S the cve",
    "start": "2293280",
    "end": "2299119"
  },
  {
    "text": "against it shut up don't worry I'm just being stupid um all right we got some code let's see sigai is a def don't you",
    "start": "2299119",
    "end": "2306319"
  },
  {
    "text": "just love macros can we all agree macros are just beautiful all",
    "start": "2306319",
    "end": "2311920"
  },
  {
    "text": "right let's see Sig SSH Sig die uh con Char file const Char function line show",
    "start": "2311920",
    "end": "2317800"
  },
  {
    "text": "function all this kind of stuff then we do a little log right here beautiful okay that just grabs a bunch of these magic macro values let's go uh SSH login",
    "start": "2317800",
    "end": "2324880"
  },
  {
    "text": "right here uh for those that don't know when you compile your pre-processor",
    "start": "2324880",
    "end": "2330119"
  },
  {
    "text": "Macros get turned into code underscore underscore file underscore underscore then gets turned into the literal file",
    "start": "2330119",
    "end": "2336119"
  },
  {
    "text": "uh file name right and Funk gets turned into literal function name line gets turned into literal line number",
    "start": "2336119",
    "end": "2341960"
  },
  {
    "text": "right he's being I hope he's being sarcastic macros are evil no macros are actually evil I I know very little about",
    "start": "2341960",
    "end": "2348800"
  },
  {
    "text": "them because they are just they they're gosh darn dang evil right they are difficult to deal with uh we're going to",
    "start": "2348800",
    "end": "2355200"
  },
  {
    "text": "do some log we're going to do some logs let's do some logs so we got this thing going on here with the format buff okay",
    "start": "2355200",
    "end": "2361880"
  },
  {
    "text": "our two key questions are does the CIS log of this Debian uh gpsy to 236 call",
    "start": "2361880",
    "end": "2368359"
  },
  {
    "text": "async signal unsafe functions as such as Malik and free and if yes does this",
    "start": "2368359",
    "end": "2373680"
  },
  {
    "text": "glibc still take a mandatory lock when entering the functions of the Malo family luckily for us attackers the",
    "start": "2373680",
    "end": "2380000"
  },
  {
    "text": "answer to our first question is yes if and only if the CIS log and size sigal arm Handler is the very first call to",
    "start": "2380000",
    "end": "2386480"
  },
  {
    "text": "CIS log then local time 64r which is called by CIS log calls Malik 304 to",
    "start": "2386480",
    "end": "2392400"
  },
  {
    "text": "allocate a file structure at line 166 and then calls Malik two to the 12 to",
    "start": "2392400",
    "end": "2398280"
  },
  {
    "text": "allocate the internal read buffer at line 186 let's go we got two malx let's",
    "start": "2398280",
    "end": "2403920"
  },
  {
    "text": "go local time R man I've never been more scared of malx now in my entire lifetime",
    "start": "2403920",
    "end": "2409839"
  },
  {
    "text": "oh my gosh all right so we got our local time R we get this thing a TZ convert which does this TZ set internal uh TZ",
    "start": "2409839",
    "end": "2416720"
  },
  {
    "text": "set internal does this TZ uh TZ file read TZ file read does an F open file",
    "start": "2416720",
    "end": "2422319"
  },
  {
    "text": "rce let's go um all right there we go note because we do not control anything",
    "start": "2422319",
    "end": "2427960"
  },
  {
    "text": "about malic uh dude I love that malic uh nor their order uh not let's see not",
    "start": "2427960",
    "end": "2434480"
  },
  {
    "text": "their order not their size nor our contents we took rce at line 166 as a much needed good",
    "start": "2434480",
    "end": "2441640"
  },
  {
    "text": "omen dude sometimes fate is too nice sometimes fate is just beautiful right",
    "start": "2442720",
    "end": "2450119"
  },
  {
    "text": "it just it you can't even you can't even believe it and luckily for us the answer",
    "start": "2450119",
    "end": "2455400"
  },
  {
    "text": "to our second question is no since October 2017 the gpsy malic functions do",
    "start": "2455400",
    "end": "2460720"
  },
  {
    "text": "not take any lock anymore since single threaded uh when single threaded like sshd so it's a re-entrant bug is that is",
    "start": "2460720",
    "end": "2467000"
  },
  {
    "text": "that is that what that says to me due to the fact that it's due to the fact that it's single threaded it makes the",
    "start": "2467000",
    "end": "2473160"
  },
  {
    "text": "assumption that it can effectively not be um interrupted or you can't have re-entrancy and since you can't have",
    "start": "2473160",
    "end": "2479800"
  },
  {
    "text": "re-entrancy you can use an interrupt to effectively create re-entrancy",
    "start": "2479800",
    "end": "2485280"
  },
  {
    "text": "for those that don't know what re-entrance is uh it's a it's a it means that your function effectively can be",
    "start": "2485280",
    "end": "2491280"
  },
  {
    "text": "called while executing right so you can imagine you have Foo and Fu has a bunch",
    "start": "2491280",
    "end": "2496640"
  },
  {
    "text": "of code that has things being called and somewhere within Fu recalls Foo and if",
    "start": "2496640",
    "end": "2502560"
  },
  {
    "text": "you're so recursion is re-entered effectively uh but if you set up state",
    "start": "2502560",
    "end": "2508839"
  },
  {
    "text": "right so Foo at the very very top sets up a bunch of state that needs to be unset at the bottom effectively you have",
    "start": "2508839",
    "end": "2515119"
  },
  {
    "text": "code up here and then you have a defer statement if if you will if this was Zig or go you a defer statement which needs",
    "start": "2515119",
    "end": "2520480"
  },
  {
    "text": "to be executed at the end you could imagine that an interrupt would pause right here no defer would be executed",
    "start": "2520480",
    "end": "2527119"
  },
  {
    "text": "and then you could re-enter into Fu thus clobbering your setup so that's called re-entrance right a re-entrance problem",
    "start": "2527119",
    "end": "2533520"
  },
  {
    "text": "is that okay wow I didn't know I didn't dude none of this this stuff is all completely new to",
    "start": "2533520",
    "end": "2540440"
  },
  {
    "text": "me except for like the basic ideas the basic ideas I I understand moreover this deban verion suffers from the aslr",
    "start": "2540440",
    "end": "2546480"
  },
  {
    "text": "weakness described in the following great blog post by Justin Miller and Maas Krauss respectively all right",
    "start": "2546480",
    "end": "2552599"
  },
  {
    "text": "they're right here uh tool chain necromancy past mistakes Haunting aslr concretely in this case sshd on I uh i38",
    "start": "2552599",
    "end": "2560640"
  },
  {
    "text": "uh i386 gosh I can't even read anymore too much reading today I can feel the dyslexia really",
    "start": "2560640",
    "end": "2568280"
  },
  {
    "text": "starting to want to come out I'm refusing it uh re-entry is that other processes can fub our registers that are",
    "start": "2568280",
    "end": "2574480"
  },
  {
    "text": "uh that aren't saved during interrupts yep concretely in the case of sshd I uh i386",
    "start": "2574480",
    "end": "2582079"
  },
  {
    "text": "every memory mapping is randomized normally sshd is pi the Heap most libraries the stack but uh glibc itself",
    "start": "2582079",
    "end": "2590400"
  },
  {
    "text": "is always mapped to either the address this or at this in other words we can",
    "start": "2590400",
    "end": "2595760"
  },
  {
    "text": "correctly guess gipsy's address half the time a small price to pay for defeating",
    "start": "2595760",
    "end": "2600839"
  },
  {
    "text": "aslr in our exploit we assume that gpsy is mapped to address this because it is slightly more common than that",
    "start": "2600839",
    "end": "2609119"
  },
  {
    "text": "our next question is which code paths inside gli's Malik function if interrupted by Sig arm at the right time",
    "start": "2609760",
    "end": "2615160"
  },
  {
    "text": "leave the Heap in an inconsistent State exploitable during one of the Malik calls inside of Sig arm Handler we found",
    "start": "2615160",
    "end": "2620680"
  },
  {
    "text": "several interesting and surprising code paths but the one we CHS involves only relative sizes not absolute addresses",
    "start": "2620680",
    "end": "2627160"
  },
  {
    "text": "unlike various code paths inside unlink chunk for example the difference might prove crucial for our future amd64",
    "start": "2627160",
    "end": "2634359"
  },
  {
    "text": "exploit this code path inside Malik splits a large free chunk victim into",
    "start": "2634359",
    "end": "2639640"
  },
  {
    "text": "two smaller chunks the first chunk is returned to malx caller at line this and the second chunk remainder is linked",
    "start": "2639640",
    "end": "2646200"
  },
  {
    "text": "into an unsorted list of free chunks okay so this is the back forward",
    "start": "2646200",
    "end": "2651559"
  },
  {
    "text": "this is the doubly linked list Arena whatever allocation something something something we're looking at we're looking at Malik time all right in int Malik",
    "start": "2651559",
    "end": "2659160"
  },
  {
    "text": "let's go uh if this code path is interrupted by Sig alarm after line 4327",
    "start": "2659160",
    "end": "2665640"
  },
  {
    "text": "so let's look at 4327 so when we set the remainder we've set the we've set the uh back and forth to be pointing to the",
    "start": "2665640",
    "end": "2671760"
  },
  {
    "text": "same thing but before three uh",
    "start": "2671760",
    "end": "2677839"
  },
  {
    "text": "4339 which sets the head uh then the remainder chunk of this",
    "start": "2677839",
    "end": "2682920"
  },
  {
    "text": "split is already linked into the unsorted list of free chunks lying right here but its size field M chunk is not",
    "start": "2682920",
    "end": "2689319"
  },
  {
    "text": "yet initialized if we're able to control its size field through leftovers from previous Heap allocations then we can",
    "start": "2689319",
    "end": "2695280"
  },
  {
    "text": "make this remainder chunk larger and overlap with other chunks and therefore corrupt Heap memory when this enlarged",
    "start": "2695280",
    "end": "2701440"
  },
  {
    "text": "overlapping remainder chunk is eventually maloc and written two inside Sig arm",
    "start": "2701440",
    "end": "2706880"
  },
  {
    "text": "Handler let's",
    "start": "2706880",
    "end": "2711318"
  },
  {
    "text": "go our last question then is given that we do not control anything by the way Matt I am reading your you I hope you",
    "start": "2712040",
    "end": "2718680"
  },
  {
    "text": "guys know I do read chat this is the evil uh Heap allocation",
    "start": "2718680",
    "end": "2724079"
  },
  {
    "text": "fragmentation engine yeah this is wild this it makes perfect sense I just can't",
    "start": "2724079",
    "end": "2729599"
  },
  {
    "text": "believe someone can do this like right like it makes sense from a theoretical standpoint but from a practical standpoint this seems effectively",
    "start": "2729599",
    "end": "2736559"
  },
  {
    "text": "impossible in my head our last especially since you get a chance once every 120 seconds which just",
    "start": "2736559",
    "end": "2744280"
  },
  {
    "text": "seems crazy our last question then is given that we do not control anything about",
    "start": "2744280",
    "end": "2750640"
  },
  {
    "text": "Malak calls inside of Sig arm Handler what can we overwrite in the Heap uh to achieve arbitrary code execution before",
    "start": "2750640",
    "end": "2756559"
  },
  {
    "text": "SSA HD calls exit because TZ file read inside of CLE arm Handler malates a file",
    "start": "2756559",
    "end": "2762440"
  },
  {
    "text": "structure in the Heap at line 166 and because file structures have a long history of abuse for arbitrary code",
    "start": "2762440",
    "end": "2767880"
  },
  {
    "text": "execution we decided to aim our Heap corruption at this file structure this is however easier said than done just",
    "start": "2767880",
    "end": "2774599"
  },
  {
    "text": "like the rest of this article uh our Heap corruption is very limited and the file structure has been significantly",
    "start": "2774599",
    "end": "2779960"
  },
  {
    "text": "hardened over the years by IO validate vtables and pointer demangle for example",
    "start": "2779960",
    "end": "2785440"
  },
  {
    "text": "eventually we devis the following technique which seems to be specific to the I uh the i386 gpy the amd4 amd64 gpy",
    "start": "2785440",
    "end": "2794040"
  },
  {
    "text": "does not seem to use vable offset at all with our limited Heap corruption we overwrite the vtable offset field a",
    "start": "2794040",
    "end": "2800200"
  },
  {
    "text": "single signed Char of the TZ file read structure the gpsy liio functions will",
    "start": "2800200",
    "end": "2805839"
  },
  {
    "text": "therefore look for this file structure vtable pointer a pointer to an array of function pointers at a nonzero offset",
    "start": "2805839",
    "end": "2813040"
  },
  {
    "text": "our overr overwritten vtable offset instead of the default Z",
    "start": "2813040",
    "end": "2818280"
  },
  {
    "text": "offset nice so they offset it into their own little beautiful code and then they",
    "start": "2818280",
    "end": "2824200"
  },
  {
    "text": "let that be executed absolutely brilliant we we attackers can easily",
    "start": "2824200",
    "end": "2831240"
  },
  {
    "text": "control this fake vtable pointers through leftovers from previous Heap allocations because the file structure around this offset is not explicitly",
    "start": "2831240",
    "end": "2837480"
  },
  {
    "text": "initialized by fopen to pass the glips security checks our fake vtable pointer must Point somewhere into the uh libc IO",
    "start": "2837480",
    "end": "2844880"
  },
  {
    "text": "table section we decided to pointed to the V table for wide character streams IO W file jumps I.E that exact number we",
    "start": "2844880",
    "end": "2854319"
  },
  {
    "text": "uh we assume that the gpsy is mapped to this address right here okay yep yep as a result F read unlocked at line 186",
    "start": "2854319",
    "end": "2862160"
  },
  {
    "text": "calls the F the io wri underflow instead of IO instead of underscore IO file",
    "start": "2862160",
    "end": "2868520"
  },
  {
    "text": "underflow which calls a function pointer function control I that's how I've always read it fun function uh that",
    "start": "2868520",
    "end": "2875760"
  },
  {
    "text": "basically comes from the structure whose pointer code CVT is yet another field in",
    "start": "2875760",
    "end": "2880839"
  },
  {
    "text": "the file structure we attackers can easily control this uh code CVT pointer through",
    "start": "2880839",
    "end": "2888040"
  },
  {
    "text": "leftovers from previous Heap allocations I like they use the word easily uh because this field is also a file",
    "start": "2888040",
    "end": "2893680"
  },
  {
    "text": "structure is not explicitly initialized by fopen which also allows us to control the function function",
    "start": "2893680",
    "end": "2901160"
  },
  {
    "text": "pointer okay okay so this must be pointing into the above I assume their",
    "start": "2901160",
    "end": "2908440"
  },
  {
    "text": "name space the 128k of name space they are able to have their own code passed into that and that's what's happening in",
    "start": "2908440",
    "end": "2913920"
  },
  {
    "text": "summary by overwriting a single bite vtable offset of the file structure maloc by fopen we can call our own uh",
    "start": "2913920",
    "end": "2919800"
  },
  {
    "text": "function function pointer and execute arbitrary code during uh freed unlock",
    "start": "2919800",
    "end": "2925880"
  },
  {
    "text": "practice I wanted it perfect no wrinkles in it okay yeah yeah to mount this uh to mount this attack against sshd",
    "start": "2925880",
    "end": "2932440"
  },
  {
    "text": "privileged child let us first imagine the following Heap layout oh we're getting into the juice now this is the",
    "start": "2932440",
    "end": "2938160"
  },
  {
    "text": "juice let's go this is going to be a good one the X's are barrier chunks that allow us to make holes in the Heap for",
    "start": "2938160",
    "end": "2944520"
  },
  {
    "text": "example small memory leaked chunks all right shortly before sshd",
    "start": "2944520",
    "end": "2951760"
  },
  {
    "text": "receives the Sig alarm we mated a 4K uh chunk that splits uh the large AK KB",
    "start": "2951760",
    "end": "2957280"
  },
  {
    "text": "chunks into two smaller chunks all right so they're messing with Malik at this point if this uh but if this Malo is",
    "start": "2957280",
    "end": "2965119"
  },
  {
    "text": "interrupted by Sig alarm after line 43 but before this line then the remainder chunk of this split is already linked",
    "start": "2965119",
    "end": "2971880"
  },
  {
    "text": "into the unsorted list of free chunks but its size field is under our control through leftovers of the previous Heap",
    "start": "2971880",
    "end": "2977880"
  },
  {
    "text": "allocations and is artificially enlarged to the remainder of the chunks I know a lot of men that would be",
    "start": "2977880",
    "end": "2983599"
  },
  {
    "text": "very happy if they could be artificially enlarged all right so this that is cool so they get one large chunk they",
    "start": "2983599",
    "end": "2990280"
  },
  {
    "text": "actually get a real remainder chunk and then artificially increase this to exceed over into the small hole",
    "start": "2990280",
    "end": "2997880"
  },
  {
    "text": "okay okay when Sig alarm handle calls Cy log and hence TZ file read F open",
    "start": "2998960",
    "end": "3004680"
  },
  {
    "text": "malates the small hole for its file structure and f f read unlock malates",
    "start": "3004680",
    "end": "3010599"
  },
  {
    "text": "the 4K uh read buffer thereby splitting the enlarged remainder chunk into two the 4K read buffer and small remainder",
    "start": "3010599",
    "end": "3017640"
  },
  {
    "text": "chunk there's the file offset right there look at that there's the hole like",
    "start": "3017640",
    "end": "3024440"
  },
  {
    "text": "that's the separation so they separate past the separ and they're able to go into the next one we therefore override",
    "start": "3024440",
    "end": "3029480"
  },
  {
    "text": "parts of the file structure with our internal header of this small remainder chunk more precisely we override the",
    "start": "3029480",
    "end": "3034760"
  },
  {
    "text": "files V table offset with the third bite of the header's Back Field which is a pointer to an unsorted list of free",
    "start": "3034760",
    "end": "3040599"
  },
  {
    "text": "chunks right here yeah then as we explained in the theory section freed",
    "start": "3040599",
    "end": "3046040"
  },
  {
    "text": "unlock calls IO uh WF or W file underflow instead of IO underflow yep",
    "start": "3046040",
    "end": "3052799"
  },
  {
    "text": "which calls our own function function pointer through our own code CV PT pointer and executes arbitrary code note",
    "start": "3052799",
    "end": "3059760"
  },
  {
    "text": "we have not yet explained how reliable go uh how reliably go from controlled this pointer to controlled function",
    "start": "3059760",
    "end": "3065839"
  },
  {
    "text": "pointer we will do so but we must first solve the more pressing problem nonzero value skill issues dude",
    "start": "3065839",
    "end": "3073319"
  },
  {
    "text": "this the skill issue in this is so incredible it's incredible uh indeed we",
    "start": "3073319",
    "end": "3080160"
  },
  {
    "text": "learned from our work an older SSH version that we will uh never win this signal Handler race condition if our",
    "start": "3080160",
    "end": "3085920"
  },
  {
    "text": "large race WI window contains only one small race window yeah I well I mean you would probably win but the I'd assume",
    "start": "3085920",
    "end": "3091839"
  },
  {
    "text": "that the the chance of winning is so large that it's impractical so if we went like what he's saying there is that",
    "start": "3091839",
    "end": "3097359"
  },
  {
    "text": "if you remember the very beginning one they had a single call that they were trying to uh break into a single line or",
    "start": "3097359",
    "end": "3104040"
  },
  {
    "text": "a single couple lines that they were trying to break into but they realized if they used a different spot they could get up to 24 of these same",
    "start": "3104040",
    "end": "3110640"
  },
  {
    "text": "calls that happened over a larger race window so that they had this exploitable window which was much larger",
    "start": "3110640",
    "end": "3117359"
  },
  {
    "text": "compared to much smaller and if this took approximately 10,000 times which takes one to two days",
    "start": "3117359",
    "end": "3123680"
  },
  {
    "text": "theoretically you could say this would take 240,000 times or in other words like you know",
    "start": "3123680",
    "end": "3129240"
  },
  {
    "text": "one to two months you would assume that this could",
    "start": "3129240",
    "end": "3135000"
  },
  {
    "text": "theoretically at some point be exploitable it's just so much larger and if this thing has a default",
    "start": "3135000",
    "end": "3141599"
  },
  {
    "text": "600 second timeout then this thing is like a year before you can get to it",
    "start": "3141599",
    "end": "3148520"
  },
  {
    "text": "the last packet that we should uh by the way that's also statistics statistics have no bearing into reality in some",
    "start": "3148559",
    "end": "3154520"
  },
  {
    "text": "sense just because it's supposed to be one to two months does not mean it wouldn't take six months",
    "start": "3154520",
    "end": "3160200"
  },
  {
    "text": "right it's it's the funny thing about statistics when somebody says one in a million it does not mean one in a",
    "start": "3160200",
    "end": "3167200"
  },
  {
    "text": "million right it's just that's that's just never what that actually means right I know people say this all",
    "start": "3167200",
    "end": "3175240"
  },
  {
    "text": "the time and your head thinks of that way but that doesn't mean it's",
    "start": "3175240",
    "end": "3181000"
  },
  {
    "text": "real it's just not how you math but people's brain thinks like that so you're saying there's a chance yes uh",
    "start": "3181160",
    "end": "3189000"
  },
  {
    "text": "all right let's look at this the last packet we send uh into sshd shortly before the delivery of the sigal arm",
    "start": "3189000",
    "end": "3194720"
  },
  {
    "text": "this would be like the last bite right of the de encryption right forces sshd to perform the following sequence of",
    "start": "3194720",
    "end": "3200720"
  },
  {
    "text": "Malik Malik 4K Malik 304 Malik 4K Malik 304 Etc our first uh 4K splits uh the",
    "start": "3200720",
    "end": "3208520"
  },
  {
    "text": "large hole one into two uh if this first split is interrupted by Sig arm at the right time then the F open inside SIG",
    "start": "3208520",
    "end": "3215480"
  },
  {
    "text": "arms Handler malates the small hole one for the file structure and we have achieved arbitrary code execution as",
    "start": "3215480",
    "end": "3221240"
  },
  {
    "text": "explained above if not then we maloc the small hole ourselves uh with our first Malo 30 uh 304 then our second maloc of",
    "start": "3221240",
    "end": "3229960"
  },
  {
    "text": "4K splits two larger holes into two if this second split is interrupted by Sig alarm at the right time then F open",
    "start": "3229960",
    "end": "3236040"
  },
  {
    "text": "inside of Sig arm malates the small hole too for its file structure and we have achieved arbitrary code execution wow if",
    "start": "3236040",
    "end": "3242520"
  },
  {
    "text": "not then we malate the small hole our small hole tool ourselves with our second malach 304 we are able to make 27",
    "start": "3242520",
    "end": "3249920"
  },
  {
    "text": "pairs of such large and small holes into ssht Heap 28 would exceed packet uh Max",
    "start": "3249920",
    "end": "3255079"
  },
  {
    "text": "size of 256 KB our large race window now contains 27 small race Windows achieving",
    "start": "3255079",
    "end": "3261400"
  },
  {
    "text": "this complex Heap layout was extremely painful and timec consuming",
    "start": "3261400",
    "end": "3267319"
  },
  {
    "text": "writing about it feels extremely painful I",
    "start": "3267319",
    "end": "3273359"
  },
  {
    "text": "cannot imagine writing the thing itself uh but the two highlights are we abuse s's public key Parson code to",
    "start": "3273359",
    "end": "3280520"
  },
  {
    "text": "perform arbitrary sequences of malx and free calls yep uh C parse right here all right it",
    "start": "3280520",
    "end": "3288359"
  },
  {
    "text": "must be in which one uh SE free yep so we where's the CT free right there okay",
    "start": "3288359",
    "end": "3293559"
  },
  {
    "text": "yeah yeah we were unable to find memory leaks for our small chunks instead we used tach chunks which are never really",
    "start": "3293559",
    "end": "3299960"
  },
  {
    "text": "freed because their inuse bit is never cleared to makeshift barrier chunks to reliably achieve this Heap",
    "start": "3299960",
    "end": "3307319"
  },
  {
    "text": "layout we sent five different public key packets to sshd packets a uh to D can be",
    "start": "3307319",
    "end": "3313040"
  },
  {
    "text": "sent long before Sig alarm most of packet e can also be sent long before Sig alarm but its very last bite must be",
    "start": "3313040",
    "end": "3319000"
  },
  {
    "text": "sent at the very last moment okay there we go a we maloc and freed a variety of teach chunks to ensure that the Heap",
    "start": "3319000",
    "end": "3325440"
  },
  {
    "text": "allocations we that we do not control end up in these tcache chunks and we do not interfere with our carefully crafted",
    "start": "3325440",
    "end": "3332079"
  },
  {
    "text": "lay Heap layout B we malate in free chunks of various sizes to make our 27 pairs of large and small holes and",
    "start": "3332079",
    "end": "3338480"
  },
  {
    "text": "corresponding barrier chunks C we maloc and freed four cage uh four 4 kilobyte",
    "start": "3338480",
    "end": "3343680"
  },
  {
    "text": "chunks and 320 byte chunks too right the fake header to the large size field and our potentially en llarge remainder",
    "start": "3343680",
    "end": "3349720"
  },
  {
    "text": "chunk into the middle of our large holes write our fake footer into the potentially enlarged remainder chunk to",
    "start": "3349720",
    "end": "3355160"
  },
  {
    "text": "the uh end of our small holes to pass the gpsy security checks we write our fake V table and code CVT pointers uh",
    "start": "3355160",
    "end": "3362160"
  },
  {
    "text": "into the small holes which are potentially file structures D we maloc and freed one very large string nearly",
    "start": "3362160",
    "end": "3367760"
  },
  {
    "text": "256 KBS to ensure that our large and small holes are removed from the unsorted list of free chunks and placed",
    "start": "3367760",
    "end": "3374200"
  },
  {
    "text": "into their respective Malik bins e we force sshd to perform our",
    "start": "3374200",
    "end": "3379480"
  },
  {
    "text": "final sequence of malic calls right here to open our 27 small race windows",
    "start": "3379480",
    "end": "3388119"
  },
  {
    "text": "good good goodness gracious man ATT tenative readers may",
    "start": "3388160",
    "end": "3394920"
  },
  {
    "text": "have noticed that we still have not addressed literally and figuratively the problem of yes in fact code a CVT is a",
    "start": "3394920",
    "end": "3400839"
  },
  {
    "text": "pointer to a structure IO uh is it IO convert that contains a pointer to a structure a g convert step that uh",
    "start": "3400839",
    "end": "3408799"
  },
  {
    "text": "contains the function uh pointer that allows us to execute arbitrary code to reliably Control Function through uh",
    "start": "3408799",
    "end": "3415000"
  },
  {
    "text": "code convert we simply L Point code convert to one of the libg Malik bins which conveniently contain a pointer to",
    "start": "3415000",
    "end": "3420760"
  },
  {
    "text": "one of our free chunks uh in the Heap which contains our own function function pointer to arbitrary gpsy code all of",
    "start": "3420760",
    "end": "3427839"
  },
  {
    "text": "these gpsy addresses are known to us because we assume that gpsy is mapped to this",
    "start": "3427839",
    "end": "3433200"
  },
  {
    "text": "address let's go let's go so this is how it does it yeah this",
    "start": "3433200",
    "end": "3439200"
  },
  {
    "text": "is the one that I mean this is the one they save to the end the the the the very ending like you said like it like",
    "start": "3439200",
    "end": "3445680"
  },
  {
    "text": "that guy said all right timing we are running out of time the interrupts as we live uh as we",
    "start": "3445680",
    "end": "3452440"
  },
  {
    "text": "implement this third exploit it it became clear that we could not simply reuse the timing strategy that we had used against uh two older s open SSH",
    "start": "3452440",
    "end": "3459839"
  },
  {
    "text": "versions We were never winning this new race condition eventually we understood why it takes a long time 10 milliseconds",
    "start": "3459839",
    "end": "3466240"
  },
  {
    "text": "for sshd to parse our fifth and last public key yeah because it's okay yeah",
    "start": "3466240",
    "end": "3471440"
  },
  {
    "text": "in other words our large race window is too large our 27 small race windows are like needles in a hay stack the user",
    "start": "3471440",
    "end": "3478200"
  },
  {
    "text": "specified delay that was introduced uh recently open SSH 7.8 uh P1 delays sshd",
    "start": "3478200",
    "end": "3485839"
  },
  {
    "text": "responds to our last public key packet by up to 9 milliseconds and therefore destroys our feedback based timing",
    "start": "3485839",
    "end": "3491720"
  },
  {
    "text": "strategy as a result we developed a completely different timing strategy from time to time we send our last",
    "start": "3491720",
    "end": "3497200"
  },
  {
    "text": "public key packet with a little mistake that produces an error response okay right before the call to SSH key from",
    "start": "3497200",
    "end": "3504039"
  },
  {
    "text": "blob that uh that parses our public key from time to time we send our last public key packet with another little",
    "start": "3504039",
    "end": "3509559"
  },
  {
    "text": "mistake that produces an error response right here right after the call to SSH key from blad that parses out our public",
    "start": "3509559",
    "end": "3515559"
  },
  {
    "text": "key the difference between those two response times is the time that it takes for the sshd to parse the our last",
    "start": "3515559",
    "end": "3522559"
  },
  {
    "text": "public key and this allows us to precisely time the transmission of our last packet to ensure that sshd has time",
    "start": "3522559",
    "end": "3528720"
  },
  {
    "text": "to parse our public key in the unprivileged child and then send it to the privileged child and start uh to parse it uh there let's see before we",
    "start": "3528720",
    "end": "3536359"
  },
  {
    "text": "deliver the Sig alarm yep remember I I I believe I did I",
    "start": "3536359",
    "end": "3543960"
  },
  {
    "text": "did not too recently uh mention this whole problem you're going",
    "start": "3543960",
    "end": "3550000"
  },
  {
    "text": "to have this thing also fall into this this is good this is",
    "start": "3550000",
    "end": "3556480"
  },
  {
    "text": "great mention mentioned oh yeah we mentioned mentioned man this makes perfect sense oh my gosh so they're",
    "start": "3556480",
    "end": "3562000"
  },
  {
    "text": "actually using this as a timing since they could send a bad thing they would know exactly how long this takes and",
    "start": "3562000",
    "end": "3567520"
  },
  {
    "text": "they can kind of build up the the time these things",
    "start": "3567520",
    "end": "3571640"
  },
  {
    "text": "take dude C exploits are always nice dude they're they're brilliant with this change in Strat dude if they would have",
    "start": "3573520",
    "end": "3579319"
  },
  {
    "text": "just wrote this with JavaScript there would have been garbage collection and thus you would have never you would have added a sto stochastic nature to this",
    "start": "3579319",
    "end": "3586160"
  },
  {
    "text": "thus never being able to actually be exploited duh",
    "start": "3586160",
    "end": "3591520"
  },
  {
    "text": "forehead with this change in strategy it takes uh 10,000 tries on average to to win this race condition with 100",
    "start": "3591520",
    "end": "3597799"
  },
  {
    "text": "connections Max let's see Max accepted per 120 seconds login Grace time it takes 3 to 4 hours on average to win the",
    "start": "3597799",
    "end": "3604599"
  },
  {
    "text": "race condition in six to eight hours to obtain a remote route shell JS Heap spring mentioned",
    "start": "3604599",
    "end": "3614240"
  },
  {
    "text": "absolutely how about rust uh to let's see towards an AMD 64 exploit what's",
    "start": "3614599",
    "end": "3619920"
  },
  {
    "text": "your plan for tomorrow that's right take back the power this is such dude this",
    "start": "3619920",
    "end": "3625000"
  },
  {
    "text": "band this band is ridiculous uh we decided to",
    "start": "3625000",
    "end": "3630240"
  },
  {
    "text": "Target Rocky Linux everybody's favorite Linux everybody's favorite Linux Rocky",
    "start": "3630240",
    "end": "3635440"
  },
  {
    "text": "Linux uh a red hat Enterprise Linux 9 derivative by the way didn't Red Hat recently get Dunked",
    "start": "3635440",
    "end": "3642200"
  },
  {
    "text": "On by Oracle I'm correct on that",
    "start": "3642200",
    "end": "3648640"
  },
  {
    "text": "right yeah yeah yeah I am",
    "start": "3651119",
    "end": "3657920"
  },
  {
    "text": "yeah but they got dunked On by Oracle or is it IBM either way they got",
    "start": "3664880",
    "end": "3671680"
  },
  {
    "text": "dunked On by either IBM or Oracle I can't remember who owns Red Hat I think it's Oracle that owns Red Hat so it would have been IBM that does the",
    "start": "3671680",
    "end": "3677160"
  },
  {
    "text": "dunking but either way imagine getting Dunked On by either IBM or",
    "start": "3677160",
    "end": "3683279"
  },
  {
    "text": "Oracle it doesn't really matter which which one that you get dunked on okay IBM owns redhead okay so then Oracle did",
    "start": "3683920",
    "end": "3689799"
  },
  {
    "text": "the dunking okay so so Oracle did the dunking I was right in the to begin with okay but either",
    "start": "3689799",
    "end": "3696880"
  },
  {
    "text": "way imagine getting Dunked On by Oracle all right Rocky Linux it's open SSH",
    "start": "3696880",
    "end": "3703839"
  },
  {
    "text": "version uh uh 8.7 P1 is uh vulnerable to the signal Handler race condition and",
    "start": "3703839",
    "end": "3709160"
  },
  {
    "text": "it's lib gpsy is always mapped to the multiples of 2 megabytes because of aslr weakness discussed in the previous",
    "start": "3709160",
    "end": "3715039"
  },
  {
    "text": "Theory subsection which makes uh partial pointer overwrites much more powerful the CIS log function which is async",
    "start": "3715039",
    "end": "3721039"
  },
  {
    "text": "signal unsafe but is called by sshd Sig alarm Handler of the gpsy version 234",
    "start": "3721039",
    "end": "3726079"
  },
  {
    "text": "internally calls open mream which malates a file structure in the Heap which also calls calic and realic and",
    "start": "3726079",
    "end": "3732279"
  },
  {
    "text": "free which gives us much needed Freedom with the Heap corruption as a primitive two file structure maloc in the Heap and",
    "start": "3732279",
    "end": "3738799"
  },
  {
    "text": "21 fixed bits in the gpsy addresses we believe that the signal Handler race condition is exploitable on amd64",
    "start": "3738799",
    "end": "3745400"
  },
  {
    "text": "probably not in 68 hours but hopefully in less than one week only time will tell side note we rediscovered the",
    "start": "3745400",
    "end": "3751680"
  },
  {
    "text": "Ubuntu 2404 does not randomize the aslr of its sshd children it is randomized",
    "start": "3751680",
    "end": "3757440"
  },
  {
    "text": "only once at boot time we tracked this down uh to patch below which turns off the SD's re EXA flag this is generally a",
    "start": "3757440",
    "end": "3764760"
  },
  {
    "text": "bad idea but in the particular case of this signal Handler race condition it prevents sshd from being exploitable the",
    "start": "3764760",
    "end": "3770640"
  },
  {
    "text": "Cy log inside the Sig alarm Handler does not call any of the Malik functions because it is never the very first call",
    "start": "3770640",
    "end": "3776920"
  },
  {
    "text": "to CIS log defeated by lack of security let's go let's go the double",
    "start": "3776920",
    "end": "3784880"
  },
  {
    "text": "defeat going on here that's pretty cool patches in mitigation uh the storm has come and",
    "start": "3784880",
    "end": "3791640"
  },
  {
    "text": "gone the interrupts good things on June 6th 2024 the signal Handler race condition was fixed by a commit this uh",
    "start": "3791640",
    "end": "3798319"
  },
  {
    "text": "added to sd8 to penalized particular problematic client behaviors which moved the acing signal unsafe code from Sig",
    "start": "3798319",
    "end": "3804960"
  },
  {
    "text": "Sig D's Sig alarm Handler to Sig D's listener process where it can be handled",
    "start": "3804960",
    "end": "3810079"
  },
  {
    "text": "synchronously nice because this fix is a part of a large commit on top of an even larger defense in-depth commit start the",
    "start": "3810079",
    "end": "3817400"
  },
  {
    "text": "process of splitting sshd into separate binaries it might prove difficult the backport in that case the signal Handler",
    "start": "3817400",
    "end": "3823119"
  },
  {
    "text": "race condition itself can be fixed by removing the commented out async Handler unsafe code from the Sig the SSH Sig die",
    "start": "3823119",
    "end": "3830960"
  },
  {
    "text": "function so all you have to do all you have to do is just patched",
    "start": "3830960",
    "end": "3836359"
  },
  {
    "text": "open SSH just handroll your vendor and just uncommented it there we go uh finally if",
    "start": "3836359",
    "end": "3845119"
  },
  {
    "text": "sshd cannot be updated or recompiled the signal hand the signal Handler race condition can be fixed by simply setting",
    "start": "3845119",
    "end": "3851319"
  },
  {
    "text": "login Grace time to zero in the configuration file this makes sshd vulnerable to deal with the uh with",
    "start": "3851319",
    "end": "3857000"
  },
  {
    "text": "denial of service the exhaustion of all Mac startup connections but it makes it safe from the remote code execution",
    "start": "3857000",
    "end": "3863440"
  },
  {
    "text": "sucks to suck uh uh we thank op s's Developers for their outstanding work and close",
    "start": "3863440",
    "end": "3869000"
  },
  {
    "text": "collaboration on this release we also thank drro open wall finally for the dedic uh we dedicate this advisory to",
    "start": "3869000",
    "end": "3874520"
  },
  {
    "text": "Sophia D Anan I don't even know who that",
    "start": "3874520",
    "end": "3879720"
  },
  {
    "text": "is is this a famous person is it this is she passed away CEO of margin yeah yeah",
    "start": "3879720",
    "end": "3886799"
  },
  {
    "text": "she died from getting hit by an SUV dang dang that",
    "start": "3886799",
    "end": "3892920"
  },
  {
    "text": "sucks well there you go Sophia all right timeline uh we contacted open s's",
    "start": "3892920",
    "end": "3900000"
  },
  {
    "text": "developers successful iterations of the patches and Patch reviews followed we contacted drro open wall uh coordinated",
    "start": "3900000",
    "end": "3905640"
  },
  {
    "text": "release date let's go rip yeah dude rip",
    "start": "3905640",
    "end": "3912400"
  },
  {
    "text": "damn well that's nice that they have i d it's very sweet of them to do a nice little dedication like",
    "start": "3912400",
    "end": "3919400"
  },
  {
    "text": "that well dang that was a an incredible read and just an amazing walk through",
    "start": "3919400",
    "end": "3925319"
  },
  {
    "text": "you know whenever I read these things it it just highlights one exceptionally important thing how dumb I am that's what I feel",
    "start": "3925319",
    "end": "3932720"
  },
  {
    "text": "like you know I'm out here writing basic Network protocols doing asky and using",
    "start": "3932720",
    "end": "3939200"
  },
  {
    "text": "Zig and these people are hand rolling Heap configurations for Malik and offsetting into the sshd and trying to",
    "start": "3939200",
    "end": "3946319"
  },
  {
    "text": "time single bite packets to cause sick handlers to interrupt the free and Malik calls dang like I mean Mor of the story",
    "start": "3946319",
    "end": "3954079"
  },
  {
    "text": "Pamela is not to be trusted never trust Pam same here I'm so dumb dude it just makes me",
    "start": "3954079",
    "end": "3959760"
  },
  {
    "text": "have it just like we've been doing a lot of security reading Lately from poly",
    "start": "3959760",
    "end": "3966520"
  },
  {
    "text": "kill this last one with the the the um the distributed uh harassment of service",
    "start": "3966520",
    "end": "3973279"
  },
  {
    "text": "yeah a deos now I now you know how how we feel watching you program yeah yeah I'm very",
    "start": "3973279",
    "end": "3979720"
  },
  {
    "text": "fast at Vim maybe I understand this Vim different differentiation hey if pound me too dumb yeah I know pound me too",
    "start": "3979720",
    "end": "3986960"
  },
  {
    "text": "dumb oh [ __ ] you know I'm not sure flip if you can keep that one in you know",
    "start": "3986960",
    "end": "3992680"
  },
  {
    "text": "like what I really think about it this article was brunch for us key sheers this article was",
    "start": "3992680",
    "end": "3998480"
  },
  {
    "text": "brunch we just got brunched up pound you",
    "start": "3998480",
    "end": "4003799"
  },
  {
    "text": "to hey pound you to oh my gosh I guess",
    "start": "4003799",
    "end": "4008880"
  },
  {
    "text": "that's it take that leave it in or take it out flip up to you the name hi",
    "start": "4008880",
    "end": "4014000"
  },
  {
    "text": "YouTube a Jen",
    "start": "4014000",
    "end": "4017119"
  }
]