[
  {
    "text": "async rust is a bad language but to get",
    "start": "0",
    "end": "3179"
  },
  {
    "text": "at whatever the hell I mean by that we",
    "start": "3179",
    "end": "5279"
  },
  {
    "text": "need to talk about why asynchrust exists",
    "start": "5279",
    "end": "7440"
  },
  {
    "text": "in the first place let's talk about it",
    "start": "7440",
    "end": "8760"
  },
  {
    "text": "okay this is great I love this I already",
    "start": "8760",
    "end": "11040"
  },
  {
    "text": "love this starting off the conversation",
    "start": "11040",
    "end": "13259"
  },
  {
    "text": "giving us the proper context let's go",
    "start": "13259",
    "end": "15360"
  },
  {
    "text": "modern concurrency they're green they're",
    "start": "15360",
    "end": "17940"
  },
  {
    "text": "mean and they ate my machine I don't get",
    "start": "17940",
    "end": "20460"
  },
  {
    "text": "it and that guy's face doesn't look like",
    "start": "20460",
    "end": "22199"
  },
  {
    "text": "he wants to be here either suppose we",
    "start": "22199",
    "end": "24119"
  },
  {
    "text": "want our code to go fast we have two big",
    "start": "24119",
    "end": "25500"
  },
  {
    "text": "problems to solve we want to use the",
    "start": "25500",
    "end": "27300"
  },
  {
    "text": "whole computer code runs on CPUs and in",
    "start": "27300",
    "end": "29460"
  },
  {
    "text": "2023 even my phone has eight of the damn",
    "start": "29460",
    "end": "31740"
  },
  {
    "text": "things I got a new phone by the way look",
    "start": "31740",
    "end": "33840"
  },
  {
    "text": "at this sweet pixel 7. it's pretty neat",
    "start": "33840",
    "end": "36480"
  },
  {
    "text": "I no longer have a bright line down the",
    "start": "36480",
    "end": "38399"
  },
  {
    "text": "middle of my phone pretty cool huh if I",
    "start": "38399",
    "end": "40379"
  },
  {
    "text": "want to use more than 12 of my machine I",
    "start": "40379",
    "end": "42480"
  },
  {
    "text": "need several cores this is true even in",
    "start": "42480",
    "end": "44579"
  },
  {
    "text": "my some of my best attempts I still",
    "start": "44579",
    "end": "46140"
  },
  {
    "text": "can't get node to use 100 of the CPU",
    "start": "46140",
    "end": "48660"
  },
  {
    "text": "I've tried so hard to make it",
    "start": "48660",
    "end": "50820"
  },
  {
    "text": "just use ass CPU and I cannot make it uh",
    "start": "50820",
    "end": "55140"
  },
  {
    "text": "we want to keep uh working while we wait",
    "start": "55140",
    "end": "56940"
  },
  {
    "text": "for slow things to complete instead of",
    "start": "56940",
    "end": "58739"
  },
  {
    "text": "just twiddling our thumb sending a",
    "start": "58739",
    "end": "60239"
  },
  {
    "text": "message over the Internet or even",
    "start": "60239",
    "end": "61500"
  },
  {
    "text": "opening a file takes in eternities in",
    "start": "61500",
    "end": "64080"
  },
  {
    "text": "computer time we could literally do",
    "start": "64080",
    "end": "65700"
  },
  {
    "text": "millions of other things meanwhile very",
    "start": "65700",
    "end": "67860"
  },
  {
    "text": "fair and so on we turn our friends",
    "start": "67860",
    "end": "69500"
  },
  {
    "text": "parallelism and concurrency it's the",
    "start": "69500",
    "end": "72360"
  },
  {
    "text": "favorite hobby of Cs nerds to quibble",
    "start": "72360",
    "end": "73979"
  },
  {
    "text": "over distinctions between the two so to",
    "start": "73979",
    "end": "76080"
  },
  {
    "text": "oversimplify parallelism is about",
    "start": "76080",
    "end": "78600"
  },
  {
    "text": "running code in parallel on several CPUs",
    "start": "78600",
    "end": "81060"
  },
  {
    "text": "concurrency is about breaking a problem",
    "start": "81060",
    "end": "83100"
  },
  {
    "text": "into separate independent parts I'll",
    "start": "83100",
    "end": "85140"
  },
  {
    "text": "give my my take on it which is",
    "start": "85140",
    "end": "87360"
  },
  {
    "text": "parallelism is having machine",
    "start": "87360",
    "end": "89820"
  },
  {
    "text": "instructions executed simultaneously",
    "start": "89820",
    "end": "92479"
  },
  {
    "text": "concurrency is having tasks that do not",
    "start": "92479",
    "end": "96000"
  },
  {
    "text": "need CPU to move out of the way and",
    "start": "96000",
    "end": "98939"
  },
  {
    "text": "allow other tasks to run while it's",
    "start": "98939",
    "end": "100979"
  },
  {
    "text": "waiting for a result concurrent my nuts",
    "start": "100979",
    "end": "104040"
  },
  {
    "text": "out your mouth okay I don't know how I",
    "start": "104040",
    "end": "105960"
  },
  {
    "text": "got that one but that's about fair was",
    "start": "105960",
    "end": "107220"
  },
  {
    "text": "that a is that about a fair-ish",
    "start": "107220",
    "end": "108900"
  },
  {
    "text": "statement wrong again parallel is is",
    "start": "108900",
    "end": "111140"
  },
  {
    "text": "more than one thing happening at once",
    "start": "111140",
    "end": "113520"
  },
  {
    "text": "whereas concurrency is is stacking them",
    "start": "113520",
    "end": "115439"
  },
  {
    "text": "like bricks parallelism is a subset of",
    "start": "115439",
    "end": "117540"
  },
  {
    "text": "concurrency I don't believe that",
    "start": "117540",
    "end": "119340"
  },
  {
    "text": "parallel is at the exact same time",
    "start": "119340",
    "end": "121140"
  },
  {
    "text": "occurring at the same time interval okay",
    "start": "121140",
    "end": "123180"
  },
  {
    "text": "that somehow makes it less clear",
    "start": "123180",
    "end": "125460"
  },
  {
    "text": "now I think everybody's more confused at",
    "start": "125460",
    "end": "127619"
  },
  {
    "text": "this point I'm still confused what's the",
    "start": "127619",
    "end": "129300"
  },
  {
    "text": "difference okay think of no think of",
    "start": "129300",
    "end": "130800"
  },
  {
    "text": "node.js when you do a uh think of this",
    "start": "130800",
    "end": "133980"
  },
  {
    "text": "right here here we go this guy this code",
    "start": "133980",
    "end": "135780"
  },
  {
    "text": "okay not that code Vim test this right",
    "start": "135780",
    "end": "138120"
  },
  {
    "text": "here right one is going to take one",
    "start": "138120",
    "end": "140400"
  },
  {
    "text": "second two is going to take two seconds",
    "start": "140400",
    "end": "142319"
  },
  {
    "text": "we can either run them one at a time",
    "start": "142319",
    "end": "144599"
  },
  {
    "text": "this is not concurrent or parallel or",
    "start": "144599",
    "end": "147660"
  },
  {
    "text": "run them both at the same time but",
    "start": "147660",
    "end": "149700"
  },
  {
    "text": "here's the deal one will run until it",
    "start": "149700",
    "end": "152340"
  },
  {
    "text": "relieves any need of the CPU then two",
    "start": "152340",
    "end": "154920"
  },
  {
    "text": "will run and relieve any need of the CPU",
    "start": "154920",
    "end": "157080"
  },
  {
    "text": "and then one will pick back up after",
    "start": "157080",
    "end": "159120"
  },
  {
    "text": "it's one second wait and then start",
    "start": "159120",
    "end": "160739"
  },
  {
    "text": "running and then be done and then two",
    "start": "160739",
    "end": "162780"
  },
  {
    "text": "will pick up after two seconds and pick",
    "start": "162780",
    "end": "164519"
  },
  {
    "text": "it up this will take a grand total of",
    "start": "164519",
    "end": "166560"
  },
  {
    "text": "two seconds it's concurrent but it's not",
    "start": "166560",
    "end": "169080"
  },
  {
    "text": "parallel one is not executing at the",
    "start": "169080",
    "end": "171720"
  },
  {
    "text": "same time two is",
    "start": "171720",
    "end": "173459"
  },
  {
    "text": "that's concurrency",
    "start": "173459",
    "end": "175819"
  },
  {
    "text": "concurrent processes overlap parallel",
    "start": "175819",
    "end": "178319"
  },
  {
    "text": "runs literally the same time that's why",
    "start": "178319",
    "end": "179879"
  },
  {
    "text": "it was specific there's at least two",
    "start": "179879",
    "end": "182459"
  },
  {
    "text": "lines of running machine code like",
    "start": "182459",
    "end": "184980"
  },
  {
    "text": "something is happening",
    "start": "184980",
    "end": "187440"
  },
  {
    "text": "two different because you can you can",
    "start": "187440",
    "end": "189060"
  },
  {
    "text": "have parallelism and they're not running",
    "start": "189060",
    "end": "190440"
  },
  {
    "text": "the same code they don't have I don't",
    "start": "190440",
    "end": "192780"
  },
  {
    "text": "think there's any requirement that it",
    "start": "192780",
    "end": "194400"
  },
  {
    "text": "has to be identical code being ran",
    "start": "194400",
    "end": "197459"
  },
  {
    "text": "uh they could be running different parts",
    "start": "197459",
    "end": "200280"
  },
  {
    "text": "chipboard politics yeah okay whatever I",
    "start": "200280",
    "end": "202800"
  },
  {
    "text": "think we all get it we're moving on",
    "start": "202800",
    "end": "203760"
  },
  {
    "text": "these are not the same thing single core",
    "start": "203760",
    "end": "205080"
  },
  {
    "text": "machines have been running code",
    "start": "205080",
    "end": "206159"
  },
  {
    "text": "concurrently for a half century now but",
    "start": "206159",
    "end": "208200"
  },
  {
    "text": "they are related so much online well",
    "start": "208200",
    "end": "210239"
  },
  {
    "text": "actually well actually ignore dude we",
    "start": "210239",
    "end": "213599"
  },
  {
    "text": "literally just did this we literally",
    "start": "213599",
    "end": "216180"
  },
  {
    "text": "just did this",
    "start": "216180",
    "end": "218959"
  },
  {
    "text": "we're doing this okay right now",
    "start": "219060",
    "end": "221940"
  },
  {
    "text": "um ignores how often we break programs",
    "start": "221940",
    "end": "224400"
  },
  {
    "text": "into concurrent pieces so that those",
    "start": "224400",
    "end": "225780"
  },
  {
    "text": "pieces can run in parallel and",
    "start": "225780",
    "end": "227580"
  },
  {
    "text": "interleave in ways keep our cores",
    "start": "227580",
    "end": "229860"
  },
  {
    "text": "crunching we didn't care about",
    "start": "229860",
    "end": "231120"
  },
  {
    "text": "performance why would we bother so let's",
    "start": "231120",
    "end": "233519"
  },
  {
    "text": "see how do I concurrency one of the",
    "start": "233519",
    "end": "235379"
  },
  {
    "text": "simplest ways to build a concurrent",
    "start": "235379",
    "end": "236700"
  },
  {
    "text": "system is to split the code into",
    "start": "236700",
    "end": "237840"
  },
  {
    "text": "multiple processes after all the",
    "start": "237840",
    "end": "239760"
  },
  {
    "text": "operating system is lean mean",
    "start": "239760",
    "end": "241080"
  },
  {
    "text": "concurrency machine conspiring uh with",
    "start": "241080",
    "end": "243959"
  },
  {
    "text": "your Hardware to make each process think",
    "start": "243959",
    "end": "245580"
  },
  {
    "text": "it has its whole box to itself the OS",
    "start": "245580",
    "end": "247799"
  },
  {
    "text": "scheduler gives us parallelism for uh",
    "start": "247799",
    "end": "250019"
  },
  {
    "text": "free running time slices of any process",
    "start": "250019",
    "end": "252659"
  },
  {
    "text": "that's already on on an available CPU",
    "start": "252659",
    "end": "255480"
  },
  {
    "text": "core Once Upon a Time this was the way",
    "start": "255480",
    "end": "258060"
  },
  {
    "text": "and we simply we still employ it today",
    "start": "258060",
    "end": "260340"
  },
  {
    "text": "whenever we pipe shell commands together",
    "start": "260340",
    "end": "262979"
  },
  {
    "text": "let's talk about golf build tool oh no a",
    "start": "262979",
    "end": "266520"
  },
  {
    "text": "lot of you javascripters are discovering",
    "start": "266520",
    "end": "268139"
  },
  {
    "text": "that it is a lot more efficient to pass",
    "start": "268139",
    "end": "270300"
  },
  {
    "text": "data from task to task rather than",
    "start": "270300",
    "end": "272160"
  },
  {
    "text": "writing it to disk between each step or",
    "start": "272160",
    "end": "275160"
  },
  {
    "text": "akka actors in Scala concurrency sure is",
    "start": "275160",
    "end": "277860"
  },
  {
    "text": "simpler with non-shared memory and",
    "start": "277860",
    "end": "279900"
  },
  {
    "text": "immutable messages huh okay let's begin",
    "start": "279900",
    "end": "282240"
  },
  {
    "text": "with processing pipes they've been in",
    "start": "282240",
    "end": "284400"
  },
  {
    "text": "Unix for 40 goddamn years",
    "start": "284400",
    "end": "288440"
  },
  {
    "text": "this is actually really funny by the way",
    "start": "288780",
    "end": "290940"
  },
  {
    "text": "this is this is really good uh",
    "start": "290940",
    "end": "293880"
  },
  {
    "text": "it's been happening forever",
    "start": "293880",
    "end": "296759"
  },
  {
    "text": "but this approach has limitations",
    "start": "296759",
    "end": "298139"
  },
  {
    "text": "inter-process communication is not cheap",
    "start": "298139",
    "end": "300180"
  },
  {
    "text": "since most implementations copy data to",
    "start": "300180",
    "end": "302340"
  },
  {
    "text": "OS memory and back yep uh mutex based",
    "start": "302340",
    "end": "304919"
  },
  {
    "text": "concurrency considered harmful or horror",
    "start": "304919",
    "end": "306960"
  },
  {
    "text": "was right",
    "start": "306960",
    "end": "308160"
  },
  {
    "text": "uh some people when confronted with a",
    "start": "308160",
    "end": "310080"
  },
  {
    "text": "problem think I know I'll use threads",
    "start": "310080",
    "end": "312360"
  },
  {
    "text": "and then they have two awesome",
    "start": "312360",
    "end": "316439"
  },
  {
    "text": "this is such a good statement this is a",
    "start": "318240",
    "end": "320820"
  },
  {
    "text": "beautiful statement right this is a",
    "start": "320820",
    "end": "322800"
  },
  {
    "text": "beautiful statement okay this is",
    "start": "322800",
    "end": "324720"
  },
  {
    "text": "parallelism getting awful we can avoid",
    "start": "324720",
    "end": "327419"
  },
  {
    "text": "these overheads using threads processes",
    "start": "327419",
    "end": "329520"
  },
  {
    "text": "that share the same memory uh common",
    "start": "329520",
    "end": "331560"
  },
  {
    "text": "wisdom teaches us to connect them with",
    "start": "331560",
    "end": "333419"
  },
  {
    "text": "mysterious beasts like mutexes and",
    "start": "333419",
    "end": "335699"
  },
  {
    "text": "conditional variables and semaphores",
    "start": "335699",
    "end": "339120"
  },
  {
    "text": "isn't a semaphore just a mutex with a",
    "start": "339120",
    "end": "341880"
  },
  {
    "text": "wider Lane",
    "start": "341880",
    "end": "342960"
  },
  {
    "text": "just has a higher count to begin with",
    "start": "342960",
    "end": "345840"
  },
  {
    "text": "um anyways yeah I know I'm just saying",
    "start": "345840",
    "end": "348120"
  },
  {
    "text": "I'm just saying that just okay anyways",
    "start": "348120",
    "end": "349860"
  },
  {
    "text": "uh this is a dangerous game",
    "start": "349860",
    "end": "351860"
  },
  {
    "text": "I mean I like using this I have my",
    "start": "351860",
    "end": "354960"
  },
  {
    "text": "little test clients all use this I think",
    "start": "354960",
    "end": "356520"
  },
  {
    "text": "it's a lot of fun to use semaphores to",
    "start": "356520",
    "end": "358020"
  },
  {
    "text": "produce asynchronous code it's fun I I",
    "start": "358020",
    "end": "360539"
  },
  {
    "text": "mean I actually enjoy it a little Tokyo",
    "start": "360539",
    "end": "362580"
  },
  {
    "text": "spawn a little semaphore a little glass",
    "start": "362580",
    "end": "364259"
  },
  {
    "text": "of wine and you got yourself a seg phone",
    "start": "364259",
    "end": "366300"
  },
  {
    "text": "uh This Is A Dangerous Game simply uh",
    "start": "366300",
    "end": "369000"
  },
  {
    "text": "simple mistakes will plague you with the",
    "start": "369000",
    "end": "370680"
  },
  {
    "text": "race conditions and Deadlocks and other",
    "start": "370680",
    "end": "372419"
  },
  {
    "text": "terrible diseases that fill your code",
    "start": "372419",
    "end": "373800"
  },
  {
    "text": "with bugs but only on Tuesdays when it's",
    "start": "373800",
    "end": "376919"
  },
  {
    "text": "raining and the temperature is in the",
    "start": "376919",
    "end": "378360"
  },
  {
    "text": "middle of three is a multiple of three",
    "start": "378360",
    "end": "380340"
  },
  {
    "text": "oh gosh it's a red riddle and God help",
    "start": "380340",
    "end": "382259"
  },
  {
    "text": "you if you want to learn how this stuff",
    "start": "382259",
    "end": "383520"
  },
  {
    "text": "actually works on Modern Hardware",
    "start": "383520",
    "end": "385919"
  },
  {
    "text": "Fair all those are fair statements",
    "start": "385919",
    "end": "388800"
  },
  {
    "text": "all of it fair statements there's",
    "start": "388800",
    "end": "390300"
  },
  {
    "text": "another way in this 1978 paper",
    "start": "390300",
    "end": "392520"
  },
  {
    "text": "communicating sequential processes Tony",
    "start": "392520",
    "end": "394919"
  },
  {
    "text": "horror suggests Connecting Threads with",
    "start": "394919",
    "end": "396479"
  },
  {
    "text": "cues or channels which they can use to",
    "start": "396479",
    "end": "399060"
  },
  {
    "text": "send each other messages this has many",
    "start": "399060",
    "end": "400919"
  },
  {
    "text": "advantages are we just slowly becoming",
    "start": "400919",
    "end": "403440"
  },
  {
    "text": "go is this literally a statement of like",
    "start": "403440",
    "end": "406560"
  },
  {
    "text": "hey man you want to hear about go",
    "start": "406560",
    "end": "411080"
  },
  {
    "text": "I think this is where we're going or",
    "start": "413360",
    "end": "415919"
  },
  {
    "text": "erlang okay erling sorry it's erlang uh",
    "start": "415919",
    "end": "419940"
  },
  {
    "text": "dude erlings is literally The Simpsons",
    "start": "419940",
    "end": "422160"
  },
  {
    "text": "of programming oh is this goat erlang",
    "start": "422160",
    "end": "424680"
  },
  {
    "text": "did it okay it showed up threads and joy",
    "start": "424680",
    "end": "426780"
  },
  {
    "text": "process like isolation from the rest",
    "start": "426780",
    "end": "428400"
  },
  {
    "text": "sorry the music was a little loud uh",
    "start": "428400",
    "end": "430500"
  },
  {
    "text": "threads enjoy process like isolation",
    "start": "430500",
    "end": "432300"
  },
  {
    "text": "from the rest of the program since they",
    "start": "432300",
    "end": "433800"
  },
  {
    "text": "don't share memory bonus points for",
    "start": "433800",
    "end": "435840"
  },
  {
    "text": "memory safe languages that make it hard",
    "start": "435840",
    "end": "437400"
  },
  {
    "text": "to accidentally scramble another thread",
    "start": "437400",
    "end": "438900"
  },
  {
    "text": "yeah rust uh each thread has very",
    "start": "438900",
    "end": "441120"
  },
  {
    "text": "obvious set of inputs the channels it",
    "start": "441120",
    "end": "442740"
  },
  {
    "text": "receives from and the outputs the",
    "start": "442740",
    "end": "444060"
  },
  {
    "text": "channel it sends to this is a re this is",
    "start": "444060",
    "end": "446220"
  },
  {
    "text": "easy to reason about and is easy to bug",
    "start": "446220",
    "end": "448139"
  },
  {
    "text": "it's actually true it is very easy to",
    "start": "448139",
    "end": "449940"
  },
  {
    "text": "debug these type of problems instrument",
    "start": "449940",
    "end": "451620"
  },
  {
    "text": "uh the channels for powerful visibility",
    "start": "451620",
    "end": "454380"
  },
  {
    "text": "into your system measuring each thread's",
    "start": "454380",
    "end": "456240"
  },
  {
    "text": "throughput channels are the",
    "start": "456240",
    "end": "458160"
  },
  {
    "text": "synchronization if a channel is empty",
    "start": "458160",
    "end": "460020"
  },
  {
    "text": "the receiver Waits until it's not if a",
    "start": "460020",
    "end": "462060"
  },
  {
    "text": "channel is full the sender Waits yeah",
    "start": "462060",
    "end": "464039"
  },
  {
    "text": "this is actually I mean this is",
    "start": "464039",
    "end": "465060"
  },
  {
    "text": "beautiful threads never sleep while they",
    "start": "465060",
    "end": "467520"
  },
  {
    "text": "have work to do graceful pausing if they",
    "start": "467520",
    "end": "469560"
  },
  {
    "text": "outpace the rest of the system",
    "start": "469560",
    "end": "471599"
  },
  {
    "text": "okay after Decades of mutex Madness many",
    "start": "471599",
    "end": "474360"
  },
  {
    "text": "many modern languages heed",
    "start": "474360",
    "end": "476940"
  },
  {
    "text": "advice and provide channels in their",
    "start": "476940",
    "end": "478800"
  },
  {
    "text": "standard library in Rust we call them",
    "start": "478800",
    "end": "480240"
  },
  {
    "text": "sync Channel",
    "start": "480240",
    "end": "481680"
  },
  {
    "text": "okay",
    "start": "481680",
    "end": "483060"
  },
  {
    "text": "most software can stop here building",
    "start": "483060",
    "end": "485099"
  },
  {
    "text": "concurrent systems with threads and",
    "start": "485099",
    "end": "486900"
  },
  {
    "text": "channels combine them with tools to",
    "start": "486900",
    "end": "489419"
  },
  {
    "text": "parallelize CPU intensive Loops like",
    "start": "489419",
    "end": "491520"
  },
  {
    "text": "Russ rayon or Haskell's par ooh Haskell",
    "start": "491520",
    "end": "494160"
  },
  {
    "text": "mentioned can we get a w Haskell mention",
    "start": "494160",
    "end": "496199"
  },
  {
    "text": "pick pick come on down pick dude anytime",
    "start": "496199",
    "end": "500699"
  },
  {
    "text": "Haskell gets mentioned there's just high",
    "start": "500699",
    "end": "502379"
  },
  {
    "text": "fives like 35 individual people just",
    "start": "502379",
    "end": "505800"
  },
  {
    "text": "start high-fiving each other and they're",
    "start": "505800",
    "end": "507660"
  },
  {
    "text": "just like yeah they recognized us let's",
    "start": "507660",
    "end": "510720"
  },
  {
    "text": "go pick sitting there at the leaders",
    "start": "510720",
    "end": "513180"
  },
  {
    "text": "full on full-on cult Enthusiast oh it's",
    "start": "513180",
    "end": "517320"
  },
  {
    "text": "so good uh and you've got a powerful",
    "start": "517320",
    "end": "519419"
  },
  {
    "text": "cocktail I do think that I've relied too",
    "start": "519419",
    "end": "521700"
  },
  {
    "text": "heavily on async await and maybe I do",
    "start": "521700",
    "end": "524099"
  },
  {
    "text": "need to consider more just",
    "start": "524099",
    "end": "526740"
  },
  {
    "text": "playing with this kind of stuff",
    "start": "526740",
    "end": "528959"
  },
  {
    "text": "but Ludicrous Speed go",
    "start": "528959",
    "end": "532620"
  },
  {
    "text": "some problems demand a lot of",
    "start": "532620",
    "end": "534180"
  },
  {
    "text": "concurrency the canonical example",
    "start": "534180",
    "end": "535680"
  },
  {
    "text": "described by uh Dan Cagle did I say his",
    "start": "535680",
    "end": "538860"
  },
  {
    "text": "name right the man's name is Kegel did",
    "start": "538860",
    "end": "540540"
  },
  {
    "text": "he invent anything else",
    "start": "540540",
    "end": "542279"
  },
  {
    "text": "is there any other well-known item that",
    "start": "542279",
    "end": "544620"
  },
  {
    "text": "uh this damn fella happened to",
    "start": "544620",
    "end": "547500"
  },
  {
    "text": "to know about",
    "start": "547500",
    "end": "549959"
  },
  {
    "text": "I'm doing one right now",
    "start": "549959",
    "end": "552300"
  },
  {
    "text": "that squeeze was great uh as the C 10K",
    "start": "552300",
    "end": "555839"
  },
  {
    "text": "problem back in 1999 is a web server",
    "start": "555839",
    "end": "559140"
  },
  {
    "text": "connected to tens of thousands of",
    "start": "559140",
    "end": "560760"
  },
  {
    "text": "concurrent users at this scale threads",
    "start": "560760",
    "end": "563160"
  },
  {
    "text": "won't cut it uh while they are pretty",
    "start": "563160",
    "end": "565019"
  },
  {
    "text": "cheap fire up a thread per connection",
    "start": "565019",
    "end": "566700"
  },
  {
    "text": "and your computer will grind to a halt",
    "start": "566700",
    "end": "568500"
  },
  {
    "text": "to solve this some language provide a",
    "start": "568500",
    "end": "570779"
  },
  {
    "text": "concurrency model where tasks are cheap",
    "start": "570779",
    "end": "573000"
  },
  {
    "text": "and managed by uh in user space I.E",
    "start": "573000",
    "end": "575880"
  },
  {
    "text": "without operating systems help a runtime",
    "start": "575880",
    "end": "578040"
  },
  {
    "text": "schedule these tasks onto a pool of os",
    "start": "578040",
    "end": "580320"
  },
  {
    "text": "threads usually size so each CPU core",
    "start": "580320",
    "end": "582720"
  },
  {
    "text": "gets a thread to Max maximize parallel",
    "start": "582720",
    "end": "585680"
  },
  {
    "text": "parallelism very hard word by the way to",
    "start": "585680",
    "end": "588540"
  },
  {
    "text": "say rust calls this the MN thread",
    "start": "588540",
    "end": "590700"
  },
  {
    "text": "problem okay uh this scheme goes by many",
    "start": "590700",
    "end": "593100"
  },
  {
    "text": "names green threads lightweight threads",
    "start": "593100",
    "end": "594959"
  },
  {
    "text": "lightweight processes fibers co-routines",
    "start": "594959",
    "end": "597240"
  },
  {
    "text": "did you know that in react they also use",
    "start": "597240",
    "end": "600000"
  },
  {
    "text": "the term fiber starting in react 16.",
    "start": "600000",
    "end": "603720"
  },
  {
    "text": "um as somebody who's been recently going",
    "start": "603720",
    "end": "605519"
  },
  {
    "text": "through their source code and reading a",
    "start": "605519",
    "end": "607560"
  },
  {
    "text": "lot of lines of it just saying",
    "start": "607560",
    "end": "609540"
  },
  {
    "text": "okay that that it exists and react as",
    "start": "609540",
    "end": "612180"
  },
  {
    "text": "well uh and more complete and with",
    "start": "612180",
    "end": "614519"
  },
  {
    "text": "pedantic nerds endlessly debating the",
    "start": "614519",
    "end": "616200"
  },
  {
    "text": "subtle differences between them Russ",
    "start": "616200",
    "end": "618240"
  },
  {
    "text": "comes in with this problem with async",
    "start": "618240",
    "end": "620040"
  },
  {
    "text": "await model seen previously in places",
    "start": "620040",
    "end": "621600"
  },
  {
    "text": "like c-sharp and node.js here functions",
    "start": "621600",
    "end": "624060"
  },
  {
    "text": "are marked async don't block you but",
    "start": "624060",
    "end": "625800"
  },
  {
    "text": "immediately return a future or promise",
    "start": "625800",
    "end": "627660"
  },
  {
    "text": "that can be awaited to produce the",
    "start": "627660",
    "end": "629519"
  },
  {
    "text": "result a little different though than",
    "start": "629519",
    "end": "631140"
  },
  {
    "text": "node.js in node.js World an async",
    "start": "631140",
    "end": "634320"
  },
  {
    "text": "function is greedy it runs right away",
    "start": "634320",
    "end": "636240"
  },
  {
    "text": "it's hot is another term for it whereas",
    "start": "636240",
    "end": "638580"
  },
  {
    "text": "with uh rust unless if you call Dot",
    "start": "638580",
    "end": "641399"
  },
  {
    "text": "await it doesn't ever actually run which",
    "start": "641399",
    "end": "644339"
  },
  {
    "text": "can bite some serious ass okay you may",
    "start": "644339",
    "end": "647339"
  },
  {
    "text": "not realize that I've heard the term",
    "start": "647339",
    "end": "649860"
  },
  {
    "text": "cold be that used lazy you know there's",
    "start": "649860",
    "end": "652920"
  },
  {
    "text": "a lot of terms for it Foo returns an end",
    "start": "652920",
    "end": "654899"
  },
  {
    "text": "async food returns a future that we",
    "start": "654899",
    "end": "657360"
  },
  {
    "text": "cannot await to get it",
    "start": "657360",
    "end": "659240"
  },
  {
    "text": "weight",
    "start": "659240",
    "end": "661140"
  },
  {
    "text": "I've been here before",
    "start": "661140",
    "end": "663839"
  },
  {
    "text": "you should have thrown a literally",
    "start": "663839",
    "end": "665579"
  },
  {
    "text": "should have thrown a little Arc mutex",
    "start": "665579",
    "end": "667500"
  },
  {
    "text": "somewhere in here uh on one hand Futures",
    "start": "667500",
    "end": "669540"
  },
  {
    "text": "in Rust are exceedingly small and fast",
    "start": "669540",
    "end": "671220"
  },
  {
    "text": "thanks to their Cooperative schedules",
    "start": "671220",
    "end": "672959"
  },
  {
    "text": "stackless design but unlike other",
    "start": "672959",
    "end": "675300"
  },
  {
    "text": "languages with user space concurrency",
    "start": "675300",
    "end": "677100"
  },
  {
    "text": "rust tries to offer this abstraction",
    "start": "677100",
    "end": "678779"
  },
  {
    "text": "while also promising the programmer",
    "start": "678779",
    "end": "680519"
  },
  {
    "text": "total low-level control there's a",
    "start": "680519",
    "end": "682320"
  },
  {
    "text": "fundamental tension between the two and",
    "start": "682320",
    "end": "684540"
  },
  {
    "text": "the poor async rust programmer is",
    "start": "684540",
    "end": "686339"
  },
  {
    "text": "perpetually caught in the middle Torn",
    "start": "686339",
    "end": "687839"
  },
  {
    "text": "Between the language's design goals and",
    "start": "687839",
    "end": "689519"
  },
  {
    "text": "the massively concurrent World they are",
    "start": "689519",
    "end": "691140"
  },
  {
    "text": "trying to build rust attempts to uh",
    "start": "691140",
    "end": "693839"
  },
  {
    "text": "statically statically verify the",
    "start": "693839",
    "end": "696420"
  },
  {
    "text": "lifetime of every object in reference in",
    "start": "696420",
    "end": "698220"
  },
  {
    "text": "your program I still truly don't",
    "start": "698220",
    "end": "700320"
  },
  {
    "text": "understand pin and unpin",
    "start": "700320",
    "end": "702480"
  },
  {
    "text": "okay I keep trying",
    "start": "702480",
    "end": "705000"
  },
  {
    "text": "okay I haven't tried in a little while",
    "start": "705000",
    "end": "706680"
  },
  {
    "text": "I'm just saying that sometimes you gotta",
    "start": "706680",
    "end": "708660"
  },
  {
    "text": "pin it sometimes you want to not unpin",
    "start": "708660",
    "end": "711779"
  },
  {
    "text": "it sometimes you want to unpin it okay",
    "start": "711779",
    "end": "714660"
  },
  {
    "text": "sometimes you want an async reader plus",
    "start": "714660",
    "end": "717500"
  },
  {
    "text": "unpin I know that's almost like pin",
    "start": "717500",
    "end": "720180"
  },
  {
    "text": "doesn't move you're like oh okay that",
    "start": "720180",
    "end": "722399"
  },
  {
    "text": "makes perfect sense okay I get it now I",
    "start": "722399",
    "end": "724860"
  },
  {
    "text": "get it I",
    "start": "724860",
    "end": "726620"
  },
  {
    "text": "super cool",
    "start": "726620",
    "end": "728940"
  },
  {
    "text": "um design goal is a massively concurrent",
    "start": "728940",
    "end": "730500"
  },
  {
    "text": "world they're trying to build rust",
    "start": "730500",
    "end": "731700"
  },
  {
    "text": "attempts to statically verify the",
    "start": "731700",
    "end": "733079"
  },
  {
    "text": "lifetime of every object in reference in",
    "start": "733079",
    "end": "734640"
  },
  {
    "text": "your program at compile time Futures",
    "start": "734640",
    "end": "736200"
  },
  {
    "text": "promise the opposite that we can break",
    "start": "736200",
    "end": "738240"
  },
  {
    "text": "code and the data it references into",
    "start": "738240",
    "end": "740160"
  },
  {
    "text": "thousands of little pieces runnable at",
    "start": "740160",
    "end": "742019"
  },
  {
    "text": "any time on any thread based on on",
    "start": "742019",
    "end": "743940"
  },
  {
    "text": "conditions we can only know once we've",
    "start": "743940",
    "end": "746339"
  },
  {
    "text": "started a future that reads data from a",
    "start": "746339",
    "end": "748680"
  },
  {
    "text": "client should only run when that",
    "start": "748680",
    "end": "750360"
  },
  {
    "text": "client's socket has data to read and no",
    "start": "750360",
    "end": "752579"
  },
  {
    "text": "lifetime annotation will tell us when",
    "start": "752579",
    "end": "755579"
  },
  {
    "text": "that might be it's actually a really",
    "start": "755579",
    "end": "757500"
  },
  {
    "text": "fair take so that's why send you asked",
    "start": "757500",
    "end": "759600"
  },
  {
    "text": "about say this sounds like a send",
    "start": "759600",
    "end": "760560"
  },
  {
    "text": "problem uh assuring the compiler will uh",
    "start": "760560",
    "end": "763680"
  },
  {
    "text": "shortly probably that everything will be",
    "start": "763680",
    "end": "765480"
  },
  {
    "text": "okay runs into the same challenges you",
    "start": "765480",
    "end": "767279"
  },
  {
    "text": "see when working with raw threads just",
    "start": "767279",
    "end": "768959"
  },
  {
    "text": "raw dog those threads data must either",
    "start": "768959",
    "end": "770820"
  },
  {
    "text": "be marked Ascend or moved or pass",
    "start": "770820",
    "end": "772800"
  },
  {
    "text": "through references with a static",
    "start": "772800",
    "end": "774300"
  },
  {
    "text": "lifetime both are easier said than done",
    "start": "774300",
    "end": "776940"
  },
  {
    "text": "moving at least without cloning is often",
    "start": "776940",
    "end": "779399"
  },
  {
    "text": "a non-starter dude it's so annoying this",
    "start": "779399",
    "end": "781560"
  },
  {
    "text": "is like the this part",
    "start": "781560",
    "end": "783660"
  },
  {
    "text": "is such an emotional bruising moment",
    "start": "783660",
    "end": "786839"
  },
  {
    "text": "do you know what I mean like this is",
    "start": "786839",
    "end": "788519"
  },
  {
    "text": "such an emotionally bruising moment when",
    "start": "788519",
    "end": "790200"
  },
  {
    "text": "you start getting into this oh my",
    "start": "790200",
    "end": "792060"
  },
  {
    "text": "goodness since it's common in async code",
    "start": "792060",
    "end": "794220"
  },
  {
    "text": "to spawn many tasks that share common",
    "start": "794220",
    "end": "795839"
  },
  {
    "text": "state the reference uh references are a",
    "start": "795839",
    "end": "797880"
  },
  {
    "text": "pain too there there's no thread scope",
    "start": "797880",
    "end": "800399"
  },
  {
    "text": "equivalent to help us bound future",
    "start": "800399",
    "end": "802260"
  },
  {
    "text": "lifetimes to anything short of forever I",
    "start": "802260",
    "end": "804899"
  },
  {
    "text": "thought there was some level I thought",
    "start": "804899",
    "end": "806339"
  },
  {
    "text": "in uh Mara Mara's Book on a",
    "start": "806339",
    "end": "810420"
  },
  {
    "text": "uh threat atomics or uh rust atomics",
    "start": "810420",
    "end": "813060"
  },
  {
    "text": "there was some sort of thread scoping",
    "start": "813060",
    "end": "814740"
  },
  {
    "text": "that allowed some version of this I",
    "start": "814740",
    "end": "817440"
  },
  {
    "text": "could be wrong though it could be very",
    "start": "817440",
    "end": "818940"
  },
  {
    "text": "very wrong uh Foo big chungus get that",
    "start": "818940",
    "end": "822540"
  },
  {
    "text": "big chunk is out here async food big",
    "start": "822540",
    "end": "824760"
  },
  {
    "text": "Global static ref or something similar",
    "start": "824760",
    "end": "827100"
  },
  {
    "text": "horror chungus sendable chungus clone",
    "start": "827100",
    "end": "831980"
  },
  {
    "text": "that's pretty good you gotta have that",
    "start": "836720",
    "end": "839220"
  },
  {
    "text": "sendable clonable chungus okay it's a",
    "start": "839220",
    "end": "841740"
  },
  {
    "text": "requirement",
    "start": "841740",
    "end": "843180"
  },
  {
    "text": "unlike launching raw threads where you",
    "start": "843180",
    "end": "845399"
  },
  {
    "text": "might have to deal with these annoyances",
    "start": "845399",
    "end": "846839"
  },
  {
    "text": "in a handful of functions this happens",
    "start": "846839",
    "end": "848220"
  },
  {
    "text": "constantly due to async's viral nature",
    "start": "848220",
    "end": "850200"
  },
  {
    "text": "yep since any function that calls async",
    "start": "850200",
    "end": "852779"
  },
  {
    "text": "function must itself be async so I",
    "start": "852779",
    "end": "854639"
  },
  {
    "text": "talked about this earlier this is the",
    "start": "854639",
    "end": "856380"
  },
  {
    "text": "problem of a leaky abstraction when you",
    "start": "856380",
    "end": "858600"
  },
  {
    "text": "have one thing that uses something the",
    "start": "858600",
    "end": "860639"
  },
  {
    "text": "thing that uses it must also become it",
    "start": "860639",
    "end": "862860"
  },
  {
    "text": "itself and so you just like",
    "start": "862860",
    "end": "865100"
  },
  {
    "text": "all the way back or you create a",
    "start": "865100",
    "end": "868380"
  },
  {
    "text": "something that can walk a future in Rust",
    "start": "868380",
    "end": "870120"
  },
  {
    "text": "which I'm still not quite sure of how",
    "start": "870120",
    "end": "871680"
  },
  {
    "text": "that works uh you need to solve this",
    "start": "871680",
    "end": "873540"
  },
  {
    "text": "problem everywhere all the time just Arc",
    "start": "873540",
    "end": "876420"
  },
  {
    "text": "my up",
    "start": "876420",
    "end": "878639"
  },
  {
    "text": "toss a little mutex on there a seasoned",
    "start": "878639",
    "end": "880920"
  },
  {
    "text": "rust developer will respond by saying",
    "start": "880920",
    "end": "882300"
  },
  {
    "text": "that Russ gives us a simple toe of our",
    "start": "882300",
    "end": "883860"
  },
  {
    "text": "Dynamic lifetime spanning multiple",
    "start": "883860",
    "end": "885180"
  },
  {
    "text": "threads we call them Atomic reference",
    "start": "885180",
    "end": "886620"
  },
  {
    "text": "counts as or Arc for short",
    "start": "886620",
    "end": "889820"
  },
  {
    "text": "did I do a good recipe",
    "start": "890040",
    "end": "892560"
  },
  {
    "text": "um while while it's true dude so",
    "start": "892560",
    "end": "894740"
  },
  {
    "text": "Republican versus Democrat functions yes",
    "start": "894740",
    "end": "897000"
  },
  {
    "text": "this is what we're talking about while",
    "start": "897000",
    "end": "898680"
  },
  {
    "text": "it's true that they solve the immediate",
    "start": "898680",
    "end": "900660"
  },
  {
    "text": "problem borrow check and our code",
    "start": "900660",
    "end": "902699"
  },
  {
    "text": "compiles they are far from the Silver",
    "start": "902699",
    "end": "904380"
  },
  {
    "text": "Bullet used pervasively Arc gives you",
    "start": "904380",
    "end": "906540"
  },
  {
    "text": "the world's worst garbage collector",
    "start": "906540",
    "end": "909180"
  },
  {
    "text": "like the GC the lifetime of an object",
    "start": "909180",
    "end": "911220"
  },
  {
    "text": "and the resources they represent memory",
    "start": "911220",
    "end": "913740"
  },
  {
    "text": "file sockets is unknowable but you can",
    "start": "913740",
    "end": "916260"
  },
  {
    "text": "take this loss without the wins you'd",
    "start": "916260",
    "end": "917820"
  },
  {
    "text": "get from actual GC",
    "start": "917820",
    "end": "919800"
  },
  {
    "text": "it's true you get all the inconveniences",
    "start": "919800",
    "end": "922380"
  },
  {
    "text": "of rust with none of the benefits of GC",
    "start": "922380",
    "end": "926360"
  },
  {
    "text": "that's pretty good don't buy the GCS",
    "start": "927120",
    "end": "929279"
  },
  {
    "text": "slow fun yeah I think that like Discord",
    "start": "929279",
    "end": "931740"
  },
  {
    "text": "probably did the largest disservice ever",
    "start": "931740",
    "end": "933600"
  },
  {
    "text": "to the GC is slow and bad they're like",
    "start": "933600",
    "end": "935820"
  },
  {
    "text": "on an old version of go they had no",
    "start": "935820",
    "end": "938639"
  },
  {
    "text": "tuning that was being done there's a lot",
    "start": "938639",
    "end": "940680"
  },
  {
    "text": "of improvements in go and what they've",
    "start": "940680",
    "end": "942600"
  },
  {
    "text": "been doing with with that and I really",
    "start": "942600",
    "end": "944279"
  },
  {
    "text": "hope memory Arena's come out but it's",
    "start": "944279",
    "end": "946440"
  },
  {
    "text": "true don't buy the GCS slow fun GCS can",
    "start": "946440",
    "end": "949500"
  },
  {
    "text": "be fast you can make things good in a",
    "start": "949500",
    "end": "951959"
  },
  {
    "text": "compiled language with the GC it is",
    "start": "951959",
    "end": "953699"
  },
  {
    "text": "possible gochi see is a great it's a",
    "start": "953699",
    "end": "956100"
  },
  {
    "text": "great GC the claim is misunderstanding",
    "start": "956100",
    "end": "958199"
  },
  {
    "text": "of a latency versus throughput at the",
    "start": "958199",
    "end": "960240"
  },
  {
    "text": "best and bizarre psyop at worst",
    "start": "960240",
    "end": "962720"
  },
  {
    "text": "throughput at best and a bizarre psyop",
    "start": "962720",
    "end": "965160"
  },
  {
    "text": "at worst I love a good psyop I am all in",
    "start": "965160",
    "end": "967620"
  },
  {
    "text": "on a good psyop a modern moving garbage",
    "start": "967620",
    "end": "969720"
  },
  {
    "text": "collector gets you more allocation",
    "start": "969720",
    "end": "971519"
  },
  {
    "text": "throughput less fragmentation and means",
    "start": "971519",
    "end": "973620"
  },
  {
    "text": "you don't have to play Mickey Mouse",
    "start": "973620",
    "end": "974880"
  },
  {
    "text": "games when weak pointers to avoid cycle",
    "start": "974880",
    "end": "976800"
  },
  {
    "text": "leaks yep and you can even trick the",
    "start": "976800",
    "end": "978959"
  },
  {
    "text": "system programmers into leveraging GC in",
    "start": "978959",
    "end": "980940"
  },
  {
    "text": "one of the world's most important",
    "start": "980940",
    "end": "982019"
  },
  {
    "text": "software projects by calling it deferred",
    "start": "982019",
    "end": "984839"
  },
  {
    "text": "destruction colonel.org someone stuck in",
    "start": "984839",
    "end": "987480"
  },
  {
    "text": "a GC someone stuck in a little deferred",
    "start": "987480",
    "end": "991860"
  },
  {
    "text": "destruction step B the above key to",
    "start": "991860",
    "end": "994139"
  },
  {
    "text": "underlying rco's deferred destruction",
    "start": "994139",
    "end": "997759"
  },
  {
    "text": "HR here uh hold up please",
    "start": "999899",
    "end": "1003019"
  },
  {
    "text": "that's actually pretty funny uh another",
    "start": "1003019",
    "end": "1004820"
  },
  {
    "text": "random nonsense let's say other random",
    "start": "1004820",
    "end": "1006259"
  },
  {
    "text": "nonsense I'm not sure if that's actually",
    "start": "1006259",
    "end": "1007459"
  },
  {
    "text": "real or what they're saying if it's",
    "start": "1007459",
    "end": "1008899"
  },
  {
    "text": "really a garbage collector or anything",
    "start": "1008899",
    "end": "1009980"
  },
  {
    "text": "but it's just a funny idea that that",
    "start": "1009980",
    "end": "1011360"
  },
  {
    "text": "exists because rusco routines our",
    "start": "1011360",
    "end": "1013339"
  },
  {
    "text": "stackless the compiler turns each one of",
    "start": "1013339",
    "end": "1014959"
  },
  {
    "text": "them into a state machine that advances",
    "start": "1014959",
    "end": "1016339"
  },
  {
    "text": "to the next await yeah if you've ever",
    "start": "1016339",
    "end": "1017720"
  },
  {
    "text": "looked at some of the code that is",
    "start": "1017720",
    "end": "1019399"
  },
  {
    "text": "generated it's pretty wild but this",
    "start": "1019399",
    "end": "1021920"
  },
  {
    "text": "makes any recursive async function a",
    "start": "1021920",
    "end": "1023899"
  },
  {
    "text": "recursively defined type",
    "start": "1023899",
    "end": "1025938"
  },
  {
    "text": "a user just trying to call a function",
    "start": "1025939",
    "end": "1028100"
  },
  {
    "text": "from itself is met with inscrutable",
    "start": "1028100",
    "end": "1030079"
  },
  {
    "text": "errors until they manually box it or use",
    "start": "1030079",
    "end": "1033020"
  },
  {
    "text": "a crate that does the same well I've",
    "start": "1033020",
    "end": "1034819"
  },
  {
    "text": "never tried a async recursive function",
    "start": "1034819",
    "end": "1038058"
  },
  {
    "text": "huh there's an important distinction",
    "start": "1038059",
    "end": "1040160"
  },
  {
    "text": "between a future what does nothing until",
    "start": "1040160",
    "end": "1041839"
  },
  {
    "text": "awaited in a task which spawns work in",
    "start": "1041839",
    "end": "1044000"
  },
  {
    "text": "the runtime's thread pool returning a",
    "start": "1044000",
    "end": "1045980"
  },
  {
    "text": "future that marks its completion exactly",
    "start": "1045980",
    "end": "1047780"
  },
  {
    "text": "this is true I mentioned this earlier uh",
    "start": "1047780",
    "end": "1049820"
  },
  {
    "text": "there's nothing keeping you from calling",
    "start": "1049820",
    "end": "1051260"
  },
  {
    "text": "blocking code inside a future and",
    "start": "1051260",
    "end": "1053120"
  },
  {
    "text": "there's nothing keeping that call from",
    "start": "1053120",
    "end": "1054799"
  },
  {
    "text": "blocking the runtime's thread it's on",
    "start": "1054799",
    "end": "1056780"
  },
  {
    "text": "also true you know the entire thing",
    "start": "1056780",
    "end": "1059179"
  },
  {
    "text": "we're trying to avoid with async I mean",
    "start": "1059179",
    "end": "1060980"
  },
  {
    "text": "I've done this a lot of times with rust",
    "start": "1060980",
    "end": "1062600"
  },
  {
    "text": "I did this a lot of times with rust it",
    "start": "1062600",
    "end": "1065660"
  },
  {
    "text": "can be quite tricky running away",
    "start": "1065660",
    "end": "1069380"
  },
  {
    "text": "always Monty Python's always a solid",
    "start": "1069380",
    "end": "1071539"
  },
  {
    "text": "reference",
    "start": "1071539",
    "end": "1072740"
  },
  {
    "text": "what",
    "start": "1072740",
    "end": "1074240"
  },
  {
    "text": "is",
    "start": "1074240",
    "end": "1076340"
  },
  {
    "text": "your favorite color",
    "start": "1076340",
    "end": "1078320"
  },
  {
    "text": "um mixed together this gives you async",
    "start": "1078320",
    "end": "1081020"
  },
  {
    "text": "rust a much different flavor than a",
    "start": "1081020",
    "end": "1082580"
  },
  {
    "text": "normal rust oh one with many gotchas",
    "start": "1082580",
    "end": "1084440"
  },
  {
    "text": "that are harder to understand and teach",
    "start": "1084440",
    "end": "1086059"
  },
  {
    "text": "and pushes users either to develop a",
    "start": "1086059",
    "end": "1088820"
  },
  {
    "text": "deep understanding of how abstractions",
    "start": "1088820",
    "end": "1090200"
  },
  {
    "text": "actually work writing complicated code",
    "start": "1090200",
    "end": "1091640"
  },
  {
    "text": "to handle them or sprinkling Arc pin",
    "start": "1091640",
    "end": "1094100"
  },
  {
    "text": "static unpin pin project",
    "start": "1094100",
    "end": "1096980"
  },
  {
    "text": "some structures with also a pin macro",
    "start": "1096980",
    "end": "1099080"
  },
  {
    "text": "somehow sprinkled on them",
    "start": "1099080",
    "end": "1102080"
  },
  {
    "text": "um",
    "start": "1102080",
    "end": "1103340"
  },
  {
    "text": "you know in other sacred runes",
    "start": "1103340",
    "end": "1105440"
  },
  {
    "text": "throughout their code base uh and hope",
    "start": "1105440",
    "end": "1107059"
  },
  {
    "text": "for the best this is me I'm pretty much",
    "start": "1107059",
    "end": "1109280"
  },
  {
    "text": "on this team I'm on team Arc mutex",
    "start": "1109280",
    "end": "1112700"
  },
  {
    "text": "you know",
    "start": "1112700",
    "end": "1114080"
  },
  {
    "text": "I'll take option two the thing is is",
    "start": "1114080",
    "end": "1116120"
  },
  {
    "text": "that you gotta remember that when they",
    "start": "1116120",
    "end": "1118340"
  },
  {
    "text": "say this what they what they mean is",
    "start": "1118340",
    "end": "1120080"
  },
  {
    "text": "that it's not something like",
    "start": "1120080",
    "end": "1122240"
  },
  {
    "text": "you know like",
    "start": "1122240",
    "end": "1124580"
  },
  {
    "text": "don't worry about that you know like the",
    "start": "1124580",
    "end": "1126620"
  },
  {
    "text": "difference between going from",
    "start": "1126620",
    "end": "1128960"
  },
  {
    "text": "geez uh like I don't understand the Dom",
    "start": "1128960",
    "end": "1134360"
  },
  {
    "text": "because I don't get trees is like it's a",
    "start": "1134360",
    "end": "1138260"
  },
  {
    "text": "small Gap right like we can all agree",
    "start": "1138260",
    "end": "1140059"
  },
  {
    "text": "that that Gap looks something like this",
    "start": "1140059",
    "end": "1142700"
  },
  {
    "text": "right it's a small little Gap",
    "start": "1142700",
    "end": "1145280"
  },
  {
    "text": "right you have to learn a little bit and",
    "start": "1145280",
    "end": "1148580"
  },
  {
    "text": "then you kind of get it and you're like",
    "start": "1148580",
    "end": "1149900"
  },
  {
    "text": "okay I understand how you recursively",
    "start": "1149900",
    "end": "1151580"
  },
  {
    "text": "descend I understand breath first versus",
    "start": "1151580",
    "end": "1153140"
  },
  {
    "text": "depth first search okay I get this",
    "start": "1153140",
    "end": "1155179"
  },
  {
    "text": "whereas I added an a at the end of it",
    "start": "1155179",
    "end": "1158000"
  },
  {
    "text": "whereas when it comes to rust async it's",
    "start": "1158000",
    "end": "1161299"
  },
  {
    "text": "like the amount of stuff you do have to",
    "start": "1161299",
    "end": "1163280"
  },
  {
    "text": "learn you have to actually learn what",
    "start": "1163280",
    "end": "1165020"
  },
  {
    "text": "pin pin is actually doing you have to",
    "start": "1165020",
    "end": "1167600"
  },
  {
    "text": "oopsies uh you have to learn about like",
    "start": "1167600",
    "end": "1169940"
  },
  {
    "text": "what is actually happening with the rust",
    "start": "1169940",
    "end": "1171980"
  },
  {
    "text": "run time and how async is handled what",
    "start": "1171980",
    "end": "1174919"
  },
  {
    "text": "the hell is happening what are all these",
    "start": "1174919",
    "end": "1176600"
  },
  {
    "text": "extra things that are going on why do",
    "start": "1176600",
    "end": "1178640"
  },
  {
    "text": "you have to mark some of these",
    "start": "1178640",
    "end": "1179780"
  },
  {
    "text": "structures as some sort of pin project",
    "start": "1179780",
    "end": "1181160"
  },
  {
    "text": "like it just keeps ongoing right it just",
    "start": "1181160",
    "end": "1184039"
  },
  {
    "text": "keeps on happening and keeps getting",
    "start": "1184039",
    "end": "1185539"
  },
  {
    "text": "thicker and thicker and thicker it takes",
    "start": "1185539",
    "end": "1188480"
  },
  {
    "text": "a while to get over it",
    "start": "1188480",
    "end": "1191000"
  },
  {
    "text": "you know what I mean",
    "start": "1191000",
    "end": "1193160"
  },
  {
    "text": "it just does",
    "start": "1193160",
    "end": "1195500"
  },
  {
    "text": "all right",
    "start": "1195500",
    "end": "1196940"
  },
  {
    "text": "uh rust proponents I'd consider myself",
    "start": "1196940",
    "end": "1199160"
  },
  {
    "text": "one might call these criticisms",
    "start": "1199160",
    "end": "1200900"
  },
  {
    "text": "overblown but I've seen whole teams of",
    "start": "1200900",
    "end": "1202400"
  },
  {
    "text": "experienced developers trying to use",
    "start": "1202400",
    "end": "1203600"
  },
  {
    "text": "rust for some new project mired in this",
    "start": "1203600",
    "end": "1205940"
  },
  {
    "text": "minutia to whatever challenges teaching",
    "start": "1205940",
    "end": "1207799"
  },
  {
    "text": "rust has async adds a whole new set",
    "start": "1207799",
    "end": "1209720"
  },
  {
    "text": "agreed cries nasync is a real meme",
    "start": "1209720",
    "end": "1212000"
  },
  {
    "text": "because it really exists right it really",
    "start": "1212000",
    "end": "1214760"
  },
  {
    "text": "really exists rust is like a learning",
    "start": "1214760",
    "end": "1216919"
  },
  {
    "text": "pointers and mallex all over again yeah",
    "start": "1216919",
    "end": "1218720"
  },
  {
    "text": "but it's eat like honestly just rust",
    "start": "1218720",
    "end": "1222140"
  },
  {
    "text": "it's pretty simple right like I",
    "start": "1222140",
    "end": "1224660"
  },
  {
    "text": "genuinely just rust a little CLI that",
    "start": "1224660",
    "end": "1227059"
  },
  {
    "text": "does something it's pretty",
    "start": "1227059",
    "end": "1228500"
  },
  {
    "text": "straightforward but the moment you get",
    "start": "1228500",
    "end": "1230299"
  },
  {
    "text": "into these like some of the more Arcane",
    "start": "1230299",
    "end": "1232580"
  },
  {
    "text": "sides of rust the difficulty is just",
    "start": "1232580",
    "end": "1235880"
  },
  {
    "text": "like a serious step function harder",
    "start": "1235880",
    "end": "1237919"
  },
  {
    "text": "right you're not learning you're",
    "start": "1237919",
    "end": "1239299"
  },
  {
    "text": "learning both a concept and how to",
    "start": "1239299",
    "end": "1241400"
  },
  {
    "text": "express it in rust's kind of constricted",
    "start": "1241400",
    "end": "1244340"
  },
  {
    "text": "language and how they do things sink",
    "start": "1244340",
    "end": "1247340"
  },
  {
    "text": "rust a day async rust",
    "start": "1247340",
    "end": "1250039"
  },
  {
    "text": "that",
    "start": "1250039",
    "end": "1252500"
  },
  {
    "text": "uh to a degree to which these problems",
    "start": "1252500",
    "end": "1254299"
  },
  {
    "text": "aren't just a thing in other languages",
    "start": "1254299",
    "end": "1255620"
  },
  {
    "text": "can't be overstated in Haskell or go",
    "start": "1255620",
    "end": "1257480"
  },
  {
    "text": "async code is normal code you might say",
    "start": "1257480",
    "end": "1260120"
  },
  {
    "text": "this isn't a fair comparison after all",
    "start": "1260120",
    "end": "1261559"
  },
  {
    "text": "those languages hide differences between",
    "start": "1261559",
    "end": "1263000"
  },
  {
    "text": "blocking and non-blocking code behind a",
    "start": "1263000",
    "end": "1264740"
  },
  {
    "text": "fat runtime and lifetimes are hand waved",
    "start": "1264740",
    "end": "1267200"
  },
  {
    "text": "with garbage collection but that's",
    "start": "1267200",
    "end": "1268280"
  },
  {
    "text": "exactly the point these are pure wins",
    "start": "1268280",
    "end": "1270320"
  },
  {
    "text": "they are doing with this sort of",
    "start": "1270320",
    "end": "1271460"
  },
  {
    "text": "programming it's true",
    "start": "1271460",
    "end": "1273380"
  },
  {
    "text": "it's very true maybe rust isn't a good",
    "start": "1273380",
    "end": "1275480"
  },
  {
    "text": "tool for massively concurrent user space",
    "start": "1275480",
    "end": "1277160"
  },
  {
    "text": "software uh we can save it for the 99 of",
    "start": "1277160",
    "end": "1280039"
  },
  {
    "text": "our projects that don't have to be I",
    "start": "1280039",
    "end": "1282080"
  },
  {
    "text": "love rust when doing CLI tools I love",
    "start": "1282080",
    "end": "1286160"
  },
  {
    "text": "rust for CLI tools so yeah I agree with",
    "start": "1286160",
    "end": "1289220"
  },
  {
    "text": "this I like I genuinely agree with that",
    "start": "1289220",
    "end": "1291020"
  },
  {
    "text": "statement one a file which could be on",
    "start": "1291020",
    "end": "1293000"
  },
  {
    "text": "the other side of the Internet thanks uh",
    "start": "1293000",
    "end": "1295720"
  },
  {
    "text": "NFS I'm not sure what that is",
    "start": "1295720",
    "end": "1298340"
  },
  {
    "text": "um",
    "start": "1298340",
    "end": "1298940"
  },
  {
    "text": "until we could cut down IPC overhead by",
    "start": "1298940",
    "end": "1301100"
  },
  {
    "text": "sharing memory between processes but uh",
    "start": "1301100",
    "end": "1303140"
  },
  {
    "text": "but this gives us but this gives away",
    "start": "1303140",
    "end": "1305240"
  },
  {
    "text": "one of the main advantages of multiple",
    "start": "1305240",
    "end": "1306919"
  },
  {
    "text": "processes the OS isolated from each",
    "start": "1306919",
    "end": "1308900"
  },
  {
    "text": "other yep I like that Mara boss recently",
    "start": "1308900",
    "end": "1311059"
  },
  {
    "text": "put out a fantastic book that despite",
    "start": "1311059",
    "end": "1312500"
  },
  {
    "text": "targeting Russ specifically does a",
    "start": "1312500",
    "end": "1314059"
  },
  {
    "text": "wonderful job explaining the",
    "start": "1314059",
    "end": "1314960"
  },
  {
    "text": "fundamentals of low-level concurrency in",
    "start": "1314960",
    "end": "1316940"
  },
  {
    "text": "any language uh yeah I I've read I've",
    "start": "1316940",
    "end": "1319100"
  },
  {
    "text": "read through most the books pretty good",
    "start": "1319100",
    "end": "1320240"
  },
  {
    "text": "like it's pretty good book if you don't",
    "start": "1320240",
    "end": "1321799"
  },
  {
    "text": "have time to for the whole book I've",
    "start": "1321799",
    "end": "1323299"
  },
  {
    "text": "done my best to sum it up in a few pages",
    "start": "1323299",
    "end": "1324860"
  },
  {
    "text": "also super cool of course I'm",
    "start": "1324860",
    "end": "1327140"
  },
  {
    "text": "simplifying here not every programmer",
    "start": "1327140",
    "end": "1328760"
  },
  {
    "text": "can express uh not every program could",
    "start": "1328760",
    "end": "1330980"
  },
  {
    "text": "be expressed as a dag Fair you'll find",
    "start": "1330980",
    "end": "1333140"
  },
  {
    "text": "good occasions for other Primitives say",
    "start": "1333140",
    "end": "1335000"
  },
  {
    "text": "Atomic Flags to indicate changes in",
    "start": "1335000",
    "end": "1336679"
  },
  {
    "text": "global State still horse model is great",
    "start": "1336679",
    "end": "1338780"
  },
  {
    "text": "default and I've always found it helpful",
    "start": "1338780",
    "end": "1340580"
  },
  {
    "text": "to think about how data flows through my",
    "start": "1340580",
    "end": "1342380"
  },
  {
    "text": "system",
    "start": "1342380",
    "end": "1343340"
  },
  {
    "text": "each thread has four kilobyte control",
    "start": "1343340",
    "end": "1345020"
  },
  {
    "text": "block and Linux and switching between",
    "start": "1345020",
    "end": "1346760"
  },
  {
    "text": "threads require a trip to the operating",
    "start": "1346760",
    "end": "1348380"
  },
  {
    "text": "system scheduler this context switch to",
    "start": "1348380",
    "end": "1350419"
  },
  {
    "text": "the OS memory is much more expensive",
    "start": "1350419",
    "end": "1352220"
  },
  {
    "text": "than a normal function call Fair uh",
    "start": "1352220",
    "end": "1354980"
  },
  {
    "text": "uniquely rust doesn't provide a runtime",
    "start": "1354980",
    "end": "1356659"
  },
  {
    "text": "for its Futures in the language",
    "start": "1356659",
    "end": "1357799"
  },
  {
    "text": "delegating instead to libraries like",
    "start": "1357799",
    "end": "1359720"
  },
  {
    "text": "Tokyo this is great for users rust",
    "start": "1359720",
    "end": "1361940"
  },
  {
    "text": "builds tool cargo and ecosystem gives",
    "start": "1361940",
    "end": "1363799"
  },
  {
    "text": "developers freedom to choose",
    "start": "1363799",
    "end": "1364940"
  },
  {
    "text": "Alternatives that are better suit unique",
    "start": "1364940",
    "end": "1366799"
  },
  {
    "text": "environments they find themselves in",
    "start": "1366799",
    "end": "1368179"
  },
  {
    "text": "that's that's true that's true I mean it",
    "start": "1368179",
    "end": "1370460"
  },
  {
    "text": "sucks that people like Tokyo also have",
    "start": "1370460",
    "end": "1373340"
  },
  {
    "text": "to shoulder the community for most",
    "start": "1373340",
    "end": "1375140"
  },
  {
    "text": "concurrency",
    "start": "1375140",
    "end": "1377140"
  },
  {
    "text": "Tokyo right like I I do think that that",
    "start": "1377140",
    "end": "1379760"
  },
  {
    "text": "is the sucky downside of this is that",
    "start": "1379760",
    "end": "1381679"
  },
  {
    "text": "people who develop these alternatives",
    "start": "1381679",
    "end": "1383780"
  },
  {
    "text": "are truly like that's a pretty tough job",
    "start": "1383780",
    "end": "1388280"
  },
  {
    "text": "to have but it's a detail that largely",
    "start": "1388280",
    "end": "1390320"
  },
  {
    "text": "immaterial to our discussion one that",
    "start": "1390320",
    "end": "1392059"
  },
  {
    "text": "can imagine a world where Tokyo is built",
    "start": "1392059",
    "end": "1393799"
  },
  {
    "text": "into another language and all the same",
    "start": "1393799",
    "end": "1395000"
  },
  {
    "text": "rules apply",
    "start": "1395000",
    "end": "1396320"
  },
  {
    "text": "you can break a chain by commanding the",
    "start": "1396320",
    "end": "1398120"
  },
  {
    "text": "entire runtime to uh block on this is",
    "start": "1398120",
    "end": "1400400"
  },
  {
    "text": "true and I've done it many times on a",
    "start": "1400400",
    "end": "1401780"
  },
  {
    "text": "completion of a future you probably",
    "start": "1401780",
    "end": "1403280"
  },
  {
    "text": "shouldn't do this pervasively since it",
    "start": "1403280",
    "end": "1405500"
  },
  {
    "text": "isn't composable if a function blocks on",
    "start": "1405500",
    "end": "1407480"
  },
  {
    "text": "a future and that future calls a",
    "start": "1407480",
    "end": "1408799"
  },
  {
    "text": "function that blocks on the future",
    "start": "1408799",
    "end": "1409760"
  },
  {
    "text": "congrats runtime panics",
    "start": "1409760",
    "end": "1412100"
  },
  {
    "text": "um facts eight uh learn more in without",
    "start": "1412100",
    "end": "1416299"
  },
  {
    "text": "boats future and segmented stacks and",
    "start": "1416299",
    "end": "1419179"
  },
  {
    "text": "the C plus plus paper okay cool Amos",
    "start": "1419179",
    "end": "1421640"
  },
  {
    "text": "Wagner AKA fast and limes pin and",
    "start": "1421640",
    "end": "1423679"
  },
  {
    "text": "suffering is a fantastic snarky intro",
    "start": "1423679",
    "end": "1425419"
  },
  {
    "text": "there you go",
    "start": "1425419",
    "end": "1426919"
  },
  {
    "text": "now you see it all I actually agree with",
    "start": "1426919",
    "end": "1430159"
  },
  {
    "text": "this I think that uh my Ventures into",
    "start": "1430159",
    "end": "1433600"
  },
  {
    "text": "async rust though I built several",
    "start": "1433600",
    "end": "1436580"
  },
  {
    "text": "programs that I'm happy about and I've",
    "start": "1436580",
    "end": "1438200"
  },
  {
    "text": "done well",
    "start": "1438200",
    "end": "1439760"
  },
  {
    "text": "um and I'm very very happy that I did",
    "start": "1439760",
    "end": "1441500"
  },
  {
    "text": "some using a bunch of async awaits I'm",
    "start": "1441500",
    "end": "1443539"
  },
  {
    "text": "not in fact like if you look at this",
    "start": "1443539",
    "end": "1445039"
  },
  {
    "text": "little shooter game My Little oopsies uh",
    "start": "1445039",
    "end": "1446960"
  },
  {
    "text": "I just did the wrong thing there",
    "start": "1446960",
    "end": "1448640"
  },
  {
    "text": "um",
    "start": "1448640",
    "end": "1449360"
  },
  {
    "text": "I just what is happening my brain just",
    "start": "1449360",
    "end": "1452360"
  },
  {
    "text": "just totally went to twice I used a",
    "start": "1452360",
    "end": "1456080"
  },
  {
    "text": "bunch of like I used semaphores to kind",
    "start": "1456080",
    "end": "1458240"
  },
  {
    "text": "of do this and do some nice little fun",
    "start": "1458240",
    "end": "1460159"
  },
  {
    "text": "things right here and join a couple",
    "start": "1460159",
    "end": "1461900"
  },
  {
    "text": "little items right here",
    "start": "1461900",
    "end": "1464419"
  },
  {
    "text": "enjoyed it very very much doing this",
    "start": "1464419",
    "end": "1466159"
  },
  {
    "text": "kind of stuff I I I I have actually",
    "start": "1466159",
    "end": "1468200"
  },
  {
    "text": "enjoyed these kind of things and I think",
    "start": "1468200",
    "end": "1469940"
  },
  {
    "text": "it's really fun to use semaphores and",
    "start": "1469940",
    "end": "1471380"
  },
  {
    "text": "all that but ultimately at the end of",
    "start": "1471380",
    "end": "1472820"
  },
  {
    "text": "the day I'm still relying on the async",
    "start": "1472820",
    "end": "1474980"
  },
  {
    "text": "nature of it and I do a bunch of box",
    "start": "1474980",
    "end": "1476780"
  },
  {
    "text": "leakings for that exact same reason I",
    "start": "1476780",
    "end": "1479299"
  },
  {
    "text": "just need a static reference right I",
    "start": "1479299",
    "end": "1481220"
  },
  {
    "text": "just need a reference out that I can",
    "start": "1481220",
    "end": "1483080"
  },
  {
    "text": "just have everybody else uh using this",
    "start": "1483080",
    "end": "1485780"
  },
  {
    "text": "article screams uh skill issue so I",
    "start": "1485780",
    "end": "1488299"
  },
  {
    "text": "don't",
    "start": "1488299",
    "end": "1489200"
  },
  {
    "text": "my big problem with this",
    "start": "1489200",
    "end": "1492140"
  },
  {
    "text": "is that I don't believe that you know",
    "start": "1492140",
    "end": "1494419"
  },
  {
    "text": "what I mean because here's the problem",
    "start": "1494419",
    "end": "1495559"
  },
  {
    "text": "with that statement in general and and",
    "start": "1495559",
    "end": "1497120"
  },
  {
    "text": "one of the reasons why I I semi-dislike",
    "start": "1497120",
    "end": "1499159"
  },
  {
    "text": "the phrase skill issue is that some are",
    "start": "1499159",
    "end": "1501440"
  },
  {
    "text": "just genuine skill issues but some the",
    "start": "1501440",
    "end": "1504200"
  },
  {
    "text": "requirement to be good at async rust not",
    "start": "1504200",
    "end": "1507320"
  },
  {
    "text": "just like kind of good right you could",
    "start": "1507320",
    "end": "1508580"
  },
  {
    "text": "build a simple web server that cruds out",
    "start": "1508580",
    "end": "1510860"
  },
  {
    "text": "stuff that does stuff not hard async we",
    "start": "1510860",
    "end": "1512840"
  },
  {
    "text": "could all do that super simple throw up",
    "start": "1512840",
    "end": "1514820"
  },
  {
    "text": "a turso client hit the database really",
    "start": "1514820",
    "end": "1517280"
  },
  {
    "text": "easily by the way Tercel is doing",
    "start": "1517280",
    "end": "1518539"
  },
  {
    "text": "something incredible that I'll be",
    "start": "1518539",
    "end": "1520220"
  },
  {
    "text": "talking about here soon that involves a",
    "start": "1520220",
    "end": "1522140"
  },
  {
    "text": "millisecond transactions or a micro",
    "start": "1522140",
    "end": "1524120"
  },
  {
    "text": "second transactions it's incredible",
    "start": "1524120",
    "end": "1526640"
  },
  {
    "text": "um but nonetheless it's like",
    "start": "1526640",
    "end": "1529039"
  },
  {
    "text": "that's simple simple async is simple in",
    "start": "1529039",
    "end": "1532279"
  },
  {
    "text": "Rust large async",
    "start": "1532279",
    "end": "1535279"
  },
  {
    "text": "uh large async programs become very hard",
    "start": "1535279",
    "end": "1538700"
  },
  {
    "text": "in Rust and can become very hard and",
    "start": "1538700",
    "end": "1540500"
  },
  {
    "text": "rust and so I really don't think that",
    "start": "1540500",
    "end": "1543320"
  },
  {
    "text": "um",
    "start": "1543320",
    "end": "1544820"
  },
  {
    "text": "I don't think this article is far off",
    "start": "1544820",
    "end": "1546740"
  },
  {
    "text": "I think that's why again I just really",
    "start": "1546740",
    "end": "1548539"
  },
  {
    "text": "really love uh and the thing is is that",
    "start": "1548539",
    "end": "1551900"
  },
  {
    "text": "when you have to do something like if",
    "start": "1551900",
    "end": "1553640"
  },
  {
    "text": "you're going to get a group of people to",
    "start": "1553640",
    "end": "1554960"
  },
  {
    "text": "try to learn async rust to the fullest",
    "start": "1554960",
    "end": "1557120"
  },
  {
    "text": "extent you're asking them to learn rust",
    "start": "1557120",
    "end": "1559640"
  },
  {
    "text": "to an exceptionally deep level that's",
    "start": "1559640",
    "end": "1562940"
  },
  {
    "text": "like do you just want to be a rust only",
    "start": "1562940",
    "end": "1566600"
  },
  {
    "text": "Andy or are you someone that's more like",
    "start": "1566600",
    "end": "1568760"
  },
  {
    "text": "I'm",
    "start": "1568760",
    "end": "1569779"
  },
  {
    "text": "truly trying to be someone that works on",
    "start": "1569779",
    "end": "1571940"
  },
  {
    "text": "many stacks of any kind and so that's",
    "start": "1571940",
    "end": "1575059"
  },
  {
    "text": "kind of the thing you have to choose to",
    "start": "1575059",
    "end": "1576559"
  },
  {
    "text": "do and I'm not saying it's bad I like",
    "start": "1576559",
    "end": "1579260"
  },
  {
    "text": "rust but I like to go and I also like",
    "start": "1579260",
    "end": "1581120"
  },
  {
    "text": "typescript and I also don't mind working",
    "start": "1581120",
    "end": "1583520"
  },
  {
    "text": "in just JavaScript with JS Doc and I",
    "start": "1583520",
    "end": "1586039"
  },
  {
    "text": "also don't mind working in Lua and when",
    "start": "1586039",
    "end": "1588320"
  },
  {
    "text": "I have to I've done that one big",
    "start": "1588320",
    "end": "1590059"
  },
  {
    "text": "gigantic multi-threaded objective-c",
    "start": "1590059",
    "end": "1591799"
  },
  {
    "text": "program that was pretty terrible because",
    "start": "1591799",
    "end": "1593360"
  },
  {
    "text": "I hate Objective C I'll even work in a C",
    "start": "1593360",
    "end": "1595340"
  },
  {
    "text": "plus plus I'd love to get into oh camel",
    "start": "1595340",
    "end": "1597320"
  },
  {
    "text": "right and so it's like for me it's like",
    "start": "1597320",
    "end": "1599360"
  },
  {
    "text": "I'm fine kind of being in a bunch of",
    "start": "1599360",
    "end": "1601220"
  },
  {
    "text": "places you know what I mean I'm fine",
    "start": "1601220",
    "end": "1602779"
  },
  {
    "text": "doing a bunch of stuff but it also means",
    "start": "1602779",
    "end": "1604460"
  },
  {
    "text": "I can't go super deep to the level of",
    "start": "1604460",
    "end": "1607460"
  },
  {
    "text": "understanding rust async at a compiler",
    "start": "1607460",
    "end": "1609919"
  },
  {
    "text": "level because that would just be really",
    "start": "1609919",
    "end": "1611539"
  },
  {
    "text": "hard but I could get there I mean",
    "start": "1611539",
    "end": "1612980"
  },
  {
    "text": "theoretically I could just take that",
    "start": "1612980",
    "end": "1614720"
  },
  {
    "text": "amount of time and and do it",
    "start": "1614720",
    "end": "1617059"
  },
  {
    "text": "I like TS yeah TS is just fine TS",
    "start": "1617059",
    "end": "1621080"
  },
  {
    "text": "here's the deal typescript takes a",
    "start": "1621080",
    "end": "1623299"
  },
  {
    "text": "shitty language and makes it slightly",
    "start": "1623299",
    "end": "1624980"
  },
  {
    "text": "less shitty anyways I don't mind",
    "start": "1624980",
    "end": "1627440"
  },
  {
    "text": "typescript I just think it's still a",
    "start": "1627440",
    "end": "1629120"
  },
  {
    "text": "shitty language it still has shitty",
    "start": "1629120",
    "end": "1630620"
  },
  {
    "text": "things and I think large typescript",
    "start": "1630620",
    "end": "1631880"
  },
  {
    "text": "programs are bound to be incredibly",
    "start": "1631880",
    "end": "1634100"
  },
  {
    "text": "emotional right that no matter how much",
    "start": "1634100",
    "end": "1636860"
  },
  {
    "text": "you want it to be good it is a it is an",
    "start": "1636860",
    "end": "1639740"
  },
  {
    "text": "act of refactoring types and logic that",
    "start": "1639740",
    "end": "1642919"
  },
  {
    "text": "is very annoying",
    "start": "1642919",
    "end": "1644720"
  },
  {
    "text": "um",
    "start": "1644720",
    "end": "1645799"
  },
  {
    "text": "so that's that small programs I really",
    "start": "1645799",
    "end": "1648140"
  },
  {
    "text": "am fine using typescript you know if I",
    "start": "1648140",
    "end": "1650600"
  },
  {
    "text": "just need to get something really quick",
    "start": "1650600",
    "end": "1651740"
  },
  {
    "text": "I'll just use that sometimes that'll",
    "start": "1651740",
    "end": "1653539"
  },
  {
    "text": "rust I tend to use rust or typescript",
    "start": "1653539",
    "end": "1655520"
  },
  {
    "text": "for a quick CLI app depending on how I'm",
    "start": "1655520",
    "end": "1657380"
  },
  {
    "text": "running it now that I have bun I'll",
    "start": "1657380",
    "end": "1659360"
  },
  {
    "text": "probably use typescript more frequently",
    "start": "1659360",
    "end": "1661640"
  },
  {
    "text": "for something easy",
    "start": "1661640",
    "end": "1663020"
  },
  {
    "text": "so just thoughts but I like this I like",
    "start": "1663020",
    "end": "1665120"
  },
  {
    "text": "this take I actually really like this",
    "start": "1665120",
    "end": "1666260"
  },
  {
    "text": "take great job bit bashing sweet article",
    "start": "1666260",
    "end": "1668720"
  },
  {
    "text": "that was a sweet article",
    "start": "1668720",
    "end": "1670460"
  },
  {
    "text": "typically whenever I do anything to with",
    "start": "1670460",
    "end": "1672679"
  },
  {
    "text": "the CLI I I I actually uh pick",
    "start": "1672679",
    "end": "1675919"
  },
  {
    "text": "um rust instead of a node because I want",
    "start": "1675919",
    "end": "1678320"
  },
  {
    "text": "to write typescript but I don't want to",
    "start": "1678320",
    "end": "1679580"
  },
  {
    "text": "build a build system and uh TS TS node",
    "start": "1679580",
    "end": "1682340"
  },
  {
    "text": "or any of these other Runners are just",
    "start": "1682340",
    "end": "1684020"
  },
  {
    "text": "really annoying to set up and then",
    "start": "1684020",
    "end": "1685700"
  },
  {
    "text": "setting up everything is also super",
    "start": "1685700",
    "end": "1687440"
  },
  {
    "text": "annoying to set up so I just tend to not",
    "start": "1687440",
    "end": "1689360"
  },
  {
    "text": "ever use that but now that Bun's there",
    "start": "1689360",
    "end": "1691580"
  },
  {
    "text": "maybe I could see myself using it but",
    "start": "1691580",
    "end": "1693919"
  },
  {
    "text": "there's still a lot more that I'll have",
    "start": "1693919",
    "end": "1695120"
  },
  {
    "text": "to think about you know what I mean a TS",
    "start": "1695120",
    "end": "1696980"
  },
  {
    "text": "node hurts it does it's an emotional",
    "start": "1696980",
    "end": "1698419"
  },
  {
    "text": "pain and then you got like this TS paths",
    "start": "1698419",
    "end": "1699980"
  },
  {
    "text": "issue and it just every single time I",
    "start": "1699980",
    "end": "1702260"
  },
  {
    "text": "get super pissed off at it",
    "start": "1702260",
    "end": "1703940"
  },
  {
    "text": "you know what I mean I get just super",
    "start": "1703940",
    "end": "1705860"
  },
  {
    "text": "pissed yeah Dino maybe I do need to",
    "start": "1705860",
    "end": "1707960"
  },
  {
    "text": "invest a little bit more into Dino yeah",
    "start": "1707960",
    "end": "1709580"
  },
  {
    "text": "I agree I I fully I by the way I'm fully",
    "start": "1709580",
    "end": "1711500"
  },
  {
    "text": "angry and so Striker I actually I have a",
    "start": "1711500",
    "end": "1713659"
  },
  {
    "text": "video dropping here maybe next week on",
    "start": "1713659",
    "end": "1715400"
  },
  {
    "text": "bun and my real impressions of bun it is",
    "start": "1715400",
    "end": "1718220"
  },
  {
    "text": "not production ready one is a lie",
    "start": "1718220",
    "end": "1721460"
  },
  {
    "text": "the name",
    "start": "1721460",
    "end": "1722840"
  },
  {
    "text": "is",
    "start": "1722840",
    "end": "1723980"
  },
  {
    "text": "the asyncogen",
    "start": "1723980",
    "end": "1727120"
  }
]