[
  {
    "text": "all right here we go we got crab Lang",
    "start": "199",
    "end": "2679"
  },
  {
    "text": "and and C++ it's going to happen let's",
    "start": "2679",
    "end": "5200"
  },
  {
    "text": "do this at what point does C++ become",
    "start": "5200",
    "end": "8480"
  },
  {
    "text": "every language when does C++ get curring",
    "start": "8480",
    "end": "11759"
  },
  {
    "text": "in the syntax of oaml and at that point",
    "start": "11759",
    "end": "14920"
  },
  {
    "text": "could one argue you're always",
    "start": "14920",
    "end": "17640"
  },
  {
    "text": "programming in C++ when it adds every",
    "start": "17640",
    "end": "21080"
  },
  {
    "text": "feature from every language every",
    "start": "21080",
    "end": "23320"
  },
  {
    "text": "language every feature C++ you're always",
    "start": "23320",
    "end": "26920"
  },
  {
    "text": "technically programming in C++ pattern",
    "start": "26920",
    "end": "29119"
  },
  {
    "text": "matching oh my goodness pattern matching",
    "start": "29119",
    "end": "30480"
  },
  {
    "text": "soon really does that may uh does this",
    "start": "30480",
    "end": "32640"
  },
  {
    "text": "make it C++ yeah I've been programming",
    "start": "32640",
    "end": "34600"
  },
  {
    "text": "C+ look look at this C++ going right",
    "start": "34600",
    "end": "36879"
  },
  {
    "text": "here look at how good this is that's P",
    "start": "36879",
    "end": "39320"
  },
  {
    "text": "C++ will soon uh soon incorporate the",
    "start": "39320",
    "end": "43640"
  },
  {
    "text": "what I like to call the turo 2 uh uh",
    "start": "43640",
    "end": "46360"
  },
  {
    "text": "light ship bad guy operator it's a",
    "start": "46360",
    "end": "49120"
  },
  {
    "text": "mouthful some people call it the wallor",
    "start": "49120",
    "end": "50920"
  },
  {
    "text": "operator this guy right here instead of",
    "start": "50920",
    "end": "52640"
  },
  {
    "text": "doing Auto you can just now do that",
    "start": "52640",
    "end": "55160"
  },
  {
    "text": "operator and it will just do Auto for",
    "start": "55160",
    "end": "57039"
  },
  {
    "text": "you it's pretty great C++ going to take",
    "start": "57039",
    "end": "59320"
  },
  {
    "text": "your wi so you got to hide them your",
    "start": "59320",
    "end": "60519"
  },
  {
    "text": "children the TAC Tu yeah it is T Tu uh",
    "start": "60519",
    "end": "64198"
  },
  {
    "text": "soon C++ 2 oh damn if C++ is so good",
    "start": "64199",
    "end": "68840"
  },
  {
    "text": "then why not make C++ 2 to bad [ __ ]",
    "start": "68840",
    "end": "72400"
  },
  {
    "text": "it's already on to C++ 23 okay they've",
    "start": "72400",
    "end": "74960"
  },
  {
    "text": "made so many I don't know if it's",
    "start": "74960",
    "end": "76960"
  },
  {
    "text": "because of the rust Lobby or European",
    "start": "76960",
    "end": "79280"
  },
  {
    "text": "Union regulations but C++ is about to",
    "start": "79280",
    "end": "82280"
  },
  {
    "text": "become a safe language the c classic",
    "start": "82280",
    "end": "84840"
  },
  {
    "text": "gdpr W is that what's is that what's",
    "start": "84840",
    "end": "87240"
  },
  {
    "text": "happening right now European Union once",
    "start": "87240",
    "end": "89680"
  },
  {
    "text": "again SK regulating my American freedoms",
    "start": "89680",
    "end": "94360"
  },
  {
    "text": "plus Community has published a proposal",
    "start": "94360",
    "end": "96360"
  },
  {
    "text": "for a safe C++ that would allow us to",
    "start": "96360",
    "end": "99479"
  },
  {
    "text": "write safer code and spoil all the fun",
    "start": "99479",
    "end": "102240"
  },
  {
    "text": "you can have with the latest C++ 98",
    "start": "102240",
    "end": "105439"
  },
  {
    "text": "standard this proposal basically tries",
    "start": "105439",
    "end": "107640"
  },
  {
    "text": "to bring okay so just just in case",
    "start": "107640",
    "end": "110079"
  },
  {
    "text": "anyone's wondering just in",
    "start": "110079",
    "end": "112479"
  },
  {
    "text": "case uh when it says the latest standard",
    "start": "112479",
    "end": "115600"
  },
  {
    "text": "98 you guys are all like well dude",
    "start": "115600",
    "end": "117320"
  },
  {
    "text": "that's so old there's plenty of new",
    "start": "117320",
    "end": "120320"
  },
  {
    "text": "versions of C++ like the C++ 11 13 17 20",
    "start": "120320",
    "end": "127160"
  },
  {
    "text": "23 um the thing is is that though all",
    "start": "127160",
    "end": "130440"
  },
  {
    "text": "these standards do come out every",
    "start": "130440",
    "end": "133040"
  },
  {
    "text": "company you ever go to work for still is",
    "start": "133040",
    "end": "135599"
  },
  {
    "text": "on 98 so it still hurts a little bit or",
    "start": "135599",
    "end": "137519"
  },
  {
    "text": "they're on that pre C++ 11 you know how",
    "start": "137519",
    "end": "139519"
  },
  {
    "text": "C++ 11 didn't just it wasn't just C++ 11",
    "start": "139519",
    "end": "142760"
  },
  {
    "text": "they're C++ 11 part one and then C++",
    "start": "142760",
    "end": "147000"
  },
  {
    "text": "like Return of the Jedi and no one's on",
    "start": "147000",
    "end": "149200"
  },
  {
    "text": "Return of the Jedi",
    "start": "149200",
    "end": "150440"
  },
  {
    "text": "none of them they're all on a New Hope",
    "start": "150440",
    "end": "152239"
  },
  {
    "text": "and and it's just emotionally painful",
    "start": "152239",
    "end": "154239"
  },
  {
    "text": "just entire and entirely skips The",
    "start": "154239",
    "end": "156160"
  },
  {
    "text": "Empire Strikes Back it's just awful",
    "start": "156160",
    "end": "159440"
  },
  {
    "text": "safety features from rust to C++ but why",
    "start": "159440",
    "end": "162599"
  },
  {
    "text": "not just rewrite everything in Rust then",
    "start": "162599",
    "end": "165000"
  },
  {
    "text": "or why not write all new code in Rust it",
    "start": "165000",
    "end": "167560"
  },
  {
    "text": "can interoperate with C++ right by the",
    "start": "167560",
    "end": "170400"
  },
  {
    "text": "way I know we're we're we're barely into",
    "start": "170400",
    "end": "172400"
  },
  {
    "text": "this but I there's this tweet this",
    "start": "172400",
    "end": "173720"
  },
  {
    "text": "morning and I just wanted to re",
    "start": "173720",
    "end": "175159"
  },
  {
    "text": "highlight it due to how amazing it was",
    "start": "175159",
    "end": "178000"
  },
  {
    "text": "uh let's find it let's find it we're",
    "start": "178000",
    "end": "179120"
  },
  {
    "text": "going we're scrolling we're scrolling it",
    "start": "179120",
    "end": "180640"
  },
  {
    "text": "it should be like right here this is by",
    "start": "180640",
    "end": "183400"
  },
  {
    "text": "the way if you don't know who Justin",
    "start": "183400",
    "end": "184519"
  },
  {
    "text": "Keys is Justin Keys is the guy who",
    "start": "184519",
    "end": "187080"
  },
  {
    "text": "forked Vim to make neovim he is the",
    "start": "187080",
    "end": "189720"
  },
  {
    "text": "benevolent dictator for life of neovim",
    "start": "189720",
    "end": "191959"
  },
  {
    "text": "so if you want to know who he is like",
    "start": "191959",
    "end": "194599"
  },
  {
    "text": "genuine badass right and they have",
    "start": "194599",
    "end": "198519"
  },
  {
    "text": "decided not to do anything with with",
    "start": "198519",
    "end": "200799"
  },
  {
    "text": "rust but has actually decided to go with",
    "start": "200799",
    "end": "203120"
  },
  {
    "text": "zigg and look at this even inside their",
    "start": "203120",
    "end": "205120"
  },
  {
    "text": "poll requests or even inside their",
    "start": "205120",
    "end": "206480"
  },
  {
    "text": "issues playing around right here they're",
    "start": "206480",
    "end": "208480"
  },
  {
    "text": "doing this whole uh",
    "start": "208480",
    "end": "210439"
  },
  {
    "text": "little Zig building Wonderland right now",
    "start": "210439",
    "end": "214080"
  },
  {
    "text": "right where they're actually building",
    "start": "214080",
    "end": "215159"
  },
  {
    "text": "and doing stuff in Zig as opposed to",
    "start": "215159",
    "end": "217000"
  },
  {
    "text": "that and I love I love what he says neim",
    "start": "217000",
    "end": "220120"
  },
  {
    "text": "artfully avoided the rewriting rust",
    "start": "220120",
    "end": "221959"
  },
  {
    "text": "catfish but instead they're just waiting",
    "start": "221959",
    "end": "223599"
  },
  {
    "text": "for",
    "start": "223599",
    "end": "224680"
  },
  {
    "text": "zigg now that my friends that's W",
    "start": "224680",
    "end": "228599"
  },
  {
    "text": "material right there that's W material",
    "start": "228599",
    "end": "231720"
  },
  {
    "text": "again Justin why do you think he's the",
    "start": "231720",
    "end": "233560"
  },
  {
    "text": "benevolent dictator for life of neovim",
    "start": "233560",
    "end": "236480"
  },
  {
    "text": "Lua good choice Justin you know a lot of",
    "start": "236480",
    "end": "240079"
  },
  {
    "text": "people probably would have went with",
    "start": "240079",
    "end": "241760"
  },
  {
    "text": "with JavaScript oh that would have been",
    "start": "241760",
    "end": "243959"
  },
  {
    "text": "fun Imagine actually trying to integrate",
    "start": "243959",
    "end": "246959"
  },
  {
    "text": "V8 into your project that would have",
    "start": "246959",
    "end": "248760"
  },
  {
    "text": "been a full-time job for a year plus",
    "start": "248760",
    "end": "251200"
  },
  {
    "text": "that would have been fun no instead you",
    "start": "251200",
    "end": "252400"
  },
  {
    "text": "chose Lua which took you a day and then",
    "start": "252400",
    "end": "254680"
  },
  {
    "text": "it took you about a year to make sure",
    "start": "254680",
    "end": "255879"
  },
  {
    "text": "all the apis are correct and coherent",
    "start": "255879",
    "end": "258400"
  },
  {
    "text": "and for the most part match the old Vim",
    "start": "258400",
    "end": "261479"
  },
  {
    "text": "style blessings Justin blessings you",
    "start": "261479",
    "end": "264600"
  },
  {
    "text": "focus on the good problems always did",
    "start": "264600",
    "end": "266199"
  },
  {
    "text": "the right thing tree sitter LSP client",
    "start": "266199",
    "end": "269280"
  },
  {
    "text": "Lua the boy's a genius okay the boy is",
    "start": "269280",
    "end": "272039"
  },
  {
    "text": "an actual genius sorry for the uh I got",
    "start": "272039",
    "end": "274880"
  },
  {
    "text": "really distracted there you know I am",
    "start": "274880",
    "end": "276919"
  },
  {
    "text": "I'm out",
    "start": "276919",
    "end": "278000"
  },
  {
    "text": "here I'm just in love okay I'm in love",
    "start": "278000",
    "end": "280520"
  },
  {
    "text": "I'm in",
    "start": "280520",
    "end": "281320"
  },
  {
    "text": "love right well it's not that simple and",
    "start": "281320",
    "end": "284080"
  },
  {
    "text": "the proposal also acknowledges this",
    "start": "284080",
    "end": "286120"
  },
  {
    "text": "point basically there is way too much",
    "start": "286120",
    "end": "288280"
  },
  {
    "text": "code to be Rewritten and the problem",
    "start": "288280",
    "end": "290199"
  },
  {
    "text": "with interrupt is that rust semantics",
    "start": "290199",
    "end": "292720"
  },
  {
    "text": "differ quite a lot from C++ which",
    "start": "292720",
    "end": "295360"
  },
  {
    "text": "affects the way the code is structured",
    "start": "295360",
    "end": "297680"
  },
  {
    "text": "and also would require basically",
    "start": "297680",
    "end": "299919"
  },
  {
    "text": "developer that's older than",
    "start": "299919",
    "end": "303479"
  },
  {
    "text": "45 oh we got to go backwards a little",
    "start": "308840",
    "end": "311240"
  },
  {
    "text": "bit rewrite it in a slightly different",
    "start": "311240",
    "end": "313800"
  },
  {
    "text": "C++ yet completely",
    "start": "313800",
    "end": "317478"
  },
  {
    "text": "incompatible that's funny I'm loving",
    "start": "323479",
    "end": "325600"
  },
  {
    "text": "this okay I feel attacked you should be",
    "start": "325600",
    "end": "327560"
  },
  {
    "text": "C now C++ developer yeah this is very",
    "start": "327560",
    "end": "330520"
  },
  {
    "text": "very good by the way this is really good",
    "start": "330520",
    "end": "333120"
  },
  {
    "text": "45 to completely change his mindset with",
    "start": "333120",
    "end": "335960"
  },
  {
    "text": "this in mind trying to bring safety into",
    "start": "335960",
    "end": "338240"
  },
  {
    "text": "C++ seems quite reasonable that I",
    "start": "338240",
    "end": "340960"
  },
  {
    "text": "thought I thought again uh The Return of",
    "start": "340960",
    "end": "343120"
  },
  {
    "text": "the Jedi C++ C++ 11 part two uh I",
    "start": "343120",
    "end": "347160"
  },
  {
    "text": "thought that one I really should call it",
    "start": "347160",
    "end": "348520"
  },
  {
    "text": "Empire Strikes Back it just doesn't feel",
    "start": "348520",
    "end": "350080"
  },
  {
    "text": "good return of those safety they come",
    "start": "350080",
    "end": "352280"
  },
  {
    "text": "with smart pointers smart pointers is",
    "start": "352280",
    "end": "354639"
  },
  {
    "text": "like early version Ark and RC's and",
    "start": "354639",
    "end": "358160"
  },
  {
    "text": "gives you a lot of the safety that you",
    "start": "358160",
    "end": "359440"
  },
  {
    "text": "need need because with a unique pointer",
    "start": "359440",
    "end": "362319"
  },
  {
    "text": "you effectively have a bunch of compile",
    "start": "362319",
    "end": "364400"
  },
  {
    "text": "time and runtime guarantees with shared",
    "start": "364400",
    "end": "366319"
  },
  {
    "text": "pointers you have an atomic int and you",
    "start": "366319",
    "end": "368479"
  },
  {
    "text": "ensure yeah smart pointers add some",
    "start": "368479",
    "end": "370479"
  },
  {
    "text": "overhead for sure for sure Ray is uh an",
    "start": "370479",
    "end": "373639"
  },
  {
    "text": "early version of safety I you know since",
    "start": "373639",
    "end": "376240"
  },
  {
    "text": "we're on this Star Wars on the Star Wars",
    "start": "376240",
    "end": "379360"
  },
  {
    "text": "reference Ray is a character that nobody",
    "start": "379360",
    "end": "381440"
  },
  {
    "text": "likes and so you saying Ray and me doing",
    "start": "381440",
    "end": "383599"
  },
  {
    "text": "the Star Wars things bringing up a mixed",
    "start": "383599",
    "end": "385440"
  },
  {
    "text": "bag of emotions because we like Ray and",
    "start": "385440",
    "end": "388319"
  },
  {
    "text": "C++ but not in in Star Wars so it's hard",
    "start": "388319",
    "end": "392080"
  },
  {
    "text": "okay be a man do it raw uh unique",
    "start": "392080",
    "end": "394520"
  },
  {
    "text": "pointers do not add any overhead sh",
    "start": "394520",
    "end": "396039"
  },
  {
    "text": "shared pointers do exactly because",
    "start": "396039",
    "end": "397240"
  },
  {
    "text": "shared pointers require an atomic",
    "start": "397240",
    "end": "398400"
  },
  {
    "text": "reference because they're actually an",
    "start": "398400",
    "end": "399440"
  },
  {
    "text": "arc whereas uh unique pointers I believe",
    "start": "399440",
    "end": "403280"
  },
  {
    "text": "are all compile time semantics that",
    "start": "403280",
    "end": "405400"
  },
  {
    "text": "isn't the only such effort in recent",
    "start": "405400",
    "end": "407319"
  },
  {
    "text": "years though Google for example has been",
    "start": "407319",
    "end": "409440"
  },
  {
    "text": "working on carbon for a while now I plan",
    "start": "409440",
    "end": "411880"
  },
  {
    "text": "on taking a look at it sometime soon too",
    "start": "411880",
    "end": "414479"
  },
  {
    "text": "anyways straight to the proposal here",
    "start": "414479",
    "end": "416720"
  },
  {
    "text": "are some properties that safe C++ tries",
    "start": "416720",
    "end": "419120"
  },
  {
    "text": "to deliver a superet of C++ with a safe",
    "start": "419120",
    "end": "422400"
  },
  {
    "text": "subset undefined behavior is prohibited",
    "start": "422400",
    "end": "425160"
  },
  {
    "text": "from originating in the safe subset the",
    "start": "425160",
    "end": "427800"
  },
  {
    "text": "safe and unsafe parts of the language",
    "start": "427800",
    "end": "429879"
  },
  {
    "text": "are clearly delineated users must",
    "start": "429879",
    "end": "432840"
  },
  {
    "text": "explicitly leave the safe context to",
    "start": "432840",
    "end": "435160"
  },
  {
    "text": "write unsafe operations oh it's kind of",
    "start": "435160",
    "end": "437960"
  },
  {
    "text": "like the inverse of rust you'll actually",
    "start": "437960",
    "end": "440240"
  },
  {
    "text": "have like a safe keyword in which it's",
    "start": "440240",
    "end": "443240"
  },
  {
    "text": "you now have to operate in the safe",
    "start": "443240",
    "end": "446560"
  },
  {
    "text": "world I actually like I I like oped in",
    "start": "446560",
    "end": "449720"
  },
  {
    "text": "safety I I do I really really do I think",
    "start": "449720",
    "end": "452360"
  },
  {
    "text": "Zig does it really really well because",
    "start": "452360",
    "end": "454479"
  },
  {
    "text": "you can use options if you want to or",
    "start": "454479",
    "end": "457599"
  },
  {
    "text": "you can use any opeg and void star that",
    "start": "457599",
    "end": "459960"
  },
  {
    "text": "crap you can also allow NS like you get",
    "start": "459960",
    "end": "462240"
  },
  {
    "text": "to kind of opt in you get to kind of",
    "start": "462240",
    "end": "463800"
  },
  {
    "text": "choose where your safety levels are safe",
    "start": "463800",
    "end": "467080"
  },
  {
    "text": "is such a troll well I mean safe in the",
    "start": "467080",
    "end": "469240"
  },
  {
    "text": "sense that you can't do the same level",
    "start": "469240",
    "end": "471000"
  },
  {
    "text": "of memory things when people say safe",
    "start": "471000",
    "end": "473400"
  },
  {
    "text": "this is the Pro by the way this is what",
    "start": "473400",
    "end": "474960"
  },
  {
    "text": "this is actually one of my big like",
    "start": "474960",
    "end": "476680"
  },
  {
    "text": "gripes with rust is people who write",
    "start": "476680",
    "end": "478759"
  },
  {
    "text": "rust keep saying the same stupid",
    "start": "478759",
    "end": "480240"
  },
  {
    "text": "argument over and over again if it",
    "start": "480240",
    "end": "481800"
  },
  {
    "text": "compile it's going to work it's like no",
    "start": "481800",
    "end": "484599"
  },
  {
    "text": "no it's not it's not going to work okay",
    "start": "484599",
    "end": "487120"
  },
  {
    "text": "you're still a shitty programmer and you",
    "start": "487120",
    "end": "488560"
  },
  {
    "text": "still produce shitty code okay rust",
    "start": "488560",
    "end": "491800"
  },
  {
    "text": "isn't going to save you from that rust",
    "start": "491800",
    "end": "493639"
  },
  {
    "text": "has never saved anyone from being a bad",
    "start": "493639",
    "end": "496000"
  },
  {
    "text": "programmer safe simply means you're not",
    "start": "496000",
    "end": "498840"
  },
  {
    "text": "going to accidentally smash your Stacks",
    "start": "498840",
    "end": "501840"
  },
  {
    "text": "okay that's that's what that means logic",
    "start": "501840",
    "end": "503520"
  },
  {
    "text": "errors will always exist I I've created",
    "start": "503520",
    "end": "506360"
  },
  {
    "text": "memory leaks in Rust why because I forg",
    "start": "506360",
    "end": "509520"
  },
  {
    "text": "got to delete keys in a hashmap like",
    "start": "509520",
    "end": "512159"
  },
  {
    "text": "that's normal that's a normal thing you",
    "start": "512159",
    "end": "514640"
  },
  {
    "text": "have skill skill issues I don't I",
    "start": "514640",
    "end": "517000"
  },
  {
    "text": "honestly think rust would do a lot",
    "start": "517000",
    "end": "518518"
  },
  {
    "text": "better in the public eye if they dropped",
    "start": "518519",
    "end": "523000"
  },
  {
    "text": "that stupid Mantra that everyone uh",
    "start": "523000",
    "end": "526040"
  },
  {
    "text": "responds to which is oh if it compiles",
    "start": "526040",
    "end": "528800"
  },
  {
    "text": "it's probably going to work it's",
    "start": "528800",
    "end": "531880"
  },
  {
    "text": "like it's not a good Mantra still need",
    "start": "534000",
    "end": "537480"
  },
  {
    "text": "proper testing for runtime actions yeah",
    "start": "537480",
    "end": "539519"
  },
  {
    "text": "because there's that like there's like",
    "start": "539519",
    "end": "540720"
  },
  {
    "text": "the whole program side it's not stupid",
    "start": "540720",
    "end": "544000"
  },
  {
    "text": "it's literally it's not stupid it's",
    "start": "544000",
    "end": "546440"
  },
  {
    "text": "literally",
    "start": "546440",
    "end": "548640"
  },
  {
    "text": "true it's literally true all right let's",
    "start": "548640",
    "end": "551640"
  },
  {
    "text": "keep going let's keep",
    "start": "551640",
    "end": "553399"
  },
  {
    "text": "going the safe subset must remain useful",
    "start": "553399",
    "end": "556760"
  },
  {
    "text": "if we get rid of a crucial unsafe",
    "start": "556760",
    "end": "558720"
  },
  {
    "text": "technology like unions and pointers we",
    "start": "558720",
    "end": "561360"
  },
  {
    "text": "should Supply a safe alternative like",
    "start": "561360",
    "end": "564079"
  },
  {
    "text": "Choice types and borrows a safe tool",
    "start": "564079",
    "end": "566240"
  },
  {
    "text": "chain is not useful if it's so inex",
    "start": "566240",
    "end": "569000"
  },
  {
    "text": "Express that you can't get your work",
    "start": "569000",
    "end": "570839"
  },
  {
    "text": "done then you that's truly the safest",
    "start": "570839",
    "end": "573360"
  },
  {
    "text": "way the safest programming language is",
    "start": "573360",
    "end": "575720"
  },
  {
    "text": "the language in which you cannot add any",
    "start": "575720",
    "end": "577519"
  },
  {
    "text": "more lines to it's the safest it's the",
    "start": "577519",
    "end": "580480"
  },
  {
    "text": "safest line it's the safest code the one",
    "start": "580480",
    "end": "583480"
  },
  {
    "text": "you can add to uh very accurate I know C",
    "start": "583480",
    "end": "586120"
  },
  {
    "text": "unions yeah so I would assume you'd get",
    "start": "586120",
    "end": "587560"
  },
  {
    "text": "tag unions then right because tag unions",
    "start": "587560",
    "end": "589560"
  },
  {
    "text": "are more safe because you can't",
    "start": "589560",
    "end": "592120"
  },
  {
    "text": "misinterpret what it is is that is I I",
    "start": "592120",
    "end": "594560"
  },
  {
    "text": "assume that is the you know they call",
    "start": "594560",
    "end": "597880"
  },
  {
    "text": "them enums right enumeration whatever",
    "start": "597880",
    "end": "599680"
  },
  {
    "text": "you want to call whatever you want to",
    "start": "599680",
    "end": "600680"
  },
  {
    "text": "call it tagged unions right I assume",
    "start": "600680",
    "end": "602279"
  },
  {
    "text": "this just tag unions are considered safe",
    "start": "602279",
    "end": "604560"
  },
  {
    "text": "and yeah STD STD variant yeah whatever",
    "start": "604560",
    "end": "607360"
  },
  {
    "text": "it's called new system can't break",
    "start": "607360",
    "end": "610160"
  },
  {
    "text": "existing code if you point a safe C++",
    "start": "610160",
    "end": "612839"
  },
  {
    "text": "compiler at existing C++ code that code",
    "start": "612839",
    "end": "616000"
  },
  {
    "text": "must compile normally users op the new",
    "start": "616000",
    "end": "618959"
  },
  {
    "text": "safety mechanisms safe C++ is an",
    "start": "618959",
    "end": "621440"
  },
  {
    "text": "extension of C++ it adds a robust safety",
    "start": "621440",
    "end": "623959"
  },
  {
    "text": "model but it's not a new language safe",
    "start": "623959",
    "end": "626000"
  },
  {
    "text": "C++ will be available under a feature",
    "start": "626000",
    "end": "628160"
  },
  {
    "text": "flag which makes sure the change is",
    "start": "628160",
    "end": "630160"
  },
  {
    "text": "backwards compatible with older code as",
    "start": "630160",
    "end": "632440"
  },
  {
    "text": "everything is opt in this then enables a",
    "start": "632440",
    "end": "634480"
  },
  {
    "text": "bunch of safety checks the way it works",
    "start": "634480",
    "end": "636519"
  },
  {
    "text": "is that it lowers the function",
    "start": "636519",
    "end": "637959"
  },
  {
    "text": "definitions to the midlevel intermediate",
    "start": "637959",
    "end": "640320"
  },
  {
    "text": "representation or M for short and it",
    "start": "640320",
    "end": "643399"
  },
  {
    "text": "performs borrow checking on it exactly",
    "start": "643399",
    "end": "645720"
  },
  {
    "text": "the same as rust we'll then be able to",
    "start": "645720",
    "end": "647600"
  },
  {
    "text": "use the safe keyword after a",
    "start": "647600",
    "end": "650639"
  },
  {
    "text": "fun cool my gob brain when I look by the",
    "start": "650639",
    "end": "654279"
  },
  {
    "text": "way when did it become Funk have I been",
    "start": "654279",
    "end": "656399"
  },
  {
    "text": "out of C++ so long that funk is now a",
    "start": "656399",
    "end": "659320"
  },
  {
    "text": "keyword for function oh yeah",
    "start": "659320",
    "end": "662079"
  },
  {
    "text": "sorry you can't okay first off you can",
    "start": "662079",
    "end": "664440"
  },
  {
    "text": "never name a function Funk because my",
    "start": "664440",
    "end": "666320"
  },
  {
    "text": "gob brain cannot see it okay my",
    "start": "666320",
    "end": "669440"
  },
  {
    "text": "literally I could not see I I I actually",
    "start": "669440",
    "end": "672800"
  },
  {
    "text": "do not contain the ability to see it as",
    "start": "672800",
    "end": "675760"
  },
  {
    "text": "anything but a function definition and",
    "start": "675760",
    "end": "677440"
  },
  {
    "text": "so I'm like trying to figure out how",
    "start": "677440",
    "end": "678600"
  },
  {
    "text": "this works dude cooked for sure yeah",
    "start": "678600",
    "end": "681079"
  },
  {
    "text": "dude I did did just just entirely too",
    "start": "681079",
    "end": "683519"
  },
  {
    "text": "much going right now entirely dude kich",
    "start": "683519",
    "end": "685399"
  },
  {
    "text": "eating bro I've been Kish eating all",
    "start": "685399",
    "end": "688680"
  },
  {
    "text": "right anyways okay so it's a function",
    "start": "688680",
    "end": "690000"
  },
  {
    "text": "named Funk terrible Name by the way",
    "start": "690000",
    "end": "691920"
  },
  {
    "text": "returns an INT and is safe and then you",
    "start": "691920",
    "end": "693959"
  },
  {
    "text": "can do unsafe operations and you can oh",
    "start": "693959",
    "end": "696160"
  },
  {
    "text": "okay so safe is a modifier on a scope I",
    "start": "696160",
    "end": "699040"
  },
  {
    "text": "think that's correct so so you can't",
    "start": "699040",
    "end": "701600"
  },
  {
    "text": "increment a pointer unless if you're in",
    "start": "701600",
    "end": "703160"
  },
  {
    "text": "unsafe mode is that what it's saying",
    "start": "703160",
    "end": "705320"
  },
  {
    "text": "wait a second safe C++ is C++ that's not",
    "start": "705320",
    "end": "708600"
  },
  {
    "text": "doing anything so everything inside of",
    "start": "708600",
    "end": "711560"
  },
  {
    "text": "here will have to be run in an unsafe",
    "start": "711560",
    "end": "713279"
  },
  {
    "text": "block so let me get this straight you",
    "start": "713279",
    "end": "715480"
  },
  {
    "text": "you create a function that's safe and",
    "start": "715480",
    "end": "717600"
  },
  {
    "text": "then every last part of it is unsafe",
    "start": "717600",
    "end": "719720"
  },
  {
    "text": "from there on",
    "start": "719720",
    "end": "721200"
  },
  {
    "text": "out well actually if you write C++ at",
    "start": "721200",
    "end": "724079"
  },
  {
    "text": "all it's actually unsafe so you have to",
    "start": "724079",
    "end": "725680"
  },
  {
    "text": "wrap all of your C++ in an unsafe",
    "start": "725680",
    "end": "727560"
  },
  {
    "text": "bracket you start by calling the",
    "start": "727560",
    "end": "728680"
  },
  {
    "text": "function safe and then you wrap",
    "start": "728680",
    "end": "730600"
  },
  {
    "text": "everything in unsafe uh yes pointer",
    "start": "730600",
    "end": "733000"
  },
  {
    "text": "operations obviously this is unsafe I I",
    "start": "733000",
    "end": "735199"
  },
  {
    "text": "don't think it's very uh I I don't think",
    "start": "735199",
    "end": "738000"
  },
  {
    "text": "it's unintuitive to realize why pointer",
    "start": "738000",
    "end": "739959"
  },
  {
    "text": "operations aren't safe in the sense that",
    "start": "739959",
    "end": "742760"
  },
  {
    "text": "when you add one to a",
    "start": "742760",
    "end": "744880"
  },
  {
    "text": "pointer is it's w is it within or",
    "start": "744880",
    "end": "747560"
  },
  {
    "text": "without the bounds should be pretty",
    "start": "747560",
    "end": "749279"
  },
  {
    "text": "obvious function to basically restrict a",
    "start": "749279",
    "end": "751880"
  },
  {
    "text": "bunch of smartass type of code in its",
    "start": "751880",
    "end": "753839"
  },
  {
    "text": "body one could then use the unsafe",
    "start": "753839",
    "end": "756000"
  },
  {
    "text": "keyword to call the plain old C++",
    "start": "756000",
    "end": "758399"
  },
  {
    "text": "functions or to turn safety features",
    "start": "758399",
    "end": "760839"
  },
  {
    "text": "inside the safe function off for a block",
    "start": "760839",
    "end": "762839"
  },
  {
    "text": "of code all old C++ code is considered",
    "start": "762839",
    "end": "766160"
  },
  {
    "text": "unsafe that's also why this proposal",
    "start": "766160",
    "end": "768079"
  },
  {
    "text": "brings a new standard library in the",
    "start": "768079",
    "end": "770120"
  },
  {
    "text": "std2 name",
    "start": "770120",
    "end": "773279"
  },
  {
    "text": "space if the standard was so good",
    "start": "776880",
    "end": "779760"
  },
  {
    "text": "why not make standard",
    "start": "779760",
    "end": "782079"
  },
  {
    "text": "two they made standard",
    "start": "782079",
    "end": "784560"
  },
  {
    "text": "two you standard two just dropped it it",
    "start": "784560",
    "end": "787440"
  },
  {
    "text": "actually is that good it's actually that",
    "start": "787440",
    "end": "790240"
  },
  {
    "text": "good you have to understand something",
    "start": "790240",
    "end": "792639"
  },
  {
    "text": "which is any set of functionality that",
    "start": "792639",
    "end": "795440"
  },
  {
    "text": "lives on long enough will eventually",
    "start": "795440",
    "end": "797320"
  },
  {
    "text": "have a number two version it will no no",
    "start": "797320",
    "end": "800040"
  },
  {
    "text": "matter what it just happens every single",
    "start": "800040",
    "end": "803040"
  },
  {
    "text": "time this which to my understanding will",
    "start": "803040",
    "end": "805600"
  },
  {
    "text": "replace the whole standard library with",
    "start": "805600",
    "end": "807760"
  },
  {
    "text": "safe Alternatives the The Proposal",
    "start": "807760",
    "end": "809639"
  },
  {
    "text": "defines memory safety using the",
    "start": "809639",
    "end": "811360"
  },
  {
    "text": "following categories lifetime safety",
    "start": "811360",
    "end": "813839"
  },
  {
    "text": "which basically addresses problems with",
    "start": "813839",
    "end": "815880"
  },
  {
    "text": "using uninitialized variables or for",
    "start": "815880",
    "end": "818519"
  },
  {
    "text": "example use after free bugs to address",
    "start": "818519",
    "end": "821040"
  },
  {
    "text": "this safe C++ will feature the borrow",
    "start": "821040",
    "end": "823560"
  },
  {
    "text": "Checker which by the way a number of",
    "start": "823560",
    "end": "825519"
  },
  {
    "text": "other languages also try to implement",
    "start": "825519",
    "end": "827760"
  },
  {
    "text": "type safety EG everything wrong with",
    "start": "827760",
    "end": "830279"
  },
  {
    "text": "null and to prevent this the safe",
    "start": "830279",
    "end": "832360"
  },
  {
    "text": "context will prevent the use of",
    "start": "832360",
    "end": "834240"
  },
  {
    "text": "uninitialized variables and bring a new",
    "start": "834240",
    "end": "836680"
  },
  {
    "text": "form of a destructive move called",
    "start": "836680",
    "end": "839120"
  },
  {
    "text": "relocation which means that you won't be",
    "start": "839120",
    "end": "840959"
  },
  {
    "text": "able to use a variable after you move it",
    "start": "840959",
    "end": "843519"
  },
  {
    "text": "I suppose this is closely connected to",
    "start": "843519",
    "end": "845240"
  },
  {
    "text": "borrow Checker as well then I wonder how",
    "start": "845240",
    "end": "848440"
  },
  {
    "text": "bad the syntax will be for this because",
    "start": "848440",
    "end": "850480"
  },
  {
    "text": "the thing about C++ is it's it's really",
    "start": "850480",
    "end": "852480"
  },
  {
    "text": "modern C++ is not a bad language but",
    "start": "852480",
    "end": "855839"
  },
  {
    "text": "it's just a language you type the word",
    "start": "855839",
    "end": "857399"
  },
  {
    "text": "colon like 9,000 times I feel like the",
    "start": "857399",
    "end": "860600"
  },
  {
    "text": "syntax I just always am I have like a",
    "start": "860600",
    "end": "863800"
  },
  {
    "text": "pretty hard definition when I'm writing",
    "start": "863800",
    "end": "866120"
  },
  {
    "text": "stuff which is I don't like to exceed 80",
    "start": "866120",
    "end": "869120"
  },
  {
    "text": "characters I know that's a weird a lot",
    "start": "869120",
    "end": "871000"
  },
  {
    "text": "of people are",
    "start": "871000",
    "end": "872399"
  },
  {
    "text": "like I know I I do I do exceed it every",
    "start": "872399",
    "end": "874920"
  },
  {
    "text": "now and then I don't mind it this is",
    "start": "874920",
    "end": "876160"
  },
  {
    "text": "just like a general rule of mine is that",
    "start": "876160",
    "end": "877959"
  },
  {
    "text": "when I start exceeding this a bunch it",
    "start": "877959",
    "end": "879639"
  },
  {
    "text": "means I need to refactor that's kind of",
    "start": "879639",
    "end": "881920"
  },
  {
    "text": "like always been in my head but when I",
    "start": "881920",
    "end": "884120"
  },
  {
    "text": "write",
    "start": "884120",
    "end": "884880"
  },
  {
    "text": "C++ I just it just has to be not that I",
    "start": "884880",
    "end": "887959"
  },
  {
    "text": "have to go to 120 there's just there is",
    "start": "887959",
    "end": "890839"
  },
  {
    "text": "no there's no option you can't you can't",
    "start": "890839",
    "end": "893600"
  },
  {
    "text": "help it same with rust rust I do the",
    "start": "893600",
    "end": "895120"
  },
  {
    "text": "exact same thing rust I also have to go",
    "start": "895120",
    "end": "897160"
  },
  {
    "text": "higher right I have to go bigger because",
    "start": "897160",
    "end": "900240"
  },
  {
    "text": "rust has the exact same problem which is",
    "start": "900240",
    "end": "902320"
  },
  {
    "text": "just there's a whole bunch of colons I'm",
    "start": "902320",
    "end": "904279"
  },
  {
    "text": "also curious how they're going to",
    "start": "904279",
    "end": "905360"
  },
  {
    "text": "enforce this considering that C++ has",
    "start": "905360",
    "end": "908920"
  },
  {
    "text": "only been really written in unsafe",
    "start": "908920",
    "end": "911040"
  },
  {
    "text": "version or with unique pointers and so",
    "start": "911040",
    "end": "913279"
  },
  {
    "text": "it feels like unique pointers obviously",
    "start": "913279",
    "end": "914680"
  },
  {
    "text": "would fit nicely into this safe Paradigm",
    "start": "914680",
    "end": "918399"
  },
  {
    "text": "same with uh shared pointers they seem",
    "start": "918399",
    "end": "920360"
  },
  {
    "text": "like they just fit nicely into this",
    "start": "920360",
    "end": "921839"
  },
  {
    "text": "Paradigm but how much of this is like",
    "start": "921839",
    "end": "924560"
  },
  {
    "text": "how much of C++ is just raw dog and",
    "start": "924560",
    "end": "926440"
  },
  {
    "text": "pointers everywhere uh by the way Dan",
    "start": "926440",
    "end": "929000"
  },
  {
    "text": "actually is somebody that works in C++",
    "start": "929000",
    "end": "930800"
  },
  {
    "text": "all the time that's his primary job the",
    "start": "930800",
    "end": "932680"
  },
  {
    "text": "ISS he went to one of my courses that I",
    "start": "932680",
    "end": "935000"
  },
  {
    "text": "did for frontend Masters and he couldn't",
    "start": "935000",
    "end": "936959"
  },
  {
    "text": "follow along because he didn't have node",
    "start": "936959",
    "end": "938560"
  },
  {
    "text": "installed the Bro the bro's real okay",
    "start": "938560",
    "end": "941279"
  },
  {
    "text": "not a kich eater in fact not a kich",
    "start": "941279",
    "end": "943560"
  },
  {
    "text": "eater uh the issue is that most people",
    "start": "943560",
    "end": "945759"
  },
  {
    "text": "don't use anything past C++ 14 except",
    "start": "945759",
    "end": "948199"
  },
  {
    "text": "folks who really need the newest",
    "start": "948199",
    "end": "949639"
  },
  {
    "text": "features folks like high frequency",
    "start": "949639",
    "end": "951000"
  },
  {
    "text": "trading firms so this is uh so if this",
    "start": "951000",
    "end": "953480"
  },
  {
    "text": "has any overhead to it I don't see it",
    "start": "953480",
    "end": "955319"
  },
  {
    "text": "getting much adoption I could be wrong",
    "start": "955319",
    "end": "956920"
  },
  {
    "text": "but just my opinion",
    "start": "956920",
    "end": "959079"
  },
  {
    "text": "and get",
    "start": "959079",
    "end": "960000"
  },
  {
    "text": "deleted get timed out [ __ ] Dan that's",
    "start": "960000",
    "end": "963759"
  },
  {
    "text": "a good reason no no JS is based it is it",
    "start": "963759",
    "end": "966680"
  },
  {
    "text": "is it is very very based so there you go",
    "start": "966680",
    "end": "968160"
  },
  {
    "text": "I just wanted to say that who's banned",
    "start": "968160",
    "end": "970800"
  },
  {
    "text": "uh you know who's banned anyway so",
    "start": "970800",
    "end": "973199"
  },
  {
    "text": "that's an interesting take I'm just",
    "start": "973199",
    "end": "974720"
  },
  {
    "text": "curious how how do you because I know",
    "start": "974720",
    "end": "977399"
  },
  {
    "text": "working with rust and any of the C",
    "start": "977399",
    "end": "980399"
  },
  {
    "text": "libraries or C++ libraries like though",
    "start": "980399",
    "end": "982839"
  },
  {
    "text": "you can though you can do ffi like it",
    "start": "982839",
    "end": "984720"
  },
  {
    "text": "all exists there's a lot of glue and",
    "start": "984720",
    "end": "987160"
  },
  {
    "text": "difficulty code are you going to get the",
    "start": "987160",
    "end": "988519"
  },
  {
    "text": "same thing thing except just when you",
    "start": "988519",
    "end": "990160"
  },
  {
    "text": "interact with other C++ are you going to",
    "start": "990160",
    "end": "992839"
  },
  {
    "text": "have a whole bunch of just stuff you",
    "start": "992839",
    "end": "994680"
  },
  {
    "text": "have to do does that mean every pointer",
    "start": "994680",
    "end": "997199"
  },
  {
    "text": "that comes into a safe function you then",
    "start": "997199",
    "end": "999120"
  },
  {
    "text": "need to convert into a unique pointer or",
    "start": "999120",
    "end": "1001279"
  },
  {
    "text": "you need to convert it into something",
    "start": "1001279",
    "end": "1002839"
  },
  {
    "text": "that is you know safe I don't know I",
    "start": "1002839",
    "end": "1005360"
  },
  {
    "text": "have no",
    "start": "1005360",
    "end": "1006920"
  },
  {
    "text": "idea seems Seems like a very difficult",
    "start": "1006920",
    "end": "1009920"
  },
  {
    "text": "problem and seems like you're going to",
    "start": "1009920",
    "end": "1010800"
  },
  {
    "text": "get a lot a lot a lot of just code to",
    "start": "1010800",
    "end": "1015399"
  },
  {
    "text": "make safe dread saf among other things",
    "start": "1015399",
    "end": "1018920"
  },
  {
    "text": "about data races and problems with",
    "start": "1018920",
    "end": "1021000"
  },
  {
    "text": "classic synchronization I work in",
    "start": "1021000",
    "end": "1023120"
  },
  {
    "text": "graphics there's nothing but C++ I'm",
    "start": "1023120",
    "end": "1025079"
  },
  {
    "text": "curious if Zig is actually going to make",
    "start": "1025079",
    "end": "1026438"
  },
  {
    "text": "a dent in this this is I am genuinely",
    "start": "1026439",
    "end": "1029240"
  },
  {
    "text": "curious about Zig it's the reason why I",
    "start": "1029240",
    "end": "1031120"
  },
  {
    "text": "wanted to learn Zig for this exact",
    "start": "1031120",
    "end": "1032839"
  },
  {
    "text": "reason which is that Zig feels like that",
    "start": "1032839",
    "end": "1035240"
  },
  {
    "text": "the first language to actually make a",
    "start": "1035240",
    "end": "1036959"
  },
  {
    "text": "step forward in the programming world",
    "start": "1036959",
    "end": "1041079"
  },
  {
    "text": "that actually tracks and interacts with",
    "start": "1041079",
    "end": "1044319"
  },
  {
    "text": "c and C++ in a Real Fashion right in a",
    "start": "1044319",
    "end": "1048600"
  },
  {
    "text": "in a in a version that actually is",
    "start": "1048600",
    "end": "1050080"
  },
  {
    "text": "useful you don't have to do a whole",
    "start": "1050080",
    "end": "1052039"
  },
  {
    "text": "bunch of crap to when Zig 1.0 that I",
    "start": "1052039",
    "end": "1054360"
  },
  {
    "text": "don't know I think that's zig's biggest",
    "start": "1054360",
    "end": "1055960"
  },
  {
    "text": "uh thing holding it back Odin I have not",
    "start": "1055960",
    "end": "1058280"
  },
  {
    "text": "used Odin yet that's why I said do I use",
    "start": "1058280",
    "end": "1061600"
  },
  {
    "text": "Odin I'm just curious about that because",
    "start": "1061600",
    "end": "1063520"
  },
  {
    "text": "Zig has all the same stuff Primitives",
    "start": "1063520",
    "end": "1067039"
  },
  {
    "text": "such as mutexes this will be addressed",
    "start": "1067039",
    "end": "1069120"
  },
  {
    "text": "in the same way as in Rust as well by",
    "start": "1069120",
    "end": "1071640"
  },
  {
    "text": "using sand and sync interfaces to quote",
    "start": "1071640",
    "end": "1074880"
  },
  {
    "text": "from The Proposal a type is send if it",
    "start": "1074880",
    "end": "1077400"
  },
  {
    "text": "is safe to send it to another another",
    "start": "1077400",
    "end": "1079080"
  },
  {
    "text": "thread and the type is sync if it is",
    "start": "1079080",
    "end": "1081679"
  },
  {
    "text": "safe to share between threads and",
    "start": "1081679",
    "end": "1083760"
  },
  {
    "text": "finally runtime safety how are they",
    "start": "1083760",
    "end": "1086640"
  },
  {
    "text": "doing that because obviously there's",
    "start": "1086640",
    "end": "1088039"
  },
  {
    "text": "traits in Rust you have to oh you have",
    "start": "1088039",
    "end": "1089919"
  },
  {
    "text": "to do these attributes okay do you have",
    "start": "1089919",
    "end": "1091440"
  },
  {
    "text": "to do that to I want yeah okay that's",
    "start": "1091440",
    "end": "1093919"
  },
  {
    "text": "interesting so you have to throw on some",
    "start": "1093919",
    "end": "1096159"
  },
  {
    "text": "attributes and then you I assume you can",
    "start": "1096159",
    "end": "1097799"
  },
  {
    "text": "use Concepts to kind of narrow down what",
    "start": "1097799",
    "end": "1099520"
  },
  {
    "text": "is allowed think if it is safe to share",
    "start": "1099520",
    "end": "1102240"
  },
  {
    "text": "between threads and finally runtime",
    "start": "1102240",
    "end": "1104480"
  },
  {
    "text": "safety such as inserting panics before",
    "start": "1104480",
    "end": "1107120"
  },
  {
    "text": "index out of range and other bound",
    "start": "1107120",
    "end": "1109159"
  },
  {
    "text": "checking of various types but anyways in",
    "start": "1109159",
    "end": "1111520"
  },
  {
    "text": "my opinion a Reddit user said it best so",
    "start": "1111520",
    "end": "1114000"
  },
  {
    "text": "here is a list of overall improvements",
    "start": "1114000",
    "end": "1116159"
  },
  {
    "text": "from his point of view add a safe",
    "start": "1116159",
    "end": "1118120"
  },
  {
    "text": "specifier in function signatures and",
    "start": "1118120",
    "end": "1120559"
  },
  {
    "text": "unsafe block safe code banss a big pile",
    "start": "1120559",
    "end": "1123200"
  },
  {
    "text": "of operations such as no pointer",
    "start": "1123200",
    "end": "1125559"
  },
  {
    "text": "arithmetic no pointer the referencing no",
    "start": "1125559",
    "end": "1128320"
  },
  {
    "text": "pointer comparisons you can just say no",
    "start": "1128320",
    "end": "1130760"
  },
  {
    "text": "pointer right like that might be a",
    "start": "1130760",
    "end": "1132159"
  },
  {
    "text": "little bit more useful for everybody",
    "start": "1132159",
    "end": "1133679"
  },
  {
    "text": "just you can just sorry dog you can't",
    "start": "1133679",
    "end": "1135919"
  },
  {
    "text": "just raw dog a pointer in here okay it's",
    "start": "1135919",
    "end": "1138000"
  },
  {
    "text": "not going to work not going to be happy",
    "start": "1138000",
    "end": "1140120"
  },
  {
    "text": "no use of union members no inline",
    "start": "1140120",
    "end": "1142559"
  },
  {
    "text": "assembly no use of uninitialized",
    "start": "1142559",
    "end": "1144720"
  },
  {
    "text": "variables they've added some new",
    "start": "1144720",
    "end": "1146520"
  },
  {
    "text": "reference types that enable borrowing",
    "start": "1146520",
    "end": "1148520"
  },
  {
    "text": "and borrow checking most types gain",
    "start": "1148520",
    "end": "1150679"
  },
  {
    "text": "runtime bounce checking with the option",
    "start": "1150679",
    "end": "1152960"
  },
  {
    "text": "to skip the bounce checks where",
    "start": "1152960",
    "end": "1154600"
  },
  {
    "text": "performance really matters then there's",
    "start": "1154600",
    "end": "1156840"
  },
  {
    "text": "the new operation DRP to call the",
    "start": "1156840",
    "end": "1159320"
  },
  {
    "text": "destruction on a local object explicitly",
    "start": "1159320",
    "end": "1162080"
  },
  {
    "text": "and set it back to the uninitialized",
    "start": "1162080",
    "end": "1164039"
  },
  {
    "text": "state and finally threat safety",
    "start": "1164039",
    "end": "1166320"
  },
  {
    "text": "guarantees based on Rust send and sync",
    "start": "1166320",
    "end": "1169039"
  },
  {
    "text": "type traits personally I like how is",
    "start": "1169039",
    "end": "1171799"
  },
  {
    "text": "anyone going to program C++ without all",
    "start": "1171799",
    "end": "1173880"
  },
  {
    "text": "these I'm also curious about the",
    "start": "1173880",
    "end": "1175559"
  },
  {
    "text": "reference type because there has to be",
    "start": "1175559",
    "end": "1177520"
  },
  {
    "text": "some way to relinquish a reference back",
    "start": "1177520",
    "end": "1180039"
  },
  {
    "text": "out to unsafe C so how do you know my",
    "start": "1180039",
    "end": "1183240"
  },
  {
    "text": "brain is just struggling kind of",
    "start": "1183240",
    "end": "1184320"
  },
  {
    "text": "chugging along in this point which is H",
    "start": "1184320",
    "end": "1187360"
  },
  {
    "text": "how how does it work right like I can",
    "start": "1187360",
    "end": "1189679"
  },
  {
    "text": "feel my brain",
    "start": "1189679",
    "end": "1191360"
  },
  {
    "text": "just right there's references by doing",
    "start": "1191360",
    "end": "1193480"
  },
  {
    "text": "it unsafe so you can just unsafely",
    "start": "1193480",
    "end": "1195360"
  },
  {
    "text": "return out a pointer a pointer instead",
    "start": "1195360",
    "end": "1198240"
  },
  {
    "text": "of a ref",
    "start": "1198240",
    "end": "1199440"
  },
  {
    "text": "how does this add a new L value r value",
    "start": "1199440",
    "end": "1201799"
  },
  {
    "text": "x value do we get a new one do we get",
    "start": "1201799",
    "end": "1203679"
  },
  {
    "text": "like some new value s value for safe",
    "start": "1203679",
    "end": "1206559"
  },
  {
    "text": "value is based on Rust scent and sync",
    "start": "1206559",
    "end": "1209799"
  },
  {
    "text": "type traits personally I like the idea",
    "start": "1209799",
    "end": "1212120"
  },
  {
    "text": "overall even though this is still not",
    "start": "1212120",
    "end": "1213880"
  },
  {
    "text": "finished I think that if the semantics",
    "start": "1213880",
    "end": "1216159"
  },
  {
    "text": "and syntax will remain familiar to Old",
    "start": "1216159",
    "end": "1218799"
  },
  {
    "text": "C++ developers C++ might actually remain",
    "start": "1218799",
    "end": "1222200"
  },
  {
    "text": "relevant not just in the next 200 years",
    "start": "1222200",
    "end": "1224960"
  },
  {
    "text": "but also in the next 300 that said I",
    "start": "1224960",
    "end": "1227679"
  },
  {
    "text": "avoided showing you syntax examples from",
    "start": "1227679",
    "end": "1229799"
  },
  {
    "text": "The Proposal since it's not 100% decided",
    "start": "1229799",
    "end": "1233000"
  },
  {
    "text": "on yet and to be frank I'm not sold on",
    "start": "1233000",
    "end": "1235720"
  },
  {
    "text": "the",
    "start": "1235720",
    "end": "1236919"
  },
  {
    "text": "syntax I still that's not",
    "start": "1236919",
    "end": "1241080"
  },
  {
    "text": "real I don't believe it I don't believe",
    "start": "1241159",
    "end": "1243799"
  },
  {
    "text": "it back to rust I know it looks worse",
    "start": "1243799",
    "end": "1246080"
  },
  {
    "text": "than rust this actually looks",
    "start": "1246080",
    "end": "1247320"
  },
  {
    "text": "significantly worse than rust this is",
    "start": "1247320",
    "end": "1249360"
  },
  {
    "text": "Pearl this is a joke we're getting joked",
    "start": "1249360",
    "end": "1251880"
  },
  {
    "text": "on this is just Pearl that's all it is",
    "start": "1251880",
    "end": "1254720"
  },
  {
    "text": "everybody this is just Pearl this is not",
    "start": "1254720",
    "end": "1257559"
  },
  {
    "text": "real okay",
    "start": "1257559",
    "end": "1259760"
  },
  {
    "text": "I refuse to believe that this is",
    "start": "1259760",
    "end": "1262080"
  },
  {
    "text": "anything uh the the hat is AIDS I know",
    "start": "1262080",
    "end": "1265520"
  },
  {
    "text": "what does a what is a what appears to be",
    "start": "1265520",
    "end": "1268679"
  },
  {
    "text": "an exor prefix operator after a star",
    "start": "1268679",
    "end": "1272919"
  },
  {
    "text": "operator this must be a reference what",
    "start": "1272919",
    "end": "1275000"
  },
  {
    "text": "the hell am I looking like what is this",
    "start": "1275000",
    "end": "1277640"
  },
  {
    "text": "my entire existence is a lie I mean I",
    "start": "1277640",
    "end": "1279880"
  },
  {
    "text": "I'm just trying to like run this in my",
    "start": "1279880",
    "end": "1281360"
  },
  {
    "text": "head okay so we must get we must",
    "start": "1281360",
    "end": "1284039"
  },
  {
    "text": "dreference the pointer no no no no no no",
    "start": "1284039",
    "end": "1288000"
  },
  {
    "text": "order of operations it must be we",
    "start": "1288000",
    "end": "1289720"
  },
  {
    "text": "increment the internal pointer we then",
    "start": "1289720",
    "end": "1292400"
  },
  {
    "text": "dreference that internal pointer we then",
    "start": "1292400",
    "end": "1295559"
  },
  {
    "text": "return that as a reference in an",
    "start": "1295559",
    "end": "1298480"
  },
  {
    "text": "optional object did I get that correct",
    "start": "1298480",
    "end": "1302120"
  },
  {
    "text": "am I now C++ Master the this must not be",
    "start": "1302120",
    "end": "1305559"
  },
  {
    "text": "exor since it's a prefix operator which",
    "start": "1305559",
    "end": "1309000"
  },
  {
    "text": "I'm not even sure how you would parse",
    "start": "1309000",
    "end": "1310320"
  },
  {
    "text": "that how do you wait there's also",
    "start": "1310320",
    "end": "1311880"
  },
  {
    "text": "postfix it has to stand for reference",
    "start": "1311880",
    "end": "1314320"
  },
  {
    "text": "how do you do an exor operator then how",
    "start": "1314320",
    "end": "1316760"
  },
  {
    "text": "does how does it know that an exor",
    "start": "1316760",
    "end": "1318559"
  },
  {
    "text": "operator isn't a prefix operator there's",
    "start": "1318559",
    "end": "1321600"
  },
  {
    "text": "oh you're going to have to parentheses",
    "start": "1321600",
    "end": "1322720"
  },
  {
    "text": "it aren't you you're going to have to",
    "start": "1322720",
    "end": "1324760"
  },
  {
    "text": "you have to put parth dude monads are",
    "start": "1324760",
    "end": "1326679"
  },
  {
    "text": "easier than this I know there's tiies I",
    "start": "1326679",
    "end": "1329600"
  },
  {
    "text": "assume it okay so the ti one I also am",
    "start": "1329600",
    "end": "1331880"
  },
  {
    "text": "kind of confused as I think the ti does",
    "start": "1331880",
    "end": "1333960"
  },
  {
    "text": "some sort of pointer casting if you look",
    "start": "1333960",
    "end": "1336159"
  },
  {
    "text": "earlier uh under the the this one right",
    "start": "1336159",
    "end": "1339159"
  },
  {
    "text": "here under the attributes you can query",
    "start": "1339159",
    "end": "1341960"
  },
  {
    "text": "the interface values as T is send and T",
    "start": "1341960",
    "end": "1345039"
  },
  {
    "text": "TI is sync so I assume right here I I",
    "start": "1345039",
    "end": "1348600"
  },
  {
    "text": "assume that's what it is now zero will",
    "start": "1348600",
    "end": "1350720"
  },
  {
    "text": "become a n null pointer D reference or",
    "start": "1350720",
    "end": "1353000"
  },
  {
    "text": "exor yeah exor will do something crazy",
    "start": "1353000",
    "end": "1357000"
  },
  {
    "text": "to be frank I'm not sold on the",
    "start": "1357000",
    "end": "1359760"
  },
  {
    "text": "syntax I still believe this is going",
    "start": "1359760",
    "end": "1362039"
  },
  {
    "text": "into the right direction and I wish this",
    "start": "1362039",
    "end": "1364039"
  },
  {
    "text": "guys's best of luck with the proposal as",
    "start": "1364039",
    "end": "1366080"
  },
  {
    "text": "I mentioned earlier I'm also interested",
    "start": "1366080",
    "end": "1368279"
  },
  {
    "text": "in how carbon plans to address these",
    "start": "1368279",
    "end": "1370120"
  },
  {
    "text": "things for example what do you think",
    "start": "1370120",
    "end": "1372039"
  },
  {
    "text": "about the proposal is the change",
    "start": "1372039",
    "end": "1373720"
  },
  {
    "text": "welcoming do can I tell you one how",
    "start": "1373720",
    "end": "1376640"
  },
  {
    "text": "whoever made the carbon logo is lazier",
    "start": "1376640",
    "end": "1379279"
  },
  {
    "text": "than me that is some lazy ass",
    "start": "1379279",
    "end": "1381559"
  },
  {
    "text": "programming cuz earlier in this video",
    "start": "1381559",
    "end": "1383840"
  },
  {
    "text": "when it showed um a dang it I don't know",
    "start": "1383840",
    "end": "1385799"
  },
  {
    "text": "where it was it showed like a group of",
    "start": "1385799",
    "end": "1388120"
  },
  {
    "text": "three languages it had C in the middle",
    "start": "1388120",
    "end": "1390200"
  },
  {
    "text": "and I thought it was c yeah I thought",
    "start": "1390200",
    "end": "1392080"
  },
  {
    "text": "earlier this was C I didn't understand",
    "start": "1392080",
    "end": "1394039"
  },
  {
    "text": "it and now look at us carbon plans to",
    "start": "1394039",
    "end": "1397000"
  },
  {
    "text": "address these things for example what do",
    "start": "1397000",
    "end": "1398960"
  },
  {
    "text": "you think about the proposal is the",
    "start": "1398960",
    "end": "1400720"
  },
  {
    "text": "change welcoming do you like it let me",
    "start": "1400720",
    "end": "1403039"
  },
  {
    "text": "know in the comments below and as always",
    "start": "1403039",
    "end": "1405200"
  },
  {
    "text": "I hope you guys had a good time thanks",
    "start": "1405200",
    "end": "1407000"
  },
  {
    "text": "for watching and I hope to see you again",
    "start": "1407000",
    "end": "1409360"
  },
  {
    "text": "bye bye that was fantastic what a great",
    "start": "1409360",
    "end": "1412720"
  },
  {
    "text": "video this accent and this voice I swear",
    "start": "1412720",
    "end": "1415360"
  },
  {
    "text": "exists somewhere else so I'm confused as",
    "start": "1415360",
    "end": "1417000"
  },
  {
    "text": "to why I'm hearing it again but I don't",
    "start": "1417000",
    "end": "1419080"
  },
  {
    "text": "I I believe this is a new this is a new",
    "start": "1419080",
    "end": "1420760"
  },
  {
    "text": "channel cheesed up hey everyone go go",
    "start": "1420760",
    "end": "1423840"
  },
  {
    "text": "subscribe to cheesed up that was great",
    "start": "1423840",
    "end": "1425880"
  },
  {
    "text": "that was a great video by the way",
    "start": "1425880",
    "end": "1429679"
  }
]