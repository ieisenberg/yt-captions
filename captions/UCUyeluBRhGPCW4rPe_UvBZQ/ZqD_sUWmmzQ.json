[
  {
    "text": "let's find out are we going to be doing",
    "start": "0",
    "end": "1680"
  },
  {
    "text": "it is this functional",
    "start": "1680",
    "end": "3840"
  },
  {
    "text": "functionings or is this going to be",
    "start": "3840",
    "end": "6120"
  },
  {
    "text": "something else completely I don't even",
    "start": "6120",
    "end": "7500"
  },
  {
    "text": "know all right let's find out let's move",
    "start": "7500",
    "end": "9240"
  },
  {
    "text": "myself back over here now that we don't",
    "start": "9240",
    "end": "10920"
  },
  {
    "text": "need to be all the way over but let's do",
    "start": "10920",
    "end": "12420"
  },
  {
    "text": "this styled and written when I was",
    "start": "12420",
    "end": "14700"
  },
  {
    "text": "younger I thought the object-oriented",
    "start": "14700",
    "end": "16320"
  },
  {
    "text": "programming was the only right way to",
    "start": "16320",
    "end": "17940"
  },
  {
    "text": "code and I thought the literal exact",
    "start": "17940",
    "end": "20340"
  },
  {
    "text": "same thing when I was younger back in my",
    "start": "20340",
    "end": "22980"
  },
  {
    "text": "childlike years I too thought object",
    "start": "22980",
    "end": "25260"
  },
  {
    "text": "oriented was the only way to do it and",
    "start": "25260",
    "end": "26880"
  },
  {
    "text": "therefore when I built my first video",
    "start": "26880",
    "end": "28500"
  },
  {
    "text": "game I used seven layers of inheritance",
    "start": "28500",
    "end": "31679"
  },
  {
    "text": "and eventually I cried cried and cried",
    "start": "31679",
    "end": "34620"
  },
  {
    "text": "for I could not figure out where and why",
    "start": "34620",
    "end": "36960"
  },
  {
    "text": "my bugs were flowing through the system",
    "start": "36960",
    "end": "38579"
  },
  {
    "text": "and I had no idea how or why it happened",
    "start": "38579",
    "end": "41460"
  },
  {
    "text": "so I cried and I cried and I cried Java",
    "start": "41460",
    "end": "45300"
  },
  {
    "text": "was the best language so obviously I",
    "start": "45300",
    "end": "47520"
  },
  {
    "text": "wasn't the brightest back then I",
    "start": "47520",
    "end": "49140"
  },
  {
    "text": "realized conscription myself to one",
    "start": "49140",
    "end": "50579"
  },
  {
    "text": "Paradigm wasn't a smart decision and",
    "start": "50579",
    "end": "52559"
  },
  {
    "text": "expanding my options could greatly",
    "start": "52559",
    "end": "54059"
  },
  {
    "text": "increase my coding quality",
    "start": "54059",
    "end": "55920"
  },
  {
    "text": "I'm going to mainly focus on the",
    "start": "55920",
    "end": "57420"
  },
  {
    "text": "object-oriented if you like that screen",
    "start": "57420",
    "end": "59039"
  },
  {
    "text": "tear by the way how good was that screen",
    "start": "59039",
    "end": "60899"
  },
  {
    "text": "tear huh so I should switch to Waylon I",
    "start": "60899",
    "end": "63660"
  },
  {
    "text": "keep saying that every week I still",
    "start": "63660",
    "end": "65220"
  },
  {
    "text": "don't uh oop most used as oop is",
    "start": "65220",
    "end": "68820"
  },
  {
    "text": "arguably the most used Paradigm and",
    "start": "68820",
    "end": "70560"
  },
  {
    "text": "functional programming is also growing",
    "start": "70560",
    "end": "72240"
  },
  {
    "text": "rapidly in popularity while coding",
    "start": "72240",
    "end": "74220"
  },
  {
    "text": "there's multiple ways to solve a problem",
    "start": "74220",
    "end": "75720"
  },
  {
    "text": "making the debate of which Paradigm is",
    "start": "75720",
    "end": "77880"
  },
  {
    "text": "the best useless the idea behind",
    "start": "77880",
    "end": "80040"
  },
  {
    "text": "object-oriented programming is to rely",
    "start": "80040",
    "end": "81900"
  },
  {
    "text": "on the concepts of classes and objects",
    "start": "81900",
    "end": "83700"
  },
  {
    "text": "where a class could be considered a",
    "start": "83700",
    "end": "85380"
  },
  {
    "text": "blueprint to instantiate objects then we",
    "start": "85380",
    "end": "87960"
  },
  {
    "text": "didn't uh code Aesthetics do something",
    "start": "87960",
    "end": "89640"
  },
  {
    "text": "very similar to this",
    "start": "89640",
    "end": "91740"
  },
  {
    "text": "didn't uh code Aesthetics do like this",
    "start": "91740",
    "end": "94860"
  },
  {
    "text": "very very very very similar thing even",
    "start": "94860",
    "end": "97140"
  },
  {
    "text": "using images",
    "start": "97140",
    "end": "99740"
  },
  {
    "text": "do I remember that correctly",
    "start": "100700",
    "end": "104340"
  },
  {
    "text": "I can't remember he was doing it for the",
    "start": "104340",
    "end": "105960"
  },
  {
    "text": "difference between inheritance versus",
    "start": "105960",
    "end": "107220"
  },
  {
    "text": "composition",
    "start": "107220",
    "end": "109500"
  },
  {
    "text": "classes usually represent a broad",
    "start": "109500",
    "end": "111240"
  },
  {
    "text": "category such as cars animals or any",
    "start": "111240",
    "end": "113520"
  },
  {
    "text": "other encompassing field for example if",
    "start": "113520",
    "end": "115920"
  },
  {
    "text": "I actually quit doing a lot of that for",
    "start": "115920",
    "end": "117780"
  },
  {
    "text": "the most part I try not to think of",
    "start": "117780",
    "end": "119399"
  },
  {
    "text": "classes like that I have a class Foo",
    "start": "119399",
    "end": "121680"
  },
  {
    "text": "with attributes Supply and type we can",
    "start": "121680",
    "end": "124020"
  },
  {
    "text": "now create as many objects of food as we",
    "start": "124020",
    "end": "126119"
  },
  {
    "text": "like",
    "start": "126119",
    "end": "126899"
  },
  {
    "text": "to add some more functionality the class",
    "start": "126899",
    "end": "129000"
  },
  {
    "text": "food can have methods most classes are",
    "start": "129000",
    "end": "131760"
  },
  {
    "text": "even more powerful than they look like",
    "start": "131760",
    "end": "133260"
  },
  {
    "text": "as they can be extended from to make",
    "start": "133260",
    "end": "135239"
  },
  {
    "text": "more subclasses here KitKat can extend",
    "start": "135239",
    "end": "138060"
  },
  {
    "text": "from food I already Hate Everything I",
    "start": "138060",
    "end": "139980"
  },
  {
    "text": "see with KitKat everything's the same",
    "start": "139980",
    "end": "142200"
  },
  {
    "text": "except the consume function is",
    "start": "142200",
    "end": "143640"
  },
  {
    "text": "overridden",
    "start": "143640",
    "end": "144780"
  },
  {
    "text": "while this specific example is extremely",
    "start": "144780",
    "end": "146819"
  },
  {
    "text": "simple an object-oriented design allows",
    "start": "146819",
    "end": "148800"
  },
  {
    "text": "for flexible code reuse",
    "start": "148800",
    "end": "150720"
  },
  {
    "text": "object-oriented programming can be made",
    "start": "150720",
    "end": "152459"
  },
  {
    "text": "more robust with features like abstract",
    "start": "152459",
    "end": "154200"
  },
  {
    "text": "classes interfaces virtual functions",
    "start": "154200",
    "end": "156360"
  },
  {
    "text": "multiple inheritance",
    "start": "156360",
    "end": "158580"
  },
  {
    "text": "you're not allowed to use the term",
    "start": "158580",
    "end": "160200"
  },
  {
    "text": "robust",
    "start": "160200",
    "end": "161280"
  },
  {
    "text": "in multiple inheritance okay yeah yeah",
    "start": "161280",
    "end": "163860"
  },
  {
    "text": "okay",
    "start": "163860",
    "end": "165420"
  },
  {
    "text": "you need to know this",
    "start": "165420",
    "end": "168379"
  },
  {
    "text": "or I'm going to send you straight to",
    "start": "168780",
    "end": "169920"
  },
  {
    "text": "Karen's office",
    "start": "169920",
    "end": "171060"
  },
  {
    "text": "ridiculous",
    "start": "171060",
    "end": "173700"
  },
  {
    "text": "don't ever say multiple inheritance in",
    "start": "173700",
    "end": "176280"
  },
  {
    "text": "robust",
    "start": "176280",
    "end": "177720"
  },
  {
    "text": "in my startup again okay",
    "start": "177720",
    "end": "181280"
  },
  {
    "text": "it's not a marker",
    "start": "183200",
    "end": "185580"
  },
  {
    "text": "that's me being serious okay chat",
    "start": "185580",
    "end": "188459"
  },
  {
    "text": "you know I'm serious about two things in",
    "start": "188459",
    "end": "190200"
  },
  {
    "text": "the world okay serious number one you",
    "start": "190200",
    "end": "192000"
  },
  {
    "text": "don't joke about multiple inheritance",
    "start": "192000",
    "end": "193680"
  },
  {
    "text": "and number two five dollars a month",
    "start": "193680",
    "end": "197640"
  },
  {
    "text": "that's what I'm serious about okay",
    "start": "197640",
    "end": "199860"
  },
  {
    "text": "and more but that's beyond the scope of",
    "start": "199860",
    "end": "201840"
  },
  {
    "text": "this video",
    "start": "201840",
    "end": "202680"
  },
  {
    "text": "something you'll probably hear a lot",
    "start": "202680",
    "end": "204239"
  },
  {
    "text": "related to object-oriented programming",
    "start": "204239",
    "end": "205860"
  },
  {
    "text": "are its four pillars these are",
    "start": "205860",
    "end": "207720"
  },
  {
    "text": "inheritance polymorphism encapsulation",
    "start": "207720",
    "end": "209879"
  },
  {
    "text": "and abstraction",
    "start": "209879",
    "end": "212659"
  },
  {
    "text": "yes",
    "start": "213239",
    "end": "214920"
  },
  {
    "text": "I don't like to use that",
    "start": "214920",
    "end": "218060"
  },
  {
    "text": "I think we all use polymorphism in some",
    "start": "219180",
    "end": "221340"
  },
  {
    "text": "way I think encapsulation is just a",
    "start": "221340",
    "end": "223080"
  },
  {
    "text": "great idea that's just pretty much",
    "start": "223080",
    "end": "224400"
  },
  {
    "text": "programming in fact it's really hard not",
    "start": "224400",
    "end": "226680"
  },
  {
    "text": "to encapsulate data I mean you really",
    "start": "226680",
    "end": "228720"
  },
  {
    "text": "have to be trying to not encapsulate",
    "start": "228720",
    "end": "231420"
  },
  {
    "text": "data you know what I mean welcome to",
    "start": "231420",
    "end": "233099"
  },
  {
    "text": "Costco I forgot to turn off alerts",
    "start": "233099",
    "end": "235680"
  },
  {
    "text": "welcome to Costco I forgot to turn off",
    "start": "235680",
    "end": "237299"
  },
  {
    "text": "alerts alerts are off thank you uh an",
    "start": "237299",
    "end": "239640"
  },
  {
    "text": "abstraction",
    "start": "239640",
    "end": "241220"
  },
  {
    "text": "people love this you know this term for",
    "start": "241220",
    "end": "243720"
  },
  {
    "text": "me just always just means everything",
    "start": "243720",
    "end": "247400"
  },
  {
    "text": "abstraction",
    "start": "247500",
    "end": "249900"
  },
  {
    "text": "you're like wasn't everything kind of an",
    "start": "249900",
    "end": "251760"
  },
  {
    "text": "abstraction if you really think about it",
    "start": "251760",
    "end": "253319"
  },
  {
    "text": "we're always abstracting like JavaScript",
    "start": "253319",
    "end": "256019"
  },
  {
    "text": "is an abstraction over C plus",
    "start": "256019",
    "end": "258780"
  },
  {
    "text": "you know what I mean",
    "start": "258780",
    "end": "261239"
  },
  {
    "text": "you like that you like that javascript's",
    "start": "261239",
    "end": "264240"
  },
  {
    "text": "just C plus plus syntax sugar baby okay",
    "start": "264240",
    "end": "267120"
  },
  {
    "text": "syntax sugar that's all it is it's just",
    "start": "267120",
    "end": "270540"
  },
  {
    "text": "syntax sugar that's all it has",
    "start": "270540",
    "end": "273440"
  },
  {
    "text": "uh no",
    "start": "273440",
    "end": "275639"
  },
  {
    "text": "no it's not",
    "start": "275639",
    "end": "277800"
  },
  {
    "text": "actually it is",
    "start": "277800",
    "end": "280259"
  },
  {
    "text": "just syntax sugar that's all it is it's",
    "start": "280259",
    "end": "283139"
  },
  {
    "text": "all it is baby inheritance is what I",
    "start": "283139",
    "end": "285600"
  },
  {
    "text": "mentioned earlier about kitkats that's",
    "start": "285600",
    "end": "287340"
  },
  {
    "text": "why I think they're both shitty sending",
    "start": "287340",
    "end": "289020"
  },
  {
    "text": "food kitkats are still a type of food so",
    "start": "289020",
    "end": "291540"
  },
  {
    "text": "they should be able to take all the",
    "start": "291540",
    "end": "292800"
  },
  {
    "text": "properties of food encapsulation allows",
    "start": "292800",
    "end": "295440"
  },
  {
    "text": "classes to manage how they hide data",
    "start": "295440",
    "end": "297180"
  },
  {
    "text": "allowing access through either the class",
    "start": "297180",
    "end": "299040"
  },
  {
    "text": "itself or a function for example if we",
    "start": "299040",
    "end": "301979"
  },
  {
    "text": "have a class for a person we wouldn't",
    "start": "301979",
    "end": "303419"
  },
  {
    "text": "want their address or SN to be public",
    "start": "303419",
    "end": "305220"
  },
  {
    "text": "otherwise any other class would be able",
    "start": "305220",
    "end": "307440"
  },
  {
    "text": "to access and potentially change those",
    "start": "307440",
    "end": "309000"
  },
  {
    "text": "properties on the flip side something",
    "start": "309000",
    "end": "311460"
  },
  {
    "text": "like your name could be public as that",
    "start": "311460",
    "end": "313259"
  },
  {
    "text": "data isn't as sensitive",
    "start": "313259",
    "end": "315300"
  },
  {
    "text": "the best practice is to declare any",
    "start": "315300",
    "end": "317160"
  },
  {
    "text": "variable chat what's the name",
    "start": "317160",
    "end": "320419"
  },
  {
    "text": "what's the CH what's the name chat",
    "start": "320520",
    "end": "325220"
  },
  {
    "text": "the name",
    "start": "327020",
    "end": "330198"
  },
  {
    "text": "that's right thank you",
    "start": "332759",
    "end": "334800"
  },
  {
    "text": "thank you for if you don't say Java",
    "start": "334800",
    "end": "336660"
  },
  {
    "text": "don't say the Java gen okay that's",
    "start": "336660",
    "end": "338639"
  },
  {
    "text": "inappropriate it's inappropriate",
    "start": "338639",
    "end": "341639"
  },
  {
    "text": "okay the name",
    "start": "341639",
    "end": "343680"
  },
  {
    "text": "is js's syntax sugar for C plus plus a",
    "start": "343680",
    "end": "346860"
  },
  {
    "text": "gin",
    "start": "346860",
    "end": "347699"
  },
  {
    "text": "as private so nothing outside the class",
    "start": "347699",
    "end": "349919"
  },
  {
    "text": "can affect it unless it needs to be",
    "start": "349919",
    "end": "352139"
  },
  {
    "text": "public",
    "start": "352139",
    "end": "353160"
  },
  {
    "text": "abstraction is similar to encapsulation",
    "start": "353160",
    "end": "356280"
  },
  {
    "text": "okay hey",
    "start": "356280",
    "end": "358820"
  },
  {
    "text": "gonna make all these",
    "start": "361199",
    "end": "363780"
  },
  {
    "text": "fans right here okay",
    "start": "363780",
    "end": "365400"
  },
  {
    "text": "okay leave room for the holy spirit is",
    "start": "365400",
    "end": "368400"
  },
  {
    "text": "what we said during high school dances",
    "start": "368400",
    "end": "370320"
  },
  {
    "text": "okay",
    "start": "370320",
    "end": "371880"
  },
  {
    "text": "at least that's what the teacher said",
    "start": "371880",
    "end": "373259"
  },
  {
    "text": "okay okay that's very important put a",
    "start": "373259",
    "end": "375479"
  },
  {
    "text": "space right here I expect it it's just",
    "start": "375479",
    "end": "377759"
  },
  {
    "text": "you're in fear offending me however it's",
    "start": "377759",
    "end": "380160"
  },
  {
    "text": "less about data safety brother oh now",
    "start": "380160",
    "end": "382680"
  },
  {
    "text": "you put a space",
    "start": "382680",
    "end": "385520"
  },
  {
    "text": "I think or six I'm not even sure what's",
    "start": "391020",
    "end": "393479"
  },
  {
    "text": "going on here okay we gotta work on your",
    "start": "393479",
    "end": "395039"
  },
  {
    "text": "your we gotta work on it okay I know",
    "start": "395039",
    "end": "397440"
  },
  {
    "text": "you're using that motion canvas thing I",
    "start": "397440",
    "end": "399600"
  },
  {
    "text": "know you are okay but careful now abuse",
    "start": "399600",
    "end": "403259"
  },
  {
    "text": "if we have a string and we want to make",
    "start": "403259",
    "end": "405060"
  },
  {
    "text": "it lowercase we can just call it the two",
    "start": "405060",
    "end": "406620"
  },
  {
    "text": "lowercase function as we don't need to",
    "start": "406620",
    "end": "408539"
  },
  {
    "text": "know exactly how the string will be made",
    "start": "408539",
    "end": "410160"
  },
  {
    "text": "into lowercase",
    "start": "410160",
    "end": "411780"
  },
  {
    "text": "polymorphism is also similar to an hair",
    "start": "411780",
    "end": "413880"
  },
  {
    "text": "I'm not gonna lie to you okay if you're",
    "start": "413880",
    "end": "415560"
  },
  {
    "text": "going to do sweet stuff you've got to",
    "start": "415560",
    "end": "416759"
  },
  {
    "text": "put the right indents right like these",
    "start": "416759",
    "end": "418560"
  },
  {
    "text": "indents they're they're just emotionally",
    "start": "418560",
    "end": "420120"
  },
  {
    "text": "hurting me like this indent look at this",
    "start": "420120",
    "end": "421740"
  },
  {
    "text": "what have you done here",
    "start": "421740",
    "end": "424020"
  },
  {
    "text": "what have you done",
    "start": "424020",
    "end": "426000"
  },
  {
    "text": "this thing's indented like 12 characters",
    "start": "426000",
    "end": "429000"
  },
  {
    "text": "okay I don't even know how to do",
    "start": "429000",
    "end": "431400"
  },
  {
    "text": "something you got some sort of you have",
    "start": "431400",
    "end": "433220"
  },
  {
    "text": "some form of Fibonacci",
    "start": "433220",
    "end": "436979"
  },
  {
    "text": "it's like one one two okay you can even",
    "start": "436979",
    "end": "440759"
  },
  {
    "text": "see it the break has the same thing one",
    "start": "440759",
    "end": "443160"
  },
  {
    "text": "one two yeah Fibonacci indenting and",
    "start": "443160",
    "end": "445620"
  },
  {
    "text": "it's emotionally painful okay and what",
    "start": "445620",
    "end": "447840"
  },
  {
    "text": "happened to this parenthesis okay this",
    "start": "447840",
    "end": "449220"
  },
  {
    "text": "parentheses should have been back here",
    "start": "449220",
    "end": "450360"
  },
  {
    "text": "but it said it's up here makes",
    "start": "450360",
    "end": "451919"
  },
  {
    "text": "everything confusing polymorphism is",
    "start": "451919",
    "end": "454440"
  },
  {
    "text": "also similar to inheritance except it's",
    "start": "454440",
    "end": "456599"
  },
  {
    "text": "about modifying Behavior rather than",
    "start": "456599",
    "end": "458280"
  },
  {
    "text": "taking properties",
    "start": "458280",
    "end": "459780"
  },
  {
    "text": "in my earlier example polymorph this is",
    "start": "459780",
    "end": "461880"
  },
  {
    "text": "the reason this is exact reason why I",
    "start": "461880",
    "end": "463020"
  },
  {
    "text": "hate polymorphism or not polymorphism",
    "start": "463020",
    "end": "464880"
  },
  {
    "text": "well I hate uh inheritance okay because",
    "start": "464880",
    "end": "468240"
  },
  {
    "text": "you're inheriting over Behavior but",
    "start": "468240",
    "end": "469800"
  },
  {
    "text": "you're relying on inherited properties",
    "start": "469800",
    "end": "471360"
  },
  {
    "text": "this is really where I think it all",
    "start": "471360",
    "end": "472800"
  },
  {
    "text": "falls apart is this right here is is",
    "start": "472800",
    "end": "475319"
  },
  {
    "text": "properties that's why traits in Rust are",
    "start": "475319",
    "end": "477479"
  },
  {
    "text": "really great this is why interfaces tend",
    "start": "477479",
    "end": "478860"
  },
  {
    "text": "to be better why people tend to be okay",
    "start": "478860",
    "end": "480539"
  },
  {
    "text": "with interfaces especially like in",
    "start": "480539",
    "end": "482099"
  },
  {
    "text": "something like golang golang kind of has",
    "start": "482099",
    "end": "483360"
  },
  {
    "text": "the same feel to it where you're able",
    "start": "483360",
    "end": "484979"
  },
  {
    "text": "not to rely on the properties right",
    "start": "484979",
    "end": "487620"
  },
  {
    "text": "you're like that's not just how it works",
    "start": "487620",
    "end": "489900"
  },
  {
    "text": "okay you have you yourself you are the",
    "start": "489900",
    "end": "492660"
  },
  {
    "text": "object and then that's what you do I",
    "start": "492660",
    "end": "493860"
  },
  {
    "text": "know we're not going to talk about that",
    "start": "493860",
    "end": "494940"
  },
  {
    "text": "we're not going to talk about it okay",
    "start": "494940",
    "end": "497520"
  },
  {
    "text": "but either way I just hate that it just",
    "start": "497520",
    "end": "499560"
  },
  {
    "text": "drives me nuts I think that's why I hate",
    "start": "499560",
    "end": "501539"
  },
  {
    "text": "inheritance some is used when we",
    "start": "501539",
    "end": "503520"
  },
  {
    "text": "override the consume function",
    "start": "503520",
    "end": "506000"
  },
  {
    "text": "programming is not perfect and it has",
    "start": "506000",
    "end": "508259"
  },
  {
    "text": "its issues first of all the code made",
    "start": "508259",
    "end": "510300"
  },
  {
    "text": "with object-oriented patterns will",
    "start": "510300",
    "end": "511860"
  },
  {
    "text": "generally be longer than other styles",
    "start": "511860",
    "end": "513599"
  },
  {
    "text": "there's just more boilerplate code to",
    "start": "513599",
    "end": "515700"
  },
  {
    "text": "write and if the project doesn't need",
    "start": "515700",
    "end": "517200"
  },
  {
    "text": "all the boilerplate there will be a lot",
    "start": "517200",
    "end": "518940"
  },
  {
    "text": "of extra unnecessary code",
    "start": "518940",
    "end": "522320"
  },
  {
    "text": "that's not true",
    "start": "524039",
    "end": "527480"
  },
  {
    "text": "you can't give Java you can't put Java",
    "start": "527580",
    "end": "531300"
  },
  {
    "text": "you can't just put Java's public static",
    "start": "531300",
    "end": "533279"
  },
  {
    "text": "void main string args",
    "start": "533279",
    "end": "535560"
  },
  {
    "text": "as an example for oops lengthiness okay",
    "start": "535560",
    "end": "538980"
  },
  {
    "text": "that's Java's lenginess",
    "start": "538980",
    "end": "541920"
  },
  {
    "text": "that's where functional programming can",
    "start": "541920",
    "end": "543540"
  },
  {
    "text": "come in I apologize in advance if I get",
    "start": "543540",
    "end": "545640"
  },
  {
    "text": "something wrong with functional",
    "start": "545640",
    "end": "546720"
  },
  {
    "text": "programming as I don't have a great deal",
    "start": "546720",
    "end": "548399"
  },
  {
    "text": "of experience in it that being said",
    "start": "548399",
    "end": "550560"
  },
  {
    "text": "reading and writing well-written",
    "start": "550560",
    "end": "552120"
  },
  {
    "text": "functional programs feel great as they",
    "start": "552120",
    "end": "554040"
  },
  {
    "text": "can be extremely elegant oh oh now we're",
    "start": "554040",
    "end": "556860"
  },
  {
    "text": "calling python functional",
    "start": "556860",
    "end": "558899"
  },
  {
    "text": "okay then okay I see what kind of world",
    "start": "558899",
    "end": "561420"
  },
  {
    "text": "we're living in I see what's happening",
    "start": "561420",
    "end": "563220"
  },
  {
    "text": "now",
    "start": "563220",
    "end": "565519"
  },
  {
    "text": "the main idea with functional",
    "start": "566220",
    "end": "567779"
  },
  {
    "text": "programming is that we use functions as",
    "start": "567779",
    "end": "569519"
  },
  {
    "text": "our primary building block as opposed to",
    "start": "569519",
    "end": "571200"
  },
  {
    "text": "classes and objects the functions are",
    "start": "571200",
    "end": "573600"
  },
  {
    "text": "usually pure functions avoiding shared",
    "start": "573600",
    "end": "575399"
  },
  {
    "text": "State mutable data and side effects for",
    "start": "575399",
    "end": "578040"
  },
  {
    "text": "example if we have a function that adds",
    "start": "578040",
    "end": "579720"
  },
  {
    "text": "two variables and changes the global",
    "start": "579720",
    "end": "581220"
  },
  {
    "text": "variable to the sum this would not be a",
    "start": "581220",
    "end": "583620"
  },
  {
    "text": "functional programming concept as we",
    "start": "583620",
    "end": "585240"
  },
  {
    "text": "introduced a side effect the side effect",
    "start": "585240",
    "end": "587100"
  },
  {
    "text": "was caused by altering a piece of data",
    "start": "587100",
    "end": "588899"
  },
  {
    "text": "beyond our scope which is the function",
    "start": "588899",
    "end": "591380"
  },
  {
    "text": "isn't that always the joke",
    "start": "591380",
    "end": "593880"
  },
  {
    "text": "it's the reason why nothing's ever",
    "start": "593880",
    "end": "595200"
  },
  {
    "text": "actually written in functional",
    "start": "595200",
    "end": "596220"
  },
  {
    "text": "programming because you can't do side",
    "start": "596220",
    "end": "597720"
  },
  {
    "text": "effects",
    "start": "597720",
    "end": "599220"
  },
  {
    "text": "effects or something developers avoid as",
    "start": "599220",
    "end": "601320"
  },
  {
    "text": "they can cause bugs that are completely",
    "start": "601320",
    "end": "602820"
  },
  {
    "text": "unexpected",
    "start": "602820",
    "end": "604140"
  },
  {
    "text": "we can make the function pure by not",
    "start": "604140",
    "end": "605880"
  },
  {
    "text": "altering the global variable",
    "start": "605880",
    "end": "607740"
  },
  {
    "text": "another concept of functional",
    "start": "607740",
    "end": "609240"
  },
  {
    "text": "programming is that data is immutable",
    "start": "609240",
    "end": "610860"
  },
  {
    "text": "because mutable data can also cause side",
    "start": "610860",
    "end": "612959"
  },
  {
    "text": "effects instead of having shared State",
    "start": "612959",
    "end": "614940"
  },
  {
    "text": "and mutable data we can alter data by",
    "start": "614940",
    "end": "617399"
  },
  {
    "text": "using other functions such as map",
    "start": "617399",
    "end": "619500"
  },
  {
    "text": "this is why JavaScript is sometimes so",
    "start": "619500",
    "end": "622500"
  },
  {
    "text": "slow immutable",
    "start": "622500",
    "end": "624610"
  },
  {
    "text": "[Music]",
    "start": "624610",
    "end": "627820"
  },
  {
    "text": "just a bunch of spread operators",
    "start": "629760",
    "end": "631560"
  },
  {
    "text": "spreading their filth all over the",
    "start": "631560",
    "end": "633480"
  },
  {
    "text": "program all map does is run a function",
    "start": "633480",
    "end": "635880"
  },
  {
    "text": "on every element of an iterable in this",
    "start": "635880",
    "end": "638580"
  },
  {
    "text": "case we just append the fire Emoji to",
    "start": "638580",
    "end": "640440"
  },
  {
    "text": "the end of each string map is also an",
    "start": "640440",
    "end": "643080"
  },
  {
    "text": "example of a higher order function as",
    "start": "643080",
    "end": "645180"
  },
  {
    "text": "it's a function that takes another",
    "start": "645180",
    "end": "646440"
  },
  {
    "text": "function as a parameter",
    "start": "646440",
    "end": "648959"
  },
  {
    "text": "functional programming has many benefits",
    "start": "648959",
    "end": "650940"
  },
  {
    "text": "the object oriented programming doesn't",
    "start": "650940",
    "end": "652500"
  },
  {
    "text": "have you can get these beautiful or ugly",
    "start": "652500",
    "end": "655019"
  },
  {
    "text": "one-liners depending on how you like",
    "start": "655019",
    "end": "656640"
  },
  {
    "text": "your code to look please note mentioning",
    "start": "656640",
    "end": "658140"
  },
  {
    "text": "of ramda please look it's also far",
    "start": "658140",
    "end": "660899"
  },
  {
    "text": "easier to track down bugs as a bug",
    "start": "660899",
    "end": "662760"
  },
  {
    "text": "should only be contained within one",
    "start": "662760",
    "end": "664260"
  },
  {
    "text": "function and won't have you jumping",
    "start": "664260",
    "end": "666060"
  },
  {
    "text": "through 10 different files and nested",
    "start": "666060",
    "end": "667620"
  },
  {
    "text": "objects",
    "start": "667620",
    "end": "668640"
  },
  {
    "text": "although I've never found that to be",
    "start": "668640",
    "end": "670860"
  },
  {
    "text": "true",
    "start": "670860",
    "end": "671940"
  },
  {
    "text": "right I've never found that to be true",
    "start": "671940",
    "end": "673740"
  },
  {
    "text": "anytime you're finding a bug it results",
    "start": "673740",
    "end": "675600"
  },
  {
    "text": "in me jumping to a bunch of different",
    "start": "675600",
    "end": "677519"
  },
  {
    "text": "places whether it's oop FP or F poop",
    "start": "677519",
    "end": "682380"
  },
  {
    "text": "right no matter what what what the",
    "start": "682380",
    "end": "684720"
  },
  {
    "text": "whatever the style is that you've",
    "start": "684720",
    "end": "686279"
  },
  {
    "text": "created",
    "start": "686279",
    "end": "687540"
  },
  {
    "text": "it's like it's always a pain in the ass",
    "start": "687540",
    "end": "689459"
  },
  {
    "text": "to figure out where things go wrong",
    "start": "689459",
    "end": "690899"
  },
  {
    "text": "right like that that's that's that's",
    "start": "690899",
    "end": "692040"
  },
  {
    "text": "like that's what makes a really good",
    "start": "692040",
    "end": "694260"
  },
  {
    "text": "engineer is or one of the things that",
    "start": "694260",
    "end": "696240"
  },
  {
    "text": "makes a really good engineer is your",
    "start": "696240",
    "end": "697440"
  },
  {
    "text": "ability to go and figure out what the",
    "start": "697440",
    "end": "699959"
  },
  {
    "text": "hell is going on you know what I mean",
    "start": "699959",
    "end": "702779"
  },
  {
    "text": "functional programming seems like a",
    "start": "702779",
    "end": "704399"
  },
  {
    "text": "developer's dream with smaller projects",
    "start": "704399",
    "end": "706140"
  },
  {
    "text": "it can be considerably harder to scale",
    "start": "706140",
    "end": "708180"
  },
  {
    "text": "up in certain cases this is because",
    "start": "708180",
    "end": "710399"
  },
  {
    "text": "modeling a problem if functional",
    "start": "710399",
    "end": "712440"
  },
  {
    "text": "programming is not as easy as it is in",
    "start": "712440",
    "end": "714420"
  },
  {
    "text": "object-oriented programming",
    "start": "714420",
    "end": "716160"
  },
  {
    "text": "for example take a car that needs",
    "start": "716160",
    "end": "718380"
  },
  {
    "text": "maintenance on a certain date in this",
    "start": "718380",
    "end": "720480"
  },
  {
    "text": "case we can just have a car object with",
    "start": "720480",
    "end": "722220"
  },
  {
    "text": "an attribute for when it needs",
    "start": "722220",
    "end": "723540"
  },
  {
    "text": "maintenance",
    "start": "723540",
    "end": "724560"
  },
  {
    "text": "in a functional approach as there is no",
    "start": "724560",
    "end": "726480"
  },
  {
    "text": "State we would have to use a function to",
    "start": "726480",
    "end": "728100"
  },
  {
    "text": "find out if the car needs maintenance",
    "start": "728100",
    "end": "730019"
  },
  {
    "text": "I'm not sure if that's the best way to",
    "start": "730019",
    "end": "731579"
  },
  {
    "text": "do it but if there's other method feel",
    "start": "731579",
    "end": "733440"
  },
  {
    "text": "free to comment them down below as I",
    "start": "733440",
    "end": "734940"
  },
  {
    "text": "would love to know about them I mean you",
    "start": "734940",
    "end": "737040"
  },
  {
    "text": "know these kind of comments there are",
    "start": "737040",
    "end": "738600"
  },
  {
    "text": "you know there's like I know Haskell has",
    "start": "738600",
    "end": "740579"
  },
  {
    "text": "a similar idea but there's trait objects",
    "start": "740579",
    "end": "742140"
  },
  {
    "text": "in Rust where you can attach methods to",
    "start": "742140",
    "end": "743700"
  },
  {
    "text": "structs right you don't so you don't",
    "start": "743700",
    "end": "745980"
  },
  {
    "text": "necessarily need floating things I think",
    "start": "745980",
    "end": "747660"
  },
  {
    "text": "this is more of like a consequence of",
    "start": "747660",
    "end": "749040"
  },
  {
    "text": "probably python or uh JavaScript where",
    "start": "749040",
    "end": "752760"
  },
  {
    "text": "instead of having this beautiful like",
    "start": "752760",
    "end": "755880"
  },
  {
    "text": "ability to press Dot and see all the",
    "start": "755880",
    "end": "757620"
  },
  {
    "text": "methods available for that specific type",
    "start": "757620",
    "end": "759360"
  },
  {
    "text": "instead you have the opposite which is",
    "start": "759360",
    "end": "761820"
  },
  {
    "text": "you have to go to a file and discover",
    "start": "761820",
    "end": "763380"
  },
  {
    "text": "all the methods for a type if all the",
    "start": "763380",
    "end": "765839"
  },
  {
    "text": "methods for a type are contained within",
    "start": "765839",
    "end": "767339"
  },
  {
    "text": "one file and so I find that you know it",
    "start": "767339",
    "end": "771000"
  },
  {
    "text": "totally depends on the language the ease",
    "start": "771000",
    "end": "772800"
  },
  {
    "text": "of use of functional and it's not always",
    "start": "772800",
    "end": "777500"
  },
  {
    "text": "the same right it's not all it doesn't",
    "start": "777500",
    "end": "779880"
  },
  {
    "text": "always feel the same and it can be quite",
    "start": "779880",
    "end": "781680"
  },
  {
    "text": "tricksy yes obviously this is not this",
    "start": "781680",
    "end": "784800"
  },
  {
    "text": "you know what I mean",
    "start": "784800",
    "end": "786600"
  },
  {
    "text": "as you can see both these paradigms just",
    "start": "786600",
    "end": "788880"
  },
  {
    "text": "like every other Paradigm I know don't",
    "start": "788880",
    "end": "791339"
  },
  {
    "text": "look at the statement don't look at the",
    "start": "791339",
    "end": "792420"
  },
  {
    "text": "statement but also a wide variety of",
    "start": "792420",
    "end": "794459"
  },
  {
    "text": "issues I read something on stack",
    "start": "794459",
    "end": "796560"
  },
  {
    "text": "Overflow along the lines of first",
    "start": "796560",
    "end": "798660"
  },
  {
    "text": "mistake don't read things on stack",
    "start": "798660",
    "end": "800459"
  },
  {
    "text": "Overflow okay",
    "start": "800459",
    "end": "801959"
  },
  {
    "text": "because you can't even figure out how to",
    "start": "801959",
    "end": "803760"
  },
  {
    "text": "measure your dick on stack Overflow",
    "start": "803760",
    "end": "806279"
  },
  {
    "text": "object orientation can improve with",
    "start": "806279",
    "end": "808139"
  },
  {
    "text": "functional programming and I agree no",
    "start": "808139",
    "end": "810480"
  },
  {
    "text": "more orientation we're not orientating",
    "start": "810480",
    "end": "811980"
  },
  {
    "text": "things not everything has to be the same",
    "start": "811980",
    "end": "814500"
  },
  {
    "text": "however the functions can improve",
    "start": "814500",
    "end": "816380"
  },
  {
    "text": "methods can take the principles behind",
    "start": "816380",
    "end": "818519"
  },
  {
    "text": "functional programming functions they",
    "start": "818519",
    "end": "820440"
  },
  {
    "text": "don't need to have zero side effects",
    "start": "820440",
    "end": "821880"
  },
  {
    "text": "however minimizing them would be",
    "start": "821880",
    "end": "823440"
  },
  {
    "text": "extremely helpful for debugging",
    "start": "823440",
    "end": "825600"
  },
  {
    "text": "the longer object-oriented code can also",
    "start": "825600",
    "end": "827760"
  },
  {
    "text": "be split up into some methods to do",
    "start": "827760",
    "end": "829200"
  },
  {
    "text": "smaller tasks and since object",
    "start": "829200",
    "end": "831060"
  },
  {
    "text": "orientation allows abstraction and",
    "start": "831060",
    "end": "832800"
  },
  {
    "text": "encapsulation the end user doesn't need",
    "start": "832800",
    "end": "834959"
  },
  {
    "text": "to see those changes",
    "start": "834959",
    "end": "836579"
  },
  {
    "text": "wherever applicable the one-liners and",
    "start": "836579",
    "end": "838620"
  },
  {
    "text": "more concise code patterns from",
    "start": "838620",
    "end": "840000"
  },
  {
    "text": "functional programming can be used to",
    "start": "840000",
    "end": "841920"
  },
  {
    "text": "create elegant code mixing paradigms and",
    "start": "841920",
    "end": "844620"
  },
  {
    "text": "code patterns can increase code quality",
    "start": "844620",
    "end": "846300"
  },
  {
    "text": "in so many cities I think there's this",
    "start": "846300",
    "end": "848100"
  },
  {
    "text": "concept that floats around and I'm not",
    "start": "848100",
    "end": "849839"
  },
  {
    "text": "sure if I'm incorrect or if I am correct",
    "start": "849839",
    "end": "852480"
  },
  {
    "text": "but just because you use functions does",
    "start": "852480",
    "end": "854940"
  },
  {
    "text": "not mean it's functional programming",
    "start": "854940",
    "end": "858560"
  },
  {
    "text": "I think a lot of time people goof up",
    "start": "861240",
    "end": "863399"
  },
  {
    "text": "functional programming for procedural",
    "start": "863399",
    "end": "866100"
  },
  {
    "text": "programming",
    "start": "866100",
    "end": "867800"
  },
  {
    "text": "you know what I mean",
    "start": "867800",
    "end": "870180"
  },
  {
    "text": "and so what is",
    "start": "870180",
    "end": "872279"
  },
  {
    "text": "functional programming in the JavaScript",
    "start": "872279",
    "end": "874019"
  },
  {
    "text": "world is actually just procedural",
    "start": "874019",
    "end": "875579"
  },
  {
    "text": "programming for the most part",
    "start": "875579",
    "end": "877500"
  },
  {
    "text": "and that's that that's all you're doing",
    "start": "877500",
    "end": "879660"
  },
  {
    "text": "you're just procedural programming Andy",
    "start": "879660",
    "end": "881639"
  },
  {
    "text": "doing procedural programming Andy things",
    "start": "881639",
    "end": "883800"
  },
  {
    "text": "and that's that",
    "start": "883800",
    "end": "886820"
  },
  {
    "text": "situations",
    "start": "887279",
    "end": "888620"
  },
  {
    "text": "multi-paradigm languages are on the rise",
    "start": "888620",
    "end": "890820"
  },
  {
    "text": "and are here to say",
    "start": "890820",
    "end": "892199"
  },
  {
    "text": "it's better to embrace the",
    "start": "892199",
    "end": "893699"
  },
  {
    "text": "multi-paradigm approach rather than to",
    "start": "893699",
    "end": "895560"
  },
  {
    "text": "bottleneck your code by sticking to only",
    "start": "895560",
    "end": "898199"
  },
  {
    "text": "nothing as with any choice there's going",
    "start": "898199",
    "end": "900720"
  },
  {
    "text": "to be a prose but there's also going to",
    "start": "900720",
    "end": "902040"
  },
  {
    "text": "be not gonna fall for it you might as",
    "start": "902040",
    "end": "903480"
  },
  {
    "text": "well take the best from all paradigms",
    "start": "903480",
    "end": "905040"
  },
  {
    "text": "and work off of that I'm not gonna make",
    "start": "905040",
    "end": "906240"
  },
  {
    "text": "a joke thanks for watching I'll see you",
    "start": "906240",
    "end": "907500"
  },
  {
    "text": "guys next time",
    "start": "907500",
    "end": "909000"
  },
  {
    "text": "I mean I like the general I like the",
    "start": "909000",
    "end": "910440"
  },
  {
    "text": "general take of this video General take",
    "start": "910440",
    "end": "911880"
  },
  {
    "text": "of this video is actually really good",
    "start": "911880",
    "end": "912899"
  },
  {
    "text": "which is you you should if you do know",
    "start": "912899",
    "end": "915000"
  },
  {
    "text": "some level of functional programming I'm",
    "start": "915000",
    "end": "916620"
  },
  {
    "text": "very weak on the functional programming",
    "start": "916620",
    "end": "917880"
  },
  {
    "text": "like I'm like very easy idea right like",
    "start": "917880",
    "end": "919680"
  },
  {
    "text": "I know very very little but",
    "start": "919680",
    "end": "923360"
  },
  {
    "text": "taking good Concepts from each approach",
    "start": "923720",
    "end": "926820"
  },
  {
    "text": "is really really nice like I'm pretty",
    "start": "926820",
    "end": "928260"
  },
  {
    "text": "careful when I create classes if I",
    "start": "928260",
    "end": "930240"
  },
  {
    "text": "create a class I never allow inheritance",
    "start": "930240",
    "end": "931980"
  },
  {
    "text": "right you just kind of have to come up",
    "start": "931980",
    "end": "933420"
  },
  {
    "text": "with some basic",
    "start": "933420",
    "end": "935100"
  },
  {
    "text": "things like some basic general rules and",
    "start": "935100",
    "end": "937800"
  },
  {
    "text": "that's that and for the most part you",
    "start": "937800",
    "end": "940079"
  },
  {
    "text": "will do very very fine these people that",
    "start": "940079",
    "end": "941820"
  },
  {
    "text": "are very dogmatic about one approach or",
    "start": "941820",
    "end": "943380"
  },
  {
    "text": "the other I find that actually almost",
    "start": "943380",
    "end": "944639"
  },
  {
    "text": "always is the worst and you know what",
    "start": "944639",
    "end": "946019"
  },
  {
    "text": "I'm going to be real here the reason why",
    "start": "946019",
    "end": "947940"
  },
  {
    "text": "it's almost always the worst to be",
    "start": "947940",
    "end": "949139"
  },
  {
    "text": "purely oop or purely functional is",
    "start": "949139",
    "end": "951480"
  },
  {
    "text": "because the actual best programming",
    "start": "951480",
    "end": "953220"
  },
  {
    "text": "technique is procedural I'm sorry",
    "start": "953220",
    "end": "956579"
  },
  {
    "text": "sorry sucks to suck the name is the",
    "start": "956579",
    "end": "959459"
  },
  {
    "text": "primogen",
    "start": "959459",
    "end": "962120"
  }
]