[
  {
    "text": "all right all right all right all right",
    "start": "0",
    "end": "1079"
  },
  {
    "text": "js's weird extreme edition let's go this",
    "start": "1079",
    "end": "3360"
  },
  {
    "text": "is a big one this is a big one marker",
    "start": "3360",
    "end": "5460"
  },
  {
    "text": "okay marker JS is weird extreme",
    "start": "5460",
    "end": "10940"
  },
  {
    "text": "hello and welcome to low level",
    "start": "14519",
    "end": "15780"
  },
  {
    "text": "JavaScript today we're going to be",
    "start": "15780",
    "end": "16740"
  },
  {
    "text": "talking about the biggest reason the",
    "start": "16740",
    "end": "17760"
  },
  {
    "text": "people okay this video does not start",
    "start": "17760",
    "end": "19560"
  },
  {
    "text": "off on the best foot",
    "start": "19560",
    "end": "22740"
  },
  {
    "text": "using this idea of low level",
    "start": "22740",
    "end": "25800"
  },
  {
    "text": "and JavaScript in the same sentence just",
    "start": "25800",
    "end": "28260"
  },
  {
    "text": "somehow feels",
    "start": "28260",
    "end": "30180"
  },
  {
    "text": "you know what I mean you know what I",
    "start": "30180",
    "end": "31380"
  },
  {
    "text": "mean like just just right out the gate",
    "start": "31380",
    "end": "33719"
  },
  {
    "text": "just right out the gate",
    "start": "33719",
    "end": "36920"
  },
  {
    "text": "when you allocate a string and you call",
    "start": "37140",
    "end": "39780"
  },
  {
    "text": "substring are those two separate strings",
    "start": "39780",
    "end": "42300"
  },
  {
    "text": "or one string with a internal reference",
    "start": "42300",
    "end": "45059"
  },
  {
    "text": "to just part of the other string could",
    "start": "45059",
    "end": "46559"
  },
  {
    "text": "anyone can anybody answer me that",
    "start": "46559",
    "end": "48660"
  },
  {
    "text": "question",
    "start": "48660",
    "end": "49559"
  },
  {
    "text": "if you can't answer that question",
    "start": "49559",
    "end": "50940"
  },
  {
    "text": "confidently",
    "start": "50940",
    "end": "53718"
  },
  {
    "text": "then that's not low level okay that is",
    "start": "58739",
    "end": "60960"
  },
  {
    "text": "just as easy as it gets",
    "start": "60960",
    "end": "64198"
  },
  {
    "text": "reference",
    "start": "64199",
    "end": "67040"
  },
  {
    "text": "say the JavaScript is weird which is",
    "start": "67260",
    "end": "68880"
  },
  {
    "text": "implicit type coercion now at least once",
    "start": "68880",
    "end": "70560"
  },
  {
    "text": "a year there's a new wave of sort of",
    "start": "70560",
    "end": "71580"
  },
  {
    "text": "JavaScript is weird posts that Circle",
    "start": "71580",
    "end": "73140"
  },
  {
    "text": "the internet and they always use tight",
    "start": "73140",
    "end": "74400"
  },
  {
    "text": "coercion in some weird looking way to",
    "start": "74400",
    "end": "75720"
  },
  {
    "text": "produce some unexpected results which",
    "start": "75720",
    "end": "76920"
  },
  {
    "text": "produces the unusual string banana now",
    "start": "76920",
    "end": "78600"
  },
  {
    "text": "this is a toy example of how far this",
    "start": "78600",
    "end": "80460"
  },
  {
    "text": "type coercion idea can actually be taken",
    "start": "80460",
    "end": "82020"
  },
  {
    "text": "and in today's episode we're going to go",
    "start": "82020",
    "end": "83340"
  },
  {
    "text": "to an extreme now disclaimer uh it goes",
    "start": "83340",
    "end": "85439"
  },
  {
    "text": "without saying that you should",
    "start": "85439",
    "end": "86340"
  },
  {
    "text": "absolutely not write code like this in a",
    "start": "86340",
    "end": "87420"
  },
  {
    "text": "professional environment but that",
    "start": "87420",
    "end": "88320"
  },
  {
    "text": "doesn't mean that you shouldn't be able",
    "start": "88320",
    "end": "89159"
  },
  {
    "text": "to understand it and explore it so with",
    "start": "89159",
    "end": "90720"
  },
  {
    "text": "all of that mind let's continue so what",
    "start": "90720",
    "end": "92159"
  },
  {
    "text": "if I told you that you can write",
    "start": "92159",
    "end": "93420"
  },
  {
    "text": "completely valid JavaScript that can do",
    "start": "93420",
    "end": "94860"
  },
  {
    "text": "anything but only uses the following",
    "start": "94860",
    "end": "96360"
  },
  {
    "text": "characters not only that but we can",
    "start": "96360",
    "end": "98340"
  },
  {
    "text": "easily write a compiler that takes",
    "start": "98340",
    "end": "99540"
  },
  {
    "text": "regular JavaScript and turns it into",
    "start": "99540",
    "end": "100920"
  },
  {
    "text": "this weird version in something like 45",
    "start": "100920",
    "end": "102360"
  },
  {
    "text": "lines of code or so I have always been",
    "start": "102360",
    "end": "104340"
  },
  {
    "text": "curious about this and I've wanted to",
    "start": "104340",
    "end": "105960"
  },
  {
    "text": "try to write something with it",
    "start": "105960",
    "end": "109079"
  },
  {
    "text": "I've always wanted to do this",
    "start": "109079",
    "end": "111780"
  },
  {
    "text": "this is very exciting well that's",
    "start": "111780",
    "end": "113820"
  },
  {
    "text": "exactly what we're gonna do here today",
    "start": "113820",
    "end": "114840"
  },
  {
    "text": "so the basic idea here is really simple",
    "start": "114840",
    "end": "116520"
  },
  {
    "text": "JavaScript only has a few basic types",
    "start": "116520",
    "end": "118200"
  },
  {
    "text": "like strings numbers booleans or recent",
    "start": "118200",
    "end": "120000"
  },
  {
    "text": "objects among some others when you try",
    "start": "120000",
    "end": "121740"
  },
  {
    "text": "to do things like adding two different",
    "start": "121740",
    "end": "122759"
  },
  {
    "text": "types together JavaScript uses some",
    "start": "122759",
    "end": "124500"
  },
  {
    "text": "rules that it has a quarter language to",
    "start": "124500",
    "end": "126060"
  },
  {
    "text": "decide how it's going to coerce one of",
    "start": "126060",
    "end": "127680"
  },
  {
    "text": "those types into it into the other type",
    "start": "127680",
    "end": "129179"
  },
  {
    "text": "so that it can actually add them",
    "start": "129179",
    "end": "130500"
  },
  {
    "text": "together so if I try to add a string",
    "start": "130500",
    "end": "132120"
  },
  {
    "text": "coercion",
    "start": "132120",
    "end": "133860"
  },
  {
    "text": "I hardly even know her to a number the",
    "start": "133860",
    "end": "136319"
  },
  {
    "text": "number is going to get coerced into a",
    "start": "136319",
    "end": "137940"
  },
  {
    "text": "string if I try and add a number Google",
    "start": "137940",
    "end": "139940"
  },
  {
    "text": "I love you I love you too baby is going",
    "start": "139940",
    "end": "143220"
  },
  {
    "text": "to get coerced into a number and we can",
    "start": "143220",
    "end": "144540"
  },
  {
    "text": "see that we can take the number two and",
    "start": "144540",
    "end": "146580"
  },
  {
    "text": "add it to the Boolean value true which",
    "start": "146580",
    "end": "148020"
  },
  {
    "text": "will give us the number three because",
    "start": "148020",
    "end": "149340"
  },
  {
    "text": "true is coerced into the number one",
    "start": "149340",
    "end": "150720"
  },
  {
    "text": "whereas false would be coerced into the",
    "start": "150720",
    "end": "152220"
  },
  {
    "text": "number zero",
    "start": "152220",
    "end": "154700"
  },
  {
    "text": "so you can also use addition or",
    "start": "156480",
    "end": "157920"
  },
  {
    "text": "subtraction with an expression to just",
    "start": "157920",
    "end": "159360"
  },
  {
    "text": "cast one thing into a number if we have",
    "start": "159360",
    "end": "160860"
  },
  {
    "text": "just plus with an array that's actually",
    "start": "160860",
    "end": "162120"
  },
  {
    "text": "going to give us zero this is called a",
    "start": "162120",
    "end": "164040"
  },
  {
    "text": "unary expression because you only have",
    "start": "164040",
    "end": "165420"
  },
  {
    "text": "one thing acting on word plus if we were",
    "start": "165420",
    "end": "167099"
  },
  {
    "text": "to use a Boolean value instead like plus",
    "start": "167099",
    "end": "168840"
  },
  {
    "text": "true we would see it turn into a one so",
    "start": "168840",
    "end": "171180"
  },
  {
    "text": "we can kind of transform one kind of",
    "start": "171180",
    "end": "172620"
  },
  {
    "text": "value into another so the banana example",
    "start": "172620",
    "end": "174060"
  },
  {
    "text": "that you see all over the Internet which",
    "start": "174060",
    "end": "175140"
  },
  {
    "text": "is uh something a little bit more like",
    "start": "175140",
    "end": "176280"
  },
  {
    "text": "can we wind back up there did I just",
    "start": "176280",
    "end": "179220"
  },
  {
    "text": "hear banana",
    "start": "179220",
    "end": "181140"
  },
  {
    "text": "did we have a Niner in there",
    "start": "181140",
    "end": "184620"
  },
  {
    "text": "so we can kind of transform one kind of",
    "start": "184620",
    "end": "187140"
  },
  {
    "text": "value into another so the banana example",
    "start": "187140",
    "end": "189180"
  },
  {
    "text": "did you see yeah he definitely tossed",
    "start": "189180",
    "end": "190920"
  },
  {
    "text": "out a banana in there that's that's full",
    "start": "190920",
    "end": "192480"
  },
  {
    "text": "banana I don't know but I don't know",
    "start": "192480",
    "end": "194040"
  },
  {
    "text": "about this banana I don't see the Yar in",
    "start": "194040",
    "end": "195720"
  },
  {
    "text": "there I don't know if I like that I",
    "start": "195720",
    "end": "197099"
  },
  {
    "text": "don't know if I like it",
    "start": "197099",
    "end": "199319"
  },
  {
    "text": "you'll over the Internet which is uh",
    "start": "199319",
    "end": "200700"
  },
  {
    "text": "something a little bit more like this uh",
    "start": "200700",
    "end": "202019"
  },
  {
    "text": "British people learn to speak English",
    "start": "202019",
    "end": "204239"
  },
  {
    "text": "okay it sucks to invent something and",
    "start": "204239",
    "end": "206099"
  },
  {
    "text": "all",
    "start": "206099",
    "end": "207480"
  },
  {
    "text": "okay it's always",
    "start": "207480",
    "end": "209700"
  },
  {
    "text": "looks in the Stars you know five stars",
    "start": "209700",
    "end": "211440"
  },
  {
    "text": "we got that wrong you just happen to get",
    "start": "211440",
    "end": "213300"
  },
  {
    "text": "a whole language wrong yes uh we have",
    "start": "213300",
    "end": "215580"
  },
  {
    "text": "the string B plus a and then plus and",
    "start": "215580",
    "end": "218040"
  },
  {
    "text": "then a space plus and then a plus a and",
    "start": "218040",
    "end": "220560"
  },
  {
    "text": "then we do a two lowercase on that we",
    "start": "220560",
    "end": "222120"
  },
  {
    "text": "should see this come out with the string",
    "start": "222120",
    "end": "223379"
  },
  {
    "text": "banana and that is because what we're",
    "start": "223379",
    "end": "225540"
  },
  {
    "text": "trying to do here the root of it is that",
    "start": "225540",
    "end": "227099"
  },
  {
    "text": "we're trying to take the character a and",
    "start": "227099",
    "end": "228840"
  },
  {
    "text": "convert into a number plus which of",
    "start": "228840",
    "end": "230640"
  },
  {
    "text": "course is going to result in not a",
    "start": "230640",
    "end": "231659"
  },
  {
    "text": "number because a is not a number and",
    "start": "231659",
    "end": "232980"
  },
  {
    "text": "cannot be sensibly transformed into a",
    "start": "232980",
    "end": "234480"
  },
  {
    "text": "number and if you're too lowercase that",
    "start": "234480",
    "end": "235560"
  },
  {
    "text": "you'll get the middle part of the string",
    "start": "235560",
    "end": "236459"
  },
  {
    "text": "and if we look at what it was before",
    "start": "236459",
    "end": "237360"
  },
  {
    "text": "you'll see that this is really this so",
    "start": "237360",
    "end": "240060"
  },
  {
    "text": "what we're actually doing is saying B",
    "start": "240060",
    "end": "241260"
  },
  {
    "text": "plus a plus not a number plus a",
    "start": "241260",
    "end": "243420"
  },
  {
    "text": "lowercase it's actually fairly simple",
    "start": "243420",
    "end": "245519"
  },
  {
    "text": "this is the set of basic things that",
    "start": "245519",
    "end": "247379"
  },
  {
    "text": "we're going to use in order to don't",
    "start": "247379",
    "end": "248819"
  },
  {
    "text": "tell Matt podcock I said this okay or",
    "start": "248819",
    "end": "250680"
  },
  {
    "text": "matt polcock",
    "start": "250680",
    "end": "252720"
  },
  {
    "text": "don't tell Matt peacock okay we're not",
    "start": "252720",
    "end": "255420"
  },
  {
    "text": "going to talk about that okay just don't",
    "start": "255420",
    "end": "256859"
  },
  {
    "text": "tweet that don't tweak this moment",
    "start": "256859",
    "end": "261180"
  },
  {
    "text": "there's English and then there are",
    "start": "261180",
    "end": "262979"
  },
  {
    "text": "mistakes this is true thank you for",
    "start": "262979",
    "end": "264479"
  },
  {
    "text": "recognizing that",
    "start": "264479",
    "end": "266759"
  },
  {
    "text": "I think way cooler so first of all let's",
    "start": "266759",
    "end": "268979"
  },
  {
    "text": "figure out how we can get numbers we've",
    "start": "268979",
    "end": "270300"
  },
  {
    "text": "already seen that we can get number zero",
    "start": "270300",
    "end": "271440"
  },
  {
    "text": "so zero then is just plus empty array",
    "start": "271440",
    "end": "273600"
  },
  {
    "text": "now I'm going to store that way in a",
    "start": "273600",
    "end": "274800"
  },
  {
    "text": "string so we can reference it later so",
    "start": "274800",
    "end": "276479"
  },
  {
    "text": "we need to get to the Value Plus true",
    "start": "276479",
    "end": "277740"
  },
  {
    "text": "but we can't use true because it's not",
    "start": "277740",
    "end": "279419"
  },
  {
    "text": "in our list of value characters what we",
    "start": "279419",
    "end": "280440"
  },
  {
    "text": "actually need to do is to get it somehow",
    "start": "280440",
    "end": "281759"
  },
  {
    "text": "from from our main type so let's stop an",
    "start": "281759",
    "end": "283860"
  },
  {
    "text": "empty array and if we use the",
    "start": "283860",
    "end": "284880"
  },
  {
    "text": "exclamation mark we'll cast that to a",
    "start": "284880",
    "end": "286139"
  },
  {
    "text": "Boolean don't end up being the value",
    "start": "286139",
    "end": "287160"
  },
  {
    "text": "false but we can get it to be true by",
    "start": "287160",
    "end": "288540"
  },
  {
    "text": "just using one more exclamation mark",
    "start": "288540",
    "end": "289860"
  },
  {
    "text": "which don't want it to be true and then",
    "start": "289860",
    "end": "291419"
  },
  {
    "text": "we already know that if we just put a",
    "start": "291419",
    "end": "292380"
  },
  {
    "text": "plus in front of this we'll turn that",
    "start": "292380",
    "end": "293520"
  },
  {
    "text": "into a number and so now we have the",
    "start": "293520",
    "end": "294780"
  },
  {
    "text": "number one again I'm going to wrap it up",
    "start": "294780",
    "end": "295919"
  },
  {
    "text": "in a string now how could we get any",
    "start": "295919",
    "end": "298139"
  },
  {
    "text": "number well pretty obviously we could we",
    "start": "298139",
    "end": "299820"
  },
  {
    "text": "could just sort of keep adding these to",
    "start": "299820",
    "end": "300900"
  },
  {
    "text": "each other so let's say we wanted to we",
    "start": "300900",
    "end": "302460"
  },
  {
    "text": "could take this value",
    "start": "302460",
    "end": "303919"
  },
  {
    "text": "that would give us the number two",
    "start": "303919",
    "end": "307020"
  },
  {
    "text": "um and clearly we could do this on into",
    "start": "307020",
    "end": "308100"
  },
  {
    "text": "infinity and so let's just write a",
    "start": "308100",
    "end": "309479"
  },
  {
    "text": "general way of doing that let's write a",
    "start": "309479",
    "end": "310440"
  },
  {
    "text": "function chord number is going to take",
    "start": "310440",
    "end": "311759"
  },
  {
    "text": "an n",
    "start": "311759",
    "end": "312840"
  },
  {
    "text": "and basically all we're going to do is",
    "start": "312840",
    "end": "314639"
  },
  {
    "text": "to create an array we can do that with",
    "start": "314639",
    "end": "316620"
  },
  {
    "text": "the array.front we provide a length",
    "start": "316620",
    "end": "318419"
  },
  {
    "text": "which is n because we want n elements",
    "start": "318419",
    "end": "319860"
  },
  {
    "text": "and then we can use the second argument",
    "start": "319860",
    "end": "320880"
  },
  {
    "text": "to say that that should always be the",
    "start": "320880",
    "end": "322380"
  },
  {
    "text": "number one and then we join them all",
    "start": "322380",
    "end": "323460"
  },
  {
    "text": "together with a plus now we can return",
    "start": "323460",
    "end": "325259"
  },
  {
    "text": "that and so let's see if this works the",
    "start": "325259",
    "end": "327180"
  },
  {
    "text": "way we expect it to if we want the",
    "start": "327180",
    "end": "328740"
  },
  {
    "text": "number seven we should be able to say",
    "start": "328740",
    "end": "330360"
  },
  {
    "text": "number seven and we get this kind of",
    "start": "330360",
    "end": "332759"
  },
  {
    "text": "expression and if we take that out and",
    "start": "332759",
    "end": "334139"
  },
  {
    "text": "we run that here in the debugger we'll",
    "start": "334139",
    "end": "335880"
  },
  {
    "text": "see the number seven perfect so now we",
    "start": "335880",
    "end": "337620"
  },
  {
    "text": "have a way to get any normal number",
    "start": "337620",
    "end": "339180"
  },
  {
    "text": "turned into our Strange sequence of",
    "start": "339180",
    "end": "341039"
  },
  {
    "text": "characters so now that we have these",
    "start": "341039",
    "end": "342360"
  },
  {
    "text": "numbers our goal is going to be they're",
    "start": "342360",
    "end": "343680"
  },
  {
    "text": "following letters that is most certainly",
    "start": "343680",
    "end": "348240"
  },
  {
    "text": "how brain [ __ ] was discovered is that",
    "start": "348240",
    "end": "350759"
  },
  {
    "text": "somebody discovered that you can",
    "start": "350759",
    "end": "352020"
  },
  {
    "text": "actually write a subset of the",
    "start": "352020",
    "end": "353820"
  },
  {
    "text": "JavaScript programming language like",
    "start": "353820",
    "end": "355259"
  },
  {
    "text": "this okay so",
    "start": "355259",
    "end": "357120"
  },
  {
    "text": "doing these strange operations I'm gonna",
    "start": "357120",
    "end": "358680"
  },
  {
    "text": "write down here",
    "start": "358680",
    "end": "360000"
  },
  {
    "text": "from",
    "start": "360000",
    "end": "361400"
  },
  {
    "text": "c-h-a-d-e-t capital s i n g small c u p",
    "start": "361400",
    "end": "364740"
  },
  {
    "text": "the character space which I'll represent",
    "start": "364740",
    "end": "366000"
  },
  {
    "text": "here with the square bracket",
    "start": "366000",
    "end": "367800"
  },
  {
    "text": "from",
    "start": "367800",
    "end": "369139"
  },
  {
    "text": "what word is that from Cadet sing cup",
    "start": "369139",
    "end": "373080"
  },
  {
    "text": "what does that mean",
    "start": "373080",
    "end": "374940"
  },
  {
    "text": "I don't even get I don't even know",
    "start": "374940",
    "end": "376199"
  },
  {
    "text": "what's this what's this function we need",
    "start": "376199",
    "end": "377639"
  },
  {
    "text": "a backslash",
    "start": "377639",
    "end": "379080"
  },
  {
    "text": "now what exactly do we need these",
    "start": "379080",
    "end": "380699"
  },
  {
    "text": "characters you might ask well that's",
    "start": "380699",
    "end": "381600"
  },
  {
    "text": "gonna become clear as we progress",
    "start": "381600",
    "end": "382380"
  },
  {
    "text": "through the Journey but by the end if we",
    "start": "382380",
    "end": "383759"
  },
  {
    "text": "have these characters we will be able to",
    "start": "383759",
    "end": "385020"
  },
  {
    "text": "encode anything in JavaScript and I keep",
    "start": "385020",
    "end": "387419"
  },
  {
    "text": "seeing Chad I don't know how Chad has",
    "start": "387419",
    "end": "389340"
  },
  {
    "text": "ruined me when I see it all I see is",
    "start": "389340",
    "end": "391860"
  },
  {
    "text": "Chad and I don't know how to spell it",
    "start": "391860",
    "end": "395599"
  },
  {
    "text": "God regrets free will after this",
    "start": "396120",
    "end": "398940"
  },
  {
    "text": "Chad at sing cup",
    "start": "398940",
    "end": "402500"
  },
  {
    "text": "let's get to it the first thing I'm",
    "start": "404220",
    "end": "405479"
  },
  {
    "text": "going to do is I believe this actually",
    "start": "405479",
    "end": "406979"
  },
  {
    "text": "was one of the Twitter users or one of",
    "start": "406979",
    "end": "408600"
  },
  {
    "text": "the Twitter devs that Elon was",
    "start": "408600",
    "end": "409860"
  },
  {
    "text": "complaining about I'm gonna write an",
    "start": "409860",
    "end": "411300"
  },
  {
    "text": "object here I'm going to call it map",
    "start": "411300",
    "end": "412259"
  },
  {
    "text": "we're going to store all the characters",
    "start": "412259",
    "end": "412979"
  },
  {
    "text": "that we collect up in here and the first",
    "start": "412979",
    "end": "414419"
  },
  {
    "text": "one we're gonna get is a now we can get",
    "start": "414419",
    "end": "416160"
  },
  {
    "text": "a by using the famous not the number",
    "start": "416160",
    "end": "417720"
  },
  {
    "text": "example so there's many ways you can get",
    "start": "417720",
    "end": "419039"
  },
  {
    "text": "another number we can cast a letter to a",
    "start": "419039",
    "end": "420900"
  },
  {
    "text": "number but we don't have a in our",
    "start": "420900",
    "end": "422039"
  },
  {
    "text": "disposal but what we do have is an",
    "start": "422039",
    "end": "423240"
  },
  {
    "text": "object if we run this then we'll see",
    "start": "423240",
    "end": "425280"
  },
  {
    "text": "that we get another number but we",
    "start": "425280",
    "end": "426539"
  },
  {
    "text": "actually need a string and a good way",
    "start": "426539",
    "end": "427919"
  },
  {
    "text": "and the way we'll use for all of these",
    "start": "427919",
    "end": "429240"
  },
  {
    "text": "things to convert something which is not",
    "start": "429240",
    "end": "430620"
  },
  {
    "text": "yet a string but we want a string",
    "start": "430620",
    "end": "431699"
  },
  {
    "text": "version of it is to Simply add an empty",
    "start": "431699",
    "end": "433199"
  },
  {
    "text": "array so in the JavaScript typo version",
    "start": "433199",
    "end": "434819"
  },
  {
    "text": "rules that's going to force this thing",
    "start": "434819",
    "end": "435780"
  },
  {
    "text": "to be a string and we're going to be",
    "start": "435780",
    "end": "437039"
  },
  {
    "text": "able to get the string not the number",
    "start": "437039",
    "end": "438300"
  },
  {
    "text": "and strings have the property in",
    "start": "438300",
    "end": "439560"
  },
  {
    "text": "JavaScript that you can index them like",
    "start": "439560",
    "end": "440699"
  },
  {
    "text": "their arrays so we can uh we can provide",
    "start": "440699",
    "end": "442680"
  },
  {
    "text": "an index and extract the character of",
    "start": "442680",
    "end": "444120"
  },
  {
    "text": "that index so if I wrap this up in",
    "start": "444120",
    "end": "445680"
  },
  {
    "text": "parentheses and then we use square",
    "start": "445680",
    "end": "446639"
  },
  {
    "text": "brackets the second character in here so",
    "start": "446639",
    "end": "448380"
  },
  {
    "text": "the index number one is is the letter A",
    "start": "448380",
    "end": "450000"
  },
  {
    "text": "so we can put in here the number one and",
    "start": "450000",
    "end": "451680"
  },
  {
    "text": "we should see the letter A but we can't",
    "start": "451680",
    "end": "452759"
  },
  {
    "text": "use the number one uh we need to use our",
    "start": "452759",
    "end": "454080"
  },
  {
    "text": "special number encoding so we can",
    "start": "454080",
    "end": "455759"
  },
  {
    "text": "actually just use number and one but",
    "start": "455759",
    "end": "457440"
  },
  {
    "text": "this whole thing we're going to store it",
    "start": "457440",
    "end": "458400"
  },
  {
    "text": "as a string because we're going to look",
    "start": "458400",
    "end": "459300"
  },
  {
    "text": "back at it later so what I'm going to do",
    "start": "459300",
    "end": "460199"
  },
  {
    "text": "is I'm going to put this in a template",
    "start": "460199",
    "end": "461039"
  },
  {
    "text": "string and we can evaluate the number",
    "start": "461039",
    "end": "462120"
  },
  {
    "text": "inside and if we take a look at this",
    "start": "462120",
    "end": "463319"
  },
  {
    "text": "we'll see this strange little concoction",
    "start": "463319",
    "end": "464819"
  },
  {
    "text": "we'll just verify that we do it get the",
    "start": "464819",
    "end": "466440"
  },
  {
    "text": "letter A if we try to add an empty array",
    "start": "466440",
    "end": "468599"
  },
  {
    "text": "to an object it's going to force the",
    "start": "468599",
    "end": "470280"
  },
  {
    "text": "object to be interpreted as a string and",
    "start": "470280",
    "end": "472080"
  },
  {
    "text": "an object when it types A String always",
    "start": "472080",
    "end": "473580"
  },
  {
    "text": "yields the same results we take an empty",
    "start": "473580",
    "end": "474840"
  },
  {
    "text": "object we add an array and we take a",
    "start": "474840",
    "end": "476340"
  },
  {
    "text": "look we're going to see the value object",
    "start": "476340",
    "end": "477360"
  },
  {
    "text": "objects but we can use this to our",
    "start": "477360",
    "end": "478380"
  },
  {
    "text": "advantage because this contains quite a",
    "start": "478380",
    "end": "479460"
  },
  {
    "text": "lot of characters we need for instance",
    "start": "479460",
    "end": "480780"
  },
  {
    "text": "it contains the character o it contains",
    "start": "480780",
    "end": "482580"
  },
  {
    "text": "e c t the space and so let's just go",
    "start": "482580",
    "end": "484620"
  },
  {
    "text": "expecting these exactly even though even",
    "start": "484620",
    "end": "486840"
  },
  {
    "text": "the person the background was like it",
    "start": "486840",
    "end": "488400"
  },
  {
    "text": "was angry about this okay if you can't",
    "start": "488400",
    "end": "489900"
  },
  {
    "text": "use one you should use a number",
    "start": "489900",
    "end": "492120"
  },
  {
    "text": "I like the idea",
    "start": "492120",
    "end": "494160"
  },
  {
    "text": "that this is how I'm going to program",
    "start": "494160",
    "end": "495660"
  },
  {
    "text": "JavaScript from here on out",
    "start": "495660",
    "end": "498860"
  },
  {
    "text": "okay there we go",
    "start": "501660",
    "end": "504440"
  },
  {
    "text": "let's check all the things and when I",
    "start": "508319",
    "end": "509940"
  },
  {
    "text": "shortcut we can use for this is eval",
    "start": "509940",
    "end": "511139"
  },
  {
    "text": "which will let us just run this s code",
    "start": "511139",
    "end": "512520"
  },
  {
    "text": "these strings so if we have o we have e",
    "start": "512520",
    "end": "515099"
  },
  {
    "text": "we have e c t but oh all right the",
    "start": "515099",
    "end": "519000"
  },
  {
    "text": "boolean's true and false are also a nice",
    "start": "519000",
    "end": "520680"
  },
  {
    "text": "source of characters we know we can get",
    "start": "520680",
    "end": "522000"
  },
  {
    "text": "a Boolean with an exclamation mark",
    "start": "522000",
    "end": "523320"
  },
  {
    "text": "square brackets and then we can add so",
    "start": "523320",
    "end": "525060"
  },
  {
    "text": "you can't quite write anything you're",
    "start": "525060",
    "end": "527100"
  },
  {
    "text": "kind of restricted to the amount of uh",
    "start": "527100",
    "end": "528899"
  },
  {
    "text": "strings you can create in the beginning",
    "start": "528899",
    "end": "532399"
  },
  {
    "text": "is that fair",
    "start": "532680",
    "end": "535519"
  },
  {
    "text": "Another Empty way to cause that to a",
    "start": "536580",
    "end": "538080"
  },
  {
    "text": "string that's going to give us the",
    "start": "538080",
    "end": "538740"
  },
  {
    "text": "string false and from there we can",
    "start": "538740",
    "end": "540000"
  },
  {
    "text": "extract F in zeroth position",
    "start": "540000",
    "end": "543720"
  },
  {
    "text": "and we can extract s in the in the third",
    "start": "543720",
    "end": "545820"
  },
  {
    "text": "position",
    "start": "545820",
    "end": "547080"
  },
  {
    "text": "if we cast this to true then we can get",
    "start": "547080",
    "end": "548700"
  },
  {
    "text": "R in the first position",
    "start": "548700",
    "end": "551100"
  },
  {
    "text": "and we can get u in the second position",
    "start": "551100",
    "end": "552540"
  },
  {
    "text": "okay well if you let this I and N we can",
    "start": "552540",
    "end": "554760"
  },
  {
    "text": "use the special floating Point numerical",
    "start": "554760",
    "end": "556320"
  },
  {
    "text": "value Infinity can be obtained in many",
    "start": "556320",
    "end": "558240"
  },
  {
    "text": "ways but one simple way is just to",
    "start": "558240",
    "end": "559320"
  },
  {
    "text": "divide a non-zero number by zero let's",
    "start": "559320",
    "end": "560820"
  },
  {
    "text": "take what we have here we know we can",
    "start": "560820",
    "end": "562019"
  },
  {
    "text": "get one and we know we can get zero in",
    "start": "562019",
    "end": "563640"
  },
  {
    "text": "this way we should get infinity and then",
    "start": "563640",
    "end": "565500"
  },
  {
    "text": "if we add to this an empty array",
    "start": "565500",
    "end": "568920"
  },
  {
    "text": "we'll get the string",
    "start": "568920",
    "end": "571940"
  },
  {
    "text": "okay and here actually I've just",
    "start": "574740",
    "end": "576000"
  },
  {
    "text": "realized there's a small mistake uh on",
    "start": "576000",
    "end": "577320"
  },
  {
    "text": "the F because we're providing zero in",
    "start": "577320",
    "end": "578820"
  },
  {
    "text": "here and there's no way for us to get",
    "start": "578820",
    "end": "580080"
  },
  {
    "text": "zero from our current function so what",
    "start": "580080",
    "end": "581339"
  },
  {
    "text": "we should actually do is add in a little",
    "start": "581339",
    "end": "582420"
  },
  {
    "text": "condition here which says if n is zero",
    "start": "582420",
    "end": "583800"
  },
  {
    "text": "then just return zero",
    "start": "583800",
    "end": "585600"
  },
  {
    "text": "Okay so we've already got a good portion",
    "start": "585600",
    "end": "586800"
  },
  {
    "text": "of what we need but in order to get the",
    "start": "586800",
    "end": "587940"
  },
  {
    "text": "rest of the characters we're gonna need",
    "start": "587940",
    "end": "588720"
  },
  {
    "text": "to crank the crazy ratchet a little bit",
    "start": "588720",
    "end": "589920"
  },
  {
    "text": "if you're all good at anagrams you might",
    "start": "589920",
    "end": "591420"
  },
  {
    "text": "have noticed that the letters we have so",
    "start": "591420",
    "end": "592620"
  },
  {
    "text": "far can spell out some words one such",
    "start": "592620",
    "end": "594240"
  },
  {
    "text": "word is Constructor now all values in",
    "start": "594240",
    "end": "595860"
  },
  {
    "text": "JavaScript are technically a kind of",
    "start": "595860",
    "end": "597000"
  },
  {
    "text": "object and you can always access",
    "start": "597000",
    "end": "597839"
  },
  {
    "text": "properties on them with square bracket",
    "start": "597839",
    "end": "599100"
  },
  {
    "text": "syntax the following are quite valid in",
    "start": "599100",
    "end": "600779"
  },
  {
    "text": "JavaScript we can actually open up",
    "start": "600779",
    "end": "602339"
  },
  {
    "text": "square brackets with a string and C the",
    "start": "602339",
    "end": "604800"
  },
  {
    "text": "tostring function simply by adding a",
    "start": "604800",
    "end": "606839"
  },
  {
    "text": "string in here and likewise we can use",
    "start": "606839",
    "end": "608459"
  },
  {
    "text": "the Constructor function which will",
    "start": "608459",
    "end": "610080"
  },
  {
    "text": "provide us back the Constructor so how",
    "start": "610080",
    "end": "611640"
  },
  {
    "text": "can we use this to our advantage if we",
    "start": "611640",
    "end": "613200"
  },
  {
    "text": "were to use this on string so we can",
    "start": "613200",
    "end": "615060"
  },
  {
    "text": "make a simple string just by adding two",
    "start": "615060",
    "end": "616380"
  },
  {
    "text": "empty arrays together we would now",
    "start": "616380",
    "end": "617640"
  },
  {
    "text": "actually be able to write this uh this",
    "start": "617640",
    "end": "618839"
  },
  {
    "text": "word construct out using our map um but",
    "start": "618839",
    "end": "620940"
  },
  {
    "text": "it might be nice to have a sort of uh oh",
    "start": "620940",
    "end": "622440"
  },
  {
    "text": "a more convenient way of doing that so",
    "start": "622440",
    "end": "623580"
  },
  {
    "text": "what I'm going to do is I'm going to",
    "start": "623580",
    "end": "624180"
  },
  {
    "text": "write a function called from string from",
    "start": "624180",
    "end": "625860"
  },
  {
    "text": "string is going to take a variable s",
    "start": "625860",
    "end": "627000"
  },
  {
    "text": "which we're going to immediately split",
    "start": "627000",
    "end": "628080"
  },
  {
    "text": "into an array of characters and then",
    "start": "628080",
    "end": "629580"
  },
  {
    "text": "we're going to map each character to be",
    "start": "629580",
    "end": "631140"
  },
  {
    "text": "the fan",
    "start": "631140",
    "end": "633080"
  },
  {
    "text": "oh my goodness",
    "start": "633080",
    "end": "635880"
  },
  {
    "text": "I never even thought about that",
    "start": "635880",
    "end": "638279"
  },
  {
    "text": "oh it's so right of course you could",
    "start": "638279",
    "end": "642720"
  },
  {
    "text": "I okay so I went through this exercise a",
    "start": "642720",
    "end": "645060"
  },
  {
    "text": "while ago",
    "start": "645060",
    "end": "646200"
  },
  {
    "text": "where I tried to make the dumbest",
    "start": "646200",
    "end": "648360"
  },
  {
    "text": "JavaScript program ever print out",
    "start": "648360",
    "end": "651899"
  },
  {
    "text": "use rust instead",
    "start": "651899",
    "end": "655140"
  },
  {
    "text": "but I couldn't figure out how to do it",
    "start": "655140",
    "end": "659180"
  },
  {
    "text": "because I couldn't get all the letters",
    "start": "659760",
    "end": "663560"
  },
  {
    "text": "and look at that",
    "start": "664200",
    "end": "667399"
  },
  {
    "text": "uh huh",
    "start": "670680",
    "end": "674040"
  },
  {
    "text": "um",
    "start": "674040",
    "end": "676220"
  },
  {
    "text": "I can't believe this",
    "start": "677160",
    "end": "679320"
  },
  {
    "text": "I can't even believe it",
    "start": "679320",
    "end": "682519"
  },
  {
    "text": "let's keep on going your Insight on map",
    "start": "689519",
    "end": "691800"
  },
  {
    "text": "and then we're going to join it all back",
    "start": "691800",
    "end": "692880"
  },
  {
    "text": "together with pluses and so this front",
    "start": "692880",
    "end": "695220"
  },
  {
    "text": "string if we were to use it uh and",
    "start": "695220",
    "end": "697440"
  },
  {
    "text": "provided the string construct them",
    "start": "697440",
    "end": "699839"
  },
  {
    "text": "and then run this piece of code we're",
    "start": "699839",
    "end": "701160"
  },
  {
    "text": "going to get quite an elaborate string",
    "start": "701160",
    "end": "703019"
  },
  {
    "text": "and I'm going to cut and paste this into",
    "start": "703019",
    "end": "704459"
  },
  {
    "text": "the debugger so we can see it what we",
    "start": "704459",
    "end": "705779"
  },
  {
    "text": "actually get here is the string",
    "start": "705779",
    "end": "706500"
  },
  {
    "text": "Constructor and if we take that one step",
    "start": "706500",
    "end": "708360"
  },
  {
    "text": "further and we take all of what we just",
    "start": "708360",
    "end": "710459"
  },
  {
    "text": "got we add an empty array to it we'll",
    "start": "710459",
    "end": "712440"
  },
  {
    "text": "have that as a string where we can",
    "start": "712440",
    "end": "713579"
  },
  {
    "text": "extract the large capital S there so",
    "start": "713579",
    "end": "716640"
  },
  {
    "text": "let's try that",
    "start": "716640",
    "end": "719040"
  },
  {
    "text": "I just held my breath I just held my",
    "start": "719040",
    "end": "720600"
  },
  {
    "text": "breath",
    "start": "720600",
    "end": "722459"
  },
  {
    "text": "oh gosh I just I I actually just held my",
    "start": "722459",
    "end": "725040"
  },
  {
    "text": "breath now there are a couple more",
    "start": "725040",
    "end": "726060"
  },
  {
    "text": "Constructors that we can abuse in the",
    "start": "726060",
    "end": "727320"
  },
  {
    "text": "same way uh namely The regex Constructor",
    "start": "727320",
    "end": "729480"
  },
  {
    "text": "we can we can get that to get the letter",
    "start": "729480",
    "end": "731040"
  },
  {
    "text": "P",
    "start": "731040",
    "end": "731940"
  },
  {
    "text": "um and all we have to do is to create a",
    "start": "731940",
    "end": "733260"
  },
  {
    "text": "minimal regex something like this and",
    "start": "733260",
    "end": "735540"
  },
  {
    "text": "get the function Constructor and we",
    "start": "735540",
    "end": "737700"
  },
  {
    "text": "should be able to I'm still holding my",
    "start": "737700",
    "end": "738899"
  },
  {
    "text": "breath oh gosh",
    "start": "738899",
    "end": "741620"
  },
  {
    "text": "now we have one more easy character that",
    "start": "745320",
    "end": "747360"
  },
  {
    "text": "we can extract without too much hassle",
    "start": "747360",
    "end": "748620"
  },
  {
    "text": "which is the backslash so we have to",
    "start": "748620",
    "end": "750120"
  },
  {
    "text": "escape the backslash of course and the",
    "start": "750120",
    "end": "751380"
  },
  {
    "text": "way we can get it is to just um again",
    "start": "751380",
    "end": "753360"
  },
  {
    "text": "create a regular expression but we'll",
    "start": "753360",
    "end": "754500"
  },
  {
    "text": "put a backslash in there and in order",
    "start": "754500",
    "end": "756180"
  },
  {
    "text": "for this to work because of the way that",
    "start": "756180",
    "end": "757320"
  },
  {
    "text": "string escaping works we need to put two",
    "start": "757320",
    "end": "758519"
  },
  {
    "text": "backslashes in there",
    "start": "758519",
    "end": "760100"
  },
  {
    "text": "and we need there to be two backslashes",
    "start": "760100",
    "end": "762300"
  },
  {
    "text": "when we evaluate it",
    "start": "762300",
    "end": "764600"
  },
  {
    "text": "actually in order to cast it to a string",
    "start": "764600",
    "end": "767220"
  },
  {
    "text": "and then we can look up the index which",
    "start": "767220",
    "end": "768600"
  },
  {
    "text": "is simply the number",
    "start": "768600",
    "end": "771980"
  },
  {
    "text": "things are about to get tricky again",
    "start": "777240",
    "end": "778320"
  },
  {
    "text": "because the characters that we have left",
    "start": "778320",
    "end": "779220"
  },
  {
    "text": "over now are not gonna be found in this",
    "start": "779220",
    "end": "780420"
  },
  {
    "text": "way we're gonna have to get them another",
    "start": "780420",
    "end": "781320"
  },
  {
    "text": "way the two-string function of numbers",
    "start": "781320",
    "end": "782579"
  },
  {
    "text": "is actually quite interesting because it",
    "start": "782579",
    "end": "783959"
  },
  {
    "text": "takes okay this this is gonna blow me I",
    "start": "783959",
    "end": "786120"
  },
  {
    "text": "already feel like I'm gonna lose my [ __ ]",
    "start": "786120",
    "end": "787980"
  },
  {
    "text": "when I see this I'm",
    "start": "787980",
    "end": "790320"
  },
  {
    "text": "I am genuinely excited right now",
    "start": "790320",
    "end": "792839"
  },
  {
    "text": "this can't",
    "start": "792839",
    "end": "794700"
  },
  {
    "text": "this can't be real",
    "start": "794700",
    "end": "796680"
  },
  {
    "text": "this can't it can't be real this can't",
    "start": "796680",
    "end": "798360"
  },
  {
    "text": "actually exist I",
    "start": "798360",
    "end": "800339"
  },
  {
    "text": "it's an extra argument and that says",
    "start": "800339",
    "end": "802079"
  },
  {
    "text": "which base the number that stream should",
    "start": "802079",
    "end": "803700"
  },
  {
    "text": "eventually be converted to um so if we",
    "start": "803700",
    "end": "805440"
  },
  {
    "text": "would have the number 170 let's say and",
    "start": "805440",
    "end": "807480"
  },
  {
    "text": "we would convert that through a string",
    "start": "807480",
    "end": "808440"
  },
  {
    "text": "by default that's going to be converted",
    "start": "808440",
    "end": "809880"
  },
  {
    "text": "in base 10. so we're going to get the",
    "start": "809880",
    "end": "811380"
  },
  {
    "text": "string 170. but if we were to provide a",
    "start": "811380",
    "end": "813120"
  },
  {
    "text": "different base say base two we're going",
    "start": "813120",
    "end": "814620"
  },
  {
    "text": "to get the binary representation of that",
    "start": "814620",
    "end": "815880"
  },
  {
    "text": "if we were to use base 16 we would get",
    "start": "815880",
    "end": "818700"
  },
  {
    "text": "the hexadecimal representation and the",
    "start": "818700",
    "end": "820800"
  },
  {
    "text": "nice thing is that bases which are",
    "start": "820800",
    "end": "821760"
  },
  {
    "text": "larger than 10 they begin to use the",
    "start": "821760",
    "end": "823019"
  },
  {
    "text": "alphabet in order to index the numbers",
    "start": "823019",
    "end": "824339"
  },
  {
    "text": "so we can use that to our advantages we",
    "start": "824339",
    "end": "826079"
  },
  {
    "text": "can now actually make the string to",
    "start": "826079",
    "end": "827279"
  },
  {
    "text": "string we can get the letter d by saying",
    "start": "827279",
    "end": "829560"
  },
  {
    "text": "that well D would be in a number system",
    "start": "829560",
    "end": "831660"
  },
  {
    "text": "D would be the value",
    "start": "831660",
    "end": "833040"
  },
  {
    "text": "um 14 let's say in hexadecimal sorry 13",
    "start": "833040",
    "end": "835260"
  },
  {
    "text": "D would be value 13. um but it would be",
    "start": "835260",
    "end": "837600"
  },
  {
    "text": "the value 13 in any number system that",
    "start": "837600",
    "end": "839700"
  },
  {
    "text": "let us get up to a character which would",
    "start": "839700",
    "end": "841079"
  },
  {
    "text": "be D so we can actually even say 14 here",
    "start": "841079",
    "end": "842459"
  },
  {
    "text": "before we would get a weird result like",
    "start": "842459",
    "end": "843839"
  },
  {
    "text": "this so if we can encode this which now",
    "start": "843839",
    "end": "845820"
  },
  {
    "text": "we easily can um we can get the letter d",
    "start": "845820",
    "end": "849260"
  },
  {
    "text": "oh my goodness",
    "start": "849260",
    "end": "852360"
  },
  {
    "text": "and it's quite interesting to see uh",
    "start": "852360",
    "end": "854399"
  },
  {
    "text": "what this comes up with this should just",
    "start": "854399",
    "end": "855480"
  },
  {
    "text": "be validity",
    "start": "855480",
    "end": "856500"
  },
  {
    "text": "and this should be from string rather",
    "start": "856500",
    "end": "858300"
  },
  {
    "text": "than form string",
    "start": "858300",
    "end": "860700"
  },
  {
    "text": "but this kind of monstrosity is what is",
    "start": "860700",
    "end": "862320"
  },
  {
    "text": "output by this but if we run this we",
    "start": "862320",
    "end": "863940"
  },
  {
    "text": "should see",
    "start": "863940",
    "end": "864899"
  },
  {
    "text": "the letter D pop out great how we can",
    "start": "864899",
    "end": "866700"
  },
  {
    "text": "get the other three letters this way as",
    "start": "866700",
    "end": "867720"
  },
  {
    "text": "well the other three lowercase letters",
    "start": "867720",
    "end": "869040"
  },
  {
    "text": "at least",
    "start": "869040",
    "end": "871279"
  },
  {
    "text": "yeah you can just get all the letters",
    "start": "874380",
    "end": "875820"
  },
  {
    "text": "now to anyone that has used the language",
    "start": "875820",
    "end": "877139"
  },
  {
    "text": "of the same name it should come as no",
    "start": "877139",
    "end": "878639"
  },
  {
    "text": "surprise but the letter c is going to",
    "start": "878639",
    "end": "879839"
  },
  {
    "text": "pose some problems and it's going to",
    "start": "879839",
    "end": "880980"
  },
  {
    "text": "force us to do some really weird stuff",
    "start": "880980",
    "end": "882839"
  },
  {
    "text": "um it requires some lateral thinking and",
    "start": "882839",
    "end": "883980"
  },
  {
    "text": "I'm actually going to leave a moment",
    "start": "883980",
    "end": "884639"
  },
  {
    "text": "here to pause uh perhaps you might want",
    "start": "884639",
    "end": "886139"
  },
  {
    "text": "to think about how you might make this",
    "start": "886139",
    "end": "887519"
  },
  {
    "text": "work",
    "start": "887519",
    "end": "889699"
  },
  {
    "text": "okay if you didn't get it don't worry",
    "start": "890519",
    "end": "892320"
  },
  {
    "text": "it's not obvious we're gonna need to",
    "start": "892320",
    "end": "893820"
  },
  {
    "text": "access a Constructor again and let's",
    "start": "893820",
    "end": "895019"
  },
  {
    "text": "build this up piece by piece so we're",
    "start": "895019",
    "end": "897000"
  },
  {
    "text": "gonna need a Constructor but we're gonna",
    "start": "897000",
    "end": "898139"
  },
  {
    "text": "need the function Constructor uh so",
    "start": "898139",
    "end": "900300"
  },
  {
    "text": "let's just evaluate",
    "start": "900300",
    "end": "903260"
  },
  {
    "text": "I am really impressed right now I just",
    "start": "916139",
    "end": "919019"
  },
  {
    "text": "want you to know that",
    "start": "919019",
    "end": "921680"
  },
  {
    "text": "I don't even know what to do with this",
    "start": "924899",
    "end": "926639"
  },
  {
    "text": "information but I feel",
    "start": "926639",
    "end": "930019"
  },
  {
    "text": "I feel",
    "start": "932100",
    "end": "933839"
  },
  {
    "text": "like I want to know more",
    "start": "933839",
    "end": "937459"
  },
  {
    "text": "I want to know I want to know what's",
    "start": "941639",
    "end": "943560"
  },
  {
    "text": "happening",
    "start": "943560",
    "end": "944579"
  },
  {
    "text": "this in line so we can easily read it",
    "start": "944579",
    "end": "946199"
  },
  {
    "text": "and we'll take it away I'll do it we can",
    "start": "946199",
    "end": "947519"
  },
  {
    "text": "get the function Constructor by",
    "start": "947519",
    "end": "948779"
  },
  {
    "text": "producing an empty Arrow function and",
    "start": "948779",
    "end": "950519"
  },
  {
    "text": "then if we wrap that up we use our from",
    "start": "950519",
    "end": "953639"
  },
  {
    "text": "string",
    "start": "953639",
    "end": "955800"
  },
  {
    "text": "with the Constructor string so when",
    "start": "955800",
    "end": "957300"
  },
  {
    "text": "we've wrapped all of that up we should",
    "start": "957300",
    "end": "958199"
  },
  {
    "text": "see that we have access to the function",
    "start": "958199",
    "end": "960120"
  },
  {
    "text": "Constructor but this time we don't want",
    "start": "960120",
    "end": "961440"
  },
  {
    "text": "to cast it into a string we actually",
    "start": "961440",
    "end": "963120"
  },
  {
    "text": "want to call this Constructor we want to",
    "start": "963120",
    "end": "964740"
  },
  {
    "text": "be able to use the function that this",
    "start": "964740",
    "end": "965880"
  },
  {
    "text": "provides to us and if you don't know",
    "start": "965880",
    "end": "966899"
  },
  {
    "text": "what the function Constructor actually",
    "start": "966899",
    "end": "967920"
  },
  {
    "text": "does as a function what it does is it",
    "start": "967920",
    "end": "969480"
  },
  {
    "text": "takes a string that represents some",
    "start": "969480",
    "end": "970860"
  },
  {
    "text": "JavaScript code and it it turns that",
    "start": "970860",
    "end": "972540"
  },
  {
    "text": "into a function that can be caused that",
    "start": "972540",
    "end": "973860"
  },
  {
    "text": "will actually run the code inside it's a",
    "start": "973860",
    "end": "975360"
  },
  {
    "text": "lot like eval in that way but in some",
    "start": "975360",
    "end": "977699"
  },
  {
    "text": "ways it's uh it has a little bit more",
    "start": "977699",
    "end": "979380"
  },
  {
    "text": "constraint which can be applied to it",
    "start": "979380",
    "end": "980519"
  },
  {
    "text": "please don't take that as a testament to",
    "start": "980519",
    "end": "982260"
  },
  {
    "text": "its safety it's it's basically still",
    "start": "982260",
    "end": "983519"
  },
  {
    "text": "like running untrusted codes",
    "start": "983519",
    "end": "986540"
  },
  {
    "text": "everything that we've put together from",
    "start": "986720",
    "end": "988560"
  },
  {
    "text": "here is we're going to be able to use",
    "start": "988560",
    "end": "989399"
  },
  {
    "text": "the string return Escape",
    "start": "989399",
    "end": "991560"
  },
  {
    "text": "so what we're actually doing here is",
    "start": "991560",
    "end": "993120"
  },
  {
    "text": "we're we're going to get a function that",
    "start": "993120",
    "end": "994199"
  },
  {
    "text": "when we run it is going to return to us",
    "start": "994199",
    "end": "995519"
  },
  {
    "text": "the built-in standard Library function",
    "start": "995519",
    "end": "996899"
  },
  {
    "text": "Escape which just like the name applies",
    "start": "996899",
    "end": "998339"
  },
  {
    "text": "performs a string escaping uh to the",
    "start": "998339",
    "end": "1000079"
  },
  {
    "text": "ASCII value of certain symbols if we",
    "start": "1000079",
    "end": "1001639"
  },
  {
    "text": "call this function in line and I run",
    "start": "1001639",
    "end": "1003139"
  },
  {
    "text": "this hopefully we'll see that we have",
    "start": "1003139",
    "end": "1004579"
  },
  {
    "text": "here the function escape and if we call",
    "start": "1004579",
    "end": "1006079"
  },
  {
    "text": "Escape and we pass that string then we",
    "start": "1006079",
    "end": "1007759"
  },
  {
    "text": "should be able to see an escape value so",
    "start": "1007759",
    "end": "1009259"
  },
  {
    "text": "what can we escape well what we're going",
    "start": "1009259",
    "end": "1010880"
  },
  {
    "text": "to escape is",
    "start": "1010880",
    "end": "1013339"
  },
  {
    "text": "the map and then the backslash just the",
    "start": "1013339",
    "end": "1015620"
  },
  {
    "text": "backslash let's run that and see what we",
    "start": "1015620",
    "end": "1016820"
  },
  {
    "text": "get we have an escape backslash which is",
    "start": "1016820",
    "end": "1019160"
  },
  {
    "text": "the hexadecimal number 5C and it's",
    "start": "1019160",
    "end": "1021500"
  },
  {
    "text": "helpfully capitalize the C for us so we",
    "start": "1021500",
    "end": "1023480"
  },
  {
    "text": "can now take that whole expression",
    "start": "1023480",
    "end": "1025880"
  },
  {
    "text": "and index it as a string and we have a",
    "start": "1025880",
    "end": "1027740"
  },
  {
    "text": "Capital C",
    "start": "1027740",
    "end": "1030220"
  },
  {
    "text": "actually the game is pretty much over",
    "start": "1030679",
    "end": "1031880"
  },
  {
    "text": "now we've got our ultimate escape hatch",
    "start": "1031880",
    "end": "1033500"
  },
  {
    "text": "now what we can do is we can scroll back",
    "start": "1033500",
    "end": "1034699"
  },
  {
    "text": "up to the from string function and",
    "start": "1034699",
    "end": "1036319"
  },
  {
    "text": "before if we had a key that was not in",
    "start": "1036319",
    "end": "1038240"
  },
  {
    "text": "this map then we were just going to get",
    "start": "1038240",
    "end": "1039260"
  },
  {
    "text": "undefined and that's no good um if we",
    "start": "1039260",
    "end": "1040699"
  },
  {
    "text": "have a key that we haven't defined here",
    "start": "1040699",
    "end": "1041780"
  },
  {
    "text": "we should be able to find a way to",
    "start": "1041780",
    "end": "1042918"
  },
  {
    "text": "reduce that strength so we can say if X",
    "start": "1042919",
    "end": "1044360"
  },
  {
    "text": "is not in map",
    "start": "1044360",
    "end": "1045740"
  },
  {
    "text": "then we want to get the character code",
    "start": "1045740",
    "end": "1047418"
  },
  {
    "text": "of X the numerical encoding of this",
    "start": "1047419",
    "end": "1048919"
  },
  {
    "text": "character and we want to get into the",
    "start": "1048919",
    "end": "1050120"
  },
  {
    "text": "string Constructor and we know how to do",
    "start": "1050120",
    "end": "1051740"
  },
  {
    "text": "that we add two empty arrays together we",
    "start": "1051740",
    "end": "1053720"
  },
  {
    "text": "use from string so we do a sort of",
    "start": "1053720",
    "end": "1055220"
  },
  {
    "text": "recursive call here and the string we",
    "start": "1055220",
    "end": "1056419"
  },
  {
    "text": "want to get of course is the Constructor",
    "start": "1056419",
    "end": "1057679"
  },
  {
    "text": "this is going to give us the string",
    "start": "1057679",
    "end": "1058880"
  },
  {
    "text": "Constructor and on the string",
    "start": "1058880",
    "end": "1059720"
  },
  {
    "text": "Constructor we have a static method and",
    "start": "1059720",
    "end": "1061340"
  },
  {
    "text": "that static method is called from",
    "start": "1061340",
    "end": "1062539"
  },
  {
    "text": "charcode and then to this we can simply",
    "start": "1062539",
    "end": "1065059"
  },
  {
    "text": "pass our character code but we need to",
    "start": "1065059",
    "end": "1066799"
  },
  {
    "text": "encode it in our Strange number system",
    "start": "1066799",
    "end": "1068120"
  },
  {
    "text": "so this is our final output and now we",
    "start": "1068120",
    "end": "1070460"
  },
  {
    "text": "have a way to get every single character",
    "start": "1070460",
    "end": "1072260"
  },
  {
    "text": "oh why didn't you just do that to begin",
    "start": "1072260",
    "end": "1073820"
  },
  {
    "text": "with right because I was wondering how",
    "start": "1073820",
    "end": "1075559"
  },
  {
    "text": "we got that Capital C but you could just",
    "start": "1075559",
    "end": "1077000"
  },
  {
    "text": "get Capital C from the shower code I",
    "start": "1077000",
    "end": "1078440"
  },
  {
    "text": "forget what Capital C is in the Char",
    "start": "1078440",
    "end": "1080480"
  },
  {
    "text": "system the system of chars what do you",
    "start": "1080480",
    "end": "1083900"
  },
  {
    "text": "think it is uh quick math quick math I'm",
    "start": "1083900",
    "end": "1086240"
  },
  {
    "text": "gonna go with 63.",
    "start": "1086240",
    "end": "1089360"
  },
  {
    "text": "63 quick math quick math",
    "start": "1089360",
    "end": "1091940"
  },
  {
    "text": "uh",
    "start": "1091940",
    "end": "1093559"
  },
  {
    "text": "see or your string from Char code",
    "start": "1093559",
    "end": "1098059"
  },
  {
    "text": "63. oh man I was way off",
    "start": "1098059",
    "end": "1101179"
  },
  {
    "text": "that must mean we're really close five",
    "start": "1101179",
    "end": "1102860"
  },
  {
    "text": "there dang it",
    "start": "1102860",
    "end": "1105140"
  },
  {
    "text": "67 67.",
    "start": "1105140",
    "end": "1108140"
  },
  {
    "text": "so stupid",
    "start": "1108140",
    "end": "1110240"
  },
  {
    "text": "so stupid I didn't know I thought a 61",
    "start": "1110240",
    "end": "1113900"
  },
  {
    "text": "was the starting or 60 was starting I",
    "start": "1113900",
    "end": "1116360"
  },
  {
    "text": "don't know what happened out there",
    "start": "1116360",
    "end": "1117260"
  },
  {
    "text": "anyways that we cannot actually access",
    "start": "1117260",
    "end": "1119600"
  },
  {
    "text": "through some other strange Way by using",
    "start": "1119600",
    "end": "1121280"
  },
  {
    "text": "all from chocolate let's actually see if",
    "start": "1121280",
    "end": "1122840"
  },
  {
    "text": "this works the way it should so I'm",
    "start": "1122840",
    "end": "1124520"
  },
  {
    "text": "going to run here",
    "start": "1124520",
    "end": "1125780"
  },
  {
    "text": "the front string function I'm going to",
    "start": "1125780",
    "end": "1126980"
  },
  {
    "text": "give it a character we definitely don't",
    "start": "1126980",
    "end": "1128000"
  },
  {
    "text": "have capital Z that's going to give us",
    "start": "1128000",
    "end": "1129620"
  },
  {
    "text": "an enormous ridiculous set of characters",
    "start": "1129620",
    "end": "1132799"
  },
  {
    "text": "and let's run eval on that and when we",
    "start": "1132799",
    "end": "1134780"
  },
  {
    "text": "run eval net we can see the capital Z so",
    "start": "1134780",
    "end": "1136820"
  },
  {
    "text": "that's it we're pretty much done but",
    "start": "1136820",
    "end": "1138500"
  },
  {
    "text": "we're not quite done because the best we",
    "start": "1138500",
    "end": "1140240"
  },
  {
    "text": "could do now is we could take some",
    "start": "1140240",
    "end": "1141200"
  },
  {
    "text": "JavaScript code in and we can convert it",
    "start": "1141200",
    "end": "1142640"
  },
  {
    "text": "into this strange set of symbols but it",
    "start": "1142640",
    "end": "1144200"
  },
  {
    "text": "would still only be a string how do we",
    "start": "1144200",
    "end": "1145400"
  },
  {
    "text": "get that code to run well of course we",
    "start": "1145400",
    "end": "1146480"
  },
  {
    "text": "already know how to get code to run here",
    "start": "1146480",
    "end": "1148160"
  },
  {
    "text": "for C we need to just use the function",
    "start": "1148160",
    "end": "1149360"
  },
  {
    "text": "Constructor so what we're going to do is",
    "start": "1149360",
    "end": "1150320"
  },
  {
    "text": "we're going to write a function called",
    "start": "1150320",
    "end": "1151160"
  },
  {
    "text": "compile that's going to take some code",
    "start": "1151160",
    "end": "1153080"
  },
  {
    "text": "and all we're going to do with that is",
    "start": "1153080",
    "end": "1154640"
  },
  {
    "text": "return a string which will be the",
    "start": "1154640",
    "end": "1156200"
  },
  {
    "text": "function we know how to get that",
    "start": "1156200",
    "end": "1159380"
  },
  {
    "text": "and then we need to call from string",
    "start": "1159380",
    "end": "1162320"
  },
  {
    "text": "just the code",
    "start": "1162320",
    "end": "1163580"
  },
  {
    "text": "and then this is just now a function but",
    "start": "1163580",
    "end": "1165559"
  },
  {
    "text": "we need to run that function so we just",
    "start": "1165559",
    "end": "1167179"
  },
  {
    "text": "immediately come on okay",
    "start": "1167179",
    "end": "1170500"
  },
  {
    "text": "the results are calling compiler look at",
    "start": "1170500",
    "end": "1172760"
  },
  {
    "text": "that everyone's laughing at him not even",
    "start": "1172760",
    "end": "1174320"
  },
  {
    "text": "seeing the X he doesn't even know about",
    "start": "1174320",
    "end": "1175820"
  },
  {
    "text": "it on the string and in the string let's",
    "start": "1175820",
    "end": "1177799"
  },
  {
    "text": "actually do a consulted log let's say",
    "start": "1177799",
    "end": "1179120"
  },
  {
    "text": "hello world so this is the world's most",
    "start": "1179120",
    "end": "1180919"
  },
  {
    "text": "ridiculous hello world program and it",
    "start": "1180919",
    "end": "1182179"
  },
  {
    "text": "will of course help to not have uh the",
    "start": "1182179",
    "end": "1183799"
  },
  {
    "text": "letter X there instead of the letter c",
    "start": "1183799",
    "end": "1184940"
  },
  {
    "text": "which this should be let's change to the",
    "start": "1184940",
    "end": "1186500"
  },
  {
    "text": "terminal let's bring this terminal to",
    "start": "1186500",
    "end": "1187880"
  },
  {
    "text": "the bottom and let's run this crazy",
    "start": "1187880",
    "end": "1189440"
  },
  {
    "text": "program it's like looking at some sort",
    "start": "1189440",
    "end": "1190640"
  },
  {
    "text": "of with Matrix let's plug that into a",
    "start": "1190640",
    "end": "1191900"
  },
  {
    "text": "file called output.js and if we open",
    "start": "1191900",
    "end": "1193280"
  },
  {
    "text": "that up and take a look at it my syntax",
    "start": "1193280",
    "end": "1194480"
  },
  {
    "text": "highlighter is going to struggle to try",
    "start": "1194480",
    "end": "1196100"
  },
  {
    "text": "and pass this file oh my gosh so it goes",
    "start": "1196100",
    "end": "1197900"
  },
  {
    "text": "on for pages and pages and there's",
    "start": "1197900",
    "end": "1199220"
  },
  {
    "text": "really there's no sense in there um but",
    "start": "1199220",
    "end": "1201140"
  },
  {
    "text": "hopefully if we run this",
    "start": "1201140",
    "end": "1202640"
  },
  {
    "text": "we actually see our message hello world",
    "start": "1202640",
    "end": "1206299"
  },
  {
    "text": "so now the next time someone shows you a",
    "start": "1206299",
    "end": "1208400"
  },
  {
    "text": "toy example of the banana that's blowing",
    "start": "1208400",
    "end": "1210260"
  },
  {
    "text": "their mind I hope you point them to this",
    "start": "1210260",
    "end": "1211580"
  },
  {
    "text": "video and show them what can really be",
    "start": "1211580",
    "end": "1212840"
  },
  {
    "text": "done if you mess with typo version big",
    "start": "1212840",
    "end": "1214100"
  },
  {
    "text": "shout out to Martin Cleber who is the",
    "start": "1214100",
    "end": "1215600"
  },
  {
    "text": "guy who figured all of this out a few",
    "start": "1215600",
    "end": "1216620"
  },
  {
    "text": "years ago I'm gonna put a link below to",
    "start": "1216620",
    "end": "1217640"
  },
  {
    "text": "his website also the GitHub repository",
    "start": "1217640",
    "end": "1218960"
  },
  {
    "text": "where I'm going to put the code of",
    "start": "1218960",
    "end": "1219860"
  },
  {
    "text": "today's video I hope you've enjoyed this",
    "start": "1219860",
    "end": "1221360"
  },
  {
    "text": "load of jazz",
    "start": "1221360",
    "end": "1223840"
  },
  {
    "text": "oh",
    "start": "1232340",
    "end": "1235059"
  },
  {
    "text": "what the hell is even that",
    "start": "1236380",
    "end": "1239860"
  },
  {
    "text": "well what the f uh I don't even know",
    "start": "1239860",
    "end": "1243080"
  },
  {
    "text": "what to do with this information",
    "start": "1243080",
    "end": "1243860"
  },
  {
    "text": "honestly I don't even know what to do",
    "start": "1243860",
    "end": "1245059"
  },
  {
    "text": "with this I don't I don't even know what",
    "start": "1245059",
    "end": "1247520"
  },
  {
    "text": "to do with this",
    "start": "1247520",
    "end": "1250120"
  },
  {
    "text": "other than I wanted",
    "start": "1252620",
    "end": "1255640"
  },
  {
    "text": "somehow use at least zero or one in",
    "start": "1258020",
    "end": "1260179"
  },
  {
    "text": "production I I don't even know what to",
    "start": "1260179",
    "end": "1261919"
  },
  {
    "text": "do here all I know is I'm so happy I",
    "start": "1261919",
    "end": "1264080"
  },
  {
    "text": "feel so weird right now",
    "start": "1264080",
    "end": "1266600"
  },
  {
    "text": "yeah this yes I've seen I've seen this I",
    "start": "1266600",
    "end": "1268820"
  },
  {
    "text": "I I've seen this I've I've heard about",
    "start": "1268820",
    "end": "1271400"
  },
  {
    "text": "this",
    "start": "1271400",
    "end": "1273700"
  },
  {
    "text": "right so you can encode this beautiful",
    "start": "1274520",
    "end": "1276080"
  },
  {
    "text": "thing and Bam and then just",
    "start": "1276080",
    "end": "1280840"
  },
  {
    "text": "look at that",
    "start": "1281299",
    "end": "1283340"
  },
  {
    "text": "just works it just works",
    "start": "1283340",
    "end": "1287559"
  },
  {
    "text": "that was it's so beautiful I don't even",
    "start": "1289760",
    "end": "1291559"
  },
  {
    "text": "know what to do with I don't even know",
    "start": "1291559",
    "end": "1292640"
  },
  {
    "text": "what to do with this information other",
    "start": "1292640",
    "end": "1293780"
  },
  {
    "text": "than",
    "start": "1293780",
    "end": "1296020"
  },
  {
    "text": "I",
    "start": "1305720",
    "end": "1308320"
  },
  {
    "text": "what the f i how does someone",
    "start": "1308720",
    "end": "1312080"
  },
  {
    "text": "okay so just can we all take a second",
    "start": "1312080",
    "end": "1313880"
  },
  {
    "text": "here there was somebody's life",
    "start": "1313880",
    "end": "1317360"
  },
  {
    "text": "that spent",
    "start": "1317360",
    "end": "1320240"
  },
  {
    "text": "likely days",
    "start": "1320240",
    "end": "1322700"
  },
  {
    "text": "trying to make this work out",
    "start": "1322700",
    "end": "1326019"
  },
  {
    "text": "now I would like to make fun of the guy",
    "start": "1326419",
    "end": "1330340"
  },
  {
    "text": "but truly",
    "start": "1330380",
    "end": "1332299"
  },
  {
    "text": "I can't",
    "start": "1332299",
    "end": "1335080"
  },
  {
    "text": "because I am that guy",
    "start": "1336559",
    "end": "1339640"
  },
  {
    "text": "I am that guy",
    "start": "1340460",
    "end": "1343658"
  },
  {
    "text": "maybe it was an accident you don't",
    "start": "1347539",
    "end": "1350659"
  },
  {
    "text": "you don't make a compiler on accident",
    "start": "1350659",
    "end": "1352820"
  },
  {
    "text": "okay",
    "start": "1352820",
    "end": "1354740"
  },
  {
    "text": "you know how many stupid things I've",
    "start": "1354740",
    "end": "1356419"
  },
  {
    "text": "made just because I felt like I could",
    "start": "1356419",
    "end": "1360158"
  },
  {
    "text": "I don't know it just feels right you",
    "start": "1365299",
    "end": "1367280"
  },
  {
    "text": "know like in the moment",
    "start": "1367280",
    "end": "1369919"
  },
  {
    "text": "it feels like",
    "start": "1369919",
    "end": "1371780"
  },
  {
    "text": "you just need to do that",
    "start": "1371780",
    "end": "1373820"
  },
  {
    "text": "this is one of those times",
    "start": "1373820",
    "end": "1376840"
  }
]