[
  {
    "text": "I think so if we're doing typescript",
    "start": "480",
    "end": "2220"
  },
  {
    "text": "content",
    "start": "2220",
    "end": "4700"
  },
  {
    "text": "we're doing typescript content",
    "start": "4860",
    "end": "7680"
  },
  {
    "text": "oh",
    "start": "7680",
    "end": "9720"
  },
  {
    "text": "hey",
    "start": "9720",
    "end": "10800"
  },
  {
    "text": "it's typescript content okay",
    "start": "10800",
    "end": "13860"
  },
  {
    "text": "we don't we don't mess around with that",
    "start": "13860",
    "end": "15540"
  },
  {
    "text": "non-stuff okay",
    "start": "15540",
    "end": "18060"
  },
  {
    "text": "there we go we're not gonna get fully",
    "start": "18060",
    "end": "20160"
  },
  {
    "text": "naked",
    "start": "20160",
    "end": "21240"
  },
  {
    "text": "okay but if we're doing typescript",
    "start": "21240",
    "end": "22980"
  },
  {
    "text": "content you know we gotta look the part",
    "start": "22980",
    "end": "25320"
  },
  {
    "text": "okay hoodies off",
    "start": "25320",
    "end": "27599"
  },
  {
    "text": "let's go okay hey next generation",
    "start": "27599",
    "end": "30660"
  },
  {
    "text": "typescript are you ready for this I'm",
    "start": "30660",
    "end": "32220"
  },
  {
    "text": "kind of excited about this what is next",
    "start": "32220",
    "end": "33719"
  },
  {
    "text": "gen typescript hi I'm Ethan and this",
    "start": "33719",
    "end": "36899"
  },
  {
    "text": "video is an introduction to effect a",
    "start": "36899",
    "end": "39180"
  },
  {
    "text": "typescript library to help developers",
    "start": "39180",
    "end": "40860"
  },
  {
    "text": "easily create the complex applications",
    "start": "40860",
    "end": "42660"
  },
  {
    "text": "of today and tomorrow",
    "start": "42660",
    "end": "45059"
  },
  {
    "text": "okay exciting Next Generation here we're",
    "start": "45059",
    "end": "48000"
  },
  {
    "text": "gonna turn up the we're going to turn up",
    "start": "48000",
    "end": "49020"
  },
  {
    "text": "the volume we're going to turn up the",
    "start": "49020",
    "end": "50940"
  },
  {
    "text": "volume I'm actually at maximum I'm at",
    "start": "50940",
    "end": "53340"
  },
  {
    "text": "153 spinal tap 11 can't get any louder",
    "start": "53340",
    "end": "60079"
  },
  {
    "text": "we are stuck with JavaScript and all of",
    "start": "60239",
    "end": "62039"
  },
  {
    "text": "its quirks whether we like it or not",
    "start": "62039",
    "end": "63420"
  },
  {
    "text": "typescript has been a really big step",
    "start": "63420",
    "end": "65700"
  },
  {
    "text": "but The Primitives it's built on are",
    "start": "65700",
    "end": "67799"
  },
  {
    "text": "still fundamentally flawed it's time to",
    "start": "67799",
    "end": "70380"
  },
  {
    "text": "build with a library designed to handle",
    "start": "70380",
    "end": "72180"
  },
  {
    "text": "the complexity of modern development",
    "start": "72180",
    "end": "74700"
  },
  {
    "text": "how often I do agree with this I think",
    "start": "74700",
    "end": "76979"
  },
  {
    "text": "JavaScript is a severely flawed language",
    "start": "76979",
    "end": "78540"
  },
  {
    "text": "but you know to be fair all languages",
    "start": "78540",
    "end": "80759"
  },
  {
    "text": "are kind of severely flawed in their own",
    "start": "80759",
    "end": "83040"
  },
  {
    "text": "way you know what I mean",
    "start": "83040",
    "end": "84960"
  },
  {
    "text": "you know you know what I mean except for",
    "start": "84960",
    "end": "86820"
  },
  {
    "text": "go and rust they're beautiful languages",
    "start": "86820",
    "end": "88560"
  },
  {
    "text": "and oh camel uh you know I mean c really",
    "start": "88560",
    "end": "91080"
  },
  {
    "text": "is a perfect language",
    "start": "91080",
    "end": "93000"
  },
  {
    "text": "um C plus plus is horrifying oh gosh I",
    "start": "93000",
    "end": "95700"
  },
  {
    "text": "mean I'm sure Elixir is great I've never",
    "start": "95700",
    "end": "97020"
  },
  {
    "text": "used Elixir I mean Haskell's So Glorious",
    "start": "97020",
    "end": "98759"
  },
  {
    "text": "that you can only write white papers",
    "start": "98759",
    "end": "100140"
  },
  {
    "text": "like okay so maybe it's just job maybe",
    "start": "100140",
    "end": "102060"
  },
  {
    "text": "JavaScript sucks have you seen this kind",
    "start": "102060",
    "end": "104280"
  },
  {
    "text": "of code yeah what problems might there",
    "start": "104280",
    "end": "106200"
  },
  {
    "text": "be here several try catch in",
    "start": "106200",
    "end": "109860"
  },
  {
    "text": "so this is like my classic example of",
    "start": "109860",
    "end": "111960"
  },
  {
    "text": "why I hate JavaScript where are the",
    "start": "111960",
    "end": "114659"
  },
  {
    "text": "errors like this function doesn't state",
    "start": "114659",
    "end": "116939"
  },
  {
    "text": "that it has an error this function does",
    "start": "116939",
    "end": "119100"
  },
  {
    "text": "not state that it has an error this",
    "start": "119100",
    "end": "120600"
  },
  {
    "text": "function does not like there is three",
    "start": "120600",
    "end": "122820"
  },
  {
    "text": "possible places where errors happen",
    "start": "122820",
    "end": "126380"
  },
  {
    "text": "the biggest problem is that this",
    "start": "127680",
    "end": "129300"
  },
  {
    "text": "function could crash your program but",
    "start": "129300",
    "end": "130979"
  },
  {
    "text": "doesn't feel the need to tell you",
    "start": "130979",
    "end": "134239"
  },
  {
    "text": "that guy read my mind he just he read it",
    "start": "136440",
    "end": "139500"
  },
  {
    "text": "he read it he knew it I knew it",
    "start": "139500",
    "end": "142440"
  },
  {
    "text": "if it happens it happens dude pre-watch",
    "start": "142440",
    "end": "145020"
  },
  {
    "text": "no it's because I've done this too much",
    "start": "145020",
    "end": "146700"
  },
  {
    "text": "it's because I've written too much",
    "start": "146700",
    "end": "149040"
  },
  {
    "text": "yeah",
    "start": "149040",
    "end": "150840"
  },
  {
    "text": "unsafe assumptions crash our programs at",
    "start": "150840",
    "end": "153060"
  },
  {
    "text": "runtime and wake us up at 4am",
    "start": "153060",
    "end": "155520"
  },
  {
    "text": "correct handling these cases properly in",
    "start": "155520",
    "end": "157860"
  },
  {
    "text": "vanilla typescript is less than ideal",
    "start": "157860",
    "end": "161660"
  },
  {
    "text": "it",
    "start": "163739",
    "end": "165180"
  },
  {
    "text": "did I",
    "start": "165180",
    "end": "167900"
  },
  {
    "text": "we have not gotten to a point in web dev",
    "start": "168300",
    "end": "170280"
  },
  {
    "text": "where we say the phrase vanilla",
    "start": "170280",
    "end": "171660"
  },
  {
    "text": "typescript right",
    "start": "171660",
    "end": "173819"
  },
  {
    "text": "is that a thing now",
    "start": "173819",
    "end": "176780"
  },
  {
    "text": "a language that's transpiled to a",
    "start": "178260",
    "end": "180360"
  },
  {
    "text": "language that is interpreted",
    "start": "180360",
    "end": "183739"
  },
  {
    "text": "Ethan I love you this is a great you",
    "start": "186840",
    "end": "188940"
  },
  {
    "text": "already have captured my heart with",
    "start": "188940",
    "end": "190680"
  },
  {
    "text": "everything you're saying Ethan I am on",
    "start": "190680",
    "end": "192239"
  },
  {
    "text": "your team but please never say the word",
    "start": "192239",
    "end": "194340"
  },
  {
    "text": "vanilla typescript again it I will",
    "start": "194340",
    "end": "196500"
  },
  {
    "text": "emotionally be I I'm gonna die I'm gonna",
    "start": "196500",
    "end": "198720"
  },
  {
    "text": "die I'm dying on the inside what if you",
    "start": "198720",
    "end": "201060"
  },
  {
    "text": "forget to try catch what if you forget",
    "start": "201060",
    "end": "202739"
  },
  {
    "text": "one of the possible errors yeah this is",
    "start": "202739",
    "end": "205800"
  },
  {
    "text": "exactly as unsafe as the original",
    "start": "205800",
    "end": "207420"
  },
  {
    "text": "function but the three places it can",
    "start": "207420",
    "end": "209459"
  },
  {
    "text": "crash are now explicitly stated yep if",
    "start": "209459",
    "end": "211739"
  },
  {
    "text": "you want it to never crash you find",
    "start": "211739",
    "end": "213480"
  },
  {
    "text": "alternatives for those or dies here's",
    "start": "213480",
    "end": "216060"
  },
  {
    "text": "what a verbose version of that might",
    "start": "216060",
    "end": "217680"
  },
  {
    "text": "look like okay this is good I know this",
    "start": "217680",
    "end": "219599"
  },
  {
    "text": "may seem like a lot but this is mostly",
    "start": "219599",
    "end": "221519"
  },
  {
    "text": "caused by having to work around existing",
    "start": "221519",
    "end": "223319"
  },
  {
    "text": "apis that are designed around try catch",
    "start": "223319",
    "end": "225480"
  },
  {
    "text": "it takes a bit of work at the weeds but",
    "start": "225480",
    "end": "227760"
  },
  {
    "text": "once you're into the effect World Things",
    "start": "227760",
    "end": "229379"
  },
  {
    "text": "become much easier so I so right away",
    "start": "229379",
    "end": "232920"
  },
  {
    "text": "there's something that really worries me",
    "start": "232920",
    "end": "234360"
  },
  {
    "text": "right off the rip uh when I'm just",
    "start": "234360",
    "end": "236459"
  },
  {
    "text": "looking at this code right I like this",
    "start": "236459",
    "end": "239220"
  },
  {
    "text": "is just a result type but what I'm",
    "start": "239220",
    "end": "240540"
  },
  {
    "text": "seeing right now is I'm just seeing",
    "start": "240540",
    "end": "241680"
  },
  {
    "text": "effectively an attempt to mix two",
    "start": "241680",
    "end": "243780"
  },
  {
    "text": "concepts together some sort of asyncing",
    "start": "243780",
    "end": "247860"
  },
  {
    "text": "like understanding of promises and then",
    "start": "247860",
    "end": "250620"
  },
  {
    "text": "on top of it it looks like it's it's",
    "start": "250620",
    "end": "252360"
  },
  {
    "text": "really also doing uh uh what's it called",
    "start": "252360",
    "end": "255540"
  },
  {
    "text": "a result type and so if you're not",
    "start": "255540",
    "end": "257459"
  },
  {
    "text": "familiar with result types we'll get",
    "start": "257459",
    "end": "258959"
  },
  {
    "text": "your monads in order because I'm about",
    "start": "258959",
    "end": "260880"
  },
  {
    "text": "to put my foot in your functor okay so",
    "start": "260880",
    "end": "263699"
  },
  {
    "text": "think about that should I put is it my",
    "start": "263699",
    "end": "266340"
  },
  {
    "text": "foot in your functor my functor in your",
    "start": "266340",
    "end": "267900"
  },
  {
    "text": "ass I feel like the second one just",
    "start": "267900",
    "end": "269580"
  },
  {
    "text": "doesn't sound the way I want it to sound",
    "start": "269580",
    "end": "271440"
  },
  {
    "text": "you know what I mean it doesn't sound",
    "start": "271440",
    "end": "272580"
  },
  {
    "text": "quite the way I want it doesn't doesn't",
    "start": "272580",
    "end": "274259"
  },
  {
    "text": "quite sound the way I want it to",
    "start": "274259",
    "end": "278340"
  },
  {
    "text": "an idiomatic effect solution looks like",
    "start": "278340",
    "end": "280500"
  },
  {
    "text": "this don't worry too much about the",
    "start": "280500",
    "end": "282419"
  },
  {
    "text": "specifics here we'll talk about the",
    "start": "282419",
    "end": "284040"
  },
  {
    "text": "basic effect types and functions soon I",
    "start": "284040",
    "end": "286320"
  },
  {
    "text": "am very worried about memory so I you",
    "start": "286320",
    "end": "288600"
  },
  {
    "text": "know I come from a different world right",
    "start": "288600",
    "end": "289860"
  },
  {
    "text": "I write on televisions I",
    "start": "289860",
    "end": "292080"
  },
  {
    "text": "memory when I write code I think about",
    "start": "292080",
    "end": "294300"
  },
  {
    "text": "memory is kind of like a thing I should",
    "start": "294300",
    "end": "297000"
  },
  {
    "text": "be worried about right and so when I see",
    "start": "297000",
    "end": "299639"
  },
  {
    "text": "this it worries me you know what I mean",
    "start": "299639",
    "end": "302699"
  },
  {
    "text": "the love-hate relationship with",
    "start": "302699",
    "end": "304080"
  },
  {
    "text": "JavaScript is something most developers",
    "start": "304080",
    "end": "305699"
  },
  {
    "text": "share yeah you can't seem to escape it",
    "start": "305699",
    "end": "307560"
  },
  {
    "text": "the language has grown a lot with new",
    "start": "307560",
    "end": "309900"
  },
  {
    "text": "modern features and typescript making",
    "start": "309900",
    "end": "311280"
  },
  {
    "text": "development surprisingly pleasant but",
    "start": "311280",
    "end": "313500"
  },
  {
    "text": "the pain points are still there",
    "start": "313500",
    "end": "315960"
  },
  {
    "text": "effect brings typescript up another",
    "start": "315960",
    "end": "318120"
  },
  {
    "text": "level providing powerful Primitives to",
    "start": "318120",
    "end": "320460"
  },
  {
    "text": "make writing safe asynchronous",
    "start": "320460",
    "end": "322320"
  },
  {
    "text": "resourceful composable concurrent and",
    "start": "322320",
    "end": "325020"
  },
  {
    "text": "observable programs easier than ever",
    "start": "325020",
    "end": "327120"
  },
  {
    "text": "before",
    "start": "327120",
    "end": "327960"
  },
  {
    "text": "I'm curious about the observable I'm",
    "start": "327960",
    "end": "329400"
  },
  {
    "text": "curious if he's going to address that",
    "start": "329400",
    "end": "330720"
  },
  {
    "text": "because",
    "start": "330720",
    "end": "332520"
  },
  {
    "text": "that's a you know",
    "start": "332520",
    "end": "334800"
  },
  {
    "text": "it's one of the hard Parts about",
    "start": "334800",
    "end": "336060"
  },
  {
    "text": "promises and things like that is that",
    "start": "336060",
    "end": "337919"
  },
  {
    "text": "it's it's sometimes it's hard to observe",
    "start": "337919",
    "end": "339600"
  },
  {
    "text": "your program in a good",
    "start": "339600",
    "end": "341940"
  },
  {
    "text": "in a good manner isn't typescript",
    "start": "341940",
    "end": "343680"
  },
  {
    "text": "already safe no it's never been safe",
    "start": "343680",
    "end": "345120"
  },
  {
    "text": "it's not going to start with type safety",
    "start": "345120",
    "end": "347880"
  },
  {
    "text": "what's the problem with these two types",
    "start": "347880",
    "end": "350460"
  },
  {
    "text": "they're only generic over one parameter",
    "start": "350460",
    "end": "353039"
  },
  {
    "text": "correct typescript gives us the illusion",
    "start": "353039",
    "end": "355199"
  },
  {
    "text": "of safety but once things go off the",
    "start": "355199",
    "end": "357120"
  },
  {
    "text": "happy path you're left completely in the",
    "start": "357120",
    "end": "359100"
  },
  {
    "text": "dark also uh just so you know",
    "start": "359100",
    "end": "361259"
  },
  {
    "text": "optimizations in JavaScript are often",
    "start": "361259",
    "end": "364020"
  },
  {
    "text": "tied to like monomorphic functions and",
    "start": "364020",
    "end": "365759"
  },
  {
    "text": "stuff like that so when I see things",
    "start": "365759",
    "end": "367020"
  },
  {
    "text": "where you have generics as parameters",
    "start": "367020",
    "end": "368820"
  },
  {
    "text": "you're also setting yourself up to get",
    "start": "368820",
    "end": "370500"
  },
  {
    "text": "like destroyed in performance you know",
    "start": "370500",
    "end": "372060"
  },
  {
    "text": "just a thing just a thing I'd like to",
    "start": "372060",
    "end": "374100"
  },
  {
    "text": "throw out there",
    "start": "374100",
    "end": "375419"
  },
  {
    "text": "I am here to tell you that it doesn't",
    "start": "375419",
    "end": "377220"
  },
  {
    "text": "have to be that way okay the effect type",
    "start": "377220",
    "end": "379740"
  },
  {
    "text": "is the core of the entire effect",
    "start": "379740",
    "end": "381479"
  },
  {
    "text": "ecosystem",
    "start": "381479",
    "end": "382919"
  },
  {
    "text": "although their actual implementation is",
    "start": "382919",
    "end": "384960"
  },
  {
    "text": "a bit more complex it can be helpful to",
    "start": "384960",
    "end": "387000"
  },
  {
    "text": "think of an effect as a function that",
    "start": "387000",
    "end": "388979"
  },
  {
    "text": "takes in its requirements as arguments",
    "start": "388979",
    "end": "390539"
  },
  {
    "text": "and returns either a value or an error",
    "start": "390539",
    "end": "394259"
  },
  {
    "text": "uh I really don't like this interface",
    "start": "394259",
    "end": "396720"
  },
  {
    "text": "right off the rip where air is first and",
    "start": "396720",
    "end": "398340"
  },
  {
    "text": "then value",
    "start": "398340",
    "end": "399240"
  },
  {
    "text": "I'm more of a value error kind of guy",
    "start": "399240",
    "end": "401160"
  },
  {
    "text": "not an error value that's kind of like",
    "start": "401160",
    "end": "402900"
  },
  {
    "text": "the old node way which is error value I",
    "start": "402900",
    "end": "405539"
  },
  {
    "text": "never been that kind of person more into",
    "start": "405539",
    "end": "407400"
  },
  {
    "text": "the whole you know",
    "start": "407400",
    "end": "409020"
  },
  {
    "text": "you know what I mean kind of more into",
    "start": "409020",
    "end": "410400"
  },
  {
    "text": "that side you know what I mean takes in",
    "start": "410400",
    "end": "411900"
  },
  {
    "text": "its requirements as arguments and",
    "start": "411900",
    "end": "413460"
  },
  {
    "text": "returns either a value or an error",
    "start": "413460",
    "end": "416520"
  },
  {
    "text": "now back to JavaScript for just a quick",
    "start": "416520",
    "end": "418740"
  },
  {
    "text": "moment",
    "start": "418740",
    "end": "419759"
  },
  {
    "text": "asynchronous code is everywhere in",
    "start": "419759",
    "end": "421800"
  },
  {
    "text": "modern apps that's the promise primitive",
    "start": "421800",
    "end": "423720"
  },
  {
    "text": "leaves a lot to be desired absolutely",
    "start": "423720",
    "end": "425639"
  },
  {
    "text": "promises are eagerly executed meaning",
    "start": "425639",
    "end": "427860"
  },
  {
    "text": "they begin execution immediately on",
    "start": "427860",
    "end": "429840"
  },
  {
    "text": "creation this means that they can never",
    "start": "429840",
    "end": "431520"
  },
  {
    "text": "be used to represent a computation this",
    "start": "431520",
    "end": "433919"
  },
  {
    "text": "is correct I've never really liked that",
    "start": "433919",
    "end": "435300"
  },
  {
    "text": "but there is async iterators which are",
    "start": "435300",
    "end": "437280"
  },
  {
    "text": "kind of like a neat result of a promise",
    "start": "437280",
    "end": "439259"
  },
  {
    "text": "but I do agree the idea of a promise",
    "start": "439259",
    "end": "441780"
  },
  {
    "text": "being",
    "start": "441780",
    "end": "443400"
  },
  {
    "text": "uh hot is kind of annoying I kind of",
    "start": "443400",
    "end": "446460"
  },
  {
    "text": "wish I had like a way to",
    "start": "446460",
    "end": "448560"
  },
  {
    "text": "um",
    "start": "448560",
    "end": "450479"
  },
  {
    "text": "I kind of wish I I that's why often",
    "start": "450479",
    "end": "452699"
  },
  {
    "text": "you'll see things like promise factories",
    "start": "452699",
    "end": "454139"
  },
  {
    "text": "where if you try to build any sort of",
    "start": "454139",
    "end": "455699"
  },
  {
    "text": "async request queue you kind of have to",
    "start": "455699",
    "end": "457500"
  },
  {
    "text": "like make them into Factory so you have",
    "start": "457500",
    "end": "459000"
  },
  {
    "text": "to have a function that returns a",
    "start": "459000",
    "end": "460259"
  },
  {
    "text": "promise as opposed to just receiving",
    "start": "460259",
    "end": "461759"
  },
  {
    "text": "promises or else they just all execute",
    "start": "461759",
    "end": "463800"
  },
  {
    "text": "right away yeah they're kind of annoying",
    "start": "463800",
    "end": "465419"
  },
  {
    "text": "already running computation that might",
    "start": "465419",
    "end": "467099"
  },
  {
    "text": "have already completed and produced a",
    "start": "467099",
    "end": "468720"
  },
  {
    "text": "value",
    "start": "468720",
    "end": "469680"
  },
  {
    "text": "also the value produced by A promise is",
    "start": "469680",
    "end": "472319"
  },
  {
    "text": "implicitly memoized meaning that when",
    "start": "472319",
    "end": "474180"
  },
  {
    "text": "the promise is settled the internal",
    "start": "474180",
    "end": "475680"
  },
  {
    "text": "state of the promise is frozen and can't",
    "start": "475680",
    "end": "477539"
  },
  {
    "text": "be changed anymore whether the promise",
    "start": "477539",
    "end": "479280"
  },
  {
    "text": "is fulfilled or rejected correct",
    "start": "479280",
    "end": "481319"
  },
  {
    "text": "consequently if you",
    "start": "481319",
    "end": "483960"
  },
  {
    "text": "correct",
    "start": "483960",
    "end": "485699"
  },
  {
    "text": "which means you may hold on to memory",
    "start": "485699",
    "end": "487080"
  },
  {
    "text": "longer want to run the same computation",
    "start": "487080",
    "end": "488940"
  },
  {
    "text": "again you'll need to recreate the entire",
    "start": "488940",
    "end": "491220"
  },
  {
    "text": "promise from scratch",
    "start": "491220",
    "end": "492720"
  },
  {
    "text": "effects aren't like this the effect data",
    "start": "492720",
    "end": "495599"
  },
  {
    "text": "type represents an immutable value that",
    "start": "495599",
    "end": "498060"
  },
  {
    "text": "lazily describes a workflow or a job and",
    "start": "498060",
    "end": "501060"
  },
  {
    "text": "all effect functions produce new effect",
    "start": "501060",
    "end": "502919"
  },
  {
    "text": "values",
    "start": "502919",
    "end": "504300"
  },
  {
    "text": "again worried about the memory of this",
    "start": "504300",
    "end": "506759"
  },
  {
    "text": "um",
    "start": "506759",
    "end": "508819"
  },
  {
    "text": "the thing that makes promises good is",
    "start": "509099",
    "end": "510960"
  },
  {
    "text": "that they are also supported at a syntax",
    "start": "510960",
    "end": "513000"
  },
  {
    "text": "level with async await and that's why I",
    "start": "513000",
    "end": "515520"
  },
  {
    "text": "like them right if I just had the raw",
    "start": "515520",
    "end": "518219"
  },
  {
    "text": "dog promises I wouldn't like it at all",
    "start": "518219",
    "end": "520620"
  },
  {
    "text": "and so one of the I always see this this",
    "start": "520620",
    "end": "522659"
  },
  {
    "text": "is the same thing I always see people",
    "start": "522659",
    "end": "524640"
  },
  {
    "text": "you know like you know Ethan I think I",
    "start": "524640",
    "end": "527040"
  },
  {
    "text": "love where you're trying to go with this",
    "start": "527040",
    "end": "528480"
  },
  {
    "text": "kind of stuff I've seen this also with",
    "start": "528480",
    "end": "529980"
  },
  {
    "text": "like options or result types people try",
    "start": "529980",
    "end": "531899"
  },
  {
    "text": "to do in uh Java or in typescript it's",
    "start": "531899",
    "end": "534600"
  },
  {
    "text": "always the same thing which is",
    "start": "534600",
    "end": "537180"
  },
  {
    "text": "these ideas are great but if there's no",
    "start": "537180",
    "end": "539760"
  },
  {
    "text": "syntax support for these ideas and you",
    "start": "539760",
    "end": "542519"
  },
  {
    "text": "have no pattern matching on top of it",
    "start": "542519",
    "end": "544680"
  },
  {
    "text": "which is all you know syntax support",
    "start": "544680",
    "end": "546779"
  },
  {
    "text": "um these things can be huge pain in the",
    "start": "546779",
    "end": "549360"
  },
  {
    "text": "asses you know what I mean like these",
    "start": "549360",
    "end": "550920"
  },
  {
    "text": "are not great experiences",
    "start": "550920",
    "end": "554839"
  },
  {
    "text": "you know and so until JavaScript gets",
    "start": "555660",
    "end": "558060"
  },
  {
    "text": "generics built into it and all of that",
    "start": "558060",
    "end": "560100"
  },
  {
    "text": "like how can this work okay let them",
    "start": "560100",
    "end": "562200"
  },
  {
    "text": "cook you're telling me let let bro cook",
    "start": "562200",
    "end": "564540"
  },
  {
    "text": "the building's not gonna burn down okay",
    "start": "564540",
    "end": "565920"
  },
  {
    "text": "okay let me hear it back to values don't",
    "start": "565920",
    "end": "567959"
  },
  {
    "text": "actually do anything they are just",
    "start": "567959",
    "end": "569880"
  },
  {
    "text": "values that model or describe effectual",
    "start": "569880",
    "end": "572700"
  },
  {
    "text": "interactions and effect can be",
    "start": "572700",
    "end": "574680"
  },
  {
    "text": "interpreted by the effect runtime system",
    "start": "574680",
    "end": "576720"
  },
  {
    "text": "into effectual interactions with the",
    "start": "576720",
    "end": "579360"
  },
  {
    "text": "external world",
    "start": "579360",
    "end": "580740"
  },
  {
    "text": "if you're like me your mind is probably",
    "start": "580740",
    "end": "582899"
  },
  {
    "text": "racing with possibilities at this point",
    "start": "582899",
    "end": "584760"
  },
  {
    "text": "I am now going to give you an",
    "start": "584760",
    "end": "586500"
  },
  {
    "text": "intentionally very quick tour of some of",
    "start": "586500",
    "end": "588540"
  },
  {
    "text": "the things that the effect ecosystem",
    "start": "588540",
    "end": "589860"
  },
  {
    "text": "offers my mind personally is racing with",
    "start": "589860",
    "end": "592560"
  },
  {
    "text": "memory",
    "start": "592560",
    "end": "593700"
  },
  {
    "text": "and desire that there was better syntax",
    "start": "593700",
    "end": "595920"
  },
  {
    "text": "why I still love I I I'll let them cook",
    "start": "595920",
    "end": "599160"
  },
  {
    "text": "we're letting them although you're more",
    "start": "599160",
    "end": "600300"
  },
  {
    "text": "than welcome to pause on each slide to",
    "start": "600300",
    "end": "601980"
  },
  {
    "text": "try and understand what's going on don't",
    "start": "601980",
    "end": "603779"
  },
  {
    "text": "get too caught up in the specifics I'll",
    "start": "603779",
    "end": "605760"
  },
  {
    "text": "go into more depth in future videos just",
    "start": "605760",
    "end": "608100"
  },
  {
    "text": "try to get an idea of what's possible",
    "start": "608100",
    "end": "610740"
  },
  {
    "text": "now that errors are in their own",
    "start": "610740",
    "end": "612600"
  },
  {
    "text": "dedicated Channel and clearly separated",
    "start": "612600",
    "end": "614519"
  },
  {
    "text": "by type it becomes trivial to handle",
    "start": "614519",
    "end": "616620"
  },
  {
    "text": "errors Case by case all at once or to",
    "start": "616620",
    "end": "619080"
  },
  {
    "text": "let them bubble up to the",
    "start": "619080",
    "end": "621720"
  },
  {
    "text": "I I I'm curious if these catch",
    "start": "621720",
    "end": "626899"
  },
  {
    "text": "I'm curious if the catch tag",
    "start": "627360",
    "end": "630779"
  },
  {
    "text": "that must use some sort of like name of",
    "start": "630779",
    "end": "633180"
  },
  {
    "text": "the function right so that way name of",
    "start": "633180",
    "end": "634860"
  },
  {
    "text": "the Constructor so it's able to get the",
    "start": "634860",
    "end": "637620"
  },
  {
    "text": "thing that's coming out of it correctly",
    "start": "637620",
    "end": "639360"
  },
  {
    "text": "it does look like rxjs which is also a",
    "start": "639360",
    "end": "641339"
  },
  {
    "text": "leaky abstraction this is also I mean",
    "start": "641339",
    "end": "642899"
  },
  {
    "text": "effect is a leaky abstraction uh",
    "start": "642899",
    "end": "645899"
  },
  {
    "text": "but I'm curious if it uses some sort of",
    "start": "645899",
    "end": "648240"
  },
  {
    "text": "type completing some sort of crazy",
    "start": "648240",
    "end": "649620"
  },
  {
    "text": "inference some sort of whatever that's",
    "start": "649620",
    "end": "651300"
  },
  {
    "text": "able to infer out these strings or do",
    "start": "651300",
    "end": "653040"
  },
  {
    "text": "you have to manually type them in hoping",
    "start": "653040",
    "end": "654899"
  },
  {
    "text": "you've correctly type them in for me",
    "start": "654899",
    "end": "656519"
  },
  {
    "text": "that's always a big worry whenever I see",
    "start": "656519",
    "end": "657959"
  },
  {
    "text": "strings uh if that's the case I'd much",
    "start": "657959",
    "end": "660660"
  },
  {
    "text": "rather see you passing a Constructor",
    "start": "660660",
    "end": "661980"
  },
  {
    "text": "because if you already have the type",
    "start": "661980",
    "end": "663180"
  },
  {
    "text": "it'd be nice just to pass in the",
    "start": "663180",
    "end": "664740"
  },
  {
    "text": "Constructor you know what I mean next",
    "start": "664740",
    "end": "665760"
  },
  {
    "text": "effect",
    "start": "665760",
    "end": "666720"
  },
  {
    "text": "what's wrong with this snippet well",
    "start": "666720",
    "end": "669000"
  },
  {
    "text": "nothing until you want to swap your live",
    "start": "669000",
    "end": "671040"
  },
  {
    "text": "database client for a local test one",
    "start": "671040",
    "end": "673320"
  },
  {
    "text": "sure we could go full functional",
    "start": "673320",
    "end": "675180"
  },
  {
    "text": "programming and pass every possible",
    "start": "675180",
    "end": "676800"
  },
  {
    "text": "dependency as an argument but that",
    "start": "676800",
    "end": "678720"
  },
  {
    "text": "quickly becomes unrealistic effect",
    "start": "678720",
    "end": "680700"
  },
  {
    "text": "provides a better way",
    "start": "680700",
    "end": "682620"
  },
  {
    "text": "in effect a tag on",
    "start": "682620",
    "end": "686279"
  },
  {
    "text": "oh I'm just looking I'm sorry I'm just",
    "start": "686279",
    "end": "687660"
  },
  {
    "text": "I'm just trying I'm just trying to",
    "start": "687660",
    "end": "688800"
  },
  {
    "text": "understand this one thing by the way",
    "start": "688800",
    "end": "690480"
  },
  {
    "text": "please stop doing this",
    "start": "690480",
    "end": "692399"
  },
  {
    "text": "there are libraries of the protobuf",
    "start": "692399",
    "end": "694320"
  },
  {
    "text": "generation Library does this where they",
    "start": "694320",
    "end": "695700"
  },
  {
    "text": "name the type and the constant the same",
    "start": "695700",
    "end": "697320"
  },
  {
    "text": "value it totally F's with trying to uh",
    "start": "697320",
    "end": "700380"
  },
  {
    "text": "you can't reuse the type easily",
    "start": "700380",
    "end": "702899"
  },
  {
    "text": "sometimes and it can be just just very",
    "start": "702899",
    "end": "704820"
  },
  {
    "text": "frustrating sometimes anyways uh sorry",
    "start": "704820",
    "end": "707040"
  },
  {
    "text": "I'll keep going I'll keep going context",
    "start": "707040",
    "end": "709740"
  },
  {
    "text": "tag okay function get users from this DB",
    "start": "709740",
    "end": "712019"
  },
  {
    "text": "client runnable okay what's happening",
    "start": "712019",
    "end": "714420"
  },
  {
    "text": "he's a placeholder for a dependency of",
    "start": "714420",
    "end": "716519"
  },
  {
    "text": "some type we can use the tag just as if",
    "start": "716519",
    "end": "719100"
  },
  {
    "text": "it was the actual implemented object in",
    "start": "719100",
    "end": "721140"
  },
  {
    "text": "rfx without ever actually implementing",
    "start": "721140",
    "end": "723360"
  },
  {
    "text": "it doing so Causes That Type to appear",
    "start": "723360",
    "end": "725880"
  },
  {
    "text": "in the requirements field of the",
    "start": "725880",
    "end": "727380"
  },
  {
    "text": "resulting effect this tells the effect",
    "start": "727380",
    "end": "729420"
  },
  {
    "text": "runtime that you must provide an",
    "start": "729420",
    "end": "731339"
  },
  {
    "text": "implementation that matches the defined",
    "start": "731339",
    "end": "733140"
  },
  {
    "text": "type before the program can be run this",
    "start": "733140",
    "end": "735600"
  },
  {
    "text": "can be done flexible anywhere in your",
    "start": "735600",
    "end": "737579"
  },
  {
    "text": "program meaning it becomes simple to",
    "start": "737579",
    "end": "739440"
  },
  {
    "text": "swap out the implementation of",
    "start": "739440",
    "end": "740820"
  },
  {
    "text": "dependency when required modern app",
    "start": "740820",
    "end": "743700"
  },
  {
    "text": "that's cool because that'll I mean at",
    "start": "743700",
    "end": "745320"
  },
  {
    "text": "least it airs out it's kind of like some",
    "start": "745320",
    "end": "746820"
  },
  {
    "text": "sort of trait implementation",
    "start": "746820",
    "end": "748680"
  },
  {
    "text": "you're just you're I mean it looks like",
    "start": "748680",
    "end": "750779"
  },
  {
    "text": "a very convo I mean",
    "start": "750779",
    "end": "753120"
  },
  {
    "text": "in some sense it's a very convoluted way",
    "start": "753120",
    "end": "755100"
  },
  {
    "text": "to make a interface requirement",
    "start": "755100",
    "end": "759079"
  },
  {
    "text": "but I could I I mean I can dig I can dig",
    "start": "759120",
    "end": "761279"
  },
  {
    "text": "it I can dig it",
    "start": "761279",
    "end": "762899"
  },
  {
    "text": "anywhere in your program meaning it",
    "start": "762899",
    "end": "764820"
  },
  {
    "text": "becomes simple to swap out the",
    "start": "764820",
    "end": "766200"
  },
  {
    "text": "implementation of a dependency when",
    "start": "766200",
    "end": "767880"
  },
  {
    "text": "required",
    "start": "767880",
    "end": "768959"
  },
  {
    "text": "modern apps are complex often involving",
    "start": "768959",
    "end": "771480"
  },
  {
    "text": "complex dependency hierarchies to",
    "start": "771480",
    "end": "773700"
  },
  {
    "text": "account for this effect provides a layer",
    "start": "773700",
    "end": "775680"
  },
  {
    "text": "a type describing the blueprint for the",
    "start": "775680",
    "end": "777779"
  },
  {
    "text": "construction of a set of requirements it",
    "start": "777779",
    "end": "779940"
  },
  {
    "text": "takes some requirements in May produce",
    "start": "779940",
    "end": "781980"
  },
  {
    "text": "some error and yield some requirements",
    "start": "781980",
    "end": "783899"
  },
  {
    "text": "out",
    "start": "783899",
    "end": "784800"
  },
  {
    "text": "resources in our application may require",
    "start": "784800",
    "end": "786899"
  },
  {
    "text": "lifetime related Logic the scope data",
    "start": "786899",
    "end": "789540"
  },
  {
    "text": "type is fundamental for managing",
    "start": "789540",
    "end": "791100"
  },
  {
    "text": "resources safely and in a composable",
    "start": "791100",
    "end": "792839"
  },
  {
    "text": "manner in effect in simple terms a scope",
    "start": "792839",
    "end": "795660"
  },
  {
    "text": "represents the lifetime of one or more",
    "start": "795660",
    "end": "797459"
  },
  {
    "text": "resources when a scope is closed the",
    "start": "797459",
    "end": "799740"
  },
  {
    "text": "resources associated with it are",
    "start": "799740",
    "end": "801360"
  },
  {
    "text": "guaranteed to be released modern",
    "start": "801360",
    "end": "803519"
  },
  {
    "text": "applications require observability for",
    "start": "803519",
    "end": "805560"
  },
  {
    "text": "us",
    "start": "805560",
    "end": "807740"
  },
  {
    "text": "I guess I didn't see how they're",
    "start": "807779",
    "end": "809160"
  },
  {
    "text": "guaranteed to be released there must be",
    "start": "809160",
    "end": "810540"
  },
  {
    "text": "some sort of okay okay so",
    "start": "810540",
    "end": "813540"
  },
  {
    "text": "okay okay hold on so that means the",
    "start": "813540",
    "end": "815399"
  },
  {
    "text": "effect itself is going to have its own",
    "start": "815399",
    "end": "820579"
  },
  {
    "text": "it has its own life cycles that it calls",
    "start": "820740",
    "end": "823079"
  },
  {
    "text": "and so a choir does this release so it",
    "start": "823079",
    "end": "825540"
  },
  {
    "text": "actually will call and check for these",
    "start": "825540",
    "end": "826920"
  },
  {
    "text": "things",
    "start": "826920",
    "end": "828000"
  },
  {
    "text": "okay so you have you have multiple life",
    "start": "828000",
    "end": "830399"
  },
  {
    "text": "cycles then this is associated with it",
    "start": "830399",
    "end": "832079"
  },
  {
    "text": "are guaranteed to be released",
    "start": "832079",
    "end": "834060"
  },
  {
    "text": "modern applications require",
    "start": "834060",
    "end": "835560"
  },
  {
    "text": "observability for us to know what's",
    "start": "835560",
    "end": "837300"
  },
  {
    "text": "going on inside them yep effect provides",
    "start": "837300",
    "end": "839760"
  },
  {
    "text": "powerful logging capabilities with",
    "start": "839760",
    "end": "841500"
  },
  {
    "text": "different levels such as debug info",
    "start": "841500",
    "end": "843300"
  },
  {
    "text": "warning and error as well as the ability",
    "start": "843300",
    "end": "845399"
  },
  {
    "text": "to provide a custom logger that can do",
    "start": "845399",
    "end": "847200"
  },
  {
    "text": "more than just a simple console.log",
    "start": "847200",
    "end": "849660"
  },
  {
    "text": "effect provides a powerful and",
    "start": "849660",
    "end": "851459"
  },
  {
    "text": "composable scheduling toolkit for when",
    "start": "851459",
    "end": "853200"
  },
  {
    "text": "you want to run an effect more than just",
    "start": "853200",
    "end": "854820"
  },
  {
    "text": "once have you ever tried implementing",
    "start": "854820",
    "end": "856980"
  },
  {
    "text": "jittered exponential back off if you",
    "start": "856980",
    "end": "859320"
  },
  {
    "text": "were to try to implement the snippet",
    "start": "859320",
    "end": "860700"
  },
  {
    "text": "without effect how would you do it would",
    "start": "860700",
    "end": "862920"
  },
  {
    "text": "it be as flexible or as maintainable",
    "start": "862920",
    "end": "865440"
  },
  {
    "text": "this code function that takes in a",
    "start": "865440",
    "end": "867540"
  },
  {
    "text": "function but",
    "start": "867540",
    "end": "870000"
  },
  {
    "text": "I mean I see what you mean it's it's a",
    "start": "870000",
    "end": "871620"
  },
  {
    "text": "non-trivial problem if you haven't done",
    "start": "871620",
    "end": "872760"
  },
  {
    "text": "your own throttle your own debounce your",
    "start": "872760",
    "end": "874440"
  },
  {
    "text": "own back off you know those things can",
    "start": "874440",
    "end": "875940"
  },
  {
    "text": "be kind of difficult I always have a lot",
    "start": "875940",
    "end": "877740"
  },
  {
    "text": "of questions whenever I hear these",
    "start": "877740",
    "end": "878820"
  },
  {
    "text": "things like should you ever do those",
    "start": "878820",
    "end": "880199"
  },
  {
    "text": "things because whenever you do these",
    "start": "880199",
    "end": "881279"
  },
  {
    "text": "back offs whenever you do that you can",
    "start": "881279",
    "end": "883079"
  },
  {
    "text": "also accidentally create yourself a",
    "start": "883079",
    "end": "884399"
  },
  {
    "text": "Thundering Herd in your own cloud and",
    "start": "884399",
    "end": "886500"
  },
  {
    "text": "just destroy your own service people",
    "start": "886500",
    "end": "889139"
  },
  {
    "text": "like we did that at Netflix we had this",
    "start": "889139",
    "end": "890940"
  },
  {
    "text": "nice exponential back off then we had",
    "start": "890940",
    "end": "893399"
  },
  {
    "text": "all these different kind of ones",
    "start": "893399",
    "end": "895279"
  },
  {
    "text": "and then all of a sudden the next thing",
    "start": "895279",
    "end": "897300"
  },
  {
    "text": "you do your clients are all just like ah",
    "start": "897300",
    "end": "899820"
  },
  {
    "text": "the request failed we'd better make",
    "start": "899820",
    "end": "901560"
  },
  {
    "text": "another request shortly oh the request",
    "start": "901560",
    "end": "903839"
  },
  {
    "text": "failed again we we should make it but a",
    "start": "903839",
    "end": "905940"
  },
  {
    "text": "little bit longer this time right so",
    "start": "905940",
    "end": "907800"
  },
  {
    "text": "your service is just like",
    "start": "907800",
    "end": "909600"
  },
  {
    "text": "ouch ouch ouch",
    "start": "909600",
    "end": "910800"
  },
  {
    "text": "[Laughter]",
    "start": "910800",
    "end": "912720"
  },
  {
    "text": "we've definitely done that",
    "start": "912720",
    "end": "914880"
  },
  {
    "text": "it works while your meager startup only",
    "start": "914880",
    "end": "916740"
  },
  {
    "text": "has five users but what about when it",
    "start": "916740",
    "end": "918839"
  },
  {
    "text": "grows to hundreds or thousands that many",
    "start": "918839",
    "end": "921180"
  },
  {
    "text": "requests at once will crash your users",
    "start": "921180",
    "end": "922920"
  },
  {
    "text": "devices and remember promises are",
    "start": "922920",
    "end": "925199"
  },
  {
    "text": "eagerly executed so we'll need to design",
    "start": "925199",
    "end": "927240"
  },
  {
    "text": "a complicated async queue with batching",
    "start": "927240",
    "end": "929639"
  },
  {
    "text": "an interruption to enforce a level of",
    "start": "929639",
    "end": "931440"
  },
  {
    "text": "parallelism or we could use effect",
    "start": "931440",
    "end": "935100"
  },
  {
    "text": "concurrency it really is this easy",
    "start": "935100",
    "end": "937760"
  },
  {
    "text": "affects fiber-based runtime manages",
    "start": "937760",
    "end": "940260"
  },
  {
    "text": "everything for you",
    "start": "940260",
    "end": "942000"
  },
  {
    "text": "lightweight threads of execution called",
    "start": "942000",
    "end": "943740"
  },
  {
    "text": "fibers power effects runtime think of a",
    "start": "943740",
    "end": "946500"
  },
  {
    "text": "fiber as a worker that performs a",
    "start": "946500",
    "end": "948360"
  },
  {
    "text": "specific job it can be started paused",
    "start": "948360",
    "end": "950760"
  },
  {
    "text": "resumed and even interrupted effect also",
    "start": "950760",
    "end": "953820"
  },
  {
    "text": "seamlessly integrates with existing",
    "start": "953820",
    "end": "955320"
  },
  {
    "text": "Interruption apis such as support",
    "start": "955320",
    "end": "957000"
  },
  {
    "text": "controller working with fibers directly",
    "start": "957000",
    "end": "959459"
  },
  {
    "text": "is a pretty Advanced use case you",
    "start": "959459",
    "end": "961139"
  },
  {
    "text": "probably won't need for a while when",
    "start": "961139",
    "end": "962399"
  },
  {
    "text": "starting out",
    "start": "962399",
    "end": "963660"
  },
  {
    "text": "so when I hear that the thing I don't",
    "start": "963660",
    "end": "965639"
  },
  {
    "text": "like about that is that the process of",
    "start": "965639",
    "end": "967320"
  },
  {
    "text": "end Loop is already a pretty dang good",
    "start": "967320",
    "end": "968880"
  },
  {
    "text": "one and you can't actually stop a con",
    "start": "968880",
    "end": "970740"
  },
  {
    "text": "like a currently running JavaScript item",
    "start": "970740",
    "end": "973199"
  },
  {
    "text": "you have to wait until JavaScript goes",
    "start": "973199",
    "end": "975420"
  },
  {
    "text": "back to the event Loop right you have to",
    "start": "975420",
    "end": "977100"
  },
  {
    "text": "wait for the stack to be cleared and so",
    "start": "977100",
    "end": "978839"
  },
  {
    "text": "you can't pause it or interrupt it you",
    "start": "978839",
    "end": "981420"
  },
  {
    "text": "can only stop it at a certain point",
    "start": "981420",
    "end": "982620"
  },
  {
    "text": "which means that you have an event Loop",
    "start": "982620",
    "end": "984300"
  },
  {
    "text": "which orders things as they come and now",
    "start": "984300",
    "end": "986339"
  },
  {
    "text": "you're going to actually have a",
    "start": "986339",
    "end": "987420"
  },
  {
    "text": "re-implemented event Loop",
    "start": "987420",
    "end": "990060"
  },
  {
    "text": "and now you have to have all these tasks",
    "start": "990060",
    "end": "992220"
  },
  {
    "text": "that are always kind of calling back and",
    "start": "992220",
    "end": "993779"
  },
  {
    "text": "you have to have something that's doing",
    "start": "993779",
    "end": "994800"
  },
  {
    "text": "some sort of Mega task listening to and",
    "start": "994800",
    "end": "997320"
  },
  {
    "text": "then comes in and tries to pluck these",
    "start": "997320",
    "end": "999360"
  },
  {
    "text": "things off one at a time",
    "start": "999360",
    "end": "1001339"
  },
  {
    "text": "um and also I mean JavaScript is single",
    "start": "1001339",
    "end": "1004839"
  },
  {
    "text": "process execution I don't like to use",
    "start": "1004839",
    "end": "1007100"
  },
  {
    "text": "the term Single threaded I I've been",
    "start": "1007100",
    "end": "1009199"
  },
  {
    "text": "recently calling it gnu plus Linux I",
    "start": "1009199",
    "end": "1011600"
  },
  {
    "text": "don't like to use the term Single",
    "start": "1011600",
    "end": "1012560"
  },
  {
    "text": "threaded uh just because V8 is not",
    "start": "1012560",
    "end": "1014839"
  },
  {
    "text": "single threaded but your JavaScript only",
    "start": "1014839",
    "end": "1017480"
  },
  {
    "text": "executes one line at a time there's no",
    "start": "1017480",
    "end": "1019100"
  },
  {
    "text": "parallelism and so",
    "start": "1019100",
    "end": "1021500"
  },
  {
    "text": "you know this idea of being able to",
    "start": "1021500",
    "end": "1023000"
  },
  {
    "text": "break stuff and all that you do have to",
    "start": "1023000",
    "end": "1024500"
  },
  {
    "text": "understand what that means is that if",
    "start": "1024500",
    "end": "1025699"
  },
  {
    "text": "you I I can just assume here that if you",
    "start": "1025699",
    "end": "1027558"
  },
  {
    "text": "have a pipe of five events and you",
    "start": "1027559",
    "end": "1029720"
  },
  {
    "text": "Febreze this thing each one of those",
    "start": "1029720",
    "end": "1031760"
  },
  {
    "text": "events or effects each one of those you",
    "start": "1031760",
    "end": "1034459"
  },
  {
    "text": "could potentially pause between two of",
    "start": "1034459",
    "end": "1036079"
  },
  {
    "text": "them and it will stop executing at one",
    "start": "1036079",
    "end": "1038000"
  },
  {
    "text": "of them and then it will wait uh what I",
    "start": "1038000",
    "end": "1040459"
  },
  {
    "text": "I mean",
    "start": "1040459",
    "end": "1042860"
  },
  {
    "text": "things that I see right now",
    "start": "1042860",
    "end": "1045199"
  },
  {
    "text": "is that",
    "start": "1045199",
    "end": "1047860"
  },
  {
    "text": "I'm trying to understand a system that",
    "start": "1048319",
    "end": "1050540"
  },
  {
    "text": "you would need this in because what",
    "start": "1050540",
    "end": "1052460"
  },
  {
    "text": "you're going to get is that you're going",
    "start": "1052460",
    "end": "1053419"
  },
  {
    "text": "to get significantly worse performance",
    "start": "1053419",
    "end": "1054919"
  },
  {
    "text": "you're going to get significantly higher",
    "start": "1054919",
    "end": "1056539"
  },
  {
    "text": "garbage collection uh but you are going",
    "start": "1056539",
    "end": "1058580"
  },
  {
    "text": "to have some conveniences some things",
    "start": "1058580",
    "end": "1059720"
  },
  {
    "text": "that I when I when I see some of these",
    "start": "1059720",
    "end": "1061039"
  },
  {
    "text": "things what I realize is that there's a",
    "start": "1061039",
    "end": "1062780"
  },
  {
    "text": "lot of Concepts being mixed here there's",
    "start": "1062780",
    "end": "1064220"
  },
  {
    "text": "like the result type that we all want a",
    "start": "1064220",
    "end": "1065720"
  },
  {
    "text": "good result type right we all want to be",
    "start": "1065720",
    "end": "1067340"
  },
  {
    "text": "able to avoid having airs thrown right I",
    "start": "1067340",
    "end": "1069620"
  },
  {
    "text": "think we can all agree on this very very",
    "start": "1069620",
    "end": "1071539"
  },
  {
    "text": "much so like that",
    "start": "1071539",
    "end": "1073220"
  },
  {
    "text": "um",
    "start": "1073220",
    "end": "1074360"
  },
  {
    "text": "but I'm not sure if I want all the other",
    "start": "1074360",
    "end": "1076160"
  },
  {
    "text": "things matched up with it right right",
    "start": "1076160",
    "end": "1077960"
  },
  {
    "text": "like I don't like results because I",
    "start": "1077960",
    "end": "1080120"
  },
  {
    "text": "can't have pattern matching but I also",
    "start": "1080120",
    "end": "1083179"
  },
  {
    "text": "not sure if I want to mix it with the",
    "start": "1083179",
    "end": "1084980"
  },
  {
    "text": "concepts of async it almost feels like",
    "start": "1084980",
    "end": "1086539"
  },
  {
    "text": "they need to be separate Concepts right",
    "start": "1086539",
    "end": "1088700"
  },
  {
    "text": "and by having them all mixed into one I",
    "start": "1088700",
    "end": "1090799"
  },
  {
    "text": "feel like this is",
    "start": "1090799",
    "end": "1092480"
  },
  {
    "text": "I'm not sure how I feel about I get the",
    "start": "1092480",
    "end": "1094520"
  },
  {
    "text": "idea this this is this reminds me of",
    "start": "1094520",
    "end": "1097160"
  },
  {
    "text": "rxjs back in the day when I got rxjs I",
    "start": "1097160",
    "end": "1100640"
  },
  {
    "text": "was super excited about it everything",
    "start": "1100640",
    "end": "1102140"
  },
  {
    "text": "became rxjs I got a golden Hammer and I",
    "start": "1102140",
    "end": "1104480"
  },
  {
    "text": "solved all my problems with rxjs oh you",
    "start": "1104480",
    "end": "1107419"
  },
  {
    "text": "want to do drag and drop look at this",
    "start": "1107419",
    "end": "1109340"
  },
  {
    "text": "mouse down starts the observable oh",
    "start": "1109340",
    "end": "1112220"
  },
  {
    "text": "Mouse drag every 100 SEC 100",
    "start": "1112220",
    "end": "1114320"
  },
  {
    "text": "milliseconds is on I fire an event Mouse",
    "start": "1114320",
    "end": "1116780"
  },
  {
    "text": "up stop it disconnect from the",
    "start": "1116780",
    "end": "1118760"
  },
  {
    "text": "observable Mouse down reek you know like",
    "start": "1118760",
    "end": "1120679"
  },
  {
    "text": "and just do this over and over and over",
    "start": "1120679",
    "end": "1122179"
  },
  {
    "text": "and over again and I could see like",
    "start": "1122179",
    "end": "1123919"
  },
  {
    "text": "everything became",
    "start": "1123919",
    "end": "1125840"
  },
  {
    "text": "a nail because of my love for rxjs at",
    "start": "1125840",
    "end": "1128600"
  },
  {
    "text": "one point and then I realized kind of",
    "start": "1128600",
    "end": "1130820"
  },
  {
    "text": "what it does and all of a sudden I",
    "start": "1130820",
    "end": "1132020"
  },
  {
    "text": "started hating it and then I realized",
    "start": "1132020",
    "end": "1133460"
  },
  {
    "text": "like how much it spreads and then how",
    "start": "1133460",
    "end": "1134780"
  },
  {
    "text": "much you know it can become very",
    "start": "1134780",
    "end": "1136160"
  },
  {
    "text": "difficult to debug these kind of",
    "start": "1136160",
    "end": "1137900"
  },
  {
    "text": "programs because the reality is is that",
    "start": "1137900",
    "end": "1140299"
  },
  {
    "text": "most the code that execute isn't your",
    "start": "1140299",
    "end": "1143660"
  },
  {
    "text": "code",
    "start": "1143660",
    "end": "1144620"
  },
  {
    "text": "and so when things aren't working the",
    "start": "1144620",
    "end": "1146419"
  },
  {
    "text": "way you think they are debugging can",
    "start": "1146419",
    "end": "1148460"
  },
  {
    "text": "become excessively difficult",
    "start": "1148460",
    "end": "1151220"
  },
  {
    "text": "you know what I mean",
    "start": "1151220",
    "end": "1153380"
  },
  {
    "text": "that's that's where I see some of the",
    "start": "1153380",
    "end": "1155059"
  },
  {
    "text": "problems here application code and",
    "start": "1155059",
    "end": "1156200"
  },
  {
    "text": "typescript often solves the same",
    "start": "1156200",
    "end": "1157640"
  },
  {
    "text": "problems over and over again",
    "start": "1157640",
    "end": "1160840"
  },
  {
    "text": "someone just said yeah observables was",
    "start": "1161960",
    "end": "1164059"
  },
  {
    "text": "cool until you have to debug it it's",
    "start": "1164059",
    "end": "1165380"
  },
  {
    "text": "exactly like literally what I'm saying",
    "start": "1165380",
    "end": "1167059"
  },
  {
    "text": "exactly precisely correct which is they",
    "start": "1167059",
    "end": "1169940"
  },
  {
    "text": "feel amaz like these type of systems",
    "start": "1169940",
    "end": "1172039"
  },
  {
    "text": "they seem super awesome but it's always",
    "start": "1172039",
    "end": "1174140"
  },
  {
    "text": "the debug story that I really really",
    "start": "1174140",
    "end": "1176480"
  },
  {
    "text": "really worry about the thing is that",
    "start": "1176480",
    "end": "1178820"
  },
  {
    "text": "effect doesn't spread uh that much or to",
    "start": "1178820",
    "end": "1181760"
  },
  {
    "text": "integrate well with vanilla code I get",
    "start": "1181760",
    "end": "1183200"
  },
  {
    "text": "that",
    "start": "1183200",
    "end": "1184100"
  },
  {
    "text": "why am I so naked today I'm I'm doing",
    "start": "1184100",
    "end": "1186260"
  },
  {
    "text": "some I'm doing some types provides a",
    "start": "1186260",
    "end": "1188660"
  },
  {
    "text": "rich ecosystem of libraries that provide",
    "start": "1188660",
    "end": "1190400"
  },
  {
    "text": "standardized solutions to many of these",
    "start": "1190400",
    "end": "1192080"
  },
  {
    "text": "problems you can use these libraries to",
    "start": "1192080",
    "end": "1194120"
  },
  {
    "text": "build your application or you can use",
    "start": "1194120",
    "end": "1195620"
  },
  {
    "text": "them to build your own libraries however",
    "start": "1195620",
    "end": "1197600"
  },
  {
    "text": "effect understands it's not always",
    "start": "1197600",
    "end": "1199400"
  },
  {
    "text": "realistic to rewrite your entire",
    "start": "1199400",
    "end": "1200900"
  },
  {
    "text": "application",
    "start": "1200900",
    "end": "1202100"
  },
  {
    "text": "by now you might have thought back to",
    "start": "1202100",
    "end": "1203960"
  },
  {
    "text": "other projects aimed at doing typescript",
    "start": "1203960",
    "end": "1205760"
  },
  {
    "text": "better or even other programming",
    "start": "1205760",
    "end": "1207679"
  },
  {
    "text": "languages the majority of which",
    "start": "1207679",
    "end": "1209419"
  },
  {
    "text": "ultimately fall to the same fate a lack",
    "start": "1209419",
    "end": "1212240"
  },
  {
    "text": "of easy interrupt with a vast and",
    "start": "1212240",
    "end": "1214160"
  },
  {
    "text": "unavoidable existing JavaScript",
    "start": "1214160",
    "end": "1215780"
  },
  {
    "text": "ecosystem my assumption is that there's",
    "start": "1215780",
    "end": "1218299"
  },
  {
    "text": "probably some sort of like",
    "start": "1218299",
    "end": "1220100"
  },
  {
    "text": "simple exiting item that just converts",
    "start": "1220100",
    "end": "1223280"
  },
  {
    "text": "it into a promise and go that's my guess",
    "start": "1223280",
    "end": "1225500"
  },
  {
    "text": "not effect",
    "start": "1225500",
    "end": "1227120"
  },
  {
    "text": "well it would be awesome to write",
    "start": "1227120",
    "end": "1228559"
  },
  {
    "text": "applications that are affect all the way",
    "start": "1228559",
    "end": "1230419"
  },
  {
    "text": "down you can just start with the pieces",
    "start": "1230419",
    "end": "1232640"
  },
  {
    "text": "of the ecosystem that make the most",
    "start": "1232640",
    "end": "1234140"
  },
  {
    "text": "sense for the problems you are solving",
    "start": "1234140",
    "end": "1236419"
  },
  {
    "text": "do you just want to rewrite a single",
    "start": "1236419",
    "end": "1238460"
  },
  {
    "text": "endpoint that does some complicated",
    "start": "1238460",
    "end": "1239840"
  },
  {
    "text": "parallel asynchronous work or has some",
    "start": "1239840",
    "end": "1242000"
  },
  {
    "text": "particularly nasty error handling you",
    "start": "1242000",
    "end": "1244100"
  },
  {
    "text": "can do it with effect today",
    "start": "1244100",
    "end": "1246200"
  },
  {
    "text": "do you just want to take advantage of",
    "start": "1246200",
    "end": "1247880"
  },
  {
    "text": "one of effect's useful data structures",
    "start": "1247880",
    "end": "1249500"
  },
  {
    "text": "you can do it with effect today well",
    "start": "1249500",
    "end": "1251660"
  },
  {
    "text": "that's good I mean I like things however",
    "start": "1251660",
    "end": "1252980"
  },
  {
    "text": "as more and more of your code base is",
    "start": "1252980",
    "end": "1254660"
  },
  {
    "text": "using effect you will probably find",
    "start": "1254660",
    "end": "1256280"
  },
  {
    "text": "yourself wanting to utilize even more of",
    "start": "1256280",
    "end": "1258200"
  },
  {
    "text": "the ecosystem",
    "start": "1258200",
    "end": "1259220"
  },
  {
    "text": "so that's one of the dangers of course",
    "start": "1259220",
    "end": "1260720"
  },
  {
    "text": "so the underlying thing that he didn't",
    "start": "1260720",
    "end": "1263120"
  },
  {
    "text": "say is that it it also can easily spread",
    "start": "1263120",
    "end": "1266299"
  },
  {
    "text": "right maybe it spreads and maybe start",
    "start": "1266299",
    "end": "1268100"
  },
  {
    "text": "solving things that you don't have to",
    "start": "1268100",
    "end": "1270559"
  },
  {
    "text": "solve",
    "start": "1270559",
    "end": "1271400"
  },
  {
    "text": "it just becomes convenient to solve once",
    "start": "1271400",
    "end": "1274400"
  },
  {
    "text": "you already have the abstraction and",
    "start": "1274400",
    "end": "1275780"
  },
  {
    "text": "that's why I get I get a little bit",
    "start": "1275780",
    "end": "1277039"
  },
  {
    "text": "worried and lastly if you think you",
    "start": "1277039",
    "end": "1279380"
  },
  {
    "text": "could get out of using effect because",
    "start": "1279380",
    "end": "1280900"
  },
  {
    "text": "functional programming is too different",
    "start": "1280900",
    "end": "1282980"
  },
  {
    "text": "and too difficult think again effect has",
    "start": "1282980",
    "end": "1286039"
  },
  {
    "text": "its own form of async or white style",
    "start": "1286039",
    "end": "1288020"
  },
  {
    "text": "syntax powered by generators with",
    "start": "1288020",
    "end": "1290419"
  },
  {
    "text": "generators you can write effectful code",
    "start": "1290419",
    "end": "1292400"
  },
  {
    "text": "in the imperative way that you already",
    "start": "1292400",
    "end": "1294080"
  },
  {
    "text": "know",
    "start": "1294080",
    "end": "1295039"
  },
  {
    "text": "effects Concepts may be new to you and",
    "start": "1295039",
    "end": "1297500"
  },
  {
    "text": "may not completely make sense at first",
    "start": "1297500",
    "end": "1298880"
  },
  {
    "text": "this is totally normal",
    "start": "1298880",
    "end": "1301100"
  },
  {
    "text": "learning effect is a lot of fun many",
    "start": "1301100",
    "end": "1303500"
  },
  {
    "text": "developers in the effect ecosystem are",
    "start": "1303500",
    "end": "1305360"
  },
  {
    "text": "using effect today to solve real",
    "start": "1305360",
    "end": "1307100"
  },
  {
    "text": "problems in their day-to-day work as",
    "start": "1307100",
    "end": "1309020"
  },
  {
    "text": "well as experimenting with Cutting Edge",
    "start": "1309020",
    "end": "1310520"
  },
  {
    "text": "ideas for pushing typescript to be the",
    "start": "1310520",
    "end": "1312740"
  },
  {
    "text": "most useful language it can be",
    "start": "1312740",
    "end": "1314780"
  },
  {
    "text": "I hope you feel inspired to give the",
    "start": "1314780",
    "end": "1316520"
  },
  {
    "text": "effect documentation a read and to",
    "start": "1316520",
    "end": "1318440"
  },
  {
    "text": "explore the effect repositories and API",
    "start": "1318440",
    "end": "1320480"
  },
  {
    "text": "reference pages I gladly at least you",
    "start": "1320480",
    "end": "1322820"
  },
  {
    "text": "said go use go look go read the docs",
    "start": "1322820",
    "end": "1325400"
  },
  {
    "text": "first I like it I like it hey I like it",
    "start": "1325400",
    "end": "1328159"
  },
  {
    "text": "start with the start with the docs",
    "start": "1328159",
    "end": "1329780"
  },
  {
    "text": "consider joining the effect Discord",
    "start": "1329780",
    "end": "1331460"
  },
  {
    "text": "server a great Community for Learning",
    "start": "1331460",
    "end": "1333500"
  },
  {
    "text": "and discussing effect",
    "start": "1333500",
    "end": "1335059"
  },
  {
    "text": "links to all of that as well as the",
    "start": "1335059",
    "end": "1336980"
  },
  {
    "text": "transcript and markdown source code to",
    "start": "1336980",
    "end": "1338539"
  },
  {
    "text": "this video are available in the",
    "start": "1338539",
    "end": "1339860"
  },
  {
    "text": "description and Corrections will be in",
    "start": "1339860",
    "end": "1341600"
  },
  {
    "text": "the pin comment",
    "start": "1341600",
    "end": "1342740"
  },
  {
    "text": "finally a huge thank you and shout out",
    "start": "1342740",
    "end": "1344840"
  },
  {
    "text": "to no boilerplate to whom this video",
    "start": "1344840",
    "end": "1346880"
  },
  {
    "text": "takes very strong inspiration from nice",
    "start": "1346880",
    "end": "1348980"
  },
  {
    "text": "his videos are incredible and inspired",
    "start": "1348980",
    "end": "1351620"
  },
  {
    "text": "my passion I most certainly saw the no",
    "start": "1351620",
    "end": "1354080"
  },
  {
    "text": "boilerplate",
    "start": "1354080",
    "end": "1356120"
  },
  {
    "text": "um",
    "start": "1356120",
    "end": "1357380"
  },
  {
    "text": "feel from this video you can see it",
    "start": "1357380",
    "end": "1359120"
  },
  {
    "text": "right away in the sense that this was",
    "start": "1359120",
    "end": "1361640"
  },
  {
    "text": "obviously pretty straight to the point",
    "start": "1361640",
    "end": "1362720"
  },
  {
    "text": "there was not a lot of fluff in this",
    "start": "1362720",
    "end": "1365179"
  },
  {
    "text": "video very well done really like this",
    "start": "1365179",
    "end": "1366679"
  },
  {
    "text": "video great YouTube video overall very",
    "start": "1366679",
    "end": "1368360"
  },
  {
    "text": "well done rust just like I hope this",
    "start": "1368360",
    "end": "1370159"
  },
  {
    "text": "video will inspire your passion for",
    "start": "1370159",
    "end": "1371720"
  },
  {
    "text": "effect please check out his channel the",
    "start": "1371720",
    "end": "1374000"
  },
  {
    "text": "link is also in the description",
    "start": "1374000",
    "end": "1375799"
  },
  {
    "text": "thank you so much for watching and I'll",
    "start": "1375799",
    "end": "1377720"
  },
  {
    "text": "see you next time and I'll see you next",
    "start": "1377720",
    "end": "1379520"
  },
  {
    "text": "time come on that's a trust move we all",
    "start": "1379520",
    "end": "1381620"
  },
  {
    "text": "know that",
    "start": "1381620",
    "end": "1382820"
  },
  {
    "text": "um content layer mix working with",
    "start": "1382820",
    "end": "1386240"
  },
  {
    "text": "um very well content later makes working",
    "start": "1386240",
    "end": "1388220"
  },
  {
    "text": "with okay I don't know what just",
    "start": "1388220",
    "end": "1390260"
  },
  {
    "text": "happened there it got me twice uh",
    "start": "1390260",
    "end": "1393020"
  },
  {
    "text": "I really did like that I I really liked",
    "start": "1393020",
    "end": "1395179"
  },
  {
    "text": "the style of YouTube video I think that",
    "start": "1395179",
    "end": "1396620"
  },
  {
    "text": "he did a great job I think that",
    "start": "1396620",
    "end": "1398059"
  },
  {
    "text": "everything was good why am I not wearing",
    "start": "1398059",
    "end": "1399200"
  },
  {
    "text": "I already told you why I'm not wearing",
    "start": "1399200",
    "end": "1400640"
  },
  {
    "text": "something the thing I don't like about",
    "start": "1400640",
    "end": "1401960"
  },
  {
    "text": "that again is just I foresee leaky",
    "start": "1401960",
    "end": "1403820"
  },
  {
    "text": "interfaces I foresee High memory I see",
    "start": "1403820",
    "end": "1405500"
  },
  {
    "text": "hard debug ability I know there's",
    "start": "1405500",
    "end": "1407179"
  },
  {
    "text": "observability built in with this whole",
    "start": "1407179",
    "end": "1408799"
  },
  {
    "text": "logger situation you can provide your",
    "start": "1408799",
    "end": "1410299"
  },
  {
    "text": "own custom logger that all I I love that",
    "start": "1410299",
    "end": "1412760"
  },
  {
    "text": "I love that part but I don't love",
    "start": "1412760",
    "end": "1417760"
  },
  {
    "text": "that Tech I don't think it's good and",
    "start": "1418039",
    "end": "1420620"
  },
  {
    "text": "I'm gonna I know I I don't often say",
    "start": "1420620",
    "end": "1422539"
  },
  {
    "text": "things in such absolute terms",
    "start": "1422539",
    "end": "1426340"
  },
  {
    "text": "I really try never to say this it's",
    "start": "1426380",
    "end": "1428179"
  },
  {
    "text": "really just rxjs that gets my my ire I",
    "start": "1428179",
    "end": "1431720"
  },
  {
    "text": "will not use rxjs I will not use effect",
    "start": "1431720",
    "end": "1434240"
  },
  {
    "text": "I am sorry uh",
    "start": "1434240",
    "end": "1438020"
  },
  {
    "text": "it it I love the concepts in there I",
    "start": "1438020",
    "end": "1440299"
  },
  {
    "text": "think they're all really really great I",
    "start": "1440299",
    "end": "1441679"
  },
  {
    "text": "just don't think it's great for",
    "start": "1441679",
    "end": "1443539"
  },
  {
    "text": "JavaScript personal opinion okay I will",
    "start": "1443539",
    "end": "1446780"
  },
  {
    "text": "not use it I don't use effect in react I",
    "start": "1446780",
    "end": "1450080"
  },
  {
    "text": "don't use effect in this I don't use",
    "start": "1450080",
    "end": "1451700"
  },
  {
    "text": "react by the way by the way um anyways",
    "start": "1451700",
    "end": "1454159"
  },
  {
    "text": "there you go rxjs is pretty confusing uh",
    "start": "1454159",
    "end": "1456799"
  },
  {
    "text": "it's not confused I mean once you get it",
    "start": "1456799",
    "end": "1458539"
  },
  {
    "text": "it's not confusing it's",
    "start": "1458539",
    "end": "1461000"
  },
  {
    "text": "it's what it does to your code it's the",
    "start": "1461000",
    "end": "1462799"
  },
  {
    "text": "same thing that happens with the fact",
    "start": "1462799",
    "end": "1463820"
  },
  {
    "text": "it's what it does to your code that can",
    "start": "1463820",
    "end": "1465799"
  },
  {
    "text": "become really difficult",
    "start": "1465799",
    "end": "1467900"
  },
  {
    "text": "appreciate your comments the name is",
    "start": "1467900",
    "end": "1472280"
  },
  {
    "text": "Ethan I really liked your YouTube video",
    "start": "1472280",
    "end": "1473960"
  },
  {
    "text": "I'm sorry that I'm shooting on effect",
    "start": "1473960",
    "end": "1475159"
  },
  {
    "text": "but hey I really liked your YouTube",
    "start": "1475159",
    "end": "1476539"
  },
  {
    "text": "video you should go and subscribe to him",
    "start": "1476539",
    "end": "1478039"
  },
  {
    "text": "because it was actually a very well done",
    "start": "1478039",
    "end": "1479419"
  },
  {
    "text": "video and I'm confident he's going to",
    "start": "1479419",
    "end": "1480860"
  },
  {
    "text": "continue to make some really good videos",
    "start": "1480860",
    "end": "1483440"
  },
  {
    "text": "again",
    "start": "1483440",
    "end": "1486340"
  }
]