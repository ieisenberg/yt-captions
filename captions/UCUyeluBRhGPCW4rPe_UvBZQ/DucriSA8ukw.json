[
  {
    "text": "all right let's check out the I changed my mind about this language with lowle",
    "start": "120",
    "end": "5520"
  },
  {
    "text": "learning because this is actually really exciting and hey guess what at the end of this video we're going to actually",
    "start": "5520",
    "end": "10960"
  },
  {
    "text": "get low-l learning in here and we're going to have a quick discussion on this so this is going to be a double whammy",
    "start": "10960",
    "end": "16720"
  },
  {
    "text": "today a double whammy cuz lowle learning if you don't know Ed as some people call",
    "start": "16720",
    "end": "21800"
  },
  {
    "text": "him kind of the man okay it's kind of the man here we go about Zig originally when I started the coding it about a",
    "start": "21800",
    "end": "27599"
  },
  {
    "text": "year ago I wasn't sure if it actually had a meaningful place in the developer ecos oh my goodness I feel so Justified",
    "start": "27599",
    "end": "34640"
  },
  {
    "text": "already we're like 2 minutes in I I even made videos about this I don't think zigg has a good place yet and I still",
    "start": "34640",
    "end": "41120"
  },
  {
    "text": "stand by that opinion because it's like during during like two years ago the hype was all rust right it was all rust",
    "start": "41120",
    "end": "48239"
  },
  {
    "text": "it was all exciting everybody wanted rust and it was all about safety and all these kind of things and you know I I",
    "start": "48239",
    "end": "53559"
  },
  {
    "text": "largely agreed with that I thought that okay if I'm going to program some sort of new low-level systems level language",
    "start": "53559",
    "end": "59760"
  },
  {
    "text": "I might as well actually have something that is fast but also really dang safe and I'm not going to shoot myself in the",
    "start": "59760",
    "end": "65080"
  },
  {
    "text": "foot and I want like one really expressive type system so it's like well zig's not as safe as rust but then but",
    "start": "65080",
    "end": "71040"
  },
  {
    "text": "then on the other side it's just like okay but it's easier than rust but then you're like well if I wanted something easier I could just use go so where does",
    "start": "71040",
    "end": "77880"
  },
  {
    "text": "ZIG sit what's the purpose of Zig and the more I got to learn about Zig and kind of let it stew in my back brain",
    "start": "77880",
    "end": "84119"
  },
  {
    "text": "comp time plus the ability to have options and plus air so it does do results it does do air it does do",
    "start": "84119",
    "end": "90640"
  },
  {
    "text": "options and results and that there's like a couple different situations in which you can still do a nilp pointer but for the most part it's more like go",
    "start": "90640",
    "end": "98320"
  },
  {
    "text": "and it's more like C than anything else and so I was just like I felt like Zig had no purpose and now I'm like Zig",
    "start": "98320",
    "end": "104439"
  },
  {
    "text": "might actually be the real de facto one and I do mean that that I think zigg is significantly more interesting in",
    "start": "104439",
    "end": "110840"
  },
  {
    "text": "embedded work than rust or C I think Zig would be significantly more interesting",
    "start": "110840",
    "end": "116000"
  },
  {
    "text": "as a web server than rust go it's like a huge it's a huge argument I think go and",
    "start": "116000",
    "end": "121079"
  },
  {
    "text": "Zig is a much more compelling argument to have than rust and go I actually think that rust the more I learn about",
    "start": "121079",
    "end": "127399"
  },
  {
    "text": "Zig I think Linux I even think the Linux Colonel made a mistake having rust going into it I think zigg should have been",
    "start": "127399",
    "end": "132599"
  },
  {
    "text": "the one that goes into it I really do think zigg is actually the most interesting language out there right now",
    "start": "132599",
    "end": "138319"
  },
  {
    "text": "I really do uh it just seems so super cool it does I think it is just so super cool I can't even believe I cannot",
    "start": "138319",
    "end": "144680"
  },
  {
    "text": "believe how cool it is and I've just been stewing on these and reading a little bit here and there I you know obviously I haven't done a lot of it",
    "start": "144680",
    "end": "150360"
  },
  {
    "text": "I've just read about it and and played I I did I think I did a couple days of Advent of code last year in it and it",
    "start": "150360",
    "end": "155440"
  },
  {
    "text": "was just so cool system and as I've been using it and being asked more and more",
    "start": "155440",
    "end": "160480"
  },
  {
    "text": "questions about it I think I've come to a better conclusion in this video we're going to talk about what zigg Ling is",
    "start": "160480",
    "end": "166879"
  },
  {
    "text": "where it lives in the developer ecosystem and my thoughts on the syntax and the features of the language now if",
    "start": "166879",
    "end": "173200"
  },
  {
    "text": "you're this is good this is a good lineup cuz I have a lot of thoughts on these things by the way I feel like people have the worst measurement of",
    "start": "173200",
    "end": "178959"
  },
  {
    "text": "what is good and bad syntax people come in constantly and they're like goang has the worst syntax goang doesn't even have",
    "start": "178959",
    "end": "184959"
  },
  {
    "text": "syntax like what are you talking about it's there's like five characters that",
    "start": "184959",
    "end": "190120"
  },
  {
    "text": "are non just English letters it's just pretty much asky it's just a bunch of keywords it's wild it's it's wild the",
    "start": "190120",
    "end": "198799"
  },
  {
    "text": "only thing that people can say they're so mad at Co and equals like I think colon equals is the only thing that",
    "start": "198799",
    "end": "203840"
  },
  {
    "text": "people are mad at hey I don't like implicit returns right I don't like the last thing inside of a function being",
    "start": "203840",
    "end": "208920"
  },
  {
    "text": "the thing that returns oh an expression based languages well guess what my parser it looks it looks for keywords",
    "start": "208920",
    "end": "214640"
  },
  {
    "text": "okay okay my dyslexic ass brain looks for keywords and so it's very easy for that so col and equals is not a problem",
    "start": "214640",
    "end": "220879"
  },
  {
    "text": "because there's two instead of one it's very easy it's very very simple okay whereas no return is hard for me I have",
    "start": "220879",
    "end": "227480"
  },
  {
    "text": "to like look for look for extra stuff I don't know seems hard anyways uh but we all don't like Syntax for different",
    "start": "227480",
    "end": "233280"
  },
  {
    "text": "reasons but I'm very curious about that one okay has shitty syntax can't you invent your own syntax in H if you're",
    "start": "233280",
    "end": "240400"
  },
  {
    "text": "new here hi I'm L Al learning I make videos about software security programming and cyber security in",
    "start": "240400",
    "end": "245680"
  },
  {
    "text": "general so if you like that stuff or just want to hang out with me hit that sub button I really appreciate it now a lot of new programmers ask me uh what",
    "start": "245680",
    "end": "251400"
  },
  {
    "text": "language should I learn should I learn C or C unsafe or should I learn rust or rust too hard or should I learn Zig and",
    "start": "251400",
    "end": "258199"
  },
  {
    "text": "I think for a long time I had a good answer about C and rust but I didn't really know how to answer when it came",
    "start": "258199",
    "end": "264400"
  },
  {
    "text": "to Zig zigg had this weird aura about it where I wasn't sure what problem it solved but I think I'm going to be able",
    "start": "264400",
    "end": "269520"
  },
  {
    "text": "to answer answer that for you today if you consider the ecosystem of systems by the way that is like such a common",
    "start": "269520",
    "end": "274639"
  },
  {
    "text": "question which is rust or should I learn rust or and it's always some set of",
    "start": "274639",
    "end": "280039"
  },
  {
    "text": "things uh that people are always weighing against and it's kind of wild like I mean if you want to learn rust you should just learn rust and stop rust",
    "start": "280039",
    "end": "286120"
  },
  {
    "text": "oring it right I just think it's kind of crazy to always just living your life on an ore like always trying to find the",
    "start": "286120",
    "end": "291479"
  },
  {
    "text": "most optimal thing to learn and all this kind of stuff like it's better just to learn something learning something is",
    "start": "291479",
    "end": "297080"
  },
  {
    "text": "better than trying to figure out the best thing to learn ever and I think a lot of people they end up trying to just",
    "start": "297080",
    "end": "302840"
  },
  {
    "text": "learn the best possible Thing versus just learning something and then they end up spending months trying to learn",
    "start": "302840",
    "end": "308759"
  },
  {
    "text": "the best thing and they swap really really quickly and they can never quite do it because there's always something new and so they just never actually",
    "start": "308759",
    "end": "314759"
  },
  {
    "text": "learn the thing it's like the most common thing I see flip you might be able to keep this in it's like one of",
    "start": "314759",
    "end": "319919"
  },
  {
    "text": "the most common thing I see is that people constantly try to just live the most optimized life and you you probably",
    "start": "319919",
    "end": "325840"
  },
  {
    "text": "just you don't need to do that you know I always say this you know it's better than the best workout ever the one",
    "start": "325840",
    "end": "331560"
  },
  {
    "text": "you're going to do tomorrow if you can just keep on having something you're going to do again that's better than the thing you'll do once then do it again",
    "start": "331560",
    "end": "339160"
  },
  {
    "text": "then do it again then do it again and then maybe maybe you'll be kind of excited to to improve and if you're",
    "start": "339160",
    "end": "344479"
  },
  {
    "text": "excited to improve okay you know excited exciting programming you have the SE",
    "start": "344479",
    "end": "350560"
  },
  {
    "text": "language and you have rust now those are the two main ones that stick out in my head when it comes to systems level",
    "start": "350560",
    "end": "356120"
  },
  {
    "text": "languages and we're not going to talk about C++ by the way now there is go go is another compiled language that is",
    "start": "356120",
    "end": "362000"
  },
  {
    "text": "very very good and getting more and more speed but go is a garbage collected language and some systems some platforms",
    "start": "362000",
    "end": "367880"
  },
  {
    "text": "and some projects require that you don't use garbage collection for one reason or another garbage collection is inherently",
    "start": "367880",
    "end": "374400"
  },
  {
    "text": "non-deterministic so a lot of the times people will just choose to not use a garbage collected language now you're",
    "start": "374400",
    "end": "379720"
  },
  {
    "text": "left with it's fair it's fair factual um but go is garbage collected not garbage",
    "start": "379720",
    "end": "386400"
  },
  {
    "text": "uh go is a great language uh most people they just simply need a tool for",
    "start": "386400",
    "end": "391880"
  },
  {
    "text": "automation or a tool to aggregate a bunch of results together and do something and you can do you can do",
    "start": "391880",
    "end": "398440"
  },
  {
    "text": "quite a bit with go you can just do quite a bit and so I'm not too I'm not",
    "start": "398440",
    "end": "404039"
  },
  {
    "text": "too worried about it yeah this whole like you can disable the garbage collector is very interesting I'm curious about that if you disable the uh",
    "start": "404039",
    "end": "410800"
  },
  {
    "text": "garbage collector how do you how do you what can you do with memory I'm not really sure I don't know it seems",
    "start": "410800",
    "end": "416479"
  },
  {
    "text": "interesting the basic two you have C and rust now each of them have their pros",
    "start": "416479",
    "end": "422599"
  },
  {
    "text": "and their cons their shortcomings and their power right C on the one hand is the OG language it's been around since",
    "start": "422599",
    "end": "429599"
  },
  {
    "text": "like 1972 or whatever and it's it's one of the best languages that exists in terms of the power that it gives the",
    "start": "429599",
    "end": "436840"
  },
  {
    "text": "programmer I mean the entire world to include every embedded device that exists your router your fridge your",
    "start": "436840",
    "end": "443319"
  },
  {
    "text": "microwave is probably written in C and that he is right people forget how good C is I mean the time the the time and",
    "start": "443319",
    "end": "449919"
  },
  {
    "text": "place C was created but not only that it can perfectly Express almost every single computer science problem and so",
    "start": "449919",
    "end": "455800"
  },
  {
    "text": "it's not only a great just like language that people have used for many years but it's also a really great representation",
    "start": "455800",
    "end": "460840"
  },
  {
    "text": "of just computer science itself it's like the manifestation of all the algorithms and data structures and",
    "start": "460840",
    "end": "465879"
  },
  {
    "text": "everything it's it's quite it's quite it's quite a great language C is a grape",
    "start": "465879",
    "end": "472199"
  },
  {
    "text": "language it is a grape language uh coffee machine is in C probably there's probably just a really small amount it",
    "start": "472199",
    "end": "477800"
  },
  {
    "text": "might it might be in something else uh but it's it's small the hot take I don't think that's a hot take I think that",
    "start": "477800",
    "end": "483280"
  },
  {
    "text": "most Concepts in computer science boil down to being very well expressed in C it's because C is an incredibly powerful",
    "start": "483280",
    "end": "490440"
  },
  {
    "text": "language the the programmer is able to do literally whatever they want as long as it's within the scope of like what the OS the kernel allows it's able to be",
    "start": "490440",
    "end": "497639"
  },
  {
    "text": "done in C now that is what I'm considering on like the far left of the spectrum right you have like powerful",
    "start": "497639",
    "end": "503319"
  },
  {
    "text": "but do whatever you want to give it like chaotic evil language right on the other hand you have rust now rust is designed",
    "start": "503319",
    "end": "509120"
  },
  {
    "text": "with many of the failures of C in mind C for example is not a memory safe language you can exit outside of the",
    "start": "509120",
    "end": "515839"
  },
  {
    "text": "bounds of an array you can do arbitrary use after freeze and it's on the developer to catch them at compile time",
    "start": "515839",
    "end": "522080"
  },
  {
    "text": "or the program to enforce that you can't do those things at runtime but you can very easily write code that just allows",
    "start": "522080",
    "end": "528839"
  },
  {
    "text": "you to do whatever you want and have it go out into the ether and become a security vulnerability that eventually gets hacked by hackers but if you",
    "start": "528839",
    "end": "535279"
  },
  {
    "text": "consider the new program by the way that is skill issues right there you know don't don't get caught by skill issues",
    "start": "535279",
    "end": "541440"
  },
  {
    "text": "it's that easy uh C is great but then C++ C++ you know I think C++ gets a bit",
    "start": "541440",
    "end": "546600"
  },
  {
    "text": "of a bad rap uh you can do quite a bit with C++ that's not bad I think the thing is is that C++ like a lot of",
    "start": "546600",
    "end": "552920"
  },
  {
    "text": "languages they offer a whole bunch you know I mean to be to be real have you ever used some Rust that when you look",
    "start": "552920",
    "end": "558360"
  },
  {
    "text": "at the code that it prod like that the person produced you look at it and go this is just crazy code this is this",
    "start": "558360",
    "end": "563480"
  },
  {
    "text": "code is absolutely crazy and you get completely confused by um like by what is h like I mean when you look at really",
    "start": "563480",
    "end": "570320"
  },
  {
    "text": "high performance rust it's pretty wild out there and if anybody tells you that",
    "start": "570320",
    "end": "576200"
  },
  {
    "text": "uh that rust is way easier to maintain you know I'm not 100% convinced about it",
    "start": "576200",
    "end": "581839"
  },
  {
    "text": "I mean I I've worked in some pretty awful C++ Co bases I spent two days trying to figure out a logging thing and",
    "start": "581839",
    "end": "587600"
  },
  {
    "text": "I couldn't figure it out I tried like my i i l I tried my hardest couldn't figure it out could not do it the macros were",
    "start": "587600",
    "end": "593800"
  },
  {
    "text": "too intense a clang D couldn't keep up with all of it and it just fell apart so I I know what bad I know what bad C++",
    "start": "593800",
    "end": "600360"
  },
  {
    "text": "looks like is high perf rust as insane as high perf C++ I feel like rust is 100% harder in the high per situations I",
    "start": "600360",
    "end": "608920"
  },
  {
    "text": "feel like it's much harder High perf rust is slower and harder I don't know if it's slower slower is kind of a I",
    "start": "608920",
    "end": "614040"
  },
  {
    "text": "don't know that but hard is very hard who's trying to get into the space who wants to learn a language that is for",
    "start": "614040",
    "end": "621279"
  },
  {
    "text": "systems programming but doesn't want to do Russ cuz Russ is too hard but doesn't want to do c because C is unsafe where",
    "start": "621279",
    "end": "628360"
  },
  {
    "text": "do they go this is where I think Zig fits in very very well now what you're looking at here is a project I've been",
    "start": "628360",
    "end": "634600"
  },
  {
    "text": "working on on interesting that's like that's actually for me that's not a selling point I though that is a selling",
    "start": "634600",
    "end": "640839"
  },
  {
    "text": "point that's not my first selling point this was kind of an interesting approach to kind of going about this as a",
    "start": "640839",
    "end": "646079"
  },
  {
    "text": "language first or this as the reason first okay I can C curious curious on",
    "start": "646079",
    "end": "652920"
  },
  {
    "text": "Twitch I've been basically trying to reproduce the xxd binary if you don't know what xxd is it's a basic hex right",
    "start": "652920",
    "end": "659639"
  },
  {
    "text": "you can specify the size of the columns and the size of the groups and what you do is you pump in arbitrary data into",
    "start": "659639",
    "end": "665040"
  },
  {
    "text": "there and it hex dumps it right pretty straightforward I use this project as a way to learn new languages cuz the project itself is very simple but it",
    "start": "665040",
    "end": "671399"
  },
  {
    "text": "forces you to learn a few things about the language you have to do like basic Loops memory views into binary data how",
    "start": "671399",
    "end": "676959"
  },
  {
    "text": "to open files you have to use the parts of the API that may be like non-standard and then also like it's just a cool tool",
    "start": "676959",
    "end": "682279"
  },
  {
    "text": "to have I think it's I think it's pretty neat so anyway what I'm do I've never built xxd that could be neat that kind",
    "start": "682279",
    "end": "688200"
  },
  {
    "text": "of seems like a neat project that sounds like a neat one to do stuff like you can see a lot of cool stuff in Zig like I do love their TR Syntax for",
    "start": "688200",
    "end": "695440"
  },
  {
    "text": "those that don't know uh I I will say it's both good and bad having I don't know I don't know what the term is for",
    "start": "695440",
    "end": "701959"
  },
  {
    "text": "you know not postfixed I'm not sure if it's prefixed if that's the term for it but to have try first and then your",
    "start": "701959",
    "end": "707040"
  },
  {
    "text": "statement is really nice it's really easy to read what's going on but the postfix question in Rust is really",
    "start": "707040",
    "end": "714240"
  },
  {
    "text": "really convenient for chaining is that an exception try it's not a try so when you see the word try or catch it's not",
    "start": "714240",
    "end": "721639"
  },
  {
    "text": "what you would consider it um you like if you think of try if you think of try",
    "start": "721639",
    "end": "727600"
  },
  {
    "text": "try is unwrap and rust try is not unwrap unwrap and rust it's not at all unwrap",
    "start": "727600",
    "end": "733680"
  },
  {
    "text": "and rust see this little bang void this bang void what that means is that this function can return nothing or an error",
    "start": "733680",
    "end": "741839"
  },
  {
    "text": "and so try fstat will Ford up that eror it will return it try is equivalent to",
    "start": "741839",
    "end": "748240"
  },
  {
    "text": "the question mark operator this is a result object that comes out of this function so bang void is a result object",
    "start": "748240",
    "end": "754600"
  },
  {
    "text": "where the type is void so it actually has a result object so Zig has a result uh object which I think is pretty cool I",
    "start": "754600",
    "end": "762240"
  },
  {
    "text": "see Alex and no free what is this well uh I do see I do see an Alec right here and then I see a free right here so this",
    "start": "762240",
    "end": "768720"
  },
  {
    "text": "defer is a free so you get defer which I also think is really nice this allocator doesn't do something and then it just dumps the hex that's probably fine right",
    "start": "768720",
    "end": "776519"
  },
  {
    "text": "you know try is a bubble up the air yeah and catch is kind interesting because if you open the path and you can't open it",
    "start": "776519",
    "end": "782680"
  },
  {
    "text": "you can then do something on not being able to handle the air which is also kind of like a super cool concept I",
    "start": "782680",
    "end": "789160"
  },
  {
    "text": "actually really like this concept where you can do something and then handle if it doesn't work out rust air handling is",
    "start": "789160",
    "end": "795839"
  },
  {
    "text": "just the best uh I don't know if that's true this is super cool this is equally in my opinion this is there's some",
    "start": "795839",
    "end": "801160"
  },
  {
    "text": "things about this that is actually cooler than rusts right the try not as good for chaining not a big fan of that",
    "start": "801160",
    "end": "806959"
  },
  {
    "text": "uh but most of the time if you're chaining a bunch of airs together I have a lot of questions you know like that's that's pretty difficult whereas this",
    "start": "806959",
    "end": "813480"
  },
  {
    "text": "catch I think is super cool like this is super super cool catching it seems like a more elegant uh version of go air",
    "start": "813480",
    "end": "819760"
  },
  {
    "text": "handling it's a it it has the it has the result objects that you always want from rust but it has a much more like kind of",
    "start": "819760",
    "end": "825320"
  },
  {
    "text": " feel and so this is kind of what I want no chaining you can't really chain as easily it's true it's harder to chain",
    "start": "825320",
    "end": "832399"
  },
  {
    "text": "it's just harder to chain a I haven't done Elixir air handling so I don't know the combination of try catch with a",
    "start": "832399",
    "end": "837480"
  },
  {
    "text": "unions is very nice in my opinion I I agree with that it's very very cool it's very very cool so people that don't know this this is very cool uh it's the",
    "start": "837480",
    "end": "844079"
  },
  {
    "text": "middle ground between go and try catch well no it's not there's no TR catch it's not TR catch it's not throwing",
    "start": "844079",
    "end": "850040"
  },
  {
    "text": "errors right it's not throwing errors Zig errors are only enums you cannot attach payloads to errs I'm not sure",
    "start": "850040",
    "end": "855839"
  },
  {
    "text": "what that means a payload to an error I don't know what that means you can chain things uh that all return errors uh",
    "start": "855839",
    "end": "861600"
  },
  {
    "text": "types uh I don't know if you can do that anyway doing in this project is reproduc you could by like surrounding it by",
    "start": "861600",
    "end": "867240"
  },
  {
    "text": "parentheses but that's not really chaining Tri catch was good and we should use TR catch I do not think I mean I think this is where Uncle Bob and",
    "start": "867240",
    "end": "873320"
  },
  {
    "text": "I will permanently disagree I do not think Tri catch is a good Paradigm I think Tri catch is terrible I think TR",
    "start": "873320",
    "end": "878680"
  },
  {
    "text": "catch is 100% bad 100% of the time no matter what anyhow good",
    "start": "878680",
    "end": "884959"
  },
  {
    "text": "luck for those that didn't see that that was that was really good this is most people's rust air handling rust has",
    "start": "884959",
    "end": "890959"
  },
  {
    "text": "great air handling also anyhow just just anyhow all the time",
    "start": "890959",
    "end": "896240"
  },
  {
    "text": "anyhow bail anyhow bail anyhow air anyhow this anyhow that anyhow anyhow",
    "start": "896240",
    "end": "903920"
  },
  {
    "text": "anyhow anyhow anyhow anyhow anyhow XX how do you even create an air",
    "start": "903920",
    "end": "910279"
  },
  {
    "text": "and rust nobody knows nobody has any idea it's it's unheard of D and this is the current status of it and I'm calling",
    "start": "910279",
    "end": "916920"
  },
  {
    "text": "it zcd so pretty neat in doing this project I learned a few things about the language that I want to talk about that",
    "start": "916920",
    "end": "922360"
  },
  {
    "text": "I really really cat is the main feature that kind of separates zigg from C so if",
    "start": "922360",
    "end": "928720"
  },
  {
    "text": "you written C recently right C Used to Be basically it was so sorry someone",
    "start": "928720",
    "end": "934759"
  },
  {
    "text": "just said something very offensive in the chat Dy box imple error I mean this guy I mean this man's out here this",
    "start": "934759",
    "end": "941600"
  },
  {
    "text": "first off it's incorrect it would be box dine error okay it would be a result of",
    "start": "941600",
    "end": "949480"
  },
  {
    "text": "e box dine error okay now that my",
    "start": "949480",
    "end": "954759"
  },
  {
    "text": "friends is an evil statement this is an evil statement this is also how I did my first first rust error handling that's",
    "start": "954759",
    "end": "960680"
  },
  {
    "text": "how I did my first one try catch as useful in certain situations when you uh know certain exceptions will happen yeah",
    "start": "960680",
    "end": "966079"
  },
  {
    "text": "you know it's even easier if you know when certain exceptions will happen you um you can also use erors as values cuz",
    "start": "966079",
    "end": "973600"
  },
  {
    "text": "the only difference between this and what you're saying is that sors as values you know where they all happen",
    "start": "973600",
    "end": "979759"
  },
  {
    "text": "with exceptions you only know the ones you know you know what I mean and just",
    "start": "979759",
    "end": "984959"
  },
  {
    "text": "like you only know you only know the ones you know let's go back a little bit just a cool tool to have I think it's I",
    "start": "984959",
    "end": "991199"
  },
  {
    "text": "think it's pretty neat so anyway what I'm doing in this project is reproducing xxd and this is the current status of it",
    "start": "991199",
    "end": "997040"
  },
  {
    "text": "and uh I'm calling it zcd so pretty neat in doing this project I learned a few things about the language that I want to",
    "start": "997040",
    "end": "1002440"
  },
  {
    "text": "talk about that I really really enjoy the first is the main feature that kind of separates Zig from C so if you have",
    "start": "1002440",
    "end": "1009800"
  },
  {
    "text": "written C recently right C Used to Be basically it was literally an",
    "start": "1009800",
    "end": "1014920"
  },
  {
    "text": "abstraction for assembly instead of writing assembly you would write the C would just turn into assembly that' be",
    "start": "1014920",
    "end": "1020480"
  },
  {
    "text": "there' be they say that when when the Heap introduced when the Heap was introduced programs became hard you like",
    "start": "1020480",
    "end": "1026678"
  },
  {
    "text": "no extra things added there was no allocators that were created you had to write all that stuff yourself as C got",
    "start": "1026679",
    "end": "1033400"
  },
  {
    "text": "older as C matured we now have like the gy library that does a lot of stuff for us we use print F we use scan F and all",
    "start": "1033400",
    "end": "1039360"
  },
  {
    "text": "of that stuff that when you use it I like to call it gpsy g Lipsy way too much I like to call it",
    "start": "1039360",
    "end": "1045240"
  },
  {
    "text": "gpsy okay feeling a little gpsy tonight gets buffered in the Heap so Zig is",
    "start": "1045240",
    "end": "1050880"
  },
  {
    "text": "trying to prevent these things that they call ghost allocations where when you run code in Zig all the allocations will",
    "start": "1050880",
    "end": "1058360"
  },
  {
    "text": "be ones that you ask it to do it will not do any allocations for you and because of that they've given you very",
    "start": "1058360",
    "end": "1065080"
  },
  {
    "text": "explicit access to these things called allocators so you can write your own memory allocators that allocate memory",
    "start": "1065080",
    "end": "1071080"
  },
  {
    "text": "in the way that you would like it to be allocated you could write your own kind of Heap you could write a basic stack allocator you can basically do whatever",
    "start": "1071080",
    "end": "1077320"
  },
  {
    "text": "you want which is really really cool another other thing is this defer macro right when you're doing allocations",
    "start": "1077320",
    "end": "1082559"
  },
  {
    "text": "every allocation when you do an Alec must be met with a corresponding free right if you don't do that you have a",
    "start": "1082559",
    "end": "1087919"
  },
  {
    "text": "memory leak and your your program is buggy uh this defer keyword allows us to do the associated free for that piece of",
    "start": "1087919",
    "end": "1094720"
  },
  {
    "text": "memory and it makes them close together in code so when I'm doing a code audit I can look at it and I can be like okay",
    "start": "1094720",
    "end": "1100760"
  },
  {
    "text": "cool I have my Alec here where do I free this variable I literally like on the next line I do it the defer keyword",
    "start": "1100760",
    "end": "1106919"
  },
  {
    "text": "allows this piece of code to be Rand when the function scope is about to go out so when i r when I run defer this",
    "start": "1106919",
    "end": "1113440"
  },
  {
    "text": "actually effectively puts this line of code at the bottom of the code but it puts it up here so I can mentally associate that this is tied to this",
    "start": "1113440",
    "end": "1120919"
  },
  {
    "text": "which I like so you have to write an allocator for every object no you write you there's general purpose allocators there specific type of allocators",
    "start": "1120919",
    "end": "1127600"
  },
  {
    "text": "there's a whole slew of different allocators but uh you can even use a",
    "start": "1127600",
    "end": "1132880"
  },
  {
    "text": "gpsy uh C allocator all that kind of stuff but the the the the big the big butt in this one",
    "start": "1132880",
    "end": "1139520"
  },
  {
    "text": "is that and it's something I really like which is all objects created on the Heap",
    "start": "1139520",
    "end": "1145600"
  },
  {
    "text": "are known at programming time to me that's really important because that's one thing that you have to learn about",
    "start": "1145600",
    "end": "1151360"
  },
  {
    "text": "rust which is you have to know which ones are on the Heap and which ones are on the stack so when you do in Rust when",
    "start": "1151360",
    "end": "1158840"
  },
  {
    "text": "you do a string is that on the Heap or on the stack when you do an RC is that Heap or stack right like you learn all",
    "start": "1158840",
    "end": "1163919"
  },
  {
    "text": "these things and it's not hard to learn but you have to you still have to know",
    "start": "1163919",
    "end": "1169559"
  },
  {
    "text": "these things you have to walk through it and learn each one of these things one at a time which is very interesting you",
    "start": "1169559",
    "end": "1176919"
  },
  {
    "text": "know so that means if you do a a a ref an RC ref cell string which would make no sense by the",
    "start": "1176919",
    "end": "1183520"
  },
  {
    "text": "way but let's just pretend you did an RC ref cell string you'd have to kind of you know you'd have to you'd have to",
    "start": "1183520",
    "end": "1188640"
  },
  {
    "text": "you'd have to know where like how many heaps are you on you know so it does make you have to think about things a",
    "start": "1188640",
    "end": "1194000"
  },
  {
    "text": "little bit whereas uh whereas with Zig you know all the things that are allocated which I think is really",
    "start": "1194000",
    "end": "1199280"
  },
  {
    "text": "important I do like that I like I actually really do like that Paradigm I think it's a it's nice I think rust",
    "start": "1199280",
    "end": "1204840"
  },
  {
    "text": "makes it feel nice the problem with rust is that it makes you feel like you're programming a high level language but",
    "start": "1204840",
    "end": "1210520"
  },
  {
    "text": "you're not you're programming a low-level language and I think that that's a that mentality is a bit of a foot gun for those that are uh",
    "start": "1210520",
    "end": "1217520"
  },
  {
    "text": "uninitiated like a lot the next big thing that I was a really big fan of is the errors as values feature of Zig now",
    "start": "1217520",
    "end": "1224080"
  },
  {
    "text": "if you've written any rust you have the result type the okay type the error type right where the result is a en that",
    "start": "1224080",
    "end": "1230600"
  },
  {
    "text": "allows you to basically return either an okay which is good value or an error",
    "start": "1230600",
    "end": "1235720"
  },
  {
    "text": "which is bad value and then handle the output via pattern matching Zig is a very verbose language where you are",
    "start": "1235720",
    "end": "1243280"
  },
  {
    "text": "required to not only use all the variables that you uh you you name but also you're required to handle all the",
    "start": "1243280",
    "end": "1250039"
  },
  {
    "text": "errors that you get right so effectively this open file function has this return type what this return type actually",
    "start": "1250039",
    "end": "1255960"
  },
  {
    "text": "means is pretty interesting and I I love the notation of this on the right of this exclamation point you have the",
    "start": "1255960",
    "end": "1261480"
  },
  {
    "text": "return type when it's a good value so the correct return type is this if there is a return error to be returned this is",
    "start": "1261480",
    "end": "1269039"
  },
  {
    "text": "the error type right so that's equivalent to result standard FS file",
    "start": "1269039",
    "end": "1274720"
  },
  {
    "text": "comma standard FS file open error like this is this is this is you can think of",
    "start": "1274720",
    "end": "1279880"
  },
  {
    "text": "it effectively the same and so what we're able to do is we're able to run the open file function and effectively",
    "start": "1279880",
    "end": "1285279"
  },
  {
    "text": "think of it like we go left or we go right in the case of we go left the open file good value the standard FS file is",
    "start": "1285279",
    "end": "1293600"
  },
  {
    "text": "put into F easy that's awesome if you go to the right we're able to check to see okay we've caught that we're in a file",
    "start": "1293600",
    "end": "1300480"
  },
  {
    "text": "open error error and that type has different subtypes and we're able to print them out via basic pattern",
    "start": "1300480",
    "end": "1306120"
  },
  {
    "text": "matching I think it's really cool I think it's a way for you to be forced to handle every error case of your program",
    "start": "1306120",
    "end": "1312840"
  },
  {
    "text": "which in languages like C for example like a lot of the times you don't even have to check the return value you can just say like open and then if it's good",
    "start": "1312840",
    "end": "1319400"
  },
  {
    "text": "it's good but if not it can crash like it doesn't like no one cares uh so I like this a lot it's true you just like",
    "start": "1319400",
    "end": "1325080"
  },
  {
    "text": "what's your air no what's what's the a know like I do I air a know was a",
    "start": "1325080",
    "end": "1330880"
  },
  {
    "text": "problem okay can we all agree that air know was a problem open sets up",
    "start": "1330880",
    "end": "1336200"
  },
  {
    "text": "shoot right so no more okay value so uh really you don't think so I dud okay so",
    "start": "1336200",
    "end": "1342159"
  },
  {
    "text": "at one point Arno was probably really great I'm sure of it but you know what's way better is not having Global wears my",
    "start": "1342159",
    "end": "1350080"
  },
  {
    "text": "error okay you know what I prefer local wears my error okay you know I'm not in",
    "start": "1350080",
    "end": "1355480"
  },
  {
    "text": "here I'm just not in it you know what I mean I'm not in it hey thanks first time chatter for your CBD heals autism and",
    "start": "1355480",
    "end": "1361640"
  },
  {
    "text": "psychosis and epileps I appreciate your very insightful firsttime chatting that",
    "start": "1361640",
    "end": "1367159"
  },
  {
    "text": "sounds fantastic do you have a product I can purchase is this a CBD",
    "start": "1367159",
    "end": "1373799"
  },
  {
    "text": "commercial I used to have autism until I took CB",
    "start": "1374320",
    "end": "1379520"
  },
  {
    "text": "you know we have to give some uh Java some credit to arrive at this uh throws do we I don't I don't well I mean yes we",
    "start": "1379520",
    "end": "1387880"
  },
  {
    "text": "can give Java the credit I just don't want it I just don't want any throwing that's why I like this this is I love",
    "start": "1387880",
    "end": "1393480"
  },
  {
    "text": "this this is good you have to handle your errors handle your errors baby this is good CBD is actually a a new Js",
    "start": "1393480",
    "end": "1400400"
  },
  {
    "text": "framework oh CBD JS it's it's it's like THC JS just more legal and this last",
    "start": "1400400",
    "end": "1409279"
  },
  {
    "text": "part I think is really you don't get as much spaghetti code interesting you know zigg is not explicitly a memory safe",
    "start": "1409279",
    "end": "1415720"
  },
  {
    "text": "language like you can do the traditional thing where in one function you create an object and then you return a",
    "start": "1415720",
    "end": "1421720"
  },
  {
    "text": "reference to that object and then when the stack goes out of scope you have a reference to a dangling pointer right like that that kind of thing is allowed",
    "start": "1421720",
    "end": "1428360"
  },
  {
    "text": "in Zig but what I do like about Zig is that it gives you things that SM that's",
    "start": "1428360",
    "end": "1433679"
  },
  {
    "text": "good I I mean in some sense to me that's good I do like the fact that if you're using using a systems level language you",
    "start": "1433679",
    "end": "1440240"
  },
  {
    "text": "should have I I do think there is something to be said about systems level controls in system level languages a SME",
    "start": "1440240",
    "end": "1447520"
  },
  {
    "text": "I do think I think there is something very foot gun's good well no what I mean is that you can do what you need to do I",
    "start": "1447520",
    "end": "1453080"
  },
  {
    "text": "don't think I mean obviously that is bad like it I would love it if it prevents it there's probably some sort of warning",
    "start": "1453080",
    "end": "1458200"
  },
  {
    "text": "like I mean even C has a warning right like hey um dog you're returning a reference to a stack allocated VAR like",
    "start": "1458200",
    "end": "1465320"
  },
  {
    "text": "you sure you want to do this you know like I I don't think this is a good idea I don't think this is a good idea right",
    "start": "1465320",
    "end": "1471760"
  },
  {
    "text": "I like that shared mutable data is important yeah I I actually do agree with this what I do like about Zig is",
    "start": "1471760",
    "end": "1476960"
  },
  {
    "text": "that it gives you things that smell or like taste like memory safety uh that prevent a lot of very simple bugs like",
    "start": "1476960",
    "end": "1483360"
  },
  {
    "text": "for example I have the dump hex function which is doing the basic you know print out the data as as hex and what I'm",
    "start": "1483360",
    "end": "1488919"
  },
  {
    "text": "doing is right now I create a chunk and the chunk is always the same size right",
    "start": "1488919",
    "end": "1494080"
  },
  {
    "text": "right now the chunk size this is super cool by the way I don't know what I don't know what is but this is",
    "start": "1494080",
    "end": "1499240"
  },
  {
    "text": "super cool I've never found one this is super cool what you're about to see I think this two and I have a little bit of an edge case where basically I'm able",
    "start": "1499240",
    "end": "1505360"
  },
  {
    "text": "to index outside of a chunk where the value is undefined if the size of the file is odd right so if I have a file",
    "start": "1505360",
    "end": "1512640"
  },
  {
    "text": "that is 51 bytes on that last iteration I've only read in one bite of data and I",
    "start": "1512640",
    "end": "1518000"
  },
  {
    "text": "can iterate into the second bite so basically I have a very basic out of bounds uh right access now in a language",
    "start": "1518000",
    "end": "1523880"
  },
  {
    "text": "like C this would just be okay we'd just be all right with this happening there'd be really no I me there's a way to check it we could we can make sure that we do",
    "start": "1523880",
    "end": "1529960"
  },
  {
    "text": "the math and and do the calculations to determine if we're outside of the array bounds but in Zig when I run this code there is a runtime Panic it can see",
    "start": "1529960",
    "end": "1537440"
  },
  {
    "text": "despite not being explicitly memory safe that I am indexing one the value one so",
    "start": "1537440",
    "end": "1542600"
  },
  {
    "text": "I have line of one into a slice that is length one right and so instead of giving me some weird seg faults where",
    "start": "1542600",
    "end": "1549399"
  },
  {
    "text": "it's doing an array access that the OS can see it's going to throw an error at this level and you know this is a much",
    "start": "1549399",
    "end": "1556720"
  },
  {
    "text": "safer way to crash right then you know potentially going outside of the array bounds I like like C would let you do",
    "start": "1556720",
    "end": "1562559"
  },
  {
    "text": "now what I'm not saying is that you shouldn't learn C what I'm not saying is that you shouldn't learn rust you should",
    "start": "1562559",
    "end": "1567880"
  },
  {
    "text": "learn C you should learn rust and you should learn Zig like I think everyone should learn all the things I think learning is the way that you",
    "start": "1567880",
    "end": "1576120"
  },
  {
    "text": "become I like that I like that quite a bit better not only developer but a better person in general now that being",
    "start": "1579000",
    "end": "1584640"
  },
  {
    "text": "said if you have limited time I think obviously you should be picking one and choice you make just depends on what you",
    "start": "1584640",
    "end": "1590399"
  },
  {
    "text": "want to do if you want to be a systems level programmer You know despite the movement towards rust things are still",
    "start": "1590399",
    "end": "1596399"
  },
  {
    "text": "written in C and if you want to get a little bit and the nice part is that Zig really compiles well with C A lot of",
    "start": "1596399",
    "end": "1601760"
  },
  {
    "text": "people are actually building their build tools for C in Zig just because it's so good it's like so dang good it's like",
    "start": "1601760",
    "end": "1607440"
  },
  {
    "text": "Zig is so good at this that that area that the new the next no more make files",
    "start": "1607440",
    "end": "1614840"
  },
  {
    "text": "no more cake just use Zig bit of a taste of what I think the future of coding looks like and what sa",
    "start": "1614840",
    "end": "1620760"
  },
  {
    "text": "software looks like try Zig and try rust I do have courses at low lev. Academy go check that out link description below if",
    "start": "1620760",
    "end": "1626559"
  },
  {
    "text": "you want to follow along with me on my journey and figuring out my thoughts my additional thoughts on Zig go follow me on Twitch I stream there like once a",
    "start": "1626559",
    "end": "1632960"
  },
  {
    "text": "week if you like this video do me a favor hit like hit subscribe and then go check out this video we'll see you next time guys I appreciate it liked boom",
    "start": "1632960",
    "end": "1639360"
  },
  {
    "text": "let's go um okay there's one thing he didn't cover so I I kind of like I kind of want to take like almost an inverse",
    "start": "1639360",
    "end": "1645000"
  },
  {
    "text": "take on some of the things he said um some things that I really like about Zig",
    "start": "1645000",
    "end": "1650200"
  },
  {
    "text": "Zig also has the like optionals right uh I think long as yeah there we go so you",
    "start": "1650200",
    "end": "1657720"
  },
  {
    "text": "can actually say like hey this thing could be null and for you to be able to have it you could actually like this so",
    "start": "1657720",
    "end": "1663600"
  },
  {
    "text": "you get you get syntax available for options but it's not as heavy-handed as",
    "start": "1663600",
    "end": "1670320"
  },
  {
    "text": "rust and it's also able you can also do like an if statement right so uh let's see if they have a capture group there",
    "start": "1670320",
    "end": "1675559"
  },
  {
    "text": "you go here's a great example you can do an optional of five and then if B then",
    "start": "1675559",
    "end": "1681159"
  },
  {
    "text": "you capture out the internal value and to me this is you know I know there's like if let some x equals your option",
    "start": "1681159",
    "end": "1689640"
  },
  {
    "text": "that this just feels less heavy-handed it feels pretty nice like I I think that a lot of things with Zig is is like",
    "start": "1689640",
    "end": "1696240"
  },
  {
    "text": "almost rust it's like you're almost to rust but it's a little bit L it's a",
    "start": "1696240",
    "end": "1701919"
  },
  {
    "text": "little bit less and it makes really nice oh I forgot the let if if I forgot the if let yeah if you forget the let you",
    "start": "1701919",
    "end": "1707799"
  },
  {
    "text": "will spend spend like a minute going what the what the hell is this air what have I done right syntactic sugar that",
    "start": "1707799",
    "end": "1713399"
  },
  {
    "text": "makes sense this is really there's there's like a lot of really nice little features of Zig that make it super",
    "start": "1713399",
    "end": "1719000"
  },
  {
    "text": "compelling and it's something that I it's why I really want to to to look more into it and then another thing that",
    "start": "1719000",
    "end": "1724279"
  },
  {
    "text": "is just I think is just genuinely Superior is comp time is like super super duper in interesting it's just",
    "start": "1724279",
    "end": "1731679"
  },
  {
    "text": "really bizarre like right here running a Fibonacci Sequence at comp a compile time right so when we compile it runs",
    "start": "1731679",
    "end": "1738880"
  },
  {
    "text": "this and you get you get that you get the value out X at compile time is the",
    "start": "1738880",
    "end": "1745720"
  },
  {
    "text": "result of this Fibonacci Sequence comp time is super super interesting because comp time you can also Define types",
    "start": "1745720",
    "end": "1751279"
  },
  {
    "text": "let's see if they have any example of this uh I would just like to see this there you go a vector a vector is now",
    "start": "1751279",
    "end": "1756799"
  },
  {
    "text": "going to have some like cool things inside of it so you can actually create your own Vector right I want a vector of",
    "start": "1756799",
    "end": "1762399"
  },
  {
    "text": "size three this is now a a compile time look at that you have a compile time with how manye El are inside your vector",
    "start": "1762399",
    "end": "1769640"
  },
  {
    "text": "and the type like to to me that's like that's super cool so it's like it's almost rust macros but you don't have to",
    "start": "1769640",
    "end": "1776399"
  },
  {
    "text": "have a doctorate in sin instead you can have comp time which is just writing Zig you're just writing Zig so you get to",
    "start": "1776399",
    "end": "1782240"
  },
  {
    "text": "write Zig without all of the macro nonsense right because if you really want to get good at at rust and you",
    "start": "1782240",
    "end": "1789159"
  },
  {
    "text": "really want to understand a a doctorate in no not that kind of sin not sin n uh s Sy YN syntax it's like their crate for",
    "start": "1789159",
    "end": "1796600"
  },
  {
    "text": "being able to do procedural macros procedural macros are like pretty tough right it's it's it's it's",
    "start": "1796600",
    "end": "1804200"
  },
  {
    "text": "it's procedural macros are definitely like your level three learning of rust",
    "start": "1804200",
    "end": "1809640"
  },
  {
    "text": "you you you first have to start off like learning syntax borrow Checker and all that level two is like you have to go",
    "start": "1809640",
    "end": "1815799"
  },
  {
    "text": "learn async and lifetimes and then level three is like proc",
    "start": "1815799",
    "end": "1821200"
  },
  {
    "text": "macros and proc macros are really really difficult um yeah I've never play I I haven't done",
    "start": "1821200",
    "end": "1827720"
  },
  {
    "text": "any deep with Zig yet uh but this is just super compelling cuz it's like I want to be able to write generic",
    "start": "1827720",
    "end": "1834080"
  },
  {
    "text": "structures in a way that makes a lot of sense to me and that seems pretty cool",
    "start": "1834080",
    "end": "1839200"
  },
  {
    "text": "this seems pretty dang cool because it's it's it's just Zig you just write Zig to",
    "start": "1839200",
    "end": "1844360"
  },
  {
    "text": "execute a compile time to produce Zig yeah once you by the way also when you turn level three uh uh uh rust station",
    "start": "1844360",
    "end": "1851559"
  },
  {
    "text": "you also have to dye your hair blue it's one of the requirements I hate to tell you this it's just one of the requirements okay so now for the second",
    "start": "1851559",
    "end": "1858080"
  },
  {
    "text": "half which I said I'm going to bring on low-l learning and we're going to chat for a moment I'm calling him right now",
    "start": "1858080",
    "end": "1863600"
  },
  {
    "text": "sorry it's just part of it I I'm sorry it's it's can I just shave my head instead no you can't shave your head you cannot shave your head it's not it's not",
    "start": "1863600",
    "end": "1870120"
  },
  {
    "text": "allowed in the rust in the rust area you have to keep your hair no matter what its balding state is okay so if you're",
    "start": "1870120",
    "end": "1877279"
  },
  {
    "text": "if you're if you're going deep in the back and your Homer ssing like you got a Homer Simpson you know that's it did",
    "start": "1877279",
    "end": "1883559"
  },
  {
    "text": "low-l learning just like dip right now I should have his phone number and I just call him and be like hey hey get out of",
    "start": "1883559",
    "end": "1891559"
  },
  {
    "text": "here I called it the Mr Clean so C++ doesn't exist C++ doesn't",
    "start": "1891559",
    "end": "1897360"
  },
  {
    "text": "exist C++ okay flip you got to take this intermediate part out but C++ I will say",
    "start": "1897360",
    "end": "1902720"
  },
  {
    "text": "that with the introduction of unique pointers you can write nicer code in C++",
    "start": "1902720",
    "end": "1908600"
  },
  {
    "text": "hey hey what's up this is incorrect hold on a minute I know I can't see you yeah I got the uh OBS virtual cam going on go",
    "start": "1908600",
    "end": "1918120"
  },
  {
    "text": "like that boom and oh nice no video in a good time today I don't know why",
    "start": "1918120",
    "end": "1923639"
  },
  {
    "text": "it's not working yeah are we going to going to cooperate hey there it is did you just say are we going to cooperate",
    "start": "1923639",
    "end": "1929240"
  },
  {
    "text": "the computer yeah Oh I thought you're saying like me and you I was like called collaborate oh nobody calls it co",
    "start": "1929240",
    "end": "1936559"
  },
  {
    "text": "cooperate dude I can barely read English Okay so even if I said that I apologize",
    "start": "1936559",
    "end": "1941720"
  },
  {
    "text": "okay I I believe I beat you on the barely read English dude I haven't finished a book in over actually",
    "start": "1941720",
    "end": "1947960"
  },
  {
    "text": "finished a book before that it was a couple years so I'm like kind of illiterate functionally functionally speaking you're kind of illiterate mhm",
    "start": "1947960",
    "end": "1954360"
  },
  {
    "text": "that's okay hold on I'm trying to um okay I'm G to show this hopefully there's nothing there you go I actually have this already preset out there you",
    "start": "1954360",
    "end": "1960559"
  },
  {
    "text": "go look on dude hey hey how's it going all right so you just got we just got done watching that video which I liked a",
    "start": "1960559",
    "end": "1966320"
  },
  {
    "text": "lot of it there's a lot of stuff that was really cool about it um I think you know what do you think is the primary",
    "start": "1966320",
    "end": "1973159"
  },
  {
    "text": "reason for learning Zig I know you kind of said it but I I don't know if I I really feel the thing you said or maybe",
    "start": "1973159",
    "end": "1978799"
  },
  {
    "text": "you try to like make it too tight what what do you think is the primary purpose of learning Zig yeah I mean so you have",
    "start": "1978799",
    "end": "1984000"
  },
  {
    "text": "to understand it from from my perspective right I am a security researcher and I'm trying to get to a world where people just naturally write",
    "start": "1984000",
    "end": "1990639"
  },
  {
    "text": "safer code and a lot of the time you have this thing where the argument is oh it's a skill issue like people who just",
    "start": "1990639",
    "end": "1996360"
  },
  {
    "text": "get better uh will write better C and you know I think that's true to a certain extent but it ignores like the",
    "start": "1996360",
    "end": "2003000"
  },
  {
    "text": "human factors aspect of programming where like new people are GNA come in they're going to not know how to code",
    "start": "2003000",
    "end": "2009080"
  },
  {
    "text": "and they're going to write production code that goes out so how do we create a language that just naturally allows for",
    "start": "2009080",
    "end": "2014360"
  },
  {
    "text": "safer code and the quick answer is rust obviously right but I think rust has a lot of systemic issues or like like",
    "start": "2014360",
    "end": "2021559"
  },
  {
    "text": "parts of the language that make it very difficult for a new programmer to get into um whereas Zig I feel like has the",
    "start": "2021559",
    "end": "2028279"
  },
  {
    "text": "same like Flavor of of rust and like goes languages uh where it is safer but",
    "start": "2028279",
    "end": "2034159"
  },
  {
    "text": "because of the lack of a borrow Checker and a little more freedom that you get versus rust it's just easier to get into",
    "start": "2034159",
    "end": "2039840"
  },
  {
    "text": "so in terms of like choosing like the best first language I think for me Zig is more and more uh getting there in my",
    "start": "2039840",
    "end": "2046679"
  },
  {
    "text": "head I still think you should learn c um but in terms of like production code I think Zig has a special place or should",
    "start": "2046679",
    "end": "2052520"
  },
  {
    "text": "in the future I do I do want to double tap a little bit on that rust statement you made you said that effectively that",
    "start": "2052520",
    "end": "2057760"
  },
  {
    "text": "rust is really hard to get into as a beginner I the thing about my my general take of the rust learning curve is that",
    "start": "2057760",
    "end": "2063800"
  },
  {
    "text": "it starts out hard it gets easy and then it re gets harder not easier it actually gets",
    "start": "2063800",
    "end": "2069638"
  },
  {
    "text": "significantly harder the moment you start jumping into async and you start jumping into any application that's of",
    "start": "2069639",
    "end": "2074720"
  },
  {
    "text": "some certain level now there's people that just build like rust web ends and all they are are just like taking a you",
    "start": "2074720",
    "end": "2080760"
  },
  {
    "text": "know you use axom or actic and you write a basic like crud end point and it",
    "start": "2080760",
    "end": "2085919"
  },
  {
    "text": "actually works really well in Rust because all of that abstraction and difficulty has been hidden away you don't even really realize you're on some",
    "start": "2085919",
    "end": "2092398"
  },
  {
    "text": "sort of like you don't even know what thread you're running on or anything it just it just works and you're just like oh this was pretty easy but I feel like",
    "start": "2092399",
    "end": "2098240"
  },
  {
    "text": "the moment you try to write those things it's excessively difficult and generics",
    "start": "2098240",
    "end": "2103560"
  },
  {
    "text": "can get really really really hard working with trait objects and generics is like it it is non-trivial and people",
    "start": "2103560",
    "end": "2110760"
  },
  {
    "text": "think it's trivial and then it goes to a third level and then a fourth level and I feel like the difficulty of rust is a",
    "start": "2110760",
    "end": "2115920"
  },
  {
    "text": "lifelong learning process and for me that's kind of like a big issue is that",
    "start": "2115920",
    "end": "2121000"
  },
  {
    "text": "if you're not if you're developing something that's simple I feel like rust can be pretty fun and easy and you'll be",
    "start": "2121000",
    "end": "2127839"
  },
  {
    "text": "successful in fact I would argue that you would be even more successful basic kind of like churn in your product and",
    "start": "2127839",
    "end": "2133400"
  },
  {
    "text": "you're not you're still not developing something hard it's just like a lot of churn I still think rust is a pretty good language to choose sure but if you",
    "start": "2133400",
    "end": "2139040"
  },
  {
    "text": "have to do the things yourself I'm just I I just don't buy that rust is a I think rust suffers from the same skill",
    "start": "2139040",
    "end": "2144920"
  },
  {
    "text": "issues that c does if you just got better at rust it you'd be better it' be easier it's just skill issues and it's",
    "start": "2144920",
    "end": "2151000"
  },
  {
    "text": "just like is it yeah is it skill issues I think at the end of the day I think you need to put in hard work regardless",
    "start": "2151000",
    "end": "2157880"
  },
  {
    "text": "right I think like every language like you're going to encounter some amount of of uh of inertia where like you are not",
    "start": "2157880",
    "end": "2163280"
  },
  {
    "text": "going to get better until you push through this wall um but I think in Rust it's the wall enables language",
    "start": "2163280",
    "end": "2170440"
  },
  {
    "text": "functionality and in C the skill issue is security you can publish pre skill",
    "start": "2170440",
    "end": "2176920"
  },
  {
    "text": "issue code and see it's much harder to publish pre- skill issue rust if that makes sense um that's fair yeah I mean",
    "start": "2176920",
    "end": "2182800"
  },
  {
    "text": "it's easy to create like a memory leak I actually created a memory leak and and broke but but even in Rust I think like you can create memory leaks in Rust but",
    "start": "2182800",
    "end": "2189440"
  },
  {
    "text": "you can't create memory disclosure leaks in Rust right like the idea of like leaking the Heap to a user that",
    "start": "2189440",
    "end": "2195359"
  },
  {
    "text": "shouldn't have that Heap data is very difficult and then on the topic of I agree with you in terms of rust right Le I got I did some Rust code on Twitch um",
    "start": "2195359",
    "end": "2202560"
  },
  {
    "text": "I built like an HTTP server is very simple and I'm like oh rust like actually isn't that bad like you just you know you create some structs you",
    "start": "2202560",
    "end": "2208040"
  },
  {
    "text": "create some traits you write some functions for those traits and you're good to go uh but then I went on further and I tried to do embedded rust using uh",
    "start": "2208040",
    "end": "2214920"
  },
  {
    "text": "Artic it's an OS that's like a framework for the STM chipset in Rust and of edit",
    "start": "2214920",
    "end": "2221359"
  },
  {
    "text": "it yeah it immediately gets like exponentially harder where it's like suddenly you're dealing with lifetimes",
    "start": "2221359",
    "end": "2228400"
  },
  {
    "text": "and trying to take peripherals from a chip and then you want to give other parts of that peripheral to a different",
    "start": "2228400",
    "end": "2233880"
  },
  {
    "text": "function and you can't pass those around very well so like I agree like it's it's deceivingly easy at the beginning and",
    "start": "2233880",
    "end": "2240880"
  },
  {
    "text": "then it very quickly ramps up and it's like oh if I want to do real code with this like it's going to get a lot harder",
    "start": "2240880",
    "end": "2246160"
  },
  {
    "text": "again you could put the timing and get better at rust so I do I do agree that the skill isso this on both ends but I think if you want to get to code that's",
    "start": "2246160",
    "end": "2252359"
  },
  {
    "text": "like you can you can publish it um rust has a little bit steeper of a curve than c yeah uh what so so with that and you",
    "start": "2252359",
    "end": "2260880"
  },
  {
    "text": "said Zig is easier do you think the same skill issues I mean can you even make those arguments with zigg like hey you",
    "start": "2260880",
    "end": "2268000"
  },
  {
    "text": "know oh for you to be able to build a high performance HTTP server I feel like that would be excessively difficult like",
    "start": "2268000",
    "end": "2274599"
  },
  {
    "text": "what axom has done in Rust would take me a year of just doing it full-time to be",
    "start": "2274599",
    "end": "2279920"
  },
  {
    "text": "able to probably get to that point yes so full disclosure I didn't use any of the libraries in Rust I just I like raw",
    "start": "2279920",
    "end": "2285760"
  },
  {
    "text": "dog like take TCP socket parse HTTP 1.1 headers send the data right so like very",
    "start": "2285760",
    "end": "2291240"
  },
  {
    "text": "Bic nurses ju what what's that registered nurses what what is that what",
    "start": "2291240",
    "end": "2297079"
  },
  {
    "text": "slrn slrn okay I was like what we talking about right now I know my God a",
    "start": "2297079",
    "end": "2302480"
  },
  {
    "text": "bunch of a bunch of registered nurses in my packets yeah dude uh and it was it was pretty simple right then the minute",
    "start": "2302480",
    "end": "2307920"
  },
  {
    "text": "you get anything more complicated it's it's tough um and what that did is it gave you access to like learning the network API learning how to parse like",
    "start": "2307920",
    "end": "2314319"
  },
  {
    "text": "do basic string iterator stuff like that yeah because the entire protocol is registered nurses right um and I think",
    "start": "2314319",
    "end": "2319800"
  },
  {
    "text": "in Zig it would be similarly simple and I think simpler because he wouldn't have a lot of the borrowing issues now",
    "start": "2319800",
    "end": "2325280"
  },
  {
    "text": "granted in in that scenario there's not like a bar a lot of borrowing that can happen that can go wrong right you literally pass around a single request",
    "start": "2325280",
    "end": "2331880"
  },
  {
    "text": "structure to multiple functions de encapsulate it re encapsulate their response and go from there um and I think zig",
    "start": "2331880",
    "end": "2338119"
  },
  {
    "text": "would just be a little more straightforward CU it feels more like C less like rust where rust has kind of",
    "start": "2338119",
    "end": "2344920"
  },
  {
    "text": "like you know that there are weird edge cases you're going to run into I didn't get that sensation when I coded in Zig that being said though Zig is um much",
    "start": "2344920",
    "end": "2352240"
  },
  {
    "text": "more verbose of a language where like you have to use all your variables you have to handle every error type you know",
    "start": "2352240",
    "end": "2357800"
  },
  {
    "text": "what I mean whereas like you could go right C don't have that issue and I think even rust is more permissive than",
    "start": "2357800",
    "end": "2364599"
  },
  {
    "text": "go than Zig is in terms of like the the variable use policies yeah you get a warning I believe instead of a uh eror",
    "start": "2364599",
    "end": "2371240"
  },
  {
    "text": "you get a hey unused variable warning and then you can just you can just prefix it with an underscore yeah right",
    "start": "2371240",
    "end": "2376760"
  },
  {
    "text": "but that's the thing like that's why I like Zig so much is it forces you to think through your air handling schemes",
    "start": "2376760",
    "end": "2382240"
  },
  {
    "text": "from the get-go like it does not let you get away with I mean that's not true you can do the the try statement in Zig just",
    "start": "2382240",
    "end": "2388359"
  },
  {
    "text": "like you have the dot on wrap in Rust right so I mean like you can AR the same though those aren't the same aren't they",
    "start": "2388359",
    "end": "2393640"
  },
  {
    "text": "pretty similar no nothing is similar unwrap panics if if if it's an error try",
    "start": "2393640",
    "end": "2398960"
  },
  {
    "text": "returns no try Returns the error up one level one level try is more equivalent",
    "start": "2398960",
    "end": "2404280"
  },
  {
    "text": "try is much more equivalent to the question mark oh I see okay you're running everything in main so it makes sense that it like the end if if you",
    "start": "2404280",
    "end": "2412000"
  },
  {
    "text": "were to put it one function uh uh inside you would actually get more like uh the question mark operator it just lifts the",
    "start": "2412000",
    "end": "2417920"
  },
  {
    "text": "air one one level interesting no that's a good point okay yeah catch is so cool",
    "start": "2417920",
    "end": "2423160"
  },
  {
    "text": "too because you have because Russ doesn't have syntax for catch right you have to like match you have to do",
    "start": "2423160",
    "end": "2428720"
  },
  {
    "text": "something right and so it's actually pretty it's pretty interesting and also like catch unreachable is is the",
    "start": "2428720",
    "end": "2434520"
  },
  {
    "text": "equivalent of unwrap you're effectively saying like this is in like it's an infallible operation you cannot you",
    "start": "2434520",
    "end": "2440760"
  },
  {
    "text": "cannot can get here if you do you yeah and that's why like the error typing system right like you have effectively you have the return type that says like",
    "start": "2440760",
    "end": "2446400"
  },
  {
    "text": "go left go right and then the left is a good case right's a bad case that's where all the the catch pattern matching happens so yeah like like you're saying",
    "start": "2446400",
    "end": "2452960"
  },
  {
    "text": "it allows you to give kind of two paths in your code to go down one the good path one the bad path whereas rust you have this weird kind of mixing of the",
    "start": "2452960",
    "end": "2459680"
  },
  {
    "text": "two based on the way that the matching statement Works um so yeah they do have some convenient functions they have like and thens and maps and all that stuff",
    "start": "2459680",
    "end": "2466359"
  },
  {
    "text": "it's that and okay a lot of people just will just dot okay because that just makes it uh you don't have to handle the",
    "start": "2466359",
    "end": "2472079"
  },
  {
    "text": "air at all it turns into an option and you can just ignore options yeah just forget forget that option forget about",
    "start": "2472079",
    "end": "2477880"
  },
  {
    "text": "it we didn't see that it's all good forget about it yeah so it's interesting have you done much uh async Zig mm no I",
    "start": "2477880",
    "end": "2485839"
  },
  {
    "text": "have not done muchen done nor async rust so that's kind of my next thing is to explore the async",
    "start": "2485839",
    "end": "2492640"
  },
  {
    "text": "uh async Frameworks in particular I'm going to start doing Embassy in uh in Russ because that's the async framework",
    "start": "2492640",
    "end": "2498240"
  },
  {
    "text": "for embedded so I figure you know jump into the deep end see see what that feels like yeah yeah yeah yeah okay okay",
    "start": "2498240",
    "end": "2503720"
  },
  {
    "text": "because once you go async you go Arc mutex all day baby and that's where I heard kind of rust decomposes right it's",
    "start": "2503720",
    "end": "2510119"
  },
  {
    "text": "like once you have the arc mut Texas it's like okay are we still in rust or are we doing some other weird meta",
    "start": "2510119",
    "end": "2515160"
  },
  {
    "text": "language right yeah well it's very interesting because you one thing that I I really like about not rust is that you",
    "start": "2515160",
    "end": "2522640"
  },
  {
    "text": "can have a mutex like say on an object and you can lock and unlock it where you kind of wish to lock it and unlock it",
    "start": "2522640",
    "end": "2529520"
  },
  {
    "text": "right you get the choice of saying hey this is a controlled mutation under this mutex whereas with rust you just you",
    "start": "2529520",
    "end": "2534760"
  },
  {
    "text": "just that cannot be an option you have to put more or less items underneath a mutex or you have to protect a singular",
    "start": "2534760",
    "end": "2541400"
  },
  {
    "text": "property or you have to lift all the properties you want to access out into some sort of rewrite uh m text which I",
    "start": "2541400",
    "end": "2547680"
  },
  {
    "text": "find to be very um it can be very cumbersome whereas counter it is",
    "start": "2547680",
    "end": "2553680"
  },
  {
    "text": "counterintuitive and I feel like it's it just is a giant performance foot gun where it's like you can actually for the",
    "start": "2553680",
    "end": "2559160"
  },
  {
    "text": "most part just be like I know exactly what I do and don't want to mutate you know in parallel on this object so for",
    "start": "2559160",
    "end": "2564319"
  },
  {
    "text": "the most part I can just like rip through everything and then these couple ones are all controlled by one mutex but it's like you have to like uplift things",
    "start": "2564319",
    "end": "2570359"
  },
  {
    "text": "and the struct it's it's just more trixy that's kind of my My Philosophy and I think it stems from the fact that",
    "start": "2570359",
    "end": "2576359"
  },
  {
    "text": "I'm like a huge control freak right so like I feel like Zig gives me the control that I want and I have like the",
    "start": "2576359",
    "end": "2581480"
  },
  {
    "text": "very explicit knowledge of what is going on and that's their whole memory model right is like they're trying to avoid",
    "start": "2581480",
    "end": "2586559"
  },
  {
    "text": "the world of GBC ghost allocations like every allocation that happens in the program is an allocation that you wrote",
    "start": "2586559",
    "end": "2591720"
  },
  {
    "text": "and same thing with the mutexes and the like everything that is done is because you decided to do it explicitly whereas",
    "start": "2591720",
    "end": "2597319"
  },
  {
    "text": "in Russ I think a lot of those features even in a compiled systems language gets kind of lifted like the mutex example um",
    "start": "2597319",
    "end": "2603760"
  },
  {
    "text": "which I'm not the biggest fan of and again my whole philosophy on learning is like you have to know what is going on under the hood and when you create those",
    "start": "2603760",
    "end": "2610359"
  },
  {
    "text": "kind of abstractions it kind of I think it adds too much fairy dust that takes away from learning process in my opinion",
    "start": "2610359",
    "end": "2616240"
  },
  {
    "text": "so C can you do someone's asking about ghost allocations can you give like a brief uh what is what what is a ghost allocation how does it happen can you",
    "start": "2616240",
    "end": "2622599"
  },
  {
    "text": "give a yeah I mean so C is the you know when it was designed it was built to be an abstraction from assembly right you",
    "start": "2622599",
    "end": "2628800"
  },
  {
    "text": "have to do everything you know explicitly like when you make a variable allocation that just creates an assembly blob right to make room on the stack um",
    "start": "2628800",
    "end": "2635599"
  },
  {
    "text": "a ghost allocation is a thing in GBC where you know the GBC runtime is",
    "start": "2635599",
    "end": "2641599"
  },
  {
    "text": "creating memory allocations without your permission in the background right like if you do a scanf call for example right",
    "start": "2641599",
    "end": "2647040"
  },
  {
    "text": "the scanf call just reads in memory to a buffer and returns that into the buffer that you pointed to um but the memory",
    "start": "2647040",
    "end": "2653200"
  },
  {
    "text": "that it's used to actually buffer it before it outputs it is allocated in gipc right so it's an allocation that happened that you didn't ask for um and",
    "start": "2653200",
    "end": "2660000"
  },
  {
    "text": "that happens all over the place in libc and is used to uh you know like there are ways you can exploit that from a",
    "start": "2660000",
    "end": "2666000"
  },
  {
    "text": "security standpoint like a lot of Heap exploits have to do with abusing memory that is allocated for you in the GBC",
    "start": "2666000",
    "end": "2672000"
  },
  {
    "text": "runtime um whereas Zig it doesn't do any of that like to make an allocation if if memory is allocated in Zig it's because",
    "start": "2672000",
    "end": "2679119"
  },
  {
    "text": "you told it to there's no other memory getting allocated which I think is a cool feature because you can kind of predict more reasonably what your",
    "start": "2679119",
    "end": "2685520"
  },
  {
    "text": "function is going to do what your code is going to do okay okay uh one one more question uh when it comes to learning",
    "start": "2685520",
    "end": "2691160"
  },
  {
    "text": "and all this do you think that rust you know I'm not going to say the word masquerading but uh you know like saying",
    "start": "2691160",
    "end": "2697559"
  },
  {
    "text": "hey we are a systems level language do you think the fact that you don't ever really think about allocations as kind",
    "start": "2697559",
    "end": "2703520"
  },
  {
    "text": "of your initial pass do you think that hurts learning the system levels thought process meaning that when I create a",
    "start": "2703520",
    "end": "2709599"
  },
  {
    "text": "string I don't think necessarily this thing is now pointing to the Heap I mean I know you should understand these",
    "start": "2709599",
    "end": "2715559"
  },
  {
    "text": "things and how the difference between you know a stir and a string versus like an RC or a ref cell like all these",
    "start": "2715559",
    "end": "2721760"
  },
  {
    "text": "things like what do you think about that cuz that's like it's like the polar opposite of Zig Zig is like every allocation you know you've made whereas",
    "start": "2721760",
    "end": "2728240"
  },
  {
    "text": "Russ it's like every allocation we're not going to tell you because we're going to also drop it for you yeah I mean I don't think it hurts the learning",
    "start": "2728240",
    "end": "2734040"
  },
  {
    "text": "process in in the short term I think like abstractions are valuable because otherwise I would just say good code in",
    "start": "2734040",
    "end": "2739240"
  },
  {
    "text": "assembly right you know what I mean like oh if abstractions are bad just go learn how to like build silicon to build a computer um subtractions are good but I",
    "start": "2739240",
    "end": "2745920"
  },
  {
    "text": "think if you if you want to truly understand it's important to go back like the circle back and go learn like",
    "start": "2745920",
    "end": "2752400"
  },
  {
    "text": "the difference between a stir and a string like how slices are actually working under the hood how that affects borrowing and all that stuff so does it",
    "start": "2752400",
    "end": "2758680"
  },
  {
    "text": "hurt learning no um but is it hurtful to ignore those abstractions I think yes in",
    "start": "2758680",
    "end": "2764800"
  },
  {
    "text": "the long run very cool very cool uh any last thoughts on Zig any last things you want to yeah it's cool man it's a good",
    "start": "2764800",
    "end": "2772240"
  },
  {
    "text": "language um I'm having fun with it trying to learn it myself uh I think the only major issue right now and I read a",
    "start": "2772240",
    "end": "2778280"
  },
  {
    "text": "lot of this on Reddit is the uh documentation like it's not great there I mean there are docs right there's like",
    "start": "2778280",
    "end": "2783720"
  },
  {
    "text": "you can go read the the the standard Library docs but in terms of like examples that show you me like",
    "start": "2783720",
    "end": "2789880"
  },
  {
    "text": "implementation it's kind of in a weird spot right now that being said it's it's pre 1.0 so it's in it's still in a very",
    "start": "2789880",
    "end": "2795480"
  },
  {
    "text": "early like Alpha is stage I give them a lot of credit for that um but no man it's it's really really cool and I think",
    "start": "2795480",
    "end": "2800880"
  },
  {
    "text": "it's going to have a really unique position kind of in between C and rust that'll help people learn systems",
    "start": "2800880",
    "end": "2806119"
  },
  {
    "text": "programming without relying on c as like their first language so yeah man that's about it all right I like it I like it",
    "start": "2806119",
    "end": "2813160"
  },
  {
    "text": "well hey thanks for being on here I like the video people should subscribe to you anything else any other Shilling you",
    "start": "2813160",
    "end": "2818559"
  },
  {
    "text": "would like to do any other Shilling oh I I will shill away my guy yeah I mean so hey if you don't know who I am I do uh",
    "start": "2818559",
    "end": "2823960"
  },
  {
    "text": "videos about security and software security and programming in General on YouTube I stream on Twitch and if you",
    "start": "2823960",
    "end": "2829200"
  },
  {
    "text": "want to learn C I have a site called Low level. Academy I teach C there it's a good time come come learn C with me over",
    "start": "2829200",
    "end": "2834920"
  },
  {
    "text": "there um boom boom that's it but yeah man I appreciate you having me on thanks for watching the video and uh let's uh",
    "start": "2834920",
    "end": "2840559"
  },
  {
    "text": "let's do more stuff yeah I do want to do I I want to do more stuff cool oh also I bought some coffee I'm I'm looking",
    "start": "2840559",
    "end": "2846359"
  },
  {
    "text": "forward to it I'm going to roast it but yeah it's this is our this is our very first batch uh I I think we're we're",
    "start": "2846359",
    "end": "2852920"
  },
  {
    "text": "looking to switch uh we're looking to switch some roaster and kind of think about other ways of doing things so we",
    "start": "2852920",
    "end": "2858400"
  },
  {
    "text": "we we got we got a lot of work left to do on that because it's all non-trivial so oh yeah dud the fact you guys are even shipping physical products I'm",
    "start": "2858400",
    "end": "2864559"
  },
  {
    "text": "impressed with because like most online sales are like oh drop ship like pay money and then I call Alibaba and they",
    "start": "2864559",
    "end": "2869599"
  },
  {
    "text": "send you a thing you guys are like literally pouring the coffee into the bags like it's a you got a real operation going on over there it's solid",
    "start": "2869599",
    "end": "2875480"
  },
  {
    "text": "dude we're trying to understand things at a fundamental level and then going from there and and trying to you know",
    "start": "2875480",
    "end": "2881000"
  },
  {
    "text": "make it into something but we'll see we'll see how it works cool I'm excited to try it bye-bye later brother all",
    "start": "2881000",
    "end": "2887200"
  },
  {
    "text": "right there we go that was awesome I like low-level learning he's great he's great guy uh Hey the name the name is",
    "start": "2887200",
    "end": "2893359"
  },
  {
    "text": "low-level fan oh aen lowl fanen lowlevel fanen F Fen",
    "start": "2893359",
    "end": "2900960"
  }
]