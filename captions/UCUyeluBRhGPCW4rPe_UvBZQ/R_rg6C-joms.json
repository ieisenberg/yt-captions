[
  {
    "text": "typescript is surprisingly okay for",
    "start": "0",
    "end": "2700"
  },
  {
    "text": "compilers my general thought is that",
    "start": "2700",
    "end": "4380"
  },
  {
    "text": "they're going to be talking about the",
    "start": "4380",
    "end": "5279"
  },
  {
    "text": "type system and it's the fact that you",
    "start": "5279",
    "end": "7379"
  },
  {
    "text": "could just do these basic like Union",
    "start": "7379",
    "end": "9000"
  },
  {
    "text": "types type discrimination right you kind",
    "start": "9000",
    "end": "11460"
  },
  {
    "text": "of have tagged unions in in typescript",
    "start": "11460",
    "end": "14099"
  },
  {
    "text": "you know what I mean you kind of have it",
    "start": "14099",
    "end": "15599"
  },
  {
    "text": "you just have like a type that's a",
    "start": "15599",
    "end": "17279"
  },
  {
    "text": "string I use it all the time it's also",
    "start": "17279",
    "end": "18840"
  },
  {
    "text": "kind of a pain in the ass uh there are",
    "start": "18840",
    "end": "20340"
  },
  {
    "text": "two main historical trends when choosing",
    "start": "20340",
    "end": "22140"
  },
  {
    "text": "an implementation language for something",
    "start": "22140",
    "end": "23880"
  },
  {
    "text": "compiler shaped for the for more",
    "start": "23880",
    "end": "26460"
  },
  {
    "text": "language sector tasks like a formal",
    "start": "26460",
    "end": "28560"
  },
  {
    "text": "specification or a toy hobby language oh",
    "start": "28560",
    "end": "30359"
  },
  {
    "text": "camel makes most sense let's go oh camel",
    "start": "30359",
    "end": "33660"
  },
  {
    "text": "we got an old camel shield in the house",
    "start": "33660",
    "end": "36559"
  },
  {
    "text": "uh for example see plazoo uh webassembly",
    "start": "36559",
    "end": "39719"
  },
  {
    "text": "reference interpreter for something uh",
    "start": "39719",
    "end": "42059"
  },
  {
    "text": "implementation Centric and production",
    "start": "42059",
    "end": "43559"
  },
  {
    "text": "ready C plus is often chosen llvm clang",
    "start": "43559",
    "end": "47340"
  },
  {
    "text": "V8 hotspot are all C plus plus these",
    "start": "47340",
    "end": "50879"
  },
  {
    "text": "days rust is a great new addition to the",
    "start": "50879",
    "end": "52440"
  },
  {
    "text": "landscape it is influenced most directly",
    "start": "52440",
    "end": "54239"
  },
  {
    "text": "by ML and C plus combines their",
    "start": "54239",
    "end": "56460"
  },
  {
    "text": "strengths and even brings something new",
    "start": "56460",
    "end": "57780"
  },
  {
    "text": "of its own to the table like seamless",
    "start": "57780",
    "end": "60000"
  },
  {
    "text": "safe Fearless concurrency uh still Russ",
    "start": "60000",
    "end": "63480"
  },
  {
    "text": "leans heavily towards production",
    "start": "63480",
    "end": "64799"
  },
  {
    "text": "Readiness side of the spectrum",
    "start": "64799",
    "end": "66900"
  },
  {
    "text": "classic I believe what I just heard here",
    "start": "66900",
    "end": "69360"
  },
  {
    "text": "is that production Readiness spectrum is",
    "start": "69360",
    "end": "72060"
  },
  {
    "text": "how far away you are from Haskell so",
    "start": "72060",
    "end": "74220"
  },
  {
    "text": "what I'm what I'm truly hearing from",
    "start": "74220",
    "end": "75960"
  },
  {
    "text": "this is that that there's this thing",
    "start": "75960",
    "end": "78840"
  },
  {
    "text": "called Haskell it is in the center this",
    "start": "78840",
    "end": "81600"
  },
  {
    "text": "means you are not ready for production",
    "start": "81600",
    "end": "85100"
  },
  {
    "text": "then there's like you know then you got",
    "start": "85100",
    "end": "88140"
  },
  {
    "text": "like I don't know you got like some lisp",
    "start": "88140",
    "end": "89640"
  },
  {
    "text": "in here maybe some o camel and now",
    "start": "89640",
    "end": "93060"
  },
  {
    "text": "you're really not ready for production",
    "start": "93060",
    "end": "94880"
  },
  {
    "text": "then you have like rust",
    "start": "94880",
    "end": "98579"
  },
  {
    "text": "right and now you're pretty close to",
    "start": "98579",
    "end": "100619"
  },
  {
    "text": "production okay and then on the outside",
    "start": "100619",
    "end": "102659"
  },
  {
    "text": "you have like C plus plus uh you have",
    "start": "102659",
    "end": "105540"
  },
  {
    "text": "typescript you have go you got like and",
    "start": "105540",
    "end": "109439"
  },
  {
    "text": "you got python you got like all the",
    "start": "109439",
    "end": "111720"
  },
  {
    "text": "languages out here these are production",
    "start": "111720",
    "end": "114060"
  },
  {
    "text": "ready systems okay it's kind of like",
    "start": "114060",
    "end": "116640"
  },
  {
    "text": "Idaho or not Idaho Ohio you're either in",
    "start": "116640",
    "end": "120659"
  },
  {
    "text": "Ohio you're threatened near Ohio or",
    "start": "120659",
    "end": "123960"
  },
  {
    "text": "you're just in disillusionment that",
    "start": "123960",
    "end": "125700"
  },
  {
    "text": "you're not threatened by Ohio this is",
    "start": "125700",
    "end": "127380"
  },
  {
    "text": "pretty much the same thing except with",
    "start": "127380",
    "end": "128580"
  },
  {
    "text": "functional programming at the heart of",
    "start": "128580",
    "end": "129899"
  },
  {
    "text": "it so Haskell being the least production",
    "start": "129899",
    "end": "131400"
  },
  {
    "text": "ready go C plus plus typescript and",
    "start": "131400",
    "end": "133739"
  },
  {
    "text": "python being the most production ready",
    "start": "133739",
    "end": "135900"
  },
  {
    "text": "you get the idea I think you guys get",
    "start": "135900",
    "end": "138000"
  },
  {
    "text": "the idea while some aspects of it just",
    "start": "138000",
    "end": "140700"
  },
  {
    "text": "like or like uh just works build system",
    "start": "140700",
    "end": "143220"
  },
  {
    "text": "help with prototyping as well there's",
    "start": "143220",
    "end": "145620"
  },
  {
    "text": "still extra complexity due to uh attacks",
    "start": "145620",
    "end": "147959"
  },
  {
    "text": "due to the necessity to model physical",
    "start": "147959",
    "end": "150260"
  },
  {
    "text": "uh layout of data the usual advice when",
    "start": "150260",
    "end": "153540"
  },
  {
    "text": "you start building a compiler in Rust is",
    "start": "153540",
    "end": "155879"
  },
  {
    "text": "to avoid pointers and use indexes oh",
    "start": "155879",
    "end": "157980"
  },
  {
    "text": "yeah I've really always hated that I'm",
    "start": "157980",
    "end": "160319"
  },
  {
    "text": "not going to lie to you the whole like",
    "start": "160319",
    "end": "161700"
  },
  {
    "text": "use indexes for everything in Rust to be",
    "start": "161700",
    "end": "164519"
  },
  {
    "text": "able to do anything with like tree",
    "start": "164519",
    "end": "166080"
  },
  {
    "text": "shaped or graph shaped data it's just",
    "start": "166080",
    "end": "168480"
  },
  {
    "text": "such a pain in the ass because now you",
    "start": "168480",
    "end": "170580"
  },
  {
    "text": "have to like you just it's just extra",
    "start": "170580",
    "end": "172980"
  },
  {
    "text": "data you have to keep around that has to",
    "start": "172980",
    "end": "174900"
  },
  {
    "text": "be updated and any mutations can cause",
    "start": "174900",
    "end": "176640"
  },
  {
    "text": "Oddities and all that kind of stuff",
    "start": "176640",
    "end": "178280"
  },
  {
    "text": "indexes are great no they're not in",
    "start": "178280",
    "end": "182220"
  },
  {
    "text": "large code bases they allow greater",
    "start": "182220",
    "end": "184140"
  },
  {
    "text": "decoupling side tables can stay local to",
    "start": "184140",
    "end": "186780"
  },
  {
    "text": "relevant modules improving performance",
    "start": "186780",
    "end": "189060"
  },
  {
    "text": "and index is a u32 and nudge you towards",
    "start": "189060",
    "end": "191340"
  },
  {
    "text": "a struct of a raise layout okay I agree",
    "start": "191340",
    "end": "193620"
  },
  {
    "text": "with this The Entity component system",
    "start": "193620",
    "end": "195540"
  },
  {
    "text": "style great we're on team",
    "start": "195540",
    "end": "198420"
  },
  {
    "text": "I'm on that team",
    "start": "198420",
    "end": "200640"
  },
  {
    "text": "sort of uh a more flexible computational",
    "start": "200640",
    "end": "203040"
  },
  {
    "text": "strategies indexes are easier easier to",
    "start": "203040",
    "end": "205080"
  },
  {
    "text": "serialize or plug into incremental",
    "start": "205080",
    "end": "207060"
  },
  {
    "text": "compilation Frameworks but they do make",
    "start": "207060",
    "end": "208920"
  },
  {
    "text": "programming in the small significantly",
    "start": "208920",
    "end": "210599"
  },
  {
    "text": "more annoying which is a deal breaker",
    "start": "210599",
    "end": "213000"
  },
  {
    "text": "for hobbyist tinkering uh well I mean",
    "start": "213000",
    "end": "215280"
  },
  {
    "text": "the problem is if they're programming in",
    "start": "215280",
    "end": "217800"
  },
  {
    "text": "the small the problem is that your",
    "start": "217800",
    "end": "219900"
  },
  {
    "text": "program is one large programming in the",
    "start": "219900",
    "end": "222120"
  },
  {
    "text": "small",
    "start": "222120",
    "end": "222840"
  },
  {
    "text": "like at the end of the day it's just one",
    "start": "222840",
    "end": "225299"
  },
  {
    "text": "big ass programming in the small and so",
    "start": "225299",
    "end": "227340"
  },
  {
    "text": "you just deal with indices like until",
    "start": "227340",
    "end": "229799"
  },
  {
    "text": "you can do the wrapping interface around",
    "start": "229799",
    "end": "231599"
  },
  {
    "text": "it to where you don't know about the",
    "start": "231599",
    "end": "233040"
  },
  {
    "text": "indices like that entire thing is just",
    "start": "233040",
    "end": "235200"
  },
  {
    "text": "one",
    "start": "235200",
    "end": "236400"
  },
  {
    "text": "ass pain but o camel is crusty is it uh",
    "start": "236400",
    "end": "240599"
  },
  {
    "text": "is there something better is it is",
    "start": "240599",
    "end": "243000"
  },
  {
    "text": "really okayable crusty my brief",
    "start": "243000",
    "end": "245280"
  },
  {
    "text": "exploration into ocamel says that I",
    "start": "245280",
    "end": "247080"
  },
  {
    "text": "could be very excited about oh camel",
    "start": "247080",
    "end": "248700"
  },
  {
    "text": "sure I may not be using stuff in",
    "start": "248700",
    "end": "250680"
  },
  {
    "text": "production right we're pretty close to",
    "start": "250680",
    "end": "252060"
  },
  {
    "text": "Haskell at this point probably not",
    "start": "252060",
    "end": "253799"
  },
  {
    "text": "production right probably not going to",
    "start": "253799",
    "end": "256320"
  },
  {
    "text": "be using it for production but my small",
    "start": "256320",
    "end": "257820"
  },
  {
    "text": "little LSP file parser I really enjoyed",
    "start": "257820",
    "end": "260760"
  },
  {
    "text": "it like I genuinely enjoyed building",
    "start": "260760",
    "end": "262860"
  },
  {
    "text": "that a no camel uh today I realized that",
    "start": "262860",
    "end": "265080"
  },
  {
    "text": "typescript might actually be okay",
    "start": "265080",
    "end": "267360"
  },
  {
    "text": "question several question marks it is",
    "start": "267360",
    "end": "269520"
  },
  {
    "text": "not let's see",
    "start": "269520",
    "end": "270600"
  },
  {
    "text": "it it is okay sorry I'm sorry it said",
    "start": "270600",
    "end": "273960"
  },
  {
    "text": "typescript being okay",
    "start": "273960",
    "end": "275759"
  },
  {
    "text": "I'm having a hard time you know",
    "start": "275759",
    "end": "277259"
  },
  {
    "text": "processing that so my reading skills",
    "start": "277259",
    "end": "278880"
  },
  {
    "text": "just went down the window because just a",
    "start": "278880",
    "end": "280139"
  },
  {
    "text": "little bit earlier talked about like",
    "start": "280139",
    "end": "281880"
  },
  {
    "text": "just works build systems up here okay",
    "start": "281880",
    "end": "285180"
  },
  {
    "text": "you know it's emotional right I'm just",
    "start": "285180",
    "end": "287220"
  },
  {
    "text": "emotional for a second okay it is not",
    "start": "287220",
    "end": "289740"
  },
  {
    "text": "really surprising given how the language",
    "start": "289740",
    "end": "291300"
  },
  {
    "text": "works but it never occurred to me to",
    "start": "291300",
    "end": "292860"
  },
  {
    "text": "think about typescript as an ml",
    "start": "292860",
    "end": "294360"
  },
  {
    "text": "equivalent before so let's just write a",
    "start": "294360",
    "end": "296639"
  },
  {
    "text": "tiny tiny typescript type Checker in TS",
    "start": "296639",
    "end": "299100"
  },
  {
    "text": "uh of course so we start with Dino",
    "start": "299100",
    "end": "301759"
  },
  {
    "text": "everybody loves Dino am I wearing my",
    "start": "301759",
    "end": "304440"
  },
  {
    "text": "Dino hoodie",
    "start": "304440",
    "end": "306060"
  },
  {
    "text": "is this the dino hoodie no that's not a",
    "start": "306060",
    "end": "308100"
  },
  {
    "text": "dino hoodie",
    "start": "308100",
    "end": "309419"
  },
  {
    "text": "um uh see a love letter to dito oh wow",
    "start": "309419",
    "end": "313340"
  },
  {
    "text": "Dino I love you oh Dino",
    "start": "313340",
    "end": "318320"
  },
  {
    "text": "I would just like to let you know that I",
    "start": "319199",
    "end": "321720"
  },
  {
    "text": "think you are very very very very very",
    "start": "321720",
    "end": "323340"
  },
  {
    "text": "very beautiful",
    "start": "323340",
    "end": "326539"
  },
  {
    "text": "I'm not sure what just happened there",
    "start": "329820",
    "end": "331080"
  },
  {
    "text": "honestly I don't I don't I don't know",
    "start": "331080",
    "end": "332580"
  },
  {
    "text": "what just happened there",
    "start": "332580",
    "end": "334020"
  },
  {
    "text": "I think I made a mistake",
    "start": "334020",
    "end": "337280"
  },
  {
    "text": "[Music]",
    "start": "337470",
    "end": "341349"
  },
  {
    "text": "I agree with you I do I genuinely agree",
    "start": "345180",
    "end": "347940"
  },
  {
    "text": "with you Karen I will",
    "start": "347940",
    "end": "349860"
  },
  {
    "text": "not do that again okay",
    "start": "349860",
    "end": "353418"
  },
  {
    "text": "can you get up can you write a letter",
    "start": "354800",
    "end": "357060"
  },
  {
    "text": "for me and just say sorry",
    "start": "357060",
    "end": "359639"
  },
  {
    "text": "to all the five dollar a monthers for",
    "start": "359639",
    "end": "361740"
  },
  {
    "text": "what I just did",
    "start": "361740",
    "end": "363720"
  },
  {
    "text": "thank you Karen",
    "start": "363720",
    "end": "366050"
  },
  {
    "text": "[Music]",
    "start": "366050",
    "end": "370110"
  },
  {
    "text": "but the tldr is that Dino provides out",
    "start": "372780",
    "end": "375720"
  },
  {
    "text": "of the box experience for typescript uh",
    "start": "375720",
    "end": "377699"
  },
  {
    "text": "this is a pain point for o camel and",
    "start": "377699",
    "end": "379800"
  },
  {
    "text": "something that Russ does better uh than",
    "start": "379800",
    "end": "381539"
  },
  {
    "text": "either ocamel or C plus plus I'm pretty",
    "start": "381539",
    "end": "383400"
  },
  {
    "text": "sure oh camel at this point is pretty",
    "start": "383400",
    "end": "385380"
  },
  {
    "text": "much Straight Out of the Box isn't it",
    "start": "385380",
    "end": "389460"
  },
  {
    "text": "different",
    "start": "389460",
    "end": "390960"
  },
  {
    "text": "my wife does not know about my Dino face",
    "start": "390960",
    "end": "393060"
  },
  {
    "text": "okay she doesn't",
    "start": "393060",
    "end": "394919"
  },
  {
    "text": "um real talk I think because Dune and",
    "start": "394919",
    "end": "398460"
  },
  {
    "text": "opam just like you know you just install",
    "start": "398460",
    "end": "400259"
  },
  {
    "text": "what you need and you get running you",
    "start": "400259",
    "end": "401940"
  },
  {
    "text": "know what I mean but Dino does this",
    "start": "401940",
    "end": "403440"
  },
  {
    "text": "better than rust it's just a single",
    "start": "403440",
    "end": "405600"
  },
  {
    "text": "banary that comes with linting and",
    "start": "405600",
    "end": "407759"
  },
  {
    "text": "formatting there's no compilation step",
    "start": "407759",
    "end": "409500"
  },
  {
    "text": "and there are built-in task runners in",
    "start": "409500",
    "end": "412319"
  },
  {
    "text": "watch mode a dream setup for quick PLT",
    "start": "412319",
    "end": "415020"
  },
  {
    "text": "hacks okay okay fair I I see what he's",
    "start": "415020",
    "end": "417780"
  },
  {
    "text": "trying to say is that it's just so",
    "start": "417780",
    "end": "419220"
  },
  {
    "text": "simple there's no anything to it and",
    "start": "419220",
    "end": "421860"
  },
  {
    "text": "then there's typescript itself which uh",
    "start": "421860",
    "end": "423660"
  },
  {
    "text": "which it's sufficiently flexible yet",
    "start": "423660",
    "end": "425520"
  },
  {
    "text": "lightweight ceremony type system okay",
    "start": "425520",
    "end": "427979"
  },
  {
    "text": "that's a fun way to kind of describe",
    "start": "427979",
    "end": "430039"
  },
  {
    "text": "uh typescript",
    "start": "430039",
    "end": "432120"
  },
  {
    "text": "so that's a fun way I like that uh let's",
    "start": "432120",
    "end": "434400"
  },
  {
    "text": "start with defining an AST we're hacking",
    "start": "434400",
    "end": "436259"
  },
  {
    "text": "we won't uh be bothered to make it an ID",
    "start": "436259",
    "end": "438060"
  },
  {
    "text": "friendly concrete syntax tree or",
    "start": "438060",
    "end": "439860"
  },
  {
    "text": "incrementally friendly Only Store",
    "start": "439860",
    "end": "441599"
  },
  {
    "text": "relative offset Street uh and we'll just",
    "start": "441599",
    "end": "444539"
  },
  {
    "text": "tag AST nodes with the location okay so",
    "start": "444539",
    "end": "446880"
  },
  {
    "text": "there you go locations of file line",
    "start": "446880",
    "end": "448740"
  },
  {
    "text": "column even here we already see high",
    "start": "448740",
    "end": "450900"
  },
  {
    "text": "level nature of typescript string is",
    "start": "450900",
    "end": "452340"
  },
  {
    "text": "just a string there's no thinking about",
    "start": "452340",
    "end": "453780"
  },
  {
    "text": "the U size versus u32",
    "start": "453780",
    "end": "456360"
  },
  {
    "text": "okay can we all agree that this is just",
    "start": "456360",
    "end": "458340"
  },
  {
    "text": "the world's worst thing in the universe",
    "start": "458340",
    "end": "460979"
  },
  {
    "text": "technically correct the best kind of",
    "start": "460979",
    "end": "462780"
  },
  {
    "text": "correct",
    "start": "462780",
    "end": "464099"
  },
  {
    "text": "can we all agree that whenever like like",
    "start": "464099",
    "end": "467819"
  },
  {
    "text": "the LSP I'm dealing with right now when",
    "start": "467819",
    "end": "470280"
  },
  {
    "text": "you get an LSP message the line and",
    "start": "470280",
    "end": "473039"
  },
  {
    "text": "character offset is u32 so when you're",
    "start": "473039",
    "end": "475500"
  },
  {
    "text": "actually using it you have to convert it",
    "start": "475500",
    "end": "477180"
  },
  {
    "text": "to a u size use it and then you have to",
    "start": "477180",
    "end": "479759"
  },
  {
    "text": "go back the other way it's just so",
    "start": "479759",
    "end": "482039"
  },
  {
    "text": "annoying you're not even on this train",
    "start": "482039",
    "end": "483479"
  },
  {
    "text": "okay I can buy that usually an",
    "start": "483479",
    "end": "485099"
  },
  {
    "text": "expression is defined uh as a subtype as",
    "start": "485099",
    "end": "488099"
  },
  {
    "text": "we want to tag each expression with a",
    "start": "488099",
    "end": "489960"
  },
  {
    "text": "location that represents that would be",
    "start": "489960",
    "end": "491759"
  },
  {
    "text": "slightly inconvenient for us so we split",
    "start": "491759",
    "end": "493620"
  },
  {
    "text": "up things a bit location expression kind",
    "start": "493620",
    "end": "496380"
  },
  {
    "text": "perfect it's an interface uh always very",
    "start": "496380",
    "end": "499440"
  },
  {
    "text": "careful about interfaces because you can",
    "start": "499440",
    "end": "500759"
  },
  {
    "text": "actually do uh collisions export",
    "start": "500759",
    "end": "502379"
  },
  {
    "text": "expression kind as it's bull expression",
    "start": "502379",
    "end": "504419"
  },
  {
    "text": "int all this kind of stuff this can be",
    "start": "504419",
    "end": "506340"
  },
  {
    "text": "super annoying because that means your",
    "start": "506340",
    "end": "508020"
  },
  {
    "text": "expression has to be a tagged uh kind",
    "start": "508020",
    "end": "510780"
  },
  {
    "text": "like an expression Bool has to have an",
    "start": "510780",
    "end": "512880"
  },
  {
    "text": "expression I'm very doubtful of these",
    "start": "512880",
    "end": "514680"
  },
  {
    "text": "little T's in here these T's feeling",
    "start": "514680",
    "end": "516899"
  },
  {
    "text": "very worried about these T's you the",
    "start": "516899",
    "end": "519180"
  },
  {
    "text": "thing is is you feel like you're doing",
    "start": "519180",
    "end": "520620"
  },
  {
    "text": "the right thing with generics and",
    "start": "520620",
    "end": "521940"
  },
  {
    "text": "typescript and often they get so",
    "start": "521940",
    "end": "523440"
  },
  {
    "text": "unwielding you made such a mistake",
    "start": "523440",
    "end": "526800"
  },
  {
    "text": "one thing more as we're going for",
    "start": "526800",
    "end": "528600"
  },
  {
    "text": "something quick we'll be storing",
    "start": "528600",
    "end": "529920"
  },
  {
    "text": "inferred types directly in the AST nodes",
    "start": "529920",
    "end": "532019"
  },
  {
    "text": "uh still we want to keep raw raw dog and",
    "start": "532019",
    "end": "534720"
  },
  {
    "text": "type checked AST separate so what let's",
    "start": "534720",
    "end": "536700"
  },
  {
    "text": "see so what we are going uh to do here",
    "start": "536700",
    "end": "539040"
  },
  {
    "text": "is to parameterize the expression over",
    "start": "539040",
    "end": "541200"
  },
  {
    "text": "Associated data it stores a fresh parsed",
    "start": "541200",
    "end": "543540"
  },
  {
    "text": "expression would use void as data and",
    "start": "543540",
    "end": "546240"
  },
  {
    "text": "the type Checker will set it to type",
    "start": "546240",
    "end": "547920"
  },
  {
    "text": "here's what we get all right",
    "start": "547920",
    "end": "550680"
  },
  {
    "text": "we get the T expression type we got that",
    "start": "550680",
    "end": "553560"
  },
  {
    "text": "uh there we go a definition of Express",
    "start": "553560",
    "end": "555660"
  },
  {
    "text": "expression binary could look something",
    "start": "555660",
    "end": "557519"
  },
  {
    "text": "like this uh let's say we got a binary",
    "start": "557519",
    "end": "559680"
  },
  {
    "text": "operation left hand side right hand side",
    "start": "559680",
    "end": "561720"
  },
  {
    "text": "okay export binary op",
    "start": "561720",
    "end": "564240"
  },
  {
    "text": "all right so there you go here's the",
    "start": "564240",
    "end": "565740"
  },
  {
    "text": "type discriminator that I was talking",
    "start": "565740",
    "end": "566880"
  },
  {
    "text": "about by having the type discriminator",
    "start": "566880",
    "end": "568800"
  },
  {
    "text": "you have to have this and then you're",
    "start": "568800",
    "end": "570540"
  },
  {
    "text": "going to really fall into this problem",
    "start": "570540",
    "end": "571920"
  },
  {
    "text": "with like T has to be a pretty danger",
    "start": "571920",
    "end": "573899"
  },
  {
    "text": "generic here export binary off which is",
    "start": "573899",
    "end": "576600"
  },
  {
    "text": "going to be added blah blah blah blah",
    "start": "576600",
    "end": "578160"
  },
  {
    "text": "blah",
    "start": "578160",
    "end": "579240"
  },
  {
    "text": "oh wait a second this isn't type hold on",
    "start": "579240",
    "end": "581880"
  },
  {
    "text": "this isn't typed oh this makes it really",
    "start": "581880",
    "end": "584820"
  },
  {
    "text": "interesting because this is not type",
    "start": "584820",
    "end": "586320"
  },
  {
    "text": "discriminated",
    "start": "586320",
    "end": "587640"
  },
  {
    "text": "this is a non-type discriminated uh",
    "start": "587640",
    "end": "589680"
  },
  {
    "text": "piece of data which means that when",
    "start": "589680",
    "end": "591600"
  },
  {
    "text": "you're checking you can't directly check",
    "start": "591600",
    "end": "593580"
  },
  {
    "text": "is bull expression right there's no",
    "start": "593580",
    "end": "596399"
  },
  {
    "text": "operation here or there's no type that",
    "start": "596399",
    "end": "598019"
  },
  {
    "text": "says is Bool is Boo is booling is",
    "start": "598019",
    "end": "602690"
  },
  {
    "text": "[Music]",
    "start": "602690",
    "end": "604519"
  },
  {
    "text": "Boolean uh note that I don't introduce",
    "start": "604519",
    "end": "607380"
  },
  {
    "text": "separate types for each uh add",
    "start": "607380",
    "end": "608700"
  },
  {
    "text": "expression sub-expression all binary",
    "start": "608700",
    "end": "610320"
  },
  {
    "text": "Expressions have the same shape so one",
    "start": "610320",
    "end": "612240"
  },
  {
    "text": "type is enough",
    "start": "612240",
    "end": "613800"
  },
  {
    "text": "sorry I just got stuck on Bully and",
    "start": "613800",
    "end": "616980"
  },
  {
    "text": "uh but we need a tiny adjustment here",
    "start": "616980",
    "end": "619440"
  },
  {
    "text": "our expression kind is a diff is defined",
    "start": "619440",
    "end": "621720"
  },
  {
    "text": "as a union type to match our value of a",
    "start": "621720",
    "end": "624060"
  },
  {
    "text": "union type a bit of runtime type",
    "start": "624060",
    "end": "625800"
  },
  {
    "text": "information is needed",
    "start": "625800",
    "end": "628760"
  },
  {
    "text": "got him got em",
    "start": "629240",
    "end": "633360"
  },
  {
    "text": "I'd like I could see it to the Future",
    "start": "633360",
    "end": "635160"
  },
  {
    "text": "this is where you say uh pre-read you",
    "start": "635160",
    "end": "639000"
  },
  {
    "text": "you say you say pre-rent this is come on",
    "start": "639000",
    "end": "641399"
  },
  {
    "text": "please your supposed you're supposed to",
    "start": "641399",
    "end": "644640"
  },
  {
    "text": "not believe anything I say that's like",
    "start": "644640",
    "end": "647100"
  },
  {
    "text": "your job chat that's not my job okay",
    "start": "647100",
    "end": "650519"
  },
  {
    "text": "thank you it's kind of ridiculous that",
    "start": "650519",
    "end": "653399"
  },
  {
    "text": "you guys are just assuming I know",
    "start": "653399",
    "end": "655860"
  },
  {
    "text": "everything",
    "start": "655860",
    "end": "656940"
  },
  {
    "text": "um however it's one of the core uh",
    "start": "656940",
    "end": "659100"
  },
  {
    "text": "properties of typescript that it doesn't",
    "start": "659100",
    "end": "660480"
  },
  {
    "text": "add any runtime behaviors so if we want",
    "start": "660480",
    "end": "662519"
  },
  {
    "text": "to match one expression kinds uh and we",
    "start": "662519",
    "end": "664860"
  },
  {
    "text": "sure want uh and and for sure we want uh",
    "start": "664860",
    "end": "668160"
  },
  {
    "text": "we want to give a helping hand to the",
    "start": "668160",
    "end": "669600"
  },
  {
    "text": "compiler uh include a bit of run time",
    "start": "669600",
    "end": "672959"
  },
  {
    "text": "titty information manually",
    "start": "672959",
    "end": "675839"
  },
  {
    "text": "um runtime type information that's what",
    "start": "675839",
    "end": "677700"
  },
  {
    "text": "it stands for it definitely stands for",
    "start": "677700",
    "end": "679079"
  },
  {
    "text": "runtime type information definitely that",
    "start": "679079",
    "end": "682560"
  },
  {
    "text": "rehearsed on uh tag binary let's go tag",
    "start": "682560",
    "end": "685260"
  },
  {
    "text": "binary means that it's only possible",
    "start": "685260",
    "end": "686459"
  },
  {
    "text": "runtime value for uh tag is a string",
    "start": "686459",
    "end": "689100"
  },
  {
    "text": "binary yep",
    "start": "689100",
    "end": "691140"
  },
  {
    "text": "uh similar to various binary Expressions",
    "start": "691140",
    "end": "693440"
  },
  {
    "text": "Boolean illiteral and literal",
    "start": "693440",
    "end": "696660"
  },
  {
    "text": "Expressions have almost identical shape",
    "start": "696660",
    "end": "698399"
  },
  {
    "text": "almost because the payload Boolean and",
    "start": "698399",
    "end": "700680"
  },
  {
    "text": "the number is different typescript",
    "start": "700680",
    "end": "702120"
  },
  {
    "text": "allows us to neatly abstract over bend",
    "start": "702120",
    "end": "704459"
  },
  {
    "text": "the bam oh this is where it's starting",
    "start": "704459",
    "end": "706320"
  },
  {
    "text": "to get this is where things are starting",
    "start": "706320",
    "end": "707880"
  },
  {
    "text": "to get a little bit goofy you're going",
    "start": "707880",
    "end": "709260"
  },
  {
    "text": "to start making you're gonna start",
    "start": "709260",
    "end": "710579"
  },
  {
    "text": "making some",
    "start": "710579",
    "end": "712019"
  },
  {
    "text": "you're gonna start hating your life",
    "start": "712019",
    "end": "713160"
  },
  {
    "text": "where's T used",
    "start": "713160",
    "end": "714540"
  },
  {
    "text": "where the hell's t",
    "start": "714540",
    "end": "717440"
  },
  {
    "text": "why is there no t wait what is t",
    "start": "718399",
    "end": "722700"
  },
  {
    "text": "'s not even used here uh finally the",
    "start": "722700",
    "end": "725880"
  },
  {
    "text": "flow of the control flow Expressions we",
    "start": "725880",
    "end": "727740"
  },
  {
    "text": "uh only add if uh for now",
    "start": "727740",
    "end": "730560"
  },
  {
    "text": "is T Phantom type",
    "start": "730560",
    "end": "732660"
  },
  {
    "text": "what's T Phantom type",
    "start": "732660",
    "end": "734880"
  },
  {
    "text": "you're a phantom type",
    "start": "734880",
    "end": "737040"
  },
  {
    "text": "I mean it's it's a literal type",
    "start": "737040",
    "end": "739980"
  },
  {
    "text": "it's definitely being used it's not",
    "start": "739980",
    "end": "741720"
  },
  {
    "text": "Phantom data there's no I don't think",
    "start": "741720",
    "end": "743579"
  },
  {
    "text": "there's a phantom data in typescript",
    "start": "743579",
    "end": "746100"
  },
  {
    "text": "uh maybe I'm wrong here uh I okay hey to",
    "start": "746100",
    "end": "749820"
  },
  {
    "text": "be completely real though just to be",
    "start": "749820",
    "end": "751380"
  },
  {
    "text": "completely real the Tia silent classic",
    "start": "751380",
    "end": "753779"
  },
  {
    "text": "Tia silent I don't really understand",
    "start": "753779",
    "end": "755940"
  },
  {
    "text": "what Phantom data is I know it's used on",
    "start": "755940",
    "end": "758640"
  },
  {
    "text": "one cell or not one cell uh but it it",
    "start": "758640",
    "end": "761399"
  },
  {
    "text": "it's it's used in a ref cell and and",
    "start": "761399",
    "end": "766560"
  },
  {
    "text": "maybe one cell and all these other ones",
    "start": "766560",
    "end": "768480"
  },
  {
    "text": "I don't really know what it means okay I",
    "start": "768480",
    "end": "769920"
  },
  {
    "text": "know that there's Phantom data I don't",
    "start": "769920",
    "end": "771959"
  },
  {
    "text": "know what it does though okay real talk",
    "start": "771959",
    "end": "773459"
  },
  {
    "text": "I don't know what it does TJ I hope",
    "start": "773459",
    "end": "774959"
  },
  {
    "text": "you're ready for this",
    "start": "774959",
    "end": "776220"
  },
  {
    "text": "um",
    "start": "776220",
    "end": "777180"
  },
  {
    "text": "finally uh flow control Expressions uh",
    "start": "777180",
    "end": "779100"
  },
  {
    "text": "all right looks good flow control",
    "start": "779100",
    "end": "780360"
  },
  {
    "text": "Expressions if expert is if here's the",
    "start": "780360",
    "end": "783420"
  },
  {
    "text": "expression then Branch else Branch oh",
    "start": "783420",
    "end": "785639"
  },
  {
    "text": "what about if then Branch",
    "start": "785639",
    "end": "788579"
  },
  {
    "text": "um shouldn't this be like an array of",
    "start": "788579",
    "end": "789839"
  },
  {
    "text": "those I don't know how this works uh",
    "start": "789839",
    "end": "791339"
  },
  {
    "text": "this concludes the definition of the AST",
    "start": "791339",
    "end": "792959"
  },
  {
    "text": "let's move on to type inference uh",
    "start": "792959",
    "end": "795000"
  },
  {
    "text": "starts with types all right type equals",
    "start": "795000",
    "end": "796920"
  },
  {
    "text": "type Boolean or type int okay Bool type",
    "start": "796920",
    "end": "800940"
  },
  {
    "text": "Boolean",
    "start": "800940",
    "end": "802740"
  },
  {
    "text": "um cons tag Bool type interface and take",
    "start": "802740",
    "end": "805320"
  },
  {
    "text": "int tag equals this type let's go okay",
    "start": "805320",
    "end": "808320"
  },
  {
    "text": "by the way I hate this I want you to",
    "start": "808320",
    "end": "810899"
  },
  {
    "text": "know right now I hate this what you're",
    "start": "810899",
    "end": "812399"
  },
  {
    "text": "doing right here makes it such a pain in",
    "start": "812399",
    "end": "814920"
  },
  {
    "text": "the ass sometimes there's all sorts of",
    "start": "814920",
    "end": "817079"
  },
  {
    "text": "problems with typescript when you name",
    "start": "817079",
    "end": "818399"
  },
  {
    "text": "them the same thing our types really are",
    "start": "818399",
    "end": "820740"
  },
  {
    "text": "really simple uh we could have gone with",
    "start": "820740",
    "end": "823200"
  },
  {
    "text": "this but let's do a bit more uh more",
    "start": "823200",
    "end": "825660"
  },
  {
    "text": "enterprising then we start by defining",
    "start": "825660",
    "end": "827279"
  },
  {
    "text": "different uh types for integers and",
    "start": "827279",
    "end": "828839"
  },
  {
    "text": "Boolean types as these types are",
    "start": "828839",
    "end": "831360"
  },
  {
    "text": "Singleton so we also provide canonical",
    "start": "831360",
    "end": "833160"
  },
  {
    "text": "definitions and here are another",
    "start": "833160",
    "end": "834420"
  },
  {
    "text": "typescript ISM because typescript fully",
    "start": "834420",
    "end": "836399"
  },
  {
    "text": "erases types everything related to types",
    "start": "836399",
    "end": "838320"
  },
  {
    "text": "lives in a separate namespace so you can",
    "start": "838320",
    "end": "840420"
  },
  {
    "text": "have a type and value sharing the same",
    "start": "840420",
    "end": "842339"
  },
  {
    "text": "name which is exactly what we want to do",
    "start": "842339",
    "end": "844399"
  },
  {
    "text": "we're used for defined single tense I",
    "start": "844399",
    "end": "846660"
  },
  {
    "text": "know you can but it can be such a pain",
    "start": "846660",
    "end": "848639"
  },
  {
    "text": "sometimes especially if they're not it",
    "start": "848639",
    "end": "850560"
  },
  {
    "text": "could just be a pain finally we take",
    "start": "850560",
    "end": "852120"
  },
  {
    "text": "advantage because like there's this one",
    "start": "852120",
    "end": "854040"
  },
  {
    "text": "problem where people sometimes will not",
    "start": "854040",
    "end": "855480"
  },
  {
    "text": "export the type but export the constant",
    "start": "855480",
    "end": "857339"
  },
  {
    "text": "and then you can't have the type but",
    "start": "857339",
    "end": "859079"
  },
  {
    "text": "from your functions you export the type",
    "start": "859079",
    "end": "861240"
  },
  {
    "text": "sometimes typescript gets goofed up on",
    "start": "861240",
    "end": "863220"
  },
  {
    "text": "which one is it trying to export from a",
    "start": "863220",
    "end": "864899"
  },
  {
    "text": "function the interface or the concrete",
    "start": "864899",
    "end": "867180"
  },
  {
    "text": "type I've had just all sorts of problems",
    "start": "867180",
    "end": "868740"
  },
  {
    "text": "with it finally we can take advantage of",
    "start": "868740",
    "end": "870180"
  },
  {
    "text": "our Associated data parameterized",
    "start": "870180",
    "end": "871620"
  },
  {
    "text": "expression and write the signature of",
    "start": "871620",
    "end": "874019"
  },
  {
    "text": "infer types all right",
    "start": "874019",
    "end": "876839"
  },
  {
    "text": "as it says uh on the tin enter types",
    "start": "876839",
    "end": "880500"
  },
  {
    "text": "fill let's see fills in a type",
    "start": "880500",
    "end": "882240"
  },
  {
    "text": "information into the void let's define",
    "start": "882240",
    "end": "884100"
  },
  {
    "text": "the details okay uh let's see infer",
    "start": "884100",
    "end": "887459"
  },
  {
    "text": "types we got this one it comes in with",
    "start": "887459",
    "end": "889500"
  },
  {
    "text": "this thing uh expression contact case",
    "start": "889500",
    "end": "891839"
  },
  {
    "text": "Cass cast me Daddy",
    "start": "891839",
    "end": "894300"
  },
  {
    "text": "all right there we go we have all these",
    "start": "894300",
    "end": "896339"
  },
  {
    "text": "nice little these right here there's one",
    "start": "896339",
    "end": "898560"
  },
  {
    "text": "problem though what we really want is",
    "start": "898560",
    "end": "900060"
  },
  {
    "text": "something like uh inferred type equal",
    "start": "900060",
    "end": "901560"
  },
  {
    "text": "switch yes you'll want something like",
    "start": "901560",
    "end": "903360"
  },
  {
    "text": "that but in typescript switch statement",
    "start": "903360",
    "end": "904620"
  },
  {
    "text": "uh switch is a statement not an",
    "start": "904620",
    "end": "905940"
  },
  {
    "text": "expression so let's define the generic",
    "start": "905940",
    "end": "907320"
  },
  {
    "text": "visitor",
    "start": "907320",
    "end": "908339"
  },
  {
    "text": "isn't this great isn't typescript just",
    "start": "908339",
    "end": "910980"
  },
  {
    "text": "fantastic",
    "start": "910980",
    "end": "913260"
  },
  {
    "text": "uh need a primagen bingo card for",
    "start": "913260",
    "end": "915959"
  },
  {
    "text": "streams TJ what are you saying about me",
    "start": "915959",
    "end": "917760"
  },
  {
    "text": "Prime complaining about names of types",
    "start": "917760",
    "end": "919800"
  },
  {
    "text": "and values called it okay",
    "start": "919800",
    "end": "922940"
  },
  {
    "text": "don't do that to me I don't know what",
    "start": "925620",
    "end": "927420"
  },
  {
    "text": "you call this but I hate all of this in",
    "start": "927420",
    "end": "929940"
  },
  {
    "text": "TS trying to figure out what uh",
    "start": "929940",
    "end": "931740"
  },
  {
    "text": "something is and I find unions of unions",
    "start": "931740",
    "end": "934380"
  },
  {
    "text": "of nested types of unions of maybe it's",
    "start": "934380",
    "end": "937019"
  },
  {
    "text": "a skill issue but I can never follow",
    "start": "937019",
    "end": "938399"
  },
  {
    "text": "it's not just that it's also that all of",
    "start": "938399",
    "end": "941399"
  },
  {
    "text": "these things that you're building",
    "start": "941399",
    "end": "942500"
  },
  {
    "text": "requires pre-watched",
    "start": "942500",
    "end": "945480"
  },
  {
    "text": "damn it Ryan Winchester they're on to us",
    "start": "945480",
    "end": "947639"
  },
  {
    "text": "but not only that but it also requires a",
    "start": "947639",
    "end": "950040"
  },
  {
    "text": "bunch of runtime programming to get over",
    "start": "950040",
    "end": "952680"
  },
  {
    "text": "this right you don't have syntax to like",
    "start": "952680",
    "end": "955260"
  },
  {
    "text": "to support what you're trying to do I",
    "start": "955260",
    "end": "957000"
  },
  {
    "text": "find that to be the most difficult part",
    "start": "957000",
    "end": "960440"
  },
  {
    "text": "all right visitor here we go uh bull",
    "start": "961079",
    "end": "962940"
  },
  {
    "text": "there we go uh into binary if okay good",
    "start": "962940",
    "end": "965519"
  },
  {
    "text": "I like visitors you know you gotta have",
    "start": "965519",
    "end": "966959"
  },
  {
    "text": "that uh uh visit TFR expression t",
    "start": "966959",
    "end": "970320"
  },
  {
    "text": "visitor T of R all right uh let's see",
    "start": "970320",
    "end": "973500"
  },
  {
    "text": "return a v Bool expression kind kind",
    "start": "973500",
    "end": "975779"
  },
  {
    "text": "kind kind kind okay nice so this must be",
    "start": "975779",
    "end": "978060"
  },
  {
    "text": "the value visitor okay armed with the",
    "start": "978060",
    "end": "980339"
  },
  {
    "text": "visit we can ergonomically match over",
    "start": "980339",
    "end": "981779"
  },
  {
    "text": "the expression infer types uh types",
    "start": "981779",
    "end": "984600"
  },
  {
    "text": "const visit expression Bull type bull",
    "start": "984600",
    "end": "987060"
  },
  {
    "text": "that did this this there's those little",
    "start": "987060",
    "end": "988500"
  },
  {
    "text": "ones that they're doing earlier result",
    "start": "988500",
    "end": "990240"
  },
  {
    "text": "type binary there you go the if type",
    "start": "990240",
    "end": "992760"
  },
  {
    "text": "fantastic result types",
    "start": "992760",
    "end": "995160"
  },
  {
    "text": "result type let's say okay here we go",
    "start": "995160",
    "end": "997440"
  },
  {
    "text": "AST binary add",
    "start": "997440",
    "end": "999779"
  },
  {
    "text": "oh hey don't Don't Stop the Music uh",
    "start": "999779",
    "end": "1002420"
  },
  {
    "text": "let's see result type okay so we're",
    "start": "1002420",
    "end": "1003620"
  },
  {
    "text": "looking at this stuff we're returning",
    "start": "1003620",
    "end": "1005240"
  },
  {
    "text": "out types",
    "start": "1005240",
    "end": "1006560"
  },
  {
    "text": "I feel like we're we're still missing",
    "start": "1006560",
    "end": "1008540"
  },
  {
    "text": "the type on the way out right it's not",
    "start": "1008540",
    "end": "1010160"
  },
  {
    "text": "inferring the type well enough I don't",
    "start": "1010160",
    "end": "1011959"
  },
  {
    "text": "think before we go further let's",
    "start": "1011959",
    "end": "1013339"
  },
  {
    "text": "generalize this visit uh visiting",
    "start": "1013339",
    "end": "1014959"
  },
  {
    "text": "pattern a bit recall that our",
    "start": "1014959",
    "end": "1016579"
  },
  {
    "text": "expressions are parameterized by the",
    "start": "1016579",
    "end": "1018380"
  },
  {
    "text": "type Associated data type Checker yep",
    "start": "1018380",
    "end": "1022100"
  },
  {
    "text": "all right where's this I want to see the",
    "start": "1022100",
    "end": "1023779"
  },
  {
    "text": "thing where it actually makes it into",
    "start": "1023779",
    "end": "1024918"
  },
  {
    "text": "something worthwhile because the thing",
    "start": "1024919",
    "end": "1026360"
  },
  {
    "text": "that you're missing here is that you",
    "start": "1026360",
    "end": "1027918"
  },
  {
    "text": "have a type you do this visit you do the",
    "start": "1027919",
    "end": "1030380"
  },
  {
    "text": "operations on the visit and then",
    "start": "1030380",
    "end": "1031938"
  },
  {
    "text": "ultimately what ends up happening is",
    "start": "1031939",
    "end": "1033918"
  },
  {
    "text": "that uh",
    "start": "1033919",
    "end": "1036558"
  },
  {
    "text": "ultimately what ends up happening is",
    "start": "1036559",
    "end": "1037880"
  },
  {
    "text": "that you have this problem where",
    "start": "1037880",
    "end": "1041839"
  },
  {
    "text": "you still have to do the same check",
    "start": "1042020",
    "end": "1043459"
  },
  {
    "text": "everywhere right like you don't actually",
    "start": "1043459",
    "end": "1044839"
  },
  {
    "text": "get any syntax or pulling out right it",
    "start": "1044839",
    "end": "1046579"
  },
  {
    "text": "doesn't actually auto complete to",
    "start": "1046579",
    "end": "1047780"
  },
  {
    "text": "something specific it doesn't actually",
    "start": "1047780",
    "end": "1048860"
  },
  {
    "text": "type narrow you just have this",
    "start": "1048860",
    "end": "1050419"
  },
  {
    "text": "generalized type that you constantly",
    "start": "1050419",
    "end": "1051799"
  },
  {
    "text": "have to untype into the the specific",
    "start": "1051799",
    "end": "1054140"
  },
  {
    "text": "thing constantly",
    "start": "1054140",
    "end": "1055580"
  },
  {
    "text": "and not only that but hey small critique",
    "start": "1055580",
    "end": "1057740"
  },
  {
    "text": "creating an object and a bunch of",
    "start": "1057740",
    "end": "1059120"
  },
  {
    "text": "functions every time inferred types are",
    "start": "1059120",
    "end": "1060500"
  },
  {
    "text": "called you're going to have a really",
    "start": "1060500",
    "end": "1061820"
  },
  {
    "text": "slow compiler okay your compiler is",
    "start": "1061820",
    "end": "1063500"
  },
  {
    "text": "going to be really really slow you",
    "start": "1063500",
    "end": "1064640"
  },
  {
    "text": "realize how many times you're going to",
    "start": "1064640",
    "end": "1065600"
  },
  {
    "text": "create this object",
    "start": "1065600",
    "end": "1066740"
  },
  {
    "text": "it's crazy time okay it's crazy town",
    "start": "1066740",
    "end": "1069380"
  },
  {
    "text": "all right",
    "start": "1069380",
    "end": "1070580"
  },
  {
    "text": "all right transform Maps uh an",
    "start": "1070580",
    "end": "1072500"
  },
  {
    "text": "expression carrying T into the",
    "start": "1072500",
    "end": "1073640"
  },
  {
    "text": "expression carrying V by applying uh an",
    "start": "1073640",
    "end": "1075559"
  },
  {
    "text": "f a visitor classic T into the V with a",
    "start": "1075559",
    "end": "1079160"
  },
  {
    "text": "visitor okay we all know about this all",
    "start": "1079160",
    "end": "1081260"
  },
  {
    "text": "right what is our what does it look like",
    "start": "1081260",
    "end": "1082640"
  },
  {
    "text": "transform in a base we take the this one",
    "start": "1082640",
    "end": "1086299"
  },
  {
    "text": "this one okay yeah",
    "start": "1086299",
    "end": "1089500"
  },
  {
    "text": "wait what's this one",
    "start": "1089900",
    "end": "1091520"
  },
  {
    "text": "oh that's just like a one that's not",
    "start": "1091520",
    "end": "1093140"
  },
  {
    "text": "actually a thing okay confused me there",
    "start": "1093140",
    "end": "1095780"
  },
  {
    "text": "I was like wait what is this syntax I",
    "start": "1095780",
    "end": "1097280"
  },
  {
    "text": "don't I don't get that I don't get that",
    "start": "1097280",
    "end": "1098900"
  },
  {
    "text": "at all we got int binary okay",
    "start": "1098900",
    "end": "1103039"
  },
  {
    "text": "or recalling transform doing all this so",
    "start": "1103039",
    "end": "1105200"
  },
  {
    "text": "we're building up the tree build up the",
    "start": "1105200",
    "end": "1106940"
  },
  {
    "text": "entire tree now that we have the",
    "start": "1106940",
    "end": "1107900"
  },
  {
    "text": "expression kind in both the expression U",
    "start": "1107900",
    "end": "1109340"
  },
  {
    "text": "and expression V literals uh don't",
    "start": "1109340",
    "end": "1110780"
  },
  {
    "text": "depend on this type parameter and",
    "start": "1110780",
    "end": "1112039"
  },
  {
    "text": "typescript is smart enough to figure out",
    "start": "1112039",
    "end": "1113480"
  },
  {
    "text": "uh this without us manually reassembling",
    "start": "1113480",
    "end": "1116179"
  },
  {
    "text": "the same value with different types this",
    "start": "1116179",
    "end": "1117860"
  },
  {
    "text": "is where the magic of a visitor VV",
    "start": "1117860",
    "end": "1119660"
  },
  {
    "text": "happens uh the code is pretty regular uh",
    "start": "1119660",
    "end": "1122960"
  },
  {
    "text": "here though so at this point we might",
    "start": "1122960",
    "end": "1124460"
  },
  {
    "text": "actually recall that typescript is",
    "start": "1124460",
    "end": "1125720"
  },
  {
    "text": "dynamically typed language and we write",
    "start": "1125720",
    "end": "1127580"
  },
  {
    "text": "a generic traversal using object.keys",
    "start": "1127580",
    "end": "1129799"
  },
  {
    "text": "while keeping the static function",
    "start": "1129799",
    "end": "1131179"
  },
  {
    "text": "signature in place I don't want to uh I",
    "start": "1131179",
    "end": "1133880"
  },
  {
    "text": "don't think we need to do it here but",
    "start": "1133880",
    "end": "1135320"
  },
  {
    "text": "that's some comfort knowing it's",
    "start": "1135320",
    "end": "1136400"
  },
  {
    "text": "possible object.keys is a bane of my",
    "start": "1136400",
    "end": "1138980"
  },
  {
    "text": "life object.keys is one of the Banes of",
    "start": "1138980",
    "end": "1141980"
  },
  {
    "text": "my life in any library ever created and",
    "start": "1141980",
    "end": "1145340"
  },
  {
    "text": "is emotional I don't know why you even",
    "start": "1145340",
    "end": "1146780"
  },
  {
    "text": "have to say that it should be out now",
    "start": "1146780",
    "end": "1149419"
  },
  {
    "text": "implementing type inference should be a",
    "start": "1149419",
    "end": "1151100"
  },
  {
    "text": "breeze we need some way to admit to type",
    "start": "1151100",
    "end": "1152720"
  },
  {
    "text": "errors though typescript would be",
    "start": "1152720",
    "end": "1154340"
  },
  {
    "text": "trivial to accumulate errors into an",
    "start": "1154340",
    "end": "1155780"
  },
  {
    "text": "array as a side effect but let's",
    "start": "1155780",
    "end": "1156980"
  },
  {
    "text": "actually represent type errors as",
    "start": "1156980",
    "end": "1158360"
  },
  {
    "text": "instances of a specific type type error",
    "start": "1158360",
    "end": "1160580"
  },
  {
    "text": "pun intended uh Bane's of Life called it",
    "start": "1160580",
    "end": "1163460"
  },
  {
    "text": "oh gosh come on we're not calling",
    "start": "1163460",
    "end": "1166400"
  },
  {
    "text": "anything this is my life it's now or",
    "start": "1166400",
    "end": "1169460"
  },
  {
    "text": "never and I'm not gonna live forever",
    "start": "1169460",
    "end": "1171380"
  },
  {
    "text": "okay",
    "start": "1171380",
    "end": "1173120"
  },
  {
    "text": "you think darkness is your uh Ally Bane",
    "start": "1173120",
    "end": "1176299"
  },
  {
    "text": "called it",
    "start": "1176299",
    "end": "1178899"
  },
  {
    "text": "you guys are calling the strangest",
    "start": "1185840",
    "end": "1187340"
  },
  {
    "text": "things okay and you happen to be right",
    "start": "1187340",
    "end": "1190400"
  },
  {
    "text": "you happen to be right type of key of",
    "start": "1190400",
    "end": "1192860"
  },
  {
    "text": "object that just feels so stupid to do",
    "start": "1192860",
    "end": "1195200"
  },
  {
    "text": "okay the fact that you have to do this",
    "start": "1195200",
    "end": "1197360"
  },
  {
    "text": "all the time makes me wanna like just",
    "start": "1197360",
    "end": "1199820"
  },
  {
    "text": "makes me want to cry a little bit okay",
    "start": "1199820",
    "end": "1202640"
  },
  {
    "text": "it's not a love this is not a love sign",
    "start": "1202640",
    "end": "1204500"
  },
  {
    "text": "okay this isn't love okay this should be",
    "start": "1204500",
    "end": "1207500"
  },
  {
    "text": "a sad face that you have to do that",
    "start": "1207500",
    "end": "1210080"
  },
  {
    "text": "hey what's your object it's this defined",
    "start": "1210080",
    "end": "1212240"
  },
  {
    "text": "type what's its keys I don't know",
    "start": "1212240",
    "end": "1216760"
  },
  {
    "text": "I don't know what they mean right like",
    "start": "1218840",
    "end": "1220940"
  },
  {
    "text": "why do you gotta be that way",
    "start": "1220940",
    "end": "1224200"
  },
  {
    "text": "um all right and for types uh",
    "start": "1225620",
    "end": "1228500"
  },
  {
    "text": "all right there's a lot of inferring",
    "start": "1228500",
    "end": "1229940"
  },
  {
    "text": "going on here hey totally cool but I'm",
    "start": "1229940",
    "end": "1232340"
  },
  {
    "text": "tired of reading code very awesome uh",
    "start": "1232340",
    "end": "1234679"
  },
  {
    "text": "astute readers will notice that our",
    "start": "1234679",
    "end": "1236059"
  },
  {
    "text": "visitor function actually takes a extra",
    "start": "1236059",
    "end": "1237740"
  },
  {
    "text": "ASD location argument typescript allows",
    "start": "1237740",
    "end": "1239720"
  },
  {
    "text": "this argument uh only in cases where",
    "start": "1239720",
    "end": "1241640"
  },
  {
    "text": "it's needed cutting down verbosity",
    "start": "1241640",
    "end": "1245799"
  },
  {
    "text": "okay okay",
    "start": "1249919",
    "end": "1253100"
  },
  {
    "text": "and that's all for today the end result",
    "start": "1253100",
    "end": "1254660"
  },
  {
    "text": "is pretty neat and concise it took some",
    "start": "1254660",
    "end": "1256160"
  },
  {
    "text": "typing to get there but typescript uh",
    "start": "1256160",
    "end": "1257840"
  },
  {
    "text": "Auto completion really helps with that",
    "start": "1257840",
    "end": "1259160"
  },
  {
    "text": "so I'm gonna okay I'm gonna give I'm",
    "start": "1259160",
    "end": "1260780"
  },
  {
    "text": "gonna give a little something here",
    "start": "1260780",
    "end": "1261740"
  },
  {
    "text": "here's my big problem with typescript",
    "start": "1261740",
    "end": "1263539"
  },
  {
    "text": "here did you see all the work that was",
    "start": "1263539",
    "end": "1265520"
  },
  {
    "text": "required to create these types",
    "start": "1265520",
    "end": "1268340"
  },
  {
    "text": "there was a lot of work to create these",
    "start": "1268340",
    "end": "1269960"
  },
  {
    "text": "types remember this whole production",
    "start": "1269960",
    "end": "1271039"
  },
  {
    "text": "ready thing this is my problem with TS",
    "start": "1271039",
    "end": "1273140"
  },
  {
    "text": "TS",
    "start": "1273140",
    "end": "1274820"
  },
  {
    "text": "actually looks more like this okay",
    "start": "1274820",
    "end": "1277940"
  },
  {
    "text": "okay TS right here the T and the S like",
    "start": "1277940",
    "end": "1282440"
  },
  {
    "text": "this here's the problem with it is that",
    "start": "1282440",
    "end": "1285200"
  },
  {
    "text": "when you're working with typescript you",
    "start": "1285200",
    "end": "1288140"
  },
  {
    "text": "find yourself programming a completely",
    "start": "1288140",
    "end": "1290900"
  },
  {
    "text": "separate flow of logic right just like a",
    "start": "1290900",
    "end": "1294260"
  },
  {
    "text": "completely separate line of programming",
    "start": "1294260",
    "end": "1297140"
  },
  {
    "text": "and that one single set of programming",
    "start": "1297140",
    "end": "1299600"
  },
  {
    "text": "you have to do with all types and then",
    "start": "1299600",
    "end": "1301700"
  },
  {
    "text": "once you're done you then go and you",
    "start": "1301700",
    "end": "1304159"
  },
  {
    "text": "then program your actual program and",
    "start": "1304159",
    "end": "1306740"
  },
  {
    "text": "when your program needs to change you",
    "start": "1306740",
    "end": "1308960"
  },
  {
    "text": "need to go over to your type system and",
    "start": "1308960",
    "end": "1310940"
  },
  {
    "text": "figure out why your types aren't doing",
    "start": "1310940",
    "end": "1312500"
  },
  {
    "text": "what they're supposed to be doing right",
    "start": "1312500",
    "end": "1313940"
  },
  {
    "text": "you know what I mean like it's just this",
    "start": "1313940",
    "end": "1316400"
  },
  {
    "text": "super annoying kind of like you know",
    "start": "1316400",
    "end": "1319460"
  },
  {
    "text": "like it's",
    "start": "1319460",
    "end": "1321140"
  },
  {
    "text": "I'm not sure it's like",
    "start": "1321140",
    "end": "1323659"
  },
  {
    "text": "it's bimodal programming I'm not sure",
    "start": "1323659",
    "end": "1325640"
  },
  {
    "text": "how else to describe it other than that",
    "start": "1325640",
    "end": "1327200"
  },
  {
    "text": "and that's really frustrating uh",
    "start": "1327200",
    "end": "1330260"
  },
  {
    "text": "whereas it does seem like in in the O",
    "start": "1330260",
    "end": "1332299"
  },
  {
    "text": "camel world",
    "start": "1332299",
    "end": "1334640"
  },
  {
    "text": "oh camel doesn't seem to have that",
    "start": "1334640",
    "end": "1336620"
  },
  {
    "text": "problem because if you effectively can",
    "start": "1336620",
    "end": "1338720"
  },
  {
    "text": "uh infer everything about the type",
    "start": "1338720",
    "end": "1340640"
  },
  {
    "text": "system through and through so when you",
    "start": "1340640",
    "end": "1341960"
  },
  {
    "text": "make a change it makes the change to the",
    "start": "1341960",
    "end": "1344480"
  },
  {
    "text": "types through and thus leads you to just",
    "start": "1344480",
    "end": "1347059"
  },
  {
    "text": "knowing where you've goofed up the type",
    "start": "1347059",
    "end": "1348559"
  },
  {
    "text": "as opposed to having this completely",
    "start": "1348559",
    "end": "1350299"
  },
  {
    "text": "separate vertical of just type",
    "start": "1350299",
    "end": "1351799"
  },
  {
    "text": "programming you know what I mean uh I",
    "start": "1351799",
    "end": "1354740"
  },
  {
    "text": "wouldn't call it bipole I'd call it",
    "start": "1354740",
    "end": "1355880"
  },
  {
    "text": "bimodal bimodal right because it's like",
    "start": "1355880",
    "end": "1358340"
  },
  {
    "text": "you have to have a type track and you",
    "start": "1358340",
    "end": "1360559"
  },
  {
    "text": "have to have a programming track and the",
    "start": "1360559",
    "end": "1363559"
  },
  {
    "text": "type track is purely so you don't screw",
    "start": "1363559",
    "end": "1365299"
  },
  {
    "text": "up the programming track but the type",
    "start": "1365299",
    "end": "1367340"
  },
  {
    "text": "track can be very unwieldy and sometimes",
    "start": "1367340",
    "end": "1369500"
  },
  {
    "text": "super annoying so there's like this",
    "start": "1369500",
    "end": "1370820"
  },
  {
    "text": "level of knowledge you require the thing",
    "start": "1370820",
    "end": "1372860"
  },
  {
    "text": "about typescript that makes it so",
    "start": "1372860",
    "end": "1374120"
  },
  {
    "text": "interesting is that it is super powerful",
    "start": "1374120",
    "end": "1376460"
  },
  {
    "text": "types it's like like you saw that's a",
    "start": "1376460",
    "end": "1378620"
  },
  {
    "text": "super powerful language to program in",
    "start": "1378620",
    "end": "1380179"
  },
  {
    "text": "you can do quite a bit with it but",
    "start": "1380179",
    "end": "1382039"
  },
  {
    "text": "there's like you're good at typescript",
    "start": "1382039",
    "end": "1383600"
  },
  {
    "text": "and you pretty much Plateau at your",
    "start": "1383600",
    "end": "1385340"
  },
  {
    "text": "goodness and then there's just like it's",
    "start": "1385340",
    "end": "1387080"
  },
  {
    "text": "it's a non-differentiable function and",
    "start": "1387080",
    "end": "1389120"
  },
  {
    "text": "then for you to get any better you",
    "start": "1389120",
    "end": "1390380"
  },
  {
    "text": "pretty much need to go here because this",
    "start": "1390380",
    "end": "1392120"
  },
  {
    "text": "little spot in between these two means",
    "start": "1392120",
    "end": "1394280"
  },
  {
    "text": "you Pro program pure",
    "start": "1394280",
    "end": "1396799"
  },
  {
    "text": "pure shitty types okay this this is a",
    "start": "1396799",
    "end": "1399620"
  },
  {
    "text": "portal all right this is a portal uh",
    "start": "1399620",
    "end": "1402440"
  },
  {
    "text": "we'll go here and we'll go here and just",
    "start": "1402440",
    "end": "1404059"
  },
  {
    "text": "go right here all right this is a portal",
    "start": "1404059",
    "end": "1406039"
  },
  {
    "text": "right here and this portal happens to go",
    "start": "1406039",
    "end": "1408860"
  },
  {
    "text": "to this other portal that I was just",
    "start": "1408860",
    "end": "1410419"
  },
  {
    "text": "drawing right over here which looks like",
    "start": "1410419",
    "end": "1414080"
  },
  {
    "text": "uh this",
    "start": "1414080",
    "end": "1416780"
  },
  {
    "text": "right here and we're gonna jump in here",
    "start": "1416780",
    "end": "1418580"
  },
  {
    "text": "and we're gonna go back to that nice",
    "start": "1418580",
    "end": "1419659"
  },
  {
    "text": "blue I had and then we're gonna go back",
    "start": "1419659",
    "end": "1421520"
  },
  {
    "text": "down here and then go back over here and",
    "start": "1421520",
    "end": "1423380"
  },
  {
    "text": "let's make it a little bit more orange",
    "start": "1423380",
    "end": "1425179"
  },
  {
    "text": "there we go and we're going to take it",
    "start": "1425179",
    "end": "1427159"
  },
  {
    "text": "and see and you're gonna come right out",
    "start": "1427159",
    "end": "1429200"
  },
  {
    "text": "of here and guess what's down here guess",
    "start": "1429200",
    "end": "1431539"
  },
  {
    "text": "what goes down here hell actual hell",
    "start": "1431539",
    "end": "1434240"
  },
  {
    "text": "exists down here okay you go in here you",
    "start": "1434240",
    "end": "1436940"
  },
  {
    "text": "go through here",
    "start": "1436940",
    "end": "1438620"
  },
  {
    "text": "this you're probably pretty still fine",
    "start": "1438620",
    "end": "1440240"
  },
  {
    "text": "at this you're pretty still fine at but",
    "start": "1440240",
    "end": "1441860"
  },
  {
    "text": "there's only one person that can work on",
    "start": "1441860",
    "end": "1443539"
  },
  {
    "text": "this thing and so your life is just",
    "start": "1443539",
    "end": "1445280"
  },
  {
    "text": "absolutely scumbag or you have everyone",
    "start": "1445280",
    "end": "1448340"
  },
  {
    "text": "that can work on this part but then your",
    "start": "1448340",
    "end": "1450440"
  },
  {
    "text": "type system kind of sucks and you just",
    "start": "1450440",
    "end": "1452179"
  },
  {
    "text": "have Annie's everywhere okay you just",
    "start": "1452179",
    "end": "1454760"
  },
  {
    "text": "have Annie's that's your life a bunch of",
    "start": "1454760",
    "end": "1456440"
  },
  {
    "text": "enemies that's just what happens you",
    "start": "1456440",
    "end": "1458179"
  },
  {
    "text": "have any as user you know why because",
    "start": "1458179",
    "end": "1460640"
  },
  {
    "text": "you can't be bothered to program for",
    "start": "1460640",
    "end": "1462620"
  },
  {
    "text": "three days such that this just works",
    "start": "1462620",
    "end": "1464600"
  },
  {
    "text": "automatically instead you know what it",
    "start": "1464600",
    "end": "1466580"
  },
  {
    "text": "is you know you you know it is so you do",
    "start": "1466580",
    "end": "1469640"
  },
  {
    "text": "that okay this is why typescript can be",
    "start": "1469640",
    "end": "1472760"
  },
  {
    "text": "very very difficult",
    "start": "1472760",
    "end": "1475539"
  },
  {
    "text": "I smile like the Terminator don't I",
    "start": "1475820",
    "end": "1478880"
  },
  {
    "text": "I think I smile like the Terminator",
    "start": "1478880",
    "end": "1481280"
  },
  {
    "text": "the name",
    "start": "1481280",
    "end": "1483440"
  },
  {
    "text": "is I mean it wasn't that bad I mean",
    "start": "1483440",
    "end": "1485720"
  },
  {
    "text": "typescript it was a pretty cool little",
    "start": "1485720",
    "end": "1487039"
  },
  {
    "text": "type system that was made for the",
    "start": "1487039",
    "end": "1488659"
  },
  {
    "text": "compiler I totally agree that you can do",
    "start": "1488659",
    "end": "1490880"
  },
  {
    "text": "it but I want to ask you a question a",
    "start": "1490880",
    "end": "1493280"
  },
  {
    "text": "quote by old Jeff Goldblum",
    "start": "1493280",
    "end": "1495320"
  },
  {
    "text": "just because you can",
    "start": "1495320",
    "end": "1497600"
  },
  {
    "text": "doesn't mean you should I know I screwed",
    "start": "1497600",
    "end": "1499340"
  },
  {
    "text": "up the quotas like they're too busy to",
    "start": "1499340",
    "end": "1500720"
  },
  {
    "text": "see if they could to ask if they should",
    "start": "1500720",
    "end": "1502820"
  },
  {
    "text": "I get it okay I get it but I'm just",
    "start": "1502820",
    "end": "1505520"
  },
  {
    "text": "saying",
    "start": "1505520",
    "end": "1507860"
  },
  {
    "text": "again",
    "start": "1507860",
    "end": "1510220"
  }
]