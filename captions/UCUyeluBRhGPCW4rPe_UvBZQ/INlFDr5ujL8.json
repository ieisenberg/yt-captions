[
  {
    "text": "everyone keeps telling me to learn Swift",
    "start": "0",
    "end": "2399"
  },
  {
    "text": "they're telling me they're promising me",
    "start": "2399",
    "end": "4440"
  },
  {
    "text": "that it's the better version of rust",
    "start": "4440",
    "end": "7980"
  },
  {
    "text": "okay I keep hearing this that it's like",
    "start": "7980",
    "end": "10320"
  },
  {
    "text": "the greatest and ever I I can't believe",
    "start": "10320",
    "end": "12900"
  },
  {
    "text": "it I have a hard time believing it",
    "start": "12900",
    "end": "14460"
  },
  {
    "text": "Taylor Swift 5.9 has been released are",
    "start": "14460",
    "end": "17940"
  },
  {
    "text": "you ready we're gonna look at what",
    "start": "17940",
    "end": "19380"
  },
  {
    "text": "they've done and we're gonna try to make",
    "start": "19380",
    "end": "20820"
  },
  {
    "text": "some judgments about a language I have",
    "start": "20820",
    "end": "22560"
  },
  {
    "text": "literally never touched in my lifetime",
    "start": "22560",
    "end": "24300"
  },
  {
    "text": "okay",
    "start": "24300",
    "end": "25260"
  },
  {
    "text": "Swift 5.9 is now available this is a",
    "start": "25260",
    "end": "27660"
  },
  {
    "text": "major new release that adds expressive",
    "start": "27660",
    "end": "30359"
  },
  {
    "text": "macro system to the language and",
    "start": "30359",
    "end": "31859"
  },
  {
    "text": "introduces support for integrating Swift",
    "start": "31859",
    "end": "33540"
  },
  {
    "text": "into C plus plus code bases through",
    "start": "33540",
    "end": "35880"
  },
  {
    "text": "bi-directional interoperability okay",
    "start": "35880",
    "end": "38399"
  },
  {
    "text": "they've already beat rust boom boom boom",
    "start": "38399",
    "end": "43739"
  },
  {
    "text": "they're already better okay they got",
    "start": "43739",
    "end": "46200"
  },
  {
    "text": "they got macros they got bi-directional",
    "start": "46200",
    "end": "49879"
  },
  {
    "text": "it introduces a parameter packs uh an",
    "start": "49879",
    "end": "53399"
  },
  {
    "text": "improved expression evaluator while",
    "start": "53399",
    "end": "55440"
  },
  {
    "text": "debugging enhanced crash handling",
    "start": "55440",
    "end": "57420"
  },
  {
    "text": "Windows platform improvements and more",
    "start": "57420",
    "end": "60140"
  },
  {
    "text": "what's what what is this last one what's",
    "start": "60140",
    "end": "62940"
  },
  {
    "text": "windows I thought Windows was for gaming",
    "start": "62940",
    "end": "65518"
  },
  {
    "text": "is Swift for game development I don't",
    "start": "65519",
    "end": "68159"
  },
  {
    "text": "know what that is read on for deep dive",
    "start": "68159",
    "end": "70080"
  },
  {
    "text": "into the changes into the language",
    "start": "70080",
    "end": "71220"
  },
  {
    "text": "standard Library tooling platform",
    "start": "71220",
    "end": "72720"
  },
  {
    "text": "support next steps for getting started",
    "start": "72720",
    "end": "74100"
  },
  {
    "text": "okay yeah language and standard Library",
    "start": "74100",
    "end": "75720"
  },
  {
    "text": "Swiss fundamental goal is to encourage",
    "start": "75720",
    "end": "77520"
  },
  {
    "text": "code that is clear and concise while",
    "start": "77520",
    "end": "79080"
  },
  {
    "text": "remaining safe and efficient all right",
    "start": "79080",
    "end": "81240"
  },
  {
    "text": "all right let's see it macros macros",
    "start": "81240",
    "end": "83340"
  },
  {
    "text": "help developers reduce repetitive plate",
    "start": "83340",
    "end": "85799"
  },
  {
    "text": "and create more expressive libraries",
    "start": "85799",
    "end": "87180"
  },
  {
    "text": "that can be distributed as Swift picages",
    "start": "87180",
    "end": "89360"
  },
  {
    "text": "using a macros easy and natural no one",
    "start": "89360",
    "end": "93000"
  },
  {
    "text": "has ever said this sentence I have ever",
    "start": "93000",
    "end": "95100"
  },
  {
    "text": "heard of in my entire lifetime nobody",
    "start": "95100",
    "end": "97259"
  },
  {
    "text": "nobody says this nobody says this why is",
    "start": "97259",
    "end": "100799"
  },
  {
    "text": "this sounding like rust because",
    "start": "100799",
    "end": "101820"
  },
  {
    "text": "apparently it's like rust okay macros",
    "start": "101820",
    "end": "105119"
  },
  {
    "text": "can either be expanded with a function",
    "start": "105119",
    "end": "106380"
  },
  {
    "text": "like a freestanding macro name syntax",
    "start": "106380",
    "end": "108600"
  },
  {
    "text": "okay let font equals front literal name",
    "start": "108600",
    "end": "113159"
  },
  {
    "text": "SF mono size 14 regular okay or attached",
    "start": "113159",
    "end": "116100"
  },
  {
    "text": "declarations with macro name attribute",
    "start": "116100",
    "end": "118259"
  },
  {
    "text": "okay very okay so we're looking a lot",
    "start": "118259",
    "end": "120960"
  },
  {
    "text": "like kind of rusty rust right here right",
    "start": "120960",
    "end": "122700"
  },
  {
    "text": "you can either inline call them or what",
    "start": "122700",
    "end": "124979"
  },
  {
    "text": "looks to be like more of a procedural",
    "start": "124979",
    "end": "126659"
  },
  {
    "text": "one okay they work just like built-in",
    "start": "126659",
    "end": "129179"
  },
  {
    "text": "language features but can't be mistaken",
    "start": "129179",
    "end": "130679"
  },
  {
    "text": "for normal code okay",
    "start": "130679",
    "end": "132420"
  },
  {
    "text": "Fair you write macros using a powerful",
    "start": "132420",
    "end": "135180"
  },
  {
    "text": "and flexible approach they are simply",
    "start": "135180",
    "end": "136980"
  },
  {
    "text": "Swift functions that use Swift syntax",
    "start": "136980",
    "end": "139560"
  },
  {
    "text": "library to generate code to be inserted",
    "start": "139560",
    "end": "141300"
  },
  {
    "text": "in the source file this literally sounds",
    "start": "141300",
    "end": "142500"
  },
  {
    "text": "just like rust except for rust uses sin",
    "start": "142500",
    "end": "144959"
  },
  {
    "text": "right",
    "start": "144959",
    "end": "145980"
  },
  {
    "text": "it just uses sin instead of the Swift",
    "start": "145980",
    "end": "147840"
  },
  {
    "text": "syntax uh macros can make it easy for",
    "start": "147840",
    "end": "151800"
  },
  {
    "text": "your libraries libraries users to adopt",
    "start": "151800",
    "end": "154080"
  },
  {
    "text": "powerful capabilities that adapt the",
    "start": "154080",
    "end": "155520"
  },
  {
    "text": "code they are used in in the new",
    "start": "155520",
    "end": "157319"
  },
  {
    "text": "Observer observation module which allows",
    "start": "157319",
    "end": "159480"
  },
  {
    "text": "Swift classes to automatically notify",
    "start": "159480",
    "end": "160980"
  },
  {
    "text": "other code when properties change the",
    "start": "160980",
    "end": "162780"
  },
  {
    "text": "Swift Community has been hard at work",
    "start": "162780",
    "end": "164160"
  },
  {
    "text": "for creating these tools and Frameworks",
    "start": "164160",
    "end": "165360"
  },
  {
    "text": "that built upon macros for example look",
    "start": "165360",
    "end": "167280"
  },
  {
    "text": "at the Swift power assert okay a lot of",
    "start": "167280",
    "end": "169620"
  },
  {
    "text": "cool stuff right there I would like I",
    "start": "169620",
    "end": "172080"
  },
  {
    "text": "mean that's it's pretty cool I'm happy",
    "start": "172080",
    "end": "173879"
  },
  {
    "text": "that they did this I don't mind the",
    "start": "173879",
    "end": "175560"
  },
  {
    "text": "syntax either right pound me function or",
    "start": "175560",
    "end": "178680"
  },
  {
    "text": "what appears to be a decorator like",
    "start": "178680",
    "end": "181800"
  },
  {
    "text": "these don't bother me I don't think they",
    "start": "181800",
    "end": "184140"
  },
  {
    "text": "really bother me that this exists",
    "start": "184140",
    "end": "186480"
  },
  {
    "text": "right has anyone actually bothered by",
    "start": "186480",
    "end": "188280"
  },
  {
    "text": "these kind of things it's more of just",
    "start": "188280",
    "end": "190440"
  },
  {
    "text": "like learning the stuff I think what",
    "start": "190440",
    "end": "192120"
  },
  {
    "text": "static Hermes react is fine for Native",
    "start": "192120",
    "end": "193739"
  },
  {
    "text": "oh we're a way off uh if if the",
    "start": "193739",
    "end": "196319"
  },
  {
    "text": "generated code has problems do I get to",
    "start": "196319",
    "end": "197879"
  },
  {
    "text": "play the game of whack-a-mole in my ID",
    "start": "197879",
    "end": "200040"
  },
  {
    "text": "and debugger trying to see if yeah so",
    "start": "200040",
    "end": "203220"
  },
  {
    "text": "so that's the thing is that one thing",
    "start": "203220",
    "end": "204659"
  },
  {
    "text": "rust really does well is it does have",
    "start": "204659",
    "end": "206700"
  },
  {
    "text": "cargo expand so you can literally just",
    "start": "206700",
    "end": "209220"
  },
  {
    "text": "call Cargo expand and it will show you",
    "start": "209220",
    "end": "211860"
  },
  {
    "text": "your source code generated from macros",
    "start": "211860",
    "end": "214800"
  },
  {
    "text": "so you can kind of see what you messed",
    "start": "214800",
    "end": "217680"
  },
  {
    "text": "up what you did mess up I do like that",
    "start": "217680",
    "end": "219420"
  },
  {
    "text": "so long as they offer that it does make",
    "start": "219420",
    "end": "221220"
  },
  {
    "text": "macro development less hard but I I",
    "start": "221220",
    "end": "224580"
  },
  {
    "text": "still think Zig is the best in this",
    "start": "224580",
    "end": "226980"
  },
  {
    "text": "category Zig allows",
    "start": "226980",
    "end": "229500"
  },
  {
    "text": "comp time right you just right zig and",
    "start": "229500",
    "end": "234000"
  },
  {
    "text": "you say this is ran during compile time",
    "start": "234000",
    "end": "236940"
  },
  {
    "text": "and it just it you don't need a degree",
    "start": "236940",
    "end": "239340"
  },
  {
    "text": "in astrophysics to figure this out like",
    "start": "239340",
    "end": "241319"
  },
  {
    "text": "you just write Zig",
    "start": "241319",
    "end": "242819"
  },
  {
    "text": "right comp time is potentially the",
    "start": "242819",
    "end": "245159"
  },
  {
    "text": "greatest macro like system of all time",
    "start": "245159",
    "end": "248239"
  },
  {
    "text": "it never surprises me ever that when you",
    "start": "248239",
    "end": "251459"
  },
  {
    "text": "say the term comp time at least one",
    "start": "251459",
    "end": "254220"
  },
  {
    "text": "person says come time one person forever",
    "start": "254220",
    "end": "257280"
  },
  {
    "text": "says come time every single time every",
    "start": "257280",
    "end": "260220"
  },
  {
    "text": "single time hands down no matter what it",
    "start": "260220",
    "end": "263759"
  },
  {
    "text": "just happens and now everybody's gonna",
    "start": "263759",
    "end": "265740"
  },
  {
    "text": "say come time",
    "start": "265740",
    "end": "267540"
  },
  {
    "text": "get out of here oh my goodness okay",
    "start": "267540",
    "end": "270000"
  },
  {
    "text": "parameter packs let you write generic",
    "start": "270000",
    "end": "271500"
  },
  {
    "text": "types and functions which will work over",
    "start": "271500",
    "end": "272880"
  },
  {
    "text": "arbitrary number of types okay for",
    "start": "272880",
    "end": "275400"
  },
  {
    "text": "example without parameter packs if you",
    "start": "275400",
    "end": "276900"
  },
  {
    "text": "want to write a function call all to",
    "start": "276900",
    "end": "279180"
  },
  {
    "text": "check whether any number of optional",
    "start": "279180",
    "end": "280979"
  },
  {
    "text": "values are new you would need to write",
    "start": "280979",
    "end": "282720"
  },
  {
    "text": "separate overloaded for each link yes",
    "start": "282720",
    "end": "284699"
  },
  {
    "text": "we've seen this with okay oh this could",
    "start": "284699",
    "end": "286979"
  },
  {
    "text": "be cool",
    "start": "286979",
    "end": "288080"
  },
  {
    "text": "oh what are we about to see",
    "start": "288080",
    "end": "292320"
  },
  {
    "text": "with parameter packs you can ex because",
    "start": "292320",
    "end": "294360"
  },
  {
    "text": "like right now one thing uh with uh",
    "start": "294360",
    "end": "296460"
  },
  {
    "text": "what's it called like axum or actix",
    "start": "296460",
    "end": "298340"
  },
  {
    "text": "they're super special syntax magic of",
    "start": "298340",
    "end": "303120"
  },
  {
    "text": "being able to take Handler functions and",
    "start": "303120",
    "end": "305460"
  },
  {
    "text": "transform the data of the request into",
    "start": "305460",
    "end": "308280"
  },
  {
    "text": "your struct without you doing anything",
    "start": "308280",
    "end": "310940"
  },
  {
    "text": "other than deriving saraday is all done",
    "start": "310940",
    "end": "314400"
  },
  {
    "text": "but they can do up to nine arguments",
    "start": "314400",
    "end": "316680"
  },
  {
    "text": "this is saying you could just do any",
    "start": "316680",
    "end": "318479"
  },
  {
    "text": "amount of arguments with parameter packs",
    "start": "318479",
    "end": "320580"
  },
  {
    "text": "you can express this API as a single",
    "start": "320580",
    "end": "322740"
  },
  {
    "text": "function that has no upper limit",
    "start": "322740",
    "end": "324000"
  },
  {
    "text": "allowing you to pass any number of",
    "start": "324000",
    "end": "325380"
  },
  {
    "text": "arguments all right all each wrapped",
    "start": "325380",
    "end": "328259"
  },
  {
    "text": "optional repeat each wrapped I don't",
    "start": "328259",
    "end": "330720"
  },
  {
    "text": "know what the question mark is repeat",
    "start": "330720",
    "end": "332220"
  },
  {
    "text": "each wrap and you can return each one",
    "start": "332220",
    "end": "333960"
  },
  {
    "text": "okay",
    "start": "333960",
    "end": "334919"
  },
  {
    "text": "okay calling an API that uses parameter",
    "start": "334919",
    "end": "337560"
  },
  {
    "text": "packs is intuitive and requires no extra",
    "start": "337560",
    "end": "339120"
  },
  {
    "text": "work",
    "start": "339120",
    "end": "339960"
  },
  {
    "text": "all right if let I mean does this",
    "start": "339960",
    "end": "342180"
  },
  {
    "text": "already look does this already look like",
    "start": "342180",
    "end": "344460"
  },
  {
    "text": "we're dealing with a little bit of rust",
    "start": "344460",
    "end": "345600"
  },
  {
    "text": "if let this optional int optional double",
    "start": "345600",
    "end": "348479"
  },
  {
    "text": "optional oh yes",
    "start": "348479",
    "end": "351020"
  },
  {
    "text": "oh that is so good",
    "start": "351020",
    "end": "356220"
  },
  {
    "text": "I don't want to like Swift I refuse to",
    "start": "356220",
    "end": "358020"
  },
  {
    "text": "like Swift I refuse to like Swift I",
    "start": "358020",
    "end": "360060"
  },
  {
    "text": "refuse to like it but that is really",
    "start": "360060",
    "end": "362100"
  },
  {
    "text": "good oh I'm gonna be a Taylor",
    "start": "362100",
    "end": "364080"
  },
  {
    "text": "Swifty aren't I oh no oh no",
    "start": "364080",
    "end": "368520"
  },
  {
    "text": "I'm gonna do it",
    "start": "368520",
    "end": "370560"
  },
  {
    "text": "uh",
    "start": "370560",
    "end": "372419"
  },
  {
    "text": "if I if if I only knew one Taylor Swift",
    "start": "372419",
    "end": "374639"
  },
  {
    "text": "song I could I could actually repeat it",
    "start": "374639",
    "end": "376440"
  },
  {
    "text": "right now but I can't even do that I",
    "start": "376440",
    "end": "378120"
  },
  {
    "text": "feel like a failure",
    "start": "378120",
    "end": "379979"
  },
  {
    "text": "um ownership features can help",
    "start": "379979",
    "end": "381780"
  },
  {
    "text": "developers fine-tune a memory management",
    "start": "381780",
    "end": "383520"
  },
  {
    "text": "behavior and performance critical code",
    "start": "383520",
    "end": "385199"
  },
  {
    "text": "the new consume operator tell Swift to",
    "start": "385199",
    "end": "387780"
  },
  {
    "text": "de-initialize a variable and transfer",
    "start": "387780",
    "end": "389520"
  },
  {
    "text": "its contents without copying it the",
    "start": "389520",
    "end": "391319"
  },
  {
    "text": "consume and borrow parameters modifying",
    "start": "391319",
    "end": "393300"
  },
  {
    "text": "uh provide hints that Swift uh",
    "start": "393300",
    "end": "397380"
  },
  {
    "text": "it can use and eliminate unnecessary",
    "start": "397380",
    "end": "399360"
  },
  {
    "text": "copying and reference counting",
    "start": "399360",
    "end": "400560"
  },
  {
    "text": "operations no way this is like okay well",
    "start": "400560",
    "end": "404220"
  },
  {
    "text": "they're even going with oh camel style",
    "start": "404220",
    "end": "406080"
  },
  {
    "text": "now too oh no I am an apple Fanboy all",
    "start": "406080",
    "end": "409860"
  },
  {
    "text": "of a sudden this actually sounds like",
    "start": "409860",
    "end": "411539"
  },
  {
    "text": "this sounds like the perfect language",
    "start": "411539",
    "end": "413280"
  },
  {
    "text": "okay because I've always just wanted two",
    "start": "413280",
    "end": "415259"
  },
  {
    "text": "things I want a garbage collector for",
    "start": "415259",
    "end": "417300"
  },
  {
    "text": "when I don't care",
    "start": "417300",
    "end": "419340"
  },
  {
    "text": "and I want the ability to do borrow",
    "start": "419340",
    "end": "422280"
  },
  {
    "text": "checking and all the fancy ownership",
    "start": "422280",
    "end": "424199"
  },
  {
    "text": "transfer when I do care Oh Campbell like",
    "start": "424199",
    "end": "427800"
  },
  {
    "text": "oh camel effectively has that",
    "start": "427800",
    "end": "431160"
  },
  {
    "text": "and now Swift is coming in here Swift",
    "start": "431160",
    "end": "434639"
  },
  {
    "text": "just allows it finally non-copyable",
    "start": "434639",
    "end": "436680"
  },
  {
    "text": "strucks and enums allow you to create",
    "start": "436680",
    "end": "438360"
  },
  {
    "text": "types which like a class can't be a",
    "start": "438360",
    "end": "440580"
  },
  {
    "text": "meaningful meaningfully cop meaningfully",
    "start": "440580",
    "end": "443280"
  },
  {
    "text": "copied when assigned like a struct or an",
    "start": "443280",
    "end": "445440"
  },
  {
    "text": "enum you do not need the uh you do not",
    "start": "445440",
    "end": "447180"
  },
  {
    "text": "need to be reference counted because",
    "start": "447180",
    "end": "448440"
  },
  {
    "text": "only one storage location can own the",
    "start": "448440",
    "end": "450660"
  },
  {
    "text": "instance at a time I mean that sounds",
    "start": "450660",
    "end": "452759"
  },
  {
    "text": "actually really good",
    "start": "452759",
    "end": "454139"
  },
  {
    "text": "Swift five point this actually sounds",
    "start": "454139",
    "end": "456120"
  },
  {
    "text": "incredible status bar tax if not has",
    "start": "456120",
    "end": "458940"
  },
  {
    "text": "connection disconnected uh else if let",
    "start": "458940",
    "end": "461580"
  },
  {
    "text": "error equals oh I like this oh I like",
    "start": "461580",
    "end": "463919"
  },
  {
    "text": "that uh else ready okay I like this",
    "start": "463919",
    "end": "466800"
  },
  {
    "text": "additional features include smaller",
    "start": "466800",
    "end": "468539"
  },
  {
    "text": "quality of life changes to the language",
    "start": "468539",
    "end": "469800"
  },
  {
    "text": "like the ability to use if and switch",
    "start": "469800",
    "end": "471539"
  },
  {
    "text": "Expressions uh for variable assignment",
    "start": "471539",
    "end": "474840"
  },
  {
    "text": "love it love that this is great this is",
    "start": "474840",
    "end": "478620"
  },
  {
    "text": "great because I don't love ternaries and",
    "start": "478620",
    "end": "481319"
  },
  {
    "text": "you can't really do if else in turnaries",
    "start": "481319",
    "end": "483900"
  },
  {
    "text": "they just get totally effed up right",
    "start": "483900",
    "end": "486120"
  },
  {
    "text": "people try to do if else is by chaining",
    "start": "486120",
    "end": "488460"
  },
  {
    "text": "a couple ternaries this is nice",
    "start": "488460",
    "end": "491280"
  },
  {
    "text": "I don't see Swift and Mason uh that's",
    "start": "491280",
    "end": "493440"
  },
  {
    "text": "fine it's pretty easy to get your own",
    "start": "493440",
    "end": "495000"
  },
  {
    "text": "LSP in uh a new package access leveled",
    "start": "495000",
    "end": "498240"
  },
  {
    "text": "lets other modules in the same package",
    "start": "498240",
    "end": "500220"
  },
  {
    "text": "access apis but hide them from code",
    "start": "500220",
    "end": "501840"
  },
  {
    "text": "outside the package oh like the default",
    "start": "501840",
    "end": "503460"
  },
  {
    "text": "scope in Java it's great for splitting",
    "start": "503460",
    "end": "505379"
  },
  {
    "text": "up large modules into verse smaller ones",
    "start": "505379",
    "end": "507240"
  },
  {
    "text": "without exposing internals okay cool",
    "start": "507240",
    "end": "509280"
  },
  {
    "text": "like that I like that uh developers",
    "start": "509280",
    "end": "511860"
  },
  {
    "text": "using Swift concurrency May appreciate",
    "start": "511860",
    "end": "513719"
  },
  {
    "text": "the more convenient discarding task",
    "start": "513719",
    "end": "515099"
  },
  {
    "text": "group types for task groups that don't",
    "start": "515099",
    "end": "517140"
  },
  {
    "text": "generate results and advanced custom",
    "start": "517140",
    "end": "519180"
  },
  {
    "text": "actor executors features for controlling",
    "start": "519180",
    "end": "521760"
  },
  {
    "text": "the exact environment in which actors",
    "start": "521760",
    "end": "523200"
  },
  {
    "text": "run okay okay",
    "start": "523200",
    "end": "525360"
  },
  {
    "text": "crash handling apparently on Linux the",
    "start": "525360",
    "end": "527640"
  },
  {
    "text": "Swift runtime can now uh will now catch",
    "start": "527640",
    "end": "530100"
  },
  {
    "text": "program crashes and Swift runtime errors",
    "start": "530100",
    "end": "532080"
  },
  {
    "text": "and display back traces on the program's",
    "start": "532080",
    "end": "533580"
  },
  {
    "text": "output okay good that's nice back Tracer",
    "start": "533580",
    "end": "536339"
  },
  {
    "text": "is out of process and includes support",
    "start": "536339",
    "end": "537720"
  },
  {
    "text": "for async functions all right awesome I",
    "start": "537720",
    "end": "541200"
  },
  {
    "text": "like to hear this feature is also",
    "start": "541200",
    "end": "542640"
  },
  {
    "text": "available on Mac OS but is disabled by",
    "start": "542640",
    "end": "544320"
  },
  {
    "text": "default to enable it you need to do it",
    "start": "544320",
    "end": "545760"
  },
  {
    "text": "of course of course because because it",
    "start": "545760",
    "end": "548640"
  },
  {
    "text": "of course it's always inconvenient",
    "start": "548640",
    "end": "550560"
  },
  {
    "text": "debugging it introduces a features to",
    "start": "550560",
    "end": "552779"
  },
  {
    "text": "the lldb and Swift compiler aimed at",
    "start": "552779",
    "end": "554700"
  },
  {
    "text": "making Swift debugging faster and more",
    "start": "554700",
    "end": "556200"
  },
  {
    "text": "reliable the pnpo commands uh now print",
    "start": "556200",
    "end": "558720"
  },
  {
    "text": "local variables and properties as fast",
    "start": "558720",
    "end": "560399"
  },
  {
    "text": "as the frame variable or V commands by",
    "start": "560399",
    "end": "562920"
  },
  {
    "text": "bypassing the Swift compiler when",
    "start": "562920",
    "end": "564360"
  },
  {
    "text": "evaluating simple Expressions okay cool",
    "start": "564360",
    "end": "566640"
  },
  {
    "text": "stuff let's just move on just a little",
    "start": "566640",
    "end": "569100"
  },
  {
    "text": "little niceties nice niceties good I",
    "start": "569100",
    "end": "572279"
  },
  {
    "text": "like that uh now supports bi-directional",
    "start": "572279",
    "end": "574440"
  },
  {
    "text": "interoperability uh for C plus plus and",
    "start": "574440",
    "end": "576899"
  },
  {
    "text": "Objective C plus what the hell's",
    "start": "576899",
    "end": "578399"
  },
  {
    "text": "Objective C plus plus wait hold on I",
    "start": "578399",
    "end": "581399"
  },
  {
    "text": "thought it was just Objective C there's",
    "start": "581399",
    "end": "582959"
  },
  {
    "text": "Objective C plus plus",
    "start": "582959",
    "end": "585240"
  },
  {
    "text": "Is that real I mean I've done a I've",
    "start": "585240",
    "end": "587940"
  },
  {
    "text": "done a decent amount of objective c",
    "start": "587940",
    "end": "590459"
  },
  {
    "text": "what the hell is Objective C plus plus",
    "start": "590459",
    "end": "593640"
  },
  {
    "text": "what the hell is even that I I have done",
    "start": "593640",
    "end": "598080"
  },
  {
    "text": "a pretty decent amount of objective c",
    "start": "598080",
    "end": "600240"
  },
  {
    "text": "which by the way the worst language I've",
    "start": "600240",
    "end": "602279"
  },
  {
    "text": "ever used I hated it I had to program an",
    "start": "602279",
    "end": "604620"
  },
  {
    "text": "xcode it was January it was genuinely",
    "start": "604620",
    "end": "607440"
  },
  {
    "text": "objectively ass yeah it was awful all",
    "start": "607440",
    "end": "610980"
  },
  {
    "text": "right five nine Sports bi-directional",
    "start": "610980",
    "end": "612420"
  },
  {
    "text": "interoperability for example we can do",
    "start": "612420",
    "end": "614220"
  },
  {
    "text": "this one uh clang module prompt",
    "start": "614220",
    "end": "616560"
  },
  {
    "text": "responder okay we got a little pragma",
    "start": "616560",
    "end": "618420"
  },
  {
    "text": "once baby include this Vector generate",
    "start": "618420",
    "end": "620519"
  },
  {
    "text": "responses okay you call it directly from",
    "start": "620519",
    "end": "622620"
  },
  {
    "text": "Swift Code uh generate responses oh I",
    "start": "622620",
    "end": "625620"
  },
  {
    "text": "wonder how the compiling looks on this I",
    "start": "625620",
    "end": "627360"
  },
  {
    "text": "wonder how you set these two things",
    "start": "627360",
    "end": "628500"
  },
  {
    "text": "together because this looks nice I mean",
    "start": "628500",
    "end": "630360"
  },
  {
    "text": "that's kind of incredible can we agree",
    "start": "630360",
    "end": "632399"
  },
  {
    "text": "like if this is really true you just",
    "start": "632399",
    "end": "634560"
  },
  {
    "text": "like do the thing get it that'd be wild",
    "start": "634560",
    "end": "638040"
  },
  {
    "text": "that would be wild uh C plus plus",
    "start": "638040",
    "end": "640440"
  },
  {
    "text": "interoperability is actively evolving",
    "start": "640440",
    "end": "642240"
  },
  {
    "text": "with some aspects uh subject to change",
    "start": "642240",
    "end": "643860"
  },
  {
    "text": "in the future releases as the community",
    "start": "643860",
    "end": "645060"
  },
  {
    "text": "gathers feedback from The Real World",
    "start": "645060",
    "end": "646320"
  },
  {
    "text": "Adoption and mixed uh Swift and C plus",
    "start": "646320",
    "end": "648120"
  },
  {
    "text": "plus code bases uh for information on us",
    "start": "648120",
    "end": "650940"
  },
  {
    "text": "so again",
    "start": "650940",
    "end": "652440"
  },
  {
    "text": "this is where I still think Zig might be",
    "start": "652440",
    "end": "654480"
  },
  {
    "text": "the better choice but now I'm curious",
    "start": "654480",
    "end": "656399"
  },
  {
    "text": "now I'm actually genuinely curious how",
    "start": "656399",
    "end": "658140"
  },
  {
    "text": "how good is Swift",
    "start": "658140",
    "end": "660480"
  },
  {
    "text": "uh for information on enabling C plus",
    "start": "660480",
    "end": "662339"
  },
  {
    "text": "plus interoperability in this uh",
    "start": "662339",
    "end": "663779"
  },
  {
    "text": "supported language subset please refer",
    "start": "663779",
    "end": "665519"
  },
  {
    "text": "to the documentation really what I want",
    "start": "665519",
    "end": "667560"
  },
  {
    "text": "to see out of Swift is how easy is it to",
    "start": "667560",
    "end": "670860"
  },
  {
    "text": "do servers right how easy is it to Just",
    "start": "670860",
    "end": "673260"
  },
  {
    "text": "Launch a server and do templating of",
    "start": "673260",
    "end": "675540"
  },
  {
    "text": "HTML that's what I want to see",
    "start": "675540",
    "end": "678540"
  },
  {
    "text": "can I launch servers can I do templating",
    "start": "678540",
    "end": "680399"
  },
  {
    "text": "of HTML and can we call it a day or is",
    "start": "680399",
    "end": "682800"
  },
  {
    "text": "it going to be a pain in the ass because",
    "start": "682800",
    "end": "683820"
  },
  {
    "text": "right now I'm not loving rust for that",
    "start": "683820",
    "end": "687000"
  },
  {
    "text": "rust the best way to to do this the",
    "start": "687000",
    "end": "690420"
  },
  {
    "text": "single best way to do it in Rust is to",
    "start": "690420",
    "end": "692940"
  },
  {
    "text": "use leptos",
    "start": "692940",
    "end": "694560"
  },
  {
    "text": "honestly I can't find a better way to",
    "start": "694560",
    "end": "696480"
  },
  {
    "text": "use it okay I think this is literally",
    "start": "696480",
    "end": "699360"
  },
  {
    "text": "the best way to do HTML templating and",
    "start": "699360",
    "end": "702180"
  },
  {
    "text": "rust is using leptos I think Greg was",
    "start": "702180",
    "end": "704820"
  },
  {
    "text": "always right look at this look at that",
    "start": "704820",
    "end": "706560"
  },
  {
    "text": "beauty I did right here look at how",
    "start": "706560",
    "end": "708240"
  },
  {
    "text": "beautiful this is but nonetheless I",
    "start": "708240",
    "end": "710160"
  },
  {
    "text": "think Greg is 100 right leptos",
    "start": "710160",
    "end": "713940"
  },
  {
    "text": "it's great but go go has it naturally",
    "start": "713940",
    "end": "717000"
  },
  {
    "text": "supported so it feels so good right it",
    "start": "717000",
    "end": "720060"
  },
  {
    "text": "feels so good I prefer the problem I",
    "start": "720060",
    "end": "722640"
  },
  {
    "text": "have with templating languages in Rust",
    "start": "722640",
    "end": "724560"
  },
  {
    "text": "like leptos is that it allows you to be",
    "start": "724560",
    "end": "727920"
  },
  {
    "text": "too complicated by accident right",
    "start": "727920",
    "end": "731399"
  },
  {
    "text": "and so Swift on the other hand if they",
    "start": "731399",
    "end": "733860"
  },
  {
    "text": "just have a nice templating language the",
    "start": "733860",
    "end": "735480"
  },
  {
    "text": "one that just allows your basic",
    "start": "735480",
    "end": "736980"
  },
  {
    "text": "templating and top-down thinking to",
    "start": "736980",
    "end": "739140"
  },
  {
    "text": "happen that'd be fantastic all right",
    "start": "739140",
    "end": "741180"
  },
  {
    "text": "a swift package uh manager okay nice to",
    "start": "741180",
    "end": "743339"
  },
  {
    "text": "have their own package manager awesome",
    "start": "743339",
    "end": "744360"
  },
  {
    "text": "so Swift is like a fully function a",
    "start": "744360",
    "end": "746519"
  },
  {
    "text": "fully functioning modern language",
    "start": "746519",
    "end": "748980"
  },
  {
    "text": "package manager build tools debugging",
    "start": "748980",
    "end": "751560"
  },
  {
    "text": "all Under One Roof fantastic packages",
    "start": "751560",
    "end": "754380"
  },
  {
    "text": "can be used uh can use the new package",
    "start": "754380",
    "end": "756240"
  },
  {
    "text": "access modifier allowing the access of",
    "start": "756240",
    "end": "757980"
  },
  {
    "text": "symbols in another Target slash module",
    "start": "757980",
    "end": "759660"
  },
  {
    "text": "within the same package without making",
    "start": "759660",
    "end": "760980"
  },
  {
    "text": "them public Swift PM automatically sets",
    "start": "760980",
    "end": "763320"
  },
  {
    "text": "the new compiler configuration to ensure",
    "start": "763320",
    "end": "764760"
  },
  {
    "text": "okay cool",
    "start": "764760",
    "end": "766380"
  },
  {
    "text": "compiler plug-in support",
    "start": "766380",
    "end": "768480"
  },
  {
    "text": "uh enables defining macro targets macro",
    "start": "768480",
    "end": "771240"
  },
  {
    "text": "targets allow authoring and distributing",
    "start": "771240",
    "end": "772620"
  },
  {
    "text": "custom Swift macros okay interesting",
    "start": "772620",
    "end": "775560"
  },
  {
    "text": "so they just have a bunch of cool stuff",
    "start": "775560",
    "end": "777120"
  },
  {
    "text": "none of the stuff really I think largely",
    "start": "777120",
    "end": "779880"
  },
  {
    "text": "matters to me this is how you write the",
    "start": "779880",
    "end": "781620"
  },
  {
    "text": "um the macros awesome okay cool server",
    "start": "781620",
    "end": "784500"
  },
  {
    "text": "okay yes custom actor executors and",
    "start": "784500",
    "end": "787320"
  },
  {
    "text": "other features from Swift 59 are making",
    "start": "787320",
    "end": "789060"
  },
  {
    "text": "their way into Swift on the server",
    "start": "789060",
    "end": "790500"
  },
  {
    "text": "ecosystem the servers work group also",
    "start": "790500",
    "end": "793320"
  },
  {
    "text": "recently published their annual update",
    "start": "793320",
    "end": "794760"
  },
  {
    "text": "okay details plans for increased uh",
    "start": "794760",
    "end": "797100"
  },
  {
    "text": "adoption of concurrency with key",
    "start": "797100",
    "end": "798540"
  },
  {
    "text": "libraries as well as other efforts nice",
    "start": "798540",
    "end": "800579"
  },
  {
    "text": "nobody cares about Windows platform all",
    "start": "800579",
    "end": "802800"
  },
  {
    "text": "right next steps this is how we use it",
    "start": "802800",
    "end": "804240"
  },
  {
    "text": "okay so Swift looks good",
    "start": "804240",
    "end": "806639"
  },
  {
    "text": "I think I'd like to just try Swift for",
    "start": "806639",
    "end": "809399"
  },
  {
    "text": "like a week or two just to find out is",
    "start": "809399",
    "end": "811920"
  },
  {
    "text": "it actually great",
    "start": "811920",
    "end": "813300"
  },
  {
    "text": "or is it not because I like I said I'm",
    "start": "813300",
    "end": "815519"
  },
  {
    "text": "still looking for something that's like",
    "start": "815519",
    "end": "817560"
  },
  {
    "text": "go but with more of a type system like",
    "start": "817560",
    "end": "820440"
  },
  {
    "text": "rust you know what I mean I want that I",
    "start": "820440",
    "end": "822600"
  },
  {
    "text": "want that Swift easy development of go",
    "start": "822600",
    "end": "825079"
  },
  {
    "text": "and just the amazing standards see",
    "start": "825079",
    "end": "827820"
  },
  {
    "text": "they've kind of went the opposite route",
    "start": "827820",
    "end": "829200"
  },
  {
    "text": "as rust Russ says we're not going to do",
    "start": "829200",
    "end": "831360"
  },
  {
    "text": "anything in the standard you're just",
    "start": "831360",
    "end": "832920"
  },
  {
    "text": "gonna always use the ecosystem and goes",
    "start": "832920",
    "end": "836399"
  },
  {
    "text": "like no we'll give you an amazing",
    "start": "836399",
    "end": "837899"
  },
  {
    "text": "standard and their standard is like",
    "start": "837899",
    "end": "840120"
  },
  {
    "text": "awesome and so that's why ocam will",
    "start": "840120",
    "end": "842820"
  },
  {
    "text": "seems so appealing because ocamel really",
    "start": "842820",
    "end": "844620"
  },
  {
    "text": "has",
    "start": "844620",
    "end": "846120"
  },
  {
    "text": "potentially those two Swift potentially",
    "start": "846120",
    "end": "848700"
  },
  {
    "text": "also has those too you know what I mean",
    "start": "848700",
    "end": "851880"
  },
  {
    "text": "yeah I know",
    "start": "851880",
    "end": "853740"
  },
  {
    "text": "V laying yeah vlang uh it was trying to",
    "start": "853740",
    "end": "856500"
  },
  {
    "text": "be this vlang was trying to be it but it",
    "start": "856500",
    "end": "858839"
  },
  {
    "text": "does appear to be vaporware unless if I",
    "start": "858839",
    "end": "861300"
  },
  {
    "text": "want to see some real I want to see some",
    "start": "861300",
    "end": "862620"
  },
  {
    "text": "big changes you know what I mean I want",
    "start": "862620",
    "end": "864480"
  },
  {
    "text": "to see this I will be doing the fire",
    "start": "864480",
    "end": "865800"
  },
  {
    "text": "we'll be doing that next okay there you",
    "start": "865800",
    "end": "867420"
  },
  {
    "text": "go this is awesome I'm happy about Swift",
    "start": "867420",
    "end": "869459"
  },
  {
    "text": "I like it the name is I could be a swift",
    "start": "869459",
    "end": "872279"
  },
  {
    "text": "engine I could be okay I have a future",
    "start": "872279",
    "end": "874740"
  },
  {
    "text": "Swift agent in me",
    "start": "874740",
    "end": "877700"
  }
]