[
  {
    "text": "hey a community Spotlight outperforming",
    "start": "40",
    "end": "1839"
  },
  {
    "text": "rust DNA sequencing parsing benchmarks",
    "start": "1839",
    "end": "4240"
  },
  {
    "text": "by 50% with Mojo okay look at this this",
    "start": "4240",
    "end": "7480"
  },
  {
    "text": "is my guest blog by Muhammad Mauk",
    "start": "7480",
    "end": "10759"
  },
  {
    "text": "Mohammad uh is the creator of Mojo fast",
    "start": "10759",
    "end": "13080"
  },
  {
    "text": "trim a Mojo Community project Mohammad",
    "start": "13080",
    "end": "15400"
  },
  {
    "text": "received 100x benchmarks improvements",
    "start": "15400",
    "end": "17039"
  },
  {
    "text": "over Python and 50% improvement over the",
    "start": "17039",
    "end": "19160"
  },
  {
    "text": "fastest implementation in Rust by the",
    "start": "19160",
    "end": "20680"
  },
  {
    "text": "way it's not surprising if you're doing",
    "start": "20680",
    "end": "22880"
  },
  {
    "text": "DN DNA stuff you know for a fact you",
    "start": "22880",
    "end": "24960"
  },
  {
    "text": "know for a 100% fact that there's a for",
    "start": "24960",
    "end": "27439"
  },
  {
    "text": "Loop in there you can't you can't just",
    "start": "27439",
    "end": "29199"
  },
  {
    "text": "be writing for Loop in Python okay you",
    "start": "29199",
    "end": "31320"
  },
  {
    "text": "can't be writing four Loops in Python",
    "start": "31320",
    "end": "33920"
  },
  {
    "text": "okay that's not that's not what Python's",
    "start": "33920",
    "end": "35920"
  },
  {
    "text": "for he learned the language quickly cool",
    "start": "35920",
    "end": "38840"
  },
  {
    "text": "story bro and it only took 200 lines of",
    "start": "38840",
    "end": "40680"
  },
  {
    "text": "code for the first implementation read",
    "start": "40680",
    "end": "42039"
  },
  {
    "text": "on for details for the exra",
    "start": "42039",
    "end": "43120"
  },
  {
    "text": "optimizations he's applied to beat the",
    "start": "43120",
    "end": "45320"
  },
  {
    "text": "fastest existing",
    "start": "45320",
    "end": "46719"
  },
  {
    "text": "benchmarks learned yeah learned is past",
    "start": "46719",
    "end": "49000"
  },
  {
    "text": "tense it's past tense learning he",
    "start": "49000",
    "end": "50920"
  },
  {
    "text": "learned it imagine showing something as",
    "start": "50920",
    "end": "52559"
  },
  {
    "text": "fast but comparing it to python yeah",
    "start": "52559",
    "end": "53960"
  },
  {
    "text": "dude Python's crazy that's a crazy one",
    "start": "53960",
    "end": "56680"
  },
  {
    "text": "the era of big data in bioinformatics",
    "start": "56680",
    "end": "58640"
  },
  {
    "text": "the challenge of for bioinforma in",
    "start": "58640",
    "end": "60320"
  },
  {
    "text": "modern day are rooted in Big Data",
    "start": "60320",
    "end": "62000"
  },
  {
    "text": "manipulation thousands of multi-million",
    "start": "62000",
    "end": "64280"
  },
  {
    "text": "dollar DNA sequence machines are working",
    "start": "64280",
    "end": "67000"
  },
  {
    "text": "non-stop thousands of multi-million",
    "start": "67000",
    "end": "68920"
  },
  {
    "text": "dollar that is like that's a crazy",
    "start": "68920",
    "end": "71240"
  },
  {
    "text": "statement billions of dollars most",
    "start": "71240",
    "end": "73600"
  },
  {
    "text": "people say billions but man this is",
    "start": "73600",
    "end": "75240"
  },
  {
    "text": "thousands of multi-millions non-stop in",
    "start": "75240",
    "end": "77920"
  },
  {
    "text": "fields of Bio uh biotechnology medicine",
    "start": "77920",
    "end": "80560"
  },
  {
    "text": "and biomed research the annual",
    "start": "80560",
    "end": "82439"
  },
  {
    "text": "sequencing data size is expected to be",
    "start": "82439",
    "end": "84280"
  },
  {
    "text": "up to 40 exabytes of raw sequences by",
    "start": "84280",
    "end": "86799"
  },
  {
    "text": "2025 that's 20x the data uploaded to",
    "start": "86799",
    "end": "89200"
  },
  {
    "text": "YouTube every year year that's a lot of",
    "start": "89200",
    "end": "90799"
  },
  {
    "text": "data that's a lot of data so this makes",
    "start": "90799",
    "end": "93479"
  },
  {
    "text": "sense a 1% Improvement is insane that's",
    "start": "93479",
    "end": "96399"
  },
  {
    "text": "it's a lot that's a lot of data uh While",
    "start": "96399",
    "end": "98680"
  },
  {
    "text": "most of the final analysis is carried",
    "start": "98680",
    "end": "100840"
  },
  {
    "text": "out in high level languages like Python",
    "start": "100840",
    "end": "102479"
  },
  {
    "text": "and R the world of bioinformatics is",
    "start": "102479",
    "end": "104640"
  },
  {
    "text": "powered by an underlying uh under layer",
    "start": "104640",
    "end": "106920"
  },
  {
    "text": "of black magic highly optimized tools",
    "start": "106920",
    "end": "108640"
  },
  {
    "text": "written in C C++ and",
    "start": "108640",
    "end": "111880"
  },
  {
    "text": "Java say what now that pre-process and",
    "start": "111880",
    "end": "114840"
  },
  {
    "text": "summarize large amount of raw data Java",
    "start": "114840",
    "end": "117200"
  },
  {
    "text": "did someone did someone just sneak in a",
    "start": "117200",
    "end": "118560"
  },
  {
    "text": "garbage collected language uh this",
    "start": "118560",
    "end": "120560"
  },
  {
    "text": "creates two World a two world problem or",
    "start": "120560",
    "end": "123439"
  },
  {
    "text": "at least it's not a three body problem",
    "start": "123439",
    "end": "124960"
  },
  {
    "text": "where bioin uh bioinformaticians uh who",
    "start": "124960",
    "end": "127880"
  },
  {
    "text": "are not skilled in low-level languages",
    "start": "127880",
    "end": "129440"
  },
  {
    "text": "are prohibited from understanding",
    "start": "129440",
    "end": "130840"
  },
  {
    "text": "customizing and implementing low-level",
    "start": "130840",
    "end": "132599"
  },
  {
    "text": "oper uh operations yeah uh I'm pretty",
    "start": "132599",
    "end": "134800"
  },
  {
    "text": "sure if you're a",
    "start": "134800",
    "end": "135879"
  },
  {
    "text": "bioinformatician which sounds like a",
    "start": "135879",
    "end": "137720"
  },
  {
    "text": "madeup word you could probably learn a",
    "start": "137720",
    "end": "139519"
  },
  {
    "text": "low-level language that's I mean",
    "start": "139519",
    "end": "141760"
  },
  {
    "text": "literally smart people suffering from",
    "start": "141760",
    "end": "144040"
  },
  {
    "text": "skill",
    "start": "144040",
    "end": "145120"
  },
  {
    "text": "issues that's how I read that statement",
    "start": "145120",
    "end": "147599"
  },
  {
    "text": "is literally just like due to skill",
    "start": "147599",
    "end": "149560"
  },
  {
    "text": "issues",
    "start": "149560",
    "end": "151640"
  },
  {
    "text": "in addition typical bioinformatic",
    "start": "151640",
    "end": "153400"
  },
  {
    "text": "pipelines are a mixture of",
    "start": "153400",
    "end": "156440"
  },
  {
    "text": "bash Python scripts called into",
    "start": "156440",
    "end": "158879"
  },
  {
    "text": "pre-compiled binaries along with",
    "start": "158879",
    "end": "160400"
  },
  {
    "text": "analysis logic itself it's be it's",
    "start": "160400",
    "end": "162879"
  },
  {
    "text": "becoming increasingly complex and",
    "start": "162879",
    "end": "164400"
  },
  {
    "text": "frustrating for a new and experienced",
    "start": "164400",
    "end": "166040"
  },
  {
    "text": "bio",
    "start": "166040",
    "end": "167120"
  },
  {
    "text": "bioinformaticians this is the same issue",
    "start": "167120",
    "end": "169120"
  },
  {
    "text": "that a community AI is facing skill",
    "start": "169120",
    "end": "172040"
  },
  {
    "text": "issues skill issues and tooling issues",
    "start": "172040",
    "end": "175159"
  },
  {
    "text": "Mojo one tool to rule them all I first",
    "start": "175159",
    "end": "177840"
  },
  {
    "text": "heard about Mojo from a demo video by",
    "start": "177840",
    "end": "179519"
  },
  {
    "text": "Jeremy Harward its value offer is simple",
    "start": "179519",
    "end": "182400"
  },
  {
    "text": "a pythonic language that allows the",
    "start": "182400",
    "end": "184280"
  },
  {
    "text": "programmer that is a strange phrase that",
    "start": "184280",
    "end": "186360"
  },
  {
    "text": "I just said a pythonic language by the",
    "start": "186360",
    "end": "188239"
  },
  {
    "text": "way the idea that we're going that there",
    "start": "188239",
    "end": "190519"
  },
  {
    "text": "is a class of languages called the",
    "start": "190519",
    "end": "192080"
  },
  {
    "text": "pythonic languages I mean I've heard the",
    "start": "192080",
    "end": "193879"
  },
  {
    "text": "term c-based or ml-based but I've never",
    "start": "193879",
    "end": "196120"
  },
  {
    "text": "heard pythonic based that is like it's",
    "start": "196120",
    "end": "198360"
  },
  {
    "text": "Unique it's a unique way to describe a",
    "start": "198360",
    "end": "200000"
  },
  {
    "text": "language uh that allows programmers to",
    "start": "200000",
    "end": "202080"
  },
  {
    "text": "optimize a at a much lower level to",
    "start": "202080",
    "end": "204440"
  },
  {
    "text": "unify the fragmentation in fields such",
    "start": "204440",
    "end": "206319"
  },
  {
    "text": "as AI learning Mojo was relatively easy",
    "start": "206319",
    "end": "208400"
  },
  {
    "text": "for me coming from the python world I",
    "start": "208400",
    "end": "210360"
  },
  {
    "text": "got used to the extra syntax in only a",
    "start": "210360",
    "end": "212080"
  },
  {
    "text": "few days I decided to try",
    "start": "212080",
    "end": "214040"
  },
  {
    "text": "Mojo in a serious project for low-level",
    "start": "214040",
    "end": "216519"
  },
  {
    "text": "bioinformatic task the fast Q parsing",
    "start": "216519",
    "end": "218840"
  },
  {
    "text": "and quality trimming fast Q is a basic",
    "start": "218840",
    "end": "221000"
  },
  {
    "text": "format for most DNA sequence operations",
    "start": "221000",
    "end": "223040"
  },
  {
    "text": "incorporating both the Geon the genomic",
    "start": "223040",
    "end": "225519"
  },
  {
    "text": "sequence and confidence scores in the",
    "start": "225519",
    "end": "227480"
  },
  {
    "text": "machine in each base call it is a simple",
    "start": "227480",
    "end": "230080"
  },
  {
    "text": "format to parse with most records",
    "start": "230080",
    "end": "232159"
  },
  {
    "text": "looking like this I I really do hope",
    "start": "232159",
    "end": "234239"
  },
  {
    "text": "that he used a a regx to parse this you",
    "start": "234239",
    "end": "237120"
  },
  {
    "text": "know what I mean you know what I mean",
    "start": "237120",
    "end": "238519"
  },
  {
    "text": "yeah definitely huh 100 100 too soon too",
    "start": "238519",
    "end": "242720"
  },
  {
    "text": "soon Cloud Flare still reeling uh",
    "start": "242720",
    "end": "245319"
  },
  {
    "text": "however typical uncompressed files are",
    "start": "245319",
    "end": "247360"
  },
  {
    "text": "one to 50 gigabytes uh an average",
    "start": "247360",
    "end": "249439"
  },
  {
    "text": "sequence heavy study could generate uh",
    "start": "249439",
    "end": "252040"
  },
  {
    "text": "north of a one terabyte for a single",
    "start": "252040",
    "end": "254159"
  },
  {
    "text": "file performance is critical in parsing",
    "start": "254159",
    "end": "256320"
  },
  {
    "text": "and data manipulation I tried to I tried",
    "start": "256320",
    "end": "259560"
  },
  {
    "text": "to write a simple parser that would read",
    "start": "259560",
    "end": "261799"
  },
  {
    "text": "a chunk of file as a string split the",
    "start": "261799",
    "end": "264080"
  },
  {
    "text": "string on new line separators take four",
    "start": "264080",
    "end": "266440"
  },
  {
    "text": "uh take each four lines validate that",
    "start": "266440",
    "end": "268080"
  },
  {
    "text": "they are consistent and correct uh fast",
    "start": "268080",
    "end": "270160"
  },
  {
    "text": "Q record and return it rinse and repeat",
    "start": "270160",
    "end": "272160"
  },
  {
    "text": "until reaching end of file okay seems",
    "start": "272160",
    "end": "273840"
  },
  {
    "text": "reasonable on the first try Mojo fast",
    "start": "273840",
    "end": "275960"
  },
  {
    "text": "trim achieved 8X the performance of",
    "start": "275960",
    "end": "278000"
  },
  {
    "text": "Python's seek iio I was pleasantly",
    "start": "278000",
    "end": "280520"
  },
  {
    "text": "surprised with the development time my",
    "start": "280520",
    "end": "282039"
  },
  {
    "text": "code was still pythonic by the way if",
    "start": "282039",
    "end": "284240"
  },
  {
    "text": "you use this word in a stack Overflow",
    "start": "284240",
    "end": "286000"
  },
  {
    "text": "question you will get more up votes just",
    "start": "286000",
    "end": "287400"
  },
  {
    "text": "so you know I did try to Farm Credit One",
    "start": "287400",
    "end": "289440"
  },
  {
    "text": "Time concise at around 200 lines and",
    "start": "289440",
    "end": "291720"
  },
  {
    "text": "using features the average python",
    "start": "291720",
    "end": "293479"
  },
  {
    "text": "developer would understand in quality",
    "start": "293479",
    "end": "295440"
  },
  {
    "text": "trimming where lowquality bases are",
    "start": "295440",
    "end": "297320"
  },
  {
    "text": "removed from each read it achieves 50 to",
    "start": "297320",
    "end": "299240"
  },
  {
    "text": "80% % of the industry standard uh tool",
    "start": "299240",
    "end": "301680"
  },
  {
    "text": "cat Adept that was a surprising level of",
    "start": "301680",
    "end": "304080"
  },
  {
    "text": "performance for development time I put",
    "start": "304080",
    "end": "305479"
  },
  {
    "text": "into the project is X or Y more pythonic",
    "start": "305479",
    "end": "308960"
  },
  {
    "text": "idiomatic rust canonical JavaScript dude",
    "start": "308960",
    "end": "312080"
  },
  {
    "text": "idiomatic I just hate that word it just",
    "start": "312080",
    "end": "314240"
  },
  {
    "text": "makes me want to die uh going down the",
    "start": "314240",
    "end": "316440"
  },
  {
    "text": "optimization Rabbit Hole uh the most",
    "start": "316440",
    "end": "318479"
  },
  {
    "text": "powerful benefit of Mo",
    "start": "318479",
    "end": "320280"
  },
  {
    "text": "Mojo is that it gives you access to",
    "start": "320280",
    "end": "322319"
  },
  {
    "text": "low-level optimizations the nent state",
    "start": "322319",
    "end": "324199"
  },
  {
    "text": "of Mojo standard Library meant that I",
    "start": "324199",
    "end": "325720"
  },
  {
    "text": "had to write test and Benchmark some",
    "start": "325720",
    "end": "327880"
  },
  {
    "text": "functions from the ground up Mojo's",
    "start": "327880",
    "end": "329319"
  },
  {
    "text": "first support of sim D nuts uh",
    "start": "329319",
    "end": "331800"
  },
  {
    "text": "vectorization was really helpful and",
    "start": "331800",
    "end": "333560"
  },
  {
    "text": "surprisingly intuitive nent yeah nent",
    "start": "333560",
    "end": "337479"
  },
  {
    "text": "means like early on state right isn't",
    "start": "337479",
    "end": "339560"
  },
  {
    "text": "that just means early uh especially of",
    "start": "339560",
    "end": "341800"
  },
  {
    "text": "the process of organization just coming",
    "start": "341800",
    "end": "343199"
  },
  {
    "text": "into existence or beginning to display",
    "start": "343199",
    "end": "344560"
  },
  {
    "text": "signs of future potential nent it's what",
    "start": "344560",
    "end": "347720"
  },
  {
    "text": "smart people say instead of early you",
    "start": "347720",
    "end": "350160"
  },
  {
    "text": "know like like I would just say the",
    "start": "350160",
    "end": "352319"
  },
  {
    "text": "early state of Mojo but some people use",
    "start": "352319",
    "end": "354520"
  },
  {
    "text": "the nent state of not because you are",
    "start": "354520",
    "end": "356560"
  },
  {
    "text": "smarter if you use bigger words here is",
    "start": "356560",
    "end": "358680"
  },
  {
    "text": "the implementation of the vectorized",
    "start": "358680",
    "end": "360080"
  },
  {
    "text": "version of the function to find the",
    "start": "360080",
    "end": "361280"
  },
  {
    "text": "index of a new line separated in Mojo",
    "start": "361280",
    "end": "364080"
  },
  {
    "text": "okay always in line all right do a",
    "start": "364080",
    "end": "366199"
  },
  {
    "text": "little bit this love the dtype got to",
    "start": "366199",
    "end": "367800"
  },
  {
    "text": "get that dtype uh in tensor T generic T",
    "start": "367800",
    "end": "370800"
  },
  {
    "text": "chart int 10 start int zero int 4 I and",
    "start": "370800",
    "end": "374720"
  },
  {
    "text": "range all right start in tensor Char",
    "start": "374720",
    "end": "376759"
  },
  {
    "text": "return okay I mean that's very simple",
    "start": "376759",
    "end": "378479"
  },
  {
    "text": "code to I mean I can pretty much guess",
    "start": "378479",
    "end": "380960"
  },
  {
    "text": "everything but I don't know what a",
    "start": "380960",
    "end": "381840"
  },
  {
    "text": "tensor is I I I don't know what that",
    "start": "381840",
    "end": "383840"
  },
  {
    "text": "data type is but okay simd vectorization",
    "start": "383840",
    "end": "386280"
  },
  {
    "text": "all right all right oh gosh here we go",
    "start": "386280",
    "end": "388680"
  },
  {
    "text": "all right same same same header simd",
    "start": "388680",
    "end": "390319"
  },
  {
    "text": "width equals uh simd width of T length",
    "start": "390319",
    "end": "392919"
  },
  {
    "text": "equals elements start this align start",
    "start": "392919",
    "end": "395120"
  },
  {
    "text": "math okay okay for record aligned with",
    "start": "395120",
    "end": "397440"
  },
  {
    "text": "simd load okay we load it up we mask for",
    "start": "397440",
    "end": "400479"
  },
  {
    "text": "this one and re uh mask reduce or all I",
    "start": "400479",
    "end": "403000"
  },
  {
    "text": "I I don't know what those two mean but",
    "start": "403000",
    "end": "404400"
  },
  {
    "text": "we're doing we're doing a little",
    "start": "404400",
    "end": "405360"
  },
  {
    "text": "something in here tensor is a faty ml",
    "start": "405360",
    "end": "407080"
  },
  {
    "text": "array okay okay interesting bit mask I",
    "start": "407080",
    "end": "409759"
  },
  {
    "text": "know it's doing a bit mask but I don't",
    "start": "409759",
    "end": "410840"
  },
  {
    "text": "know what it means to do the mask right",
    "start": "410840",
    "end": "413080"
  },
  {
    "text": "I don't know how V equals Char reduce or",
    "start": "413080",
    "end": "415759"
  },
  {
    "text": "I don't know how this is a mask right I",
    "start": "415759",
    "end": "417160"
  },
  {
    "text": "don't I I don't I don't there's some",
    "start": "417160",
    "end": "419080"
  },
  {
    "text": "there's some operation here that is",
    "start": "419080",
    "end": "421360"
  },
  {
    "text": "happening that I don't I don't know what",
    "start": "421360",
    "end": "422960"
  },
  {
    "text": "it means you know what I mean like the",
    "start": "422960",
    "end": "424960"
  },
  {
    "text": "equal sign is not just like a simple",
    "start": "424960",
    "end": "426479"
  },
  {
    "text": "equal sign it's it it must do an equal",
    "start": "426479",
    "end": "428840"
  },
  {
    "text": "sign across a vector is that what it's",
    "start": "428840",
    "end": "430520"
  },
  {
    "text": "doing and if any of those reduce or just",
    "start": "430520",
    "end": "432960"
  },
  {
    "text": "simply means I assume to go across that",
    "start": "432960",
    "end": "434759"
  },
  {
    "text": "vector and see if there if any of it's",
    "start": "434759",
    "end": "436280"
  },
  {
    "text": "true right is that is that what it's",
    "start": "436280",
    "end": "437800"
  },
  {
    "text": "doing yeah across all elements okay yeah",
    "start": "437800",
    "end": "440160"
  },
  {
    "text": "got it got it okay the vectorization",
    "start": "440160",
    "end": "442280"
  },
  {
    "text": "version loads 32 elements of in 8 and",
    "start": "442280",
    "end": "444160"
  },
  {
    "text": "checks the presence of a new line uh",
    "start": "444160",
    "end": "445680"
  },
  {
    "text": "separator using a few operations in the",
    "start": "445680",
    "end": "447639"
  },
  {
    "text": "following graph you can see the effect",
    "start": "447639",
    "end": "448960"
  },
  {
    "text": "of simd vectorization it provides a 4X",
    "start": "448960",
    "end": "450960"
  },
  {
    "text": "speed up with the average of 3.2",
    "start": "450960",
    "end": "452720"
  },
  {
    "text": "similarly uh simd storing and loading",
    "start": "452720",
    "end": "454680"
  },
  {
    "text": "from tensors provid substantial",
    "start": "454680",
    "end": "456280"
  },
  {
    "text": "performance gain nice this is good this",
    "start": "456280",
    "end": "458560"
  },
  {
    "text": "is this I mean that looks great the nanc",
    "start": "458560",
    "end": "461639"
  },
  {
    "text": "means that I think you're probably",
    "start": "461639",
    "end": "462759"
  },
  {
    "text": "measuring it too explicitly this feels",
    "start": "462759",
    "end": "465759"
  },
  {
    "text": "kind of uh dangerous anyways in addition",
    "start": "465759",
    "end": "468360"
  },
  {
    "text": "I explored optimizations from cc++",
    "start": "468360",
    "end": "470400"
  },
  {
    "text": "implementations I was concerned that no",
    "start": "470400",
    "end": "472039"
  },
  {
    "text": "explicit memory buffer was allocated for",
    "start": "472039",
    "end": "473639"
  },
  {
    "text": "the loaded chunks but Mojo compiler was",
    "start": "473639",
    "end": "475599"
  },
  {
    "text": "already taking care of that and avoiding",
    "start": "475599",
    "end": "477240"
  },
  {
    "text": "new memory allocations okay nice nice",
    "start": "477240",
    "end": "480080"
  },
  {
    "text": "you like the white lines in the",
    "start": "480080",
    "end": "481039"
  },
  {
    "text": "background yeah they're beautiful I like",
    "start": "481039",
    "end": "482400"
  },
  {
    "text": "the white lines as well implementation",
    "start": "482400",
    "end": "484120"
  },
  {
    "text": "of those optimizations resulted in 3x",
    "start": "484120",
    "end": "486199"
  },
  {
    "text": "speed up and Mojo fast trim was on",
    "start": "486199",
    "end": "488400"
  },
  {
    "text": "average 24x more performant than",
    "start": "488400",
    "end": "489960"
  },
  {
    "text": "Python's SE iio in addition due to the",
    "start": "489960",
    "end": "492199"
  },
  {
    "text": "control over reference and value",
    "start": "492199",
    "end": "493400"
  },
  {
    "text": "semantics in",
    "start": "493400",
    "end": "494879"
  },
  {
    "text": "Mojo I applied the fast parser version",
    "start": "494879",
    "end": "497840"
  },
  {
    "text": "of the parser nice uh no memory copies",
    "start": "497840",
    "end": "500960"
  },
  {
    "text": "are made during parsing and the",
    "start": "500960",
    "end": "502199"
  },
  {
    "text": "individual reads are passed around",
    "start": "502199",
    "end": "503520"
  },
  {
    "text": "references to the chunk uh to loaded",
    "start": "503520",
    "end": "505280"
  },
  {
    "text": "Chunk in memory this approach",
    "start": "505280",
    "end": "506520"
  },
  {
    "text": "implemented in Russ NE needletail parser",
    "start": "506520",
    "end": "509479"
  },
  {
    "text": "although Mojo is still very young",
    "start": "509479",
    "end": "510639"
  },
  {
    "text": "language my implementation was 50%",
    "start": "510639",
    "end": "512440"
  },
  {
    "text": "faster than rust implementation on Apple",
    "start": "512440",
    "end": "514518"
  },
  {
    "text": "silicon and 100x faster than",
    "start": "514519",
    "end": "517959"
  },
  {
    "text": "seio I mean yeah he ran it once and",
    "start": "528120",
    "end": "530279"
  },
  {
    "text": "that's that's cool I'm not going to lie",
    "start": "530279",
    "end": "532560"
  },
  {
    "text": "to you you know do I I mean usually",
    "start": "532560",
    "end": "535399"
  },
  {
    "text": "whenever you see local benchmarks you",
    "start": "535399",
    "end": "536880"
  },
  {
    "text": "should just take this as a uh Direction",
    "start": "536880",
    "end": "539160"
  },
  {
    "text": "not necessarily truth right this sounds",
    "start": "539160",
    "end": "541839"
  },
  {
    "text": "like a skill issue well I mean they're",
    "start": "541839",
    "end": "543560"
  },
  {
    "text": "saying they used the exact same they",
    "start": "543560",
    "end": "544880"
  },
  {
    "text": "used all the same techniques that uh oh",
    "start": "544880",
    "end": "547320"
  },
  {
    "text": "my goodness how how how do I leave this",
    "start": "547320",
    "end": "549079"
  },
  {
    "text": "I'm pressing escape help me I'm pressing",
    "start": "549079",
    "end": "550880"
  },
  {
    "text": "escape help me uh contrl C control",
    "start": "550880",
    "end": "555360"
  },
  {
    "text": "D okay we got up I had to click I had to",
    "start": "555880",
    "end": "558240"
  },
  {
    "text": "just click it turns out um please don't",
    "start": "558240",
    "end": "560000"
  },
  {
    "text": "make models that pop up like that okay",
    "start": "560000",
    "end": "562480"
  },
  {
    "text": "that's really annoying just just don't",
    "start": "562480",
    "end": "564040"
  },
  {
    "text": "do that don't don't don't do that okay",
    "start": "564040",
    "end": "567360"
  },
  {
    "text": "stop being clever because you're not",
    "start": "567360",
    "end": "568839"
  },
  {
    "text": "clever uh for python programmers wanting",
    "start": "568839",
    "end": "571120"
  },
  {
    "text": "to write more performing code Mojo is a",
    "start": "571120",
    "end": "572480"
  },
  {
    "text": "great tool to try and easy to learn",
    "start": "572480",
    "end": "574040"
  },
  {
    "text": "however the language and the ecosystem",
    "start": "574040",
    "end": "575200"
  },
  {
    "text": "is still growing I had to use print to",
    "start": "575200",
    "end": "576519"
  },
  {
    "text": "bugging to gain insight into the bugs I",
    "start": "576519",
    "end": "578320"
  },
  {
    "text": "was encountering the debugger is still",
    "start": "578320",
    "end": "580040"
  },
  {
    "text": "in preview and undocumented although",
    "start": "580040",
    "end": "581800"
  },
  {
    "text": "they tell me it will be officially",
    "start": "581800",
    "end": "583360"
  },
  {
    "text": "launching soon in conclusion I think",
    "start": "583360",
    "end": "584920"
  },
  {
    "text": "Mojo can be a radical change for a wide",
    "start": "584920",
    "end": "586680"
  },
  {
    "text": "range of python trained scientists and",
    "start": "586680",
    "end": "588040"
  },
  {
    "text": "researchers across many fields by the",
    "start": "588040",
    "end": "589839"
  },
  {
    "text": "way this",
    "start": "589839",
    "end": "590959"
  },
  {
    "text": "is I saw an article I saw let's see on",
    "start": "590959",
    "end": "593680"
  },
  {
    "text": "Twitter who said this um let's go uh",
    "start": "593680",
    "end": "595959"
  },
  {
    "text": "Luca what's his name Luca who wrote the",
    "start": "595959",
    "end": "599040"
  },
  {
    "text": "rust the rust in production book what's",
    "start": "599040",
    "end": "600680"
  },
  {
    "text": "his last name Luca",
    "start": "600680",
    "end": "603040"
  },
  {
    "text": "what Luca Paul Luca Paul Luca Paul LCA",
    "start": "603040",
    "end": "606720"
  },
  {
    "text": "Paul Luca Paul he said something that I",
    "start": "606720",
    "end": "609160"
  },
  {
    "text": "thought was really interesting um this",
    "start": "609160",
    "end": "611399"
  },
  {
    "text": "right here rust is the Dark Horse of AI",
    "start": "611399",
    "end": "613440"
  },
  {
    "text": "a few are talking about it yet almost",
    "start": "613440",
    "end": "614959"
  },
  {
    "text": "everyone is using it the efficiency and",
    "start": "614959",
    "end": "616320"
  },
  {
    "text": "fearless concurrency do matter when",
    "start": "616320",
    "end": "617760"
  },
  {
    "text": "processing data of pades uh I think this",
    "start": "617760",
    "end": "619760"
  },
  {
    "text": "is where he's going to go wrong honestly",
    "start": "619760",
    "end": "622240"
  },
  {
    "text": "uh what I mean by that is that if Mojo",
    "start": "622240",
    "end": "625240"
  },
  {
    "text": "is true I think Mojo will win just hands",
    "start": "625240",
    "end": "628519"
  },
  {
    "text": "down and the reason why Mojo will win is",
    "start": "628519",
    "end": "632000"
  },
  {
    "text": "because you don't change the Paradigm of",
    "start": "632000",
    "end": "634120"
  },
  {
    "text": "any already acclimated and proficient",
    "start": "634120",
    "end": "636959"
  },
  {
    "text": "individual does that make sense you just",
    "start": "636959",
    "end": "638839"
  },
  {
    "text": "have to learn a slight bit more and you",
    "start": "638839",
    "end": "641120"
  },
  {
    "text": "get immediately amazing performance and",
    "start": "641120",
    "end": "643800"
  },
  {
    "text": "if it even is remotely on par with rust",
    "start": "643800",
    "end": "646600"
  },
  {
    "text": "like within a error rate which they will",
    "start": "646600",
    "end": "648839"
  },
  {
    "text": "clearly calculate it just means that",
    "start": "648839",
    "end": "650880"
  },
  {
    "text": "they're going to use they're going to",
    "start": "650880",
    "end": "652000"
  },
  {
    "text": "just use that I saw that tweet this",
    "start": "652000",
    "end": "653920"
  },
  {
    "text": "morning and and my my first thought was",
    "start": "653920",
    "end": "655639"
  },
  {
    "text": "I wonder how this is like I wonder",
    "start": "655639",
    "end": "657360"
  },
  {
    "text": "what's going to be going on with uh with",
    "start": "657360",
    "end": "659959"
  },
  {
    "text": "Mojo versus this I mean obviously Luca",
    "start": "659959",
    "end": "662240"
  },
  {
    "text": "is an extremely talented engineer I",
    "start": "662240",
    "end": "664200"
  },
  {
    "text": "don't even know why I'm not following",
    "start": "664200",
    "end": "665160"
  },
  {
    "text": "him very very talented engineer very",
    "start": "665160",
    "end": "666800"
  },
  {
    "text": "great I love his book he has one of the",
    "start": "666800",
    "end": "668399"
  },
  {
    "text": "best rust books I've ever read in my",
    "start": "668399",
    "end": "669880"
  },
  {
    "text": "lifetime which is zero to production I'm",
    "start": "669880",
    "end": "671839"
  },
  {
    "text": "look I'm Shilling it he doesn't even",
    "start": "671839",
    "end": "673480"
  },
  {
    "text": "know I'm Shilling it great book honestly",
    "start": "673480",
    "end": "675680"
  },
  {
    "text": "it's a great book uh so I mean I trust",
    "start": "675680",
    "end": "678320"
  },
  {
    "text": "that he's he's very smart about his",
    "start": "678320",
    "end": "679680"
  },
  {
    "text": "opinions but uh I just don't see uh rust",
    "start": "679680",
    "end": "682880"
  },
  {
    "text": "tuling as far superior it it could very",
    "start": "682880",
    "end": "684880"
  },
  {
    "text": "well be but you still got to you still",
    "start": "684880",
    "end": "687000"
  },
  {
    "text": "have to make the assumption that if",
    "start": "687000",
    "end": "689360"
  },
  {
    "text": "given a choice make your code as fast",
    "start": "689360",
    "end": "692399"
  },
  {
    "text": "and learn virtually nothing new or make",
    "start": "692399",
    "end": "695279"
  },
  {
    "text": "your code as fast and learn an entire",
    "start": "695279",
    "end": "697920"
  },
  {
    "text": "new everything what do you think people",
    "start": "697920",
    "end": "700160"
  },
  {
    "text": "are going to pick you got to also",
    "start": "700160",
    "end": "701800"
  },
  {
    "text": "remember that AI is like uh John carac",
    "start": "701800",
    "end": "704000"
  },
  {
    "text": "just said this here John karmac just",
    "start": "704000",
    "end": "705680"
  },
  {
    "text": "said this uh John karmac Hero by the way",
    "start": "705680",
    "end": "708959"
  },
  {
    "text": "great guy absolutely think he's one of",
    "start": "708959",
    "end": "710800"
  },
  {
    "text": "just one of the best uh he just said it",
    "start": "710800",
    "end": "713120"
  },
  {
    "text": "was like a big",
    "start": "713120",
    "end": "714600"
  },
  {
    "text": "one here I retweeted it I retweeted it",
    "start": "714600",
    "end": "717480"
  },
  {
    "text": "he twe dude the man tweets like I do",
    "start": "717480",
    "end": "719800"
  },
  {
    "text": "can you just can you just shut up and",
    "start": "719800",
    "end": "721000"
  },
  {
    "text": "let me find what you're trying to say so",
    "start": "721000",
    "end": "722639"
  },
  {
    "text": "when he comes down to here working on AI",
    "start": "722639",
    "end": "724120"
  },
  {
    "text": "I have literally written hund little",
    "start": "724120",
    "end": "726120"
  },
  {
    "text": "literally hundreds of little experiments",
    "start": "726120",
    "end": "728079"
  },
  {
    "text": "more individual programs than I had in",
    "start": "728079",
    "end": "729720"
  },
  {
    "text": "Prior two decades so he's working in Ai",
    "start": "729720",
    "end": "732279"
  },
  {
    "text": "and he's written more in the last little",
    "start": "732279",
    "end": "734199"
  },
  {
    "text": "bit of time than he did in the two",
    "start": "734199",
    "end": "736399"
  },
  {
    "text": "decades previously for these little",
    "start": "736399",
    "end": "738199"
  },
  {
    "text": "tools and these little individual",
    "start": "738199",
    "end": "739720"
  },
  {
    "text": "programs and so the reason why I bring",
    "start": "739720",
    "end": "741720"
  },
  {
    "text": "this up is that if you want rust if you",
    "start": "741720",
    "end": "744199"
  },
  {
    "text": "think rust is going to be the successful",
    "start": "744199",
    "end": "745760"
  },
  {
    "text": "one the reality is that this is the",
    "start": "745760",
    "end": "748199"
  },
  {
    "text": "primary mode of operation and so if Mojo",
    "start": "748199",
    "end": "750720"
  },
  {
    "text": "compiles fast and it looks like a",
    "start": "750720",
    "end": "752639"
  },
  {
    "text": "language you're already familiar with",
    "start": "752639",
    "end": "754199"
  },
  {
    "text": "and it is really close to being of the",
    "start": "754199",
    "end": "756399"
  },
  {
    "text": "same speed I just I I just don't see how",
    "start": "756399",
    "end": "761480"
  },
  {
    "text": "you're going to make the sell I just",
    "start": "761480",
    "end": "763240"
  },
  {
    "text": "don't I just don't see how you're going",
    "start": "763240",
    "end": "764680"
  },
  {
    "text": "to make that sell no cost of admission",
    "start": "764680",
    "end": "766800"
  },
  {
    "text": "it wins yeah anyways science labs are",
    "start": "766800",
    "end": "769959"
  },
  {
    "text": "not uh fo uh going to switch to rust",
    "start": "769959",
    "end": "772199"
  },
  {
    "text": "quickly yeah because the problem is rust",
    "start": "772199",
    "end": "773920"
  },
  {
    "text": "rust big sale which people often",
    "start": "773920",
    "end": "775920"
  },
  {
    "text": "misunderstand is not Fearless",
    "start": "775920",
    "end": "777199"
  },
  {
    "text": "concurrency I do not think the currency",
    "start": "777199",
    "end": "778560"
  },
  {
    "text": "is that great yes it's somewhat Fearless",
    "start": "778560",
    "end": "780240"
  },
  {
    "text": "but it's not Fearless because it's just",
    "start": "780240",
    "end": "781440"
  },
  {
    "text": "Arc mutex everything or or or atomics or",
    "start": "781440",
    "end": "784240"
  },
  {
    "text": "you have to protect it in a certain kind",
    "start": "784240",
    "end": "785519"
  },
  {
    "text": "of way right the thing that's going to",
    "start": "785519",
    "end": "787000"
  },
  {
    "text": "make it the thing that makes Russ so",
    "start": "787000",
    "end": "788600"
  },
  {
    "text": "good is that it has all this memory",
    "start": "788600",
    "end": "789839"
  },
  {
    "text": "safety and when you're doing a bunch of",
    "start": "789839",
    "end": "791279"
  },
  {
    "text": "this ml stuff I don't think memory",
    "start": "791279",
    "end": "793040"
  },
  {
    "text": "safety is your Chief concern it's just",
    "start": "793040",
    "end": "794680"
  },
  {
    "text": "being able to process quick enough is",
    "start": "794680",
    "end": "796279"
  },
  {
    "text": "your like a quick efficient easy",
    "start": "796279",
    "end": "799399"
  },
  {
    "text": "experimentation and being able to",
    "start": "799399",
    "end": "800839"
  },
  {
    "text": "process fast",
    "start": "800839",
    "end": "802079"
  },
  {
    "text": "enough right like to me that's that's",
    "start": "802079",
    "end": "804959"
  },
  {
    "text": "just says like that's that's not that's",
    "start": "804959",
    "end": "807720"
  },
  {
    "text": "that's not necessarily A highly aligned",
    "start": "807720",
    "end": "810040"
  },
  {
    "text": "rust go or uh that it doesn't it doesn't",
    "start": "810040",
    "end": "812279"
  },
  {
    "text": "feel like rust is highly aligned with",
    "start": "812279",
    "end": "814519"
  },
  {
    "text": "what ml needs it's mostly aligned and it",
    "start": "814519",
    "end": "817440"
  },
  {
    "text": "could get there rust has amazing macro",
    "start": "817440",
    "end": "819279"
  },
  {
    "text": "system and it could most certainly get",
    "start": "819279",
    "end": "820800"
  },
  {
    "text": "there but I'm not sure if it will get",
    "start": "820800",
    "end": "822360"
  },
  {
    "text": "there in the sense that if it has Mo",
    "start": "822360",
    "end": "824199"
  },
  {
    "text": "like I just don't think it's like quite",
    "start": "824199",
    "end": "825800"
  },
  {
    "text": "the right use case uh which is let's see",
    "start": "825800",
    "end": "827720"
  },
  {
    "text": "hold on Mojo uses mli successor to llvm",
    "start": "827720",
    "end": "831639"
  },
  {
    "text": "which is specifically optimized for ML",
    "start": "831639",
    "end": "833160"
  },
  {
    "text": "Tas so it makes sense it' be faster yeah",
    "start": "833160",
    "end": "834759"
  },
  {
    "text": "this makes this also makes perfect sense",
    "start": "834759",
    "end": "836480"
  },
  {
    "text": "it's a compiler and everything designed",
    "start": "836480",
    "end": "839079"
  },
  {
    "text": "to be fast for this one task right",
    "start": "839079",
    "end": "841800"
  },
  {
    "text": "anyways super cool uh I mean I thought",
    "start": "841800",
    "end": "843720"
  },
  {
    "text": "this I I think this is really",
    "start": "843720",
    "end": "844759"
  },
  {
    "text": "interesting I think people should think",
    "start": "844759",
    "end": "845839"
  },
  {
    "text": "about this stuff a lot more um oh know",
    "start": "845839",
    "end": "848440"
  },
  {
    "text": "uh they do no checks yeah but that's",
    "start": "848440",
    "end": "850560"
  },
  {
    "text": "that's that's a benefit you can do no",
    "start": "850560",
    "end": "852320"
  },
  {
    "text": "checks I'm the author of fastq parsing",
    "start": "852320",
    "end": "854480"
  },
  {
    "text": "Library uh let's see and the maintainer",
    "start": "854480",
    "end": "856839"
  },
  {
    "text": "of the Julia Rex engine oh you got to",
    "start": "856839",
    "end": "859040"
  },
  {
    "text": "like link me to the one that I I don't",
    "start": "859040",
    "end": "861160"
  },
  {
    "text": "really want to do I have to read all",
    "start": "861160",
    "end": "862759"
  },
  {
    "text": "this like hey I'm happy for you uh the",
    "start": "862759",
    "end": "865399"
  },
  {
    "text": "thing is is that if you don't do any",
    "start": "865399",
    "end": "866880"
  },
  {
    "text": "checks but your program runs",
    "start": "866880",
    "end": "868120"
  },
  {
    "text": "successfully and correctly every time",
    "start": "868120",
    "end": "869600"
  },
  {
    "text": "then I don't care if there are identical",
    "start": "869600",
    "end": "871680"
  },
  {
    "text": "operations and at the end of the day",
    "start": "871680",
    "end": "873040"
  },
  {
    "text": "they both do that then yeah all right",
    "start": "873040",
    "end": "874839"
  },
  {
    "text": "the tldr tldr is that Mojo",
    "start": "874839",
    "end": "876680"
  },
  {
    "text": "implementation is fast because it",
    "start": "876680",
    "end": "877839"
  },
  {
    "text": "essentially a mem Char uh M cars four",
    "start": "877839",
    "end": "880320"
  },
  {
    "text": "times per read uh to find a new line",
    "start": "880320",
    "end": "882440"
  },
  {
    "text": "without any kind of validation or",
    "start": "882440",
    "end": "883800"
  },
  {
    "text": "further checking uh the M car is",
    "start": "883800",
    "end": "885639"
  },
  {
    "text": "manually implemented by loading simd",
    "start": "885639",
    "end": "887279"
  },
  {
    "text": "vectors and comparing uh to a zero yeah",
    "start": "887279",
    "end": "889519"
  },
  {
    "text": "to a 10 effectively and continuing uh if",
    "start": "889519",
    "end": "892360"
  },
  {
    "text": "the result is all zeros this is not Ser",
    "start": "892360",
    "end": "895079"
  },
  {
    "text": "let's see this is not a serious fast CU",
    "start": "895079",
    "end": "896759"
  },
  {
    "text": "parser it cuts so many corners that it",
    "start": "896759",
    "end": "898639"
  },
  {
    "text": "uh doesn't doesn't really make it",
    "start": "898639",
    "end": "900240"
  },
  {
    "text": "comparable to other parsers although I'm",
    "start": "900240",
    "end": "901800"
  },
  {
    "text": "not crazy about needle Tales uh somewhat",
    "start": "901800",
    "end": "903800"
  },
  {
    "text": "similar approach either okay I mean",
    "start": "903800",
    "end": "906000"
  },
  {
    "text": "that's that's cool okay",
    "start": "906000",
    "end": "908160"
  },
  {
    "text": "so reasonable can we all agree that",
    "start": "908160",
    "end": "910519"
  },
  {
    "text": "that's that that that's a reasonable",
    "start": "910519",
    "end": "913320"
  },
  {
    "text": "take so let let me ask you this",
    "start": "913320",
    "end": "916160"
  },
  {
    "text": "one let's say that when it's all done",
    "start": "916160",
    "end": "918600"
  },
  {
    "text": "it's all said and done Mojo is within",
    "start": "918600",
    "end": "922120"
  },
  {
    "text": "spitting distance of rust do you think",
    "start": "922120",
    "end": "924519"
  },
  {
    "text": "it's going to do you think it's going to",
    "start": "924519",
    "end": "925920"
  },
  {
    "text": "be a problem I mean and also he and also",
    "start": "925920",
    "end": "929079"
  },
  {
    "text": "the author did say that after finding",
    "start": "929079",
    "end": "931160"
  },
  {
    "text": "the new lines he does a postline",
    "start": "931160",
    "end": "933720"
  },
  {
    "text": "processing to validate it Mojo is a",
    "start": "933720",
    "end": "935600"
  },
  {
    "text": "stupid name Mojo is a stupid name I'll",
    "start": "935600",
    "end": "937399"
  },
  {
    "text": "give you that rust is also a stupid name",
    "start": "937399",
    "end": "939880"
  },
  {
    "text": "because it's named after a fungus not",
    "start": "939880",
    "end": "941120"
  },
  {
    "text": "the stuff on metal and everyone thinks",
    "start": "941120",
    "end": "942360"
  },
  {
    "text": "it's named after the stuff on metal so I",
    "start": "942360",
    "end": "944639"
  },
  {
    "text": "mean really if you think about it go is",
    "start": "944639",
    "end": "946800"
  },
  {
    "text": "the only normally named language",
    "start": "946800",
    "end": "948759"
  },
  {
    "text": "JavaScript is a stupid name Julia",
    "start": "948759",
    "end": "950720"
  },
  {
    "text": "doesn't make any sense okay I I am",
    "start": "950720",
    "end": "952600"
  },
  {
    "text": "curious though I am curious what because",
    "start": "952600",
    "end": "954319"
  },
  {
    "text": "you know how many times have you seen",
    "start": "954319",
    "end": "955880"
  },
  {
    "text": "this by the way how many times have you",
    "start": "955880",
    "end": "957440"
  },
  {
    "text": "seen effectively this where someone",
    "start": "957440",
    "end": "959040"
  },
  {
    "text": "sells a faster version of something",
    "start": "959040",
    "end": "961000"
  },
  {
    "text": "that's not fully complete right like so",
    "start": "961000",
    "end": "963199"
  },
  {
    "text": "bun bun does this with their async",
    "start": "963199",
    "end": "965399"
  },
  {
    "text": "handling in node there's a lot more",
    "start": "965399",
    "end": "967360"
  },
  {
    "text": "Hooks and stuff involved in async",
    "start": "967360",
    "end": "969279"
  },
  {
    "text": "handling that bun simply doesn't have",
    "start": "969279",
    "end": "971399"
  },
  {
    "text": "and then bun sells itself as being a",
    "start": "971399",
    "end": "973279"
  },
  {
    "text": "faster version of node but it just",
    "start": "973279",
    "end": "974720"
  },
  {
    "text": "simply doesn't do the same checks like",
    "start": "974720",
    "end": "976639"
  },
  {
    "text": "this is a pretty this is a pretty old uh",
    "start": "976639",
    "end": "978920"
  },
  {
    "text": "programmer Pastime which is pretty",
    "start": "978920",
    "end": "981040"
  },
  {
    "text": "interesting I implemented the same",
    "start": "981040",
    "end": "982440"
  },
  {
    "text": "algorithm in less than 100 lines in",
    "start": "982440",
    "end": "983920"
  },
  {
    "text": "Julia and were 60% faster than the",
    "start": "983920",
    "end": "986079"
  },
  {
    "text": "provided needletail Benchmark beating",
    "start": "986079",
    "end": "987680"
  },
  {
    "text": "Mojo I'm confident it could be done in",
    "start": "987680",
    "end": "989319"
  },
  {
    "text": "Rust too interesting so Julia is really",
    "start": "989319",
    "end": "991279"
  },
  {
    "text": "trying to get in here isn't it a skill",
    "start": "991279",
    "end": "992920"
  },
  {
    "text": "issue okay well I mean this is all",
    "start": "992920",
    "end": "994480"
  },
  {
    "text": "interesting so it sounds like I mean it",
    "start": "994480",
    "end": "996440"
  },
  {
    "text": "honestly sounds like we got Julia in the",
    "start": "996440",
    "end": "999120"
  },
  {
    "text": "mix Julia is the one that does the full",
    "start": "999120",
    "end": "1001880"
  },
  {
    "text": "implementation and the rest cut Corners",
    "start": "1001880",
    "end": "1004560"
  },
  {
    "text": "yet they're still used and people accept",
    "start": "1004560",
    "end": "1006519"
  },
  {
    "text": "them so I'm not I'm not perfectly I I",
    "start": "1006519",
    "end": "1008639"
  },
  {
    "text": "don't understand this does that make",
    "start": "1008639",
    "end": "1010680"
  },
  {
    "text": "sense I don't understand the fact that",
    "start": "1010680",
    "end": "1013360"
  },
  {
    "text": "this needle Tales has a similar approach",
    "start": "1013360",
    "end": "1015959"
  },
  {
    "text": "and it's used like what's the what's the",
    "start": "1015959",
    "end": "1017480"
  },
  {
    "text": "point what are these checks doing that",
    "start": "1017480",
    "end": "1019600"
  },
  {
    "text": "uh these checks aren't doing that make",
    "start": "1019600",
    "end": "1020959"
  },
  {
    "text": "it okay I don't I I don't quite get it",
    "start": "1020959",
    "end": "1023079"
  },
  {
    "text": "it sounds like bioinformaticians aren't",
    "start": "1023079",
    "end": "1024640"
  },
  {
    "text": "good developers who would have thought",
    "start": "1024640",
    "end": "1025760"
  },
  {
    "text": "that Julio yeah Julia uh yeah Chris lner",
    "start": "1025760",
    "end": "1029038"
  },
  {
    "text": "has a respect for Julia dude everyone",
    "start": "1029039",
    "end": "1030558"
  },
  {
    "text": "that I know that does Julia loves Julia",
    "start": "1030559",
    "end": "1032839"
  },
  {
    "text": "that's all I know anyways this is super",
    "start": "1032839",
    "end": "1034240"
  },
  {
    "text": "interesting I mean it goes to show it",
    "start": "1034240",
    "end": "1036240"
  },
  {
    "text": "dude we see this you see this over and",
    "start": "1036240",
    "end": "1038120"
  },
  {
    "text": "over again that anytime you see a",
    "start": "1038120",
    "end": "1039640"
  },
  {
    "text": "benchmark just be wary about it I mean I",
    "start": "1039640",
    "end": "1041839"
  },
  {
    "text": "think that's the biggest takeaway when",
    "start": "1041839",
    "end": "1043360"
  },
  {
    "text": "someone says something is 50% faster",
    "start": "1043360",
    "end": "1045319"
  },
  {
    "text": "than another thing got to remember that",
    "start": "1045319",
    "end": "1047480"
  },
  {
    "text": "at the end of the day",
    "start": "1047480",
    "end": "1049520"
  },
  {
    "text": "you can do any type of low-level",
    "start": "1049520",
    "end": "1052120"
  },
  {
    "text": "operation in Rust you can do the same",
    "start": "1052120",
    "end": "1054240"
  },
  {
    "text": "low-level operations in C therefore",
    "start": "1054240",
    "end": "1057200"
  },
  {
    "text": "there really shouldn't be a difference",
    "start": "1057200",
    "end": "1059760"
  },
  {
    "text": "in speed unless if there's some sort of",
    "start": "1059760",
    "end": "1062280"
  },
  {
    "text": "uh compiler like difference right or how",
    "start": "1062280",
    "end": "1064640"
  },
  {
    "text": "it's being translated difference right",
    "start": "1064640",
    "end": "1066600"
  },
  {
    "text": "like that's they're all technically",
    "start": "1066600",
    "end": "1069160"
  },
  {
    "text": "going down to like the same level where",
    "start": "1069160",
    "end": "1071760"
  },
  {
    "text": "it doesn't make sense like you you can",
    "start": "1071760",
    "end": "1073520"
  },
  {
    "text": "never say that go will be as fast as",
    "start": "1073520",
    "end": "1075280"
  },
  {
    "text": "rust or JavaScript will be as fast as go",
    "start": "1075280",
    "end": "1078640"
  },
  {
    "text": "or or Ruby is is neat like you can never",
    "start": "1078640",
    "end": "1081840"
  },
  {
    "text": "say any of those things because they",
    "start": "1081840",
    "end": "1083360"
  },
  {
    "text": "each have their own like kind of they",
    "start": "1083360",
    "end": "1085200"
  },
  {
    "text": "each have their own bands of of runtime",
    "start": "1085200",
    "end": "1088039"
  },
  {
    "text": "is saying 10x faster the most realistic",
    "start": "1088039",
    "end": "1089679"
  },
  {
    "text": "estimate of every single case being 50%",
    "start": "1089679",
    "end": "1091440"
  },
  {
    "text": "faster yeah that's the Dax tweet I I",
    "start": "1091440",
    "end": "1093640"
  },
  {
    "text": "believe that's the Dax tweet or his",
    "start": "1093640",
    "end": "1095000"
  },
  {
    "text": "co-founder tweet which is when something",
    "start": "1095000",
    "end": "1097000"
  },
  {
    "text": "is when something is 10x faster you say",
    "start": "1097000",
    "end": "1098840"
  },
  {
    "text": "it's 10x faster when something's 100x",
    "start": "1098840",
    "end": "1100440"
  },
  {
    "text": "faster you say it's 10x faster when",
    "start": "1100440",
    "end": "1101679"
  },
  {
    "text": "something is 50% faster you say it's 10x",
    "start": "1101679",
    "end": "1103400"
  },
  {
    "text": "faster and if if something's half the",
    "start": "1103400",
    "end": "1105440"
  },
  {
    "text": "speed you say it's 10x faster you just",
    "start": "1105440",
    "end": "1107280"
  },
  {
    "text": "say universally as a developer you just",
    "start": "1107280",
    "end": "1109480"
  },
  {
    "text": "say 10x faster yeah but goes pretty damn",
    "start": "1109480",
    "end": "1112400"
  },
  {
    "text": "close to rust Andy it's not damn close",
    "start": "1112400",
    "end": "1114280"
  },
  {
    "text": "it's it's not for simple stuff sure but",
    "start": "1114280",
    "end": "1116559"
  },
  {
    "text": "once you start getting into a bunch of",
    "start": "1116559",
    "end": "1117960"
  },
  {
    "text": "object allocations and deallocations it",
    "start": "1117960",
    "end": "1119840"
  },
  {
    "text": "is different it's it's it's it's",
    "start": "1119840",
    "end": "1121240"
  },
  {
    "text": "different and that's fine right that's",
    "start": "1121240",
    "end": "1124039"
  },
  {
    "text": "fine it's close it's very close I",
    "start": "1124039",
    "end": "1126919"
  },
  {
    "text": "wouldn't say it's close enough that's",
    "start": "1126919",
    "end": "1128240"
  },
  {
    "text": "that's a statement that has no meaning",
    "start": "1128240",
    "end": "1129480"
  },
  {
    "text": "because you has to Def you have to",
    "start": "1129480",
    "end": "1130679"
  },
  {
    "text": "define the task in which you're doing",
    "start": "1130679",
    "end": "1132120"
  },
  {
    "text": "something with anyways I like this",
    "start": "1132120",
    "end": "1135039"
  },
  {
    "text": "article it was interesting good thought",
    "start": "1135039",
    "end": "1136679"
  },
  {
    "text": "experiment good thing to remember I",
    "start": "1136679",
    "end": "1138200"
  },
  {
    "text": "think it's really cool to see where",
    "start": "1138200",
    "end": "1139360"
  },
  {
    "text": "Mojo's going to go I think everybody",
    "start": "1139360",
    "end": "1140720"
  },
  {
    "text": "should be excited where Mojo's going not",
    "start": "1140720",
    "end": "1143080"
  },
  {
    "text": "necessarily the specifics we're seeing",
    "start": "1143080",
    "end": "1144640"
  },
  {
    "text": "right now uh you know in the next 5",
    "start": "1144640",
    "end": "1146480"
  },
  {
    "text": "years will you just hear everybody",
    "start": "1146480",
    "end": "1147960"
  },
  {
    "text": "talking about Mo Mojo you very well",
    "start": "1147960",
    "end": "1149919"
  },
  {
    "text": "could like that very well could be the",
    "start": "1149919",
    "end": "1151760"
  },
  {
    "text": "future is that Mojo is the new one that",
    "start": "1151760",
    "end": "1153679"
  },
  {
    "text": "everybody talks about or maybe they just",
    "start": "1153679",
    "end": "1155400"
  },
  {
    "text": "call that python I don't know the",
    "start": "1155400",
    "end": "1159600"
  },
  {
    "text": "name is the primagen",
    "start": "1159720",
    "end": "1163640"
  }
]