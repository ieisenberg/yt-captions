[
  {
    "start": "0",
    "end": "210000"
  },
  {
    "text": "all right hey C++ paper paper cuts uh my",
    "start": "40",
    "end": "3679"
  },
  {
    "text": "current day job is now again a C++ rule",
    "start": "3679",
    "end": "6759"
  },
  {
    "text": "Hertz i' I've been there I recently had",
    "start": "6759",
    "end": "8440"
  },
  {
    "text": "that happen like six months ago where I",
    "start": "8440",
    "end": "9719"
  },
  {
    "text": "had to go back into C++ land for a while",
    "start": "9719",
    "end": "11759"
  },
  {
    "text": "always is emotional bruising uh and so I",
    "start": "11759",
    "end": "14440"
  },
  {
    "text": "find myself yet again focusing on this",
    "start": "14440",
    "end": "16320"
  },
  {
    "text": "blog post on the downsides of C++",
    "start": "16320",
    "end": "19000"
  },
  {
    "text": "overall I have found returning to active",
    "start": "19000",
    "end": "21560"
  },
  {
    "text": "C++ Dev to be exactly what I expected I",
    "start": "21560",
    "end": "24359"
  },
  {
    "text": "still have the skills and can still be",
    "start": "24359",
    "end": "26640"
  },
  {
    "text": "effective in it but now I have uh worked",
    "start": "26640",
    "end": "29279"
  },
  {
    "text": "in a more modern programming language",
    "start": "29279",
    "end": "31080"
  },
  {
    "text": "with less Legacy cruff the downsides of",
    "start": "31080",
    "end": "33000"
  },
  {
    "text": "C++ sting more isn't that funny how that",
    "start": "33000",
    "end": "35920"
  },
  {
    "text": "is like when I used to program for i7",
    "start": "35920",
    "end": "38840"
  },
  {
    "text": "and 8 IE8 felt like a godsend ie7 felt",
    "start": "38840",
    "end": "42840"
  },
  {
    "text": "horrifying I think the rest is very very",
    "start": "42840",
    "end": "45600"
  },
  {
    "text": "obvious as your environment and Things",
    "start": "45600",
    "end": "47920"
  },
  {
    "text": "become more modern the feeling of pain",
    "start": "47920",
    "end": "51039"
  },
  {
    "text": "becomes more real uh there are there are",
    "start": "51039",
    "end": "54120"
  },
  {
    "text": "so many features I miss from rust not",
    "start": "54120",
    "end": "56039"
  },
  {
    "text": "only the obvious safety features uh this",
    "start": "56039",
    "end": "58680"
  },
  {
    "text": "one I feel like um Like the quote",
    "start": "58680",
    "end": "60399"
  },
  {
    "text": "unquote safety features just throw",
    "start": "60399",
    "end": "62199"
  },
  {
    "text": "things in unique pointers and shared",
    "start": "62199",
    "end": "63640"
  },
  {
    "text": "pointers and you you have like 95% of",
    "start": "63640",
    "end": "65960"
  },
  {
    "text": "what you got from the borrow Checker",
    "start": "65960",
    "end": "68119"
  },
  {
    "text": "it's pretty nice or even primarily those",
    "start": "68119",
    "end": "70280"
  },
  {
    "text": "but also features that C++ could easily",
    "start": "70280",
    "end": "72400"
  },
  {
    "text": "add like some types uh called enums I",
    "start": "72400",
    "end": "75040"
  },
  {
    "text": "mean you have t you have you just have",
    "start": "75040",
    "end": "77680"
  },
  {
    "text": "less convenience Syntax for this I mean",
    "start": "77680",
    "end": "80079"
  },
  {
    "text": "you still have that you just have to",
    "start": "80079",
    "end": "81520"
  },
  {
    "text": "make a little Union type discriminator",
    "start": "81520",
    "end": "83560"
  },
  {
    "text": "and boom you got it right it's annoying",
    "start": "83560",
    "end": "85360"
  },
  {
    "text": "but I get it I get it or first class",
    "start": "85360",
    "end": "87240"
  },
  {
    "text": "support for tupal but it doesn't quite",
    "start": "87240",
    "end": "89119"
  },
  {
    "text": "have the same",
    "start": "89119",
    "end": "91840"
  },
  {
    "text": "it's definitely more dangerous I will I",
    "start": "91880",
    "end": "93600"
  },
  {
    "text": "I agree with you it's more dangerous",
    "start": "93600",
    "end": "94880"
  },
  {
    "text": "it's more dangerous uh I I you know or",
    "start": "94880",
    "end": "98479"
  },
  {
    "text": "first class support for tupal uh",
    "start": "98479",
    "end": "101280"
  },
  {
    "text": "actually I do like tupal tupal are",
    "start": "101280",
    "end": "102680"
  },
  {
    "text": "glorious uh tuples are glorious until I",
    "start": "102680",
    "end": "104560"
  },
  {
    "text": "use them I swear every time I use a",
    "start": "104560",
    "end": "106079"
  },
  {
    "text": "tuple that zero and one syntax triggers",
    "start": "106079",
    "end": "109680"
  },
  {
    "text": "me it just triggers me you know you use",
    "start": "109680",
    "end": "111320"
  },
  {
    "text": "a tuple because it's convenient and then",
    "start": "111320",
    "end": "112880"
  },
  {
    "text": "after you get done using a tuple you",
    "start": "112880",
    "end": "114280"
  },
  {
    "text": "realize a struct is no different than a",
    "start": "114280",
    "end": "115719"
  },
  {
    "text": "tupal but it just has nicer names and",
    "start": "115719",
    "end": "118159"
  },
  {
    "text": "you go why am I using that smart",
    "start": "118159",
    "end": "120039"
  },
  {
    "text": "pointers are slow this is true uh smart",
    "start": "120039",
    "end": "122640"
  },
  {
    "text": "pointers are much slower you're",
    "start": "122640",
    "end": "124079"
  },
  {
    "text": "absolutely right but so is the 1,000",
    "start": "124079",
    "end": "126840"
  },
  {
    "text": "calls to do clone in my rust program",
    "start": "126840",
    "end": "130360"
  },
  {
    "text": "okay that also is very",
    "start": "130360",
    "end": "133160"
  },
  {
    "text": "slow that also is extremely slow so it's",
    "start": "133160",
    "end": "136000"
  },
  {
    "text": "like which slow do we want to use I",
    "start": "136000",
    "end": "138000"
  },
  {
    "text": "don't know which slow would you like to",
    "start": "138000",
    "end": "139440"
  },
  {
    "text": "use I'm just saying I'm just throwing it",
    "start": "139440",
    "end": "141400"
  },
  {
    "text": "out there that I agree that having a",
    "start": "141400",
    "end": "143280"
  },
  {
    "text": "compiler check the unique pointer of",
    "start": "143280",
    "end": "145840"
  },
  {
    "text": "things is much better but they are",
    "start": "145840",
    "end": "148319"
  },
  {
    "text": "slower uh before I start getting into",
    "start": "148319",
    "end": "150720"
  },
  {
    "text": "the paper cuts though I want to address",
    "start": "150720",
    "end": "152319"
  },
  {
    "text": "one of the primary defenses I've seen of",
    "start": "152319",
    "end": "154000"
  },
  {
    "text": "C++ one that I found particularly",
    "start": "154000",
    "end": "156040"
  },
  {
    "text": "baffling it goes something like this C++",
    "start": "156040",
    "end": "158840"
  },
  {
    "text": "is a great programming language okay",
    "start": "158840",
    "end": "160440"
  },
  {
    "text": "that is baffling I don't know anybody",
    "start": "160440",
    "end": "162599"
  },
  {
    "text": "that says this like I don't know anybody",
    "start": "162599",
    "end": "166000"
  },
  {
    "text": "other than game devs that say this okay",
    "start": "166000",
    "end": "167720"
  },
  {
    "text": "this is very strange take what is this",
    "start": "167720",
    "end": "169920"
  },
  {
    "text": "uh the complaints are just from people",
    "start": "169920",
    "end": "171360"
  },
  {
    "text": "who aren't up to it if they were better",
    "start": "171360",
    "end": "174280"
  },
  {
    "text": "programmers they'd appreciate the C++",
    "start": "174280",
    "end": "176280"
  },
  {
    "text": "way of doing things and they wouldn't",
    "start": "176280",
    "end": "177560"
  },
  {
    "text": "need their hand their handheld language",
    "start": "177560",
    "end": "179720"
  },
  {
    "text": "anges like rust are not as helpful for",
    "start": "179720",
    "end": "181319"
  },
  {
    "text": "such true professionals the thing is is",
    "start": "181319",
    "end": "182959"
  },
  {
    "text": "you can make the identical argument for",
    "start": "182959",
    "end": "185360"
  },
  {
    "text": "rust you start using rust and you make",
    "start": "185360",
    "end": "188920"
  },
  {
    "text": "some bad design decisions early because",
    "start": "188920",
    "end": "191040"
  },
  {
    "text": "you don't understand and then you get",
    "start": "191040",
    "end": "192799"
  },
  {
    "text": "into this point where your program",
    "start": "192799",
    "end": "194360"
  },
  {
    "text": "becomes just unmaintainable without a",
    "start": "194360",
    "end": "197000"
  },
  {
    "text": "full rewrite because you've just just",
    "start": "197000",
    "end": "199080"
  },
  {
    "text": "done up the rust way of doing things and",
    "start": "199080",
    "end": "201280"
  },
  {
    "text": "people are like well if only you",
    "start": "201280",
    "end": "202599"
  },
  {
    "text": "understood the idiomatic rust way of",
    "start": "202599",
    "end": "205080"
  },
  {
    "text": "doing things again it's all skill issues",
    "start": "205080",
    "end": "208000"
  },
  {
    "text": "in all languages that argument is just a",
    "start": "208000",
    "end": "210879"
  },
  {
    "text": "a",
    "start": "210879",
    "end": "211720"
  },
  {
    "text": "snoozefest it's always been a snoozefest",
    "start": "211720",
    "end": "214080"
  },
  {
    "text": "it will always be a snoozefest and it",
    "start": "214080",
    "end": "215640"
  },
  {
    "text": "exists in every language it's just some",
    "start": "215640",
    "end": "218519"
  },
  {
    "text": "make it some make it easier for you to",
    "start": "218519",
    "end": "220239"
  },
  {
    "text": "go longer with your bad decisions and I",
    "start": "220239",
    "end": "222000"
  },
  {
    "text": "think that that's a good thing okay I'm",
    "start": "222000",
    "end": "224200"
  },
  {
    "text": "going to throw that out there that's why",
    "start": "224200",
    "end": "225680"
  },
  {
    "text": "I think go is so successful because you",
    "start": "225680",
    "end": "227680"
  },
  {
    "text": "can go longer with a bad decision than",
    "start": "227680",
    "end": "230519"
  },
  {
    "text": "you can in",
    "start": "230519",
    "end": "232840"
  },
  {
    "text": "Rust think about that for a second",
    "start": "232840",
    "end": "235879"
  },
  {
    "text": "obviously the uh the phrasing is a bit",
    "start": "235879",
    "end": "238439"
  },
  {
    "text": "of a parody but I have seen this sort of",
    "start": "238439",
    "end": "240079"
  },
  {
    "text": "attitude so many times the most",
    "start": "240079",
    "end": "241280"
  },
  {
    "text": "charitable view I can take of it is that",
    "start": "241280",
    "end": "243519"
  },
  {
    "text": "a a claim that C++ difficulty is a sign",
    "start": "243519",
    "end": "246439"
  },
  {
    "text": "of its power and the natural cost of",
    "start": "246439",
    "end": "248480"
  },
  {
    "text": "using a powerful programming language",
    "start": "248480",
    "end": "250599"
  },
  {
    "text": "what it reads like to me in many cases",
    "start": "250599",
    "end": "252439"
  },
  {
    "text": "however is a form of elitism a general",
    "start": "252439",
    "end": "254480"
  },
  {
    "text": "idea that make uh making things easy for",
    "start": "254480",
    "end": "257280"
  },
  {
    "text": "uh poor programmers is pointless that's",
    "start": "257280",
    "end": "260079"
  },
  {
    "text": "why we invented uh JavaScript okay you",
    "start": "260079",
    "end": "262520"
  },
  {
    "text": "let the poor programmers use",
    "start": "262520",
    "end": "265639"
  },
  {
    "text": "JavaScript I'm getting canceled today",
    "start": "265639",
    "end": "267840"
  },
  {
    "text": "boys uh and that good program don't",
    "start": "267840",
    "end": "270000"
  },
  {
    "text": "benefit from making things easier uh as",
    "start": "270000",
    "end": "272440"
  },
  {
    "text": "someone who has programmed C++",
    "start": "272440",
    "end": "274199"
  },
  {
    "text": "professionally for a majority of my",
    "start": "274199",
    "end": "275520"
  },
  {
    "text": "career and who has taught a company",
    "start": "275520",
    "end": "277360"
  },
  {
    "text": "inter internal classes in advanced C++",
    "start": "277360",
    "end": "279240"
  },
  {
    "text": "this is nonsense to me I do know how to",
    "start": "279240",
    "end": "281919"
  },
  {
    "text": "navigate many paper cuts and foot guns",
    "start": "281919",
    "end": "283680"
  },
  {
    "text": "of C++ and I'm happy to do so when",
    "start": "283680",
    "end": "285600"
  },
  {
    "text": "working on a C++ code base but",
    "start": "285600",
    "end": "287360"
  },
  {
    "text": "experience as I am they still slow me",
    "start": "287360",
    "end": "290039"
  },
  {
    "text": "down and dist uh distract me taking",
    "start": "290039",
    "end": "292560"
  },
  {
    "text": "Focus away from the actual problems I'm",
    "start": "292560",
    "end": "294039"
  },
  {
    "text": "trying to solve and resulting in less",
    "start": "294039",
    "end": "296080"
  },
  {
    "text": "maintainable",
    "start": "296080",
    "end": "297680"
  },
  {
    "text": "code yeah I agree uh it sucks I am no",
    "start": "297680",
    "end": "301440"
  },
  {
    "text": "defender of C++ as uh as for the upside",
    "start": "301440",
    "end": "304440"
  },
  {
    "text": "I see very little any way in which C+",
    "start": "304440",
    "end": "307680"
  },
  {
    "text": "plus is more performant or more",
    "start": "307680",
    "end": "309039"
  },
  {
    "text": "appropriate than rust in terms of",
    "start": "309039",
    "end": "310560"
  },
  {
    "text": "platform support Legacy code bases",
    "start": "310560",
    "end": "312440"
  },
  {
    "text": "optimization that are only available in",
    "start": "312440",
    "end": "314120"
  },
  {
    "text": "specific compilers that often or that",
    "start": "314120",
    "end": "316240"
  },
  {
    "text": "happen to not support rust or other",
    "start": "316240",
    "end": "317680"
  },
  {
    "text": "concerns irrelevant to the actual design",
    "start": "317680",
    "end": "319759"
  },
  {
    "text": "of a programming language I mean there",
    "start": "319759",
    "end": "321600"
  },
  {
    "text": "are in there are a lot of things that",
    "start": "321600",
    "end": "323759"
  },
  {
    "text": "are very nice you know like when you're",
    "start": "323759",
    "end": "325919"
  },
  {
    "text": "doing uh a uh an array of strs and",
    "start": "325919",
    "end": "328199"
  },
  {
    "text": "you're mutating and you're playing",
    "start": "328199",
    "end": "329240"
  },
  {
    "text": "around",
    "start": "329240",
    "end": "330039"
  },
  {
    "text": "the amount of dancing and things you",
    "start": "330039",
    "end": "331720"
  },
  {
    "text": "have to do in Rust are not as much as",
    "start": "331720",
    "end": "333600"
  },
  {
    "text": "you have to do in C++ granted there's",
    "start": "333600",
    "end": "335360"
  },
  {
    "text": "more foot",
    "start": "335360",
    "end": "337120"
  },
  {
    "text": "guns",
    "start": "337120",
    "end": "339240"
  },
  {
    "text": "but there's things you can do in C++",
    "start": "339240",
    "end": "342240"
  },
  {
    "text": "that are just simpler problems to solve",
    "start": "342240",
    "end": "344280"
  },
  {
    "text": "than you can do in Rust uh while I'm",
    "start": "344280",
    "end": "346560"
  },
  {
    "text": "proud of my C++ skills I am not too",
    "start": "346560",
    "end": "348440"
  },
  {
    "text": "proud to appreciate the better",
    "start": "348440",
    "end": "349600"
  },
  {
    "text": "technology can render them partially",
    "start": "349600",
    "end": "351120"
  },
  {
    "text": "obsolete uh and I'm not too proud to",
    "start": "351120",
    "end": "353280"
  },
  {
    "text": "appreciate that uh having features that",
    "start": "353280",
    "end": "356120"
  },
  {
    "text": "make it easier in most cases it's not a",
    "start": "356120",
    "end": "358080"
  },
  {
    "text": "matter of programming languages doing",
    "start": "358080",
    "end": "359680"
  },
  {
    "text": "more work for me but of C++ creating",
    "start": "359680",
    "end": "362080"
  },
  {
    "text": "unnecessary uh extra make work yeah this",
    "start": "362080",
    "end": "364840"
  },
  {
    "text": "is this is perfectly reasonable take",
    "start": "364840",
    "end": "366880"
  },
  {
    "text": "often due to the decisions that made",
    "start": "366880",
    "end": "368240"
  },
  {
    "text": "sense when they were made but not long",
    "start": "368240",
    "end": "370199"
  },
  {
    "text": "since stopped making sense don't get me",
    "start": "370199",
    "end": "372440"
  },
  {
    "text": "started on header files",
    "start": "372440",
    "end": "375400"
  },
  {
    "text": "yeah header files are a bit emotional",
    "start": "375400",
    "end": "377960"
  },
  {
    "text": "for me",
    "start": "377960",
    "end": "380800"
  },
  {
    "text": "um me hates it I I do want you to know",
    "start": "381479",
    "end": "384000"
  },
  {
    "text": "that I'm not ragging on Rust it's just I",
    "start": "384000",
    "end": "386680"
  },
  {
    "text": "think that people with excellent C++",
    "start": "386680",
    "end": "388800"
  },
  {
    "text": "background",
    "start": "388800",
    "end": "390280"
  },
  {
    "text": "are the worst rust is the greatest",
    "start": "390280",
    "end": "392560"
  },
  {
    "text": "people because you can take you can",
    "start": "392560",
    "end": "394840"
  },
  {
    "text": "almost virtually transfer all of your",
    "start": "394840",
    "end": "396759"
  },
  {
    "text": "thoughts about C++ onto",
    "start": "396759",
    "end": "400400"
  },
  {
    "text": "rust you know what I mean the reason why",
    "start": "400759",
    "end": "403639"
  },
  {
    "text": "header files suck is that it's called",
    "start": "403639",
    "end": "405800"
  },
  {
    "text": "the module why do you need to define the",
    "start": "405800",
    "end": "407599"
  },
  {
    "text": "same thing twice what the hell are you",
    "start": "407599",
    "end": "409280"
  },
  {
    "text": "doing defining things right it makes it",
    "start": "409280",
    "end": "411440"
  },
  {
    "text": "literally makes no sense that you have a",
    "start": "411440",
    "end": "413319"
  },
  {
    "text": "file that says here is what my class",
    "start": "413319",
    "end": "415479"
  },
  {
    "text": "looks like and then you have another",
    "start": "415479",
    "end": "417039"
  },
  {
    "text": "file that says here's how you implement",
    "start": "417039",
    "end": "418720"
  },
  {
    "text": "it and yet it's for better compilation",
    "start": "418720",
    "end": "421479"
  },
  {
    "text": "speed you know what's way cooler single",
    "start": "421479",
    "end": "423919"
  },
  {
    "text": "pass to create the header second pass to",
    "start": "423919",
    "end": "426720"
  },
  {
    "text": "create the thing okay it's called a two",
    "start": "426720",
    "end": "428879"
  },
  {
    "text": "pass compiler or a three pass compiler",
    "start": "428879",
    "end": "430319"
  },
  {
    "text": "or an N pass compiler okay they've been",
    "start": "430319",
    "end": "432280"
  },
  {
    "text": "doing it for years somehow I'm able to",
    "start": "432280",
    "end": "434800"
  },
  {
    "text": "State several functions that will be",
    "start": "434800",
    "end": "436680"
  },
  {
    "text": "used and it doesn't have to compile the",
    "start": "436680",
    "end": "438280"
  },
  {
    "text": "whole gosh darn thing to figure out what",
    "start": "438280",
    "end": "439680"
  },
  {
    "text": "the hell I'm exporting right it doesn't",
    "start": "439680",
    "end": "443039"
  },
  {
    "text": "have to be crazy yes yes yes and header",
    "start": "443039",
    "end": "446639"
  },
  {
    "text": "file still has all the private members",
    "start": "446639",
    "end": "448199"
  },
  {
    "text": "of the class inside",
    "start": "448199",
    "end": "450039"
  },
  {
    "text": "if I remember C++ is seven passes which",
    "start": "450039",
    "end": "452280"
  },
  {
    "text": "is crazy I don't know if that's true but",
    "start": "452280",
    "end": "454520"
  },
  {
    "text": "that's wild right single pass you can",
    "start": "454520",
    "end": "456400"
  },
  {
    "text": "get the shape of things right you can",
    "start": "456400",
    "end": "458240"
  },
  {
    "text": "make these decisions you don't need",
    "start": "458240",
    "end": "460000"
  },
  {
    "text": "something to tell you what's already",
    "start": "460000",
    "end": "462759"
  },
  {
    "text": "available uh but I also want my",
    "start": "462759",
    "end": "464840"
  },
  {
    "text": "programming a language to be beginner",
    "start": "464840",
    "end": "466440"
  },
  {
    "text": "friendly I'm always going to work with",
    "start": "466440",
    "end": "468440"
  },
  {
    "text": "other programmers who have a variety of",
    "start": "468440",
    "end": "469960"
  },
  {
    "text": "skill sets and I would rather not have",
    "start": "469960",
    "end": "471960"
  },
  {
    "text": "to clean up my uh colleagues mistakes or",
    "start": "471960",
    "end": "474199"
  },
  {
    "text": "mistakes of earlier more foolish",
    "start": "474199",
    "end": "475919"
  },
  {
    "text": "versions of myself if making a",
    "start": "475919",
    "end": "477680"
  },
  {
    "text": "programming language more beginner",
    "start": "477680",
    "end": "478919"
  },
  {
    "text": "friendly sacrifices power then I agree",
    "start": "478919",
    "end": "481240"
  },
  {
    "text": "that some programming language should",
    "start": "481240",
    "end": "483039"
  },
  {
    "text": "not do it yep I yeah I agree with that",
    "start": "483039",
    "end": "486800"
  },
  {
    "text": "go go is a great language for this but",
    "start": "486800",
    "end": "488319"
  },
  {
    "text": "many even most of C++ beginner",
    "start": "488319",
    "end": "490479"
  },
  {
    "text": "unfriendly and expert annoying features",
    "start": "490479",
    "end": "492479"
  },
  {
    "text": "do not in fact make the language more",
    "start": "492479",
    "end": "493919"
  },
  {
    "text": "powerful so without further Ado here are",
    "start": "493919",
    "end": "495840"
  },
  {
    "text": "the biggest paper cuts I've noticed in",
    "start": "495840",
    "end": "497400"
  },
  {
    "text": "the past month of returning to C++",
    "start": "497400",
    "end": "499039"
  },
  {
    "text": "development love it love it Con is not",
    "start": "499039",
    "end": "501560"
  },
  {
    "start": "500000",
    "end": "795000"
  },
  {
    "text": "the default yeah I do agree I think that",
    "start": "501560",
    "end": "503599"
  },
  {
    "text": "this is probably a better way of doing",
    "start": "503599",
    "end": "505080"
  },
  {
    "text": "things I do like the idea of specifying",
    "start": "505080",
    "end": "507599"
  },
  {
    "text": "mutations as opposed to spe specifying",
    "start": "507599",
    "end": "510639"
  },
  {
    "text": "um specifying uh constant I think that's",
    "start": "510639",
    "end": "514039"
  },
  {
    "text": "a better tradeoff to make uh and",
    "start": "514039",
    "end": "516680"
  },
  {
    "text": "remember with JavaScript you have to do",
    "start": "516680",
    "end": "518719"
  },
  {
    "text": "a const const right they're const",
    "start": "518719",
    "end": "520560"
  },
  {
    "text": "pointers they're not constants so it's",
    "start": "520560",
    "end": "523159"
  },
  {
    "text": "like a double one you got to be extra",
    "start": "523159",
    "end": "524640"
  },
  {
    "text": "careful uh it is very easy to forget to",
    "start": "524640",
    "end": "528760"
  },
  {
    "text": "Mark a parameter con when it uh when it",
    "start": "528760",
    "end": "531200"
  },
  {
    "text": "can be you just forget to type the",
    "start": "531200",
    "end": "532760"
  },
  {
    "text": "keyword see that's the thing is you",
    "start": "532760",
    "end": "533880"
  },
  {
    "text": "never forget the type the mutation word",
    "start": "533880",
    "end": "536240"
  },
  {
    "text": "but you will always forget to type the",
    "start": "536240",
    "end": "537720"
  },
  {
    "text": "const word it's very very true this is",
    "start": "537720",
    "end": "539880"
  },
  {
    "text": "especially true for this which is an",
    "start": "539880",
    "end": "541680"
  },
  {
    "text": "implicit parameter there is no time when",
    "start": "541680",
    "end": "544160"
  },
  {
    "text": "you are typing out this parameter",
    "start": "544160",
    "end": "546320"
  },
  {
    "text": "explicitly and therefore it won't sit",
    "start": "546320",
    "end": "548079"
  },
  {
    "text": "there looking funny without the",
    "start": "548079",
    "end": "549360"
  },
  {
    "text": "appropriate modifiers uh if C++ had the",
    "start": "549360",
    "end": "552560"
  },
  {
    "text": "opposite default which every value",
    "start": "552560",
    "end": "554440"
  },
  {
    "text": "reference and pointer was con unless",
    "start": "554440",
    "end": "556440"
  },
  {
    "text": "explicitly declared mutable then we'd be",
    "start": "556440",
    "end": "558519"
  },
  {
    "text": "more likely to have every parameter",
    "start": "558519",
    "end": "559959"
  },
  {
    "text": "declared correctly based on whether the",
    "start": "559959",
    "end": "561519"
  },
  {
    "text": "function needs to mutate it or not if",
    "start": "561519",
    "end": "563360"
  },
  {
    "text": "someone includes a mutable keyword it",
    "start": "563360",
    "end": "565279"
  },
  {
    "text": "would be because they uh know they need",
    "start": "565279",
    "end": "568040"
  },
  {
    "text": "it yes it actually I I do I love this",
    "start": "568040",
    "end": "569839"
  },
  {
    "text": "take by the way I think this is one of",
    "start": "569839",
    "end": "571640"
  },
  {
    "text": "the big wins of rust in other languages",
    "start": "571640",
    "end": "573839"
  },
  {
    "text": "like o camel o camel pioneered it for",
    "start": "573839",
    "end": "576160"
  },
  {
    "text": "rust I think there's I'm sure those",
    "start": "576160",
    "end": "577480"
  },
  {
    "text": "languages o camel got it from if they",
    "start": "577480",
    "end": "579519"
  },
  {
    "text": "need it and forget it the compiler error",
    "start": "579519",
    "end": "581360"
  },
  {
    "text": "would remind them exactly exactly you",
    "start": "581360",
    "end": "583839"
  },
  {
    "text": "want the compiler to tell you when",
    "start": "583839",
    "end": "585320"
  },
  {
    "text": "you're wrong and this is",
    "start": "585320",
    "end": "586640"
  },
  {
    "text": "beautiful now you might not think this",
    "start": "586640",
    "end": "589000"
  },
  {
    "text": "is important because you uh can just not",
    "start": "589000",
    "end": "591640"
  },
  {
    "text": "use con and have functions with",
    "start": "591640",
    "end": "593160"
  },
  {
    "text": "capabilities they don't need but",
    "start": "593160",
    "end": "594880"
  },
  {
    "text": "sometimes you have to take things by",
    "start": "594880",
    "end": "596440"
  },
  {
    "text": "const in C++ if you take a parameter by",
    "start": "596440",
    "end": "599399"
  },
  {
    "text": "non-const reference the caller can only",
    "start": "599399",
    "end": "601519"
  },
  {
    "text": "use l value to call your function but if",
    "start": "601519",
    "end": "603959"
  },
  {
    "text": "you take parameters by const reference",
    "start": "603959",
    "end": "605680"
  },
  {
    "text": "the caller can use l values or R values",
    "start": "605680",
    "end": "608560"
  },
  {
    "text": "so some functions in order to be used in",
    "start": "608560",
    "end": "610839"
  },
  {
    "text": "natural ways must take their parameters",
    "start": "610839",
    "end": "612480"
  },
  {
    "text": "by cons reference once you have a cons",
    "start": "612480",
    "end": "615120"
  },
  {
    "text": "reference you can only easily call",
    "start": "615120",
    "end": "617040"
  },
  {
    "text": "functions with it and accept uh con",
    "start": "617040",
    "end": "619839"
  },
  {
    "text": "references and so if any of those",
    "start": "619839",
    "end": "621440"
  },
  {
    "text": "functions forget to declare the",
    "start": "621440",
    "end": "622600"
  },
  {
    "text": "parameter const you have to include uh",
    "start": "622600",
    "end": "625480"
  },
  {
    "text": "const cast or go to the function later",
    "start": "625480",
    "end": "627800"
  },
  {
    "text": "and correctly accept con",
    "start": "627800",
    "end": "629839"
  },
  {
    "text": "unless you think this is just a sloppy",
    "start": "629839",
    "end": "631320"
  },
  {
    "text": "newbie error note that many functions in",
    "start": "631320",
    "end": "633200"
  },
  {
    "text": "the standard Library had to be updated",
    "start": "633200",
    "end": "635120"
  },
  {
    "text": "to take const iterator instead of the",
    "start": "635120",
    "end": "636720"
  },
  {
    "text": "addition to iterator when it was",
    "start": "636720",
    "end": "638880"
  },
  {
    "text": "discovered correctly that they made",
    "start": "638880",
    "end": "640279"
  },
  {
    "text": "sense with a con iterator uh functions",
    "start": "640279",
    "end": "642959"
  },
  {
    "text": "like erase it turns out that for",
    "start": "642959",
    "end": "645360"
  },
  {
    "text": "functions like erase the collection is",
    "start": "645360",
    "end": "647040"
  },
  {
    "text": "what has to be mutable not the iterator",
    "start": "647040",
    "end": "649560"
  },
  {
    "text": "a fact that maintainers of C++ Library",
    "start": "649560",
    "end": "652120"
  },
  {
    "text": "simply got wrong at",
    "start": "652120",
    "end": "653920"
  },
  {
    "text": "first that's pretty impressive to get",
    "start": "653920",
    "end": "655959"
  },
  {
    "text": "that wrong right obligatory copying ah",
    "start": "655959",
    "end": "658240"
  },
  {
    "text": "sounds like are we talking about about",
    "start": "658240",
    "end": "659200"
  },
  {
    "text": "rust now is this rust are we talking",
    "start": "659200",
    "end": "661760"
  },
  {
    "text": "about rust in C++ for an object to be",
    "start": "661760",
    "end": "664360"
  },
  {
    "text": "copiable uh is default okay I do I do",
    "start": "664360",
    "end": "667000"
  },
  {
    "text": "actually agree with this I hate the fact",
    "start": "667000",
    "end": "668480"
  },
  {
    "text": "that default is copy there's something",
    "start": "668480",
    "end": "671120"
  },
  {
    "text": "so effing emotional about the fact that",
    "start": "671120",
    "end": "675079"
  },
  {
    "text": "when you take a vector and go const a",
    "start": "675079",
    "end": "679279"
  },
  {
    "text": "equals this Vector con b equals a you",
    "start": "679279",
    "end": "683320"
  },
  {
    "text": "got yourself a copy and there's",
    "start": "683320",
    "end": "684880"
  },
  {
    "text": "something it just it it I I agree I",
    "start": "684880",
    "end": "687120"
  },
  {
    "text": "agree I've chased down many above",
    "start": "687120",
    "end": "689480"
  },
  {
    "text": "has been due to that one thing just just",
    "start": "689480",
    "end": "692000"
  },
  {
    "text": "hurts if you don't want your object to",
    "start": "692000",
    "end": "693399"
  },
  {
    "text": "be copiable and all of its fields are",
    "start": "693399",
    "end": "695560"
  },
  {
    "text": "copiable you often have to mark the copy",
    "start": "695560",
    "end": "697720"
  },
  {
    "text": "Constructor and copy assignment operator",
    "start": "697720",
    "end": "699440"
  },
  {
    "text": "as equal delete the default is for the",
    "start": "699440",
    "end": "701760"
  },
  {
    "text": "compiler to write code for you the code",
    "start": "701760",
    "end": "703920"
  },
  {
    "text": "can uh code that can be incorrect yeah",
    "start": "703920",
    "end": "707480"
  },
  {
    "text": "yeah if you do make your class move only",
    "start": "707480",
    "end": "709680"
  },
  {
    "text": "however beware because that means that",
    "start": "709680",
    "end": "711200"
  },
  {
    "text": "there are situations where you can't use",
    "start": "711200",
    "end": "712760"
  },
  {
    "text": "it and C++ 11 there is no ergonomic way",
    "start": "712760",
    "end": "715120"
  },
  {
    "text": "to do a Lambda capture by move which is",
    "start": "715120",
    "end": "717920"
  },
  {
    "text": "usually how I want to capture variables",
    "start": "717920",
    "end": "719639"
  },
  {
    "text": "into a closure no similarly uh the",
    "start": "719639",
    "end": "724279"
  },
  {
    "text": "standard function expects the object it",
    "start": "724279",
    "end": "726160"
  },
  {
    "text": "manages to be copiable and will fail if",
    "start": "726160",
    "end": "728240"
  },
  {
    "text": "compile if your closure object is move",
    "start": "728240",
    "end": "730200"
  },
  {
    "text": "only this is going to be addressed in",
    "start": "730200",
    "end": "731920"
  },
  {
    "text": "C++ 23 which should come out in 2020 in",
    "start": "731920",
    "end": "735199"
  },
  {
    "text": "2033 uh with standard move only function",
    "start": "735199",
    "end": "738440"
  },
  {
    "text": "but in the meantime I have been forced",
    "start": "738440",
    "end": "739880"
  },
  {
    "text": "to write classes with a copy Constructor",
    "start": "739880",
    "end": "741720"
  },
  {
    "text": "that throws some sort of runtime logic",
    "start": "741720",
    "end": "743440"
  },
  {
    "text": "exception and even in C++ 23 copyable",
    "start": "743440",
    "end": "746399"
  },
  {
    "text": "functions will be the uh the default",
    "start": "746399",
    "end": "748519"
  },
  {
    "text": "assume situation I love runtime",
    "start": "748519",
    "end": "750880"
  },
  {
    "text": "exceptions for things that should not be",
    "start": "750880",
    "end": "752240"
  },
  {
    "text": "runtime exceptions feels good using",
    "start": "752240",
    "end": "754720"
  },
  {
    "text": "standard function not like this this is",
    "start": "754720",
    "end": "757160"
  },
  {
    "text": "strange because most complicated objects",
    "start": "757160",
    "end": "758920"
  },
  {
    "text": "especially closures are never and should",
    "start": "758920",
    "end": "760680"
  },
  {
    "text": "never be copied generally copying a",
    "start": "760680",
    "end": "763040"
  },
  {
    "text": "complicated data structure is a mistake",
    "start": "763040",
    "end": "765079"
  },
  {
    "text": "missing a and or a missing standard move",
    "start": "765079",
    "end": "768160"
  },
  {
    "text": "but it is a mistake that carries no",
    "start": "768160",
    "end": "769920"
  },
  {
    "text": "warning with it and no visible sign in",
    "start": "769920",
    "end": "771800"
  },
  {
    "text": "the code that a complex allocation heavy",
    "start": "771800",
    "end": "774000"
  },
  {
    "text": "action is being undertaken this is an",
    "start": "774000",
    "end": "776000"
  },
  {
    "text": "early lesson uh to new C++ devs don't",
    "start": "776000",
    "end": "779000"
  },
  {
    "text": "pass non-primitive types by value but",
    "start": "779000",
    "end": "781519"
  },
  {
    "text": "it's possible for even Advanced devs",
    "start": "781519",
    "end": "783199"
  },
  {
    "text": "mess up from time to time and once it's",
    "start": "783199",
    "end": "785040"
  },
  {
    "text": "in the code base it's easy to",
    "start": "785040",
    "end": "787680"
  },
  {
    "text": "miss agree I dude I This Bites me at",
    "start": "787680",
    "end": "790760"
  },
  {
    "text": "least every time I start back back up in",
    "start": "790760",
    "end": "793519"
  },
  {
    "text": "C++ This Bites This Bites me once I mess",
    "start": "793519",
    "end": "796440"
  },
  {
    "start": "795000",
    "end": "1060000"
  },
  {
    "text": "up something and it takes me like a a",
    "start": "796440",
    "end": "798839"
  },
  {
    "text": "good oldfashioned GDB printa time to",
    "start": "798839",
    "end": "801480"
  },
  {
    "text": "figure out what the hell did I do wrong",
    "start": "801480",
    "end": "803480"
  },
  {
    "text": "uh bu reference parameter paper cuts it",
    "start": "803480",
    "end": "805360"
  },
  {
    "text": "is unergonomic to return multiple",
    "start": "805360",
    "end": "807040"
  },
  {
    "text": "valuables by Tuple and C++ everybody",
    "start": "807040",
    "end": "809360"
  },
  {
    "text": "loves standard tupal come on it can be",
    "start": "809360",
    "end": "811360"
  },
  {
    "text": "done but the calls to standard tie and",
    "start": "811360",
    "end": "813680"
  },
  {
    "text": "make tupal are long-winded and",
    "start": "813680",
    "end": "815320"
  },
  {
    "text": "distracting not to mention that you'll",
    "start": "815320",
    "end": "816560"
  },
  {
    "text": "be writing un idiomatically which is",
    "start": "816560",
    "end": "818639"
  },
  {
    "text": "always bad for people who are reading",
    "start": "818639",
    "end": "820120"
  },
  {
    "text": "and debugging your code as a result C++",
    "start": "820120",
    "end": "822240"
  },
  {
    "text": "often resorts to out",
    "start": "822240",
    "end": "825000"
  },
  {
    "text": "parameters I love that c so thoroughly",
    "start": "825000",
    "end": "828880"
  },
  {
    "text": "loved the idea of out parameters you",
    "start": "828880",
    "end": "830839"
  },
  {
    "text": "actually have an out keyword so that you",
    "start": "830839",
    "end": "834360"
  },
  {
    "text": "can have out parameters in",
    "start": "834360",
    "end": "836800"
  },
  {
    "text": "C chef's kiss on making hard code uh in",
    "start": "836800",
    "end": "840519"
  },
  {
    "text": "this as well as other situations uh you",
    "start": "840519",
    "end": "843519"
  },
  {
    "text": "end up taking a parameter by non-const",
    "start": "843519",
    "end": "845680"
  },
  {
    "text": "reference meaning the function is",
    "start": "845680",
    "end": "846759"
  },
  {
    "text": "supposed to modify the par uh the",
    "start": "846759",
    "end": "848360"
  },
  {
    "text": "parameter the problem is the only uh",
    "start": "848360",
    "end": "851120"
  },
  {
    "text": "this is only marked in the function",
    "start": "851120",
    "end": "852480"
  },
  {
    "text": "signature if you have a function that",
    "start": "852480",
    "end": "853839"
  },
  {
    "text": "takes a parameter by a reference the",
    "start": "853839",
    "end": "855240"
  },
  {
    "text": "parameter looks the same as by value",
    "start": "855240",
    "end": "857680"
  },
  {
    "text": "parameter at the call site really return",
    "start": "857680",
    "end": "860360"
  },
  {
    "text": "let's see return false on failure modify",
    "start": "860360",
    "end": "862399"
  },
  {
    "text": "size with actual size message decreasing",
    "start": "862399",
    "end": "864120"
  },
  {
    "text": "it if it contains more than one message",
    "start": "864120",
    "end": "866720"
  },
  {
    "text": "message nice dude who abbrev message",
    "start": "866720",
    "end": "869560"
  },
  {
    "text": "like that okay can we just time out this",
    "start": "869560",
    "end": "871480"
  },
  {
    "text": "entire thing and just realize that this",
    "start": "871480",
    "end": "874199"
  },
  {
    "text": "is that that I I personally have some",
    "start": "874199",
    "end": "876480"
  },
  {
    "text": "problems here okay I got some problems",
    "start": "876480",
    "end": "879440"
  },
  {
    "text": "going on",
    "start": "879440",
    "end": "881399"
  },
  {
    "text": "here long before any of this is taking",
    "start": "881399",
    "end": "884120"
  },
  {
    "text": "place you know what I mean that is",
    "start": "884120",
    "end": "885639"
  },
  {
    "text": "cursed it is",
    "start": "885639",
    "end": "887399"
  },
  {
    "text": "cursed",
    "start": "887399",
    "end": "889440"
  },
  {
    "text": "messy that's totally unhinged dude it's",
    "start": "889440",
    "end": "892040"
  },
  {
    "text": "totally unhinged if you're reading the",
    "start": "892040",
    "end": "894560"
  },
  {
    "text": "calling code quickly it might look like",
    "start": "894560",
    "end": "896199"
  },
  {
    "text": "the resized call is redundant but it is",
    "start": "896199",
    "end": "898320"
  },
  {
    "text": "not size is being Modified by got",
    "start": "898320",
    "end": "900800"
  },
  {
    "text": "message the only way to know that it is",
    "start": "900800",
    "end": "902800"
  },
  {
    "text": "being modified is to look at the",
    "start": "902800",
    "end": "904160"
  },
  {
    "text": "function signature which is usually in",
    "start": "904160",
    "end": "905759"
  },
  {
    "text": "another file yeah I do agree again",
    "start": "905759",
    "end": "907639"
  },
  {
    "text": "specify specifying mutations are better",
    "start": "907639",
    "end": "910199"
  },
  {
    "text": "than specifying constants I think it's",
    "start": "910199",
    "end": "912279"
  },
  {
    "text": "just generally accepted that it's true",
    "start": "912279",
    "end": "914279"
  },
  {
    "text": "100% at a time Some people prefer out",
    "start": "914279",
    "end": "916360"
  },
  {
    "text": "parameters in and out parameters to be",
    "start": "916360",
    "end": "917880"
  },
  {
    "text": "passed by pointers for this very reason",
    "start": "917880",
    "end": "920120"
  },
  {
    "text": "I can purchase",
    "start": "920120",
    "end": "921279"
  },
  {
    "text": "that this is great or would be if",
    "start": "921279",
    "end": "924079"
  },
  {
    "text": "pointers weren't nullable what does a",
    "start": "924079",
    "end": "926600"
  },
  {
    "text": "null pointer parameter mean in this",
    "start": "926600",
    "end": "928199"
  },
  {
    "text": "context it is going to be is is it going",
    "start": "928199",
    "end": "930600"
  },
  {
    "text": "to trigger undefined Behavior what if",
    "start": "930600",
    "end": "932160"
  },
  {
    "text": "you pass a pointer from a caller into it",
    "start": "932160",
    "end": "934120"
  },
  {
    "text": "people often forget to document what",
    "start": "934120",
    "end": "936279"
  },
  {
    "text": "functions do with a all",
    "start": "936279",
    "end": "938600"
  },
  {
    "text": "pointer options are just a great way to",
    "start": "938600",
    "end": "941600"
  },
  {
    "text": "to type system specify this and I love",
    "start": "941600",
    "end": "944199"
  },
  {
    "text": "it Um this can be addressed with",
    "start": "944199",
    "end": "946199"
  },
  {
    "text": "non-nullable smart pointers but very few",
    "start": "946199",
    "end": "948680"
  },
  {
    "text": "programmers actually do this in practice",
    "start": "948680",
    "end": "950279"
  },
  {
    "text": "we are like we kind of require ourselves",
    "start": "950279",
    "end": "952199"
  },
  {
    "text": "at Netflix to do this smart pointers are",
    "start": "952199",
    "end": "954120"
  },
  {
    "text": "great in general they're great yeah",
    "start": "954120",
    "end": "955680"
  },
  {
    "text": "they're a little bit slower but you know",
    "start": "955680",
    "end": "957399"
  },
  {
    "text": "it's really slow debugging that's really",
    "start": "957399",
    "end": "959920"
  },
  {
    "text": "slow okay that's emotionally slow you",
    "start": "959920",
    "end": "962120"
  },
  {
    "text": "know it's you know it's even slower the",
    "start": "962120",
    "end": "963880"
  },
  {
    "text": "JavaScript were running underneath okay",
    "start": "963880",
    "end": "965600"
  },
  {
    "text": "now that's the where the real slowness",
    "start": "965600",
    "end": "967079"
  },
  {
    "text": "happens when something isn't the default",
    "start": "967079",
    "end": "969040"
  },
  {
    "text": "it tends to not be used everywhere where",
    "start": "969040",
    "end": "970680"
  },
  {
    "text": "appropriate the sustainable answer to",
    "start": "970680",
    "end": "972880"
  },
  {
    "text": "this is changing the default not uh",
    "start": "972880",
    "end": "974880"
  },
  {
    "text": "heroic attempts to fight human nature",
    "start": "974880",
    "end": "977360"
  },
  {
    "text": "Fair uh obligatory side gripe at least",
    "start": "977360",
    "end": "979800"
  },
  {
    "text": "in non-owning situations like this it is",
    "start": "979800",
    "end": "982360"
  },
  {
    "text": "possible to write such a smart pointer",
    "start": "982360",
    "end": "984959"
  },
  {
    "text": "however if you want to write the obvious",
    "start": "984959",
    "end": "986959"
  },
  {
    "text": "uh companion a a non-nullable owning",
    "start": "986959",
    "end": "990120"
  },
  {
    "text": "smart pointer a companion version of",
    "start": "990120",
    "end": "992600"
  },
  {
    "text": "standard unique pointer then it cannot",
    "start": "992600",
    "end": "994399"
  },
  {
    "text": "be done in a useful way because such a",
    "start": "994399",
    "end": "996240"
  },
  {
    "text": "smart such a pointer cannot then be",
    "start": "996240",
    "end": "998639"
  },
  {
    "text": "movable I don't quite understand that",
    "start": "998639",
    "end": "1000920"
  },
  {
    "text": "this man has too much C++ power for me",
    "start": "1000920",
    "end": "1002839"
  },
  {
    "text": "to understand method implementations can",
    "start": "1002839",
    "end": "1005399"
  },
  {
    "text": "contradict oh this sounds exciting just",
    "start": "1005399",
    "end": "1008279"
  },
  {
    "text": "always write the code correctly the",
    "start": "1008279",
    "end": "1009519"
  },
  {
    "text": "first time LOL fourhead five head on",
    "start": "1009519",
    "end": "1012319"
  },
  {
    "text": "head I refuse to use Smart pointers",
    "start": "1012319",
    "end": "1015279"
  },
  {
    "text": "interesting really you refuse to use",
    "start": "1015279",
    "end": "1017399"
  },
  {
    "text": "them is it because of the atomic",
    "start": "1017399",
    "end": "1018720"
  },
  {
    "text": "increment I wish there was like one",
    "start": "1018720",
    "end": "1021279"
  },
  {
    "text": "thing I say that rust also does very",
    "start": "1021279",
    "end": "1022920"
  },
  {
    "text": "well is not allowing nonatomic pointers",
    "start": "1022920",
    "end": "1027160"
  },
  {
    "text": "to be po to be passed between threads I",
    "start": "1027160",
    "end": "1029438"
  },
  {
    "text": "think that that that's a really nice",
    "start": "1029439",
    "end": "1030600"
  },
  {
    "text": "thing because that way you can have a",
    "start": "1030600",
    "end": "1032839"
  },
  {
    "text": "literal plus one a very simple you know",
    "start": "1032839",
    "end": "1036600"
  },
  {
    "text": "smart pointer the RC to be passed around",
    "start": "1036600",
    "end": "1038959"
  },
  {
    "text": "and then you have the more costly arc",
    "start": "1038959",
    "end": "1041000"
  },
  {
    "text": "when you need something right smart",
    "start": "1041000",
    "end": "1042480"
  },
  {
    "text": "pointers are",
    "start": "1042480",
    "end": "1044918"
  },
  {
    "text": "awful they're not that bad awful a",
    "start": "1045679",
    "end": "1047959"
  },
  {
    "text": "pretty int word for it they're not great",
    "start": "1047959",
    "end": "1051480"
  },
  {
    "text": "okay I prefer having my compiler be a",
    "start": "1051480",
    "end": "1053360"
  },
  {
    "text": "smart pointer but but awful is a little",
    "start": "1053360",
    "end": "1056320"
  },
  {
    "text": "intense yeah if you have a if you have a",
    "start": "1056320",
    "end": "1057640"
  },
  {
    "text": "c API don't use a Smart pointer um",
    "start": "1057640",
    "end": "1060400"
  },
  {
    "start": "1060000",
    "end": "1282000"
  },
  {
    "text": "anyways all right for many cases uh for",
    "start": "1060400",
    "end": "1062559"
  },
  {
    "text": "many classes the default implementations",
    "start": "1062559",
    "end": "1064039"
  },
  {
    "text": "are enough and if possible you should",
    "start": "1064039",
    "end": "1065640"
  },
  {
    "text": "really rely on them or you should rely",
    "start": "1065640",
    "end": "1066960"
  },
  {
    "text": "on them whether or not this is possible",
    "start": "1066960",
    "end": "1068520"
  },
  {
    "text": "depends on whether uh naively copying",
    "start": "1068520",
    "end": "1071000"
  },
  {
    "text": "all the fields in a sensible way to copy",
    "start": "1071000",
    "end": "1072720"
  },
  {
    "text": "the entire object which is surprisingly",
    "start": "1072720",
    "end": "1074320"
  },
  {
    "text": "easy to forget uh to consider absolutely",
    "start": "1074320",
    "end": "1076640"
  },
  {
    "text": "but if you need a custom implementation",
    "start": "1076640",
    "end": "1078000"
  },
  {
    "text": "of one of these you are on the hook to",
    "start": "1078000",
    "end": "1079720"
  },
  {
    "text": "write all of them this is known as the",
    "start": "1079720",
    "end": "1081280"
  },
  {
    "text": "rule of five you have to write all of",
    "start": "1081280",
    "end": "1083200"
  },
  {
    "text": "them even though the correct behavior of",
    "start": "1083200",
    "end": "1085080"
  },
  {
    "text": "the two assignment operators can be",
    "start": "1085080",
    "end": "1086520"
  },
  {
    "text": "completely determined by the appropriate",
    "start": "1086520",
    "end": "1088039"
  },
  {
    "text": "Constructor combined with the destructor",
    "start": "1088039",
    "end": "1090080"
  },
  {
    "text": "the compiler could make default",
    "start": "1090080",
    "end": "1091520"
  },
  {
    "text": "implementations of the assignment",
    "start": "1091520",
    "end": "1092760"
  },
  {
    "text": "operators that refer to those other",
    "start": "1092760",
    "end": "1094159"
  },
  {
    "text": "functions and therefore would always be",
    "start": "1094159",
    "end": "1096360"
  },
  {
    "text": "correct but it does not implementing",
    "start": "1096360",
    "end": "1098400"
  },
  {
    "text": "them correctly is tricky requiring a",
    "start": "1098400",
    "end": "1100400"
  },
  {
    "text": "techniques like either explicitly",
    "start": "1100400",
    "end": "1101960"
  },
  {
    "text": "protecting against self assignment or",
    "start": "1101960",
    "end": "1103919"
  },
  {
    "text": "swapping with bu value parameter in any",
    "start": "1103919",
    "end": "1106960"
  },
  {
    "text": "case there are boiler plate and yet",
    "start": "1106960",
    "end": "1109320"
  },
  {
    "text": "another thing that can go wrong in a",
    "start": "1109320",
    "end": "1111120"
  },
  {
    "text": "programming language that has many such",
    "start": "1111120",
    "end": "1112640"
  },
  {
    "text": "things wait until your friend implements",
    "start": "1112640",
    "end": "1114559"
  },
  {
    "text": "a template for you to solve this problem",
    "start": "1114559",
    "end": "1117200"
  },
  {
    "text": "gosh conclusion unfort I look at me I'm",
    "start": "1117200",
    "end": "1119760"
  },
  {
    "text": "getting all steamed up I'm steaming",
    "start": "1119760",
    "end": "1121320"
  },
  {
    "text": "right now unfortunately I'm too well",
    "start": "1121320",
    "end": "1122799"
  },
  {
    "text": "aware of why these decisions were made",
    "start": "1122799",
    "end": "1124480"
  },
  {
    "text": "and is exactly one reason compatibility",
    "start": "1124480",
    "end": "1126360"
  },
  {
    "text": "with Legacy code C++ has no addition",
    "start": "1126360",
    "end": "1128480"
  },
  {
    "text": "system no way to deprecate core language",
    "start": "1128480",
    "end": "1130480"
  },
  {
    "text": "features if new addition of C++ was made",
    "start": "1130480",
    "end": "1132880"
  },
  {
    "text": "it would cease to be C++ though I",
    "start": "1132880",
    "end": "1135120"
  },
  {
    "text": "support the efforts of people to uh",
    "start": "1135120",
    "end": "1137039"
  },
  {
    "text": "transition C++ to new syntax and clean",
    "start": "1137039",
    "end": "1139679"
  },
  {
    "text": "some of this stuff up yeah but Russ",
    "start": "1139679",
    "end": "1141240"
  },
  {
    "text": "doesn't break backwards compatibility",
    "start": "1141240",
    "end": "1143080"
  },
  {
    "text": "either I think there's been one such",
    "start": "1143080",
    "end": "1144720"
  },
  {
    "text": "case of a method being completely",
    "start": "1144720",
    "end": "1146360"
  },
  {
    "text": "removed uh due to some gigantic security",
    "start": "1146360",
    "end": "1148919"
  },
  {
    "text": "violation but even with the additions I",
    "start": "1148919",
    "end": "1150440"
  },
  {
    "text": "don't think it it removes anything",
    "start": "1150440",
    "end": "1153559"
  },
  {
    "text": "right I don't think there's anything",
    "start": "1153559",
    "end": "1155600"
  },
  {
    "text": "that says that it can't be undone C++ 2",
    "start": "1155600",
    "end": "1158159"
  },
  {
    "text": "when you should see C++ 23 before we",
    "start": "1158159",
    "end": "1160919"
  },
  {
    "text": "talk about C++ 2 okay buddy for Russ is",
    "start": "1160919",
    "end": "1163799"
  },
  {
    "text": "a new language yeah I know Russ is a new",
    "start": "1163799",
    "end": "1165520"
  },
  {
    "text": "language that's expanding exceptionally",
    "start": "1165520",
    "end": "1167440"
  },
  {
    "text": "fast just wait for this article to exist",
    "start": "1167440",
    "end": "1169640"
  },
  {
    "text": "with rust it's going to happen right",
    "start": "1169640",
    "end": "1171480"
  },
  {
    "text": "however if you ignore backwards",
    "start": "1171480",
    "end": "1172559"
  },
  {
    "text": "compatibil it's going to go back to O",
    "start": "1172559",
    "end": "1174039"
  },
  {
    "text": "camel it always goes back to O camel",
    "start": "1174039",
    "end": "1176280"
  },
  {
    "text": "don't worry it's coming back The arc's",
    "start": "1176280",
    "end": "1178240"
  },
  {
    "text": "Happening um however not not Atomic",
    "start": "1178240",
    "end": "1181600"
  },
  {
    "text": "reference counter by the way uh if you",
    "start": "1181600",
    "end": "1183200"
  },
  {
    "text": "ignore backwards compatibility in the",
    "start": "1183200",
    "end": "1184640"
  },
  {
    "text": "large existing code bases none of these",
    "start": "1184640",
    "end": "1186320"
  },
  {
    "text": "paper cuts make the programming language",
    "start": "1186320",
    "end": "1187799"
  },
  {
    "text": "more powerful or better just harder to",
    "start": "1187799",
    "end": "1189280"
  },
  {
    "text": "use I have seen good faith arguments in",
    "start": "1189280",
    "end": "1190840"
  },
  {
    "text": "favor of uh human- maintained header",
    "start": "1190840",
    "end": "1192520"
  },
  {
    "text": "files surprising uh as uh that is to me",
    "start": "1192520",
    "end": "1195760"
  },
  {
    "text": "but I challenge my readers to tell me",
    "start": "1195760",
    "end": "1197159"
  },
  {
    "text": "what is beneficial about C+ plus Plus's",
    "start": "1197159",
    "end": "1198760"
  },
  {
    "text": "design choice in these matters I agree",
    "start": "1198760",
    "end": "1201520"
  },
  {
    "text": "you might find these things trivial but",
    "start": "1201520",
    "end": "1203360"
  },
  {
    "text": "these all slow programmers down while",
    "start": "1203360",
    "end": "1205520"
  },
  {
    "text": "simultaneously annoying them if you are",
    "start": "1205520",
    "end": "1207360"
  },
  {
    "text": "experienced enough your subconscious",
    "start": "1207360",
    "end": "1208880"
  },
  {
    "text": "might be Adept to navigate it but",
    "start": "1208880",
    "end": "1211039"
  },
  {
    "text": "imagine uh what your subconscious could",
    "start": "1211039",
    "end": "1213159"
  },
  {
    "text": "do if it didn't have to but how Adept",
    "start": "1213159",
    "end": "1215600"
  },
  {
    "text": "are you at seeing these mistakes in a",
    "start": "1215600",
    "end": "1217080"
  },
  {
    "text": "code review from your Junior colleagues",
    "start": "1217080",
    "end": "1219240"
  },
  {
    "text": "impossible uh if you are a rigorous",
    "start": "1219240",
    "end": "1221120"
  },
  {
    "text": "reviewer how much more time does it take",
    "start": "1221120",
    "end": "1223159"
  },
  {
    "text": "how Adept are you at finding these",
    "start": "1223159",
    "end": "1224400"
  },
  {
    "text": "issues quickly when a bug arises these",
    "start": "1224400",
    "end": "1226679"
  },
  {
    "text": "are great questions honestly this these",
    "start": "1226679",
    "end": "1228039"
  },
  {
    "text": "are great things o cell sucks you suck",
    "start": "1228039",
    "end": "1231640"
  },
  {
    "text": "okay you know what we're not going to",
    "start": "1231640",
    "end": "1233440"
  },
  {
    "text": "have this you know what this is n 1984",
    "start": "1233440",
    "end": "1237039"
  },
  {
    "text": "going to happen right here that message",
    "start": "1237039",
    "end": "1238320"
  },
  {
    "text": "never existed get the hell out that",
    "start": "1238320",
    "end": "1240080"
  },
  {
    "text": "message uh what would be more effective",
    "start": "1240080",
    "end": "1242600"
  },
  {
    "text": "uh let's see we'd be more effective more",
    "start": "1242600",
    "end": "1244840"
  },
  {
    "text": "efficient and happier if these issues",
    "start": "1244840",
    "end": "1246240"
  },
  {
    "text": "were resolved programming would be both",
    "start": "1246240",
    "end": "1248320"
  },
  {
    "text": "enjoyable and faster to do what's the",
    "start": "1248320",
    "end": "1249880"
  },
  {
    "text": "downsides the only upside is uh Contin",
    "start": "1249880",
    "end": "1252280"
  },
  {
    "text": "uh continuity with history and while I",
    "start": "1252280",
    "end": "1254840"
  },
  {
    "text": "can see the value in that it is very",
    "start": "1254840",
    "end": "1256919"
  },
  {
    "text": "limited value with very limited",
    "start": "1256919",
    "end": "1259679"
  },
  {
    "text": "scope I agree this is a great article",
    "start": "1259679",
    "end": "1262159"
  },
  {
    "text": "this is a great article on some of the",
    "start": "1262159",
    "end": "1263640"
  },
  {
    "text": "C++ paper cuts I really agree with the",
    "start": "1263640",
    "end": "1265919"
  },
  {
    "text": "the the uh the the the five one that is",
    "start": "1265919",
    "end": "1269440"
  },
  {
    "text": "the rule of five it is just so painful",
    "start": "1269440",
    "end": "1272080"
  },
  {
    "text": "and I've had it happen to me and it it's",
    "start": "1272080",
    "end": "1273640"
  },
  {
    "text": "just like it can go terribly wrong okay",
    "start": "1273640",
    "end": "1276400"
  },
  {
    "text": "hey C++ is cool but man does it have",
    "start": "1276400",
    "end": "1279520"
  },
  {
    "text": "some foot guns the name is the foot",
    "start": "1279520",
    "end": "1281559"
  },
  {
    "text": "gunen",
    "start": "1281559",
    "end": "1284278"
  }
]