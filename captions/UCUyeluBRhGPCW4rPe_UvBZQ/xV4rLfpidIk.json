[
  {
    "text": "I don't know why people call it a try",
    "start": "120",
    "end": "1719"
  },
  {
    "text": "it's not a try it's not a try it's a",
    "start": "1719",
    "end": "3760"
  },
  {
    "text": "tree tree just deal with the tree tree",
    "start": "3760",
    "end": "5879"
  },
  {
    "text": "Cloud Flair's Global Network handles a",
    "start": "5879",
    "end": "7759"
  },
  {
    "text": "lot of HTTP requests over 60 million per",
    "start": "7759",
    "end": "10040"
  },
  {
    "text": "second on average that's at least one",
    "start": "10040",
    "end": "12360"
  },
  {
    "text": "customer I know you guys wouldn't",
    "start": "12360",
    "end": "14320"
  },
  {
    "text": "understand but that's minimally One",
    "start": "14320",
    "end": "16400"
  },
  {
    "text": "customer at least uh that in and of",
    "start": "16400",
    "end": "20000"
  },
  {
    "text": "itself is not news but it is the",
    "start": "20000",
    "end": "22199"
  },
  {
    "text": "starting point to an Adventure that",
    "start": "22199",
    "end": "24240"
  },
  {
    "text": "started a few months ago and ends with",
    "start": "24240",
    "end": "26640"
  },
  {
    "text": "the announcement of the new open source",
    "start": "26640",
    "end": "28400"
  },
  {
    "text": "rust crate that we've been using to",
    "start": "28400",
    "end": "30000"
  },
  {
    "text": "reduce our CP utilization that's pingora",
    "start": "30000",
    "end": "32520"
  },
  {
    "text": "right is that pingar enabling our CDN to",
    "start": "32520",
    "end": "35239"
  },
  {
    "text": "handle even more of the world's ever",
    "start": "35239",
    "end": "36520"
  },
  {
    "text": "increasing web traffic pingora Let's uh",
    "start": "36520",
    "end": "39200"
  },
  {
    "text": "start at the beginning you may recall a",
    "start": "39200",
    "end": "40559"
  },
  {
    "text": "few months ago when we released pingora",
    "start": "40559",
    "end": "42800"
  },
  {
    "text": "at the heart of the rust based proxy",
    "start": "42800",
    "end": "44440"
  },
  {
    "text": "Services I've always wanted to write",
    "start": "44440",
    "end": "46600"
  },
  {
    "text": "some sort of a proxy I've never written",
    "start": "46600",
    "end": "48559"
  },
  {
    "text": "a proxy before or a reverse proxy it's",
    "start": "48559",
    "end": "50719"
  },
  {
    "text": "on my list of things I need to do",
    "start": "50719",
    "end": "52680"
  },
  {
    "text": "and so that's what we're doing we're",
    "start": "52680",
    "end": "54359"
  },
  {
    "text": "doing that uh as an open source project",
    "start": "54359",
    "end": "56800"
  },
  {
    "text": "on GitHub I work on a team that",
    "start": "56800",
    "end": "58640"
  },
  {
    "text": "maintains the pingar framework as well",
    "start": "58640",
    "end": "60920"
  },
  {
    "text": "as the cloud flares Production Services",
    "start": "60920",
    "end": "62399"
  },
  {
    "text": "built on it one of those Services is",
    "start": "62399",
    "end": "64478"
  },
  {
    "text": "responsible for the final step in",
    "start": "64479",
    "end": "66040"
  },
  {
    "text": "transmitting a users non-cash request to",
    "start": "66040",
    "end": "68280"
  },
  {
    "text": "their true destination internally we",
    "start": "68280",
    "end": "70360"
  },
  {
    "text": "call the request destination server its",
    "start": "70360",
    "end": "72360"
  },
  {
    "text": "origin so our service has the",
    "start": "72360",
    "end": "74560"
  },
  {
    "text": "unimaginative name of pingora origin all",
    "start": "74560",
    "end": "78240"
  },
  {
    "text": "right one of the many responsibilities",
    "start": "78240",
    "end": "80159"
  },
  {
    "text": "of pingora origin by the way non- clever",
    "start": "80159",
    "end": "84960"
  },
  {
    "text": "naming beautiful can we all agree that",
    "start": "85400",
    "end": "87960"
  },
  {
    "text": "non- clever naming is in fact the best",
    "start": "87960",
    "end": "90159"
  },
  {
    "text": "way to go about not having stupid names",
    "start": "90159",
    "end": "92759"
  },
  {
    "text": "okay I I really don't want Galacticus",
    "start": "92759",
    "end": "95920"
  },
  {
    "text": "telling me about getting date times from",
    "start": "95920",
    "end": "98439"
  },
  {
    "text": "the user uh is to ensure that when a",
    "start": "98439",
    "end": "101640"
  },
  {
    "text": "request leaves our infrastructure it has",
    "start": "101640",
    "end": "103439"
  },
  {
    "text": "been cleaned to remove or it has been",
    "start": "103439",
    "end": "105680"
  },
  {
    "text": "cleaned to remove the internal",
    "start": "105680",
    "end": "107119"
  },
  {
    "text": "information we use to Route measure and",
    "start": "107119",
    "end": "109079"
  },
  {
    "text": "optimize traffic for our customers this",
    "start": "109079",
    "end": "111159"
  },
  {
    "text": "has to be done for every request that",
    "start": "111159",
    "end": "112560"
  },
  {
    "text": "leaves Cloud flare and as I mentioned",
    "start": "112560",
    "end": "114280"
  },
  {
    "text": "above it's a lot of requests at the time",
    "start": "114280",
    "end": "116360"
  },
  {
    "text": "of writing the rate of requests leaving",
    "start": "116360",
    "end": "118039"
  },
  {
    "text": "pingora origin is globally is about 35",
    "start": "118039",
    "end": "121280"
  },
  {
    "text": "million requests per second that is so",
    "start": "121280",
    "end": "123439"
  },
  {
    "text": "many what is 35 * 864 all right so we're",
    "start": "123439",
    "end": "127960"
  },
  {
    "text": "going to have to add a lot of zeros to",
    "start": "127960",
    "end": "129399"
  },
  {
    "text": "this number right so this is 30,000",
    "start": "129399",
    "end": "132360"
  },
  {
    "text": "which becomes",
    "start": "132360",
    "end": "134200"
  },
  {
    "text": "3.02 million Millions is that a trillion",
    "start": "134200",
    "end": "138760"
  },
  {
    "text": "are we in tril are we trillion territory",
    "start": "138760",
    "end": "141400"
  },
  {
    "text": "they handle a trillion requests per day",
    "start": "141400",
    "end": "143480"
  },
  {
    "text": "no way no we're we're trillion territory",
    "start": "143480",
    "end": "145640"
  },
  {
    "text": "aren't we no no no a million Millions is",
    "start": "145640",
    "end": "148040"
  },
  {
    "text": "is trillion not a billion you guys are",
    "start": "148040",
    "end": "149959"
  },
  {
    "text": "doing bad math it's not a Millie it's",
    "start": "149959",
    "end": "151920"
  },
  {
    "text": "not a billy it's a trilly okay bil",
    "start": "151920",
    "end": "153879"
  },
  {
    "text": "billies are at the nine Chad can't even",
    "start": "153879",
    "end": "155840"
  },
  {
    "text": "count that high I know they're like nah",
    "start": "155840",
    "end": "157640"
  },
  {
    "text": "yeah I love watching you guys do math",
    "start": "157640",
    "end": "159800"
  },
  {
    "text": "you make fun of me for doing math and",
    "start": "159800",
    "end": "162000"
  },
  {
    "text": "then I watch you guys do math okay oh",
    "start": "162000",
    "end": "165000"
  },
  {
    "text": "you guys think it's easy oh you guys",
    "start": "165000",
    "end": "167959"
  },
  {
    "text": "think it's easy to use math well guess",
    "start": "167959",
    "end": "170760"
  },
  {
    "text": "what all right let's get back to this by",
    "start": "170760",
    "end": "173480"
  },
  {
    "text": "the way that's a lot of traffic that's",
    "start": "173480",
    "end": "175040"
  },
  {
    "text": "crazy amount of traffic just adding and",
    "start": "175040",
    "end": "178400"
  },
  {
    "text": "removing from a m app 30 three trillion",
    "start": "178400",
    "end": "182799"
  },
  {
    "text": "times is an insane amount of compute",
    "start": "182799",
    "end": "185760"
  },
  {
    "text": "think about all the other stuff that has",
    "start": "185760",
    "end": "187440"
  },
  {
    "text": "to do it's a trillion not trillion yeah",
    "start": "187440",
    "end": "190280"
  },
  {
    "text": "exactly uh any code that has to be run",
    "start": "190280",
    "end": "192920"
  },
  {
    "text": "per request is uh is in the hottest of",
    "start": "192920",
    "end": "195239"
  },
  {
    "text": "hot paths and in uh and it's in this",
    "start": "195239",
    "end": "198200"
  },
  {
    "text": "path that we find this code and comment",
    "start": "198200",
    "end": "201040"
  },
  {
    "text": "perf heavy function 1.7% CPU time clear",
    "start": "201040",
    "end": "205080"
  },
  {
    "text": "internal headers internal headers iter",
    "start": "205080",
    "end": "207959"
  },
  {
    "text": "for each remove them all from header oh",
    "start": "207959",
    "end": "210200"
  },
  {
    "text": "yeah I mean I this makes sense how else",
    "start": "210200",
    "end": "212840"
  },
  {
    "text": "would you handle this I'm very curious",
    "start": "212840",
    "end": "214400"
  },
  {
    "text": "this small pleas let's see and",
    "start": "214400",
    "end": "215680"
  },
  {
    "text": "pleasantly readable function consumes",
    "start": "215680",
    "end": "217200"
  },
  {
    "text": "more than 1.7% of pingora origin's total",
    "start": "217200",
    "end": "220040"
  },
  {
    "text": "CPU time to put that in perspective the",
    "start": "220040",
    "end": "222200"
  },
  {
    "text": "total CPU time consumed by pingora",
    "start": "222200",
    "end": "224200"
  },
  {
    "text": "origin is 40,000 compute seconds per",
    "start": "224200",
    "end": "227319"
  },
  {
    "text": "second every second they use a half day",
    "start": "227319",
    "end": "230080"
  },
  {
    "text": "they use a half of a day of computing I",
    "start": "230080",
    "end": "232599"
  },
  {
    "text": "I don't really understand this are they",
    "start": "232599",
    "end": "234319"
  },
  {
    "text": "are they saying that this one function",
    "start": "234319",
    "end": "236000"
  },
  {
    "text": "or the entirety of it yeah Cloud flare",
    "start": "236000",
    "end": "238159"
  },
  {
    "text": "engineering is so interesting yeah but",
    "start": "238159",
    "end": "239519"
  },
  {
    "text": "there's sales tack a Repel me what you",
    "start": "239519",
    "end": "241120"
  },
  {
    "text": "don't like their trust in safety team uh",
    "start": "241120",
    "end": "243079"
  },
  {
    "text": "you can think of this as 40,000",
    "start": "243079",
    "end": "244879"
  },
  {
    "text": "saturated CPU cores fully dedicated to",
    "start": "244879",
    "end": "246799"
  },
  {
    "text": "running pingora origin of those 40,000",
    "start": "246799",
    "end": "249720"
  },
  {
    "text": "1.7% 680 are only delic oh there we go",
    "start": "249720",
    "end": "253400"
  },
  {
    "text": "are only dedicated to evaluating clear",
    "start": "253400",
    "end": "255200"
  },
  {
    "text": "internal headers that's so",
    "start": "255200",
    "end": "258320"
  },
  {
    "text": "amazing that is so amazing that you can",
    "start": "258320",
    "end": "261400"
  },
  {
    "text": "effectively boil down this function to",
    "start": "261400",
    "end": "263560"
  },
  {
    "text": "680 cores running non-stop fully pegged",
    "start": "263560",
    "end": "267520"
  },
  {
    "text": "100% just clearing internal headers the",
    "start": "267520",
    "end": "270520"
  },
  {
    "text": "function's heavy usage and simplicity",
    "start": "270520",
    "end": "272759"
  },
  {
    "text": "makes it seem like a great place to",
    "start": "272759",
    "end": "274560"
  },
  {
    "text": "start optimizing I bet you by the way I",
    "start": "274560",
    "end": "277280"
  },
  {
    "text": "bet you they could do this in such a",
    "start": "277280",
    "end": "278639"
  },
  {
    "text": "more clever way hear me out cloudflare",
    "start": "278639",
    "end": "281240"
  },
  {
    "text": "hear me out every HTTP request you",
    "start": "281240",
    "end": "285479"
  },
  {
    "text": "make the first X headers for routing are",
    "start": "285479",
    "end": "289639"
  },
  {
    "text": "all defined with a certain amount of",
    "start": "289639",
    "end": "292400"
  },
  {
    "text": "space every single time whites space",
    "start": "292400",
    "end": "294639"
  },
  {
    "text": "will just pad it out and then you do the",
    "start": "294639",
    "end": "296680"
  },
  {
    "text": "slashes that you need to do you know why",
    "start": "296680",
    "end": "299960"
  },
  {
    "text": "because you could even make up like a",
    "start": "299960",
    "end": "301360"
  },
  {
    "text": "fake header to fill in all the space and",
    "start": "301360",
    "end": "304000"
  },
  {
    "text": "then when you want to remove internal",
    "start": "304000",
    "end": "306479"
  },
  {
    "text": "headers instead of removing the headers",
    "start": "306479",
    "end": "308919"
  },
  {
    "text": "on a header object say a map you",
    "start": "308919",
    "end": "311639"
  },
  {
    "text": "literally just string slice that son of",
    "start": "311639",
    "end": "314240"
  },
  {
    "text": "a bee clean out tell me that's not a",
    "start": "314240",
    "end": "316960"
  },
  {
    "text": "good idea no like like this like this",
    "start": "316960",
    "end": "318919"
  },
  {
    "text": "okay stalks yeah we're we're straight",
    "start": "318919",
    "end": "320400"
  },
  {
    "text": "stoning boys boys we're stoning okay",
    "start": "320400",
    "end": "323160"
  },
  {
    "text": "that's an idea okay so every HTTP",
    "start": "323160",
    "end": "324840"
  },
  {
    "text": "request looks something along the lines",
    "start": "324840",
    "end": "326440"
  },
  {
    "text": "of this one right so it's like HTTP 1.1",
    "start": "326440",
    "end": "329720"
  },
  {
    "text": "SL whatever right you have your basic",
    "start": "329720",
    "end": "332400"
  },
  {
    "text": "header and then you probably have",
    "start": "332400",
    "end": "334160"
  },
  {
    "text": "something like method you know that's",
    "start": "334160",
    "end": "336319"
  },
  {
    "text": "post or whatever but instead of doing",
    "start": "336319",
    "end": "338120"
  },
  {
    "text": "and then you have all your other headers",
    "start": "338120",
    "end": "339520"
  },
  {
    "text": "right they probably have a series that",
    "start": "339520",
    "end": "341880"
  },
  {
    "text": "they probably have a series of headers",
    "start": "341880",
    "end": "343160"
  },
  {
    "text": "that looks something like this x- Cloud",
    "start": "343160",
    "end": "347160"
  },
  {
    "text": "flare some name",
    "start": "347160",
    "end": "349960"
  },
  {
    "text": "right and then it has some value and",
    "start": "349960",
    "end": "352400"
  },
  {
    "text": "then you have a registered nurse and",
    "start": "352400",
    "end": "355440"
  },
  {
    "text": "then you do another X Cloud flare",
    "start": "355440",
    "end": "360800"
  },
  {
    "text": "registered nurse now let's pretend that",
    "start": "361039",
    "end": "364479"
  },
  {
    "text": "on every single request you just simply",
    "start": "364479",
    "end": "366840"
  },
  {
    "text": "say hey we need I don't know",
    "start": "366840",
    "end": "370360"
  },
  {
    "text": "2,48 bytes every single time what I",
    "start": "370360",
    "end": "373120"
  },
  {
    "text": "don't know how many bytes you need maybe",
    "start": "373120",
    "end": "374360"
  },
  {
    "text": "you can reduce it down to a whole bunch",
    "start": "374360",
    "end": "377080"
  },
  {
    "text": "when you want to strip the headers",
    "start": "377080",
    "end": "378680"
  },
  {
    "text": "instead of going through your actual",
    "start": "378680",
    "end": "380319"
  },
  {
    "text": "header and doing all that maybe you",
    "start": "380319",
    "end": "382560"
  },
  {
    "text": "could fully format your request and at",
    "start": "382560",
    "end": "385000"
  },
  {
    "text": "the bytes",
    "start": "385000",
    "end": "386400"
  },
  {
    "text": "level right at the very end of the",
    "start": "386400",
    "end": "388759"
  },
  {
    "text": "pipeline at the very end all you do",
    "start": "388759",
    "end": "392000"
  },
  {
    "text": "instead is just go",
    "start": "392000",
    "end": "393840"
  },
  {
    "text": "bytes you know zero through some number",
    "start": "393840",
    "end": "398360"
  },
  {
    "text": "right maybe you could pass in this index",
    "start": "398360",
    "end": "400240"
  },
  {
    "text": "because maybe you have you know maybe",
    "start": "400240",
    "end": "401599"
  },
  {
    "text": "this thing is not as as clean as we're",
    "start": "401599",
    "end": "403360"
  },
  {
    "text": "making it all the way up",
    "start": "403360",
    "end": "405800"
  },
  {
    "text": "to uh what's it called index plus your",
    "start": "405800",
    "end": "409520"
  },
  {
    "text": "maximum",
    "start": "409520",
    "end": "410720"
  },
  {
    "text": "size and for the rest right then you're",
    "start": "410720",
    "end": "413560"
  },
  {
    "text": "only doing pointer arithmetic pointer",
    "start": "413560",
    "end": "415520"
  },
  {
    "text": "arithmetic is pretty is pretty free",
    "start": "415520",
    "end": "418360"
  },
  {
    "text": "comparatively",
    "start": "418360",
    "end": "420160"
  },
  {
    "text": "can we agree to that comp comparatively",
    "start": "420160",
    "end": "423000"
  },
  {
    "text": "pointer arithmetic is effectively free a",
    "start": "423000",
    "end": "426319"
  },
  {
    "text": "singular removal from a map is probably",
    "start": "426319",
    "end": "429520"
  },
  {
    "text": "a 100,000 times more expensive than pois",
    "start": "429520",
    "end": "431759"
  },
  {
    "text": "pointer arithmetic or some some",
    "start": "431759",
    "end": "433520"
  },
  {
    "text": "astronomical number that I don't even",
    "start": "433520",
    "end": "435000"
  },
  {
    "text": "know maybe it's only 500 times more but",
    "start": "435000",
    "end": "437240"
  },
  {
    "text": "none none nonetheless it is",
    "start": "437240",
    "end": "438720"
  },
  {
    "text": "significantly more expensive there you",
    "start": "438720",
    "end": "440199"
  },
  {
    "text": "go Cloud flare I just gave you an",
    "start": "440199",
    "end": "441960"
  },
  {
    "text": "amazing idea to further improve",
    "start": "441960",
    "end": "444360"
  },
  {
    "text": "it I sto you stole my idea I'm suing",
    "start": "444360",
    "end": "447479"
  },
  {
    "text": "you probably cheaper than map look look",
    "start": "447479",
    "end": "449639"
  },
  {
    "text": "up it's probably oh it's it's gallons",
    "start": "449639",
    "end": "451360"
  },
  {
    "text": "cheaper than a map lookup because a m",
    "start": "451360",
    "end": "453440"
  },
  {
    "text": "because a map lookup you got to remember",
    "start": "453440",
    "end": "455160"
  },
  {
    "text": "it does it computes a",
    "start": "455160",
    "end": "457000"
  },
  {
    "text": "hash it probably does a modulo as all",
    "start": "457000",
    "end": "459919"
  },
  {
    "text": "maps do and then it has to do a linked",
    "start": "459919",
    "end": "461759"
  },
  {
    "text": "list traversal and then it has to do a",
    "start": "461759",
    "end": "464560"
  },
  {
    "text": "key",
    "start": "464560",
    "end": "465800"
  },
  {
    "text": "comparison right like that that's just",
    "start": "465800",
    "end": "467960"
  },
  {
    "text": "going to be a lot more than X plus a",
    "start": "467960",
    "end": "472080"
  },
  {
    "text": "number right like this is vastly cheaper",
    "start": "472080",
    "end": "475319"
  },
  {
    "text": "than that gallons are such a great",
    "start": "475319",
    "end": "478159"
  },
  {
    "text": "Freedom unit yeah I used the most",
    "start": "478159",
    "end": "480080"
  },
  {
    "text": "appropriate uh no no no no no no you got",
    "start": "480080",
    "end": "482360"
  },
  {
    "text": "that all wrong that's not what",
    "start": "482360",
    "end": "484759"
  },
  {
    "text": "slrn stands for dude what are you",
    "start": "484759",
    "end": "486800"
  },
  {
    "text": "talking about SLR stands for registered",
    "start": "486800",
    "end": "489680"
  },
  {
    "text": "sln stands for nurse it's a registered",
    "start": "489680",
    "end": "493560"
  },
  {
    "text": "nurse everybody knows this like",
    "start": "493560",
    "end": "496360"
  },
  {
    "text": "everybody knows that there's no car",
    "start": "496360",
    "end": "499720"
  },
  {
    "text": "carriage return no okay first off what's",
    "start": "499720",
    "end": "502960"
  },
  {
    "text": "a carriage I didn't realize Cinderella's",
    "start": "502960",
    "end": "505479"
  },
  {
    "text": "going to the ball right now",
    "start": "505479",
    "end": "507919"
  },
  {
    "text": "buddy carriage",
    "start": "507919",
    "end": "510240"
  },
  {
    "text": "return no registered nurse this small",
    "start": "510240",
    "end": "514039"
  },
  {
    "text": "and pleasant readable function consumes",
    "start": "514039",
    "end": "515640"
  },
  {
    "text": "more than 1.7% oh we already talked",
    "start": "515640",
    "end": "517479"
  },
  {
    "text": "about this benchmarking benchmarking the",
    "start": "517479",
    "end": "519120"
  },
  {
    "text": "function shown above is straightforward",
    "start": "519120",
    "end": "520599"
  },
  {
    "text": "because we can use wonderful Criterion",
    "start": "520599",
    "end": "522479"
  },
  {
    "text": "rust crate Criterion provides an API for",
    "start": "522479",
    "end": "524720"
  },
  {
    "text": "timing rust code down to the nanc by",
    "start": "524720",
    "end": "526760"
  },
  {
    "text": "aggregating multiple isolated executions",
    "start": "526760",
    "end": "529279"
  },
  {
    "text": "it also provides feedback on how",
    "start": "529279",
    "end": "530839"
  },
  {
    "text": "performance improvements or regressions",
    "start": "530839",
    "end": "532399"
  },
  {
    "text": "over time I wonder if they do some sort",
    "start": "532399",
    "end": "534040"
  },
  {
    "text": "of like uh I don't know how Criterion",
    "start": "534040",
    "end": "536680"
  },
  {
    "text": "works but I'm curious if they just send",
    "start": "536680",
    "end": "538399"
  },
  {
    "text": "stack traces every now then to some sort",
    "start": "538399",
    "end": "540519"
  },
  {
    "text": "of external service because if you have",
    "start": "540519",
    "end": "542480"
  },
  {
    "text": "this many requests you could probably uh",
    "start": "542480",
    "end": "545480"
  },
  {
    "text": "very easily visualize exactly what's",
    "start": "545480",
    "end": "548480"
  },
  {
    "text": "happening through the entire ecosystem",
    "start": "548480",
    "end": "551079"
  },
  {
    "text": "of cloud flare and how fast or slow it",
    "start": "551079",
    "end": "553600"
  },
  {
    "text": "is by just taking a Rec like taking a",
    "start": "553600",
    "end": "556399"
  },
  {
    "text": "single stack Trace randomly throughout a",
    "start": "556399",
    "end": "558959"
  },
  {
    "text": "user session every million requests or",
    "start": "558959",
    "end": "561800"
  },
  {
    "text": "probably every billion requests",
    "start": "561800",
    "end": "563360"
  },
  {
    "text": "considering they literally do trillions",
    "start": "563360",
    "end": "564839"
  },
  {
    "text": "of them and over like you could just",
    "start": "564839",
    "end": "566680"
  },
  {
    "text": "have such a perfect uh yeah uses",
    "start": "566680",
    "end": "570000"
  },
  {
    "text": "okay it uses ebpf actually okay cool",
    "start": "570000",
    "end": "572079"
  },
  {
    "text": "I've never used ebf EB eppf it also",
    "start": "572079",
    "end": "576079"
  },
  {
    "text": "provides feedback on how performance",
    "start": "576079",
    "end": "577440"
  },
  {
    "text": "improves or regresses over time the",
    "start": "577440",
    "end": "579320"
  },
  {
    "text": "input for The Benchmark is a large set",
    "start": "579320",
    "end": "581279"
  },
  {
    "text": "of syn synthesized requests with random",
    "start": "581279",
    "end": "583720"
  },
  {
    "text": "number of headers with the uniform",
    "start": "583720",
    "end": "585519"
  },
  {
    "text": "distribution of internal versus",
    "start": "585519",
    "end": "586920"
  },
  {
    "text": "non-internal headers with our tooling",
    "start": "586920",
    "end": "589160"
  },
  {
    "text": "and test data we find that our origin",
    "start": "589160",
    "end": "590880"
  },
  {
    "text": "clear internal headers function runs at",
    "start": "590880",
    "end": "592959"
  },
  {
    "text": "an average of this much uh now for each",
    "start": "592959",
    "end": "596120"
  },
  {
    "text": "new method of clearing headers we can",
    "start": "596120",
    "end": "598040"
  },
  {
    "text": "measure against the same set of request",
    "start": "598040",
    "end": "599720"
  },
  {
    "text": "and get relative performance difference",
    "start": "599720",
    "end": "601560"
  },
  {
    "text": "okay nice one potential quick win is to",
    "start": "601560",
    "end": "603600"
  },
  {
    "text": "invent or invert how we find the headers",
    "start": "603600",
    "end": "605640"
  },
  {
    "text": "that we need to remove from the request",
    "start": "605640",
    "end": "607360"
  },
  {
    "text": "and if you look at the original code you",
    "start": "607360",
    "end": "608680"
  },
  {
    "text": "can see that we are evaluating uh",
    "start": "608680",
    "end": "610720"
  },
  {
    "text": "headers remove header H yeah for each",
    "start": "610720",
    "end": "612640"
  },
  {
    "text": "header in our inter let's see in our",
    "start": "612640",
    "end": "614160"
  },
  {
    "text": "list of internal headers we have a see",
    "start": "614160",
    "end": "616760"
  },
  {
    "text": "so okay so for each header in our list",
    "start": "616760",
    "end": "619880"
  },
  {
    "text": "of internal headers so 100 plus times",
    "start": "619880",
    "end": "623240"
  },
  {
    "text": "diagram it looks like this diamic can",
    "start": "623240",
    "end": "625920"
  },
  {
    "text": "you use can you use the word diagram in",
    "start": "625920",
    "end": "629079"
  },
  {
    "text": "a verb sense or is that an adverb can",
    "start": "629079",
    "end": "631200"
  },
  {
    "text": "you use it adverb is that a thing is",
    "start": "631200",
    "end": "633920"
  },
  {
    "text": "that a thing I don't think so all right",
    "start": "633920",
    "end": "635880"
  },
  {
    "text": "internal headers plus 100 in static VEC",
    "start": "635880",
    "end": "638800"
  },
  {
    "text": "find and remove header header request",
    "start": "638800",
    "end": "641079"
  },
  {
    "text": "this yeah since uh an average request",
    "start": "641079",
    "end": "644240"
  },
  {
    "text": "has significantly fewer than 100 headers",
    "start": "644240",
    "end": "646160"
  },
  {
    "text": "10 to 30 flipping the lookup direction",
    "start": "646160",
    "end": "648279"
  },
  {
    "text": "would reduce the number of reads while",
    "start": "648279",
    "end": "649880"
  },
  {
    "text": "yielding the same intersection because",
    "start": "649880",
    "end": "651839"
  },
  {
    "text": "we are working in Rust and because",
    "start": "651839",
    "end": "653360"
  },
  {
    "text": "retain does not exist for header uh",
    "start": "653360",
    "end": "655800"
  },
  {
    "text": "header map yet we have to collect the",
    "start": "655800",
    "end": "658200"
  },
  {
    "text": "identif or ident ified internal headers",
    "start": "658200",
    "end": "660560"
  },
  {
    "text": "in a separate step before removing them",
    "start": "660560",
    "end": "662680"
  },
  {
    "text": "from the request conceptually it looks",
    "start": "662680",
    "end": "664600"
  },
  {
    "text": "like this",
    "start": "664600",
    "end": "666440"
  },
  {
    "text": "nice what like you know like they they",
    "start": "666440",
    "end": "669120"
  },
  {
    "text": "already writing pingora they're already",
    "start": "669120",
    "end": "671480"
  },
  {
    "text": "doing all of this they could also just",
    "start": "671480",
    "end": "673639"
  },
  {
    "text": "write a second they could just write",
    "start": "673639",
    "end": "676240"
  },
  {
    "text": "their own HTTP handling that allows for",
    "start": "676240",
    "end": "679680"
  },
  {
    "text": "headers and just internal headers right",
    "start": "679680",
    "end": "682920"
  },
  {
    "text": "why not and then to drop you just go no",
    "start": "682920",
    "end": "687279"
  },
  {
    "text": "he's right that and that diagramac is",
    "start": "687279",
    "end": "689320"
  },
  {
    "text": "not a word yeah you know you're already",
    "start": "689320",
    "end": "691440"
  },
  {
    "text": "writing everything else so why not just",
    "start": "691440",
    "end": "694200"
  },
  {
    "text": "you could just write it in such a way",
    "start": "694200",
    "end": "695639"
  },
  {
    "text": "that you just never actually do no it is",
    "start": "695639",
    "end": "698240"
  },
  {
    "text": "di",
    "start": "698240",
    "end": "699240"
  },
  {
    "text": "diamic diamic x x.com is this true X I",
    "start": "699240",
    "end": "703079"
  },
  {
    "text": "want you guys to tell me am I even",
    "start": "703079",
    "end": "704720"
  },
  {
    "text": "saying this word even remotely correct",
    "start": "704720",
    "end": "707760"
  },
  {
    "text": "diagrammatically I don't even know what",
    "start": "707760",
    "end": "709399"
  },
  {
    "text": "you just said to me somehow that was not",
    "start": "709399",
    "end": "711000"
  },
  {
    "text": "English",
    "start": "711000",
    "end": "713000"
  },
  {
    "text": "dially just like okay b w boy bot W boy",
    "start": "713000",
    "end": "717440"
  },
  {
    "text": "nobody knows what the hell you just said",
    "start": "717440",
    "end": "719040"
  },
  {
    "text": "you using our benchmarking tool we can",
    "start": "719040",
    "end": "720839"
  },
  {
    "text": "measure the impact of this small change",
    "start": "720839",
    "end": "722800"
  },
  {
    "text": "and surprisingly this is already a sub a",
    "start": "722800",
    "end": "725079"
  },
  {
    "text": "substantial Improvement the runtime",
    "start": "725079",
    "end": "726880"
  },
  {
    "text": "improves from this much to that much",
    "start": "726880",
    "end": "729440"
  },
  {
    "text": "that's a 2.39 x speed up or speed",
    "start": "729440",
    "end": "732200"
  },
  {
    "text": "Improvement for our function now",
    "start": "732200",
    "end": "733839"
  },
  {
    "text": "remember you could go all the way back",
    "start": "733839",
    "end": "736040"
  },
  {
    "text": "up up to here and that reduces the CPU",
    "start": "736040",
    "end": "738560"
  },
  {
    "text": "load by quite a bit remember also",
    "start": "738560",
    "end": "741839"
  },
  {
    "text": "they're they're doing something here",
    "start": "741839",
    "end": "743079"
  },
  {
    "text": "that's a bit unfair to the problem",
    "start": "743079",
    "end": "745639"
  },
  {
    "text": "themselves which is saying that it's",
    "start": "745639",
    "end": "747199"
  },
  {
    "text": "using 680 CPUs continuously and",
    "start": "747199",
    "end": "750560"
  },
  {
    "text": "perfectly you can't do that so instead",
    "start": "750560",
    "end": "753120"
  },
  {
    "text": "you know this number also contains all",
    "start": "753120",
    "end": "754880"
  },
  {
    "text": "the fluff metrics that are involved with",
    "start": "754880",
    "end": "756600"
  },
  {
    "text": "it as well so it's actually much higher",
    "start": "756600",
    "end": "758959"
  },
  {
    "text": "than whatever this is so saving that is",
    "start": "758959",
    "end": "760959"
  },
  {
    "text": "already that's that's great let's go uh",
    "start": "760959",
    "end": "763680"
  },
  {
    "text": "we can calculate the theoretical CPU",
    "start": "763680",
    "end": "765519"
  },
  {
    "text": "percentage by multiplying the standard",
    "start": "765519",
    "end": "767199"
  },
  {
    "text": "uh starting utilization by the ratio of",
    "start": "767199",
    "end": "769399"
  },
  {
    "text": "new and old times all right nice",
    "start": "769399",
    "end": "771720"
  },
  {
    "text": "unfortunately if we subtract that from",
    "start": "771720",
    "end": "773600"
  },
  {
    "text": "the original",
    "start": "773600",
    "end": "774880"
  },
  {
    "text": "1.71% that only evaluates a savings of",
    "start": "774880",
    "end": "777839"
  },
  {
    "text": "this",
    "start": "777839",
    "end": "779360"
  },
  {
    "text": "okay or a 93% of total CPU time we",
    "start": "779360",
    "end": "782959"
  },
  {
    "text": "should be able to do better yeah let's",
    "start": "782959",
    "end": "785360"
  },
  {
    "text": "go let's do better cuz that's not even",
    "start": "785360",
    "end": "786760"
  },
  {
    "text": "1% it's not even 1% searching the data",
    "start": "786760",
    "end": "790240"
  },
  {
    "text": "structures now that we have reorganized",
    "start": "790240",
    "end": "792040"
  },
  {
    "text": "our function to search a static set of",
    "start": "792040",
    "end": "793880"
  },
  {
    "text": "internal headers instead of the actual",
    "start": "793880",
    "end": "795760"
  },
  {
    "text": "request we have the freedom to choose",
    "start": "795760",
    "end": "797760"
  },
  {
    "text": "what data structure we store our header",
    "start": "797760",
    "end": "799560"
  },
  {
    "text": "name in simply by changing the type of",
    "start": "799560",
    "end": "801760"
  },
  {
    "text": "internal header set let's go what do we",
    "start": "801760",
    "end": "803880"
  },
  {
    "text": "got all right we got this one to remove",
    "start": "803880",
    "end": "807199"
  },
  {
    "text": "request headers Keys filter map get the",
    "start": "807199",
    "end": "809600"
  },
  {
    "text": "keys collect oh my gosh you're doing it",
    "start": "809600",
    "end": "811560"
  },
  {
    "text": "in that",
    "start": "811560",
    "end": "813000"
  },
  {
    "text": "oh",
    "start": "813000",
    "end": "814519"
  },
  {
    "text": "oh",
    "start": "814519",
    "end": "816720"
  },
  {
    "text": "oh creating a vector oh gosh Heap",
    "start": "816720",
    "end": "821959"
  },
  {
    "text": "allocations our first attempt uh used",
    "start": "821959",
    "end": "824440"
  },
  {
    "text": "standard hashmap but there may be other",
    "start": "824440",
    "end": "827920"
  },
  {
    "text": "data structures that better suit our",
    "start": "827920",
    "end": "829920"
  },
  {
    "text": "needs all computer science students were",
    "start": "829920",
    "end": "832120"
  },
  {
    "text": "taught at some point that hash tables",
    "start": "832120",
    "end": "833800"
  },
  {
    "text": "are great because they have a constant",
    "start": "833800",
    "end": "835160"
  },
  {
    "text": "time ASM totic Behavior or instantaneous",
    "start": "835160",
    "end": "839160"
  },
  {
    "text": "look up it's not true for reading if",
    "start": "839160",
    "end": "841040"
  },
  {
    "text": "you're not familiar with Big O notation",
    "start": "841040",
    "end": "842560"
  },
  {
    "text": "it is a way to express an algorithm",
    "start": "842560",
    "end": "844079"
  },
  {
    "text": "consumes a resource in this case well",
    "start": "844079",
    "end": "845839"
  },
  {
    "text": "it's how it it's it's how it consumes a",
    "start": "845839",
    "end": "848079"
  },
  {
    "text": "resource relative to its input and so",
    "start": "848079",
    "end": "851360"
  },
  {
    "text": "what this means is no matter how big",
    "start": "851360",
    "end": "853000"
  },
  {
    "text": "you're no matter how big you're dealing",
    "start": "853000",
    "end": "854880"
  },
  {
    "text": "with in a hashmap it still has the exact",
    "start": "854880",
    "end": "857519"
  },
  {
    "text": "same lookup time whether it's small or",
    "start": "857519",
    "end": "859920"
  },
  {
    "text": "whether it's big big L notation more",
    "start": "859920",
    "end": "862399"
  },
  {
    "text": "like",
    "start": "862399",
    "end": "863600"
  },
  {
    "text": "that and in this let's see in this case",
    "start": "863600",
    "end": "865880"
  },
  {
    "text": "time as the input side changes okay I",
    "start": "865880",
    "end": "867519"
  },
  {
    "text": "didn't I didn't finish I didn't finish",
    "start": "867519",
    "end": "869199"
  },
  {
    "text": "that this means no matter how large the",
    "start": "869199",
    "end": "871160"
  },
  {
    "text": "map gets read reads always take the same",
    "start": "871160",
    "end": "873440"
  },
  {
    "text": "amount of time too bad this is only",
    "start": "873440",
    "end": "875360"
  },
  {
    "text": "partially true in order to read from a",
    "start": "875360",
    "end": "877079"
  },
  {
    "text": "hash table you would have to compute the",
    "start": "877079",
    "end": "878800"
  },
  {
    "text": "hash Computing a hash for for Strings",
    "start": "878800",
    "end": "881120"
  },
  {
    "text": "require reading every bite so I've",
    "start": "881120",
    "end": "882759"
  },
  {
    "text": "always been curious about this I I've",
    "start": "882759",
    "end": "885800"
  },
  {
    "text": "been I even think in my algorithms",
    "start": "885800",
    "end": "887920"
  },
  {
    "text": "course I mentioned this which is we have",
    "start": "887920",
    "end": "889360"
  },
  {
    "text": "o one lookup but it can't be over one",
    "start": "889360",
    "end": "891720"
  },
  {
    "text": "lookup it has to be o of key size lookup",
    "start": "891720",
    "end": "895440"
  },
  {
    "text": "correct I've always been so dang curious",
    "start": "895440",
    "end": "898399"
  },
  {
    "text": "about this I think what they're saying",
    "start": "898399",
    "end": "900320"
  },
  {
    "text": "is that I think and I think the the the",
    "start": "900320",
    "end": "902720"
  },
  {
    "text": "idea is is that a map eventually could",
    "start": "902720",
    "end": "905720"
  },
  {
    "text": "contain you know tens of thousands of",
    "start": "905720",
    "end": "909440"
  },
  {
    "text": "elements and so this is the size they're",
    "start": "909440",
    "end": "913440"
  },
  {
    "text": "considering this size does not grow as",
    "start": "913440",
    "end": "915880"
  },
  {
    "text": "input grows I think that's what they're",
    "start": "915880",
    "end": "918079"
  },
  {
    "text": "attempting to say my girlfriend keeps",
    "start": "918079",
    "end": "920800"
  },
  {
    "text": "telling me to practice the Big O",
    "start": "920800",
    "end": "923720"
  },
  {
    "text": "stuff you don't have a girlfriend okay I",
    "start": "923720",
    "end": "926399"
  },
  {
    "text": "understand she goes to a school in",
    "start": "926399",
    "end": "927480"
  },
  {
    "text": "Canada I hear you phbp uh so while read",
    "start": "927480",
    "end": "931360"
  },
  {
    "text": "time for a hashmap is constant over the",
    "start": "931360",
    "end": "933360"
  },
  {
    "text": "table size it's linear over key",
    "start": "933360",
    "end": "935759"
  },
  {
    "text": "length uh so our goal is to find a data",
    "start": "935759",
    "end": "938240"
  },
  {
    "text": "structure that is better than o of L",
    "start": "938240",
    "end": "940440"
  },
  {
    "text": "dude Big L coming in O of L uh where the",
    "start": "940440",
    "end": "944279"
  },
  {
    "text": "L is the key length where L is the",
    "start": "944279",
    "end": "945680"
  },
  {
    "text": "common twitch chatter is that what we're",
    "start": "945680",
    "end": "947279"
  },
  {
    "text": "about to hear she goes to a different",
    "start": "947279",
    "end": "949040"
  },
  {
    "text": "school",
    "start": "949040",
    "end": "950399"
  },
  {
    "text": "okay L take hey onead thank you for the",
    "start": "950399",
    "end": "953160"
  },
  {
    "text": "10 gifted Subs appreciate that plus",
    "start": "953160",
    "end": "956319"
  },
  {
    "text": "ratio uh yeah it's actually Big O plus",
    "start": "956319",
    "end": "959199"
  },
  {
    "text": "ratio uh there are a few common data",
    "start": "959199",
    "end": "961160"
  },
  {
    "text": "structures that provide for reads that",
    "start": "961160",
    "end": "962959"
  },
  {
    "text": "have a read behavior that meets our",
    "start": "962959",
    "end": "964759"
  },
  {
    "text": "criteria sorted sets like B Tre set use",
    "start": "964759",
    "end": "967959"
  },
  {
    "text": "comparisons for searching that makes",
    "start": "967959",
    "end": "970000"
  },
  {
    "text": "them logarithmic over key length but",
    "start": "970000",
    "end": "972519"
  },
  {
    "text": "they are also logarithmic in size two",
    "start": "972519",
    "end": "975440"
  },
  {
    "text": "the net effect is that even very fast",
    "start": "975440",
    "end": "977240"
  },
  {
    "text": "sorted sets like FST work out to be uh",
    "start": "977240",
    "end": "981160"
  },
  {
    "text": "to be a little 50 Nan slower in our",
    "start": "981160",
    "end": "983839"
  },
  {
    "text": "benchmarks than the standard hashmap a",
    "start": "983839",
    "end": "985759"
  },
  {
    "text": "lot of times when you're getting really",
    "start": "985759",
    "end": "986839"
  },
  {
    "text": "clever you will find that these things",
    "start": "986839",
    "end": "988720"
  },
  {
    "text": "don't don't make a huge amount of",
    "start": "988720",
    "end": "989839"
  },
  {
    "text": "difference right uh like like a really",
    "start": "989839",
    "end": "992399"
  },
  {
    "text": "funny thing is just storing stuff in an",
    "start": "992399",
    "end": "994240"
  },
  {
    "text": "array like say you have 50 items and you",
    "start": "994240",
    "end": "997199"
  },
  {
    "text": "store it in an array instead of a",
    "start": "997199",
    "end": "998880"
  },
  {
    "text": "hashmap it's almost always faster to",
    "start": "998880",
    "end": "1002319"
  },
  {
    "text": "take an array and search through your",
    "start": "1002319",
    "end": "1004519"
  },
  {
    "text": "array linearly than it is to put it into",
    "start": "1004519",
    "end": "1007759"
  },
  {
    "text": "a map which is just hard for a lot of",
    "start": "1007759",
    "end": "1010480"
  },
  {
    "text": "people to realize but it's just",
    "start": "1010480",
    "end": "1012240"
  },
  {
    "text": "sometimes being clever is not good",
    "start": "1012240",
    "end": "1015040"
  },
  {
    "text": "sometimes being so stupid actually ends",
    "start": "1015040",
    "end": "1017120"
  },
  {
    "text": "up being being better State machines",
    "start": "1017120",
    "end": "1019880"
  },
  {
    "text": "like parsers and redx are another",
    "start": "1019880",
    "end": "1021399"
  },
  {
    "text": "example another common tool by the way",
    "start": "1021399",
    "end": "1023639"
  },
  {
    "text": "Cloud flare has accidentally turned off",
    "start": "1023639",
    "end": "1025918"
  },
  {
    "text": "the internet once due to a Rex so don't",
    "start": "1025919",
    "end": "1029280"
  },
  {
    "text": "just use okay just because they say Rex",
    "start": "1029280",
    "end": "1031280"
  },
  {
    "text": "is our tool does not mean they actually",
    "start": "1031280",
    "end": "1033000"
  },
  {
    "text": "are a tool all right they're an evil",
    "start": "1033000",
    "end": "1035079"
  },
  {
    "text": "tool for searching strings though it's",
    "start": "1035079",
    "end": "1037240"
  },
  {
    "text": "hard to consider them a data structure",
    "start": "1037240",
    "end": "1039199"
  },
  {
    "text": "yeah I think internally are rexes push",
    "start": "1039199",
    "end": "1041678"
  },
  {
    "text": "down automatas I can never I I can't",
    "start": "1041679",
    "end": "1043319"
  },
  {
    "text": "remember my life is too uh far removed",
    "start": "1043319",
    "end": "1045600"
  },
  {
    "text": "from the academic world are they push",
    "start": "1045600",
    "end": "1048079"
  },
  {
    "text": "down automat or are they not I don't",
    "start": "1048079",
    "end": "1050640"
  },
  {
    "text": "think they are so if they're not push",
    "start": "1050640",
    "end": "1052720"
  },
  {
    "text": "down uh automatons then they're not then",
    "start": "1052720",
    "end": "1055240"
  },
  {
    "text": "they're not a data structure are they or",
    "start": "1055240",
    "end": "1057400"
  },
  {
    "text": "are they not I can't remember anyways",
    "start": "1057400",
    "end": "1059520"
  },
  {
    "text": "Rex can be a DFA okay so they can be a",
    "start": "1059520",
    "end": "1061840"
  },
  {
    "text": "DFA uh these systems work by accepting",
    "start": "1061840",
    "end": "1064559"
  },
  {
    "text": "input one unit at a time and determining",
    "start": "1064559",
    "end": "1066520"
  },
  {
    "text": "on each step whether or not to keep",
    "start": "1066520",
    "end": "1068360"
  },
  {
    "text": "evaluating being able to make these",
    "start": "1068360",
    "end": "1070039"
  },
  {
    "text": "determinations at every step means State",
    "start": "1070039",
    "end": "1071720"
  },
  {
    "text": "machines are very fast to identify",
    "start": "1071720",
    "end": "1073320"
  },
  {
    "text": "negative cases yep uh when a string is",
    "start": "1073320",
    "end": "1076280"
  },
  {
    "text": "not valid or not a match this is perfect",
    "start": "1076280",
    "end": "1078960"
  },
  {
    "text": "for us because only one or two headers",
    "start": "1078960",
    "end": "1081159"
  },
  {
    "text": "per request on average will be internal",
    "start": "1081159",
    "end": "1083720"
  },
  {
    "text": "in fact benchmarking and implementation",
    "start": "1083720",
    "end": "1085640"
  },
  {
    "text": "of clear internal headers using Rex",
    "start": "1085640",
    "end": "1087440"
  },
  {
    "text": "Expressions clocks in as taking about",
    "start": "1087440",
    "end": "1090440"
  },
  {
    "text": "twice as long as the hashmap based",
    "start": "1090440",
    "end": "1092039"
  },
  {
    "text": "solution this is impressively fast given",
    "start": "1092039",
    "end": "1094799"
  },
  {
    "text": "the redx let's see given that redx as",
    "start": "1094799",
    "end": "1096640"
  },
  {
    "text": "while powerful aren't known for their",
    "start": "1096640",
    "end": "1098280"
  },
  {
    "text": "raw speed this approach feels promising",
    "start": "1098280",
    "end": "1100559"
  },
  {
    "text": "we just need something in between a data",
    "start": "1100559",
    "end": "1102240"
  },
  {
    "text": "structure and a state machine that's",
    "start": "1102240",
    "end": "1104039"
  },
  {
    "text": "where a tree comes",
    "start": "1104039",
    "end": "1106000"
  },
  {
    "text": "in don't just tree a tree pronounced",
    "start": "1106000",
    "end": "1109120"
  },
  {
    "text": "like try or tree no it's pronounced like",
    "start": "1109120",
    "end": "1110960"
  },
  {
    "text": "tree because it stands for retrieval is",
    "start": "1110960",
    "end": "1113440"
  },
  {
    "text": "a type of tree data structure normally",
    "start": "1113440",
    "end": "1115120"
  },
  {
    "text": "used for prefix searches or autoc",
    "start": "1115120",
    "end": "1116799"
  },
  {
    "text": "complete systems over a known set of",
    "start": "1116799",
    "end": "1118600"
  },
  {
    "text": "strings the structure of a tree lends",
    "start": "1118600",
    "end": "1121559"
  },
  {
    "text": "itself to this because each node in the",
    "start": "1121559",
    "end": "1123520"
  },
  {
    "text": "tree represents a substring of",
    "start": "1123520",
    "end": "1125240"
  },
  {
    "text": "characters found in the initial set the",
    "start": "1125240",
    "end": "1127200"
  },
  {
    "text": "connections between the nodes represent",
    "start": "1127200",
    "end": "1128760"
  },
  {
    "text": "the characters that can follow a prefix",
    "start": "1128760",
    "end": "1130320"
  },
  {
    "text": "here's a small example of a tree built",
    "start": "1130320",
    "end": "1131679"
  },
  {
    "text": "from the words and ant dad do and Dot so",
    "start": "1131679",
    "end": "1134600"
  },
  {
    "text": "for those that don't know it's just a",
    "start": "1134600",
    "end": "1136600"
  },
  {
    "text": "it's just an autocomplete right it's",
    "start": "1136600",
    "end": "1139200"
  },
  {
    "text": "just an autocomplete if you've never",
    "start": "1139200",
    "end": "1140440"
  },
  {
    "text": "used an autocomplete the maximum depth",
    "start": "1140440",
    "end": "1142760"
  },
  {
    "text": "of a tree is the maximum amount of",
    "start": "1142760",
    "end": "1146520"
  },
  {
    "text": "prefix characters that match so if you",
    "start": "1146520",
    "end": "1148679"
  },
  {
    "text": "have all of your words in there and the",
    "start": "1148679",
    "end": "1151360"
  },
  {
    "text": "worst case is four matching characters",
    "start": "1151360",
    "end": "1154360"
  },
  {
    "text": "then the depth at Max is four or it",
    "start": "1154360",
    "end": "1158280"
  },
  {
    "text": "technically be five because you'd have",
    "start": "1158280",
    "end": "1159559"
  },
  {
    "text": "the the actual Leaf noes that represent",
    "start": "1159559",
    "end": "1161240"
  },
  {
    "text": "each word it needs huge memory though",
    "start": "1161240",
    "end": "1164280"
  },
  {
    "text": "sometimes it needs huge memory uh that's",
    "start": "1164280",
    "end": "1166280"
  },
  {
    "text": "not necessarily true remember clear",
    "start": "1166280",
    "end": "1167600"
  },
  {
    "text": "internal headers have 100 100 headers",
    "start": "1167600",
    "end": "1169760"
  },
  {
    "text": "and my guess is that their headers my",
    "start": "1169760",
    "end": "1171760"
  },
  {
    "text": "real guess is that their headers",
    "start": "1171760",
    "end": "1173480"
  },
  {
    "text": "probably all start with x- CF Dash and",
    "start": "1173480",
    "end": "1177679"
  },
  {
    "text": "so you could even drop those first",
    "start": "1177679",
    "end": "1179480"
  },
  {
    "text": "incommon five characters to reduce the",
    "start": "1179480",
    "end": "1181640"
  },
  {
    "text": "size of your tree that's my guess and",
    "start": "1181640",
    "end": "1183679"
  },
  {
    "text": "then you just start comparing headers",
    "start": "1183679",
    "end": "1185840"
  },
  {
    "text": "starting at that that's my guess all",
    "start": "1185840",
    "end": "1189600"
  },
  {
    "text": "right the root node represents an empty",
    "start": "1189600",
    "end": "1191240"
  },
  {
    "text": "string prefix so the two-letter edges",
    "start": "1191240",
    "end": "1193120"
  },
  {
    "text": "directed out of it are the only letters",
    "start": "1193120",
    "end": "1195799"
  },
  {
    "text": "that can appear as the first letter in",
    "start": "1195799",
    "end": "1197799"
  },
  {
    "text": "the list of the strings A and D",
    "start": "1197799",
    "end": "1199520"
  },
  {
    "text": "subsequently subsequent nodes have an",
    "start": "1199520",
    "end": "1201559"
  },
  {
    "text": "increasingly longer prefix until the",
    "start": "1201559",
    "end": "1203159"
  },
  {
    "text": "final word uh valid words are reached",
    "start": "1203159",
    "end": "1205720"
  },
  {
    "text": "this layout should make it easy to see",
    "start": "1205720",
    "end": "1207320"
  },
  {
    "text": "how a tree could be useful for quickly",
    "start": "1207320",
    "end": "1209080"
  },
  {
    "text": "identifying strings that are not",
    "start": "1209080",
    "end": "1210360"
  },
  {
    "text": "contained even at the root node we can",
    "start": "1210360",
    "end": "1212799"
  },
  {
    "text": "eliminate any strings that are presented",
    "start": "1212799",
    "end": "1215520"
  },
  {
    "text": "that do not start with a or D this",
    "start": "1215520",
    "end": "1218000"
  },
  {
    "text": "parsing uh this pairing down of the",
    "start": "1218000",
    "end": "1219679"
  },
  {
    "text": "search space on every step gives reading",
    "start": "1219679",
    "end": "1221640"
  },
  {
    "text": "from a tree the log of L we are looking",
    "start": "1221640",
    "end": "1224320"
  },
  {
    "text": "for is it log of L how I wonder how they",
    "start": "1224320",
    "end": "1226720"
  },
  {
    "text": "computed that I think it's theoretically",
    "start": "1226720",
    "end": "1229159"
  },
  {
    "text": "log of L right so when I say",
    "start": "1229159",
    "end": "1231400"
  },
  {
    "text": "theoretically log of L what it means is",
    "start": "1231400",
    "end": "1233480"
  },
  {
    "text": "that theoretically you could have two",
    "start": "1233480",
    "end": "1235039"
  },
  {
    "text": "words that have the same amount of",
    "start": "1235039",
    "end": "1236840"
  },
  {
    "text": "characters all the way up until like the",
    "start": "1236840",
    "end": "1238280"
  },
  {
    "text": "last one right you get a x- cf- this is",
    "start": "1238280",
    "end": "1243000"
  },
  {
    "text": "the exact same prefix as the other one X",
    "start": "1243000",
    "end": "1246159"
  },
  {
    "text": "versus Y and so that would be the only",
    "start": "1246159",
    "end": "1248520"
  },
  {
    "text": "ones I think that could actually do that",
    "start": "1248520",
    "end": "1250720"
  },
  {
    "text": "uh but only for misses hits with the",
    "start": "1250720",
    "end": "1252919"
  },
  {
    "text": "tree are still uh o ofl but that's okay",
    "start": "1252919",
    "end": "1255960"
  },
  {
    "text": "well again it's sort of O ofl uh but we",
    "start": "1255960",
    "end": "1258320"
  },
  {
    "text": "are because we're getting misses 90% of",
    "start": "1258320",
    "end": "1260000"
  },
  {
    "text": "the time yeah I it's actually super",
    "start": "1260000",
    "end": "1261320"
  },
  {
    "text": "clever that they did an inverse matching",
    "start": "1261320",
    "end": "1263919"
  },
  {
    "text": "so you use your tree instead of to match",
    "start": "1263919",
    "end": "1266679"
  },
  {
    "text": "you use it to invert inverse match Brie",
    "start": "1266679",
    "end": "1269840"
  },
  {
    "text": "being so serious while Chad is in chaos",
    "start": "1269840",
    "end": "1271360"
  },
  {
    "text": "is my favorite genre I know you guys are",
    "start": "1271360",
    "end": "1273320"
  },
  {
    "text": "absolutely insane right now I'm watching",
    "start": "1273320",
    "end": "1275880"
  },
  {
    "text": "I'm watching TJ get just just things",
    "start": "1275880",
    "end": "1279120"
  },
  {
    "text": "deleted time and time again it's just",
    "start": "1279120",
    "end": "1282320"
  },
  {
    "text": "crazy mods get paid in exposure exactly",
    "start": "1282320",
    "end": "1285480"
  },
  {
    "text": "this is crazy by the way I'm trying to",
    "start": "1285480",
    "end": "1287320"
  },
  {
    "text": "like I'm actually trying to involve you",
    "start": "1287320",
    "end": "1289360"
  },
  {
    "text": "guys I'm really trying to involve you",
    "start": "1289360",
    "end": "1291799"
  },
  {
    "text": "guys but then you guys just turn into",
    "start": "1291799",
    "end": "1294240"
  },
  {
    "text": "just just just absolute insane insane",
    "start": "1294240",
    "end": "1296919"
  },
  {
    "text": "people okay thank you thank you very",
    "start": "1296919",
    "end": "1299279"
  },
  {
    "text": "much for the two the the back-to-back",
    "start": "1299279",
    "end": "1300799"
  },
  {
    "text": "Subs I appreciate that if this mods get",
    "start": "1300799",
    "end": "1303279"
  },
  {
    "text": "pinned Prime needs to pay is mods",
    "start": "1303279",
    "end": "1305080"
  },
  {
    "text": "deliverable of course night shade dude",
    "start": "1305080",
    "end": "1306760"
  },
  {
    "text": "you went from deleting his messages to",
    "start": "1306760",
    "end": "1308760"
  },
  {
    "text": "pinning it real quick all right",
    "start": "1308760",
    "end": "1310880"
  },
  {
    "text": "benchmarking a few try Implement tree",
    "start": "1310880",
    "end": "1312880"
  },
  {
    "text": "implementations from crates IO was",
    "start": "1312880",
    "end": "1314760"
  },
  {
    "text": "disheartening remember most trees are",
    "start": "1314760",
    "end": "1316480"
  },
  {
    "text": "used in response to keyboard events so",
    "start": "1316480",
    "end": "1318679"
  },
  {
    "text": "optimizing them to run in both the a hot",
    "start": "1318679",
    "end": "1320919"
  },
  {
    "text": "path of tens of millions of requests per",
    "start": "1320919",
    "end": "1322400"
  },
  {
    "text": "second is not a priority the fastest",
    "start": "1322400",
    "end": "1324720"
  },
  {
    "text": "existing implementation we found was",
    "start": "1324720",
    "end": "1326240"
  },
  {
    "text": "radex tree uh but it's still clocked in",
    "start": "1326240",
    "end": "1328720"
  },
  {
    "text": "at a few a full microsc slower than",
    "start": "1328720",
    "end": "1331159"
  },
  {
    "text": "hashmap the only thing left to do was",
    "start": "1331159",
    "end": "1334200"
  },
  {
    "text": "write our own implementation of a tree",
    "start": "1334200",
    "end": "1336120"
  },
  {
    "text": "that was optimized for our use case tree",
    "start": "1336120",
    "end": "1338440"
  },
  {
    "text": "hard and we did today we are announcing",
    "start": "1338440",
    "end": "1340600"
  },
  {
    "text": "tree hard the repository gives a full",
    "start": "1340600",
    "end": "1343000"
  },
  {
    "text": "description of how it works but the big",
    "start": "1343000",
    "end": "1344640"
  },
  {
    "text": "takeaway is that it gets speed from",
    "start": "1344640",
    "end": "1346080"
  },
  {
    "text": "storing node relationships in bits of",
    "start": "1346080",
    "end": "1348120"
  },
  {
    "text": "unsign Ed integers and keeps the entire",
    "start": "1348120",
    "end": "1350279"
  },
  {
    "text": "tree in contiguous chunks of memory in",
    "start": "1350279",
    "end": "1352320"
  },
  {
    "text": "our benchmarks we found that the tree",
    "start": "1352320",
    "end": "1353880"
  },
  {
    "text": "hard reduces an average runtime for",
    "start": "1353880",
    "end": "1356039"
  },
  {
    "text": "Clear internal headers to under a",
    "start": "1356039",
    "end": "1357799"
  },
  {
    "text": "microsc nice and we can use the same",
    "start": "1357799",
    "end": "1360559"
  },
  {
    "text": "formula or formula above from above to",
    "start": "1360559",
    "end": "1363919"
  },
  {
    "text": "calculate the expected CPU utilization",
    "start": "1363919",
    "end": "1365840"
  },
  {
    "text": "for tree hard to be this right here 43%",
    "start": "1365840",
    "end": "1369400"
  },
  {
    "text": "that means we have finally achieved and",
    "start": "1369400",
    "end": "1371240"
  },
  {
    "text": "surpassed our goal by reducing the comp",
    "start": "1371240",
    "end": "1373720"
  },
  {
    "text": "uh compute utilization of pingora origin",
    "start": "1373720",
    "end": "1376400"
  },
  {
    "text": "by 1.71%",
    "start": "1376400",
    "end": "1378720"
  },
  {
    "text": "minus this",
    "start": "1378720",
    "end": "1380360"
  },
  {
    "text": "1.28% 2 to the 7 it's beautiful it's a",
    "start": "1380360",
    "end": "1383480"
  },
  {
    "text": "power of two it's a power of two that is",
    "start": "1383480",
    "end": "1386760"
  },
  {
    "text": "beautiful up until now uh we have been",
    "start": "1386760",
    "end": "1388720"
  },
  {
    "text": "working only in theory in local",
    "start": "1388720",
    "end": "1390279"
  },
  {
    "text": "benchmarking what really matters is",
    "start": "1390279",
    "end": "1392039"
  },
  {
    "text": "whether our benchmarking reflects real",
    "start": "1392039",
    "end": "1393640"
  },
  {
    "text": "life Behavior tree hard has been running",
    "start": "1393640",
    "end": "1395919"
  },
  {
    "text": "and production since July 2024 and over",
    "start": "1395919",
    "end": "1398159"
  },
  {
    "text": "the course of this project we have been",
    "start": "1398159",
    "end": "1399640"
  },
  {
    "text": "collecting performance metrics from the",
    "start": "1399640",
    "end": "1401480"
  },
  {
    "text": "running production of pingora origin",
    "start": "1401480",
    "end": "1403400"
  },
  {
    "text": "using a statistical sampling of its",
    "start": "1403400",
    "end": "1404960"
  },
  {
    "text": "stack Trace over time oh nice statistic",
    "start": "1404960",
    "end": "1407200"
  },
  {
    "text": "let's go statistic sampling of stack",
    "start": "1407200",
    "end": "1408720"
  },
  {
    "text": "traces let's go uh that's what Chrome",
    "start": "1408720",
    "end": "1410480"
  },
  {
    "text": "uses by the way also that's how Chrome",
    "start": "1410480",
    "end": "1412720"
  },
  {
    "text": "determines how to improve JavaScript is",
    "start": "1412720",
    "end": "1414760"
  },
  {
    "text": "by doing the exact same thing taking",
    "start": "1414760",
    "end": "1416840"
  },
  {
    "text": "small little stack traces every now and",
    "start": "1416840",
    "end": "1419200"
  },
  {
    "text": "then from just a couple users actually",
    "start": "1419200",
    "end": "1420919"
  },
  {
    "text": "yields a really complete idea of what is",
    "start": "1420919",
    "end": "1423679"
  },
  {
    "text": "being used and how often it's being used",
    "start": "1423679",
    "end": "1425720"
  },
  {
    "text": "you're not helping my dyslexia he",
    "start": "1425720",
    "end": "1427440"
  },
  {
    "text": "pronounces treat because uh it comes",
    "start": "1427440",
    "end": "1429640"
  },
  {
    "text": "from retrieval it does it comes from",
    "start": "1429640",
    "end": "1431240"
  },
  {
    "text": "retrieval it's called a retrieval tree",
    "start": "1431240",
    "end": "1433640"
  },
  {
    "text": "uh uh tree hard has been running in",
    "start": "1433640",
    "end": "1436279"
  },
  {
    "text": "production since July 2024 and over the",
    "start": "1436279",
    "end": "1438039"
  },
  {
    "text": "course of this",
    "start": "1438039",
    "end": "1439559"
  },
  {
    "text": "using this technique the CPU utilization",
    "start": "1439559",
    "end": "1441960"
  },
  {
    "text": "percentage of this function is estimated",
    "start": "1441960",
    "end": "1443760"
  },
  {
    "text": "by the percent of samples in which the",
    "start": "1443760",
    "end": "1445279"
  },
  {
    "text": "function appears which is actually a",
    "start": "1445279",
    "end": "1446799"
  },
  {
    "text": "really great way to do it if you have",
    "start": "1446799",
    "end": "1448120"
  },
  {
    "text": "enough samples uh if we compare the",
    "start": "1448120",
    "end": "1450039"
  },
  {
    "text": "sample performance of the different",
    "start": "1450039",
    "end": "1451440"
  },
  {
    "text": "versions of clear internal headers we",
    "start": "1451440",
    "end": "1453320"
  },
  {
    "text": "can see that the results from the",
    "start": "1453320",
    "end": "1454440"
  },
  {
    "text": "performance sampling closely matches our",
    "start": "1454440",
    "end": "1456039"
  },
  {
    "text": "benchmarks predicted nice let's go",
    "start": "1456039",
    "end": "1459400"
  },
  {
    "text": "that's really great actual CPU usage oh",
    "start": "1459400",
    "end": "1461880"
  },
  {
    "text": "it went even down even better even",
    "start": "1461880",
    "end": "1464880"
  },
  {
    "text": "better wow nice in conclusion optimizing",
    "start": "1464880",
    "end": "1467840"
  },
  {
    "text": "functions in writing new data structures",
    "start": "1467840",
    "end": "1469320"
  },
  {
    "text": "is cool but the real conclusion for this",
    "start": "1469320",
    "end": "1471159"
  },
  {
    "text": "post is that knowing where your code is",
    "start": "1471159",
    "end": "1473080"
  },
  {
    "text": "slow and by how much is more important",
    "start": "1473080",
    "end": "1475600"
  },
  {
    "text": "than how you go about optimizing it one",
    "start": "1475600",
    "end": "1477640"
  },
  {
    "text": "would argue it's probably hand in hand",
    "start": "1477640",
    "end": "1479240"
  },
  {
    "text": "equally important take a moment to thank",
    "start": "1479240",
    "end": "1481399"
  },
  {
    "text": "your observability team if you're lucky",
    "start": "1481399",
    "end": "1483000"
  },
  {
    "text": "enough to have one and make use of flame",
    "start": "1483000",
    "end": "1484919"
  },
  {
    "text": "graphs or any other profiling and",
    "start": "1484919",
    "end": "1486440"
  },
  {
    "text": "benchmarking tool you can by the way",
    "start": "1486440",
    "end": "1488320"
  },
  {
    "text": "flame graphs any proportional any",
    "start": "1488320",
    "end": "1491200"
  },
  {
    "text": "proportional performance chart is truly",
    "start": "1491200",
    "end": "1493200"
  },
  {
    "text": "the way to go because if you have a nice",
    "start": "1493200",
    "end": "1495200"
  },
  {
    "text": "prop uh proportional performance chart",
    "start": "1495200",
    "end": "1497039"
  },
  {
    "text": "you can actually tell what what is",
    "start": "1497039",
    "end": "1498840"
  },
  {
    "text": "actually taking what time and by how",
    "start": "1498840",
    "end": "1501360"
  },
  {
    "text": "much no no no no 34 is better right cuz",
    "start": "1501360",
    "end": "1504360"
  },
  {
    "text": "it's the actual CPU usage so someone",
    "start": "1504360",
    "end": "1506720"
  },
  {
    "text": "said isn't 0.34 worse than 0.43 no",
    "start": "1506720",
    "end": "1510360"
  },
  {
    "text": "predicted CPU usage was right here",
    "start": "1510360",
    "end": "1512840"
  },
  {
    "text": "actual CPU usage went down so that means",
    "start": "1512840",
    "end": "1515320"
  },
  {
    "text": "it's even better optimizing operations",
    "start": "1515320",
    "end": "1517640"
  },
  {
    "text": "that are already measured in",
    "start": "1517640",
    "end": "1518720"
  },
  {
    "text": "microseconds may seem a little silly but",
    "start": "1518720",
    "end": "1520640"
  },
  {
    "text": "these small improvements add up you know",
    "start": "1520640",
    "end": "1522360"
  },
  {
    "text": "what I would personally say anytime",
    "start": "1522360",
    "end": "1524279"
  },
  {
    "text": "you're doing performance work it's fun",
    "start": "1524279",
    "end": "1525799"
  },
  {
    "text": "to make things faster it just is it's a",
    "start": "1525799",
    "end": "1528360"
  },
  {
    "text": "a fun exercise and even if you're making",
    "start": "1528360",
    "end": "1530279"
  },
  {
    "text": "little bits faster you are improving the",
    "start": "1530279",
    "end": "1532440"
  },
  {
    "text": "experience hopefully for a lot of people",
    "start": "1532440",
    "end": "1534679"
  },
  {
    "text": "and for cloud flare every single little",
    "start": "1534679",
    "end": "1536880"
  },
  {
    "text": "percentage actually makes a giant",
    "start": "1536880",
    "end": "1538840"
  },
  {
    "text": "difference so hopefully they continue to",
    "start": "1538840",
    "end": "1541120"
  },
  {
    "text": "enjoy that I I mean I really enjoyed",
    "start": "1541120",
    "end": "1542799"
  },
  {
    "text": "this article this was fantastic article",
    "start": "1542799",
    "end": "1544720"
  },
  {
    "text": "good job tree people I hope you do try",
    "start": "1544720",
    "end": "1546960"
  },
  {
    "text": "hard one day I know it's called the tree",
    "start": "1546960",
    "end": "1548960"
  },
  {
    "text": "I you know what just for you I'll I will",
    "start": "1548960",
    "end": "1551240"
  },
  {
    "text": "I will pronounce it the way you want me",
    "start": "1551240",
    "end": "1552679"
  },
  {
    "text": "to a good day to try hard saving 1% at a",
    "start": "1552679",
    "end": "1556720"
  },
  {
    "text": "time good job the name is the one",
    "start": "1556720",
    "end": "1559760"
  },
  {
    "text": "percentag the one percent of I got to go",
    "start": "1559760",
    "end": "1562559"
  },
  {
    "text": "PE I do",
    "start": "1562559",
    "end": "1565600"
  }
]