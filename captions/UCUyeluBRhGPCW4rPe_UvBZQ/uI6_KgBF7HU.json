[
  {
    "text": "all right there we go all right oxidizing oh camel locality I don't know what that means obviously the last ones",
    "start": "480",
    "end": "5940"
  },
  {
    "text": "must mean something different but oxidizing oh camel let's do this this is brand new this is from Jane Street with",
    "start": "5940",
    "end": "12420"
  },
  {
    "text": "me today of course is the Young Buck TJ he has resting my hand in your or your",
    "start": "12420",
    "end": "19500"
  },
  {
    "text": "my face in your palm there you go he has obviously a YouTube channel and a twitch channel uh tiege",
    "start": "19500",
    "end": "26640"
  },
  {
    "text": "underscore DV correct that's correct you can find me there and also Twitter",
    "start": "26640",
    "end": "32099"
  },
  {
    "text": "true if you want to see Memes yep and okay we'll tweets yep a lot of vote camel tweets all right coming from ocam",
    "start": "32099",
    "end": "38460"
  },
  {
    "text": "well the rust programming language has many appealing features oh yeah by the way why TJ is probably what someone's asking because TJ's been doing a lot of",
    "start": "38460",
    "end": "45059"
  },
  {
    "text": "vocamo and has even played with this feature and I myself haven't for some amount of background this feature",
    "start": "45059",
    "end": "51660"
  },
  {
    "text": "involves making oh camel have some features of rust around lifetimes correct yeah there's they're doing like",
    "start": "51660",
    "end": "58199"
  },
  {
    "text": "a three-part Series so hopefully we can do the second one later and then they're they're the ultimate goal is like",
    "start": "58199",
    "end": "64198"
  },
  {
    "text": "eliminating data races completely so that's like one of the cool things that you can do we'll get there okay okay",
    "start": "64199",
    "end": "71939"
  },
  {
    "text": "the rust programming language has many appealing features rust system for tracking lifetimes and ownership allows",
    "start": "71939",
    "end": "77280"
  },
  {
    "text": "users to safely Express patterns that are awkward in O camel such as stack allocated values and custom allocation",
    "start": "77280",
    "end": "82920"
  },
  {
    "text": "schemes managed resources that can't be easily garbage collected I.E file descriptors or GPU memory mutable data",
    "start": "82920",
    "end": "89460"
  },
  {
    "text": "structures in the presence of uh concurrency okay I think I understand most those words uh",
    "start": "89460",
    "end": "95700"
  },
  {
    "text": "yeah I'm curious why just like even this like don't you just hold on oh yeah because the file descriptor often is a",
    "start": "95700",
    "end": "101400"
  },
  {
    "text": "just a number right yeah and so yeah you're gonna show there's a cool example actually of that one but just like for",
    "start": "101400",
    "end": "107159"
  },
  {
    "text": "some additional context for people who aren't like as aware right okay almost garbage collected I mean it's kind of",
    "start": "107159",
    "end": "112380"
  },
  {
    "text": "implied in this right yeah so doing stuff like actually managing you know to",
    "start": "112380",
    "end": "118079"
  },
  {
    "text": "put something on the stack instead of just allocating it to the Heap and then checking for it later that's like you",
    "start": "118079",
    "end": "123720"
  },
  {
    "text": "have to have some scheme to tell the language it's time to do this versus time to do that right yes and if you",
    "start": "123720",
    "end": "129239"
  },
  {
    "text": "could do it it'd be fast it like greatly speeds it up like order of magnitude difference especially where you maybe",
    "start": "129239",
    "end": "136440"
  },
  {
    "text": "need to like allocate this same kind of value a bunch of times right or or other things like that so like you know you",
    "start": "136440",
    "end": "142620"
  },
  {
    "text": "got to think you write Russ you're like I can pick where the memory lives but then you're writing okay I'm only like I",
    "start": "142620",
    "end": "147720"
  },
  {
    "text": "just let the garbage collector do it what if there was an in-between yeah that'd be great honestly like I said if",
    "start": "147720",
    "end": "153360"
  },
  {
    "text": "I could just use rust with the garbage collector I'd be super happy because you know there's times where I want the",
    "start": "153360",
    "end": "158940"
  },
  {
    "text": "speed but for the most part A compiled language is fast enough right like just like go it's it's mostly just fast",
    "start": "158940",
    "end": "164459"
  },
  {
    "text": "enough there's only very few Niche instances where go stops being fast enough yep all right on the other hand",
    "start": "164459",
    "end": "169680"
  },
  {
    "text": "rust approach comes with trade-offs uh as shoeing garbage collection requires careful consideration of lifetimes and",
    "start": "169680",
    "end": "175500"
  },
  {
    "text": "ownership throughout the code base emphasizing lifetime polymorphism can make type inference untenable a design",
    "start": "175500",
    "end": "181560"
  },
  {
    "text": "choice that wouldn't fit o camel uh not only that I think can we stop though and just say I'm really impressed I've never",
    "start": "181560",
    "end": "187860"
  },
  {
    "text": "seen you read a paragraph with that many big words and actually make it through I did first try I did I made it through",
    "start": "187860",
    "end": "193140"
  },
  {
    "text": "I've really been training for years at this point to be able to read at an 11th",
    "start": "193140",
    "end": "198180"
  },
  {
    "text": "grader like level and I'm pretty proud of that are you like trying to do really good",
    "start": "198180",
    "end": "204180"
  },
  {
    "text": "because I'm hanging out today or like what's going on I would like to say that despite your insults you still have your",
    "start": "204180",
    "end": "209459"
  },
  {
    "text": "chair just sideways you just have a chair in the background",
    "start": "209459",
    "end": "215819"
  },
  {
    "text": "ruining this entire thing while it's salting my reading skills thank you",
    "start": "215819",
    "end": "222799"
  },
  {
    "text": "the slow disappear all right anyways uh one thing I don't think they also mentioned here is just",
    "start": "224959",
    "end": "231000"
  },
  {
    "text": "that in general when you have to fully lifetime everything it can become just even a design choice that was good in",
    "start": "231000",
    "end": "237659"
  },
  {
    "text": "the moment can become a very bad design choice later on and so there's like a lot of things in here that are just very",
    "start": "237659",
    "end": "244440"
  },
  {
    "text": "interesting all right at Jane Street we've been working on extending oh camel to better support these use cases without giving up the principles that",
    "start": "244440",
    "end": "250140"
  },
  {
    "text": "make oh camel a convenient and flexible language to do so we're introducing a system of modes which track properties",
    "start": "250140",
    "end": "255720"
  },
  {
    "text": "like the locality and uniqueness of O camel values modes allow the compiler to emit better lower allocation code and",
    "start": "255720",
    "end": "261840"
  },
  {
    "text": "power users to write safer apis and with Advent of multi-course to statically guarantee there's that mispronunciation",
    "start": "261840",
    "end": "268919"
  },
  {
    "text": "database Freedom like it's still the right word it is close it was close all in a lightweight way that only affects",
    "start": "268919",
    "end": "275699"
  },
  {
    "text": "those needs okay very interesting I'm very excited especially stack allocation to me this is like a w if you could get stack allocations in any language but",
    "start": "275699",
    "end": "283199"
  },
  {
    "text": "mostly rely on garbage collection it's beautiful I'd love to see how they do this yeah I think the other thing",
    "start": "283199",
    "end": "289620"
  },
  {
    "text": "that's interesting is as we get a little bit further you'll see but like they're making a distinction that I didn't catch the first time I read this about modes",
    "start": "289620",
    "end": "295860"
  },
  {
    "text": "which is like modes aren't in the same way like part of the types system as",
    "start": "295860",
    "end": "301139"
  },
  {
    "text": "like lifetimes so like lifetime is part of the type okay right but then oh [Music]",
    "start": "301139",
    "end": "307259"
  },
  {
    "text": "so it's like in some ways a little bit orthogonal to the type itself yes",
    "start": "307259",
    "end": "313199"
  },
  {
    "text": "um which is so so it's cool right because the as you played a little bit with o camel they talked about you want",
    "start": "313199",
    "end": "318300"
  },
  {
    "text": "to be able to always infer the type of something for okay well basically like all the time right and so if this like",
    "start": "318300",
    "end": "325740"
  },
  {
    "text": "effectively lifetimes light this is like the first part right it's like lifetime's light effectively if that was",
    "start": "325740",
    "end": "331020"
  },
  {
    "text": "part of the type you wouldn't always be able to infer it and then you would have really really sad times right so you",
    "start": "331020",
    "end": "336720"
  },
  {
    "text": "just want it to be I just want it to work so that's basically what's going on yep all right the first approximation this model requires allocating all",
    "start": "336720",
    "end": "343080"
  },
  {
    "text": "values how you skip the first paragraph I did oh dang yeah uh the El camo compiler does not statically track",
    "start": "343080",
    "end": "348120"
  },
  {
    "text": "lifetimes again reading skills you know how many comments I get with hey I most of hey I missed a paragraph you missed a",
    "start": "348120",
    "end": "354240"
  },
  {
    "text": "gay paragraph and then you talked about it for five minutes [Laughter] every video instead it relies on a",
    "start": "354240",
    "end": "361440"
  },
  {
    "text": "garbage collector to figure out a suitable lifespan for each value at runtime values are collected only after",
    "start": "361440",
    "end": "367380"
  },
  {
    "text": "they become unreferenced so ocamel programs are memory safety yep yeah the first approximation this model requires",
    "start": "367380",
    "end": "373620"
  },
  {
    "text": "allocating all values on the Heap fortunately o camel's generational GC can efficiently handle short-lived values minor Heap allocations simply",
    "start": "373620",
    "end": "380100"
  },
  {
    "text": "Advance a ring buffer oh cool uh however placing everything on the Heap is still pessimistic approach where possible",
    "start": "380100",
    "end": "386520"
  },
  {
    "text": "using a Val is using a specialized allocator could improve performance for example the minor Heap is typically",
    "start": "386520",
    "end": "392460"
  },
  {
    "text": "larger than cash so future allocations are likely to evict live values stack allocation would immediately reuse free",
    "start": "392460",
    "end": "398880"
  },
  {
    "text": "space eliminating this concern okay exciting let's see providing an alternative to",
    "start": "398880",
    "end": "405900"
  },
  {
    "text": "Heap allocation would also have other benefits every minor Heap allocation brings us closer to the next minor",
    "start": "405900",
    "end": "411300"
  },
  {
    "text": "collection cycle a minor collection incurs some fixed overhead but more importantly frequent collection causes",
    "start": "411300",
    "end": "417060"
  },
  {
    "text": "more values to be moved to the major Heap yep promoted values become much costlier to collect it later on so this",
    "start": "417060",
    "end": "422639"
  },
  {
    "text": "is the difference between a minor GC and a major GC really in JavaScript as well very similar idea I think they have some",
    "start": "422639",
    "end": "429120"
  },
  {
    "text": "morbid term where the the the the the miner is called a nursery and to kill",
    "start": "429120",
    "end": "434400"
  },
  {
    "text": "something else called infant mortality some just real morbid term yeah I think",
    "start": "434400",
    "end": "439860"
  },
  {
    "text": "they avoid using those phrases in this article smartly yep yep just very big",
    "start": "439860",
    "end": "445560"
  },
  {
    "text": "brain o camel programmer right there oh yeah infant mortality is bad let's not use that",
    "start": "445560",
    "end": "450780"
  },
  {
    "text": "um I like",
    "start": "450780",
    "end": "456020"
  },
  {
    "text": "no we're not gonna make fun of emalek okay it's called Malik for a reason at Jane stream we often write zero",
    "start": "456300",
    "end": "462300"
  },
  {
    "text": "allocation code which much never trigger a GC cycle I love this this is actually a really fun to write zero allocation",
    "start": "462300",
    "end": "467639"
  },
  {
    "text": "code uh there's zero copy which is really really hard to do but zero allocation is pretty interesting because",
    "start": "467639",
    "end": "473699"
  },
  {
    "text": "you can just for you just effectively create a bunch of stuff that you'll need and just continuously reuse what you",
    "start": "473699",
    "end": "479280"
  },
  {
    "text": "have so unlike your compiler TJ which you wrote to purely copy everything this would be the inverse of it all all right",
    "start": "479280",
    "end": "484979"
  },
  {
    "text": "yes but Micah Tyler mostly just lives in the minor GC right so it still gets it's",
    "start": "484979",
    "end": "490680"
  },
  {
    "text": "still very fast because it's just like allocator unless if we do too much applications then you bump all these little minor allocations to Major",
    "start": "490680",
    "end": "496139"
  },
  {
    "text": "allocations baby okay that ring buffers of limited size is the tear back the",
    "start": "496139",
    "end": "501539"
  },
  {
    "text": "chair is back oh whoops I I only have so far I can I can push it there we go that",
    "start": "501539",
    "end": "507060"
  },
  {
    "text": "sucks but it's fine it's close enough uh when such let's say hold on a stack allocator",
    "start": "507060",
    "end": "512339"
  },
  {
    "text": "would make it easier to write programs that do not touch the Heap when such performance concerns are relevant one should arguably be using a language",
    "start": "512339",
    "end": "518700"
  },
  {
    "text": "based on explicit memory management like rust however garbage collection is genuinely useful explicit management is a burden on users ideally a language",
    "start": "518700",
    "end": "525480"
  },
  {
    "text": "could improve a spectrum of allocation strategies freely interoperable with a single application with modes a user can",
    "start": "525480",
    "end": "531420"
  },
  {
    "text": "write o camel with all the usual GC guarantees but when performance is Paramount opt into the consideration of",
    "start": "531420",
    "end": "537600"
  },
  {
    "text": "lifetimes ownership and concurrency okay I really like I really like where this is going so I hope that W I hope",
    "start": "537600",
    "end": "544560"
  },
  {
    "text": "that for me we're going to get to the point of actually seeing what it does now okay local variables okay let's see",
    "start": "544560",
    "end": "550620"
  },
  {
    "text": "in O camel turns out that many short-lived values can be stack allocated to safely referred uh to such",
    "start": "550620",
    "end": "556080"
  },
  {
    "text": "values we introduce local variables okay determine whether a variable is local involves checking a certain condition on",
    "start": "556080",
    "end": "562200"
  },
  {
    "text": "its lifetime considering the following function okay so we have a function is int which takes in a single Str string",
    "start": "562200",
    "end": "567779"
  },
  {
    "text": "uh opt is int of string opt in string so that opt must be a option yeah yeah",
    "start": "567779",
    "end": "574140"
  },
  {
    "text": "instead of throwing an error raise an exception yeah okay so you have this sum okay cool this seems pretty simple you",
    "start": "574140",
    "end": "580080"
  },
  {
    "text": "return true or you return false isn't okay perfect so you have kind of being able to read",
    "start": "580080",
    "end": "585720"
  },
  {
    "text": "oh camel I haven't really written anything you're already there but I'm I'm getting I can read it just not write it yet that's just a matter of practice",
    "start": "585720",
    "end": "591660"
  },
  {
    "text": "uh naively this function incurs a heap allocation the compiler does not know the lifetime of opt our function could",
    "start": "591660",
    "end": "598440"
  },
  {
    "text": "return it or even store it in a global variable because opt could escape this function the value referenced by opt may",
    "start": "598440",
    "end": "604920"
  },
  {
    "text": "need to live forever therefore it must be Heap allocated okay that makes sense blah blah as a programmer however we can",
    "start": "604920",
    "end": "610620"
  },
  {
    "text": "deduce that a shorter lifetime suffices in fact opt only needs to live until we match on it when is int returns opt is",
    "start": "610620",
    "end": "618120"
  },
  {
    "text": "no longer accessible so it could safely be been allocated in stack memory local",
    "start": "618120",
    "end": "623339"
  },
  {
    "text": "to is int okay datastack sum I what is opt again just to make sure okay opt is",
    "start": "623339",
    "end": "628980"
  },
  {
    "text": "this thing option right here it only needs to live this long so it's it's an option yeah yeah okay that makes perfect",
    "start": "628980",
    "end": "635100"
  },
  {
    "text": "sense it only really really needs to live very very short all right specifically oh hold on did I already",
    "start": "635100",
    "end": "640500"
  },
  {
    "text": "read this part oh no we haven't did that part specifically how to say local because its lifetime does not exceed the",
    "start": "640500",
    "end": "646140"
  },
  {
    "text": "enclosing stack frame which we will call its region at runtime entering is int begins a region by saving the current",
    "start": "646140",
    "end": "652500"
  },
  {
    "text": "stack pointer exiting ends the region by reclaiming stack allocated memory uh reclaiming usually just means you move",
    "start": "652500",
    "end": "658440"
  },
  {
    "text": "the stack pointer less High On The Stack uh since opt is only accessible within",
    "start": "658440",
    "end": "663600"
  },
  {
    "text": "this region it may safely be allocated in the corresponding stack frame beautiful uh note stack allocated values",
    "start": "663600",
    "end": "669600"
  },
  {
    "text": "is not necessarily stored in the control flow stack as seen in languages supported by alaka alaka",
    "start": "669600",
    "end": "676640"
  },
  {
    "text": "in this example we request space from stack based allocator backed entirely uh by entirely unrelated memory okay the",
    "start": "676640",
    "end": "683459"
  },
  {
    "text": "locality mode so local variables are those that do not Escape their region to formalize this constraint in a manner",
    "start": "683459",
    "end": "688860"
  },
  {
    "text": "the compiler can check we introduce modes okay so I love this idea this is where we separate out",
    "start": "688860",
    "end": "694019"
  },
  {
    "text": "the type of a lifetime like rust versus an operational Paradigm of the like you're really just",
    "start": "694019",
    "end": "700980"
  },
  {
    "text": "changing allocators in zig is that fair to say yeah although they're going to introduce some sort of",
    "start": "700980",
    "end": "706320"
  },
  {
    "text": "like because this mode is more than just a hint to the compiler like you're able",
    "start": "706320",
    "end": "713279"
  },
  {
    "text": "to do some stuff later but that's like the first pass of what to understand is definitely that yep okay by default",
    "start": "713279",
    "end": "719220"
  },
  {
    "text": "variables have a global mode the global variable has the capability to escape any region so always reference the perfect sense variables with new local",
    "start": "719220",
    "end": "726000"
  },
  {
    "text": "mode cannot Escape their enclosing regions so may refer to the stack okay uh a mode is attached to a variable upon",
    "start": "726000",
    "end": "731640"
  },
  {
    "text": "declaration either the left binding or a function parameter in both cases the compiler will check that value does not escape the region okay oh so let local",
    "start": "731640",
    "end": "740160"
  },
  {
    "text": "why how does that let's see oh so how does it know not to make this a function that returns zero",
    "start": "740160",
    "end": "745620"
  },
  {
    "text": "uh it like it will literally be a change in the compiler so right now they have a fork that you can like test out and you",
    "start": "745620",
    "end": "752519"
  },
  {
    "text": "can do this um but like it will literally be a change in the compiler and local will",
    "start": "752519",
    "end": "757800"
  },
  {
    "text": "become a keyword okay okay this makes sense because right now you could imagine that that is just a function",
    "start": "757800",
    "end": "763560"
  },
  {
    "text": "called local yes okay okay uh this variable escapes its region",
    "start": "763560",
    "end": "771000"
  },
  {
    "text": "so that's the error I don't really understand why is it escaping its region and not why it's uh well why would also it's saying",
    "start": "771000",
    "end": "778380"
  },
  {
    "text": "both of them do but like the first error prevents the rest of the compilation okay a local parameter uh represents a",
    "start": "778380",
    "end": "784620"
  },
  {
    "text": "problem or oh my goodness a local parameter represents a promise by the Kali the function will not story",
    "start": "784620",
    "end": "790320"
  },
  {
    "text": "reference to the value anywhere that could be accessed after the function returns intuitively it's safe to pass",
    "start": "790320",
    "end": "795720"
  },
  {
    "text": "stack allocated value to a function we know the values lifetime will not extend okay is empty local string string length",
    "start": "795720",
    "end": "802440"
  },
  {
    "text": "equals zero perfect um is it really just is it really just one",
    "start": "802440",
    "end": "807959"
  },
  {
    "text": "equal sign it's not two yeah well you can they do different things the one is what you'd usually use",
    "start": "807959",
    "end": "813660"
  },
  {
    "text": "oh isn't that for assignment not a quality check uh it's it's a different like operation",
    "start": "813660",
    "end": "820980"
  },
  {
    "text": "based on where it is yeah sorry sometimes I don't know things sometimes I'm a little dumb uh that's okay let's",
    "start": "820980",
    "end": "827760"
  },
  {
    "text": "see here uh the syntax uh string at local denotes uh is empty takes a parameter at the local mode",
    "start": "827760",
    "end": "834600"
  },
  {
    "text": "okay so that second the one in green is like the type of it right that's that's what you get when you're running you top",
    "start": "834600",
    "end": "841019"
  },
  {
    "text": "and you execute it and tells you what the type is it says hey look your first parameter is in the local mode",
    "start": "841019",
    "end": "846839"
  },
  {
    "text": "and it's and then this thing returns a bull okay okay here the syntax string at local denotes the uh is empty okay that",
    "start": "846839",
    "end": "853260"
  },
  {
    "text": "makes more sense I get this now even without explicit mode annotations the compiler can statically determine which variables May Escape their enclosing",
    "start": "853260",
    "end": "859620"
  },
  {
    "text": "regions such variables are assigned to global mode all others are automatically inferred to be local at this point the",
    "start": "859620",
    "end": "864660"
  },
  {
    "text": "compiler May construct values bound to local variable using stack allocations interesting okay so it's up to the",
    "start": "864660",
    "end": "870779"
  },
  {
    "text": "compiler you're not really actually telling it to use the stack you are just simply",
    "start": "870779",
    "end": "876000"
  },
  {
    "text": "letting the compiler make that decision uh no well so you can tell it by using",
    "start": "876000",
    "end": "881760"
  },
  {
    "text": "the local keyword but also like someone at Aston chat a little bit ago but I knew this was coming out like if it's",
    "start": "881760",
    "end": "887160"
  },
  {
    "text": "already allocated on the heat it just works it will do its best to figure out which things are local like based on the",
    "start": "887160",
    "end": "893639"
  },
  {
    "text": "code that's written when it gets compiled and for those things it will then put it into local mode which will",
    "start": "893639",
    "end": "900060"
  },
  {
    "text": "allow it to be put onto like the data stack instead of a heap and then they won't have to get garbage collected",
    "start": "900060",
    "end": "905519"
  },
  {
    "text": "later okay that makes perfect sense so like local string you can pass in a heap allocated item it doesn't have to be a",
    "start": "905519",
    "end": "911579"
  },
  {
    "text": "local explicit item this just means if it can be Heap allocated it will be but",
    "start": "911579",
    "end": "916920"
  },
  {
    "text": "if it can be stack allocated it also can be yeah where's the other one it's only Heap only if you don't use local yeah",
    "start": "916920",
    "end": "923579"
  },
  {
    "text": "they're going to talk about the interplay between which one's considered like a sub mode of the other this idea will be expanded in like other",
    "start": "923579",
    "end": "929940"
  },
  {
    "text": "directions throughout the other ones to add the other features that are like interesting about light uh rusts like",
    "start": "929940",
    "end": "935279"
  },
  {
    "text": "Lifetime and ownership system later which is why I actually send you this one originally because I'm at the next",
    "start": "935279",
    "end": "940860"
  },
  {
    "text": "article I think was where it would be like oh that's so cool okay but anyways this one still has a lot of cool stuff I mean this is cool right because it's",
    "start": "940860",
    "end": "946920"
  },
  {
    "text": "basically like how often do you get to in a garbage collected language say I",
    "start": "946920",
    "end": "951959"
  },
  {
    "text": "want to put this thing on the stack you don't usually you usually you don't I don't know of any language I guess I I",
    "start": "951959",
    "end": "957480"
  },
  {
    "text": "don't know python well enough python seems to be able to do everything so I don't know if you would see yeah that's",
    "start": "957480",
    "end": "963420"
  },
  {
    "text": "the thing is python usually the answer is yes python can do it uh but JavaScript you certainly cannot that's",
    "start": "963420",
    "end": "968699"
  },
  {
    "text": "not an option or you don't plan on it being an option now whether or not they actually allow for it I don't know maybe",
    "start": "968699",
    "end": "974339"
  },
  {
    "text": "and maybe if you do like uh simple integers and it's jaded it might be able to do some stack allocation in for some",
    "start": "974339",
    "end": "980940"
  },
  {
    "text": "small lifetimes but you can't control it in any sense so local returns all right oh actually hold on so even without",
    "start": "980940",
    "end": "987660"
  },
  {
    "text": "explicit mode annotations the compiler can statically determine which variables May Escape their enclosing regions such",
    "start": "987660",
    "end": "993000"
  },
  {
    "text": "variables are assigned the global mode all others are automatically inferred to be local at this point the compiler May",
    "start": "993000",
    "end": "998100"
  },
  {
    "text": "construct values bound to local variables using stack allocations so this would also allow for faster compilation because it doesn't actually",
    "start": "998100",
    "end": "1004820"
  },
  {
    "text": "have to do like a full exhaustive searching it just has to be like do you escape or Escape your global",
    "start": "1004820",
    "end": "1011480"
  },
  {
    "text": "uh well right now it will be slower because right now it just always assumes",
    "start": "1011480",
    "end": "1016519"
  },
  {
    "text": "everything is global right like compilation step because like right now it doesn't do any checking like once",
    "start": "1016519",
    "end": "1022100"
  },
  {
    "text": "this is all the way done yeah when it's all the way done but rust is really slow yeah so it will be faster than rusts",
    "start": "1022100",
    "end": "1028280"
  },
  {
    "text": "because I think it already is much faster like it's it's very fast compilation right now okay yes okay so I",
    "start": "1028280",
    "end": "1034459"
  },
  {
    "text": "don't know I wouldn't want to make any promises you know but like it's it it should be simpler okay let's see",
    "start": "1034459",
    "end": "1040040"
  },
  {
    "text": "returning a local value from a function should appear contradictory since the function's result has clearly escaped its region on the other hand if a",
    "start": "1040040",
    "end": "1046220"
  },
  {
    "text": "function can only return globals constructing fully stack allocated values becomes difficult they become built up from literals the solution",
    "start": "1046220",
    "end": "1053600"
  },
  {
    "text": "Enclave I don't know if yeah apparently it's a real word oh sorry I had to Google it I",
    "start": "1053600",
    "end": "1058700"
  },
  {
    "text": "said and I didn't even see the X like the X became an N for me what's X clay uh I I don't remember exactly what the",
    "start": "1058700",
    "end": "1065120"
  },
  {
    "text": "definition I had to look it up but basically it means um well we'll just yeah uh a portion of territory of one state",
    "start": "1065120",
    "end": "1072559"
  },
  {
    "text": "completely surrounded by territory of another or others as viewed by the Home",
    "start": "1072559",
    "end": "1077780"
  },
  {
    "text": "territory so it's basically like they're they're just gonna surround that piece of memory",
    "start": "1077780",
    "end": "1083179"
  },
  {
    "text": "or something like that I don't remember exactly what the reasoning was for it but they also were trying to pick one that wouldn't be a word that was used a",
    "start": "1083179",
    "end": "1090679"
  },
  {
    "text": "lot because like if you did return or something like that right like people are already using those words so you",
    "start": "1090679",
    "end": "1097039"
  },
  {
    "text": "need to pick something that's maybe a little bit less likely to be used okay I get that it's also when functional Bros",
    "start": "1097039",
    "end": "1102740"
  },
  {
    "text": "get into it the terms get exceptionally complex it's true it's true they got a lot of words they got a lot of words a",
    "start": "1102740",
    "end": "1109039"
  },
  {
    "text": "lot of words there uh okay so yes check out the type uh right here it's an INT",
    "start": "1109039",
    "end": "1114919"
  },
  {
    "text": "list at local right so it's telling you that like this thing can't escape the",
    "start": "1114919",
    "end": "1120020"
  },
  {
    "text": "global scope okay so I wonder if you wonder if you a local allocation here and then exclave it out yeah yeah yeah",
    "start": "1120020",
    "end": "1127400"
  },
  {
    "text": "okay so that's kind of like just passing it's just yeah okay cool right so that's basically the problem they're solving with it right otherwise they're saying",
    "start": "1127400",
    "end": "1133460"
  },
  {
    "text": "you could only build it with literals as in um oh Prime Flip's telling you to check",
    "start": "1133460",
    "end": "1139940"
  },
  {
    "text": "your Discord don't docs you could lose this bop and be out of content he says oh",
    "start": "1139940",
    "end": "1145640"
  },
  {
    "text": "what's going on I don't know flip is telling you to check Discord very negative that would be he doesn't want me to leak the DMS by",
    "start": "1145640",
    "end": "1152179"
  },
  {
    "text": "the way because uh his Discord froze and I took pictures of him and he looks real real caveman-like",
    "start": "1152179",
    "end": "1158000"
  },
  {
    "text": "um anyways uh okay the exclave keyword ends the region and executes the given expression in the enclosing region the",
    "start": "1158000",
    "end": "1163400"
  },
  {
    "text": "caller receives the local variable here I'm gonna go like this he's upset about that marker uh put the",
    "start": "1163400",
    "end": "1171080"
  },
  {
    "text": "picture and flip do it yeah put the put the picture in right now all right anyway slip through it therefore it's",
    "start": "1171080",
    "end": "1178700"
  },
  {
    "text": "safe to allocate that value on the caller stack frame the difference is simply which region the value lives in okay",
    "start": "1178700",
    "end": "1184160"
  },
  {
    "text": "so let uh list equals local list in list okay list uh this value escapes its region",
    "start": "1184160",
    "end": "1190640"
  },
  {
    "text": "why porque oh because this thing returns list right which then becomes here which",
    "start": "1190640",
    "end": "1196220"
  },
  {
    "text": "it can only live within this in expression so if you did do an in and you did two semicolons then it could",
    "start": "1196220",
    "end": "1201799"
  },
  {
    "text": "live right here because it live for the expression of bar correct as long as it isn't returned basically",
    "start": "1201799",
    "end": "1207320"
  },
  {
    "text": "it's like you just can't return it okay you can't return it okay local returning functions uh are the primary method of",
    "start": "1207320",
    "end": "1212660"
  },
  {
    "text": "creating stack allocated values as they can programmatically build up local data structures this mechanism allows for",
    "start": "1212660",
    "end": "1217760"
  },
  {
    "text": "functions to return their local parameters lastly recall that local stack is distinct from the control flow",
    "start": "1217760",
    "end": "1222799"
  },
  {
    "text": "stack making this Behavior easy easy to implement so they could do exclave list which would then make it live to this",
    "start": "1222799",
    "end": "1229880"
  },
  {
    "text": "level so if they did exclave list at the end of this then Barr would return a local",
    "start": "1229880",
    "end": "1235039"
  },
  {
    "text": "list which is legal like you can return it it would be up to whatever the callers of bar are doing to make sure",
    "start": "1235039",
    "end": "1240620"
  },
  {
    "text": "that they don't violate like the promise of what it means to be a local list and by up to them I mean like the compiler",
    "start": "1240620",
    "end": "1246860"
  },
  {
    "text": "will tell them if they fail to do that okay okay that's good to know okay locality in our apis locality doesn't",
    "start": "1246860",
    "end": "1252559"
  },
  {
    "text": "only facilitate stack allocation it also lets us design safer apis the following",
    "start": "1252559",
    "end": "1257600"
  },
  {
    "text": "code exhibits a common pattern for resource management uh with file file mode read only I don't I don't know what",
    "start": "1257600",
    "end": "1264559"
  },
  {
    "text": "this is I don't know what these two so those are so that's just a named parameter so when it has like a tilde in the name so it's saying well we want to",
    "start": "1264559",
    "end": "1271280"
  },
  {
    "text": "do the mode then you have a list of modes that you can do right so this one's saying it can be read only and then here's the function that you're",
    "start": "1271280",
    "end": "1277340"
  },
  {
    "text": "going to call with this file and it passes the file descriptor okay but why oh because you can also Define a",
    "start": "1277340",
    "end": "1284240"
  },
  {
    "text": "function with fun right yeah yep okay so and then this is",
    "start": "1284240",
    "end": "1289700"
  },
  {
    "text": "basically saying like open this file and close this file for me and like manage the files like in a",
    "start": "1289700",
    "end": "1295760"
  },
  {
    "text": "sense right this this function exists already and then do these things with the file in the meantime right that's what the the Callback does okay so this",
    "start": "1295760",
    "end": "1302600"
  },
  {
    "text": "callback allows you to have effectively the lifetime for this when it however long this function lives is how long",
    "start": "1302600",
    "end": "1308000"
  },
  {
    "text": "this file is open for yes but they're going to show how you can like break that without the locality",
    "start": "1308000",
    "end": "1314179"
  },
  {
    "text": "okay here a file descriptor is open pass to the Lambda function and close after the function returns this API allows",
    "start": "1314179",
    "end": "1320059"
  },
  {
    "text": "lets users issue manually closing the phone I really like that word they did twice and twice in one article nice it's",
    "start": "1320059",
    "end": "1325880"
  },
  {
    "text": "a lot of issuing however there's no guarantee that descriptor is not used after it's closed okay there you go so you can do this and then all of a sudden",
    "start": "1325880",
    "end": "1333080"
  },
  {
    "text": "boom you now have stash right here and then later on you can close stash I don't know what bang does I don't some",
    "start": "1333080",
    "end": "1339500"
  },
  {
    "text": "of these this is where I get into the more advanced okay that's just basically how you access a mutable value so like",
    "start": "1339500",
    "end": "1346100"
  },
  {
    "text": "you can't just pass around mutable values like regular values to access the like inner value you do bang oh okay",
    "start": "1346100",
    "end": "1351980"
  },
  {
    "text": "weird yep okay I'll have to we'll have to get there of course this design can be improved by making FDA local",
    "start": "1351980",
    "end": "1358100"
  },
  {
    "text": "parameter after changing the signature with uh with file the following way file string open list",
    "start": "1358100",
    "end": "1363919"
  },
  {
    "text": "file descriptor okay so the big important part is inside of there where it says file descriptor.t at local so",
    "start": "1363919",
    "end": "1370460"
  },
  {
    "text": "now it's saying hey we have a file descriptor and it can only live a local yeah it can only live within this",
    "start": "1370460",
    "end": "1376460"
  },
  {
    "text": "function and whatever you return is also returned on the outside yeah right",
    "start": "1376460",
    "end": "1382100"
  },
  {
    "text": "okay that's type polymorphism is that the term uh the parametric polymorphism yeah",
    "start": "1382100",
    "end": "1391240"
  },
  {
    "text": "parametric polymorphism it's a parameter it's just like classic generics that",
    "start": "1391240",
    "end": "1396799"
  },
  {
    "text": "you'd think of in like typescript or go basically right where you would like say that this is a t and it returns a t okay",
    "start": "1396799",
    "end": "1402320"
  },
  {
    "text": "yes yes okay uh let's see let's see the Callback must promise not to stash away the file descriptor therefore we uh know",
    "start": "1402320",
    "end": "1409520"
  },
  {
    "text": "the file won't be used after the Callback okay perfect in this example we're using modes to require a promise",
    "start": "1409520",
    "end": "1414679"
  },
  {
    "text": "from the caller this usage might feel similar to local returns and for good reason formally when a parameter is used",
    "start": "1414679",
    "end": "1420620"
  },
  {
    "text": "uh contravariantly there's one of those words again uh yep what does contravariantly mean",
    "start": "1420620",
    "end": "1427940"
  },
  {
    "text": "so well they'll explain a little bit but it'll it's basically saying which one can be a broader or a tighter uh like",
    "start": "1427940",
    "end": "1437539"
  },
  {
    "text": "I don't know what to say genericism I'm not sure exactly how to how to say it but like so contravariant I think is the",
    "start": "1437539",
    "end": "1445039"
  },
  {
    "text": "way when it's saying like you can't pass in something that's bigger than this so like if you think about",
    "start": "1445039",
    "end": "1451640"
  },
  {
    "text": "um four types of something right if you had like inheritance this would be saying like oh if I'm an animal and a",
    "start": "1451640",
    "end": "1457520"
  },
  {
    "text": "dog well I can't pass in an animal I'm expecting a dog okay right but if it was covering then it would say oh well since",
    "start": "1457520",
    "end": "1463940"
  },
  {
    "text": "dog is an animal then you can do it I think I did it right but I keep on forgetting which way it is for which",
    "start": "1463940",
    "end": "1470299"
  },
  {
    "text": "words but that's at least that's the goal of how to think about it and I never remember which word goes to which",
    "start": "1470299",
    "end": "1475640"
  },
  {
    "text": "so it doesn't that part doesn't really matter but the idea is whether it allows you to go broader or um tighter of like",
    "start": "1475640",
    "end": "1481520"
  },
  {
    "text": "a type okay okay so narrowing versus broadening so one of these two mean that you can",
    "start": "1481520",
    "end": "1488600"
  },
  {
    "text": "pass in a dog to a interface that takes animal the other one is you cannot pass an animal into an interface that takes",
    "start": "1488600",
    "end": "1494360"
  },
  {
    "text": "dog yes okay yeah I don't know I I've heard these terms but I always forget what they mean and then I get into this",
    "start": "1494360",
    "end": "1500720"
  },
  {
    "text": "situation every single time where I go I don't even remember which one it is your intuition though is like correct about",
    "start": "1500720",
    "end": "1506780"
  },
  {
    "text": "it and that like it would make sense to you if you saw something was a function took in a dog you were like well I can't",
    "start": "1506780",
    "end": "1512840"
  },
  {
    "text": "just pass in any animal yeah like it's specifically saying dog right that's exactly what they're saying here this one says it's taking in a local so it",
    "start": "1512840",
    "end": "1519919"
  },
  {
    "text": "has to be a local it can't be a global that makes sense okay that makes sense uh so then just to",
    "start": "1519919",
    "end": "1526159"
  },
  {
    "text": "be clear if we like scroll back up to the code example yeah I remember that one because that that's the one down a",
    "start": "1526159",
    "end": "1531320"
  },
  {
    "text": "little bit I was also thinking about this one this one allows you to take in a local string but it doesn't necessarily require it to be local right",
    "start": "1531320",
    "end": "1537860"
  },
  {
    "text": "it could be a global so how does this one denote that this one can't be anything but a local",
    "start": "1537860",
    "end": "1545140"
  },
  {
    "text": "because since um or wait maybe you're right maybe I am thinking of that backwards I have to",
    "start": "1545179",
    "end": "1550400"
  },
  {
    "text": "think about it a little bit for the string one um",
    "start": "1550400",
    "end": "1555820"
  },
  {
    "text": "yeah I don't know I have to think about that one a little bit more actually I'm not sure maybe you can't pass a global",
    "start": "1555820",
    "end": "1560900"
  },
  {
    "text": "to that one okay well I'm curious yeah that's why I want to play with this okay mode first time above we declare a local",
    "start": "1560900",
    "end": "1567020"
  },
  {
    "text": "integer X using the syntax let local notably we didn't simply add a type annotation the local mode does not",
    "start": "1567020",
    "end": "1573320"
  },
  {
    "text": "operate on types in fact the mode of X is entirely separate from the type of X beautiful that way we don't have all the",
    "start": "1573320",
    "end": "1579020"
  },
  {
    "text": "rust stuff uh types describe data structures that is how to build up and take apart values on the other hand a",
    "start": "1579020",
    "end": "1585140"
  },
  {
    "text": "mode encodes a proper property independent of data layout so maybe",
    "start": "1585140",
    "end": "1590179"
  },
  {
    "text": "let's see so maybe attached to a variable of any type to illustrate this Behavior type annotation specify a",
    "start": "1590179",
    "end": "1595340"
  },
  {
    "text": "variable at a mode using syntax type at mode okay local local local local local",
    "start": "1595340",
    "end": "1601779"
  },
  {
    "text": "right in this case of locality the Salient property is whether a value May Escape its region variables with the",
    "start": "1601779",
    "end": "1608720"
  },
  {
    "text": "global mode can escape any region so Global variables or global global values are correspondingly keep allocated",
    "start": "1608720",
    "end": "1614360"
  },
  {
    "text": "conversely the local mode restricts a variable to its region a local value may be stack allocated maybe is that the key",
    "start": "1614360",
    "end": "1620840"
  },
  {
    "text": "word that they may not always choose yeah that it's up to the compiler like you you can't necessarily like guarantee",
    "start": "1620840",
    "end": "1627380"
  },
  {
    "text": "it I think or maybe like later they will right like uh but because this is still Justin like Jane Street's Fork right",
    "start": "1627380",
    "end": "1633620"
  },
  {
    "text": "they're like working to get this upstreamed at some point and get in community feedback and all these other",
    "start": "1633620",
    "end": "1638840"
  },
  {
    "text": "things Etc right okay Etc okay encoding locality is this me Gathering Community",
    "start": "1638840",
    "end": "1644299"
  },
  {
    "text": "feedback I'd love to take a sponsorship okay",
    "start": "1644299",
    "end": "1650620"
  },
  {
    "text": "we got two of us right here two right here influencers tech influencers tech",
    "start": "1650620",
    "end": "1655940"
  },
  {
    "text": "influencers but we just told people not to listen to Tech influencers so now what",
    "start": "1655940",
    "end": "1661520"
  },
  {
    "text": "you should listen to Tech influencers you know what I mean when it comes to me making hundreds",
    "start": "1661520",
    "end": "1667940"
  },
  {
    "text": "if not thousands of pesos you need to listen to me okay I've played myself",
    "start": "1667940",
    "end": "1673640"
  },
  {
    "text": "damn it I've played myself we just Uno reversed ourselves I know terrible okay encoding locality with the",
    "start": "1673640",
    "end": "1681020"
  },
  {
    "text": "mode has some advantages compared to rust type-centric approach in Rust reference types are parameterized over specific regions represented by LifeTime",
    "start": "1681020",
    "end": "1688220"
  },
  {
    "text": "variables this design is more expressive than locality which only distinguishes values that may Escape all regions from",
    "start": "1688220",
    "end": "1693799"
  },
  {
    "text": "those that cannot Escape any it's simpler and I think I like it more it makes your brain it's just like a super",
    "start": "1693799",
    "end": "1698840"
  },
  {
    "text": "simple and like they're going to talk a little bit about it but the thing that I like is like most of the time that",
    "start": "1698840",
    "end": "1704360"
  },
  {
    "text": "distinction is basically all you need right which is like can this go anywhere",
    "start": "1704360",
    "end": "1709880"
  },
  {
    "text": "or is it going to stay here right which is like most of the time what you have with Russ is like well I just want to",
    "start": "1709880",
    "end": "1715039"
  },
  {
    "text": "say that this thing basically lives forever yeah or it can't live any longer than than this like function",
    "start": "1715039",
    "end": "1721720"
  },
  {
    "text": "approximately you know so like it's I I like I like where this sort of idea is",
    "start": "1721720",
    "end": "1728659"
  },
  {
    "text": "for a language with garbage collection right which like the in between times you just let the garbage collector handle it you let the garbage collection",
    "start": "1728659",
    "end": "1735440"
  },
  {
    "text": "handle it but I mean there's plenty of Stack stuff there you're just like I wish I could put on a stack all right on the other hand lifetime variables uh are",
    "start": "1735440",
    "end": "1741799"
  },
  {
    "text": "a source of pervasive complexity when references are inherently polymorphic essentially all functions become",
    "start": "1741799",
    "end": "1747260"
  },
  {
    "text": "lifetime polymorphic as well for example whenever a reference lacks a lifetime annotation an implicit lifetime variable",
    "start": "1747260",
    "end": "1753200"
  },
  {
    "text": "appears yes yes exactly yes it's kind of like it's just kind of was that it's like",
    "start": "1753200",
    "end": "1759799"
  },
  {
    "text": "nice except that it's annoying because then as soon as you need to start adding lifetime annotations it's like every",
    "start": "1759799",
    "end": "1766820"
  },
  {
    "text": "single function I have I have to add this random Syntax for it and then I have to like Mark the ones and then oh my goodness well this one actually isn't exactly the same can be shorter and then",
    "start": "1766820",
    "end": "1772820"
  },
  {
    "text": "ah yep and then you get into this whole a b problem which is like now you have two references in here you have two two",
    "start": "1772820",
    "end": "1778700"
  },
  {
    "text": "different arguments that both need a Lifetime on them do you make them separate lifetimes do you constrain them both the same lifetime then you have",
    "start": "1778700",
    "end": "1785480"
  },
  {
    "text": "this whole like leaking of problem and then it just it just goes on and on and on and on and on since Russ supports first class functions the result is that",
    "start": "1785480",
    "end": "1791840"
  },
  {
    "text": "higher order functions require higher order polymorphism which the type inference is undecidable undecidable in",
    "start": "1791840",
    "end": "1797179"
  },
  {
    "text": "general okay oh camel's modes do not affect type inference they preserve the types of existing code so users truly",
    "start": "1797179",
    "end": "1803899"
  },
  {
    "text": "don't need to consider modes they aren't actively using beautiful in ocam we'll type inference higher order functions and garbage",
    "start": "1803899",
    "end": "1810200"
  },
  {
    "text": "collection are all important parts of the development workflow so we consider the local mode to be a good fit I'm liking this this seems yeah really nice",
    "start": "1810200",
    "end": "1818539"
  },
  {
    "text": "so the the one where you run into it a lot the example that they gave for us is like but if you try and write like a closure",
    "start": "1818539",
    "end": "1824480"
  },
  {
    "text": "and you like capture anything it's just it's just done for right you know what I",
    "start": "1824480",
    "end": "1830600"
  },
  {
    "text": "mean you end up always having to have to like parameterize the entire closure over all the values that you want to do",
    "start": "1830600",
    "end": "1836480"
  },
  {
    "text": "otherwise you have to annotate all the annotations of those and make sure the closure can't escape anywhere and you can't reference those things longer than",
    "start": "1836480",
    "end": "1842539"
  },
  {
    "text": "this or you have to say that and then you're like holy cow like I can't I just can't use closures that way which is",
    "start": "1842539",
    "end": "1848179"
  },
  {
    "text": "they're not just like they're straight-offs right yeah this is trade-off and then you just call string.clone that's like that's really",
    "start": "1848179",
    "end": "1855140"
  },
  {
    "text": "what you end up doing is that you make your own garbage collection you you pre you type move in front of your closure",
    "start": "1855140",
    "end": "1861320"
  },
  {
    "text": "yeah and then you clone a bunch of things into it that's pretty much what I've done every single time all right",
    "start": "1861320",
    "end": "1866539"
  },
  {
    "text": "yes above we noted that the mode describes properly a property independent of data layout such properties are deep as opposed to",
    "start": "1866539",
    "end": "1873140"
  },
  {
    "text": "shallow layout encoded by a type to understand this distinction considering the following type okay so this is a",
    "start": "1873140",
    "end": "1879020"
  },
  {
    "text": "list I don't I don't quite know what this is this is a it looks like uh whatever the the type yeah so you just",
    "start": "1879020",
    "end": "1886279"
  },
  {
    "text": "think of it as a generic TI yeah generic it's either empty or more of a or a",
    "start": "1886279",
    "end": "1891799"
  },
  {
    "text": "tuple is that a tuple of a a yeah so there's it's like the head and then the rest of the list which could be empty or",
    "start": "1891799",
    "end": "1897559"
  },
  {
    "text": "it could be more list okay right head and rest of the list so you're creating like a tuple that gets deeper deeper",
    "start": "1897559",
    "end": "1903020"
  },
  {
    "text": "deeper yeah it's just a linked list basically right okay destructuring a value of uh take a list produces two",
    "start": "1903020",
    "end": "1909559"
  },
  {
    "text": "possible outcomes either the empty list or a pair of values see a pair of a value and another list of arbitrary",
    "start": "1909559",
    "end": "1915919"
  },
  {
    "text": "shape hence the type only describes the values top level structure all right process",
    "start": "1915919",
    "end": "1921140"
  },
  {
    "text": "list head remaining okay conversely there's that word again they're getting all close to those words",
    "start": "1921140",
    "end": "1927440"
  },
  {
    "text": "destructuring issuing the structuring man I'm just too stupid for this uh the",
    "start": "1927440",
    "end": "1933740"
  },
  {
    "text": "structuring and Global variable of type tick a list produces either a empty list or a pair of global value and another",
    "start": "1933740",
    "end": "1940039"
  },
  {
    "text": "Global list that is the root node of the list May Escape its region the subsequent nodes clearly can too so the",
    "start": "1940039",
    "end": "1946760"
  },
  {
    "text": "entire list must be Heap allocated okay more and more and more perfect the same logic applies to local case to",
    "start": "1946760",
    "end": "1951860"
  },
  {
    "text": "structuring a local list produces a local value and another local list it is possible to create a local list",
    "start": "1951860",
    "end": "1957320"
  },
  {
    "text": "consisting entirely of Stack allocations so we must ensure the contents of the local list also do not Escape okay",
    "start": "1957320",
    "end": "1964640"
  },
  {
    "text": "exciting deepness enables the compiler to validate usage of local data structures",
    "start": "1964640",
    "end": "1969740"
  },
  {
    "text": "okay so local list do this and this returns right don't we",
    "start": "1969740",
    "end": "1974779"
  },
  {
    "text": "need the Yep exclave this where's the exclaving well so that's what it's going to say oh it's value oh this value okay",
    "start": "1974779",
    "end": "1981200"
  },
  {
    "text": "so I I I am getting it you're on it yeah you're right on track I'm right I'm following perfectly okay if locality",
    "start": "1981200",
    "end": "1987620"
  },
  {
    "text": "didn't exhibit deepness it wouldn't be very useful if we could stack allocate the root note of the list but we'd have",
    "start": "1987620",
    "end": "1993019"
  },
  {
    "text": "no way to express that further nodes it may uh also be stack allocated okay cool sub modes given deepness locality might",
    "start": "1993019",
    "end": "1998840"
  },
  {
    "text": "appear to be an all or nothing choice so far we allocated our data structure entirely on the stack or entirely on the",
    "start": "1998840",
    "end": "2004539"
  },
  {
    "text": "Heap yep that's kind of how I've envisioned it to break this dichotomy we will explore another important property of modes each mode access emits a",
    "start": "2004539",
    "end": "2011140"
  },
  {
    "text": "natural subtype relation subtyping relation okay this might be the part where I get too dumb in case of locality",
    "start": "2011140",
    "end": "2016720"
  },
  {
    "text": "it's intuitively safe to use Global variable as as if it were local absolutely for example a function",
    "start": "2016720",
    "end": "2022539"
  },
  {
    "text": "expecting a local parameter promises equivalent Behavior whether or not the parameter actually lives on the stack perfect therefore we say Global is a sub",
    "start": "2022539",
    "end": "2029740"
  },
  {
    "text": "mode of local interesting which makes perfect sense but still",
    "start": "2029740",
    "end": "2034960"
  },
  {
    "text": "interesting it's weird because like generally you think of like which is when you're thinking of globals and locals you're like locals are kind of",
    "start": "2034960",
    "end": "2041200"
  },
  {
    "text": "like a subset of globals right but like they're talking about it in a different relationship yes because there are always more globals than locals they're",
    "start": "2041200",
    "end": "2048099"
  },
  {
    "text": "minimally has to be some level of globals that cannot exist locally so therefore something sometimes this isn't",
    "start": "2048099",
    "end": "2054460"
  },
  {
    "text": "Haskell this isn't Hazard we're doing things so sub mode really isn't about the number of things",
    "start": "2054460",
    "end": "2060760"
  },
  {
    "text": "right it's not a subset it's right the places in which it can operate",
    "start": "2060760",
    "end": "2066700"
  },
  {
    "text": "yeah and like it's about um well not even that which it's it's actually about like which direction just",
    "start": "2066700",
    "end": "2073118"
  },
  {
    "text": "think about it as like local kind of like animal and Global is like dog right yeah like that's how you should just",
    "start": "2073119",
    "end": "2078820"
  },
  {
    "text": "think about it other way around Global like Global is a sub mode of local so like",
    "start": "2078820",
    "end": "2086399"
  },
  {
    "text": "anywhere that you could use a local variable you can use a global okay anywhere you could use a global is not",
    "start": "2087540",
    "end": "2094780"
  },
  {
    "text": "somewhere you can necessarily use a local okay okay okay okay I think okay yes yes",
    "start": "2094780",
    "end": "2100119"
  },
  {
    "text": "correct and allow Global values to be used at the local mode okay let localize X and cl uh exclavex",
    "start": "2100119",
    "end": "2107200"
  },
  {
    "text": "does this mean you take Global ones do what it does yeah it just takes this is a function that takes in something",
    "start": "2107200",
    "end": "2112839"
  },
  {
    "text": "that's uh Global and must make it into something that's local yeah okay and so",
    "start": "2112839",
    "end": "2119859"
  },
  {
    "text": "that's why they said before locals may be on the stack I'm pretty",
    "start": "2119859",
    "end": "2124900"
  },
  {
    "text": "sure I don't actually know because I have I like I haven't read this I don't know the implementation like actually I you know what I mean but like they're",
    "start": "2124900",
    "end": "2131140"
  },
  {
    "text": "that's why it's May because like you could you could basically move a global into like a local with this kind of idea",
    "start": "2131140",
    "end": "2137380"
  },
  {
    "text": "and restrict what you were gonna do with it right I think that's kind of okay kind of what's going on okay so you could potentially have two different uses so even though this will always",
    "start": "2137380",
    "end": "2143800"
  },
  {
    "text": "still live on the Heap it's now restricting its usage of it in some sense okay as far as I can tell yep okay",
    "start": "2143800",
    "end": "2150820"
  },
  {
    "text": "it is safe for a local value to reference a global but not vice versa let's say at runtime this means we can",
    "start": "2150820",
    "end": "2155980"
  },
  {
    "text": "create pointers from the stack to the Heap but not from the Heap to the stack for example we can create a local fully",
    "start": "2155980",
    "end": "2162400"
  },
  {
    "text": "stack allocated list whose nodes refer to Heap allocated values let's see all right let's see recursive",
    "start": "2162400",
    "end": "2169599"
  },
  {
    "text": "globalized list exclave uh this list with either empty or the",
    "start": "2169599",
    "end": "2174940"
  },
  {
    "text": "head remaining we're going to recall I don't know what more does what is more it's like making",
    "start": "2174940",
    "end": "2180579"
  },
  {
    "text": "an enum so that's like the that's like the you know how in Rust if you had like a list you'd have like list colon colon",
    "start": "2180579",
    "end": "2186280"
  },
  {
    "text": "empty list colon colon more they they don't have the cold and cold in here like uh because they're contained inside",
    "start": "2186280",
    "end": "2193119"
  },
  {
    "text": "of one type right so we made this like list type and it has empty or more so when you call more it's not really",
    "start": "2193119",
    "end": "2198460"
  },
  {
    "text": "calling it it's saying um this is more with this data that's the data that's inside of there okay so",
    "start": "2198460",
    "end": "2204280"
  },
  {
    "text": "this localize a list so it creates a list of references yeah so this effectively creates a list of references",
    "start": "2204280",
    "end": "2210520"
  },
  {
    "text": "to something on the Heap but this list is allocated on the stack right wild I'd have to think about that for a",
    "start": "2210520",
    "end": "2217119"
  },
  {
    "text": "little I mean I get I get conceptually what they're doing I'm just trying to think of why would I use this and when would I want to use this it's hard for",
    "start": "2217119",
    "end": "2223060"
  },
  {
    "text": "me to Envision what to do here so the the way that I was thinking of like why you would want to do this is if you have",
    "start": "2223060",
    "end": "2228820"
  },
  {
    "text": "to do lots of iterations over this you're going to do a lot less pointer chasing right like because something",
    "start": "2228820",
    "end": "2234040"
  },
  {
    "text": "like your whole all of your like pointers are actually on the stack right so you can just like oh locality zoom in",
    "start": "2234040",
    "end": "2240760"
  },
  {
    "text": "like CPU locality right like Zoom through the memory and then you're only referencing those out to the when you",
    "start": "2240760",
    "end": "2248140"
  },
  {
    "text": "need to go check the value right because the value may be too big anyways for your stack and stuff or whatever right okay so this effectively takes indirect",
    "start": "2248140",
    "end": "2253780"
  },
  {
    "text": "pointers and turn them into direct pointers yes I think so or single player that's what the picture makes me think",
    "start": "2253780",
    "end": "2259359"
  },
  {
    "text": "of as well so I think we're matching up with the picture yeah because now you're just okay this makes I think this makes more sense okay we could create local",
    "start": "2259359",
    "end": "2264820"
  },
  {
    "text": "list where the only first node is stack allocated say if we locally append to the global list we could create a local",
    "start": "2264820",
    "end": "2271900"
  },
  {
    "text": "list where only the first node is stack allocated say if we locally append to the global List local cons wow uh local",
    "start": "2271900",
    "end": "2279760"
  },
  {
    "text": "head remaining uh and let's see exclave Morehead remaining okay so I don't know",
    "start": "2279760",
    "end": "2286119"
  },
  {
    "text": "why you would do this one yeah I don't quite get this one because okay so the head is local that must mean the list is",
    "start": "2286119",
    "end": "2291460"
  },
  {
    "text": "local as well but the remaining is global yeah so I think I think they're not",
    "start": "2291460",
    "end": "2298839"
  },
  {
    "text": "saying that each of these is useful they're showing the deepness of the types yeah I think is like so that's they're just trying to show the",
    "start": "2298839",
    "end": "2305020"
  },
  {
    "text": "different ways and like lists are pretty easy to picture yeah I guess so yeah yeah the problem is sometimes these type",
    "start": "2305020",
    "end": "2311260"
  },
  {
    "text": "of operations make me more confused than anything else I totally I think I see what's happening they should have just",
    "start": "2311260",
    "end": "2316660"
  },
  {
    "text": "stopped with the first two examples and then uh maybe I don't know but I think they're just trying to show how you can",
    "start": "2316660",
    "end": "2321700"
  },
  {
    "text": "do like more things if it made sense but I'm not really sure okay let's see what we cannot create is a global list",
    "start": "2321700",
    "end": "2327940"
  },
  {
    "text": "containing stack allocated nodes okay that makes sense again modes are deep so any Global list must have only uh",
    "start": "2327940",
    "end": "2334359"
  },
  {
    "text": "captured globals Yep this preserves the invariant that whenever a node is Heap allocated all nodes reachable from it",
    "start": "2334359",
    "end": "2340180"
  },
  {
    "text": "are also Heap allocated more rigorously we could say that as we Traverse a value the current mode monotonically increases",
    "start": "2340180",
    "end": "2347260"
  },
  {
    "text": "with depth this restriction should also make intuitive sense this sounds like my",
    "start": "2347260",
    "end": "2352720"
  },
  {
    "text": "teacher teaching me uh computational Theory it's intuitive and I'm like I don't think you know",
    "start": "2352720",
    "end": "2357880"
  },
  {
    "text": "what means you should have gotten this already from the first sentence but if you're an idiot I'll give you a",
    "start": "2357880",
    "end": "2363940"
  },
  {
    "text": "paragraph shoot uh sends any list without a proper",
    "start": "2363940",
    "end": "2369760"
  },
  {
    "text": "let's see property contains a pointer from the Heap to the stack let's say hold on this restriction should make it intuitive sense since any list without",
    "start": "2369760",
    "end": "2376420"
  },
  {
    "text": "this property contains a pointer from the Heap to the stack what Judo said in chat he's not wrong",
    "start": "2376420",
    "end": "2382180"
  },
  {
    "text": "let's see uh monotonically this gets nerds erect this does that's why we",
    "start": "2382180",
    "end": "2387520"
  },
  {
    "text": "there's even an entire clock called the monatomic clock people love it uh all",
    "start": "2387520",
    "end": "2394060"
  },
  {
    "text": "right such a pointer is potentially used after freebug the Heap node may still be",
    "start": "2394060",
    "end": "2399220"
  },
  {
    "text": "reachable after the stack has been freedomed okay so this is effectively what they're saying is that you start with a a depth of zero if you will and",
    "start": "2399220",
    "end": "2406599"
  },
  {
    "text": "then once you move to the Heap it's a depth of one therefore you cannot go back to a depth of zero right exactly",
    "start": "2406599",
    "end": "2412420"
  },
  {
    "text": "right if I go then that's going to be real bad when that stack gets cleaned up and it no longer points to the thing you",
    "start": "2412420",
    "end": "2418000"
  },
  {
    "text": "thought it did anymore I think you could resay all of these words which are all very fancy and beautiful sounding and",
    "start": "2418000",
    "end": "2423220"
  },
  {
    "text": "have the word globalist in here I think it'd be a little bit easier to say that Stacks stack memory can refer to Heap",
    "start": "2423220",
    "end": "2429520"
  },
  {
    "text": "but Heap cannot refer to stack yeah",
    "start": "2429520",
    "end": "2434280"
  },
  {
    "text": "agreed hey maybe I could be a writer one day me and chat Tiffany were getting after it the in a sense you kind of are",
    "start": "2434820",
    "end": "2441339"
  },
  {
    "text": "like if you think about the YouTube videos that you make as the sum total of your writing prowess that then that is",
    "start": "2441339",
    "end": "2449140"
  },
  {
    "text": "not a good prowess to brag about the above layout can represent uh let's see can be represented using rust lifetimes",
    "start": "2449140",
    "end": "2455859"
  },
  {
    "text": "which supports subtyping however safely manipulating such data structures requires significantly more reasoning on",
    "start": "2455859",
    "end": "2460900"
  },
  {
    "text": "the programmer's part agreed this is where it totally sucks check check mate",
    "start": "2460900",
    "end": "2466000"
  },
  {
    "text": "this is just like where Russ gets horrible when you start getting into these weird lifetime problems uh lifetime variables again it's super fast",
    "start": "2466000",
    "end": "2472300"
  },
  {
    "text": "though if you can be good at it but I just don't have enough like the problem is I don't write enough libraries to be",
    "start": "2472300",
    "end": "2478119"
  },
  {
    "text": "good enough at it so instead it's like every time I do it I kind of go okay I know what I'm trying to do",
    "start": "2478119",
    "end": "2483700"
  },
  {
    "text": "let's start trying to do it and then when it doesn't work I get frustrated it takes me like five tries I'm like okay I",
    "start": "2483700",
    "end": "2489280"
  },
  {
    "text": "got it and then it works and then I change one thing and then I have to rethink all the things yeah or like you move to make it go async and then it",
    "start": "2489280",
    "end": "2496119"
  },
  {
    "text": "just starts feeling really bad then you just feel sad about yourself your life and your situation locality offers a",
    "start": "2496119",
    "end": "2502780"
  },
  {
    "text": "compromise consider just one lifetime the current region makes efficient stack allocation easy to use in many practical",
    "start": "2502780",
    "end": "2508780"
  },
  {
    "text": "scenarios values with other lifetimes are still managed by the garbage collector okay the global record Fields because modes are deep a local record",
    "start": "2508780",
    "end": "2515680"
  },
  {
    "text": "always contains local values hold on one second how much more do we have okay we're almost to the end nice I was about",
    "start": "2515680",
    "end": "2520900"
  },
  {
    "text": "to say this is a long article however since Global is a sub mode of local inner values may also be Heap allocated",
    "start": "2520900",
    "end": "2526540"
  },
  {
    "text": "and sometimes the programmer knows they always will be in this case locality isn't necessarily restrictive therefore",
    "start": "2526540",
    "end": "2531700"
  },
  {
    "text": "we support annotating record Fields with the explicit global mode the compiler forbids initializing a global field",
    "start": "2531700",
    "end": "2537880"
  },
  {
    "text": "using a local variable Global fields are hence allowed to escape the region yep okay so you can Global you can be a",
    "start": "2537880",
    "end": "2544060"
  },
  {
    "text": "globalist if you need to yeah you can just be a hidden globalist you're like parading around as a local you know but",
    "start": "2544060",
    "end": "2549880"
  },
  {
    "text": "then you're actually a globalist oh damn that's like that's that's that that",
    "start": "2549880",
    "end": "2554920"
  },
  {
    "text": "that's a conspiracy type uh explicitly mutable record fields are automatically",
    "start": "2554920",
    "end": "2560680"
  },
  {
    "text": "considered Global if this were not the case a function could leak a local variable by storing it with a local",
    "start": "2560680",
    "end": "2565839"
  },
  {
    "text": "parameter violating region safety for example we have immutable X option this clear local box local y none in this",
    "start": "2565839",
    "end": "2574300"
  },
  {
    "text": "okay so I don't quite basically like Fields can be mutable or not mutable in",
    "start": "2574300",
    "end": "2581800"
  },
  {
    "text": "ocamel you said it at the field level so like they said X is mutable right",
    "start": "2581800",
    "end": "2587640"
  },
  {
    "text": "assign a local Y into a local box but they're at different levels",
    "start": "2587640",
    "end": "2594280"
  },
  {
    "text": "yes so then now like the box is gonna get the balls you're in trouble you're",
    "start": "2594280",
    "end": "2599380"
  },
  {
    "text": "returning this box and or like it so it's like hey you can't just put this here this is you said this was local what are you doing yes okay for those",
    "start": "2599380",
    "end": "2606040"
  },
  {
    "text": "that don't see what's happening here this is a scope this is a scope and so y lives this long",
    "start": "2606040",
    "end": "2613960"
  },
  {
    "text": "box lives this long therefore this cannot happen yeah basically that's that's the case",
    "start": "2613960",
    "end": "2621280"
  },
  {
    "text": "yeah okay okay cool that makes sense that makes perfect sense locality and practice at James Street we've been",
    "start": "2621280",
    "end": "2626560"
  },
  {
    "text": "using locality and production for some time developers who work on performance sensitive systems use locality daily and those who don't are largely unfamiliar",
    "start": "2626560",
    "end": "2634000"
  },
  {
    "text": "with the feature which means we've successfully limited the cost to our users who care therefore we consider",
    "start": "2634000",
    "end": "2639700"
  },
  {
    "text": "localities expressive expressivity and performance benefits worth the additional language complexity I agree",
    "start": "2639700",
    "end": "2644800"
  },
  {
    "text": "if that if you could do that oopsies wrong way if you could do this and people don't realize they're using one",
    "start": "2644800",
    "end": "2651700"
  },
  {
    "text": "of the two to me that seems like a w that means you've created a feature and which is not leaky right the outside",
    "start": "2651700",
    "end": "2657520"
  },
  {
    "text": "doesn't need to know about it only the inside does yeah and when they say they've been using it in production that",
    "start": "2657520",
    "end": "2663339"
  },
  {
    "text": "means like a lot I would assume they do here with how much old camel they have that's not like",
    "start": "2663339",
    "end": "2669640"
  },
  {
    "text": "well we launched it and we've got eight users you know we have a CLI that Tom uses to compile J diesel right like it's",
    "start": "2669640",
    "end": "2676720"
  },
  {
    "text": "actually yeah it's more than just for geniuses is what you're trying to say yes okay building on locality success the compiler team is now implementing",
    "start": "2676720",
    "end": "2683200"
  },
  {
    "text": "additional modes for describing ownership constraints and part two we'll explore new mode access represented uniqueness and linear linearity",
    "start": "2683200",
    "end": "2690060"
  },
  {
    "text": "linearity okay that seems like ownership basically those two together are ownership okay well I hey I love where",
    "start": "2690060",
    "end": "2696640"
  },
  {
    "text": "this is going I I'm very happy I feel like okay I could love oh camel I'm still on the I don't know yet list okay",
    "start": "2696640",
    "end": "2703180"
  },
  {
    "text": "I still don't know but I feel like I could love ocamel in reading stuff like this where you get practical performance",
    "start": "2703180",
    "end": "2710680"
  },
  {
    "text": "without a like massive unsafety of C where it's just like sometimes it's such an",
    "start": "2710680",
    "end": "2716859"
  },
  {
    "text": "annoying like if you've never worked out segmentation faults it's super not fun",
    "start": "2716859",
    "end": "2722140"
  },
  {
    "text": "or rust where like you said you go with all these references and then you go async and then you hate your life and",
    "start": "2722140",
    "end": "2728319"
  },
  {
    "text": "then you're just like why do I hate my life and you're like oh it's because of all this so I love this this is",
    "start": "2728319",
    "end": "2733660"
  },
  {
    "text": "beautiful I'm very excited for the next one too especially if you'd get a little",
    "start": "2733660",
    "end": "2739359"
  },
  {
    "text": "bit of time to practice some Mo camel this week and then you'll start it's gonna look like just like some Rust",
    "start": "2739359",
    "end": "2744819"
  },
  {
    "text": "stuff and you'll be like oh my goodness so sweet that I don't have to think about it all the time",
    "start": "2744819",
    "end": "2751140"
  },
  {
    "text": "one of the things there's a really great podcast signals and threads I haven't been on it if they",
    "start": "2753339",
    "end": "2759280"
  },
  {
    "text": "ever want to have me on I'd like TJ hasn't been on signals and threads by the way signals and threads if you're wondering",
    "start": "2759280",
    "end": "2765099"
  },
  {
    "text": "um but they they talk about how a lot of the goal of what they're trying to do for this is like make the complexity",
    "start": "2765099",
    "end": "2772119"
  },
  {
    "text": "very much opt-in which they like mention at the end right but the idea is like you don't have to pay for the complexity",
    "start": "2772119",
    "end": "2778060"
  },
  {
    "text": "on day one learning the language right and maybe not even day 100 but it's like",
    "start": "2778060",
    "end": "2783400"
  },
  {
    "text": "when you run into the problem then you have the tool to solve it without having to resort resort to something like",
    "start": "2783400",
    "end": "2789160"
  },
  {
    "text": "completely different right like oh we just have to rewrite this part of the stack in Rust you're like oh dang it you",
    "start": "2789160",
    "end": "2794680"
  },
  {
    "text": "know yeah okay so that's so that's what I'm excited about so anyways this has been the educational gin yeah this is the",
    "start": "2794680",
    "end": "2801640"
  },
  {
    "text": "don't you don't do that that's my line it's completely inappropriate and I",
    "start": "2801640",
    "end": "2808000"
  },
  {
    "text": "don't go underneath I go to the side okay you gotta go to the side all right that makes a big difference do",
    "start": "2808000",
    "end": "2814420"
  },
  {
    "text": "you understand the education engine okay listen to this man's screams and be influenced get influenced kid all right",
    "start": "2814420",
    "end": "2822700"
  },
  {
    "text": "get influenced the name quit your job tune in and drop out what what what did",
    "start": "2822700",
    "end": "2830079"
  },
  {
    "text": "uh Timothy lyrics buy my free course on front end Masters and get bankrupted",
    "start": "2830079",
    "end": "2838318"
  },
  {
    "text": "all right hey the name is underscore DV",
    "start": "2839200",
    "end": "2845400"
  },
  {
    "text": "bye TJ this is ridiculous okay bye chat love you everybody see you later",
    "start": "2845800",
    "end": "2851818"
  }
]