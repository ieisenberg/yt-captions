[
  {
    "text": "why I'm not ready to switch to zigg from rust you know this Pekka fella",
    "start": "120",
    "end": "6560"
  },
  {
    "text": "okay I don't know about this peka fella and I don't really understand this photo why it has anything to do that I'm not",
    "start": "6560",
    "end": "12400"
  },
  {
    "text": "going to lie I love programming and C he is a Linux Colonel contributor so",
    "start": "12400",
    "end": "18160"
  },
  {
    "text": "probably not uh probably not too much of a surprise that the man loves C which is why I'm surprised he doesn't love zigg I",
    "start": "18160",
    "end": "23880"
  },
  {
    "text": "know it's a little bit irrational but programming and C just feels right perhaps that's because I did spend a lot of time with c as I contributed to the",
    "start": "23880",
    "end": "31080"
  },
  {
    "text": "Linux kernel those were good times because I had the opportunity to learn from some of the best C programmers in the world hacking on the Linux kernel",
    "start": "31080",
    "end": "37559"
  },
  {
    "text": "also taught me the connection between C programs and the Machine code it compiles to which I guess influenced my",
    "start": "37559",
    "end": "43480"
  },
  {
    "text": "thinking Pekka built differently confirmed I dude I'm so I I know he's going to explain to me but I just if you",
    "start": "43480",
    "end": "50440"
  },
  {
    "text": "love C the the love of rust feels confusing okay the love of C feels",
    "start": "50440",
    "end": "55840"
  },
  {
    "text": "confusing if you if and the love of rust however C is an unsafe language it's easy to make mistakes but I spent so",
    "start": "55840",
    "end": "63239"
  },
  {
    "text": "many hours on debugging C programs that at some point I ended up being reasonably good at it classic do",
    "start": "63239",
    "end": "69400"
  },
  {
    "text": "something long enough and you get good at it I was often able to uh Trace back what happened just from the Linux kernel",
    "start": "69400",
    "end": "75360"
  },
  {
    "text": "register dump or oops as they call it uh and fix a bug that I was not able to",
    "start": "75360",
    "end": "80680"
  },
  {
    "text": "reproduce I also learned to write C in a way that minimized the mistakes I felt",
    "start": "80680",
    "end": "85880"
  },
  {
    "text": "productive with C type one in the chat if you are the same way do we have have any c Chads in here do we have any do we",
    "start": "85880",
    "end": "92360"
  },
  {
    "text": "even have a singular C Chad in here we have a lot of people typing one and I just doubt it I'm doubting seriously",
    "start": "92360",
    "end": "99399"
  },
  {
    "text": "there that there that many C Chads in here segmentation fall C is also a low-level language when you're",
    "start": "99399",
    "end": "105600"
  },
  {
    "text": "programming in c you end up writing a lot of code just to do the simplest of tasks there are no built-in data types",
    "start": "105600",
    "end": "112360"
  },
  {
    "text": "so I washed so I wanted a hash table or a linked list I usually ended up rolling my own I and I almost never used a",
    "start": "112360",
    "end": "119960"
  },
  {
    "text": "binary search tree because writing one yourself took forever to get right so perhaps C wasn't perfect after all H it",
    "start": "119960",
    "end": "126600"
  },
  {
    "text": "is true hand rolling your own bin your own binary search tree is actually very difficult especially when you consider",
    "start": "126600",
    "end": "133319"
  },
  {
    "text": "uh deleting uh deleting nodes like that's it's it's just a it's a lot of effort to get correct cuz the amount of",
    "start": "133319",
    "end": "139959"
  },
  {
    "text": "little things you have to get right in a binary tree and all the links you have to touch it's it's a lot of work",
    "start": "139959",
    "end": "146120"
  },
  {
    "text": "balancing is the worst yeah yeah like if you do uh AVL for balancing or red black for balancing dude I can't even",
    "start": "146120",
    "end": "151640"
  },
  {
    "text": "understand red black that well like I have never I've never done red black in a full implementation I've only done AVL",
    "start": "151640",
    "end": "157640"
  },
  {
    "text": "in a full implementation red black is fun and maybe one of these days I have to implement a red black tree cuz I've",
    "start": "157640",
    "end": "163120"
  },
  {
    "text": "only ever done AVL I thought AVL was a lot of fun the world's balances on the most fragile things and balancing binary",
    "start": "163120",
    "end": "169680"
  },
  {
    "text": "search trees is most certainly one of the most fragile activities of all time uh red black trees are just binary trees",
    "start": "169680",
    "end": "175800"
  },
  {
    "text": "and they have like three rules for balancing not hard yeah I'm sure it's not hard I know know it involves like",
    "start": "175800",
    "end": "180840"
  },
  {
    "text": "when you have a black Uncle you got to do something but I can't remember anything beyond that like that's it",
    "start": "180840",
    "end": "186000"
  },
  {
    "text": "that's all I can remember about a red black tree see if your nod's uncle has a red color then change the color of the",
    "start": "186000",
    "end": "191239"
  },
  {
    "text": "nod's parent and the uncle to Black and the grandfather to red color and repeat the same process for him grandfather if",
    "start": "191239",
    "end": "197280"
  },
  {
    "text": "grandfather is root then don't change the grandfather's red color like there's a whole set of rules you have to go here",
    "start": "197280",
    "end": "202319"
  },
  {
    "text": "people just because you don't just because you don't understand red black trees okay it's showing it's showing you",
    "start": "202319",
    "end": "208599"
  },
  {
    "text": "don't know red black trees right now I did end up writing quite a bit of C++",
    "start": "208599",
    "end": "214280"
  },
  {
    "text": "professionally on two different occasions the modernization effort that went into C++ 11 and subsequent versions",
    "start": "214280",
    "end": "220480"
  },
  {
    "text": "made a big difference now you had access to a variety of data structures and algorithms and with things like classes",
    "start": "220480",
    "end": "226959"
  },
  {
    "text": "and templates you ended up writing much less code but C++ inherited the unsafety of C which meant you still got to spend",
    "start": "226959",
    "end": "233560"
  },
  {
    "text": "a bunch of time debugging your code okay skill issues so in other words it's easy",
    "start": "233560",
    "end": "239120"
  },
  {
    "text": "to get skill issued absolutely rust memory safety and complexity when rust appeared in 2015 I was really drawn to",
    "start": "239120",
    "end": "245799"
  },
  {
    "text": "its promise of memory safety and then you got absolutely owned by async I had done by the way in 2015 rust was much",
    "start": "245799",
    "end": "254319"
  },
  {
    "text": "more rough just use Smart pointers uh I don't know when smart pointers uh were exactly implemented I want to say smart",
    "start": "254319",
    "end": "261280"
  },
  {
    "text": "pointers were in 2011 but I'm not sure if they were uh ason yeah yeah most",
    "start": "261280",
    "end": "266600"
  },
  {
    "text": "people just did ason of course that's how we did it right uh whoever just said that someone said ason yeah just do just",
    "start": "266600",
    "end": "273199"
  },
  {
    "text": "do sanitizer address sanitizer stuff and that usually does it uh C+ plus had Auto",
    "start": "273199",
    "end": "278560"
  },
  {
    "text": "pointer yeah most people just did did that did that uh at least that's what we did in Netflix caught some of my bugs I",
    "start": "278560",
    "end": "284560"
  },
  {
    "text": "had in my uh memory analyzer was in uh using that that uh Val grind yeah I did some Val grinding for sure I had done",
    "start": "284560",
    "end": "292479"
  },
  {
    "text": "some hasal programming around the time and I felt that both languages although designing for completely different use",
    "start": "292479",
    "end": "297840"
  },
  {
    "text": "cases shared the if a compile Works mindset I've always hated this mindset because it's just not true and what I",
    "start": "297840",
    "end": "304360"
  },
  {
    "text": "mean by that is that there's invariance within your program I mean all my toughest bugs are not are are logic bugs",
    "start": "304360",
    "end": "312000"
  },
  {
    "text": "I called it I know I've I've I've never liked this rust mindset and I don't understand how this rust mindset has",
    "start": "312000",
    "end": "318039"
  },
  {
    "text": "proliferated proliferated this long right like you build anything that's sufficiently complex and your worst bugs",
    "start": "318039",
    "end": "324319"
  },
  {
    "text": "have nothing to do with uh ownership or with one person uh mutating it's almost",
    "start": "324319",
    "end": "330680"
  },
  {
    "text": "always some other thing and this is like this is a very common rust mentality and I and I guess a hasal mentality as well",
    "start": "330680",
    "end": "337880"
  },
  {
    "text": "I just don't really like it the fact that the borrow Checker would be able to eliminate a class of issues that you encountered and see all the time felt",
    "start": "337880",
    "end": "344120"
  },
  {
    "text": "magical yeah fair fair you yeah I mean I will agree with this uh the fact that",
    "start": "344120",
    "end": "349919"
  },
  {
    "text": "for those that don't understand how rust effectively works it's really really simple um it's it's it's very very",
    "start": "349919",
    "end": "356199"
  },
  {
    "text": "simple uh by the way someone's saying that the worst bugs are race conditions perhaps their rise conditions but the bugs on average that I encounter have",
    "start": "356199",
    "end": "362680"
  },
  {
    "text": "nothing to do with rise conditions the bugs that I encounter are simply me not understanding how things change over",
    "start": "362680",
    "end": "368400"
  },
  {
    "text": "time um anyways how rust Works in its most simple form is that you have to understand the difference between the",
    "start": "368400",
    "end": "373960"
  },
  {
    "text": "stack and the Heap everything is allocated onto the stack now there are",
    "start": "373960",
    "end": "379280"
  },
  {
    "text": "Pointers into the Heap when your stack item goes out of scope drop gets called on on it which means that if you have a",
    "start": "379280",
    "end": "387000"
  },
  {
    "text": "function and in it you allocate something say a string which allocates to the Heap you're going to have a stack",
    "start": "387000",
    "end": "394800"
  },
  {
    "text": "item that's going to be a fat pointer that's going to be the pointer plus the length effectively I'm sure and I'm sure",
    "start": "394800",
    "end": "400880"
  },
  {
    "text": "there's one other item I'm sure there's like capacity or something like that as well I'm sure there's like some other thing when it comes to the capital S",
    "start": "400880",
    "end": "406599"
  },
  {
    "text": "string that I don't know about but whatever it doesn't really matter and when this thing leaves scope drop gets called and this",
    "start": "406599",
    "end": "414440"
  },
  {
    "text": "gets dropped along with the pointer to the Heap gets dropped meaning it gets freed so in other words this thing gets",
    "start": "414440",
    "end": "420400"
  },
  {
    "text": "you know it's very easy to call free on items cuz you don't call Free Yourself free gets handled by rust so that means",
    "start": "420400",
    "end": "426319"
  },
  {
    "text": "there was a Malik called here for the string if you return the string then no free is called instead the free is then",
    "start": "426319",
    "end": "432479"
  },
  {
    "text": "that stack pointer is then returned to wherever the calling is and then it keeps on going until its only stack",
    "start": "432479",
    "end": "438160"
  },
  {
    "text": "reference gets cleaned up and then the free happens right Malik chills return yeah it happen",
    "start": "438160",
    "end": "444479"
  },
  {
    "text": "so that's like the basics of rust for those that don't know what rust is uh there you go it's not it's not it's not",
    "start": "444479",
    "end": "450000"
  },
  {
    "text": "that crazy and so this makes a huge difference when you're allocating and deallocating because there's a just a whole set of really shitty experiences",
    "start": "450000",
    "end": "457199"
  },
  {
    "text": "when it comes to doing this but after exploring the language for some time I gave up because the tooling was changing",
    "start": "457199",
    "end": "463280"
  },
  {
    "text": "all the time and quite frankly I could not wrap my head around the borrow Checker perhaps I was thinking in C too much I think if you think of rust as uh",
    "start": "463280",
    "end": "471080"
  },
  {
    "text": "as I just explained it as stack and Heap honestly it just makes life really simple like if you think this way it's",
    "start": "471080",
    "end": "477159"
  },
  {
    "text": "really really simple plus 2015 is much much different fast forward to 2021 I started working with rust",
    "start": "477159",
    "end": "482960"
  },
  {
    "text": "professionally now I knew I didn't want to use C or C++ and globber my co-founder had good experiences with",
    "start": "482960",
    "end": "488000"
  },
  {
    "text": "rust so I went with that I probably fighting let's see I was probably fighting with the borrow checker for two",
    "start": "488000",
    "end": "493240"
  },
  {
    "text": "or three months until things started to click I was thinking and see too much uh I then discovered the send and sync",
    "start": "493240",
    "end": "499000"
  },
  {
    "text": "traits and how they really help with multi-threaded programs the tooling and ecosystem has really grown up since 2015",
    "start": "499000",
    "end": "506159"
  },
  {
    "text": "absolutely rust 2015 versus 2021 is that's a vastly different you know",
    "start": "506159",
    "end": "513039"
  },
  {
    "text": "vastly different experience after the initial learning curve programming and rust really became productive fair fair",
    "start": "513039",
    "end": "519320"
  },
  {
    "text": "you know for those that don't understand how rust becomes really productive is when you when you first start off you",
    "start": "519320",
    "end": "525040"
  },
  {
    "text": "start fighting something called the borrow Checker and you can't figure out anything and then what you realize is",
    "start": "525040",
    "end": "530519"
  },
  {
    "text": "that if you are using just sync stuff you just call do",
    "start": "530519",
    "end": "537040"
  },
  {
    "text": "clone and if you're using async stuff stuff you just simply hit it with the old Arc",
    "start": "537040",
    "end": "543640"
  },
  {
    "text": "mutex and boom you're done rust e",
    "start": "543640",
    "end": "549640"
  },
  {
    "text": "z that's it that's that that's it it's that easy rust is a complex language the",
    "start": "549640",
    "end": "556040"
  },
  {
    "text": "more I write rust the more I feel that there is too much complexity when you use traits or async rust things start to",
    "start": "556040",
    "end": "561360"
  },
  {
    "text": "feel complicated perhaps I'm still thinking too much and see I don't think you are I think it is complicated I think it is a complex language what is",
    "start": "561360",
    "end": "568440"
  },
  {
    "text": "an AR mutex well Arc stands for Atomic reference counting meaning that it has",
    "start": "568440",
    "end": "575240"
  },
  {
    "text": "that same stack-based allocation except for that stack based allocation has a pointer to the Heap where the thing is",
    "start": "575240",
    "end": "582399"
  },
  {
    "text": "stored and it has a counter and that counter is an atomic int not just a",
    "start": "582399",
    "end": "588160"
  },
  {
    "text": "regular int so when this thing gets dot cloned this counter goes up by one when",
    "start": "588160",
    "end": "596720"
  },
  {
    "text": "your stack variable gets removed it gets dropped this count goes down by one when",
    "start": "596720",
    "end": "603680"
  },
  {
    "text": "it reaches zero the pointer to the Heap is then cleaned up it's like it's it's",
    "start": "603680",
    "end": "608920"
  },
  {
    "text": "it's pretty straightforward right like it's a pretty straightforward thing right uh and a mutex is just a semaphore",
    "start": "608920",
    "end": "615480"
  },
  {
    "text": "of length one easy you didn't know that what are you a",
    "start": "615480",
    "end": "623560"
  },
  {
    "text": "loser yeah welcome to the '90s yeah welcome to the '90s everybody shared pointer then yeah it's literally a shared pointer and mutex is a shared",
    "start": "623560",
    "end": "630240"
  },
  {
    "text": "pointer so it's shallow clones yes uh clones clone the stack remember that when you call do clone it usually clones",
    "start": "630240",
    "end": "635959"
  },
  {
    "text": "the stack except for in Rust rust is a little bit more confusing typically you clone Stacks you don't clone heaps in",
    "start": "635959",
    "end": "642000"
  },
  {
    "text": "Rust you clone Heap or stack depending on the on the data structure again this is why I say that rust is generally a",
    "start": "642000",
    "end": "647320"
  },
  {
    "text": "complicated language because you need to understand when something clones the stack versus clones the Heap right so an",
    "start": "647320",
    "end": "653839"
  },
  {
    "text": "arc clones the stack not the Heap if you do string. clone you clone the stack",
    "start": "653839",
    "end": "660079"
  },
  {
    "text": "and the Heap right it's a little bit yeah it's it's a little you just have to have all these kind of you have to have",
    "start": "660079",
    "end": "666880"
  },
  {
    "text": "all these like rules in your head to do effective um effective effective uh rust",
    "start": "666880",
    "end": "674040"
  },
  {
    "text": "all right Zig as a modern C I think sometime in 2022 I discovered Zig because of two projects bun and tiger",
    "start": "674040",
    "end": "679519"
  },
  {
    "text": "beetle by the way bun Jared will be on the stream here shortly in uh 48 minutes Jared's going to be on the stream and uh",
    "start": "679519",
    "end": "686320"
  },
  {
    "text": "joran was supposed to join us as well but joran did not uh as had done with rust in 2015 I started to explore it I",
    "start": "686320",
    "end": "692040"
  },
  {
    "text": "quickly discovered that I really like Zig because it feels like C it is it literally does feel like C but just with",
    "start": "692040",
    "end": "697760"
  },
  {
    "text": "uh but just as rust after initial exploration I gave up on it because the tooling kept changing all the time and the ecosystem just wasn't there for me I",
    "start": "697760",
    "end": "704680"
  },
  {
    "text": "do agree Zig ecosystem is probably the worst part about Zig is that uh it's",
    "start": "704680",
    "end": "711040"
  },
  {
    "text": "just like the tooling just really ain't there yet and the ecosystem isn't fully",
    "start": "711040",
    "end": "716800"
  },
  {
    "text": "flushed out but I really it it it's it's still a great great language in the summer of 2023 I wanted to give Zig",
    "start": "716800",
    "end": "722120"
  },
  {
    "text": "another chance partly because globber would not shut up about it I also perhaps may have been hounding them",
    "start": "722120",
    "end": "727800"
  },
  {
    "text": "about how great Zig is um I decided I would write a small proof of concept a clone of squeal light in Zig as I",
    "start": "727800",
    "end": "734120"
  },
  {
    "text": "started the work I discovered that Zig is a low-level language not lowlevel in the way C is but much lower level than",
    "start": "734120",
    "end": "740199"
  },
  {
    "text": "rust but I figured that's acceptable price to pay because Zig just feels right as I was working on a database I",
    "start": "740199",
    "end": "747199"
  },
  {
    "text": "needed a way to perform IO efficiently I was reading the tiger beetle source code and then I discovered Michelle's lib X",
    "start": "747199",
    "end": "753240"
  },
  {
    "text": "EV is this like a lib UV style uh and even contributed to it a bit but after",
    "start": "753240",
    "end": "758639"
  },
  {
    "text": "three months of weekends hacks I ended up converting the code to rust I just felt productive again now the real",
    "start": "758639",
    "end": "763880"
  },
  {
    "text": "question is did you feel productive because you're writing full-time rust all the time you're writing rust for",
    "start": "763880",
    "end": "770279"
  },
  {
    "text": "your entire workday like I mean the hard part about that is feeling",
    "start": "770279",
    "end": "775720"
  },
  {
    "text": "productive is difficult and I think Pekka will agree with this one he'll agree with this take if Monday through",
    "start": "775720",
    "end": "781480"
  },
  {
    "text": "Friday you are writing an X and then on the weekends you write in y x will",
    "start": "781480",
    "end": "786880"
  },
  {
    "text": "always feel better right like X will always feel better because you're just",
    "start": "786880",
    "end": "792399"
  },
  {
    "text": "used to every last bit of it it just that's just how it works you can't you cannot help it because weekend hours are",
    "start": "792399",
    "end": "798240"
  },
  {
    "text": "much much smaller wrong oh camel my camel shut up TJ uh so there's like",
    "start": "798240",
    "end": "804079"
  },
  {
    "text": "definitely that as a thing also when you start using rust a very weird thing",
    "start": "804079",
    "end": "809199"
  },
  {
    "text": "happens you approach problems the rust way right you want to use enums right",
    "start": "809199",
    "end": "815320"
  },
  {
    "text": "you love some some types you love the idea of traits right you like you adopt a lot of very Rusty way of doing things",
    "start": "815320",
    "end": "821800"
  },
  {
    "text": "very okay A has way of doing things and you just start to uh you get kind of like stuck in a mentality and it's hard",
    "start": "821800",
    "end": "828240"
  },
  {
    "text": "to undo this mentality just like if you work with go a lot it's really hard not to try to use interfaces for",
    "start": "828240",
    "end": "834440"
  },
  {
    "text": "everything it's just because that's what you're used to doing and so then when you start using interfaces for",
    "start": "834440",
    "end": "839959"
  },
  {
    "text": "everything and then you go to a language like Zig that does not have interfaces you find yourself you know you find",
    "start": "839959",
    "end": "846959"
  },
  {
    "text": "yourself hurting uh why am I not ready to switch to Zig just yet so why did I",
    "start": "846959",
    "end": "852519"
  },
  {
    "text": "end up ditching Zig in favor of rust although I still like Zig a lot for uh starters comp comp time feels like a",
    "start": "852519",
    "end": "858399"
  },
  {
    "text": "hack really crazy okay so we interviewed Chris lner yesterday uh by we I mean TJ",
    "start": "858399",
    "end": "864079"
  },
  {
    "text": "and I TJ streams by the way uh uh comp time was something they modeled part of",
    "start": "864079",
    "end": "870560"
  },
  {
    "text": "Mojo after this is probably irrational but I just don't like comp time very much in fact I would much prefer the",
    "start": "870560",
    "end": "876240"
  },
  {
    "text": "Legacy pre-processor macros of C if I if I can't have generics",
    "start": "876240",
    "end": "881759"
  },
  {
    "text": "really I got to know more more about this because this just just doesn't feel right like one thing that's so",
    "start": "881759",
    "end": "887160"
  },
  {
    "text": "incredible and I talk a lot about this that I just absolutely am just completely blown away by if you go to zigg Lings and you look at just like the",
    "start": "887160",
    "end": "893680"
  },
  {
    "text": "basics of this it's comp time here uh uh is duck I think is the name of it",
    "start": "893680",
    "end": "899720"
  },
  {
    "text": "yeah this function right here right this function is a comp time function meaning",
    "start": "899720",
    "end": "905160"
  },
  {
    "text": "it it executes during compile time so possible duck is an any type it doesn't know what's being passed into this and",
    "start": "905160",
    "end": "912040"
  },
  {
    "text": "we go down here and we get the type of my duck this is done during compile time",
    "start": "912040",
    "end": "917240"
  },
  {
    "text": "then I say does this type have a function or has a declaration called waddle does this thing have a",
    "start": "917240",
    "end": "923800"
  },
  {
    "text": "declaration called quack if it has both a walk like a duck and quacks like a duck it is a duck and if it is a duck we",
    "start": "923800",
    "end": "930720"
  },
  {
    "text": "call quack on it now here's the cool part if you go up here and you see these three different things they created they",
    "start": "930720",
    "end": "936199"
  },
  {
    "text": "created a duck which has waddle and Quack they created a rubber duck which has waddle and Quack then they created a",
    "start": "936199",
    "end": "943600"
  },
  {
    "text": "duct which only has connect they're able to call this function quack or is is a",
    "start": "943600",
    "end": "950920"
  },
  {
    "text": "duck with a duck a rubber duck and a duct right and because it's compile time",
    "start": "950920",
    "end": "958480"
  },
  {
    "text": "this generat three different functions it generates the rubber duck version the duck version and then the duct version",
    "start": "958480",
    "end": "964759"
  },
  {
    "text": "and the duct version is just simply an empty function that does nothing other than returns true or false which is",
    "start": "964759",
    "end": "971040"
  },
  {
    "text": "pretty cool because that means it actually compiled this reflection call at compile time like it it compiles it",
    "start": "971040",
    "end": "977880"
  },
  {
    "text": "as opposed to running it during runtime like when you use go and you switch on types it's doing the switch on types and",
    "start": "977880",
    "end": "984600"
  },
  {
    "text": "you have to do all this stuff at runtime whereas this does it at compile time which is pretty cool aren't macros also",
    "start": "984600",
    "end": "991279"
  },
  {
    "text": "generating functions macros do not generate functions macros generate text",
    "start": "991279",
    "end": "997399"
  },
  {
    "text": "wherever that whoever said that yeah there you go macros generate text when it comes to",
    "start": "997399",
    "end": "1002440"
  },
  {
    "text": "C so C just generates a bunch of text and that's it they don't generate anything other than they're just text",
    "start": "1002440",
    "end": "1009120"
  },
  {
    "text": "Replacements that's it they're just flat text Replacements that's why when you have like an all capitals if defi or",
    "start": "1009120",
    "end": "1015480"
  },
  {
    "text": "Define it just literally replaces word with number right uh Define true as zero",
    "start": "1015480",
    "end": "1022519"
  },
  {
    "text": "this is literally possible you can do that uh you'll still end up chasing uh",
    "start": "1022519",
    "end": "1027839"
  },
  {
    "text": "Sig EG uh I don't know if that was me thinking too much in Russ but I ended up writing lots of silly bugs that I that",
    "start": "1027839",
    "end": "1034240"
  },
  {
    "text": "ended up in segmentation faults that I then chased with the debugger see that's surprising I actually got none of those",
    "start": "1034240",
    "end": "1041360"
  },
  {
    "text": "and I think one thing that allows you to do that at least in Zig I have I've I've literally so far in my game that I've",
    "start": "1041360",
    "end": "1048000"
  },
  {
    "text": "been creating I have I have yet to run across a single one and we have a decent amount of that I think one thing that",
    "start": "1048000",
    "end": "1054320"
  },
  {
    "text": "makes that so I don't run into it is that whenever I do a game State all my things that could be nil I put a",
    "start": "1054320",
    "end": "1061600"
  },
  {
    "text": "question mark in front of them and so when there's a question mark in front of them it means that I have to first check",
    "start": "1061600",
    "end": "1067840"
  },
  {
    "text": "if it's nil or not and so by doing that intentionally I know that this cannot be",
    "start": "1067840",
    "end": "1073200"
  },
  {
    "text": "anything but a potential null and so I have to like work through that every single time it like it adds all of that",
    "start": "1073200",
    "end": "1080840"
  },
  {
    "text": "safety that I need when I need it if I don't need that safety then I don't have",
    "start": "1080840",
    "end": "1086120"
  },
  {
    "text": "it right I don't have to have it because I know this pointer will always exist I assume this would get better over time",
    "start": "1086120",
    "end": "1091919"
  },
  {
    "text": "if I wrote more Zig of course but I've grown to trust the borrow Checker yeah you you also end up leaking memory again",
    "start": "1091919",
    "end": "1098080"
  },
  {
    "text": "this is probably me thinking too much in Rust but I ended up writing code that leaked memory all the time of course Zig has really nice tooling here to catch",
    "start": "1098080",
    "end": "1103799"
  },
  {
    "text": "them quickly so perhaps not such a big issue yeah Zig is fantastic in this let me just show you a quick a quick version of this um since we're doing this uh",
    "start": "1103799",
    "end": "1111400"
  },
  {
    "text": "engine test here I'll go here and see this I'm going to erase that one defer statement so I deferred the de",
    "start": "1111400",
    "end": "1117440"
  },
  {
    "text": "initialization of my game state right so I'm going to just I'm going to do that and I'm going to go Zig build test I may",
    "start": "1117440",
    "end": "1124480"
  },
  {
    "text": "have a bug please don't have a bug please don't have a bug there we go one leaked so it's showing me that I have a",
    "start": "1124480",
    "end": "1130799"
  },
  {
    "text": "leaked item and it's even showing me where my leak was like look at this all these creep creates were leaked all",
    "start": "1130799",
    "end": "1138039"
  },
  {
    "text": "these things were leaked and if you go to the very top of the original leak it's going to show you you leaked this",
    "start": "1138039",
    "end": "1143480"
  },
  {
    "text": "thing right here Zig line 20 right here that was leaked so I'm like oh I forgot",
    "start": "1143480",
    "end": "1150280"
  },
  {
    "text": "to clean up the game state I'm going to put that back in it's gone now right if",
    "start": "1150280",
    "end": "1155320"
  },
  {
    "text": "I go up in here and I see this and I just take say I forget to like deit my",
    "start": "1155320",
    "end": "1160760"
  },
  {
    "text": "Towers or how about this one I forget to deit my creeps individually but I deit",
    "start": "1160760",
    "end": "1166280"
  },
  {
    "text": "my uh my creep data structure right then look at this it's going to",
    "start": "1166280",
    "end": "1172400"
  },
  {
    "text": "tell me hey you've accidentally leaked three",
    "start": "1172400",
    "end": "1176880"
  },
  {
    "text": "creeps right it's going to show me all the places that I leaked it right which is actually pretty cool I don't know I",
    "start": "1178280",
    "end": "1184120"
  },
  {
    "text": "really like that like I actually really like how all of that works and I I find that to be a very comforting way to",
    "start": "1184120",
    "end": "1190520"
  },
  {
    "text": "program and even if you run things into bug it lets you know when you've leaked stuff which I I think is a pretty good",
    "start": "1190520",
    "end": "1197320"
  },
  {
    "text": "General experience for being very seike right there are no books on Zig I really",
    "start": "1197320",
    "end": "1202960"
  },
  {
    "text": "really need a good technical book to learn a programming language but there are none for Zig okay that's actually this is super fair this is super ultra",
    "start": "1202960",
    "end": "1210120"
  },
  {
    "text": "Fair uh I actually I find this to actually be the probably the most compelling reason not to use Zig right now besides for Tooling in contrast",
    "start": "1210120",
    "end": "1217120"
  },
  {
    "text": "there's a lot of great books on Rust and specific topics on Rust available it just feels very hard to learn Zig",
    "start": "1217120",
    "end": "1222520"
  },
  {
    "text": "completely fair you want to you want to learn uh async rust async Rust book",
    "start": "1222520",
    "end": "1227960"
  },
  {
    "text": "right there you go here's the entire book of everything that has to do with async",
    "start": "1227960",
    "end": "1235360"
  },
  {
    "text": "rust right like that that that makes sense that's this is probably the most fair thing right ever uh ecosystem is",
    "start": "1235360",
    "end": "1242159"
  },
  {
    "text": "perhaps not there there are two large Zig projects bun and tiger beetle well now there's ghosty as well so he doesn't know that ghosty is also if you don't",
    "start": "1242159",
    "end": "1248280"
  },
  {
    "text": "know ghosty ghosty is Hashimoto's terminal and they are great source uh and there are great source trees to",
    "start": "1248280",
    "end": "1254200"
  },
  {
    "text": "learn from but there does not yet seem to be large ecosystem to tap into like there is with rust tooling is also",
    "start": "1254200",
    "end": "1260640"
  },
  {
    "text": "perhaps not there the tool chain Zig itself provides is great but it keeps changing a lot like rust back in 2015",
    "start": "1260640",
    "end": "1266559"
  },
  {
    "text": "but more importantly third party tools like GitHub co-pilot I feel like",
    "start": "1266559",
    "end": "1272640"
  },
  {
    "text": "uh this sentence was forgotten but more importantly third party tools like GitHub co-pilot something yeah co-pilot",
    "start": "1272640",
    "end": "1279720"
  },
  {
    "text": "just doesn't do really good with Zig because it doesn't I'm surprised that Pekka you you know actually Pekka using",
    "start": "1279720",
    "end": "1285600"
  },
  {
    "text": "uh co-pilot it was is actually kind of a bit of a surprise I thought Zig now has a package manager so we only need to",
    "start": "1285600",
    "end": "1292200"
  },
  {
    "text": "wait six years for Zig to be awesome my guess is that within the next two years Zig will have a lot of the problems",
    "start": "1292200",
    "end": "1297440"
  },
  {
    "text": "finished how do you npm install Zig not really sure industry investment is not there rust is used across our industry",
    "start": "1297440",
    "end": "1303520"
  },
  {
    "text": "for me the Tipping points were when Microsoft started writing parts of Windows in Rust and Linux kernel added support for rust these two things alone",
    "start": "1303520",
    "end": "1309640"
  },
  {
    "text": "mean that rust is likely going to stay around for a very long time in contrast zigg does not yet have the LI the level",
    "start": "1309640",
    "end": "1316559"
  },
  {
    "text": "of Industry backing right now it do not mean that Zig won't eventually get there but rust is much safer and boring option",
    "start": "1316559",
    "end": "1322520"
  },
  {
    "text": "right now can't argue against that one that's good good this is if if you are",
    "start": "1322520",
    "end": "1328000"
  },
  {
    "text": "only looking for things that are um you know that have big industry adoption totally reasonable true true and true",
    "start": "1328000",
    "end": "1334000"
  },
  {
    "text": "true true and true I feel like I don't feel like he gave any really good technical reasons though I feel like his",
    "start": "1334000",
    "end": "1340400"
  },
  {
    "text": "I I I'm actually I'm a bit surprised that Pekka did not go more into this to me it seems like he doesn't quite",
    "start": "1340400",
    "end": "1345840"
  },
  {
    "text": "understand comp time which is a bit surprising because Pekka might be probably one of the most talented Engineers I know of so I'm a little bit",
    "start": "1345840",
    "end": "1352600"
  },
  {
    "text": "surprised by this Vibes were off with Zig that's how I do it I really really like Zig but I am not ready to switch to",
    "start": "1352600",
    "end": "1358320"
  },
  {
    "text": "it just yet rust is not perfect but it's my go-to language for systems programming I feel productive with it",
    "start": "1358320",
    "end": "1363600"
  },
  {
    "text": "Zig may be in the situation rust was in in 2015 and all it needs is more time but for me I'll be waiting for the first",
    "start": "1363600",
    "end": "1369960"
  },
  {
    "text": "book to come out and then get back to it I Al I am also hoping that maybe they",
    "start": "1369960",
    "end": "1375200"
  },
  {
    "text": "will dumb down the language for people like me and provide an alter native to comp time but until then I will remain",
    "start": "1375200",
    "end": "1380760"
  },
  {
    "text": "happy rust station I mean you got to remember like I love comp time I'm a bit surprised on on the comp time Hate by",
    "start": "1380760",
    "end": "1387120"
  },
  {
    "text": "him cuz I feel like comp time is like the inverse for me I feel like rusts",
    "start": "1387120",
    "end": "1393000"
  },
  {
    "text": "generics they narrowing of generics through traits and wear statements and the difference between calling imple",
    "start": "1393000",
    "end": "1399400"
  },
  {
    "text": "versus box and dine it feels like that is much harder to Gro and be really good",
    "start": "1399400",
    "end": "1405320"
  },
  {
    "text": "at at all points than it is the other way around what is comp time comp time is code that is executed during compile",
    "start": "1405320",
    "end": "1411919"
  },
  {
    "text": "time versus um versus runtime comp time is just metaprogramming like const expression and uh templates and C++ yes",
    "start": "1411919",
    "end": "1418600"
  },
  {
    "text": "it is that's all it is very Ziggy uh surely I'm dumber than this Pekka fellow you are and I don't think Zig needs to",
    "start": "1418600",
    "end": "1425240"
  },
  {
    "text": "be dumbed down I don't think zigg needs to be dumbed down either uh let's see when do you need comp time when you want to build a list of something or you want",
    "start": "1425240",
    "end": "1431279"
  },
  {
    "text": "to do something example of comp time I already just gave an example but here's another really easy example of comp time",
    "start": "1431279",
    "end": "1436960"
  },
  {
    "text": "uh here we go an array list an array list is a is this",
    "start": "1436960",
    "end": "1443400"
  },
  {
    "text": "right here is a is a compile time function that goes in here and it returns a structure that has an",
    "start": "1443400",
    "end": "1449480"
  },
  {
    "text": "allocator that does all the things it's needed to actually build the underlying array list functionality it has the",
    "start": "1449480",
    "end": "1455760"
  },
  {
    "text": "initial capacity it has the DN it has you know like if you're in C and you want a list of integers and then you",
    "start": "1455760",
    "end": "1461799"
  },
  {
    "text": "want a list of char Stars you know you have to build those lists individually instead this thing operates instead you",
    "start": "1461799",
    "end": "1468399"
  },
  {
    "text": "build a list that operates over type T and so Zig I have an array list and if I",
    "start": "1468399",
    "end": "1473840"
  },
  {
    "text": "want a tower list I create a an array list of Tower and now I have a type Tower list so this is a struct this is a",
    "start": "1473840",
    "end": "1482039"
  },
  {
    "text": "struct that was generated at compile time now I have this Tower list and so now I can have my list of towers",
    "start": "1482039",
    "end": "1488640"
  },
  {
    "text": "wherever that's at Towers yeah it's really unfortunate that you have to write it by hand every time instead of",
    "start": "1488640",
    "end": "1494159"
  },
  {
    "text": "having a simple generics like go yeah but you can do much more powerful things than you can with go so it's like yeah go is really simple",
    "start": "1494159",
    "end": "1501399"
  },
  {
    "text": "but that's because go doesn't have deep support for generics it has light support for generics and that's kind of",
    "start": "1501399",
    "end": "1507200"
  },
  {
    "text": "nice right like I like go for what it's used for it's a great web language how does go handle generics",
    "start": "1507200",
    "end": "1514159"
  },
  {
    "text": "very lightly on functions right all let's see cool kits call it comp time dummies call it structural macros C++ DG",
    "start": "1514159",
    "end": "1520919"
  },
  {
    "text": "call it template magic there you go you get the idea tradeoffs yada yada yada yada y can you mix type arrays yes you",
    "start": "1520919",
    "end": "1527279"
  },
  {
    "text": "have to use you have to use tged unions though right you have to use taged unions and taged unions will do that",
    "start": "1527279",
    "end": "1532640"
  },
  {
    "text": "how's the progress with uh Chad vers jippy Tower Defense oh it's it's it's very we're getting very very close I'm going to do more today so anyways you",
    "start": "1532640",
    "end": "1538799"
  },
  {
    "text": "turn thousands of people into Zig fans and I'm looking forward to stack Overflow survey 2025 well let's go Zig",
    "start": "1538799",
    "end": "1544679"
  },
  {
    "text": "async is dead yeah I I'm not sure Zig async is very very interesting I haven't used any async features with Zig I've",
    "start": "1544679",
    "end": "1551880"
  },
  {
    "text": "only just handrolled my own uh thread for input so if we go here I have my own",
    "start": "1551880",
    "end": "1557440"
  },
  {
    "text": "uh I literally have my just my own input engine that runs on its own thread",
    "start": "1557440",
    "end": "1564640"
  },
  {
    "text": "right so I I don't have async uh stuff because I'm not sure I really want async",
    "start": "1564640",
    "end": "1571559"
  },
  {
    "text": "I don't really want async I don't really want to do anything with async I know async A8 is really really useful it's",
    "start": "1571559",
    "end": "1577919"
  },
  {
    "text": "just it's also async A8 is also just really really magical and it's kind of a pain in the ass and when you want two",
    "start": "1577919",
    "end": "1584200"
  },
  {
    "text": "threads that just run independently sometimes it's easier just to use two threads colored functions were a mistake",
    "start": "1584200",
    "end": "1589919"
  },
  {
    "text": "colored functions were a mistake they're very very difficult magical it is magical because there's a runtime you",
    "start": "1589919",
    "end": "1594960"
  },
  {
    "text": "forget how these things work right so in in in in JavaScript it works with",
    "start": "1594960",
    "end": "1600559"
  },
  {
    "text": "something called the event Loop the reason why you have async A8 the event Loop has a series of tasks that are",
    "start": "1600559",
    "end": "1606080"
  },
  {
    "text": "placed into a Q and these and this Q is executed one at a time right and so it",
    "start": "1606080",
    "end": "1612840"
  },
  {
    "text": "pops this thing off and once this thing fully executes it then goes around it does some extra there's like an extra like micro task cue that it can also",
    "start": "1612840",
    "end": "1619840"
  },
  {
    "text": "check and all that blah blah blah blah blah and then once it's done it goes back on and Pops the next task off and",
    "start": "1619840",
    "end": "1625200"
  },
  {
    "text": "so when you make a request right when you do a fetch when you do an await fetch that adds a task this executes",
    "start": "1625200",
    "end": "1633080"
  },
  {
    "text": "something that when it's finished it adds a task to the uh to the event Loop right that's why you don't have to like",
    "start": "1633080",
    "end": "1640640"
  },
  {
    "text": "explicitly await a promise in JavaScript whereas when in Rust you have a runtime",
    "start": "1640640",
    "end": "1646440"
  },
  {
    "text": "you have an Executor that has a thread that is running and this thread is literally checking Futures right it's",
    "start": "1646440",
    "end": "1653320"
  },
  {
    "text": "doing something it's actually running through and and manually checking a bunch of Futures like hey have you ran have you ran have you ran are you ready",
    "start": "1653320",
    "end": "1659039"
  },
  {
    "text": "to run are you ready to run and it's doing that that's why if you block on the executor none of your other threads",
    "start": "1659039",
    "end": "1664760"
  },
  {
    "text": "work right they're all Frozen in time because your executor is all broke right",
    "start": "1664760",
    "end": "1671399"
  },
  {
    "text": "it's not like it's not super it's not super straightforward how this works go",
    "start": "1671399",
    "end": "1677200"
  },
  {
    "text": "works much more like this then",
    "start": "1677200",
    "end": "1682840"
  },
  {
    "text": "this and so go kind of in this Middle Ground which uses a bunch of threads it",
    "start": "1684440",
    "end": "1690000"
  },
  {
    "text": "just uses uh it uses G Funk to spawn these threads and then you choose how to",
    "start": "1690000",
    "end": "1695080"
  },
  {
    "text": "communicate on those threads right go as work stealing Schuler it's a little bit",
    "start": "1695080",
    "end": "1700399"
  },
  {
    "text": "different right it's it's it's it's I I don't quite understand how theer works but it's very very interesting whereas",
    "start": "1700399",
    "end": "1707240"
  },
  {
    "text": "rust is much different different you actually have an Executor that goes through and and does a bunch of stuff",
    "start": "1707240",
    "end": "1712720"
  },
  {
    "text": "green threads someone's asking about green threads there's Hardware threads which are the things that are going to be like your program running in the",
    "start": "1712720",
    "end": "1719039"
  },
  {
    "text": "operating system and then what you can do is you have a thread that schedules that schedules work when you",
    "start": "1719039",
    "end": "1727440"
  },
  {
    "text": "do8 in Rust you got to remember that this relieves that green thread of its",
    "start": "1727840",
    "end": "1733880"
  },
  {
    "text": "work to be passed back to the executor to then determine what next thing should be executed on this on this actual",
    "start": "1733880",
    "end": "1740960"
  },
  {
    "text": "Hardware thread it's like it's it's very very complicated it's it's not",
    "start": "1740960",
    "end": "1746480"
  },
  {
    "text": "straightforward I wouldn't I would not pretend to understand any of this other than from a very very very high level",
    "start": "1746480",
    "end": "1753480"
  },
  {
    "text": "what's going on and JavaScript is a lot easier to understand because it actually only really has one thread right it only",
    "start": "1753480",
    "end": "1760080"
  },
  {
    "text": "has one thread whereas these ones have many threads this has nend threads and I don't know how many end I don't know how big those ends are are you sure that",
    "start": "1760080",
    "end": "1766799"
  },
  {
    "text": "async O8 uses green threads yeah it uses some form of green threads in in in in Rust in Rust it uses",
    "start": "1766799",
    "end": "1774200"
  },
  {
    "text": "some form of green threads right no",
    "start": "1774200",
    "end": "1780200"
  },
  {
    "text": "problem it's just not it's not it's not uh it's just not clear exactly how it",
    "start": "1780200",
    "end": "1788039"
  },
  {
    "text": "works uh asyn A8 and C is a nightmare they're always kind of uh so green",
    "start": "1788039",
    "end": "1793240"
  },
  {
    "text": "threads are Hardware threads no green threads are uh like your programmed inversion of threads you give you have a",
    "start": "1793240",
    "end": "1800360"
  },
  {
    "text": "thread that runs that takes some work and executes that work and then takes more work and executes that work",
    "start": "1800360",
    "end": "1806000"
  },
  {
    "text": "something a lot like this queue you can imagine that you have a queue of work right you have four threads threads one",
    "start": "1806000",
    "end": "1812399"
  },
  {
    "text": "through four or we'll just say one two one through three because it's easier and they're all asking for work off this one",
    "start": "1812399",
    "end": "1820399"
  },
  {
    "text": "this one place you could imagine this exist right and if this thing had a list of items it would do some sort of MW",
    "start": "1820399",
    "end": "1826519"
  },
  {
    "text": "texting right it' have some way to sure that you can't grab the same work twice and then it hands this work to this",
    "start": "1826519",
    "end": "1832519"
  },
  {
    "text": "thread This Thread executes this work while this work get executed on this thread and when it's done it can ask for",
    "start": "1832519",
    "end": "1837960"
  },
  {
    "text": "more work",
    "start": "1837960",
    "end": "1844559"
  },
  {
    "text": "right so that's the effectiveness of it all",
    "start": "1845320",
    "end": "1852320"
  },
  {
    "text": "now how it all works and all that I don't know I've never I've never actually tried to program my own executor my own my own thread runtime so",
    "start": "1852320",
    "end": "1858279"
  },
  {
    "text": "I I I I actually genuinely have no idea how it really works in in practical",
    "start": "1858279",
    "end": "1865799"
  },
  {
    "text": "sense just in a theoretical sense Tokyo does not use green threads either well",
    "start": "1865799",
    "end": "1871480"
  },
  {
    "text": "it it it uses Hardware threads yes but it also has a way to be able to take",
    "start": "1871480",
    "end": "1876720"
  },
  {
    "text": "those Hardware threads and execute tasks on so where does a green thread start",
    "start": "1876720",
    "end": "1881799"
  },
  {
    "text": "and where does a a task stop right like that's the problem it uses a thread pool correct it uses thread pool and pieces",
    "start": "1881799",
    "end": "1887639"
  },
  {
    "text": "of work so it's like what is a what when does it become a green thread versus when is it a",
    "start": "1887639",
    "end": "1893880"
  },
  {
    "text": "uh a just a task like do you see what I'm saying it's like it's a it's a very",
    "start": "1893880",
    "end": "1898960"
  },
  {
    "text": "confusing thing like I said I don't have all the answers to it I just know generally how it works and so it uses a",
    "start": "1898960",
    "end": "1904120"
  },
  {
    "text": "bunch of task tasks and runs them on threads right can I have more work please so it's just like what do you",
    "start": "1904120",
    "end": "1910799"
  },
  {
    "text": "call that thing I don't know what that thing is called implementing a worker queue is a great project by the way I'm sure it's a great one I'm sure it's a",
    "start": "1910799",
    "end": "1916919"
  },
  {
    "text": "great one said jump long jump let's",
    "start": "1916919",
    "end": "1920840"
  },
  {
    "text": "go there you go that's the name of the project um I",
    "start": "1923279",
    "end": "1929840"
  },
  {
    "text": "would say that uh I would like to see Pekka give a much",
    "start": "1929840",
    "end": "1935919"
  },
  {
    "text": "more detailed explanation for this this just sounds like you're not using the type system uh good enough the thing is",
    "start": "1935919",
    "end": "1943120"
  },
  {
    "text": "is that with Zig the type system is opt in rather than rather than forced",
    "start": "1943120",
    "end": "1948840"
  },
  {
    "text": "meaning that you can have a pointer that could be that that could be defined as",
    "start": "1948840",
    "end": "1955240"
  },
  {
    "text": "nothing which means you could get some really bad experiences but you could also say hey",
    "start": "1956279",
    "end": "1964240"
  },
  {
    "text": "this pointer may not exist and I think that's the big thing that I'm seeing right here so if I go to my game objects the most obvious one is this one right",
    "start": "1964240",
    "end": "1970039"
  },
  {
    "text": "here right like I'm saying this pointer does not exist at construction time it",
    "start": "1970039",
    "end": "1975519"
  },
  {
    "text": "is a it is this it is it is potentially a null right now I could probably take",
    "start": "1975519",
    "end": "1982159"
  },
  {
    "text": "this out and make this work a bit better which I probably will but as of right now with how I constructed things I had",
    "start": "1982159",
    "end": "1988000"
  },
  {
    "text": "to do this anyways so there you go all right hey the name the name the",
    "start": "1988000",
    "end": "1995799"
  },
  {
    "text": "name is the primagen",
    "start": "1995799",
    "end": "1999679"
  }
]