[
  {
    "text": "the first thing we do is jump on here and tweet it then we go here let's read",
    "start": "320",
    "end": "5759"
  },
  {
    "text": "this because this is an article designed for me to get excited which one do I do here which one do I do here we're just",
    "start": "5759",
    "end": "11679"
  },
  {
    "text": "not going to do either of them C isn't a programming language anymore okay okay",
    "start": "11679",
    "end": "16840"
  },
  {
    "text": "Phantom derp and I have recently been aligned on a particular subject being extremely angry about cabis and trying",
    "start": "16840",
    "end": "23560"
  },
  {
    "text": "to fix them we when uh where we are not aligned is why we are mad about them",
    "start": "23560",
    "end": "29000"
  },
  {
    "text": "okay okay sounds like someone's trying to integrate with rust and not very happy about it uh he's trying to uh",
    "start": "29000",
    "end": "34840"
  },
  {
    "text": "materially improve the conditions of using C itself as a programming language I'm trying to materially improve the",
    "start": "34840",
    "end": "41160"
  },
  {
    "text": "condition of using literally any language other than c okay okay now you",
    "start": "41160",
    "end": "46760"
  },
  {
    "text": "might reasonably ask what the [ __ ] does your problem have to do with C it wouldn't if C was actually a programming",
    "start": "46760",
    "end": "54120"
  },
  {
    "text": "language okay we're cooking okay there's some cooking going on right here unfortunately it's not and it hasn't",
    "start": "54120",
    "end": "60399"
  },
  {
    "text": "been for a long time I'm curious how one goes from a programming language to not going from a programming language",
    "start": "60399",
    "end": "66640"
  },
  {
    "text": "without itself changing I'm curious about this this isn't about the fact that c is horribly IL defined due to a",
    "start": "66640",
    "end": "73080"
  },
  {
    "text": "billion implementations or completely failed integer hierarchy that stuff sucks but on its own that wouldn't be my",
    "start": "73080",
    "end": "79360"
  },
  {
    "text": "problem okay my problem with C was elevated to a role of prestige and power it's rain so absolute and eternal that",
    "start": "79360",
    "end": "86119"
  },
  {
    "text": "it has completely distorted the way we speak to each other rust and Swift cannot simply speak their native comfort",
    "start": "86119",
    "end": "91280"
  },
  {
    "text": "and comfortable tongues they must wrap themselves in a grotesque Sim simulacra of SE skin and to make their flesh",
    "start": "91280",
    "end": "99040"
  },
  {
    "text": "undulate in the same way it does called it rust I knew it rust makes you just",
    "start": "99040",
    "end": "104880"
  },
  {
    "text": "very angry that things don't act like rust but I also get it uh I hear see I hear some of the ABI problems are kind",
    "start": "104880",
    "end": "110399"
  },
  {
    "text": "of annoying but I thought that's what the whole uh I thought it was kind of a partially solved problem is this not a",
    "start": "110399",
    "end": "115799"
  },
  {
    "text": "partially solved problem isn't there just like a isn't there a repper there must be things I there's probably a huge",
    "start": "115799",
    "end": "120960"
  },
  {
    "text": "set of things that I just simply don't understand I thought it was like kind of a solved problem it's not Russ wearing",
    "start": "120960",
    "end": "127600"
  },
  {
    "text": "CS skin is uh Texas Chainsaw Massacre it is it really is I got into this argument",
    "start": "127600",
    "end": "133160"
  },
  {
    "text": "really I I don't know why this dude is complaining I got into this argument recently okay go on the problem with this is when it comes to ABI stuff I've",
    "start": "133160",
    "end": "138640"
  },
  {
    "text": "never played with the ABI stuff uh it's definitely not solved ABI is unstable across the board ABI compatibility is",
    "start": "138640",
    "end": "144560"
  },
  {
    "text": "not a solved problem okay so it's just it's generally just a sucky problem and so does does rust solve this problem",
    "start": "144560",
    "end": "151319"
  },
  {
    "text": "does rust have a solved 100% guaranteed ABI rust ABI is still unstable I thought",
    "start": "151319",
    "end": "158200"
  },
  {
    "text": "it was unstable I thought I thought it was unstable because I thought that was one of the things is that they guarantee no no formal layout it's not compatible",
    "start": "158200",
    "end": "165560"
  },
  {
    "text": "across compiler versions there are a third party crates like stabby that attempts uh to do that okay okay C is",
    "start": "165560",
    "end": "173000"
  },
  {
    "text": "the linga franka of programming we must all speak C and therefore C is not just a programming language anymore it's a",
    "start": "173000",
    "end": "178440"
  },
  {
    "text": "protocol that every general purpose programming language needs to speak so it's act so actually this kind of is",
    "start": "178440",
    "end": "184360"
  },
  {
    "text": "about the whole C is inscr INS scrutable implementation defined mess thing but",
    "start": "184360",
    "end": "190959"
  },
  {
    "text": "only in so far as it makes this protocol we all have to use even bigger nightmare foreign function interfaces okay let's",
    "start": "190959",
    "end": "197319"
  },
  {
    "text": "get technical you finish designing your new language babby script with the first class support of uh see for babby PA",
    "start": "197319",
    "end": "203920"
  },
  {
    "text": "Hooves and fins an amazing language that's going to completely revolation revolutionize the way cats sheep and",
    "start": "203920",
    "end": "209120"
  },
  {
    "text": "sharks program but now you need to actually make it do something useful you know like take user input or write",
    "start": "209120",
    "end": "214560"
  },
  {
    "text": "output or literally anything observable if you want programs are written in your language to be good little citizens that",
    "start": "214560",
    "end": "220360"
  },
  {
    "text": "work well with major operating systems you need to interact with other operating systems interface I hear that",
    "start": "220360",
    "end": "225959"
  },
  {
    "text": "everything on Linux is just a file so let's open a file all right there we go",
    "start": "225959",
    "end": "231720"
  },
  {
    "text": "here's the man this looks like man paging uh there we go here's this beautiful thing one we got uh little all",
    "start": "231720",
    "end": "238439"
  },
  {
    "text": "these all of this this open at I've never used open at or open at 2 I've",
    "start": "238439",
    "end": "243879"
  },
  {
    "text": "never used any of that those are new ones for me I've never tried that header files why I mean I we let's see I'm",
    "start": "243879",
    "end": "249400"
  },
  {
    "text": "sorry this is babby this is babby script not C where's the babby script interface for Linux Googles what do you mean",
    "start": "249400",
    "end": "254760"
  },
  {
    "text": "there's no babby script interface for Linux oh well sure it's a brand new language but you're going to add one",
    "start": "254760",
    "end": "260440"
  },
  {
    "text": "right okay I guess we have to use what we've been what's been given to us we're",
    "start": "260440",
    "end": "265600"
  },
  {
    "text": "going to need some kind of interface that lets our language call functions that are foreign to it a foreign",
    "start": "265600",
    "end": "271199"
  },
  {
    "text": "function interface as ffi oh I like the sound of that all right for those that don't know this is we've now built up",
    "start": "271199",
    "end": "276840"
  },
  {
    "text": "the basics oh hey there rust H you have a cffi 2 uh and you two Swift even",
    "start": "276840",
    "end": "282479"
  },
  {
    "text": "python what if we kissed parameter passing after the argument uh values",
    "start": "282479",
    "end": "287600"
  },
  {
    "text": "have been computed they are placed either in the registers or pushed onto the stack that is how values are passed at the describing following section okay",
    "start": "287600",
    "end": "294560"
  },
  {
    "text": "beautiful we uh and we were both C I'm not sure what's this is this is this is",
    "start": "294560",
    "end": "300000"
  },
  {
    "text": "a strange one I'm trying to follow along here everyone had to learn to speak C to",
    "start": "300000",
    "end": "305199"
  },
  {
    "text": "talk to the major operating systems and then it let's see and then when it came time to talk to each other uh we",
    "start": "305199",
    "end": "310280"
  },
  {
    "text": "suddenly all already spoke C so why not talk to each other in terms of C2 okay I mean this is actually pretty",
    "start": "310280",
    "end": "316639"
  },
  {
    "text": "reasonable I like I actually really like this description thus far this this this foreign function in business is actually",
    "start": "316639",
    "end": "322919"
  },
  {
    "text": "making I'm now following perfectly oops c is now the lingua franka of",
    "start": "322919",
    "end": "328280"
  },
  {
    "text": "programming oops C see now or now see isn't just a programming language it's a",
    "start": "328280",
    "end": "333360"
  },
  {
    "text": "protocol okay okay yes so apparently basically every language has uh to learn",
    "start": "333360",
    "end": "339440"
  },
  {
    "text": "to talk c a language that is definitely well very well defined and not a mass hallucination what does talking c mean",
    "start": "339440",
    "end": "346120"
  },
  {
    "text": "it means getting descriptions of an interface types and functions in the form of a c header and somehow matching",
    "start": "346120",
    "end": "351199"
  },
  {
    "text": "the layouts of those types doing some stuff with linkers and resolving function symbol pointers calling those functions with an appropriate ABI like",
    "start": "351199",
    "end": "358080"
  },
  {
    "text": "putting args in the right registers well we've got a few problems here you can't actually write a c parser C doesn't have",
    "start": "358080",
    "end": "365759"
  },
  {
    "text": "an ABI or even defined type layouts okay okay maybe I don't understand I'm sure",
    "start": "365759",
    "end": "371720"
  },
  {
    "text": "this will become clear I'm sure this is going to this is ludicrous what will be next forcing x86 with x86 with Intel",
    "start": "371720",
    "end": "379080"
  },
  {
    "text": "CPUs yeah sounds like skill issues I don't know yes I'm genuinely asserting that c parsing C is basically impossible",
    "start": "379080",
    "end": "386800"
  },
  {
    "text": "but wait there's a lot of tools that read C headers like rust binding nope B genen uses lib clang to parse C and C++",
    "start": "386800",
    "end": "393039"
  },
  {
    "text": "header files to modify how B genen searches for lib clang see the clang CIS documentation for more details on how B",
    "start": "393039",
    "end": "399720"
  },
  {
    "text": "genen uses lib claying see the B genen users guide anyone who spends much time trying to par see optionally Plus+",
    "start": "399720",
    "end": "406520"
  },
  {
    "text": "header files quickly says uh actually [ __ ] that and ask C++ compiler to do it",
    "start": "406520",
    "end": "411720"
  },
  {
    "text": "keep in mind that meaningfully parsing a c header is more than just parsing you need to resolve include type defs and",
    "start": "411720",
    "end": "417840"
  },
  {
    "text": "macros too so now you need need to implement all of the platform's header resolution logic and somehow figure out",
    "start": "417840",
    "end": "423840"
  },
  {
    "text": "what things are defined in the environment you care about oh yeah that would be that would be that would be slightly tough this would be slightly",
    "start": "423840",
    "end": "430199"
  },
  {
    "text": "tough and if let's take a really extreme example of Swift it has basically everything going for it in terms of c",
    "start": "430199",
    "end": "437080"
  },
  {
    "text": "interop and resources it's a language developed by Apple effectively replaced Objective C by the way Objective C",
    "start": "437080",
    "end": "442199"
  },
  {
    "text": "terrible language terrible language as a primary language for divining uh and using system apis on its own platform in",
    "start": "442199",
    "end": "448680"
  },
  {
    "text": "doing so it has in my opinion taken the notion of ABI stability and design further than anyone else it's also one",
    "start": "448680",
    "end": "455280"
  },
  {
    "text": "of the most hardcore ffi supporting languages I've ever seen it can natively import that's so many that's so many",
    "start": "455280",
    "end": "462720"
  },
  {
    "text": "options right there is there objective C++ there has to be please God no there",
    "start": "462720",
    "end": "469319"
  },
  {
    "text": "has to be headers and will produce a nice native Swift interface with types getting automatically bridged to their",
    "start": "469319",
    "end": "474599"
  },
  {
    "text": "Swift equivalence at the boundary often transparently due to the types having identical abis",
    "start": "474599",
    "end": "480080"
  },
  {
    "text": "good old MPP files is that what it is uh Swift also developed by many of the same",
    "start": "480080",
    "end": "486800"
  },
  {
    "text": "people at Apple who built and maintained clang in llvm straight up yeah that's Chris lner he's also doing Mojo right",
    "start": "486800",
    "end": "492680"
  },
  {
    "text": "now straight up uh World leading experts in C and it's spawn one of those people Doug Gregor let's see what his opinion",
    "start": "492680",
    "end": "499240"
  },
  {
    "text": "of cffi is of all let's see all of this is a reason that Swift uses CL internally to handle the C++ ABI that",
    "start": "499240",
    "end": "506360"
  },
  {
    "text": "way we're not chasing every new ABI impacting attribute cling ads so this Doug fella agrees agrees with the idea",
    "start": "506360",
    "end": "512959"
  },
  {
    "text": "that we should be just use clang uh well [ __ ] uh not even Swift has the stomach for this more stuff so what do you do if",
    "start": "512959",
    "end": "520479"
  },
  {
    "text": "you absolutely positively do not want to have a c compiler parsing in resolved headers at compile time you hand",
    "start": "520479",
    "end": "526040"
  },
  {
    "text": "translate to those bad boys in in 64- t oror t right I64 long right uh oh no",
    "start": "526040",
    "end": "534279"
  },
  {
    "text": "what's a long nobody knows what a long is does anybody know how much is in a Long versus a long long what about an",
    "start": "534279",
    "end": "540640"
  },
  {
    "text": "unsigned long long what about a long short can you have a short long is a short long and int platform dependent I",
    "start": "540640",
    "end": "546720"
  },
  {
    "text": "know it's platform dependent that's that's the problem is it's just it's crazy C doesn't actually have an AVM",
    "start": "546720",
    "end": "552399"
  },
  {
    "text": "okay well no big surprise here the integer types in C were designed to uh to be wobby wobbly sized for portability",
    "start": "552399",
    "end": "558560"
  },
  {
    "text": "and are in fact wobbly sized like okay we can punt the charbit being weird but that still doesn't help us know what the",
    "start": "558560",
    "end": "565160"
  },
  {
    "text": "size and the line of a is this has always been I've always been confused by this I'm sure there's a well-defined",
    "start": "565160",
    "end": "571040"
  },
  {
    "text": "very well understood what a long is supposed to be I just don't know what it is uh I know metam chat does move fast",
    "start": "571040",
    "end": "578200"
  },
  {
    "text": "but wait there's a standardized calling convention and abis for each platform there are and they usually Define the",
    "start": "578200",
    "end": "583560"
  },
  {
    "text": "layouts of key Primitives in C and some of them don't just Define the calling conventions in terms of C types side",
    "start": "583560",
    "end": "589160"
  },
  {
    "text": "eyes AMD 64 cisv cis5 okay calm down uh",
    "start": "589160",
    "end": "595519"
  },
  {
    "text": "okay but there's a nasty problem the architecture doesn't find the API no not the OS enti either we've uh got to go",
    "start": "595519",
    "end": "602839"
  },
  {
    "text": "all in on a specific triple uh Target triple like x86 64 pc windows ganu not",
    "start": "602839",
    "end": "608959"
  },
  {
    "text": "to be mistaken with x86 64 pc windows msvc how many of those could there",
    "start": "608959",
    "end": "615720"
  },
  {
    "text": "be 176 triples I was originally going to include them all for the uh visual gag",
    "start": "615720",
    "end": "621399"
  },
  {
    "text": "impact but it's literally too many for even that that's so many abis it is a lot of abis this is a lot of abis this",
    "start": "621399",
    "end": "628720"
  },
  {
    "text": "is quite the nightmare actually uh okay still a language still a language I let's see uh and we haven't gotten into",
    "start": "628720",
    "end": "635760"
  },
  {
    "text": "all the different calling conventions like standard call versus Fast call versus aapcs versus aapcs VP vfp well at",
    "start": "635760",
    "end": "643040"
  },
  {
    "text": "least all of these abis and calling conventions and whatnot are definitely available in a nice machine readable",
    "start": "643040",
    "end": "648360"
  },
  {
    "text": "format that everyone can use PDF uh PDFs full of human",
    "start": "648360",
    "end": "653440"
  },
  {
    "text": "Pros okay well at least the major C compilers agree by the way a PDF it just",
    "start": "653440",
    "end": "658680"
  },
  {
    "text": "sounds like the world's worst version of being able to parse out things who chose PDFs like this out of all things to do",
    "start": "658680",
    "end": "664920"
  },
  {
    "text": "you think there would at least minimally be something that's not full of human Pros subu woo yeah take it out does not",
    "start": "664920",
    "end": "671519"
  },
  {
    "text": "equal kids I know don't worry we're not taking out the kids um okay well at least a major C compilers agree on abis",
    "start": "671519",
    "end": "677399"
  },
  {
    "text": "for a particular triple Target like uh okay sure there's a weird Jank C compilers but clang and GC that's my ffi",
    "start": "677399",
    "end": "684160"
  },
  {
    "text": "ABI Checker running on x64 Ubuntu 2004 a pretty dang major and well uh behaved",
    "start": "684160",
    "end": "689680"
  },
  {
    "text": "platform all it's testing here is some very boring situations where some integer arguments get past by value",
    "start": "689680",
    "end": "694959"
  },
  {
    "text": "between two static lib compiled by clang and GCC and it fails yeah clang and GCC",
    "start": "694959",
    "end": "700360"
  },
  {
    "text": "can't even agree on the API of an INT 128 on x864 Linux okay I take back",
    "start": "700360",
    "end": "706240"
  },
  {
    "text": "everything I said this sounds like an this sounds like a nightmare this sounds just incredibly unfun because I mean",
    "start": "706240",
    "end": "711800"
  },
  {
    "text": "I've built some protocols but at least like anytime you're building protocols everything's just like ah we do we do",
    "start": "711800",
    "end": "718800"
  },
  {
    "text": "big end en coding uh big Indian and that's that it's easy it's simple all",
    "start": "718800",
    "end": "724000"
  },
  {
    "text": "you have to do is just go nothing nothing hard about it this one's just like and they're all",
    "start": "724000",
    "end": "730160"
  },
  {
    "text": "mismatched imagine like just the nightmare of hand programming in all of",
    "start": "730160",
    "end": "735279"
  },
  {
    "text": "those little oopsy daisies Zig is the best C compiler Zig is literally the best C compiler it is literally the best",
    "start": "735279",
    "end": "742839"
  },
  {
    "text": "SE compiler hey Prime see you on May 9th hey I'll see you on May 9th in Brazil my friend thank you Mario",
    "start": "742839",
    "end": "749880"
  },
  {
    "text": "we're going to be so we're going to be so in there so in there in Brazil May 9th uh let's see okay so that's wild I",
    "start": "749880",
    "end": "756240"
  },
  {
    "text": "wrote this thing to thebug uh to check for mistakes in Russ SE I didn't expect to find inconsistencies between the two",
    "start": "756240",
    "end": "761519"
  },
  {
    "text": "major C compilers on one of the most important and well trodden abis abis are",
    "start": "761519",
    "end": "766800"
  },
  {
    "text": "lies I wonder what I wonder how Zig does all the things it does because isn't Zig Zig is like the best of all of them",
    "start": "766800",
    "end": "772600"
  },
  {
    "text": "isn't it isn't that like the thing that Zig is known for being the most convenient on is that it makes life it",
    "start": "772600",
    "end": "778560"
  },
  {
    "text": "makes life easy with C it's a lack of Building Solutions to discover details oh interesting wait Zig uses clang oh",
    "start": "778560",
    "end": "785800"
  },
  {
    "text": "God Zig just uses clang oh no uh let's see how do you interpret how do you",
    "start": "785800",
    "end": "791279"
  },
  {
    "text": "interp interp interoperate with this mess well first the option is to completely surrender and soulbound your",
    "start": "791279",
    "end": "797160"
  },
  {
    "text": "language to with C which may be uh write your own compiler runtime and C++ so to speak C natively have your codin just",
    "start": "797160",
    "end": "804040"
  },
  {
    "text": "amid C++ so the user needs a c compiler anyways build your own compiler on top of a established major SE compiler GCC",
    "start": "804040",
    "end": "811000"
  },
  {
    "text": "or clay but even these only take you so far Because unless your language is literally exposing unsigned long long",
    "start": "811000",
    "end": "816920"
  },
  {
    "text": "you're going to inherent sees big portability mess this brings us to the second uh",
    "start": "816920",
    "end": "823079"
  },
  {
    "text": "option lie cheat and steal this is a good option this is a good option right here A bunch of if statements you're",
    "start": "823079",
    "end": "828760"
  },
  {
    "text": "going to have more if statements than an llm right this is going to be wild if it's all going to be a dumpster fire anyways you might as well start hand",
    "start": "828760",
    "end": "835040"
  },
  {
    "text": "translating the type and interface definitions into your language that's basically what we do in Rust all day",
    "start": "835040",
    "end": "840639"
  },
  {
    "text": "every day like yeah people use rust bind gen and friends to automate some of this stuff but a lot of the time the",
    "start": "840639",
    "end": "846360"
  },
  {
    "text": "definitions just checked uh in or hand tweaked because life is too short to try to get someone's weird bespoke SE build",
    "start": "846360",
    "end": "853600"
  },
  {
    "text": "system working portably nice hey rust what's an INT Max te I've never heard an INT Max te okay that's a new one this is",
    "start": "853600",
    "end": "861600"
  },
  {
    "text": "a new one for me never heard of an INT maxt cool end of story hey Nim what's a long long N64 cool end of story a lot of",
    "start": "861600",
    "end": "869759"
  },
  {
    "text": "code has completely given up on keeping C in the loop and has started hardcoding the definitions of core types after all",
    "start": "869759",
    "end": "875680"
  },
  {
    "text": "they're clearly just part of the platforms ABI what are they going to do change the size of in Max that's obviously an ABI breaking change oh yeah",
    "start": "875680",
    "end": "884040"
  },
  {
    "text": "what was the thing uh Fantom derp was working on again we talked about how int Max can't be changed because of some",
    "start": "884040",
    "end": "889160"
  },
  {
    "text": "binary somewhere would lose its mind and use the wrong call convention return convention if we changed it from EG long",
    "start": "889160",
    "end": "894959"
  },
  {
    "text": "long 64-bit integer to 128 oh int Max",
    "start": "894959",
    "end": "901839"
  },
  {
    "text": "is I didn't catch that int Max is a 64-bit one but there's a 128 bit oh that",
    "start": "901959",
    "end": "908560"
  },
  {
    "text": "hurts that has to hurt that just has to hurt a little bit emotionally to know that int Max is not the actual",
    "start": "908560",
    "end": "915199"
  },
  {
    "text": "Max it just has to hurt but there is a there is a way that",
    "start": "915199",
    "end": "923040"
  },
  {
    "text": "if the code opted into something we'd upgrade the function calls for newer applications while leaving the older",
    "start": "923040",
    "end": "928199"
  },
  {
    "text": "applications intact let's craft some code that tests the idea of transparent aliases can help with ABI lots of [ __ ]",
    "start": "928199",
    "end": "936079"
  },
  {
    "text": "uh so like yeah their article is really good and working on some very real and very important problems but how would",
    "start": "936079",
    "end": "942639"
  },
  {
    "text": "programming languages ever deal with this change how would you specify which version of int maxt you interop",
    "start": "942639",
    "end": "947720"
  },
  {
    "text": "interoperate with if some C header uh you have referred to int maxt which is defined using man this does sound awful",
    "start": "947720",
    "end": "955720"
  },
  {
    "text": "I will agree this sounds awful this sounds like an actual int kind of Max it's actually int was the maxcore T",
    "start": "955720",
    "end": "964639"
  },
  {
    "text": "I can feel the author's frustra frustration in the writing you can feel it you can feel this this does sound like just an absolute nightmare see",
    "start": "964639",
    "end": "970959"
  },
  {
    "text": "these are some things that I'm happy that I don't you know there's there's a level of going down the chain and and",
    "start": "970959",
    "end": "977639"
  },
  {
    "text": "learning more and more about how things work and there's just a point where you",
    "start": "977639",
    "end": "983040"
  },
  {
    "text": "hit that it just feels just disgusting right and I'm happy I haven't hit that point you know",
    "start": "983040",
    "end": "989440"
  },
  {
    "text": "I'm happy that right now we're out here and we're just simply doing a real-time asy engine in and go okay just making",
    "start": "989440",
    "end": "997360"
  },
  {
    "text": "X's move just feels really really good okay because I get to define the TCP protocol I get to define the server I",
    "start": "997360",
    "end": "1004120"
  },
  {
    "text": "get to I get to do everything it just feels good for me okay I don't have to worry about everything else that feels",
    "start": "1004120",
    "end": "1010440"
  },
  {
    "text": "good this on the other hand this does not this does not feel good reject modernity return to Asom I think we need",
    "start": "1010440",
    "end": "1016720"
  },
  {
    "text": "to return to Asom the primary mechanisms we have been talking about uh platforms with different abis are Target triples",
    "start": "1016720",
    "end": "1022920"
  },
  {
    "text": "you know uh what's one triple triple what what's one target triple yes unknown there's also unknown unknown",
    "start": "1022920",
    "end": "1029918"
  },
  {
    "text": "isn't there uh Linux ganu you know what that covers basically every major desktop and server Linux drro for the",
    "start": "1029919",
    "end": "1035520"
  },
  {
    "text": "last 20 years right now you can ostensibly compile for the Target and get the binary that just works on all those platforms I do not believe this",
    "start": "1035520",
    "end": "1041959"
  },
  {
    "text": "would be the case if someone program if if some programs were compiled believing in Max 64 was larger than in uh 64 4 T",
    "start": "1041959",
    "end": "1049799"
  },
  {
    "text": "so it's just an agreed on convention okay would any platform that tries to make this change become a new Target",
    "start": "1049799",
    "end": "1055000"
  },
  {
    "text": "triple unknown ganu too would you even uh would that even be enough if anything",
    "start": "1055000",
    "end": "1060440"
  },
  {
    "text": "compiled against ganu uh unknown Linux Gano uh was allowed to run on it oh",
    "start": "1060440",
    "end": "1066720"
  },
  {
    "text": "dang changing signatures without breaking ABI so what so what does c never get to improve anymore no but also",
    "start": "1066720",
    "end": "1074240"
  },
  {
    "text": "yes because they've shipped bad designs making ABI compatible changes is honestly a bit of an art form part of",
    "start": "1074240",
    "end": "1080280"
  },
  {
    "text": "the art is preparedness specifically it is much easier to make changes that don't break abis if you're prepared for",
    "start": "1080280",
    "end": "1086480"
  },
  {
    "text": "them as Phantom der's article notes things like lib uh G libc the G is the",
    "start": "1086480",
    "end": "1091880"
  },
  {
    "text": "ganu in x86 unknown Linux ganu uh have long understood this and use mechanisms",
    "start": "1091880",
    "end": "1097120"
  },
  {
    "text": "like symbol versioning to update signatures and apis while keeping the old versions round for anyone compiled against older versions of itself oh",
    "start": "1097120",
    "end": "1106039"
  },
  {
    "text": "clever you can add more pluses to see Sol the problem I agree if you put more",
    "start": "1106039",
    "end": "1111280"
  },
  {
    "text": "symbols more pluses should just mean more more fixes and then your file extension just keeps growing in peace I",
    "start": "1111280",
    "end": "1117360"
  },
  {
    "text": "think that's actually a reasonable that's a reasonable answer but if you yeah if you hit four if you hit four",
    "start": "1117360",
    "end": "1122520"
  },
  {
    "text": "pluses is it C when you accidentally hit C or does it just keep on being C with",
    "start": "1122520",
    "end": "1127720"
  },
  {
    "text": "many pluses I don't know how this works we're moving to D that's it we're",
    "start": "1127720",
    "end": "1133600"
  },
  {
    "text": "moving to D so if you have int 32t my rad symbol int 32t you tell the compiler to export this my rad symbol V1 and",
    "start": "1133600",
    "end": "1140640"
  },
  {
    "text": "anyone who compiles against your headers will write my rad symbol in their code but link against my rad symbol V1 then",
    "start": "1140640",
    "end": "1146480"
  },
  {
    "text": "you write then you decide to actually it should be N64 and you make it my rad symbol N64 64 as my rad symbol V2 but",
    "start": "1146480",
    "end": "1154120"
  },
  {
    "text": "keep around the old definition my rad symbol V1 anyone who compiles against newer versions of your headers will happily use the V2 symbol and anyone who",
    "start": "1154120",
    "end": "1160679"
  },
  {
    "text": "compiled against the older versions will continue to use V1 I hate backwards",
    "start": "1160679",
    "end": "1167440"
  },
  {
    "text": "compatibility okay it's just the worst except you still have compatibility Hazard anyone who",
    "start": "1167440",
    "end": "1172640"
  },
  {
    "text": "compiles against your new headers can't link against the old version of your library the V1 version of your library simply doesn't have the V2 symbol so if",
    "start": "1172640",
    "end": "1179960"
  },
  {
    "text": "you want to hot new features you need to accept incompatibility with older outdated",
    "start": "1179960",
    "end": "1185559"
  },
  {
    "text": "systems this isn't a deal breaker though it just makes platform vendors",
    "start": "1185559",
    "end": "1191600"
  },
  {
    "text": "sad agreed it just makes them sad that no one gets to use the thing they spent",
    "start": "1191919",
    "end": "1197120"
  },
  {
    "text": "so much time working on right away you have to ship a shiny new feature and then sit on your hands for several years",
    "start": "1197120",
    "end": "1202200"
  },
  {
    "text": "while everyone waits for it to be common SL mature enough that people are willing to depend on it and break support for",
    "start": "1202200",
    "end": "1207360"
  },
  {
    "text": "older platforms or willing to implement Dynamic checking and fall back crazy if",
    "start": "1207360",
    "end": "1212760"
  },
  {
    "text": "you really get serious about letting people upgrade right away then you're talking about forward compatibility this lets older versions of things uh somehow",
    "start": "1212760",
    "end": "1220200"
  },
  {
    "text": "work with newer features that they have no conception of changing types without breaking apis okay so let's see okay so",
    "start": "1220200",
    "end": "1226200"
  },
  {
    "text": "we can change the signature of a function what else can we change can we change the type layouts yes but also no",
    "start": "1226200",
    "end": "1231400"
  },
  {
    "text": "it depends on your how you expose the type one of the genuinely fantastic features of C is that it lets you",
    "start": "1231400",
    "end": "1236480"
  },
  {
    "text": "distinguish between a type which has a known layout and one that doesn't if you only forward declare a type in C headers",
    "start": "1236480",
    "end": "1243840"
  },
  {
    "text": "then any user code that interacts with that type isn't allowed to know the layout of the type and uh let's see hold",
    "start": "1243840",
    "end": "1251360"
  },
  {
    "text": "on with that type isn't allowed to know the layout of that type and has to",
    "start": "1251360",
    "end": "1256480"
  },
  {
    "text": "handle it opaquely behind a pointer at all times okay so you can make API like my",
    "start": "1256480",
    "end": "1263080"
  },
  {
    "text": "rad type pointer make vow and use use vow myad type and then the same symbol",
    "start": "1263080",
    "end": "1268360"
  },
  {
    "text": "versioning trick to expose make VA version one make uh use value one okay symbol and at any time you want the",
    "start": "1268360",
    "end": "1274440"
  },
  {
    "text": "change the layout you bump the version on everything that interacts with that type similarly you keep around myad type",
    "start": "1274440",
    "end": "1280080"
  },
  {
    "text": "V1 and myad type V2 in some type defs uh to make sure people use the right one",
    "start": "1280080",
    "end": "1288640"
  },
  {
    "text": "you know sometimes I don't think I realize just how much of of the shoulders we stand on you know what I",
    "start": "1288919",
    "end": "1295559"
  },
  {
    "text": "mean like I've I again I've never worried about any of these things right now like even with this thing we're",
    "start": "1295559",
    "end": "1300960"
  },
  {
    "text": "building the realtime render if your version doesn't match my version I just don't let you connect I just say sorry",
    "start": "1300960",
    "end": "1307039"
  },
  {
    "text": "you're not allowed to be here get the hell out of here it's just easier because things line up correctly I know",
    "start": "1307039",
    "end": "1312840"
  },
  {
    "text": "it's actually wild how how much of our life is built on that this is actually",
    "start": "1312840",
    "end": "1318880"
  },
  {
    "text": "shocking how much of the life is built on this uh nice we have to change type layout uh between versions right well mostly if multiple things build on top",
    "start": "1318880",
    "end": "1326000"
  },
  {
    "text": "of your library and then starts talking to each other in terms of your opaque types bad things can start to",
    "start": "1326000",
    "end": "1331240"
  },
  {
    "text": "happen uh lib one uh makes an API that takes in my rad type pointer and calls",
    "start": "1331240",
    "end": "1336559"
  },
  {
    "text": "use vow with lib two that uh calls make vow and passes the result to lib one uh oh yeah I know I was just thinking about",
    "start": "1336559",
    "end": "1342960"
  },
  {
    "text": "that if lib 1 and lib two are even compiled against the version of your library then make Val one can get fed to",
    "start": "1342960",
    "end": "1348679"
  },
  {
    "text": "use Val to yikes you have two options for dealing with this say that it is forbidden chastise anyone who does it",
    "start": "1348679",
    "end": "1354840"
  },
  {
    "text": "anyways be sad two design myad type in forward compatible way so that mixing is",
    "start": "1354840",
    "end": "1361320"
  },
  {
    "text": "fine okay common forward compatible tricks include uh reserving unused",
    "start": "1361320",
    "end": "1366640"
  },
  {
    "text": "fields for future version uses nice just put some padding in there",
    "start": "1366640",
    "end": "1372080"
  },
  {
    "text": "uh having a common prefix uh to all versions of myad type that lets you check uh what version you're working",
    "start": "1372080",
    "end": "1377640"
  },
  {
    "text": "with have self- siiz Fields so older versions can skip over new parts well those all sound",
    "start": "1377640",
    "end": "1384799"
  },
  {
    "text": "horrible hm that sounds just awful Microsoft is genuinely a master of this Ford compatibility [ __ ] to the extent",
    "start": "1384799",
    "end": "1391600"
  },
  {
    "text": "that they even keep stuff they really care about uh layout compatible between architectures an example I've seen",
    "start": "1391600",
    "end": "1396799"
  },
  {
    "text": "recently have been working with the uh mini dump handle data stream in mini dump uh API set header this API has",
    "start": "1396799",
    "end": "1404919"
  },
  {
    "text": "described the version list of values the list starts with this type type Mini dump handle data stream size of header",
    "start": "1404919",
    "end": "1410760"
  },
  {
    "text": "size of descriptor number of descriptors reserved nice they got an extra four bytes of",
    "start": "1410760",
    "end": "1416159"
  },
  {
    "text": "oopsies the size of the mini dump handle uh data stream itself if they ever need to add more fields to the end that's",
    "start": "1416159",
    "end": "1422360"
  },
  {
    "text": "fine because older versions can use this value to detect the version of the header and also skip over any Fields",
    "start": "1422360",
    "end": "1427400"
  },
  {
    "text": "they don't know about size of descriptor uh is the size of each element in the array once again this lets you know what",
    "start": "1427400",
    "end": "1433080"
  },
  {
    "text": "version of the elements you have and skip over any Fields you don't know about the number of descriptors is an array length length reserved is some",
    "start": "1433080",
    "end": "1439720"
  },
  {
    "text": "extra memory if they decide to reserve in the header let's see in the header anyways mini dump set api. is extremely",
    "start": "1439720",
    "end": "1446440"
  },
  {
    "text": "uh meticulous about never having padding anywhere because padding bytes have unspecified values and it's serialized",
    "start": "1446440",
    "end": "1453159"
  },
  {
    "text": "binary format or file format I expect they added this field to make the struct have the size that's a multiple of eight",
    "start": "1453159",
    "end": "1460039"
  },
  {
    "text": "so that there wouldn't be any question about whether the element of the array needed padding after the header wow",
    "start": "1460039",
    "end": "1465720"
  },
  {
    "text": "that's talking about that's taking compatibility serious oh that makes sense yeah because you wouldn't I see what I I see because this",
    "start": "1465720",
    "end": "1472559"
  },
  {
    "text": "would be 64 uh 64 bits 64 bits so instead of having 96 they went to",
    "start": "1472559",
    "end": "1479039"
  },
  {
    "text": "128 ladies gentlemen just use Zig I don't think that's the problem",
    "start": "1479039",
    "end": "1485559"
  },
  {
    "text": "here this is wild okay so Microsoft's pretty good at this indeed Microsoft actually had a reason to use versioning",
    "start": "1485559",
    "end": "1491840"
  },
  {
    "text": "schema and defines two versions of an array element all right so here's one that has this one has",
    "start": "1491840",
    "end": "1500320"
  },
  {
    "text": "two extra objects right here nice uh the actual details of these",
    "start": "1500640",
    "end": "1505799"
  },
  {
    "text": "trucks isn't terribly interesting uh other than there are only let's see they only change it by adding fields to the",
    "start": "1505799",
    "end": "1511240"
  },
  {
    "text": "end have a type def for the latest one reserve some uh some maybe padding again",
    "start": "1511240",
    "end": "1516880"
  },
  {
    "text": "RVA uh is a ulong 32 uh this is an absolutely indestructible forward combat uh compar",
    "start": "1516880",
    "end": "1524000"
  },
  {
    "text": "to Behemoth so in other words what they do is they just keep adding fields and then in keep in if I'm reading this",
    "start": "1524000",
    "end": "1530679"
  },
  {
    "text": "correctly and then keep increasing these sizes such that older ones use these",
    "start": "1530679",
    "end": "1535799"
  },
  {
    "text": "earlier ones and newer ones have and skip over the newer fields and the newer ones can skip over these earlier ones",
    "start": "1535799",
    "end": "1542320"
  },
  {
    "text": "and use just the newer Fields impressive uh well it's uh at least it's really robust if you play",
    "start": "1542320",
    "end": "1547799"
  },
  {
    "text": "along with the game and actually manipulate things by reference and use field sizes but hey uh at least it's",
    "start": "1547799",
    "end": "1553200"
  },
  {
    "text": "very clear that there's a game to play at some point you don't have to say you're using this wrong well okay no",
    "start": "1553200",
    "end": "1558320"
  },
  {
    "text": "Microsoft wouldn't uh say that they just do something horrible instead okay what's the horrible instead oh no I see",
    "start": "1558320",
    "end": "1564679"
  },
  {
    "text": "direct X is this where is this where we get hacked oh man now I want to read dang it",
    "start": "1564679",
    "end": "1570600"
  },
  {
    "text": "now I want to read this oh my goodness now now I just want to read all the things okay I'm not terribly familiar",
    "start": "1570600",
    "end": "1575760"
  },
  {
    "text": "with this situation but while looking into historic G breaks I came across this great article in uh lwn lawn uh the",
    "start": "1575760",
    "end": "1584120"
  },
  {
    "text": "the G libc uh s39 AI break I let's I'll be assuming it's accurate as it turns",
    "start": "1584120",
    "end": "1590360"
  },
  {
    "text": "out G libc has broken the ABI of types before at least on the s390 based on the",
    "start": "1590360",
    "end": "1596679"
  },
  {
    "text": "description of this article it was chaos specifically they changed the layout of the saved State type uh used by set jump",
    "start": "1596679",
    "end": "1603559"
  },
  {
    "text": "long jump uh now they weren't combat uh now they weren't complete fools they understood this was an ABI breaking",
    "start": "1603559",
    "end": "1609159"
  },
  {
    "text": "change so they did the responsible symbol versioning thing but jump buff wasn't an opaque type other things were",
    "start": "1609159",
    "end": "1615760"
  },
  {
    "text": "storing instances of this type in line like oh you know Pearl's runtime F and pearl again I know somebody right now",
    "start": "1615760",
    "end": "1623399"
  },
  {
    "text": "whose mom writes Pearl every day and",
    "start": "1623399",
    "end": "1628679"
  },
  {
    "text": "it's like for infrastructure that we all rely on yes way I I I'm actually trying to",
    "start": "1628679",
    "end": "1634880"
  },
  {
    "text": "get her to come on to the show and just tell us about Pearl what is it like",
    "start": "1634880",
    "end": "1641880"
  },
  {
    "text": "writing Pearl uh like to that I know like that level needless to say this",
    "start": "1641880",
    "end": "1647200"
  },
  {
    "text": "relative obscure has wormed itself into many binaries and the ultimate conclusion was that everything in Debian",
    "start": "1647200",
    "end": "1652760"
  },
  {
    "text": "needed to be recompiled ouch this article even discusses the possibility of version bumping libc to cope with",
    "start": "1652760",
    "end": "1658200"
  },
  {
    "text": "this uh the uh s soame bump in the mixed ABI environment like Debian resulted in",
    "start": "1658200",
    "end": "1664360"
  },
  {
    "text": "two lib C's being loaded and completed or competing for effectively the same name space of symbols with resolution",
    "start": "1664360",
    "end": "1671240"
  },
  {
    "text": "and therefore selection of ABI being determined by elf interposition and scope rules it's a nightmare it's",
    "start": "1671240",
    "end": "1676840"
  },
  {
    "text": "possible a worse solution than just telling everyone to rebuild and get on with their lives just get on with their lives uh",
    "start": "1676840",
    "end": "1684240"
  },
  {
    "text": "this article uh let's see is full of lots more great detail I highly recommend it oh man there's so many good",
    "start": "1684240",
    "end": "1689279"
  },
  {
    "text": "things can you really change int Max T I still love the fact that int maxt is is 64 bits this is just so beautiful as far",
    "start": "1689279",
    "end": "1696399"
  },
  {
    "text": "as I'm concerned not really it's just like jump buff it's not an opeg type and that means it's inlined into a ton of",
    "start": "1696399",
    "end": "1702039"
  },
  {
    "text": "random structs assumed to have specific representation by a ton of other languages and compilers and probably part of tons of public interface faces",
    "start": "1702039",
    "end": "1708440"
  },
  {
    "text": "that aren't under the control of lipy Linux or even the Dr maintainers sure lipy can properly do simple versioning",
    "start": "1708440",
    "end": "1714480"
  },
  {
    "text": "tricks to make its a a apis work with the new definition but changing the size of a really basic data type like int Max",
    "start": "1714480",
    "end": "1721080"
  },
  {
    "text": "T is begging for chaos in the larger ecosystem for a platform I'm happy to be proven wrong but as far as I can tell",
    "start": "1721080",
    "end": "1727519"
  },
  {
    "text": "making this change would necessitate a new triple Target and not allow any binary Library built for an old ABI to",
    "start": "1727519",
    "end": "1733200"
  },
  {
    "text": "run on this new triple and you can certainly do the work but I don't envy any dro with does after learning about",
    "start": "1733200",
    "end": "1740000"
  },
  {
    "text": "this I don't envy any of it this article is deepening my hate towards ABI compatibility yeah this is kind of wild",
    "start": "1740000",
    "end": "1747399"
  },
  {
    "text": "this is kind of wild and even then if you have an x64 in problem it's such a",
    "start": "1747399",
    "end": "1752440"
  },
  {
    "text": "fundamental type and has been the size for so long that countless applications may have weird undetectable assumptions",
    "start": "1752440",
    "end": "1758240"
  },
  {
    "text": "about it this is why int is 32bit on x64 even though it was supposed to be 64-bit",
    "start": "1758240",
    "end": "1764679"
  },
  {
    "text": "int was a 32-bit for so long that it's completely hopeless to update software to the new size even though it is uh it",
    "start": "1764679",
    "end": "1772080"
  },
  {
    "text": "was a whole new architecture and Target triple okay so I'm very curious about this CU that's what I always figured",
    "start": "1772080",
    "end": "1778120"
  },
  {
    "text": "that inch should be 64bits on a 64-bit Target so it's not that I thought that",
    "start": "1778120",
    "end": "1783640"
  },
  {
    "text": "was like the whole thing int was supposed to be this this wobbly build make it make it bigger as things got",
    "start": "1783640",
    "end": "1788919"
  },
  {
    "text": "bigger oh my goodness it was a lie all the L this whole time I've been lyed to this is why anytime I use C I use like U",
    "start": "1788919",
    "end": "1796679"
  },
  {
    "text": "64t I do not not use the word long long long long just feels so unreliable a",
    "start": "1796679",
    "end": "1802159"
  },
  {
    "text": "long int can be either 32 or 64 bits I would never do that just just do standard int. and just do just do uint",
    "start": "1802159",
    "end": "1808840"
  },
  {
    "text": "64t how could just the worst don't use uint max I refuse to use something that doesn't specify a bit long long is",
    "start": "1808840",
    "end": "1816039"
  },
  {
    "text": "reliable long is",
    "start": "1816039",
    "end": "1819120"
  },
  {
    "text": "unreliable you guys so funny you can't just go around longing people's logs apparently you can in is platform",
    "start": "1822440",
    "end": "1828760"
  },
  {
    "text": "specific usually it's 32 bits but uh but a long is either 32 or 64 depending on the platform a long long is always 64 uh",
    "start": "1828760",
    "end": "1836559"
  },
  {
    "text": "but so is a un 64t like you said yeah I'd rather use something with a number in it I'm really into just using a",
    "start": "1836559",
    "end": "1842279"
  },
  {
    "text": "number because you can't screw it up because I don't know all the rules and the rules are too hard size T is also",
    "start": "1842279",
    "end": "1849039"
  },
  {
    "text": "really confusing and it's the worst part of size T is like required all over the place for things like vector stuff that",
    "start": "1849039",
    "end": "1855080"
  },
  {
    "text": "is probably the worst part of the whole thing is just like you want to in you want to you want to index into something",
    "start": "1855080",
    "end": "1860480"
  },
  {
    "text": "you better get your size tea out baby it's not really required well it's it's it's not easy to use other types with it",
    "start": "1860480",
    "end": "1867519"
  },
  {
    "text": "yeah I don't get size t i don't get size T what the hell is size t uh anyways again I hope I'm wrong but sometimes you",
    "start": "1867519",
    "end": "1873960"
  },
  {
    "text": "make a m let's see you make a mistake so bad that you just don't get to undo it uh if C was self-contained programming",
    "start": "1873960",
    "end": "1879760"
  },
  {
    "text": "language sure go for it but it's not it's a protocol a bad protocol certainly but the protocol we have to use nonetheless sorry C you conquered the",
    "start": "1879760",
    "end": "1886399"
  },
  {
    "text": "world maybe you don't get uh to have nice things anymore You Don't See England trying to improve itself do you",
    "start": "1886399",
    "end": "1892279"
  },
  {
    "text": "poor England at the end of this whole thing you know England is just hanging out there just not even involved in this",
    "start": "1892279",
    "end": "1899360"
  },
  {
    "text": "whole situation and then England just gets caught with the straight take that England you know what",
    "start": "1899360",
    "end": "1905720"
  },
  {
    "text": "England and shambles America still going America hey did you know that uh in in",
    "start": "1905720",
    "end": "1910919"
  },
  {
    "text": "two years we're about to have our 250th year anniversary so suck on that suck on that America 0.1",
    "start": "1910919",
    "end": "1918399"
  },
  {
    "text": "commonly referred to as UK just catching Strays hey man see to be modernized",
    "start": "1918399",
    "end": "1924399"
  },
  {
    "text": "without sacrificing Legacy to compatibility Not To Break code that has ran for 40 years yeah I mean c is really",
    "start": "1924399",
    "end": "1929760"
  },
  {
    "text": "the worst possible of all situations which I think a lot of people don't appreciate is the fact that we have",
    "start": "1929760",
    "end": "1936440"
  },
  {
    "text": "managed to be able to use a program or use a computer that doesn't break regularly because there is somebody",
    "start": "1936440",
    "end": "1942679"
  },
  {
    "text": "whoever this person is that has to go through and make things work",
    "start": "1942679",
    "end": "1948279"
  },
  {
    "text": "and it's the past that's really holding you down see is like feudalism changing will break a lot of things and some",
    "start": "1948279",
    "end": "1954279"
  },
  {
    "text": "heads chopped yeah it's it's probably so furries could be furries I'm probably going to get I'm probably going to get",
    "start": "1954279",
    "end": "1960120"
  },
  {
    "text": "blocked by more furries by the end of this um all right well hey this was beautiful a furry making the whole world",
    "start": "1960120",
    "end": "1966399"
  },
  {
    "text": "work you know stranger things have been said stranger things have happened okay so 128 bit is a long long long I don't",
    "start": "1966399",
    "end": "1974200"
  },
  {
    "text": "think there's a triple long I mean I wouldn't be surprised if there was a triple long but I feel like if there",
    "start": "1974200",
    "end": "1980559"
  },
  {
    "text": "isn't a triple long we should get a triple long I think you should just be able to keep adding the word long and it",
    "start": "1980559",
    "end": "1986559"
  },
  {
    "text": "just keeps making the int wider cuz honestly that's the only thing and it should be platform dependent make your",
    "start": "1986559",
    "end": "1991880"
  },
  {
    "text": "int longer furries literally prop up modern",
    "start": "1991880",
    "end": "1997840"
  },
  {
    "text": "society it should just keep getting longer okay I think you should kill along I think you should be able to kill",
    "start": "1997840",
    "end": "2003080"
  },
  {
    "text": "along honestly I think you should be able to long long long long long and I think that that should be somewhere",
    "start": "2003080",
    "end": "2009399"
  },
  {
    "text": "between 32 bits if you're on an 8 bit platform all the way up to whatever 64 *",
    "start": "2009399",
    "end": "2015760"
  },
  {
    "text": "4 is that's 2 to the 2 plus 2 to the 8 right two to the or 2 to the 2 plus 2 the 8 2 to the 2 plus 2 to the 6 got 256",
    "start": "2015760",
    "end": "2023360"
  },
  {
    "text": "256 I think it should be between those bits A din Arc mutex long long long long long I have to agree that a a long short",
    "start": "2023360",
    "end": "2030080"
  },
  {
    "text": "that's 48 bits I think a long short for 48 bits is completely reasonable can we all agree that a long short is 48 bits",
    "start": "2030080",
    "end": "2037399"
  },
  {
    "text": "it should be system width minus 1/4 system width so if you do a long short",
    "start": "2037399",
    "end": "2044600"
  },
  {
    "text": "on on an 8bit you get a six-bit integer I think that's the only reasonable I",
    "start": "2044600",
    "end": "2050079"
  },
  {
    "text": "think that's the only reasonable answer okay we're going to use a long short it it just makes sense I think you should",
    "start": "2050079",
    "end": "2055560"
  },
  {
    "text": "be able to get six bit integers I'm long long long long in height you are please no I think this is the only reasonable",
    "start": "2055560",
    "end": "2061800"
  },
  {
    "text": "thing we should be able to mix and match them all hey the name is gosh I'm so happy I don't work in this area a jet",
    "start": "2061800",
    "end": "2067720"
  },
  {
    "text": "and",
    "start": "2067720",
    "end": "2070240"
  }
]