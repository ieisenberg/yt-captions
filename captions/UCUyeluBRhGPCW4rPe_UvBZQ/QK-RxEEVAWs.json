[
  {
    "text": "making sense of Senseless JavaScript",
    "start": "40",
    "end": "1760"
  },
  {
    "text": "features all right I'm pretty excited",
    "start": "1760",
    "end": "3159"
  },
  {
    "text": "about this why does JavaScript have so",
    "start": "3159",
    "end": "4720"
  },
  {
    "text": "many eccentricities like why does this",
    "start": "4720",
    "end": "6600"
  },
  {
    "text": "that's floating Point specification dog",
    "start": "6600",
    "end": "8160"
  },
  {
    "text": "or why does this equal false evaluate to",
    "start": "8160",
    "end": "10240"
  },
  {
    "text": "true that that yo dog I feel like those",
    "start": "10240",
    "end": "12639"
  },
  {
    "text": "aren't very okay granted this is a bit",
    "start": "12639",
    "end": "14719"
  },
  {
    "text": "wild I'll give it to you but this this",
    "start": "14719",
    "end": "16640"
  },
  {
    "text": "is just i e dog i e",
    "start": "16640",
    "end": "20279"
  },
  {
    "text": "754-1985 floating Point specification",
    "start": "20279",
    "end": "23720"
  },
  {
    "text": "how do you not know about",
    "start": "23720",
    "end": "26160"
  },
  {
    "text": "that uh it's it's it's it's",
    "start": "26160",
    "end": "28960"
  },
  {
    "text": "7549 85 right yeah just if you don't if",
    "start": "28960",
    "end": "33920"
  },
  {
    "text": "you don't know just know that know about",
    "start": "33920",
    "end": "35559"
  },
  {
    "text": "your mantisa everybody knows that",
    "start": "35559",
    "end": "37399"
  },
  {
    "text": "anyways there are a lot of mindboggling",
    "start": "37399",
    "end": "39160"
  },
  {
    "text": "decisions in JavaScript that seem",
    "start": "39160",
    "end": "40399"
  },
  {
    "text": "pointless some are misunderstood while",
    "start": "40399",
    "end": "42239"
  },
  {
    "text": "other hilarious While others are direct",
    "start": "42239",
    "end": "44680"
  },
  {
    "text": "missteps in the design regardless it's",
    "start": "44680",
    "end": "46600"
  },
  {
    "text": "worth knowing what these strange things",
    "start": "46600",
    "end": "48280"
  },
  {
    "text": "are and why they are in the language",
    "start": "48280",
    "end": "50280"
  },
  {
    "text": "I'll share what I believe are some",
    "start": "50280",
    "end": "51399"
  },
  {
    "text": "quirkiest things about JavaScript and",
    "start": "51399",
    "end": "52920"
  },
  {
    "text": "make sense them floating Point format",
    "start": "52920",
    "end": "54359"
  },
  {
    "text": "blah blah blah blah i e specification",
    "start": "54359",
    "end": "57000"
  },
  {
    "text": "it's in all languages you can do it in",
    "start": "57000",
    "end": "58440"
  },
  {
    "text": "anything it's fantastic many of has",
    "start": "58440",
    "end": "60199"
  },
  {
    "text": "mocked JavaScript for writing 0.1 Plus",
    "start": "60199",
    "end": "61760"
  },
  {
    "text": "point2 in the console and watching it",
    "start": "61760",
    "end": "63519"
  },
  {
    "text": "resoundingly failed to get3 but this",
    "start": "63519",
    "end": "65198"
  },
  {
    "text": "funny looking value what many developers",
    "start": "65199",
    "end": "67000"
  },
  {
    "text": "might not know is this weird result is",
    "start": "67000",
    "end": "68360"
  },
  {
    "text": "not really javascript's fault JavaScript",
    "start": "68360",
    "end": "70400"
  },
  {
    "text": "is merely adhering to I E standard for",
    "start": "70400",
    "end": "72159"
  },
  {
    "text": "floating Point arithmetic that nearly",
    "start": "72159",
    "end": "73799"
  },
  {
    "text": "every other computer and programming",
    "start": "73799",
    "end": "75119"
  },
  {
    "text": "language uses to represent numbers but",
    "start": "75119",
    "end": "76880"
  },
  {
    "text": "what exactly is a floating Point",
    "start": "76880",
    "end": "78360"
  },
  {
    "text": "arithmetic well computers have to",
    "start": "78360",
    "end": "79720"
  },
  {
    "text": "represent numbers in all sizes from the",
    "start": "79720",
    "end": "81280"
  },
  {
    "text": "distance between planets and even",
    "start": "81280",
    "end": "82600"
  },
  {
    "text": "between atoms do you know that the",
    "start": "82600",
    "end": "84079"
  },
  {
    "text": "distance the distance relatively between",
    "start": "84079",
    "end": "86079"
  },
  {
    "text": "atoms is greater than the distance",
    "start": "86079",
    "end": "87520"
  },
  {
    "text": "between planets is that weird is that",
    "start": "87520",
    "end": "89040"
  },
  {
    "text": "kind of like hard to think about that",
    "start": "89040",
    "end": "90439"
  },
  {
    "text": "you are more empty space than space",
    "start": "90439",
    "end": "92560"
  },
  {
    "text": "space is empty yeah you're even emptier",
    "start": "92560",
    "end": "94600"
  },
  {
    "text": "it's just weird anyways we're going to",
    "start": "94600",
    "end": "95640"
  },
  {
    "text": "we're going to move on we don't need to",
    "start": "95640",
    "end": "96640"
  },
  {
    "text": "know about floating decimals we know all",
    "start": "96640",
    "end": "98040"
  },
  {
    "text": "about this look mantisa look mantisa",
    "start": "98040",
    "end": "100600"
  },
  {
    "text": "said we're going to just move on this is",
    "start": "100600",
    "end": "102439"
  },
  {
    "text": "an old ass problem blah blah blah blah",
    "start": "102439",
    "end": "104520"
  },
  {
    "text": "blah blah we've already done it okay",
    "start": "104520",
    "end": "105960"
  },
  {
    "text": "type coercion let's go on I want to see",
    "start": "105960",
    "end": "107520"
  },
  {
    "text": "some JavaScript problems here JavaScript",
    "start": "107520",
    "end": "109640"
  },
  {
    "text": "is dynamically typed language meaning",
    "start": "109640",
    "end": "111159"
  },
  {
    "text": "that we don't have to declare a",
    "start": "111159",
    "end": "112680"
  },
  {
    "text": "variable's type and it can be changed",
    "start": "112680",
    "end": "114399"
  },
  {
    "text": "later in code the issue comes with being",
    "start": "114399",
    "end": "116560"
  },
  {
    "text": "weakly typed since there are many",
    "start": "116560",
    "end": "118360"
  },
  {
    "text": "occasions where the language will try",
    "start": "118360",
    "end": "119840"
  },
  {
    "text": "try to implicitly convert between types",
    "start": "119840",
    "end": "121640"
  },
  {
    "text": "EG from strings to numbers or falsy to",
    "start": "121640",
    "end": "123799"
  },
  {
    "text": "truthy values this is specifically true",
    "start": "123799",
    "end": "125799"
  },
  {
    "text": "when using the equality operator and the",
    "start": "125799",
    "end": "127960"
  },
  {
    "text": "plus sign operators yes the rules for",
    "start": "127960",
    "end": "129879"
  },
  {
    "text": "type coercion are intricate hard to",
    "start": "129879",
    "end": "132160"
  },
  {
    "text": "remember and even incorrect in certain",
    "start": "132160",
    "end": "134400"
  },
  {
    "text": "situations did you know you want to see",
    "start": "134400",
    "end": "135920"
  },
  {
    "text": "something fun you can do with JavaScript",
    "start": "135920",
    "end": "137560"
  },
  {
    "text": "you can only do this if you're really",
    "start": "137560",
    "end": "139000"
  },
  {
    "text": "prepared okay are you ready for this one",
    "start": "139000",
    "end": "140680"
  },
  {
    "text": "so I'm going to go like this const a",
    "start": "140680",
    "end": "142080"
  },
  {
    "text": "equals string one you're not you don't",
    "start": "142080",
    "end": "143640"
  },
  {
    "text": "know where this is going okay let b",
    "start": "143640",
    "end": "146080"
  },
  {
    "text": "equals 1 are you ready for this one",
    "start": "146080",
    "end": "148760"
  },
  {
    "text": "b++",
    "start": "148760",
    "end": "151760"
  },
  {
    "text": "plus plus a dang it you have to put a",
    "start": "151879",
    "end": "155200"
  },
  {
    "text": "space in there dang it it's ambiguous I",
    "start": "155200",
    "end": "157319"
  },
  {
    "text": "knew you had to put a space in there but",
    "start": "157319",
    "end": "158760"
  },
  {
    "text": "look at all that look at how cool that",
    "start": "158760",
    "end": "160400"
  },
  {
    "text": "looks look at that there go look at this",
    "start": "160400",
    "end": "163319"
  },
  {
    "text": "look at this go how great is that thing",
    "start": "163319",
    "end": "165720"
  },
  {
    "text": "how fun is that isn't that fun you can",
    "start": "165720",
    "end": "167360"
  },
  {
    "text": "do that if you just do enough pluses",
    "start": "167360",
    "end": "170159"
  },
  {
    "text": "that's not a good",
    "start": "170159",
    "end": "172400"
  },
  {
    "text": "thing you're literally [ __ ] for",
    "start": "172400",
    "end": "175680"
  },
  {
    "text": "example JavaScript will CSE a string to",
    "start": "175680",
    "end": "177519"
  },
  {
    "text": "a number when compared with another",
    "start": "177519",
    "end": "179080"
  },
  {
    "text": "number yeah yeah yep true that's because",
    "start": "179080",
    "end": "181480"
  },
  {
    "text": "you did this one so it UPS the coercion",
    "start": "181480",
    "end": "184440"
  },
  {
    "text": "it should convert the two into a string",
    "start": "184440",
    "end": "186560"
  },
  {
    "text": "the inverse applies to the plus sign",
    "start": "186560",
    "end": "188360"
  },
  {
    "text": "operator and it'll try to coers the",
    "start": "188360",
    "end": "189640"
  },
  {
    "text": "number into a string when possible yep",
    "start": "189640",
    "end": "191519"
  },
  {
    "text": "there we go beautiful that's why we",
    "start": "191519",
    "end": "193360"
  },
  {
    "text": "should only use plus sign operators if",
    "start": "193360",
    "end": "195400"
  },
  {
    "text": "we are sure that the values are numbers",
    "start": "195400",
    "end": "197920"
  },
  {
    "text": "this is actually really funny that he",
    "start": "197920",
    "end": "199200"
  },
  {
    "text": "should say that because you may not",
    "start": "199200",
    "end": "200599"
  },
  {
    "text": "realize this but there's this really",
    "start": "200599",
    "end": "202200"
  },
  {
    "text": "funny issue here I'm just going to take",
    "start": "202200",
    "end": "203440"
  },
  {
    "text": "it from this thing is number I'm just",
    "start": "203440",
    "end": "205440"
  },
  {
    "text": "going to yank this one right here but",
    "start": "205440",
    "end": "207599"
  },
  {
    "text": "did you know that if you were to try to",
    "start": "207599",
    "end": "209239"
  },
  {
    "text": "determine if something was a number and",
    "start": "209239",
    "end": "211680"
  },
  {
    "text": "you needed to use say underscores",
    "start": "211680",
    "end": "213959"
  },
  {
    "text": "library is number Nan which is not a",
    "start": "213959",
    "end": "216599"
  },
  {
    "text": "number is a number so just remember that",
    "start": "216599",
    "end": "219080"
  },
  {
    "text": "so you'd have to check is number not and",
    "start": "219080",
    "end": "222640"
  },
  {
    "text": "not is not a number your number so you",
    "start": "222640",
    "end": "224840"
  },
  {
    "text": "got to and those two things together",
    "start": "224840",
    "end": "226599"
  },
  {
    "text": "it's so good it's so good it's beautiful",
    "start": "226599",
    "end": "229519"
  },
  {
    "text": "that's why we should use a plus sign",
    "start": "229519",
    "end": "230599"
  },
  {
    "text": "operator if we are sure that we're using",
    "start": "230599",
    "end": "231959"
  },
  {
    "text": "numbers while concatenating strings it",
    "start": "231959",
    "end": "233400"
  },
  {
    "text": "is better to use concat method or a",
    "start": "233400",
    "end": "235959"
  },
  {
    "text": "template literal interesting okay I",
    "start": "235959",
    "end": "237760"
  },
  {
    "text": "didn't realize there was a concat method",
    "start": "237760",
    "end": "239480"
  },
  {
    "text": "on strings okay I I just I didn't",
    "start": "239480",
    "end": "242560"
  },
  {
    "text": "realize that was a thing was that is",
    "start": "242560",
    "end": "243680"
  },
  {
    "text": "that a real thing oh I didn't know that",
    "start": "243680",
    "end": "245319"
  },
  {
    "text": "interesting I I didn't know that look at",
    "start": "245319",
    "end": "247680"
  },
  {
    "text": "that that's cool spread is greater than",
    "start": "247680",
    "end": "250079"
  },
  {
    "text": "cat I don't think you know what you're",
    "start": "250079",
    "end": "251439"
  },
  {
    "text": "talking",
    "start": "251439",
    "end": "252210"
  },
  {
    "text": "[Music]",
    "start": "252210",
    "end": "254360"
  },
  {
    "text": "about [ __ ] my C dang it my camera dang",
    "start": "254360",
    "end": "257880"
  },
  {
    "text": "it I was vastly underprepared with the",
    "start": "257880",
    "end": "260600"
  },
  {
    "text": "amount of battery that I had left on my",
    "start": "260600",
    "end": "262320"
  },
  {
    "text": "camera okay so the problem with my",
    "start": "262320",
    "end": "264160"
  },
  {
    "text": "camera is that it requires um battery",
    "start": "264160",
    "end": "267720"
  },
  {
    "text": "okay because the the the main sour of",
    "start": "267720",
    "end": "269960"
  },
  {
    "text": "power isn't enough to make it Power by",
    "start": "269960",
    "end": "272199"
  },
  {
    "text": "itself so I had to have like 10 minutes",
    "start": "272199",
    "end": "273880"
  },
  {
    "text": "of battery will last for like an hour",
    "start": "273880",
    "end": "276039"
  },
  {
    "text": "when plugged in let's keep on going the",
    "start": "276039",
    "end": "277880"
  },
  {
    "text": "reason such coercion are in the language",
    "start": "277880",
    "end": "279720"
  },
  {
    "text": "is actually absurd when javascript's",
    "start": "279720",
    "end": "281240"
  },
  {
    "text": "Creator brandan iike was asked what he",
    "start": "281240",
    "end": "283080"
  },
  {
    "text": "would have done differently in",
    "start": "283080",
    "end": "284199"
  },
  {
    "text": "javascript's design his answer was to be",
    "start": "284199",
    "end": "285919"
  },
  {
    "text": "more meticulous in the implementation",
    "start": "285919",
    "end": "287759"
  },
  {
    "text": "early users of the language wanted I",
    "start": "287759",
    "end": "289800"
  },
  {
    "text": "would have avoided some of the",
    "start": "289800",
    "end": "290759"
  },
  {
    "text": "compromises that I made when I first got",
    "start": "290759",
    "end": "292320"
  },
  {
    "text": "early adopters and they said can you",
    "start": "292320",
    "end": "294720"
  },
  {
    "text": "change this Brendan Ike that's actually",
    "start": "294720",
    "end": "297400"
  },
  {
    "text": "so that's the exact same reason why I'm",
    "start": "297400",
    "end": "299039"
  },
  {
    "text": "rewriting Harpoon is literally that",
    "start": "299039",
    "end": "300919"
  },
  {
    "text": "exact same thing the easiest way to",
    "start": "300919",
    "end": "302960"
  },
  {
    "text": "screw up any project is to let people",
    "start": "302960",
    "end": "305759"
  },
  {
    "text": "who are early adopters help shape the",
    "start": "305759",
    "end": "308080"
  },
  {
    "text": "vision you have keep the vision narrow",
    "start": "308080",
    "end": "310120"
  },
  {
    "text": "honestly keep the vision narrow the most",
    "start": "310120",
    "end": "312039"
  },
  {
    "text": "glaring example is the reason why we",
    "start": "312039",
    "end": "313960"
  },
  {
    "text": "have two equality operators double",
    "start": "313960",
    "end": "315759"
  },
  {
    "text": "equals and triple equals well I mean the",
    "start": "315759",
    "end": "317560"
  },
  {
    "text": "nice part about that is that if you",
    "start": "317560",
    "end": "319160"
  },
  {
    "text": "really really really really want to you",
    "start": "319160",
    "end": "321759"
  },
  {
    "text": "can do something like this const C",
    "start": "321759",
    "end": "323800"
  },
  {
    "text": "equals -4 and then because we're using",
    "start": "323800",
    "end": "328360"
  },
  {
    "text": "triple equals we get",
    "start": "328360",
    "end": "331199"
  },
  {
    "text": "a statistically longer equality check",
    "start": "331199",
    "end": "334600"
  },
  {
    "text": "can your language do that can your",
    "start": "334600",
    "end": "336479"
  },
  {
    "text": "language do",
    "start": "336479",
    "end": "338120"
  },
  {
    "text": "that can you do that no you can't in",
    "start": "338120",
    "end": "340960"
  },
  {
    "text": "your language okay your language not",
    "start": "340960",
    "end": "343440"
  },
  {
    "text": "very strong and it's a quality checking",
    "start": "343440",
    "end": "345880"
  },
  {
    "text": "when an earlier JavaScript user prompted",
    "start": "345880",
    "end": "348680"
  },
  {
    "text": "his needs to compare a number to a",
    "start": "348680",
    "end": "350400"
  },
  {
    "text": "string without having to change his code",
    "start": "350400",
    "end": "351919"
  },
  {
    "text": "to make conversion Brendan added a loose",
    "start": "351919",
    "end": "353520"
  },
  {
    "text": "a quality operator to satisfy those",
    "start": "353520",
    "end": "355000"
  },
  {
    "text": "needs yeah that's a mistake but we look",
    "start": "355000",
    "end": "356520"
  },
  {
    "text": "back at it's very easy to be armchair",
    "start": "356520",
    "end": "358560"
  },
  {
    "text": "quarterback imagine he also made the",
    "start": "358560",
    "end": "360479"
  },
  {
    "text": "language in 8 days because he was or",
    "start": "360479",
    "end": "362960"
  },
  {
    "text": "seven days because he was absolutely",
    "start": "362960",
    "end": "364319"
  },
  {
    "text": "required Lura says 10 or seven depending",
    "start": "364319",
    "end": "366160"
  },
  {
    "text": "on who you listen to there are a lot of",
    "start": "366160",
    "end": "367560"
  },
  {
    "text": "other rules governing the loose equality",
    "start": "367560",
    "end": "369599"
  },
  {
    "text": "operator in other statements checking",
    "start": "369599",
    "end": "371080"
  },
  {
    "text": "for a condition that make JavaScript",
    "start": "371080",
    "end": "372720"
  },
  {
    "text": "developers scratch their heads there are",
    "start": "372720",
    "end": "374560"
  },
  {
    "text": "complex tedious and senseless so we",
    "start": "374560",
    "end": "376680"
  },
  {
    "text": "should avoid the loose equality operator",
    "start": "376680",
    "end": "378560"
  },
  {
    "text": "at all costs you know what I really",
    "start": "378560",
    "end": "380440"
  },
  {
    "text": "really really hate the fact that uh null",
    "start": "380440",
    "end": "383560"
  },
  {
    "text": "equals undefined and you see that every",
    "start": "383560",
    "end": "385520"
  },
  {
    "text": "now and then have you ever had a",
    "start": "385520",
    "end": "386599"
  },
  {
    "text": "variable that needs to be either null or",
    "start": "386599",
    "end": "388599"
  },
  {
    "text": "undefined and you know you see code",
    "start": "388599",
    "end": "390599"
  },
  {
    "text": "where someone does something like that",
    "start": "390599",
    "end": "392639"
  },
  {
    "text": "and it just is there it's always there",
    "start": "392639",
    "end": "394919"
  },
  {
    "text": "and I'm always tempted to use it I can't",
    "start": "394919",
    "end": "397759"
  },
  {
    "text": "even help it I want to use it it's like",
    "start": "397759",
    "end": "399680"
  },
  {
    "text": "the one I want to use always so why do",
    "start": "399680",
    "end": "401840"
  },
  {
    "text": "we have two equality operators in the",
    "start": "401840",
    "end": "403240"
  },
  {
    "text": "first place well a lot of factors but we",
    "start": "403240",
    "end": "404560"
  },
  {
    "text": "can point a finger at guy L Steel",
    "start": "404560",
    "end": "406520"
  },
  {
    "text": "co-creator of the scheme programming",
    "start": "406520",
    "end": "408000"
  },
  {
    "text": "language he assured Ike that we could",
    "start": "408000",
    "end": "410039"
  },
  {
    "text": "always add another equality operator",
    "start": "410039",
    "end": "411720"
  },
  {
    "text": "since there were dialects with five",
    "start": "411720",
    "end": "413720"
  },
  {
    "text": "distinct equality operators in the lisp",
    "start": "413720",
    "end": "415479"
  },
  {
    "text": "language this mentality is dangerous and",
    "start": "415479",
    "end": "417280"
  },
  {
    "text": "nowadays all features have to be",
    "start": "417280",
    "end": "418800"
  },
  {
    "text": "rigorously analyzed because we can",
    "start": "418800",
    "end": "420680"
  },
  {
    "text": "always add new features but once they",
    "start": "420680",
    "end": "422879"
  },
  {
    "text": "are in the language they cannot be",
    "start": "422879",
    "end": "424319"
  },
  {
    "text": "removed one thing I actually really",
    "start": "424319",
    "end": "425520"
  },
  {
    "text": "appreciate about o camel every single",
    "start": "425520",
    "end": "427599"
  },
  {
    "text": "type has its own operator and now you're",
    "start": "427599",
    "end": "429800"
  },
  {
    "text": "probably thinking that's super",
    "start": "429800",
    "end": "430680"
  },
  {
    "text": "inconvenient and takes a while to",
    "start": "430680",
    "end": "432160"
  },
  {
    "text": "understand so plus is for integers plus",
    "start": "432160",
    "end": "434199"
  },
  {
    "text": "period is for floating points uh I",
    "start": "434199",
    "end": "436240"
  },
  {
    "text": "forget what string concatenation is",
    "start": "436240",
    "end": "437759"
  },
  {
    "text": "maybe it's that or it's that I can't I",
    "start": "437759",
    "end": "440000"
  },
  {
    "text": "think it's the AD Sign maybe I can't",
    "start": "440000",
    "end": "441599"
  },
  {
    "text": "remember what it all is but it allows it",
    "start": "441599",
    "end": "443680"
  },
  {
    "text": "to be able to make an amazing inference",
    "start": "443680",
    "end": "445919"
  },
  {
    "text": "because if you use any specific syntax",
    "start": "445919",
    "end": "447919"
  },
  {
    "text": "it's able to immediately go okay this",
    "start": "447919",
    "end": "450199"
  },
  {
    "text": "must be of that type it's super cool",
    "start": "450199",
    "end": "452120"
  },
  {
    "text": "okay is it's the exponent sign the",
    "start": "452120",
    "end": "453919"
  },
  {
    "text": "carrot it's super cool I actually really",
    "start": "453919",
    "end": "456000"
  },
  {
    "text": "like that about the language it takes a",
    "start": "456000",
    "end": "457680"
  },
  {
    "text": "little bit of more learning in the",
    "start": "457680",
    "end": "458840"
  },
  {
    "text": "beginning but you get this incredible",
    "start": "458840",
    "end": "461039"
  },
  {
    "text": "way to be able to understand every",
    "start": "461039",
    "end": "462520"
  },
  {
    "text": "single type by the syntax use which",
    "start": "462520",
    "end": "464280"
  },
  {
    "text": "allows you to write significantly less",
    "start": "464280",
    "end": "465960"
  },
  {
    "text": "types while maintaining full typed",
    "start": "465960",
    "end": "467720"
  },
  {
    "text": "language it's pretty cool oh camel my",
    "start": "467720",
    "end": "469680"
  },
  {
    "text": "camel when writing code in JavaScript a",
    "start": "469680",
    "end": "471599"
  },
  {
    "text": "semicolon is required at the end of some",
    "start": "471599",
    "end": "473479"
  },
  {
    "text": "statements including varlet const",
    "start": "473479",
    "end": "475759"
  },
  {
    "text": "expression statements do while continue",
    "start": "475759",
    "end": "477599"
  },
  {
    "text": "break return throw debugger is is it",
    "start": "477599",
    "end": "479680"
  },
  {
    "text": "required after a return is that",
    "start": "479680",
    "end": "484039"
  },
  {
    "text": "true I don't think it's required I think",
    "start": "487520",
    "end": "489720"
  },
  {
    "text": "they have automatic semicolon insertion",
    "start": "489720",
    "end": "491639"
  },
  {
    "text": "isn't that what happens I don't think",
    "start": "491639",
    "end": "493199"
  },
  {
    "text": "it's required I don't think it's",
    "start": "493199",
    "end": "494479"
  },
  {
    "text": "required and I don't think it's required",
    "start": "494479",
    "end": "495759"
  },
  {
    "text": "after debugger either class field",
    "start": "495759",
    "end": "497319"
  },
  {
    "text": "declarations public or private I don't",
    "start": "497319",
    "end": "499080"
  },
  {
    "text": "know if that's true either I'm actually",
    "start": "499080",
    "end": "500919"
  },
  {
    "text": "confused about that that said we don't",
    "start": "500919",
    "end": "502599"
  },
  {
    "text": "necessarily have to insert a semicolon",
    "start": "502599",
    "end": "504280"
  },
  {
    "text": "every time since JavaScript can",
    "start": "504280",
    "end": "505560"
  },
  {
    "text": "automatically insert semicolons in a",
    "start": "505560",
    "end": "507199"
  },
  {
    "text": "process unsurprisingly known as",
    "start": "507199",
    "end": "508599"
  },
  {
    "text": "automatic semic col insertion this is",
    "start": "508599",
    "end": "510479"
  },
  {
    "text": "actually Crazy by the way I I wonder if",
    "start": "510479",
    "end": "512760"
  },
  {
    "text": "this slows down the actual system I'm",
    "start": "512760",
    "end": "514919"
  },
  {
    "text": "curious about that it was intended to",
    "start": "514919",
    "end": "516399"
  },
  {
    "text": "make coding easier for beginners who",
    "start": "516399",
    "end": "518000"
  },
  {
    "text": "didn't know where a semicolon was needed",
    "start": "518000",
    "end": "520440"
  },
  {
    "text": "that is crazy this is the craziest",
    "start": "520440",
    "end": "522200"
  },
  {
    "text": "statement I think I've ever read in my",
    "start": "522200",
    "end": "523880"
  },
  {
    "text": "entire lifetime but it isn't a reliable",
    "start": "523880",
    "end": "526440"
  },
  {
    "text": "feature and we should stick to",
    "start": "526440",
    "end": "527720"
  },
  {
    "text": "explicitly typing where a semicolon goes",
    "start": "527720",
    "end": "529839"
  },
  {
    "text": "linters and formatters add a semicolon",
    "start": "529839",
    "end": "531880"
  },
  {
    "text": "where ASI would but they aren't",
    "start": "531880",
    "end": "533360"
  },
  {
    "text": "completely reliable either ASI can make",
    "start": "533360",
    "end": "535480"
  },
  {
    "text": "some code work but most of the time it",
    "start": "535480",
    "end": "537360"
  },
  {
    "text": "doesn't take the following you can",
    "start": "537360",
    "end": "538680"
  },
  {
    "text": "probably see where the semicolons go but",
    "start": "538680",
    "end": "540120"
  },
  {
    "text": "if we formatted it correctly it would",
    "start": "540120",
    "end": "541360"
  },
  {
    "text": "end up like this yeah but if we feed the",
    "start": "541360",
    "end": "543800"
  },
  {
    "text": "prior code directly to JavaScript all",
    "start": "543800",
    "end": "545560"
  },
  {
    "text": "kind of exceptions would happen is this",
    "start": "545560",
    "end": "547160"
  },
  {
    "text": "true I kind of want to I don't even is",
    "start": "547160",
    "end": "548880"
  },
  {
    "text": "that really",
    "start": "548880",
    "end": "551399"
  },
  {
    "text": "true is that true in today's",
    "start": "554959",
    "end": "558880"
  },
  {
    "text": "world one is not a function oh yeah",
    "start": "561040",
    "end": "563720"
  },
  {
    "text": "interesting okay yeah weird and that's",
    "start": "563720",
    "end": "566399"
  },
  {
    "text": "because uh Vim test and that's because",
    "start": "566399",
    "end": "568800"
  },
  {
    "text": "we don't have a semicolon right",
    "start": "568800",
    "end": "571680"
  },
  {
    "text": "here there we go okay yeah so you it is",
    "start": "571680",
    "end": "574240"
  },
  {
    "text": "required after let statements okay CU or",
    "start": "574240",
    "end": "576279"
  },
  {
    "text": "con statements okay I I don't you know I",
    "start": "576279",
    "end": "578120"
  },
  {
    "text": "don't know all the all the rules but",
    "start": "578120",
    "end": "579600"
  },
  {
    "text": "interesting in conclusion know your",
    "start": "579600",
    "end": "580880"
  },
  {
    "text": "semicolons I just add them always you",
    "start": "580880",
    "end": "582720"
  },
  {
    "text": "know what I'm kind of like a semicolon",
    "start": "582720",
    "end": "584160"
  },
  {
    "text": "Andy if you need semicolons why so many",
    "start": "584160",
    "end": "586079"
  },
  {
    "text": "bottom values what is the what the term",
    "start": "586079",
    "end": "588600"
  },
  {
    "text": "bottom is often used to represent a",
    "start": "588600",
    "end": "590360"
  },
  {
    "text": "value that does not exist or is",
    "start": "590360",
    "end": "591800"
  },
  {
    "text": "undefined I don't think he knows what",
    "start": "591800",
    "end": "593600"
  },
  {
    "text": "bottom means I'm just going to say that",
    "start": "593600",
    "end": "596240"
  },
  {
    "text": "and we're going to move on but why do we",
    "start": "596240",
    "end": "597800"
  },
  {
    "text": "have two kinds of bottom values in",
    "start": "597800",
    "end": "599200"
  },
  {
    "text": "JavaScript regular bottoms and power",
    "start": "599200",
    "end": "600880"
  },
  {
    "text": "bottoms what are they everything in",
    "start": "600880",
    "end": "602120"
  },
  {
    "text": "JavaScript can be considered an object",
    "start": "602120",
    "end": "603760"
  },
  {
    "text": "except the two bottom values null and",
    "start": "603760",
    "end": "605600"
  },
  {
    "text": "undefined despite type of null returning",
    "start": "605600",
    "end": "607600"
  },
  {
    "text": "object attempting to get a property",
    "start": "607600",
    "end": "609480"
  },
  {
    "text": "value from them raises an exception note",
    "start": "609480",
    "end": "611760"
  },
  {
    "text": "that strictly speaking all primitive",
    "start": "611760",
    "end": "613320"
  },
  {
    "text": "values aren't objects but only null and",
    "start": "613320",
    "end": "615800"
  },
  {
    "text": "undefined aren't subjected to boxing we",
    "start": "615800",
    "end": "619040"
  },
  {
    "text": "can think of Nan as a third bottom value",
    "start": "619040",
    "end": "621160"
  },
  {
    "text": "that represents the absence of a number",
    "start": "621160",
    "end": "623440"
  },
  {
    "text": "well funny you should say that the",
    "start": "623440",
    "end": "625279"
  },
  {
    "text": "abundance of bottom values should be",
    "start": "625279",
    "end": "626839"
  },
  {
    "text": "regarded as a design error there isn't a",
    "start": "626839",
    "end": "629120"
  },
  {
    "text": "straightforward reason that explains the",
    "start": "629120",
    "end": "630440"
  },
  {
    "text": "existence of two bottom values but we",
    "start": "630440",
    "end": "632360"
  },
  {
    "text": "can see differences in how JavaScript",
    "start": "632360",
    "end": "634320"
  },
  {
    "text": "employs them undefined is the bottom",
    "start": "634320",
    "end": "636680"
  },
  {
    "text": "value of JavaScript uses by default so",
    "start": "636680",
    "end": "638880"
  },
  {
    "text": "it's considered good practice to use it",
    "start": "638880",
    "end": "640519"
  },
  {
    "text": "exclusively in your code when we Define",
    "start": "640519",
    "end": "642279"
  },
  {
    "text": "a variable without a initial value",
    "start": "642279",
    "end": "644680"
  },
  {
    "text": "attempting to retrieve it assigns the",
    "start": "644680",
    "end": "646600"
  },
  {
    "text": "undefined value Fair null makes it so",
    "start": "646600",
    "end": "649240"
  },
  {
    "text": "sad null is so sad null null is so sad",
    "start": "649240",
    "end": "652959"
  },
  {
    "text": "it's used by JavaScript to denote the",
    "start": "652959",
    "end": "654320"
  },
  {
    "text": "end of a recursive data structure more",
    "start": "654320",
    "end": "655959"
  },
  {
    "text": "specifically used in the Prototype chain",
    "start": "655959",
    "end": "657839"
  },
  {
    "text": "to denote its end most of the time you",
    "start": "657839",
    "end": "660200"
  },
  {
    "text": "can use undefined over null but there",
    "start": "660200",
    "end": "662279"
  },
  {
    "text": "are some occasions where only null can",
    "start": "662279",
    "end": "663839"
  },
  {
    "text": "be used as in the case with object",
    "start": "663839",
    "end": "665680"
  },
  {
    "text": "create which can only create an object",
    "start": "665680",
    "end": "668200"
  },
  {
    "text": "without a prototype passing null using",
    "start": "668200",
    "end": "669880"
  },
  {
    "text": "undefined returns a type eror I love",
    "start": "669880",
    "end": "671800"
  },
  {
    "text": "JavaScript null and undefined both",
    "start": "671800",
    "end": "673480"
  },
  {
    "text": "suffer from path problem when trying to",
    "start": "673480",
    "end": "675320"
  },
  {
    "text": "access properties from the bottom value",
    "start": "675320",
    "end": "677160"
  },
  {
    "text": "as if they were objects exceptions are",
    "start": "677160",
    "end": "679040"
  },
  {
    "text": "raised okay yep fair fair fair you can't",
    "start": "679040",
    "end": "680920"
  },
  {
    "text": "do a type error yep there is no way",
    "start": "680920",
    "end": "682519"
  },
  {
    "text": "around this unless we check for each",
    "start": "682519",
    "end": "684160"
  },
  {
    "text": "property value before trying yep that's",
    "start": "684160",
    "end": "685600"
  },
  {
    "text": "why we have this little nollie operator",
    "start": "685600",
    "end": "687040"
  },
  {
    "text": "Nolly operators are fantastic these are",
    "start": "687040",
    "end": "688639"
  },
  {
    "text": "for losers loser operation way cooler I",
    "start": "688639",
    "end": "691680"
  },
  {
    "text": "said Nan can be considered a bottom",
    "start": "691680",
    "end": "693040"
  },
  {
    "text": "value but it has its own confusing place",
    "start": "693040",
    "end": "694839"
  },
  {
    "text": "in JavaScript since it represents",
    "start": "694839",
    "end": "696200"
  },
  {
    "text": "numbers that aren't actual numbers this",
    "start": "696200",
    "end": "697920"
  },
  {
    "text": "is just again I E floating Point",
    "start": "697920",
    "end": "699880"
  },
  {
    "text": "specification usually done to a failed",
    "start": "699880",
    "end": "701839"
  },
  {
    "text": "string to number conversion which is",
    "start": "701839",
    "end": "703240"
  },
  {
    "text": "also another reason to avoid it Nan has",
    "start": "703240",
    "end": "705680"
  },
  {
    "text": "its own Shenanigans because it isn't",
    "start": "705680",
    "end": "707560"
  },
  {
    "text": "equal to itself to test if a value is",
    "start": "707560",
    "end": "710360"
  },
  {
    "text": "Nan or not use number is Nan classic you",
    "start": "710360",
    "end": "712839"
  },
  {
    "text": "can also just use is Nan it's also a",
    "start": "712839",
    "end": "714519"
  },
  {
    "text": "global function we can check for all",
    "start": "714519",
    "end": "716320"
  },
  {
    "text": "three bottom values with the following",
    "start": "716320",
    "end": "718160"
  },
  {
    "text": "test",
    "start": "718160",
    "end": "720959"
  },
  {
    "text": "nice JavaScript I love it I'm still",
    "start": "721680",
    "end": "723680"
  },
  {
    "text": "going to write my own primage",
    "start": "723680",
    "end": "725120"
  },
  {
    "text": "programming language yeah you should I",
    "start": "725120",
    "end": "726720"
  },
  {
    "text": "know Nan I me but Nan but Nan is in",
    "start": "726720",
    "end": "729240"
  },
  {
    "text": "other languages too you know n Nan's a",
    "start": "729240",
    "end": "731040"
  },
  {
    "text": "real thing increment and decrement okay",
    "start": "731040",
    "end": "733240"
  },
  {
    "text": "as developers we tend to spend more time",
    "start": "733240",
    "end": "734600"
  },
  {
    "text": "reading code rather than writing it I",
    "start": "734600",
    "end": "736079"
  },
  {
    "text": "spend more time writing it whether we",
    "start": "736079",
    "end": "737560"
  },
  {
    "text": "are reading documentation reviewing",
    "start": "737560",
    "end": "738880"
  },
  {
    "text": "someone else's work or checking our own",
    "start": "738880",
    "end": "740360"
  },
  {
    "text": "code code readability will increase our",
    "start": "740360",
    "end": "741959"
  },
  {
    "text": "productivity over brevity in other words",
    "start": "741959",
    "end": "743720"
  },
  {
    "text": "reliability saves time in the long run I",
    "start": "743720",
    "end": "745600"
  },
  {
    "text": "you know I've never really understood",
    "start": "745600",
    "end": "746680"
  },
  {
    "text": "this argument I spend more time writing",
    "start": "746680",
    "end": "748480"
  },
  {
    "text": "code argument tends to also run along",
    "start": "748480",
    "end": "750279"
  },
  {
    "text": "the same veins as you don't need to",
    "start": "750279",
    "end": "751440"
  },
  {
    "text": "learn how to type fast to be proficient",
    "start": "751440",
    "end": "753079"
  },
  {
    "text": "at your job I just probably argue the",
    "start": "753079",
    "end": "755079"
  },
  {
    "text": "opposite at this point that's why I",
    "start": "755079",
    "end": "756519"
  },
  {
    "text": "prefer using plus one or minus one",
    "start": "756519",
    "end": "758199"
  },
  {
    "text": "rather than increment and decrement",
    "start": "758199",
    "end": "759440"
  },
  {
    "text": "operators I've never liked this uh",
    "start": "759440",
    "end": "761120"
  },
  {
    "text": "argument ever I think it's a worthless",
    "start": "761120",
    "end": "762959"
  },
  {
    "text": "argument I just don't think there is a",
    "start": "762959",
    "end": "765519"
  },
  {
    "text": "huge any direction on this I I mean the",
    "start": "765519",
    "end": "767880"
  },
  {
    "text": "only argument I've heard people make is",
    "start": "767880",
    "end": "769680"
  },
  {
    "text": "with rust and expressions versus",
    "start": "769680",
    "end": "771440"
  },
  {
    "text": "statements you know what I mean fine",
    "start": "771440",
    "end": "773000"
  },
  {
    "text": "it's a language limitation I get that",
    "start": "773000",
    "end": "774959"
  },
  {
    "text": "but this argument I've just always found",
    "start": "774959",
    "end": "776199"
  },
  {
    "text": "to be weak you know I just find it's",
    "start": "776199",
    "end": "777959"
  },
  {
    "text": "just like a weak argument if for",
    "start": "777959",
    "end": "779279"
  },
  {
    "text": "whatever reason what's it called let a",
    "start": "779279",
    "end": "781600"
  },
  {
    "text": "equals 1 if A+ plus is confusing but a",
    "start": "781600",
    "end": "784639"
  },
  {
    "text": "plus equals 1 isn't I don't know I don't",
    "start": "784639",
    "end": "786680"
  },
  {
    "text": "know I can't tell you I can't tell you",
    "start": "786680",
    "end": "788560"
  },
  {
    "text": "why that happens okay that's your fault",
    "start": "788560",
    "end": "790040"
  },
  {
    "text": "doesn't JavaScript also have that uh",
    "start": "790040",
    "end": "791839"
  },
  {
    "text": "technically yes we already went over it",
    "start": "791839",
    "end": "793800"
  },
  {
    "text": "it technically does have that this is a",
    "start": "793800",
    "end": "795399"
  },
  {
    "text": "full think no no it also has that it",
    "start": "795399",
    "end": "797600"
  },
  {
    "text": "also has the triple plus sign which of",
    "start": "797600",
    "end": "799440"
  },
  {
    "text": "course is going to be like let b equals",
    "start": "799440",
    "end": "801240"
  },
  {
    "text": "1 you can do AA you can do that the real",
    "start": "801240",
    "end": "803680"
  },
  {
    "text": "question is what happened here is that a",
    "start": "803680",
    "end": "805480"
  },
  {
    "text": "plus pre-increment b or is that a post",
    "start": "805480",
    "end": "808800"
  },
  {
    "text": "increment plus b I can tell you which",
    "start": "808800",
    "end": "810279"
  },
  {
    "text": "answer it is but I'm curious if you guys",
    "start": "810279",
    "end": "811800"
  },
  {
    "text": "know it'd be preb or post a",
    "start": "811800",
    "end": "814079"
  },
  {
    "text": "pre-increment b it's post a how can you",
    "start": "814079",
    "end": "816199"
  },
  {
    "text": "tell it's post a a is three B is 1 the",
    "start": "816199",
    "end": "819199"
  },
  {
    "text": "answer is four it's post a so it's going",
    "start": "819199",
    "end": "821040"
  },
  {
    "text": "to be A++ so a is now currently Four B",
    "start": "821040",
    "end": "823959"
  },
  {
    "text": "was 1 1+ 3 is four right so it's not",
    "start": "823959",
    "end": "826320"
  },
  {
    "text": "preb a is four sucks to suck really",
    "start": "826320",
    "end": "828639"
  },
  {
    "text": "overall it isn't a life or death",
    "start": "828639",
    "end": "830759"
  },
  {
    "text": "situation but a nice way to make your",
    "start": "830759",
    "end": "832800"
  },
  {
    "text": "code more readable yeah so it's A++ plus",
    "start": "832800",
    "end": "835600"
  },
  {
    "text": "b conclusion JavaScript seemingly",
    "start": "835600",
    "end": "837160"
  },
  {
    "text": "senseless features often arise from from",
    "start": "837160",
    "end": "838880"
  },
  {
    "text": "historical decisions compromises and",
    "start": "838880",
    "end": "840360"
  },
  {
    "text": "attempted to cater to all needs",
    "start": "840360",
    "end": "841639"
  },
  {
    "text": "unfortunately it's impossible to make",
    "start": "841639",
    "end": "842880"
  },
  {
    "text": "everybody happy I'm a little sad that",
    "start": "842880",
    "end": "844399"
  },
  {
    "text": "this article didn't go into some more of",
    "start": "844399",
    "end": "845680"
  },
  {
    "text": "the weirdnesses of JavaScript like I",
    "start": "845680",
    "end": "847240"
  },
  {
    "text": "think I showed more just Oddities in",
    "start": "847240",
    "end": "849000"
  },
  {
    "text": "general when it comes to these things",
    "start": "849000",
    "end": "850279"
  },
  {
    "text": "like another really annoying thing is",
    "start": "850279",
    "end": "852199"
  },
  {
    "text": "the difference between parse int and",
    "start": "852199",
    "end": "854800"
  },
  {
    "text": "number they they both will cast",
    "start": "854800",
    "end": "856720"
  },
  {
    "text": "something so if we have five number will",
    "start": "856720",
    "end": "859519"
  },
  {
    "text": "cast that oopsies to a number",
    "start": "859519",
    "end": "862279"
  },
  {
    "text": "parcent we'll cast it to a number you",
    "start": "862279",
    "end": "864480"
  },
  {
    "text": "know what I mean they'll both do that",
    "start": "864480",
    "end": "866880"
  },
  {
    "text": "but that will make it a",
    "start": "866880",
    "end": "869279"
  },
  {
    "text": "this will make it a zero it's kind of",
    "start": "869279",
    "end": "870680"
  },
  {
    "text": "annoying right it's kind of just like",
    "start": "870680",
    "end": "872279"
  },
  {
    "text": "super annoying right there's like all",
    "start": "872279",
    "end": "873800"
  },
  {
    "text": "these weirdnesses that just exist",
    "start": "873800",
    "end": "875959"
  },
  {
    "text": "constantly in JavaScript and unless if",
    "start": "875959",
    "end": "878560"
  },
  {
    "text": "you know them all you just run into them",
    "start": "878560",
    "end": "880839"
  },
  {
    "text": "all the time so like a really simple one",
    "start": "880839",
    "end": "882600"
  },
  {
    "text": "to know about is like if we go like this",
    "start": "882600",
    "end": "884560"
  },
  {
    "text": "test file right I'll just call it test",
    "start": "884560",
    "end": "886360"
  },
  {
    "text": "and I go like this 1 2 3 4 there we go",
    "start": "886360",
    "end": "891199"
  },
  {
    "text": "sometimes I forget the reasons why this",
    "start": "891199",
    "end": "892600"
  },
  {
    "text": "happens so I might not be able to do",
    "start": "892600",
    "end": "894120"
  },
  {
    "text": "this offand FS fs. read file sync and",
    "start": "894120",
    "end": "898240"
  },
  {
    "text": "then we'll like like this uh test two",
    "start": "898240",
    "end": "901040"
  },
  {
    "text": "two string split new line map",
    "start": "901040",
    "end": "905920"
  },
  {
    "text": "x uh plus X convert them all into",
    "start": "905920",
    "end": "908920"
  },
  {
    "text": "numbers look what I got yeah kind of",
    "start": "908920",
    "end": "910920"
  },
  {
    "text": "funny",
    "start": "910920",
    "end": "912279"
  },
  {
    "text": "huh but I only have four lines in this",
    "start": "912279",
    "end": "914680"
  },
  {
    "text": "file well there's like a new line at the",
    "start": "914680",
    "end": "917240"
  },
  {
    "text": "end and that new line when you split",
    "start": "917240",
    "end": "919880"
  },
  {
    "text": "results in an empty string so if I just",
    "start": "919880",
    "end": "922680"
  },
  {
    "text": "like",
    "start": "922680",
    "end": "923759"
  },
  {
    "text": "this you get that there's this little",
    "start": "923759",
    "end": "926199"
  },
  {
    "text": "last empty string and the empty string",
    "start": "926199",
    "end": "928880"
  },
  {
    "text": "gets turned into a zero I know it's like",
    "start": "928880",
    "end": "932319"
  },
  {
    "text": "these little things that happen that are",
    "start": "932319",
    "end": "934040"
  },
  {
    "text": "super effing annoying now AV elry I",
    "start": "934040",
    "end": "936639"
  },
  {
    "text": "actually did do one live two months ago",
    "start": "936639",
    "end": "938720"
  },
  {
    "text": "and yesterday someone challenged me that",
    "start": "938720",
    "end": "940560"
  },
  {
    "text": "I couldn't do merge sort or uh what's it",
    "start": "940560",
    "end": "942440"
  },
  {
    "text": "called bubble sort we did bubble swort",
    "start": "942440",
    "end": "944079"
  },
  {
    "text": "live baby yo mama it's really annoying",
    "start": "944079",
    "end": "946440"
  },
  {
    "text": "well the hard part is this is is this",
    "start": "946440",
    "end": "949360"
  },
  {
    "text": "right",
    "start": "949360",
    "end": "950240"
  },
  {
    "text": "here what do you do with that right what",
    "start": "950240",
    "end": "953519"
  },
  {
    "text": "do you what what do you do with that one",
    "start": "953519",
    "end": "955040"
  },
  {
    "text": "who's right what happened if you got",
    "start": "955040",
    "end": "957639"
  },
  {
    "text": "that",
    "start": "957639",
    "end": "960600"
  },
  {
    "text": "now you got two of them you can do",
    "start": "960800",
    "end": "962240"
  },
  {
    "text": "parsent this is true you have to do a",
    "start": "962240",
    "end": "964240"
  },
  {
    "text": "pars Min and then an is you'd have to do",
    "start": "964240",
    "end": "966199"
  },
  {
    "text": "you'd have to do yourself a little you",
    "start": "966199",
    "end": "967639"
  },
  {
    "text": "can do yourself a little map parse int",
    "start": "967639",
    "end": "969839"
  },
  {
    "text": "but this doesn't do it either for those",
    "start": "969839",
    "end": "972360"
  },
  {
    "text": "you know what happens here this is going",
    "start": "972360",
    "end": "974160"
  },
  {
    "text": "to be a wild result are you ready for",
    "start": "974160",
    "end": "975440"
  },
  {
    "text": "the wild result yeah that's weird Okay",
    "start": "975440",
    "end": "978199"
  },
  {
    "text": "so let's do number that's also different",
    "start": "978199",
    "end": "982279"
  },
  {
    "text": "gigity giggity people in other words",
    "start": "982279",
    "end": "983959"
  },
  {
    "text": "JavaScript is difficult and the small",
    "start": "983959",
    "end": "986480"
  },
  {
    "text": "tiny little bits of JavaScript make you",
    "start": "986480",
    "end": "988279"
  },
  {
    "text": "a tional how about this one this is one",
    "start": "988279",
    "end": "990120"
  },
  {
    "text": "of my this is always one of my favorite",
    "start": "990120",
    "end": "991720"
  },
  {
    "text": "ones right you have like a right and if",
    "start": "991720",
    "end": "993920"
  },
  {
    "text": "I console log uh a whoopsies AA I",
    "start": "993920",
    "end": "997199"
  },
  {
    "text": "actually get this and then sometimes",
    "start": "997199",
    "end": "999639"
  },
  {
    "text": "people forget and then they do something",
    "start": "999639",
    "end": "1001920"
  },
  {
    "text": "with a template",
    "start": "1001920",
    "end": "1003360"
  },
  {
    "text": "string and then look you get object",
    "start": "1003360",
    "end": "1005639"
  },
  {
    "text": "object I just love that I just love this",
    "start": "1005639",
    "end": "1008519"
  },
  {
    "text": "one because you screw up and you don't",
    "start": "1008519",
    "end": "1010560"
  },
  {
    "text": "realize you've misone it and then you",
    "start": "1010560",
    "end": "1012399"
  },
  {
    "text": "have this log some point later in your",
    "start": "1012399",
    "end": "1014680"
  },
  {
    "text": "life in which becomes object object it's",
    "start": "1014680",
    "end": "1017199"
  },
  {
    "text": "always super annoying and that's because",
    "start": "1017199",
    "end": "1018920"
  },
  {
    "text": "this one expands differently than the",
    "start": "1018920",
    "end": "1020319"
  },
  {
    "text": "other one you just wouldn't know that",
    "start": "1020319",
    "end": "1021839"
  },
  {
    "text": "right you just wouldn't know that it it",
    "start": "1021839",
    "end": "1023360"
  },
  {
    "text": "makes perfect sense you just simply",
    "start": "1023360",
    "end": "1025558"
  },
  {
    "text": "wouldn't know that it make it makes",
    "start": "1025559",
    "end": "1027798"
  },
  {
    "text": "perfect sense trust me it's just",
    "start": "1027799",
    "end": "1029880"
  },
  {
    "text": "difficult and I think there's also I",
    "start": "1029880",
    "end": "1031678"
  },
  {
    "text": "swear there's another one with parse int",
    "start": "1031679",
    "end": "1033760"
  },
  {
    "text": "and something",
    "start": "1033760",
    "end": "1035798"
  },
  {
    "text": "with I swear there was one with this",
    "start": "1035799",
    "end": "1038280"
  },
  {
    "text": "that's like hilarious oh yeah here we",
    "start": "1038280",
    "end": "1041918"
  },
  {
    "text": "go yeah there it",
    "start": "1041919",
    "end": "1045798"
  },
  {
    "text": "is that's such a [ __ ] is just such an Fu",
    "start": "1045799",
    "end": "1050520"
  },
  {
    "text": "don't you just don't you just don't you",
    "start": "1050520",
    "end": "1052520"
  },
  {
    "text": "just hate that you want to know why this",
    "start": "1052520",
    "end": "1055720"
  },
  {
    "text": "happens all right let me tell you why",
    "start": "1055720",
    "end": "1057919"
  },
  {
    "text": "this one happens are you ready for this",
    "start": "1057919",
    "end": "1059320"
  },
  {
    "text": "one okay so this one's pretty funny too",
    "start": "1059320",
    "end": "1061880"
  },
  {
    "text": "so let's whenever you pass something to",
    "start": "1061880",
    "end": "1063880"
  },
  {
    "text": "parsent it actually enforces it to",
    "start": "1063880",
    "end": "1065640"
  },
  {
    "text": "become a string so what is the String",
    "start": "1065640",
    "end": "1067840"
  },
  {
    "text": "representation of this well it's that",
    "start": "1067840",
    "end": "1070160"
  },
  {
    "text": "what's the string representation of that",
    "start": "1070160",
    "end": "1071679"
  },
  {
    "text": "well as you can see it keeps doing this",
    "start": "1071679",
    "end": "1073120"
  },
  {
    "text": "but watch",
    "start": "1073120",
    "end": "1075120"
  },
  {
    "text": "this at some",
    "start": "1075120",
    "end": "1077400"
  },
  {
    "text": "point",
    "start": "1077400",
    "end": "1079120"
  },
  {
    "text": "wait where's the where is it it's",
    "start": "1079120",
    "end": "1080400"
  },
  {
    "text": "supposed to convert it into what's it",
    "start": "1080400",
    "end": "1081840"
  },
  {
    "text": "called it's I thought at some point okay",
    "start": "1081840",
    "end": "1083520"
  },
  {
    "text": "I know why it does this it converts it",
    "start": "1083520",
    "end": "1085240"
  },
  {
    "text": "into scientific notation eventually you",
    "start": "1085240",
    "end": "1087000"
  },
  {
    "text": "get 5e something oh I I had quotes",
    "start": "1087000",
    "end": "1089960"
  },
  {
    "text": "you're right you're right you're right",
    "start": "1089960",
    "end": "1091240"
  },
  {
    "text": "my bad I'm",
    "start": "1091240",
    "end": "1093039"
  },
  {
    "text": "stupid there you go my bad I had quotes",
    "start": "1093039",
    "end": "1095840"
  },
  {
    "text": "there you go it Con it converts it into",
    "start": "1095840",
    "end": "1097840"
  },
  {
    "text": "5e so how does parse in work well parse",
    "start": "1097840",
    "end": "1101240"
  },
  {
    "text": "int is its kind of funny thing if I go",
    "start": "1101240",
    "end": "1103440"
  },
  {
    "text": "Foo five it's not a number but if I go",
    "start": "1103440",
    "end": "1107480"
  },
  {
    "text": "five fu it parses out the first number",
    "start": "1107480",
    "end": "1111000"
  },
  {
    "text": "therefore when you happen to parse out",
    "start": "1111000",
    "end": "1114600"
  },
  {
    "text": "an INT that gets converted into a",
    "start": "1114600",
    "end": "1117480"
  },
  {
    "text": "scientific number it then becomes five",
    "start": "1117480",
    "end": "1120400"
  },
  {
    "text": "it makes perfect sense if you accept all",
    "start": "1120400",
    "end": "1123600"
  },
  {
    "text": "of the previous statements that they",
    "start": "1123600",
    "end": "1125880"
  },
  {
    "text": "make sense I feel like at this point",
    "start": "1125880",
    "end": "1128000"
  },
  {
    "text": "you're ready to learn about monads",
    "start": "1128000",
    "end": "1129840"
  },
  {
    "text": "number you get scientific notation and",
    "start": "1129840",
    "end": "1132000"
  },
  {
    "text": "that's why you get paid the Lord's",
    "start": "1132000",
    "end": "1133520"
  },
  {
    "text": "language scientific notation called it I",
    "start": "1133520",
    "end": "1136159"
  },
  {
    "text": "I'm sure there's other ones that we can",
    "start": "1136159",
    "end": "1137559"
  },
  {
    "text": "think of that are just super effed up",
    "start": "1137559",
    "end": "1139240"
  },
  {
    "text": "but I can't think of them off the top of",
    "start": "1139240",
    "end": "1140840"
  },
  {
    "text": "my head I mean there's like the funny",
    "start": "1140840",
    "end": "1142039"
  },
  {
    "text": "ones that you know like reverse and sort",
    "start": "1142039",
    "end": "1143919"
  },
  {
    "text": "when it comes to an array like those",
    "start": "1143919",
    "end": "1145480"
  },
  {
    "text": "ones are really really funny just in",
    "start": "1145480",
    "end": "1147320"
  },
  {
    "text": "general for those that don't know any of",
    "start": "1147320",
    "end": "1148960"
  },
  {
    "text": "those ones anything with an",
    "start": "1148960",
    "end": "1151840"
  },
  {
    "text": "array anytime you have an array and a",
    "start": "1151840",
    "end": "1154600"
  },
  {
    "text": "function that returns an array you make",
    "start": "1154600",
    "end": "1156360"
  },
  {
    "text": "an assumption right you make an",
    "start": "1156360",
    "end": "1157840"
  },
  {
    "text": "assumption that whatever comes back it",
    "start": "1157840",
    "end": "1159880"
  },
  {
    "text": "doesn't mutate the original one well",
    "start": "1159880",
    "end": "1161919"
  },
  {
    "text": "unfortunately when you do bb.",
    "start": "1161919",
    "end": "1165000"
  },
  {
    "text": "reverse it actually returns you an array",
    "start": "1165000",
    "end": "1167720"
  },
  {
    "text": "but when you look at BB it's also been",
    "start": "1167720",
    "end": "1170280"
  },
  {
    "text": "this splice makes sense splice makes",
    "start": "1170280",
    "end": "1172919"
  },
  {
    "text": "sense because splice you actually say",
    "start": "1172919",
    "end": "1175360"
  },
  {
    "text": "from what index and how many elements I",
    "start": "1175360",
    "end": "1177200"
  },
  {
    "text": "wish to remove and then what do I wish",
    "start": "1177200",
    "end": "1179200"
  },
  {
    "text": "to insert and so it actually returns to",
    "start": "1179200",
    "end": "1181440"
  },
  {
    "text": "the subsection of the array removed so",
    "start": "1181440",
    "end": "1183880"
  },
  {
    "text": "you removed 2 one you remove these two",
    "start": "1183880",
    "end": "1186360"
  },
  {
    "text": "items and BB now contains that I mean",
    "start": "1186360",
    "end": "1189280"
  },
  {
    "text": "splice actually makes a lot of sense",
    "start": "1189280",
    "end": "1190919"
  },
  {
    "text": "splice I have zero problems with splice",
    "start": "1190919",
    "end": "1193200"
  },
  {
    "text": "is exactly what I would want it to work",
    "start": "1193200",
    "end": "1195159"
  },
  {
    "text": "like if you wanted to be able to delete",
    "start": "1195159",
    "end": "1196720"
  },
  {
    "text": "and insert at the exact same time there",
    "start": "1196720",
    "end": "1199000"
  },
  {
    "text": "is no better interface than that don't",
    "start": "1199000",
    "end": "1202000"
  },
  {
    "text": "worry I know all about two reverse and",
    "start": "1202000",
    "end": "1203440"
  },
  {
    "text": "all that crap yeah reverse seems Dumber",
    "start": "1203440",
    "end": "1204919"
  },
  {
    "text": "then yeah reverse is just dumb that's",
    "start": "1204919",
    "end": "1206320"
  },
  {
    "text": "all it is reverse is just dumb and it's",
    "start": "1206320",
    "end": "1207880"
  },
  {
    "text": "funny the real history of JavaScript",
    "start": "1207880",
    "end": "1209440"
  },
  {
    "text": "Brendan Ike was thinking about quitting",
    "start": "1209440",
    "end": "1211000"
  },
  {
    "text": "so when told to create a programming",
    "start": "1211000",
    "end": "1212360"
  },
  {
    "text": "language in a week he cobbled together a",
    "start": "1212360",
    "end": "1213960"
  },
  {
    "text": "joke language to make fun of everybody",
    "start": "1213960",
    "end": "1215559"
  },
  {
    "text": "to make fun of everything bad in",
    "start": "1215559",
    "end": "1216679"
  },
  {
    "text": "programming then the higher ups and",
    "start": "1216679",
    "end": "1218360"
  },
  {
    "text": "users didn't get the joke and he's been",
    "start": "1218360",
    "end": "1219960"
  },
  {
    "text": "face palming ever since the end may God",
    "start": "1219960",
    "end": "1222360"
  },
  {
    "text": "have mercy on our souls yes yes of",
    "start": "1222360",
    "end": "1224080"
  },
  {
    "text": "course and then there's the other one",
    "start": "1224080",
    "end": "1225400"
  },
  {
    "text": "the other funny one which is like things",
    "start": "1225400",
    "end": "1227000"
  },
  {
    "text": "like ne4 -3 1 7 77 100 right and then",
    "start": "1227000",
    "end": "1233080"
  },
  {
    "text": "you sort that and you get that that's a",
    "start": "1233080",
    "end": "1235240"
  },
  {
    "text": "cool array wow that's awesome I'm happy",
    "start": "1235240",
    "end": "1238120"
  },
  {
    "text": "that happened the default sort on sort",
    "start": "1238120",
    "end": "1241000"
  },
  {
    "text": "takes in everything and converts it to a",
    "start": "1241000",
    "end": "1243120"
  },
  {
    "text": "string so if you wish to do a number",
    "start": "1243120",
    "end": "1245559"
  },
  {
    "text": "you'd have to provide an A B A minus B",
    "start": "1245559",
    "end": "1250320"
  },
  {
    "text": "and then you'd get it correctly or a B",
    "start": "1250320",
    "end": "1251960"
  },
  {
    "text": "minus a if you wish to have it the other",
    "start": "1251960",
    "end": "1253799"
  },
  {
    "text": "direction the old classic B minus a you",
    "start": "1253799",
    "end": "1255919"
  },
  {
    "text": "know what I'm talking about totally good",
    "start": "1255919",
    "end": "1258200"
  },
  {
    "text": "sort of nerd get sort of nerd I just",
    "start": "1258200",
    "end": "1261320"
  },
  {
    "text": "wish sort required an argument yeah it",
    "start": "1261320",
    "end": "1264120"
  },
  {
    "text": "probably would be best that sort",
    "start": "1264120",
    "end": "1265360"
  },
  {
    "text": "required an argument two sorted doesn't",
    "start": "1265360",
    "end": "1267360"
  },
  {
    "text": "sort the array two sorted I wonder if",
    "start": "1267360",
    "end": "1269080"
  },
  {
    "text": "two sorted does the same thing I would",
    "start": "1269080",
    "end": "1270320"
  },
  {
    "text": "assume two sorted does the exact same",
    "start": "1270320",
    "end": "1272679"
  },
  {
    "text": "thing I'd be shocked if two sorted",
    "start": "1272679",
    "end": "1274840"
  },
  {
    "text": "didn't yeah two sorted does the same",
    "start": "1274840",
    "end": "1276039"
  },
  {
    "text": "thing it'd be crazier to have that",
    "start": "1276039",
    "end": "1278880"
  },
  {
    "text": "feature not extend all the way through",
    "start": "1278880",
    "end": "1280720"
  },
  {
    "text": "plus you'd have to know if your entire",
    "start": "1280720",
    "end": "1282640"
  },
  {
    "text": "array was filled with numbers or not",
    "start": "1282640",
    "end": "1284919"
  },
  {
    "text": "before you sorted it because if there's",
    "start": "1284919",
    "end": "1286840"
  },
  {
    "text": "one string you'd have to sort it based",
    "start": "1286840",
    "end": "1288400"
  },
  {
    "text": "on string rules not on number rules so",
    "start": "1288400",
    "end": "1290000"
  },
  {
    "text": "it' be like a crazy inefficient",
    "start": "1290000",
    "end": "1291400"
  },
  {
    "text": "algorithm you just have to simply be",
    "start": "1291400",
    "end": "1293279"
  },
  {
    "text": "consistent yeah I mean the thing is it's",
    "start": "1293279",
    "end": "1295360"
  },
  {
    "text": "at least it's consistently inconsistent",
    "start": "1295360",
    "end": "1297320"
  },
  {
    "text": "I think those things are more fun to",
    "start": "1297320",
    "end": "1298520"
  },
  {
    "text": "talk about in JavaScript than like I",
    "start": "1298520",
    "end": "1299960"
  },
  {
    "text": "mean semicolon is kind of weak whatever",
    "start": "1299960",
    "end": "1302120"
  },
  {
    "text": "I still think like another kind of funny",
    "start": "1302120",
    "end": "1303760"
  },
  {
    "text": "one is like function and if you have a",
    "start": "1303760",
    "end": "1305760"
  },
  {
    "text": "function really oh function Fu and you",
    "start": "1305760",
    "end": "1308720"
  },
  {
    "text": "do this and then you go return and then",
    "start": "1308720",
    "end": "1310880"
  },
  {
    "text": "you go five and then you close that that",
    "start": "1310880",
    "end": "1314200"
  },
  {
    "text": "should uh it might not oh dang it yeah",
    "start": "1314200",
    "end": "1316039"
  },
  {
    "text": "there we go we returned undefined like",
    "start": "1316039",
    "end": "1317840"
  },
  {
    "text": "that's great like how great is that like",
    "start": "1317840",
    "end": "1320279"
  },
  {
    "text": "if you have a the only time white space",
    "start": "1320279",
    "end": "1322600"
  },
  {
    "text": "is significant is in the return",
    "start": "1322600",
    "end": "1324600"
  },
  {
    "text": "statement which just somehow feels funny",
    "start": "1324600",
    "end": "1327200"
  },
  {
    "text": "automatic semicolon insertion boys you",
    "start": "1327200",
    "end": "1329679"
  },
  {
    "text": "know what I mean stop breaking JS it's",
    "start": "1329679",
    "end": "1331600"
  },
  {
    "text": "just funny automatic semicolon insertion",
    "start": "1331600",
    "end": "1333799"
  },
  {
    "text": "it gets you what a piece of [ __ ]",
    "start": "1333799",
    "end": "1336080"
  },
  {
    "text": "language yeah you just got to know about",
    "start": "1336080",
    "end": "1338559"
  },
  {
    "text": "these things that's all the gauntlet has",
    "start": "1338559",
    "end": "1340159"
  },
  {
    "text": "been thrown I remember you yeah yeah",
    "start": "1340159",
    "end": "1342679"
  },
  {
    "text": "yeah all right hey everybody good luck",
    "start": "1342679",
    "end": "1345200"
  },
  {
    "text": "with JavaScript I've let's see I've done",
    "start": "1345200",
    "end": "1347000"
  },
  {
    "text": "a lot of amazing stuff in with JS for",
    "start": "1347000",
    "end": "1348880"
  },
  {
    "text": "many years Prime proved me that the",
    "start": "1348880",
    "end": "1350600"
  },
  {
    "text": "downsides of JS are a real deal yeah I",
    "start": "1350600",
    "end": "1353000"
  },
  {
    "text": "don't don't get me wrong I love",
    "start": "1353000",
    "end": "1354520"
  },
  {
    "text": "JavaScript it's a very easy language to",
    "start": "1354520",
    "end": "1356840"
  },
  {
    "text": "get things done this is just people's",
    "start": "1356840",
    "end": "1358600"
  },
  {
    "text": "inability to understand bitwise math I",
    "start": "1358600",
    "end": "1360799"
  },
  {
    "text": "love JavaScript I'm just smart enough to",
    "start": "1360799",
    "end": "1362679"
  },
  {
    "text": "know that it sucks It Bun fixes nothing",
    "start": "1362679",
    "end": "1365000"
  },
  {
    "text": "because bun uses JavaScript that's it if",
    "start": "1365000",
    "end": "1368640"
  },
  {
    "text": "you think Dino or bun will take the dumb",
    "start": "1368640",
    "end": "1371120"
  },
  {
    "text": "out of JavaScript you're dumber than",
    "start": "1371120",
    "end": "1373279"
  },
  {
    "text": "JavaScript sorry it's not turning back",
    "start": "1373279",
    "end": "1375559"
  },
  {
    "text": "on the name is I don't have a camera",
    "start": "1375559",
    "end": "1378559"
  },
  {
    "text": "agent",
    "start": "1378559",
    "end": "1381000"
  }
]