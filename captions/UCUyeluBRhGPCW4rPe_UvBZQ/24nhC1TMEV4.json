[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "I have not actually I have actually not",
    "start": "199",
    "end": "1880"
  },
  {
    "text": "seen this video in my last video I",
    "start": "1880",
    "end": "4680"
  },
  {
    "text": "introduced the two major bottom necks",
    "start": "4680",
    "end": "6319"
  },
  {
    "text": "that slowly program down okay compute",
    "start": "6319",
    "end": "8800"
  },
  {
    "text": "Bond and memory Bond y at the end of the",
    "start": "8800",
    "end": "11160"
  },
  {
    "text": "video I mentioned the specific compute",
    "start": "11160",
    "end": "13000"
  },
  {
    "text": "bondy task which is General Matrix",
    "start": "13000",
    "end": "14920"
  },
  {
    "text": "Matrix multiplication I remember this",
    "start": "14920",
    "end": "16480"
  },
  {
    "text": "video I think we watch operation despite",
    "start": "16480",
    "end": "18199"
  },
  {
    "text": "its apparent Simplicity can be",
    "start": "18199",
    "end": "19840"
  },
  {
    "text": "remarkably challenging to optimize",
    "start": "19840",
    "end": "21800"
  },
  {
    "text": "efficiently in today's episode we're",
    "start": "21800",
    "end": "24279"
  },
  {
    "text": "going to walk through some genius",
    "start": "24279",
    "end": "25320"
  },
  {
    "text": "algorithms to make it over 100 times",
    "start": "25320",
    "end": "27320"
  },
  {
    "text": "faster all achieved through pure CPU",
    "start": "27320",
    "end": "29599"
  },
  {
    "text": "optimiz techniques leveraging seemd and",
    "start": "29599",
    "end": "32000"
  },
  {
    "text": "cash strategies okay some of these",
    "start": "32000",
    "end": "34200"
  },
  {
    "text": "techniques might seem counterintuitive",
    "start": "34200",
    "end": "35760"
  },
  {
    "text": "at first class but they'll start to make",
    "start": "35760",
    "end": "37719"
  },
  {
    "text": "perfect sense as we delve deeper into",
    "start": "37719",
    "end": "39320"
  },
  {
    "text": "the underlying",
    "start": "39320",
    "end": "40559"
  },
  {
    "start": "40000",
    "end": "120000"
  },
  {
    "text": "reasons we'll Begin by implementing a",
    "start": "40559",
    "end": "42800"
  },
  {
    "text": "Vanilla Jam algorithm the",
    "start": "42800",
    "end": "44760"
  },
  {
    "text": "straightforward approach involves a",
    "start": "44760",
    "end": "46160"
  },
  {
    "text": "triple for Loop structure to compute the",
    "start": "46160",
    "end": "48039"
  },
  {
    "text": "dot product for each entry in the",
    "start": "48039",
    "end": "50079"
  },
  {
    "text": "matrices this is code that I let",
    "start": "50079",
    "end": "52120"
  },
  {
    "text": "co-pilot right",
    "start": "52120",
    "end": "53640"
  },
  {
    "text": "now uh what was it it must have been",
    "start": "53640",
    "end": "55960"
  },
  {
    "text": "like gosh two years ago I wrote matrix",
    "start": "55960",
    "end": "60559"
  },
  {
    "text": "multiplication on stream it just you",
    "start": "60559",
    "end": "62120"
  },
  {
    "text": "know writing this thing just takes so",
    "start": "62120",
    "end": "65080"
  },
  {
    "text": "much it's just the world's worst thing",
    "start": "65080",
    "end": "66960"
  },
  {
    "text": "to",
    "start": "66960",
    "end": "67920"
  },
  {
    "text": "write here we simplify the input to be",
    "start": "67920",
    "end": "70600"
  },
  {
    "text": "square matrices of size mat sides yep",
    "start": "70600",
    "end": "73240"
  },
  {
    "text": "the performance of this basic",
    "start": "73240",
    "end": "74479"
  },
  {
    "text": "implementation is notably slow y taking",
    "start": "74479",
    "end": "76799"
  },
  {
    "text": "approximately 2 seconds to process",
    "start": "76799",
    "end": "78360"
  },
  {
    "text": "matrices of size 1K by 1K of course",
    "start": "78360",
    "end": "81799"
  },
  {
    "text": "we're not even using Ming right nowon I",
    "start": "81799",
    "end": "85960"
  },
  {
    "text": "mean it seems right because it's n cubed",
    "start": "86240",
    "end": "88840"
  },
  {
    "text": "right and so being a square Matrix that'",
    "start": "88840",
    "end": "91600"
  },
  {
    "text": "be a th time a th time a thousand oh",
    "start": "91600",
    "end": "93320"
  },
  {
    "text": "that's a billion that's a billion I'm",
    "start": "93320",
    "end": "95360"
  },
  {
    "text": "pretty good at math okay I'm really good",
    "start": "95360",
    "end": "97000"
  },
  {
    "text": "at the maths okay uh just use an npm",
    "start": "97000",
    "end": "100000"
  },
  {
    "text": "package to do that Sim D's Nuts matrix",
    "start": "100000",
    "end": "102159"
  },
  {
    "text": "multiplication npm package just install",
    "start": "102159",
    "end": "104000"
  },
  {
    "text": "it in quick maths we've already",
    "start": "104000",
    "end": "105799"
  },
  {
    "text": "accelerated the orm by a factor of 10 oh",
    "start": "105799",
    "end": "108479"
  },
  {
    "text": "this is because my CPU boasts an a core",
    "start": "108479",
    "end": "110399"
  },
  {
    "text": "16 threat",
    "start": "110399",
    "end": "111600"
  },
  {
    "text": "configuration however despite this",
    "start": "111600",
    "end": "113840"
  },
  {
    "text": "Improvement important question right now",
    "start": "113840",
    "end": "116000"
  },
  {
    "text": "is is it really fast enough yeah we are",
    "start": "116000",
    "end": "118840"
  },
  {
    "text": "going to optimize in",
    "start": "118840",
    "end": "120520"
  },
  {
    "start": "120000",
    "end": "150000"
  },
  {
    "text": "when should we be satisfied to",
    "start": "120520",
    "end": "122759"
  },
  {
    "text": "understand this question we have to do",
    "start": "122759",
    "end": "124399"
  },
  {
    "text": "the math first okay not a big",
    "start": "124399",
    "end": "126960"
  },
  {
    "text": "specifications my CPU has a maximum",
    "start": "126960",
    "end": "129039"
  },
  {
    "text": "compute bandwidth of 600 G",
    "start": "129039",
    "end": "131160"
  },
  {
    "text": "flops the memory bandwidth limitations",
    "start": "131160",
    "end": "134080"
  },
  {
    "text": "stand that's a lot of flops I'm not",
    "start": "134080",
    "end": "136840"
  },
  {
    "text": "going to lie to you I I don't I don't",
    "start": "136840",
    "end": "139400"
  },
  {
    "text": "think I have that many flops does does",
    "start": "139400",
    "end": "141239"
  },
  {
    "text": "an average man have this kind of many",
    "start": "141239",
    "end": "142599"
  },
  {
    "text": "flops or is this like an unusual amount",
    "start": "142599",
    "end": "145200"
  },
  {
    "text": "of g- flops it's at approximately 46",
    "start": "145200",
    "end": "148680"
  },
  {
    "text": "gigabytes per second H however keep in",
    "start": "148680",
    "end": "151440"
  },
  {
    "start": "150000",
    "end": "200000"
  },
  {
    "text": "mind that memory BWI isn't solely",
    "start": "151440",
    "end": "153080"
  },
  {
    "text": "dictated by your CPU peripheral factors",
    "start": "153080",
    "end": "155800"
  },
  {
    "text": "including lower memory frequencies and",
    "start": "155800",
    "end": "157519"
  },
  {
    "text": "under utiliz the memory channels can",
    "start": "157519",
    "end": "159519"
  },
  {
    "text": "also decrease your practical memory",
    "start": "159519",
    "end": "161080"
  },
  {
    "text": "bandwidth to test the memory bandwidth",
    "start": "161080",
    "end": "163319"
  },
  {
    "text": "in the production environment return to",
    "start": "163319",
    "end": "165080"
  },
  {
    "text": "the stream Benchmark I'm never going I",
    "start": "165080",
    "end": "167280"
  },
  {
    "text": "I'm not going to lie to you guys I've",
    "start": "167280",
    "end": "168440"
  },
  {
    "text": "never been to this level of",
    "start": "168440",
    "end": "170599"
  },
  {
    "text": "optimization you know what I mean I've",
    "start": "170599",
    "end": "172400"
  },
  {
    "text": "never had to",
    "start": "172400",
    "end": "174239"
  },
  {
    "text": "optimize here like I've never hit a",
    "start": "174239",
    "end": "176640"
  },
  {
    "text": "memory bus problem right skip skill",
    "start": "176640",
    "end": "179959"
  },
  {
    "text": "issue hard skill issue okay my my my",
    "start": "179959",
    "end": "183200"
  },
  {
    "text": "flops are way too floppy for this you",
    "start": "183200",
    "end": "185159"
  },
  {
    "text": "never used npm Fair okay maybe maybe I",
    "start": "185159",
    "end": "187879"
  },
  {
    "text": "have maybe maybe I have ran into it",
    "start": "187879",
    "end": "189640"
  },
  {
    "text": "maybe I've only been subjected to the",
    "start": "189640",
    "end": "191319"
  },
  {
    "text": "memory problem but I've never actually",
    "start": "191319",
    "end": "192760"
  },
  {
    "text": "done the memory problem according to",
    "start": "192760",
    "end": "194360"
  },
  {
    "text": "this Benchmark result my system's",
    "start": "194360",
    "end": "196519"
  },
  {
    "text": "practical memory band with sealing",
    "start": "196519",
    "end": "197840"
  },
  {
    "text": "hovers around 21 GB per second",
    "start": "197840",
    "end": "200239"
  },
  {
    "start": "200000",
    "end": "295000"
  },
  {
    "text": "equivalent to 5.25 G flops it's a lot",
    "start": "200239",
    "end": "203080"
  },
  {
    "text": "the next question is we all know that",
    "start": "203080",
    "end": "205599"
  },
  {
    "text": "J relating memory to Gig flops is that",
    "start": "205599",
    "end": "208360"
  },
  {
    "text": "normal that seems confusing cuz it's a",
    "start": "208360",
    "end": "210360"
  },
  {
    "text": "floating Point operation but what does",
    "start": "210360",
    "end": "212400"
  },
  {
    "text": "that mean in is that just saying that it",
    "start": "212400",
    "end": "215159"
  },
  {
    "text": "can only you can only send through the",
    "start": "215159",
    "end": "217239"
  },
  {
    "text": "results of so many flops it's not really",
    "start": "217239",
    "end": "219959"
  },
  {
    "text": "a comparison I was am I am I the only",
    "start": "219959",
    "end": "222439"
  },
  {
    "text": "one bandwidth limits G",
    "start": "222439",
    "end": "226480"
  },
  {
    "text": "floppies I can't believe I just read",
    "start": "226879",
    "end": "228879"
  },
  {
    "text": "that phrase out loud but I guess we're",
    "start": "228879",
    "end": "230120"
  },
  {
    "text": "GNA be calling them G floppies from here",
    "start": "230120",
    "end": "231640"
  },
  {
    "text": "on out uh yes the G does stand for Giga",
    "start": "231640",
    "end": "234560"
  },
  {
    "text": "chat flops will eventually become",
    "start": "234560",
    "end": "236560"
  },
  {
    "text": "compute bonded from the last video okay",
    "start": "236560",
    "end": "238599"
  },
  {
    "text": "but when the answer theoretically isn't",
    "start": "238599",
    "end": "241799"
  },
  {
    "text": "overly complex since we can find out the",
    "start": "241799",
    "end": "244480"
  },
  {
    "text": "total number of memory access to be S",
    "start": "244480",
    "end": "246200"
  },
  {
    "text": "and squared and the total number of",
    "start": "246200",
    "end": "247640"
  },
  {
    "text": "floating Point operations required is to",
    "start": "247640",
    "end": "249560"
  },
  {
    "text": "enced gem should shift from B memory",
    "start": "249560",
    "end": "251760"
  },
  {
    "text": "bound to compute bound when n exceeds",
    "start": "251760",
    "end": "254239"
  },
  {
    "text": "380 but here's the problem at a",
    "start": "254239",
    "end": "257000"
  },
  {
    "text": "resolution of 1K by 1K both the compute",
    "start": "257000",
    "end": "259600"
  },
  {
    "text": "band ws and memory band WS fail to reach",
    "start": "259600",
    "end": "261320"
  },
  {
    "text": "their full potential this is because we",
    "start": "261320",
    "end": "263720"
  },
  {
    "text": "have a relatively low cash heit rate",
    "start": "263720",
    "end": "265360"
  },
  {
    "text": "within our naiv implementation not that",
    "start": "265360",
    "end": "268120"
  },
  {
    "text": "each entry in The Matrix is a and b",
    "start": "268120",
    "end": "269800"
  },
  {
    "text": "needs to be accessed multiple times but",
    "start": "269800",
    "end": "272240"
  },
  {
    "text": "if they don't reside in the cache our",
    "start": "272240",
    "end": "274280"
  },
  {
    "text": "memory access comp can get close to 3M",
    "start": "274280",
    "end": "276280"
  },
  {
    "text": "Cub rather than the expected 3 squ this",
    "start": "276280",
    "end": "279600"
  },
  {
    "text": "complication can be problematic when n",
    "start": "279600",
    "end": "281320"
  },
  {
    "text": "is large as the cach is less likely to",
    "start": "281320",
    "end": "283560"
  },
  {
    "text": "keep the data when the same entry is",
    "start": "283560",
    "end": "285039"
  },
  {
    "text": "accessed the next time however if you",
    "start": "285039",
    "end": "287639"
  },
  {
    "text": "have a relatively small Matrix there's",
    "start": "287639",
    "end": "289759"
  },
  {
    "text": "even a pretty high chance the entire",
    "start": "289759",
    "end": "291240"
  },
  {
    "text": "Matrix can be accommodated within a",
    "start": "291240",
    "end": "292880"
  },
  {
    "text": "large cach so increasing the cash heit",
    "start": "292880",
    "end": "295960"
  },
  {
    "start": "295000",
    "end": "405000"
  },
  {
    "text": "rate huh where should we start",
    "start": "295960",
    "end": "298160"
  },
  {
    "text": "introducing the first trick transposing",
    "start": "298160",
    "end": "300639"
  },
  {
    "text": "one of the matrices from row major to",
    "start": "300639",
    "end": "302360"
  },
  {
    "text": "column major okay I've heard about this",
    "start": "302360",
    "end": "304440"
  },
  {
    "text": "this is that just I assume you don't act",
    "start": "304440",
    "end": "306560"
  },
  {
    "text": "do you do you transpose The Matrix or do",
    "start": "306560",
    "end": "309320"
  },
  {
    "text": "you just walk it differently cuz is",
    "start": "309320",
    "end": "311360"
  },
  {
    "text": "actually coping over the Matrix to a new",
    "start": "311360",
    "end": "313479"
  },
  {
    "text": "piece of memory really the way you do",
    "start": "313479",
    "end": "315240"
  },
  {
    "text": "this or is it actually just just walking",
    "start": "315240",
    "end": "317639"
  },
  {
    "text": "you're saying yes transpose yes so you",
    "start": "317639",
    "end": "319600"
  },
  {
    "text": "actually you you do it you do the",
    "start": "319600",
    "end": "321680"
  },
  {
    "text": "transposition on the fly or do you",
    "start": "321680",
    "end": "323800"
  },
  {
    "text": "actually copy it yes to the copy okay",
    "start": "323800",
    "end": "326600"
  },
  {
    "text": "the small adjustment makes our algorthm",
    "start": "326600",
    "end": "328160"
  },
  {
    "text": "run three times faster",
    "start": "328160",
    "end": "330280"
  },
  {
    "text": "but you might be wondering are we doing",
    "start": "330280",
    "end": "332199"
  },
  {
    "text": "more computation when transposing the",
    "start": "332199",
    "end": "334440"
  },
  {
    "text": "Matrix well this bring us through the",
    "start": "334440",
    "end": "336840"
  },
  {
    "text": "two principles of cach optimization",
    "start": "336840",
    "end": "339400"
  },
  {
    "text": "maximizing spatial locality and temporal",
    "start": "339400",
    "end": "341840"
  },
  {
    "text": "locality in our original Jam",
    "start": "341840",
    "end": "343960"
  },
  {
    "text": "implementation both of these aspects are",
    "start": "343960",
    "end": "346759"
  },
  {
    "text": "suboptimal yeah you see in the vanilla",
    "start": "346759",
    "end": "349120"
  },
  {
    "text": "gem both matrices A and B are stored in",
    "start": "349120",
    "end": "351560"
  },
  {
    "text": "row major order however when performing",
    "start": "351560",
    "end": "354360"
  },
  {
    "text": "the matrix multiplication Matrix is",
    "start": "354360",
    "end": "356800"
  },
  {
    "text": "access the longest columns this means",
    "start": "356800",
    "end": "358880"
  },
  {
    "text": "that the Alm needs to skip an entire row",
    "start": "358880",
    "end": "360800"
  },
  {
    "text": "to access the next value yeah but wait a",
    "start": "360800",
    "end": "363319"
  },
  {
    "text": "second it's not like truly random memory",
    "start": "363319",
    "end": "365400"
  },
  {
    "text": "access so a mod Cash System can handle",
    "start": "365400",
    "end": "367599"
  },
  {
    "text": "this pattern right and You' be correct",
    "start": "367599",
    "end": "370440"
  },
  {
    "text": "actually your CPU likely employs",
    "start": "370440",
    "end": "372319"
  },
  {
    "text": "prefacing as long as you have a stable",
    "start": "372319",
    "end": "374000"
  },
  {
    "text": "memory access pattern like this the",
    "start": "374000",
    "end": "376160"
  },
  {
    "text": "problem is that you don't catch a single",
    "start": "376160",
    "end": "377639"
  },
  {
    "text": "float when you access the value but",
    "start": "377639",
    "end": "379400"
  },
  {
    "text": "catch an entire Cash Line the way you",
    "start": "379400",
    "end": "381960"
  },
  {
    "text": "access Matrix B results in a substantial",
    "start": "381960",
    "end": "383919"
  },
  {
    "text": "amount of cash being brought in but not",
    "start": "383919",
    "end": "385520"
  },
  {
    "text": "fully utilized therefore the low spatial",
    "start": "385520",
    "end": "388479"
  },
  {
    "text": "locality in this this case ISS to",
    "start": "388479",
    "end": "390479"
  },
  {
    "text": "inefficient cach line",
    "start": "390479",
    "end": "392240"
  },
  {
    "text": "utilization transposing The Matrix spe",
    "start": "392240",
    "end": "394880"
  },
  {
    "text": "despite the more computation and even",
    "start": "394880",
    "end": "396400"
  },
  {
    "text": "memory access overhead in curse",
    "start": "396400",
    "end": "398520"
  },
  {
    "text": "significantly improve the cach line",
    "start": "398520",
    "end": "399919"
  },
  {
    "text": "utilization and therefore increase the",
    "start": "399919",
    "end": "402000"
  },
  {
    "text": "overall at the end of the day so we can",
    "start": "402000",
    "end": "404919"
  },
  {
    "text": "improve the spatial locality by",
    "start": "404919",
    "end": "406319"
  },
  {
    "start": "405000",
    "end": "630000"
  },
  {
    "text": "transposing The Matrix what about",
    "start": "406319",
    "end": "408199"
  },
  {
    "text": "temporal locality to improve that's a",
    "start": "408199",
    "end": "410720"
  },
  {
    "text": "great that's a great visualization for",
    "start": "410720",
    "end": "412199"
  },
  {
    "text": "showing you because you just will always",
    "start": "412199",
    "end": "413520"
  },
  {
    "text": "want to walk it linearly right like",
    "start": "413520",
    "end": "415440"
  },
  {
    "text": "that's why they that's why I mean one of",
    "start": "415440",
    "end": "417599"
  },
  {
    "text": "the most common ways to increase",
    "start": "417599",
    "end": "419479"
  },
  {
    "text": "performance in the most simplest way is",
    "start": "419479",
    "end": "422800"
  },
  {
    "text": "that if you have a set of like 10 items",
    "start": "422800",
    "end": "426280"
  },
  {
    "text": "15 items you don't use a set even if",
    "start": "426280",
    "end": "429280"
  },
  {
    "text": "you're removing an adding instead you",
    "start": "429280",
    "end": "431479"
  },
  {
    "text": "just put them into an array and yeah",
    "start": "431479",
    "end": "433280"
  },
  {
    "text": "when you remove you have to move",
    "start": "433280",
    "end": "435120"
  },
  {
    "text": "everything back but it just makes it so",
    "start": "435120",
    "end": "437759"
  },
  {
    "text": "that you get this nice tight array where",
    "start": "437759",
    "end": "439960"
  },
  {
    "text": "everything's located that you can walk",
    "start": "439960",
    "end": "441520"
  },
  {
    "text": "really you know swiftly and even that",
    "start": "441520",
    "end": "444080"
  },
  {
    "text": "adjusting is still better plus you have",
    "start": "444080",
    "end": "445840"
  },
  {
    "text": "whatever the complication is of the",
    "start": "445840",
    "end": "447319"
  },
  {
    "text": "hashing Factor right so there's a I mean",
    "start": "447319",
    "end": "451360"
  },
  {
    "text": "these type of improvements are are wild",
    "start": "451360",
    "end": "454080"
  },
  {
    "text": "right they're just not something that I",
    "start": "454080",
    "end": "455479"
  },
  {
    "text": "think the average programmer thinks",
    "start": "455479",
    "end": "457520"
  },
  {
    "text": "about but they do exist and there are",
    "start": "457520",
    "end": "459960"
  },
  {
    "text": "really good practical implications for",
    "start": "459960",
    "end": "461759"
  },
  {
    "text": "them which is really nice power locality",
    "start": "461759",
    "end": "464199"
  },
  {
    "text": "we must first understand what cause it",
    "start": "464199",
    "end": "465599"
  },
  {
    "text": "to be",
    "start": "465599",
    "end": "466440"
  },
  {
    "text": "suboptimal in the context of our matrix",
    "start": "466440",
    "end": "468960"
  },
  {
    "text": "multiplication every entry in matrices A",
    "start": "468960",
    "end": "471159"
  },
  {
    "text": "and B needs to be accessed multiple",
    "start": "471159",
    "end": "473000"
  },
  {
    "text": "times however when dealing with large",
    "start": "473000",
    "end": "475400"
  },
  {
    "text": "matrices holding an entire row in the",
    "start": "475400",
    "end": "477400"
  },
  {
    "text": "cach can be challenging so how can we",
    "start": "477400",
    "end": "479360"
  },
  {
    "text": "make this memory access more efficient",
    "start": "479360",
    "end": "481800"
  },
  {
    "text": "Here Comes The Magic of linear algebra",
    "start": "481800",
    "end": "484080"
  },
  {
    "text": "each entry in the result Matrix CI",
    "start": "484080",
    "end": "486000"
  },
  {
    "text": "equals to the sum of a k times bkj for K",
    "start": "486000",
    "end": "488879"
  },
  {
    "text": "from Z to n classic but if we divide the",
    "start": "488879",
    "end": "491240"
  },
  {
    "text": "Matrix I have never heard someone say",
    "start": "491240",
    "end": "493080"
  },
  {
    "text": "that in such a swift way I mean he just",
    "start": "493080",
    "end": "496039"
  },
  {
    "text": "tossed out that quick",
    "start": "496039",
    "end": "498199"
  },
  {
    "text": "math so quick and mathy like that was",
    "start": "498199",
    "end": "501120"
  },
  {
    "text": "just like the most",
    "start": "501120",
    "end": "502520"
  },
  {
    "text": "natural it was that was it was it was",
    "start": "502520",
    "end": "506039"
  },
  {
    "text": "beautiful out blocks the entry is still",
    "start": "506039",
    "end": "508720"
  },
  {
    "text": "equal to the of multiplication within",
    "start": "508720",
    "end": "510479"
  },
  {
    "text": "each block and when you really think",
    "start": "510479",
    "end": "512320"
  },
  {
    "text": "about it you'll find we are actually",
    "start": "512320",
    "end": "513919"
  },
  {
    "text": "doing matrix multiplication in blocks",
    "start": "513919",
    "end": "516120"
  },
  {
    "text": "each block multiplication is essentially",
    "start": "516120",
    "end": "517800"
  },
  {
    "text": "another smaller matrix",
    "start": "517800",
    "end": "519240"
  },
  {
    "text": "multiplication why is this useful well",
    "start": "519240",
    "end": "522279"
  },
  {
    "text": "imagine if we choose a block size that's",
    "start": "522279",
    "end": "523719"
  },
  {
    "text": "small enough to Fe entirely inside the",
    "start": "523719",
    "end": "525360"
  },
  {
    "text": "cache ideally by doing so we only need",
    "start": "525360",
    "end": "528360"
  },
  {
    "text": "to access each entry in The Matrix L",
    "start": "528360",
    "end": "530120"
  },
  {
    "text": "times instead of n times take a look at",
    "start": "530120",
    "end": "532959"
  },
  {
    "text": "this code snippet while it appear to",
    "start": "532959",
    "end": "535320"
  },
  {
    "text": "have more nasty Loops the total number",
    "start": "535320",
    "end": "537160"
  },
  {
    "text": "of floating Point operations remain",
    "start": "537160",
    "end": "538680"
  },
  {
    "text": "unchanged",
    "start": "538680",
    "end": "540040"
  },
  {
    "text": "what we've achieved is a significant",
    "start": "540040",
    "end": "541760"
  },
  {
    "text": "improve in the memory access pattern",
    "start": "541760",
    "end": "543640"
  },
  {
    "text": "resulting in a better temporal locality",
    "start": "543640",
    "end": "546240"
  },
  {
    "text": "by breaking down the matrix",
    "start": "546240",
    "end": "547320"
  },
  {
    "text": "multiplication into smaller and cach",
    "start": "547320",
    "end": "549079"
  },
  {
    "text": "friendly blocks we can maximize the",
    "start": "549079",
    "end": "551040"
  },
  {
    "text": "ReUse of data storing in Cache thereby",
    "start": "551040",
    "end": "553720"
  },
  {
    "text": "accelerating our gem algorithm that's",
    "start": "553720",
    "end": "556160"
  },
  {
    "text": "enough for the concept let's turn our",
    "start": "556160",
    "end": "558040"
  },
  {
    "text": "attention to the Practical side",
    "start": "558040",
    "end": "560279"
  },
  {
    "text": "performance sadly using blocked Jam can",
    "start": "560279",
    "end": "562839"
  },
  {
    "text": "be a little bit more challenging than",
    "start": "562839",
    "end": "564040"
  },
  {
    "text": "the transposed gem since you need to",
    "start": "564040",
    "end": "566120"
  },
  {
    "text": "decide what block size to",
    "start": "566120",
    "end": "567880"
  },
  {
    "text": "use you also have five for",
    "start": "567880",
    "end": "573920"
  },
  {
    "text": "Loops it's not just that you have to",
    "start": "574519",
    "end": "576920"
  },
  {
    "text": "decide the you got all five for Loops",
    "start": "576920",
    "end": "579399"
  },
  {
    "text": "really easy to screw up",
    "start": "579399",
    "end": "581440"
  },
  {
    "text": "there remember the actual number of",
    "start": "581440",
    "end": "583920"
  },
  {
    "text": "memory accesses is the product of total",
    "start": "583920",
    "end": "586120"
  },
  {
    "text": "size of two matrices q and squ and the",
    "start": "586120",
    "end": "588600"
  },
  {
    "text": "number of memory access for each entry L",
    "start": "588600",
    "end": "591760"
  },
  {
    "text": "choosing a small block size will resting",
    "start": "591760",
    "end": "593519"
  },
  {
    "text": "a large block number L therefore the",
    "start": "593519",
    "end": "596200"
  },
  {
    "text": "total number of memory access to and",
    "start": "596200",
    "end": "597760"
  },
  {
    "text": "square L can approach the the worst case",
    "start": "597760",
    "end": "599640"
  },
  {
    "text": "memory access time to enclude okay on",
    "start": "599640",
    "end": "602560"
  },
  {
    "text": "the other hand selecting a block size",
    "start": "602560",
    "end": "604399"
  },
  {
    "text": "that's too large to be inside a cache",
    "start": "604399",
    "end": "606240"
  },
  {
    "text": "May negate the advantage of using blocks",
    "start": "606240",
    "end": "608040"
  },
  {
    "text": "all together in practice different",
    "start": "608040",
    "end": "610800"
  },
  {
    "text": "machines may prefer different block",
    "start": "610800",
    "end": "612200"
  },
  {
    "text": "sizes okay and the only way to find the",
    "start": "612200",
    "end": "614200"
  },
  {
    "text": "best block size is through",
    "start": "614200",
    "end": "616160"
  },
  {
    "text": "experimentation another important",
    "start": "616160",
    "end": "617800"
  },
  {
    "text": "difference between the block jam and",
    "start": "617800",
    "end": "619079"
  },
  {
    "text": "transposed gam is well we don't need to",
    "start": "619079",
    "end": "621440"
  },
  {
    "text": "transpose anymore our goal is to feed",
    "start": "621440",
    "end": "623760"
  },
  {
    "text": "the entire block inside a cache moreover",
    "start": "623760",
    "end": "626920"
  },
  {
    "text": "people often tend to choose block sizes",
    "start": "626920",
    "end": "628560"
  },
  {
    "text": "that are in multiple of cash line so",
    "start": "628560",
    "end": "631200"
  },
  {
    "start": "630000",
    "end": "780000"
  },
  {
    "text": "transposing the Matrix won't improve the",
    "start": "631200",
    "end": "633079"
  },
  {
    "text": "performance right let's transpose it to",
    "start": "633079",
    "end": "636120"
  },
  {
    "text": "see what happened anyway I have never",
    "start": "636120",
    "end": "639360"
  },
  {
    "text": "had to optimize something to this level",
    "start": "639360",
    "end": "642120"
  },
  {
    "text": "when I look at this this just looks like",
    "start": "642120",
    "end": "643760"
  },
  {
    "text": "I mean none of it is crazy surprising",
    "start": "643760",
    "end": "646440"
  },
  {
    "text": "right like we all know that you want to",
    "start": "646440",
    "end": "648959"
  },
  {
    "text": "exist in in in as small you know you",
    "start": "648959",
    "end": "651519"
  },
  {
    "text": "want to exist in the most memory",
    "start": "651519",
    "end": "654079"
  },
  {
    "text": "efficient way but to actually like I've",
    "start": "654079",
    "end": "656519"
  },
  {
    "text": "never had anything at my job where this",
    "start": "656519",
    "end": "658160"
  },
  {
    "text": "is something I've had had to do right",
    "start": "658160",
    "end": "659959"
  },
  {
    "text": "I've never had a locality problem and so",
    "start": "659959",
    "end": "662079"
  },
  {
    "text": "it's it's very interesting I mean this",
    "start": "662079",
    "end": "663399"
  },
  {
    "text": "this seems like this is like the game",
    "start": "663399",
    "end": "664880"
  },
  {
    "text": "engine work in my head this is what I",
    "start": "664880",
    "end": "666839"
  },
  {
    "text": "assume this is like this is ECS stuff",
    "start": "666839",
    "end": "669680"
  },
  {
    "text": "this is where like the real optimization",
    "start": "669680",
    "end": "671839"
  },
  {
    "text": "happens the things that you don't",
    "start": "671839",
    "end": "673600"
  },
  {
    "text": "actually really think about a lot uh it",
    "start": "673600",
    "end": "675959"
  },
  {
    "text": "reminds me also of like it probably this",
    "start": "675959",
    "end": "677560"
  },
  {
    "text": "is probably in some this type of",
    "start": "677560",
    "end": "679720"
  },
  {
    "text": "optimization this like making things",
    "start": "679720",
    "end": "681519"
  },
  {
    "text": "closer is also like the SME optimization",
    "start": "681519",
    "end": "683440"
  },
  {
    "text": "in V8 where they they do small integers",
    "start": "683440",
    "end": "686160"
  },
  {
    "text": "so if you have an array of integers that",
    "start": "686160",
    "end": "688320"
  },
  {
    "text": "are small you literally have an array of",
    "start": "688320",
    "end": "691519"
  },
  {
    "text": "integers in uh in V8 which is just going",
    "start": "691519",
    "end": "694839"
  },
  {
    "text": "to allow for pretty fast access whereas",
    "start": "694839",
    "end": "698040"
  },
  {
    "text": "you know in the oldie days it would have",
    "start": "698040",
    "end": "700600"
  },
  {
    "text": "to go to each integer and then hop to",
    "start": "700600",
    "end": "702639"
  },
  {
    "text": "each uh Heap offset where they stored it",
    "start": "702639",
    "end": "704880"
  },
  {
    "text": "in the Heap to be cleaned up now it",
    "start": "704880",
    "end": "706600"
  },
  {
    "text": "doesn't have to do that you know so",
    "start": "706600",
    "end": "708519"
  },
  {
    "text": "there's like a little bit of little",
    "start": "708519",
    "end": "709760"
  },
  {
    "text": "something there yeah I assume it's also",
    "start": "709760",
    "end": "711880"
  },
  {
    "text": "with any of the uh any of the amazings",
    "start": "711880",
    "end": "715240"
  },
  {
    "text": "um uh ml stuff ml is just one gigantic",
    "start": "715240",
    "end": "718519"
  },
  {
    "text": "linear equation continuously running",
    "start": "718519",
    "end": "720279"
  },
  {
    "text": "MLPs are just they're literally just",
    "start": "720279",
    "end": "723120"
  },
  {
    "text": "doing sweet sweet MLP stuff performance",
    "start": "723120",
    "end": "727720"
  },
  {
    "text": "increased again that's a little bit",
    "start": "727720",
    "end": "730600"
  },
  {
    "text": "unexpected as I mentioned earlier",
    "start": "730600",
    "end": "732839"
  },
  {
    "text": "transposing metrix speed doesn't",
    "start": "732839",
    "end": "734199"
  },
  {
    "text": "fundamentally change the cach line",
    "start": "734199",
    "end": "735760"
  },
  {
    "text": "utilization instead he improved the",
    "start": "735760",
    "end": "738079"
  },
  {
    "text": "performance by affecting another",
    "start": "738079",
    "end": "739320"
  },
  {
    "text": "parallel mechanism seemd these nuts you",
    "start": "739320",
    "end": "742480"
  },
  {
    "text": "might have notice that I added an open",
    "start": "742480",
    "end": "744160"
  },
  {
    "text": "mpcd macro just before the innermost",
    "start": "744160",
    "end": "746639"
  },
  {
    "text": "Loop the seemingly small addition enable",
    "start": "746639",
    "end": "749040"
  },
  {
    "text": "the compiler to leverage CD instructions",
    "start": "749040",
    "end": "751199"
  },
  {
    "text": "for do product calculations within the",
    "start": "751199",
    "end": "753040"
  },
  {
    "text": "blocks oh now if you've been following",
    "start": "753040",
    "end": "755600"
  },
  {
    "text": "my previous videos you are probably",
    "start": "755600",
    "end": "757399"
  },
  {
    "text": "familiar with Sim these capabilities you",
    "start": "757399",
    "end": "759839"
  },
  {
    "text": "can perform multiple floating Point",
    "start": "759839",
    "end": "761160"
  },
  {
    "text": "operations in a single CPU cycle but",
    "start": "761160",
    "end": "763600"
  },
  {
    "text": "there's a catch it depends on",
    "start": "763600",
    "end": "765480"
  },
  {
    "text": "efficiently loading data into SD",
    "start": "765480",
    "end": "767120"
  },
  {
    "text": "registers yeah for the block jam",
    "start": "767120",
    "end": "769880"
  },
  {
    "text": "without the inmost loop Direction only",
    "start": "769880",
    "end": "772160"
  },
  {
    "text": "aligns with Matrix a after transposing",
    "start": "772160",
    "end": "774880"
  },
  {
    "text": "Matrix B we can load both matrices into",
    "start": "774880",
    "end": "777160"
  },
  {
    "text": "CD registers easily now let's explore",
    "start": "777160",
    "end": "780399"
  },
  {
    "start": "780000",
    "end": "905000"
  },
  {
    "text": "another content intuitive but highly",
    "start": "780399",
    "end": "782079"
  },
  {
    "text": "effective optimization technique copying",
    "start": "782079",
    "end": "784120"
  },
  {
    "text": "blocks into local buffers in the code",
    "start": "784120",
    "end": "786440"
  },
  {
    "text": "you see we've made a significant change",
    "start": "786440",
    "end": "788360"
  },
  {
    "text": "by hardcoding the block size into the",
    "start": "788360",
    "end": "790320"
  },
  {
    "text": "orgm this provides the compiler with",
    "start": "790320",
    "end": "792600"
  },
  {
    "text": "more information for compile time",
    "start": "792600",
    "end": "794360"
  },
  {
    "text": "optimization okay however the real magic",
    "start": "794360",
    "end": "796880"
  },
  {
    "text": "lies in our ability to create local",
    "start": "796880",
    "end": "798639"
  },
  {
    "text": "copies of data for each block copying",
    "start": "798639",
    "end": "801160"
  },
  {
    "text": "data is often considered an expensive",
    "start": "801160",
    "end": "802839"
  },
  {
    "text": "operation but in this case it almost",
    "start": "802839",
    "end": "804920"
  },
  {
    "text": "doubles the performance again the reason",
    "start": "804920",
    "end": "807839"
  },
  {
    "text": "behind this approach is once again",
    "start": "807839",
    "end": "809839"
  },
  {
    "text": "related to cach",
    "start": "809839",
    "end": "811279"
  },
  {
    "text": "optimization notice I use the aligns",
    "start": "811279",
    "end": "813600"
  },
  {
    "text": "keyword when navigating the local buffer",
    "start": "813600",
    "end": "816040"
  },
  {
    "text": "this ensures that all local buffers",
    "start": "816040",
    "end": "817519"
  },
  {
    "text": "start at addresses that are multiple 64",
    "start": "817519",
    "end": "820120"
  },
  {
    "text": "which is the lens of The Cash Line on my",
    "start": "820120",
    "end": "821639"
  },
  {
    "text": "machine yeah remember that every time",
    "start": "821639",
    "end": "823880"
  },
  {
    "text": "you access an address the entire cach",
    "start": "823880",
    "end": "825959"
  },
  {
    "text": "line containing that address get loaded",
    "start": "825959",
    "end": "827440"
  },
  {
    "text": "into the cache by making sure that our",
    "start": "827440",
    "end": "829800"
  },
  {
    "text": "data structure is align with cach lines",
    "start": "829800",
    "end": "831880"
  },
  {
    "text": "we again increase The Cash Line",
    "start": "831880",
    "end": "834000"
  },
  {
    "text": "utilization the next reason we are using",
    "start": "834000",
    "end": "836000"
  },
  {
    "text": "local buffers here inside this OPM thre",
    "start": "836000",
    "end": "838839"
  },
  {
    "text": "private Mac I believe that's why rust",
    "start": "838839",
    "end": "840279"
  },
  {
    "text": "has in their Mac or in their strs like",
    "start": "840279",
    "end": "842480"
  },
  {
    "text": "if you do two8 bit uh uh members in a",
    "start": "842480",
    "end": "846959"
  },
  {
    "text": "rust struct it's still eight bytes or",
    "start": "846959",
    "end": "850440"
  },
  {
    "text": "it's system length bytes right uh times",
    "start": "850440",
    "end": "852680"
  },
  {
    "text": "two and so it won't be or not eight",
    "start": "852680",
    "end": "854959"
  },
  {
    "text": "bytes it'll be 16 bytes even though you",
    "start": "854959",
    "end": "856759"
  },
  {
    "text": "only are using two bytes technically",
    "start": "856759",
    "end": "859320"
  },
  {
    "text": "it's because it's always doing these",
    "start": "859320",
    "end": "862399"
  },
  {
    "text": "these uh larger offset because it's just",
    "start": "862399",
    "end": "863880"
  },
  {
    "text": "fast to read it's fast to put those",
    "start": "863880",
    "end": "865839"
  },
  {
    "text": "things there you might recall a",
    "start": "865839",
    "end": "867240"
  },
  {
    "text": "discussion about for sharing the video",
    "start": "867240",
    "end": "869720"
  },
  {
    "text": "when two threats try to access the data",
    "start": "869720",
    "end": "871399"
  },
  {
    "text": "on the same cach line performance can",
    "start": "871399",
    "end": "873639"
  },
  {
    "text": "plummet even without locks or other",
    "start": "873639",
    "end": "875839"
  },
  {
    "text": "software limitations the hardware often",
    "start": "875839",
    "end": "877920"
  },
  {
    "text": "interv to synchronize cach line between",
    "start": "877920",
    "end": "879800"
  },
  {
    "text": "different physical cores causing",
    "start": "879800",
    "end": "881440"
  },
  {
    "text": "performance",
    "start": "881440",
    "end": "882399"
  },
  {
    "text": "degradation to solve this issue we need",
    "start": "882399",
    "end": "885120"
  },
  {
    "text": "to guarantee that not only does each",
    "start": "885120",
    "end": "886639"
  },
  {
    "text": "threat have its own private data but",
    "start": "886639",
    "end": "888639"
  },
  {
    "text": "also these data blocks reside on",
    "start": "888639",
    "end": "890040"
  },
  {
    "text": "different cach lines I know it sounds a",
    "start": "890040",
    "end": "892120"
  },
  {
    "text": "little bit stupid when they said just",
    "start": "892120",
    "end": "893839"
  },
  {
    "text": "keep them on different cach line but the",
    "start": "893839",
    "end": "895880"
  },
  {
    "text": "solution is really that simple just use",
    "start": "895880",
    "end": "898040"
  },
  {
    "text": "the OPM threat private macro it copies a",
    "start": "898040",
    "end": "900800"
  },
  {
    "text": "private buffer for each threat response",
    "start": "900800",
    "end": "902680"
  },
  {
    "text": "and also handles the force sharing",
    "start": "902680",
    "end": "904000"
  },
  {
    "text": "concern perfectly looks good but there's",
    "start": "904000",
    "end": "906920"
  },
  {
    "start": "905000",
    "end": "1045000"
  },
  {
    "text": "actually one more problem we can solve",
    "start": "906920",
    "end": "908639"
  },
  {
    "text": "Matrix",
    "start": "908639",
    "end": "909759"
  },
  {
    "text": "transposition as discussed previously",
    "start": "909759",
    "end": "912399"
  },
  {
    "text": "the performance skin from transposing",
    "start": "912399",
    "end": "913959"
  },
  {
    "text": "Matrix B is mainly attributed to",
    "start": "913959",
    "end": "916040"
  },
  {
    "text": "achieving alignment with the innermost",
    "start": "916040",
    "end": "917560"
  },
  {
    "text": "CD Loop in both local a and local B",
    "start": "917560",
    "end": "920959"
  },
  {
    "text": "however what if we could achieve this",
    "start": "920959",
    "end": "922720"
  },
  {
    "text": "alignment without Matrix transposition",
    "start": "922720",
    "end": "925000"
  },
  {
    "text": "yeah it turns out we can okay if the",
    "start": "925000",
    "end": "927279"
  },
  {
    "text": "Matrix B is not transposed the coda look",
    "start": "927279",
    "end": "929639"
  },
  {
    "text": "like this but hold on a second there are",
    "start": "929639",
    "end": "932880"
  },
  {
    "text": "still two local buffers aligned the same",
    "start": "932880",
    "end": "934639"
  },
  {
    "text": "way local B and local C actually instead",
    "start": "934639",
    "end": "938560"
  },
  {
    "text": "of transposing the Matrix to let the",
    "start": "938560",
    "end": "940199"
  },
  {
    "text": "buffer align with the loop we can swap",
    "start": "940199",
    "end": "942399"
  },
  {
    "text": "the loop to let them align with the",
    "start": "942399",
    "end": "943839"
  },
  {
    "text": "buffer this adjustment doesn't affect",
    "start": "943839",
    "end": "945920"
  },
  {
    "text": "the computational logic of a rthm it",
    "start": "945920",
    "end": "948319"
  },
  {
    "text": "merely transform the aess pattern of the",
    "start": "948319",
    "end": "950079"
  },
  {
    "text": "buffer and that is that what I isn't",
    "start": "950079",
    "end": "952279"
  },
  {
    "text": "that what I said earlier we can instead",
    "start": "952279",
    "end": "953920"
  },
  {
    "text": "of copying we can just literally walk it",
    "start": "953920",
    "end": "955920"
  },
  {
    "text": "in the correct order pre-at I pre I",
    "start": "955920",
    "end": "959040"
  },
  {
    "text": "pre-at this one clearly pre-at this one",
    "start": "959040",
    "end": "962199"
  },
  {
    "text": "I knew it I knew it I knew the pre-at it",
    "start": "962199",
    "end": "965120"
  },
  {
    "text": "was going to happen it just felt right",
    "start": "965120",
    "end": "967199"
  },
  {
    "text": "oh man I mean that makes perfect sense",
    "start": "967199",
    "end": "969440"
  },
  {
    "text": "like if your goal is to access in a nice",
    "start": "969440",
    "end": "971440"
  },
  {
    "text": "linear way why copy all why transpose",
    "start": "971440",
    "end": "974639"
  },
  {
    "text": "when you could just access that way",
    "start": "974639",
    "end": "976199"
  },
  {
    "text": "who's the vtuber now this guy is now we",
    "start": "976199",
    "end": "979079"
  },
  {
    "text": "can get rid of the Annoying Matrix",
    "start": "979079",
    "end": "980519"
  },
  {
    "text": "transposition step there are also some",
    "start": "980519",
    "end": "982759"
  },
  {
    "text": "Minor Details you can find toing your",
    "start": "982759",
    "end": "984279"
  },
  {
    "text": "gem",
    "start": "984279",
    "end": "985160"
  },
  {
    "text": "implementation for example we can clear",
    "start": "985160",
    "end": "987639"
  },
  {
    "text": "localy less fre by moving the clearing",
    "start": "987639",
    "end": "989519"
  },
  {
    "text": "step one Loop outward all these efforts",
    "start": "989519",
    "end": "992000"
  },
  {
    "text": "led to a substantial performance",
    "start": "992000",
    "end": "993399"
  },
  {
    "text": "Improvement reducing the time needed to",
    "start": "993399",
    "end": "995319"
  },
  {
    "text": "process a 1K Square matrices from 1900",
    "start": "995319",
    "end": "998079"
  },
  {
    "text": "milliseconds to Just Around 16",
    "start": "998079",
    "end": "1000279"
  },
  {
    "text": "milliseconds that's an impressive",
    "start": "1000279",
    "end": "1002079"
  },
  {
    "text": "Improvement I have to say I wonder how",
    "start": "1002079",
    "end": "1004120"
  },
  {
    "text": "does this thing scale for just like 4x4s",
    "start": "1004120",
    "end": "1007040"
  },
  {
    "text": "right so like if you're doing game",
    "start": "1007040",
    "end": "1008279"
  },
  {
    "text": "programming does this all scale at that",
    "start": "1008279",
    "end": "1010920"
  },
  {
    "text": "point or is n so small that it actually",
    "start": "1010920",
    "end": "1013319"
  },
  {
    "text": "makes no real difference or even hurts",
    "start": "1013319",
    "end": "1015279"
  },
  {
    "text": "it at a smaller level like you know cuz",
    "start": "1015279",
    "end": "1017000"
  },
  {
    "text": "sometimes optimizations don't always",
    "start": "1017000",
    "end": "1018560"
  },
  {
    "text": "always they don't always work uniformly",
    "start": "1018560",
    "end": "1021680"
  },
  {
    "text": "they work at certain sizes scales",
    "start": "1021680",
    "end": "1024120"
  },
  {
    "text": "linearly I think I mean does it no real",
    "start": "1024120",
    "end": "1026160"
  },
  {
    "text": "difference I mean because my my real",
    "start": "1026160",
    "end": "1027520"
  },
  {
    "text": "question is like if it it may not matter",
    "start": "1027520",
    "end": "1029678"
  },
  {
    "text": "at all on small amounts right I am wrong",
    "start": "1029679",
    "end": "1032839"
  },
  {
    "text": "I it turns out I am actually wrong no I",
    "start": "1032839",
    "end": "1034720"
  },
  {
    "text": "mean I'm just curious 4x4 fit in cash",
    "start": "1034720",
    "end": "1037480"
  },
  {
    "text": "okay that is what she said she she did",
    "start": "1037480",
    "end": "1040000"
  },
  {
    "text": "say that a 4x4 always fits in cash",
    "start": "1040000",
    "end": "1042600"
  },
  {
    "text": "especially considering there's no stuff",
    "start": "1042600",
    "end": "1043959"
  },
  {
    "text": "like fancy GPU",
    "start": "1043959",
    "end": "1045720"
  },
  {
    "start": "1045000",
    "end": "1125000"
  },
  {
    "text": "acceleration the bad news is that we",
    "start": "1045720",
    "end": "1048120"
  },
  {
    "text": "probably don't want to optimize gam or",
    "start": "1048120",
    "end": "1049640"
  },
  {
    "text": "any other linear algebra operations",
    "start": "1049640",
    "end": "1051240"
  },
  {
    "text": "yourself because there's a much better",
    "start": "1051240",
    "end": "1053320"
  },
  {
    "text": "option called basic linear algebra sub",
    "start": "1053320",
    "end": "1055160"
  },
  {
    "text": "programs the Intel mkl implementation of",
    "start": "1055160",
    "end": "1057799"
  },
  {
    "text": "Bas can get you only 2 milliseconds for",
    "start": "1057799",
    "end": "1060200"
  },
  {
    "text": "a 1K resolution Square Matrix Jam Plus",
    "start": "1060200",
    "end": "1063840"
  },
  {
    "text": "it also support Matrix multiplications",
    "start": "1063840",
    "end": "1065600"
  },
  {
    "text": "between nonsquare matrices unlike the",
    "start": "1065600",
    "end": "1067440"
  },
  {
    "text": "crappy demo we showed today but you get",
    "start": "1067440",
    "end": "1069440"
  },
  {
    "text": "a point that demo is great is first off",
    "start": "1069440",
    "end": "1071840"
  },
  {
    "text": "that demo was fantastic okay great job",
    "start": "1071840",
    "end": "1074360"
  },
  {
    "text": "on that demo second two milliseconds and",
    "start": "1074360",
    "end": "1077440"
  },
  {
    "text": "Vin by the way uh what clearly clearly",
    "start": "1077440",
    "end": "1080880"
  },
  {
    "text": "looks like uh uh lazy Vim by the way",
    "start": "1080880",
    "end": "1085679"
  },
  {
    "text": "lunar Vim is this lunar Vim okay maybe",
    "start": "1085679",
    "end": "1088320"
  },
  {
    "text": "simar approaches we use today somewhere",
    "start": "1088320",
    "end": "1090240"
  },
  {
    "text": "in their proprietary code base you said",
    "start": "1090240",
    "end": "1092960"
  },
  {
    "text": "you want to know what makes it even a",
    "start": "1092960",
    "end": "1094360"
  },
  {
    "text": "times faster than the best we could do",
    "start": "1094360",
    "end": "1096559"
  },
  {
    "text": "well I did learn something doing that",
    "start": "1096559",
    "end": "1097960"
  },
  {
    "text": "high throughput optimization course I",
    "start": "1097960",
    "end": "1099440"
  },
  {
    "text": "took lot of Master including separating",
    "start": "1099440",
    "end": "1101799"
  },
  {
    "text": "block Hots spot into another module and",
    "start": "1101799",
    "end": "1103720"
  },
  {
    "text": "using assembly intrinsics to optimize it",
    "start": "1103720",
    "end": "1105559"
  },
  {
    "text": "like crazy and my professor also",
    "start": "1105559",
    "end": "1107640"
  },
  {
    "text": "mentioned that even loading data into CD",
    "start": "1107640",
    "end": "1109480"
  },
  {
    "text": "registers in different orders can affect",
    "start": "1109480",
    "end": "1111440"
  },
  {
    "text": "the performance but I never use them in",
    "start": "1111440",
    "end": "1113960"
  },
  {
    "text": "my own project so I say I doubt if I can",
    "start": "1113960",
    "end": "1116480"
  },
  {
    "text": "tell you anything about it anyway if you",
    "start": "1116480",
    "end": "1119360"
  },
  {
    "text": "enjoyed this video remember to subscribe",
    "start": "1119360",
    "end": "1121159"
  },
  {
    "text": "to the channel as always I hope you cash",
    "start": "1121159",
    "end": "1123480"
  },
  {
    "text": "well and see you in the next",
    "start": "1123480",
    "end": "1125480"
  },
  {
    "text": "one I hope you cash well what a great",
    "start": "1125480",
    "end": "1129679"
  },
  {
    "text": "give that thumbs up give that subscribe",
    "start": "1129679",
    "end": "1132039"
  },
  {
    "text": "depth buff buffer that was a great video",
    "start": "1132039",
    "end": "1135240"
  },
  {
    "text": "that was really really really well done",
    "start": "1135240",
    "end": "1138600"
  },
  {
    "text": "I think the thing that makes it so good",
    "start": "1138600",
    "end": "1140000"
  },
  {
    "text": "is that everything he stated was",
    "start": "1140000",
    "end": "1142039"
  },
  {
    "text": "extremely difficult right everything how",
    "start": "1142039",
    "end": "1144720"
  },
  {
    "text": "many people are you subscribed to too",
    "start": "1144720",
    "end": "1145960"
  },
  {
    "text": "many but everything he talked about was",
    "start": "1145960",
    "end": "1147880"
  },
  {
    "text": "like it's a really difficult topic and",
    "start": "1147880",
    "end": "1150400"
  },
  {
    "text": "he did really good that was surprising",
    "start": "1150400",
    "end": "1152240"
  },
  {
    "text": "I'm actually surprised at how much",
    "start": "1152240",
    "end": "1154120"
  },
  {
    "text": "better he did that and also I think the",
    "start": "1154120",
    "end": "1155960"
  },
  {
    "text": "second thing is that you see this all",
    "start": "1155960",
    "end": "1157240"
  },
  {
    "text": "the time which is people make like I",
    "start": "1157240",
    "end": "1159280"
  },
  {
    "text": "think it's very easy for anybody to see",
    "start": "1159280",
    "end": "1162039"
  },
  {
    "text": "the matrix multiplication algorithm and",
    "start": "1162039",
    "end": "1164760"
  },
  {
    "text": "just be like well I mean like can you",
    "start": "1164760",
    "end": "1166200"
  },
  {
    "text": "really make it that much faster like",
    "start": "1166200",
    "end": "1167840"
  },
  {
    "text": "even if spend months optimizing it can",
    "start": "1167840",
    "end": "1169960"
  },
  {
    "text": "we really make it that much faster and",
    "start": "1169960",
    "end": "1171880"
  },
  {
    "text": "that thing went from like 2 seconds or",
    "start": "1171880",
    "end": "1173799"
  },
  {
    "text": "yeah 2 seconds to 2 milliseconds like",
    "start": "1173799",
    "end": "1175919"
  },
  {
    "text": "that Library made it a thousand times",
    "start": "1175919",
    "end": "1177720"
  },
  {
    "text": "faster and so I think sometimes you can",
    "start": "1177720",
    "end": "1179840"
  },
  {
    "text": "make things quite a bit faster by",
    "start": "1179840",
    "end": "1181440"
  },
  {
    "text": "playing around and having you know not",
    "start": "1181440",
    "end": "1184039"
  },
  {
    "text": "everything can be optimized that way",
    "start": "1184039",
    "end": "1185400"
  },
  {
    "text": "obviously if you're working with the web",
    "start": "1185400",
    "end": "1186480"
  },
  {
    "text": "server you really got to you know it's",
    "start": "1186480",
    "end": "1188480"
  },
  {
    "text": "not going to be the same situation",
    "start": "1188480",
    "end": "1190360"
  },
  {
    "text": "you're not talking about a specific",
    "start": "1190360",
    "end": "1191720"
  },
  {
    "text": "algorithm in which you're like looking",
    "start": "1191720",
    "end": "1193280"
  },
  {
    "text": "at the assembly instructions instead",
    "start": "1193280",
    "end": "1194919"
  },
  {
    "text": "it's like how are you managing memory uh",
    "start": "1194919",
    "end": "1196919"
  },
  {
    "text": "are you creating a lot of garbage how",
    "start": "1196919",
    "end": "1198559"
  },
  {
    "text": "often are you in garbage collection how",
    "start": "1198559",
    "end": "1200360"
  },
  {
    "text": "often are you returning back to the",
    "start": "1200360",
    "end": "1201640"
  },
  {
    "text": "runtime what's going on like how much",
    "start": "1201640",
    "end": "1203919"
  },
  {
    "text": "time can you spend just within just",
    "start": "1203919",
    "end": "1206240"
  },
  {
    "text": "doing your code and doing the things you",
    "start": "1206240",
    "end": "1207760"
  },
  {
    "text": "need to do and then getting out you know",
    "start": "1207760",
    "end": "1210240"
  },
  {
    "text": "there's definitely a whole slew of",
    "start": "1210240",
    "end": "1212120"
  },
  {
    "text": "things that can be very important yeah",
    "start": "1212120",
    "end": "1213640"
  },
  {
    "text": "the animations were very very good how",
    "start": "1213640",
    "end": "1215400"
  },
  {
    "text": "often injs no this is actually a really",
    "start": "1215400",
    "end": "1217159"
  },
  {
    "text": "good one you may not realize how",
    "start": "1217159",
    "end": "1218840"
  },
  {
    "text": "important this one is there are",
    "start": "1218840",
    "end": "1221200"
  },
  {
    "text": "libraries that are written in native",
    "start": "1221200",
    "end": "1222960"
  },
  {
    "text": "code that can be used often in",
    "start": "1222960",
    "end": "1224720"
  },
  {
    "text": "JavaScript and if you know them and",
    "start": "1224720",
    "end": "1226440"
  },
  {
    "text": "you're doing a large chunk of your work",
    "start": "1226440",
    "end": "1227919"
  },
  {
    "text": "in these native libraries it can be",
    "start": "1227919",
    "end": "1230039"
  },
  {
    "text": "really really effective to replace them",
    "start": "1230039",
    "end": "1232799"
  },
  {
    "text": "and not use JavaScript at all and that's",
    "start": "1232799",
    "end": "1235760"
  },
  {
    "text": "most specifically true in node in bun",
    "start": "1235760",
    "end": "1239600"
  },
  {
    "text": "it's less it's it seems to be less of an",
    "start": "1239600",
    "end": "1242039"
  },
  {
    "text": "issue you don't get nearly the same wins",
    "start": "1242039",
    "end": "1244520"
  },
  {
    "text": "because bun just has a really good",
    "start": "1244520",
    "end": "1246280"
  },
  {
    "text": "optimization from JavaScript to the",
    "start": "1246280",
    "end": "1248320"
  },
  {
    "text": "runtime and so a lot of those wins go",
    "start": "1248320",
    "end": "1250400"
  },
  {
    "text": "down so spending more time in Native",
    "start": "1250400",
    "end": "1252840"
  },
  {
    "text": "doesn't it it's not like a 10x increase",
    "start": "1252840",
    "end": "1255280"
  },
  {
    "text": "right you're getting like a 2 to 3x",
    "start": "1255280",
    "end": "1256960"
  },
  {
    "text": "increase uh bun just have a good jit",
    "start": "1256960",
    "end": "1258559"
  },
  {
    "text": "compiler it's literally the I mean it's",
    "start": "1258559",
    "end": "1260159"
  },
  {
    "text": "it's it's JSC versus V8 I think V8 if",
    "start": "1260159",
    "end": "1262559"
  },
  {
    "text": "I'm not mistaken is better than bun so",
    "start": "1262559",
    "end": "1265400"
  },
  {
    "text": "to say that bun has something that's",
    "start": "1265400",
    "end": "1267159"
  },
  {
    "text": "much better I don't know if that's true",
    "start": "1267159",
    "end": "1268720"
  },
  {
    "text": "right I can't tell you if that's true or",
    "start": "1268720",
    "end": "1270679"
  },
  {
    "text": "false because I don't know enough about",
    "start": "1270679",
    "end": "1272080"
  },
  {
    "text": "JSC versus V8 uh anyways the",
    "start": "1272080",
    "end": "1276080"
  },
  {
    "text": "name is the primagen I'm not going to do",
    "start": "1276080",
    "end": "1278400"
  },
  {
    "text": "the cachen okay we're not doing it",
    "start": "1278400",
    "end": "1282039"
  }
]