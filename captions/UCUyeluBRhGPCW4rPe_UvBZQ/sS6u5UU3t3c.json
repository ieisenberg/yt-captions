[
  {
    "text": "why I prefer exceptions to air values I'm very excited about this because um I think exceptions are in fact the devil I",
    "start": "240",
    "end": "6720"
  },
  {
    "text": "can think of one use case that I like him for one why I prefer exceptions to error values exceptions are often better",
    "start": "6720",
    "end": "12679"
  },
  {
    "text": "way to handle errors than returning them as values hu TOA on that my friends okay",
    "start": "12679",
    "end": "18320"
  },
  {
    "text": "I I I am not I am not on this side I am not on this side at all uh uh we oh yeah",
    "start": "18320",
    "end": "25160"
  },
  {
    "text": "by the way if you're learning to do uh game development develop. games from Thor is very very good uh it has like",
    "start": "25160",
    "end": "30880"
  },
  {
    "text": "every single possible link and all that it's a great place to start from it's like it can actually start from the beginning right all right back into this",
    "start": "30880",
    "end": "37680"
  },
  {
    "text": "we argue that traditional exceptions provide better user and developer experience and show that they even result in Faster execution I thought uh",
    "start": "37680",
    "end": "44800"
  },
  {
    "text": "I thought there was like a a non-optimization case when there was a throw exception in there faster",
    "start": "44800",
    "end": "49879"
  },
  {
    "text": "exception I know I'm curious about this okay okay Phillip you let me know why I'm ready hey you know what let's go in",
    "start": "49879",
    "end": "55359"
  },
  {
    "text": "with an open mind everybody on three let's breathe in",
    "start": "55359",
    "end": "60280"
  },
  {
    "text": "waft it waft it and breathe",
    "start": "62079",
    "end": "66600"
  },
  {
    "text": "out bad start but I'm willing okay good air handling is the key to robust programs actually you know what this is",
    "start": "67080",
    "end": "73280"
  },
  {
    "text": "so true and for those that were here yesterday when we created neovim to spawn a go server that then takes in",
    "start": "73280",
    "end": "79520"
  },
  {
    "text": "arguments and pass it back to neovim execute things in neovim and then pass it back through the ghost server and",
    "start": "79520",
    "end": "84600"
  },
  {
    "text": "then back to local neovim so that uh TJ and I could both program at the same time Lua was much harder to get right",
    "start": "84600",
    "end": "91439"
  },
  {
    "text": "than go because go Air's in line very easy you can just",
    "start": "91439",
    "end": "97640"
  },
  {
    "text": "do them whereas Lua has this kind of weird like Middle Ground approach which",
    "start": "97640",
    "end": "103040"
  },
  {
    "text": "is you know it is an error unless if you pe call it if you pe call it that it does errors as values but if you don't",
    "start": "103040",
    "end": "108719"
  },
  {
    "text": "it throws it up but often dreaded by programmers because there is always one more Edge case traditional",
    "start": "108719",
    "end": "113880"
  },
  {
    "text": "objectoriented programming languages use special exception classes that can be thrown to break the regular control flow",
    "start": "113880",
    "end": "119600"
  },
  {
    "text": "for immediate error reporting let's take a quick look at an example that explores",
    "start": "119600",
    "end": "125000"
  },
  {
    "text": "airs safe integer division classic but I mean if you're going to",
    "start": "125000",
    "end": "130520"
  },
  {
    "text": "really do this then you also should probably take this out during production mode versus you know build mode blah blah",
    "start": "130520",
    "end": "137879"
  },
  {
    "text": "newer languages tend to favor functional style error reporting and encode errors in their return type for example go",
    "start": "137879",
    "end": "143920"
  },
  {
    "text": "encodes the error in the return type with res ER Tuple and rust returns a",
    "start": "143920",
    "end": "149920"
  },
  {
    "text": "result te the some type of a result and error even older languages such as C++ now include error values in their",
    "start": "149920",
    "end": "156160"
  },
  {
    "text": "standard library with expected oh nice we can do expected oh very cool hey what",
    "start": "156160",
    "end": "161920"
  },
  {
    "text": "a great way to do things nice nice I like",
    "start": "161920",
    "end": "168480"
  },
  {
    "text": "it these functional style airs are intended to make uh make air handling more explicit by the way I'm I'm I'm I'm",
    "start": "168480",
    "end": "175200"
  },
  {
    "text": "desperately holding my opinion right now I want you to know this I'm trying my",
    "start": "175200",
    "end": "180400"
  },
  {
    "text": "hardest not to come in here and try to color how I'm reading this article I'm",
    "start": "180400",
    "end": "185760"
  },
  {
    "text": "trying very hard this article is written as prime prime bait I can I'm seething",
    "start": "185760",
    "end": "190959"
  },
  {
    "text": "seething seething right now I'm holding back let's just let's just wait still I rarely see code that users returns as uh",
    "start": "190959",
    "end": "199640"
  },
  {
    "text": "hold on all right these functional style errors are intended to make error handling more explicit and to force",
    "start": "199640",
    "end": "206120"
  },
  {
    "text": "programmers to think about errors still I rarely see code that uses erors as value uh as return values Fair better",
    "start": "206120",
    "end": "213400"
  },
  {
    "text": "than exceptions quite the opposite in fact my antidotal experience is that Rus code for example has more calls to",
    "start": "213400",
    "end": "219239"
  },
  {
    "text": "unwrap than I than I'd like okay but that's like a that is a peer skill issue",
    "start": "219239",
    "end": "225319"
  },
  {
    "text": "if you use unwrap pure skill issue now expect is a great way to have a",
    "start": "225319",
    "end": "231519"
  },
  {
    "text": "effectively an assertion a runtime assertion about the state of the world saying I expect this to exist there is",
    "start": "231519",
    "end": "238120"
  },
  {
    "text": "no other universe that exists other than this and then you can even give a nice error message like lock",
    "start": "238120",
    "end": "243599"
  },
  {
    "text": "right if you use a mutex on your server to house some sort of data and the lock",
    "start": "243599",
    "end": "248959"
  },
  {
    "text": "gets poisoned like that's it that's the end of your that's you are in a terrible place you are in a terrible terrible",
    "start": "248959",
    "end": "256880"
  },
  {
    "text": "place um the problem here is that a simply unwrapping result will crash the",
    "start": "256880",
    "end": "262160"
  },
  {
    "text": "program on errors that could have been a user visible error message with exceptions yeah but again this is a this",
    "start": "262160",
    "end": "268840"
  },
  {
    "text": "is not a good this is this is not a good argument okay this is just a misusage of",
    "start": "268840",
    "end": "274120"
  },
  {
    "text": "rust and if you actually get into a part if you get to the point where a program",
    "start": "274120",
    "end": "279280"
  },
  {
    "text": "has no other option than to crash is it some sort of message should be delivered",
    "start": "279280",
    "end": "285199"
  },
  {
    "text": "yeah this is not a good argument I want to see a good argument here so a result types a mistake it depends they are",
    "start": "285199",
    "end": "291120"
  },
  {
    "text": "definitely useful but there are many cases where exceptions are much better fit your pro okay show let's see let's",
    "start": "291120",
    "end": "296240"
  },
  {
    "text": "see some I want to see some your programming language of choice should allow you to use exceptions however in",
    "start": "296240",
    "end": "302080"
  },
  {
    "text": "these languages exceptions somehow have an undeserved bad reputation and cannot be used I argue that exceptions are",
    "start": "302080",
    "end": "307919"
  },
  {
    "text": "easier to work with as a programmer and result in better user facing error messages they're also more performant in",
    "start": "307919",
    "end": "313560"
  },
  {
    "text": "an example we'll see later a C++ implementation using except exceptions is about four times faster than rust",
    "start": "313560",
    "end": "320120"
  },
  {
    "text": "okay I think that's also going to be a hard one but okay okay hey let's let the",
    "start": "320120",
    "end": "325319"
  },
  {
    "text": "man cook okay we're cooking we're cook I we're cooking exceptions are much easier",
    "start": "325319",
    "end": "331199"
  },
  {
    "text": "to work with keep in mind that I am writing this from the perspective of someone working on serers side code that maintains a significant amount of",
    "start": "331199",
    "end": "337000"
  },
  {
    "text": "in-memory State okay cool this means that I prioritize keeping the server process running and would rather have a",
    "start": "337000",
    "end": "343000"
  },
  {
    "text": "single request fail than the entire application crash okay that's fair fair to meet uptime slas I want to handle any",
    "start": "343000",
    "end": "349840"
  },
  {
    "text": "failure gracefully yes even the ones where the the abstract machine of our",
    "start": "349840",
    "end": "354919"
  },
  {
    "text": "programming language fails and the real system limits show up memory isn't infinite CPUs can process all integers",
    "start": "354919",
    "end": "361720"
  },
  {
    "text": "and Santa isn't real buddy can't be just coming in here",
    "start": "361720",
    "end": "366960"
  },
  {
    "text": "like that while my perspective certainly isn't fully objective I think other systems would could benefit from similar",
    "start": "366960",
    "end": "373599"
  },
  {
    "text": "approach even for front-end applications I would rather see error dialogue than a crash and loss of State um again none of",
    "start": "373599",
    "end": "380919"
  },
  {
    "text": "these none of this none of this is saying anything thus far and what I mean",
    "start": "380919",
    "end": "386520"
  },
  {
    "text": "by that is that I personally prefer erors as values and the reason being in",
    "start": "386520",
    "end": "393319"
  },
  {
    "text": "which is exactly what he is stating right here I need to know every last",
    "start": "393319",
    "end": "398360"
  },
  {
    "text": "thing that could potentially error and I want to be able to handle that error gracefully all the way through a throne",
    "start": "398360",
    "end": "406840"
  },
  {
    "text": "exception unwinds where you're at and you could be in the middle of a function",
    "start": "406840",
    "end": "412960"
  },
  {
    "text": "and if you have an unknown exception being thrown you could leave yourself in an odd State okay nice sh dude Can't Let",
    "start": "412960",
    "end": "419960"
  },
  {
    "text": "It Go emote mode this long I I actually want to hear people's arguments here this is too long this is too long you're",
    "start": "419960",
    "end": "426840"
  },
  {
    "text": "abusing your you're you're abusing your privileges here too long why can't you do that with catching exceptions the",
    "start": "426840",
    "end": "433080"
  },
  {
    "text": "reason why you can't do that with catching exceptions is actually rather rather trivial here let me let me",
    "start": "433080",
    "end": "438240"
  },
  {
    "text": "explain why is that when it comes to catching exceptions why aren't you becoming bigger there you go uh oh man",
    "start": "438240",
    "end": "444800"
  },
  {
    "text": "that is that is way too tiny that is way too tiny uh I don't know I just gave I",
    "start": "444800",
    "end": "450440"
  },
  {
    "text": "just gave random numbers all right the reason why it's harder with uh catch exceptions is that let's just say we",
    "start": "450440",
    "end": "456000"
  },
  {
    "text": "have a a theoretical function named Foo that can air all right now in languages like JavaScript you actually don't know",
    "start": "456000",
    "end": "461720"
  },
  {
    "text": "if this thing can or cannot air all right it's a complete surprise for you so you don't actually even know in other",
    "start": "461720",
    "end": "467759"
  },
  {
    "text": "languages like Java it'll have some sort of annotation to it a little bit different uh but if you call this and",
    "start": "467759",
    "end": "473840"
  },
  {
    "text": "say you've you're down the stack a b c and then this function has an ex ception",
    "start": "473840",
    "end": "480360"
  },
  {
    "text": "depending on the state here depending on the state here especially if you have a high like as he was as he was originally",
    "start": "480360",
    "end": "485759"
  },
  {
    "text": "stating right here is he has a significant amount of inmemory State server so if an exception happens here",
    "start": "485759",
    "end": "493360"
  },
  {
    "text": "where is it caught can you do you even know you can't know because you would",
    "start": "493360",
    "end": "499280"
  },
  {
    "text": "have to have the understanding of what came before it so it's actually impossible for you to know is it a is it",
    "start": "499280",
    "end": "504960"
  },
  {
    "text": "B is it C and if an exception happens within fu and you do not have it handled",
    "start": "504960",
    "end": "511000"
  },
  {
    "text": "or say within C and you do not have it handled well guess what whatever state you have changed in C that does not have",
    "start": "511000",
    "end": "517880"
  },
  {
    "text": "an unwinding will be will have some weird experience later on in the program",
    "start": "517880",
    "end": "523039"
  },
  {
    "text": "whereas errors as values you have to make a decision at that point how you",
    "start": "523039",
    "end": "529040"
  },
  {
    "text": "want to handle an error if there is an an error do you crash the request and go",
    "start": "529040",
    "end": "534480"
  },
  {
    "text": "straight to 500 do you handle that and give some sort of default value out you",
    "start": "534480",
    "end": "539600"
  },
  {
    "text": "have to make all these decisions and if you want true good exception handling what you'll find is that you litter your",
    "start": "539600",
    "end": "545680"
  },
  {
    "text": "codebase with try catch everywhere you cannot just rely on top level stuff especially if you have any sort of",
    "start": "545680",
    "end": "551720"
  },
  {
    "text": "inmemory inmemory State you don't have to handle it at foo you could return well that's the nice part is when you",
    "start": "551720",
    "end": "557320"
  },
  {
    "text": "have errors as values you can make that decision because now you have this error object and what do we do with it do we",
    "start": "557320",
    "end": "563600"
  },
  {
    "text": "have a default value a good default value hey service give me the default amount of things I should show to the",
    "start": "563600",
    "end": "568680"
  },
  {
    "text": "user h crap request failed and in your theoretical super microserver Services",
    "start": "568680",
    "end": "574200"
  },
  {
    "text": "all right 20 20 is my default one right I don't have to try catch it I just know I can do even some nice monatic uh you",
    "start": "574200",
    "end": "581160"
  },
  {
    "text": "know monatic transfers or else right and have these nice little operations that just happen on top of it and transform",
    "start": "581160",
    "end": "587519"
  },
  {
    "text": "the eror into the thing I want it to be and so exceptions just don't give you these type of operation options and",
    "start": "587519",
    "end": "594120"
  },
  {
    "text": "often what I see is it's just always caught far up the top do you mean that librar shouldn't throw exceptions well I",
    "start": "594120",
    "end": "599720"
  },
  {
    "text": "think the library should use Library should operate in the way in which the language behaves so in JavaScript I",
    "start": "599720",
    "end": "607040"
  },
  {
    "text": "think it's kind of weird to try to make result happen right I just think it's kind of weird to try to make some sort",
    "start": "607040",
    "end": "612959"
  },
  {
    "text": "of ARS value in a in a JavaScript library because that is not how JavaScript operates typically that's not",
    "start": "612959",
    "end": "620519"
  },
  {
    "text": "how it how it operates and so I find it you have to think about it differently like how do you how when should you",
    "start": "620519",
    "end": "626760"
  },
  {
    "text": "throw why should you throw should you return an error value what does it mean to return an error value versus throwing",
    "start": "626760",
    "end": "632279"
  },
  {
    "text": "an error value in JavaScript there's a lot of there's a lot of implications in it throwing a value is almost like",
    "start": "632279",
    "end": "638040"
  },
  {
    "text": "stating I have gotten into a faulty State and I can no longer operate whereas returning an error says hey I",
    "start": "638040",
    "end": "643720"
  },
  {
    "text": "did something I was able to recover but here is why I couldn't proceed with your request it's almost like a very",
    "start": "643720",
    "end": "649160"
  },
  {
    "text": "different kind of feel and that's one of the problems with this like these JavaScript type languages where you can",
    "start": "649160",
    "end": "655040"
  },
  {
    "text": "do both returning and throwing is that you have to have this whole like you know you have to have all this like",
    "start": "655040",
    "end": "660480"
  },
  {
    "text": "implicit connections between what is being returned and why all right for Server programs we also have a good way",
    "start": "660480",
    "end": "666120"
  },
  {
    "text": "to handle errors send an error message to the client and if that doesn't work close the connection yes even for out of",
    "start": "666120",
    "end": "671639"
  },
  {
    "text": "memory situations and uh Sig FP which you get a let's see get for division by",
    "start": "671639",
    "end": "677240"
  },
  {
    "text": "zero you can send an error message instead of panicking your whole system again you do not even have to panic your",
    "start": "677240",
    "end": "682680"
  },
  {
    "text": "whole system on a divide by zero I assume he's saying something against rust and it's divide by zero but if I'm",
    "start": "682680",
    "end": "688839"
  },
  {
    "text": "not mist and a divide by0 does not crash the program in production but in development it does crash the program to",
    "start": "688839",
    "end": "694600"
  },
  {
    "text": "help give you understanding that you are doing a divide by0 I believe Zig does the same thing if I'm not mistaken while",
    "start": "694600",
    "end": "700240"
  },
  {
    "text": "shutting everything down is certainly safe it is not very productive and is a potential dos Vector it is potential",
    "start": "700240",
    "end": "707079"
  },
  {
    "text": "Doss Vector this is true but again returning errors like if I knew I could cause an exception to be thrown in your",
    "start": "707079",
    "end": "713800"
  },
  {
    "text": "system I could cause exceptions to be thrown in your system and if you don't handle them properly I could potentially",
    "start": "713800",
    "end": "720760"
  },
  {
    "text": "cause errors in your systems in such ways that shut down your uh such down or shut down your entire server I don't see",
    "start": "720760",
    "end": "727519"
  },
  {
    "text": "any difference here in this argument exceptions make this extraordinar extraordinarily easy I do not see how",
    "start": "727519",
    "end": "734079"
  },
  {
    "text": "this makes it any easier or less easy no matter uh where you are 100 call Stacks deep in your uh little corner of the",
    "start": "734079",
    "end": "739720"
  },
  {
    "text": "program you detect an error so you throw an exception which call stack handles it how do you know your how do you know the",
    "start": "739720",
    "end": "746160"
  },
  {
    "text": "above State doesn't get effed did the above State expect it to be thrown how do you know right like there's so much implicit knowledge here that is just",
    "start": "746160",
    "end": "752279"
  },
  {
    "text": "being completely thrown out thrown out right now and it frustrates me okay um",
    "start": "752279",
    "end": "757320"
  },
  {
    "text": "all the hard work is now done automatically in stack unwinding on Linux this is typically done in lib GCC",
    "start": "757320",
    "end": "763040"
  },
  {
    "text": "which determines how to unwind through a binary with dwarf frame E frame the",
    "start": "763040",
    "end": "768360"
  },
  {
    "text": "beauty of unwinding is that all the destructors are called all resources are handles are dropped and locks that are",
    "start": "768360",
    "end": "773839"
  },
  {
    "text": "currently held anywhere are released how is that true at all isn't that only true for things that like I'd have to think",
    "start": "773839",
    "end": "780519"
  },
  {
    "text": "about that because this is not always true if you allocate something on the Heap and you do not clean it up then guess what if you just I mean this is",
    "start": "780519",
    "end": "787560"
  },
  {
    "text": "why defer error exists in zigg because if you have an error that causes this thing to return due to an error it then",
    "start": "787560",
    "end": "795560"
  },
  {
    "text": "uh it then allows you to clean up the resources it's true C++ I I I don't believe you I I don't believe that if",
    "start": "795560",
    "end": "801240"
  },
  {
    "text": "you call a new if you call new in a function on a variable and then somewhere even further down an exception",
    "start": "801240",
    "end": "807920"
  },
  {
    "text": "causes that it automatically calls delete for you on that variable does it call delete for you am I am I wrong on",
    "start": "807920",
    "end": "813399"
  },
  {
    "text": "that I could be wrong on that no no I never said anything about a unique pointer that's different I didn't say",
    "start": "813399",
    "end": "819160"
  },
  {
    "text": "anything about a unique pointer or shared pointers I said new so I'm sitting here thinking what do you mean",
    "start": "819160",
    "end": "824920"
  },
  {
    "text": "when did C++ get this implicit Behavior I am not I am not familiar with said that no you need to delete specifically",
    "start": "824920",
    "end": "831560"
  },
  {
    "text": "therefore guess what these are in fact not not called okay so there is no there",
    "start": "831560",
    "end": "838560"
  },
  {
    "text": "is no handling resource drops if you open a file that file doesn't magically",
    "start": "838560",
    "end": "843880"
  },
  {
    "text": "get closed that's why I use Smart porns of course you use Smart porns but there was something implicit there notice that",
    "start": "843880",
    "end": "850759"
  },
  {
    "text": "it wasn't say like there was a lot of implicit kind of stuff not with that attitude there was a lot of implicit",
    "start": "850759",
    "end": "857440"
  },
  {
    "text": "stuff in here that I do not believe is true uh best of all this magic happens behind the scenes No no if you Malik you",
    "start": "857440",
    "end": "865560"
  },
  {
    "text": "you got a free dog there's no what what uh this magic happens behind the scenes",
    "start": "865560",
    "end": "871240"
  },
  {
    "text": "because your compiler already emits the correct unwind info so a simple try catch block at the top of the connection handling is enough to gracefully handle",
    "start": "871240",
    "end": "878440"
  },
  {
    "text": "the error and report it to the client I'm pretty sure this doesn't even happen in go and go is garbage collected if you",
    "start": "878440",
    "end": "884480"
  },
  {
    "text": "create a TCP server and you start listening and then you you return out of the function you're still using the port",
    "start": "884480",
    "end": "891440"
  },
  {
    "text": "the port is forever used despite it never being useful again uh boilerplate",
    "start": "891440",
    "end": "896920"
  },
  {
    "text": "if you panic and you don't have some sort of air defer you will or defer you will actually continue to listen to it",
    "start": "896920",
    "end": "902040"
  },
  {
    "text": "and you have that stupid operating system problem where like your your Port will be being used despite no program being used uh compare this functional",
    "start": "902040",
    "end": "908680"
  },
  {
    "text": "style errors while let's see where error handling is manual and super tedious you have to explicitly check if the error",
    "start": "908680",
    "end": "914040"
  },
  {
    "text": "value is uh is an error and propagate it uh you would have to write the same boiler plate if err return error over",
    "start": "914040",
    "end": "919839"
  },
  {
    "text": "and over again which litters your code base yeah some some some of them do something better right when it comes to",
    "start": "919839",
    "end": "924920"
  },
  {
    "text": "uh when it comes to when it comes to rust you got the question mark operator when it comes to Zig you have the try",
    "start": "924920",
    "end": "930440"
  },
  {
    "text": "operator on that and it effectively does all of this for you I actually personally love if error does not equal",
    "start": "930440",
    "end": "936800"
  },
  {
    "text": "nil the reason why I love if Air does not equal nil is that it tells me it's time to think about this because I often",
    "start": "936800",
    "end": "943639"
  },
  {
    "text": "find myself deferring to higher levels in Rust because it's really simple to do a question mark the question mark is so",
    "start": "943639",
    "end": "951040"
  },
  {
    "text": "simple that it allows me to not think through my errors nearly as as",
    "start": "951040",
    "end": "956120"
  },
  {
    "text": "holistically uh I don't get the argument that if it if erir does not equal is bad I don't think it's bad either well he's",
    "start": "956120",
    "end": "962240"
  },
  {
    "text": "just saying boilerplate is bad I don't think boilerplate is bad I don't think boilerplate is bad so it's bad because",
    "start": "962240",
    "end": "967680"
  },
  {
    "text": "you don't think uh because you don't think it no I just don't think that this I don't think that saying you have to",
    "start": "967680",
    "end": "973199"
  },
  {
    "text": "write code to handle errors is a is bad I think fundamentally that statement is incorrect writing code to handle errors",
    "start": "973199",
    "end": "980639"
  },
  {
    "text": "is good if you want reliable services this is why I always say it's extremely hard to make a reliable service in",
    "start": "980639",
    "end": "986959"
  },
  {
    "text": "JavaScript it's extremely easy to make a reliable service and go because one I",
    "start": "986959",
    "end": "992079"
  },
  {
    "text": "have no idea where and when and how errors are caused in another one I do an easy very simple one that gets all new",
    "start": "992079",
    "end": "998480"
  },
  {
    "text": "people and even experienced people in node this is like the classic one that gets everybody is I can go like this Jon",
    "start": "998480",
    "end": "1005639"
  },
  {
    "text": "uh jesson parse um there you go a lot of people have no idea and they like this",
    "start": "1005639",
    "end": "1013160"
  },
  {
    "text": "is the classic we actually took down production because we Chas on pars without realizing that we could hand non",
    "start": "1013160",
    "end": "1019120"
  },
  {
    "text": "Json to this parse and that it could blow up like this is the classic one and every last PE person has crashed",
    "start": "1019120",
    "end": "1025678"
  },
  {
    "text": "production because of this one issue and the reason why you've crashed this is because you don't have anything that",
    "start": "1025679",
    "end": "1031678"
  },
  {
    "text": "told you this thing could throw now you start using libraries maybe one of the library functions doesn't wrap this and",
    "start": "1031679",
    "end": "1038120"
  },
  {
    "text": "it crashes despite the fact that you had no idea that it is even using that stop targeting me Prime it's but it just is",
    "start": "1038120",
    "end": "1044720"
  },
  {
    "text": "right because if you go like this if I go um uh",
    "start": "1044720",
    "end": "1050240"
  },
  {
    "text": "Marshall right un Marshall yeah there you go you'll notice",
    "start": "1050240",
    "end": "1055799"
  },
  {
    "text": "that when I Jon parse and go I have to handle this so in my in my code to",
    "start": "1055799",
    "end": "1062440"
  },
  {
    "text": "determine who gets the type in neovim during our little Co two two idiots One keyboard I could make that decision",
    "start": "1062440",
    "end": "1069160"
  },
  {
    "text": "right here if I was unable to Let's See Marshall this data I had to handle the air I have to check it's right there I",
    "start": "1069160",
    "end": "1075960"
  },
  {
    "text": "must check it I need to figure it out which which I think is fantastic let's briefly look at some",
    "start": "1075960",
    "end": "1081919"
  },
  {
    "text": "code metrics for two similarly sized database projects uh cockroach DB a go project with explicit errors okay nearly",
    "start": "1081919",
    "end": "1089039"
  },
  {
    "text": "25,000 error handling paths okay okay hold on hold on well",
    "start": "1089039",
    "end": "1094120"
  },
  {
    "text": "let's let it let's hey let's let them cook most of these errors are artifacts of repetitive pass through re uh",
    "start": "1094120",
    "end": "1099880"
  },
  {
    "text": "reporting style but there are quite a few instances uh that they are simply uh used for log fatal this doesn't look",
    "start": "1099880",
    "end": "1105840"
  },
  {
    "text": "very graceful to me there are reasons why your database Should Crash if you if there is an error in something",
    "start": "1105840",
    "end": "1111480"
  },
  {
    "text": "that cannot move forward there is a good reason to crash Cedar DB the project we're looking at that uses C++",
    "start": "1111480",
    "end": "1116799"
  },
  {
    "text": "exceptions catch there's only 140 them let's pre let's pretend that cedar DB and Cockroach DB have the same amount of",
    "start": "1116799",
    "end": "1124240"
  },
  {
    "text": "Errors they are handling I would like to argue that this shows you where all the possible errors are and there is",
    "start": "1124240",
    "end": "1130600"
  },
  {
    "text": "probably a bunch of unique decisions whereas 140 means that you",
    "start": "1130600",
    "end": "1135919"
  },
  {
    "text": "have to compact all of these decis decisions into into a fewer amount of uh",
    "start": "1135919",
    "end": "1142559"
  },
  {
    "text": "decision points I'm not sure if that's good I don't have any I don't have any reliable metric to say that more or less",
    "start": "1142559",
    "end": "1150240"
  },
  {
    "text": "air handling is in fact good or bad and not only that if you wanted to find the",
    "start": "1150240",
    "end": "1156320"
  },
  {
    "text": "full extent of this you probably would do something like er does not equal nil because there's actually ways to do",
    "start": "1156320",
    "end": "1161400"
  },
  {
    "text": "compound if statements and go uh I could do something like this right if",
    "start": "1161400",
    "end": "1167480"
  },
  {
    "text": "um or right right like actually that probably would have been that probably would have",
    "start": "1167480",
    "end": "1173720"
  },
  {
    "text": "been a better way to do it and I did not do it that way but this is a nice little more compound if statement right here to",
    "start": "1173720",
    "end": "1178799"
  },
  {
    "text": "be able to do that I just don't see I don't I don't see how this number is a good argument for or against it's just a",
    "start": "1178799",
    "end": "1185880"
  },
  {
    "text": "number I don't know if this means you don't handle errors good enough or that",
    "start": "1185880",
    "end": "1191240"
  },
  {
    "text": "you found every single point in which errors could potentially happen that need to be handled in unwind stuff like",
    "start": "1191240",
    "end": "1196799"
  },
  {
    "text": "I have no I have no way for me to understand it over 100x less code that does not",
    "start": "1196799",
    "end": "1204919"
  },
  {
    "text": "mean something's good less code does not equal better it has never equal better more code does not equal better either",
    "start": "1204919",
    "end": "1210720"
  },
  {
    "text": "unless if it's an explicit algorithm that we all know like quicksort if your quicksort has 10x more code than mine",
    "start": "1210720",
    "end": "1216720"
  },
  {
    "text": "either I have incorrectly implemented quicksort or you've done something crazy right less code equals better yeah",
    "start": "1216720",
    "end": "1223159"
  },
  {
    "text": "that's it's it's it that's a crazy statement to make cuz you can't make that statement I have never been able to",
    "start": "1223159",
    "end": "1228400"
  },
  {
    "text": "make that statement at first glance most of it is either in test it's like uh",
    "start": "1228400",
    "end": "1233559"
  },
  {
    "text": "what's called accents per minute of professional Starcraft players professional Starcraft players there's a",
    "start": "1233559",
    "end": "1238600"
  },
  {
    "text": "lot of redundant clicking right you can go and so how much so a better metric I",
    "start": "1238600",
    "end": "1245799"
  },
  {
    "text": "think would be meaningful actions per minute how many meaningful actions per minute are you doing not all clicks are",
    "start": "1245799",
    "end": "1251880"
  },
  {
    "text": "created equal you could make the exact same thing here which is more code does",
    "start": "1251880",
    "end": "1257159"
  },
  {
    "text": "not necessarily equal better better or worse I know a lot of people are saying no code means Better or Worse have you",
    "start": "1257159",
    "end": "1262840"
  },
  {
    "text": "ever seen code that is really I mean the problem with that metric is that it could immediately lead into horrible",
    "start": "1262840",
    "end": "1268280"
  },
  {
    "text": "code effective APM does exist yeah and I think effective APM is very very good but imagine if that metric became",
    "start": "1268280",
    "end": "1275919"
  },
  {
    "text": "important to you or your boss can you imagine what kind of code potentially would become produced just like when",
    "start": "1275919",
    "end": "1282799"
  },
  {
    "text": "people try to measure lines of code and then all of a sudden things get really long you will G whatever metric you",
    "start": "1282799",
    "end": "1289600"
  },
  {
    "text": "create I don't think it's a good idea to say one you know I the Right code for the right situation is the right amount",
    "start": "1289600",
    "end": "1295720"
  },
  {
    "text": "of code that's that they measure lines of code and meta yeah that's crazy right",
    "start": "1295720",
    "end": "1301200"
  },
  {
    "text": "paid paid per line of code yeah the right amount of code for the right situation is the correct amount of code",
    "start": "1301200",
    "end": "1308720"
  },
  {
    "text": "that's it of course there are solutions to reduce the amount of boilerplate in Rust you can sugarcoat the ugly syntax",
    "start": "1308720",
    "end": "1314640"
  },
  {
    "text": "with a question macro it's not a macro at least I don't think it's a macro I'm",
    "start": "1314640",
    "end": "1321360"
  },
  {
    "text": "pretty sure because a macro actually generates code I don't think this thing generates code I think it's just an operation says an operator this uh this",
    "start": "1321360",
    "end": "1328600"
  },
  {
    "text": "just hides all the tedious checking but you still need to do all the work additionally your function now returns error codes which means that you have to",
    "start": "1328600",
    "end": "1334720"
  },
  {
    "text": "change the public interface and recursively change all functions that call this function instead of working in your little corner your extra let's see",
    "start": "1334720",
    "end": "1341080"
  },
  {
    "text": "your oh okay again I'm going to defeat this argument your extra little uh check now propagates to half the code base on",
    "start": "1341080",
    "end": "1346799"
  },
  {
    "text": "the other hand there's always the temptation of a little unwrap surely that snake won't bite you first off there is not that Temptation if you use",
    "start": "1346799",
    "end": "1353360"
  },
  {
    "text": "unwrap you are saying I am fine with my program crashing at this point okay that is true now why does this not bother me",
    "start": "1353360",
    "end": "1362080"
  },
  {
    "text": "I'll tell you this why I'll tell you this one when you use the question mark operator you are stating explicitly if",
    "start": "1362080",
    "end": "1367120"
  },
  {
    "text": "an error happens here I cannot handle it and I just want the person above me to uh calling understand that may have more",
    "start": "1367120",
    "end": "1374279"
  },
  {
    "text": "context handle the error and if the person above you says I can't handle the error either and they pass it above but",
    "start": "1374279",
    "end": "1380240"
  },
  {
    "text": "what ends up happening is at some point within your program you have something like an or else or you have some sort of",
    "start": "1380240",
    "end": "1386360"
  },
  {
    "text": "exp or something else and you end up changing the actual interface because",
    "start": "1386360",
    "end": "1391640"
  },
  {
    "text": "you at that proper Point know how to handle those errors right isn't isn't",
    "start": "1391640",
    "end": "1398240"
  },
  {
    "text": "this something uh similar to color uh coloring functions sort of it's not quite the same as coloring functions but",
    "start": "1398240",
    "end": "1406000"
  },
  {
    "text": "yeah I mean I guess you could argue that this is something to of function coloring which I am for when it comes to",
    "start": "1406000",
    "end": "1411159"
  },
  {
    "text": "errors because you want to have to force in my opinion I think you should forcefully need to think about errors if",
    "start": "1411159",
    "end": "1418480"
  },
  {
    "text": "you want to write robust code forceful error thought is the only possible way I",
    "start": "1418480",
    "end": "1424720"
  },
  {
    "text": "can see system errors what if I told you that most programs already handle far few eror far fewer errors than they",
    "start": "1424720",
    "end": "1431159"
  },
  {
    "text": "should think back to the safe div example and try dividing uh -2 to 32 by1",
    "start": "1431159",
    "end": "1437840"
  },
  {
    "text": "that would result than two to the 32 but that's out of range uh for an INT oopsy D oopsy Doodles for a 32-bit int to be",
    "start": "1437840",
    "end": "1446320"
  },
  {
    "text": "to be fair uh so are you sure that your program doesn't crash do you add an error result whenever a function assert",
    "start": "1446320",
    "end": "1453440"
  },
  {
    "text": "something well again um I think Cedar would be I think",
    "start": "1453440",
    "end": "1458640"
  },
  {
    "text": "Cedar would do a really good job checking out tiger beetle tiger beetle uses what NASA does and actually crashes",
    "start": "1458640",
    "end": "1465360"
  },
  {
    "text": "when they when they reach a state that's unreachable and it's a very impressive",
    "start": "1465360",
    "end": "1471200"
  },
  {
    "text": "piece of technology in fact I would argue that tiger beetle is perhaps one of the greatest pieces of created",
    "start": "1471200",
    "end": "1478279"
  },
  {
    "text": "technology in the last four to five years and so what is tiger beetle tiger beetle is a database it's another",
    "start": "1478279",
    "end": "1484120"
  },
  {
    "text": "database it's the financial transaction database uh that uses simulation testing and it has two asserts per function as",
    "start": "1484120",
    "end": "1492799"
  },
  {
    "text": "effectively a minimum requirement and so if you go here it's called Uh tiger style um there tiger style programming",
    "start": "1492799",
    "end": "1499399"
  },
  {
    "text": "they have a whole thing on this it's it's absolutely amazing I've embraced a little bit of this which has to do when",
    "start": "1499399",
    "end": "1504880"
  },
  {
    "text": "it comes to asserts and this has to do with NASA right uh NASA is this",
    "start": "1504880",
    "end": "1511159"
  },
  {
    "text": "whole uh NASA do they have the NASA document linked here there you go and this is a NASA document for how to",
    "start": "1511159",
    "end": "1517760"
  },
  {
    "text": "create NASA level stuff and they use asserts which crash a program and they have satellites that they are waking up",
    "start": "1517760",
    "end": "1524679"
  },
  {
    "text": "that are like 30 years old so whatever they're doing they're doing great and so",
    "start": "1524679",
    "end": "1529919"
  },
  {
    "text": "I like that I I like what they have to say it's it's it's a pretty interesting way to think about software um anyways all right let's see uh did your add an",
    "start": "1529919",
    "end": "1537919"
  },
  {
    "text": "error result whenever your function asserts something but there's so much more allocations can fail the stack Overflow let's see the stack can",
    "start": "1537919",
    "end": "1544279"
  },
  {
    "text": "overflow and arithmetic operations can underflow without involving exceptions let's see without throwing exceptions",
    "start": "1544279",
    "end": "1549799"
  },
  {
    "text": "these failure modes are often simply hidden calling an inconspicuous function stack Overflow oops your server is gone",
    "start": "1549799",
    "end": "1556840"
  },
  {
    "text": "add two values panic at the rust disco that's only in Dev if I am not mistaken",
    "start": "1556840",
    "end": "1563159"
  },
  {
    "text": "uh Panic on overflow rust I'm pretty sure when you're compiling when you're",
    "start": "1563159",
    "end": "1568559"
  },
  {
    "text": "compiling in debug mode rust includes checks for integer overflows that cause your program to panic at runtime right",
    "start": "1568559",
    "end": "1574360"
  },
  {
    "text": "when you're compiling in release mode uh the release flag rust does not include these checks right which is great this",
    "start": "1574360",
    "end": "1579760"
  },
  {
    "text": "is actually a great this is a great thing you get to know when you're done",
    "start": "1579760",
    "end": "1584919"
  },
  {
    "text": "messed up like that's a great thing uh asserts are debug mode only thing uh not in so tiger beetle does asserts in",
    "start": "1584919",
    "end": "1592640"
  },
  {
    "text": "production which is pretty cool like it handles everything the writing is cute but not especially thoughtful the",
    "start": "1592640",
    "end": "1599039"
  },
  {
    "text": "writing is great I do like the writing in hit this is good writing by the way uh signing this temporary object say hello to um uh killer whenever any part",
    "start": "1599039",
    "end": "1606120"
  },
  {
    "text": "of your code flow is user controlled and what isn't these errors can happen it's pretty wild to attempt to handle an O",
    "start": "1606120",
    "end": "1613520"
  },
  {
    "text": "I'd have to understand more about it how you would even handle an O you can't even open a file handle to write out",
    "start": "1613520",
    "end": "1620480"
  },
  {
    "text": "your stuff like you're you just got you got no more memory bro like you're completely out what are you doing uh is",
    "start": "1620480",
    "end": "1626480"
  },
  {
    "text": "crashing is D is database crashing conventional in production in tiger beetle it is but they don't crash",
    "start": "1626480",
    "end": "1633640"
  },
  {
    "text": "because they've created such a resilient program that handles all errors in the correct position and asserts all states",
    "start": "1633640",
    "end": "1639720"
  },
  {
    "text": "that need to be correct at all times and it forces everything to be in a very specific way of operating and they've",
    "start": "1639720",
    "end": "1646200"
  },
  {
    "text": "been able to understand effectively every single possible error that could ever possibly happen and now they have",
    "start": "1646200",
    "end": "1652080"
  },
  {
    "text": "they effectively have no problems it's a very very cool way to approach a problem for memory allocations you're most likely out of luck and go because it's",
    "start": "1652080",
    "end": "1658640"
  },
  {
    "text": "GC I have more hope for rust where the kernel integration work is slowly forcing it to grow up and build some more reliable interfaces that don't",
    "start": "1658640",
    "end": "1665159"
  },
  {
    "text": "panic EG box try new but this will require refactoring all existing code",
    "start": "1665159",
    "end": "1670760"
  },
  {
    "text": "yeah I I I was thinking about go but I guess this is one good argument I think this underlying argument he's attempting",
    "start": "1670760",
    "end": "1677559"
  },
  {
    "text": "to make is good in the sense that when you do a new Circle and you have no",
    "start": "1677559",
    "end": "1684799"
  },
  {
    "text": "memory left you get an exception that you can catch and you can do something",
    "start": "1684799",
    "end": "1690240"
  },
  {
    "text": "when you get an oom is that the I assume that's the argument he is making but I would love to see what you could do when",
    "start": "1690240",
    "end": "1697399"
  },
  {
    "text": "you get an oom that is anything other than crashing but then what yeah I I am",
    "start": "1697399",
    "end": "1703559"
  },
  {
    "text": "just curious what the resulting thing is uh anyways still I'm amazed that this is",
    "start": "1703559",
    "end": "1709600"
  },
  {
    "text": "supposed to be the state-of-the-art for systems programming so I I know programs that when they get to this point they",
    "start": "1709600",
    "end": "1715399"
  },
  {
    "text": "get ooms they actually have a system crash that when things crash they write out a crash state to a a lock file",
    "start": "1715399",
    "end": "1722799"
  },
  {
    "text": "effectively and when another startup happens it reads that lock file and if that lock file is present and it has",
    "start": "1722799",
    "end": "1728039"
  },
  {
    "text": "this this crash information and then upon next start it's able to take that and report it to a server maybe a game",
    "start": "1728039",
    "end": "1735600"
  },
  {
    "text": "hits o unloads a bunch of textures and reattempts what is an O out of memory yeah it's out of memory era uh I'd have",
    "start": "1735600",
    "end": "1742080"
  },
  {
    "text": "to think about that more because even even unloading textures can create you might have to create memory to unload",
    "start": "1742080",
    "end": "1748240"
  },
  {
    "text": "memory which if you cannot create any more memory it's actually really hard to do something out of Mana it stands for",
    "start": "1748240",
    "end": "1753519"
  },
  {
    "text": "out of Mana hey thank you hot stack for the raid I appreciate that yeah yeah yeah hot stack I don't I've never had to",
    "start": "1753519",
    "end": "1759640"
  },
  {
    "text": "really think too deeply about this so maybe there's a really good point he's making right here and I I recognize that",
    "start": "1759640",
    "end": "1765480"
  },
  {
    "text": "that not being able to handle uh not being able to handle an out of memory",
    "start": "1765480",
    "end": "1770559"
  },
  {
    "text": "exception and or some other one of these kind of bizarre exceptions that are at the system level is a good argument for",
    "start": "1770559",
    "end": "1777799"
  },
  {
    "text": "why because your interface does not provide it just like when you do a new a a new in C++ maybe there's some hidden",
    "start": "1777799",
    "end": "1786480"
  },
  {
    "text": "mechanism that does it whereas Malik does right Malik does return the proper item oh my camera died hold on hoddle",
    "start": "1786480",
    "end": "1795159"
  },
  {
    "text": "hoddle I've been having camera problems I'll explain it it's not out of memory it's out of battery it's an O it's an",
    "start": "1795159",
    "end": "1801840"
  },
  {
    "text": "O it's an O just hold on I'll be doing this I'll be doing this swapping for a",
    "start": "1801840",
    "end": "1807799"
  },
  {
    "text": "little bit um I'm getting um I don't know what's happened but I've had not",
    "start": "1807799",
    "end": "1813360"
  },
  {
    "text": "one but two separate cables break and I am unable to keep my camera charged so",
    "start": "1813360",
    "end": "1818679"
  },
  {
    "text": "I'm doing this like battery swapping thing so you know I can't really I can't",
    "start": "1818679",
    "end": "1827080"
  },
  {
    "text": "really help this one it's hot Shack but you're going to get it someday",
    "start": "1827080",
    "end": "1832880"
  },
  {
    "text": "oh have I been calling you hot stack I have an uncanny ability to misread things you would not believe my",
    "start": "1832880",
    "end": "1839320"
  },
  {
    "text": "abilities no worries I'm doofus yeah I do just so you know exceptions lead to",
    "start": "1839320",
    "end": "1844880"
  },
  {
    "text": "better error messages but with more explicit air handling closer to the error Source you surely get better error",
    "start": "1844880",
    "end": "1850000"
  },
  {
    "text": "messages again my experience is the opposite return error values often have little information and lead to bad error",
    "start": "1850000",
    "end": "1855320"
  },
  {
    "text": "messages I don't see how that's TR true I again this just sounds like what you're saying is that the person who",
    "start": "1855320",
    "end": "1861360"
  },
  {
    "text": "created the return error did not add any information or put anything on it but I would also assume that the person who",
    "start": "1861360",
    "end": "1867080"
  },
  {
    "text": "would throw an error would do the exact same thing right the classic example is CIS calls which usually follow C",
    "start": "1867080",
    "end": "1873080"
  },
  {
    "text": "conventions there the return value is often just a code negative one what the actual reason passed as a side Channel",
    "start": "1873080",
    "end": "1880200"
  },
  {
    "text": "via Aro o good old fashioned air no for what reason getting a reasonable reason",
    "start": "1880200",
    "end": "1885320"
  },
  {
    "text": "why something failed is often not possible from the error code alone but requires significant context around the",
    "start": "1885320",
    "end": "1891039"
  },
  {
    "text": "Callin code yeah okay but but but this doesn't exist in other other languages I get that this is like a c unfun thing",
    "start": "1891039",
    "end": "1897600"
  },
  {
    "text": "but a lot of people wrap these things and provide a better experience uh what do you do now standard uh string error",
    "start": "1897600",
    "end": "1904440"
  },
  {
    "text": "tells you invalid argument great the system probably knows exactly what went wrong but refuses to tell you the details so the a know alone is not",
    "start": "1904440",
    "end": "1911440"
  },
  {
    "text": "really helpful for proper error messages you need the CIS calls as context but even then the errors remain obscured",
    "start": "1911440",
    "end": "1917559"
  },
  {
    "text": "consider to write to which could uh which could return uh inow either for an",
    "start": "1917559",
    "end": "1923279"
  },
  {
    "text": "object which is unsuitable for writing or for misaligned buffers but which one is",
    "start": "1923279",
    "end": "1928519"
  },
  {
    "text": "it I feel like this is a bit of a bad faith argument right here because an",
    "start": "1928519",
    "end": "1935600"
  },
  {
    "text": "exception you're using C as the example but other programs properly give",
    "start": "1935600",
    "end": "1942320"
  },
  {
    "text": "back what has gone wrong and so I kind of feel like this is uh an unfair argu",
    "start": "1942320",
    "end": "1948320"
  },
  {
    "text": "against errors as values because it's doing the craziest form of error uh err handling which is Sentinel globals",
    "start": "1948320",
    "end": "1955600"
  },
  {
    "text": "Sentinal globals with some level of hiding uh well like standard standard C",
    "start": "1955600",
    "end": "1960679"
  },
  {
    "text": "when you're using just like basic C you don't you don't often give back you don't get a lot of those errors back right you have to use a no uh if you",
    "start": "1960679",
    "end": "1967200"
  },
  {
    "text": "have an exception doing Berkeley sockets you have an a no value of some blah blah blah blah blah blah blah blah blah blah",
    "start": "1967200",
    "end": "1972480"
  },
  {
    "text": "right so I'm not saying that that I understand the argument here but I'm saying that this is also a very bad",
    "start": "1972480",
    "end": "1978480"
  },
  {
    "text": "version of it because any modern language and when I say modern I'm not even talking about that old would give",
    "start": "1978480",
    "end": "1985519"
  },
  {
    "text": "you the error yeah yes it would give you the proper error back this argument it sounds it's",
    "start": "1985519",
    "end": "1993039"
  },
  {
    "text": "not even a skill issue it's just using a much older version It's using a language in which does not give you that",
    "start": "1993039",
    "end": "1999080"
  },
  {
    "text": "information and then telling you why this makes erors as values bad this would be a red herring argument this is",
    "start": "1999080",
    "end": "2004279"
  },
  {
    "text": "a straw man argument SS as values and a no are different things they're not the",
    "start": "2004279",
    "end": "2009360"
  },
  {
    "text": "same newer language do this a bit better but rust errors also fall into the uh error kind trap we parse in somewhere",
    "start": "2009360",
    "end": "2016919"
  },
  {
    "text": "and an air kind invalid digit bubbles up at the user here am I let's say Here I",
    "start": "2016919",
    "end": "2022200"
  },
  {
    "text": "Am parsing megabytes of CSV and you tell me invalid digit found in string call that job satisfaction of course there",
    "start": "2022200",
    "end": "2029200"
  },
  {
    "text": "are non-standard crates like anyhow that do this better uh but in my experience error return values only encourage bad",
    "start": "2029200",
    "end": "2035799"
  },
  {
    "text": "errors no again this was just not properly handled if you're parsing CSV",
    "start": "2035799",
    "end": "2041399"
  },
  {
    "text": "and there's an error I would assume that someone would get int aor kind invalid digit and then to be able to take that",
    "start": "2041399",
    "end": "2047000"
  },
  {
    "text": "information and say this is where it's happening and you know what let's let's",
    "start": "2047000",
    "end": "2052358"
  },
  {
    "text": "just be real for a second if this was an exception guess what would have happened you would have had bad parse error int",
    "start": "2052359",
    "end": "2059679"
  },
  {
    "text": "error and that would have just simply been thrown up I don't see I don't see how this is either side and for those",
    "start": "2059679",
    "end": "2066839"
  },
  {
    "text": "that don't know any anyhow anyhow allows you to do this context field that adds something called a context trait onto a",
    "start": "2066839",
    "end": "2072440"
  },
  {
    "text": "result object which allows you to be able to go like do context I was in this",
    "start": "2072440",
    "end": "2077480"
  },
  {
    "text": "position doing this stuff so here you go here's what went wrong and so that way each single level can add more and more",
    "start": "2077480",
    "end": "2083398"
  },
  {
    "text": "stuff right but in my experience return error values only encourage bad errors for a proper error message you need to",
    "start": "2083399",
    "end": "2089480"
  },
  {
    "text": "capture significant context in the err path which does not fit into a simple error code again return errors do not",
    "start": "2089480",
    "end": "2096118"
  },
  {
    "text": "have an any uh just a return code what you're saying is this is correct I actually fully agree with this if you",
    "start": "2096119",
    "end": "2102480"
  },
  {
    "text": "want to do a proper airor message you need to capture significant context in the air path absolutely hands down 100%",
    "start": "2102480",
    "end": "2111200"
  },
  {
    "text": "correct but that is orthogonal to exceptions or errors as values I would",
    "start": "2111200",
    "end": "2117119"
  },
  {
    "text": "argue that errors as values allow you every single step of the way until handled to capture context and returns",
    "start": "2117119",
    "end": "2125000"
  },
  {
    "text": "any extra non-stack Trace based cont text I would argue that it's actually easier to do what you're saying in aors",
    "start": "2125000",
    "end": "2131680"
  },
  {
    "text": "as values cuz let's go back to this let's say a is the tri catch or a is where we handle the",
    "start": "2131680",
    "end": "2138320"
  },
  {
    "text": "error fu is where the airor happens in a proper airor handling thing C could then",
    "start": "2138320",
    "end": "2144200"
  },
  {
    "text": "go okay here's my state here's what has happened wrapping it up adding it",
    "start": "2144200",
    "end": "2149920"
  },
  {
    "text": "wrapping the air returning it B could say hey this is what I'm doing now notice this is not stack traces this is",
    "start": "2149920",
    "end": "2156079"
  },
  {
    "text": "actually something more useful this is giv giving out that extra bit of information okay it's me it's a me",
    "start": "2156079",
    "end": "2161760"
  },
  {
    "text": "result object right like it's better information and therefore I'm able to take that information and again wrap it",
    "start": "2161760",
    "end": "2168520"
  },
  {
    "text": "with B whatever extra information I need around B then a comes around and then a can have this really intensive explicit",
    "start": "2168520",
    "end": "2177079"
  },
  {
    "text": "error that contains all of the goodness whereas with TR catch you miss all of that plus you better hope they handled",
    "start": "2177079",
    "end": "2183880"
  },
  {
    "text": "state correction resolve this Mario sorry I've kind of lost my voice due to how much streaming I've done lately so",
    "start": "2183880",
    "end": "2189560"
  },
  {
    "text": "my it a me Mario is not as good as it normally is okay I'm sorry instead you probably need to allocate a dynamic",
    "start": "2189560",
    "end": "2194839"
  },
  {
    "text": "error just like with exceptions for debugging purposes you may also want to include uh a back Trace now you have",
    "start": "2194839",
    "end": "2201599"
  },
  {
    "text": "exceptions with extra steps well you get to back Trace only the things you really want to back Trace that's the nice part",
    "start": "2201599",
    "end": "2206800"
  },
  {
    "text": "is it's also even more it's like in I I I I'm surprised at this argument I",
    "start": "2206800",
    "end": "2213079"
  },
  {
    "text": "feel like this argument was was uh was just a really bad argument",
    "start": "2213079",
    "end": "2218400"
  },
  {
    "text": "he's saying people that have errors as values do a shitty job but people that throw exceptions gather all the state",
    "start": "2218400",
    "end": "2224200"
  },
  {
    "text": "and properly report an error like that's not a that's like a really you just like straw man super hard uh exceptions are",
    "start": "2224200",
    "end": "2230480"
  },
  {
    "text": "more performant exceptions have one last Ace up their sleeve they have zero overhead on success because we separate",
    "start": "2230480",
    "end": "2238359"
  },
  {
    "text": "the control flow instead error Val error return values intermingle the air and the happy path and always require a",
    "start": "2238359",
    "end": "2244680"
  },
  {
    "text": "check and Branch for air handling what yeah I mean I agree you're it's really it's",
    "start": "2244680",
    "end": "2253200"
  },
  {
    "text": "nice to write happy path code but happy path only code also makes really bizarre",
    "start": "2253200",
    "end": "2258560"
  },
  {
    "text": "control flow and potentially dangling State Problems by the way is my uh is my",
    "start": "2258560",
    "end": "2263760"
  },
  {
    "text": "volume kind of acting goofy I'm having this really weird hearing thing where I sound really clear and then I sound not",
    "start": "2263760",
    "end": "2269480"
  },
  {
    "text": "so clear and then clear then not so clear okay seems fine okay my my",
    "start": "2269480",
    "end": "2274640"
  },
  {
    "text": "monitoring is getting uh my monitoring is getting off okay I just wanted to make sure because I always like right now it sounds muted for a second and now",
    "start": "2274640",
    "end": "2281599"
  },
  {
    "text": "it's back your voice is Goofy but the regular goofy okay good thank you I just wanted that clar clarification all right",
    "start": "2281599",
    "end": "2287560"
  },
  {
    "text": "this is not free and introduces overhead for each result let's look at the following example a function that recursively calculates the famous",
    "start": "2287560",
    "end": "2293480"
  },
  {
    "text": "Fibonacci numbers oh man this is going to be like the world's worst version I guarantee you I guarant effing to you",
    "start": "2293480",
    "end": "2299640"
  },
  {
    "text": "this is going to be the world's worst version to avoid overflows we report an error on large calculation depths the",
    "start": "2299640",
    "end": "2304839"
  },
  {
    "text": "following example uses C++ code which allows to compare both versions like this unsigned do FIB throws this one if",
    "start": "2304839",
    "end": "2312000"
  },
  {
    "text": "max depth throw return this do fibs this way okay standard expect this one do all",
    "start": "2312000",
    "end": "2318319"
  },
  {
    "text": "this okay we can see all this kind of stuff um unsigned in max depth there we",
    "start": "2318319",
    "end": "2323480"
  },
  {
    "text": "go we do all this thing blah blah blah blah blah even pointer D referencing which I'm a bit curious about that oh oh",
    "start": "2323480",
    "end": "2332200"
  },
  {
    "text": "okay okay okay okay okay I see how this works okay okay I see how this thing works yeah yeah yeah get the value out",
    "start": "2332200",
    "end": "2338119"
  },
  {
    "text": "yep I see that sorry I've never I've never used standard unexpected so this is the first time I've ever done a standard unexpected um I did not know",
    "start": "2338119",
    "end": "2345079"
  },
  {
    "text": "about this okay that makes sense so that just gets the air out that's a lift operation right so we'd call I I believe",
    "start": "2345079",
    "end": "2350599"
  },
  {
    "text": "typically we call that a lift the expected version so I will say that I my guess is that he wrote the world's worst",
    "start": "2350599",
    "end": "2356440"
  },
  {
    "text": "code the expected version is a bit more verbose but essentially does the same uh does the same code right then it should",
    "start": "2356440",
    "end": "2362280"
  },
  {
    "text": "run the same is anybody here surprised I do feel like first off this is just this",
    "start": "2362280",
    "end": "2368200"
  },
  {
    "text": "is just a very shitty way to to do this okay um it just feels like you're really",
    "start": "2368200",
    "end": "2374119"
  },
  {
    "text": "attempting right I feel like you're I mean what is this throws as it is not",
    "start": "2374119",
    "end": "2379880"
  },
  {
    "text": "max depth I it just feels like you're trying to write the world's shittiest code to prove that if you don't do any",
    "start": "2379880",
    "end": "2385920"
  },
  {
    "text": "of these extra allocations it is in fact faster which I do agree it is in fact faster to not do things you're right",
    "start": "2385920",
    "end": "2393839"
  },
  {
    "text": "you're hands down absolutely right that doesn't mean it's better it just means you're right the secret with performance",
    "start": "2393839",
    "end": "2401000"
  },
  {
    "text": "is if you can just do less it's faster like that's it that's it that's the only",
    "start": "2401000",
    "end": "2406720"
  },
  {
    "text": "thing uh with C++ exceptions 10K iterations at n equals 15 run in 7.7 milliseconds with standard exception",
    "start": "2406720",
    "end": "2412920"
  },
  {
    "text": "return values it takes 37 seconds almost 5x the run time see the quick bench Russ version is slightly faster than the C++",
    "start": "2412920",
    "end": "2418839"
  },
  {
    "text": "version but still 4X slower than throwing uh than throwing version but you you",
    "start": "2418839",
    "end": "2424440"
  },
  {
    "text": "have I got to go pee I just got to leave for I got to leave for a sec I have to leave I I'm no longer angry yes it's",
    "start": "2424440",
    "end": "2433040"
  },
  {
    "text": "doing a tight type Loop exception uh me personally I would have done a much different thing okay so I actually want",
    "start": "2433040",
    "end": "2439640"
  },
  {
    "text": "I want to understand this a little bit more right here so what is max depth can somebody help me understand this all",
    "start": "2439640",
    "end": "2445359"
  },
  {
    "text": "right all right hold on do FIB expected unsigned n unsigned max depth if max",
    "start": "2445359",
    "end": "2451960"
  },
  {
    "text": "depth if not max depth okay so I don't understand that so if max depth is zero",
    "start": "2451960",
    "end": "2457599"
  },
  {
    "text": "then guys I'm going to help you I'm going to help you I'm going to help you guys all right I know I'm in go so just",
    "start": "2457599",
    "end": "2462800"
  },
  {
    "text": "deal with it I'm in go so just deal with it I'm going to help you watch this are you ready are you ready for this",
    "start": "2462800",
    "end": "2469680"
  },
  {
    "text": "one maybe there's some other thing you could do here that would make more",
    "start": "2484119",
    "end": "2489319"
  },
  {
    "text": "sense I am having a hard time seeing this entire thing this feels",
    "start": "2489319",
    "end": "2495880"
  },
  {
    "text": "weird Okay this whole thing feels weird right",
    "start": "2495880",
    "end": "2501200"
  },
  {
    "text": "here I it it just is a strange it's a strange way like this whole thing is",
    "start": "2505599",
    "end": "2510960"
  },
  {
    "text": "such a strange function why are you throwing exceptions or handling errors why are there errors at all in this",
    "start": "2510960",
    "end": "2517079"
  },
  {
    "text": "right like all of this seems strange it seems like if you were to do this you'd have something like function you know",
    "start": "2517079",
    "end": "2523680"
  },
  {
    "text": "run a fib as a service and then You' have some sort of like uh incoming n int",
    "start": "2523680",
    "end": "2529839"
  },
  {
    "text": "and then you go in here and be like if incoming is greater than some sort of Max thing therefore return a 500 return",
    "start": "2529839",
    "end": "2535839"
  },
  {
    "text": "500 on Bad Case else do the good thing do the good thing right it just seems",
    "start": "2535839",
    "end": "2541520"
  },
  {
    "text": "like a weird place to handle the error right like why are you handling this error right here when you already have",
    "start": "2541520",
    "end": "2547400"
  },
  {
    "text": "that information plainly available to you also create a DB table while you're",
    "start": "2547400",
    "end": "2553359"
  },
  {
    "text": "in there hey just throw a quick DB table Prime instead of doing this they could just calculate the Fibonacci directly",
    "start": "2553359",
    "end": "2560119"
  },
  {
    "text": "with the binets formula in O of one time since it's just comparing two completely different things for no",
    "start": "2560119",
    "end": "2565200"
  },
  {
    "text": "reason they I know they could have also just done the iterative approach which is also super fast it just feels like it",
    "start": "2565200",
    "end": "2572440"
  },
  {
    "text": "just this feels like a very contrived example of trying to make something the worst possible version I'm going to make",
    "start": "2572440",
    "end": "2579480"
  },
  {
    "text": "the tightest Loop something that explodes in function calls and I'm going to show you that if I don't have to",
    "start": "2579480",
    "end": "2587079"
  },
  {
    "text": "handle this that it's in fact faster which you're right if you can return just an unsigned integer there's less",
    "start": "2587079",
    "end": "2594160"
  },
  {
    "text": "stack allocations I have no idea what standard expected does either does standard expected do some sort of uh",
    "start": "2594160",
    "end": "2599520"
  },
  {
    "text": "Heap allocation I have I I just have no idea I don't know how these things work Uncle Bob intensifies a recursive thingy",
    "start": "2599520",
    "end": "2605760"
  },
  {
    "text": "this just all feels like I will say this can I just go back he actually makes a exceptionally good argument right here",
    "start": "2605760",
    "end": "2612760"
  },
  {
    "text": "okay this is an exceptionally good argument you know why this is a great argument pretend I'm in Rust for a",
    "start": "2612760",
    "end": "2621240"
  },
  {
    "text": "second how does this fail right this is a great argument for rust this could",
    "start": "2626440",
    "end": "2633119"
  },
  {
    "text": "potentially oom how do you handle it well you don't you don't actually handle",
    "start": "2633119",
    "end": "2638680"
  },
  {
    "text": "this oom right or if you did this right let a",
    "start": "2638680",
    "end": "2644520"
  },
  {
    "text": "equals this and then you went a. clone right let b equals this right like this",
    "start": "2644520",
    "end": "2649760"
  },
  {
    "text": "is that's actually at least a real argument that he's making which I actually really like try new but I I",
    "start": "2649760",
    "end": "2654839"
  },
  {
    "text": "know there's a try new but that would be how you have to handle it you actually have to call a completely different method called try new but almost nobody",
    "start": "2654839",
    "end": "2662200"
  },
  {
    "text": "even knows about that right so I'd say that this was at least a very good",
    "start": "2662200",
    "end": "2668319"
  },
  {
    "text": "argument now zigg on the other hand Zig does not have that problem because zigg",
    "start": "2668319",
    "end": "2673440"
  },
  {
    "text": "forces you to use an allocator and allocate on all explicit allocations so it actually would prevent you from",
    "start": "2673440",
    "end": "2678960"
  },
  {
    "text": "making this Oopsy Daisy so this was a great argument but still false short because he's comparing a language that",
    "start": "2678960",
    "end": "2685720"
  },
  {
    "text": "didn't have the um the constructs to ensure that these things worked that's",
    "start": "2685720",
    "end": "2691440"
  },
  {
    "text": "it Zig doesn't have context and errors though that's true Zig does not have the context and errors that it's needed so I",
    "start": "2691440",
    "end": "2697040"
  },
  {
    "text": "I think Zig has its own downfall but Zig also would have allowed you to be able to have an O and then for you to be able to take that o and make a decision based",
    "start": "2697040",
    "end": "2703680"
  },
  {
    "text": "off of an O I do agree though that zig's whole argument that I mean zig's whole argument against some types and all that",
    "start": "2703680",
    "end": "2710440"
  },
  {
    "text": "is an interesting one it yes o stands for out of Mana all right why are return erors uh let's see why are error return",
    "start": "2710440",
    "end": "2718280"
  },
  {
    "text": "values so much slower the obvious reason is that we have is error checks and branches uh does not explain everything",
    "start": "2718280",
    "end": "2723839"
  },
  {
    "text": "you might expect your CPU to quickly learn to predict branches uh I I first",
    "start": "2723839",
    "end": "2728880"
  },
  {
    "text": "off I never rely on those things that's crazy way to do stuff which are essentially free right uh this hides the",
    "start": "2728880",
    "end": "2734160"
  },
  {
    "text": "fact that each of these check silently consumes usually invisible resources of your CPU such as instruction cach upop",
    "start": "2734160",
    "end": "2740520"
  },
  {
    "text": "cash or micro off cash Branch history buffer reorder buffer and so on since almost any function can fail remember",
    "start": "2740520",
    "end": "2746680"
  },
  {
    "text": "that allocations in math can can and will fail checking all various errors in lines takes up significant amount of",
    "start": "2746680",
    "end": "2752839"
  },
  {
    "text": "resources that can't be useful for code exceptions are handled in completely different code path usually outlined in",
    "start": "2752839",
    "end": "2759760"
  },
  {
    "text": "uh cold sections which already gives them a solid Advantage another thing by the way that he's not mentioning in the",
    "start": "2759760",
    "end": "2765160"
  },
  {
    "text": "Tiger in the tiger style uh you're not allowed to use you're you're supposedly",
    "start": "2765160",
    "end": "2770240"
  },
  {
    "text": "not allowed to use things like unsigned or usze you use in 32 you always have a",
    "start": "2770240",
    "end": "2776000"
  },
  {
    "text": "defined size and then you put those expectations around things you assert that the world you cannot walk into a",
    "start": "2776000",
    "end": "2784559"
  },
  {
    "text": "specific case the thing is is the cost is actually dwarfed by any real computation yes yes as far as",
    "start": "2784559",
    "end": "2791040"
  },
  {
    "text": "performance go I just assumed everybody understood how ridiculous this was and his argument is actually correct this is",
    "start": "2791040",
    "end": "2797640"
  },
  {
    "text": "actually a correct argument which I agree with in some sense but nobody in a",
    "start": "2797640",
    "end": "2804720"
  },
  {
    "text": "real application is doing this type of stuff and if you are doing this say like",
    "start": "2804720",
    "end": "2810079"
  },
  {
    "text": "in the Havoc math engine and physics engine you're doing no error checking at all you're running numbers you're",
    "start": "2810079",
    "end": "2816000"
  },
  {
    "text": "crunching numbers I would be shocked to see result objects in in in a physics engine being passed all around cuz",
    "start": "2816000",
    "end": "2822760"
  },
  {
    "text": "that's just not happening it's a contrived example to make a bad point yeah yeah you're Colonel panicking on on",
    "start": "2822760",
    "end": "2828559"
  },
  {
    "text": "air it's the truest no Scotsman another difference is that instead of returning a simple int we now return a fat result",
    "start": "2828559",
    "end": "2835640"
  },
  {
    "text": "object uh this makes the call significantly more expensive since we now have to shuffle the values through",
    "start": "2835640",
    "end": "2841000"
  },
  {
    "text": "the stack which requires additional setup and tear down in the success case we now also need to convert the fat",
    "start": "2841000",
    "end": "2847400"
  },
  {
    "text": "result to the actual value this can prevent compiler optimization such as tail call optimization I didn't know",
    "start": "2847400",
    "end": "2852920"
  },
  {
    "text": "that I if this is real I didn't not know that uh in general the functional style eror propagation uses more registers and",
    "start": "2852920",
    "end": "2859359"
  },
  {
    "text": "stack space By the way isn't Fibonacci not even tail call uh recursively optimizable because you can't like",
    "start": "2859359",
    "end": "2866000"
  },
  {
    "text": "because you just can't anyways I thought it wasn't even possible to begin with I could be stupid I don't know a lot about",
    "start": "2866000",
    "end": "2871680"
  },
  {
    "text": "tail call optimization stuff I just always thought it it falls into it only if at the very last thing FIB is not is",
    "start": "2871680",
    "end": "2878599"
  },
  {
    "text": "not tail call I thought FIB is not a tail call we don't give uh back errors in physics engines we just give our best",
    "start": "2878599",
    "end": "2885559"
  },
  {
    "text": "answers iterative solvers are the way bab yeah one would assume yeah another difference is that instead of simply",
    "start": "2885559",
    "end": "2891400"
  },
  {
    "text": "returning an inch we oh yeah I already read this this can prevent compiler optimization such as tail call optimization which that could be true I",
    "start": "2891400",
    "end": "2897720"
  },
  {
    "text": "have no idea I just I'm just going to assume on good faith that he's telling the truth in general the functional style error propagation use more",
    "start": "2897720",
    "end": "2903680"
  },
  {
    "text": "registers and stack space which in turn leads to less inlining of course you can try to work around these problems by",
    "start": "2903680",
    "end": "2909720"
  },
  {
    "text": "allocating errors somewhere on the page such as thread local storage uh this is what exceptions do I have no idea",
    "start": "2909720",
    "end": "2915559"
  },
  {
    "text": "anything about that again I just feel like this is just a wild this is just a wild version throwing exceptions used to be terribly slow yes I so okay I was",
    "start": "2915559",
    "end": "2922760"
  },
  {
    "text": "under this impression but I I must be wrong which is fine uh but where did exceptions get their bad reputation I",
    "start": "2922760",
    "end": "2928960"
  },
  {
    "text": "think this was mostly due to the quality of their implementation it's funny that when it comes to exceptions he's so",
    "start": "2928960",
    "end": "2934319"
  },
  {
    "text": "willing to make the concession that better implement ations lead to better results but when it comes to air",
    "start": "2934319",
    "end": "2939799"
  },
  {
    "text": "handling as values the fundamental exception is that there is no better because everyone's lazy throwing",
    "start": "2939799",
    "end": "2945200"
  },
  {
    "text": "exceptions have always been expected to be quite slow so for a long time this code path did not much uh did not get",
    "start": "2945200",
    "end": "2951440"
  },
  {
    "text": "much performance work and thus was frankly terrible that is luckily that",
    "start": "2951440",
    "end": "2956640"
  },
  {
    "text": "but that luckily has changed to the benefit of the entire ecosystem propagation was stack unwinding is still",
    "start": "2956640",
    "end": "2961960"
  },
  {
    "text": "up to an order of magnitude slower than regular returns from a function but remember how we get",
    "start": "2961960",
    "end": "2967240"
  },
  {
    "text": "uh useful error messages for return uh oh my goodness but remember how we get useful error messages for error returns",
    "start": "2967240",
    "end": "2974839"
  },
  {
    "text": "how we also capture the stack Trace with the same mechanism so better unwinding benefits both sides but you get them on",
    "start": "2974839",
    "end": "2981000"
  },
  {
    "text": "both either way get but you get them on both you get them on both either way don't get this um I'm struggling on",
    "start": "2981000",
    "end": "2988920"
  },
  {
    "text": "these ones one I'm just struggling on this argument in general because he said they're slow they're 10x slower but trust me they're actually better because",
    "start": "2988920",
    "end": "2996160"
  },
  {
    "text": "but why the arguments are mostly sayane they just have nothing to do with exceptions versus air handling yes the",
    "start": "2996160",
    "end": "3001440"
  },
  {
    "text": "hard part is I'm relating all the arguments back to uh air handling and so I do like automatic uh",
    "start": "3001440",
    "end": "3008400"
  },
  {
    "text": "stack capturing I agree I agree that's actually really great can we all agree to that one absolutely fantastic I don't",
    "start": "3008400",
    "end": "3014280"
  },
  {
    "text": "have to back rust back Trace equals one to back Trace result objects it is",
    "start": "3014280",
    "end": "3019319"
  },
  {
    "text": "better I totally agree one argument for having slow exceptions is that getting a response from the user is even slower",
    "start": "3019319",
    "end": "3025680"
  },
  {
    "text": "any air condition that bubbles up to bother a user or triggers a network message is usually fine to handle with",
    "start": "3025680",
    "end": "3031960"
  },
  {
    "text": "an exception for other checks where we have to fall back where we have a fallback path that doesn't require an",
    "start": "3031960",
    "end": "3038040"
  },
  {
    "text": "outside decision such as checking for a cash hit it's probably better to use some kind of local return code this way",
    "start": "3038040",
    "end": "3044640"
  },
  {
    "text": "exceptions can often be avoided on critical paths and their slower performance really doesn't matter but you can make the exact same arguments",
    "start": "3044640",
    "end": "3051200"
  },
  {
    "text": "with errors as values right if you can avoid throwing an exception you can avoid an errors as of value and you're",
    "start": "3051200",
    "end": "3056480"
  },
  {
    "text": "just to say hey you know what I'm just going to return out of one we're going to do some sort of local things we're going to just do all the local locals",
    "start": "3056480",
    "end": "3062280"
  },
  {
    "text": "right however stack and whing used to have a big problem it was globally synchronized to find the stack frame",
    "start": "3062280",
    "end": "3068280"
  },
  {
    "text": "locations in the binary we need to look at the global symbol table which is then used to to find the unwind information",
    "start": "3068280",
    "end": "3074920"
  },
  {
    "text": "from the current function I read that wrong of the current function as already mentioned these symbols live in the",
    "start": "3074920",
    "end": "3081040"
  },
  {
    "text": "frame section of the dwarf format this information is usually static generated at a compile time and it usually doesn't",
    "start": "3081040",
    "end": "3086319"
  },
  {
    "text": "need to be synchronized however programs can also load code dynamically with DL open EG load plugins for or the jit",
    "start": "3086319",
    "end": "3093680"
  },
  {
    "text": "compilation yep uh the problem here is that we need a mutable data structure where we can dynamically update the and",
    "start": "3093680",
    "end": "3099640"
  },
  {
    "text": "the unwind info for the new code to protect this structure lib GC just slapped a mutex around this code and",
    "start": "3099640",
    "end": "3106040"
  },
  {
    "text": "called it a day now only one single exception can be thrown concurrently even on a 100 core machine with high",
    "start": "3106040",
    "end": "3112760"
  },
  {
    "text": "concurrency and many concurrent clients this becomes a bottleneck for fortunately Liv GC now has the",
    "start": "3112760",
    "end": "3118079"
  },
  {
    "text": "functionality to make the entire unwind process lock free in simple cases such as when no Dynamic stack frames are",
    "start": "3118079",
    "end": "3124359"
  },
  {
    "text": "loaded there is no reason to use locks the dynamic case is a bit more tricky but our co-founder Thomas Newman has",
    "start": "3124359",
    "end": "3131520"
  },
  {
    "text": "committed an implementation of a b Tre with optimistic locking lock coupling for those Dynamic sections oh that's",
    "start": "3131520",
    "end": "3137280"
  },
  {
    "text": "cool that's kind of a cool cool thing you got there and that makes sense of be Tre because that way you can kind of separate out the various parts so you",
    "start": "3137280",
    "end": "3143480"
  },
  {
    "text": "don't have to lock large branches is not that's a very uh that's a very Deb approach right founder mode mentioned",
    "start": "3143480",
    "end": "3148960"
  },
  {
    "text": "let's go founder mode co-founder mode by the way so let's see even so unwinding",
    "start": "3148960",
    "end": "3154960"
  },
  {
    "text": "is still more expensive uh than it needs to be for stack unwinding the dwarf frame tables are essentially",
    "start": "3154960",
    "end": "3161680"
  },
  {
    "text": "interpreted which leaves room for improvement there are some academic proposals such as reliable and fast",
    "start": "3161680",
    "end": "3166839"
  },
  {
    "text": "dwarf based stack unwinding to compile the unwind tables into native code which",
    "start": "3166839",
    "end": "3172000"
  },
  {
    "text": "promises to be an order of magnitude faster than the current exceptions oh that's nice that's cool I do feel like none of this has anything to do with",
    "start": "3172000",
    "end": "3178079"
  },
  {
    "text": "exceptions I one would assume that sors as values you could get a stack Trace you could unwind the stack there's",
    "start": "3178079",
    "end": "3184000"
  },
  {
    "text": "something that you could do to do all this I don't know it just feels kind of weird and I can we be real for a second how often do you look at a stack Trace",
    "start": "3184000",
    "end": "3190359"
  },
  {
    "text": "in a TR catch it only does it when you crash the program right so it kind of feels like this argument is kind of like",
    "start": "3190359",
    "end": "3196040"
  },
  {
    "text": "a null argument meaning that the context you're looking for really only becomes",
    "start": "3196040",
    "end": "3201280"
  },
  {
    "text": "visible in situations in which you look at the stack Trac I look at stack traces all the time but not in just standard",
    "start": "3201280",
    "end": "3206640"
  },
  {
    "text": "handling right you would you would never do you would you would you would never be like node you know try uh try uh",
    "start": "3206640",
    "end": "3214319"
  },
  {
    "text": "what's it called Json parse something you know and then catch and",
    "start": "3214319",
    "end": "3221200"
  },
  {
    "text": "then do some sort of Stack like you you wouldn't do this in application code stack inspection in the application",
    "start": "3221200",
    "end": "3227440"
  },
  {
    "text": "Level would be kind of weird to do I I wouldn't even be really sure what you'd be looking for I'd have to really think about that I think that you need to",
    "start": "3227440",
    "end": "3234000"
  },
  {
    "text": "build it with stack traces when throwing an exception not when catching it yeah catch log I know that what a stack ER",
    "start": "3234000",
    "end": "3240559"
  },
  {
    "text": "looks like you wouldn't steal an exception would you debuggers exist I I'm just saying it's a weird like I'm on his team I'm totally on this team that",
    "start": "3240559",
    "end": "3247839"
  },
  {
    "text": "getting good stack exceptions and all that um so low-level learning was saying something and I want to hear his opinion",
    "start": "3247839",
    "end": "3253000"
  },
  {
    "text": "on this one uh let's see you could unwind the stack but you wouldn't know what function was being called yeah but",
    "start": "3253000",
    "end": "3259240"
  },
  {
    "text": "if you crash the program from a result wouldn't you be able to at least from that point forward wouldn't you be able",
    "start": "3259240",
    "end": "3264520"
  },
  {
    "text": "to get the stacks race I guess you could since you got the result object you you couldn't get the underlying stack Trace",
    "start": "3264520",
    "end": "3270720"
  },
  {
    "text": "that produced the result object and you'd only get the anyhow yeah and a crash I think they're trying to gracefully restore yeah okay final",
    "start": "3270720",
    "end": "3276680"
  },
  {
    "text": "thoughts in my opinion exceptions have several advantages over air return uh over erir return values exceptions",
    "start": "3276680",
    "end": "3282000"
  },
  {
    "text": "provide separations of concerns by keeping air path distinct sort of sometimes sometimes it makes it way",
    "start": "3282000",
    "end": "3287359"
  },
  {
    "text": "worse it can sometimes make it way way worse like if you've ever seen any await code any async code in JavaScript or in",
    "start": "3287359",
    "end": "3295359"
  },
  {
    "text": "in any code that they async like any rust code that's async any async handling code at all results in every",
    "start": "3295359",
    "end": "3300920"
  },
  {
    "text": "single async call can also be an error and if you have async code that isn't considering error you just simply aren't",
    "start": "3300920",
    "end": "3307359"
  },
  {
    "text": "considering your error path results with error codes can hide system level errors such as out of memory or overflows sort",
    "start": "3307359",
    "end": "3313720"
  },
  {
    "text": "of I mean I I I agree that you have to do try new versus uh new which is one",
    "start": "3313720",
    "end": "3319760"
  },
  {
    "text": "could argue skill issues 99% of applications don't need to consider out of memory exceptions so you could argue",
    "start": "3319760",
    "end": "3326599"
  },
  {
    "text": "that if you're writing an application that needs to consider autom memory exceptions then maybe you need to use the try new versus the new fair fair",
    "start": "3326599",
    "end": "3332799"
  },
  {
    "text": "argument uh and I I think that this is a very good argument right here for uh a reason why having errors that can Bubble",
    "start": "3332799",
    "end": "3339839"
  },
  {
    "text": "Up and handlers that can handle like errors that are unknown is a good thing exceptions make it easy to provide root",
    "start": "3339839",
    "end": "3346079"
  },
  {
    "text": "cause context by default I do not think that's true at all in fact I would say that it's very in fact exceptions make",
    "start": "3346079",
    "end": "3351839"
  },
  {
    "text": "it extremely easy to lose all context through the M through uh through the midd ground Middle Earth is very",
    "start": "3351839",
    "end": "3358559"
  },
  {
    "text": "difficult to get context from code that uses exceptions can run FAS than code with inline errors um yes in stupid",
    "start": "3358559",
    "end": "3363760"
  },
  {
    "text": "examples I do agree dumb examples you can definitely make it better all right",
    "start": "3363760",
    "end": "3369200"
  },
  {
    "text": "uh any uh serious application that require graceful o handling would write their own allocators yes I would assume",
    "start": "3369200",
    "end": "3374880"
  },
  {
    "text": "that to be the case or they'd use something like Zig in which requires allocators that handle those things already natively uh unless you're uh",
    "start": "3374880",
    "end": "3381920"
  },
  {
    "text": "unless you are in charge of implementing a jit or writing a compiler but that's oh oopsies that's uh A1 uh coming from a",
    "start": "3381920",
    "end": "3388559"
  },
  {
    "text": "language like C++ which allows all sorts of things I'm still a bit puzzled as to why newer languages like rust or go",
    "start": "3388559",
    "end": "3394880"
  },
  {
    "text": "don't allow the use of exceptions uh while you can definitely abuse exceptions it kind of does go sort of",
    "start": "3394880",
    "end": "3400359"
  },
  {
    "text": "does go go has Panic capturing right so you can actually recover from a panic so",
    "start": "3400359",
    "end": "3405760"
  },
  {
    "text": "in in some sense it has these fatal exception recoveries but they're I don't I've never tried to use one so I don't",
    "start": "3405760",
    "end": "3411880"
  },
  {
    "text": "I've never been there I don't know we uh while you can definitely abuse exceptions functional Style values are not a one- siiz fits-all solution",
    "start": "3411880",
    "end": "3418760"
  },
  {
    "text": "whenever you're capturing context for an error message you want exceptions so we should be able to use them my only Russ",
    "start": "3418760",
    "end": "3426559"
  },
  {
    "text": "does as well okay but idiomatic a go avoids Panic yes you avoid Panic as much as you can there's catch unwind okay oh",
    "start": "3426559",
    "end": "3433119"
  },
  {
    "text": "I just realized you need to know the function information uh in dwarf to figure out what uh function is on the",
    "start": "3433119",
    "end": "3439440"
  },
  {
    "text": "stack uh stack race is the Handler for that exception so the missile knows where it is by knowing where it isn't",
    "start": "3439440",
    "end": "3444480"
  },
  {
    "text": "nice I was about to say that looks like r one Russ says also catch unwind Tokyo explicitly does that when the worker",
    "start": "3444480",
    "end": "3450680"
  },
  {
    "text": "thread panics okay um I just I I was very excited about this article because I really wanted to hear some good",
    "start": "3450680",
    "end": "3456359"
  },
  {
    "text": "reasons and I really do like the o one which is more of a call out than anything else that if you are doing",
    "start": "3456359",
    "end": "3462680"
  },
  {
    "text": "potentially memory if you're doing oom stuff if you're working on a project that has o capabilities it might be good",
    "start": "3462680",
    "end": "3468720"
  },
  {
    "text": "to think about o uh O Level allocations Zig obviously is a good choice rust but",
    "start": "3468720",
    "end": "3474400"
  },
  {
    "text": "having to do try new but I I really heard no great articles for I heard no",
    "start": "3474400",
    "end": "3479960"
  },
  {
    "text": "good argument for why exceptions are better than errors other than I will say that coding as if you can just code",
    "start": "3479960",
    "end": "3486200"
  },
  {
    "text": "happily with no air path coding considered does make it really easy to understand happy path coding but I will",
    "start": "3486200",
    "end": "3493039"
  },
  {
    "text": "say this that 80% of coding feels like it's not handling happy path coding it's",
    "start": "3493039",
    "end": "3498760"
  },
  {
    "text": "actually thinking about and ensuring that things are really really uh resilient I find resilient code and",
    "start": "3498760",
    "end": "3505440"
  },
  {
    "text": "error handling code to be significantly harder to write and harder to reason about especially in a function that",
    "start": "3505440",
    "end": "3512039"
  },
  {
    "text": "provides no path for handling that so for me writing that kind of stuff feels",
    "start": "3512039",
    "end": "3517799"
  },
  {
    "text": "a lot better and the O exceptions are the one out of a million software considerations they're not the",
    "start": "3517799",
    "end": "3523480"
  },
  {
    "text": "consideration of your average person building a CLI tool building a website building any of these things your chance",
    "start": "3523480",
    "end": "3529760"
  },
  {
    "text": "of getting an O is exceptionally low unless of course you're using sta or slack which somehow uses all the",
    "start": "3529760",
    "end": "3535319"
  },
  {
    "text": "gigabytes and the performance the yeah the performance argument obviously makes no sense either uh yeah you're not uh",
    "start": "3535319",
    "end": "3541079"
  },
  {
    "text": "you're not throwing or handling errors you're doing best case thing right game physics engine is be is like the best",
    "start": "3541079",
    "end": "3546680"
  },
  {
    "text": "example of this um is more important in DBS absolutely it's but that's like a very obvious and distinct thing that",
    "start": "3546680",
    "end": "3551839"
  },
  {
    "text": "you're doing here but I would argue that there's better languages for databases I think Zig is a superior language for a",
    "start": "3551839",
    "end": "3558400"
  },
  {
    "text": "database it's designed for that type of stuff now you can argue you could also do it in other languages you're you're",
    "start": "3558400",
    "end": "3563520"
  },
  {
    "text": "absolutely right you're absolutely right I would I Absolut abs abs abs absolutely right um",
    "start": "3563520",
    "end": "3570000"
  },
  {
    "text": "yeah yeah I know but I would argue this it doesn't matter in the critical path because in the critical path if you have",
    "start": "3570000",
    "end": "3575119"
  },
  {
    "text": "a critical path that needs optimized code you will know you need optimized code in that path and you will write",
    "start": "3575119",
    "end": "3581440"
  },
  {
    "text": "code in which is optimized in that specific area and when stack allocating errors as",
    "start": "3581440",
    "end": "3588079"
  },
  {
    "text": "values becomes your most critical performance",
    "start": "3588079",
    "end": "3593280"
  },
  {
    "text": "problem then you can move on to that as a problem but my guess is that is not your first your second or your third",
    "start": "3593280",
    "end": "3600319"
  },
  {
    "text": "problem and probably not even your fourth problem it's just not even a problem likely for you death by a",
    "start": "3600319",
    "end": "3606960"
  },
  {
    "text": "Thousand Cuts you know typically I don't think of Stack allocations as a death by a Thousand Cuts usually there's a lot",
    "start": "3606960",
    "end": "3612799"
  },
  {
    "text": "there's a lot of better there's a lot better reasons to get a death by a Thousand Cuts that aren't going to be in that in that world usually it's you",
    "start": "3612799",
    "end": "3619400"
  },
  {
    "text": "doing dumb things all over the place just creating random allocations uh man it feels like you're missing the point",
    "start": "3619400",
    "end": "3625039"
  },
  {
    "text": "what's the point though trying to understand the point gidra tell me the point so I can understand it because I",
    "start": "3625039",
    "end": "3631359"
  },
  {
    "text": "am trying to understand it I feel like the Happy path one is extremely misleading and I actually hate happy path only code I feel that you have to",
    "start": "3631359",
    "end": "3639000"
  },
  {
    "text": "have way more context and that you end up hiding what the what the bad paths are which makes it actually really hard",
    "start": "3639000",
    "end": "3644960"
  },
  {
    "text": "to write good resilient code okay so we're going to scratch that one I feel like the out of- memory one I said is a",
    "start": "3644960",
    "end": "3652119"
  },
  {
    "text": "good one because a lot of people don't even consider that one but again if you're writing out of memory applications which is likely going to be",
    "start": "3652119",
    "end": "3658119"
  },
  {
    "text": "what databases you're going to want I I I don't even know other ones uh I guess operating systems what what other what",
    "start": "3658119",
    "end": "3664720"
  },
  {
    "text": "other applications are so memory intensive that that makes sense uh catch",
    "start": "3664720",
    "end": "3669960"
  },
  {
    "text": "all Cas is nice uh even in the cases besides o you you can have all of this",
    "start": "3669960",
    "end": "3675039"
  },
  {
    "text": "though this that but that is not a that's not a try catch this is my friend this is not a TR",
    "start": "3675039",
    "end": "3682039"
  },
  {
    "text": "catch situation nothing about that is TR catch specific or a as values neither",
    "start": "3682039",
    "end": "3687160"
  },
  {
    "text": "side so gedra that that argument is not a good one because you can do that in either case so we have to think of a",
    "start": "3687160",
    "end": "3693520"
  },
  {
    "text": "different case if you can give me a different case I'm totally in it's something that makes sense I'm totally in on buying that how does a program run",
    "start": "3693520",
    "end": "3699880"
  },
  {
    "text": "out of Mana though well that's the Secret of Mana but I'm going to hold on to there you go g i i I would love",
    "start": "3699880",
    "end": "3707160"
  },
  {
    "text": "another argument for whenever I see so let me put it this way when I see somebody who said let's see I mean what",
    "start": "3707160",
    "end": "3713799"
  },
  {
    "text": "if I want to search but not blow up everything you can have then you make",
    "start": "3713799",
    "end": "3718960"
  },
  {
    "text": "errors it's no different if you want panics that crash the program you write panics that crash the program if you",
    "start": "3718960",
    "end": "3725680"
  },
  {
    "text": "want errors then you have to write it with errors now I do agree I I I think you're making a good point which is you",
    "start": "3725680",
    "end": "3732400"
  },
  {
    "text": "want to not have to color your function with error information you just want something that handles the error but I'm",
    "start": "3732400",
    "end": "3738920"
  },
  {
    "text": "going to probably argue that that could be that generally is a pretty difficult situation and typically Global air",
    "start": "3738920",
    "end": "3745279"
  },
  {
    "text": "handlers you know are somewhere way far up the program to the point where what do you do with this information now what",
    "start": "3745279",
    "end": "3751039"
  },
  {
    "text": "I assume you're trying to say is that this try catch wraps a user request",
    "start": "3751039",
    "end": "3756079"
  },
  {
    "text": "coming in and that way you don't care how this thing breaks just somewhere down the line it breaks and you return a",
    "start": "3756079",
    "end": "3761880"
  },
  {
    "text": "500 and you don't care what happens you don't have a server that has State you don't have to recover State at any point",
    "start": "3761880",
    "end": "3768799"
  },
  {
    "text": "I think they're referring to that it's like the opposite of props drilling yes it's the opposite of props drilling is what you're trying to say um I don't",
    "start": "3768799",
    "end": "3774520"
  },
  {
    "text": "think anyone is arguing uh writing return-based errors is harder to write it absolutely is",
    "start": "3774520",
    "end": "3780839"
  },
  {
    "text": "absolutely fully agree but the re it isn't harder it is harder it is harder",
    "start": "3780839",
    "end": "3786799"
  },
  {
    "text": "in the sense of writing it meaning that every single function you have to consider all the errors at all points",
    "start": "3786799",
    "end": "3793680"
  },
  {
    "text": "that is fundamentally harder in shortterm pain but in long-term pain I",
    "start": "3793680",
    "end": "3800359"
  },
  {
    "text": "think it's significantly easier because you must at all points consider errors",
    "start": "3800359",
    "end": "3807079"
  },
  {
    "text": "at that point yeah apologies yeah okay wa yeah yeah sorry I I I think I know what you're trying to say I thought I I thought I understood until this this",
    "start": "3807079",
    "end": "3813279"
  },
  {
    "text": "thing and then I think I misread it but right so more time consumer easier to refactor though it is easier to refactor",
    "start": "3813279",
    "end": "3819440"
  },
  {
    "text": "by actually by far let's just all agree that errors are a pain regardless of how they're handled and that just something to let's see and that is just something",
    "start": "3819440",
    "end": "3826039"
  },
  {
    "text": "to accept they will always have some overhead and will always be in perfect but they are a necessary evil it's just",
    "start": "3826039",
    "end": "3831839"
  },
  {
    "text": "a difference of when they pay off that's a fair way to put it SS will always be a of all parts right errors are everywhere",
    "start": "3831839",
    "end": "3838760"
  },
  {
    "text": "there is no escaping them this is why I choose errors as values over exceptions I want to know who airs when they air",
    "start": "3838760",
    "end": "3845680"
  },
  {
    "text": "why they air I want to be able to take that information and make decisions in my application at that point for me",
    "start": "3845680",
    "end": "3851559"
  },
  {
    "text": "that's the best way to do it because sometimes some sometimes I just want on an error to return false because this is",
    "start": "3851559",
    "end": "3859000"
  },
  {
    "text": "just a filter function I was unable to Json decode it I don't need anything like that but this is an exceptionally",
    "start": "3859000",
    "end": "3864880"
  },
  {
    "text": "easy oopsy da where you're not meaning to do a try catch here and you ACD blow yourself up like you forget the TR catch",
    "start": "3864880",
    "end": "3871079"
  },
  {
    "text": "and you blow yourself up it's very easy to forget some of these things whereas if you have errors as values you cannot",
    "start": "3871079",
    "end": "3876400"
  },
  {
    "text": "forget it's inlined it must be handled it's right there in your face you know at all points which functions do and",
    "start": "3876400",
    "end": "3881799"
  },
  {
    "text": "don't air it's why I like him anyways all right that was a wild one uh I I would have loved by the way Philip I'm",
    "start": "3881799",
    "end": "3887480"
  },
  {
    "text": "not trying to dunk on you I'm sure you have good reasons for everything you're saying and I bet you there's things that I don't consider cuz you do DB stuff uh",
    "start": "3887480",
    "end": "3893760"
  },
  {
    "text": "but I would have loved more examples for where it's actually easier and nicer because I'm not seeing anything easier",
    "start": "3893760",
    "end": "3898839"
  },
  {
    "text": "and nicer and you straw man erors as values by using C as an example with a no which I kind of feel like is a little",
    "start": "3898839",
    "end": "3905599"
  },
  {
    "text": "bit like I I know you probably have better examples right anyways hold on I",
    "start": "3905599",
    "end": "3910760"
  },
  {
    "text": "don't care it's just semantics I do care because I need to know if something fails I do care in some languages errors",
    "start": "3910760",
    "end": "3917559"
  },
  {
    "text": "are not reported you don't know which function does or does not blow up that's a real problem okay the",
    "start": "3917559",
    "end": "3924640"
  },
  {
    "text": "name is the primagen I'm all about non-hidden information explicit best",
    "start": "3924640",
    "end": "3932760"
  }
]