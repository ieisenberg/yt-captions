[
  {
    "text": "the hidden",
    "start": "359",
    "end": "2320"
  },
  {
    "text": "performance cost I forgot that word",
    "start": "2320",
    "end": "4799"
  },
  {
    "text": "existed uh of node.js and graph qual",
    "start": "4799",
    "end": "7839"
  },
  {
    "text": "okay so nodejs and graph queel are",
    "start": "7839",
    "end": "9639"
  },
  {
    "text": "popular Technologies for building web",
    "start": "9639",
    "end": "11559"
  },
  {
    "text": "applications but in my experience they",
    "start": "11559",
    "end": "13400"
  },
  {
    "text": "come at a certain scaling and",
    "start": "13400",
    "end": "14639"
  },
  {
    "text": "performance trade-offs to be aware of I",
    "start": "14639",
    "end": "16720"
  },
  {
    "text": "wait hold I thought bun made made",
    "start": "16720",
    "end": "18480"
  },
  {
    "text": "JavaScript faster than rust so what's",
    "start": "18480",
    "end": "21000"
  },
  {
    "text": "this thing he's talking about incorrect",
    "start": "21000",
    "end": "23279"
  },
  {
    "text": "take bad take uh graph qu's modular",
    "start": "23279",
    "end": "26000"
  },
  {
    "text": "structure generally leads to code that",
    "start": "26000",
    "end": "27519"
  },
  {
    "text": "instantiates excessive uh promises which",
    "start": "27519",
    "end": "30400"
  },
  {
    "text": "degrades request performance Benchmark",
    "start": "30400",
    "end": "32480"
  },
  {
    "text": "show as much as 2 to 3x latency increase",
    "start": "32480",
    "end": "35600"
  },
  {
    "text": "yeah yes about 3 weeks ago I tweeted",
    "start": "35600",
    "end": "38719"
  },
  {
    "text": "that promises are actually really bad",
    "start": "38719",
    "end": "40559"
  },
  {
    "text": "for performance okay no JS is known for",
    "start": "40559",
    "end": "42680"
  },
  {
    "text": "its non-blocking IO operations yeah",
    "start": "42680",
    "end": "45079"
  },
  {
    "text": "that's what everyone keeps telling me if",
    "start": "45079",
    "end": "46520"
  },
  {
    "text": "you say something like this to the",
    "start": "46520",
    "end": "47760"
  },
  {
    "text": "modern JavaScript engineer if you say",
    "start": "47760",
    "end": "49600"
  },
  {
    "text": "the phrase don't use a promise you will",
    "start": "49600",
    "end": "52840"
  },
  {
    "text": "literally get people to be like you mean",
    "start": "52840",
    "end": "55120"
  },
  {
    "text": "you're going to write sync code isn't",
    "start": "55120",
    "end": "57000"
  },
  {
    "text": "that slower and it's just shocking that",
    "start": "57000",
    "end": "59680"
  },
  {
    "text": "there's not a middle ground like Oh you",
    "start": "59680",
    "end": "61519"
  },
  {
    "text": "mean you want me to handle this with",
    "start": "61519",
    "end": "63359"
  },
  {
    "text": "without using you want me to do async",
    "start": "63359",
    "end": "65000"
  },
  {
    "text": "without promises it like it doesn't",
    "start": "65000",
    "end": "66840"
  },
  {
    "text": "exist in the brain at this point it's",
    "start": "66840",
    "end": "68880"
  },
  {
    "text": "shocking all right all synr is work and",
    "start": "68880",
    "end": "71040"
  },
  {
    "text": "no. JS happens over an event Loop thread",
    "start": "71040",
    "end": "73119"
  },
  {
    "text": "other than a few isolated multi-threaded",
    "start": "73119",
    "end": "74720"
  },
  {
    "text": "features like worker threads and of",
    "start": "74720",
    "end": "76000"
  },
  {
    "text": "course garbage collection largely",
    "start": "76000",
    "end": "77200"
  },
  {
    "text": "happens async if you read the what is it",
    "start": "77200",
    "end": "79240"
  },
  {
    "text": "oroo oroo what's the name of it or Oro",
    "start": "79240",
    "end": "82439"
  },
  {
    "text": "oroo something o o something something",
    "start": "82439",
    "end": "84759"
  },
  {
    "text": "something is the name of their sweet",
    "start": "84759",
    "end": "86439"
  },
  {
    "text": "garbage collector it's awesome uh with",
    "start": "86439",
    "end": "88159"
  },
  {
    "text": "the event Loop is managed well and the",
    "start": "88159",
    "end": "90040"
  },
  {
    "text": "IO is uh is a true bottleneck no JS can",
    "start": "90040",
    "end": "93360"
  },
  {
    "text": "uh be very efficient scalable technology",
    "start": "93360",
    "end": "95680"
  },
  {
    "text": "in general JavaScript is very efficient",
    "start": "95680",
    "end": "99119"
  },
  {
    "text": "if it doesn't have to do a lot it's like",
    "start": "99119",
    "end": "101640"
  },
  {
    "text": "your classic way to fix things how do",
    "start": "101640",
    "end": "104280"
  },
  {
    "text": "you if JavaScript isn't doing a lot then",
    "start": "104280",
    "end": "107200"
  },
  {
    "text": "of course it's pretty fast what would be",
    "start": "107200",
    "end": "109920"
  },
  {
    "text": "a sync without promises in JavaScript a",
    "start": "109920",
    "end": "112880"
  },
  {
    "text": "call back I this may be hard to",
    "start": "112880",
    "end": "115280"
  },
  {
    "text": "comprehend but taking out a few promises",
    "start": "115280",
    "end": "118880"
  },
  {
    "text": "taking out",
    "start": "118880",
    "end": "120439"
  },
  {
    "text": "a few promises and going back through",
    "start": "120439",
    "end": "122560"
  },
  {
    "text": "the uh event Loop can actually really",
    "start": "122560",
    "end": "124520"
  },
  {
    "text": "help people forget about continuation",
    "start": "124520",
    "end": "127000"
  },
  {
    "text": "passing style people forgot about every",
    "start": "127000",
    "end": "129119"
  },
  {
    "text": "I know",
    "start": "129119",
    "end": "130080"
  },
  {
    "text": "it's are callbacks really a sync if your",
    "start": "130080",
    "end": "132879"
  },
  {
    "text": "date never does uh does",
    "start": "132879",
    "end": "135599"
  },
  {
    "text": "them shut shut",
    "start": "135599",
    "end": "138720"
  },
  {
    "text": "up oh my goodness uh on the other hand",
    "start": "138720",
    "end": "141239"
  },
  {
    "text": "if a request does a lot of processing on",
    "start": "141239",
    "end": "143080"
  },
  {
    "text": "the event Loop it will block other",
    "start": "143080",
    "end": "144760"
  },
  {
    "text": "requests on that container no. JS",
    "start": "144760",
    "end": "146840"
  },
  {
    "text": "applications are particularly",
    "start": "146840",
    "end": "148120"
  },
  {
    "text": "susceptible to sporadic performance",
    "start": "148120",
    "end": "149959"
  },
  {
    "text": "issues due to noisy neighbors a lot of",
    "start": "149959",
    "end": "152560"
  },
  {
    "text": "the sporadic performance issues actually",
    "start": "152560",
    "end": "155040"
  },
  {
    "text": "typically come from garbage collection",
    "start": "155040",
    "end": "157720"
  },
  {
    "text": "uh others heavy let's see other heavy",
    "start": "157720",
    "end": "160040"
  },
  {
    "text": "request handlers that overlay consume uh",
    "start": "160040",
    "end": "162879"
  },
  {
    "text": "consume the event Loop additional graph",
    "start": "162879",
    "end": "164519"
  },
  {
    "text": "quals resolve like like if you run on a",
    "start": "164519",
    "end": "166920"
  },
  {
    "text": "single core so if your instance is",
    "start": "166920",
    "end": "170040"
  },
  {
    "text": "single core yeah concerned about",
    "start": "170040",
    "end": "172000"
  },
  {
    "text": "performance don't use no. JS it's really",
    "start": "172000",
    "end": "173519"
  },
  {
    "text": "that simple uh but if your if your",
    "start": "173519",
    "end": "175159"
  },
  {
    "text": "instance runs on a single core you get",
    "start": "175159",
    "end": "177360"
  },
  {
    "text": "massively hampered by garbage collection",
    "start": "177360",
    "end": "181080"
  },
  {
    "text": "right a garbage collection is so",
    "start": "181080",
    "end": "182720"
  },
  {
    "text": "efficient these days because it can run",
    "start": "182720",
    "end": "185319"
  },
  {
    "text": "on more than one thread additional graph",
    "start": "185319",
    "end": "187959"
  },
  {
    "text": "quals resolver structure can result in",
    "start": "187959",
    "end": "190360"
  },
  {
    "text": "more promises overhead compared to rest",
    "start": "190360",
    "end": "192280"
  },
  {
    "text": "end points which may cause suboptimal",
    "start": "192280",
    "end": "194440"
  },
  {
    "text": "user perceived latency if not managed",
    "start": "194440",
    "end": "196480"
  },
  {
    "text": "carefully Fair graph quel oh no it's",
    "start": "196480",
    "end": "199840"
  },
  {
    "text": "that thing here continue reading just",
    "start": "199840",
    "end": "201159"
  },
  {
    "text": "let let a man read graph quel enables a",
    "start": "201159",
    "end": "203400"
  },
  {
    "text": "modular design for apis for example we",
    "start": "203400",
    "end": "205319"
  },
  {
    "text": "Define a type in our schema and Define",
    "start": "205319",
    "end": "206920"
  },
  {
    "text": "the one resolver for that type",
    "start": "206920",
    "end": "208480"
  },
  {
    "text": "regardless of where that resol appears",
    "start": "208480",
    "end": "210280"
  },
  {
    "text": "in the graph user query query the user",
    "start": "210280",
    "end": "215319"
  },
  {
    "text": "this modular design is great for",
    "start": "215319",
    "end": "216720"
  },
  {
    "text": "developer experience but leads to",
    "start": "216720",
    "end": "218080"
  },
  {
    "text": "promise heavy code okay yes we know uh",
    "start": "218080",
    "end": "220599"
  },
  {
    "text": "each promise adds a minuscule but",
    "start": "220599",
    "end": "222200"
  },
  {
    "text": "non-zero amount of work for the event",
    "start": "222200",
    "end": "224120"
  },
  {
    "text": "Loop which is discussed here to",
    "start": "224120",
    "end": "225959"
  },
  {
    "text": "demonstrate let's say we want to write a",
    "start": "225959",
    "end": "227680"
  },
  {
    "text": "feature that retrieves a user's item",
    "start": "227680",
    "end": "229920"
  },
  {
    "text": "let's see that retrieves a user's items",
    "start": "229920",
    "end": "232560"
  },
  {
    "text": "wow so many s's right there on a",
    "start": "232560",
    "end": "234760"
  },
  {
    "text": "shopping site we might build a rest",
    "start": "234760",
    "end": "236400"
  },
  {
    "text": "endpoint like this user items details",
    "start": "236400",
    "end": "238920"
  },
  {
    "text": "this would would be power by a few",
    "start": "238920",
    "end": "240439"
  },
  {
    "text": "squeal queries get some user get this",
    "start": "240439",
    "end": "242879"
  },
  {
    "text": "you know typically",
    "start": "242879",
    "end": "246000"
  },
  {
    "text": "maybe maybe we would do a join you know",
    "start": "246000",
    "end": "249840"
  },
  {
    "text": "typ you know I always say we should just",
    "start": "249840",
    "end": "252040"
  },
  {
    "text": "write squeal instead of using an omm I",
    "start": "252040",
    "end": "254439"
  },
  {
    "text": "might be mistaken uh a well structured",
    "start": "254439",
    "end": "258400"
  },
  {
    "text": "rest endpoint would have some relatively",
    "start": "258400",
    "end": "260320"
  },
  {
    "text": "simple code that makes these database",
    "start": "260320",
    "end": "262199"
  },
  {
    "text": "queries and massages uh and massages the",
    "start": "262199",
    "end": "265479"
  },
  {
    "text": "data back into a desired format we would",
    "start": "265479",
    "end": "267840"
  },
  {
    "text": "have no more than a few promises",
    "start": "267840",
    "end": "269400"
  },
  {
    "text": "involved and resolve in the request life",
    "start": "269400",
    "end": "271160"
  },
  {
    "text": "cycle in graph qual we would encourage",
    "start": "271160",
    "end": "273080"
  },
  {
    "text": "to write query like this user items ID",
    "start": "273080",
    "end": "276240"
  },
  {
    "text": "details item other fields if we have a",
    "start": "276240",
    "end": "279039"
  },
  {
    "text": "well structur let's see if we have it",
    "start": "279039",
    "end": "281000"
  },
  {
    "text": "well structured as graph Quil resolvers",
    "start": "281000",
    "end": "283080"
  },
  {
    "text": "we might have type resolvers for users",
    "start": "283080",
    "end": "285280"
  },
  {
    "text": "and item",
    "start": "285280",
    "end": "286600"
  },
  {
    "text": "details yep yep by the way this is",
    "start": "286600",
    "end": "289600"
  },
  {
    "text": "called creating a chatty protocol by the",
    "start": "289600",
    "end": "292880"
  },
  {
    "text": "way so for those that don't know chatty",
    "start": "292880",
    "end": "295080"
  },
  {
    "text": "protocols it's where you start making a",
    "start": "295080",
    "end": "297560"
  },
  {
    "text": "bunch of small requests to something",
    "start": "297560",
    "end": "299240"
  },
  {
    "text": "else and so chatty protocols tend to",
    "start": "299240",
    "end": "301600"
  },
  {
    "text": "have like a Distributive uh degrading",
    "start": "301600",
    "end": "303800"
  },
  {
    "text": "performance problem right because",
    "start": "303800",
    "end": "306240"
  },
  {
    "text": "obviously making one small request not a",
    "start": "306240",
    "end": "308479"
  },
  {
    "text": "big deal not chatty not with a d",
    "start": "308479",
    "end": "312360"
  },
  {
    "text": "chatty right not Giga chatty no not no",
    "start": "312360",
    "end": "315759"
  },
  {
    "text": "one would say that unless if your",
    "start": "315759",
    "end": "318319"
  },
  {
    "text": "protocol is very chatty uh what executed",
    "start": "318319",
    "end": "320479"
  },
  {
    "text": "a graph qual query with nested Fields uh",
    "start": "320479",
    "end": "323240"
  },
  {
    "text": "will result in a promise per field being",
    "start": "323240",
    "end": "325800"
  },
  {
    "text": "created such as user get user item us",
    "start": "325800",
    "end": "329840"
  },
  {
    "text": "and items const ID other fields get item",
    "start": "329840",
    "end": "331960"
  },
  {
    "text": "by details o as we use down data loaders",
    "start": "331960",
    "end": "335680"
  },
  {
    "text": "to prevent the N plus1 query problem",
    "start": "335680",
    "end": "338160"
  },
  {
    "text": "this would translate to the same squeal",
    "start": "338160",
    "end": "340240"
  },
  {
    "text": "queries as we described in rest endpoint",
    "start": "340240",
    "end": "342120"
  },
  {
    "text": "case so the io cost would be as",
    "start": "342120",
    "end": "344280"
  },
  {
    "text": "optimized as possible but we would",
    "start": "344280",
    "end": "346160"
  },
  {
    "text": "create one promise per item in the loop",
    "start": "346160",
    "end": "348479"
  },
  {
    "text": "and each promise adds work to the event",
    "start": "348479",
    "end": "350240"
  },
  {
    "text": "Loop a promise per field is pretty crazy",
    "start": "350240",
    "end": "353360"
  },
  {
    "text": "the funniest thing I've seen with graph",
    "start": "353360",
    "end": "355039"
  },
  {
    "text": "quel is the fact that it ultimately ends",
    "start": "355039",
    "end": "357280"
  },
  {
    "text": "up as JS API common queries command if",
    "start": "357280",
    "end": "360120"
  },
  {
    "text": "we only had something like that if only",
    "start": "360120",
    "end": "361680"
  },
  {
    "text": "we had some sort of structured language",
    "start": "361680",
    "end": "364160"
  },
  {
    "text": "in which we could make queries with",
    "start": "364160",
    "end": "366479"
  },
  {
    "text": "that's really what I think people want",
    "start": "366479",
    "end": "369360"
  },
  {
    "text": "you know",
    "start": "369360",
    "end": "371039"
  },
  {
    "text": "structured",
    "start": "371039",
    "end": "372800"
  },
  {
    "text": "queries",
    "start": "372800",
    "end": "374400"
  },
  {
    "text": "language I'd be squealing for it slq oh",
    "start": "374400",
    "end": "378400"
  },
  {
    "text": "yeah let's call it slq structured",
    "start": "378400",
    "end": "380000"
  },
  {
    "text": "language query I like it I like",
    "start": "380000",
    "end": "383039"
  },
  {
    "text": "this TJ we're on to something you know a",
    "start": "383039",
    "end": "385720"
  },
  {
    "text": "lot about language servers we could",
    "start": "385720",
    "end": "387199"
  },
  {
    "text": "develop one together I've written a",
    "start": "387199",
    "end": "388720"
  },
  {
    "text": "benchmark of GRA quel server that",
    "start": "388720",
    "end": "390479"
  },
  {
    "text": "returns user to demonstrate the impact",
    "start": "390479",
    "end": "392120"
  },
  {
    "text": "the overhead increases as we increase",
    "start": "392120",
    "end": "393560"
  },
  {
    "text": "the number of promises involved we",
    "start": "393560",
    "end": "395160"
  },
  {
    "text": "choose two graph quel servers Apollo",
    "start": "395160",
    "end": "397240"
  },
  {
    "text": "server plus Express and Mur Mur",
    "start": "397240",
    "end": "400120"
  },
  {
    "text": "mercurius mccarus mercurious mercurious",
    "start": "400120",
    "end": "404599"
  },
  {
    "text": "oh I'm so cu mccarus the common mccarus",
    "start": "404599",
    "end": "408160"
  },
  {
    "text": "uh by the way Express is actually the",
    "start": "408160",
    "end": "410000"
  },
  {
    "text": "worst framework ever",
    "start": "410000",
    "end": "412080"
  },
  {
    "text": "created like I understand it was the",
    "start": "412080",
    "end": "414199"
  },
  {
    "text": "first but Express is so bad at",
    "start": "414199",
    "end": "417840"
  },
  {
    "text": "performance it is shocking how bad",
    "start": "417840",
    "end": "421479"
  },
  {
    "text": "Express is like Express just doing basic",
    "start": "421479",
    "end": "425720"
  },
  {
    "text": "requests not a hot take there's nothing",
    "start": "425720",
    "end": "429039"
  },
  {
    "text": "hot about that take it's crazy uh my",
    "start": "429039",
    "end": "432039"
  },
  {
    "text": "Innovation would be that instead of",
    "start": "432039",
    "end": "433879"
  },
  {
    "text": "putting select before uh before from",
    "start": "433879",
    "end": "435879"
  },
  {
    "text": "you'd put the from you'd put it after",
    "start": "435879",
    "end": "437800"
  },
  {
    "text": "from uh and squeal and and S would be so",
    "start": "437800",
    "end": "442319"
  },
  {
    "text": "oh dude it'd be so Craig gasm from this",
    "start": "442319",
    "end": "444400"
  },
  {
    "text": "field select that out I do agree that",
    "start": "444400",
    "end": "446400"
  },
  {
    "text": "actually is the superior way are you",
    "start": "446400",
    "end": "448400"
  },
  {
    "text": "saying that Express is not express at",
    "start": "448400",
    "end": "449759"
  },
  {
    "text": "all dude it's not it's not express is",
    "start": "449759",
    "end": "453240"
  },
  {
    "text": "absolute dooo and I'm not I'm not saying",
    "start": "453240",
    "end": "456080"
  },
  {
    "text": "that the people who invented Express are",
    "start": "456080",
    "end": "457720"
  },
  {
    "text": "dooo I'm just saying the performance",
    "start": "457720",
    "end": "459720"
  },
  {
    "text": "that has been created in Express is dodu",
    "start": "459720",
    "end": "463199"
  },
  {
    "text": "okay",
    "start": "463199",
    "end": "464720"
  },
  {
    "text": "because it is it just is all right the",
    "start": "464720",
    "end": "468680"
  },
  {
    "text": "benchmarked uh queries return the same",
    "start": "468680",
    "end": "470599"
  },
  {
    "text": "data but one wraps uh every field",
    "start": "470599",
    "end": "472520"
  },
  {
    "text": "response in a promise in the other",
    "start": "472520",
    "end": "473759"
  },
  {
    "text": "returns data synchronously we return 100",
    "start": "473759",
    "end": "475960"
  },
  {
    "text": "items per user number of let's see",
    "start": "475960",
    "end": "478400"
  },
  {
    "text": "number of users returned sync user uh",
    "start": "478400",
    "end": "481680"
  },
  {
    "text": "milliseconds okay uh let's see data",
    "start": "481680",
    "end": "484199"
  },
  {
    "text": "loaders plus",
    "start": "484199",
    "end": "485639"
  },
  {
    "text": "promises okay I'd like to investigate",
    "start": "485639",
    "end": "487639"
  },
  {
    "text": "this more because I've done some playing",
    "start": "487639",
    "end": "489560"
  },
  {
    "text": "around with this and it can be really",
    "start": "489560",
    "end": "490879"
  },
  {
    "text": "bad this is very interesting though like",
    "start": "490879",
    "end": "493240"
  },
  {
    "text": "look at this that's pretty wild this is",
    "start": "493240",
    "end": "496080"
  },
  {
    "text": "pretty wild mous oh I'm so",
    "start": "496080",
    "end": "499639"
  },
  {
    "text": "mous uh okay I mean again I I never",
    "start": "499639",
    "end": "504039"
  },
  {
    "text": "trust other people's Benchmark numbers",
    "start": "504039",
    "end": "506080"
  },
  {
    "text": "but I think there's at least something",
    "start": "506080",
    "end": "507720"
  },
  {
    "text": "to be said that it's much much ler right",
    "start": "507720",
    "end": "511479"
  },
  {
    "text": "that",
    "start": "511479",
    "end": "513000"
  },
  {
    "text": "maybe maybe it's not maybe it's not",
    "start": "513000",
    "end": "517000"
  },
  {
    "text": "good maybe it's not great but this shows",
    "start": "517000",
    "end": "520200"
  },
  {
    "text": "that there's a huge disparity and that",
    "start": "520200",
    "end": "521760"
  },
  {
    "text": "there's probably a big problem there we",
    "start": "521760",
    "end": "523440"
  },
  {
    "text": "see that wrapping each user an item in a",
    "start": "523440",
    "end": "524959"
  },
  {
    "text": "promise causes two to three increase uh",
    "start": "524959",
    "end": "526720"
  },
  {
    "text": "in request latency an invalid criticism",
    "start": "526720",
    "end": "529160"
  },
  {
    "text": "here is that real world graph quel",
    "start": "529160",
    "end": "530600"
  },
  {
    "text": "resolvers perform IO so the overhead",
    "start": "530600",
    "end": "532560"
  },
  {
    "text": "will reduce significantly as a",
    "start": "532560",
    "end": "534080"
  },
  {
    "text": "percentage of time taken by the resolver",
    "start": "534080",
    "end": "536399"
  },
  {
    "text": "a well-tuned database can perform two",
    "start": "536399",
    "end": "538160"
  },
  {
    "text": "squeal queries to return 10K items in",
    "start": "538160",
    "end": "540320"
  },
  {
    "text": "less than 100 milliseconds you could",
    "start": "540320",
    "end": "541920"
  },
  {
    "text": "just do one baby uh which is reasonable",
    "start": "541920",
    "end": "543920"
  },
  {
    "text": "small percentage of high okay I'm I'm",
    "start": "543920",
    "end": "545640"
  },
  {
    "text": "actually a little stuck on that whole",
    "start": "545640",
    "end": "546800"
  },
  {
    "text": "two squeal thing I'm really stuck on",
    "start": "546800",
    "end": "549040"
  },
  {
    "text": "that I'm going to let it go everybody",
    "start": "549040",
    "end": "550600"
  },
  {
    "text": "we're letting it go together everybody",
    "start": "550600",
    "end": "552000"
  },
  {
    "text": "in chat",
    "start": "552000",
    "end": "553160"
  },
  {
    "text": "say can we just all Quote is it Elsa can",
    "start": "553160",
    "end": "556000"
  },
  {
    "text": "we all Quote Elsa right now and just let",
    "start": "556000",
    "end": "557440"
  },
  {
    "text": "it go let's just let it go let it go",
    "start": "557440",
    "end": "561120"
  },
  {
    "text": "jroo all right an invalid criticism here",
    "start": "561120",
    "end": "563959"
  },
  {
    "text": "uh is that the real world graph queel",
    "start": "563959",
    "end": "565600"
  },
  {
    "text": "resolvers perform IO so that the",
    "start": "565600",
    "end": "567160"
  },
  {
    "text": "overhead will uh will reduce",
    "start": "567160",
    "end": "568600"
  },
  {
    "text": "significantly as percentage of time",
    "start": "568600",
    "end": "570079"
  },
  {
    "text": "taken by the resolver a well-tuned",
    "start": "570079",
    "end": "572120"
  },
  {
    "text": "database can perform two squeal queries",
    "start": "572120",
    "end": "574240"
  },
  {
    "text": "to return 10 gay items in less than 100",
    "start": "574240",
    "end": "576079"
  },
  {
    "text": "milliseconds which is a re I mean all of",
    "start": "576079",
    "end": "579279"
  },
  {
    "text": "this doesn't make any sense like this",
    "start": "579279",
    "end": "580440"
  },
  {
    "text": "phrase doesn't make any sense in general",
    "start": "580440",
    "end": "582000"
  },
  {
    "text": "right uh which is a reasonable small",
    "start": "582000",
    "end": "584440"
  },
  {
    "text": "percentage of high latency caused by the",
    "start": "584440",
    "end": "586120"
  },
  {
    "text": "graph Quil server here regardless of",
    "start": "586120",
    "end": "587600"
  },
  {
    "text": "Express or mous uh real world code is",
    "start": "587600",
    "end": "590120"
  },
  {
    "text": "even Messier we might check feature",
    "start": "590120",
    "end": "591839"
  },
  {
    "text": "Flags or perform other async work in a",
    "start": "591839",
    "end": "593800"
  },
  {
    "text": "resolver which further increases the",
    "start": "593800",
    "end": "595240"
  },
  {
    "text": "number of promises the event Loop has to",
    "start": "595240",
    "end": "596920"
  },
  {
    "text": "Pro uh process all right so can I give",
    "start": "596920",
    "end": "599560"
  },
  {
    "text": "you a quick reason one reason why the",
    "start": "599560",
    "end": "601040"
  },
  {
    "text": "event Loop can be a little bit difficult",
    "start": "601040",
    "end": "603279"
  },
  {
    "text": "and people don't really understand why",
    "start": "603279",
    "end": "604640"
  },
  {
    "text": "it's",
    "start": "604640",
    "end": "605760"
  },
  {
    "text": "bad can I give you a quick little",
    "start": "605760",
    "end": "607959"
  },
  {
    "text": "understanding of it uh let's just let's",
    "start": "607959",
    "end": "610279"
  },
  {
    "text": "just talk about this so the event Loop",
    "start": "610279",
    "end": "612240"
  },
  {
    "text": "how it effectively Works looks something",
    "start": "612240",
    "end": "614200"
  },
  {
    "text": "like this okay uh let's go like this",
    "start": "614200",
    "end": "616760"
  },
  {
    "text": "let's pull this thing oh gosh I'm I'm",
    "start": "616760",
    "end": "619320"
  },
  {
    "text": "I'm I'm no master at uh at xcali draw",
    "start": "619320",
    "end": "623200"
  },
  {
    "text": "but we're okay at",
    "start": "623200",
    "end": "624560"
  },
  {
    "text": "it all right so the event Loop does",
    "start": "624560",
    "end": "626720"
  },
  {
    "text": "something like this right",
    "start": "626720",
    "end": "630240"
  },
  {
    "text": "it looks it looks a little something",
    "start": "630240",
    "end": "631720"
  },
  {
    "text": "like this where it uh pulls next task",
    "start": "631720",
    "end": "635760"
  },
  {
    "text": "off",
    "start": "635760",
    "end": "637639"
  },
  {
    "text": "q and check micro uh task Q right or",
    "start": "637639",
    "end": "643240"
  },
  {
    "text": "empty microtask Q so you can starve your",
    "start": "643240",
    "end": "645440"
  },
  {
    "text": "threads by having this so if you have a",
    "start": "645440",
    "end": "646720"
  },
  {
    "text": "bunch of microtasks or things that run",
    "start": "646720",
    "end": "648360"
  },
  {
    "text": "right away you can kind of starve",
    "start": "648360",
    "end": "650000"
  },
  {
    "text": "yourself right and so you get you know",
    "start": "650000",
    "end": "653279"
  },
  {
    "text": "it can be bad it's a loop if one would",
    "start": "653279",
    "end": "655399"
  },
  {
    "text": "say now what does a what does the task Q",
    "start": "655399",
    "end": "657440"
  },
  {
    "text": "look like well every time you do",
    "start": "657440",
    "end": "658440"
  },
  {
    "text": "something like set out what will happen",
    "start": "658440",
    "end": "660399"
  },
  {
    "text": "is that there's there's a linked list",
    "start": "660399",
    "end": "661760"
  },
  {
    "text": "that exists somewhere and every time",
    "start": "661760",
    "end": "663399"
  },
  {
    "text": "there's a set timeout it does this right",
    "start": "663399",
    "end": "666399"
  },
  {
    "text": "it adds another it adds a item to the",
    "start": "666399",
    "end": "668360"
  },
  {
    "text": "list so let's say that",
    "start": "668360",
    "end": "670600"
  },
  {
    "text": "you let's go like this I'm going to put",
    "start": "670600",
    "end": "672560"
  },
  {
    "text": "four items in here right we're going to",
    "start": "672560",
    "end": "675079"
  },
  {
    "text": "put four little items in here there we",
    "start": "675079",
    "end": "677440"
  },
  {
    "text": "go and let's say that you are this item",
    "start": "677440",
    "end": "679360"
  },
  {
    "text": "and you are the first to be executing",
    "start": "679360",
    "end": "681120"
  },
  {
    "text": "okay you get this beautiful chance to be",
    "start": "681120",
    "end": "683120"
  },
  {
    "text": "executing and the rest of you are going",
    "start": "683120",
    "end": "685440"
  },
  {
    "text": "to be red items all right and let's say",
    "start": "685440",
    "end": "690440"
  },
  {
    "text": "that you are going to do a",
    "start": "690440",
    "end": "692839"
  },
  {
    "text": "promise and This",
    "start": "692839",
    "end": "694920"
  },
  {
    "text": "Promise actually resolves synchronous",
    "start": "694920",
    "end": "697560"
  },
  {
    "text": "cached work okay so all you do inside of",
    "start": "697560",
    "end": "700920"
  },
  {
    "text": "your little promise is you have like a",
    "start": "700920",
    "end": "702120"
  },
  {
    "text": "little async Funk uh that checks for",
    "start": "702120",
    "end": "705079"
  },
  {
    "text": "some sort of cashed value cashed value",
    "start": "705079",
    "end": "707760"
  },
  {
    "text": "like you know if cashed return right you",
    "start": "707760",
    "end": "711480"
  },
  {
    "text": "get the cash value it returns it back",
    "start": "711480",
    "end": "713279"
  },
  {
    "text": "out pretty simple so what that means is",
    "start": "713279",
    "end": "715800"
  },
  {
    "text": "that when you do this you go check your",
    "start": "715800",
    "end": "718639"
  },
  {
    "text": "cash value",
    "start": "718639",
    "end": "720360"
  },
  {
    "text": "all right you got a cash value return it",
    "start": "720360",
    "end": "722360"
  },
  {
    "text": "well what's going to",
    "start": "722360",
    "end": "723600"
  },
  {
    "text": "happen promises resolve next tick so",
    "start": "723600",
    "end": "728639"
  },
  {
    "text": "this guy's going to be uh let's see",
    "start": "728639",
    "end": "731120"
  },
  {
    "text": "let's go like this let's take this guy",
    "start": "731120",
    "end": "732320"
  },
  {
    "text": "let's take him off the next time you get",
    "start": "732320",
    "end": "734399"
  },
  {
    "text": "to run is now at the back of the queue",
    "start": "734399",
    "end": "737000"
  },
  {
    "text": "so now this person's going to run this",
    "start": "737000",
    "end": "739120"
  },
  {
    "text": "one's going to run this one's going to",
    "start": "739120",
    "end": "741040"
  },
  {
    "text": "run and then now you're going to run",
    "start": "741040",
    "end": "743399"
  },
  {
    "text": "again and you're going to have another",
    "start": "743399",
    "end": "745560"
  },
  {
    "text": "chance that's how the process that's how",
    "start": "745560",
    "end": "748000"
  },
  {
    "text": "the event loops work",
    "start": "748000",
    "end": "749720"
  },
  {
    "text": "and so what ends up happening is really",
    "start": "749720",
    "end": "751440"
  },
  {
    "text": "simple items like this you throw an",
    "start": "751440",
    "end": "754120"
  },
  {
    "text": "async on a function that doesn't need to",
    "start": "754120",
    "end": "756240"
  },
  {
    "text": "be async guess what it actually is it",
    "start": "756240",
    "end": "760040"
  },
  {
    "text": "will run significantly slower because",
    "start": "760040",
    "end": "761760"
  },
  {
    "text": "you could have a bunch of people in uh",
    "start": "761760",
    "end": "764480"
  },
  {
    "text": "in line ahead of you a ton of people",
    "start": "764480",
    "end": "767639"
  },
  {
    "text": "they cannot resolve in they cannot",
    "start": "767639",
    "end": "769279"
  },
  {
    "text": "resolve in the they can't resolve uh in",
    "start": "769279",
    "end": "772399"
  },
  {
    "text": "the in the like immediate",
    "start": "772399",
    "end": "774399"
  },
  {
    "text": "queue if they resolve in the immediate",
    "start": "774399",
    "end": "776639"
  },
  {
    "text": "queue you would you could starve",
    "start": "776639",
    "end": "777839"
  },
  {
    "text": "yourself you could sit there and just",
    "start": "777839",
    "end": "779440"
  },
  {
    "text": "starve yourself over and over and over",
    "start": "779440",
    "end": "781000"
  },
  {
    "text": "and over",
    "start": "781000",
    "end": "781959"
  },
  {
    "text": "again and so a call back right like so",
    "start": "781959",
    "end": "784519"
  },
  {
    "text": "if you use like if you use a call back",
    "start": "784519",
    "end": "787000"
  },
  {
    "text": "to know when say you write out to um oh",
    "start": "787000",
    "end": "790880"
  },
  {
    "text": "transaction stay open too yep it's going",
    "start": "790880",
    "end": "792560"
  },
  {
    "text": "to stay open for a while so if you use",
    "start": "792560",
    "end": "794440"
  },
  {
    "text": "like uh a call back to write a file to",
    "start": "794440",
    "end": "796560"
  },
  {
    "text": "disk or you use a promise what you get",
    "start": "796560",
    "end": "799519"
  },
  {
    "text": "is when the thing is done right when",
    "start": "799519",
    "end": "801560"
  },
  {
    "text": "writing a file is done it calls the call",
    "start": "801560",
    "end": "803959"
  },
  {
    "text": "back that call back is called",
    "start": "803959",
    "end": "805880"
  },
  {
    "text": "synchronously right so it stays you you",
    "start": "805880",
    "end": "808440"
  },
  {
    "text": "maintain owning the process event Loop",
    "start": "808440",
    "end": "811160"
  },
  {
    "text": "for the duration of that call back so",
    "start": "811160",
    "end": "812760"
  },
  {
    "text": "you do your extra work and then you",
    "start": "812760",
    "end": "814600"
  },
  {
    "text": "write more to a file and until that file",
    "start": "814600",
    "end": "816760"
  },
  {
    "text": "comes back you're not going to be called",
    "start": "816760",
    "end": "818800"
  },
  {
    "text": "but once it's done it's called back and",
    "start": "818800",
    "end": "820440"
  },
  {
    "text": "then you now are at the back of the",
    "start": "820440",
    "end": "821600"
  },
  {
    "text": "queue and once you hit it then you can",
    "start": "821600",
    "end": "822760"
  },
  {
    "text": "start using again so this is the big",
    "start": "822760",
    "end": "824320"
  },
  {
    "text": "inefficiencies with this stuff right",
    "start": "824320",
    "end": "826399"
  },
  {
    "text": "because if this takes if each one of",
    "start": "826399",
    "end": "828519"
  },
  {
    "text": "these takes say very little time a half",
    "start": "828519",
    "end": "831040"
  },
  {
    "text": "millisecond whatever right each one of",
    "start": "831040",
    "end": "832880"
  },
  {
    "text": "these takes a half millisecond",
    "start": "832880",
    "end": "835680"
  },
  {
    "text": "but there's also another half",
    "start": "835680",
    "end": "837800"
  },
  {
    "text": "millisecond in between each one of these",
    "start": "837800",
    "end": "840199"
  },
  {
    "text": "to be called to the next one or whatever",
    "start": "840199",
    "end": "841759"
  },
  {
    "text": "it is a quarter millisecond whatever",
    "start": "841759",
    "end": "843560"
  },
  {
    "text": "it's going to be you could add in an",
    "start": "843560",
    "end": "845279"
  },
  {
    "text": "extra you know three four seven",
    "start": "845279",
    "end": "848720"
  },
  {
    "text": "milliseconds of just lag and so every",
    "start": "848720",
    "end": "851079"
  },
  {
    "text": "single process every single time you go",
    "start": "851079",
    "end": "853160"
  },
  {
    "text": "back to the process tick it happens",
    "start": "853160",
    "end": "855440"
  },
  {
    "text": "again it happens again it happens again",
    "start": "855440",
    "end": "857639"
  },
  {
    "text": "it happens again and so this is why you",
    "start": "857639",
    "end": "859519"
  },
  {
    "text": "can all of a sudden get these huge",
    "start": "859519",
    "end": "861199"
  },
  {
    "text": "amounts of latencies is because you just",
    "start": "861199",
    "end": "863440"
  },
  {
    "text": "happen to keep going to the back of this",
    "start": "863440",
    "end": "864959"
  },
  {
    "text": "queue over and over and over and over",
    "start": "864959",
    "end": "868040"
  },
  {
    "text": "again",
    "start": "868040",
    "end": "870720"
  },
  {
    "text": "so you know understand some",
    "start": "870720",
    "end": "873560"
  },
  {
    "text": "things understand why these things can",
    "start": "873560",
    "end": "875480"
  },
  {
    "text": "happen because it is really important uh",
    "start": "875480",
    "end": "878000"
  },
  {
    "text": "it can really add a bunch of stuff hey",
    "start": "878000",
    "end": "879480"
  },
  {
    "text": "in different ghost how you doing all",
    "start": "879480",
    "end": "881440"
  },
  {
    "text": "right let's diagnose the problem it's",
    "start": "881440",
    "end": "883320"
  },
  {
    "text": "useful to diagnose this problem in",
    "start": "883320",
    "end": "884720"
  },
  {
    "text": "certain operations first we should",
    "start": "884720",
    "end": "886040"
  },
  {
    "text": "confirm that our application is actually",
    "start": "886040",
    "end": "887399"
  },
  {
    "text": "blocked on the event Loop no JS exposes",
    "start": "887399",
    "end": "889360"
  },
  {
    "text": "a handful of perf hooks to measure event",
    "start": "889360",
    "end": "891320"
  },
  {
    "text": "you Loop utilization oh I didn't know",
    "start": "891320",
    "end": "893199"
  },
  {
    "text": "how much of this is true I haven't",
    "start": "893199",
    "end": "895360"
  },
  {
    "text": "played with any I haven't played with",
    "start": "895360",
    "end": "896600"
  },
  {
    "text": "their uh I didn't realize that no JS",
    "start": "896600",
    "end": "898800"
  },
  {
    "text": "offer for some hooks for that that'd be",
    "start": "898800",
    "end": "900040"
  },
  {
    "text": "kind of fun to play with I'm going to",
    "start": "900040",
    "end": "902040"
  },
  {
    "text": "have to play with that uh next we should",
    "start": "902040",
    "end": "904199"
  },
  {
    "text": "confirm that our event Loop isn't",
    "start": "904199",
    "end": "905519"
  },
  {
    "text": "blocked by code we control in my case I",
    "start": "905519",
    "end": "907920"
  },
  {
    "text": "confirmed this by inspecting CPU",
    "start": "907920",
    "end": "909519"
  },
  {
    "text": "profiles if the event Loop is occupied",
    "start": "909519",
    "end": "911759"
  },
  {
    "text": "for more than 50 milliseconds with no",
    "start": "911759",
    "end": "913399"
  },
  {
    "text": "obvious culprit in sight the culprit is",
    "start": "913399",
    "end": "915440"
  },
  {
    "text": "likely in the runtime okay fair uh next",
    "start": "915440",
    "end": "919920"
  },
  {
    "text": "next we can confirm how uh promise heavy",
    "start": "919920",
    "end": "922279"
  },
  {
    "text": "our code is through the following code",
    "start": "922279",
    "end": "924560"
  },
  {
    "text": "snippet each graph qu qual operation",
    "start": "924560",
    "end": "927360"
  },
  {
    "text": "should increase the number of promises",
    "start": "927360",
    "end": "928720"
  },
  {
    "text": "created and give us a clue how promise",
    "start": "928720",
    "end": "930959"
  },
  {
    "text": "heavy is our",
    "start": "930959",
    "end": "932720"
  },
  {
    "text": "code all right so we're going to do a",
    "start": "932720",
    "end": "934560"
  },
  {
    "text": "little async hooks hooks create hook AIT",
    "start": "934560",
    "end": "937880"
  },
  {
    "text": "something type promise count plus hook",
    "start": "937880",
    "end": "942560"
  },
  {
    "text": "enabled oh interesting I didn't realize",
    "start": "943319",
    "end": "946279"
  },
  {
    "text": "you could do async hooks like that",
    "start": "946279",
    "end": "947600"
  },
  {
    "text": "that's kind of interesting uh another",
    "start": "947600",
    "end": "949199"
  },
  {
    "text": "practical approach to determine whether",
    "start": "949199",
    "end": "950519"
  },
  {
    "text": "the event Loop is a blocker is",
    "start": "950519",
    "end": "952000"
  },
  {
    "text": "determining the difference between",
    "start": "952000",
    "end": "953160"
  },
  {
    "text": "client reported database query latency",
    "start": "953160",
    "end": "955199"
  },
  {
    "text": "and database reported query latency for",
    "start": "955199",
    "end": "957360"
  },
  {
    "text": "example I mean this is actually a very",
    "start": "957360",
    "end": "959000"
  },
  {
    "text": "true Source right if you can query a",
    "start": "959000",
    "end": "962000"
  },
  {
    "text": "database and you get certain laty uh",
    "start": "962000",
    "end": "964319"
  },
  {
    "text": "latency then you query your application",
    "start": "964319",
    "end": "966959"
  },
  {
    "text": "and you get very different",
    "start": "966959",
    "end": "969000"
  },
  {
    "text": "latency you got some things you can at",
    "start": "969000",
    "end": "971120"
  },
  {
    "text": "least make some judgment about obviously",
    "start": "971120",
    "end": "973079"
  },
  {
    "text": "the hard part is where are you located",
    "start": "973079",
    "end": "974480"
  },
  {
    "text": "where's the database located where is",
    "start": "974480",
    "end": "975800"
  },
  {
    "text": "the database located in comparison to",
    "start": "975800",
    "end": "977319"
  },
  {
    "text": "your application versus where you're",
    "start": "977319",
    "end": "978920"
  },
  {
    "text": "located at you have to take a lot of",
    "start": "978920",
    "end": "980440"
  },
  {
    "text": "those things in uh for example I notice",
    "start": "980440",
    "end": "983240"
  },
  {
    "text": "that the client side reporting of",
    "start": "983240",
    "end": "984480"
  },
  {
    "text": "certain database queries is often",
    "start": "984480",
    "end": "986319"
  },
  {
    "text": "greater than or less than 100",
    "start": "986319",
    "end": "988040"
  },
  {
    "text": "millisecond no greater than 100",
    "start": "988040",
    "end": "989319"
  },
  {
    "text": "millisecond sorry um even though we were",
    "start": "989319",
    "end": "991920"
  },
  {
    "text": "making an index query with a table with",
    "start": "991920",
    "end": "993839"
  },
  {
    "text": "less than a th rows as expected we",
    "start": "993839",
    "end": "995639"
  },
  {
    "text": "couldn't replicate such a slow",
    "start": "995639",
    "end": "997040"
  },
  {
    "text": "performance when manually quering our",
    "start": "997040",
    "end": "998440"
  },
  {
    "text": "database this slowdown was because the",
    "start": "998440",
    "end": "1000240"
  },
  {
    "text": "event Loop was overwhelmed after making",
    "start": "1000240",
    "end": "1002000"
  },
  {
    "text": "database requests so even though the",
    "start": "1002000",
    "end": "1004120"
  },
  {
    "text": "database responded to certain requests",
    "start": "1004120",
    "end": "1006040"
  },
  {
    "text": "very quickly the web application did not",
    "start": "1006040",
    "end": "1007920"
  },
  {
    "text": "get around to processing the responses",
    "start": "1007920",
    "end": "1009639"
  },
  {
    "text": "until after a significant delay if",
    "start": "1009639",
    "end": "1011759"
  },
  {
    "text": "you've forgotten why there's a",
    "start": "1011759",
    "end": "1012880"
  },
  {
    "text": "significant delay remember the graph",
    "start": "1012880",
    "end": "1014880"
  },
  {
    "text": "that I showed",
    "start": "1014880",
    "end": "1016000"
  },
  {
    "text": "you and remember every single time and a",
    "start": "1016000",
    "end": "1019160"
  },
  {
    "text": "weight happens it does it once every",
    "start": "1019160",
    "end": "1021600"
  },
  {
    "text": "single time a DOT then happens it does",
    "start": "1021600",
    "end": "1023680"
  },
  {
    "text": "it once so if you dot then dot then dot",
    "start": "1023680",
    "end": "1026240"
  },
  {
    "text": "then you will have three going back to",
    "start": "1026240",
    "end": "1029520"
  },
  {
    "text": "backof thee line",
    "start": "1029520",
    "end": "1031079"
  },
  {
    "text": "operations since async a weight only",
    "start": "1031079",
    "end": "1033240"
  },
  {
    "text": "affects request throughput in certain",
    "start": "1033240",
    "end": "1035160"
  },
  {
    "text": "promise heavy conditions or most open",
    "start": "1035160",
    "end": "1037720"
  },
  {
    "text": "source code is not heavily optimized to",
    "start": "1037720",
    "end": "1039240"
  },
  {
    "text": "prevent unnecessary promises this",
    "start": "1039240",
    "end": "1041079"
  },
  {
    "text": "example graph queal Shield is one of the",
    "start": "1041079",
    "end": "1043240"
  },
  {
    "text": "most popular graph quel off libraries",
    "start": "1043240",
    "end": "1045558"
  },
  {
    "text": "assumed every field resolve resolvers",
    "start": "1045559",
    "end": "1047720"
  },
  {
    "text": "async therefore it constructs a promise",
    "start": "1047720",
    "end": "1049559"
  },
  {
    "text": "for every field in the graph quel",
    "start": "1049559",
    "end": "1051640"
  },
  {
    "text": "response which further amplifies the",
    "start": "1051640",
    "end": "1053440"
  },
  {
    "text": "number of promises created in this life",
    "start": "1053440",
    "end": "1055000"
  },
  {
    "text": "cycle of a request that's",
    "start": "1055000",
    "end": "1057760"
  },
  {
    "text": "crazy it's",
    "start": "1057760",
    "end": "1060200"
  },
  {
    "text": "crazy typescript and JavaScript do not",
    "start": "1060200",
    "end": "1062400"
  },
  {
    "text": "prevent developers from unnecessary",
    "start": "1062400",
    "end": "1063799"
  },
  {
    "text": "marking functions uh as async yes this",
    "start": "1063799",
    "end": "1066559"
  },
  {
    "text": "is true so we need that we need es uh es",
    "start": "1066559",
    "end": "1069600"
  },
  {
    "text": "lint rules like require AWA to avoid",
    "start": "1069600",
    "end": "1071919"
  },
  {
    "text": "unnecessary async await calls dude I",
    "start": "1071919",
    "end": "1073919"
  },
  {
    "text": "literally found a performance problem in",
    "start": "1073919",
    "end": "1076000"
  },
  {
    "text": "some code and I kid you not it was",
    "start": "1076000",
    "end": "1078200"
  },
  {
    "text": "because a function was marked as a sync",
    "start": "1078200",
    "end": "1080840"
  },
  {
    "text": "that was not a sink it increases garbage",
    "start": "1080840",
    "end": "1084919"
  },
  {
    "text": "collection it increases time it takes",
    "start": "1084919",
    "end": "1088480"
  },
  {
    "text": "right it's a it's it's actually a real",
    "start": "1088480",
    "end": "1092720"
  },
  {
    "text": "problem it's wild yeah exactly promise",
    "start": "1092720",
    "end": "1095600"
  },
  {
    "text": "explosion equals memory explosion which",
    "start": "1095600",
    "end": "1097640"
  },
  {
    "text": "equals more GC interrupts dude it's wild",
    "start": "1097640",
    "end": "1100200"
  },
  {
    "text": "an accidental unneeded acing function",
    "start": "1100200",
    "end": "1103039"
  },
  {
    "text": "can add milliseconds to uh to response",
    "start": "1103039",
    "end": "1106039"
  },
  {
    "text": "times which means think about how many",
    "start": "1106039",
    "end": "1108919"
  },
  {
    "text": "in functions you could go over right all",
    "start": "1108919",
    "end": "1111559"
  },
  {
    "text": "right APM and Promises actions per",
    "start": "1111559",
    "end": "1113440"
  },
  {
    "text": "minute uh everyone's favorite thing us",
    "start": "1113440",
    "end": "1117159"
  },
  {
    "text": "star",
    "start": "1117159",
    "end": "1118559"
  },
  {
    "text": "Crafters uh finally we can in Let's see",
    "start": "1118559",
    "end": "1121000"
  },
  {
    "text": "we can incredibly slow down promise",
    "start": "1121000",
    "end": "1122919"
  },
  {
    "text": "execution if we use async hooks a",
    "start": "1122919",
    "end": "1124919"
  },
  {
    "text": "deprecated but widely used no tojs",
    "start": "1124919",
    "end": "1126840"
  },
  {
    "text": "feature async hooks help us track",
    "start": "1126840",
    "end": "1128600"
  },
  {
    "text": "asynchronous resources for example a",
    "start": "1128600",
    "end": "1130200"
  },
  {
    "text": "tracing Library uh might desire to track",
    "start": "1130200",
    "end": "1132840"
  },
  {
    "text": "a request across callbacks and Promises",
    "start": "1132840",
    "end": "1134679"
  },
  {
    "text": "unfortunately any code we import May",
    "start": "1134679",
    "end": "1136720"
  },
  {
    "text": "rely on this feature and can Auto enable",
    "start": "1136720",
    "end": "1138440"
  },
  {
    "text": "it uh DD Trace data dog's APM library",
    "start": "1138440",
    "end": "1141240"
  },
  {
    "text": "and likely many others uses this feature",
    "start": "1141240",
    "end": "1142919"
  },
  {
    "text": "to provide traces across promise",
    "start": "1142919",
    "end": "1144440"
  },
  {
    "text": "executions",
    "start": "1144440",
    "end": "1146240"
  },
  {
    "text": "o",
    "start": "1146240",
    "end": "1148640"
  },
  {
    "text": "o",
    "start": "1148640",
    "end": "1150720"
  },
  {
    "text": "o when your tracking Library slows down",
    "start": "1150720",
    "end": "1153400"
  },
  {
    "text": "your entire universe that's not",
    "start": "1153400",
    "end": "1157120"
  },
  {
    "text": "good this makes me want to join Marvin",
    "start": "1157120",
    "end": "1160200"
  },
  {
    "text": "uh ha mist and start optimizing open",
    "start": "1160200",
    "end": "1162280"
  },
  {
    "text": "source libraries it would be a it's a",
    "start": "1162280",
    "end": "1163880"
  },
  {
    "text": "it's a pretty big win the thing is is",
    "start": "1163880",
    "end": "1165559"
  },
  {
    "text": "that often a program's not slowed down",
    "start": "1165559",
    "end": "1168039"
  },
  {
    "text": "by a single single issue right oh that",
    "start": "1168039",
    "end": "1171039"
  },
  {
    "text": "by the way that's my favorite tweet",
    "start": "1171039",
    "end": "1172600"
  },
  {
    "text": "which is J I'm going to I'm going to",
    "start": "1172600",
    "end": "1173960"
  },
  {
    "text": "tweet that I'm I'm going to Tweet this",
    "start": "1173960",
    "end": "1176760"
  },
  {
    "text": "this is it triggers everybody which is",
    "start": "1176760",
    "end": "1178400"
  },
  {
    "text": "my favorite thing it's like my favorite",
    "start": "1178400",
    "end": "1180600"
  },
  {
    "text": "kind of tweet is the one that nobody",
    "start": "1180600",
    "end": "1182720"
  },
  {
    "text": "wins let's do this nobody wins here",
    "start": "1182720",
    "end": "1186080"
  },
  {
    "text": "nobody wins boom post it oh my goodness",
    "start": "1186080",
    "end": "1189039"
  },
  {
    "text": "it's Annie if you don't know Annie you",
    "start": "1189039",
    "end": "1190480"
  },
  {
    "text": "don't know about Twitter okay you",
    "start": "1190480",
    "end": "1192880"
  },
  {
    "text": "don't know about",
    "start": "1192880",
    "end": "1194480"
  },
  {
    "text": "Twitter I've tweeted this a few times",
    "start": "1194480",
    "end": "1196799"
  },
  {
    "text": "some version of this oh man it's the",
    "start": "1196799",
    "end": "1199200"
  },
  {
    "text": "it's the greatest oh it's the greatest",
    "start": "1199200",
    "end": "1201360"
  },
  {
    "text": "people lose it people lose it all right",
    "start": "1201360",
    "end": "1205120"
  },
  {
    "text": "anyways fantastic uh async with hooks",
    "start": "1205120",
    "end": "1207640"
  },
  {
    "text": "yep none of this is surprising uh",
    "start": "1207640",
    "end": "1210159"
  },
  {
    "text": "obviously adding tracing to anything you",
    "start": "1210159",
    "end": "1211720"
  },
  {
    "text": "do asynchronously of course by its very",
    "start": "1211720",
    "end": "1213799"
  },
  {
    "text": "nature is going to cause a huge slowdown",
    "start": "1213799",
    "end": "1216039"
  },
  {
    "text": "what is this Twitter it's the place you",
    "start": "1216039",
    "end": "1217559"
  },
  {
    "text": "go to so when you go to x.com you",
    "start": "1217559",
    "end": "1219520"
  },
  {
    "text": "actually get redirected to a place",
    "start": "1219520",
    "end": "1220919"
  },
  {
    "text": "called twitter.com so we all use Twitter",
    "start": "1220919",
    "end": "1223960"
  },
  {
    "text": "I don't know what this x thing okay I",
    "start": "1223960",
    "end": "1226080"
  },
  {
    "text": "don't know what this whole X thing you",
    "start": "1226080",
    "end": "1227960"
  },
  {
    "text": "keep talking about",
    "start": "1227960",
    "end": "1229480"
  },
  {
    "text": "okay I I don't know what it is you guys",
    "start": "1229480",
    "end": "1231000"
  },
  {
    "text": "keep telling me about X and that I keep",
    "start": "1231000",
    "end": "1233000"
  },
  {
    "text": "using it wrong yet I keep going to",
    "start": "1233000",
    "end": "1235039"
  },
  {
    "text": "twitter.com I don't understand why you",
    "start": "1235039",
    "end": "1237080"
  },
  {
    "text": "guys keep telling me this okay I know X",
    "start": "1237080",
    "end": "1238720"
  },
  {
    "text": "is going to give it to you just hasn't",
    "start": "1238720",
    "end": "1240960"
  },
  {
    "text": "given it to me yet okay I haven't got it",
    "start": "1240960",
    "end": "1244559"
  },
  {
    "text": "yet I'm waiting for",
    "start": "1244559",
    "end": "1247760"
  },
  {
    "text": "it all right anyways okay we see that it",
    "start": "1247760",
    "end": "1250360"
  },
  {
    "text": "just gets worse obviously we see that",
    "start": "1250360",
    "end": "1252440"
  },
  {
    "text": "Asing hooks at significant amounts of",
    "start": "1252440",
    "end": "1254320"
  },
  {
    "text": "latency I mean it's no different than",
    "start": "1254320",
    "end": "1255919"
  },
  {
    "text": "like say four each for an array four",
    "start": "1255919",
    "end": "1257799"
  },
  {
    "text": "each obviously adds latency or adds",
    "start": "1257799",
    "end": "1260360"
  },
  {
    "text": "processing in compar in comparison to a",
    "start": "1260360",
    "end": "1263080"
  },
  {
    "text": "for Loop totally reasonable right uh",
    "start": "1263080",
    "end": "1265880"
  },
  {
    "text": "does this article uh discuss resource",
    "start": "1265880",
    "end": "1267720"
  },
  {
    "text": "pooling uh no they don't do any of that",
    "start": "1267720",
    "end": "1269840"
  },
  {
    "text": "because it's not about that it's just",
    "start": "1269840",
    "end": "1272240"
  },
  {
    "text": "about promises which I think is really",
    "start": "1272240",
    "end": "1273600"
  },
  {
    "text": "great this is a great topic by the way",
    "start": "1273600",
    "end": "1275520"
  },
  {
    "text": "data loaded no asyn hooks data loaded",
    "start": "1275520",
    "end": "1277240"
  },
  {
    "text": "with async",
    "start": "1277240",
    "end": "1278440"
  },
  {
    "text": "hooks async hooks overhead log scale",
    "start": "1278440",
    "end": "1282320"
  },
  {
    "text": "yeah I mean it makes sense",
    "start": "1282320",
    "end": "1285200"
  },
  {
    "text": "that we roughly see that async hooks",
    "start": "1285880",
    "end": "1288320"
  },
  {
    "text": "rough adds 3 to 3 and a2x overhead to",
    "start": "1288320",
    "end": "1292759"
  },
  {
    "text": "resolvers data dog Engineers are",
    "start": "1293559",
    "end": "1296039"
  },
  {
    "text": "diligently working to reduce this",
    "start": "1296039",
    "end": "1297320"
  },
  {
    "text": "overhead by contributing to no. JS and",
    "start": "1297320",
    "end": "1298880"
  },
  {
    "text": "V8 features however improvements in this",
    "start": "1298880",
    "end": "1300600"
  },
  {
    "text": "area are critical to get uh right and",
    "start": "1300600",
    "end": "1304799"
  },
  {
    "text": "take time to be implemented uh in",
    "start": "1304799",
    "end": "1307400"
  },
  {
    "text": "general we want to reduce the overhead",
    "start": "1307400",
    "end": "1309200"
  },
  {
    "text": "of promises and reduce the number of",
    "start": "1309200",
    "end": "1310760"
  },
  {
    "text": "promises we uh we invoke reducing",
    "start": "1310760",
    "end": "1313080"
  },
  {
    "text": "promises overhead to reduce promise",
    "start": "1313080",
    "end": "1314600"
  },
  {
    "text": "overhead we want to minimize promise",
    "start": "1314600",
    "end": "1315960"
  },
  {
    "text": "inspection of features yep reducing the",
    "start": "1315960",
    "end": "1317679"
  },
  {
    "text": "number of promises to redu the number of",
    "start": "1317679",
    "end": "1319039"
  },
  {
    "text": "provices and folk we have a few areas to",
    "start": "1319039",
    "end": "1320440"
  },
  {
    "text": "consider we could remove the use of",
    "start": "1320440",
    "end": "1321760"
  },
  {
    "text": "graph quel middle layer let's go let's",
    "start": "1321760",
    "end": "1324080"
  },
  {
    "text": "go uh especially the ones that assume",
    "start": "1324080",
    "end": "1325960"
  },
  {
    "text": "every field is async we could also",
    "start": "1325960",
    "end": "1327919"
  },
  {
    "text": "rewrite graph quel queries to use fewer",
    "start": "1327919",
    "end": "1329840"
  },
  {
    "text": "async type resolvers just rewrite it",
    "start": "1329840",
    "end": "1331960"
  },
  {
    "text": "just rewrite it bro Fork",
    "start": "1331960",
    "end": "1335360"
  },
  {
    "text": "it just Fork it um a single resolver",
    "start": "1335360",
    "end": "1339400"
  },
  {
    "text": "that manually queries the database and",
    "start": "1339400",
    "end": "1341240"
  },
  {
    "text": "returns all the data needed for",
    "start": "1341240",
    "end": "1342679"
  },
  {
    "text": "performance sensitive",
    "start": "1342679",
    "end": "1344600"
  },
  {
    "text": "queries uh rather than relying on graph",
    "start": "1344600",
    "end": "1347159"
  },
  {
    "text": "Quil to hydrate nested fields type",
    "start": "1347159",
    "end": "1349039"
  },
  {
    "text": "resolvers uh by the way just",
    "start": "1349039",
    "end": "1352360"
  },
  {
    "text": "rewriting things is difficult it is",
    "start": "1352360",
    "end": "1357039"
  },
  {
    "text": "difficult it is very hard to be able to",
    "start": "1357039",
    "end": "1359640"
  },
  {
    "text": "see the the problem about easy is that",
    "start": "1359640",
    "end": "1362159"
  },
  {
    "text": "easy is hard do you know what I",
    "start": "1362159",
    "end": "1364919"
  },
  {
    "text": "mean easy is",
    "start": "1364919",
    "end": "1368520"
  },
  {
    "text": "hard easy is truly hard and so this is",
    "start": "1368520",
    "end": "1372080"
  },
  {
    "text": "like graph queel gives you the promise",
    "start": "1372080",
    "end": "1374760"
  },
  {
    "text": "of",
    "start": "1374760",
    "end": "1375640"
  },
  {
    "text": "easy I know I see the pinned message",
    "start": "1375640",
    "end": "1378120"
  },
  {
    "text": "fine Omega La Omega La Twitter the",
    "start": "1378120",
    "end": "1382039"
  },
  {
    "text": "Facebook same",
    "start": "1382039",
    "end": "1383840"
  },
  {
    "text": "energy if it's the same energy why does",
    "start": "1383840",
    "end": "1386120"
  },
  {
    "text": "x.com take me to twitter.com",
    "start": "1386120",
    "end": "1389840"
  },
  {
    "text": "okay what am I supposed to call",
    "start": "1389840",
    "end": "1393640"
  },
  {
    "text": "it I can't read did you put a spelling",
    "start": "1394559",
    "end": "1397279"
  },
  {
    "text": "joke in there you know I can't read you",
    "start": "1397279",
    "end": "1399120"
  },
  {
    "text": "know I literally can't read",
    "start": "1399120",
    "end": "1401600"
  },
  {
    "text": "okay you know I literally cannot read um",
    "start": "1401600",
    "end": "1404919"
  },
  {
    "text": "all",
    "start": "1404919",
    "end": "1406039"
  },
  {
    "text": "right what kind of joke is that oh I'm",
    "start": "1406039",
    "end": "1408559"
  },
  {
    "text": "in fun of prime for not being able to",
    "start": "1408559",
    "end": "1409919"
  },
  {
    "text": "read what a loser can't even read what a",
    "start": "1409919",
    "end": "1413840"
  },
  {
    "text": "loser thanks I guess dyslexia is a cool",
    "start": "1413840",
    "end": "1416720"
  },
  {
    "text": "thing you can make fun of now you know",
    "start": "1416720",
    "end": "1418120"
  },
  {
    "text": "out of all gosh I should be able to say",
    "start": "1418120",
    "end": "1420600"
  },
  {
    "text": "okay DJ I'm gonna quit saying I have",
    "start": "1420600",
    "end": "1422159"
  },
  {
    "text": "dyslexia and that I'm neurode Divergent",
    "start": "1422159",
    "end": "1424960"
  },
  {
    "text": "and then guess what when you make fun of",
    "start": "1424960",
    "end": "1427120"
  },
  {
    "text": "me you're making fun of neurod",
    "start": "1427120",
    "end": "1428559"
  },
  {
    "text": "Divergence and that is pretty offensive",
    "start": "1428559",
    "end": "1430640"
  },
  {
    "text": "TJ I mean that's I I would say we're",
    "start": "1430640",
    "end": "1433760"
  },
  {
    "text": "probably in cancel territory",
    "start": "1433760",
    "end": "1437120"
  },
  {
    "text": "disgusting abs absolutely disgusting",
    "start": "1437120",
    "end": "1440720"
  },
  {
    "text": "shook hash not a safe space American",
    "start": "1440720",
    "end": "1443880"
  },
  {
    "text": "Education Kona I can't read Kona can't",
    "start": "1443880",
    "end": "1446559"
  },
  {
    "text": "even blame him",
    "start": "1446559",
    "end": "1448400"
  },
  {
    "text": "K kak say I'm making fun of the US it's",
    "start": "1448400",
    "end": "1451080"
  },
  {
    "text": "okay okay you're lucky you did get by by",
    "start": "1451080",
    "end": "1453039"
  },
  {
    "text": "making fun of the us so we could write a",
    "start": "1453039",
    "end": "1455039"
  },
  {
    "text": "one-hot resolver that implements the",
    "start": "1455039",
    "end": "1456600"
  },
  {
    "text": "entire query okay uh wait find user by",
    "start": "1456600",
    "end": "1459279"
  },
  {
    "text": "ID dude I'm just so triggered by this I",
    "start": "1459279",
    "end": "1461960"
  },
  {
    "text": "am literally so triggered by this chatty",
    "start": "1461960",
    "end": "1464159"
  },
  {
    "text": "protocol find item details I am so",
    "start": "1464159",
    "end": "1466799"
  },
  {
    "text": "effing triggered why do you go to do",
    "start": "1466799",
    "end": "1468799"
  },
  {
    "text": "this return all the items Items Map cons",
    "start": "1468799",
    "end": "1472000"
  },
  {
    "text": "details",
    "start": "1472000",
    "end": "1473559"
  },
  {
    "text": "find you create so okay so I'm gonna I'm",
    "start": "1473559",
    "end": "1476720"
  },
  {
    "text": "going to say something completely",
    "start": "1476720",
    "end": "1477760"
  },
  {
    "text": "different I want you just to look at",
    "start": "1477760",
    "end": "1479240"
  },
  {
    "text": "this for a second okay I want you to",
    "start": "1479240",
    "end": "1480960"
  },
  {
    "text": "look at this and you want to ask",
    "start": "1480960",
    "end": "1481960"
  },
  {
    "text": "yourself why why why does my endpoint",
    "start": "1481960",
    "end": "1486679"
  },
  {
    "text": "have so many large latency spikes why am",
    "start": "1486679",
    "end": "1489159"
  },
  {
    "text": "I garbage collecting all the time let me",
    "start": "1489159",
    "end": "1490919"
  },
  {
    "text": "just like regardless of the fact that",
    "start": "1490919",
    "end": "1492679"
  },
  {
    "text": "you're doing two queries like this let's",
    "start": "1492679",
    "end": "1494440"
  },
  {
    "text": "just talk about something different",
    "start": "1494440",
    "end": "1496120"
  },
  {
    "text": "first off in a wait obviously causing a",
    "start": "1496120",
    "end": "1498399"
  },
  {
    "text": "promise which causes multiple callbacks",
    "start": "1498399",
    "end": "1500200"
  },
  {
    "text": "which cause a whole chain thing to be",
    "start": "1500200",
    "end": "1501559"
  },
  {
    "text": "set up blah blah blah blah inefficient",
    "start": "1501559",
    "end": "1504360"
  },
  {
    "text": "causes memory do it again causes memory",
    "start": "1504360",
    "end": "1507880"
  },
  {
    "text": "you also create an object right here not",
    "start": "1507880",
    "end": "1509919"
  },
  {
    "text": "only do you create an object you also",
    "start": "1509919",
    "end": "1511919"
  },
  {
    "text": "have an array you copy the",
    "start": "1511919",
    "end": "1514799"
  },
  {
    "text": "array boom okay so you create an object",
    "start": "1514799",
    "end": "1517919"
  },
  {
    "text": "and an array and you create a closure",
    "start": "1517919",
    "end": "1521039"
  },
  {
    "text": "and you create a Lambda function okay",
    "start": "1521039",
    "end": "1522919"
  },
  {
    "text": "you create four pieces of things that",
    "start": "1522919",
    "end": "1524440"
  },
  {
    "text": "have to be cleaned up after that you",
    "start": "1524440",
    "end": "1526799"
  },
  {
    "text": "return an object okay you return an",
    "start": "1526799",
    "end": "1529159"
  },
  {
    "text": "object inside this object you do yet",
    "start": "1529159",
    "end": "1531520"
  },
  {
    "text": "another map over items",
    "start": "1531520",
    "end": "1534279"
  },
  {
    "text": "okay so now you're at seven objects in",
    "start": "1534279",
    "end": "1537520"
  },
  {
    "text": "here we're going to do a find a find",
    "start": "1537520",
    "end": "1539640"
  },
  {
    "text": "creates two more yay then you're going",
    "start": "1539640",
    "end": "1542279"
  },
  {
    "text": "to return an object that has an inner",
    "start": "1542279",
    "end": "1544640"
  },
  {
    "text": "object that creates the the details by",
    "start": "1544640",
    "end": "1547640"
  },
  {
    "text": "ID and then which literally is details",
    "start": "1547640",
    "end": "1550320"
  },
  {
    "text": "by ID I want you to look at this it's",
    "start": "1550320",
    "end": "1551720"
  },
  {
    "text": "details by ID and then creates another",
    "start": "1551720",
    "end": "1554200"
  },
  {
    "text": "copy of the",
    "start": "1554200",
    "end": "1555559"
  },
  {
    "text": "details you you copy the details",
    "start": "1555559",
    "end": "1559240"
  },
  {
    "text": "it's like 12 15 pieces of memory so",
    "start": "1559240",
    "end": "1561399"
  },
  {
    "text": "every single time that's called",
    "start": "1561399",
    "end": "1563120"
  },
  {
    "text": "something has to go and like collect all",
    "start": "1563120",
    "end": "1566399"
  },
  {
    "text": "this right there's so much going on here",
    "start": "1566399",
    "end": "1569679"
  },
  {
    "text": "this is",
    "start": "1569679",
    "end": "1571120"
  },
  {
    "text": "massively this is ma you know it's just",
    "start": "1571120",
    "end": "1573480"
  },
  {
    "text": "like a lot this a lot of memory this is",
    "start": "1573480",
    "end": "1575799"
  },
  {
    "text": "why I get triggered so easy by",
    "start": "1575799",
    "end": "1577080"
  },
  {
    "text": "JavaScript because it's so easy to",
    "start": "1577080",
    "end": "1578919"
  },
  {
    "text": "create",
    "start": "1578919",
    "end": "1580480"
  },
  {
    "text": "memory it's so easy like it's so easy",
    "start": "1580480",
    "end": "1584760"
  },
  {
    "text": "you could just do it you could just just",
    "start": "1584760",
    "end": "1586720"
  },
  {
    "text": "create it all day on accident and then",
    "start": "1586720",
    "end": "1588480"
  },
  {
    "text": "garbage collection is wild it's like 15%",
    "start": "1588480",
    "end": "1590520"
  },
  {
    "text": "of your application if you're on a",
    "start": "1590520",
    "end": "1592279"
  },
  {
    "text": "single core machine it could be well",
    "start": "1592279",
    "end": "1593840"
  },
  {
    "text": "over",
    "start": "1593840",
    "end": "1595679"
  },
  {
    "text": "15% instead of multiple batches of",
    "start": "1595679",
    "end": "1598080"
  },
  {
    "text": "promises we fetch the user items and",
    "start": "1598080",
    "end": "1599760"
  },
  {
    "text": "details in one shot that brings up the",
    "start": "1599760",
    "end": "1601559"
  },
  {
    "text": "meta question why use graph Quil in the",
    "start": "1601559",
    "end": "1603559"
  },
  {
    "text": "first place but that's for a larger",
    "start": "1603559",
    "end": "1605120"
  },
  {
    "text": "conversation for a separate time okay",
    "start": "1605120",
    "end": "1608840"
  },
  {
    "text": "anyways uh I do agree with the whole",
    "start": "1608840",
    "end": "1611640"
  },
  {
    "text": "graphql do you really need graphql what",
    "start": "1611640",
    "end": "1613559"
  },
  {
    "text": "are you buying out of graphql I",
    "start": "1613559",
    "end": "1615159"
  },
  {
    "text": "understand the the benefits of graphql I",
    "start": "1615159",
    "end": "1616919"
  },
  {
    "text": "did literally write falor I still think",
    "start": "1616919",
    "end": "1618840"
  },
  {
    "text": "parts of falar are a good idea to this",
    "start": "1618840",
    "end": "1620720"
  },
  {
    "text": "day but I also see the downsides of this",
    "start": "1620720",
    "end": "1622880"
  },
  {
    "text": "the easiness to create chatty queries",
    "start": "1622880",
    "end": "1624919"
  },
  {
    "text": "the fact that we're looking at two",
    "start": "1624919",
    "end": "1626200"
  },
  {
    "text": "select things that clearly should be one",
    "start": "1626200",
    "end": "1628279"
  },
  {
    "text": "right like you see all these things that",
    "start": "1628279",
    "end": "1629919"
  },
  {
    "text": "end up happening when you break up your",
    "start": "1629919",
    "end": "1631480"
  },
  {
    "text": "API into these really fundamental small",
    "start": "1631480",
    "end": "1633559"
  },
  {
    "text": "little pieces you can always",
    "start": "1633559",
    "end": "1635520"
  },
  {
    "text": "accidentally create hyper chatty",
    "start": "1635520",
    "end": "1637000"
  },
  {
    "text": "protocols and this is a great example of",
    "start": "1637000",
    "end": "1638880"
  },
  {
    "text": "those hyper chatty protocols and so it's",
    "start": "1638880",
    "end": "1642080"
  },
  {
    "text": "emotional it's emotional right you know",
    "start": "1642080",
    "end": "1646919"
  },
  {
    "text": "but I love the point of this AR which is",
    "start": "1646919",
    "end": "1648919"
  },
  {
    "text": "promises are they cause so much more",
    "start": "1648919",
    "end": "1651919"
  },
  {
    "text": "overhead I really wish this article",
    "start": "1651919",
    "end": "1653679"
  },
  {
    "text": "would have went over this CU I I mean I",
    "start": "1653679",
    "end": "1655799"
  },
  {
    "text": "didn't do a really great job I didn't do",
    "start": "1655799",
    "end": "1657440"
  },
  {
    "text": "a lot of Justice here on this but this",
    "start": "1657440",
    "end": "1660039"
  },
  {
    "text": "is really good to think about is that",
    "start": "1660039",
    "end": "1662120"
  },
  {
    "text": "whenever you do something and any time",
    "start": "1662120",
    "end": "1664360"
  },
  {
    "text": "you resolve you go to the back of the",
    "start": "1664360",
    "end": "1666600"
  },
  {
    "text": "line so if you have 15 requests per",
    "start": "1666600",
    "end": "1670519"
  },
  {
    "text": "second then you are literally",
    "start": "1670519",
    "end": "1672600"
  },
  {
    "text": "potentially sitting behind 15 requests",
    "start": "1672600",
    "end": "1674880"
  },
  {
    "text": "every single",
    "start": "1674880",
    "end": "1676279"
  },
  {
    "text": "time you do a promise",
    "start": "1676279",
    "end": "1680120"
  },
  {
    "text": "right it could be really hard it could",
    "start": "1680360",
    "end": "1682840"
  },
  {
    "text": "it could be a lot depending on how many",
    "start": "1682840",
    "end": "1684440"
  },
  {
    "text": "queries are you know how many things are",
    "start": "1684440",
    "end": "1685880"
  },
  {
    "text": "running at that time how many promises",
    "start": "1685880",
    "end": "1687440"
  },
  {
    "text": "are",
    "start": "1687440",
    "end": "1688640"
  },
  {
    "text": "running internally if you do a promise.",
    "start": "1688640",
    "end": "1691360"
  },
  {
    "text": "all you still have all those being added",
    "start": "1691360",
    "end": "1694519"
  },
  {
    "text": "to the queue right so it's not just a",
    "start": "1694519",
    "end": "1696919"
  },
  {
    "text": "singular promise a promise.all could",
    "start": "1696919",
    "end": "1699200"
  },
  {
    "text": "have you do it a bunch of little times",
    "start": "1699200",
    "end": "1700919"
  },
  {
    "text": "as",
    "start": "1700919",
    "end": "1701600"
  },
  {
    "text": "well anyways just something to think",
    "start": "1701600",
    "end": "1704120"
  },
  {
    "text": "about the",
    "start": "1704120",
    "end": "1706519"
  },
  {
    "text": "name I really really wish I didn't",
    "start": "1706720",
    "end": "1708679"
  },
  {
    "text": "concern myself so much with memory but",
    "start": "1708679",
    "end": "1710360"
  },
  {
    "text": "it's an emotional bruising situation and",
    "start": "1710360",
    "end": "1712399"
  },
  {
    "text": "sensitive topic okay a Jen",
    "start": "1712399",
    "end": "1716159"
  }
]