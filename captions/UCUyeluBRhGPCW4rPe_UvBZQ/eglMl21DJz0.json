[
  {
    "text": "go 1.20 experiment memory Arenas versus",
    "start": "179",
    "end": "4380"
  },
  {
    "text": "traditional memory management is",
    "start": "4380",
    "end": "6600"
  },
  {
    "text": "traditional like managed memory because",
    "start": "6600",
    "end": "8760"
  },
  {
    "text": "that would be more traditional right is",
    "start": "8760",
    "end": "10260"
  },
  {
    "text": "gar isn't garbage collection modern",
    "start": "10260",
    "end": "12120"
  },
  {
    "text": "memory management I don't even know now",
    "start": "12120",
    "end": "13980"
  },
  {
    "text": "now you got me all confused Dimitri but",
    "start": "13980",
    "end": "16980"
  },
  {
    "text": "let's find out what you have to say uh",
    "start": "16980",
    "end": "18840"
  },
  {
    "text": "go Arenas are an experimental feature",
    "start": "18840",
    "end": "20340"
  },
  {
    "text": "the API and implementation is completely",
    "start": "20340",
    "end": "21900"
  },
  {
    "text": "unsupported and the go team makes no",
    "start": "21900",
    "end": "23340"
  },
  {
    "text": "guarantees about a compatibility or",
    "start": "23340",
    "end": "24900"
  },
  {
    "text": "whether it will even continue to exist",
    "start": "24900",
    "end": "26640"
  },
  {
    "text": "in any feature release or future release",
    "start": "26640",
    "end": "28439"
  },
  {
    "text": "awesome okay this seems exciting this is",
    "start": "28439",
    "end": "30420"
  },
  {
    "text": "exciting this is some Cutting Edge go",
    "start": "30420",
    "end": "31859"
  },
  {
    "text": "people all right go uh 1.20 introduces",
    "start": "31859",
    "end": "34739"
  },
  {
    "text": "an experimental concept of Arenas",
    "start": "34739",
    "end": "36540"
  },
  {
    "text": "exciting for memory management which can",
    "start": "36540",
    "end": "39000"
  },
  {
    "text": "be used to improve performance of your",
    "start": "39000",
    "end": "40440"
  },
  {
    "text": "go programs in this blog post we'll look",
    "start": "40440",
    "end": "42360"
  },
  {
    "text": "at it what are arenas how do they work",
    "start": "42360",
    "end": "44280"
  },
  {
    "text": "how can you determine if your program",
    "start": "44280",
    "end": "45899"
  },
  {
    "text": "could benefit from Arenas how do we use",
    "start": "45899",
    "end": "48360"
  },
  {
    "text": "let's see how we use Arenas to optimize",
    "start": "48360",
    "end": "50399"
  },
  {
    "text": "our services so this is super exciting",
    "start": "50399",
    "end": "52020"
  },
  {
    "text": "because again if you can make go",
    "start": "52020",
    "end": "54239"
  },
  {
    "text": "slightly faster",
    "start": "54239",
    "end": "56460"
  },
  {
    "text": "like it's already It Go as a super",
    "start": "56460",
    "end": "59219"
  },
  {
    "text": "simple language to get right get it",
    "start": "59219",
    "end": "61620"
  },
  {
    "text": "shipped and move on so if you can make",
    "start": "61620",
    "end": "63840"
  },
  {
    "text": "it even slightly more faster",
    "start": "63840",
    "end": "66060"
  },
  {
    "text": "like that'd be crazy",
    "start": "66060",
    "end": "67979"
  },
  {
    "text": "all right because memory is a huge turn",
    "start": "67979",
    "end": "69900"
  },
  {
    "text": "on any system memory is going to be one",
    "start": "69900",
    "end": "71580"
  },
  {
    "text": "of your biggest causes for things being",
    "start": "71580",
    "end": "72960"
  },
  {
    "text": "slow let's see what are memory Arenas uh",
    "start": "72960",
    "end": "75540"
  },
  {
    "text": "go is a programming language that",
    "start": "75540",
    "end": "76740"
  },
  {
    "text": "utilizes garbage collection meaning that",
    "start": "76740",
    "end": "78780"
  },
  {
    "text": "the runtime automatically manages memory",
    "start": "78780",
    "end": "81000"
  },
  {
    "text": "allocation and deallocation for the",
    "start": "81000",
    "end": "82439"
  },
  {
    "text": "programmer this eliminates the need for",
    "start": "82439",
    "end": "84479"
  },
  {
    "text": "manual memory management but it comes",
    "start": "84479",
    "end": "86400"
  },
  {
    "text": "with the cost absolutely the go run time",
    "start": "86400",
    "end": "88020"
  },
  {
    "text": "must keep track of every object that is",
    "start": "88020",
    "end": "89759"
  },
  {
    "text": "allocated leading to the increased",
    "start": "89759",
    "end": "91140"
  },
  {
    "text": "performance overhead yep classic and",
    "start": "91140",
    "end": "92939"
  },
  {
    "text": "then it also has to find out which ones",
    "start": "92939",
    "end": "94140"
  },
  {
    "text": "can be cleaned up in let's see in",
    "start": "94140",
    "end": "96000"
  },
  {
    "text": "certain scenarios such as when an H",
    "start": "96000",
    "end": "97439"
  },
  {
    "text": "titty uh server process processes",
    "start": "97439",
    "end": "100380"
  },
  {
    "text": "requests with large protobuf blobs which",
    "start": "100380",
    "end": "102180"
  },
  {
    "text": "contain many small objects this can",
    "start": "102180",
    "end": "103680"
  },
  {
    "text": "result in go or in the go runtime",
    "start": "103680",
    "end": "105600"
  },
  {
    "text": "spending a significant amount of time",
    "start": "105600",
    "end": "107400"
  },
  {
    "text": "tracking each of those individual",
    "start": "107400",
    "end": "108840"
  },
  {
    "text": "allocations and then deallocating them",
    "start": "108840",
    "end": "110640"
  },
  {
    "text": "as a result this also causes significant",
    "start": "110640",
    "end": "112979"
  },
  {
    "text": "performance overhead one thing I don't",
    "start": "112979",
    "end": "114600"
  },
  {
    "text": "know about go that's true in JavaScript",
    "start": "114600",
    "end": "116280"
  },
  {
    "text": "is that like everything is its own",
    "start": "116280",
    "end": "118979"
  },
  {
    "text": "object",
    "start": "118979",
    "end": "121020"
  },
  {
    "text": "therefore",
    "start": "121020",
    "end": "123840"
  },
  {
    "text": "like a map",
    "start": "123840",
    "end": "125700"
  },
  {
    "text": "with maps in it",
    "start": "125700",
    "end": "128399"
  },
  {
    "text": "or an object with maps in it are",
    "start": "128399",
    "end": "131819"
  },
  {
    "text": "actually two separately tracked items so",
    "start": "131819",
    "end": "133800"
  },
  {
    "text": "I'm not sure if that's true in go or not",
    "start": "133800",
    "end": "135660"
  },
  {
    "text": "I I don't know so anyways Arenas offer a",
    "start": "135660",
    "end": "138660"
  },
  {
    "text": "solution to this problem by reducing the",
    "start": "138660",
    "end": "140220"
  },
  {
    "text": "overhead associated with many smaller",
    "start": "140220",
    "end": "141660"
  },
  {
    "text": "allocations in this protobuf uh blob",
    "start": "141660",
    "end": "143819"
  },
  {
    "text": "example a large chunk of memory and",
    "start": "143819",
    "end": "146099"
  },
  {
    "text": "Arena can be allocated before parsing",
    "start": "146099",
    "end": "148319"
  },
  {
    "text": "enable enabling before parsing enabling",
    "start": "148319",
    "end": "151260"
  },
  {
    "text": "all parse objects to then be placed",
    "start": "151260",
    "end": "153300"
  },
  {
    "text": "within an arena and tracked as a",
    "start": "153300",
    "end": "154800"
  },
  {
    "text": "collective unit once parsing is",
    "start": "154800",
    "end": "157140"
  },
  {
    "text": "completed the entire Arena can be freed",
    "start": "157140",
    "end": "158879"
  },
  {
    "text": "at once okay so this is like",
    "start": "158879",
    "end": "161580"
  },
  {
    "text": "effectively in some sense you're saying",
    "start": "161580",
    "end": "164220"
  },
  {
    "text": "that this object can only be referenced",
    "start": "164220",
    "end": "165840"
  },
  {
    "text": "by",
    "start": "165840",
    "end": "166980"
  },
  {
    "text": "a certain amount of items and they're",
    "start": "166980",
    "end": "168239"
  },
  {
    "text": "all in one single group so it's very",
    "start": "168239",
    "end": "169739"
  },
  {
    "text": "very simple okay this is actually pretty",
    "start": "169739",
    "end": "171239"
  },
  {
    "text": "cool this is kind of like a cool concept",
    "start": "171239",
    "end": "173459"
  },
  {
    "text": "I like it okay so garbage collector yeah",
    "start": "173459",
    "end": "175080"
  },
  {
    "text": "they have all these individual objects",
    "start": "175080",
    "end": "176519"
  },
  {
    "text": "versus just have them all in one okay I",
    "start": "176519",
    "end": "179160"
  },
  {
    "text": "like this",
    "start": "179160",
    "end": "180780"
  },
  {
    "text": "okay so this is what they mean by an",
    "start": "180780",
    "end": "182580"
  },
  {
    "text": "arena",
    "start": "182580",
    "end": "183480"
  },
  {
    "text": "okay identifying code that could benefit",
    "start": "183480",
    "end": "185459"
  },
  {
    "text": "from Arenas any code that allocates a",
    "start": "185459",
    "end": "188040"
  },
  {
    "text": "lot of small objects could potentially",
    "start": "188040",
    "end": "189180"
  },
  {
    "text": "benefit from Arenas but how do you know",
    "start": "189180",
    "end": "190739"
  },
  {
    "text": "if your code allocates too many in our",
    "start": "190739",
    "end": "192720"
  },
  {
    "text": "experience the best way to find out is",
    "start": "192720",
    "end": "193860"
  },
  {
    "text": "to profile your program yep nice",
    "start": "193860",
    "end": "195180"
  },
  {
    "text": "pyroscope okay pyroscope is one of these",
    "start": "195180",
    "end": "197340"
  },
  {
    "text": "cool so they give you like a little",
    "start": "197340",
    "end": "198659"
  },
  {
    "text": "Arena or allocation",
    "start": "198659",
    "end": "201080"
  },
  {
    "text": "allocation I believe they call these",
    "start": "201080",
    "end": "202980"
  },
  {
    "text": "icicle graphs because they hang from the",
    "start": "202980",
    "end": "204659"
  },
  {
    "text": "top",
    "start": "204659",
    "end": "206580"
  },
  {
    "text": "it's just a flame graph I call it a",
    "start": "206580",
    "end": "208140"
  },
  {
    "text": "flame graph okay just invert it and boom",
    "start": "208140",
    "end": "209640"
  },
  {
    "text": "you got yourself a flame graph I'm not",
    "start": "209640",
    "end": "210780"
  },
  {
    "text": "really sure why we decided to flip flame",
    "start": "210780",
    "end": "212159"
  },
  {
    "text": "graphs upside down but you know we did",
    "start": "212159",
    "end": "214440"
  },
  {
    "text": "we went there and now look at us now",
    "start": "214440",
    "end": "216180"
  },
  {
    "text": "look at us now we got icicles okay I",
    "start": "216180",
    "end": "218340"
  },
  {
    "text": "don't understand it what the hell's",
    "start": "218340",
    "end": "219599"
  },
  {
    "text": "Happening Here",
    "start": "219599",
    "end": "220620"
  },
  {
    "text": "okay uh the purple uh nodes in this",
    "start": "220620",
    "end": "223319"
  },
  {
    "text": "allocated uh objects flame graph",
    "start": "223319",
    "end": "225480"
  },
  {
    "text": "represent where Arenas may be most",
    "start": "225480",
    "end": "227040"
  },
  {
    "text": "effective oh interesting I wonder how",
    "start": "227040",
    "end": "228959"
  },
  {
    "text": "that works or why they're colored purple",
    "start": "228959",
    "end": "230340"
  },
  {
    "text": "what makes them that way",
    "start": "230340",
    "end": "232560"
  },
  {
    "text": "oh samples there's a lot of samples",
    "start": "232560",
    "end": "234420"
  },
  {
    "text": "objects in Ram there's a lot of objects",
    "start": "234420",
    "end": "236640"
  },
  {
    "text": "in Ram okay okay okay uh you can see the",
    "start": "236640",
    "end": "239819"
  },
  {
    "text": "majority of allocations this many come",
    "start": "239819",
    "end": "241799"
  },
  {
    "text": "from one area of code oh okay so it's",
    "start": "241799",
    "end": "244860"
  },
  {
    "text": "this one right here",
    "start": "244860",
    "end": "246360"
  },
  {
    "text": "or are you talking about this one",
    "start": "246360",
    "end": "248099"
  },
  {
    "text": "are you talking about this one I'm not",
    "start": "248099",
    "end": "249480"
  },
  {
    "text": "sure which one they're talking about but",
    "start": "249480",
    "end": "250379"
  },
  {
    "text": "somewhere in there usually how I read",
    "start": "250379",
    "end": "252000"
  },
  {
    "text": "this is this one is the one that",
    "start": "252000",
    "end": "253379"
  },
  {
    "text": "allocated all this this one allocated",
    "start": "253379",
    "end": "255000"
  },
  {
    "text": "from here to here and this one allocated",
    "start": "255000",
    "end": "256739"
  },
  {
    "text": "from here to here right that's how I'd",
    "start": "256739",
    "end": "258060"
  },
  {
    "text": "read it given that it represents 65 of",
    "start": "258060",
    "end": "260459"
  },
  {
    "text": "allocations this is a good candidate for",
    "start": "260459",
    "end": "262199"
  },
  {
    "text": "using Arenas but is there enough of a",
    "start": "262199",
    "end": "264660"
  },
  {
    "text": "performance benefit to be gained by",
    "start": "264660",
    "end": "266040"
  },
  {
    "text": "cutting down these allocations let's",
    "start": "266040",
    "end": "267360"
  },
  {
    "text": "take a look at the CPU profiler okay so",
    "start": "267360",
    "end": "270180"
  },
  {
    "text": "it does look like you're getting the",
    "start": "270180",
    "end": "271380"
  },
  {
    "text": "same kind of uh area right here okay",
    "start": "271380",
    "end": "273300"
  },
  {
    "text": "exciting purple nodes in this CPU flame",
    "start": "273300",
    "end": "276360"
  },
  {
    "text": "graph represents potential for",
    "start": "276360",
    "end": "277979"
  },
  {
    "text": "performance improvements all right let's",
    "start": "277979",
    "end": "279360"
  },
  {
    "text": "go a few things stand out the problem or",
    "start": "279360",
    "end": "281400"
  },
  {
    "text": "the program spends a lot of CPU time in",
    "start": "281400",
    "end": "283320"
  },
  {
    "text": "the same insert stack a function okay so",
    "start": "283320",
    "end": "286199"
  },
  {
    "text": "there could be there could be some gains",
    "start": "286199",
    "end": "287639"
  },
  {
    "text": "uh is it the memory that's causing him",
    "start": "287639",
    "end": "289440"
  },
  {
    "text": "if you search for a runtime Malik GC",
    "start": "289440",
    "end": "291540"
  },
  {
    "text": "multiple pink nodes at the bottom you'll",
    "start": "291540",
    "end": "293639"
  },
  {
    "text": "see that the function is called",
    "start": "293639",
    "end": "294720"
  },
  {
    "text": "frequently in various different places",
    "start": "294720",
    "end": "296280"
  },
  {
    "text": "and takes about 14 of our total",
    "start": "296280",
    "end": "297840"
  },
  {
    "text": "execution time so this is typically how",
    "start": "297840",
    "end": "299699"
  },
  {
    "text": "I do this for node node I'll look for",
    "start": "299699",
    "end": "301979"
  },
  {
    "text": "major and minor GC and I will look for",
    "start": "301979",
    "end": "305100"
  },
  {
    "text": "how much of the program's time am I",
    "start": "305100",
    "end": "308340"
  },
  {
    "text": "spending in a major or minor GC and",
    "start": "308340",
    "end": "311520"
  },
  {
    "text": "that's really your garbage collection",
    "start": "311520",
    "end": "313080"
  },
  {
    "text": "win now where this makes a huge win is",
    "start": "313080",
    "end": "315900"
  },
  {
    "text": "inside of requests right inside of a",
    "start": "315900",
    "end": "317820"
  },
  {
    "text": "server because once your server can can",
    "start": "317820",
    "end": "320100"
  },
  {
    "text": "reduce that it actually makes a",
    "start": "320100",
    "end": "321900"
  },
  {
    "text": "disproportionately huge effect in how",
    "start": "321900",
    "end": "323940"
  },
  {
    "text": "much you actually get done because a",
    "start": "323940",
    "end": "325500"
  },
  {
    "text": "single request all the the problem why",
    "start": "325500",
    "end": "328320"
  },
  {
    "text": "is that it's like a multiple right so in",
    "start": "328320",
    "end": "330600"
  },
  {
    "text": "in node when a single request hits with",
    "start": "330600",
    "end": "332940"
  },
  {
    "text": "a garbage collection all other requests",
    "start": "332940",
    "end": "335280"
  },
  {
    "text": "that are waiting all get hit with the",
    "start": "335280",
    "end": "337380"
  },
  {
    "text": "same garbage collection so a 200",
    "start": "337380",
    "end": "340320"
  },
  {
    "text": "millisecond stop isn't just a 200",
    "start": "340320",
    "end": "342900"
  },
  {
    "text": "millisecond for a singular request it's",
    "start": "342900",
    "end": "345419"
  },
  {
    "text": "a 200 millisecond for the 10 requests in",
    "start": "345419",
    "end": "348240"
  },
  {
    "text": "there so the amount of speed you gain by",
    "start": "348240",
    "end": "350940"
  },
  {
    "text": "reducing garbage collection goes up",
    "start": "350940",
    "end": "352500"
  },
  {
    "text": "significant amounts inside of a node",
    "start": "352500",
    "end": "354960"
  },
  {
    "text": "application that's why you know that's",
    "start": "354960",
    "end": "357419"
  },
  {
    "text": "why garbage collection is a really good",
    "start": "357419",
    "end": "358919"
  },
  {
    "text": "thing to think about you know what I",
    "start": "358919",
    "end": "359820"
  },
  {
    "text": "mean",
    "start": "359820",
    "end": "361860"
  },
  {
    "text": "I don't know if it's the same in go I",
    "start": "361860",
    "end": "363720"
  },
  {
    "text": "don't know exactly how go works but if",
    "start": "363720",
    "end": "365340"
  },
  {
    "text": "it also has freeze the world garbage",
    "start": "365340",
    "end": "366720"
  },
  {
    "text": "collection then you could argue the",
    "start": "366720",
    "end": "368220"
  },
  {
    "text": "exact same thing every single one of",
    "start": "368220",
    "end": "370680"
  },
  {
    "text": "those will all have to freeze and",
    "start": "370680",
    "end": "372840"
  },
  {
    "text": "therefore you're a 14 isn't just 14 it",
    "start": "372840",
    "end": "376320"
  },
  {
    "text": "could be a hundred and forty percent",
    "start": "376320",
    "end": "377880"
  },
  {
    "text": "right you don't know how much it will",
    "start": "377880",
    "end": "379560"
  },
  {
    "text": "actually improve your response time and",
    "start": "379560",
    "end": "381660"
  },
  {
    "text": "all that about five percent of the CPU",
    "start": "381660",
    "end": "383639"
  },
  {
    "text": "time is spent in runtime uh big Mark",
    "start": "383639",
    "end": "385979"
  },
  {
    "text": "worker okay awesome so in theory if we",
    "start": "385979",
    "end": "388259"
  },
  {
    "text": "optimize all of our allocations in this",
    "start": "388259",
    "end": "389699"
  },
  {
    "text": "program we could cut about 14 plus 5 19",
    "start": "389699",
    "end": "392340"
  },
  {
    "text": "CPU time this would translate in uh 90",
    "start": "392340",
    "end": "395699"
  },
  {
    "text": "cost savings and latency Improvement for",
    "start": "395699",
    "end": "397620"
  },
  {
    "text": "all of our customers in practice it's",
    "start": "397620",
    "end": "399360"
  },
  {
    "text": "unlikely that we could truly get those",
    "start": "399360",
    "end": "400800"
  },
  {
    "text": "numbers down to zero but this is still a",
    "start": "400800",
    "end": "403440"
  },
  {
    "text": "significant chunk of work yep",
    "start": "403440",
    "end": "405600"
  },
  {
    "text": "okay optimizations we made if you're",
    "start": "405600",
    "end": "407580"
  },
  {
    "text": "interested in following along there's a",
    "start": "407580",
    "end": "408960"
  },
  {
    "text": "public pull request for uh pyroscope",
    "start": "408960",
    "end": "410639"
  },
  {
    "text": "repository that you can use as a",
    "start": "410639",
    "end": "412560"
  },
  {
    "text": "reference to begin we created a wrapper",
    "start": "412560",
    "end": "414180"
  },
  {
    "text": "component that is responsible for",
    "start": "414180",
    "end": "415740"
  },
  {
    "text": "dealing with allocations of slices or",
    "start": "415740",
    "end": "417360"
  },
  {
    "text": "structs if Arenas are enabled this",
    "start": "417360",
    "end": "419280"
  },
  {
    "text": "component allocates slices using uh an",
    "start": "419280",
    "end": "421919"
  },
  {
    "text": "arena otherwise it uses a standard make",
    "start": "421919",
    "end": "423720"
  },
  {
    "text": "function we do this by using a build",
    "start": "423720",
    "end": "425699"
  },
  {
    "text": "tags okay I don't know much about build",
    "start": "425699",
    "end": "427680"
  },
  {
    "text": "tags and go this allows for easy",
    "start": "427680",
    "end": "429240"
  },
  {
    "text": "switching between Arena allocations and",
    "start": "429240",
    "end": "430919"
  },
  {
    "text": "standard allocations at build time okay",
    "start": "430919",
    "end": "432360"
  },
  {
    "text": "perfect so there's no runtime overhead",
    "start": "432360",
    "end": "433979"
  },
  {
    "text": "is what they're saying it just chooses",
    "start": "433979",
    "end": "435600"
  },
  {
    "text": "one or the other",
    "start": "435600",
    "end": "437340"
  },
  {
    "text": "perfect",
    "start": "437340",
    "end": "438600"
  },
  {
    "text": "then we added initialization and cleanup",
    "start": "438600",
    "end": "440639"
  },
  {
    "text": "calls for our Arenas around the parser",
    "start": "440639",
    "end": "442080"
  },
  {
    "text": "code after that we replaced regular make",
    "start": "442080",
    "end": "444720"
  },
  {
    "text": "calls with make calls from our wrapper",
    "start": "444720",
    "end": "446759"
  },
  {
    "text": "component finally we build pyroscope",
    "start": "446759",
    "end": "448440"
  },
  {
    "text": "with Arenas enabled and gradually",
    "start": "448440",
    "end": "450120"
  },
  {
    "text": "deployed to our production environment",
    "start": "450120",
    "end": "451560"
  },
  {
    "text": "okay",
    "start": "451560",
    "end": "453900"
  },
  {
    "text": "let's see uh flame graph with the",
    "start": "453900",
    "end": "455520"
  },
  {
    "text": "representative CPU time per function is",
    "start": "455520",
    "end": "457560"
  },
  {
    "text": "this supposed to be the same as this one",
    "start": "457560",
    "end": "459240"
  },
  {
    "text": "I mean it looks like the same right so",
    "start": "459240",
    "end": "461099"
  },
  {
    "text": "13 percent",
    "start": "461099",
    "end": "462539"
  },
  {
    "text": "13 okay the flame graph above represents",
    "start": "462539",
    "end": "464940"
  },
  {
    "text": "a profile after we've implemented the",
    "start": "464940",
    "end": "466740"
  },
  {
    "text": "changes you can see that many of the",
    "start": "466740",
    "end": "468539"
  },
  {
    "text": "runtime Malik calls are now gone I",
    "start": "468539",
    "end": "470340"
  },
  {
    "text": "couldn't see them before",
    "start": "470340",
    "end": "471720"
  },
  {
    "text": "I guess I'd have to kind of run through",
    "start": "471720",
    "end": "473280"
  },
  {
    "text": "this is there a way to like easy oh is",
    "start": "473280",
    "end": "474840"
  },
  {
    "text": "this one over here",
    "start": "474840",
    "end": "477120"
  },
  {
    "text": "yeah okay so it was this one four",
    "start": "477120",
    "end": "479039"
  },
  {
    "text": "percent oh is it all pink that okay so",
    "start": "479039",
    "end": "481199"
  },
  {
    "text": "all pink",
    "start": "481199",
    "end": "483000"
  },
  {
    "text": "okay so all pink is allocation stuff",
    "start": "483000",
    "end": "485400"
  },
  {
    "text": "okay",
    "start": "485400",
    "end": "487080"
  },
  {
    "text": "so now pink is all in one nice little",
    "start": "487080",
    "end": "488759"
  },
  {
    "text": "area",
    "start": "488759",
    "end": "489720"
  },
  {
    "text": "and I mean I can't really tell if it's",
    "start": "489720",
    "end": "491160"
  },
  {
    "text": "different I'd have to use I don't know",
    "start": "491160",
    "end": "492539"
  },
  {
    "text": "how to do searchings",
    "start": "492539",
    "end": "494340"
  },
  {
    "text": "I don't know how to use this thing well",
    "start": "494340",
    "end": "496560"
  },
  {
    "text": "anyways uh the flame graph uh above",
    "start": "496560",
    "end": "499080"
  },
  {
    "text": "represents a profile after we've",
    "start": "499080",
    "end": "500520"
  },
  {
    "text": "implemented the changes you can see that",
    "start": "500520",
    "end": "502199"
  },
  {
    "text": "many of the runtime Mallet GC calls are",
    "start": "502199",
    "end": "504419"
  },
  {
    "text": "gone but are now replaced with Arena",
    "start": "504419",
    "end": "506160"
  },
  {
    "text": "specific equivalent you can also see",
    "start": "506160",
    "end": "508020"
  },
  {
    "text": "that the garbage collection overhead is",
    "start": "508020",
    "end": "509340"
  },
  {
    "text": "cut in half it's hard to see the exact",
    "start": "509340",
    "end": "510900"
  },
  {
    "text": "amount of savings from solely looking at",
    "start": "510900",
    "end": "512580"
  },
  {
    "text": "the flame graphs but when looking at our",
    "start": "512580",
    "end": "513959"
  },
  {
    "text": "grafana dashboard which combines our",
    "start": "513959",
    "end": "516120"
  },
  {
    "text": "flame graphs with CPU utilization from",
    "start": "516120",
    "end": "518399"
  },
  {
    "text": "AWS metrics we saw an approximate eight",
    "start": "518399",
    "end": "520440"
  },
  {
    "text": "percent reduction in CPU usage this",
    "start": "520440",
    "end": "522539"
  },
  {
    "text": "translates into an eight percent cost",
    "start": "522539",
    "end": "524700"
  },
  {
    "text": "savings for our Cloud build particular",
    "start": "524700",
    "end": "526320"
  },
  {
    "text": "Services well that's only if you can",
    "start": "526320",
    "end": "527760"
  },
  {
    "text": "technically scale it correctly right I",
    "start": "527760",
    "end": "530220"
  },
  {
    "text": "think you have to be at a pretty good",
    "start": "530220",
    "end": "531360"
  },
  {
    "text": "amount but look at that that's cool",
    "start": "531360",
    "end": "532860"
  },
  {
    "text": "right",
    "start": "532860",
    "end": "533880"
  },
  {
    "text": "like that means you can handle a lot",
    "start": "533880",
    "end": "535500"
  },
  {
    "text": "more requests what I would really like",
    "start": "535500",
    "end": "536640"
  },
  {
    "text": "to see is the latency or not the latency",
    "start": "536640",
    "end": "539160"
  },
  {
    "text": "uh the round trip times",
    "start": "539160",
    "end": "541560"
  },
  {
    "text": "what do you do with the 50 percentile",
    "start": "541560",
    "end": "543240"
  },
  {
    "text": "what happens to the 50th percentile and",
    "start": "543240",
    "end": "545279"
  },
  {
    "text": "the 75th percentile because the the 99th",
    "start": "545279",
    "end": "547500"
  },
  {
    "text": "will probably remain near the same right",
    "start": "547500",
    "end": "549360"
  },
  {
    "text": "the 99th and the 99.9 those probably all",
    "start": "549360",
    "end": "552120"
  },
  {
    "text": "remain",
    "start": "552120",
    "end": "553080"
  },
  {
    "text": "the same",
    "start": "553080",
    "end": "554880"
  },
  {
    "text": "but like the 50 percentile or the 75th",
    "start": "554880",
    "end": "558600"
  },
  {
    "text": "percentile how much do you shrink that",
    "start": "558600",
    "end": "560339"
  },
  {
    "text": "back you could actually see a very",
    "start": "560339",
    "end": "562380"
  },
  {
    "text": "significant percentage shrink back uh",
    "start": "562380",
    "end": "564240"
  },
  {
    "text": "this may not seem like a lot but it's",
    "start": "564240",
    "end": "565620"
  },
  {
    "text": "important to note that this is a service",
    "start": "565620",
    "end": "567300"
  },
  {
    "text": "that has already been optimized quite a",
    "start": "567300",
    "end": "569040"
  },
  {
    "text": "bit for example the protobuf parser that",
    "start": "569040",
    "end": "571019"
  },
  {
    "text": "we use doesn't allocate any extra memory",
    "start": "571019",
    "end": "572820"
  },
  {
    "text": "at all garbage collection overhead five",
    "start": "572820",
    "end": "574140"
  },
  {
    "text": "percent is also lower end of the",
    "start": "574140",
    "end": "575940"
  },
  {
    "text": "spectrum for our services we think that",
    "start": "575940",
    "end": "578220"
  },
  {
    "text": "there's a lot more room for improvement",
    "start": "578220",
    "end": "579480"
  },
  {
    "text": "other than parts of the code base and so",
    "start": "579480",
    "end": "580920"
  },
  {
    "text": "we're excited to continue to experiment",
    "start": "580920",
    "end": "582360"
  },
  {
    "text": "with Arenas this is actually really cool",
    "start": "582360",
    "end": "583980"
  },
  {
    "text": "this is super cool now I want to play",
    "start": "583980",
    "end": "586019"
  },
  {
    "text": "with it damn it I'm supposed to be",
    "start": "586019",
    "end": "587760"
  },
  {
    "text": "studying for htmx and oh camel and now I",
    "start": "587760",
    "end": "590760"
  },
  {
    "text": "want to go play with go all of a sudden",
    "start": "590760",
    "end": "592740"
  },
  {
    "text": "right uh trade-offs while Arenas can",
    "start": "592740",
    "end": "595440"
  },
  {
    "text": "provide performance benefits it's",
    "start": "595440",
    "end": "596940"
  },
  {
    "text": "important to consider the trade-offs",
    "start": "596940",
    "end": "598320"
  },
  {
    "text": "before using them the main drawback",
    "start": "598320",
    "end": "599580"
  },
  {
    "text": "using Arenas is that you use Arenas you",
    "start": "599580",
    "end": "602160"
  },
  {
    "text": "now have to manage memory manually and",
    "start": "602160",
    "end": "603959"
  },
  {
    "text": "if you're not careful this leads to",
    "start": "603959",
    "end": "605100"
  },
  {
    "text": "serious problems absolutely failing to",
    "start": "605100",
    "end": "607080"
  },
  {
    "text": "properly free memory can lead to memory",
    "start": "607080",
    "end": "608519"
  },
  {
    "text": "leaks I know but this is a problem with",
    "start": "608519",
    "end": "609779"
  },
  {
    "text": "all maps right so I mean you still have",
    "start": "609779",
    "end": "612000"
  },
  {
    "text": "this the exact same problem in any long",
    "start": "612000",
    "end": "613500"
  },
  {
    "text": "living map uh attempting to access an",
    "start": "613500",
    "end": "615480"
  },
  {
    "text": "object from a previous previously freed",
    "start": "615480",
    "end": "617399"
  },
  {
    "text": "Arena may cause program crashes",
    "start": "617399",
    "end": "618839"
  },
  {
    "text": "absolutely classic really uh here's our",
    "start": "618839",
    "end": "621959"
  },
  {
    "text": "recommendation only use Arenas in",
    "start": "621959",
    "end": "624060"
  },
  {
    "text": "critical code paths do not use them",
    "start": "624060",
    "end": "625260"
  },
  {
    "text": "everywhere good good call Profile your",
    "start": "625260",
    "end": "627420"
  },
  {
    "text": "code before and after using Arenas to",
    "start": "627420",
    "end": "628980"
  },
  {
    "text": "make sure you're adding Arenas in areas",
    "start": "628980",
    "end": "630360"
  },
  {
    "text": "that uh they can provide most benefit",
    "start": "630360",
    "end": "632339"
  },
  {
    "text": "yep uh definitely profile your code",
    "start": "632339",
    "end": "634680"
  },
  {
    "text": "before and find where the memory is",
    "start": "634680",
    "end": "635940"
  },
  {
    "text": "being churned the most right uh even",
    "start": "635940",
    "end": "637560"
  },
  {
    "text": "node has this you can add object pools",
    "start": "637560",
    "end": "639959"
  },
  {
    "text": "to node and you can see huge performance",
    "start": "639959",
    "end": "642300"
  },
  {
    "text": "benefits by looking where you allocate",
    "start": "642300",
    "end": "644279"
  },
  {
    "text": "the most amount of memory and what I",
    "start": "644279",
    "end": "646019"
  },
  {
    "text": "found especially with like callback",
    "start": "646019",
    "end": "647459"
  },
  {
    "text": "objects is really really good to use",
    "start": "647459",
    "end": "649740"
  },
  {
    "text": "like bound functions and all that it's",
    "start": "649740",
    "end": "651420"
  },
  {
    "text": "very very good hog stack I know very",
    "start": "651420",
    "end": "652980"
  },
  {
    "text": "excited for the hog stack the hog or the",
    "start": "652980",
    "end": "655320"
  },
  {
    "text": "Gog stack",
    "start": "655320",
    "end": "657980"
  },
  {
    "text": "uh pay close attention uh to the life",
    "start": "658200",
    "end": "660420"
  },
  {
    "text": "cycle of the objects created in the",
    "start": "660420",
    "end": "662040"
  },
  {
    "text": "arena make sure you don't leak them to",
    "start": "662040",
    "end": "663480"
  },
  {
    "text": "other components yep so you definitely",
    "start": "663480",
    "end": "665399"
  },
  {
    "text": "have to have internal implementation",
    "start": "665399",
    "end": "666899"
  },
  {
    "text": "details use defer a free to make sure",
    "start": "666899",
    "end": "669180"
  },
  {
    "text": "yes beautiful use clone to clone objects",
    "start": "669180",
    "end": "671760"
  },
  {
    "text": "back to the Heap okay beautiful uh the",
    "start": "671760",
    "end": "674279"
  },
  {
    "text": "other major drawback at the moment is go",
    "start": "674279",
    "end": "675839"
  },
  {
    "text": "Arenas are experimental feature the API",
    "start": "675839",
    "end": "678060"
  },
  {
    "text": "and the implementation is completely",
    "start": "678060",
    "end": "679200"
  },
  {
    "text": "unsupported and the go team makes no",
    "start": "679200",
    "end": "680579"
  },
  {
    "text": "guarantee about backwards compatibility",
    "start": "680579",
    "end": "681959"
  },
  {
    "text": "or about compatibility or whether it'll",
    "start": "681959",
    "end": "683700"
  },
  {
    "text": "even continue to exist in future",
    "start": "683700",
    "end": "684839"
  },
  {
    "text": "releases I think",
    "start": "684839",
    "end": "686820"
  },
  {
    "text": "I think it's really exciting though I I",
    "start": "686820",
    "end": "688560"
  },
  {
    "text": "really do hope they kind of pursue this",
    "start": "688560",
    "end": "689940"
  },
  {
    "text": "because I really love the idea of having",
    "start": "689940",
    "end": "691560"
  },
  {
    "text": "Escape hatches to manually manage your",
    "start": "691560",
    "end": "694800"
  },
  {
    "text": "own memory because it is such a huge",
    "start": "694800",
    "end": "697079"
  },
  {
    "text": "benefit when it is a benefit you know",
    "start": "697079",
    "end": "699720"
  },
  {
    "text": "for the most part A lot of the things",
    "start": "699720",
    "end": "701040"
  },
  {
    "text": "you do is super ephemeral you don't care",
    "start": "701040",
    "end": "702660"
  },
  {
    "text": "but there are those few times where it's",
    "start": "702660",
    "end": "705060"
  },
  {
    "text": "just like if I could manage memory right",
    "start": "705060",
    "end": "707160"
  },
  {
    "text": "here",
    "start": "707160",
    "end": "708360"
  },
  {
    "text": "I could like eliminate half my programs",
    "start": "708360",
    "end": "711240"
  },
  {
    "text": "like running time just for this like",
    "start": "711240",
    "end": "712800"
  },
  {
    "text": "this one thing I have this exact thing",
    "start": "712800",
    "end": "714839"
  },
  {
    "text": "right now and I wish I could just map so",
    "start": "714839",
    "end": "717180"
  },
  {
    "text": "what I do in JavaScript I kid you not",
    "start": "717180",
    "end": "718740"
  },
  {
    "text": "what I do in JavaScript at my job right",
    "start": "718740",
    "end": "720420"
  },
  {
    "text": "now is I do this stupid stuff where I'll",
    "start": "720420",
    "end": "722339"
  },
  {
    "text": "be like const get you know you know",
    "start": "722339",
    "end": "724800"
  },
  {
    "text": "items equals some sort of awaiting and",
    "start": "724800",
    "end": "727560"
  },
  {
    "text": "getting this thing right I get some sort",
    "start": "727560",
    "end": "729360"
  },
  {
    "text": "of uh array back right this returns uh",
    "start": "729360",
    "end": "731940"
  },
  {
    "text": "an array of you know something right uh",
    "start": "731940",
    "end": "734100"
  },
  {
    "text": "something yeah yeah yeah yeah and then I",
    "start": "734100",
    "end": "736200"
  },
  {
    "text": "have to go through it right I do some",
    "start": "736200",
    "end": "738240"
  },
  {
    "text": "sort of while items uh length right",
    "start": "738240",
    "end": "740399"
  },
  {
    "text": "something that looks like this and do",
    "start": "740399",
    "end": "741839"
  },
  {
    "text": "items pop because then I'm reducing it",
    "start": "741839",
    "end": "743459"
  },
  {
    "text": "one at a time and then at the end I go",
    "start": "743459",
    "end": "745140"
  },
  {
    "text": "items equals null because",
    "start": "745140",
    "end": "747540"
  },
  {
    "text": "I have to which means that I have to use",
    "start": "747540",
    "end": "749279"
  },
  {
    "text": "a let here and it's all complicated in",
    "start": "749279",
    "end": "751200"
  },
  {
    "text": "one part because I actually use too much",
    "start": "751200",
    "end": "752579"
  },
  {
    "text": "memory and then by doing this and",
    "start": "752579",
    "end": "754200"
  },
  {
    "text": "importing GC and enforcing GC I can keep",
    "start": "754200",
    "end": "757140"
  },
  {
    "text": "memory down like this is crazy what I",
    "start": "757140",
    "end": "759240"
  },
  {
    "text": "have to do but my program goes to eight",
    "start": "759240",
    "end": "760980"
  },
  {
    "text": "gigabytes sometimes or I can keep it at",
    "start": "760980",
    "end": "763139"
  },
  {
    "text": "200 megabytes by enforcing manual memory",
    "start": "763139",
    "end": "766260"
  },
  {
    "text": "management in node which is totally the",
    "start": "766260",
    "end": "768600"
  },
  {
    "text": "worst thing ever and I hate it and I",
    "start": "768600",
    "end": "771779"
  },
  {
    "text": "have to write stupid code like this but",
    "start": "771779",
    "end": "773760"
  },
  {
    "text": "I do because that's what I have to do",
    "start": "773760",
    "end": "775380"
  },
  {
    "text": "and I don't want to do it right I wish I",
    "start": "775380",
    "end": "777300"
  },
  {
    "text": "had better off I wish I had more things",
    "start": "777300",
    "end": "778860"
  },
  {
    "text": "right",
    "start": "778860",
    "end": "779940"
  },
  {
    "text": "anyways the go team has received a lot",
    "start": "779940",
    "end": "782459"
  },
  {
    "text": "of feedback about Arenas and we'd uh",
    "start": "782459",
    "end": "784079"
  },
  {
    "text": "like to address some of the concerns",
    "start": "784079",
    "end": "785399"
  },
  {
    "text": "that we've seen from the community most",
    "start": "785399",
    "end": "786660"
  },
  {
    "text": "frequently mentioned issue with Arenas",
    "start": "786660",
    "end": "788160"
  },
  {
    "text": "is that they make the language more",
    "start": "788160",
    "end": "789360"
  },
  {
    "text": "complicated by adding an implicit and",
    "start": "789360",
    "end": "791040"
  },
  {
    "text": "not immediately obvious way for programs",
    "start": "791040",
    "end": "792839"
  },
  {
    "text": "to crash absolutely one positive thing",
    "start": "792839",
    "end": "795120"
  },
  {
    "text": "about go is that go does not",
    "start": "795120",
    "end": "799700"
  },
  {
    "text": "uh want complexity and there's something",
    "start": "800040",
    "end": "802019"
  },
  {
    "text": "about that that is very beautiful in of",
    "start": "802019",
    "end": "803880"
  },
  {
    "text": "itself even if you don't like it it's",
    "start": "803880",
    "end": "805680"
  },
  {
    "text": "still beautiful most of the criticism is",
    "start": "805680",
    "end": "807540"
  },
  {
    "text": "well-founded but misdirected we are not",
    "start": "807540",
    "end": "809399"
  },
  {
    "text": "anticipating Arenas becoming widespread",
    "start": "809399",
    "end": "811200"
  },
  {
    "text": "uh we view Arenas as a powerful tool but",
    "start": "811200",
    "end": "813959"
  },
  {
    "text": "one that only uh is suitable for",
    "start": "813959",
    "end": "815639"
  },
  {
    "text": "specific situation in our view Arena",
    "start": "815639",
    "end": "817380"
  },
  {
    "text": "should be included in the standard",
    "start": "817380",
    "end": "818639"
  },
  {
    "text": "Library however their usage should be",
    "start": "818639",
    "end": "820620"
  },
  {
    "text": "discouraged much like the usage of",
    "start": "820620",
    "end": "822360"
  },
  {
    "text": "unsafe reflect or seagull",
    "start": "822360",
    "end": "825980"
  },
  {
    "text": "our experience with Arenas has been very",
    "start": "826680",
    "end": "828480"
  },
  {
    "text": "positive and we're able to show that",
    "start": "828480",
    "end": "829800"
  },
  {
    "text": "Arenas can significantly reduce the",
    "start": "829800",
    "end": "831240"
  },
  {
    "text": "amount of time spent in garbage",
    "start": "831240",
    "end": "832260"
  },
  {
    "text": "collection and memory allocations the",
    "start": "832260",
    "end": "833820"
  },
  {
    "text": "experiment described in this article",
    "start": "833820",
    "end": "835320"
  },
  {
    "text": "focused on a single already highly",
    "start": "835320",
    "end": "836880"
  },
  {
    "text": "optimized service and we were still able",
    "start": "836880",
    "end": "839399"
  },
  {
    "text": "to squeeze eight percent extra",
    "start": "839399",
    "end": "840480"
  },
  {
    "text": "performance by using Arenas we still",
    "start": "840480",
    "end": "842399"
  },
  {
    "text": "think that many users can benefit a lot",
    "start": "842399",
    "end": "844260"
  },
  {
    "text": "more from Arenas absolutely if you don't",
    "start": "844260",
    "end": "846000"
  },
  {
    "text": "have an optimized one you're just",
    "start": "846000",
    "end": "847079"
  },
  {
    "text": "creating wild objects you could really",
    "start": "847079",
    "end": "849060"
  },
  {
    "text": "get some good stuff in addition to that",
    "start": "849060",
    "end": "851339"
  },
  {
    "text": "we also find that Arenas are easier to",
    "start": "851339",
    "end": "852839"
  },
  {
    "text": "implement compared to other",
    "start": "852839",
    "end": "853800"
  },
  {
    "text": "optimizations that we have tried in the",
    "start": "853800",
    "end": "855180"
  },
  {
    "text": "past such as using buffer pools pools",
    "start": "855180",
    "end": "857940"
  },
  {
    "text": "are very hard to use",
    "start": "857940",
    "end": "859620"
  },
  {
    "text": "pools are super easy to leak or writing",
    "start": "859620",
    "end": "862500"
  },
  {
    "text": "custom allocation free protobuf parsers",
    "start": "862500",
    "end": "864839"
  },
  {
    "text": "this is like Ultra duper duper hard and",
    "start": "864839",
    "end": "868079"
  },
  {
    "text": "compared to the other types of",
    "start": "868079",
    "end": "869100"
  },
  {
    "text": "optimizations uh they share the same",
    "start": "869100",
    "end": "871320"
  },
  {
    "text": "drawbacks but provide more benefits so",
    "start": "871320",
    "end": "873480"
  },
  {
    "text": "in our view Arenas have a net win I am",
    "start": "873480",
    "end": "875579"
  },
  {
    "text": "completely on this one right here this",
    "start": "875579",
    "end": "877740"
  },
  {
    "text": "is like totally a w right here because",
    "start": "877740",
    "end": "880500"
  },
  {
    "text": "this makes perfect sense because it is",
    "start": "880500",
    "end": "882420"
  },
  {
    "text": "so hard to do the other optimizations",
    "start": "882420",
    "end": "884300"
  },
  {
    "text": "pooling objects is non-trivial it's easy",
    "start": "884300",
    "end": "886980"
  },
  {
    "text": "to get it wrong it's easy to leak memory",
    "start": "886980",
    "end": "889019"
  },
  {
    "text": "it's easy to do the wrong thing uh yeah",
    "start": "889019",
    "end": "891600"
  },
  {
    "text": "pools are easy if you ignore exceptions",
    "start": "891600",
    "end": "892980"
  },
  {
    "text": "yeah they're simple and also oopsie",
    "start": "892980",
    "end": "896100"
  },
  {
    "text": "Daisy stale data and some other things",
    "start": "896100",
    "end": "897779"
  },
  {
    "text": "that accidentally happen and blah blah",
    "start": "897779",
    "end": "899399"
  },
  {
    "text": "blah blah Arenas are a powerful tool for",
    "start": "899399",
    "end": "901740"
  },
  {
    "text": "optimizing go programs particularly in",
    "start": "901740",
    "end": "903360"
  },
  {
    "text": "the scenarios where your program spends",
    "start": "903360",
    "end": "904740"
  },
  {
    "text": "significant amount of times parsing",
    "start": "904740",
    "end": "905820"
  },
  {
    "text": "large protobuf or Json blobs they have",
    "start": "905820",
    "end": "908040"
  },
  {
    "text": "the potential to provide significant",
    "start": "908040",
    "end": "909360"
  },
  {
    "text": "performance improvements but it also is",
    "start": "909360",
    "end": "911040"
  },
  {
    "text": "important to note that they are",
    "start": "911040",
    "end": "912060"
  },
  {
    "text": "experimental feature and there's no",
    "start": "912060",
    "end": "913560"
  },
  {
    "text": "guarantees of compatibility yep all",
    "start": "913560",
    "end": "916079"
  },
  {
    "text": "right awesome beautiful beautiful",
    "start": "916079",
    "end": "917639"
  },
  {
    "text": "article thank you Dimitri uh this was",
    "start": "917639",
    "end": "920579"
  },
  {
    "text": "fantastic really liked it and I'm",
    "start": "920579",
    "end": "922740"
  },
  {
    "text": "actually pretty excited about go to me",
    "start": "922740",
    "end": "924420"
  },
  {
    "text": "this is a",
    "start": "924420",
    "end": "926339"
  },
  {
    "text": "this just makes go more appealing",
    "start": "926339",
    "end": "928440"
  },
  {
    "text": "because what this says to me is that go",
    "start": "928440",
    "end": "931380"
  },
  {
    "text": "isn't fine with 95 performance",
    "start": "931380",
    "end": "934920"
  },
  {
    "text": "they want that 99 and if you can get 99",
    "start": "934920",
    "end": "937519"
  },
  {
    "text": "you're looking creamy smooth right",
    "start": "937519",
    "end": "940199"
  },
  {
    "text": "because with JavaScript you cannot do",
    "start": "940199",
    "end": "942060"
  },
  {
    "text": "this",
    "start": "942060",
    "end": "942959"
  },
  {
    "text": "right like this is just not currently a",
    "start": "942959",
    "end": "944760"
  },
  {
    "text": "thing for JavaScript and nor do I really",
    "start": "944760",
    "end": "946500"
  },
  {
    "text": "want it in JavaScript because anything",
    "start": "946500",
    "end": "948360"
  },
  {
    "text": "that is done with JavaScript tends to",
    "start": "948360",
    "end": "950040"
  },
  {
    "text": "get wildly abused",
    "start": "950040",
    "end": "951600"
  },
  {
    "text": "you know what I mean wildly abused so",
    "start": "951600",
    "end": "954660"
  },
  {
    "text": "this is beautiful this is actually",
    "start": "954660",
    "end": "956339"
  },
  {
    "text": "really beautiful and I think Greg is",
    "start": "956339",
    "end": "957540"
  },
  {
    "text": "leptos Greg here",
    "start": "957540",
    "end": "959040"
  },
  {
    "text": "is leptos Greg here Greg I'm using some",
    "start": "959040",
    "end": "961260"
  },
  {
    "text": "more leptos tonight I don't know if you",
    "start": "961260",
    "end": "962459"
  },
  {
    "text": "know that but dude I'm going deep on",
    "start": "962459",
    "end": "963720"
  },
  {
    "text": "leptos Greg look at this look at this",
    "start": "963720",
    "end": "965100"
  },
  {
    "text": "beautiful stuff I'm just about to grab",
    "start": "965100",
    "end": "966600"
  },
  {
    "text": "some data from Tercel but I'm using a",
    "start": "966600",
    "end": "968760"
  },
  {
    "text": "local file client which makes it even",
    "start": "968760",
    "end": "970260"
  },
  {
    "text": "better right just grabbing it from that",
    "start": "970260",
    "end": "972180"
  },
  {
    "text": "example love it",
    "start": "972180",
    "end": "974160"
  },
  {
    "text": "anyways Greg you're a great guy great",
    "start": "974160",
    "end": "976199"
  },
  {
    "text": "guy Greg everybody give great guy Greg",
    "start": "976199",
    "end": "978540"
  },
  {
    "text": "big claps everybody great guy",
    "start": "978540",
    "end": "981240"
  },
  {
    "text": "the name",
    "start": "981240",
    "end": "982560"
  },
  {
    "text": "is I really do love leptos and it is",
    "start": "982560",
    "end": "984959"
  },
  {
    "text": "solely the reason why I'm continuing to",
    "start": "984959",
    "end": "986639"
  },
  {
    "text": "use rust no matter what I think I would",
    "start": "986639",
    "end": "989220"
  },
  {
    "text": "switch to oh camel and use o camel for",
    "start": "989220",
    "end": "991440"
  },
  {
    "text": "my back ends but at this point I still",
    "start": "991440",
    "end": "993060"
  },
  {
    "text": "use rust because of leptos because",
    "start": "993060",
    "end": "994980"
  },
  {
    "text": "leptos is that amazing again",
    "start": "994980",
    "end": "998779"
  }
]