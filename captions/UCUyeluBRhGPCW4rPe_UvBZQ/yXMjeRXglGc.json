[
  {
    "text": "i vibed so hard and got so far but in",
    "start": "80",
    "end": "2720"
  },
  {
    "text": "the end I still can't merge the [ __ ]",
    "start": "2720",
    "end": "5560"
  },
  {
    "text": "PR thanks Randall but we're going to",
    "start": "5560",
    "end": "8639"
  },
  {
    "text": "look at Go okay go has a How much do you",
    "start": "8639",
    "end": "12160"
  },
  {
    "text": "want to bet that I'm going to disagree",
    "start": "12160",
    "end": "13840"
  },
  {
    "text": "with this",
    "start": "13840",
    "end": "14839"
  },
  {
    "text": "video what What do you think is like the",
    "start": "14839",
    "end": "17600"
  },
  {
    "text": "the the the likelihood that I disagree",
    "start": "17600",
    "end": "20080"
  },
  {
    "text": "with it and what are the good parts none",
    "start": "20080",
    "end": "21920"
  },
  {
    "text": "okay you'll shut your dirty mouth",
    "start": "21920",
    "end": "23279"
  },
  {
    "text": "there's plenty of good parts to go okay",
    "start": "23279",
    "end": "25439"
  },
  {
    "text": "but let's find out what are the bad",
    "start": "25439",
    "end": "26800"
  },
  {
    "text": "parts i swear to all that is nice and",
    "start": "26800",
    "end": "30240"
  },
  {
    "text": "pretty in my life if I hear what if or",
    "start": "30240",
    "end": "32719"
  },
  {
    "text": "does not equal nil I'm going to just",
    "start": "32719",
    "end": "34399"
  },
  {
    "text": "jump kick throat chop this guy same time",
    "start": "34399",
    "end": "37040"
  },
  {
    "text": "okay very hard to do especially since",
    "start": "37040",
    "end": "39440"
  },
  {
    "text": "there a lot of stretching goes on in",
    "start": "39440",
    "end": "40800"
  },
  {
    "text": "that move go has a lot going for it it",
    "start": "40800",
    "end": "43520"
  },
  {
    "text": "is developed by some of the most",
    "start": "43520",
    "end": "44879"
  },
  {
    "text": "prolific software developers in the",
    "start": "44879",
    "end": "46559"
  },
  {
    "text": "world it constantly ranks high in",
    "start": "46559",
    "end": "48399"
  },
  {
    "text": "various developers by the way out of all",
    "start": "48399",
    "end": "50160"
  },
  {
    "text": "people in this list it's like I",
    "start": "50160",
    "end": "51520"
  },
  {
    "text": "definitely know this guy i definitely",
    "start": "51520",
    "end": "52879"
  },
  {
    "text": "know this guy who's this guy poor poor",
    "start": "52879",
    "end": "55360"
  },
  {
    "text": "what's his name robert I have no idea",
    "start": "55360",
    "end": "57600"
  },
  {
    "text": "who Robert is poor fella constantly",
    "start": "57600",
    "end": "59440"
  },
  {
    "text": "ranks high in various developer surveys",
    "start": "59440",
    "end": "61440"
  },
  {
    "text": "and it is a darling of the tech",
    "start": "61440",
    "end": "62960"
  },
  {
    "text": "community on top of that it enjoys some",
    "start": "62960",
    "end": "65280"
  },
  {
    "text": "of the best publicity thanks to the",
    "start": "65280",
    "end": "66960"
  },
  {
    "text": "large companies one to one if go is bad",
    "start": "66960",
    "end": "70880"
  },
  {
    "text": "does that mean that come is good",
    "start": "70880",
    "end": "75159"
  },
  {
    "text": "i got to turn I got to turn off TTS",
    "start": "81680",
    "end": "83920"
  },
  {
    "text": "that's what you know that's that's what",
    "start": "83920",
    "end": "85439"
  },
  {
    "text": "I got to do right now i got to turn off",
    "start": "85439",
    "end": "87439"
  },
  {
    "text": "TTS immediately successful projects who",
    "start": "87439",
    "end": "90080"
  },
  {
    "text": "are actively using it just Is that",
    "start": "90080",
    "end": "92560"
  },
  {
    "text": "Netflix by the way is that Netflix by",
    "start": "92560",
    "end": "94560"
  },
  {
    "text": "the way this shirt is literally like 12",
    "start": "94560",
    "end": "96960"
  },
  {
    "text": "years old all right anyways recently for",
    "start": "96960",
    "end": "100640"
  },
  {
    "text": "instance the TypeScript team announced",
    "start": "100640",
    "end": "102560"
  },
  {
    "text": "that they're porting their compiler and",
    "start": "102560",
    "end": "104320"
  },
  {
    "text": "tool set to Go in an attempt to speed up",
    "start": "104320",
    "end": "106560"
  },
  {
    "text": "perform weird you know it's kind of",
    "start": "106560",
    "end": "108799"
  },
  {
    "text": "weird that TypeScript team would choose",
    "start": "108799",
    "end": "111119"
  },
  {
    "text": "Go i mean I thought everyone choose Rust",
    "start": "111119",
    "end": "113119"
  },
  {
    "text": "for this by the way Dr is actually a",
    "start": "113119",
    "end": "114479"
  },
  {
    "text": "pretty good language when it comes to",
    "start": "114479",
    "end": "115600"
  },
  {
    "text": "compilers like there's a lot of benefits",
    "start": "115600",
    "end": "117200"
  },
  {
    "text": "obviously to use Rust it's pretty dang",
    "start": "117200",
    "end": "119280"
  },
  {
    "text": "quick but jeez why why would you use Go",
    "start": "119280",
    "end": "122000"
  },
  {
    "text": "oh wait are you telling me that it's",
    "start": "122000",
    "end": "123600"
  },
  {
    "text": "easy to make things in Go oh is that why",
    "start": "123600",
    "end": "126240"
  },
  {
    "text": "performance and simplify their build",
    "start": "126240",
    "end": "127920"
  },
  {
    "text": "pipeline that's no small endorsement",
    "start": "127920",
    "end": "130319"
  },
  {
    "text": "when a language created by Microsoft",
    "start": "130319",
    "end": "132239"
  },
  {
    "text": "engineers starts leaning on Go to",
    "start": "132239",
    "end": "134080"
  },
  {
    "text": "improve its tooling and the resulting",
    "start": "134080",
    "end": "135920"
  },
  {
    "text": "performance is magnitudes better than",
    "start": "135920",
    "end": "137840"
  },
  {
    "text": "before you know Go's doing something",
    "start": "137840",
    "end": "139599"
  },
  {
    "text": "right can I also just interject for a",
    "start": "139599",
    "end": "142000"
  },
  {
    "text": "second the fact that it's 2025 and the",
    "start": "142000",
    "end": "145520"
  },
  {
    "text": "TypeScript team at Microsoft is finally",
    "start": "145520",
    "end": "148959"
  },
  {
    "text": "writing their compiler or their",
    "start": "148959",
    "end": "151760"
  },
  {
    "text": "transpiler whatever the hell you call",
    "start": "151760",
    "end": "153440"
  },
  {
    "text": "this thing from Typescript into a",
    "start": "153440",
    "end": "156560"
  },
  {
    "text": "language that is not horrifyingly slow",
    "start": "156560",
    "end": "158800"
  },
  {
    "text": "at this activity is shocking it's been",
    "start": "158800",
    "end": "161760"
  },
  {
    "text": "around for like 12 years and TS server",
    "start": "161760",
    "end": "164959"
  },
  {
    "text": "just crashes constantly like the actual",
    "start": "164959",
    "end": "168239"
  },
  {
    "text": "primary function of TS server is to use",
    "start": "168239",
    "end": "171200"
  },
  {
    "text": "all your memory and then crash i am just",
    "start": "171200",
    "end": "173920"
  },
  {
    "text": "shocked it took this long to be like you",
    "start": "173920",
    "end": "176840"
  },
  {
    "text": "know we should just like fix this huh",
    "start": "176840",
    "end": "180239"
  },
  {
    "text": "that like you know would be a good idea",
    "start": "180239",
    "end": "182560"
  },
  {
    "text": "we just fixing this but despite all Go",
    "start": "182560",
    "end": "186159"
  },
  {
    "text": "success it's not all sunshines and",
    "start": "186159",
    "end": "187760"
  },
  {
    "text": "rainbows it might sound surprising but",
    "start": "187760",
    "end": "190159"
  },
  {
    "text": "while Go is an amazing language it also",
    "start": "190159",
    "end": "192239"
  },
  {
    "text": "has its bad parts and I think everybody",
    "start": "192239",
    "end": "194480"
  },
  {
    "text": "who plans to learn or use Go in their",
    "start": "194480",
    "end": "196560"
  },
  {
    "text": "next project should be aware of this",
    "start": "196560",
    "end": "198159"
  },
  {
    "text": "caveat you know the worst part about Go",
    "start": "198159",
    "end": "200480"
  },
  {
    "text": "is that channels feel really nice to use",
    "start": "200480",
    "end": "203360"
  },
  {
    "text": "and then you overuse them there's like",
    "start": "203360",
    "end": "205599"
  },
  {
    "text": "almost very few uses of channels you",
    "start": "205599",
    "end": "208480"
  },
  {
    "text": "need just pretty much don't use them",
    "start": "208480",
    "end": "210239"
  },
  {
    "text": "unless if it's like really really needed",
    "start": "210239",
    "end": "212239"
  },
  {
    "text": "and then all then all a sudden it's easy",
    "start": "212239",
    "end": "214480"
  },
  {
    "text": "cats for a bit of context I'm a software",
    "start": "214480",
    "end": "216879"
  },
  {
    "text": "developer with more than 15 years of",
    "start": "216879",
    "end": "218720"
  },
  {
    "text": "experience and during this time I worked",
    "start": "218720",
    "end": "220879"
  },
  {
    "text": "mainly with Java Cotlin and Typescript",
    "start": "220879",
    "end": "223360"
  },
  {
    "text": "for the past year I decided to",
    "start": "223360",
    "end": "225040"
  },
  {
    "text": "transition to Go in all my personal",
    "start": "225040",
    "end": "226959"
  },
  {
    "text": "projects for the reasons we all know by",
    "start": "226959",
    "end": "229040"
  },
  {
    "text": "now go is simple fast efficient it has",
    "start": "229040",
    "end": "231680"
  },
  {
    "text": "great tooling and it is a breeze to",
    "start": "231680",
    "end": "233440"
  },
  {
    "text": "compile and deploy but after actually",
    "start": "233440",
    "end": "235920"
  },
  {
    "text": "writing Go for a while I realized things",
    "start": "235920",
    "end": "238080"
  },
  {
    "text": "are a lot more nuanced and not",
    "start": "238080",
    "end": "239680"
  },
  {
    "text": "everything lives up to the hype let me",
    "start": "239680",
    "end": "241680"
  },
  {
    "text": "explain this doesn't mean Go is a bad",
    "start": "241680",
    "end": "243840"
  },
  {
    "text": "language however we need to paint the",
    "start": "243840",
    "end": "245920"
  },
  {
    "text": "full picture because just like Go has",
    "start": "245920",
    "end": "247760"
  },
  {
    "text": "some amazing parts it also has sharp",
    "start": "247760",
    "end": "249760"
  },
  {
    "text": "edges that you only discover once you",
    "start": "249760",
    "end": "251840"
  },
  {
    "text": "spend real time building something",
    "start": "251840",
    "end": "253200"
  },
  {
    "text": "non-trivial with it the design decision",
    "start": "253200",
    "end": "255439"
  },
  {
    "text": "i do love that there was recently this",
    "start": "255439",
    "end": "258079"
  },
  {
    "text": "like up in arms everybody's super angry",
    "start": "258079",
    "end": "260239"
  },
  {
    "text": "at Go because they finally decided after",
    "start": "260239",
    "end": "263199"
  },
  {
    "text": "what 12 years to fix the fact that a for",
    "start": "263199",
    "end": "266080"
  },
  {
    "text": "loop was referencing or was keeping the",
    "start": "266080",
    "end": "268800"
  },
  {
    "text": "same variable in the loop over and over",
    "start": "268800",
    "end": "270720"
  },
  {
    "text": "again in like what 1.2 21 they finally",
    "start": "270720",
    "end": "272880"
  },
  {
    "text": "were like \"All right guys fine when you",
    "start": "272880",
    "end": "275120"
  },
  {
    "text": "for loop now we'll stop doing that we'll",
    "start": "275120",
    "end": "278000"
  },
  {
    "text": "create copies of the object so you don't",
    "start": "278000",
    "end": "279600"
  },
  {
    "text": "accidentally mutate everything and you",
    "start": "279600",
    "end": "281360"
  },
  {
    "text": "don't have references that end up",
    "start": "281360",
    "end": "282960"
  },
  {
    "text": "pointing to whatever the last variable",
    "start": "282960",
    "end": "284639"
  },
  {
    "text": "was right it's insane that it took that",
    "start": "284639",
    "end": "286479"
  },
  {
    "text": "long that make go such a powerful tool.\"",
    "start": "286479",
    "end": "289440"
  },
  {
    "text": "Hours of my life yeah I know the way you",
    "start": "289440",
    "end": "291360"
  },
  {
    "text": "write code and then when you finally",
    "start": "291360",
    "end": "292479"
  },
  {
    "text": "make the switch over you also lose hours",
    "start": "292479",
    "end": "294560"
  },
  {
    "text": "of just doing stupid stuff it's",
    "start": "294560",
    "end": "295919"
  },
  {
    "text": "hilarious code especially if you already",
    "start": "295919",
    "end": "298000"
  },
  {
    "text": "have a standard and a set of",
    "start": "298000",
    "end": "299520"
  },
  {
    "text": "expectations based on working with other",
    "start": "299520",
    "end": "301600"
  },
  {
    "text": "languages so here are five things you",
    "start": "301600",
    "end": "303759"
  },
  {
    "text": "really need to know before switching to",
    "start": "303759",
    "end": "305199"
  },
  {
    "text": "Go it was surprising to find out that",
    "start": "305199",
    "end": "307280"
  },
  {
    "text": "based on some Google searches apparently",
    "start": "307280",
    "end": "309360"
  },
  {
    "text": "I'm not the only one noticing these",
    "start": "309360",
    "end": "310880"
  },
  {
    "text": "things one of Go's biggest selling",
    "start": "310880",
    "end": "312800"
  },
  {
    "text": "points is its simplicity to be fair it",
    "start": "312800",
    "end": "315280"
  },
  {
    "text": "really does look simple on the surface",
    "start": "315280",
    "end": "317280"
  },
  {
    "text": "there are few keywords the syntax is",
    "start": "317280",
    "end": "319199"
  },
  {
    "text": "minimal and the official docs go out of",
    "start": "319199",
    "end": "321199"
  },
  {
    "text": "their way to keep the language easy to",
    "start": "321199",
    "end": "322880"
  },
  {
    "text": "learn but once you go beyond the",
    "start": "322880",
    "end": "324800"
  },
  {
    "text": "tutorial",
    "start": "324800",
    "end": "327680"
  },
  {
    "text": "But that's that was pretty good hey I I",
    "start": "328919",
    "end": "333120"
  },
  {
    "text": "don't know maybe I'm a child may maybe",
    "start": "333120",
    "end": "335199"
  },
  {
    "text": "I'm a child you start realizing that go",
    "start": "335199",
    "end": "338400"
  },
  {
    "text": "simplicity is mostly skin deep and it",
    "start": "338400",
    "end": "340720"
  },
  {
    "text": "often comes at the cost of",
    "start": "340720",
    "end": "342039"
  },
  {
    "text": "expressiveness it's the little things we",
    "start": "342039",
    "end": "344479"
  },
  {
    "text": "Isn't that like literally the trade-off",
    "start": "344479",
    "end": "346800"
  },
  {
    "text": "isn't the trade-off of a language that's",
    "start": "346800",
    "end": "348479"
  },
  {
    "text": "super simple is that you're not meant to",
    "start": "348479",
    "end": "350400"
  },
  {
    "text": "express complex states i mean I I I",
    "start": "350400",
    "end": "352800"
  },
  {
    "text": "don't think that this is a negative",
    "start": "352800",
    "end": "354160"
  },
  {
    "text": "thing i think this is like an actual",
    "start": "354160",
    "end": "355840"
  },
  {
    "text": "design principle hey we're going to just",
    "start": "355840",
    "end": "357759"
  },
  {
    "text": "make you use if statements for the most",
    "start": "357759",
    "end": "359120"
  },
  {
    "text": "part that was like the goal was like hey",
    "start": "359120",
    "end": "360720"
  },
  {
    "text": "if statements are pretty good which",
    "start": "360720",
    "end": "362720"
  },
  {
    "text": "start to nag you after a while for",
    "start": "362720",
    "end": "364639"
  },
  {
    "text": "instance even though Go has a while loop",
    "start": "364639",
    "end": "366800"
  },
  {
    "text": "it does not have a while keyword you",
    "start": "366800",
    "end": "368639"
  },
  {
    "text": "just write a for loop and skip the",
    "start": "368639",
    "end": "370479"
  },
  {
    "text": "condition this forced syntax reuse just",
    "start": "370479",
    "end": "372960"
  },
  {
    "text": "for the sake of saving a keyword makes",
    "start": "372960",
    "end": "374880"
  },
  {
    "text": "reading code more difficult than it",
    "start": "374880",
    "end": "376479"
  },
  {
    "text": "needs to be i don't like this point i'm",
    "start": "376479",
    "end": "378639"
  },
  {
    "text": "just fine with that i don't really care",
    "start": "378639",
    "end": "380160"
  },
  {
    "text": "right like this is just like such a I",
    "start": "380160",
    "end": "382319"
  },
  {
    "text": "want to use the term non sequittor but",
    "start": "382319",
    "end": "384639"
  },
  {
    "text": "I'm afraid I don't know what that word",
    "start": "384639",
    "end": "386160"
  },
  {
    "text": "means and I'm gonna sound like a",
    "start": "386160",
    "end": "387520"
  },
  {
    "text": "butthole using it so I'm just uh I'm",
    "start": "387520",
    "end": "390960"
  },
  {
    "text": "just going to say this is a nonsequiter",
    "start": "390960",
    "end": "392960"
  },
  {
    "text": "you know what I mean it's just like a",
    "start": "392960",
    "end": "394400"
  },
  {
    "text": "little bit nonsequiter uh L take so far",
    "start": "394400",
    "end": "397120"
  },
  {
    "text": "uh this is to me this just doesn't",
    "start": "397120",
    "end": "398960"
  },
  {
    "text": "matter i don't care like honestly if",
    "start": "398960",
    "end": "401520"
  },
  {
    "text": "your language doesn't have a dowhile",
    "start": "401520",
    "end": "403680"
  },
  {
    "text": "loop I don't care right they're all the",
    "start": "403680",
    "end": "406000"
  },
  {
    "text": "same after that the same problem extends",
    "start": "406000",
    "end": "409039"
  },
  {
    "text": "to public and private modifiers as well",
    "start": "409039",
    "end": "411120"
  },
  {
    "text": "instead of Okay now that's very",
    "start": "411120",
    "end": "412960"
  },
  {
    "text": "different the obvious answer is this",
    "start": "412960",
    "end": "416400"
  },
  {
    "text": "that everything should be public unless",
    "start": "416400",
    "end": "419440"
  },
  {
    "text": "if it's made private call me wrong here",
    "start": "419440",
    "end": "423120"
  },
  {
    "text": "i think Rust got it wrong yeah I said",
    "start": "423120",
    "end": "425520"
  },
  {
    "text": "that rust got it wrong true like dude",
    "start": "425520",
    "end": "427440"
  },
  {
    "text": "the amount of pubs I Dude the the pubs",
    "start": "427440",
    "end": "429680"
  },
  {
    "text": "per second I used in in Rust was just so",
    "start": "429680",
    "end": "432240"
  },
  {
    "text": "just so frustrating",
    "start": "432240",
    "end": "434840"
  },
  {
    "text": "pub pub pub hey what's that what's that",
    "start": "434840",
    "end": "437599"
  },
  {
    "text": "pub oh yeah we're going to pub that one",
    "start": "437599",
    "end": "438880"
  },
  {
    "text": "hey what's that over there pubbing it",
    "start": "438880",
    "end": "440160"
  },
  {
    "text": "pub that guy pub that guy pub that guy",
    "start": "440160",
    "end": "442639"
  },
  {
    "text": "dude so many pubs of using clear",
    "start": "442639",
    "end": "445280"
  },
  {
    "text": "keywords Go uses capitalization to",
    "start": "445280",
    "end": "447360"
  },
  {
    "text": "determine visibility while this approach",
    "start": "447360",
    "end": "449520"
  },
  {
    "text": "is concise it's also easy to overlook",
    "start": "449520",
    "end": "452000"
  },
  {
    "text": "you want to hear a fun fact about me in",
    "start": "452000",
    "end": "453919"
  },
  {
    "text": "Go I refuse to have a private type as",
    "start": "453919",
    "end": "456639"
  },
  {
    "text": "simple as that the fact that capital",
    "start": "456639",
    "end": "458479"
  },
  {
    "text": "letters are what determines public and",
    "start": "458479",
    "end": "460560"
  },
  {
    "text": "private i literally refuse to have a",
    "start": "460560",
    "end": "462880"
  },
  {
    "text": "private type i'm not No I'm not going to",
    "start": "462880",
    "end": "464639"
  },
  {
    "text": "make a lowercase type that's genuinely a",
    "start": "464639",
    "end": "467120"
  },
  {
    "text": "crime against humanity i think it's",
    "start": "467120",
    "end": "468880"
  },
  {
    "text": "capitalism's fault uh it's just like I I",
    "start": "468880",
    "end": "471520"
  },
  {
    "text": "just refuse like I I will never specify",
    "start": "471520",
    "end": "474400"
  },
  {
    "text": "a lowercase type the end i don't care",
    "start": "474400",
    "end": "476879"
  },
  {
    "text": "how private it is especially when",
    "start": "476879",
    "end": "478879"
  },
  {
    "text": "refactoring change the case of a",
    "start": "478879",
    "end": "480720"
  },
  {
    "text": "function name and you've potentially",
    "start": "480720",
    "end": "482319"
  },
  {
    "text": "broken your entire API without any",
    "start": "482319",
    "end": "484240"
  },
  {
    "text": "compiler warnings and let's be honest",
    "start": "484240",
    "end": "486800"
  },
  {
    "text": "wait what yeah of course you if you if",
    "start": "486800",
    "end": "488479"
  },
  {
    "text": "you what what if you changed your your",
    "start": "488479",
    "end": "491919"
  },
  {
    "text": "the case of your method of course",
    "start": "491919",
    "end": "493680"
  },
  {
    "text": "there's going to be compiler there's",
    "start": "493680",
    "end": "494800"
  },
  {
    "text": "going to be compiler there won't be",
    "start": "494800",
    "end": "495919"
  },
  {
    "text": "compiler warnings there'll be compiler",
    "start": "495919",
    "end": "497280"
  },
  {
    "text": "errors if you reference it por Maria",
    "start": "497280",
    "end": "499280"
  },
  {
    "text": "like it's not that I mean go h is is a",
    "start": "499280",
    "end": "502400"
  },
  {
    "text": "compiled language it's going to be like",
    "start": "502400",
    "end": "503680"
  },
  {
    "text": "dog this this thing doesn't exist like",
    "start": "503680",
    "end": "505440"
  },
  {
    "text": "what are you talking about enums are no",
    "start": "505440",
    "end": "507840"
  },
  {
    "text": "better enum doesn't actually have real",
    "start": "507840",
    "end": "509759"
  },
  {
    "text": "enums just a workaround using const and",
    "start": "509759",
    "end": "512080"
  },
  {
    "text": "iota it feels more like a clever hack",
    "start": "512080",
    "end": "514240"
  },
  {
    "text": "than a proper language feature um I mean",
    "start": "514240",
    "end": "517839"
  },
  {
    "text": "this is like just really simple enums",
    "start": "517839",
    "end": "519680"
  },
  {
    "text": "right these are like sea style enums",
    "start": "519680",
    "end": "521440"
  },
  {
    "text": "it's just a It's just a number these are",
    "start": "521440",
    "end": "523760"
  },
  {
    "text": "just sea style enums like they're",
    "start": "523760",
    "end": "525839"
  },
  {
    "text": "they're I don't like them i like more",
    "start": "525839",
    "end": "527680"
  },
  {
    "text": "complex enums but I don't know no it's",
    "start": "527680",
    "end": "530800"
  },
  {
    "text": "not aren't it's a hack isn't Isn't just",
    "start": "530800",
    "end": "533839"
  },
  {
    "text": "your basic old enums literally a a",
    "start": "533839",
    "end": "536399"
  },
  {
    "text": "number well in fact to be completely",
    "start": "536399",
    "end": "538160"
  },
  {
    "text": "fair no no no yeah these are just like",
    "start": "538160",
    "end": "541120"
  },
  {
    "text": "old old these are just old enums it's",
    "start": "541120",
    "end": "543279"
  },
  {
    "text": "literally the same as cenoms yeah I'm",
    "start": "543279",
    "end": "544800"
  },
  {
    "text": "not crazy dude you guys made me second",
    "start": "544800",
    "end": "546640"
  },
  {
    "text": "guess there for a second i'm like wait a",
    "start": "546640",
    "end": "548080"
  },
  {
    "text": "second do I not know C enums and then I",
    "start": "548080",
    "end": "549920"
  },
  {
    "text": "realized no I'm not the problem the kids",
    "start": "549920",
    "end": "551839"
  },
  {
    "text": "are the problem you guys are the problem",
    "start": "551839",
    "end": "554720"
  },
  {
    "text": "also the word enum and Russ's use of the",
    "start": "554720",
    "end": "557279"
  },
  {
    "text": "word enum is a crime against humanity uh",
    "start": "557279",
    "end": "559519"
  },
  {
    "text": "it's they're they're union types okay",
    "start": "559519",
    "end": "561440"
  },
  {
    "text": "they're tagged union types if we're",
    "start": "561440",
    "end": "562800"
  },
  {
    "text": "going to be fair here um all right just",
    "start": "562800",
    "end": "564720"
  },
  {
    "text": "to just just completely fair i'm not the",
    "start": "564720",
    "end": "566880"
  },
  {
    "text": "problem you're the problem okay uh they",
    "start": "566880",
    "end": "569279"
  },
  {
    "text": "are no worse than [ __ ] [ __ ] are clo uh",
    "start": "569279",
    "end": "571760"
  },
  {
    "text": "are closed I'm pretty sure and go are",
    "start": "571760",
    "end": "573360"
  },
  {
    "text": "open not no not not your standard enums",
    "start": "573360",
    "end": "576399"
  },
  {
    "text": "your standard enoms like you you don't",
    "start": "576399",
    "end": "578160"
  },
  {
    "text": "have to define them as that specific",
    "start": "578160",
    "end": "579600"
  },
  {
    "text": "type you can you can just pass in",
    "start": "579600",
    "end": "581279"
  },
  {
    "text": "anything like that's always been the big",
    "start": "581279",
    "end": "582560"
  },
  {
    "text": "complaint about enums is that you can",
    "start": "582560",
    "end": "584080"
  },
  {
    "text": "just like oh your enims are one two and",
    "start": "584080",
    "end": "586240"
  },
  {
    "text": "three like red blue and green and then",
    "start": "586240",
    "end": "588000"
  },
  {
    "text": "you just pass in 69 and see is like",
    "start": "588000",
    "end": "590959"
  },
  {
    "text": "that's an int right i'm not saying",
    "start": "590959",
    "end": "593200"
  },
  {
    "text": "they're good i don't like those enums i",
    "start": "593200",
    "end": "595200"
  },
  {
    "text": "like better enums i'm on your team i'm",
    "start": "595200",
    "end": "596959"
  },
  {
    "text": "on team better enums right also I don't",
    "start": "596959",
    "end": "599040"
  },
  {
    "text": "think switch like I I don't think these",
    "start": "599040",
    "end": "601120"
  },
  {
    "text": "switch statements are bad there's no",
    "start": "601120",
    "end": "603279"
  },
  {
    "text": "type safety no grouping no scoping and",
    "start": "603279",
    "end": "606000"
  },
  {
    "text": "nothing stopping you from assigning any",
    "start": "606000",
    "end": "607680"
  },
  {
    "text": "arbitrary value to what's supposed to be",
    "start": "607680",
    "end": "609600"
  },
  {
    "text": "a well-defined enum it's like go wanted",
    "start": "609600",
    "end": "612000"
  },
  {
    "text": "to look simple and minimalist at all",
    "start": "612000",
    "end": "613680"
  },
  {
    "text": "costs even when this means hiding",
    "start": "613680",
    "end": "615440"
  },
  {
    "text": "complexity instead of eliminating it i I",
    "start": "615440",
    "end": "618399"
  },
  {
    "text": "just in my head what I think is that",
    "start": "618399",
    "end": "620399"
  },
  {
    "text": "people who were really excellent at C",
    "start": "620399",
    "end": "622800"
  },
  {
    "text": "made a language that's easier to use",
    "start": "622800",
    "end": "624560"
  },
  {
    "text": "than C one of Go's more distinctive",
    "start": "624560",
    "end": "626720"
  },
  {
    "text": "features is the ability to return",
    "start": "626720",
    "end": "628480"
  },
  {
    "text": "multiple values from a function at first",
    "start": "628480",
    "end": "630880"
  },
  {
    "text": "this feels elegant especially when",
    "start": "630880",
    "end": "632560"
  },
  {
    "text": "handling errors no exceptions no try",
    "start": "632560",
    "end": "634880"
  },
  {
    "text": "catch blocks and no special error types",
    "start": "634880",
    "end": "637120"
  },
  {
    "text": "you just return the value and the error",
    "start": "637120",
    "end": "638800"
  },
  {
    "text": "and simply move on but this elegance",
    "start": "638800",
    "end": "640880"
  },
  {
    "text": "fades when you need to do anything",
    "start": "640880",
    "end": "642320"
  },
  {
    "text": "sophisticated with these return values",
    "start": "642320",
    "end": "644560"
  },
  {
    "text": "the fundamental issue is that multiple",
    "start": "644560",
    "end": "646800"
  },
  {
    "text": "return values in Go aren't actually",
    "start": "646800",
    "end": "648640"
  },
  {
    "text": "tupils or first class values you can't",
    "start": "648640",
    "end": "650959"
  },
  {
    "text": "store them in a variable and you can't",
    "start": "650959",
    "end": "652720"
  },
  {
    "text": "put them in a slice you can't send them",
    "start": "652720",
    "end": "654880"
  },
  {
    "text": "through a channel and you can't abstract",
    "start": "654880",
    "end": "656720"
  },
  {
    "text": "over them with generics this seemingly",
    "start": "656720",
    "end": "659120"
  },
  {
    "text": "minor limitation cascades into",
    "start": "659120",
    "end": "660959"
  },
  {
    "text": "significant verbosity throughout your",
    "start": "660959",
    "end": "662640"
  },
  {
    "text": "codebase let's consider the common",
    "start": "662640",
    "end": "664720"
  },
  {
    "text": "scenario i I could see why it'd be nice",
    "start": "664720",
    "end": "666800"
  },
  {
    "text": "to be able I I do wish there was like an",
    "start": "666800",
    "end": "668640"
  },
  {
    "text": "easy way to do channels with just like",
    "start": "668640",
    "end": "670480"
  },
  {
    "text": "here's my list of values right like that",
    "start": "670480",
    "end": "672399"
  },
  {
    "text": "that would be sweet i would like that i",
    "start": "672399",
    "end": "674800"
  },
  {
    "text": "I fair like that's fair by the way",
    "start": "674800",
    "end": "678079"
  },
  {
    "text": "that's a fair one uh being able to put",
    "start": "678079",
    "end": "679839"
  },
  {
    "text": "it into a list or a slice i get that",
    "start": "679839",
    "end": "681519"
  },
  {
    "text": "that'd be nice fair fair and factual of",
    "start": "681519",
    "end": "684000"
  },
  {
    "text": "processing multiple items in parallel",
    "start": "684000",
    "end": "685920"
  },
  {
    "text": "and collecting all results with their",
    "start": "685920",
    "end": "687680"
  },
  {
    "text": "potential errors in languages with",
    "start": "687680",
    "end": "689680"
  },
  {
    "text": "proper tpples you'd simply collect the",
    "start": "689680",
    "end": "691760"
  },
  {
    "text": "result error pairs in Go however you're",
    "start": "691760",
    "end": "694399"
  },
  {
    "text": "forced to create a custom strct type",
    "start": "694399",
    "end": "696320"
  },
  {
    "text": "just to package these values together",
    "start": "696320",
    "end": "698160"
  },
  {
    "text": "the unnecessary boilerplate code is what",
    "start": "698160",
    "end": "700399"
  },
  {
    "text": "made me run away from Java in the first",
    "start": "700399",
    "end": "702240"
  },
  {
    "text": "place i was simply sick of the",
    "start": "702240",
    "end": "704079"
  },
  {
    "text": "neverending POJO and the verbosity this",
    "start": "704079",
    "end": "706800"
  },
  {
    "text": "might seem minor if you're building",
    "start": "706800",
    "end": "708399"
  },
  {
    "text": "simple applications but as your codebase",
    "start": "708399",
    "end": "710640"
  },
  {
    "text": "grows the verbosity compounds you'll",
    "start": "710640",
    "end": "713040"
  },
  {
    "text": "find yourself creating countless small",
    "start": "713040",
    "end": "714720"
  },
  {
    "text": "structures just to bundle related values",
    "start": "714720",
    "end": "716720"
  },
  {
    "text": "together adding ceremony that distracts",
    "start": "716720",
    "end": "718880"
  },
  {
    "text": "from your actual logic that that that",
    "start": "718880",
    "end": "721600"
  },
  {
    "text": "Okay actually that's that's a pretty",
    "start": "721600",
    "end": "723600"
  },
  {
    "text": "well thought through one okay I would",
    "start": "723600",
    "end": "726560"
  },
  {
    "text": "say that that that was actually a pretty",
    "start": "726560",
    "end": "728000"
  },
  {
    "text": "well thought through argument but I",
    "start": "728000",
    "end": "729760"
  },
  {
    "text": "think that the framing of it as multiple",
    "start": "729760",
    "end": "731440"
  },
  {
    "text": "return values is not that multiple",
    "start": "731440",
    "end": "733360"
  },
  {
    "text": "return values are bad i like multiple",
    "start": "733360",
    "end": "735519"
  },
  {
    "text": "return values i like I'm glad that he",
    "start": "735519",
    "end": "737519"
  },
  {
    "text": "didn't say if error does not equal nil",
    "start": "737519",
    "end": "739680"
  },
  {
    "text": "is a big problem i think that that's",
    "start": "739680",
    "end": "741120"
  },
  {
    "text": "great uh bro never heard of error group",
    "start": "741120",
    "end": "743440"
  },
  {
    "text": "yeah i mean obviously error group can",
    "start": "743440",
    "end": "745040"
  },
  {
    "text": "can work here um either way that's not",
    "start": "745040",
    "end": "748160"
  },
  {
    "text": "that's not quite I mean it's it only",
    "start": "748160",
    "end": "750639"
  },
  {
    "text": "sort of works here like just being able",
    "start": "750639",
    "end": "752240"
  },
  {
    "text": "to use it in a channel right right being",
    "start": "752240",
    "end": "754320"
  },
  {
    "text": "able to use this in a channel would be",
    "start": "754320",
    "end": "755920"
  },
  {
    "text": "super fantastic right just to be able to",
    "start": "755920",
    "end": "757600"
  },
  {
    "text": "be like \"Hey I want to shove through",
    "start": "757600",
    "end": "759200"
  },
  {
    "text": "this channel some sort of value plus an",
    "start": "759200",
    "end": "761760"
  },
  {
    "text": "error.\" Right like that would be nice",
    "start": "761760",
    "end": "763519"
  },
  {
    "text": "right so far apart from edoms everything",
    "start": "763519",
    "end": "765440"
  },
  {
    "text": "listed here is bad is exactly why I like",
    "start": "765440",
    "end": "767120"
  },
  {
    "text": "go i would like a little bit better",
    "start": "767120",
    "end": "769040"
  },
  {
    "text": "handling of multiple uh multiple values",
    "start": "769040",
    "end": "771519"
  },
  {
    "text": "like I I could understand why that's",
    "start": "771519",
    "end": "773120"
  },
  {
    "text": "good i think that that that section was",
    "start": "773120",
    "end": "775279"
  },
  {
    "text": "pretty well formulated i do find myself",
    "start": "775279",
    "end": "777040"
  },
  {
    "text": "making a bunch of like little strrus",
    "start": "777040",
    "end": "778880"
  },
  {
    "text": "here and there but it's also super super",
    "start": "778880",
    "end": "781200"
  },
  {
    "text": "super super simple in Go so it's like it",
    "start": "781200",
    "end": "784320"
  },
  {
    "text": "doesn't necessarily bother me those",
    "start": "784320",
    "end": "785920"
  },
  {
    "text": "error handling is probably one of the I",
    "start": "785920",
    "end": "788160"
  },
  {
    "text": "said if he does this one I'm going to",
    "start": "788160",
    "end": "789600"
  },
  {
    "text": "hate him right this is not a good",
    "start": "789600",
    "end": "791279"
  },
  {
    "text": "argument most common complaints whenever",
    "start": "791279",
    "end": "793600"
  },
  {
    "text": "developers are first exposed to the",
    "start": "793600",
    "end": "795360"
  },
  {
    "text": "language and let's be honest managing",
    "start": "795360",
    "end": "797839"
  },
  {
    "text": "errors in Go is extremely verbose the",
    "start": "797839",
    "end": "800320"
  },
  {
    "text": "chances are you'll write the same four",
    "start": "800320",
    "end": "802000"
  },
  {
    "text": "lines of code over and over and this",
    "start": "802000",
    "end": "804480"
  },
  {
    "text": "first off this does not bother me i just",
    "start": "804480",
    "end": "806399"
  },
  {
    "text": "want I just want to throw I just want I",
    "start": "806399",
    "end": "808079"
  },
  {
    "text": "just want to say this this does not",
    "start": "808079",
    "end": "809440"
  },
  {
    "text": "bother me i like explicit error handling",
    "start": "809440",
    "end": "812399"
  },
  {
    "text": "uh I'm actually less fan of a question",
    "start": "812399",
    "end": "814399"
  },
  {
    "text": "of of question mark code i actually",
    "start": "814399",
    "end": "816480"
  },
  {
    "text": "don't necessarily Oh don't look at that",
    "start": "816480",
    "end": "818720"
  },
  {
    "text": "i I actually don't really like that",
    "start": "818720",
    "end": "820639"
  },
  {
    "text": "about Rust and the only reason why I",
    "start": "820639",
    "end": "822399"
  },
  {
    "text": "don't like it about Rust isn't because",
    "start": "822399",
    "end": "823760"
  },
  {
    "text": "it it's not it's not that I dislike",
    "start": "823760",
    "end": "825959"
  },
  {
    "text": "convenience it's that I just hate the",
    "start": "825959",
    "end": "828560"
  },
  {
    "text": "fact that you'll see something that",
    "start": "828560",
    "end": "829600"
  },
  {
    "text": "looks like a method and then you'll have",
    "start": "829600",
    "end": "831440"
  },
  {
    "text": "like a question mark then you'll have",
    "start": "831440",
    "end": "832959"
  },
  {
    "text": "like await and then you'll have like",
    "start": "832959",
    "end": "835440"
  },
  {
    "text": "another you'll have like another thing",
    "start": "835440",
    "end": "837600"
  },
  {
    "text": "that comes out and then there's like",
    "start": "837600",
    "end": "839360"
  },
  {
    "text": "another question mark and then there's",
    "start": "839360",
    "end": "840959"
  },
  {
    "text": "like another await like if anyone has",
    "start": "840959",
    "end": "842639"
  },
  {
    "text": "ever worked with some of those things",
    "start": "842639",
    "end": "844000"
  },
  {
    "text": "and it's just like man there are so many",
    "start": "844000",
    "end": "846240"
  },
  {
    "text": "things going on in this statement it's",
    "start": "846240",
    "end": "848399"
  },
  {
    "text": "such a turse statement and so",
    "start": "848399",
    "end": "852360"
  },
  {
    "text": "many so much of this is just difficult",
    "start": "852360",
    "end": "856639"
  },
  {
    "text": "right i have always hated that explicit",
    "start": "856639",
    "end": "858639"
  },
  {
    "text": "I I think yes there is um there is this",
    "start": "858639",
    "end": "862240"
  },
  {
    "text": "yes this is an 8 equals d i got a good",
    "start": "862240",
    "end": "864240"
  },
  {
    "text": "joke that I've been kind of working on",
    "start": "864240",
    "end": "866519"
  },
  {
    "text": "okay yeah I got a good joke going on",
    "start": "866519",
    "end": "868800"
  },
  {
    "text": "there you have a choice though in Rust",
    "start": "868800",
    "end": "870800"
  },
  {
    "text": "you do have a choice but the the reality",
    "start": "870800",
    "end": "873040"
  },
  {
    "text": "is is that 99% of error handling feels",
    "start": "873040",
    "end": "875680"
  },
  {
    "text": "like it's just lazily handled and just",
    "start": "875680",
    "end": "877519"
  },
  {
    "text": "tossed up right and I just find that",
    "start": "877519",
    "end": "879440"
  },
  {
    "text": "there's a lot there's there's a lot of",
    "start": "879440",
    "end": "881519"
  },
  {
    "text": "behavior mixed in these lines so when I",
    "start": "881519",
    "end": "883600"
  },
  {
    "text": "glaze over something I don't like to see",
    "start": "883600",
    "end": "885519"
  },
  {
    "text": "like I don't want to see 90 operations",
    "start": "885519",
    "end": "889279"
  },
  {
    "text": "right i find that to be very um it's",
    "start": "889279",
    "end": "891440"
  },
  {
    "text": "it's it's a lot in your head to hold",
    "start": "891440",
    "end": "893839"
  },
  {
    "text": "into place over",
    "start": "893839",
    "end": "896279"
  },
  {
    "text": "again error handling and languages good",
    "start": "896279",
    "end": "899839"
  },
  {
    "text": "software is predictable and safe so",
    "start": "899839",
    "end": "902079"
  },
  {
    "text": "having to deal with errors explicitly",
    "start": "902079",
    "end": "904160"
  },
  {
    "text": "did he just say good software is",
    "start": "904160",
    "end": "905680"
  },
  {
    "text": "predictable i could predict these errors",
    "start": "905680",
    "end": "907760"
  },
  {
    "text": "are coming out right forces you to",
    "start": "907760",
    "end": "909839"
  },
  {
    "text": "acknowledge when something can go wrong",
    "start": "909839",
    "end": "911519"
  },
  {
    "text": "and handle it right away but there is a",
    "start": "911519",
    "end": "913680"
  },
  {
    "text": "big difference between being explicit",
    "start": "913680",
    "end": "915440"
  },
  {
    "text": "and being repetitive the language lacks",
    "start": "915440",
    "end": "917839"
  },
  {
    "text": "even the simplest tools to streamline",
    "start": "917839",
    "end": "919600"
  },
  {
    "text": "error handling rob Pike one of I I I I",
    "start": "919600",
    "end": "923360"
  },
  {
    "text": "don't currently consider that a really",
    "start": "923360",
    "end": "925680"
  },
  {
    "text": "big problem i have yet to really",
    "start": "925680",
    "end": "928160"
  },
  {
    "text": "consider that a big problem for me i",
    "start": "928160",
    "end": "930000"
  },
  {
    "text": "don't know i guess I just don't see it i",
    "start": "930000",
    "end": "931519"
  },
  {
    "text": "just don't see it as a I I just really",
    "start": "931519",
    "end": "933760"
  },
  {
    "text": "don't see it as a huge problem ghost",
    "start": "933760",
    "end": "935839"
  },
  {
    "text": "creators defended this choice he argued",
    "start": "935839",
    "end": "938399"
  },
  {
    "text": "that explicit repetitive error checks",
    "start": "938399",
    "end": "940560"
  },
  {
    "text": "improve readability and keep control",
    "start": "940560",
    "end": "942480"
  },
  {
    "text": "flow obvious so in a way it all boils",
    "start": "942480",
    "end": "945199"
  },
  {
    "text": "down to the coding style you prefer but",
    "start": "945199",
    "end": "947440"
  },
  {
    "text": "let's be honest people are comparing",
    "start": "947440",
    "end": "949360"
  },
  {
    "text": "Go's error handling with solutions",
    "start": "949360",
    "end": "951040"
  },
  {
    "text": "offered by Rust for instance and they do",
    "start": "951040",
    "end": "953040"
  },
  {
    "text": "have a point there were efforts to",
    "start": "953040",
    "end": "954800"
  },
  {
    "text": "improve the situation and we even had a",
    "start": "954800",
    "end": "956959"
  },
  {
    "text": "proposal to add a built-in try mechanism",
    "start": "956959",
    "end": "959120"
  },
  {
    "text": "in an attempt to simplify error handling",
    "start": "959120",
    "end": "961279"
  },
  {
    "text": "but it was shut down because the",
    "start": "961279",
    "end": "962800"
  },
  {
    "text": "community feared it would ruin Go",
    "start": "962800",
    "end": "964639"
  },
  {
    "text": "simplicity this is one of those design",
    "start": "964639",
    "end": "966560"
  },
  {
    "text": "decisions which you either love or hate",
    "start": "966560",
    "end": "969199"
  },
  {
    "text": "go's inheritance approach faces the same",
    "start": "969199",
    "end": "971279"
  },
  {
    "text": "issues since its creators argue strongly",
    "start": "971279",
    "end": "973600"
  },
  {
    "text": "against the complexity of languages like",
    "start": "973600",
    "end": "975600"
  },
  {
    "text": "Java in their view yeah I I agree i",
    "start": "975600",
    "end": "978480"
  },
  {
    "text": "don't want inheritance i'm okay with",
    "start": "978480",
    "end": "980399"
  },
  {
    "text": "this 75% of code being air um okay so I",
    "start": "980399",
    "end": "984240"
  },
  {
    "text": "can always tell when someone has never",
    "start": "984240",
    "end": "985440"
  },
  {
    "text": "written Go because of this like I can",
    "start": "985440",
    "end": "987440"
  },
  {
    "text": "just tell like have you written anything",
    "start": "987440",
    "end": "989279"
  },
  {
    "text": "complex in your life or do you literally",
    "start": "989279",
    "end": "991600"
  },
  {
    "text": "just write like two calls out to a",
    "start": "991600",
    "end": "994240"
  },
  {
    "text": "server like you're right if you if you",
    "start": "994240",
    "end": "996480"
  },
  {
    "text": "call something that inherently is",
    "start": "996480",
    "end": "998399"
  },
  {
    "text": "asynchronous is going to fail you're",
    "start": "998399",
    "end": "1000399"
  },
  {
    "text": "going to have to handle errors but if",
    "start": "1000399",
    "end": "1002240"
  },
  {
    "text": "you've written something of any sort of",
    "start": "1002240",
    "end": "1003920"
  },
  {
    "text": "value say like a compression or anything",
    "start": "1003920",
    "end": "1006560"
  },
  {
    "text": "that's complex you're just going to have",
    "start": "1006560",
    "end": "1008560"
  },
  {
    "text": "very little you're just not gonna have",
    "start": "1008560",
    "end": "1010639"
  },
  {
    "text": "that many if errors right it's I make",
    "start": "1010639",
    "end": "1012800"
  },
  {
    "text": "three calls to a server yeah okay then",
    "start": "1012800",
    "end": "1014320"
  },
  {
    "text": "you just haven't written anything",
    "start": "1014320",
    "end": "1015440"
  },
  {
    "text": "complex right that's all that means you",
    "start": "1015440",
    "end": "1018480"
  },
  {
    "text": "inheritance led to fragile tangled code",
    "start": "1018480",
    "end": "1020560"
  },
  {
    "text": "bases as a result Go's official",
    "start": "1020560",
    "end": "1022720"
  },
  {
    "text": "philosophy is to avoid inheritance and",
    "start": "1022720",
    "end": "1024880"
  },
  {
    "text": "favor composition this is a fair point",
    "start": "1024880",
    "end": "1027280"
  },
  {
    "text": "but in running from one problem they",
    "start": "1027280",
    "end": "1029120"
  },
  {
    "text": "might have created another especially",
    "start": "1029120",
    "end": "1030798"
  },
  {
    "text": "for developers coming from stricter",
    "start": "1030799",
    "end": "1032640"
  },
  {
    "text": "backgrounds embedding in Go might trick",
    "start": "1032640",
    "end": "1034798"
  },
  {
    "text": "you into thinking it's inheritance but",
    "start": "1034799",
    "end": "1036640"
  },
  {
    "text": "it is actually a different beast",
    "start": "1036640",
    "end": "1038199"
  },
  {
    "text": "entirely approach makes Go code simpler",
    "start": "1038199",
    "end": "1040880"
  },
  {
    "text": "and more predictable in many ways but it",
    "start": "1040880",
    "end": "1042959"
  },
  {
    "text": "does mean that developers coming from",
    "start": "1042959",
    "end": "1044720"
  },
  {
    "text": "traditional OOP languages need to adjust",
    "start": "1044720",
    "end": "1046959"
  },
  {
    "text": "their thinking go isn't trying to be a",
    "start": "1046959",
    "end": "1049120"
  },
  {
    "text": "partial OOP language i just never I I",
    "start": "1049120",
    "end": "1051200"
  },
  {
    "text": "just don't think embedding is good just",
    "start": "1051200",
    "end": "1052480"
  },
  {
    "text": "generally speaking every time I've used",
    "start": "1052480",
    "end": "1054559"
  },
  {
    "text": "it I think I've just generally regretted",
    "start": "1054559",
    "end": "1056880"
  },
  {
    "text": "using it that's all i you know good idea",
    "start": "1056880",
    "end": "1060080"
  },
  {
    "text": "questionable implementation yeah it's",
    "start": "1060080",
    "end": "1061840"
  },
  {
    "text": "offering a different approach to code",
    "start": "1061840",
    "end": "1063440"
  },
  {
    "text": "organization altogether trading some of",
    "start": "1063440",
    "end": "1065440"
  },
  {
    "text": "the flexibility of inheritance for",
    "start": "1065440",
    "end": "1067360"
  },
  {
    "text": "clarity and simplicity go was initially",
    "start": "1067360",
    "end": "1069919"
  },
  {
    "text": "designed without generics and that",
    "start": "1069919",
    "end": "1071600"
  },
  {
    "text": "decision did limit the language for over",
    "start": "1071600",
    "end": "1073280"
  },
  {
    "text": "a decade generics were finally",
    "start": "1073280",
    "end": "1075120"
  },
  {
    "text": "introduced in 2022 but with a design",
    "start": "1075120",
    "end": "1077600"
  },
  {
    "text": "that maintains Go's philosophy of",
    "start": "1077600",
    "end": "1079280"
  },
  {
    "text": "simplicity over flexibility generics are",
    "start": "1079280",
    "end": "1081760"
  },
  {
    "text": "the only thing that has ever been",
    "start": "1081760",
    "end": "1083120"
  },
  {
    "text": "implemented in Go that truly nobody",
    "start": "1083120",
    "end": "1086640"
  },
  {
    "text": "really got what they wanted out of the",
    "start": "1086640",
    "end": "1088000"
  },
  {
    "text": "deal like there are some things I like",
    "start": "1088000",
    "end": "1089600"
  },
  {
    "text": "about generics i have a couple I there I",
    "start": "1089600",
    "end": "1092000"
  },
  {
    "text": "I like that you can have like a generic",
    "start": "1092000",
    "end": "1094640"
  },
  {
    "text": "uh I have a couple like generic JSON",
    "start": "1094640",
    "end": "1097120"
  },
  {
    "text": "things that are really nice uh I have",
    "start": "1097120",
    "end": "1099520"
  },
  {
    "text": "like because I have these type these",
    "start": "1099520",
    "end": "1101360"
  },
  {
    "text": "typed value I have these boxed values",
    "start": "1101360",
    "end": "1103440"
  },
  {
    "text": "that are going to be some of them are",
    "start": "1103440",
    "end": "1104559"
  },
  {
    "text": "going to be JSON stringified and so it",
    "start": "1104559",
    "end": "1106240"
  },
  {
    "text": "can do this JSON stringific or it can do",
    "start": "1106240",
    "end": "1109280"
  },
  {
    "text": "this JSON parsing via a type value and",
    "start": "1109280",
    "end": "1112400"
  },
  {
    "text": "then if it doesn't get the specific type",
    "start": "1112400",
    "end": "1113760"
  },
  {
    "text": "out it just returns the error and it can",
    "start": "1113760",
    "end": "1115440"
  },
  {
    "text": "do all it does like a it has some like",
    "start": "1115440",
    "end": "1117200"
  },
  {
    "text": "nice handling and all that and it uses",
    "start": "1117200",
    "end": "1119400"
  },
  {
    "text": "generics but you can't use them on",
    "start": "1119400",
    "end": "1121600"
  },
  {
    "text": "method receivers in a way that I like",
    "start": "1121600",
    "end": "1124080"
  },
  {
    "text": "while you can now create generic types",
    "start": "1124080",
    "end": "1125760"
  },
  {
    "text": "and functions there are still",
    "start": "1125760",
    "end": "1127200"
  },
  {
    "text": "limitations you can define find methods",
    "start": "1127200",
    "end": "1129200"
  },
  {
    "text": "on generic types but you can't add",
    "start": "1129200",
    "end": "1130960"
  },
  {
    "text": "generic methods to non-generic types go",
    "start": "1130960",
    "end": "1133600"
  },
  {
    "text": "doesn't support function or operator",
    "start": "1133600",
    "end": "1135280"
  },
  {
    "text": "overloading and its type constraint",
    "start": "1135280",
    "end": "1137280"
  },
  {
    "text": "system while powerful enough for many",
    "start": "1137280",
    "end": "1139200"
  },
  {
    "text": "i'm okay without uh I'm okay with no",
    "start": "1139200",
    "end": "1140960"
  },
  {
    "text": "operator overloading right i'm okay with",
    "start": "1140960",
    "end": "1143919"
  },
  {
    "text": "that rigid type system just throw an",
    "start": "1143919",
    "end": "1145840"
  },
  {
    "text": "interface behind it i mean that's",
    "start": "1145840",
    "end": "1148160"
  },
  {
    "text": "doesn't provide the full expressiveness",
    "start": "1148160",
    "end": "1149760"
  },
  {
    "text": "of traits or type classes found in other",
    "start": "1149760",
    "end": "1152039"
  },
  {
    "text": "languages this aligns with Go's",
    "start": "1152039",
    "end": "1153919"
  },
  {
    "text": "fundamental philosophy of prioritizing",
    "start": "1153919",
    "end": "1155919"
  },
  {
    "text": "clarity and readability over",
    "start": "1155919",
    "end": "1157360"
  },
  {
    "text": "expressiveness the language encourages",
    "start": "1157360",
    "end": "1159520"
  },
  {
    "text": "explicit concrete code over complex",
    "start": "1159520",
    "end": "1161720"
  },
  {
    "text": "abstractions this approach has benefits",
    "start": "1161720",
    "end": "1164080"
  },
  {
    "text": "for maintainability and onboarding new",
    "start": "1164080",
    "end": "1166160"
  },
  {
    "text": "team members but it can lead to more",
    "start": "1166160",
    "end": "1168000"
  },
  {
    "text": "verbose code in large systems where more",
    "start": "1168000",
    "end": "1170160"
  },
  {
    "text": "sophisticated abstraction mechanisms",
    "start": "1170160",
    "end": "1172160"
  },
  {
    "text": "might reduce duplication so at the end",
    "start": "1172160",
    "end": "1174559"
  },
  {
    "text": "of the day it all boils down to",
    "start": "1174559",
    "end": "1176240"
  },
  {
    "text": "expectations yeah i mean but the the",
    "start": "1176240",
    "end": "1178559"
  },
  {
    "text": "more sophisticated your abstractions are",
    "start": "1178559",
    "end": "1180160"
  },
  {
    "text": "the more like time you have to spend",
    "start": "1180160",
    "end": "1181840"
  },
  {
    "text": "thinking about them that's I mean I",
    "start": "1181840",
    "end": "1183600"
  },
  {
    "text": "think that's the whole trade-off is that",
    "start": "1183600",
    "end": "1184880"
  },
  {
    "text": "you can be dumped anywhere in any code",
    "start": "1184880",
    "end": "1186799"
  },
  {
    "text": "in Go codebase and generally speaking",
    "start": "1186799",
    "end": "1189200"
  },
  {
    "text": "you just like read through it top to",
    "start": "1189200",
    "end": "1191280"
  },
  {
    "text": "bottom left to right and you're like",
    "start": "1191280",
    "end": "1192640"
  },
  {
    "text": "okay I see what this is doing right like",
    "start": "1192640",
    "end": "1194480"
  },
  {
    "text": "that's kind of that's supposed to be the",
    "start": "1194480",
    "end": "1195760"
  },
  {
    "text": "thing you don't have to be like okay",
    "start": "1195760",
    "end": "1197120"
  },
  {
    "text": "what does this macro do okay what does",
    "start": "1197120",
    "end": "1199280"
  },
  {
    "text": "this abstraction do you don't have to",
    "start": "1199280",
    "end": "1200720"
  },
  {
    "text": "like play the game of go back up the",
    "start": "1200720",
    "end": "1202240"
  },
  {
    "text": "hill you get to have a much simpler time",
    "start": "1202240",
    "end": "1205520"
  },
  {
    "text": "understanding I think that's the whole",
    "start": "1205520",
    "end": "1206960"
  },
  {
    "text": "trade-off even though it's more",
    "start": "1206960",
    "end": "1209960"
  },
  {
    "text": "develop language with lots of syntactic",
    "start": "1209960",
    "end": "1212400"
  },
  {
    "text": "sugar you will be disappointed but if",
    "start": "1212400",
    "end": "1214799"
  },
  {
    "text": "you're looking for a fast reliable",
    "start": "1214799",
    "end": "1216799"
  },
  {
    "text": "nononsense language that gets out of",
    "start": "1216799",
    "end": "1218559"
  },
  {
    "text": "your way and compiles in milliseconds Go",
    "start": "1218559",
    "end": "1221039"
  },
  {
    "text": "is the right tool for you just go in",
    "start": "1221039",
    "end": "1222880"
  },
  {
    "text": "with your eyes open because there's a",
    "start": "1222880",
    "end": "1224480"
  },
  {
    "text": "huge difference between liking a",
    "start": "1224480",
    "end": "1225919"
  },
  {
    "text": "language after watching some YouTube",
    "start": "1225919",
    "end": "1227520"
  },
  {
    "text": "videos and actually still enjoying it",
    "start": "1227520",
    "end": "1229520"
  },
  {
    "text": "after maintaining a real world project",
    "start": "1229520",
    "end": "1231360"
  },
  {
    "text": "with real users edge cases and deadlines",
    "start": "1231360",
    "end": "1234000"
  },
  {
    "text": "i expect this one might hit a few nerves",
    "start": "1234000",
    "end": "1236080"
  },
  {
    "text": "so please keep it civil in the comments",
    "start": "1236080",
    "end": "1238080"
  },
  {
    "text": "if you like this video you should watch",
    "start": "1238080",
    "end": "1239840"
  },
  {
    "text": "one of these ones next until next time",
    "start": "1239840",
    "end": "1242320"
  },
  {
    "text": "thank you for watching yeah I I I really",
    "start": "1242320",
    "end": "1245919"
  },
  {
    "text": "The only thing I honestly didn't like",
    "start": "1245919",
    "end": "1247360"
  },
  {
    "text": "about is the if the I think there's just",
    "start": "1247360",
    "end": "1249679"
  },
  {
    "text": "like everything else it was fine it was",
    "start": "1249679",
    "end": "1252000"
  },
  {
    "text": "fine the I I do agree with the channels",
    "start": "1252000",
    "end": "1255120"
  },
  {
    "text": "and multiple values i think it's crazy",
    "start": "1255120",
    "end": "1256640"
  },
  {
    "text": "embedded is just kind of out there you",
    "start": "1256640",
    "end": "1259039"
  },
  {
    "text": "know i the problem about honestly the",
    "start": "1259039",
    "end": "1261360"
  },
  {
    "text": "big problem about this video is that",
    "start": "1261360",
    "end": "1262480"
  },
  {
    "text": "they didn't address any things that",
    "start": "1262480",
    "end": "1263679"
  },
  {
    "text": "actually make it go really annoying to",
    "start": "1263679",
    "end": "1265039"
  },
  {
    "text": "use such as like if you want to properly",
    "start": "1265039",
    "end": "1267360"
  },
  {
    "text": "use channels you really need to couple",
    "start": "1267360",
    "end": "1269360"
  },
  {
    "text": "it with context because you can",
    "start": "1269360",
    "end": "1271280"
  },
  {
    "text": "accidentally use a channel in such a way",
    "start": "1271280",
    "end": "1272880"
  },
  {
    "text": "that you just get really bricked",
    "start": "1272880",
    "end": "1274320"
  },
  {
    "text": "experiences because channels are just",
    "start": "1274320",
    "end": "1276240"
  },
  {
    "text": "like they're just not quite that they're",
    "start": "1276240",
    "end": "1278240"
  },
  {
    "text": "just not that great right like they",
    "start": "1278240",
    "end": "1279919"
  },
  {
    "text": "they're just so close to being great but",
    "start": "1279919",
    "end": "1282080"
  },
  {
    "text": "they're just good instead and so then",
    "start": "1282080",
    "end": "1284000"
  },
  {
    "text": "you're just really frustrated with it",
    "start": "1284000",
    "end": "1285679"
  },
  {
    "text": "and so then you have to have like this",
    "start": "1285679",
    "end": "1286960"
  },
  {
    "text": "whole context game playing around and",
    "start": "1286960",
    "end": "1288559"
  },
  {
    "text": "then you have to do this whole like",
    "start": "1288559",
    "end": "1289840"
  },
  {
    "text": "select statement on top of them because",
    "start": "1289840",
    "end": "1291760"
  },
  {
    "text": "of just just crap and checking and it's",
    "start": "1291760",
    "end": "1294960"
  },
  {
    "text": "just like that's annoying like I don't",
    "start": "1294960",
    "end": "1296320"
  },
  {
    "text": "want to have to know if I can't write to",
    "start": "1296320",
    "end": "1298720"
  },
  {
    "text": "a to a channel right like that's just",
    "start": "1298720",
    "end": "1301120"
  },
  {
    "text": "that's just not a great experience i",
    "start": "1301120",
    "end": "1303039"
  },
  {
    "text": "don't want to have to play the game of",
    "start": "1303039",
    "end": "1304640"
  },
  {
    "text": "if you write to this you could be like",
    "start": "1304640",
    "end": "1306880"
  },
  {
    "text": "exploding things and it's just annoying",
    "start": "1306880",
    "end": "1308960"
  },
  {
    "text": "i don't want to have to have that i",
    "start": "1308960",
    "end": "1310159"
  },
  {
    "text": "don't want to have to have a function",
    "start": "1310159",
    "end": "1311039"
  },
  {
    "text": "that I have to go check to see can you",
    "start": "1311039",
    "end": "1312640"
  },
  {
    "text": "even write to it i don't want to have to",
    "start": "1312640",
    "end": "1314640"
  },
  {
    "text": "do a recover call right i just don't",
    "start": "1314640",
    "end": "1316720"
  },
  {
    "text": "want all that stuff i want I want to",
    "start": "1316720",
    "end": "1318799"
  },
  {
    "text": "keep it in a more simple universe you",
    "start": "1318799",
    "end": "1321360"
  },
  {
    "text": "know what I mean a recover call you can",
    "start": "1321360",
    "end": "1323039"
  },
  {
    "text": "panic and recover some certain things uh",
    "start": "1323039",
    "end": "1325520"
  },
  {
    "text": "and if you panic and recover you can",
    "start": "1325520",
    "end": "1327200"
  },
  {
    "text": "kind of come back from like I hate the",
    "start": "1327200",
    "end": "1328880"
  },
  {
    "text": "fact that there is a try catch in go",
    "start": "1328880",
    "end": "1331039"
  },
  {
    "text": "which is panic and recover and then",
    "start": "1331039",
    "end": "1332720"
  },
  {
    "text": "there's also like standard errors",
    "start": "1332720",
    "end": "1335120"
  },
  {
    "text": "because there are some like old there",
    "start": "1335120",
    "end": "1336960"
  },
  {
    "text": "are some things that do panic and",
    "start": "1336960",
    "end": "1338960"
  },
  {
    "text": "recover and it's just like",
    "start": "1338960",
    "end": "1342039"
  },
  {
    "text": "ah",
    "start": "1342039",
    "end": "1343559"
  },
  {
    "text": "right but there's also some ways you",
    "start": "1343559",
    "end": "1345840"
  },
  {
    "text": "can't really you can't really get around",
    "start": "1345840",
    "end": "1348559"
  },
  {
    "text": "it right uh in a web server you can",
    "start": "1348559",
    "end": "1351360"
  },
  {
    "text": "there's things that can go wrong and if",
    "start": "1351360",
    "end": "1353600"
  },
  {
    "text": "you were to write like a proper web",
    "start": "1353600",
    "end": "1355200"
  },
  {
    "text": "server you probably want to wrap all of",
    "start": "1355200",
    "end": "1357440"
  },
  {
    "text": "your handlers in a pan like a panic",
    "start": "1357440",
    "end": "1359840"
  },
  {
    "text": "recover because you want to make sure",
    "start": "1359840",
    "end": "1361840"
  },
  {
    "text": "that if for whatever reason one of the",
    "start": "1361840",
    "end": "1364000"
  },
  {
    "text": "endpoints panics you can still recover",
    "start": "1364000",
    "end": "1366240"
  },
  {
    "text": "and keep your web server running i mean",
    "start": "1366240",
    "end": "1367760"
  },
  {
    "text": "I guess that's more of a philosophy of",
    "start": "1367760",
    "end": "1369200"
  },
  {
    "text": "argument one would argue maybe you do",
    "start": "1369200",
    "end": "1371039"
  },
  {
    "text": "want it to actually go down like maybe",
    "start": "1371039",
    "end": "1372799"
  },
  {
    "text": "you do want it to break and saying \"Hey",
    "start": "1372799",
    "end": "1374400"
  },
  {
    "text": "this is the reason why it broke.\" I",
    "start": "1374400",
    "end": "1375840"
  },
  {
    "text": "guess you could probably uh you could",
    "start": "1375840",
    "end": "1378480"
  },
  {
    "text": "probably make the counter argument i go",
    "start": "1378480",
    "end": "1380559"
  },
  {
    "text": "kind of back and forth on which one I'd",
    "start": "1380559",
    "end": "1382640"
  },
  {
    "text": "prefer i don't know anyways there you go",
    "start": "1382640",
    "end": "1385039"
  },
  {
    "text": "nice i still like Go i still write stuff",
    "start": "1385039",
    "end": "1387280"
  },
  {
    "text": "in Go i still enjoy Go but I will be",
    "start": "1387280",
    "end": "1389760"
  },
  {
    "text": "fair there is there is a um nah 500",
    "start": "1389760",
    "end": "1394640"
  },
  {
    "text": "internal error server does sudoku well",
    "start": "1394640",
    "end": "1396480"
  },
  {
    "text": "that's the that's the thing is you can",
    "start": "1396480",
    "end": "1398159"
  },
  {
    "text": "still internal error without sodokuing",
    "start": "1398159",
    "end": "1401200"
  },
  {
    "text": "you don't need to you don't need to",
    "start": "1401200",
    "end": "1402480"
  },
  {
    "text": "solve a bunch of numbers uh just because",
    "start": "1402480",
    "end": "1404640"
  },
  {
    "text": "you internal error like you can still",
    "start": "1404640",
    "end": "1406080"
  },
  {
    "text": "just be like I handled the error because",
    "start": "1406080",
    "end": "1408000"
  },
  {
    "text": "it's a value we just couldn't proceed",
    "start": "1408000",
    "end": "1411039"
  },
  {
    "text": "it's a 500 uh let's go not finish",
    "start": "1411039",
    "end": "1414799"
  },
  {
    "text": "project now i went and uh but uh so my",
    "start": "1414799",
    "end": "1416799"
  },
  {
    "text": "11 streamer is all in like how I do the",
    "start": "1416799",
    "end": "1419120"
  },
  {
    "text": "voice how I do all the voices and handle",
    "start": "1419120",
    "end": "1420960"
  },
  {
    "text": "Twitch chat and all that that's all done",
    "start": "1420960",
    "end": "1422159"
  },
  {
    "text": "and go but I am strongly considerate I'm",
    "start": "1422159",
    "end": "1426159"
  },
  {
    "text": "strongly considering Elixir like I I I",
    "start": "1426159",
    "end": "1429039"
  },
  {
    "text": "might just take the plunge and just",
    "start": "1429039",
    "end": "1431200"
  },
  {
    "text": "start learning how to write servers with",
    "start": "1431200",
    "end": "1433440"
  },
  {
    "text": "Elixir right that's what I want i hear",
    "start": "1433440",
    "end": "1436840"
  },
  {
    "text": "Elixir is truly the best language and",
    "start": "1436840",
    "end": "1440960"
  },
  {
    "text": "Tee will not stop saying it's the best",
    "start": "1440960",
    "end": "1443600"
  },
  {
    "text": "tj it's really TJ it's really TJ it's",
    "start": "1443600",
    "end": "1446159"
  },
  {
    "text": "not even Ryan Winchester tj just won't",
    "start": "1446159",
    "end": "1448720"
  },
  {
    "text": "stop building things in Elixir i think",
    "start": "1448720",
    "end": "1450559"
  },
  {
    "text": "secretly deep down Tee says he loves",
    "start": "1450559",
    "end": "1454440"
  },
  {
    "text": "Omel but on the inside he's just an",
    "start": "1454440",
    "end": "1456799"
  },
  {
    "text": "elixir boy he tries to pretend like he's",
    "start": "1456799",
    "end": "1458880"
  },
  {
    "text": "a O camel guy on the outside he's an",
    "start": "1458880",
    "end": "1460720"
  },
  {
    "text": "elixir boy on the",
    "start": "1460720",
    "end": "1463520"
  }
]