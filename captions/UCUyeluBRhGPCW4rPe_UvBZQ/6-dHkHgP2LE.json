[
  {
    "text": "please stop using classes in JavaScript",
    "start": "0",
    "end": "3240"
  },
  {
    "text": "okay okay I'll turn off alerts okay I'll",
    "start": "3240",
    "end": "6660"
  },
  {
    "text": "turn them off yeah maybe I forgot maybe",
    "start": "6660",
    "end": "8940"
  },
  {
    "text": "I forgot to turn off alerts I'll turn",
    "start": "8940",
    "end": "10920"
  },
  {
    "text": "them off here's a bunch of JavaScript",
    "start": "10920",
    "end": "12540"
  },
  {
    "text": "that appears to be using jQuery this is",
    "start": "12540",
    "end": "15000"
  },
  {
    "text": "some jQuery is code going on right here",
    "start": "15000",
    "end": "17160"
  },
  {
    "text": "I don't even see any classes in this",
    "start": "17160",
    "end": "19020"
  },
  {
    "text": "aquariusness I also see repetitively",
    "start": "19020",
    "end": "21779"
  },
  {
    "text": "jQuery being invoked with window over",
    "start": "21779",
    "end": "24840"
  },
  {
    "text": "and over and over and over again and",
    "start": "24840",
    "end": "28320"
  },
  {
    "text": "it's like triggering the crap out of me",
    "start": "28320",
    "end": "30060"
  },
  {
    "text": "dude hit him with that dollar window",
    "start": "30060",
    "end": "32040"
  },
  {
    "text": "variable already stop reconstructing",
    "start": "32040",
    "end": "34320"
  },
  {
    "text": "over and over again okay it's an",
    "start": "34320",
    "end": "35940"
  },
  {
    "text": "emotional painful day to see this over",
    "start": "35940",
    "end": "37620"
  },
  {
    "text": "and over again for years oop object",
    "start": "37620",
    "end": "40680"
  },
  {
    "text": "oriented program was the de facto",
    "start": "40680",
    "end": "42540"
  },
  {
    "text": "standard in software engineering the",
    "start": "42540",
    "end": "44760"
  },
  {
    "text": "concept of classes polymorphism which by",
    "start": "44760",
    "end": "47579"
  },
  {
    "text": "the way is also in functional",
    "start": "47579",
    "end": "48539"
  },
  {
    "text": "programming inheritance encapsulation",
    "start": "48539",
    "end": "51360"
  },
  {
    "text": "also in functional programming dominated",
    "start": "51360",
    "end": "53879"
  },
  {
    "text": "and revolutionized uh the development",
    "start": "53879",
    "end": "56219"
  },
  {
    "text": "process by the way classes are also in",
    "start": "56219",
    "end": "57539"
  },
  {
    "text": "functional programming uh do not classes",
    "start": "57539",
    "end": "59820"
  },
  {
    "text": "they're trucks with methods on it",
    "start": "59820",
    "end": "61260"
  },
  {
    "text": "they're different really you're gonna go",
    "start": "61260",
    "end": "62699"
  },
  {
    "text": "with that that's how you want to do this",
    "start": "62699",
    "end": "64440"
  },
  {
    "text": "oh okay sorry it's a struct with the V",
    "start": "64440",
    "end": "66420"
  },
  {
    "text": "table look up for methods all I do is",
    "start": "66420",
    "end": "68340"
  },
  {
    "text": "gosh goodness gracious I got that one",
    "start": "68340",
    "end": "70979"
  },
  {
    "text": "wrong uh but everything has an",
    "start": "70979",
    "end": "72780"
  },
  {
    "text": "expiration date programming paradigms",
    "start": "72780",
    "end": "74880"
  },
  {
    "text": "included in this article I'll talk about",
    "start": "74880",
    "end": "77040"
  },
  {
    "text": "why classes were introduced in the first",
    "start": "77040",
    "end": "78479"
  },
  {
    "text": "place and why why why why why it is a",
    "start": "78479",
    "end": "82140"
  },
  {
    "text": "bad idea to use classes in JavaScript",
    "start": "82140",
    "end": "83700"
  },
  {
    "text": "okay apparently I can't zoom in that",
    "start": "83700",
    "end": "85140"
  },
  {
    "text": "much and what are some of the",
    "start": "85140",
    "end": "86340"
  },
  {
    "text": "Alternatives okay I'm not going to talk",
    "start": "86340",
    "end": "87840"
  },
  {
    "text": "about why oop is fading away in general",
    "start": "87840",
    "end": "89580"
  },
  {
    "text": "but you can check that out in this great",
    "start": "89580",
    "end": "91140"
  },
  {
    "text": "article please tell me you wrote this",
    "start": "91140",
    "end": "92939"
  },
  {
    "text": "article please tell me you wrote this",
    "start": "92939",
    "end": "95100"
  },
  {
    "text": "article you did not write this article",
    "start": "95100",
    "end": "96600"
  },
  {
    "text": "okay because that would be so hilarious",
    "start": "96600",
    "end": "98220"
  },
  {
    "text": "if you're like this great article and",
    "start": "98220",
    "end": "100860"
  },
  {
    "text": "then boom pre-es6 classes okay at this",
    "start": "100860",
    "end": "103380"
  },
  {
    "text": "point I agree classes were stupid I'm on",
    "start": "103380",
    "end": "105299"
  },
  {
    "text": "team prototypical crap or Pro prototypal",
    "start": "105299",
    "end": "109320"
  },
  {
    "text": "Proto just the Tipple was just Insanity",
    "start": "109320",
    "end": "112079"
  },
  {
    "text": "okay when I saw code that was trying to",
    "start": "112079",
    "end": "114000"
  },
  {
    "text": "con that hobbled together these",
    "start": "114000",
    "end": "115860"
  },
  {
    "text": "class-like experiences just the syntax",
    "start": "115860",
    "end": "118920"
  },
  {
    "text": "alone was so off-putting uh even though",
    "start": "118920",
    "end": "121200"
  },
  {
    "text": "the class keyword was added uh to",
    "start": "121200",
    "end": "123119"
  },
  {
    "text": "JavaScript since es6 ecmascript 2015.",
    "start": "123119",
    "end": "126240"
  },
  {
    "text": "people were using classes earlier the",
    "start": "126240",
    "end": "127979"
  },
  {
    "text": "way to achieve this uh was Constructor",
    "start": "127979",
    "end": "130259"
  },
  {
    "text": "functions and prototype delegation to",
    "start": "130259",
    "end": "133319"
  },
  {
    "text": "show you exactly what I mean I'm going",
    "start": "133319",
    "end": "134459"
  },
  {
    "text": "to implement a similar class in es5 and",
    "start": "134459",
    "end": "135959"
  },
  {
    "text": "es6 environments consider car and sports",
    "start": "135959",
    "end": "137760"
  },
  {
    "text": "car again I agree inheritance sucks that",
    "start": "137760",
    "end": "140400"
  },
  {
    "text": "inherits a car both have make and model",
    "start": "140400",
    "end": "142800"
  },
  {
    "text": "property start method and blah to the",
    "start": "142800",
    "end": "144480"
  },
  {
    "text": "blah blah blah okay car looks like that",
    "start": "144480",
    "end": "146580"
  },
  {
    "text": "prototype looks like that two string",
    "start": "146580",
    "end": "148739"
  },
  {
    "text": "looks like this bad boy sports car looks",
    "start": "148739",
    "end": "150660"
  },
  {
    "text": "like this car call this yes oh yeah call",
    "start": "150660",
    "end": "153660"
  },
  {
    "text": "it with that oh uh there we go looks",
    "start": "153660",
    "end": "156420"
  },
  {
    "text": "great look at this stupidness look at",
    "start": "156420",
    "end": "158040"
  },
  {
    "text": "how stupid that looks look would you",
    "start": "158040",
    "end": "160800"
  },
  {
    "text": "look at that would you look at how dumb",
    "start": "160800",
    "end": "163080"
  },
  {
    "text": "this looks I don't remember if you have",
    "start": "163080",
    "end": "164640"
  },
  {
    "text": "to object.create the Prototype or if",
    "start": "164640",
    "end": "166680"
  },
  {
    "text": "you're just supposed to assign it to",
    "start": "166680",
    "end": "167819"
  },
  {
    "text": "cars prototype I don't remember and I'm",
    "start": "167819",
    "end": "170640"
  },
  {
    "text": "confused uh Constructor equals sports",
    "start": "170640",
    "end": "172800"
  },
  {
    "text": "car I don't remember having to do this",
    "start": "172800",
    "end": "174900"
  },
  {
    "text": "to do inheritance but it's been so long",
    "start": "174900",
    "end": "177060"
  },
  {
    "text": "since I've played with both inheritance",
    "start": "177060",
    "end": "178800"
  },
  {
    "text": "and prototypes that I can't remember you",
    "start": "178800",
    "end": "182340"
  },
  {
    "text": "know what I mean anyways who cares about",
    "start": "182340",
    "end": "183780"
  },
  {
    "text": "all this blah blah blah blah blah as you",
    "start": "183780",
    "end": "185760"
  },
  {
    "text": "probably guessed the car line two in",
    "start": "185760",
    "end": "187019"
  },
  {
    "text": "sports car line 18 functions are",
    "start": "187019",
    "end": "188400"
  },
  {
    "text": "Constructor functions the property are",
    "start": "188400",
    "end": "189599"
  },
  {
    "text": "defined using this keyboard and the",
    "start": "189599",
    "end": "190920"
  },
  {
    "text": "object themselves are created via the",
    "start": "190920",
    "end": "192360"
  },
  {
    "text": "new keyword yay if you're not familiar",
    "start": "192360",
    "end": "194459"
  },
  {
    "text": "with prototype this is a special",
    "start": "194459",
    "end": "196080"
  },
  {
    "text": "property that every JS object has to",
    "start": "196080",
    "end": "198000"
  },
  {
    "text": "delicate common behavior for example a",
    "start": "198000",
    "end": "199980"
  },
  {
    "text": "prototype for an array object has",
    "start": "199980",
    "end": "201360"
  },
  {
    "text": "functions you probably well know map for",
    "start": "201360",
    "end": "203340"
  },
  {
    "text": "each find everyone's least favorite one",
    "start": "203340",
    "end": "205800"
  },
  {
    "text": "reduce uh the prototype for Strings has",
    "start": "205800",
    "end": "208140"
  },
  {
    "text": "functions like replace subster didn't",
    "start": "208140",
    "end": "210420"
  },
  {
    "text": "substor get deprecated just a just a",
    "start": "210420",
    "end": "212760"
  },
  {
    "text": "just a quick just a quick check did",
    "start": "212760",
    "end": "214379"
  },
  {
    "text": "substor get deprecated",
    "start": "214379",
    "end": "216180"
  },
  {
    "text": "I cannot remember deprecated it's been",
    "start": "216180",
    "end": "218760"
  },
  {
    "text": "deprecated you don't want to use subster",
    "start": "218760",
    "end": "220879"
  },
  {
    "text": "deprecated okay",
    "start": "220879",
    "end": "223260"
  },
  {
    "text": "ain't nobody using stubster that's for",
    "start": "223260",
    "end": "225599"
  },
  {
    "text": "rookies that's for rookies okay rookies",
    "start": "225599",
    "end": "229739"
  },
  {
    "text": "uh anyways after the car object is",
    "start": "229739",
    "end": "232140"
  },
  {
    "text": "created on line 33 you can access its",
    "start": "232140",
    "end": "233879"
  },
  {
    "text": "properties and methods it does start the",
    "start": "233879",
    "end": "235080"
  },
  {
    "text": "car blah to the blah there we go the JS",
    "start": "235080",
    "end": "236700"
  },
  {
    "text": "engine uh the JavaScript engine asked",
    "start": "236700",
    "end": "239040"
  },
  {
    "text": "the car object for the value with the",
    "start": "239040",
    "end": "240420"
  },
  {
    "text": "keyword start that object responds with",
    "start": "240420",
    "end": "242099"
  },
  {
    "text": "no such value the JS engine ask the",
    "start": "242099",
    "end": "243720"
  },
  {
    "text": "card.prototype object for the value",
    "start": "243720",
    "end": "245519"
  },
  {
    "text": "keyword start the car prototype Returns",
    "start": "245519",
    "end": "247319"
  },
  {
    "text": "the start function the JS engine",
    "start": "247319",
    "end": "248459"
  },
  {
    "text": "executes immediately accessing the make",
    "start": "248459",
    "end": "251159"
  },
  {
    "text": "and model properties are performed",
    "start": "251159",
    "end": "252659"
  },
  {
    "text": "similarly except that they are defined",
    "start": "252659",
    "end": "254340"
  },
  {
    "text": "on the car object directly instead of",
    "start": "254340",
    "end": "256199"
  },
  {
    "text": "the Prototype okay fantastic inheritance",
    "start": "256199",
    "end": "259620"
  },
  {
    "text": "is a bit trickier to handle yep you",
    "start": "259620",
    "end": "261479"
  },
  {
    "text": "gotta do like you gotta keep on jumping",
    "start": "261479",
    "end": "262979"
  },
  {
    "text": "blah blah okay who cares I don't care we",
    "start": "262979",
    "end": "265139"
  },
  {
    "text": "all know how this works it's let's just",
    "start": "265139",
    "end": "266759"
  },
  {
    "text": "go on with the release of es6 in 2015",
    "start": "266759",
    "end": "269280"
  },
  {
    "text": "the long-awaited class keyword arrived",
    "start": "269280",
    "end": "271259"
  },
  {
    "text": "in JavaScript it was super done wait it",
    "start": "271259",
    "end": "273660"
  },
  {
    "text": "was done as a per numerous request by",
    "start": "273660",
    "end": "275580"
  },
  {
    "text": "the community because people were",
    "start": "275580",
    "end": "276720"
  },
  {
    "text": "feeling uncomfortable from uh coming",
    "start": "276720",
    "end": "279000"
  },
  {
    "text": "from object-oriented languages but they",
    "start": "279000",
    "end": "281100"
  },
  {
    "text": "uh but they missed one important Point",
    "start": "281100",
    "end": "282960"
  },
  {
    "text": "um is that it",
    "start": "282960",
    "end": "284460"
  },
  {
    "text": "okay maybe people wanted an object with",
    "start": "284460",
    "end": "287280"
  },
  {
    "text": "with functions as well stay container",
    "start": "287280",
    "end": "289080"
  },
  {
    "text": "with functions you know a lot of people",
    "start": "289080",
    "end": "290160"
  },
  {
    "text": "like those just throwing it out there",
    "start": "290160",
    "end": "291540"
  },
  {
    "text": "some people like that JavaScript has no",
    "start": "291540",
    "end": "293940"
  },
  {
    "text": "idea what classes are",
    "start": "293940",
    "end": "296780"
  },
  {
    "text": "uh JavaScript is a non-object-oriented",
    "start": "297060",
    "end": "299820"
  },
  {
    "text": "language",
    "start": "299820",
    "end": "302000"
  },
  {
    "text": "it was not designed to be one the notion",
    "start": "303300",
    "end": "305160"
  },
  {
    "text": "of classes is absolutely not applicable",
    "start": "305160",
    "end": "307139"
  },
  {
    "text": "to it",
    "start": "307139",
    "end": "309500"
  },
  {
    "text": "I mean I mean even in the shitty",
    "start": "310100",
    "end": "312900"
  },
  {
    "text": "prototype thing you still kind of could",
    "start": "312900",
    "end": "314639"
  },
  {
    "text": "do objects and inheritance and look up",
    "start": "314639",
    "end": "316800"
  },
  {
    "text": "here I mean what you can do recreate it",
    "start": "316800",
    "end": "318360"
  },
  {
    "text": "with closures uh while everything in JS",
    "start": "318360",
    "end": "320940"
  },
  {
    "text": "is indeed an object these objects are",
    "start": "320940",
    "end": "322800"
  },
  {
    "text": "different from the ones in Java or a C",
    "start": "322800",
    "end": "324900"
  },
  {
    "text": "sharp and JS the object is simply a map",
    "start": "324900",
    "end": "327720"
  },
  {
    "text": "data structure with a somewhat",
    "start": "327720",
    "end": "329580"
  },
  {
    "text": "sophisticated lookup procedure yeah",
    "start": "329580",
    "end": "331080"
  },
  {
    "text": "prototype uh that is that is it really",
    "start": "331080",
    "end": "333660"
  },
  {
    "text": "and when I say everything is an object I",
    "start": "333660",
    "end": "335880"
  },
  {
    "text": "mean it even functions are objects you",
    "start": "335880",
    "end": "337440"
  },
  {
    "text": "can check it out with the snippet yes",
    "start": "337440",
    "end": "338580"
  },
  {
    "text": "you can actually you can actually do",
    "start": "338580",
    "end": "339720"
  },
  {
    "text": "that you can look at an object they're",
    "start": "339720",
    "end": "340979"
  },
  {
    "text": "objects uh oop without classes exists",
    "start": "340979",
    "end": "343919"
  },
  {
    "text": "it's true in fact we read an article",
    "start": "343919",
    "end": "346500"
  },
  {
    "text": "where you could create the world's most",
    "start": "346500",
    "end": "347639"
  },
  {
    "text": "bastardized version of the Prototype",
    "start": "347639",
    "end": "349380"
  },
  {
    "text": "chain and that's true message passage",
    "start": "349380",
    "end": "351180"
  },
  {
    "text": "object oriented programming uh okay this",
    "start": "351180",
    "end": "353400"
  },
  {
    "text": "is all good but how does the class",
    "start": "353400",
    "end": "354479"
  },
  {
    "text": "keyword work then glad you asked do you",
    "start": "354479",
    "end": "356280"
  },
  {
    "text": "remember car and sports card earlier",
    "start": "356280",
    "end": "357539"
  },
  {
    "text": "well this class keyword is simple",
    "start": "357539",
    "end": "359039"
  },
  {
    "text": "syntactic sugar on top of that okay in",
    "start": "359039",
    "end": "361560"
  },
  {
    "text": "other words classes produce is",
    "start": "361560",
    "end": "362759"
  },
  {
    "text": "conceptually the same code and serves",
    "start": "362759",
    "end": "365340"
  },
  {
    "text": "only as aesthetic and readable",
    "start": "365340",
    "end": "367199"
  },
  {
    "text": "readability purposes as I promised",
    "start": "367199",
    "end": "368880"
  },
  {
    "text": "earlier here we go okay fantastic",
    "start": "368880",
    "end": "370979"
  },
  {
    "text": "awesome so it has all the same thing",
    "start": "370979",
    "end": "372900"
  },
  {
    "text": "blah blah blah blah okay these examples",
    "start": "372900",
    "end": "375060"
  },
  {
    "text": "are identical and produce the Sim the",
    "start": "375060",
    "end": "376860"
  },
  {
    "text": "same results what is interesting is they",
    "start": "376860",
    "end": "378720"
  },
  {
    "text": "produce almost the same code underneath",
    "start": "378720",
    "end": "380460"
  },
  {
    "text": "the hood I will not write it out here",
    "start": "380460",
    "end": "382080"
  },
  {
    "text": "but if you were curious go look at my",
    "start": "382080",
    "end": "383639"
  },
  {
    "text": "okay don't look at the okay",
    "start": "383639",
    "end": "386280"
  },
  {
    "text": "that's first off this is super unfair",
    "start": "386280",
    "end": "388380"
  },
  {
    "text": "and what I mean by this is super unfair",
    "start": "388380",
    "end": "390360"
  },
  {
    "text": "is that if you're using a transpiler to",
    "start": "390360",
    "end": "393300"
  },
  {
    "text": "show something",
    "start": "393300",
    "end": "394919"
  },
  {
    "text": "that means you're not actually using the",
    "start": "394919",
    "end": "396660"
  },
  {
    "text": "feature itself right you're just",
    "start": "396660",
    "end": "398100"
  },
  {
    "text": "transpiling it into es5 so of course",
    "start": "398100",
    "end": "400620"
  },
  {
    "text": "they look the same that's because they",
    "start": "400620",
    "end": "402060"
  },
  {
    "text": "just translated it to the same Target",
    "start": "402060",
    "end": "405060"
  },
  {
    "text": "okay to the same Target now they may be",
    "start": "405060",
    "end": "407039"
  },
  {
    "text": "implemented identically underneath the",
    "start": "407039",
    "end": "408900"
  },
  {
    "text": "hood I don't know I honestly have no",
    "start": "408900",
    "end": "411180"
  },
  {
    "text": "idea if classes are implemented directly",
    "start": "411180",
    "end": "412979"
  },
  {
    "text": "underneath the hood I would guess they",
    "start": "412979",
    "end": "414780"
  },
  {
    "text": "are not",
    "start": "414780",
    "end": "416220"
  },
  {
    "text": "because there's some optimizations you",
    "start": "416220",
    "end": "417960"
  },
  {
    "text": "can do very obviously with classes",
    "start": "417960",
    "end": "419759"
  },
  {
    "text": "because you can't change a class",
    "start": "419759",
    "end": "422039"
  },
  {
    "text": "right you can't just or the expectation",
    "start": "422039",
    "end": "425699"
  },
  {
    "text": "is you don't you can't just start adding",
    "start": "425699",
    "end": "427440"
  },
  {
    "text": "things to the Prototype I mean you can",
    "start": "427440",
    "end": "429060"
  },
  {
    "text": "it's JavaScript you can do anything no",
    "start": "429060",
    "end": "430500"
  },
  {
    "text": "matter how horrible you feel but",
    "start": "430500",
    "end": "432840"
  },
  {
    "text": "you know in no way it's some regex it's",
    "start": "432840",
    "end": "434880"
  },
  {
    "text": "always some regex uh why not anyways now",
    "start": "434880",
    "end": "438360"
  },
  {
    "text": "you should have an understanding of what",
    "start": "438360",
    "end": "439740"
  },
  {
    "text": "classes in jsr and how they work now",
    "start": "439740",
    "end": "442440"
  },
  {
    "text": "with all this knowledge I can explain",
    "start": "442440",
    "end": "443639"
  },
  {
    "text": "why using uh classes in JS is a bad idea",
    "start": "443639",
    "end": "446039"
  },
  {
    "text": "okay binding issues a class Constructor",
    "start": "446039",
    "end": "448139"
  },
  {
    "text": "functions deal closely with this keyword",
    "start": "448139",
    "end": "449819"
  },
  {
    "text": "it can introduce potential binding",
    "start": "449819",
    "end": "451500"
  },
  {
    "text": "issues especially if you try to pass",
    "start": "451500",
    "end": "452759"
  },
  {
    "text": "your class method as a callback to an",
    "start": "452759",
    "end": "455160"
  },
  {
    "text": "external thing",
    "start": "455160",
    "end": "456539"
  },
  {
    "text": "um did you know in react if your props",
    "start": "456539",
    "end": "459479"
  },
  {
    "text": "has a child a children's object but you",
    "start": "459479",
    "end": "462180"
  },
  {
    "text": "define your own children your children's",
    "start": "462180",
    "end": "463620"
  },
  {
    "text": "object will not be respected but if you",
    "start": "463620",
    "end": "465300"
  },
  {
    "text": "don't it is respected right I mean",
    "start": "465300",
    "end": "467039"
  },
  {
    "text": "there's Oddities all over the world I",
    "start": "467039",
    "end": "468960"
  },
  {
    "text": "get that this always seems like such a",
    "start": "468960",
    "end": "471240"
  },
  {
    "text": "weird thing to call out with JavaScript",
    "start": "471240",
    "end": "473039"
  },
  {
    "text": "because JavaScript gives you the keys to",
    "start": "473039",
    "end": "475319"
  },
  {
    "text": "be able to take any function and bind it",
    "start": "475319",
    "end": "477120"
  },
  {
    "text": "to anything it just feels weird that",
    "start": "477120",
    "end": "479400"
  },
  {
    "text": "that is somehow that's a negative that's",
    "start": "479400",
    "end": "481199"
  },
  {
    "text": "that's like a JavaScript design",
    "start": "481199",
    "end": "482699"
  },
  {
    "text": "philosophy out the gate is that you can",
    "start": "482699",
    "end": "485220"
  },
  {
    "text": "attach it to anything I don't I don't",
    "start": "485220",
    "end": "487199"
  },
  {
    "text": "really understand that that's if you",
    "start": "487199",
    "end": "488759"
  },
  {
    "text": "don't like it that's JavaScript it's",
    "start": "488759",
    "end": "490740"
  },
  {
    "text": "JavaScript you can do the same crap no",
    "start": "490740",
    "end": "492300"
  },
  {
    "text": "matter what now relying on the this",
    "start": "492300",
    "end": "493979"
  },
  {
    "text": "keyword I can understand why people",
    "start": "493979",
    "end": "495300"
  },
  {
    "text": "don't like it but that's why we have",
    "start": "495300",
    "end": "497280"
  },
  {
    "text": "that's why we have syntax it removes all",
    "start": "497280",
    "end": "499560"
  },
  {
    "text": "the ambiguity to it uh performance",
    "start": "499560",
    "end": "501360"
  },
  {
    "text": "issues and that's why we have typescript",
    "start": "501360",
    "end": "502800"
  },
  {
    "text": "it removes all the ambiguity to it uh",
    "start": "502800",
    "end": "505560"
  },
  {
    "text": "performance issues because of classes",
    "start": "505560",
    "end": "507360"
  },
  {
    "text": "implementation they are notoriously",
    "start": "507360",
    "end": "508860"
  },
  {
    "text": "difficult to optimize at runtime hmm",
    "start": "508860",
    "end": "511080"
  },
  {
    "text": "while we enjoy performing machines at",
    "start": "511080",
    "end": "512880"
  },
  {
    "text": "the moment the fact that Moore's Law is",
    "start": "512880",
    "end": "515099"
  },
  {
    "text": "fading will change all of that I don't",
    "start": "515099",
    "end": "517140"
  },
  {
    "text": "know if I believe you on this one",
    "start": "517140",
    "end": "518279"
  },
  {
    "text": "private variables one of the great",
    "start": "518279",
    "end": "519719"
  },
  {
    "text": "advantages and the main reasons for",
    "start": "519719",
    "end": "521339"
  },
  {
    "text": "classes in the first place is private",
    "start": "521339",
    "end": "522599"
  },
  {
    "text": "variables is just non-existent in Js",
    "start": "522599",
    "end": "525060"
  },
  {
    "text": "wait is this a wait is this a Pros or a",
    "start": "525060",
    "end": "527279"
  },
  {
    "text": "cons",
    "start": "527279",
    "end": "528720"
  },
  {
    "text": "you caught me off why not okay hold on",
    "start": "528720",
    "end": "531540"
  },
  {
    "text": "now I'm confused is this a cons list or",
    "start": "531540",
    "end": "533940"
  },
  {
    "text": "a prose list because I feel like we just",
    "start": "533940",
    "end": "535500"
  },
  {
    "text": "switched gears in the middle of it being",
    "start": "535500",
    "end": "536880"
  },
  {
    "text": "like private variables are great like",
    "start": "536880",
    "end": "539100"
  },
  {
    "text": "what strict hierarchies class introduce",
    "start": "539100",
    "end": "541019"
  },
  {
    "text": "a straight top to bottom order and make",
    "start": "541019",
    "end": "543360"
  },
  {
    "text": "changes harder to implement which is",
    "start": "543360",
    "end": "544680"
  },
  {
    "text": "unacceptable in most uh JavaScript",
    "start": "544680",
    "end": "546959"
  },
  {
    "text": "applications",
    "start": "546959",
    "end": "548880"
  },
  {
    "text": "you can just not use inherit you know",
    "start": "548880",
    "end": "552120"
  },
  {
    "text": "what I mean because the react team tells",
    "start": "552120",
    "end": "553860"
  },
  {
    "text": "you you uh tells you not to is this a",
    "start": "553860",
    "end": "556920"
  },
  {
    "text": "react brain article I don't know think",
    "start": "556920",
    "end": "559080"
  },
  {
    "text": "about all the things you do in react",
    "start": "559080",
    "end": "560640"
  },
  {
    "text": "because you know how to do it you know",
    "start": "560640",
    "end": "563339"
  },
  {
    "text": "you know to pass in an array on use",
    "start": "563339",
    "end": "565800"
  },
  {
    "text": "effect or else it's called every single",
    "start": "565800",
    "end": "567480"
  },
  {
    "text": "time it's rendered are you saying that",
    "start": "567480",
    "end": "569760"
  },
  {
    "text": "that somehow that's totally acceptable",
    "start": "569760",
    "end": "573320"
  },
  {
    "text": "complexity added to an application but",
    "start": "573320",
    "end": "576480"
  },
  {
    "text": "knowing that you have to bind to",
    "start": "576480",
    "end": "577920"
  },
  {
    "text": "function if you pass a raw dogged",
    "start": "577920",
    "end": "579480"
  },
  {
    "text": "function around that's not acceptable I",
    "start": "579480",
    "end": "582060"
  },
  {
    "text": "don't know it feels like the rules are",
    "start": "582060",
    "end": "583260"
  },
  {
    "text": "arbitrary you know what I mean it feels",
    "start": "583260",
    "end": "584880"
  },
  {
    "text": "very arbitrary like one version of",
    "start": "584880",
    "end": "586560"
  },
  {
    "text": "complexity is very okay but the other",
    "start": "586560",
    "end": "589260"
  },
  {
    "text": "version is not okay second off saying",
    "start": "589260",
    "end": "591420"
  },
  {
    "text": "that react react doesn't decide what is",
    "start": "591420",
    "end": "593760"
  },
  {
    "text": "good or bad react has their own opinions",
    "start": "593760",
    "end": "595560"
  },
  {
    "text": "on things that are good and bad and if",
    "start": "595560",
    "end": "597240"
  },
  {
    "text": "you want to do the things that they want",
    "start": "597240",
    "end": "598560"
  },
  {
    "text": "to do then you can do it however they",
    "start": "598560",
    "end": "599940"
  },
  {
    "text": "want to but if you don't want to do it",
    "start": "599940",
    "end": "601200"
  },
  {
    "text": "the way they want to do it you can do it",
    "start": "601200",
    "end": "602399"
  },
  {
    "text": "how you want to this is yes the people",
    "start": "602399",
    "end": "604980"
  },
  {
    "text": "always say learn react this is the this",
    "start": "604980",
    "end": "607320"
  },
  {
    "text": "is the truest problem of learning react",
    "start": "607320",
    "end": "609120"
  },
  {
    "text": "before JavaScript if that's even a",
    "start": "609120",
    "end": "610980"
  },
  {
    "text": "phrase one can say that makes any sort",
    "start": "610980",
    "end": "613500"
  },
  {
    "text": "of coherent sense right I have this",
    "start": "613500",
    "end": "617040"
  },
  {
    "text": "really hard time with this coherency of",
    "start": "617040",
    "end": "618600"
  },
  {
    "text": "that phrase people say it all the time",
    "start": "618600",
    "end": "619920"
  },
  {
    "text": "but I know what you're trying to say",
    "start": "619920",
    "end": "620880"
  },
  {
    "text": "which is they learn JavaScript by",
    "start": "620880",
    "end": "622860"
  },
  {
    "text": "learning react and it makes you think",
    "start": "622860",
    "end": "625860"
  },
  {
    "text": "that react is the Arbiter of what is",
    "start": "625860",
    "end": "627959"
  },
  {
    "text": "good or bad I would argue that creating",
    "start": "627959",
    "end": "630000"
  },
  {
    "text": "an array every single render and every",
    "start": "630000",
    "end": "631920"
  },
  {
    "text": "single one of your functions for every",
    "start": "631920",
    "end": "633240"
  },
  {
    "text": "single one of your use effects not great",
    "start": "633240",
    "end": "635339"
  },
  {
    "text": "and then to also take back all the use",
    "start": "635339",
    "end": "637560"
  },
  {
    "text": "effects and say they were bad I'd say",
    "start": "637560",
    "end": "638940"
  },
  {
    "text": "that was also bad right so it's not like",
    "start": "638940",
    "end": "640740"
  },
  {
    "text": "they're winning all the time either I'd",
    "start": "640740",
    "end": "642240"
  },
  {
    "text": "say that foot guns exist everywhere in",
    "start": "642240",
    "end": "643740"
  },
  {
    "text": "this language because it's crazy uh all",
    "start": "643740",
    "end": "646079"
  },
  {
    "text": "these issues can be uh mitigated with JS",
    "start": "646079",
    "end": "648300"
  },
  {
    "text": "objects and prototype delegation like",
    "start": "648300",
    "end": "650220"
  },
  {
    "text": "classes",
    "start": "650220",
    "end": "652260"
  },
  {
    "text": "okay I'm super confused JS offers uh so",
    "start": "652260",
    "end": "654899"
  },
  {
    "text": "much more than classes can ever do yet",
    "start": "654899",
    "end": "656640"
  },
  {
    "text": "most developers are blind to it if you",
    "start": "656640",
    "end": "658380"
  },
  {
    "text": "want to truly Master JS you need to",
    "start": "658380",
    "end": "659760"
  },
  {
    "text": "embrace it to philosophy and move away",
    "start": "659760",
    "end": "661019"
  },
  {
    "text": "from dogmatic class-based thinking okay",
    "start": "661019",
    "end": "663720"
  },
  {
    "text": "was this like season one of 1899 you're",
    "start": "663720",
    "end": "667200"
  },
  {
    "text": "gonna leave us on a cliffhanger like",
    "start": "667200",
    "end": "668940"
  },
  {
    "text": "here like hey by the way there's",
    "start": "668940",
    "end": "670500"
  },
  {
    "text": "actually a much better way to do it with",
    "start": "670500",
    "end": "672120"
  },
  {
    "text": "prototype delegation and JS objects what",
    "start": "672120",
    "end": "675600"
  },
  {
    "text": "you mean like classes no they're better",
    "start": "675600",
    "end": "678959"
  },
  {
    "text": "what are they this is not a Jeopardy",
    "start": "678959",
    "end": "681540"
  },
  {
    "text": "article someone wrote this by hand no",
    "start": "681540",
    "end": "684480"
  },
  {
    "text": "examples yeah I want to know what he",
    "start": "684480",
    "end": "685920"
  },
  {
    "text": "means because honestly genuinely if you",
    "start": "685920",
    "end": "687839"
  },
  {
    "text": "can help me see something that I'm",
    "start": "687839",
    "end": "689279"
  },
  {
    "text": "missing here I'd love to see it so where",
    "start": "689279",
    "end": "691380"
  },
  {
    "text": "are classes really really good well",
    "start": "691380",
    "end": "693120"
  },
  {
    "text": "classes give you a blueprint which means",
    "start": "693120",
    "end": "695040"
  },
  {
    "text": "that I would be shocked honestly I'm",
    "start": "695040",
    "end": "696600"
  },
  {
    "text": "still would be shocked if classes are",
    "start": "696600",
    "end": "698700"
  },
  {
    "text": "less optimized than just simply objects",
    "start": "698700",
    "end": "700560"
  },
  {
    "text": "with hanged uh hanging on functions I I",
    "start": "700560",
    "end": "702959"
  },
  {
    "text": "really do want to test that I really do",
    "start": "702959",
    "end": "704519"
  },
  {
    "text": "want to prove to myself that is real or",
    "start": "704519",
    "end": "705899"
  },
  {
    "text": "not real I would assume there's just",
    "start": "705899",
    "end": "707700"
  },
  {
    "text": "much more garbage collection and all",
    "start": "707700",
    "end": "709019"
  },
  {
    "text": "that that goes on uh second off munching",
    "start": "709019",
    "end": "711600"
  },
  {
    "text": "around with prototypes and calling that",
    "start": "711600",
    "end": "713519"
  },
  {
    "text": "easier to work with than classes seems",
    "start": "713519",
    "end": "715380"
  },
  {
    "text": "crazy right that's what the whole class",
    "start": "715380",
    "end": "716519"
  },
  {
    "text": "keyword is is to hide the whole",
    "start": "716519",
    "end": "717720"
  },
  {
    "text": "prototype craziness right okay I get it",
    "start": "717720",
    "end": "719940"
  },
  {
    "text": "there are things classes are great for",
    "start": "719940",
    "end": "721740"
  },
  {
    "text": "if you want a class that's a state",
    "start": "721740",
    "end": "723660"
  },
  {
    "text": "container with a few uh methods to",
    "start": "723660",
    "end": "726000"
  },
  {
    "text": "manipulate it it can be really really",
    "start": "726000",
    "end": "727440"
  },
  {
    "text": "nice to have you know why",
    "start": "727440",
    "end": "729300"
  },
  {
    "text": "it's very very simple all of the things",
    "start": "729300",
    "end": "731760"
  },
  {
    "text": "that can manipulate and use that class",
    "start": "731760",
    "end": "733680"
  },
  {
    "text": "are in the class itself your",
    "start": "733680",
    "end": "735720"
  },
  {
    "text": "autocomplete makes it much much nicer",
    "start": "735720",
    "end": "737279"
  },
  {
    "text": "experience it's very simple to find all",
    "start": "737279",
    "end": "738600"
  },
  {
    "text": "the functions that are mostly associated",
    "start": "738600",
    "end": "740220"
  },
  {
    "text": "with it if you don't if you want to just",
    "start": "740220",
    "end": "741839"
  },
  {
    "text": "see which functions actually just use",
    "start": "741839",
    "end": "743040"
  },
  {
    "text": "the object as opposed that manipulates",
    "start": "743040",
    "end": "744959"
  },
  {
    "text": "with those functions you can use find",
    "start": "744959",
    "end": "746279"
  },
  {
    "text": "references blah blah blah blah but if",
    "start": "746279",
    "end": "748200"
  },
  {
    "text": "you have a bunch of objects if you have",
    "start": "748200",
    "end": "750000"
  },
  {
    "text": "a bunch of things that are just hanging",
    "start": "750000",
    "end": "751260"
  },
  {
    "text": "off by like say interface a bunch of",
    "start": "751260",
    "end": "753720"
  },
  {
    "text": "different objects can call those as long",
    "start": "753720",
    "end": "755339"
  },
  {
    "text": "as the interface accepts it and then it",
    "start": "755339",
    "end": "757440"
  },
  {
    "text": "then it it causes this entire issue",
    "start": "757440",
    "end": "759959"
  },
  {
    "text": "where this function may or may not be",
    "start": "759959",
    "end": "762360"
  },
  {
    "text": "specifically for your object but it",
    "start": "762360",
    "end": "764040"
  },
  {
    "text": "manipulates functions like your object",
    "start": "764040",
    "end": "765720"
  },
  {
    "text": "and now you're going through a whole",
    "start": "765720",
    "end": "767160"
  },
  {
    "text": "file that's separate it doesn't even",
    "start": "767160",
    "end": "768899"
  },
  {
    "text": "hang off your object like I think I",
    "start": "768899",
    "end": "771779"
  },
  {
    "text": "really truly think that strucks with",
    "start": "771779",
    "end": "774120"
  },
  {
    "text": "methods associated with them is a very",
    "start": "774120",
    "end": "776279"
  },
  {
    "text": "convenient very good developer",
    "start": "776279",
    "end": "777959"
  },
  {
    "text": "experience you know what you have in",
    "start": "777959",
    "end": "780720"
  },
  {
    "text": "your toolkit to edit it it's just like",
    "start": "780720",
    "end": "782760"
  },
  {
    "text": "if you're doing iterators or anything",
    "start": "782760",
    "end": "784019"
  },
  {
    "text": "being able to dot map dot reduce dot",
    "start": "784019",
    "end": "786839"
  },
  {
    "text": "whatever the hell you want to do right",
    "start": "786839",
    "end": "788100"
  },
  {
    "text": "that's a very nice nice experience",
    "start": "788100",
    "end": "790380"
  },
  {
    "text": "because it hangs off the object itself",
    "start": "790380",
    "end": "792660"
  },
  {
    "text": "if you don't have that instead you have",
    "start": "792660",
    "end": "794399"
  },
  {
    "text": "map then you have to reduce cover it",
    "start": "794399",
    "end": "796260"
  },
  {
    "text": "then you have to do the next thing cover",
    "start": "796260",
    "end": "797940"
  },
  {
    "text": "it and it always is very annoying yes",
    "start": "797940",
    "end": "799740"
  },
  {
    "text": "locality of behavior is like a gigantic",
    "start": "799740",
    "end": "802620"
  },
  {
    "text": "plus one in all aspects the more",
    "start": "802620",
    "end": "805260"
  },
  {
    "text": "localized you can make your behavior the",
    "start": "805260",
    "end": "807540"
  },
  {
    "text": "more understandable that behavior is the",
    "start": "807540",
    "end": "811740"
  },
  {
    "text": "name is I still will use classes but I",
    "start": "811740",
    "end": "814320"
  },
  {
    "text": "pretty much refuse to use inherits",
    "start": "814320",
    "end": "815940"
  },
  {
    "text": "though every now and then I try to use",
    "start": "815940",
    "end": "817079"
  },
  {
    "text": "inherits because I think I really have a",
    "start": "817079",
    "end": "818700"
  },
  {
    "text": "situation in which inherits would solve",
    "start": "818700",
    "end": "820380"
  },
  {
    "text": "this problem well and so far I am five",
    "start": "820380",
    "end": "822959"
  },
  {
    "text": "out of five for regretting my decisions",
    "start": "822959",
    "end": "824519"
  },
  {
    "text": "using inherits I pretty much do it every",
    "start": "824519",
    "end": "826560"
  },
  {
    "text": "single time at least three to five times",
    "start": "826560",
    "end": "828240"
  },
  {
    "text": "a year I decide I'm gonna use",
    "start": "828240",
    "end": "829560"
  },
  {
    "text": "inheritance because this is the point",
    "start": "829560",
    "end": "830940"
  },
  {
    "text": "extends is the time the time is now and",
    "start": "830940",
    "end": "834540"
  },
  {
    "text": "I found the situation and every time",
    "start": "834540",
    "end": "836579"
  },
  {
    "text": "I've lived to regret it the name is that",
    "start": "836579",
    "end": "839940"
  },
  {
    "text": "whatever that was a gin",
    "start": "839940",
    "end": "843260"
  }
]