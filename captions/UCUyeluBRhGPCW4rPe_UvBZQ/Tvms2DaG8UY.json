[
  {
    "text": "our boy Jose is going on the offensive here new article remix concurrent submissions are fundamentally flawed without causal ordering uh I expand on",
    "start": "120",
    "end": "7439"
  },
  {
    "text": "why allowing concurrent operations on the client can introduce bugs races and complexity without ordering on the server very interesting uh I think where",
    "start": "7439",
    "end": "14360"
  },
  {
    "text": "a lot of this has kind of started coming from or started happening with is that for a long time there's been this kind",
    "start": "14360",
    "end": "21039"
  },
  {
    "text": "of dominant voice that you cannot create a proper UI without all the state being",
    "start": "21039",
    "end": "27279"
  },
  {
    "text": "effectively duplicated on the client and things like HTM X which is the simplest form of it or a Hotwire or Live View",
    "start": "27279",
    "end": "34040"
  },
  {
    "text": "kind of say no actually you can and this is how we believe it should be happening I I doubt that there's a real",
    "start": "34040",
    "end": "39760"
  },
  {
    "text": "fundamental argument against why you should go client side or why you should go server side I think what it comes down to is your preference for where",
    "start": "39760",
    "end": "46000"
  },
  {
    "text": "State should be kept do you think it's easier to have a a box in which which",
    "start": "46000",
    "end": "51239"
  },
  {
    "text": "makes remote calls gets more uh State merges the state in and then updates the",
    "start": "51239",
    "end": "57280"
  },
  {
    "text": "UI the only one that really and truly wins is offline support but virtually no",
    "start": "57280",
    "end": "63480"
  },
  {
    "text": "website has offline support if that like try any website with any functionality",
    "start": "63480",
    "end": "69799"
  },
  {
    "text": "and you will get nothing and that is because offline support does not actually exist that's more of a mobile",
    "start": "69799",
    "end": "75119"
  },
  {
    "text": "app experience uh latency is a good argument in favor of client side it's not a good argument in favor of client side because anything that you do can be",
    "start": "75119",
    "end": "81680"
  },
  {
    "text": "done on the client side and then uh and then enforced by the server side you see",
    "start": "81680",
    "end": "86840"
  },
  {
    "text": "it all the time you see it on Twitter you will like something and then your heart will go away because by the time",
    "start": "86840",
    "end": "92720"
  },
  {
    "text": "the thing came back it realized it's not true and so you can still do all the client side operations that you want if",
    "start": "92720",
    "end": "99479"
  },
  {
    "text": "you delete something you could remove it you could highlight it you could put it in behind some sort of like translucent",
    "start": "99479",
    "end": "107159"
  },
  {
    "text": "kind of pain so that it shows that it's being deleted you can put a throbber on it you can do all the like all the stuff",
    "start": "107159",
    "end": "113960"
  },
  {
    "text": "none of that's prevented with yeah it's called a throbber a throbber is the thing that pulses you know just what it",
    "start": "113960",
    "end": "119600"
  },
  {
    "text": "is hey I did in fact not name this thing uh it's been that way for a long time",
    "start": "119600",
    "end": "124759"
  },
  {
    "text": "and so any of the things that people say like oh what it's better to have it on client side because you get interactivity no one says that's not",
    "start": "124759",
    "end": "130560"
  },
  {
    "text": "possible in fact that is very very very much so possible with any of these Frameworks from HTM X being the simplest",
    "start": "130560",
    "end": "137280"
  },
  {
    "text": "all the way to live view I assume being the most complicated I have recently uh heard that Chad ji launched a new",
    "start": "137280",
    "end": "143040"
  },
  {
    "text": "version of its UI using Remix by the way super cool for the remix team can we all get little claps for the remix team nice",
    "start": "143040",
    "end": "149040"
  },
  {
    "text": "job dude a Chad jity to be using your product even if they don't get paid for it I think that's super duper cool like",
    "start": "149040",
    "end": "155080"
  },
  {
    "text": "that's such a huge wbut good job everybody way to be out there rocking and kicking uh kicking ass right that's",
    "start": "155080",
    "end": "161720"
  },
  {
    "text": "very impressive I don't care I don't care if you hate react that's still impressive at least to me it is uh and I",
    "start": "161720",
    "end": "168480"
  },
  {
    "text": "decided to give it a try find some bugs and discuss the PO uh possible root causes one of the motivations beh uh for",
    "start": "168480",
    "end": "174200"
  },
  {
    "text": "this was because I consider remix to be a library framework trying to further integrate client and server similar to",
    "start": "174200",
    "end": "179400"
  },
  {
    "text": "Phoenix live view but with different trade-offs yeah I mean remix uh react uh",
    "start": "179400",
    "end": "185159"
  },
  {
    "text": "server components and live view are in some sense existing in very similar spaces",
    "start": "185159",
    "end": "192920"
  },
  {
    "text": "right uh hold on one second uh hold on one second uh someone's saying this my gpe 100% with serers side state is that",
    "start": "192920",
    "end": "199120"
  },
  {
    "text": "on crappy internet connections you need a roundtrip server to open a drop down unless you do some extra handling but",
    "start": "199120",
    "end": "204879"
  },
  {
    "text": "you can that's the thing is you can choose which ones you want to do and which things you don't want to do",
    "start": "204879",
    "end": "210319"
  },
  {
    "text": "there's plenty of stuff on crappy connections that just don't work right have you been on any client side your first time visiting a website in which",
    "start": "210319",
    "end": "216439"
  },
  {
    "text": "you're downloading megabytes of JavaScript that's a crappy that's a crappy experience on on shitty",
    "start": "216439",
    "end": "223560"
  },
  {
    "text": "connections where you have to load pages in on every single click that's a crappy experience so it's a crappy experience",
    "start": "223560",
    "end": "231239"
  },
  {
    "text": "no matter what in our bloated heavy data world right so I'm I'm not 100% bought",
    "start": "231239",
    "end": "237439"
  },
  {
    "text": "over and again drop downs and stuff like that that can all be done in these serers side rendering Frameworks without",
    "start": "237439",
    "end": "243959"
  },
  {
    "text": "a network request these things all exist nothing says you can't write JavaScript",
    "start": "243959",
    "end": "249200"
  },
  {
    "text": "nothing says that it's it's very it's it's not even hard uh agreed I'd expand in a way that that how much effort is",
    "start": "249200",
    "end": "254959"
  },
  {
    "text": "required on the Builder side to decide what exactly gets offloaded I would do the exact opposite how much effort is",
    "start": "254959",
    "end": "260560"
  },
  {
    "text": "put in to ensure that your client is in sync with the uh uh with the server that is a very marvelous feat and react has",
    "start": "260560",
    "end": "268440"
  },
  {
    "text": "been attempting to solve this feat for over 10 years this is not a simple problem and there are State library",
    "start": "268440",
    "end": "275639"
  },
  {
    "text": "after State libraries of all different kinds just attempting to solve this so",
    "start": "275639",
    "end": "281160"
  },
  {
    "text": "to assume that it's somehow harder on one side and not the other it's just that they both have contentions as to",
    "start": "281160",
    "end": "288919"
  },
  {
    "text": "what they're trying to solve and how they're trying to solve it just bring back Marquee and blink 90% of what we use today can be solved with those two",
    "start": "288919",
    "end": "295039"
  },
  {
    "text": "agreed agreed in factual hey LL Cool Chris how's that how's that partner check mark treating you I sold my soul",
    "start": "295039",
    "end": "300759"
  },
  {
    "text": "to the llang virtual machine a lot of I know a lot of you guys have a lot of you guys have I've seen it as I dug deeper I",
    "start": "300759",
    "end": "306639"
  },
  {
    "text": "realized that the trade-offs made by remix submission and revalidation are flawed and they cannot reliably deliver",
    "start": "306639",
    "end": "312680"
  },
  {
    "text": "the properties outlined in conc uh in their concurrency page for the majority of applications if not all wow that's I",
    "start": "312680",
    "end": "319080"
  },
  {
    "text": "mean that's a pretty big uh that's a pretty big statement the saying that",
    "start": "319080",
    "end": "324840"
  },
  {
    "text": "they say they will do this but they actually cannot do that so what I'm going to do is I'm by the way I'm going to go get I'm going to go fill up my",
    "start": "324840",
    "end": "330880"
  },
  {
    "text": "water my throat's a bit raspy feeling I'm going to go get that and I'm going to go use the bathroom and and then I",
    "start": "330880",
    "end": "336280"
  },
  {
    "text": "will be right back flip take this out sorry I got to be right back hey sorry hey hi hey hi hey and hi hey and hi all",
    "start": "336280",
    "end": "343400"
  },
  {
    "text": "right submission and revalidation with submission and revalidation is the idea that if you submit a form press a button",
    "start": "343400",
    "end": "350440"
  },
  {
    "text": "or anything that may lead to a post patch delete on the server you will first submit a request and then you'll",
    "start": "350440",
    "end": "355880"
  },
  {
    "text": "do another request to load the data okay submission and revalidation okay interesting so what he's saying is that",
    "start": "355880",
    "end": "361639"
  },
  {
    "text": "just just to make sure I I understand perfectly what he's attempting to say is that any operation which requires a post",
    "start": "361639",
    "end": "367919"
  },
  {
    "text": "or any of these like mutating of data operations you do a post and when the",
    "start": "367919",
    "end": "372960"
  },
  {
    "text": "post completes you do a follow-up get for uh the actual",
    "start": "372960",
    "end": "378800"
  },
  {
    "text": "information okay I assume that is what is attempted to be said here just to",
    "start": "378800",
    "end": "384840"
  },
  {
    "text": "make sure I understand it uh the first obvious issue with this approach is that for any mutation going to do two round",
    "start": "384840",
    "end": "390360"
  },
  {
    "text": "trips to the server okay good yes I I understood yes this makes perfect sense obviously that is bad uh for example",
    "start": "390360",
    "end": "397240"
  },
  {
    "text": "Chad gpt's UI does perform two round trips and the leg is quite noticeable the two most common reasons I've heard",
    "start": "397240",
    "end": "405000"
  },
  {
    "text": "for going down this route are it supports workflows with no JavaScript I",
    "start": "405000",
    "end": "410240"
  },
  {
    "text": "I always find this to be a really silly kind of operation um I think that if you're building a web app I just would not even",
    "start": "410240",
    "end": "417080"
  },
  {
    "text": "consider this to be a thing if you don't want to have JavaScript a that's fine but you are not my target it just seems",
    "start": "417080",
    "end": "422680"
  },
  {
    "text": "like a a weird thing to attempt because how are you making a lot of these operations to begin with yeah Works in",
    "start": "422680",
    "end": "428840"
  },
  {
    "text": "ie6 though yeah I don't think anybody cares uh however in Chad chippy's case that's not a possibility so why pay the",
    "start": "428840",
    "end": "434800"
  },
  {
    "text": "price for a feature that is not there exactly I just don't even see that as a a reason for that you want your military",
    "start": "434800",
    "end": "441319"
  },
  {
    "text": "app to have a JavaScript engine um no I want my military app not to be a web app",
    "start": "441319",
    "end": "446560"
  },
  {
    "text": "it's not that I don't want it to have a JavaScript engine but if you're building a if you're building a web app then",
    "start": "446560",
    "end": "452280"
  },
  {
    "text": "guess what you have JavaScript and try to avoid like turning",
    "start": "452280",
    "end": "457919"
  },
  {
    "text": "off JavaScript is just to me it's just kind of nutty if you're building a web app right time for Ada that's it it's",
    "start": "457919",
    "end": "463080"
  },
  {
    "text": "Ada now this coming yeah no I agree I I agree completely with this comment this is a it seems like a I don't see the",
    "start": "463080",
    "end": "469400"
  },
  {
    "text": "benefit here uh it benefits cashing I also don't understand this hold on which is partially pointless why am I paying",
    "start": "469400",
    "end": "475240"
  },
  {
    "text": "the price of two requests for the possibility of eventually using the cashed value in the future why not do a single request and if I need to read",
    "start": "475240",
    "end": "481680"
  },
  {
    "text": "again uh read the data again then I cash it I I actually very very strongly agree",
    "start": "481680",
    "end": "488520"
  },
  {
    "text": "with this statement uh this is just a this is just a a a wild argument if",
    "start": "488520",
    "end": "493759"
  },
  {
    "text": "someone says well the reason why I make two requests to show it to you on the uisp because I want to cash it I'd say why why why not cash it when the user",
    "start": "493759",
    "end": "501039"
  },
  {
    "text": "wants it why make an extra request right if you're already doing a post a post in",
    "start": "501039",
    "end": "506319"
  },
  {
    "text": "which can respond with data why uh anyway assuming you are fine with paying the price of two round trips remix",
    "start": "506319",
    "end": "513200"
  },
  {
    "text": "documentation says that it allows concurrent submissions and that remix safeguards against potential pitfalls by",
    "start": "513200",
    "end": "518719"
  },
  {
    "text": "refraining from com uh committing stale data when other actions introduce race conditions unfortunately that's not",
    "start": "518719",
    "end": "524600"
  },
  {
    "text": "quite true okay so this would be the contention of the article which is that this concurr uh cannot reliably deliver",
    "start": "524600",
    "end": "530680"
  },
  {
    "text": "the properties outlined in the concurrency page okay uh hello database remix",
    "start": "530680",
    "end": "536240"
  },
  {
    "text": "documentation includes a diagram with some examples on of how they deal with network requests let's build on top of",
    "start": "536240",
    "end": "541760"
  },
  {
    "text": "them in particular they use the following Keys submission begins action completes with data uh data revalidation",
    "start": "541760",
    "end": "547760"
  },
  {
    "text": "begins revalidated data is committed to the UI request is canceled okay here is one example submission one so this is",
    "start": "547760",
    "end": "554560"
  },
  {
    "text": "when submission begins this is when action is completed this is when revalid dat uh revalidated data is committed to",
    "start": "554560",
    "end": "560800"
  },
  {
    "text": "the UI task two starts here before this one is finished then this one finishes",
    "start": "560800",
    "end": "566040"
  },
  {
    "text": "here then this one is done between uh the finishing and the revalidation and then this one right here there is a",
    "start": "566040",
    "end": "571480"
  },
  {
    "text": "wrong assumption in here it assumes that revalidation that finishes first contains an early version of the data",
    "start": "571480",
    "end": "577800"
  },
  {
    "text": "given that most remix applications interact with uh with the database let's add a new key called R which is when re",
    "start": "577800",
    "end": "584720"
  },
  {
    "text": "validation uh let's see when revalidation reads from the database okay so what are you trying to",
    "start": "584720",
    "end": "590760"
  },
  {
    "text": "get at Jose here let's let's look at this you got submission one which revalidation read from the database",
    "start": "590760",
    "end": "596000"
  },
  {
    "text": "actually happens after a later request and this one even furthest the third one",
    "start": "596000",
    "end": "601320"
  },
  {
    "text": "being the furthest happens the thirdst as you can see above R1 sees all submissions and that will be reflected",
    "start": "601320",
    "end": "606560"
  },
  {
    "text": "in the UI but R2 won't uh see the effects of the third submission reverting the UI to a previous state",
    "start": "606560",
    "end": "613279"
  },
  {
    "text": "only for it to correct itself once again oh I see what it's saying due to this thing being requested first but the",
    "start": "613279",
    "end": "619800"
  },
  {
    "text": "revalidation Step happening and being revalidated F or and the validation results that being implemented will",
    "start": "619800",
    "end": "627600"
  },
  {
    "text": "cause a jump forward in time to the third submission because this already has uh has already been set in the",
    "start": "627600",
    "end": "634000"
  },
  {
    "text": "database but then this one is before that one set in the database therefore you can have okay I understand this okay",
    "start": "634000",
    "end": "640000"
  },
  {
    "text": "yeah that makes sense because each one of these steps happen in order each one of these steps happen in order but there",
    "start": "640000",
    "end": "645720"
  },
  {
    "text": "can be some weird spikes like you could imagine I don't know if REM I assume remix is horizontally",
    "start": "645720",
    "end": "652000"
  },
  {
    "text": "scalable in some sense therefore it is possible that one server could say have",
    "start": "652000",
    "end": "657320"
  },
  {
    "text": "a garbage collection and therefore when a garbage collection happens you have this entire pipeline",
    "start": "657320",
    "end": "664720"
  },
  {
    "text": "that can happen so this thing could have a just a freeze in which you do not have a an answer for why it happens just",
    "start": "664720",
    "end": "670720"
  },
  {
    "text": "refresh the page like the good old days as you can see above R1 sees all submissions and that will be uh",
    "start": "670720",
    "end": "677320"
  },
  {
    "text": "reflected in the UI but R2 won't see the effects of the third submission reverting the UI to a previous state only for it to correct itself once again",
    "start": "677320",
    "end": "683600"
  },
  {
    "text": "let's make things more concrete imagine you have a table with three rows each row had a delete button if you delete the three rows one after another you",
    "start": "683600",
    "end": "690200"
  },
  {
    "text": "will issue three submissions correct one to delete each row on the revalidation step submission one we'll see all rows",
    "start": "690200",
    "end": "696680"
  },
  {
    "text": "deleted removing them from the page then submission two uh comes in and brings the third row back to life only for it",
    "start": "696680",
    "end": "703720"
  },
  {
    "text": "to be removed again in this particular example you could somewhat track the third row has been removed permanently",
    "start": "703720",
    "end": "709320"
  },
  {
    "text": "but for any non-trivial cases a submission may cause uh may affect too",
    "start": "709320",
    "end": "714440"
  },
  {
    "text": "many different properties and the UI elements to track Fair okay yeah I mean he's I I",
    "start": "714440",
    "end": "721720"
  },
  {
    "text": "assume he's correct on this I assume this is this is uh this isn't this is this is correct overall",
    "start": "721720",
    "end": "729120"
  },
  {
    "text": "the assumption that the first response has an earlier version of the data is wrong for concurrent requests and remix",
    "start": "729120",
    "end": "734600"
  },
  {
    "text": "does not safgard from these safe uh from these race conditions the safest thing for remix to do is to issue the",
    "start": "734600",
    "end": "740399"
  },
  {
    "text": "revalidation only after submissions completed which may further penalize the user experience by stalling updates",
    "start": "740399",
    "end": "746839"
  },
  {
    "text": "until the last one arrives yeah yeah I I get that like but then you also have the complication I mean not only that but",
    "start": "746839",
    "end": "752839"
  },
  {
    "text": "you have the complication of of groupings right groupings in the sense that you would have to be able to tell",
    "start": "752839",
    "end": "760120"
  },
  {
    "text": "remix what set of actions could potentially Collide on the server such",
    "start": "760120",
    "end": "766279"
  },
  {
    "text": "that revalidation can only happen after the last one uh ends the zip operation ends which seems difficult furthermore",
    "start": "766279",
    "end": "773639"
  },
  {
    "text": "if the concurrent submission modify overlapping resources in the database uh then they must uh converge otherwise",
    "start": "773639",
    "end": "780800"
  },
  {
    "text": "they must be serialized too if you fail to do so there is no guarantee the last submission sent by the user will be the",
    "start": "780800",
    "end": "785959"
  },
  {
    "text": "last one applied on the server also true especially if you have any sort of scaling that is not all single machine I",
    "start": "785959",
    "end": "791440"
  },
  {
    "text": "think this is what live view is attempting to say is that they have a onetoone connection all operations on a",
    "start": "791440",
    "end": "796600"
  },
  {
    "text": "website are performed through a websocket connection websocket connection has a guaranteed inorder",
    "start": "796600",
    "end": "803199"
  },
  {
    "text": "processing which also gives you a guaranteed kind of operation and you can even on the server keep the state of",
    "start": "803199",
    "end": "809240"
  },
  {
    "text": "these operations and be able to apply them in such a way that they do not overlap furthermore uh web sucket",
    "start": "809240",
    "end": "816120"
  },
  {
    "text": "connection got them exor that data and put it in your pipe and then smoke that pipe why you know what I mean why is",
    "start": "816120",
    "end": "823680"
  },
  {
    "text": "this still a thing this is just about concurrency I mean serverless is an",
    "start": "823680",
    "end": "829240"
  },
  {
    "text": "entire world that exists where these type of problems can happen furthermore if the concurrent submission modify",
    "start": "829240",
    "end": "835759"
  },
  {
    "text": "overlapping resources in the database then they must converge otherwise they must be serialized too if you fail to do",
    "start": "835759",
    "end": "841440"
  },
  {
    "text": "so there is no guarantee that the last submission sent by the user will be the last one applied on the server facts on facts on facts on facts especially in a",
    "start": "841440",
    "end": "848279"
  },
  {
    "text": "serverless environment where you actually have these these environments that that exist where a a a request is",
    "start": "848279",
    "end": "855079"
  },
  {
    "text": "processed kind of in its own isolation the benefits of serverless is that it's super simple to think about you just",
    "start": "855079",
    "end": "861040"
  },
  {
    "text": "have this stateless operation you still don't exactly understand what Ser list the easiest way to think about it is",
    "start": "861040",
    "end": "866399"
  },
  {
    "text": "this you have a Ser of series of functions that take in a request object and",
    "start": "866399",
    "end": "871920"
  },
  {
    "text": "produce out a response object effectively like a route and so this",
    "start": "871920",
    "end": "878120"
  },
  {
    "text": "thing right here doesn't technically need a server it doesn't need anything right",
    "start": "878120",
    "end": "884880"
  },
  {
    "text": "this is just an interface added to a function and so you can kind of solve this in any way you would like you could",
    "start": "884880",
    "end": "891040"
  },
  {
    "text": "imagine this is an API this could be a sync library this could be anything but",
    "start": "891040",
    "end": "896079"
  },
  {
    "text": "you could also imagine that you could wrap these functions on a server in which can be stood up if",
    "start": "896079",
    "end": "903360"
  },
  {
    "text": "needed that it could be stood up at any moment that's able to be uh then",
    "start": "903360",
    "end": "908680"
  },
  {
    "text": "processed via HTTP or http2 or HTP 3 or whatever it is or websockets or however",
    "start": "908680",
    "end": "913959"
  },
  {
    "text": "they're doing this hand it to this function when the function responds back out hands it back out and so when this",
    "start": "913959",
    "end": "921320"
  },
  {
    "text": "server's uh put up maybe it can exist for 5 minutes and if no new requests come in well then why have the server",
    "start": "921320",
    "end": "928519"
  },
  {
    "text": "even exist at all it gives this really amazing kind of interface and I I'm being I'm being I'm being real here I",
    "start": "928519",
    "end": "934399"
  },
  {
    "text": "think there's a lot of great ideas in serverless serverless is like the the hascal of web development and what I",
    "start": "934399",
    "end": "940279"
  },
  {
    "text": "mean by that is that serverless creates this kind of like peer abstraction",
    "start": "940279",
    "end": "947680"
  },
  {
    "text": "of of a route it's like hey you have something go in you have something go out and this is where you do all of your",
    "start": "947680",
    "end": "954319"
  },
  {
    "text": "logic this is where everything exists now it's called server lless because you don't actually Define your server and",
    "start": "954319",
    "end": "960079"
  },
  {
    "text": "what it means by this it's a fair statement calling it serverless because typically whenever you have an app you do something like HTTP do serve right",
    "start": "960079",
    "end": "966880"
  },
  {
    "text": "and you have a web address and you do all that but instead this one you don't do that someone else takes care of the",
    "start": "966880",
    "end": "973240"
  },
  {
    "text": "routing and all that you just simply have a function that effectively exists",
    "start": "973240",
    "end": "978440"
  },
  {
    "text": "messages go out messages come uh messages go in messages go out you can't explain that it's pretty much a magnet",
    "start": "978440",
    "end": "984519"
  },
  {
    "text": "it's unexplainable right and so this is the idea of serverless right which means that what I think what Jose is saying is",
    "start": "984519",
    "end": "991160"
  },
  {
    "text": "that if you have three submissions and they all are coming in you could imagine they actually hit different",
    "start": "991160",
    "end": "999279"
  },
  {
    "text": "servers and even though they potentially hit at different times maybe this server",
    "start": "999279",
    "end": "1004519"
  },
  {
    "text": "has a GC Spike because it's been running a little bit longer maybe this one maybe this one had a cold start whereas this",
    "start": "1004519",
    "end": "1011079"
  },
  {
    "text": "one did not experience the same cold start it's it's a non-trivial problem event sourcing",
    "start": "1011079",
    "end": "1017560"
  },
  {
    "text": "should uh solve this it's stateless again now you get into a whole another problem that you're attempting to do",
    "start": "1017560",
    "end": "1023399"
  },
  {
    "text": "you're attempting to order requests based on users uh based on individual users into a pipeline like you wouldn't",
    "start": "1023399",
    "end": "1030480"
  },
  {
    "text": "want to you would want to be able to paralyze per user you'd want to be able to even paralyze even on a user on",
    "start": "1030480",
    "end": "1037880"
  },
  {
    "text": "different uh areas within the UI I mean this is a very this is a very",
    "start": "1037880",
    "end": "1043000"
  },
  {
    "text": "complicated problem and once you really start thinking about it you get into this whole world of complexity that just doesn't need to exist",
    "start": "1043000",
    "end": "1050320"
  },
  {
    "text": "like you also just don't have to do that um all right anyways let's keep on going I mean uh yes a serverless would",
    "start": "1050320",
    "end": "1057559"
  },
  {
    "text": "generally connect a broker through something like uh sqs or CFA yes but then your sqs and your CFA then has to",
    "start": "1057559",
    "end": "1063320"
  },
  {
    "text": "go I mean just just think about how much you've set up just to handle a Rec like",
    "start": "1063320",
    "end": "1069200"
  },
  {
    "text": "just to delete something in order like you have to at least think that for a moment like wow this is a lot this is a",
    "start": "1069200",
    "end": "1077559"
  },
  {
    "text": "lot of Technology just to handle two deletes so they don't get out of order",
    "start": "1077559",
    "end": "1083200"
  },
  {
    "text": "maybe there's something that's a a touch easier maybe just maybe a VPS wasn't actually all",
    "start": "1083200",
    "end": "1090039"
  },
  {
    "text": "that bad of an idea for a moment couldn't one flag just pending deletion on client and uh send these responses to",
    "start": "1090039",
    "end": "1096720"
  },
  {
    "text": "the client when the job is done I mean you have to be able to have a right the problem is is you have to have a third",
    "start": "1096720",
    "end": "1102880"
  },
  {
    "text": "source for that you have to have a source outside defy us all because weapon if these happen on two different machines so you have to have again back",
    "start": "1102880",
    "end": "1110520"
  },
  {
    "text": "to the database now you're doing like what a poll from a database you have to have some sort of operation you're listening for some other queue to",
    "start": "1110520",
    "end": "1116520"
  },
  {
    "text": "respond right there's just the more stateless you become the harder some of these operations can be the more",
    "start": "1116520",
    "end": "1122440"
  },
  {
    "text": "stateful you become the more harder State bugs are and so it's like which one do you which trade-off do you wish",
    "start": "1122440",
    "end": "1127840"
  },
  {
    "text": "to make and I don't think I don't think it's a I don't think it's just like a",
    "start": "1127840",
    "end": "1133320"
  },
  {
    "text": "one is better than the other I think you just have to know that they happen and some problems just don't even have this problem and so therefore or you can just",
    "start": "1133320",
    "end": "1139200"
  },
  {
    "text": "use one over the other and it doesn't really matter at all hey Prime hey Nate Nate how you doing",
    "start": "1139200",
    "end": "1144559"
  },
  {
    "text": "Nate that's just a big old depends why I'm saying that in the sense that I I want people to understand",
    "start": "1144559",
    "end": "1151400"
  },
  {
    "text": "that there is reasons what makes serverless easy serverless is a really",
    "start": "1151400",
    "end": "1156559"
  },
  {
    "text": "easy thing but it also puts uh also can cause some Oddities as well",
    "start": "1156559",
    "end": "1163200"
  },
  {
    "text": "and I'm not even saying it's good or bad I'm just saying it exists that's it all right anyways so we're right here",
    "start": "1163200",
    "end": "1169000"
  },
  {
    "text": "uh intermission Q&A at this point you may have several questions and suggestions so let's go uh let's get some of the quick ones out of the way",
    "start": "1169000",
    "end": "1175320"
  },
  {
    "text": "before we jump in uh couldn't I store locally that an item has been updated SL deleted you can't but lot you",
    "start": "1175320",
    "end": "1182120"
  },
  {
    "text": "know state state right you can definitely do that and that's what I assume most client Frameworks are doing",
    "start": "1182120",
    "end": "1187520"
  },
  {
    "text": "yes that's what they're doing uh the issue above arises when the submission and revalidation approach especially when properties returned by the server",
    "start": "1187520",
    "end": "1193440"
  },
  {
    "text": "are autosync with the client changes spoiler alert single fetch mutation is the worst of course you could start",
    "start": "1193440",
    "end": "1198919"
  },
  {
    "text": "tracking the updates and deletes in your react or remix app as well to keep your UI consistent but then why bother with",
    "start": "1198919",
    "end": "1204799"
  },
  {
    "text": "the submission and revalidation in the first place if you cannot trust the properties returned by the server yes I",
    "start": "1204799",
    "end": "1211440"
  },
  {
    "text": "I this is a great this is a great way to put it which is that you really need you have to have an authority what is the",
    "start": "1211440",
    "end": "1218480"
  },
  {
    "text": "authority is the authority your server or your local state client right Nate in the chat let's go yeah Nate's great by",
    "start": "1218480",
    "end": "1224080"
  },
  {
    "text": "the way Nate is uh Nate is a ex he's helping making chat better he's going to",
    "start": "1224080",
    "end": "1229480"
  },
  {
    "text": "give me all sorts of stuff in chat right uh what if I Delow double submissions the issue described here can also happen",
    "start": "1229480",
    "end": "1235760"
  },
  {
    "text": "when deleting two entries in the same table yes there you go uh so uh you would have to block all interactions",
    "start": "1235760",
    "end": "1242120"
  },
  {
    "text": "within the table component blocking the user from using your UI because your framework cannot deal with concurrent",
    "start": "1242120",
    "end": "1247200"
  },
  {
    "text": "requests is the opposite of good ux UI yeah good uxdx I would I would generally",
    "start": "1247200",
    "end": "1252320"
  },
  {
    "text": "agree with that if you just block an operation because it's hard it's kind of it's like it's funny it's just kind it's like a funny way to solve the problem",
    "start": "1252320",
    "end": "1259400"
  },
  {
    "text": "well why don't you allow me to do it concurrently it's hard it's a hard operation I don't want to do it if they",
    "start": "1259400",
    "end": "1266320"
  },
  {
    "text": "need testing let me know okay I'll let you know isn't the submission and revalidation pattern as described eventually consistent not quite the",
    "start": "1266320",
    "end": "1272520"
  },
  {
    "text": "pattern is eventually consistent in the sense that you'll eventually have the same version as the server but we should",
    "start": "1272520",
    "end": "1277640"
  },
  {
    "text": "not expect an eventually eventually consistent system to return data which we have previously seen as deleted maybe",
    "start": "1277640",
    "end": "1284000"
  },
  {
    "text": "it's better to say ideally we should not see data that has been previously deleted reshow up in an eventually",
    "start": "1284000",
    "end": "1289480"
  },
  {
    "text": "consistent system isn't that kind of the problem about eventually consistent systems is that eventually they will",
    "start": "1289480",
    "end": "1295640"
  },
  {
    "text": "have the right answer but you could have stale or incorrect data yeah uh can the scenario above actually happen a typical",
    "start": "1295640",
    "end": "1302320"
  },
  {
    "text": "web request will pass through proxies load balancer gateways then be thrown into javascript's event Loop and then",
    "start": "1302320",
    "end": "1307679"
  },
  {
    "text": "the database connection polling and transaction locking your database may use and then may uh then make its way",
    "start": "1307679",
    "end": "1313799"
  },
  {
    "text": "back if a single iteration of your event Loop blocks for too long for example by decoding and coding large Jon payloads",
    "start": "1313799",
    "end": "1319679"
  },
  {
    "text": "garbage remember there are major it's called a major garbage collection and a minor garbage collection uh minor",
    "start": "1319679",
    "end": "1324880"
  },
  {
    "text": "garbage collections do not freeze V8 or I guess background scavenges don't back",
    "start": "1324880",
    "end": "1330120"
  },
  {
    "text": "uh freeze V8 but minor and Majors can and Majors most certainly do they stop the world garbage collection uh so it is",
    "start": "1330120",
    "end": "1335880"
  },
  {
    "text": "a real it is a real deal uh that's enough to shuffle the order around you should also consider the fallacy of distributed systems those provide plenty",
    "start": "1335880",
    "end": "1342960"
  },
  {
    "text": "of opportunities for your request and responses to be processed out of order yeah if never assume order of any kind",
    "start": "1342960",
    "end": "1349159"
  },
  {
    "text": "right fallacies yep you were mentioned what about single fetch mutation uh the",
    "start": "1349159",
    "end": "1354360"
  },
  {
    "text": "first time I brought up the latency issue from submission and revalidation a common response was you can do a single",
    "start": "1354360",
    "end": "1360320"
  },
  {
    "text": "request instead while I agree a single request would be preferable it is worth pointing out that they do not solve the",
    "start": "1360320",
    "end": "1366640"
  },
  {
    "text": "underlying problem in fact single fetch mutations will worsen stale data issues a simple way to think about it is that",
    "start": "1366640",
    "end": "1374080"
  },
  {
    "text": "under the submission and revalidation pattern you are guaranteed to have at least one read request after all three",
    "start": "1374080",
    "end": "1379960"
  },
  {
    "text": "submissions but this guarantee is gone under single fetch uh under single fetch oh that makes sense if your first one",
    "start": "1379960",
    "end": "1386480"
  },
  {
    "text": "whatever what whatever one finishes last is the winner I I I get that okay since",
    "start": "1386480",
    "end": "1392600"
  },
  {
    "text": "each request is now updating and deleting the data then let's see updating and deleting the data then",
    "start": "1392600",
    "end": "1398480"
  },
  {
    "text": "reading it you still cannot know nor guarantee which submission read the actual latest version of the data even",
    "start": "1398480",
    "end": "1405400"
  },
  {
    "text": "if you do it all inside a transaction for example does not guarantee that a transaction T1",
    "start": "1405400",
    "end": "1411880"
  },
  {
    "text": "was was started before T2 uh will commit before T2 so the potential for showing",
    "start": "1411880",
    "end": "1417520"
  },
  {
    "text": "stale data is even greater here that makes sense single I mean even though single fetch mutation is significantly",
    "start": "1417520",
    "end": "1423000"
  },
  {
    "text": "faster it's nicer for uh for those that don't know what he's trying to say what he's trying to say is when you do your post why not return the data which",
    "start": "1423000",
    "end": "1430760"
  },
  {
    "text": "obviously just seems like the best way to do it totally like I'm I'm totally on this",
    "start": "1430760",
    "end": "1435840"
  },
  {
    "text": "team like this is the obvious win why do two requests rather than one I'm on that team but he does make a great point",
    "start": "1435840",
    "end": "1442320"
  },
  {
    "text": "which is if you do a series of mutations all in order like a bunch of x's on some table rows then you will cause whatever",
    "start": "1442320",
    "end": "1449320"
  },
  {
    "text": "one finishes last will be the state of your table if it does large uh table updates which I think this can be",
    "start": "1449320",
    "end": "1455480"
  },
  {
    "text": "obviously corrected by doing non-large table updates by doing small table updates but still nonetheless he is",
    "start": "1455480",
    "end": "1461400"
  },
  {
    "text": "correct on that let's see some diagrams starting with the keys submission uh submission",
    "start": "1461400",
    "end": "1468039"
  },
  {
    "text": "updated and deleted data read revalidated data is committed to the UI this is how most people would expect this to uh happen yep uh update read",
    "start": "1468039",
    "end": "1477640"
  },
  {
    "text": "this update read this update read this uh but submission two could delay and you end up with something like this",
    "start": "1477640",
    "end": "1485039"
  },
  {
    "text": "yes yes if you assume the latest submission the the last submission is correct it will show the result of three",
    "start": "1485039",
    "end": "1491399"
  },
  {
    "text": "submissions in the UI but the UI server state is actually the one from submission two uh while the users may",
    "start": "1491399",
    "end": "1498520"
  },
  {
    "text": "see stale data in web applications when another user changes it a user must not see stale data when they submit it",
    "start": "1498520",
    "end": "1504640"
  },
  {
    "text": "themselves that's fair you don't have to have a a live reacting website to all users using the same data but you most",
    "start": "1504640",
    "end": "1511200"
  },
  {
    "text": "certainly don't want the user to do an action and see stale data the above is just one possible variation of what may",
    "start": "1511200",
    "end": "1517960"
  },
  {
    "text": "actually happen fair by the way this is fair the simplest way to address these issues is",
    "start": "1517960",
    "end": "1523279"
  },
  {
    "text": "to disable concurrent request and deal with the impact of user experience Fair perhaps uh we we could do better you",
    "start": "1523279",
    "end": "1529120"
  },
  {
    "text": "always see stale data the speed of light is finite I know but that's not the argument he's making the argument he's making is right here which is",
    "start": "1529120",
    "end": "1535760"
  },
  {
    "text": "that submission three is the final one to be created therefore its update and therefore its read is the correct one",
    "start": "1535760",
    "end": "1542559"
  },
  {
    "text": "but the fact is that its read happened before submission 2's update therefore you will see submission 3's reads output",
    "start": "1542559",
    "end": "1550440"
  },
  {
    "text": "which does not contain your mutation that happened on submission 2 that's what he's attempting to say here all",
    "start": "1550440",
    "end": "1555520"
  },
  {
    "text": "right in search of solutions it is generally not possible to know the a transaction will be committed within the transaction itself except by making",
    "start": "1555520",
    "end": "1562480"
  },
  {
    "text": "transactions serializable which could cause a huge impact on performance uh you could use something",
    "start": "1562480",
    "end": "1569360"
  },
  {
    "text": "akin to post GRE squeal uh PG current snapshot to tell you which transactions are currently running and that can give",
    "start": "1569360",
    "end": "1575960"
  },
  {
    "text": "you some feedback but if there are three transactions from three submissions overlap each other you are still stuck",
    "start": "1575960",
    "end": "1581840"
  },
  {
    "text": "and it's also just a really hard problem to solve generally or to solve that way someone may also consider using sticky",
    "start": "1581840",
    "end": "1587159"
  },
  {
    "text": "sessions server affinity to guarantee the submissions are sent to the same instance and processed in the same order",
    "start": "1587159",
    "end": "1592399"
  },
  {
    "text": "by the way this is a very good thing using the same server is really",
    "start": "1592399",
    "end": "1598320"
  },
  {
    "text": "really good there's so much caching that can be done on the server even transparent to the user or the programmer that can be done if you just",
    "start": "1598320",
    "end": "1604720"
  },
  {
    "text": "use the same server over and over again the whole random server random request thing is just kind of like a really",
    "start": "1604720",
    "end": "1609880"
  },
  {
    "text": "inefficient pattern but you still have to deal with the event Loop and hope that the transactions are started in",
    "start": "1609880",
    "end": "1614919"
  },
  {
    "text": "order and end in the same order they started you could opt into serialization transactions at the database level but",
    "start": "1614919",
    "end": "1620520"
  },
  {
    "text": "that could be D but that could drastically impact a database performance remix's own documentations",
    "start": "1620520",
    "end": "1627159"
  },
  {
    "text": "uh documentation mentions the potential of stale data and one of the solutions they suggest is to include timestamps in",
    "start": "1627159",
    "end": "1633039"
  },
  {
    "text": "form submissions but but I failed to see how that could work assuming a server gets a time stamp how could it possibly",
    "start": "1633039",
    "end": "1638679"
  },
  {
    "text": "know if the if there is a later timestamp making the current one to be invalid yeah and even this one could be",
    "start": "1638679",
    "end": "1644000"
  },
  {
    "text": "really confusing right here like when does the when should the time stamp be derived",
    "start": "1644000",
    "end": "1649159"
  },
  {
    "text": "which one is the latest one is it the latest read is that effectively the last one to read is truly the one that",
    "start": "1649159",
    "end": "1656559"
  },
  {
    "text": "receives the time stamp that I guess that would probably be it is that you have to use the read Tim stamp as the latest one is there a situation in the",
    "start": "1656559",
    "end": "1662159"
  },
  {
    "text": "latest read is out ofd I don't think so but still it's a very it's a very",
    "start": "1662159",
    "end": "1667559"
  },
  {
    "text": "interesting kind of way to approach the problem assuming a server gets a time stamp how could you possibly know if the latter T the later time stamp is making",
    "start": "1667559",
    "end": "1673919"
  },
  {
    "text": "the current one to be invalid The Simple Solution I can think about this problem requires is at least uh causal ordering",
    "start": "1673919",
    "end": "1681480"
  },
  {
    "text": "uh but I may have missed simpler models solution number one causal ordering the idea with causal ordering is that if if",
    "start": "1681480",
    "end": "1687360"
  },
  {
    "text": "I perform three submissions 1 two three the submission two should carry with itself the information that it depends",
    "start": "1687360",
    "end": "1693120"
  },
  {
    "text": "on the execution of submission one and submission three depends on number two assuming we are aware of s sticky",
    "start": "1693120",
    "end": "1699000"
  },
  {
    "text": "sessions we can route all requests to the same nodejs instance then you can make it so submission two blocks until",
    "start": "1699000",
    "end": "1705039"
  },
  {
    "text": "submission one is completed until let's see using some event system within the JavaScript runtime to guarantee they are",
    "start": "1705039",
    "end": "1710480"
  },
  {
    "text": "processed in correct order on the other hand because the server may receive submission two after submission one has",
    "start": "1710480",
    "end": "1716080"
  },
  {
    "text": "been fully complete the notification that submission one has been completed may already have been emitted to address this the server would need to keep a log",
    "start": "1716080",
    "end": "1722320"
  },
  {
    "text": "of all completed submissions within a time period very hard Problem by the way by the way this is a very very hard",
    "start": "1722320",
    "end": "1728080"
  },
  {
    "text": "problem the benefit of this approach is that the client uh can fire requests immediately and the server can also send",
    "start": "1728080",
    "end": "1734600"
  },
  {
    "text": "concurrent responses as long as it orders the updates and reads Within okay this makes",
    "start": "1734600",
    "end": "1739720"
  },
  {
    "text": "sense uh yeah yeah uh P you can do an",
    "start": "1739720",
    "end": "1745000"
  },
  {
    "text": "update you can do the updates before the reads but you can't do updates you know like this update",
    "start": "1745000",
    "end": "1751559"
  },
  {
    "text": "versus this update have to H happen in that order polling leads to sadness unless it is an extremely simple system",
    "start": "1751559",
    "end": "1757080"
  },
  {
    "text": "yes polling generally leads to sadness of course response for submission to may still arrive earlier than submission one",
    "start": "1757080",
    "end": "1762919"
  },
  {
    "text": "but because the server has ordered them it is completely safe to ignore the result of submission one facts while I",
    "start": "1762919",
    "end": "1768799"
  },
  {
    "text": "believe uh this would solve the problem it comes with the complexity of ordering concurrent events by keeping history in each node.js process and you can still",
    "start": "1768799",
    "end": "1775080"
  },
  {
    "text": "only deploy it to infrastructure that supports sticky sessions exactly so if you route to any other server you",
    "start": "1775080",
    "end": "1780840"
  },
  {
    "text": "completely explo completely explod it um one possible alternative to Sticky",
    "start": "1780840",
    "end": "1786360"
  },
  {
    "text": "sessions suggested by Dev Agro wall hey Dev let's go Dev is to use database transactions and locks to maintain the",
    "start": "1786360",
    "end": "1792919"
  },
  {
    "text": "causal order uh each client gets a database row with the last uh submission ID and the the submission may only",
    "start": "1792919",
    "end": "1799240"
  },
  {
    "text": "continue if the relevant last submission ID has been committed locks would be used to ensure submissions from the same",
    "start": "1799240",
    "end": "1805240"
  },
  {
    "text": "client are not processed or are not processed concurrently by the server this approach requires you to hold a",
    "start": "1805240",
    "end": "1810320"
  },
  {
    "text": "transaction lock for the duration of each request which may put additional pressure on your database pool and increase the likelihood of Deadlocks if",
    "start": "1810320",
    "end": "1817000"
  },
  {
    "text": "any locking mechanism is used within your application for actual data Integrity the overall implementation feasibility and cost will depend on your",
    "start": "1817000",
    "end": "1823320"
  },
  {
    "text": "database of choice also very hard to do locking stuff generally generally",
    "start": "1823320",
    "end": "1829640"
  },
  {
    "text": "speaking it's very if you've never done a lot of mutex type work like I know this is just this is a variant of a",
    "start": "1829640",
    "end": "1836080"
  },
  {
    "text": "mutex it's extremely easy to completely F that one up like very very much so you",
    "start": "1836080",
    "end": "1842720"
  },
  {
    "text": "know how you know how easy it is to acally do something re-entrant or something that causes a lock to depend on a lock and then you're just",
    "start": "1842720",
    "end": "1848559"
  },
  {
    "text": "completely effed and you have just no idea how it works and then you have to play the game of why is this happening",
    "start": "1848559",
    "end": "1854080"
  },
  {
    "text": "oh camera died thank you yes I dude I still have the problem right now I am still getting my power situation figured",
    "start": "1854080",
    "end": "1860279"
  },
  {
    "text": "out so I'm still running my camera off a series of batteries I'll be right I let me turn it back on looking good big",
    "start": "1860279",
    "end": "1866279"
  },
  {
    "text": "fella the reason why I'm saying all these things are actually hard cuz I mean a lot of these things aren't hard",
    "start": "1866279",
    "end": "1871480"
  },
  {
    "text": "in the sense that uh this one right here where you use sticky sessions and then you have some sort of log SL emitting",
    "start": "1871480",
    "end": "1878279"
  },
  {
    "text": "system with happen on the same system like in memory emitting systems and all this really is not that hard but you",
    "start": "1878279",
    "end": "1885600"
  },
  {
    "text": "have to have client side state to be able to link request two with some sort of ID that can uh link to request one so",
    "start": "1885600",
    "end": "1891679"
  },
  {
    "text": "it's state but then on top of that you have state on the server that has to live for some amount of time and what",
    "start": "1891679",
    "end": "1898159"
  },
  {
    "text": "I'm really trying to say is this is a cash invalidation problem at some point and that's a very difficult thing to do",
    "start": "1898159",
    "end": "1904279"
  },
  {
    "text": "typically whenever you're working with caches and having to store data and putting dependencies on each other you run into this really difficult problem",
    "start": "1904279",
    "end": "1911360"
  },
  {
    "text": "that you end up having these really bizarre edge cases you just weren't prepared for solution number two persistence all the way another solution",
    "start": "1911360",
    "end": "1917480"
  },
  {
    "text": "is one employed by Phoenix live view is to keep an open connection between client and server by the way this this",
    "start": "1917480",
    "end": "1922760"
  },
  {
    "text": "encourages obviously you can only have it only happens on one server a client only uses one server which inherently",
    "start": "1922760",
    "end": "1929120"
  },
  {
    "text": "puts an ease of use using websockets this way all events are received and can be processed in order again websockets",
    "start": "1929120",
    "end": "1935279"
  },
  {
    "text": "use TCP they're considered in order uh there is a small problem with JavaScript if you use the JavaScript websocket",
    "start": "1935279",
    "end": "1941039"
  },
  {
    "text": "library and you don't enable this magic flag in which nobody tells you what it is and I cannot remember it myself or",
    "start": "1941039",
    "end": "1946320"
  },
  {
    "text": "and you use a binary protocol you can actually receive websocket messages which are trans which are transported in",
    "start": "1946320",
    "end": "1952080"
  },
  {
    "text": "order and processed in order out of order which is an exceptionally painful and",
    "start": "1952080",
    "end": "1957880"
  },
  {
    "text": "awful reality of websockets in ja JavaScript this way all events are received and can be processed in order",
    "start": "1957880",
    "end": "1964320"
  },
  {
    "text": "which guarantees the database reads and all updates will be delivered in order but you can also easily process them",
    "start": "1964320",
    "end": "1969720"
  },
  {
    "text": "concurrently using Elixir if you deem uh if you deem it safe to do so one potential caveat here is requirement to",
    "start": "1969720",
    "end": "1976679"
  },
  {
    "text": "use websockets of course course you can always fall back to Long polling or can you the issue with long polling is that",
    "start": "1976679",
    "end": "1982240"
  },
  {
    "text": "you are back to issuing a separate HTTP request which can be routed to different servers and now we're back to this uh",
    "start": "1982240",
    "end": "1989000"
  },
  {
    "text": "back to Solution One you need sticky sessions and causal ordering between the requests yeah so long pulling doesn't",
    "start": "1989000",
    "end": "1994039"
  },
  {
    "text": "quite work because you do recreate that one websockets is a guarantee the ordering is in TC the ordering is in the",
    "start": "1994039",
    "end": "2000840"
  },
  {
    "text": "TCP or can you indeed there by the way this is a great article Jose you did an",
    "start": "2000840",
    "end": "2006000"
  },
  {
    "text": "amazing job I love the breakdown love just the arguing and the thing is is that this probably doesn't matter to",
    "start": "2006000",
    "end": "2011559"
  },
  {
    "text": "most developers but it is a really good thing to understand why this exists to begin with why have people made these",
    "start": "2011559",
    "end": "2017600"
  },
  {
    "text": "trade-offs to begin with fantastic article uh therefore you may be wondering how does Phoenix live view solve this I am glad you asked when you",
    "start": "2017600",
    "end": "2024000"
  },
  {
    "text": "start a long polling Connection in live view imagine it goes to server one live view starts a lightweight or L VM",
    "start": "2024000",
    "end": "2029279"
  },
  {
    "text": "process you can literally spawn millions of those to be responsible for that particular session and assign a session",
    "start": "2029279",
    "end": "2034320"
  },
  {
    "text": "identifier to it once the long polling request concludes we include the session identifier in the response now when the",
    "start": "2034320",
    "end": "2040760"
  },
  {
    "text": "client does the next long pulling request it may go to server 2 but it also includes the session identifier because Phoenix runs on top of the llang",
    "start": "2040760",
    "end": "2047559"
  },
  {
    "text": "VM it uses the llang distribution to find the process in the uh in the other node preserving the persistence property",
    "start": "2047559",
    "end": "2054679"
  },
  {
    "text": "we are interested in I actually recommend checking out the long pulling implementation in Phoenix since this all",
    "start": "2054679",
    "end": "2059800"
  },
  {
    "text": "achieves with uh with 450 lines of code wow so does some sort of uh uh",
    "start": "2059800",
    "end": "2065320"
  },
  {
    "text": "consistent hashing to find the right server process is that is that what I'm is that what",
    "start": "2065320",
    "end": "2070398"
  },
  {
    "text": "I'm hearing here cuz that's like bro just made map ruce in like 450 lines of",
    "start": "2070399",
    "end": "2075839"
  },
  {
    "text": "code due to the erlang virtual machine uh is that what dude this is great that",
    "start": "2075839",
    "end": "2082240"
  },
  {
    "text": "I would have to it's like sticky sessions is effectively What's Happening Here I think that's what he's saying he's like doing sticky sessions on",
    "start": "2082240",
    "end": "2088200"
  },
  {
    "text": "processes M produce in earling is basically hello world okay",
    "start": "2088200",
    "end": "2095200"
  },
  {
    "text": "anyways consistent hashes and stuff like that that that is really cool virtual actor pattern yeah that completely",
    "start": "2095200",
    "end": "2100800"
  },
  {
    "text": "amazing uh I don't quite get it cuz I again I only really like to talk about the things that I've I've implemented",
    "start": "2100800",
    "end": "2106560"
  },
  {
    "text": "myself and so I haven't done much with the actor pattern other than use it slightly so I'm not fully familiar with",
    "start": "2106560",
    "end": "2111760"
  },
  {
    "text": "it all unfortunately I mean I just think this is completely amazing that you could do it with 450 lines of code again",
    "start": "2111760",
    "end": "2117920"
  },
  {
    "text": "it just goes to show that maybe my assumptions about Elixir are wrong and maybe I just need to just accept Elixir",
    "start": "2117920",
    "end": "2124920"
  },
  {
    "text": "into my heart as the best programming language all hail beam I know I L Cool",
    "start": "2124920",
    "end": "2130320"
  },
  {
    "text": "Chris is this true L Cool Chris do I just need to accept it into my heart finally he said",
    "start": "2130320",
    "end": "2136680"
  },
  {
    "text": "it uh program shift on camera paradigm shift on camera once you go Elixir you",
    "start": "2136680",
    "end": "2142040"
  },
  {
    "text": "never go back I mean my only big worry about going into the Elixir world is that I actually end up loving it and",
    "start": "2142040",
    "end": "2147480"
  },
  {
    "text": "then I can program nothing else but my typ safety I mean one thing I really love type safety but they also have",
    "start": "2147480",
    "end": "2152560"
  },
  {
    "text": "pattern matching pattern matching on functions does reduce a whole series of type safety issues",
    "start": "2152560",
    "end": "2158200"
  },
  {
    "text": "and so there is like an entire thing of type safety that can be kind of offloaded to pattern matching uh pattern",
    "start": "2158200",
    "end": "2164680"
  },
  {
    "text": "matching solves almost everything yeah but I'm also pretty weak at my ability to do pattern matching solving right",
    "start": "2164680",
    "end": "2170079"
  },
  {
    "text": "pattern matching as a tool to uh problem solving I've done so little of that I bet you I'd be really bad at it because",
    "start": "2170079",
    "end": "2176839"
  },
  {
    "text": "I see these people do these amazing pattern matching and I'm just like damn son that's",
    "start": "2176839",
    "end": "2182480"
  },
  {
    "text": "crazy you know facts so many Elixir enjoyers and I",
    "start": "2182480",
    "end": "2187839"
  },
  {
    "text": "uh and I want to be like but what if I love it and it's over dude it's so over that's my big like honestly that's why",
    "start": "2187839",
    "end": "2193960"
  },
  {
    "text": "I'm worried is this exact thing is that I go I love it I can never do anything",
    "start": "2193960",
    "end": "2199000"
  },
  {
    "text": "ever again ah goang disgusting ah JavaScript disgusting rust gross zig h",
    "start": "2199000",
    "end": "2205319"
  },
  {
    "text": "and then all a sudden the ad ruined everything I'm sorry that the ad ruined everything but isn't it funny alixir is",
    "start": "2205319",
    "end": "2211839"
  },
  {
    "text": "a cult right man of course you get all let's see you",
    "start": "2211839",
    "end": "2217640"
  },
  {
    "text": "could always try to bring another service paid or self-hosted but I'm drawing the line at bringing in additional complexity and services just",
    "start": "2217640",
    "end": "2223920"
  },
  {
    "text": "to guarantee framework won't serve stale data and updates yeah it should be built in I think I think he's right we have to",
    "start": "2223920",
    "end": "2229240"
  },
  {
    "text": "talk about canceled submission so far we have explored the downsides of submissions and revalidation approach it causes the user experience to lag",
    "start": "2229240",
    "end": "2235119"
  },
  {
    "text": "unnecessarily and re and remix in particular does not deliver on the promise of safeguarding most applications from race conditions",
    "start": "2235119",
    "end": "2241520"
  },
  {
    "text": "however it is worth noting that uh remix may also cancel submissions which can become a massive problem first of all",
    "start": "2241520",
    "end": "2248440"
  },
  {
    "text": "you can only cancel a submission in favor of a subsequent one if they are item potent uh we ideally want to",
    "start": "2248440",
    "end": "2254680"
  },
  {
    "text": "implement endpoints as IDM potent by the way Canadians idempotent where's my Canadians at calling it idempotent where",
    "start": "2254680",
    "end": "2260240"
  },
  {
    "text": "are you guys at type one in the chat if you call it idempotent do you also called it an",
    "start": "2260240",
    "end": "2265560"
  },
  {
    "text": "automata that was one of my that was one of my hardest ones to get over was when",
    "start": "2265560",
    "end": "2270960"
  },
  {
    "text": "someone said epitent and automata I was like yo dog I don't know",
    "start": "2270960",
    "end": "2277920"
  },
  {
    "text": "what those are I don't know what that even means I respect most people use",
    "start": "2277920",
    "end": "2283000"
  },
  {
    "text": "itemp poent item potent in their vocabulary for those that don't know let's click it through Wikipedia item",
    "start": "2283000",
    "end": "2288760"
  },
  {
    "text": "potent is a property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the",
    "start": "2288760",
    "end": "2294800"
  },
  {
    "text": "result beyond the initial application uh effectively one of the things that can be dangerous with with this where people",
    "start": "2294800",
    "end": "2299839"
  },
  {
    "text": "don't realize is that if time isn't is a a parameter whether implicit or explicit",
    "start": "2299839",
    "end": "2306200"
  },
  {
    "text": "it can cause end points that are I item potent to become non- item potent so",
    "start": "2306200",
    "end": "2311440"
  },
  {
    "text": "it's it's very good in other words if you call function X it with or if you",
    "start": "2311440",
    "end": "2316880"
  },
  {
    "text": "call function with XYZ it should produce a every single time well I'm not a CS uh",
    "start": "2316880",
    "end": "2322359"
  },
  {
    "text": "degree but that it just it it makes it really easy if you just think about it that way you have a function that takes",
    "start": "2322359",
    "end": "2327800"
  },
  {
    "text": "in X and Y it should produce Z I think that's that's like the easiest way to",
    "start": "2327800",
    "end": "2333359"
  },
  {
    "text": "visualize it I uh item potent throwing this in the standup today you should",
    "start": "2333359",
    "end": "2338400"
  },
  {
    "text": "you should uh still the biggest issues is that cancel requests may still receive by the server and based on",
    "start": "2338400",
    "end": "2343880"
  },
  {
    "text": "everything we've discussed be processed after subsequent submissions remix actually recognizes this in their documentation with the following diagram",
    "start": "2343880",
    "end": "2350920"
  },
  {
    "text": "here Interruption with a new submission here this right initial request reaches",
    "start": "2350920",
    "end": "2356480"
  },
  {
    "text": "the server after the interrupting submission has completed uh revalidation but then they uh proceed to dismiss this",
    "start": "2356480",
    "end": "2362359"
  },
  {
    "text": "scenario as an issue only possible with inconsistent infrastructure it happens that your network and infrastructure",
    "start": "2362359",
    "end": "2368280"
  },
  {
    "text": "won't be homogeneous and they don't consider that after a request is sent it will pass through proxies load balancers",
    "start": "2368280",
    "end": "2374680"
  },
  {
    "text": "gateways then be thrown into JavaScript event Loop there's also you know separate servers have separate garbage",
    "start": "2374680",
    "end": "2381040"
  },
  {
    "text": "collections we talked about I mean there's whole different reasons why these things can happen then the database connection pool and TR any",
    "start": "2381040",
    "end": "2386599"
  },
  {
    "text": "transaction locking your database may use uh uh may use before it performs any right so even if you are willing to",
    "start": "2386599",
    "end": "2392839"
  },
  {
    "text": "accept the double round trip of submission and revalidation it's race condition or lack of currency if they so",
    "start": "2392839",
    "end": "2399160"
  },
  {
    "text": "choose to disable the feature so you have to contend with the fact that your users may see stale data immediately",
    "start": "2399160",
    "end": "2404720"
  },
  {
    "text": "after submission which can go from minor UI nuan uh nuisances to Leading them to",
    "start": "2404720",
    "end": "2411160"
  },
  {
    "text": "wrong decisions such as clicking a Buy on buy now thinking a particular order had two line items but the server",
    "start": "2411160",
    "end": "2417680"
  },
  {
    "text": "actually stored three thanks to a canceled submission ooh that could be kind of",
    "start": "2417680",
    "end": "2423319"
  },
  {
    "text": "wild clock synchronization let's go when this uh particular problem could happen in web web applications written 20 years",
    "start": "2423319",
    "end": "2430400"
  },
  {
    "text": "ago for example by double submitting a form encouraging users to rely on concurrent request in active",
    "start": "2430400",
    "end": "2435920"
  },
  {
    "text": "cancellation may make this problem more frequent I also believe we should aim to improve on the limitations of the past",
    "start": "2435920",
    "end": "2443319"
  },
  {
    "text": "rather than reaffirm them luckily introducing uh causal ordering or persistence would fully address this",
    "start": "2443319",
    "end": "2449640"
  },
  {
    "text": "problem overall I hope this article shows that if you're going to use the server state to drive the UI concurrent",
    "start": "2449640",
    "end": "2454920"
  },
  {
    "text": "submissions can be the source of pitfalls race conditions and inconsistencies uh which can be addressed by introducing uh causal",
    "start": "2454920",
    "end": "2461680"
  },
  {
    "text": "ordering very cool great great article by the way great article thank you Jose for this one uh",
    "start": "2461680",
    "end": "2467920"
  },
  {
    "text": "it's really good things to think about I think even if you I don't think anything in here because I think some people look",
    "start": "2467920",
    "end": "2473960"
  },
  {
    "text": "at this as Jose dunking on remix I don't think he's dunking on remix I think he's just really spotlighting a problem that",
    "start": "2473960",
    "end": "2479599"
  },
  {
    "text": "can exist and it's real right like this is a real problem and maybe it's rare or",
    "start": "2479599",
    "end": "2484800"
  },
  {
    "text": "semi- rare but it's still a real problem can cause real people uh or problems to people and it can be annoying and maybe",
    "start": "2484800",
    "end": "2491640"
  },
  {
    "text": "it's just one of those things where you see it it's annoying and you move on or maybe it is something as bad as a buy now button that says two on your uh",
    "start": "2491640",
    "end": "2498079"
  },
  {
    "text": "client but three on the server which can be very frustrating dude knows what he's talking about oh he does he is very Jose",
    "start": "2498079",
    "end": "2504560"
  },
  {
    "text": "is definitely definitely very very smart he's helping remix improve as a fellow",
    "start": "2504560",
    "end": "2509960"
  },
  {
    "text": "client server Bros yeah exactly he's pointing a very good way to make things",
    "start": "2509960",
    "end": "2515040"
  },
  {
    "text": "like the obviousness of the problems hey the name is the primy",
    "start": "2515040",
    "end": "2521560"
  }
]