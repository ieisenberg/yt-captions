[
  {
    "text": "okay hold on whoa whoa whoa whoa your",
    "start": "0",
    "end": "2340"
  },
  {
    "text": "CPU may be faster than you think I've",
    "start": "2340",
    "end": "4440"
  },
  {
    "text": "been arguing with one of my friends",
    "start": "4440",
    "end": "6060"
  },
  {
    "text": "lately about CPU and GPU optimization",
    "start": "6060",
    "end": "9480"
  },
  {
    "text": "my friend sent me tons of Nvidia",
    "start": "9480",
    "end": "11760"
  },
  {
    "text": "propaganda about GPU acceleration you",
    "start": "11760",
    "end": "14820"
  },
  {
    "text": "can't put Discord notifications in a",
    "start": "14820",
    "end": "16619"
  },
  {
    "text": "video every single person in this video",
    "start": "16619",
    "end": "19500"
  },
  {
    "text": "just got triggered and went and checked",
    "start": "19500",
    "end": "21779"
  },
  {
    "text": "their Discord now look at them they're",
    "start": "21779",
    "end": "23820"
  },
  {
    "text": "confused about what's happening how",
    "start": "23820",
    "end": "25980"
  },
  {
    "text": "faster as Pi towards GPU than CPU blah",
    "start": "25980",
    "end": "28740"
  },
  {
    "text": "blah blah blah and I can't really agree",
    "start": "28740",
    "end": "31140"
  },
  {
    "text": "with him",
    "start": "31140",
    "end": "32220"
  },
  {
    "text": "I have to admit that I'm a little bit",
    "start": "32220",
    "end": "34739"
  },
  {
    "text": "too obsessed with CPU optimization after",
    "start": "34739",
    "end": "37800"
  },
  {
    "text": "taking a course called parallel and",
    "start": "37800",
    "end": "39600"
  },
  {
    "text": "throughput optimize the programming last",
    "start": "39600",
    "end": "41520"
  },
  {
    "text": "semester",
    "start": "41520",
    "end": "42660"
  },
  {
    "text": "but I still think spending all the days",
    "start": "42660",
    "end": "44940"
  },
  {
    "text": "coding in JavaScript makes people spring",
    "start": "44940",
    "end": "47040"
  },
  {
    "text": "sales shrink and many people have",
    "start": "47040",
    "end": "49260"
  },
  {
    "text": "already forgotten",
    "start": "49260",
    "end": "52160"
  },
  {
    "text": "who is this man who is he who is this",
    "start": "55199",
    "end": "59760"
  },
  {
    "text": "man who states publicly programming with",
    "start": "59760",
    "end": "63180"
  },
  {
    "text": "JavaScript makes your brain cells shrink",
    "start": "63180",
    "end": "65518"
  },
  {
    "text": "oh my goodness",
    "start": "65519",
    "end": "69438"
  },
  {
    "text": "what a beautiful man here and how fast",
    "start": "70159",
    "end": "73680"
  },
  {
    "text": "CPUs can really be",
    "start": "73680",
    "end": "75540"
  },
  {
    "text": "I mean you don't need to think about CMD",
    "start": "75540",
    "end": "78060"
  },
  {
    "text": "or even multi-threading when using",
    "start": "78060",
    "end": "79680"
  },
  {
    "text": "node.js as a [ __ ] back-end developer",
    "start": "79680",
    "end": "82790"
  },
  {
    "text": "[Music]",
    "start": "82790",
    "end": "84520"
  },
  {
    "text": "[Laughter]",
    "start": "84520",
    "end": "89170"
  },
  {
    "text": "I love when someone's just like",
    "start": "90560",
    "end": "93659"
  },
  {
    "text": "when someone's just like yeah no it's",
    "start": "93659",
    "end": "95280"
  },
  {
    "text": "really easy to use you just you just",
    "start": "95280",
    "end": "96840"
  },
  {
    "text": "spawn n minus one node processes where n",
    "start": "96840",
    "end": "100079"
  },
  {
    "text": "is the amount of threads you have and",
    "start": "100079",
    "end": "101280"
  },
  {
    "text": "you're just like dude that's how you're",
    "start": "101280",
    "end": "103200"
  },
  {
    "text": "solving it",
    "start": "103200",
    "end": "105798"
  },
  {
    "text": "first off that's like a whole system",
    "start": "105960",
    "end": "107640"
  },
  {
    "text": "onto itself what you're saying",
    "start": "107640",
    "end": "111540"
  },
  {
    "text": "what",
    "start": "111540",
    "end": "112799"
  },
  {
    "text": "porque Maria",
    "start": "112799",
    "end": "114960"
  },
  {
    "text": "speak English let's take another look at",
    "start": "114960",
    "end": "117479"
  },
  {
    "text": "the performance comparison in this Pi",
    "start": "117479",
    "end": "119579"
  },
  {
    "text": "torch Community Post in the post this",
    "start": "119579",
    "end": "123119"
  },
  {
    "text": "user mentioned BGG 16 is 66 times slower",
    "start": "123119",
    "end": "127020"
  },
  {
    "text": "um",
    "start": "127020",
    "end": "127580"
  },
  {
    "text": "E5 2630b3 CPU compared to a Titan X GPU",
    "start": "127580",
    "end": "133440"
  },
  {
    "text": "so what is the theoretical performance",
    "start": "133440",
    "end": "135780"
  },
  {
    "text": "difference between these two Hardware",
    "start": "135780",
    "end": "137840"
  },
  {
    "text": "the metric we are using is floating",
    "start": "137840",
    "end": "140879"
  },
  {
    "text": "Point operations per second or flops",
    "start": "140879",
    "end": "144420"
  },
  {
    "text": "and we can find all the specs we need on",
    "start": "144420",
    "end": "146819"
  },
  {
    "text": "Intel",
    "start": "146819",
    "end": "148080"
  },
  {
    "text": "you know where I learned about flops",
    "start": "148080",
    "end": "149760"
  },
  {
    "text": "from I learned it from pick",
    "start": "149760",
    "end": "151940"
  },
  {
    "text": "taught me all about flopping it he",
    "start": "151940",
    "end": "154920"
  },
  {
    "text": "really he knew he knew what he's doing",
    "start": "154920",
    "end": "156300"
  },
  {
    "text": "he was very good at it too",
    "start": "156300",
    "end": "158099"
  },
  {
    "text": "and a VDS official website",
    "start": "158099",
    "end": "160680"
  },
  {
    "text": "take this ZM processor for example it",
    "start": "160680",
    "end": "163920"
  },
  {
    "text": "has eight cores with a base frequency of",
    "start": "163920",
    "end": "166440"
  },
  {
    "text": "2.4 gigahertz",
    "start": "166440",
    "end": "168540"
  },
  {
    "text": "that is 19.2 Giga cycles per second",
    "start": "168540",
    "end": "173540"
  },
  {
    "text": "including bandwidth of a single 2630",
    "start": "173540",
    "end": "176640"
  },
  {
    "text": "will therefore be 19.2 gigaflops",
    "start": "176640",
    "end": "180060"
  },
  {
    "text": "but this processor can actually perform",
    "start": "180060",
    "end": "182700"
  },
  {
    "text": "more than one floating Point operation",
    "start": "182700",
    "end": "184800"
  },
  {
    "text": "per cycle",
    "start": "184800",
    "end": "186540"
  },
  {
    "text": "specifically this CPUs support avx2",
    "start": "186540",
    "end": "189840"
  },
  {
    "text": "instruction set extension which can",
    "start": "189840",
    "end": "192239"
  },
  {
    "text": "process 8 floats in a single cycle we'll",
    "start": "192239",
    "end": "195300"
  },
  {
    "text": "talk about that later",
    "start": "195300",
    "end": "197280"
  },
  {
    "text": "huh",
    "start": "197280",
    "end": "199319"
  },
  {
    "text": "it's pretty fast huh",
    "start": "199319",
    "end": "201480"
  },
  {
    "text": "man",
    "start": "201480",
    "end": "202500"
  },
  {
    "text": "the Giga chat gigaflopping over here I",
    "start": "202500",
    "end": "204780"
  },
  {
    "text": "mean this this boy's gonna be",
    "start": "204780",
    "end": "206040"
  },
  {
    "text": "teraflopping at any point",
    "start": "206040",
    "end": "209420"
  },
  {
    "text": "this is exciting the theoretical",
    "start": "209659",
    "end": "211739"
  },
  {
    "text": "computational bandwidth or one of these",
    "start": "211739",
    "end": "214140"
  },
  {
    "text": "chips it's",
    "start": "214140",
    "end": "216180"
  },
  {
    "text": "it's okay calm down it will be",
    "start": "216180",
    "end": "218420"
  },
  {
    "text": "153.6 gigaflops and a dual CPU setup",
    "start": "218420",
    "end": "222239"
  },
  {
    "text": "will be around 300 gigaflops in total",
    "start": "222239",
    "end": "225540"
  },
  {
    "text": "what about the performance protagon ads",
    "start": "225540",
    "end": "228780"
  },
  {
    "text": "a GTX Titan X has around 3 000 Kodak",
    "start": "228780",
    "end": "231840"
  },
  {
    "text": "cores with a base frequency of 1",
    "start": "231840",
    "end": "234000"
  },
  {
    "text": "gigahertz",
    "start": "234000",
    "end": "235260"
  },
  {
    "text": "we therefore the theoretical",
    "start": "235260",
    "end": "237480"
  },
  {
    "text": "computational bandwidth will be 2.9",
    "start": "237480",
    "end": "239879"
  },
  {
    "text": "teraflops",
    "start": "239879",
    "end": "242599"
  },
  {
    "text": "wait that's a that's a Terra chat right",
    "start": "243299",
    "end": "245519"
  },
  {
    "text": "there we haven't seen a Terra chat I",
    "start": "245519",
    "end": "247260"
  },
  {
    "text": "didn't think they existed I've heard",
    "start": "247260",
    "end": "248519"
  },
  {
    "text": "about them I didn't know that they are",
    "start": "248519",
    "end": "250439"
  },
  {
    "text": "real but apparently they're real we have",
    "start": "250439",
    "end": "252540"
  },
  {
    "text": "proof right here",
    "start": "252540",
    "end": "255420"
  },
  {
    "text": "by a simple calculation we can see that",
    "start": "255420",
    "end": "258299"
  },
  {
    "text": "Titan X is around 9.7 times faster than",
    "start": "258299",
    "end": "261540"
  },
  {
    "text": "a dual Xeon E5 CPU so what's causing the",
    "start": "261540",
    "end": "266460"
  },
  {
    "text": "exaggerated 66 times acceleration as",
    "start": "266460",
    "end": "269759"
  },
  {
    "text": "reported in the post",
    "start": "269759",
    "end": "271979"
  },
  {
    "text": "well oh this is some this is some",
    "start": "271979",
    "end": "274199"
  },
  {
    "text": "gigaflop making music you know what I",
    "start": "274199",
    "end": "275759"
  },
  {
    "text": "mean are you are you feeling that",
    "start": "275759",
    "end": "278639"
  },
  {
    "text": "I'm I'm",
    "start": "278639",
    "end": "279900"
  },
  {
    "text": "not gonna lie I'm feeling a little love",
    "start": "279900",
    "end": "281759"
  },
  {
    "text": "fill a little Giga floppy right now you",
    "start": "281759",
    "end": "283680"
  },
  {
    "text": "know what I mean many cases programmers",
    "start": "283680",
    "end": "286800"
  },
  {
    "text": "often fail to optimize their algorithms",
    "start": "286800",
    "end": "289020"
  },
  {
    "text": "on CPU I don't think that's I'd say in",
    "start": "289020",
    "end": "291900"
  },
  {
    "text": "many cases they use JavaScript",
    "start": "291900",
    "end": "294360"
  },
  {
    "text": "which shrinks",
    "start": "294360",
    "end": "295860"
  },
  {
    "text": "your brain cell size as we've been told",
    "start": "295860",
    "end": "298620"
  },
  {
    "text": "by reliable sources",
    "start": "298620",
    "end": "301320"
  },
  {
    "text": "and you don't optimize your CPU that",
    "start": "301320",
    "end": "303900"
  },
  {
    "text": "just doesn't happen",
    "start": "303900",
    "end": "305400"
  },
  {
    "text": "so practice your time waiting list will",
    "start": "305400",
    "end": "307199"
  },
  {
    "text": "be much slower than the theoretical one",
    "start": "307199",
    "end": "309840"
  },
  {
    "text": "for instance if you are not using ABX",
    "start": "309840",
    "end": "312720"
  },
  {
    "text": "instructions the CPU can only process",
    "start": "312720",
    "end": "315540"
  },
  {
    "text": "one load per cycle and if you even fail",
    "start": "315540",
    "end": "318600"
  },
  {
    "text": "to use multiple cores in parallel the",
    "start": "318600",
    "end": "321419"
  },
  {
    "text": "Practical performance will be even",
    "start": "321419",
    "end": "323340"
  },
  {
    "text": "slower",
    "start": "323340",
    "end": "324860"
  },
  {
    "text": "more complex we need to take the memory",
    "start": "324860",
    "end": "327900"
  },
  {
    "text": "speed into your account",
    "start": "327900",
    "end": "329580"
  },
  {
    "text": "before I took the parallel optimization",
    "start": "329580",
    "end": "331860"
  },
  {
    "text": "course I thought CPU speed was the only",
    "start": "331860",
    "end": "334919"
  },
  {
    "text": "thing people needed to care about",
    "start": "334919",
    "end": "337139"
  },
  {
    "text": "however it's about that girth of your",
    "start": "337139",
    "end": "339660"
  },
  {
    "text": "bus everybody knows that it's not just",
    "start": "339660",
    "end": "342539"
  },
  {
    "text": "the length of the bus it's also the",
    "start": "342539",
    "end": "344759"
  },
  {
    "text": "girth of the Buffs you know you can't",
    "start": "344759",
    "end": "347100"
  },
  {
    "text": "just",
    "start": "347100",
    "end": "348660"
  },
  {
    "text": "you just can't do that the music is",
    "start": "348660",
    "end": "350280"
  },
  {
    "text": "running out the video I know",
    "start": "350280",
    "end": "351120"
  },
  {
    "text": "Unfortunately they did he did not",
    "start": "351120",
    "end": "352680"
  },
  {
    "text": "equalize the video which or the the",
    "start": "352680",
    "end": "354479"
  },
  {
    "text": "sound too well on this one",
    "start": "354479",
    "end": "356699"
  },
  {
    "text": "um",
    "start": "356699",
    "end": "358160"
  },
  {
    "text": "but it's still really good video it's",
    "start": "358160",
    "end": "360720"
  },
  {
    "text": "still really great video",
    "start": "360720",
    "end": "362100"
  },
  {
    "text": "yourself in the case that memory speed",
    "start": "362100",
    "end": "364199"
  },
  {
    "text": "is the major reason that slows your",
    "start": "364199",
    "end": "366060"
  },
  {
    "text": "orgasm down",
    "start": "366060",
    "end": "367500"
  },
  {
    "text": "according to this study conducted by the",
    "start": "367500",
    "end": "370380"
  },
  {
    "text": "University of Virginia",
    "start": "370380",
    "end": "372180"
  },
  {
    "text": "CPU speed",
    "start": "372180",
    "end": "373620"
  },
  {
    "text": "any website that looks like this",
    "start": "373620",
    "end": "376620"
  },
  {
    "text": "was not only written with hdmax web 1.0",
    "start": "376620",
    "end": "379080"
  },
  {
    "text": "but is probably filled with the most",
    "start": "379080",
    "end": "381240"
  },
  {
    "text": "important information you'll ever read",
    "start": "381240",
    "end": "382620"
  },
  {
    "text": "in your lifetime",
    "start": "382620",
    "end": "384479"
  },
  {
    "text": "okay",
    "start": "384479",
    "end": "386340"
  },
  {
    "text": "this is just a fact it is like",
    "start": "386340",
    "end": "389160"
  },
  {
    "text": "for whatever reason there is there's a",
    "start": "389160",
    "end": "392280"
  },
  {
    "text": "there's an equation out there I swear",
    "start": "392280",
    "end": "394319"
  },
  {
    "text": "there exists an equation out there that",
    "start": "394319",
    "end": "396840"
  },
  {
    "text": "looks something or or at least a graph",
    "start": "396840",
    "end": "398639"
  },
  {
    "text": "out there that looks a little something",
    "start": "398639",
    "end": "399780"
  },
  {
    "text": "like this that as uh the site looks",
    "start": "399780",
    "end": "403860"
  },
  {
    "text": "nicer",
    "start": "403860",
    "end": "405240"
  },
  {
    "text": "its usefulness is inversely proportional",
    "start": "405240",
    "end": "408900"
  },
  {
    "text": "you know what I mean so like Twitter",
    "start": "408900",
    "end": "410759"
  },
  {
    "text": "looks pretty nice",
    "start": "410759",
    "end": "413100"
  },
  {
    "text": "is it useful",
    "start": "413100",
    "end": "415319"
  },
  {
    "text": "no",
    "start": "415319",
    "end": "417120"
  },
  {
    "text": "no it's not it's not useful it's not",
    "start": "417120",
    "end": "419100"
  },
  {
    "text": "useful at all it it doesn't it's not",
    "start": "419100",
    "end": "421560"
  },
  {
    "text": "useful at all okay the only thing you're",
    "start": "421560",
    "end": "424080"
  },
  {
    "text": "gonna get out of Twitter is that one dog",
    "start": "424080",
    "end": "426539"
  },
  {
    "text": "and cat posting meme that the those",
    "start": "426539",
    "end": "429120"
  },
  {
    "text": "those weird L accounts that exist no",
    "start": "429120",
    "end": "431699"
  },
  {
    "text": "context humans and of course a pregnancy",
    "start": "431699",
    "end": "434100"
  },
  {
    "text": "monitor or a pregnancy pen that's",
    "start": "434100",
    "end": "436500"
  },
  {
    "text": "playing Doom like that's what you get",
    "start": "436500",
    "end": "437940"
  },
  {
    "text": "out of Twitter okay oh sorry X oh it's",
    "start": "437940",
    "end": "440220"
  },
  {
    "text": "X-Men come on whereas you look at this",
    "start": "440220",
    "end": "442139"
  },
  {
    "text": "little website this little website right",
    "start": "442139",
    "end": "444240"
  },
  {
    "text": "here that we're looking at okay that's",
    "start": "444240",
    "end": "446160"
  },
  {
    "text": "not good design okay we're not feeling",
    "start": "446160",
    "end": "447660"
  },
  {
    "text": "it it's not beautiful it's not shiny",
    "start": "447660",
    "end": "449460"
  },
  {
    "text": "it's not sharp where's my like button I",
    "start": "449460",
    "end": "451080"
  },
  {
    "text": "don't see any of those things usefulness",
    "start": "451080",
    "end": "452699"
  },
  {
    "text": "usefulness",
    "start": "452699",
    "end": "455340"
  },
  {
    "text": "it's all the way at the tip okay",
    "start": "455340",
    "end": "457819"
  },
  {
    "text": "this is",
    "start": "457819",
    "end": "460800"
  },
  {
    "text": "it's just you know I feel like I need to",
    "start": "460800",
    "end": "462120"
  },
  {
    "text": "rewire my brain",
    "start": "462120",
    "end": "464900"
  },
  {
    "text": "grows faster than memory speed over many",
    "start": "465300",
    "end": "467880"
  },
  {
    "text": "years yeah the result is that important",
    "start": "467880",
    "end": "470880"
  },
  {
    "text": "computers can handle 10 to 100 cycles",
    "start": "470880",
    "end": "473759"
  },
  {
    "text": "per memory access",
    "start": "473759",
    "end": "475919"
  },
  {
    "text": "we can also confirm this difference",
    "start": "475919",
    "end": "477599"
  },
  {
    "text": "between computational and memory speed",
    "start": "477599",
    "end": "479759"
  },
  {
    "text": "limits by calculating the memory",
    "start": "479759",
    "end": "482039"
  },
  {
    "text": "bandwidth of the Xeon CPU we've just",
    "start": "482039",
    "end": "484259"
  },
  {
    "text": "talked about",
    "start": "484259",
    "end": "485460"
  },
  {
    "text": "the specification states that max memory",
    "start": "485460",
    "end": "488580"
  },
  {
    "text": "bandwidth is 59 gigabytes per second",
    "start": "488580",
    "end": "491460"
  },
  {
    "text": "and if each flow takes four bytes this",
    "start": "491460",
    "end": "494460"
  },
  {
    "text": "equals 14.75 gigaflops",
    "start": "494460",
    "end": "497460"
  },
  {
    "text": "in this case our memory bandwidth is 10",
    "start": "497460",
    "end": "500400"
  },
  {
    "text": "times smaller than the computational",
    "start": "500400",
    "end": "502020"
  },
  {
    "text": "bandwidth",
    "start": "502020",
    "end": "503580"
  },
  {
    "text": "therefore if a tasker requires less than",
    "start": "503580",
    "end": "506400"
  },
  {
    "text": "10 cycles per memory access on this CPU",
    "start": "506400",
    "end": "509160"
  },
  {
    "text": "we'll call it a memory bonded task",
    "start": "509160",
    "end": "512339"
  },
  {
    "text": "otherwise",
    "start": "512339",
    "end": "515180"
  },
  {
    "text": "it's pretty good",
    "start": "516659",
    "end": "518580"
  },
  {
    "text": "some pretty good stuff you know this is",
    "start": "518580",
    "end": "520080"
  },
  {
    "text": "why you know this",
    "start": "520080",
    "end": "521339"
  },
  {
    "text": "is why arrays are really really nice and",
    "start": "521339",
    "end": "523860"
  },
  {
    "text": "linked lists are sometimes not very very",
    "start": "523860",
    "end": "525660"
  },
  {
    "text": "nice you know we talk about this that",
    "start": "525660",
    "end": "527760"
  },
  {
    "text": "how linked lists can just be slower like",
    "start": "527760",
    "end": "530279"
  },
  {
    "text": "they're they're theoretically faster for",
    "start": "530279",
    "end": "532140"
  },
  {
    "text": "a lot of operations but they're not",
    "start": "532140",
    "end": "535260"
  },
  {
    "text": "faster",
    "start": "535260",
    "end": "537660"
  },
  {
    "text": "often in practicality because with an",
    "start": "537660",
    "end": "540240"
  },
  {
    "text": "array you get this you get a nice tight",
    "start": "540240",
    "end": "542820"
  },
  {
    "text": "piece of memory that all exists into a",
    "start": "542820",
    "end": "544560"
  },
  {
    "text": "single location but a linked list is",
    "start": "544560",
    "end": "546600"
  },
  {
    "text": "just you're new and stuff up all over",
    "start": "546600",
    "end": "548399"
  },
  {
    "text": "the place right and so you're getting",
    "start": "548399",
    "end": "550080"
  },
  {
    "text": "all these little things so you get you",
    "start": "550080",
    "end": "551519"
  },
  {
    "text": "get you just get you get Oddities if you",
    "start": "551519",
    "end": "553440"
  },
  {
    "text": "know what I mean",
    "start": "553440",
    "end": "555420"
  },
  {
    "text": "you didn't come here to learn stuff well",
    "start": "555420",
    "end": "556800"
  },
  {
    "text": "guess what get learned on kid okay this",
    "start": "556800",
    "end": "559260"
  },
  {
    "text": "is an educational Channel now",
    "start": "559260",
    "end": "561959"
  },
  {
    "text": "it will be a compute bonded task",
    "start": "561959",
    "end": "565380"
  },
  {
    "text": "some of you who have taken operating",
    "start": "565380",
    "end": "567420"
  },
  {
    "text": "system courses or other Hardware related",
    "start": "567420",
    "end": "570180"
  },
  {
    "text": "that's my biggest regret in life is that",
    "start": "570180",
    "end": "572700"
  },
  {
    "text": "I took a lot of the hardware courses I",
    "start": "572700",
    "end": "574680"
  },
  {
    "text": "just never took an operating systems",
    "start": "574680",
    "end": "576720"
  },
  {
    "text": "course",
    "start": "576720",
    "end": "577740"
  },
  {
    "text": "I I it's still one of my bigger",
    "start": "577740",
    "end": "579540"
  },
  {
    "text": "educational regards and at this point in",
    "start": "579540",
    "end": "582060"
  },
  {
    "text": "my life I just don't have the time to",
    "start": "582060",
    "end": "583620"
  },
  {
    "text": "sit down and just sink 400 hours into",
    "start": "583620",
    "end": "585899"
  },
  {
    "text": "learning something because I can't do it",
    "start": "585899",
    "end": "587519"
  },
  {
    "text": "on I know you guys want me to do it on",
    "start": "587519",
    "end": "588839"
  },
  {
    "text": "Twitch you don't actually want to do it",
    "start": "588839",
    "end": "590459"
  },
  {
    "text": "on Twitch nobody actually does want to",
    "start": "590459",
    "end": "591899"
  },
  {
    "text": "do it on Twitch I know everyone says",
    "start": "591899",
    "end": "593580"
  },
  {
    "text": "they want to but no one actually wants",
    "start": "593580",
    "end": "595560"
  },
  {
    "text": "to and so it's like I want to sit down",
    "start": "595560",
    "end": "597480"
  },
  {
    "text": "and just read through a building your",
    "start": "597480",
    "end": "599459"
  },
  {
    "text": "own OS course I know you guys all say",
    "start": "599459",
    "end": "601380"
  },
  {
    "text": "you do no it doesn't no it doesn't it",
    "start": "601380",
    "end": "604200"
  },
  {
    "text": "doesn't",
    "start": "604200",
    "end": "605760"
  },
  {
    "text": "it does not count comozo did it is he",
    "start": "605760",
    "end": "608580"
  },
  {
    "text": "Simpsons is gamoso now a Simpsons",
    "start": "608580",
    "end": "612720"
  },
  {
    "text": "horses may think that using caches will",
    "start": "612720",
    "end": "615240"
  },
  {
    "text": "help solve this problem",
    "start": "615240",
    "end": "617160"
  },
  {
    "text": "but what I'm talking about here by",
    "start": "617160",
    "end": "619140"
  },
  {
    "text": "psychos per access actually has nothing",
    "start": "619140",
    "end": "621660"
  },
  {
    "text": "to do with caches",
    "start": "621660",
    "end": "624000"
  },
  {
    "text": "take a memory bonded Vector operation ax",
    "start": "624000",
    "end": "627000"
  },
  {
    "text": "plus y or XP for example",
    "start": "627000",
    "end": "629820"
  },
  {
    "text": "this operation takes two vectors X and Y",
    "start": "629820",
    "end": "632880"
  },
  {
    "text": "as inputs",
    "start": "632880",
    "end": "634500"
  },
  {
    "text": "if they both contain and floats the",
    "start": "634500",
    "end": "637200"
  },
  {
    "text": "total number of floating Point",
    "start": "637200",
    "end": "638459"
  },
  {
    "text": "operations needed is 2N which is one",
    "start": "638459",
    "end": "641700"
  },
  {
    "text": "multiply and one add per entry however",
    "start": "641700",
    "end": "645060"
  },
  {
    "text": "the total memory this origin needs to",
    "start": "645060",
    "end": "647700"
  },
  {
    "text": "access is also two and floats yeah no",
    "start": "647700",
    "end": "650880"
  },
  {
    "text": "matter how you cache it those data have",
    "start": "650880",
    "end": "653279"
  },
  {
    "text": "to be loaded from the main memory and it",
    "start": "653279",
    "end": "655860"
  },
  {
    "text": "is definitely bonded by the 59 gigabytes",
    "start": "655860",
    "end": "658320"
  },
  {
    "text": "per second memory bandwidth limit since",
    "start": "658320",
    "end": "661560"
  },
  {
    "text": "the CPU can perform 10 flops per access",
    "start": "661560",
    "end": "664279"
  },
  {
    "text": "this algorithm is always memory bonded",
    "start": "664279",
    "end": "667920"
  },
  {
    "text": "if you find your awesome to be Memory",
    "start": "667920",
    "end": "670140"
  },
  {
    "text": "bonded there's almost nothing you can do",
    "start": "670140",
    "end": "672540"
  },
  {
    "text": "to optimize it and some of the CPU",
    "start": "672540",
    "end": "675180"
  },
  {
    "text": "performance is pretty much guaranteed to",
    "start": "675180",
    "end": "677279"
  },
  {
    "text": "be wasted",
    "start": "677279",
    "end": "679040"
  },
  {
    "text": "so it is why the performance difference",
    "start": "679040",
    "end": "681959"
  },
  {
    "text": "between CPU and GPU is bigger",
    "start": "681959",
    "end": "685019"
  },
  {
    "text": "it's actually the opposite",
    "start": "685019",
    "end": "688579"
  },
  {
    "text": "you just spent like four minutes",
    "start": "704279",
    "end": "706140"
  },
  {
    "text": "explaining that just to say it's not",
    "start": "706140",
    "end": "708839"
  },
  {
    "text": "what a plot Twisted what is this guy M",
    "start": "708839",
    "end": "711420"
  },
  {
    "text": "Night shimab a lot like what",
    "start": "711420",
    "end": "713399"
  },
  {
    "text": "what year",
    "start": "713399",
    "end": "715019"
  },
  {
    "text": "what just happened here I are we",
    "start": "715019",
    "end": "717899"
  },
  {
    "text": "watching signs like this is",
    "start": "717899",
    "end": "722180"
  },
  {
    "text": "the GPU memory bandwidth is usually only",
    "start": "723720",
    "end": "726540"
  },
  {
    "text": "a few times larger than the CPU memory",
    "start": "726540",
    "end": "728820"
  },
  {
    "text": "bandwidth we are implementing a memory",
    "start": "728820",
    "end": "731100"
  },
  {
    "text": "bounded task on GPU won't make it a lot",
    "start": "731100",
    "end": "734040"
  },
  {
    "text": "faster",
    "start": "734040",
    "end": "735360"
  },
  {
    "text": "let's still take the GTX Titan X for",
    "start": "735360",
    "end": "738000"
  },
  {
    "text": "example okay okay the memory bandwidth",
    "start": "738000",
    "end": "740399"
  },
  {
    "text": "is 336 gigabytes per second",
    "start": "740399",
    "end": "743519"
  },
  {
    "text": "which is 5.6 times faster than the CPU",
    "start": "743519",
    "end": "747600"
  },
  {
    "text": "and since a memory bounded task won't be",
    "start": "747600",
    "end": "750120"
  },
  {
    "text": "converted into a compute bonded task on",
    "start": "750120",
    "end": "752279"
  },
  {
    "text": "GPU and XP will still only be 5.6 times",
    "start": "752279",
    "end": "756300"
  },
  {
    "text": "faster when implemented on GPU",
    "start": "756300",
    "end": "759000"
  },
  {
    "text": "to really understand the most difficult",
    "start": "759000",
    "end": "760980"
  },
  {
    "text": "part of optimizing algorithms on CPU we",
    "start": "760980",
    "end": "764459"
  },
  {
    "text": "need to take a deeper look at the",
    "start": "764459",
    "end": "766079"
  },
  {
    "text": "compute boundary tasks",
    "start": "766079",
    "end": "767820"
  },
  {
    "text": "okay an algorithm can be compute bounded",
    "start": "767820",
    "end": "771540"
  },
  {
    "text": "if the number of cycles per access",
    "start": "771540",
    "end": "773579"
  },
  {
    "text": "exists the computation to memory",
    "start": "773579",
    "end": "775860"
  },
  {
    "text": "bandwidth ratio",
    "start": "775860",
    "end": "777720"
  },
  {
    "text": "the classic example is the general",
    "start": "777720",
    "end": "779639"
  },
  {
    "text": "Matrix Matrix multiplication",
    "start": "779639",
    "end": "783440"
  },
  {
    "text": "damn those matrices every time I try to",
    "start": "784019",
    "end": "786300"
  },
  {
    "text": "write a matrix multiplication",
    "start": "786300",
    "end": "789540"
  },
  {
    "text": "I forget how bad I am at remembering how",
    "start": "789540",
    "end": "791760"
  },
  {
    "text": "to do matrix multiplication",
    "start": "791760",
    "end": "793560"
  },
  {
    "text": "there are so many eyes JS and K's",
    "start": "793560",
    "end": "796380"
  },
  {
    "text": "every time I get it wrong but now with",
    "start": "796380",
    "end": "798540"
  },
  {
    "text": "copilot every time I get it wrong it's",
    "start": "798540",
    "end": "801060"
  },
  {
    "text": "just more confusing why I got it wrong",
    "start": "801060",
    "end": "802500"
  },
  {
    "text": "an operation for Jeff",
    "start": "802500",
    "end": "805200"
  },
  {
    "text": "a gem takes two matrices A and B as",
    "start": "805200",
    "end": "808079"
  },
  {
    "text": "inputs yep yep we'll assume they are",
    "start": "808079",
    "end": "810720"
  },
  {
    "text": "both earned by n matrices for Simplicity",
    "start": "810720",
    "end": "812940"
  },
  {
    "text": "beautiful beautiful each output entry",
    "start": "812940",
    "end": "815459"
  },
  {
    "text": "cij equals to the multiplication between",
    "start": "815459",
    "end": "818579"
  },
  {
    "text": "aik and bkj 4K from zero to n classic b",
    "start": "818579",
    "end": "822540"
  },
  {
    "text": "b calculation takes and Float",
    "start": "822540",
    "end": "824639"
  },
  {
    "text": "multiplications",
    "start": "824639",
    "end": "825899"
  },
  {
    "text": "and there are unsquared entries we need",
    "start": "825899",
    "end": "828240"
  },
  {
    "text": "to calculate",
    "start": "828240",
    "end": "829740"
  },
  {
    "text": "the computational bandwidth of the",
    "start": "829740",
    "end": "831540"
  },
  {
    "text": "entire algorithm will therefore be o and",
    "start": "831540",
    "end": "833940"
  },
  {
    "text": "Q",
    "start": "833940",
    "end": "835200"
  },
  {
    "text": "the total memory complexity however is O",
    "start": "835200",
    "end": "838139"
  },
  {
    "text": "N squared",
    "start": "838139",
    "end": "839339"
  },
  {
    "text": "so theoretically no matter how powerful",
    "start": "839339",
    "end": "842399"
  },
  {
    "text": "your CPU is this algorithm will",
    "start": "842399",
    "end": "845040"
  },
  {
    "text": "eventually become compute bounded given",
    "start": "845040",
    "end": "847500"
  },
  {
    "text": "a large m",
    "start": "847500",
    "end": "850040"
  },
  {
    "text": "feels good feels good uh it's going way",
    "start": "852440",
    "end": "855779"
  },
  {
    "text": "over my head why it's just that we just",
    "start": "855779",
    "end": "857279"
  },
  {
    "text": "we just looked at some stuff that's all",
    "start": "857279",
    "end": "858600"
  },
  {
    "text": "we're looking at most compute bonded",
    "start": "858600",
    "end": "860100"
  },
  {
    "text": "organs can be optimized in two major",
    "start": "860100",
    "end": "862380"
  },
  {
    "text": "ways okay body threading and scene B",
    "start": "862380",
    "end": "867079"
  },
  {
    "text": "multiple cores on your CPU to run the",
    "start": "867560",
    "end": "870480"
  },
  {
    "text": "organism in parallel",
    "start": "870480",
    "end": "872160"
  },
  {
    "text": "it's right I love generated uh",
    "start": "872160",
    "end": "875459"
  },
  {
    "text": "what's it called um caption the organism",
    "start": "875459",
    "end": "878160"
  },
  {
    "text": "and the simdi oh man none of it makes",
    "start": "878160",
    "end": "880440"
  },
  {
    "text": "any sense it's so beautiful easy for",
    "start": "880440",
    "end": "883380"
  },
  {
    "text": "most compute bonded algorithms to",
    "start": "883380",
    "end": "885420"
  },
  {
    "text": "support this feature all you have to do",
    "start": "885420",
    "end": "887940"
  },
  {
    "text": "is find the part in your organism that",
    "start": "887940",
    "end": "890399"
  },
  {
    "text": "can be paralleled divided and schedule",
    "start": "890399",
    "end": "892980"
  },
  {
    "text": "them to different threads",
    "start": "892980",
    "end": "895339"
  },
  {
    "text": "is also known as the fork drawing model",
    "start": "895339",
    "end": "898920"
  },
  {
    "text": "since all the CPU ports are mostly",
    "start": "898920",
    "end": "901260"
  },
  {
    "text": "independent the good part is is that",
    "start": "901260",
    "end": "903000"
  },
  {
    "text": "with rust you could wrap all of your",
    "start": "903000",
    "end": "904620"
  },
  {
    "text": "values in artex or art and our text and",
    "start": "904620",
    "end": "908459"
  },
  {
    "text": "our mutex so it's beautiful definitely",
    "start": "908459",
    "end": "911040"
  },
  {
    "text": "very very easy very Speedy you'll",
    "start": "911040",
    "end": "913800"
  },
  {
    "text": "definitely not screw it up oh but you",
    "start": "913800",
    "end": "915660"
  },
  {
    "text": "can download it okay okay calm down guy",
    "start": "915660",
    "end": "918120"
  },
  {
    "text": "yeah I know I get I get that you can",
    "start": "918120",
    "end": "920699"
  },
  {
    "text": "I get that there's a way to do it you",
    "start": "920699",
    "end": "922500"
  },
  {
    "text": "can window off that array with a bunch",
    "start": "922500",
    "end": "924600"
  },
  {
    "text": "of mutable",
    "start": "924600",
    "end": "926820"
  },
  {
    "text": "slices",
    "start": "926820",
    "end": "928320"
  },
  {
    "text": "but nobody does that okay everybody's",
    "start": "928320",
    "end": "930540"
  },
  {
    "text": "too confused by Arc mutexes and they're",
    "start": "930540",
    "end": "933660"
  },
  {
    "text": "they're confused why they're playing a",
    "start": "933660",
    "end": "934920"
  },
  {
    "text": "zerg character while programming of each",
    "start": "934920",
    "end": "937560"
  },
  {
    "text": "other the biggest issue that can slow",
    "start": "937560",
    "end": "940139"
  },
  {
    "text": "you down is fast sharing which only",
    "start": "940139",
    "end": "942720"
  },
  {
    "text": "occurs if multiple cores try to access",
    "start": "942720",
    "end": "944940"
  },
  {
    "text": "the same cache line on the shared cache",
    "start": "944940",
    "end": "948300"
  },
  {
    "text": "it's also pretty easy to solve this",
    "start": "948300",
    "end": "950220"
  },
  {
    "text": "problem just don't make the private data",
    "start": "950220",
    "end": "952860"
  },
  {
    "text": "of different threads on the same cash",
    "start": "952860",
    "end": "954660"
  },
  {
    "text": "lab",
    "start": "954660",
    "end": "955860"
  },
  {
    "text": "Cindy on the other way is not that easy",
    "start": "955860",
    "end": "958740"
  },
  {
    "text": "to use",
    "start": "958740",
    "end": "961220"
  },
  {
    "text": "what's the solution don't do it duh",
    "start": "965100",
    "end": "967800"
  },
  {
    "text": "dummy",
    "start": "967800",
    "end": "969060"
  },
  {
    "text": "just don't do that",
    "start": "969060",
    "end": "971459"
  },
  {
    "text": "everybody knows that answer just write",
    "start": "971459",
    "end": "974220"
  },
  {
    "text": "your code better dummy",
    "start": "974220",
    "end": "976380"
  },
  {
    "text": "just do a quick parallel operation just",
    "start": "976380",
    "end": "978600"
  },
  {
    "text": "Fork it then join it it's that simple",
    "start": "978600",
    "end": "980699"
  },
  {
    "text": "what what is the problem",
    "start": "980699",
    "end": "982500"
  },
  {
    "text": "name stands for single instruction",
    "start": "982500",
    "end": "984420"
  },
  {
    "text": "multiple data which helps you accelerate",
    "start": "984420",
    "end": "987660"
  },
  {
    "text": "further using a single core yeah this",
    "start": "987660",
    "end": "990540"
  },
  {
    "text": "stuff's wild like what it can actually",
    "start": "990540",
    "end": "992040"
  },
  {
    "text": "do",
    "start": "992040",
    "end": "993480"
  },
  {
    "text": "um",
    "start": "993480",
    "end": "994500"
  },
  {
    "text": "wait is that an m",
    "start": "994500",
    "end": "996600"
  },
  {
    "text": "I didn't see that",
    "start": "996600",
    "end": "998279"
  },
  {
    "text": "I did not see the m in there but uh",
    "start": "998279",
    "end": "1003759"
  },
  {
    "text": "when we did that little contest with",
    "start": "1003860",
    "end": "1005660"
  },
  {
    "text": "Russ to see who could write the fastest",
    "start": "1005660",
    "end": "1007279"
  },
  {
    "text": "Advent of code solution for rust like",
    "start": "1007279",
    "end": "1009440"
  },
  {
    "text": "when people started getting into like",
    "start": "1009440",
    "end": "1010759"
  },
  {
    "text": "the CMD stuff and these like constant",
    "start": "1010759",
    "end": "1013459"
  },
  {
    "text": "bounded arrays and all that I mean it",
    "start": "1013459",
    "end": "1015680"
  },
  {
    "text": "was pretty cool to see what rust would",
    "start": "1015680",
    "end": "1017000"
  },
  {
    "text": "do for you on your behalf and just give",
    "start": "1017000",
    "end": "1019160"
  },
  {
    "text": "you the CMD",
    "start": "1019160",
    "end": "1021620"
  },
  {
    "text": "is beautiful it was it was beautiful it",
    "start": "1021620",
    "end": "1024319"
  },
  {
    "text": "happened you must load multiple data",
    "start": "1024319",
    "end": "1026720"
  },
  {
    "text": "into a single CMD register and boom all",
    "start": "1026720",
    "end": "1030620"
  },
  {
    "text": "the calculations will be done in a",
    "start": "1030620",
    "end": "1032480"
  },
  {
    "text": "single cycle",
    "start": "1032480",
    "end": "1033860"
  },
  {
    "text": "it's not hard to imagine that this will",
    "start": "1033860",
    "end": "1036798"
  },
  {
    "text": "be extremely easy if your data already",
    "start": "1036799",
    "end": "1038839"
  },
  {
    "text": "lies continuously in the memory",
    "start": "1038839",
    "end": "1041418"
  },
  {
    "text": "on the country if they are randomly",
    "start": "1041419",
    "end": "1043938"
  },
  {
    "text": "spread across the ramp fetching them and",
    "start": "1043939",
    "end": "1046760"
  },
  {
    "text": "then load into the register may be even",
    "start": "1046760",
    "end": "1048860"
  },
  {
    "text": "more expensive than doing it without CMD",
    "start": "1048860",
    "end": "1051520"
  },
  {
    "text": "true some details can also influence the",
    "start": "1051520",
    "end": "1054559"
  },
  {
    "text": "same deep performance",
    "start": "1054559",
    "end": "1056120"
  },
  {
    "text": "for example if your data is cache line",
    "start": "1056120",
    "end": "1059000"
  },
  {
    "text": "aligned it may be possible to load it",
    "start": "1059000",
    "end": "1061760"
  },
  {
    "text": "faster",
    "start": "1061760",
    "end": "1062720"
  },
  {
    "text": "but this varies from different",
    "start": "1062720",
    "end": "1064460"
  },
  {
    "text": "architectures so I won't discuss it",
    "start": "1064460",
    "end": "1067280"
  },
  {
    "text": "further",
    "start": "1067280",
    "end": "1068780"
  },
  {
    "text": "it's already difficult to parallel on",
    "start": "1068780",
    "end": "1071179"
  },
  {
    "text": "the CPU",
    "start": "1071179",
    "end": "1072260"
  },
  {
    "text": "but it even gets harder when we consider",
    "start": "1072260",
    "end": "1074720"
  },
  {
    "text": "the memory again",
    "start": "1074720",
    "end": "1076640"
  },
  {
    "text": "take the jam for example okay I've just",
    "start": "1076640",
    "end": "1079460"
  },
  {
    "text": "said that it's compute bonded but for",
    "start": "1079460",
    "end": "1082160"
  },
  {
    "text": "the simplest implementation it's",
    "start": "1082160",
    "end": "1084620"
  },
  {
    "text": "actually still memory bonded damn",
    "start": "1084620",
    "end": "1086900"
  },
  {
    "text": "remember this",
    "start": "1086900",
    "end": "1088280"
  },
  {
    "text": "if your algorithm is compute bonded",
    "start": "1088280",
    "end": "1090500"
  },
  {
    "text": "theoretically the memory bonded in",
    "start": "1090500",
    "end": "1092960"
  },
  {
    "text": "practice you are in a really bad",
    "start": "1092960",
    "end": "1095299"
  },
  {
    "text": "situation",
    "start": "1095299",
    "end": "1097840"
  },
  {
    "text": "of life also shows that uh",
    "start": "1099679",
    "end": "1103160"
  },
  {
    "text": "theoretical don't care about actual",
    "start": "1103160",
    "end": "1105620"
  },
  {
    "text": "theoretical just don't care let's take a",
    "start": "1105620",
    "end": "1108440"
  },
  {
    "text": "look at the code",
    "start": "1108440",
    "end": "1109820"
  },
  {
    "text": "although matrices A and B only contains",
    "start": "1109820",
    "end": "1112580"
  },
  {
    "text": "q1 Square floats notice that we're doing",
    "start": "1112580",
    "end": "1115220"
  },
  {
    "text": "a little bit of C plus as the Lord",
    "start": "1115220",
    "end": "1116720"
  },
  {
    "text": "intended",
    "start": "1116720",
    "end": "1118280"
  },
  {
    "text": "um so we're not shrinking our brain",
    "start": "1118280",
    "end": "1120080"
  },
  {
    "text": "cells with JavaScript so this is good",
    "start": "1120080",
    "end": "1122000"
  },
  {
    "text": "this is a good situation that we're",
    "start": "1122000",
    "end": "1123559"
  },
  {
    "text": "looking at right here big fan the total",
    "start": "1123559",
    "end": "1125840"
  },
  {
    "text": "number of memory access is still 2 and Q",
    "start": "1125840",
    "end": "1129200"
  },
  {
    "text": "if each access has to fetch the data all",
    "start": "1129200",
    "end": "1132320"
  },
  {
    "text": "the way down to the main memory it will",
    "start": "1132320",
    "end": "1134660"
  },
  {
    "text": "be extremely slow",
    "start": "1134660",
    "end": "1136280"
  },
  {
    "text": "the solution is to guess it using cash",
    "start": "1136280",
    "end": "1140299"
  },
  {
    "text": "in fact the cash hit rate determines",
    "start": "1140299",
    "end": "1143480"
  },
  {
    "text": "whether your program is compute bonded",
    "start": "1143480",
    "end": "1145880"
  },
  {
    "text": "or memory bonded in this particular case",
    "start": "1145880",
    "end": "1149419"
  },
  {
    "text": "I didn't guess cash",
    "start": "1149419",
    "end": "1152059"
  },
  {
    "text": "not gonna lie to you uh",
    "start": "1152059",
    "end": "1154760"
  },
  {
    "text": "I guess quaternion",
    "start": "1154760",
    "end": "1158320"
  },
  {
    "text": "I thought I was right",
    "start": "1159440",
    "end": "1161960"
  },
  {
    "text": "but I don't think I'm right now that I",
    "start": "1161960",
    "end": "1163700"
  },
  {
    "text": "look at now that I realize we're not",
    "start": "1163700",
    "end": "1165440"
  },
  {
    "text": "just solving for",
    "start": "1165440",
    "end": "1167900"
  },
  {
    "text": "for 3D space okay so I didn't I didn't I",
    "start": "1167900",
    "end": "1170299"
  },
  {
    "text": "didn't know I didn't know I'm sorry",
    "start": "1170299",
    "end": "1172340"
  },
  {
    "text": "and optimizing the cache is the most",
    "start": "1172340",
    "end": "1174679"
  },
  {
    "text": "difficult and most important part of",
    "start": "1174679",
    "end": "1177080"
  },
  {
    "text": "high through just threaten the CPS",
    "start": "1177080",
    "end": "1178700"
  },
  {
    "text": "family for Jam you can do a few tricks",
    "start": "1178700",
    "end": "1181520"
  },
  {
    "text": "to make it faster okay okay for example",
    "start": "1181520",
    "end": "1184299"
  },
  {
    "text": "transposing one of the matrices from row",
    "start": "1184299",
    "end": "1187100"
  },
  {
    "text": "major to column major will help increase",
    "start": "1187100",
    "end": "1189440"
  },
  {
    "text": "The Cash Line utilization",
    "start": "1189440",
    "end": "1191900"
  },
  {
    "text": "the counter-intuitive part of it is it",
    "start": "1191900",
    "end": "1194840"
  },
  {
    "text": "actually requires you to do more",
    "start": "1194840",
    "end": "1196520"
  },
  {
    "text": "computation with this method",
    "start": "1196520",
    "end": "1198799"
  },
  {
    "text": "but because the computational cost is",
    "start": "1198799",
    "end": "1201080"
  },
  {
    "text": "much cheaper than the memory cost the",
    "start": "1201080",
    "end": "1203660"
  },
  {
    "text": "performance increase from the higher",
    "start": "1203660",
    "end": "1205460"
  },
  {
    "text": "cash hit rate outperforms the extra",
    "start": "1205460",
    "end": "1207620"
  },
  {
    "text": "computation for the CPU really there are",
    "start": "1207620",
    "end": "1210740"
  },
  {
    "text": "some even crazier techniques including",
    "start": "1210740",
    "end": "1213380"
  },
  {
    "text": "adding a few more nasty Loops to break",
    "start": "1213380",
    "end": "1215480"
  },
  {
    "text": "the algorithm into blocks I'll make",
    "start": "1215480",
    "end": "1218240"
  },
  {
    "text": "another whole video discussing the",
    "start": "1218240",
    "end": "1219860"
  },
  {
    "text": "details of these genius organisms",
    "start": "1219860",
    "end": "1222380"
  },
  {
    "text": "when I first learned those stuff in the",
    "start": "1222380",
    "end": "1224299"
  },
  {
    "text": "course it literally blew my mind",
    "start": "1224299",
    "end": "1227179"
  },
  {
    "text": "but for this video we've already covered",
    "start": "1227179",
    "end": "1230179"
  },
  {
    "text": "most of the reasons that size your",
    "start": "1230179",
    "end": "1232100"
  },
  {
    "text": "organism done on C",
    "start": "1232100",
    "end": "1234980"
  },
  {
    "text": "dude I wish I I wish we would have just",
    "start": "1234980",
    "end": "1237620"
  },
  {
    "text": "at least seen like",
    "start": "1237620",
    "end": "1240200"
  },
  {
    "text": "the video when you transpose The Columns",
    "start": "1240200",
    "end": "1242660"
  },
  {
    "text": "like that",
    "start": "1242660",
    "end": "1244760"
  },
  {
    "text": "now you got now you got me all excited",
    "start": "1244760",
    "end": "1247520"
  },
  {
    "text": "pu I hope you parallel well and see you",
    "start": "1247520",
    "end": "1251360"
  },
  {
    "text": "in the next one",
    "start": "1251360",
    "end": "1254080"
  },
  {
    "text": "default",
    "start": "1254660",
    "end": "1257200"
  },
  {
    "text": "just be real here you know when I when I",
    "start": "1258799",
    "end": "1261799"
  },
  {
    "text": "go off and I parallelize things",
    "start": "1261799",
    "end": "1263900"
  },
  {
    "text": "um",
    "start": "1263900",
    "end": "1266020"
  },
  {
    "text": "you know what I mean you know what I",
    "start": "1266360",
    "end": "1268580"
  },
  {
    "text": "mean",
    "start": "1268580",
    "end": "1268920"
  },
  {
    "text": "[Music]",
    "start": "1268920",
    "end": "1272539"
  },
  {
    "text": "you know what I mean",
    "start": "1272539",
    "end": "1274710"
  },
  {
    "text": "[Music]",
    "start": "1274710",
    "end": "1277799"
  },
  {
    "text": "it was a really well done video",
    "start": "1278480",
    "end": "1280880"
  },
  {
    "text": "definitely a motion canvas yeah I've",
    "start": "1280880",
    "end": "1282980"
  },
  {
    "text": "used motion canvas I've been wanting to",
    "start": "1282980",
    "end": "1284299"
  },
  {
    "text": "play around with that more uh but",
    "start": "1284299",
    "end": "1287000"
  },
  {
    "text": "real talk it was a good video I I wish",
    "start": "1287000",
    "end": "1289640"
  },
  {
    "text": "we would have done a little less of the",
    "start": "1289640",
    "end": "1291740"
  },
  {
    "text": "intense music uh but other than that it",
    "start": "1291740",
    "end": "1293900"
  },
  {
    "text": "was really good you know I think there's",
    "start": "1293900",
    "end": "1295280"
  },
  {
    "text": "a lot of things to take away from this",
    "start": "1295280",
    "end": "1296600"
  },
  {
    "text": "uh it was a little too shallow for me so",
    "start": "1296600",
    "end": "1298820"
  },
  {
    "text": "I didn't quite learn as much as I wanted",
    "start": "1298820",
    "end": "1301220"
  },
  {
    "text": "to actually learn you know what I mean",
    "start": "1301220",
    "end": "1303140"
  },
  {
    "text": "like it didn't go into depth in the",
    "start": "1303140",
    "end": "1304760"
  },
  {
    "text": "places we wanted to know more about and",
    "start": "1304760",
    "end": "1307340"
  },
  {
    "text": "so it made me feel a little lonely you",
    "start": "1307340",
    "end": "1308900"
  },
  {
    "text": "know what I mean a little too much of a",
    "start": "1308900",
    "end": "1310159"
  },
  {
    "text": "tease yeah I got teased a little bit I'm",
    "start": "1310159",
    "end": "1312500"
  },
  {
    "text": "not surprised at his name the hell is",
    "start": "1312500",
    "end": "1314659"
  },
  {
    "text": "that supposed to mean",
    "start": "1314659",
    "end": "1316580"
  },
  {
    "text": "what the hell are you saying twitch chat",
    "start": "1316580",
    "end": "1319159"
  },
  {
    "text": "I gotta pee so bad or else I would",
    "start": "1319159",
    "end": "1321380"
  },
  {
    "text": "figure out what the hell's going on in",
    "start": "1321380",
    "end": "1322880"
  },
  {
    "text": "chat right now",
    "start": "1322880",
    "end": "1324380"
  },
  {
    "text": "the name",
    "start": "1324380",
    "end": "1325760"
  },
  {
    "text": "is",
    "start": "1325760",
    "end": "1328100"
  },
  {
    "text": "let me rotate your Matrix",
    "start": "1328100",
    "end": "1330380"
  },
  {
    "text": "baby again",
    "start": "1330380",
    "end": "1333880"
  },
  {
    "text": "foreign",
    "start": "1334700",
    "end": "1336880"
  }
]