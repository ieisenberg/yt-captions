[
  {
    "text": "the bane of my existence supporting both async and sync code in Rust you sit",
    "start": "120",
    "end": "5799"
  },
  {
    "text": "beside me and hear this crazy old man's tale of when I asked rust for too much okay I like this introduction imagine",
    "start": "5799",
    "end": "11880"
  },
  {
    "text": "you want to create a new library in Rust loser I actually did that right now all it does is wrap up a public API that you",
    "start": "11880",
    "end": "18840"
  },
  {
    "text": "uh that you need for something else like the Spotify API or maybe a database like a Rango DB holy my I swear every time I",
    "start": "18840",
    "end": "26640"
  },
  {
    "text": "read a database like every time I see a database on any blog post it's a database I've literally never heard of",
    "start": "26640",
    "end": "33200"
  },
  {
    "text": "there's only one thing I think that out produces JavaScript Frameworks and",
    "start": "33200",
    "end": "38960"
  },
  {
    "text": "that's databases there are more databases than there are",
    "start": "38960",
    "end": "44960"
  },
  {
    "text": "JavaScript now that my friends that is the ultimate Jimmy Rustler",
    "start": "54920",
    "end": "60440"
  },
  {
    "text": "okay because like who's what what are you going to do are you the contrary what dude this is the ultimate Jimmy",
    "start": "60440",
    "end": "69000"
  },
  {
    "text": "rustler right here okay I love it I love it I'm so excited about it we'll see where that one goes we'll see where that",
    "start": "69000",
    "end": "74119"
  },
  {
    "text": "one goes at the end of this okay go back to this oh it's so good so good tweeting",
    "start": "74119",
    "end": "79759"
  },
  {
    "text": "while streaming is where all my tweets come from all right it's not rocket science you aren't inventing something",
    "start": "79759",
    "end": "85520"
  },
  {
    "text": "new or dealing with complex algorithms so you expect it to be relatively straightforward you decide to implement",
    "start": "85520",
    "end": "91320"
  },
  {
    "text": "the library with async loser uh by the way my last",
    "start": "91320",
    "end": "97280"
  },
  {
    "text": "library that I've been invent trying to do at Netflix I tried to use just uh channels and no async like actually",
    "start": "97280",
    "end": "104000"
  },
  {
    "text": "spawn threads and just do it like all myself dude I skill issued myself so hard gave up and went back to Tokyo and",
    "start": "104000",
    "end": "110200"
  },
  {
    "text": "async I'm such a loser literally just have a global semaphore that I use as",
    "start": "110200",
    "end": "115360"
  },
  {
    "text": "static a lazy static to to create so I don't have to make I can't make too many concurrent requests across my program",
    "start": "115360",
    "end": "121320"
  },
  {
    "text": "dude I'm such a loser I am such a loser uh all right anyways uh most of the work in your",
    "start": "121320",
    "end": "127600"
  },
  {
    "text": "library has to do with performing HTTP requests which are mostly IO so it makes sense that and because you want the cool",
    "start": "127600",
    "end": "134360"
  },
  {
    "text": "kids uh because that's what's the cool kids use in Russ nowadays you start coding and have a v01 release ready in a",
    "start": "134360",
    "end": "141200"
  },
  {
    "text": "few days neat you say as cargo publish finishes successfully and uploads your work to crates.io a couple days pass and",
    "start": "141200",
    "end": "147400"
  },
  {
    "text": "you get a new you get a new notification on GitHub someone opened an issue how can I use this La Library synchronously",
    "start": "147400",
    "end": "154959"
  },
  {
    "text": "my project doesn't use async because it's overly or my project doesn't use async because it's overly complex for",
    "start": "154959",
    "end": "160720"
  },
  {
    "text": "what I need I wanted to try your new library but I'm not sure how to do it easily I would rather not fill my code",
    "start": "160720",
    "end": "166879"
  },
  {
    "text": "with block on endpoint I've seen creates like request export blocking module with",
    "start": "166879",
    "end": "172519"
  },
  {
    "text": "the exact same functionality could you perhaps do that as well I did I literally also used request blocking",
    "start": "172519",
    "end": "179280"
  },
  {
    "text": "module to try to make it to try to do my own threading again skill issued I got",
    "start": "179280",
    "end": "184680"
  },
  {
    "text": "skill issued so hard holy cow lowlevel wise that sounds like a very complicated",
    "start": "184680",
    "end": "189920"
  },
  {
    "text": "task having a common interface for both async code which requires a runtime like Tokyo awaiting Futures pinning Etc still",
    "start": "189920",
    "end": "197200"
  },
  {
    "text": "don't know what pinning is I mean I know what pinning is but I don't understand it and regular sync code I mean they",
    "start": "197200",
    "end": "203239"
  },
  {
    "text": "asked nicely so maybe we can try after all the only difference in code would be the occurrences of the async and await",
    "start": "203239",
    "end": "210200"
  },
  {
    "text": "keywords because you aren't doing anything fancy I feel I feel genuinely bad for this because you know here's the",
    "start": "210200",
    "end": "217120"
  },
  {
    "text": "problem is you can't just block with Tokyo right you can't just block on it because the moment you block on",
    "start": "217120",
    "end": "222720"
  },
  {
    "text": "something all a sudden you're Tokyo it gets all effed up so you can't just make syn code and then throw it like in a",
    "start": "222720",
    "end": "229000"
  },
  {
    "text": "Tokyo spawn you can't just you can't just do that coloring is the worst thing in the",
    "start": "229000",
    "end": "234239"
  },
  {
    "text": "universe well this is more or less what happened with the crate rsr spot potify",
    "start": "234239",
    "end": "240040"
  },
  {
    "text": "I thought that was rust potify it's actually rust potify okay it's it's a",
    "start": "240040",
    "end": "245680"
  },
  {
    "text": "pot distribution Network you wouldn't understand you you just wouldn't get it okay uh I created the rust pocket-based",
    "start": "245680",
    "end": "253519"
  },
  {
    "text": "client lip not even joking this literally what happened this literally happened to you",
    "start": "253519",
    "end": "258720"
  },
  {
    "text": "D it seems really hard honestly I I like I said I tried to write my own sync stuff just recently it's it's rust is",
    "start": "258720",
    "end": "265840"
  },
  {
    "text": "genuinely hard I have fearful concurrency I have Fearless await for fearful",
    "start": "265840",
    "end": "274080"
  },
  {
    "text": "concurrency oh well this is more or less what happened with the crate RS potify which I use to maintain long along with",
    "start": "274440",
    "end": "281479"
  },
  {
    "text": "its creator ramay uh for those who don't know it's a rapper for Spotify web API",
    "start": "281479",
    "end": "287160"
  },
  {
    "text": "to clarify I did get this working in the end although not as cleanly as I was hoping I'll try to explain the situation",
    "start": "287160",
    "end": "293000"
  },
  {
    "text": "in this article okay okay to give more context here's what our Spotify uh",
    "start": "293000",
    "end": "298280"
  },
  {
    "text": "clients look like roughly impul Spotify async some endpoint self pram string Spotify result string mute",
    "start": "298280",
    "end": "305120"
  },
  {
    "text": "pams hashmap new insert Pam get some endpoint pams",
    "start": "305120",
    "end": "310919"
  },
  {
    "text": "await okay okay essentially we would make some endpoint available for both",
    "start": "310919",
    "end": "316600"
  },
  {
    "text": "asynchronous and blocking users the important question here is how do you do this once you have a dozen endpoints how",
    "start": "316600",
    "end": "323639"
  },
  {
    "text": "can you make it easy to switch between async and sync for users I assume copy",
    "start": "323639",
    "end": "329000"
  },
  {
    "text": "and pasting this is what uh was first implemented it was quite simple and it worked you just needed to copy regular client code into",
    "start": "329000",
    "end": "335520"
  },
  {
    "text": "a new blocking module for RS potify request our HP client and request",
    "start": "335520",
    "end": "341160"
  },
  {
    "text": "blocking share the same interface so we can manually remove keywords like async and do8 and in uh import request",
    "start": "341160",
    "end": "348080"
  },
  {
    "text": "blocking instead of request in the new module nice how does this feel right now",
    "start": "348080",
    "end": "353639"
  },
  {
    "text": "how does this feel reading what's happening like just reading this I'm emotionally getting just just hurt",
    "start": "353639",
    "end": "360520"
  },
  {
    "text": "you can definitely do blocking youd put it in spawn blocking yeah but spawn blocking is like a special one- thread item you don't have the same amount of",
    "start": "360520",
    "end": "366759"
  },
  {
    "text": "threads if I'm not mistaken I I again I haven't explored it too much but I'm I'm pretty sure spawn blocking is not the",
    "start": "366759",
    "end": "374160"
  },
  {
    "text": "simple fix here I hate it but this is exactly how I would do it this is exactly how I would do it too I guess",
    "start": "374160",
    "end": "380400"
  },
  {
    "text": "I'm creating two of them anyways then the RS potify user can just do uh RS",
    "start": "380400",
    "end": "385560"
  },
  {
    "text": "potify blocking client instead of RS potify client and viola their code is now blocking this will blo the binary",
    "start": "385560",
    "end": "393360"
  },
  {
    "text": "size for async users uh async only users so we just feature gate it under the name blocking and done boom bang",
    "start": "393360",
    "end": "401880"
  },
  {
    "text": "bomb love it love it okay hold on Yo",
    "start": "401880",
    "end": "407960"
  },
  {
    "text": "calm down okay calm down uh yes this is obviously better",
    "start": "407960",
    "end": "413479"
  },
  {
    "text": "than just using bidirectional Channel and awake group and go okay come on hey hey we're not talking about go right now",
    "start": "413479",
    "end": "418919"
  },
  {
    "text": "the problem was much more CLE uh clear later on though half the crates code was duplicated adding a new endpoint or",
    "start": "418919",
    "end": "425680"
  },
  {
    "text": "modifying it meant writing or removing everything twice there is no way to make sure both implementations are equivalent",
    "start": "425680",
    "end": "432280"
  },
  {
    "text": "unless you test absolutely everything which isn't a bad idea either but maybe",
    "start": "432280",
    "end": "437720"
  },
  {
    "text": "you copy pasted the test wrong how about that atheist the poor reviewer would",
    "start": "437720",
    "end": "443560"
  },
  {
    "text": "have to read through the code the same code twice to make sure both sides look all right",
    "start": "443560",
    "end": "451039"
  },
  {
    "text": "damn which sounds incredibly prone to human errors yeah this does not sound fun I never even thought about that",
    "start": "451039",
    "end": "457039"
  },
  {
    "text": "warning copy pastas yeah I know I actually I even think about that that every time you write a test you have to",
    "start": "457039",
    "end": "462360"
  },
  {
    "text": "also copy pasta your test uh where's your feris now let's see",
    "start": "462360",
    "end": "469120"
  },
  {
    "text": "in the in our experience it really slowed down the development of RS potify especially for our new contributors who",
    "start": "469120",
    "end": "474599"
  },
  {
    "text": "weren't used to the whole ordeal as a new excited maintainer of RS potify I began in investigate uh to investigate",
    "start": "474599",
    "end": "481120"
  },
  {
    "text": "other possible solutions all right calling block on uh the second approach",
    "start": "481120",
    "end": "486240"
  },
  {
    "text": "consisted on implementing everything on the async side then you just make wrappers for the blocking interface",
    "start": "486240",
    "end": "491599"
  },
  {
    "text": "which call blockon internally blockon will run the future until completion basically making it synchronous you",
    "start": "491599",
    "end": "498039"
  },
  {
    "text": "still need to copy the method definitions but the implementation is only written once I assume you still need an async runtime though so if you",
    "start": "498039",
    "end": "505000"
  },
  {
    "text": "tried to write sync code you'd still have like an async runtime running in the end right",
    "start": "505000",
    "end": "511240"
  },
  {
    "text": "is that like is that what would happen where's runtime",
    "start": "511759",
    "end": "517360"
  },
  {
    "text": "being defined by the way sounds like it yeah it kind of sounds like you'd have to have like a whole other thing",
    "start": "517360",
    "end": "522518"
  },
  {
    "text": "involved too note that in order to call block on you first have to create some kind of runtime in the endpoint method",
    "start": "522519",
    "end": "528279"
  },
  {
    "text": "for example Tokyo Tokyo yeah this does not sound fun by",
    "start": "528279",
    "end": "534279"
  },
  {
    "text": "the way uh this raises the question should we initialize the runtime in each call to the end point or is there a way",
    "start": "534279",
    "end": "540920"
  },
  {
    "text": "to share it oh lazy static Arc mutex lazy static Arc mutex or or Arc or",
    "start": "540920",
    "end": "548480"
  },
  {
    "text": "whatever it is I don't even know what it' be does it mutate I have no idea anyways okay we can keep it as a global e our Global's e why do our okay why do",
    "start": "548480",
    "end": "556279"
  },
  {
    "text": "people have constant upsetness about globals ever you know every now and then a Global's fine I said it I said it I am not 100%",
    "start": "556279",
    "end": "566920"
  },
  {
    "text": "opposed to Singletons every now and then I have a Singleton I need you know every now and then I just",
    "start": "566920",
    "end": "573399"
  },
  {
    "text": "need a Singleton yo dog I just need one of them I I I rarely use them because often I shoot myself in the in the",
    "start": "573399",
    "end": "581079"
  },
  {
    "text": "foot but I will use it you know what I mean or perhaps better we can save the",
    "start": "581079",
    "end": "587000"
  },
  {
    "text": "runtime in the Spotify struct but since oh that seems crazy but it seems to take a mutable reference to the runtime yep I",
    "start": "587000",
    "end": "593399"
  },
  {
    "text": "was about to say that then you have the rapbit of AR mutex let's go you don't",
    "start": "593399",
    "end": "601120"
  },
  {
    "text": "imagine okay for those that aren't seeing what's funny about this is that imagine you did",
    "start": "608360",
    "end": "614720"
  },
  {
    "text": "this right why what makes this so funny is is the",
    "start": "614720",
    "end": "620440"
  },
  {
    "text": "following here hold on what makes it so funny is let's say you spawned two threads right you have",
    "start": "621279",
    "end": "626800"
  },
  {
    "text": "two threads that are running and each one of them wants to make a request right but your library has a hidden",
    "start": "626800",
    "end": "633600"
  },
  {
    "text": "internal runtime that has an arc",
    "start": "633600",
    "end": "639000"
  },
  {
    "text": "mutex so when this guy calls a and this guy calls B A goes here and sits on the",
    "start": "639000",
    "end": "646600"
  },
  {
    "text": "mutex and this guy has to wait he's just sitting in line waiting for this one to",
    "start": "646600",
    "end": "651920"
  },
  {
    "text": "be done and so the duration of a let's say this long it has to be weighted by B",
    "start": "651920",
    "end": "658480"
  },
  {
    "text": "and then B can now make the",
    "start": "658480",
    "end": "662120"
  },
  {
    "text": "request like how funny I mean this is I would have tried this though but it's",
    "start": "664120",
    "end": "669279"
  },
  {
    "text": "hilarious right like you know like I love rust again I",
    "start": "669279",
    "end": "675560"
  },
  {
    "text": "love rust it's one of my favorite languages but again this is like 14 seconds of overhead and",
    "start": "675560",
    "end": "682240"
  },
  {
    "text": "go you know what I mean like this is like zero seconds and go like it's you're just done you're like you just do",
    "start": "683120",
    "end": "690360"
  },
  {
    "text": "it you literally just do it and that's it that's it you just you just do",
    "start": "690360",
    "end": "698600"
  },
  {
    "text": "it new go convert no I've been a go I've been on andof go convert for about five years now and I keep on trying to make",
    "start": "699120",
    "end": "705639"
  },
  {
    "text": "go not happen Go's like the opposite of fetch I keep trying to make fetch happen and then I go back to go and I use it",
    "start": "705639",
    "end": "712360"
  },
  {
    "text": "and I use it the most begrudgingly way I've ever used it I just use it and I complain the whole time and like this is",
    "start": "712360",
    "end": "718200"
  },
  {
    "text": "so stupid I absolutely hate it this is just the worst language ever I'm",
    "start": "718200",
    "end": "724040"
  },
  {
    "text": "done okay well I guess I don't need to program anymore because I completed my project super quick and everyone's very",
    "start": "724040",
    "end": "729399"
  },
  {
    "text": "happy with it fine whatever this is so stupid I better make a quick feature to this is so stupid and then it ends up",
    "start": "729399",
    "end": "736760"
  },
  {
    "text": "being super successful you keep saying fetch do you",
    "start": "736760",
    "end": "745839"
  },
  {
    "text": "be are you serious are you not aware of the Fantastic film",
    "start": "746360",
    "end": "753399"
  },
  {
    "text": "Mean Girls in",
    "start": "753399",
    "end": "756519"
  },
  {
    "text": "2004 really it's it's a it's a national treasure",
    "start": "759199",
    "end": "769880"
  },
  {
    "text": "okay I also looking this up makes me feel old and sad I just want you to know",
    "start": "772040",
    "end": "777199"
  },
  {
    "text": "right now that I feel old and sad sad that I just looked up this film and it's 20 years old and now I feel shitty",
    "start": "777199",
    "end": "786000"
  },
  {
    "text": "okay stop trying to make fetch happen so fetch stop trying to make it happen okay",
    "start": "786000",
    "end": "793079"
  },
  {
    "text": "fetch ain't happening anyways I keep like if I keep trying to make go not",
    "start": "793079",
    "end": "799199"
  },
  {
    "text": "happen and it keeps happening it keeps happening I know sorry for first off I just ruined like a",
    "start": "799199",
    "end": "805600"
  },
  {
    "text": "huge portion of people's day today I'm sorry",
    "start": "805600",
    "end": "810760"
  },
  {
    "text": "feels so stupid right now the proper way to do this is with Tokyo's handle which looks something like this lazy",
    "start": "811519",
    "end": "818240"
  },
  {
    "text": "static dude okay I feel like have I pre-read",
    "start": "818600",
    "end": "824920"
  },
  {
    "text": "this I'm literally thinking I feel like I thought me and this guy have had the same line of thought through everything",
    "start": "824920",
    "end": "831000"
  },
  {
    "text": "and that's because I Su at rust again I'm a dude I've been doing rust I've done hundreds if not thousands of hours",
    "start": "831000",
    "end": "837079"
  },
  {
    "text": "of rust and I still am not good at rust uh I have preed this problem I know end",
    "start": "837079",
    "end": "842160"
  },
  {
    "text": "point here we go I haven't actually I've never actually tried to do what he's doing and I I still am baffled by it",
    "start": "842160",
    "end": "847399"
  },
  {
    "text": "while the handle does make our blocking client faster there's even more performant way to do it this is what",
    "start": "847399",
    "end": "853120"
  },
  {
    "text": "request does or itself does in the case you're interested in short it spawns a thread that calls block on Waits on a",
    "start": "853120",
    "end": "859279"
  },
  {
    "text": "Channel with jobs oh it spawns like a hardware thread is that what it",
    "start": "859279",
    "end": "866720"
  },
  {
    "text": "does oh that just took me all the way out",
    "start": "867680",
    "end": "872519"
  },
  {
    "text": "here let's just see what it",
    "start": "873839",
    "end": "877480"
  },
  {
    "text": "does where does what is thread sorry I don't have my CLI I don't",
    "start": "881720",
    "end": "887959"
  },
  {
    "text": "have my LSP so I don't know how to hop around uh standard oh it is a standard thread",
    "start": "887959",
    "end": "893959"
  },
  {
    "text": "oh okay so it just it's that's a hardware thread thread right I'm not stupid right that's",
    "start": "893959",
    "end": "901279"
  },
  {
    "text": "just it's just straight up spawning a good oldfashioned just spawning a good old fashioned thread okay this makes sense",
    "start": "901279",
    "end": "908560"
  },
  {
    "text": "you can't use the runtime for this because it FS everything up the whole thing gets effed up you have to import a",
    "start": "908560",
    "end": "915480"
  },
  {
    "text": "runtime uh I led out loud",
    "start": "917440",
    "end": "921680"
  },
  {
    "text": "yeah let's see okay hold on let's find out okay where were we where where we",
    "start": "922680",
    "end": "929199"
  },
  {
    "text": "here I know where we were two three yeah there we go right here uh",
    "start": "929199",
    "end": "936240"
  },
  {
    "text": "unfortunately this solution still has quite a bit of overhead you pull in a large depy like futures or Tokyo Tokyo",
    "start": "936240",
    "end": "941440"
  },
  {
    "text": "and include them in your binary all of that in order to actually end up writing blocking code so not only is it a cost",
    "start": "941440",
    "end": "947399"
  },
  {
    "text": "at runtime but it's also compile time it feels wrong to me agreed this is a heavy agree uh and you still have a good",
    "start": "947399",
    "end": "954279"
  },
  {
    "text": "amount of duplicated code even if it's just definitions that could be summed up request is a huge project and could probably afford this for their blocking",
    "start": "954279",
    "end": "961160"
  },
  {
    "text": "module um but for a less popular crate like R RS potify this is harder to pull",
    "start": "961160",
    "end": "966880"
  },
  {
    "text": "off I would assume that no module can really pull this off duplicating code's extremely difficult and costs a whole",
    "start": "966880",
    "end": "972279"
  },
  {
    "text": "bunch duplicating the crate another possible way to fix this as the feature doc suggests creating separate crates",
    "start": "972279",
    "end": "977480"
  },
  {
    "text": "we'd have RS potify sync and rs potify async a user would just pick whichever",
    "start": "977480",
    "end": "982720"
  },
  {
    "text": "crate they want as a dependency even both if they need to the problem again yep is how do we exactly generate both",
    "start": "982720",
    "end": "988839"
  },
  {
    "text": "versions of the crate I was unable to do this with copy pasting the entire crate even with cargo tricks like two cargo",
    "start": "988839",
    "end": "995040"
  },
  {
    "text": "toml files one for each crate which was quite inconvenient could you do an RS build",
    "start": "995040",
    "end": "1001279"
  },
  {
    "text": "and generate the sync Co like sync code at at build",
    "start": "1001279",
    "end": "1007399"
  },
  {
    "text": "time is that crazy probably is too probably too",
    "start": "1007399",
    "end": "1012680"
  },
  {
    "text": "crazy uh with this idea we can't even use procedural macros because you can't just create uh a new create within a",
    "start": "1012680",
    "end": "1019920"
  },
  {
    "text": "macro okay fair we would Define a file format to write templates of rust code",
    "start": "1019920",
    "end": "1025160"
  },
  {
    "text": "in order to replace parts of the code like async await but that sounds completely out of scope and it sounds crazy honestly as I was saying that out",
    "start": "1025160",
    "end": "1031120"
  },
  {
    "text": "loud I'm like dude imagine building Ginger templates for rust you",
    "start": "1031120",
    "end": "1037600"
  },
  {
    "text": "gen you have some sort of like template language to generate your rust Cod",
    "start": "1039199",
    "end": "1047400"
  },
  {
    "text": "oh counting Tokyo as a dependency is wrong",
    "start": "1047400",
    "end": "1053360"
  },
  {
    "text": "since standard doesn't literally provide a runtime yeah but counting Tokyo as a as a dependency is wrong of course",
    "start": "1053360",
    "end": "1059360"
  },
  {
    "text": "that's what I'm saying counting uh Tokyo as a dependency is wrong because a blocking crate if you only have blocking",
    "start": "1059360",
    "end": "1066400"
  },
  {
    "text": "you shouldn't have Tokyo right uh what ended up working uh",
    "start": "1066400",
    "end": "1074640"
  },
  {
    "text": "the maybe async crate uh maybe a third attempt is based on a crate called maybe async I remember foolishly thinking it",
    "start": "1074640",
    "end": "1080480"
  },
  {
    "text": "was perfect solution back when I discovered it anyways the idea is that this crate can automatically remove async and await occurrences in your code",
    "start": "1080480",
    "end": "1086880"
  },
  {
    "text": "with procedural macros essentially automating the copy pasta process oh",
    "start": "1086880",
    "end": "1092120"
  },
  {
    "text": "that's a good attempt that's a really cool attempt I don't see how that would work but okay I like it because you got",
    "start": "1092120",
    "end": "1098000"
  },
  {
    "text": "like request has this whole blocking thing you can configure whether you want asynchronous or blocking code by",
    "start": "1098000",
    "end": "1103240"
  },
  {
    "text": "toggling the maybe async is uh sync feature when compiling the crate the macro works for functions traits and",
    "start": "1103240",
    "end": "1109320"
  },
  {
    "text": "imple blocks if one conversion isn't as easy as removing async in a away you can specify custom implementations with the",
    "start": "1109320",
    "end": "1115960"
  },
  {
    "text": "async imple and sync imple procedure macros it does this wonderfully and we've already been using an our Spotify",
    "start": "1115960",
    "end": "1122039"
  },
  {
    "text": "for a while now oh clever that's pretty I mean it's pretty",
    "start": "1122039",
    "end": "1128840"
  },
  {
    "text": "clever maybe always makes me nervous inherently it should in fact it worked",
    "start": "1129520",
    "end": "1134640"
  },
  {
    "text": "so well that I made our Spotify HP client agnostic which is even more f flexible than being async sync agnostic",
    "start": "1134640",
    "end": "1140840"
  },
  {
    "text": "this allows us to support multiple HTTP clients like request and Ure you you wrecked boy uh independently of whether",
    "start": "1140840",
    "end": "1147559"
  },
  {
    "text": "the client is asynchronous or synchronous being HTP client agnostic is not that hard to implement if you have",
    "start": "1147559",
    "end": "1153559"
  },
  {
    "text": "maybe async you just need to define a tradeit for HB client and then implement it okay this is actually pretty impressive I didn't know about uh maybe",
    "start": "1153559",
    "end": "1159960"
  },
  {
    "text": "asnc this is cool a snippet of code is worth a thousand words all right trait HP client get string sync implementation",
    "start": "1159960",
    "end": "1168600"
  },
  {
    "text": "Ure async implementation request Spotify endpoint let's",
    "start": "1168600",
    "end": "1177679"
  },
  {
    "text": "go oh",
    "start": "1179080",
    "end": "1182519"
  },
  {
    "text": "cool I don't understand the syntax but this is cool is this is this the",
    "start": "1185799",
    "end": "1192640"
  },
  {
    "text": "equivalent of where HTTP is this thing is that like the",
    "start": "1192640",
    "end": "1198799"
  },
  {
    "text": "equivalent of this is that what this is supposed to be trade bound yeah okay this is a trade",
    "start": "1198799",
    "end": "1205679"
  },
  {
    "text": "boundary inside of a inside the generic statement okay okay I've always just used where T colon is all these things I",
    "start": "1205679",
    "end": "1213919"
  },
  {
    "text": "I never really specify them right here okay it's the same thing",
    "start": "1213919",
    "end": "1218960"
  },
  {
    "text": "cool is that something like inheritance no it's it's it's specifying what the thing can be right it's like saying this",
    "start": "1218960",
    "end": "1227720"
  },
  {
    "text": "this item must adhere to this interface or more I'm using the term interface because I assume that you're just not familiar",
    "start": "1227720",
    "end": "1233760"
  },
  {
    "text": "with rust so that makes more sense and an HP client is defined right uh right here htb client must have this async",
    "start": "1233760",
    "end": "1241200"
  },
  {
    "text": "function right here the sync version looks like this the async version looks like this a little bit confused how this",
    "start": "1241200",
    "end": "1246799"
  },
  {
    "text": "exactly works because this thing defines it as async oh but it's a maybe async so it",
    "start": "1246799",
    "end": "1252400"
  },
  {
    "text": "allows this async to be dropped in favor of this if you have the okay okay okay okay okay okay okay okay hi uh then we",
    "start": "1252400",
    "end": "1259600"
  },
  {
    "text": "would extend it so that whichever client they want to use can enable the feature flag with their cargo tomel for example",
    "start": "1259600",
    "end": "1264640"
  },
  {
    "text": "if client Ure is enabled since Ure is synchronous it would enable maybe async",
    "start": "1264640",
    "end": "1269679"
  },
  {
    "text": "is sync uh in turn this would remove the async await and then imple async blocks",
    "start": "1269679",
    "end": "1275200"
  },
  {
    "text": "and the r RS potify client would use urx implementation internally it's actually pretty cool I didn't realize maybe async",
    "start": "1275200",
    "end": "1282520"
  },
  {
    "text": "I mean it it's it's pretty cool I see the problems coming up but it's still pretty cool the solution let's see has none of the downsides I listed previous",
    "start": "1282520",
    "end": "1288440"
  },
  {
    "text": "attempts no code duplication no overhead neither runtime nor compile time if the user wants blocking client they use urre",
    "start": "1288440",
    "end": "1293840"
  },
  {
    "text": "it doesn't pull in Tokyo and friends quite easy to understand for the user just configure the flag in cargo Tel",
    "start": "1293840",
    "end": "1299400"
  },
  {
    "text": "however stop reading for a couple minutes and try to figure out why you shouldn't do this in fact I'll give you nine months which is how long it took me",
    "start": "1299400",
    "end": "1305760"
  },
  {
    "text": "to do so I I honestly don't know",
    "start": "1305760",
    "end": "1311400"
  },
  {
    "text": "why I I I can't think of why so I don't know cuz I don't have nine months to",
    "start": "1311400",
    "end": "1317600"
  },
  {
    "text": "think about it the problem Ferris R oh rust is the problem rust itself is the problem all",
    "start": "1317600",
    "end": "1324760"
  },
  {
    "text": "right let's see it well the thing is that features in Rust must be additive enabling a feature should not",
    "start": "1324760",
    "end": "1331520"
  },
  {
    "text": "disable functionality it should it should usually be safe to enable any combination of",
    "start": "1331520",
    "end": "1339200"
  },
  {
    "text": "features oh maybe async is an either or you can't have both cargo May merge",
    "start": "1340679",
    "end": "1347200"
  },
  {
    "text": "features of a crate when it's duplicated in the dependency Tree in order to avoid compiling the same crate multiple times",
    "start": "1347200",
    "end": "1353320"
  },
  {
    "text": "the reference explains this quite well if you want more details okay we don't want more details this optimization",
    "start": "1353320",
    "end": "1358559"
  },
  {
    "text": "means that mutually exclusive features may break a dependency tree in our case maybe a sync isync is a toggle feature",
    "start": "1358559",
    "end": "1364760"
  },
  {
    "text": "enabled by client Ure so if you tried to compile with client request also enabled",
    "start": "1364760",
    "end": "1370640"
  },
  {
    "text": "it will fail because maybe async will be configured to generate synchronous functions signatures instead it's",
    "start": "1370640",
    "end": "1376080"
  },
  {
    "text": "impossible to have a crate that depends on both sync and async rs potify either",
    "start": "1376080",
    "end": "1381279"
  },
  {
    "text": "directly or indirectly and the whole concept of maybe async is currently wrong according to the cargo",
    "start": "1381279",
    "end": "1387480"
  },
  {
    "text": "reference man I this is emotional uh the feature uh the feature resolver V2 a",
    "start": "1389720",
    "end": "1394880"
  },
  {
    "text": "common misconception is that this is fixed by feature resolver V2 uh which this reference also explains quite well",
    "start": "1394880",
    "end": "1400640"
  },
  {
    "text": "okay what is that it has been enabled by default since 2021 Edition but you can specify it inside your Cargo toml in",
    "start": "1400640",
    "end": "1407120"
  },
  {
    "text": "previous ones or in previous ones this new version among the other things avoids unifying features in some special",
    "start": "1407120",
    "end": "1413360"
  },
  {
    "text": "cases but not in ours features enabled on platform specific dependencies for targets currently not currently being",
    "start": "1413360",
    "end": "1419520"
  },
  {
    "text": "built or ignored or ignored buil dependencies and proc macros do not share features with normal dependencies",
    "start": "1419520",
    "end": "1425799"
  },
  {
    "text": "Dev dependencies do not activate features unless building a Target that needs them like test examples",
    "start": "1425799",
    "end": "1433120"
  },
  {
    "text": "okay in this case I tried to reproduce this myself and it did work as I expected this repository is an example",
    "start": "1433880",
    "end": "1439600"
  },
  {
    "text": "of conflicting features which breaks with any feature resolver feels bad other fails there are a few other crates",
    "start": "1439600",
    "end": "1445440"
  },
  {
    "text": "that also had this problem Aaron a Rangers a Rangers a",
    "start": "1445440",
    "end": "1454039"
  },
  {
    "text": "rangor and aragog oh this is more of those DBS",
    "start": "1454080",
    "end": "1459320"
  },
  {
    "text": "orang Rango DB it's a Rango it's a Rango so it's a r a Rango rust a Rango RS or",
    "start": "1459320",
    "end": "1465000"
  },
  {
    "text": "aragog uh both use maybe async damn inkw well a wrapper for llvm it supports",
    "start": "1465000",
    "end": "1470679"
  },
  {
    "text": "multiple versions of llvm which are not compatible with each other and k8's open",
    "start": "1470679",
    "end": "1476240"
  },
  {
    "text": "API damn fixing once the crate started to gain popularity this issue was opened",
    "start": "1476240",
    "end": "1481440"
  },
  {
    "text": "with maybe Ayn which explains the situation okay here's the problem maybe async would now have to have two feature Flags is a sync and is async the crate",
    "start": "1481440",
    "end": "1489000"
  },
  {
    "text": "would generate functions in the same way but with sync or acing suffixes appended to the identifier so that it wouldn't uh",
    "start": "1489000",
    "end": "1495080"
  },
  {
    "text": "be conflicting for example",
    "start": "1495080",
    "end": "1499760"
  },
  {
    "text": "dang I don't know if this is really winning that much however these suffixes introduce noise and I wonder it would uh",
    "start": "1501159",
    "end": "1507840"
  },
  {
    "text": "one let's see so I wondered if it'd be possible to do it in a more ergonomic way isn't this what uh the whole async",
    "start": "1507840",
    "end": "1514159"
  },
  {
    "text": "question mark thing is supposed to fix in Rust isn't this about to be a a l a",
    "start": "1514159",
    "end": "1519720"
  },
  {
    "text": "language level feature Sabine it is Sabine I I swear",
    "start": "1519720",
    "end": "1527520"
  },
  {
    "text": "this is crazy but I swear there's like this async question flag",
    "start": "1527520",
    "end": "1533159"
  },
  {
    "text": "rust right",
    "start": "1533159",
    "end": "1536760"
  },
  {
    "text": "here I swear there was there was something I read about this it's like a f a potential future that people are",
    "start": "1541480",
    "end": "1547159"
  },
  {
    "text": "talking about uh here oh it's a it's l question mark the other way yeah they're going to be doing",
    "start": "1547159",
    "end": "1554279"
  },
  {
    "text": "these hold on let's let's oh question async doesn't",
    "start": "1554279",
    "end": "1562600"
  },
  {
    "text": "exist Oh I thought this one would H would have",
    "start": "1564000",
    "end": "1569919"
  },
  {
    "text": "it I swear there was one that had",
    "start": "1574320",
    "end": "1578759"
  },
  {
    "text": "uh yeah okay maybe this maybe this goes in more detail about constant ayc yeah",
    "start": "1580840",
    "end": "1586399"
  },
  {
    "text": "it goes into constant ayc we can do these you can do these kind like you can go like hey this thing could it could be",
    "start": "1586399",
    "end": "1593000"
  },
  {
    "text": "a problem anyways a man I love Russ but it's async",
    "start": "1593000",
    "end": "1599799"
  },
  {
    "text": "is uh so difficult to deal with it is it is very it is very difficult to deal",
    "start": "1599799",
    "end": "1605520"
  },
  {
    "text": "with all right let's keep on going we're almost we're almost done here right we're we're we're we're almost done here",
    "start": "1607600",
    "end": "1613200"
  },
  {
    "text": "this is very very interesting however the suffixes would introduce noise yep uh let's let's see I already read that",
    "start": "1613200",
    "end": "1618960"
  },
  {
    "text": "in summary it was about let's see it was too complicated and and I ultimately gave up the only way to fix the edge",
    "start": "1618960",
    "end": "1624279"
  },
  {
    "text": "cases would be to worsen the usability of RS potify for everyone and I'd argue that someone who depends on both async",
    "start": "1624279",
    "end": "1630960"
  },
  {
    "text": "and sync is unlikely we haven't actually had anyone complaining",
    "start": "1630960",
    "end": "1636120"
  },
  {
    "text": "yet so it's a fictional",
    "start": "1645200",
    "end": "1650440"
  },
  {
    "text": "problem is that what I just",
    "start": "1650440",
    "end": "1654240"
  },
  {
    "text": "read let's go unlike request RS potify is a highlevel library so it's hard to",
    "start": "1660760",
    "end": "1666320"
  },
  {
    "text": "imagine a scenario where it appears more than once in a dependency tree in the first place yeah yeah uh this is like",
    "start": "1666320",
    "end": "1672360"
  },
  {
    "text": "the edge of an application right edge of application libraries typically only appear once perhaps we could ask cargo",
    "start": "1672360",
    "end": "1678080"
  },
  {
    "text": "devs for help uh support from cargo RS potify is far from being the first day yes there's a whole closed there's a",
    "start": "1678080",
    "end": "1685600"
  },
  {
    "text": "whole thing going on you can look at all those blah blah blah blah it's it's it's it's this problem that exists in cargo",
    "start": "1685600",
    "end": "1692440"
  },
  {
    "text": "it's crazy currently we have a choice to make between ignoring the cargo reference we could assume that no no one is going to use both sync and async for",
    "start": "1692440",
    "end": "1699360"
  },
  {
    "text": "RS potify at the same time fixing maybe async to add the suffixes to each end point that sounds terrible dropping",
    "start": "1699360",
    "end": "1705679"
  },
  {
    "text": "support for both async and sync code it's kind of becoming a mess and we don't have the manpower to deal with uh",
    "start": "1705679",
    "end": "1711120"
  },
  {
    "text": "with and that affects the other parts of RS potify the problem is that some crates that depend on RS potify like uh",
    "start": "1711120",
    "end": "1716399"
  },
  {
    "text": "NC spot or spotifi are blocking and others like Spotify 2y are async",
    "start": "1716399",
    "end": "1723000"
  },
  {
    "text": "yeah damn this is a real problem you got yourself into this is a this is",
    "start": "1723000",
    "end": "1728360"
  },
  {
    "text": "tough this is real tough this is real tough I know this is",
    "start": "1728360",
    "end": "1733679"
  },
  {
    "text": "a problem that I have imposed to myself we could just say no we we only support async or no we only support sync while",
    "start": "1733679",
    "end": "1740440"
  },
  {
    "text": "there are users in interested in uh being able to use both I feel like if you only support sync you could use the",
    "start": "1740440",
    "end": "1746519"
  },
  {
    "text": "Tokyo blocking threads right you could let somebody do the async part",
    "start": "1746519",
    "end": "1752120"
  },
  {
    "text": "themselves as opposed to supporting both it seems like the better choice honestly with rust is just make sync stuff when",
    "start": "1752120",
    "end": "1758320"
  },
  {
    "text": "you can and just let async be an application Level concern I mean I know",
    "start": "1758320",
    "end": "1764000"
  },
  {
    "text": "it makes the application more inconvenient right but still honestly this sounds really horrible this sounds",
    "start": "1764000",
    "end": "1770840"
  },
  {
    "text": "terrible while there are users interested in being able to use both sometimes you just have to say no yes good job if a feature becomes so",
    "start": "1770840",
    "end": "1777559"
  },
  {
    "text": "complicated to deal with that your entire code base becomes a mess and you don't have the engineering power to maintain it then it's your only choice",
    "start": "1777559",
    "end": "1783679"
  },
  {
    "text": "if someone cared enough they could just Fork the crate and convert it to uh to synchronous for their own usage after all most API rappers and the like are uh",
    "start": "1783679",
    "end": "1791640"
  },
  {
    "text": "only support either syn asynchronous or blocking code Serenity Discord API squeal x uh T oxide telegram are async",
    "start": "1791640",
    "end": "1799399"
  },
  {
    "text": "only for example and they're quite popular I think this is one of the problems of Open Source in general you",
    "start": "1799399",
    "end": "1805559"
  },
  {
    "text": "really have to be careful listening to other people just to be real here for a",
    "start": "1805559",
    "end": "1811039"
  },
  {
    "text": "second listening to other people is really difficult because everybody's",
    "start": "1811039",
    "end": "1816440"
  },
  {
    "text": "going to have what they want to see in a library and what they want to see in a library may not be what you want to",
    "start": "1816440",
    "end": "1821960"
  },
  {
    "text": "build and sometimes you just build a thing for you and what you want if you want it to be Asing just Let It Be async",
    "start": "1821960",
    "end": "1828080"
  },
  {
    "text": "and that's what you want to build now other languages don't have this problem but go certainly does or uh",
    "start": "1828080",
    "end": "1833200"
  },
  {
    "text": "Russ certainly does uh even though it is quite frustrating at times I don't really regret spending so much time walking in circles trying to get both",
    "start": "1833200",
    "end": "1838519"
  },
  {
    "text": "async and sync to work yeah this good actually I I'm sure I was very very educational I was contributing to RS",
    "start": "1838519",
    "end": "1844120"
  },
  {
    "text": "Spotify RS sptify in the first place to just to learn I had no deadlines and no stress and I just wanted to improve a library in Rust in my free time and I",
    "start": "1844120",
    "end": "1850640"
  },
  {
    "text": "have learned a lot and hopefully you do after reading this it sounds like you approach the problem in the same series",
    "start": "1850640",
    "end": "1855760"
  },
  {
    "text": "of steps I would have approached it uh perhaps the lesson today is that we should remember that rust is a low-level language after all and there are some",
    "start": "1855760",
    "end": "1861840"
  },
  {
    "text": "things that aren't possible without a lot of complexity anyhow I'm looking forward to how the rust team fixes this",
    "start": "1861840",
    "end": "1867799"
  },
  {
    "text": "in the future so what do you think uh what would you do if you were a maintainer of RS",
    "start": "1867799",
    "end": "1873720"
  },
  {
    "text": "potify if I was a maintainer of it I would build a sync",
    "start": "1874120",
    "end": "1879240"
  },
  {
    "text": "version I would build a sync version and let you deal with async in the way you",
    "start": "1879240",
    "end": "1886159"
  },
  {
    "text": "want that way I don't enforce say Tokyo right because one problem about writing it in",
    "start": "1886159",
    "end": "1892639"
  },
  {
    "text": "async is often you might have some sort of like Tokyo reference or some nonsense in",
    "start": "1892639",
    "end": "1899679"
  },
  {
    "text": "there that they may not use Tokyo you know what I mean I know everybody uses Tokyo all of this to listen to music all",
    "start": "1899679",
    "end": "1907559"
  },
  {
    "text": "of this in the end to listen to music I have a really important question in your 20 plus years of experience uh would be the natural progression of knowledge uh",
    "start": "1907559",
    "end": "1914480"
  },
  {
    "text": "that you've had over the years I would like to Benchmark please your you're awesome dude I have no idea what that question even means um so for those that",
    "start": "1914480",
    "end": "1922159"
  },
  {
    "text": "are wondering because this term colored function keeps coming up and a lot of people don't know what the term colored function means it's really really simple",
    "start": "1922159",
    "end": "1928039"
  },
  {
    "text": "hey crows thank you very much here's what a colored function means pretend you had some function uh we'll call it red and for you to call Red you just had",
    "start": "1928039",
    "end": "1936120"
  },
  {
    "text": "to call it this way now let's pretend we had another function we're going to call Blue and for you to call Blue you have",
    "start": "1936120",
    "end": "1942200"
  },
  {
    "text": "to call it differently let's just say to call Blue you have to call it this way it's just different",
    "start": "1942200",
    "end": "1948159"
  },
  {
    "text": "right now what's the problem here here uh what's the problem here well anytime",
    "start": "1948159",
    "end": "1955960"
  },
  {
    "text": "you had a blue function you C you can't have a red function with blue functions",
    "start": "1955960",
    "end": "1962039"
  },
  {
    "text": "meaning that if I had my red function right inside of it I can only",
    "start": "1962039",
    "end": "1967519"
  },
  {
    "text": "call other red functions right uh red two I can't call a blue function because",
    "start": "1967519",
    "end": "1974080"
  },
  {
    "text": "it doesn't work in my function so so that means to make this work I actually have to turn it into a",
    "start": "1974080",
    "end": "1980120"
  },
  {
    "text": "blue function right and now I can still call my red",
    "start": "1980120",
    "end": "1985600"
  },
  {
    "text": "functions but my blue functions only work in blue",
    "start": "1985600",
    "end": "1990760"
  },
  {
    "text": "functions and so then I have to do this whole thing going on right here so what what what this really is is",
    "start": "1991120",
    "end": "1999720"
  },
  {
    "text": "this right and so for you to be able to call a blue function you have to wait",
    "start": "1999720",
    "end": "2007799"
  },
  {
    "text": "the blue function right I have to wait for the result to come in so in a wait requires",
    "start": "2007799",
    "end": "2016760"
  },
  {
    "text": "you to change how you call your function and so all asynchronous code all async",
    "start": "2016760",
    "end": "2023399"
  },
  {
    "text": "await code colors functions and once you color a function it becomes really",
    "start": "2023399",
    "end": "2029000"
  },
  {
    "text": "difficult uh for you to uh for you to be able to",
    "start": "2029000",
    "end": "2034080"
  },
  {
    "text": "like handle this code like right once you do that that's this that's the entirety of the problem we just read is in Rust you have this whole problem of",
    "start": "2034080",
    "end": "2040600"
  },
  {
    "text": "red and blue functions and then you have to like choose which one you're doing and you can't mix them they're very",
    "start": "2040600",
    "end": "2045679"
  },
  {
    "text": "difficult but in uh go you don't have that function or that",
    "start": "2045679",
    "end": "2051480"
  },
  {
    "text": "problem in go right you have this beautiful thing where you can go like go you know Funk yourself and do this thing",
    "start": "2051480",
    "end": "2057599"
  },
  {
    "text": "right and blah blah blah blah and then you just return out say a",
    "start": "2057599",
    "end": "2063079"
  },
  {
    "text": "channel right and so this function appears to be synchronous despite executing",
    "start": "2063079",
    "end": "2068679"
  },
  {
    "text": "asynchronous and you just go and do your things right you just don't even care you don't even have to think about it",
    "start": "2068679",
    "end": "2073839"
  },
  {
    "text": "that's what's that's what's neat about goes that it doesn't have red and blue it just",
    "start": "2073839",
    "end": "2080520"
  },
  {
    "text": "has red same stuff in JS no no not same stuff in Js Js has colored functions you",
    "start": "2080520",
    "end": "2087358"
  },
  {
    "text": "have async and non-async changing uh function colors inside a lib",
    "start": "2087359",
    "end": "2092599"
  },
  {
    "text": "wrapper is kind of terrible too yeah it's extremely difficult like it's extremely difficult and rust makes it",
    "start": "2092599",
    "end": "2098560"
  },
  {
    "text": "rust is just Peak difficult this is it this is truly it",
    "start": "2098560",
    "end": "2106079"
  },
  {
    "text": "this is what happens with async right this is what happens with",
    "start": "2106079",
    "end": "2111920"
  },
  {
    "text": "async this is perfect it says I retweeted it but I had",
    "start": "2111920",
    "end": "2119079"
  },
  {
    "text": "I didn't like it I swear the like always breaks this is very very",
    "start": "2119079",
    "end": "2124280"
  },
  {
    "text": "funny anyways the name uncommon Ryan Winchester W uncommon Ryan",
    "start": "2124280",
    "end": "2130800"
  },
  {
    "text": "Winchester W but quite the W might I add the name is the primagen",
    "start": "2130800",
    "end": "2137480"
  }
]