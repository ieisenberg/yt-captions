[
  {
    "text": "are lists Evil by BJ strr creator of C++",
    "start": "80",
    "end": "4759"
  },
  {
    "text": "magnify from the from the frequently",
    "start": "4759",
    "end": "6839"
  },
  {
    "text": "asked questions According to some",
    "start": "6839",
    "end": "8000"
  },
  {
    "text": "corners of the web I'm under the",
    "start": "8000",
    "end": "9280"
  },
  {
    "text": "impression that vectors are always",
    "start": "9280",
    "end": "10639"
  },
  {
    "text": "better than linked lists and that I",
    "start": "10639",
    "end": "11960"
  },
  {
    "text": "don't know about other data structures",
    "start": "11960",
    "end": "13599"
  },
  {
    "text": "such as trees and hash tables obviously",
    "start": "13599",
    "end": "16080"
  },
  {
    "text": "that's absurd yes the creator of C++",
    "start": "16080",
    "end": "18920"
  },
  {
    "text": "probably knows a thing or two about",
    "start": "18920",
    "end": "20480"
  },
  {
    "text": "these um the problem seems to be uh be",
    "start": "20480",
    "end": "23320"
  },
  {
    "text": "an interesting little exercise that John",
    "start": "23320",
    "end": "25160"
  },
  {
    "text": "Bentley once proposed to me insert a",
    "start": "25160",
    "end": "27279"
  },
  {
    "text": "sequence of random integers into a",
    "start": "27279",
    "end": "28800"
  },
  {
    "text": "sorted sequence by the way the Reas why",
    "start": "28800",
    "end": "30160"
  },
  {
    "text": "I wanted to do this article is we",
    "start": "30160",
    "end": "31240"
  },
  {
    "text": "actually watched this YouTube video",
    "start": "31240",
    "end": "32680"
  },
  {
    "text": "where he explains this and it's",
    "start": "32680",
    "end": "33920"
  },
  {
    "text": "extremely interesting extremely",
    "start": "33920",
    "end": "37360"
  },
  {
    "text": "interesting uh then remove those",
    "start": "37360",
    "end": "39320"
  },
  {
    "text": "elements one by one as determined by a",
    "start": "39320",
    "end": "41280"
  },
  {
    "text": "random sequence of positions uh do you",
    "start": "41280",
    "end": "43800"
  },
  {
    "text": "use a vector a contiguously allocated",
    "start": "43800",
    "end": "45960"
  },
  {
    "text": "sequence of elements or a linked list",
    "start": "45960",
    "end": "47800"
  },
  {
    "text": "for example see software development",
    "start": "47800",
    "end": "49680"
  },
  {
    "text": "infrastructure okay we're not going to",
    "start": "49680",
    "end": "50920"
  },
  {
    "text": "see that I use this example to",
    "start": "50920",
    "end": "52399"
  },
  {
    "text": "illustrate some points encourage thought",
    "start": "52399",
    "end": "54160"
  },
  {
    "text": "about algorithms data structures and",
    "start": "54160",
    "end": "56000"
  },
  {
    "text": "machine architectures concluding don't",
    "start": "56000",
    "end": "57920"
  },
  {
    "text": "store data unnecessarily keep data",
    "start": "57920",
    "end": "60480"
  },
  {
    "text": "Compact and access memory in a",
    "start": "60480",
    "end": "62160"
  },
  {
    "text": "predictable manner what was going on",
    "start": "62160",
    "end": "64080"
  },
  {
    "text": "here is that it's actually really",
    "start": "64080",
    "end": "65760"
  },
  {
    "text": "difficult to do this problem with a",
    "start": "65760",
    "end": "68119"
  },
  {
    "text": "linked list now that seems uh",
    "start": "68119",
    "end": "69960"
  },
  {
    "text": "unintuitive right it actually seems",
    "start": "69960",
    "end": "72720"
  },
  {
    "text": "really unintuitive because you like oh",
    "start": "72720",
    "end": "74439"
  },
  {
    "text": "you're removing random elements from",
    "start": "74439",
    "end": "76400"
  },
  {
    "text": "within a list use a linked list that",
    "start": "76400",
    "end": "78759"
  },
  {
    "text": "seems",
    "start": "78759",
    "end": "80439"
  },
  {
    "text": "obvious but it actually might be better",
    "start": "80439",
    "end": "85040"
  },
  {
    "text": "and is and you really can kind of prove",
    "start": "85040",
    "end": "87479"
  },
  {
    "text": "this out to actually walk the array to",
    "start": "87479",
    "end": "89600"
  },
  {
    "text": "the",
    "start": "89600",
    "end": "91119"
  },
  {
    "text": "position remove that and move over all",
    "start": "91119",
    "end": "94360"
  },
  {
    "text": "of the other elements I know but you",
    "start": "94360",
    "end": "96520"
  },
  {
    "text": "still have to REM you have to move over",
    "start": "96520",
    "end": "98320"
  },
  {
    "text": "all the remaining elements right so you",
    "start": "98320",
    "end": "101000"
  },
  {
    "text": "still have to cost up to that element in",
    "start": "101000",
    "end": "103320"
  },
  {
    "text": "both uh in the linked list but you have",
    "start": "103320",
    "end": "105920"
  },
  {
    "text": "the other side being less expensive",
    "start": "105920",
    "end": "108520"
  },
  {
    "text": "sounds uh sounds like obviously bad to",
    "start": "108520",
    "end": "111000"
  },
  {
    "text": "me it's crazy that like if you haven't",
    "start": "111000",
    "end": "114840"
  },
  {
    "text": "thought about these problems it is",
    "start": "114840",
    "end": "116799"
  },
  {
    "text": "rather crazy to think that it is faster",
    "start": "116799",
    "end": "120399"
  },
  {
    "text": "to keep things more compact all right",
    "start": "120399",
    "end": "122119"
  },
  {
    "text": "like if you're just not thinking about",
    "start": "122119",
    "end": "123880"
  },
  {
    "text": "it which is totally okay right most",
    "start": "123880",
    "end": "126600"
  },
  {
    "text": "people just program in JavaScript right",
    "start": "126600",
    "end": "128280"
  },
  {
    "text": "where everything's on the Heap uh where",
    "start": "128280",
    "end": "130640"
  },
  {
    "text": "you just really have no no idea where",
    "start": "130640",
    "end": "132760"
  },
  {
    "text": "stuff is stored you don't even know like",
    "start": "132760",
    "end": "134680"
  },
  {
    "text": "how is an object actually stored in",
    "start": "134680",
    "end": "136319"
  },
  {
    "text": "memory an object in an array what does",
    "start": "136319",
    "end": "138280"
  },
  {
    "text": "that look like right you just you really",
    "start": "138280",
    "end": "141000"
  },
  {
    "text": "don't have a good like conception of",
    "start": "141000",
    "end": "143720"
  },
  {
    "text": "what that probably is underneath the",
    "start": "143720",
    "end": "145360"
  },
  {
    "text": "hood it's probably a contiguous piece of",
    "start": "145360",
    "end": "148160"
  },
  {
    "text": "memory that has memory addresses that",
    "start": "148160",
    "end": "150640"
  },
  {
    "text": "point off to containers that contain",
    "start": "150640",
    "end": "152680"
  },
  {
    "text": "pointers to the object or some weird",
    "start": "152680",
    "end": "154599"
  },
  {
    "text": "thing like that you know what I mean",
    "start": "154599",
    "end": "156400"
  },
  {
    "text": "like I don't exactly know what goes on",
    "start": "156400",
    "end": "158640"
  },
  {
    "text": "but learn a little bit of c and you kind",
    "start": "158640",
    "end": "160319"
  },
  {
    "text": "of have a better idea right note the",
    "start": "160319",
    "end": "162560"
  },
  {
    "text": "absence of list and Vector in the",
    "start": "162560",
    "end": "163840"
  },
  {
    "text": "conclusion please don't confuse an",
    "start": "163840",
    "end": "165159"
  },
  {
    "text": "example with the examp uh with what the",
    "start": "165159",
    "end": "167519"
  },
  {
    "text": "example is meant to illustrate I use the",
    "start": "167519",
    "end": "169440"
  },
  {
    "text": "example in several talks most notably",
    "start": "169440",
    "end": "171400"
  },
  {
    "text": "going native keynote all right this",
    "start": "171400",
    "end": "173080"
  },
  {
    "text": "video has been popular it has been",
    "start": "173080",
    "end": "174319"
  },
  {
    "text": "downloaded more than 250,000 times plus",
    "start": "174319",
    "end": "176280"
  },
  {
    "text": "another 50,000 times at various other",
    "start": "176280",
    "end": "178680"
  },
  {
    "text": "sites my impression is that many viewers",
    "start": "178680",
    "end": "180599"
  },
  {
    "text": "fail to understand that the uh the",
    "start": "180599",
    "end": "182640"
  },
  {
    "text": "purpose of that example is to illustrate",
    "start": "182640",
    "end": "184360"
  },
  {
    "text": "some general principles and to make",
    "start": "184360",
    "end": "185920"
  },
  {
    "text": "people think initially most people say",
    "start": "185920",
    "end": "188120"
  },
  {
    "text": "list of course I have tried asking that",
    "start": "188120",
    "end": "190360"
  },
  {
    "text": "question many times because of many",
    "start": "190360",
    "end": "192760"
  },
  {
    "text": "insertions and deletions in the middle",
    "start": "192760",
    "end": "195720"
  },
  {
    "text": "lists are good at that the answer is",
    "start": "195720",
    "end": "197599"
  },
  {
    "text": "completely and dramatically wrong and it",
    "start": "197599",
    "end": "199680"
  },
  {
    "text": "is good to know why again this is a",
    "start": "199680",
    "end": "203040"
  },
  {
    "text": "really hard concept right like because",
    "start": "203040",
    "end": "206440"
  },
  {
    "text": "we've been taught our whole life that",
    "start": "206440",
    "end": "208200"
  },
  {
    "text": "that's that's that like that's why you",
    "start": "208200",
    "end": "209879"
  },
  {
    "text": "use linked lists right but it's",
    "start": "209879",
    "end": "212159"
  },
  {
    "text": "dramatically incorrect I've been using",
    "start": "212159",
    "end": "214239"
  },
  {
    "text": "this example for years I had graduat",
    "start": "214239",
    "end": "216480"
  },
  {
    "text": "students Implement and measure dozens of",
    "start": "216480",
    "end": "218480"
  },
  {
    "text": "variant uh variants of this exercise and",
    "start": "218480",
    "end": "220799"
  },
  {
    "text": "different exercises examples and",
    "start": "220799",
    "end": "222760"
  },
  {
    "text": "measurements by others can be found on",
    "start": "222760",
    "end": "224200"
  },
  {
    "text": "the web of course I have tried Maps they",
    "start": "224200",
    "end": "226879"
  },
  {
    "text": "are much better than list but still",
    "start": "226879",
    "end": "228080"
  },
  {
    "text": "slower than vectors I have tried larger",
    "start": "228080",
    "end": "229599"
  },
  {
    "text": "element sizes eventually lists come into",
    "start": "229599",
    "end": "231879"
  },
  {
    "text": "their own uh I have used binary search",
    "start": "231879",
    "end": "233920"
  },
  {
    "text": "and other uh direct insertion for",
    "start": "233920",
    "end": "235920"
  },
  {
    "text": "vectors yes they speed up even further I",
    "start": "235920",
    "end": "238079"
  },
  {
    "text": "have checked my theory I'm not even",
    "start": "238079",
    "end": "239799"
  },
  {
    "text": "violating any Big O complexity rules it",
    "start": "239799",
    "end": "241959"
  },
  {
    "text": "is just some of the operations can be",
    "start": "241959",
    "end": "243599"
  },
  {
    "text": "dramatically more expensive for uh one",
    "start": "243599",
    "end": "245400"
  },
  {
    "text": "data structure compared to another",
    "start": "245400",
    "end": "246799"
  },
  {
    "text": "absolutely I have preallocated lists",
    "start": "246799",
    "end": "249760"
  },
  {
    "text": "that's uh better than a standard list",
    "start": "249760",
    "end": "251799"
  },
  {
    "text": "but traversal still kills performance I",
    "start": "251799",
    "end": "254120"
  },
  {
    "text": "have used singly link list Ford lists",
    "start": "254120",
    "end": "256359"
  },
  {
    "text": "that doesn't make much difference but",
    "start": "256359",
    "end": "257840"
  },
  {
    "text": "makes it a bit harder to ensure that uh",
    "start": "257840",
    "end": "259880"
  },
  {
    "text": "the user's code is 100% equivalent I",
    "start": "259880",
    "end": "262680"
  },
  {
    "text": "know and say that 500,000 lists are not",
    "start": "262680",
    "end": "265880"
  },
  {
    "text": "common but that doesn't matter for my",
    "start": "265880",
    "end": "267520"
  },
  {
    "text": "main point we use many structures",
    "start": "267520",
    "end": "269240"
  },
  {
    "text": "largest small where there is a choice",
    "start": "269240",
    "end": "271280"
  },
  {
    "text": "between linked and contiguous",
    "start": "271280",
    "end": "272720"
  },
  {
    "text": "representation I know for insertion push",
    "start": "272720",
    "end": "275039"
  },
  {
    "text": "to front is faster for standard lists",
    "start": "275039",
    "end": "277479"
  },
  {
    "text": "and push the back is faster for vectors",
    "start": "277479",
    "end": "279680"
  },
  {
    "text": "you can construct examples to illustrate",
    "start": "279680",
    "end": "281520"
  },
  {
    "text": "that but this example is not one of",
    "start": "281520",
    "end": "283479"
  },
  {
    "text": "those honestly this is super super good",
    "start": "283479",
    "end": "285639"
  },
  {
    "text": "things to think about because I think",
    "start": "285639",
    "end": "287320"
  },
  {
    "text": "what this goes to show is that often we",
    "start": "287320",
    "end": "290080"
  },
  {
    "text": "simply kind of use these guiding",
    "start": "290080",
    "end": "291759"
  },
  {
    "text": "principles right and let me show you",
    "start": "291759",
    "end": "294000"
  },
  {
    "text": "something that I think will probably",
    "start": "294000",
    "end": "295440"
  },
  {
    "text": "drive this point home really really well",
    "start": "295440",
    "end": "298600"
  },
  {
    "text": "uh",
    "start": "298600",
    "end": "301560"
  },
  {
    "text": "here we go so what I have here is the",
    "start": "301840",
    "end": "305440"
  },
  {
    "text": "following I have some ways to control",
    "start": "305440",
    "end": "307120"
  },
  {
    "text": "this data structure I have a string that",
    "start": "307120",
    "end": "309639"
  },
  {
    "text": "has a bunch of unique characters in it",
    "start": "309639",
    "end": "311400"
  },
  {
    "text": "and then I have an iterator effectively",
    "start": "311400",
    "end": "313360"
  },
  {
    "text": "that creates a string that does not",
    "start": "313360",
    "end": "315360"
  },
  {
    "text": "repeat until certain amount of",
    "start": "315360",
    "end": "316960"
  },
  {
    "text": "characters have been added uh that",
    "start": "316960",
    "end": "319160"
  },
  {
    "text": "certain amount of characters of course",
    "start": "319160",
    "end": "320400"
  },
  {
    "text": "is going to be 800,000 so at 800,000 it",
    "start": "320400",
    "end": "323160"
  },
  {
    "text": "starts producing a string that has a",
    "start": "323160",
    "end": "324960"
  },
  {
    "text": "longer amount of unique uh in here what",
    "start": "324960",
    "end": "327440"
  },
  {
    "text": "we're going to be doing is we're going",
    "start": "327440",
    "end": "328639"
  },
  {
    "text": "to check we're going to see can we can",
    "start": "328639",
    "end": "330440"
  },
  {
    "text": "we find x amount of unique characters in",
    "start": "330440",
    "end": "333199"
  },
  {
    "text": "a row so I've created a string that",
    "start": "333199",
    "end": "334960"
  },
  {
    "text": "produces the worst case over and over",
    "start": "334960",
    "end": "336840"
  },
  {
    "text": "and over again and then at 800,000 will",
    "start": "336840",
    "end": "340560"
  },
  {
    "text": "produce a string with that many unique",
    "start": "340560",
    "end": "342759"
  },
  {
    "text": "characters right and so I just keep on",
    "start": "342759",
    "end": "345280"
  },
  {
    "text": "going through and I do a little uh check",
    "start": "345280",
    "end": "346919"
  },
  {
    "text": "for the uh for a set and I do a little",
    "start": "346919",
    "end": "349160"
  },
  {
    "text": "check for an array same thing right and",
    "start": "349160",
    "end": "352120"
  },
  {
    "text": "I compare I can compare them so I'll run",
    "start": "352120",
    "end": "354160"
  },
  {
    "text": "one of them 40 times and run the other",
    "start": "354160",
    "end": "355680"
  },
  {
    "text": "one 40 times if I jump in here and say",
    "start": "355680",
    "end": "358479"
  },
  {
    "text": "um what the hell is this thing uh let's",
    "start": "358479",
    "end": "361479"
  },
  {
    "text": "just say that we start with 10 so we do",
    "start": "361479",
    "end": "363400"
  },
  {
    "text": "a a size 10 so we we produce a string",
    "start": "363400",
    "end": "365840"
  },
  {
    "text": "with nine unique characters up to",
    "start": "365840",
    "end": "368039"
  },
  {
    "text": "800,000 characters and then produce uh a",
    "start": "368039",
    "end": "371639"
  },
  {
    "text": "10 unique character string at 800,000",
    "start": "371639",
    "end": "374280"
  },
  {
    "text": "let's see how long it takes for a set it",
    "start": "374280",
    "end": "377360"
  },
  {
    "text": "takes approximately a second for an",
    "start": "377360",
    "end": "380520"
  },
  {
    "text": "array even though I'm doing index of",
    "start": "380520",
    "end": "382960"
  },
  {
    "text": "checks it's like half the time and you",
    "start": "382960",
    "end": "385240"
  },
  {
    "text": "can just do this over and over again and",
    "start": "385240",
    "end": "386800"
  },
  {
    "text": "see the exact same thing it doesn't",
    "start": "386800",
    "end": "388440"
  },
  {
    "text": "really change right an array is faster",
    "start": "388440",
    "end": "392240"
  },
  {
    "text": "at",
    "start": "392240",
    "end": "393120"
  },
  {
    "text": "finding uh elements within it than a set",
    "start": "393120",
    "end": "396080"
  },
  {
    "text": "is when there's 10 elements within a",
    "start": "396080",
    "end": "399680"
  },
  {
    "text": "list okay so maybe that's kind of",
    "start": "399680",
    "end": "402800"
  },
  {
    "text": "confusing to a lot of people a lot of",
    "start": "402800",
    "end": "404199"
  },
  {
    "text": "people probably wouldn't actually um",
    "start": "404199",
    "end": "408080"
  },
  {
    "text": "wouldn't actually think that to be true",
    "start": "408080",
    "end": "410560"
  },
  {
    "text": "right we can move it up to",
    "start": "410560",
    "end": "413639"
  },
  {
    "text": "20 it's still the same",
    "start": "413800",
    "end": "417638"
  },
  {
    "text": "thing and your you know your computer",
    "start": "418400",
    "end": "421240"
  },
  {
    "text": "will produce different results uh you go",
    "start": "421240",
    "end": "423599"
  },
  {
    "text": "up to 30 and now you start seeing like",
    "start": "423599",
    "end": "425400"
  },
  {
    "text": "the real difference start happening",
    "start": "425400",
    "end": "426879"
  },
  {
    "text": "right now you're starting to collide",
    "start": "426879",
    "end": "428400"
  },
  {
    "text": "into something that makes sense now",
    "start": "428400",
    "end": "430319"
  },
  {
    "text": "arrays are the same speed maybe slightly",
    "start": "430319",
    "end": "433400"
  },
  {
    "text": "uh maybe slightly slower right we had",
    "start": "433400",
    "end": "435400"
  },
  {
    "text": "one where it was slightly faster we had",
    "start": "435400",
    "end": "436800"
  },
  {
    "text": "one where it was slightly slower we're",
    "start": "436800",
    "end": "438240"
  },
  {
    "text": "getting different results all the time",
    "start": "438240",
    "end": "439560"
  },
  {
    "text": "obviously I'm not trying to be very",
    "start": "439560",
    "end": "440919"
  },
  {
    "text": "precise here right I'm not trying to to",
    "start": "440919",
    "end": "444560"
  },
  {
    "text": "do something good this is just me doing",
    "start": "444560",
    "end": "446840"
  },
  {
    "text": "a quick check right and it's clear that",
    "start": "446840",
    "end": "449039"
  },
  {
    "text": "there is things underneath the hood that",
    "start": "449039",
    "end": "451240"
  },
  {
    "text": "you may not realize it's not JavaScript",
    "start": "451240",
    "end": "452919"
  },
  {
    "text": "that's not JavaScript that's any",
    "start": "452919",
    "end": "454800"
  },
  {
    "text": "language do that with any language",
    "start": "454800",
    "end": "458080"
  },
  {
    "text": "right you can do this with any language",
    "start": "458080",
    "end": "461199"
  },
  {
    "text": "ever for a big enough one and a small",
    "start": "461199",
    "end": "463199"
  },
  {
    "text": "enough uh n o of one is slower than o of",
    "start": "463199",
    "end": "466280"
  },
  {
    "text": "n Greg oh my goodness we have the",
    "start": "466280",
    "end": "467720"
  },
  {
    "text": "creator of leptos here I absolutely love",
    "start": "467720",
    "end": "470120"
  },
  {
    "text": "seeing this by the way leptos is",
    "start": "470120",
    "end": "471479"
  },
  {
    "text": "probably the greatest templating system",
    "start": "471479",
    "end": "473159"
  },
  {
    "text": "currently in Rust I hands down agree",
    "start": "473159",
    "end": "475639"
  },
  {
    "text": "with that uh absolutely love it uh Greg",
    "start": "475639",
    "end": "478759"
  },
  {
    "text": "I was actually uh doing I was working",
    "start": "478759",
    "end": "480440"
  },
  {
    "text": "with shuttle RS and uh doing more things",
    "start": "480440",
    "end": "483039"
  },
  {
    "text": "with uh uh HTM X and leptos I love it",
    "start": "483039",
    "end": "486599"
  },
  {
    "text": "absolutely love it but Big O of one can",
    "start": "486599",
    "end": "490759"
  },
  {
    "text": "be slower than Big O of n right because",
    "start": "490759",
    "end": "494840"
  },
  {
    "text": "remember when I'm doing this when I'm",
    "start": "494840",
    "end": "497440"
  },
  {
    "text": "doing this check right here I'm checking",
    "start": "497440",
    "end": "499919"
  },
  {
    "text": "for that character every single",
    "start": "499919",
    "end": "502080"
  },
  {
    "text": "time right so I'm doing a a linear walk",
    "start": "502080",
    "end": "505800"
  },
  {
    "text": "through the list looking for this",
    "start": "505800",
    "end": "508240"
  },
  {
    "text": "character whereas I'm doing an O of one",
    "start": "508240",
    "end": "512200"
  },
  {
    "text": "check by adding the character to the set",
    "start": "512200",
    "end": "514959"
  },
  {
    "text": "and then rechecking the length",
    "start": "514959",
    "end": "518440"
  },
  {
    "text": "right all o of one means is that",
    "start": "518440",
    "end": "520680"
  },
  {
    "text": "performance is independent of input size",
    "start": "520680",
    "end": "523120"
  },
  {
    "text": "correct and this is a key point that a",
    "start": "523120",
    "end": "525600"
  },
  {
    "text": "lot of people miss o of one can still be",
    "start": "525600",
    "end": "528680"
  },
  {
    "text": "slow because really o of one o of one is",
    "start": "528680",
    "end": "531600"
  },
  {
    "text": "an incorrect way to State it oh it's a",
    "start": "531600",
    "end": "533560"
  },
  {
    "text": "correct way to sayate it but it's it's",
    "start": "533560",
    "end": "534800"
  },
  {
    "text": "incorrect it's O of C1 where C is some",
    "start": "534800",
    "end": "538680"
  },
  {
    "text": "constant right it's some cost of the",
    "start": "538680",
    "end": "541120"
  },
  {
    "text": "actual operation we drop all constants",
    "start": "541120",
    "end": "543880"
  },
  {
    "text": "in Big O representation but they",
    "start": "543880",
    "end": "545720"
  },
  {
    "text": "actually have meaning so you can think",
    "start": "545720",
    "end": "547399"
  },
  {
    "text": "of something that is n^2 versus uh o uh",
    "start": "547399",
    "end": "550880"
  },
  {
    "text": "o of one or o of N and you forget that",
    "start": "550880",
    "end": "554399"
  },
  {
    "text": "maybe in front of the N Square it's",
    "start": "554399",
    "end": "556160"
  },
  {
    "text": "actually just a three but in front of",
    "start": "556160",
    "end": "557519"
  },
  {
    "text": "the N it's like a 10 it's like a",
    "start": "557519",
    "end": "559399"
  },
  {
    "text": "thousand and so n squar is actually",
    "start": "559399",
    "end": "562760"
  },
  {
    "text": "faster for some amount of time than",
    "start": "562760",
    "end": "566320"
  },
  {
    "text": "n it's just always good to think about",
    "start": "566320",
    "end": "568880"
  },
  {
    "text": "that's the whole quick sort versus",
    "start": "568880",
    "end": "570519"
  },
  {
    "text": "bubble sort thing sometimes it's faster",
    "start": "570519",
    "end": "572720"
  },
  {
    "text": "to bubble",
    "start": "572720",
    "end": "574160"
  },
  {
    "text": "sort than it is to quick",
    "start": "574160",
    "end": "578000"
  },
  {
    "text": "sort just something to think about even",
    "start": "578000",
    "end": "580000"
  },
  {
    "text": "if bubble sword yeah look at that uh",
    "start": "580000",
    "end": "581680"
  },
  {
    "text": "it's faster than merge sword well merge",
    "start": "581680",
    "end": "582880"
  },
  {
    "text": "sword is just just slow merge sword is a",
    "start": "582880",
    "end": "585279"
  },
  {
    "text": "very silly algorithm uh don't use merge",
    "start": "585279",
    "end": "587680"
  },
  {
    "text": "sort merge sort creates new memory you",
    "start": "587680",
    "end": "590360"
  },
  {
    "text": "quick sorts merge sort without the",
    "start": "590360",
    "end": "591800"
  },
  {
    "text": "creation of new memory effectively",
    "start": "591800",
    "end": "593200"
  },
  {
    "text": "that's how I think about",
    "start": "593200",
    "end": "595200"
  },
  {
    "text": "it anyways",
    "start": "595200",
    "end": "597760"
  },
  {
    "text": "um hey great nice to see you I always",
    "start": "597760",
    "end": "599959"
  },
  {
    "text": "appreciate seeing you uh I'm I Greg so",
    "start": "599959",
    "end": "602519"
  },
  {
    "text": "for me in the programming World Greg is",
    "start": "602519",
    "end": "604680"
  },
  {
    "text": "kind of like my hero if you're wondering",
    "start": "604680",
    "end": "607079"
  },
  {
    "text": "when I look at people that I really look",
    "start": "607079",
    "end": "608760"
  },
  {
    "text": "up to Greg is one of those people um all",
    "start": "608760",
    "end": "611360"
  },
  {
    "text": "right my point is not about list and",
    "start": "611360",
    "end": "613079"
  },
  {
    "text": "such they have their uses but this",
    "start": "613079",
    "end": "615480"
  },
  {
    "text": "example isn't one of them please don't",
    "start": "615480",
    "end": "617200"
  },
  {
    "text": "confuse me or please don't confuse the",
    "start": "617200",
    "end": "619720"
  },
  {
    "text": "example with what the example is used to",
    "start": "619720",
    "end": "621680"
  },
  {
    "text": "illustrate the example is about use of",
    "start": "621680",
    "end": "624279"
  },
  {
    "text": "memory we often create a data structure",
    "start": "624279",
    "end": "627040"
  },
  {
    "text": "do some computation on it requiring",
    "start": "627040",
    "end": "629440"
  },
  {
    "text": "often traversal then delete it the order",
    "start": "629440",
    "end": "631839"
  },
  {
    "text": "sequence is simply an example of such",
    "start": "631839",
    "end": "633800"
  },
  {
    "text": "use and an example is presented to get",
    "start": "633800",
    "end": "635560"
  },
  {
    "text": "people to think about what matters in",
    "start": "635560",
    "end": "637079"
  },
  {
    "text": "such cases my suggestion is don't store",
    "start": "637079",
    "end": "640120"
  },
  {
    "text": "data unnecessarily keep that data",
    "start": "640120",
    "end": "642399"
  },
  {
    "text": "compact access memory in a predictable",
    "start": "642399",
    "end": "645680"
  },
  {
    "text": "manner I emphasize the important uh",
    "start": "645680",
    "end": "648200"
  },
  {
    "text": "importance of cash effects in my",
    "start": "648200",
    "end": "649920"
  },
  {
    "text": "experience all but true experts tend to",
    "start": "649920",
    "end": "651839"
  },
  {
    "text": "forget those uh those when algorithms",
    "start": "651839",
    "end": "654040"
  },
  {
    "text": "are discussed and yes my recommendation",
    "start": "654040",
    "end": "655800"
  },
  {
    "text": "is to use vector by default I actually",
    "start": "655800",
    "end": "657839"
  },
  {
    "text": "think this is a great great piece of",
    "start": "657839",
    "end": "660160"
  },
  {
    "text": "advice just default to using a vector or",
    "start": "660160",
    "end": "663079"
  },
  {
    "text": "this is called a dynamic array",
    "start": "663079",
    "end": "664720"
  },
  {
    "text": "effectively it's a contiguous memory",
    "start": "664720",
    "end": "666160"
  },
  {
    "text": "space holding stuff always default to",
    "start": "666160",
    "end": "668680"
  },
  {
    "text": "using that until you know you should be",
    "start": "668680",
    "end": "671160"
  },
  {
    "text": "using something else all right more",
    "start": "671160",
    "end": "673279"
  },
  {
    "text": "generally use of contiguous",
    "start": "673279",
    "end": "675079"
  },
  {
    "text": "representation unless there is a good",
    "start": "675079",
    "end": "676959"
  },
  {
    "text": "reason not to like cc++ is designed uh",
    "start": "676959",
    "end": "680000"
  },
  {
    "text": "to do that by default also please don't",
    "start": "680000",
    "end": "681600"
  },
  {
    "text": "make any statements about performance",
    "start": "681600",
    "end": "682800"
  },
  {
    "text": "without",
    "start": "682800",
    "end": "685040"
  },
  {
    "text": "[Applause]",
    "start": "686570",
    "end": "687959"
  },
  {
    "text": "measurements",
    "start": "687959",
    "end": "690110"
  },
  {
    "text": "[Applause]",
    "start": "690110",
    "end": "692639"
  },
  {
    "text": "love it really don't you should just not",
    "start": "692639",
    "end": "696320"
  },
  {
    "text": "ever think something's faster until",
    "start": "696320",
    "end": "697800"
  },
  {
    "text": "you've measured it",
    "start": "697800",
    "end": "700000"
  },
  {
    "text": "right real talk even if you believe what",
    "start": "700000",
    "end": "703079"
  },
  {
    "text": "you're creating will be faster start by",
    "start": "703079",
    "end": "705680"
  },
  {
    "text": "measuring first to know that you're",
    "start": "705680",
    "end": "707120"
  },
  {
    "text": "fixing something that's slow right uh",
    "start": "707120",
    "end": "710639"
  },
  {
    "text": "I've seen a case where changing a 0o to2",
    "start": "710639",
    "end": "713320"
  },
  {
    "text": "uh element list to a 0 to2 element",
    "start": "713320",
    "end": "715440"
  },
  {
    "text": "Vector made a factor of two difference",
    "start": "715440",
    "end": "717839"
  },
  {
    "text": "uh to an algorithm I didn't expect that",
    "start": "717839",
    "end": "720040"
  },
  {
    "text": "nor did other experts looking at the",
    "start": "720040",
    "end": "723760"
  },
  {
    "text": "code",
    "start": "723760",
    "end": "726279"
  },
  {
    "text": "yeah",
    "start": "726279",
    "end": "729279"
  },
  {
    "text": "again beautiful I absolutely love this",
    "start": "731160",
    "end": "733720"
  },
  {
    "text": "article this article was incredible um I",
    "start": "733720",
    "end": "736480"
  },
  {
    "text": "know it's old but these are good things",
    "start": "736480",
    "end": "738360"
  },
  {
    "text": "to return to right these are great",
    "start": "738360",
    "end": "740680"
  },
  {
    "text": "things to return to great things to",
    "start": "740680",
    "end": "742320"
  },
  {
    "text": "really think about great things to",
    "start": "742320",
    "end": "743880"
  },
  {
    "text": "actually consider when programming which",
    "start": "743880",
    "end": "746680"
  },
  {
    "text": "is like you don't have to be clever you",
    "start": "746680",
    "end": "749240"
  },
  {
    "text": "can use a set because they're easy to",
    "start": "749240",
    "end": "751600"
  },
  {
    "text": "use but if you're looking as a",
    "start": "751600",
    "end": "753760"
  },
  {
    "text": "performance first thing just consider",
    "start": "753760",
    "end": "755839"
  },
  {
    "text": "using a vector right it's as simple as",
    "start": "755839",
    "end": "759959"
  },
  {
    "text": "that and then when you know that it's",
    "start": "759959",
    "end": "762399"
  },
  {
    "text": "slow do something",
    "start": "762399",
    "end": "764920"
  },
  {
    "text": "else dick measure",
    "start": "764920",
    "end": "768800"
  },
  {
    "text": "absolutely I just read everything you",
    "start": "769440",
    "end": "771440"
  },
  {
    "text": "say Big O is about velocity not about",
    "start": "771440",
    "end": "773440"
  },
  {
    "text": "speed isn't it uh that's not that's not",
    "start": "773440",
    "end": "776440"
  },
  {
    "text": "what a big O is Big O is the I mean you",
    "start": "776440",
    "end": "778639"
  },
  {
    "text": "could say that I mean if you're I guess",
    "start": "778639",
    "end": "781160"
  },
  {
    "text": "yeah in a sense you're correct bigo is",
    "start": "781160",
    "end": "783680"
  },
  {
    "text": "about uh is not necessarily even about",
    "start": "783680",
    "end": "787000"
  },
  {
    "text": "velocity because even in that example of",
    "start": "787000",
    "end": "788639"
  },
  {
    "text": "Big O uh Big O N squ that is not",
    "start": "788639",
    "end": "792160"
  },
  {
    "text": "actually true because it's actually Big",
    "start": "792160",
    "end": "793560"
  },
  {
    "text": "O N S some C of n uh plus some plus some",
    "start": "793560",
    "end": "798519"
  },
  {
    "text": "d right it's actually it's it's more",
    "start": "798519",
    "end": "801839"
  },
  {
    "text": "than that it's about what dictates the",
    "start": "801839",
    "end": "804680"
  },
  {
    "text": "growth of the algorithm that's what Big",
    "start": "804680",
    "end": "807639"
  },
  {
    "text": "O is and so yes you can call that",
    "start": "807639",
    "end": "810560"
  },
  {
    "text": "velocity Fair the first derivative yeah",
    "start": "810560",
    "end": "813320"
  },
  {
    "text": "it's kind of like whatever is the",
    "start": "813320",
    "end": "814320"
  },
  {
    "text": "biggest element in the first derivative",
    "start": "814320",
    "end": "816160"
  },
  {
    "text": "that's the one you keep",
    "start": "816160",
    "end": "818519"
  },
  {
    "text": "fair I'm solving every problem with the",
    "start": "818519",
    "end": "820600"
  },
  {
    "text": "vector well just I mean there's",
    "start": "820600",
    "end": "822079"
  },
  {
    "text": "complications with doing that as well",
    "start": "822079",
    "end": "824000"
  },
  {
    "text": "but it's just like a tradeoff you have",
    "start": "824000",
    "end": "825320"
  },
  {
    "text": "to be you have to understand that you're",
    "start": "825320",
    "end": "827320"
  },
  {
    "text": "making I think that's probably the",
    "start": "827320",
    "end": "829199"
  },
  {
    "text": "better observation to make is understand",
    "start": "829199",
    "end": "831959"
  },
  {
    "text": "the trade-off you're",
    "start": "831959",
    "end": "833720"
  },
  {
    "text": "making don't just think something is",
    "start": "833720",
    "end": "836160"
  },
  {
    "text": "better or worse you know what I mean",
    "start": "836160",
    "end": "839160"
  },
  {
    "text": "it's not a great analogy though it's not",
    "start": "839160",
    "end": "840600"
  },
  {
    "text": "a great analogy okay just drop the whole",
    "start": "840600",
    "end": "842440"
  },
  {
    "text": "acceleration versus velocity versus all",
    "start": "842440",
    "end": "844600"
  },
  {
    "text": "that okay the best way to put a big O of",
    "start": "844600",
    "end": "846560"
  },
  {
    "text": "n of course is that the it's it's the",
    "start": "846560",
    "end": "848600"
  },
  {
    "text": "amount of expected growth in the",
    "start": "848600",
    "end": "850560"
  },
  {
    "text": "algorithm's runtime or space based on",
    "start": "850560",
    "end": "853040"
  },
  {
    "text": "the size of the input if you're input",
    "start": "853040",
    "end": "855079"
  },
  {
    "text": "doubles and you have an N squ algorithm",
    "start": "855079",
    "end": "856839"
  },
  {
    "text": "you can expect your runtime to",
    "start": "856839",
    "end": "859440"
  },
  {
    "text": "quadruple or your memory to",
    "start": "859440",
    "end": "862399"
  },
  {
    "text": "quadruple and that's in rough sense it's",
    "start": "862399",
    "end": "865279"
  },
  {
    "text": "not perfect the name is the prime but",
    "start": "865279",
    "end": "871160"
  }
]