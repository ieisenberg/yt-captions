[
  {
    "text": "all right so what is this right here we've seen I do remember Java started this like 1 billion row challenge I",
    "start": "40",
    "end": "5839"
  },
  {
    "text": "didn't realize that a bunch of are a bunch of languages now doing this 1 billion row challenge is this like a is",
    "start": "5839",
    "end": "11920"
  },
  {
    "text": "this like a thing cuz I mean go sounds fantastic yeah they are the the 1 billion row challenge is intended to be",
    "start": "11920",
    "end": "18359"
  },
  {
    "text": "a fun exploration of how far modern Java can be pushed for aggregation 1 billion rows from a text file okay so they are",
    "start": "18359",
    "end": "24359"
  },
  {
    "text": "okay so effectively it's how fast can you read and do something with one billion rows of data in a language so",
    "start": "24359",
    "end": "30240"
  },
  {
    "text": "it's kind of like let's let's let's go to a pretty far case and then you have to do super weird programming to make it",
    "start": "30240",
    "end": "37000"
  },
  {
    "text": "successful right all right anyways sometimes around the middle of January I stumbled across the 1 billion row",
    "start": "37000",
    "end": "42160"
  },
  {
    "text": "challenge I had a lot of fun working on this I started uh with an execution time of larger than 6 minutes and finished at",
    "start": "42160",
    "end": "47760"
  },
  {
    "text": "14 seconds okay okay this sounds good what is the 1 billion row Challenge and input a text file containing temperature",
    "start": "47760",
    "end": "54039"
  },
  {
    "text": "values for a range of weather stations each row uh is one measurement in the format of string station name float",
    "start": "54039",
    "end": "60719"
  },
  {
    "text": "measurement output for each unique station find the minimum average and maximum temperature recorded and admit",
    "start": "60719",
    "end": "67240"
  },
  {
    "text": "the final result on standard out in the stations names alphabetical order with the format this 14 seconds dude I'm not",
    "start": "67240",
    "end": "74080"
  },
  {
    "text": "going to lie to you if I could if if I could last 14 seconds I mean that would be an achievement in of itself okay I'm",
    "start": "74080",
    "end": "80079"
  },
  {
    "text": "just letting you know I I would be stoked this is fantastic by the way 14 14 seconds to do a billion rows is still",
    "start": "80079",
    "end": "87040"
  },
  {
    "text": "very impressive okay same brother yes hell hell yeah hell yeah ja dude Java",
    "start": "87040",
    "end": "92600"
  },
  {
    "text": "can do a 1.4 second damn what a lucky man what a lucky man uh let's see no",
    "start": "92600",
    "end": "98119"
  },
  {
    "text": "constraints working with this temperature values are within uh effectively 100 up 100 down okay okay",
    "start": "98119",
    "end": "104000"
  },
  {
    "text": "the temperature value has only exactly one fraction of a digit the bite length of the station is within this there will",
    "start": "104000",
    "end": "109799"
  },
  {
    "text": "be a maximum of 10,000 unique stations rounding of the temperature must be done using semantics of i e",
    "start": "109799",
    "end": "116280"
  },
  {
    "text": "754 rounding Direction round towards positive I don't what is what is round towards positive does that mean you just",
    "start": "116280",
    "end": "122880"
  },
  {
    "text": "you just always round up you effectively just seal it's in the name dummy you just seal at all times I thought we just",
    "start": "122880",
    "end": "128520"
  },
  {
    "text": "called that seal by the way every time I say seal I just I literally cannot help but to think I every time in my head",
    "start": "128520",
    "end": "134440"
  },
  {
    "text": "somewhere deep down I go every single time I make a weird sound like I okay that's it sounds much",
    "start": "134440",
    "end": "140920"
  },
  {
    "text": "weirder when you do it out loud you know now that I now that I did it out loud that sounds weird okay now that I've",
    "start": "140920",
    "end": "146360"
  },
  {
    "text": "done it out loud I feel kind of weird about it but that's right think about every single time you ruin seal for me",
    "start": "146360",
    "end": "152080"
  },
  {
    "text": "yeah I'm going to ruin seal for you cuz now you're going to think about seal seals the whole time the wrong kind of seals okay what are you going to do I",
    "start": "152080",
    "end": "159920"
  },
  {
    "text": "think of Batman Forever what okay I know we're like trying to stay on on on track",
    "start": "159920",
    "end": "165319"
  },
  {
    "text": "can somebody can somebody please explain Batman can please can you explain why",
    "start": "165319",
    "end": "170440"
  },
  {
    "text": "you think of Batman Forever when you see the word Seal Kiss From A Rose seal wow",
    "start": "170440",
    "end": "178120"
  },
  {
    "text": "that's wow okay okay okay eight okay okay okay uh sounds",
    "start": "178120",
    "end": "185440"
  },
  {
    "text": "simple enough what's the catch the input file has 1 billion rows how big is a billion it's it's less than a trillion I",
    "start": "185440",
    "end": "191959"
  },
  {
    "text": "can tell you that much if you started counting to one billion at a rate of three seconds per number that would take my guess is 99 years 95 years okay I was",
    "start": "191959",
    "end": "200239"
  },
  {
    "text": "close I thought it was 33 years per billion if it's one out a second anyways the challenge is to process the file to",
    "start": "200239",
    "end": "205599"
  },
  {
    "text": "print out the output in the least amount of time possible uh it's summarized nicely in this picture okay yeah yeah",
    "start": "205599",
    "end": "212360"
  },
  {
    "text": "tools I'm working with the challenge was initially in uh induced introduced for Java but folks started trying it out in",
    "start": "212360",
    "end": "217599"
  },
  {
    "text": "different languages you can check out the discussion about the one BRC in goang I solved this using goang 1.21 all",
    "start": "217599",
    "end": "224680"
  },
  {
    "text": "benchmarks are ran on an Apple M1 Pro Apple silicon mentioned Apple silicon mentioned apparently Sushi Dragon told",
    "start": "224680",
    "end": "231200"
  },
  {
    "text": "me a really cool story where he is like he is exploring the Apple M1 stuff for for his kind of really crazy streaming",
    "start": "231200",
    "end": "238360"
  },
  {
    "text": "setup and it consumes assumes like significantly",
    "start": "238360",
    "end": "243519"
  },
  {
    "text": "less energy and it's just as fast and he's like very",
    "start": "243519",
    "end": "251400"
  },
  {
    "text": "happy about it Apple Fanboy exposed D I don't even own an apple I actually I might I actually am curious if I",
    "start": "251400",
    "end": "259840"
  },
  {
    "text": "do anyways a 2021 model with 16 gigs of memory and uh 10 vcpu uh the input file",
    "start": "260359",
    "end": "267080"
  },
  {
    "text": "with 1 billion rows is about 16 GB you can find the GitHub repository with my solution here I took the approach of",
    "start": "267080",
    "end": "272680"
  },
  {
    "text": "solving this iteratively doing so helped me track my progress you can find the iterations documented in the repos read",
    "start": "272680",
    "end": "278280"
  },
  {
    "text": "me with each iteration I focused on optimizing one of these three areas data structure concurrency reading the file",
    "start": "278280",
    "end": "283520"
  },
  {
    "text": "now that all of this is out of the way let's Dive In by the way I do want to do this again this would be like one of the",
    "start": "283520",
    "end": "288560"
  },
  {
    "text": "things I'd want to do full-time content creation creation I wonder so what would be kind of fun is do you think that who",
    "start": "288560",
    "end": "297000"
  },
  {
    "text": "do you think would produce better code Gemini Brock or jiid to solve this",
    "start": "297000",
    "end": "302440"
  },
  {
    "text": "problem or co-pilot none probably none they would all produce shitty one I love",
    "start": "302440",
    "end": "309120"
  },
  {
    "text": "you grug Minstrel is Minstrel a thing dolly dolly will just produce images of",
    "start": "309120",
    "end": "316080"
  },
  {
    "text": "the weather stations you are AI I am I am I am I'm",
    "start": "316080",
    "end": "322280"
  },
  {
    "text": "definitely not like I'm definitely I'm definitely not like not General AI I'm",
    "start": "322280",
    "end": "328319"
  },
  {
    "text": "definitely uh I'm still learning I still have some problems like it's hard for me to",
    "start": "328319",
    "end": "333880"
  },
  {
    "text": "self-learn we're getting places all right Baseline implementation I start with the naive implementation to establish the base uh Baseline runtime",
    "start": "333880",
    "end": "339919"
  },
  {
    "text": "the first iteration did uh not make use of any concurrency good uh read a file line by line the input file each line",
    "start": "339919",
    "end": "345720"
  },
  {
    "text": "can be processed independently so I started by reading the file line by line for this I used uh buff io's Scanner",
    "start": "345720",
    "end": "351880"
  },
  {
    "text": "with the default split function scan lines a pretty standard way to read the file uh read a file line by line in go L",
    "start": "351880",
    "end": "358360"
  },
  {
    "text": "scanner is Handy face that reads from file and see and returns contents up to",
    "start": "358360",
    "end": "363759"
  },
  {
    "text": "the split defined for us this means a new character sln will not be returned for each line okay that makes sense so",
    "start": "363759",
    "end": "369520"
  },
  {
    "text": "we won't have to handle it separately foreshadowing this is where the problem lies with this method of reading a file",
    "start": "369520",
    "end": "375120"
  },
  {
    "text": "okay interesting okay AI vetle mentioned vetle mentioned did I just get a vetle",
    "start": "375120",
    "end": "380680"
  },
  {
    "text": "thank you toaster chicken I appreciate that thank you by the way I I left alerts on boys",
    "start": "380680",
    "end": "387880"
  },
  {
    "text": "we left alerts on alerts are on yeah I did I walked on stage it was fantastic uh data structure map to store",
    "start": "387880",
    "end": "395400"
  },
  {
    "text": "all the temperature values recorded for each yeah okay this is what I would do as well the output requires minimum maximum and average temperatures rounded",
    "start": "395400",
    "end": "402120"
  },
  {
    "text": "in each City so I initial initially started with a map that stored the all temperatures recorded for each unique",
    "start": "402120",
    "end": "407720"
  },
  {
    "text": "station each station stored a string type and each temperature stored a float 64 type making this map signature map",
    "start": "407720",
    "end": "413759"
  },
  {
    "text": "string float okay fair oh wait hold on wait no that's no no no no he said",
    "start": "413759",
    "end": "420840"
  },
  {
    "text": "that wrong that's a that's a an array of floats you stored all the arrays you didn't just why would you store all the arrays",
    "start": "420840",
    "end": "427919"
  },
  {
    "text": "anyways I would even think about storing the arrays I would just I would assume You' just do a summon account right I",
    "start": "427919",
    "end": "433280"
  },
  {
    "text": "discovered your channel recently oh thank you as each line read from the file values were added to this map accordingly after the uh the entire file",
    "start": "433280",
    "end": "440240"
  },
  {
    "text": "file contents are read and the map is constructed we iterate through each key value pair in the map and calculate the",
    "start": "440240",
    "end": "445360"
  },
  {
    "text": "min max and average values okay so this is who here would probably create it something like this who would do",
    "start": "445360",
    "end": "450919"
  },
  {
    "text": "something along this whole line of just reading line by line throwing it all in a map and calling it a day I think a lot",
    "start": "450919",
    "end": "456680"
  },
  {
    "text": "of people would probably start there a lot of people would start there I would have started with the aggregate value with counting sum Min and Max I always",
    "start": "456680",
    "end": "464240"
  },
  {
    "text": "reduce my loads when I can damn uh yeah I probably wouldn't start with an array because an array just requires more",
    "start": "464240",
    "end": "470520"
  },
  {
    "text": "programming for me just being able to just do a quick if check as each one comes through it just feels easier if",
    "start": "470520",
    "end": "475879"
  },
  {
    "text": "that makes sense I wonder what the I wonder what the answer is so in my head before looking forward without looking at what",
    "start": "475879",
    "end": "482360"
  },
  {
    "text": "the the better thing to do is is that there has to be a way that you want to pass these values you want to be able to",
    "start": "482360",
    "end": "488000"
  },
  {
    "text": "effectively have a bunch you want a bunch of threads doing something right",
    "start": "488000",
    "end": "495240"
  },
  {
    "text": "but you need to be able to you need a way so that you can split out all these threads without now this is the big",
    "start": "495240",
    "end": "502520"
  },
  {
    "text": "trick here you want to be able to do it without having to use a mutex right cuz",
    "start": "502520",
    "end": "508919"
  },
  {
    "text": "that's where things get all that's where things get all terrible is once you use a mutex you then cause you cause things",
    "start": "508919",
    "end": "514680"
  },
  {
    "text": "to slow down you don't want to do that so you could imagine that you could have like almost what it's like how I would",
    "start": "514680",
    "end": "519800"
  },
  {
    "text": "refer to it as like a a consistent hash right so you could you could imagine that in my head how I would try to speed",
    "start": "519800",
    "end": "525800"
  },
  {
    "text": "things up is that every city that starts with an A goes to a specific um thread that's",
    "start": "525800",
    "end": "533720"
  },
  {
    "text": "running and each one goes to a different thread so all A's are sorted in one area all B's are sorted in in one area all",
    "start": "533720",
    "end": "539720"
  },
  {
    "text": "C's are sorted in one area so that way there's no they can all just run independently that like at least that's",
    "start": "539720",
    "end": "545360"
  },
  {
    "text": "how I would I would like a thread index by key exactly that's like how I would",
    "start": "545360",
    "end": "550680"
  },
  {
    "text": "think of it I don't know if that's I don't know if that's true I don't know if it's any good but that's I I would use a some",
    "start": "550680",
    "end": "558839"
  },
  {
    "text": "sort of consistent hash that's like that's what I would that's like that's the first thing I think",
    "start": "558839",
    "end": "564880"
  },
  {
    "text": "of how let's see how would you load B let's see how would you balance the load then I wouldn't try to balance the load",
    "start": "564880",
    "end": "570000"
  },
  {
    "text": "not at first right cuz I don't know if there's any sort of like you know what I mean yeah I",
    "start": "570000",
    "end": "577360"
  },
  {
    "text": "wouldn't do this either so someone just said do this right here I wouldn't do this either so this is so the reason why",
    "start": "577360",
    "end": "582680"
  },
  {
    "text": "you don't want to do this is that there's one billion rows you have to do 1 billion uh divided by what you do is you just have a sum and a count right if",
    "start": "582680",
    "end": "590680"
  },
  {
    "text": "you just have a sum and a count you already know the average at the very end right so that way you only do 10,000",
    "start": "590680",
    "end": "598240"
  },
  {
    "text": "divides all right you don't need to balance the",
    "start": "598240",
    "end": "603440"
  },
  {
    "text": "load first uh first up a number of go routines that is guaranteed to be greater than 2x the cores and send",
    "start": "603440",
    "end": "608959"
  },
  {
    "text": "messages in see that's kind of what I want to do so that's kind of how I'm thinking about it right if you just have",
    "start": "608959",
    "end": "614959"
  },
  {
    "text": "the sum and count you're good uh won't the sum possibly overflow use a 64 then well you got to remember look at",
    "start": "614959",
    "end": "621120"
  },
  {
    "text": "this uh will the sum overflow there's some rules to it which is the temperatures between 999 and positive",
    "start": "621120",
    "end": "627600"
  },
  {
    "text": "999 so that means you already know that you can only be less than you know you won't be any less than negative 100 and",
    "start": "627600",
    "end": "635360"
  },
  {
    "text": "greater than 100 so a billion of those would be 100 billion right if it was all positive numbers in one location that's",
    "start": "635360",
    "end": "640839"
  },
  {
    "text": "100 billion that means you only need like what a 38 bit number to store all those so a 64 is",
    "start": "640839",
    "end": "646440"
  },
  {
    "text": "plenty right it overflow on an in32 but you're using a float 64 anyways I just use the middle out strategy everyone's",
    "start": "646440",
    "end": "652920"
  },
  {
    "text": "pretty much favored okay let's keep on going but that's how I would want to do it all right concurrency processes uh",
    "start": "652920",
    "end": "658200"
  },
  {
    "text": "each mix let's see stations min max and average temperatures in separate go routines okay the first place I",
    "start": "658200",
    "end": "663519"
  },
  {
    "text": "introduced concurrency was the last stage of execution for each city in in the map I instantiated a new go",
    "start": "663519",
    "end": "669360"
  },
  {
    "text": "routine to process the city's min max and average temperatures oh that's clever okay so he went with literally",
    "start": "669360",
    "end": "676639"
  },
  {
    "text": "just do it on a per City basis okay interesting uh I code up to this point",
    "start": "676639",
    "end": "682160"
  },
  {
    "text": "can be found here so in my head I'd rather use a uh a fix sized array this",
    "start": "682160",
    "end": "687600"
  },
  {
    "text": "improved performance by 100 seconds oh my goodness oh my goodness can someone",
    "start": "687600",
    "end": "693160"
  },
  {
    "text": "drop the article for this yeah this is a great this is a great this is a great article 100 seconds that's pretty impressive okay okay I like it uh this",
    "start": "693160",
    "end": "701560"
  },
  {
    "text": "is inefficient because we're spinning up too many go routines a maximum of 10,000 uh one for each station the go scheduler",
    "start": "701560",
    "end": "707560"
  },
  {
    "text": "is spending more time managing the go rains than actual work we will fix this in the future iterations okay okay",
    "start": "707560",
    "end": "713760"
  },
  {
    "text": "concurrency decoupling reading and processing of file contents currently we are reading a line from the file part",
    "start": "713760",
    "end": "718920"
  },
  {
    "text": "parsing the station name and temperature and adding it to a map and then reading the next line doing this sequentially",
    "start": "718920",
    "end": "724560"
  },
  {
    "text": "means that we are not taking advantage of all the CPU cores instead we are reading a line waiting to finish processing it before reading the next",
    "start": "724560",
    "end": "730600"
  },
  {
    "text": "line to overcome this I decoupled reading and processing of lines I introduced two go routines a producer go",
    "start": "730600",
    "end": "736639"
  },
  {
    "text": "routine responsible for scanning lines and a consumer go routine uh to process reading these lines okay that makes",
    "start": "736639",
    "end": "742440"
  },
  {
    "text": "sense okay so now this is we're getting closer we're getting closer sup what's",
    "start": "742440",
    "end": "747600"
  },
  {
    "text": "up baby I like like where this is going this is a good idea to communicate between these two go routines uh send",
    "start": "747600",
    "end": "753279"
  },
  {
    "text": "the read lines from the producer to to the consumer go routine I used a Channel all right channels are blocking the best",
    "start": "753279",
    "end": "758519"
  },
  {
    "text": "way explained by the concurrency and go by Katherine uh Cox budet all any go",
    "start": "758519",
    "end": "764160"
  },
  {
    "text": "routine that attempts to write to a channel that is full will wait until the channel has been emptied any go routine that attempts to read from a channel",
    "start": "764160",
    "end": "770199"
  },
  {
    "text": "that is empty will wait until the uh one item is placed in it I just assume you make your channel big enough right isn't",
    "start": "770199",
    "end": "775680"
  },
  {
    "text": "that like just like an easy way to kind of avoid it this means if we don't use a a buffer channel uh when one go routine",
    "start": "775680",
    "end": "782639"
  },
  {
    "text": "is executing the other will be blocked okay I'm a genius I'm a genius let's see",
    "start": "782639",
    "end": "790240"
  },
  {
    "text": "using an unbuffered channel the execution time indeed increased twofold nice CPU profiling the code we can see",
    "start": "790240",
    "end": "796279"
  },
  {
    "text": "uh the most amount of time is going in go routine switches okay so we pretty much just sit there and is that what",
    "start": "796279",
    "end": "803240"
  },
  {
    "text": "this is so I don't know what these things are that are I can't read this cuz I don't understand it I guess let's see go ready Funk is go ready",
    "start": "803240",
    "end": "810240"
  },
  {
    "text": "Funk that one or is it this one oh schedule I guess yeah runtime. schedule yeah it looks like runtime schedule and",
    "start": "810240",
    "end": "816880"
  },
  {
    "text": "runnable is just like just like getting whammed right there",
    "start": "816880",
    "end": "822800"
  },
  {
    "text": "W this makes sense in Alliance with our understanding of unbuffered channels okay using a buffer Channel using a",
    "start": "822800",
    "end": "827880"
  },
  {
    "text": "buffer Channel with capacity 100 I just why why stop at 100 okay like why stop",
    "start": "827880",
    "end": "833839"
  },
  {
    "text": "at a 100 why not a thousand it's a billion right",
    "start": "833839",
    "end": "840759"
  },
  {
    "text": "anyways using a buffer Channel with capacity 100 we see the performance increased by 50% compared to the",
    "start": "842199",
    "end": "847720"
  },
  {
    "text": "unbuffered channel so that means you're at 4 and a half minutes so you're back to like nominal okay that does not look like 50%",
    "start": "847720",
    "end": "854600"
  },
  {
    "text": "there buddy okay that's not 50% there I don't know if you guys can see that but 5 minutes and 22 seconds is not 50% of 9",
    "start": "854600",
    "end": "861480"
  },
  {
    "text": "minutes and 12 seconds okay we're doing some loose we're doing some loose ma some loose math here all right",
    "start": "861480",
    "end": "870040"
  },
  {
    "text": "make channel one billion all right the code and profiles I'll point to can be found here okay we I feel like",
    "start": "870040",
    "end": "876920"
  },
  {
    "text": "all this is like making sense cuz we haven't done anything different really like if you really think about it we haven't done anything that is",
    "start": "876920",
    "end": "882880"
  },
  {
    "text": "fundamentally changing how much work he's doing uh but this still got slower than the previous iteration looking at the CPU profile we noticed that there's",
    "start": "882880",
    "end": "889160"
  },
  {
    "text": "a sign significant time going into uh runtime Channel receive people are just hanging out",
    "start": "889160",
    "end": "895399"
  },
  {
    "text": "doing nothing let's see what are we looking at what are we looking at I do like okay I do want to take a pause here for a quick second I really",
    "start": "895399",
    "end": "903519"
  },
  {
    "text": "like that he's taking the time and even though I feel like I could just improve this immediately he's not doing what he",
    "start": "903519",
    "end": "911000"
  },
  {
    "text": "thinks is faster he is first profiling and then",
    "start": "911000",
    "end": "916639"
  },
  {
    "text": "thinking about what he should do so you can see right here read file line by line into map is going real slow and",
    "start": "916639",
    "end": "923040"
  },
  {
    "text": "channel receive is a huge portion of it right here right and then you can see this one",
    "start": "923040",
    "end": "928160"
  },
  {
    "text": "right here a lot of P thread condition weight a lot of time spent in P thread condition weight and you sleep and this",
    "start": "928160",
    "end": "935120"
  },
  {
    "text": "so these all seem very excited if I remember correctly if you keep a nice discreet uh stack size like 100 go will",
    "start": "935120",
    "end": "940759"
  },
  {
    "text": "keep the references on the stack which makes it much faster oh okay that's good to",
    "start": "940759",
    "end": "947240"
  },
  {
    "text": "know I like this setting a slice of lines uh on the channel one way to reduce the number of items we send on",
    "start": "947399",
    "end": "953319"
  },
  {
    "text": "the channel is to chunk a few lines together in a slice and then send it over to the channel this means the Chan",
    "start": "953319",
    "end": "958600"
  },
  {
    "text": "Channel type will change from string to string array okay okay buffer channels",
    "start": "958600",
    "end": "964480"
  },
  {
    "text": "this this this seems like a good idea since the channel type is slice to avoid race conditions we need to create a copy",
    "start": "964480",
    "end": "969519"
  },
  {
    "text": "of the slice to send it over the channel alternatively we can use sync. poool and reuse the memory and the limitation",
    "start": "969519",
    "end": "976240"
  },
  {
    "text": "let's see in limit memory",
    "start": "976240",
    "end": "979120"
  },
  {
    "text": "allocation I would just one would just simply assume that creating a new array",
    "start": "981560",
    "end": "989240"
  },
  {
    "text": "might be easier I don't see why anyways whatever go has a handy uh data race",
    "start": "989240",
    "end": "994440"
  },
  {
    "text": "detector which can be used by adding dash race flag uh when running your code okay look at that I don't I don't even",
    "start": "994440",
    "end": "1001000"
  },
  {
    "text": "want to know about all this all this code uh code after these change let's see changes in the State uh running this",
    "start": "1001000",
    "end": "1007079"
  },
  {
    "text": "execution time comes down by 160 seconds now this is",
    "start": "1007079",
    "end": "1011959"
  },
  {
    "text": "real this is good if go is keeping things uh on the stack then memory allocation shouldn't be a huge concern",
    "start": "1012199",
    "end": "1019040"
  },
  {
    "text": "I'm not sure you I don't think you can keep this on the stack can you I'm not really sure how that would work with",
    "start": "1019040",
    "end": "1024678"
  },
  {
    "text": "passing stuff through channels and keeping things on stack and stuff like that in my head I don't I don't I'd have",
    "start": "1024679",
    "end": "1030640"
  },
  {
    "text": "to write it myself pretty much to understand why that works because I",
    "start": "1030640",
    "end": "1035959"
  },
  {
    "text": "don't it'll only keep the references on stack Judo isn't all references always on",
    "start": "1035959",
    "end": "1042199"
  },
  {
    "text": "stack unless if you have unless if you have a double pointer",
    "start": "1043679",
    "end": "1049720"
  },
  {
    "text": "how do they keep how do they keep a reference on the on the Heap because",
    "start": "1049720",
    "end": "1054799"
  },
  {
    "text": "don't you need a reference from the stack to look it up on the Heap Judo now you're now you're damn confusing me Judo",
    "start": "1054799",
    "end": "1060919"
  },
  {
    "text": "okay something has to be on the stack anyways data structures use uh N64",
    "start": "1060919",
    "end": "1068440"
  },
  {
    "text": "instead of float 64 really at this point I add a test in the CI and realized my tests were failing due to how I was",
    "start": "1068440",
    "end": "1073480"
  },
  {
    "text": "rounding according to the constraints rounding should be done using the semantics of iple E 754 rounding",
    "start": "1073480",
    "end": "1079720"
  },
  {
    "text": "detection round towards positive I fixed this by parsing the temperature string into int and then doing a summation int",
    "start": "1079720",
    "end": "1086159"
  },
  {
    "text": "and converting it to a float 64 only after the calculations have been done this ended up improving considerably by",
    "start": "1086159",
    "end": "1091760"
  },
  {
    "text": "almost 40 seconds wow that's a lot this ended by I'm surprised by that",
    "start": "1091760",
    "end": "1098679"
  },
  {
    "text": "was surprised to see that there's such a significant performance improvement with this change I guess parsing a float is",
    "start": "1098679",
    "end": "1105840"
  },
  {
    "text": "significantly more complicated than parsing an INT I think that makes I think that makes sense now that I think about that I",
    "start": "1105840",
    "end": "1111960"
  },
  {
    "text": "think that probably makes a lot more sense that parsing a parsing an INT has to be easier well because floats can be",
    "start": "1111960",
    "end": "1118480"
  },
  {
    "text": "like represented in all sorts of different I mean there's so much to floats it's about CPU registers I mean",
    "start": "1118480",
    "end": "1124840"
  },
  {
    "text": "parsing a float is more work yes I assume there's there's because an INT is just literally it's just a specific",
    "start": "1124840",
    "end": "1131559"
  },
  {
    "text": "character range with the minus sign right floats have more the data is fixed",
    "start": "1131559",
    "end": "1137039"
  },
  {
    "text": "uh fixed Point yes but I'm just saying an INT is but I can't imagine it's that much anyways I don't I don't know I",
    "start": "1137039",
    "end": "1143799"
  },
  {
    "text": "don't get it results will wild very uh widely based on CPU architecture individual ALU FPU performance uh as",
    "start": "1143799",
    "end": "1151520"
  },
  {
    "text": "well as actual numbers of alus and F fpus available per core in super scaler",
    "start": "1151520",
    "end": "1156840"
  },
  {
    "text": "designs which influence how many independent operations can be executed in parallel this means your hardw will play a major factor in determining how",
    "start": "1156840",
    "end": "1162880"
  },
  {
    "text": "much this change will contribute to Performance Improvement a classic it depends moment there we go look at that there we",
    "start": "1162880",
    "end": "1169600"
  },
  {
    "text": "go that's the data structure we were talking about I knew this would be the best I just knew it uh in the Baseline",
    "start": "1169600",
    "end": "1175080"
  },
  {
    "text": "this feels like a very obvious one right and it also feels easier honestly cuz then you don't have to you don't have to",
    "start": "1175080",
    "end": "1181320"
  },
  {
    "text": "take you don't have to take a value read it put it into an array and then later Rego over all the values and keep track",
    "start": "1181320",
    "end": "1188280"
  },
  {
    "text": "of all four of those things it said you can have that all as one operation which just makes it seem like it's way easier right in the Baseline implementation",
    "start": "1188280",
    "end": "1194240"
  },
  {
    "text": "we're using a map of uh string to float uh float array where the each station we are storing all the temperatures",
    "start": "1194240",
    "end": "1199960"
  },
  {
    "text": "recorded this is wasteful as we don't actually need to store the temperatures and it's just honestly simpler we can uh simply store the minimum maximum sum and",
    "start": "1199960",
    "end": "1206320"
  },
  {
    "text": "count of all temperatures with this change we'll see performance improvements for two reasons one decreased memory allocations this will",
    "start": "1206320",
    "end": "1212400"
  },
  {
    "text": "go from storing a slice of around 100,000 uh in 64 items to uh let's see more or less equaling whatever this is",
    "start": "1212400",
    "end": "1219559"
  },
  {
    "text": "to ex storing exactly four oh really you're not doing an object you're doing uh you're doing like",
    "start": "1219559",
    "end": "1225280"
  },
  {
    "text": "a little array okay I mean I guess that makes sense I like by the way I love this kind of stuff when you when you",
    "start": "1225280",
    "end": "1230760"
  },
  {
    "text": "toss in an array like this I like it I like that uh this significantly",
    "start": "1230760",
    "end": "1236480"
  },
  {
    "text": "decreases our memory footprint decreasing the number of go routines in the last step we can get rid of spinning up go routines to process temperatures",
    "start": "1236480",
    "end": "1242480"
  },
  {
    "text": "of each station as we already processing the min max uh and count values while constructing the map itself this means",
    "start": "1242480",
    "end": "1248360"
  },
  {
    "text": "the go schedule needs to worry about significantly lesser number of go routines making this change uh the execution time went down by 70 seconds",
    "start": "1248360",
    "end": "1255320"
  },
  {
    "text": "which is a huge amount at this point let's see code and profiles uh till this point can be found here okay look at",
    "start": "1255320",
    "end": "1260840"
  },
  {
    "text": "that we're getting low we're getting low I like this optimizing all three read chunks instead of one line at a time oh",
    "start": "1260840",
    "end": "1268440"
  },
  {
    "text": "yeah so in other words my guess is this is just like take a file and read out",
    "start": "1268440",
    "end": "1273600"
  },
  {
    "text": "whatever is like Optimal to read out I don't know what I don't know if there's like an optimal amount of space you should read from a file but you can",
    "start": "1273600",
    "end": "1281000"
  },
  {
    "text": "instead of having something that scans it in right you can just read a huge chunk and then you can just do it",
    "start": "1281000",
    "end": "1287039"
  },
  {
    "text": "yourself uh in the Baseline implementation we use buff iio scanner and read by file contents line by line",
    "start": "1287039",
    "end": "1292159"
  },
  {
    "text": "while this is a handy interface it reads the file contents performs some checks and then iterates over it and returns a",
    "start": "1292159",
    "end": "1297400"
  },
  {
    "text": "single line without Whit space character if we read each file uh in chunks it will help uh performance in two ways",
    "start": "1297400",
    "end": "1303120"
  },
  {
    "text": "single iteration over the btes when parsing the city temperatures we will avoid iterating over bytes that scanner F internally does yep you get yeah you",
    "start": "1303120",
    "end": "1310080"
  },
  {
    "text": "get a little you get some nice ones right there it depends on the situation 128 is",
    "start": "1310080",
    "end": "1315200"
  },
  {
    "text": "a good General value oh interesting okay hey hi hi from YouTube hi this makes sense because you also get you I mean",
    "start": "1315200",
    "end": "1321559"
  },
  {
    "text": "both are o of n but n drops a constant",
    "start": "1321559",
    "end": "1326640"
  },
  {
    "text": "right to reduce the number of items sent over the channel we will be sending 100 lines together in a string slice we are sending one uh 10,000 items over the",
    "start": "1326640",
    "end": "1333640"
  },
  {
    "text": "channel if we read 64 megabytes uh Chunk from the file and send it over the channel That will be 256 items very",
    "start": "1333640",
    "end": "1339840"
  },
  {
    "text": "significant reduction okay this is this is actually pretty neat I like this to process each",
    "start": "1339840",
    "end": "1344919"
  },
  {
    "text": "chunk independently we should end uh in a new line we can do this in two ways after the chunk is read read until the",
    "start": "1344919",
    "end": "1351720"
  },
  {
    "text": "next new line concatenate to the two bites and send it over the channel slice uh the read bites uh till the last new",
    "start": "1351720",
    "end": "1359279"
  },
  {
    "text": "line the leftover chunk can be sent along with the next chunk read that's how I do it right here I would assume that you could just have an array that",
    "start": "1359279",
    "end": "1365080"
  },
  {
    "text": "already exists and just mem copy it into your like temp array and then you don't",
    "start": "1365080",
    "end": "1370159"
  },
  {
    "text": "have to like you don't have to do something clever like this because that's way too clever it's way too clever trying to do making it work out",
    "start": "1370159",
    "end": "1379559"
  },
  {
    "text": "I first went with the first option as it was more clean to write and required less slice copying to implement I decided to use a buffered IO buff reader",
    "start": "1379559",
    "end": "1386360"
  },
  {
    "text": "uh I read a file in 64 megabyte chunks let's see uh to read till the new next",
    "start": "1386360",
    "end": "1391720"
  },
  {
    "text": "line character I use read byes method this did not improve performance as read bites method again iterates over the characters to find the delimiter but",
    "start": "1391720",
    "end": "1398279"
  },
  {
    "text": "there's something more both scanner scans method and reader read method internally calls OS read but as they",
    "start": "1398279",
    "end": "1404320"
  },
  {
    "text": "provide more functionality Beyond simply reading the file they do extra processing on top of it look at the implementation for each okay so they do",
    "start": "1404320",
    "end": "1411360"
  },
  {
    "text": "stuff they do stuff for our use case we really don't need these convenient helper interfaces I can directly just call Os",
    "start": "1411360",
    "end": "1418919"
  },
  {
    "text": "read this all makes sense this is great this is a great step- by- step like how to reduce stuff and a lot of this stuff",
    "start": "1419480",
    "end": "1426320"
  },
  {
    "text": "is I think everybody in this Channel right now like anyone in this channel find like a lot of this stuff too",
    "start": "1426320",
    "end": "1431760"
  },
  {
    "text": "confusing or does this all just make sense because this feels like a really",
    "start": "1431760",
    "end": "1436880"
  },
  {
    "text": "great this feels like a really great simple optimization problem where none of it is",
    "start": "1436880",
    "end": "1443480"
  },
  {
    "text": "like wild optimizations and this is also really",
    "start": "1443480",
    "end": "1448679"
  },
  {
    "text": "great like you can just watch the person's thought process which I think is just fantastic confusing for me because I'm",
    "start": "1448679",
    "end": "1454360"
  },
  {
    "text": "kind of stupid I know but like which part is confusing like you could imagine that using something that reads over",
    "start": "1454360",
    "end": "1460039"
  },
  {
    "text": "your data multiple times is not as fast as something that can just read the data out and give you each one of those",
    "start": "1460039",
    "end": "1466799"
  },
  {
    "text": "chunks like you're reading once versus reading",
    "start": "1466799",
    "end": "1472279"
  },
  {
    "text": "twice co-routines are confusing but just because I don't know go",
    "start": "1472279",
    "end": "1478240"
  },
  {
    "text": "okay fair I guess it sounds like a really good and thorough thought out uh commit uh I still have no idea what",
    "start": "1480520",
    "end": "1486799"
  },
  {
    "text": "you're talking about though it sounds absolutely amazing so it's kind of like rings of power absolutely amazing really",
    "start": "1486799",
    "end": "1493279"
  },
  {
    "text": "well thought out everything is fantastic most average piece of stuff you've ever seen that's how I think about about",
    "start": "1493279",
    "end": "1498520"
  },
  {
    "text": "it it really that wasn't a very good analogy but I just wanted to make fun of rings of power it was just like that's",
    "start": "1498520",
    "end": "1503960"
  },
  {
    "text": "really all I really wanted to do I'm just I that's actually just what I wanted to do",
    "start": "1503960",
    "end": "1509559"
  },
  {
    "text": "anyways hey Nightshade dude thank you 51 months of caring dude hype trade incoming can you guys hold on I'm in the",
    "start": "1509559",
    "end": "1514679"
  },
  {
    "text": "process of reading something all right hold on let's look at this let's look at the last one hold on people uh since we",
    "start": "1514679",
    "end": "1521480"
  },
  {
    "text": "are now sending chunks over the chunk channel the chunk consumer uh go routines are the first spitting let's",
    "start": "1521480",
    "end": "1526799"
  },
  {
    "text": "see splitting the chunks into lines processing each line and sending it over to the line channel the line consumer Channel finally constructs the",
    "start": "1526799",
    "end": "1532520"
  },
  {
    "text": "summarized map these chunk consumer go routines uh can work in parallel as",
    "start": "1532520",
    "end": "1537679"
  },
  {
    "text": "they're not adding values to the map directly to take advantage of all the CPU cores I spun up a number of vcpus",
    "start": "1537679",
    "end": "1543120"
  },
  {
    "text": "minus one of Chunk consumer go routines each concurrently taking chunks from the channel processing it and adding lines",
    "start": "1543120",
    "end": "1549760"
  },
  {
    "text": "to the line Channel okay interesting so you'd have is he saying",
    "start": "1549760",
    "end": "1555159"
  },
  {
    "text": "you have a read channel that just like sends a bunch of of data through then you have like a chunk Channel yeah that makes sense I think that makes sense",
    "start": "1555159",
    "end": "1561600"
  },
  {
    "text": "right for so for each each each step that would make sense if you could just read you could get like 64 megabytes",
    "start": "1561600",
    "end": "1567840"
  },
  {
    "text": "send that 64 megabytes over and then you start reading again which takes a nonzero amount of times and while that",
    "start": "1567840",
    "end": "1573320"
  },
  {
    "text": "nonzero amount of time is going you are processing and creating new lines right there which I think is fantastic gluns",
    "start": "1573320",
    "end": "1579919"
  },
  {
    "text": "okay guys I'm still in the middle of doing this thank you for the hype tra hold on I'll say thank you in a moment I mean that that that",
    "start": "1579919",
    "end": "1586600"
  },
  {
    "text": "this that makes sense right the chunk Channel consumed by the chunk consumer go retains 250 items the line slice Channel",
    "start": "1586600",
    "end": "1593320"
  },
  {
    "text": "over the line Channel constructs the final map okay the total number of items send and receed from all channels is around that okay uh to reduce this each",
    "start": "1593320",
    "end": "1600919"
  },
  {
    "text": "chunk consumer go routine can process a chunk into a Min summarized map this map can be sent over to the map channel the",
    "start": "1600919",
    "end": "1606159"
  },
  {
    "text": "final map can be created by combining the Min summarized Maps H uh 250 uh let's see",
    "start": "1606159",
    "end": "1614440"
  },
  {
    "text": "250 uh file chunks sent over the chunk Channel plus 2 50 Min summarized map Senter to the map Channel I'd like dude",
    "start": "1614440",
    "end": "1620240"
  },
  {
    "text": "I want to explore this so much uh Implement they finally able to get it to 28 seconds okay improving uh string to",
    "start": "1620240",
    "end": "1626559"
  },
  {
    "text": "N64 parsing looking at the flame graph we still see a considerable amount of time and going into this does isn't this just like emotional",
    "start": "1626559",
    "end": "1633679"
  },
  {
    "text": "by the way that now you're getting to this level of improvement because if you look at this there is quite a bit right",
    "start": "1633679",
    "end": "1639320"
  },
  {
    "text": "here right so 8 1% that's a lot initially I used a stir conver parse int",
    "start": "1639320",
    "end": "1645399"
  },
  {
    "text": "to convert the string to un 64 uh looking at the implementation of stir conver parse int it does a lot of checks",
    "start": "1645399",
    "end": "1650880"
  },
  {
    "text": "that we don't necessarily need ourselves like one thing about this data is you know it's all correct so technically you",
    "start": "1650880",
    "end": "1656159"
  },
  {
    "text": "could read until the point and if it's always Round Up do we even need the rest wouldn't you just read till semicolon",
    "start": "1656159",
    "end": "1663080"
  },
  {
    "text": "then read until period like couldn't you honestly just do that there's uh there is our Arc oh is",
    "start": "1663080",
    "end": "1670120"
  },
  {
    "text": "there an arc mutex is there an arc mutex hashmap at the end reading sequentially will always be better than spawning uh n",
    "start": "1670120",
    "end": "1676519"
  },
  {
    "text": "threads yeah I",
    "start": "1676519",
    "end": "1681120"
  },
  {
    "text": "mean I want to play around I want to play around what about uh X",
    "start": "1681799",
    "end": "1687519"
  },
  {
    "text": "point0 then you need to make sure that that like yeah yeah negative 1.5 needs to be one",
    "start": "1687519",
    "end": "1693880"
  },
  {
    "text": "exactly it's kind of interesting there seems to be something that's very interesting there which is if it's negative you don't add one if it's",
    "start": "1693880",
    "end": "1701360"
  },
  {
    "text": "positive you check to see if the last item of the point is a zero or not if",
    "start": "1701360",
    "end": "1706519"
  },
  {
    "text": "it's a zero let's see uh 0.9 will turn into zero not",
    "start": "1706519",
    "end": "1711720"
  },
  {
    "text": "one that's not rounding up is it that doesn't seem right that doesn't seem that doesn't",
    "start": "1711720",
    "end": "1717559"
  },
  {
    "text": "seem right because the whole thing was rounding up it had a very specific thing you always round towards positive Infinity",
    "start": "1717559",
    "end": "1724519"
  },
  {
    "text": "right all right let's see further optimizations I only got this far with the challenge deadline January 31st",
    "start": "1724519",
    "end": "1729880"
  },
  {
    "text": "there's a lot more to explore some ideas with the latest CPU uh Trace flame graph the most of the time now seems to be going to map access and assign potential",
    "start": "1729880",
    "end": "1736080"
  },
  {
    "text": "ways to optimize this using numeric keys in a map so one thing you know is that you have alphabetically sorted uh you",
    "start": "1736080",
    "end": "1742120"
  },
  {
    "text": "need alphabetically sorted items and you have 10,000 I wonder if there's something",
    "start": "1742120",
    "end": "1748279"
  },
  {
    "text": "there that could make sense with being able to put them into I'm very curious about that like",
    "start": "1748279",
    "end": "1755320"
  },
  {
    "text": "how can you make it so you don't have to look stuff up in a map I don't know I don't know yet I",
    "start": "1755320",
    "end": "1761080"
  },
  {
    "text": "don't I have no idea a tree would be sick something like that but a tree I assume would be slower than a map",
    "start": "1761080",
    "end": "1768399"
  },
  {
    "text": "you look like someone that was in the military I was not but thank you though um anyways replace in built-in",
    "start": "1768399",
    "end": "1773760"
  },
  {
    "text": "maps with fast string Maps or swiss Maps I don't even know what a Swiss map is uh is it a very like neutral map replace",
    "start": "1773760",
    "end": "1780480"
  },
  {
    "text": "map uses which the tree data structure I wonder I wonder how that would work because how do you store the tree data",
    "start": "1780480",
    "end": "1787760"
  },
  {
    "text": "like what do you store it in don't would you store a",
    "start": "1787760",
    "end": "1792518"
  },
  {
    "text": "isn't I guess yeah if if your if your node was an array of 26",
    "start": "1792919",
    "end": "1799320"
  },
  {
    "text": "slots right then yeah because then you don't then you don't need to do that because",
    "start": "1800559",
    "end": "1806039"
  },
  {
    "text": "then you literally just take a uh you literally just take your your",
    "start": "1806039",
    "end": "1811840"
  },
  {
    "text": "character and you look it up in that position offset into it does that make sense a tree this is",
    "start": "1811840",
    "end": "1818440"
  },
  {
    "text": "called a tree a tree is just like Auto autocomplete a tree would be really good for inserting but might be awful for",
    "start": "1818440",
    "end": "1823840"
  },
  {
    "text": "printing out the final answers yeah because you have to Traverse the tree and you'd have to construct those things",
    "start": "1823840",
    "end": "1829159"
  },
  {
    "text": "unless if you have the leaf node contain the constructed values I hadn't used unsafe uh so far",
    "start": "1829159",
    "end": "1835440"
  },
  {
    "text": "because I wanted to see how far I can get without it turns out a lot map uh can be used let's see can uh be used to",
    "start": "1835440",
    "end": "1841279"
  },
  {
    "text": "get better results than IO speed uh methods from Go's unsafe package can also be used for string and bite",
    "start": "1841279",
    "end": "1846760"
  },
  {
    "text": "manipulation okay interesting I had a lot of fun working on this massive shout outs to Gunner morling for putting this",
    "start": "1846760",
    "end": "1853080"
  },
  {
    "text": "together uh challenge together by the way this was awesome this was fantastic uh that challenge I cannot believe how",
    "start": "1853080",
    "end": "1858559"
  },
  {
    "text": "great this challenge was I started with a rather impressive execution time of greater than 6 minutes and brought it down to 14 seconds I actually I I want",
    "start": "1858559",
    "end": "1865240"
  },
  {
    "text": "to do this because I don't I have never used any of like I haven't really used a lot of go like this is this seems like a",
    "start": "1865240",
    "end": "1870279"
  },
  {
    "text": "great way to learn the language you want to learn because I want to learn more go go is kind of like the language I want",
    "start": "1870279",
    "end": "1875840"
  },
  {
    "text": "to learn so this is a uh this is on my this is on my [ __ ] list now it is well hey go follow it on",
    "start": "1875840",
    "end": "1882799"
  },
  {
    "text": "Twitter go follow boom followed amazing absolutely out of control this was",
    "start": "1882799",
    "end": "1889120"
  },
  {
    "text": "fantastic we'll link I I'll try to make sure I link all of that in the uh on the stuff all right hey the name you know",
    "start": "1889120",
    "end": "1895880"
  },
  {
    "text": "what the name is you know what the name is hey prate it is prate the prate the prate",
    "start": "1895880",
    "end": "1903279"
  },
  {
    "text": "agen the billen the one billion aen I don't know what what is the name what is the name what is the name what is the",
    "start": "1903279",
    "end": "1909480"
  },
  {
    "text": "name the name is the prime gen thank you very much spell with an a at the end thank you",
    "start": "1909480",
    "end": "1915120"
  }
]