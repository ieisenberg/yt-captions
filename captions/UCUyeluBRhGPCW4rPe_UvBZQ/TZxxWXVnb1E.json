[
  {
    "text": "the state of async rust holy cow in the",
    "start": "0",
    "end": "3120"
  },
  {
    "text": "middle of this picture let me I'm gonna",
    "start": "3120",
    "end": "4380"
  },
  {
    "text": "move myself over a little bit the state",
    "start": "4380",
    "end": "5940"
  },
  {
    "text": "of async runtime recently I found myself",
    "start": "5940",
    "end": "8639"
  },
  {
    "text": "returning to a compelling series of blog",
    "start": "8639",
    "end": "11040"
  },
  {
    "text": "posts titled zero cost Futures in Rust",
    "start": "11040",
    "end": "13559"
  },
  {
    "text": "by Aaron Turon uh about what would",
    "start": "13559",
    "end": "16020"
  },
  {
    "text": "become the rust or the foundation of",
    "start": "16020",
    "end": "17760"
  },
  {
    "text": "Russ async ecosystem in the Tokyo",
    "start": "17760",
    "end": "19980"
  },
  {
    "text": "runtime this series stands as a",
    "start": "19980",
    "end": "21900"
  },
  {
    "text": "Cornerstone in writing about rust people",
    "start": "21900",
    "end": "23880"
  },
  {
    "text": "like Aaron are the reason why I wanted",
    "start": "23880",
    "end": "25560"
  },
  {
    "text": "to be a part of the Russ community in",
    "start": "25560",
    "end": "26820"
  },
  {
    "text": "the first place uh Aaron's the guy that",
    "start": "26820",
    "end": "29220"
  },
  {
    "text": "did the whole Tokyo stuff and all that",
    "start": "29220",
    "end": "30599"
  },
  {
    "text": "right it's pretty base pretty base guy",
    "start": "30599",
    "end": "32160"
  },
  {
    "text": "right there well 2016 evokes nostalgic",
    "start": "32160",
    "end": "34800"
  },
  {
    "text": "memories of excitement and fervor",
    "start": "34800",
    "end": "36600"
  },
  {
    "text": "surrounding async rust my sentiment",
    "start": "36600",
    "end": "38280"
  },
  {
    "text": "regarding the current state of the",
    "start": "38280",
    "end": "39600"
  },
  {
    "text": "ecosystem are somewhat ambivalent",
    "start": "39600",
    "end": "43020"
  },
  {
    "text": "through this series I hope to address",
    "start": "43020",
    "end": "44760"
  },
  {
    "text": "two different audiences newcomers to",
    "start": "44760",
    "end": "46500"
  },
  {
    "text": "async rust seeking to get an overview of",
    "start": "46500",
    "end": "48420"
  },
  {
    "text": "the current state of the ecosystem",
    "start": "48420",
    "end": "49620"
  },
  {
    "text": "library maintainers and contributing",
    "start": "49620",
    "end": "52140"
  },
  {
    "text": "contributors to the async ecosystem and",
    "start": "52140",
    "end": "54960"
  },
  {
    "text": "hope that my perspective can be a basis",
    "start": "54960",
    "end": "57120"
  },
  {
    "text": "for discussion about the future of async",
    "start": "57120",
    "end": "59699"
  },
  {
    "text": "rust okay the first article or in this",
    "start": "59699",
    "end": "62820"
  },
  {
    "text": "first article we'll focus on the state",
    "start": "62820",
    "end": "64320"
  },
  {
    "text": "of async rust runtimes their design",
    "start": "64320",
    "end": "66180"
  },
  {
    "text": "choices and their implementations on",
    "start": "66180",
    "end": "68280"
  },
  {
    "text": "broader rust async ecosystems one true",
    "start": "68280",
    "end": "71700"
  },
  {
    "text": "runtime An Inconvenient Truth About",
    "start": "71700",
    "end": "73920"
  },
  {
    "text": "async rust is that all that libraries",
    "start": "73920",
    "end": "76380"
  },
  {
    "text": "still need to be written against",
    "start": "76380",
    "end": "77580"
  },
  {
    "text": "individual runtimes writing your async",
    "start": "77580",
    "end": "80280"
  },
  {
    "text": "code in a runtime agnostic fashion",
    "start": "80280",
    "end": "82439"
  },
  {
    "text": "requires conditional compilation",
    "start": "82439",
    "end": "84140"
  },
  {
    "text": "compatibility compatibility layers and",
    "start": "84140",
    "end": "87119"
  },
  {
    "text": "handling edge cases uh yikes",
    "start": "87119",
    "end": "90720"
  },
  {
    "text": "it's one of the problems about not",
    "start": "90720",
    "end": "92640"
  },
  {
    "text": "having see this is one of the problems",
    "start": "92640",
    "end": "94320"
  },
  {
    "text": "about just like having the community",
    "start": "94320",
    "end": "96000"
  },
  {
    "text": "Implement things is that yes it's good",
    "start": "96000",
    "end": "99240"
  },
  {
    "text": "because you get you get it's faster you",
    "start": "99240",
    "end": "101220"
  },
  {
    "text": "get to see all the different ideas come",
    "start": "101220",
    "end": "102720"
  },
  {
    "text": "out you get to kind of see and feel out",
    "start": "102720",
    "end": "104520"
  },
  {
    "text": "every single different way things can be",
    "start": "104520",
    "end": "105900"
  },
  {
    "text": "done and you don't have to make bad",
    "start": "105900",
    "end": "107579"
  },
  {
    "text": "decisions in early rust or create things",
    "start": "107579",
    "end": "109380"
  },
  {
    "text": "that are not good stop with the golden",
    "start": "109380",
    "end": "111119"
  },
  {
    "text": "kappas stop flexing that I don't have",
    "start": "111119",
    "end": "114060"
  },
  {
    "text": "one but the problem then becomes this",
    "start": "114060",
    "end": "116100"
  },
  {
    "text": "right here which is now we have a bunch",
    "start": "116100",
    "end": "118439"
  },
  {
    "text": "of different ones what do we do now kind",
    "start": "118439",
    "end": "121200"
  },
  {
    "text": "of sucks uh executor coupling is a big",
    "start": "121200",
    "end": "124020"
  },
  {
    "text": "problem for async rust as it breaks the",
    "start": "124020",
    "end": "126060"
  },
  {
    "text": "entire ecosystem into silos",
    "start": "126060",
    "end": "127700"
  },
  {
    "text": "documentation examples for one run time",
    "start": "127700",
    "end": "129840"
  },
  {
    "text": "don't work with other runtimes moreover",
    "start": "129840",
    "end": "131819"
  },
  {
    "text": "moreover much of the existing",
    "start": "131819",
    "end": "133739"
  },
  {
    "text": "documentation on async Rust feels",
    "start": "133739",
    "end": "135959"
  },
  {
    "text": "outdated or incomplete for example the",
    "start": "135959",
    "end": "138239"
  },
  {
    "text": "async book remains in draft with",
    "start": "138239",
    "end": "140340"
  },
  {
    "text": "Concepts like Futures unordered yet to",
    "start": "140340",
    "end": "142680"
  },
  {
    "text": "be covered there is an open pull request",
    "start": "142680",
    "end": "144900"
  },
  {
    "text": "though oh lovely uh that leaves us with",
    "start": "144900",
    "end": "147840"
  },
  {
    "text": "this with a situation that is",
    "start": "147840",
    "end": "150720"
  },
  {
    "text": "satisfactory for everyone involved sorry",
    "start": "150720",
    "end": "152640"
  },
  {
    "text": "this delicious smoothie is making my",
    "start": "152640",
    "end": "155220"
  },
  {
    "text": "mouth water",
    "start": "155220",
    "end": "157700"
  },
  {
    "text": "I sucked that one dry we sucked them",
    "start": "160800",
    "end": "163140"
  },
  {
    "text": "drive right there fellas that leaves us",
    "start": "163140",
    "end": "165360"
  },
  {
    "text": "with the situation that is",
    "start": "165360",
    "end": "166379"
  },
  {
    "text": "unsatisfactory for everyone involved for",
    "start": "166379",
    "end": "168840"
  },
  {
    "text": "new users it is a big ass to navigate",
    "start": "168840",
    "end": "170700"
  },
  {
    "text": "this space and to make future-proof",
    "start": "170700",
    "end": "172319"
  },
  {
    "text": "decisions for experienced users and",
    "start": "172319",
    "end": "173879"
  },
  {
    "text": "Library maintainers supporting multiple",
    "start": "173879",
    "end": "175500"
  },
  {
    "text": "runtimes is an additional burden the",
    "start": "175500",
    "end": "177599"
  },
  {
    "text": "it's no surprise that popular crates",
    "start": "177599",
    "end": "179580"
  },
  {
    "text": "like request simply insist on Tokyo as a",
    "start": "179580",
    "end": "182220"
  },
  {
    "text": "runtime",
    "start": "182220",
    "end": "183360"
  },
  {
    "text": "uh this close coupling is an a known",
    "start": "183360",
    "end": "185340"
  },
  {
    "text": "issue which is acknowledged by the async",
    "start": "185340",
    "end": "187440"
  },
  {
    "text": "working group",
    "start": "187440",
    "end": "188459"
  },
  {
    "text": "this closed coupling recognized by the",
    "start": "188459",
    "end": "190140"
  },
  {
    "text": "async working group has me worried about",
    "start": "190140",
    "end": "191640"
  },
  {
    "text": "its potential long-term impact on the",
    "start": "191640",
    "end": "193860"
  },
  {
    "text": "ecosystem the case of async standard",
    "start": "193860",
    "end": "196920"
  },
  {
    "text": "async standard was an attempt to create",
    "start": "196920",
    "end": "198540"
  },
  {
    "text": "an alternative runtime that is closer to",
    "start": "198540",
    "end": "200519"
  },
  {
    "text": "the rust standard Library its promise",
    "start": "200519",
    "end": "202560"
  },
  {
    "text": "was that you could almost use it as a",
    "start": "202560",
    "end": "204480"
  },
  {
    "text": "drop in replacement for the standard",
    "start": "204480",
    "end": "205739"
  },
  {
    "text": "Library I have spent so many I I",
    "start": "205739",
    "end": "208459"
  },
  {
    "text": "genuinely spent so long I don't know how",
    "start": "208459",
    "end": "211620"
  },
  {
    "text": "long it was but it was long in my head",
    "start": "211620",
    "end": "213180"
  },
  {
    "text": "trying to figure out why one of my TCP",
    "start": "213180",
    "end": "215819"
  },
  {
    "text": "streams wasn't working whatever it's",
    "start": "215819",
    "end": "217680"
  },
  {
    "text": "because I was using standard instead of",
    "start": "217680",
    "end": "219420"
  },
  {
    "text": "Tokyo and it was emotionally bruising",
    "start": "219420",
    "end": "221400"
  },
  {
    "text": "and it's like it should be so simple but",
    "start": "221400",
    "end": "223860"
  },
  {
    "text": "when you're first learning rust and all",
    "start": "223860",
    "end": "225540"
  },
  {
    "text": "these differences and everything named",
    "start": "225540",
    "end": "226980"
  },
  {
    "text": "the same and how you know sometimes you",
    "start": "226980",
    "end": "228480"
  },
  {
    "text": "get those Auto Magic Imports and all",
    "start": "228480",
    "end": "230099"
  },
  {
    "text": "that when you're very first learning you",
    "start": "230099",
    "end": "231959"
  },
  {
    "text": "can spend an enormous amount of time",
    "start": "231959",
    "end": "234000"
  },
  {
    "text": "trying to figure out what's going wrong",
    "start": "234000",
    "end": "235560"
  },
  {
    "text": "okay this was a long time ago but still",
    "start": "235560",
    "end": "238319"
  },
  {
    "text": "I still remember it that was like my",
    "start": "238319",
    "end": "240000"
  },
  {
    "text": "first big this really sucks moment uh",
    "start": "240000",
    "end": "242640"
  },
  {
    "text": "take for instance the straightforward",
    "start": "242640",
    "end": "244140"
  },
  {
    "text": "synchronous file reading code Bam Bam",
    "start": "244140",
    "end": "246480"
  },
  {
    "text": "Bam Bam Bam okay beautiful",
    "start": "246480",
    "end": "248400"
  },
  {
    "text": "an async standard uh it is let's see it",
    "start": "248400",
    "end": "251220"
  },
  {
    "text": "is an async operation instead okay Bam",
    "start": "251220",
    "end": "254099"
  },
  {
    "text": "Bam Bam Bam the only difference is the",
    "start": "254099",
    "end": "256139"
  },
  {
    "text": "away keyword function coloring people we",
    "start": "256139",
    "end": "258299"
  },
  {
    "text": "talk about that a lot here well the name",
    "start": "258299",
    "end": "260040"
  },
  {
    "text": "might suggest that async standard is not",
    "start": "260040",
    "end": "262199"
  },
  {
    "text": "a drop in replacement for the standard",
    "start": "262199",
    "end": "263699"
  },
  {
    "text": "Library as there are many subtle",
    "start": "263699",
    "end": "265740"
  },
  {
    "text": "differences between the two it is a it",
    "start": "265740",
    "end": "267960"
  },
  {
    "text": "is hard to create a runtime that is",
    "start": "267960",
    "end": "269520"
  },
  {
    "text": "fully compatible with the standard",
    "start": "269520",
    "end": "270840"
  },
  {
    "text": "Library here are some examples of the",
    "start": "270840",
    "end": "272820"
  },
  {
    "text": "issue still open new threads Bond okay",
    "start": "272820",
    "end": "274800"
  },
  {
    "text": "yep there you go",
    "start": "274800",
    "end": "276300"
  },
  {
    "text": "it is an enormous effort to replicate",
    "start": "276300",
    "end": "278160"
  },
  {
    "text": "the standard library and it's not clear",
    "start": "278160",
    "end": "279479"
  },
  {
    "text": "to me if it is worth it even if it were",
    "start": "279479",
    "end": "281940"
  },
  {
    "text": "a drop in replacement I'd still Ponder",
    "start": "281940",
    "end": "284100"
  },
  {
    "text": "its actual Merit rust is a language that",
    "start": "284100",
    "end": "286500"
  },
  {
    "text": "values explicitness this is especially",
    "start": "286500",
    "end": "288960"
  },
  {
    "text": "true for reasoning about runtime",
    "start": "288960",
    "end": "290280"
  },
  {
    "text": "Behavior such as allocations and",
    "start": "290280",
    "end": "292020"
  },
  {
    "text": "blocking operations the standard the",
    "start": "292020",
    "end": "294180"
  },
  {
    "text": "async standard terms are team's proposal",
    "start": "294180",
    "end": "296759"
  },
  {
    "text": "to stop worrying about blocking was met",
    "start": "296759",
    "end": "299400"
  },
  {
    "text": "with harsh Community response and this",
    "start": "299400",
    "end": "303360"
  },
  {
    "text": "doesn't feel very harsh I'm not going to",
    "start": "303360",
    "end": "304800"
  },
  {
    "text": "lie to you is this why rust is filled",
    "start": "304800",
    "end": "306960"
  },
  {
    "text": "with a bunch of babies harsh feedback I",
    "start": "306960",
    "end": "309540"
  },
  {
    "text": "don't actually like if you really think",
    "start": "309540",
    "end": "311639"
  },
  {
    "text": "about it when you reference the future",
    "start": "311639",
    "end": "313199"
  },
  {
    "text": "standard of the project I really like",
    "start": "313199",
    "end": "315360"
  },
  {
    "text": "when you check out these feel I I really",
    "start": "315360",
    "end": "317220"
  },
  {
    "text": "do feel like we shouldn't be approaching",
    "start": "317220",
    "end": "319259"
  },
  {
    "text": "this topic I really do think we should",
    "start": "319259",
    "end": "320759"
  },
  {
    "text": "be concerned about it in my opinion I",
    "start": "320759",
    "end": "322320"
  },
  {
    "text": "feel like these things man that was",
    "start": "322320",
    "end": "324419"
  },
  {
    "text": "harsh this seems like somebody put some",
    "start": "324419",
    "end": "326940"
  },
  {
    "text": "thought into it and thought about why we",
    "start": "326940",
    "end": "328800"
  },
  {
    "text": "should be worried about these things",
    "start": "328800",
    "end": "331919"
  },
  {
    "text": "as of this writing there are 1754 public",
    "start": "331919",
    "end": "335220"
  },
  {
    "text": "crates that have dependencies on async",
    "start": "335220",
    "end": "337199"
  },
  {
    "text": "standard and there are companies that",
    "start": "337199",
    "end": "338880"
  },
  {
    "text": "rely on it in production",
    "start": "338880",
    "end": "340500"
  },
  {
    "text": "however looking at the commence commits",
    "start": "340500",
    "end": "342600"
  },
  {
    "text": "over time uh it essentially abandoned",
    "start": "342600",
    "end": "344940"
  },
  {
    "text": "and there is no active development",
    "start": "344940",
    "end": "346139"
  },
  {
    "text": "anymore ah this looks like grunt",
    "start": "346139",
    "end": "348840"
  },
  {
    "text": "this leaves those reliant on async",
    "start": "348840",
    "end": "351000"
  },
  {
    "text": "standard API bet uh be it for a",
    "start": "351000",
    "end": "353220"
  },
  {
    "text": "concurrency mechanism extension trades",
    "start": "353220",
    "end": "354900"
  },
  {
    "text": "or otherwise in an unfortunate situation",
    "start": "354900",
    "end": "357479"
  },
  {
    "text": "as there is a case for Library developed",
    "start": "357479",
    "end": "359280"
  },
  {
    "text": "on top of async Standards such as surf",
    "start": "359280",
    "end": "361560"
  },
  {
    "text": "the core of async standard is now",
    "start": "361560",
    "end": "363720"
  },
  {
    "text": "powered by small oh so small but it's",
    "start": "363720",
    "end": "366300"
  },
  {
    "text": "probably best to use it directly for new",
    "start": "366300",
    "end": "368100"
  },
  {
    "text": "projects again",
    "start": "368100",
    "end": "369780"
  },
  {
    "text": "you leave the community to solve it this",
    "start": "369780",
    "end": "371639"
  },
  {
    "text": "is what happens have you seen JavaScript",
    "start": "371639",
    "end": "373380"
  },
  {
    "text": "tools grunt gulp webpack snowpack parcel",
    "start": "373380",
    "end": "377639"
  },
  {
    "text": "Vite turbo pack those are like the big",
    "start": "377639",
    "end": "380220"
  },
  {
    "text": "ones that I know about I'm sure there's",
    "start": "380220",
    "end": "381900"
  },
  {
    "text": "other ones just saying you leave it to",
    "start": "381900",
    "end": "384600"
  },
  {
    "text": "the community you get sub fractured you",
    "start": "384600",
    "end": "386699"
  },
  {
    "text": "know you kind of you have to make this",
    "start": "386699",
    "end": "388199"
  },
  {
    "text": "Choice Tokyo stands as rust canonical",
    "start": "388199",
    "end": "390660"
  },
  {
    "text": "async runtime but to label Tokyo merely",
    "start": "390660",
    "end": "393419"
  },
  {
    "text": "as a runtime would be an understatement",
    "start": "393419",
    "end": "395100"
  },
  {
    "text": "it has extra modules for fsio net",
    "start": "395100",
    "end": "397500"
  },
  {
    "text": "process and Signal handling and more",
    "start": "397500",
    "end": "399539"
  },
  {
    "text": "that makes it more of a framework for",
    "start": "399539",
    "end": "401460"
  },
  {
    "text": "asynchronous program than just a runtime",
    "start": "401460",
    "end": "404039"
  },
  {
    "text": "parsley this is because Tokyo had",
    "start": "404039",
    "end": "406020"
  },
  {
    "text": "pioneering role in the async rust it",
    "start": "406020",
    "end": "408419"
  },
  {
    "text": "explored the design space as it went",
    "start": "408419",
    "end": "410100"
  },
  {
    "text": "along and while you could exclusively",
    "start": "410100",
    "end": "412139"
  },
  {
    "text": "use the runtime and ignore the rest it",
    "start": "412139",
    "end": "414539"
  },
  {
    "text": "is easier and more common to buy into",
    "start": "414539",
    "end": "416400"
  },
  {
    "text": "the entire ecosystem yet my main concern",
    "start": "416400",
    "end": "418979"
  },
  {
    "text": "with Tokyo is that it makes a lot of",
    "start": "418979",
    "end": "420660"
  },
  {
    "text": "assumptions about how async code should",
    "start": "420660",
    "end": "422520"
  },
  {
    "text": "be written and where it runs for example",
    "start": "422520",
    "end": "424319"
  },
  {
    "text": "at the beginning of the Tokyo",
    "start": "424319",
    "end": "425520"
  },
  {
    "text": "documentation they State the easiest way",
    "start": "425520",
    "end": "427740"
  },
  {
    "text": "to get started is to enable all features",
    "start": "427740",
    "end": "429840"
  },
  {
    "text": "by do this by enabling the full feature",
    "start": "429840",
    "end": "432660"
  },
  {
    "text": "flake this seems like a great getting",
    "start": "432660",
    "end": "434280"
  },
  {
    "text": "started guide to me",
    "start": "434280",
    "end": "435780"
  },
  {
    "text": "hey you don't know a lot about it just",
    "start": "435780",
    "end": "438419"
  },
  {
    "text": "do that",
    "start": "438419",
    "end": "439380"
  },
  {
    "text": "just do that",
    "start": "439380",
    "end": "440940"
  },
  {
    "text": "what is that cargo ad Tokyo features",
    "start": "440940",
    "end": "444419"
  },
  {
    "text": "full right it's just a really simple",
    "start": "444419",
    "end": "446940"
  },
  {
    "text": "getting started situation like I get",
    "start": "446940",
    "end": "449580"
  },
  {
    "text": "that I'm on that team you know you don't",
    "start": "449580",
    "end": "451380"
  },
  {
    "text": "want to explain like a bet this is one",
    "start": "451380",
    "end": "453300"
  },
  {
    "text": "of the problems about rust in general is",
    "start": "453300",
    "end": "454979"
  },
  {
    "text": "that they want you to know everything",
    "start": "454979",
    "end": "456479"
  },
  {
    "text": "before you program anything",
    "start": "456479",
    "end": "458699"
  },
  {
    "text": "and so it's just like do you want to be",
    "start": "458699",
    "end": "460620"
  },
  {
    "text": "the person",
    "start": "460620",
    "end": "462360"
  },
  {
    "text": "that has to know everything just to use",
    "start": "462360",
    "end": "464340"
  },
  {
    "text": "async or do you want them to start off",
    "start": "464340",
    "end": "466020"
  },
  {
    "text": "with maybe overkill for sure for sure",
    "start": "466020",
    "end": "469380"
  },
  {
    "text": "you don't need all these features start",
    "start": "469380",
    "end": "471360"
  },
  {
    "text": "Overkill pare it down",
    "start": "471360",
    "end": "473580"
  },
  {
    "text": "to me that just seems natural that's",
    "start": "473580",
    "end": "475020"
  },
  {
    "text": "like that's how I like to learn is that",
    "start": "475020",
    "end": "477120"
  },
  {
    "text": "I like to learn by simply you know being",
    "start": "477120",
    "end": "480240"
  },
  {
    "text": "ignorant of everything and then slowly",
    "start": "480240",
    "end": "482220"
  },
  {
    "text": "peeling back the layers",
    "start": "482220",
    "end": "485220"
  },
  {
    "text": "you know what I mean damn I'm late",
    "start": "485220",
    "end": "487740"
  },
  {
    "text": "you're not late you're not late",
    "start": "487740",
    "end": "490800"
  },
  {
    "text": "by doing so one would set up a",
    "start": "490800",
    "end": "492780"
  },
  {
    "text": "multi-threaded runtime which mandates",
    "start": "492780",
    "end": "494400"
  },
  {
    "text": "the types are send and uh static and",
    "start": "494400",
    "end": "497160"
  },
  {
    "text": "making it necessary to use",
    "start": "497160",
    "end": "499020"
  },
  {
    "text": "synchronization Primitives such as Arc",
    "start": "499020",
    "end": "500759"
  },
  {
    "text": "and mutex but for all for all but the",
    "start": "500759",
    "end": "503699"
  },
  {
    "text": "most primitive app or trivial",
    "start": "503699",
    "end": "505199"
  },
  {
    "text": "applications the original sin of rust",
    "start": "505199",
    "end": "508340"
  },
  {
    "text": "async programming is to make it",
    "start": "508340",
    "end": "510479"
  },
  {
    "text": "multi-threaded by default if premature",
    "start": "510479",
    "end": "513839"
  },
  {
    "text": "optimizations is the root of all evil",
    "start": "513839",
    "end": "515640"
  },
  {
    "text": "this is the mother of all premature",
    "start": "515640",
    "end": "517979"
  },
  {
    "text": "optimizationed and it curses all your",
    "start": "517979",
    "end": "520440"
  },
  {
    "text": "code with an Unholy Send Plus static or",
    "start": "520440",
    "end": "523380"
  },
  {
    "text": "worse yet send Plus or send plus sync",
    "start": "523380",
    "end": "526440"
  },
  {
    "text": "plus static which just kills all the joy",
    "start": "526440",
    "end": "528660"
  },
  {
    "text": "of actually writing rust",
    "start": "528660",
    "end": "531600"
  },
  {
    "text": "it was not Pride",
    "start": "531600",
    "end": "534060"
  },
  {
    "text": "it was not greed it was Send Plus sync",
    "start": "534060",
    "end": "538800"
  },
  {
    "text": "plus static that truly was the original",
    "start": "538800",
    "end": "541260"
  },
  {
    "text": "sin I think it's funny and then God",
    "start": "541260",
    "end": "544019"
  },
  {
    "text": "cursed the Earth with archview Texas",
    "start": "544019",
    "end": "545880"
  },
  {
    "text": "everywhere arc mutism Arc mutasies okay",
    "start": "545880",
    "end": "551240"
  },
  {
    "text": "usurk you pretty much now Zerg Rush are",
    "start": "551240",
    "end": "554640"
  },
  {
    "text": "communities",
    "start": "554640",
    "end": "556080"
  },
  {
    "text": "uh anytime we reach for an arc uh Arc or",
    "start": "556080",
    "end": "559200"
  },
  {
    "text": "a mutex it's a good idea to stop for a",
    "start": "559200",
    "end": "561420"
  },
  {
    "text": "moment and think about the future",
    "start": "561420",
    "end": "562680"
  },
  {
    "text": "implications of that decision",
    "start": "562680",
    "end": "564899"
  },
  {
    "text": "you know every time I write an arc mutex",
    "start": "564899",
    "end": "567180"
  },
  {
    "text": "I sit there and think to myself ah",
    "start": "567180",
    "end": "570240"
  },
  {
    "text": "I'm watching performance go away",
    "start": "570240",
    "end": "573660"
  },
  {
    "text": "well I guess all of my multi-threaded",
    "start": "573660",
    "end": "575760"
  },
  {
    "text": "just is becoming shittier like that's",
    "start": "575760",
    "end": "577500"
  },
  {
    "text": "what I think about",
    "start": "577500",
    "end": "579720"
  },
  {
    "text": "the choice to use ARC or mutex might be",
    "start": "579720",
    "end": "582860"
  },
  {
    "text": "indicative indicative of a design that",
    "start": "582860",
    "end": "586080"
  },
  {
    "text": "hasn't fully embraced the ownership and",
    "start": "586080",
    "end": "587940"
  },
  {
    "text": "borrowing principle that rust emphasizes",
    "start": "587940",
    "end": "589860"
  },
  {
    "text": "it's worth considering if the shared",
    "start": "589860",
    "end": "591839"
  },
  {
    "text": "state is genuinely necessary or if",
    "start": "591839",
    "end": "593580"
  },
  {
    "text": "there's an alternative design that could",
    "start": "593580",
    "end": "594959"
  },
  {
    "text": "minimize or eliminate the need for",
    "start": "594959",
    "end": "596820"
  },
  {
    "text": "shared mutable State this also",
    "start": "596820",
    "end": "599040"
  },
  {
    "text": "highlights a really impressive thing",
    "start": "599040",
    "end": "601320"
  },
  {
    "text": "about rust which is you just have to",
    "start": "601320",
    "end": "603660"
  },
  {
    "text": "think a lot while programming you know",
    "start": "603660",
    "end": "605519"
  },
  {
    "text": "what I mean like you have to think a lot",
    "start": "605519",
    "end": "607500"
  },
  {
    "text": "have you ever thought about this in go",
    "start": "607500",
    "end": "609180"
  },
  {
    "text": "what no like every now and then you",
    "start": "609180",
    "end": "611459"
  },
  {
    "text": "Gotta Throw mutex around something",
    "start": "611459",
    "end": "613680"
  },
  {
    "text": "but you really just don't you just don't",
    "start": "613680",
    "end": "616320"
  },
  {
    "text": "think about these things which can be",
    "start": "616320",
    "end": "617940"
  },
  {
    "text": "really nice",
    "start": "617940",
    "end": "619440"
  },
  {
    "text": "uh and the same with JavaScript",
    "start": "619440",
    "end": "620940"
  },
  {
    "text": "obviously you don't think about in",
    "start": "620940",
    "end": "621899"
  },
  {
    "text": "JavaScript because well let's just face",
    "start": "621899",
    "end": "623160"
  },
  {
    "text": "it",
    "start": "623160",
    "end": "624360"
  },
  {
    "text": "it's JavaScript you don't think about it",
    "start": "624360",
    "end": "626519"
  },
  {
    "text": "at all you know what I mean I avoid",
    "start": "626519",
    "end": "628380"
  },
  {
    "text": "channels so they use like five locks",
    "start": "628380",
    "end": "630899"
  },
  {
    "text": "interesting are there more efficient",
    "start": "630899",
    "end": "632459"
  },
  {
    "text": "channels uh the problem of course is",
    "start": "632459",
    "end": "634740"
  },
  {
    "text": "Tokyo imposes this design on you it's",
    "start": "634740",
    "end": "636959"
  },
  {
    "text": "not your choice to make beyond the",
    "start": "636959",
    "end": "639000"
  },
  {
    "text": "complexities of architecting async code",
    "start": "639000",
    "end": "641160"
  },
  {
    "text": "Atop The synchronization synchronization",
    "start": "641160",
    "end": "643620"
  },
  {
    "text": "mechanisms that carry a performance cost",
    "start": "643620",
    "end": "646079"
  },
  {
    "text": "locking means runtime overhead and",
    "start": "646079",
    "end": "648180"
  },
  {
    "text": "additional memory usage in embedded",
    "start": "648180",
    "end": "650100"
  },
  {
    "text": "environments these mechanisms are often",
    "start": "650100",
    "end": "651839"
  },
  {
    "text": "not available at all multi-threaded by",
    "start": "651839",
    "end": "654180"
  },
  {
    "text": "default runtimes cause accidental",
    "start": "654180",
    "end": "656100"
  },
  {
    "text": "complexity completely or unrelated to",
    "start": "656100",
    "end": "658860"
  },
  {
    "text": "the task of writing async code",
    "start": "658860",
    "end": "661380"
  },
  {
    "text": "say in general that I I dislike async",
    "start": "661380",
    "end": "664079"
  },
  {
    "text": "rust every time I do anything beyond",
    "start": "664079",
    "end": "666240"
  },
  {
    "text": "trivial",
    "start": "666240",
    "end": "667920"
  },
  {
    "text": "I get a little pissed about it maybe",
    "start": "667920",
    "end": "669779"
  },
  {
    "text": "after reading this I need to rethink my",
    "start": "669779",
    "end": "671640"
  },
  {
    "text": "stance on async rust in general and",
    "start": "671640",
    "end": "673740"
  },
  {
    "text": "maybe I need to just try a little bit",
    "start": "673740",
    "end": "675180"
  },
  {
    "text": "harder to think about it in terms of",
    "start": "675180",
    "end": "676620"
  },
  {
    "text": "like my own threads or use something",
    "start": "676620",
    "end": "678240"
  },
  {
    "text": "like Cross Beam or small or whatever the",
    "start": "678240",
    "end": "680279"
  },
  {
    "text": "other one is maybe I need to kind of",
    "start": "680279",
    "end": "682200"
  },
  {
    "text": "bring it down a little bit",
    "start": "682200",
    "end": "684839"
  },
  {
    "text": "and think differently about the problem",
    "start": "684839",
    "end": "686880"
  },
  {
    "text": "yeah and then or just use gnu parallel I",
    "start": "686880",
    "end": "689279"
  },
  {
    "text": "think gnu parallel is incredible I use",
    "start": "689279",
    "end": "691019"
  },
  {
    "text": "it all the time whenever I can however",
    "start": "691019",
    "end": "693480"
  },
  {
    "text": "now I have little hope that the rust",
    "start": "693480",
    "end": "695040"
  },
  {
    "text": "Community will change the course on this",
    "start": "695040",
    "end": "696660"
  },
  {
    "text": "point Tokyo's Roots Run Deep with the",
    "start": "696660",
    "end": "698519"
  },
  {
    "text": "ecosystem and It Feels Like For Better",
    "start": "698519",
    "end": "700920"
  },
  {
    "text": "or Worse we're stuck with it in the",
    "start": "700920",
    "end": "702959"
  },
  {
    "text": "Realms of networking and web operations",
    "start": "702959",
    "end": "705060"
  },
  {
    "text": "it's like it's likely that one of your",
    "start": "705060",
    "end": "707220"
  },
  {
    "text": "dependencies integrates Tokyo",
    "start": "707220",
    "end": "709680"
  },
  {
    "text": "was actually very true runtime",
    "start": "709680",
    "end": "711959"
  },
  {
    "text": "effectively nudging you towards its",
    "start": "711959",
    "end": "713640"
  },
  {
    "text": "adoption tungsten Knight Tokyo",
    "start": "713640",
    "end": "715740"
  },
  {
    "text": "tungstenight at the time of writing",
    "start": "715740",
    "end": "718019"
  },
  {
    "text": "Tokyo is used by 20 000 crates",
    "start": "718019",
    "end": "722600"
  },
  {
    "text": "that's a lot",
    "start": "722600",
    "end": "725160"
  },
  {
    "text": "other run times going Beyond Tokyo",
    "start": "725160",
    "end": "727380"
  },
  {
    "text": "several other run times deserve more",
    "start": "727380",
    "end": "729060"
  },
  {
    "text": "attention small a small asynchronous run",
    "start": "729060",
    "end": "731339"
  },
  {
    "text": "time which is easy to understand the",
    "start": "731339",
    "end": "733019"
  },
  {
    "text": "entire executor is around a thousand",
    "start": "733019",
    "end": "734700"
  },
  {
    "text": "lines of code does it require like what",
    "start": "734700",
    "end": "737220"
  },
  {
    "text": "does it I mean do all these ones somehow",
    "start": "737220",
    "end": "740700"
  },
  {
    "text": "avoid the send sync static problem",
    "start": "740700",
    "end": "744839"
  },
  {
    "text": "these runtimes are important as they",
    "start": "744839",
    "end": "746519"
  },
  {
    "text": "explore alternative paths or open up new",
    "start": "746519",
    "end": "748800"
  },
  {
    "text": "use cases for async rust drawing on a",
    "start": "748800",
    "end": "751260"
  },
  {
    "text": "parallel with Russ error handling story",
    "start": "751260",
    "end": "753420"
  },
  {
    "text": "The Hope is that competing designs will",
    "start": "753420",
    "end": "755399"
  },
  {
    "text": "lead to a more robust Foundation overall",
    "start": "755399",
    "end": "757920"
  },
  {
    "text": "okay that'd be great especially",
    "start": "757920",
    "end": "759899"
  },
  {
    "text": "iterating on smaller runtimes that are",
    "start": "759899",
    "end": "761940"
  },
  {
    "text": "less invasive and single threaded by",
    "start": "761940",
    "end": "763740"
  },
  {
    "text": "default can help improve Russ async",
    "start": "763740",
    "end": "765600"
  },
  {
    "text": "story",
    "start": "765600",
    "end": "766320"
  },
  {
    "text": "I mean I like this idea maybe I just",
    "start": "766320",
    "end": "768060"
  },
  {
    "text": "need to explore them all I guess I've",
    "start": "768060",
    "end": "769860"
  },
  {
    "text": "always just been a Tokyo Andy",
    "start": "769860",
    "end": "772320"
  },
  {
    "text": "does that just make me a Tokyo Andy",
    "start": "772320",
    "end": "774779"
  },
  {
    "text": "is that what that does am I just a Tokyo",
    "start": "774779",
    "end": "776880"
  },
  {
    "text": "Andy",
    "start": "776880",
    "end": "777839"
  },
  {
    "text": "I just simply use Tokyo for all my async",
    "start": "777839",
    "end": "780540"
  },
  {
    "text": "needs and I really haven't",
    "start": "780540",
    "end": "782160"
  },
  {
    "text": "tried much else I think I download a",
    "start": "782160",
    "end": "784320"
  },
  {
    "text": "Cross Beam once",
    "start": "784320",
    "end": "785820"
  },
  {
    "text": "why is he calling them runtimes because",
    "start": "785820",
    "end": "787260"
  },
  {
    "text": "they're run times",
    "start": "787260",
    "end": "788639"
  },
  {
    "text": "you can tell what it is you can tell",
    "start": "788639",
    "end": "790380"
  },
  {
    "text": "it's a run time by the way it is all",
    "start": "790380",
    "end": "792420"
  },
  {
    "text": "right regardless of the runtime choice",
    "start": "792420",
    "end": "794279"
  },
  {
    "text": "we end up doing part of the Colonel's",
    "start": "794279",
    "end": "795779"
  },
  {
    "text": "job in user space if you allow me to",
    "start": "795779",
    "end": "797339"
  },
  {
    "text": "play on Greenspun 10th 10th rule any",
    "start": "797339",
    "end": "801480"
  },
  {
    "text": "sufficiently advanced async rust program",
    "start": "801480",
    "end": "803639"
  },
  {
    "text": "contains an ad hoc informally specified",
    "start": "803639",
    "end": "806160"
  },
  {
    "text": "potentially bug written implementation",
    "start": "806160",
    "end": "808079"
  },
  {
    "text": "of half of an operating system scheduler",
    "start": "808079",
    "end": "811940"
  },
  {
    "text": "modern operating systems come with",
    "start": "811940",
    "end": "814200"
  },
  {
    "text": "highly optimized schedulers that are",
    "start": "814200",
    "end": "815940"
  },
  {
    "text": "excellent at multitasking and support",
    "start": "815940",
    "end": "817560"
  },
  {
    "text": "async IO through i o urine and splice",
    "start": "817560",
    "end": "820680"
  },
  {
    "text": "they should make uh they should make",
    "start": "820680",
    "end": "823320"
  },
  {
    "text": "they should make better use of these",
    "start": "823320",
    "end": "825120"
  },
  {
    "text": "capabilities let's finally address the",
    "start": "825120",
    "end": "827040"
  },
  {
    "text": "elephant in the room threads with their",
    "start": "827040",
    "end": "829620"
  },
  {
    "text": "familiarity present present",
    "start": "829620",
    "end": "832200"
  },
  {
    "text": "a path to make a synchronous code faster",
    "start": "832200",
    "end": "834180"
  },
  {
    "text": "with minimal adjustment for example take",
    "start": "834180",
    "end": "836339"
  },
  {
    "text": "our sync code to read a file from above",
    "start": "836339",
    "end": "838019"
  },
  {
    "text": "and put it into a function",
    "start": "838019",
    "end": "839720"
  },
  {
    "text": "there we go oh look at that box dying",
    "start": "839720",
    "end": "842459"
  },
  {
    "text": "error",
    "start": "842459",
    "end": "844820"
  },
  {
    "text": "boxdine air this",
    "start": "847139",
    "end": "850260"
  },
  {
    "text": "is the first way I ever handled heirs",
    "start": "850260",
    "end": "852720"
  },
  {
    "text": "was boxdine air",
    "start": "852720",
    "end": "854579"
  },
  {
    "text": "it's also the way I hated my life",
    "start": "854579",
    "end": "858180"
  },
  {
    "text": "you know like that's my first major",
    "start": "858180",
    "end": "859920"
  },
  {
    "text": "program the drum machine on Twitch with",
    "start": "859920",
    "end": "862440"
  },
  {
    "text": "rust box down air",
    "start": "862440",
    "end": "864959"
  },
  {
    "text": "everywhere",
    "start": "864959",
    "end": "866339"
  },
  {
    "text": "we can call this a function inside of",
    "start": "866339",
    "end": "868500"
  },
  {
    "text": "the new Scopes thread okay there we go",
    "start": "868500",
    "end": "870120"
  },
  {
    "text": "we get a little thread we get a little",
    "start": "870120",
    "end": "871200"
  },
  {
    "text": "scope we do one of these read some",
    "start": "871200",
    "end": "872579"
  },
  {
    "text": "contents we got another content we got",
    "start": "872579",
    "end": "874260"
  },
  {
    "text": "another content look at all that content",
    "start": "874260",
    "end": "876240"
  },
  {
    "text": "no join threads get joined automatically",
    "start": "876240",
    "end": "878880"
  },
  {
    "text": "once the scope ends",
    "start": "878880",
    "end": "880680"
  },
  {
    "text": "oh nice okay cool",
    "start": "880680",
    "end": "883560"
  },
  {
    "text": "that's nice",
    "start": "883560",
    "end": "885480"
  },
  {
    "text": "that code uh looks but like but I assume",
    "start": "885480",
    "end": "888480"
  },
  {
    "text": "scope spawn are what does this mean are",
    "start": "888480",
    "end": "891480"
  },
  {
    "text": "these",
    "start": "891480",
    "end": "893040"
  },
  {
    "text": "what is this like are these their own",
    "start": "893040",
    "end": "895440"
  },
  {
    "text": "threads",
    "start": "895440",
    "end": "897060"
  },
  {
    "text": "are these operating system threads or",
    "start": "897060",
    "end": "899579"
  },
  {
    "text": "are these some some sort of green thread",
    "start": "899579",
    "end": "901560"
  },
  {
    "text": "I assume they're operating system level",
    "start": "901560",
    "end": "902940"
  },
  {
    "text": "threads you don't really necessarily",
    "start": "902940",
    "end": "904440"
  },
  {
    "text": "want to do operating system level",
    "start": "904440",
    "end": "905699"
  },
  {
    "text": "threads right",
    "start": "905699",
    "end": "906959"
  },
  {
    "text": "they're OS threads I assume they're OS",
    "start": "906959",
    "end": "908760"
  },
  {
    "text": "threads yeah they're OS threads whose",
    "start": "908760",
    "end": "910079"
  },
  {
    "text": "lifetime is limited by the scope they're",
    "start": "910079",
    "end": "911820"
  },
  {
    "text": "created in okay",
    "start": "911820",
    "end": "913320"
  },
  {
    "text": "yeah I mean that's really expensive",
    "start": "913320",
    "end": "914880"
  },
  {
    "text": "still right uh that code looks almost",
    "start": "914880",
    "end": "917040"
  },
  {
    "text": "identical to the single threaded version",
    "start": "917040",
    "end": "918720"
  },
  {
    "text": "notably there are no await calls okay",
    "start": "918720",
    "end": "921240"
  },
  {
    "text": "they get fair fair uh where read",
    "start": "921240",
    "end": "924899"
  },
  {
    "text": "contents par uh part of the public API",
    "start": "924899",
    "end": "927300"
  },
  {
    "text": "it could be used in both async and sync",
    "start": "927300",
    "end": "929519"
  },
  {
    "text": "callers eliminating the need for a",
    "start": "929519",
    "end": "931199"
  },
  {
    "text": "synchronous runtimes async rust might be",
    "start": "931199",
    "end": "933720"
  },
  {
    "text": "more memory efficient than the than",
    "start": "933720",
    "end": "936000"
  },
  {
    "text": "threads at the cost of complexity and",
    "start": "936000",
    "end": "937920"
  },
  {
    "text": "worse ergonomics",
    "start": "937920",
    "end": "939660"
  },
  {
    "text": "as an example if the function were async",
    "start": "939660",
    "end": "942660"
  },
  {
    "text": "and you called it outside of a runtime",
    "start": "942660",
    "end": "944940"
  },
  {
    "text": "it would compile but not run Futures do",
    "start": "944940",
    "end": "947339"
  },
  {
    "text": "nothing unless being pulled correct this",
    "start": "947339",
    "end": "949560"
  },
  {
    "text": "is a common foot gum for newcomers I",
    "start": "949560",
    "end": "951420"
  },
  {
    "text": "have",
    "start": "951420",
    "end": "953459"
  },
  {
    "text": "I have done this",
    "start": "953459",
    "end": "955139"
  },
  {
    "text": "you know what the worst part is is when",
    "start": "955139",
    "end": "956760"
  },
  {
    "text": "you try to ignore an error because you",
    "start": "956760",
    "end": "958920"
  },
  {
    "text": "look at this right here and it's an",
    "start": "958920",
    "end": "960540"
  },
  {
    "text": "error right so you look at the",
    "start": "960540",
    "end": "961860"
  },
  {
    "text": "function's content as an error so you go",
    "start": "961860",
    "end": "963839"
  },
  {
    "text": "underscore equals read this like you",
    "start": "963839",
    "end": "966180"
  },
  {
    "text": "just want to ignore the error you don't",
    "start": "966180",
    "end": "967320"
  },
  {
    "text": "care but what you don't realize you did",
    "start": "967320",
    "end": "969420"
  },
  {
    "text": "is you just underscore equal the future",
    "start": "969420",
    "end": "973079"
  },
  {
    "text": "and therefore it never runs and you have",
    "start": "973079",
    "end": "976560"
  },
  {
    "text": "no idea that that didn't happen",
    "start": "976560",
    "end": "979260"
  },
  {
    "text": "and it takes forever to figure out why",
    "start": "979260",
    "end": "981600"
  },
  {
    "text": "things it's it's a painfully slow",
    "start": "981600",
    "end": "984300"
  },
  {
    "text": "process to figure that out",
    "start": "984300",
    "end": "987660"
  },
  {
    "text": "right in recent benchmarks async Russ",
    "start": "987660",
    "end": "990000"
  },
  {
    "text": "was 2x faster than threads but the",
    "start": "990000",
    "end": "992040"
  },
  {
    "text": "absolute difference was only 10",
    "start": "992040",
    "end": "993240"
  },
  {
    "text": "milliseconds per request to put that",
    "start": "993240",
    "end": "995160"
  },
  {
    "text": "into perspective this uh this about as",
    "start": "995160",
    "end": "997800"
  },
  {
    "text": "long as PHP takes to start in other",
    "start": "997800",
    "end": "999839"
  },
  {
    "text": "words the difference is negligible for",
    "start": "999839",
    "end": "1001459"
  },
  {
    "text": "most applications",
    "start": "1001459",
    "end": "1002959"
  },
  {
    "text": "I'd really like the challenge that one",
    "start": "1002959",
    "end": "1005000"
  },
  {
    "text": "because I can't imagine that's true",
    "start": "1005000",
    "end": "1007639"
  },
  {
    "text": "right because I can't can you really",
    "start": "1007639",
    "end": "1009500"
  },
  {
    "text": "just spawn off OS threads that easily",
    "start": "1009500",
    "end": "1012500"
  },
  {
    "text": "and it really only adds just a little",
    "start": "1012500",
    "end": "1014240"
  },
  {
    "text": "bit of time that is that true",
    "start": "1014240",
    "end": "1017000"
  },
  {
    "text": "a good PHP roast very eight",
    "start": "1017000",
    "end": "1019880"
  },
  {
    "text": "yeah 10 milliseconds is a huge amount",
    "start": "1019880",
    "end": "1021860"
  },
  {
    "text": "because you gotta remember when you have",
    "start": "1021860",
    "end": "1023779"
  },
  {
    "text": "like a constellation of micro services",
    "start": "1023779",
    "end": "1027520"
  },
  {
    "text": "it grows yeah I mean we just read Java",
    "start": "1027919",
    "end": "1029780"
  },
  {
    "text": "Java said it was about two megabytes per",
    "start": "1029780",
    "end": "1031339"
  },
  {
    "text": "thread PHP has completely different uh",
    "start": "1031339",
    "end": "1033620"
  },
  {
    "text": "use case to rust this is correct",
    "start": "1033620",
    "end": "1037480"
  },
  {
    "text": "10 milliseconds is massive",
    "start": "1039679",
    "end": "1042558"
  },
  {
    "text": "it is massive",
    "start": "1042559",
    "end": "1045520"
  },
  {
    "text": "all right thread based Frameworks uh",
    "start": "1045559",
    "end": "1047360"
  },
  {
    "text": "like the now inactive iron showcase the",
    "start": "1047360",
    "end": "1049940"
  },
  {
    "text": "capability of effortlessly handling tens",
    "start": "1049940",
    "end": "1051799"
  },
  {
    "text": "of thousands of requests per second this",
    "start": "1051799",
    "end": "1054320"
  },
  {
    "text": "is a further complemented by the fact",
    "start": "1054320",
    "end": "1055820"
  },
  {
    "text": "modern Linux systems can manage tens of",
    "start": "1055820",
    "end": "1057799"
  },
  {
    "text": "thousands of threads",
    "start": "1057799",
    "end": "1059840"
  },
  {
    "text": "tens of thousands of threads per second",
    "start": "1059840",
    "end": "1061700"
  },
  {
    "text": "is is is it's kind of like is peas for",
    "start": "1061700",
    "end": "1064640"
  },
  {
    "text": "rust I mean node bun on an empty request",
    "start": "1064640",
    "end": "1068360"
  },
  {
    "text": "does like 80 or 90 000 or whatever on my",
    "start": "1068360",
    "end": "1072140"
  },
  {
    "text": "local machine I don't know what that",
    "start": "1072140",
    "end": "1073400"
  },
  {
    "text": "equals rust doing it like if I take bun",
    "start": "1073400",
    "end": "1076220"
  },
  {
    "text": "create a server that just Echoes back a",
    "start": "1076220",
    "end": "1078260"
  },
  {
    "text": "post body for whatever you send it right",
    "start": "1078260",
    "end": "1080000"
  },
  {
    "text": "create an echo and just do that I can",
    "start": "1080000",
    "end": "1083059"
  },
  {
    "text": "get it you know pretty high up you know",
    "start": "1083059",
    "end": "1084799"
  },
  {
    "text": "not a hundred thousand but pretty high",
    "start": "1084799",
    "end": "1086539"
  },
  {
    "text": "go is like a hundred and eighty thousand",
    "start": "1086539",
    "end": "1088940"
  },
  {
    "text": "uh on my this is all my machine all",
    "start": "1088940",
    "end": "1090980"
  },
  {
    "text": "local testing so again",
    "start": "1090980",
    "end": "1093140"
  },
  {
    "text": "grain assault uh and then rust is like",
    "start": "1093140",
    "end": "1096140"
  },
  {
    "text": "200 and some thousand so you know when I",
    "start": "1096140",
    "end": "1099620"
  },
  {
    "text": "see tens of thousands I don't think oh",
    "start": "1099620",
    "end": "1101299"
  },
  {
    "text": "wow right like is there a big difference",
    "start": "1101299",
    "end": "1104840"
  },
  {
    "text": "stop with your golden kappas",
    "start": "1104840",
    "end": "1107120"
  },
  {
    "text": "oh we already looked into a project Loom",
    "start": "1107120",
    "end": "1110799"
  },
  {
    "text": "all right turns out uh computers are",
    "start": "1111200",
    "end": "1113419"
  },
  {
    "text": "pretty good at doing multiple things at",
    "start": "1113419",
    "end": "1114740"
  },
  {
    "text": "once as an important caveat threads are",
    "start": "1114740",
    "end": "1116840"
  },
  {
    "text": "not available for fee uh or feasible in",
    "start": "1116840",
    "end": "1119000"
  },
  {
    "text": "all environments I'm not not by the way",
    "start": "1119000",
    "end": "1120740"
  },
  {
    "text": "I'm not knocking this I just I don't",
    "start": "1120740",
    "end": "1122780"
  },
  {
    "text": "have any data on whether this is worse",
    "start": "1122780",
    "end": "1124820"
  },
  {
    "text": "or better I'm just curious if it is",
    "start": "1124820",
    "end": "1127220"
  },
  {
    "text": "actually better or worse as an important",
    "start": "1127220",
    "end": "1129140"
  },
  {
    "text": "caveat threads are not available or",
    "start": "1129140",
    "end": "1130760"
  },
  {
    "text": "feasible in all environments such as",
    "start": "1130760",
    "end": "1132559"
  },
  {
    "text": "embedded systems my context for this",
    "start": "1132559",
    "end": "1134240"
  },
  {
    "text": "article is primarily conventional",
    "start": "1134240",
    "end": "1135740"
  },
  {
    "text": "server-side applications that run on top",
    "start": "1135740",
    "end": "1137480"
  },
  {
    "text": "of platforms like Linux",
    "start": "1137480",
    "end": "1140780"
  },
  {
    "text": "yep just Linux uh I would like to add",
    "start": "1140780",
    "end": "1143480"
  },
  {
    "text": "that threaded code and rust undergoes",
    "start": "1143480",
    "end": "1145340"
  },
  {
    "text": "the same astringent safety checks of as",
    "start": "1145340",
    "end": "1148220"
  },
  {
    "text": "the rest of the rust code okay fair it",
    "start": "1148220",
    "end": "1150440"
  },
  {
    "text": "is protected from data races null",
    "start": "1150440",
    "end": "1152059"
  },
  {
    "text": "dereferences and dangling references",
    "start": "1152059",
    "end": "1153740"
  },
  {
    "text": "ensuring a level of thread safety that",
    "start": "1153740",
    "end": "1155360"
  },
  {
    "text": "prevents many common pitfalls found in",
    "start": "1155360",
    "end": "1157220"
  },
  {
    "text": "concurrent programming since there is no",
    "start": "1157220",
    "end": "1159020"
  },
  {
    "text": "garbage collector there never will be",
    "start": "1159020",
    "end": "1160940"
  },
  {
    "text": "any stop the world pause to reclaim",
    "start": "1160940",
    "end": "1163160"
  },
  {
    "text": "memory traditional arguments against",
    "start": "1163160",
    "end": "1164720"
  },
  {
    "text": "threads simply don't apply to rust",
    "start": "1164720",
    "end": "1166700"
  },
  {
    "text": "Fearless concurrency is your friend",
    "start": "1166700",
    "end": "1170539"
  },
  {
    "text": "Fearless concurrency oh we got a tweet",
    "start": "1170539",
    "end": "1173840"
  },
  {
    "text": "we got a tweet people",
    "start": "1173840",
    "end": "1177100"
  },
  {
    "text": "concur ANSI is it antsy or ANSI I always",
    "start": "1182120",
    "end": "1185299"
  },
  {
    "text": "I always forget this one is it NC or",
    "start": "1185299",
    "end": "1187400"
  },
  {
    "text": "antsy",
    "start": "1187400",
    "end": "1189080"
  },
  {
    "text": "ANSI antsy not antsy antsy",
    "start": "1189080",
    "end": "1194019"
  },
  {
    "text": "Fearless concurrency",
    "start": "1195140",
    "end": "1198919"
  },
  {
    "text": "and ship it to production",
    "start": "1199640",
    "end": "1202820"
  },
  {
    "text": "ship it",
    "start": "1202820",
    "end": "1205419"
  },
  {
    "text": "ship that one ASCII",
    "start": "1205700",
    "end": "1209440"
  },
  {
    "text": "JS is a religion so is rust so is all",
    "start": "1209780",
    "end": "1212900"
  },
  {
    "text": "programming languages",
    "start": "1212900",
    "end": "1214460"
  },
  {
    "text": "hello privacy what did I miss not a lot",
    "start": "1214460",
    "end": "1216440"
  },
  {
    "text": "we're about to go to the last one all",
    "start": "1216440",
    "end": "1218059"
  },
  {
    "text": "right let's see and if you need to share",
    "start": "1218059",
    "end": "1219980"
  },
  {
    "text": "State between threads consider to use a",
    "start": "1219980",
    "end": "1221780"
  },
  {
    "text": "channel I've never used much for",
    "start": "1221780",
    "end": "1223220"
  },
  {
    "text": "channels I do want to use more Channel",
    "start": "1223220",
    "end": "1225020"
  },
  {
    "text": "stuff I feel like there's a lot of cool",
    "start": "1225020",
    "end": "1227179"
  },
  {
    "text": "things you can do I really think it's",
    "start": "1227179",
    "end": "1228679"
  },
  {
    "text": "cool that you can break from a loop and",
    "start": "1228679",
    "end": "1231620"
  },
  {
    "text": "return a value in Rust so you could have",
    "start": "1231620",
    "end": "1234559"
  },
  {
    "text": "like a Tokyo select in a loop receiving",
    "start": "1234559",
    "end": "1239059"
  },
  {
    "text": "values waiting for something to happen",
    "start": "1239059",
    "end": "1240919"
  },
  {
    "text": "from multiple different sources and then",
    "start": "1240919",
    "end": "1242960"
  },
  {
    "text": "when you get the thing you need you can",
    "start": "1242960",
    "end": "1244520"
  },
  {
    "text": "return it via a break out of the",
    "start": "1244520",
    "end": "1246140"
  },
  {
    "text": "expression I always thought that was",
    "start": "1246140",
    "end": "1247640"
  },
  {
    "text": "pretty kind of clever you know",
    "start": "1247640",
    "end": "1249620"
  },
  {
    "text": "I always thought that was pretty dang",
    "start": "1249620",
    "end": "1251059"
  },
  {
    "text": "clever and I just don't",
    "start": "1251059",
    "end": "1253039"
  },
  {
    "text": "I don't think about that enough you know",
    "start": "1253039",
    "end": "1254660"
  },
  {
    "text": "what I mean",
    "start": "1254660",
    "end": "1256220"
  },
  {
    "text": "uh my original intention was to have uh",
    "start": "1256220",
    "end": "1259400"
  },
  {
    "text": "to advise a newcomers to sidestep async",
    "start": "1259400",
    "end": "1261740"
  },
  {
    "text": "arrest for giving the ecosystem time to",
    "start": "1261740",
    "end": "1264020"
  },
  {
    "text": "mature however since I realized that",
    "start": "1264020",
    "end": "1265400"
  },
  {
    "text": "this is not feasible given that a lot of",
    "start": "1265400",
    "end": "1267500"
  },
  {
    "text": "libraries are async first and new users",
    "start": "1267500",
    "end": "1269360"
  },
  {
    "text": "will encounter async rust one way or",
    "start": "1269360",
    "end": "1271100"
  },
  {
    "text": "another and cry an acrust truly truly",
    "start": "1271100",
    "end": "1273860"
  },
  {
    "text": "cry in async Rust instead I would",
    "start": "1273860",
    "end": "1275780"
  },
  {
    "text": "recommend to use async rust only when",
    "start": "1275780",
    "end": "1277460"
  },
  {
    "text": "you really need it just learn how to",
    "start": "1277460",
    "end": "1278960"
  },
  {
    "text": "write a good synchronous rust first and",
    "start": "1278960",
    "end": "1281179"
  },
  {
    "text": "then if necessary transition to",
    "start": "1281179",
    "end": "1282799"
  },
  {
    "text": "asynchrust learn to walk before you run",
    "start": "1282799",
    "end": "1285440"
  },
  {
    "text": "fair fair if you have used asynchrust",
    "start": "1285440",
    "end": "1288500"
  },
  {
    "text": "stick to Tokyo a well-established",
    "start": "1288500",
    "end": "1290120"
  },
  {
    "text": "libraries like request and squeal X in",
    "start": "1290120",
    "end": "1292700"
  },
  {
    "text": "your own code try to avoid async only",
    "start": "1292700",
    "end": "1294440"
  },
  {
    "text": "public apis to make Downstream usage",
    "start": "1294440",
    "end": "1296360"
  },
  {
    "text": "easier oh this these are actually all",
    "start": "1296360",
    "end": "1297860"
  },
  {
    "text": "really good pieces of advice this is",
    "start": "1297860",
    "end": "1299780"
  },
  {
    "text": "actually a",
    "start": "1299780",
    "end": "1300740"
  },
  {
    "text": "great advice right here however it's",
    "start": "1300740",
    "end": "1303440"
  },
  {
    "text": "valuable to know that there are",
    "start": "1303440",
    "end": "1304760"
  },
  {
    "text": "alternatives to Tokyo and that they are",
    "start": "1304760",
    "end": "1306620"
  },
  {
    "text": "worth exploring",
    "start": "1306620",
    "end": "1307880"
  },
  {
    "text": "one hard part though is that if you have",
    "start": "1307880",
    "end": "1310820"
  },
  {
    "text": "a thread running and it blocks because",
    "start": "1310820",
    "end": "1313520"
  },
  {
    "text": "it hits a Sync API that you don't",
    "start": "1313520",
    "end": "1315260"
  },
  {
    "text": "realize is sync for a long time you can",
    "start": "1315260",
    "end": "1317240"
  },
  {
    "text": "get some goofy results in Tokyo",
    "start": "1317240",
    "end": "1319820"
  },
  {
    "text": "right like some things can happen that",
    "start": "1319820",
    "end": "1321860"
  },
  {
    "text": "you may not be expecting",
    "start": "1321860",
    "end": "1325159"
  },
  {
    "text": "and it can be uh it can slow your",
    "start": "1325159",
    "end": "1327260"
  },
  {
    "text": "program down a whole bunch it can block",
    "start": "1327260",
    "end": "1329000"
  },
  {
    "text": "things uh it's not necessarily as",
    "start": "1329000",
    "end": "1331580"
  },
  {
    "text": "straightforward as",
    "start": "1331580",
    "end": "1333140"
  },
  {
    "text": "as just simply go you know",
    "start": "1333140",
    "end": "1335480"
  },
  {
    "text": "uh however it's valuable to know that",
    "start": "1335480",
    "end": "1337220"
  },
  {
    "text": "there are alternatives okay yep at its",
    "start": "1337220",
    "end": "1339380"
  },
  {
    "text": "core rust and its standard Library",
    "start": "1339380",
    "end": "1340580"
  },
  {
    "text": "offers just the absolute Essentials for",
    "start": "1340580",
    "end": "1342380"
  },
  {
    "text": "async await the bulk of the work is done",
    "start": "1342380",
    "end": "1344120"
  },
  {
    "text": "and creates developed by the rust",
    "start": "1344120",
    "end": "1345260"
  },
  {
    "text": "Community we should make more use of the",
    "start": "1345260",
    "end": "1346760"
  },
  {
    "text": "ability to iterate on async Rust and",
    "start": "1346760",
    "end": "1348559"
  },
  {
    "text": "experiment with different designs before",
    "start": "1348559",
    "end": "1349940"
  },
  {
    "text": "we settle on a final solution",
    "start": "1349940",
    "end": "1352940"
  },
  {
    "text": "in binary crates think twice if you",
    "start": "1352940",
    "end": "1355520"
  },
  {
    "text": "really need to use async uh to use async",
    "start": "1355520",
    "end": "1357980"
  },
  {
    "text": "it's probably easier to just spawn a",
    "start": "1357980",
    "end": "1359600"
  },
  {
    "text": "thread and get away with blocking i o in",
    "start": "1359600",
    "end": "1361760"
  },
  {
    "text": "that case you have a CPM a CPU bound",
    "start": "1361760",
    "end": "1363860"
  },
  {
    "text": "workload you can use rayon to paralyze",
    "start": "1363860",
    "end": "1366260"
  },
  {
    "text": "your code rayon is pretty good uh I've",
    "start": "1366260",
    "end": "1369140"
  },
  {
    "text": "I've played around with it if you don't",
    "start": "1369140",
    "end": "1370820"
  },
  {
    "text": "need async for performance reasons",
    "start": "1370820",
    "end": "1372440"
  },
  {
    "text": "threads can often be simpler alternative",
    "start": "1372440",
    "end": "1375380"
  },
  {
    "text": "Fair it's fair really just threads and",
    "start": "1375380",
    "end": "1378260"
  },
  {
    "text": "channels I think I just need to use just",
    "start": "1378260",
    "end": "1380539"
  },
  {
    "text": "use those more but I will say that the",
    "start": "1380539",
    "end": "1383000"
  },
  {
    "text": "go go supporting Syntax for channels",
    "start": "1383000",
    "end": "1386480"
  },
  {
    "text": "and how channels work is massively",
    "start": "1386480",
    "end": "1389360"
  },
  {
    "text": "easier the fact that you have to have a",
    "start": "1389360",
    "end": "1392120"
  },
  {
    "text": "single read and multiple rights",
    "start": "1392120",
    "end": "1396200"
  },
  {
    "text": "and you got to clone things around and",
    "start": "1396200",
    "end": "1398000"
  },
  {
    "text": "all that I feel just like it makes it",
    "start": "1398000",
    "end": "1399620"
  },
  {
    "text": "harder",
    "start": "1399620",
    "end": "1401980"
  },
  {
    "text": "you know",
    "start": "1402320",
    "end": "1403940"
  },
  {
    "text": "isolate async code if async is truly",
    "start": "1403940",
    "end": "1406640"
  },
  {
    "text": "indispensable consider isolating your",
    "start": "1406640",
    "end": "1408200"
  },
  {
    "text": "async code from the rest of your",
    "start": "1408200",
    "end": "1409220"
  },
  {
    "text": "application I never know how to do this",
    "start": "1409220",
    "end": "1410600"
  },
  {
    "text": "it leaks it's very very leaky keep your",
    "start": "1410600",
    "end": "1412820"
  },
  {
    "text": "domain logic synchronous and only use",
    "start": "1412820",
    "end": "1414320"
  },
  {
    "text": "async uh for i o and external Services",
    "start": "1414320",
    "end": "1416600"
  },
  {
    "text": "following the guidelines will make your",
    "start": "1416600",
    "end": "1418400"
  },
  {
    "text": "code more composable okay okay okay okay",
    "start": "1418400",
    "end": "1420919"
  },
  {
    "text": "and accessible and on top of that the",
    "start": "1420919",
    "end": "1423320"
  },
  {
    "text": "error messages of synchross are much",
    "start": "1423320",
    "end": "1424940"
  },
  {
    "text": "easier to reason about",
    "start": "1424940",
    "end": "1426260"
  },
  {
    "text": "facts facts upon facts fax that in the",
    "start": "1426260",
    "end": "1430760"
  },
  {
    "text": "machine async rust feels like a",
    "start": "1430760",
    "end": "1432559"
  },
  {
    "text": "different dialect significantly more",
    "start": "1432559",
    "end": "1434000"
  },
  {
    "text": "brittle than the rest of the language I",
    "start": "1434000",
    "end": "1435679"
  },
  {
    "text": "still don't know what pin is uh the",
    "start": "1435679",
    "end": "1437659"
  },
  {
    "text": "default mode of right for writing rust",
    "start": "1437659",
    "end": "1439460"
  },
  {
    "text": "should be synchronous freely after a",
    "start": "1439460",
    "end": "1441799"
  },
  {
    "text": "stress rep inside rust there are uh",
    "start": "1441799",
    "end": "1444260"
  },
  {
    "text": "there is a smaller simpler language that",
    "start": "1444260",
    "end": "1445880"
  },
  {
    "text": "is waiting to get out",
    "start": "1445880",
    "end": "1447380"
  },
  {
    "text": "straw strap uh BR is this Bjorn Bjorn",
    "start": "1447380",
    "end": "1450679"
  },
  {
    "text": "made a little uh",
    "start": "1450679",
    "end": "1452539"
  },
  {
    "text": "a little little post it is a language",
    "start": "1452539",
    "end": "1454400"
  },
  {
    "text": "that most rust codes should be written",
    "start": "1454400",
    "end": "1455900"
  },
  {
    "text": "in",
    "start": "1455900",
    "end": "1457340"
  },
  {
    "text": "I actually really like this this was",
    "start": "1457340",
    "end": "1458780"
  },
  {
    "text": "really great",
    "start": "1458780",
    "end": "1460460"
  },
  {
    "text": "it definitely makes think more because I",
    "start": "1460460",
    "end": "1462860"
  },
  {
    "text": "just reach for async rust first",
    "start": "1462860",
    "end": "1466460"
  },
  {
    "text": "I I reach for async rust first and I",
    "start": "1466460",
    "end": "1471140"
  },
  {
    "text": "don't",
    "start": "1471140",
    "end": "1473260"
  },
  {
    "text": "necessarily consider its implications",
    "start": "1473260",
    "end": "1475820"
  },
  {
    "text": "you know what I mean I just grab it and",
    "start": "1475820",
    "end": "1478280"
  },
  {
    "text": "I'm so it's almost second nature exactly",
    "start": "1478280",
    "end": "1480080"
  },
  {
    "text": "like when I start a project I I it was a",
    "start": "1480080",
    "end": "1482900"
  },
  {
    "text": "very balanced article this was a very",
    "start": "1482900",
    "end": "1484700"
  },
  {
    "text": "this was a tremendous one hey Cora",
    "start": "1484700",
    "end": "1486740"
  },
  {
    "text": "corrode appreciated this this was this",
    "start": "1486740",
    "end": "1489380"
  },
  {
    "text": "was this was a beautiful article",
    "start": "1489380",
    "end": "1492020"
  },
  {
    "text": "um async rust is really difficult and",
    "start": "1492020",
    "end": "1494900"
  },
  {
    "text": "really bizarre and I think I reach for",
    "start": "1494900",
    "end": "1497659"
  },
  {
    "text": "it and I'm just so used to it and I",
    "start": "1497659",
    "end": "1499580"
  },
  {
    "text": "program a certain way to it that I think",
    "start": "1499580",
    "end": "1502280"
  },
  {
    "text": "often I forget",
    "start": "1502280",
    "end": "1504679"
  },
  {
    "text": "maybe there's other ways and maybe I",
    "start": "1504679",
    "end": "1507080"
  },
  {
    "text": "should not reach right away",
    "start": "1507080",
    "end": "1509780"
  },
  {
    "text": "for async rust maybe I need to just try",
    "start": "1509780",
    "end": "1511880"
  },
  {
    "text": "spawn in some threads and start using",
    "start": "1511880",
    "end": "1513559"
  },
  {
    "text": "channels I'm gonna try that next time",
    "start": "1513559",
    "end": "1514940"
  },
  {
    "text": "honestly I'm gonna try that next time",
    "start": "1514940",
    "end": "1516440"
  },
  {
    "text": "next time I do anything I'm just gonna",
    "start": "1516440",
    "end": "1518299"
  },
  {
    "text": "try to do uh uh I'm interested try",
    "start": "1518299",
    "end": "1521360"
  },
  {
    "text": "spawning and tossing out",
    "start": "1521360",
    "end": "1523580"
  },
  {
    "text": "something different I feel like I'm",
    "start": "1523580",
    "end": "1525320"
  },
  {
    "text": "pretty good at rust I'm okay at async",
    "start": "1525320",
    "end": "1527600"
  },
  {
    "text": "Russ pretty good at rust I don't know",
    "start": "1527600",
    "end": "1528919"
  },
  {
    "text": "the deeper size right I call myself a",
    "start": "1528919",
    "end": "1530900"
  },
  {
    "text": "level one developer meaning that like I",
    "start": "1530900",
    "end": "1533720"
  },
  {
    "text": "wouldn't be able to effectively write",
    "start": "1533720",
    "end": "1535580"
  },
  {
    "text": "Tokyo well right I don't know async rust",
    "start": "1535580",
    "end": "1538940"
  },
  {
    "text": "down to its core and how it's actually",
    "start": "1538940",
    "end": "1540919"
  },
  {
    "text": "done",
    "start": "1540919",
    "end": "1541820"
  },
  {
    "text": "I just know how to use it I'm level one",
    "start": "1541820",
    "end": "1543860"
  },
  {
    "text": "deep I know how to use everything I",
    "start": "1543860",
    "end": "1546200"
  },
  {
    "text": "don't know",
    "start": "1546200",
    "end": "1547159"
  },
  {
    "text": "how it works at a deeper level whereas",
    "start": "1547159",
    "end": "1549679"
  },
  {
    "text": "like something like typescript I know at",
    "start": "1549679",
    "end": "1552140"
  },
  {
    "text": "like a level two I could write",
    "start": "1552140",
    "end": "1554360"
  },
  {
    "text": "pretty much any Library out there I feel",
    "start": "1554360",
    "end": "1556760"
  },
  {
    "text": "completely confident in it I don't think",
    "start": "1556760",
    "end": "1558500"
  },
  {
    "text": "I have a lot of I don't think I have a",
    "start": "1558500",
    "end": "1559940"
  },
  {
    "text": "lot of problems with it",
    "start": "1559940",
    "end": "1561559"
  },
  {
    "text": "um go I'm like a 0.5 developer I think I",
    "start": "1561559",
    "end": "1563900"
  },
  {
    "text": "could be better I just haven't done a",
    "start": "1563900",
    "end": "1565400"
  },
  {
    "text": "lot I just haven't done enough",
    "start": "1565400",
    "end": "1566600"
  },
  {
    "text": "production level go you know what I mean",
    "start": "1566600",
    "end": "1569179"
  },
  {
    "text": "I just haven't done that",
    "start": "1569179",
    "end": "1571220"
  },
  {
    "text": "yeah I feel like I can do lifetimes I",
    "start": "1571220",
    "end": "1573020"
  },
  {
    "text": "don't feel like I'd have a hard time",
    "start": "1573020",
    "end": "1574159"
  },
  {
    "text": "writing like a really Performance Based",
    "start": "1574159",
    "end": "1576860"
  },
  {
    "text": "library with no copying in all lifetimes",
    "start": "1576860",
    "end": "1579380"
  },
  {
    "text": "I just don't because I just clone you",
    "start": "1579380",
    "end": "1581720"
  },
  {
    "text": "know what I mean",
    "start": "1581720",
    "end": "1583700"
  },
  {
    "text": "I just I just clone because I don't care",
    "start": "1583700",
    "end": "1585380"
  },
  {
    "text": "I don't care for most the times most of",
    "start": "1585380",
    "end": "1587659"
  },
  {
    "text": "the times I'm just trying to get the",
    "start": "1587659",
    "end": "1588559"
  },
  {
    "text": "thing correct and make sure I like what",
    "start": "1588559",
    "end": "1590360"
  },
  {
    "text": "I see because rust is one of these",
    "start": "1590360",
    "end": "1591860"
  },
  {
    "text": "languages that",
    "start": "1591860",
    "end": "1593360"
  },
  {
    "text": "it requires a different feel to really",
    "start": "1593360",
    "end": "1595760"
  },
  {
    "text": "be good at it's different than other",
    "start": "1595760",
    "end": "1597559"
  },
  {
    "text": "languages like generally when I'm",
    "start": "1597559",
    "end": "1599240"
  },
  {
    "text": "programming go or JavaScript I can kind",
    "start": "1599240",
    "end": "1601400"
  },
  {
    "text": "of just",
    "start": "1601400",
    "end": "1602779"
  },
  {
    "text": "I can mostly just kind of do the thing",
    "start": "1602779",
    "end": "1604580"
  },
  {
    "text": "but rust you kind of got to take a",
    "start": "1604580",
    "end": "1606919"
  },
  {
    "text": "slightly different approach to it's just",
    "start": "1606919",
    "end": "1609679"
  },
  {
    "text": "I don't",
    "start": "1609679",
    "end": "1611000"
  },
  {
    "text": "fully have the right everything first",
    "start": "1611000",
    "end": "1614480"
  },
  {
    "text": "try",
    "start": "1614480",
    "end": "1616340"
  },
  {
    "text": "with rust yet I think I just need to do",
    "start": "1616340",
    "end": "1618260"
  },
  {
    "text": "it a little bit more you know",
    "start": "1618260",
    "end": "1620840"
  },
  {
    "text": "I gotta get there",
    "start": "1620840",
    "end": "1622460"
  },
  {
    "text": "it's a take a step back language but I",
    "start": "1622460",
    "end": "1624200"
  },
  {
    "text": "don't I don't believe in take a step",
    "start": "1624200",
    "end": "1625400"
  },
  {
    "text": "back languages I really think that",
    "start": "1625400",
    "end": "1626960"
  },
  {
    "text": "that's just experience I don't like the",
    "start": "1626960",
    "end": "1629059"
  },
  {
    "text": "idea of taking a step back either I",
    "start": "1629059",
    "end": "1631039"
  },
  {
    "text": "really I think that it's you should just",
    "start": "1631039",
    "end": "1633200"
  },
  {
    "text": "be able to free write",
    "start": "1633200",
    "end": "1635140"
  },
  {
    "text": "ejaculate code at high speed and get",
    "start": "1635140",
    "end": "1638179"
  },
  {
    "text": "somewhere that means you've learned a",
    "start": "1638179",
    "end": "1639740"
  },
  {
    "text": "language sufficiently and I'm mostly",
    "start": "1639740",
    "end": "1642260"
  },
  {
    "text": "there with rust",
    "start": "1642260",
    "end": "1643580"
  },
  {
    "text": "I can mostly",
    "start": "1643580",
    "end": "1645620"
  },
  {
    "text": "just rage program rust but I'm not quite",
    "start": "1645620",
    "end": "1648740"
  },
  {
    "text": "there huh whiteboard masturbation first",
    "start": "1648740",
    "end": "1652340"
  },
  {
    "text": "so I never do whiteboard masturbation",
    "start": "1652340",
    "end": "1654440"
  },
  {
    "text": "I'm not a big fan of whiteboard",
    "start": "1654440",
    "end": "1655940"
  },
  {
    "text": "masturbation I don't like to I don't I",
    "start": "1655940",
    "end": "1657799"
  },
  {
    "text": "don't generally I think it's uh",
    "start": "1657799",
    "end": "1660260"
  },
  {
    "text": "I think it's I think that the more you",
    "start": "1660260",
    "end": "1662360"
  },
  {
    "text": "plan out a program besides for the High",
    "start": "1662360",
    "end": "1664220"
  },
  {
    "text": "bits I think often",
    "start": "1664220",
    "end": "1667720"
  },
  {
    "text": "you don't get anything out of it you've",
    "start": "1667940",
    "end": "1669679"
  },
  {
    "text": "just wasted time",
    "start": "1669679",
    "end": "1670940"
  },
  {
    "text": "Zig I'm definitely not good at Zig Zig",
    "start": "1670940",
    "end": "1672740"
  },
  {
    "text": "I'm like point one oh camel I'm like",
    "start": "1672740",
    "end": "1674299"
  },
  {
    "text": "point one you know I just need an excuse",
    "start": "1674299",
    "end": "1677299"
  },
  {
    "text": "to say masturbation okay fair anyways",
    "start": "1677299",
    "end": "1681460"
  },
  {
    "text": "uh let's go marker uh",
    "start": "1682340",
    "end": "1685340"
  },
  {
    "text": "I need to come up with a better name of",
    "start": "1685340",
    "end": "1687020"
  },
  {
    "text": "uh of this title what should I call this",
    "start": "1687020",
    "end": "1689360"
  },
  {
    "text": "this thing because the state of async",
    "start": "1689360",
    "end": "1691880"
  },
  {
    "text": "rust run times is actually really",
    "start": "1691880",
    "end": "1694279"
  },
  {
    "text": "misleading to what this article is about",
    "start": "1694279",
    "end": "1697760"
  },
  {
    "text": "Dr Watson ejaculates 11 times in the",
    "start": "1697760",
    "end": "1700580"
  },
  {
    "text": "Sherlock Home stories that's the",
    "start": "1700580",
    "end": "1702440"
  },
  {
    "text": "strangest top fact I've ever heard",
    "start": "1702440",
    "end": "1704840"
  },
  {
    "text": "the name",
    "start": "1704840",
    "end": "1706940"
  },
  {
    "text": "is the think twice a gen",
    "start": "1706940",
    "end": "1710379"
  }
]