[
  {
    "text": "speeding up V8 Heap snapshot so if",
    "start": "0",
    "end": "2520"
  },
  {
    "text": "you've never worked with Heap snapshots",
    "start": "2520",
    "end": "3840"
  },
  {
    "text": "a they're really really slow but if",
    "start": "3840",
    "end": "5100"
  },
  {
    "text": "you've never actually worked with their",
    "start": "5100",
    "end": "6180"
  },
  {
    "text": "underlying format it's it's quite",
    "start": "6180",
    "end": "8340"
  },
  {
    "text": "amazing uh for for Netflix I built um",
    "start": "8340",
    "end": "11280"
  },
  {
    "text": "some some Heap snapshot stuff uh that",
    "start": "11280",
    "end": "14040"
  },
  {
    "text": "worked in inside of this I helped build",
    "start": "14040",
    "end": "16379"
  },
  {
    "text": "it I I did work with it I did a lot of",
    "start": "16379",
    "end": "18359"
  },
  {
    "text": "memory stuff and so this is near and",
    "start": "18359",
    "end": "20100"
  },
  {
    "text": "dear to my heart so I'm very excited",
    "start": "20100",
    "end": "21600"
  },
  {
    "text": "about this this post has been authored",
    "start": "21600",
    "end": "23520"
  },
  {
    "text": "by Jose dapina",
    "start": "23520",
    "end": "26660"
  },
  {
    "text": "with contributions from Jason Williams",
    "start": "26660",
    "end": "28859"
  },
  {
    "text": "Bloomberg Ashley Claymore Bloomberg Rob",
    "start": "28859",
    "end": "31800"
  },
  {
    "text": "Palmer Bloomberg Joey Chung engalia and",
    "start": "31800",
    "end": "36180"
  },
  {
    "text": "uh",
    "start": "36180",
    "end": "37579"
  },
  {
    "text": "Google that's how good I am at saying",
    "start": "37579",
    "end": "39960"
  },
  {
    "text": "names I'm not good okay I hope you know",
    "start": "39960",
    "end": "42059"
  },
  {
    "text": "that in this post uh V8 snapshots I will",
    "start": "42059",
    "end": "44820"
  },
  {
    "text": "talk about some performance problems",
    "start": "44820",
    "end": "46079"
  },
  {
    "text": "found by Bloomberg engineers and how we",
    "start": "46079",
    "end": "48120"
  },
  {
    "text": "fix them to make JavaScript memory",
    "start": "48120",
    "end": "49500"
  },
  {
    "text": "analysis faster than ever love this the",
    "start": "49500",
    "end": "51840"
  },
  {
    "text": "problem Bloomberg engineers",
    "start": "51840",
    "end": "53399"
  },
  {
    "text": "we're working to diagnose on diagnosing",
    "start": "53399",
    "end": "55800"
  },
  {
    "text": "a memory leak in JavaScript application",
    "start": "55800",
    "end": "57360"
  },
  {
    "text": "it was falling uh without it was failing",
    "start": "57360",
    "end": "60120"
  },
  {
    "text": "with out of memory errors for the rest",
    "start": "60120",
    "end": "61980"
  },
  {
    "text": "of the application the V8 Heap limit was",
    "start": "61980",
    "end": "64260"
  },
  {
    "text": "configured around a 1400 megabytes",
    "start": "64260",
    "end": "66360"
  },
  {
    "text": "that's a lot normally a v8's garbage",
    "start": "66360",
    "end": "68400"
  },
  {
    "text": "collector should be able to keep the",
    "start": "68400",
    "end": "69960"
  },
  {
    "text": "Heap under uh usage under that limit so",
    "start": "69960",
    "end": "72600"
  },
  {
    "text": "the failures indicated that there's",
    "start": "72600",
    "end": "73799"
  },
  {
    "text": "likely a leak correct uh the common",
    "start": "73799",
    "end": "76380"
  },
  {
    "text": "technique to debug routine memory leaks",
    "start": "76380",
    "end": "78659"
  },
  {
    "text": "uh scenario like the one capture let's",
    "start": "78659",
    "end": "80460"
  },
  {
    "text": "see ah a common technique to debug a",
    "start": "80460",
    "end": "82860"
  },
  {
    "text": "routine memory leak scenario like this",
    "start": "82860",
    "end": "84600"
  },
  {
    "text": "is to capture a heapsnop shirt uh Heap",
    "start": "84600",
    "end": "86700"
  },
  {
    "text": "snapshot first then load in with the uh",
    "start": "86700",
    "end": "88920"
  },
  {
    "text": "this memory tab find out what is",
    "start": "88920",
    "end": "90600"
  },
  {
    "text": "consuming the most memory by inspecting",
    "start": "90600",
    "end": "92100"
  },
  {
    "text": "various summaries and object attributes",
    "start": "92100",
    "end": "93659"
  },
  {
    "text": "uh in the devtools UI the heaps not shot",
    "start": "93659",
    "end": "96780"
  },
  {
    "text": "can be taken in the memory tab for",
    "start": "96780",
    "end": "98939"
  },
  {
    "text": "node.js applications yes what you told",
    "start": "98939",
    "end": "100799"
  },
  {
    "text": "they're missing one thing I think they",
    "start": "100799",
    "end": "103020"
  },
  {
    "text": "didn't mean to say it this way but you",
    "start": "103020",
    "end": "104520"
  },
  {
    "text": "take one snapshot you keep doing the",
    "start": "104520",
    "end": "106799"
  },
  {
    "text": "operation for a long time you take",
    "start": "106799",
    "end": "108479"
  },
  {
    "text": "another snapshot you keep doing the",
    "start": "108479",
    "end": "110759"
  },
  {
    "text": "operation for a long time you take",
    "start": "110759",
    "end": "112439"
  },
  {
    "text": "another snapshot and then you can run",
    "start": "112439",
    "end": "114180"
  },
  {
    "text": "diffs on those heaps and you'll see that",
    "start": "114180",
    "end": "116939"
  },
  {
    "text": "you know like there's one thing that",
    "start": "116939",
    "end": "118860"
  },
  {
    "text": "keeps on growing while the other ones",
    "start": "118860",
    "end": "120119"
  },
  {
    "text": "aren't uh they wanted to capture several",
    "start": "120119",
    "end": "122460"
  },
  {
    "text": "snapshot at different points in the",
    "start": "122460",
    "end": "123780"
  },
  {
    "text": "application's life so that the devtools",
    "start": "123780",
    "end": "125340"
  },
  {
    "text": "memory viewer could be used to show the",
    "start": "125340",
    "end": "127079"
  },
  {
    "text": "difference between the heaps at",
    "start": "127079",
    "end": "128220"
  },
  {
    "text": "different times the problem was",
    "start": "128220",
    "end": "129599"
  },
  {
    "text": "capturing a single full-size uh a single",
    "start": "129599",
    "end": "132120"
  },
  {
    "text": "full size 500 megabyte snapshot was",
    "start": "132120",
    "end": "133860"
  },
  {
    "text": "taking over 30 minutes that doesn't make",
    "start": "133860",
    "end": "135780"
  },
  {
    "text": "any sense I I've used this thing all the",
    "start": "135780",
    "end": "138060"
  },
  {
    "text": "time why was this thing taking",
    "start": "138060",
    "end": "139980"
  },
  {
    "text": "30 minutes what it was the slowness in",
    "start": "139980",
    "end": "142440"
  },
  {
    "text": "the memory analysis workflow that needed",
    "start": "142440",
    "end": "144120"
  },
  {
    "text": "uh to solve what what narrowing the",
    "start": "144120",
    "end": "146940"
  },
  {
    "text": "problem is there some difference between",
    "start": "146940",
    "end": "149220"
  },
  {
    "text": "this and what you get is there some",
    "start": "149220",
    "end": "151920"
  },
  {
    "text": "difference between what node does in",
    "start": "151920",
    "end": "153360"
  },
  {
    "text": "this I I assume it's the same like it's",
    "start": "153360",
    "end": "155160"
  },
  {
    "text": "literally the same call inside the V8",
    "start": "155160",
    "end": "157200"
  },
  {
    "text": "system then Bloomberg Engineers started",
    "start": "157200",
    "end": "159480"
  },
  {
    "text": "investing investigating the issue using",
    "start": "159480",
    "end": "161580"
  },
  {
    "text": "V8 parameters as described in this post",
    "start": "161580",
    "end": "164040"
  },
  {
    "text": "node.js and V8 have some nice command",
    "start": "164040",
    "end": "166379"
  },
  {
    "text": "line parameters that can help with these",
    "start": "166379",
    "end": "168180"
  },
  {
    "text": "these options were used to create the",
    "start": "168180",
    "end": "170280"
  },
  {
    "text": "Heap snapshots simplify the reproduction",
    "start": "170280",
    "end": "172680"
  },
  {
    "text": "and improve observability Max old space",
    "start": "172680",
    "end": "175019"
  },
  {
    "text": "don't you love that it's called Max old",
    "start": "175019",
    "end": "176700"
  },
  {
    "text": "space size whenever I read the phrase",
    "start": "176700",
    "end": "178860"
  },
  {
    "text": "Max old old space size I constantly",
    "start": "178860",
    "end": "181620"
  },
  {
    "text": "think that this is like the old way to",
    "start": "181620",
    "end": "184019"
  },
  {
    "text": "do it but old I believe refers to the",
    "start": "184019",
    "end": "186120"
  },
  {
    "text": "generational garbage collection right",
    "start": "186120",
    "end": "187739"
  },
  {
    "text": "this limits the Heap to 100 megabytes",
    "start": "187739",
    "end": "189720"
  },
  {
    "text": "and helps reproduce the issue much",
    "start": "189720",
    "end": "191280"
  },
  {
    "text": "faster keep snapshot Heap snapshot near",
    "start": "191280",
    "end": "194159"
  },
  {
    "text": "Heap limit 10. this is a node.js",
    "start": "194159",
    "end": "197280"
  },
  {
    "text": "specific command line welcome I forgot",
    "start": "197280",
    "end": "199260"
  },
  {
    "text": "to turn off alarm I love you",
    "start": "199260",
    "end": "201180"
  },
  {
    "text": "hey shh not now not now this is a",
    "start": "201180",
    "end": "204720"
  },
  {
    "text": "node.js specific command line parameter",
    "start": "204720",
    "end": "206280"
  },
  {
    "text": "that tells node.js to generate a",
    "start": "206280",
    "end": "207959"
  },
  {
    "text": "snapshot each time it comes close to",
    "start": "207959",
    "end": "210000"
  },
  {
    "text": "running out of memory it is configured",
    "start": "210000",
    "end": "211800"
  },
  {
    "text": "to generate up to 10 snapshots in total",
    "start": "211800",
    "end": "213720"
  },
  {
    "text": "this prevents thrashing where the memory",
    "start": "213720",
    "end": "215400"
  },
  {
    "text": "starved program spends a long time",
    "start": "215400",
    "end": "216959"
  },
  {
    "text": "producing more snapshots than needed",
    "start": "216959",
    "end": "220140"
  },
  {
    "text": "awesome enable uh I don't know extended",
    "start": "220140",
    "end": "223200"
  },
  {
    "text": "stack walking uh this allows uh tools",
    "start": "223200",
    "end": "225840"
  },
  {
    "text": "such as etw and WPA and xperf to see the",
    "start": "225840",
    "end": "228840"
  },
  {
    "text": "JS tax which means um which has been",
    "start": "228840",
    "end": "230580"
  },
  {
    "text": "called in V8 oh nice okay perfect uh",
    "start": "230580",
    "end": "234060"
  },
  {
    "text": "enter interpreted frame native stack",
    "start": "234060",
    "end": "236159"
  },
  {
    "text": "this leg is used in combination with",
    "start": "236159",
    "end": "238080"
  },
  {
    "text": "tools like etw WPA and xperf to see the",
    "start": "238080",
    "end": "241019"
  },
  {
    "text": "native stack when profiling oh perfect",
    "start": "241019",
    "end": "242640"
  },
  {
    "text": "Okay cool so you can see both Stacks",
    "start": "242640",
    "end": "244260"
  },
  {
    "text": "right here uh when the size of the V8",
    "start": "244260",
    "end": "246299"
  },
  {
    "text": "Heap is approaching the limit V8 forces",
    "start": "246299",
    "end": "247920"
  },
  {
    "text": "the garbage collection to reduce the",
    "start": "247920",
    "end": "249060"
  },
  {
    "text": "memory usage it also notifies them",
    "start": "249060",
    "end": "250980"
  },
  {
    "text": "better about the Heap snapshot near Heap",
    "start": "250980",
    "end": "254099"
  },
  {
    "text": "limit flag in the node.js Genera let's",
    "start": "254099",
    "end": "256260"
  },
  {
    "text": "see",
    "start": "256260",
    "end": "257220"
  },
  {
    "text": "in node.js oh whoopsies something reads",
    "start": "257220",
    "end": "260160"
  },
  {
    "text": "wrong here it also notifies the embedder",
    "start": "260160",
    "end": "261959"
  },
  {
    "text": "about this the heaps not the Heap",
    "start": "261959",
    "end": "264600"
  },
  {
    "text": "snapshot near limit flag in node.js",
    "start": "264600",
    "end": "266820"
  },
  {
    "text": "generates a new Heap snapshot upon",
    "start": "266820",
    "end": "268740"
  },
  {
    "text": "notification it just turns out it's me",
    "start": "268740",
    "end": "271080"
  },
  {
    "text": "in the test case the memory usage",
    "start": "271080",
    "end": "273120"
  },
  {
    "text": "decreases but after several iterations",
    "start": "273120",
    "end": "275040"
  },
  {
    "text": "garbage collection ultimately cannot",
    "start": "275040",
    "end": "276600"
  },
  {
    "text": "free enough space and so the application",
    "start": "276600",
    "end": "278460"
  },
  {
    "text": "terminated with an out of memory errand",
    "start": "278460",
    "end": "281160"
  },
  {
    "text": "um as we call it they took recordings",
    "start": "281160",
    "end": "283500"
  },
  {
    "text": "using Windows performance analyzer see",
    "start": "283500",
    "end": "287400"
  },
  {
    "text": "below in order to narrow down the issue",
    "start": "287400",
    "end": "289080"
  },
  {
    "text": "this reveals that most CPU time was",
    "start": "289080",
    "end": "290759"
  },
  {
    "text": "being spent within the V8 Heap Explorer",
    "start": "290759",
    "end": "293100"
  },
  {
    "text": "specifically it took around 30 minutes",
    "start": "293100",
    "end": "294900"
  },
  {
    "text": "just to walk through the Heap to visit",
    "start": "294900",
    "end": "296520"
  },
  {
    "text": "each node in the collected and collect",
    "start": "296520",
    "end": "298860"
  },
  {
    "text": "the name this didn't seem to make much",
    "start": "298860",
    "end": "300960"
  },
  {
    "text": "sense yeah because I would assume it",
    "start": "300960",
    "end": "302580"
  },
  {
    "text": "would take the same amount of time then",
    "start": "302580",
    "end": "303840"
  },
  {
    "text": "to garbage collect that long why would",
    "start": "303840",
    "end": "305580"
  },
  {
    "text": "recording the name of each property take",
    "start": "305580",
    "end": "307020"
  },
  {
    "text": "so long this is when I asked to take a",
    "start": "307020",
    "end": "310199"
  },
  {
    "text": "look",
    "start": "310199",
    "end": "311600"
  },
  {
    "text": "quantifying the problem the first step",
    "start": "311600",
    "end": "313680"
  },
  {
    "text": "was adding support to VA to better",
    "start": "313680",
    "end": "315000"
  },
  {
    "text": "understand where time is spent during",
    "start": "315000",
    "end": "316740"
  },
  {
    "text": "the capture of Heap snapshots the",
    "start": "316740",
    "end": "318780"
  },
  {
    "text": "capture process itself is split into two",
    "start": "318780",
    "end": "321000"
  },
  {
    "text": "phases a generation then serialization",
    "start": "321000",
    "end": "322979"
  },
  {
    "text": "we landed this patch Upstream to",
    "start": "322979",
    "end": "325080"
  },
  {
    "text": "introduce a new command in the flag",
    "start": "325080",
    "end": "326699"
  },
  {
    "text": "profile Heap snapshot to V8 which",
    "start": "326699",
    "end": "329460"
  },
  {
    "text": "enables logging of both generation and",
    "start": "329460",
    "end": "331380"
  },
  {
    "text": "serialization times using the flag we",
    "start": "331380",
    "end": "333720"
  },
  {
    "text": "learned something some interesting",
    "start": "333720",
    "end": "335160"
  },
  {
    "text": "things first we could observe the exact",
    "start": "335160",
    "end": "337320"
  },
  {
    "text": "amount of time V8 was spending on",
    "start": "337320",
    "end": "339180"
  },
  {
    "text": "generating each snapshot in our reduced",
    "start": "339180",
    "end": "341520"
  },
  {
    "text": "test case the first took five minutes",
    "start": "341520",
    "end": "343500"
  },
  {
    "text": "the second took eight minutes and each",
    "start": "343500",
    "end": "345120"
  },
  {
    "text": "subsequent snapshot kept taking longer",
    "start": "345120",
    "end": "347039"
  },
  {
    "text": "and longer nearly all of this time we uh",
    "start": "347039",
    "end": "349500"
  },
  {
    "text": "was spent in the generation phase okay",
    "start": "349500",
    "end": "352620"
  },
  {
    "text": "okay this allowed us to quantify the",
    "start": "352620",
    "end": "354479"
  },
  {
    "text": "time spent on Snapshot generation with a",
    "start": "354479",
    "end": "356100"
  },
  {
    "text": "trivial overhead which helped us to",
    "start": "356100",
    "end": "357539"
  },
  {
    "text": "isolate and identify similar slowdowns",
    "start": "357539",
    "end": "359160"
  },
  {
    "text": "in other widely used JavaScript",
    "start": "359160",
    "end": "360360"
  },
  {
    "text": "applications in particular eslint on",
    "start": "360360",
    "end": "363060"
  },
  {
    "text": "typescript so we",
    "start": "363060",
    "end": "364919"
  },
  {
    "text": "know the problem was not app specific",
    "start": "364919",
    "end": "367560"
  },
  {
    "text": "furthermore we found the problem",
    "start": "367560",
    "end": "368820"
  },
  {
    "text": "happened on both windows and Linux the",
    "start": "368820",
    "end": "370680"
  },
  {
    "text": "problem was also not platform specific",
    "start": "370680",
    "end": "373020"
  },
  {
    "text": "okay",
    "start": "373020",
    "end": "374100"
  },
  {
    "text": "okay we're getting something good here",
    "start": "374100",
    "end": "375780"
  },
  {
    "text": "we're getting something good here well",
    "start": "375780",
    "end": "377639"
  },
  {
    "text": "let's let's do some cooking first",
    "start": "377639",
    "end": "379139"
  },
  {
    "text": "optimization improves string storage uh",
    "start": "379139",
    "end": "381300"
  },
  {
    "text": "hashing to identify what was causing",
    "start": "381300",
    "end": "383160"
  },
  {
    "text": "excessive delay I profiled uh the",
    "start": "383160",
    "end": "385440"
  },
  {
    "text": "failing script using Windows performance",
    "start": "385440",
    "end": "386940"
  },
  {
    "text": "toolkit when I opened the recording with",
    "start": "386940",
    "end": "389280"
  },
  {
    "text": "Windows performance analyzer does he",
    "start": "389280",
    "end": "391080"
  },
  {
    "text": "work on Windows gross what I found was",
    "start": "391080",
    "end": "392940"
  },
  {
    "text": "this",
    "start": "392940",
    "end": "393720"
  },
  {
    "text": "string storage git entry one third of",
    "start": "393720",
    "end": "396660"
  },
  {
    "text": "the samples was spent in git entity okay",
    "start": "396660",
    "end": "399600"
  },
  {
    "text": "or git entry uh all right what goes on",
    "start": "399600",
    "end": "402360"
  },
  {
    "text": "here compute hash",
    "start": "402360",
    "end": "403860"
  },
  {
    "text": "interesting interesting",
    "start": "403860",
    "end": "405960"
  },
  {
    "text": "we literally just compute a hash and we",
    "start": "405960",
    "end": "407819"
  },
  {
    "text": "just do a name lookup okay",
    "start": "407819",
    "end": "409919"
  },
  {
    "text": "because this was run with a release",
    "start": "409919",
    "end": "411600"
  },
  {
    "text": "build the information of the inline",
    "start": "411600",
    "end": "412979"
  },
  {
    "text": "function uh calls were folded into",
    "start": "412979",
    "end": "414720"
  },
  {
    "text": "Strings get entry to figure out exactly",
    "start": "414720",
    "end": "416639"
  },
  {
    "text": "how much time was uh the inline",
    "start": "416639",
    "end": "418319"
  },
  {
    "text": "functions calls or we're taking I added",
    "start": "418319",
    "end": "420240"
  },
  {
    "text": "the source line number column to the",
    "start": "420240",
    "end": "422340"
  },
  {
    "text": "breakdown and found that most the time",
    "start": "422340",
    "end": "423660"
  },
  {
    "text": "was spent on line 182 called compute",
    "start": "423660",
    "end": "426120"
  },
  {
    "text": "string hash",
    "start": "426120",
    "end": "428819"
  },
  {
    "text": "is this starting to look like rolling",
    "start": "428819",
    "end": "430860"
  },
  {
    "text": "your own map is that what I'm seeing",
    "start": "430860",
    "end": "432419"
  },
  {
    "text": "right now",
    "start": "432419",
    "end": "433380"
  },
  {
    "text": "are we looking at like a roll your own",
    "start": "433380",
    "end": "434940"
  },
  {
    "text": "map problem here classic issue",
    "start": "434940",
    "end": "438060"
  },
  {
    "text": "um all right so looks like uh they",
    "start": "438060",
    "end": "439919"
  },
  {
    "text": "really like that one okay so over 30 of",
    "start": "439919",
    "end": "442319"
  },
  {
    "text": "the snapshot generation time was spent",
    "start": "442319",
    "end": "443580"
  },
  {
    "text": "on compute string hash but why well",
    "start": "443580",
    "end": "445979"
  },
  {
    "text": "let's first talk about string storages",
    "start": "445979",
    "end": "447360"
  },
  {
    "text": "or strings storage its purpose is to",
    "start": "447360",
    "end": "449880"
  },
  {
    "text": "store a unique copy of all strings that",
    "start": "449880",
    "end": "451740"
  },
  {
    "text": "will be used in the Heap snapshot",
    "start": "451740",
    "end": "453720"
  },
  {
    "text": "for fast access and avoiding duplicates",
    "start": "453720",
    "end": "455819"
  },
  {
    "text": "this class uses a hash map backed by an",
    "start": "455819",
    "end": "459000"
  },
  {
    "text": "array where collisions are handled by",
    "start": "459000",
    "end": "461340"
  },
  {
    "text": "storing elements in the next free",
    "start": "461340",
    "end": "462599"
  },
  {
    "text": "location of the array okay so standard",
    "start": "462599",
    "end": "465599"
  },
  {
    "text": "hashmap pretty much I started to suspect",
    "start": "465599",
    "end": "468479"
  },
  {
    "text": "that the problem could be caused by",
    "start": "468479",
    "end": "470039"
  },
  {
    "text": "collisions yep that's where I would",
    "start": "470039",
    "end": "471300"
  },
  {
    "text": "expect which could lead to Long searches",
    "start": "471300",
    "end": "473400"
  },
  {
    "text": "in the array so I added exhaustive logs",
    "start": "473400",
    "end": "475620"
  },
  {
    "text": "to see generated uh hash keys and on",
    "start": "475620",
    "end": "477960"
  },
  {
    "text": "inserts and see how far it was between",
    "start": "477960",
    "end": "479400"
  },
  {
    "text": "the expected position calculated from",
    "start": "479400",
    "end": "481259"
  },
  {
    "text": "the hash key and the actual position of",
    "start": "481259",
    "end": "482699"
  },
  {
    "text": "the entry ended up uh ended up in due to",
    "start": "482699",
    "end": "485280"
  },
  {
    "text": "collisions the log the things were not",
    "start": "485280",
    "end": "487620"
  },
  {
    "text": "right the offset of Many Items was over",
    "start": "487620",
    "end": "490259"
  },
  {
    "text": "20. and in the worst case the order of",
    "start": "490259",
    "end": "492720"
  },
  {
    "text": "thousands",
    "start": "492720",
    "end": "494160"
  },
  {
    "text": "so this sounds like what we have right",
    "start": "494160",
    "end": "496319"
  },
  {
    "text": "here this sounds like we got ourselves a",
    "start": "496319",
    "end": "498599"
  },
  {
    "text": "little bit of a collision here right",
    "start": "498599",
    "end": "499800"
  },
  {
    "text": "what is all this happening why are we",
    "start": "499800",
    "end": "501720"
  },
  {
    "text": "doing that",
    "start": "501720",
    "end": "503879"
  },
  {
    "text": "I know would I okay I use Windows on",
    "start": "503879",
    "end": "505800"
  },
  {
    "text": "stream I use Windows on stream come on",
    "start": "505800",
    "end": "508860"
  },
  {
    "text": "yep",
    "start": "508860",
    "end": "510360"
  },
  {
    "text": "let's see part of the problem was caused",
    "start": "510360",
    "end": "511919"
  },
  {
    "text": "by numeric strings especially strings",
    "start": "511919",
    "end": "513899"
  },
  {
    "text": "for a wide range of consecutive numbers",
    "start": "513899",
    "end": "515580"
  },
  {
    "text": "the hash key algorithm had two",
    "start": "515580",
    "end": "517320"
  },
  {
    "text": "implementations one from four numeric",
    "start": "517320",
    "end": "519419"
  },
  {
    "text": "strings and another for other strings",
    "start": "519419",
    "end": "521039"
  },
  {
    "text": "while the string hash function was quite",
    "start": "521039",
    "end": "523200"
  },
  {
    "text": "classical the implementation for the",
    "start": "523200",
    "end": "524940"
  },
  {
    "text": "numeric strings would uh would basically",
    "start": "524940",
    "end": "527820"
  },
  {
    "text": "return the value of the number prefixed",
    "start": "527820",
    "end": "529560"
  },
  {
    "text": "by the number of digits",
    "start": "529560",
    "end": "532519"
  },
  {
    "text": "nice the original hash kbit uh K value",
    "start": "533820",
    "end": "536820"
  },
  {
    "text": "bits 24 mask we're gonna shift this",
    "start": "536820",
    "end": "539880"
  },
  {
    "text": "thing all the way over minus one a bunch",
    "start": "539880",
    "end": "541800"
  },
  {
    "text": "of okay yep very beautiful so that would",
    "start": "541800",
    "end": "544080"
  },
  {
    "text": "be uh 23 ones right",
    "start": "544080",
    "end": "546839"
  },
  {
    "text": "no that's 24 ones numeric string length",
    "start": "546839",
    "end": "550800"
  },
  {
    "text": "shift that over or together with numeric",
    "start": "550800",
    "end": "553320"
  },
  {
    "text": "and mask",
    "start": "553320",
    "end": "555120"
  },
  {
    "text": "okay I I guess I don't understand the",
    "start": "555120",
    "end": "556980"
  },
  {
    "text": "problem here but I I",
    "start": "556980",
    "end": "559880"
  },
  {
    "text": "um",
    "start": "564180",
    "end": "565620"
  },
  {
    "text": "original hash okay",
    "start": "565620",
    "end": "569060"
  },
  {
    "text": "what is X",
    "start": "570360",
    "end": "572880"
  },
  {
    "text": "yeah I guess they're they're somewhat",
    "start": "572880",
    "end": "574320"
  },
  {
    "text": "close Okay it takes a tenfold it takes a",
    "start": "574320",
    "end": "576720"
  },
  {
    "text": "10 order magnitude to shift this large",
    "start": "576720",
    "end": "578459"
  },
  {
    "text": "key uh this function was problematic",
    "start": "578459",
    "end": "580500"
  },
  {
    "text": "some of the examples of the problems",
    "start": "580500",
    "end": "581640"
  },
  {
    "text": "with this hash function once we inserted",
    "start": "581640",
    "end": "584040"
  },
  {
    "text": "a string whose hash key value was small",
    "start": "584040",
    "end": "586260"
  },
  {
    "text": "uh was a small number we would run into",
    "start": "586260",
    "end": "588060"
  },
  {
    "text": "collisions when we tried to store",
    "start": "588060",
    "end": "589380"
  },
  {
    "text": "another number in that location and",
    "start": "589380",
    "end": "591899"
  },
  {
    "text": "there would be similar collisions if we",
    "start": "591899",
    "end": "594180"
  },
  {
    "text": "tried to store subsequent numbers uh",
    "start": "594180",
    "end": "596100"
  },
  {
    "text": "consecutively so is the storage Arena",
    "start": "596100",
    "end": "598440"
  },
  {
    "text": "just right here is that what they're",
    "start": "598440",
    "end": "600240"
  },
  {
    "text": "saying the storage arena is right here",
    "start": "600240",
    "end": "602399"
  },
  {
    "text": "because I would assume they'd do this",
    "start": "602399",
    "end": "603720"
  },
  {
    "text": "whole like this whole thing modulo the",
    "start": "603720",
    "end": "605339"
  },
  {
    "text": "size of the Maps underlying storage area",
    "start": "605339",
    "end": "609120"
  },
  {
    "text": "and so this would still map to a",
    "start": "609120",
    "end": "611040"
  },
  {
    "text": "different location than this which would",
    "start": "611040",
    "end": "612120"
  },
  {
    "text": "map to a different location this but",
    "start": "612120",
    "end": "613320"
  },
  {
    "text": "that must not be the case",
    "start": "613320",
    "end": "616160"
  },
  {
    "text": "all right once we've inserted a string",
    "start": "616200",
    "end": "617880"
  },
  {
    "text": "whose hash key value was a small number",
    "start": "617880",
    "end": "620399"
  },
  {
    "text": "we would run into a collisions when we",
    "start": "620399",
    "end": "622500"
  },
  {
    "text": "tried to store another number in that",
    "start": "622500",
    "end": "624600"
  },
  {
    "text": "location and there would be a similar",
    "start": "624600",
    "end": "626519"
  },
  {
    "text": "collisions if we tried to store",
    "start": "626519",
    "end": "627600"
  },
  {
    "text": "subsequent numbers uh consecutively yep",
    "start": "627600",
    "end": "629700"
  },
  {
    "text": "uh or even worse if there were already a",
    "start": "629700",
    "end": "632760"
  },
  {
    "text": "lot of consecutive numbers stored in a",
    "start": "632760",
    "end": "634320"
  },
  {
    "text": "map and we wanted to insert a string",
    "start": "634320",
    "end": "636360"
  },
  {
    "text": "whose hash key value was in that range",
    "start": "636360",
    "end": "638040"
  },
  {
    "text": "we had to move the entry along the",
    "start": "638040",
    "end": "640019"
  },
  {
    "text": "occupied locations ah yes yes I guess it",
    "start": "640019",
    "end": "642899"
  },
  {
    "text": "does create these big block problems",
    "start": "642899",
    "end": "644399"
  },
  {
    "text": "yeah what did I do to fix it the problem",
    "start": "644399",
    "end": "646380"
  },
  {
    "text": "comes mostly from numbers represented as",
    "start": "646380",
    "end": "648180"
  },
  {
    "text": "strings that would fall in consecutive",
    "start": "648180",
    "end": "649980"
  },
  {
    "text": "positions",
    "start": "649980",
    "end": "651300"
  },
  {
    "text": "I modified the hash function so we would",
    "start": "651300",
    "end": "653339"
  },
  {
    "text": "relocate the resulting hash value two",
    "start": "653339",
    "end": "655620"
  },
  {
    "text": "bits to the left the old multiply by",
    "start": "655620",
    "end": "657899"
  },
  {
    "text": "four situation people",
    "start": "657899",
    "end": "660060"
  },
  {
    "text": "yeah so it just it just simply yeah I",
    "start": "660060",
    "end": "662160"
  },
  {
    "text": "was about to say just simply hops by",
    "start": "662160",
    "end": "663660"
  },
  {
    "text": "four",
    "start": "663660",
    "end": "664680"
  },
  {
    "text": "right",
    "start": "664680",
    "end": "665760"
  },
  {
    "text": "so each pair of consecutive numbers uh",
    "start": "665760",
    "end": "667860"
  },
  {
    "text": "would uh we would introduce three free",
    "start": "667860",
    "end": "669959"
  },
  {
    "text": "positions between uh in between these",
    "start": "669959",
    "end": "672839"
  },
  {
    "text": "modifications was chosen because",
    "start": "672839",
    "end": "674100"
  },
  {
    "text": "empirical testing across several work",
    "start": "674100",
    "end": "675959"
  },
  {
    "text": "sets showed that it worked best for",
    "start": "675959",
    "end": "677640"
  },
  {
    "text": "minimizing collisions this hashing fix",
    "start": "677640",
    "end": "679680"
  },
  {
    "text": "has landed in V8",
    "start": "679680",
    "end": "681720"
  },
  {
    "text": "isn't it sometimes emotionally painful",
    "start": "681720",
    "end": "683940"
  },
  {
    "text": "to see that like something as simple as",
    "start": "683940",
    "end": "685980"
  },
  {
    "text": "this",
    "start": "685980",
    "end": "687000"
  },
  {
    "text": "can literally change the performance of",
    "start": "687000",
    "end": "689160"
  },
  {
    "text": "a system massively",
    "start": "689160",
    "end": "691560"
  },
  {
    "text": "it doesn't leave a lot of free room",
    "start": "691560",
    "end": "693000"
  },
  {
    "text": "between them but it does leave a lot of",
    "start": "693000",
    "end": "694680"
  },
  {
    "text": "free room between them you know what I",
    "start": "694680",
    "end": "695880"
  },
  {
    "text": "mean like it both doesn't and does",
    "start": "695880",
    "end": "697560"
  },
  {
    "text": "assuming that collisions are somewhat",
    "start": "697560",
    "end": "700140"
  },
  {
    "text": "rare",
    "start": "700140",
    "end": "701459"
  },
  {
    "text": "this leads",
    "start": "701459",
    "end": "703019"
  },
  {
    "text": "75 you know it's it's a 4X the amount of",
    "start": "703019",
    "end": "705660"
  },
  {
    "text": "space in between so collisions should",
    "start": "705660",
    "end": "707339"
  },
  {
    "text": "happen a lot lost less then but if you",
    "start": "707339",
    "end": "709320"
  },
  {
    "text": "had a collision at all with a bunch of",
    "start": "709320",
    "end": "711000"
  },
  {
    "text": "consecutive numbers you'd have to travel",
    "start": "711000",
    "end": "712260"
  },
  {
    "text": "that entire consecutive number right so",
    "start": "712260",
    "end": "714899"
  },
  {
    "text": "it makes sense in the end but still wild",
    "start": "714899",
    "end": "718200"
  },
  {
    "text": "after fixing the hashing we re-profiled",
    "start": "718200",
    "end": "720600"
  },
  {
    "text": "and found further optimization",
    "start": "720600",
    "end": "721620"
  },
  {
    "text": "opportunity that would reduce",
    "start": "721620",
    "end": "722519"
  },
  {
    "text": "significant part of the overhead when",
    "start": "722519",
    "end": "724200"
  },
  {
    "text": "generating a heap snapshot for each",
    "start": "724200",
    "end": "725700"
  },
  {
    "text": "function in the Heap VA tries to record",
    "start": "725700",
    "end": "727500"
  },
  {
    "text": "its start position in a pair of line uh",
    "start": "727500",
    "end": "730380"
  },
  {
    "text": "and column numbers this information can",
    "start": "730380",
    "end": "732180"
  },
  {
    "text": "be used to buy the dev tools to display",
    "start": "732180",
    "end": "733500"
  },
  {
    "text": "a link to the source code of the",
    "start": "733500",
    "end": "735060"
  },
  {
    "text": "function during usual compilation",
    "start": "735060",
    "end": "736740"
  },
  {
    "text": "however V8 Only Stores the start",
    "start": "736740",
    "end": "738480"
  },
  {
    "text": "position of each function in the form of",
    "start": "738480",
    "end": "740519"
  },
  {
    "text": "a linear offset from the beginning of",
    "start": "740519",
    "end": "742260"
  },
  {
    "text": "the script oh no oh yes please tell me",
    "start": "742260",
    "end": "745860"
  },
  {
    "text": "please tell me to calculate the line and",
    "start": "745860",
    "end": "748260"
  },
  {
    "text": "column numbers based on the linear",
    "start": "748260",
    "end": "749820"
  },
  {
    "text": "offset V8 needs to Traverse the whole",
    "start": "749820",
    "end": "751440"
  },
  {
    "text": "script and record where the line breaks",
    "start": "751440",
    "end": "753660"
  },
  {
    "text": "are this calculation can be very",
    "start": "753660",
    "end": "755220"
  },
  {
    "text": "expensive uh what did I call it did I",
    "start": "755220",
    "end": "758700"
  },
  {
    "text": "call it that",
    "start": "758700",
    "end": "760500"
  },
  {
    "text": "is it called LS on this one oh it is",
    "start": "760500",
    "end": "763620"
  },
  {
    "text": "oh it is look do you like that little",
    "start": "763620",
    "end": "765600"
  },
  {
    "text": "look at this warning I'm doing right",
    "start": "765600",
    "end": "766860"
  },
  {
    "text": "here look how cool that little warning",
    "start": "766860",
    "end": "768000"
  },
  {
    "text": "is here's the funny part uh if I open up",
    "start": "768000",
    "end": "770820"
  },
  {
    "text": "utils",
    "start": "770820",
    "end": "771959"
  },
  {
    "text": "whoopsies",
    "start": "771959",
    "end": "773639"
  },
  {
    "text": "uh you didn't I call you what did I call",
    "start": "773639",
    "end": "775800"
  },
  {
    "text": "it here uh bite",
    "start": "775800",
    "end": "779779"
  },
  {
    "text": "literally doing the exact same thing",
    "start": "782519",
    "end": "785220"
  },
  {
    "text": "given a position I have to hand it the",
    "start": "785220",
    "end": "787560"
  },
  {
    "text": "source plus a bite position and walk the",
    "start": "787560",
    "end": "791040"
  },
  {
    "text": "whole damn thing",
    "start": "791040",
    "end": "792600"
  },
  {
    "text": "look at that",
    "start": "792600",
    "end": "794220"
  },
  {
    "text": "I'm doing the exact same thing oh the",
    "start": "794220",
    "end": "797639"
  },
  {
    "text": "feels",
    "start": "797639",
    "end": "800300"
  },
  {
    "text": "ah",
    "start": "801240",
    "end": "803160"
  },
  {
    "text": "but I did I I mean I did test mine and I",
    "start": "803160",
    "end": "805320"
  },
  {
    "text": "was able to get it was pretty fast I I",
    "start": "805320",
    "end": "807120"
  },
  {
    "text": "mean obviously",
    "start": "807120",
    "end": "808440"
  },
  {
    "text": "I'm not doing what they're doing and I'm",
    "start": "808440",
    "end": "810300"
  },
  {
    "text": "not calculating every piece of memory I",
    "start": "810300",
    "end": "812160"
  },
  {
    "text": "have very few warnings but nonetheless",
    "start": "812160",
    "end": "813480"
  },
  {
    "text": "very funny normally after V8 uh finishes",
    "start": "813480",
    "end": "816060"
  },
  {
    "text": "calculating the offsets of line breaks",
    "start": "816060",
    "end": "817860"
  },
  {
    "text": "in a script it caches them in a newly",
    "start": "817860",
    "end": "819899"
  },
  {
    "text": "allocated array attached to the script",
    "start": "819899",
    "end": "821700"
  },
  {
    "text": "unfortunately the snapshot implementing",
    "start": "821700",
    "end": "823740"
  },
  {
    "text": "cannot modify the Heap when traversing",
    "start": "823740",
    "end": "825360"
  },
  {
    "text": "it so the newly Crea the newly",
    "start": "825360",
    "end": "827459"
  },
  {
    "text": "calculated line information cannot be",
    "start": "827459",
    "end": "829019"
  },
  {
    "text": "cached let's go the solution before",
    "start": "829019",
    "end": "832860"
  },
  {
    "text": "generating the Heap snapshot we now",
    "start": "832860",
    "end": "834480"
  },
  {
    "text": "iterate over all the scripts in VA",
    "start": "834480",
    "end": "836760"
  },
  {
    "text": "contacts to compute and cache the",
    "start": "836760",
    "end": "838500"
  },
  {
    "text": "offsets of the line breaks as this is",
    "start": "838500",
    "end": "841320"
  },
  {
    "text": "not done when we Traverse the Heap for",
    "start": "841320",
    "end": "843240"
  },
  {
    "text": "Heap snapshot generation uh it is still",
    "start": "843240",
    "end": "845820"
  },
  {
    "text": "possible to modify the Heap and store",
    "start": "845820",
    "end": "847680"
  },
  {
    "text": "this uh Source line positions as a cache",
    "start": "847680",
    "end": "850740"
  },
  {
    "text": "okay the fix for caching of the line",
    "start": "850740",
    "end": "852540"
  },
  {
    "text": "breaks offset has also landed in V8 did",
    "start": "852540",
    "end": "855060"
  },
  {
    "text": "we make it fast after enabling both",
    "start": "855060",
    "end": "856860"
  },
  {
    "text": "fixes we repo profiled both of our fixes",
    "start": "856860",
    "end": "859320"
  },
  {
    "text": "only affect snapshot generation time so",
    "start": "859320",
    "end": "861660"
  },
  {
    "text": "as expected snapshot serialization times",
    "start": "861660",
    "end": "863700"
  },
  {
    "text": "were unaffected when operating on JS",
    "start": "863700",
    "end": "865920"
  },
  {
    "text": "programs containing development",
    "start": "865920",
    "end": "867660"
  },
  {
    "text": "development generating generating time",
    "start": "867660",
    "end": "870120"
  },
  {
    "text": "is 50 faster production.js generating",
    "start": "870120",
    "end": "872880"
  },
  {
    "text": "times is 90 faster that should make",
    "start": "872880",
    "end": "875100"
  },
  {
    "text": "sense because obviously there's in fact",
    "start": "875100",
    "end": "876899"
  },
  {
    "text": "did you know that if you take a node.js",
    "start": "876899",
    "end": "878880"
  },
  {
    "text": "program",
    "start": "878880",
    "end": "879899"
  },
  {
    "text": "when you Minify it you just get better",
    "start": "879899",
    "end": "882480"
  },
  {
    "text": "performance right",
    "start": "882480",
    "end": "885240"
  },
  {
    "text": "it's wild it's because you got to",
    "start": "885240",
    "end": "886920"
  },
  {
    "text": "remember that there is this like whole",
    "start": "886920",
    "end": "888180"
  },
  {
    "text": "parser and interpreter blah to the blah",
    "start": "888180",
    "end": "890040"
  },
  {
    "text": "blah blah uh why was there a massive",
    "start": "890040",
    "end": "891779"
  },
  {
    "text": "difference between production and",
    "start": "891779",
    "end": "892860"
  },
  {
    "text": "development code the production code is",
    "start": "892860",
    "end": "894240"
  },
  {
    "text": "optimized by bundling and minification",
    "start": "894240",
    "end": "896160"
  },
  {
    "text": "so there are fewer JS files and these",
    "start": "896160",
    "end": "898740"
  },
  {
    "text": "files tend to be large it takes longer",
    "start": "898740",
    "end": "901199"
  },
  {
    "text": "to calculate Source line positions for",
    "start": "901199",
    "end": "902820"
  },
  {
    "text": "these large files so they benefited the",
    "start": "902820",
    "end": "905100"
  },
  {
    "text": "most when we can cache The Source",
    "start": "905100",
    "end": "906959"
  },
  {
    "text": "position and avoid repeating",
    "start": "906959",
    "end": "908160"
  },
  {
    "text": "calculations the optimization we were",
    "start": "908160",
    "end": "910199"
  },
  {
    "text": "validated on both windows and Linux",
    "start": "910199",
    "end": "911579"
  },
  {
    "text": "Target environment for the particular",
    "start": "911579",
    "end": "912839"
  },
  {
    "text": "challenging problem originally faced by",
    "start": "912839",
    "end": "914339"
  },
  {
    "text": "the Bloomberg Engineers the total",
    "start": "914339",
    "end": "916079"
  },
  {
    "text": "end-to-end Time Capture 100 megabyte",
    "start": "916079",
    "end": "917940"
  },
  {
    "text": "snapshot was reduced uh a painful 10",
    "start": "917940",
    "end": "920459"
  },
  {
    "text": "minutes down to a very pleasant six",
    "start": "920459",
    "end": "922500"
  },
  {
    "text": "seconds",
    "start": "922500",
    "end": "924600"
  },
  {
    "text": "ah",
    "start": "924600",
    "end": "926120"
  },
  {
    "text": "that is awesome",
    "start": "926120",
    "end": "928680"
  },
  {
    "text": "that is great well it's not it's it's",
    "start": "928680",
    "end": "931079"
  },
  {
    "text": "not six seconds to write a hundred",
    "start": "931079",
    "end": "932820"
  },
  {
    "text": "megabytes it's six seconds to find",
    "start": "932820",
    "end": "935880"
  },
  {
    "text": "everything that's in memory gift it all",
    "start": "935880",
    "end": "938339"
  },
  {
    "text": "and then write it to a file right so you",
    "start": "938339",
    "end": "941040"
  },
  {
    "text": "gotta remember the writing to the file",
    "start": "941040",
    "end": "942480"
  },
  {
    "text": "Parts probably really fast right that's",
    "start": "942480",
    "end": "944339"
  },
  {
    "text": "probably you don't even notice it fast",
    "start": "944339",
    "end": "946019"
  },
  {
    "text": "it's all the other stuff yeah it's a",
    "start": "946019",
    "end": "949139"
  },
  {
    "text": "noticeable Improvement you know I wonder",
    "start": "949139",
    "end": "951420"
  },
  {
    "text": "how they I wonder what uh or how they",
    "start": "951420",
    "end": "954120"
  },
  {
    "text": "felt upon releasing the gains probably",
    "start": "954120",
    "end": "955560"
  },
  {
    "text": "felt pretty good uh the optimizations",
    "start": "955560",
    "end": "958139"
  },
  {
    "text": "are generic wins that we expect to be",
    "start": "958139",
    "end": "959699"
  },
  {
    "text": "widely applicable to anyone performing",
    "start": "959699",
    "end": "961139"
  },
  {
    "text": "memory debugging on V8 node.js and",
    "start": "961139",
    "end": "963000"
  },
  {
    "text": "chromium these wins were shipped in V8",
    "start": "963000",
    "end": "964860"
  },
  {
    "text": "11.",
    "start": "964860",
    "end": "966019"
  },
  {
    "text": "what's next first it should it would be",
    "start": "966019",
    "end": "968339"
  },
  {
    "text": "useful for node to accept the new come",
    "start": "968339",
    "end": "970740"
  },
  {
    "text": "on node get your together node uh",
    "start": "970740",
    "end": "974100"
  },
  {
    "text": "flake and node options yes in some use",
    "start": "974100",
    "end": "976740"
  },
  {
    "text": "cases users cannot control the command",
    "start": "976740",
    "end": "978420"
  },
  {
    "text": "line options passed to node.js directly",
    "start": "978420",
    "end": "980339"
  },
  {
    "text": "and to have a con and have to configure",
    "start": "980339",
    "end": "981959"
  },
  {
    "text": "them through the environment variable",
    "start": "981959",
    "end": "983100"
  },
  {
    "text": "node options today node.js filters V8",
    "start": "983100",
    "end": "986040"
  },
  {
    "text": "command line options uh set in the",
    "start": "986040",
    "end": "988139"
  },
  {
    "text": "environment variable people and only",
    "start": "988139",
    "end": "989699"
  },
  {
    "text": "allows a known subset which could make",
    "start": "989699",
    "end": "991860"
  },
  {
    "text": "it harder to test new V8 flags on",
    "start": "991860",
    "end": "993899"
  },
  {
    "text": "node.js as what yeah okay well just work",
    "start": "993899",
    "end": "995880"
  },
  {
    "text": "with them I'm sure you can get this",
    "start": "995880",
    "end": "996959"
  },
  {
    "text": "going right uh today let's information",
    "start": "996959",
    "end": "999360"
  },
  {
    "text": "accuracy and snapshots can be improved",
    "start": "999360",
    "end": "1001100"
  },
  {
    "text": "further today each script source code",
    "start": "1001100",
    "end": "1003079"
  },
  {
    "text": "line information is stored uh",
    "start": "1003079",
    "end": "1005060"
  },
  {
    "text": "representation the V8 Heap itself and",
    "start": "1005060",
    "end": "1007459"
  },
  {
    "text": "that's a problem because we want to",
    "start": "1007459",
    "end": "1008779"
  },
  {
    "text": "measure the heat precisely without the",
    "start": "1008779",
    "end": "1010639"
  },
  {
    "text": "performance measurement overhead",
    "start": "1010639",
    "end": "1011660"
  },
  {
    "text": "affecting the subject we are observing",
    "start": "1011660",
    "end": "1013699"
  },
  {
    "text": "yep it's true that means when you do",
    "start": "1013699",
    "end": "1015800"
  },
  {
    "text": "this you take all that extra information",
    "start": "1015800",
    "end": "1017180"
  },
  {
    "text": "you add I mean really you're probably",
    "start": "1017180",
    "end": "1019279"
  },
  {
    "text": "adding",
    "start": "1019279",
    "end": "1021019"
  },
  {
    "text": "50k worth of data Maybe maybe 100K who",
    "start": "1021019",
    "end": "1023720"
  },
  {
    "text": "knows but it's probably nothing",
    "start": "1023720",
    "end": "1024740"
  },
  {
    "text": "comparatively to the crappy amount of",
    "start": "1024740",
    "end": "1026720"
  },
  {
    "text": "objects you've created in react ideally",
    "start": "1026720",
    "end": "1028579"
  },
  {
    "text": "we would store the cache of line",
    "start": "1028579",
    "end": "1030380"
  },
  {
    "text": "information outside the VA Heap in order",
    "start": "1030380",
    "end": "1032240"
  },
  {
    "text": "to make the Heap snapshots information",
    "start": "1032240",
    "end": "1033500"
  },
  {
    "text": "accurate finally now that we've improved",
    "start": "1033500",
    "end": "1036079"
  },
  {
    "text": "the generation phase the biggest cost is",
    "start": "1036079",
    "end": "1037760"
  },
  {
    "text": "the serialization phase further analysis",
    "start": "1037760",
    "end": "1039438"
  },
  {
    "text": "May reveal new optimization",
    "start": "1039439",
    "end": "1040640"
  },
  {
    "text": "opportunities and serialization",
    "start": "1040640",
    "end": "1041959"
  },
  {
    "text": "absolutely very cool awesome uh awesome",
    "start": "1041959",
    "end": "1045918"
  },
  {
    "text": "job Engineers love it great times this",
    "start": "1045919",
    "end": "1048799"
  },
  {
    "text": "was great Jose thanks for posting this",
    "start": "1048799",
    "end": "1051100"
  },
  {
    "text": "appreciate this this was super cool it's",
    "start": "1051100",
    "end": "1054500"
  },
  {
    "text": "I mean I think at the end of the day",
    "start": "1054500",
    "end": "1056419"
  },
  {
    "text": "it's always emotionally painful to",
    "start": "1056419",
    "end": "1058460"
  },
  {
    "text": "discover the uh to discover some of the",
    "start": "1058460",
    "end": "1061580"
  },
  {
    "text": "like solutions to bad performance",
    "start": "1061580",
    "end": "1063380"
  },
  {
    "text": "sometimes they're as stupid as that",
    "start": "1063380",
    "end": "1066799"
  },
  {
    "text": "right cash Collision in a map is just",
    "start": "1066799",
    "end": "1069740"
  },
  {
    "text": "like a huge problem and look at it go",
    "start": "1069740",
    "end": "1072140"
  },
  {
    "text": "right uh I also think that it's uh",
    "start": "1072140",
    "end": "1074539"
  },
  {
    "text": "hilarious that the other one is don't do",
    "start": "1074539",
    "end": "1076580"
  },
  {
    "text": "work you don't have to do memoization",
    "start": "1076580",
    "end": "1078559"
  },
  {
    "text": "can be effective so when you're doing",
    "start": "1078559",
    "end": "1081140"
  },
  {
    "text": "this right here A whole bunch",
    "start": "1081140",
    "end": "1082900"
  },
  {
    "text": "memoization makes sense right because",
    "start": "1082900",
    "end": "1085280"
  },
  {
    "text": "you can just do like a really fast like",
    "start": "1085280",
    "end": "1086840"
  },
  {
    "text": "B tree lookup or some sort of some sort",
    "start": "1086840",
    "end": "1089240"
  },
  {
    "text": "of ranged binary search that's amazing",
    "start": "1089240",
    "end": "1091760"
  },
  {
    "text": "right",
    "start": "1091760",
    "end": "1092840"
  },
  {
    "text": "so",
    "start": "1092840",
    "end": "1094039"
  },
  {
    "text": "I like it I like it a lot this is",
    "start": "1094039",
    "end": "1096500"
  },
  {
    "text": "beautiful thank you very much hope",
    "start": "1096500",
    "end": "1098480"
  },
  {
    "text": "they're not using Json they are using",
    "start": "1098480",
    "end": "1099980"
  },
  {
    "text": "Json they're using Json uh because the",
    "start": "1099980",
    "end": "1102620"
  },
  {
    "text": "Heap snapshot is like a just a giant",
    "start": "1102620",
    "end": "1104539"
  },
  {
    "text": "Json blob uh unless if it's a different",
    "start": "1104539",
    "end": "1107840"
  },
  {
    "text": "Heap snapshot these days uh what's the",
    "start": "1107840",
    "end": "1110000"
  },
  {
    "text": "link for the article it's on the VA Dev",
    "start": "1110000",
    "end": "1112160"
  },
  {
    "text": "blog I'll link it in the video of course",
    "start": "1112160",
    "end": "1113780"
  },
  {
    "text": "but great great this was great the name",
    "start": "1113780",
    "end": "1118480"
  },
  {
    "text": "the V8 again",
    "start": "1118480",
    "end": "1122080"
  }
]