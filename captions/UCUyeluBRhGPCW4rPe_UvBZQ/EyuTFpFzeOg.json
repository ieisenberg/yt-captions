[
  {
    "text": "hey go 1.23 release notes okay so there is something in here that I actually did want to look at I really wanted to play",
    "start": "80",
    "end": "5920"
  },
  {
    "text": "with this right here so we're going to look at this for a second because obviously go has been making some big moves ever since I think what was it",
    "start": "5920",
    "end": "12679"
  },
  {
    "text": "1.18 I think that's when generics happened I feel like go since 1.18 has",
    "start": "12679",
    "end": "18080"
  },
  {
    "text": "been really moving and is actually making some big uh changes to the",
    "start": "18080",
    "end": "23119"
  },
  {
    "text": "language in pretty meaningful ways the latest go release version 1.23 arrived 6 months after go 1.22 most of its changes",
    "start": "23119",
    "end": "30000"
  },
  {
    "text": "are the implementation of the tool chain runtime in libraries as always the release maintains the go1 promise of",
    "start": "30000",
    "end": "35840"
  },
  {
    "text": "compatibility we expect almost all of go programs to continue to compile and run as before there was one thing that",
    "start": "35840",
    "end": "41160"
  },
  {
    "text": "people got really upset about in this whole go thing and I think they're specifically calling this out due to people getting really really pissed off",
    "start": "41160",
    "end": "47760"
  },
  {
    "text": "but I would say people got upset because the world's longest standing bug and",
    "start": "47760",
    "end": "52840"
  },
  {
    "text": "Go's refusal to just move as fast as they have been caused a bug to become a feature for a long time which is for",
    "start": "52840",
    "end": "59239"
  },
  {
    "text": "those that don't know is that in a for Loop it would use the same piece of",
    "start": "59239",
    "end": "64320"
  },
  {
    "text": "memory and update it as you go through a for Loop which means that if you",
    "start": "64320",
    "end": "69360"
  },
  {
    "text": "reference the the variable that's coming out of a range expression it would actually change out of underneath you I",
    "start": "69360",
    "end": "75200"
  },
  {
    "text": "got hit by it on stream like I thought I was using the right version of go turns out I wasn't using the right version of",
    "start": "75200",
    "end": "80360"
  },
  {
    "text": "go which allow which is this thing that allows it so that if you're ranging over a like over a table or over a a list you",
    "start": "80360",
    "end": "88880"
  },
  {
    "text": "won't actually or SCE I guess in language uh it won't it will use new memory locations for each one of them",
    "start": "88880",
    "end": "95000"
  },
  {
    "text": "and so that way if you reference it you won't get exploded it was pretty great and now that I know that it it just",
    "start": "95000",
    "end": "100079"
  },
  {
    "text": "makes it makes me kind of laugh all right so here we go so this is the one that I was very excited about right here",
    "start": "100079",
    "end": "105520"
  },
  {
    "text": "is this one go 1.23 makes the go 1.22 range over function experiment a part of the language the range clause in a four",
    "start": "105520",
    "end": "112280"
  },
  {
    "text": "Range Loop now accepts iterator functions of the following types okay",
    "start": "112280",
    "end": "117680"
  },
  {
    "text": "this going to be kind of interesting as far as range Expressions calls of the iterator argument function produce the",
    "start": "117680",
    "end": "123000"
  },
  {
    "text": "iteration values for the four Range Loop for details see the iter package and documentation of the language spec for",
    "start": "123000",
    "end": "129039"
  },
  {
    "text": "motivation to see the 2022 range of respect discussion go one let's see okay so let's they also have generic type",
    "start": "129039",
    "end": "135319"
  },
  {
    "text": "aliases I'm not as interested in that as I am in this so let's actually build I actually wanted to look at this and build an iterator let's build an",
    "start": "135319",
    "end": "142760"
  },
  {
    "text": "iterator and go because I heard it's kind of I heard it's generally kind of gross all right so let's look at how",
    "start": "142760",
    "end": "148959"
  },
  {
    "text": "this actual ranging iteration business works because I actually did want to see this I really did want to see how this",
    "start": "148959",
    "end": "155360"
  },
  {
    "text": "thing works okay",
    "start": "155360",
    "end": "158360"
  },
  {
    "text": "so let's make a map function right a map function takes in",
    "start": "160480",
    "end": "167599"
  },
  {
    "text": "any I I'd assume I had to do i' I assume I have to do like an in and an out and",
    "start": "168400",
    "end": "174720"
  },
  {
    "text": "I'd want to do an in",
    "start": "174720",
    "end": "178599"
  },
  {
    "text": "oh do you do a boing do you do a a Bo a",
    "start": "180280",
    "end": "185440"
  },
  {
    "text": "booling oh you can't you can't really map it like that can",
    "start": "185440",
    "end": "190519"
  },
  {
    "text": "you oh yeah of course I'm doing a map in my head I'm doing the wrong thing here okay so I do an",
    "start": "190519",
    "end": "196840"
  },
  {
    "text": "in and so we do a yield function so I don't really understand what uh yield okay so yield is the name of the funk",
    "start": "196959",
    "end": "203239"
  },
  {
    "text": "being passed in right that's a little bit confusing that's why you use a yield right here stop booing me B Boolean",
    "start": "203239",
    "end": "211799"
  },
  {
    "text": "Boolean so okay so we are a funk that takes in an array and we take in a function as an",
    "start": "211799",
    "end": "219599"
  },
  {
    "text": "argument that is an INT which is an index and the thing we want to",
    "start": "219599",
    "end": "225319"
  },
  {
    "text": "return and we return a function called yield okay okay hold on hold on we are a",
    "start": "225319",
    "end": "231080"
  },
  {
    "text": "funk that returns a funk that takes in a funk okay there there we go I got it we're a funk that take that returns a",
    "start": "231080",
    "end": "237400"
  },
  {
    "text": "funk that takes in a funk so we return the funk fun yield that takes in a or we return the function that takes in the",
    "start": "237400",
    "end": "243079"
  },
  {
    "text": "function yield then we go over our collection and we yield this out okay there we go now we understand",
    "start": "243079",
    "end": "251920"
  },
  {
    "text": "it so what I'm going to do is I'm going to go like this I'm going to minus one can I",
    "start": "251920",
    "end": "257680"
  },
  {
    "text": "uh here can I just go like this can I take out the genericize",
    "start": "257680",
    "end": "263919"
  },
  {
    "text": "version of it and just have it as an inray for now right I think that should work I think that does work work and so",
    "start": "263919",
    "end": "271160"
  },
  {
    "text": "let's just have something that literally goes over that so I should be able to go like this I should theoretically be able",
    "start": "271160",
    "end": "276520"
  },
  {
    "text": "to go uh Fu equals uh int",
    "start": "276520",
    "end": "282520"
  },
  {
    "text": "1 2 3 for uh let's",
    "start": "282520",
    "end": "290560"
  },
  {
    "text": "see V equals range or can I just go map is it is it",
    "start": "290560",
    "end": "298199"
  },
  {
    "text": "range map how do how do I even use this range slice backwards okay so it is",
    "start": "298199",
    "end": "304000"
  },
  {
    "text": "okay so I should be able to go map Fu did I do that right cannot range over",
    "start": "304000",
    "end": "310080"
  },
  {
    "text": "map invalid range expression",
    "start": "310080",
    "end": "314599"
  },
  {
    "text": "why why por Maria do range all right is it because I didn't make is it because",
    "start": "315880",
    "end": "321880"
  },
  {
    "text": "it's not a generic is that really the",
    "start": "321880",
    "end": "326680"
  },
  {
    "text": "problem does it have to be gen genericized or am I just too stupid to",
    "start": "327720",
    "end": "333919"
  },
  {
    "text": "use this thing LSP does not support it",
    "start": "333919",
    "end": "342120"
  },
  {
    "text": "oh I really hope that's not the case that better not be the case don't I I",
    "start": "343720",
    "end": "349800"
  },
  {
    "text": "refuse I refuse to believe that I refuse go run command main go",
    "start": "349800",
    "end": "357800"
  },
  {
    "text": "I'm confused as to how I got these values here hold on format uh let's see",
    "start": "385120",
    "end": "392440"
  },
  {
    "text": "format yep uh print f um all right I",
    "start": "392440",
    "end": "397820"
  },
  {
    "text": "[Music] V there we go I got a little bit confused over",
    "start": "397820",
    "end": "403039"
  },
  {
    "text": "that wait why did it say why did it say that why am I getting extras I'm not",
    "start": "403039",
    "end": "408840"
  },
  {
    "text": "getting Oh wrong thing sorry I I've been in Zig for too long I've been in Zig for too long I forget that you have to you",
    "start": "408840",
    "end": "414479"
  },
  {
    "text": "have to hit him with the D all right so I equals 2 oh oh this goes backward that's right I'm I'm",
    "start": "414479",
    "end": "420440"
  },
  {
    "text": "ranging backwards to the list and minusing one I forgot that I'm I'm going backwards huh okay Big D yeah we got the",
    "start": "420440",
    "end": "427840"
  },
  {
    "text": "D all right so there you go we've range functioned all right so here's here's",
    "start": "427840",
    "end": "433960"
  },
  {
    "text": "what I'm going to say I feel like it would have been way cooler to have some sort of like uh some sort of uh what's",
    "start": "433960",
    "end": "440479"
  },
  {
    "text": "it called type iterator uh interface that just simply had the word",
    "start": "440479",
    "end": "446240"
  },
  {
    "text": "next which uh should return out you know or maybe it could have different types",
    "start": "446240",
    "end": "452360"
  },
  {
    "text": "right some sort of something that returns out something like that I'm not really exactly sure how they do it the",
    "start": "452360",
    "end": "457680"
  },
  {
    "text": "same pretty much the same thing as this thing right keep on yielding and then return eventually you're thinking in",
    "start": "457680",
    "end": "463280"
  },
  {
    "text": "Rust but I'm also thinking in go it would be nice to be able to have something that H that was a little bit",
    "start": "463280",
    "end": "468599"
  },
  {
    "text": "more I'm not exactly sure how I'd have to think about this interface more because this isn't quite right you'd have you know it would keep on calling",
    "start": "468599",
    "end": "475000"
  },
  {
    "text": "next and so you wouldn't have to yield yourself and you could just use state I I don't know why because I mean they do",
    "start": "475000",
    "end": "481159"
  },
  {
    "text": "that for writers right for those that don't know like uh if you go to if you go to uh is it IO that has writer yeah",
    "start": "481159",
    "end": "488720"
  },
  {
    "text": "you have like you have the writer interface you know so they already have ideas like this that you can iterate on",
    "start": "488720",
    "end": "495240"
  },
  {
    "text": "top of go ranges seem funny yeah it it just seems super funny and I'm not sure how I feel about it it just feels",
    "start": "495240",
    "end": "501840"
  },
  {
    "text": "like I'm not going to lie this kind of feels like crap I'd rather create an object that keeps track of its state and",
    "start": "501840",
    "end": "508479"
  },
  {
    "text": "then you could call next on and it would return whatever out I feel like that's much easier than this this feels confusing and so my guess is the reason",
    "start": "508479",
    "end": "516159"
  },
  {
    "text": "why this exists this way is probably a it's really easy to compile into I assume that it it makes the the code",
    "start": "516159",
    "end": "523399"
  },
  {
    "text": "very you know very simple but B my guess also is that it's so hard to use that",
    "start": "523399",
    "end": "529680"
  },
  {
    "text": "you won't use it much and maybe I'm missing like a play where how they did generics that this will become a lot",
    "start": "529680",
    "end": "535480"
  },
  {
    "text": "easier once you have generic like once I cuz I don't really understand go generics I honestly never use them",
    "start": "535480",
    "end": "540760"
  },
  {
    "text": "because of structural typing right this feels like the polyfills in J yes it does it feels like the polyfills seems",
    "start": "540760",
    "end": "546279"
  },
  {
    "text": "convoluted it see honestly as someone who's programmed a whole bunch like for many many many many many many many many",
    "start": "546279",
    "end": "553560"
  },
  {
    "text": "years and I feel very Adept at programming this feels hard to like understand the fact that I have to yield",
    "start": "553560",
    "end": "560079"
  },
  {
    "text": "something out to be told that it actually broke from the loop seems crazy it kind of seems like that should be",
    "start": "560079",
    "end": "566240"
  },
  {
    "text": "handled by it calling next not by me seeing if it was broken right because that's why you have this yield right",
    "start": "566240",
    "end": "572240"
  },
  {
    "text": "here is because this yield is actually to prevent um like a",
    "start": "572240",
    "end": "577279"
  },
  {
    "text": "break so it just feels it just feels funny right because if I go like this if V equals 1 then I'm going to go like",
    "start": "577279",
    "end": "583320"
  },
  {
    "text": "this format uh print uh F I have broken",
    "start": "583320",
    "end": "589680"
  },
  {
    "text": "right uh returning uh returning from Loop there we go and so if I go right",
    "start": "589680",
    "end": "596440"
  },
  {
    "text": "here and do the exact same thing you'll notice that it has right here so you can see it you can see it in line so it operates exactly how you would expect it",
    "start": "596440",
    "end": "602680"
  },
  {
    "text": "to operate but I I mean I don't often think go misses much I think go is a",
    "start": "602680",
    "end": "609040"
  },
  {
    "text": "great language designed for what it what it's supposed to be a simple language able to move quickly in and you just",
    "start": "609040",
    "end": "615440"
  },
  {
    "text": "rely on simple features and you rely on structural typing I think that's the big thing about go is that you just",
    "start": "615440",
    "end": "621160"
  },
  {
    "text": "structural type things and it just makes it really really simple and it just makes it good like I don't want to look",
    "start": "621160",
    "end": "626519"
  },
  {
    "text": "at code like this I just don't what's yield yield is just the name of the function which also feels weird I",
    "start": "626519",
    "end": "632480"
  },
  {
    "text": "didn't realize that you could actually name I mean I should have realized this it's so stupid you this is just an",
    "start": "632480",
    "end": "639959"
  },
  {
    "text": "argument but it feels like a weirdly named function but it's just an argument right it would become more clear if I typed it like this here right now you",
    "start": "639959",
    "end": "648160"
  },
  {
    "text": "can see this it's just a fun it's just a yield named int right that's all it is",
    "start": "648160",
    "end": "653399"
  },
  {
    "text": "it's just that it just looks funny right it's just that's all it is is that's just an argument",
    "start": "653399",
    "end": "660079"
  },
  {
    "text": "right it is confusing took me a while to realize that yield was not a reserved word same here it took me a while as",
    "start": "660079",
    "end": "665680"
  },
  {
    "text": "well just because again when you overload a word it can be very hard three funks the first Funk is the Constructor second fun is the iterator",
    "start": "665680",
    "end": "672200"
  },
  {
    "text": "third fun is the call back to the loop yes exactly I would much rather I for me it just seems like I'd rather have like",
    "start": "672200",
    "end": "678000"
  },
  {
    "text": "an iterator interface because it's structural which means I can make anything into it so the",
    "start": "678000",
    "end": "683720"
  },
  {
    "text": "the part that I really like about that is that if I want to do it this way if I want one of my objects to work instead I",
    "start": "683720",
    "end": "691040"
  },
  {
    "text": "have to create the iterator interface then I in my Constructor will",
    "start": "691040",
    "end": "698519"
  },
  {
    "text": "take in that iterator interface and I will produce back out something that",
    "start": "698519",
    "end": "703880"
  },
  {
    "text": "calls next when yield doesn't fail if that makes sense that's the only way that I will be",
    "start": "703880",
    "end": "710079"
  },
  {
    "text": "able to kind of use it and construct it the way I want it to behave it's still going to have to have this semi kind of",
    "start": "710079",
    "end": "715279"
  },
  {
    "text": "confusing style uh but you will be able to effectively I you",
    "start": "715279",
    "end": "721200"
  },
  {
    "text": "know you can imagine that I could do something that's like this and I I don't know if you you can't really do generics",
    "start": "721200",
    "end": "727040"
  },
  {
    "text": "the thing is is that generics and go is also funny because you can kind of do generic strs if I'm not mistaken you can",
    "start": "727040",
    "end": "732320"
  },
  {
    "text": "do this with like Foo if I go like this e any and I have a foo right I believe I",
    "start": "732320",
    "end": "737720"
  },
  {
    "text": "can return out something that's kind of wild here I'm going to leave it I believe I can return out a struct that",
    "start": "737720",
    "end": "743040"
  },
  {
    "text": "has an INT that has a Fu e",
    "start": "743040",
    "end": "749639"
  },
  {
    "text": "uh right or uh type uh right I think I can do that",
    "start": "750560",
    "end": "758880"
  },
  {
    "text": "right so I can go fun uh Funk",
    "start": "763680",
    "end": "768519"
  },
  {
    "text": "e yeah there we go and then I'd have to figure out how to type this thing I'm not really sure how to type this thing",
    "start": "771480",
    "end": "777800"
  },
  {
    "text": "but I I would assume that you'd have something like a type cuz I've interface up here that would uh that would go and",
    "start": "777800",
    "end": "784320"
  },
  {
    "text": "do it you know right and then you could create",
    "start": "784320",
    "end": "789639"
  },
  {
    "text": "something that does an IU there you go I'd assume that's how this is done because I've seen some",
    "start": "789639",
    "end": "797199"
  },
  {
    "text": "libraries have generic strs and I was like how do they create gen generic strs I don't understand how generic strs are",
    "start": "797199",
    "end": "802839"
  },
  {
    "text": "created and there we go I assume that's how check it out now",
    "start": "802839",
    "end": "809160"
  },
  {
    "text": "now the funk soul brother yeah anyways there we go uh could see it",
    "start": "809160",
    "end": "814760"
  },
  {
    "text": "being used to yeah genuine question what's the usage of this and when should it be used I saw people use it for gosh",
    "start": "814760",
    "end": "820639"
  },
  {
    "text": "I'm trying to remember what it was used for we just used it recently someone had uh generic structs being created I think",
    "start": "820639",
    "end": "827600"
  },
  {
    "text": "the problem is is I feel like here's going to be my real take with go I feel like go in its pursuit of",
    "start": "827600",
    "end": "837040"
  },
  {
    "text": "Simplicity has taken one to shortcuts in Simplicity and caused complexity this",
    "start": "837040",
    "end": "843240"
  },
  {
    "text": "feels complex this does not feel simp this honestly does not feel good I",
    "start": "843240",
    "end": "848480"
  },
  {
    "text": "really wish they would have thought more just about the interfacing type and would have just created that cuz it just feels that just feels right like a good",
    "start": "848480",
    "end": "855160"
  },
  {
    "text": "interfacing type um it just feels the go away because everything else is very structural typing and so when it's like",
    "start": "855160",
    "end": "861600"
  },
  {
    "text": "but I understand why I understand I guess the counter reason why is that if you have structural typing and you use",
    "start": "861600",
    "end": "867120"
  },
  {
    "text": "an interface all of your range Lo will be indirect access and that could be quote unquote slow maybe maybe that's",
    "start": "867120",
    "end": "873519"
  },
  {
    "text": "the argument that's kind of I I guess maybe that's maybe that's part of the reason I guess I never looked at the discussion that funk map code blocks",
    "start": "873519",
    "end": "879759"
  },
  {
    "text": "makes me sad exactly the motivation was speed yeah so I think I was right am I right on that one I love go I do too I",
    "start": "879759",
    "end": "885560"
  },
  {
    "text": "actually think go is one of the most beautiful languages due to its simple typing plus structural typing uh the",
    "start": "885560",
    "end": "891199"
  },
  {
    "text": "main motivation speed okay yeah also interface is pull instead of push I think it's bet let's see I think that is better for iterators yes I I do like so",
    "start": "891199",
    "end": "899160"
  },
  {
    "text": "yeah I guess another problem is I'm also thinking of pull as opposed to push you're right on that one pull you're",
    "start": "899160",
    "end": "904480"
  },
  {
    "text": "you're probably absolutely right on that one pull makes more sense if you can if you can treat uh if you can treat your",
    "start": "904480",
    "end": "909560"
  },
  {
    "text": "iterator like a burrito commonly referred to as a monad since these aren't really being treated as a as a monad you're not really chaining a bunch",
    "start": "909560",
    "end": "916240"
  },
  {
    "text": "of these things together maybe it makes more sense to be a push as opposed to a pole which I think is fair as let's say",
    "start": "916240",
    "end": "922480"
  },
  {
    "text": "I have a question from someone who barely writes uh go is it a big deal that they promise uh backwards compatibility I think it's always is a",
    "start": "922480",
    "end": "929199"
  },
  {
    "text": "good like generally speaking I think this is a good move uh a good move generally speaking uh you can do a foo a",
    "start": "929199",
    "end": "936120"
  },
  {
    "text": "struct foo oh you can just do that okay cool okay is that how you do that okay I was I was wondering how you do it I",
    "start": "936120",
    "end": "942240"
  },
  {
    "text": "forget that I always forget that you can do uh types can be you know like",
    "start": "942240",
    "end": "947720"
  },
  {
    "text": "Anonymous they can be this weird Anonymous style like this right this is",
    "start": "947720",
    "end": "952800"
  },
  {
    "text": "pretty cool though right I mean this is pretty cool that you can do this I actually like that about go I think that",
    "start": "952800",
    "end": "959319"
  },
  {
    "text": "this is actually one of Go's strengths because it really does make the generics very interesting because people",
    "start": "959319",
    "end": "965399"
  },
  {
    "text": "always said that the generics didn't work because you couldn't do this but now you can make uh what's it called you can now do data structures in go you can",
    "start": "965399",
    "end": "972639"
  },
  {
    "text": "officially do data structures in go by doing function generation with generics on it type generation with function",
    "start": "972639",
    "end": "979240"
  },
  {
    "text": "generics and I actually think this is really cool I'm excited about range functions I'm going to have to play with range functions more and maybe there's a",
    "start": "979240",
    "end": "986000"
  },
  {
    "text": "nice way to make this so that it works out just nice cuz I bet you could do something like uh if you have a struct",
    "start": "986000",
    "end": "991319"
  },
  {
    "text": "right say you have um a type you know you have a foo right I know I'm using Fu a bunch here uh we're just going to DAP",
    "start": "991319",
    "end": "997480"
  },
  {
    "text": "all that away and you have I don't know count which is an INT you could theoretically you could have some sort",
    "start": "997480",
    "end": "1003440"
  },
  {
    "text": "of uh Funk uh F Fu and have a have an itter that's going to return out",
    "start": "1003440",
    "end": "1010600"
  },
  {
    "text": "a right it could return this out right so",
    "start": "1010600",
    "end": "1018000"
  },
  {
    "text": "you could actually have that attached to it so that way you could go you know you could have this whole thing let's go here I'll go like that",
    "start": "1018000",
    "end": "1025240"
  },
  {
    "text": "we'll put it into here there you go this is a backwards yield by the way so just deal with it",
    "start": "1025240",
    "end": "1032798"
  },
  {
    "text": "um there we go and so I I mean theoretically I can go f let's see I can",
    "start": "1036919",
    "end": "1043000"
  },
  {
    "text": "go this is how I I would imagine using it though right count 10 right and so",
    "start": "1043000",
    "end": "1049200"
  },
  {
    "text": "then I can go uh food. itter I assume that should work there",
    "start": "1049200",
    "end": "1056200"
  },
  {
    "text": "you go yeah that's I mean that it's not bad it's it's not bad it's just not the",
    "start": "1056200",
    "end": "1063120"
  },
  {
    "text": "necessarily the way I'd want it to be but this isn't bad right so you can you can attach it to things you could make",
    "start": "1063120",
    "end": "1069440"
  },
  {
    "text": "it like this that means you could also have functions that take in itter you",
    "start": "1069440",
    "end": "1075360"
  },
  {
    "text": "know it or seek simp yeah I'm sure they have a whole pack package of iterator stuff I'm trying not to look at their",
    "start": "1075360",
    "end": "1081159"
  },
  {
    "text": "iterator stuff I'm trying to look at it like I'm trying to look at it from just the raw points I'm sure their whole it",
    "start": "1081159",
    "end": "1086280"
  },
  {
    "text": "seek which is pretty cool that they do have they do have this new iterator package because I am actually curious of",
    "start": "1086280",
    "end": "1092280"
  },
  {
    "text": "these things that they have it looks like they have useful items in here two versions for uh for each why uh well",
    "start": "1092280",
    "end": "1098960"
  },
  {
    "text": "because there's two different ones right there's pull which only takes a value and then you have one that's like over a",
    "start": "1098960",
    "end": "1104360"
  },
  {
    "text": "map right whoopsies I don't why why didn't that work you have one that's over a map right so this is over a map",
    "start": "1104360",
    "end": "1110440"
  },
  {
    "text": "so it takes in a key and a value just like a sequence can sequence over an array or can sequence over an indexable",
    "start": "1110440",
    "end": "1118480"
  },
  {
    "text": "object such as an array and you get the Indy back ran out of function names",
    "start": "1118480",
    "end": "1123840"
  },
  {
    "text": "classic they actually just ran out of function names actually uh they were going to call this one sequence Baloo",
    "start": "1123840",
    "end": "1129720"
  },
  {
    "text": "but they decideed to go as two instead anyways okay let's see is there anything else okay so Telemetry so this is",
    "start": "1129720",
    "end": "1135280"
  },
  {
    "text": "actually a pretty hot topic right here starting out uh starting in 1 point or 1.23 the go tool chain can collect usage",
    "start": "1135280",
    "end": "1142080"
  },
  {
    "text": "and break its statistics that help the go team understand how the go tool chain is used and how well it's working we refer to these statistics as go",
    "start": "1142080",
    "end": "1148600"
  },
  {
    "text": "Telemetry go Telemetry is an opin system I know there was a whole bunch of people",
    "start": "1148600",
    "end": "1153640"
  },
  {
    "text": "that got really pissed off about this and even I was pretty skeptical of adding in Telemetry but if it's purely",
    "start": "1153640",
    "end": "1159720"
  },
  {
    "text": "opt in I don't see what the problem is right I don't actually see what the problem is uh if if they're like hey we",
    "start": "1159720",
    "end": "1166000"
  },
  {
    "text": "want to collect Telemetry on things that are breaking and it's open open source what the Telemetry is and it's opt in",
    "start": "1166000",
    "end": "1173559"
  },
  {
    "text": "then I'm fine opt in for now yeah I mean if they change it from opt in to opt out then I think it's bad I would be",
    "start": "1173559",
    "end": "1179360"
  },
  {
    "text": "surprised if they change it from opt in to opt out all right is there anything else in here so the Telemetry thing I think is it was a big deal now it's not",
    "start": "1179360",
    "end": "1187200"
  },
  {
    "text": "a deal at all it's just a nothing right it's literally just a nothing Russ Cox quit the go team I didn't know about",
    "start": "1187200",
    "end": "1192679"
  },
  {
    "text": "that um I'm not necessarily by the way I'm also not a against uh tool chains adding telemetry",
    "start": "1192679",
    "end": "1199200"
  },
  {
    "text": "and hear me out like I'm not against vs code having Telemetry I'm against the fact that vs code requires Telemetry for",
    "start": "1199200",
    "end": "1205880"
  },
  {
    "text": "you to be able to use features such as co-pilot like I'm actually against that as a fundamental premise if you say hey",
    "start": "1205880",
    "end": "1213720"
  },
  {
    "text": "as Engineers we want to be able to collect feedback if you let me use feedback then we can make your product",
    "start": "1213720",
    "end": "1219200"
  },
  {
    "text": "better and it's opt in I to me vs code that's fine I think neovim could do the same thing I think anything could do the",
    "start": "1219200",
    "end": "1225400"
  },
  {
    "text": "same thing if you let it to be opt in I think that that's perfect fine and I don't take any offense to that as a",
    "start": "1225400",
    "end": "1230679"
  },
  {
    "text": "developer it's when it's the other way around that you can't use all these features of uh vs code because you don't",
    "start": "1230679",
    "end": "1238480"
  },
  {
    "text": "have Telemetry on to me that just seems fundamentally broken right I feel like they they put it on by default and they",
    "start": "1238480",
    "end": "1245000"
  },
  {
    "text": "force Feature Feature completion or they force feature compliance for it so that",
    "start": "1245000",
    "end": "1250600"
  },
  {
    "text": "feels that just feels like they're spying on me I don't know what they're spying on me for it just feels like it",
    "start": "1250600",
    "end": "1256440"
  },
  {
    "text": "right I just feel like I'm getting you know are we using Vim in 2024 yes we",
    "start": "1256440",
    "end": "1262120"
  },
  {
    "text": "I use i i i i Vim I Vim hard anyways",
    "start": "1262120",
    "end": "1268200"
  },
  {
    "text": "okay let's see the go command uh setting the go rout final",
    "start": "1268200",
    "end": "1273600"
  },
  {
    "text": "Environ the the go rout final I'm glad that this no longer has",
    "start": "1273799",
    "end": "1279279"
  },
  {
    "text": "an effect good and distributions that install the go command to a location other than go rout bin go should install",
    "start": "1279279",
    "end": "1284840"
  },
  {
    "text": "a Sim link instead of relocating or copying the go binary the new go and changed a flag causes the uh command to",
    "start": "1284840",
    "end": "1291279"
  },
  {
    "text": "print only those settings whose effect who effective values differ from the default value that' be obtained in an",
    "start": "1291279",
    "end": "1297240"
  },
  {
    "text": "empty environment with no prior W flag all right uh the new go mod tidy diff flag causes the command not to modify",
    "start": "1297240",
    "end": "1303760"
  },
  {
    "text": "the files but instead print the necessary changes as an unified diff it exists with the non-zero execute uh code",
    "start": "1303760",
    "end": "1310720"
  },
  {
    "text": "or non-zero code if updates are needed okay that's cool that's cool to see what you're doing by the way go go mod tidy",
    "start": "1310720",
    "end": "1317080"
  },
  {
    "text": "is is a very strange command for get the packages that I need that I have",
    "start": "1317080",
    "end": "1322799"
  },
  {
    "text": "referenced I so go ma tidy is one of those things that I I just feel so weird about in the sense that for me to find",
    "start": "1322799",
    "end": "1329640"
  },
  {
    "text": "the package I have to go to GitHub to figure out where it is or gitlab or wherever it's being stored I get the",
    "start": "1329640",
    "end": "1335080"
  },
  {
    "text": "reference then I put it in my package and then once I put it in there then I have to execute go mod tidy to bring it",
    "start": "1335080",
    "end": "1340760"
  },
  {
    "text": "in into the mod it just feels it feels funny well some people are saying I think tidy is the wrong word well the",
    "start": "1340760",
    "end": "1346080"
  },
  {
    "text": "reason why it's interesting I believe if you don't use the package it will remove it from your package yeah you can go Mod",
    "start": "1346080",
    "end": "1352840"
  },
  {
    "text": "download it just it it feels funny right that just that whole experience feels funny though I do like it it's better go",
    "start": "1352840",
    "end": "1358760"
  },
  {
    "text": "mod TIY is great but I also find that I'll get things break and then I'm like ah go mod tidy and then things don't",
    "start": "1358760",
    "end": "1364080"
  },
  {
    "text": "break anymore and you're just like okay I don't know what I don't I",
    "start": "1364080",
    "end": "1369159"
  },
  {
    "text": "don't know what went wrong but all right hell yeah the go list M Json command now includes a new sum and go mod Su Fields",
    "start": "1369159",
    "end": "1375840"
  },
  {
    "text": "okay I don't I don't think we care about that what is vet go vet command now includes Standard Version analyzer which",
    "start": "1375840",
    "end": "1381039"
  },
  {
    "text": "flag references to symbols that are too new for the version of go in effect in the referring file I think I'm too",
    "start": "1381039",
    "end": "1387400"
  },
  {
    "text": "stupid to understand that for example it will report a diagnostic for a reference to the reflect. Type 4 function",
    "start": "1387400",
    "end": "1393320"
  },
  {
    "text": "introduced in go1 122 from a file in whose module specifies go one oh interesting okay okay cool SEO now",
    "start": "1393320",
    "end": "1402480"
  },
  {
    "text": "supports I I I've never used SEO what the what the heck is SEO uh I've never",
    "start": "1402480",
    "end": "1407600"
  },
  {
    "text": "tried linking SE I wonder if you can link Zig could go become the new oh that'd be cool because",
    "start": "1407600",
    "end": "1414279"
  },
  {
    "text": "the one reason why I wanted to start getting better at python is a simple problem solving but B I wanted to be able to solve all my problems in Zig",
    "start": "1414279",
    "end": "1420760"
  },
  {
    "text": "that are slow and then use python as like my Loosey Goosey side of things and so it' be kind of cool to see what this",
    "start": "1420760",
    "end": "1426480"
  },
  {
    "text": "does I've never played with this the trace tool is now better uh tolerates partially broken Traces by attempting to",
    "start": "1426480",
    "end": "1431880"
  },
  {
    "text": "recover with okay cool I love I love uh I love any tool that acts like HTML HTML",
    "start": "1431880",
    "end": "1437480"
  },
  {
    "text": "is the most resilient tool in the universe no matter how shitty it is it",
    "start": "1437480",
    "end": "1442960"
  },
  {
    "text": "just works it just runs I love that I actually I I love when you pass and break and stuff and broken stuff works",
    "start": "1442960",
    "end": "1449240"
  },
  {
    "text": "uh Trace back printed by the runtime after an unhandled oh let's see a traceback printed by the runtime after",
    "start": "1449240",
    "end": "1455640"
  },
  {
    "text": "an unhandled Panic or other fatal error now indents the second and subsequent lines cool compiler build time overhead",
    "start": "1455640",
    "end": "1461840"
  },
  {
    "text": "with building a profile guided optimization has been reduced significantly previous large builds could see 100% plus build time increase",
    "start": "1461840",
    "end": "1468880"
  },
  {
    "text": "from enabling p in a one two three overhead should be a single uh digit percentages classic go",
    "start": "1468880",
    "end": "1476240"
  },
  {
    "text": "w i that's one reason why I love go right here it's so good that if you're",
    "start": "1476240",
    "end": "1482320"
  },
  {
    "text": "using something like air AI you're able to update your website",
    "start": "1482320",
    "end": "1489000"
  },
  {
    "text": "restart your server restart your server and by the time you go to your browser it's already in it's really really nice",
    "start": "1489000",
    "end": "1496799"
  },
  {
    "text": "it's really really really nice do like that rebuilding anything uh",
    "start": "1496799",
    "end": "1503720"
  },
  {
    "text": "Linker me nothing for me here timer changes uh makes two significant changes to timer okay what's what happened here",
    "start": "1503720",
    "end": "1509559"
  },
  {
    "text": "first timers and tickers are no longer referred to by the program becoming eligible for garbage collection immediately even if the time even if",
    "start": "1509559",
    "end": "1515000"
  },
  {
    "text": "their stop methods have not been called earlier versions of go did not collect unstopped timers until they had fired",
    "start": "1515000",
    "end": "1520360"
  },
  {
    "text": "and never collected unstopped tickers okay second uh timer Channel associated with timer and ticker is now unbuffered",
    "start": "1520360",
    "end": "1526919"
  },
  {
    "text": "with capacity zero the main effect let's see of this change is that go now guarantees that for any call to reset or",
    "start": "1526919",
    "end": "1533720"
  },
  {
    "text": "stop method no stale values prepared before that call will be sent or received oh oh nice okay I use timer but",
    "start": "1533720",
    "end": "1543840"
  },
  {
    "text": "I've never ran into any of these timers go boom boom yeah okay that's cool I've never used any of this uh new unique",
    "start": "1543840",
    "end": "1549919"
  },
  {
    "text": "packages provide or facilitates for canonical values like interning and hash concise",
    "start": "1549919",
    "end": "1556480"
  },
  {
    "text": "uh consing coning consign consign consing what is this I don't know I I",
    "start": "1556480",
    "end": "1561760"
  },
  {
    "text": "don't know I don't know what that is I'm not a hash guy I don't know I have no idea any value let's see any value of",
    "start": "1561760",
    "end": "1569200"
  },
  {
    "text": "comparable type may be canonicalized with the new make t function which produces a reference to the canonicalized copy of the value to form",
    "start": "1569200",
    "end": "1576240"
  },
  {
    "text": "a handle t two handle T's are equal if if and only if the values used to produce the handles are equal allowing",
    "start": "1576240",
    "end": "1583399"
  },
  {
    "text": "programs to D duplicate values and reduce their memory footprint comparing handle T values is efficient reducing",
    "start": "1583399",
    "end": "1590080"
  },
  {
    "text": "the let's see reducing down to a simple pointer comparison oh I'm not sure if I really get this is it just are they just",
    "start": "1590080",
    "end": "1597000"
  },
  {
    "text": "saying with a bunch of words that it just it just compares the pointer the pointer handle I don't know anyways",
    "start": "1597000",
    "end": "1604240"
  },
  {
    "text": "iterators uh the iterator package I I'd have to think about this more I don't really quite Java equals handle d yeah",
    "start": "1604240",
    "end": "1610360"
  },
  {
    "text": "handle D's yeah absolutely the slices package now let's see adds several functions that work with iterators all",
    "start": "1610360",
    "end": "1616679"
  },
  {
    "text": "values backwards collect a pen sorts sorted Funk sorted stable Funk chunk oh",
    "start": "1616679",
    "end": "1622360"
  },
  {
    "text": "chunks over an iterator that's pretty cool map package add several functions all keys values insert collect this is",
    "start": "1622360",
    "end": "1627720"
  },
  {
    "text": "actually pretty cool by the way this is this is pretty cool that we're starting to get these type of",
    "start": "1627720",
    "end": "1633120"
  },
  {
    "text": "functions like collect is a pretty if it's what I'm thinking it is which is take a map and turn it into a single value collect let's see uh collect",
    "start": "1633120",
    "end": "1640880"
  },
  {
    "text": "collect key value pairs from a sequence oh and it oh nice okay so it collects from a sequence into a map that's cool",
    "start": "1640880",
    "end": "1648399"
  },
  {
    "text": "that oh that's cool okay that's awesome that means you can have a sequence and actually create a map from it so map from sequence just got real real easy uh",
    "start": "1648399",
    "end": "1656279"
  },
  {
    "text": "the stru package provides types for struct fields that modify properties of the containing struct type such as memory layout all right so how does this",
    "start": "1656279",
    "end": "1662960"
  },
  {
    "text": "work uh in this release the only such type is host layout which indicates that",
    "start": "1662960",
    "end": "1668080"
  },
  {
    "text": "a structure with a field of that type has a layout that conforms to the host platform expectations is this H to n n to H is",
    "start": "1668080",
    "end": "1675720"
  },
  {
    "text": "that what we're hearing here I don't think I quite understand this this is probably too low level in go for me to",
    "start": "1675720",
    "end": "1681159"
  },
  {
    "text": "understand because I don't have that deep knowledge of go it contains filtered or unexported Fields host",
    "start": "1681159",
    "end": "1686240"
  },
  {
    "text": "layout marks a struct as using host memory layout a struct with the field uh of type host layout will be laid out in",
    "start": "1686240",
    "end": "1692679"
  },
  {
    "text": "memory according to the host expectations generally following the host cabi oh is this for better communication",
    "start": "1692679",
    "end": "1699519"
  },
  {
    "text": "between C and and go okay I I don't I don't quite I don't quite understand that one and then there's a bunch of",
    "start": "1699519",
    "end": "1706120"
  },
  {
    "text": "other stuff that I don't think I'm I'm going to go I'm going to to look over uh I saw something about the word windows in there but there's a lot of changes it",
    "start": "1706120",
    "end": "1712960"
  },
  {
    "text": "looks like a lot a lot of little changes in here a lot of new build stuff going on here cool awesome go 1.3 go one uh",
    "start": "1712960",
    "end": "1720519"
  },
  {
    "text": "1.23 looks really good I'm actually very excited I really love the idea that they're leaning into ranges which I",
    "start": "1720519",
    "end": "1726440"
  },
  {
    "text": "think they should have done literally a decade ago I'm happy that we're here and I'm happy that generics are actually",
    "start": "1726440",
    "end": "1732519"
  },
  {
    "text": "there's a lot of cool stuff I think you I think go is much more powerful than people realize and I really wish I could",
    "start": "1732519",
    "end": "1738360"
  },
  {
    "text": "find this one I was us I can't remember what I was using it for but it it had a really cool generic operations and so I",
    "start": "1738360",
    "end": "1746559"
  },
  {
    "text": "think there's a lot I think there is actually a lot with go that I just need to practice with especially these whole",
    "start": "1746559",
    "end": "1751760"
  },
  {
    "text": "returning Anonymous structs based on generics and creating a generic struct interface what I'm curious I guess I'm",
    "start": "1751760",
    "end": "1758399"
  },
  {
    "text": "curious about is if you create a hold on I know somewhere in here I had this ah I'm curious about this when you",
    "start": "1758399",
    "end": "1766799"
  },
  {
    "text": "have this can you also can you also",
    "start": "1766799",
    "end": "1771760"
  },
  {
    "text": "uh can you also do this or can you not do this is this just not allowed um can",
    "start": "1774440",
    "end": "1780080"
  },
  {
    "text": "you not Define functions on",
    "start": "1780080",
    "end": "1784720"
  },
  {
    "text": "this oopsies wrong wrong language uh",
    "start": "1785360",
    "end": "1790600"
  },
  {
    "text": "format why aren't you working print F uh hello let's see",
    "start": "1790799",
    "end": "1798398"
  },
  {
    "text": "man I I keep I keep dude I keep mixing up Zig there we go so I can print that and return uh",
    "start": "1800240",
    "end": "1808399"
  },
  {
    "text": "one can I do that or is that not allowed it doesn't look like this is",
    "start": "1808399",
    "end": "1814278"
  },
  {
    "text": "allowed let's find out okay so it looks like you can't",
    "start": "1816360",
    "end": "1822039"
  },
  {
    "text": "attach functions I bet you there's a way to attach functions to this that I don't know uh you can do function inide of",
    "start": "1822039",
    "end": "1827240"
  },
  {
    "text": "function yeah I bet you there's a way to do this that I just don't understand typo and",
    "start": "1827240",
    "end": "1833880"
  },
  {
    "text": "Funk where what did I do function receiver name no arguments",
    "start": "1833880",
    "end": "1843279"
  },
  {
    "text": "return type I don't know what's wrong with that interfaces yeah see I I I",
    "start": "1843279",
    "end": "1848799"
  },
  {
    "text": "don't think I quite understand Funk is not is not fun oh you could use interfaces oh interesting so I could use",
    "start": "1848799",
    "end": "1855399"
  },
  {
    "text": "an interface I don't think I get did I don't think I understand how to use an interface there anyways I'll have to",
    "start": "1855399",
    "end": "1861639"
  },
  {
    "text": "look at this later either way I think that there's a lot of I think there's a lot of fun with go coming up that I need to",
    "start": "1861639",
    "end": "1868240"
  },
  {
    "text": "play more with and I think I just need to understand that part because I feel like I get Zig much better Zig is more",
    "start": "1868240",
    "end": "1873440"
  },
  {
    "text": "simple and therefore easier in my head to use it just is but it doesn't have but it doesn't have this ranging thing",
    "start": "1873440",
    "end": "1880720"
  },
  {
    "text": "that that go has so anyways uh Zig V tables yeah that's the",
    "start": "1880720",
    "end": "1888120"
  },
  {
    "text": "thing is you just create what you need to create right if you need to have an interface you have to create a v table and maybe there's something that could",
    "start": "1888120",
    "end": "1894039"
  },
  {
    "text": "be easier about Zig there the thing is is that I love the problem is is with go I love structural typing and I want",
    "start": "1894039",
    "end": "1900320"
  },
  {
    "text": "structural typing in every other language I ever use and that's my big problem is I love Zig and Zig might be",
    "start": "1900320",
    "end": "1905440"
  },
  {
    "text": "one of my favorite languages of all time yes I think Zig is simpler than go now",
    "start": "1905440",
    "end": "1910720"
  },
  {
    "text": "in some sense because Zig is exactly what you think it is right it literally is exactly what you think it is it's",
    "start": "1910720",
    "end": "1916399"
  },
  {
    "text": "just you want memory it's right here oh you need to create memory you create memory it's it's when I say simple I",
    "start": "1916399",
    "end": "1923000"
  },
  {
    "text": "mean it that way right Zig is for dummy is go Zig is go for dummies no it's the",
    "start": "1923000",
    "end": "1928519"
  },
  {
    "text": "I'm not sure how to even say it that way Ghost type sayst it feels good yeah it's because of structural typing right",
    "start": "1928519",
    "end": "1934799"
  },
  {
    "text": "anyways all right hey I'm not sure which way it is but hey the name the name they the name is not Caboose a Jen",
    "start": "1934799",
    "end": "1944440"
  }
]