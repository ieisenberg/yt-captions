[
  {
    "text": "all right so let's get started so I do",
    "start": "0",
    "end": "1560"
  },
  {
    "text": "have some I do have some really good",
    "start": "1560",
    "end": "2879"
  },
  {
    "text": "ones coming up okay so the first thing I",
    "start": "2879",
    "end": "4860"
  },
  {
    "text": "want to do is this one look at this one",
    "start": "4860",
    "end": "6779"
  },
  {
    "text": "making tan stack table 1",
    "start": "6779",
    "end": "10559"
  },
  {
    "text": "000 X faster",
    "start": "10559",
    "end": "12900"
  },
  {
    "text": "huh are you guys excited about this one",
    "start": "12900",
    "end": "14639"
  },
  {
    "text": "I'm excited about this I actually really",
    "start": "14639",
    "end": "16080"
  },
  {
    "text": "wanted the real I really wanted to read",
    "start": "16080",
    "end": "17640"
  },
  {
    "text": "this one",
    "start": "17640",
    "end": "18720"
  },
  {
    "text": "this one's great I have even read it all",
    "start": "18720",
    "end": "20939"
  },
  {
    "text": "I know is I saw this and I was like dude",
    "start": "20939",
    "end": "22740"
  },
  {
    "text": "I gotta read this this looks exciting I",
    "start": "22740",
    "end": "25199"
  },
  {
    "text": "immediately think they're you know one",
    "start": "25199",
    "end": "27539"
  },
  {
    "text": "line change yeah my guess is that okay",
    "start": "27539",
    "end": "29519"
  },
  {
    "text": "so here's obviously my guess my guess is",
    "start": "29519",
    "end": "32160"
  },
  {
    "text": "that they did something stupid the",
    "start": "32160",
    "end": "34500"
  },
  {
    "text": "stupids in the stupids as I like to call",
    "start": "34500",
    "end": "38219"
  },
  {
    "text": "them in JavaScript are very very simple",
    "start": "38219",
    "end": "40579"
  },
  {
    "text": "uh memory",
    "start": "40579",
    "end": "43860"
  },
  {
    "text": "and that's it it's always memory so my",
    "start": "43860",
    "end": "46860"
  },
  {
    "text": "guess is that uh",
    "start": "46860",
    "end": "49980"
  },
  {
    "text": "either they're doing a bunch of tight",
    "start": "49980",
    "end": "52079"
  },
  {
    "text": "Loops using a map filter reduce or map",
    "start": "52079",
    "end": "56100"
  },
  {
    "text": "and filter or be a spread operator",
    "start": "56100",
    "end": "58680"
  },
  {
    "text": "that's almost universally where all the",
    "start": "58680",
    "end": "60960"
  },
  {
    "text": "speed UPS happen it's it's one of the",
    "start": "60960",
    "end": "62879"
  },
  {
    "text": "two it's one of the two it's always been",
    "start": "62879",
    "end": "65640"
  },
  {
    "text": "one of the two so let's find out right",
    "start": "65640",
    "end": "67740"
  },
  {
    "text": "now what it is uh let's see uh let's see",
    "start": "67740",
    "end": "70860"
  },
  {
    "text": "let's go marker",
    "start": "70860",
    "end": "72840"
  },
  {
    "text": "tan stack I got it right yeah I figured",
    "start": "72840",
    "end": "75000"
  },
  {
    "text": "I'm gonna get it right tan stack uh make",
    "start": "75000",
    "end": "77100"
  },
  {
    "text": "query faster all right let's do this",
    "start": "77100",
    "end": "79560"
  },
  {
    "text": "okay so that's my guess is it's one of",
    "start": "79560",
    "end": "81479"
  },
  {
    "text": "those two because that's what it always",
    "start": "81479",
    "end": "82979"
  },
  {
    "text": "is it always ends up being something",
    "start": "82979",
    "end": "84960"
  },
  {
    "text": "like this because that's the thing about",
    "start": "84960",
    "end": "86520"
  },
  {
    "text": "JavaScript that a lot of people don't",
    "start": "86520",
    "end": "87840"
  },
  {
    "text": "understand is that memory plays an",
    "start": "87840",
    "end": "89820"
  },
  {
    "text": "enormous role in the performance of your",
    "start": "89820",
    "end": "91619"
  },
  {
    "text": "items I actually have a pretty cool",
    "start": "91619",
    "end": "93180"
  },
  {
    "text": "little test I'm just getting started I'm",
    "start": "93180",
    "end": "95280"
  },
  {
    "text": "gonna build a whole uh experience around",
    "start": "95280",
    "end": "97259"
  },
  {
    "text": "it gonna build a server around it do all",
    "start": "97259",
    "end": "99000"
  },
  {
    "text": "that I have a pretty fun blazingly fast",
    "start": "99000",
    "end": "100860"
  },
  {
    "text": "video coming out of the works here let",
    "start": "100860",
    "end": "102659"
  },
  {
    "text": "me just give you a quick little preview",
    "start": "102659",
    "end": "104040"
  },
  {
    "text": "just a quick little preview uh oh yeah",
    "start": "104040",
    "end": "107220"
  },
  {
    "text": "uh rebase rebase me Daddy welcome to",
    "start": "107220",
    "end": "110100"
  },
  {
    "text": "Costco I love you rebase me Daddy all",
    "start": "110100",
    "end": "114119"
  },
  {
    "text": "right uh oh my goodness are you really",
    "start": "114119",
    "end": "115560"
  },
  {
    "text": "dang it uh fine I'll just I don't even",
    "start": "115560",
    "end": "118500"
  },
  {
    "text": "want to type that in right here I don't",
    "start": "118500",
    "end": "119759"
  },
  {
    "text": "even want to type it in somehow I got",
    "start": "119759",
    "end": "121020"
  },
  {
    "text": "there uh JavaScript memory look at this",
    "start": "121020",
    "end": "123479"
  },
  {
    "text": "okay so I have a simple test create an",
    "start": "123479",
    "end": "125520"
  },
  {
    "text": "array of whatever size for Loop and",
    "start": "125520",
    "end": "127860"
  },
  {
    "text": "Summit or reduce in Summit how much",
    "start": "127860",
    "end": "130800"
  },
  {
    "text": "slower or faster or the same do you",
    "start": "130800",
    "end": "133140"
  },
  {
    "text": "think it reduces this remember this is a",
    "start": "133140",
    "end": "135480"
  },
  {
    "text": "micro Benchmark this is not fair this",
    "start": "135480",
    "end": "138120"
  },
  {
    "text": "does not actually equate to real world",
    "start": "138120",
    "end": "139680"
  },
  {
    "text": "performance but what do you think",
    "start": "139680",
    "end": "141959"
  },
  {
    "text": "what do you think type one if you think",
    "start": "141959",
    "end": "144480"
  },
  {
    "text": "it's the same two if you think the four",
    "start": "144480",
    "end": "146220"
  },
  {
    "text": "Loops faster three if you think the",
    "start": "146220",
    "end": "148020"
  },
  {
    "text": "reduces faster",
    "start": "148020",
    "end": "150739"
  },
  {
    "text": "one the same",
    "start": "151319",
    "end": "153120"
  },
  {
    "text": "two the four three the reduce",
    "start": "153120",
    "end": "157220"
  },
  {
    "text": "we got some threes popping in nice I",
    "start": "157260",
    "end": "159480"
  },
  {
    "text": "like the adventure got some twos coming",
    "start": "159480",
    "end": "161340"
  },
  {
    "text": "in all right very very good we got some",
    "start": "161340",
    "end": "163319"
  },
  {
    "text": "ones go in there nice and some zeros",
    "start": "163319",
    "end": "165000"
  },
  {
    "text": "because they clearly are good at rules",
    "start": "165000",
    "end": "166739"
  },
  {
    "text": "uh so just one thing I do a little quick",
    "start": "166739",
    "end": "168840"
  },
  {
    "text": "little timing of it all",
    "start": "168840",
    "end": "170760"
  },
  {
    "text": "and then I can execute the function over",
    "start": "170760",
    "end": "172500"
  },
  {
    "text": "and over again and I create effectively",
    "start": "172500",
    "end": "174959"
  },
  {
    "text": "my different arrays this is the size of",
    "start": "174959",
    "end": "176519"
  },
  {
    "text": "array I've been working with a lot with",
    "start": "176519",
    "end": "178080"
  },
  {
    "text": "at Netflix lately it's been very very",
    "start": "178080",
    "end": "179760"
  },
  {
    "text": "hard to do anything lately and so I'm",
    "start": "179760",
    "end": "182160"
  },
  {
    "text": "gonna do one ten hundred or a thousand",
    "start": "182160",
    "end": "184260"
  },
  {
    "text": "runs right here's my results there we go",
    "start": "184260",
    "end": "187019"
  },
  {
    "text": "I'm gonna just warm it up make sure that",
    "start": "187019",
    "end": "188760"
  },
  {
    "text": "the jit has been you know enabled",
    "start": "188760",
    "end": "191040"
  },
  {
    "text": "everything's going good and then I'm",
    "start": "191040",
    "end": "192480"
  },
  {
    "text": "just gonna push them all in and do that",
    "start": "192480",
    "end": "194220"
  },
  {
    "text": "very very simple right very very simple",
    "start": "194220",
    "end": "196879"
  },
  {
    "text": "uh and you can even use uh TS node",
    "start": "196879",
    "end": "200040"
  },
  {
    "text": "because again it's all about TS nodes",
    "start": "200040",
    "end": "202500"
  },
  {
    "text": "slow down is only in the loading it",
    "start": "202500",
    "end": "203819"
  },
  {
    "text": "doesn't affect jit at this point once",
    "start": "203819",
    "end": "205319"
  },
  {
    "text": "you get to the actual code running",
    "start": "205319",
    "end": "206400"
  },
  {
    "text": "everything should be easy uh where is",
    "start": "206400",
    "end": "208739"
  },
  {
    "text": "this thing called it's called JavaScript",
    "start": "208739",
    "end": "210120"
  },
  {
    "text": "memory and we'll just do a simple test",
    "start": "210120",
    "end": "212159"
  },
  {
    "text": "and as you can see on my slower computer",
    "start": "212159",
    "end": "214260"
  },
  {
    "text": "we've started all these tests we're",
    "start": "214260",
    "end": "216659"
  },
  {
    "text": "running we're running we're running",
    "start": "216659",
    "end": "218099"
  },
  {
    "text": "we're running probably going to be a few",
    "start": "218099",
    "end": "220200"
  },
  {
    "text": "seconds my guess is that",
    "start": "220200",
    "end": "222120"
  },
  {
    "text": "there we go as you can see",
    "start": "222120",
    "end": "225239"
  },
  {
    "text": "what I work with at Netflix",
    "start": "225239",
    "end": "227340"
  },
  {
    "text": "is 577 milliseconds versus seven seconds",
    "start": "227340",
    "end": "232319"
  },
  {
    "text": "we're talking a plus 10x Improvement but",
    "start": "232319",
    "end": "235200"
  },
  {
    "text": "that goes way down as you get closer",
    "start": "235200",
    "end": "238379"
  },
  {
    "text": "it's not that reduce is slow as a but",
    "start": "238379",
    "end": "240480"
  },
  {
    "text": "here's the deal is this isn't even",
    "start": "240480",
    "end": "241620"
  },
  {
    "text": "showing you the real problem okay again",
    "start": "241620",
    "end": "244080"
  },
  {
    "text": "micro benchmarks remember micro",
    "start": "244080",
    "end": "246060"
  },
  {
    "text": "benchmarks be careful don't just look at",
    "start": "246060",
    "end": "248940"
  },
  {
    "text": "them right so with a huge array as you",
    "start": "248940",
    "end": "250980"
  },
  {
    "text": "can see it's like 10x and then only two",
    "start": "250980",
    "end": "253379"
  },
  {
    "text": "right oh look at this reduce is now look",
    "start": "253379",
    "end": "255599"
  },
  {
    "text": "at that reduce is looking faster here",
    "start": "255599",
    "end": "257400"
  },
  {
    "text": "huh that's weird no one knows what",
    "start": "257400",
    "end": "259739"
  },
  {
    "text": "happened there",
    "start": "259739",
    "end": "261540"
  },
  {
    "text": "right nobody knows what happened there",
    "start": "261540",
    "end": "264060"
  },
  {
    "text": "this is of course a one run you know but",
    "start": "264060",
    "end": "266820"
  },
  {
    "text": "anyways kind of interesting right",
    "start": "266820",
    "end": "268800"
  },
  {
    "text": "so",
    "start": "268800",
    "end": "270240"
  },
  {
    "text": "it's it's it's not as simple it's not as",
    "start": "270240",
    "end": "273180"
  },
  {
    "text": "simple right but anyways let's keep on",
    "start": "273180",
    "end": "274800"
  },
  {
    "text": "going dismal a dismal all right so let's",
    "start": "274800",
    "end": "277080"
  },
  {
    "text": "do this making the tan stack 1 000 X",
    "start": "277080",
    "end": "280500"
  },
  {
    "text": "faster with a one line change all right",
    "start": "280500",
    "end": "282840"
  },
  {
    "text": "hot dang hot dang Tanner Liz Tanner",
    "start": "282840",
    "end": "285660"
  },
  {
    "text": "Lindsley coming in should we get tanner",
    "start": "285660",
    "end": "287280"
  },
  {
    "text": "on the stream type one in the chat if",
    "start": "287280",
    "end": "288720"
  },
  {
    "text": "you'd like to hear Tanner just talk",
    "start": "288720",
    "end": "289800"
  },
  {
    "text": "about tan stack I think it'd be a lot of",
    "start": "289800",
    "end": "292199"
  },
  {
    "text": "fun uh Cool Tech",
    "start": "292199",
    "end": "295139"
  },
  {
    "text": "um smart guy I build out Falcor so I",
    "start": "295139",
    "end": "297180"
  },
  {
    "text": "should be able to have a lot of uh",
    "start": "297180",
    "end": "299100"
  },
  {
    "text": "ability to kind of talk about this",
    "start": "299100",
    "end": "302460"
  },
  {
    "text": "I even see some ones coming in all the",
    "start": "302460",
    "end": "304800"
  },
  {
    "text": "way over in the in the other Pond all",
    "start": "304800",
    "end": "306900"
  },
  {
    "text": "right a lot of ones okay a few minutes",
    "start": "306900",
    "end": "308520"
  },
  {
    "text": "back when I was working on JavaScript",
    "start": "308520",
    "end": "309780"
  },
  {
    "text": "front end for a large data set using the",
    "start": "309780",
    "end": "311759"
  },
  {
    "text": "tan stack uh the relevant constraints",
    "start": "311759",
    "end": "313740"
  },
  {
    "text": "were up to 50K rows of content grouped",
    "start": "313740",
    "end": "316080"
  },
  {
    "text": "up or grouped by up to three columns",
    "start": "316080",
    "end": "319380"
  },
  {
    "text": "okay so I don't really know how tan",
    "start": "319380",
    "end": "322080"
  },
  {
    "text": "stack works or really I've never even",
    "start": "322080",
    "end": "323759"
  },
  {
    "text": "tried using it by the way I didn't",
    "start": "323759",
    "end": "325080"
  },
  {
    "text": "realize that there was no music that's",
    "start": "325080",
    "end": "327120"
  },
  {
    "text": "weird anyways I'm gonna put it lightly",
    "start": "327120",
    "end": "328680"
  },
  {
    "text": "in the background just lightly in the",
    "start": "328680",
    "end": "330060"
  },
  {
    "text": "background okay",
    "start": "330060",
    "end": "333139"
  },
  {
    "text": "just lightly because we're reading",
    "start": "333360",
    "end": "335520"
  },
  {
    "text": "reading is boring without it all right",
    "start": "335520",
    "end": "337259"
  },
  {
    "text": "so all right so I don't really quite",
    "start": "337259",
    "end": "339000"
  },
  {
    "text": "understand this let's say using react",
    "start": "339000",
    "end": "340800"
  },
  {
    "text": "and a virtualized renderer showing 50k",
    "start": "340800",
    "end": "343020"
  },
  {
    "text": "rows was performing well",
    "start": "343020",
    "end": "346160"
  },
  {
    "text": "you know that you know that that Meme",
    "start": "347280",
    "end": "349080"
  },
  {
    "text": "with GIF with that with with doubt I'm",
    "start": "349080",
    "end": "352500"
  },
  {
    "text": "having a doubt coming in right now I'm",
    "start": "352500",
    "end": "354419"
  },
  {
    "text": "having a doubt going in hard right now",
    "start": "354419",
    "end": "357780"
  },
  {
    "text": "um but when tan stack table growing uh",
    "start": "357780",
    "end": "360240"
  },
  {
    "text": "feature was enabled I was seeing",
    "start": "360240",
    "end": "361560"
  },
  {
    "text": "slowdowns of a few thousand rows and",
    "start": "361560",
    "end": "363960"
  },
  {
    "text": "huge slowdowns on 50 000 rows it might",
    "start": "363960",
    "end": "366479"
  },
  {
    "text": "have gone unnoticed if it was a hundred",
    "start": "366479",
    "end": "368699"
  },
  {
    "text": "milliseconds or slower or even 500",
    "start": "368699",
    "end": "371160"
  },
  {
    "text": "milliseconds slower but in the worst",
    "start": "371160",
    "end": "372960"
  },
  {
    "text": "case renders would go from less than a",
    "start": "372960",
    "end": "375300"
  },
  {
    "text": "second without grouping up to 30 to 40",
    "start": "375300",
    "end": "378120"
  },
  {
    "text": "seconds with it yikes okay tracking down",
    "start": "378120",
    "end": "381720"
  },
  {
    "text": "the issue initially I tried to use",
    "start": "381720",
    "end": "383039"
  },
  {
    "text": "Chrome JavaScript uh profiler but but it",
    "start": "383039",
    "end": "385500"
  },
  {
    "text": "can be tough to use while the when the",
    "start": "385500",
    "end": "387419"
  },
  {
    "text": "performance is slow",
    "start": "387419",
    "end": "389880"
  },
  {
    "text": "okay so my guess is that he wasn't using",
    "start": "389880",
    "end": "392460"
  },
  {
    "text": "it correctly because this is actually",
    "start": "392460",
    "end": "393539"
  },
  {
    "text": "exactly what the performer so use the",
    "start": "393539",
    "end": "395220"
  },
  {
    "text": "performance profiler not the profiler",
    "start": "395220",
    "end": "397199"
  },
  {
    "text": "the performance Tab and the performance",
    "start": "397199",
    "end": "399360"
  },
  {
    "text": "tab will actually give you a timeline",
    "start": "399360",
    "end": "401280"
  },
  {
    "text": "and if you highlight over it it'll",
    "start": "401280",
    "end": "402660"
  },
  {
    "text": "actually not only give you a timeline",
    "start": "402660",
    "end": "403860"
  },
  {
    "text": "but exactly how like the aggregate time",
    "start": "403860",
    "end": "406740"
  },
  {
    "text": "of that as well within the stack it's",
    "start": "406740",
    "end": "409080"
  },
  {
    "text": "it's actually the easiest way to do it",
    "start": "409080",
    "end": "410699"
  },
  {
    "text": "uh the profiler adds a noticeable",
    "start": "410699",
    "end": "412380"
  },
  {
    "text": "overhead yes absolutely and that's okay",
    "start": "412380",
    "end": "413940"
  },
  {
    "text": "that's the thing is it's okay to add it",
    "start": "413940",
    "end": "415800"
  },
  {
    "text": "because it's about looking at",
    "start": "415800",
    "end": "417240"
  },
  {
    "text": "proportions it's not looking at",
    "start": "417240",
    "end": "419520"
  },
  {
    "text": "specifics that's the that's the real",
    "start": "419520",
    "end": "421860"
  },
  {
    "text": "that's the real key I'm very curious",
    "start": "421860",
    "end": "424139"
  },
  {
    "text": "about this whole unusable business I'd",
    "start": "424139",
    "end": "425639"
  },
  {
    "text": "like to actually see if it's unusable",
    "start": "425639",
    "end": "426960"
  },
  {
    "text": "enable let's say unable to profile I",
    "start": "426960",
    "end": "428880"
  },
  {
    "text": "reach for an old simple handy",
    "start": "428880",
    "end": "430020"
  },
  {
    "text": "console.time this is a great this is",
    "start": "430020",
    "end": "431699"
  },
  {
    "text": "also a great way to do things great way",
    "start": "431699",
    "end": "433560"
  },
  {
    "text": "to do things expensive code expensive",
    "start": "433560",
    "end": "435360"
  },
  {
    "text": "code yep all right perfect a side note",
    "start": "435360",
    "end": "437639"
  },
  {
    "text": "about optimizing code as a programmers",
    "start": "437639",
    "end": "439080"
  },
  {
    "text": "we're full of ideas about what needs to",
    "start": "439080",
    "end": "440520"
  },
  {
    "text": "be optimized and are terrible at getting",
    "start": "440520",
    "end": "441720"
  },
  {
    "text": "it right okay remember my prediction",
    "start": "441720",
    "end": "445319"
  },
  {
    "text": "it turns on your bad feelings and the",
    "start": "445319",
    "end": "447479"
  },
  {
    "text": "good feelings",
    "start": "447479",
    "end": "448740"
  },
  {
    "text": "it's a nightmare oh my goodness I forgot",
    "start": "448740",
    "end": "451139"
  },
  {
    "text": "to turn off alerts hey thank you very",
    "start": "451139",
    "end": "452759"
  },
  {
    "text": "much I appreciate that but I gotta turn",
    "start": "452759",
    "end": "453960"
  },
  {
    "text": "off alerts for a second um let's see so",
    "start": "453960",
    "end": "455819"
  },
  {
    "text": "my guess again spread operator",
    "start": "455819",
    "end": "458220"
  },
  {
    "text": "because that's like that's memory that",
    "start": "458220",
    "end": "460020"
  },
  {
    "text": "you don't realize how much memory is",
    "start": "460020",
    "end": "461580"
  },
  {
    "text": "actually being created there like it's",
    "start": "461580",
    "end": "463319"
  },
  {
    "text": "so much memory",
    "start": "463319",
    "end": "464759"
  },
  {
    "text": "a clone",
    "start": "464759",
    "end": "466500"
  },
  {
    "text": "or a bunch of Loops in a time in one of",
    "start": "466500",
    "end": "469380"
  },
  {
    "text": "the hottest spots that are running over",
    "start": "469380",
    "end": "470880"
  },
  {
    "text": "and over again that are creating a bunch",
    "start": "470880",
    "end": "472199"
  },
  {
    "text": "of garbage right and you're kicking off",
    "start": "472199",
    "end": "474360"
  },
  {
    "text": "huge GCS but since it's so high since",
    "start": "474360",
    "end": "477060"
  },
  {
    "text": "they're talking about 30 or 40 seconds",
    "start": "477060",
    "end": "478560"
  },
  {
    "text": "as opposed to an amortized amount it has",
    "start": "478560",
    "end": "481560"
  },
  {
    "text": "to be it has to be a spread or a clone",
    "start": "481560",
    "end": "483599"
  },
  {
    "text": "because that's the only thing that's",
    "start": "483599",
    "end": "484979"
  },
  {
    "text": "going to cause such terrible performance",
    "start": "484979",
    "end": "487020"
  },
  {
    "text": "difference uh let's see we make educated",
    "start": "487020",
    "end": "489060"
  },
  {
    "text": "guesses at what is important to optimize",
    "start": "489060",
    "end": "490620"
  },
  {
    "text": "and where the problem is and until we",
    "start": "490620",
    "end": "492120"
  },
  {
    "text": "measure we're usually wrong I try now to",
    "start": "492120",
    "end": "494880"
  },
  {
    "text": "wrap everything possible in a benchmark",
    "start": "494880",
    "end": "496319"
  },
  {
    "text": "to make sure I'm doing it uh in the",
    "start": "496319",
    "end": "498180"
  },
  {
    "text": "right place so this is dangerous again",
    "start": "498180",
    "end": "499919"
  },
  {
    "text": "always be careful about this micro",
    "start": "499919",
    "end": "501539"
  },
  {
    "text": "benchmarks extremely misleading uh I'll",
    "start": "501539",
    "end": "505020"
  },
  {
    "text": "give you some reasons why a micro",
    "start": "505020",
    "end": "507060"
  },
  {
    "text": "Benchmark when you run it in by itself",
    "start": "507060",
    "end": "509039"
  },
  {
    "text": "it could actually create a bunch of",
    "start": "509039",
    "end": "511800"
  },
  {
    "text": "garbage but the duration of a micro",
    "start": "511800",
    "end": "513959"
  },
  {
    "text": "Benchmark does not get affected by GC",
    "start": "513959",
    "end": "516599"
  },
  {
    "text": "and so you run into this worst case",
    "start": "516599",
    "end": "518399"
  },
  {
    "text": "situation where it looks better on paper",
    "start": "518399",
    "end": "520399"
  },
  {
    "text": "worse in production",
    "start": "520399",
    "end": "522779"
  },
  {
    "text": "got to be careful about that and it can",
    "start": "522779",
    "end": "524459"
  },
  {
    "text": "and here's the worst part about that is",
    "start": "524459",
    "end": "526320"
  },
  {
    "text": "it won't show up on the client because",
    "start": "526320",
    "end": "527880"
  },
  {
    "text": "the client's largely unaffected by a lot",
    "start": "527880",
    "end": "529680"
  },
  {
    "text": "of these GCS other than when you're",
    "start": "529680",
    "end": "531120"
  },
  {
    "text": "scrolling but it it shows up heavily in",
    "start": "531120",
    "end": "534060"
  },
  {
    "text": "requests per second to a server that's",
    "start": "534060",
    "end": "536220"
  },
  {
    "text": "where it really really becomes obvious",
    "start": "536220",
    "end": "538920"
  },
  {
    "text": "the design decisions you have made",
    "start": "538920",
    "end": "542279"
  },
  {
    "text": "the name is the prime machine press like",
    "start": "542279",
    "end": "544200"
  },
  {
    "text": "or subscribe got him where's that twitch",
    "start": "544200",
    "end": "546839"
  },
  {
    "text": "private baby",
    "start": "546839",
    "end": "548700"
  },
  {
    "text": "all right",
    "start": "548700",
    "end": "550019"
  },
  {
    "text": "um let's see now let's see now let's add",
    "start": "550019",
    "end": "552000"
  },
  {
    "text": "okay uh here we go let's see and then",
    "start": "552000",
    "end": "553800"
  },
  {
    "text": "start narrowing The Benchmark inside the",
    "start": "553800",
    "end": "555540"
  },
  {
    "text": "code from there when tracking down",
    "start": "555540",
    "end": "557100"
  },
  {
    "text": "performance issues this would be a",
    "start": "557100",
    "end": "558480"
  },
  {
    "text": "general outline",
    "start": "558480",
    "end": "560339"
  },
  {
    "text": "okay okay okay",
    "start": "560339",
    "end": "562800"
  },
  {
    "text": "you're just effectively rebuilding a",
    "start": "562800",
    "end": "564660"
  },
  {
    "text": "flame graph I see I see I see uh good",
    "start": "564660",
    "end": "566940"
  },
  {
    "text": "good time you could have used actual the",
    "start": "566940",
    "end": "568560"
  },
  {
    "text": "actual node flame graphs at this point",
    "start": "568560",
    "end": "570300"
  },
  {
    "text": "if you couldn't do so so good side note",
    "start": "570300",
    "end": "572459"
  },
  {
    "text": "here if the JavaScript profiler which",
    "start": "572459",
    "end": "574740"
  },
  {
    "text": "indeed does add a lot of overhead",
    "start": "574740",
    "end": "576420"
  },
  {
    "text": "doesn't work for you you can enable uh",
    "start": "576420",
    "end": "578640"
  },
  {
    "text": "perf basic profs and pipe the stuff the",
    "start": "578640",
    "end": "581040"
  },
  {
    "text": "perf utility and you can actually",
    "start": "581040",
    "end": "582600"
  },
  {
    "text": "generate flame graphs and this will give",
    "start": "582600",
    "end": "584700"
  },
  {
    "text": "you a lot of idea where your code's",
    "start": "584700",
    "end": "586620"
  },
  {
    "text": "going fast or slow you know just another",
    "start": "586620",
    "end": "588720"
  },
  {
    "text": "thing because that's going to be using",
    "start": "588720",
    "end": "590040"
  },
  {
    "text": "you know that's going to be using",
    "start": "590040",
    "end": "591120"
  },
  {
    "text": "d-trace and all the stuff deep under the",
    "start": "591120",
    "end": "593220"
  },
  {
    "text": "hood as opposed to something that's not",
    "start": "593220",
    "end": "596040"
  },
  {
    "text": "as good you know what I mean because the",
    "start": "596040",
    "end": "597899"
  },
  {
    "text": "thing about like the performance",
    "start": "597899",
    "end": "599040"
  },
  {
    "text": "analyzer that's weird in the JavaScript",
    "start": "599040",
    "end": "600959"
  },
  {
    "text": "profiler is that it actually measures",
    "start": "600959",
    "end": "603120"
  },
  {
    "text": "every single call along the way right",
    "start": "603120",
    "end": "604980"
  },
  {
    "text": "it's doing everything whereas perf it",
    "start": "604980",
    "end": "607019"
  },
  {
    "text": "doesn't do that you say hey give me a",
    "start": "607019",
    "end": "608940"
  },
  {
    "text": "stack Trace uh every like 99 times a",
    "start": "608940",
    "end": "612360"
  },
  {
    "text": "second and what that's going to do is",
    "start": "612360",
    "end": "614040"
  },
  {
    "text": "it's going to ask for a stack Trace 99",
    "start": "614040",
    "end": "615660"
  },
  {
    "text": "times a second but you may call a",
    "start": "615660",
    "end": "617820"
  },
  {
    "text": "hundred thousand functions so the",
    "start": "617820",
    "end": "619380"
  },
  {
    "text": "difference between the performance doing",
    "start": "619380",
    "end": "621420"
  },
  {
    "text": "a hundred thousand operations versus",
    "start": "621420",
    "end": "623700"
  },
  {
    "text": "something that's just going hey what's",
    "start": "623700",
    "end": "625080"
  },
  {
    "text": "your stack Trace hey what's your stack",
    "start": "625080",
    "end": "626640"
  },
  {
    "text": "Trace very very different in performance",
    "start": "626640",
    "end": "628860"
  },
  {
    "text": "this will largely you know keep the",
    "start": "628860",
    "end": "631380"
  },
  {
    "text": "performance mostly in in line and then",
    "start": "631380",
    "end": "633959"
  },
  {
    "text": "you just measure for a long period",
    "start": "633959",
    "end": "635399"
  },
  {
    "text": "longer period of time have it run a",
    "start": "635399",
    "end": "637560"
  },
  {
    "text": "million times have it run so much right",
    "start": "637560",
    "end": "640800"
  },
  {
    "text": "all right anyways sorry we'll keep on",
    "start": "640800",
    "end": "642540"
  },
  {
    "text": "going all right back to the table",
    "start": "642540",
    "end": "643560"
  },
  {
    "text": "rendering as usual before measuring all",
    "start": "643560",
    "end": "645660"
  },
  {
    "text": "my guesses at the potential performances",
    "start": "645660",
    "end": "647220"
  },
  {
    "text": "were wrong yep my own code is fine this",
    "start": "647220",
    "end": "649560"
  },
  {
    "text": "is the case where it usually uh is",
    "start": "649560",
    "end": "651480"
  },
  {
    "text": "actually a library bug which was a",
    "start": "651480",
    "end": "653940"
  },
  {
    "text": "surprise but there was no code path I",
    "start": "653940",
    "end": "656100"
  },
  {
    "text": "could find that was performing poorly",
    "start": "656100",
    "end": "657420"
  },
  {
    "text": "and all the time was let's see of all",
    "start": "657420",
    "end": "658980"
  },
  {
    "text": "the time that was spent in the library",
    "start": "658980",
    "end": "660000"
  },
  {
    "text": "when using tan stack table in react all",
    "start": "660000",
    "end": "662880"
  },
  {
    "text": "of the logic happens pretty centralized",
    "start": "662880",
    "end": "664380"
  },
  {
    "text": "place the react table the use react",
    "start": "664380",
    "end": "666720"
  },
  {
    "text": "table hook so it's easy to see the time",
    "start": "666720",
    "end": "668640"
  },
  {
    "text": "was there okay",
    "start": "668640",
    "end": "670200"
  },
  {
    "text": "gosh I hate react code like the I I hate",
    "start": "670200",
    "end": "674160"
  },
  {
    "text": "Hooks and how they work",
    "start": "674160",
    "end": "676200"
  },
  {
    "text": "there's so many things about this that I",
    "start": "676200",
    "end": "678000"
  },
  {
    "text": "think is just disgusting anyways one of",
    "start": "678000",
    "end": "680100"
  },
  {
    "text": "the nicest things about developing",
    "start": "680100",
    "end": "681180"
  },
  {
    "text": "JavaScript with packages is that at any",
    "start": "681180",
    "end": "683040"
  },
  {
    "text": "time I can open up node modules folder",
    "start": "683040",
    "end": "684720"
  },
  {
    "text": "and play around with third-party code in",
    "start": "684720",
    "end": "685980"
  },
  {
    "text": "this case has modified the 10 stack",
    "start": "685980",
    "end": "687300"
  },
  {
    "text": "table source code directly to add some",
    "start": "687300",
    "end": "688620"
  },
  {
    "text": "timing information this is nice I will",
    "start": "688620",
    "end": "690420"
  },
  {
    "text": "say that this is one of the nicest Parts",
    "start": "690420",
    "end": "691800"
  },
  {
    "text": "about working with a dynamic language is",
    "start": "691800",
    "end": "694500"
  },
  {
    "text": "the fact that because it's interpreted",
    "start": "694500",
    "end": "696300"
  },
  {
    "text": "first run maybe even several runs",
    "start": "696300",
    "end": "698700"
  },
  {
    "text": "depending on the size of your function",
    "start": "698700",
    "end": "699899"
  },
  {
    "text": "uh actually it's really the amount of",
    "start": "699899",
    "end": "701700"
  },
  {
    "text": "characters within your function actually",
    "start": "701700",
    "end": "702899"
  },
  {
    "text": "determines uh how fast it can get jitted",
    "start": "702899",
    "end": "704820"
  },
  {
    "text": "and the arguments going into it either",
    "start": "704820",
    "end": "707040"
  },
  {
    "text": "way this right here is really super cool",
    "start": "707040",
    "end": "709260"
  },
  {
    "text": "I love that uh turning on grouping was",
    "start": "709260",
    "end": "712200"
  },
  {
    "text": "uh when everything slowed down so it",
    "start": "712200",
    "end": "714060"
  },
  {
    "text": "made most sense to start timing that",
    "start": "714060",
    "end": "715560"
  },
  {
    "text": "code this is an abbreviated version of",
    "start": "715560",
    "end": "717420"
  },
  {
    "text": "the group row source code with my first",
    "start": "717420",
    "end": "719700"
  },
  {
    "text": "pass at timing what I thought was like",
    "start": "719700",
    "end": "722040"
  },
  {
    "text": "the likeliest call for us pay attention",
    "start": "722040",
    "end": "723660"
  },
  {
    "text": "primarily to console.time statements you",
    "start": "723660",
    "end": "725339"
  },
  {
    "text": "don't have to understand everything",
    "start": "725339",
    "end": "726240"
  },
  {
    "text": "that's going on okay so you do the",
    "start": "726240",
    "end": "727980"
  },
  {
    "text": "everything you do the filter you do the",
    "start": "727980",
    "end": "729899"
  },
  {
    "text": "grouping filter sub row",
    "start": "729899",
    "end": "732839"
  },
  {
    "text": "aggregated row cursively okay so he's",
    "start": "732839",
    "end": "735480"
  },
  {
    "text": "going he's doing like the whole nine",
    "start": "735480",
    "end": "736560"
  },
  {
    "text": "yards here he's getting everything",
    "start": "736560",
    "end": "738480"
  },
  {
    "text": "let's see do we see any of my general",
    "start": "738480",
    "end": "740160"
  },
  {
    "text": "culprits do we see a clone in here do we",
    "start": "740160",
    "end": "742560"
  },
  {
    "text": "see a structured clone group up",
    "start": "742560",
    "end": "744180"
  },
  {
    "text": "recursively no uh I always hate seeing",
    "start": "744180",
    "end": "748019"
  },
  {
    "text": "just functions created in functions uh",
    "start": "748019",
    "end": "750480"
  },
  {
    "text": "there we go subros group up recursively",
    "start": "750480",
    "end": "752820"
  },
  {
    "text": "oh see that's it like this is just such",
    "start": "752820",
    "end": "755220"
  },
  {
    "text": "a",
    "start": "755220",
    "end": "756600"
  },
  {
    "text": "such a dirty piece of code anyways",
    "start": "756600",
    "end": "758700"
  },
  {
    "text": "existing groups groups groups groups",
    "start": "758700",
    "end": "760680"
  },
  {
    "text": "groups groups groups okay look at this",
    "start": "760680",
    "end": "762720"
  },
  {
    "text": "array Dot from entries this right here",
    "start": "762720",
    "end": "764700"
  },
  {
    "text": "seems really dangerous like right away I",
    "start": "764700",
    "end": "766560"
  },
  {
    "text": "feel like this is a this is a naughty",
    "start": "766560",
    "end": "768360"
  },
  {
    "text": "line of code right because not only that",
    "start": "768360",
    "end": "770040"
  },
  {
    "text": "but then you also you also map over it",
    "start": "770040",
    "end": "772260"
  },
  {
    "text": "and you create a",
    "start": "772260",
    "end": "775019"
  },
  {
    "text": "what the hell are you creating what the",
    "start": "775019",
    "end": "777420"
  },
  {
    "text": "hell is this right so this is just",
    "start": "777420",
    "end": "778980"
  },
  {
    "text": "copies of copies of copies right gotta",
    "start": "778980",
    "end": "780779"
  },
  {
    "text": "be very careful about this anyways my",
    "start": "780779",
    "end": "782579"
  },
  {
    "text": "hunch was that that the group up",
    "start": "782579",
    "end": "784260"
  },
  {
    "text": "recursively function was to blame it",
    "start": "784260",
    "end": "786000"
  },
  {
    "text": "made logical sense that tens of",
    "start": "786000",
    "end": "787139"
  },
  {
    "text": "thousands of recursive calls could cause",
    "start": "787139",
    "end": "788519"
  },
  {
    "text": "a Slowdown uh yeah that's not okay the",
    "start": "788519",
    "end": "791339"
  },
  {
    "text": "first pass uh was a bust it logged",
    "start": "791339",
    "end": "793079"
  },
  {
    "text": "thousands of the subro timers yeah see I",
    "start": "793079",
    "end": "795600"
  },
  {
    "text": "wouldn't be so sub row timers I probably",
    "start": "795600",
    "end": "797459"
  },
  {
    "text": "wouldn't have done this seems kind of",
    "start": "797459",
    "end": "799139"
  },
  {
    "text": "boring",
    "start": "799139",
    "end": "800519"
  },
  {
    "text": "um I would have yeah it seems boring the",
    "start": "800519",
    "end": "803459"
  },
  {
    "text": "only thing I worry about is this thing",
    "start": "803459",
    "end": "804720"
  },
  {
    "text": "right here it just seems like yeah",
    "start": "804720",
    "end": "806220"
  },
  {
    "text": "that's gonna cause a lot of memory but",
    "start": "806220",
    "end": "807839"
  },
  {
    "text": "maybe that's all wrong maybe it's",
    "start": "807839",
    "end": "808920"
  },
  {
    "text": "somewhere deeper first pass is a bus log",
    "start": "808920",
    "end": "810839"
  },
  {
    "text": "that every time iterations was fast and",
    "start": "810839",
    "end": "812760"
  },
  {
    "text": "there were too many of them to be useful",
    "start": "812760",
    "end": "814019"
  },
  {
    "text": "so I cut it yeah so this is where",
    "start": "814019",
    "end": "815519"
  },
  {
    "text": "knowing how to use a good uh command",
    "start": "815519",
    "end": "817740"
  },
  {
    "text": "line utility would be very useful so to",
    "start": "817740",
    "end": "819899"
  },
  {
    "text": "be able to pipe in that uh pipe this in",
    "start": "819899",
    "end": "822959"
  },
  {
    "text": "to a",
    "start": "822959",
    "end": "825120"
  },
  {
    "text": "uh like to awk and then just pluck out",
    "start": "825120",
    "end": "829440"
  },
  {
    "text": "the times and sum them all together",
    "start": "829440",
    "end": "833399"
  },
  {
    "text": "I really do the actually so that's one",
    "start": "833399",
    "end": "834839"
  },
  {
    "text": "thing I'm very excited about copilot I",
    "start": "834839",
    "end": "836519"
  },
  {
    "text": "really do want to try copilot CLI",
    "start": "836519",
    "end": "838079"
  },
  {
    "text": "because it's going to give you a lot of",
    "start": "838079",
    "end": "839700"
  },
  {
    "text": "it's going to give a lot of people fresh",
    "start": "839700",
    "end": "842100"
  },
  {
    "text": "access to a set of utilities that have",
    "start": "842100",
    "end": "843899"
  },
  {
    "text": "been around for five decades right it's",
    "start": "843899",
    "end": "846000"
  },
  {
    "text": "gonna be fantastic",
    "start": "846000",
    "end": "847380"
  },
  {
    "text": "all right blah blah blah blah",
    "start": "847380",
    "end": "849660"
  },
  {
    "text": "are removing that uh I started to get",
    "start": "849660",
    "end": "851459"
  },
  {
    "text": "closer I was accounting for most the",
    "start": "851459",
    "end": "853560"
  },
  {
    "text": "time but I had two problems I wasn't",
    "start": "853560",
    "end": "855300"
  },
  {
    "text": "counting for all the time everything was",
    "start": "855300",
    "end": "857220"
  },
  {
    "text": "33 seconds group up recursively was only",
    "start": "857220",
    "end": "859200"
  },
  {
    "text": "23 seconds and the chunk of time I was",
    "start": "859200",
    "end": "860820"
  },
  {
    "text": "logging was too large to uh to usefully",
    "start": "860820",
    "end": "863700"
  },
  {
    "text": "identify the problem yes exactly that",
    "start": "863700",
    "end": "865620"
  },
  {
    "text": "makes sense I realized I had missed a",
    "start": "865620",
    "end": "867180"
  },
  {
    "text": "function call a little unassuming a",
    "start": "867180",
    "end": "868980"
  },
  {
    "text": "function called Group by I added the",
    "start": "868980",
    "end": "871560"
  },
  {
    "text": "console time blocks Rose Group by",
    "start": "871560",
    "end": "873540"
  },
  {
    "text": "columns row by this one got it almost",
    "start": "873540",
    "end": "876000"
  },
  {
    "text": "the entire 31 seconds was concentrated",
    "start": "876000",
    "end": "877860"
  },
  {
    "text": "into three calls group I",
    "start": "877860",
    "end": "880139"
  },
  {
    "text": "nice nice nice okay awesome this is",
    "start": "880139",
    "end": "883320"
  },
  {
    "text": "great to see so let's see for each",
    "start": "883320",
    "end": "885060"
  },
  {
    "text": "grouped column it was calling group I",
    "start": "885060",
    "end": "886740"
  },
  {
    "text": "and for each call took roughly 10",
    "start": "886740",
    "end": "888240"
  },
  {
    "text": "seconds so what the heck was going on in",
    "start": "888240",
    "end": "889980"
  },
  {
    "text": "the group by function all right let me",
    "start": "889980",
    "end": "891779"
  },
  {
    "text": "see and look at this I always warn you",
    "start": "891779",
    "end": "894899"
  },
  {
    "text": "remember memory",
    "start": "894899",
    "end": "898380"
  },
  {
    "text": "why are you copying and resetting into a",
    "start": "899399",
    "end": "902040"
  },
  {
    "text": "row",
    "start": "902040",
    "end": "903180"
  },
  {
    "text": "why are you not pushing",
    "start": "903180",
    "end": "906060"
  },
  {
    "text": "just push the F and key",
    "start": "906060",
    "end": "909680"
  },
  {
    "text": "push the F why would you create a new",
    "start": "910139",
    "end": "912180"
  },
  {
    "text": "key just push it's it's already here you",
    "start": "912180",
    "end": "914100"
  },
  {
    "text": "could just mutate that son of a",
    "start": "914100",
    "end": "917100"
  },
  {
    "text": "I started chopping up the function I so",
    "start": "917100",
    "end": "919500"
  },
  {
    "text": "let's see I switched the map to be an",
    "start": "919500",
    "end": "920940"
  },
  {
    "text": "option okay so map to object literal",
    "start": "920940",
    "end": "922680"
  },
  {
    "text": "will always be slower it will 100 be",
    "start": "922680",
    "end": "925560"
  },
  {
    "text": "slower always a for Loop to reduce so",
    "start": "925560",
    "end": "928320"
  },
  {
    "text": "this is bad okay okay so this is good",
    "start": "928320",
    "end": "929820"
  },
  {
    "text": "that he's experimenting that he's",
    "start": "929820",
    "end": "930899"
  },
  {
    "text": "understanding",
    "start": "930899",
    "end": "932040"
  },
  {
    "text": "the problem is is that's not meaningful",
    "start": "932040",
    "end": "933839"
  },
  {
    "text": "a a for Loop to a reduce will not cause",
    "start": "933839",
    "end": "936839"
  },
  {
    "text": "that many seconds unless if you're",
    "start": "936839",
    "end": "938160"
  },
  {
    "text": "iterating over it like we showed like",
    "start": "938160",
    "end": "939899"
  },
  {
    "text": "millions of items so this is not",
    "start": "939899",
    "end": "943079"
  },
  {
    "text": "Millions so something's wrong here now",
    "start": "943079",
    "end": "945180"
  },
  {
    "text": "there could be a slight speed up in not",
    "start": "945180",
    "end": "946680"
  },
  {
    "text": "using a reduce and just using a for Loop",
    "start": "946680",
    "end": "948480"
  },
  {
    "text": "right since you're going over 50 000",
    "start": "948480",
    "end": "950100"
  },
  {
    "text": "rows potentially you can see there could",
    "start": "950100",
    "end": "951959"
  },
  {
    "text": "be some millisecond differences there",
    "start": "951959",
    "end": "953459"
  },
  {
    "text": "maybe like a tenth of a millisecond but",
    "start": "953459",
    "end": "955740"
  },
  {
    "text": "not enough to really call home phone it",
    "start": "955740",
    "end": "957600"
  },
  {
    "text": "in call it great uh let's see those",
    "start": "957600",
    "end": "959880"
  },
  {
    "text": "those had no effects so next I started",
    "start": "959880",
    "end": "962639"
  },
  {
    "text": "commenting out all the lines of the",
    "start": "962639",
    "end": "963660"
  },
  {
    "text": "function when I come into this line",
    "start": "963660",
    "end": "964920"
  },
  {
    "text": "everything finished instantaneously yeah",
    "start": "964920",
    "end": "967199"
  },
  {
    "text": "what's the purpose of that line and why",
    "start": "967199",
    "end": "968760"
  },
  {
    "text": "was it slow okay there you go on each",
    "start": "968760",
    "end": "971040"
  },
  {
    "text": "iteration of the reduced call code uh",
    "start": "971040",
    "end": "973440"
  },
  {
    "text": "use the value that the column cell has a",
    "start": "973440",
    "end": "975060"
  },
  {
    "text": "map uh key let's say this Value New York",
    "start": "975060",
    "end": "978000"
  },
  {
    "text": "if there was no value Associated New",
    "start": "978000",
    "end": "979980"
  },
  {
    "text": "York we'd set a new value yep that makes",
    "start": "979980",
    "end": "981660"
  },
  {
    "text": "sense if there was already a value we",
    "start": "981660",
    "end": "983579"
  },
  {
    "text": "would use the JavaScript stupid operator",
    "start": "983579",
    "end": "985680"
  },
  {
    "text": "to concatenate the road on the end",
    "start": "985680",
    "end": "988139"
  },
  {
    "text": "dude push mutate",
    "start": "988139",
    "end": "992220"
  },
  {
    "text": "just mutate the effort object this means",
    "start": "992220",
    "end": "995339"
  },
  {
    "text": "that each iteration of the reduce the",
    "start": "995339",
    "end": "997259"
  },
  {
    "text": "spread operator was creating a new",
    "start": "997259",
    "end": "998639"
  },
  {
    "text": "incrementally larger array getting",
    "start": "998639",
    "end": "1000139"
  },
  {
    "text": "slower each iteration yes it would yes",
    "start": "1000139",
    "end": "1002839"
  },
  {
    "text": "it would",
    "start": "1002839",
    "end": "1004880"
  },
  {
    "text": "what is the spread operation uh do",
    "start": "1004880",
    "end": "1007100"
  },
  {
    "text": "behind the scenes",
    "start": "1007100",
    "end": "1008720"
  },
  {
    "text": "it should be obvious exactly what it",
    "start": "1008720",
    "end": "1010639"
  },
  {
    "text": "does in our case the operator takes an",
    "start": "1010639",
    "end": "1012440"
  },
  {
    "text": "iterable object and Loops over and",
    "start": "1012440",
    "end": "1014000"
  },
  {
    "text": "creates a new array it's probably more",
    "start": "1014000",
    "end": "1016820"
  },
  {
    "text": "nuanced than this but the spread",
    "start": "1016820",
    "end": "1018019"
  },
  {
    "text": "operator is likely oven yes yes uh it's",
    "start": "1018019",
    "end": "1021259"
  },
  {
    "text": "always over and it's the size of the",
    "start": "1021259",
    "end": "1022639"
  },
  {
    "text": "memory it probably in this case I bet",
    "start": "1022639",
    "end": "1024798"
  },
  {
    "text": "you V8 can do something pretty smart",
    "start": "1024799",
    "end": "1026058"
  },
  {
    "text": "like mem copy but it still has to go and",
    "start": "1026059",
    "end": "1028880"
  },
  {
    "text": "allocate that memory it still has to go",
    "start": "1028880",
    "end": "1030558"
  },
  {
    "text": "off to the you know the the garbage",
    "start": "1030559",
    "end": "1032240"
  },
  {
    "text": "collector has to hold on to in some sort",
    "start": "1032240",
    "end": "1033860"
  },
  {
    "text": "of Nursery someone else has to allocate",
    "start": "1033860",
    "end": "1035900"
  },
  {
    "text": "that memory",
    "start": "1035900",
    "end": "1037160"
  },
  {
    "text": "you know there's a lot to it it probably",
    "start": "1037160",
    "end": "1038839"
  },
  {
    "text": "is more nuanced than this uh that means",
    "start": "1038839",
    "end": "1041000"
  },
  {
    "text": "the size of the array grows but probably",
    "start": "1041000",
    "end": "1042500"
  },
  {
    "text": "well it depends on the objects inside of",
    "start": "1042500",
    "end": "1044240"
  },
  {
    "text": "here if there are simple numbers if",
    "start": "1044240",
    "end": "1045860"
  },
  {
    "text": "they're all smes I bet you you could",
    "start": "1045860",
    "end": "1047720"
  },
  {
    "text": "just do something like mem copy but",
    "start": "1047720",
    "end": "1049400"
  },
  {
    "text": "probably they're not all smes they're",
    "start": "1049400",
    "end": "1050900"
  },
  {
    "text": "probably objects and then I think mem",
    "start": "1050900",
    "end": "1052940"
  },
  {
    "text": "copy can even take place right",
    "start": "1052940",
    "end": "1056179"
  },
  {
    "text": "maybe it could because you're only",
    "start": "1056179",
    "end": "1057500"
  },
  {
    "text": "copying pointers yeah why not why not",
    "start": "1057500",
    "end": "1059419"
  },
  {
    "text": "you probably just man copy it uh I'm",
    "start": "1059419",
    "end": "1061220"
  },
  {
    "text": "certain that there are let's see",
    "start": "1061220",
    "end": "1062360"
  },
  {
    "text": "additional efficiencies provided in the",
    "start": "1062360",
    "end": "1063919"
  },
  {
    "text": "language internals but the following",
    "start": "1063919",
    "end": "1065000"
  },
  {
    "text": "code is equivalent yes yes which means",
    "start": "1065000",
    "end": "1067760"
  },
  {
    "text": "the original version of group by code",
    "start": "1067760",
    "end": "1069080"
  },
  {
    "text": "was a functional equivalent yes this is",
    "start": "1069080",
    "end": "1070880"
  },
  {
    "text": "this is this is equivalent why would you",
    "start": "1070880",
    "end": "1073280"
  },
  {
    "text": "create a new array at all I don't",
    "start": "1073280",
    "end": "1075140"
  },
  {
    "text": "understand creating a new array I'm",
    "start": "1075140",
    "end": "1076820"
  },
  {
    "text": "super curious why you're creating a new",
    "start": "1076820",
    "end": "1078200"
  },
  {
    "text": "array",
    "start": "1078200",
    "end": "1079280"
  },
  {
    "text": "and the reason why I'm saying I'm super",
    "start": "1079280",
    "end": "1080539"
  },
  {
    "text": "curious about that is it like if you",
    "start": "1080539",
    "end": "1082700"
  },
  {
    "text": "look at the original code right here",
    "start": "1082700",
    "end": "1084980"
  },
  {
    "text": "there's no reason not to create a new",
    "start": "1084980",
    "end": "1086780"
  },
  {
    "text": "array you only need one array here why",
    "start": "1086780",
    "end": "1088940"
  },
  {
    "text": "are you creating a new array ever",
    "start": "1088940",
    "end": "1091340"
  },
  {
    "text": "right all right",
    "start": "1091340",
    "end": "1094360"
  },
  {
    "text": "no you don't even have to set the key",
    "start": "1094580",
    "end": "1096740"
  },
  {
    "text": "don't even set the key",
    "start": "1096740",
    "end": "1100000"
  },
  {
    "text": "don't even manually spread it",
    "start": "1101480",
    "end": "1105760"
  },
  {
    "text": "seeing the manual spread one uh one",
    "start": "1107120",
    "end": "1109039"
  },
  {
    "text": "thing sticks out uh immediately we have",
    "start": "1109039",
    "end": "1110720"
  },
  {
    "text": "a nested Loop of course that's how it",
    "start": "1110720",
    "end": "1112100"
  },
  {
    "text": "works a nested Loop is good uh is a good",
    "start": "1112100",
    "end": "1114260"
  },
  {
    "text": "shorthand for identifying one of the",
    "start": "1114260",
    "end": "1115880"
  },
  {
    "text": "slower forms over algorithmic complexity",
    "start": "1115880",
    "end": "1117919"
  },
  {
    "text": "of Big O complexity uh o of N squared",
    "start": "1117919",
    "end": "1120660"
  },
  {
    "text": "[Applause]",
    "start": "1120660",
    "end": "1122480"
  },
  {
    "text": "um this means that uh for an array a",
    "start": "1122480",
    "end": "1124940"
  },
  {
    "text": "size of 50 000 the number of iterations",
    "start": "1124940",
    "end": "1126919"
  },
  {
    "text": "would be fifty thousand uh this oh so I",
    "start": "1126919",
    "end": "1129919"
  },
  {
    "text": "mean",
    "start": "1129919",
    "end": "1131480"
  },
  {
    "text": "yeah it's technically and you know",
    "start": "1131480",
    "end": "1135080"
  },
  {
    "text": "there's that whole formula that whole n",
    "start": "1135080",
    "end": "1137179"
  },
  {
    "text": "times n plus one divided by two is",
    "start": "1137179",
    "end": "1139160"
  },
  {
    "text": "actually going on right here uh in our",
    "start": "1139160",
    "end": "1141260"
  },
  {
    "text": "specific case the array started out",
    "start": "1141260",
    "end": "1142700"
  },
  {
    "text": "empty and grew to the size of 50 000. it",
    "start": "1142700",
    "end": "1144440"
  },
  {
    "text": "wasn't uh quite as bad but technically",
    "start": "1144440",
    "end": "1146299"
  },
  {
    "text": "the complexity is still this yes which",
    "start": "1146299",
    "end": "1147740"
  },
  {
    "text": "is a lot so that's a lot you couldn't do",
    "start": "1147740",
    "end": "1150020"
  },
  {
    "text": "that blah blah blah blah pour one out",
    "start": "1150020",
    "end": "1151820"
  },
  {
    "text": "for the garbage collector on the",
    "start": "1151820",
    "end": "1152900"
  },
  {
    "text": "JavaScript runtime absolutely thank you",
    "start": "1152900",
    "end": "1154820"
  },
  {
    "text": "for recognizing this part that's the",
    "start": "1154820",
    "end": "1156620"
  },
  {
    "text": "most important part honestly I know that",
    "start": "1156620",
    "end": "1158299"
  },
  {
    "text": "was the most actually moment of the",
    "start": "1158299",
    "end": "1159620"
  },
  {
    "text": "stream ever huh honestly for how many",
    "start": "1159620",
    "end": "1161600"
  },
  {
    "text": "iterations and how much garbage uh was",
    "start": "1161600",
    "end": "1163520"
  },
  {
    "text": "accumulated it was operating quite well",
    "start": "1163520",
    "end": "1166820"
  },
  {
    "text": "so the question was what could be done",
    "start": "1166820",
    "end": "1168559"
  },
  {
    "text": "to improve it",
    "start": "1168559",
    "end": "1169700"
  },
  {
    "text": "spread is an immutable pattern so should",
    "start": "1169700",
    "end": "1172100"
  },
  {
    "text": "the code be kept immutable no",
    "start": "1172100",
    "end": "1175160"
  },
  {
    "text": "no it shouldn't it's a reduced it's X",
    "start": "1175160",
    "end": "1178580"
  },
  {
    "text": "it's not a pull bottle it's not a pull",
    "start": "1178580",
    "end": "1180440"
  },
  {
    "text": "bottle iterators are not or these aren't",
    "start": "1180440",
    "end": "1182299"
  },
  {
    "text": "iterators there's no pull bottles so you",
    "start": "1182299",
    "end": "1184100"
  },
  {
    "text": "you can you can look at a reduce as its",
    "start": "1184100",
    "end": "1186500"
  },
  {
    "text": "own like Atomic unit",
    "start": "1186500",
    "end": "1189140"
  },
  {
    "text": "um",
    "start": "1189140",
    "end": "1189860"
  },
  {
    "text": "aside from providing convenience Syntax",
    "start": "1189860",
    "end": "1191900"
  },
  {
    "text": "for combining intervals the spread",
    "start": "1191900",
    "end": "1193220"
  },
  {
    "text": "operator allows us to keep code",
    "start": "1193220",
    "end": "1194299"
  },
  {
    "text": "immutable Boo this is the benefit",
    "start": "1194299",
    "end": "1196340"
  },
  {
    "text": "because the immutable pattern means we",
    "start": "1196340",
    "end": "1198080"
  },
  {
    "text": "avoid mutations",
    "start": "1198080",
    "end": "1200620"
  },
  {
    "text": "by the way this sentence is like the",
    "start": "1200620",
    "end": "1202760"
  },
  {
    "text": "most hilarious sentence sorry the writer",
    "start": "1202760",
    "end": "1204559"
  },
  {
    "text": "I love your article I think you're doing",
    "start": "1204559",
    "end": "1206120"
  },
  {
    "text": "great I just think that this is a funny",
    "start": "1206120",
    "end": "1207620"
  },
  {
    "text": "sentence this is the benefit because the",
    "start": "1207620",
    "end": "1209299"
  },
  {
    "text": "immutable pattern means we avoid",
    "start": "1209299",
    "end": "1211160"
  },
  {
    "text": "mutations",
    "start": "1211160",
    "end": "1212240"
  },
  {
    "text": "I mean you use the definition inside",
    "start": "1212240",
    "end": "1214100"
  },
  {
    "text": "there by the way this article is very",
    "start": "1214100",
    "end": "1215720"
  },
  {
    "text": "good though I'm very happy that you're",
    "start": "1215720",
    "end": "1216860"
  },
  {
    "text": "discovering these things because this is",
    "start": "1216860",
    "end": "1217940"
  },
  {
    "text": "what we need more of in the JavaScript",
    "start": "1217940",
    "end": "1219080"
  },
  {
    "text": "Community the understanding that like",
    "start": "1219080",
    "end": "1220880"
  },
  {
    "text": "garbage is really important and not only",
    "start": "1220880",
    "end": "1223100"
  },
  {
    "text": "is garbage important linear linear",
    "start": "1223100",
    "end": "1225380"
  },
  {
    "text": "creation of garbage is extremely",
    "start": "1225380",
    "end": "1227120"
  },
  {
    "text": "important which means we don't change",
    "start": "1227120",
    "end": "1228740"
  },
  {
    "text": "data from underneath the code that we're",
    "start": "1228740",
    "end": "1230539"
  },
  {
    "text": "using it yes if this code was written to",
    "start": "1230539",
    "end": "1232400"
  },
  {
    "text": "be immutable there were some other",
    "start": "1232400",
    "end": "1233720"
  },
  {
    "text": "options we could try to improve the",
    "start": "1233720",
    "end": "1235100"
  },
  {
    "text": "performance just push it in just push it",
    "start": "1235100",
    "end": "1237440"
  },
  {
    "text": "in holy cow hey uh too long um I'm sorry",
    "start": "1237440",
    "end": "1240380"
  },
  {
    "text": "for you or I'm or I'm happy or",
    "start": "1240380",
    "end": "1243320"
  },
  {
    "text": "congratulations or I'm sorry for you",
    "start": "1243320",
    "end": "1246080"
  },
  {
    "text": "nope the concat is just going to cause",
    "start": "1246080",
    "end": "1247880"
  },
  {
    "text": "the same problem don't do it yeah look",
    "start": "1247880",
    "end": "1250520"
  },
  {
    "text": "at that concat just as slow uh don't",
    "start": "1250520",
    "end": "1252620"
  },
  {
    "text": "manually do it it makes no sense concat",
    "start": "1252620",
    "end": "1255020"
  },
  {
    "text": "Road don't",
    "start": "1255020",
    "end": "1256880"
  },
  {
    "text": "I don't understand why that one somehow",
    "start": "1256880",
    "end": "1258980"
  },
  {
    "text": "faster",
    "start": "1258980",
    "end": "1260660"
  },
  {
    "text": "I don't even get it at all yeah just",
    "start": "1260660",
    "end": "1262520"
  },
  {
    "text": "push just push",
    "start": "1262520",
    "end": "1265400"
  },
  {
    "text": "just push it",
    "start": "1265400",
    "end": "1267320"
  },
  {
    "text": "just push the damn thing",
    "start": "1267320",
    "end": "1269960"
  },
  {
    "text": "ah uh array from slice concat all have",
    "start": "1269960",
    "end": "1273620"
  },
  {
    "text": "the same performance characteristics as",
    "start": "1273620",
    "end": "1274940"
  },
  {
    "text": "the spread operator of course they do a",
    "start": "1274940",
    "end": "1276260"
  },
  {
    "text": "slice is literally just creating a copy",
    "start": "1276260",
    "end": "1278000"
  },
  {
    "text": "taking an iterator I bet you just taking",
    "start": "1278000",
    "end": "1280460"
  },
  {
    "text": "an iterator and spreading it into a new",
    "start": "1280460",
    "end": "1282200"
  },
  {
    "text": "array calls the same code AS slice zero",
    "start": "1282200",
    "end": "1284179"
  },
  {
    "text": "which calls the same code as pretty much",
    "start": "1284179",
    "end": "1285919"
  },
  {
    "text": "concatened nothing all right I bet you",
    "start": "1285919",
    "end": "1287480"
  },
  {
    "text": "it's all the same thing Amber I'm not",
    "start": "1287480",
    "end": "1289039"
  },
  {
    "text": "really sure what the hell ammer is uh",
    "start": "1289039",
    "end": "1291080"
  },
  {
    "text": "using the inner node package oh dear",
    "start": "1291080",
    "end": "1293480"
  },
  {
    "text": "gosh don't do that what do you mean the",
    "start": "1293480",
    "end": "1295400"
  },
  {
    "text": "immr what the hell is emmer",
    "start": "1295400",
    "end": "1297980"
  },
  {
    "text": "what what the ever",
    "start": "1297980",
    "end": "1301960"
  },
  {
    "text": "a manual for Loop was the slowest option",
    "start": "1301960",
    "end": "1304460"
  },
  {
    "text": "of course you know why was the manual",
    "start": "1304460",
    "end": "1305900"
  },
  {
    "text": "anyone anyone in here why is this the",
    "start": "1305900",
    "end": "1307820"
  },
  {
    "text": "slowest option anyone speak up right now",
    "start": "1307820",
    "end": "1309740"
  },
  {
    "text": "why is this the slowest option",
    "start": "1309740",
    "end": "1311480"
  },
  {
    "text": "anyone say right now say it right now",
    "start": "1311480",
    "end": "1313880"
  },
  {
    "text": "why is this the slow the slowest",
    "start": "1313880",
    "end": "1316220"
  },
  {
    "text": "because it's stinky variable",
    "start": "1316220",
    "end": "1317780"
  },
  {
    "text": "initialization you're allocating memory",
    "start": "1317780",
    "end": "1320299"
  },
  {
    "text": "each iteration",
    "start": "1320299",
    "end": "1322220"
  },
  {
    "text": "yes okay so uh yeah so Alex so you don't",
    "start": "1322220",
    "end": "1325039"
  },
  {
    "text": "allocate memory each iteration but",
    "start": "1325039",
    "end": "1326659"
  },
  {
    "text": "that's a good point out a raise that",
    "start": "1326659",
    "end": "1328400"
  },
  {
    "text": "just like just like in Rust they have a",
    "start": "1328400",
    "end": "1330320"
  },
  {
    "text": "capacities you can actually see the",
    "start": "1330320",
    "end": "1331460"
  },
  {
    "text": "capacity if you ever get into the engine",
    "start": "1331460",
    "end": "1333260"
  },
  {
    "text": "and put print statements as you push",
    "start": "1333260",
    "end": "1335299"
  },
  {
    "text": "things in there's like these little",
    "start": "1335299",
    "end": "1336380"
  },
  {
    "text": "thresholds that exist so when you create",
    "start": "1336380",
    "end": "1337820"
  },
  {
    "text": "an array usually it's like five elements",
    "start": "1337820",
    "end": "1339679"
  },
  {
    "text": "are pre-created five pointers to objects",
    "start": "1339679",
    "end": "1341720"
  },
  {
    "text": "are created for you and as you fill it",
    "start": "1341720",
    "end": "1343580"
  },
  {
    "text": "in that's okay",
    "start": "1343580",
    "end": "1344960"
  },
  {
    "text": "um and so you'll get you'll get",
    "start": "1344960",
    "end": "1346159"
  },
  {
    "text": "allocations every now and then but yes",
    "start": "1346159",
    "end": "1347840"
  },
  {
    "text": "that's exactly right but when you do a",
    "start": "1347840",
    "end": "1349760"
  },
  {
    "text": "slice",
    "start": "1349760",
    "end": "1350900"
  },
  {
    "text": "the size of your of your cut or the size",
    "start": "1350900",
    "end": "1353780"
  },
  {
    "text": "of your copy is known beforehand so you",
    "start": "1353780",
    "end": "1355760"
  },
  {
    "text": "can initialize that array and",
    "start": "1355760",
    "end": "1357200"
  },
  {
    "text": "effectively mem copy it in whereas now",
    "start": "1357200",
    "end": "1359299"
  },
  {
    "text": "you're not using a c utility you're",
    "start": "1359299",
    "end": "1361100"
  },
  {
    "text": "writing mem copy in the slowest",
    "start": "1361100",
    "end": "1363140"
  },
  {
    "text": "performing language",
    "start": "1363140",
    "end": "1364460"
  },
  {
    "text": "so you know you you could would you do",
    "start": "1364460",
    "end": "1366740"
  },
  {
    "text": "this and see or would you want to do",
    "start": "1366740",
    "end": "1368539"
  },
  {
    "text": "this in JavaScript you'd want to do it",
    "start": "1368539",
    "end": "1370880"
  },
  {
    "text": "in C right you'd want to do it and see",
    "start": "1370880",
    "end": "1372620"
  },
  {
    "text": "where you know the size you always win",
    "start": "1372620",
    "end": "1374900"
  },
  {
    "text": "huge performance can be done right so",
    "start": "1374900",
    "end": "1376700"
  },
  {
    "text": "it's stinky yeah you stink whatever",
    "start": "1376700",
    "end": "1377900"
  },
  {
    "text": "using immor performs slightly uh",
    "start": "1377900",
    "end": "1380179"
  },
  {
    "text": "significantly faster than all other",
    "start": "1380179",
    "end": "1381380"
  },
  {
    "text": "options uh Mr provides regular",
    "start": "1381380",
    "end": "1383419"
  },
  {
    "text": "JavaScript interface on immutable data",
    "start": "1383419",
    "end": "1385280"
  },
  {
    "text": "types using proxies oh gosh like no",
    "start": "1385280",
    "end": "1387799"
  },
  {
    "text": "don't do that just don't just don't even",
    "start": "1387799",
    "end": "1390500"
  },
  {
    "text": "do this",
    "start": "1390500",
    "end": "1392360"
  },
  {
    "text": "this whole thing is just crazy you're in",
    "start": "1392360",
    "end": "1395179"
  },
  {
    "text": "a reduced uh however the main case of",
    "start": "1395179",
    "end": "1397400"
  },
  {
    "text": "the let's see the let's see however in",
    "start": "1397400",
    "end": "1398840"
  },
  {
    "text": "the main K let's see however in this",
    "start": "1398840",
    "end": "1400340"
  },
  {
    "text": "case the main benefit of the Emer",
    "start": "1400340",
    "end": "1401900"
  },
  {
    "text": "approach is that we do not have Let's",
    "start": "1401900",
    "end": "1403340"
  },
  {
    "text": "see we are we're not copying arrays just",
    "start": "1403340",
    "end": "1405380"
  },
  {
    "text": "pushing directly to them because they",
    "start": "1405380",
    "end": "1407179"
  },
  {
    "text": "were created in line in our function yes",
    "start": "1407179",
    "end": "1409400"
  },
  {
    "text": "but do we even need immutability at all",
    "start": "1409400",
    "end": "1411140"
  },
  {
    "text": "was the inner approach good could we get",
    "start": "1411140",
    "end": "1412580"
  },
  {
    "text": "any faster of course yeah of course for",
    "start": "1412580",
    "end": "1414260"
  },
  {
    "text": "performance you can't beat mutations of",
    "start": "1414260",
    "end": "1416360"
  },
  {
    "text": "course that's how it works mutations uh",
    "start": "1416360",
    "end": "1418700"
  },
  {
    "text": "modify data in place without copying or",
    "start": "1418700",
    "end": "1420320"
  },
  {
    "text": "creating duplicate data over the group",
    "start": "1420320",
    "end": "1421460"
  },
  {
    "text": "by function blah blah blah blah blah we",
    "start": "1421460",
    "end": "1423440"
  },
  {
    "text": "are using a radar push which are",
    "start": "1423440",
    "end": "1424760"
  },
  {
    "text": "effectively running the algorithm",
    "start": "1424760",
    "end": "1425840"
  },
  {
    "text": "complexity of of one",
    "start": "1425840",
    "end": "1428860"
  },
  {
    "text": "foreign",
    "start": "1428900",
    "end": "1431559"
  },
  {
    "text": "okay so you know it would be a really",
    "start": "1433780",
    "end": "1435620"
  },
  {
    "text": "great thing to do right here",
    "start": "1435620",
    "end": "1438200"
  },
  {
    "text": "a really great thing to do right here is",
    "start": "1438200",
    "end": "1440720"
  },
  {
    "text": "actually to uh take whatever code this",
    "start": "1440720",
    "end": "1442940"
  },
  {
    "text": "is if this is going to be what would be",
    "start": "1442940",
    "end": "1444679"
  },
  {
    "text": "referred to as a micro optimization at",
    "start": "1444679",
    "end": "1446900"
  },
  {
    "text": "this point really like truly it would be",
    "start": "1446900",
    "end": "1448820"
  },
  {
    "text": "take the map and initialize it with a",
    "start": "1448820",
    "end": "1451220"
  },
  {
    "text": "size",
    "start": "1451220",
    "end": "1453400"
  },
  {
    "text": "right take the arrays you're going to",
    "start": "1453679",
    "end": "1456080"
  },
  {
    "text": "create and initialize them with a size",
    "start": "1456080",
    "end": "1457760"
  },
  {
    "text": "right even if you're not using all the",
    "start": "1457760",
    "end": "1460100"
  },
  {
    "text": "data initialize it with the size but",
    "start": "1460100",
    "end": "1461780"
  },
  {
    "text": "then you have to create a wrapper object",
    "start": "1461780",
    "end": "1463159"
  },
  {
    "text": "one that contains actual size",
    "start": "1463159",
    "end": "1465980"
  },
  {
    "text": "and uh and then the array itself because",
    "start": "1465980",
    "end": "1468380"
  },
  {
    "text": "the arrays length will be like 50 000",
    "start": "1468380",
    "end": "1470059"
  },
  {
    "text": "right and so you just create okay this",
    "start": "1470059",
    "end": "1472100"
  },
  {
    "text": "thing's gonna have fifty thousand",
    "start": "1472100",
    "end": "1474140"
  },
  {
    "text": "and then you create the size so you only",
    "start": "1474140",
    "end": "1475820"
  },
  {
    "text": "allocate that memory once by allocating",
    "start": "1475820",
    "end": "1477860"
  },
  {
    "text": "that memory just one time you don't have",
    "start": "1477860",
    "end": "1479840"
  },
  {
    "text": "nearly the problems that would exist",
    "start": "1479840",
    "end": "1481640"
  },
  {
    "text": "otherwise right all right",
    "start": "1481640",
    "end": "1485679"
  },
  {
    "text": "let's see but do it let's see so yes",
    "start": "1487100",
    "end": "1488960"
  },
  {
    "text": "let's say pushing directly yeah I mean",
    "start": "1488960",
    "end": "1491059"
  },
  {
    "text": "maybe it's amortized but I think it",
    "start": "1491059",
    "end": "1493159"
  },
  {
    "text": "depends on how you're using it since",
    "start": "1493159",
    "end": "1494360"
  },
  {
    "text": "you're pushing it into it over and over",
    "start": "1494360",
    "end": "1495860"
  },
  {
    "text": "again I don't think you can say it's",
    "start": "1495860",
    "end": "1497179"
  },
  {
    "text": "amortized one uh that means our array",
    "start": "1497179",
    "end": "1499520"
  },
  {
    "text": "grows the cost of inserting new elements",
    "start": "1499520",
    "end": "1501380"
  },
  {
    "text": "does not",
    "start": "1501380",
    "end": "1502520"
  },
  {
    "text": "funny you should say that it does it's",
    "start": "1502520",
    "end": "1504380"
  },
  {
    "text": "just less uh it's constant time it's",
    "start": "1504380",
    "end": "1506059"
  },
  {
    "text": "fast uh for one item as it is for fifty",
    "start": "1506059",
    "end": "1509240"
  },
  {
    "text": "thousand I mean",
    "start": "1509240",
    "end": "1510500"
  },
  {
    "text": "again technically right actually right",
    "start": "1510500",
    "end": "1514220"
  },
  {
    "text": "because it depends on your balance and",
    "start": "1514220",
    "end": "1515480"
  },
  {
    "text": "where the capacity is at every time you",
    "start": "1515480",
    "end": "1517220"
  },
  {
    "text": "cross the capacity you have to do a",
    "start": "1517220",
    "end": "1518480"
  },
  {
    "text": "linear copy into a new space you have to",
    "start": "1518480",
    "end": "1520520"
  },
  {
    "text": "call effectively remalek underneath the",
    "start": "1520520",
    "end": "1522380"
  },
  {
    "text": "hood Here's the final version now 100",
    "start": "1522380",
    "end": "1524419"
  },
  {
    "text": "000 times or a hundred thousand percent",
    "start": "1524419",
    "end": "1526400"
  },
  {
    "text": "faster nice there we go thank you for",
    "start": "1526400",
    "end": "1529279"
  },
  {
    "text": "doing this thank you for doing that",
    "start": "1529279",
    "end": "1533440"
  },
  {
    "text": "thank you mutations always make sense",
    "start": "1534080",
    "end": "1536059"
  },
  {
    "text": "right this is why you should always rely",
    "start": "1536059",
    "end": "1538279"
  },
  {
    "text": "on mutations uh I love them for",
    "start": "1538279",
    "end": "1540440"
  },
  {
    "text": "performance they are obviously the only",
    "start": "1540440",
    "end": "1541700"
  },
  {
    "text": "way to go this whole push into this",
    "start": "1541700",
    "end": "1543140"
  },
  {
    "text": "immutable thing largely it's done in",
    "start": "1543140",
    "end": "1545600"
  },
  {
    "text": "places that don't even need it right",
    "start": "1545600",
    "end": "1546679"
  },
  {
    "text": "like if you know that reduce is called",
    "start": "1546679",
    "end": "1548840"
  },
  {
    "text": "reduce itself is atomic therefore you",
    "start": "1548840",
    "end": "1551600"
  },
  {
    "text": "are returning a map produced by this",
    "start": "1551600",
    "end": "1553279"
  },
  {
    "text": "function therefore it itself is kind of",
    "start": "1553279",
    "end": "1555260"
  },
  {
    "text": "like its own Atomic block therefore you",
    "start": "1555260",
    "end": "1557419"
  },
  {
    "text": "don't have to worry about any mutation",
    "start": "1557419",
    "end": "1558740"
  },
  {
    "text": "that takes place within these lines it's",
    "start": "1558740",
    "end": "1560539"
  },
  {
    "text": "not going to have any sort of outsized",
    "start": "1560539",
    "end": "1561860"
  },
  {
    "text": "effect uh real look is the best C",
    "start": "1561860",
    "end": "1564260"
  },
  {
    "text": "function it's the best C function",
    "start": "1564260",
    "end": "1566179"
  },
  {
    "text": "all right there we go uh down to 10",
    "start": "1566179",
    "end": "1568279"
  },
  {
    "text": "milliseconds 100 uh X faster than the",
    "start": "1568279",
    "end": "1570740"
  },
  {
    "text": "original code hey good job let's go well",
    "start": "1570740",
    "end": "1572900"
  },
  {
    "text": "done",
    "start": "1572900",
    "end": "1575140"
  },
  {
    "text": "mutation is always faster in every",
    "start": "1575659",
    "end": "1577700"
  },
  {
    "text": "language every language mutation is",
    "start": "1577700",
    "end": "1580039"
  },
  {
    "text": "faster",
    "start": "1580039",
    "end": "1580880"
  },
  {
    "text": "every single time",
    "start": "1580880",
    "end": "1582380"
  },
  {
    "text": "if you're creating new memory you have",
    "start": "1582380",
    "end": "1584779"
  },
  {
    "text": "to go and you know get the memory now if",
    "start": "1584779",
    "end": "1588679"
  },
  {
    "text": "it's on the stack that's much faster",
    "start": "1588679",
    "end": "1590000"
  },
  {
    "text": "because it's like ad24 but if you're not",
    "start": "1590000",
    "end": "1592279"
  },
  {
    "text": "on the stack and you're on the Heap it's",
    "start": "1592279",
    "end": "1593419"
  },
  {
    "text": "like yo Heap can I have some memory and",
    "start": "1593419",
    "end": "1594980"
  },
  {
    "text": "heaps like let me go find you a spot oh",
    "start": "1594980",
    "end": "1597260"
  },
  {
    "text": "crap route hey operating system give me",
    "start": "1597260",
    "end": "1599120"
  },
  {
    "text": "another page I got another page okay",
    "start": "1599120",
    "end": "1601279"
  },
  {
    "text": "here you go here's this thing right like",
    "start": "1601279",
    "end": "1603320"
  },
  {
    "text": "there's a lot of bookkeeping that goes",
    "start": "1603320",
    "end": "1604700"
  },
  {
    "text": "on with the Heap",
    "start": "1604700",
    "end": "1605900"
  },
  {
    "text": "source code here you go fantastic great",
    "start": "1605900",
    "end": "1608360"
  },
  {
    "text": "job great great job I think this is a",
    "start": "1608360",
    "end": "1611480"
  },
  {
    "text": "fantastic thing that uh",
    "start": "1611480",
    "end": "1614059"
  },
  {
    "text": "that he did all right I also find it to",
    "start": "1614059",
    "end": "1615799"
  },
  {
    "text": "be hard to get a great sense uh for for",
    "start": "1615799",
    "end": "1617480"
  },
  {
    "text": "a profiler when profiling react codes",
    "start": "1617480",
    "end": "1619760"
  },
  {
    "text": "and certain certain internal react code",
    "start": "1619760",
    "end": "1621559"
  },
  {
    "text": "pads are hit so often that the results",
    "start": "1621559",
    "end": "1623179"
  },
  {
    "text": "are yes I would agree with this it is",
    "start": "1623179",
    "end": "1625460"
  },
  {
    "text": "very very difficult react in itself is",
    "start": "1625460",
    "end": "1628400"
  },
  {
    "text": "huge is what he's just saying right",
    "start": "1628400",
    "end": "1629720"
  },
  {
    "text": "there uh it's non-standard but the",
    "start": "1629720",
    "end": "1631400"
  },
  {
    "text": "future to remember console.profile as",
    "start": "1631400",
    "end": "1632960"
  },
  {
    "text": "well yeah yeah that's good we could have",
    "start": "1632960",
    "end": "1634580"
  },
  {
    "text": "been helpful here profiling smaller",
    "start": "1634580",
    "end": "1637039"
  },
  {
    "text": "blocks code rather than deciphering the",
    "start": "1637039",
    "end": "1638419"
  },
  {
    "text": "whole react render stack absolutely",
    "start": "1638419",
    "end": "1639799"
  },
  {
    "text": "consider how slow code was uh it still",
    "start": "1639799",
    "end": "1642980"
  },
  {
    "text": "may not have uh been usable anyways okay",
    "start": "1642980",
    "end": "1645559"
  },
  {
    "text": "what we found is Javascript engines have",
    "start": "1645559",
    "end": "1647419"
  },
  {
    "text": "gotten optimized at a H4 yeah can be as",
    "start": "1647419",
    "end": "1649640"
  },
  {
    "text": "efficient as handwritten for Loop",
    "start": "1649640",
    "end": "1652100"
  },
  {
    "text": "shouldn't started off the video that way",
    "start": "1652100",
    "end": "1653960"
  },
  {
    "text": "depends on the size of the data I'm",
    "start": "1653960",
    "end": "1655580"
  },
  {
    "text": "actually really bound right now by CPU",
    "start": "1655580",
    "end": "1658279"
  },
  {
    "text": "really really hard so having well",
    "start": "1658279",
    "end": "1660260"
  },
  {
    "text": "optimized code is really worth it all",
    "start": "1660260",
    "end": "1662419"
  },
  {
    "text": "right I think that's pretty much it I",
    "start": "1662419",
    "end": "1663860"
  },
  {
    "text": "don't think there's really anything else",
    "start": "1663860",
    "end": "1664940"
  },
  {
    "text": "that are uh",
    "start": "1664940",
    "end": "1666080"
  },
  {
    "text": "fantastic so guess what the name is the",
    "start": "1666080",
    "end": "1668659"
  },
  {
    "text": "prime engine thank you for watching I",
    "start": "1668659",
    "end": "1670640"
  },
  {
    "text": "gotta go pee",
    "start": "1670640",
    "end": "1671720"
  },
  {
    "text": "oh my goodness",
    "start": "1671720",
    "end": "1674179"
  },
  {
    "text": "all right hey hey",
    "start": "1674179",
    "end": "1677140"
  },
  {
    "text": "um",
    "start": "1678260",
    "end": "1679100"
  },
  {
    "text": "all right actually there's one more",
    "start": "1679100",
    "end": "1680179"
  },
  {
    "text": "thing I did want to say on this which I",
    "start": "1680179",
    "end": "1682100"
  },
  {
    "text": "think is really",
    "start": "1682100",
    "end": "1684760"
  },
  {
    "text": "really misunderstood in the JavaScript",
    "start": "1685520",
    "end": "1687559"
  },
  {
    "text": "world",
    "start": "1687559",
    "end": "1688700"
  },
  {
    "text": "or in the JavaScript Community it's just",
    "start": "1688700",
    "end": "1690860"
  },
  {
    "text": "that if you want to understand",
    "start": "1690860",
    "end": "1692299"
  },
  {
    "text": "JavaScript in the simplest terms",
    "start": "1692299",
    "end": "1695299"
  },
  {
    "text": "just simply look at",
    "start": "1695299",
    "end": "1697580"
  },
  {
    "text": "the code",
    "start": "1697580",
    "end": "1699380"
  },
  {
    "text": "and just",
    "start": "1699380",
    "end": "1700880"
  },
  {
    "text": "pretend you had to implement everything",
    "start": "1700880",
    "end": "1702679"
  },
  {
    "text": "that you're seeing",
    "start": "1702679",
    "end": "1704539"
  },
  {
    "text": "it's just like go one thing I really",
    "start": "1704539",
    "end": "1706159"
  },
  {
    "text": "like about go is that you really just do",
    "start": "1706159",
    "end": "1708500"
  },
  {
    "text": "have to implement everything there's not",
    "start": "1708500",
    "end": "1709880"
  },
  {
    "text": "a lot of convenience",
    "start": "1709880",
    "end": "1712220"
  },
  {
    "text": "I look wet yeah it's snowing like wild",
    "start": "1712220",
    "end": "1714080"
  },
  {
    "text": "outside I pee outside",
    "start": "1714080",
    "end": "1716840"
  },
  {
    "text": "and so it it helps you understand that",
    "start": "1716840",
    "end": "1719840"
  },
  {
    "text": "when you see a spread operator it's just",
    "start": "1719840",
    "end": "1722240"
  },
  {
    "text": "a you can think of it like a for Loop",
    "start": "1722240",
    "end": "1724340"
  },
  {
    "text": "right",
    "start": "1724340",
    "end": "1726980"
  },
  {
    "text": "it's that simple when you see something",
    "start": "1726980",
    "end": "1729740"
  },
  {
    "text": "that's like structured clone",
    "start": "1729740",
    "end": "1732140"
  },
  {
    "text": "try building a deep clone understand",
    "start": "1732140",
    "end": "1735140"
  },
  {
    "text": "what it takes underneath the hood",
    "start": "1735140",
    "end": "1738020"
  },
  {
    "text": "right like to know these things is",
    "start": "1738020",
    "end": "1739820"
  },
  {
    "text": "really important and I think that it",
    "start": "1739820",
    "end": "1741679"
  },
  {
    "text": "would add a lot of benefit to a lot of",
    "start": "1741679",
    "end": "1744020"
  },
  {
    "text": "people's career just knowing and",
    "start": "1744020",
    "end": "1746059"
  },
  {
    "text": "understand how things work deeper one",
    "start": "1746059",
    "end": "1748460"
  },
  {
    "text": "level deeper you don't have to go all in",
    "start": "1748460",
    "end": "1750740"
  },
  {
    "text": "just a bit deeper",
    "start": "1750740",
    "end": "1753940"
  },
  {
    "text": "the name is the prime Stone",
    "start": "1754220",
    "end": "1758320"
  }
]