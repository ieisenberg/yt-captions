[
  {
    "text": "why I think C++ is still a desirable coding platform compared to rust okay",
    "start": "280",
    "end": "6160"
  },
  {
    "text": "okay I mean this is a bold take because I mean you don't even get a build tool with",
    "start": "6160",
    "end": "12518"
  },
  {
    "text": "C++ just so you know not communist for starters don't",
    "start": "14599",
    "end": "19640"
  },
  {
    "text": "you're trying to bait me again we're not getting baited not getting baited when a question is made comparing compiled",
    "start": "19640",
    "end": "25240"
  },
  {
    "text": "languages like C++ and rust the typical generic answer comes both are compiled languages with no/ runtime that allows",
    "start": "25240",
    "end": "31240"
  },
  {
    "text": "that lets you write whatever the machine can do so performance will depend on your writing and not your CH uh chosen",
    "start": "31240",
    "end": "36600"
  },
  {
    "text": "language interesting okay I think I see where this take is going I think I see where this take is going this very",
    "start": "36600",
    "end": "42520"
  },
  {
    "text": "interesting while this is largely true there is lots of important details uh left that are important to be highlighted not without controversy of",
    "start": "42520",
    "end": "50079"
  },
  {
    "text": "course here I will try to dive into some of those insights okay so this actually seems like it's going to be a really good article cuz I've been wanting to",
    "start": "50079",
    "end": "56440"
  },
  {
    "text": "see someone voice a good defense of Y C++ still good my general take is that",
    "start": "56440",
    "end": "61680"
  },
  {
    "text": "it's very easy to still do well I mean easy is definitely a skill issue when I when I say this it's still very easy to",
    "start": "61680",
    "end": "68240"
  },
  {
    "text": "do shared mutable memory in C++ comparatively fair fair take I",
    "start": "68240",
    "end": "75720"
  },
  {
    "text": "think okay I think but you also get uh I'm just going to continue reading but you also get the with with with C++ if",
    "start": "75720",
    "end": "84680"
  },
  {
    "text": "you choose to use unique pointers or shared pointers you you have a run time",
    "start": "84680",
    "end": "90439"
  },
  {
    "text": "slowdown that effectively rust solves at compile time it's just easier to work with right",
    "start": "90439",
    "end": "97960"
  },
  {
    "text": "it's just much much easier to work with so that's kind of like in my head how I kind of think about the C++ versus uh",
    "start": "97960",
    "end": "103880"
  },
  {
    "text": "unique pointers are free man are they free are they fully free shared pointers are not free right",
    "start": "103880",
    "end": "110159"
  },
  {
    "text": "they have an atomic uh counter in them correct I didn't think okay we're going to conflicting answers I I didn't",
    "start": "110159",
    "end": "116280"
  },
  {
    "text": "think unique pointers are free",
    "start": "116280",
    "end": "121840"
  },
  {
    "text": "I know shared pointers definitely cost something shared okay okay people are",
    "start": "122039",
    "end": "127200"
  },
  {
    "text": "generally saying I mean I could see why unique pointers should be free because ultimately at the end of the day long as you are semantically",
    "start": "127200",
    "end": "134080"
  },
  {
    "text": "correcting compile you should be able to just get rid of the unique pointer I mean I think that's pretty fair",
    "start": "134080",
    "end": "141239"
  },
  {
    "text": "so hopefully uh unique is just a Destructor thing and is deleted a move copy",
    "start": "141800",
    "end": "147720"
  },
  {
    "text": "Constructors okay so it's still non it's still something just not as much it's it's low",
    "start": "147720",
    "end": "156280"
  },
  {
    "text": "low overhead all right uh P you know it's cheaper than non move copy Constructors",
    "start": "156280",
    "end": "162400"
  },
  {
    "text": "and all that no none none's always more free than something even if the overhead",
    "start": "162400",
    "end": "168720"
  },
  {
    "text": "is super small it's still cheaper than nothing okay uh it sounds like we're",
    "start": "168720",
    "end": "175159"
  },
  {
    "text": "getting kind of I I would have to look it up I don't know the exact outcome of a unique pointer so I just know they",
    "start": "175159",
    "end": "180360"
  },
  {
    "text": "exist they're great they make life really really easy they give you a lot of those safety features that you've always wanted they're fairly easy to use",
    "start": "180360",
    "end": "186840"
  },
  {
    "text": "and bada bing bada boom your codes significantly safer in C++ and more managed and easier to work with a team with unique pointers shared pointers",
    "start": "186840",
    "end": "193560"
  },
  {
    "text": "also are pretty neat but I know that they come at a cost that's like that's my working mental model I don't know exactly what a unique pointer does in",
    "start": "193560",
    "end": "199920"
  },
  {
    "text": "comparison to a shared pointer other than that shared pointer has the atomic counter and unique pointer doesn't have it but what does it do and how does it",
    "start": "199920",
    "end": "206760"
  },
  {
    "text": "me does it manage it does the compiler completely just take out all all constructs of a unique pointer and just",
    "start": "206760",
    "end": "211879"
  },
  {
    "text": "turns it into the thing just hides it completely I have no idea below I took a picture from an article on Research gate",
    "start": "211879",
    "end": "218560"
  },
  {
    "text": "about sorry in principle both rust and C++ are compiled languages that use 95% of the llvm compiler infrastructure rust",
    "start": "218560",
    "end": "225879"
  },
  {
    "text": "and C++ are translated into IR intermediate representation where most arguably all optimizations are made uh",
    "start": "225879",
    "end": "232680"
  },
  {
    "text": "below I took a picture from an article on Research gate about Loop optimizations notice that in the first clang box no optimization is being done",
    "start": "232680",
    "end": "240000"
  },
  {
    "text": "only pre-processing macros Etc and uh desugaring uh EG lambdas all",
    "start": "240000",
    "end": "245159"
  },
  {
    "text": "optimizations are done in the second box where no where C++ no longer exists as a language all right there's all this good",
    "start": "245159",
    "end": "252799"
  },
  {
    "text": "stuff here's all the Canon canonicalization passes Loop optimizations passes poly Loop Vector",
    "start": "252799",
    "end": "259479"
  },
  {
    "text": "vectorized late mid-end passes classic late mid-end passes you know what I mean",
    "start": "259479",
    "end": "265400"
  },
  {
    "text": "classic it's the classic late mid end it's beautiful it's a beautiful thing",
    "start": "265400",
    "end": "270520"
  },
  {
    "text": "okay uh the translation layer exists between I actually have no idea what llvm actually does so this all just",
    "start": "270520",
    "end": "276960"
  },
  {
    "text": "sounds magical I've never really studied into optimizations I know they're quite magical they're quite fantastic and it's",
    "start": "276960",
    "end": "283160"
  },
  {
    "text": "one of the few times in life where uh computational Theory and the real world meet and you actually can do some pretty",
    "start": "283160",
    "end": "289320"
  },
  {
    "text": "cool stuff I've always wanted it's one of those like I've always wanted to learn X for me that was in that realm",
    "start": "289320",
    "end": "296600"
  },
  {
    "text": "right it's always in the always wanted to learn the this translation layer exists between C++ and its respective as",
    "start": "296600",
    "end": "302800"
  },
  {
    "text": "abstract syntax Tre as long as as a logic container are not conducive to",
    "start": "302800",
    "end": "308160"
  },
  {
    "text": "feed optimization algorithms most optimization logic needs to be portable information rich and quasi assembly",
    "start": "308160",
    "end": "315240"
  },
  {
    "text": "representation where all the side effects are resolved that is why C++ and all other languages get converted to IR",
    "start": "315240",
    "end": "321759"
  },
  {
    "text": "intermediate representation before optimizations are performed okay perfect",
    "start": "321759",
    "end": "326880"
  },
  {
    "text": "the same logic applies to languages like Julia Scala and rust rust adds three extra IR layers h l t hir and M oo the",
    "start": "326880",
    "end": "336880"
  },
  {
    "text": "trilogy uh most trilogies suck in successive lowering steps still these extra layers are related to type",
    "start": "336880",
    "end": "342960"
  },
  {
    "text": "checking and safety mechanisms EG the well-known rust borrow Checker okay",
    "start": "342960",
    "end": "349360"
  },
  {
    "text": "cool cool uh the parenthesis here uh Russ claims that there are Russ specific",
    "start": "349360",
    "end": "355000"
  },
  {
    "text": "optimizations done at the Mir level that will in the future impact performance significantly I have found a list of",
    "start": "355000",
    "end": "361440"
  },
  {
    "text": "such Transformations but I could not assess nor prove that the performance impact is real or just rhetorical my",
    "start": "361440",
    "end": "368080"
  },
  {
    "text": "post on Reddit asking for comments on the subject has also not produced any conclusive proof either way so even the",
    "start": "368080",
    "end": "373560"
  },
  {
    "text": "experts on uh are on the fence on this one I feel it was more wishful thinking on the part of the documentation writer",
    "start": "373560",
    "end": "379080"
  },
  {
    "text": "at the time very interesting one thing that I will say that I really do like about rust and what it can do is you do",
    "start": "379080",
    "end": "385720"
  },
  {
    "text": "these iterators are zero cost abstractions when you look at like the compil stuff when it comes to an",
    "start": "385720",
    "end": "390880"
  },
  {
    "text": "iterator it's pretty neat to be able to see that your filter map whatever can",
    "start": "390880",
    "end": "397560"
  },
  {
    "text": "all just just run in line like to me that is a really nice experience in my",
    "start": "397560",
    "end": "404199"
  },
  {
    "text": "book uh I I I really enjoy that because you typically like if you're from a JavaScript language you forget that the",
    "start": "404199",
    "end": "410960"
  },
  {
    "text": "closures created the functions created a new array is created whereas you just get less stuff created and at zero cost",
    "start": "410960",
    "end": "418599"
  },
  {
    "text": "for those type of things which I think is super cool iterations are a huge rust W exactly I really do love that about",
    "start": "418599",
    "end": "426319"
  },
  {
    "text": "rust and I feel that that is like a super under championed feature of why rust is really cool and it's easyish to",
    "start": "426319",
    "end": "434080"
  },
  {
    "text": "write well performing code but this is where the similarities end I need to recall that this publication is about",
    "start": "434080",
    "end": "440240"
  },
  {
    "text": "low latency trading a and as our tradeoffs when deciding if something is",
    "start": "440240",
    "end": "445360"
  },
  {
    "text": "worth it will always lean towards the item that leads to Performance increase es okay so this is super cool low",
    "start": "445360",
    "end": "451080"
  },
  {
    "text": "latency trading uh requires you to be making decisions as soon as possible so nanc matter here uh which I think is",
    "start": "451080",
    "end": "458879"
  },
  {
    "text": "pretty exciting I love this idea uh if we were a company that produces web servers or web browsers then the",
    "start": "458879",
    "end": "465120"
  },
  {
    "text": "conclusions below would probably be different uh be a different nature okay very",
    "start": "465120",
    "end": "470720"
  },
  {
    "text": "exciting performance is not only instruction by instruction execution timestamping before one gets uh to the",
    "start": "470720",
    "end": "477280"
  },
  {
    "text": "actual instructions an entire pipeline of human and machine interactions come into play some of these factors will be",
    "start": "477280",
    "end": "482639"
  },
  {
    "text": "discussed below beginning with the safety toll assuming for a second that both C++ and rust are compiled within",
    "start": "482639",
    "end": "488840"
  },
  {
    "text": "the llvm framework is any of the two language languages able to produce IR",
    "start": "488840",
    "end": "494440"
  },
  {
    "text": "that leads to faster execution in all situations",
    "start": "494440",
    "end": "501240"
  },
  {
    "text": "okay good question here I like I like where this is going I actually really",
    "start": "501240",
    "end": "506319"
  },
  {
    "text": "enjoy like this this line of article um Russ tends to be more strict than C++",
    "start": "506319",
    "end": "513200"
  },
  {
    "text": "it's it's ra uh and that means more real- time checks although integer underflows and",
    "start": "513200",
    "end": "519360"
  },
  {
    "text": "overflows are only checked in debug mode memory accesses in arrays are uh constantly checked for bounds unless",
    "start": "519360",
    "end": "525560"
  },
  {
    "text": "you're in unsafe mode oh I did not know",
    "start": "525560",
    "end": "529920"
  },
  {
    "text": "that no that makes perfect sense that makes perfect sense of course it has to",
    "start": "530959",
    "end": "537320"
  },
  {
    "text": "right is that true during production too okay okay okay okay which defeats the",
    "start": "537320",
    "end": "543320"
  },
  {
    "text": "purpose those checks alone take significant toll they slow down the process compared to uh the retrospective",
    "start": "543320",
    "end": "548880"
  },
  {
    "text": "naturally unchecked C++ code yeah but you can get unsafe okay so so the argument is that yes if you if you want",
    "start": "548880",
    "end": "555959"
  },
  {
    "text": "speed to that level where including the bounce check on an array is a",
    "start": "555959",
    "end": "561240"
  },
  {
    "text": "significant toll right significant toll therefore unsafe would be the the answer",
    "start": "561240",
    "end": "569200"
  },
  {
    "text": "to this question okay but is that an Apples to Apples comparison well yes if you're going to list the safety of Russ",
    "start": "569200",
    "end": "575320"
  },
  {
    "text": "compared to C++ as a pro then it's just as fair to list the performance hit of such safety in regards to execution",
    "start": "575320",
    "end": "581079"
  },
  {
    "text": "speed agreed great great take right there you can't list it as a positive on",
    "start": "581079",
    "end": "587480"
  },
  {
    "text": "one side without listing the negative on the other side I think that that's a great that's a fair a fair ass take you",
    "start": "587480",
    "end": "593360"
  },
  {
    "text": "can't talk about safety safety safety oh you can't say that that's unfair because that's not apples apples I could use I",
    "start": "593360",
    "end": "599920"
  },
  {
    "text": "could use I pick you just made my brain WTF with that ass take okay I said fair",
    "start": "599920",
    "end": "605880"
  },
  {
    "text": "fair ass okay fair Dash ass the ass was not dashed on the take okay okay",
    "start": "605880",
    "end": "615440"
  },
  {
    "text": "buddy get me all right undefined Behavior C++ relies extensively on undefined",
    "start": "615440",
    "end": "621279"
  },
  {
    "text": "Behavior I mean the statement isn't the greatest to say out loud in your head or to write down on paper okay I don't",
    "start": "621279",
    "end": "628120"
  },
  {
    "text": "think that that's like a great thing you want to really do as an optimization enabler oh really uh UB can make a a",
    "start": "628120",
    "end": "634519"
  },
  {
    "text": "brutal difference in many cases really okay okay I got to hear this rust on the other hand does not and cannot leave",
    "start": "634519",
    "end": "640519"
  },
  {
    "text": "knots untied because it focuses on security okay how show me uh for for",
    "start": "640519",
    "end": "645760"
  },
  {
    "text": "example this simple C++ snippet shows how c++'s UB can make a huge difference in the routine knop which uh uh we",
    "start": "645760",
    "end": "653399"
  },
  {
    "text": "return the results of the division of a number multiplied by two by two it seems obvious that this should result in the",
    "start": "653399",
    "end": "659320"
  },
  {
    "text": "original number and the assembly code just moving the input argument in the EDI register uh into the output register",
    "start": "659320",
    "end": "666240"
  },
  {
    "text": "eax uh Co cooperates that okay so it's able to optimize look",
    "start": "666240",
    "end": "674079"
  },
  {
    "text": "at that Beauty look at that nice Beauty right there it optimized it okay cool when was this article written that's a",
    "start": "674079",
    "end": "679920"
  },
  {
    "text": "great question because yeah uh It Was Written uh yesterday",
    "start": "679920",
    "end": "685839"
  },
  {
    "text": "yesterday all right all right I want to see this however when you consider the edge cases things are not so clear what",
    "start": "685839",
    "end": "691600"
  },
  {
    "text": "happens if you multiply two uh up by 30 by two and then divide by two uh what do you get uh point zero",
    "start": "691600",
    "end": "699800"
  },
  {
    "text": "uh oh Nega yeah oh yeah that's right 31 you get the whole negative thing these are signant oh yeah they're signant",
    "start": "699800",
    "end": "705519"
  },
  {
    "text": "divide by two it is uh this big old negative then that that's a big difference yes it is a big difference so",
    "start": "705519",
    "end": "711240"
  },
  {
    "text": "why C++ ignored that possible Edge case because signed overflow in C++ is",
    "start": "711240",
    "end": "716399"
  },
  {
    "text": "undefined behavior and as far as the compiler concerned ered it will never happen oh I think I see I think I I I",
    "start": "716399",
    "end": "723639"
  },
  {
    "text": "think I totally understand what's going on here what is the what that okay so",
    "start": "723639",
    "end": "730160"
  },
  {
    "text": "this is actually a super interesting case right here with the edge case reasoned Away by",
    "start": "730160",
    "end": "736760"
  },
  {
    "text": "the language the compiler is free to implement that optimization if you compile a similar function in Rust you'll see that rust will be unable to",
    "start": "736760",
    "end": "743279"
  },
  {
    "text": "optimize that expression away because both signed and unsigned overflows in Rust are well defined in the language as tw's compliment",
    "start": "743279",
    "end": "749519"
  },
  {
    "text": "this result in assembly below where the first line Le uh the result of the multiplication by two is computed uh in",
    "start": "749519",
    "end": "757399"
  },
  {
    "text": "fact it computes the Value Plus value instead of uh value times two smart okay at least it's I mean that's smart right",
    "start": "757399",
    "end": "763320"
  },
  {
    "text": "there that's a smart one right there and then the result is H let's see haved by shifting right SAR",
    "start": "763320",
    "end": "772120"
  },
  {
    "text": "okay okay we can see what happened happens here it moves this into edx uh",
    "start": "776079",
    "end": "782760"
  },
  {
    "text": "Eda eax okay and this one does a few operations here a little Le a little",
    "start": "782760",
    "end": "789680"
  },
  {
    "text": "sorl and then a little r q okay okay again pundits will state that you could",
    "start": "789680",
    "end": "795040"
  },
  {
    "text": "have called one of the arithmetic wrapping functions which forc the compiler to do this optimization well",
    "start": "795040",
    "end": "800680"
  },
  {
    "text": "you can do many things but but here we are measuring the effect of the compiler over two similar code",
    "start": "800680",
    "end": "807480"
  },
  {
    "text": "blocks okay fair I think the statement and what he's saying I I think to resay what he's trying to say is that you have",
    "start": "807560",
    "end": "814399"
  },
  {
    "text": "to do more things to get the same outcome in Rust is that a fair statement all right cash",
    "start": "814399",
    "end": "821560"
  },
  {
    "text": "locality just write better code I mean you have to do a whole extra thing to make sure that these optimizations are",
    "start": "821560",
    "end": "826720"
  },
  {
    "text": "happening but do you really need to take optimizations before measuring so the reason why these things happen is again",
    "start": "826720",
    "end": "832600"
  },
  {
    "text": "he's saying exactly why he's doing this which is realtime trading uh where like if you're trying to do Forex Arbitrage",
    "start": "832600",
    "end": "839279"
  },
  {
    "text": "you got to be able to respond within like you know 500 NCS might means you don't get the",
    "start": "839279",
    "end": "845839"
  },
  {
    "text": "Arbitrage so how fast you need to respond is really really really",
    "start": "845839",
    "end": "851920"
  },
  {
    "text": "important so when you have extra instructions it's not good and these people do do",
    "start": "851920",
    "end": "858440"
  },
  {
    "text": "fpgas uh This Is How They also lose $400 million in a few minutes right so it's",
    "start": "858440",
    "end": "866079"
  },
  {
    "text": "bugs are really expensive in this department we have that whole article 400 and some million dollars lost in like 40 minutes because of a single",
    "start": "866079",
    "end": "872639"
  },
  {
    "text": "because of power Peg the greatest named function of all time power Peg gets power pegged it was so beautiful cach",
    "start": "872639",
    "end": "879360"
  },
  {
    "text": "locality C++ has full unfettered access to memory by Design C its ancestor uh",
    "start": "879360",
    "end": "884839"
  },
  {
    "text": "it's antecessor is that what I don't know",
    "start": "884839",
    "end": "890279"
  },
  {
    "text": "this term I don't know what an antecessor",
    "start": "890279",
    "end": "894920"
  },
  {
    "text": "is well that's not helpful I'm",
    "start": "896199",
    "end": "902680"
  },
  {
    "text": "getting what you calling me boy I'm confused at What's Happening Here did I just get dunked on somehow I don't even",
    "start": "903160",
    "end": "909560"
  },
  {
    "text": "know what's going on here what the hell's happening all",
    "start": "909560",
    "end": "915759"
  },
  {
    "text": "right it's it seems like ancestor supposed to be the word but we're using some other term here Brazil mentioned",
    "start": "915759",
    "end": "921519"
  },
  {
    "text": "did we just get a Brazil can we get a conf confirmation confirmation Brazil mentioned died died by Homo erectus my",
    "start": "921519",
    "end": "928319"
  },
  {
    "text": "homo erectus lasted longer than 4 hours I am now dead uh was created with the use case of it being a low-level",
    "start": "928319",
    "end": "934720"
  },
  {
    "text": "language just a tad bit above assembly huh",
    "start": "934720",
    "end": "939800"
  },
  {
    "text": "what that's this is probably the video that gets me canceled like out of all videos to get",
    "start": "939800",
    "end": "945040"
  },
  {
    "text": "cancelled this might be the one okay this might be the one that actually makes it happen uh C++ inherit uh that",
    "start": "945040",
    "end": "952800"
  },
  {
    "text": "which makes it arguably the easiest language to code memory intensive algorithms and data structures like hashmaps B trees vors and lists C's",
    "start": "952800",
    "end": "959839"
  },
  {
    "text": "pointers have a simple and intuitive",
    "start": "959839",
    "end": "963399"
  },
  {
    "text": "meaning this is so good this is like my I've have never copy and",
    "start": "971880",
    "end": "978319"
  },
  {
    "text": "pasta copy and paste put it over here everyone's",
    "start": "978319",
    "end": "985720"
  },
  {
    "text": "logical jump they have to make oh I put Q's wait what how did I put a q",
    "start": "985720",
    "end": "992600"
  },
  {
    "text": "there uh there we go said one guy",
    "start": "993519",
    "end": "999199"
  },
  {
    "text": "ever this is that has never been the case I that is probably the one of the most frequent questions I've ever had is",
    "start": "1000160",
    "end": "1006959"
  },
  {
    "text": "how to how do pointers work I know it's simple like once you know how pointers",
    "start": "1006959",
    "end": "1012920"
  },
  {
    "text": "work you're like Ah that's stupid of course that makes perfect sense but until you know them they feel hard almost forgot to",
    "start": "1012920",
    "end": "1020560"
  },
  {
    "text": "reime it up well thank you Ryan Winchester flashbacks to my university is this an onion article this is shockingly not an onion article it's",
    "start": "1020560",
    "end": "1027400"
  },
  {
    "text": "actually a really good this is a well this is a well ass done article for you pick allowing even Junior developers to",
    "start": "1027400",
    "end": "1034480"
  },
  {
    "text": "grasp and even write statements that would be extremely hard to understand in assembly okay that's actually a really",
    "start": "1034480",
    "end": "1039839"
  },
  {
    "text": "fair take that's a great take right there is that it's",
    "start": "1039839",
    "end": "1046880"
  },
  {
    "text": "not it's not that pointers are easy it's",
    "start": "1047400",
    "end": "1053200"
  },
  {
    "text": "that their counterpart in assembly is really",
    "start": "1053200",
    "end": "1058160"
  },
  {
    "text": "hard and so the simple abstraction that c makes on top of assembly makes it",
    "start": "1058559",
    "end": "1063840"
  },
  {
    "text": "really makes it great to work with okay I understand that while rust does not does allow the same it makes it very",
    "start": "1063840",
    "end": "1069480"
  },
  {
    "text": "difficult to get away with it this is true we've read articles we've seen examples uh unsafe rust is hard again",
    "start": "1069480",
    "end": "1076360"
  },
  {
    "text": "this is by Design rust creators do not want you to be bit twiddling but focus on business logic first so they made uh",
    "start": "1076360",
    "end": "1082640"
  },
  {
    "text": "so they made is such that accessing memory directly is painful and timec consuming yes we've seen this unsafe",
    "start": "1082640",
    "end": "1089880"
  },
  {
    "text": "rust not not simple uh this means that good developers who know how to take advantage of cash locality will have a",
    "start": "1089880",
    "end": "1096720"
  },
  {
    "text": "good time implementing such algorithms and data structures with C++ and will likely will very likely struggle with",
    "start": "1096720",
    "end": "1102640"
  },
  {
    "text": "rust for the same task I still am not sure if I can make a doubly linked list in Rust okay I'm just",
    "start": "1102640",
    "end": "1111039"
  },
  {
    "text": "saying I could make a doubly linked list in JavaScript in",
    "start": "1111039",
    "end": "1119200"
  },
  {
    "text": "like a minute and a half C++ C++ probably like 10 minutes",
    "start": "1119200",
    "end": "1128520"
  },
  {
    "text": "just because I have to remember I had to go look up and then in Rust it's like I I don't think I could I",
    "start": "1128520",
    "end": "1134840"
  },
  {
    "text": "don't think I could today it might take a little while for me to do that you know what I mean it it might take a little bit uh",
    "start": "1134840",
    "end": "1142400"
  },
  {
    "text": "you just DQ and the rust list you suck yeah skill issues no it's C I did do that uh it's a skill issue it",
    "start": "1142400",
    "end": "1151039"
  },
  {
    "text": "is totally a skill issue you have to use weak pointers and see uh in C++ still do",
    "start": "1151039",
    "end": "1159158"
  },
  {
    "text": "you yeah thank you for the this one yes I've seen I I've read the book too many damn lists anyways we'll look at that at some",
    "start": "1161559",
    "end": "1168480"
  },
  {
    "text": "point all right rust mandates the use of its own compiler rust see oh hold on okay uh let's see compiler Choice rust",
    "start": "1168480",
    "end": "1174520"
  },
  {
    "text": "is an offspring of the llvm project and so is Julia cotlin and Scala without llvm rust would not have existed rust",
    "start": "1174520",
    "end": "1181240"
  },
  {
    "text": "mandates the use of its own compiler rust C which is a top driver for the of",
    "start": "1181240",
    "end": "1187000"
  },
  {
    "text": "the llvm stack pretty much as clang is for C++ C++ on the other hand has dozens",
    "start": "1187000",
    "end": "1192799"
  },
  {
    "text": "of good quality compilers available in many platforms",
    "start": "1192799",
    "end": "1200240"
  },
  {
    "text": "okay bold bold take Borland anybody can I get a Borland can we get a Borland um",
    "start": "1200320",
    "end": "1206559"
  },
  {
    "text": "I'm not sure like I I guess for me this doesn't make a lot of sense but that's probably due to the environment that I work on so maybe this isn't like a huge",
    "start": "1206559",
    "end": "1213480"
  },
  {
    "text": "W for me but maybe it's like a huge W for something else right there are platforms that I don't work on maybe",
    "start": "1213480",
    "end": "1219400"
  },
  {
    "text": "that is a lot easier right so I I don't want to say hey it's terrible but maybe there's something to that that makes",
    "start": "1219400",
    "end": "1225520"
  },
  {
    "text": "more sense I don't know uh G CC for example is the most ubiquitous C++ compiler today it exists by default",
    "start": "1225520",
    "end": "1232320"
  },
  {
    "text": "think app install build Essentials in every Linux distribution GCC has a much better optimizations in specific cases",
    "start": "1232320",
    "end": "1238480"
  },
  {
    "text": "like function calls we analyzed in this previous article oh super cool on Windows it's hard to beat microsofts",
    "start": "1238480",
    "end": "1244400"
  },
  {
    "text": "tooling and better tooling does influence uh in the way you get performance optimizations done fair fair",
    "start": "1244400",
    "end": "1250360"
  },
  {
    "text": "take not surprising that uh game development is almost exclusively a Windows operation",
    "start": "1250360",
    "end": "1256880"
  },
  {
    "text": "right Fair Fair no one's going to argue that one resource available resources available although the scenario is",
    "start": "1256880",
    "end": "1263000"
  },
  {
    "text": "changing rapidly the pool of Engineers with C++ background is much larger than the pool of rust developers also still",
    "start": "1263000",
    "end": "1269120"
  },
  {
    "text": "fair to say for now uh let's put it this way I think what I",
    "start": "1269120",
    "end": "1274200"
  },
  {
    "text": "think would be better to be said in this state is the pool of expert C++ developers is much larger than the pool",
    "start": "1274200",
    "end": "1281760"
  },
  {
    "text": "of expert rust developers like I would consult I would consider myself an average",
    "start": "1281760",
    "end": "1288880"
  },
  {
    "text": "average rust developer right I can do things I can get things done uh I can do some lifetimes I can work out some",
    "start": "1288880",
    "end": "1296360"
  },
  {
    "text": "decently performan stuff but I wouldn't like I'm a tinker I would put myself in the Tinker the Tinker you know category",
    "start": "1296360",
    "end": "1304120"
  },
  {
    "text": "but as far as like expert goes I would most certainly say I am not even close to that and then you got to consider",
    "start": "1304120",
    "end": "1309840"
  },
  {
    "text": "like the entirety of the game industry right like the entirety of the",
    "start": "1309840",
    "end": "1315840"
  },
  {
    "text": "game industry are pretty damn good at C C++ right they are they they are pretty",
    "start": "1315840",
    "end": "1322080"
  },
  {
    "text": "damn good and so I have never met a game developer that I'm not pretty decently",
    "start": "1322080",
    "end": "1327400"
  },
  {
    "text": "impressed by except for TJ calling himself a game developer",
    "start": "1327400",
    "end": "1332720"
  },
  {
    "text": "while writing a engine in O camel yeah right not not real you know what I mean",
    "start": "1332720",
    "end": "1338279"
  },
  {
    "text": "not real yeah right uh anyways so if I want to bet uh safe in the development",
    "start": "1338279",
    "end": "1344240"
  },
  {
    "text": "of a new system I have to go with C++ I think I think one thing that",
    "start": "1344240",
    "end": "1349400"
  },
  {
    "text": "you're one thing that this article is super discounting is what I call the hype factor and if I were to post a job",
    "start": "1349400",
    "end": "1356640"
  },
  {
    "text": "today saying C++ position available at some prestigious",
    "start": "1356640",
    "end": "1364520"
  },
  {
    "text": "company the response would be pretty good I'd probably get a lot of I'd probably get a decent amount of applications but if I flip that and said",
    "start": "1364520",
    "end": "1371880"
  },
  {
    "text": "the same thing except rust I bet you my application rate would double if not",
    "start": "1371880",
    "end": "1378760"
  },
  {
    "text": "quadruple so I do think that there is an eagerness for people to use rust that is",
    "start": "1378760",
    "end": "1384880"
  },
  {
    "text": "not present in the C++ world right why leave your current job likely doing some",
    "start": "1384880",
    "end": "1390400"
  },
  {
    "text": "C++ or whatever to go do C++ elsewhere whereas most people aren't working in Rust again proven by the fact that",
    "start": "1390400",
    "end": "1396720"
  },
  {
    "text": "there's only 20 professionals currently working in Rust and they are totally willing to jump over to",
    "start": "1396720",
    "end": "1403559"
  },
  {
    "text": "do Rust right they're excited about it they're excited",
    "start": "1403559",
    "end": "1408760"
  },
  {
    "text": "ready they're they're lubed up you know what I mean yeah if you're building Chrome with",
    "start": "1408760",
    "end": "1415559"
  },
  {
    "text": "C++ why why leave exactly you have to have a real reason to leave uh the dubious benefits of safety oo when rust",
    "start": "1415559",
    "end": "1423480"
  },
  {
    "text": "is brought up in a meeting the first pro uh proactor uh is language safety but safety against what in many years of",
    "start": "1423480",
    "end": "1429440"
  },
  {
    "text": "coding C++ very rarely I experiened to stack Overflow or segmentation fault it is literally not an issue in every code",
    "start": "1429440",
    "end": "1436039"
  },
  {
    "text": "basee I have worked with",
    "start": "1436039",
    "end": "1439879"
  },
  {
    "text": "okay we are talking about safety against hackers the large majority of C++ applications are non-public facing so",
    "start": "1441440",
    "end": "1447360"
  },
  {
    "text": "much that the data center machines run with mitigations turned off since there is absolutely no possibility of contact",
    "start": "1447360",
    "end": "1453000"
  },
  {
    "text": "with those machines with Bad actors so hacker safety is not a concern that I in particular would care unless I'm coding",
    "start": "1453000",
    "end": "1459840"
  },
  {
    "text": "a web server okay this is actually I I could say this there's there's definitely some potential",
    "start": "1459840",
    "end": "1466600"
  },
  {
    "text": "um I could understand this argument I think I'm understanding this argument right here",
    "start": "1466600",
    "end": "1472640"
  },
  {
    "text": "right I I still am kind of doubting the whole thing but still anecdotal evidence",
    "start": "1472640",
    "end": "1480200"
  },
  {
    "text": "but you know data is just the plurality of anecdotal right for the most part that is that is a huge portion of data",
    "start": "1480200",
    "end": "1485559"
  },
  {
    "text": "that you read um is this true like I don't",
    "start": "1485559",
    "end": "1491840"
  },
  {
    "text": "know I have no idea but I I I can I can appreciate the perspective sample size one likely not",
    "start": "1491840",
    "end": "1500360"
  },
  {
    "text": "data uh are we T let's see or are we talking about protection against crashes well don't get me started on this one",
    "start": "1500360",
    "end": "1507279"
  },
  {
    "text": "first crashes can happen in any languages with the same frequency I often point to this article about Princeton's unmanned vehicle team",
    "start": "1507279",
    "end": "1513520"
  },
  {
    "text": "competing in 2007 DARPA challenge as an example of how even a heavily protected garbage collected language such as C Can",
    "start": "1513520",
    "end": "1520360"
  },
  {
    "text": "Crash and Burn leaving your process un unusable it's pretty funny it's pretty",
    "start": "1520360",
    "end": "1526559"
  },
  {
    "text": "funny when you're crashing and burn and doing that um I do think that C++ is",
    "start": "1526559",
    "end": "1532200"
  },
  {
    "text": "really hard to I think it's harder to get right so just saying the dubious benefits of",
    "start": "1532200",
    "end": "1538279"
  },
  {
    "text": "safety maybe there is some truth to that in the sense that once you get good enough at C++ the likelihood of you",
    "start": "1539559",
    "end": "1545840"
  },
  {
    "text": "introducing a bug goes down I can buy that but the guarantee that there's no",
    "start": "1545840",
    "end": "1552799"
  },
  {
    "text": "bug is nonpresent right you just have no idea",
    "start": "1552799",
    "end": "1558960"
  },
  {
    "text": "right valren is great Valen gives you gives you a lot of information 70% of all security bugs at Ms are memory",
    "start": "1558960",
    "end": "1565440"
  },
  {
    "text": "safety ones again but this is an operating system in which everyone can access and try to take advantage of that is a much different situation than a",
    "start": "1565440",
    "end": "1572360"
  },
  {
    "text": "server in which is running some process in which no online process is attached to right I get that these are these are",
    "start": "1572360",
    "end": "1580760"
  },
  {
    "text": "different problems trying to solve different",
    "start": "1580760",
    "end": "1584960"
  },
  {
    "text": "things right sanitizers are cool too yeah yeah yes",
    "start": "1586320",
    "end": "1594720"
  },
  {
    "text": "Clos Loop versus open loop systems exactly I do think that there's a whole there's a lot to be said for that what",
    "start": "1594720",
    "end": "1601320"
  },
  {
    "text": "percentage of bugs are security bugs that's another great question 70% of security bugs are due to memory type",
    "start": "1601320",
    "end": "1608000"
  },
  {
    "text": "issues what percent of bugs are due to",
    "start": "1608000",
    "end": "1613120"
  },
  {
    "text": "security right it's too hard I I mean try cating a b tree well first off",
    "start": "1613960",
    "end": "1619120"
  },
  {
    "text": "cating a b Tree in general is a little bit tricky so adding a adding a extra",
    "start": "1619120",
    "end": "1624919"
  },
  {
    "text": "layer of rust is always makes it harder you know what I mean it is in the standard lib you can just do B Tre this",
    "start": "1624919",
    "end": "1631080"
  },
  {
    "text": "is true all right let's see exceptions can throw a Java process back to the main and helpless on how to proceed the",
    "start": "1631080",
    "end": "1637960"
  },
  {
    "text": "process will puke an undecipherable excuse of and bail out uh oh but C++",
    "start": "1637960",
    "end": "1643640"
  },
  {
    "text": "segmentation fals is much worse say the haters however SE fults can be caught with a wrapped uh signal trap and",
    "start": "1643640",
    "end": "1650200"
  },
  {
    "text": "handled cleanly like any Java C exception",
    "start": "1650200",
    "end": "1655600"
  },
  {
    "text": "okay it still I mean it still leaves the same problem which is that you don't know the state of your program and at",
    "start": "1655600",
    "end": "1661120"
  },
  {
    "text": "the point in which they I mean it's the same reason why I don't like throw right I don't like throw as a construct in",
    "start": "1661120",
    "end": "1666399"
  },
  {
    "text": "general so I think that that's a plus one in Rust always which is that exceptions are not handled by throwing",
    "start": "1666399",
    "end": "1672559"
  },
  {
    "text": "they're handled by returning this is also a go a go thing as well right uh erors as values just typically lead to",
    "start": "1672559",
    "end": "1679720"
  },
  {
    "text": "easier reasoning about your program CU at every step you have to handle what",
    "start": "1679720",
    "end": "1684799"
  },
  {
    "text": "could happen if there was an exception there so your ability to return whatever state you were in to a reasonable state",
    "start": "1684799",
    "end": "1692399"
  },
  {
    "text": "is just it's just simply easier Mak sense",
    "start": "1692399",
    "end": "1700279"
  },
  {
    "text": "yeah yeah seg fults meaning your data is corrupt and the best uh choice is to cancel the process pretty fair I'd say",
    "start": "1700279",
    "end": "1706399"
  },
  {
    "text": "that's fair uh zig Zig again very nice I like that uh conclusion given that the",
    "start": "1706399",
    "end": "1712840"
  },
  {
    "text": "performance benefits are either in uh inconclusive non-existent or more likely negative the safety benefits are not",
    "start": "1712840",
    "end": "1718880"
  },
  {
    "text": "really that pressing for most applications is that really worth moving a uh to a completely new language with",
    "start": "1718880",
    "end": "1724840"
  },
  {
    "text": "its Infamous long and hard learning curve as",
    "start": "1724840",
    "end": "1728640"
  },
  {
    "text": "rust that's good to think about I mean I think that one problem I think we inevitably have is uh per ception issues",
    "start": "1731000",
    "end": "1738120"
  },
  {
    "text": "right we have anchoring bias um which means that you've heard your whole life",
    "start": "1738120",
    "end": "1744000"
  },
  {
    "text": "that C++ sucks and so when you read an article like this it's",
    "start": "1744000",
    "end": "1749440"
  },
  {
    "text": "hard to take in what this person is trying to",
    "start": "1749440",
    "end": "1754799"
  },
  {
    "text": "say because you just you you're trying to fit it into this view that C++ sucks rust is awesome right and so I like rust",
    "start": "1758200",
    "end": "1765640"
  },
  {
    "text": "I would rather use uh I'd rather use rust than C++ hands down all the reasons",
    "start": "1765640",
    "end": "1771080"
  },
  {
    "text": "he said are just not reasons for me and so I wouldn't arve to the same conclusion I'm not concerned over uh",
    "start": "1771080",
    "end": "1776720"
  },
  {
    "text": "whatever this this this case is right here right like I'm not measuring performance on an instruction base so",
    "start": "1776720",
    "end": "1782600"
  },
  {
    "text": "it's not really something for me I like cargo I like the fact that I can stall what I need via cargo I don't like the",
    "start": "1782600",
    "end": "1789919"
  },
  {
    "text": "fact that every single project requires hundreds of little dependencies kind of giving me this node node modules feel",
    "start": "1789919",
    "end": "1796880"
  },
  {
    "text": "right um I can understand this which is there",
    "start": "1796880",
    "end": "1802399"
  },
  {
    "text": "is a there there's several learning curves when it comes to rust but there's also a general learning curve when it",
    "start": "1802399",
    "end": "1808600"
  },
  {
    "text": "comes to C++ right and the curve is not as fast but does it end in the same",
    "start": "1808600",
    "end": "1814440"
  },
  {
    "text": "absolute position I am not sure I don't know like I honestly don't",
    "start": "1814440",
    "end": "1820279"
  },
  {
    "text": "know if it ends in the same the same position uh if I had been writing C++ fulltime for 30 years I'd probably just",
    "start": "1820279",
    "end": "1826039"
  },
  {
    "text": "keep using that yeah that's a very Fair take right this is kind of what you have to do tooling makes a big difference also the community is more welcoming in",
    "start": "1826039",
    "end": "1832399"
  },
  {
    "text": "C++ probably got him yeah for new devs what should you",
    "start": "1832399",
    "end": "1839240"
  },
  {
    "text": "start learning uh probably probably rust is my general take I think C++ will give",
    "start": "1839240",
    "end": "1845200"
  },
  {
    "text": "you a better understanding of memory to begin with and actually gives you a better love for what rust",
    "start": "1845200",
    "end": "1852279"
  },
  {
    "text": "does but then I think it's harder to understand memory and layout and things",
    "start": "1852279",
    "end": "1858639"
  },
  {
    "text": "when starting with rust right you can learn see you can learn see in that you get the same",
    "start": "1858639",
    "end": "1865518"
  },
  {
    "text": "experience it's just something to think about you know I do not know the general answer but for me for now it is not",
    "start": "1866159",
    "end": "1871919"
  },
  {
    "text": "worth it yet I like rust a lot it is much more modern language than C++ no modern C++ is not modern it's just",
    "start": "1871919",
    "end": "1878720"
  },
  {
    "text": "lipsticks on a cute pig that's a very nice compliment to C++ you just gave there and I truly would like to move to",
    "start": "1878720",
    "end": "1885799"
  },
  {
    "text": "it eventually however it did not cross that threshold where I would tell a client to definitely jump on a",
    "start": "1885799",
    "end": "1893278"
  },
  {
    "text": "boat okay I mean I I actually don't disagree with his conclusion I think his",
    "start": "1895760",
    "end": "1901279"
  },
  {
    "text": "conclusion is actually really good like when I take the perspective of what he's",
    "start": "1901279",
    "end": "1906720"
  },
  {
    "text": "attempting to accomplish with the language he is",
    "start": "1906720",
    "end": "1911880"
  },
  {
    "text": "choosing it just seems like a better decision you know what I",
    "start": "1911880",
    "end": "1919880"
  },
  {
    "text": "mean it just seems like a better decision I I I get I get why he's doing what he's doing uh will it forever be",
    "start": "1920120",
    "end": "1927000"
  },
  {
    "text": "like that I don't know I know I like this I like this talk I like this thinking I think this was really really great I I think a lot of",
    "start": "1927000",
    "end": "1933799"
  },
  {
    "text": "people don't think probably as deeply as this this Henrik individual is on this",
    "start": "1933799",
    "end": "1939399"
  },
  {
    "text": "happy about it I mean PhD okay we got a PhD over here I you know I don't got a",
    "start": "1939399",
    "end": "1944720"
  },
  {
    "text": "PhD nuts uh at all so just something to think",
    "start": "1944720",
    "end": "1950519"
  },
  {
    "text": "about just a reminder oh nice let's go Netflix let's go Netflix Oh Netflix no",
    "start": "1950519",
    "end": "1956120"
  },
  {
    "text": "come on let's go come on keep going north keep going north keep going north the",
    "start": "1956120",
    "end": "1961760"
  },
  {
    "text": "name I still prefer rusten I prefer rusten",
    "start": "1961760",
    "end": "1969080"
  }
]