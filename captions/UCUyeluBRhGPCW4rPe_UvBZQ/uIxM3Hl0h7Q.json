[
  {
    "text": "hey objectoriented programming is",
    "start": "1000",
    "end": "6440"
  },
  {
    "text": "good asri a few years ago I made some videos",
    "start": "6680",
    "end": "12160"
  },
  {
    "text": "laying out a case against object-oriented programming and since then I've been meaning to make a positive case for an alternative a",
    "start": "12160",
    "end": "18800"
  },
  {
    "text": "prescription for how code should be written rather than how it shouldn't it's taken me a while to work out what I",
    "start": "18800",
    "end": "24359"
  },
  {
    "text": "think can be said about how to write code with any certainty and confusingly the prescription in part might sound",
    "start": "24359",
    "end": "29400"
  },
  {
    "text": "suspicious like oo to some ears I'm not really recanting my prior position though many people just remain confused",
    "start": "29400",
    "end": "35960"
  },
  {
    "text": "about what's unique to oo and what's not hence I'm calling this object-oriented programming as good but with an",
    "start": "35960",
    "end": "43640"
  },
  {
    "text": "asterisk that was a very long asterisk um okay okay so we have an O hater that",
    "start": "43640",
    "end": "50840"
  },
  {
    "text": "might be coming around to uh enjoying a little casual o is this",
    "start": "50840",
    "end": "56359"
  },
  {
    "text": "some casual o is that what we're seeing right now",
    "start": "56359",
    "end": "61519"
  },
  {
    "text": "could be could be kind of a little bit cash you know just a little just a little oh oh hater turned lover you know what I",
    "start": "61800",
    "end": "68439"
  },
  {
    "text": "mean a more honest title for this video might be module oriented programming where module refers to a unit of",
    "start": "68439",
    "end": "74680"
  },
  {
    "text": "reasonably self-contained code but the even more honest title would be how to write good procedural",
    "start": "74680",
    "end": "81759"
  },
  {
    "text": "code I love dude procedural code is the best code fight me fight me it is the",
    "start": "81759",
    "end": "86960"
  },
  {
    "text": "best okay it is the it is the way to do do it there is no other way procedural",
    "start": "86960",
    "end": "92520"
  },
  {
    "text": "code is just always been it will always be it has always been functional",
    "start": "92520",
    "end": "98040"
  },
  {
    "text": "programming is just procedural code with with functions change my mind encapsulation polymorphism and even",
    "start": "98040",
    "end": "106040"
  },
  {
    "text": "inheritance will be a part of the story but as I'll explain the total picture has profound differences from",
    "start": "106040",
    "end": "111640"
  },
  {
    "text": "object-oriented programming so here's how I think code should be written code should be written",
    "start": "111640",
    "end": "117479"
  },
  {
    "text": "in units we call modules and these mod mod come in Two basic kinds State modules and logic modules the",
    "start": "117479",
    "end": "124039"
  },
  {
    "text": "distinction is that logic modules contain no internal State I.E Global variables and logic modules do not reach",
    "start": "124039",
    "end": "130280"
  },
  {
    "text": "out for external",
    "start": "130280",
    "end": "133319"
  },
  {
    "text": "State starting to sound a bit functional right here I'm just saying already we",
    "start": "136400",
    "end": "141920"
  },
  {
    "text": "can tell just right away this sounds like peer functions going on right now tell me this is not some peer functions",
    "start": "141920",
    "end": "147680"
  },
  {
    "text": "right now tell me this is not it right here right now",
    "start": "147680",
    "end": "153720"
  },
  {
    "text": "um interesting so this thing only contains external state it so what I When I See This what I think is",
    "start": "155840",
    "end": "162239"
  },
  {
    "text": "that these are like definitions strs and stuff this is implementation on the strs",
    "start": "162239",
    "end": "171599"
  },
  {
    "text": "traits whatever you want to call them it does all that uh Define a pier function",
    "start": "171599",
    "end": "177239"
  },
  {
    "text": "without using peer a function with whom has no side",
    "start": "177239",
    "end": "182400"
  },
  {
    "text": "effects laughs instructs and imple exactly this means that a logic module",
    "start": "182400",
    "end": "187959"
  },
  {
    "text": "consists only of functions and these functions only touch stateful things which are explicitly passed to them so a",
    "start": "187959",
    "end": "195000"
  },
  {
    "text": "logic function can for example read and write to a file if an open file is passed into the function but a logic",
    "start": "195000",
    "end": "200959"
  },
  {
    "text": "function cannot itself open any files I'd say that that in general",
    "start": "200959",
    "end": "207319"
  },
  {
    "text": "that's just building good software I think I think I see CU he he did talk about just like how to build better",
    "start": "207319",
    "end": "212640"
  },
  {
    "text": "software you should always avoid certain activities within a file right like if",
    "start": "212640",
    "end": "218120"
  },
  {
    "text": "you want to do something to a file such as take a file like open a file read out",
    "start": "218120",
    "end": "224400"
  },
  {
    "text": "the contents go over the Json blob parse out whatever X events sum up some values",
    "start": "224400",
    "end": "230280"
  },
  {
    "text": "do something like that uh what I tend to find is a lot better is separate out those into two separate ones right the",
    "start": "230280",
    "end": "236360"
  },
  {
    "text": "file bits and then the actual like logic bits because that way you just pass in",
    "start": "236360",
    "end": "241640"
  },
  {
    "text": "say your events whatever those events look like and then it does the operation on top of it because it just all like",
    "start": "241640",
    "end": "246799"
  },
  {
    "text": "whenever you separate out things like that it makes testing easier it just seems to make logic easier it just makes",
    "start": "246799",
    "end": "252079"
  },
  {
    "text": "your life easier I feel like uh that's a good that's usually a good sign of a more Junior person is that they they mix",
    "start": "252079",
    "end": "257680"
  },
  {
    "text": "all them Logics up the management of state is not the responsibility of logic",
    "start": "257680",
    "end": "263040"
  },
  {
    "text": "code a logic function May generate new data and also May mutate its inputs but",
    "start": "263040",
    "end": "268080"
  },
  {
    "text": "its only responsibility is to generate and mutate data only as it says it will in its",
    "start": "268080",
    "end": "273880"
  },
  {
    "text": "documentation the side effects of a logic o I'll do that we'll pull let's pull all right here we go let's pull are",
    "start": "273880",
    "end": "280440"
  },
  {
    "text": "you ready all right new pull o o o uh do you like o yes or no yes no do",
    "start": "280440",
    "end": "289800"
  },
  {
    "text": "you like o tell me right now okay here let's start the poll",
    "start": "289800",
    "end": "296240"
  },
  {
    "text": "we got to know I just got to",
    "start": "300840",
    "end": "304240"
  },
  {
    "text": "know where's the pole it's right here oh we have a pretty I'm actually",
    "start": "308000",
    "end": "313720"
  },
  {
    "text": "pretty shocked we have a pretty split group",
    "start": "313720",
    "end": "319440"
  },
  {
    "text": "here I honestly did not see this one coming I honestly I I really",
    "start": "323560",
    "end": "331638"
  },
  {
    "text": "truly Dynamic dispatch is a curse yes equals actually",
    "start": "333840",
    "end": "340120"
  },
  {
    "text": "no oh my goodness I think you're trolling me at this point just to get him to",
    "start": "340120",
    "end": "345479"
  },
  {
    "text": "tie what there's no way that more people like it there's no way there's no",
    "start": "345479",
    "end": "355319"
  },
  {
    "text": "way what okay so this is wild this is wild",
    "start": "355520",
    "end": "361639"
  },
  {
    "text": "okay okay you know what hey we're all allowed to be a little surprised now",
    "start": "370160",
    "end": "375280"
  },
  {
    "text": "where where where did that uh video go no no no no I do want to watch this but",
    "start": "375280",
    "end": "381080"
  },
  {
    "text": "it's an hour long no no no",
    "start": "381080",
    "end": "387520"
  },
  {
    "text": "yes I am so confused right function are actually then the responsibility of its",
    "start": "387520",
    "end": "394160"
  },
  {
    "text": "callers so the relationship between State modules and logic modules is strictly One Way state code can call",
    "start": "394160",
    "end": "400840"
  },
  {
    "text": "into logic code but not the other way around as for the state modules each",
    "start": "400840",
    "end": "406360"
  },
  {
    "text": "should protect its private State and State modules should only directly touch each other's public interfaces in other",
    "start": "406360",
    "end": "412120"
  },
  {
    "text": "words the modules should be encapsulated and even though logic modules have no state to protect they too should",
    "start": "412120",
    "end": "417960"
  },
  {
    "text": "distinguish between public functions and private functions so as to minimize exposed surface",
    "start": "417960",
    "end": "423199"
  },
  {
    "text": "area girl you know I'll expose that surface area you know these are all good",
    "start": "423199",
    "end": "428360"
  },
  {
    "text": "tips I I am appreciating everything he's saying so far I feel like it's pretty like no one can argue with as of right",
    "start": "428360",
    "end": "433680"
  },
  {
    "text": "now do we got any arguers this all seems good no touching privates don't expose",
    "start": "433680",
    "end": "438800"
  },
  {
    "text": "yourself you know now you might object that modules might sound like objects but there are two key differences first",
    "start": "438800",
    "end": "446039"
  },
  {
    "text": "there's no rule about how big modules are allowed to get well there's no rule about how big an object can get okay you",
    "start": "446039",
    "end": "453039"
  },
  {
    "text": "know there's plenty of there's plenty of",
    "start": "453039",
    "end": "458840"
  },
  {
    "text": "big objects out there okay I don't know why this guy has to be upset that this",
    "start": "458879",
    "end": "464479"
  },
  {
    "text": "that statistically larger objects are a problem they may be tens or even hundreds of thousands of lines long very",
    "start": "464479",
    "end": "470720"
  },
  {
    "text": "large mod okay that's too long a module better not be if I walked into a file that was 100 a module that was 100,000",
    "start": "470720",
    "end": "476680"
  },
  {
    "text": "lines long I'd have plenty of questions I'd have lot of questions at this point modules are perhaps not ideal but I'm",
    "start": "476680",
    "end": "483720"
  },
  {
    "text": "not going to give you any hard rules against them second a module is not an instance",
    "start": "483720",
    "end": "489240"
  },
  {
    "text": "of a data type in almost all cases our state modules are Singletons and we're Unapologetic about",
    "start": "489240",
    "end": "496759"
  },
  {
    "text": "it I don't like the word Singleton Singletons almost always exist in such a",
    "start": "507199",
    "end": "512599"
  },
  {
    "text": "way that they make me cry singl enss make me cry every single time in",
    "start": "512599",
    "end": "522240"
  },
  {
    "text": "almost all cases our state modules are",
    "start": "522240",
    "end": "526080"
  },
  {
    "text": "Singletons that's just making sure do you at least apologize for it and we're",
    "start": "531080",
    "end": "536519"
  },
  {
    "text": "Unapologetic about it oh that got me okay that oh my goodness",
    "start": "536519",
    "end": "544360"
  },
  {
    "text": "this is an arch user convention I can tell right away data types in fact don't really belong to any module the best way",
    "start": "544360",
    "end": "551160"
  },
  {
    "text": "to think about data types is that they live outside all modules and when data is transmitted from one module to",
    "start": "551160",
    "end": "556560"
  },
  {
    "text": "another the structure of that data belongs to neither module more than the other we wouldn't say that a protocol",
    "start": "556560",
    "end": "562519"
  },
  {
    "text": "belongs more to a client or more to a server and the same should go for data types okay Reon as a practical matter",
    "start": "562519",
    "end": "568800"
  },
  {
    "text": "though a data type must be defined somewhere in code so we generally Define a data type in the module where it's",
    "start": "568800",
    "end": "574160"
  },
  {
    "text": "most predominantly used we may also sometimes want to I think I'm misunderstanding the term module here I",
    "start": "574160",
    "end": "581200"
  },
  {
    "text": "think what he means by a Singleton in modules is that you know like a file filled with functions and data type",
    "start": "581200",
    "end": "590200"
  },
  {
    "text": "definitions that that itself is a single T which I would agree",
    "start": "590200",
    "end": "596440"
  },
  {
    "text": "with it would make no sense if you had if you had in inst of of modules is that what he's trying to say",
    "start": "596440",
    "end": "602959"
  },
  {
    "text": "I feel like that I feel like that's what he's trying to",
    "start": "602959",
    "end": "608800"
  },
  {
    "text": "say huh capsulate operations on a data type in which case we' put the data type",
    "start": "609800",
    "end": "615160"
  },
  {
    "text": "and those functions in the same module yeah it's a unit of scope I agree with that it's just a unit of scope it's it's",
    "start": "615160",
    "end": "620360"
  },
  {
    "text": "a it's it's just a unit of scope and it by definition it better be a Singleton or I'd be",
    "start": "620360",
    "end": "626240"
  },
  {
    "text": "confused because State Management is an ugly problem the general goal in any code basee is to minimize the proportion",
    "start": "626240",
    "end": "632519"
  },
  {
    "text": "of state code as much as possible we want to punt code from our state modules into logic modules in some programs",
    "start": "632519",
    "end": "639160"
  },
  {
    "text": "State Management May inherently predominate but in many cases the state code can be a small fraction of the",
    "start": "639160",
    "end": "644480"
  },
  {
    "text": "whole code base the question that follows is when should we break up modules into smaller",
    "start": "644480",
    "end": "650160"
  },
  {
    "text": "modules and along what boundaries for State modules a major reason to break them up is to divide and conquer State",
    "start": "650160",
    "end": "657320"
  },
  {
    "text": "Management for either kind of mod mod we might also break them up simply for",
    "start": "657320",
    "end": "663320"
  },
  {
    "text": "organization yeah see I don't really divide my modules by any of",
    "start": "666360",
    "end": "672480"
  },
  {
    "text": "these do you know what I",
    "start": "674639",
    "end": "678160"
  },
  {
    "text": "mean well I mean like I organize it by concept",
    "start": "685160",
    "end": "690279"
  },
  {
    "text": "like I I wouldn't want to organize it by team that seems confusing I wouldn't",
    "start": "690279",
    "end": "696079"
  },
  {
    "text": "want to organize it by organization I'm not sure what it means to divide and conquer State Management",
    "start": "696079",
    "end": "702440"
  },
  {
    "text": "or to publish an API like an the public API you could you could imagine is in of itself its own you know",
    "start": "702440",
    "end": "710279"
  },
  {
    "text": "repo module however he's defining it but I mean I tend to always organize my",
    "start": "710279",
    "end": "716680"
  },
  {
    "text": "modules or my see the problem is I I think I don't understand what he means by modules I think this is the fundamental problem here I always",
    "start": "716680",
    "end": "723079"
  },
  {
    "text": "organize it by concept you struggle with splitting",
    "start": "723079",
    "end": "728200"
  },
  {
    "text": "modules I feel like modules are very naturally together or they're very easy to do the right thing a couple minutes",
    "start": "728200",
    "end": "734600"
  },
  {
    "text": "uh after this here's another great example hold on hold on picky all code concerning future a goes into module a",
    "start": "734600",
    "end": "741160"
  },
  {
    "text": "and all code concerning future B goes into module B Etc such structuring can make the code base easier to understand",
    "start": "741160",
    "end": "747600"
  },
  {
    "text": "if done well just be careful not to overdo it yeah we also might split up modules for the sake of team",
    "start": "747600",
    "end": "753399"
  },
  {
    "text": "collaboration group X takes ownership of module X group y takes ownership of module Y and the modules are coupled",
    "start": "753399",
    "end": "759839"
  },
  {
    "text": "only through their public interfaces even for logic modules this can help because it allows one group to change",
    "start": "759839",
    "end": "765600"
  },
  {
    "text": "internal implementation as long as the public interface remains",
    "start": "765600",
    "end": "770600"
  },
  {
    "text": "unchanged still seems weird to like I'm going to draw the line based on team's",
    "start": "771959",
    "end": "777000"
  },
  {
    "text": "responsibility you know because there's plenty of place that are like you know there's like Inbetweeners",
    "start": "777000",
    "end": "784680"
  },
  {
    "text": "you know what I mean there's things that exist in between that just like that just you",
    "start": "784680",
    "end": "791760"
  },
  {
    "text": "know I don't know I have a hard time with this whole organization collaboration teams",
    "start": "796040",
    "end": "801720"
  },
  {
    "text": "business for similar reasons we might split up modules to better formalize an externally exposed API we don't want to",
    "start": "801720",
    "end": "808079"
  },
  {
    "text": "bother our external users with details that don't concern them and we want freedom to change what we've kept private again many people today accredit",
    "start": "808079",
    "end": "815279"
  },
  {
    "text": "these ideas to O but the ideas actually predate oo and don't require us to follow the rest of its prescriptions we",
    "start": "815279",
    "end": "820880"
  },
  {
    "text": "should not conflate modules with data types and we should not obsessively Whittle modules down to Tiny sizes so yes though I spent most of my earlier",
    "start": "820880",
    "end": "827160"
  },
  {
    "text": "videos arguing that oo sells an overly aggressive form of encapsulation I think encapsulation is actually a perfectly",
    "start": "827160",
    "end": "832320"
  },
  {
    "text": "useful idea what then about I'm actually fine with smaller modules I've never thought of a module",
    "start": "832320",
    "end": "839160"
  },
  {
    "text": "is being big or small I don't know this this whole this whole talk I swear we must be",
    "start": "839160",
    "end": "844680"
  },
  {
    "text": "miscommunicating CU this whole talk like I I never really think of size or any of those",
    "start": "844680",
    "end": "850240"
  },
  {
    "text": "things I do agree that like having a singular data type in a singular file sometimes is super annoying like when",
    "start": "850240",
    "end": "857279"
  },
  {
    "text": "when things get like when you go into like a u a utils folder and there's like 900",
    "start": "857279",
    "end": "864199"
  },
  {
    "text": "files it's like that's really hard to work with and so I understand but then",
    "start": "867759",
    "end": "873720"
  },
  {
    "text": "the inverse of it which is one file in a like a utils do JS u. RS and it has like",
    "start": "873720",
    "end": "879959"
  },
  {
    "text": "900 functions in it then that's also hard utils is a code spell the problem is is that that",
    "start": "879959",
    "end": "886040"
  },
  {
    "text": "statement is a statement that exists outside of practical work it just",
    "start": "886040",
    "end": "892720"
  },
  {
    "text": "does it just always does in the end you have some stupid thing right like okay",
    "start": "892720",
    "end": "899079"
  },
  {
    "text": "let's just take this you're working like on Puppeteer so Puppeteer when we are writing the integration with televisions",
    "start": "899079",
    "end": "904560"
  },
  {
    "text": "if you don't know I helped build part of that uh which is like you have the C++ side the actual controlling of the V8",
    "start": "904560",
    "end": "910199"
  },
  {
    "text": "engine or other parts of say NDP the television app and then the JavaScript side and one thing we had to do is we",
    "start": "910199",
    "end": "915720"
  },
  {
    "text": "constantly had to do these weird promises right so it's like promise that hey I'm going to call this",
    "start": "915720",
    "end": "921160"
  },
  {
    "text": "function and then I'm going to resolve this promise but I had to like resolve it later I had to like API it I had to do something kind of weird and so what I",
    "start": "921160",
    "end": "927600"
  },
  {
    "text": "do is I created a fun called explode promise that would return the promise the reject and the resolve so that way",
    "start": "927600",
    "end": "933680"
  },
  {
    "text": "you could have access to any of those and then you could store that and then say a minute later when you've done the",
    "start": "933680",
    "end": "939360"
  },
  {
    "text": "actual thing which could be a series of steps I could then resolve the promise that I handed back way earlier it's a",
    "start": "939360",
    "end": "945519"
  },
  {
    "text": "pretty you know typical thing if you do like async request cues anything like that you kind of have to explode out a",
    "start": "945519",
    "end": "950759"
  },
  {
    "text": "promise and so that function is just it doesn't live anywhere it has",
    "start": "950759",
    "end": "956519"
  },
  {
    "text": "no it has no like home and so it it makes no",
    "start": "956519",
    "end": "963480"
  },
  {
    "text": "sense to have it anywhere but like in a utils folder you",
    "start": "963480",
    "end": "968839"
  },
  {
    "text": "know yeah yeah yeah polymorphism and inheritance my take on polymorphism is",
    "start": "968839",
    "end": "975000"
  },
  {
    "text": "that interface types or type classes or traits or whatever semi equivalent in your language they can be extremely useful their utility however is",
    "start": "975000",
    "end": "981440"
  },
  {
    "text": "primarily across module boundaries particularly across the boundary between an API and its consumer I like interfaces interfaces are great well",
    "start": "981440",
    "end": "988079"
  },
  {
    "text": "traits are great uh homeless folder yeah uh home like uh traits are",
    "start": "988079",
    "end": "994199"
  },
  {
    "text": "great typescript interfaces are the actual worst out of all things typescript interfaces are by far the",
    "start": "994199",
    "end": "1000720"
  },
  {
    "text": "worst convention ever there's two things that are super wrong with typescript interfaces one you can Define uh props I",
    "start": "1000720",
    "end": "1008639"
  },
  {
    "text": "do not think properties belong on interfaces I think somehow that just feels really really wrong number two you",
    "start": "1008639",
    "end": "1016000"
  },
  {
    "text": "can you can effectively uh add add stuff to an interface later",
    "start": "1016000",
    "end": "1021800"
  },
  {
    "text": "on you can just like add a method I can just take a known interface and create another method on that known interface a",
    "start": "1021800",
    "end": "1028839"
  },
  {
    "text": "de interface merging or whatever it's called I just think those two concepts like typescript interfaces are by far",
    "start": "1028839",
    "end": "1037038"
  },
  {
    "text": "terrible I'm not the only one uh surprisingly this is where me and the other typescript Chads actually agree",
    "start": "1037039",
    "end": "1042520"
  },
  {
    "text": "types are just better I don't think you should be using interfaces I don't see a point in using interfaces uh I don't see",
    "start": "1042520",
    "end": "1048319"
  },
  {
    "text": "what you get out of them it just seems",
    "start": "1048319",
    "end": "1055600"
  },
  {
    "text": "wrong like I properties is definitely wrong properties are definitely wrong",
    "start": "1055600",
    "end": "1062200"
  },
  {
    "text": "they're crazy but you can use them like traits no you can't you fundamentally cannot use them like traits traits you can you",
    "start": "1062200",
    "end": "1069720"
  },
  {
    "text": "can use traits like interfaces but you cannot use interfaces like",
    "start": "1069720",
    "end": "1077200"
  },
  {
    "text": "traits because traits are just just they're just they're just different you know they hit differently the trade",
    "start": "1077200",
    "end": "1082720"
  },
  {
    "text": "system Just Hits differently like the fundamental concept of being able to say like hey here's a function and it's defined and if you have this you get it",
    "start": "1082720",
    "end": "1089120"
  },
  {
    "text": "but it's also there's nothing that explicitly has to implement that",
    "start": "1089120",
    "end": "1094600"
  },
  {
    "text": "interface you know what I mean here I don't think you guys understand that thing here let's get out of let's get",
    "start": "1094600",
    "end": "1100720"
  },
  {
    "text": "out of Chad stack uh here rust typescript",
    "start": "1100720",
    "end": "1105760"
  },
  {
    "text": "here this is what I mean by that is that I hear interface area nothing in here",
    "start": "1105760",
    "end": "1111320"
  },
  {
    "text": "like Circle doesn't have to implement area to be considered an area right so",
    "start": "1111320",
    "end": "1116919"
  },
  {
    "text": "if I take a function function uh you know calc area I know even though this is stupid right uh you know uh item",
    "start": "1116919",
    "end": "1123919"
  },
  {
    "text": "implements area right I can go in here and go item",
    "start": "1123919",
    "end": "1129799"
  },
  {
    "text": "area and circle though no intention of actually implementing the interface just",
    "start": "1129799",
    "end": "1134919"
  },
  {
    "text": "due to how it works you know the old quack quack typing uh I can go New Circle and uh I don't know what's my",
    "start": "1134919",
    "end": "1141520"
  },
  {
    "text": "interface on Circle okay go complete it it just works there's nothing that like",
    "start": "1141520",
    "end": "1146600"
  },
  {
    "text": "it it doesn't it's not doing the thing it's not the thing is not doing the thing you know what I mean uh yeah I know that's",
    "start": "1146600",
    "end": "1153200"
  },
  {
    "text": "how go works I'm not I'm not necessarily the biggest fan of that I think I I still think how the trade system works",
    "start": "1153200",
    "end": "1159120"
  },
  {
    "text": "is just a better usage of interface uh interfaces uh I I like the explicitness",
    "start": "1159120",
    "end": "1164360"
  },
  {
    "text": "of it that for like so so in the rust World you'd have the",
    "start": "1164360",
    "end": "1170000"
  },
  {
    "text": "uh do I have that around here ah dude I don't have it you have to implement there you go here's a trait you have to implement a display so you have to",
    "start": "1170159",
    "end": "1176520"
  },
  {
    "text": "implement the traits you want for the type you want and that's really",
    "start": "1176520",
    "end": "1181559"
  },
  {
    "text": "important whereas you can't just simply have an implementation that happens to",
    "start": "1181559",
    "end": "1187880"
  },
  {
    "text": "have the same names for things it has to be I implement this thing intentionally",
    "start": "1187880",
    "end": "1196720"
  },
  {
    "text": "and then there's a lot of other really great things anyways with these interface types we can formalize commonalities between different data",
    "start": "1199120",
    "end": "1205080"
  },
  {
    "text": "types including data types defined externally to our own code much like a protocol allows us to treat clients",
    "start": "1205080",
    "end": "1210120"
  },
  {
    "text": "servers and peers like swappable components interfaces allow us to interoperate with code that hasn't yet been written if however I have no need",
    "start": "1210120",
    "end": "1216720"
  },
  {
    "text": "to allow for such external extensibility I generally avoid interfaces an interface requires me to speculatively",
    "start": "1216720",
    "end": "1221799"
  },
  {
    "text": "generalize to imagine needs I don't concretely yet have and this extra burden does not always pay off for",
    "start": "1221799",
    "end": "1227120"
  },
  {
    "text": "internal business for modules well-contained within my control I don't really care about that kind of extensibility for sometimes it's useful",
    "start": "1227120",
    "end": "1234320"
  },
  {
    "text": "it can be again operating with interface you know always using interfaces it can it",
    "start": "1234320",
    "end": "1240240"
  },
  {
    "text": "can it can be very useful uh obviously that's just like saying types right uh interfaces and types and typescript are",
    "start": "1240240",
    "end": "1246760"
  },
  {
    "text": "virtually the exact same thing uh there's a few key differences but feels approximately the same I like",
    "start": "1246760",
    "end": "1255360"
  },
  {
    "text": "defining my types I don't mind defining interfaces I don't mind doing any of those things because I think it's really really useful to do that code ey control",
    "start": "1255360",
    "end": "1262559"
  },
  {
    "text": "flexibility is maintained by favoring The Simple Solutions to my concrete problems rather than entering the realm of speculation now as for inheritance I",
    "start": "1262559",
    "end": "1269960"
  },
  {
    "text": "do I do agree with that like the sentiment or I understand the sentiment which",
    "start": "1269960",
    "end": "1275640"
  },
  {
    "text": "is like don't abstract things that don't need to be abstracted I do find that",
    "start": "1275640",
    "end": "1281360"
  },
  {
    "text": "that's like super common concept especially in JavaScript JavaScript is the world of abstractions and people abstract they reach for abstracting as",
    "start": "1281360",
    "end": "1288880"
  },
  {
    "text": "the like the first tool to implementing something inheritance is also a mechanism for expressing the commonality",
    "start": "1288880",
    "end": "1294960"
  },
  {
    "text": "between types but inheritance additionally shares implementation a child type automatically shares the implementation of its parent except for",
    "start": "1294960",
    "end": "1301080"
  },
  {
    "text": "those parts the child overrides this implementation sharing might be convenient in some cases but as famously noted it tends to make code fragile",
    "start": "1301080",
    "end": "1307919"
  },
  {
    "text": "changes to ancestor class implementations can affect descendants in unexpected ways sometimes leading into some pretty nasty",
    "start": "1307919",
    "end": "1314679"
  },
  {
    "text": "bugs I generally hate inheritance but I always think of one thing that I really",
    "start": "1314679",
    "end": "1321080"
  },
  {
    "text": "like about inheritance and the one thing I always think about is event emitter in JavaScript right uh to be able to have a",
    "start": "1321080",
    "end": "1328000"
  },
  {
    "text": "class that also has an event emitter I think is really really really amazing so",
    "start": "1328000",
    "end": "1333559"
  },
  {
    "text": "if I had uh gosh uh extends event emitter right",
    "start": "1333559",
    "end": "1340320"
  },
  {
    "text": "uh I always for whatever reason I just I always this this",
    "start": "1340320",
    "end": "1346840"
  },
  {
    "text": "indenting is insane but I always really like event emitter because then when I get a circle right con Circle equals uh",
    "start": "1346840",
    "end": "1356159"
  },
  {
    "text": "take that put it up here up up up up put in the middle uh put that right here be",
    "start": "1356159",
    "end": "1361679"
  },
  {
    "text": "being able to emit right like that as a thing I really just I fundamentally like",
    "start": "1361679",
    "end": "1368960"
  },
  {
    "text": "that and you know maybe one could say it could be it could be implemented",
    "start": "1368960",
    "end": "1375320"
  },
  {
    "text": "without using extends or inheritance you could like you know especially with that blanket implementation via trade classes",
    "start": "1375840",
    "end": "1382400"
  },
  {
    "text": "you could get something where maybe you only have to implement a subset of this but I like the fact that I don't have to implement",
    "start": "1382400",
    "end": "1388880"
  },
  {
    "text": "anything yeah exactly there there are reasons where uh inheritance is really good and I'm not one of those people",
    "start": "1390360",
    "end": "1398080"
  },
  {
    "text": "that just simply hate inheritance for all sakes like uh creating something like an event emitter in Rust is not fun",
    "start": "1398080",
    "end": "1406080"
  },
  {
    "text": "because you can't just quite do that it's not quite on the other hand where types have lots of overlap in their data",
    "start": "1406080",
    "end": "1412360"
  },
  {
    "text": "inheritance makes these overlaps in code clear and more convenient to write in the first place this is something I think the go language gets right a type",
    "start": "1412360",
    "end": "1418559"
  },
  {
    "text": "can inherit the data of another but this embedding as they call it does not create a subtype",
    "start": "1418559",
    "end": "1424200"
  },
  {
    "text": "relationship so that's actually all I have to say about how to structure code I think it's a relatively simple picture overall I'll end though by elaborating",
    "start": "1424200",
    "end": "1430720"
  },
  {
    "text": "on what I think this implies that o gets wrong okay it's all discussed oo conflates modules of encapsulation with",
    "start": "1430720",
    "end": "1436799"
  },
  {
    "text": "data types second o is overly optimistic about how frequently and easily we can create good",
    "start": "1436799",
    "end": "1442960"
  },
  {
    "text": "abstractions I would agree with that this modules and data types I don't",
    "start": "1442960",
    "end": "1449360"
  },
  {
    "text": "know I still think you know there's a series of data types that fit within a module or an",
    "start": "1449360",
    "end": "1456360"
  },
  {
    "text": "idea that just makes sense and they kind of go together and so I I don't really",
    "start": "1456360",
    "end": "1461559"
  },
  {
    "text": "understand the separation of of modules and data types now like I I agree we shouldn't have you know we shouldn't",
    "start": "1461559",
    "end": "1466640"
  },
  {
    "text": "break every last thing up in add INF an item but you know there should be some level that makes I don't",
    "start": "1466640",
    "end": "1472159"
  },
  {
    "text": "know and third o favors design with too many small pieces so about the second point the underlying premise of oo is",
    "start": "1472159",
    "end": "1479039"
  },
  {
    "text": "that more abstractions are always better and that we can create good abstractions in the normal course of application development this is wrong I would agree",
    "start": "1479039",
    "end": "1485679"
  },
  {
    "text": "fundamentally I agree with that the idea that it's it's that we talked about this",
    "start": "1485679",
    "end": "1490880"
  },
  {
    "text": "yesterday this idea of of that I'm going to abstract my code because there could",
    "start": "1490880",
    "end": "1497320"
  },
  {
    "text": "be this case that I have haven't thought about yet therefore because I have not a thought about it I know it could exist",
    "start": "1497320",
    "end": "1503600"
  },
  {
    "text": "so let's design our system to be able to handle some future case that is probably led to more heartache and more upsetness",
    "start": "1503600",
    "end": "1511480"
  },
  {
    "text": "than I think anything I have ever had in my lifetime is just that because it's so frustrating it's so dang frustrating it",
    "start": "1511480",
    "end": "1518399"
  },
  {
    "text": "always ends up being this just this cluster Festival that just didn't need to exist because it turns out you never",
    "start": "1518399",
    "end": "1523559"
  },
  {
    "text": "actually extended it beyond anything basic and so it's just good abstractions take a lot of hard",
    "start": "1523559",
    "end": "1530039"
  },
  {
    "text": "thought and time to get right and typically they emerge only slowly over many iterations now when creating an API",
    "start": "1530039",
    "end": "1535600"
  },
  {
    "text": "creating good abstractions is part of the job hence creating a good API can be very difficult in normal application code however we should free ourselves",
    "start": "1535600",
    "end": "1542039"
  },
  {
    "text": "from this burden where it's not truly necessary cases do arise where new abstractions provide better Solutions",
    "start": "1542039",
    "end": "1547120"
  },
  {
    "text": "but our default mode should not be seeking to create new abstractions as for the size of our code",
    "start": "1547120",
    "end": "1552279"
  },
  {
    "text": "units the difference between procedural and oo is how and when we subdivide the units in procedural code we modularize",
    "start": "1552279",
    "end": "1557799"
  },
  {
    "text": "by accre only splitting up modules when they get too unwieldy in objected code however we modularize speculatively",
    "start": "1557799",
    "end": "1563640"
  },
  {
    "text": "splitting up modules in anticipation of problems later in theory o code is flexible we create a bunch of small",
    "start": "1563640",
    "end": "1569559"
  },
  {
    "text": "independent pieces such that system Behavior can be changed by reconfiguring the connections but in practice the burdens of speculative generalization",
    "start": "1569559",
    "end": "1575960"
  },
  {
    "text": "rarely pay off good yeah that I agree with that I mean the thing is is I I",
    "start": "1575960",
    "end": "1581080"
  },
  {
    "text": "actually do such a different version of uh starting off so like I have this whole um I have this whole Theory where",
    "start": "1581080",
    "end": "1588320"
  },
  {
    "text": "whenever I start a new project or I start something new I start in a single file and I just start dumping things in until I find a good reason to change it",
    "start": "1588320",
    "end": "1595919"
  },
  {
    "text": "so like uh I have this whole search thing that I've been building at Netflix for some data and it just takes a bunch",
    "start": "1595919",
    "end": "1601480"
  },
  {
    "text": "of different sources and then does like an extra step of data processing underneath the hood and so I started",
    "start": "1601480",
    "end": "1608200"
  },
  {
    "text": "with just like one file I just wrote it yesterday and today and I just wrote it out blah blah blah blah BL just making it all happen and I realized okay",
    "start": "1608200",
    "end": "1614360"
  },
  {
    "text": "there's really like two parts of this there's like the building of the request because I want to be able to request",
    "start": "1614360",
    "end": "1620480"
  },
  {
    "text": "these datas to a service and then the handling of a request now that I have",
    "start": "1620480",
    "end": "1626320"
  },
  {
    "text": "data plus the request I want to make how do I do it and so it's kind of like these two sides and so it became a very",
    "start": "1626320",
    "end": "1633080"
  },
  {
    "text": "obvious natural splitting of the of of uh of the like the modules right and so",
    "start": "1633080",
    "end": "1639600"
  },
  {
    "text": "for me that just made perfect sense that's just how I wanted to see it that's how I wanted to do it but I didn't start off knowing that I just I",
    "start": "1639600",
    "end": "1646039"
  },
  {
    "text": "just simply built it out allinone file until I felt like okay this is the time I need to abstract this is the time that",
    "start": "1646039",
    "end": "1653080"
  },
  {
    "text": "I feel like I see two separate things developing how much code you senior Engineers actually do I write a shaton I",
    "start": "1653080",
    "end": "1658919"
  },
  {
    "text": "write a huge amount I am I am that is my job to write a lot of structure is about a things relations to",
    "start": "1658919",
    "end": "1665000"
  },
  {
    "text": "other things but tiny units in isolation the pieces produced in this process might be easier",
    "start": "1665000",
    "end": "1670519"
  },
  {
    "text": "to build and understand individually but the whole system is not there's like no Architects we just don't have architects",
    "start": "1670519",
    "end": "1678720"
  },
  {
    "text": "Architects are the ones that go around in lamp codes telling you how you should write your code and it's very fantastic",
    "start": "1678720",
    "end": "1684240"
  },
  {
    "text": "and it's very beautiful and it works perfect on a whiteboard but when it actually comes time to implement it's horrifying and awful I don't like",
    "start": "1684240",
    "end": "1690960"
  },
  {
    "text": "Architects okay I don't want anything to do with Architects I've never had a good experience involving an architect I",
    "start": "1690960",
    "end": "1696519"
  },
  {
    "text": "swear every single time it's always just awful meaning requires context and these",
    "start": "1696519",
    "end": "1701799"
  },
  {
    "text": "tiny units are isolated from Context objectoriented design is often sold as the responsible thing to do the",
    "start": "1701799",
    "end": "1707720"
  },
  {
    "text": "moreal equivalent of keeping a closet or drawer meticulously organized what typical oo designs feel like though are",
    "start": "1707720",
    "end": "1712880"
  },
  {
    "text": "Tangles of excess packaging",
    "start": "1712880",
    "end": "1716720"
  },
  {
    "text": "in look at that little guy poor little guy uh who's who Architects then everybody Architects everybody does",
    "start": "1718519",
    "end": "1725840"
  },
  {
    "text": "architect like when you build out your piece you architect and when some piece needs to",
    "start": "1725840",
    "end": "1732080"
  },
  {
    "text": "be larger and put together itself and we have like a larger constraint you have to go and get a couple people together",
    "start": "1732080",
    "end": "1739200"
  },
  {
    "text": "and all agree on it that makes way more sense like when okay I want to re I want to rechange",
    "start": "1739200",
    "end": "1745799"
  },
  {
    "text": "like the program of how like how say startup works or where our main is is",
    "start": "1745799",
    "end": "1751120"
  },
  {
    "text": "how how do we link with partners and partner televisions well somebody does the research comes back and says hey",
    "start": "1751120",
    "end": "1756919"
  },
  {
    "text": "these are the ways I want to change it and then you can get a group of people on the team go yeah I like these changes I think these are good I don't like",
    "start": "1756919",
    "end": "1762840"
  },
  {
    "text": "those changes I don't think those are good and then they go back and they kind of make some changes or what they think",
    "start": "1762840",
    "end": "1768679"
  },
  {
    "text": "is good and then kind of come back and argue for it so like each person becomes the own architect of their own area",
    "start": "1768679",
    "end": "1774559"
  },
  {
    "text": "because there is no reason to have somebody that only thinks of architecture I really don't understand that uh I think that Architects if you",
    "start": "1774559",
    "end": "1781720"
  },
  {
    "text": "purely do non-coding Architects you do not at",
    "start": "1781720",
    "end": "1787480"
  },
  {
    "text": "all you just you can't contribute to a project reasonably because every month that goes by you're not coding is every",
    "start": "1787480",
    "end": "1793960"
  },
  {
    "text": "month you don't understand how production works and as that gets further and further further from your understanding you just simply start",
    "start": "1793960",
    "end": "1800519"
  },
  {
    "text": "suggesting these things that are just stupid and it feels good because it looks good on a whiteboard it always looks good on a whiteboard every piece",
    "start": "1800519",
    "end": "1807039"
  },
  {
    "text": "of code looks amazing on a whiteboard just like my brain when I come up with this new greatest idea everything is",
    "start": "1807039",
    "end": "1812399"
  },
  {
    "text": "fantastic and then you implement it and it's horrible it just was wrong um",
    "start": "1812399",
    "end": "1818679"
  },
  {
    "text": "everybody is an architect that's the thing everybody's an architect whenever you build code in some sense you're",
    "start": "1818679",
    "end": "1824080"
  },
  {
    "text": "architecting it and as you get more experience you can build larger pieces of code that fit together and that's",
    "start": "1824080",
    "end": "1829360"
  },
  {
    "text": "really it that's how I look at it Chad stack looks amazing on the Whiteboard",
    "start": "1829360",
    "end": "1834720"
  },
  {
    "text": "yeah don't mock boxes and lines I will crap everything is so fractured indirected and abstracted that like in",
    "start": "1834720",
    "end": "1840679"
  },
  {
    "text": "Wonderland nothing in code is as it seems the names of the classes and methods lie about what they actually do",
    "start": "1840679",
    "end": "1845919"
  },
  {
    "text": "because the real work is always done elsewhere the procedural alternative comparatively encourages us to introduce",
    "start": "1845919",
    "end": "1851039"
  },
  {
    "text": "abstractions only when they're much more likely to be useful go subscribe to Brian will good",
    "start": "1851039",
    "end": "1858159"
  },
  {
    "text": "guy good guy right there good guy that was a good one I like it here let me finish it off finish it all the way",
    "start": "1858159",
    "end": "1865399"
  },
  {
    "text": "through you know all the way through there we go perfect yeah that was good",
    "start": "1865399",
    "end": "1873960"
  },
  {
    "text": "um yeah I mean the pro there wasn't you know this this was a really good video",
    "start": "1874240",
    "end": "1880200"
  },
  {
    "text": "but I don't really know what it has you know it's hard to take anything concrete out of this video it was good I I appreciated it I'm",
    "start": "1880200",
    "end": "1888159"
  },
  {
    "text": "going to give him a thumbs up",
    "start": "1888159",
    "end": "1891720"
  }
]