[
  {
    "start": "0",
    "end": "255000"
  },
  {
    "text": "when Zig outshines rust memory efficient",
    "start": "80",
    "end": "3240"
  },
  {
    "text": "enum arrays okay okay okay enums are",
    "start": "3240",
    "end": "6600"
  },
  {
    "text": "tagged unions whose variance uh vary in",
    "start": "6600",
    "end": "8800"
  },
  {
    "text": "size are prone to significant memory",
    "start": "8800",
    "end": "10559"
  },
  {
    "text": "fragmentation in Rust okay type one in",
    "start": "10559",
    "end": "13400"
  },
  {
    "text": "the chat by the way who knows what a an",
    "start": "13400",
    "end": "15599"
  },
  {
    "text": "enum tagged Union is okay these are not",
    "start": "15599",
    "end": "18039"
  },
  {
    "text": "typescript enums okay so if you if you",
    "start": "18039",
    "end": "20119"
  },
  {
    "text": "know what a typescript enum is don't",
    "start": "20119",
    "end": "22480"
  },
  {
    "text": "don't think they're the same all right",
    "start": "22480",
    "end": "24000"
  },
  {
    "text": "sorry I asked this question incorrectly",
    "start": "24000",
    "end": "25840"
  },
  {
    "text": "69 in the chat if you have just",
    "start": "25840",
    "end": "27359"
  },
  {
    "text": "absolutely no idea what they are okay",
    "start": "27359",
    "end": "29439"
  },
  {
    "text": "there's a lot of people so let's here I",
    "start": "29439",
    "end": "31000"
  },
  {
    "text": "I'll give you a quickie can I give you",
    "start": "31000",
    "end": "32279"
  },
  {
    "text": "guys a quickie so that way we make sure",
    "start": "32279",
    "end": "33879"
  },
  {
    "text": "everybody's on the same page uh it's",
    "start": "33879",
    "end": "36760"
  },
  {
    "text": "pretty straightforward okay so here do I",
    "start": "36760",
    "end": "39320"
  },
  {
    "text": "I don't think I have a car here I'll",
    "start": "39320",
    "end": "40600"
  },
  {
    "text": "just cargo knit a new project in here",
    "start": "40600",
    "end": "42280"
  },
  {
    "text": "whatever that's fine we'll go to main",
    "start": "42280",
    "end": "44719"
  },
  {
    "text": "all right so in enum here we can go like",
    "start": "44719",
    "end": "47280"
  },
  {
    "text": "this uh enum uh Fu right so I've created",
    "start": "47280",
    "end": "50520"
  },
  {
    "text": "an enum in Rust and now I can say some",
    "start": "50520",
    "end": "52760"
  },
  {
    "text": "different types right I can have a bar",
    "start": "52760",
    "end": "54600"
  },
  {
    "text": "which let's just say it has a subtype",
    "start": "54600",
    "end": "56920"
  },
  {
    "text": "string I can have a bass here uh stru",
    "start": "56920",
    "end": "60719"
  },
  {
    "text": "uh other right and let's just say that",
    "start": "60719",
    "end": "62680"
  },
  {
    "text": "it has a which is an i32 and a b right I",
    "start": "62680",
    "end": "66880"
  },
  {
    "text": "can have a bass that contains an other I",
    "start": "66880",
    "end": "69200"
  },
  {
    "text": "can also have a nothing element right",
    "start": "69200",
    "end": "71479"
  },
  {
    "text": "and I can put that at the tippy top",
    "start": "71479",
    "end": "72720"
  },
  {
    "text": "little optimization whatever not a big",
    "start": "72720",
    "end": "74280"
  },
  {
    "text": "deal uh but this is an enum what it does",
    "start": "74280",
    "end": "77080"
  },
  {
    "text": "is it actually shows it's a way to tag",
    "start": "77080",
    "end": "80960"
  },
  {
    "text": "different types right so what happens",
    "start": "80960",
    "end": "83720"
  },
  {
    "text": "underneath the hood is that it has I I",
    "start": "83720",
    "end": "86439"
  },
  {
    "text": "think it's just your system word size of",
    "start": "86439",
    "end": "89520"
  },
  {
    "text": "what type type it is and then the rest",
    "start": "89520",
    "end": "91439"
  },
  {
    "text": "of the memory is devoted to the type",
    "start": "91439",
    "end": "93360"
  },
  {
    "text": "underneath the hood so that way so like",
    "start": "93360",
    "end": "95880"
  },
  {
    "text": "the equivalent of this in in um in",
    "start": "95880",
    "end": "98280"
  },
  {
    "text": "typescript would be something like this",
    "start": "98280",
    "end": "99920"
  },
  {
    "text": "right type Fu equals uh undefined or",
    "start": "99920",
    "end": "105079"
  },
  {
    "text": "string or other right like I think that",
    "start": "105079",
    "end": "108079"
  },
  {
    "text": "would be the equivalent but they're not",
    "start": "108079",
    "end": "109880"
  },
  {
    "text": "quite the equivalent right they're not",
    "start": "109880",
    "end": "111960"
  },
  {
    "text": "quite the equivalent because when I want",
    "start": "111960",
    "end": "113280"
  },
  {
    "text": "to go like this uh Fu equals uh Fu bar",
    "start": "113280",
    "end": "118920"
  },
  {
    "text": "uh hello uh into there we go I've just",
    "start": "118920",
    "end": "121920"
  },
  {
    "text": "created a bar right but it's just a foo",
    "start": "121920",
    "end": "124880"
  },
  {
    "text": "size right so it's a just type Foo I can",
    "start": "124880",
    "end": "126759"
  },
  {
    "text": "pass this Foo to any function and it's",
    "start": "126759",
    "end": "128879"
  },
  {
    "text": "just a foo it takes in function Foo it",
    "start": "128879",
    "end": "130879"
  },
  {
    "text": "takes in that type Foo to be able to do",
    "start": "130879",
    "end": "132879"
  },
  {
    "text": "something here with Foo I have to lift",
    "start": "132879",
    "end": "135319"
  },
  {
    "text": "it right and so I have to lift the",
    "start": "135319",
    "end": "137440"
  },
  {
    "text": "actual inner value out of it this one",
    "start": "137440",
    "end": "139840"
  },
  {
    "text": "would be if it's a type bar if it's a",
    "start": "139840",
    "end": "142599"
  },
  {
    "text": "foo bar then we get the string out if",
    "start": "142599",
    "end": "144400"
  },
  {
    "text": "it's a foo baz we get the other object",
    "start": "144400",
    "end": "146800"
  },
  {
    "text": "out so it's a little different than",
    "start": "146800",
    "end": "148440"
  },
  {
    "text": "typescript because typescript what you",
    "start": "148440",
    "end": "150280"
  },
  {
    "text": "do with typescript is that you'd go if",
    "start": "150280",
    "end": "152800"
  },
  {
    "text": "undefined handle the undefined case if a",
    "start": "152800",
    "end": "157959"
  },
  {
    "text": "is in the thing if type of is string do",
    "start": "157959",
    "end": "162080"
  },
  {
    "text": "the thing else it's the other one right",
    "start": "162080",
    "end": "164200"
  },
  {
    "text": "so it's kind of like you have to do a",
    "start": "164200",
    "end": "165159"
  },
  {
    "text": "bunch of if elses as opposed to a",
    "start": "165159",
    "end": "166920"
  },
  {
    "text": "pattern match on top of it plus it's",
    "start": "166920",
    "end": "169159"
  },
  {
    "text": "efficiently stored its type is stored as",
    "start": "169159",
    "end": "171200"
  },
  {
    "text": "part of the information so this pattern",
    "start": "171200",
    "end": "173080"
  },
  {
    "text": "match is effectively the same thing like",
    "start": "173080",
    "end": "175360"
  },
  {
    "text": "comparing a integer right so it's very",
    "start": "175360",
    "end": "178239"
  },
  {
    "text": "fast it's just a it's just a it's it's",
    "start": "178239",
    "end": "180920"
  },
  {
    "text": "just a comparison of an integer whereas",
    "start": "180920",
    "end": "182440"
  },
  {
    "text": "a switch is not a comparison of an",
    "start": "182440",
    "end": "185879"
  },
  {
    "text": "integer let's see you can serialize a",
    "start": "186519",
    "end": "188760"
  },
  {
    "text": "tag Union with typescript you cannot",
    "start": "188760",
    "end": "190720"
  },
  {
    "text": "without keeping the type exactly so this",
    "start": "190720",
    "end": "192280"
  },
  {
    "text": "is another cool part about uh a tag",
    "start": "192280",
    "end": "194599"
  },
  {
    "text": "Union you can serialize them like into",
    "start": "194599",
    "end": "197640"
  },
  {
    "text": "Jon and then deserialize them back into",
    "start": "197640",
    "end": "200120"
  },
  {
    "text": "that tagged Union structure it's pretty",
    "start": "200120",
    "end": "202959"
  },
  {
    "text": "cool what did I use into okay well this",
    "start": "202959",
    "end": "205560"
  },
  {
    "text": "is just a rust question now this right",
    "start": "205560",
    "end": "207400"
  },
  {
    "text": "here is a stir why is it a stir when you",
    "start": "207400",
    "end": "209439"
  },
  {
    "text": "compile a program and you you just raw",
    "start": "209439",
    "end": "211159"
  },
  {
    "text": "dog a string right into a program this",
    "start": "211159",
    "end": "213159"
  },
  {
    "text": "is actually the type the underlying type",
    "start": "213159",
    "end": "215360"
  },
  {
    "text": "is a static oh I don't know how I got",
    "start": "215360",
    "end": "217080"
  },
  {
    "text": "that little T in there is a static stir",
    "start": "217080",
    "end": "219239"
  },
  {
    "text": "because it's in memory somewhere right",
    "start": "219239",
    "end": "221040"
  },
  {
    "text": "that string is like actually in the",
    "start": "221040",
    "end": "222760"
  },
  {
    "text": "memory of the program if you looked at",
    "start": "222760",
    "end": "224239"
  },
  {
    "text": "the binary there would just be a hello",
    "start": "224239",
    "end": "226400"
  },
  {
    "text": "somewhere within there and so it's just",
    "start": "226400",
    "end": "228239"
  },
  {
    "text": "a reference to that point so to create",
    "start": "228239",
    "end": "230239"
  },
  {
    "text": "it into a capital S string which is like",
    "start": "230239",
    "end": "232680"
  },
  {
    "text": "an object right which is its own object",
    "start": "232680",
    "end": "234799"
  },
  {
    "text": "with its own underlying copy of memory",
    "start": "234799",
    "end": "236879"
  },
  {
    "text": "which that memory hello is located",
    "start": "236879",
    "end": "238680"
  },
  {
    "text": "somewhere on um somewhere on the Heap",
    "start": "238680",
    "end": "242599"
  },
  {
    "text": "that's what I just did but Mr HDMX uh",
    "start": "242599",
    "end": "245159"
  },
  {
    "text": "made an improved uh morphd oh cool",
    "start": "245159",
    "end": "247879"
  },
  {
    "text": "that's something I I would want to look",
    "start": "247879",
    "end": "249200"
  },
  {
    "text": "at okay anyways so now that everyone",
    "start": "249200",
    "end": "251599"
  },
  {
    "text": "knows what a taged union is and kind of",
    "start": "251599",
    "end": "253239"
  },
  {
    "text": "how to use it and what was going on",
    "start": "253239",
    "end": "254720"
  },
  {
    "text": "there let's go back into the article so",
    "start": "254720",
    "end": "257199"
  },
  {
    "text": "consider this one Foo there you go so",
    "start": "257199",
    "end": "258840"
  },
  {
    "text": "here again here's the taged union with",
    "start": "258840",
    "end": "260239"
  },
  {
    "text": "its different types A is a u8 b would be",
    "start": "260239",
    "end": "262520"
  },
  {
    "text": "a type u16 32 so here you go because of",
    "start": "262520",
    "end": "265759"
  },
  {
    "text": "the space needed for tagging and",
    "start": "265759",
    "end": "267040"
  },
  {
    "text": "Alignment this type is 16 bytes long",
    "start": "267040",
    "end": "269240"
  },
  {
    "text": "this makes sense CU remember so one",
    "start": "269240",
    "end": "271120"
  },
  {
    "text": "thing I forgot to say is any tagged",
    "start": "271120",
    "end": "272840"
  },
  {
    "text": "Union",
    "start": "272840",
    "end": "274840"
  },
  {
    "text": "contains the size of a tagged Union",
    "start": "274840",
    "end": "277080"
  },
  {
    "text": "contains the the tag plus it contains",
    "start": "277080",
    "end": "280080"
  },
  {
    "text": "the largest submember so the this member",
    "start": "280080",
    "end": "283720"
  },
  {
    "text": "is one bite this is two bytes this is",
    "start": "283720",
    "end": "285479"
  },
  {
    "text": "four bytes this is eight bytes so one",
    "start": "285479",
    "end": "287800"
  },
  {
    "text": "tag which is usug system WID so that",
    "start": "287800",
    "end": "289400"
  },
  {
    "text": "would be you know a u64 effectively then",
    "start": "289400",
    "end": "292120"
  },
  {
    "text": "another one of these so that'd be 16",
    "start": "292120",
    "end": "293479"
  },
  {
    "text": "bytes which they say right here right",
    "start": "293479",
    "end": "295160"
  },
  {
    "text": "you can see that right here it contains",
    "start": "295160",
    "end": "297120"
  },
  {
    "text": "each one of the the units and that's",
    "start": "297120",
    "end": "298960"
  },
  {
    "text": "just how a union Works in C it's how it",
    "start": "298960",
    "end": "301000"
  },
  {
    "text": "works in any language and you can't",
    "start": "301000",
    "end": "302800"
  },
  {
    "text": "complain about it in typescript because",
    "start": "302800",
    "end": "304240"
  },
  {
    "text": "well you're using JavaScript which",
    "start": "304240",
    "end": "305880"
  },
  {
    "text": "everything is like a minimum of 16 bytes",
    "start": "305880",
    "end": "307759"
  },
  {
    "text": "it's just gigantic uh this presents real",
    "start": "307759",
    "end": "310360"
  },
  {
    "text": "pain when collecting a large number of",
    "start": "310360",
    "end": "312520"
  },
  {
    "text": "them into a vecer hashmap okay this",
    "start": "312520",
    "end": "314639"
  },
  {
    "text": "makes sense this actually makes sense so",
    "start": "314639",
    "end": "316440"
  },
  {
    "text": "this tag and padding thing is kind of",
    "start": "316440",
    "end": "318240"
  },
  {
    "text": "interesting you can have a lot of them",
    "start": "318240",
    "end": "319880"
  },
  {
    "text": "obviously the reason why they choose",
    "start": "319880",
    "end": "321240"
  },
  {
    "text": "this I believe is uh reading speed right",
    "start": "321240",
    "end": "323840"
  },
  {
    "text": "it's it's just more efficient to read",
    "start": "323840",
    "end": "325280"
  },
  {
    "text": "out an entire word than it is to read",
    "start": "325280",
    "end": "327800"
  },
  {
    "text": "out some u8 and so just a thing to think",
    "start": "327800",
    "end": "330639"
  },
  {
    "text": "about uh you can handroll specialized",
    "start": "330639",
    "end": "332720"
  },
  {
    "text": "data structures for par uh for",
    "start": "332720",
    "end": "334319"
  },
  {
    "text": "particular enums that reduce",
    "start": "334319",
    "end": "335680"
  },
  {
    "text": "fragmentation to a minimum but doing",
    "start": "335680",
    "end": "337960"
  },
  {
    "text": "this generically or generically for an",
    "start": "337960",
    "end": "340440"
  },
  {
    "text": "arbitrary enum with maximum memory",
    "start": "340440",
    "end": "342080"
  },
  {
    "text": "efficiency is close to Impossible in",
    "start": "342080",
    "end": "343880"
  },
  {
    "text": "Rust the only option we have our proc",
    "start": "343880",
    "end": "346080"
  },
  {
    "text": "macros which compose poorly no derive on",
    "start": "346080",
    "end": "348880"
  },
  {
    "text": "thirdparty code or type aliases and are",
    "start": "348880",
    "end": "351479"
  },
  {
    "text": "not type aware unless using workarounds",
    "start": "351479",
    "end": "353680"
  },
  {
    "text": "based on generic const Expressions which",
    "start": "353680",
    "end": "356360"
  },
  {
    "text": "infect the call graph with the verbose",
    "start": "356360",
    "end": "358759"
  },
  {
    "text": "trait bounds and don't work with generic",
    "start": "358759",
    "end": "360800"
  },
  {
    "text": "type parameters so all this to say I",
    "start": "360800",
    "end": "362919"
  },
  {
    "text": "have no idea what he's talking about but",
    "start": "362919",
    "end": "364479"
  },
  {
    "text": "that sounds that sounds terrible or",
    "start": "364479",
    "end": "366840"
  },
  {
    "text": "congratulations I'm sorry Zig on the",
    "start": "366840",
    "end": "369319"
  },
  {
    "text": "other hand lets us perform the wildest",
    "start": "369319",
    "end": "371160"
  },
  {
    "text": "data structure transformations in a",
    "start": "371160",
    "end": "372880"
  },
  {
    "text": "generic concise way well that's exciting",
    "start": "372880",
    "end": "376479"
  },
  {
    "text": "I like that I like the sounds of that",
    "start": "376479",
    "end": "378599"
  },
  {
    "text": "because I I understand the problem right",
    "start": "378599",
    "end": "380479"
  },
  {
    "text": "so just for everyone to understand the",
    "start": "380479",
    "end": "382039"
  },
  {
    "text": "problem let's say you had a million a",
    "start": "382039",
    "end": "384680"
  },
  {
    "text": "million fools right and almost every",
    "start": "384680",
    "end": "387639"
  },
  {
    "text": "single",
    "start": "387639",
    "end": "388560"
  },
  {
    "text": "Foo is an A and you have very few of",
    "start": "388560",
    "end": "392360"
  },
  {
    "text": "these other ones right like let's just",
    "start": "392360",
    "end": "393960"
  },
  {
    "text": "say FU represents a utf8 en coding and",
    "start": "393960",
    "end": "397280"
  },
  {
    "text": "it's it's an English paper most of them",
    "start": "397280",
    "end": "399880"
  },
  {
    "text": "are going to be this maybe there's some",
    "start": "399880",
    "end": "401639"
  },
  {
    "text": "sort of weirdness that actually causes",
    "start": "401639",
    "end": "403319"
  },
  {
    "text": "some other large character right I get I",
    "start": "403319",
    "end": "405919"
  },
  {
    "text": "know u64 is not utfa encoding I I get",
    "start": "405919",
    "end": "408599"
  },
  {
    "text": "what you're saying and so what's going",
    "start": "408599",
    "end": "409960"
  },
  {
    "text": "to be is you're going to have like all",
    "start": "409960",
    "end": "411560"
  },
  {
    "text": "this unused space in every single spot",
    "start": "411560",
    "end": "414680"
  },
  {
    "text": "right you're only using two bytes out of",
    "start": "414680",
    "end": "416400"
  },
  {
    "text": "16 one out of eight so you're only using",
    "start": "416400",
    "end": "418759"
  },
  {
    "text": "like 12 and A2 half% of your memory at",
    "start": "418759",
    "end": "421440"
  },
  {
    "text": "any one time almost throughout the",
    "start": "421440",
    "end": "423319"
  },
  {
    "text": "entire array which ends up being 16",
    "start": "423319",
    "end": "425280"
  },
  {
    "text": "megabytes which is a lot of",
    "start": "425280",
    "end": "427960"
  },
  {
    "text": "memory so I I get I get the argument the",
    "start": "427960",
    "end": "430919"
  },
  {
    "text": "argument sucks you want a tight",
    "start": "430919",
    "end": "432960"
  },
  {
    "text": "structure you want yeah you want you",
    "start": "432960",
    "end": "434720"
  },
  {
    "text": "want to pack it you want to pack it",
    "start": "434720",
    "end": "436879"
  },
  {
    "text": "tight but that's the problem about",
    "start": "436879",
    "end": "438319"
  },
  {
    "text": "unions they need the space they have to",
    "start": "438319",
    "end": "440400"
  },
  {
    "text": "have the space because you have to be",
    "start": "440400",
    "end": "441639"
  },
  {
    "text": "able to lay out memory in a certain way",
    "start": "441639",
    "end": "444120"
  },
  {
    "text": "let's see before I go to the",
    "start": "444120",
    "end": "445120"
  },
  {
    "text": "implementation details I'd like to",
    "start": "445120",
    "end": "446479"
  },
  {
    "text": "explain why reducing the aforementioned",
    "start": "446479",
    "end": "448360"
  },
  {
    "text": "memory fragmentation is a useful in",
    "start": "448360",
    "end": "450360"
  },
  {
    "text": "practice okay background to me one of",
    "start": "450360",
    "end": "453000"
  },
  {
    "text": "the biggest motivators for efficient",
    "start": "453000",
    "end": "454599"
  },
  {
    "text": "enum arrays have been compilers one",
    "start": "454599",
    "end": "456919"
  },
  {
    "text": "problem that keeps coming up when",
    "start": "456919",
    "end": "458240"
  },
  {
    "text": "designing an as is figuring out how to",
    "start": "458240",
    "end": "460199"
  },
  {
    "text": "reduce its memory footprint big ASDS you",
    "start": "460199",
    "end": "463240"
  },
  {
    "text": "know girl you know I like big ASDS can",
    "start": "463240",
    "end": "465720"
  },
  {
    "text": "incur a hefty performance penalty during",
    "start": "465720",
    "end": "467759"
  },
  {
    "text": "compilation because memory bandwidth and",
    "start": "467759",
    "end": "469440"
  },
  {
    "text": "latency are frequently bottleneck in a",
    "start": "469440",
    "end": "471280"
  },
  {
    "text": "computer front ends Chandler C video on",
    "start": "471280",
    "end": "474159"
  },
  {
    "text": "carbon compiler has been making the",
    "start": "474159",
    "end": "475759"
  },
  {
    "text": "rounds on language forums in it he",
    "start": "475759",
    "end": "478199"
  },
  {
    "text": "describes how he first clang reg uh",
    "start": "478199",
    "end": "481080"
  },
  {
    "text": "regularly consumes 50x more memory than",
    "start": "481080",
    "end": "483720"
  },
  {
    "text": "the original source code dang dang",
    "start": "483720",
    "end": "487879"
  },
  {
    "text": "that's a lot of I mean think about it",
    "start": "487879",
    "end": "489800"
  },
  {
    "text": "source code is largely like Whit space",
    "start": "489800",
    "end": "492199"
  },
  {
    "text": "too there's so much Whit space in code",
    "start": "492199",
    "end": "496000"
  },
  {
    "text": "and you're telling me that it's like 50x",
    "start": "496000",
    "end": "498120"
  },
  {
    "text": "more memory that's crazy all right so",
    "start": "498120",
    "end": "501440"
  },
  {
    "text": "what does this have to do with enums",
    "start": "501440",
    "end": "502840"
  },
  {
    "text": "well the most common way of representing",
    "start": "502840",
    "end": "504319"
  },
  {
    "text": "a centrax tree nodes is by uh uh is via",
    "start": "504319",
    "end": "507759"
  },
  {
    "text": "some kind of recursion or recursion like",
    "start": "507759",
    "end": "509599"
  },
  {
    "text": "data structure let's define a node uh",
    "start": "509599",
    "end": "512120"
  },
  {
    "text": "for expressions in Rust using our new",
    "start": "512120",
    "end": "514240"
  },
  {
    "text": "type indices for IND Direction",
    "start": "514240",
    "end": "516599"
  },
  {
    "text": "expression unit number binary so there",
    "start": "516599",
    "end": "519440"
  },
  {
    "text": "you go s like this looks just like this",
    "start": "519440",
    "end": "521320"
  },
  {
    "text": "if you've done anything with like the",
    "start": "521320",
    "end": "522479"
  },
  {
    "text": "thorsten ball book uh building an",
    "start": "522479",
    "end": "524039"
  },
  {
    "text": "interpreter this looks like you you",
    "start": "524039",
    "end": "525880"
  },
  {
    "text": "immediately recognize this right we can",
    "start": "525880",
    "end": "528640"
  },
  {
    "text": "write an a node in O camel let's go",
    "start": "528640",
    "end": "531880"
  },
  {
    "text": "let's go o camel let's go o camel um",
    "start": "531880",
    "end": "535800"
  },
  {
    "text": "there you go you got the exact same",
    "start": "535800",
    "end": "537200"
  },
  {
    "text": "thing this all looks good a big",
    "start": "537200",
    "end": "539120"
  },
  {
    "text": "difference compared to rust is that we",
    "start": "539120",
    "end": "540800"
  },
  {
    "text": "uh can express truly recursive data",
    "start": "540800",
    "end": "542440"
  },
  {
    "text": "types without any form of explicit",
    "start": "542440",
    "end": "544120"
  },
  {
    "text": "indirection that's because the runtime",
    "start": "544120",
    "end": "545920"
  },
  {
    "text": "system and garbage uh a garbage",
    "start": "545920",
    "end": "548560"
  },
  {
    "text": "collector take care of memory",
    "start": "548560",
    "end": "549680"
  },
  {
    "text": "bookkeeping for us yes this is true it",
    "start": "549680",
    "end": "551480"
  },
  {
    "text": "just makes everything in O camel is just",
    "start": "551480",
    "end": "554200"
  },
  {
    "text": "slightly easier you just have to learn a",
    "start": "554200",
    "end": "555959"
  },
  {
    "text": "new syntax which is emotional which is",
    "start": "555959",
    "end": "558120"
  },
  {
    "text": "what I want to do but I just haven't",
    "start": "558120",
    "end": "559320"
  },
  {
    "text": "done it yet the problem uh we have now",
    "start": "559320",
    "end": "561440"
  },
  {
    "text": "is that we want to improve packing",
    "start": "561440",
    "end": "562800"
  },
  {
    "text": "efficiency of those enums a simple VEC",
    "start": "562800",
    "end": "565040"
  },
  {
    "text": "expression will consume size of enum",
    "start": "565040",
    "end": "567160"
  },
  {
    "text": "this is actually a really great article",
    "start": "567160",
    "end": "568640"
  },
  {
    "text": "I love where this is going this is",
    "start": "568640",
    "end": "570399"
  },
  {
    "text": "fantastic amount of memory for every",
    "start": "570399",
    "end": "572320"
  },
  {
    "text": "element which corresponds to the size of",
    "start": "572320",
    "end": "574000"
  },
  {
    "text": "the largest variant plus tag plus",
    "start": "574000",
    "end": "575560"
  },
  {
    "text": "padding uh luckily there are some ways",
    "start": "575560",
    "end": "578000"
  },
  {
    "start": "578000",
    "end": "705000"
  },
  {
    "text": "of dealing with this reducing",
    "start": "578000",
    "end": "579839"
  },
  {
    "text": "fragmentation let's take a simple",
    "start": "579839",
    "end": "581560"
  },
  {
    "text": "example of a three variant enum with a",
    "start": "581560",
    "end": "583440"
  },
  {
    "text": "member sizes 86 and 32 bytes storing",
    "start": "583440",
    "end": "586200"
  },
  {
    "text": "those in a regular VC would look",
    "start": "586200",
    "end": "587560"
  },
  {
    "text": "something like this this makes perfect",
    "start": "587560",
    "end": "589640"
  },
  {
    "text": "sense right every is everybody on board",
    "start": "589640",
    "end": "591560"
  },
  {
    "text": "with this by the way this guy is using",
    "start": "591560",
    "end": "593720"
  },
  {
    "text": "excal draw can we all take a second and",
    "start": "593720",
    "end": "595880"
  },
  {
    "text": "appreciate a little bit of excal",
    "start": "595880",
    "end": "598040"
  },
  {
    "text": "draw right this is some good excal draw",
    "start": "598040",
    "end": "600600"
  },
  {
    "text": "skills right here I think he's using",
    "start": "600600",
    "end": "602320"
  },
  {
    "text": "excal draw dude o camel is rising o",
    "start": "602320",
    "end": "605000"
  },
  {
    "text": "camel is a Big W I'm getting excited",
    "start": "605000",
    "end": "606959"
  },
  {
    "text": "about it uh the most common way to",
    "start": "606959",
    "end": "608760"
  },
  {
    "text": "improve packing efficiency is by keeping",
    "start": "608760",
    "end": "610519"
  },
  {
    "text": "the enum variance as small as possible",
    "start": "610519",
    "end": "612320"
  },
  {
    "text": "using tagged indices for example in Rust",
    "start": "612320",
    "end": "615399"
  },
  {
    "text": "take a look at the tag index crate used",
    "start": "615399",
    "end": "617200"
  },
  {
    "text": "by the compiler or check out the recent",
    "start": "617200",
    "end": "619240"
  },
  {
    "text": "blog post on small string optimizations",
    "start": "619240",
    "end": "621240"
  },
  {
    "text": "you'll find these optimizations all uh",
    "start": "621240",
    "end": "623600"
  },
  {
    "text": "the time and high performance code like",
    "start": "623600",
    "end": "625360"
  },
  {
    "text": "language run times garbage collectors",
    "start": "625360",
    "end": "626760"
  },
  {
    "text": "compilers game engines and Os kernels",
    "start": "626760",
    "end": "628519"
  },
  {
    "text": "okay very cool we won't look at those",
    "start": "628519",
    "end": "629800"
  },
  {
    "text": "but ex exciting unfortunately that",
    "start": "629800",
    "end": "631880"
  },
  {
    "text": "doesn't completely solve the",
    "start": "631880",
    "end": "632880"
  },
  {
    "text": "fragmentation issue the other way to",
    "start": "632880",
    "end": "634920"
  },
  {
    "text": "tackle the container uh let's see the",
    "start": "634920",
    "end": "637639"
  },
  {
    "text": "other way to tackle the container type",
    "start": "637639",
    "end": "639880"
  },
  {
    "text": "directly oh whoopsies the other way is",
    "start": "639880",
    "end": "642120"
  },
  {
    "text": "to tackle the container type directly we",
    "start": "642120",
    "end": "643920"
  },
  {
    "text": "could use a struct of arrays approach to",
    "start": "643920",
    "end": "645720"
  },
  {
    "text": "store the discriminants in values in two",
    "start": "645720",
    "end": "648040"
  },
  {
    "text": "separate allocations in fact that's uh",
    "start": "648040",
    "end": "650560"
  },
  {
    "text": "what the self-hosted zig compiler",
    "start": "650560",
    "end": "652279"
  },
  {
    "text": "actually",
    "start": "652279",
    "end": "653360"
  },
  {
    "text": "does okay okay this makes sense an array",
    "start": "653360",
    "end": "656839"
  },
  {
    "text": "of structs approach practically ECS at",
    "start": "656839",
    "end": "659040"
  },
  {
    "text": "this point the tag and Union are stored",
    "start": "659040",
    "end": "661160"
  },
  {
    "text": "in two separate allocations so we're not",
    "start": "661160",
    "end": "663240"
  },
  {
    "text": "paying for padding anymore however the",
    "start": "663240",
    "end": "665560"
  },
  {
    "text": "union collection still has the variant",
    "start": "665560",
    "end": "667440"
  },
  {
    "text": "fragmentation yes this makes sense",
    "start": "667440",
    "end": "669760"
  },
  {
    "text": "because you have to store does this make",
    "start": "669760",
    "end": "671800"
  },
  {
    "text": "sense is everyone understanding this",
    "start": "671800",
    "end": "675360"
  },
  {
    "text": "like if you still have an array of",
    "start": "675360",
    "end": "677480"
  },
  {
    "text": "eights 16s and 32s that still means you",
    "start": "677480",
    "end": "680639"
  },
  {
    "text": "have to have an array of only",
    "start": "680639",
    "end": "682959"
  },
  {
    "text": "32s and all these eights and 16s just",
    "start": "682959",
    "end": "685880"
  },
  {
    "text": "fit in the 32s right that makes sense",
    "start": "685880",
    "end": "689360"
  },
  {
    "text": "because of Zig stage compilation we have",
    "start": "689360",
    "end": "691000"
  },
  {
    "text": "a container types that perform this s",
    "start": "691000",
    "end": "692720"
  },
  {
    "text": "SOA struct of arrays transformation",
    "start": "692720",
    "end": "694639"
  },
  {
    "text": "gener uh generically for any type in",
    "start": "694639",
    "end": "696519"
  },
  {
    "text": "Rust we're constrained to proc macros",
    "start": "696519",
    "end": "699120"
  },
  {
    "text": "like struct of arrays derived which has",
    "start": "699120",
    "end": "701000"
  },
  {
    "text": "several downsides we can't place derive",
    "start": "701000",
    "end": "703040"
  },
  {
    "text": "on third party yep we've already talked",
    "start": "703040",
    "end": "704360"
  },
  {
    "text": "about that reducing variant",
    "start": "704360",
    "end": "707040"
  },
  {
    "start": "705000",
    "end": "735000"
  },
  {
    "text": "fragmentation uh this structure of array",
    "start": "707040",
    "end": "709680"
  },
  {
    "text": "transformation reduces a lost of wa a",
    "start": "709680",
    "end": "712040"
  },
  {
    "text": "lot of wasted padding introduced by the",
    "start": "712040",
    "end": "714240"
  },
  {
    "text": "enum tag but still isn't optimal to",
    "start": "714240",
    "end": "716639"
  },
  {
    "text": "really get rid of fragmentation in the",
    "start": "716639",
    "end": "718040"
  },
  {
    "text": "values we can create a create one vector",
    "start": "718040",
    "end": "720920"
  },
  {
    "text": "per",
    "start": "720920",
    "end": "722120"
  },
  {
    "text": "variant okay this would be hard because",
    "start": "722120",
    "end": "724320"
  },
  {
    "text": "now you have to you because one thing",
    "start": "724320",
    "end": "726000"
  },
  {
    "text": "they're missing in here is that you'd",
    "start": "726000",
    "end": "727120"
  },
  {
    "text": "have to have some level of bookkeeping",
    "start": "727120",
    "end": "729079"
  },
  {
    "text": "right you'd have to have something that",
    "start": "729079",
    "end": "731440"
  },
  {
    "text": "tells something else where to look for",
    "start": "731440",
    "end": "733519"
  },
  {
    "text": "this information right it's you can't",
    "start": "733519",
    "end": "735639"
  },
  {
    "start": "735000",
    "end": "1010000"
  },
  {
    "text": "just do three separate arrays for",
    "start": "735639",
    "end": "737600"
  },
  {
    "text": "freezy H uh size equivalent classes we",
    "start": "737600",
    "end": "741639"
  },
  {
    "text": "could stop here but let's consider enums",
    "start": "741639",
    "end": "743279"
  },
  {
    "text": "that have lots of variants that can be",
    "start": "743279",
    "end": "744920"
  },
  {
    "text": "grouped into small number of clusters",
    "start": "744920",
    "end": "746760"
  },
  {
    "text": "with the same type size okay a b and c",
    "start": "746760",
    "end": "750720"
  },
  {
    "text": "and d these are all the same thing okay",
    "start": "750720",
    "end": "752600"
  },
  {
    "text": "nice yep e f yeah yeah yeah yeah yeah",
    "start": "752600",
    "end": "756320"
  },
  {
    "text": "yeah and then I four four okay beautiful",
    "start": "756320",
    "end": "761839"
  },
  {
    "text": "beautiful look at that a u32 and a u32",
    "start": "761839",
    "end": "765040"
  },
  {
    "text": "wait hold on white these aren't the same",
    "start": "765040",
    "end": "767880"
  },
  {
    "text": "I should I looks larger oh I is supposed",
    "start": "767880",
    "end": "770720"
  },
  {
    "text": "to be thinner I it's hard for me to read",
    "start": "770720",
    "end": "772199"
  },
  {
    "text": "what I is supposed to mean anyways okay",
    "start": "772199",
    "end": "775720"
  },
  {
    "text": "as you can see the once per variant",
    "start": "775720",
    "end": "777680"
  },
  {
    "text": "approach would add 15 vectors",
    "start": "777680",
    "end": "779720"
  },
  {
    "text": "it's like the number of reallocations in",
    "start": "779720",
    "end": "781600"
  },
  {
    "text": "the systems call would increase",
    "start": "781600",
    "end": "782920"
  },
  {
    "text": "substantially and that requires a lot of",
    "start": "782920",
    "end": "784360"
  },
  {
    "text": "memory uh to amortize compared to the",
    "start": "784360",
    "end": "786880"
  },
  {
    "text": "native VC yeah or the naive VC the",
    "start": "786880",
    "end": "789360"
  },
  {
    "text": "vector it's also just super hard like",
    "start": "789360",
    "end": "791199"
  },
  {
    "text": "this would be such a hard thing to",
    "start": "791199",
    "end": "793399"
  },
  {
    "text": "program can we all agree that this is",
    "start": "793399",
    "end": "795199"
  },
  {
    "text": "like virtually the impossible this",
    "start": "795199",
    "end": "797560"
  },
  {
    "text": "solution feels impossible to",
    "start": "797560",
    "end": "800399"
  },
  {
    "text": "program uh the vectors may also be",
    "start": "800399",
    "end": "802519"
  },
  {
    "text": "arbitrary spread in memory leading to a",
    "start": "802519",
    "end": "804279"
  },
  {
    "text": "higher chance of cash conflicts uh the",
    "start": "804279",
    "end": "806560"
  },
  {
    "text": "aova collection I don't I actually don't",
    "start": "806560",
    "end": "808800"
  },
  {
    "text": "know what that that is collection itself",
    "start": "808800",
    "end": "810440"
  },
  {
    "text": "also consumes a lot of memory bloating",
    "start": "810440",
    "end": "812000"
  },
  {
    "text": "any struct it's embedded in now if we",
    "start": "812000",
    "end": "814000"
  },
  {
    "text": "group every variant by size we get three",
    "start": "814000",
    "end": "817079"
  },
  {
    "text": "clusters two four and eight bytes such",
    "start": "817079",
    "end": "819240"
  },
  {
    "text": "clusters can be allocated together into",
    "start": "819240",
    "end": "821560"
  },
  {
    "text": "the same Vector therefore reducing the",
    "start": "821560",
    "end": "823240"
  },
  {
    "text": "number of total vectors okay so we have",
    "start": "823240",
    "end": "826079"
  },
  {
    "text": "a bunch of different kind of Vex right",
    "start": "826079",
    "end": "829000"
  },
  {
    "text": "this makes sense you collapse them all",
    "start": "829000",
    "end": "831480"
  },
  {
    "text": "based on their size you could say this",
    "start": "831480",
    "end": "833160"
  },
  {
    "text": "dense version of of our aova pattern um",
    "start": "833160",
    "end": "837720"
  },
  {
    "text": "however once we collocate different",
    "start": "837720",
    "end": "839440"
  },
  {
    "text": "variants of the same allocation we lose",
    "start": "839440",
    "end": "841120"
  },
  {
    "text": "the ability to iterate through the",
    "start": "841120",
    "end": "842360"
  },
  {
    "text": "vector in a type Safe Way exactly so",
    "start": "842360",
    "end": "844480"
  },
  {
    "text": "what he means by that is you can't like",
    "start": "844480",
    "end": "846120"
  },
  {
    "text": "you literally just can't match the type",
    "start": "846120",
    "end": "847800"
  },
  {
    "text": "you can't just for match for match for",
    "start": "847800",
    "end": "849920"
  },
  {
    "text": "match you have to I mean I'm not even",
    "start": "849920",
    "end": "852519"
  },
  {
    "text": "sure how you'd walk through this in",
    "start": "852519",
    "end": "853759"
  },
  {
    "text": "order to begin with how do you know what",
    "start": "853759",
    "end": "855720"
  },
  {
    "text": "ORD is what",
    "start": "855720",
    "end": "857079"
  },
  {
    "text": "order and when it comes to an ordering",
    "start": "857079",
    "end": "859519"
  },
  {
    "text": "is it's pretty important uh so I I don't",
    "start": "859519",
    "end": "862440"
  },
  {
    "text": "quite see how we do something with this",
    "start": "862440",
    "end": "863920"
  },
  {
    "text": "yet if you lose access uh if you if your",
    "start": "863920",
    "end": "866360"
  },
  {
    "text": "access P pattern does not require blind",
    "start": "866360",
    "end": "868399"
  },
  {
    "text": "iteration which can be the case for",
    "start": "868399",
    "end": "869959"
  },
  {
    "text": "flattened index based tree structures",
    "start": "869959",
    "end": "871680"
  },
  {
    "text": "absolutely this uh this might be a",
    "start": "871680",
    "end": "873680"
  },
  {
    "text": "worthwhile trade-off okay I've",
    "start": "873680",
    "end": "875560"
  },
  {
    "text": "implemented a prototype of this data",
    "start": "875560",
    "end": "877160"
  },
  {
    "text": "structure in Zig the most important",
    "start": "877160",
    "end": "878720"
  },
  {
    "text": "pieces are the compiler built-ins that",
    "start": "878720",
    "end": "880720"
  },
  {
    "text": "allow reflection of field types bite",
    "start": "880720",
    "end": "883000"
  },
  {
    "text": "bite and bit sizes as well as inspecting",
    "start": "883000",
    "end": "885399"
  },
  {
    "text": "discriminant okay so add its core this",
    "start": "885399",
    "end": "888279"
  },
  {
    "text": "performs a straightforward compile time",
    "start": "888279",
    "end": "889800"
  },
  {
    "text": "reflection to compute the Clusters and",
    "start": "889800",
    "end": "891560"
  },
  {
    "text": "field two cluster mappings we do a",
    "start": "891560",
    "end": "893839"
  },
  {
    "text": "pseudodynamic allocation using a stack",
    "start": "893839",
    "end": "895759"
  },
  {
    "text": "allocated Vector this cluster",
    "start": "895759",
    "end": "898079"
  },
  {
    "text": "information is used to construct the",
    "start": "898079",
    "end": "899920"
  },
  {
    "text": "aova data structure okay very",
    "start": "899920",
    "end": "904639"
  },
  {
    "text": "cool you got a oh this is kind of wild I",
    "start": "904839",
    "end": "908519"
  },
  {
    "text": "this would take a while to digest so",
    "start": "908519",
    "end": "910120"
  },
  {
    "text": "we're just going to have to jump forward",
    "start": "910120",
    "end": "912680"
  },
  {
    "text": "if you want to do typ safe iteration you",
    "start": "912680",
    "end": "914279"
  },
  {
    "text": "could pay the cost of padding and add",
    "start": "914279",
    "end": "915920"
  },
  {
    "text": "the tag back in",
    "start": "915920",
    "end": "919920"
  },
  {
    "text": "okay okay very cool I don't understand",
    "start": "919920",
    "end": "922480"
  },
  {
    "text": "why the",
    "start": "922480",
    "end": "923279"
  },
  {
    "text": "tag is matching these sizes",
    "start": "923279",
    "end": "927680"
  },
  {
    "text": "right that don't quite get why the tags",
    "start": "927680",
    "end": "930120"
  },
  {
    "text": "are matching sizes uh if padding uh is",
    "start": "930120",
    "end": "932880"
  },
  {
    "text": "too much you can do a a struct of uh",
    "start": "932880",
    "end": "935000"
  },
  {
    "text": "trans a struct of arrays transformation",
    "start": "935000",
    "end": "936680"
  },
  {
    "text": "on each array",
    "start": "936680",
    "end": "938199"
  },
  {
    "text": "variants yep you can do that that's cool",
    "start": "938199",
    "end": "940600"
  },
  {
    "text": "that's cool as you can see there's quite",
    "start": "940600",
    "end": "942120"
  },
  {
    "text": "a few trade-offs you can make in this",
    "start": "942120",
    "end": "943319"
  },
  {
    "text": "space and they've all depend on the",
    "start": "943319",
    "end": "944399"
  },
  {
    "text": "concrete memory layout of our enum wow",
    "start": "944399",
    "end": "947000"
  },
  {
    "text": "this is super",
    "start": "947000",
    "end": "949959"
  },
  {
    "text": "complicated programming this correctly",
    "start": "949959",
    "end": "952720"
  },
  {
    "text": "would it feels like an index",
    "start": "952720",
    "end": "956680"
  },
  {
    "text": "nightmare it feels like a genuine index",
    "start": "957600",
    "end": "960600"
  },
  {
    "text": "nightmare to save all this because there",
    "start": "960600",
    "end": "962160"
  },
  {
    "text": "has to be there there has to be one more",
    "start": "962160",
    "end": "963880"
  },
  {
    "text": "missing array somewhere that is like",
    "start": "963880",
    "end": "967240"
  },
  {
    "text": "this information of which one to access",
    "start": "967240",
    "end": "970000"
  },
  {
    "text": "in what",
    "start": "970000",
    "end": "972399"
  },
  {
    "text": "order I feel like there's a missing",
    "start": "972639",
    "end": "974720"
  },
  {
    "text": "there's one missing piece in here that",
    "start": "974720",
    "end": "977480"
  },
  {
    "text": "we're not seeing and that's what I'm",
    "start": "977480",
    "end": "979079"
  },
  {
    "text": "worried about which is I I I I feel like",
    "start": "979079",
    "end": "980800"
  },
  {
    "text": "I'm kind of missing um this let's see",
    "start": "980800",
    "end": "983800"
  },
  {
    "text": "watching you I get impostorism don't",
    "start": "983800",
    "end": "985240"
  },
  {
    "text": "worry about that maintain the same",
    "start": "985240",
    "end": "986399"
  },
  {
    "text": "memory boundary maybe so they can be",
    "start": "986399",
    "end": "987720"
  },
  {
    "text": "stored inside of v as well",
    "start": "987720",
    "end": "989880"
  },
  {
    "text": "maybe an array of pointers that are you",
    "start": "989880",
    "end": "992240"
  },
  {
    "text": "can't have you can't do that in uh",
    "start": "992240",
    "end": "994639"
  },
  {
    "text": "rust or it's very hard to do what you're",
    "start": "994639",
    "end": "997199"
  },
  {
    "text": "saying in",
    "start": "997199",
    "end": "999720"
  },
  {
    "text": "Rust you know what I",
    "start": "1000720",
    "end": "1004160"
  },
  {
    "text": "mean uh get work treat I I there's just",
    "start": "1004680",
    "end": "1008199"
  },
  {
    "text": "nothing that needs to be changed I don't",
    "start": "1008199",
    "end": "1010120"
  },
  {
    "start": "1010000",
    "end": "1410000"
  },
  {
    "text": "think uh anyways let's keep on going all",
    "start": "1010120",
    "end": "1012600"
  },
  {
    "text": "right so as you can see there's quite a",
    "start": "1012600",
    "end": "1013920"
  },
  {
    "text": "few trade-offs that we can make in the",
    "start": "1013920",
    "end": "1015079"
  },
  {
    "text": "space and they all depend on concrete",
    "start": "1015079",
    "end": "1016519"
  },
  {
    "text": "memory layout for the enum while",
    "start": "1016519",
    "end": "1017839"
  },
  {
    "text": "creating such a data structure is pretty",
    "start": "1017839",
    "end": "1019240"
  },
  {
    "text": "straightforward and Zig creating any of",
    "start": "1019240",
    "end": "1020720"
  },
  {
    "text": "these examples in Rust using proc",
    "start": "1020720",
    "end": "1022160"
  },
  {
    "text": "macaros is basically impossible",
    "start": "1022160",
    "end": "1023959"
  },
  {
    "text": "completely agree the the the moment you",
    "start": "1023959",
    "end": "1026120"
  },
  {
    "text": "enter into proc macroand you've pretty",
    "start": "1026120",
    "end": "1028240"
  },
  {
    "text": "much entered into the impossible land",
    "start": "1028240",
    "end": "1029918"
  },
  {
    "text": "sorry I'm trying to move something below",
    "start": "1029919",
    "end": "1031360"
  },
  {
    "text": "I think I just bonked my camera my bad",
    "start": "1031360",
    "end": "1033959"
  },
  {
    "text": "um the reasons being that P proc macros",
    "start": "1033959",
    "end": "1036839"
  },
  {
    "text": "don't have access to type information",
    "start": "1036839",
    "end": "1038880"
  },
  {
    "text": "like size or alignment which could have",
    "start": "1038880",
    "end": "1040798"
  },
  {
    "text": "let's see while you could have a proc",
    "start": "1040799",
    "end": "1042600"
  },
  {
    "text": "macro generate a const function that",
    "start": "1042600",
    "end": "1044400"
  },
  {
    "text": "computes the clusters for particular",
    "start": "1044400",
    "end": "1045760"
  },
  {
    "text": "itms this function cannot be used uh to",
    "start": "1045760",
    "end": "1048400"
  },
  {
    "text": "specify the length of an array for a",
    "start": "1048400",
    "end": "1049880"
  },
  {
    "text": "generic type another limit to rust",
    "start": "1049880",
    "end": "1051559"
  },
  {
    "text": "generics is that the implementation of",
    "start": "1051559",
    "end": "1053600"
  },
  {
    "text": "generic containers cannot be conditioned",
    "start": "1053600",
    "end": "1055760"
  },
  {
    "text": "or whether the type the given type is an",
    "start": "1055760",
    "end": "1057840"
  },
  {
    "text": "enum or a struct and Zig we can",
    "start": "1057840",
    "end": "1059520"
  },
  {
    "text": "effectively do something like",
    "start": "1059520",
    "end": "1062760"
  },
  {
    "text": "this that's pretty",
    "start": "1063160",
    "end": "1065240"
  },
  {
    "text": "cool that's pretty cool again I think",
    "start": "1065240",
    "end": "1068080"
  },
  {
    "text": "Zig has a bright future I think Zig",
    "start": "1068080",
    "end": "1070080"
  },
  {
    "text": "really does have a bright future it has",
    "start": "1070080",
    "end": "1073039"
  },
  {
    "text": "and the thing is it it also it prevents",
    "start": "1073039",
    "end": "1075080"
  },
  {
    "text": "you it has n",
    "start": "1075080",
    "end": "1077440"
  },
  {
    "text": "pointer safe safety which I think is",
    "start": "1077440",
    "end": "1080520"
  },
  {
    "text": "like 80% of all the issues is nil",
    "start": "1080520",
    "end": "1083840"
  },
  {
    "text": "pointer safety and so you have nil",
    "start": "1083840",
    "end": "1086400"
  },
  {
    "text": "pointer safety and then it has a bunch",
    "start": "1086400",
    "end": "1088360"
  },
  {
    "text": "of other safety it has taged unions it",
    "start": "1088360",
    "end": "1090520"
  },
  {
    "text": "has errors at values it has syntax to",
    "start": "1090520",
    "end": "1092880"
  },
  {
    "text": "handle errors so you don't get the if",
    "start": "1092880",
    "end": "1094840"
  },
  {
    "text": "error equals nil go",
    "start": "1094840",
    "end": "1097360"
  },
  {
    "text": "problem it's nice it's like it's a very",
    "start": "1097360",
    "end": "1100120"
  },
  {
    "text": "nice",
    "start": "1100120",
    "end": "1101159"
  },
  {
    "text": "language I do want to take see the",
    "start": "1101159",
    "end": "1103600"
  },
  {
    "text": "problem is is I'm stuck between what's",
    "start": "1103600",
    "end": "1105280"
  },
  {
    "text": "my next big language learn cuzz I I",
    "start": "1105280",
    "end": "1107520"
  },
  {
    "text": "finished my you know I'm in I I'm done",
    "start": "1107520",
    "end": "1109400"
  },
  {
    "text": "with the rust learning I don't really",
    "start": "1109400",
    "end": "1110840"
  },
  {
    "text": "necessarily need need more rust learning",
    "start": "1110840",
    "end": "1113080"
  },
  {
    "text": "I'm not going to benefit a ton by",
    "start": "1113080",
    "end": "1114320"
  },
  {
    "text": "learning the deeper parts of rust and so",
    "start": "1114320",
    "end": "1116320"
  },
  {
    "text": "my next one is either zigg or o camel",
    "start": "1116320",
    "end": "1118840"
  },
  {
    "text": "and I just don't know which one to do I",
    "start": "1118840",
    "end": "1121400"
  },
  {
    "text": "know people love Elixir they always want",
    "start": "1121400",
    "end": "1122880"
  },
  {
    "text": "me to learn Elixir I just am not sure",
    "start": "1122880",
    "end": "1124320"
  },
  {
    "text": "about it I've only dabbled in Zig I've",
    "start": "1124320",
    "end": "1126000"
  },
  {
    "text": "dabbled in Zig and just kind of checked",
    "start": "1126000",
    "end": "1127840"
  },
  {
    "text": "it out it has null pointer safety but",
    "start": "1127840",
    "end": "1129320"
  },
  {
    "text": "you can still leak uh and use after free",
    "start": "1129320",
    "end": "1133320"
  },
  {
    "text": "Etc sure beats C though yeah it sure",
    "start": "1133320",
    "end": "1135960"
  },
  {
    "text": "does beat",
    "start": "1135960",
    "end": "1137400"
  },
  {
    "text": "C uh it sure",
    "start": "1137400",
    "end": "1140440"
  },
  {
    "text": "does why not both cuz it it's time",
    "start": "1140440",
    "end": "1143120"
  },
  {
    "text": "consuming it it takes a it's a it takes",
    "start": "1143120",
    "end": "1145440"
  },
  {
    "text": "a lot of time to learn a new language",
    "start": "1145440",
    "end": "1148679"
  },
  {
    "text": "and so I don't want to learn",
    "start": "1148679",
    "end": "1152159"
  },
  {
    "text": "something I want to really get it it",
    "start": "1152159",
    "end": "1154880"
  },
  {
    "text": "done well vs chod sorry vs chod hey vs",
    "start": "1154880",
    "end": "1158240"
  },
  {
    "text": "chod thank you for the $50 you're in a",
    "start": "1158240",
    "end": "1160679"
  },
  {
    "text": "YouTube video now thank you thank you",
    "start": "1160679",
    "end": "1162760"
  },
  {
    "text": "for that thank you for that all right",
    "start": "1162760",
    "end": "1164400"
  },
  {
    "text": "let me finish this bonus determining",
    "start": "1164400",
    "end": "1165880"
  },
  {
    "text": "index bitwidth at compile time while",
    "start": "1165880",
    "end": "1167880"
  },
  {
    "text": "implementing my prototyp type I notice",
    "start": "1167880",
    "end": "1169320"
  },
  {
    "text": "other ways of saving memory for instance",
    "start": "1169320",
    "end": "1171120"
  },
  {
    "text": "if you know the maximum capacity of your",
    "start": "1171120",
    "end": "1172880"
  },
  {
    "text": "data structure at compile time you can",
    "start": "1172880",
    "end": "1174440"
  },
  {
    "text": "pass that information to the type",
    "start": "1174440",
    "end": "1175679"
  },
  {
    "text": "constructing function and let it",
    "start": "1175679",
    "end": "1177039"
  },
  {
    "text": "determine the bitwidth of The Returned",
    "start": "1177039",
    "end": "1179039"
  },
  {
    "text": "tag index with this tagged index is",
    "start": "1179039",
    "end": "1181919"
  },
  {
    "text": "let's see when this tag index is",
    "start": "1181919",
    "end": "1183320"
  },
  {
    "text": "included in the subsequent data",
    "start": "1183320",
    "end": "1184679"
  },
  {
    "text": "structures let's say another enum this",
    "start": "1184679",
    "end": "1186520"
  },
  {
    "text": "information carries over naturally and",
    "start": "1186520",
    "end": "1188240"
  },
  {
    "text": "the bits that we didn't need can be used",
    "start": "1188240",
    "end": "1190919"
  },
  {
    "text": "for uh the discriminant so Zig gives you",
    "start": "1190919",
    "end": "1193600"
  },
  {
    "text": "the composable memory efficiency oh",
    "start": "1193600",
    "end": "1195600"
  },
  {
    "text": "that's pretty cool I don't quite",
    "start": "1195600",
    "end": "1197320"
  },
  {
    "text": "understand what this means but I like",
    "start": "1197320",
    "end": "1199159"
  },
  {
    "text": "the ending which is that as you specify",
    "start": "1199159",
    "end": "1201400"
  },
  {
    "text": "things downwards everything can kind of",
    "start": "1201400",
    "end": "1203039"
  },
  {
    "text": "compile to it and it just makes sense",
    "start": "1203039",
    "end": "1204480"
  },
  {
    "text": "and Zig and that's pretty cool to have",
    "start": "1204480",
    "end": "1206919"
  },
  {
    "text": "composable memory efficiency by being",
    "start": "1206919",
    "end": "1208559"
  },
  {
    "text": "specific about the number of bits you",
    "start": "1208559",
    "end": "1210000"
  },
  {
    "text": "need different parts of the code can",
    "start": "1210000",
    "end": "1211600"
  },
  {
    "text": "take advantage of that and with implicit",
    "start": "1211600",
    "end": "1213760"
  },
  {
    "text": "widening integer coer and dealing with",
    "start": "1213760",
    "end": "1215600"
  },
  {
    "text": "apis of different bitth with stay",
    "start": "1215600",
    "end": "1217120"
  },
  {
    "text": "ergonomic yes dude that's one thing rust",
    "start": "1217120",
    "end": "1219880"
  },
  {
    "text": "I I personally don't like this I don't",
    "start": "1219880",
    "end": "1222760"
  },
  {
    "text": "like that you constantly have to specify",
    "start": "1222760",
    "end": "1226120"
  },
  {
    "text": "upward maybe there's some safety reason",
    "start": "1226120",
    "end": "1228440"
  },
  {
    "text": "that missing in Rust but I don't like",
    "start": "1228440",
    "end": "1230320"
  },
  {
    "text": "that a u32 can't be instantaneously",
    "start": "1230320",
    "end": "1233120"
  },
  {
    "text": "promoted to a",
    "start": "1233120",
    "end": "1235200"
  },
  {
    "text": "u64 like to me that just feels",
    "start": "1235200",
    "end": "1238360"
  },
  {
    "text": "natural and it just it it does make me a",
    "start": "1238360",
    "end": "1240840"
  },
  {
    "text": "little bit wonky and using like I size",
    "start": "1240840",
    "end": "1243640"
  },
  {
    "text": "versus",
    "start": "1243640",
    "end": "1244679"
  },
  {
    "text": "uze it feels emotionally",
    "start": "1244679",
    "end": "1247640"
  },
  {
    "text": "painful yeah but I don't want to have to",
    "start": "1247640",
    "end": "1249640"
  },
  {
    "text": "specify this right I don't want to have",
    "start": "1249640",
    "end": "1251960"
  },
  {
    "text": "to think about this whole thing right",
    "start": "1251960",
    "end": "1254960"
  },
  {
    "text": "like I get that you should never",
    "start": "1254960",
    "end": "1256440"
  },
  {
    "text": "downcast no no again you're still making",
    "start": "1256440",
    "end": "1258919"
  },
  {
    "text": "me think about",
    "start": "1258919",
    "end": "1261200"
  },
  {
    "text": "it why not use uze then well uze doesn't",
    "start": "1261200",
    "end": "1264679"
  },
  {
    "text": "always work like a Time API time apis",
    "start": "1264679",
    "end": "1267480"
  },
  {
    "text": "either use u64 or they use U 128 right",
    "start": "1267480",
    "end": "1271080"
  },
  {
    "text": "like if you call as milliseconds you get",
    "start": "1271080",
    "end": "1273880"
  },
  {
    "text": "a 128",
    "start": "1273880",
    "end": "1277120"
  },
  {
    "text": "back so then you got this",
    "start": "1277679",
    "end": "1280240"
  },
  {
    "text": "whole you got this whole thing that goes",
    "start": "1280240",
    "end": "1282320"
  },
  {
    "text": "on of course but rust already does a",
    "start": "1282320",
    "end": "1283840"
  },
  {
    "text": "bunch of implicit stuff as it",
    "start": "1283840",
    "end": "1287039"
  },
  {
    "text": "is you know what I mean",
    "start": "1287039",
    "end": "1289440"
  },
  {
    "text": "so it's not straightforward in a way",
    "start": "1289440",
    "end": "1291039"
  },
  {
    "text": "this reminds me a lot of uh refinement",
    "start": "1291039",
    "end": "1293240"
  },
  {
    "text": "uh typing and ranged integers so this",
    "start": "1293240",
    "end": "1295320"
  },
  {
    "text": "ties a lot with my post on custom",
    "start": "1295320",
    "end": "1297000"
  },
  {
    "text": "integer bit uh uh on custom bitwidth",
    "start": "1297000",
    "end": "1300039"
  },
  {
    "text": "integers by the way Zig allows you to do",
    "start": "1300039",
    "end": "1301720"
  },
  {
    "text": "custom bit with integers which is crazy",
    "start": "1301720",
    "end": "1303679"
  },
  {
    "text": "you can do like a",
    "start": "1303679",
    "end": "1306159"
  },
  {
    "text": "i18 I don't even know what to do with",
    "start": "1306159",
    "end": "1308039"
  },
  {
    "text": "that writing extremely efficient generic",
    "start": "1308039",
    "end": "1310000"
  },
  {
    "text": "data structures in Rust is not always",
    "start": "1310000",
    "end": "1312039"
  },
  {
    "text": "easy in some cases they incur lots of",
    "start": "1312039",
    "end": "1314400"
  },
  {
    "text": "accidental complexity uh and in some",
    "start": "1314400",
    "end": "1316440"
  },
  {
    "text": "others they're essentially impossible to",
    "start": "1316440",
    "end": "1318600"
  },
  {
    "text": "Implement I think one of the biggest",
    "start": "1318600",
    "end": "1319960"
  },
  {
    "text": "takeaways for me with regards to staged",
    "start": "1319960",
    "end": "1321840"
  },
  {
    "text": "compilation was the ability to be",
    "start": "1321840",
    "end": "1324320"
  },
  {
    "text": "composable on memory layout level yeah",
    "start": "1324320",
    "end": "1327000"
  },
  {
    "text": "or to be composable on a memory layout",
    "start": "1327000",
    "end": "1328520"
  },
  {
    "text": "level if you're developing a system",
    "start": "1328520",
    "end": "1329919"
  },
  {
    "text": "programming's language that Embraces",
    "start": "1329919",
    "end": "1332120"
  },
  {
    "text": "Embraces efficiency and zero cost",
    "start": "1332120",
    "end": "1333799"
  },
  {
    "text": "abstraction you should absolutely take",
    "start": "1333799",
    "end": "1335559"
  },
  {
    "text": "another look at staged programming and",
    "start": "1335559",
    "end": "1337600"
  },
  {
    "text": "in particular zig's comp time this is",
    "start": "1337600",
    "end": "1340640"
  },
  {
    "text": "awesome this is a great this is just",
    "start": "1340640",
    "end": "1342760"
  },
  {
    "text": "great absolutely love that comp time is",
    "start": "1342760",
    "end": "1345600"
  },
  {
    "text": "just the greatest I think comp time is",
    "start": "1345600",
    "end": "1346880"
  },
  {
    "text": "one of the greatest features of Zig in",
    "start": "1346880",
    "end": "1348360"
  },
  {
    "text": "fact in fact I I'd argue that comp time",
    "start": "1348360",
    "end": "1350039"
  },
  {
    "text": "is one of the coolest features of any",
    "start": "1350039",
    "end": "1351640"
  },
  {
    "text": "programming language I agree with that",
    "start": "1351640",
    "end": "1353240"
  },
  {
    "text": "as well and so that's the one thing I",
    "start": "1353240",
    "end": "1354919"
  },
  {
    "text": "just love comp time comp time and Zig",
    "start": "1354919",
    "end": "1357760"
  },
  {
    "text": "effectively allows you to you build",
    "start": "1357760",
    "end": "1360520"
  },
  {
    "text": "these types it's kind of like generics",
    "start": "1360520",
    "end": "1362960"
  },
  {
    "text": "you can kind of think of it like",
    "start": "1362960",
    "end": "1364400"
  },
  {
    "text": "generics except that you're writing code",
    "start": "1364400",
    "end": "1367440"
  },
  {
    "text": "that executes at compile time so you",
    "start": "1367440",
    "end": "1370760"
  },
  {
    "text": "write",
    "start": "1370760",
    "end": "1371640"
  },
  {
    "text": "Zig that creates Zig but it doesn't feel",
    "start": "1371640",
    "end": "1375240"
  },
  {
    "text": "like a proc macro or something that's",
    "start": "1375240",
    "end": "1376919"
  },
  {
    "text": "really hard to do right it's not like",
    "start": "1376919",
    "end": "1379799"
  },
  {
    "text": "rust proc macros virtually impossible",
    "start": "1379799",
    "end": "1382159"
  },
  {
    "text": "proc macros there's like seven people in",
    "start": "1382159",
    "end": "1383720"
  },
  {
    "text": "the world that can write proc macros the",
    "start": "1383720",
    "end": "1385200"
  },
  {
    "text": "rest of us are just too stupid SL don't",
    "start": "1385200",
    "end": "1387640"
  },
  {
    "text": "have two months of peer study on proc",
    "start": "1387640",
    "end": "1389600"
  },
  {
    "text": "macros to write them good I'm glad that",
    "start": "1389600",
    "end": "1392520"
  },
  {
    "text": "this is your first",
    "start": "1392520",
    "end": "1393760"
  },
  {
    "text": "comment ORS goth I just want you to know",
    "start": "1393760",
    "end": "1397400"
  },
  {
    "text": "you've made it into a YouTube video and",
    "start": "1397400",
    "end": "1400320"
  },
  {
    "text": "that you my friend's very first comment",
    "start": "1400320",
    "end": "1403600"
  },
  {
    "text": "is this okay just want you to know that",
    "start": "1403600",
    "end": "1406000"
  },
  {
    "text": "right now like And subscribe like And",
    "start": "1406000",
    "end": "1407679"
  },
  {
    "text": "subscribe like sub like And subscribe",
    "start": "1407679",
    "end": "1412720"
  }
]