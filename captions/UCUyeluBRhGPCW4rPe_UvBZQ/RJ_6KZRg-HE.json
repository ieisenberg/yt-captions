[
  {
    "text": "next up C Must Die okay this feels exciting I hear you have to translate it",
    "start": "199",
    "end": "7080"
  },
  {
    "text": "though how do I translate this bad boy um translate to English oh let's go the",
    "start": "7080",
    "end": "12480"
  },
  {
    "text": "SE language is one of the most influential programming languages in history it has become an indispensable tool for operating system development",
    "start": "12480",
    "end": "19039"
  },
  {
    "text": "displacing assembly languages from this pedestal learning C is a must for any self-respecting programmer dang type one",
    "start": "19039",
    "end": "26800"
  },
  {
    "text": "in the chat if you don't know see at all all I see we don't have a lot of",
    "start": "26800",
    "end": "31920"
  },
  {
    "text": "self-respect in this chat am I right boys not a lot of respect here this",
    "start": "31920",
    "end": "37280"
  },
  {
    "text": "language is loved for its apparent Simplicity and hated for its ruthlessness to errors thanks to it we",
    "start": "37280",
    "end": "43079"
  },
  {
    "text": "have the Linux kernel and thousands of vulnerabilities in its deboot is this a rust article is this is this all we're",
    "start": "43079",
    "end": "48960"
  },
  {
    "text": "are we just getting rusted right now is this it is that it is that all we're getting right now let's try to",
    "start": "48960",
    "end": "54079"
  },
  {
    "text": "understand what this controversy uh C language is and a a blessing or a curse",
    "start": "54079",
    "end": "59359"
  },
  {
    "text": "the history of language originates in the depths of the American company Bell labs and is closely connected with the fate of Unix",
    "start": "59359",
    "end": "65158"
  },
  {
    "text": "operating system its creator Ken Thompson and Dennis richy developed their project for pdp1 computers and for",
    "start": "65159",
    "end": "71080"
  },
  {
    "text": "the first two years their main tool was assembler language the labor intensity of writing machine code forced them to",
    "start": "71080",
    "end": "76720"
  },
  {
    "text": "look for replacement which eventually became C language with its help the operating system kernel and most of the",
    "start": "76720",
    "end": "81960"
  },
  {
    "text": "utilities were completely Rewritten the C language allowed for the creation of effectively low-level programs on the",
    "start": "81960",
    "end": "87320"
  },
  {
    "text": "PDP 11 practically without using the assembly language rock on I mean this is",
    "start": "87320",
    "end": "92600"
  },
  {
    "text": "a great history by the way this is the I know this is a very small version of the actual history itself but this is very",
    "start": "92600",
    "end": "99200"
  },
  {
    "text": "very fantastic zigg Supremacy incoming dude if this is Zig Supremacy let's go let's absolutely go I love this by the",
    "start": "99200",
    "end": "105680"
  },
  {
    "text": "way I think what a lot of people miss or don't understand about C is C was birthed at a time where the options were",
    "start": "105680",
    "end": "113159"
  },
  {
    "text": "Fortran 57 elol and cobal like you could just be like Oh I'm going to use",
    "start": "113159",
    "end": "119960"
  },
  {
    "text": "whatever instead it's like they were like well I guess I'm going to use assembly or I'm going to invent my own",
    "start": "119960",
    "end": "125680"
  },
  {
    "text": "language lisp was available lisp was also available lisp was very available memory was extremely limited uh forren",
    "start": "125680",
    "end": "132680"
  },
  {
    "text": "will make a comeback don't worry you saw those ball diagrams just write binary L like that's I know you're Ling annoying",
    "start": "132680",
    "end": "138800"
  },
  {
    "text": "fart but during that day and age people just wrote binary unironically people did that and that's that okay I know I",
    "start": "138800",
    "end": "146480"
  },
  {
    "text": "know you're like oh I'm being funny here no you're actually not being funny you're just you're just literally just mentioning the time period in which",
    "start": "146480",
    "end": "152720"
  },
  {
    "text": "people did that okay Punch Cards were just binary very conveniently I'm not even sure if they had a query keyboard",
    "start": "152720",
    "end": "159159"
  },
  {
    "text": "at this point over time the issue of porting Unix to new hardware platforms arose using the C language significantly",
    "start": "159159",
    "end": "165680"
  },
  {
    "text": "simplified this task after all if only the assembler language had been used in development the operating system would",
    "start": "165680",
    "end": "171480"
  },
  {
    "text": "have to be Rewritten for each computer architecture by the way this is one of the big reasons why people don't realize",
    "start": "171480",
    "end": "176760"
  },
  {
    "text": "how difficult it was to Port programs back then the memory the word length was",
    "start": "176760",
    "end": "182959"
  },
  {
    "text": "different on like every computer and they were insane numbers like some numbers just had 72 bit word lengths",
    "start": "182959",
    "end": "189760"
  },
  {
    "text": "like what the hell or some were like just 32 some are like 36 they're not even powers of two they're just 36 bits",
    "start": "189760",
    "end": "195319"
  },
  {
    "text": "of word length and you're like what is what is happening here right like how do you even deal with that it's not even",
    "start": "195319",
    "end": "200879"
  },
  {
    "text": "powers of two let's say on the other hand the Unix source code still contained a lot of code created specifically for the pdp1 computer and",
    "start": "200879",
    "end": "207400"
  },
  {
    "text": "the C language itself did not always accurately reflect the features and details of a particular Hardware platform the later let's see the latter",
    "start": "207400",
    "end": "213319"
  },
  {
    "text": "further complicated the porting process and deprived the language of some of its main advantages transparent and",
    "start": "213319",
    "end": "218400"
  },
  {
    "text": "understandable generation of machine code the more computer architecture SE captured the less obvious its connection with lowlevel became yeah I",
    "start": "218400",
    "end": "225720"
  },
  {
    "text": "mean what how else would this work right wasn't it still pretty obvious what the",
    "start": "225720",
    "end": "231080"
  },
  {
    "text": "low-level language was at this point or what it was producing uh another problem was discovered during the uh migration",
    "start": "231080",
    "end": "237120"
  },
  {
    "text": "of Unix to new hardware platforms ported C programs executed more slowly than expected the more the target computer",
    "start": "237120",
    "end": "243959"
  },
  {
    "text": "architecture differed from the pdp1 the less efficient the resulting code was to compensate for this shortcoming compiler",
    "start": "243959",
    "end": "249799"
  },
  {
    "text": "developers increasingly began to use implicit optimizations and although this solution improved the performance of the programs themselves C moved further and",
    "start": "249799",
    "end": "256600"
  },
  {
    "text": "further away from the low level now it was necessary not only to understand how exactly the language constructs",
    "start": "256600",
    "end": "262919"
  },
  {
    "text": "constructs were defined for each of the computer architectures but also how they were optimized of course each comp",
    "start": "262919",
    "end": "268759"
  },
  {
    "text": "compiler independently decided how exactly to translate the source code for each Hardware platform as a result it",
    "start": "268759",
    "end": "273880"
  },
  {
    "text": "has become almost impossible to write low-level program in C that was independent of the compiler used yeah I",
    "start": "273880",
    "end": "279960"
  },
  {
    "text": "mean but that's true of all languages for all time I mean is this not like a obvious outcome of anytime there is more",
    "start": "279960",
    "end": "287160"
  },
  {
    "text": "than one platform I feel like this is just like to be expected I mean this is",
    "start": "287160",
    "end": "292720"
  },
  {
    "text": "why we're at llvm today is that a this exact problem just kept happening over",
    "start": "292720",
    "end": "298120"
  },
  {
    "text": "and over again and there were that many different languages that eventually all needed the compil so why keep rewriting",
    "start": "298120",
    "end": "304360"
  },
  {
    "text": "things when you could have one way to Target the back end this just seems like a natural normal evolution of pro uh of",
    "start": "304360",
    "end": "310720"
  },
  {
    "text": "programs all layers of abstraction follow this pattern yeah I mean this just feels completely natural I don't I",
    "start": "310720",
    "end": "316199"
  },
  {
    "text": "don't think there's a way around this unless if you wanted a c dialect for every computer ever the problems with",
    "start": "316199",
    "end": "322800"
  },
  {
    "text": "the abstraction same thing for orms that support multiple DBS yeah I mean eventually you have you you eventually",
    "start": "322800",
    "end": "328360"
  },
  {
    "text": "something inefficient happens or what is I would consider much worse is that whenever you do this whenever you change",
    "start": "328360",
    "end": "335479"
  },
  {
    "text": "the abstraction layer it could lead to some really weird and bizarre performance issues and you have no idea",
    "start": "335479",
    "end": "342800"
  },
  {
    "text": "why these performance issues happen because you are specifying something normal this is why OMS generally I think are super convenient but at the end of",
    "start": "342800",
    "end": "349960"
  },
  {
    "text": "the day they can also be a huge giant foot gum right it was necessary to understand how to effectively implement",
    "start": "349960",
    "end": "356520"
  },
  {
    "text": "the highlevel constructs of the sea language while preserving its low properties an attempt to solve this",
    "start": "356520",
    "end": "361919"
  },
  {
    "text": "problem was the publication of the first language standard in 1989 it is commonly called ancc or c89 and it is to this",
    "start": "361919",
    "end": "369520"
  },
  {
    "text": "standard we will refer to in what follows the creators of the standard decided to finally break the connection",
    "start": "369520",
    "end": "375319"
  },
  {
    "text": "between C and the pdp11 architecture and make the language completely high level",
    "start": "375319",
    "end": "380400"
  },
  {
    "text": "the so-called abstract machine was introduced an imaginary executor of the C code section 2123 program execution by",
    "start": "380400",
    "end": "387560"
  },
  {
    "text": "the way I love this I love I you know this is so funny to me because this term of high level and lowlevel just seems so",
    "start": "387560",
    "end": "395680"
  },
  {
    "text": "bizarre in our modern world regardless of what you think people are going to",
    "start": "395680",
    "end": "400720"
  },
  {
    "text": "say type one in the chat if you think C is high level I'm surprised so many",
    "start": "400720",
    "end": "406120"
  },
  {
    "text": "people say uh one honestly I'm I'm actually surprised I would have always called C A like the highest level",
    "start": "406120",
    "end": "412280"
  },
  {
    "text": "lowlevel language it's it's just like One Step Beyond assembly for me perhaps",
    "start": "412280",
    "end": "418000"
  },
  {
    "text": "we don't have a proper definition of what lowle is so therefore the word high",
    "start": "418000",
    "end": "423599"
  },
  {
    "text": "LEL just doesn't mean anything maybe that would be a better way to describe it is you first Define what low level is",
    "start": "423599",
    "end": "430639"
  },
  {
    "text": "and then once you have low level correctly defined high level becomes simple because the problem about high",
    "start": "430639",
    "end": "436240"
  },
  {
    "text": "level is that high level means things to different people whereas low-l I think you can say like this is exactly what it",
    "start": "436240",
    "end": "442720"
  },
  {
    "text": "is yeah low-level learning this means that the compiler optimizations will not affect the program's operation as long",
    "start": "442720",
    "end": "448120"
  },
  {
    "text": "as the source code compiles with the standard the abstract machine was supposed to solve two problems",
    "start": "448120",
    "end": "453440"
  },
  {
    "text": "simultaneously first following the standard made it possible to create easily portable C programs second the",
    "start": "453440",
    "end": "459520"
  },
  {
    "text": "abstract machine could give compilers freedom to for optimizations but a reasonable question arises how then does",
    "start": "459520",
    "end": "465639"
  },
  {
    "text": "the C language differ from any other compiled highle language the answer lies in the text of the standard in order to",
    "start": "465639",
    "end": "471759"
  },
  {
    "text": "give programmers a theoretical opportunity to write low-level procedures and therefore non-portable ones other concept was introduced on",
    "start": "471759",
    "end": "479520"
  },
  {
    "text": "undefined Behavior oh my gosh is this where we get is this what happens undefined behavior",
    "start": "479520",
    "end": "486440"
  },
  {
    "text": "is behavior that occurs when using a non-portable or erroneous program construct erroneous data or objects with",
    "start": "486440",
    "end": "492960"
  },
  {
    "text": "undefined values for which the standard imposes no requirements possible undefined behaviors range from ignoring",
    "start": "492960",
    "end": "499199"
  },
  {
    "text": "the situation completely with unpredictable results behaving during compilation or execution of the program",
    "start": "499199",
    "end": "505080"
  },
  {
    "text": "in documented in a documented manner characteristic of the environment with or without issuing a diagnostic message",
    "start": "505080",
    "end": "511759"
  },
  {
    "text": "to terminating compilation or execution with issuing a diagnostic message it is",
    "start": "511759",
    "end": "517080"
  },
  {
    "text": "somewhat true I guess if you tried to operate in a very specific machine targeted architecture way and then you",
    "start": "517080",
    "end": "523159"
  },
  {
    "text": "went to a different architecture and you still had all the same stuff it would just kind of explod like how do you",
    "start": "523159",
    "end": "528200"
  },
  {
    "text": "define that basically using a pointer effort free what they're trying to say is don't double free uh simply put",
    "start": "528200",
    "end": "534519"
  },
  {
    "text": "undefined behavior is deliberately left whole in the description of the abstract machine of the SE language they allow",
    "start": "534519",
    "end": "540600"
  },
  {
    "text": "compilers to decide for themselves how to deal with certain language constructs the behavior of which the standard text",
    "start": "540600",
    "end": "546360"
  },
  {
    "text": "deliberately keeps silent about in particular they can be perceived as unacceptable in the program text let's",
    "start": "546360",
    "end": "553079"
  },
  {
    "text": "take a closer look at undefined Behavior using a simp a specific example by the way I mean you can still have a lot of",
    "start": "553079",
    "end": "559800"
  },
  {
    "text": "undefined behavior in some sense like you can you can even in Zig there's still ways to kind of run into things",
    "start": "559800",
    "end": "565959"
  },
  {
    "text": "that are kind of confusing you can still dreference a null that just crashes the program at a specific point and you get",
    "start": "565959",
    "end": "572000"
  },
  {
    "text": "a good you get a good you know you get a good error message you can still not free memory and then you just leak",
    "start": "572000",
    "end": "578000"
  },
  {
    "text": "memory like wild and you get stuff you can do a lot but Zig tries to make undefined Behavior effectively",
    "start": "578000",
    "end": "583440"
  },
  {
    "text": "impossible but you can still just do dumb things that aren't really undefined behavior let's take a look at uh the",
    "start": "583440",
    "end": "588760"
  },
  {
    "text": "following fragment of C code X1 equals this one uh X1 equal size of this one",
    "start": "588760",
    "end": "594320"
  },
  {
    "text": "time 8 all right size of is the amount of bytes right and then eight is multiply that by eight so that's the",
    "start": "594320",
    "end": "599560"
  },
  {
    "text": "amount of bits so you turn this into the bit so you're going to shift one by the size of X which should cause an overflow",
    "start": "599560",
    "end": "605160"
  },
  {
    "text": "right uh so my guess is that if it's an INT the Overflow I almost want to say it should",
    "start": "605160",
    "end": "611800"
  },
  {
    "text": "be zero No it should be zero it should be one right should is it just one uh let's try to guess what the result we'll",
    "start": "611800",
    "end": "617680"
  },
  {
    "text": "get let's say we compile this code for arm architecture processors the bit shift instruction within this Hardware",
    "start": "617680",
    "end": "624279"
  },
  {
    "text": "platform is defined so that the final value of the variable X should be zero ah on the the other hand we can",
    "start": "624279",
    "end": "630320"
  },
  {
    "text": "translate our program into the machine code of an x86 architecture and there the bit shift is implemented in such a",
    "start": "630320",
    "end": "636320"
  },
  {
    "text": "way that the value of x will not change and remain equal to one yes okay okay",
    "start": "636320",
    "end": "641880"
  },
  {
    "text": "interesting okay so I think what what they're trying to say is is the following is that let's just say you have 32 bits right and so here's the one",
    "start": "641880",
    "end": "649320"
  },
  {
    "text": "right here and so in Armand as you go this way when you let run off the edge",
    "start": "649320",
    "end": "655480"
  },
  {
    "text": "oopsies I must not have this muted mute that site um what that means is that",
    "start": "655480",
    "end": "661560"
  },
  {
    "text": "that one will run off the edge and that's that whereas for x86 it does the loop right that's why I said zero or one",
    "start": "661560",
    "end": "668880"
  },
  {
    "text": "because I was trying to remember which one does it does it does it wrap or does",
    "start": "668880",
    "end": "674519"
  },
  {
    "text": "it just go right off the edge uh we conclude that the result of this code",
    "start": "674519",
    "end": "679639"
  },
  {
    "text": "fragment depends on the hardware platform for which we compiled it but in fact this is not so in reality this code",
    "start": "679639",
    "end": "686279"
  },
  {
    "text": "fragment can be processed by the compiler in any possible or impossible way the reason is the following",
    "start": "686279",
    "end": "691519"
  },
  {
    "text": "according to the text of the C language standard a bit shift by an amount greater than or equal to the size of the",
    "start": "691519",
    "end": "696680"
  },
  {
    "text": "expression in bits is undefined Behavior yeah I feel like you should Define this behavior Can we all agree like this",
    "start": "696680",
    "end": "702360"
  },
  {
    "text": "feels like very defined Behavior me personally call me oldfashioned I think",
    "start": "702360",
    "end": "707720"
  },
  {
    "text": "you should wrap that SOB it seems like we should be able to Define this one it",
    "start": "707720",
    "end": "713279"
  },
  {
    "text": "allows for better optimizations yeah I think this is one of those times where we say you know F your optimizations it",
    "start": "713279",
    "end": "719240"
  },
  {
    "text": "turns out that there is no guarantee that this piece of code will work at all in fact even within the same",
    "start": "719240",
    "end": "724839"
  },
  {
    "text": "architecture the same compiler can generate completely different executable files let's give an example of compiling",
    "start": "724839",
    "end": "729959"
  },
  {
    "text": "and running a program with printed with printing the value of the variable X in both cases we use the GCC compiler",
    "start": "729959",
    "end": "736800"
  },
  {
    "text": "10.2.1 for the Target AR architecture X 8664 okay oh man are we about to be",
    "start": "736800",
    "end": "741959"
  },
  {
    "text": "Bamboozled all right here we go size one this so we're going to run this this",
    "start": "741959",
    "end": "748399"
  },
  {
    "text": "test C test Z oh nice optimizing let's",
    "start": "748399",
    "end": "754040"
  },
  {
    "text": "go that okay that's crazy dude",
    "start": "754040",
    "end": "759399"
  },
  {
    "text": "that's okay I can see that I can see this being a really horrible experience this is clearly not the experience you",
    "start": "762480",
    "end": "769279"
  },
  {
    "text": "want you don't want to have an optim like especially this type of this type of bug cuz this type of bug is",
    "start": "769279",
    "end": "776959"
  },
  {
    "text": "absolutely horrible I don't get this okay so obviously someone said there's an optimization going on so that means",
    "start": "776959",
    "end": "782440"
  },
  {
    "text": "in debug builds when you shift it over by the length so let's just say there's 32 bits so if I were to do a left [ __ ]",
    "start": "782440",
    "end": "790160"
  },
  {
    "text": "left a left [ __ ] 32 times that should put the one at the 33rd bit right that",
    "start": "790160",
    "end": "795440"
  },
  {
    "text": "makes sense okay I think we can all agree to that so in debug mode when it goes to the 33rd bit it must do a modulo",
    "start": "795440",
    "end": "804519"
  },
  {
    "text": "by the length right and so you get the remainder of it afterwards and so",
    "start": "804519",
    "end": "809680"
  },
  {
    "text": "33 modulo 32 right oops put a three in there equals one so it actually puts the",
    "start": "809680",
    "end": "815839"
  },
  {
    "text": "one back here but in the optimization build it doesn't do that it's just like well the thing's off there's no more",
    "start": "815839",
    "end": "822399"
  },
  {
    "text": "there's no more ones right because when you do a left shift for those that don't understand so if I go 0x1 and I left",
    "start": "822399",
    "end": "828120"
  },
  {
    "text": "shift it by one what I'm going to get is 0x2 in binary it looks like this 0",
    "start": "828120",
    "end": "835959"
  },
  {
    "text": "B1 to 0 B1 zero every time you left shift you're",
    "start": "835959",
    "end": "841560"
  },
  {
    "text": "just adding a zero to the front effectively or multiplying by two in binary that's a multiplication of",
    "start": "841560",
    "end": "848160"
  },
  {
    "text": "two fun fact the operand gets Mod 32 yeah the operand is getting a mod uh it",
    "start": "848160",
    "end": "853720"
  },
  {
    "text": "left [ __ ] the bed yeah in the optimization built it pre-computes the value and replace the instructions with",
    "start": "853720",
    "end": "859000"
  },
  {
    "text": "the const since nothing is changing uh profile optimization will cause oopsy daisies in this example",
    "start": "859000",
    "end": "866040"
  },
  {
    "text": "crazy I understand why people would hate this did not know this about C okay I had no idea so my assumptions",
    "start": "866040",
    "end": "873399"
  },
  {
    "text": "that it has something to do with that or as people are saying it's actually pre-computing the example and is able to do it directly by doing all this okay so",
    "start": "873399",
    "end": "879800"
  },
  {
    "text": "maybe that's maybe that's a better example of what I said but I assume that whatever is going on here one's allowing",
    "start": "879800",
    "end": "885759"
  },
  {
    "text": "it to be rounding the bases while the other one's not allowing it to round the bases whatever that means I didn't know",
    "start": "885759",
    "end": "893120"
  },
  {
    "text": "that it's not pre-computing a shift it's pre-computing garbage oh yeah sometimes you want shifting uh to saturate",
    "start": "893120",
    "end": "899320"
  },
  {
    "text": "sometimes you want shifting to saturate that's why it's good to know when you have shifting saturate non-shifting saturate the assembly instruction set",
    "start": "899320",
    "end": "905759"
  },
  {
    "text": "can change and cause undefined behavior in this kind of scenarios not the instruction but how they behave and they",
    "start": "905759",
    "end": "911360"
  },
  {
    "text": "let's see how they implement the let's see the most you can see this is division operation yeah Okay C very",
    "start": "911360",
    "end": "917320"
  },
  {
    "text": "specifically says not to do that uh because C CPU handles oversized shift differently",
    "start": "917320",
    "end": "924160"
  },
  {
    "text": "huh okay well the O flag allows for the GCC compiler to use source code optimizations which optimizations can be",
    "start": "924160",
    "end": "930040"
  },
  {
    "text": "applied and which flags are responsible for them depends on the specific compiler in general it is impossible to",
    "start": "930040",
    "end": "935319"
  },
  {
    "text": "know how undefined behavior in a program will be handled when translating the source code therefore the only way to",
    "start": "935319",
    "end": "941560"
  },
  {
    "text": "write portable C programs is to completely avoid undefined behavior during development let's look at a slightly more complex example another",
    "start": "941560",
    "end": "948199"
  },
  {
    "text": "type of undefined behavior is null pointer D referencing its trivial version would be the following bam okay",
    "start": "948199",
    "end": "954920"
  },
  {
    "text": "of course let's see that for those that don't know you're casting zero to a CH pointer and then you're attempting to",
    "start": "954920",
    "end": "960160"
  },
  {
    "text": "dreference said chart pointer of course no one in their right mind would write something like this in their program",
    "start": "960160",
    "end": "965480"
  },
  {
    "text": "however okay I have written something like that to crush my program however it is not necessary to explicitly",
    "start": "965480",
    "end": "970800"
  },
  {
    "text": "dreference a null pointer to cause undefined Behavior the what every C programmer should know about undefined",
    "start": "970800",
    "end": "976759"
  },
  {
    "text": "Behavior series on blog. lm.org provides a code fragment that can confirm this",
    "start": "976759",
    "end": "982279"
  },
  {
    "text": "contains null check int P dead equals NP if P equals zero return return else d",
    "start": "982279",
    "end": "990319"
  },
  {
    "text": "reference P to four this example may seem far-fetched but it allows us to",
    "start": "990319",
    "end": "995560"
  },
  {
    "text": "understand the work of the C compiler a little better the latter uses various optimization me mechanisms but here we",
    "start": "995560",
    "end": "1002079"
  },
  {
    "text": "are interested in only two one of them removes the unnecessary dead code and the second one deletes useless checks",
    "start": "1002079",
    "end": "1008279"
  },
  {
    "text": "for the null pointer if the first optimization mechanism is applied to the code fragment above it will transform",
    "start": "1008279",
    "end": "1014399"
  },
  {
    "text": "the function into this if P equals z do this okay that makes sense",
    "start": "1014399",
    "end": "1020160"
  },
  {
    "text": "then the second mechanism will not detect unnecessary pointer or null pointer checks and the source code of",
    "start": "1020160",
    "end": "1025240"
  },
  {
    "text": "the function will take its final form however in reality the order of optimizations may be different for example the compiler has the right uh to",
    "start": "1025240",
    "end": "1032520"
  },
  {
    "text": "First exclude unnecessary null pointer checks and then the function will be transformed as",
    "start": "1032520",
    "end": "1038360"
  },
  {
    "text": "follows wait what why oh oh I think I see this so I",
    "start": "1038360",
    "end": "1045640"
  },
  {
    "text": "understand this now which is that we are dereferencing P but pointing it to a dead piece of code then we check to see",
    "start": "1045640",
    "end": "1052440"
  },
  {
    "text": "is P0 and we return else we do this well what's the problem there's there's two",
    "start": "1052440",
    "end": "1057799"
  },
  {
    "text": "very OB obvious problems if you dreference P before the check it should explode the program but this code is",
    "start": "1057799",
    "end": "1063840"
  },
  {
    "text": "dead which means that we don't need to do it but if you can dreference this",
    "start": "1063840",
    "end": "1070200"
  },
  {
    "text": "code then you know for a fact that this can't be zero so depending on the order",
    "start": "1070200",
    "end": "1075240"
  },
  {
    "text": "of optimizations you could look at this and say hey if you can dreference p and",
    "start": "1075240",
    "end": "1080440"
  },
  {
    "text": "then you check to see if it's null obviously this if statement never exists we can just remove this if statement",
    "start": "1080440",
    "end": "1086280"
  },
  {
    "text": "then you go okay dead code does not exist we remove the dead code what you're going to get is this piece of code that makes perfect sense this code",
    "start": "1086280",
    "end": "1093280"
  },
  {
    "text": "knows what it is by knowing what it isn't exactly this code is fully on this code is the missile uh since we",
    "start": "1093280",
    "end": "1098760"
  },
  {
    "text": "dreference the pointer before checking it the compiler safely decides that the pointer itself will never be null thanks",
    "start": "1098760",
    "end": "1103880"
  },
  {
    "text": "to this the comparison p 0 is replaced by an expression that always returns false then the compiler runs the the first optimization mechanism and removes",
    "start": "1103880",
    "end": "1110559"
  },
  {
    "text": "the dead code bada bing bada boom we're crazy what dude what an amazing example",
    "start": "1110559",
    "end": "1116080"
  },
  {
    "text": "by the way this example is terrifying can we can we all admit that this this",
    "start": "1116080",
    "end": "1121400"
  },
  {
    "text": "is a terrifying example how could you ever not write n code I don't even know what to do here again Zig Zig thank you",
    "start": "1121400",
    "end": "1129159"
  },
  {
    "text": "Zig for being um a language that does not allow pointers to be null C you know",
    "start": "1129159",
    "end": "1134400"
  },
  {
    "text": "what I agree C Must Die it is important to emphasize that both of these optimizations are correct removing the",
    "start": "1134400",
    "end": "1139559"
  },
  {
    "text": "check can be an unexpected gift from the compiler developers to an uh to an inattentive programmer such code can",
    "start": "1139559",
    "end": "1146400"
  },
  {
    "text": "create a vulnerability for programs that work without memory protection I.E operating system kernels or microcontroller firmware of course this",
    "start": "1146400",
    "end": "1153120"
  },
  {
    "text": "example contains an error but the main problem is not the error but in how the compiler handles it let's say you",
    "start": "1153120",
    "end": "1158400"
  },
  {
    "text": "accidentally introduce undefined Behavior into your program in the best case you'll immediately discover the error and fix it in the less fortunate",
    "start": "1158400",
    "end": "1165679"
  },
  {
    "text": "case you won't do it right away however it is much more likely that the compiler won't use your mistake to its advantage",
    "start": "1165679",
    "end": "1171960"
  },
  {
    "text": "in this case undefined Behavior will remain in the program's source code until it shows up at the most inopportune moment and such a moment can",
    "start": "1171960",
    "end": "1179480"
  },
  {
    "text": "occur when changing the target computer architecture the compiler or even its version optimization Flags any flags at",
    "start": "1179480",
    "end": "1185799"
  },
  {
    "text": "all simply put undefined behavior is a time bomb it's unclear when it will explode but one can only guess how many",
    "start": "1185799",
    "end": "1191720"
  },
  {
    "text": "interesting surprises the source code of thousands of programs contain you know what the real best opportune time is for",
    "start": "1191720",
    "end": "1197919"
  },
  {
    "text": "when you try to show your program to somebody else that's truly when undefined Behavior becomes defined as in",
    "start": "1197919",
    "end": "1203679"
  },
  {
    "text": "terrible experiences like that's it you're just storing the bug for later it's just future jira tickets is all you",
    "start": "1203679",
    "end": "1209919"
  },
  {
    "text": "really want demos are the worst if null crash on DF otherwise aign for those are",
    "start": "1209919",
    "end": "1215360"
  },
  {
    "text": "fully equivalent yeah they are they are fully they are fully equivalent uh compiler",
    "start": "1215360",
    "end": "1221080"
  },
  {
    "text": "optimizations by the way he's right by the way so this code was specifically written to show that which is crash on",
    "start": "1221080",
    "end": "1230120"
  },
  {
    "text": "or set it to four right so this this is very valid",
    "start": "1230120",
    "end": "1235480"
  },
  {
    "text": "code like this is perfectly valid code you just don't realize it like so if you were to look at it it looks very nice it",
    "start": "1235480",
    "end": "1242000"
  },
  {
    "text": "doesn't warn you like hey this is kind of crazy code just so you know compiler optimizations can also affect functions",
    "start": "1242000",
    "end": "1247120"
  },
  {
    "text": "of the standard C library including for example memet it is widely and INF famously known for the abundance of",
    "start": "1247120",
    "end": "1252520"
  },
  {
    "text": "errors that programmers make when calling it this the function header looks like this memset void pointer in",
    "start": "1252520",
    "end": "1259360"
  },
  {
    "text": "value size num Yep this is great Mamet writes num bytes this one right here",
    "start": "1259360",
    "end": "1265799"
  },
  {
    "text": "size t with the value value to the address pointer despite the fact that",
    "start": "1265799",
    "end": "1271720"
  },
  {
    "text": "the value parameter is of type int only is least significant bite is actually used oh I did not know that only the",
    "start": "1271720",
    "end": "1278360"
  },
  {
    "text": "least significant bite is actually used oh I didn't know that really really well gosh dang I would never have",
    "start": "1278360",
    "end": "1286760"
  },
  {
    "text": "known that that's looks like I ready to get looks like I am ready to get",
    "start": "1286760",
    "end": "1292640"
  },
  {
    "text": "owned by m set there we go famously there there we go uh only least",
    "start": "1292640",
    "end": "1299279"
  },
  {
    "text": "significant eight bits yeah okay this F let's see the function is actively used to zero out large arrays of data because",
    "start": "1299279",
    "end": "1304720"
  },
  {
    "text": "that's all I ever use it for right I just I just memset zero effectively but the compiler",
    "start": "1304720",
    "end": "1310600"
  },
  {
    "text": "itself often likes to insert its call where it is needed and not so much thus an interesting case was discussed on",
    "start": "1310600",
    "end": "1316840"
  },
  {
    "text": "April 15th 2018 on the",
    "start": "1316840",
    "end": "1320880"
  },
  {
    "text": "osd.mil to optimize the source code of the project as a result of which the ladder stopped working during debugging",
    "start": "1330440",
    "end": "1337000"
  },
  {
    "text": "the programmer discovered an error in the following code fragment memet unside",
    "start": "1337000",
    "end": "1342279"
  },
  {
    "text": "Char pointer bite this thing pointer okay so we have a pointer 4 I equals 0",
    "start": "1342279",
    "end": "1348000"
  },
  {
    "text": "it has to be less than num Point bite equals unsized Char value there we go",
    "start": "1348000",
    "end": "1353039"
  },
  {
    "text": "Plus+ return pointer for his operating system the developer decided to use his own implementation of memet function but",
    "start": "1353039",
    "end": "1359600"
  },
  {
    "text": "he did not take into account that during the translation process the GCC compiler would find a very tempting opportunity",
    "start": "1359600",
    "end": "1366080"
  },
  {
    "text": "for optimization in this code in fact the function was eventually transformed to the following form me set M said damn",
    "start": "1366080",
    "end": "1374480"
  },
  {
    "text": "wow the compiler was really that good that's a c by the way that's a cra C optimization just inline mset it is",
    "start": "1374480",
    "end": "1383320"
  },
  {
    "text": "quite possible that among the developers of the GCC compiler there were unsurpassed masters of sophistry in any",
    "start": "1383320",
    "end": "1389760"
  },
  {
    "text": "case the compiler's ability to optimize clearly exceeds all the limit uh limits accessible to the human mind it really",
    "start": "1389760",
    "end": "1395240"
  },
  {
    "text": "is true that is a great statement I would have never seen that coming I was",
    "start": "1395240",
    "end": "1400400"
  },
  {
    "text": "like I wonder how they're going to optimize it as as reading this just for it to be memet damn let's take another",
    "start": "1400400",
    "end": "1405880"
  },
  {
    "text": "example with mset function the compiler is capable of not only cre creting its calls from scratch but also throwing them out of the source code at its own",
    "start": "1405880",
    "end": "1412000"
  },
  {
    "text": "discretion for example in crypto in cryptographic programs it is often useful to erase all data from memory",
    "start": "1412000",
    "end": "1418320"
  },
  {
    "text": "after it is no longer needed usually such behavior is redundant but let's imagine the following",
    "start": "1418320",
    "end": "1424400"
  },
  {
    "text": "situation that actually does not seem like it's redundant that seems like it's very important to do whenever you're dealing with cryptographic stuff because",
    "start": "1424400",
    "end": "1430559"
  },
  {
    "text": "it kind of seems like you might leak some very valuable information usually such behavior is redundant but let's imagine the following situation your",
    "start": "1430559",
    "end": "1436919"
  },
  {
    "text": "program works with a user dat database that stores their names and passwords you've described the function that looks",
    "start": "1436919",
    "end": "1442279"
  },
  {
    "text": "like this okay so I am right yep very much so all right real Char real",
    "start": "1442279",
    "end": "1447360"
  },
  {
    "text": "password get password this does like a little quick little bad bing bada boom on there okay let's go and then stir",
    "start": "1447360",
    "end": "1453120"
  },
  {
    "text": "compare these two passwords there's just one problem after calling check password a string with the user's real password",
    "start": "1453120",
    "end": "1458760"
  },
  {
    "text": "will remain in the stack if your program has at least one vulnerability that allows reading data from memory then",
    "start": "1458760",
    "end": "1465679"
  },
  {
    "text": "there is a real chance that the password will be stolen from the stack an example of such vulnerability was uh was the",
    "start": "1465679",
    "end": "1471399"
  },
  {
    "text": "infam infamous heart bleed bug to reduce possible risks the easiest way is to",
    "start": "1471399",
    "end": "1476760"
  },
  {
    "text": "clear stack fragments containing the password int Char get password result equals this one memet this one return it",
    "start": "1476760",
    "end": "1484640"
  },
  {
    "text": "would seem that the solution has been found but not everything is so simple a compiler experienced in optimization",
    "start": "1484640",
    "end": "1489760"
  },
  {
    "text": "issues or's see a compiler experienced in optimization issues may decide that the memet call is unnecessary here and",
    "start": "1489760",
    "end": "1496840"
  },
  {
    "text": "will calmly remove it from the function body indeed this action is absolutely useless for the operation of the program",
    "start": "1496840",
    "end": "1502799"
  },
  {
    "text": "itself what is even worse the compiler can generate code in which the password will be one of the processor registers",
    "start": "1502799",
    "end": "1509360"
  },
  {
    "text": "in this case it may even let's see it may be even easier to get it using a vulnerability in the program and you",
    "start": "1509360",
    "end": "1515240"
  },
  {
    "text": "will not even be able to force the compiler to clear the contents of the registry you can read more about this",
    "start": "1515240",
    "end": "1520640"
  },
  {
    "text": "problem at the link dang that's a c by the way that's crazy that's like a crazy",
    "start": "1520640",
    "end": "1528840"
  },
  {
    "text": "problem wow one of the most Insidious types by the way I I just guess I would have never thought about this but this",
    "start": "1528840",
    "end": "1534679"
  },
  {
    "text": "all kind of makes perfect sense in the sense of like okay this is a stack-based variable and you're mem setting a stack",
    "start": "1534679",
    "end": "1541919"
  },
  {
    "text": "based variable and then you never use it again yeah you don't need to do that right you don't need to like that makes",
    "start": "1541919",
    "end": "1548520"
  },
  {
    "text": "perfect sense this call does nothing right this applies to all programming languages yeah one would assume that",
    "start": "1548520",
    "end": "1554840"
  },
  {
    "text": "this is uh this actually kind of applies to anything right if you have any compiled language this could happen and",
    "start": "1554840",
    "end": "1561120"
  },
  {
    "text": "even this could even happen in like a non-comp miled interpreted language but you can't really access stack data so it doesn't really",
    "start": "1561120",
    "end": "1566679"
  },
  {
    "text": "exist there are some workarounds okay it seemed that Solutions have been found but not everything is so simple a",
    "start": "1566679",
    "end": "1572520"
  },
  {
    "text": "compiler experienced in optimizations issues may decide that the memet call is unnecessary here and will calmly remove",
    "start": "1572520",
    "end": "1577840"
  },
  {
    "text": "it from the function body indeed this action is absolutely useless for the operation of the program itself what is even worse the compiler can generate",
    "start": "1577840",
    "end": "1583440"
  },
  {
    "text": "code in which the password will be in one of the oh we already read all this okay whoopsy daisies whoopsies flip take",
    "start": "1583440",
    "end": "1588840"
  },
  {
    "text": "that out whoopsies uh one of the most Insidious types of undefined behavior is strict aliasing the term can be",
    "start": "1588840",
    "end": "1595360"
  },
  {
    "text": "translated as strict imposition but it does not have a tradition name in Russian for this by the way the person",
    "start": "1595360",
    "end": "1601399"
  },
  {
    "text": "who wrote this is in Russian this is a translated article for this reason we will use the original English term the",
    "start": "1601399",
    "end": "1606600"
  },
  {
    "text": "text of the standard gives the following description for strict aliasing Section 3 three Expressions I love by the way",
    "start": "1606600",
    "end": "1612960"
  },
  {
    "text": "that he is referencing c98 how great is that that how often do you ever do stuff",
    "start": "1612960",
    "end": "1620440"
  },
  {
    "text": "with somebody and they're referencing the exact section in a manual beautiful an object value must be",
    "start": "1620440",
    "end": "1628440"
  },
  {
    "text": "accessible only by the L value expression of one of the following types the declared type of the value the qualified version of the declared type",
    "start": "1628440",
    "end": "1635000"
  },
  {
    "text": "of the object a signed or unsigned type corresponding to the declared type of the object a signed or unsigned type",
    "start": "1635000",
    "end": "1640399"
  },
  {
    "text": "cons corresponding to the value or qualified version of the declared type of the object an array structure or",
    "start": "1640399",
    "end": "1646520"
  },
  {
    "text": "Union type that includes one of the above types among its members including recursively a member of internal",
    "start": "1646520",
    "end": "1652039"
  },
  {
    "text": "structure array or Union a character type the easiest way to illustrate strict aliasing uh is with the follow or",
    "start": "1652039",
    "end": "1658520"
  },
  {
    "text": "with a specific example by the way I don't even know what they're trying to say here so let's let's go look at this because I don't know what they even mean",
    "start": "1658520",
    "end": "1664760"
  },
  {
    "text": "okay when I read that I'm like what does that even mean I don't even know so let's see what this does okay the",
    "start": "1664760",
    "end": "1671080"
  },
  {
    "text": "easiest ways to illustrate strict aliasing is with a specific example float equals this or int equals this",
    "start": "1671080",
    "end": "1677679"
  },
  {
    "text": "float equals that P equal 13 to okay wow oh w w w oh wow wow that's a crazy code",
    "start": "1677679",
    "end": "1685679"
  },
  {
    "text": "to cause undefined Behavior it is enough to access a variable by a type incompatible with the declared one this",
    "start": "1685679",
    "end": "1691880"
  },
  {
    "text": "limitation can be circumvented by using symbolic type Char which is not subject to strict aliasing",
    "start": "1691880",
    "end": "1698399"
  },
  {
    "text": "rules that's right character type int this okay this however breaking a",
    "start": "1698399",
    "end": "1704480"
  },
  {
    "text": "variable into characters can be a laborious task you have to to take into account the size of the data as well as",
    "start": "1704480",
    "end": "1710159"
  },
  {
    "text": "the bite order used yeah I was about to say this sounds like an Indian problem which by the way I got owned by an Indian problem just this weekend on an",
    "start": "1710159",
    "end": "1715640"
  },
  {
    "text": "airplane and I didn't know how to solve it you can also avoid undefined Behavior by using unions okay unions union union",
    "start": "1715640",
    "end": "1722480"
  },
  {
    "text": "union all right all right I'm confused as this code confuses me can you really",
    "start": "1722480",
    "end": "1729080"
  },
  {
    "text": "do just XA I'm a bit confused by this notation the lack of the dots yeah he's",
    "start": "1729080",
    "end": "1734120"
  },
  {
    "text": "he's missing okay so it's not me I'm I'm not okay okay so I'm not the crazy",
    "start": "1734120",
    "end": "1739480"
  },
  {
    "text": "person here this there's just missing dots translation error okay because I was about to say I feel like I've",
    "start": "1739480",
    "end": "1746720"
  },
  {
    "text": "programmed enough C to know that this would be something I'm shocked that this isn't something because I would have been absolutely owned by this exact",
    "start": "1746720",
    "end": "1752760"
  },
  {
    "text": "example how many times this would be this is like using or uh where you pollute the name space with the you know",
    "start": "1752760",
    "end": "1758720"
  },
  {
    "text": "members of the article dude that's crazy however this method is not without its drawbacks a union must contain members",
    "start": "1758720",
    "end": "1765080"
  },
  {
    "text": "with all possible types that will be used in the program all this seriously complicates the use of type punning or",
    "start": "1765080",
    "end": "1771720"
  },
  {
    "text": "the so-called pun of typing an intentional violation of the type system this technique is necessary for more",
    "start": "1771720",
    "end": "1776799"
  },
  {
    "text": "flow flexible low-level management of machines memory by the way this one piece of code just defeated go right",
    "start": "1776799",
    "end": "1782080"
  },
  {
    "text": "there go go cannot have a heterogeneous list C can owned by C owned by your dad",
    "start": "1782080",
    "end": "1788440"
  },
  {
    "text": "sucks right if goes the child and sees the dad dad's cooler than than the child all right to illustrate the usefulness",
    "start": "1788440",
    "end": "1795360"
  },
  {
    "text": "of the typing pun let's look at a small example let's say say you've read the contents of an image file into your program memory now you need to write a",
    "start": "1795360",
    "end": "1802279"
  },
  {
    "text": "function that Returns the color of of a pixel at a specific coordinate for Simplicity let's assume that the size of",
    "start": "1802279",
    "end": "1808200"
  },
  {
    "text": "the int type matches the size of the pixel as it does in the bite order of both all right get pixel Char buff this",
    "start": "1808200",
    "end": "1814320"
  },
  {
    "text": "one in width x y okay we're going to do a little get uh header size do this one",
    "start": "1814320",
    "end": "1819640"
  },
  {
    "text": "pointer int to the buff we're going to do a little y this one right there okay fantastic we just offset into the buffer",
    "start": "1819640",
    "end": "1825480"
  },
  {
    "text": "and grab the pixel right out okay cool man I by the way I haven't read C in so long that the return type being right",
    "start": "1825480",
    "end": "1832320"
  },
  {
    "text": "here as opposed to right here just got me for a second as I was reading this I was like but where's the return type is",
    "start": "1832320",
    "end": "1838559"
  },
  {
    "text": "return types inferred no that can't be real I've just been doing way too much",
    "start": "1838559",
    "end": "1843679"
  },
  {
    "text": "programming languages with return types at the end okay let's see when the function is",
    "start": "1843679",
    "end": "1849640"
  },
  {
    "text": "called it is p let's see is pass the address of the data area with with the file contents including its header with",
    "start": "1849640",
    "end": "1854960"
  },
  {
    "text": "the with the width of the image and the coordinates of the pixels whose color should be returned instead of the int",
    "start": "1854960",
    "end": "1860120"
  },
  {
    "text": "type we could choose any other type of known size but none of this matters because the git pixel function is",
    "start": "1860120",
    "end": "1865639"
  },
  {
    "text": "absolutely incorrect from the point of view of the standard since it violates the rule of strict aliasing oh really uh",
    "start": "1865639",
    "end": "1872200"
  },
  {
    "text": "to use let's see to use the type pun you will have to rewrite the all code associated with the buffer used",
    "start": "1872200",
    "end": "1877799"
  },
  {
    "text": "including one or the one responsible for reading the file there are a huge number of examples of programs that do not",
    "start": "1877799",
    "end": "1883200"
  },
  {
    "text": "comply with strict aliasing rule among them is the famous fast inverse square root function from Quake 3 oh we know",
    "start": "1883200",
    "end": "1888240"
  },
  {
    "text": "this guy this thing is insane you're using like the mantisa to be able to like derive values out of it which is",
    "start": "1888240",
    "end": "1894519"
  },
  {
    "text": "just nuts this code allowed calculating the inverse square root of a floating point to number several times faster",
    "start": "1894519",
    "end": "1899840"
  },
  {
    "text": "than the arithmetic uh arithmetic co-processor however this masterpiece of black magic also fails the standard test",
    "start": "1899840",
    "end": "1906039"
  },
  {
    "text": "it seems that the creator of cult games John carac does not understand the C language after uh at all to be fair John",
    "start": "1906039",
    "end": "1911880"
  },
  {
    "text": "karmac did not write this code I forget who writes it it's the it's not it's not the John's who wrote who wrote fast uh",
    "start": "1911880",
    "end": "1920519"
  },
  {
    "text": "inverse square root it's it's not one of the John's yeah there we go it's it's it's the other two right yeah there you",
    "start": "1920519",
    "end": "1927159"
  },
  {
    "text": "go it's the other two yeah it's the other Quake dudes yeah right because there's there's the two Johns and then",
    "start": "1927159",
    "end": "1933200"
  },
  {
    "text": "and then the other dudes gets a pass in my book gets a pass yeah yeah definitely it's a hidden uh new uh Newton's descent",
    "start": "1933200",
    "end": "1940360"
  },
  {
    "text": "algorithm right yeah yeah effectively I we went over it it's it's crazy how they're able to do that profile",
    "start": "1940360",
    "end": "1945720"
  },
  {
    "text": "optimization going Oopsy Daisy yeah I know yeah yeah yeah yeah yeah John squared",
    "start": "1945720",
    "end": "1951639"
  },
  {
    "text": "yeah all right anyways there remains one question why do we need strict aliasing at all the whole point is that it allows",
    "start": "1951799",
    "end": "1958679"
  },
  {
    "text": "compiler creators to apply extreme aggressive optimizations to the source code the rules of strict aliasing apply",
    "start": "1958679",
    "end": "1965760"
  },
  {
    "text": "to accesses to any memory including dynamic memory thus standardization committee noted that the following code",
    "start": "1965760",
    "end": "1971320"
  },
  {
    "text": "fragment all right function pointer uh in pointer to X int pointer by the way I",
    "start": "1971320",
    "end": "1977919"
  },
  {
    "text": "also one of those people that like to put the star next to the type because I read it as int pointer I understand the reason why you don't and that you can",
    "start": "1977919",
    "end": "1984639"
  },
  {
    "text": "have these really crazy problems with initialization of multiple variables but for me this is perfectly fine all right",
    "start": "1984639",
    "end": "1990159"
  },
  {
    "text": "in pointer of X double pointer of Y uh x value equals z y equals that xal X plus",
    "start": "1990159",
    "end": "1996200"
  },
  {
    "text": "2 okay what happened here can be transformed let's see let's see can be transformed as follows yes according to",
    "start": "1996200",
    "end": "2003480"
  },
  {
    "text": "the rules of strict aing the Y pointer uh cannot contain the address of the same memory lood as X pointer this fact",
    "start": "2003480",
    "end": "2009639"
  },
  {
    "text": "allows the expression xal X to be replaced with xal 2 yes the active use",
    "start": "2009639",
    "end": "2014679"
  },
  {
    "text": "of such optimizations by compilers has broken a huge amount of old code thus in the letter dated J July 12th 1998 one of",
    "start": "2014679",
    "end": "2023000"
  },
  {
    "text": "the developers of the GCC compiler Jeff law answering questions about strict aliasing and related uh errors writes",
    "start": "2023000",
    "end": "2029720"
  },
  {
    "text": "there is a lot of code that violates strict aliasing one such example is the portable generic IP sum check sum",
    "start": "2029720",
    "end": "2035240"
  },
  {
    "text": "function that is contained in the BSD networking source okay so what what they're saying is this the same thing as",
    "start": "2035240",
    "end": "2040639"
  },
  {
    "text": "no Alias that you can use in Zig that we got that huge optimization win effectively what it's saying is that there's no overlap between this pointer",
    "start": "2040639",
    "end": "2047440"
  },
  {
    "text": "and this pointer right that's what this means is that what strict aliasing is attempt is that what we're saying here",
    "start": "2047440",
    "end": "2053638"
  },
  {
    "text": "yep okay there's no overlap meaning that this cannot point to this okay okay",
    "start": "2053639",
    "end": "2059919"
  },
  {
    "text": "that's what it means okay yes which makes sense because then you can do things like this and see it's restrict",
    "start": "2059919",
    "end": "2067158"
  },
  {
    "text": "okay get rid of some loads yeah let's say yes different types cannot Alias and C except for Char okay okay which makes",
    "start": "2067159",
    "end": "2074760"
  },
  {
    "text": "sense I guess that makes sense that a Char because you use charar as like a pointer to some memory okay there's a lot of code that violates strict",
    "start": "2074760",
    "end": "2080398"
  },
  {
    "text": "aliasing one such oh yeah we already read that in my humble opinion such code is becoming less and less common modern compilers have been using strict",
    "start": "2080399",
    "end": "2086398"
  },
  {
    "text": "aliasing and analysing for some time now and the result let's see and as a result people have been forced to fix their",
    "start": "2086399",
    "end": "2092000"
  },
  {
    "text": "code of course this does not apply to Linux and some other free projects since they only use GCC if we start saying",
    "start": "2092000",
    "end": "2098119"
  },
  {
    "text": "that such code is wrong then we better have some plan in place for when people start asking why their code that worked",
    "start": "2098119",
    "end": "2104200"
  },
  {
    "text": "for years is now broken Point them to the C language standard double smiley",
    "start": "2104200",
    "end": "2109920"
  },
  {
    "text": "face yeah this is just a crazy bug in general I would be really surprised I I",
    "start": "2109920",
    "end": "2115520"
  },
  {
    "text": "just am personally very surprised by such things I'd actually have a really hard under time I guess I have a hard",
    "start": "2115520",
    "end": "2121160"
  },
  {
    "text": "time understanding why you'd ever want to do that there must be a reason that makes sense I just don't get that reason",
    "start": "2121160",
    "end": "2127800"
  },
  {
    "text": "strict aliasing rules the GCC compiler can enable using the f- strict aliasing",
    "start": "2127800",
    "end": "2132880"
  },
  {
    "text": "flag and disabling the F no strict aliasing flag the latter is recommended if you are not sure whether you are",
    "start": "2132880",
    "end": "2138960"
  },
  {
    "text": "violating the text of the standard most likely you are speaking about the Linux kernel mentioned in the letter its",
    "start": "2138960",
    "end": "2144200"
  },
  {
    "text": "author lonus tals also gave his asent uh assessment of strict aliasing in a particular and the work of the committee",
    "start": "2144200",
    "end": "2151240"
  },
  {
    "text": "in general thus criticizing the desire of one of the developers of the operating system to once again play it safe from violating the standard L uh",
    "start": "2151240",
    "end": "2158280"
  },
  {
    "text": "lonus wrote The Following to be honest all this seems dubious to me and I'm not talking about the changes themselves I",
    "start": "2158280",
    "end": "2163680"
  },
  {
    "text": "can live with that but the justification for these changes is absolute and complete nonsense and quite dangerous",
    "start": "2163680",
    "end": "2169280"
  },
  {
    "text": "the thing is using unions to implement a the T typing pun is the normal and",
    "start": "2169280",
    "end": "2175040"
  },
  {
    "text": "standard way to do it in fact it's documented in GCC and is used when you have been let's see and is used when",
    "start": "2175040",
    "end": "2182240"
  },
  {
    "text": "you've been a [ __ ] [ __ ] and used f- strict aliasing",
    "start": "2182240",
    "end": "2188880"
  },
  {
    "text": "and now we need to undo all the damage that garbage standard imposes Andy what was the reason for all this idiocy and",
    "start": "2188880",
    "end": "2195560"
  },
  {
    "text": "don't tell me the standard text is not clear enough the standard text is clearly [ __ ] see above about strict",
    "start": "2195560",
    "end": "2201760"
  },
  {
    "text": "aliasing rules in such cases it should be ignored to do this you need to use the compiler tools to",
    "start": "2201760",
    "end": "2208400"
  },
  {
    "text": "avoid damage you should do the same in situations where it is not completely clear this is why we have F WP v no",
    "start": "2208400",
    "end": "2216000"
  },
  {
    "text": "strict aliasing and other flags I've said it before and I'll say it again when the text of the standard",
    "start": "2216000",
    "end": "2221359"
  },
  {
    "text": "contradicts reality it's just a piece of toilet paper it has absolutely no importance in fact I'd rather take a",
    "start": "2221359",
    "end": "2227520"
  },
  {
    "text": "roll of real toilet paper instead at least I won't have splinters and ink up my",
    "start": "2227520",
    "end": "2233160"
  },
  {
    "text": "ARS the C standard was written on wood paper usually doesn't contain splinters",
    "start": "2233160",
    "end": "2240160"
  },
  {
    "text": "a cutting linguist a cutting linguist one would say apparently lus tvols didn't study the C language well enough a real C programmer would wouldn't have",
    "start": "2240160",
    "end": "2247119"
  },
  {
    "text": "thought such a thing however the standard is not completely or complete with its strict aling alone to cause",
    "start": "2247119",
    "end": "2252400"
  },
  {
    "text": "undefined Behavior it is not even necessary to dreference a pointer okay if pointer P here in Q There free P if P",
    "start": "2252400",
    "end": "2260400"
  },
  {
    "text": "equals Q undefined Behavior do something using a pointer value after its memory has been freed is prohibited by the text",
    "start": "2260400",
    "end": "2266680"
  },
  {
    "text": "of the standard a value of the pointer pointing to Freed memory is undefined it is important for the",
    "start": "2266680",
    "end": "2273319"
  },
  {
    "text": "programmer to understand that pointers are let's see pointers in C are not low level the standard has even tried to",
    "start": "2273319",
    "end": "2279720"
  },
  {
    "text": "completely eradicate any connection between the language and the real world even comparing pointers that refer to",
    "start": "2279720",
    "end": "2285119"
  },
  {
    "text": "different objects is declared undefined Behavior relational operators really I",
    "start": "2285119",
    "end": "2291560"
  },
  {
    "text": "mean this makes sense because if you have two pointers and P equals q but you freed it then you're doing something with q that could be crazy",
    "start": "2291560",
    "end": "2298280"
  },
  {
    "text": "right okay yeah I mean I I get the example but still wow huh I just feel like I'm learning so much about C today",
    "start": "2298280",
    "end": "2305119"
  },
  {
    "text": "thank God for smart pointers smart pointers generally are pretty nice uh but I still think I mean I still think Zig has it",
    "start": "2305119",
    "end": "2311040"
  },
  {
    "text": "right just throwing that out there so here's a small code fragment demonstrating a comparison that is that",
    "start": "2311040",
    "end": "2317079"
  },
  {
    "text": "is incorrect from the standards point of view P malic this Q Malik that if p is less than this undefined behavior",
    "start": "2317079",
    "end": "2323720"
  },
  {
    "text": "however the most interesting example here is the source code of the following program XY P equals the address plus one",
    "start": "2323720",
    "end": "2332079"
  },
  {
    "text": "Q equals this print these two things go if you translate the above text with the",
    "start": "2332079",
    "end": "2337160"
  },
  {
    "text": "GC C compiler passing the O flag the result executable file will output something in the following line when",
    "start": "2337160",
    "end": "2342480"
  },
  {
    "text": "launched a bad one bad code One Bad Code Zero it remains a great mystery why two",
    "start": "2342480",
    "end": "2348720"
  },
  {
    "text": "pointers containing the same values turned out to be unequal perhaps the developers of the GCC compiler yeah how",
    "start": "2348720",
    "end": "2355240"
  },
  {
    "text": "does that work cuz what I assume is that reference to X plus one is one position",
    "start": "2355240",
    "end": "2364839"
  },
  {
    "text": "greater which should be y right like if I understand stacked memory correctly one position higher than x should be y",
    "start": "2364839",
    "end": "2372200"
  },
  {
    "text": "we now point to Y we point to Y we have the same code in there but these two",
    "start": "2372200",
    "end": "2377560"
  },
  {
    "text": "things aren't equal aliasing rules two different int cannot equal ever I know",
    "start": "2377560",
    "end": "2383400"
  },
  {
    "text": "when I say reference I mean this is the address of operator yes I it's not a reference as in that kind of reference I",
    "start": "2383400",
    "end": "2389280"
  },
  {
    "text": "I do get that so I don't I don't understand because this should just add one to the width I'm surprised that they",
    "start": "2389280",
    "end": "2394440"
  },
  {
    "text": "don't take the the address value to determine equality wouldn't the address value determine",
    "start": "2394440",
    "end": "2401440"
  },
  {
    "text": "equality that's it call Casey yeah that's without UB yeah huh",
    "start": "2401440",
    "end": "2407200"
  },
  {
    "text": "crazy I guess again I I don't understand that rule what's the rule here why would you why why does this happen why perhaps",
    "start": "2407200",
    "end": "2414520"
  },
  {
    "text": "the developers of the GCC compiler which have uh which we have already noted are no less skilled in interpreting the text",
    "start": "2414520",
    "end": "2420400"
  },
  {
    "text": "of the standard than in matters of sophistry you can get a taste of the subtle uh hermetics in the discussion of",
    "start": "2420400",
    "end": "2428400"
  },
  {
    "text": "the issues of the official website of the ganu organization this goes out to the primen it may seem that if you disable",
    "start": "2428400",
    "end": "2435440"
  },
  {
    "text": "optimizations all the above problems will pass you by just don't pass the- o flag to the compiler and you'll get the",
    "start": "2435440",
    "end": "2441200"
  },
  {
    "text": "result you expect but in fact this is not so in January 2007 a user named Felix GCC posted the source code of the",
    "start": "2441200",
    "end": "2447760"
  },
  {
    "text": "following program on the G gccu.org webbsite all right we got Fu 100 Fu this",
    "start": "2447760",
    "end": "2455319"
  },
  {
    "text": "assert this happens print this return that the fu function checks for",
    "start": "2455319",
    "end": "2461480"
  },
  {
    "text": "overflows of the sum uh sum of the supplied assigned argument in the constant 100 as is known on the vast",
    "start": "2461480",
    "end": "2469680"
  },
  {
    "text": "majority of computer architectures negative numbers are specified as the compl let's see as a complement code in",
    "start": "2469680",
    "end": "2475520"
  },
  {
    "text": "this let's see two's compliment right in this case of overflow such a number changes its sign to the opposite due to",
    "start": "2475520",
    "end": "2481920"
  },
  {
    "text": "which the check A+ 100 returns false in the body of the main function Felix GCC",
    "start": "2481920",
    "end": "2487520"
  },
  {
    "text": "calls Fu Twice first it passes a number that will not lead to an overflow then",
    "start": "2487520",
    "end": "2492800"
  },
  {
    "text": "based on the fact that the size of the int data type is four bytes Felix GCC calls Fu with the largest positive",
    "start": "2492800",
    "end": "2499200"
  },
  {
    "text": "number of this type it is a Lo let's see it is logical to assume that this or in this case the comparison will return",
    "start": "2499200",
    "end": "2505599"
  },
  {
    "text": "false the assert will terminate and the program let's see and will terminate the program however here is the output of",
    "start": "2505599",
    "end": "2511760"
  },
  {
    "text": "Felix GCC received after running the executable file is it because there's like a constants right here like this is",
    "start": "2511760",
    "end": "2517680"
  },
  {
    "text": "a constant thus this constant is known thus they can remove that assert like",
    "start": "2517680",
    "end": "2522760"
  },
  {
    "text": "all references to this is that what's happening I don't I don't how how how do they know that",
    "start": "2522760",
    "end": "2530640"
  },
  {
    "text": "okay in fact GCC decided to remove the Overflow check and this despite the fact",
    "start": "2530640",
    "end": "2535960"
  },
  {
    "text": "that no flags were passed to the compiler and what's even more interesting is that earlier versions of",
    "start": "2535960",
    "end": "2541160"
  },
  {
    "text": "GCC did not remove the check under the same conditions as a result of which the resulting program behaved differently a",
    "start": "2541160",
    "end": "2547280"
  },
  {
    "text": "user named an uh Andrew Pinsky responded to Felix gcc's reasonable request to fix",
    "start": "2547280",
    "end": "2552599"
  },
  {
    "text": "the unexpected compiler bug as a GCC developer Andrew Pinsky noted that this behavior is not an",
    "start": "2552599",
    "end": "2558359"
  },
  {
    "text": "error really I must not understand something",
    "start": "2558359",
    "end": "2564559"
  },
  {
    "text": "moreover he himself was the author of the change in the compiler code that created such a strange result below is",
    "start": "2564559",
    "end": "2569680"
  },
  {
    "text": "the fragment of dialogue between Felix GCC and Andrew Pinsky no comments needed",
    "start": "2569680",
    "end": "2574760"
  },
  {
    "text": "signed overflow is undefined behavior in the C standard use an unsigned type or",
    "start": "2574760",
    "end": "2580480"
  },
  {
    "text": "the F wrap V flag oh okay okay so this must mean that you have to use a flag to",
    "start": "2580480",
    "end": "2587200"
  },
  {
    "text": "ensure that this thing behaves properly huh okay you got to be uh kidding me various",
    "start": "2587200",
    "end": "2595280"
  },
  {
    "text": "security issues are caused by numeric overflows and you're just telling me that in GCC 41 I can't test for them on",
    "start": "2595280",
    "end": "2601520"
  },
  {
    "text": "signed types anymore you clearly don't understand something there must be a way to work around this well he did just say",
    "start": "2601520",
    "end": "2607240"
  },
  {
    "text": "do this I mean to be fair there is some level of that existing software uses signed numbers and I can't just change",
    "start": "2607240",
    "end": "2613440"
  },
  {
    "text": "the type to unsigned I still need the check for the Overflow it's not like I could use any workaround for that what",
    "start": "2613440",
    "end": "2619520"
  },
  {
    "text": "do you want me to do cast the type to unsigned shift it to the right by one and then add it or what please reverse",
    "start": "2619520",
    "end": "2626200"
  },
  {
    "text": "this change it will create serious security issues in all kinds of programs I don't care what your standards people",
    "start": "2626200",
    "end": "2631839"
  },
  {
    "text": "say about GCC being sound all this will lead to people getting hacked I discovered this because one of the",
    "start": "2631839",
    "end": "2638040"
  },
  {
    "text": "security checks that prevented prevents hacking failed this is not a joke fix it",
    "start": "2638040",
    "end": "2644520"
  },
  {
    "text": "now that's that's pretty funny just like bro who cares about the standards you're G to screw us I'm not kidding the C",
    "start": "2644520",
    "end": "2651559"
  },
  {
    "text": "standard explicitly says that signed overflow is undefined Behavior I do I do I do love like the",
    "start": "2651559",
    "end": "2658680"
  },
  {
    "text": "Simplicity that this guy's taking no but seriously it's like right there bold strategy let's see if it works out yeah",
    "start": "2658680",
    "end": "2664280"
  },
  {
    "text": "let's see so look Andrew do you really think this problem will go away if you keep closing bugs fast enough the check",
    "start": "2664280",
    "end": "2670280"
  },
  {
    "text": "I wrote covered every possible case it didn't even require specifying whether the type was a pointer an unsigned",
    "start": "2670280",
    "end": "2676079"
  },
  {
    "text": "number or a signed number well you broke pointers too but your change was fixed the guy who did that back see the guy",
    "start": "2676079",
    "end": "2682800"
  },
  {
    "text": "who did that back then needs to show up here we need someone with a clear head and a vision like him let's face it you",
    "start": "2682800",
    "end": "2689880"
  },
  {
    "text": "[ __ ] this uh you [ __ ] up this royally and now you're trying to cover up all the bugs as quickly as possible",
    "start": "2689880",
    "end": "2695400"
  },
  {
    "text": "so no one will notice how much damage you've done you sir are unprofessional and a disgrace to the GCC",
    "start": "2695400",
    "end": "2701480"
  },
  {
    "text": "team dang this is crazy that's",
    "start": "2701480",
    "end": "2707920"
  },
  {
    "text": "some yeah this is crazy this bug will remain open until you revert it back or",
    "start": "2708000",
    "end": "2713280"
  },
  {
    "text": "make that flag the default as long as you keep breaking program whose authors stupidly enable optimizations I don't",
    "start": "2713280",
    "end": "2720880"
  },
  {
    "text": "care but I will not let you make my environment less secure just because you are too unprofessional to deal with",
    "start": "2720880",
    "end": "2728280"
  },
  {
    "text": "optimizations after they have been shown to do more harm than good how much more evidence do you need to provide my God",
    "start": "2728280",
    "end": "2734400"
  },
  {
    "text": "autocom thinks your optimizations should be disabled everywhere do you even notice the explosions around you Andrew",
    "start": "2734400",
    "end": "2741960"
  },
  {
    "text": "check ad if B is less than zero return che check sum else into max this F puts",
    "start": "2741960",
    "end": "2748800"
  },
  {
    "text": "overflow this that's all I'm going to refer to from here on out this code clearly tells you how to detect overflow",
    "start": "2748800",
    "end": "2756160"
  },
  {
    "text": "before it happens again your code is broken and not standards compliant my code is not broken trying to Discount",
    "start": "2756160",
    "end": "2762400"
  },
  {
    "text": "the issue or insult me will not solve anything you wrote a mistake that's why I thought your code was",
    "start": "2762400",
    "end": "2767800"
  },
  {
    "text": "broken this is just so great by the way I know like I just don't ever deal with",
    "start": "2767800",
    "end": "2773760"
  },
  {
    "text": "this stuff so I guess it doesn't mean a whole lot to me it's just so funny to see that there's these changes that",
    "start": "2773760",
    "end": "2779920"
  },
  {
    "text": "exist there's people that argue over them and there's real world con consequences yet here we are watching",
    "start": "2779920",
    "end": "2786760"
  },
  {
    "text": "these these people just just explode over something there has to be a pragmatic solution Somewhere In",
    "start": "2786760",
    "end": "2793079"
  },
  {
    "text": "Here Andrew nah I know dude he did literally go yeah looks like your ad",
    "start": "2793079",
    "end": "2798680"
  },
  {
    "text": "kind of sucks here's a better ad function so tell me what part of my argument do you not understand I could",
    "start": "2798680",
    "end": "2805000"
  },
  {
    "text": "use a simpler word so that you could understand me this time guys your job is not to implement the C standard you have",
    "start": "2805000",
    "end": "2811200"
  },
  {
    "text": "also an obligation Not To Break programs that depend on you a lot of programs depend on you when you broke floating",
    "start": "2811200",
    "end": "2816960"
  },
  {
    "text": "Point Precision you made it available via a flag F fast math when you added a strict aliasing you also made it",
    "start": "2816960",
    "end": "2822240"
  },
  {
    "text": "available F strict aliasing if I remember correctly you quoted the standard then too until people with more",
    "start": "2822240",
    "end": "2827400"
  },
  {
    "text": "adequate understanding of the world stopped you and I'm going to leave this bug open until the same thing happens",
    "start": "2827400",
    "end": "2833000"
  },
  {
    "text": "again Andrew I think we shouldn't have made it optional but I wasn't around when the decision was made I also",
    "start": "2833000",
    "end": "2839680"
  },
  {
    "text": "remember that we released where strict aliasing was enabled but then we had disabled it by default during that time",
    "start": "2839680",
    "end": "2845480"
  },
  {
    "text": "people were fixing their programs while optimizations was active and when we already made signed overflow",
    "start": "2845480",
    "end": "2850839"
  },
  {
    "text": "optimization optional with fpv I don't understand where you're coming from with your arguments you can't just",
    "start": "2850839",
    "end": "2856559"
  },
  {
    "text": "potentially break a bunch of free software just because you changed your mind about how much Freedom a standard",
    "start": "2856559",
    "end": "2863480"
  },
  {
    "text": "gives you grow up or go away and let more responsible people handle your business wait but this optim this",
    "start": "2863480",
    "end": "2870000"
  },
  {
    "text": "optimization has been around since 1994 oh my",
    "start": "2870000",
    "end": "2875720"
  },
  {
    "text": "go and and if any code since then has us signed overflows the authors of the",
    "start": "2875720",
    "end": "2880800"
  },
  {
    "text": "program asked for it did you know that the Arin 5 rocket exploded or could have",
    "start": "2880800",
    "end": "2886359"
  },
  {
    "text": "killed people because of an overflow bug what if people died because you decided that the standard allowed you to throw away safety checks written by",
    "start": "2886359",
    "end": "2893680"
  },
  {
    "text": "humans I mean he does have somewhat of a point when was this when was this written I mean this is 2007 and the",
    "start": "2893680",
    "end": "2899440"
  },
  {
    "text": "thing is the thing has existed for 13 years so I",
    "start": "2899440",
    "end": "2904599"
  },
  {
    "text": "mean there is a bit of an argument there saying that maybe just maybe this thing has been around long enough that what",
    "start": "2904599",
    "end": "2910400"
  },
  {
    "text": "you're saying maybe you know maybe this was a lot better to bring up a decade and more ago I've already shown you how",
    "start": "2910400",
    "end": "2916599"
  },
  {
    "text": "to check for signed overflow before it happens not after you can teach other Security Professionals how to write this",
    "start": "2916599",
    "end": "2923240"
  },
  {
    "text": "code yes oh the skill issue hurts oh oh gosh the skill issue dude just got",
    "start": "2923240",
    "end": "2931920"
  },
  {
    "text": "massively skill issue just then you know you could also you could also just learn to write better code",
    "start": "2931920",
    "end": "2938200"
  },
  {
    "text": "this is this by the way this is the exact same argument for those that are getting frustrated for on Andrew's side",
    "start": "2938200",
    "end": "2943680"
  },
  {
    "text": "this is just learn how to proed better right this is the same argument I mean we make this kind of argument all the time sorry my nose is just",
    "start": "2943680",
    "end": "2950280"
  },
  {
    "text": "itching my mustache somehow curled upwards I went into my nose but yeah this is the exact same like just broed",
    "start": "2950280",
    "end": "2956119"
  },
  {
    "text": "better a skill issue this I mean this is skill this is the original skill issue right here Felix GCC again it doesn't",
    "start": "2956119",
    "end": "2961559"
  },
  {
    "text": "matter where the standard says you broke programs and people got hurt now put it back the least you can do is make make F",
    "start": "2961559",
    "end": "2967119"
  },
  {
    "text": "wrap the default you still have to make it work correctly I've heard of it not working correctly in certain situations",
    "start": "2967119",
    "end": "2973720"
  },
  {
    "text": "but that's another story Andrew it will be the default in languages that Define this Behavior now I gave you a way to",
    "start": "2973720",
    "end": "2979400"
  },
  {
    "text": "write overflow checks and if you don't like what the C standard says it's not my fault remember GCC is an optimization",
    "start": "2979400",
    "end": "2984440"
  },
  {
    "text": "compiler and if you want optimizations you should follow the rules of the language you're writing in instead of writing bad programs which is what",
    "start": "2984440",
    "end": "2991240"
  },
  {
    "text": "happens with c and C++ in general",
    "start": "2991240",
    "end": "2995880"
  },
  {
    "text": "instead of writing bad programs which is just what happens in general with C++ dude this is so good that line is brutal",
    "start": "3001359",
    "end": "3009160"
  },
  {
    "text": "this line is absolutely brutal Felix GCC in earlier versions of the compiler this",
    "start": "3009160",
    "end": "3014359"
  },
  {
    "text": "behavior only happened when optimizations were enabled if you look a little closer you'll see that all your arguments are worthless because GCC 4.1",
    "start": "3014359",
    "end": "3021599"
  },
  {
    "text": "throws this code away without optimizations enabled that's all your arguments please make fpv the default",
    "start": "3021599",
    "end": "3027680"
  },
  {
    "text": "and I'll shut up try checking the execution time of the program with and without F uh fpv you'll see that the",
    "start": "3027680",
    "end": "3033960"
  },
  {
    "text": "code runs faster without it by trying to get into the discussion of the compiler optimizations Andrew",
    "start": "3033960",
    "end": "3039480"
  },
  {
    "text": "Pinsky decided to justify his position in the process however he mentioned a much more interesting argument the fact",
    "start": "3039480",
    "end": "3045119"
  },
  {
    "text": "that someone wrote an overflow check incorrectly is not grounds for pushing PE punishing people who actually did it correctly using the way the",
    "start": "3045119",
    "end": "3051640"
  },
  {
    "text": "documentation describes that's my position you're trying to punish people who wrote their checks the way the",
    "start": "3051640",
    "end": "3056760"
  },
  {
    "text": "standard Library expects at the very end of the discussion Andrew Pinsky stated the following I would accept your idea of",
    "start": "3056760",
    "end": "3062960"
  },
  {
    "text": "enabling FV by default if there was no way to check for overflow before it happened but there is yes we will break",
    "start": "3062960",
    "end": "3069760"
  },
  {
    "text": "code that was written under the assumption that signed overflow is possible but I think that's the price we can",
    "start": "3069760",
    "end": "3075640"
  },
  {
    "text": "accept in conclusion I would like to cite one more quote from lonus talls the GCC developers are more interested in",
    "start": "3075640",
    "end": "3082520"
  },
  {
    "text": "trying to figure out what else the standard allows them to do than how to actually make things work I I this is",
    "start": "3082520",
    "end": "3090720"
  },
  {
    "text": "it's such a weird world because okay so I I will make the",
    "start": "3090720",
    "end": "3095960"
  },
  {
    "text": "counterargument I will side with Andrew I'll steal man the guy for just one second which is if you don't have to",
    "start": "3095960",
    "end": "3103200"
  },
  {
    "text": "listen to the standards and program to the standards and make things optimize",
    "start": "3103200",
    "end": "3108720"
  },
  {
    "text": "around the standards then when and how do you define the line in which you don't have to anymore yes I I mean I",
    "start": "3108720",
    "end": "3116280"
  },
  {
    "text": "think I can generally agree with Felix that this is kind of bizarre behavior I am I am totally on like I'm totally",
    "start": "3116280",
    "end": "3124160"
  },
  {
    "text": "on this but at the exact same time it's like how often do you keep doing that",
    "start": "3124160",
    "end": "3131680"
  },
  {
    "text": "how often do you say forget what the standard says this is what I'm going to do instead let's see this uh is code",
    "start": "3131680",
    "end": "3137720"
  },
  {
    "text": "inside Rockets not some web app skill issue is not an argument I think yeah that's fair also honestly that's that's",
    "start": "3137720",
    "end": "3143559"
  },
  {
    "text": "really really fair like I'm just trying to make the argument for Andrew I'm trying to steal man his argument which",
    "start": "3143559",
    "end": "3151318"
  },
  {
    "text": "is here's here's the argument this is what I think the arguments being made here's what people want here is what the",
    "start": "3151440",
    "end": "3158599"
  },
  {
    "text": "standard had said needs to happen and there's some effectively gelatinous middle in which",
    "start": "3158599",
    "end": "3164280"
  },
  {
    "text": "people adhere to it looked like GCC only wanted to do this wherever they could",
    "start": "3164280",
    "end": "3170160"
  },
  {
    "text": "take advantage of something within the spec saying undefined Behavior they get to take advantage of it and for that one",
    "start": "3170160",
    "end": "3177400"
  },
  {
    "text": "issue why I'm not really sure why you would build something that nobody wants to use because it's too hard to use and",
    "start": "3177400",
    "end": "3183559"
  },
  {
    "text": "you get you get skill issued all the time so I can see why we don't want this",
    "start": "3183559",
    "end": "3188760"
  },
  {
    "text": "right like I'm actually on Felix's side but I can understand Andrew's argument I understand his argument and I",
    "start": "3188760",
    "end": "3195640"
  },
  {
    "text": "can I I can I can side with it because once you make a concession it's really hard to stop making",
    "start": "3195640",
    "end": "3202160"
  },
  {
    "text": "concessions and I know people think that oh you can just make a concession here well then you know when you make a concession here the next person comes",
    "start": "3202160",
    "end": "3208480"
  },
  {
    "text": "along and says okay actually I need this concession as well and then you make another one and then you keep you keep like it just keeps happening to the",
    "start": "3208480",
    "end": "3214520"
  },
  {
    "text": "point of how do you how do you determine where the line",
    "start": "3214520",
    "end": "3220599"
  },
  {
    "text": "is I think generally Felix is probably right because when I look at this",
    "start": "3220599",
    "end": "3226040"
  },
  {
    "text": "code like in my head I would agree this should assert I'm on team this should",
    "start": "3226040",
    "end": "3233400"
  },
  {
    "text": "assert but it's not it's not asserting then you end up with no standard yeah that's the hard part then you just end",
    "start": "3233400",
    "end": "3239040"
  },
  {
    "text": "up with different standards right then you have one compiler that asserts on this and one compiler that doesn't assert on it this this this feels yeah",
    "start": "3239040",
    "end": "3245720"
  },
  {
    "text": "the bugs in the standard the bugs in the standard itself this feels like it should this like this should be obvious like this should assert and so I'm very",
    "start": "3245720",
    "end": "3251920"
  },
  {
    "text": "confused as to why that doesn't do it without having to add a flag just feels funny to have to add one to get what",
    "start": "3251920",
    "end": "3257520"
  },
  {
    "text": "appears to be obvious Behavior to happen just feels strange okay just feels",
    "start": "3257520",
    "end": "3262880"
  },
  {
    "text": "obvious I don't know just use big inss I know again just use checks that that you",
    "start": "3262880",
    "end": "3269040"
  },
  {
    "text": "don't have to worry about it see has an issue with so much undefined Behavior yeah I I know this is why generally speaking I like languages like Zig",
    "start": "3269040",
    "end": "3276359"
  },
  {
    "text": "because you have pretty much all of the goodness of C without all of the craziness of C right like you just have",
    "start": "3276359",
    "end": "3282160"
  },
  {
    "text": "the goodness and that's it right I think Jai is pretty much the exact same thing which is like here's all the foot guns",
    "start": "3282160",
    "end": "3287559"
  },
  {
    "text": "you've ever wanted here you go go ahead shoot yourself in the foot but at the",
    "start": "3287559",
    "end": "3293319"
  },
  {
    "text": "same time we're going to put in some safety so you don't do like super stupid things fun with foot guns I'm fine with",
    "start": "3293319",
    "end": "3300200"
  },
  {
    "text": "foot guns right like I think that if you are given a memory region and you just",
    "start": "3300200",
    "end": "3305480"
  },
  {
    "text": "go past it and you're programming that type of program that requires you to have raw dog in",
    "start": "3305480",
    "end": "3311480"
  },
  {
    "text": "memory then yeah maybe that makes sense right like maybe that's like why you shouldn't do",
    "start": "3311480",
    "end": "3318559"
  },
  {
    "text": "that again I like I like Zig okay my my arrays come with lengths okay my my",
    "start": "3318559",
    "end": "3324119"
  },
  {
    "text": "arrays come with lengths and it just makes sense for me to have it that way I would much rather have that feels like",
    "start": "3324119",
    "end": "3330480"
  },
  {
    "text": "the argument for pseudo rmrf that's why pseudo rmrf is",
    "start": "3330480",
    "end": "3335760"
  },
  {
    "text": "fine you should not add the word pseudo to rmrf unless if you know what you're",
    "start": "3335760",
    "end": "3341520"
  },
  {
    "text": "rmrf in unless you VI RM RF yourself like what what do you want from that one",
    "start": "3341520",
    "end": "3347280"
  },
  {
    "text": "dude it's just like hey here here's a knife don't cut anything it's just like of course there's knife right yeah it's",
    "start": "3347280",
    "end": "3353799"
  },
  {
    "text": "only like if you mess up Le code problem exactly exactly L uh when you're Pro let's see when",
    "start": "3353799",
    "end": "3358839"
  },
  {
    "text": "you're programming without optimizations you expect the assembly to map directly to the code you wrote that's that's why",
    "start": "3358839",
    "end": "3364280"
  },
  {
    "text": "Andrew is wrong my dog's making funny noises over there just being all upset uh anyways let's see and this seems to",
    "start": "3364280",
    "end": "3371079"
  },
  {
    "text": "be the main problem with the c language but this could not happen out of nowhere in the end we ourselves allowed it to",
    "start": "3371079",
    "end": "3376599"
  },
  {
    "text": "happen the C language stopped performing the functions assigned to it a long time ago and turned into an ugly parody of",
    "start": "3376599",
    "end": "3382640"
  },
  {
    "text": "itself but we did not notice this because we resigned our to the fact that our programs do not work I don't want to",
    "start": "3382640",
    "end": "3389720"
  },
  {
    "text": "resign ourselves we as programmers are so accustomed to errors that they have become an integral part of our Lives yes I mean I have been using web",
    "start": "3389720",
    "end": "3395599"
  },
  {
    "text": "applications recently I have been using the web apps and errors just happen non-stop often debugging and testing",
    "start": "3395599",
    "end": "3401000"
  },
  {
    "text": "programs takes more time than designing and writing the code itself and this is not surprising people tend to make mistakes most bugs and vulnerabilities",
    "start": "3401000",
    "end": "3407440"
  },
  {
    "text": "are introduced by programmers by accident without thinking at all and we can do nothing about it I would be",
    "start": "3407440",
    "end": "3413799"
  },
  {
    "text": "shocked I mean to be completely fair this state statement makes no sense if there was if you introduced an error by",
    "start": "3413799",
    "end": "3420960"
  },
  {
    "text": "thinking about that you might be criminally liable to the company you work at don't introduce bugs",
    "start": "3420960",
    "end": "3426200"
  },
  {
    "text": "intentionally okay that's like a really bad plan just th just throwing that out there that's like a that's a really",
    "start": "3426200",
    "end": "3431920"
  },
  {
    "text": "that's a really bad plan you don't want to do that however the inevitability of Errors does not justify their existence",
    "start": "3431920",
    "end": "3437960"
  },
  {
    "text": "the task of the programmer is to write code that works even if it is not obvious difficult and impossible we have",
    "start": "3437960",
    "end": "3444480"
  },
  {
    "text": "no rights to make mistakes Let's see we have no right to make mistakes because otherwise everything is meaningless and",
    "start": "3444480",
    "end": "3449640"
  },
  {
    "text": "we stop understanding what can be done and what cannot and what is beautiful and what is ugly oh my gosh did the man",
    "start": "3449640",
    "end": "3455039"
  },
  {
    "text": "just make a direct correlation between truth and Beauty this guy's practically a",
    "start": "3455039",
    "end": "3460240"
  },
  {
    "text": "poet in pursuit of efficiency compiler developers forgot what the C language is really for it is it is a programmer's",
    "start": "3460240",
    "end": "3467160"
  },
  {
    "text": "tool and you cannot write a good program with a bad tool this story is an illustrative uh example of the fact that",
    "start": "3467160",
    "end": "3474559"
  },
  {
    "text": "not every activity is fruitful and not every change leads to a better result thanks to the efforts of the",
    "start": "3474559",
    "end": "3480319"
  },
  {
    "text": "standardization commit uh committee and the compiler developers we have ultimately lost the sea language as a",
    "start": "3480319",
    "end": "3487000"
  },
  {
    "text": "let's see as a development tool it has become absolutely useless and even harmful and we must admit this otherwise",
    "start": "3487000",
    "end": "3492319"
  },
  {
    "text": "our programs will never work the dismissive attitude to errors must become a thing of the past and the SE",
    "start": "3492319",
    "end": "3498000"
  },
  {
    "text": "language must die with it dang I wonder how Casey feels about this because Casey",
    "start": "3498000",
    "end": "3503280"
  },
  {
    "text": "still Casey's main is still C bro bro main SE hard PS if you still believe the",
    "start": "3503280",
    "end": "3508920"
  },
  {
    "text": "C language can be saved check out the following excert from one of the two editors of the C language standard we'll",
    "start": "3508920",
    "end": "3514440"
  },
  {
    "text": "let the compiler lie to you we'll lie to you to your code and then things go wrong a bug a [ __ ] job a memory leak and",
    "start": "3514440",
    "end": "3521680"
  },
  {
    "text": "we'll just shake your HEBs solemnly that's great this is great what",
    "start": "3521680",
    "end": "3527680"
  },
  {
    "text": "a great article what a great art I mean I think I think what this says is that the",
    "start": "3527680",
    "end": "3534839"
  },
  {
    "text": "inevitable growth of new languages that have proven that not having undefined behaviors and having everything defined",
    "start": "3534839",
    "end": "3541400"
  },
  {
    "text": "and having explicit errors for all the things that can go wrong what effectively it has done is allowed us to",
    "start": "3541400",
    "end": "3547119"
  },
  {
    "text": "be significantly more productive without guessing ourselves and maybe that's really the big takeaway here is that I",
    "start": "3547119",
    "end": "3553000"
  },
  {
    "text": "don't know if C should die I think C probably has a warm place in many people's hearts for a very very very",
    "start": "3553000",
    "end": "3558119"
  },
  {
    "text": "very long time but things like Zig or rust or even go and all these other",
    "start": "3558119",
    "end": "3563559"
  },
  {
    "text": "things that make a bunch of different assertions about how programming should be done they're just trying to learn from",
    "start": "3563559",
    "end": "3570160"
  },
  {
    "text": "all the mistakes right they're just trying to learn from the mistakes of the previous stuff and create a better",
    "start": "3570160",
    "end": "3575720"
  },
  {
    "text": "experience that hopefully we just write less bugs can anything replace a c for embedded uh I assume Zig can I assume",
    "start": "3575720",
    "end": "3581799"
  },
  {
    "text": "zigg is probably the most qualified to replace stuff for embedded just due to how beautiful it really is I mean most",
    "start": "3581799",
    "end": "3588640"
  },
  {
    "text": "of the universe still runs on C and most of the time software crashing is just uh uh crashing just doesn't matter that",
    "start": "3588640",
    "end": "3594680"
  },
  {
    "text": "much yeah most of the time it doesn't matter and let's just be let's just be real here the problem he mentioned with",
    "start": "3594680",
    "end": "3599799"
  },
  {
    "text": "the Rockets don't forget that another rocket also crashed which was into the side of Mars",
    "start": "3599799",
    "end": "3606240"
  },
  {
    "text": "due to the difference between feet and meters so it's kind of like you know we will still crash rockets regardless of a",
    "start": "3606240",
    "end": "3613200"
  },
  {
    "text": "FL uh of a float that overflows or an INT that overflows we will still f it up",
    "start": "3613200",
    "end": "3619799"
  },
  {
    "text": "regardless and arguments will crash is this the argument based on a discussion from 18 years ago U is bad but wondering",
    "start": "3619799",
    "end": "3626680"
  },
  {
    "text": "how the standards implementation is handled today yeah I have no idea how the implementation is handled today this",
    "start": "3626680",
    "end": "3631720"
  },
  {
    "text": "is obviously a bit older of an argument but it's still it's just such an amazing light into something right like this was",
    "start": "3631720",
    "end": "3637119"
  },
  {
    "text": "a world that we grew up on I think a lot I mean for me personally I grew up in javal land right I did a lot of C I",
    "start": "3637119",
    "end": "3643160"
  },
  {
    "text": "programmed a lot of C but I programmed C in such a narrow context involving embedded in robots and I did that for I",
    "start": "3643160",
    "end": "3650079"
  },
  {
    "text": "don't know a year and a half or however long couple years that I didn't really run into a lot of the stuff cuz it was all just like networking stuff I didn't",
    "start": "3650079",
    "end": "3656160"
  },
  {
    "text": "have to worry about a lot of this it's just I never or maybe I did have to worry about it and I never knew that there was",
    "start": "3656160",
    "end": "3661319"
  },
  {
    "text": "problems I just never ran into any of these problems right and so when I did all that stuff that's just what happens",
    "start": "3661319",
    "end": "3666680"
  },
  {
    "text": "and I I did it it was fantastic I actually really enjoyed programming with C I had a great great time programming",
    "start": "3666680",
    "end": "3672720"
  },
  {
    "text": "with C but that was just me in fact C is kind of where I realized that you can build things so fun in so many different",
    "start": "3672720",
    "end": "3679559"
  },
  {
    "text": "ways cuz I was so like stuck I was I was so stuck in the Java world that when I",
    "start": "3679559",
    "end": "3686680"
  },
  {
    "text": "did this I came out and it was amazing C is 50 years old and computers today aren't the same as they were 50 years",
    "start": "3686680",
    "end": "3692200"
  },
  {
    "text": "ago yeah or even 10 years ago right the amount of just differences in processors and what you get out has massively changed I think it's silly uh to think",
    "start": "3692200",
    "end": "3699480"
  },
  {
    "text": "the main tool we should be using right now to make our programs the same thing from back then there's so much more",
    "start": "3699480",
    "end": "3704760"
  },
  {
    "text": "let's see there's so much room for new languages built on these lessons we've learned C is legacy to me yeah I think I",
    "start": "3704760",
    "end": "3710640"
  },
  {
    "text": "all I know is that the people that really liked C and the people that use C effectively are all also really amazing",
    "start": "3710640",
    "end": "3717119"
  },
  {
    "text": "programmers C is the least secure programming language but it's still better than all the",
    "start": "3717119",
    "end": "3722279"
  },
  {
    "text": "rest I mean that's the thing is C is actually I mean as far as I can tell people who really love C are great",
    "start": "3722279",
    "end": "3727319"
  },
  {
    "text": "programmers they're really great at it and so I don't know Perhaps Perhaps the real problem is skill issues on my",
    "start": "3727319",
    "end": "3733240"
  },
  {
    "text": "behalf perhaps I am the problem so we should just move to D or we should just move to Zig I mean again that's why",
    "start": "3733240",
    "end": "3740680"
  },
  {
    "text": "again that's why I just use baby I use baby programming languages this one right this one won't let me pass a",
    "start": "3740680",
    "end": "3747160"
  },
  {
    "text": "possibly null pointer to a function that takes in a pointer or it won't allow me to sign null to a pointer without it",
    "start": "3747160",
    "end": "3753920"
  },
  {
    "text": "being marked as something that can be ran see as you can see right here this thing fails right there and it fails the other way where you're trying to assign",
    "start": "3753920",
    "end": "3759559"
  },
  {
    "text": "it with null so it's like I just avoid a lot of just weird",
    "start": "3759559",
    "end": "3764599"
  },
  {
    "text": "Behavior by just having a compiler that tells me I can't do things right it just makes life really",
    "start": "3764599",
    "end": "3769760"
  },
  {
    "text": "easy rust is safer though sure rust is safer rust is a strong man that holds you at night and when you need to get up",
    "start": "3769760",
    "end": "3775680"
  },
  {
    "text": "and PE it then yells at you and tells you how unsafe it is turns on all the lights make sure that all the lights are",
    "start": "3775680",
    "end": "3781039"
  },
  {
    "text": "on the maximum brightness setting makes you sit in bed let your lights get lets your eyes get a uh you know used to",
    "start": "3781039",
    "end": "3787799"
  },
  {
    "text": "seeing all the bright lights before you get up and pee then as you walk to the bathroom and ensures that you sit down with the seat down and everything",
    "start": "3787799",
    "end": "3794279"
  },
  {
    "text": "because you don't want any PE splashing anywhere make sure that you take off your pants completely and hang them up and take off your shirt just in case",
    "start": "3794279",
    "end": "3800839"
  },
  {
    "text": "completely you're butt naked on a toilet sitting down to pee when you use rust okay that's just how goes that's just",
    "start": "3800839",
    "end": "3806799"
  },
  {
    "text": "what's happening that's using C okay people that's using C in a nutshell just",
    "start": "3806799",
    "end": "3812640"
  },
  {
    "text": "just deal with that okay then you have to go back to bed which means that as you walk back to bed you realize that",
    "start": "3812640",
    "end": "3818119"
  },
  {
    "text": "you've been up for the last 30 minutes having a perfectly clean floor in which you mopped swept and everything just to",
    "start": "3818119",
    "end": "3823359"
  },
  {
    "text": "use the bathroom and now you can't go back to bed CU your body's like hey it's time to wake up after I got done with",
    "start": "3823359",
    "end": "3828920"
  },
  {
    "text": "all this light and all this everything now I kind of feel awake and you're like too bad I gotta go back to bed that my",
    "start": "3828920",
    "end": "3835119"
  },
  {
    "text": "friends programming in Rust a Jen",
    "start": "3835119",
    "end": "3841720"
  }
]