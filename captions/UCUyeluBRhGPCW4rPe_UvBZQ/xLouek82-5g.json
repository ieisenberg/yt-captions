[
  {
    "text": "meet Val a new language because you know",
    "start": "0",
    "end": "3600"
  },
  {
    "text": "honestly what we need right now in 2023",
    "start": "3600",
    "end": "6839"
  },
  {
    "text": "is another new language because right",
    "start": "6839",
    "end": "8940"
  },
  {
    "text": "now I'm not going to lie to you when I'm",
    "start": "8940",
    "end": "10559"
  },
  {
    "text": "programming v o camel Nim uh Odin Zig",
    "start": "10559",
    "end": "16820"
  },
  {
    "text": "rust carbon I sit there and I think you",
    "start": "16820",
    "end": "20939"
  },
  {
    "text": "know what I need I need a new language",
    "start": "20939",
    "end": "23279"
  },
  {
    "text": "because all these other languages okay",
    "start": "23279",
    "end": "25619"
  },
  {
    "text": "they ain't it I need something different",
    "start": "25619",
    "end": "27060"
  },
  {
    "text": "I need something new something fresh",
    "start": "27060",
    "end": "28980"
  },
  {
    "text": "meat Val a new language alternative to C",
    "start": "28980",
    "end": "31619"
  },
  {
    "text": "plus plus and rust Val is a high level",
    "start": "31619",
    "end": "34860"
  },
  {
    "text": "programming language that runs close to",
    "start": "34860",
    "end": "36480"
  },
  {
    "text": "the metal said the language Creator Demi",
    "start": "36480",
    "end": "39120"
  },
  {
    "text": "recardan Val is a new high-level",
    "start": "39120",
    "end": "41280"
  },
  {
    "text": "programming language that runs close to",
    "start": "41280",
    "end": "43079"
  },
  {
    "text": "the metal it's the brainchild of Demi",
    "start": "43079",
    "end": "44760"
  },
  {
    "text": "record a postdoc researcher at",
    "start": "44760",
    "end": "47219"
  },
  {
    "text": "Northeastern University who focuses on",
    "start": "47219",
    "end": "49739"
  },
  {
    "text": "language design and type-based",
    "start": "49739",
    "end": "51180"
  },
  {
    "text": "approaches from memory safety it started",
    "start": "51180",
    "end": "53039"
  },
  {
    "text": "as a byproduct of research uh she did",
    "start": "53039",
    "end": "55320"
  },
  {
    "text": "with Google and Adobe on the Swift",
    "start": "55320",
    "end": "57660"
  },
  {
    "text": "programming language and the decide in",
    "start": "57660",
    "end": "59640"
  },
  {
    "text": "the discipline of mutable value",
    "start": "59640",
    "end": "61320"
  },
  {
    "text": "semantics which upholds the independence",
    "start": "61320",
    "end": "63539"
  },
  {
    "text": "of values to support local reasoning I'm",
    "start": "63539",
    "end": "66720"
  },
  {
    "text": "sorry",
    "start": "66720",
    "end": "67740"
  },
  {
    "text": "or congratulations I ain't gonna read",
    "start": "67740",
    "end": "70260"
  },
  {
    "text": "that",
    "start": "70260",
    "end": "71220"
  },
  {
    "text": "um Haskell rust and R are other examples",
    "start": "71220",
    "end": "73500"
  },
  {
    "text": "of languages that use mutable value",
    "start": "73500",
    "end": "75439"
  },
  {
    "text": "semantics oh man given pick boners right",
    "start": "75439",
    "end": "78119"
  },
  {
    "text": "here uh this is a project that started",
    "start": "78119",
    "end": "81600"
  },
  {
    "text": "around two years ago I wrote the paper I",
    "start": "81600",
    "end": "83939"
  },
  {
    "text": "collaborated with great people at Google",
    "start": "83939",
    "end": "85500"
  },
  {
    "text": "and Adobe",
    "start": "85500",
    "end": "87500"
  },
  {
    "text": "told the new stack now for this paper I",
    "start": "87500",
    "end": "90479"
  },
  {
    "text": "had a small idea in the back of my head",
    "start": "90479",
    "end": "92460"
  },
  {
    "text": "and I thought oh we'll try implementing",
    "start": "92460",
    "end": "94560"
  },
  {
    "text": "some stuff and it will be two or three",
    "start": "94560",
    "end": "96240"
  },
  {
    "text": "week project it's been two years",
    "start": "96240",
    "end": "100020"
  },
  {
    "text": "what does this tell you people",
    "start": "100020",
    "end": "101939"
  },
  {
    "text": "what does this tell you tells you two",
    "start": "101939",
    "end": "104640"
  },
  {
    "text": "things first off",
    "start": "104640",
    "end": "106020"
  },
  {
    "text": "the rate of new languages is slowly",
    "start": "106020",
    "end": "108720"
  },
  {
    "text": "exceeding the rate of new JavaScript",
    "start": "108720",
    "end": "110820"
  },
  {
    "text": "front and Dom manipulating libraries",
    "start": "110820",
    "end": "113759"
  },
  {
    "text": "specifically number two what this tells",
    "start": "113759",
    "end": "116460"
  },
  {
    "text": "you is that Engineers are the worst",
    "start": "116460",
    "end": "119159"
  },
  {
    "text": "estimators ever",
    "start": "119159",
    "end": "120720"
  },
  {
    "text": "look at this person okay she Demi Demi",
    "start": "120720",
    "end": "123899"
  },
  {
    "text": "Demi or Demi I'll call her Demi for here",
    "start": "123899",
    "end": "126840"
  },
  {
    "text": "from here on out Demi is a post doc okay",
    "start": "126840",
    "end": "130860"
  },
  {
    "text": "postdoc",
    "start": "130860",
    "end": "132239"
  },
  {
    "text": "that means",
    "start": "132239",
    "end": "133800"
  },
  {
    "text": "she went through school",
    "start": "133800",
    "end": "135780"
  },
  {
    "text": "then decided to go back to school and",
    "start": "135780",
    "end": "138360"
  },
  {
    "text": "then decided to go back to school again",
    "start": "138360",
    "end": "140099"
  },
  {
    "text": "and then after being in school decide to",
    "start": "140099",
    "end": "144060"
  },
  {
    "text": "go back again for languages and then",
    "start": "144060",
    "end": "147660"
  },
  {
    "text": "thought oh I could probably do this in",
    "start": "147660",
    "end": "149400"
  },
  {
    "text": "three weeks two years later",
    "start": "149400",
    "end": "152520"
  },
  {
    "text": "honestly this is literally every one of",
    "start": "152520",
    "end": "154620"
  },
  {
    "text": "my projects this is this is me this is",
    "start": "154620",
    "end": "157680"
  },
  {
    "text": "actually me uh let's see nothing else",
    "start": "157680",
    "end": "159360"
  },
  {
    "text": "does quite what regardon wanted she",
    "start": "159360",
    "end": "162180"
  },
  {
    "text": "started with swift because she already",
    "start": "162180",
    "end": "163739"
  },
  {
    "text": "knew it if there's ever been a sentence",
    "start": "163739",
    "end": "165599"
  },
  {
    "text": "that never needed to be written that's",
    "start": "165599",
    "end": "167519"
  },
  {
    "text": "the one yeah",
    "start": "167519",
    "end": "170040"
  },
  {
    "text": "started with swift why you ask cause I",
    "start": "170040",
    "end": "172800"
  },
  {
    "text": "knew it you know I didn't start with the",
    "start": "172800",
    "end": "174360"
  },
  {
    "text": "language I didn't know to design a",
    "start": "174360",
    "end": "175739"
  },
  {
    "text": "language I started with the language I",
    "start": "175739",
    "end": "177300"
  },
  {
    "text": "did know and did a lot of research on I",
    "start": "177300",
    "end": "178860"
  },
  {
    "text": "know it's kind of crazy and Swift",
    "start": "178860",
    "end": "180300"
  },
  {
    "text": "supports immutable value semantics it",
    "start": "180300",
    "end": "183060"
  },
  {
    "text": "checked a lot of other boxes she wanted",
    "start": "183060",
    "end": "185040"
  },
  {
    "text": "as well such as compiling to machine",
    "start": "185040",
    "end": "186540"
  },
  {
    "text": "code making it good for systems",
    "start": "186540",
    "end": "188340"
  },
  {
    "text": "programming but also undermines the",
    "start": "188340",
    "end": "190200"
  },
  {
    "text": "value semantics because it mixes it with",
    "start": "190200",
    "end": "192360"
  },
  {
    "text": "other things she added that made record",
    "start": "192360",
    "end": "194720"
  },
  {
    "text": "I wonder what would happen if she made a",
    "start": "194720",
    "end": "197280"
  },
  {
    "text": "language that was purely about mutable",
    "start": "197280",
    "end": "199200"
  },
  {
    "text": "value semantics okay so I'm gonna be",
    "start": "199200",
    "end": "201780"
  },
  {
    "text": "real here I'm gonna be really real and",
    "start": "201780",
    "end": "203640"
  },
  {
    "text": "vulnerable with you guys so please don't",
    "start": "203640",
    "end": "205620"
  },
  {
    "text": "say anything that's rude or hurtful I",
    "start": "205620",
    "end": "207900"
  },
  {
    "text": "don't know what mutable value semantics",
    "start": "207900",
    "end": "209640"
  },
  {
    "text": "means okay my guess is it literally you",
    "start": "209640",
    "end": "212400"
  },
  {
    "text": "just have to Define when something is",
    "start": "212400",
    "end": "213959"
  },
  {
    "text": "mutable is that all that it means and in",
    "start": "213959",
    "end": "216659"
  },
  {
    "text": "strictest form of mutable value",
    "start": "216659",
    "end": "218640"
  },
  {
    "text": "semantics references become second-class",
    "start": "218640",
    "end": "220680"
  },
  {
    "text": "citizens they are only created",
    "start": "220680",
    "end": "222000"
  },
  {
    "text": "implicitly at function boundaries and",
    "start": "222000",
    "end": "223739"
  },
  {
    "text": "cannot be stored in variables or object",
    "start": "223739",
    "end": "225780"
  },
  {
    "text": "Fields hence variables can never share",
    "start": "225780",
    "end": "227819"
  },
  {
    "text": "mutable state in other words MV s allows",
    "start": "227819",
    "end": "231239"
  },
  {
    "text": "you to return multiple values from a",
    "start": "231239",
    "end": "232799"
  },
  {
    "text": "single expression while mvs restricts",
    "start": "232799",
    "end": "234599"
  },
  {
    "text": "how references can be used in a program",
    "start": "234599",
    "end": "236360"
  },
  {
    "text": "returns multiple values from a single",
    "start": "236360",
    "end": "238500"
  },
  {
    "text": "expression restricts how how did",
    "start": "238500",
    "end": "240299"
  },
  {
    "text": "multiple dude I swear this is just chat",
    "start": "240299",
    "end": "242340"
  },
  {
    "text": "GPT just a hallucinating things here's a",
    "start": "242340",
    "end": "245040"
  },
  {
    "text": "table that summarizes the key difference",
    "start": "245040",
    "end": "246599"
  },
  {
    "text": "between mvs and mvs what the hell are we",
    "start": "246599",
    "end": "249360"
  },
  {
    "text": "even looking at can we stop using AI to",
    "start": "249360",
    "end": "252239"
  },
  {
    "text": "solve everything can we just stop I",
    "start": "252239",
    "end": "254819"
  },
  {
    "text": "don't even know what I'm looking at",
    "start": "254819",
    "end": "256079"
  },
  {
    "text": "anymore now I'm just super confused can",
    "start": "256079",
    "end": "258959"
  },
  {
    "text": "we just stop using AI to solve literally",
    "start": "258959",
    "end": "261419"
  },
  {
    "text": "everything it is very very confusing",
    "start": "261419",
    "end": "264900"
  },
  {
    "text": "we're just gonna go on okay I'm sure",
    "start": "264900",
    "end": "266759"
  },
  {
    "text": "what it means is something amazing but I",
    "start": "266759",
    "end": "268740"
  },
  {
    "text": "can't do this anymore okay we're gonna",
    "start": "268740",
    "end": "270419"
  },
  {
    "text": "all pretend like we know what this word",
    "start": "270419",
    "end": "272040"
  },
  {
    "text": "means and we're gonna keep on going they",
    "start": "272040",
    "end": "274500"
  },
  {
    "text": "checked a lot of other boxes as well she",
    "start": "274500",
    "end": "276120"
  },
  {
    "text": "wanted she wants such as okay we already",
    "start": "276120",
    "end": "277380"
  },
  {
    "text": "read that mutable value semantics is a",
    "start": "277380",
    "end": "279419"
  },
  {
    "text": "programming discipline that really",
    "start": "279419",
    "end": "280440"
  },
  {
    "text": "focuses on notional value not notional",
    "start": "280440",
    "end": "283380"
  },
  {
    "text": "values so if I have an array of things",
    "start": "283380",
    "end": "285720"
  },
  {
    "text": "for example the value of this array is",
    "start": "285720",
    "end": "288180"
  },
  {
    "text": "the most important concept that I want",
    "start": "288180",
    "end": "290040"
  },
  {
    "text": "to manipulate she said that gives me",
    "start": "290040",
    "end": "292259"
  },
  {
    "text": "local reasoning",
    "start": "292259",
    "end": "293940"
  },
  {
    "text": "is this just gonna be another Haskell",
    "start": "293940",
    "end": "295560"
  },
  {
    "text": "clone",
    "start": "295560",
    "end": "296759"
  },
  {
    "text": "amazing white paper but doesn't actually",
    "start": "296759",
    "end": "298800"
  },
  {
    "text": "do anything I don't know what the hell",
    "start": "298800",
    "end": "300479"
  },
  {
    "text": "just I again what the hell did you just",
    "start": "300479",
    "end": "303120"
  },
  {
    "text": "say to me what are you saying to my face",
    "start": "303120",
    "end": "305600"
  },
  {
    "text": "uh to really understand why this",
    "start": "305600",
    "end": "307620"
  },
  {
    "text": "approach is needed record said uh",
    "start": "307620",
    "end": "309660"
  },
  {
    "text": "consider reference semantics which is",
    "start": "309660",
    "end": "311220"
  },
  {
    "text": "another approach used by modern",
    "start": "311220",
    "end": "312419"
  },
  {
    "text": "programming languages especially in",
    "start": "312419",
    "end": "313800"
  },
  {
    "text": "parative languages such as C plus plus",
    "start": "313800",
    "end": "315419"
  },
  {
    "text": "JavaScript Python and Java uh these",
    "start": "315419",
    "end": "318000"
  },
  {
    "text": "languages distinguish between primitive",
    "start": "318000",
    "end": "319740"
  },
  {
    "text": "data types such as integers or strings",
    "start": "319740",
    "end": "321840"
  },
  {
    "text": "sometimes",
    "start": "321840",
    "end": "323639"
  },
  {
    "text": "and those uh types behave like values",
    "start": "323639",
    "end": "325860"
  },
  {
    "text": "she said changing the value of an",
    "start": "325860",
    "end": "327660"
  },
  {
    "text": "integer doesn't create an observable",
    "start": "327660",
    "end": "329160"
  },
  {
    "text": "side effect to some other place in the",
    "start": "329160",
    "end": "331680"
  },
  {
    "text": "program this is definitely a Hassler",
    "start": "331680",
    "end": "333720"
  },
  {
    "text": "that's not the case for other data types",
    "start": "333720",
    "end": "335820"
  },
  {
    "text": "such as Aggregates arrays or hash Maps",
    "start": "335820",
    "end": "337979"
  },
  {
    "text": "because they have reference semantics",
    "start": "337979",
    "end": "339600"
  },
  {
    "text": "okay okay what happens if you pass an",
    "start": "339600",
    "end": "342120"
  },
  {
    "text": "array to a function in Python and then",
    "start": "342120",
    "end": "344039"
  },
  {
    "text": "this function goes on to change the",
    "start": "344039",
    "end": "345360"
  },
  {
    "text": "array maybe adding an element or",
    "start": "345360",
    "end": "346979"
  },
  {
    "text": "removing some element from this array",
    "start": "346979",
    "end": "348840"
  },
  {
    "text": "then this effect can be observed from",
    "start": "348840",
    "end": "350820"
  },
  {
    "text": "the outside of the function is are have",
    "start": "350820",
    "end": "353340"
  },
  {
    "text": "we just been reading hundreds of words",
    "start": "353340",
    "end": "355380"
  },
  {
    "text": "to just Describe the word mute",
    "start": "355380",
    "end": "357780"
  },
  {
    "text": "in front of a variable",
    "start": "357780",
    "end": "360120"
  },
  {
    "text": "is that",
    "start": "360120",
    "end": "362160"
  },
  {
    "text": "is is what I'm hearing right now",
    "start": "362160",
    "end": "366500"
  },
  {
    "text": "is is it literally just going",
    "start": "369180",
    "end": "372320"
  },
  {
    "text": "let mute Foo equals five",
    "start": "372320",
    "end": "376259"
  },
  {
    "text": "is that what they're saying by local",
    "start": "376259",
    "end": "377820"
  },
  {
    "text": "reasoning",
    "start": "377820",
    "end": "380419"
  },
  {
    "text": "I knew I was a genius see this whole",
    "start": "388259",
    "end": "390720"
  },
  {
    "text": "time this whole time I'm over here",
    "start": "390720",
    "end": "393240"
  },
  {
    "text": "pretending to be stupid for you",
    "start": "393240",
    "end": "396900"
  },
  {
    "text": "okay",
    "start": "396900",
    "end": "398580"
  },
  {
    "text": "but the reality is you you are stupid",
    "start": "398580",
    "end": "402300"
  },
  {
    "text": "okay maybe you should kind of you know",
    "start": "402300",
    "end": "404940"
  },
  {
    "text": "use your brain a little bit more often",
    "start": "404940",
    "end": "406740"
  },
  {
    "text": "okay big brain okay big brain",
    "start": "406740",
    "end": "411000"
  },
  {
    "text": "she explained the collar of the function",
    "start": "411000",
    "end": "412680"
  },
  {
    "text": "will have its own array being changed",
    "start": "412680",
    "end": "414360"
  },
  {
    "text": "you cannot reason locally about the",
    "start": "414360",
    "end": "415860"
  },
  {
    "text": "values because every time you call the",
    "start": "415860",
    "end": "417120"
  },
  {
    "text": "function some side effect might occur in",
    "start": "417120",
    "end": "419220"
  },
  {
    "text": "a seemingly unrelated part of your",
    "start": "419220",
    "end": "420840"
  },
  {
    "text": "program that makes I mean I do agree",
    "start": "420840",
    "end": "422759"
  },
  {
    "text": "with the idea that you should Define I",
    "start": "422759",
    "end": "424680"
  },
  {
    "text": "love the idea of defining mutations man",
    "start": "424680",
    "end": "427259"
  },
  {
    "text": "I've said this in completely different",
    "start": "427259",
    "end": "428819"
  },
  {
    "text": "terms uh I've always preferred the idea",
    "start": "428819",
    "end": "431940"
  },
  {
    "text": "of Define when things mutate versus uh",
    "start": "431940",
    "end": "434639"
  },
  {
    "text": "don't or defining when they should be",
    "start": "434639",
    "end": "436979"
  },
  {
    "text": "immutable so typescript does the",
    "start": "436979",
    "end": "439080"
  },
  {
    "text": "opposite of this right so if we go back",
    "start": "439080",
    "end": "441000"
  },
  {
    "text": "uh here and go to uh scratch wait I",
    "start": "441000",
    "end": "444419"
  },
  {
    "text": "thought I had it in here uh scratch is",
    "start": "444419",
    "end": "446580"
  },
  {
    "text": "it in here",
    "start": "446580",
    "end": "447840"
  },
  {
    "text": "really",
    "start": "447840",
    "end": "449340"
  },
  {
    "text": "do I not have it I thought I had like a",
    "start": "449340",
    "end": "451199"
  },
  {
    "text": "little",
    "start": "451199",
    "end": "452759"
  },
  {
    "text": "do I not have it in here do I is it in",
    "start": "452759",
    "end": "454620"
  },
  {
    "text": "here I thought I had something in here",
    "start": "454620",
    "end": "457199"
  },
  {
    "text": "huh here let's let's erase this thing uh",
    "start": "457199",
    "end": "460620"
  },
  {
    "text": "and you see this all the time uh with",
    "start": "460620",
    "end": "462539"
  },
  {
    "text": "something like typescript is that you'll",
    "start": "462539",
    "end": "464880"
  },
  {
    "text": "have something like uh function Foo and",
    "start": "464880",
    "end": "467460"
  },
  {
    "text": "Foo will take in a say an array",
    "start": "467460",
    "end": "470099"
  },
  {
    "text": "and it's an it's a number this",
    "start": "470099",
    "end": "473460"
  },
  {
    "text": "as const right or no no no not as cons",
    "start": "473460",
    "end": "476400"
  },
  {
    "text": "and it in a function header you go read",
    "start": "476400",
    "end": "478680"
  },
  {
    "text": "only is read only over here no no that's",
    "start": "478680",
    "end": "480539"
  },
  {
    "text": "that's",
    "start": "480539",
    "end": "481620"
  },
  {
    "text": "it's right here",
    "start": "481620",
    "end": "484520"
  },
  {
    "text": "there you go like you have to specify",
    "start": "485039",
    "end": "487440"
  },
  {
    "text": "the inversion of that you say when it's",
    "start": "487440",
    "end": "490380"
  },
  {
    "text": "not changeable",
    "start": "490380",
    "end": "492300"
  },
  {
    "text": "versus the other way which is",
    "start": "492300",
    "end": "495900"
  },
  {
    "text": "you have to specify when it's changeable",
    "start": "495900",
    "end": "497759"
  },
  {
    "text": "I think I prefer",
    "start": "497759",
    "end": "501060"
  },
  {
    "text": "I I prefer the other way and it's true",
    "start": "501060",
    "end": "502979"
  },
  {
    "text": "because I go like this let's just",
    "start": "502979",
    "end": "505080"
  },
  {
    "text": "pretend like this thing is an array of",
    "start": "505080",
    "end": "508139"
  },
  {
    "text": "can we do that can we go uh Foo equals I",
    "start": "508139",
    "end": "511319"
  },
  {
    "text": "don't know uh food number there we go",
    "start": "511319",
    "end": "513180"
  },
  {
    "text": "lots of foods in this thing because you",
    "start": "513180",
    "end": "514560"
  },
  {
    "text": "know I prefer things to be as confusing",
    "start": "514560",
    "end": "516180"
  },
  {
    "text": "as possible you know what I mean there",
    "start": "516180",
    "end": "518279"
  },
  {
    "text": "we go all right so this is an array of",
    "start": "518279",
    "end": "520260"
  },
  {
    "text": "Foo and so can I go like this Foo equals",
    "start": "520260",
    "end": "523320"
  },
  {
    "text": "five",
    "start": "523320",
    "end": "525440"
  },
  {
    "text": "foreign",
    "start": "537000",
    "end": "539160"
  },
  {
    "text": "I hate typescript sometimes I know",
    "start": "539160",
    "end": "542880"
  },
  {
    "text": "people love typescript okay I get it",
    "start": "542880",
    "end": "546720"
  },
  {
    "text": "um I get it uh I get it",
    "start": "546720",
    "end": "552079"
  },
  {
    "text": "I understand that read only",
    "start": "553380",
    "end": "557120"
  },
  {
    "text": "means that it's only read only",
    "start": "557120",
    "end": "560220"
  },
  {
    "text": "at the array level",
    "start": "560220",
    "end": "562200"
  },
  {
    "text": "but this this ain't it okay this is not",
    "start": "562200",
    "end": "564660"
  },
  {
    "text": "how it does stop making excuses for just",
    "start": "564660",
    "end": "567600"
  },
  {
    "text": "really annoying Behavior",
    "start": "567600",
    "end": "570800"
  },
  {
    "text": "okay",
    "start": "572040",
    "end": "575040"
  },
  {
    "text": "it's please just just drop the copium",
    "start": "575700",
    "end": "579959"
  },
  {
    "text": "yeah of course you choose TS over Js",
    "start": "579959",
    "end": "584279"
  },
  {
    "text": "foreign",
    "start": "584279",
    "end": "585540"
  },
  {
    "text": "just it's always emotionally painful",
    "start": "585540",
    "end": "587760"
  },
  {
    "text": "when I see those things that makes it",
    "start": "587760",
    "end": "589200"
  },
  {
    "text": "difficult to apply local reasoning for",
    "start": "589200",
    "end": "590760"
  },
  {
    "text": "humans which makes it harder to be sure",
    "start": "590760",
    "end": "592440"
  },
  {
    "text": "that programs are correct she said but",
    "start": "592440",
    "end": "594959"
  },
  {
    "text": "it also makes it uh difficult for",
    "start": "594959",
    "end": "597000"
  },
  {
    "text": "compilers because optimizers now need to",
    "start": "597000",
    "end": "599880"
  },
  {
    "text": "be very conservative about what happened",
    "start": "599880",
    "end": "601560"
  },
  {
    "text": "she said the optimizer has to account",
    "start": "601560",
    "end": "603600"
  },
  {
    "text": "for the fact that other references might",
    "start": "603600",
    "end": "605220"
  },
  {
    "text": "exist and some seemingly unrelated part",
    "start": "605220",
    "end": "607200"
  },
  {
    "text": "of the program might need the value that",
    "start": "607200",
    "end": "609240"
  },
  {
    "text": "is being mutated so it's best not to do",
    "start": "609240",
    "end": "611339"
  },
  {
    "text": "anything rather than compromise the",
    "start": "611339",
    "end": "612779"
  },
  {
    "text": "reference architecture the value of",
    "start": "612779",
    "end": "614820"
  },
  {
    "text": "mutable value semantics this is where",
    "start": "614820",
    "end": "617519"
  },
  {
    "text": "the value of mutable value semantics",
    "start": "617519",
    "end": "619440"
  },
  {
    "text": "becomes useful mutable value semantics",
    "start": "619440",
    "end": "621300"
  },
  {
    "text": "remove the references from the picture",
    "start": "621300",
    "end": "622620"
  },
  {
    "text": "she explained uh but it preserves",
    "start": "622620",
    "end": "625140"
  },
  {
    "text": "In-Place mutation which is very",
    "start": "625140",
    "end": "626640"
  },
  {
    "text": "efficient absolutely for instance if you",
    "start": "626640",
    "end": "628740"
  },
  {
    "text": "want to sort an array in place you don't",
    "start": "628740",
    "end": "630660"
  },
  {
    "text": "have to build a bunch of new data",
    "start": "630660",
    "end": "632160"
  },
  {
    "text": "structures and try to recombine them she",
    "start": "632160",
    "end": "634080"
  },
  {
    "text": "said uh that kind of peer functional",
    "start": "634080",
    "end": "636180"
  },
  {
    "text": "model will put a lot of pressure on your",
    "start": "636180",
    "end": "637620"
  },
  {
    "text": "Optimizer to recover the lost efficiency",
    "start": "637620",
    "end": "639779"
  },
  {
    "text": "you want to do things in place because",
    "start": "639779",
    "end": "642240"
  },
  {
    "text": "allocating a lot of pieces of memory and",
    "start": "642240",
    "end": "644160"
  },
  {
    "text": "recombining them together will be very",
    "start": "644160",
    "end": "646560"
  },
  {
    "text": "very slow",
    "start": "646560",
    "end": "648600"
  },
  {
    "text": "I mean I agree this is",
    "start": "648600",
    "end": "651839"
  },
  {
    "text": "in terms of in terms of computer speed",
    "start": "651839",
    "end": "654300"
  },
  {
    "text": "she's 100 correct that provides a very",
    "start": "654300",
    "end": "657839"
  },
  {
    "text": "transparent uh performance model which",
    "start": "657839",
    "end": "659700"
  },
  {
    "text": "is a very good so I honestly have no",
    "start": "659700",
    "end": "661500"
  },
  {
    "text": "idea what this language does yet mutable",
    "start": "661500",
    "end": "664019"
  },
  {
    "text": "value semantics removes these references",
    "start": "664019",
    "end": "665579"
  },
  {
    "text": "from the picture you only have values",
    "start": "665579",
    "end": "666959"
  },
  {
    "text": "and a bunch of techniques that you could",
    "start": "666959",
    "end": "668339"
  },
  {
    "text": "use to preserve sufficient",
    "start": "668339",
    "end": "669899"
  },
  {
    "text": "expressiveness it looks like functional",
    "start": "669899",
    "end": "671940"
  },
  {
    "text": "programming but what you really want to",
    "start": "671940",
    "end": "673380"
  },
  {
    "text": "preserve is In-Place mutation because",
    "start": "673380",
    "end": "674820"
  },
  {
    "text": "In-Place mutation is very efficient",
    "start": "674820",
    "end": "677760"
  },
  {
    "text": "that's what she said",
    "start": "677760",
    "end": "679500"
  },
  {
    "text": "um",
    "start": "679500",
    "end": "681620"
  },
  {
    "text": "take care",
    "start": "682620",
    "end": "685220"
  },
  {
    "text": "this is definitely Haskell 2.0 really",
    "start": "685260",
    "end": "687899"
  },
  {
    "text": "what I'm reading out of this is that the",
    "start": "687899",
    "end": "689339"
  },
  {
    "text": "Heap was a mistake is that what I'm",
    "start": "689339",
    "end": "691560"
  },
  {
    "text": "hearing the Heap was a mistake we should",
    "start": "691560",
    "end": "693420"
  },
  {
    "text": "have just always used the stack to begin",
    "start": "693420",
    "end": "694860"
  },
  {
    "text": "with",
    "start": "694860",
    "end": "696000"
  },
  {
    "text": "um that's you know there's there's this",
    "start": "696000",
    "end": "697440"
  },
  {
    "text": "funny notion that programming got hard",
    "start": "697440",
    "end": "700140"
  },
  {
    "text": "because of the because of the Heap",
    "start": "700140",
    "end": "704360"
  },
  {
    "text": "the Heap truly ruined programming",
    "start": "705060",
    "end": "707279"
  },
  {
    "text": "garbage collection is a result of the",
    "start": "707279",
    "end": "710220"
  },
  {
    "text": "Heap being impossible",
    "start": "710220",
    "end": "713360"
  },
  {
    "text": "if you don't understand the difference",
    "start": "716820",
    "end": "717899"
  },
  {
    "text": "between a heap and a stack like go read",
    "start": "717899",
    "end": "720060"
  },
  {
    "text": "about it",
    "start": "720060",
    "end": "722339"
  },
  {
    "text": "like I'm sorry but I think that might be",
    "start": "722339",
    "end": "724260"
  },
  {
    "text": "slight slightly out of scope for this",
    "start": "724260",
    "end": "726480"
  },
  {
    "text": "talk uh",
    "start": "726480",
    "end": "729480"
  },
  {
    "text": "why don't you just create Mike Michael",
    "start": "729480",
    "end": "731519"
  },
  {
    "text": "Michael Scott plus plus language one",
    "start": "731519",
    "end": "733079"
  },
  {
    "text": "shut up okay I'd rather be Bill Burr uh",
    "start": "733079",
    "end": "736740"
  },
  {
    "text": "this includes let's say okay uh the",
    "start": "736740",
    "end": "738660"
  },
  {
    "text": "language is designed for systems",
    "start": "738660",
    "end": "739920"
  },
  {
    "text": "programming so it's primarily for any",
    "start": "739920",
    "end": "741180"
  },
  {
    "text": "application that runs close to the metal",
    "start": "741180",
    "end": "742440"
  },
  {
    "text": "and needs to squeeze the most possible",
    "start": "742440",
    "end": "743820"
  },
  {
    "text": "performance from the machine then said",
    "start": "743820",
    "end": "745800"
  },
  {
    "text": "that includes uh uses such as operating",
    "start": "745800",
    "end": "748079"
  },
  {
    "text": "systems memory intensive applications",
    "start": "748079",
    "end": "749519"
  },
  {
    "text": "such as video games or image processing",
    "start": "749519",
    "end": "751140"
  },
  {
    "text": "or other applications that can't afford",
    "start": "751140",
    "end": "752640"
  },
  {
    "text": "a virtual machine or a garbage collector",
    "start": "752640",
    "end": "754320"
  },
  {
    "text": "embedded applications would also be very",
    "start": "754320",
    "end": "756240"
  },
  {
    "text": "interesting Target she said",
    "start": "756240",
    "end": "758399"
  },
  {
    "text": "so again one of my big problems I have",
    "start": "758399",
    "end": "761279"
  },
  {
    "text": "with this whole thing is never answer",
    "start": "761279",
    "end": "764519"
  },
  {
    "text": "the never answered the original question",
    "start": "764519",
    "end": "766620"
  },
  {
    "text": "up here why another programming language",
    "start": "766620",
    "end": "771500"
  },
  {
    "text": "you know like why yet another one why",
    "start": "771500",
    "end": "775079"
  },
  {
    "text": "doesn't rust do this enough for you",
    "start": "775079",
    "end": "779180"
  },
  {
    "text": "Russ plus plus but even harder with",
    "start": "781260",
    "end": "783180"
  },
  {
    "text": "rules about",
    "start": "783180",
    "end": "784519"
  },
  {
    "text": "yes even harder it's even harder or rust",
    "start": "784519",
    "end": "787680"
  },
  {
    "text": "plus plus this is always my problem with",
    "start": "787680",
    "end": "789480"
  },
  {
    "text": "these things is like even no matter how",
    "start": "789480",
    "end": "791040"
  },
  {
    "text": "much backing and no much you know even",
    "start": "791040",
    "end": "793380"
  },
  {
    "text": "if Google that I mean it's the same",
    "start": "793380",
    "end": "794639"
  },
  {
    "text": "reason why I have such a hard time with",
    "start": "794639",
    "end": "796800"
  },
  {
    "text": "carbon",
    "start": "796800",
    "end": "797760"
  },
  {
    "text": "when Zig already existed right Zig great",
    "start": "797760",
    "end": "801839"
  },
  {
    "text": "great header support it has a lot of",
    "start": "801839",
    "end": "804600"
  },
  {
    "text": "great stuff already really built in",
    "start": "804600",
    "end": "807180"
  },
  {
    "text": "and I know carbon's like trying to it's",
    "start": "807180",
    "end": "809579"
  },
  {
    "text": "more for C plus plus and all that but",
    "start": "809579",
    "end": "812279"
  },
  {
    "text": "it's like you get everything you need",
    "start": "812279",
    "end": "813959"
  },
  {
    "text": "from Zig",
    "start": "813959",
    "end": "815040"
  },
  {
    "text": "and it integrates really really",
    "start": "815040",
    "end": "816480"
  },
  {
    "text": "straightforward so why yet another",
    "start": "816480",
    "end": "819360"
  },
  {
    "text": "version",
    "start": "819360",
    "end": "821720"
  },
  {
    "text": "I just don't get it I honestly don't get",
    "start": "825839",
    "end": "827940"
  },
  {
    "text": "it I I don't get the purpose of of more",
    "start": "827940",
    "end": "831060"
  },
  {
    "text": "and more like Odin made sense because",
    "start": "831060",
    "end": "832620"
  },
  {
    "text": "Odin is a language designed for game",
    "start": "832620",
    "end": "834540"
  },
  {
    "text": "programming it optimizes",
    "start": "834540",
    "end": "837420"
  },
  {
    "text": "things that are hard in one language to",
    "start": "837420",
    "end": "840000"
  },
  {
    "text": "be easy in this language right it's a",
    "start": "840000",
    "end": "841920"
  },
  {
    "text": "language designed for a purpose and to",
    "start": "841920",
    "end": "843600"
  },
  {
    "text": "me that makes like that actually makes",
    "start": "843600",
    "end": "845339"
  },
  {
    "text": "sense designing a language for a purpose",
    "start": "845339",
    "end": "847620"
  },
  {
    "text": "makes perfect sense to me that's why",
    "start": "847620",
    "end": "849779"
  },
  {
    "text": "JavaScript is great for the front end it",
    "start": "849779",
    "end": "851639"
  },
  {
    "text": "just is what it is it's really fault",
    "start": "851639",
    "end": "853680"
  },
  {
    "text": "tolerant it it really allows you just to",
    "start": "853680",
    "end": "856560"
  },
  {
    "text": "be kind of loosey-goosey because you",
    "start": "856560",
    "end": "858000"
  },
  {
    "text": "know stuff just changes constantly and",
    "start": "858000",
    "end": "859860"
  },
  {
    "text": "it's okay with moving targets and you",
    "start": "859860",
    "end": "861959"
  },
  {
    "text": "know it just is what it is and to me",
    "start": "861959",
    "end": "863519"
  },
  {
    "text": "that makes sense",
    "start": "863519",
    "end": "865139"
  },
  {
    "text": "you know what I mean",
    "start": "865139",
    "end": "867980"
  },
  {
    "text": "uh but Zig doesn't have a direct",
    "start": "872459",
    "end": "874200"
  },
  {
    "text": "compatibility with C plus plus oh it",
    "start": "874200",
    "end": "875940"
  },
  {
    "text": "doesn't okay okay it only has direct",
    "start": "875940",
    "end": "877800"
  },
  {
    "text": "compatibility with c",
    "start": "877800",
    "end": "879720"
  },
  {
    "text": "hmm",
    "start": "879720",
    "end": "882360"
  },
  {
    "text": "yeah uh but think about the LinkedIn",
    "start": "882360",
    "end": "885420"
  },
  {
    "text": "Post Yeah Val's uh purpose is",
    "start": "885420",
    "end": "886980"
  },
  {
    "text": "distributed heterogeneous highly",
    "start": "886980",
    "end": "888420"
  },
  {
    "text": "parallel compute with ease",
    "start": "888420",
    "end": "891800"
  },
  {
    "text": "is it",
    "start": "892399",
    "end": "895579"
  },
  {
    "text": "fast by definition Val is compiled ahead",
    "start": "900839",
    "end": "903060"
  },
  {
    "text": "of time uh to machine code that relies",
    "start": "903060",
    "end": "905459"
  },
  {
    "text": "we just",
    "start": "905459",
    "end": "907260"
  },
  {
    "text": "we just call that compiled uh on a type",
    "start": "907260",
    "end": "909899"
  },
  {
    "text": "system to support In-Place mutations and",
    "start": "909899",
    "end": "911579"
  },
  {
    "text": "avoid unnecessary memory allocation Val",
    "start": "911579",
    "end": "913920"
  },
  {
    "text": "avoids hidden costs such as implicit",
    "start": "913920",
    "end": "915839"
  },
  {
    "text": "copies and therefore avoids heavy",
    "start": "915839",
    "end": "917880"
  },
  {
    "text": "dependence on Optimizer for basic",
    "start": "917880",
    "end": "920040"
  },
  {
    "text": "performance aside by default or safe by",
    "start": "920040",
    "end": "922260"
  },
  {
    "text": "default valves Foundation of mutable",
    "start": "922260",
    "end": "924180"
  },
  {
    "text": "value semantics ensures that ordinary",
    "start": "924180",
    "end": "925740"
  },
  {
    "text": "code is memory safe typesafe and data",
    "start": "925740",
    "end": "928139"
  },
  {
    "text": "Race Free by explicit audible opt-in",
    "start": "928139",
    "end": "931260"
  },
  {
    "text": "programmers can use unsafe constructs",
    "start": "931260",
    "end": "933480"
  },
  {
    "text": "for performance where necessary and can",
    "start": "933480",
    "end": "935639"
  },
  {
    "text": "build safe con constructs using unsafe",
    "start": "935639",
    "end": "937920"
  },
  {
    "text": "ones",
    "start": "937920",
    "end": "940339"
  },
  {
    "text": "okay so they're taking a different",
    "start": "940980",
    "end": "942540"
  },
  {
    "text": "approach apparently than um",
    "start": "942540",
    "end": "945000"
  },
  {
    "text": "then rust in this case okay Val uh",
    "start": "945000",
    "end": "947579"
  },
  {
    "text": "borrows heavily from Swift which has",
    "start": "947579",
    "end": "949740"
  },
  {
    "text": "demonstrated a user-friendly approach to",
    "start": "949740",
    "end": "951180"
  },
  {
    "text": "generic programming and deep support for",
    "start": "951180",
    "end": "952680"
  },
  {
    "text": "Value semantics valves a programming",
    "start": "952680",
    "end": "954240"
  },
  {
    "text": "model strengthens and extends this",
    "start": "954240",
    "end": "955500"
  },
  {
    "text": "support while de-emphasizing reference",
    "start": "955500",
    "end": "957180"
  },
  {
    "text": "semantics and avoiding complexity that",
    "start": "957180",
    "end": "958680"
  },
  {
    "text": "results in from trying to make it",
    "start": "958680",
    "end": "959940"
  },
  {
    "text": "statically safe uh EG memory reasons",
    "start": "959940",
    "end": "963180"
  },
  {
    "text": "lifetime annotations Etc",
    "start": "963180",
    "end": "966320"
  },
  {
    "text": "okay",
    "start": "967260",
    "end": "969860"
  },
  {
    "text": "interesting sounds great by why another",
    "start": "973980",
    "end": "976380"
  },
  {
    "text": "language",
    "start": "976380",
    "end": "978680"
  },
  {
    "text": "I'd say okay here we go what sets Val",
    "start": "983459",
    "end": "985260"
  },
  {
    "text": "apart in the current landscape is its",
    "start": "985260",
    "end": "987180"
  },
  {
    "text": "focus on mutable value okay so they",
    "start": "987180",
    "end": "988860"
  },
  {
    "text": "really love this termutable value",
    "start": "988860",
    "end": "990120"
  },
  {
    "text": "semantics for uh for the purpose of",
    "start": "990120",
    "end": "992279"
  },
  {
    "text": "writing a efficient generic code Val has",
    "start": "992279",
    "end": "994320"
  },
  {
    "text": "zero cost abstraction language that",
    "start": "994320",
    "end": "995940"
  },
  {
    "text": "fully acknowledges the physical",
    "start": "995940",
    "end": "997019"
  },
  {
    "text": "constraints of computer architecture yet",
    "start": "997019",
    "end": "998940"
  },
  {
    "text": "presents a user model that marries these",
    "start": "998940",
    "end": "1001160"
  },
  {
    "text": "constraints with the benefits of",
    "start": "1001160",
    "end": "1002300"
  },
  {
    "text": "value-oriented programming well the name",
    "start": "1002300",
    "end": "1004880"
  },
  {
    "text": "is the primogen",
    "start": "1004880",
    "end": "1006440"
  },
  {
    "text": "the name is I feel slightly embarrassed",
    "start": "1006440",
    "end": "1009500"
  },
  {
    "text": "that I really truly didn't understand",
    "start": "1009500",
    "end": "1011420"
  },
  {
    "text": "anything that was just said here",
    "start": "1011420",
    "end": "1015100"
  }
]