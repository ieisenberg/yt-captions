[
  {
    "text": "look at this we got ourselves another",
    "start": "160",
    "end": "3480"
  },
  {
    "text": "safer the search for an easier Safe",
    "start": "3480",
    "end": "5759"
  },
  {
    "text": "Systems programming language we got",
    "start": "5759",
    "end": "7200"
  },
  {
    "text": "something even better I've been involved",
    "start": "7200",
    "end": "8840"
  },
  {
    "text": "in the rust project in some form or",
    "start": "8840",
    "end": "10679"
  },
  {
    "text": "another since 2016 and it's language I'm",
    "start": "10679",
    "end": "13360"
  },
  {
    "text": "very comfortable using many Rose",
    "start": "13360",
    "end": "15240"
  },
  {
    "text": "programmers could say the same but if we",
    "start": "15240",
    "end": "17279"
  },
  {
    "text": "take a step back and we're honest with",
    "start": "17279",
    "end": "18680"
  },
  {
    "text": "ourselves we admit that the road to",
    "start": "18680",
    "end": "20560"
  },
  {
    "text": "getting to that level of comfort was",
    "start": "20560",
    "end": "23160"
  },
  {
    "text": "difficult yes yes it is I was talking",
    "start": "23160",
    "end": "26000"
  },
  {
    "text": "with someone last night uh one of the",
    "start": "26000",
    "end": "27800"
  },
  {
    "text": "maintainers one of the core maintainers",
    "start": "27800",
    "end": "29279"
  },
  {
    "text": "of Tokyo and I'm telling you I think",
    "start": "29279",
    "end": "32200"
  },
  {
    "text": "once you get to a certain level of of",
    "start": "32200",
    "end": "34320"
  },
  {
    "text": "rust knowledge it feels easy you just",
    "start": "34320",
    "end": "37960"
  },
  {
    "text": "forget how hard it is you know what I",
    "start": "37960",
    "end": "40640"
  },
  {
    "text": "mean you forget exactly how hard it is",
    "start": "40640",
    "end": "42600"
  },
  {
    "text": "to get to that level it's it's a lot",
    "start": "42600",
    "end": "44559"
  },
  {
    "text": "it's a lot of work uh this is a very",
    "start": "44559",
    "end": "46480"
  },
  {
    "text": "great statement uh I taught Russ",
    "start": "46480",
    "end": "48120"
  },
  {
    "text": "professionally for two years watching",
    "start": "48120",
    "end": "49399"
  },
  {
    "text": "the faces of people trying to learn Russ",
    "start": "49399",
    "end": "50960"
  },
  {
    "text": "for the first time remind me just how",
    "start": "50960",
    "end": "52520"
  },
  {
    "text": "hard this language is to learn after two",
    "start": "52520",
    "end": "54840"
  },
  {
    "text": "years of that I want to answer a",
    "start": "54840",
    "end": "56120"
  },
  {
    "text": "question I wasn't really or entirely",
    "start": "56120",
    "end": "58079"
  },
  {
    "text": "sure had an answer is it possible to",
    "start": "58079",
    "end": "60480"
  },
  {
    "text": "make an easy to use easy to learn easy",
    "start": "60480",
    "end": "62559"
  },
  {
    "text": "to teach Safe Systems language could I",
    "start": "62559",
    "end": "65600"
  },
  {
    "text": "put my career working on programming",
    "start": "65600",
    "end": "67200"
  },
  {
    "text": "languages typescript rust Nelle Etc to",
    "start": "67200",
    "end": "70119"
  },
  {
    "text": "use and find an easy solution changing",
    "start": "70119",
    "end": "72439"
  },
  {
    "text": "how we think of memory in Rust we can",
    "start": "72439",
    "end": "73920"
  },
  {
    "text": "think of each piece of memory as having",
    "start": "73920",
    "end": "75640"
  },
  {
    "text": "its own lifetime each of these lifetimes",
    "start": "75640",
    "end": "77720"
  },
  {
    "text": "must be tracked sometimes leading to",
    "start": "77720",
    "end": "79119"
  },
  {
    "text": "rather complex code complex error",
    "start": "79119",
    "end": "80600"
  },
  {
    "text": "messages Andor complex mental mode",
    "start": "80600",
    "end": "82680"
  },
  {
    "text": "models of what is happening the",
    "start": "82680",
    "end": "84200"
  },
  {
    "text": "complexity of course comes with the",
    "start": "84200",
    "end": "85560"
  },
  {
    "text": "benefit of being highly precise about",
    "start": "85560",
    "end": "87240"
  },
  {
    "text": "each and every piece of memory and its",
    "start": "87240",
    "end": "89079"
  },
  {
    "text": "reclamation using rust struct node data",
    "start": "89079",
    "end": "93600"
  },
  {
    "text": "data data uh uh uh you got to have some",
    "start": "93600",
    "end": "96000"
  },
  {
    "text": "lifetimes you technically don't need",
    "start": "96000",
    "end": "97479"
  },
  {
    "text": "three lifetimes you could have just had",
    "start": "97479",
    "end": "98920"
  },
  {
    "text": "one rust developers will spot right away",
    "start": "98920",
    "end": "100640"
  },
  {
    "text": "that this is an incomplete example we",
    "start": "100640",
    "end": "102560"
  },
  {
    "text": "need two more things lifetime parameters",
    "start": "102560",
    "end": "104360"
  },
  {
    "text": "and lifetime annotations so adding those",
    "start": "104360",
    "end": "106119"
  },
  {
    "text": "we got that the concept uh account for",
    "start": "106119",
    "end": "108399"
  },
  {
    "text": "this example ends up being pretty",
    "start": "108399",
    "end": "109680"
  },
  {
    "text": "substantial counting them off we get",
    "start": "109680",
    "end": "111640"
  },
  {
    "text": "lifetimes lifetime annotations lifetime",
    "start": "111640",
    "end": "113759"
  },
  {
    "text": "parameters ownership and borrowing",
    "start": "113759",
    "end": "115280"
  },
  {
    "text": "generics so this is generally like my my",
    "start": "115280",
    "end": "117680"
  },
  {
    "text": "thing that I hate the most about rust is",
    "start": "117680",
    "end": "120159"
  },
  {
    "text": "lifetimes and the reason why I hate this",
    "start": "120159",
    "end": "121920"
  },
  {
    "text": "isn't the fact that you have to specify",
    "start": "121920",
    "end": "123560"
  },
  {
    "text": "lifetimes the the act of specifying a",
    "start": "123560",
    "end": "125520"
  },
  {
    "text": "lifetime does not bother me what bothers",
    "start": "125520",
    "end": "128080"
  },
  {
    "text": "me is that lifetimes are a part of the",
    "start": "128080",
    "end": "130399"
  },
  {
    "text": "type which means that if you go from not",
    "start": "130399",
    "end": "134720"
  },
  {
    "text": "using lifetimes to using lifetimes you",
    "start": "134720",
    "end": "137120"
  },
  {
    "text": "now have to take every method that uses",
    "start": "137120",
    "end": "139599"
  },
  {
    "text": "these and you start lifetim lifetimes",
    "start": "139599",
    "end": "142239"
  },
  {
    "text": "leak everywhere the second you go from",
    "start": "142239",
    "end": "144519"
  },
  {
    "text": "nothing to something everything has to",
    "start": "144519",
    "end": "146760"
  },
  {
    "text": "have it all at once it gets so dang",
    "start": "146760",
    "end": "149120"
  },
  {
    "text": "cumbersome to where with it's like JSA",
    "start": "149120",
    "end": "151160"
  },
  {
    "text": "sync functions like it except for with",
    "start": "151160",
    "end": "153400"
  },
  {
    "text": "JSA sync functions they're not nearly as",
    "start": "153400",
    "end": "156480"
  },
  {
    "text": "as annoying yes it's like a red it's a",
    "start": "156480",
    "end": "158160"
  },
  {
    "text": "red blue function except for the only",
    "start": "158160",
    "end": "159879"
  },
  {
    "text": "difference is that you can color your",
    "start": "159879",
    "end": "161200"
  },
  {
    "text": "functions now with async and you can",
    "start": "161200",
    "end": "163120"
  },
  {
    "text": "color your functions with lifetimes so",
    "start": "163120",
    "end": "165599"
  },
  {
    "text": "you get like two right you get two",
    "start": "165599",
    "end": "168840"
  },
  {
    "text": "different ways you can color which I",
    "start": "168840",
    "end": "170599"
  },
  {
    "text": "think is very very frustrating when it",
    "start": "170599",
    "end": "172640"
  },
  {
    "text": "comes to rust or getting good at rust uh",
    "start": "172640",
    "end": "174840"
  },
  {
    "text": "when I showed the examples like this to",
    "start": "174840",
    "end": "176159"
  },
  {
    "text": "my class when I taught rust I had to",
    "start": "176159",
    "end": "177800"
  },
  {
    "text": "walk them through each of those Concepts",
    "start": "177800",
    "end": "179440"
  },
  {
    "text": "first before I could show the full",
    "start": "179440",
    "end": "181200"
  },
  {
    "text": "example the question then is can we make",
    "start": "181200",
    "end": "183360"
  },
  {
    "text": "this easier well hopefully uh I believe",
    "start": "183360",
    "end": "186080"
  },
  {
    "text": "they call that garbage collection uh",
    "start": "186080",
    "end": "188040"
  },
  {
    "text": "what if memory was grouped oh are we",
    "start": "188040",
    "end": "189840"
  },
  {
    "text": "talking about Arenas here uh what if",
    "start": "189840",
    "end": "191519"
  },
  {
    "text": "instead of having to track every piece",
    "start": "191519",
    "end": "192920"
  },
  {
    "text": "of memory's lifetime specifically we let",
    "start": "192920",
    "end": "194720"
  },
  {
    "text": "groups of related allocations share a",
    "start": "194720",
    "end": "197560"
  },
  {
    "text": "lifetime effectively this would mean",
    "start": "197560",
    "end": "199760"
  },
  {
    "text": "that a data structure like a linked list",
    "start": "199760",
    "end": "201480"
  },
  {
    "text": "would have a pointer pointing to the",
    "start": "201480",
    "end": "202840"
  },
  {
    "text": "head which has a lifetime and then every",
    "start": "202840",
    "end": "205400"
  },
  {
    "text": "node in the list you can reach from that",
    "start": "205400",
    "end": "208000"
  },
  {
    "text": "head has the same lifetime",
    "start": "208000",
    "end": "210519"
  },
  {
    "text": "I would assume the drawback is that you",
    "start": "210519",
    "end": "212000"
  },
  {
    "text": "can't collect memory until you collect",
    "start": "212000",
    "end": "213480"
  },
  {
    "text": "the list and so theoretically I would",
    "start": "213480",
    "end": "215959"
  },
  {
    "text": "assume that at least and if you just",
    "start": "215959",
    "end": "217239"
  },
  {
    "text": "keep on adding and removing and you have",
    "start": "217239",
    "end": "218640"
  },
  {
    "text": "a long running uh linked list it would",
    "start": "218640",
    "end": "220799"
  },
  {
    "text": "cause effectively infinite memory growth",
    "start": "220799",
    "end": "223959"
  },
  {
    "text": "am I wrong on that it doesn't sound",
    "start": "223959",
    "end": "225560"
  },
  {
    "text": "complicated it just sounds it sounds",
    "start": "225560",
    "end": "228080"
  },
  {
    "text": "problematic isn't that just GC no GC is",
    "start": "228080",
    "end": "230000"
  },
  {
    "text": "different because when you when you have",
    "start": "230000",
    "end": "231120"
  },
  {
    "text": "no more pointers left to uh GC it it",
    "start": "231120",
    "end": "234360"
  },
  {
    "text": "goes away you know what I mean it",
    "start": "234360",
    "end": "236239"
  },
  {
    "text": "actually just completely goes away it",
    "start": "236239",
    "end": "238120"
  },
  {
    "text": "says as long as it's reachable",
    "start": "238120",
    "end": "240400"
  },
  {
    "text": "oh did I miss that effectively this",
    "start": "240400",
    "end": "242680"
  },
  {
    "text": "would mean that a data structure like a",
    "start": "242680",
    "end": "244159"
  },
  {
    "text": "linked list would have pointers pointing",
    "start": "244159",
    "end": "245319"
  },
  {
    "text": "to the Head objects let's see and then",
    "start": "245319",
    "end": "247000"
  },
  {
    "text": "every Noe in the list you can reach from",
    "start": "247000",
    "end": "248640"
  },
  {
    "text": "the head has the same lifetime oh so",
    "start": "248640",
    "end": "252040"
  },
  {
    "text": "they keep track of okay so it's like an",
    "start": "252040",
    "end": "253439"
  },
  {
    "text": "RC they're almost rcing it then isn't",
    "start": "253439",
    "end": "255439"
  },
  {
    "text": "that just an RC uh there are some",
    "start": "255439",
    "end": "257440"
  },
  {
    "text": "benefits to this approach as well as",
    "start": "257440",
    "end": "258600"
  },
  {
    "text": "some drawbacks let's take look at the",
    "start": "258600",
    "end": "259959"
  },
  {
    "text": "benefits I mean that sounds like an RC",
    "start": "259959",
    "end": "262240"
  },
  {
    "text": "because if you remove a node from the",
    "start": "262240",
    "end": "264360"
  },
  {
    "text": "list I guess I can clean it up if yeah",
    "start": "264360",
    "end": "268479"
  },
  {
    "text": "yeah yeah",
    "start": "268479",
    "end": "270240"
  },
  {
    "text": "I'm curious about it just sounds like an",
    "start": "270240",
    "end": "271440"
  },
  {
    "text": "RC benefits of grouped allocations",
    "start": "271440",
    "end": "273160"
  },
  {
    "text": "exploring uh grouped allocations we",
    "start": "273160",
    "end": "274680"
  },
  {
    "text": "notice some inter uh immediate benefits",
    "start": "274680",
    "end": "276919"
  },
  {
    "text": "the first is that we could treat all",
    "start": "276919",
    "end": "278600"
  },
  {
    "text": "userdefined values as pointers and these",
    "start": "278600",
    "end": "280400"
  },
  {
    "text": "pointers could represent their own",
    "start": "280400",
    "end": "281800"
  },
  {
    "text": "lifetimes without needing lifetime",
    "start": "281800",
    "end": "283720"
  },
  {
    "text": "parameters this makes the code feel a",
    "start": "283720",
    "end": "285400"
  },
  {
    "text": "bit lighter node node okay nice the",
    "start": "285400",
    "end": "289520"
  },
  {
    "text": "postfix uh Nolly operator crazy but okay",
    "start": "289520",
    "end": "292919"
  },
  {
    "text": "I like it none okay since all users data",
    "start": "292919",
    "end": "296039"
  },
  {
    "text": "uh is pointer we can use the name of the",
    "start": "296039",
    "end": "298000"
  },
  {
    "text": "type to mean pointer to this structure",
    "start": "298000",
    "end": "299759"
  },
  {
    "text": "of data the next thing we notice is that",
    "start": "299759",
    "end": "302120"
  },
  {
    "text": "both lifetimes and inference for",
    "start": "302120",
    "end": "303880"
  },
  {
    "text": "lifetimes become significantly simpler",
    "start": "303880",
    "end": "306039"
  },
  {
    "text": "Let's Take A variation of the example",
    "start": "306039",
    "end": "308199"
  },
  {
    "text": "all right do this new node we can infer",
    "start": "308199",
    "end": "310520"
  },
  {
    "text": "that the allocation that creates new",
    "start": "310520",
    "end": "311840"
  },
  {
    "text": "node has a lifetime let's see and what",
    "start": "311840",
    "end": "314199"
  },
  {
    "text": "it is because this allocation never",
    "start": "314199",
    "end": "316120"
  },
  {
    "text": "escapes the function that is it never",
    "start": "316120",
    "end": "317680"
  },
  {
    "text": "leaves the function to any way then it",
    "start": "317680",
    "end": "319560"
  },
  {
    "text": "can uh then it can call its lifetime",
    "start": "319560",
    "end": "321240"
  },
  {
    "text": "local it almost sounds like we're",
    "start": "321240",
    "end": "322840"
  },
  {
    "text": "getting like oam cuz o camel o camel has",
    "start": "322840",
    "end": "325960"
  },
  {
    "text": "uh lifetimes attached to functions not",
    "start": "325960",
    "end": "328160"
  },
  {
    "text": "attached to uh type",
    "start": "328160",
    "end": "330759"
  },
  {
    "text": "which is really interesting which allows",
    "start": "330759",
    "end": "332240"
  },
  {
    "text": "for some really interesting stuff and a",
    "start": "332240",
    "end": "334240"
  },
  {
    "text": "lot simpler as we as we'll find out each",
    "start": "334240",
    "end": "336280"
  },
  {
    "text": "of these lifetime possibilities is a",
    "start": "336280",
    "end": "337800"
  },
  {
    "text": "readable name that we can show the user",
    "start": "337800",
    "end": "339880"
  },
  {
    "text": "in error messages it also makes this",
    "start": "339880",
    "end": "341639"
  },
  {
    "text": "significantly easier to teach let's take",
    "start": "341639",
    "end": "343360"
  },
  {
    "text": "uh let's look at another example all",
    "start": "343360",
    "end": "345160"
  },
  {
    "text": "right so we have stats which is just a",
    "start": "345160",
    "end": "346919"
  },
  {
    "text": "struct an employee which is okay which",
    "start": "346919",
    "end": "349120"
  },
  {
    "text": "is uh which has a stats object set stats",
    "start": "349120",
    "end": "352000"
  },
  {
    "text": "new stats okay we create an employee we",
    "start": "352000",
    "end": "356000"
  },
  {
    "text": "create stats we set a new stats and then",
    "start": "356000",
    "end": "358160"
  },
  {
    "text": "we grab a stats age uh this is a bit",
    "start": "358160",
    "end": "360440"
  },
  {
    "text": "longer of an example but let's focus on",
    "start": "360440",
    "end": "361880"
  },
  {
    "text": "this function setting a new stats okay",
    "start": "361880",
    "end": "364080"
  },
  {
    "text": "what is the lifetime of new stats",
    "start": "364080",
    "end": "365560"
  },
  {
    "text": "allocation in this example we see uh we",
    "start": "365560",
    "end": "368120"
  },
  {
    "text": "do see the new pointer escape the",
    "start": "368120",
    "end": "370000"
  },
  {
    "text": "function via a parameter we can also",
    "start": "370000",
    "end": "372080"
  },
  {
    "text": "give the uh give this a readable",
    "start": "372080",
    "end": "373720"
  },
  {
    "text": "lifetime param employee in all we have",
    "start": "373720",
    "end": "376400"
  },
  {
    "text": "three lifetimes and an allocation can",
    "start": "376400",
    "end": "377840"
  },
  {
    "text": "have local pram X and return okay I",
    "start": "377840",
    "end": "381160"
  },
  {
    "text": "think I see this I I'm trying to",
    "start": "381160",
    "end": "383360"
  },
  {
    "text": "understand this one so is it saying that",
    "start": "383360",
    "end": "385479"
  },
  {
    "text": "this Lifetime right here is that you",
    "start": "385479",
    "end": "388880"
  },
  {
    "text": "have a you have a lifetime that's local",
    "start": "388880",
    "end": "390479"
  },
  {
    "text": "to this function which has a lifetime",
    "start": "390479",
    "end": "392680"
  },
  {
    "text": "that's to this parameter which has a",
    "start": "392680",
    "end": "395800"
  },
  {
    "text": "lifetime to any sort of return and this",
    "start": "395800",
    "end": "398000"
  },
  {
    "text": "is like an implicit return because it's",
    "start": "398000",
    "end": "399520"
  },
  {
    "text": "being set on the parameter so it has the",
    "start": "399520",
    "end": "401199"
  },
  {
    "text": "parameter lifetime which has the local",
    "start": "401199",
    "end": "402720"
  },
  {
    "text": "lifetime of this function is that what",
    "start": "402720",
    "end": "404400"
  },
  {
    "text": "it's saying yeah is that am I I think",
    "start": "404400",
    "end": "406800"
  },
  {
    "text": "I'm getting that I think I'm getting",
    "start": "406800",
    "end": "407960"
  },
  {
    "text": "that correct right it's everything's a",
    "start": "407960",
    "end": "409919"
  },
  {
    "text": "pointer right so everything's it's not",
    "start": "409919",
    "end": "411639"
  },
  {
    "text": "pass this is not passed by copy this is",
    "start": "411639",
    "end": "413639"
  },
  {
    "text": "passed by pointer right pass by",
    "start": "413639",
    "end": "415080"
  },
  {
    "text": "reference and so this is a pointer which",
    "start": "415080",
    "end": "417080"
  },
  {
    "text": "means that this thing now lives to this",
    "start": "417080",
    "end": "418840"
  },
  {
    "text": "this containing it's kind of interesting",
    "start": "418840",
    "end": "420879"
  },
  {
    "text": "okay I think I'm following this this is",
    "start": "420879",
    "end": "422199"
  },
  {
    "text": "pretty interesting this is actually a",
    "start": "422199",
    "end": "423440"
  },
  {
    "text": "pretty interesting idea another big",
    "start": "423440",
    "end": "424919"
  },
  {
    "text": "advantage of grouping our allocations",
    "start": "424919",
    "end": "426479"
  },
  {
    "text": "that we no longer have to worry about",
    "start": "426479",
    "end": "427840"
  },
  {
    "text": "drop order uh this means that we can",
    "start": "427840",
    "end": "429639"
  },
  {
    "text": "think of the whole thing as dropping all",
    "start": "429639",
    "end": "431240"
  },
  {
    "text": "at once for large structures this can",
    "start": "431240",
    "end": "432759"
  },
  {
    "text": "speed up over languages that require",
    "start": "432759",
    "end": "434319"
  },
  {
    "text": "drop order additionally we get another",
    "start": "434319",
    "end": "436000"
  },
  {
    "text": "major benefit we can create arbitrary",
    "start": "436000",
    "end": "437840"
  },
  {
    "text": "data structures yeah there you go so we",
    "start": "437840",
    "end": "440240"
  },
  {
    "text": "have a circular link list and just like",
    "start": "440240",
    "end": "442400"
  },
  {
    "text": "that we've made a circular link list",
    "start": "442400",
    "end": "443720"
  },
  {
    "text": "creating a similar example in Rust is",
    "start": "443720",
    "end": "445400"
  },
  {
    "text": "certainly more of a challenge ah",
    "start": "445400",
    "end": "447639"
  },
  {
    "text": "certainly certainly more of a challenge",
    "start": "447639",
    "end": "449280"
  },
  {
    "text": "but something fish is going on here to",
    "start": "449280",
    "end": "451120"
  },
  {
    "text": "make the above work we started uh we are",
    "start": "451120",
    "end": "453240"
  },
  {
    "text": "using shared mutable pointers this is",
    "start": "453240",
    "end": "455440"
  },
  {
    "text": "explicitly forbidden in Rust why is that",
    "start": "455440",
    "end": "457479"
  },
  {
    "text": "okay",
    "start": "457479",
    "end": "459160"
  },
  {
    "text": "here okay okay okay okay this is",
    "start": "459160",
    "end": "464400"
  },
  {
    "text": "exciting Oh weird instead of doing let",
    "start": "464400",
    "end": "467159"
  },
  {
    "text": "you do mute oh is that mean this thing's",
    "start": "467159",
    "end": "470360"
  },
  {
    "text": "this thing has a lifetime of",
    "start": "470360",
    "end": "472280"
  },
  {
    "text": "mutability so weird syntax that's a",
    "start": "472280",
    "end": "474639"
  },
  {
    "text": "weird syntax all right rust disallows",
    "start": "474639",
    "end": "477879"
  },
  {
    "text": "having holding two mutable referen to",
    "start": "477879",
    "end": "479840"
  },
  {
    "text": "the same memory location for good",
    "start": "479840",
    "end": "481199"
  },
  {
    "text": "reasons well multiple reasons actually",
    "start": "481199",
    "end": "482879"
  },
  {
    "text": "first having to having two copies of a",
    "start": "482879",
    "end": "484840"
  },
  {
    "text": "mutable pointer where two separate",
    "start": "484840",
    "end": "486560"
  },
  {
    "text": "threads each can hold a copy means that",
    "start": "486560",
    "end": "488720"
  },
  {
    "text": "the possibility for eras condition yes",
    "start": "488720",
    "end": "490479"
  },
  {
    "text": "this can leave us with incoherent data",
    "start": "490479",
    "end": "492440"
  },
  {
    "text": "that's difficult to debug second if we",
    "start": "492440",
    "end": "495039"
  },
  {
    "text": "let's see if these two multiple pointers",
    "start": "495039",
    "end": "496759"
  },
  {
    "text": "are limited to the same thread we get",
    "start": "496759",
    "end": "499639"
  },
  {
    "text": "what we might call Spooky action at a",
    "start": "499639",
    "end": "501800"
  },
  {
    "text": "distance the modification of one pointer",
    "start": "501800",
    "end": "504080"
  },
  {
    "text": "is then visible to the holder of the",
    "start": "504080",
    "end": "505720"
  },
  {
    "text": "other pointer which might be far away",
    "start": "505720",
    "end": "507319"
  },
  {
    "text": "from the source of mutation I'm less",
    "start": "507319",
    "end": "509479"
  },
  {
    "text": "concerned about this one honestly like",
    "start": "509479",
    "end": "511479"
  },
  {
    "text": "this one type one in the chat if you",
    "start": "511479",
    "end": "513919"
  },
  {
    "text": "like or dislike that one one in the chat",
    "start": "513919",
    "end": "516479"
  },
  {
    "text": "like I don't really care about that one",
    "start": "516479",
    "end": "518320"
  },
  {
    "text": "honestly I don't care that a that I find",
    "start": "518320",
    "end": "522000"
  },
  {
    "text": "that to be one of the things about Russ",
    "start": "522000",
    "end": "523320"
  },
  {
    "text": "that aren't like I don't consider like",
    "start": "523320",
    "end": "525600"
  },
  {
    "text": "fantastic one good for a hacker it's",
    "start": "525600",
    "end": "528240"
  },
  {
    "text": "fine I mean I just don't think it's a",
    "start": "528240",
    "end": "529959"
  },
  {
    "text": "big deal I think people make it all ones",
    "start": "529959",
    "end": "532360"
  },
  {
    "text": "yeah it's pretty bad you think it's",
    "start": "532360",
    "end": "534320"
  },
  {
    "text": "pretty bad why is it pretty",
    "start": "534320",
    "end": "536880"
  },
  {
    "text": "bad to have two things be able to mut",
    "start": "536880",
    "end": "540560"
  },
  {
    "text": "mutate something no I was joking sorry",
    "start": "540560",
    "end": "542839"
  },
  {
    "text": "oh",
    "start": "542839",
    "end": "545079"
  },
  {
    "text": "okay is this my life now every single",
    "start": "545680",
    "end": "548200"
  },
  {
    "text": "time someone says something I want to",
    "start": "548200",
    "end": "549519"
  },
  {
    "text": "hear something interesting but instead",
    "start": "549519",
    "end": "550920"
  },
  {
    "text": "it's like no there's no race conditions",
    "start": "550920",
    "end": "553320"
  },
  {
    "text": "that's not a race condition that only",
    "start": "553320",
    "end": "555240"
  },
  {
    "text": "exist when it crosses threads this race",
    "start": "555240",
    "end": "558160"
  },
  {
    "text": "conditions only only exist on uh on",
    "start": "558160",
    "end": "562120"
  },
  {
    "text": "separate threads having writable access",
    "start": "562120",
    "end": "564959"
  },
  {
    "text": "which is completely different that's",
    "start": "564959",
    "end": "566760"
  },
  {
    "text": "completely different I think this this",
    "start": "566760",
    "end": "568040"
  },
  {
    "text": "one is fine right if you have shared",
    "start": "568040",
    "end": "570839"
  },
  {
    "text": "shared multiple pointers in the same",
    "start": "570839",
    "end": "572480"
  },
  {
    "text": "thread for us reasonable used shared",
    "start": "572480",
    "end": "574680"
  },
  {
    "text": "multiple mutable pointers let's see for",
    "start": "574680",
    "end": "576640"
  },
  {
    "text": "for us to reasonably use shared uh",
    "start": "576640",
    "end": "578959"
  },
  {
    "text": "mutable pointers we need it to tame both",
    "start": "578959",
    "end": "580839"
  },
  {
    "text": "of these the first issue the race",
    "start": "580839",
    "end": "582480"
  },
  {
    "text": "condition is easy enough yes I think",
    "start": "582480",
    "end": "584760"
  },
  {
    "text": "Russ does a great job on this one you",
    "start": "584760",
    "end": "586320"
  },
  {
    "text": "can't share between threads without like",
    "start": "586320",
    "end": "588200"
  },
  {
    "text": "an arc mutex or something you just",
    "start": "588200",
    "end": "589640"
  },
  {
    "text": "prevent yourself from accidentally",
    "start": "589640",
    "end": "591000"
  },
  {
    "text": "shooting yourself in the foot uh mutable",
    "start": "591000",
    "end": "593240"
  },
  {
    "text": "pointers between threads this limits",
    "start": "593240",
    "end": "595000"
  },
  {
    "text": "them to a single thread yep the second",
    "start": "595000",
    "end": "596760"
  },
  {
    "text": "uh issue is decidedly harder there have",
    "start": "596760",
    "end": "599000"
  },
  {
    "text": "been many attempts at ways of handling",
    "start": "599000",
    "end": "601040"
  },
  {
    "text": "this through rules enforced by the type",
    "start": "601040",
    "end": "602920"
  },
  {
    "text": "system in June we were trying something",
    "start": "602920",
    "end": "604600"
  },
  {
    "text": "a bit different we let developers use",
    "start": "604600",
    "end": "606040"
  },
  {
    "text": "shared mutable pointers but then offer a",
    "start": "606040",
    "end": "608120"
  },
  {
    "text": "carrot to opt in to restrict uh",
    "start": "608120",
    "end": "610640"
  },
  {
    "text": "restrictions around around using them oh",
    "start": "610640",
    "end": "613519"
  },
  {
    "text": "I like this oh I like this a lot that's",
    "start": "613519",
    "end": "618160"
  },
  {
    "text": "great I would love to see more of this",
    "start": "618160",
    "end": "620240"
  },
  {
    "text": "where it's um where there's more opt in",
    "start": "620240",
    "end": "622680"
  },
  {
    "text": "to safety as opposed to enforced safety",
    "start": "622680",
    "end": "626519"
  },
  {
    "text": "that's one thing that I think makes Zig",
    "start": "626519",
    "end": "627800"
  },
  {
    "text": "so interesting which is is that you can",
    "start": "627800",
    "end": "630640"
  },
  {
    "text": "you can not have to deal with options if",
    "start": "630640",
    "end": "634200"
  },
  {
    "text": "you don't want to deal with options you",
    "start": "634200",
    "end": "636160"
  },
  {
    "text": "can use options but you don't have to I",
    "start": "636160",
    "end": "639120"
  },
  {
    "text": "like that so you can do it but it's",
    "start": "639120",
    "end": "641000"
  },
  {
    "text": "incentivized not to well it's not that",
    "start": "641000",
    "end": "643079"
  },
  {
    "text": "it's incentivized or not incentivized",
    "start": "643079",
    "end": "645399"
  },
  {
    "text": "it's you simply get to make the choice",
    "start": "645399",
    "end": "647800"
  },
  {
    "text": "unsafe by default I think I think unsafe",
    "start": "647800",
    "end": "650040"
  },
  {
    "text": "by default is better I mean it's the",
    "start": "650040",
    "end": "651880"
  },
  {
    "text": "same principle behind cona ultimately",
    "start": "651880",
    "end": "653639"
  },
  {
    "text": "right and we like cons we do like cons",
    "start": "653639",
    "end": "655360"
  },
  {
    "text": "sharing mutable State across threads is",
    "start": "655360",
    "end": "657240"
  },
  {
    "text": "the path to hell yeah this this I'm fine",
    "start": "657240",
    "end": "659560"
  },
  {
    "text": "with like hey we don't we don't allow",
    "start": "659560",
    "end": "661360"
  },
  {
    "text": "you to share a mutable State across",
    "start": "661360",
    "end": "662880"
  },
  {
    "text": "threads I think that that's more fine",
    "start": "662880",
    "end": "664959"
  },
  {
    "text": "you can share mutex as across threads I",
    "start": "664959",
    "end": "666800"
  },
  {
    "text": "think that that is honestly more more",
    "start": "666800",
    "end": "668120"
  },
  {
    "text": "fine the problem with a shared mutable",
    "start": "668120",
    "end": "670600"
  },
  {
    "text": "pointers is when you hold on to a",
    "start": "670600",
    "end": "672320"
  },
  {
    "text": "pointer to a ve element and then uh",
    "start": "672320",
    "end": "674160"
  },
  {
    "text": "reallocate then you have essentially to",
    "start": "674160",
    "end": "676279"
  },
  {
    "text": "uh a use after free no that's not it at",
    "start": "676279",
    "end": "679040"
  },
  {
    "text": "all that's not it at all because you",
    "start": "679040",
    "end": "681000"
  },
  {
    "text": "have this you have a VC and then you",
    "start": "681000",
    "end": "682600"
  },
  {
    "text": "have a VC two and they both are stack",
    "start": "682600",
    "end": "685760"
  },
  {
    "text": "pointers right they both have to have",
    "start": "685760",
    "end": "688200"
  },
  {
    "text": "something that you can point to and",
    "start": "688200",
    "end": "689920"
  },
  {
    "text": "that's I mean you just have to solve",
    "start": "689920",
    "end": "691399"
  },
  {
    "text": "that problem I'm not exactly sure how to",
    "start": "691399",
    "end": "692720"
  },
  {
    "text": "solve it but they need to both have",
    "start": "692720",
    "end": "694639"
  },
  {
    "text": "pointers to the same locations you just",
    "start": "694639",
    "end": "696839"
  },
  {
    "text": "have to pass this little thing by",
    "start": "696839",
    "end": "698519"
  },
  {
    "text": "reference right whatever this thing that",
    "start": "698519",
    "end": "700560"
  },
  {
    "text": "points to that the fat pointer has to be",
    "start": "700560",
    "end": "702240"
  },
  {
    "text": "passed by reference right and that's",
    "start": "702240",
    "end": "704160"
  },
  {
    "text": "that you don't have to worry about it",
    "start": "704160",
    "end": "705399"
  },
  {
    "text": "whatever that is right I I'm not",
    "start": "705399",
    "end": "706880"
  },
  {
    "text": "convinced that that's a big problem uh",
    "start": "706880",
    "end": "708440"
  },
  {
    "text": "sometimes for data parallelism it's nice",
    "start": "708440",
    "end": "709720"
  },
  {
    "text": "to have shared mutable data across",
    "start": "709720",
    "end": "711079"
  },
  {
    "text": "threats this is also true sometimes you",
    "start": "711079",
    "end": "712639"
  },
  {
    "text": "can just have shared mutable data across",
    "start": "712639",
    "end": "714160"
  },
  {
    "text": "threads it's it's fine it's fine I know",
    "start": "714160",
    "end": "716600"
  },
  {
    "text": "that you can't do everything and then I",
    "start": "716600",
    "end": "718160"
  },
  {
    "text": "I obviously oversimplify that answer but",
    "start": "718160",
    "end": "720320"
  },
  {
    "text": "you get the idea you don't have to have",
    "start": "720320",
    "end": "721920"
  },
  {
    "text": "it all right in traditional",
    "start": "721920",
    "end": "723000"
  },
  {
    "text": "encapsulation programers uh make a kind",
    "start": "723000",
    "end": "725240"
  },
  {
    "text": "of best effort to hide implementation",
    "start": "725240",
    "end": "726760"
  },
  {
    "text": "details from the world around them",
    "start": "726760",
    "end": "728000"
  },
  {
    "text": "keeping private State private grants the",
    "start": "728000",
    "end": "730040"
  },
  {
    "text": "benefit of better code reuse ease of",
    "start": "730040",
    "end": "731959"
  },
  {
    "text": "updating implementation details and more",
    "start": "731959",
    "end": "733839"
  },
  {
    "text": "but as often is the case if the kind of",
    "start": "733839",
    "end": "736160"
  },
  {
    "text": "rule isn't enforced over time apis get",
    "start": "736160",
    "end": "738240"
  },
  {
    "text": "designed where internal implementation",
    "start": "738240",
    "end": "739800"
  },
  {
    "text": "details leak out there was that thing uh",
    "start": "739800",
    "end": "742399"
  },
  {
    "text": "what is it harms her herens Hein herens",
    "start": "742399",
    "end": "746560"
  },
  {
    "text": "law which is internal details get leaked",
    "start": "746560",
    "end": "748320"
  },
  {
    "text": "out of any sufficient old API as it is",
    "start": "748320",
    "end": "750279"
  },
  {
    "text": "and people rely on very specific quirky",
    "start": "750279",
    "end": "752760"
  },
  {
    "text": "Behavior no matter what you do uh",
    "start": "752760",
    "end": "755279"
  },
  {
    "text": "something uh very interesting happens if",
    "start": "755279",
    "end": "757160"
  },
  {
    "text": "we don't allow this to happen if an",
    "start": "757160",
    "end": "758920"
  },
  {
    "text": "encapsulation can be checked by the",
    "start": "758920",
    "end": "760399"
  },
  {
    "text": "compiler then the compiler enforces that",
    "start": "760399",
    "end": "762040"
  },
  {
    "text": "no private details leak we have what you",
    "start": "762040",
    "end": "763920"
  },
  {
    "text": "might call full encapsulation these kind",
    "start": "763920",
    "end": "765600"
  },
  {
    "text": "of encapsulator encapsulations wouldn't",
    "start": "765600",
    "end": "767560"
  },
  {
    "text": "allow any aling of pointers into them",
    "start": "767560",
    "end": "769720"
  },
  {
    "text": "they have their internal pointers fully",
    "start": "769720",
    "end": "771320"
  },
  {
    "text": "isolated from the rest of the program",
    "start": "771320",
    "end": "772920"
  },
  {
    "text": "once we have this the new capabilities",
    "start": "772920",
    "end": "774639"
  },
  {
    "text": "start opening up we can fence off shared",
    "start": "774639",
    "end": "776440"
  },
  {
    "text": "mutable pointers making it possible to",
    "start": "776440",
    "end": "778399"
  },
  {
    "text": "create single owner",
    "start": "778399",
    "end": "779800"
  },
  {
    "text": "uh encapsulation that can be sent safely",
    "start": "779800",
    "end": "781480"
  },
  {
    "text": "between",
    "start": "781480",
    "end": "783760"
  },
  {
    "text": "threads really I'm curious how that",
    "start": "784000",
    "end": "786600"
  },
  {
    "text": "works we can keep uh we can we can lean",
    "start": "786600",
    "end": "789040"
  },
  {
    "text": "uh people in the right direction of",
    "start": "789040",
    "end": "790600"
  },
  {
    "text": "cleaner API design now that we have a",
    "start": "790600",
    "end": "792320"
  },
  {
    "text": "truly let's see now that we have truly",
    "start": "792320",
    "end": "794320"
  },
  {
    "text": "oh my goodness now that we have a way to",
    "start": "794320",
    "end": "795680"
  },
  {
    "text": "truly keep private Implement",
    "start": "795680",
    "end": "797680"
  },
  {
    "text": "implementation details private we can",
    "start": "797680",
    "end": "799399"
  },
  {
    "text": "handle some drawbacks of grouped",
    "start": "799399",
    "end": "801399"
  },
  {
    "text": "allocations all right I I don't really",
    "start": "801399",
    "end": "803480"
  },
  {
    "text": "understand this",
    "start": "803480",
    "end": "804680"
  },
  {
    "text": "part I'm a little bit confused on this",
    "start": "804680",
    "end": "807160"
  },
  {
    "text": "this this so-called super private",
    "start": "807160",
    "end": "808600"
  },
  {
    "text": "allocation because I don't see how full",
    "start": "808600",
    "end": "810839"
  },
  {
    "text": "allocation and privacy allows for you to",
    "start": "810839",
    "end": "813279"
  },
  {
    "text": "send things between threads I I don't I",
    "start": "813279",
    "end": "815399"
  },
  {
    "text": "don't quite get that uh I don't really",
    "start": "815399",
    "end": "817800"
  },
  {
    "text": "know where that's going but it sounds",
    "start": "817800",
    "end": "820000"
  },
  {
    "text": "interesting he's back at Netflix I'm not",
    "start": "820000",
    "end": "821519"
  },
  {
    "text": "at Netflix ex to doubt like yeah that's",
    "start": "821519",
    "end": "823160"
  },
  {
    "text": "where I'm at right interior mutability",
    "start": "823160",
    "end": "825480"
  },
  {
    "text": "yes H okay let's see this uh if we go",
    "start": "825480",
    "end": "827920"
  },
  {
    "text": "back to our earlier example and look",
    "start": "827920",
    "end": "829160"
  },
  {
    "text": "carefully we'll notice something okay",
    "start": "829160",
    "end": "830800"
  },
  {
    "text": "what is it the question is what what",
    "start": "830800",
    "end": "833079"
  },
  {
    "text": "happened to the new uh stats allocation",
    "start": "833079",
    "end": "835480"
  },
  {
    "text": "I assum it gets set to the employee",
    "start": "835480",
    "end": "836959"
  },
  {
    "text": "remembering that uh that June is a let's",
    "start": "836959",
    "end": "839240"
  },
  {
    "text": "see is a systems language we can't say",
    "start": "839240",
    "end": "840720"
  },
  {
    "text": "the garbage collector handled it because",
    "start": "840720",
    "end": "842399"
  },
  {
    "text": "we have no garbage collector nor can we",
    "start": "842399",
    "end": "843920"
  },
  {
    "text": "say the ref count hit zero so we",
    "start": "843920",
    "end": "845959"
  },
  {
    "text": "reclaimed it as we don't use ref count",
    "start": "845959",
    "end": "848560"
  },
  {
    "text": "as a systems language we can't uh allow",
    "start": "848560",
    "end": "851160"
  },
  {
    "text": "hidden or difficult to predict overhead",
    "start": "851160",
    "end": "852959"
  },
  {
    "text": "to happen okay yeah so what did happen",
    "start": "852959",
    "end": "855440"
  },
  {
    "text": "to this first one right here right",
    "start": "855440",
    "end": "858040"
  },
  {
    "text": "notice that we change it what did happen",
    "start": "858040",
    "end": "859680"
  },
  {
    "text": "to that one that was my question which",
    "start": "859680",
    "end": "861399"
  },
  {
    "text": "is if you have all of your allocations",
    "start": "861399",
    "end": "862920"
  },
  {
    "text": "up to the top one and you have a linked",
    "start": "862920",
    "end": "865040"
  },
  {
    "text": "list that's growing and shrinking how do",
    "start": "865040",
    "end": "866639"
  },
  {
    "text": "you not have memory go to Infinity okay",
    "start": "866639",
    "end": "868160"
  },
  {
    "text": "so we're actually at the problem in",
    "start": "868160",
    "end": "869519"
  },
  {
    "text": "which I specifically stated earlier I'm",
    "start": "869519",
    "end": "871160"
  },
  {
    "text": "very curious about that it's not",
    "start": "871160",
    "end": "872440"
  },
  {
    "text": "actually leaked either as even the",
    "start": "872440",
    "end": "874079"
  },
  {
    "text": "memory it occupied will be reclaimed",
    "start": "874079",
    "end": "876000"
  },
  {
    "text": "once the entire group is reclaimed for",
    "start": "876000",
    "end": "878000"
  },
  {
    "text": "all intent uh intents and purposes",
    "start": "878000",
    "end": "880639"
  },
  {
    "text": "though let's see for all intents and",
    "start": "880639",
    "end": "882120"
  },
  {
    "text": "purposes I'm not sure what that means",
    "start": "882120",
    "end": "883959"
  },
  {
    "text": "though it's lost to the user until the",
    "start": "883959",
    "end": "885720"
  },
  {
    "text": "group is no longer live it's a kind of",
    "start": "885720",
    "end": "887320"
  },
  {
    "text": "memory bloat that happens if we group",
    "start": "887320",
    "end": "889040"
  },
  {
    "text": "allocations yes this is what I was",
    "start": "889040",
    "end": "890320"
  },
  {
    "text": "talking about to handle this we need uh",
    "start": "890320",
    "end": "892160"
  },
  {
    "text": "we need this we need some way of",
    "start": "892160",
    "end": "893959"
  },
  {
    "text": "recycling that memory I say recycling",
    "start": "893959",
    "end": "896199"
  },
  {
    "text": "specifically because June we can free",
    "start": "896199",
    "end": "897800"
  },
  {
    "text": "memory as the group is treated together",
    "start": "897800",
    "end": "899480"
  },
  {
    "text": "as a single entity where the allocations",
    "start": "899480",
    "end": "901320"
  },
  {
    "text": "in the group are Freed at once if we",
    "start": "901320",
    "end": "904320"
  },
  {
    "text": "instead recycle the memory we can reuse",
    "start": "904320",
    "end": "906440"
  },
  {
    "text": "the same memory while the group is live",
    "start": "906440",
    "end": "909600"
  },
  {
    "text": "interesting so it actually it keeps",
    "start": "909600",
    "end": "911399"
  },
  {
    "text": "cached memory around so like you did a",
    "start": "911399",
    "end": "913800"
  },
  {
    "text": "linked list allocation and actually will",
    "start": "913800",
    "end": "915519"
  },
  {
    "text": "keep the memory",
    "start": "915519",
    "end": "916959"
  },
  {
    "text": "around safe memory recycling that's",
    "start": "916959",
    "end": "919440"
  },
  {
    "text": "crazy so you have to do some sort of",
    "start": "919440",
    "end": "920880"
  },
  {
    "text": "zeroing that should be done by a library",
    "start": "920880",
    "end": "923000"
  },
  {
    "text": "not the language why not isn't this just",
    "start": "923000",
    "end": "925519"
  },
  {
    "text": "an arena with bump allocation it",
    "start": "925519",
    "end": "927160"
  },
  {
    "text": "effectively is but on a per object level",
    "start": "927160",
    "end": "929639"
  },
  {
    "text": "hm I I'm I'm in Brazil I'm in Brazil",
    "start": "929639",
    "end": "932199"
  },
  {
    "text": "right now that's why I have a crappy mic",
    "start": "932199",
    "end": "934160"
  },
  {
    "text": "is I just have a gorilla setup",
    "start": "934160",
    "end": "936279"
  },
  {
    "text": "microphone that works good enough for",
    "start": "936279",
    "end": "937759"
  },
  {
    "text": "this situation I'm streaming off Linux",
    "start": "937759",
    "end": "939839"
  },
  {
    "text": "which is not like a great experience so",
    "start": "939839",
    "end": "942000"
  },
  {
    "text": "you know that's what's happening right",
    "start": "942000",
    "end": "944279"
  },
  {
    "text": "now all right so this is",
    "start": "944279",
    "end": "947399"
  },
  {
    "text": "interesting all right safe memory",
    "start": "947399",
    "end": "949560"
  },
  {
    "text": "recycling uh using the idea of full",
    "start": "949560",
    "end": "951560"
  },
  {
    "text": "encapsulation from earlier we can create",
    "start": "951560",
    "end": "953079"
  },
  {
    "text": "a fenced in sets of pointers that we",
    "start": "953079",
    "end": "955160"
  },
  {
    "text": "know aren't shared with the rest of the",
    "start": "955160",
    "end": "956800"
  },
  {
    "text": "world once we have them it is let's see",
    "start": "956800",
    "end": "959000"
  },
  {
    "text": "it's possible to track the pointers",
    "start": "959000",
    "end": "960240"
  },
  {
    "text": "inside these pointers can get copy count",
    "start": "960240",
    "end": "962759"
  },
  {
    "text": "so we know how many copies are live at",
    "start": "962759",
    "end": "965160"
  },
  {
    "text": "any point in time not to similar to ref",
    "start": "965160",
    "end": "967519"
  },
  {
    "text": "count though it let's see though it has",
    "start": "967519",
    "end": "969440"
  },
  {
    "text": "no automatic Reclamation okay so it's RC",
    "start": "969440",
    "end": "972240"
  },
  {
    "text": "just without the Reclamation okay once",
    "start": "972240",
    "end": "975160"
  },
  {
    "text": "we have a copy count for each internal",
    "start": "975160",
    "end": "976399"
  },
  {
    "text": "pointer we give the developers a",
    "start": "976399",
    "end": "977440"
  },
  {
    "text": "built-in recycle command this actually",
    "start": "977440",
    "end": "979560"
  },
  {
    "text": "seems super cool this actually I I I",
    "start": "979560",
    "end": "982319"
  },
  {
    "text": "know this sounds odd but to me this",
    "start": "982319",
    "end": "983959"
  },
  {
    "text": "sounds super cool this sounds like it",
    "start": "983959",
    "end": "985360"
  },
  {
    "text": "effectively like memory pooling is like",
    "start": "985360",
    "end": "987560"
  },
  {
    "text": "built into the language recycling would",
    "start": "987560",
    "end": "989600"
  },
  {
    "text": "start at a given pointer and would uh",
    "start": "989600",
    "end": "991399"
  },
  {
    "text": "check the pointers reachable from it",
    "start": "991399",
    "end": "993519"
  },
  {
    "text": "each pointer uh it finds can uh can",
    "start": "993519",
    "end": "995959"
  },
  {
    "text": "recycle would go to the safe free list",
    "start": "995959",
    "end": "998480"
  },
  {
    "text": "you might wonder why not just do this",
    "start": "998480",
    "end": "1000040"
  },
  {
    "text": "automatically there's so uh there are a",
    "start": "1000040",
    "end": "1001440"
  },
  {
    "text": "couple reasons the operation is linear",
    "start": "1001440",
    "end": "1003680"
  },
  {
    "text": "time based on your transitively reached",
    "start": "1003680",
    "end": "1006040"
  },
  {
    "text": "pointers this means you may incur a",
    "start": "1006040",
    "end": "1007839"
  },
  {
    "text": "noticeable overhead when recycling",
    "start": "1007839",
    "end": "1009639"
  },
  {
    "text": "because of the first pointer it's",
    "start": "1009639",
    "end": "1010920"
  },
  {
    "text": "important to make places where this",
    "start": "1010920",
    "end": "1012600"
  },
  {
    "text": "occurs visibly or make this occurs",
    "start": "1012600",
    "end": "1015480"
  },
  {
    "text": "visible okay this kind of sounds like a",
    "start": "1015480",
    "end": "1018360"
  },
  {
    "text": "manual garbage collection it does you're",
    "start": "1018360",
    "end": "1020680"
  },
  {
    "text": "right my collaborator June or Jane calls",
    "start": "1020680",
    "end": "1024319"
  },
  {
    "text": "this semi-automatic memory",
    "start": "1024319",
    "end": "1026400"
  },
  {
    "text": "Reclamation my reading skills today are",
    "start": "1026400",
    "end": "1028480"
  },
  {
    "text": "just terrible I'm not exactly sure why I",
    "start": "1028480",
    "end": "1030918"
  },
  {
    "text": "didn't get enough sleep last night my",
    "start": "1030919",
    "end": "1032400"
  },
  {
    "text": "dyslexia is going wild so sorry if if",
    "start": "1032400",
    "end": "1034120"
  },
  {
    "text": "you're having a hard time following but",
    "start": "1034120",
    "end": "1035839"
  },
  {
    "text": "okay this is such a cool idea that you",
    "start": "1035839",
    "end": "1038240"
  },
  {
    "text": "can do garbage it's like it's like you",
    "start": "1038240",
    "end": "1039760"
  },
  {
    "text": "have a garbage",
    "start": "1039760",
    "end": "1041000"
  },
  {
    "text": "collector but the garbage collector is",
    "start": "1041000",
    "end": "1043480"
  },
  {
    "text": "like on a per object basis all things",
    "start": "1043480",
    "end": "1046079"
  },
  {
    "text": "cause performance overheads everything's",
    "start": "1046079",
    "end": "1047720"
  },
  {
    "text": "a a performance overhead",
    "start": "1047720",
    "end": "1049440"
  },
  {
    "text": "the problem isn't any of this right it's",
    "start": "1049440",
    "end": "1052160"
  },
  {
    "text": "like an RC except for you get to call",
    "start": "1052160",
    "end": "1054799"
  },
  {
    "text": "recycle on it I think we we are the",
    "start": "1054799",
    "end": "1057480"
  },
  {
    "text": "garbage cors I knew it I was right all",
    "start": "1057480",
    "end": "1058919"
  },
  {
    "text": "along you're",
    "start": "1058919",
    "end": "1060039"
  },
  {
    "text": "blonde that mustache is fake too yes it",
    "start": "1060039",
    "end": "1064600"
  },
  {
    "text": "is I thought the the GC was automatic by",
    "start": "1064600",
    "end": "1067520"
  },
  {
    "text": "the language itself so this isn't this",
    "start": "1067520",
    "end": "1069440"
  },
  {
    "text": "one you effectively that's what I'm",
    "start": "1069440",
    "end": "1071039"
  },
  {
    "text": "hearing you kind of say when it needs to",
    "start": "1071039",
    "end": "1072720"
  },
  {
    "text": "do the Reclamation on a per object level",
    "start": "1072720",
    "end": "1075360"
  },
  {
    "text": "basis which is very interesting you ask",
    "start": "1075360",
    "end": "1077640"
  },
  {
    "text": "once and when you ask you get a kind of",
    "start": "1077640",
    "end": "1079600"
  },
  {
    "text": "Highly focused Mark and sweep for that",
    "start": "1079600",
    "end": "1081320"
  },
  {
    "text": "single pointer see that's super cool a",
    "start": "1081320",
    "end": "1083400"
  },
  {
    "text": "highly focused Mark and sweep this is",
    "start": "1083400",
    "end": "1085120"
  },
  {
    "text": "very interesting uh this feature is not",
    "start": "1085120",
    "end": "1087320"
  },
  {
    "text": "yet in the reference compiler we're",
    "start": "1087320",
    "end": "1088960"
  },
  {
    "text": "hoping to implement it in the coming",
    "start": "1088960",
    "end": "1090400"
  },
  {
    "text": "weeks more work ahead this is actually",
    "start": "1090400",
    "end": "1092360"
  },
  {
    "text": "super cool we have uh we have a way of",
    "start": "1092360",
    "end": "1095760"
  },
  {
    "text": "simplifying lifetimes making the",
    "start": "1095760",
    "end": "1097000"
  },
  {
    "text": "readable code that people from various",
    "start": "1097000",
    "end": "1098799"
  },
  {
    "text": "languages should be able to understand",
    "start": "1098799",
    "end": "1100039"
  },
  {
    "text": "and use and we can give a clear easy to",
    "start": "1100039",
    "end": "1101799"
  },
  {
    "text": "understand lifetime errors when they",
    "start": "1101799",
    "end": "1104120"
  },
  {
    "text": "arise I like this I actually really",
    "start": "1104120",
    "end": "1106159"
  },
  {
    "text": "think this is I think this is a I've",
    "start": "1106159",
    "end": "1108400"
  },
  {
    "text": "been a language that is that is like",
    "start": "1108400",
    "end": "1110640"
  },
  {
    "text": "rust and go together this feels like",
    "start": "1110640",
    "end": "1113200"
  },
  {
    "text": "this actually feels like the the a true",
    "start": "1113200",
    "end": "1115760"
  },
  {
    "text": "rust and go baby right here this feels",
    "start": "1115760",
    "end": "1118000"
  },
  {
    "text": "great having safe uh memory recycling",
    "start": "1118000",
    "end": "1120039"
  },
  {
    "text": "gives us a way to keep groups and still",
    "start": "1120039",
    "end": "1121559"
  },
  {
    "text": "offer things like delete in a linked",
    "start": "1121559",
    "end": "1123440"
  },
  {
    "text": "list abstraction it's convenient but not",
    "start": "1123440",
    "end": "1125559"
  },
  {
    "text": "so automatic that we lose the visibility",
    "start": "1125559",
    "end": "1127200"
  },
  {
    "text": "into the cost of memory management that",
    "start": "1127200",
    "end": "1128640"
  },
  {
    "text": "said there are still some challenges",
    "start": "1128640",
    "end": "1129799"
  },
  {
    "text": "ahead that will need to uh uh to be",
    "start": "1129799",
    "end": "1132760"
  },
  {
    "text": "solved in the language design and",
    "start": "1132760",
    "end": "1133919"
  },
  {
    "text": "tooling for example how do you know when",
    "start": "1133919",
    "end": "1135679"
  },
  {
    "text": "a program is bloating memory we'll need",
    "start": "1135679",
    "end": "1137520"
  },
  {
    "text": "some way of doing memory when the",
    "start": "1137520",
    "end": "1139200"
  },
  {
    "text": "program is running to detect this and",
    "start": "1139200",
    "end": "1140559"
  },
  {
    "text": "warn the developer yeah that's cool that",
    "start": "1140559",
    "end": "1142600"
  },
  {
    "text": "that makes sense you'd need ways to kind",
    "start": "1142600",
    "end": "1143720"
  },
  {
    "text": "of",
    "start": "1143720",
    "end": "1145840"
  },
  {
    "text": "show I guess you could I mean if you",
    "start": "1146840",
    "end": "1148880"
  },
  {
    "text": "have a bunch of zero zero counted",
    "start": "1148880",
    "end": "1150880"
  },
  {
    "text": "references but you have all these",
    "start": "1150880",
    "end": "1152280"
  },
  {
    "text": "memories because they haven't been",
    "start": "1152280",
    "end": "1153240"
  },
  {
    "text": "recycled that would be I",
    "start": "1153240",
    "end": "1156039"
  },
  {
    "text": "assume like you can kind of show like",
    "start": "1156039",
    "end": "1157880"
  },
  {
    "text": "you're growing a bunch without ever",
    "start": "1157880",
    "end": "1159919"
  },
  {
    "text": "recycling it's interesting I see this as",
    "start": "1159919",
    "end": "1162000"
  },
  {
    "text": "a more incremental prototyp friendly way",
    "start": "1162000",
    "end": "1163640"
  },
  {
    "text": "of development I agree this is super",
    "start": "1163640",
    "end": "1165960"
  },
  {
    "text": "cool I think this is great I think this",
    "start": "1165960",
    "end": "1168120"
  },
  {
    "text": "is Fant",
    "start": "1168120",
    "end": "1169679"
  },
  {
    "text": "fantastic I actually really like",
    "start": "1169679",
    "end": "1172200"
  },
  {
    "text": "this yeah I like all of this this is",
    "start": "1172200",
    "end": "1174679"
  },
  {
    "text": "this is really good relationship to rust",
    "start": "1174679",
    "end": "1176360"
  },
  {
    "text": "June has a real opportunity to be a good",
    "start": "1176360",
    "end": "1178400"
  },
  {
    "text": "compliment to rust rust focus on",
    "start": "1178400",
    "end": "1179840"
  },
  {
    "text": "embedded and systems development is its",
    "start": "1179840",
    "end": "1181679"
  },
  {
    "text": "core strength I don't think rust on",
    "start": "1181679",
    "end": "1183120"
  },
  {
    "text": "embedded is a core strength I think rust",
    "start": "1183120",
    "end": "1185440"
  },
  {
    "text": "with embedded is kind of interesting or",
    "start": "1185440",
    "end": "1187840"
  },
  {
    "text": "extremely difficult or kind of incorrect",
    "start": "1187840",
    "end": "1190120"
  },
  {
    "text": "I think Zig is the better language for",
    "start": "1190120",
    "end": "1191360"
  },
  {
    "text": "embedded but for systems level I think",
    "start": "1191360",
    "end": "1192799"
  },
  {
    "text": "it makes sense but I'm still not",
    "start": "1192799",
    "end": "1194600"
  },
  {
    "text": "convinced I I always go back and forth",
    "start": "1194600",
    "end": "1196760"
  },
  {
    "text": "on this is rust even the right",
    "start": "1196760",
    "end": "1198080"
  },
  {
    "text": "abstraction have we over have we",
    "start": "1198080",
    "end": "1200159"
  },
  {
    "text": "overshot the rust the rust abstraction",
    "start": "1200159",
    "end": "1203120"
  },
  {
    "text": "all right I got to be right back I got",
    "start": "1203120",
    "end": "1204280"
  },
  {
    "text": "to pee I got to pee too much coffee and",
    "start": "1204280",
    "end": "1207520"
  },
  {
    "text": "water all right what made it what made",
    "start": "1207520",
    "end": "1210720"
  },
  {
    "text": "you change a mind on Rust uh yeah it's",
    "start": "1210720",
    "end": "1212799"
  },
  {
    "text": "just that I I recognize the pain with",
    "start": "1212799",
    "end": "1214120"
  },
  {
    "text": "rust and I recognize that it's an",
    "start": "1214120",
    "end": "1215400"
  },
  {
    "text": "extremely hard sell uh just because",
    "start": "1215400",
    "end": "1217480"
  },
  {
    "text": "there's a lot of people who just don't",
    "start": "1217480",
    "end": "1218679"
  },
  {
    "text": "want to put up with it simple as that",
    "start": "1218679",
    "end": "1221360"
  },
  {
    "text": "there's plenty of people that just they",
    "start": "1221360",
    "end": "1222679"
  },
  {
    "text": "don't want that they would rather take",
    "start": "1222679",
    "end": "1224600"
  },
  {
    "text": "the sometimes things that go wrong with",
    "start": "1224600",
    "end": "1226919"
  },
  {
    "text": "programming as opposed to the on always",
    "start": "1226919",
    "end": "1229679"
  },
  {
    "text": "safe mechanisms at all points right it's",
    "start": "1229679",
    "end": "1232880"
  },
  {
    "text": "just a trade-off and people don't want",
    "start": "1232880",
    "end": "1234120"
  },
  {
    "text": "to do that yeah go is so much better for",
    "start": "1234120",
    "end": "1236080"
  },
  {
    "text": "most use cases this is true this is why",
    "start": "1236080",
    "end": "1237640"
  },
  {
    "text": "this people feel this way very very much",
    "start": "1237640",
    "end": "1239440"
  },
  {
    "text": "did you wash your hands hell yeah",
    "start": "1239440",
    "end": "1240880"
  },
  {
    "text": "brother girl I actually watch I wash the",
    "start": "1240880",
    "end": "1242840"
  },
  {
    "text": "Wang too got it right in the",
    "start": "1242840",
    "end": "1244919"
  },
  {
    "text": "sink you know what I mean I think some",
    "start": "1244919",
    "end": "1247520"
  },
  {
    "text": "people just they just don't want to have",
    "start": "1247520",
    "end": "1249600"
  },
  {
    "text": "to deal with that and that's okay I",
    "start": "1249600",
    "end": "1251159"
  },
  {
    "text": "think that that is perfectly reasonable",
    "start": "1251159",
    "end": "1252840"
  },
  {
    "text": "it takes a special kind of person that",
    "start": "1252840",
    "end": "1255039"
  },
  {
    "text": "really really loves rust that just",
    "start": "1255039",
    "end": "1257520"
  },
  {
    "text": "really really loves that experience but",
    "start": "1257520",
    "end": "1260520"
  },
  {
    "text": "the thing is is that most people just",
    "start": "1260520",
    "end": "1262240"
  },
  {
    "text": "aren't going to really like that I like",
    "start": "1262240",
    "end": "1263919"
  },
  {
    "text": "Russ specifically because it is so",
    "start": "1263919",
    "end": "1265360"
  },
  {
    "text": "strict yeah exactly and some people just",
    "start": "1265360",
    "end": "1267240"
  },
  {
    "text": "really love that experience some people",
    "start": "1267240",
    "end": "1268760"
  },
  {
    "text": "really love the type system of rust and",
    "start": "1268760",
    "end": "1271799"
  },
  {
    "text": "that's what I fell in love with was the",
    "start": "1271799",
    "end": "1274640"
  },
  {
    "text": "type system of rust the borrow checking",
    "start": "1274640",
    "end": "1277600"
  },
  {
    "text": "and lifetime annotation I didn't",
    "start": "1277600",
    "end": "1279559"
  },
  {
    "text": "actually ever fall in love with that I",
    "start": "1279559",
    "end": "1281840"
  },
  {
    "text": "found that be largely inconvenient",
    "start": "1281840",
    "end": "1283559"
  },
  {
    "text": "whereas I found the other side to be",
    "start": "1283559",
    "end": "1284880"
  },
  {
    "text": "really nice and so I think that that's",
    "start": "1284880",
    "end": "1287640"
  },
  {
    "text": "kind of what happens is that people have",
    "start": "1287640",
    "end": "1289559"
  },
  {
    "text": "two types that they fall under and I",
    "start": "1289559",
    "end": "1292320"
  },
  {
    "text": "think most people love the type",
    "start": "1292320",
    "end": "1295039"
  },
  {
    "text": "system more than the other side that's",
    "start": "1295039",
    "end": "1298240"
  },
  {
    "text": "my guess but real talk I think this is",
    "start": "1298240",
    "end": "1300440"
  },
  {
    "text": "actually super super cool let's look at",
    "start": "1300440",
    "end": "1301960"
  },
  {
    "text": "this thing for a little second I want I",
    "start": "1301960",
    "end": "1303200"
  },
  {
    "text": "wanted to look at this uh op has for",
    "start": "1303200",
    "end": "1305480"
  },
  {
    "text": "decades been the way many applications",
    "start": "1305480",
    "end": "1306960"
  },
  {
    "text": "are written it's not without its flaws",
    "start": "1306960",
    "end": "1309039"
  },
  {
    "text": "and many op languages allow programmers",
    "start": "1309039",
    "end": "1310799"
  },
  {
    "text": "to freely break rules of thumb like the",
    "start": "1310799",
    "end": "1312799"
  },
  {
    "text": "liskov substitution principle or to",
    "start": "1312799",
    "end": "1314520"
  },
  {
    "text": "create a mess with interwoven code",
    "start": "1314520",
    "end": "1315960"
  },
  {
    "text": "between parent and child classes that's",
    "start": "1315960",
    "end": "1318080"
  },
  {
    "text": "difficult to Main M we're currently",
    "start": "1318080",
    "end": "1319640"
  },
  {
    "text": "investigating other ways of making code",
    "start": "1319640",
    "end": "1321080"
  },
  {
    "text": "reuse easier more modular and more",
    "start": "1321080",
    "end": "1322919"
  },
  {
    "text": "composable we're not quite ready to talk",
    "start": "1322919",
    "end": "1324760"
  },
  {
    "text": "about this though we hope to soon okay",
    "start": "1324760",
    "end": "1327600"
  },
  {
    "text": "well I really hope I mean my one thing I",
    "start": "1327600",
    "end": "1329320"
  },
  {
    "text": "really hope is that they use this",
    "start": "1329320",
    "end": "1331960"
  },
  {
    "text": "Notions of trait objects and trait",
    "start": "1331960",
    "end": "1334039"
  },
  {
    "text": "extensions being able to take like to",
    "start": "1334039",
    "end": "1337559"
  },
  {
    "text": "take an iterator and add new methods to",
    "start": "1337559",
    "end": "1339960"
  },
  {
    "text": "it so you can have your iterators right",
    "start": "1339960",
    "end": "1342840"
  },
  {
    "text": "I think that that is super cool and I",
    "start": "1342840",
    "end": "1344520"
  },
  {
    "text": "really hope that that is in this",
    "start": "1344520",
    "end": "1346640"
  },
  {
    "text": "language cuz I think that that is one of",
    "start": "1346640",
    "end": "1348120"
  },
  {
    "text": "the best things again the type system of",
    "start": "1348120",
    "end": "1350039"
  },
  {
    "text": "rust super incredible it's that's the",
    "start": "1350039",
    "end": "1353000"
  },
  {
    "text": "reason why I like rust is purely because",
    "start": "1353000",
    "end": "1355120"
  },
  {
    "text": "of that",
    "start": "1355120",
    "end": "1356799"
  },
  {
    "text": "man it's so good anyways there you go",
    "start": "1356799",
    "end": "1360480"
  },
  {
    "text": "that's how I feel the name is the primen",
    "start": "1360480",
    "end": "1366080"
  }
]