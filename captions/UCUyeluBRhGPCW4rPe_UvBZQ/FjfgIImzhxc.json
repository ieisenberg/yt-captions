[
  {
    "text": "there we go baby boys one of my most successful videos on this channel so far",
    "start": "0",
    "end": "5520"
  },
  {
    "text": "Compares functional and object-oriented programming this is an interesting topic and clearly",
    "start": "5520",
    "end": "11280"
  },
  {
    "text": "not just to me but there's more to this debate than we discussed in that episode this is one of those debates that to be",
    "start": "11280",
    "end": "17100"
  },
  {
    "text": "honest seems a little weird to me I think I could have agreed with this this take not too long ago real talk I I",
    "start": "17100",
    "end": "24960"
  },
  {
    "text": "really do think I would be on the this is a strange debate kind of talk maybe if you were to ask me five years ago",
    "start": "24960",
    "end": "31679"
  },
  {
    "text": "seven years ago hey Prime what do you think on the functional versus non-functional debate I would probably",
    "start": "31679",
    "end": "38040"
  },
  {
    "text": "take I'd probably have some stupid ass take right this was probably during the height maybe if you went eight years ago",
    "start": "38040",
    "end": "43500"
  },
  {
    "text": "my height of loving rxjs I'd been like reactive [ __ ] stupid great right but I really don't even know",
    "start": "43500",
    "end": "49860"
  },
  {
    "text": "what functional programming is at that point still don't even really know what it is I you know I'm real I'm just gonna be straight up here",
    "start": "49860",
    "end": "56760"
  },
  {
    "text": "procedural programming is greater than everything else my stance is not that I hate functional",
    "start": "56760",
    "end": "62039"
  },
  {
    "text": "programming in love or vice versa but rather but I think of each of these approaches as tools rather than things",
    "start": "62039",
    "end": "67560"
  },
  {
    "text": "to go to war about so so I'm not even so this whole idea of saying that a language Paradigm is a tool",
    "start": "67560",
    "end": "75920"
  },
  {
    "text": "is an interesting take to begin with right uh because is it a tool or is one",
    "start": "76020",
    "end": "81659"
  },
  {
    "text": "objectively better than the other because they're both they're both an equalizer if you will",
    "start": "81659",
    "end": "87720"
  },
  {
    "text": "they both simply take a problem and give you a way to solve things so it'd be",
    "start": "87720",
    "end": "94259"
  },
  {
    "text": "kind of silly to say that it's just it's just a tool when unless if there's like specific problems that lend itself better to one than the",
    "start": "94259",
    "end": "100560"
  },
  {
    "text": "other oh hold on one second my wife brought me yerba mate and this shot full of do you see that that's you know what",
    "start": "100560",
    "end": "107220"
  },
  {
    "text": "that is olive oil and what else she doesn't want to say what else is in",
    "start": "107220",
    "end": "112920"
  },
  {
    "text": "here my guess is anabolic steroids",
    "start": "112920",
    "end": "117438"
  },
  {
    "text": "ah",
    "start": "118920",
    "end": "121880"
  },
  {
    "text": "stream oh you hand it to me oh my mouth is burning all right now that we got",
    "start": "127819",
    "end": "134160"
  },
  {
    "text": "those Anastasia anabolic steroids I'm ready all right here we go let's go",
    "start": "134160",
    "end": "140640"
  },
  {
    "text": "I'm checked all right well oh the arguments for and against our own FP",
    "start": "140640",
    "end": "146239"
  },
  {
    "text": "okay I like the framing oh oh I think this is too loud I think that's way too",
    "start": "146239",
    "end": "151440"
  },
  {
    "text": "loudly continuous delivery welcome to my channel and if you haven't been here before please do hit subscribe and if you enjoy the content today hit like as",
    "start": "151440",
    "end": "157620"
  },
  {
    "text": "well there is no always best or FP is best for me there are times when functional programming is the best",
    "start": "157620",
    "end": "162780"
  },
  {
    "text": "choice for some things and times when object orientation is best for others by the way I've never liked the term object",
    "start": "162780",
    "end": "168060"
  },
  {
    "text": "orientation it's not a real term object oriented but uh and people said to do that was like the most common phrase I",
    "start": "168060",
    "end": "173819"
  },
  {
    "text": "hear all the time object orientation there's no there's no orientation okay that's the wrong word",
    "start": "173819",
    "end": "179220"
  },
  {
    "text": "um uh you know that's that's speaking about the positioning of items relative to others versus oriented is like the uh",
    "start": "179220",
    "end": "187319"
  },
  {
    "text": "that something is leaning towards or going towards it uh anyways uh",
    "start": "187319",
    "end": "192480"
  },
  {
    "text": "uh agree with this take so far okay maybe we agree with that my guess is that there are",
    "start": "192480",
    "end": "198239"
  },
  {
    "text": "some problems that are just naturally easier for functional programming and there's some problems that are naturally easier for oh",
    "start": "198239",
    "end": "205500"
  },
  {
    "text": "though I'm not sure yet most of the systems that I can remember building had some aspects of both",
    "start": "205500",
    "end": "211980"
  },
  {
    "text": "approaches despite the fact that they can't still think of myself as primarily you know her programmer this is not",
    "start": "211980",
    "end": "217019"
  },
  {
    "text": "because of language support but because oo ideas or functional ideas made most sense in the context of the code that we were writing at that time",
    "start": "217019",
    "end": "222840"
  },
  {
    "text": "is rust a functional programming language or is it a object-oriented programming language",
    "start": "222840",
    "end": "228780"
  },
  {
    "text": "if you don't have the word inherits but you do have interfaces",
    "start": "228780",
    "end": "235580"
  },
  {
    "text": "both I like whatever rust is",
    "start": "235879",
    "end": "241159"
  },
  {
    "text": "multi-paradigm because you've got like this functional kind of feel to it but you can also in you know it is adding",
    "start": "241220",
    "end": "247500"
  },
  {
    "text": "methods considered functional programming or is that just simply",
    "start": "247500",
    "end": "253560"
  },
  {
    "text": "a feature of the language and it's neither functional nor object oriented",
    "start": "253560",
    "end": "259739"
  },
  {
    "text": "I can't really tell this is the part of the definitions that I always get confused on really you think that",
    "start": "259739",
    "end": "265800"
  },
  {
    "text": "adding okay so adding functions to a struct is object oriented it like at what point does your orientation become",
    "start": "265800",
    "end": "273840"
  },
  {
    "text": "objective like what what's where's the line I",
    "start": "273840",
    "end": "279419"
  },
  {
    "text": "guess maybe we should make sure we all agree on that what's the line to me is that that's more procedural right",
    "start": "279419",
    "end": "286560"
  },
  {
    "text": "um Ampersand self would be the the line",
    "start": "286560",
    "end": "295139"
  },
  {
    "text": "message passing oh we can't talk about message passing again okay new new new",
    "start": "295139",
    "end": "301380"
  },
  {
    "text": "um my man said objective",
    "start": "301380",
    "end": "308240"
  },
  {
    "text": "objective orientation programming I was another programmer in C for a long",
    "start": "308240",
    "end": "313320"
  },
  {
    "text": "time and some of my C code was passing rain pointers to functions that I could call polymorphically um and using immutable data structures",
    "start": "313320",
    "end": "320160"
  },
  {
    "text": "so my C code was both oo and functional so again is having a function in which",
    "start": "320160",
    "end": "326220"
  },
  {
    "text": "you can use polymorphically is that oh oh I think that that's one thing that I",
    "start": "326220",
    "end": "331259"
  },
  {
    "text": "think we all really struggle on is the definition a clear definition of oh does anyone have like a link or something",
    "start": "331259",
    "end": "337259"
  },
  {
    "text": "that makes a clear objective definition that we could potentially agree on because I feel like this is going to be",
    "start": "337259",
    "end": "342300"
  },
  {
    "text": "a very hard thing to watch without that you know what I mean foreign",
    "start": "342300",
    "end": "349220"
  },
  {
    "text": "much further in this let me just thank our sponsors we're extremely fortunate to be sponsored by equal experts",
    "start": "350840",
    "end": "356520"
  },
  {
    "text": "trisentis transfig and Roost all of these companies offer products and services that are well aligned with the topics that we discuss on this channel",
    "start": "356520",
    "end": "362520"
  },
  {
    "text": "every week so if you're looking for excellence in continuous delivery and software engineering then click on the links in the description below to check",
    "start": "362520",
    "end": "368580"
  },
  {
    "text": "them out difference between ronfp is one of those debates though that seems to polarize people we can end up trying to",
    "start": "368580",
    "end": "374940"
  },
  {
    "text": "score points in an argument rather than just shedding much light if we're not careful the first thing to say may be",
    "start": "374940",
    "end": "380220"
  },
  {
    "text": "obvious but general purpose programming languages are general purpose in that you can write any system in any language",
    "start": "380220",
    "end": "386639"
  },
  {
    "text": "there is nothing that you can do in an oo language that you can't do in a functional language and vice versa that's really what",
    "start": "386639",
    "end": "393680"
  },
  {
    "text": "yeah I guess if we're talking about like in the end if we're talking about",
    "start": "395699",
    "end": "402740"
  },
  {
    "text": "if we're talking about like the problem the end state right treating the program as a black box then yes this is correct",
    "start": "405900",
    "end": "412020"
  },
  {
    "text": "but I mean I think back to like my Java 1.5 days I you couldn't do curing",
    "start": "412020",
    "end": "417660"
  },
  {
    "text": "it's just like it's a concept unavailable in that language right they don't even have closures so it was like",
    "start": "417660",
    "end": "424080"
  },
  {
    "text": "you could not do it I mean you could do something maybe like it with some sort of weird",
    "start": "424080",
    "end": "429840"
  },
  {
    "text": "decorator pattern and try to like wrap that crap on top and on top and on top and on top maybe",
    "start": "429840",
    "end": "436699"
  },
  {
    "text": "uh but you couldn't really the rest of it didn't quite you know there was no transferable concept",
    "start": "436699",
    "end": "443099"
  },
  {
    "text": "between the two but I assume right there's a difference between a general",
    "start": "443099",
    "end": "449160"
  },
  {
    "text": "purpose language and a domain-specific language domain-specific languages have by design a narrower focus on whatever",
    "start": "449160",
    "end": "454440"
  },
  {
    "text": "it is that their domain is for example SQL is a good example of a DSL and it's great at finding a collection of Records",
    "start": "454440",
    "end": "460680"
  },
  {
    "text": "in a set but it'd be a rather poor choice for writing Space Invaders this doesn't mean that every general purpose you should never say it's a rather poor",
    "start": "460680",
    "end": "467220"
  },
  {
    "text": "choice to write Space Invaders I all of a sudden believe that we will be seeing SQL Space Invaders like",
    "start": "467220",
    "end": "475440"
  },
  {
    "text": "for whatever reason when you announce something to the world that it can be done",
    "start": "475440",
    "end": "480620"
  },
  {
    "text": "squeal gets done right it just it it just happens it just happens challenge accepted I know people just write these",
    "start": "480660",
    "end": "486720"
  },
  {
    "text": "dumb things I mean right now we're writing the Chad stack for this exact reason he's always an equally good choice for any problem but it does mean",
    "start": "486720",
    "end": "492479"
  },
  {
    "text": "that any general purpose language could be used to solve any problem in computer science this is the idea of",
    "start": "492479",
    "end": "498300"
  },
  {
    "text": "curing completeness which describes the universality of computation it may be a bad idea to write an operating system in",
    "start": "498300",
    "end": "503699"
  },
  {
    "text": "Python but we could so while it may be easier to write immutable code and plus functions as arguments in Haskell we can",
    "start": "503699",
    "end": "509160"
  },
  {
    "text": "write code that has the same effect in C Java or any other general purpose language too well it may be more difficult to write",
    "start": "509160",
    "end": "514919"
  },
  {
    "text": "code with side effects enclosure or half score we can still do that if we try hard enough so the real difference between these different paradigms is not",
    "start": "514919",
    "end": "521459"
  },
  {
    "text": "that they what they allow us to do but how easy they make it to do the things that we want to do",
    "start": "521459",
    "end": "527300"
  },
  {
    "text": "it's an interesting point in what she's trying to make which is yeah he's he's coming from it from a",
    "start": "530519",
    "end": "535680"
  },
  {
    "text": "practical sense I guess the first thing I always think of which is these type of paradigms strongly dictate",
    "start": "535680",
    "end": "541980"
  },
  {
    "text": "how you structure your code",
    "start": "541980",
    "end": "545660"
  },
  {
    "text": "and also the performance of your code can be very much so dictated by the language you're using",
    "start": "547019",
    "end": "553740"
  },
  {
    "text": "oh interesting about syntax more than capability but syntax matters it can change how we think about the problem",
    "start": "553740",
    "end": "559080"
  },
  {
    "text": "that we're trying to solve different languages so syntax okay so this isn't fair per se it's not syntax that really",
    "start": "559080",
    "end": "565980"
  },
  {
    "text": "changes how we do it it's the semantics of it so the semantic analyzer the back end to a compiler right like what it",
    "start": "565980",
    "end": "571620"
  },
  {
    "text": "allows you to do because I mean theoretically is there any difference between declaring a uh trait in Rust and",
    "start": "571620",
    "end": "579060"
  },
  {
    "text": "an interface in typescript no I mean syntax wise there's some various",
    "start": "579060",
    "end": "584100"
  },
  {
    "text": "lettering differences and you can use say uh semicolons versus commas but semantically they mean very very",
    "start": "584100",
    "end": "590820"
  },
  {
    "text": "different things and what you can do with them semantically are very very different and I think that's like the",
    "start": "590820",
    "end": "595860"
  },
  {
    "text": "kicker uh that makes something better or worse is what is the semantics of it all in",
    "start": "595860",
    "end": "602940"
  },
  {
    "text": "different paradigms like some ideas easy to express that's it really let's look at a really simple example a popular",
    "start": "602940",
    "end": "608940"
  },
  {
    "text": "idea from functional program is the idea of mapping as in map and reduce in this context the map is a higher order",
    "start": "608940",
    "end": "614040"
  },
  {
    "text": "function that means apply some function to each element in a collection this is which one do you like out of these tail",
    "start": "614040",
    "end": "620700"
  },
  {
    "text": "press one in the chat if you like the top one press two in the chat if you like the bottom one",
    "start": "620700",
    "end": "625740"
  },
  {
    "text": "one two one two one two",
    "start": "625740",
    "end": "631459"
  },
  {
    "text": "three uh real talk I I I I like this one",
    "start": "638760",
    "end": "645779"
  },
  {
    "text": "better than that one this one just feels like you're being a tryhard",
    "start": "645779",
    "end": "650660"
  },
  {
    "text": "you just try Harding so hard to do this one it's often seen as one of the preferred",
    "start": "651899",
    "end": "657180"
  },
  {
    "text": "ways to process one way in which map is deemed to be better is in terms of performance now the real answer to",
    "start": "657180",
    "end": "663000"
  },
  {
    "text": "whether Maps process lists faster than Loops is it depends",
    "start": "663000",
    "end": "668220"
  },
  {
    "text": "what did I just hear did I just hear something about maps and Loops being faster than one versus the",
    "start": "668220",
    "end": "674220"
  },
  {
    "text": "other I mean shouldn't they really be the ex how",
    "start": "674220",
    "end": "679620"
  },
  {
    "text": "how would they be any different when compiled like how would this be any different than that",
    "start": "679620",
    "end": "686480"
  },
  {
    "text": "is like two Loops no because it's a stream so I assume a stream is going to be a pull bottle",
    "start": "688380",
    "end": "693959"
  },
  {
    "text": "so for each is a pull model so this would be an iterator so this would be uh yeah yeah so this isn't I assume this is",
    "start": "693959",
    "end": "702060"
  },
  {
    "text": "effectively a pull model iterator and so you're like you're pulling each value so the stream would emit one value you'd",
    "start": "702060",
    "end": "707459"
  },
  {
    "text": "map it over then you'd print it out then you'd pull a value map it stream you know for each it uh it's not doing two",
    "start": "707459",
    "end": "713519"
  },
  {
    "text": "Loops that's JavaScript see with JavaScript you do two Loops there depends on a lot of things one of the",
    "start": "713519",
    "end": "720420"
  },
  {
    "text": "common advantages cited for functional programming is that it makes concurrency easier this is true writing immutable pure functions means that we can",
    "start": "720420",
    "end": "726660"
  },
  {
    "text": "automatically parallelize them but why is that a good idea the naive assumption is that parallelizing like this means",
    "start": "726660",
    "end": "732300"
  },
  {
    "text": "that we'll get the results faster but this is almost never the case if you measure it the problem here is that concurrency is fine okay so what just he",
    "start": "732300",
    "end": "739079"
  },
  {
    "text": "said right then and there that is an extremely difficult statement to",
    "start": "739079",
    "end": "744720"
  },
  {
    "text": "qualify saying that parallel you know we think parallelism will make something faster",
    "start": "744720",
    "end": "751200"
  },
  {
    "text": "but it I believe he said something in this in the in the along lines of in most cases it doesn't let me just pull",
    "start": "751200",
    "end": "757079"
  },
  {
    "text": "that back up just to make sure I'm not putting words on a lot of things one of the common advantages means that we can",
    "start": "757079",
    "end": "762660"
  },
  {
    "text": "automatically parallelize them but why is that a good idea the naive assumption is that parallelizing like this means",
    "start": "762660",
    "end": "768300"
  },
  {
    "text": "that we'll get the results faster but this is almost never the case if you may so almost never the case that's kind of",
    "start": "768300",
    "end": "773399"
  },
  {
    "text": "a bold statement it's a pretty dang bold statement to make that it's almost never the case I think the more appropriate",
    "start": "773399",
    "end": "779700"
  },
  {
    "text": "term would be",
    "start": "779700",
    "end": "784100"
  },
  {
    "text": "is the parallelization of code and the",
    "start": "784800",
    "end": "791399"
  },
  {
    "text": "efforts around it any mutexes any things that you have to add is the overhead of",
    "start": "791399",
    "end": "796800"
  },
  {
    "text": "that outweighing the paralyzation of itself most problems you can do is you can like break up an array to process",
    "start": "796800",
    "end": "802079"
  },
  {
    "text": "right so you just turn it into a paralleled algorithm and that's like way faster I think it just totally depends like",
    "start": "802079",
    "end": "808260"
  },
  {
    "text": "that's like a problem domain thing this is it's a very bold statement to say that it almost never matters I would say",
    "start": "808260",
    "end": "814740"
  },
  {
    "text": "that it almost always matters but you may not get the bang for your buck",
    "start": "814740",
    "end": "821160"
  },
  {
    "text": "right you may get like a 10 increase everyone uses uh concurrency and",
    "start": "821160",
    "end": "826620"
  },
  {
    "text": "parallelism interchangeably and they shouldn't concurrency and parallelism aren't the same thing parallelism means",
    "start": "826620",
    "end": "832200"
  },
  {
    "text": "two pieces of code are executing at the same time concurrency is more like the interweaving of many tasks right and",
    "start": "832200",
    "end": "838860"
  },
  {
    "text": "people kind of goof that up and so if you make five requests out to uh a",
    "start": "838860",
    "end": "844139"
  },
  {
    "text": "server you can make them concurrently it doesn't mean you're processing the incoming responses in parallel you're",
    "start": "844139",
    "end": "850260"
  },
  {
    "text": "processing them one at a time they just happen to be all running at the same time that's kind of like the general",
    "start": "850260",
    "end": "857160"
  },
  {
    "text": "one that people goof up when they say parallel versus concurrent accurate the",
    "start": "857160",
    "end": "862620"
  },
  {
    "text": "problem here is that concurrency is fine but it only improves performance when we don't need to join the results back together again as soon results the costs",
    "start": "862620",
    "end": "871019"
  },
  {
    "text": "of locks semaphores cache misses and even the most efficient mechanism of all to manage that kind of concurrent join compare and swap operations dominates",
    "start": "871019",
    "end": "877620"
  },
  {
    "text": "performance it's not true at all it's not true at all like you could get",
    "start": "877620",
    "end": "883980"
  },
  {
    "text": "so many more things out of it it's just it depends on what you mean by joining and all this stuff again this again",
    "start": "883980",
    "end": "891180"
  },
  {
    "text": "these these blanket statements are extremely hard to prove I would just take this section as parallelism is hard",
    "start": "891180",
    "end": "897899"
  },
  {
    "text": "and if you're gonna do it learn how to be good at it and learn also",
    "start": "897899",
    "end": "904139"
  },
  {
    "text": "how to measure comparing swap is often hundreds of",
    "start": "904139",
    "end": "909480"
  },
  {
    "text": "times slower than a single thread for example so you need 100 threads to get the same performance as a single thread",
    "start": "909480",
    "end": "916019"
  },
  {
    "text": "and then your concurrency problems would be worse so map can be great for splitting problems into parallel processes but will always be much slower",
    "start": "916019",
    "end": "921420"
  },
  {
    "text": "if you need to be join the data again to look at it again careful saying words such as these I",
    "start": "921420",
    "end": "928079"
  },
  {
    "text": "don't know whenever someone says it's 100x slower therefore you'll need a hundred more",
    "start": "928079",
    "end": "933300"
  },
  {
    "text": "again careful hard you know when it comes to Performance my general rule of thumb is that you should it's the same",
    "start": "933300",
    "end": "939720"
  },
  {
    "text": "thing as when people ask me how to like measure a task I say hey this task is going to take me days weeks months years",
    "start": "939720",
    "end": "945360"
  },
  {
    "text": "and because I'm not giving anything specific I'm just giving you a range so if someone says this thing is faster hey",
    "start": "945360",
    "end": "951779"
  },
  {
    "text": "this thing can be a lot faster this thing can be a lot slower I'll just say yeah it's like it could be faster it's",
    "start": "951779",
    "end": "956940"
  },
  {
    "text": "like an order of magnitude faster right like I just it's either like fast as [ __ ] or probably faster or somewhat",
    "start": "956940",
    "end": "965579"
  },
  {
    "text": "equal right like I don't give I don't you know don't ever give precise wording because you can be proven wrong in so",
    "start": "965579",
    "end": "970620"
  },
  {
    "text": "many different edge cases so if you don't get any performance what are the other benefits is the solution simpler or easier to",
    "start": "970620",
    "end": "977339"
  },
  {
    "text": "read I think this is a matter of taste but I confess I don't really care very much I see no real advantage that's my",
    "start": "977339",
    "end": "983160"
  },
  {
    "text": "representation here as an old school programmer I'd probably prefer the explicit nature of the loops a little bit but it really doesn't really make",
    "start": "983160",
    "end": "989040"
  },
  {
    "text": "that much difference to me the verbose nature of java in this example certainly doesn't show the map in its best light here as a result of that I thought I'd",
    "start": "989040",
    "end": "995880"
  },
  {
    "text": "write it in Python instead and I have to show you this little Quirk because it's funny you can't call print from a Lambda",
    "start": "995880",
    "end": "1001220"
  },
  {
    "text": "in Python so you end up doing this instead which is certainly worse than the loop more technically though",
    "start": "1001220",
    "end": "1006740"
  },
  {
    "text": "can't call print from a Lambda I don't do enough python but that's funny right that's kind of funny functional",
    "start": "1006740",
    "end": "1014180"
  },
  {
    "text": "program is a no progress program is talk about the value of different ideas each picked to show off the advantages of their preferred approach usually hello",
    "start": "1014180",
    "end": "1020060"
  },
  {
    "text": "programmers talk about the value of modeling the problem I value the high modeling the problem holy cow again when",
    "start": "1020060",
    "end": "1026178"
  },
  {
    "text": "someone Casey and I talked about this these white board programmers modeling",
    "start": "1026179",
    "end": "1032058"
  },
  {
    "text": "problems to hell with that it's always [ __ ] it's almost always universally",
    "start": "1032059",
    "end": "1037520"
  },
  {
    "text": "[ __ ] I'd say the only time that it's really useful to model your own like problems ahead of time like this and to",
    "start": "1037520",
    "end": "1044780"
  },
  {
    "text": "try to guess how your shapes and everything should be uh really always comes down",
    "start": "1044780",
    "end": "1051980"
  },
  {
    "text": "to you kind of learning how to like program well and I there there just comes this point where that exercise is",
    "start": "1051980",
    "end": "1058460"
  },
  {
    "text": "futile because one you'll never know all the conditions and two requirements change and so any amount of time spent",
    "start": "1058460",
    "end": "1065539"
  },
  {
    "text": "other than really high level uh high-level whiteboard stuff",
    "start": "1065539",
    "end": "1070940"
  },
  {
    "text": "doesn't make any sense uh proof of concept faster than whiteboard yeah most people you should be able to proof of",
    "start": "1070940",
    "end": "1076160"
  },
  {
    "text": "concept faster than proof of concept learning from it and building the final",
    "start": "1076160",
    "end": "1081860"
  },
  {
    "text": "product will always be faster than whiteboarding building it off the Whiteboard discovering why you're wrong",
    "start": "1081860",
    "end": "1087580"
  },
  {
    "text": "rebuilding it re-going back to the Whiteboard to fix your problems and then building the final product uh uml",
    "start": "1087580",
    "end": "1093620"
  },
  {
    "text": "diagrams are full of [ __ ] 100 100 anyone that tells you otherwise",
    "start": "1093620",
    "end": "1101299"
  },
  {
    "text": "I would be very careful digesting their opinion take a moment",
    "start": "1101299",
    "end": "1106640"
  },
  {
    "text": "and really I mean you can challenge this okay I am not the end-all of of programmers",
    "start": "1106640",
    "end": "1111799"
  },
  {
    "text": "I could be wrong but currently that is [ __ ] okay hard [ __ ]",
    "start": "1111799",
    "end": "1119600"
  },
  {
    "text": "okay level navigability of the problem that I get from oh oh that's true but this model isn't telling you the province of",
    "start": "1119600",
    "end": "1125419"
  },
  {
    "text": "object orientation there's a good presentation from Marco orientation there it is a functional approach a domain-driven design that I particularly",
    "start": "1125419",
    "end": "1131419"
  },
  {
    "text": "enjoyed I liked Marco's idea that the core domain of the system is functional and the i o",
    "start": "1131419",
    "end": "1136820"
  },
  {
    "text": "you know I do like his idea uh but these spaces right here made me completely uh",
    "start": "1136820",
    "end": "1141860"
  },
  {
    "text": "discredit everything he has to say uh because I am a nitpicky son of a [ __ ] uh right there you know when I see you",
    "start": "1141860",
    "end": "1147919"
  },
  {
    "text": "put little spaces in between your arguments I just immediately go you know I just can't uh can't trust anything you",
    "start": "1147919",
    "end": "1153080"
  },
  {
    "text": "gotta say the edges is always not because it has side effects after I've stored something in a file or",
    "start": "1153080",
    "end": "1158900"
  },
  {
    "text": "a database which is shared mutable State I really want the state to have changed this is an interesting insight and certainly based on relationship to how",
    "start": "1158900",
    "end": "1165020"
  },
  {
    "text": "our usually Design Systems even though as I said before I think of my Approach as more object-oriented than functional",
    "start": "1165020",
    "end": "1170539"
  },
  {
    "text": "definitions of oo usually include abstraction which allows us to hide unnecessary details inherit",
    "start": "1170539",
    "end": "1175820"
  },
  {
    "text": "I don't like that word okay I'm a 1D programmer I like one level of",
    "start": "1175820",
    "end": "1181460"
  },
  {
    "text": "abstraction anytime you're working with an abstraction of abstractions it becomes this Insanity to refactor like",
    "start": "1181460",
    "end": "1189380"
  },
  {
    "text": "the moment you need to change something you have to change so many fundamental",
    "start": "1189380",
    "end": "1194980"
  },
  {
    "text": "assumptions wow that's not even assumptions about what you've done and it just like blows things up I find that",
    "start": "1194980",
    "end": "1203059"
  },
  {
    "text": "abstractions though they look nice in their end product like you know you tell me tell me this",
    "start": "1203059",
    "end": "1209120"
  },
  {
    "text": "does not feel good when you come up with an abstraction that when you write it out in like its final line it's like one",
    "start": "1209120",
    "end": "1215299"
  },
  {
    "text": "line of code and you're like dot do that dot done that boom look at how good I am",
    "start": "1215299",
    "end": "1221960"
  },
  {
    "text": "you know you're feeling so smooth and then somebody comes along it's like uh I need to add one and you're just",
    "start": "1221960",
    "end": "1229220"
  },
  {
    "text": "like my life I hate myself and I hate everything here and I'm gonna quit my job right like it's just like you",
    "start": "1229220",
    "end": "1235700"
  },
  {
    "text": "somehow ruin your life over like the simplest request because you think you have something great and then all of a",
    "start": "1235700",
    "end": "1241340"
  },
  {
    "text": "sudden you're completely wrong because your abstraction just slightly changes and now you're refactoring an",
    "start": "1241340",
    "end": "1246380"
  },
  {
    "text": "abstraction that's built on an abstraction that's built on an abstraction in your whole life crumbles hate it since defining one type of thing",
    "start": "1246380",
    "end": "1253100"
  },
  {
    "text": "in terms of another polymorphism being able to access things of different types through the same interface and encapsulation which allows us to hide",
    "start": "1253100",
    "end": "1259460"
  },
  {
    "text": "polymorphism isn't just an oh oh principle right I mean polymorphism in some sense exists in functional right I",
    "start": "1259460",
    "end": "1265400"
  },
  {
    "text": "mean isn't that just a trait at this point you're just treating an object with a with the ability to you know you have X",
    "start": "1265400",
    "end": "1272780"
  },
  {
    "text": "different types but they all have a singular way in which you can access something about it is that really you",
    "start": "1272780",
    "end": "1278299"
  },
  {
    "text": "know polymorphism is kind of like everything yeah okay because people use this term",
    "start": "1278299",
    "end": "1284780"
  },
  {
    "text": "sometimes like as if it's an oo specific technique it's just like well",
    "start": "1284780",
    "end": "1290799"
  },
  {
    "text": "just because some got a function on it don't don't mean it baby",
    "start": "1291880",
    "end": "1298940"
  },
  {
    "text": "an interesting detail I think the most functional problems all of these are good things encapsulation is also not",
    "start": "1300080",
    "end": "1305960"
  },
  {
    "text": "really a specifically oo idea it's just making it so that there's some data",
    "start": "1305960",
    "end": "1311840"
  },
  {
    "text": "that's un like grabbable or some State that's captured in something right even like just a plain old struct",
    "start": "1311840",
    "end": "1318860"
  },
  {
    "text": "that has some private members and some functions I mean is that oo or is that just encapsulation you know again these terms",
    "start": "1318860",
    "end": "1325520"
  },
  {
    "text": "are very vague and they're very hard for me to understand in fact all of these are principles that also underping functional programming it's just that we",
    "start": "1325520",
    "end": "1331880"
  },
  {
    "text": "describe those things in somewhat different terms there we go functional programmers talk about declarative programming which is really a form of",
    "start": "1331880",
    "end": "1337220"
  },
  {
    "text": "abstraction and information hiding and the use of types which is based on the idea of polymorphism inheritance though is tricky because while it is clearly",
    "start": "1337220",
    "end": "1343580"
  },
  {
    "text": "true that it has some strong benefits it's also often been misused and can have some serious I'd say that your",
    "start": "1343580",
    "end": "1348980"
  },
  {
    "text": "argument for inheritance being clearly good really comes down to like what I can think of right now I still have this",
    "start": "1348980",
    "end": "1355280"
  },
  {
    "text": "just one use case that I think it's good and that's it and I know there's other ones like it but it's a very rare",
    "start": "1355280",
    "end": "1361880"
  },
  {
    "text": "problem set uh yeah composition's not even on here",
    "start": "1361880",
    "end": "1368299"
  },
  {
    "text": "um anyways the only time I can think oh oh is really really or The Inheritance",
    "start": "1368299",
    "end": "1374720"
  },
  {
    "text": "specifically is really good is when you have a method that's directly tied to a property that's needed",
    "start": "1374720",
    "end": "1382659"
  },
  {
    "text": "but you don't want to implement or state that property so I can think about right away I think something that's really",
    "start": "1383059",
    "end": "1389480"
  },
  {
    "text": "great here hold on I know where this is Cobalt by look at that Cobalt by the way you know what I'm talking about",
    "start": "1389480",
    "end": "1395659"
  },
  {
    "text": "um I uh me personally do I have any something that ends with TS do I have anything there you go I'll go to this",
    "start": "1395659",
    "end": "1400820"
  },
  {
    "text": "guy uh something that really makes me happy I think in general is uh extends event emitter right",
    "start": "1400820",
    "end": "1407840"
  },
  {
    "text": "it's just one of those things that I find to be a fine abstraction for oo and I'm not particularly sure how you do",
    "start": "1407840",
    "end": "1414440"
  },
  {
    "text": "this in rust without say a a macro right so if you're using a macro it kind of",
    "start": "1414440",
    "end": "1420500"
  },
  {
    "text": "sucks to do you know I'm not like loving the macro approach here for the specific thing and so this",
    "start": "1420500",
    "end": "1426860"
  },
  {
    "text": "is like one of those few items that I'm fine with being here because then you can just do that blah blah blah and now",
    "start": "1426860",
    "end": "1432740"
  },
  {
    "text": "my rectangle has a DOT on and uh I mean no a trait I mean traits only",
    "start": "1432740",
    "end": "1438740"
  },
  {
    "text": "work you can only have default implementations on a trait if the thing again event emitter requires a property",
    "start": "1438740",
    "end": "1444799"
  },
  {
    "text": "to be present it requires something so you'd have to make a trait and then a blanket",
    "start": "1444799",
    "end": "1450559"
  },
  {
    "text": "implementation off like off of a couple traits then you could do it but that would require you to still Implement a",
    "start": "1450559",
    "end": "1456919"
  },
  {
    "text": "trait per type you know what I mean",
    "start": "1456919",
    "end": "1461020"
  },
  {
    "text": "I've never saw the diamond problem in a real code base if you haven't been programming long enough Sun drawbacks if you create a virtual window",
    "start": "1462679",
    "end": "1469700"
  },
  {
    "text": "inheritance on your display baby it's your inheritance that you can resize or click it object orientation was the",
    "start": "1469700",
    "end": "1474860"
  },
  {
    "text": "technical it's not technically true step that really liberated code sharing and it's no surprise that o and the GUI came",
    "start": "1474860",
    "end": "1481340"
  },
  {
    "text": "from the same place Xerox Park it's pronounced GUI okay",
    "start": "1481340",
    "end": "1486799"
  },
  {
    "text": "it's not pronounced GUI okay we all call it GUI everyone knows it I know it you",
    "start": "1486799",
    "end": "1493760"
  },
  {
    "text": "know it the GUI is deeply an object-oriented inspired idea when non-o programmers",
    "start": "1493760",
    "end": "1499220"
  },
  {
    "text": "poke fun at oh though they're often poking fun primarily inheritance that's because you can make horrible misses with inheritance to the extent that",
    "start": "1499220",
    "end": "1505760"
  },
  {
    "text": "people who prefer simple binary answers to things will often say inheritance is bad of course inheritance isn't bad but",
    "start": "1505760",
    "end": "1510860"
  },
  {
    "text": "bad inheritance I'd say inheritance generally is bad I'm so confident in that",
    "start": "1510860",
    "end": "1517640"
  },
  {
    "text": "we're gonna go on Twitter where people are gonna get angry inheritance inherit enhance enhance is",
    "start": "1517640",
    "end": "1525380"
  },
  {
    "text": "generally bad to wait send now",
    "start": "1525380",
    "end": "1532100"
  },
  {
    "text": "suck it I don't even know what Jack Ford said but I'm just gonna like it because that's the person that I am",
    "start": "1532100",
    "end": "1539720"
  },
  {
    "text": "okay that's who I am he certainly bad the big mistake in",
    "start": "1539720",
    "end": "1545179"
  },
  {
    "text": "inheritance and I'd probably say programming in general is not to model the problem that you're trying to solve well enough tactical programming is",
    "start": "1545179",
    "end": "1551240"
  },
  {
    "text": "often at risk that's a no true Scotsman thing right you I mean I guess you could",
    "start": "1551240",
    "end": "1556580"
  },
  {
    "text": "you could use inheritance to model any problem it can totally be",
    "start": "1556580",
    "end": "1562940"
  },
  {
    "text": "done all right I I get it you can solve any problem with inheritance it's not like it's an incapable problem it's just",
    "start": "1562940",
    "end": "1570260"
  },
  {
    "text": "how does it scale is the real question and the fact that you have to just sit down and try to write out on paper your",
    "start": "1570260",
    "end": "1577580"
  },
  {
    "text": "problem regularly to try to understand how to make changes in the system or to",
    "start": "1577580",
    "end": "1582919"
  },
  {
    "text": "be able to model it in general to me just immediately says that there's something fundamentally wrong here",
    "start": "1582919",
    "end": "1588620"
  },
  {
    "text": "because it's not tied directly to programming in the real world which often is messy and way harder and then",
    "start": "1588620",
    "end": "1594200"
  },
  {
    "text": "you have to keep doing this back and forth like I find that when I'm doing a really strong oo inheritance style",
    "start": "1594200",
    "end": "1599360"
  },
  {
    "text": "things I actually am thinking on paper I actually do draw all things because",
    "start": "1599360",
    "end": "1605000"
  },
  {
    "text": "that's the only way for my small P brain to understand the shape and the size whereas when I do it more just like as a",
    "start": "1605000",
    "end": "1611179"
  },
  {
    "text": "series of functions and some strategic objects here and there and maybe some caching for some fast stuff every now",
    "start": "1611179",
    "end": "1616460"
  },
  {
    "text": "and then so some classes here and there then yeah then I I don't need need to model anything else out like I can just",
    "start": "1616460",
    "end": "1622220"
  },
  {
    "text": "blaze through the program and then the spots that suck the spots that are kind of a bit convoluted they usually always",
    "start": "1622220",
    "end": "1628820"
  },
  {
    "text": "start off as a utils folder right it's just like hey here's a bunch of [ __ ] I don't know where to put them start doing",
    "start": "1628820",
    "end": "1633860"
  },
  {
    "text": "that and once I start seeing a pattern or some things that are really needed I'm like you know what like this thing",
    "start": "1633860",
    "end": "1639140"
  },
  {
    "text": "right here I need to move over here and make it a first class citizen because it's just really needed yeah it sucks to",
    "start": "1639140",
    "end": "1644600"
  },
  {
    "text": "refactor but it generally makes it so that I know kind of what I want and how to use it I don't know this whole idea",
    "start": "1644600",
    "end": "1650419"
  },
  {
    "text": "that this whole modeling plan is crazy to me it's a good thing tactical crap for",
    "start": "1650419",
    "end": "1656419"
  },
  {
    "text": "example in Java a set inherits from a vector and properties inherit from hash tables this is tactical crap a set isn't",
    "start": "1656419",
    "end": "1662779"
  },
  {
    "text": "a vector properties are not hash tables this was a lazy choice because it made implementing sets and properties easier",
    "start": "1662779",
    "end": "1668059"
  },
  {
    "text": "but I mean to be completely Fair",
    "start": "1668059",
    "end": "1674240"
  },
  {
    "text": "a set you know you can imagine that it is a",
    "start": "1674240",
    "end": "1679460"
  },
  {
    "text": "vector underneath the hood right that's that's really all a set is it's either an array which you have to double the",
    "start": "1679460",
    "end": "1686720"
  },
  {
    "text": "size of and copy everything over or it's a vector either way it's kind of like the same",
    "start": "1686720",
    "end": "1693140"
  },
  {
    "text": "thing you know you get really are you getting anything out of it I I mean I can understand why they did that I mean",
    "start": "1693140",
    "end": "1698480"
  },
  {
    "text": "I just don't like the whole idea of inheritance just use a vector it is nonsense really I said he's not a",
    "start": "1698480",
    "end": "1704360"
  },
  {
    "text": "vector and results in all sorts of features of sets in Java that make no sense at all what does index of an entry",
    "start": "1704360",
    "end": "1710840"
  },
  {
    "text": "mean for a set yeah why would I ever wish to rehash my properties this isn't the fault of inheritance why do you",
    "start": "1710840",
    "end": "1716960"
  },
  {
    "text": "think you can rehash it properties is there any reason other than it's purely it actually is just purely due to inheritance if that's the case that's",
    "start": "1716960",
    "end": "1722960"
  },
  {
    "text": "just crazy you should just use a vector not inherited from a vector I don't know uh sets are sometimes sets",
    "start": "1722960",
    "end": "1730820"
  },
  {
    "text": "are often I mean sets let's see it I mean a set is typically represented by a",
    "start": "1730820",
    "end": "1736220"
  },
  {
    "text": "some contiguous chunk of memory somewhere and that's usually on the Heap",
    "start": "1736220",
    "end": "1742159"
  },
  {
    "text": "and you put that crap in there by performing a hash set",
    "start": "1742159",
    "end": "1747620"
  },
  {
    "text": "and if there's a collision you may have a linked list or you may have uh quadratic slash linear back off but I",
    "start": "1747620",
    "end": "1754220"
  },
  {
    "text": "think the big thing is now it's all about they can be Beatrice too but I think the big thing is now it's all about doing uh",
    "start": "1754220",
    "end": "1760340"
  },
  {
    "text": "uh linked lists in those spots and we can certainly make poor design",
    "start": "1760340",
    "end": "1767299"
  },
  {
    "text": "choices in any language even functional languages I think that the key decisions in software are outside the technical",
    "start": "1767299",
    "end": "1772580"
  },
  {
    "text": "detail of individual languages largely or programming language paradigms for that matter if you'd like to see what I mean take a look at my training course",
    "start": "1772580",
    "end": "1778399"
  },
  {
    "text": "better software faster it describes what it takes to build high quality software and why that matters there's a link in the description below",
    "start": "1778399",
    "end": "1784940"
  },
  {
    "text": "in Marco's presentation he quotes functional programmers saying functional programming is great because it has immutable data structures a stateless",
    "start": "1784940",
    "end": "1790880"
  },
  {
    "text": "programming model pure functions and no Loops these things make it easier to read",
    "start": "1790880",
    "end": "1796658"
  },
  {
    "text": "I don't really care for immutable data structures I don't",
    "start": "1800600",
    "end": "1806659"
  },
  {
    "text": "I don't think these really offer a huge benefit I think they they do hurt performance",
    "start": "1806659",
    "end": "1813200"
  },
  {
    "text": "if you're having to make a copy to make a change um you know it's not that great for memory",
    "start": "1813200",
    "end": "1820960"
  },
  {
    "text": "just is what it is using about your code they say only most oo languages I can easily make immutable data structures",
    "start": "1821360",
    "end": "1827539"
  },
  {
    "text": "program stateless code create pure functions and avoid Loops if I can you make stateless code in oo",
    "start": "1827539",
    "end": "1834580"
  },
  {
    "text": "can you",
    "start": "1834580",
    "end": "1837820"
  },
  {
    "text": "copy on right going uh yeah I don't know how I feel about some of those things I mean I like I like the idea",
    "start": "1839600",
    "end": "1845659"
  },
  {
    "text": "but I also don't like the idea choose to even before choosing to use the functional features that I've been added",
    "start": "1845659",
    "end": "1851360"
  },
  {
    "text": "to most modern languages these days the real value in a more functional approach to programming as I perceive is really",
    "start": "1851360",
    "end": "1857360"
  },
  {
    "text": "in three areas treating functions as variables immutability and declarative programming functions as variables is a",
    "start": "1857360",
    "end": "1863480"
  },
  {
    "text": "significant step once again you don't need a functional language to do this though I used to do versions of this in assembly C plus plus Java and python but",
    "start": "1863480",
    "end": "1870080"
  },
  {
    "text": "having direct language support certainly makes it nicer to use this allows us to pass one function as an argument to another we can then call that function",
    "start": "1870080",
    "end": "1876200"
  },
  {
    "text": "yeah if you have ever come up to very similar bits the first class like this then this ability to pass a function is",
    "start": "1876200",
    "end": "1883039"
  },
  {
    "text": "an arguments okay so this is something that people say all the time and I think it's just very difficult for people to understand",
    "start": "1883039",
    "end": "1889100"
  },
  {
    "text": "and I think everyone has their own version of this right because people call react a declarative programming",
    "start": "1889100",
    "end": "1894320"
  },
  {
    "text": "language but fundamentally when you start calling",
    "start": "1894320",
    "end": "1899960"
  },
  {
    "text": "like you any of these hooks and things like that you're like you start falling off",
    "start": "1899960",
    "end": "1907899"
  },
  {
    "text": "the declaring nature and you start falling into this procedural business and then you start putting things",
    "start": "1908480",
    "end": "1914419"
  },
  {
    "text": "together I'm going to keep calling it a framework dude it's funny that people say these",
    "start": "1914419",
    "end": "1919460"
  },
  {
    "text": "phrases because you know for calling it a funk for for calling it a declarative programming language I've seen a lot and",
    "start": "1919460",
    "end": "1926840"
  },
  {
    "text": "a lot of um you know ternaries saying which function which type to use and all this",
    "start": "1926840",
    "end": "1933220"
  },
  {
    "text": "feels a little procedural sometimes being smashed into declarative",
    "start": "1933220",
    "end": "1939080"
  },
  {
    "text": "programming variables is a significant step once again you don't need a functional language",
    "start": "1939080",
    "end": "1945399"
  },
  {
    "text": "but having direct language support certainly makes it nicer to use this allows us to pass one function as an",
    "start": "1946899",
    "end": "1952279"
  },
  {
    "text": "argument to another we can then call that function if you have ever come across two very similar bits of code but that are just",
    "start": "1952279",
    "end": "1957799"
  },
  {
    "text": "slightly different like this then this ability to patch a function as an argument is a really nice tool to use to simplify and generalize the code this is",
    "start": "1957799",
    "end": "1964279"
  },
  {
    "text": "also the idea behind things like event handlers oh hang on I know idea immutability is an important tool but",
    "start": "1964279",
    "end": "1970580"
  },
  {
    "text": "it's never the only tool is event handling a idea",
    "start": "1970580",
    "end": "1977600"
  },
  {
    "text": "it is how the hell does a Berkeley socket work then",
    "start": "1987980",
    "end": "1994179"
  },
  {
    "text": "if only there was some sort of event that happened and then you had to do something with that gosh",
    "start": "1996440",
    "end": "2004480"
  },
  {
    "text": "if only there was something out there that was some sort of signal perhaps",
    "start": "2004480",
    "end": "2009820"
  },
  {
    "text": "from somewhere to let you know that something else was ready",
    "start": "2009820",
    "end": "2015159"
  },
  {
    "text": "hmm yeah you're probably right it's probably an o-o concept definitely no concept has nothing to do",
    "start": "2015159",
    "end": "2022179"
  },
  {
    "text": "with anything else you're right sorry things because otherwise Berkeley your socket this is one reason why I liked",
    "start": "2022179",
    "end": "2028840"
  },
  {
    "text": "Marco's points always has side effects because if he didn't your code isn't doing anything I",
    "start": "2028840",
    "end": "2034299"
  },
  {
    "text": "agree thank you how do Hardware interrupts work I don't know kind of sounds like an event",
    "start": "2034299",
    "end": "2040740"
  },
  {
    "text": "you haven't interrupt that exists with this hmm can I hand you",
    "start": "2041500",
    "end": "2047559"
  },
  {
    "text": "a function okay that's not a that's not a that's not an event handler that's an interrupt Handler they're different see that one's imperative programming",
    "start": "2047559",
    "end": "2056500"
  },
  {
    "text": "but when you called an event handler it's only oop",
    "start": "2056560",
    "end": "2060898"
  },
  {
    "text": "shut up but it's also never the whole answer at least in the purest sense of no mutable State at the level of whole",
    "start": "2062700",
    "end": "2068800"
  },
  {
    "text": "systems there are very few Corner cases where genuinely stateless systems make any sense and then yeah context where",
    "start": "2068800",
    "end": "2075339"
  },
  {
    "text": "code is acting as some kind of pipe that changes the data in some way this idea is extremely valuable as part of a system a simplifying step but in whole",
    "start": "2075339",
    "end": "2082240"
  },
  {
    "text": "systems there's always State changing somewhere so the idea the tool I'm writing right now is this it's just it's",
    "start": "2082240",
    "end": "2088540"
  },
  {
    "text": "literally just something that gets data from up to six separate data sources",
    "start": "2088540",
    "end": "2095740"
  },
  {
    "text": "puts them together does some calculations on top of it deep log inspections and shits out answers that's",
    "start": "2095740",
    "end": "2101980"
  },
  {
    "text": "all it does right and it's stateless there is no State uh you can mock the data meaning that I can make it so that",
    "start": "2101980",
    "end": "2108220"
  },
  {
    "text": "when it tries to do these calls out to these different data sources I can pre-provide values for those such that",
    "start": "2108220",
    "end": "2114640"
  },
  {
    "text": "it's none the wiser but nonetheless it is just a stateless data processing tool a lot of Dev tools",
    "start": "2114640",
    "end": "2120640"
  },
  {
    "text": "tend to be more stateless processing tools you know what I mean they just take in stuff and take out stuff",
    "start": "2120640",
    "end": "2126099"
  },
  {
    "text": "nearest stateless systems is never an absolute where you deal with the state changes rather than eliminating them all",
    "start": "2126099",
    "end": "2131560"
  },
  {
    "text": "together minimizing side effects is great in the right place and has been with hindsight an important aspect of my",
    "start": "2131560",
    "end": "2136900"
  },
  {
    "text": "own approach to object-oriented design for a very long time as Michael feathers said to me in our chat a few months ago object-oriented programming looks a lot",
    "start": "2136900",
    "end": "2143320"
  },
  {
    "text": "like functional program when it's done right but whether you are",
    "start": "2143320",
    "end": "2147838"
  },
  {
    "text": "sometimes I feel like I haven't had enough functional programming knowledge to really understand that last statement because when someone says when it's done",
    "start": "2152440",
    "end": "2159099"
  },
  {
    "text": "right it will look like functional programming is that true",
    "start": "2159099",
    "end": "2164220"
  },
  {
    "text": "I don't know I don't know how to qualify that statement",
    "start": "2164920",
    "end": "2169440"
  },
  {
    "text": "I think I'm just stupid sometimes",
    "start": "2173140",
    "end": "2176940"
  },
  {
    "text": "because I don't know how to argue against that statement because I don't know because I've never been able to make it",
    "start": "2178420",
    "end": "2184780"
  },
  {
    "text": "into functional programming therefore my",
    "start": "2184780",
    "end": "2189599"
  },
  {
    "text": "self doesn't see how that's possible I don't know where he's going developing an object-oriented fashion or functional there are times when you want side",
    "start": "2190000",
    "end": "2196480"
  },
  {
    "text": "effects we've already talked about the obvious times when you're doing I O of some kind if you want to write it to a file the state that the file is in",
    "start": "2196480",
    "end": "2202720"
  },
  {
    "text": "matters sure you can clone any mutable snapshots of a picture of that file but immediately you do that it is at least",
    "start": "2202720",
    "end": "2208960"
  },
  {
    "text": "potentially out of date because the real file on the disk is shared maybe someone else changed the file or the operating",
    "start": "2208960",
    "end": "2214359"
  },
  {
    "text": "system deleted it while you're in the process of dealing with your copy now your immutable snapshot copy of the files run the changing the file",
    "start": "2214359",
    "end": "2221680"
  },
  {
    "text": "I've never ran into that problem you know what I mean you know what I mean I've never really had this problem of this of what he's",
    "start": "2221680",
    "end": "2228820"
  },
  {
    "text": "talking about that I mean I think a better example is databases right you try to read something from a database you display it but by the time you",
    "start": "2228820",
    "end": "2234339"
  },
  {
    "text": "display it happens all the time on Twitter someone's deleted the Tweet you're trying to like and it's like sorry that that tweet has been deleted I",
    "start": "2234339",
    "end": "2241359"
  },
  {
    "text": "mean I get that that makes sense um is that a problem I don't know isn't",
    "start": "2241359",
    "end": "2246640"
  },
  {
    "text": "that just the definition of a chaotic system by lowering the database is always a side effect or another reason too it's a side effect of working with",
    "start": "2246640",
    "end": "2252760"
  },
  {
    "text": "computers that forget things when we turn them off if I change the balance in my account the fact that I need to store",
    "start": "2252760",
    "end": "2257859"
  },
  {
    "text": "that change somewhere isn't my goal the change in the balance is my goal so the storage is just a side effect functional",
    "start": "2257859",
    "end": "2263740"
  },
  {
    "text": "programming languages of course support this kind of thing and some supports ideas like monads that allow us to break",
    "start": "2263740",
    "end": "2268900"
  },
  {
    "text": "the pure functions rule of functional programming by adding side effects but I'd argue that this is only a special",
    "start": "2268900",
    "end": "2274060"
  },
  {
    "text": "case of a more general idea one of my favorites architectural approaches is to build message-based reactive systems these things are like state for actors",
    "start": "2274060",
    "end": "2281020"
  },
  {
    "text": "communicating only via asynchronous messages one reason that I like these systems quite so much is that they allow",
    "start": "2281020",
    "end": "2286300"
  },
  {
    "text": "me to separate The Accidental complexity and the essential complexity in my system",
    "start": "2286300",
    "end": "2291240"
  },
  {
    "text": "is this a subtle support for rxjs",
    "start": "2292540",
    "end": "2297000"
  },
  {
    "text": "signals do we have some other hot buzzwords that we can throw in here",
    "start": "2302040",
    "end": "2308020"
  },
  {
    "text": "hooks is this hooks let's imagine I have a bank account of some kind and I want to credit it in my",
    "start": "2308020",
    "end": "2315160"
  },
  {
    "text": "favorite actor-based approach I may send a credit message with the value that I want to add my infrastructure will manage the i o it will save the message",
    "start": "2315160",
    "end": "2321400"
  },
  {
    "text": "on its way to my service and only if the message is safely stored or clustered or whatever else will it forward it then to",
    "start": "2321400",
    "end": "2326500"
  },
  {
    "text": "my service at this point my service will update the value of the account that it holds to it",
    "start": "2326500",
    "end": "2331540"
  },
  {
    "text": "to create a new total balance is this mutable state or not is this oo or not",
    "start": "2331540",
    "end": "2336820"
  },
  {
    "text": "I'd say that this is a very oh way of thinking and working my actors embody Rich stateful domain models of them I",
    "start": "2336820",
    "end": "2343000"
  },
  {
    "text": "would say this is neither a functional or oo this is just modeling a complex system right these are each individual pieces",
    "start": "2343000",
    "end": "2349839"
  },
  {
    "text": "of a larger complex system that all fit together in there whatever right I mean you could imagine this is some sort of",
    "start": "2349839",
    "end": "2354940"
  },
  {
    "text": "SNS system going on here in Amazon and you know or sqs I always forget",
    "start": "2354940",
    "end": "2361359"
  },
  {
    "text": "which ones which at this point I haven't done it so long and it's just like a series of [ __ ] that happens I don't know",
    "start": "2361359",
    "end": "2366940"
  },
  {
    "text": "how this is either or right is this is just a thing it's a state machine yeah it's sqs unfortunately sqs State machine",
    "start": "2366940",
    "end": "2374740"
  },
  {
    "text": "International systems and The Changing State an important one that must be represented somewhere is clearly",
    "start": "2374740",
    "end": "2379900"
  },
  {
    "text": "expressed and easy to understand and can't happen without the side hell yeah you see all those numbers going up okay",
    "start": "2379900",
    "end": "2386700"
  },
  {
    "text": "I want to know that my total is even after a crash or a restart if I want to know what the balance is",
    "start": "2386700",
    "end": "2392079"
  },
  {
    "text": "for my account I can query with this stake for copy but I can also discard this copy and recreate it into exactly the same state as before by replaying",
    "start": "2392079",
    "end": "2397839"
  },
  {
    "text": "the message of the messages that I stored but I can also discard this copy and recreate it in exactly the same state as",
    "start": "2397839",
    "end": "2403180"
  },
  {
    "text": "before by replaying the message that I stored earlier I can also it's into exactly the same state as before by replaying the message",
    "start": "2403180",
    "end": "2408700"
  },
  {
    "text": "of the messages that I stored but I can also discard this copy and recreate it in exactly the same state as",
    "start": "2408700",
    "end": "2413859"
  },
  {
    "text": "before by replaying the message that I stored earlier so once again is this state here mutable or not",
    "start": "2413859",
    "end": "2419200"
  },
  {
    "text": "actually I think it's kind of both my point here is not to sing the Praises of reactive systems well maybe just a bit",
    "start": "2419200",
    "end": "2424420"
  },
  {
    "text": "but to point out that the line between object orientation and functional programming and maybe even actors is all",
    "start": "2424420",
    "end": "2429940"
  },
  {
    "text": "a bit more blurry than the culture wars would sometimes suggest yes it is sensible to me it's very hard for me to",
    "start": "2429940",
    "end": "2436240"
  },
  {
    "text": "follow this example being an overarching like he's talking about systems interacting with other systems here I am unsure if at any point you can say",
    "start": "2436240",
    "end": "2445060"
  },
  {
    "text": "you can dictate functional or object orienting oh dang it now he got me going with this whole orientation business you",
    "start": "2445060",
    "end": "2452200"
  },
  {
    "text": "can't say it's either or because you're only looking at like you know the HTML of it or the HTTP of it a series of",
    "start": "2452200",
    "end": "2459880"
  },
  {
    "text": "transactions that are happening between many systems right there's just a protocol between them whatever the protocol is now this could be all in the",
    "start": "2459880",
    "end": "2466359"
  },
  {
    "text": "same system this could be all one language one system or it could be something else dude I know I'm getting orientationed",
    "start": "2466359",
    "end": "2473820"
  },
  {
    "text": "but is there really a big difference between having a function that takes two arguments one of them supplied by",
    "start": "2474240",
    "end": "2479920"
  },
  {
    "text": "another function that defines its value and an object with a private member variable that is used instead of the",
    "start": "2479920",
    "end": "2485140"
  },
  {
    "text": "function supplied variable sure the oocode here is more verbose but that's a different question really",
    "start": "2485140",
    "end": "2490780"
  },
  {
    "text": "all that's really going on here is how we decide to represent the sequencing of the function calls uh hold on let's go",
    "start": "2490780",
    "end": "2496660"
  },
  {
    "text": "back and look at this code for a quick second I mean I see what he's trying to say here uh this whole idea of just creating",
    "start": "2496660",
    "end": "2504339"
  },
  {
    "text": "something new to calculate this one thing that just seems like crazy talk right",
    "start": "2504339",
    "end": "2510820"
  },
  {
    "text": "like why would you do this versus that it makes no sense you just use a function right why would you create an",
    "start": "2510820",
    "end": "2517240"
  },
  {
    "text": "object just to hand it in a variable and then a second variable to get the result out to do the result right it makes no",
    "start": "2517240",
    "end": "2525400"
  },
  {
    "text": "sense this this is nonsensical code right you're adding just so much complexity for no apparent reason it's",
    "start": "2525400",
    "end": "2530560"
  },
  {
    "text": "just a function just throw that crap on the stack and add some values or whatever you're doing sure the other",
    "start": "2530560",
    "end": "2536680"
  },
  {
    "text": "code here is more verbose but that's a different question really all that's really going on here is how we decide to",
    "start": "2536680",
    "end": "2542440"
  },
  {
    "text": "represent the sequencing of the function calls we could debate which one's easier to read and there are arguments on both",
    "start": "2542440",
    "end": "2547480"
  },
  {
    "text": "sides but I do believe that if you're up I don't think there's an argument on the other side for that one",
    "start": "2547480",
    "end": "2553619"
  },
  {
    "text": "like it had to see a more complete example to understand if there's an argument I'd minimize typing we're already looking in the wrong place",
    "start": "2553720",
    "end": "2559780"
  },
  {
    "text": "there is an awful lot of typing in assembler programs after all optimizing for thinking is much more important my point is not to rubbish",
    "start": "2559780",
    "end": "2566500"
  },
  {
    "text": "functional programming I uh you know as a programmer people always",
    "start": "2566500",
    "end": "2571900"
  },
  {
    "text": "say this take which is like oh I spend most of my time thinking what are you doing in your life I spend",
    "start": "2571900",
    "end": "2578140"
  },
  {
    "text": "most my time trying to get my thoughts out of my head into the editor that is by far the greatest majority of time I",
    "start": "2578140",
    "end": "2584859"
  },
  {
    "text": "spend every every week is getting what's up in here through here",
    "start": "2584859",
    "end": "2591520"
  },
  {
    "text": "my point is that I think that the debate I got to meet somebody that spends more time just thinking like what the hell are you thinking",
    "start": "2591520",
    "end": "2598119"
  },
  {
    "text": "about when I hear that I think of someone who doesn't really know how programming",
    "start": "2598119",
    "end": "2604839"
  },
  {
    "text": "works and I don't mean that in like a pejorative sense right like you're just not familiar with the concept say of some good async programming and so you",
    "start": "2604839",
    "end": "2611079"
  },
  {
    "text": "sit there and like look at your program trying to suss out why it's not working",
    "start": "2611079",
    "end": "2616240"
  },
  {
    "text": "versus once you've gotten past that point and you just understand how programming works you just make fewer",
    "start": "2616240",
    "end": "2622599"
  },
  {
    "text": "those types of bugs and you spend more time just like trying to get what's in here through here and I I really do hope",
    "start": "2622599",
    "end": "2629920"
  },
  {
    "text": "yeah like if you're making a fine tuning to a legacy system then yeah you spend most of your time just trying to understand the system and I would agree",
    "start": "2629920",
    "end": "2636520"
  },
  {
    "text": "that that's like a completely different function but once they're implementing something once you've understood the system you fall back into this I just",
    "start": "2636520",
    "end": "2643060"
  },
  {
    "text": "gotta get what's in here into here but you know Legacy systems that is a",
    "start": "2643060",
    "end": "2649180"
  },
  {
    "text": "large part of a lot of people's lives so maybe yeah that's different I work in mostly Green Field stuff and I so I think that that's like a huge problem",
    "start": "2649180",
    "end": "2655300"
  },
  {
    "text": "for me it's because due to my working in mostly Green Field I don't have like a strong understanding",
    "start": "2655300",
    "end": "2662319"
  },
  {
    "text": "of what working in a really Legacy system is like anymore but I get I guess I guess it's worked in a 12 year old C",
    "start": "2662319",
    "end": "2667960"
  },
  {
    "text": "plus application and I built my own uh sync player to be able to uh effectively",
    "start": "2667960",
    "end": "2673480"
  },
  {
    "text": "take in sound and video and pretend like it's playing so we could do some performance analysis of our playing",
    "start": "2673480",
    "end": "2678700"
  },
  {
    "text": "tools and so I had to build out that and that was all just like me typing in a",
    "start": "2678700",
    "end": "2683800"
  },
  {
    "text": "completely Legacy system and adding stuff and I don't know it just seemed it didn't I wasn't Bound by thinking there",
    "start": "2683800",
    "end": "2689859"
  },
  {
    "text": "was like a small part that was me learning what the system needs what the values were how to get them in place the",
    "start": "2689859",
    "end": "2696460"
  },
  {
    "text": "expected API then the rest of the time was me make it the thing which was almost purely abounded me being too",
    "start": "2696460",
    "end": "2702339"
  },
  {
    "text": "stupid thing going like I gotta tell you okay I'm doing this I'm doing this I'm doing this and I gotta get this thing",
    "start": "2702339",
    "end": "2707440"
  },
  {
    "text": "out get this thing out get this thing out and then there were some times where I was just like you know the person I said earlier the majority the",
    "start": "2707440",
    "end": "2713140"
  },
  {
    "text": "non-projorative thing I don't understand C plus plus that well so I was using some things wrong and I had to re-understand why they were wrong right",
    "start": "2713140",
    "end": "2719880"
  },
  {
    "text": "that's fun well sound and video is fun long you know you know",
    "start": "2719880",
    "end": "2726280"
  },
  {
    "text": "yeah I I am very I would love the day where I could do a lot of uh the day I can do faster input I'm willing to do it",
    "start": "2726280",
    "end": "2732579"
  },
  {
    "text": "it's it's still a reason why I don't think AI is there because I'm massively faster than AI",
    "start": "2732579",
    "end": "2738040"
  },
  {
    "text": "massively faster than AI because the problem about AI is what it produces other than boilerplate is categorically",
    "start": "2738040",
    "end": "2745300"
  },
  {
    "text": "wrong every time so it's like I have to go fast to massively slow down to find out all the",
    "start": "2745300",
    "end": "2751960"
  },
  {
    "text": "problems where everything's at and then I can speed up really quick and then have to stop and like do this thing again",
    "start": "2751960",
    "end": "2758079"
  },
  {
    "text": "trying to figure out what the hell's happened whereas if I just build it myself I can just be like and I just",
    "start": "2758079",
    "end": "2763359"
  },
  {
    "text": "overall am significantly faster that function will probably be good that's why I like logical boilers sometimes",
    "start": "2763359",
    "end": "2768880"
  },
  {
    "text": "when functional programming is more terse and ters can be good but it can also be bad ultimately depending on how easy the code is to read straw man straw",
    "start": "2768880",
    "end": "2775960"
  },
  {
    "text": "man dumb straw man that's just a dumb straw man I can Minify a code and say look at this this is terse this see not",
    "start": "2775960",
    "end": "2781480"
  },
  {
    "text": "all terse is good that's just a straw man argument don't make that argument you can make much better arguments right uh",
    "start": "2781480",
    "end": "2787660"
  },
  {
    "text": "you can make much much better arguments than that right really really well written rust feels very confusing to me",
    "start": "2787660",
    "end": "2792880"
  },
  {
    "text": "uh when I was first starting out because I didn't understand a lot of the concepts it was very very terse and I",
    "start": "2792880",
    "end": "2798460"
  },
  {
    "text": "couldn't quite grasp all the things that were happening that on the other hand totally get that right just because",
    "start": "2798460",
    "end": "2803859"
  },
  {
    "text": "something's terse does not necessarily mean it's good but don't use minified code as an example of of terse the last",
    "start": "2803859",
    "end": "2810099"
  },
  {
    "text": "time you want to do is that functional program is often soft for a computer the real value of functional programming is the advantage of declarative over",
    "start": "2810099",
    "end": "2815380"
  },
  {
    "text": "imperative programming I've spoken about this before there are certainly significant advantages to expressing some ideas declaratively my approach to",
    "start": "2815380",
    "end": "2822099"
  },
  {
    "text": "test driven development is always to always aim to declare in my tests what I want that's a good take right there that's an extremely good take if you're",
    "start": "2822099",
    "end": "2828400"
  },
  {
    "text": "doing a test and you're doing logic 95 of the time I'll say you're wrong",
    "start": "2828400",
    "end": "2833740"
  },
  {
    "text": "if you cannot declaratively State what you are doing ah you're probably doing it wrong",
    "start": "2833740",
    "end": "2842020"
  },
  {
    "text": "honestly you're probably doing it wrong because it once you start putting in heavy amounts of logic",
    "start": "2842020",
    "end": "2850000"
  },
  {
    "text": "you start needing to test your tests and once you get to that point",
    "start": "2850000",
    "end": "2855819"
  },
  {
    "text": "you're done okay yeah the system to do without it why are you",
    "start": "2855819",
    "end": "2861700"
  },
  {
    "text": "guys still talking about her she doesn't have to say how he does it this means that my tests are a lot more durable to change than Tesla attempt to assert the",
    "start": "2861700",
    "end": "2867460"
  },
  {
    "text": "implementation detail in the code this is the same idea as declarative programming if we can clearly Express the outcome that we'd like to achieve",
    "start": "2867460",
    "end": "2873819"
  },
  {
    "text": "without worrying about how the outcome is achieved then great I see lots of an example of this in examples of",
    "start": "2873819",
    "end": "2878980"
  },
  {
    "text": "functional code but to be honest it's less obvious in people's real code as far as I can see to be fair my exposure",
    "start": "2878980",
    "end": "2884740"
  },
  {
    "text": "to reading other people's functional code is somewhat limited I don't read lots of it so this may be down to the limits of my experience but",
    "start": "2884740",
    "end": "2891099"
  },
  {
    "text": "you should state that up front because the problem is you made this whole 20-minute case about why they're the",
    "start": "2891099",
    "end": "2897220"
  },
  {
    "text": "same and then you kind of just let the you kind of said the quiet part out loud",
    "start": "2897220",
    "end": "2902619"
  },
  {
    "text": "which is you don't have a lot of experience on one side like I don't have a lot of experience on one",
    "start": "2902619",
    "end": "2909400"
  },
  {
    "text": "side I'm definitely not like a hugely functional person my most functional language is is rust and that's not like",
    "start": "2909400",
    "end": "2916300"
  },
  {
    "text": "I wouldn't put that as like I wouldn't categorize it as like functional functional but it's it's it has a lot of",
    "start": "2916300",
    "end": "2921760"
  },
  {
    "text": "functional Concepts but still that doesn't mean I know a lot about it that's why I can't tell you",
    "start": "2921760",
    "end": "2927280"
  },
  {
    "text": "a well-written oo project can it end the same as a functional project I don't",
    "start": "2927280",
    "end": "2932980"
  },
  {
    "text": "know I don't even know if this is the case if the levels of",
    "start": "2932980",
    "end": "2939040"
  },
  {
    "text": "abstraction that functional languages give to us are genuinely as advantageous as functional programs tell us that they are then shouldn't functional Pro",
    "start": "2939040",
    "end": "2945400"
  },
  {
    "text": "projects prove to be a lot faster to develop and produce fewer bugs than non-functional again that's you know that's a very hard",
    "start": "2945400",
    "end": "2951640"
  },
  {
    "text": "statement to measure once again so the problem with this statement is that throughout the 90s 2000s 2000 really all",
    "start": "2951640",
    "end": "2959440"
  },
  {
    "text": "the way up to like 2020 it's been largely dominated by a singular thing which is like",
    "start": "2959440",
    "end": "2965020"
  },
  {
    "text": "largely oo styled languages and so we don't have like a huge amount of data on",
    "start": "2965020",
    "end": "2971079"
  },
  {
    "text": "is functional better I I don't know if it's better and you know I like to think personally",
    "start": "2971079",
    "end": "2976960"
  },
  {
    "text": "that rust ultimately is better for developing even long term I think it",
    "start": "2976960",
    "end": "2983140"
  },
  {
    "text": "makes a much better programming language to develop on than say typescript but am I right I don't have like a huge amount",
    "start": "2983140",
    "end": "2990160"
  },
  {
    "text": "of experience yet to really like say that you know better so how I think of better is",
    "start": "2990160",
    "end": "2997720"
  },
  {
    "text": "in six months what is the speed of features in two years what is the speed of features",
    "start": "2997720",
    "end": "3003240"
  },
  {
    "text": "to me if you cannot make features in your programs then that is really what is better or",
    "start": "3003240",
    "end": "3009540"
  },
  {
    "text": "worse you know ultimately that's that's for me that's like the biggest that's like the biggest thing sure like performance is",
    "start": "3009540",
    "end": "3015720"
  },
  {
    "text": "obviously very very important it's a Cornerstone of any good piece of software but if you for a long running",
    "start": "3015720",
    "end": "3021359"
  },
  {
    "text": "project a project that continually has to change like Twitter like anything making a change if that takes",
    "start": "3021359",
    "end": "3026819"
  },
  {
    "text": "exponentially longer then something is wrong right like when you go when you go",
    "start": "3026819",
    "end": "3032220"
  },
  {
    "text": "on Twitter when you go on Twitter over here and you jump in here let me hear Let me just find this screenshot I have dang it here let me just jump in here I",
    "start": "3032220",
    "end": "3039000"
  },
  {
    "text": "have a screenshot right here hey look it's me um look at this this is the source code for a singular for just",
    "start": "3039000",
    "end": "3045720"
  },
  {
    "text": "just this tweet that's right here linked that's the divs",
    "start": "3045720",
    "end": "3051180"
  },
  {
    "text": "and video element for just the Tweet itself not for any comments or anything else just the tweet",
    "start": "3051180",
    "end": "3059460"
  },
  {
    "text": "like that's an insane amount of stuff like try to make a change to that is",
    "start": "3059460",
    "end": "3064559"
  },
  {
    "text": "that a brittle system or is that an easy system it's a brittle ass system right",
    "start": "3064559",
    "end": "3070079"
  },
  {
    "text": "like when you look at this oh gosh I'm in I'm in the Firefox hey bro is that",
    "start": "3070079",
    "end": "3076140"
  },
  {
    "text": "Firefox dude let me just zoom in hey man let me just zoom in here let's go like this let's do it again inspect",
    "start": "3076140",
    "end": "3082740"
  },
  {
    "text": "right so when you look at this you're like oh gosh like it can just keep on going like you can just",
    "start": "3082740",
    "end": "3088319"
  },
  {
    "text": "look at look at all that look at all that that's like that's a lot for a div can we all agree that that's probably a",
    "start": "3088319",
    "end": "3093359"
  },
  {
    "text": "lot for a div or oh my goodness dude I I hate Firefox don't become emotionally angry you're",
    "start": "3093359",
    "end": "3099480"
  },
  {
    "text": "gonna you're gonna make it trust me you're gonna make it I mean look at this thing it still is going like",
    "start": "3099480",
    "end": "3105180"
  },
  {
    "text": "starting right here look at how many divs there are look at that for this thing just this",
    "start": "3105180",
    "end": "3111000"
  },
  {
    "text": "one little thing just this one little thing right here uh here uh what is it here let's go over",
    "start": "3111000",
    "end": "3117540"
  },
  {
    "text": "here and go like this um what is it it's HTML pretty uh protify HTML",
    "start": "3117540",
    "end": "3123319"
  },
  {
    "text": "it's just an effing image it's just an effing image and this is",
    "start": "3123319",
    "end": "3130140"
  },
  {
    "text": "what we got for an image like that's a lot of that's a lot of stuff to generate",
    "start": "3130140",
    "end": "3136099"
  },
  {
    "text": "it's just a lot div",
    "start": "3136260",
    "end": "3141380"
  },
  {
    "text": "slash a div ending div image all right that's a lot of it's a",
    "start": "3141380",
    "end": "3149579"
  },
  {
    "text": "lot of stuff man hey man that's like a lot of stuff hey man that's like your opinion no it's",
    "start": "3149579",
    "end": "3155880"
  },
  {
    "text": "just a lot of stuff man",
    "start": "3155880",
    "end": "3160920"
  },
  {
    "text": "this is the claim that functional programmers sometimes make but I have looked and I don't find much evidence to",
    "start": "3160920",
    "end": "3165960"
  },
  {
    "text": "support this claim functional programming does appear to produce fewer bugs but the research that I've read says that this is at or close to the",
    "start": "3165960",
    "end": "3173400"
  },
  {
    "text": "level of statistical noise we're talking about",
    "start": "3173400",
    "end": "3177260"
  },
  {
    "text": "one percent fewer bug fix commits than imperative languages when measured by comparing the",
    "start": "3183359",
    "end": "3190460"
  },
  {
    "text": "I don't like research papers into these kind of things because there's too many factors right",
    "start": "3191400",
    "end": "3196980"
  },
  {
    "text": "the thing is is okay so at Netflix if you want to get a feature through and you think it can change retention",
    "start": "3196980",
    "end": "3203040"
  },
  {
    "text": "and do you think that you've developed something significantly better it takes Millions upon millions of people to test",
    "start": "3203040",
    "end": "3210300"
  },
  {
    "text": "that that's actually true and the reason being is that the confounding factors even on a singular change is insane now",
    "start": "3210300",
    "end": "3218520"
  },
  {
    "text": "let's take something like development where you have various languages experience with the languages complexity",
    "start": "3218520",
    "end": "3224460"
  },
  {
    "text": "of the problems they're solving complexity of the systems that are required to solve management management",
    "start": "3224460",
    "end": "3229800"
  },
  {
    "text": "plays a huge role into all of that kind of stuff right like just think about how",
    "start": "3229800",
    "end": "3235200"
  },
  {
    "text": "many confounding factors exist in trying to solve this thing this type of",
    "start": "3235200",
    "end": "3241079"
  },
  {
    "text": "research is what I would call as uh academic masturbation it's",
    "start": "3241079",
    "end": "3246720"
  },
  {
    "text": "it's useless ratio of commits that that are for new things versus commits that are intended",
    "start": "3246720",
    "end": "3252599"
  },
  {
    "text": "to fix bugs to put this into context the data for unit testing says that you get somewhere around 58 reduction in",
    "start": "3252599",
    "end": "3258359"
  },
  {
    "text": "production defects overall though measured in a completely different way so it may not be fair for me to make this comparison but it's never fair to",
    "start": "3258359",
    "end": "3264240"
  },
  {
    "text": "make those comparisons okay no I don't know if unit testing gives",
    "start": "3264240",
    "end": "3269700"
  },
  {
    "text": "you anything it could give you a lot it could give you 90 it could give you zero percent again",
    "start": "3269700",
    "end": "3276780"
  },
  {
    "text": "girl the difference if any inequality of the code produced by functional programming versus object-oriented program languages seems to be tiny I",
    "start": "3276780",
    "end": "3283680"
  },
  {
    "text": "think they're both functional programming and object orientation are valuable tools but I also think that there are some extravagant claims made",
    "start": "3283680",
    "end": "3289319"
  },
  {
    "text": "for functional programming in particular that to me at least don't seem to stand up to scrutiny my conclusion is that I",
    "start": "3289319",
    "end": "3295260"
  },
  {
    "text": "don't think you gave us a solid scrutinizing take here you know relying on Research I think is just too fraught",
    "start": "3295260",
    "end": "3301559"
  },
  {
    "text": "with confounding factors saying that you didn't have a ton of experience doing it I would take somebody's opinion like if",
    "start": "3301559",
    "end": "3308040"
  },
  {
    "text": "pick came in here where is Piccadilly at if Piccadilly's in here and he says hey I really think these things about it I'd",
    "start": "3308040",
    "end": "3314460"
  },
  {
    "text": "actually take his word a little bit higher because he's been doing Haskell for years and he's done other languages",
    "start": "3314460",
    "end": "3319619"
  },
  {
    "text": "as well like he at least has enough experience somewhere to kind of give somewhat of awaiting like I need to see",
    "start": "3319619",
    "end": "3325859"
  },
  {
    "text": "someone with a lot of experience building a lot of applications right has glow and it pays to understand both",
    "start": "3325859",
    "end": "3332520"
  },
  {
    "text": "functional programming and object-oriented programming the idea that functional program is a Step Beyond object orientation in the evolution of",
    "start": "3332520",
    "end": "3338339"
  },
  {
    "text": "programming languages seems just a complete misinterpretation of the history and of what's going on in reality our own FP are both valuable to",
    "start": "3338339",
    "end": "3345359"
  },
  {
    "text": "also doing complex systems use them in the right context and each will help you to build better systems but neither is",
    "start": "3345359",
    "end": "3351000"
  },
  {
    "text": "the deciding factor thank you very much for watching and if you enjoy my stuff please do consider supporting our work on this channel by joining our patreon",
    "start": "3351000",
    "end": "3357000"
  },
  {
    "text": "community there's a link in the description below thank you [Music] sound Equalization please",
    "start": "3357000",
    "end": "3364920"
  },
  {
    "text": "um I did not choose this photo I kind of feel like I gotta go yo",
    "start": "3364920",
    "end": "3372300"
  },
  {
    "text": "what is this photo",
    "start": "3372300",
    "end": "3376280"
  },
  {
    "text": "I did like a little I did like a little monocle I need one of those uh Gaucho man",
    "start": "3379740",
    "end": "3385980"
  },
  {
    "text": "mustaches going on here I needed like a top hat",
    "start": "3385980",
    "end": "3390740"
  },
  {
    "text": "this is not me it's not me I could tell you that right now okay I learned",
    "start": "3391400",
    "end": "3396420"
  },
  {
    "text": "nothing in that video yeah okay so take away from the video is that it didn't the title did not",
    "start": "3396420",
    "end": "3402839"
  },
  {
    "text": "promise what it delivered meaning I didn't learn when to use functional versus oop",
    "start": "3402839",
    "end": "3410280"
  },
  {
    "text": "I really didn't learn the difference between the two I didn't",
    "start": "3410280",
    "end": "3415440"
  },
  {
    "text": "I'm coming away more confused than I was in General on that topic because I",
    "start": "3415440",
    "end": "3421980"
  },
  {
    "text": "really do want to understand when I I do want more experience in functional",
    "start": "3421980",
    "end": "3427200"
  },
  {
    "text": "programming because I want to actually have like a really strong opinion about it because right now I'm just like a rust Andy",
    "start": "3427200",
    "end": "3433619"
  },
  {
    "text": "right oh what did you build hey build it in Rust oh what's that over there did you try it with rust right like maybe",
    "start": "3433619",
    "end": "3439859"
  },
  {
    "text": "you know maybe I need a little bit more you know what I mean maybe I need a little bit more but I",
    "start": "3439859",
    "end": "3445140"
  },
  {
    "text": "feel like I don't and I don't know what I'm doing okay hey the name is the primogen",
    "start": "3445140",
    "end": "3452420"
  }
]