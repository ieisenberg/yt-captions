[
  {
    "text": "let's do from C to C plus plus to rust apparently back from Haskell I see",
    "start": "0",
    "end": "5339"
  },
  {
    "text": "Haskell in there I don't know what's happening here welcome to a code report solution video in this video I'm going to be",
    "start": "5339",
    "end": "11880"
  },
  {
    "text": "refactoring some C code to C plus to rust and then also looking at the equivalent half can't you just like take",
    "start": "11880",
    "end": "18060"
  },
  {
    "text": "C and call it CPP and boom you got yourself CPP again",
    "start": "18060",
    "end": "26460"
  },
  {
    "text": "get that out of my mouth code to see how functional languages",
    "start": "26460",
    "end": "31619"
  },
  {
    "text": "influenced rust and if you stay tuned to the end I'm also going to do a short comparison of the number of assembly",
    "start": "31619",
    "end": "37739"
  },
  {
    "text": "instructions generated by each of the c c plus and rust Solutions which is quite interesting I've never watched this",
    "start": "37739",
    "end": "44160"
  },
  {
    "text": "video I'm very excited did you just say you want to see my PP this is gonna be on YouTube bisco and",
    "start": "44160",
    "end": "51120"
  },
  {
    "text": "you know I read everything you say okay I'm like Ron Burgundy and I can't even help it now that's gonna be on YouTube",
    "start": "51120",
    "end": "57860"
  },
  {
    "text": "Beast go in my opinion but the first question is",
    "start": "57860",
    "end": "62940"
  },
  {
    "text": "why am I making this video a few days ago or maybe now it was a couple weeks ago YouTube recommended me on my home",
    "start": "62940",
    "end": "69780"
  },
  {
    "text": "page whoa this YouTube video from oh can we go back what in the world was going",
    "start": "69780",
    "end": "75000"
  },
  {
    "text": "on here what what is happening right there",
    "start": "75000",
    "end": "82340"
  },
  {
    "text": "she that is that is something was a couple weeks ago YouTube recommended me",
    "start": "82340",
    "end": "88439"
  },
  {
    "text": "on my home page this YouTube video from a YouTube channel okay I love code Aesthetics so hey code report I don't",
    "start": "88439",
    "end": "94320"
  },
  {
    "text": "know if you know we know each other but I love code aesthetic okay I don't think he loves me maybe he does maybe he",
    "start": "94320",
    "end": "100500"
  },
  {
    "text": "doesn't I don't even know but I I love I love code aesthetic okay",
    "start": "100500",
    "end": "107659"
  },
  {
    "text": "code aesthetic and the title of the video was why you shouldn't Nest your code and the thumbnail says I'm a never",
    "start": "107880",
    "end": "113220"
  },
  {
    "text": "Nester so I was intrigued classic I love programming YouTube videos I clicked on it and then I was very quickly",
    "start": "113220",
    "end": "119119"
  },
  {
    "text": "disappointed not to say that the video is",
    "start": "119119",
    "end": "123799"
  },
  {
    "text": "oh my God poor code Aesthetics am I right",
    "start": "124200",
    "end": "130119"
  },
  {
    "text": "[Laughter] it's not funny okay we're about love on",
    "start": "130120",
    "end": "136440"
  },
  {
    "text": "this YouTube channel okay or we love all these people average code Aesthetics",
    "start": "136440",
    "end": "142440"
  },
  {
    "text": "experience go drama but I was hoping that the video would go in a different direction because it",
    "start": "142440",
    "end": "148140"
  },
  {
    "text": "starts by showing you some C code it can we be real here for a second look dude this guy I don't know what he does this",
    "start": "148140",
    "end": "154800"
  },
  {
    "text": "thumbnail it's not like it's it's crazy engaging something look at that it's crazy and",
    "start": "154800",
    "end": "161760"
  },
  {
    "text": "then says this code is too heavily nested and then refactors it by basically pulling a small piece of the",
    "start": "161760",
    "end": "167459"
  },
  {
    "text": "function and just putting it in another function so that it reduces the total amount of nesting okay sure maybe that's",
    "start": "167459",
    "end": "173340"
  },
  {
    "text": "the refactoring you want to do it's just not the refactoring I wanted to see so in this video I'm going to show you what",
    "start": "173340",
    "end": "178739"
  },
  {
    "text": "I was hoping to see in the video and hopefully it is educational hoping to see and we're starting off and see huh",
    "start": "178739",
    "end": "185400"
  },
  {
    "text": "you don't think I didn't get that code report okay I like where you're going with these puns code Report funny guy",
    "start": "185400",
    "end": "191280"
  },
  {
    "text": "right here I you could just tell right away this guy's gonna be laying down some pretty slick jokes no for the viewers so let us go to the C code that",
    "start": "191280",
    "end": "199800"
  },
  {
    "text": "was initially shown in the never Nester video check out the link in the description down below if you want to go",
    "start": "199800",
    "end": "205500"
  },
  {
    "text": "and watch that foreign",
    "start": "205500",
    "end": "209420"
  },
  {
    "text": "sorry every time I see a squirrely brace on a new line",
    "start": "210780",
    "end": "216840"
  },
  {
    "text": "I have to swallow the bile that comes up",
    "start": "216840",
    "end": "221720"
  },
  {
    "text": "okay we can we can continue that video first we're given a function called calculate that takes two parameters that",
    "start": "222120",
    "end": "228299"
  },
  {
    "text": "are integers called bottom and top that form an inclusive range due to the fact that we have a less than or equal in our",
    "start": "228299",
    "end": "234780"
  },
  {
    "text": "for Loop and we basically have an if statement that's going to form two branches when top is greater than bottom",
    "start": "234780",
    "end": "240480"
  },
  {
    "text": "we're going to enter the first Branch it's going to declare a local integer sum we're then going to have an index",
    "start": "240480",
    "end": "245940"
  },
  {
    "text": "base for Loop that goes through all the numbers between bottom and top inclusive and anytime we encounter an even number",
    "start": "245940",
    "end": "252659"
  },
  {
    "text": "which we determine using our modulus right here simple to zero we do a plus equals to our local sum and then return",
    "start": "252659",
    "end": "259260"
  },
  {
    "text": "that sum at the end of the for Loop otherwise we return zero I mean my guess is I haven't seen this",
    "start": "259260",
    "end": "266040"
  },
  {
    "text": "one from code aesthetic either but my assumption is that he pulls out this right here and puts this into a new",
    "start": "266040",
    "end": "272520"
  },
  {
    "text": "function so that way it feels a little bit less maybe he put some squirrely braces on on the same line so that way it's not as nearly as bad am I right on",
    "start": "272520",
    "end": "279419"
  },
  {
    "text": "that maybe that's what's happening yeah never nesters more like never have",
    "start": "279419",
    "end": "286320"
  },
  {
    "text": "good code style take that code Aesthetics okay remember I like code",
    "start": "286320",
    "end": "291419"
  },
  {
    "text": "Aesthetics and this is the code we start with hopefully pretty easy to understand and",
    "start": "291419",
    "end": "297479"
  },
  {
    "text": "we are now for the rest of the video going to refactor this first yeah and then show the equivalent rest code and then some Haskell at the end so the",
    "start": "297479",
    "end": "303479"
  },
  {
    "text": "first thing we're going to do is change this to c plus which requires doing absolutely nothing I can",
    "start": "303479",
    "end": "310639"
  },
  {
    "text": "Checkmate atheist okay all those people coming in thinking that",
    "start": "311340",
    "end": "317759"
  },
  {
    "text": "we had to do something when changing it to C plus plus yeah right no no no you just need a color scheme change and boom",
    "start": "317759",
    "end": "323940"
  },
  {
    "text": "you're then you're in CPP called it right there piled this",
    "start": "323940",
    "end": "329460"
  },
  {
    "text": "with GCC 12.2 for both the C and C plus plus code and it works perfectly fine and for a couple unit tests gives the",
    "start": "329460",
    "end": "336840"
  },
  {
    "text": "same answer so nothing to do here we'll look at the assembly generated by both",
    "start": "336840",
    "end": "341940"
  },
  {
    "text": "or the number of instructions later but the next change we're going to make is just reformatting this because there's too much white space in this for my",
    "start": "341940",
    "end": "348600"
  },
  {
    "text": "liking hahaha",
    "start": "348600",
    "end": "353419"
  },
  {
    "text": "he just got oh he got squirrely brace same line dunked on right there a little",
    "start": "354960",
    "end": "360060"
  },
  {
    "text": "squirrely brace the dunked on too much white space you know um",
    "start": "360060",
    "end": "365280"
  },
  {
    "text": "you know like maybe we could have like less white space somehow if we just really",
    "start": "365280",
    "end": "370560"
  },
  {
    "text": "think about it everyone's got different preferences but for the purposes of this video we're gonna make this a little bit more which I prefer this obviously is",
    "start": "370560",
    "end": "377759"
  },
  {
    "text": "not a selective change so our first semantic change is going to be using something from C plus plus 20 called",
    "start": "377759",
    "end": "383160"
  },
  {
    "text": "views Iota so here we are basically replacing our index based for loop with",
    "start": "383160",
    "end": "388319"
  },
  {
    "text": "a range base for Loop which is now basically looping through",
    "start": "388319",
    "end": "393080"
  },
  {
    "text": "you know I feel like every time I look at C plus plus it's like they they have",
    "start": "397199",
    "end": "405319"
  },
  {
    "text": "just the longest way to say the shortest thing you know what I mean",
    "start": "405360",
    "end": "413060"
  },
  {
    "text": "you know that that previous for Loop was just",
    "start": "414300",
    "end": "419840"
  },
  {
    "text": "there's just so much less to it this obviously is not a semantic change so our first semantic change is going to",
    "start": "419940",
    "end": "427020"
  },
  {
    "text": "be using something from C plus 20 called views Iota so here we are basically replacing our index and it's inclusive",
    "start": "427020",
    "end": "435539"
  },
  {
    "text": "oh yeah no it's not inclusive it's exclusive this Loop is inclusive uh you know I I really don't really know that",
    "start": "435539",
    "end": "441240"
  },
  {
    "text": "I'm not a fan of the Iota ligma operator you know base for loop with a range",
    "start": "441240",
    "end": "446400"
  },
  {
    "text": "based for Loop which is now basically looping through each number in the views Iota range that is determined by",
    "start": "446400",
    "end": "453539"
  },
  {
    "text": "basically the views Iota adapter here so it's determined by passing two parameters or one but in this case we",
    "start": "453539",
    "end": "458940"
  },
  {
    "text": "want two uh bottom and top plus one because it is not inclusive it doesn't include the last number that you want to",
    "start": "458940",
    "end": "464819"
  },
  {
    "text": "so this is basically equivalent code and in my opinion a lot nicer because it avoids you know abilities for uh off by",
    "start": "464819",
    "end": "471720"
  },
  {
    "text": "one errors because you don't have to do you know plus or minus increments and a less than comparison you just create a",
    "start": "471720",
    "end": "477240"
  },
  {
    "text": "range and I honestly don't get the term Iota okay I know he's saying all these things and I'm sure whatever he's saying",
    "start": "477240",
    "end": "483000"
  },
  {
    "text": "is really really smart and Adept but I'm like super stuck on the fact that it's Iota Iota is the smallest character in",
    "start": "483000",
    "end": "492180"
  },
  {
    "text": "Greek right",
    "start": "492180",
    "end": "495440"
  },
  {
    "text": "and I know in",
    "start": "498419",
    "end": "503479"
  },
  {
    "text": "I don't I don't know I know it's using go but go goes crazy iota",
    "start": "504780",
    "end": "511740"
  },
  {
    "text": "yeah Iota integer to ASCII range I'm super confused I I'm super",
    "start": "511740",
    "end": "518520"
  },
  {
    "text": "confused right now uh but my I'm more stuck on C plus and what it the hell's of views",
    "start": "518520",
    "end": "525320"
  },
  {
    "text": "and then you can use a range base for Loop much nicer the next semantic change that we can do now is to add a views",
    "start": "525360",
    "end": "531899"
  },
  {
    "text": "filter along with our views Iota to basically replace the if statement that we have checking for even so we can",
    "start": "531899",
    "end": "537360"
  },
  {
    "text": "filter out the odd numbers by basically going",
    "start": "537360",
    "end": "541940"
  },
  {
    "text": "no no no no no no no no no no no no no no no no no no no no no no no no",
    "start": "551720",
    "end": "558260"
  },
  {
    "text": "there's there's nothing semantically worse than a C plus plus uh function",
    "start": "558260",
    "end": "564240"
  },
  {
    "text": "like this oh my goodness the empty capture group and auto I hate auto and C",
    "start": "564240",
    "end": "569700"
  },
  {
    "text": "plus plus it's not because Auto is somehow like you get this nice inferred ability",
    "start": "569700",
    "end": "575279"
  },
  {
    "text": "every LSP in the universe just returns I don't I know that's what it returns it",
    "start": "575279",
    "end": "580440"
  },
  {
    "text": "is just the worst to work without I hate working with Auto but I would like to say I use Auto like",
    "start": "580440",
    "end": "586680"
  },
  {
    "text": "wild okay hey just re real talk I used a lot of Auto okay",
    "start": "586680",
    "end": "591959"
  },
  {
    "text": "because I'm I'm evil I'm a mean individual oh my goodness I really am not a fan of",
    "start": "591959",
    "end": "597600"
  },
  {
    "text": "this and I didn't know this bar operator what is this bar operator it looks like a bit wise or operation on",
    "start": "597600",
    "end": "607160"
  },
  {
    "text": "on an iterator oh they overload it oh yeah I forget C",
    "start": "611339",
    "end": "617220"
  },
  {
    "text": "plus plus you can just overload operators uh I'm stupid they overload yeah yeah they overload a bit a bit or yeah yeah yeah yeah I'm stupid I'm a",
    "start": "617220",
    "end": "623820"
  },
  {
    "text": "stupid man I'm stupid man going filter even where even is a Lambda that's um above our range base for Loop now",
    "start": "623820",
    "end": "629880"
  },
  {
    "text": "that checks the modulus 2 equal to zero to determine if our numbers are even so this is quite nice in my opinion once",
    "start": "629880",
    "end": "636480"
  },
  {
    "text": "again comes from C plus plus 20 so you have to using the C plus 20 version in order for this to work and then the next",
    "start": "636480",
    "end": "642360"
  },
  {
    "text": "thing we can do is basically replace our for Loop and our local integer sum with",
    "start": "642360",
    "end": "648720"
  },
  {
    "text": "a collection to the C plus plus 98 I believe uh numeric algorithm stood",
    "start": "648720",
    "end": "655380"
  },
  {
    "text": "accumulate so we can basically get rid of did he just say stood",
    "start": "655380",
    "end": "660839"
  },
  {
    "text": "I've never called it stood accumulate",
    "start": "660839",
    "end": "667380"
  },
  {
    "text": "or accumulate this studs are accumulating hard in my front yard yeah I've never heard that",
    "start": "668279",
    "end": "674519"
  },
  {
    "text": "okay that's fine I hey I'm not a big C plus plus guy I'm not a big C plus plus guy",
    "start": "674519",
    "end": "680040"
  },
  {
    "text": "yeah I know I I could handle things TJ but now that he's throwing out stud like that I don't think I can do it",
    "start": "680040",
    "end": "686459"
  },
  {
    "text": "um I mean this is this does feel better I",
    "start": "686459",
    "end": "691800"
  },
  {
    "text": "guess in my base opinion it's based okay everybody feel good uh",
    "start": "691800",
    "end": "699300"
  },
  {
    "text": "I would say that in general I'm okay with this I'm used to the fact that iterators you have to do this like",
    "start": "699300",
    "end": "704839"
  },
  {
    "text": "doppagin.end bullcrap um it is what it is",
    "start": "704839",
    "end": "710880"
  },
  {
    "text": "local some and now we have let's go boys big dick energy you guys",
    "start": "710880",
    "end": "716279"
  },
  {
    "text": "got some Dr Pepper I love the asman gold AI Machine by the way all right let's keep on going I have uh an even local",
    "start": "716279",
    "end": "723120"
  },
  {
    "text": "variable which is our Lambda and then evens which is a composition of our Iota and our filter from the C plus 20 views",
    "start": "723120",
    "end": "730500"
  },
  {
    "text": "and then we can pass this to our stood accumulate numeric algorithm begin and end of our range of evens and",
    "start": "730500",
    "end": "738660"
  },
  {
    "text": "initialize this to be zero and just return this directly so already here you can see by using more modern features",
    "start": "738660",
    "end": "744240"
  },
  {
    "text": "some of them are not that modern because stood accumulate existed in C plus plus 98 we have reduced the amount of our",
    "start": "744240",
    "end": "750420"
  },
  {
    "text": "nesting drastically but we can continue to go further so the next thing we're going to use is actually not in standard C plus plus yet but we will be getting",
    "start": "750420",
    "end": "756959"
  },
  {
    "text": "something like this I call it I believe C plus plus 23 which is the standard",
    "start": "756959",
    "end": "762300"
  },
  {
    "text": "that is being uh you know adopted or implemented right now so depending on when you're watching this in the future you might actually be able to use this",
    "start": "762300",
    "end": "768600"
  },
  {
    "text": "without calling on a library here we need to use the library though which is the range V3 which gives us access to a",
    "start": "768600",
    "end": "775019"
  },
  {
    "text": "ranges accumulate so this is not the standard accumulate and this gives us the ability to pass the range directly as our first argument to our accumulate",
    "start": "775019",
    "end": "782459"
  },
  {
    "text": "algorithm so we still have the zero at the end of our accumulate algorithm as the initial value",
    "start": "782459",
    "end": "788040"
  },
  {
    "text": "you know people do say rust is ugly okay",
    "start": "788040",
    "end": "793500"
  },
  {
    "text": "they say that",
    "start": "793500",
    "end": "796399"
  },
  {
    "text": "you know I I actually don't think this is that all that bad I mean C plus plus is an ugly ass language like if you go",
    "start": "805139",
    "end": "811800"
  },
  {
    "text": "into writing C plus plus like you're going to have some nice experience it's just straight up ass okay it's",
    "start": "811800",
    "end": "819120"
  },
  {
    "text": "always badass it's always going to be ass you know the the the the meme with the gun and the astronauts",
    "start": "819120",
    "end": "827399"
  },
  {
    "text": "this is ass this is pessimistic code yeah this is the pessimistic code that Casey was talking about",
    "start": "827399",
    "end": "834860"
  },
  {
    "text": "I've been working in C plus plus for a long time and a short time all at the same time and just because I've worked over a long",
    "start": "835440",
    "end": "842519"
  },
  {
    "text": "amount of years but only in short little spurts and every time I do it I hate it",
    "start": "842519",
    "end": "847920"
  },
  {
    "text": "but I never get to use any of these modern features okay I never get any of these really nice features I'm just",
    "start": "847920",
    "end": "854220"
  },
  {
    "text": "writing good old-fashioned const reference accumulator nonsense for for goodnesses okay",
    "start": "854220",
    "end": "861480"
  },
  {
    "text": "but we don't need to declare a local called evens and then call the dot begin and Dot and we can just pass the view",
    "start": "861480",
    "end": "867180"
  },
  {
    "text": "directly which is even nicer in my opinion and there is one next thing we can do but before we're going to do that",
    "start": "867180",
    "end": "873180"
  },
  {
    "text": "we basically are going to get rid of these stood views namespace because at this point it's going to make the code a",
    "start": "873180",
    "end": "878399"
  },
  {
    "text": "little bit messy so if we just declare namespace RV equal stood views we can replace the two stud views with RV and",
    "start": "878399",
    "end": "885000"
  },
  {
    "text": "at this point we can now make our change which is going to irritate some people why is it RV",
    "start": "885000",
    "end": "890699"
  },
  {
    "text": "how did we get RV out of this how how did we get RV out of this okay I",
    "start": "890699",
    "end": "899100"
  },
  {
    "text": "don't I I swear the animations are really nice recreational vehicle coding",
    "start": "899100",
    "end": "904500"
  },
  {
    "text": "yeah I don't know how we got RV on this one there must be a reason for the r",
    "start": "904500",
    "end": "911579"
  },
  {
    "text": "Ange views hmm but these are standard views",
    "start": "911579",
    "end": "919220"
  },
  {
    "text": "because there is ranges these are standard views these are SVS okay because I know there are some people",
    "start": "920339",
    "end": "926579"
  },
  {
    "text": "that hate the ternary operator but we can get rid of our if else Branch because we're basically doing two things that do returns Real views",
    "start": "926579",
    "end": "934519"
  },
  {
    "text": "stop that that is the uh don't do that don't do that just people honestly it's",
    "start": "934519",
    "end": "940980"
  },
  {
    "text": "always worth it just take this stupid line of code put the effing if statement right here return early and then just",
    "start": "940980",
    "end": "948060"
  },
  {
    "text": "return this you know why because there's that moment you want to log and the moment you want to log it always ends up",
    "start": "948060",
    "end": "954240"
  },
  {
    "text": "you have to rewrite this anyways and it's just the worst experience in the universe just do the thing you know what",
    "start": "954240",
    "end": "960360"
  },
  {
    "text": "I mean just do it just just make the if statement it's not worth it it's never worth it ternary operator and to be fair",
    "start": "960360",
    "end": "968279"
  },
  {
    "text": "I do like ternary operators if it's like this or that and it's something small but it's just it always feels like every",
    "start": "968279",
    "end": "974940"
  },
  {
    "text": "time I use it I always end up regretting it right I know I say it but man I always end up regretting it",
    "start": "974940",
    "end": "982880"
  },
  {
    "text": "surely the Iota thing should handle the topping lower than the bottom surely it should don't call me Shirley though",
    "start": "983040",
    "end": "991019"
  },
  {
    "text": "it basically has two different branches now so we check his top less than or equal to bottom and this we're just inverting the comparison to be able to",
    "start": "991019",
    "end": "997560"
  },
  {
    "text": "put the zero first and then otherwise we do our call to ranges accumulate that is a composition of Iota and filter for",
    "start": "997560",
    "end": "1005120"
  },
  {
    "text": "some reason yeah debugging this is really hard uh it's one of these problems about I mean anytime you have these type of Mappy type operations",
    "start": "1005120",
    "end": "1011800"
  },
  {
    "text": "debugging is difficult the goal of these things is that it reduces the amount of change so that",
    "start": "1011800",
    "end": "1018500"
  },
  {
    "text": "you shouldn't worry about this right like that's the whole thing is that it comes in here and you know that okay I'm only filtering on these but every now",
    "start": "1018500",
    "end": "1024918"
  },
  {
    "text": "and then your filter gets us just a little too complex and boom it sucks to debug",
    "start": "1024919",
    "end": "1032120"
  },
  {
    "text": "you know what I mean I I'm not fully on uh I'm not fully on the functional terrain",
    "start": "1032120",
    "end": "1038120"
  },
  {
    "text": "just because debugging is kind of a pain in the ass sometimes that have never seen any of this it",
    "start": "1038120",
    "end": "1043220"
  },
  {
    "text": "might seem overwhelming but once you get used to this stuff in my opinion it's actually much much more readable than the code we started with and it's more",
    "start": "1043220",
    "end": "1050120"
  },
  {
    "text": "declarative I don't I don't mind this code I do think it's nicer I think the previous one was like",
    "start": "1050120",
    "end": "1055640"
  },
  {
    "text": "overwhelm like if I knew what ranges accumulate meant and RV Iota and RV",
    "start": "1055640",
    "end": "1061039"
  },
  {
    "text": "filter meant right like if this was a normal thing for me to see this would be really really easy to understand right",
    "start": "1061039",
    "end": "1067460"
  },
  {
    "text": "now remember readability is a function of experience this is very Experia he's",
    "start": "1067460",
    "end": "1072980"
  },
  {
    "text": "had this experience many times so this is very simple form uh you know when I'm in Rust and I see the exact same thing",
    "start": "1072980",
    "end": "1078020"
  },
  {
    "text": "in Rust it feels very easy okay so I mean I feel like it's one of",
    "start": "1078020",
    "end": "1083840"
  },
  {
    "text": "those things where it's it's totally easy if you're used to doing it a certain way",
    "start": "1083840",
    "end": "1090100"
  },
  {
    "text": "I know they're all saying it's not readable this is dysfunctional I assume this is beautiful if I did a bunch and",
    "start": "1090980",
    "end": "1096620"
  },
  {
    "text": "sure it makes use of a Turner expression I'm a big fan of the turn nearly expression because it leads to more declarative code no it doesn't it's not",
    "start": "1096620",
    "end": "1103400"
  },
  {
    "text": "ideal it's so frustrating just give me imperative is always almost the right",
    "start": "1103400",
    "end": "1110179"
  },
  {
    "text": "answer I've seen very few times imperative not being the right answer ideally I'd be",
    "start": "1110179",
    "end": "1115460"
  },
  {
    "text": "able to pipe the ranges accumulate um after the Iota and filter but unfortunately we don't have that in C",
    "start": "1115460",
    "end": "1121880"
  },
  {
    "text": "plus plus however it'd be nice if we had a pipe into it we can do the exact same thing we're doing here except just",
    "start": "1121880",
    "end": "1127820"
  },
  {
    "text": "slightly nicer yeah except it's actually way nicer and it's the following",
    "start": "1127820",
    "end": "1132860"
  },
  {
    "text": "so note we no longer have need this is the code that I made in my head handles",
    "start": "1132860",
    "end": "1138940"
  },
  {
    "text": "the case where um bottom is going to be less than or equal to top C plus plus doesn't handle",
    "start": "1138940",
    "end": "1145940"
  },
  {
    "text": "that case the C plus plus just go on forever",
    "start": "1145940",
    "end": "1151360"
  },
  {
    "text": "[Laughter] it's like well I'm adding one it still",
    "start": "1152570",
    "end": "1159679"
  },
  {
    "text": "hasn't happened yet I don't know what's happening here I know you said that TJ I just had to",
    "start": "1159679",
    "end": "1166280"
  },
  {
    "text": "believe I know it raps eventually you know you're eventually going to get that four billion times through oh my goodness it's a rapper using the dot dot",
    "start": "1166280",
    "end": "1173780"
  },
  {
    "text": "equals operator that forms a range this is really nice by the way we don't have the pipe operator here but we have",
    "start": "1173780",
    "end": "1179240"
  },
  {
    "text": "filter and we have a built-in sum which is the equivalent of our accumulate our Lambda is much much more uh readable and",
    "start": "1179240",
    "end": "1187280"
  },
  {
    "text": "concise in my opinion and this is the epitome of beautiful code",
    "start": "1187280",
    "end": "1192380"
  },
  {
    "text": "uh I would say missing the return explicit return loser uh no I'm kidding that's just me right uh but seriously",
    "start": "1192380",
    "end": "1199280"
  },
  {
    "text": "again for people that are new to rust this looks really unreadable",
    "start": "1199280",
    "end": "1204620"
  },
  {
    "text": "but for someone who's been doing rust for a little bit this is really straightforward right like this is",
    "start": "1204620",
    "end": "1210020"
  },
  {
    "text": "exactly what I expected to see in my head and this is exactly what I see I would reformat this a little bit",
    "start": "1210020",
    "end": "1216559"
  },
  {
    "text": "differently for slideware but you know this is basically the exact same it's very readable the font a tiny bit bigger",
    "start": "1216559",
    "end": "1222200"
  },
  {
    "text": "and it's slightly more readable but rust format would keep this all in one line however when you do start to chain these",
    "start": "1222200",
    "end": "1227360"
  },
  {
    "text": "operating operations I would say like this is one of my favorite features of rust right here is the fact that they",
    "start": "1227360",
    "end": "1233120"
  },
  {
    "text": "have a built-in range and the range becomes something that you can interact with uh it turns into an iterator or it",
    "start": "1233120",
    "end": "1240440"
  },
  {
    "text": "is an iterator in of itself like I really love that there's syntax dedicated to making a range right this I",
    "start": "1240440",
    "end": "1248000"
  },
  {
    "text": "think this is just a very important Concept in programming and it avoids a whole catastrophe of off by one errors",
    "start": "1248000",
    "end": "1254480"
  },
  {
    "text": "and you know in reality I have off by one errors all the time right it's just totally normal for those that don't",
    "start": "1254480",
    "end": "1260120"
  },
  {
    "text": "understand that means from bottom up to top and including it that's the equal sign then it's going to filter e it's weird I",
    "start": "1260120",
    "end": "1268160"
  },
  {
    "text": "would have used X I'm always an X kind of guy not an e kind of guy e doesn't make any sense to me e is just every single letter that or every single",
    "start": "1268160",
    "end": "1274160"
  },
  {
    "text": "number that comes out of here right so if bottom was Zero top was five this filter would get called with zero one",
    "start": "1274160",
    "end": "1279440"
  },
  {
    "text": "two three four five E of course modulo two equals zero Bam Bam Bam returns true",
    "start": "1279440",
    "end": "1285140"
  },
  {
    "text": "for every even element then you sum it pretty straightforward right e is for even well that doesn't make any sense",
    "start": "1285140",
    "end": "1290539"
  },
  {
    "text": "because it's not even until they do the check e is for exception or even or error or w",
    "start": "1290539",
    "end": "1298700"
  },
  {
    "text": "element oh it's an element y'all don't make any sense okay",
    "start": "1298700",
    "end": "1304640"
  },
  {
    "text": "but it's making even so it's for event it's for erection actually it's for full-on rust based erection",
    "start": "1304640",
    "end": "1312919"
  },
  {
    "text": "s together and go past a certain length this is how rust format would format it and this is just absolutely gorgeous in",
    "start": "1312919",
    "end": "1319820"
  },
  {
    "text": "my opinion um the i32s are more informative than the ins which are implicitly on most",
    "start": "1319820",
    "end": "1324860"
  },
  {
    "text": "Platforms in 32 underscore T just super beautiful lambdas you know these are the",
    "start": "1324860",
    "end": "1331460"
  },
  {
    "text": "iterator this is sort of using the iterator trait which is the spiritual equivalent of ranges in C plus 20 and C",
    "start": "1331460",
    "end": "1337280"
  },
  {
    "text": "plus plus 23 rust is phenomenal here for",
    "start": "1337280",
    "end": "1342520"
  },
  {
    "text": "I do like the spiritual equivalent good call you know pieces of code I can't interact like I mentioned before you",
    "start": "1344659",
    "end": "1350360"
  },
  {
    "text": "don't really make use of the Turner operator because the range created by the double dot equal operator is okay",
    "start": "1350360",
    "end": "1356740"
  },
  {
    "text": "okay TJ got banned TJ got banned okay TJ got banned TJ oh flip can you keep uh",
    "start": "1356740",
    "end": "1363559"
  },
  {
    "text": "the Shilling to a minimum TJ asking for Shilling to a minimum",
    "start": "1363559",
    "end": "1370539"
  },
  {
    "text": "[Music] here's the deal here's the deal Karen",
    "start": "1374960",
    "end": "1380299"
  },
  {
    "text": "this is what I was thinking personally is that if you can place his laptop on",
    "start": "1380299",
    "end": "1386000"
  },
  {
    "text": "several T's individual tees I will go get my driver go home right now lunch",
    "start": "1386000",
    "end": "1391580"
  },
  {
    "text": "hour it and we could see how far this thing can fly that's what I'm thinking personally that's a good way to fire somebody uh",
    "start": "1391580",
    "end": "1398539"
  },
  {
    "text": "else we could just lock him out of his email and let him discover that tomorrow which one do you think is better uh I'm",
    "start": "1398539",
    "end": "1404299"
  },
  {
    "text": "personally more the aggressive kind personally [Music]",
    "start": "1404299",
    "end": "1413130"
  },
  {
    "text": "all right I'm very excited about this care of that case where um bottom is sort of less than top and",
    "start": "1413419",
    "end": "1419840"
  },
  {
    "text": "it's just going to automatically return you zero absolutely beautiful and at this point some of the most astute",
    "start": "1419840",
    "end": "1426620"
  },
  {
    "text": "observers and viewers of this video we'll be thinking in your head the rust code is actually not equivalent",
    "start": "1426620",
    "end": "1433820"
  },
  {
    "text": "to the C and C plus plus versions of the code really and that's because not",
    "start": "1433820",
    "end": "1440120"
  },
  {
    "text": "because I think I made a mistake or the rust code is wrong but because I think there was a bug in the initial C code",
    "start": "1440120",
    "end": "1448100"
  },
  {
    "text": "that got carried over to each of these C plus Solutions",
    "start": "1448100",
    "end": "1453919"
  },
  {
    "text": "and I wonder if anyone has seen that bug if so hit the comment section down below and said I saw it first but basically",
    "start": "1453919",
    "end": "1459679"
  },
  {
    "text": "that bug I think is the following if you take a look at this for Loop the range that is defined by this for Loop is an",
    "start": "1459679",
    "end": "1466340"
  },
  {
    "text": "inclusive range it starts at bottom increments up to top and includes top it's a less than equal to top however",
    "start": "1466340",
    "end": "1472880"
  },
  {
    "text": "the if statement does not cover that case on the bottom is equal to top",
    "start": "1472880",
    "end": "1479900"
  },
  {
    "text": "that's Behavior so if we have top and bottom both equal to six it'll return zero however based on this for",
    "start": "1479900",
    "end": "1487159"
  },
  {
    "text": "Loop you should actually return the value of an even number if both top and bottom are equal to that even number",
    "start": "1487159",
    "end": "1493760"
  },
  {
    "text": "and the rust code will return you six uh you know that's kind of hard because",
    "start": "1493760",
    "end": "1499400"
  },
  {
    "text": "you got to follow like the logic that's already there so unless if that is explicitly the bug because you know the function's called calculate we don't",
    "start": "1499400",
    "end": "1506120"
  },
  {
    "text": "know what calculate does we don't know what it's supposed to do and so I would actually argue that this is incorrect",
    "start": "1506120",
    "end": "1512659"
  },
  {
    "text": "then and that should just be an edge case that's part of the edge case right that's part of it that's what you get that's the kind of life you have to live",
    "start": "1512659",
    "end": "1519860"
  },
  {
    "text": "that's that right big if true yeah it's a big if it's true you know what I mean which is why I think it's not actually",
    "start": "1519860",
    "end": "1527000"
  },
  {
    "text": "a bug importing it from C and C plus to Russ it's a bug that is not actually",
    "start": "1527000",
    "end": "1533299"
  },
  {
    "text": "it's it's a bug that's materialized if you have the proper unit tests and I guess if you had the unit tests and C",
    "start": "1533299",
    "end": "1538340"
  },
  {
    "text": "and C plus plus in the first case you would notice the bug and you'd fix it but the point here is that if you were thinking in your head there was a",
    "start": "1538340",
    "end": "1544820"
  },
  {
    "text": "mistake porting this to rust I actually think that materializes the bug in the CNC Plus Code not in the rust code",
    "start": "1544820",
    "end": "1551240"
  },
  {
    "text": "itself so food for thought maybe that is what the initial intent of that function was we'll never know but that's my guess",
    "start": "1551240",
    "end": "1558500"
  },
  {
    "text": "I also dislike that if he were to do the initial code he'd had to put an if",
    "start": "1558500",
    "end": "1564200"
  },
  {
    "text": "statement here and then since he's using implicit returns he'd have to do an else statement as well to else zero I I've",
    "start": "1564200",
    "end": "1573380"
  },
  {
    "text": "always I don't like the else explosion that happens with implicit returns I hate that I hate Elsa's Elsa's I don't",
    "start": "1573380",
    "end": "1579200"
  },
  {
    "text": "like that I don't know why I don't like it it's so unreasonable of me I just hate it I don't know what it is I don't",
    "start": "1579200",
    "end": "1585140"
  },
  {
    "text": "know why I get so worked up over the smallest things right like I can walk into a project and there can be five",
    "start": "1585140",
    "end": "1591200"
  },
  {
    "text": "levels of inheritance I'm like got stupid uh but then there's like an if else and I'm just like you",
    "start": "1591200",
    "end": "1598880"
  },
  {
    "text": "come here with that big NFL Saturday right like I I will lose my over the stupidest thing in the universe I",
    "start": "1598880",
    "end": "1605299"
  },
  {
    "text": "don't know why I don't know why it just it I don't know it's just so stupid you",
    "start": "1605299",
    "end": "1610580"
  },
  {
    "text": "know literally yeah I know it's it's dumb it feels dumb if",
    "start": "1610580",
    "end": "1617620"
  },
  {
    "text": "maybe we can contact the author of code aesthetic and ask ask them all right I",
    "start": "1617900",
    "end": "1623779"
  },
  {
    "text": "promise equivalent Haskell code which is actually quite similar to the rust code and that's because rust was heavily",
    "start": "1623779",
    "end": "1629779"
  },
  {
    "text": "inspired by the ml language family and you know some people say it's more influenced bio camel some people does ML",
    "start": "1629779",
    "end": "1635960"
  },
  {
    "text": "stand for modern language what does ML stand for",
    "start": "1635960",
    "end": "1642140"
  },
  {
    "text": "okay I'm gonna ask a stupid question I'm gonna be vulnerable I'm being vulnerable okay",
    "start": "1642140",
    "end": "1647659"
  },
  {
    "text": "I'm being vulnerable right now machine language",
    "start": "1647659",
    "end": "1653379"
  },
  {
    "text": "means Chad it actually just means Chad I'm gonna go with machine language on this one I will not be listening to The",
    "start": "1653659",
    "end": "1659240"
  },
  {
    "text": "Meta language call outs here it's more information that is a company so I don't know meta language there's",
    "start": "1659240",
    "end": "1665419"
  },
  {
    "text": "many meta languages okay so I don't know what you're okay",
    "start": "1665419",
    "end": "1670640"
  },
  {
    "text": "it stands for metal ligma okay mommy love oh potatoes very similar languages",
    "start": "1670640",
    "end": "1676279"
  },
  {
    "text": "When comparing it to C plus plus and c and this is the Haskell code so you'll note we are also defining I can totally",
    "start": "1676279",
    "end": "1682580"
  },
  {
    "text": "understand why Haskell is completely useless you know just an immediate look at this I can just completely understand",
    "start": "1682580",
    "end": "1688279"
  },
  {
    "text": "why Haskell is useless right you can just see it right away",
    "start": "1688279",
    "end": "1693380"
  },
  {
    "text": "um",
    "start": "1693380",
    "end": "1695440"
  },
  {
    "text": "a range using the dot dot operator very inspired and then we are filtering even",
    "start": "1702460",
    "end": "1708799"
  },
  {
    "text": "we have a built-in even predicate so we don't need to spell it out in Haskell and then we just sum after that and if",
    "start": "1708799",
    "end": "1715279"
  },
  {
    "text": "is is dot dot inclusive",
    "start": "1715279",
    "end": "1720039"
  },
  {
    "text": "I don't want to look at APL so dot dot is inclusive",
    "start": "1720440",
    "end": "1726278"
  },
  {
    "text": "that seems like a big big big Miss okay so how do you read this okay so just to",
    "start": "1726320",
    "end": "1732200"
  },
  {
    "text": "be specific let me let me try to understand how to read this I'm just gonna guess calculate takes in a bottom and a top",
    "start": "1732200",
    "end": "1741020"
  },
  {
    "text": "and we are going to sum the result from a filter of even",
    "start": "1741020",
    "end": "1748100"
  },
  {
    "text": "over the range of bottom up to and including top",
    "start": "1748100",
    "end": "1754100"
  },
  {
    "text": "oh no you go right to left okay so we take the range of bottom to top",
    "start": "1754100",
    "end": "1761000"
  },
  {
    "text": "only have the even items out of it because it's a filter even so this dollar sign must be some something I",
    "start": "1761000",
    "end": "1767000"
  },
  {
    "text": "don't know what this dollar sign is and then those values are summed",
    "start": "1767000",
    "end": "1773740"
  },
  {
    "text": "oh to exclude you have to put a bang dollars are pipes",
    "start": "1777620",
    "end": "1783200"
  },
  {
    "text": "is basically let's see dollar and basically adds parents from there to the end of the line",
    "start": "1783200",
    "end": "1790159"
  },
  {
    "text": "that somehow made no sense to me oh wait a second it adds an opening and",
    "start": "1790159",
    "end": "1796460"
  },
  {
    "text": "a closing is what you're trying to say uh [Music]",
    "start": "1796460",
    "end": "1803210"
  },
  {
    "text": "okay I really don't understand this little top definition up here I don't know",
    "start": "1805340",
    "end": "1810620"
  },
  {
    "text": "what's the what in the world's going on up there okay and is it so dollar makes parentheses is",
    "start": "1810620",
    "end": "1816020"
  },
  {
    "text": "that jQuery is this jQuery inspired language if we compare these two you can see how similar they are and that they",
    "start": "1816020",
    "end": "1823340"
  },
  {
    "text": "are very much you know spiritual equivalents even though rust and Haskell are I don't see it at all",
    "start": "1823340",
    "end": "1829279"
  },
  {
    "text": "I don't see how this is equivalent at all I feel like",
    "start": "1829279",
    "end": "1834679"
  },
  {
    "text": "I'd have to like relearn programming to do Haskell whereas I feel like this one",
    "start": "1834679",
    "end": "1840080"
  },
  {
    "text": "I didn't have to relearn anything yeah this is definitely like second cousin business third cousin business right",
    "start": "1840080",
    "end": "1845120"
  },
  {
    "text": "here um I feel like I have to I have to reorient my mind to understand Haskell",
    "start": "1845120",
    "end": "1852740"
  },
  {
    "text": "yeah I'm climaxing hard on realization right now whereas with this",
    "start": "1852740",
    "end": "1858020"
  },
  {
    "text": "I'd say if you have any understanding of basic C languages",
    "start": "1858020",
    "end": "1863559"
  },
  {
    "text": "you could probably you could probably get by on what",
    "start": "1865880",
    "end": "1871039"
  },
  {
    "text": "happened here you know what I mean like just basic C language you could probably guess like this might be a little bit",
    "start": "1871039",
    "end": "1876919"
  },
  {
    "text": "confusing um but this is obvious right I think nobody here would have a much questions",
    "start": "1876919",
    "end": "1882020"
  },
  {
    "text": "on what this is and I think this is pretty obvious okay I did this even stuff and then I summed it okay so what",
    "start": "1882020",
    "end": "1889220"
  },
  {
    "text": "the heck is this um right you see the difference in special character typing though right",
    "start": "1889220",
    "end": "1895580"
  },
  {
    "text": "I don't really see it that syntax is weird yeah but you could guess what that means it may be weird but I have a",
    "start": "1895580",
    "end": "1901100"
  },
  {
    "text": "strong inkling that you can guess what this means",
    "start": "1901100",
    "end": "1906100"
  },
  {
    "text": "I could guess what that means different languages all right so that is comparison of C to",
    "start": "1907100",
    "end": "1913340"
  },
  {
    "text": "C plus plus to rust and to Haskell all of the links to these Solutions and each",
    "start": "1913340",
    "end": "1918679"
  },
  {
    "text": "of the sort of changes he didn't even explain this I would love to know what this means right here this must be the definition but I don't understand what",
    "start": "1918679",
    "end": "1924919"
  },
  {
    "text": "it means an INT to an INT on an INT I don't get this like to me it would have been int comma int",
    "start": "1924919",
    "end": "1932419"
  },
  {
    "text": "Arrow end meaning like we take two ins in and we produce one end out",
    "start": "1932419",
    "end": "1938419"
  },
  {
    "text": "but I don't understand the int to an inch to an end it's curried oh",
    "start": "1938419",
    "end": "1945399"
  },
  {
    "text": "so the last one is the return the first one",
    "start": "1946039",
    "end": "1952100"
  },
  {
    "text": "is the curing amount or the this is all occurring and this is the return last is",
    "start": "1952100",
    "end": "1958460"
  },
  {
    "text": "return first is curing or let me say it this way last is returned",
    "start": "1958460",
    "end": "1964820"
  },
  {
    "text": "the rest is occurring",
    "start": "1964820",
    "end": "1968139"
  },
  {
    "text": "you can pass Calculate 10 and get a new function back oh my goodness I just had",
    "start": "1972080",
    "end": "1977299"
  },
  {
    "text": "a braingasm",
    "start": "1977299",
    "end": "1980019"
  },
  {
    "text": "I'm not gonna lie to you I would hate debugging Haskell I would hate it I would hands down hate",
    "start": "1989539",
    "end": "1996440"
  },
  {
    "text": "debugging Haskell think about how many things are curried",
    "start": "1996440",
    "end": "2004200"
  },
  {
    "text": "you don't debug it your replica oh my goodness like because I I truly hate debugging higher order functions",
    "start": "2007419",
    "end": "2015658"
  },
  {
    "text": "and it's just one of those things I warp death I love how you say it in",
    "start": "2016240",
    "end": "2022120"
  },
  {
    "text": "such a simple way actually it's just called partial application you can partially apply my foot in your ass okay",
    "start": "2022120",
    "end": "2027880"
  },
  {
    "text": "how does that sound does that sound good or do you want to do a full application what are we looking at uh because here's",
    "start": "2027880",
    "end": "2034539"
  },
  {
    "text": "the deal I hate I I hate debugging higher order",
    "start": "2034539",
    "end": "2041380"
  },
  {
    "text": "functions it always ends up being like a print crazy town right like you just have to",
    "start": "2041380",
    "end": "2046899"
  },
  {
    "text": "print everything because you have to figure out what in the world your state is stop being a hater I can be a hater all",
    "start": "2046899",
    "end": "2054460"
  },
  {
    "text": "I want I hate higher order functions okay I I worked on a team with 50 people",
    "start": "2054460",
    "end": "2059500"
  },
  {
    "text": "and all 50 people thought higher order functions were awesome and you know what we don't think higher order functions",
    "start": "2059500",
    "end": "2065260"
  },
  {
    "text": "are awesome anymore took a long time to debug the way the hell out of that thing uh granted this was also in JavaScript",
    "start": "2065260",
    "end": "2071919"
  },
  {
    "text": "I'm not sure if JavaScript makes it inherently worse perhaps there's tools or language features that make it easier and Haskell to understand but I don't",
    "start": "2071919",
    "end": "2078878"
  },
  {
    "text": "understand it you know what I mean like I I only have JavaScript a version of it love to hate yeah there's Haskell is not",
    "start": "2078879",
    "end": "2086260"
  },
  {
    "text": "the same as Jobs exactly so there's probably some features you know that make it easier JS makes everything worse",
    "start": "2086260",
    "end": "2091358"
  },
  {
    "text": "I would agree JavaScript does make everything worse if there's a feature in any language JavaScript somehow managed",
    "start": "2091359",
    "end": "2097540"
  },
  {
    "text": "to always make it worse every single time every time I don't even know how it's",
    "start": "2097540",
    "end": "2103240"
  },
  {
    "text": "possible they could do that it's crazy this will be linked in the description Down Below in a GitHub repo",
    "start": "2103240",
    "end": "2109420"
  },
  {
    "text": "that I call content but I also promised that we would do a comparison of the count of assembly instructions generated",
    "start": "2109420",
    "end": "2115720"
  },
  {
    "text": "by each of the c c plus and rust uh pieces of code so this is that",
    "start": "2115720",
    "end": "2120940"
  },
  {
    "text": "comparison so you can see on the very far left we have our C code and note that the green and blue bars correspond",
    "start": "2120940",
    "end": "2128140"
  },
  {
    "text": "to compiling with the ocean bars buyers",
    "start": "2128140",
    "end": "2134560"
  },
  {
    "text": "fatalisk so this is that comparison so you can see on the very far left we have",
    "start": "2134560",
    "end": "2139839"
  },
  {
    "text": "our C code and note that the green and blue bars correspond to compiling with",
    "start": "2139839",
    "end": "2145839"
  },
  {
    "text": "the O2 and O3 optimizations the equivalence in Rust are I think hyphen opt hyphen level",
    "start": "2145839",
    "end": "2152740"
  },
  {
    "text": "um two and three and uh I think those are equivalent in these cases or all cases I can't remember actually what",
    "start": "2152740",
    "end": "2159460"
  },
  {
    "text": "version I compiled with Ross I think was 1.63 but um the details are in the gobbled",
    "start": "2159460",
    "end": "2165099"
  },
  {
    "text": "example that's Linked In the repo that I mentioned that you can find down in the description down below but if we walk through these not super in detail but",
    "start": "2165099",
    "end": "2172119"
  },
  {
    "text": "you can see that C C plus plus and the reformatted C plus plus all have identical assembly uh generated assembly",
    "start": "2172119",
    "end": "2178960"
  },
  {
    "text": "which is great because you would definitely not expect anything formatting to have an impact and uh it's",
    "start": "2178960",
    "end": "2184839"
  },
  {
    "text": "great it's so that means this thing so I you know I never know it does more instructions",
    "start": "2184839",
    "end": "2190480"
  },
  {
    "text": "mean it runs slower I know I don't know how true or untrue",
    "start": "2190480",
    "end": "2196060"
  },
  {
    "text": "that is right because if you unroll a loop it can be like longer and so it doesn't always mean it right",
    "start": "2196060",
    "end": "2203079"
  },
  {
    "text": "like can you can you strictly say that is this one slower than that one",
    "start": "2203079",
    "end": "2208560"
  },
  {
    "text": "yeah I mean that's like let's see you can't know until you run it yeah it's a computer okay here's a Checkmate",
    "start": "2209380",
    "end": "2217060"
  },
  {
    "text": "um it's just yeah it's interesting though I",
    "start": "2217060",
    "end": "2223839"
  },
  {
    "text": "mean what's what's interesting right here is why did these all get so long on the next level of optimization",
    "start": "2223839",
    "end": "2229960"
  },
  {
    "text": "like all right I don't understand why those things got so long and I also am confused why Iota is not",
    "start": "2229960",
    "end": "2235599"
  },
  {
    "text": "like an equivalent like how is that not compiled identical because in the end you're just adding a",
    "start": "2235599",
    "end": "2243099"
  },
  {
    "text": "number right I I'm very confused how",
    "start": "2243099",
    "end": "2248320"
  },
  {
    "text": "they didn't come out to be the exact same CMD maybe okay okay send these nuts I see that C and C plus plus are",
    "start": "2248320",
    "end": "2254560"
  },
  {
    "text": "identical here um because you didn't change any of the code views Iota does increase I think O2",
    "start": "2254560",
    "end": "2261040"
  },
  {
    "text": "by an instruction or two and O3 by a few instructions uh but what's very",
    "start": "2261040",
    "end": "2266500"
  },
  {
    "text": "interesting is that views filter um changes it a lot so it increases the",
    "start": "2266500",
    "end": "2272320"
  },
  {
    "text": "number of o2 instructions but decreases the number of O3 instructions then a",
    "start": "2272320",
    "end": "2277599"
  },
  {
    "text": "stood accumulate ranges accumulate and the ternary operator change nothing and C plus format which behind the scenes",
    "start": "2277599",
    "end": "2284859"
  },
  {
    "text": "this was sort of left off the slide deck I please tell me that that he he literally didn't just format his code",
    "start": "2284859",
    "end": "2290320"
  },
  {
    "text": "and it changed it I was using I believe stood io.h for each of these but I wanted to",
    "start": "2290320",
    "end": "2297280"
  },
  {
    "text": "see what the impact of using the C plus 20 format library and the increase there was like or two okay in both the O2 and",
    "start": "2297280",
    "end": "2305260"
  },
  {
    "text": "O3 uh generated assembly so read into this what you will a bit a bit",
    "start": "2305260",
    "end": "2310780"
  },
  {
    "text": "interesting that the O2 was shorter for up until the Iota but then it completely switched but on average",
    "start": "2310780",
    "end": "2317440"
  },
  {
    "text": "I guess it's the same across them I don't really know I'm not an assembly expert uh but then we get to the very",
    "start": "2317440",
    "end": "2323320"
  },
  {
    "text": "end rust O2 and O3 are the same and they had 50 instructions uh for both of those",
    "start": "2323320",
    "end": "2328720"
  },
  {
    "text": "cases so does this make a difference at the end of the day I will leave that to the",
    "start": "2328720",
    "end": "2333760"
  },
  {
    "text": "viewer to determine and you can debate in the comments section down below I will conclude the video there uh I hope",
    "start": "2333760",
    "end": "2340359"
  },
  {
    "text": "you enjoy trying to get some engagement right there okay should we debate this",
    "start": "2340359",
    "end": "2345480"
  },
  {
    "text": "I think the real thing is that we need to debate this okay",
    "start": "2345640",
    "end": "2351760"
  },
  {
    "text": "we're gonna debate this we got to get in there um",
    "start": "2351760",
    "end": "2357780"
  },
  {
    "text": "see the thing is that",
    "start": "2358060",
    "end": "2362619"
  },
  {
    "text": "iota's greater instruction count is due to the fact",
    "start": "2363119",
    "end": "2369880"
  },
  {
    "text": "that iota being the smallest character",
    "start": "2369880",
    "end": "2375599"
  },
  {
    "text": "sometimes have the largest impact",
    "start": "2376119",
    "end": "2381480"
  },
  {
    "text": "both metaphorically and literally",
    "start": "2383560",
    "end": "2389079"
  },
  {
    "text": "seems about right I'd say that that was a correct take",
    "start": "2389079",
    "end": "2396119"
  },
  {
    "text": "I don't know where my comment went oh it went right below here I feel like that was the right take",
    "start": "2396400",
    "end": "2403440"
  },
  {
    "text": "it's not about the Iota it's not how you use them it's a hot take I know",
    "start": "2405880",
    "end": "2411720"
  },
  {
    "text": "enjoyed hope you learned something and there will be a follow-up video being released about two days from now which",
    "start": "2413800",
    "end": "2420220"
  },
  {
    "text": "is going to be a behind the scenes of how I made 10 of this video because the number one question that I get is how do",
    "start": "2420220",
    "end": "2426339"
  },
  {
    "text": "I do my code Transitions and if you are interested in finding out be sure to subscribe and look for that video in",
    "start": "2426339",
    "end": "2432820"
  },
  {
    "text": "about two days from when this video I wonder how I curious what to use this what is that congratulations you took perfectly",
    "start": "2432820",
    "end": "2438160"
  },
  {
    "text": "readable code with logical progression easily debuggable and turn it into a nice spaghetti the Boomer in me would say that's what is wrong with the new",
    "start": "2438160",
    "end": "2444700"
  },
  {
    "text": "generation I mean it's pretty good PowerPoint no",
    "start": "2444700",
    "end": "2454599"
  }
]