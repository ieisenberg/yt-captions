[
  {
    "text": "look at this why people are angry over Go Go's 1.23 iterators by the way I was",
    "start": "120",
    "end": "5960"
  },
  {
    "text": "very excited about uh Go's iterators I'm very very excited about it and ginger bill is Awesome by the way Ginger bill",
    "start": "5960",
    "end": "11040"
  },
  {
    "text": "is going to be on the stream here shortly but I'm very very very excited about iterators for those that don't know what makes this great is that if",
    "start": "11040",
    "end": "18560"
  },
  {
    "text": "you're programming some uh some go which you know you do from time to time um you",
    "start": "18560",
    "end": "23840"
  },
  {
    "text": "will be able to do something like this if I were to go to uh main.go here we'll just pick any of them I will be able to",
    "start": "23840",
    "end": "29720"
  },
  {
    "text": "have some custom struct and I'll be able to go for you know my custom struct and do like value or uh K value in range you",
    "start": "29720",
    "end": "38800"
  },
  {
    "text": "know my struct which is super cool like that's a really nice feature we're getting good features like go is",
    "start": "38800",
    "end": "45320"
  },
  {
    "text": "officially becoming a 2016's language which is which is which is a good year okay it's a good year so I'm very very",
    "start": "45320",
    "end": "51360"
  },
  {
    "text": "excited I looked at him yesterday it looks great to me I'm not sure what the problem is yeah I actually want to see this problem so I'm actually very",
    "start": "51360",
    "end": "56719"
  },
  {
    "text": "excited about this by the way I did lose my voice at open saw so forgive me hey forgive me please it's hard to talk I",
    "start": "56719",
    "end": "62879"
  },
  {
    "text": "can't scream today we can't get into things I want to get into things but I can't cuz if I do I'm going to lose my",
    "start": "62879",
    "end": "68799"
  },
  {
    "text": "voice even more Oh I thought my sound was low no no no no yeah Ginger bill is very very smart no this is based on but",
    "start": "68799",
    "end": "75320"
  },
  {
    "text": "completely Rewritten from a Twitter post right here okay so we'll open that up and look at that tldr it makes go feel",
    "start": "75320",
    "end": "80799"
  },
  {
    "text": "too functional rather than being an unabashed imperative language isn't go a fairly functional language to begin with",
    "start": "80799",
    "end": "87159"
  },
  {
    "text": "you have first class functional support or first class functions we'll see we'll see I saw a PO let's see let's see I",
    "start": "87159",
    "end": "92479"
  },
  {
    "text": "recently saw a post on Twitter showing the upcoming go iterator design for go 1.23 August 2024 from what I can gather",
    "start": "92479",
    "end": "99159"
  },
  {
    "text": "many people seem to dislike this design I wanted to give my thoughts on it as a language designer so bill by the way",
    "start": "99159",
    "end": "104200"
  },
  {
    "text": "Ginger bill is a language designer and a good one the merge PR for the proposal could be found here it has an in-depth",
    "start": "104200",
    "end": "109759"
  },
  {
    "text": "explanation of the design explaining why certain approaches were chosen instead so I do recommend reading it if you are",
    "start": "109759",
    "end": "115280"
  },
  {
    "text": "familiar with go okay here's the uh here's the example from the original tweet all right so backward H takes in",
    "start": "115280",
    "end": "121240"
  },
  {
    "text": "an N uh we have this as an array of these NES functional it's a that returns a function that returns a function that",
    "start": "121240",
    "end": "127600"
  },
  {
    "text": "takes in an INT and an e and returns a bu then you return function yield Funk",
    "start": "127600",
    "end": "133160"
  },
  {
    "text": "bu 4 I this one and yield it out okay this is where cleanup goes okay uh we",
    "start": "133160",
    "end": "139000"
  },
  {
    "text": "have this we have this and we can range backwards on S there you go see we can range backwards on S which is pretty",
    "start": "139000",
    "end": "144680"
  },
  {
    "text": "cool right like this is this is pretty cool uh I I I like I immediately agree that there's a lot of effing syntax",
    "start": "144680",
    "end": "150840"
  },
  {
    "text": "there to explain this why yeah curring yeah we got some curring going on this",
    "start": "150840",
    "end": "155959"
  },
  {
    "text": "is a lot of effing syntax right here just to say something still easier to read than rust potentially potentially",
    "start": "155959",
    "end": "163280"
  },
  {
    "text": "uh this example is clear enough in what it does but the entire design of it is a bit crazy to me for the general majority",
    "start": "163280",
    "end": "169360"
  },
  {
    "text": "uh use case from what I understand it appears that the code will be transformed into something as the following backward s function int L",
    "start": "169360",
    "end": "176959"
  },
  {
    "text": "string bull format this one return true return false would be the equivalent of an explicit break okay okay this means",
    "start": "176959",
    "end": "184080"
  },
  {
    "text": "that g iterators are much closer to what some languages have for with the four each method yeah dot for each in",
    "start": "184080",
    "end": "189239"
  },
  {
    "text": "JavaScript and passing a call back to it and fun fact this approach is already possible and go uh before 1.23 but it",
    "start": "189239",
    "end": "195000"
  },
  {
    "text": "does not have syntactic sugar to use with the four range statement yeah I'll try to summarize the rationale for go",
    "start": "195000",
    "end": "201080"
  },
  {
    "text": "1.23 iterators but it seems that they are wanting to minimize a few factors make the iterator look SL act like a",
    "start": "201080",
    "end": "207519"
  },
  {
    "text": "generator from other languages thus the yield minimize the need for sharing too many stack frames allow for cleanup with",
    "start": "207519",
    "end": "213879"
  },
  {
    "text": "defer reduce data being stored outside the control flow I do like the allowing for clean up with the fur I think this",
    "start": "213879",
    "end": "219040"
  },
  {
    "text": "was pretty nice I at least I like that idea as Russ uh Cox uh explains the",
    "start": "219040",
    "end": "224599"
  },
  {
    "text": "original proposal not regarding push versus pole iterator types the vast majority of the time push iterators are",
    "start": "224599",
    "end": "230239"
  },
  {
    "text": "more convenient to implement and to use because setup and tear down can be done around yield calls rather than having to",
    "start": "230239",
    "end": "235920"
  },
  {
    "text": "implement those as separate operations and expose them to the caller Direct use including with Range Loop of a push",
    "start": "235920",
    "end": "242400"
  },
  {
    "text": "iterator requires giving up sto uh storing any data in control flow so individual clients May occasionally want",
    "start": "242400",
    "end": "248799"
  },
  {
    "text": "to pull or want a pull iterator instead any such code can trivially call pull",
    "start": "248799",
    "end": "254239"
  },
  {
    "text": "and defer stop I generally prefer pull over push like generally speaking I think pull over push is the way to go",
    "start": "254239",
    "end": "261000"
  },
  {
    "text": "and why I think it's the way to go is that you can create really beautiful like lazy items which makes it really",
    "start": "261000",
    "end": "266880"
  },
  {
    "text": "really nice uh as opposed to like kind of push it's like you kind of you have to create like these buffer zones and",
    "start": "266880",
    "end": "272440"
  },
  {
    "text": "all that for it and then you kind of have to do a lot of um you have to do like often copies are involved when you",
    "start": "272440",
    "end": "278199"
  },
  {
    "text": "do that so like a JavaScript would be a push when you do a DOT map it executes the entire array across that dot map",
    "start": "278199",
    "end": "284919"
  },
  {
    "text": "whereas when you do a poll it grabs the first value it goes through the map it would then go through the iterator or",
    "start": "284919",
    "end": "290160"
  },
  {
    "text": "the filter and then come out say the for each whereas with JavaScript it does the map it does the filter and then it does",
    "start": "290160",
    "end": "296440"
  },
  {
    "text": "the for each which is kind of that's the difference between push and pull so I generally prefer pull over push I think",
    "start": "296440",
    "end": "302160"
  },
  {
    "text": "it just makes it nicer in general it it makes it it just also makes it really easy to understand all right uh Russ Cox",
    "start": "302160",
    "end": "308520"
  },
  {
    "text": "goes into more detail in the article storing data in control flow and about why he likes this approach to design",
    "start": "308520",
    "end": "313880"
  },
  {
    "text": "more complex example do not worry about what it actually does I just want to show you something of the cleanup needed for something like defer okay an example",
    "start": "313880",
    "end": "320080"
  },
  {
    "text": "from the original PR shows a much more complex approach requiring cleanup where the values are pulled directly all right",
    "start": "320080",
    "end": "325560"
  },
  {
    "text": "let's see so we are doing a just a value only iterator and the see it's a sequence sequence V and we're going to",
    "start": "325560",
    "end": "331880"
  },
  {
    "text": "return a sequence of two v's uh pair returns an iterator over successive pairs of values from sequence all right",
    "start": "331880",
    "end": "338680"
  },
  {
    "text": "we're going to pull stop one two if not one two yield this one there we go okay",
    "start": "338680",
    "end": "345280"
  },
  {
    "text": "I think I get this I know he said not to worry but yeah you just take two you just create pairs over it okay an alternative audo code proposal State",
    "start": "345280",
    "end": "351800"
  },
  {
    "text": "machine I'm not suggesting go does this whatsoever when designing Odin I wanted the ability for a user to design their",
    "start": "351800",
    "end": "357600"
  },
  {
    "text": "own kind of iterators but have them be very simple in fact just normal procedures I didn't want to add a",
    "start": "357600",
    "end": "363600"
  },
  {
    "text": "special construct to the language just for this this would complicate the language too much which is what I wanted",
    "start": "363600",
    "end": "368880"
  },
  {
    "text": "to minimize with Odin one possible pseudo proposal I could give for go iterators would look something as the",
    "start": "368880",
    "end": "373919"
  },
  {
    "text": "following backward an any uh an any array function in pool this one return",
    "start": "373919",
    "end": "379639"
  },
  {
    "text": "function on break in this one if on break or I is greater than this one this",
    "start": "379639",
    "end": "385400"
  },
  {
    "text": "is where cleanup goes else we do this one we return it out return it",
    "start": "385400",
    "end": "390680"
  },
  {
    "text": "oh I think I see what's happening here we're just assigning these oh naked return yes these are just naked returns",
    "start": "390680",
    "end": "396479"
  },
  {
    "text": "right do a little naked return on here we get uh index uh Elum and okay and then just return it I know I hate I I'm",
    "start": "396479",
    "end": "403199"
  },
  {
    "text": "not a naked return guy Ginger Bill Dirty Man Dirty Dirty Man with that one this pseudo proposal would operate like this",
    "start": "403199",
    "end": "410199"
  },
  {
    "text": "yeah okay generally like it uh this is from what this this is similar what I do in Odin but Odin does not support stack",
    "start": "410199",
    "end": "416879"
  },
  {
    "text": "frame scope capture closures only non-s scope capturing procedure literals because go is garbage collected I see",
    "start": "416879",
    "end": "423120"
  },
  {
    "text": "little need uh to no utilize or to not utilize them like this the main difference is that Odin does not try to",
    "start": "423120",
    "end": "428879"
  },
  {
    "text": "unify the idea into one construct I know some people will think this approach is a lot more complicated it is doing the",
    "start": "428879",
    "end": "434759"
  },
  {
    "text": "opposite of what Cox prefers with storing data in control flow and stores the data outside of it but this is",
    "start": "434759",
    "end": "440319"
  },
  {
    "text": "usually what I want from an iterator rather than what go is going to do this is the problem it removes the Elegance",
    "start": "440319",
    "end": "446639"
  },
  {
    "text": "of storing the data in the control flow the push pole distinction that Cox explains yeah so I assume what he's",
    "start": "446639",
    "end": "452759"
  },
  {
    "text": "trying to say is that notice that you have to store the data here and you use that as control flow as opposed to um",
    "start": "452759",
    "end": "459879"
  },
  {
    "text": "having it right here which is like you don't you don't store it outside of the function you actually store it right",
    "start": "459879",
    "end": "465319"
  },
  {
    "text": "here in the ah oh gosh you store right here in in the actual this one and then you iterate over it and so makes like a",
    "start": "465319",
    "end": "471479"
  },
  {
    "text": "just a small difference but I I mean this is probably a bit closer to what rust does rust you typically have a",
    "start": "471479",
    "end": "477280"
  },
  {
    "text": "struct that is your iterator that implements iterator in which contains these items and then every time you call",
    "start": "477280",
    "end": "482599"
  },
  {
    "text": "it it's able to operate over that an iterator having a state tracking uh where it's at doesn't sound bad yeah see",
    "start": "482599",
    "end": "488599"
  },
  {
    "text": "NE I I don't think it sounds bad it's it's it for me it's very very simple to implement that I I know I understand it",
    "start": "488599",
    "end": "495800"
  },
  {
    "text": "much easier that way at least it's very easy to implement in my head uh I'm not very let's see I am very much an",
    "start": "495800",
    "end": "500840"
  },
  {
    "text": "imperative programmer and I like how things actually execute rather than trying to make uh it elegant looking",
    "start": "500840",
    "end": "506400"
  },
  {
    "text": "code so the approach I wrote above is fundamentally a about thinking with regards to execution I don't know what",
    "start": "506400",
    "end": "512560"
  },
  {
    "text": "NB is NB the type uh class interface route would not work and go because this would not be or let's see because this",
    "start": "512560",
    "end": "518839"
  },
  {
    "text": "would not be an orthogonal design concept and actually be more confusing than necessary this is why I didn't originally propose it different",
    "start": "518839",
    "end": "524600"
  },
  {
    "text": "languages have different requirements as to what works with them Go's apparent philosophy the approach in go 1.23 takes",
    "start": "524600",
    "end": "532320"
  },
  {
    "text": "uh or takes seems to go in the face of the apparent philosophy of making go for the general frankly mediocre programmer",
    "start": "532320",
    "end": "539279"
  },
  {
    "text": "okay you know like I like go bro can we just take a second here hey can we just",
    "start": "539279",
    "end": "545360"
  },
  {
    "text": "take a second here yo I'm officially a mediocre programmer Google let's",
    "start": "545360",
    "end": "550880"
  },
  {
    "text": "go let's go oh baby oh baby oh baby",
    "start": "550880",
    "end": "556440"
  },
  {
    "text": "let's [Music] go Karen get out the",
    "start": "556440",
    "end": "564079"
  },
  {
    "text": "Champa it is official I am mediocre I mean that's a huge upgrade you should",
    "start": "564079",
    "end": "571880"
  },
  {
    "text": "did you see what Google originally said not good it's not looking good but now it's looking",
    "start": "571880",
    "end": "578120"
  },
  {
    "text": "great literally better than Ken Thompson inventor of C can't commit to see me",
    "start": "581160",
    "end": "587279"
  },
  {
    "text": "boom middle of the pack putting down W's left and right can I get a pay rise pay",
    "start": "587279",
    "end": "592519"
  },
  {
    "text": "rise I wish I could be mediocre I know one day you're going to be mediocre Shan of the dev not there yet you're not there yet but one day you will be",
    "start": "592519",
    "end": "599399"
  },
  {
    "text": "mediocre is that an upgrade from key sheater yes yes it is absolutely mid uh we're definitely um I'm going to just",
    "start": "599399",
    "end": "606360"
  },
  {
    "text": "take that and we're going to Tweet this this feels like a great things um Ginger Bill I'm finally a mid programmer I love",
    "start": "606360",
    "end": "613760"
  },
  {
    "text": "it I love it oh I'm love I'm so I'm so happy right now this is such a good article uh it's not elitism by the way",
    "start": "613760",
    "end": "620360"
  },
  {
    "text": "for those that don't understand go is designed so that anybody can be successful like you don't have to be",
    "start": "620360",
    "end": "626959"
  },
  {
    "text": "smart to use go okay and what I mean by that is try Zig for a moment and realize",
    "start": "626959",
    "end": "633279"
  },
  {
    "text": "that there's programming languages in which you need to think about everything and there's programming languages in",
    "start": "633279",
    "end": "638519"
  },
  {
    "text": "which you can be very productive in like I'm getting good at Zig I'm actually getting what I would consider to be",
    "start": "638519",
    "end": "643920"
  },
  {
    "text": "pretty pretty dang good at Zig but that doesn't mean it's easy like I'm building",
    "start": "643920",
    "end": "649279"
  },
  {
    "text": "things I'm able to do stuff I feel pretty fast at it now I know how to make interfaces vtables all that kind of",
    "start": "649279",
    "end": "655480"
  },
  {
    "text": "stuff but I'm not fast like I am with go right go is just like you don't even have to",
    "start": "655480",
    "end": "661519"
  },
  {
    "text": "think you just don't you just build it and when you don't like something it's pretty easy to patch over what you've goofed up and then add on top of it and",
    "start": "661519",
    "end": "668480"
  },
  {
    "text": "when you don't want to do that anymore and you want to fix it it's pretty easy to fix and refactor and move on grug want mid yeah I'm a I'm a real mid I'm a",
    "start": "668480",
    "end": "674760"
  },
  {
    "text": "mid man I'm a midman go is the fluffer language for mediocre DS yeah I like it that's why I love Ruby is so fast and",
    "start": "674760",
    "end": "680399"
  },
  {
    "text": "easy to makes everyone so productive yeah I mean I I never discount the productivity argument generally speaking",
    "start": "680399",
    "end": "686519"
  },
  {
    "text": "I think that when people say that you use a language in which is really prod uh productive I agree but if you say",
    "start": "686519",
    "end": "692920"
  },
  {
    "text": "that about JavaScript I just disagree with you as a person that's probably better than you at JavaScript by a by a",
    "start": "692920",
    "end": "700120"
  },
  {
    "text": "country mile like by a long country mile by a New York block it is a very hard",
    "start": "700120",
    "end": "706079"
  },
  {
    "text": "language to be good at and to write well and I know people think that it's easy",
    "start": "706079",
    "end": "711639"
  },
  {
    "text": "that's what makes it so Insidious anyways hello Prime well hey nice look at all those little Yar Hearts anyways",
    "start": "711639",
    "end": "717519"
  },
  {
    "text": "the quote Rob Pike the key point here is our programmers are are googlers not necess they are not researchers they",
    "start": "717519",
    "end": "723519"
  },
  {
    "text": "typically fairly young fresh out of school probably learned Java maybe some C or C++ probably learned python they're",
    "start": "723519",
    "end": "728920"
  },
  {
    "text": "not capable of understanding a brilliant language well okay well I Rob I I really",
    "start": "728920",
    "end": "733959"
  },
  {
    "text": "always hate these kind of things uh when someone says they're not capable I'd say the job that they're doing does not",
    "start": "733959",
    "end": "740399"
  },
  {
    "text": "require right big difference big big difference thank you for all the booty thank you for all the dumpy baby I know",
    "start": "740399",
    "end": "746600"
  },
  {
    "text": "it's very elitist a brilliant language but we want them to let's see but we want to use them to build good software",
    "start": "746600",
    "end": "752480"
  },
  {
    "text": "so the language that we give them has to be easy to understand and easy to adopt um yeah I mean go is very easy to",
    "start": "752480",
    "end": "758480"
  },
  {
    "text": "understand and very easy to adopt it's in fact as somebody who only gave go a real shot this year like a real shot",
    "start": "758480",
    "end": "764839"
  },
  {
    "text": "built a really hard program and go I was shocked at how how nice the experience was because the types are so simple I",
    "start": "764839",
    "end": "772240"
  },
  {
    "text": "thought I was going to hate it like I did I genuinely thought I was going to hate it but I'm fine eating kale",
    "start": "772240",
    "end": "779680"
  },
  {
    "text": "eating a mid language doing a mid language because I'm like ah whatever it's going to be you know I I want to",
    "start": "779680",
    "end": "784800"
  },
  {
    "text": "say I want to give it a shot you know but now that I've done it I realized the beauty in the grug nature of it all see",
    "start": "784800",
    "end": "790760"
  },
  {
    "text": "is easy to understand now try building something complex with it yeah I know many people are offended by this comment but it's brilliant language design by",
    "start": "790760",
    "end": "797480"
  },
  {
    "text": "understanding who you are designing the language for it is not insulting but rather the matter OFA statement as go",
    "start": "797480",
    "end": "804199"
  },
  {
    "text": "was originally for people who worked at Google and similar Industries and funny part is that old Google Google 10 years",
    "start": "804199",
    "end": "810000"
  },
  {
    "text": "ago they like they did they were known for hiring pretty smart people you might be a better and more capable programmer",
    "start": "810000",
    "end": "816000"
  },
  {
    "text": "than the average googler but that doesn't matter there's a reason people love go it's simple opinionated and most",
    "start": "816000",
    "end": "821360"
  },
  {
    "text": "people can pick it up very quickly yes uh however this iterator design seems out of character to go especially for",
    "start": "821360",
    "end": "827399"
  },
  {
    "text": "someone like uh proposer Russ Cox assuming that his let's see he was",
    "start": "827399",
    "end": "832440"
  },
  {
    "text": "actually the original proposer On The Go Team it makes go a lot more complicated and even more magical too I understand",
    "start": "832440",
    "end": "838480"
  },
  {
    "text": "how iter system works because I'm literally a language design and compile implementer it also has the possible",
    "start": "838480",
    "end": "844199"
  },
  {
    "text": "issue uh to it won't be a well performing approach either because of the need for closures and callbacks yeah",
    "start": "844199",
    "end": "851120"
  },
  {
    "text": "I'm very curious about the closure and call back thing because that is not a very typically not a very good um",
    "start": "851120",
    "end": "856360"
  },
  {
    "text": "performance I learned go before I learned HTM X damn really is it called go from Google probably I mean can we be",
    "start": "856360",
    "end": "863079"
  },
  {
    "text": "real here I know it's called goang but I assume it's just Google Google Lang uh maybe the argument for its design is",
    "start": "863079",
    "end": "869519"
  },
  {
    "text": "that the average go programmer is not meant to implement iterators but just use them and that the majority of",
    "start": "869519",
    "end": "874560"
  },
  {
    "text": "iterators that people will need will already be available in go standard library or by thirdparty package itself",
    "start": "874560",
    "end": "879639"
  },
  {
    "text": "so the onus uh is put on the package writer and not the package user fair I think that's pretty fair uh I mean I the",
    "start": "879639",
    "end": "886040"
  },
  {
    "text": "thing I do like about it it it's going to unlock a lot of cool behavior and so they already put in generics they already have this like generic slice",
    "start": "886040",
    "end": "892480"
  },
  {
    "text": "package and Maps package which is super nice and now they have this so I I I am happy in the direction of go like I am",
    "start": "892480",
    "end": "898519"
  },
  {
    "text": "I'm very happy in the direction of go and I hope they keep making really good direction changes like this I think",
    "start": "898519",
    "end": "904120"
  },
  {
    "text": "they're just realizing that you H you can't make a language so simple that people need to rewrite everything every",
    "start": "904120",
    "end": "910839"
  },
  {
    "text": "time you need to make a language simple enough that everything you need to write should already be written and provided",
    "start": "910839",
    "end": "917320"
  },
  {
    "text": "in the standard library right I think that's like a pretty good approach and that's largely what they've done Lua Lu's are very simple language but it's",
    "start": "917320",
    "end": "924600"
  },
  {
    "text": "actually a really powerful language it's really easy to write well uh this is why I think a lot of people seem to be angry",
    "start": "924600",
    "end": "929720"
  },
  {
    "text": "over the design it goes against everything go was originally meant to be in the eyes of a lot of people and it seems like a really complicated mess I",
    "start": "929720",
    "end": "936880"
  },
  {
    "text": "understand the beauty that it looks like a generator with the yield and the inline code approach but I do not think that is uh necessary in the vein of what",
    "start": "936880",
    "end": "943800"
  },
  {
    "text": "go is to a lot of people I actually wish they would have gone much more the rust route honestly have some sort of imp",
    "start": "943800",
    "end": "949399"
  },
  {
    "text": "like iterator uh function interface that you could Implement and then you can just range over it right if you provided",
    "start": "949399",
    "end": "955319"
  },
  {
    "text": "a next and is done or whatever you know whatever way you want to do cuz they have optionals I I mean personally I",
    "start": "955319",
    "end": "961079"
  },
  {
    "text": "think that that would have been fantastic I mean I know it could have collided with other things and maybe you had your own iterators that had",
    "start": "961079",
    "end": "966519"
  },
  {
    "text": "something similar and maybe there that's why they're kind of avoiding it is by having this really complicated way you can do a functional way to do it I just",
    "start": "966519",
    "end": "973279"
  },
  {
    "text": "I think doing an interface would have been so much nicer just like string right if you do formatting you can just",
    "start": "973279",
    "end": "979000"
  },
  {
    "text": "have string and if you implement string it just works in the formatting which is really really nice go does hide a lot of",
    "start": "979000",
    "end": "985000"
  },
  {
    "text": "how the magic Works under the scenes especially when garbage collection go routine select statements and many other constructs however I think is a little",
    "start": "985000",
    "end": "990759"
  },
  {
    "text": "too magical in that it Expos the magic to the user a little too much wilst looking overly complex for the average",
    "start": "990759",
    "end": "996800"
  },
  {
    "text": "Co programmer I do think that this like generally speaking the yield side of things like I honestly don't even know",
    "start": "996800",
    "end": "1003839"
  },
  {
    "text": "what it's doing I'd have to go read about how this works because yield usually is like a replacement for return",
    "start": "1003839",
    "end": "1010279"
  },
  {
    "text": "but it's like now a function but it's you have yield Funk this must be the name of the function called yield maybe",
    "start": "1010279",
    "end": "1016600"
  },
  {
    "text": "you can call it anything I not like I assume I've never seen uh uh what's it called named functions this way so",
    "start": "1016600",
    "end": "1022720"
  },
  {
    "text": "that's what I assume it is is this just simply means hey it's time to be done maybe I'm not really sure or you yield out the value to the loop yeah that must",
    "start": "1022720",
    "end": "1029558"
  },
  {
    "text": "be what it is this yields out the value out to the loop right the word yield kind of tricks like tricks me here this",
    "start": "1029559",
    "end": "1036000"
  },
  {
    "text": "is yeah okay okay so this must be the one that's doing it okay I see it I see it I see it I see it it just feels",
    "start": "1036000",
    "end": "1042120"
  },
  {
    "text": "complicated right it yield is the loop body basically yeah it just look it it just feels complicated for me because my",
    "start": "1042120",
    "end": "1048199"
  },
  {
    "text": "brain had to like um at least the examples my brain has to stop using yield in the word that I or in the way",
    "start": "1048199",
    "end": "1054840"
  },
  {
    "text": "I'd normally use the word yield and use it different yeah they should have called it Yeet or Loop body or Loop",
    "start": "1054840",
    "end": "1060760"
  },
  {
    "text": "brain what's that I don't think I have one of those you probably don't did you ever see that uh this is why it's confusing to me yeah that's why I got so",
    "start": "1060760",
    "end": "1066559"
  },
  {
    "text": "confused at first now now I understand it this makes perfect sense right this is literally just the function you're just calling the function if that",
    "start": "1066559",
    "end": "1072600"
  },
  {
    "text": "function returns false you return false which is kind of a generally interesting thing I wonder how this works with",
    "start": "1072600",
    "end": "1078400"
  },
  {
    "text": "breaking out of you know what I mean like can you do something like this uh let's go back to the go I wonder if you",
    "start": "1078400",
    "end": "1083559"
  },
  {
    "text": "can do something like uh do something with like",
    "start": "1083559",
    "end": "1090360"
  },
  {
    "text": "outer and break like a break outer however that looks you know like just",
    "start": "1090360",
    "end": "1095760"
  },
  {
    "text": "sounds confusing right I assume that's it it just all works but still it feels",
    "start": "1095760",
    "end": "1100960"
  },
  {
    "text": "confusing you know what I mean yeah it has a go-to effectively yeah it has a go-to cuz you have to break on the inside and the outside so okay you can",
    "start": "1100960",
    "end": "1107640"
  },
  {
    "text": "okay isn't that a go-to that is oh boys that's a go-to hell yeah go-to considered amazing and you can screw off",
    "start": "1107640",
    "end": "1114559"
  },
  {
    "text": "uh all right here we go maybe the argument is for the oh yeah we already read that uh the other aspect where people",
    "start": "1114559",
    "end": "1121159"
  },
  {
    "text": "find it confusing is that funk return uh that returns Funk that takes a funk as an argument and that the body of the",
    "start": "1121159",
    "end": "1127520"
  },
  {
    "text": "four range is transformed into a funk and all let's see and all breakes and other Escape control flows are converted",
    "start": "1127520",
    "end": "1133559"
  },
  {
    "text": "into return false it's just three levels of procedural deep which again feels like functional language Des rather than",
    "start": "1133559",
    "end": "1139240"
  },
  {
    "text": "imperative language design okay no I'm not suggesting they replace the iterator design uh what I am suggesting but",
    "start": "1139240",
    "end": "1145799"
  },
  {
    "text": "rather a generalized iterator approach may not have been a good thing go in the first place oh really for me at least go",
    "start": "1145799",
    "end": "1153520"
  },
  {
    "text": "is an unapologetically imperative language with first class CSP like constructs it's not trying to be a",
    "start": "1153520",
    "end": "1159000"
  },
  {
    "text": "functional like language iterators are in the weird place where they do exist in imperative languages but they are",
    "start": "1159000",
    "end": "1164120"
  },
  {
    "text": "very functionally but but are very functionally as a concept iterators can be elegant in functional languages but",
    "start": "1164120",
    "end": "1170600"
  },
  {
    "text": "in some many unabashed imperative languages they always feel weird somehow because they are being unified into a",
    "start": "1170600",
    "end": "1176880"
  },
  {
    "text": "separate construct rather than separating out the parts of it I can buy this initialize iterator destroy yeah",
    "start": "1176880",
    "end": "1182039"
  },
  {
    "text": "this is a very yes okay actually I I I really do like this go relies heavily on",
    "start": "1182039",
    "end": "1187440"
  },
  {
    "text": "closures fine it does rely heavily on closures but it's still it it is a very imperative language typically if you're",
    "start": "1187440",
    "end": "1194039"
  },
  {
    "text": "using a lot of closures I would be a bit surprised I and what I mean by that is that means the only thing I can really",
    "start": "1194039",
    "end": "1199840"
  },
  {
    "text": "argue in my head for a lot of closures that statement is that you must be doing a lot of G Funk make a request that's",
    "start": "1199840",
    "end": "1206039"
  },
  {
    "text": "outside the loop and a weight group and then or an airor group and then get all your responses back and call it a day",
    "start": "1206039",
    "end": "1211120"
  },
  {
    "text": "that's at least how I cuz like the thing I built with a bunch of bite processing and compression and all that there's not",
    "start": "1211120",
    "end": "1217880"
  },
  {
    "text": "there's no closures right closures just don't really happen in non highly",
    "start": "1217880",
    "end": "1223280"
  },
  {
    "text": "parallel SL uh whatever the other word is I don't know why I'm blanking on it uh concurrent",
    "start": "1223280",
    "end": "1229200"
  },
  {
    "text": "uh programming recently I heard about Lambda calculus oh gosh oh gosh here it goes here we go again here we go again",
    "start": "1229200",
    "end": "1236520"
  },
  {
    "text": "what's an imperative language I go a then I go B then I go C then I go D then I go e right yeah yeah yeah yeah yeah",
    "start": "1236520",
    "end": "1243679"
  },
  {
    "text": "yeah yeah yeah yeah let's see aside Odin's approach as I alluded sorry my my voice is still a little bit lost so",
    "start": "1243679",
    "end": "1250320"
  },
  {
    "text": "please forgive me then I go P then I go a lot of p PE lot of p PE yeah uh no F",
    "start": "1250320",
    "end": "1255480"
  },
  {
    "text": "no effing no effing around here aside Odin's approach as I alluded to to previously in Odin an iterator uh is",
    "start": "1255480",
    "end": "1261360"
  },
  {
    "text": "just a procedural call where the last value of the multiple return is just a Boolean indicating whether to continue or",
    "start": "1261360",
    "end": "1267000"
  },
  {
    "text": "not and because Odin does not support closures the equivalent go backward iterator in Odin is a little uh more",
    "start": "1267000",
    "end": "1273000"
  },
  {
    "text": "code to type note before people say that looks even more complex can please continue reading the article most Odin",
    "start": "1273000",
    "end": "1278600"
  },
  {
    "text": "iterators are not like this I would never recommend writing such an iterate iterator where a trivial for Loop is",
    "start": "1278600",
    "end": "1284600"
  },
  {
    "text": "preferred for both the reader and the writer all right backward iterator see I I like this approach already which is",
    "start": "1284600",
    "end": "1290159"
  },
  {
    "text": "this right here I liked the struct I this is a very Russ does this too having a struct for the iterator I like this",
    "start": "1290159",
    "end": "1296679"
  },
  {
    "text": "approach backward get the procedure you get the backward iterator you give it a slice it gives you backward iterator it",
    "start": "1296679",
    "end": "1303799"
  },
  {
    "text": "starts right here see the states stored on the struct I see I prefer this by far like absolutely there we go this makes",
    "start": "1303799",
    "end": "1309880"
  },
  {
    "text": "10 times more sense to me it just does if this is greater than this we do this else return yeah naked returns I hate it",
    "start": "1309880",
    "end": "1316960"
  },
  {
    "text": "I hate it there we go this is beautiful to me this actually looks much simpler than the go one I know like to me uh if",
    "start": "1316960",
    "end": "1322760"
  },
  {
    "text": "we go back up to the Top If I compare these two things like I find this I'm just going to go like that if we're",
    "start": "1322760",
    "end": "1328400"
  },
  {
    "text": "going to be real even though this one is much more uh shall we say concise I find it to be way simpler to",
    "start": "1328400",
    "end": "1337120"
  },
  {
    "text": "understand right like this is much more concise you can see it in a small screen but the the amount of function that",
    "start": "1337120",
    "end": "1342880"
  },
  {
    "text": "you're trying to Funk yourself with is very right it's a it's a function that returns a function that takes in a",
    "start": "1342880",
    "end": "1348120"
  },
  {
    "text": "function that returns booing right whereas this one it's just like ah I have my struct this is very",
    "start": "1348120",
    "end": "1353440"
  },
  {
    "text": "onedimensional I understand ah I can make one by just simply doing that I can iterate very easily by saying am I",
    "start": "1353440",
    "end": "1360840"
  },
  {
    "text": "greater than or equal to zero awesome do that else you know return like this is this is just extremely simple code",
    "start": "1360840",
    "end": "1367480"
  },
  {
    "text": "there's no no one has a question about how it works despite me I have no idea what any of this like I don't understand",
    "start": "1367480",
    "end": "1373120"
  },
  {
    "text": "this syntax at all but this is so simple to follow I'm shocked that uh go did not",
    "start": "1373120",
    "end": "1379000"
  },
  {
    "text": "do it this way it just feels better to me right it just feels it just feels better you know uh let's see I'm a funk",
    "start": "1379000",
    "end": "1386000"
  },
  {
    "text": "uh playing a funk I'm a funk that's pling a funk disguised as another Funk oh my gosh oh my gosh oh my gosh dude",
    "start": "1386000",
    "end": "1394799"
  },
  {
    "text": "you just you literally just accidentally made a great meme we're going for it let's go uh what is it Tropic uh",
    "start": "1394799",
    "end": "1402200"
  },
  {
    "text": "Thunder uh memes uh generator let's see what we got yeah generate that one save",
    "start": "1402200",
    "end": "1408760"
  },
  {
    "text": "the image go to Twitter go 1.23 uh uh",
    "start": "1408760",
    "end": "1413880"
  },
  {
    "text": "boom MIT license Bam Bam I'm a funk playing a funk disguise is another Funk",
    "start": "1413880",
    "end": "1420159"
  },
  {
    "text": "dude that is so good that is so good thank you thank you for your service memes is speed yeah speed speed running",
    "start": "1420159",
    "end": "1426039"
  },
  {
    "text": "a meme quick speedrun of a meme pleasure to be of a service TS clay you're a beautiful man great movie too many funks given D just so many so many anyways all",
    "start": "1426039",
    "end": "1433200"
  },
  {
    "text": "right let's go back to this I by the way I'm shocked that Google didn't do this or go didn't do this I I I still am",
    "start": "1433200",
    "end": "1439520"
  },
  {
    "text": "shocked I don't like I honestly in my head this is actually also by the way just to be fair this is also how async",
    "start": "1439520",
    "end": "1446200"
  },
  {
    "text": "iterators work in JavaScript because it's the only sensible way to make async",
    "start": "1446200",
    "end": "1451240"
  },
  {
    "text": "iterators hey Ginger bill I was just letting you know Hey look it's the writer of the article Ginger I was just defending you saying that like this is",
    "start": "1451240",
    "end": "1457360"
  },
  {
    "text": "the only sane way to make iterators I think I I don't understand why you wouldn't require a struct that",
    "start": "1457360",
    "end": "1464600"
  },
  {
    "text": "implements an interface and that's that right cuz that it that feels very if",
    "start": "1464600",
    "end": "1470000"
  },
  {
    "text": "you think about it like go always offers ways for you to implement if you want a reader it's just a struct that",
    "start": "1470000",
    "end": "1475520"
  },
  {
    "text": "implements an interface you want a writer it's just a struct that implements an interface you want something that can be stringified you",
    "start": "1475520",
    "end": "1482120"
  },
  {
    "text": "implement the string interface so it's like it's shocking that it didn't just follow all the other things now the",
    "start": "1482120",
    "end": "1489200"
  },
  {
    "text": "difference is the state Machine versus story yeah I know and I I I hate this argument because a struck State machine",
    "start": "1489200",
    "end": "1495159"
  },
  {
    "text": "is the only in my personal opinion is the only sensible way to make an iterator the this feels very confusing",
    "start": "1495159",
    "end": "1503679"
  },
  {
    "text": "to me right this feels this this feels confusing just generally speaking",
    "start": "1503679",
    "end": "1509279"
  },
  {
    "text": "because I don't want to be a funk that's disguised as a funk that is a funk any that or I'm a funk that is a funk this",
    "start": "1509279",
    "end": "1515240"
  },
  {
    "text": "disguised is a funk it does not Shock me why they uh didn't make it an iterator because it doesn't actually work because the iterator and go would have to be",
    "start": "1515240",
    "end": "1521799"
  },
  {
    "text": "extremely generic okay ah yeah okay okay okay fair and factual I I can understand",
    "start": "1521799",
    "end": "1529120"
  },
  {
    "text": "I can understand that argument for it a lot of funking going on yeah all right anyways this does not appear to be more",
    "start": "1529120",
    "end": "1534399"
  },
  {
    "text": "complicated than the go approach because or it this does appear to be a lot more complicated I'd actually fully disagree this appears to be extremely",
    "start": "1534399",
    "end": "1540320"
  },
  {
    "text": "one-dimensional and a baboon such as myself a grug brain Dev this makes perfect sense I get it this is what I",
    "start": "1540320",
    "end": "1547640"
  },
  {
    "text": "would say does not require 200 IQ this is what I think requires 200 guy IQ",
    "start": "1547640",
    "end": "1553679"
  },
  {
    "text": "honestly I do think it's more complicated uh than the go approach because it requires you to r a a right a lot more code however just use co-pilot",
    "start": "1553679",
    "end": "1561120"
  },
  {
    "text": "just use just use copilot boiler plate mentioned boiler plate mentioned um however it's actually a hell a lot",
    "start": "1561120",
    "end": "1567159"
  },
  {
    "text": "simpler to understand comprehend and even faster to execute the iterator does not call for Loops body rather the body",
    "start": "1567159",
    "end": "1572480"
  },
  {
    "text": "calls the iterator I know Cox loves the ability to store data and control flow and I do agree it is nice but does not",
    "start": "1572480",
    "end": "1578559"
  },
  {
    "text": "fit well with Odin uh especially with the lack of closures because Odin is a manually uh memory managed language an",
    "start": "1578559",
    "end": "1585080"
  },
  {
    "text": "iterator is just syntax sugar for the following yeah that's Lally all it is that's why that's why uh in Zig right",
    "start": "1585080",
    "end": "1591279"
  },
  {
    "text": "now when you look at Zig I created for for the game I created an FPS iterator",
    "start": "1591279",
    "end": "1596720"
  },
  {
    "text": "right I can't just like call hey four range on my iterator or on my FPS iterator but it does actually work",
    "start": "1596720",
    "end": "1602640"
  },
  {
    "text": "really really nicely to be able to have something that I can be like hey sleep the appropriate amount give me the Delta",
    "start": "1602640",
    "end": "1609600"
  },
  {
    "text": "and then the next time it's called depending on how long my game Loop took it can then sleep for the appropriate",
    "start": "1609600",
    "end": "1616159"
  },
  {
    "text": "amount of time it's a very simple kind of iterator is type pattern Odin catches my eye lately Odin's a very interesting",
    "start": "1616159",
    "end": "1622760"
  },
  {
    "text": "language Odin's approach is just removing the magic and making it extremely clear what's going on construction and destruction must be",
    "start": "1622760",
    "end": "1628559"
  },
  {
    "text": "handled manually with explicit procedures and that iteration is just uh a simple procedure which is called each",
    "start": "1628559",
    "end": "1634840"
  },
  {
    "text": "Loop all three constructs are handled separately rather than managed into one confusing thing like go yes yes I do",
    "start": "1634840",
    "end": "1640840"
  },
  {
    "text": "agree that uh I also the followup agreeing uh is that the cleanup code",
    "start": "1640840",
    "end": "1646440"
  },
  {
    "text": "will make it much more confusing looking cuz if you have any level of cleanup code that's more than one line there's",
    "start": "1646440",
    "end": "1652440"
  },
  {
    "text": "just like a lot that goes on right here all right Odin does not hide magic Wist go approach is actually very magical",
    "start": "1652440",
    "end": "1658520"
  },
  {
    "text": "Odin makes you uh handle the closure like values manually along with construction and destruction of the",
    "start": "1658520",
    "end": "1663720"
  },
  {
    "text": "iterator itself Odin's approach also trivially trivially allows you to have",
    "start": "1663720",
    "end": "1668960"
  },
  {
    "text": "as many multiple return values as you wanted to a good example of Odin's core encoding CSV package where the reader",
    "start": "1668960",
    "end": "1674519"
  },
  {
    "text": "can be treated like an iterator by the way fun fact for those that are wondering CSV does not have an official",
    "start": "1674519",
    "end": "1682240"
  },
  {
    "text": "standard there is a RFC but there is no official encoding of a CSV how F how",
    "start": "1682240",
    "end": "1689080"
  },
  {
    "text": "effed is that how effed is that CSV is a good aful standard yeah I know how like",
    "start": "1689080",
    "end": "1694919"
  },
  {
    "text": "screwed is that that there's like a thing that people use all the time that actually doesn't have a standard have",
    "start": "1694919",
    "end": "1700480"
  },
  {
    "text": "you ever used it where we've had some csvs produced when I was at Netflix dumping data from uh",
    "start": "1700480",
    "end": "1707440"
  },
  {
    "text": "our big dat data into records worked with like half of the CSV parsers the",
    "start": "1707440",
    "end": "1713320"
  },
  {
    "text": "RFC for CSV had an extra comma in it so it couldn't be read in Excel isn't that just so good isn't it",
    "start": "1713320",
    "end": "1719880"
  },
  {
    "text": "just like isn't CSV just such a funny funny thing that we deal with it's actually the like literally the world's",
    "start": "1719880",
    "end": "1726320"
  },
  {
    "text": "worst format and yet there it is drink some water PR no I lost my voice",
    "start": "1726320",
    "end": "1731960"
  },
  {
    "text": "Microsoft Excel csvs do this for non- ancy characters damn dude that's so it's just so effed up and coding",
    "start": "1731960",
    "end": "1738200"
  },
  {
    "text": "procedure reader string index error more bu okay nice aside C++ iterators I will",
    "start": "1738200",
    "end": "1745480"
  },
  {
    "text": "try not to get into huge rant about C++ iterators in this article everything C++ did for iterators C++ is the only",
    "start": "1745480",
    "end": "1752679"
  },
  {
    "text": "language in which asks me would you like me to install co-pilot and for me to say yes C++ iterators are much more than a",
    "start": "1752679",
    "end": "1759240"
  },
  {
    "text": "mere iterators wilst at least Go's approach is a mere iterator I completely understand why C++ iterators do what",
    "start": "1759240",
    "end": "1764679"
  },
  {
    "text": "they do but 99% of the time I just want a mere iterator not something that has all the AL algebraic properties that I",
    "start": "1764679",
    "end": "1771120"
  },
  {
    "text": "that allow it to be utilized in more General places dude everything with C++ iterators felt very hard they feel",
    "start": "1771120",
    "end": "1777120"
  },
  {
    "text": "extremely difficult lost your voice at a redneck lawnmower trailer pull competition I they like unironically a",
    "start": "1777120",
    "end": "1782880"
  },
  {
    "text": "redneck lawnmower trailer pull competition is exactly something that open sauce would have uh for people who",
    "start": "1782880",
    "end": "1789360"
  },
  {
    "text": "don't know C++ very well an iterator is a custom struct class uh which requirements is to have the overload operators to make it act like pointers",
    "start": "1789360",
    "end": "1796399"
  },
  {
    "text": "historically a C++ iterator would look like this ah isn't that just lovely don't you love a good oldfashioned begin",
    "start": "1796399",
    "end": "1803039"
  },
  {
    "text": "not equal end begin Plus+ ah look at that beauty ain't nothing like it you got throwing a little const in there a",
    "start": "1803039",
    "end": "1808960"
  },
  {
    "text": "little const Auto [Music] reference dude I hate them uh and would",
    "start": "1808960",
    "end": "1815760"
  },
  {
    "text": "be wrapped in a macro before C++ uh 11 range Loops yeah the big classic thing to do is you make apparently you make a",
    "start": "1815760",
    "end": "1822000"
  },
  {
    "text": "for each Macro and then you use that to do your actual iteration before C++ arranged a four Loop syntax and auto",
    "start": "1822000",
    "end": "1828880"
  },
  {
    "text": "became a thing the biggest issue with C++ iterators require you to Define five different operations at a minimum the",
    "start": "1828880",
    "end": "1834600"
  },
  {
    "text": "following three operation overloads equals does not equal Plus+ pointer uh",
    "start": "1834600",
    "end": "1840080"
  },
  {
    "text": "along with two Standalone uh procedures or bound methods which return in iterator value begin and end if I was to",
    "start": "1840080",
    "end": "1846519"
  },
  {
    "text": "design a C++ mere iterators it would have to be as simple as a struct class that calls an iterator next or something",
    "start": "1846519",
    "end": "1852440"
  },
  {
    "text": "and that's it yes it does mean that other algebraic properties are lost but I honestly do not need the ever for any",
    "start": "1852440",
    "end": "1859320"
  },
  {
    "text": "problem I am working on when I'm working on those kind of problems or those kinds of problems they always be either a",
    "start": "1859320",
    "end": "1865600"
  },
  {
    "text": "contiguous array or I implement the algorithm manually because I want guarantee the performance will be good",
    "start": "1865600",
    "end": "1870760"
  },
  {
    "text": "for the data structure however there is a reason I made my own language Odin because I completely disagree with the",
    "start": "1870760",
    "end": "1876279"
  },
  {
    "text": "entire C++ philosophy and I want to get away from that Madness does anybody know what language in uh inspired C++ anybody",
    "start": "1876279",
    "end": "1884039"
  },
  {
    "text": "we've had a couple people know it simula simula uh what is that nigar right it's",
    "start": "1884039",
    "end": "1890080"
  },
  {
    "text": "it's nigar and gosh I can't remember anyways simula called it very great",
    "start": "1890080",
    "end": "1895200"
  },
  {
    "text": "story by the way how simula was created very cool story very very very very cool",
    "start": "1895200",
    "end": "1900919"
  },
  {
    "text": "story uh they just it's actually simula both was born and died on the fact that",
    "start": "1900919",
    "end": "1906399"
  },
  {
    "text": "it was a simulation language trying to be a general a general programming language it's kind of s it's kind of sad",
    "start": "1906399",
    "end": "1912039"
  },
  {
    "text": "hey thank you very much Gucci algo 68 Supremacy yeah so they they compiled down to algo but eventually had the quit",
    "start": "1912039",
    "end": "1918120"
  },
  {
    "text": "doing algo due to a stack one thing that was really cool about simula is that there was no such thing as this idea of",
    "start": "1918120",
    "end": "1925399"
  },
  {
    "text": "storing data on the stack and coming up doll that's right doll yeah nigar niggard and doll and coming up with this",
    "start": "1925399",
    "end": "1931760"
  },
  {
    "text": "idea of storing a bunch of stuff on the stack was like extremely first off it considered distasteful gross but second",
    "start": "1931760",
    "end": "1937960"
  },
  {
    "text": "off it just like wasn't really done and they like came up with it pretty cool it's super cool like a genuinely super",
    "start": "1937960",
    "end": "1944480"
  },
  {
    "text": "cool like story uh C++ iterators are a hell of a lot more complicated than go iterators but they're much more direct",
    "start": "1944480",
    "end": "1950760"
  },
  {
    "text": "with the local operation at least with go you don't need to construct a type with five different properties in",
    "start": "1950760",
    "end": "1956120"
  },
  {
    "text": "conclusion I feel like go iterators do make sense with the design principles but to them uh let's see applied to them",
    "start": "1956120",
    "end": "1962240"
  },
  {
    "text": "but seem antithetical to what most people view go as being I know go has had to get more complex over the years",
    "start": "1962240",
    "end": "1968480"
  },
  {
    "text": "especially with the introduction of generics which I do think uh are actually welld designed with only a few syntax quibbles yeah I mean everybody's",
    "start": "1968480",
    "end": "1976440"
  },
  {
    "text": "still the problem is is every every body wants one thing to really make iterate uh uh generics awesome which is Method",
    "start": "1976440",
    "end": "1982720"
  },
  {
    "text": "receivers but it does appear that you can you can get around some of that because I know there's some generic",
    "start": "1982720",
    "end": "1987760"
  },
  {
    "text": "libraries in which I don't even understand how they work but they they do work uh but the introduction of iterators of this feels uh of this ilk",
    "start": "1987760",
    "end": "1994960"
  },
  {
    "text": "feels wrong I think the short of it is that it feels like it goes against the apparent philosophy of go that many",
    "start": "1994960",
    "end": "2000880"
  },
  {
    "text": "people believe coupled with being very functional way of doing things rather than imperative and because of those reasons I think that is why people don't",
    "start": "2000880",
    "end": "2007559"
  },
  {
    "text": "like the iterator stuff even if I completely understand the design choices made it doesn't feel like what go",
    "start": "2007559",
    "end": "2013000"
  },
  {
    "text": "originally was to many people maybe the concerns of mind and others are overblown and most people will never actually Implement them and just use",
    "start": "2013000",
    "end": "2018880"
  },
  {
    "text": "them and that them being this over complicated to implement second to last controversial take maybe go needed to",
    "start": "2018880",
    "end": "2025799"
  },
  {
    "text": "gatekeep even more than just tell the functional Bros to go away and stop asking for such features which make go a",
    "start": "2025799",
    "end": "2031320"
  },
  {
    "text": "much more complicated and complex language last controversial thing by the way I do like this you should this is I",
    "start": "2031320",
    "end": "2037039"
  },
  {
    "text": "mean I'm sure Bill I'm sure Ginger bill will 100% say this that his language likely has uh likely has uh a bunch of",
    "start": "2037039",
    "end": "2045240"
  },
  {
    "text": "people asking for things that he has to say no to constantly and that there's an entire collection of people that want",
    "start": "2045240",
    "end": "2050839"
  },
  {
    "text": "Odin to probably look like rust or look like go or look like zigg or look like",
    "start": "2050839",
    "end": "2056960"
  },
  {
    "text": "Fillin the blank and he has to say no a lot I dislike go iterators there I said it I I mean I want to dislike him but I",
    "start": "2056960",
    "end": "2064440"
  },
  {
    "text": "also want to use them I mean that's where my big problem really comes down too because I find myself doing dumb",
    "start": "2064440",
    "end": "2069480"
  },
  {
    "text": "things now you say no a lot not not surprising grug's favorite uh word is no",
    "start": "2069480",
    "end": "2074760"
  },
  {
    "text": "yeah what language is fill in the blank it's a new language you wouldn't understand here's an example of what I what I really want uh if you look up",
    "start": "2074760",
    "end": "2080599"
  },
  {
    "text": "let's see um there you go I have this idea of a virtual box which is just a quad tree that you can replace and uh",
    "start": "2080599",
    "end": "2086679"
  },
  {
    "text": "replace the underlying buffers for and what I had to do is I had to do a um I",
    "start": "2086679",
    "end": "2092520"
  },
  {
    "text": "created this whole next idea and I had to create like my own iterators so it's like it has these bite Ator results",
    "start": "2092520",
    "end": "2098640"
  },
  {
    "text": "which has this and then like I had to do all these things and when I want to use this I have to do things like this I",
    "start": "2098640",
    "end": "2103920"
  },
  {
    "text": "have to like range over certain things in a very annoying way that I really hate because I can't just simply do it",
    "start": "2103920",
    "end": "2111119"
  },
  {
    "text": "well right like look at this at the four forever get this then I have to do that so it's like I want I want that because",
    "start": "2111119",
    "end": "2118880"
  },
  {
    "text": "when I get the result and the result is done I have to like manually break I just want something that I can make a struct that I can walk with you know",
    "start": "2118880",
    "end": "2124960"
  },
  {
    "text": "what I mean I like that I like the next I like done make it easy anyways I don't",
    "start": "2124960",
    "end": "2130160"
  },
  {
    "text": "know go iterators feel really clever which I think people feel is anti-g goang which is another way of saying",
    "start": "2130160",
    "end": "2135800"
  },
  {
    "text": "What ginger bill was saying that's probably Fair that's probably really fair yeah but simultaneously I read someone else's code and say I hate this",
    "start": "2135800",
    "end": "2141880"
  },
  {
    "text": "yeah I think reading someone else's iterator code is going to be in",
    "start": "2141880",
    "end": "2146960"
  },
  {
    "text": "intensely more difficult right intensely more difficult I I actually really agree with that reading you pick careful now",
    "start": "2146960",
    "end": "2154359"
  },
  {
    "text": "hey Prime Thor told me uh your deep Dart Secret your stash is green screen CGI on",
    "start": "2154359",
    "end": "2160520"
  },
  {
    "text": "your face and not real the name is the stash is actually real buddy don't don't",
    "start": "2160520",
    "end": "2165599"
  },
  {
    "text": "try that don't you Thor's just angry because we got a thousand people to sing him happy birthday a jet",
    "start": "2165599",
    "end": "2173280"
  }
]