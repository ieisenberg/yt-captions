[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "Hi, everyone.",
    "start": "177",
    "end": "1157"
  },
  {
    "text": "My name is Sai Vennam,",
    "start": "1157",
    "end": "2156"
  },
  {
    "text": "and today we're going to be talking about Kubernetes Ingress in 5 minutes.",
    "start": "2156",
    "end": "5783"
  },
  {
    "text": "Now, I'm going to assume you already have the fundamental understandings of Kubernetes,",
    "start": "5839",
    "end": "8966"
  },
  {
    "text": "but if you don't, be sure to check out my video, \"Kubernetes Explained\".",
    "start": "8966",
    "end": "12476"
  },
  {
    "text": "Let's go ahead and get started.",
    "start": "12786",
    "end": "14446"
  },
  {
    "text": "Let's assume that we've got a pod",
    "start": "15036",
    "end": "17399"
  },
  {
    "text": "scaled out three times within my Kubernetes cluster,",
    "start": "17399",
    "end": "20501"
  },
  {
    "text": "and I've got three nodes in my Kubernetes cluster,",
    "start": "20590",
    "end": "23285"
  },
  {
    "text": "and this pod is scaled up to three.",
    "start": "23400",
    "end": "25355"
  },
  {
    "text": "Now, these pods together -",
    "start": "26216",
    "end": "28074"
  },
  {
    "text": "let's say I've created a grouping with the label selector",
    "start": "28075",
    "end": "31244"
  },
  {
    "text": "to create what's called a \"service\".",
    "start": "31304",
    "end": "34352"
  },
  {
    "text": "Now, a service",
    "start": "35175",
    "end": "37086"
  },
  {
    "text": "basically enables me to load balance requests to one of these pods,",
    "start": "37087",
    "end": "41194"
  },
  {
    "text": "and that's going to be our first start here.",
    "start": "41476",
    "end": "44466"
  },
  {
    "text": "Let's say we've got a \"service.yaml\" that defines that service.",
    "start": "44466",
    "end": "47685"
  },
  {
    "text": "One of the core things you can define in that is going to be a type,",
    "start": "47757",
    "end": "50816"
  },
  {
    "start": "50000",
    "end": "70000"
  },
  {
    "text": "and we're going to start with the basic one, \"Cluster IP\".",
    "start": "51460",
    "end": "55059"
  },
  {
    "text": "Now, basically every service that gets created in Kubernetes has a cluster IP.",
    "start": "56122",
    "end": "61084"
  },
  {
    "text": "It enables access to that service from within the Kubernetes network,",
    "start": "61084",
    "end": "65516"
  },
  {
    "text": "not the external network.",
    "start": "65736",
    "end": "66806"
  },
  {
    "text": "So, let's assume our service has a Cluster IP and move forward",
    "start": "67226",
    "end": "70035"
  },
  {
    "start": "70000",
    "end": "164000"
  },
  {
    "text": "to the next, more interesting, option here.",
    "start": "70257",
    "end": "72568"
  },
  {
    "text": "I could also specify that type as a Node port.",
    "start": "73845",
    "end": "78685"
  },
  {
    "text": "Now, a Node port is actually a lot like the name kind of makes it sound.",
    "start": "79670",
    "end": "84491"
  },
  {
    "text": "Now, we've got three nodes in our cluster,",
    "start": "84697",
    "end": "86736"
  },
  {
    "text": "and each one of those nodes has a publicly accessible IP.",
    "start": "86736",
    "end": "90171"
  },
  {
    "text": "Now, let's say that that publicly accessible IP looks something like 169.0.0.1,",
    "start": "90327",
    "end": "97216"
  },
  {
    "text": "169.0.0.2, and so on for the third one.",
    "start": "97216",
    "end": "104460"
  },
  {
    "text": "Now, this is a publicly accessible IP address,",
    "start": "104752",
    "end": "108149"
  },
  {
    "text": "but what a Note Port will do is assign the same Node port,",
    "start": "108286",
    "end": "112323"
  },
  {
    "text": "so the same port, let's say it's 31,000, to all three of those nodes.",
    "start": "112601",
    "end": "118493"
  },
  {
    "text": "So, for external access from outside,",
    "start": "118957",
    "end": "122138"
  },
  {
    "text": "from the Internet that's coming in,",
    "start": "122138",
    "end": "125478"
  },
  {
    "text": "and that hits that port on any one of these IP addresses that's externally accessible.",
    "start": "125478",
    "end": "131205"
  },
  {
    "text": "It's going to route directly to service that's defined in that service.yaml.",
    "start": "131205",
    "end": "137454"
  },
  {
    "text": "So, that's an interesting approach and there's a couple of limitations.",
    "start": "137695",
    "end": "141619"
  },
  {
    "text": "So, basically any service can only have one port.",
    "start": "141677",
    "end": "145286"
  },
  {
    "text": "But more importantly,",
    "start": "145350",
    "end": "146682"
  },
  {
    "text": "if a node were to go down, say you're working with a cloud service provider",
    "start": "146682",
    "end": "150140"
  },
  {
    "text": "and you scale your nodes up and down a lot,",
    "start": "150246",
    "end": "152433"
  },
  {
    "text": "well, you're going to have to maintain that updated IP address that's going to change",
    "start": "152433",
    "end": "156312"
  },
  {
    "text": "when a new node comes up.",
    "start": "156312",
    "end": "158286"
  },
  {
    "text": "So, although it works, it's\nnot the best approach",
    "start": "158500",
    "end": "162096"
  },
  {
    "text": "to exposing your applications on the public Internet.",
    "start": "162096",
    "end": "164814"
  },
  {
    "start": "164000",
    "end": "223000"
  },
  {
    "text": "Let's talk about a third type here.",
    "start": "165090",
    "end": "166767"
  },
  {
    "text": "It's going to be type \"load balancer\".",
    "start": "167365",
    "end": "170175"
  },
  {
    "text": "Now a load balancer, when you define it,",
    "start": "170216",
    "end": "173807"
  },
  {
    "text": "so, it's really dependent on how a cloud provider is providing their Kubernetes service.",
    "start": "173807",
    "end": "177752"
  },
  {
    "text": "But essentially the way it works,",
    "start": "177827",
    "end": "180000"
  },
  {
    "text": "the cloud provider is going to spin up something called an NLB,",
    "start": "180000",
    "end": "183655"
  },
  {
    "text": "or a \"Network Load Balancer\",",
    "start": "183655",
    "end": "186147"
  },
  {
    "text": "for every service that you expose this way.",
    "start": "186278",
    "end": "188838"
  },
  {
    "text": "And so, for users that are coming in and accessing that NLB,",
    "start": "188933",
    "end": "192718"
  },
  {
    "text": "that IP address, it's going to route directly to that service.",
    "start": "192718",
    "end": "197338"
  },
  {
    "text": "But although this is good, again, it's only one kind of service,",
    "start": "197564",
    "end": "202905"
  },
  {
    "text": "one load balancer IP address per service.",
    "start": "202990",
    "end": "205459"
  },
  {
    "text": "And, in addition, load balancers are a commodity at the end of the day.",
    "start": "205563",
    "end": "211069"
  },
  {
    "text": "If you need to expose a lot of services, that's a lot of load balancers",
    "start": "211069",
    "end": "214619"
  },
  {
    "text": "which can be inefficient when going to scale.",
    "start": "214700",
    "end": "217017"
  },
  {
    "text": "Now, the last one I want to talk about here is actually not even a service type;",
    "start": "218171",
    "end": "222295"
  },
  {
    "text": "it's a new thing called an \"Ingress Resource\"",
    "start": "222363",
    "end": "225497"
  },
  {
    "start": "223000",
    "end": "310000"
  },
  {
    "text": "which maybe we can define with an ingress.yaml file,",
    "start": "225497",
    "end": "228543"
  },
  {
    "text": "and this is going to be, you know, you're going to define a \"kind: ingress\".",
    "start": "228544",
    "end": "234805"
  },
  {
    "text": "Now an ingress is a little different.",
    "start": "235532",
    "end": "237839"
  },
  {
    "text": "The way ingress is going to work, when you create this,",
    "start": "237850",
    "end": "240366"
  },
  {
    "text": "it's going to create basically a set of rules within your cluster,",
    "start": "240366",
    "end": "244028"
  },
  {
    "text": "an ingress resource that can route based on a set of rules.",
    "start": "244028",
    "end": "248008"
  },
  {
    "text": "These rules are going to be really reminiscent",
    "start": "248117",
    "end": "250099"
  },
  {
    "text": "of something like an engine X reverse proxy.",
    "start": "250099",
    "end": "253041"
  },
  {
    "text": "So, the first thing that ingress will do is create",
    "start": "253204",
    "end": "256121"
  },
  {
    "text": "an external load balancer",
    "start": "256121",
    "end": "259588"
  },
  {
    "text": "that's able to handle requests coming in",
    "start": "259588",
    "end": "262906"
  },
  {
    "text": "and let's say that request comes in for app.com",
    "start": "262906",
    "end": "266508"
  },
  {
    "text": "which maps to an IP address that the ingress supports",
    "start": "266508",
    "end": "269656"
  },
  {
    "text": "and now here's where the interesting part comes in.",
    "start": "269736",
    "end": "272436"
  },
  {
    "text": "It can actually route based on a set of rules.",
    "start": "272436",
    "end": "275239"
  },
  {
    "text": "So, let's say we have a second set of pods in the cluster",
    "start": "275239",
    "end": "278814"
  },
  {
    "text": "and these set of pods route to a Service B.",
    "start": "278814",
    "end": "286201"
  },
  {
    "text": "Now, this rule - maybe we introduce a rule that says if the rule comes in,",
    "start": "287810",
    "end": "293444"
  },
  {
    "text": "or the route comes in with, let's say, serviceb.app.com,",
    "start": "293444",
    "end": "301004"
  },
  {
    "text": "then route to this set of services,",
    "start": "301004",
    "end": "303078"
  },
  {
    "text": "otherwise route all other traffic to Service A.",
    "start": "303078",
    "end": "307035"
  },
  {
    "text": "We'll just say \"other\".",
    "start": "307035",
    "end": "309000"
  },
  {
    "text": "So, an ingress is powerful because you can route multiple backend services",
    "start": "309536",
    "end": "313654"
  },
  {
    "start": "310000",
    "end": "341000"
  },
  {
    "text": "with a single IP address",
    "start": "313654",
    "end": "315367"
  },
  {
    "text": "and then do path-based routing.",
    "start": "315367",
    "end": "317464"
  },
  {
    "text": "So, as other advantages you can do something like TLS termination,",
    "start": "317586",
    "end": "321664"
  },
  {
    "text": "do virtual hosts",
    "start": "321664",
    "end": "323297"
  },
  {
    "text": "and a number of other kind of capabilities that become available.",
    "start": "323386",
    "end": "326426"
  },
  {
    "text": "So, this was Kubernetes ingress in five minutes.",
    "start": "326570",
    "end": "329006"
  },
  {
    "text": "If you enjoyed this video, or have any questions,",
    "start": "329006",
    "end": "331193"
  },
  {
    "text": "be sure to drop a like or a comment below.",
    "start": "331193",
    "end": "333330"
  },
  {
    "text": "Stay tuned and follow us for more videos like this in the future.",
    "start": "333397",
    "end": "336831"
  },
  {
    "text": "Thank you.",
    "start": "336890",
    "end": "337486"
  }
]