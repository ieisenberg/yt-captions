[
  {
    "text": "For large language models to be truly useful, they often need to interact with external data sources and services and tools.",
    "start": "100",
    "end": "6639"
  },
  {
    "text": "And until recently, that was typically done with application programming interfaces or APIs.",
    "start": "7120",
    "end": "14534"
  },
  {
    "text": "Now, in late 2024, Anthropic introduced a new open standard protocol, that's model context protocol or MCP.",
    "start": "14860",
    "end": "26967"
  },
  {
    "text": "And it has already made quite the splash and it standardizes how applications provide context to LLMs.",
    "start": "27060",
    "end": "35299"
  },
  {
    "text": "So let's define these two terms MCP and API and take a look at their similarities and differences.",
    "start": "35640",
    "end": "43079"
  },
  {
    "text": "Now a good metaphor for MCP is that it's kind of like a USB-C port for your AI applications",
    "start": "44160",
    "end": "49400"
  },
  {
    "text": "and that's because it standardize its connections between AI applications, LLM's",
    "start": "49400",
    "end": "54747"
  },
  {
    "text": "and external data sources. So, if you think about",
    "start": "54747",
    "end": "58240"
  },
  {
    "text": "Just your standard laptop that you might be using.",
    "start": "58770",
    "end": "63009"
  },
  {
    "text": "Well, that probably has a set of USB-C ports attached to it.",
    "start": "63450",
    "end": "69610"
  },
  {
    "text": "That's a really old one.",
    "start": "69990",
    "end": "71150"
  },
  {
    "text": "And in those ports, well, you can plug in all sorts of",
    "start": "71450",
    "end": "76174"
  },
  {
    "text": "cables and they will use the USB-c standard to interface with all sorts peripherals.",
    "start": "76175",
    "end": "81709"
  },
  {
    "text": "So perhaps you've plugged one of these things into a monitor.",
    "start": "82030",
    "end": "85989"
  },
  {
    "text": "Another one is connected to an external disk drive and perhaps you've also added in a power supply for the third one.",
    "start": "86500",
    "end": "94199"
  },
  {
    "text": "It really doesn't matter who makes the peripherals, they all work together using this common standard.",
    "start": "94220",
    "end": "100879"
  },
  {
    "text": "Well, MCP is kind of like that.",
    "start": "101400",
    "end": "104379"
  },
  {
    "text": "So if we take a look at really what's in it, there is an MCP host and that also runs a number of MCP clients.",
    "start": "104880",
    "end": "115479"
  },
  {
    "text": "Now, each client opens a JSON RPC 2.0 session using",
    "start": "116060",
    "end": "121415"
  },
  {
    "text": "the protocol that comes with MCP, so the MCP protocol, and that connects to external MCP servers.",
    "start": "121415",
    "end": "133059"
  },
  {
    "text": "So we have a client-server relationship here.",
    "start": "133560",
    "end": "136739"
  },
  {
    "text": "Now, servers, those expose capabilities.",
    "start": "137260",
    "end": "140139"
  },
  {
    "text": "So perhaps we've got a server for access to a database,",
    "start": "140740",
    "end": "145250"
  },
  {
    "text": "maybe we've got another one which gives us access to a code repository.",
    "start": "145250",
    "end": "149660"
  },
  {
    "text": "And then maybe we have another server that gives us to an email server.",
    "start": "149720",
    "end": "155620"
  },
  {
    "text": "So if we go back to the USB-C analogy, we can think of the laptop as being kind of like the MCP host.",
    "start": "156220",
    "end": "164008"
  },
  {
    "text": "The MCB protocol,",
    "start": "164008",
    "end": "166239"
  },
  {
    "text": "this is really what's signified by the USB C connection.",
    "start": "166560",
    "end": "170918"
  },
  {
    "text": "And then the drive and the monitor and the power supply.",
    "start": "171180",
    "end": "174459"
  },
  {
    "text": "We can think of those really as MCP servers.",
    "start": "174770",
    "end": "178510"
  },
  {
    "text": "Okay, so that's the architecture, but what are the capabilities of MCP?",
    "start": "179290",
    "end": "184110"
  },
  {
    "text": "Well, it addresses two main needs of LLM applications.",
    "start": "184130",
    "end": "188749"
  },
  {
    "text": "And when I say LLMs applications, I particularly mean AI agents.",
    "start": "188830",
    "end": "194629"
  },
  {
    "text": "And those two needs, one is to provide context in the",
    "start": "195170",
    "end": "200382"
  },
  {
    "text": "form of contextual data And the other is to enable tools and the usage of tools by these AI agents.",
    "start": "200382",
    "end": "210000"
  },
  {
    "text": "So it provides a standard way for an AI agent to retrieve external context,",
    "start": "210120",
    "end": "215000"
  },
  {
    "text": "which means things like documents and knowledge base entries and database records that sort of thing,",
    "start": "215000",
    "end": "220671"
  },
  {
    "text": "and it can also execute actions or tools like maybe run a web search or call an external service or perform some calculations.",
    "start": "220671",
    "end": "228919"
  },
  {
    "text": "Now that's all done through this MPC server that I mentioned and that advertises a bunch of primitives.",
    "start": "229360",
    "end": "241080"
  },
  {
    "text": "So let's take a look at three of them.",
    "start": "241240",
    "end": "244499"
  },
  {
    "text": "Now one of the primitives is called tools and tools are discrete actions or functions the AI can call.",
    "start": "244880",
    "end": "252860"
  },
  {
    "text": "So a weather service that might expose a get weather tool or a calendar service that may expose a create event tool.",
    "start": "253540",
    "end": "261018"
  },
  {
    "text": "Now the server name advertises each tools name,",
    "start": "261529",
    "end": "264081"
  },
  {
    "text": "It's description, the input and output schema in its capabilities listing as well.",
    "start": "264530",
    "end": "268790"
  },
  {
    "text": "Now when an LLM uses an MCP client to invoke a tool, the MCP server executes the underlying function.",
    "start": "269150",
    "end": "277470"
  },
  {
    "text": "So that's tools.",
    "start": "277570",
    "end": "278570"
  },
  {
    "text": "Now another primitive is resources.",
    "start": "279490",
    "end": "282309"
  },
  {
    "text": "And resources are read only data items or documents the server can provide.",
    "start": "283177",
    "end": "288709"
  },
  {
    "text": "Which the client can then retrieve on demand, so text files, database schema, file contents, that sort of thing.",
    "start": "289220",
    "end": "294779"
  },
  {
    "text": "And then we also have as an additional primitive prompt templates,",
    "start": "295540",
    "end": "301957"
  },
  {
    "text": "and those are predefined templates providing suggested prompts.",
    "start": "301957",
    "end": "306540"
  },
  {
    "text": "Now, not every MCP server will use all three primitives.",
    "start": "306820",
    "end": "311579"
  },
  {
    "text": "In fact, many just focus on tools currently,",
    "start": "311660",
    "end": "315239"
  },
  {
    "text": "but the important thing to understand here,",
    "start": "315239",
    "end": "317824"
  },
  {
    "text": "is an AI agent can query an MCP server at runtime",
    "start": "317824",
    "end": "321826"
  },
  {
    "text": "to discover what primitives are available and then invoke those capabilities in a uniform way.",
    "start": "321826",
    "end": "328550"
  },
  {
    "text": "Because every MCP's server publishes a machine readable catalog,",
    "start": "328990",
    "end": "332624"
  },
  {
    "text": "so tools/list and resources/list and prompts/list,",
    "start": "332624",
    "end": "337961"
  },
  {
    "text": "agents can discover and then use new functionality without redeploying code.",
    "start": "337961",
    "end": "343870"
  },
  {
    "text": "OK, so that's MCPs.",
    "start": "344810",
    "end": "345790"
  },
  {
    "text": "What about APIs?",
    "start": "345790",
    "end": "346650"
  },
  {
    "text": "Well APIs are another way of letting one system access another system's functionality or data.",
    "start": "346650",
    "end": "351919"
  },
  {
    "text": "An application programming interface is to find a set of rules or protocols describing how to request information or services.",
    "start": "352340",
    "end": "358879"
  },
  {
    "text": "And by using APIs, developers can integrate capabilities from external systems instead of building everything from scratch.",
    "start": "359400",
    "end": "366859"
  },
  {
    "text": "So an e-commerce site can use a payment API to process credit card payments, for example.",
    "start": "366980",
    "end": "371579"
  },
  {
    "text": "Now the API acts as an abstraction layer.",
    "start": "372160",
    "end": "374459"
  },
  {
    "text": "So we have the requesting application, the client,",
    "start": "374460",
    "end": "379555"
  },
  {
    "text": "well that doesn't need to know the internal details of the service that it wants to invoke, the server.",
    "start": "379555",
    "end": "387000"
  },
  {
    "text": "It's all kind of abstracted away from it,",
    "start": "387180",
    "end": "390102"
  },
  {
    "text": "because the server processes the request and the only thing we need to know is how to format the requests",
    "start": "390102",
    "end": "395960"
  },
  {
    "text": "and understand the responses using the API.",
    "start": "395960",
    "end": "400358"
  },
  {
    "text": "That's really all there is to it.",
    "start": "400780",
    "end": "402399"
  },
  {
    "text": "Now there are a lot of different API styles but One of the most ubiquitous is the RESTful API style.",
    "start": "402580",
    "end": "411879"
  },
  {
    "text": "You can kind of think of that as really the, essentially the web default API.",
    "start": "412160",
    "end": "416859"
  },
  {
    "text": "And a RESTFUL API communicates over HTTP.",
    "start": "417500",
    "end": "420839"
  },
  {
    "text": "So this call here is an HTTP call with RESTfUL API where clients interact using standard HTTP methods.",
    "start": "421040",
    "end": "429880"
  },
  {
    "text": "So they might use GET, for example, to retrieve data.",
    "start": "430160",
    "end": "434660"
  },
  {
    "text": "They might use.",
    "start": "434660",
    "end": "435660"
  },
  {
    "text": "Post to create data, put to update data, and delete to remove data.",
    "start": "435840",
    "end": "443860"
  },
  {
    "text": "So for example, a REST API for a library system might have an endpoint that looks something like get, and then we say /books,",
    "start": "444540",
    "end": "453691"
  },
  {
    "text": "/123 if we want to fetch book number one, two, threes, details.",
    "start": "453691",
    "end": "459679"
  },
  {
    "text": "Or we might use a post and say post slash loans.",
    "start": "460120",
    "end": "465119"
  },
  {
    "text": "If we want to borrow a book.",
    "start": "465680",
    "end": "467279"
  },
  {
    "text": "Each such endpoint returns data, often in a JSON format, representing the result.",
    "start": "467920",
    "end": "473920"
  },
  {
    "text": "And in fact, many commercial large language models are offered over REST.",
    "start": "474560",
    "end": "479779"
  },
  {
    "text": "Send a JSON prompt, get a JSON completion back.",
    "start": "480220",
    "end": "484320"
  },
  {
    "text": "AI agents might also use REST APIs to perform a web search or interact with a company's internal REST services.",
    "start": "485160",
    "end": "491920"
  },
  {
    "text": "So, MCP and APIs, they share...",
    "start": "492560",
    "end": "494720"
  },
  {
    "text": "Many similarities, not least that they are both considered client-server model architectures.",
    "start": "495330",
    "end": "504750"
  },
  {
    "text": "So in a REST API, a client sends an HTTP request like those gets or posts",
    "start": "505250",
    "end": "510340"
  },
  {
    "text": "I just mentioned to a server, and then the server returns a response in MCP.",
    "start": "510340",
    "end": "514869"
  },
  {
    "text": "The MCP client sends the request like tools slash call to an MCP server and receives a response.",
    "start": "515250",
    "end": "521309"
  },
  {
    "text": "So they really both offer layer of abstraction so that one system doesn't need to know the low level details of another's internals.",
    "start": "521929",
    "end": "533450"
  },
  {
    "text": "The implementation details there, they're hidden.",
    "start": "533850",
    "end": "535769"
  },
  {
    "text": "The client just follows the interface.",
    "start": "535970",
    "end": "537889"
  },
  {
    "text": "So both MCP and APIs, they really help to simplify things,",
    "start": "538550",
    "end": "544061"
  },
  {
    "text": "specifically simplifying integration, letting developers wire systems together instead of reinventing wheels.",
    "start": "544061",
    "end": "552350"
  },
  {
    "text": "But MCP and APIs have some fundamental differences too.",
    "start": "552690",
    "end": "558610"
  },
  {
    "text": "And let's start with purpose built,",
    "start": "559150",
    "end": "562872"
  },
  {
    "text": "which we can really consider as MCP's kind of area,",
    "start": "562872",
    "end": "568158"
  },
  {
    "text": "versus general purpose, which we could really think of as being more of API's domain.",
    "start": "568158",
    "end": "575110"
  },
  {
    "text": "So the model context protocol, it was explicitly designed to integrate LLM applications",
    "start": "575610",
    "end": "581329"
  },
  {
    "text": "with external data and tools.",
    "start": "581850",
    "end": "583289"
  },
  {
    "text": "It standardizes patterns like providing context data and invoking tools in ways that align with how AI agents operate.",
    "start": "583710",
    "end": "591190"
  },
  {
    "text": "But APIs on the other hand, they weren't created specifically with AI or LLMs in mind",
    "start": "592010",
    "end": "597893"
  },
  {
    "text": "and that means that MCP bakes in certain assumptions that are useful for AI.",
    "start": "597893",
    "end": "602970"
  },
  {
    "text": "Now that includes one of MCP's strongest advantages and that is the fact that it supports dynamic discovery.",
    "start": "603410",
    "end": "612879"
  },
  {
    "text": "So what do I mean by that?",
    "start": "613920",
    "end": "615440"
  },
  {
    "text": "Well, an MCP client can just simply ask an MCPserver, hey, what can you do?",
    "start": "615520",
    "end": "620679"
  },
  {
    "text": "And it will get back a description of all available functions and data that server offers.",
    "start": "620980",
    "end": "626540"
  },
  {
    "text": "Now the client or the LLM application using it can then adapt to whatever happens to be available.",
    "start": "627080",
    "end": "633480"
  },
  {
    "text": "Traditional REST APIs, they don't typically expose an equivalent runtime discovery mechanism",
    "start": "634300",
    "end": "638514"
  },
  {
    "text": "and if the API changes, new endpoints are added the client needs to be updated by a developer.",
    "start": "638514",
    "end": "643829"
  },
  {
    "text": "MCP is kind of flipping this model because the AI agents",
    "start": "644430",
    "end": "648125"
  },
  {
    "text": "can retrieve the latest capabilities list from a server each time it connects and then it can pick up new features automatically.",
    "start": "648125",
    "end": "654529"
  },
  {
    "text": "Now another big difference relates to standardization as well,",
    "start": "655330",
    "end": "659557"
  },
  {
    "text": "specifically standardization of interface,",
    "start": "659557",
    "end": "663145"
  },
  {
    "text": "and the difference here is that every MCP server",
    "start": "663145",
    "end": "667573"
  },
  {
    "text": "regardless of what service or what data it connects to",
    "start": "667573",
    "end": "671370"
  },
  {
    "text": "speaks the same protocol and follows the same patterns, whereas each API is unique.",
    "start": "671370",
    "end": "677460"
  },
  {
    "text": "The specific endpoints and the parameter formats and the authentication schemes, they vary between services.",
    "start": "677700",
    "end": "683999"
  },
  {
    "text": "So if an AI agent wants to use five different REST APIs,",
    "start": "684360",
    "end": "687709"
  },
  {
    "text": "it might need five different adapters, whereas five MCP servers respond to the exact same calls.",
    "start": "687709",
    "end": "694479"
  },
  {
    "text": "Build once, integrate many.",
    "start": "694920",
    "end": "697536"
  },
  {
    "text": "Okay, so similar, but different,",
    "start": "697810",
    "end": "700710"
  },
  {
    "text": "but here's the kicker.",
    "start": "700910",
    "end": "702250"
  },
  {
    "text": "When it comes to MCP, many MCP servers,",
    "start": "702610",
    "end": "708479"
  },
  {
    "text": "when we actually look at their implementation, they actually use traditional APIs to do their work.",
    "start": "708479",
    "end": "715909"
  },
  {
    "text": "In many cases, an MCP server is essentially a wrapper around an existing API,",
    "start": "715970",
    "end": "723689"
  },
  {
    "text": "translating between the MCP format and then the underlying services native interface by using that API,",
    "start": "723690",
    "end": "733909"
  },
  {
    "text": "like the mcp github server, which exposes high level tools such as repository/list as mcb primitives,",
    "start": "733909",
    "end": "742072"
  },
  {
    "text": "but then it internally translates each tool call into the corresponding githubs rest api request.",
    "start": "742072",
    "end": "748691"
  },
  {
    "text": "So MCP and apis are not adversaries they're layers, they're layers in an AI stack.",
    "start": "748691",
    "end": "755079"
  },
  {
    "text": "MCP might use APIs under the hood while providing a more AI friendly interface on top.",
    "start": "755660",
    "end": "761918"
  },
  {
    "text": "And today you can find MCP service for file systems, Google Maps,",
    "start": "762160",
    "end": "766318"
  },
  {
    "text": "Docker, Spotify, and a growing list of enterprise data sources.",
    "start": "766318",
    "end": "770520"
  },
  {
    "text": "And thanks to MCP, those services can now be better integrated into AI agents in a standardized way.",
    "start": "771060",
    "end": "778440"
  }
]