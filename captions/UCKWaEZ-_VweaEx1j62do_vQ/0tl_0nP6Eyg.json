[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "We all love open source software for a lot of \ngood reasons. It doesn't cost anything. It has  ",
    "start": "60",
    "end": "5279"
  },
  {
    "text": "community support, sometimes even industry \nsupport. But it comes with a responsibility.   ",
    "start": "5280",
    "end": "9480"
  },
  {
    "text": "One of those is making sure that it's secure. And \none of the videos that Sahdev brought us was about  ",
    "start": "9480",
    "end": "15900"
  },
  {
    "text": "the three As of open source security. Part of that involved reviewing your code-- getting to know it.  And so he's brought us to challenge! ",
    "start": "15900",
    "end": "23631"
  },
  {
    "text": "That's true, Dan. So we will look at three examples of code. They're simple examples written in Golang, but easy to understand by any developer. The beauty  ",
    "start": "23631",
    "end": "35580"
  },
  {
    "text": "of the simple code is that they represent three \nareas of OWASP top ten security risk areas.",
    "start": "35580",
    "end": "42846"
  },
  {
    "text": " Cool!  Okay, so let's take a look at our first example. \nAnd by the way, you get to play along too. Look  ",
    "start": "42846",
    "end": "48240"
  },
  {
    "start": "43000",
    "end": "223000"
  },
  {
    "text": "for this symbol when I ask the question. And \nthen you'll see this symbol while I'm thinking  ",
    "start": "48240",
    "end": "54000"
  },
  {
    "text": "about it myself. And then finally, the answer \nwill show up [with] this symbol. So take a look  ",
    "start": "54000",
    "end": "58920"
  },
  {
    "text": "at our first one-- is about someone getting a \npassword. And there's this kind of the question  ",
    "start": "58920",
    "end": "64259"
  },
  {
    "text": "of security and code. So the first thing that \njumps out to me is, is when you're doing a scan,  ",
    "start": "64260",
    "end": "69180"
  },
  {
    "text": "the password is going to be shown as the person is \ntyping it. Now, I don't know if that was exactly  ",
    "start": "69180",
    "end": "75360"
  },
  {
    "text": "what you were after. So that's going to put down \nis my first one is is don't show the password.  ",
    "start": "75360",
    "end": "80160"
  },
  {
    "text": "Right? But that might not be what you were after. \nThe other thing that kind of jumped out at me,  ",
    "start": "82380",
    "end": "87659"
  },
  {
    "text": "besides that, is when you say to save the \npassword, and this is where I was doing some  ",
    "start": "87660",
    "end": "92280"
  },
  {
    "text": "security audits myself. And they mentioned that \nwhen you have critical data, you don't want it  ",
    "start": "92280",
    "end": "98640"
  },
  {
    "text": "ending up in logs, for example. And so here, I \nwouldn't be passing around a password that is in  ",
    "start": "98640",
    "end": "105240"
  },
  {
    "text": "the clear. In fact, a smart way of doing this is, \nis you run a hash on it first. Because you really  ",
    "start": "105240",
    "end": "110700"
  },
  {
    "text": "don't care about what the person's stored as their \npassword. You care \"will the hash of it actually  ",
    "start": "110700",
    "end": "116039"
  },
  {
    "text": "match?\", which is good enough for password \nsecurity purposes. The other upside is, is that  ",
    "start": "116040",
    "end": "120840"
  },
  {
    "text": "when you pass into the database, you can avoid \na potential problem where someone has inserted  ",
    "start": "120840",
    "end": "125939"
  },
  {
    "text": "things in that password that's trying to do a SQL \ninjection. And that's where someone is trying to  ",
    "start": "125940",
    "end": "131400"
  },
  {
    "text": "trick the program into running a SQL query that \nreally wasn't intended. That's the three things  ",
    "start": "131400",
    "end": "138120"
  },
  {
    "text": "I think I was talking about -- was running a \nhash. Make sure... Oh! And also make sure that  ",
    "start": "138120",
    "end": "145200"
  },
  {
    "text": "the password has the keywords, er, the complexity \nthat it should have. And also the SQL injection.  ",
    "start": "145200",
    "end": "153660"
  },
  {
    "text": "Those are my three answers. That is my final answer.  ",
    "start": "157380",
    "end": "160362"
  },
  {
    "text": "Well, you did good, Dan, I must say that. So, this is an example of one from OWASP top ten-- this is an example of cryptographical failure.  ",
    "start": "160362",
    "end": "172380"
  },
  {
    "text": "You never store passwords in plain text. Hashing \nwith salting, that's what you want to do. [Dan] Right, exactly.  ",
    "start": "172380",
    "end": "178500"
  },
  {
    "text": "And then second thing, as you said, with \ncomplexity. One other thing is, it's not checking,  ",
    "start": "178500",
    "end": "187140"
  },
  {
    "text": "you know, at a minimum, the length of password. \nThe longer the password, they tend to be more safer.",
    "start": "187140",
    "end": "193736"
  },
  {
    "text": "We have a bunch of videos on that topic, as \na matter of fact. So be sure to check it out. Now,  ",
    "start": "193736",
    "end": "197877"
  },
  {
    "text": "one other thing to think about is when you look at \nyour password and it's being stored in a database,  ",
    "start": "197878",
    "end": "205920"
  },
  {
    "text": "not just storing it in clear, at any time is both \nat-rest and in-motion. That's kind of what I use  ",
    "start": "205920",
    "end": "212220"
  },
  {
    "text": "as a rule of thumb. If you have sensitive data, \nyou have to think about both cases. Can a DB  ",
    "start": "212220",
    "end": "216900"
  },
  {
    "text": "admin see it and can it be potentially exposed \nin the logs? So that's kind of question. [Sahdev] That's  ",
    "start": "216900",
    "end": "223019"
  },
  {
    "start": "223000",
    "end": "402000"
  },
  {
    "text": "you got it. [Dan] Great. Okay, now we're going on to the \nsecond one, which at least wasn't quite so easy.  ",
    "start": "223020",
    "end": "228060"
  },
  {
    "text": "So here we are. Now, okay, this requires just a teeny bit of explanation for Q2. And you see this permission here of 0700. For the",
    "start": "228660",
    "end": "238860"
  },
  {
    "text": "Unix-- people who are newer to UNIX, let me point \nout what that means-- that's referring to the",
    "start": "238860",
    "end": "244260"
  },
  {
    "text": "[file] permissions. It's a bit pattern where each one of \nthese numbers represents the permissions for the  ",
    "start": "244260",
    "end": "251040"
  },
  {
    "text": "owner, group, and everyone. And so, for example, \nthis says that-- it's a three bit pattern --that  ",
    "start": "251040",
    "end": "257940"
  },
  {
    "text": "they have execute, or traverse rights, read and \nwrite. That's essentially what the 7 means.  ",
    "start": "257940",
    "end": "264120"
  },
  {
    "text": "And I have to admit, when I first looked at this, I didn't really see a problem because it's saying essentially, this 700 is saying \"I'm  ",
    "start": "264120",
    "end": "272220"
  },
  {
    "text": "going to let the owner be able to read, write \nor traverse it\", which is perfectly the legit--  ",
    "start": "272220",
    "end": "276120"
  },
  {
    "text": "and no one else can. Another common pattern you'll \nsee is 755 saying essentially the owner can do anything they like and the  ",
    "start": "276120",
    "end": "285060"
  },
  {
    "text": "other people can read or traverse. I had to look \nthis one up, and if you haven't hit pause already,  ",
    "start": "285060",
    "end": "290760"
  },
  {
    "text": "here's your opportunity to go do that and look \nit up yourself. I tried to find some potential  ",
    "start": "290760",
    "end": "294960"
  },
  {
    "text": "flaws here. One thing it mentioned was the umask \ncapability, where you have the masking that's  ",
    "start": "294960",
    "end": "301620"
  },
  {
    "text": "applied by the operating system to a newly \ncreated file. Though I don't know if that's  ",
    "start": "301620",
    "end": "306360"
  },
  {
    "text": "what you were after. The other possibility \nis, is that there's a coding question here  ",
    "start": "306360",
    "end": "312616"
  },
  {
    "text": "because you're checking to see if \nthe error that came back was nil,  ",
    "start": "312617",
    "end": "318240"
  },
  {
    "text": "but it could have already existed. So that \nwas really, one was umask, prior existing...  ",
    "start": "318240",
    "end": "325919"
  },
  {
    "text": "And the other one? I give up. Can I phone \na friend? [Sahdev] Well, no, you pretty much got it, actually.",
    "start": "328320",
    "end": "334080"
  },
  {
    "text": "Really?",
    "start": "334080",
    "end": "335702"
  },
  {
    "text": "So the one big thing here is every time you use any function, here Go package mkDirAll. Or using third-party packages, right, you must understand the  ",
    "start": "335702",
    "end": "349740"
  },
  {
    "text": "function before blindly using it. How it works. \nSo mkDirAll, it's a function that will create the  ",
    "start": "349740",
    "end": "357960"
  },
  {
    "text": "directory for you with the desired permission, \nif it's not there. [Dan] Yeah, if it already exists,  ",
    "start": "357960",
    "end": "362340"
  },
  {
    "text": "it'll just leave it alone. It doesn't even return \nan error. [Sahdev] Exactly. So what's missing here is \"What  ",
    "start": "362340",
    "end": "367620"
  },
  {
    "text": "if there's a directory there with 0777?\" [Dan] Yeah, right. In fact, when I was looking up through Stack Overflow,  ",
    "start": "367620",
    "end": "375660"
  },
  {
    "text": "there was this big argument about a potential race \ncondition for this, too. Because as you check to  ",
    "start": "375660",
    "end": "380580"
  },
  {
    "text": "see, is that come back in an error, and then I \nchecked to see it exists-- in between, potentially  ",
    "start": "380580",
    "end": "385020"
  },
  {
    "text": "someone could have come in and created that file. \nAnd so it turns out this is actually, for such a  ",
    "start": "385020",
    "end": "389580"
  },
  {
    "text": "small problem, it's really something to look at. [Sahdev] It's a small but this is one of the, like I said,  ",
    "start": "389580",
    "end": "394379"
  },
  {
    "text": "this is the top, actually, this is the number one \nproblem in the top ten risk areas-- broken access  ",
    "start": "394380",
    "end": "401220"
  },
  {
    "text": "control. [Dan] Wow. Okay. So let's go out to the last \none then. And so that's question three. Okay,  ",
    "start": "401220",
    "end": "407100"
  },
  {
    "start": "402000",
    "end": "701000"
  },
  {
    "text": "so I have to comment first that I'm not really \nhappy with this as a code example because it  ",
    "start": "407100",
    "end": "412680"
  },
  {
    "text": "kind of offends from a few other ways besides \nsecurity that I feel compelled to point out.  ",
    "start": "412680",
    "end": "416759"
  },
  {
    "text": "One-- please don't do this where you write a \nsleep loop. That's kind of a bad idea overall,  ",
    "start": "418320",
    "end": "423840"
  },
  {
    "text": "because that means that the process is \ngoing to continue to consume resources.  ",
    "start": "423840",
    "end": "427800"
  },
  {
    "text": "It also means the process has state in \nit, and if it is somehow terminated,  ",
    "start": "427800",
    "end": "432360"
  },
  {
    "text": "you've lost that state. A more proper way of doing \nthis is is that you should create some sort of  ",
    "start": "432360",
    "end": "436979"
  },
  {
    "text": "background daemon that you register these sleep \nnotifications-- I'm sorry --these notifications  ",
    "start": "436980",
    "end": "441120"
  },
  {
    "text": "with and hopefully that will do the result that \nyou want. I don't think that's what you're after  ",
    "start": "441120",
    "end": "447120"
  },
  {
    "text": "though. [Sahdev] That's true! [Dan] Yeah, but I felt compelled \nto mention it! But I think what you're after is,  ",
    "start": "447120",
    "end": "454860"
  },
  {
    "text": "is that if you're doing this sleep notification, \nespecially if it's just for a longer period,  ",
    "start": "454860",
    "end": "460379"
  },
  {
    "text": "potentially the access rights to the person \nyou're notifying has changed in between the  ",
    "start": "460380",
    "end": "465900"
  },
  {
    "text": "time. Like imagine, for example, you're getting an \nemail notification coming from one of your systems  ",
    "start": "465900",
    "end": "473040"
  },
  {
    "text": "and they need authority to be able to do that. \nWell, if I withdraw that authority and I have this  ",
    "start": "473040",
    "end": "477960"
  },
  {
    "text": "background process running, potentially I'm going \nto be notifying them, giving them information,  ",
    "start": "477960",
    "end": "482699"
  },
  {
    "text": "leaking them information that they really don't \nhave a right to do. And so in this code example,  ",
    "start": "482700",
    "end": "488220"
  },
  {
    "text": "where they're in the-- coming out of this reminder \n--they should check to make sure that that user  ",
    "start": "488220",
    "end": "494340"
  },
  {
    "text": "has the [authority] to do that. [Sahdev] So, you do \ntouch a couple of good points. But the one of  ",
    "start": "494340",
    "end": "503460"
  },
  {
    "text": "the main thing I'm looking here from security risk \nareas and which is number three in the OWASP top ten: input validation  ",
    "start": "503460",
    "end": "513779"
  },
  {
    "text": "or data validation. So what are we doing here is, \nwe're getting the input, right? Let's say you got, 10 minutes.",
    "start": "513780",
    "end": "521097"
  },
  {
    "text": "Now, as you said, you know, using sleep \nhere just for simplicity, right? Only in real  ",
    "start": "521097",
    "end": "527279"
  },
  {
    "text": "life, you know, in Golang, you may be using \nGo routines. Write a trigger running, right? A  ",
    "start": "527280",
    "end": "532140"
  },
  {
    "text": "daemon running, right? And that might be running \nfor as long as the app is running and sending  ",
    "start": "532140",
    "end": "540000"
  },
  {
    "text": "reminders or some sort of... [Dan] You're saying, for \nexample, someone passes in a 1000 minutes or something like that or repetitive,  ",
    "start": "540000",
    "end": "545760"
  },
  {
    "text": "that's very... [Sahdev] That's true. Or think about it. \nYou want a notification every ten minutes, for example, or every one hour, right?  ",
    "start": "545760",
    "end": "553740"
  },
  {
    "text": "You make a little bit of logic change here. So, you \nknow, one hour for 30 days, 24 hours, or every day for the whole month.  ",
    "start": "554280",
    "end": "563220"
  },
  {
    "text": "What if somebody passed a negative value? Or \nzero? We're not checking it! Instead of one hour or 10 minutes or whatever  ",
    "start": "563940",
    "end": "573120"
  },
  {
    "text": "you decide, it's going to send it instantly. \nBecause it's zero or negative. So that will one,  ",
    "start": "573120",
    "end": "580320"
  },
  {
    "text": "it's going to be incorrect from what your \nexpectation. Second is, we're logging it, right?  ",
    "start": "580320",
    "end": "586260"
  },
  {
    "text": "Depending on, like you said, the total numbers, \nbecause there's no cap here either. It can really  ",
    "start": "587820",
    "end": "594840"
  },
  {
    "text": "use all the hardware resources, the storage. Keep \nlogging, logging and like instantly. And your  ",
    "start": "595740",
    "end": "602399"
  },
  {
    "text": "expectation was every hour or every few minutes \nor so. But because you didn't check the input, it  ",
    "start": "602400",
    "end": "610020"
  },
  {
    "text": "can crash your system. [Dan] That's a good \npoint. And in fact, I would argue that if you're  ",
    "start": "610020",
    "end": "615900"
  },
  {
    "text": "looking at parameter checking, it's not a bad idea \nto even check it between routines. When you're  ",
    "start": "615900",
    "end": "621840"
  },
  {
    "text": "passing-- someone's passed you a parameter --at \na minimum as an assert statement, to say \"These  ",
    "start": "621840",
    "end": "627240"
  },
  {
    "text": "are what I expect as reasonable parameters.\" \nIf you want to for performance reasons, you might  ",
    "start": "627240",
    "end": "630959"
  },
  {
    "text": "have them optional at runtime. But certainly \nduring unit tests, certainly during integration  ",
    "start": "630960",
    "end": "635460"
  },
  {
    "text": "test and during your final testing, you want to \nhave every single routine test to make sure that  ",
    "start": "635460",
    "end": "641580"
  },
  {
    "text": "a state is expecting is actually legit. And in \nthis case, the one I got wrong, I didn't. ",
    "start": "641580",
    "end": "648420"
  },
  {
    "text": "Yeah, this is the easy thing, but sometimes we miss it, \nright? So the data validation, when it's not done  ",
    "start": "648420",
    "end": "655440"
  },
  {
    "text": "properly, it can create severe problems-- out of \nbound memory. SQL injection is other thing where  ",
    "start": "655440",
    "end": "662340"
  },
  {
    "text": "because -- you can prevent it through the through \nthe validation. [Dan] Well, great. That was a fun quiz.  ",
    "start": "662340",
    "end": "668880"
  },
  {
    "text": "Let's go ahead and wrap that up. And I'm curious \ndown on the comments, I want to hear how many  ",
    "start": "668880",
    "end": "673920"
  },
  {
    "text": "did you get right and if you found anything else \nthat I might have missed. So there it is. Thanks  ",
    "start": "673920",
    "end": "679079"
  },
  {
    "text": "again, Sahdev. [Sahdev] Thank you, Dan. In the comments \nalso be sure and leave us what you'd like to see  ",
    "start": "679080",
    "end": "683700"
  },
  {
    "text": "in other Tech Talk topics. And before you leave, \nplease don't forget to hit Like and Subscribe.",
    "start": "683700",
    "end": "689100"
  }
]