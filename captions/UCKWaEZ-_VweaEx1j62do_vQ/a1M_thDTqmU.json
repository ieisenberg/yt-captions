[
  {
    "text": "What's the difference between Docker and virtual machines, or VMs?",
    "start": "90",
    "end": "4799"
  },
  {
    "text": "Well, we're going to 1) define these two technologies then 2) describe how they work 3) give a bit of guidance on which workloads fit best for each technology.",
    "start": "4830",
    "end": "18869"
  },
  {
    "text": "Now, both of these technologies address something in common and that thing in common is called virtualization.",
    "start": "18900",
    "end": "27420"
  },
  {
    "text": "And what I mean by virtualization is a process where software is used to create an abstraction layer.",
    "start": "28750",
    "end": "36429"
  },
  {
    "text": "So for VMs, that abstraction layer, or that abstraction software, is called a hypervisor.",
    "start": "36760",
    "end": "45057"
  },
  {
    "text": "And a hypervisor is, simply put, something that helps a virtual machine emulate a physical computer.",
    "start": "47470",
    "end": "55420"
  },
  {
    "text": "So underneath the hypervisor here we have some hardware.",
    "start": "55450",
    "end": "61099"
  },
  {
    "text": "And the hypervisor manages the allocation of resources between different virtual machines on that single physical host.",
    "start": "62160",
    "end": "70889"
  },
  {
    "text": "So up here we have a number of VMs.",
    "start": "70900",
    "end": "75090"
  },
  {
    "text": "Now each VM runs its own operating system and it has its own virtual hardware.",
    "start": "76410",
    "end": "82440"
  },
  {
    "text": "So like virtual CPU, virtual storage, that sort of thing.",
    "start": "82440",
    "end": "85709"
  },
  {
    "text": "Now, what about Docker?",
    "start": "86960",
    "end": "88340"
  },
  {
    "text": "Well, Docker is an open source platform that uses containerization technology.",
    "start": "88340",
    "end": "93709"
  },
  {
    "text": "It allows developers to package applications and their dependencies into lightweight, portable containers.",
    "start": "93740",
    "end": "104701"
  },
  {
    "text": "Instead of virtualizing the underlying hardware like this hypervisor is doing for the VMs, Docker containers virtualize the operating system.",
    "start": "105550",
    "end": "118041"
  },
  {
    "text": "So each individual container contains only the application and its libraries and dependencies.",
    "start": "118300",
    "end": "125390"
  },
  {
    "text": "So let's break down the main components of both solutions, and we'll start with Docker.",
    "start": "125410",
    "end": "131020"
  },
  {
    "text": "So the first component I want to tell you about is called the Docker engine.",
    "start": "131830",
    "end": "137379"
  },
  {
    "text": "Now, this is the core software that's responsible for managing the lifecycle of Docker containers.",
    "start": "138530",
    "end": "143830"
  },
  {
    "text": "So we're talking about things like providing the infrastructure for creating, running and orchestrating the containers.",
    "start": "143840",
    "end": "150019"
  },
  {
    "text": "And the Docker engine interacts with the host kernel to allocate resources and enforce isolation between containers.",
    "start": "150380",
    "end": "157159"
  },
  {
    "text": "And that's done through two things primarily; there's something called cgroups or control groups, and they allocate resources among the processes.",
    "start": "157160",
    "end": "167419"
  },
  {
    "text": "And then there's something else called namespaces, and namespaces restrict a container's access and visibility to other resources on the system.",
    "start": "167720",
    "end": "177342"
  },
  {
    "text": "And that ensures that each container has its own isolated environment.",
    "start": "177342",
    "end": "180918"
  },
  {
    "text": "Now there's also Docker images.",
    "start": "182170",
    "end": "187321"
  },
  {
    "text": "And Docker images are lightweight, standalone and executable packages that include everything you need to run a piece of software.",
    "start": "189010",
    "end": "197620"
  },
  {
    "text": "So we're talking about the code for the software, the runtime, the system tools, the libraries and any settings that we need as well.",
    "start": "197650",
    "end": "204340"
  },
  {
    "text": "And Docker images are built using Docker files, which are very simple documents which provide instructions for creating the image.",
    "start": "204940",
    "end": "217120"
  },
  {
    "text": "And then there's also the Docker containers themselves.",
    "start": "218090",
    "end": "225517"
  },
  {
    "text": "And these are the instances of the images that run in the Docker engine.",
    "start": "226420",
    "end": "233709"
  },
  {
    "text": "Each container is an isolated and self-sufficient environment that includes only the necessary components",
    "start": "234160",
    "end": "240182"
  },
  {
    "text": "for running a specific application and can be quickly started, stopped and restarted.",
    "start": "240182",
    "end": "245529"
  },
  {
    "text": "Now, for VMs, we already know the hypervisor is the software responsible for creating, managing and running these virtual machines.",
    "start": "246220",
    "end": "254742"
  },
  {
    "text": "And hypervisors come in two types: so we have a Type 1 hypervisor, that's also known as a bare metal hypervisor.",
    "start": "254742",
    "end": "264574"
  },
  {
    "text": "And that runs directly on the host hardware, so right on that computer there.",
    "start": "265030",
    "end": "269242"
  },
  {
    "text": "There is also a Type 2, and Type 2 is considered a hosted hypervisor, and that's where the hypervisor runs on top of an existing operating system.",
    "start": "269290",
    "end": "280660"
  },
  {
    "text": "Now, the other components we should be concerned about, well, there's the virtual hardware.",
    "start": "281860",
    "end": "286896"
  },
  {
    "text": "And this refers to the emulated components of a virtual machine.",
    "start": "287390",
    "end": "291499"
  },
  {
    "text": "So I'm talking about things like a virtual CPU, virtual memory, virtual storage, virtual network interfaces.",
    "start": "291830",
    "end": "298518"
  },
  {
    "text": "And these components are presented to the guest operating system as if they were real hardware.",
    "start": "298520",
    "end": "304069"
  },
  {
    "text": "The hypervisor is responsible for managing and allocating these virtual resources to each VM.",
    "start": "304490",
    "end": "310069"
  },
  {
    "text": "And yeah, speaking of guest OS, that's another core part of all of this, the guest operating system.",
    "start": "310700",
    "end": "316670"
  },
  {
    "text": "Those are the individual operating systems that run inside each virtual machine.",
    "start": "317030",
    "end": "320749"
  },
  {
    "text": "And each VM can have its own guest OS, which may differ from the host OS and other VMs on the same host.",
    "start": "320750",
    "end": "327560"
  },
  {
    "text": "And that allows users to run multiple operating systems and applications on the same physical machine.",
    "start": "327830",
    "end": "333768"
  },
  {
    "text": "Now, when to pick one over the other?",
    "start": "335220",
    "end": "338472"
  },
  {
    "text": "While the choice isn't always black and white, let's start with some common use cases for VMs.",
    "start": "338970",
    "end": "346289"
  },
  {
    "text": "When would you use a virtual machine?",
    "start": "347010",
    "end": "348930"
  },
  {
    "text": "And I can think of three right away.",
    "start": "348930",
    "end": "351089"
  },
  {
    "text": "And number 1, really, the obvious one, is the diverse operating systems that I just mentioned.",
    "start": "351750",
    "end": "357559"
  },
  {
    "text": "VMs let you run different operating systems, so we could have a VM running Windows, another VM running Linux, all on this same piece of hardware.",
    "start": "358380",
    "end": "365939"
  },
  {
    "text": "And that's handy when you're testing applications across multiple platforms, for example.",
    "start": "365940",
    "end": "370156"
  },
  {
    "text": "A second big advantage is isolation.",
    "start": "370156",
    "end": "375089"
  },
  {
    "text": "Now both solutions offer levels of isolation, but with the VMs,",
    "start": "376090",
    "end": "379759"
  },
  {
    "text": "isolation is it's pretty much built in since each VM runs its own separate kernel and operating system.",
    "start": "379759",
    "end": "387399"
  },
  {
    "text": "And then number 3 is legacy, and what I mean by that, is that VMs are well-suited for running legacy applications",
    "start": "387910",
    "end": "396360"
  },
  {
    "text": "that rely on specific operating system versions or configurations that might not be compatible with the host OS or the other containers.",
    "start": "396360",
    "end": "404138"
  },
  {
    "text": "So you can set up an environment that is perfect for that legacy application and not have to change it.",
    "start": "404380",
    "end": "409330"
  },
  {
    "text": "Now, what about Docker containers?",
    "start": "410170",
    "end": "412080"
  },
  {
    "text": "Let's think about some use cases for these.",
    "start": "412090",
    "end": "415600"
  },
  {
    "text": "And first and foremost, top of the list, is microservices.",
    "start": "416320",
    "end": "421843"
  },
  {
    "text": "This is probably the most common use for containers-- that Docker containers lightweight nature,",
    "start": "422340",
    "end": "428472"
  },
  {
    "text": "its fast start up times and it's the ability to package and distribute dependencies, make it ideal for managing microservices-based applications.",
    "start": "428472",
    "end": "436409"
  },
  {
    "text": "Number 2, it's just the speed of things.",
    "start": "437580",
    "end": "440608"
  },
  {
    "text": "So the rapid development and deployment in the ability to use the Docker containers because we can quickly build, deploy and scale up these containers",
    "start": "440610",
    "end": "452664"
  },
  {
    "text": "and that makes them well-suited for agile development practices and continuous integration/continuous deployment, or CI/CD pipelines.",
    "start": "452665",
    "end": "460938"
  },
  {
    "text": "And then 3, on a similar theme, is resource efficiency.",
    "start": "461310",
    "end": "466959"
  },
  {
    "text": "Which is just to say that containers share the same host kernel and have a much smaller footprint than VMs,",
    "start": "468030",
    "end": "474078"
  },
  {
    "text": "and that allows more containers to run on the same piece of hardware with less overhead.",
    "start": "474078",
    "end": "480540"
  },
  {
    "text": "So, look, in selecting between Docker and VMs, essentially you'll need to consider the specific needs of your applications and infrastructure.",
    "start": "480960",
    "end": "489809"
  },
  {
    "text": "And it's common to see both technologies used in hybrid environments where legacy applications might run on VMs",
    "start": "489810",
    "end": "498996"
  },
  {
    "text": "and then modern microservices-based applications, they'll probably use Docker containers.",
    "start": "498996",
    "end": "505470"
  },
  {
    "text": "It's really not an either or choice for organizations.",
    "start": "505860",
    "end": "509789"
  },
  {
    "text": "Commonly, you'll see both.",
    "start": "510090",
    "end": "511649"
  },
  {
    "text": "And either way, these virtualization technologies have transformed the way we deploy and manage applications.",
    "start": "511650",
    "end": "520018"
  }
]