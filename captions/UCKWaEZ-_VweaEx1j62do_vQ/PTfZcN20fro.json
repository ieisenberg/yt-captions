[
  {
    "text": "So, I have these two colleagues let's call them \"R\",",
    "start": "330",
    "end": "4318"
  },
  {
    "text": "and then we'll call the other one \"G\".",
    "start": "4318",
    "end": "8304"
  },
  {
    "text": "Just using initials here to protect our identities.",
    "start": "8400",
    "end": "10920"
  },
  {
    "text": "Now, R is rather talkative.",
    "start": "10950",
    "end": "13493"
  },
  {
    "text": "They tell you everything they know, whether you want to hear it or not.",
    "start": "13650",
    "end": "17129"
  },
  {
    "text": "G, on the other hand, is much more reserved.",
    "start": "17460",
    "end": "19859"
  },
  {
    "text": "They share the information that's absolutely necessary, but no more.",
    "start": "20220",
    "end": "24419"
  },
  {
    "text": "But they're always willing to share more if I do ask.",
    "start": "24660",
    "end": "26910"
  },
  {
    "text": "And look, this is one way that we can think of the differences between REST, that's the \"R\",",
    "start": "27251",
    "end": "34295"
  },
  {
    "text": "and GraphQL, that's the \"G\".",
    "start": "34295",
    "end": "41371"
  },
  {
    "text": "REST can be a bit of a know-it-all.",
    "start": "41488",
    "end": "44135"
  },
  {
    "text": "You have to be specific in your requests and sift through all the data that's returned.",
    "start": "44135",
    "end": "48839"
  },
  {
    "text": "With GraphQL, you can be precise and only retrieve the data you need.",
    "start": "49110",
    "end": "53700"
  },
  {
    "text": "So that GraphQL prioritizes, giving clients exactly the data they request and no more.",
    "start": "54479",
    "end": "60629"
  },
  {
    "text": "But I'm getting ahead of myself here.",
    "start": "60660",
    "end": "63163"
  },
  {
    "text": "What clients?",
    "start": "63246",
    "end": "64569"
  },
  {
    "text": "What do these technologies do?",
    "start": "64704",
    "end": "66189"
  },
  {
    "text": "Well, both REST and GraphQL are used to build something called APIs,",
    "start": "66270",
    "end": "74133"
  },
  {
    "text": "or Application Programing Interfaces.",
    "start": "74134",
    "end": "78000"
  },
  {
    "text": "And those allow different applications to communicate with each other over the Internet.",
    "start": "78700",
    "end": "83288"
  },
  {
    "text": "So an API takes requests from a from a client over here,",
    "start": "83290",
    "end": "87937"
  },
  {
    "text": "and a client can be like a web application or a mobile app or something like that,",
    "start": "87937",
    "end": "91863"
  },
  {
    "text": "and then it retrieves the necessary data from a server over here.",
    "start": "91863",
    "end": "97750"
  },
  {
    "text": "Now REST, or \"REpresentational State Transfer\" and",
    "start": "98470",
    "end": "102320"
  },
  {
    "text": "\"Graph Query Language\"",
    "start": "102320",
    "end": "104754"
  },
  {
    "text": "are two different approaches to building APIs that have their own strengths and weaknesses.",
    "start": "104754",
    "end": "110139"
  },
  {
    "text": "So REST is an architectural style that relies on HTTP requests to interact with resources,",
    "start": "110560",
    "end": "115591"
  },
  {
    "text": "while GraphQL is a query language that allows clients to retrieve data from multiple data sources in a single API call.",
    "start": "115592",
    "end": "122349"
  },
  {
    "text": "So let's define some terminology and we're going to start with GraphQL.",
    "start": "122560",
    "end": "129875"
  },
  {
    "text": "So in GraphQL, we have something called a \"schema\".",
    "start": "130030",
    "end": "135159"
  },
  {
    "text": "And this is the blueprint that defines all the possible data that clients can query through a service.",
    "start": "135160",
    "end": "140169"
  },
  {
    "text": "Did I say \"query\"?  Yeah, query. That's the next one.",
    "start": "140904",
    "end": "143450"
  },
  {
    "text": "So, a query is a request for data that follows the structure defined in the schema.",
    "start": "143920",
    "end": "151152"
  },
  {
    "text": "Then we have something called a resolver,",
    "start": "151570",
    "end": "155188"
  },
  {
    "text": "and the resolver is called to retrieve the data requested in the query.",
    "start": "155188",
    "end": "160716"
  },
  {
    "text": "And this may involve fetching data from multiple data sources and assembling it into a response",
    "start": "160716",
    "end": "165901"
  },
  {
    "text": "that matches the query structure.",
    "start": "165901",
    "end": "168159"
  },
  {
    "text": "And then lastly, we have mutations.",
    "start": "168190",
    "end": "170793"
  },
  {
    "text": "And mutations, their job is to modify data on the server.",
    "start": "171070",
    "end": "176909"
  },
  {
    "text": "So, if we think of this in terms of the \"Create, Read, Update and Delete\" or the CRUD model,",
    "start": "176910",
    "end": "181246"
  },
  {
    "text": "a query that would be equivalent to the \"read\" in the CRUD, and then all the others, the create, the update, and delete,",
    "start": "181246",
    "end": "186737"
  },
  {
    "text": "they're handled by the mutations.",
    "start": "186737",
    "end": "188789"
  },
  {
    "text": "So that's GraphQL.",
    "start": "190010",
    "end": "192396"
  },
  {
    "text": "And if we take a look at REST, we consider \"resources\" in REST.",
    "start": "192396",
    "end": "199229"
  },
  {
    "text": "So resources are really the fundamental concept in REST,",
    "start": "199510",
    "end": "202646"
  },
  {
    "text": "and each resource has a unique identifier called a \"URI\" that identifies it -",
    "start": "202646",
    "end": "208569"
  },
  {
    "text": "so \"Uniform Resource Identifier\".",
    "start": "208569",
    "end": "211107"
  },
  {
    "text": "And a client can request a response using an HTTP method.",
    "start": "211390",
    "end": "216289"
  },
  {
    "text": "So the methods that we can use are Get, Put, Post and Delete -",
    "start": "216310",
    "end": "223631"
  },
  {
    "text": "and that gets us access to those resources.",
    "start": "223631",
    "end": "225849"
  },
  {
    "text": "And then the server responds with a representation of the resource in a format like JSON or XML.",
    "start": "226570",
    "end": "232339"
  },
  {
    "text": "Now, REST also allows clients to filter, sort and paginate the data using query parameters.",
    "start": "232790",
    "end": "237758"
  },
  {
    "text": "So how are GraphQL and REST similar?",
    "start": "238430",
    "end": "242329"
  },
  {
    "text": "Well, both are used to, as I've mentioned, build APIs",
    "start": "242690",
    "end": "247281"
  },
  {
    "text": "that allow different applications to communicate with each other over the internet.",
    "start": "247281",
    "end": "251199"
  },
  {
    "text": "Both also have a commonality in that they use frameworks and libraries",
    "start": "251420",
    "end": "257527"
  },
  {
    "text": "to handle all of that pesky network details so we don't have to worry about them.",
    "start": "257528",
    "end": "262309"
  },
  {
    "text": "And they also both operate over HTTP.",
    "start": "262640",
    "end": "265429"
  },
  {
    "text": "Although it is worth pointing out that GraphQL is protocol agnostic.",
    "start": "265640",
    "end": "268880"
  },
  {
    "text": "Also, both can handle requests and responses using JSON or JavaScript object notation.",
    "start": "269410",
    "end": "276106"
  },
  {
    "text": "But there are several key differences between the two technologies",
    "start": "276106",
    "end": "280336"
  },
  {
    "text": "that make them better suited for different use cases.",
    "start": "280336",
    "end": "283759"
  },
  {
    "text": "When requesting data from a specific end point,",
    "start": "284180",
    "end": "287578"
  },
  {
    "text": "a REST API returns the full dataset for that resource.",
    "start": "287579",
    "end": "291649"
  },
  {
    "text": "Whereas in contrast, GraphQL is a query language specification.",
    "start": "291650",
    "end": "295970"
  },
  {
    "text": "Instead of tools that allow clients to interact with a single endpoint.",
    "start": "295970",
    "end": "299690"
  },
  {
    "text": "REST APIs often require multiple requests to fetch related data,",
    "start": "300080",
    "end": "304280"
  },
  {
    "text": "while GraphQL can fetch all the data in a single request",
    "start": "304281",
    "end": "307887"
  },
  {
    "text": "using a complex query that follows the schema.",
    "start": "307887",
    "end": "310488"
  },
  {
    "text": "So clients get what they request with no over-fetching.",
    "start": "310850",
    "end": "315223"
  },
  {
    "text": "Now REST APIs are already very familiar to many developers, so people know how to use them.",
    "start": "315620",
    "end": "320272"
  },
  {
    "text": "GraphQL may represent a bit of a learning curve for some.",
    "start": "320430",
    "end": "324203"
  },
  {
    "text": "REST APIs are well-suited for applications that require simple CRUD-like operations.",
    "start": "324410",
    "end": "331279"
  },
  {
    "text": "So for example, an e-commerce website might use a REST API to allow customers to browse products,",
    "start": "331790",
    "end": "337815"
  },
  {
    "text": "add items to their cart and complete orders.",
    "start": "337815",
    "end": "340339"
  },
  {
    "text": "In that case, the API would use the HTTP methods we talked about - get, put, post and delete -",
    "start": "340670",
    "end": "346092"
  },
  {
    "text": "to manipulate the data, like the products, the orders and the customer information.",
    "start": "346092",
    "end": "350389"
  },
  {
    "text": "Now, on the other hand, GraphQL is better suited for applications that require, well,",
    "start": "350600",
    "end": "355969"
  },
  {
    "text": "a bit more complex data requests.",
    "start": "355969",
    "end": "362322"
  },
  {
    "text": "And what I mean by that is where we have examples of many sort of nested fields",
    "start": "363200",
    "end": "367785"
  },
  {
    "text": "or multiple data sources that we need to pull from.",
    "start": "367785",
    "end": "370429"
  },
  {
    "text": "So if we think about a company that provides a suite of financial planning tools for its clients,",
    "start": "370440",
    "end": "374992"
  },
  {
    "text": "those tools might require data from multiple sources,.",
    "start": "374992",
    "end": "377329"
  },
  {
    "text": "So they might need to go to bank transactions, investment portfolios and credit scores.",
    "start": "377330",
    "end": "381619"
  },
  {
    "text": "And with GraphQL, the company can build a single API endpoint that allows clients to query all of the data in a single request.",
    "start": "381620",
    "end": "389689"
  },
  {
    "text": "So clients simply specify exactly the data that they need,",
    "start": "389690",
    "end": "392953"
  },
  {
    "text": "and the server would use a set of resolvers",
    "start": "392953",
    "end": "395543"
  },
  {
    "text": "to fetch the necessary data from each source and assemble it into a response that matches the query structure.",
    "start": "395543",
    "end": "401600"
  },
  {
    "text": "Now, REST and GraphQL",
    "start": "402440",
    "end": "404568"
  },
  {
    "text": "can also work together because GraphQL doesn't dictate a specific application architecture.",
    "start": "404568",
    "end": "409459"
  },
  {
    "text": "It can be introduced on top of an existing REST API",
    "start": "409670",
    "end": "412766"
  },
  {
    "text": "and can work with existing API management tools.",
    "start": "412766",
    "end": "415160"
  },
  {
    "text": "So like my work buddies R and G,",
    "start": "415610",
    "end": "420142"
  },
  {
    "text": "both REST and GraphQL have their unique quirks and strengths.",
    "start": "420143",
    "end": "425120"
  },
  {
    "text": "Both have their place in the world of APIs,",
    "start": "425480",
    "end": "427458"
  },
  {
    "text": "and by understanding their similarities and differences,",
    "start": "427458",
    "end": "430416"
  },
  {
    "text": "you can choose the right tool for the job.",
    "start": "430416",
    "end": "433668"
  },
  {
    "text": "If you have any questions, please drop us a line below.",
    "start": "434900",
    "end": "437509"
  },
  {
    "text": "And if you want to see more videos like this in the future, please like and subscribe.",
    "start": "437510",
    "end": "442160"
  },
  {
    "text": "Thanks for watching.",
    "start": "442730",
    "end": "443730"
  }
]