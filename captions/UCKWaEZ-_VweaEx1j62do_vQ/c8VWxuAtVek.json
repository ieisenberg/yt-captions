[
  {
    "text": "So what is GraphQL? As a front end developer, you \noften need to send requests to multiple services in  ",
    "start": "520",
    "end": "6759"
  },
  {
    "text": "order to fill your UI with data. For example, \nyou have issues of under fetching or need to  ",
    "start": "6760",
    "end": "12560"
  },
  {
    "text": "send requests to multiple services in order to \ncollect all the data you need. You might also  ",
    "start": "12560",
    "end": "18280"
  },
  {
    "text": "be under fetching where you get too much data from \na single request. So you need to filter those out  ",
    "start": "18280",
    "end": "24000"
  },
  {
    "text": "in your front end application. GraphQL solves this \nproblem by giving you one API that you can call to  ",
    "start": "24000",
    "end": "29720"
  },
  {
    "text": "collect all the data you need. GraphQL is a query \nlanguage for APIs, much like how SQL is a query  ",
    "start": "29720",
    "end": "41040"
  },
  {
    "text": "language for databases. For example, the following \nSQL statement where you would select a number of  ",
    "start": "41040",
    "end": "49080"
  },
  {
    "text": "fields from a number of tables looks like this \nin GraphQL. An operation, for example, query,  ",
    "start": "49080",
    "end": "73640"
  },
  {
    "text": "which is for reading data and to find all the \nfields that you want to retrieve, all in a single  ",
    "start": "73640",
    "end": "80080"
  },
  {
    "text": "request. So the way GraphQL is able to do this \nis by having a type system. The type system is  ",
    "start": "80080",
    "end": "86640"
  },
  {
    "text": "defined in a GraphQL schema. In a schema, you will \nfind all the available operations such as query  ",
    "start": "86640",
    "end": "103600"
  },
  {
    "text": "for reading data, mutations for adding, editing, \nor deleting data or subscriptions to subscribe to  ",
    "start": "103600",
    "end": "113680"
  },
  {
    "text": "updates in your data. The response for all these \noperations are defined in your types. These types  ",
    "start": "113680",
    "end": "126440"
  },
  {
    "text": "will have type definitions for all the fields that \nare available in your schema. In order to get the  ",
    "start": "126440",
    "end": "132360"
  },
  {
    "text": "data from the GraphQL API you would need to take \nyour statement and pass it to the GraphQL API in a  ",
    "start": "132360",
    "end": "139200"
  },
  {
    "text": "document. This data is usually passed over HTTP \nand returns data in JSON format. In the case  ",
    "start": "139200",
    "end": "152440"
  },
  {
    "text": "where we want to connect multiple data sources, \nthe GraphQL API will make sure to collect the data  ",
    "start": "152440",
    "end": "157400"
  },
  {
    "text": "from your underlying services. In this scenario \nGraphQL could also serve as a middleware, which  ",
    "start": "157400",
    "end": "165480"
  },
  {
    "text": "we also call GraphQL Federation. In this video we \ntalked about GraphQL. I showed you how GraphQL can  ",
    "start": "165480",
    "end": "172120"
  },
  {
    "text": "help you solve problems you might be facing as \na front end developer such as over fetching or  ",
    "start": "172120",
    "end": "176640"
  },
  {
    "text": "under fetching. How to write the statements in \nGraphQL and how GraphQL as the GraphQL schema  ",
    "start": "176640",
    "end": "182760"
  },
  {
    "text": "where all the time definitions are defined. And \nfinally, GraphQL can be used as a middleware to  ",
    "start": "182760",
    "end": "188120"
  },
  {
    "text": "collect data from all your data sources. Thank \nyou. If you like this video and want to see more  ",
    "start": "188120",
    "end": "193879"
  },
  {
    "text": "like it, please like and subscribe. If you have \nquestions, please drop them in the comments below.",
    "start": "193880",
    "end": "200400"
  }
]