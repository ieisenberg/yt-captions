[
  {
    "text": "What if you could build an AI agent that's able to talk to your database?",
    "start": "480",
    "end": "3279"
  },
  {
    "text": "Most large language models have been trained on code, including SQL.",
    "start": "3700",
    "end": "7059"
  },
  {
    "text": "And in this video, we're going to build an agent that's able to use that SQL knowledge to connect to your databases.",
    "start": "7320",
    "end": "12539"
  },
  {
    "text": "We'll be using LangGraph to build a ReAct agent, Next.js for a frontend application and models running on watsonx.ai.",
    "start": "13240",
    "end": "19470"
  },
  {
    "text": "We also will be running an in-memory database using SQLite.",
    "start": "20040",
    "end": "23260"
  },
  {
    "text": "So, let's dive into VS Code.",
    "start": "23680",
    "end": "25020"
  },
  {
    "text": "In VS Code, I'm going to use the Next.js CLI to set up my boilerplate project.",
    "start": "25760",
    "end": "30719"
  },
  {
    "text": "For this, I'll be running create-next-app at latest, together with the name of my project.",
    "start": "30960",
    "end": "36079"
  },
  {
    "text": "You need to answer a few questions, such as will you be using TypeScript, which I will, and a few other default settings.",
    "start": "37040",
    "end": "42860"
  },
  {
    "text": "We also will be using Tailwind, so we don't have to write any CSS.",
    "start": "43140",
    "end": "46540"
  },
  {
    "text": "If you build your own project, you might want to make slightly different choices.",
    "start": "47280",
    "end": "51119"
  },
  {
    "text": "After the CLI is finished, we can find some boilerplate code in our Text2SQL agent directory.",
    "start": "52950",
    "end": "58350"
  },
  {
    "text": "Make sure to move into this directory before you try to start the application.",
    "start": "59720",
    "end": "63220"
  },
  {
    "text": "In here, we can find a couple of files that we're going to change.",
    "start": "64290",
    "end": "66870"
  },
  {
    "text": "In pages.tsx, you can find boilerplate code for the default Next.js app.",
    "start": "67410",
    "end": "71529"
  },
  {
    "text": "We're going to get rid of this and add our own code instead.",
    "start": "71990",
    "end": "74390"
  },
  {
    "text": "In here, I'll be creating a component called Home, which has a div element,",
    "start": "77150",
    "end": "80950"
  },
  {
    "text": "with some settings in Tailwind to make sure we render the page nicely.",
    "start": "80950",
    "end": "84269"
  },
  {
    "text": "We also need to make sure that we run this as a client-side component.",
    "start": "84270",
    "end": "88030"
  },
  {
    "text": "In Next.js, you can run components either client-side, or you can run code server-side in the background.",
    "start": "88490",
    "end": "93729"
  },
  {
    "text": "Inside this div, we'll be adding a header,",
    "start": "95880",
    "end": "98159"
  },
  {
    "text": "we'll be adding some placeholder messages, and finally, we'll be adding an",
    "start": "98159",
    "end": "101677"
  },
  {
    "text": "input box that we'll use to type a message to the large language model.",
    "start": "101678",
    "end": "105119"
  },
  {
    "text": "Let me paste in the code for the header, which includes a title for this application.",
    "start": "107720",
    "end": "111819"
  },
  {
    "text": "Then we're going to paste in the input bar and button that we need in order to submit a question.",
    "start": "112970",
    "end": "117550"
  },
  {
    "text": "We'll be hooking up the input element and the button element to some functions later on.",
    "start": "120070",
    "end": "124870"
  },
  {
    "text": "And then finally, in the middle, we're going to add some placeholder messages,",
    "start": "125590",
    "end": "129006"
  },
  {
    "text": "which, of course, we'll be populating with data coming from the large language model later on.",
    "start": "129006",
    "end": "134010"
  },
  {
    "text": "After putting in the code for the messages, I'm going to format my code and start the Next.js application.",
    "start": "136700",
    "end": "142459"
  },
  {
    "text": "I can do this by running npm run dev, and this should open up a new page in my browser.",
    "start": "143530",
    "end": "148309"
  },
  {
    "text": "In the browser, you can see we have a header, we have an input bar and also a button to submit a question.",
    "start": "155740",
    "end": "161580"
  },
  {
    "text": "You can see there's two placeholder messages.",
    "start": "162240",
    "end": "164200"
  },
  {
    "text": "The message from us is tell me a joke about SQL,",
    "start": "164660",
    "end": "167226"
  },
  {
    "text": "and the placeholder reply would be a couple of relational databases",
    "start": "167226",
    "end": "170726"
  },
  {
    "text": "walked into a NoSQL bar, and they left because they couldn't find a table.",
    "start": "170726",
    "end": "174639"
  },
  {
    "text": "If you've been building SQL or NoSQL databases,",
    "start": "175100",
    "end": "177852"
  },
  {
    "text": "you probably understand that NoSQL databases don't have any relational tables.",
    "start": "177852",
    "end": "182399"
  },
  {
    "text": "So let's head back to VS Code and start implementing the logic to have",
    "start": "182400",
    "end": "186735"
  },
  {
    "text": "the LLM tell us a joke instead of coming up with a placeholder message myself.",
    "start": "186735",
    "end": "191499"
  },
  {
    "text": "We're going to kill the process running in our terminal because we need to install some libraries.",
    "start": "194800",
    "end": "198879"
  },
  {
    "text": "We're going to install LangGraph and we're also going to be installing",
    "start": "199830",
    "end": "202268"
  },
  {
    "text": "LangChain community, as LangGraph is based on LangChain.",
    "start": "202268",
    "end": "205331"
  },
  {
    "text": "With these libraries, we'll be able to create a ReAct agent, and also we'll be able to connect to models available on watsonx.ai.",
    "start": "207420",
    "end": "213799"
  },
  {
    "text": "After the installation is finished, we can create a new file, which we're going to call actions.ts,",
    "start": "214940",
    "end": "219561"
  },
  {
    "text": "and this is where we'll implement the logic to create the ReAct agent, and also to connect to models in watsonx.ai.",
    "start": "219561",
    "end": "225660"
  },
  {
    "text": "We will be calling this file actions.ts,",
    "start": "227910",
    "end": "230896"
  },
  {
    "text": "and at the bottom, at the top of this file, we need to make sure that we set it as a server-side file.",
    "start": "230896",
    "end": "237090"
  },
  {
    "text": "And in here we can add a new function, which we are going to call message.",
    "start": "238200",
    "end": "242160"
  },
  {
    "text": "This message function will take an input, which is a message history, and then at the end it should return the latest message.",
    "start": "243600",
    "end": "249640"
  },
  {
    "text": "First, we need to import some functions from LangChain.",
    "start": "251280",
    "end": "254898"
  },
  {
    "text": "The first one is a chat function in order to connect to models in watsonx.ai.",
    "start": "256269",
    "end": "260189"
  },
  {
    "text": "The second one is a function to create a ReAct agent.",
    "start": "260769",
    "end": "263390"
  },
  {
    "text": "We have two functions, which we need in order to build a tool.",
    "start": "263930",
    "end": "266729"
  },
  {
    "text": "And then finally, we need to import two functions,",
    "start": "267230",
    "end": "270634"
  },
  {
    "text": "which are used to connect the messages coming from our frontend component",
    "start": "270634",
    "end": "275499"
  },
  {
    "text": "to the messages that we need in our backend server.",
    "start": "275499",
    "end": "278457"
  },
  {
    "text": "In XAS, you won't be able to pass down very rich objects, such as the message history and LangChain.",
    "start": "278457",
    "end": "284343"
  },
  {
    "text": "So instead, we need to serialize these to JSON, and then we need to deserialize these.",
    "start": "284660",
    "end": "288919"
  },
  {
    "text": "So, there is a bit of function in here in order to do the serialization, and later the deserialization.",
    "start": "289020",
    "end": "294339"
  },
  {
    "text": "The store message function will actually be the reply, will actually be the result type of messages in here.",
    "start": "295530",
    "end": "304700"
  },
  {
    "text": "So, let me add the logic here.",
    "start": "305120",
    "end": "306600"
  },
  {
    "text": "First, I'm going to deserialize the messages coming in.",
    "start": "306600",
    "end": "309619"
  },
  {
    "text": "And as mentioned, these have been serialized in order to pass them from our frontend component to our backend component.",
    "start": "310120",
    "end": "316040"
  },
  {
    "text": "Then we're going to set up the agent, and for this we'll be using the chat watsonx interface.",
    "start": "317580",
    "end": "321960"
  },
  {
    "text": "You can see the model we're using is Mistral Large",
    "start": "323300",
    "end": "325800"
  },
  {
    "text": "but, of course, you can use any of the other models available to your watsonx.ai project.",
    "start": "325800",
    "end": "330138"
  },
  {
    "text": "We won't be passing any tools in yet, because we first need to set up our database.",
    "start": "331360",
    "end": "335219"
  },
  {
    "text": "And then finally, we're going to return the response at the end of this function.",
    "start": "335220",
    "end": "339399"
  },
  {
    "text": "So let me save this so the file gets cleaned up.",
    "start": "342290",
    "end": "344529"
  },
  {
    "text": "I'm now also going to set up my environment variables for watsonx.ai.",
    "start": "345130",
    "end": "348879"
  },
  {
    "text": "I need my project ID, I need an endpoint and I also need to pass in my API key.",
    "start": "349550",
    "end": "353629"
  },
  {
    "text": "For this, I'm going to create a new file, which I'll be calling .env inside my project directory.",
    "start": "354520",
    "end": "360099"
  },
  {
    "text": "And in here, I need to set the following variables.",
    "start": "360480",
    "end": "362820"
  },
  {
    "text": "I need to set my API key, my endpoint, which includes your region,",
    "start": "367160",
    "end": "370813"
  },
  {
    "text": "for me it's US South, the identity server, which is static, the project ID,",
    "start": "370813",
    "end": "375449"
  },
  {
    "text": "which is coming from your watsonx.ai project, and finally a static API version.",
    "start": "375450",
    "end": "380160"
  },
  {
    "text": "To get your API key and your project ID, you need to visit the watsonx.ai dashboard,",
    "start": "380720",
    "end": "385097"
  },
  {
    "text": "and you can find the developer access page where these credentials are available to you.",
    "start": "385097",
    "end": "389578"
  },
  {
    "text": "Make sure to save this file and then close it.",
    "start": "390290",
    "end": "392929"
  },
  {
    "text": "The next step is to connect whatever we set up in actions.ts to something we can use in page.tsx.",
    "start": "395540",
    "end": "402000"
  },
  {
    "text": "For this, I'm going to create a few state variables.",
    "start": "403260",
    "end": "405579"
  },
  {
    "text": "First, I need to create a state variable to make our input box a controlled component.",
    "start": "405860",
    "end": "410319"
  },
  {
    "text": "For this, I'll be creating a variable called input message, and then next to the variable to have the value of input message.",
    "start": "411520",
    "end": "418620"
  },
  {
    "text": "We also need to create an update function, which I'll be calling set input message.",
    "start": "418620",
    "end": "422682"
  },
  {
    "text": "In order to use local state, we need to use the useState hook from ReAct, not to be confused with ReAct agents.",
    "start": "424370",
    "end": "431110"
  },
  {
    "text": "ReAct is a JavaScript frontend framework, and I'm going to set the initial value to an empty string.",
    "start": "431110",
    "end": "437979"
  },
  {
    "text": "And also make sure to import useState from ReAct because otherwise you won't be able to use it.",
    "start": "439060",
    "end": "443539"
  },
  {
    "text": "I'm also going to set up a message local state variable later on.",
    "start": "444770",
    "end": "448589"
  },
  {
    "text": "But first let me connect input message to our input box.",
    "start": "448810",
    "end": "452230"
  },
  {
    "text": "I'm going to scroll down to my input element, and in here I'm going to set value to equal to input message.",
    "start": "454030",
    "end": "460220"
  },
  {
    "text": "Then I also need to hook up the onchange event,",
    "start": "461030",
    "end": "464028"
  },
  {
    "text": "so whenever you start typing in this input box, it should update the input message with the value in the element.",
    "start": "464028",
    "end": "470290"
  },
  {
    "text": "So, I'm going to set this to update the set input message function,",
    "start": "473010",
    "end": "477261"
  },
  {
    "text": "and the value will be e.target.value.",
    "start": "479716",
    "end": "483326"
  },
  {
    "text": "Let me save this.",
    "start": "483640",
    "end": "484660"
  },
  {
    "text": "We can now use this state variable in order to send a message to the large language model.",
    "start": "485180",
    "end": "491059"
  },
  {
    "text": "And for this, we need to first set up a local state message history.",
    "start": "491220",
    "end": "494740"
  },
  {
    "text": "For this, I'm going to create another state variable, and this time I'll be calling it messages,",
    "start": "495300",
    "end": "500459"
  },
  {
    "text": "which has, again, an input function, which are called setMessages.",
    "start": "500459",
    "end": "504499"
  },
  {
    "text": "I'm using a useState hook again, and this time the useState hook is going to get a slightly different value.",
    "start": "506830",
    "end": "512609"
  },
  {
    "text": "It's going to be an array instead of an empty string, and I also want to set some type definitions in here.",
    "start": "512950",
    "end": "517789"
  },
  {
    "text": "But first, I need to import some things from LangChain in order to set the state.",
    "start": "518770",
    "end": "522690"
  },
  {
    "text": "The message state variable will be of type BaseMessage, and this is LangChain's type definition of a message.",
    "start": "526850",
    "end": "533308"
  },
  {
    "text": "It's important to use types here in order to not confuse LangChain whenever we send a message to it later on,",
    "start": "533390",
    "end": "539594"
  },
  {
    "text": "as we are using LangChain and LangGraft to build our ReAct agent.",
    "start": "539594",
    "end": "543009"
  },
  {
    "text": "So, the type of messages will be BaseMessage, and then, of course, we can also set a SystemMessage.",
    "start": "545300",
    "end": "550539"
  },
  {
    "text": "You can see I imported some functions and types in order to do this.",
    "start": "550860",
    "end": "554320"
  },
  {
    "text": "So, I have class HumanMessage, class SystemMessage, and class AIMessage.",
    "start": "554360",
    "end": "559003"
  },
  {
    "text": "And these are the three types of messages that we have.",
    "start": "559480",
    "end": "561738"
  },
  {
    "text": "We have a system prompt, which is the SystemMessage,",
    "start": "561780",
    "end": "564341"
  },
  {
    "text": "we have a HumanMessage coming from us or the user, and then we have the AIMessage, which is the LLM response.",
    "start": "564341",
    "end": "570820"
  },
  {
    "text": "In here, I'm going to set up a new system prompt by using the systemMessage class.",
    "start": "573040",
    "end": "578178"
  },
  {
    "text": "And in here, I'm going to tell the large language model what it is and what it is supposed to do for us.",
    "start": "580500",
    "end": "585940"
  },
  {
    "text": "So we'll be building a Text2SQL agent.",
    "start": "587060",
    "end": "589120"
  },
  {
    "text": "It should generate SQL based on natural language and use it with any given tools.",
    "start": "589220",
    "end": "593678"
  },
  {
    "text": "So, later on, we'll be creating a tool to connect to a database,",
    "start": "593820",
    "end": "596813"
  },
  {
    "text": "and the large language model should be aware it can use this tool to execute the SQL.",
    "start": "596813",
    "end": "601058"
  },
  {
    "text": "After setting this, I can then set up my function to actually send the message to the LangGraph agent.",
    "start": "604340",
    "end": "609840"
  },
  {
    "text": "I'll be calling this message function sendMessage.",
    "start": "612410",
    "end": "615190"
  },
  {
    "text": "It has a shadow message history, which includes all the previous messages in state, and then a new message.",
    "start": "615610",
    "end": "621949"
  },
  {
    "text": "So, this will be your input message.",
    "start": "622010",
    "end": "623509"
  },
  {
    "text": "Whatever you type in the input box will be its value.",
    "start": "623650",
    "end": "625970"
  },
  {
    "text": "And then before I'm sending it to the message function, which I have in actions.ts,",
    "start": "627210",
    "end": "631497"
  },
  {
    "text": "I'm going to make sure that I serialize it in order to transfer it to our actions.ts function.",
    "start": "631497",
    "end": "636869"
  },
  {
    "text": "Now, finally, if there's a response from the large language model,",
    "start": "638270",
    "end": "641229"
  },
  {
    "text": "I'm going to make sure I store it in a local state as an AIMessage because it's coming from the large language model.",
    "start": "641229",
    "end": "647389"
  },
  {
    "text": "I need to scroll down to my button component and hook it up to send the message whenever I press it.",
    "start": "651600",
    "end": "657440"
  },
  {
    "text": "Say in here, I can create an onclick handler, onclick, and what this will do, it will send message.",
    "start": "657440",
    "end": "666909"
  },
  {
    "text": "And I can just save this.",
    "start": "668190",
    "end": "669629"
  },
  {
    "text": "I probably also want to make sure that I get rid of my input message whenever I send a message here.",
    "start": "671060",
    "end": "677820"
  },
  {
    "text": "So I can also send this value to be an empty string whenever I start to press send.",
    "start": "678380",
    "end": "683679"
  },
  {
    "text": "Something else I want to do here probably is set a loading state.",
    "start": "684480",
    "end": "687079"
  },
  {
    "text": "So, I can create a very simple loading state, which will make sure",
    "start": "687080",
    "end": "690143"
  },
  {
    "text": "I don't get confused whether or not I send something to the large language model.",
    "start": "690143",
    "end": "693979"
  },
  {
    "text": "So, I'll be creating a third state variable, which is called isLoading, and then a function to update the isLoading state.",
    "start": "695330",
    "end": "701270"
  },
  {
    "text": "By default, I will say this will be false because we don't want the loading state whenever we render the application first.",
    "start": "703370",
    "end": "709769"
  },
  {
    "text": "So, this will be equal to false.",
    "start": "711290",
    "end": "712850"
  },
  {
    "text": "Whenever I send a message, I want to make sure that set isLoading is true, so I can show some render.",
    "start": "713640",
    "end": "719440"
  },
  {
    "text": "And then finally, whenever we get our messages, I want to make sure that the loading state is set to false again.",
    "start": "720120",
    "end": "726240"
  },
  {
    "text": "And save this.",
    "start": "729830",
    "end": "730830"
  },
  {
    "text": "I can probably hook up isLoading state somewhere else, so whenever",
    "start": "731130",
    "end": "734258"
  },
  {
    "text": "I start pressing the button, I want to make sure that the button says we are loading.",
    "start": "734258",
    "end": "738989"
  },
  {
    "text": "So, in here, I can check for the isLoading state.",
    "start": "739510",
    "end": "741850"
  },
  {
    "text": "Whenever it is loading, I can change the label to be loading, so our button will show loading instead of send.",
    "start": "742310",
    "end": "747890"
  },
  {
    "text": "And when it's not loading, it can just say send.",
    "start": "748550",
    "end": "750649"
  },
  {
    "text": "I can also disable the input box.",
    "start": "751920",
    "end": "754084"
  },
  {
    "text": "That way you won't be able to send multiple messages when the LLM is already looking at your previous message.",
    "start": "754240",
    "end": "759480"
  },
  {
    "text": "So, this should be all that's needed to set up my frontline application.",
    "start": "764580",
    "end": "768020"
  },
  {
    "text": "I can actually run this and see what it looks like in the browser.",
    "start": "768200",
    "end": "770899"
  },
  {
    "text": "You can see we still have the same application.",
    "start": "780000",
    "end": "781620"
  },
  {
    "text": "We still have the two placeholder messages.",
    "start": "781700",
    "end": "783720"
  },
  {
    "text": "This time we have an input box that should be hooked up to something,",
    "start": "784100",
    "end": "787664"
  },
  {
    "text": "but we won't be able to render these messages yet until we make",
    "start": "787664",
    "end": "790911"
  },
  {
    "text": "another small change. Let's go back to page.tsx",
    "start": "790911",
    "end": "794153"
  },
  {
    "text": "and make sure that our placeholder messages are replaced with the actual messages created by the agent.",
    "start": "794153",
    "end": "799520"
  },
  {
    "text": "In page.tsx, I need to find the place where I set the messages.",
    "start": "804740",
    "end": "808378"
  },
  {
    "text": "And in here, I'm going to check for the existence of a message history.",
    "start": "808640",
    "end": "812999"
  },
  {
    "text": "For this, I'm going to check if the message state is not an empty array.",
    "start": "815700",
    "end": "819699"
  },
  {
    "text": "And if it's not, I'm going to be using it to render the placeholder messages.",
    "start": "819860",
    "end": "824480"
  },
  {
    "text": "We have two types of messages.",
    "start": "828140",
    "end": "829379"
  },
  {
    "text": "We have messages coming from us or the user, and then we have a message coming from the large language model.",
    "start": "829380",
    "end": "834219"
  },
  {
    "text": "So, in here, I need to distinguish between two types of messages.",
    "start": "834820",
    "end": "837759"
  },
  {
    "text": "The first one is the HumanMessage, and the second one",
    "start": "837880",
    "end": "841687"
  },
  {
    "text": "is the message coming from the large language model or, in this case, actually the agent.",
    "start": "841687",
    "end": "847499"
  },
  {
    "text": "As we are using LangChain, we can use the instance of, together with",
    "start": "849610",
    "end": "854199"
  },
  {
    "text": "our class for HumanMessage or AIMessage, to distinguish between these two types.",
    "start": "854199",
    "end": "858509"
  },
  {
    "text": "So, we can add some if-else statements, if message",
    "start": "859840",
    "end": "863570"
  },
  {
    "text": "is equal to an instance of HumanMessage, we can render the first type of message.",
    "start": "863570",
    "end": "868160"
  },
  {
    "text": "If it's equal to an instance of AIMessage, we can render the second one.",
    "start": "870700",
    "end": "874960"
  },
  {
    "text": "And this way, we will make sure that we don't render the wrong message.",
    "start": "875300",
    "end": "878539"
  },
  {
    "text": "We won't be rendering any of the SystemMessages because these are just meant for the LLM or the agent.",
    "start": "879000",
    "end": "884199"
  },
  {
    "text": "Of course, we need to make sure that whatever data is in here",
    "start": "894770",
    "end": "897429"
  },
  {
    "text": "is being rendered dynamically from the state",
    "start": "897429",
    "end": "899746"
  },
  {
    "text": "and isn't our placeholder message. For this, we can use the message.content field.",
    "start": "899746",
    "end": "904928"
  },
  {
    "text": "And we need to make sure that this is rendered as a string, as in theory, content could be an object.",
    "start": "911250",
    "end": "915929"
  },
  {
    "text": "But for this case, I know for sure it will be a string, so I can use the S string definition.",
    "start": "916370",
    "end": "920990"
  },
  {
    "text": "And I can do the same for the AIMessage.",
    "start": "921290",
    "end": "922628"
  },
  {
    "text": "As we are using ReAct, we need to make sure whatever we return from a map function has a key.",
    "start": "924350",
    "end": "929428"
  },
  {
    "text": "And for this, I'll be setting the key to be the message type plus the index count.",
    "start": "930050",
    "end": "934669"
  },
  {
    "text": "And I can do the same for the AIMessage.",
    "start": "936860",
    "end": "938186"
  },
  {
    "text": "Make sure to format this and then save it.",
    "start": "939910",
    "end": "943048"
  },
  {
    "text": "If you would visit the application in the browser, you can see an empty screen",
    "start": "943070",
    "end": "946141"
  },
  {
    "text": "because we don't have any messages in history that should be rendered there.",
    "start": "946141",
    "end": "950709"
  },
  {
    "text": "With this set up, I can now do the final part of this video, and I can create my database.",
    "start": "953290",
    "end": "958209"
  },
  {
    "text": "For this, I'll be using SQLite 3.",
    "start": "958690",
    "end": "960630"
  },
  {
    "text": "So, I need to kill the process running on my terminal and then I can install SQLite.",
    "start": "961530",
    "end": "965750"
  },
  {
    "text": "The library is available on npm, so I can just run npm install SQLite 3.",
    "start": "969360",
    "end": "973659"
  },
  {
    "text": "Of course, you could also run a database in the cloud.",
    "start": "974020",
    "end": "976425"
  },
  {
    "text": "But for this video, I decided it's easier to run something right directly in my application.",
    "start": "976880",
    "end": "981679"
  },
  {
    "text": "After installing the library, I need to create a couple of files.",
    "start": "983080",
    "end": "986059"
  },
  {
    "text": "I'll first, I will be creating a constants.ts file.",
    "start": "986460",
    "end": "989620"
  },
  {
    "text": "In this file, I'll be creating the create SQL queries, which I will be needing later on",
    "start": "993620",
    "end": "998763"
  },
  {
    "text": "because we're going to use these create SQL queries not only to see the database,",
    "start": "998763",
    "end": "1003265"
  },
  {
    "text": "but also to give the large language model additional information on the database schema.",
    "start": "1003265",
    "end": "1007899"
  },
  {
    "text": "So, in here, I'll be first adding information about the customer table.",
    "start": "1009210",
    "end": "1012789"
  },
  {
    "text": "So, we'll be having a customer table in our database, which has ID, email and name.",
    "start": "1013030",
    "end": "1017549"
  },
  {
    "text": "And then we'll be having an order table, which has more information about orders these customers might have placed.",
    "start": "1017990",
    "end": "1024428"
  },
  {
    "text": "And you can see there's a foreign key relation between customer and order,",
    "start": "1025460",
    "end": "1029193"
  },
  {
    "text": "meaning that we would be able to see which customer has placed what order.",
    "start": "1029193",
    "end": "1033399"
  },
  {
    "text": "Let me save this and then create another file, which I'm going to call database.ts.",
    "start": "1034790",
    "end": "1039589"
  },
  {
    "text": "In the database.ts file, I'm going to create the functions to see the database",
    "start": "1040790",
    "end": "1045410"
  },
  {
    "text": "and also to execute a SQL query against this database.",
    "start": "1045410",
    "end": "1048790"
  },
  {
    "text": "Go on this database.ts.",
    "start": "1050250",
    "end": "1051849"
  },
  {
    "text": "In here, I need to make sure that I set it up to be a server-side function.",
    "start": "1052510",
    "end": "1056430"
  },
  {
    "text": "And then I can start to import the constants we just created, which will be customer table and order table.",
    "start": "1056970",
    "end": "1063690"
  },
  {
    "text": "And then I can start to create the database function.",
    "start": "1063950",
    "end": "1066309"
  },
  {
    "text": "First, I want to connect to the database.",
    "start": "1066870",
    "end": "1069230"
  },
  {
    "text": "And for this, I need to set up a new connection to SQLite.",
    "start": "1069900",
    "end": "1073299"
  },
  {
    "text": "Of course, I need to import SQLite as well.",
    "start": "1073780",
    "end": "1077020"
  },
  {
    "text": "And then I can start to create a new database.",
    "start": "1080900",
    "end": "1083319"
  },
  {
    "text": "As mentioned before, I'll be running this in memory because it's the easiest to do for this video.",
    "start": "1084020",
    "end": "1088339"
  },
  {
    "text": "Then I need to create a seed function.",
    "start": "1090410",
    "end": "1092290"
  },
  {
    "text": "In the seed function, I'm going to run both create queries.",
    "start": "1092470",
    "end": "1095890"
  },
  {
    "text": "So, first, I'm going to create a table called customer.",
    "start": "1096170",
    "end": "1098430"
  },
  {
    "text": "Then I'll be creating a table called order.",
    "start": "1098950",
    "end": "1100990"
  },
  {
    "text": "And then, of course, I need to seed these with actual data as well.",
    "start": "1100990",
    "end": "1104789"
  },
  {
    "text": "So, I'll be adding two functions.",
    "start": "1105270",
    "end": "1106789"
  },
  {
    "text": "The first one will be db.run.",
    "start": "1107030",
    "end": "1108722"
  },
  {
    "text": "This will be used to seed the customer table.",
    "start": "1110760",
    "end": "1113260"
  },
  {
    "text": "And then I'll be running another db.run.",
    "start": "1113820",
    "end": "1115412"
  },
  {
    "text": "And this one will be used to seed the orders table.",
    "start": "1116200",
    "end": "1118599"
  },
  {
    "text": "So, in here, I can place the SQL query to populate these tables with data.",
    "start": "1119490",
    "end": "1123730"
  },
  {
    "text": "For customers, I'm going to input some mock data.",
    "start": "1124900",
    "end": "1127800"
  },
  {
    "text": "And I'll be adding 10 users, which are mock data, of course.",
    "start": "1129140",
    "end": "1133380"
  },
  {
    "text": "And then I'll be adding more orders as well.",
    "start": "1133940",
    "end": "1135899"
  },
  {
    "text": "And these orders are linked to customer IDs.",
    "start": "1136080",
    "end": "1138380"
  },
  {
    "text": "So, later on, the agent would be able to match customers to orders.",
    "start": "1138600",
    "end": "1142160"
  },
  {
    "text": "Paste this in as well.",
    "start": "1144810",
    "end": "1145910"
  },
  {
    "text": "You don't have to worry about the formatting because these are template literals.",
    "start": "1146450",
    "end": "1149609"
  },
  {
    "text": "I now have the seed function.",
    "start": "1153110",
    "end": "1154250"
  },
  {
    "text": "I need to make sure I run this function whenever my application starts so I'm able to retrieve data from the database.",
    "start": "1154310",
    "end": "1159869"
  },
  {
    "text": "There are multiple places where you could do this.",
    "start": "1160710",
    "end": "1162470"
  },
  {
    "text": "You can probably set up a nice function that runs whenever you start your application.",
    "start": "1162550",
    "end": "1166329"
  },
  {
    "text": "I'm going to be a bit lazy.",
    "start": "1166750",
    "end": "1168010"
  },
  {
    "text": "And inside my page.tsx, I'm going to import the seed function.",
    "start": "1168590",
    "end": "1172489"
  },
  {
    "text": "And whenever my application mounts, I'm going to run the seed function.",
    "start": "1176570",
    "end": "1179850"
  },
  {
    "text": "For this, I'll be using the useState, the useEffect lifecycle function from ReAct.",
    "start": "1180530",
    "end": "1184852"
  },
  {
    "text": "And I'm going to make sure it only renders when the application first mounts by setting an empty dependency array.",
    "start": "1186540",
    "end": "1192039"
  },
  {
    "text": "And in here, I need to run the seed function.",
    "start": "1192930",
    "end": "1195569"
  },
  {
    "text": "As mentioned, there are better ways to do this.",
    "start": "1197750",
    "end": "1199710"
  },
  {
    "text": "But for the purposes of showing you how to build a TXS SQL agent, this is one of the easiest ways to get it done.",
    "start": "1199710",
    "end": "1205470"
  },
  {
    "text": "In my database.tsx, I can also create a function to execute a SQL query against the database.",
    "start": "1206590",
    "end": "1212408"
  },
  {
    "text": "For this, I will be creating a function which I'm going to call execute.",
    "start": "1213630",
    "end": "1217569"
  },
  {
    "text": "This execute function will take a SQL query as input.",
    "start": "1223580",
    "end": "1227140"
  },
  {
    "text": "And this will be a string.",
    "start": "1228250",
    "end": "1229410"
  },
  {
    "text": "And then it should return data coming from the database.",
    "start": "1230410",
    "end": "1232630"
  },
  {
    "text": "For this, I'm going to set up a promise because I need to make sure I wait for the data returned by the database.",
    "start": "1233350",
    "end": "1240720"
  },
  {
    "text": "You can see I'm also returning errors.",
    "start": "1241580",
    "end": "1243299"
  },
  {
    "text": "So, in case the database responds with an error, I'm going to return this error to the large language mode",
    "start": "1243480",
    "end": "1248867"
  },
  {
    "text": "l so it might be able to try again and do better this time.",
    "start": "1248868",
    "end": "1251979"
  },
  {
    "text": "Let me clean up this code and then save it.",
    "start": "1252920",
    "end": "1255259"
  },
  {
    "text": "We've now set up our database.",
    "start": "1255660",
    "end": "1256880"
  },
  {
    "text": "So, we have a seed function, and we have a function to execute.",
    "start": "1256960",
    "end": "1260299"
  },
  {
    "text": "And I can use both of these to set up a tool, which I'm going to do in actions.ts.",
    "start": "1260540",
    "end": "1265732"
  },
  {
    "text": "In actions.ts, I'm going to create a new tool.",
    "start": "1267390",
    "end": "1270949"
  },
  {
    "text": "I already imported the tool function from LangChain.",
    "start": "1271230",
    "end": "1273520"
  },
  {
    "text": "So, the only next thing for me to do is to actually define this tool.",
    "start": "1275610",
    "end": "1278648"
  },
  {
    "text": "And to define this tool, I'm going to create a constant, which I call GetFromDB.",
    "start": "1279830",
    "end": "1284069"
  },
  {
    "text": "And this will be using the tool function from LangChain.",
    "start": "1287270",
    "end": "1289064"
  },
  {
    "text": "First, it needs to set the callback.",
    "start": "1290240",
    "end": "1293720"
  },
  {
    "text": "So, this callback will be used to execute whenever the tool is being called.",
    "start": "1293740",
    "end": "1298390"
  },
  {
    "text": "And for this, we'll be using the execute function we created in database.ts.",
    "start": "1298770",
    "end": "1302552"
  },
  {
    "text": "So, I'll be adding this to my imports.",
    "start": "1303030",
    "end": "1304589"
  },
  {
    "text": "And then I also need to set the tool definition.",
    "start": "1307380",
    "end": "1309420"
  },
  {
    "text": "So, this will be used by the LLM to decide whether or not it should call your tool.",
    "start": "1309720",
    "end": "1313839"
  },
  {
    "text": "For this, I'm going to paste in a little bit of placeholder code.",
    "start": "1314780",
    "end": "1318380"
  },
  {
    "text": "As you can see, we have to find a tool, which we call GetFromDB.",
    "start": "1320460",
    "end": "1323339"
  },
  {
    "text": "The tool description is get data from a database and then we paste in the database schema.",
    "start": "1323980",
    "end": "1327940"
  },
  {
    "text": "So, this is important because we want the large language model to be aware of what data is available in the database.",
    "start": "1328260",
    "end": "1333599"
  },
  {
    "text": "Make sure we import these from our constants file as well.",
    "start": "1334690",
    "end": "1338169"
  },
  {
    "text": "And then finally, you can see the input schema includes SQL.",
    "start": "1340140",
    "end": "1342960"
  },
  {
    "text": "And there we say it's a SQL query to get data from a database.",
    "start": "1343220",
    "end": "1346100"
  },
  {
    "text": "Put quotes around the field and table name.",
    "start": "1346740",
    "end": "1348460"
  },
  {
    "text": "It's important to make sure the large language model understand how it should form a SQL query.",
    "start": "1348660",
    "end": "1353440"
  },
  {
    "text": "Finally, we need to hook up this GetFromDB function to our actual agent.",
    "start": "1356290",
    "end": "1360250"
  },
  {
    "text": "And we can do this in the tools field.",
    "start": "1360310",
    "end": "1362190"
  },
  {
    "text": "I'm going to save this.",
    "start": "1363350",
    "end": "1364309"
  },
  {
    "text": "And before I'm going to rerun my application, I want to make sure that I update my system prompt",
    "start": "1364310",
    "end": "1368930"
  },
  {
    "text": "so the large language model is aware of how it should use this tool.",
    "start": "1368930",
    "end": "1372150"
  },
  {
    "text": "In page.tsx, we have a very simple system prompt, which I'll be",
    "start": "1373600",
    "end": "1378340"
  },
  {
    "text": "making this a bit more complex by adding more guidelines for the large language model.",
    "start": "1378340",
    "end": "1385258"
  },
  {
    "text": "So, instead of saying you should create a SQL query based on natural language,",
    "start": "1385500",
    "end": "1389268"
  },
  {
    "text": "we're going to tell it you should create a SQLite query based on natural language.",
    "start": "1389268",
    "end": "1394099"
  },
  {
    "text": "You should use the GetFromDB tool whenever possible.",
    "start": "1394300",
    "end": "1396960"
  },
  {
    "text": "And you should enclose field names and table names in double quotes, even if they contain no special characters.",
    "start": "1396960",
    "end": "1402839"
  },
  {
    "text": "So, this will help the large language model to create a better SQL query.",
    "start": "1403460",
    "end": "1406799"
  },
  {
    "text": "Make sure to save this and run the application by running npm run dev.",
    "start": "1408370",
    "end": "1413130"
  },
  {
    "text": "And we should now be able to go back to the browser and see the application in action.",
    "start": "1413930",
    "end": "1417489"
  },
  {
    "text": "Make sure to refresh the page and let's see if the large language model and the",
    "start": "1421380",
    "end": "1425545"
  },
  {
    "text": "agent can come up with a better joke about SQL than I did in the beginning.",
    "start": "1425545",
    "end": "1428839"
  },
  {
    "text": "So, tell me a joke about SQL.",
    "start": "1428840",
    "end": "1433059"
  },
  {
    "text": "For this, it doesn't need to create a SQL query.",
    "start": "1433340",
    "end": "1435600"
  },
  {
    "text": "Instead, it should be able to just use its own training data.",
    "start": "1436040",
    "end": "1439750"
  },
  {
    "text": "The joke is actually why did the database go to therapy?",
    "start": "1441470",
    "end": "1444390"
  },
  {
    "text": "It had too many join issues.",
    "start": "1444390",
    "end": "1445930"
  },
  {
    "text": "So, if you've built SQL databases before, you can understand why this could be funny.",
    "start": "1446010",
    "end": "1450290"
  },
  {
    "text": "So, let's ask a more complex question, which actually involves the large language model to use our tool.",
    "start": "1450830",
    "end": "1455690"
  },
  {
    "text": "So, we can ask it how many customers do I have?",
    "start": "1456680",
    "end": "1460450"
  },
  {
    "text": "And for this, it should query the customer table.",
    "start": "1460470",
    "end": "1463349"
  },
  {
    "text": "You can see it generated a SQL query right here we actually wanted to execute.",
    "start": "1468610",
    "end": "1472528"
  },
  {
    "text": "So, give me the number of customers.",
    "start": "1472870",
    "end": "1475509"
  },
  {
    "text": "And send and, hopefully, we'll come back with the actual number instead of just the SQL query I should use.",
    "start": "1478601",
    "end": "1484659"
  },
  {
    "text": "You can see we should have 10 customers in our database.",
    "start": "1484830",
    "end": "1487630"
  },
  {
    "text": "If we go back to VS Code, we should be able to see the SQL query generated.",
    "start": "1488290",
    "end": "1492009"
  },
  {
    "text": "In a terminal, you can see I'm actually printing the response of the database.",
    "start": "1495260",
    "end": "1499000"
  },
  {
    "text": "And I'm also printing the SQL query DLM generated.",
    "start": "1499000",
    "end": "1502859"
  },
  {
    "text": "Let's ask a more complex one where we ask it to join both tables.",
    "start": "1503280",
    "end": "1506700"
  },
  {
    "text": "We make sure to refresh so we have a clean message history, and we don't explode the context window.",
    "start": "1508980",
    "end": "1514158"
  },
  {
    "text": "So, which customer placed most orders?",
    "start": "1515160",
    "end": "1518920"
  },
  {
    "text": "This might take a bit longer as now it needs to join multiple tables in order to get the answer.",
    "start": "1522480",
    "end": "1526778"
  },
  {
    "text": "And you can see it replied Lucas Bill placed the most orders.",
    "start": "1527240",
    "end": "1530179"
  },
  {
    "text": "If we go back to VS Code, we might be able to see what SQL query it used in order to generate this answer.",
    "start": "1530340",
    "end": "1536039"
  },
  {
    "text": "In VS Code, you can see it did a join so, it's actually joining the customer table",
    "start": "1539460",
    "end": "1543793"
  },
  {
    "text": "with the order table and finally the result will be Lucas Bill.",
    "start": "1543793",
    "end": "1547059"
  },
  {
    "text": "If you're building a text to SQL agent, you might want to think about guardrails because you don't want to give the,",
    "start": "1547880",
    "end": "1552983"
  },
  {
    "text": "you don't want to give the DLM unlimited control of your database.",
    "start": "1552983",
    "end": "1556400"
  },
  {
    "text": "And that's how easy it is to build a text to SQL agent.",
    "start": "1559000",
    "end": "1561580"
  },
  {
    "text": "We use LangGraph to build a ReAct agent models available on watsonx.ai.",
    "start": "1561660",
    "end": "1565633"
  },
  {
    "text": "And finally we use the SQLite in-memory database to return our data.",
    "start": "1565900",
    "end": "1570299"
  },
  {
    "text": "If you want to know more about building this application yourself,",
    "start": "1570840",
    "end": "1573205"
  },
  {
    "text": "make sure to find the link to the GitHub repository in the video description.",
    "start": "1573415",
    "end": "1577069"
  }
]