[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "As a developer I quickly got into the habit \nof pushing to GitHub multiple times a day.  ",
    "start": "480",
    "end": "5040"
  },
  {
    "text": "So, it surprises me when I hear that Operations \nteams are tackling their infrastructure automation  ",
    "start": "5040",
    "end": "10320"
  },
  {
    "text": "with a lot of manual processes. Hey everyone, my \nname is Sai Vennam, and today I want to talk about  ",
    "start": "10320",
    "end": "15840"
  },
  {
    "text": "Ansible. Ansible is an open source infrastructure \nautomation tool, initially developed by Red Hat  ",
    "start": "15840",
    "end": "22080"
  },
  {
    "text": "and enables you to tackle kind of all of the \nmajor challenges that come with infrastructure.  ",
    "start": "22080",
    "end": "27200"
  },
  {
    "text": "It enables you to do so with code, or \nin other terms infrastructure as code.  ",
    "start": "27200",
    "end": "32880"
  },
  {
    "text": "Now Ansible has three major kind of uses and I'll \nstart with the first one because this is generally  ",
    "start": "33520",
    "end": "38880"
  },
  {
    "text": "the one that people tend to gravitate to when \nthey hear infrastructure automation, and that's  ",
    "start": "38880",
    "end": "44080"
  },
  {
    "start": "40000",
    "end": "127000"
  },
  {
    "text": "the provisioning use case. So the first step of \nkind of any infrastructure story, you've got to  ",
    "start": "44080",
    "end": "49600"
  },
  {
    "text": "have some infrastructure in the first place. So, \nlet's say that using Ansible we've already spun  ",
    "start": "49600",
    "end": "55280"
  },
  {
    "text": "up some environment, let's say it's a VPC and my \nfavorite cloud provider, and within this VPC I've  ",
    "start": "55280",
    "end": "64000"
  },
  {
    "text": "got three virtual machines. So, we'll say we've \ngot one, two, and then a third one as well. Now  ",
    "start": "64000",
    "end": "75360"
  },
  {
    "text": "these set of virtual machines are going to \nessentially be our set of hosts. In the Ansible  ",
    "start": "75360",
    "end": "80400"
  },
  {
    "text": "world, we're going to call this an inventory. So, \nit's basically the set of hosts that Ansible can  ",
    "start": "80400",
    "end": "85360"
  },
  {
    "text": "work against. So, what we're going to call this \nis an inventory. Now within this inventory we can  ",
    "start": "85360",
    "end": "95280"
  },
  {
    "text": "actually create even more sub categorizations and \nAnsible calls this patterns. So, let's say these  ",
    "start": "95280",
    "end": "101520"
  },
  {
    "text": "virtual machines have different, you know, \nunderlying tasks and use cases and services  ",
    "start": "101520",
    "end": "105600"
  },
  {
    "text": "that they're going to be running. So, these \nfirst two virtual machines will call them web  ",
    "start": "105600",
    "end": "109200"
  },
  {
    "text": "because they're going to be used for \nweb servers, and then this last one",
    "start": "110080",
    "end": "114640"
  },
  {
    "text": "we're going to call this DB because we're going \nto run MySql database on it. So, there we go we've  ",
    "start": "116720",
    "end": "122720"
  },
  {
    "text": "got our infrastructure we've got that provision \nkind of step already done, and I want to jump to  ",
    "start": "122720",
    "end": "127760"
  },
  {
    "start": "127000",
    "end": "161000"
  },
  {
    "text": "the second thing that Ansible is really good at \nit's config management. And actually I'd say this  ",
    "start": "127760",
    "end": "133600"
  },
  {
    "text": "is kind of the main use case that most people \nthink about when they first start to use Ansible,  ",
    "start": "133600",
    "end": "139200"
  },
  {
    "text": "and this kind of refers to the ability to \nconfigure your actual infrastructure. So a  ",
    "start": "139200",
    "end": "145040"
  },
  {
    "text": "simple example would be something like operating \nsystem patches, or maybe making sure a certain  ",
    "start": "145040",
    "end": "150239"
  },
  {
    "text": "service is running, maybe installing some service \nonto a virtual machine. So in our use case today,  ",
    "start": "150240",
    "end": "156160"
  },
  {
    "text": "let's focus on that, let's focus on how we can \ndo config management with these virtual machines.  ",
    "start": "156160",
    "end": "160880"
  },
  {
    "start": "161000",
    "end": "209000"
  },
  {
    "text": "Now one of the key tenets of Ansible is that \nit's declarative. Now out there there's kind of  ",
    "start": "161840",
    "end": "168879"
  },
  {
    "text": "the notion that Ansible can be both declarative as \nwell as procedural or imperative, and the idea is  ",
    "start": "170240",
    "end": "176480"
  },
  {
    "text": "that, you know with Ansible you declare what you \nwant instead of focusing on how it gets there.  ",
    "start": "176480",
    "end": "181920"
  },
  {
    "text": "But in essence it can also be considered \nprocedural because the underlying tasks that run  ",
    "start": "182480",
    "end": "187599"
  },
  {
    "text": "are procedural in nature, but as a user of Ansible \nyou're taking advantage of the declarative aspect  ",
    "start": "187600",
    "end": "193760"
  },
  {
    "text": "of it meaning you define what you want rather \nthan how to get to whatever it is that you need.  ",
    "start": "193760",
    "end": "199760"
  },
  {
    "text": "Now today, what we want is to be able to run some \ntasks against those VMs. Let's say we want to run  ",
    "start": "199760",
    "end": "205200"
  },
  {
    "text": "some OS patches and then install a programming \nlanguage, and then install MySQL. So, what we'll  ",
    "start": "205200",
    "end": "210560"
  },
  {
    "start": "209000",
    "end": "382000"
  },
  {
    "text": "need is a playbook. So that's what we'll start \nwith first, we'll create an Ansible playbook  ",
    "start": "210560",
    "end": "217360"
  },
  {
    "text": "and as the name indicates a playbook is going to \nbe a book of tasks or a set of of plays rather.  ",
    "start": "217360",
    "end": "224320"
  },
  {
    "text": "Now our first play we want to run this against all \nof our hosts and we want to just run a security  ",
    "start": "224320",
    "end": "231280"
  },
  {
    "text": "patch, we want to make sure they're all running \nthe same version of the same operating system. So,  ",
    "start": "231280",
    "end": "235440"
  },
  {
    "text": "that will be our first play. So a play is going \nto be kind of consisting of three main things,  ",
    "start": "235440",
    "end": "241440"
  },
  {
    "text": "you need a name for that play, you need the host \nthat it's going to run against, and you need the  ",
    "start": "241440",
    "end": "245600"
  },
  {
    "text": "actual tasks that will run. Now in this particular \nplay, let's say that we've got the hosts set to  ",
    "start": "245600",
    "end": "254080"
  },
  {
    "text": "all because we want to run this against \nall the hosts. And as far as the tasks",
    "start": "256080",
    "end": "261280"
  },
  {
    "text": "we'll define some set of tasks like \nsecurity patching and that kind of thing.  ",
    "start": "264480",
    "end": "268240"
  },
  {
    "text": "Now key thing that I want to mention here, Ansible \ntakes takes advantage of YAML to do its kind of  ",
    "start": "268880",
    "end": "274240"
  },
  {
    "text": "declarative nature of being able to declare what \nyou want. So this would this is obviously not  ",
    "start": "274240",
    "end": "279599"
  },
  {
    "text": "a valid YAML but in the real world you know when \nworking with Ansible this would be in YAML format.  ",
    "start": "279600",
    "end": "284720"
  },
  {
    "text": "So that'll be our first play running \nagainst all of the hosts in our inventory.  ",
    "start": "284720",
    "end": "288400"
  },
  {
    "text": "Now let's let's create some more plays here. Let's \ncreate a play that runs directly against the hosts  ",
    "start": "289280",
    "end": "296080"
  },
  {
    "text": "for our web servers. So we call that web, \nright. And this is going to have a set of tasks,  ",
    "start": "296800",
    "end": "304720"
  },
  {
    "text": "maybe we need to do something like install Go and \ninstall Python, maybe install some other services  ",
    "start": "306400",
    "end": "312639"
  },
  {
    "text": "that are specific to our web servers. And finally \nwe'll create one more play in this playbook,  ",
    "start": "312640",
    "end": "319280"
  },
  {
    "text": "and for this one we'll set the host to be our \nDB, and then for instead of tasks let's talk  ",
    "start": "320160",
    "end": "329760"
  },
  {
    "text": "about something called roles. Ansible has a \nconcept of roles which basically enable you to  ",
    "start": "329760",
    "end": "334480"
  },
  {
    "text": "group together actions that you run multiple \ntimes. So instead of having to define all of  ",
    "start": "335200",
    "end": "339440"
  },
  {
    "text": "the tasks every single time you can just define \nthe roles and that will take advantage of you  ",
    "start": "339440",
    "end": "346960"
  },
  {
    "text": "know the underlying modules and tasks that need \nto be run. By the way, a playbook is one way of  ",
    "start": "346960",
    "end": "352720"
  },
  {
    "text": "grouping together a set of tasks that you need \nto run, it's a declarative way of doing it,  ",
    "start": "352720",
    "end": "357600"
  },
  {
    "text": "but if you really want to keep things \nprocedural imperative you can actually run  ",
    "start": "357600",
    "end": "361360"
  },
  {
    "text": "one-off tasks by themselves and do so in a in an \nimperative way or a procedural way, but this is  ",
    "start": "361360",
    "end": "368000"
  },
  {
    "text": "kind of the way you would do a fully declarative \napproach to automate a set of tasks against you  ",
    "start": "368000",
    "end": "373920"
  },
  {
    "text": "know the set of hosts in your inventory. So, this \nis our playbook and we want to execute this now.  ",
    "start": "373920",
    "end": "380880"
  },
  {
    "start": "382000",
    "end": "473000"
  },
  {
    "text": "That's going to bring me to my second tenet of \nAnsible and that's the fact that it's agent-less.",
    "start": "382160",
    "end": "388240"
  },
  {
    "text": "Now Ansible is agent-less in in the sense that \nlike a lot of other infrastructure automation  ",
    "start": "392320",
    "end": "397440"
  },
  {
    "text": "tools, unlike a lot of other infrastructure \nautomations, you don't actually need to install an  ",
    "start": "397440",
    "end": "402880"
  },
  {
    "text": "agent on the VMs that were provisioned. So, \nAnsible is able to take advantage of SSH  ",
    "start": "402880",
    "end": "408160"
  },
  {
    "text": "to actually directly go into those VMs and \nrun the tasks that it needs to. So, let's  ",
    "start": "408160",
    "end": "412560"
  },
  {
    "text": "see what that looks like right. So we take our \nplaybook and as a user we'll execute Ansible, and  ",
    "start": "412560",
    "end": "419360"
  },
  {
    "text": "Ansible can execute you know and most unix-like \nenvironments, so we'll execute our playbook and  ",
    "start": "419360",
    "end": "425360"
  },
  {
    "text": "it'll run against our virtual machines and there \nwe go, we're happy. But here's one thing to think  ",
    "start": "426480",
    "end": "432000"
  },
  {
    "text": "about. Now chances are we wouldn't be running \nAnsible on our local machine, right. At the  ",
    "start": "432000",
    "end": "436240"
  },
  {
    "text": "end of the day it has to store SSH keys and a \nlot of kind of other secure configuration and  ",
    "start": "436240",
    "end": "441120"
  },
  {
    "text": "you're not really trying to run automation off \nyour local machine. So there's a capability out  ",
    "start": "441120",
    "end": "445680"
  },
  {
    "text": "there called AWX, or Ansible tower, which is \nthe downstream project of the open source AWX,  ",
    "start": "445680",
    "end": "452639"
  },
  {
    "text": "and that's basically a graphical interface and \nset of APIs that enable you to run Ansible and  ",
    "start": "452640",
    "end": "461040"
  },
  {
    "text": "operationalize it across your organization. So \nwhether you're using Ansible, or Ansible Tower, a  ",
    "start": "461040",
    "end": "466800"
  },
  {
    "text": "user will come in execute that playbook and there \nwe go, we'll have our config management executed.  ",
    "start": "466800",
    "end": "472159"
  },
  {
    "start": "473000",
    "end": "544000"
  },
  {
    "text": "Now the third aspect that I want to talk about \nwith Ansible is the fact that it's idempotent.  ",
    "start": "473680",
    "end": "479520"
  },
  {
    "text": "Now what exactly does that mean? So idempotent refers to an operation that can be  ",
    "start": "480880",
    "end": "485520"
  },
  {
    "text": "run multiple times without changing beyond the \ninitial application. In other terms, the first  ",
    "start": "485520",
    "end": "492639"
  },
  {
    "text": "time I run this operation it should recognize \nthat the security patches need to be installed,  ",
    "start": "492640",
    "end": "496960"
  },
  {
    "text": "the services need to be installed, the Python and \nGo and MySQL, or whatever needs to be installed  ",
    "start": "497600",
    "end": "502960"
  },
  {
    "text": "has to be done. The second time I execute that \nsame playbook it's going to recognize it's already  ",
    "start": "502960",
    "end": "507680"
  },
  {
    "text": "done it and it's going to say hey nothing needs \nto be done. But let's say I come back my second  ",
    "start": "507680",
    "end": "513039"
  },
  {
    "text": "day and I say oh we need to actually update the \noperating system version from you know 1.0 to 1.1,  ",
    "start": "513040",
    "end": "520719"
  },
  {
    "text": "and we run this same playbook \nand Ansible, or Ansible Tower,  ",
    "start": "520720",
    "end": "523279"
  },
  {
    "text": "and then recognize it and says hey that operating \nsystem has changed but nothing else did it's going  ",
    "start": "523920",
    "end": "529120"
  },
  {
    "text": "to execute the only action needs to to kind of \nresolve that difference. Now one thing to consider  ",
    "start": "529120",
    "end": "535839"
  },
  {
    "text": "all of these tasks have underlying modules that \npower them and you want to make sure make sure  ",
    "start": "536720",
    "end": "541360"
  },
  {
    "text": "that the modules themselves are programmed in \na way that's idempotent. And this is important  ",
    "start": "541360",
    "end": "545839"
  },
  {
    "start": "544000",
    "end": "632000"
  },
  {
    "text": "and it kind of brings me to my last point \nhere is that Ansible is community driven.  ",
    "start": "545840",
    "end": "550720"
  },
  {
    "text": "That means that if I'm trying to do these things \nin a playbook that I kind of outline today  ",
    "start": "551520",
    "end": "555840"
  },
  {
    "text": "chances are someone out there has already \ndeveloped the playbooks, the modules, the tasks,  ",
    "start": "555840",
    "end": "560720"
  },
  {
    "text": "that I need to actually do those operations. Those \nare basically published as collections in what's  ",
    "start": "560720",
    "end": "567120"
  },
  {
    "text": "called Ansible Galaxy, which is a repository where \ndevelopers can kind of contribute their Ansible  ",
    "start": "567120",
    "end": "574000"
  },
  {
    "text": "kind of modules, or playbooks, or tasks whatever \nthey might have created in the ecosystem. That's  ",
    "start": "574000",
    "end": "579200"
  },
  {
    "text": "one of the great things about Ansible is that it's \nso community driven that chances are whatever I'll  ",
    "start": "579200",
    "end": "583600"
  },
  {
    "text": "need to do I'll be able to find in that galaxy, \nAnsible Galaxy. The one kind of disclaimer I'll  ",
    "start": "583600",
    "end": "588959"
  },
  {
    "text": "say, make sure run these operations locally, \nmake sure they're item potent, make sure  ",
    "start": "588960",
    "end": "593600"
  },
  {
    "text": "that you know executing them multiple times \nresponds in a way that's kind of predictable.  ",
    "start": "593600",
    "end": "599199"
  },
  {
    "text": "So all that being said, we've kind of talked \nabout how Ansible is a declarative language,  ",
    "start": "600640",
    "end": "605440"
  },
  {
    "text": "it doesn't require an agent to be able to \nexecute in these kind of end environments  ",
    "start": "605440",
    "end": "610000"
  },
  {
    "text": "in these virtual machines. It's idempotent based \non the modules that you're using to enable you to  ",
    "start": "610000",
    "end": "615280"
  },
  {
    "text": "avoid things like config drift by making sure \nthat any changes that you make should be done  ",
    "start": "615280",
    "end": "620960"
  },
  {
    "text": "in your infrastructure automation story, \nwhether it's playbooks, or roles, or modules.  ",
    "start": "620960",
    "end": "625360"
  },
  {
    "text": "And then finally, you know you can rest easy \nknowing that chances are whatever you need to  ",
    "start": "625920",
    "end": "630000"
  },
  {
    "text": "automate is available in the community. Now \nthe third use case I mentioned, there are  ",
    "start": "630000",
    "end": "634560"
  },
  {
    "start": "632000",
    "end": "666000"
  },
  {
    "text": "three things that you can do with Ansible, it's \ngoing to be app deployment. Now I'm not going to  ",
    "start": "634560",
    "end": "639360"
  },
  {
    "text": "go into too much detail here today about the app \ndeployment use case, but the fact is you can use  ",
    "start": "639360",
    "end": "644720"
  },
  {
    "text": "Ansible to then take it a step further and deploy \nyour actual web applications and workloads into  ",
    "start": "644720",
    "end": "650720"
  },
  {
    "text": "the virtual machines, it's also a capability \navailable by Ansible. I hope this was helpful.  ",
    "start": "650720",
    "end": "656720"
  },
  {
    "text": "If you like this video or have any comments, \nbe sure to drop a like or comment below.  ",
    "start": "656720",
    "end": "660720"
  },
  {
    "text": "Stay tuned and follow us for more videos \nlike this in the future. Thank you.",
    "start": "660720",
    "end": "664800"
  }
]