[
  {
    "text": "Data doesn't always fit into neat rows and columns, so why force it?",
    "start": "230",
    "end": "4309"
  },
  {
    "text": "Let's explore how NoSQL databases offer the flexibility that modern applications need.",
    "start": "4690",
    "end": "9929"
  },
  {
    "text": "Our applications aren't built in a vacuum.",
    "start": "10670",
    "end": "12550"
  },
  {
    "text": "They run on real-time data, unpredictable inputs, and ever-changing user behavior.",
    "start": "13050",
    "end": "17989"
  },
  {
    "text": "So whether we're building APIs, crafting different data pipelines,",
    "start": "18930",
    "end": "23595"
  },
  {
    "text": "or even building AI models, we want to make sure that we're leveraging NoSQL.",
    "start": "23595",
    "end": "28050"
  },
  {
    "text": "to help us create all these great, efficient systems.",
    "start": "28470",
    "end": "31449"
  },
  {
    "text": "So in this video, we're gonna define practical NoSQL database guidelines",
    "start": "31990",
    "end": "36987"
  },
  {
    "text": "so that you can bring the flexibility and performance that comes from NoSQL technologies into your applications.",
    "start": "36987",
    "end": "44270"
  },
  {
    "text": "By the end, you'll be an expert in NoSQL and understand",
    "start": "44750",
    "end": "48002"
  },
  {
    "text": "how it isn't just a buzzword and how it can actually apply to your workloads today.",
    "start": "48002",
    "end": "52250"
  },
  {
    "text": "So first of all, there's been a lot of information about NoSQL.",
    "start": "53110",
    "end": "57029"
  },
  {
    "text": "And just to clear the air, it actually stands for not only SQL.",
    "start": "57300",
    "end": "61680"
  },
  {
    "text": "So that means that, of course, it can still handle relations.",
    "start": "62840",
    "end": "66459"
  },
  {
    "text": "It can still do joins.",
    "start": "66700",
    "end": "67718"
  },
  {
    "text": "It can so do lookups.",
    "start": "67840",
    "end": "69139"
  },
  {
    "text": "There are indexes.",
    "start": "69380",
    "end": "70420"
  },
  {
    "text": "There are all sorts of NoSQL databases.",
    "start": "70460",
    "end": "73219"
  },
  {
    "text": "And for the context of today's conversation, we're going to talk about a semi-structured JSON object focused database.",
    "start": "73780",
    "end": "82279"
  },
  {
    "text": "So this is going to have groups of JSONs that essentially would represent the NoSQL database structure.",
    "start": "82620",
    "end": "89449"
  },
  {
    "text": "So these groups are referred to as collections or sets.",
    "start": "89870",
    "end": "93009"
  },
  {
    "text": "That's very similar to a table in a relational database.",
    "start": "93290",
    "end": "97529"
  },
  {
    "text": "And then instead of a row, there's gonna be a unique JSON object.",
    "start": "97850",
    "end": "101749"
  },
  {
    "text": "So these are great for event-driven, highly transactional workloads",
    "start": "102230",
    "end": "106183"
  },
  {
    "text": "so that we can move quickly with our data and have enough flexibility.",
    "start": "106183",
    "end": "110470"
  },
  {
    "text": "So let's go into some examples.",
    "start": "111050",
    "end": "112470"
  },
  {
    "text": "This is where NoSQL can really do well.",
    "start": "113050",
    "end": "115169"
  },
  {
    "text": "So think you have a product catalog, right?",
    "start": "115790",
    "end": "117709"
  },
  {
    "text": "So with a product catalog, there might be variable, different products.",
    "start": "118150",
    "end": "122510"
  },
  {
    "text": "And they might, in a relational database, for example, because they might be different,",
    "start": "123190",
    "end": "128453"
  },
  {
    "text": "you actually are going to store them in completely separate tables.",
    "start": "128453",
    "end": "132930"
  },
  {
    "text": "So even though you have three different products, you're going to actually have to break them out.",
    "start": "133550",
    "end": "138309"
  },
  {
    "text": "Even though they maybe have some fields that overlap,",
    "start": "138410",
    "end": "141085"
  },
  {
    "text": "there's just enough that are different that you have to keep them separate.",
    "start": "141085",
    "end": "144569"
  },
  {
    "text": "Let's just represent these by shapes.",
    "start": "145900",
    "end": "147540"
  },
  {
    "text": "If they weren't that different, another pattern we see in relational databases",
    "start": "149160",
    "end": "153187"
  },
  {
    "text": "is to keep everything what's called denormalized in one big table.",
    "start": "153187",
    "end": "157319"
  },
  {
    "text": "So your standard columns are here.",
    "start": "158180",
    "end": "160538"
  },
  {
    "text": "Every product has a name.",
    "start": "161820",
    "end": "163240"
  },
  {
    "text": "Every product as a manufacturer.",
    "start": "163580",
    "end": "165200"
  },
  {
    "text": "But then what happens is that for each unique",
    "start": "165680",
    "end": "169517"
  },
  {
    "text": "set of attributes for each different kind of product would have its own unique rows. So you would see that.",
    "start": "169517",
    "end": "175699"
  },
  {
    "text": "kind of broken out three different ways.",
    "start": "176050",
    "end": "178529"
  },
  {
    "text": "And then let's say that this was a, you know, particular kind.",
    "start": "179710",
    "end": "184870"
  },
  {
    "text": "It would basically align its attributes.",
    "start": "185130",
    "end": "188250"
  },
  {
    "text": "And then when it fill in anything for the other ones, and then it would kind of follow in like this for the others patterns.",
    "start": "189190",
    "end": "195550"
  },
  {
    "text": "So the problem with this being that there's a lot of nulls that end up happening.",
    "start": "197290",
    "end": "201810"
  },
  {
    "text": "And basically this table just can continue to grow.",
    "start": "202750",
    "end": "205989"
  },
  {
    "text": "So this is where NoSQL can come in handy, because when things are held in a JSON,",
    "start": "206610",
    "end": "212104"
  },
  {
    "text": "we have much more flexibility with what's actually needed",
    "start": "212104",
    "end": "216188"
  },
  {
    "text": "to be held and that the schema isn't as strict as in we don't have to come up with a",
    "start": "216188",
    "end": "221832"
  },
  {
    "text": "set list of columns that always have to be written to or accounted for.",
    "start": "221832",
    "end": "228870"
  },
  {
    "text": "So with a JSON basically what we would do is you would just have your intro information",
    "start": "229250",
    "end": "236089"
  },
  {
    "text": "on the product.",
    "start": "236570",
    "end": "237709"
  },
  {
    "text": "And then you might, because you have these variable differences, have your details.",
    "start": "240550",
    "end": "245344"
  },
  {
    "text": "as just another sub-object and that's where you would put them and then you'd be able to close it all out.",
    "start": "247910",
    "end": "255110"
  },
  {
    "text": "And so this is a much more flexible model because this is the area here where you have your variation,",
    "start": "256149",
    "end": "262768"
  },
  {
    "text": "so that you can make sure that that variable data is maintained in the JSON,",
    "start": "265140",
    "end": "269561"
  },
  {
    "text": "but this is much more maintainable overall because go through the scenario of let's say a new product comes online.",
    "start": "269561",
    "end": "275559"
  },
  {
    "text": "Now in this scenario, you have to either build a whole new table or you have build new columns.",
    "start": "276140",
    "end": "281559"
  },
  {
    "text": "In this case, you have do nothing.",
    "start": "282000",
    "end": "283899"
  },
  {
    "text": "You can still insert the JSON just like normal.",
    "start": "284260",
    "end": "286820"
  },
  {
    "text": "You're just gonna change the product name to whatever this new product is",
    "start": "286960",
    "end": "291175"
  },
  {
    "text": "and you have enough flexibility that you can just add in these details as needed.",
    "start": "291175",
    "end": "295960"
  },
  {
    "text": "Now, if you wanted to make certain fields required, you can make this as strict as you",
    "start": "296180",
    "end": "300136"
  },
  {
    "text": "want so that it basically could reflect this, but then you lose some of that good flexibility.",
    "start": "300136",
    "end": "304860"
  },
  {
    "text": "So as you can see,",
    "start": "305460",
    "end": "306556"
  },
  {
    "text": "there are some situations where just a NoSQL storage method",
    "start": "306557",
    "end": "310473"
  },
  {
    "text": "is really going to be more advantageous to use just for a maintainability perspective alone.",
    "start": "310473",
    "end": "316939"
  },
  {
    "text": "Another great use case for NoSQL is when working with sensor data or the internet of Things.",
    "start": "317600",
    "end": "322612"
  },
  {
    "text": "let's imagine we have a system where we have tons of sensors",
    "start": "322612",
    "end": "327421"
  },
  {
    "text": "that are constantly pinging your system with some kind of update.",
    "start": "327421",
    "end": "332578"
  },
  {
    "text": "Maybe it's taking the temperature, maybe it's just checking a status, but regardless,",
    "start": "332900",
    "end": "337758"
  },
  {
    "text": "you can multiply that every so many seconds by 100 different sensors,",
    "start": "337758",
    "end": "342499"
  },
  {
    "text": "you're gonna have a lot of information coming in constantly streaming.",
    "start": "342560",
    "end": "345820"
  },
  {
    "text": "So how would this be solved in a relational database?",
    "start": "346420",
    "end": "348959"
  },
  {
    "text": "You would see just probably one row for a transaction.",
    "start": "349060",
    "end": "352240"
  },
  {
    "text": "In this case, we're going to see an individual JSON that's going to come in",
    "start": "352620",
    "end": "357070"
  },
  {
    "text": "so that it basically will continue to be very optimized for your rights.",
    "start": "357070",
    "end": "361959"
  },
  {
    "text": "So you can get that data in very quickly.",
    "start": "362300",
    "end": "364759"
  },
  {
    "text": "So that's really going to help not only just with the speed that things",
    "start": "365240",
    "end": "370072"
  },
  {
    "text": "need to operate, but we can actually optimize our reads as well with NoSQL.",
    "start": "370072",
    "end": "374798"
  },
  {
    "text": "This is where we have the opportunity to actually group these.",
    "start": "375380",
    "end": "378579"
  },
  {
    "text": "So let's say our sensor data, we wanna look across time.",
    "start": "379200",
    "end": "382079"
  },
  {
    "text": "We can actually aggregate all these little JSONs as actually an array or a nested group,",
    "start": "382570",
    "end": "389126"
  },
  {
    "text": "within one larger JSON that represents all the transactions that came in in the last hour.",
    "start": "389126",
    "end": "395509"
  },
  {
    "text": "So basically we can break this out in a couple different ways so that when we are doing our reads,",
    "start": "396030",
    "end": "402465"
  },
  {
    "text": "we don't have to iterate through millions of objects to check where the time stamps are accurate.",
    "start": "402465",
    "end": "407630"
  },
  {
    "text": "We can actually be much more focused and just pull one JSON that has",
    "start": "408120",
    "end": "413143"
  },
  {
    "text": "every single transaction that happened from the last hour and that'd be a much more effective lookup",
    "start": "413144",
    "end": "418704"
  },
  {
    "text": "than going through and trying to find each individual rows.",
    "start": "418704",
    "end": "421959"
  },
  {
    "text": "So this is actually going to help not only optimize our reads, but it's not going to compromise your writes at all.",
    "start": "422360",
    "end": "428620"
  },
  {
    "text": "And this is also another great way, if you don't want to partition it or break up by different timestamps.",
    "start": "429160",
    "end": "436660"
  },
  {
    "text": "Another example is to break it up by categories.",
    "start": "437010",
    "end": "439550"
  },
  {
    "text": "You could do this by maybe unique sensor or let's say each sensor has an ID that's like a number.",
    "start": "439550",
    "end": "446129"
  },
  {
    "text": "These groups can actually represent, if you want to just randomize the groups,",
    "start": "446950",
    "end": "450847"
  },
  {
    "text": "you can come up with just the first two or three digits of the unique ID",
    "start": "450847",
    "end": "456419"
  },
  {
    "text": "so that you're not actually creating a separate group for every single different sensor itself,",
    "start": "456420",
    "end": "463389"
  },
  {
    "text": "but a group of sensors.",
    "start": "463690",
    "end": "465029"
  },
  {
    "text": "And that's another way that you can then tune it so you get the right grouping to optimize your reads.",
    "start": "465350",
    "end": "470790"
  },
  {
    "text": "All right, let's keep thinking about ways that we can use NoSQL databases to help us support modern data workloads.",
    "start": "472070",
    "end": "480390"
  },
  {
    "text": "So here's a common example of social media posts.",
    "start": "480830",
    "end": "484029"
  },
  {
    "text": "Think of this as any kind of situation whereas with a relational database,",
    "start": "484830",
    "end": "489732"
  },
  {
    "text": "you might see what we call a one-to-many relationship.",
    "start": "489733",
    "end": "493009"
  },
  {
    "text": "So that's usually where you have one parent table,",
    "start": "493560",
    "end": "496521"
  },
  {
    "text": "and then it has a child table, and it's usually depicted in this way if you've ever seen a architectural diagram for a database.",
    "start": "496521",
    "end": "505820"
  },
  {
    "text": "So that doesn't really exist within NoSQL.",
    "start": "506520",
    "end": "510240"
  },
  {
    "text": "It can to some degree, but generally what we wanna do first is we wanna nest certain objects.",
    "start": "511560",
    "end": "516799"
  },
  {
    "text": "So let's think about a social media post.",
    "start": "516820",
    "end": "518799"
  },
  {
    "text": "there's usually comments, right?",
    "start": "519140",
    "end": "520779"
  },
  {
    "text": "And those comments can only relate to one post.",
    "start": "520820",
    "end": "523859"
  },
  {
    "text": "So that relationship is pretty well defined.",
    "start": "524280",
    "end": "526720"
  },
  {
    "text": "And why might we want to actually nest the comments in with the post?",
    "start": "527080",
    "end": "531940"
  },
  {
    "text": "Because they're displayed together.",
    "start": "532160",
    "end": "533480"
  },
  {
    "text": "So in the world of relational databases, you're going to be constantly joining between these two tables.",
    "start": "534340",
    "end": "539979"
  },
  {
    "text": "Now, relational databases are built for joins, so there really isn't going to a problem with that.",
    "start": "540580",
    "end": "545120"
  },
  {
    "text": "However, there might be a better way to do this with NoSQL.",
    "start": "545860",
    "end": "548579"
  },
  {
    "text": "Especially when you have one-to-many relationships where this is fine if it's probably like a social media post by you or by me,",
    "start": "549740",
    "end": "557158"
  },
  {
    "text": "and we don't get that many comments.",
    "start": "557158",
    "end": "558899"
  },
  {
    "text": "There's there's only a couple because generally with this you want to make sure your JSON doesn't get blown out,",
    "start": "558899",
    "end": "564890"
  },
  {
    "text": "but what happens when there's 500 comments in the case of relational database?",
    "start": "564890",
    "end": "570220"
  },
  {
    "text": "You just continue to have this one-money relationship,",
    "start": "570340",
    "end": "573207"
  },
  {
    "text": "but you're gonna run into trouble here with your Your NoSQL solution.",
    "start": "573207",
    "end": "579125"
  },
  {
    "text": "So what we can actually do here is we can build what's called like an expansion set of the comments.",
    "start": "579125",
    "end": "586909"
  },
  {
    "text": "So basically you'll just be able to create a whole new, so this is just an example of one JSON,",
    "start": "587090",
    "end": "593694"
  },
  {
    "text": "but we'll be creating a new example just of kind of a subset of the comments. So, we can call this, like, overflow.",
    "start": "593694",
    "end": "604824"
  },
  {
    "text": "And from here, you would just then have the exact same structure.",
    "start": "607770",
    "end": "611529"
  },
  {
    "text": "So we'd have like our comments",
    "start": "611610",
    "end": "613089"
  },
  {
    "text": "just like before.",
    "start": "622180",
    "end": "623180"
  },
  {
    "text": "And basically from here, we can actually have different amounts of comments.",
    "start": "623840",
    "end": "629380"
  },
  {
    "text": "So you can kind of decide where this threshold really is going to be.",
    "start": "629660",
    "end": "633440"
  },
  {
    "text": "For example, let's say we don't want to display more than 50 comments at once.",
    "start": "634360",
    "end": "640199"
  },
  {
    "text": "And anything over 50, so 51, that's where you're going to create this overflow object,",
    "start": "640620",
    "end": "645934"
  },
  {
    "text": "so that we can basically move them over here.",
    "start": "645934",
    "end": "648679"
  },
  {
    "text": "And this allows you to optimize most posts because they aren't going to be hitting this overflow amount,",
    "start": "649010",
    "end": "655157"
  },
  {
    "text": "but we have a control for those exceptional cases where we see a lot.",
    "start": "655157",
    "end": "662669"
  },
  {
    "text": "And this is going to help optimize not only the reads but also the writes as well.",
    "start": "662750",
    "end": "668450"
  },
  {
    "text": "Now it will have to do a little bit more logic in the writes to kind of make it Oh, am I at 50?",
    "start": "669230",
    "end": "674449"
  },
  {
    "text": "Is it 51?\" to decide whether or not it goes here,",
    "start": "674590",
    "end": "678249"
  },
  {
    "text": "but that's kind of a small price to pay, to actually have the optimization that's needed",
    "start": "678640",
    "end": "685081"
  },
  {
    "text": "to allow for this kind of really fast readability that you're going to get out of this object.",
    "start": "685081",
    "end": "691899"
  },
  {
    "text": "So then, thinking about it in another way, maybe we don't want to display comments by chronological order,",
    "start": "692540",
    "end": "699117"
  },
  {
    "text": "that we want to actually display the top three ranked.",
    "start": "699117",
    "end": "702840"
  },
  {
    "text": "You can actually do this in the exact same way.",
    "start": "703240",
    "end": "706140"
  },
  {
    "text": "just you would basically limit.",
    "start": "706140",
    "end": "707780"
  },
  {
    "text": "these to only showing three instead of 50",
    "start": "708110",
    "end": "712109"
  },
  {
    "text": "and then you can put anything that isn't in those top three and push them to this overflow.",
    "start": "712109",
    "end": "716649"
  },
  {
    "text": "Again this is going to seriously optimize your reads because then your the actual post JSON is going remain very very small",
    "start": "717290",
    "end": "724928"
  },
  {
    "text": "and it basically prevents you from having to read every single comment every single time you post these posts.",
    "start": "724928",
    "end": "732670"
  },
  {
    "text": "and then recalculate what is the top three ranked comments based on whatever algorithm you have.",
    "start": "733790",
    "end": "740108"
  },
  {
    "text": "So by having this basically pre-filtered and pre-ranked or sorted, you're going to get a lot of benefit.",
    "start": "740630",
    "end": "747049"
  },
  {
    "text": "Again, the complexity here comes in your rights that you will have to, every time",
    "start": "747410",
    "end": "751819"
  },
  {
    "text": "a new comment comes in, you'll have to recalculate that ranking.",
    "start": "751819",
    "end": "755889"
  },
  {
    "text": "But if you do the equation of how often am I writing a comment versus reading one?",
    "start": "756210",
    "end": "761669"
  },
  {
    "text": "because the read is so much higher and more important.",
    "start": "762040",
    "end": "764639"
  },
  {
    "text": "It's a, you know, it's a fine trade-off.",
    "start": "765400",
    "end": "767460"
  },
  {
    "text": "Now, lastly in this example, let's think about maybe we want some kind of summary statistics",
    "start": "768760",
    "end": "773979"
  },
  {
    "text": "because we don't, similar to what I was saying with the ranking, we don' want to have to calculate that every time.",
    "start": "773979",
    "end": "780679"
  },
  {
    "text": "So maybe like a total, you now, comment count would be needed.",
    "start": "781160",
    "end": "786159"
  },
  {
    "text": "So that might be something that we end up adding over here.",
    "start": "786680",
    "end": "789339"
  },
  {
    "text": "So that, you know, let's say it's,",
    "start": "791300",
    "end": "792779"
  },
  {
    "text": "there's 4,200 different comments that are written out.",
    "start": "797710",
    "end": "803309"
  },
  {
    "text": "And from there, we can basically find that we can do that math ahead of time based on every time we add a comment.",
    "start": "803730",
    "end": "812790"
  },
  {
    "text": "We can just basically add a plus 1 every time that we add one in.",
    "start": "812950",
    "end": "818869"
  },
  {
    "text": "that's going to help us.",
    "start": "819400",
    "end": "820480"
  },
  {
    "text": "And by pre-writing out all these calculations,",
    "start": "820580",
    "end": "823720"
  },
  {
    "text": "that can get displayed very easily, and no recalculations really need to be done.",
    "start": "823720",
    "end": "828399"
  },
  {
    "text": "So from there, you can see how we're able to do these kind of optimizations",
    "start": "829000",
    "end": "834411"
  },
  {
    "text": "so that we're well aligned to the kind of high demand workflows that we are supporting in our modern applications.",
    "start": "834411",
    "end": "842059"
  },
  {
    "text": "Today, we've demonstrated the strength of NoSQL and that the strength here really lies in its flexibility.",
    "start": "842900",
    "end": "848879"
  },
  {
    "text": "Variable data models, nested objects, and efficient grouping strategies allow NoSQL to really shine.",
    "start": "849520",
    "end": "856480"
  },
  {
    "text": "These patterns allow you to build fast, scalable applications that adapt to dynamic, real-time data.",
    "start": "857160",
    "end": "863839"
  },
  {
    "text": "Mastering these strategies means you're not just reacting to data, you're staying ahead of it.",
    "start": "864500",
    "end": "868659"
  },
  {
    "text": "So I encourage you to keep refining these skills because the future of data engineering,",
    "start": "868980",
    "end": "873243"
  },
  {
    "text": "software development, and data science will depend on building systems that move as fast as the data itself.",
    "start": "873243",
    "end": "879449"
  }
]