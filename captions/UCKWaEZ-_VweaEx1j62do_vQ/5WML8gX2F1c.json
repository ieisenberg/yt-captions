[
  {
    "start": "0",
    "end": "14000"
  },
  {
    "text": "Are you looking for a secure and efficient way\nto manage your containers?",
    "start": "367",
    "end": "3870"
  },
  {
    "text": "Or maybe you've already heard of PodMan as a Docker alternative,\nand you're looking to learn more.",
    "start": "4170",
    "end": "8341"
  },
  {
    "text": "Well, your search ends here.",
    "start": "8441",
    "end": "10410"
  },
  {
    "text": "Today, we're going to be doing a deep dive\ninto what PodMan is as a container engine.",
    "start": "10410",
    "end": "14514"
  },
  {
    "start": "14000",
    "end": "93000"
  },
  {
    "text": "Now, my name is Cedric Clyburn. I'm a developer advocate at Red Hat.",
    "start": "14881",
    "end": "17851"
  },
  {
    "text": "And the IBM folks have graciously allowed me to come in today\nto introduce PodMan and show you not only what PodMan is,",
    "start": "18151",
    "end": "23522"
  },
  {
    "text": "but how it works and how to get started.",
    "start": "23790",
    "end": "26059"
  },
  {
    "text": "So really quickly, before we dive into what PodMan is,\nlet's quickly talk about why containers are so crucial",
    "start": "26059",
    "end": "31564"
  },
  {
    "text": "and set up the scene for PodMan.",
    "start": "31564",
    "end": "33566"
  },
  {
    "text": "Now let's say we're a developer\nand we just finished developing our application.",
    "start": "33566",
    "end": "37837"
  },
  {
    "text": "Let's say maybe it's a Java app or could be Node or it could be Python,\nwhatever it may be.",
    "start": "37871",
    "end": "43376"
  },
  {
    "text": "Now say we want to run it on another developer's computer\nor maybe run it in the cloud.",
    "start": "43743",
    "end": "48048"
  },
  {
    "text": "How do we take this application along with its code base, its runtime,",
    "start": "48148",
    "end": "53253"
  },
  {
    "text": "maybe it's using the JDK and its libraries",
    "start": "53520",
    "end": "57123"
  },
  {
    "text": "and ensure that this is compatible on maybe another developer's machine",
    "start": "57891",
    "end": "61461"
  },
  {
    "text": "or different environments such as QA, development and prod.",
    "start": "61795",
    "end": "65297"
  },
  {
    "text": "Well, this is where containerization comes\nin effectively encapsulating your entire application",
    "start": "65598",
    "end": "70737"
  },
  {
    "text": "into one single transferable unit\nthat can run the same way anywhere you want to deploy it.",
    "start": "71071",
    "end": "76176"
  },
  {
    "text": "So say it's our colleague's computer.",
    "start": "76176",
    "end": "79179"
  },
  {
    "text": "We can run it over there, or we can take our same application",
    "start": "79546",
    "end": "83215"
  },
  {
    "text": "and run it anywhere on a server in the hybrid cloud.",
    "start": "83583",
    "end": "86686"
  },
  {
    "text": "This effectively gets rid of the “oh, it works on my machine” issue",
    "start": "87187",
    "end": "90423"
  },
  {
    "text": "that we has developers face way too often.",
    "start": "90423",
    "end": "93460"
  },
  {
    "start": "93000",
    "end": "192000"
  },
  {
    "text": "Now this is where PodMan comes in.",
    "start": "93960",
    "end": "96129"
  },
  {
    "text": "So PodMan is a container engine.",
    "start": "96129",
    "end": "98131"
  },
  {
    "text": "It's an open source project that helps us with developing containers.",
    "start": "98131",
    "end": "102301"
  },
  {
    "text": "It helps us with managing both the containers and the images,\nand it helps us to deploy containers.",
    "start": "102535",
    "end": "109709"
  },
  {
    "text": "So it's a super powerful tool and it has two unique features about it\nthat make it different from other container engines.",
    "start": "109943",
    "end": "115815"
  },
  {
    "text": "Firstly, is its daemon-less approach.",
    "start": "116182",
    "end": "118351"
  },
  {
    "text": "Now if we look at another popular container engine such as Docker,",
    "start": "118785",
    "end": "122255"
  },
  {
    "text": "what will notice is that when we're working with the Docker CLI",
    "start": "122822",
    "end": "125992"
  },
  {
    "text": "on our terminal or maybe using Docker desktop, what's actually happening",
    "start": "126025",
    "end": "130662"
  },
  {
    "text": "is we're doing functions\nsuch as building an image or running a container.",
    "start": "130930",
    "end": "135068"
  },
  {
    "text": "And what we're actually doing\nis talking to something in the background called the Docker Daemon.",
    "start": "135401",
    "end": "139806"
  },
  {
    "text": "Now what is the Docker daemon?",
    "start": "139806",
    "end": "141007"
  },
  {
    "text": "Well, it's commonly referred to as the Docker engine,\nand it's responsible for all the heavy lifting.",
    "start": "141007",
    "end": "145678"
  },
  {
    "text": "So it'll create containers for us, it'll help us build images,\nand it will do a lot of other functions,",
    "start": "145712",
    "end": "152418"
  },
  {
    "text": "but it's running in the background as a system process\nand it's running as root.",
    "start": "152418",
    "end": "156623"
  },
  {
    "text": "So we have this daemon that's responsible for all the heavy lifting.",
    "start": "156623",
    "end": "159526"
  },
  {
    "text": "This is what's known as a client/server architecture.",
    "start": "159526",
    "end": "162061"
  },
  {
    "text": "Now PodMan is a little bit different in its architecture.",
    "start": "162495",
    "end": "165398"
  },
  {
    "text": "PodMan uses something known as the fork exec model.",
    "start": "165398",
    "end": "168735"
  },
  {
    "text": "So instead of having this background daemon process\nrunning in the background to create containers, work with images.",
    "start": "168735",
    "end": "174474"
  },
  {
    "text": "Now we're doing everything from the client itself.",
    "start": "174707",
    "end": "177076"
  },
  {
    "text": "So when we're creating a container, PodMan is actually forking itself\nand this child process then becomes the container.",
    "start": "177076",
    "end": "184117"
  },
  {
    "text": "So this difference in architecture makes PodMan unique",
    "start": "184551",
    "end": "187887"
  },
  {
    "text": "and makes it more efficient, lightweight and secure\nwhen it comes to container engines.",
    "start": "187887",
    "end": "192392"
  },
  {
    "start": "192000",
    "end": "279000"
  },
  {
    "text": "Now, this also brings us to the point of something\ncalled a single point of failure.",
    "start": "192692",
    "end": "196629"
  },
  {
    "text": "Say, for example, that our Docker engine running in the background\nwould suddenly crash, become unresponsive or be quit.",
    "start": "196996",
    "end": "203403"
  },
  {
    "text": "Now we no longer have access to the containers, images and anything else\nthat's attached to the Docker engine.",
    "start": "203636",
    "end": "209275"
  },
  {
    "text": "So this is what makes PodMan unique is its daemon-less approach.",
    "start": "209642",
    "end": "212612"
  },
  {
    "text": "But because of this architecture,\nthis brings us into the root versus rootless idea.",
    "start": "212946",
    "end": "217383"
  },
  {
    "text": "So say we're having an application running on our computer.",
    "start": "217917",
    "end": "222055"
  },
  {
    "text": "So say we're running it as root.",
    "start": "222121",
    "end": "224390"
  },
  {
    "text": "Of course, that's going to bring in several security implications.",
    "start": "224390",
    "end": "227260"
  },
  {
    "text": "Say there's a vulnerability,\nlike we commonly see with a lot of applications nowadays.",
    "start": "227760",
    "end": "231730"
  },
  {
    "text": "If that was to be exploited and taken advantage of by a hacker,",
    "start": "232098",
    "end": "235802"
  },
  {
    "text": "now the application could go rogue and our entire system is at risk.",
    "start": "236135",
    "end": "240273"
  },
  {
    "text": "But say we had the same application and we're running it\nnot as root, just as a regular user.",
    "start": "240607",
    "end": "245478"
  },
  {
    "text": "Well, we have the same vulnerability.",
    "start": "245945",
    "end": "248314"
  },
  {
    "text": "However, if a hacker were to exploit this vulnerability,",
    "start": "248314",
    "end": "251250"
  },
  {
    "text": "the container, the application is only running as a non root user,",
    "start": "251551",
    "end": "255153"
  },
  {
    "text": "so only our user could be affected.",
    "start": "255555",
    "end": "259958"
  },
  {
    "text": "This effectively adds another level of security as a container engine",
    "start": "259959",
    "end": "264364"
  },
  {
    "text": "and is the difference between the approaches of Docker,",
    "start": "264631",
    "end": "267634"
  },
  {
    "text": "where the Docker engine is running in the background\nas root and PodMan, with its root-less approach",
    "start": "267934",
    "end": "273406"
  },
  {
    "text": "and daemon-less approach, allows you to run by default containers\njust as a user and not as root.",
    "start": "273973",
    "end": "279512"
  },
  {
    "text": "Now you'll notice some similarities\nwhen we drew the architecture of Docker and PodMan.",
    "start": "280079",
    "end": "284083"
  },
  {
    "text": "This is because they're both based on something called the OCI,",
    "start": "284384",
    "end": "288121"
  },
  {
    "text": "which is the Open Container Initiative,\nwhich has some standards for how we work with container technologies.",
    "start": "288254",
    "end": "292892"
  },
  {
    "text": "This means that if you're coming from Docker and you're using PodMan, a\nlot of the commands such as pulling, pushing and building are the same.",
    "start": "293259",
    "end": "300300"
  },
  {
    "text": "So let's go down here and actually check this out with\nsome of the PodMan commands that we would use on a day-to-day basis.",
    "start": "300300",
    "end": "305771"
  },
  {
    "text": "So say we want to pull the container down from a registry.",
    "start": "306172",
    "end": "308641"
  },
  {
    "text": "So say we have the Nginx container right here.",
    "start": "309042",
    "end": "312111"
  },
  {
    "text": "We would do “podman pull\"",
    "start": "312111",
    "end": "315817"
  },
  {
    "text": "and then give the name of the image that we want to pull down.",
    "start": "316449",
    "end": "318551"
  },
  {
    "text": "So for this one, we can do Nginx.",
    "start": "318551",
    "end": "320853"
  },
  {
    "text": "Now we're pulling from our default Docker hub or k8s.io registry.",
    "start": "321321",
    "end": "327093"
  },
  {
    "text": "We're pulling down this image.",
    "start": "327460",
    "end": "328927"
  },
  {
    "text": "Now that we've got this image in our local registry.,\nnow we can run it with “podman run\".",
    "start": "328928",
    "end": "334866"
  },
  {
    "text": "And of course we can add any flags here that we'd like to, to expose\nports, to mount volumes, whatever it might be.",
    "start": "334867",
    "end": "340473"
  },
  {
    "text": "So we'll also call the Nginx image right there.",
    "start": "340473",
    "end": "345811"
  },
  {
    "text": "Now that we have a running container on our system.",
    "start": "345912",
    "end": "348780"
  },
  {
    "text": "To list it, and then the other active containers, we can do “podman ps” and this will list any active containers.",
    "start": "348915",
    "end": "356149"
  },
  {
    "text": "Now this is just a small subset of the PodMan commands\nthat we use on a day-to-day basis.",
    "start": "356522",
    "end": "360393"
  },
  {
    "text": "And you'll notice it's very similar to Docker if you have Docker\nexperience, but PodMan doesn't just stop at the commands.",
    "start": "360393",
    "end": "366466"
  },
  {
    "text": "PodMan goes a step further with something known as PodMan pods.",
    "start": "366466",
    "end": "370203"
  },
  {
    "text": "So much like Kubernetes pods, a pod is a group of one",
    "start": "370203",
    "end": "374006"
  },
  {
    "text": "or more containers that share the same volume and the same network.",
    "start": "374006",
    "end": "377910"
  },
  {
    "text": "So think of it as a single host network where both of the containers\ncan talk to each other with seamless networking.",
    "start": "378211",
    "end": "385318"
  },
  {
    "text": "Now let's say we have our job application here\nthat we've been working on.",
    "start": "385485",
    "end": "388788"
  },
  {
    "text": "This could be a back end for our application\nand we can use this Nginx image that we pull down earlier",
    "start": "389222",
    "end": "394626"
  },
  {
    "text": "as a Nginx container working as a reverse proxy to route the traffic.",
    "start": "395061",
    "end": "399365"
  },
  {
    "text": "Now with PodMan, we can run this pod and additionally\nwe can export the manifest to our cluster.",
    "start": "399365",
    "end": "404370"
  },
  {
    "text": "So if we're learning Kubernetes and we're using, say, minikube,",
    "start": "404771",
    "end": "409108"
  },
  {
    "text": "we can export this directly to our cluster.",
    "start": "409108",
    "end": "413246"
  },
  {
    "text": "So PodMan can be super helpful with learning Kubernetes.",
    "start": "413246",
    "end": "416115"
  },
  {
    "text": "So to recap everything -- in this fast changing world",
    "start": "416582",
    "end": "419986"
  },
  {
    "text": "of containerization and microservices,\nPodMan is a robust container engine that helps with security,",
    "start": "419986",
    "end": "425425"
  },
  {
    "text": "with efficiency,\nand with seamless deployment of your containerized applications.",
    "start": "425892",
    "end": "430096"
  },
  {
    "text": "So thanks so much for watching. My name is Cedric Clyburn.",
    "start": "430430",
    "end": "433199"
  },
  {
    "text": "Stay tuned to the channel for more lightboard videos\nand have a great day.",
    "start": "433466",
    "end": "437303"
  },
  {
    "text": "Thanks for watching this video as always.",
    "start": "438204",
    "end": "440006"
  },
  {
    "text": "Don't forget to like and subscribe and we'll see you in the next one.",
    "start": "440006",
    "end": "444444"
  }
]