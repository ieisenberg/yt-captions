[
  {
    "text": "What is a vector database?",
    "start": "30",
    "end": "1788"
  },
  {
    "text": "Well, they say a picture is worth a thousand words.",
    "start": "2029",
    "end": "3889"
  },
  {
    "text": "So let's start with one.",
    "start": "4450",
    "end": "5668"
  },
  {
    "text": "Now in case you can't tell, this is a picture of a sunset on a mountain vista.",
    "start": "6170",
    "end": "11710"
  },
  {
    "text": "Beautiful.",
    "start": "12530",
    "end": "13530"
  },
  {
    "text": "Now let's say this is a digital image and we want to store it.",
    "start": "13650",
    "end": "17789"
  },
  {
    "text": "We want to put it into a database and we're going to use a traditional database here called a relational database.",
    "start": "18050",
    "end": "29039"
  },
  {
    "text": "Now what can we store in that relational database of this picture?",
    "start": "29220",
    "end": "33739"
  },
  {
    "text": "Well we can put the actual picture binary data into our database to start with,",
    "start": "34120",
    "end": "41111"
  },
  {
    "text": "so this is the actual image file but we can also store some other information as well",
    "start": "41111",
    "end": "45719"
  },
  {
    "text": "like some basic metadata about the picture so that would be.",
    "start": "45719",
    "end": "50219"
  },
  {
    "text": "things like the file format and the date that it was created, stuff like that.",
    "start": "50570",
    "end": "55130"
  },
  {
    "text": "And we can also add some manually added tags to this as well.",
    "start": "55570",
    "end": "61009"
  },
  {
    "text": "So we could say, let's have tags for sunset and landscape and orange,",
    "start": "61030",
    "end": "67109"
  },
  {
    "text": "and that sort of gives us a basic way to be able to retrieve this image,",
    "start": "67870",
    "end": "72370"
  },
  {
    "text": "but it kind of largely misses the images overall semantic context.",
    "start": "72530",
    "end": "77449"
  },
  {
    "text": "Like how would you query for images with similar color palettes for example using this information",
    "start": "77530",
    "end": "83107"
  },
  {
    "text": "or images with landscapes of mountains in the background for example.",
    "start": "83107",
    "end": "88050"
  },
  {
    "text": "Those concepts aren't really represented very well in these structured fields",
    "start": "88510",
    "end": "94271"
  },
  {
    "text": "and that disconnect between how computers store data how humans understand it has a name.",
    "start": "94271",
    "end": "101170"
  },
  {
    "text": "It's called the semantic gap.",
    "start": "101470",
    "end": "105454"
  },
  {
    "text": "Now traditional database queries like select star where color equals orange,",
    "start": "105454",
    "end": "112903"
  },
  {
    "text": "it kind of falls short because it doesn't really capture the nuanced multi-dimensional nature of unstructured data.",
    "start": "112903",
    "end": "120099"
  },
  {
    "text": "Well, that's where vector databases come in by representing data as mathematical vector embeddings.",
    "start": "120740",
    "end": "131620"
  },
  {
    "text": "and what vector embeddings are,",
    "start": "131620",
    "end": "134840"
  },
  {
    "text": "it's essentially an array of numbers.",
    "start": "136130",
    "end": "138689"
  },
  {
    "text": "Now these vectors, they capture the semantic essence of the data where",
    "start": "139410",
    "end": "143816"
  },
  {
    "text": "similar items are positioned close together in vector space and dissimilar items are positioned far apart,",
    "start": "143816",
    "end": "150028"
  },
  {
    "text": "and with vector databases, we can perform similarity searches as mathematical operations,",
    "start": "150370",
    "end": "156293"
  },
  {
    "text": "looking for vector embeddings that are close to each other,",
    "start": "156294",
    "end": "159110"
  },
  {
    "text": "and that kind of translates to finding semantically similar content.",
    "start": "159310",
    "end": "163410"
  },
  {
    "text": "Now we can represent",
    "start": "163410",
    "end": "165149"
  },
  {
    "text": "all sorts of unstructured data in a vector database.",
    "start": "165440",
    "end": "169559"
  },
  {
    "text": "What could we put in here?",
    "start": "169860",
    "end": "170860"
  },
  {
    "text": "Well image files of course like our mountain sunset.",
    "start": "171340",
    "end": "175940"
  },
  {
    "text": "We could put in a text file as well or we could even store audio files as well in here.",
    "start": "176040",
    "end": "184659"
  },
  {
    "text": "Well this is unstructured data and these complex objects They are actually transformed into vector embeddings,",
    "start": "184880",
    "end": "194720"
  },
  {
    "text": "and those vector embeddings are then stored in the vector database.",
    "start": "195410",
    "end": "200869"
  },
  {
    "text": "So what do these vector embeddings look like?",
    "start": "201490",
    "end": "204789"
  },
  {
    "text": "Well, I said there are arrays of numbers",
    "start": "204830",
    "end": "207210"
  },
  {
    "text": "and there are arrays of numbers where each position represents some kind of learned feature.",
    "start": "207210",
    "end": "211550"
  },
  {
    "text": "So let's take a simplified example.",
    "start": "211770",
    "end": "214330"
  },
  {
    "text": "So remember our mountain picture here?",
    "start": "215050",
    "end": "217949"
  },
  {
    "text": "Yep, we can represent that as a vector embedding.",
    "start": "218190",
    "end": "221830"
  },
  {
    "text": "Now, let's say that the vector embedding for the mountain has a first dimension of say 0.91,",
    "start": "222440",
    "end": "230517"
  },
  {
    "text": "then let's say the next one is 0.15, and then there's a third dimension of 0.83 and kind of so forth.",
    "start": "230517",
    "end": "238659"
  },
  {
    "text": "What does all that mean?",
    "start": "239240",
    "end": "240240"
  },
  {
    "text": "Well, the 0.91 in the first dimension, that indicates significant elevation changes because, hey, this is the mountains.",
    "start": "240620",
    "end": "250379"
  },
  {
    "text": "Then 0.15 The second dimension here, that shows few urban elements,",
    "start": "250380",
    "end": "256127"
  },
  {
    "text": "don't see many buildings here, so that's why that score is quite low.",
    "start": "256128",
    "end": "259888"
  },
  {
    "text": "0.83 in the third dimension, that represents strong warm colors like a sunset and so on.",
    "start": "260350",
    "end": "266970"
  },
  {
    "text": "All sorts of other dimensions can be added as well.",
    "start": "267370",
    "end": "269610"
  },
  {
    "text": "Now we could compare that to a different picture.",
    "start": "270210",
    "end": "272888"
  },
  {
    "text": "What about this one, which is a sunset at the beach?",
    "start": "273350",
    "end": "276950"
  },
  {
    "text": "So let's have a look at the vector embeddings for the beach example.",
    "start": "277510",
    "end": "282290"
  },
  {
    "text": "So this would also have a series of dimensions.",
    "start": "283010",
    "end": "286129"
  },
  {
    "text": "Let's say the first one is 0.12, then we have a 0.08, and then finally we have a 0.89 and then more dimensions to follow.",
    "start": "286530",
    "end": "298889"
  },
  {
    "text": "Now, notice how there are some similarities here.",
    "start": "299870",
    "end": "302750"
  },
  {
    "text": "The third dimension, 0.83 and 0.89, pretty similar.",
    "start": "302890",
    "end": "309470"
  },
  {
    "text": "That's because they both have warm colors.",
    "start": "309790",
    "end": "311589"
  },
  {
    "text": "They're both pictures of sunsets,",
    "start": "311590",
    "end": "313709"
  },
  {
    "text": "but the first dimension that differs quite a lot here",
    "start": "314070",
    "end": "318769"
  },
  {
    "text": "because a beach has minimal elevation changes compared to the mountains.",
    "start": "318769",
    "end": "323470"
  },
  {
    "text": "Now this is a very simplified example.",
    "start": "324150",
    "end": "326389"
  },
  {
    "text": "In real machine learning systems vector embeddings typically contain hundreds or even thousands of dimensions",
    "start": "326810",
    "end": "333699"
  },
  {
    "text": "and I should also say that individual dimensions like this they rarely correspond",
    "start": "333699",
    "end": "337898"
  },
  {
    "text": "to such clearly interpretable features, but you get the idea.",
    "start": "337898",
    "end": "342110"
  },
  {
    "text": "And this all brings up the question of how are these vector embeddings actually created?",
    "start": "342680",
    "end": "347639"
  },
  {
    "text": "Well, the answer is through embedding models that have been trained on massive data sets.",
    "start": "348180",
    "end": "353518"
  },
  {
    "text": "So each type of data has its own specialized type of embedding model that we can use.",
    "start": "353780",
    "end": "362260"
  },
  {
    "text": "So I'm gonna give you some examples of those.",
    "start": "362540",
    "end": "365619"
  },
  {
    "text": "For example, Clip.",
    "start": "366040",
    "end": "367220"
  },
  {
    "text": "You might use Clip for images.",
    "start": "367800",
    "end": "370300"
  },
  {
    "text": "if you're working with text, you might use GloVe, and if you're working with audio, you might use Wav2vec",
    "start": "370848",
    "end": "381209"
  },
  {
    "text": "These processes are all kind of pretty similar.",
    "start": "381928",
    "end": "385290"
  },
  {
    "text": "Basically, you have data that passes through multiple layers.",
    "start": "385490",
    "end": "389970"
  },
  {
    "text": "And as it goes through the layers of the embedding model, each layer is extracting progressively more abstract features.",
    "start": "390650",
    "end": "398689"
  },
  {
    "text": "So for images, the early layers might detect some pretty basic stuff, like let's say edges,",
    "start": "398910",
    "end": "405509"
  },
  {
    "text": "and then as we get to deeper layers, we would recognize more complex stuff, like maybe entire objects.",
    "start": "405910",
    "end": "412509"
  },
  {
    "text": "perhaps for text these early layers would figure out the words that we're looking at, individual words,",
    "start": "413330",
    "end": "421141"
  },
  {
    "text": "but then later deeper layers would be able to figure out context and meaning,",
    "start": "421141",
    "end": "426869"
  },
  {
    "text": "and how this essentially works is we take the high dimensional vectors from this deeper layer here,",
    "start": "427550",
    "end": "435828"
  },
  {
    "text": "and those high dimensional vectors often have hundreds",
    "start": "436030",
    "end": "439178"
  },
  {
    "text": "or maybe even thousands of dimensions that capture the essential characteristics of the input.",
    "start": "439178",
    "end": "445439"
  },
  {
    "text": "Now we have vector embeddings created.",
    "start": "445840",
    "end": "447879"
  },
  {
    "text": "We can perform all sorts of powerful operations that just weren't possible with those traditional relational databases,",
    "start": "448020",
    "end": "454363"
  },
  {
    "text": "things like similarity search, where we can find items",
    "start": "454364",
    "end": "457394"
  },
  {
    "text": "that are similar to a query item by finding the closest vectors in the space.",
    "start": "457394",
    "end": "462019"
  },
  {
    "text": "But when you have millions of vectors in your database and those vectors are made up of hundred or maybe even",
    "start": "462620",
    "end": "470199"
  },
  {
    "text": "thousands of dimensions,",
    "start": "470760",
    "end": "473393"
  },
  {
    "text": "you can't effectively and efficiently compare your query vector to every single vector in the database.",
    "start": "473393",
    "end": "479980"
  },
  {
    "text": "It would just be too slow.",
    "start": "480060",
    "end": "481959"
  },
  {
    "text": "So there is a process to do that and it's called vector indexing.",
    "start": "482080",
    "end": "488559"
  },
  {
    "text": "Now this is where vector indexing uses something called approximate nearest neighbor or ANN algorithms",
    "start": "489180",
    "end": "496970"
  },
  {
    "text": "and instead of finding the exact closest match",
    "start": "496971",
    "end": "500294"
  },
  {
    "text": "these algorithms quickly find vectors that are very likely to be among the closest matches.",
    "start": "500294",
    "end": "506410"
  },
  {
    "text": "Now there are a bunch of approaches for this.",
    "start": "506750",
    "end": "509309"
  },
  {
    "text": "For example, HNSW, that is Hierarchical Navigable Small World that creates multi-layered graphs connecting similar vectors,",
    "start": "509710",
    "end": "519248"
  },
  {
    "text": "and there's also IVF,",
    "start": "519610",
    "end": "521998"
  },
  {
    "text": "that's Inverted File Index, which divides the vector space into clusters and only searches the most relevant of those clusters.",
    "start": "521999",
    "end": "529831"
  },
  {
    "text": "These indexing methods, they basically are trading a small amount of accuracy",
    "start": "530190",
    "end": "534010"
  },
  {
    "text": "for pretty big improvements in search speed.",
    "start": "534010",
    "end": "537390"
  },
  {
    "text": "Now, vector databases are a core feature of something called RAG, retrieval  augmented generation,",
    "start": "537890",
    "end": "546502"
  },
  {
    "text": "where vector databases store chunks of documents",
    "start": "546502",
    "end": "549562"
  },
  {
    "text": "and articles and knowledge bases as embeddings and",
    "start": "549562",
    "end": "553462"
  },
  {
    "text": "then when a user asks a question, the system finds the relevant text chunks by comparing vector similarity?",
    "start": "553462",
    "end": "560199"
  },
  {
    "text": "and feeds those to a large language model to generate responses using the retrieved information.",
    "start": "560530",
    "end": "566009"
  },
  {
    "text": "So that's vector databases.",
    "start": "566510",
    "end": "568950"
  },
  {
    "text": "They are both a place to store unstructured data and a place to retrieve it quickly and semantically.",
    "start": "569090",
    "end": "576350"
  }
]