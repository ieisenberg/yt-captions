[
  {
    "text": "What are event-driven architectures? And how can \nthey enable real-time user interactions, pluggable  ",
    "start": "400",
    "end": "7440"
  },
  {
    "text": "microservices, and extensible streaming and data \nanalytics? My name is Whitney, I'm on the Cloud  ",
    "start": "7440",
    "end": "14160"
  },
  {
    "text": "team here at IBM. Before I dig in on event driven \narchitecture, specifically I'd like to talk about  ",
    "start": "14160",
    "end": "21600"
  },
  {
    "text": "system design, more generally and specifically \nthe reactive manifesto. The reactive manifesto  ",
    "start": "21600",
    "end": "29360"
  },
  {
    "text": "is a set of community-driven guidelines that are \nintended to give a cohesive approach to systems  ",
    "start": "29360",
    "end": "35920"
  },
  {
    "text": "design. So, at the core of the reactant manifesto \nwe have, we want our system to be message driven.",
    "start": "35920",
    "end": "43839"
  },
  {
    "text": "And so, specifically asynchronous messaging.",
    "start": "47680",
    "end": "50240"
  },
  {
    "text": "And then also, we want our our \nsystem design to be scalable,",
    "start": "55520",
    "end": "60400"
  },
  {
    "text": "and we want it to be resilient.",
    "start": "66080",
    "end": "68000"
  },
  {
    "text": "So this implies distributed systems or Kubernetes. \nSo by scalable we mean that we want the  ",
    "start": "71440",
    "end": "78560"
  },
  {
    "text": "hardware used to expand as the workload \nexpands and contract as the workload contracts  ",
    "start": "78560",
    "end": "83759"
  },
  {
    "text": "and by resilient we mean we we don't \nwant any single point of failure  ",
    "start": "83760",
    "end": "88000"
  },
  {
    "text": "and if the system does fail we want it to be able \nto tolerate tolerate that elegantly so with this  ",
    "start": "88000",
    "end": "94480"
  },
  {
    "text": "foundation in place we should be able to build a \nsystem that is responsive responsive is the value",
    "start": "94480",
    "end": "100960"
  },
  {
    "text": "on top of that we can expect \na system that is maintainable",
    "start": "105840",
    "end": "111039"
  },
  {
    "text": "so it means it's easy to change easy to fix a bug \nor do an update and we want one that is extensible",
    "start": "113520",
    "end": "122079"
  },
  {
    "text": "so we should be able to expand the system easily  ",
    "start": "125280",
    "end": "127840"
  },
  {
    "text": "so now that we have the core of what we \nwant our systems designed to look like  ",
    "start": "129840",
    "end": "133440"
  },
  {
    "text": "now let's talk about let's level set \nhere and talk about like what is an event  ",
    "start": "134080",
    "end": "138400"
  },
  {
    "text": "so an event is a statement of fact an immutable \nstatement of fact about something that happened  ",
    "start": "140240",
    "end": "146720"
  },
  {
    "text": "in the past so let's give that some context \nwe'll talk about a retail application  ",
    "start": "146720",
    "end": "152160"
  },
  {
    "text": "so a retail application has a checkout service  ",
    "start": "153920",
    "end": "157360"
  },
  {
    "text": "and that checkout service is going to want \nto communicate with an inventory service",
    "start": "158240",
    "end": "163520"
  },
  {
    "text": "a shipping service and a contact service",
    "start": "167360",
    "end": "172320"
  },
  {
    "text": "so with the messaging model if the inventory wants \nto know what the checkout is doing the checkout  ",
    "start": "175760",
    "end": "183840"
  },
  {
    "text": "will send a message directly to inventory \nto let the inventory know a checkout happen  ",
    "start": "183840",
    "end": "188080"
  },
  {
    "text": "and another one directly to shipping and directly \nto contact so with messaging we have targeted",
    "start": "188080",
    "end": "194240"
  },
  {
    "text": "delivery um not only that but inventory \ncan maybe send a message back to  ",
    "start": "194240",
    "end": "203120"
  },
  {
    "text": "checkout it can be a conversational \ndelivery conversational messaging  ",
    "start": "203120",
    "end": "211840"
  },
  {
    "text": "and then finally let's talk about where that \nmessage lives before it's sent it's it's  ",
    "start": "213280",
    "end": "218720"
  },
  {
    "text": "lives on the host service or on the producing \nservice when it's received it lives on the um  ",
    "start": "218720",
    "end": "224560"
  },
  {
    "text": "it lives on the host service until it's received \nby the consuming service or in the case of a  ",
    "start": "225200",
    "end": "230879"
  },
  {
    "text": "message broker it might sit on a machine in \nbetween but regardless the the data persistence is",
    "start": "230880",
    "end": "236960"
  },
  {
    "text": "transient",
    "start": "236960",
    "end": "239840"
  },
  {
    "text": "now let's compare that to eventing so if \nour checkout service is producing events  ",
    "start": "243440",
    "end": "250160"
  },
  {
    "text": "it's producing an event every time a checkout \nhappens without any concern to which service  ",
    "start": "250160",
    "end": "254960"
  },
  {
    "text": "is consuming that and so with that we have a \nsystem that's highly scalable so we have um  ",
    "start": "254960",
    "end": "261040"
  },
  {
    "text": "three services here interested in the checkout \nbut even if we expand it to a hundred services  ",
    "start": "262480",
    "end": "268400"
  },
  {
    "text": "listening to check out that wouldn't affect \nwhat the checkout service is doing in any way  ",
    "start": "268400",
    "end": "273280"
  },
  {
    "text": "not only that when we have all the checkouts \nin a row we come up with an event log  ",
    "start": "274560",
    "end": "279280"
  },
  {
    "text": "and it can be replayable \nso we have a stream history  ",
    "start": "279280",
    "end": "282720"
  },
  {
    "text": "and a history of everything that that \nevery checkout event that has happened",
    "start": "282720",
    "end": "286720"
  },
  {
    "text": "and then our data persistence depending on how the \ncluster is set up it can be set up to be immutable  ",
    "start": "290000",
    "end": "296640"
  },
  {
    "text": "it can be there forever as long as you have the \nphysical hardware to back it up so we have um  ",
    "start": "296640",
    "end": "301920"
  },
  {
    "text": "instead of having transient data persistent \nso we have uh permanent or possibly permanent",
    "start": "301920",
    "end": "306960"
  },
  {
    "text": "not immutable but permanent data persistence e and \nt um so this is the foundation of our event driven  ",
    "start": "309040",
    "end": "322720"
  },
  {
    "text": "architecture so we have a resilient a reactive \nresponsive system design and then that message  ",
    "start": "322720",
    "end": "329360"
  },
  {
    "text": "driven element is is event messaging specifically \nso when we go into our proper event design the  ",
    "start": "329360",
    "end": "338639"
  },
  {
    "text": "first thing we're going to consider are our event \nproducers so we might have a web application  ",
    "start": "338640",
    "end": "344960"
  },
  {
    "text": "that produces events and we \nmight have a a mobile application",
    "start": "346240",
    "end": "352400"
  },
  {
    "text": "and let's say we also have an edge device that's \nproducing events so uh internet of things device",
    "start": "355120",
    "end": "360240"
  },
  {
    "text": "and all of these are producing \nevents into our system so",
    "start": "362320",
    "end": "366400"
  },
  {
    "text": "so this piece of the system here that \nhas all the events running through it  ",
    "start": "370720",
    "end": "374880"
  },
  {
    "text": "this is called the event backbone",
    "start": "375680",
    "end": "379840"
  },
  {
    "text": "so what does this system enable  ",
    "start": "385360",
    "end": "388240"
  },
  {
    "text": "well first of all we have our event logs being \nproduced by all the producing applications",
    "start": "388800",
    "end": "394400"
  },
  {
    "text": "so the event logs can do a few things first it \ncan trigger an action so if we have an internet  ",
    "start": "398240",
    "end": "406639"
  },
  {
    "text": "of things device let's say our internet of things \ndevice is a robot vacuum cleaner and when we turn  ",
    "start": "406640",
    "end": "412080"
  },
  {
    "text": "on that robot vacuum cleaner it spins up a pod \non the infrastructure and that pod is a function  ",
    "start": "412080",
    "end": "420720"
  },
  {
    "text": "as a service so function as a service is a modular \npiece of code often associated with an edge device  ",
    "start": "420720",
    "end": "426400"
  },
  {
    "text": "that doesn't exist on a server on the server until \nit is turned on and that's when it is spun up so  ",
    "start": "426400",
    "end": "433680"
  },
  {
    "text": "that's called serverless function as a service \nis sits on top of serverless infrastructure  ",
    "start": "433680",
    "end": "438880"
  },
  {
    "text": "but the point is that event triggers an action \nof the with the robot vacuum cleaner to spin up  ",
    "start": "440080",
    "end": "448639"
  },
  {
    "text": "bounce all around the house make everything \nsqueaky clean and then when the function is  ",
    "start": "448640",
    "end": "454160"
  },
  {
    "text": "finished running it powers down and perhaps \nthat'll cause our function as a service to send  ",
    "start": "454160",
    "end": "459520"
  },
  {
    "text": "another event back into the system to let \nit know that the the function is complete  ",
    "start": "459520",
    "end": "464479"
  },
  {
    "text": "another cool thing about the event log is it \ncan be used to help optimize and customize data  ",
    "start": "466320",
    "end": "472480"
  },
  {
    "text": "persistence so if our web application is our maybe \nit's our retail application that we talked about  ",
    "start": "472480",
    "end": "479120"
  },
  {
    "text": "before and it's doing a stream of checkout events \nwell our inventory service can be reading from  ",
    "start": "479120",
    "end": "486560"
  },
  {
    "text": "that and it's keeping track of a local data \nstore that's keeping track of the inventory  ",
    "start": "486560",
    "end": "493200"
  },
  {
    "text": "so our inventory service will consume from \nthat data stream from the web application it'll  ",
    "start": "494480",
    "end": "502800"
  },
  {
    "text": "modify the local data and then it'll produce \nagain into the event backbone and so this new  ",
    "start": "502800",
    "end": "509039"
  },
  {
    "text": "stream is giving the most current inventory \nto any other application in the system that  ",
    "start": "509040",
    "end": "514000"
  },
  {
    "text": "wants to consume from it and so while we're \ntalking about data another thing that happens  ",
    "start": "514000",
    "end": "520240"
  },
  {
    "text": "we can save all of the data that comes through the \nsystem so all the raw data or all of the transform  ",
    "start": "520800",
    "end": "526959"
  },
  {
    "text": "data here at the end once it goes through the \nsystem we'll save it all in a huge data lake",
    "start": "526960",
    "end": "533840"
  },
  {
    "text": "and this is what's going to power \nreally data-heavy applications  ",
    "start": "536000",
    "end": "540640"
  },
  {
    "text": "like ai for example and the data lake is \naccessible from anywhere in the system  ",
    "start": "540640",
    "end": "546160"
  },
  {
    "text": "that any service that you let consume from it",
    "start": "546160",
    "end": "549120"
  },
  {
    "text": "so another thing that our event-driven \narchitectures can enable are a stream processing  ",
    "start": "551520",
    "end": "561840"
  },
  {
    "text": "so this is built on top of \nthe apache kafka streams api  ",
    "start": "562800",
    "end": "568000"
  },
  {
    "text": "so let's say that our mobile app is producing \nlet's say it's a music streaming service and  ",
    "start": "569440",
    "end": "577040"
  },
  {
    "text": "every time let's say up until your in your whole \nlife up until this point you've been listening to  ",
    "start": "577040",
    "end": "582160"
  },
  {
    "text": "only miley cyrus and britney spears but today you \ndecide you know what i want to see what jay-z is  ",
    "start": "582160",
    "end": "588000"
  },
  {
    "text": "about and you turn jay-z on well immediately \nyour streaming app is showing you kanye west  ",
    "start": "588000",
    "end": "594160"
  },
  {
    "text": "and lauren hill and giving you ideas about what \nyou might want to listen to next so that stream  ",
    "start": "594160",
    "end": "601040"
  },
  {
    "text": "processing is a really powerful and what gives \nthe gives real-time calculations like if it's a  ",
    "start": "601040",
    "end": "607839"
  },
  {
    "text": "ride share app you um that you know exactly how \nfar away your ride is but it can also be used to  ",
    "start": "607840",
    "end": "616240"
  },
  {
    "text": "implement business rules and business policies \nand it can be used for real-time analytics",
    "start": "616240",
    "end": "621600"
  },
  {
    "text": "and then let's also talk about with \nour system the communications layer",
    "start": "626320",
    "end": "631840"
  },
  {
    "text": "so specifically it's called pub sub communication  ",
    "start": "636800",
    "end": "640480"
  },
  {
    "text": "for publish subscribe so we could have any \nmicroservice a containerized microservice",
    "start": "642160",
    "end": "649920"
  },
  {
    "text": "and just like we talked about before with it being \nextensible we can very easily plug it into we can  ",
    "start": "654080",
    "end": "661360"
  },
  {
    "text": "write a new microservice and plug it into our \nsystem and immediately have it start consuming  ",
    "start": "661360",
    "end": "667440"
  },
  {
    "text": "from any stream and producing to a new stream or \neven producing to a stream that already exists  ",
    "start": "667440",
    "end": "673120"
  },
  {
    "text": "and none of the other applications need \nto be concerned with it at all so it's  ",
    "start": "673120",
    "end": "677120"
  },
  {
    "text": "highly plugable not only that but because \nof the stream history we talked about before  ",
    "start": "677120",
    "end": "683520"
  },
  {
    "text": "when you plug it into the system you don't have \nto have it start consuming from right this moment  ",
    "start": "684240",
    "end": "689040"
  },
  {
    "text": "it can be consuming from as long as from the \nbeginning of your application if you've been  ",
    "start": "689040",
    "end": "694160"
  },
  {
    "text": "saving your stream history for that long so \nas long as that stream history persists when  ",
    "start": "694160",
    "end": "699279"
  },
  {
    "text": "you plug in a new system it can consume from \neither the old data or can be consumed from  ",
    "start": "699280",
    "end": "705040"
  },
  {
    "text": "the present moment so with that we talked about \nthe major benefits of event driven architecture  ",
    "start": "705040",
    "end": "712720"
  },
  {
    "text": "that sit on top of the reactive manifesto ideas \nfor system design with eventing at its core",
    "start": "712720",
    "end": "729360"
  }
]