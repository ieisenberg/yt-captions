[
  {
    "text": "It almost sounds like a support joke: What's the fastest way to resolve an incident report? Easy!",
    "start": "120",
    "end": "5940"
  },
  {
    "text": "Don't have one in the first place! OK, maybe it's kinda silly, but there's some truth behind it. Let me explain. Traditional",
    "start": "5940",
    "end": "13620"
  },
  {
    "text": "problem resolution follows a well-known sequence: First there's a problem, which is reported as an incident, and then with a bit of luck, it's resolved.",
    "start": "13620",
    "end": "22896"
  },
  {
    "text": "For example, a problem might be something like a service failing due to a bug or resource constraint. An incident",
    "start": "22896",
    "end": "28980"
  },
  {
    "text": "report is created when a user complains an \napplication isn't working. The sequence ends when",
    "start": "28980",
    "end": "33540"
  },
  {
    "text": "the incident report is finally closed. For SREs, the elapsed \ntime from start to finish is known as MTTR -- or mean-time-to-repair.",
    "start": "33540",
    "end": "43440"
  },
  {
    "text": "But MTTR is all about repairing software after \nincidents are reported. Returning to my joke, what",
    "start": "44460",
    "end": "51120"
  },
  {
    "text": "if we could predict problems before they occurred? \nNo more app or service failure! That would mean",
    "start": "51120",
    "end": "56760"
  },
  {
    "text": "no incident to report and no scrambling to \nresolution. The problem with the traditional",
    "start": "56760",
    "end": "62579"
  },
  {
    "text": "approach to incident management is that it relies \non react- and-repair strategy. A better way is to",
    "start": "62580",
    "end": "68520"
  },
  {
    "text": "predict. That way with a heads up, you're better positioned \nto prevent. But what exactly does that",
    "start": "68520",
    "end": "77880"
  },
  {
    "text": "mean? Well, for years, software repair focused on \nmanual remediation. That was the case for apps,",
    "start": "77880",
    "end": "84000"
  },
  {
    "text": "tools, libraries, and so on. This work is time consuming and involves a mouthful of benchmarks to hit.",
    "start": "84000",
    "end": "89400"
  },
  {
    "text": "For example, metrics like the mean-time-to-detect, acknowledge, identify, fix, and validate.",
    "start": "89400",
    "end": "94740"
  },
  {
    "text": "A smarter approach is proactive. It uses Artificial Intelligence,",
    "start": "95340",
    "end": "99000"
  },
  {
    "text": "Machine Learning, and AIOps to shift the focus away from repair and toward prevention.",
    "start": "99000",
    "end": "103740"
  },
  {
    "text": "New metrics come into play, namely MTTP \nand MTTN. They correspond to mean-time-to-",
    "start": "104400",
    "end": "114660"
  },
  {
    "text": "prevent and mean-time-to-notify. So how does this work?",
    "start": "114660",
    "end": "120368"
  },
  {
    "text": "One word: Observability.",
    "start": "120368",
    "end": "122858"
  },
  {
    "text": "That's what drives the monitoring and analysis of applications, services, and resources. That is,",
    "start": "123180",
    "end": "128460"
  },
  {
    "text": "they are \"observable\" by support platforms. Let me give you a one-line definition of observability:",
    "start": "128460",
    "end": "133560"
  },
  {
    "text": "Observable systems provide telemetry data about their activity so others can",
    "start": "134460",
    "end": "138420"
  },
  {
    "text": "monitor them and help with diagnosis, if problems arise. Now, taking a step back,",
    "start": "138420",
    "end": "143459"
  },
  {
    "text": "there are two primary sources of IT problems that create headaches: operational and functional.",
    "start": "143460",
    "end": "150452"
  },
  {
    "text": "Both categories required trained staff. And let's be honest, they're potentially",
    "start": "150840",
    "end": "154739"
  },
  {
    "text": "overburdened or under- skilled. Operational issues \noccur when there are application components that are working,",
    "start": "154740",
    "end": "160620"
  },
  {
    "text": "but an infrastructure problem is dragging down performance. For example, things like insufficient",
    "start": "160620",
    "end": "165780"
  },
  {
    "text": "CPU, memory, storage, and network bandwidth. Then there's functional issues. That's stuff like bugs,",
    "start": "165780",
    "end": "172380"
  },
  {
    "text": "authentication failures, and deployment problems. A functional issue may start with one service, but",
    "start": "172380",
    "end": "178080"
  },
  {
    "text": "because of interdependences, failures can quickly cascade across the entire application transaction",
    "start": "178080",
    "end": "183120"
  },
  {
    "text": "path. But whether they're operational or functional, these problems can become particularly complex in",
    "start": "183120",
    "end": "189780"
  },
  {
    "text": "cloud-native or hybrid cloud environment. This is doubly true if your organization is weighed",
    "start": "189780",
    "end": "194819"
  },
  {
    "text": "down by technical debt or legacy applications and \ninfrastructure. But an observability platform that",
    "start": "194820",
    "end": "200460"
  },
  {
    "text": "supports precise, automated operational and functional software remediation, cuts through",
    "start": "200460",
    "end": "205200"
  },
  {
    "text": "the noise and delivers end-to-end visibility. This means you can stop reacting and start preventing.",
    "start": "205200",
    "end": "210599"
  },
  {
    "text": "Of course, there are many observability platforms. When evaluating which is the best fit for your",
    "start": "211440",
    "end": "216660"
  },
  {
    "text": "organization, look for these \"must haves\". I'll put them in three broad categories -- Problems,",
    "start": "216660",
    "end": "223020"
  },
  {
    "text": "Remediation, and Visibility. To weigh your options, ask yourself these questions:",
    "start": "223020",
    "end": "228180"
  },
  {
    "text": "Does it help prevent problems by handling them before they are reported as incidents?",
    "start": "229260",
    "end": "235560"
  },
  {
    "text": "Does it help with fast remediation by notifying you when needed and without \"noise\"?",
    "start": "235560",
    "end": "241080"
  },
  {
    "text": "And does it provide end-to-end visibilityby identifying patterns and anticipating problems?",
    "start": "241860",
    "end": "247620"
  },
  {
    "text": "The Instana Enterprise Observability Platform delivers all this and more.",
    "start": "248400",
    "end": "252360"
  },
  {
    "text": "The payoff? Your developers will spend more time writing and optimizing code -- and less time",
    "start": "252360",
    "end": "258120"
  },
  {
    "text": "troubleshooting incident reports. To learn more, check out the links below.",
    "start": "258120",
    "end": "262919"
  }
]