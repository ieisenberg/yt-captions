[
  {
    "text": "Let's build an AI agent in Langraph using JavaScript.",
    "start": "234",
    "end": "3080"
  },
  {
    "text": "Agents can be really helpful to automate parts of your life.",
    "start": "3400",
    "end": "6120"
  },
  {
    "text": "Or for example, take data from one source and turn it into something else.",
    "start": "6440",
    "end": "10079"
  },
  {
    "text": "In this video, we'll be building a YouTube transcription agent",
    "start": "10340",
    "end": "13438"
  },
  {
    "text": "that's able to pull transcriptions from a YouTube video and summarize them on your screen.",
    "start": "13438",
    "end": "17779"
  },
  {
    "text": "For this we'll be using models running locally using Ollama,",
    "start": "18280",
    "end": "21569"
  },
  {
    "text": "we'll be using Next .js to build a frontend app, and then we'll be using a YouTube transcription tool from WXFlows.",
    "start": "21569",
    "end": "27399"
  },
  {
    "text": "So let's dive into VSCode and see how it's built.",
    "start": "27400",
    "end": "30439"
  },
  {
    "text": "In VSCode, I've already set up a new project.",
    "start": "31630",
    "end": "33829"
  },
  {
    "text": "In here, I'm going to run a command to bootstrap a new Next .js application.",
    "start": "33829",
    "end": "38009"
  },
  {
    "text": "For this, I'll be using the Create Next App CLI and I'm going to make sure I use the latest version.",
    "start": "38650",
    "end": "43509"
  },
  {
    "text": "I also need to provide it with a name of my project, which will be the Landgraph YouTube agent.",
    "start": "43990",
    "end": "49210"
  },
  {
    "text": "Setting this up is going to require you to answer a few questions.",
    "start": "50980",
    "end": "53718"
  },
  {
    "text": "For example, would you like to use TypeScript?",
    "start": "53800",
    "end": "55759"
  },
  {
    "text": "And then it's going to ask a few other defaults.",
    "start": "56280",
    "end": "58319"
  },
  {
    "text": "It also asks us to install Tailwind, which is a nice library to help you write CSS.",
    "start": "58320",
    "end": "62780"
  },
  {
    "text": "Depending on your needs, you might make different decisions when building your own project.",
    "start": "64470",
    "end": "68030"
  },
  {
    "text": "Once this is done, it's going to generate a new directory with all my files.",
    "start": "69230",
    "end": "72670"
  },
  {
    "text": "I'm going to move into this new Landgraph YouTube agent directory,",
    "start": "73310",
    "end": "76569"
  },
  {
    "text": "where I can find all the boilerplate code for my Next .js application.",
    "start": "76569",
    "end": "80149"
  },
  {
    "text": "In here you can find a file called page .tsx and this will be the main file that's rendered when someone sees my application.",
    "start": "80425",
    "end": "87010"
  },
  {
    "text": "I'm going to delete all the code that's in there.",
    "start": "87010",
    "end": "89349"
  },
  {
    "text": "I'm going to replace it with something else.",
    "start": "89610",
    "end": "91410"
  },
  {
    "text": "In here I'm going to add my own boilerplate for this application.",
    "start": "91825",
    "end": "95250"
  },
  {
    "text": "I also need to make sure that I set this component up",
    "start": "96150",
    "end": "98771"
  },
  {
    "text": "to be a client-side component, and this means I can use state management later on.",
    "start": "98771",
    "end": "103129"
  },
  {
    "text": "Within this div, which has some Tailwind class names connected to it,",
    "start": "103650",
    "end": "106991"
  },
  {
    "text": "I can set up all the code I need in order to render my application.",
    "start": "106991",
    "end": "110930"
  },
  {
    "text": "That starts with a header, and for this I'm going to be adding a header that contains the name of the agent,",
    "start": "111610",
    "end": "117094"
  },
  {
    "text": "which is the YouTube transcription agent, and then I'm going to be adding a bit where I have an input bar to submit a video link.",
    "start": "117094",
    "end": "124689"
  },
  {
    "text": "Put this in there as well.",
    "start": "125970",
    "end": "127189"
  },
  {
    "text": "Once I save this, I could already visit the application in the browser by starting npm run dev,",
    "start": "127710",
    "end": "132590"
  },
  {
    "text": "but first, I will also add a placeholder video.",
    "start": "133190",
    "end": "136110"
  },
  {
    "text": "So this will mock the application setup that we'll have later on.",
    "start": "136350",
    "end": "141520"
  },
  {
    "text": "So right below my input bar, I'm going to paste this final bit,",
    "start": "143220",
    "end": "147207"
  },
  {
    "text": "which is going to show a input bar with a button to submit a video link,",
    "start": "147207",
    "end": "153057"
  },
  {
    "text": "and then it's going to show an iframe for a YouTube video.",
    "start": "153057",
    "end": "155879"
  },
  {
    "text": "I need to make sure that all these definitions have the correct format though,",
    "start": "157020",
    "end": "160622"
  },
  {
    "text": "because React has different requirements than any other JavaScript application.",
    "start": "160622",
    "end": "164918"
  },
  {
    "text": "I need to make sure I update the referral policy, the frame border, and this allow full screen option.",
    "start": "165160",
    "end": "171020"
  },
  {
    "text": "So let me format this file and then save it.",
    "start": "171880",
    "end": "174439"
  },
  {
    "text": "In my terminal, I can start the Next .js application by running npm run dev.",
    "start": "174440",
    "end": "179180"
  },
  {
    "text": "And this should open up a new page in my browser, which I can visit to see my application.",
    "start": "180020",
    "end": "184220"
  },
  {
    "text": "In the browser, you can see we have a header, we have a bar to submit a video link,",
    "start": "190820",
    "end": "195117"
  },
  {
    "text": "we have a button to actually submit the link,",
    "start": "195117",
    "end": "197658"
  },
  {
    "text": "and then we have a place where we render the video, including an embedded iframe from YouTube.",
    "start": "197658",
    "end": "202499"
  },
  {
    "text": "So we're going to add a LandGraph agent that's able to fill this space dynamically",
    "start": "203260",
    "end": "207340"
  },
  {
    "text": "by using both YouTube and also a model running using ollama.",
    "start": "207341",
    "end": "212400"
  },
  {
    "text": "So let me go back to VS Code, where I'm first going to kill the process of running Next .js in my terminal,",
    "start": "213330",
    "end": "219350"
  },
  {
    "text": "and we're going to check if I have ollama installed properly.",
    "start": "219350",
    "end": "222030"
  },
  {
    "text": "So with ollama, you can run models locally on your machine.",
    "start": "222730",
    "end": "225969"
  },
  {
    "text": "So these are all open source models that you need to download to your machine first.",
    "start": "226070",
    "end": "229690"
  },
  {
    "text": "So if you run this command for the very first time, you might see",
    "start": "230430",
    "end": "233881"
  },
  {
    "text": "an extra command to actually download the llama 3.2 model.",
    "start": "233882",
    "end": "237604"
  },
  {
    "text": "These are all open source models, so you can run them wherever you want.",
    "start": "237604",
    "end": "241050"
  },
  {
    "text": "For example, they're also available in watsonx.ai.",
    "start": "241310",
    "end": "243709"
  },
  {
    "text": "I can see I have llama 3.2 installed, so I can just close this process by running Ctrl D.",
    "start": "245010",
    "end": "251060"
  },
  {
    "text": "Let me clear my terminal so we can proceed by installing LangGraph.",
    "start": "252850",
    "end": "256970"
  },
  {
    "text": "So LangGraph is a superset of Langchain, meaning that you need to install some Langchain libraries in order to use it.",
    "start": "257370",
    "end": "264449"
  },
  {
    "text": "So I'm going to be installing LangChain, LangGraph, and then some other core libraries.",
    "start": "265200",
    "end": "270120"
  },
  {
    "text": "Once these have been installed, I need to create a new file, and this file I'm going to call it actions .ts.",
    "start": "274390",
    "end": "279829"
  },
  {
    "text": "In this actions .ts file, I'm going to create my LandGraph agent.",
    "start": "280820",
    "end": "284399"
  },
  {
    "text": "I also need to make sure that this file is set up to run server-side by setting use server at the very top of the file,",
    "start": "285270",
    "end": "292069"
  },
  {
    "text": "and in here I can start to create my transcribe function,",
    "start": "293000",
    "end": "296181"
  },
  {
    "text": "which will include the LangGraph agent to retrieve YouTube details and show them on the screen.",
    "start": "296181",
    "end": "301139"
  },
  {
    "text": "I'm going to be calling this function transcribe.",
    "start": "305230",
    "end": "307329"
  },
  {
    "text": "It takes one input, which is the video URL, and the video URL should be a string.",
    "start": "307910",
    "end": "312229"
  },
  {
    "text": "In here, I also need to import a lot of different libraries that we just installed.",
    "start": "313610",
    "end": "318288"
  },
  {
    "text": "So let's break down which libraries we need.",
    "start": "319920",
    "end": "321759"
  },
  {
    "text": "We need ChatOllama, which is the chat interface for Ollama models running on your machine.",
    "start": "321860",
    "end": "326279"
  },
  {
    "text": "We need a function called createReactAgent, which is used to create the agent in LangGraph.",
    "start": "326840",
    "end": "331600"
  },
  {
    "text": "We then need to import two libraries related to creation of tools,",
    "start": "331600",
    "end": "335359"
  },
  {
    "text": "and finally, as we are using TypeScript, we need to have some type definitions in here as well.",
    "start": "335900",
    "end": "340738"
  },
  {
    "text": "So this means we can proceed by setting up the agent inside the transcribe function.",
    "start": "341650",
    "end": "346770"
  },
  {
    "text": "You can see again I'm using the chat interface from Ollama.",
    "start": "348390",
    "end": "350870"
  },
  {
    "text": "I'm setting my model to be llama 3.2.",
    "start": "351290",
    "end": "353750"
  },
  {
    "text": "I have the temperature set to zero.",
    "start": "353950",
    "end": "355669"
  },
  {
    "text": "And I also will be forcing the large language model to return JSON format.",
    "start": "356010",
    "end": "359910"
  },
  {
    "text": "So this is going to be important later on.",
    "start": "360270",
    "end": "362009"
  },
  {
    "text": "When we look at the system prompt where we're going to force the LLM to return something that is in a JSON format.",
    "start": "362010",
    "end": "369009"
  },
  {
    "text": "So if you look at our response, it needs a few messages.",
    "start": "369310",
    "end": "373290"
  },
  {
    "text": "One is a system prompt and the other is a human message.",
    "start": "373650",
    "end": "376429"
  },
  {
    "text": "This is your question usually.",
    "start": "376510",
    "end": "378009"
  },
  {
    "text": "But as we're now building a chat app, we're having a predefined question and the video URL is the dynamic one.",
    "start": "378470",
    "end": "383910"
  },
  {
    "text": "In the system prompt, you can see that the LLM should retrieve the video ID for a given YouTube URL.",
    "start": "384710",
    "end": "390289"
  },
  {
    "text": "So we're going to rely on the LLM to dissect the video ID from its URL.",
    "start": "390290",
    "end": "394889"
  },
  {
    "text": "And then return the output in a JSON structure, which includes the video ID,",
    "start": "395570",
    "end": "399570"
  },
  {
    "text": "and finally, we need to return this back.",
    "start": "400321",
    "end": "403360"
  },
  {
    "text": "So whenever you call the transcribe function, you're going to get this JSON object in return.",
    "start": "403500",
    "end": "407839"
  },
  {
    "text": "So let's save the actions .ts file and then connect it all via the page .tsx component.",
    "start": "410340",
    "end": "415339"
  },
  {
    "text": "At the top of this component, we need to set a few state variables.",
    "start": "417200",
    "end": "420160"
  },
  {
    "text": "We're going to create two.",
    "start": "420320",
    "end": "421280"
  },
  {
    "text": "We're going to create one state variable to make the input bar a controlled component.",
    "start": "421280",
    "end": "425600"
  },
  {
    "text": "Meaning that whenever you type in the input bar, it's going to update the state with the latest part of the video URL.",
    "start": "425940",
    "end": "431579"
  },
  {
    "text": "For this, I'm going to create a variable which I call video URL.",
    "start": "432400",
    "end": "436499"
  },
  {
    "text": "And then I'll also be creating a function to update the video URL.",
    "start": "437440",
    "end": "441040"
  },
  {
    "text": "So this will be used to look at the onChange function of our input bar.",
    "start": "441220",
    "end": "445319"
  },
  {
    "text": "For this, I need to use state hook from React, which can be imported at the very top.",
    "start": "446580",
    "end": "451078"
  },
  {
    "text": "And I'm going to set an empty string as the default state.",
    "start": "451080",
    "end": "454919"
  },
  {
    "text": "Then I'll also be creating a state for the video.",
    "start": "456350",
    "end": "458470"
  },
  {
    "text": "So whenever we retrieve a video using the agent, we want to store it in local state.",
    "start": "458710",
    "end": "463550"
  },
  {
    "text": "Meaning that it can be used across this component.",
    "start": "463630",
    "end": "466830"
  },
  {
    "text": "I have const, then I have set video.",
    "start": "467850",
    "end": "470010"
  },
  {
    "text": "And use state.",
    "start": "471120",
    "end": "472120"
  },
  {
    "text": "This time will be empty.",
    "start": "472220",
    "end": "473220"
  },
  {
    "text": "I will be creating a type safe definition later on for this state variable.",
    "start": "473420",
    "end": "477860"
  },
  {
    "text": "After setting this, I can hook it up to the input box.",
    "start": "479580",
    "end": "484300"
  },
  {
    "text": "But first I'm going to create a function that will actually call the transcribe function to use the agent for transcriptions.",
    "start": "484420",
    "end": "491579"
  },
  {
    "text": "This transcribe video function needs the transcribe function which I have in actions .ts.",
    "start": "494180",
    "end": "500459"
  },
  {
    "text": "It then needs to parse the results.",
    "start": "500940",
    "end": "502420"
  },
  {
    "text": "Because even though we forced the LLM to return JSON,",
    "start": "502620",
    "end": "505553"
  },
  {
    "text": "whatever length chain or length graph returns to me is always a string.",
    "start": "505553",
    "end": "509239"
  },
  {
    "text": "So we need to parse this string and make sure we get the actual JSON.",
    "start": "509240",
    "end": "512698"
  },
  {
    "text": "And this JSON will be put in state using the set video function.",
    "start": "513400",
    "end": "517139"
  },
  {
    "text": "If I scroll down, I can hook up my input box to look at the video URL as its value.",
    "start": "518100",
    "end": "527058"
  },
  {
    "text": "So we can have video URL in here,",
    "start": "527240",
    "end": "529159"
  },
  {
    "text": "and then we need to set an unchanged function and hook up the event to store whatever you type in that input box in state.",
    "start": "529620",
    "end": "537260"
  },
  {
    "text": "So I have the function set video URL,",
    "start": "538090",
    "end": "540150"
  },
  {
    "text": "and this will take e.target.value as its input.",
    "start": "540150",
    "end": "544309"
  },
  {
    "text": "Once I save this, I only need to make sure that my transcribe video function is connected to this button.",
    "start": "545470",
    "end": "552529"
  },
  {
    "text": "After doing this, I should be good to actually submit the request to the large language model",
    "start": "555720",
    "end": "560087"
  },
  {
    "text": "that's connected to the agent to retrieve my video transcription.",
    "start": "560087",
    "end": "564118"
  },
  {
    "text": "It's not retrieving the full transcription yet.",
    "start": "564780",
    "end": "568130"
  },
  {
    "text": "It's only going to make sure we get the video ID.",
    "start": "568250",
    "end": "570510"
  },
  {
    "text": "But later on, we'll add a tool to actually retrieve the transcription.",
    "start": "570510",
    "end": "573809"
  },
  {
    "text": "Let me scroll down a bit to this iframe section and let's make sure we wrap it in curly brackets",
    "start": "575220",
    "end": "581391"
  },
  {
    "text": "and check for the presence of the video state first before we render this.",
    "start": "581391",
    "end": "586299"
  },
  {
    "text": "And this means that we can actually hook up this dynamic video ID in this source.",
    "start": "587140",
    "end": "592160"
  },
  {
    "text": "So instead of having the source which we have right here, we're going to create a new source, which is a template literal.",
    "start": "592420",
    "end": "600720"
  },
  {
    "text": "It's going to take all of this because we still need to have the embed URL.",
    "start": "600720",
    "end": "605000"
  },
  {
    "text": "But now the video ID won't be hard coded, but instead we're going to take",
    "start": "605860",
    "end": "609373"
  },
  {
    "text": "the dynamic variable which is available in the state.",
    "start": "609373",
    "end": "612380"
  },
  {
    "text": "This is video ID,",
    "start": "612980",
    "end": "614380"
  },
  {
    "text": "and just let me delete this one.",
    "start": "616380",
    "end": "618059"
  },
  {
    "text": "Once I save this, we should be able to start our application and view the first part of our application in the browser.",
    "start": "618780",
    "end": "625059"
  },
  {
    "text": "I'm going to run npm rundev and this should start the application.",
    "start": "625680",
    "end": "629279"
  },
  {
    "text": "In my browser, I need to make sure I refresh the page and then enter a video link.",
    "start": "632400",
    "end": "638440"
  },
  {
    "text": "I probably need to set up a loading indicator so I know something is happening whenever I press this button,",
    "start": "639670",
    "end": "644610"
  },
  {
    "text": "but we can see that the video is being pulled in correctly and the video ID is being passed in to the YouTube iframe.",
    "start": "645110",
    "end": "651248"
  },
  {
    "text": "If we go back to actions .ts, we need to do a bit more.",
    "start": "654210",
    "end": "657450"
  },
  {
    "text": "You saw we already imported some tool libraries, so we're going to use this to create a tool",
    "start": "658330",
    "end": "662686"
  },
  {
    "text": "to retrieve information from a YouTube video page.",
    "start": "662686",
    "end": "665690"
  },
  {
    "text": "And for this we'll be using Playwright.",
    "start": "665910",
    "end": "667769"
  },
  {
    "text": "Playwright is a library to open a website programmatically and retrieve details from that website.",
    "start": "668610",
    "end": "674130"
  },
  {
    "text": "So I'm going to close the command running on my terminal and then here I'll be running npm install playwright.",
    "start": "675490",
    "end": "680669"
  },
  {
    "text": "And this will install the Playwright library from npm.",
    "start": "681350",
    "end": "683769"
  },
  {
    "text": "After installing the Playwright library, we need to import it of course in our actions .ts file.",
    "start": "686500",
    "end": "691799"
  },
  {
    "text": "So I can import the library at the very top and then we can start to define our YouTube function.",
    "start": "695120",
    "end": "700659"
  },
  {
    "text": "Well first I'm going to define the tool definition.",
    "start": "700790",
    "end": "704048"
  },
  {
    "text": "Because a tool in Langchain or LangGraph, which is LangGraph but then agentic,",
    "start": "704690",
    "end": "711085"
  },
  {
    "text": "is going to need both a tool execution function and also a tool definition.",
    "start": "711085",
    "end": "715500"
  },
  {
    "text": "So if I have a tool for example which I call get YouTube details,",
    "start": "715700",
    "end": "720853"
  },
  {
    "text": "I will be using the tool function from LangChain to create this tool.",
    "start": "720853",
    "end": "725400"
  },
  {
    "text": "I'm going to make this a async function",
    "start": "726470",
    "end": "729388"
  },
  {
    "text": "later on because the execution function should be async but the rest is fine to be synchronous.",
    "start": "731323",
    "end": "737309"
  },
  {
    "text": "And then I'm going to be adding my tool definition in here.",
    "start": "738100",
    "end": "740459"
  },
  {
    "text": "Once I clean this up, you can see that I have added the tool definition for a tool called get YouTube details,",
    "start": "740990",
    "end": "747082"
  },
  {
    "text": "which is described as a tool to get the title and description of a YouTube video.",
    "start": "747082",
    "end": "752548"
  },
  {
    "text": "And its input is a video ID.",
    "start": "753270",
    "end": "754950"
  },
  {
    "text": "So this is the video ID that we have the LLM dissect from a given YouTube URL.",
    "start": "755150",
    "end": "759670"
  },
  {
    "text": "The actual callback function that should be executed whenever you",
    "start": "760650",
    "end": "764735"
  },
  {
    "text": "have the LLM propose to call the get YouTube detail function is something we hook up here.",
    "start": "764735",
    "end": "770170"
  },
  {
    "text": "In here we need to look for the input variables.",
    "start": "771210",
    "end": "773489"
  },
  {
    "text": "We have an async function.",
    "start": "773970",
    "end": "775490"
  },
  {
    "text": "We should be calling playwright.",
    "start": "777020",
    "end": "778320"
  },
  {
    "text": "So let me put this bit of code in here and make sure we take the input argument.",
    "start": "778580",
    "end": "782399"
  },
  {
    "text": "Let me clean it up a bit.",
    "start": "783220",
    "end": "784478"
  },
  {
    "text": "So what Playwright is doing in here, it's launching a Chromium browser.",
    "start": "785420",
    "end": "788579"
  },
  {
    "text": "So Chromium is related to Chrome.",
    "start": "788720",
    "end": "790178"
  },
  {
    "text": "The very first time you run this, you might need to install the command,",
    "start": "790180",
    "end": "793989"
  },
  {
    "text": "you might need to run the command npm install Playwright",
    "start": "793989",
    "end": "797073"
  },
  {
    "text": "which you can use to download the Chromium browser to your project.",
    "start": "797073",
    "end": "801319"
  },
  {
    "text": "It's going to open a given YouTube page in the browser",
    "start": "801620",
    "end": "805385"
  },
  {
    "text": "and then it's going to take different locators and store them as objects.",
    "start": "805385",
    "end": "808980"
  },
  {
    "text": "So first it's going to look for the H1 element which has the title of the video",
    "start": "809540",
    "end": "813828"
  },
  {
    "text": "and then it's going to look for the description of the video which is somewhere in a div,",
    "start": "813828",
    "end": "817659"
  },
  {
    "text": "and then of course it's going to close the browser because it doesn't need to be open all the time.",
    "start": "819160",
    "end": "823878"
  },
  {
    "text": "So I created this get YouTube detail tool which has both the callback function to call and then also the tool definition.",
    "start": "824960",
    "end": "831099"
  },
  {
    "text": "So let me save this and make sure that we pass the get YouTube detail tool",
    "start": "831620",
    "end": "836634"
  },
  {
    "text": "to Ollama which is then hooked up in Landgraph to form our agent.",
    "start": "836634",
    "end": "840978"
  },
  {
    "text": "I'm going to save this but before we actually try it out we need to update our system message",
    "start": "841580",
    "end": "846500"
  },
  {
    "text": "because now there is additional details that need to be retrieved.",
    "start": "846500",
    "end": "850047"
  },
  {
    "text": "It also needs to retrieve the title and the description of the video.",
    "start": "850047",
    "end": "854540"
  },
  {
    "text": "So we want both of these to be present in the object that's being sent to your front end app.",
    "start": "855000",
    "end": "859539"
  },
  {
    "text": "I'll update this a little bit as well.",
    "start": "863140",
    "end": "864739"
  },
  {
    "text": "Use any tool at your disposal if needed is still valid and we probably want to tell it",
    "start": "865140",
    "end": "869650"
  },
  {
    "text": "to don't return any data unless all the fields are filled.",
    "start": "869650",
    "end": "874559"
  },
  {
    "text": "All fields are populated.",
    "start": "877890",
    "end": "879450"
  },
  {
    "text": "So by creating the tool and updating the system prompt we should be able to try this out in a browser.",
    "start": "882690",
    "end": "887309"
  },
  {
    "text": "For this I'm going to run npm run dev and this should make our application available back in our browser.",
    "start": "887310",
    "end": "893809"
  },
  {
    "text": "Let me copy this YouTube URL and refresh the page because that way we're certain we have a fresh history.",
    "start": "897520",
    "end": "903359"
  },
  {
    "text": "I'm going to put in the URL right here and then let's wait for the LLM and the agent are going to generate for us.",
    "start": "904490",
    "end": "910089"
  },
  {
    "text": "You can see now it's still retrieving the videos.",
    "start": "915430",
    "end": "917350"
  },
  {
    "text": "We don't have the title and description yet because we didn't connect this in our front end app.",
    "start": "917390",
    "end": "921950"
  },
  {
    "text": "So let's go back to the code and open page .tsx.",
    "start": "922130",
    "end": "925450"
  },
  {
    "text": "In here we can replace retrieved video with the actual video title",
    "start": "926250",
    "end": "931129"
  },
  {
    "text": "and then we can replace lorem ipsum with the video description.",
    "start": "931129",
    "end": "936320"
  },
  {
    "text": "We are getting some TypeScript errors here so let's make sure we",
    "start": "943000",
    "end": "946031"
  },
  {
    "text": "make this application type safe by creating a type at the very top.",
    "start": "946031",
    "end": "950019"
  },
  {
    "text": "Let's create a type called video which has a video ID which is a string.",
    "start": "950800",
    "end": "958179"
  },
  {
    "text": "It also has a title which is a string as well and finally it has a description which again is represented as a string.",
    "start": "958960",
    "end": "966440"
  },
  {
    "text": "This type should be used by our local state right here",
    "start": "969290",
    "end": "973894"
  },
  {
    "text": "so we can make sure whatever is being set as video state is actually matching the video type definition",
    "start": "973895",
    "end": "979268"
  },
  {
    "text": "and then we should do the same whenever we get the JSON back from the large language model.",
    "start": "979268",
    "end": "984100"
  },
  {
    "text": "We need to make sure that whatever is being parsed ends up being type video",
    "start": "984340",
    "end": "988122"
  },
  {
    "text": "and this should resolve some of the TypeScript errors we saw in the bottom of our screen.",
    "start": "988122",
    "end": "993520"
  },
  {
    "text": "We still get an error for description and this is why I like TypeScript we forgot to put an i there.",
    "start": "994040",
    "end": "999180"
  },
  {
    "text": "And now it should be all good.",
    "start": "999420",
    "end": "1000500"
  },
  {
    "text": "If we visit the browser we should see your application with the video title",
    "start": "1001060",
    "end": "1004725"
  },
  {
    "text": "and the video description being pulled dynamically from the YouTube video page.",
    "start": "1004725",
    "end": "1009300"
  },
  {
    "text": "So you can see we have the title here building AI apps with large language models,",
    "start": "1012300",
    "end": "1016687"
  },
  {
    "text": "which matches the embedded video title",
    "start": "1016687",
    "end": "1018924"
  },
  {
    "text": "and then description you can see the amount of views is in there whenever it was posted",
    "start": "1018924",
    "end": "1023190"
  },
  {
    "text": "together with the rest of the video description.",
    "start": "1023190",
    "end": "1025938"
  },
  {
    "text": "So this is a great start and we want to do something more because I told you in the beginning",
    "start": "1026500",
    "end": "1030183"
  },
  {
    "text": "we're rebuilding an agent that's able to transcribe YouTube videos,",
    "start": "1030183",
    "end": "1034204"
  },
  {
    "text": "and for this we need to import a community tool from wxflows.",
    "start": "1034205",
    "end": "1037599"
  },
  {
    "text": "So let me go back to VS Code where I killed the process to run the app",
    "start": "1039160",
    "end": "1043121"
  },
  {
    "text": "and I will be creating a new directory which I'll be calling wxflows.",
    "start": "1043121",
    "end": "1047438"
  },
  {
    "text": "We need to move into this directory from which we can use the wxflows CLI to start importing community tools.",
    "start": "1050440",
    "end": "1056700"
  },
  {
    "text": "So these tools are able for you to be pulled from GitHub.",
    "start": "1056780",
    "end": "1059259"
  },
  {
    "text": "First, I need to make sure I have the CLI installed correctly",
    "start": "1060570",
    "end": "1063690"
  },
  {
    "text": "and you can find the installation instructions on the GitHub instruction for wxflows.",
    "start": "1063691",
    "end": "1068890"
  },
  {
    "text": "We can run the command WXFlows--version and it should render a version in your terminal.",
    "start": "1069980",
    "end": "1075319"
  },
  {
    "text": "Once you've verified it's installed correctly we can start by setting up our project by running wxflows in it.",
    "start": "1076220",
    "end": "1081940"
  },
  {
    "text": "It's going to ask us for an endpoint name so all the tools you create in here they will be represented as endpoints.",
    "start": "1082650",
    "end": "1088270"
  },
  {
    "text": "I always like to use the name of my project as the endpoint name that way I don't get confused later on.",
    "start": "1089740",
    "end": "1095519"
  },
  {
    "text": "You can see in the wxflows directory there's a new configuration file.",
    "start": "1096710",
    "end": "1100230"
  },
  {
    "text": "So we can proceed by importing the YouTube transcription tool",
    "start": "1101130",
    "end": "1104695"
  },
  {
    "text": "and for this I'm going to run the next command which will take a tool from YouTube",
    "start": "1105264",
    "end": "1110217"
  },
  {
    "text": "that's available on GitHub and put it in our project.",
    "start": "1110217",
    "end": "1113170"
  },
  {
    "text": "A couple of files are now being created including tools graphql.",
    "start": "1116000",
    "end": "1120119"
  },
  {
    "text": "In here you can see we have a new tool called YouTube underscore transcript.",
    "start": "1120120",
    "end": "1124160"
  },
  {
    "text": "It takes a description which is retrieve transcript for a given video ID",
    "start": "1124900",
    "end": "1129632"
  },
  {
    "text": "and then it has some formatting requirements for the video URL.",
    "start": "1129632",
    "end": "1134359"
  },
  {
    "text": "I don't need to save any of this but I do need to deploy it.",
    "start": "1137070",
    "end": "1139748"
  },
  {
    "text": "So as mentioned all the tools are represented as endpoints so by running deploy you can deploy this to an endpoint.",
    "start": "1139790",
    "end": "1145349"
  },
  {
    "text": "And this endpoint is what we connect to from our LangGraph agent.",
    "start": "1146070",
    "end": "1149349"
  },
  {
    "text": "The YouTube...",
    "start": "1152560",
    "end": "1153428"
  },
  {
    "text": "The endpoint here is the endpoint that you need for the SDK and together with your API key.",
    "start": "1155110",
    "end": "1159829"
  },
  {
    "text": "So we're going to move back into the main project directory and in here we're going to create a .environment file.",
    "start": "1160430",
    "end": "1166670"
  },
  {
    "text": "In this .environment file we need to set the endpoint and also the API key.",
    "start": "1167740",
    "end": "1171979"
  },
  {
    "text": "So these are two details that you really need.",
    "start": "1172680",
    "end": "1174740"
  },
  {
    "text": "Without these you won't be able to execute the YouTube transcription tool.",
    "start": "1174820",
    "end": "1178659"
  },
  {
    "text": "For the endpoint I'm able to copy paste my endpoint that was in my terminal after running wxflows deploy.",
    "start": "1180660",
    "end": "1186500"
  },
  {
    "text": "For the API key I need to run the command wxflows bmi dash dash API key",
    "start": "1187120",
    "end": "1191959"
  },
  {
    "text": "and this will return the API key right here in your terminal.",
    "start": "1191959",
    "end": "1195440"
  },
  {
    "text": "Make sure to save the environment file and then close it.",
    "start": "1202680",
    "end": "1205799"
  },
  {
    "text": "We also need to install the wxflows SDK and this SDK is being used to connect and get retrieved to tools.",
    "start": "1206280",
    "end": "1212699"
  },
  {
    "text": "For this I run a command, now this command, for this command I need to run npm install wxflows sdk add beta.",
    "start": "1216390",
    "end": "1226219"
  },
  {
    "text": "So I'm going to run npm install add wxflows slash sdk.",
    "start": "1226220",
    "end": "1230199"
  },
  {
    "text": "I need to make sure I install the beta version of the SDK as this is under active development.",
    "start": "1230680",
    "end": "1236000"
  },
  {
    "text": "Once it's installed I can hook it up to my LangGraph agent which is in actions .ts.",
    "start": "1240160",
    "end": "1245000"
  },
  {
    "text": "At the very top I need to import wxflows and I need to import the LangChain integrated version.",
    "start": "1247400",
    "end": "1252919"
  },
  {
    "text": "I can scroll down a bit.",
    "start": "1253900",
    "end": "1255159"
  },
  {
    "text": "I won't be needing my get youtube detail tool anymore",
    "start": "1255440",
    "end": "1258105"
  },
  {
    "text": "but I might be using it later on because you can still use different tools side by side.",
    "start": "1258105",
    "end": "1262500"
  },
  {
    "text": "In here I'm going to create a tool client and the tool client is able to retrieve and execute tools that are available on wxflows.",
    "start": "1263700",
    "end": "1271439"
  },
  {
    "text": "I have my endpoint and API key coming from the .environment file in here,",
    "start": "1272260",
    "end": "1276540"
  },
  {
    "text": "and then I need to retrieve the tools by looking at the lctools variable that's available on the tool client.",
    "start": "1277720",
    "end": "1285278"
  },
  {
    "text": "The tools that I retrieved here I need to connect them to my LangGraph agent like this.",
    "start": "1287100",
    "end": "1292439"
  },
  {
    "text": "You might be getting some errors here along the way especially here because",
    "start": "1295410",
    "end": "1299242"
  },
  {
    "text": "we're trying to put an array inside an array and it's never a good idea.",
    "start": "1299242",
    "end": "1303090"
  },
  {
    "text": "So let me update this and save it.",
    "start": "1303790",
    "end": "1305690"
  },
  {
    "text": "Before we actually try it out in our browser we might want to make one small change.",
    "start": "1305950",
    "end": "1309829"
  },
  {
    "text": "We might want to update the system message because now it's retrieving tools.",
    "start": "1310130",
    "end": "1314670"
  },
  {
    "text": "So we can actually give it a very specific description for the new tool we gave it.",
    "start": "1315270",
    "end": "1320250"
  },
  {
    "text": "So next to retrieving the title and description for a given video",
    "start": "1323930",
    "end": "1327945"
  },
  {
    "text": "we also want to retrieve the transcript for a video using the tool that we just provided.",
    "start": "1327945",
    "end": "1332289"
  },
  {
    "text": "We want the LLM to also use all the tools that are available",
    "start": "1333280",
    "end": "1337226"
  },
  {
    "text": "and we're going to give it some examples on how to use the YouTube transcript tool,",
    "start": "1337226",
    "end": "1341460"
  },
  {
    "text": "and then something that's quite interesting we're going to be using the transcript to generate the description.",
    "start": "1342630",
    "end": "1347510"
  },
  {
    "text": "So you might remember earlier on we retrieved the description from the YouTube video page",
    "start": "1347790",
    "end": "1352768"
  },
  {
    "text": "this time we'll be generating it using the LLM based off the captions that were provided by our transcript tool.",
    "start": "1352768",
    "end": "1359368"
  },
  {
    "text": "So let's make sure to add the captions here as well because we also want to see the captions in our JSON output.",
    "start": "1360750",
    "end": "1368050"
  },
  {
    "text": "So this is the video captions and let me save this.",
    "start": "1368890",
    "end": "1372750"
  },
  {
    "text": "I think we're all done in the actions .ts file so we can make some changes in our page.tsx.",
    "start": "1373010",
    "end": "1379569"
  },
  {
    "text": "In here we now also need to retrieve the captions.",
    "start": "1382870",
    "end": "1385509"
  },
  {
    "text": "So let's add captions to the type definition as a string.",
    "start": "1385510",
    "end": "1390669"
  },
  {
    "text": "We are still parsing the result and the captions should be part of this result,",
    "start": "1391800",
    "end": "1395480"
  },
  {
    "text": "and once we scroll down a bit more we probably want to show the captions on the screen as well.",
    "start": "1396680",
    "end": "1402119"
  },
  {
    "text": "So not only do we use the captions to generate a description we'll also be using these captions to generate.",
    "start": "1402220",
    "end": "1408452"
  },
  {
    "text": "We'll also be using these captions and display them right here on the page.",
    "start": "1408452",
    "end": "1409523"
  },
  {
    "text": "Let me clean this up a bit.",
    "start": "1413012",
    "end": "1414635"
  },
  {
    "text": "Why am I getting an error here?",
    "start": "1414825",
    "end": "1416883"
  },
  {
    "text": "And then format the page.",
    "start": "1417889",
    "end": "1419268"
  },
  {
    "text": "So now if I run my application again using npm run dev I should be able to open the browser and",
    "start": "1420555",
    "end": "1426098"
  },
  {
    "text": "see the captions in there for my video next to title and description.",
    "start": "1426098",
    "end": "1429994"
  },
  {
    "text": "So I'm going back to my browser and copy this URL and make sure to refresh the page.",
    "start": "1430783",
    "end": "1436783"
  },
  {
    "text": "I'm going to be pasting this link",
    "start": "1439271",
    "end": "1441188"
  },
  {
    "text": "and then let's see what the agent is generating for us using the large language model and the available tools.",
    "start": "1441188",
    "end": "1447091"
  },
  {
    "text": "And as you can see here we now have a title for the video.",
    "start": "1448081",
    "end": "1451661"
  },
  {
    "text": "We have our embedded video using the video ID and then we have the description.",
    "start": "1451661",
    "end": "1455861"
  },
  {
    "text": "The description was generated by looking at the transcript.",
    "start": "1455861",
    "end": "1458601"
  },
  {
    "text": "I do see the transcript is a bit cut off.",
    "start": "1458918",
    "end": "1461453"
  },
  {
    "text": "So a couple of things that could happen here,",
    "start": "1461453",
    "end": "1463228"
  },
  {
    "text": "maybe the amount of tokens that we give to the LLM isn't sufficient",
    "start": "1463228",
    "end": "1467333"
  },
  {
    "text": "to retrieve the entire transcript or maybe it's just a styling thing.",
    "start": "1467333",
    "end": "1470438"
  },
  {
    "text": "If you want to update parameters such as the max new tokens you can set them all in our actions .ts file.",
    "start": "1471079",
    "end": "1477698"
  },
  {
    "text": "If you scroll up a bit you're connecting here to the chat.ollama function.",
    "start": "1477925",
    "end": "1482204"
  },
  {
    "text": "You can give it parameters like this.",
    "start": "1482411",
    "end": "1485530"
  },
  {
    "text": "You can also set things like max new tokens or max retries.",
    "start": "1485579",
    "end": "1489658"
  },
  {
    "text": "You can set a lot of different things here.",
    "start": "1489993",
    "end": "1491712"
  },
  {
    "text": "If you want to know more about setting this up make sure to go to the line chain documentation.",
    "start": "1491833",
    "end": "1495553"
  },
  {
    "text": "And that's how easy it is to create your LangGraph agent using JavaScript.",
    "start": "1497091",
    "end": "1500470"
  },
  {
    "text": "In this video we use Next.js to build a frontline application.",
    "start": "1500682",
    "end": "1503901"
  },
  {
    "text": "Then we use models running in LLM and connect it to LangGraph.",
    "start": "1504065",
    "end": "1507324"
  },
  {
    "text": "And finally we used a YouTube transcription tool from wxflows to transcribe videos from YouTube.",
    "start": "1507480",
    "end": "1513299"
  },
  {
    "text": "If you want to know more about building this application make sure to have a look at the link in the video description.",
    "start": "1513634",
    "end": "1518514"
  }
]