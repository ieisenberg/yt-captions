[
  {
    "text": "You, dear viewer, can code in just about any \nlanguage. You can code Python scripts. You  ",
    "start": "800",
    "end": "6680"
  },
  {
    "text": "can code Java classes, and you can code in COBOL, \nassembler, RPG! The only assistance you need comes  ",
    "start": "6680",
    "end": "14959"
  },
  {
    "text": "from generative AI. This prompt here will work in \njust about any large language model. Generative AI  ",
    "start": "14960",
    "end": "24800"
  },
  {
    "text": "is assisting software developers of all levels \nof experience to write code. The user enters a  ",
    "start": "24800",
    "end": "30640"
  },
  {
    "text": "text prompt describing what the code should do, \nand generative AI creates the corresponding code  ",
    "start": "30640",
    "end": "36600"
  },
  {
    "text": "like this. And we can go much further than \nthese examples. In addition to creating new  ",
    "start": "36600",
    "end": "43160"
  },
  {
    "text": "applications, generative AI can help modernize \nlegacy code or translate code from one programming  ",
    "start": "43160",
    "end": "50120"
  },
  {
    "text": "language to another. So let's explore how this \nworks, how this is different to low and no code,  ",
    "start": "50120",
    "end": "56800"
  },
  {
    "text": "and define the two broad categories of generative \nAI code generation. Okay, so generative AI for  ",
    "start": "56800",
    "end": "64280"
  },
  {
    "text": "coding is possible because of advancements in NLP. \nThat's natural language processing, deep learning  ",
    "start": "64280",
    "end": "70200"
  },
  {
    "text": "algorithms, and our good friends, large language \nmodels or LLMs. Now these LLMs are trained on a  ",
    "start": "70200",
    "end": "80679"
  },
  {
    "text": "vast dataset of existing source code. Now the more \ndiverse the source code, the better. The training  ",
    "start": "80680",
    "end": "92480"
  },
  {
    "text": "code generally comes from publicly available \ncode, such as those produced by open source  ",
    "start": "92480",
    "end": "97040"
  },
  {
    "text": "projects. Although we can also fine tune LLMs with \nproprietary code that we feed into the model. Now  ",
    "start": "97040",
    "end": "105200"
  },
  {
    "text": "here's how this works. Programmers enter text \nprompts into the LLM. And this describes what  ",
    "start": "105200",
    "end": "115240"
  },
  {
    "text": "they want the code to do. So \"sort this row of \ndata\" or \"create a submit button\", stuff like  ",
    "start": "115240",
    "end": "121680"
  },
  {
    "text": "that. And then how they want the generative AI \nsystem to actually process that. Now that could  ",
    "start": "121680",
    "end": "131480"
  },
  {
    "text": "be in the form of a number of different things. \nSo it could be in the form of code snippets. Or  ",
    "start": "131480",
    "end": "138680"
  },
  {
    "text": "it could be all the way through to full functions \nof actual code. And this can really streamline the  ",
    "start": "138680",
    "end": "145920"
  },
  {
    "text": "coding process by handling repetitive tasks that \na human programmer is more than happy to offload.  ",
    "start": "145920",
    "end": "153040"
  },
  {
    "text": "Looking at you error reporting to log files! Now \ngenerative AI can also translate code from one  ",
    "start": "153040",
    "end": "162439"
  },
  {
    "text": "language to another, something that's particularly \nuseful in modernization projects such as updating  ",
    "start": "162440",
    "end": "168040"
  },
  {
    "text": "legacy applications by transforming COBOL to Java. \nIt can also serve as a very efficient method of  ",
    "start": "168040",
    "end": "175480"
  },
  {
    "text": "testing and it's a great way to perform debugging. \nNow this works best as an assistant rather than a  ",
    "start": "175480",
    "end": "186040"
  },
  {
    "text": "complete replacement for human programmers. Even \nas code produced by the generative AI and the  ",
    "start": "186040",
    "end": "192560"
  },
  {
    "text": "LLM technologies becomes more accurate, it can \nstill contain flaws, and it should be reviewed,  ",
    "start": "192560",
    "end": "199280"
  },
  {
    "text": "edited and refined by actual real life people. \nSo we can think of generative AI as enabling  ",
    "start": "199280",
    "end": "208560"
  },
  {
    "text": "developers to generate code faster, reducing \nthe work of manually writing lines of code,  ",
    "start": "208560",
    "end": "214520"
  },
  {
    "text": "and freeing developers to focus on higher value \nwork. Now I want to pause a moment to compare  ",
    "start": "214520",
    "end": "220840"
  },
  {
    "text": "all of this to something called low and no-code \nsolutions, and to see what the similarities and  ",
    "start": "220840",
    "end": "230480"
  },
  {
    "text": "differences are. Now, this is another way to \ngenerate code quickly. Low and no code tools,  ",
    "start": "230480",
    "end": "237000"
  },
  {
    "text": "they're built on a series of templates that \nprovide input into this, and they also use  ",
    "start": "237000",
    "end": "244680"
  },
  {
    "text": "a series of libraries of components. Now, people \nwithout coding skills can use a visual interface  ",
    "start": "244680",
    "end": "253799"
  },
  {
    "text": "to do things like drag and drop components to \ncreate applications quickly. The code this creates  ",
    "start": "253800",
    "end": "260519"
  },
  {
    "text": "is hidden in the background--you don't see it. \nNow generative AI for code, on the other hand,  ",
    "start": "260520",
    "end": "265960"
  },
  {
    "text": "doesn't use templates, doesn't use libraries \nof components. The software is reading the  ",
    "start": "265960",
    "end": "271400"
  },
  {
    "text": "developer's plain language prompts and suggests \ncode snippets from scratch that will produce  ",
    "start": "271400",
    "end": "278280"
  },
  {
    "text": "the desired results. So while low code and no-code \ntools generally target non-developers and business  ",
    "start": "278280",
    "end": "284960"
  },
  {
    "text": "users, both pro developers and other users can \nuse AI code generation software. All right. So  ",
    "start": "284960",
    "end": "291759"
  },
  {
    "text": "let's finally put generative AI code into two \ncategories. I think we can think of this in two  ",
    "start": "291760",
    "end": "298080"
  },
  {
    "text": "different ways. And the first way I would consider \nis \"general purpose\". So we're talking here about  ",
    "start": "298080",
    "end": "307879"
  },
  {
    "text": "general purpose, generative AI applications, \nand that encompasses stuff like chatGPT and  ",
    "start": "307880",
    "end": "315120"
  },
  {
    "text": "Google Bard. And depending on that training \ndataset, most of these LLMs can perform some  ",
    "start": "315120",
    "end": "320479"
  },
  {
    "text": "level of coding based on text prompts. But these \nare free standing tools rather than integrated  ",
    "start": "320480",
    "end": "328240"
  },
  {
    "text": "plug-ins that work directly in the developer's \nown environment. That is the second category.  ",
    "start": "328240",
    "end": "335479"
  },
  {
    "text": "So we can think of the second category really as \nbeing \"code generation tools\". These are tools  ",
    "start": "335480",
    "end": "344760"
  },
  {
    "text": "dedicated specifically to creating code rather \nthan these general purpose ones which address a  ",
    "start": "344760",
    "end": "350120"
  },
  {
    "text": "much broader area. So, for example, we can think \nof GitHub Copilot. That's a pre-trained AI model  ",
    "start": "350120",
    "end": "357080"
  },
  {
    "text": "and code completion tool that writes code in \nmany languages, including JavaScript, Go, Perl,  ",
    "start": "357080",
    "end": "363240"
  },
  {
    "text": "Ruby, Swift--the list goes on. It uses machine \nlearning to suggest code based on context, can  ",
    "start": "363240",
    "end": "371240"
  },
  {
    "text": "analyze code for vulnerabilities and is available \nfor as an extension for various IDEs, including  ",
    "start": "371240",
    "end": "377639"
  },
  {
    "text": "Visual Studio Code. And there's also IBM watsonx \nCode Assistant that helps developers write code  ",
    "start": "377640",
    "end": "384960"
  },
  {
    "text": "using a AI generated recommendations. It provides \npretrained, curated models based on specific  ",
    "start": "384960",
    "end": "392080"
  },
  {
    "text": "programming languages. Ultimately, generative AI \nfor code is a valuable tool in code creation,  ",
    "start": "392080",
    "end": "398879"
  },
  {
    "text": "in code translation, testing and debugging. And \nbest of all, it's opening up who can contribute to  ",
    "start": "398880",
    "end": "407360"
  },
  {
    "text": "the software development process. If you have any \nquestions, please drop us a line below. And if you  ",
    "start": "407360",
    "end": "414479"
  },
  {
    "text": "want to see more videos like this in the future, \nplease like and subscribe. Thanks for watching.",
    "start": "414480",
    "end": "421040"
  }
]