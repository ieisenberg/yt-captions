[
  {
    "text": "How can you ensure that your data is\nstored consistently",
    "start": "480",
    "end": "3760"
  },
  {
    "text": "and reliably across a distributed system?\nMy name is Whitney Lee and I'm a Cloud",
    "start": "3760",
    "end": "9280"
  },
  {
    "text": "Developer here at IBM.\netcd is an open source key value data",
    "start": "9280",
    "end": "14879"
  },
  {
    "text": "store\nused to manage and store data that help",
    "start": "14880",
    "end": "19119"
  },
  {
    "text": "keep distributed systems running.\netcd is most well known for being one of",
    "start": "19119",
    "end": "23920"
  },
  {
    "text": "the core components of Kubernetes,\nwhere it stores and manages Kubernetes",
    "start": "23920",
    "end": "28480"
  },
  {
    "text": "state data, configuration data,\nand metadata. etcd can be relied upon",
    "start": "28480",
    "end": "35360"
  },
  {
    "text": "to be a single source of truth at any\ngiven point in time.",
    "start": "35360",
    "end": "41520"
  },
  {
    "text": "Today I'm going to go over some of the\nfeatures of etcd that allow it to be so",
    "start": "41600",
    "end": "45600"
  },
  {
    "text": "effective in this way.",
    "start": "45600",
    "end": "48559"
  },
  {
    "text": "etcd is fully replicated.",
    "start": "48800",
    "end": "52718"
  },
  {
    "text": "This means that every node in an etcd\ncluster",
    "start": "55840",
    "end": "59520"
  },
  {
    "text": "has access to the full data store.\netcd is also reliably consistent.",
    "start": "59520",
    "end": "67920"
  },
  {
    "text": "Every data read in an etcd cluster is\ngoing to return the most recent data",
    "start": "70320",
    "end": "75040"
  },
  {
    "text": "right.\nLet's talk about how this works. etcd",
    "start": "75040",
    "end": "79360"
  },
  {
    "text": "is built on top of the Raft algorithm\nthat is used for distributed consensus.",
    "start": "79360",
    "end": "85119"
  },
  {
    "text": "So, let's make a very simple etcd cluster\nof only four nodes. An etcd cluster",
    "start": "85119",
    "end": "92000"
  },
  {
    "text": "always has a leader\nand then the other nodes in the cluster",
    "start": "92000",
    "end": "96000"
  },
  {
    "text": "are followers.\nIt's a key value data store, so in this",
    "start": "96000",
    "end": "100560"
  },
  {
    "text": "case at key one we have the value of\nseven.",
    "start": "100560",
    "end": "104960"
  },
  {
    "text": "Let's say a web application comes in",
    "start": "104960",
    "end": "108720"
  },
  {
    "text": "and lets the leader node know at key one\nwe want to store the value of 17 instead",
    "start": "109520",
    "end": "115920"
  },
  {
    "text": "of 7.\nThe leader node does not change its own",
    "start": "115920",
    "end": "120399"
  },
  {
    "text": "local data store,\ninstead it forwards that request to each",
    "start": "120399",
    "end": "124560"
  },
  {
    "text": "of the followers.\nWhen a follower changes its local data",
    "start": "124560",
    "end": "129360"
  },
  {
    "text": "store\nit returns that to the leader, so the",
    "start": "129360",
    "end": "132160"
  },
  {
    "text": "leader knows.\nWhen our leader node can see that the",
    "start": "132160",
    "end": "136400"
  },
  {
    "text": "majority of the nodes\nhave been updated to the most current",
    "start": "136400",
    "end": "140159"
  },
  {
    "text": "data that's when the leader will update\nits own current data store",
    "start": "140160",
    "end": "144720"
  },
  {
    "text": "and return a successful write to the\nclient.",
    "start": "144720",
    "end": "149280"
  },
  {
    "text": "Now client doesn't actually have to\nconcern itself",
    "start": "149280",
    "end": "152720"
  },
  {
    "text": "about which node in the cluster is the\nleader. The client can make",
    "start": "152720",
    "end": "156239"
  },
  {
    "text": "read and write requests to any node in\nthe cluster.",
    "start": "156239",
    "end": "160319"
  },
  {
    "text": "So, let's say, this all happens over a\nmatter of milliseconds,",
    "start": "160319",
    "end": "164080"
  },
  {
    "text": "but let's say that the client makes a\nread request to the node that hasn't",
    "start": "164080",
    "end": "168640"
  },
  {
    "text": "updated yet\nand says what's the value at key one?",
    "start": "168640",
    "end": "173440"
  },
  {
    "text": "Well this follower node knows it's\na follower node and knows it's not",
    "start": "173680",
    "end": "178239"
  },
  {
    "text": "authorized to answer the client directly.\nSo what it's going to do is forward that",
    "start": "178239",
    "end": "182640"
  },
  {
    "text": "request into the leader node\nwhich will then respond the cluster's",
    "start": "182640",
    "end": "187760"
  },
  {
    "text": "current value at key 1 is 17.\nAnd so it will get a response of 17 to",
    "start": "187760",
    "end": "194720"
  },
  {
    "text": "the client.\nAnd that's how etcd is replicated.",
    "start": "194720",
    "end": "203840"
  },
  {
    "text": "So every every node in the cluster\nhas access to the full data store",
    "start": "203840",
    "end": "208640"
  },
  {
    "text": "and it's consistent every data read is\ngoing to return",
    "start": "208640",
    "end": "212000"
  },
  {
    "text": "the most recent data right.\netcd is also highly available.",
    "start": "212000",
    "end": "219440"
  },
  {
    "text": "This means that there's no single point\nof failure in the etcd cluster.",
    "start": "224000",
    "end": "229200"
  },
  {
    "text": "It can tolerate gracefully tolerate\nnetwork partitions and hardware failure",
    "start": "229200",
    "end": "233439"
  },
  {
    "text": "too.\nSo, let's say that our leader node goes",
    "start": "233439",
    "end": "237040"
  },
  {
    "text": "down.\nThe followers can declare themselves a",
    "start": "237040",
    "end": "240560"
  },
  {
    "text": "candidate,\nthey'll hold an election where each one",
    "start": "240560",
    "end": "243360"
  },
  {
    "text": "votes based on availability\nand a new node will be elected the",
    "start": "243360",
    "end": "247760"
  },
  {
    "text": "leader.\nThat leader will go on to manage the",
    "start": "247760",
    "end": "250720"
  },
  {
    "text": "replication for the cluster\nand the data is unaffected.",
    "start": "250720",
    "end": "257360"
  },
  {
    "text": "etcd is also fast.",
    "start": "258639",
    "end": "262880"
  },
  {
    "text": "etcd is benchmarked at 10,000 writes per\nsecond.",
    "start": "264320",
    "end": "268400"
  },
  {
    "text": "With that said, etcd does persist data to\ndisk.",
    "start": "268400",
    "end": "272000"
  },
  {
    "text": "So, etcd's performance is tied to your\nstorage disk speed.",
    "start": "272000",
    "end": "277040"
  },
  {
    "text": "etcd is secure.\netcd uses transport layer security with",
    "start": "277040",
    "end": "285520"
  },
  {
    "text": "optional\nSSL client certificate authentication.",
    "start": "285520",
    "end": "289520"
  },
  {
    "text": "etcd stores vital and highly sensitive\nconfiguration data,",
    "start": "289520",
    "end": "293759"
  },
  {
    "text": "so it's important to keep it protected.\nFinally etcd is simple to use.",
    "start": "293759",
    "end": "301759"
  },
  {
    "text": "A web application can read and write\ndata to etcd uses a",
    "start": "304400",
    "end": "307840"
  },
  {
    "text": "simple http JSON tools.",
    "start": "307840",
    "end": "312320"
  },
  {
    "text": "So the other thing to talk about in etcd\nthat's important",
    "start": "312479",
    "end": "315520"
  },
  {
    "text": "is the watch function. Kubernetes\nleverages this.",
    "start": "315520",
    "end": "319918"
  },
  {
    "text": "So, as i talked about at the beginning,\netcd stores Kubernetes configuration data",
    "start": "319919",
    "end": "326720"
  },
  {
    "text": "and its state data.",
    "start": "326720",
    "end": "329759"
  },
  {
    "text": "So, etcd can use this watch function\nto compare these to each other. If they",
    "start": "331680",
    "end": "339440"
  },
  {
    "text": "ever go\nout of sync, etcd will let the Kubernetes",
    "start": "339440",
    "end": "342560"
  },
  {
    "text": "API know\nand the kubernetes API will reconfigure",
    "start": "342560",
    "end": "345600"
  },
  {
    "text": "the cluster accordingly.",
    "start": "345600",
    "end": "348720"
  },
  {
    "text": "etcd can be used to store your data\nreliably and consistently across your",
    "start": "349440",
    "end": "357039"
  },
  {
    "text": "distributed system.\nThank you. if you have questions please",
    "start": "357039",
    "end": "361039"
  },
  {
    "text": "drop us a line below.\nIf you want to see more videos like this",
    "start": "361039",
    "end": "364479"
  },
  {
    "text": "in the future, please like\nand subscribe. And don't forget you can",
    "start": "364479",
    "end": "369039"
  },
  {
    "text": "grow your skills and earn a badge with\nIBM CloudLabs,",
    "start": "369039",
    "end": "372880"
  },
  {
    "text": "which are free browser-based, interactive\nKubernetes labs.",
    "start": "372880",
    "end": "379120"
  }
]