[
  {
    "text": "NumPy and SciPy are two essential libraries in \nthe Python programming ecosystem and while both  ",
    "start": "240",
    "end": "6600"
  },
  {
    "text": "are used for math type things there are both \nfundamental differences and areas of overlap  ",
    "start": "6600",
    "end": "13920"
  },
  {
    "text": "between them so let's get into what they are \nhow they can be differentiated and then some  ",
    "start": "13920",
    "end": "18900"
  },
  {
    "text": "use cases, so NumPy. NumPy is an abbreviation \nit's an abbreviation for numerical python,  ",
    "start": "18900",
    "end": "27720"
  },
  {
    "text": "NumPy-- numerical Python --it lets you do stuff \nwith numbers now NumPy light works with  ",
    "start": "28320",
    "end": "34680"
  },
  {
    "text": "large multi-dimensional arrays and matrices \nalong with a large collection of high-level  ",
    "start": "34680",
    "end": "40740"
  },
  {
    "text": "mathematical functions to operate on these arrays. \nMulti-dimensional arrays you say, what are those?  ",
    "start": "40740",
    "end": "46620"
  },
  {
    "text": "Well you can think of multi-dimensional arrays as \nlists of lists, or even lists of lists of lists.  ",
    "start": "46620",
    "end": "54000"
  },
  {
    "text": "In essence a one-dimensional \narray, that's something like this,  ",
    "start": "54780",
    "end": "59219"
  },
  {
    "text": "it's a it's a simple row of items, like a row of \nnumbers. Then you have a two-dimensional array,  ",
    "start": "60720",
    "end": "68460"
  },
  {
    "text": "that's like this, and you can think of that as \nbeing like a table. Where you have multiple rows,  ",
    "start": "68460",
    "end": "74700"
  },
  {
    "text": "each of which may contain multiple items. \nNow this can go even further, we can have  ",
    "start": "74700",
    "end": "78899"
  },
  {
    "text": "three-dimensional array, this, four-dimensional \narray you get the idea. Now consider a real life  ",
    "start": "80040",
    "end": "87600"
  },
  {
    "text": "application, like 3D Graphics modeling, you might \nhave a three-dimensional array representing the X,  ",
    "start": "87600",
    "end": "93840"
  },
  {
    "text": "the Y, and the Z coordinates of each point in \na 3D model, or think about time series data,  ",
    "start": "93840",
    "end": "99899"
  },
  {
    "text": "where one axis represented chronological order \nof data. These multi-dimensional arrays are also  ",
    "start": "99900",
    "end": "105300"
  },
  {
    "text": "called tensors and they're fundamental to a lot \nof the heavy number crunching required it feels  ",
    "start": "105300",
    "end": "109860"
  },
  {
    "text": "like physics, mathematics, and machine learning. \nWith NumPy you can perform operations on these  ",
    "start": "109860",
    "end": "115740"
  },
  {
    "text": "arrays as if they were regular numbers, \nand NumPy handles all the complexity of  ",
    "start": "115740",
    "end": "119820"
  },
  {
    "text": "manipulating these data structures, but that's \njust that's just scratching the surface of what  ",
    "start": "119820",
    "end": "124260"
  },
  {
    "text": "NumPy is capable of. With the help of NumPy \nyou can perform mathematical operations,  ",
    "start": "124260",
    "end": "128399"
  },
  {
    "text": "so some basic stuff, like addition, subtraction, \nor you can do things like squaring on an element.  ",
    "start": "128400",
    "end": "135720"
  },
  {
    "text": "You can perform statistical operations like \ncalculating the mean, the median, and the standard  ",
    "start": "136440",
    "end": "141660"
  },
  {
    "text": "deviation of your data. So that's NumPy, numerical \npython. SciPy, that stands for scientific python,  ",
    "start": "141660",
    "end": "154260"
  },
  {
    "text": "and it's not as if it's a competing library \nto NumPy which is just as well given that it  ",
    "start": "156180",
    "end": "163379"
  },
  {
    "text": "clearly has a better name, SciPy. You see \nSciPy is actually built on top of NumPy.  ",
    "start": "163380",
    "end": "171480"
  },
  {
    "text": "SciPy leverages NumPy arrays and extends its \ncapabilities. Now what does this mean in practice  ",
    "start": "172020",
    "end": "177120"
  },
  {
    "text": "well it means that SciPy can do everything \nthat NumPy can do and more. Some SciPy uses  ",
    "start": "177120",
    "end": "183060"
  },
  {
    "text": "the array data structure from NumPy and enhances \nit adding further functionality for more complex  ",
    "start": "183060",
    "end": "189540"
  },
  {
    "text": "and mathematical and scientific computing tasks. \nSo it's kind of like a NumPy+. So in essence  ",
    "start": "189540",
    "end": "197760"
  },
  {
    "text": "if you're using SciPy you're also using NumPy, \nbut the focus on SciPy really is on scientific  ",
    "start": "197760",
    "end": "202680"
  },
  {
    "text": "Computing, and that means support for routines \nlike numerical integration, interpolation,  ",
    "start": "202680",
    "end": "207840"
  },
  {
    "text": "things like optimization, things like linear \nalgebra, and things related to statistics,  ",
    "start": "207840",
    "end": "217080"
  },
  {
    "text": "and while some functions can only be performed \nin SciPy there are overlapping capabilities.  ",
    "start": "217920",
    "end": "225120"
  },
  {
    "text": "So take for example interpolation, which involves \nestimating unknown values that fall between known  ",
    "start": "225120",
    "end": "231900"
  },
  {
    "text": "values, both NumPy and SciPy have support for \nthis, but there are key differences. So let's  ",
    "start": "231900",
    "end": "237959"
  },
  {
    "text": "illustrate this with a simple example. So \nsuppose we have a set of known data points,  ",
    "start": "237960",
    "end": "242400"
  },
  {
    "text": "like we've got here, and we want to estimate the \nvalues at new points that fall between the known  ",
    "start": "242400",
    "end": "248760"
  },
  {
    "text": "data, so parts around here. Now with with NumPy \nwe can perform what is called a simple linear  ",
    "start": "248760",
    "end": "256320"
  },
  {
    "text": "a simple linear interpolation and that uses \nthe NP dot enter P function now this involves  ",
    "start": "258000",
    "end": "264900"
  },
  {
    "text": "fitting a straight line between each pair of known \npoints so like this and using this to estimate the  ",
    "start": "264900",
    "end": "276360"
  },
  {
    "text": "unknown values it's quick, it's efficient, and \nit's often good enough for simple use cases.  ",
    "start": "276360",
    "end": "282120"
  },
  {
    "text": "SciPy's interpolation capabilities though they go \nfar beyond this. So for example using SciPy we can  ",
    "start": "283140",
    "end": "290160"
  },
  {
    "text": "support something called cubic interpolation, \nor specifically cubic spline interpolation.  ",
    "start": "290160",
    "end": "297360"
  },
  {
    "text": "Now how this works is a little bit different it \ninvolves fitting a smooth curve through unknown  ",
    "start": "297960",
    "end": "303479"
  },
  {
    "text": "data points. So it look more like something \nlike this and this can provide a more accurate  ",
    "start": "303480",
    "end": "312300"
  },
  {
    "text": "estimate of the unknown values. specially \nwhen data has a complex non-linear structure.  ",
    "start": "312300",
    "end": "317099"
  },
  {
    "text": "NumPy's interpolation is straightforward and \nit's efficient. SciPy's is more flexible and  ",
    "start": "317640",
    "end": "322680"
  },
  {
    "text": "sophisticated. So where are the libraries \ntypically used. Well let's say you're working  ",
    "start": "322680",
    "end": "329100"
  },
  {
    "text": "in data science exploring a large data set to \nfind patterns and insights. With NumPy you can  ",
    "start": "329100",
    "end": "334380"
  },
  {
    "text": "quickly perform operations like calculating \nthe mean, or standard deviation of your data,  ",
    "start": "334380",
    "end": "338400"
  },
  {
    "text": "filtering for specific values, or transforming \nand reshaping your data. NumPy's capabilities  ",
    "start": "338400",
    "end": "344340"
  },
  {
    "text": "are also well suited to image processing. So \nlet's take a beautifully drawn image like this.  ",
    "start": "344340",
    "end": "350940"
  },
  {
    "text": "Images can be represented as \nmulti-dimensional arrays, like this,  ",
    "start": "352020",
    "end": "358379"
  },
  {
    "text": "and here those multimeter dimensional arrays are \nthe dimensions corresponding to say height width  ",
    "start": "360180",
    "end": "366120"
  },
  {
    "text": "and color channels. And with NumPy you can \nmanipulate these arrays to apply, filters,  ",
    "start": "366120",
    "end": "370500"
  },
  {
    "text": "Transformations, and other image processing \noperations. Now on the other hand when you  ",
    "start": "370500",
    "end": "375360"
  },
  {
    "text": "work requires more advanced and specialized \nmathematical or scientific functionality,  ",
    "start": "375360",
    "end": "379680"
  },
  {
    "text": "that's when SciPy comes into play. Take for \nexample the field of signal processing. SciPy  ",
    "start": "379680",
    "end": "386639"
  },
  {
    "text": "has a suite of functions in its signal module \nfor signal processing. So here's a signal,  ",
    "start": "386640",
    "end": "392100"
  },
  {
    "text": "and we can for example use its Fast \nFourier transform functions, or fft,  ",
    "start": "393360",
    "end": "400680"
  },
  {
    "text": "and what that can do is is it can convert the \nsignal from the time domain, into the frequency  ",
    "start": "401400",
    "end": "407759"
  },
  {
    "text": "domain, and that will let you analyze the signals \nfor different frequency components. So that might  ",
    "start": "407760",
    "end": "412680"
  },
  {
    "text": "look something like a bar chart format like this. \nIf you're designing an aircraft wing and you need  ",
    "start": "412680",
    "end": "420300"
  },
  {
    "text": "to find the shape that minimizes drag, while \nsatisfying constraints like maximum weight and  ",
    "start": "420300",
    "end": "425220"
  },
  {
    "text": "material strength, you could use the optimization \nroutines in SciPy to solve this problem.  ",
    "start": "425220",
    "end": "429660"
  },
  {
    "text": "And look, one key point that underpins the \nuse of both of these libraries is their  ",
    "start": "430200",
    "end": "434760"
  },
  {
    "text": "efficiency. Both NumPy and SciPy are designed \nto manage computational resources efficiently,  ",
    "start": "434760",
    "end": "440880"
  },
  {
    "text": "and that means they handle large data sets and \nperform complex operations while minimizing the  ",
    "start": "440880",
    "end": "446040"
  },
  {
    "text": "usage of your computer's memory and processing \npower. That's one of the reasons why they're  ",
    "start": "446040",
    "end": "450720"
  },
  {
    "text": "a go-to choice for number crunching tasks. \nIn short if you're working in a field that  ",
    "start": "450720",
    "end": "455520"
  },
  {
    "text": "involves data analysis or scientific computation \nchances are you'll be using NumPy, SciPy, or both",
    "start": "455520",
    "end": "463620"
  },
  {
    "text": "if you have any questions please drop us \na line below and if you want to see more  ",
    "start": "465900",
    "end": "470160"
  },
  {
    "text": "videos like this in the future please \nlike And subscribe thanks for watching",
    "start": "470160",
    "end": "474720"
  }
]