[
  {
    "start": "0",
    "end": "102000"
  },
  {
    "text": "Hi everyone. Today, let's talk about Terraform \nversus Ansible. Now in some of our videos past  ",
    "start": "240",
    "end": "5120"
  },
  {
    "text": "we've talked about Terraform in detail, Ansible, \nand even Infrastructure as Code, but I think a lot  ",
    "start": "5120",
    "end": "10240"
  },
  {
    "text": "of you might be wondering when to use Terraform \nand when to use Ansible. And in my view these  ",
    "start": "10240",
    "end": "15040"
  },
  {
    "text": "are actually two very complementary tools. So \nI believe you can use them together when you're  ",
    "start": "15040",
    "end": "19600"
  },
  {
    "text": "doing kind of your infrastructure automation. \nNow I think the first thing people think about  ",
    "start": "19600",
    "end": "24000"
  },
  {
    "text": "when they think about infrastructure automation \nis actually the step of provisioning, right. So  ",
    "start": "24000",
    "end": "28800"
  },
  {
    "text": "how do we actually get something up and running \nso that we can actually start you know doing our  ",
    "start": "28800",
    "end": "35040"
  },
  {
    "text": "application development and that kind of thing. \nThat's one thing Terraform is really good at. And  ",
    "start": "35040",
    "end": "39280"
  },
  {
    "text": "one of the reasons it's so good at it is because \nTerraform is declarative in nature. And this  ",
    "start": "39280",
    "end": "44879"
  },
  {
    "text": "is actually one of the key differences between \nTerraform and Ansible, but we'll get to that in  ",
    "start": "44880",
    "end": "48640"
  },
  {
    "text": "a minute. So let's see what a kind of a Terraform \nconfiguration would look like. So we want to  ",
    "start": "48640",
    "end": "53520"
  },
  {
    "text": "provision some resources let's say on a public \ncloud, we're going to do so in a declarative  ",
    "start": "53520",
    "end": "57680"
  },
  {
    "text": "way. So we'll start by saying maybe we want a \ndatabase service. So we'll say \"Create DB\" and  ",
    "start": "57680",
    "end": "63760"
  },
  {
    "text": "we'll have some configuration to go with it like \nyou know what kind of class it is and what size  ",
    "start": "63760",
    "end": "68880"
  },
  {
    "text": "that kind of thing. Maybe we also want to create \na Kubernetes Cluster and maybe even some VMs  ",
    "start": "68880",
    "end": "76720"
  },
  {
    "text": "in a VPC. So we'll first create the VPC and maybe \nsome more configuration to create the VMs. So  ",
    "start": "77760",
    "end": "83280"
  },
  {
    "text": "we'll kind of have our Terraform Config there. Now \nI mentioned it's declarative and this is awesome  ",
    "start": "83280",
    "end": "88240"
  },
  {
    "text": "because you know in these steps over here we've \ncreated some DB services and some other things. So  ",
    "start": "88240",
    "end": "92960"
  },
  {
    "text": "let's say we want to actually bind that database \nservice to our Kubernetes Cluster, so in in this  ",
    "start": "92960",
    "end": "98320"
  },
  {
    "text": "step right here we'll say \"Bind to Kubernetes\". \nNow in a procedural language everything would  ",
    "start": "98320",
    "end": "104720"
  },
  {
    "start": "102000",
    "end": "250000"
  },
  {
    "text": "go top to bottom. So it would start with the DB \nand realize hey I can't bind it to something that  ",
    "start": "104720",
    "end": "108800"
  },
  {
    "text": "doesn't exist, but since Terraform is declarative \nit'll actually say okay we can't do this one yet  ",
    "start": "108800",
    "end": "113840"
  },
  {
    "text": "let's create the Kubernetes Cluster first, also \ncreate the VPC Cluster kind of simultaneously  ",
    "start": "114400",
    "end": "120160"
  },
  {
    "text": "and then once that's ready then we'll create the \ndatabase because it's dependent on the Kubernetes  ",
    "start": "120160",
    "end": "125040"
  },
  {
    "text": "Cluster to bind to. This is essentially what's \ncalled an implicit dependency. You can also  ",
    "start": "125040",
    "end": "129600"
  },
  {
    "text": "do explicit dependencies where you can just \ntell a resource to wait until another one is  ",
    "start": "129600",
    "end": "133840"
  },
  {
    "text": "up and ready to go. So that's one of the key \nadvantages of Terraform is that it takes kind  ",
    "start": "134560",
    "end": "139599"
  },
  {
    "text": "of a declarative approach. So we've talked \nabout Terraform, let's kind of switch gears  ",
    "start": "139600",
    "end": "144080"
  },
  {
    "text": "here a little bit and talk about what Ansible is \nreally good at. And now Ansible's main kind of  ",
    "start": "144080",
    "end": "150240"
  },
  {
    "text": "purpose in my opinion is configuration management, \nthis includes things like application deployment,  ",
    "start": "150240",
    "end": "156080"
  },
  {
    "text": "but it can actually also do infrastructure \nprovisioning. Now one of the key things I'll  ",
    "start": "156080",
    "end": "160720"
  },
  {
    "text": "say about Ansible is that it's not necessarily \ndeclarative, but it supports declarative  ",
    "start": "160720",
    "end": "165600"
  },
  {
    "text": "resources, and it's not necessarily procedural \neither it's kind of, let's call it a hybrid.",
    "start": "165600",
    "end": "170880"
  },
  {
    "text": "Now in this sense, I basically mean that you \nknow Ansible supports much like Terraform kind  ",
    "start": "173120",
    "end": "178319"
  },
  {
    "text": "of configuration files to do your automation. \nSo for example, configuration management task  ",
    "start": "178320",
    "end": "183440"
  },
  {
    "text": "can be something like first you would start up \na VM, maybe it was stopped, maybe you need to  ",
    "start": "183440",
    "end": "189760"
  },
  {
    "text": "restart it, or stop it, or something like that. \nAnd some configuration so just telling it you  ",
    "start": "189760",
    "end": "194239"
  },
  {
    "text": "know just to start up. Then maybe you install \nsome application into the VM and some drivers,  ",
    "start": "194240",
    "end": "200480"
  },
  {
    "text": "maybe you need to install the runtimes and \nso you kind of have some configuration steps,  ",
    "start": "200480",
    "end": "204879"
  },
  {
    "text": "maybe you utilize the open source community where \nthey you know build modules and collections of  ",
    "start": "205440",
    "end": "209760"
  },
  {
    "text": "these things that make you allow you to get \nstarted quickly. And then maybe finally you  ",
    "start": "209760",
    "end": "214480"
  },
  {
    "text": "start the actual application. So these are all \nconfig management tasks, application deployment,  ",
    "start": "214480",
    "end": "220480"
  },
  {
    "text": "you're working with resources that are already \ncreated. Now the reason I say it's hybrid is  ",
    "start": "220480",
    "end": "225280"
  },
  {
    "text": "because although the resources are written kind of \nin a declarative fashion they're actually executed  ",
    "start": "225280",
    "end": "230720"
  },
  {
    "text": "top to bottom. So this is an Ansible playbook and \nAnsible would first start with the VM creation  ",
    "start": "230720",
    "end": "235840"
  },
  {
    "text": "and then installing the app and then starting the \napp. So if you had these in the wrong order things  ",
    "start": "235840",
    "end": "239920"
  },
  {
    "text": "wouldn't work correctly, so that's my view that's \nwhy I think you know Ansible is declarative and  ",
    "start": "239920",
    "end": "244720"
  },
  {
    "text": "procedural in a sense, it's kind of a hybrid of \nboth depending on how your modules are written.  ",
    "start": "244720",
    "end": "249280"
  },
  {
    "text": "So we've got our infrastructure, we've got our \nkind of configuration, now let's talk about you  ",
    "start": "250560",
    "end": "255680"
  },
  {
    "text": "know going back to Terraform what it looks like \nto actually start executing this configuration.  ",
    "start": "255680",
    "end": "260320"
  },
  {
    "text": "So first thing we'll do is you know generally \nyou want to do something called a Terraform Plan  ",
    "start": "261280",
    "end": "265680"
  },
  {
    "text": "which will enable you to see what will actually \ncome up before you actually execute the real API  ",
    "start": "265680",
    "end": "271919"
  },
  {
    "text": "calls. We'll do a Terraform Plan and \nyou know it'll spin up some of this,  ",
    "start": "271920",
    "end": "276000"
  },
  {
    "text": "a view of what's going to actually get created. \nSo the database, cluster, the VPC, and when it all  ",
    "start": "276560",
    "end": "281840"
  },
  {
    "text": "looks good you'll do a Terraform Apply that'll \nuse your API key and run the actual API calls  ",
    "start": "281840",
    "end": "287840"
  },
  {
    "text": "against your cloud provider, you know using your \nAPI key and spin up all of that infrastructure  ",
    "start": "287840",
    "end": "293440"
  },
  {
    "text": "and this is what Terraform is really good at. And \nthis brings me to my third thing about Terraform,  ",
    "start": "293440",
    "end": "299280"
  },
  {
    "text": "is that it's very much managed on state for \nlife cycle management. So one of the really  ",
    "start": "299280",
    "end": "304320"
  },
  {
    "text": "cool things here is for example, you know, \nonce you've created this infrastructure  ",
    "start": "304320",
    "end": "309200"
  },
  {
    "text": "if you go back and, you know, remove an entire \npiece of config for example to create VPC block,  ",
    "start": "309200",
    "end": "315280"
  },
  {
    "text": "if you remove that and you run a Terraform Apply \nagain, it'll actually remember from last time,  ",
    "start": "315280",
    "end": "320080"
  },
  {
    "text": "it'll say \"hey last time you had this, now \nyou've removed it\" and it'll go ahead and  ",
    "start": "320080",
    "end": "324080"
  },
  {
    "text": "remove that VPC for you. Now the difference with \nAnsible is that there is no kind of life cycle  ",
    "start": "324080",
    "end": "330159"
  },
  {
    "text": "management. Now essentially what this \nmeans is that if you wanted to delete  ",
    "start": "331840",
    "end": "336639"
  },
  {
    "text": "some step of this flow you can't just remove it \nyou would need to kind of mark it for deletion,  ",
    "start": "336640",
    "end": "341680"
  },
  {
    "text": "so you would need to kind of do a remove \napp step. Now that's that doesn't go to say  ",
    "start": "341680",
    "end": "346960"
  },
  {
    "text": "that you couldn't necessarily create an Ansible \nplaybook that automatically recognizes when you  ",
    "start": "346960",
    "end": "352080"
  },
  {
    "text": "remove some configuration and run the steps. The \npoint is with Terraform you get it automatically,  ",
    "start": "352080",
    "end": "356800"
  },
  {
    "text": "and with Ansible you kind of have to implement \nthat life cycle management into your actual code.  ",
    "start": "356800",
    "end": "361919"
  },
  {
    "text": "Another key point I want to make here is item \npotency, so that's essentially the ability to  ",
    "start": "362560",
    "end": "367520"
  },
  {
    "text": "run something multiple times and if nothing \nhas changed it won't actually run anything  ",
    "start": "367520",
    "end": "371199"
  },
  {
    "text": "run any new actions. So with Terraform you get \nthat automatically, so you can run this a thousand  ",
    "start": "371760",
    "end": "376160"
  },
  {
    "text": "times and the first time it'll create everything \nand the remaining 999 times it would actually just  ",
    "start": "376160",
    "end": "381680"
  },
  {
    "text": "say \"hey you already have it, nothing's changed\" \nand it wouldn't do anything. Now with Ansible  ",
    "start": "381680",
    "end": "387039"
  },
  {
    "text": "you could technically create item potent modules, \nbut it's not a requirement so that's something  ",
    "start": "387040",
    "end": "392160"
  },
  {
    "text": "that you as a developer have to consider when \nusing Ansible is, you know, see the community  ",
    "start": "392160",
    "end": "396880"
  },
  {
    "text": "modules you're using, the cloud provider modules \nand collections you're using, and make sure  ",
    "start": "396880",
    "end": "400960"
  },
  {
    "text": "they're idempotent and if they're not you know \nyou might have to do some additional work to get  ",
    "start": "400960",
    "end": "405199"
  },
  {
    "text": "them going. Now I think I've made a case for both \ncapabilities here but I want to talk a little bit  ",
    "start": "405200",
    "end": "411040"
  },
  {
    "start": "407000",
    "end": "571000"
  },
  {
    "text": "about the similarities between the two as well. \nFor one they both support heavy templating.  ",
    "start": "411040",
    "end": "416480"
  },
  {
    "text": "So this is great. So you can have kind of one \nsource of truth and then different configuration  ",
    "start": "417520",
    "end": "421599"
  },
  {
    "text": "files. So for example, if you wanted a dev, and \na test, and a prod environment, you could have  ",
    "start": "421600",
    "end": "426000"
  },
  {
    "text": "one source of truth and then kind of just switch \nout the variables that you're using to spin up  ",
    "start": "426000",
    "end": "430000"
  },
  {
    "text": "the different environments. So that's something \nneat that both environments support. Number two,  ",
    "start": "430000",
    "end": "434320"
  },
  {
    "text": "they're both open source as I mentioned, but the \nkey thing I want to mention is that, you know,  ",
    "start": "434320",
    "end": "439200"
  },
  {
    "text": "they've got a big kind of community as well. So \nfor Terraform they have the Terraform Registry  ",
    "start": "439200",
    "end": "444320"
  },
  {
    "text": "with modules being developed, providers to work \nwith the cloud providers, and and so they've got  ",
    "start": "444320",
    "end": "448880"
  },
  {
    "text": "this rich community to help, you get started \nvery quickly. And Ansible's the same, they've  ",
    "start": "448880",
    "end": "452640"
  },
  {
    "text": "got Ansible Galaxy with collections of modules \nso you can get started very quickly with existing  ",
    "start": "452640",
    "end": "457680"
  },
  {
    "text": "playbooks and that kind of thing. So they're \nsimilar in that sense that they've got this big  ",
    "start": "457680",
    "end": "462320"
  },
  {
    "text": "kind of community. And the last thing I'll say is \nagentless which is kind of more relevant in the  ",
    "start": "462320",
    "end": "467600"
  },
  {
    "text": "Ansible context than Terraform since they're it's \ndoing configuration management. You don't have to  ",
    "start": "467600",
    "end": "472080"
  },
  {
    "text": "install an agent on a VM somewhere, it's both of \nthese tools are kind of plug and play, easy to get  ",
    "start": "472080",
    "end": "476960"
  },
  {
    "text": "started whether on your local machine or somewhere \nin the cloud, these tools are both very similar in  ",
    "start": "476960",
    "end": "482319"
  },
  {
    "text": "that they're easy and quick to get started with. \nNow you might be wondering, you know, in the  ",
    "start": "482320",
    "end": "487280"
  },
  {
    "text": "beginning I said these tools are complementary, so \nhow would you use Ansible and Terraform together.  ",
    "start": "487280",
    "end": "491840"
  },
  {
    "text": "Well, there's a couple of approaches. You could \nstart with Terraform. Now as I mentioned Terraform  ",
    "start": "492960",
    "end": "497759"
  },
  {
    "text": "is really good at provisioning. So you could \nhave a Terraform configuration that spins up some  ",
    "start": "497760",
    "end": "501760"
  },
  {
    "text": "infrastructure and then once that infrastructure \nis ready you can actually use Terraform to call  ",
    "start": "501760",
    "end": "506320"
  },
  {
    "text": "Ansible to do configuration management on the \nresources you spun up. So starting the VM,  ",
    "start": "506320",
    "end": "511840"
  },
  {
    "text": "and installing an app, and that kind of thing. You \ncan also take the other approach and start with  ",
    "start": "511840",
    "end": "515919"
  },
  {
    "text": "Ansible, and in the first step of your Ansible \nplaybook call Terraform to spin up infrastructure  ",
    "start": "515920",
    "end": "521680"
  },
  {
    "text": "and then pick up where Terraform leaves off, \ntake that infrastructure which is, you know,  ",
    "start": "522240",
    "end": "526640"
  },
  {
    "text": "in some inventory, an Ansible inventory, \nand run the Ansible actions on that.  ",
    "start": "526640",
    "end": "531120"
  },
  {
    "text": "So in essence Ansible and Terraform can work \nreally well together because Terraform is  ",
    "start": "531680",
    "end": "535839"
  },
  {
    "text": "very good at infrastructure provisioning \nbut falls short where Ansible comes in  ",
    "start": "535840",
    "end": "540720"
  },
  {
    "text": "with configuration management. And I think \ntogether, you know, both open source world-class  ",
    "start": "540720",
    "end": "546319"
  },
  {
    "text": "infrastructure automation tools, I think together \nyou can really create a complete infrastructure  ",
    "start": "546320",
    "end": "551120"
  },
  {
    "text": "automation story. I want to thank you for joining \nme for this video today. If you want to see  ",
    "start": "551120",
    "end": "556080"
  },
  {
    "text": "what IBM Cloud is doing in the infrastructure \nautomation space be sure to check out IBM Cloud  ",
    "start": "556080",
    "end": "560800"
  },
  {
    "text": "Schematics. If you have any questions or you like \nthe video, be sure to drop a comment below and a  ",
    "start": "560800",
    "end": "565600"
  },
  {
    "text": "like. Be sure to subscribe and stay tuned for \nmore videos like this in the future. Thank you.",
    "start": "565600",
    "end": "570959"
  }
]