[
  {
    "text": "Have you ever had a tremendous amount of data in your VectorDB, and you're using that for retrieval-augmented generation?",
    "start": "220",
    "end": "6200"
  },
  {
    "text": "But the context you're getting to give to your LLM to produce those great results is kind of lacking",
    "start": "6660",
    "end": "12379"
  },
  {
    "text": "because it's pulling in different data that shouldn't really be pulled in with your query?",
    "start": "12380",
    "end": "17059"
  },
  {
    "text": "Well, today I'm gonna show you how to seamlessly integrate multiple AI agents into your application to combat this kind of problem.",
    "start": "17860",
    "end": "23859"
  },
  {
    "text": "We will walk through a practical example that covers query categorization, context retrieval from a VectorDB,",
    "start": "24560",
    "end": "30417"
  },
  {
    "text": "and natural language response generation, all using this multi-agent approach.",
    "start": "30417",
    "end": "35530"
  },
  {
    "text": "This session is designed to give you a clear step-by-step guide on working with agents in your projects.",
    "start": "36370",
    "end": "41669"
  },
  {
    "text": "Let's dive in and explore how you can leverage these tools to build smarter applications. So in the description of the video, you should have a link to this repo.",
    "start": "42370",
    "end": "50790"
  },
  {
    "text": "The first thing we're gonna do is just clone down the repo to our local machine.",
    "start": "51650",
    "end": "54900"
  },
  {
    "text": "Okay. And let's go into the repo and then into the UI directory.",
    "start": "58490",
    "end": "63890"
  },
  {
    "text": "So if you look at the structure of the application, we're gonna have an API, which is what we're gonna be working on today.",
    "start": "64510",
    "end": "70010"
  },
  {
    "text": "And then we have a UI, which we're not gonna work on, but that's what's gonna render what we're doing to your browser.",
    "start": "70310",
    "end": "75629"
  },
  {
    "text": "And so we're gonna go into the UI, and we're gonna install the dependencies. So the first thing is just install the root dependencies, and once that's completed, we're going to run a setup script.",
    "start": "76150",
    "end": "85949"
  },
  {
    "text": "So, the UI, even though we're not working on it, the UI is made with React TypeScript,",
    "start": "93230",
    "end": "98389"
  },
  {
    "text": "and it has an Express TypeScript server, and we're using something called Carbon components.",
    "start": "98389",
    "end": "102920"
  },
  {
    "text": "And I just wanna highlight Carbon components for a second. So if you search Carbon Design React, it's gonna bring you to the docs page.",
    "start": "103550",
    "end": "109590"
  },
  {
    "text": "And this is where I get all like the components to put into the UI. It's super easy, especially if someone who's not a particularly adept front-end developer.",
    "start": "110650",
    "end": "119909"
  },
  {
    "text": "It just makes it super, super easy and they look good. And you know, they have the code, everything you need.",
    "start": "120190",
    "end": "125870"
  },
  {
    "text": "So my suggestion is, even if we're not working on the UI today, go look at Carbon Design, look at what we can do and maybe change the application when you're done with it.",
    "start": "125960",
    "end": "134139"
  },
  {
    "text": "Alright, so we're gonna wait for the dependencies to install and we'll be right back. Okay, the dependencies have been installed.",
    "start": "134660",
    "end": "141478"
  },
  {
    "text": "One last thing to do within the UI is we're gonna copy the client's env example into, back into the client, and we're going to create an env.",
    "start": "141940",
    "end": "150771"
  },
  {
    "text": "And we're doing the same thing for the server. Copy that env example and place it right back as .env in the server.",
    "start": "151100",
    "end": "157699"
  },
  {
    "text": "Something we also could do, if we want to go into client.env, we've added a way for you to brand the application after/if you want to make something your own.",
    "start": "158580",
    "end": "166739"
  },
  {
    "text": "So we have a branding and an application name. So for this one, we're going to say Agents in Action!",
    "start": "167100",
    "end": "172894"
  },
  {
    "text": "Okay. So now we're done with the dependencies, and we're done totally with the UI today. So let's go back to the root and then let's head over to the API.",
    "start": "177510",
    "end": "185149"
  },
  {
    "text": "So the API is written in Python. So let's create a virtual environment.",
    "start": "185970",
    "end": "190990"
  },
  {
    "text": "We'll name that aiagentic. And once that's done, let's activate.",
    "start": "192410",
    "end": "198009"
  },
  {
    "text": "Let's activate the virtual environment.",
    "start": "205280",
    "end": "210103"
  },
  {
    "text": "And now we're gonna install all the dependencies. So this is gonna take a little while.",
    "start": "210440",
    "end": "216430"
  },
  {
    "text": "We're installing CrewAI. We're installing watsonx.ai, a ton of dependencies. And so, once this is completed, we'll continue along with the tutorial.",
    "start": "216870",
    "end": "224650"
  },
  {
    "text": "Okay, so now that the dependencies have been installed, we have to just copy the .env.example and paste it into .env in the API.",
    "start": "225030",
    "end": "235169"
  },
  {
    "text": "Let's take a look at what's in that env. Because we're using watsonx.ai, we need to have the connection strings for, to connect to watsonx.ai.",
    "start": "235590",
    "end": "242410"
  },
  {
    "text": "So we're gonna head over to Cloud. And if you go into your resource list, just open up your Watson Studio and go into IBM watsonx.",
    "start": "243900",
    "end": "251559"
  },
  {
    "text": "And it's just gonna log us in. And we're gonna head over to Prompt Lab. Now, I'm sure there's a better way of getting this information than the way I do it.",
    "start": "254570",
    "end": "263129"
  },
  {
    "text": "But the way do it is I just go to Promp Lab. At the top right, we have a view code, and it shows you a cURL command.",
    "start": "263190",
    "end": "268509"
  },
  {
    "text": "And it has all the, most of the stuff that we need in order to make that configuration with our API. So grab from the cURl the base URL and paste it here in the WATSON_URL.",
    "start": "268810",
    "end": "278037"
  },
  {
    "text": "And we go back, and we grab the project ID.",
    "start": "281070",
    "end": "283489"
  },
  {
    "text": "Just copy and paste that.",
    "start": "286260",
    "end": "287360"
  },
  {
    "text": "And then finally, let's go back to cloud.ibm. We're gonna go at the very top.",
    "start": "293450",
    "end": "298650"
  },
  {
    "text": "You're gonna have a Manage and you're gonna wanna go to the Access (IAM). And when we get there, on the left-hand side, you're going to see something called API keys.",
    "start": "298650",
    "end": "307050"
  },
  {
    "text": "Let's create a new one. Call it AGENTIC and create.",
    "start": "307070",
    "end": "312940"
  },
  {
    "text": "So let's just copy that and put it right here.",
    "start": "314500",
    "end": "318059"
  },
  {
    "text": "And that's it.\nNow our API is set up. So the next thing we wanna do is check out into a new branch.",
    "start": "320154",
    "end": "328179"
  },
  {
    "text": "Alright, so let's check out our first branch. It's gonna be a one-step.",
    "start": "329120",
    "end": "334314"
  },
  {
    "text": "And what we wanna do is we wanna start up all our services. We have three services. Remember we have the FastAPI, the React UI and the Express Server.",
    "start": "337970",
    "end": "346329"
  },
  {
    "text": "So let's first start up the. Wait, we have to go into the API directory first, and then we could run our uvicorn command.",
    "start": "346510",
    "end": "355230"
  },
  {
    "text": "We're just gonna run the uvcorn server up, reload, and we're gonna start our FastAPI.",
    "start": "355790",
    "end": "359629"
  },
  {
    "text": "Also, let's have two more windows, because we're gonna go back",
    "start": "361310",
    "end": "366569"
  },
  {
    "text": "to the UI, and we're gonna start up the client, and then, we are gonna start up the server.",
    "start": "366569",
    "end": "373850"
  },
  {
    "text": "And all these commands are in the repo, so you can just copy and paste them. So we're just waiting a second for Uvicorn, for the FastAPI to get all ready,",
    "start": "380360",
    "end": "389159"
  },
  {
    "text": "and we'll head over to the browser, and we could already see what the UI's gonna look like.",
    "start": "389159",
    "end": "393940"
  },
  {
    "text": "Beautiful. It's a chatbot. You have a chat window and a couple buttons, but what it's gonna do on the backend is gonna be pretty cool, I think.",
    "start": "396860",
    "end": "402389"
  },
  {
    "text": "So if you go to your API directory, there's gonna be a couple of folders that you're gonna be interested in and a questions.txt that I've been using.",
    "start": "403060",
    "end": "410919"
  },
  {
    "text": "So let me copy and paste this into our chat window. And what we're gonna wanna do is when we hit send,",
    "start": "413010",
    "end": "420653"
  },
  {
    "text": "we're gonna want the backend to categorize that query, grab the correct data from the correct collection of VectorDB and ChromaDB.",
    "start": "420653",
    "end": "429480"
  },
  {
    "text": "And then we're gonna want to pass that to a customized prompt and return a nice response.",
    "start": "430620",
    "end": "435000"
  },
  {
    "text": "Currently, it's just gonna say this will be generated by our multi-agent process and the category is something cool, but it will be something cool once we set it up.",
    "start": "436020",
    "end": "443759"
  },
  {
    "text": "So let's go and run the first script that we have.",
    "start": "444560",
    "end": "449049"
  },
  {
    "text": "So if you look in API scripts, and you look at the process document script. This is how we're going to create our ChromaDB uh VectorDB, right?",
    "start": "450070",
    "end": "460389"
  },
  {
    "text": "We have a directory called docs, and in that, we have three text files, one called accounting, billing and technical.",
    "start": "461630",
    "end": "468729"
  },
  {
    "text": "And what I'm trying to show here is that this is, imagine you have a tremendous amount documentation.",
    "start": "469470",
    "end": "474149"
  },
  {
    "text": "And some of those, when we query them in a VectorDB, the cosine similarity distance is gonna be pretty close for stuff that might not be relevant.",
    "start": "474690",
    "end": "482190"
  },
  {
    "text": "So we isolate topics, right? So we have an account, we have a technical, we have the billing, and I'm just trying to recreate that locally.",
    "start": "482770",
    "end": "489290"
  },
  {
    "text": "Something very simple. So if you look at the script, all it's doing is it's saying okay, what's the file? It's gonna loop through all the files and docs.",
    "start": "489310",
    "end": "495169"
  },
  {
    "text": "What's the file name? Create a new collection with that file name and insert the embeddings for that file into that collection.",
    "start": "495170",
    "end": "502709"
  },
  {
    "text": "So let's run that script.",
    "start": "503370",
    "end": "504630"
  },
  {
    "text": "And you'll see. First, it's gonna say okay, is there any documents? No existing collection found. So it's going to create three new ones.",
    "start": "509010",
    "end": "515349"
  },
  {
    "text": "And we're going to have account, billing and technical. Before we could do any of that, we have to first categorize the query.",
    "start": "515350",
    "end": "523009"
  },
  {
    "text": "So this is where we're gonna create our very first agent. It's going to be the categorization agent.",
    "start": "523309",
    "end": "527730"
  },
  {
    "text": "So the route we're looking at that we're gonna change is called the agentic route. And here, you can see in the docstring I have what each of the agents are gonna do.",
    "start": "532420",
    "end": "540980"
  },
  {
    "text": "The first one is gonna be the query categorization, then we're gonna have the context retrieval, and then we're gonna have the response generation.",
    "start": "541020",
    "end": "547220"
  },
  {
    "text": "And these are all gonna be agents. So let's bring in our agent framework, which is CrewAI.",
    "start": "547300",
    "end": "553220"
  },
  {
    "text": "So we're to say, from crewai, import the first class we're gonna bring in is agent.",
    "start": "553960",
    "end": "560157"
  },
  {
    "text": "Then we're gonna bring in the task. We're gonna bring in the crew. We're gonna bring in a process. And we're gonna bring in LLM.",
    "start": "560620",
    "end": "565089"
  },
  {
    "text": "So let's go back. And you can see in the first docstring. It's an LLM-powered agent.",
    "start": "565750",
    "end": "572149"
  },
  {
    "text": "So this is where we start connecting watsonx.ai to the CrewAI agentic framework.",
    "start": "572190",
    "end": "577190"
  },
  {
    "text": "So let's create our first LLM.",
    "start": "577750",
    "end": "579339"
  },
  {
    "text": "And you look at the docs. The only thing we're really concerned with from this is just the model. We're gonna use a watsonx.ai model, temperature, max tokens, and then all the connection strings.",
    "start": "584240",
    "end": "593659"
  },
  {
    "text": "So if we look in the server.py, we have a list of available models that you could use from watsonx.ai.",
    "start": "594620",
    "end": "601124"
  },
  {
    "text": "So I'm gonna use the Granite 3.8 billion. So let's bring that in.",
    "start": "601780",
    "end": "607140"
  },
  {
    "text": "And we just have to append watsonx to the front of it. Then we're gonna set the temperature.",
    "start": "609740",
    "end": "615870"
  },
  {
    "text": "Now this is from trial and error, but 0.7 works well. And the max tokens is 50.",
    "start": "615870",
    "end": "621370"
  },
  {
    "text": "Because again, all this is doing is just categorizing a query, right? We're not doing any massive return or anything like that.",
    "start": "621410",
    "end": "628070"
  },
  {
    "text": "So the next thing we have to do is we're gonna bring in the connection string for Watson.",
    "start": "628410",
    "end": "635029"
  },
  {
    "text": "So we're gonna need the API key, the project ID and the URL. So let's say URL is going to equal OS And you get...",
    "start": "636490",
    "end": "643489"
  },
  {
    "text": "the key. Let's just paste that in. And then we're going to have the API key, where you get that from our env.",
    "start": "645090",
    "end": "655707"
  },
  {
    "text": "And then finally, we're gonna get the project ID. We're just gonna, again, just bring it in.",
    "start": "659810",
    "end": "666029"
  },
  {
    "text": "So let's bring it into the the CrewAI LLM class. So we're gonna have the base URL is gonna be the URL.",
    "start": "671570",
    "end": "677710"
  },
  {
    "text": "The API key is gonna the API key, and the project ID is gonna to be the project ID.",
    "start": "678330",
    "end": "684110"
  },
  {
    "text": "So now we have to create our first agent. Let's do it. We're gonna name him categorization agent, a very clever name.",
    "start": "687870",
    "end": "695690"
  },
  {
    "text": "And if we look at the docs again, we can see exactly what we're gonna be doing here.",
    "start": "698370",
    "end": "703029"
  },
  {
    "text": "So the top three are particularly cool, right, to me. You have a role, a goal, and a backstory.",
    "start": "703650",
    "end": "709730"
  },
  {
    "text": "If you go to the CrewAI docs, you have really, you know, they are really good about",
    "start": "710290",
    "end": "716230"
  },
  {
    "text": "explaining exactly what all those attributes do, but I just wanna read them to you. So the role is defining the agent's function and its expertise within the crew.",
    "start": "716231",
    "end": "725470"
  },
  {
    "text": "Remember, it's a crew of agents. The goal is we're gonna, it gives you the clear defined goal of what it's going to do.",
    "start": "725630",
    "end": "731480"
  },
  {
    "text": "And then the backstory is great. It's just provides context and personality to the agent, which I find very, very cool.",
    "start": "731520",
    "end": "737299"
  },
  {
    "text": "So let's start with the, uh, let's start with the role.",
    "start": "738180",
    "end": "744450"
  },
  {
    "text": "And so for the categorization agent, the role is gonna, the one I've come up with is Collection Selector.",
    "start": "745720",
    "end": "754577"
  },
  {
    "text": "Now, if you've worked with LLMs, you know a lot of these, and this probably looks like prompt engineering to you because it kind of is.",
    "start": "755480",
    "end": "762720"
  },
  {
    "text": "It's just trial and error. This is what worked out for me. So I gave it the role of a collection selecter because it's selecting the collection.",
    "start": "763220",
    "end": "769130"
  },
  {
    "text": "The goal is to analyze. It's going to analyze the user queries and determine the most relevant ChromaDB collection.",
    "start": "769500",
    "end": "783789"
  },
  {
    "text": "And then, we're gonna give it a backstory. He is an expert in query classification.",
    "start": "785670",
    "end": "792070"
  },
  {
    "text": "And he routes questions to the correct domain.",
    "start": "795190",
    "end": "797140"
  },
  {
    "text": "Alright. Finally, we're gonna do, add a couple of the other things that we need. Verbose, I'm going to set to true because we want to see what it's up to in the logs.",
    "start": "802030",
    "end": "809570"
  },
  {
    "text": "Allow delegation. So this is interesting. Remember, we're gonna have multiple agents, and they could all have different goals and different expertises.",
    "start": "810000",
    "end": "819390"
  },
  {
    "text": "And it can make the decision on what it wants to do based on that, right? Like, okay, this is not for me, let me send it to another agent.",
    "start": "819510",
    "end": "824750"
  },
  {
    "text": "It's gonna allow it to delegate. But in our case, we don't, we're just going sequentially, where we have three agents.",
    "start": "824750",
    "end": "829826"
  },
  {
    "text": "We need them to do exactly what we want them to. So we turn delegation off.",
    "start": "829826",
    "end": "834090"
  },
  {
    "text": "And in line with that, there's also something called max iterations. So it defaults to 20.",
    "start": "835150",
    "end": "840808"
  },
  {
    "text": "But in our case, again, like if something is not working, because these are pretty simple tasks, if something's not working, it's just gonna try to, try it over and over and again.",
    "start": "841230",
    "end": "848789"
  },
  {
    "text": "We just have to fix the code, at least in my experience of what's happening. And finally, we have to give it its brain, right?",
    "start": "848990",
    "end": "855230"
  },
  {
    "text": "We're gonna give it the categorization alarm. This is its reasoning capability. This is how it's gonna actually do what it needs to do.",
    "start": "855230",
    "end": "861050"
  },
  {
    "text": "And that's the categorization alarm that's using Granite. So now we have an agent who has a brain and has a role and has a backstory and has a whole life story.",
    "start": "861110",
    "end": "869469"
  },
  {
    "text": "We have to it a task. We are going to ask the agent to do something. So let's create our task.",
    "start": "869750",
    "end": "875139"
  },
  {
    "text": "And again, let's look at the docs. So the things we're gonna be concerned with, obviously, is agent. We have to assign this task to our categorization agent.",
    "start": "882020",
    "end": "888440"
  },
  {
    "text": "Description, which is gonna be really just a prompt. And then output JSON, which is really important for what we're going to do,",
    "start": "889720",
    "end": "896897"
  },
  {
    "text": "because we're gonna send this first agent's response directly back to the UI. So it has to be formatted in a particular way.",
    "start": "896897",
    "end": "903500"
  },
  {
    "text": "So I'm just gonna copy and paste the description, because it's just a, it's a prompt, right? Like if anyone's used prompts before, this took me a while to get correct.",
    "start": "904500",
    "end": "912181"
  },
  {
    "text": "But you can see exactly what I mean, right? This is a prompt. We're saying, look at the query and determine the best category.",
    "start": "915840",
    "end": "921370"
  },
  {
    "text": "You must only return one word. Because again, we're gonna be using this later down the line as the classification agent.",
    "start": "921450",
    "end": "926980"
  },
  {
    "text": "And then we give it category definitions, and we're really kind of broad with it because we want to give agency to the agent.",
    "start": "927430",
    "end": "933009"
  },
  {
    "text": "So we're just saying, okay, this is what a technical query could look like. This is what billing... We're giving that. We're giving the agent agency here.",
    "start": "933390",
    "end": "939609"
  },
  {
    "text": "And then finally, I just really want to hammer home: please, just only one word from this list.",
    "start": "939890",
    "end": "943823"
  },
  {
    "text": "And then, we also have a expected output. And this is important because we need something explicit.",
    "start": "945550",
    "end": "953289"
  },
  {
    "text": "So we want a JSON object with category field, and it has to either be technical, billing or account.",
    "start": "953530",
    "end": "958110"
  },
  {
    "text": "The agent we're assigning to it obviously is the categorization agent. And finally, the last thing that I mentioned was the output JSON.",
    "start": "958630",
    "end": "965450"
  },
  {
    "text": "And I find this really nice. So the output JSON takes in a Pydantic model. So let me copy and paste the Pydantic model I have.",
    "start": "966870",
    "end": "973549"
  },
  {
    "text": "And I'll show you what I did.",
    "start": "974760",
    "end": "975910"
  },
  {
    "text": "Paste it in here. So we have a category response. I'm expecting a JSON object with a category field, and the value is going to be either technical, billing or account.",
    "start": "980640",
    "end": "990583"
  },
  {
    "text": "Now I added this description because I have a feeling that the agent is actually looking at the description of these models before it's responding.",
    "start": "990680",
    "end": "997100"
  },
  {
    "text": "I not don't don't quote me on it but that's what I think it's doing. So I added it, and it worked well.",
    "start": "997460",
    "end": "1003700"
  },
  {
    "text": "So from all I can tell it is working the way it's supposed to be working. Alright, so now we have a agent who is powered by our LLM and has a task to follow.",
    "start": "1004640",
    "end": "1013120"
  },
  {
    "text": "So let's create the first crew.",
    "start": "1013620",
    "end": "1014940"
  },
  {
    "text": "You look at the docs here, we have tasks, we have agents, we're going have, we're gonna use the process, and we're gonna have verbostics.",
    "start": "1019500",
    "end": "1026859"
  },
  {
    "text": "We want to have some responses. So first thing to first is let's add the agent.",
    "start": "1026880",
    "end": "1031880"
  },
  {
    "text": "And right now, we only have one. Then we have to add the tasks.",
    "start": "1037069",
    "end": "1041589"
  },
  {
    "text": "And that's gonna be the categorization task. Remember, this is gonna be a crew. There's gonna a couple of agents here.",
    "start": "1046380",
    "end": "1051440"
  },
  {
    "text": "And then we're gonna have verbose. We're just gonna set it to true again because we wanna see what it's doing. And then finally, we have our process.",
    "start": "1051560",
    "end": "1057260"
  },
  {
    "text": "And the process is going to be sequential. Because if you look at the docstring; we're going just step by step.",
    "start": "1058100",
    "end": "1064420"
  },
  {
    "text": "So now that we have the crew, let's have the crew kick off.",
    "start": "1064900",
    "end": "1067960"
  },
  {
    "text": "And we're gonna call the kickoff method from the crew. And if you remember from the category response, we're expecting it to be a JSON object with category as a field.",
    "start": "1073370",
    "end": "1082650"
  },
  {
    "text": "So what we're going to do is we're gonna, instead of sending back something cool to the UI,",
    "start": "1083590",
    "end": "1091803"
  },
  {
    "text": "we're going to grab the category result and we're going to try to grab that category from the response.",
    "start": "1091803",
    "end": "1099240"
  },
  {
    "text": "Make sure nothing broke.",
    "start": "1100100",
    "end": "1101150"
  },
  {
    "text": "Looks good.\nWe have the category result. Let's test it out. So let's copy and paste what we already sent.",
    "start": "1109550",
    "end": "1116841"
  },
  {
    "text": "And hopefully it returns back category something, category technical. Perfect. So if we look at the logs, we can see exactly what it's doing, right?",
    "start": "1118720",
    "end": "1127240"
  },
  {
    "text": "We are using the collection selector, that first agent. You can see the test that we're giving it. We pass in that user query, the one that we sent from the UI.",
    "start": "1127840",
    "end": "1135059"
  },
  {
    "text": "And then we get the final answers as exactly the structure that we were looking for. So the UI could ingest it and render it nicely.",
    "start": "1135300",
    "end": "1140979"
  },
  {
    "text": "Alright, so now that we have the basic categorization and agent in place, let's move on and enhance our pipeline.",
    "start": "1142040",
    "end": "1148279"
  },
  {
    "text": "So let's just commit our changes, and let's check out the second-step branch.",
    "start": "1148820",
    "end": "1156901"
  },
  {
    "text": "Alright, perfect.\nNothing broke. Great  \nOkay, so the next step here, if we go to the docstring, is now to retrieve that data from that VectorDB, right?",
    "start": "1156901",
    "end": "1169142"
  },
  {
    "text": "Let's make it. The only, so we're gonna do the same process, we're gonna copy and paste the categorization LLM.",
    "start": "1170000",
    "end": "1176289"
  },
  {
    "text": "We're gonna create a new LLM, and this is gonna be the retriever LLM.",
    "start": "1176650",
    "end": "1180278"
  },
  {
    "text": "It's going to necessitate more tokens. Like I said, it's 1,000, but everything else is going to stay the same.",
    "start": "1184440",
    "end": "1189000"
  },
  {
    "text": "And then, we're just going to grab two more: an agent and another task.",
    "start": "1189460",
    "end": "1195450"
  },
  {
    "text": "So this is the retriever agent and the retriever task. I'm going to copy and paste this from our notes, and I'll explain exactly what they're doing.",
    "start": "1195550",
    "end": "1202849"
  },
  {
    "text": "There is going to be a significant difference here, and you'll see the error right away is that it's using a tool, and I'll explain what we're doing there.",
    "start": "1204270",
    "end": "1211150"
  },
  {
    "text": "So the retriever agent has a job, right? It's going to take that category that it's receiving from the categorization agent,",
    "start": "1211670",
    "end": "1219349"
  },
  {
    "text": "and it's going to pass it to a function that is going to query our VectorDB.",
    "start": "1219349",
    "end": "1225479"
  },
  {
    "text": "And so that function is going to be that tool. So let's create our first tool.",
    "start": "1226620",
    "end": "1231140"
  },
  {
    "text": "We're going to name it the query collection tool.",
    "start": "1233690",
    "end": "1238319"
  },
  {
    "text": "Let's define it.",
    "start": "1238990",
    "end": "1239990"
  },
  {
    "text": "It's going to take. What does it take? It's only taking the category, and it's gonna take the, it's going take the query to embed.",
    "start": "1245790",
    "end": "1254709"
  },
  {
    "text": "So, query, string, and it's gonna return a dictionary.",
    "start": "1255710",
    "end": "1261429"
  },
  {
    "text": "Perfect. Instead of docstring, this is going to be the tool to query ChromaDB",
    "start": "1263610",
    "end": "1269163"
  },
  {
    "text": "based on category and return relevant documents.",
    "start": "1269163",
    "end": "1278179"
  },
  {
    "text": "Now if you've ever worked with RAG, if you've ever worked with VectorDB, the functionality of this is gonna be very familiar, right?",
    "start": "1279480",
    "end": "1286099"
  },
  {
    "text": "So let me just copy and paste what that actual tool is gonna do.",
    "start": "1286420",
    "end": "1288970"
  },
  {
    "text": "We're using the watsonx.ai embeddings. Don't worry, like if you don't have that, you could use your own embeddings model if you have it locally.",
    "start": "1291850",
    "end": "1297290"
  },
  {
    "text": "My computer is not capable of it at the moment. The interesting thing here, though, is this part.",
    "start": "1297290",
    "end": "1303789"
  },
  {
    "text": "We're grabbing the category that was returned by the categorization task, and we're using that to query the VectorDB, which is",
    "start": "1304710",
    "end": "1312246"
  },
  {
    "text": "fascinating because you're just saying this is what you do and the LLM is doing it, the agents are doing it.",
    "start": "1312246",
    "end": "1317710"
  },
  {
    "text": "So that is very, very cool to me. So now that we have that, we have that tool, you can see what the",
    "start": "1318110",
    "end": "1323778"
  },
  {
    "text": "retriever agent is doing, and we give it the task, you know, we're passing in that query from the route.",
    "start": "1323779",
    "end": "1328871"
  },
  {
    "text": "We have an expected output. We're not worried too much about this because we're not ever gonna send back the context",
    "start": "1329220",
    "end": "1334877"
  },
  {
    "text": "to the UI, so we're not really enforcing that output JSON. But the only other thing I want to mention here is that we had to add a context.",
    "start": "1334877",
    "end": "1344419"
  },
  {
    "text": "And context is: We're giving access to that categorization tasks, like what it's output was.",
    "start": "1344420",
    "end": "1351040"
  },
  {
    "text": "So it knew that's how we're getting that category and that's how we're telling the agent, look at this category, you have the query, pass it, use this function, and then call it and return back the context.",
    "start": "1351180",
    "end": "1361018"
  },
  {
    "text": "So for us now, all we're gonna do is we're going to add the new agent to our crew.",
    "start": "1361880",
    "end": "1367525"
  },
  {
    "text": "Welcome.\nAnd we're gonna add the new task.",
    "start": "1368515",
    "end": "1373279"
  },
  {
    "text": "Process is still gonna be sequential. This time, let's just remove the category, like actually grabbing it, because we're not gonna be returning that anymore.",
    "start": "1374660",
    "end": "1382480"
  },
  {
    "text": "So we'll just say, bye for now. But what we are gonna do is we're gonna print out that category result.",
    "start": "1383080",
    "end": "1391839"
  },
  {
    "text": "Okay. Make sure everything comes up. Good. We're gonna print out that category result and we're gonna see exactly what happens when we",
    "start": "1399880",
    "end": "1407864"
  },
  {
    "text": "send over that request, that query from here. Hopefully, we'll watch the new agent do exactly what we want it to do.",
    "start": "1407864",
    "end": "1416599"
  },
  {
    "text": "Okay.\nLet's get there. Okay, so we're okay. It already has the correct category. So now that it's gonna take the collection...",
    "start": "1419080",
    "end": "1423971"
  },
  {
    "text": "Look at that. We got the result from the RAG. It used that category and passed it to our ChromaDB collection.",
    "start": "1424580",
    "end": "1430640"
  },
  {
    "text": "So we got that collection and then we queried it. And now it returns back all the context for that query by basically by itself.",
    "start": "1430880",
    "end": "1437394"
  },
  {
    "text": "We just told it. Yeah, and so, we have, you could see almost exactly what we're gonna send to the final agent, right?",
    "start": "1437480",
    "end": "1443699"
  },
  {
    "text": "We're gonna send it the category because we want to return it to a UI. We're sending it the query. And now we have the context from our VectorDB to augment, retrieval, augment and generate our response.",
    "start": "1443900",
    "end": "1458539"
  },
  {
    "text": "I know I think that is particularly fascinating. So that's just a way that you could use tools with agents.",
    "start": "1459400",
    "end": "1466200"
  },
  {
    "text": "And that was really just our retriever agent, right? Like we're able to use that function and tool in this case means like we're using a function.",
    "start": "1466470",
    "end": "1473669"
  },
  {
    "text": "We're giving an agent tools to use a function and that is very, very cool to me. So we're done with the retriever agent and we're gonna move on to the generation agent.",
    "start": "1474110",
    "end": "1484071"
  },
  {
    "text": "And this is the final step of the application. So let's just commit our changes.",
    "start": "1484170",
    "end": "1487909"
  },
  {
    "text": "And let's check out the final step.",
    "start": "1491290",
    "end": "1492890"
  },
  {
    "text": "Let's go back to our API. And if we look back at our docstring, we know what the final step is.",
    "start": "1498920",
    "end": "1504559"
  },
  {
    "text": "We're going to.... We're going to create an agent that creates a nice response for the user.",
    "start": "1505280",
    "end": "1511800"
  },
  {
    "text": "Basically, everything that we just did, we're gonna do one more time. And I really like this, this uh, this pattern, right?",
    "start": "1513540",
    "end": "1521760"
  },
  {
    "text": "Like I've creating their own LLMs for each of the agents. I find that to be very, very nice, because we could set different,",
    "start": "1521760",
    "end": "1529042"
  },
  {
    "text": "for us, we didn't really set any, the only thing we're changing is the MAC tokens. Obviously, we want the response to have more leeway.",
    "start": "1529042",
    "end": "1534299"
  },
  {
    "text": "But other than that, we're just, like, we could make it drastically different. Each LLM could be, that we power, can have a different model if we're using watsonx.ai.",
    "start": "1534580",
    "end": "1542480"
  },
  {
    "text": "We could use Mistral. We can use Llama. We could use whatever we want. So let's add the final, the final, to the task and the final agent, which is gonna be our generation agent.",
    "start": "1542800",
    "end": "1554244"
  },
  {
    "text": "And once again, we're gonna be using a tool, and I'll explain why in a second.",
    "start": "1556310",
    "end": "1560030"
  },
  {
    "text": "So again, we gave a roll, we give it a backstory. We have a...",
    "start": "1561395",
    "end": "1566919"
  },
  {
    "text": "an LLM. Let me just make sure I named it correctly.",
    "start": "1569340",
    "end": "1572839"
  },
  {
    "text": "Oh, yeah, there's a generation one, not the response. Let me just update that.",
    "start": "1576160",
    "end": "1580199"
  },
  {
    "text": "Okay. But we have, we're missing one last tool.\nOkay.",
    "start": "1581380",
    "end": "1587779"
  },
  {
    "text": "And this tool, what I'm gonna show you is how I found the prompt for this. So this tool is going to interpolate that query and that context into a nice prompt.",
    "start": "1587780",
    "end": "1598339"
  },
  {
    "text": "And where I got the prompt is if you go to your projects, you can create this accelerator, just like look up watsonx.ai RAG, and it will give you this accelerator that you could just create.",
    "start": "1598480",
    "end": "1607859"
  },
  {
    "text": "And within there, they have prompt templates written by the people who train the models, you know, or work with it a tremendous amount.",
    "start": "1608360",
    "end": "1615180"
  },
  {
    "text": "So this prompt template is just, I'm going to take this, because they wrote it better than I, and I'm really not a particularly good prompt engineer, to be totally honest.",
    "start": "1615800",
    "end": "1623419"
  },
  {
    "text": "So I just copy and paste this, and I wanna then interpolate the context that we received from the ChromaDB into the context and the question from the query, right?",
    "start": "1623680",
    "end": "1631758"
  },
  {
    "text": "So what we're gonna do is we're gonna create another tool, and I'm just gonna copy and paste the tool and the process, and uh the prompt.",
    "start": "1632400",
    "end": "1642110"
  },
  {
    "text": "And we give access to the generation agent. So this generation response tool, the generate response tool, you can see exactly what I'm doing.",
    "start": "1642320",
    "end": "1648960"
  },
  {
    "text": "It's grabbing the context. It's grabbing the query and it's sending it to this prompt. And finally, there's one last thing we have to do, which is create a Pydantic model for the output.",
    "start": "1648960",
    "end": "1660020"
  },
  {
    "text": "Because now we're sending back the entire thing to the UI. I really want to enforce that it's just gonna be a JSON.",
    "start": "1660100",
    "end": "1665559"
  },
  {
    "text": "I really want that category, and I really want that, I believe I call it, response. I'll figure it out. Let me look at what actually I called it.",
    "start": "1665900",
    "end": "1672100"
  },
  {
    "text": "But I need both of those to be there in order for it not to, you know, blow up on response.",
    "start": "1672100",
    "end": "1676740"
  },
  {
    "text": "So let me copy this model. Let's add it to the top over here.",
    "start": "1677420",
    "end": "1681190"
  },
  {
    "text": "Okay, and this is going to be...",
    "start": "1687990",
    "end": "1690229"
  },
  {
    "text": "So let me just copy this model and paste it right here. It's gonna be the final response.",
    "start": "1708680",
    "end": "1713540"
  },
  {
    "text": "This is gonna be the JSON object that we're looking for that has a category field and has a response.",
    "start": "1713740",
    "end": "1718539"
  },
  {
    "text": "And we're gonna send this back straight through directly to our UI.",
    "start": "1719620",
    "end": "1726270"
  },
  {
    "text": "So that's why we have this in the generation test. That's why have, we're trying to say, okay, this is what we want,",
    "start": "1726690",
    "end": "1733666"
  },
  {
    "text": "this what we want it to look like, and this what you need to return. So let's add our final agent to the crew.",
    "start": "1733666",
    "end": "1744029"
  },
  {
    "text": "Let's give him his final task.",
    "start": "1745170",
    "end": "1747349"
  },
  {
    "text": "Okay.\nWe have the crew kickoff. Let's just call this crew result now, because we no longer need to send back that hard-coded response.",
    "start": "1751176",
    "end": "1760950"
  },
  {
    "text": "Get rid of this if you're not sending this.",
    "start": "1761070",
    "end": "1762849"
  },
  {
    "text": "Okay.\nMake sure nothing broke. Perfect.\nAnd let's see if we get a nice response.",
    "start": "1769031",
    "end": "1777359"
  },
  {
    "text": "Okay.\nAlright. It grabbed the correct category, okay. It sent that category to the retriever who she returned back all of the context from the RAG, from the VectorDB.",
    "start": "1785070",
    "end": "1794970"
  },
  {
    "text": "Now she's going to send it to the final agent who's going interpolate that into that prompt we cribbed notes from, from Watson Studio.",
    "start": "1796310",
    "end": "1805430"
  },
  {
    "text": "Let me see it. Perfect, okay, yeah, so you see it, the response has, okay, we have, we have everything set up.",
    "start": "1806000",
    "end": "1814960"
  },
  {
    "text": "It has the context, and look at that. Huh?\nThat worked!",
    "start": "1814960",
    "end": "1820514"
  },
  {
    "text": "I'm not surprised. It worked before. I built this. But still, it's always kind of surprising. It's an amazing, it's an amazing technology.",
    "start": "1821419",
    "end": "1828100"
  },
  {
    "text": "So you see, we have the, this RAG response. Let's actually double-check to make sure everything looks right.",
    "start": "1828100",
    "end": "1834480"
  },
  {
    "text": "So we have, it's referencing error 01. So let's look at our docs. And let's make sure that we have the correct stuff.",
    "start": "1834480",
    "end": "1843289"
  },
  {
    "text": "Error one. Session expired. Clear your browser. And let's see what that says. Perfect. Yeah, so it worked exactly the way we wanted to.",
    "start": "1844150",
    "end": "1851609"
  },
  {
    "text": "Something I really like is it's able to give me back like different steps, like responses in the pipeline.",
    "start": "1852010",
    "end": "1858249"
  },
  {
    "text": "I'm able to pass them along during the agent. So I'm able to categorize the query. I'm able to show a really, really nice message and a good, accurate response.",
    "start": "1858390",
    "end": "1867949"
  },
  {
    "text": "And it's all done with these agents. I think it's very cool. Umm, yeah. And so obviously we could, we can enhance this, we could refactor it,",
    "start": "1869050",
    "end": "1876484"
  },
  {
    "text": "we could change the parameters that we're using for the LLM to make it do different things. We could use a totally different LLM, totally different models to have whatever we want.",
    "start": "1876484",
    "end": "1884650"
  },
  {
    "text": "What I really want to do, the two new agents that I really want to make, I'm probably gonna do it later, is to route queries to the web if it's not part of the ChromaDB collections,",
    "start": "1885250",
    "end": "1895318"
  },
  {
    "text": "if it's able to categorize and say, okay, this is out of the blue. And also I wanna really, I wanna, I wanna format that response when we get it back to the",
    "start": "1895318",
    "end": "1904100"
  },
  {
    "text": "UI, to maybe maybe format it within HTML and have another agent do that, right?",
    "start": "1904100",
    "end": "1909280"
  },
  {
    "text": "Look at this and put this into a nice HTML package and post it on as a response.",
    "start": "1909280",
    "end": "1915130"
  },
  {
    "text": "Awesome. We've built a pretty sophisticated multi-agent pipeline here. So let's just recap.",
    "start": "1915570",
    "end": "1921349"
  },
  {
    "text": "We built the backend to an agentic RAG chatbot that is able to identify the queries category,",
    "start": "1921710",
    "end": "1926768"
  },
  {
    "text": "target the correct ChromaDB collection and interpolate the query in the context into a custom prompt and generate a natural language response.",
    "start": "1926769",
    "end": "1935190"
  },
  {
    "text": "So with this application and this process, we would love for you to explore additional use cases, customize the UI and experiment with the CrewAI framework, and build something really cool.",
    "start": "1936170",
    "end": "1945890"
  },
  {
    "text": "Maybe add a route that makes a web search if the query is just totally out of bounds. Maybe create an agent whose only job it is is to format the response in a particular way.",
    "start": "1946650",
    "end": "1955729"
  },
  {
    "text": "We would love to see anything you do with it. Dive into the code, have fun, build something cool, refactor it, make it better, just be creative.",
    "start": "1955730",
    "end": "1964759"
  }
]