[
  {
    "text": "Hi I'm Ram Vennam, I'm from the IBM Cloud team",
    "start": "20",
    "end": "2900"
  },
  {
    "text": "and today I want to talk to you about",
    "start": "2900",
    "end": "4460"
  },
  {
    "text": "why you might want to use a service mesh,",
    "start": "4460",
    "end": "6460"
  },
  {
    "text": "how the Istio service mesh works,",
    "start": "6460",
    "end": "8460"
  },
  {
    "text": "and some core concepts for you to get started quickly.",
    "start": "8460",
    "end": "11318"
  },
  {
    "text": "Let's use this example application:",
    "start": "11318",
    "end": "13340"
  },
  {
    "text": "I have a UI microservice",
    "start": "13340",
    "end": "15000"
  },
  {
    "text": "talking to two versions of catalog,",
    "start": "15000",
    "end": "17260"
  },
  {
    "text": "which talk to inventory.",
    "start": "17260",
    "end": "18820"
  },
  {
    "text": "All of these are services deployed inside of a Kubernetes cluster.",
    "start": "18820",
    "end": "22360"
  },
  {
    "text": "The number one reason why someone uses a service mesh",
    "start": "22360",
    "end": "26039"
  },
  {
    "text": "is because they want to secure their workload.",
    "start": "26039",
    "end": "28340"
  },
  {
    "text": "So, they want mutual TLS (\"Transport Layer Security\")",
    "start": "28340",
    "end": "30920"
  },
  {
    "text": "when one service is talking to another.",
    "start": "30920",
    "end": "33240"
  },
  {
    "text": "Next, they want to dynamically configure",
    "start": "33240",
    "end": "36020"
  },
  {
    "text": "how the services are connected to one another.",
    "start": "36020",
    "end": "38520"
  },
  {
    "text": "In this example there's version 1 and version 2.",
    "start": "38520",
    "end": "41380"
  },
  {
    "text": "So, I might want to send 90% of the traffic to version 1,",
    "start": "41380",
    "end": "44129"
  },
  {
    "text": "and then 10% of the traffic to version 2,",
    "start": "44129",
    "end": "46680"
  },
  {
    "text": "while I do testing and incremental rollouts.",
    "start": "46680",
    "end": "49720"
  },
  {
    "text": "I might also want to try",
    "start": "49720",
    "end": "51520"
  },
  {
    "text": "adding retry policies and circuit braking to harden my system.",
    "start": "51520",
    "end": "55900"
  },
  {
    "text": "Three, I want to observe how my application is doing end-to-end",
    "start": "55900",
    "end": "60680"
  },
  {
    "text": "- not just if a service is up or down",
    "start": "60680",
    "end": "63000"
  },
  {
    "text": "- but see where the bottlenecks are in the system",
    "start": "63000",
    "end": "65500"
  },
  {
    "text": "and how traffic is flowing.",
    "start": "65500",
    "end": "67700"
  },
  {
    "text": "And four, I want to control",
    "start": "67700",
    "end": "70140"
  },
  {
    "text": "who has access to talk to what.",
    "start": "70140",
    "end": "72280"
  },
  {
    "text": "In this example, UI is allowed to talk to catalog,",
    "start": "72280",
    "end": "74880"
  },
  {
    "text": "and catalog is allowed to talk to inventory.",
    "start": "74880",
    "end": "76780"
  },
  {
    "text": "But UI is not allowed to talk to inventory directly,",
    "start": "76780",
    "end": "79619"
  },
  {
    "text": "and rogue containers cannot talk to inventory service.",
    "start": "79620",
    "end": "82400"
  },
  {
    "text": "You can get more granular than that,",
    "start": "82400",
    "end": "84380"
  },
  {
    "text": "and say that UI is allowed to make an HTTP Git request,",
    "start": "84380",
    "end": "87320"
  },
  {
    "text": "and catalog is allowed to make a post request to inventory.",
    "start": "87320",
    "end": "90840"
  },
  {
    "text": "In the past, we used to have our developers",
    "start": "90840",
    "end": "94600"
  },
  {
    "text": "program all of these features directly into their application code.",
    "start": "94600",
    "end": "98659"
  },
  {
    "text": "That slowed down the dev cycle,",
    "start": "98660",
    "end": "100460"
  },
  {
    "text": "it made these microservices bigger,",
    "start": "100460",
    "end": "102820"
  },
  {
    "text": "and just generally made everything less flexible.",
    "start": "102820",
    "end": "105700"
  },
  {
    "text": "But now there's a better way,",
    "start": "105700",
    "end": "106920"
  },
  {
    "text": "and that's the service mesh.",
    "start": "106920",
    "end": "108400"
  },
  {
    "text": "You keep your application small and business-focused,",
    "start": "108400",
    "end": "111120"
  },
  {
    "text": "and instead, you dynamically program the intelligence into the network",
    "start": "111120",
    "end": "116320"
  },
  {
    "text": "- and that's exactly what Istio does.",
    "start": "116320",
    "end": "118860"
  },
  {
    "text": "So, when you have Istio installed,",
    "start": "118860",
    "end": "120740"
  },
  {
    "text": "the first thing it will do is automatically inject proxies",
    "start": "120740",
    "end": "125080"
  },
  {
    "text": "next to each one of your containers.",
    "start": "125080",
    "end": "126920"
  },
  {
    "text": "These proxies are Envoy proxies,",
    "start": "126920",
    "end": "130740"
  },
  {
    "text": "and the proxy itself runs in a container",
    "start": "130740",
    "end": "133320"
  },
  {
    "text": "next to your application container,",
    "start": "133320",
    "end": "135880"
  },
  {
    "text": "but it runs inside the same Kubernetes pod.",
    "start": "135880",
    "end": "139790"
  },
  {
    "text": "Now when UI wants to talk to catalog,",
    "start": "139790",
    "end": "142840"
  },
  {
    "text": "the proxy will actually intercept that request,",
    "start": "142840",
    "end": "146220"
  },
  {
    "text": "apply any policies,",
    "start": "146220",
    "end": "147760"
  },
  {
    "text": "and then route traffic to the proxy on the other side,",
    "start": "147760",
    "end": "150420"
  },
  {
    "text": "and then the catalog proxy will receive that request and then forward it down to the catalog.",
    "start": "150420",
    "end": "155740"
  },
  {
    "text": "Istio will configure each one of these proxies",
    "start": "155740",
    "end": "159420"
  },
  {
    "text": "with your desired configuration.",
    "start": "159420",
    "end": "161380"
  },
  {
    "text": "Istio extends Kubernetes using CRDs.",
    "start": "161380",
    "end": "164860"
  },
  {
    "text": "So, to apply an Istio configuration you just write your YAML,",
    "start": "164860",
    "end": "168540"
  },
  {
    "text": "and then apply it to Kubernetes.",
    "start": "168540",
    "end": "170799"
  },
  {
    "text": "The Istio Galley component will receive that YAML,",
    "start": "170800",
    "end": "174120"
  },
  {
    "text": "validate it, and then hand it over to Istio Pilot.",
    "start": "174120",
    "end": "179220"
  },
  {
    "text": "Pilot will convert that configuration",
    "start": "179220",
    "end": "181700"
  },
  {
    "text": "to envoy configuration,",
    "start": "181700",
    "end": "183420"
  },
  {
    "text": "and distribute it to each one of the proxies.",
    "start": "183420",
    "end": "187480"
  },
  {
    "text": "If you want the proxies to add additional policies and roles,",
    "start": "187480",
    "end": "192220"
  },
  {
    "text": "there is a policy component,",
    "start": "192220",
    "end": "195940"
  },
  {
    "text": "and then these proxies constantly report telemetry information about what's going",
    "start": "195940",
    "end": "201180"
  },
  {
    "text": "on in your system to the Istio telemetry component.",
    "start": "201180",
    "end": "206500"
  },
  {
    "text": "And last, but not least, there is Citadel.",
    "start": "206500",
    "end": "209720"
  },
  {
    "text": "Citadel is responsible for providing strong identity",
    "start": "209720",
    "end": "213640"
  },
  {
    "text": "to each one of the services in your system.",
    "start": "213640",
    "end": "215880"
  },
  {
    "text": "It also generates certificates",
    "start": "215880",
    "end": "218080"
  },
  {
    "text": "and rolls it out to each one of the proxies,",
    "start": "218080",
    "end": "220980"
  },
  {
    "text": "so that the proxies can do mutual TLS when they're talking to one another.",
    "start": "220980",
    "end": "226000"
  },
  {
    "text": "To get started with Istio",
    "start": "226000",
    "end": "227680"
  },
  {
    "text": "and to configure Istio,",
    "start": "227680",
    "end": "229379"
  },
  {
    "text": "there are 3 main resources that you need to learn about.",
    "start": "229380",
    "end": "232440"
  },
  {
    "text": "First there's a gateway.",
    "start": "232440",
    "end": "235900"
  },
  {
    "text": "Gateway is like a load balancer",
    "start": "235900",
    "end": "237720"
  },
  {
    "text": "that sits at the edge of your mesh,",
    "start": "237720",
    "end": "239400"
  },
  {
    "text": "and accepts incoming and outgoing HTTP and TCP connections.",
    "start": "239400",
    "end": "243500"
  },
  {
    "text": "Next, to direct traffic from Gateway to your services,",
    "start": "243500",
    "end": "246940"
  },
  {
    "text": "you create a virtual service.",
    "start": "246940",
    "end": "250880"
  },
  {
    "text": "A virtual service can be bound to a gateway and direct traffic to UI,",
    "start": "250880",
    "end": "254960"
  },
  {
    "text": "or it could be bound to a service and then direct traffic to your other services",
    "start": "254960",
    "end": "259340"
  },
  {
    "text": "where you can apply policies like 90% and 10% traffic split rules.",
    "start": "259340",
    "end": "263740"
  },
  {
    "text": "Once traffic is routed,",
    "start": "263740",
    "end": "265660"
  },
  {
    "text": "you can apply rules on top of that traffic,",
    "start": "265660",
    "end": "268520"
  },
  {
    "text": "such as TLS settings or circuit braking,",
    "start": "268520",
    "end": "272120"
  },
  {
    "text": "and those are done using destination rules.",
    "start": "272120",
    "end": "279100"
  },
  {
    "text": "And those are the 3 main resources you need to know about Istio.",
    "start": "279100",
    "end": "283180"
  },
  {
    "text": "I'm actually going to put \"policy\" and \"telemetry\" in asterisks",
    "start": "283180",
    "end": "287720"
  },
  {
    "text": "because there's some refactoring that's going on with these components.",
    "start": "287720",
    "end": "290480"
  },
  {
    "text": "The logic is being moved outside of this control plane",
    "start": "290480",
    "end": "293500"
  },
  {
    "text": "and into the proxies themselves",
    "start": "293500",
    "end": "295460"
  },
  {
    "text": "to avoid the additional network hop.",
    "start": "295460",
    "end": "297580"
  },
  {
    "text": "This translates to improved performance.",
    "start": "297580",
    "end": "300379"
  },
  {
    "text": "Thanks for watching this video.",
    "start": "300380",
    "end": "302040"
  },
  {
    "text": "If you want to see more videos like this",
    "start": "302040",
    "end": "303860"
  },
  {
    "text": "leave a comment below",
    "start": "303860",
    "end": "305020"
  },
  {
    "text": "and please \"like\" and subscribe.",
    "start": "305020",
    "end": "307000"
  }
]