[
  {
    "text": "You know what I hate? I mean, really hate? \nPasswords. There's too many of them. They're hard  ",
    "start": "80",
    "end": "6080"
  },
  {
    "text": "to keep up with. I'm losing them all the time. I'm \ngoing to go out on a limb, probably not very far,  ",
    "start": "6080",
    "end": "11480"
  },
  {
    "text": "and suggest that you probably don't like them \neither. Well, what if I told you there was a  ",
    "start": "11480",
    "end": "16279"
  },
  {
    "text": "way that we could get rid of these things without \ncompromising security? In fact, a way that allows  ",
    "start": "16280",
    "end": "23080"
  },
  {
    "text": "us to improve usability of the system while \nalso improving security, which is something  ",
    "start": "23080",
    "end": "28680"
  },
  {
    "text": "that's hard to do, both of these at the same time. \nThat would be interesting, right? What's the name  ",
    "start": "28680",
    "end": "33520"
  },
  {
    "text": "of the technology that lets us do this? Well, it's \ncalled Fast Identity Online or FiDO for short. No,  ",
    "start": "33520",
    "end": "43000"
  },
  {
    "text": "not that Fido. Although he really hates \npasswords, too. And what does FIDO do? Well,  ",
    "start": "43000",
    "end": "48360"
  },
  {
    "text": "it's a protocol that allows us to get rid of \npasswords by replacing them with something we  ",
    "start": "48360",
    "end": "52880"
  },
  {
    "text": "call passkeys. And it's not something brand new, \neven though you may not have heard of it before.  ",
    "start": "52880",
    "end": "58080"
  },
  {
    "text": "It's been around since 2013. The FIDO Alliance, \nthis industry consortium that put together the  ",
    "start": "58080",
    "end": "62960"
  },
  {
    "text": "standard. And in fact, there are more than 250 \norganizations that are using the FIDO standard  ",
    "start": "62960",
    "end": "69680"
  },
  {
    "text": "and are part of this alliance. And now what's new, \nis there's a newer version of this called FIDO 2,  ",
    "start": "69680",
    "end": "77000"
  },
  {
    "text": "which incorporates two new elements that \nare particularly important. Hardware-based  ",
    "start": "77000",
    "end": "81320"
  },
  {
    "text": "authentication, so now I can use biometrics or \nhardware-based tokens. Think a phone. That is  ",
    "start": "81320",
    "end": "87920"
  },
  {
    "text": "something I have. And then using my face to unlock \nthe phone, something that I am--that we can do,  ",
    "start": "87920",
    "end": "93840"
  },
  {
    "text": "that sort of thing. And we have support now for \nweb browsers, which now extend the use cases and  ",
    "start": "93840",
    "end": "100560"
  },
  {
    "text": "the possibility of all the different places where \nwe can use FIDO. Okay, so how does all this magic  ",
    "start": "100560",
    "end": "107079"
  },
  {
    "text": "work? Well, let's start with a quick review of \ncryptography. Some of these concepts are going  ",
    "start": "107080",
    "end": "112520"
  },
  {
    "text": "to be important in understanding how this could be \npossible. First of all, we have two main different  ",
    "start": "112520",
    "end": "117920"
  },
  {
    "text": "classes of cryptography algorithms. We have \nsymmetric and we have asymmetric. With a symmetric  ",
    "start": "117920",
    "end": "125600"
  },
  {
    "text": "algorithm, I have a single key, a symmetric \nkey. And that key is used to encrypt as well  ",
    "start": "125600",
    "end": "132400"
  },
  {
    "text": "as decrypt. So if I encrypt a message, I use this \nkey. I want to decrypt it, I use the very same  ",
    "start": "132400",
    "end": "138720"
  },
  {
    "text": "key. So that means both sides have to have that \nkey and know what it is. That's how that works,  ",
    "start": "138720",
    "end": "144640"
  },
  {
    "text": "symmetric, because it's the same key on both \nsides. However, when we go over here to asymmetric  ",
    "start": "144640",
    "end": "150280"
  },
  {
    "text": "cryptography, it's a different situation. We have \nto mathematically related keys that share this  ",
    "start": "150280",
    "end": "156360"
  },
  {
    "text": "unique property that whatever I encrypt with one \ncan only in fact be decrypted with the other and  ",
    "start": "156360",
    "end": "163920"
  },
  {
    "text": "vice versa. If I encrypt with this, then I can \ndecrypt only with that. So these are related,  ",
    "start": "163920",
    "end": "172160"
  },
  {
    "text": "but they are not equal. Now we're going to use \nthat special quality in order to do the magic  ",
    "start": "172160",
    "end": "178440"
  },
  {
    "text": "that we're going to do with these passkeys. For \ninstance, and in fact what we do, we refer to  ",
    "start": "178440",
    "end": "185240"
  },
  {
    "text": "these one of them as a public key and the other \nas a private key. And so let's take an example  ",
    "start": "185240",
    "end": "193680"
  },
  {
    "text": "of how we would use these. So here is our user \ngoing to log into this website. First of all,  ",
    "start": "193680",
    "end": "200840"
  },
  {
    "text": "they need to register. How does the registration \nflow work? Well, it's sort of like this user is  ",
    "start": "200840",
    "end": "207640"
  },
  {
    "text": "going to send some registration information over \nto the web server. And as they're doing that,  ",
    "start": "207640",
    "end": "214200"
  },
  {
    "text": "in this process of registration, the user on their \ndevice is going to generate both a public key and  ",
    "start": "214200",
    "end": "222040"
  },
  {
    "text": "a private key. So an example of each of these.  \nThe private key is going to stay on this device  ",
    "start": "222040",
    "end": "228840"
  },
  {
    "text": "and never leave it. And we're going to lock it \ndown with some sort of biometric or other strong  ",
    "start": "228840",
    "end": "235480"
  },
  {
    "text": "authentication capability. So the private key \nstays on the device. The public key, however,  ",
    "start": "235480",
    "end": "240760"
  },
  {
    "text": "we share with the web server. The web server \ntakes that public key and puts it in a database  ",
    "start": "240760",
    "end": "246840"
  },
  {
    "text": "and associate it with this user. Now, that's the \nregistration piece. Now, what do we do next is,  ",
    "start": "246840",
    "end": "253879"
  },
  {
    "text": "let's say this user, we do that one time. Now \nthe user wants to log into the system. So now  ",
    "start": "253880",
    "end": "259200"
  },
  {
    "text": "what we need to be able to do is authenticate. \nThe authentication flow is going to work like  ",
    "start": "259200",
    "end": "265000"
  },
  {
    "text": "this. So the user is going to send information \nto the web server. For instance, they're going  ",
    "start": "265000",
    "end": "270800"
  },
  {
    "text": "to put it in their username and say, \"Hey, this \nis me. I'd like to log in.\" The web server says,  ",
    "start": "270800",
    "end": "277400"
  },
  {
    "text": "\"Oh yeah, I remember you because you registered \nwith me before. I'm going to pull in your public  ",
    "start": "277400",
    "end": "283759"
  },
  {
    "text": "key because you shared that with me.\" And by the \nway, there's never a problem with sharing a public  ",
    "start": "283760",
    "end": "288120"
  },
  {
    "text": "key. That's why we call it a public key. Only \nproblem is if you share a private key. So we take  ",
    "start": "288120",
    "end": "293720"
  },
  {
    "text": "the public key that's been shared in advance, \nand we're going to then calculate a challenge  ",
    "start": "293720",
    "end": "299920"
  },
  {
    "text": "of some sort. So that is a specially designed \nmessage that's going to have some information,  ",
    "start": "299920",
    "end": "305440"
  },
  {
    "text": "probably a timestamp and other things like that \nthat are unique. And we're going to encrypt it  ",
    "start": "305440",
    "end": "310280"
  },
  {
    "text": "with that user's public key. And remember, if \nit's been encrypted with the user's public key,  ",
    "start": "310280",
    "end": "317880"
  },
  {
    "text": "only they can decrypt it because they're the only \nones that have the private key and they've locked  ",
    "start": "317880",
    "end": "322200"
  },
  {
    "text": "it down on their device. That's this is where we \nstart getting the real security capabilities. He  ",
    "start": "322200",
    "end": "327560"
  },
  {
    "text": "sends the challenge over to the user. The user \ndecrypts it with their private key. And then  ",
    "start": "327560",
    "end": "334240"
  },
  {
    "text": "if they're able to read it, they're able to see \nwhat's the challenge message. And they can then  ",
    "start": "334240",
    "end": "338960"
  },
  {
    "text": "respond to the web server encrypting the response \nthat proves that they have read the challenge  ",
    "start": "338960",
    "end": "346479"
  },
  {
    "text": "message and they will encrypt that again with \ntheir private key and send that back to the web  ",
    "start": "346480",
    "end": "351560"
  },
  {
    "text": "server. The web server then is going to take that \nand we do the final step. That is verification.  ",
    "start": "351560",
    "end": "359520"
  },
  {
    "text": "Verification means the web server now is going \nto take this response message that we got. We're  ",
    "start": "359520",
    "end": "364639"
  },
  {
    "text": "going to decrypt it with the public key, and we're \ngoing to compare it and see if it works. If the  ",
    "start": "364640",
    "end": "370840"
  },
  {
    "text": "challenge we sent matches the message we got back, \nthen we can prove that this user is in fact who  ",
    "start": "370840",
    "end": "377880"
  },
  {
    "text": "they claim to be and we will allow them to log \nin. Notice what was not ever happening in this  ",
    "start": "377880",
    "end": "383920"
  },
  {
    "text": "case. There were no passwords. At no time did you \nsee a password come out of my hands. In this case,  ",
    "start": "383920",
    "end": "390000"
  },
  {
    "text": "we stored the private key on the device. Always we \nkeep the public key, share it with the web server.  ",
    "start": "390000",
    "end": "395400"
  },
  {
    "text": "The web server associates that with the user, \nand then we just do a series of challenges. So  ",
    "start": "395400",
    "end": "400880"
  },
  {
    "text": "for this user, all they have to do in order when \nthis challenge comes across, unlock their device,  ",
    "start": "400880",
    "end": "406840"
  },
  {
    "text": "indicate maybe on the device that this is the \nwebsite that I want to log into, approve that, and  ",
    "start": "406840",
    "end": "412360"
  },
  {
    "text": "the rest of it happens automagically. Okay, let's \nreview really quickly what we've talked about.  ",
    "start": "412360",
    "end": "419719"
  },
  {
    "text": "So with FIDO, we keep the private key on the \ndevice itself and we guard it with multi-factor  ",
    "start": "419720",
    "end": "427080"
  },
  {
    "text": "authentication. So that way nobody else can see \nit. It remains private and therefore only that  ",
    "start": "427080",
    "end": "433240"
  },
  {
    "text": "user can decrypt and encrypt with that key. The \npublic key, however, is shared. That's why we  ",
    "start": "433240",
    "end": "440080"
  },
  {
    "text": "call it public. We share that with the service \nprovider, with the website or what have you.  ",
    "start": "440080",
    "end": "444879"
  },
  {
    "text": "And that's okay. Because of the mathematical \nrelationship between these two, having one  ",
    "start": "444880",
    "end": "449840"
  },
  {
    "text": "doesn't allow you to figure out what the other is, \nwhich is nice. Now, one of the things that really  ",
    "start": "449840",
    "end": "455680"
  },
  {
    "text": "nice about this, not only do I get to get rid of \npasswords, but there's some downstream effects  ",
    "start": "455680",
    "end": "460080"
  },
  {
    "text": "that occur from that. For instance, it resists \nphishing attacks. So the phishing issue often  ",
    "start": "460080",
    "end": "467400"
  },
  {
    "text": "occurs because someone is able to coax you out of \nyour credentials. You click on a website and log  ",
    "start": "467400",
    "end": "473360"
  },
  {
    "text": "into a bogus website and you give the attacker \nyour login your user ID and password. If there's  ",
    "start": "473360",
    "end": "480080"
  },
  {
    "text": "no password, in other words, only passkeys \nin the form of these challenges and crypto  ",
    "start": "480080",
    "end": "485280"
  },
  {
    "text": "mechanisms, then there really is no password for \nthe phisher to gather in the first place. So we  ",
    "start": "485280",
    "end": "491880"
  },
  {
    "text": "resist a lot of those phishing attacks. That's \na nice side effect. Another thing is it resists  ",
    "start": "491880",
    "end": "498080"
  },
  {
    "text": "replay attacks. So a replay attack is one where \na user or an attacker might sit on a network and  ",
    "start": "498080",
    "end": "505680"
  },
  {
    "text": "see the information that you're sending when you \ngo to send your password over the network. Maybe  ",
    "start": "505680",
    "end": "510240"
  },
  {
    "text": "it's in an encrypted form in the form of a hash, \nand they take that hash and they don't even have  ",
    "start": "510240",
    "end": "515120"
  },
  {
    "text": "to know what it says. They just need a copy of \nit. And then they replay it and send it to the  ",
    "start": "515120",
    "end": "519520"
  },
  {
    "text": "web server as if they were you. In this case, \nwe've got a system of challenges. They wouldn't  ",
    "start": "519520",
    "end": "525680"
  },
  {
    "text": "know what to send because they'd have to see what \nwas coming in the first place. So we resist replay  ",
    "start": "525680",
    "end": "530600"
  },
  {
    "text": "attacks. And finally it gets rid of passwords \nfor us. Those things that we hate, the things  ",
    "start": "530600",
    "end": "537319"
  },
  {
    "text": "that are hard to keep up with, the things that can \nbe forgotten, the things that people write down,  ",
    "start": "537320",
    "end": "543240"
  },
  {
    "text": "the things that people are not very creative at \ncoming up with in the first place. In this kind  ",
    "start": "543240",
    "end": "547680"
  },
  {
    "text": "of a situation, there's no passwords involved. The \npasskeys are all based upon information with these  ",
    "start": "547680",
    "end": "553960"
  },
  {
    "text": "public and private keys, which are automatically \ngenerated, and they're complex and strong and the  ",
    "start": "553960",
    "end": "559080"
  },
  {
    "text": "user doesn't have to keep up with it. And you know \nwhat? This has been around for a while. In fact,  ",
    "start": "559080",
    "end": "564160"
  },
  {
    "text": "IBM has been supporting FIDO 2 since 2018, and \nthere's a lot of other vendors that are jumping  ",
    "start": "564160",
    "end": "571920"
  },
  {
    "text": "on board as well as I told you to begin with. \nSo this is something that I believe is going  ",
    "start": "571920",
    "end": "576839"
  },
  {
    "text": "to be the future of logins and authentication. \nAnd the beautiful thing is the future is free  ",
    "start": "576840",
    "end": "583560"
  },
  {
    "text": "of passwords. Thanks for watching. If you found \nthis video interesting and would like to learn  ",
    "start": "583560",
    "end": "589840"
  },
  {
    "text": "more about cybersecurity, please remember \nto hit like and subscribe to this channel.",
    "start": "589840",
    "end": "596960"
  }
]