[
  {
    "start": "0",
    "end": "8000"
  },
  {
    "text": "So you're probably familiar with how Kubernetes is great at giving you scalability and fault tolerance for your applications.",
    "start": "180",
    "end": "7319"
  },
  {
    "text": "So, for example, let's say you've got three copies of your app and one of them fails.",
    "start": "7860",
    "end": "21320"
  },
  {
    "start": "8000",
    "end": "76000"
  },
  {
    "text": "The beauty of Kubernetes is it's going to automatically start up a new app for you.",
    "start": "23340",
    "end": "28170"
  },
  {
    "text": "And everything is wonderful.",
    "start": "31510",
    "end": "32889"
  },
  {
    "text": "Now, the truth is, Kubernetes works great for what are called stateless applications.",
    "start": "33790",
    "end": "38919"
  },
  {
    "text": "Stateless applications are like web servers.\nAnd it can handle that out-of-the box incredibly well.",
    "start": "39340",
    "end": "44799"
  },
  {
    "text": "But what if you have a stateful application?",
    "start": "45580",
    "end": "47859"
  },
  {
    "text": "A stateful application might be something like a database.",
    "start": "49119",
    "end": "51430"
  },
  {
    "text": "Stateful applications have extra steps that need to occur when you need to restart them.",
    "start": "51940",
    "end": "56834"
  },
  {
    "text": "So, for example, you might need a leader election.",
    "start": "57400",
    "end": "59800"
  },
  {
    "text": "We might need to do backup and recovery.",
    "start": "59890",
    "end": "61809"
  },
  {
    "text": "So if you need Kubernetes to support those types of applications, ",
    "start": "62410",
    "end": "66033"
  },
  {
    "text": "we need to use a wonderful extension mechanism called Operators.",
    "start": "66033",
    "end": "70437"
  },
  {
    "text": "And operators allow you to extend Kubernetes with custom resources.",
    "start": "71020",
    "end": "76149"
  },
  {
    "start": "76000",
    "end": "126000"
  },
  {
    "text": "So we're going to show how to build an operator, but first, let's talk about usage.",
    "start": "77050",
    "end": "82270"
  },
  {
    "text": "So how would we use an operator?",
    "start": "86780",
    "end": "88546"
  },
  {
    "text": "Well, the beauty of operators and Kubernetes is that they're seamless.",
    "start": "89180",
    "end": "93230"
  },
  {
    "text": "And so they work just like regular resources.",
    "start": "93740",
    "end": "96560"
  },
  {
    "text": "So you're going to build a YAML-- and you can see I've got a YAML here and this is now a YAML for the custom resource.",
    "start": "97190",
    "end": "104720"
  },
  {
    "text": "The example we're using memcached.",
    "start": "104840",
    "end": "107607"
  },
  {
    "text": "But the beauty of this is we're going to use the same kubectl commands: kubectl apply -f and the name of the file.",
    "start": "107630",
    "end": "115578"
  },
  {
    "text": "And those same commands that you would use for regular Kubernetes resources will work for the custom operators.",
    "start": "116000",
    "end": "121940"
  },
  {
    "text": "So usage just feels like the rest of Kubernetes.",
    "start": "122300",
    "end": "125029"
  },
  {
    "start": "126000",
    "end": "184000"
  },
  {
    "text": "Now we need to talk about how do we build an operator.",
    "start": "126769",
    "end": "130297"
  },
  {
    "text": "How are we going to build an operator?",
    "start": "130310",
    "end": "131749"
  },
  {
    "text": "Well, there's a wonderful toolkit: the Operator SDK.",
    "start": "132080",
    "end": "141679"
  },
  {
    "text": "And the beauty of the Operator SDK is it gives you four different ways to build your operators.",
    "start": "142190",
    "end": "147080"
  },
  {
    "text": "If you already have Helm charts lying around, the Operator SDK can take those Helm charts and turn them into an operator.",
    "start": "147500",
    "end": "153379"
  },
  {
    "text": "If you already have Ansible playbooks, the Operator SDK can take those Ansible playbooks and turn those into an operator.",
    "start": "153800",
    "end": "160159"
  },
  {
    "text": "And if you need to do custom-- you need to start from scratch, you don't have anything lying around-- ",
    "start": "160820",
    "end": "165032"
  },
  {
    "text": "it provides a Java-based plug-in approach for building an operator, and it also provides a Go-based approach.",
    "start": "165032",
    "end": "172239"
  },
  {
    "text": "So you can use any of those of your favorite languages to build a custom operator.",
    "start": "172250",
    "end": "177259"
  },
  {
    "text": "Now, you're going to want to know: What are the big steps I've got to do?",
    "start": "178010",
    "end": "181519"
  },
  {
    "text": "It seems like a lot of work to build an operator.",
    "start": "181550",
    "end": "183919"
  },
  {
    "start": "184000",
    "end": "288000"
  },
  {
    "text": "Well, turns out there's sort of two key steps.",
    "start": "184790",
    "end": "186915"
  },
  {
    "text": "One of which is we need to add our custom fields.",
    "start": "186915",
    "end": "191808"
  },
  {
    "text": "And then we're going to need to have what's called a control.",
    "start": "197370",
    "end": "203637"
  },
  {
    "text": "So first, let's talk about custom fields.",
    "start": "203670",
    "end": "205740"
  },
  {
    "text": "We've got this example over here to two custom fields.",
    "start": "206040",
    "end": "209698"
  },
  {
    "text": "One is size and one is nodes.",
    "start": "209910",
    "end": "211949"
  },
  {
    "text": "One is in the spec section and one is in the status section.",
    "start": "212190",
    "end": "215339"
  },
  {
    "text": "Think of the spec section as the parameters that you're passing into your custom resource-- sort of telling it what to do.",
    "start": "215910",
    "end": "223650"
  },
  {
    "text": "In this case, its size, which is the number of memcached applications we want.",
    "start": "223800",
    "end": "228060"
  },
  {
    "text": "And then nodes is in the status section.",
    "start": "228750",
    "end": "231031"
  },
  {
    "text": "And that's sort of the output that's reporting the status of the custom resource.",
    "start": "231031",
    "end": "235335"
  },
  {
    "text": "So we've got two fields there and we need to tell Kubernetes about those fields because ",
    "start": "235950",
    "end": "241008"
  },
  {
    "text": "Kubernetes stores all of your information, whether it's a custom resource or a built-in resource and a database called etcd.",
    "start": "241008",
    "end": "248849"
  },
  {
    "text": "And we've got to give it the necessary information.",
    "start": "248880",
    "end": "251610"
  },
  {
    "text": "We're going to declare the fields and the Operator SDK is going to generate what are called custom resource definitions.",
    "start": "251620",
    "end": "258600"
  },
  {
    "text": "And that's the magic that's going to get your custom fields into the etcd database with everything else that Kubernetes stores.",
    "start": "258810",
    "end": "265979"
  },
  {
    "text": "So once you've got your custom fields done, the key thing is you've got to add the intelligence of your operator.",
    "start": "266790",
    "end": "273209"
  },
  {
    "text": "That's the piece that's going to worry about trying to do what you need to do.",
    "start": "273780",
    "end": "277980"
  },
  {
    "text": "So in the examples we talked about before, maybe you need to do some backup and recovery steps, ",
    "start": "278220",
    "end": "282015"
  },
  {
    "text": "maybe you need to do leader election.",
    "start": "282015",
    "end": "284218"
  },
  {
    "text": "Whatever needs to be done, is going to be done in what's called the control loop.",
    "start": "284820",
    "end": "288389"
  },
  {
    "start": "288000",
    "end": "406000"
  },
  {
    "text": "Now, the beauty of control loops is these are used all over Kubernetes and they all work the same way.",
    "start": "288990",
    "end": "295888"
  },
  {
    "text": "They're going to start by declaring what is my desired state.",
    "start": "300120",
    "end": "304537"
  },
  {
    "text": "That's going to be sort of the input passed in: here's what I want.",
    "start": "304830",
    "end": "308309"
  },
  {
    "text": "And then what's going to happen at that point is we're going to evaluate, \"Well, what is my current actual state?\".",
    "start": "309120",
    "end": "315000"
  },
  {
    "text": "And because I want to go through my actual state to what is the desired state that was declared.",
    "start": "315570",
    "end": "322079"
  },
  {
    "text": "And so that's what we call the reconciliation.",
    "start": "322470",
    "end": "326100"
  },
  {
    "text": "So reconciliation there is where we're going to worry about ",
    "start": "326820",
    "end": "330030"
  },
  {
    "text": "what do we what steps do we need to take to get close to that desired state?",
    "start": "330030",
    "end": "334501"
  },
  {
    "text": "Maybe there weren't enough memcached's that were there.",
    "start": "334890",
    "end": "337799"
  },
  {
    "text": "Maybe we need to add one.",
    "start": "337830",
    "end": "338949"
  },
  {
    "text": "Maybe we need to start one up.",
    "start": "338970",
    "end": "340259"
  },
  {
    "text": "So that's what's going to happen in that reconciled state.",
    "start": "340560",
    "end": "342600"
  },
  {
    "text": "And then in the last step, we're going to report back the status and that's the full reconcile loop.",
    "start": "342960",
    "end": "349589"
  },
  {
    "text": "So now we've got our custom feels taken care of thanks to the Operator SDK.",
    "start": "350310",
    "end": "353999"
  },
  {
    "text": "It gives us a lot of skeleton code.",
    "start": "354240",
    "end": "356160"
  },
  {
    "text": "We do need to fill in our control loop or reconcile loop.",
    "start": "356310",
    "end": "359399"
  },
  {
    "text": "But once we have all that filled in, we can then go back to the Operator SDK.",
    "start": "359730",
    "end": "364050"
  },
  {
    "text": "It allows us to generate a new image of this operator, this custom operator that we've created.",
    "start": "364260",
    "end": "370050"
  },
  {
    "text": "And it'll also enable us to deploy that operator.",
    "start": "370320",
    "end": "373049"
  },
  {
    "text": "Once that operators are deployed, it's going to run just just like any other part of the resources that are running in your Kubernetes environment.",
    "start": "373380",
    "end": "380886"
  },
  {
    "text": "Were you able to follow all that?",
    "start": "381769",
    "end": "383230"
  },
  {
    "text": "If not and if you need more information on operators and also want information on OpenShift and Kubernetes, ",
    "start": "383520",
    "end": "389022"
  },
  {
    "text": "check out my latest book, \"Hybrid Cloud Apps with OpenShift and Kubernetes.\" It can be found in the links below.",
    "start": "389022",
    "end": "395062"
  },
  {
    "text": "Thanks for watching.",
    "start": "396670",
    "end": "397689"
  },
  {
    "text": "If you enjoyed this content, please Like the video and Subscribe to our channel.",
    "start": "397930",
    "end": "401949"
  }
]