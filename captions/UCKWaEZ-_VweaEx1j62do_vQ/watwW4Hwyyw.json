[
  {
    "text": "Slow running queries can be a major bottleneck for any data-driven organization.",
    "start": "400",
    "end": "4940"
  },
  {
    "text": "And especially as data sets get larger to support AI and automation, this is gonna become increasingly important.",
    "start": "5500",
    "end": "11800"
  },
  {
    "text": "So whether you're a developer, a data scientist, a data engineer, or even a database administrator,",
    "start": "12280",
    "end": "18514"
  },
  {
    "text": "understanding how to tune queries to make sure that they're optimized for",
    "start": "18514",
    "end": "22409"
  },
  {
    "text": "performance is essential to make that we're controlling our runtime costs",
    "start": "22409",
    "end": "26920"
  },
  {
    "text": "and ensuring that we can deliver real-time data insights.",
    "start": "27540",
    "end": "31380"
  },
  {
    "text": "So that's what we're going to go through today,",
    "start": "31983",
    "end": "33723"
  },
  {
    "text": "a method of going through a standardized process to diagnose and optimize our queries to ensure best performance.",
    "start": "33723",
    "end": "41119"
  },
  {
    "text": "So let's walk through a scenario.",
    "start": "41740",
    "end": "42880"
  },
  {
    "text": "You've written a query and you got all the data to return exactly how you want it,",
    "start": "43280",
    "end": "48392"
  },
  {
    "text": "you deployed it, that's great, but unfortunately it's running slowly,",
    "start": "48392",
    "end": "51879"
  },
  {
    "text": "maybe you've gotten feedback from users or members of your team.",
    "start": "52220",
    "end": "55320"
  },
  {
    "text": "So let's go through the steps we need to take to fix that.",
    "start": "55920",
    "end": "58739"
  },
  {
    "text": "And for the sake of time and this video,",
    "start": "59040",
    "end": "61217"
  },
  {
    "text": "we're going to focus on things that are actually within our control and within the scope of the application.",
    "start": "61217",
    "end": "65679"
  },
  {
    "text": "And as we go through fixes, we're going to make sure we basically prioritize them",
    "start": "66140",
    "end": "70596"
  },
  {
    "text": "based on easiest to fix to most complex to actually change.",
    "start": "70596",
    "end": "74459"
  },
  {
    "text": "So first things first, before we even try and solve any problems",
    "start": "74944",
    "end": "79774"
  },
  {
    "text": "or add any optimizations, we want to make that we're diagnosing the problem correctly.",
    "start": "79774",
    "end": "84860"
  },
  {
    "text": "And this is done through a method called explain.",
    "start": "85400",
    "end": "88080"
  },
  {
    "text": "Explain is SQL context.",
    "start": "88760",
    "end": "90959"
  },
  {
    "text": "So you'll see this literally as a explain command that is written.",
    "start": "91380",
    "end": "95599"
  },
  {
    "text": "So you say explain this query,",
    "start": "96000",
    "end": "97939"
  },
  {
    "text": "and from there, you can actually then get a detailed query plan of exactly how your database is going to run that query.",
    "start": "98580",
    "end": "106840"
  },
  {
    "text": "So with our explain method, we can identify a few key red flags.",
    "start": "107360",
    "end": "112239"
  },
  {
    "text": "Probably the thing that's going to come up the most",
    "start": "112820",
    "end": "115140"
  },
  {
    "text": "is showing that your scanned amount of rows",
    "start": "115140",
    "end": "118704"
  },
  {
    "text": "does not equal or is very, very distant from the amount of rows actually returned.",
    "start": "118704",
    "end": "124540"
  },
  {
    "text": "So we can actually see that the amount scanned does not the equal the return.",
    "start": "125080",
    "end": "131580"
  },
  {
    "text": "And this basically means, let's say you're looking for only a couple hundred rows,",
    "start": "132620",
    "end": "136465"
  },
  {
    "text": "Maybe they're still querying through many many millions.",
    "start": "136465",
    "end": "139269"
  },
  {
    "text": "That's what's going to result in that long run time or the inefficiency.",
    "start": "139590",
    "end": "143349"
  },
  {
    "text": "So seeing that in a way is good because that means you have room to improve.",
    "start": "143901",
    "end": "147041"
  },
  {
    "text": "The other method that we really want to look for is basically sorts",
    "start": "148030",
    "end": "153690"
  },
  {
    "text": "and basically with that we're going to see that when we're actually pulling data out in a query",
    "start": "154561",
    "end": "160755"
  },
  {
    "text": "that in order to sort it you have to keep all that memory in RAM. So that's going be very consuming.",
    "start": "160755",
    "end": "166689"
  },
  {
    "text": "That's another red flag that we can tackle with some optimizations.",
    "start": "167330",
    "end": "171709"
  },
  {
    "text": "But if you see that in your query plan, that's another area of optimization.",
    "start": "172130",
    "end": "175670"
  },
  {
    "text": "And then again, the next thing really is a full table scan.",
    "start": "176190",
    "end": "180169"
  },
  {
    "text": "A full table span means that essentially the entire table is being scanned for your query.",
    "start": "180570",
    "end": "186289"
  },
  {
    "text": "So we wanna make sure that we see those can be completely eliminated through some kind of optimization,",
    "start": "187110",
    "end": "195861"
  },
  {
    "text": "and again, I know I was talking about SQL syntax with Explain.",
    "start": "195861",
    "end": "200680"
  },
  {
    "text": "No matter your database, whether it's no SQL or SQL, you're gonna be able to look at a query plan.",
    "start": "201200",
    "end": "207020"
  },
  {
    "text": "And a query planning based on the syntax and the",
    "start": "207380",
    "end": "210944"
  },
  {
    "text": "details within your particular database is always gonna tell you three things.",
    "start": "210944",
    "end": "214599"
  },
  {
    "text": "It's gonna tell all these great functions that it does and then on top of that, for each one,",
    "start": "214860",
    "end": "219887"
  },
  {
    "text": "it's going to break it down by the amount of time it takes,",
    "start": "219887",
    "end": "222407"
  },
  {
    "text": "by the amounts of resources it consumes, is frequently depicted as cost.",
    "start": "222408",
    "end": "226379"
  },
  {
    "text": "and that will be RAM or CPU, and then it'll actually then depict,",
    "start": "226760",
    "end": "230558"
  },
  {
    "text": "hopefully, the number of rows or transactions",
    "start": "230558",
    "end": "232928"
  },
  {
    "text": "that were included in that operation, and you can quickly start",
    "start": "232928",
    "end": "236970"
  },
  {
    "text": "to see where those areas of improvements can really be applied.",
    "start": "236970",
    "end": "240800"
  },
  {
    "text": "So now we can go ahead and start looking at how we can optimize our queries.",
    "start": "241360",
    "end": "245059"
  },
  {
    "text": "And as we go through the structured methodology,",
    "start": "245410",
    "end": "248122"
  },
  {
    "text": "we're going to actually start with things that are probably the most in our control.",
    "start": "248122",
    "end": "251889"
  },
  {
    "text": "And then the later optimizations are going to be more methods that",
    "start": "252230",
    "end": "256415"
  },
  {
    "text": "would probably be a larger team effort or a bigger change to your overall architecture.",
    "start": "256415",
    "end": "262110"
  },
  {
    "text": "So the first thing we're always really going to look at in query optimization",
    "start": "262750",
    "end": "267363"
  },
  {
    "text": "is the query itself, because about 80% of the time, that's why it's running slowly.",
    "start": "267363",
    "end": "271769"
  },
  {
    "text": "So, we're always going to look for...",
    "start": "271770",
    "end": "274189"
  },
  {
    "text": "making sure that our syntax is as optimized as possible.",
    "start": "274920",
    "end": "279160"
  },
  {
    "text": "So one of the things that we want to make sure we do as we're writing a query is that we're filtering as soon as we can.",
    "start": "279880",
    "end": "285819"
  },
  {
    "text": "Because what is a query really?",
    "start": "286200",
    "end": "287779"
  },
  {
    "text": "Is that it's a method of sorting through a database so you have all your different rows.",
    "start": "288000",
    "end": "293279"
  },
  {
    "text": "And most databases, this is quite a bit.",
    "start": "293960",
    "end": "296339"
  },
  {
    "text": "And any kind of query where you're querying just a little bit of information.",
    "start": "296920",
    "end": "300459"
  },
  {
    "text": "you wanna make sure that you're limiting the amount of information that's actually being scanned.",
    "start": "301110",
    "end": "305569"
  },
  {
    "text": "How this is done is really by adding a WHERE clause so that you are only scanning a smaller portion of the data.",
    "start": "306050",
    "end": "311810"
  },
  {
    "text": "So you're not going from one all the way to the bottom,",
    "start": "312150",
    "end": "315047"
  },
  {
    "text": "you're actually just gonna be querying a smaller proportion of the the data,",
    "start": "315047",
    "end": "318776"
  },
  {
    "text": "so making sure you're taking every chance you can",
    "start": "318776",
    "end": "321568"
  },
  {
    "text": "to optimize and filter out any data that isn't relevant to this query is gonna help it run faster.",
    "start": "321568",
    "end": "328328"
  },
  {
    "text": "The other things to look at is always your joins.",
    "start": "328940",
    "end": "331359"
  },
  {
    "text": "Joins are notoriously a problem, where we can find improvements for optimization.",
    "start": "331700",
    "end": "337100"
  },
  {
    "text": "And then we also want to look at once you have your WHERE clauses, how are you actually writing those?",
    "start": "337720",
    "end": "344540"
  },
  {
    "text": "Are they distinct?",
    "start": "344660",
    "end": "345660"
  },
  {
    "text": "We want to make sure we're looking for a set list of things that are clearly defined.",
    "start": "345980",
    "end": "349880"
  },
  {
    "text": "So something to look out for would be an IN clause.",
    "start": "350540",
    "end": "353660"
  },
  {
    "text": "And this basically means that we're looking for something",
    "start": "353820",
    "end": "357328"
  },
  {
    "text": "where something is in a list, and you want to make sure that that list is relatively short,",
    "start": "357328",
    "end": "362279"
  },
  {
    "text": "because once that list becomes very long, you could start to see query inefficiencies.",
    "start": "362279",
    "end": "366608"
  },
  {
    "text": "So by taking a look at your query, you can make those changes, and then you should be rerunning your explain",
    "start": "367170",
    "end": "372162"
  },
  {
    "text": "so that you can actually quantify and see the improvements that these are making.",
    "start": "372162",
    "end": "377108"
  },
  {
    "text": "By adding that WHERE clause and by filtering more, you might see your sorts and your table stands totally be eliminated.",
    "start": "377610",
    "end": "383469"
  },
  {
    "text": "and you should see the value between the amount scanned and returned",
    "start": "383840",
    "end": "387482"
  },
  {
    "text": "get smaller and smaller, so they start to become virtually the same number.",
    "start": "387482",
    "end": "391380"
  },
  {
    "text": "So once we fully optimized our query, the next step is to",
    "start": "391920",
    "end": "396355"
  },
  {
    "text": "decide if we want to add an index for our database to better work with this query.",
    "start": "396355",
    "end": "402019"
  },
  {
    "text": "So what an index is going to do is it's basically going to help the database optimize the sort.",
    "start": "403040",
    "end": "408999"
  },
  {
    "text": "for a particular column so that it can better navigate through when it's doing some kind of lookup or search.",
    "start": "409590",
    "end": "415509"
  },
  {
    "text": "So first, we're going to back up and really think about what an index is.",
    "start": "416310",
    "end": "420550"
  },
  {
    "text": "So in a database, data is basically stored in a completely random order.",
    "start": "420970",
    "end": "425830"
  },
  {
    "text": "The database doesn't know the order.",
    "start": "426230",
    "end": "427910"
  },
  {
    "text": "It's probably the order that it originally was inserted in.",
    "start": "428110",
    "end": "430948"
  },
  {
    "text": "But that's basically how everything is laid out.",
    "start": "431370",
    "end": "435849"
  },
  {
    "text": "And from there, let's say we're looking at a list of countries.",
    "start": "436110",
    "end": "438969"
  },
  {
    "text": "Let's say we want to look up USA.",
    "start": "440450",
    "end": "442170"
  },
  {
    "text": "What we're going to do is we're first going to look in that first row.",
    "start": "443110",
    "end": "445209"
  },
  {
    "text": "Say, is this USA?",
    "start": "445330",
    "end": "446330"
  },
  {
    "text": "Maybe it is, maybe it isn't.",
    "start": "446810",
    "end": "448609"
  },
  {
    "text": "If then we would look at the second row, then the third, then the fourth.",
    "start": "449350",
    "end": "453470"
  },
  {
    "text": "That'll go all the way through until it hits every single row.",
    "start": "453770",
    "end": "457189"
  },
  {
    "text": "And that's a pretty inefficient query, right?",
    "start": "457530",
    "end": "459549"
  },
  {
    "text": "Because it has to check every single record to see if it matches that.",
    "start": "459770",
    "end": "463328"
  },
  {
    "text": "So what an index actually does is it presorts that information.",
    "start": "463850",
    "end": "468490"
  },
  {
    "text": "So that essentially the database knows where things are.",
    "start": "468490",
    "end": "473209"
  },
  {
    "text": "So when it actually doesn't find it, it can help and use that information to drive a more intelligent search.",
    "start": "473350",
    "end": "479730"
  },
  {
    "text": "So let's say we're gonna build an index on country name.",
    "start": "480170",
    "end": "483209"
  },
  {
    "text": "So same use case, we're going to have the data still gonna be listed out.",
    "start": "483810",
    "end": "488149"
  },
  {
    "text": "And the difference here is now it's gonna be sorted in an order that the database can recognize.",
    "start": "489110",
    "end": "494629"
  },
  {
    "text": "And since it's a string, it's going to be from A to Z.",
    "start": "494650",
    "end": "497910"
  },
  {
    "text": "It's gonna an alphabetical order,",
    "start": "498270",
    "end": "499490"
  },
  {
    "text": "and If this was a number, you know, you can make it in ascending or descending order, whatever you want,",
    "start": "500483",
    "end": "505440"
  },
  {
    "text": "but, now when we look up USA.",
    "start": "506080",
    "end": "507939"
  },
  {
    "text": "It's actually going to start in the middle.",
    "start": "510420",
    "end": "511579"
  },
  {
    "text": "And it's going to say, is this USA?",
    "start": "512240",
    "end": "513580"
  },
  {
    "text": "Probably not.",
    "start": "513980",
    "end": "514779"
  },
  {
    "text": "We know USA is probably towards the bottom here.",
    "start": "514780",
    "end": "517080"
  },
  {
    "text": "And because it won't find it, it now knows that it doesn't even need to search this top portion.",
    "start": "517739",
    "end": "523557"
  },
  {
    "text": "It's just going to go about midway through.",
    "start": "523860",
    "end": "526100"
  },
  {
    "text": "It's going look again.",
    "start": "526140",
    "end": "527200"
  },
  {
    "text": "And then it's gonna look again, and it's basically going to hone in on where the value is based on the value that it actually gets.",
    "start": "527520",
    "end": "535919"
  },
  {
    "text": "So this is a much more intelligent search.",
    "start": "535940",
    "end": "537760"
  },
  {
    "text": "With this, it's probably going to find the value of USA within a few lookups, maybe a few dozen.",
    "start": "538140",
    "end": "543840"
  },
  {
    "text": "Whereas with this method, it is going to have to look through every single row pretty unintelligently.",
    "start": "544540",
    "end": "549899"
  },
  {
    "text": "So that's what an index does.",
    "start": "550440",
    "end": "552279"
  },
  {
    "text": "So the reason we don't do this first is because the first thing you have to do here is optimize your query.",
    "start": "553040",
    "end": "557719"
  },
  {
    "text": "Because you can't just put an index on every column.",
    "start": "558040",
    "end": "560100"
  },
  {
    "text": "You're only going to put an an index on the columns that you're searching with.",
    "start": "560540",
    "end": "563759"
  },
  {
    "text": "So these are the columns that are called in your WHERE clauses.",
    "start": "564140",
    "end": "566600"
  },
  {
    "text": "your order buys, your group buys, anything that's your lookup.",
    "start": "567000",
    "end": "570820"
  },
  {
    "text": "And that's where indexes really should be applied.",
    "start": "571100",
    "end": "574139"
  },
  {
    "text": "They're not a silver bullet.",
    "start": "574520",
    "end": "575580"
  },
  {
    "text": "We can't always just keep building indexes because there is an overhead cost associated with it.",
    "start": "575780",
    "end": "581419"
  },
  {
    "text": "Because now every time you write to your database this order has to be maintained.",
    "start": "581760",
    "end": "586200"
  },
  {
    "text": "So there is some backend operations in your database that happen.",
    "start": "586600",
    "end": "589459"
  },
  {
    "text": "So that's why there are some arbitrary rules, like you shouldn't have more than three indexes.",
    "start": "589980",
    "end": "594220"
  },
  {
    "text": "Now, if you have evidence with your explain that by adding an index,",
    "start": "594670",
    "end": "598333"
  },
  {
    "text": "it drastically improves the performance of a query, go ahead and add it.",
    "start": "598333",
    "end": "602049"
  },
  {
    "text": "But this, again, is just part of regular maintenance in a database.",
    "start": "602530",
    "end": "605989"
  },
  {
    "text": "Indexes, just like queries, should be regularly tuned and look for new areas of optimization.",
    "start": "606430",
    "end": "612469"
  },
  {
    "text": "So really, with just these tools, you should see drastic improvement in your query performance.",
    "start": "613170",
    "end": "618029"
  },
  {
    "text": "The next measure you can consider for optimizing your query is by building",
    "start": "619330",
    "end": "623769"
  },
  {
    "text": "partitions on your table.",
    "start": "624510",
    "end": "625950"
  },
  {
    "text": "Now, partitions are much more so a database optimization.",
    "start": "626710",
    "end": "632509"
  },
  {
    "text": "So it's something that probably has to be taken as more of a team effort, a larger conversation.",
    "start": "633010",
    "end": "638890"
  },
  {
    "text": "But when working with a lot of data, sometimes that's what you need to do.",
    "start": "639070",
    "end": "643509"
  },
  {
    "text": "Because even if you've tuned perfectly with your query and your index,",
    "start": "643790",
    "end": "647537"
  },
  {
    "text": "sometimes you just can't sugarcoat querying a billion rows.",
    "start": "647538",
    "end": "651049"
  },
  {
    "text": "You need more optimization",
    "start": "651210",
    "end": "652629"
  },
  {
    "text": "and you need more filters.",
    "start": "652630",
    "end": "653650"
  },
  {
    "text": "So partitioning actually takes care of this more so at the storage level.",
    "start": "654090",
    "end": "657889"
  },
  {
    "text": "So we all, again, like we have our tables.",
    "start": "658750",
    "end": "660690"
  },
  {
    "text": "And in our tables, we have all of our data and all of information.",
    "start": "661210",
    "end": "665870"
  },
  {
    "text": "And so in that table, we actually are going to break it up horizontally is the way to think about it.",
    "start": "666590",
    "end": "673049"
  },
  {
    "text": "So that there are portions of the data that are kept together,",
    "start": "673050",
    "end": "677234"
  },
  {
    "text": "and we're actually going to completely segment them at the store level.",
    "start": "677234",
    "end": "680629"
  },
  {
    "text": "so that the queries can just target one segment without even needing to look into the others.",
    "start": "681110",
    "end": "687628"
  },
  {
    "text": "That's really what a partition is.",
    "start": "687970",
    "end": "689589"
  },
  {
    "text": "So a common example with this is time series.",
    "start": "689890",
    "end": "692850"
  },
  {
    "text": "Let's say you have a use case where there are millions of transactions a day.",
    "start": "693390",
    "end": "697769"
  },
  {
    "text": "Maybe it's a internet of things use case with lots of sensors that are going into a database.",
    "start": "697850",
    "end": "702548"
  },
  {
    "text": "That's gonna result in a lot of different, you know, rows being created or records being generated.",
    "start": "703030",
    "end": "708770"
  },
  {
    "text": "So how can we break that up?",
    "start": "709070",
    "end": "710129"
  },
  {
    "text": "You can essentially partition it by day or even by hour to make sure that you're then breaking up your data into easy pieces.",
    "start": "710620",
    "end": "718640"
  },
  {
    "text": "So let's say like this is one bucket.",
    "start": "719100",
    "end": "721839"
  },
  {
    "text": "That can be your first hour.",
    "start": "722240",
    "end": "724259"
  },
  {
    "text": "You have another bucket.",
    "start": "725060",
    "end": "726120"
  },
  {
    "text": "That's gonna be your second hour.",
    "start": "727220",
    "end": "729240"
  },
  {
    "text": "You know, and this would go on.",
    "start": "729920",
    "end": "731240"
  },
  {
    "text": "And this automatically happens as the data is being inserted, this is a setting you've put in your table at your database design.",
    "start": "731360",
    "end": "737199"
  },
  {
    "text": "So now, if your queries are going to run something like, show me all the records that have happened in the last hour,",
    "start": "737700",
    "end": "743642"
  },
  {
    "text": "you can just search this query, or basically make sure that you're just searching this bucket.",
    "start": "743642",
    "end": "748859"
  },
  {
    "text": "And from there, you're going to know that you've found it, and you never need to even look in any of these other buckets at all.",
    "start": "749300",
    "end": "755539"
  },
  {
    "text": "And this works the same way.",
    "start": "755820",
    "end": "757100"
  },
  {
    "text": "If you ever need to just look at a distinct number of buckets, it doesn't have to be just one.",
    "start": "757340",
    "end": "762640"
  },
  {
    "text": "So again, partitioning is a great tool of basically breaking up when you have really, really large data volumes.",
    "start": "763020",
    "end": "768279"
  },
  {
    "text": "And if queries and indexes aren't doing the trick, partitions could be the next step.",
    "start": "769400",
    "end": "773960"
  },
  {
    "text": "However, it is a major change.",
    "start": "774340",
    "end": "776279"
  },
  {
    "text": "You might have to re-org your tables.",
    "start": "776320",
    "end": "778059"
  },
  {
    "text": "So make sure you work with your team.",
    "start": "778380",
    "end": "779940"
  },
  {
    "text": "But you're going to have enough evidence from Explain and from the optimizations you've already applied",
    "start": "780120",
    "end": "785344"
  },
  {
    "text": "to have a very fruitful conversation, probably with your database administrator, on why partitions need to be built.",
    "start": "785344",
    "end": "791279"
  },
  {
    "text": "and that it could potentially lead to much better performance.",
    "start": "791720",
    "end": "795019"
  },
  {
    "text": "So between queries, indexes, and partitions, you should see great improvement in your query performance.",
    "start": "795500",
    "end": "801539"
  },
  {
    "text": "Now, the last step that really could be taken if you still are seeing query performance issues",
    "start": "802160",
    "end": "808217"
  },
  {
    "text": "would probably be to look into redesigning your data structure itself.",
    "start": "808217",
    "end": "812878"
  },
  {
    "text": "And this is no small undertaking and definitely should be a team decision.",
    "start": "813400",
    "end": "820160"
  },
  {
    "text": "But with all the evidence that you've gathered through this process of optimization,",
    "start": "820710",
    "end": "826182"
  },
  {
    "text": "you should be able to have a very fruitful discussion about how you've taken everything,",
    "start": "826182",
    "end": "830521"
  },
  {
    "text": "you know, every precaution, every optimization available to you, and we're still seeing query issues.",
    "start": "830521",
    "end": "835690"
  },
  {
    "text": "It might be time to actually change how you're storing your data.",
    "start": "836130",
    "end": "838830"
  },
  {
    "text": "So as you're deciding how you can better structure your data, this is a great thing to consider.",
    "start": "839790",
    "end": "845050"
  },
  {
    "text": "mostly think about how data is accessed,",
    "start": "845790",
    "end": "849097"
  },
  {
    "text": "and you want to make sure that data that is frequently accessed together is stored together.",
    "start": "849098",
    "end": "853690"
  },
  {
    "text": "And then you can kind of make that decision.",
    "start": "854130",
    "end": "855769"
  },
  {
    "text": "Do you want to de-norm tables together?",
    "start": "855830",
    "end": "857389"
  },
  {
    "text": "Do you wanna break them up based on relationships?",
    "start": "857450",
    "end": "859629"
  },
  {
    "text": "This is very easy to do if you're probably at the beginning stages of your application development,",
    "start": "860230",
    "end": "864618"
  },
  {
    "text": "but if you've inherited a legacy application or working with something with",
    "start": "864618",
    "end": "870006"
  },
  {
    "text": "many years of historic data, this will be a larger effort.",
    "start": "870006",
    "end": "872850"
  },
  {
    "text": "The other thing to consider would be parallel computing frameworks like Spark or Hadoop.",
    "start": "873570",
    "end": "878649"
  },
  {
    "text": "This is going to add parallelism basically to your queries so that you can query large amounts of data better.",
    "start": "878850",
    "end": "884509"
  },
  {
    "text": "Not a small undertaking.",
    "start": "885550",
    "end": "887229"
  },
  {
    "text": "This will be changing probably your middleware layer or how your data is queried itself.",
    "start": "887590",
    "end": "892190"
  },
  {
    "text": "So both of these are great options, but they do require a large effort from our teams.",
    "start": "893010",
    "end": "898389"
  },
  {
    "text": "So overall...",
    "start": "898390",
    "end": "900070"
  },
  {
    "text": "we have found that through all these different methods, we can certainly improve the performance of our queries.",
    "start": "900550",
    "end": "906690"
  },
  {
    "text": "So we always want to make sure that we're starting with the simple fixes,",
    "start": "907230",
    "end": "910222"
  },
  {
    "text": "what's probably in our control and easiest for us to change",
    "start": "910222",
    "end": "913576"
  },
  {
    "text": "before we go to more complex redesign and our architectural overhauls.",
    "start": "913576",
    "end": "917808"
  },
  {
    "text": "And when we're also thinking about",
    "start": "918030",
    "end": "920507"
  },
  {
    "text": "how are we going to benchmark ourselves, how are monitoring this, we want to leverage the explain method.",
    "start": "920507",
    "end": "925249"
  },
  {
    "text": "so that we're constantly measuring our performance.",
    "start": "925640",
    "end": "928360"
  },
  {
    "text": "And this shouldn't just be done when something goes wrong.",
    "start": "928520",
    "end": "930920"
  },
  {
    "text": "We really should constantly be tuning our queries before things get to that point.",
    "start": "931120",
    "end": "935140"
  },
  {
    "text": "So by mastering all these techniques,",
    "start": "935660",
    "end": "937430"
  },
  {
    "text": "we can make sure that we are all experts",
    "start": "937430",
    "end": "940928"
  },
  {
    "text": "in making sure that our queries are as performant as possible, that we keeping our runtime costs as low as possible.",
    "start": "940928",
    "end": "947100"
  },
  {
    "text": "And that we providing the necessary foundation we're gonna need for AI development.",
    "start": "947340",
    "end": "951720"
  }
]