[
  {
    "text": "In my previous video, I talked about what quantum \ncomputing is and what makes it special. But as  ",
    "start": "720",
    "end": "6000"
  },
  {
    "text": "a developer, I'm sure you want to know how to \nactually write a piece of code that would run  ",
    "start": "6000",
    "end": "10400"
  },
  {
    "text": "on a common computer. But before we dive into \nthat, let's just do a little bit of a quick  ",
    "start": "10400",
    "end": "15519"
  },
  {
    "text": "recap. Instead of the classical bits of 0s and 1s, \nquantum computers use qubits. A qubit can be a 0,  ",
    "start": "15520",
    "end": "25680"
  },
  {
    "text": "a 1, or any linear combination of the two. \nAnd that is what we called a superposition.  ",
    "start": "27120",
    "end": "35200"
  },
  {
    "text": "We can also entangle multiple qubits. So their\nstates become strongly correlated.  In order  ",
    "start": "36800",
    "end": "43120"
  },
  {
    "text": "to change the states of qubits, we apply \na series of gates, similar to the classical  ",
    "start": "43120",
    "end": "48480"
  },
  {
    "text": "logic gates. And in the end, we want to measure \nthese qubits so we can get the results.  ",
    "start": "48480",
    "end": "53840"
  },
  {
    "text": "So how do we take all these concepts into \ncode? And the answer is simple. We use a  ",
    "start": "55360",
    "end": "62160"
  },
  {
    "text": "quantum software development kit. In \nthis video, we will be using Qiskit.  ",
    "start": "62160",
    "end": "66960"
  },
  {
    "text": "Which is the most widely used quantum SDK today.  ",
    "start": "69280",
    "end": "72400"
  },
  {
    "text": "Qiskit is based on Python, which is fairly simple \nto learn, even if you've never used it before.  ",
    "start": "73280",
    "end": "77760"
  },
  {
    "text": "So let's write a simple program in his Qiskit. In this program, we will use two qubits.  ",
    "start": "79120",
    "end": "85840"
  },
  {
    "text": "We will put one into superposition, entangle it with the other, and then  ",
    "start": "88960",
    "end": "94880"
  },
  {
    "text": "do a measurement of both of them. And \nof course, all that is done using gates.  ",
    "start": "94880",
    "end": "99840"
  },
  {
    "text": "So let's start by importing quantum circuit from \nQiskit. We then can create a quantum circuit ",
    "start": "102000",
    "end": "119200"
  },
  {
    "text": "with two quantum registers \nand two classical registers.  ",
    "start": "124560",
    "end": "127840"
  },
  {
    "text": "The quantum registers are used for quantum  ",
    "start": "129680",
    "end": "132159"
  },
  {
    "text": "computation. One for each qubit. And the classical \nregisters are used to store the measured results.  ",
    "start": "133840",
    "end": "143840"
  },
  {
    "text": "We need a classical registers because \neven though the physical world is quantum,  ",
    "start": "145040",
    "end": "149120"
  },
  {
    "text": "the majority of the classical \nworld is still classical.  ",
    "start": "149760",
    "end": "152799"
  },
  {
    "text": "And the classical registers allow us to bring \nquantum information back into the classical world.  ",
    "start": "153440",
    "end": "158000"
  },
  {
    "text": "So the next thing we want to do is \napply some gates. And in this program,  ",
    "start": "160480",
    "end": "164319"
  },
  {
    "text": "we're going to apply two gates. The \nfirst one is the Hadamard gate ",
    "start": "164320",
    "end": "170000"
  },
  {
    "text": "on qubit 0. The Hadamard gate puts \nthe qubit into a superposition between 0  ",
    "start": "171920",
    "end": "179120"
  },
  {
    "text": "and 1. That means it now has an equal \nchance of being measured a 0 or 1.  ",
    "start": "179120",
    "end": "184959"
  },
  {
    "text": "The next gate we need is the control \nnot gate,  or \"cx\" for short.  ",
    "start": "186720",
    "end": "191200"
  },
  {
    "text": "The control not gate is a conditional two qubits gate. It has a control qubit",
    "start": "195440",
    "end": "202240"
  },
  {
    "text": "and the target qubit.",
    "start": "204080",
    "end": "205120"
  },
  {
    "text": "Without superposition, the control \nnot gate is fairly simple to understand.  ",
    "start": "210480",
    "end": "214480"
  },
  {
    "text": "That is, it is as if the state of the control qubit is \n1, then you flip the state of the target qubit.  ",
    "start": "215600",
    "end": "223680"
  },
  {
    "text": "And that's why it's called control not.  ",
    "start": "224240",
    "end": "226160"
  },
  {
    "text": "And because the states of least two \nqubits are now strongly correlated,  ",
    "start": "229040",
    "end": "233519"
  },
  {
    "text": "we now say they are entangled. So the \nlast thing we want to do is actually do  ",
    "start": "233520",
    "end": "238320"
  },
  {
    "text": "measurements so we can get the outputs. And we \ndo this by calling the measure all function.  ",
    "start": "238320",
    "end": "243840"
  },
  {
    "text": "And there you have it. We just wrote a simple \nquantum program using Qiskit. Now, if you take  ",
    "start": "246320",
    "end": "253120"
  },
  {
    "text": "this program and run it a bunch of times on an \nideal quantum computer, you'll find out that  ",
    "start": "253120",
    "end": "258320"
  },
  {
    "text": "there's a 50% chance of the outputs being 00 and \n50% chance of it being 11. But you would never  ",
    "start": "258960",
    "end": "266319"
  },
  {
    "text": "be a 01 or 10. The 50/50 of the first \nqubit comes from the superposition. And while  ",
    "start": "266320",
    "end": "276400"
  },
  {
    "text": "we didn't explicitly change the state of the \nsecond qubit, it got changed anyway because  ",
    "start": "276400",
    "end": "282000"
  },
  {
    "text": "it is entangled with the first qubit. \nSo it changes with the first qubit.  ",
    "start": "282000",
    "end": "286480"
  },
  {
    "text": "So in this program, we created a quantum \ncircuit which operates at the same level  ",
    "start": "292080",
    "end": "297599"
  },
  {
    "text": "as classical assembly language and allows you \nto efficiently manipulate the qubits directly.  ",
    "start": "297600",
    "end": "303520"
  },
  {
    "text": "However, if you're not fond of \nplaying with low level circuits,  ",
    "start": "304080",
    "end": "307919"
  },
  {
    "text": "Qiskit also offers a number of higher \nlevel algorithms. For example, Qiskit has  ",
    "start": "307920",
    "end": "315040"
  },
  {
    "text": "a package focusing on machine learning that has \na number of pre-built classes. You can take a  ",
    "start": "315680",
    "end": "322000"
  },
  {
    "text": "quantum kernel class, use it to train and test \ndata. You can then take this trained quantum  ",
    "start": "322000",
    "end": "330640"
  },
  {
    "text": "kernel and pass it into a classical algorithm \nsuch as the support vector classification  ",
    "start": "330640",
    "end": "336320"
  },
  {
    "text": "from scikit-learn. Then you can then \naccelerate your classical application.  ",
    "start": "336320",
    "end": "341760"
  },
  {
    "text": "Thanks for watching. If you have any questions, \nplease leave them in the comments below.  ",
    "start": "344400",
    "end": "349280"
  },
  {
    "text": "Also, please remember to Like this \nvideo and Subscribe to our channel  ",
    "start": "349280",
    "end": "353040"
  },
  {
    "text": "so we can continue to bring you \ncontent that matters to you.",
    "start": "353040",
    "end": "358880"
  }
]