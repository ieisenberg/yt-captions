[
  {
    "text": "Julia or Python? If you're trying to pick out a \nprograming language for your next project, it's  ",
    "start": "240",
    "end": "6959"
  },
  {
    "text": "not an easy choice, but let me help you decide. If \nyou're looking into a programing language to dive  ",
    "start": "6960",
    "end": "14040"
  },
  {
    "text": "into data science, Python is a strong contender. \nIt's become the language for AI, machine learning  ",
    "start": "14040",
    "end": "21840"
  },
  {
    "text": "and all things numbers. And it's easy to see \nwhy. It's got a gentle learning curve. It's  ",
    "start": "21840",
    "end": "27060"
  },
  {
    "text": "available on just about any computing platform. \nAnd thanks to a very active user community,  ",
    "start": "27060",
    "end": "33660"
  },
  {
    "text": "Python has tons and tons of sample source code out \nthere. There's really not a whole lot you can't do  ",
    "start": "35040",
    "end": "44280"
  },
  {
    "text": "with Python. At first glance, Julia and Python \nmight seem very similar. They do have a lot of  ",
    "start": "44280",
    "end": "51180"
  },
  {
    "text": "similarities. Both are relatively high-level \nlanguages. They're also both open source.  ",
    "start": "51180",
    "end": "60600"
  },
  {
    "text": "And they also share a characteristic of being \ndynamically typed languages-- that applies  ",
    "start": "61620",
    "end": "71100"
  },
  {
    "text": "to both of them. And that means that they can \nbe used for data science applications. And look,  ",
    "start": "72240",
    "end": "77520"
  },
  {
    "text": "even the way that you write code for Julia looks \nkind of similar to the way that you write code  ",
    "start": "77520",
    "end": "82979"
  },
  {
    "text": "for Python. But there are a few key differences \nto be aware of. First of all, Julia is all about  ",
    "start": "82980",
    "end": "91620"
  },
  {
    "text": "performance. Now, of course, no language starts \nout with the goal of being slow. But Julia  ",
    "start": "94380",
    "end": "102479"
  },
  {
    "text": "compiles down to efficient native code through \nthe use of LLVM, which is a series of compiler and  ",
    "start": "102480",
    "end": "111000"
  },
  {
    "text": "toolchain technologies designed around optimizing \ncode compilations for specific platforms.  ",
    "start": "111000",
    "end": "116340"
  },
  {
    "text": "Python code can be compiled into \nbyte code for some performance gains,  ",
    "start": "116880",
    "end": "121200"
  },
  {
    "text": "but the advantage still goes to Julia. \nWhen benchmarked against other languages  ",
    "start": "121200",
    "end": "126479"
  },
  {
    "text": "in a series of tests performing common code \npatterns like sorting, parsing integers,  ",
    "start": "126480",
    "end": "132120"
  },
  {
    "text": "matrix multiplication and statistics, the Julia \ncompiled code consistently ran faster than Python.  ",
    "start": "132120",
    "end": "139620"
  },
  {
    "text": "One of Julia's main stated goals from the very \nbeginning was to be competing with compiled C,  ",
    "start": "139620",
    "end": "146340"
  },
  {
    "text": "which has long been seen as the benchmark \nfor highly performant optimized code.  ",
    "start": "146340",
    "end": "151080"
  },
  {
    "text": "So that's Julia's -- performance. One of \nPython's greatest strengths is its extensibility.  ",
    "start": "152280",
    "end": "161400"
  },
  {
    "text": "What do I mean by extensibility? Well, after \nwe've worked out the core element of our projects,  ",
    "start": "163620",
    "end": "169200"
  },
  {
    "text": "we can bring in any number of additional libraries \nto extend the core functionality of the language.  ",
    "start": "169200",
    "end": "175379"
  },
  {
    "text": "So maybe we've worked out some pretty clever AI \nlogic. We've got some AI logic here. And then  ",
    "start": "175380",
    "end": "185640"
  },
  {
    "text": "simply by including a few new Python libraries, we \ncan extend that coding to include some-- let's see  ",
    "start": "185640",
    "end": "193140"
  },
  {
    "text": "--those are glasses. OCR, so they can read \ntext on its own. And then perhaps we can  ",
    "start": "194640",
    "end": "201240"
  },
  {
    "text": "introduce some robotics to help it get around. \nAll that functionality is just a library call  ",
    "start": "201240",
    "end": "209040"
  },
  {
    "text": "away and it means that Python really is the \"do \nanything\" language. It really is very extensible.  ",
    "start": "209040",
    "end": "219720"
  },
  {
    "text": "However, that extensibility is perhaps why it lags \nbehind Julia in the performance category. You see,  ",
    "start": "219720",
    "end": "225840"
  },
  {
    "text": "Python provides a basic functionality and \ngains its superpowers through the use of these  ",
    "start": "225840",
    "end": "231239"
  },
  {
    "text": "libraries. So for that benchmark that I mentioned \nearlier, Python is using things like numPy  ",
    "start": "231240",
    "end": "237480"
  },
  {
    "text": "for all of its matrix statistics and \nmultiplications. And then it's using OpenBlas  ",
    "start": "239340",
    "end": "247140"
  },
  {
    "text": "for some other work, like the basic-- that's the \nB --linear algebra sub-programs. So these are  ",
    "start": "248220",
    "end": "254880"
  },
  {
    "text": "all libraries that it's needing to use. And these \nare extremely powerful and widely used libraries,  ",
    "start": "254880",
    "end": "259380"
  },
  {
    "text": "but using them does require knowledge of \nthose specific libraries, whereas Julia  ",
    "start": "259380",
    "end": "264180"
  },
  {
    "text": "attempts to bring many of those capabilities and \nfunctionalities into the Julia language itself.  ",
    "start": "264180",
    "end": "270180"
  },
  {
    "text": "And that gives Julia a certain advantage \non the speed and simplicity side of things.  ",
    "start": "270180",
    "end": "274919"
  },
  {
    "text": "With regards to the code that you type and \nread, neither is terribly complex or confusing,  ",
    "start": "275760",
    "end": "281940"
  },
  {
    "text": "but they both follow a familiar and easy-to-read \nformat. They're both dynamically typed,  ",
    "start": "281940",
    "end": "286920"
  },
  {
    "text": "though Julia does something interesting, \nwhich is called \"multiple dispatch\"  ",
    "start": "286920",
    "end": "293820"
  },
  {
    "text": "with its typing. Now that's where different \nmethods can be used to handle different  ",
    "start": "296640",
    "end": "302520"
  },
  {
    "text": "combinations of data types. So, for example, if \nwe have the addition of two floats-- so float  ",
    "start": "302520",
    "end": "309300"
  },
  {
    "text": "plus float --that can be handled differently \nand optimized differently than the addition of  ",
    "start": "310440",
    "end": "316980"
  },
  {
    "text": "something else, say, two integers or even a string \nplus an integer. Now that means with multiple  ",
    "start": "316980",
    "end": "329100"
  },
  {
    "text": "dispatch, the method most specifically applicable \nto the data type in the argument-- say five plus  ",
    "start": "329100",
    "end": "336180"
  },
  {
    "text": "three --is matched to the optimization method \nthat is most optimal, in this case int plus int.  ",
    "start": "336180",
    "end": "342900"
  },
  {
    "text": "At the end of the day, the decision is up to \nyou. Python is just about available everywhere  ",
    "start": "343620",
    "end": "349740"
  },
  {
    "text": "that there's a process of capable of processing \nones and zeros. It's like your your local general  ",
    "start": "349740",
    "end": "354840"
  },
  {
    "text": "contractor who's been around for several decades. \nThey've seen every problem and if they can't solve  ",
    "start": "354840",
    "end": "360540"
  },
  {
    "text": "it themselves, they at least have a subcontractor \nthey can bring in to get the job done.  ",
    "start": "360540",
    "end": "364560"
  },
  {
    "text": "Julia started off as a general purpose language, \nbut it's really finding its success in the field  ",
    "start": "365460",
    "end": "370259"
  },
  {
    "text": "of data science and machine learning. It's like \nthe younger upstart who built their approach  ",
    "start": "370260",
    "end": "376080"
  },
  {
    "text": "around modern tools and techniques to get more \ndone thanks to specialization and efficiency. But  ",
    "start": "376080",
    "end": "381539"
  },
  {
    "text": "it's also been around long enough where it can't \nbe simply ignored as a flavor of the week. As far  ",
    "start": "381540",
    "end": "387360"
  },
  {
    "text": "as I can see, Python will be the language to \nlearn, if you're going to learn a language. It  ",
    "start": "387360",
    "end": "392159"
  },
  {
    "text": "provides a strong set of functionality \nthat only gets stronger when extended  ",
    "start": "392160",
    "end": "396720"
  },
  {
    "text": "through libraries and frameworks, where Julia is \nbuilt with performance as its top priority. So  ",
    "start": "396720",
    "end": "402480"
  },
  {
    "text": "it really comes down to where you need to go and \nhow important it is that you get there quickly.  ",
    "start": "402480",
    "end": "409380"
  },
  {
    "text": "If you have any questions, please drop us \na line below. And if you want to see more  ",
    "start": "410820",
    "end": "415020"
  },
  {
    "text": "videos like this in the future, please \nlike and subscribe. Thanks for watching.",
    "start": "415020",
    "end": "419580"
  }
]