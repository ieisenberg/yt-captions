[
  {
    "text": "Hi, everyone.",
    "start": "390",
    "end": "1430"
  },
  {
    "text": "Today I'm going to be talking to you about relational versus non-relational databases.",
    "start": "1430",
    "end": "4469"
  },
  {
    "text": "These are two different ways in which clients store the data that they have and operationalize it.",
    "start": "4800",
    "end": "9224"
  },
  {
    "text": "And we know there is so much data that is coming into every single company today",
    "start": "9390",
    "end": "12748"
  },
  {
    "text": "that it's important that customers have options for how they want to store that data.",
    "start": "12748",
    "end": "17279"
  },
  {
    "text": "So, let's start with relational databases.",
    "start": "17460",
    "end": "20144"
  },
  {
    "text": "Relational databases are a very structured way to store your data.",
    "start": "20280",
    "end": "24361"
  },
  {
    "text": "But to really understand a relational database, first we need to understand a table.",
    "start": "25840",
    "end": "30475"
  },
  {
    "text": "So all the data is stored in tables and those tables are connected to each other.",
    "start": "30550",
    "end": "34718"
  },
  {
    "text": "That's why we have the name \"relational\" and we see a relation in the name",
    "start": "34840",
    "end": "38368"
  },
  {
    "text": "because all these tables connect to each other.",
    "start": "38368",
    "end": "40200"
  },
  {
    "text": "They all have relations with each other.",
    "start": "40210",
    "end": "41890"
  },
  {
    "text": "So let's start with one table.",
    "start": "42070",
    "end": "45000"
  },
  {
    "text": "We have our customer.",
    "start": "45390",
    "end": "47263"
  },
  {
    "text": "So each table revolves around a single entity.",
    "start": "48530",
    "end": "51890"
  },
  {
    "text": "And with our customer, there is a lot of different information that we would want to know about them, right?",
    "start": "52310",
    "end": "56565"
  },
  {
    "text": "We'd want to know what their first name is,",
    "start": "56630",
    "end": "60185"
  },
  {
    "text": "their last name,",
    "start": "61191",
    "end": "64326"
  },
  {
    "text": "maybe their date of birth, their email,",
    "start": "65422",
    "end": "69534"
  },
  {
    "text": "and etcetera, etcetera, whatever other information would be relevant to know about the customer.",
    "start": "69535",
    "end": "73940"
  },
  {
    "text": "But we might also have customers that have the same first name or the same last name,",
    "start": "74150",
    "end": "78542"
  },
  {
    "text": "and we need a way to uniquely identify each customer.",
    "start": "78542",
    "end": "81290"
  },
  {
    "text": "So that's why we have our primary key, which is our customer ID.",
    "start": "81680",
    "end": "85641"
  },
  {
    "text": "And this is a unique identifier for each record in this table.",
    "start": "86270",
    "end": "90274"
  },
  {
    "text": "But like I said, with relational databases, we want to view each table as it connects to other tables.",
    "start": "90500",
    "end": "95300"
  },
  {
    "text": "So let's think about what a customer does.",
    "start": "95390",
    "end": "97368"
  },
  {
    "text": "A customer places an order, right?",
    "start": "97370",
    "end": "99244"
  },
  {
    "text": "So an order is actually a separate entity that would connect to our customer table.",
    "start": "99350",
    "end": "103596"
  },
  {
    "text": "So let's draw out our order table.",
    "start": "104090",
    "end": "107285"
  },
  {
    "text": "And what would we want to know about an order?",
    "start": "108470",
    "end": "110644"
  },
  {
    "text": "We'd want to know maybe what time it was placed,",
    "start": "110720",
    "end": "113714"
  },
  {
    "text": "what items are in it, and whatever else you think is relevant to know here.",
    "start": "113714",
    "end": "119114"
  },
  {
    "text": "But again, like with the customer ID, we need a unique way to identify each order.",
    "start": "119280",
    "end": "123750"
  },
  {
    "text": "So we have another primary key here called an order ID.",
    "start": "123840",
    "end": "127888"
  },
  {
    "text": "And if we look at each of these tables and we look at the data in them, we can really see how they connect to each other.",
    "start": "128900",
    "end": "135000"
  },
  {
    "text": "So let's take a customer table, for example.",
    "start": "135500",
    "end": "138500"
  },
  {
    "text": "We know we have all these different pieces of information that are relevant to know about the customer.",
    "start": "139250",
    "end": "144034"
  },
  {
    "text": "So I'm going to start with the customer ID.",
    "start": "144140",
    "end": "146816"
  },
  {
    "text": "And then we have their first name, last name, etc..",
    "start": "148930",
    "end": "156361"
  },
  {
    "text": "So like we said, each customer ID is unique.",
    "start": "156620",
    "end": "159680"
  },
  {
    "text": "There's only one for each record in the database.",
    "start": "159680",
    "end": "162260"
  },
  {
    "text": "So we have our first customer, let's call him John Doe.",
    "start": "162500",
    "end": "167136"
  },
  {
    "text": "Our second customer, let's say, is named Jane Smith.",
    "start": "168140",
    "end": "172715"
  },
  {
    "text": "And third customer.",
    "start": "174440",
    "end": "176660"
  },
  {
    "text": "We can just continue populating information about every single customer that we have.",
    "start": "177860",
    "end": "183080"
  },
  {
    "text": "And then with our order table, we start with our order ID,",
    "start": "183350",
    "end": "191313"
  },
  {
    "text": "and we have other information that we want to know, right?",
    "start": "191313",
    "end": "194510"
  },
  {
    "text": "Time, items, etc..",
    "start": "194530",
    "end": "196659"
  },
  {
    "text": "But what we also need to know is which customer placed what order, right?",
    "start": "197530",
    "end": "201350"
  },
  {
    "text": "So, in order to do that, we actually connect the customer ID to the order table.",
    "start": "201370",
    "end": "205659"
  },
  {
    "text": "So we take this information and we move it over here.",
    "start": "205810",
    "end": "208959"
  },
  {
    "text": "So in the customer table, this is the primary key.",
    "start": "209080",
    "end": "211562"
  },
  {
    "text": "But when we move it over, this becomes the foreign key.",
    "start": "211652",
    "end": "213984"
  },
  {
    "text": "So now we can add in our customer ID here.",
    "start": "214180",
    "end": "217284"
  },
  {
    "text": "And we have our first order.",
    "start": "219100",
    "end": "220870"
  },
  {
    "text": "It's placed at this time.",
    "start": "220870",
    "end": "222504"
  },
  {
    "text": "Second order.",
    "start": "222790",
    "end": "223680"
  },
  {
    "text": "Third order.",
    "start": "223690",
    "end": "224934"
  },
  {
    "text": "And looking at our customer ID, let's say that this is 1.",
    "start": "225480",
    "end": "229269"
  },
  {
    "text": "And our second one is 2, our third one is also 2.",
    "start": "229690",
    "end": "233921"
  },
  {
    "text": "And now we can see, through connecting these two databases,",
    "start": "234220",
    "end": "237128"
  },
  {
    "text": "that customer John Doe made the first order.",
    "start": "237128",
    "end": "240009"
  },
  {
    "text": "We see what time, what items.",
    "start": "240040",
    "end": "241659"
  },
  {
    "text": "He also made the second order, and Jane Smith made the third order.",
    "start": "242050",
    "end": "246355"
  },
  {
    "text": "So as we can see with relational databases, this is a very structured way to view the information that's coming into a company.",
    "start": "246760",
    "end": "253868"
  },
  {
    "text": "But with that, there's a lot of benefits that come in.",
    "start": "254065",
    "end": "256570"
  },
  {
    "text": "So one of them is that the structure really ensures data consistency.",
    "start": "256930",
    "end": "262449"
  },
  {
    "text": "And you can see that all the data that we have over here is very consistent, right?",
    "start": "262780",
    "end": "267605"
  },
  {
    "text": "We can see that it's easy to manage that data and easy to get an overview of what is in your database.",
    "start": "267640",
    "end": "272576"
  },
  {
    "text": "This also helps with security.",
    "start": "274130",
    "end": "277070"
  },
  {
    "text": "So, let's say that you are in hospital and you have a lot of patients.",
    "start": "277870",
    "end": "280810"
  },
  {
    "text": "You have information about their medical history, what medications are taking.",
    "start": "280810",
    "end": "284620"
  },
  {
    "text": "That is all protected information.",
    "start": "284860",
    "end": "286388"
  },
  {
    "text": "So through using a relational database, you can encrypt certain tables,",
    "start": "286750",
    "end": "289995"
  },
  {
    "text": "you can hide information,",
    "start": "289995",
    "end": "291444"
  },
  {
    "text": "and you can make sure the right people have access to the right data.",
    "start": "291444",
    "end": "293920"
  },
  {
    "text": "And then finally, we have ease of backup and recovery.",
    "start": "294820",
    "end": "298136"
  },
  {
    "text": "So, because this data is very consistent and at all times it remains consistent,",
    "start": "300670",
    "end": "305171"
  },
  {
    "text": "it's easy to save the database at any point and easily recover from what you recently had.",
    "start": "305171",
    "end": "310690"
  },
  {
    "text": "So this gives us an idea of what a relational database looks like.",
    "start": "310900",
    "end": "313569"
  },
  {
    "text": "Now on the other hand, we have non-relational databases.",
    "start": "314080",
    "end": "317078"
  },
  {
    "text": "So this is a break from the very structured approach of a relational database.",
    "start": "317830",
    "end": "322180"
  },
  {
    "text": "There are a few different types of non-relational databases.",
    "start": "322510",
    "end": "325494"
  },
  {
    "text": "First, we have key value databases.",
    "start": "325750",
    "end": "328450"
  },
  {
    "text": "And this shows data as a key and a value, right?",
    "start": "330330",
    "end": "333254"
  },
  {
    "text": "We have one key that ties to one unique value.",
    "start": "333254",
    "end": "337169"
  },
  {
    "text": "Another key that ties to another unique value.",
    "start": "337440",
    "end": "340118"
  },
  {
    "text": "And you can retrieve these values through plugging in the keys and getting that information back.",
    "start": "340118",
    "end": "344339"
  },
  {
    "text": "We also have column store databases.",
    "start": "345380",
    "end": "349535"
  },
  {
    "text": "And this stores data in separate columns and is optimized for performance.",
    "start": "350990",
    "end": "356985"
  },
  {
    "text": "And then we have graph databases.",
    "start": "358130",
    "end": "360650"
  },
  {
    "text": "So this shows different entities in the database and how they connect to each other in a graphical way.",
    "start": "361880",
    "end": "367925"
  },
  {
    "text": "And finally, we have our document store databases.",
    "start": "369580",
    "end": "373495"
  },
  {
    "text": "So this has data and documents, and a group of documents is called a collection,",
    "start": "377340",
    "end": "381880"
  },
  {
    "text": "and you can essentially retrieve the information as it relates to a single collection.",
    "start": "381881",
    "end": "385830"
  },
  {
    "text": "So you see that there are a lot more options here with the non-relational databases.",
    "start": "386190",
    "end": "390764"
  },
  {
    "text": "And that's really why customers might choose a non-relational option as opposed to a relational one.",
    "start": "390900",
    "end": "395190"
  },
  {
    "text": "There is added flexibility in going with a non-relational database.",
    "start": "395580",
    "end": "400018"
  },
  {
    "text": "So that's really one of the key differentiators and why customers choose non-relational over relational.",
    "start": "401540",
    "end": "407554"
  },
  {
    "text": "And it also has high scalability.",
    "start": "407950",
    "end": "410426"
  },
  {
    "text": "It's easy to scale non-relational databases out horizontally",
    "start": "412600",
    "end": "416405"
  },
  {
    "text": "and this means that they can essentially scale out without adding more resources.",
    "start": "416405",
    "end": "423055"
  },
  {
    "text": "And finally, cost effectiveness.",
    "start": "423520",
    "end": "427155"
  },
  {
    "text": "And this ties back into the scalability, right, because you're not adding more resources, but you're able to scale out and add more data in.",
    "start": "431780",
    "end": "438409"
  },
  {
    "text": "So we see that we have a lot of different ways in which customers can store their information",
    "start": "438860",
    "end": "442834"
  },
  {
    "text": "and make sense of all the data that's coming into the company.",
    "start": "442834",
    "end": "445040"
  },
  {
    "text": "There are different ways that people can leverage both of these databases.",
    "start": "445400",
    "end": "448970"
  },
  {
    "text": "There are different use cases.",
    "start": "449060",
    "end": "450260"
  },
  {
    "text": "People might use relational databases for more traditional workloads.",
    "start": "450260",
    "end": "454440"
  },
  {
    "text": "If you have a point of sale system, if you're tracking a large amount of records and you want to do so in a very structured way,",
    "start": "454460",
    "end": "460520"
  },
  {
    "text": "then relational databases might be what you go for, for that.",
    "start": "460520",
    "end": "463399"
  },
  {
    "text": "But if you're developing a new application, you want added flexibility,",
    "start": "463820",
    "end": "467236"
  },
  {
    "text": "then customers might defer to a non-relational database.",
    "start": "467356",
    "end": "470509"
  },
  {
    "text": "But either way, our clients have options as to how they want to store their data and how they want to best operationalize it.",
    "start": "470630",
    "end": "476584"
  },
  {
    "text": "Thank you.",
    "start": "476660",
    "end": "477685"
  },
  {
    "text": "Thank you.",
    "start": "479160",
    "end": "479670"
  },
  {
    "text": "If you like this video and want to see more like it, please like and subscribe.",
    "start": "479700",
    "end": "483090"
  },
  {
    "text": "If you have any questions, please drop them in the comments below.",
    "start": "483180",
    "end": "486481"
  }
]