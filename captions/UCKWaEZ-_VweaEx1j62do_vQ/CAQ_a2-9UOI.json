[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "These days I hear the terms \nObservability, Monitoring, and APM,  ",
    "start": "320",
    "end": "4080"
  },
  {
    "text": "or Application Performance Management \nthrown around seemingly interchangeably,  ",
    "start": "4080",
    "end": "8559"
  },
  {
    "text": "but these terms actually mean quite different \nthings. So let's dive in head first and see an  ",
    "start": "8560",
    "end": "13200"
  },
  {
    "text": "example of how exactly these things differ. So to \nstart I'm going to start with kind of a Java EE  ",
    "start": "13200",
    "end": "19040"
  },
  {
    "start": "17000",
    "end": "212000"
  },
  {
    "text": "application, it's kind of old school, we'll \ngo back you know maybe a decade. And let's say  ",
    "start": "19040",
    "end": "25520"
  },
  {
    "text": "that we've got some components in this Java EE app \nthat actually power it. So something important to  ",
    "start": "25520",
    "end": "30400"
  },
  {
    "text": "remember here although we might be using a SOA, or \nservice oriented architecture, this is not exactly  ",
    "start": "30400",
    "end": "35680"
  },
  {
    "text": "microservices. So they're not communicating over \nRest APIs. So you have some inherent advantages  ",
    "start": "35680",
    "end": "41440"
  },
  {
    "text": "here, for example you can take advantage of \nlike the framework the Java EE framework to  ",
    "start": "41440",
    "end": "46079"
  },
  {
    "text": "output log files which will probably all come \nout into the same directory and the timestamps  ",
    "start": "46640",
    "end": "51120"
  },
  {
    "text": "match up so things are good. In addition, you \ncould take advantage of something like an APM  ",
    "start": "51120",
    "end": "55680"
  },
  {
    "text": "solution which is kind of like a one size fits \nall set and forget so you install it and it'll  ",
    "start": "55680",
    "end": "61120"
  },
  {
    "text": "kind of get rich analytics and data and metrics \nabout the running services within the application.  ",
    "start": "61120",
    "end": "66080"
  },
  {
    "text": "So essentially what we've done is we've made \nour system observable so that you know our  ",
    "start": "67280",
    "end": "72080"
  },
  {
    "text": "Ops teams were then able to kind of look into \nit and identify problems and figure out you  ",
    "start": "72080",
    "end": "79360"
  },
  {
    "text": "know if anything needed to be done. So for the \nbusiness objectives back then this was essentially  ",
    "start": "79360",
    "end": "84320"
  },
  {
    "text": "good enough, but this tends to fall apart very \nquickly when you start to move to a more cloud  ",
    "start": "84320",
    "end": "90080"
  },
  {
    "text": "native approach where you have multiple run times \nand multiple kind of layers to the architecture.",
    "start": "90080",
    "end": "94480"
  },
  {
    "text": "So let's say we have an example app here. So we'll \nsay we'll start with node as a front end. Let's  ",
    "start": "96560",
    "end": "102799"
  },
  {
    "text": "say we also have a Java backend application. And \nthen finally let's say we also have a Python app  ",
    "start": "102800",
    "end": "109600"
  },
  {
    "text": "which is doing some data processing. So let's \nsee how these things work with each other so  ",
    "start": "110640",
    "end": "114960"
  },
  {
    "text": "the front-end app probably talks to the Java app \nand also the Python app for some data processing.  ",
    "start": "114960",
    "end": "119440"
  },
  {
    "text": "The Java app probably communicates with a database \nand then the Python app probably talks to the Java  ",
    "start": "120320",
    "end": "125280"
  },
  {
    "text": "app for kind of crud operations. So this is kind \nof my quick sketch, kind of a dummy layout for a  ",
    "start": "125280",
    "end": "132640"
  },
  {
    "text": "microservices based application. You can take it a \nstep further and even say that this is all running  ",
    "start": "132640",
    "end": "137760"
  },
  {
    "text": "within Kubernetes. So we've got these \ncontainer-based applications running in a cluster.  ",
    "start": "138720",
    "end": "144400"
  },
  {
    "text": "So immediately the first problem I can \nsee here is that with multiple runtimes  ",
    "start": "145280",
    "end": "148720"
  },
  {
    "text": "we now have to think about multiple \ndifferent agents or ways to collect data.  ",
    "start": "148720",
    "end": "152240"
  },
  {
    "text": "So instead of just one APM tool we might have \nto start thinking about pulling in multiple  ",
    "start": "152240",
    "end": "156320"
  },
  {
    "text": "so how would we con consolidate all \nthat data right so that's a challenge.  ",
    "start": "157120",
    "end": "160159"
  },
  {
    "text": "In addition, let's think about things like \nlogging. So each of these runtimes probably  ",
    "start": "161120",
    "end": "165440"
  },
  {
    "text": "outputting logs in a different place, and you \nknow, we have to figure out how we consolidate  ",
    "start": "165440",
    "end": "169200"
  },
  {
    "text": "all those. Maybe we use a log streaming service. \nRegardless you can see the complexity starts to  ",
    "start": "169200",
    "end": "173440"
  },
  {
    "text": "grow. And finally, as you add more services and \nmicroservices components to this architecture,  ",
    "start": "173440",
    "end": "178800"
  },
  {
    "text": "say a user comes in where try to actually access \none of these services and they run into an error  ",
    "start": "178800",
    "end": "184320"
  },
  {
    "text": "you need to trace that request through the \nmultiple services. Well unless you have the  ",
    "start": "184320",
    "end": "188960"
  },
  {
    "text": "right architecture infrastructure in place, \nyou know something like headers on requests,  ",
    "start": "188960",
    "end": "194000"
  },
  {
    "text": "maybe a way to handle web sockets, things are \ngoing to start to get messy and you can see how  ",
    "start": "194880",
    "end": "198880"
  },
  {
    "text": "the technical complexity grows quite large. So \nhere's where Observability comes in and actually  ",
    "start": "198880",
    "end": "205120"
  },
  {
    "text": "differs, and differs itself from kind of standard \nAPM tools. It thinks about the more holistic cloud  ",
    "start": "205120",
    "end": "210799"
  },
  {
    "text": "cloud-native approach for being able to do \nthings like logging and monitoring and that  ",
    "start": "210800",
    "end": "215040"
  },
  {
    "start": "212000",
    "end": "281000"
  },
  {
    "text": "kind of thing. So I'll say there's three major \nsteps for any sort of Observability solution.  ",
    "start": "215040",
    "end": "220959"
  },
  {
    "text": "We'll start with the first one we'll call \nit collect, because we need to collect data.  ",
    "start": "220960",
    "end": "226080"
  },
  {
    "text": "Then we'll go to monitor, and we'll talk about \nthis because this is you know part of monitoring.  ",
    "start": "226080",
    "end": "231440"
  },
  {
    "text": "And finally we'll end with analyze, kind of doing \nsomething with the actual data that you have so  ",
    "start": "231440",
    "end": "238080"
  },
  {
    "text": "with the collect step, you know first thing let's \nsay that we actually made our system observable.  ",
    "start": "238080",
    "end": "242320"
  },
  {
    "text": "So the great thing is with Kubernetes you get \nsome CPU memory data automatically. So let's say  ",
    "start": "243120",
    "end": "247680"
  },
  {
    "text": "we get some of that, we get some logs from the \napplication all streaming to the same location  ",
    "start": "247680",
    "end": "252079"
  },
  {
    "text": "and let's say we even get some other stuff like \nhigh availability numbers or average latency,  ",
    "start": "253040",
    "end": "257919"
  },
  {
    "text": "you know things that we want to \nbe able to track and monitor.  ",
    "start": "257920",
    "end": "260080"
  },
  {
    "text": "So that brings me to my next step. \nSo once we have this data available  ",
    "start": "261200",
    "end": "264720"
  },
  {
    "text": "we need to be able to actually do something with \nit, at least visualizing it maybe if we're not  ",
    "start": "266320",
    "end": "271200"
  },
  {
    "text": "actually even solving problems yet what do \nwe do with this data. Well maybe we create  ",
    "start": "271200",
    "end": "276320"
  },
  {
    "text": "some dashboards to be able to monitor the \nhealth of our application, and say we create  ",
    "start": "276320",
    "end": "281920"
  },
  {
    "start": "281000",
    "end": "377000"
  },
  {
    "text": "multiple dashboards to be able to track different \nservices or kind of different business objectives,  ",
    "start": "281920",
    "end": "287440"
  },
  {
    "text": "high availability versus latency, that kind of \nthing. Now the final thing that I want to talk  ",
    "start": "287440",
    "end": "292960"
  },
  {
    "text": "about here is what do we do next. So say we found \nsome bug in the application by kind of looking  ",
    "start": "292960",
    "end": "299039"
  },
  {
    "text": "at our monitoring dashboards and we need to dive \nin deeper and fix the problem with the node app.  ",
    "start": "299040",
    "end": "304160"
  },
  {
    "text": "Well the great thing about that is an \nObservability solution should allow you to do  ",
    "start": "305440",
    "end": "310160"
  },
  {
    "text": "just that, it allows you to actually take it even \na step further because these days with Kubernetes  ",
    "start": "310160",
    "end": "316080"
  },
  {
    "text": "you're getting a lot of that information from the \nKubernetes layer. So this is something I want to  ",
    "start": "316080",
    "end": "320159"
  },
  {
    "text": "quickly pause and talk about. so with APM tools in \nthe past they were really kind of focused on kind  ",
    "start": "320160",
    "end": "325120"
  },
  {
    "text": "of like resource constraints, CPU usage, memory \nusage, that kind of thing. These days that's been  ",
    "start": "325120",
    "end": "330080"
  },
  {
    "text": "offloaded to the Kubernetes layer, so you know \nObservability kind of took APM and evolved it  ",
    "start": "330080",
    "end": "336479"
  },
  {
    "text": "to the next stage, pulled it a step up and \nenables our users to focus on things like  ",
    "start": "336480",
    "end": "341440"
  },
  {
    "text": "SLOs and SLIs, Service Level Objectives \nand Service Level Indicators.  ",
    "start": "342080",
    "end": "346159"
  },
  {
    "text": "So these will enable you to actually focus \non things that matter to your business.  ",
    "start": "347600",
    "end": "351360"
  },
  {
    "text": "So things like making sure that latencies \nare low or that application uptime is  ",
    "start": "351360",
    "end": "355599"
  },
  {
    "text": "high. So I think that's kind of the crucial three \nsteps for any sort of observability solution.  ",
    "start": "355600",
    "end": "361120"
  },
  {
    "text": "Let's take a step back again. These \nthings can be hard to set up on your own  ",
    "start": "362240",
    "end": "366960"
  },
  {
    "text": "with open source projects and capabilities \npulling all the different things together,  ",
    "start": "366960",
    "end": "370960"
  },
  {
    "text": "so you might be looking at an Enterprise \nObservability Solution and so when you're  ",
    "start": "372000",
    "end": "377520"
  },
  {
    "start": "377000",
    "end": "581000"
  },
  {
    "text": "comparing competitors and looking at building \nout your enterprise observability capability  ",
    "start": "377520",
    "end": "382080"
  },
  {
    "text": "I would look at kind of three main \nthings. Now let's start with automation.  ",
    "start": "382080",
    "end": "388479"
  },
  {
    "text": "Now every step of the way we need to make sure \nthat automation is there to make things easier  ",
    "start": "389440",
    "end": "393440"
  },
  {
    "text": "so let's say that our dev team pushes out a new \nversion of the node app and go from v1 to v2.  ",
    "start": "393440",
    "end": "399520"
  },
  {
    "text": "Now let's say they inadvertently introduced a \nbug. Instead of making a bulk API call they now  ",
    "start": "400640",
    "end": "406000"
  },
  {
    "text": "make individual API calls to the Python app. So \nin our monitoring dashboard our Ops team's like  ",
    "start": "406000",
    "end": "411200"
  },
  {
    "text": "oh guys something's wrong, the DB app is getting a \nlot of requests what's going on? Well you need to  ",
    "start": "411200",
    "end": "416320"
  },
  {
    "text": "be able to kind of automatically go back and trace \nthrough the requests and identify what happened.  ",
    "start": "416320",
    "end": "422080"
  },
  {
    "text": "That actually brings me to my second point as \nwell, which is context. It's always important,  ",
    "start": "422080",
    "end": "427360"
  },
  {
    "text": "I can spell, to have that context. So automation \nis important here because when upgrading to the  ",
    "start": "427360",
    "end": "433360"
  },
  {
    "text": "new version a node you want to make sure that the \nright agent is automatically installed and kind  ",
    "start": "433360",
    "end": "437919"
  },
  {
    "text": "of the instrumentation is in place so your \ndev team doesn't quite have to do that, and  ",
    "start": "437920",
    "end": "442560"
  },
  {
    "text": "as new services get added you want your monitoring \ndashboards to be automatically updated as well.  ",
    "start": "442560",
    "end": "446639"
  },
  {
    "text": "And that context is extremely crucial as with \nthis example we needed to be able to trace that  ",
    "start": "447280",
    "end": "452320"
  },
  {
    "text": "request back to the source of the problem. So once \nwe've traced that request back to the source with  ",
    "start": "452320",
    "end": "457200"
  },
  {
    "text": "that context that we have the third step here \nand I think probably one of the most important  ",
    "start": "457200",
    "end": "462320"
  },
  {
    "text": "is action. What do we actually do now? And that \nbrings me to my last step here the analyze phase,  ",
    "start": "462320",
    "end": "468880"
  },
  {
    "text": "which remember we talked about was \nkind of an evolution of traditional  ",
    "start": "468880",
    "end": "471600"
  },
  {
    "text": "APM tools to kind of the the way that \nObservability tools implement that today.  ",
    "start": "471600",
    "end": "476000"
  },
  {
    "text": "So when you get to this step you'll probably want \nto look at maybe the SLIs within the node app.  ",
    "start": "476640",
    "end": "481440"
  },
  {
    "text": "Maybe dive in deeper, right. So maybe you look \nin and you identify that you need to look at  ",
    "start": "481440",
    "end": "485760"
  },
  {
    "text": "application trace logs. So you look in the trace \nlogs and you identify some problems and you figure  ",
    "start": "485760",
    "end": "490960"
  },
  {
    "text": "out what the what the fix is you tell it to your \ndev team you know maybe the last step here is fix  ",
    "start": "490960",
    "end": "496639"
  },
  {
    "text": "and then rinse and repeat for any other \nissues that might come up in the future.  ",
    "start": "497760",
    "end": "500880"
  },
  {
    "text": "So I think Enterprise Observability is extremely \ncrucial here when we're kind of looking at  ",
    "start": "502160",
    "end": "506720"
  },
  {
    "text": "the bigger picture because it's not \njust about having the individual pieces,  ",
    "start": "506720",
    "end": "510480"
  },
  {
    "text": "which again like I said might be quite hard \nto set up with purely open source approaches,  ",
    "start": "510480",
    "end": "514240"
  },
  {
    "text": "but you want to think about automation to make \nsure things are kind of set up seamlessly to  ",
    "start": "514800",
    "end": "519760"
  },
  {
    "text": "reduce the overhead on your side. make sure you \nhave context to be able to see how services work  ",
    "start": "519760",
    "end": "524960"
  },
  {
    "text": "with each other maybe even generate things like \ndependency graphs to see the broader view because  ",
    "start": "524960",
    "end": "530800"
  },
  {
    "text": "you might not always have a light board like \nthis to see the architecture so cleanly. And  ",
    "start": "530800",
    "end": "534880"
  },
  {
    "text": "finally being able to take action when you do find \na problem. So making sure that your Observability  ",
    "start": "534880",
    "end": "540400"
  },
  {
    "text": "solution has a way to automatically pull together \ndata from multiple sources, multiple services,  ",
    "start": "540400",
    "end": "545600"
  },
  {
    "text": "and then figure out what's valid and necessary \nfor you to be able to make that fix happen. So  ",
    "start": "546240",
    "end": "553200"
  },
  {
    "text": "IBM is invested in making sure our clients can \neffectively set up Enterprise Observability  ",
    "start": "553200",
    "end": "557840"
  },
  {
    "text": "with the recent acquisition of Instanta. \nTo learn more about the acquisition,  ",
    "start": "557840",
    "end": "561680"
  },
  {
    "text": "or to get a showcase of the capabilities be sure \nto check out the links in the description below.  ",
    "start": "561680",
    "end": "566160"
  },
  {
    "text": "As always thanks for watching our videos. If you \nliked the video or have any questions or comments,  ",
    "start": "566960",
    "end": "571360"
  },
  {
    "text": "be sure to drop a like and a question or \ncomment below. Be sure to subscribe and  ",
    "start": "571360",
    "end": "575440"
  },
  {
    "text": "stay tuned for more videos like \nthis in the future. Thank you.",
    "start": "575440",
    "end": "580080"
  }
]