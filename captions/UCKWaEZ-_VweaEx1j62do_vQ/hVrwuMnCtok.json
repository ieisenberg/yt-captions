[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "Hello everyone, my name is Brian Truong, and today we're going to be talking about gRPC.",
    "start": "480",
    "end": "4032"
  },
  {
    "text": "So gRPC is a modern communication framework that was introduced in 2015 and is governed by the Cloud Native Computing Foundation.",
    "start": "5640",
    "end": "14160"
  },
  {
    "text": "And today, I'm just going to introduce the concepts with a simple example,",
    "start": "14580",
    "end": "18390"
  },
  {
    "text": "and hopefully that will outline some of the benefits that it could bring to your application.",
    "start": "18390",
    "end": "22199"
  },
  {
    "start": "22000",
    "end": "96000"
  },
  {
    "text": "So, let's say we have an application and we have a front end -- and I'm going to signify this with a little computer monitor.",
    "start": "23100",
    "end": "31619"
  },
  {
    "text": "And the majority of the talk today will be about the back end layer.",
    "start": "32640",
    "end": "37079"
  },
  {
    "text": "So, let's say in our example, we have a back end microservices layer of Python.",
    "start": "37140",
    "end": "43829"
  },
  {
    "text": "So let's say Python handle something like analytics, it doesn't really matter, but Python is one microservice.",
    "start": "45180",
    "end": "50288"
  },
  {
    "text": "And let's say you have another in Java and one in Golang, for example.",
    "start": "50920",
    "end": "56248"
  },
  {
    "text": "And what I'm going to do is, I'm going to go ahead and draw arrows between them",
    "start": "58780",
    "end": "63429"
  },
  {
    "text": "to signify that these microservices need to connect and communicate with each other.",
    "start": "63430",
    "end": "68079"
  },
  {
    "text": "I do want to stop here and point out that I am specifically talking about communication between microservices.",
    "start": "69020",
    "end": "74025"
  },
  {
    "text": "And I'm not talking about communication between the front end and the back end",
    "start": "74226",
    "end": "79030"
  },
  {
    "text": "because communication usually -- communication via gRPC does not natively work out of the box with web browsers.",
    "start": "79030",
    "end": "89500"
  },
  {
    "text": "So, in particular, gRPC is more oriented for this type of communication.",
    "start": "89510",
    "end": "94729"
  },
  {
    "start": "96000",
    "end": "159000"
  },
  {
    "text": "So, the first talking point that I want to mention with gRPC is that it brings about significant improvements in convenience and scalability.",
    "start": "96470",
    "end": "105709"
  },
  {
    "text": "So, I'll just write \"convenience\" here.",
    "start": "106250",
    "end": "107990"
  },
  {
    "text": "And if we were -- if we were to not use gRPC, it would be important to note that Python has its own HTTP client libraries.",
    "start": "109660",
    "end": "117759"
  },
  {
    "text": "Java has its own. Golang has its own.",
    "start": "117770",
    "end": "119849"
  },
  {
    "text": "And these are client libraries that are supported by different groups.",
    "start": "119849",
    "end": "124750"
  },
  {
    "text": "And if we were to extend them, there would be different individuals that are working to maintain these client libraries,",
    "start": "125230",
    "end": "132204"
  },
  {
    "text": "and it could get out of hand, sspecially as we add more microservices that could be of different runtimes in different languages.",
    "start": "132205",
    "end": "139179"
  },
  {
    "text": "Now gRPC handles all of the implementation to the HTTP protocol for us.",
    "start": "140050",
    "end": "145750"
  },
  {
    "text": "So, as a developer, we don't have to worry about that level of detail since gRPC implements the connections with HTTP 2.0 for us.",
    "start": "145750",
    "end": "156220"
  },
  {
    "text": "So, that's something that we don't have to worry about moving forward.",
    "start": "156220",
    "end": "159219"
  },
  {
    "start": "159000",
    "end": "257000"
  },
  {
    "text": "Now, on top of that, hand-in-hand with convenience, is gRPC offers code generation.",
    "start": "160260",
    "end": "166386"
  },
  {
    "text": "Now you're probably wondering how does code generation work?",
    "start": "167430",
    "end": "170303"
  },
  {
    "text": "How does it know what code to generate and whatnot?",
    "start": "170550",
    "end": "172199"
  },
  {
    "text": "And the answer lies in the protocol buffers.",
    "start": "172950",
    "end": "176090"
  },
  {
    "text": "And if you're not familiar with protocol buffers, you can essentially think of them as a form of a contract for communication.",
    "start": "180770",
    "end": "187879"
  },
  {
    "text": "So, traditionally with an API, you don't necessarily have a API contract that is defined by the protocol itself.",
    "start": "188270",
    "end": "198090"
  },
  {
    "text": "So, if we're using REST, for example, you're just sending JSON messages with key-value pairs",
    "start": "198110",
    "end": "202940"
  },
  {
    "text": "that aren't checked until you get to the receiving end, and that's where it handles it.",
    "start": "202940",
    "end": "207770"
  },
  {
    "text": "But with these protocol buffers in the proto file, which is where you define the --",
    "start": "208250",
    "end": "217954"
  },
  {
    "text": "what is essentially a schema for the data that is being sent -- you can define things like the fields that you expect,",
    "start": "217955",
    "end": "222807"
  },
  {
    "text": "which fields are required, which fields are optional, as well as the object types for these fields. On top of that,",
    "start": "222807",
    "end": "228648"
  },
  {
    "text": "in the proto file for the protocol buffer, you also define the procedures that you expect to expose, and these are essentially defining which procedures.",
    "start": "228660",
    "end": "240299"
  },
  {
    "text": "So, RPC, standing for Remote Procedure Call, you're essentially defining what procedures are callable remotely from other microservices.",
    "start": "240300",
    "end": "249419"
  },
  {
    "text": "And what happens is, if you want to have the code generated, you run the proto file against a compiler, and what is output is source code in your respective language.",
    "start": "250260",
    "end": "263869"
  },
  {
    "start": "257000",
    "end": "435000"
  },
  {
    "text": "So, for example, if this was Java and you defined in your proto file that you were expecting messages to have three fields of type int, string, etc.,",
    "start": "264770",
    "end": "278104"
  },
  {
    "text": "what is output is essentially an interface that allows you to create-- that creates the classes for you",
    "start": "278105",
    "end": "287028"
  },
  {
    "text": "that implements the object types that you outlined in your proto file.",
    "start": "287028",
    "end": "292032"
  },
  {
    "text": "Now, the next point I want to talk about is performance.",
    "start": "292890",
    "end": "296580"
  },
  {
    "text": "And we already touched a bit about performance with HTTP 2.0 being a much more modern protocol than HTTP 1.1",
    "start": "298250",
    "end": "307010"
  },
  {
    "text": " that already delivers a significant number of improvements.",
    "start": "307010",
    "end": "311014"
  },
  {
    "text": "But performance is further delivered with protocol buffers, as protocol buffers are serialized and sent as binaries across the wire.",
    "start": "311450",
    "end": "322369"
  },
  {
    "text": "So, if you're familiar with JSON, which I think is the de facto message type that is sent via REST API these days, you're probably well aware that",
    "start": "322850",
    "end": "333440"
  },
  {
    "text": "JSON messages are not compressed or flat by any means, considering that they are key-value pairs that certainly are not the most space efficient.",
    "start": "333440",
    "end": "344029"
  },
  {
    "text": "With these protocol buffers, these messages are sent as binaries, which are significantly, significantly smaller than the normal JSON message.",
    "start": "344630",
    "end": "353749"
  },
  {
    "text": "Of course, that begs the question, what about using something like gzip to compress the JSON message before transmission?",
    "start": "354380",
    "end": "361940"
  },
  {
    "text": "And that kind of brings us back to convenience, in that if we were to use something like gzip or a tool to compress these JSON messages",
    "start": "362270",
    "end": "369679"
  },
  {
    "text": "before being sent, you would need to import gzip or whatever compression you're using on each of the microservices.",
    "start": "369680",
    "end": "377089"
  },
  {
    "text": "And that would be a bit of a pain over time since you're basically working on different microservices and you're implementing that yourself,",
    "start": "377090",
    "end": "384005"
  },
  {
    "text": "whereas with gRPC, this is all handled for you.",
    "start": "384005",
    "end": "388520"
  },
  {
    "text": "So, to summarize, gRPC offers convenience in the form of code generation -- protocol buffers -- the client library being implemented for you.",
    "start": "389430",
    "end": "401940"
  },
  {
    "text": "And on top of that, performance overall, using HTTP 2.0 and sending very small, performant messages across the wire.",
    "start": "402540",
    "end": "411120"
  },
  {
    "text": "So, hopefully this provided an example of gRPC and a useful, applicable format.",
    "start": "411810",
    "end": "417959"
  },
  {
    "text": "Of course, gRPC is not the Band-Aid cure-all solution for communication, but I did want to emphasize that this can be a good solution for your application.",
    "start": "418410",
    "end": "427470"
  },
  {
    "text": "Here are some videos that may be of interest to you.",
    "start": "427710",
    "end": "429749"
  },
  {
    "text": "If you have any questions about this video, add them in the comments below and be sure to Like and Subscribe.",
    "start": "429900",
    "end": "434354"
  },
  {
    "text": "Thanks.",
    "start": "434670",
    "end": "435170"
  }
]