[
  {
    "text": "What is RabbitMQ, and what makes it one\nof the most popular message brokers out there?",
    "start": "566",
    "end": "5506"
  },
  {
    "text": "My name is Whitney Lee.",
    "start": "6356",
    "end": "7536"
  },
  {
    "text": "I'm a Cloud Developer here at IBM.",
    "start": "7716",
    "end": "9606"
  },
  {
    "text": "Before I dig in, please, don't\nforget to hit that subscribe button.",
    "start": "10206",
    "end": "14476"
  },
  {
    "text": "So, let's travel back in time to\nthe days of monolithic architecture.",
    "start": "15986",
    "end": "19286"
  },
  {
    "text": "Back then, application components\nwere tightly coupled.",
    "start": "19896",
    "end": "22716"
  },
  {
    "text": "That means they were directly connected.",
    "start": "23246",
    "end": "24906"
  },
  {
    "text": "So, in a simple retail application, if we had\na checkout service and it needed to communicate",
    "start": "27116",
    "end": "34466"
  },
  {
    "text": "with an inventory service, that\nwould be done directly through,",
    "start": "34466",
    "end": "38016"
  },
  {
    "text": "usually through a TCP connection.",
    "start": "38046",
    "end": "40246"
  },
  {
    "text": "So, this had some limitations.",
    "start": "43556",
    "end": "45456"
  },
  {
    "text": "As soon as the checkout sent the message,",
    "start": "45976",
    "end": "48006"
  },
  {
    "text": "it would need to hear a reply before\nit could move on to the next task.",
    "start": "48006",
    "end": "51316"
  },
  {
    "text": "Or worse, if the inventory service went\ndown, it would try over and over again",
    "start": "51696",
    "end": "56696"
  },
  {
    "text": "until it was able to make that connection.",
    "start": "56696",
    "end": "58475"
  },
  {
    "text": "Or, if a lot of checkouts happened at once the\ninventory service wouldn't be able to keep up",
    "start": "59066",
    "end": "64435"
  },
  {
    "text": "and the whole system would get bogged down.",
    "start": "64436",
    "end": "66205"
  },
  {
    "text": "So, that's why message queues were\ncreated -- or, message brokers --",
    "start": "66266",
    "end": "70656"
  },
  {
    "text": "and those will sit, a message queue sits\nin between the two services that need",
    "start": "71096",
    "end": "75246"
  },
  {
    "text": "to communication with one another.",
    "start": "75246",
    "end": "76616"
  },
  {
    "text": "So, with a message queue, a checkout\ncan add a message to the queue",
    "start": "78106",
    "end": "82536"
  },
  {
    "text": "and then immediately move on to the next task.",
    "start": "82836",
    "end": "86056"
  },
  {
    "text": "And then similarly, the inventory, when\nit's ready, can consume from the queue,",
    "start": "86106",
    "end": "91396"
  },
  {
    "text": "process the message and then\nimmediately consume the next message.",
    "start": "91556",
    "end": "95036"
  },
  {
    "text": "So, this is going to decouple\nthe two applications.",
    "start": "95106",
    "end": "99176"
  },
  {
    "text": "A message broker is also going\nto help with scalability.",
    "start": "102736",
    "end": "105696"
  },
  {
    "text": "So, the inventory...if a lot of checkouts\nhappen at once, the queue begins to fill,",
    "start": "106296",
    "end": "111026"
  },
  {
    "text": "you can have more than one consuming service\n-- more than one inventory, in our case --",
    "start": "111436",
    "end": "117026"
  },
  {
    "text": "to read from the queue to handle the amount\nof workload that the checkout is producing,",
    "start": "118986",
    "end": "123856"
  },
  {
    "text": "and that's going to make\nthe system more scalable.",
    "start": "123856",
    "end": "126316"
  },
  {
    "text": "Another big benefit of message queues is that\nthe queue itself can sit on its own machine.",
    "start": "129886",
    "end": "134856"
  },
  {
    "text": "So, in that case, it can offload some of\nthe work that's done by the Web application",
    "start": "137196",
    "end": "143096"
  },
  {
    "text": "and make the whole system more performant.",
    "start": "143096",
    "end": "145066"
  },
  {
    "text": "So, let's talk about RabbitMQ.",
    "start": "149856",
    "end": "152596"
  },
  {
    "text": "RabbitMQ is an implementation\nof the AMQP message model --",
    "start": "153216",
    "end": "158516"
  },
  {
    "text": "that's Advanced Message Queueing\nProtocol -- and specifically, Version 091.",
    "start": "158916",
    "end": "164466"
  },
  {
    "text": "So, with this type of message model,\nthe producer, in our case the checkout,",
    "start": "166236",
    "end": "171885"
  },
  {
    "text": "the service that produces the messages, instead\nof producing directly to a message queue,",
    "start": "171886",
    "end": "180446"
  },
  {
    "text": "it's going to produce to an exchange.",
    "start": "180736",
    "end": "182976"
  },
  {
    "text": "So, you can think of an exchange\nas a post office.",
    "start": "183126",
    "end": "187676"
  },
  {
    "text": "It's going to receive all the messages",
    "start": "188046",
    "end": "189596"
  },
  {
    "text": "and then distribute them\naccording to how they're addressed.",
    "start": "189596",
    "end": "192965"
  },
  {
    "text": "An exchange could be connected to many\nqueues; in our case, we're going to do two.",
    "start": "193346",
    "end": "199586"
  },
  {
    "text": "And then, the queues are connected to\nthe consuming services or our consumers.",
    "start": "203866",
    "end": "210076"
  },
  {
    "text": "So, we'll have one called inventory",
    "start": "210686",
    "end": "212826"
  },
  {
    "text": "and then we'll do one called shipping\nmight need to consume from a checkout.",
    "start": "212826",
    "end": "221106"
  },
  {
    "text": "So, the checkout will send\na message to the exchange.",
    "start": "225706",
    "end": "228866"
  },
  {
    "text": "The exchange is connected to queues\nthrough connections called bindings,",
    "start": "229586",
    "end": "234096"
  },
  {
    "text": "and these bindings can be\nreferenced by the binding key.",
    "start": "234416",
    "end": "237706"
  },
  {
    "text": "And then our consuming applications --",
    "start": "242076",
    "end": "244776"
  },
  {
    "text": "or, consumers, consuming services\n-- those subscribe to the queues.",
    "start": "244776",
    "end": "252706"
  },
  {
    "text": "So, AMQP, RabbitMQ this is the message\nbroker here, this part of the system.",
    "start": "252706",
    "end": "259195"
  },
  {
    "text": "One thing that's great about this\nmessage model I the flexibility",
    "start": "264306",
    "end": "270066"
  },
  {
    "text": "with which the messages can move through the\nsystem, and that flexibility is largely in part",
    "start": "270146",
    "end": "275346"
  },
  {
    "text": "to the different types of exchanges available.",
    "start": "275396",
    "end": "277576"
  },
  {
    "text": "So, the first type of exchange that\nthe system can do is a fanout exchange.",
    "start": "277636",
    "end": "283176"
  },
  {
    "text": "With a fanout exchange, checkout\nwill produce to the exchange,",
    "start": "285206",
    "end": "288236"
  },
  {
    "text": "the exchange will duplicate the message and send\nit to every single queue that it knows about.",
    "start": "288236",
    "end": "292396"
  },
  {
    "text": "Or, we have a direct exchange.",
    "start": "293586",
    "end": "295236"
  },
  {
    "text": "With the direct exchange, the checkout\nwill produce the message and then",
    "start": "298046",
    "end": "301776"
  },
  {
    "text": "that message will get a routing key.",
    "start": "301776",
    "end": "304346"
  },
  {
    "text": "So, with a direct exchange the routing\nkey is being compared to the binding key;",
    "start": "307826",
    "end": "312815"
  },
  {
    "text": "and if it's an exact match, then the message\nwill move through the system accordingly.",
    "start": "312816",
    "end": "316966"
  },
  {
    "text": "Next, we have a topic exchange.",
    "start": "318346",
    "end": "320396"
  },
  {
    "text": "With a topic exchange, we can do a partial match\nbetween the routing key and the binding key.",
    "start": "320556",
    "end": "326506"
  },
  {
    "text": "So, if we had a routing key on\nthis message called ship.shoes",
    "start": "326506",
    "end": "330356"
  },
  {
    "text": "and the binding key was called ship.any\nand the exchange type was a topic exchange,",
    "start": "330596",
    "end": "340966"
  },
  {
    "text": "that message would get routed\nthrough to that, this queue.",
    "start": "340966",
    "end": "343806"
  },
  {
    "text": "There's also a header exchange.",
    "start": "345676",
    "end": "347776"
  },
  {
    "text": "With a header exchange, the routing key is\nignored completely, and the message is moved",
    "start": "350566",
    "end": "355096"
  },
  {
    "text": "through the system according to the header.",
    "start": "355096",
    "end": "356696"
  },
  {
    "text": "And then finally, we have a default exchange.",
    "start": "356866",
    "end": "360966"
  },
  {
    "text": "This exchange is unique only to RabbitMQ.",
    "start": "361306",
    "end": "363816"
  },
  {
    "text": "It's not part of the AMQP message model.",
    "start": "363816",
    "end": "366486"
  },
  {
    "text": "So, the default exchange is\nalso called a nameless exchange.",
    "start": "367096",
    "end": "370066"
  },
  {
    "text": "And with the default exchange, the routing key,",
    "start": "372126",
    "end": "374866"
  },
  {
    "text": "let's say the routing key\nof this message is inv.",
    "start": "375076",
    "end": "377956"
  },
  {
    "text": "The routing key is getting tied\nto the name of the queue itself.",
    "start": "378376",
    "end": "381656"
  },
  {
    "text": "So, if this queue is named inv, then the\nmessage would route through to there.",
    "start": "381656",
    "end": "387896"
  },
  {
    "text": "So, there are a couple of main benefits of\nRabbitMQ right now with the architecture,",
    "start": "387896",
    "end": "393686"
  },
  {
    "text": "and one is a tremendous amount of flexibility\nyou have moving messages through your system.",
    "start": "393686",
    "end": "398846"
  },
  {
    "text": "In fact, they say you can design your system\nwith whatever you want, the sky's the limit,",
    "start": "399126",
    "end": "403236"
  },
  {
    "text": "and then later configure it RabbitMQ to\nwork with your system as opposed to needing",
    "start": "403236",
    "end": "407776"
  },
  {
    "text": "to know RabbitMQ's limitations and\ndesigning your system accordingly.",
    "start": "407776",
    "end": "411366"
  },
  {
    "text": "Also, with other message brokers the\nbroker administrator when they set",
    "start": "412336",
    "end": "416856"
  },
  {
    "text": "up the message model, that's when all\nthe configuration for how message moves",
    "start": "416856",
    "end": "421755"
  },
  {
    "text": "through the system, that's\nwhen it's all defined.",
    "start": "421756",
    "end": "423966"
  },
  {
    "text": "But with RabbitMQ, the way the message moves",
    "start": "424366",
    "end": "428386"
  },
  {
    "text": "through the system is largely\na part of the message metadata.",
    "start": "428386",
    "end": "432236"
  },
  {
    "text": "So, in this case, it's the application and\nthe developer that has a lot of control",
    "start": "432856",
    "end": "438206"
  },
  {
    "text": "with the way messages move through the\nsystem rather than the broker administrator.",
    "start": "438206",
    "end": "442156"
  },
  {
    "text": "Another great benefit to RabbitMQ\nis that it is cloud friendly.",
    "start": "443676",
    "end": "448285"
  },
  {
    "text": "It is easy to get started.",
    "start": "448376",
    "end": "452576"
  },
  {
    "text": "You can deploy an instance of it on\nDocker or other containerization software.",
    "start": "453816",
    "end": "459726"
  },
  {
    "text": "It also can run as a cluster, so\nthat means it's fault tolerant,",
    "start": "460166",
    "end": "463706"
  },
  {
    "text": "highly available and has high throughput.",
    "start": "463836",
    "end": "466366"
  },
  {
    "text": "RabbitMQ can do cross language communication.",
    "start": "468276",
    "end": "471146"
  },
  {
    "text": "So, if a message is produced by a checkout\nand go, it can be consumed by inventory",
    "start": "474046",
    "end": "479526"
  },
  {
    "text": "in JavaScript and consumed\nby shipping in Python.",
    "start": "479526",
    "end": "483046"
  },
  {
    "text": "And really the possibilities are endless.",
    "start": "483336",
    "end": "485416"
  },
  {
    "text": "It has a very extensive library.",
    "start": "485416",
    "end": "486995"
  },
  {
    "text": "It has good security.",
    "start": "487226",
    "end": "489816"
  },
  {
    "text": "It supports FASL, LDAP and TLS for\nauthentication and authorization.",
    "start": "492416",
    "end": "498386"
  },
  {
    "text": "It does message acknowledgements.",
    "start": "499216",
    "end": "500736"
  },
  {
    "text": "So, message acknowledgements, when a message\nis in a queue and it goes to the consumer,",
    "start": "503216",
    "end": "507566"
  },
  {
    "text": "the message stays in the queue until\nthe consumer lets the broker know",
    "start": "508086",
    "end": "512466"
  },
  {
    "text": "that it has received the message.",
    "start": "512706",
    "end": "514315"
  },
  {
    "text": "And only then is the message\ntaken out of the queue,",
    "start": "514616",
    "end": "516766"
  },
  {
    "text": "and that prevents the system\nfrom losing any messages.",
    "start": "517106",
    "end": "519536"
  },
  {
    "text": "It has great management.",
    "start": "522136",
    "end": "523916"
  },
  {
    "text": "So, right out of the box you have a\nreally good browser based management UI",
    "start": "527096",
    "end": "531266"
  },
  {
    "text": "as well as incentive CLI tools.",
    "start": "531266",
    "end": "534416"
  },
  {
    "text": "Not only that, but the open source\ncommunity has created plugins",
    "start": "535036",
    "end": "538516"
  },
  {
    "text": "that really enrich the management\nand moderning part of RabbitMQ.",
    "start": "538516",
    "end": "542686"
  },
  {
    "text": "And speaking of that open source\ncommunity, it has created a lot of plugins",
    "start": "542686",
    "end": "549235"
  },
  {
    "text": "that can enrich most aspects of RabbitMQ.",
    "start": "549926",
    "end": "552966"
  },
  {
    "text": "There are many tools created,\nthere are lots of clients,",
    "start": "552966",
    "end": "556776"
  },
  {
    "text": "it's so evolved that RabbitMQ now\nsupports other message models.",
    "start": "556776",
    "end": "561956"
  },
  {
    "text": "So, not just AMQP 091 but you can do\nMQTT, Stomp, AMQP 1.0 for example.",
    "start": "561986",
    "end": "569276"
  },
  {
    "text": "So, this has been an overview of RabbitMQ.",
    "start": "570936",
    "end": "573126"
  },
  {
    "text": "The big takeaways for you are the\nflexibility with the ways the messages move",
    "start": "573126",
    "end": "577925"
  },
  {
    "text": "through the system; the fact that the\nmessage metadata defines how messages move",
    "start": "577926",
    "end": "583496"
  },
  {
    "text": "through the system as opposed\nto the broker administrator;",
    "start": "583496",
    "end": "586725"
  },
  {
    "text": "and then, it's also super cloud friendly.",
    "start": "586726",
    "end": "589846"
  },
  {
    "text": "Thank you.",
    "start": "590316",
    "end": "591026"
  },
  {
    "text": "If you have questions, please\ndrop us a line below.",
    "start": "591456",
    "end": "594206"
  },
  {
    "text": "If you want to see more videos like this\nin the future, please like and subscribe.",
    "start": "594656",
    "end": "598816"
  },
  {
    "text": "And don't forget, you can grow your skills and\nearn a badge with IBM Cloud Labs which are free,",
    "start": "599206",
    "end": "605376"
  },
  {
    "text": "browser based, interactive Kubernetes labs.",
    "start": "605606",
    "end": "608376"
  }
]