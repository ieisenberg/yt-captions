[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "Hi, I'm Diarra Bell and I'm an AI engineer at IBM.",
    "start": "210",
    "end": "3929"
  },
  {
    "text": "Today, we're going to be talking about confusion matrices.",
    "start": "4440",
    "end": "7440"
  },
  {
    "text": "A confusion matrix is a way to summarize the performance of a classification model.",
    "start": "7920",
    "end": "11999"
  },
  {
    "text": "Classification models can be applied to a variety of different use cases to sort data into different categories.",
    "start": "12570",
    "end": "18179"
  },
  {
    "text": "A few examples of models that can be used for classification include logistic regression, Naive Bayes, support vector machines, and decision trees.",
    "start": "18750",
    "end": "27570"
  },
  {
    "text": "In this video, we'll build a quick binary classifier model with scikit-learn,",
    "start": "28020",
    "end": "32008"
  },
  {
    "text": "and we'll analyze a confusion matrix to assess the results.",
    "start": "32250",
    "end": "35100"
  },
  {
    "text": "You don't have to be confused.",
    "start": "35430",
    "end": "36810"
  },
  {
    "text": "We'll explain everything in the video.",
    "start": "36840",
    "end": "38250"
  },
  {
    "start": "38000",
    "end": "96000"
  },
  {
    "text": "All right.",
    "start": "38850",
    "end": "39390"
  },
  {
    "text": "Let's get started with actually writing some code.",
    "start": "39390",
    "end": "41700"
  },
  {
    "text": "So as you can see here, I have a Jupyter notebook open and I have some libraries that we're going to import.",
    "start": "42330",
    "end": "49439"
  },
  {
    "text": "Some are from scikit-learn.",
    "start": "49830",
    "end": "51210"
  },
  {
    "text": "I'm importing the load breast cancer default dataset for our logistic regression.",
    "start": "52080",
    "end": "57180"
  },
  {
    "text": "I'm also importing the metrics library logistic regression.",
    "start": "58260",
    "end": "62670"
  },
  {
    "text": "And then I'm also importing some, functions that, or symmetric scores for our model, and we'll talk about those later.",
    "start": "62880",
    "end": "70020"
  },
  {
    "text": "I'm also importing Matplotlib, and I'm also importing train test splits so that we can split our data into training and test sets.",
    "start": "70380",
    "end": "78479"
  },
  {
    "text": "I'm importing a scalar for us to do some preprocessing on the data and then I'm importing pandas for us to visualize the data as a data frame.",
    "start": "78960",
    "end": "87329"
  },
  {
    "text": "Now that we have all of our libraries imported, let's get started with actually loading a dataset into Jupyter Notebook.",
    "start": "87780",
    "end": "96629"
  },
  {
    "start": "96000",
    "end": "214000"
  },
  {
    "text": "So we're using the default notebook, or the default data set called the breast Cancer dataset,",
    "start": "96900",
    "end": "102503"
  },
  {
    "text": "that has information about different cells and labels that determine whether or not they are cancerous or they are non cancerous or malignant or benign.",
    "start": "102503",
    "end": "112920"
  },
  {
    "text": "So this is a really common dataset that's used in machine learning because it's very simple, easy to understand,",
    "start": "113880",
    "end": "121140"
  },
  {
    "text": "and... so let's get started.",
    "start": "121620",
    "end": "123989"
  },
  {
    "text": "So we're going to create a variable called data.",
    "start": "124530",
    "end": "126959"
  },
  {
    "text": "And we're going to have that equal to the load breast cancer function that we got from scikit-learn.",
    "start": "127350",
    "end": "137249"
  },
  {
    "text": "And now the next thing we're going to do is we're going to create a data frame just so we can see what that data looks like.",
    "start": "138090",
    "end": "145050"
  },
  {
    "text": "So let's create a data frame called DF,",
    "start": "145620",
    "end": "148080"
  },
  {
    "text": "and we'll set that equal to a pandas.dataframe,",
    "start": "148410",
    "end": "154529"
  },
  {
    "text": "and then we'll say we're going to get that data from the load breast cancer function.",
    "start": "155310",
    "end": "162650"
  },
  {
    "text": "And actually, the class actually has its own function to get the data from it.",
    "start": "162660",
    "end": "166680"
  },
  {
    "text": "And then we'll say that the columns are equal to data.feature.",
    "start": "167070",
    "end": "175110"
  },
  {
    "text": "Let's hold on.",
    "start": "176280",
    "end": "177280"
  },
  {
    "text": "Okay.",
    "start": "184360",
    "end": "185080"
  },
  {
    "text": "And so now we have a data frame there.",
    "start": "185080",
    "end": "187419"
  },
  {
    "text": "And let's just see what that looks like.",
    "start": "188020",
    "end": "189819"
  },
  {
    "text": "So hold on.",
    "start": "191110",
    "end": "192110"
  },
  {
    "text": "Let me just display the head of that data so you'll see what it looks like.",
    "start": "192280",
    "end": "196959"
  },
  {
    "text": "We'll see that we have several rows and each row is a different sample of cells.",
    "start": "197290",
    "end": "201999"
  },
  {
    "text": "And then these are all of the features that can affect the cell.",
    "start": "202330",
    "end": "206010"
  },
  {
    "text": "And we are using these features to determine whether or not the cell is cancerous or, it's a benign sample of cells.",
    "start": "206020",
    "end": "214240"
  },
  {
    "start": "214000",
    "end": "270000"
  },
  {
    "text": "So now what we need to do is actually add the target, the target labels to this data set.",
    "start": "214750",
    "end": "224279"
  },
  {
    "text": "So the target labels are the classes that we are predicting.",
    "start": "224290",
    "end": "227110"
  },
  {
    "text": "We have the class zero, which is malignant, which means it's cancer.",
    "start": "227470",
    "end": "230830"
  },
  {
    "text": "And we have the class one, which means it's benign, which means it's not cancer.",
    "start": "231040",
    "end": "234939"
  },
  {
    "text": "So let's display those target labels.",
    "start": "235690",
    "end": "239719"
  },
  {
    "text": "So we're going to have a new column that we're going to add to our data frame and we're going to call it target,",
    "start": "239740",
    "end": "249189"
  },
  {
    "text": "and we'll say that is equal to data.target, which gets all of the target labels.",
    "start": "251410",
    "end": "256599"
  },
  {
    "text": "And if we display the head of our data frame now, this is what we'll get.",
    "start": "257019",
    "end": "261459"
  },
  {
    "text": "So you'll see it's exactly the same.",
    "start": "262029",
    "end": "263729"
  },
  {
    "text": "Only now we have our target labels.",
    "start": "263740",
    "end": "265569"
  },
  {
    "text": "As you can see, these are all zero, which means that they are malignant samples.",
    "start": "265570",
    "end": "270129"
  },
  {
    "start": "270000",
    "end": "368000"
  },
  {
    "text": "Okay.",
    "start": "270580",
    "end": "271090"
  },
  {
    "text": "So the next thing that we're going to do is we are going to split the data into X and Y variables.",
    "start": "271090",
    "end": "276309"
  },
  {
    "text": "X is a variable that contains all of the features, and Y is a variable that contains all of the target labels.",
    "start": "276640",
    "end": "283720"
  },
  {
    "text": "So the classes that we're predicting, either 0 or 1 either malignant or benign.",
    "start": "283730",
    "end": "288910"
  },
  {
    "text": "So we're going to get started by actually loading the data as X and Y variables.",
    "start": "289600",
    "end": "294160"
  },
  {
    "text": "And we can do this with an inbuilt function called return x,y, which we're going to set to true.",
    "start": "294340",
    "end": "302050"
  },
  {
    "text": "And so now it's going to return the all the features and all of the target labels as separate variables from this dataset.",
    "start": "302980",
    "end": "311139"
  },
  {
    "text": "The next thing that we're going to do is we're going to split that data into training data and test data.",
    "start": "312010",
    "end": "319660"
  },
  {
    "text": "We're going to use a default split, which is about 25% of the data is going to be used for testing, and 75% is going to be used for training.",
    "start": "320230",
    "end": "328360"
  },
  {
    "text": "We do this so that we don't have any overlap between the testing and the training data.",
    "start": "328810",
    "end": "333430"
  },
  {
    "text": "And it's randomized so we can get a better idea of how well the model performs on new and unseen data.",
    "start": "333640",
    "end": "339279"
  },
  {
    "text": "So let's get started with that.",
    "start": "339910",
    "end": "341500"
  },
  {
    "text": "So we'll use the trained test split function and let's create some variables x train, x test y train and y test.",
    "start": "341890",
    "end": "354279"
  },
  {
    "text": "And we'll set that as train the variables that are the result of train to split x and y.",
    "start": "357520",
    "end": "364000"
  },
  {
    "text": "Let's run that.",
    "start": "366100",
    "end": "367100"
  },
  {
    "text": "All right.",
    "start": "367180",
    "end": "367660"
  },
  {
    "text": "Good to go.",
    "start": "367660",
    "end": "368620"
  },
  {
    "start": "368000",
    "end": "434000"
  },
  {
    "text": "The next step is preprocessing the data.",
    "start": "368620",
    "end": "371619"
  },
  {
    "text": "So we actually do need to scale the data because we're using a logistic regression.",
    "start": "372070",
    "end": "376389"
  },
  {
    "text": "And all of the features are going to be compressed into zero and one using the sigmoid function.",
    "start": "376780",
    "end": "383050"
  },
  {
    "text": "So we'll have to create a scalar.",
    "start": "383500",
    "end": "385989"
  },
  {
    "text": "And we've imported the library earlier.",
    "start": "385990",
    "end": "387789"
  },
  {
    "text": "So let's just create an instance of the the standard scalar class.",
    "start": "389140",
    "end": "392920"
  },
  {
    "text": "And we're going to scale the x data for both the training and the test sets.",
    "start": "394090",
    "end": "399130"
  },
  {
    "text": "So let's create a variable called x train scaled.",
    "start": "399640",
    "end": "403089"
  },
  {
    "text": "And we'll set that equal to the scalar.fit, transform extreme and we'll do the same for the test dataset.",
    "start": "403600",
    "end": "418259"
  },
  {
    "text": "All right. So now we have our scale versions of both the training data and the testing data.",
    "start": "429010",
    "end": "434319"
  },
  {
    "start": "434000",
    "end": "481000"
  },
  {
    "text": "The next thing that we're going to do is start training the model, which is the super exciting part, and it only takes about one line of code.",
    "start": "434710",
    "end": "442059"
  },
  {
    "text": "So now we're going to build a logistic regression,",
    "start": "442630",
    "end": "446019"
  },
  {
    "text": "and let's create a variable called model,",
    "start": "446019",
    "end": "449850"
  },
  {
    "text": "and we'll set that equal to logistic regression,",
    "start": "449850",
    "end": "452444"
  },
  {
    "text": "which is the cost that we already imported before.",
    "start": "452444",
    "end": "454839"
  },
  {
    "text": "And we're going to fit this data to our training set.",
    "start": "455620",
    "end": "459279"
  },
  {
    "text": "So we're going to give it our scaled version of the the x variable,",
    "start": "459910",
    "end": "466299"
  },
  {
    "text": "and then we're also going to give it the training set for y.",
    "start": "466510",
    "end": "470079"
  },
  {
    "text": "So now we're going to just fit our model to that data and our model will be trained.",
    "start": "471670",
    "end": "475959"
  },
  {
    "text": "All right.",
    "start": "477500",
    "end": "478190"
  },
  {
    "text": "Pretty quick because we have a relatively small dataset.",
    "start": "478190",
    "end": "481459"
  },
  {
    "start": "481000",
    "end": "537000"
  },
  {
    "text": "So now let's get started by building our confusion matrix, which once again only takes one line of code.",
    "start": "482150",
    "end": "487850"
  },
  {
    "text": "We're going to start by creating a variable called confusion matrix.",
    "start": "488360",
    "end": "491689"
  },
  {
    "text": "Pretty simple.",
    "start": "491750",
    "end": "492440"
  },
  {
    "text": "You can call it whatever you want.",
    "start": "492440",
    "end": "493670"
  },
  {
    "text": "And we're going to use the metrics library.",
    "start": "494330",
    "end": "498679"
  },
  {
    "text": "And there's actually a convenient confusion matrix",
    "start": "499010",
    "end": "501860"
  },
  {
    "text": "function that we can use and we're going to put in our actual labels and then we're going to put in our predicted labels to make the confusion matrix.",
    "start": "505400",
    "end": "516049"
  },
  {
    "text": "Let's print it out.",
    "start": "516770",
    "end": "517770"
  },
  {
    "text": "So it's not going to be a graphical representation yet.",
    "start": "518390",
    "end": "521219"
  },
  {
    "text": "It's going to be just an array.",
    "start": "521240",
    "end": "522649"
  },
  {
    "text": "So as you can see, it printed out, just an array of numbers.",
    "start": "523490",
    "end": "527029"
  },
  {
    "text": "And we're going to explain what those numbers mean in a second.",
    "start": "527270",
    "end": "529890"
  },
  {
    "text": "But I think it'll be easier if we have an actual graph so that we can see what the true labels are and what the actual the predicted labels are.",
    "start": "529910",
    "end": "537319"
  },
  {
    "start": "537000",
    "end": "747000"
  },
  {
    "text": "So now that we have this confusion matrix, which is our numerical display of our confusion matrix,",
    "start": "537410",
    "end": "544203"
  },
  {
    "text": "let's do a graphical display so we can actually see more clearly what each part is referring to.",
    "start": "544203",
    "end": "551659"
  },
  {
    "text": "So let's create a variable called confusion matrix display.",
    "start": "552260",
    "end": "557960"
  },
  {
    "text": "And we're going to set that equal to a function in the metrics library called confusion matrix display.",
    "start": "559070",
    "end": "569809"
  },
  {
    "text": "And this gives you a graphical representation of a confusion matrix.",
    "start": "570260",
    "end": "573740"
  },
  {
    "text": "And we're going to set our confusion matrix equal to the one that we just did.",
    "start": "574190",
    "end": "578239"
  },
  {
    "text": "And let's print that out and display it here.",
    "start": "579740",
    "end": "585139"
  },
  {
    "text": "So.",
    "start": "586310",
    "end": "587310"
  },
  {
    "text": "And now let's use matplotlib to show.",
    "start": "594340",
    "end": "600639"
  },
  {
    "text": "Okay.",
    "start": "603200",
    "end": "604070"
  },
  {
    "text": "There you go.",
    "start": "604070",
    "end": "605070"
  },
  {
    "text": "So now we have our actual confusion matrix.",
    "start": "605630",
    "end": "609259"
  },
  {
    "text": "So let's explain what we're looking at here, because we see a bunch of numbers.",
    "start": "609860",
    "end": "614660"
  },
  {
    "text": "So each square in this confusion matrix represents how many of samples that the label predicted a certain as a certain class,",
    "start": "615350",
    "end": "626375"
  },
  {
    "text": "and what the actual class was for that sample.",
    "start": "626375",
    "end": "630200"
  },
  {
    "text": "So up here in our top left are our true positives.",
    "start": "630800",
    "end": "635300"
  },
  {
    "text": "These are great.",
    "start": "635630",
    "end": "636649"
  },
  {
    "text": "This means that the actual label was positive and the predicted label with the model was actually able to predict was also positive.",
    "start": "636860",
    "end": "647058"
  },
  {
    "text": "So as you can see here, true positives means that it was correctly identified to be cancerous.",
    "start": "647450",
    "end": "653419"
  },
  {
    "text": "So zero is, as we know, stands for a malignant sample and one is a benign sample.",
    "start": "653810",
    "end": "660480"
  },
  {
    "text": "So we'll see here that these are all correctly identified.",
    "start": "660500",
    "end": "664639"
  },
  {
    "text": "Now, if we go to our bottom right, we'll see that this is also a positive thing.",
    "start": "665360",
    "end": "669500"
  },
  {
    "text": "These are true negatives.",
    "start": "669530",
    "end": "671390"
  },
  {
    "text": "So that means that the actual label was negative and the model was correctly able to identify it as negative as well.",
    "start": "671600",
    "end": "678500"
  },
  {
    "text": "So you'll see here that there were 90 samples that were actually negative.",
    "start": "678920",
    "end": "684019"
  },
  {
    "text": "And the model correctly identified them as being negative.",
    "start": "684350",
    "end": "688730"
  },
  {
    "text": "Now, when we get to the purple areas here, this is kind of a danger zone because these are things that we don't want to see,",
    "start": "689210",
    "end": "695648"
  },
  {
    "text": "and we want as little of these as possible.",
    "start": "695648",
    "end": "698269"
  },
  {
    "text": "So right down here, we have our false positives.",
    "start": "698810",
    "end": "702110"
  },
  {
    "text": "This means that the model thought it was a positive sample, but it's actually a negative sample.",
    "start": "702440",
    "end": "707239"
  },
  {
    "text": "So right here, this means that the model thought that it was cancerous, but it actually wasn't cancerous.",
    "start": "707810",
    "end": "714378"
  },
  {
    "text": "And up here on the very top, right, these are our false negatives.",
    "start": "715040",
    "end": "720048"
  },
  {
    "text": "Now, especially working with health care, these are really dangerous because we're basically we have a model that thinks that this isn't cancerous, but it actually is.",
    "start": "720320",
    "end": "730490"
  },
  {
    "text": "And when it comes to cancer screening, we want to make sure that it's recognized as soon as possible.",
    "start": "730910",
    "end": "736339"
  },
  {
    "text": "So we always want to make sure.",
    "start": "736350",
    "end": "737868"
  },
  {
    "text": "So we notice there were five examples where the model thought that it was the one label, but it actually was a zero.",
    "start": "738380",
    "end": "747529"
  },
  {
    "start": "747000",
    "end": "885000"
  },
  {
    "text": "So now let's calculate some metrics that we can extrapolate from this confusion matrix.",
    "start": "747920",
    "end": "754130"
  },
  {
    "text": "So we can start with accuracy.",
    "start": "754550",
    "end": "756320"
  },
  {
    "text": "So accuracy is a score that determines the correct overall amount of predictions.",
    "start": "756860",
    "end": "766190"
  },
  {
    "text": "So let's just start by printing out accuracy.",
    "start": "766670",
    "end": "770269"
  },
  {
    "text": "And we have a very convenient function called accuracy score in scikit-learn that predicts this for us.",
    "start": "771260",
    "end": "777799"
  },
  {
    "text": "And all we need is the the test data and then the prediction data for the test set.",
    "start": "778160",
    "end": "784850"
  },
  {
    "text": "Okay.",
    "start": "787240",
    "end": "788240"
  },
  {
    "text": "The next thing that we can also look at is precision, which basically is a metric to determine how often the model was correct when predicting positive.",
    "start": "789040",
    "end": "800079"
  },
  {
    "text": "So.",
    "start": "801370",
    "end": "802370"
  },
  {
    "text": "That one is also available on scikit-learn.",
    "start": "803680",
    "end": "807520"
  },
  {
    "text": "You can see that it was a function that we imported earlier.",
    "start": "807520",
    "end": "811690"
  },
  {
    "text": "Another metric that we can use is recall.",
    "start": "823060",
    "end": "826119"
  },
  {
    "text": "Recall is a metric that determines how often the model was able to correctly identify true positives out of all the positives there are.",
    "start": "826540",
    "end": "838449"
  },
  {
    "text": "So let me just put in my test and our y predictions.",
    "start": "847050",
    "end": "851610"
  },
  {
    "text": "And let's just print out what those look like.",
    "start": "853310",
    "end": "855679"
  },
  {
    "text": "All right.",
    "start": "857030",
    "end": "857540"
  },
  {
    "text": "So we can see that our accuracy was 95%.",
    "start": "857540",
    "end": "860419"
  },
  {
    "text": "That's pretty good.",
    "start": "860870",
    "end": "861870"
  },
  {
    "text": "Our position is 94% and recall is 97%.",
    "start": "862400",
    "end": "866390"
  },
  {
    "text": "So at this point, this is the point where we can start either fine tuning the model or making some changes to the model to improve its performance,",
    "start": "867260",
    "end": "874909"
  },
  {
    "text": "but now that we have these metrics, we can see how well the model was able to learn new data and what we were able to extrapolate from that data.",
    "start": "875120",
    "end": "885679"
  },
  {
    "start": "885000",
    "end": "913000"
  },
  {
    "text": "Overall, a confusion matrix is a simple and easy way to determine how well the classification model is performing.",
    "start": "886160",
    "end": "892219"
  },
  {
    "text": "From the results of this confusion matrix, as we saw before.",
    "start": "892790",
    "end": "895730"
  },
  {
    "text": "We can decide to either fine tune the model further or leave it as is by effectively analyzing the results of the model.",
    "start": "895970",
    "end": "902029"
  },
  {
    "text": "We can create models that have higher performance metrics, which is especially helpful for machine learning models used in health care.",
    "start": "902180",
    "end": "908119"
  },
  {
    "text": "Overall, I hope that this quick tutorial is helpful for you and if it is, leave a comment.",
    "start": "908870",
    "end": "912710"
  },
  {
    "text": "Happy coding.",
    "start": "912860",
    "end": "913860"
  }
]