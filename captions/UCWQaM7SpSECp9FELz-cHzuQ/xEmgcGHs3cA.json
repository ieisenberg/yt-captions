[
  {
    "text": "go 1.23 has finally arrived and with it",
    "start": "80",
    "end": "3639"
  },
  {
    "text": "we have a bunch of new features of these",
    "start": "3639",
    "end": "6480"
  },
  {
    "text": "the most notorious one is function",
    "start": "6480",
    "end": "8559"
  },
  {
    "text": "iterators which has perhaps been the",
    "start": "8559",
    "end": "10599"
  },
  {
    "text": "most controversial feature added to the",
    "start": "10599",
    "end": "12320"
  },
  {
    "text": "language since generics in go 1.18",
    "start": "12320",
    "end": "15440"
  },
  {
    "text": "earlier in the year I did an entire",
    "start": "15440",
    "end": "17320"
  },
  {
    "text": "video looking at function iterators and",
    "start": "17320",
    "end": "19680"
  },
  {
    "text": "implemented some common looping patterns",
    "start": "19680",
    "end": "21359"
  },
  {
    "text": "and go using the new feature one of",
    "start": "21359",
    "end": "23599"
  },
  {
    "text": "these patterns was parallel iteration",
    "start": "23599",
    "end": "25920"
  },
  {
    "text": "where I built a function iterator that",
    "start": "25920",
    "end": "28039"
  },
  {
    "text": "allowed you to iterate over a slice of",
    "start": "28039",
    "end": "30080"
  },
  {
    "text": "elements concurrently whilst this",
    "start": "30080",
    "end": "32360"
  },
  {
    "text": "parallel iterator did work it made me",
    "start": "32360",
    "end": "34719"
  },
  {
    "text": "feel a little uncomfortable about the",
    "start": "34719",
    "end": "36680"
  },
  {
    "text": "feature as it did a really good job of",
    "start": "36680",
    "end": "38879"
  },
  {
    "text": "hiding the fact that the code was",
    "start": "38879",
    "end": "40399"
  },
  {
    "text": "running concurrently fortunately it",
    "start": "40399",
    "end": "42559"
  },
  {
    "text": "seems like the team developing go are",
    "start": "42559",
    "end": "44440"
  },
  {
    "text": "either fans of my Channel or more likely",
    "start": "44440",
    "end": "46879"
  },
  {
    "text": "they're just very smart Gophers because",
    "start": "46879",
    "end": "49360"
  },
  {
    "text": "with 1.23 it's no longer possible to",
    "start": "49360",
    "end": "51760"
  },
  {
    "text": "perform parallel iteration with function",
    "start": "51760",
    "end": "54160"
  },
  {
    "text": "iterators if I try to run my parallel",
    "start": "54160",
    "end": "56480"
  },
  {
    "text": "iterator code as I did before go will",
    "start": "56480",
    "end": "58760"
  },
  {
    "text": "now throw a panic due to it detecting",
    "start": "58760",
    "end": "61280"
  },
  {
    "text": "that the next iteration has begun before",
    "start": "61280",
    "end": "63320"
  },
  {
    "text": "the previous one has completed whilst",
    "start": "63320",
    "end": "65720"
  },
  {
    "text": "the error message doesn't explain this",
    "start": "65720",
    "end": "67200"
  },
  {
    "text": "in the best way we can see that this is",
    "start": "67200",
    "end": "69080"
  },
  {
    "text": "the case by reading the comments in the",
    "start": "69080",
    "end": "70840"
  },
  {
    "text": "source code which shows us that this",
    "start": "70840",
    "end": "72680"
  },
  {
    "text": "error message will be cooled when either",
    "start": "72680",
    "end": "74439"
  },
  {
    "text": "the body of the loop has panicked or is",
    "start": "74439",
    "end": "76520"
  },
  {
    "text": "currently running whilst it's not a",
    "start": "76520",
    "end": "78600"
  },
  {
    "text": "perfect solution it does help to reduce",
    "start": "78600",
    "end": "80880"
  },
  {
    "text": "the amount of iterator or abuse from",
    "start": "80880",
    "end": "82640"
  },
  {
    "text": "taking place which to me makes the",
    "start": "82640",
    "end": "84640"
  },
  {
    "text": "feature feel a little more complete if",
    "start": "84640",
    "end": "87360"
  },
  {
    "text": "you've been following along with the",
    "start": "87360",
    "end": "88759"
  },
  {
    "text": "development of this feature there's been",
    "start": "88759",
    "end": "90640"
  },
  {
    "text": "a lot of discussion online about the",
    "start": "90640",
    "end": "92840"
  },
  {
    "text": "lack of readability when it comes to",
    "start": "92840",
    "end": "94560"
  },
  {
    "text": "implementing a function iterator the",
    "start": "94560",
    "end": "96799"
  },
  {
    "text": "team at go have made some strides to",
    "start": "96799",
    "end": "98759"
  },
  {
    "text": "resolve this this is through using both",
    "start": "98759",
    "end": "100960"
  },
  {
    "text": "the seek and seek 2 types of the iter",
    "start": "100960",
    "end": "103520"
  },
  {
    "text": "package which can and should in my",
    "start": "103520",
    "end": "105759"
  },
  {
    "text": "opinion be used to define the return",
    "start": "105759",
    "end": "108000"
  },
  {
    "text": "value of a function iterator by doing so",
    "start": "108000",
    "end": "110960"
  },
  {
    "text": "it makes working with iterators just",
    "start": "110960",
    "end": "112880"
  },
  {
    "text": "that little bit easier in addition to",
    "start": "112880",
    "end": "115079"
  },
  {
    "text": "the iter package a number of other",
    "start": "115079",
    "end": "116680"
  },
  {
    "text": "packages in the standard library now",
    "start": "116680",
    "end": "118600"
  },
  {
    "text": "have function iterator Port as well",
    "start": "118600",
    "end": "121200"
  },
  {
    "text": "these include the slices package which",
    "start": "121200",
    "end": "123600"
  },
  {
    "text": "provides a number of different functions",
    "start": "123600",
    "end": "125280"
  },
  {
    "text": "to allow us to iterate over slices in",
    "start": "125280",
    "end": "127479"
  },
  {
    "text": "various ways one of these is the",
    "start": "127479",
    "end": "129599"
  },
  {
    "text": "backward function which returns an",
    "start": "129599",
    "end": "131440"
  },
  {
    "text": "iterator that Loops over a slice in",
    "start": "131440",
    "end": "133640"
  },
  {
    "text": "Reverse or my personal favorite the",
    "start": "133640",
    "end": "136239"
  },
  {
    "text": "chunk Funk which returns an iterator",
    "start": "136239",
    "end": "138599"
  },
  {
    "text": "that allows you to Loop over sized",
    "start": "138599",
    "end": "140360"
  },
  {
    "text": "chunks of a given slice this is great",
    "start": "140360",
    "end": "142760"
  },
  {
    "text": "for a number of different data",
    "start": "142760",
    "end": "144319"
  },
  {
    "text": "operations such as limiting the number",
    "start": "144319",
    "end": "146440"
  },
  {
    "text": "of elements you wish to send to a batch",
    "start": "146440",
    "end": "148720"
  },
  {
    "text": "operation as as well as functions that",
    "start": "148720",
    "end": "150920"
  },
  {
    "text": "return iterators we also have a couple",
    "start": "150920",
    "end": "153239"
  },
  {
    "text": "that accept an iterator as a parameter",
    "start": "153239",
    "end": "155599"
  },
  {
    "text": "as well one of these is the collect",
    "start": "155599",
    "end": "157640"
  },
  {
    "text": "function which collects all of the",
    "start": "157640",
    "end": "159159"
  },
  {
    "text": "values of an iter dosek into a new slice",
    "start": "159159",
    "end": "162239"
  },
  {
    "text": "in addition to the collect function we",
    "start": "162239",
    "end": "164040"
  },
  {
    "text": "also have the new appen seek function as",
    "start": "164040",
    "end": "166560"
  },
  {
    "text": "well which appends the values of an",
    "start": "166560",
    "end": "168400"
  },
  {
    "text": "iterator onto a slice returning the",
    "start": "168400",
    "end": "170680"
  },
  {
    "text": "extended one both of these functions",
    "start": "170680",
    "end": "172720"
  },
  {
    "text": "allow us to perform composition on",
    "start": "172720",
    "end": "174599"
  },
  {
    "text": "iterators to produce new Collections and",
    "start": "174599",
    "end": "177280"
  },
  {
    "text": "feels somewhat familiar to the way that",
    "start": "177280",
    "end": "178959"
  },
  {
    "text": "iterators work in Rust in addition to",
    "start": "178959",
    "end": "181519"
  },
  {
    "text": "the slices package we also have a few",
    "start": "181519",
    "end": "184040"
  },
  {
    "text": "functions that work with iterators",
    "start": "184040",
    "end": "185840"
  },
  {
    "text": "coming to the maps package as well these",
    "start": "185840",
    "end": "188440"
  },
  {
    "text": "include similar iterators as we found",
    "start": "188440",
    "end": "190440"
  },
  {
    "text": "with the slices package such as the all",
    "start": "190440",
    "end": "192560"
  },
  {
    "text": "function values function keys function",
    "start": "192560",
    "end": "195280"
  },
  {
    "text": "and collect function Additionally the",
    "start": "195280",
    "end": "197360"
  },
  {
    "text": "maps package also provides the insert",
    "start": "197360",
    "end": "199480"
  },
  {
    "text": "function which accepts a parameter of",
    "start": "199480",
    "end": "201840"
  },
  {
    "text": "it. seek 2 and inserts all of the values",
    "start": "201840",
    "end": "204440"
  },
  {
    "text": "from it into an existing map here I'm",
    "start": "204440",
    "end": "206840"
  },
  {
    "text": "using it to create a map of strings to",
    "start": "206840",
    "end": "208840"
  },
  {
    "text": "ins where the key is the value of the",
    "start": "208840",
    "end": "211280"
  },
  {
    "text": "slice and the integer is the index",
    "start": "211280",
    "end": "213879"
  },
  {
    "text": "allowing me to easily look up where in a",
    "start": "213879",
    "end": "215959"
  },
  {
    "text": "slice a value lives whilst being able to",
    "start": "215959",
    "end": "218560"
  },
  {
    "text": "do these sorts of conversions is pretty",
    "start": "218560",
    "end": "220280"
  },
  {
    "text": "cool it does highlight something that I",
    "start": "220280",
    "end": "222159"
  },
  {
    "text": "think is currently lacking when it comes",
    "start": "222159",
    "end": "223799"
  },
  {
    "text": "to using iterators adapter functions",
    "start": "223799",
    "end": "227080"
  },
  {
    "text": "these are functions to help you perform",
    "start": "227080",
    "end": "228720"
  },
  {
    "text": "common actions when it comes to",
    "start": "228720",
    "end": "230120"
  },
  {
    "text": "iterators such as the swap one I just",
    "start": "230120",
    "end": "232439"
  },
  {
    "text": "defined another example would be an",
    "start": "232439",
    "end": "234480"
  },
  {
    "text": "adapter to turn an it. seek 2 type into",
    "start": "234480",
    "end": "237280"
  },
  {
    "text": "an iter dosek through taking either the",
    "start": "237280",
    "end": "239879"
  },
  {
    "text": "first or second value of the seek to",
    "start": "239879",
    "end": "242599"
  },
  {
    "text": "iterator whilst it's not exactly",
    "start": "242599",
    "end": "244920"
  },
  {
    "text": "difficult to implement these helper",
    "start": "244920",
    "end": "246319"
  },
  {
    "text": "functions having them in the standard",
    "start": "246319",
    "end": "248319"
  },
  {
    "text": "Library would make working with",
    "start": "248319",
    "end": "249720"
  },
  {
    "text": "iterators just that little bit easier",
    "start": "249720",
    "end": "252159"
  },
  {
    "text": "fortunately there is a proposal for an",
    "start": "252159",
    "end": "254079"
  },
  {
    "text": "extension package for iterator adapters",
    "start": "254079",
    "end": "256720"
  },
  {
    "text": "which has been dangerously named zitter",
    "start": "256720",
    "end": "259280"
  },
  {
    "text": "or xit here is where we can expect to",
    "start": "259280",
    "end": "262000"
  },
  {
    "text": "see some of the possible utility",
    "start": "262000",
    "end": "263759"
  },
  {
    "text": "functions being added to the standard",
    "start": "263759",
    "end": "265639"
  },
  {
    "text": "library in a future version of go as I",
    "start": "265639",
    "end": "268720"
  },
  {
    "text": "mentioned in my previous video video I",
    "start": "268720",
    "end": "270320"
  },
  {
    "text": "expect function iterators to change some",
    "start": "270320",
    "end": "272400"
  },
  {
    "text": "of the way that we perform looping",
    "start": "272400",
    "end": "273800"
  },
  {
    "text": "operations when it comes to go and",
    "start": "273800",
    "end": "275880"
  },
  {
    "text": "whilst I was hesitant at first following",
    "start": "275880",
    "end": "278360"
  },
  {
    "text": "the 1.23 release I'm pretty excited to",
    "start": "278360",
    "end": "281039"
  },
  {
    "text": "see where this feature is going to well",
    "start": "281039",
    "end": "284320"
  },
  {
    "text": "go I want to give a big thank you to my",
    "start": "284320",
    "end": "286759"
  },
  {
    "text": "two newest channel members no Monday and",
    "start": "286759",
    "end": "289759"
  },
  {
    "text": "Dominic Carrington thank you for",
    "start": "289759",
    "end": "291759"
  },
  {
    "text": "supporting the channel and allowing me",
    "start": "291759",
    "end": "293199"
  },
  {
    "text": "to bring my content to hundreds of",
    "start": "293199",
    "end": "294960"
  },
  {
    "text": "thousands of people around the world",
    "start": "294960",
    "end": "299319"
  }
]