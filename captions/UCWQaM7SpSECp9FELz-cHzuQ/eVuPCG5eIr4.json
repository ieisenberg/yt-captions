[
  {
    "start": "0",
    "end": "52000"
  },
  {
    "text": "what makes binary search so important to",
    "start": "199",
    "end": "2800"
  },
  {
    "text": "answer that question let's first take a",
    "start": "2800",
    "end": "4600"
  },
  {
    "text": "look at this array of numbers ranging",
    "start": "4600",
    "end": "6480"
  },
  {
    "text": "from 4 to 50 if I asked you to tell me",
    "start": "6480",
    "end": "9040"
  },
  {
    "text": "what index the number 27 is at you could",
    "start": "9040",
    "end": "11840"
  },
  {
    "text": "probably figure this out pretty easily",
    "start": "11840",
    "end": "13639"
  },
  {
    "text": "by just well looking at it but what if",
    "start": "13639",
    "end": "16160"
  },
  {
    "text": "you could only look at one number in the",
    "start": "16160",
    "end": "17800"
  },
  {
    "text": "array at a single time how would you",
    "start": "17800",
    "end": "19680"
  },
  {
    "text": "figure out the index then well in that",
    "start": "19680",
    "end": "21920"
  },
  {
    "text": "case the simplest approach would be to",
    "start": "21920",
    "end": "23640"
  },
  {
    "text": "start at the beginning and check each",
    "start": "23640",
    "end": "25560"
  },
  {
    "text": "number until we found or didn't find 27",
    "start": "25560",
    "end": "28599"
  },
  {
    "text": "making sure to keep a count of the",
    "start": "28599",
    "end": "30000"
  },
  {
    "text": "numbers we had looked through this",
    "start": "30000",
    "end": "31960"
  },
  {
    "text": "approach or algorithm is called linear",
    "start": "31960",
    "end": "34520"
  },
  {
    "text": "search which is a rather fitting name as",
    "start": "34520",
    "end": "37239"
  },
  {
    "text": "the algorithm works by searching an",
    "start": "37239",
    "end": "38960"
  },
  {
    "text": "array in a linear or sequential fashion",
    "start": "38960",
    "end": "41559"
  },
  {
    "text": "until it finds or doesn't find the",
    "start": "41559",
    "end": "43800"
  },
  {
    "text": "result it's looking for in the worst",
    "start": "43800",
    "end": "45680"
  },
  {
    "text": "case this means we need to search the",
    "start": "45680",
    "end": "47600"
  },
  {
    "text": "entire array such as if we were trying",
    "start": "47600",
    "end": "50239"
  },
  {
    "text": "to find the number 50 as this array only",
    "start": "50239",
    "end": "53120"
  },
  {
    "start": "52000",
    "end": "221000"
  },
  {
    "text": "contains nine numbers the linear search",
    "start": "53120",
    "end": "55480"
  },
  {
    "text": "algorithm is not only fine but actually",
    "start": "55480",
    "end": "57520"
  },
  {
    "text": "encouraged due to the way that CPUs",
    "start": "57520",
    "end": "59640"
  },
  {
    "text": "optim I however for arrays that contain",
    "start": "59640",
    "end": "62239"
  },
  {
    "text": "thousands or even millions of numbers",
    "start": "62239",
    "end": "64760"
  },
  {
    "text": "then linear search can be incredibly",
    "start": "64760",
    "end": "66840"
  },
  {
    "text": "slow however in this case because our",
    "start": "66840",
    "end": "69320"
  },
  {
    "text": "array is sorted we actually have another",
    "start": "69320",
    "end": "71720"
  },
  {
    "text": "option available let's see this option",
    "start": "71720",
    "end": "73759"
  },
  {
    "text": "in action with some new numbers in our",
    "start": "73759",
    "end": "75799"
  },
  {
    "text": "array again we want to find the index",
    "start": "75799",
    "end": "78159"
  },
  {
    "text": "containing the number 27 if it exists",
    "start": "78159",
    "end": "81360"
  },
  {
    "text": "however this time rather than performing",
    "start": "81360",
    "end": "83040"
  },
  {
    "text": "the linear scan starting at the",
    "start": "83040",
    "end": "84600"
  },
  {
    "text": "beginning of the array let's instead",
    "start": "84600",
    "end": "86320"
  },
  {
    "text": "start at the middle and check the number",
    "start": "86320",
    "end": "88200"
  },
  {
    "text": "there this time it's not 27 instead it's",
    "start": "88200",
    "end": "91240"
  },
  {
    "text": "only 14 however we can actually make use",
    "start": "91240",
    "end": "93720"
  },
  {
    "text": "of this knowledge because we know the",
    "start": "93720",
    "end": "95600"
  },
  {
    "text": "array is in a sorted order then we know",
    "start": "95600",
    "end": "97680"
  },
  {
    "text": "that the number 27 isn't going to be in",
    "start": "97680",
    "end": "99840"
  },
  {
    "text": "the first half of the array so we can",
    "start": "99840",
    "end": "102399"
  },
  {
    "text": "just discard it great by doing this",
    "start": "102399",
    "end": "105200"
  },
  {
    "text": "we've managed to reduce the number of",
    "start": "105200",
    "end": "106680"
  },
  {
    "text": "indexes we need to take a look at by",
    "start": "106680",
    "end": "108399"
  },
  {
    "text": "half now we can start our scan but wait",
    "start": "108399",
    "end": "112079"
  },
  {
    "text": "rather than scanning through all of",
    "start": "112079",
    "end": "113399"
  },
  {
    "text": "these elements what if we just do the",
    "start": "113399",
    "end": "115119"
  },
  {
    "text": "same thing again let's go ahead and jump",
    "start": "115119",
    "end": "117079"
  },
  {
    "text": "to the middle ah turns out our middle is",
    "start": "117079",
    "end": "119520"
  },
  {
    "text": "in between two indexes well that's okay",
    "start": "119520",
    "end": "122439"
  },
  {
    "text": "let's take a look at the element on the",
    "start": "122439",
    "end": "123960"
  },
  {
    "text": "left hand side of the middle instead the",
    "start": "123960",
    "end": "126280"
  },
  {
    "text": "value at this index is 30 which means",
    "start": "126280",
    "end": "128479"
  },
  {
    "text": "that 27 can only be to the left so",
    "start": "128479",
    "end": "131039"
  },
  {
    "text": "there's no point checking the two higher",
    "start": "131039",
    "end": "132760"
  },
  {
    "text": "indexes All That Remains is our final",
    "start": "132760",
    "end": "135280"
  },
  {
    "text": "index which in case you lost count is",
    "start": "135280",
    "end": "137519"
  },
  {
    "text": "index number five let's go ahead and",
    "start": "137519",
    "end": "139720"
  },
  {
    "text": "check it and there it is number 27 this",
    "start": "139720",
    "end": "143319"
  },
  {
    "text": "time found using What's called the",
    "start": "143319",
    "end": "145000"
  },
  {
    "text": "binary search algorithm named so because",
    "start": "145000",
    "end": "147599"
  },
  {
    "text": "it splits the array into two on each",
    "start": "147599",
    "end": "150080"
  },
  {
    "text": "ation which can save a considerable",
    "start": "150080",
    "end": "152000"
  },
  {
    "text": "amount of time when compared to linear",
    "start": "152000",
    "end": "154000"
  },
  {
    "text": "search in our case it took us a total of",
    "start": "154000",
    "end": "156920"
  },
  {
    "text": "three different checks in order to find",
    "start": "156920",
    "end": "158680"
  },
  {
    "text": "the number 27 if we had done this using",
    "start": "158680",
    "end": "161080"
  },
  {
    "text": "linear search it would have taken six in",
    "start": "161080",
    "end": "163360"
  },
  {
    "text": "total however when understanding the",
    "start": "163360",
    "end": "165360"
  },
  {
    "text": "amount of time an algorithm takes you",
    "start": "165360",
    "end": "167239"
  },
  {
    "text": "should always consider the worst case",
    "start": "167239",
    "end": "169640"
  },
  {
    "text": "for linear search this would have taken",
    "start": "169640",
    "end": "171319"
  },
  {
    "text": "nine iterations whereas for binary",
    "start": "171319",
    "end": "173599"
  },
  {
    "text": "search it would only take four in an",
    "start": "173599",
    "end": "176360"
  },
  {
    "text": "array of size 9 that's not a huge amount",
    "start": "176360",
    "end": "178640"
  },
  {
    "text": "of savings however what if we used",
    "start": "178640",
    "end": "180720"
  },
  {
    "text": "binary search with an array of 1 million",
    "start": "180720",
    "end": "182959"
  },
  {
    "text": "items how many steps do you think it",
    "start": "182959",
    "end": "184879"
  },
  {
    "text": "would take maybe 100,000 or 10,000 well",
    "start": "184879",
    "end": "189080"
  },
  {
    "text": "the actual answer is 20 just 20 let me",
    "start": "189080",
    "end": "192840"
  },
  {
    "text": "say that again for an array of 1 million",
    "start": "192840",
    "end": "195080"
  },
  {
    "text": "elements the worst case with binary",
    "start": "195080",
    "end": "197000"
  },
  {
    "text": "search will only ever be 20 steps this",
    "start": "197000",
    "end": "200040"
  },
  {
    "text": "is because it continuously divides the",
    "start": "200040",
    "end": "202159"
  },
  {
    "text": "search space in half on each iteration",
    "start": "202159",
    "end": "205040"
  },
  {
    "text": "which means it applies a logarithmic",
    "start": "205040",
    "end": "207080"
  },
  {
    "text": "function in fact because it's",
    "start": "207080",
    "end": "208680"
  },
  {
    "text": "logarithmic we can actually calculate",
    "start": "208680",
    "end": "210640"
  },
  {
    "text": "how many steps it would take for any",
    "start": "210640",
    "end": "212519"
  },
  {
    "text": "size array using the formula of log n +",
    "start": "212519",
    "end": "215120"
  },
  {
    "text": "1 where n is the size of the array that",
    "start": "215120",
    "end": "217439"
  },
  {
    "text": "we're searching in fact this log n is an",
    "start": "217439",
    "end": "219879"
  },
  {
    "text": "important number to remember as it",
    "start": "219879",
    "end": "221560"
  },
  {
    "start": "221000",
    "end": "278000"
  },
  {
    "text": "describes the algorithm's time",
    "start": "221560",
    "end": "223159"
  },
  {
    "text": "complexity in computer science an",
    "start": "223159",
    "end": "225000"
  },
  {
    "text": "algorithm's complexity has its own",
    "start": "225000",
    "end": "226760"
  },
  {
    "text": "notation called Big O and binary search",
    "start": "226760",
    "end": "229720"
  },
  {
    "text": "has a Big O notation of log n by",
    "start": "229720",
    "end": "232400"
  },
  {
    "text": "comparison the linear search has a Big O",
    "start": "232400",
    "end": "234480"
  },
  {
    "text": "notation of o n as you may have guessed",
    "start": "234480",
    "end": "237280"
  },
  {
    "text": "this time complexity is what makes",
    "start": "237280",
    "end": "239000"
  },
  {
    "text": "binary search so important as it allows",
    "start": "239000",
    "end": "241760"
  },
  {
    "text": "us to search through large amounts of",
    "start": "241760",
    "end": "243360"
  },
  {
    "text": "data in a feasible amount of time",
    "start": "243360",
    "end": "246079"
  },
  {
    "text": "however there is a catch in order for us",
    "start": "246079",
    "end": "248400"
  },
  {
    "text": "to be able to use binary search we need",
    "start": "248400",
    "end": "250480"
  },
  {
    "text": "to meet two conditions the first Is",
    "start": "250480",
    "end": "252920"
  },
  {
    "text": "Random Access meaning that we're able to",
    "start": "252920",
    "end": "255239"
  },
  {
    "text": "jump to any index of our collection in",
    "start": "255239",
    "end": "257440"
  },
  {
    "text": "constant time this is possible when",
    "start": "257440",
    "end": "259519"
  },
  {
    "text": "using an array or a vector but not",
    "start": "259519",
    "end": "261799"
  },
  {
    "text": "possible in other data structures such",
    "start": "261799",
    "end": "263600"
  },
  {
    "text": "as a linked list the second condition",
    "start": "263600",
    "end": "266400"
  },
  {
    "text": "which we've already mentioned before is",
    "start": "266400",
    "end": "268160"
  },
  {
    "text": "that our collection of elements needs to",
    "start": "268160",
    "end": "270120"
  },
  {
    "text": "be sorted if the array we're given isn't",
    "start": "270120",
    "end": "272600"
  },
  {
    "text": "sorted then we're no longer able to",
    "start": "272600",
    "end": "274880"
  },
  {
    "text": "perform binary search on it and the",
    "start": "274880",
    "end": "277120"
  },
  {
    "text": "algorithm will fall apart here is where",
    "start": "277120",
    "end": "279680"
  },
  {
    "start": "278000",
    "end": "365000"
  },
  {
    "text": "binary search runs into two problems the",
    "start": "279680",
    "end": "282280"
  },
  {
    "text": "first is that in order to know if an",
    "start": "282280",
    "end": "284000"
  },
  {
    "text": "array is sorted you have to look at",
    "start": "284000",
    "end": "285960"
  },
  {
    "text": "every element in the array in which case",
    "start": "285960",
    "end": "288400"
  },
  {
    "text": "you may as well perform linear search",
    "start": "288400",
    "end": "290800"
  },
  {
    "text": "therefore you may be tempted to just go",
    "start": "290800",
    "end": "292600"
  },
  {
    "text": "ahead and sort the array however this",
    "start": "292600",
    "end": "295000"
  },
  {
    "text": "takes even longer as sorting algorithms",
    "start": "295000",
    "end": "297400"
  },
  {
    "text": "on average have a Time complexity of n",
    "start": "297400",
    "end": "300199"
  },
  {
    "text": "log n which is worse than linear search",
    "start": "300199",
    "end": "303400"
  },
  {
    "text": "because of this if you plan on only",
    "start": "303400",
    "end": "305120"
  },
  {
    "text": "searching your data once then linear",
    "start": "305120",
    "end": "307039"
  },
  {
    "text": "search is the correct choice however if",
    "start": "307039",
    "end": "309800"
  },
  {
    "text": "the data is intended to be searched",
    "start": "309800",
    "end": "311479"
  },
  {
    "text": "multiple times then it's worthwhile",
    "start": "311479",
    "end": "313400"
  },
  {
    "text": "spending the time to sort it enabling",
    "start": "313400",
    "end": "315720"
  },
  {
    "text": "the much more efficient binary search",
    "start": "315720",
    "end": "317720"
  },
  {
    "text": "algorithm one approach of doing this is",
    "start": "317720",
    "end": "319880"
  },
  {
    "text": "to sort your data once then when new",
    "start": "319880",
    "end": "322520"
  },
  {
    "text": "data comes in rather than resorting your",
    "start": "322520",
    "end": "324759"
  },
  {
    "text": "data set you instead insert it into the",
    "start": "324759",
    "end": "327039"
  },
  {
    "text": "correct Place making use of binary",
    "start": "327039",
    "end": "329000"
  },
  {
    "text": "search to determine where that is in",
    "start": "329000",
    "end": "331199"
  },
  {
    "text": "fact to improve the process of inserting",
    "start": "331199",
    "end": "333280"
  },
  {
    "text": "new data a number of data structures",
    "start": "333280",
    "end": "335360"
  },
  {
    "text": "have been designed based on binary",
    "start": "335360",
    "end": "337080"
  },
  {
    "text": "search such as the binary search tree",
    "start": "337080",
    "end": "340120"
  },
  {
    "text": "and the B tree which is actually what",
    "start": "340120",
    "end": "342600"
  },
  {
    "text": "databases use to store indexes and",
    "start": "342600",
    "end": "345080"
  },
  {
    "text": "enables them to perform searches across",
    "start": "345080",
    "end": "347199"
  },
  {
    "text": "millions of rows in fractions of a",
    "start": "347199",
    "end": "349319"
  },
  {
    "text": "second so far we've only showed binary",
    "start": "349319",
    "end": "351680"
  },
  {
    "text": "search being used with arrays of",
    "start": "351680",
    "end": "353400"
  },
  {
    "text": "integers however you can use binary",
    "start": "353400",
    "end": "355720"
  },
  {
    "text": "search and indexing with any type that",
    "start": "355720",
    "end": "358080"
  },
  {
    "text": "can be compared and ordered such as",
    "start": "358080",
    "end": "360120"
  },
  {
    "text": "strings allowing you to search for",
    "start": "360120",
    "end": "361919"
  },
  {
    "text": "values such as email addresses or",
    "start": "361919",
    "end": "363840"
  },
  {
    "text": "usernames all of this means that binary",
    "start": "363840",
    "end": "366280"
  },
  {
    "start": "365000",
    "end": "419000"
  },
  {
    "text": "search and its derived data structures",
    "start": "366280",
    "end": "368479"
  },
  {
    "text": "have many real world applications such",
    "start": "368479",
    "end": "370919"
  },
  {
    "text": "as searching for files in your operating",
    "start": "370919",
    "end": "372840"
  },
  {
    "text": "system or looking up the most recent",
    "start": "372840",
    "end": "374759"
  },
  {
    "text": "videos from your favorite content",
    "start": "374759",
    "end": "376440"
  },
  {
    "text": "creator as well as this binary search",
    "start": "376440",
    "end": "378919"
  },
  {
    "text": "can also be found in some more",
    "start": "378919",
    "end": "380599"
  },
  {
    "text": "unexpected places such as the Git",
    "start": "380599",
    "end": "383199"
  },
  {
    "text": "Version Control System which provides",
    "start": "383199",
    "end": "385240"
  },
  {
    "text": "the BCT command this command enables",
    "start": "385240",
    "end": "387919"
  },
  {
    "text": "developers to search through their git",
    "start": "387919",
    "end": "389680"
  },
  {
    "text": "history in order to find the commit",
    "start": "389680",
    "end": "391680"
  },
  {
    "text": "where a bug or a feature depending on",
    "start": "391680",
    "end": "393880"
  },
  {
    "text": "who you're asking was added to a code",
    "start": "393880",
    "end": "395960"
  },
  {
    "text": "base in the end binary search allows us",
    "start": "395960",
    "end": "398520"
  },
  {
    "text": "to perform efficient searching across",
    "start": "398520",
    "end": "400440"
  },
  {
    "text": "large sets of data and the ability to do",
    "start": "400440",
    "end": "402880"
  },
  {
    "text": "that in today's modern world is",
    "start": "402880",
    "end": "404720"
  },
  {
    "text": "incredibly",
    "start": "404720",
    "end": "406400"
  },
  {
    "text": "important I want to give a big thank you",
    "start": "406400",
    "end": "408479"
  },
  {
    "text": "to my newest Channel member Jose Morales",
    "start": "408479",
    "end": "411440"
  },
  {
    "text": "thank you for supporting the channel and",
    "start": "411440",
    "end": "413360"
  },
  {
    "text": "enabling me to bring my content to",
    "start": "413360",
    "end": "415280"
  },
  {
    "text": "hundreds of thousands of people around",
    "start": "415280",
    "end": "417120"
  },
  {
    "text": "the world",
    "start": "417120",
    "end": "420280"
  }
]