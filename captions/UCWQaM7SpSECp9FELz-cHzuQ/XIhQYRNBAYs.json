[
  {
    "text": "the 2010s was an interesting decade for",
    "start": "199",
    "end": "2560"
  },
  {
    "text": "software development some of the",
    "start": "2560",
    "end": "4359"
  },
  {
    "text": "highlights include the Gold Rush of",
    "start": "4359",
    "end": "5920"
  },
  {
    "text": "mobile apps the move towards cloud",
    "start": "5920",
    "end": "8000"
  },
  {
    "text": "services such as AWS and a number of",
    "start": "8000",
    "end": "10719"
  },
  {
    "text": "programming languages that many of us",
    "start": "10719",
    "end": "12360"
  },
  {
    "text": "would end up falling in love with baked",
    "start": "12360",
    "end": "14599"
  },
  {
    "text": "into these new languages was a greater",
    "start": "14599",
    "end": "16760"
  },
  {
    "text": "emphasis on runtime safety and for good",
    "start": "16760",
    "end": "19359"
  },
  {
    "text": "reason runtime errors are pretty much",
    "start": "19359",
    "end": "21439"
  },
  {
    "text": "the bane of software developers with a",
    "start": "21439",
    "end": "23359"
  },
  {
    "text": "large amount of time being spent to both",
    "start": "23359",
    "end": "25119"
  },
  {
    "text": "prevent and mitigate them in languages",
    "start": "25119",
    "end": "27560"
  },
  {
    "text": "such as C and C++ the most common",
    "start": "27560",
    "end": "30439"
  },
  {
    "text": "runtime error is the Sig segv which",
    "start": "30439",
    "end": "33040"
  },
  {
    "text": "stands for a segmentation violation or",
    "start": "33040",
    "end": "35520"
  },
  {
    "text": "segmentation fault this error occurs",
    "start": "35520",
    "end": "37879"
  },
  {
    "text": "whenever a program attempts to access",
    "start": "37879",
    "end": "39760"
  },
  {
    "text": "memory it's not permitted to such as",
    "start": "39760",
    "end": "42000"
  },
  {
    "text": "indexing an array Beyond its bounds",
    "start": "42000",
    "end": "44200"
  },
  {
    "text": "writing to a memory address that belongs",
    "start": "44200",
    "end": "46079"
  },
  {
    "text": "to another process or the most common",
    "start": "46079",
    "end": "48120"
  },
  {
    "text": "cause attempting to dreference a null",
    "start": "48120",
    "end": "50399"
  },
  {
    "text": "pointer in fact this last cause is so",
    "start": "50399",
    "end": "52960"
  },
  {
    "text": "common that a number of solutions have",
    "start": "52960",
    "end": "54800"
  },
  {
    "text": "been created to solve this problem these",
    "start": "54800",
    "end": "57160"
  },
  {
    "text": "Solutions are known as null safety and",
    "start": "57160",
    "end": "59559"
  },
  {
    "text": "I'd argue they're one of the greatest",
    "start": "59559",
    "end": "60879"
  },
  {
    "text": "features of modern programming languages",
    "start": "60879",
    "end": "63280"
  },
  {
    "text": "the most common implementation of n",
    "start": "63280",
    "end": "65080"
  },
  {
    "text": "safety has involved the use of a special",
    "start": "65080",
    "end": "67320"
  },
  {
    "text": "type inspired from functional",
    "start": "67320",
    "end": "68840"
  },
  {
    "text": "programming languages such as hcll now",
    "start": "68840",
    "end": "71240"
  },
  {
    "text": "hcll is a bit of an edgelord and calls",
    "start": "71240",
    "end": "73799"
  },
  {
    "text": "this type the maybe type however in",
    "start": "73799",
    "end": "76000"
  },
  {
    "text": "other languages it's simply referred to",
    "start": "76000",
    "end": "78040"
  },
  {
    "text": "as an optional the implementation of",
    "start": "78040",
    "end": "80439"
  },
  {
    "text": "this type is actually rather simple and",
    "start": "80439",
    "end": "82680"
  },
  {
    "text": "is basically a union or enum to",
    "start": "82680",
    "end": "84840"
  },
  {
    "text": "represent either one of two values the",
    "start": "84840",
    "end": "87479"
  },
  {
    "text": "first of these values is sum also called",
    "start": "87479",
    "end": "89960"
  },
  {
    "text": "something and represents the existence",
    "start": "89960",
    "end": "92159"
  },
  {
    "text": "of an underlying value which is also",
    "start": "92159",
    "end": "94479"
  },
  {
    "text": "contained within the type the second of",
    "start": "94479",
    "end": "96680"
  },
  {
    "text": "these values is none or nothing and",
    "start": "96680",
    "end": "99520"
  },
  {
    "text": "represents the absence of a value",
    "start": "99520",
    "end": "101640"
  },
  {
    "text": "similar to null the benefit of using an",
    "start": "101640",
    "end": "104240"
  },
  {
    "text": "optional is that it pushes the handling",
    "start": "104240",
    "end": "106280"
  },
  {
    "text": "of the none or null value into the type",
    "start": "106280",
    "end": "108680"
  },
  {
    "text": "system by doing so it moves the error",
    "start": "108680",
    "end": "110719"
  },
  {
    "text": "handling out of the runtime into a",
    "start": "110719",
    "end": "112719"
  },
  {
    "text": "compile time check this requires",
    "start": "112719",
    "end": "114680"
  },
  {
    "text": "developers to explicitly handle the N",
    "start": "114680",
    "end": "116840"
  },
  {
    "text": "case before their code can even be",
    "start": "116840",
    "end": "118399"
  },
  {
    "text": "compiled and deployed moving errors from",
    "start": "118399",
    "end": "120799"
  },
  {
    "text": "the runtime into compile time is a very",
    "start": "120799",
    "end": "123280"
  },
  {
    "text": "good thing and because of this optionals",
    "start": "123280",
    "end": "125360"
  },
  {
    "text": "can be found in a number of different",
    "start": "125360",
    "end": "127000"
  },
  {
    "text": "languages newer languages such as rust",
    "start": "127000",
    "end": "129759"
  },
  {
    "text": "cotlin and Swift provide the option",
    "start": "129759",
    "end": "132319"
  },
  {
    "text": "nullable and optional type respectively",
    "start": "132319",
    "end": "135120"
  },
  {
    "text": "even traditional languages such as Java",
    "start": "135120",
    "end": "137200"
  },
  {
    "text": "and C++ support optionals as well with",
    "start": "137200",
    "end": "140160"
  },
  {
    "text": "Java adding the optional type in 2014",
    "start": "140160",
    "end": "143000"
  },
  {
    "text": "and the king of runtime errors provides",
    "start": "143000",
    "end": "145599"
  },
  {
    "text": "STD optional since C++ 17 notably absent",
    "start": "145599",
    "end": "149640"
  },
  {
    "text": "from from this list however is go which",
    "start": "149640",
    "end": "151760"
  },
  {
    "text": "does not provide any real null safety",
    "start": "151760",
    "end": "154160"
  },
  {
    "text": "something I personally have a problem",
    "start": "154160",
    "end": "155599"
  },
  {
    "text": "with however that's a video for another",
    "start": "155599",
    "end": "157680"
  },
  {
    "text": "time to gain an understanding of how the",
    "start": "157680",
    "end": "160239"
  },
  {
    "text": "optional Works under the hood I've",
    "start": "160239",
    "end": "161800"
  },
  {
    "text": "created a rather simple implementation",
    "start": "161800",
    "end": "163800"
  },
  {
    "text": "in Rust which is just an enum with a",
    "start": "163800",
    "end": "166319"
  },
  {
    "text": "generic type this enum provides the two",
    "start": "166319",
    "end": "168599"
  },
  {
    "text": "values we mentioned earlier sum and none",
    "start": "168599",
    "end": "171400"
  },
  {
    "text": "the main thing to note is that our sum",
    "start": "171400",
    "end": "173159"
  },
  {
    "text": "value has Associated data which matches",
    "start": "173159",
    "end": "175440"
  },
  {
    "text": "our generic type in order to use this",
    "start": "175440",
    "end": "177680"
  },
  {
    "text": "type without any methods the compiler",
    "start": "177680",
    "end": "179800"
  },
  {
    "text": "requires us to use pattern matching in",
    "start": "179800",
    "end": "181560"
  },
  {
    "text": "order to handle either of the states",
    "start": "181560",
    "end": "183120"
  },
  {
    "text": "that the optional can be in whether it",
    "start": "183120",
    "end": "184920"
  },
  {
    "text": "has a value or not this implementation",
    "start": "184920",
    "end": "187440"
  },
  {
    "text": "whilst naive is actually very similar to",
    "start": "187440",
    "end": "189599"
  },
  {
    "text": "how rust implements option under the",
    "start": "189599",
    "end": "191400"
  },
  {
    "text": "hood orbe it with a few more macros and",
    "start": "191400",
    "end": "193879"
  },
  {
    "text": "methods despite being simple this",
    "start": "193879",
    "end": "196120"
  },
  {
    "text": "implementation shows us that there are",
    "start": "196120",
    "end": "197720"
  },
  {
    "text": "two features a language needs in order",
    "start": "197720",
    "end": "199680"
  },
  {
    "text": "to support the optional type the first",
    "start": "199680",
    "end": "202200"
  },
  {
    "text": "feature is generics which allows the",
    "start": "202200",
    "end": "204560"
  },
  {
    "text": "optional to wrap the associated value",
    "start": "204560",
    "end": "206560"
  },
  {
    "text": "keeping it type safe although not",
    "start": "206560",
    "end": "208519"
  },
  {
    "text": "strictly necessary I haven't found an",
    "start": "208519",
    "end": "210400"
  },
  {
    "text": "implementation that doesn't use them the",
    "start": "210400",
    "end": "212879"
  },
  {
    "text": "second requirement is for the language",
    "start": "212879",
    "end": "214599"
  },
  {
    "text": "to be compiled otherwise that defeats",
    "start": "214599",
    "end": "216920"
  },
  {
    "text": "the purpose of a compile time check so",
    "start": "216920",
    "end": "219680"
  },
  {
    "text": "given these requirements how then do",
    "start": "219680",
    "end": "221519"
  },
  {
    "text": "interpreted languages such as JavaScript",
    "start": "221519",
    "end": "223760"
  },
  {
    "text": "provide n safety well they do so using a",
    "start": "223760",
    "end": "226640"
  },
  {
    "text": "feature called safe navigation safe",
    "start": "226640",
    "end": "228959"
  },
  {
    "text": "navigation also known as optional",
    "start": "228959",
    "end": "230840"
  },
  {
    "text": "chaining first appeared in The Groovy",
    "start": "230840",
    "end": "232920"
  },
  {
    "text": "language back in 2011 and provides a",
    "start": "232920",
    "end": "235280"
  },
  {
    "text": "means to safely interact with a",
    "start": "235280",
    "end": "237000"
  },
  {
    "text": "potentially null value at runtime to do",
    "start": "237000",
    "end": "239319"
  },
  {
    "text": "this in JavaScript you simply use the",
    "start": "239319",
    "end": "241319"
  },
  {
    "text": "question mark operator before calling an",
    "start": "241319",
    "end": "243280"
  },
  {
    "text": "object's method or property if the",
    "start": "243280",
    "end": "245400"
  },
  {
    "text": "object is null or undefined then the",
    "start": "245400",
    "end": "247720"
  },
  {
    "text": "operator will short circuit and returned",
    "start": "247720",
    "end": "249799"
  },
  {
    "text": "an undefined value rather than throwing",
    "start": "249799",
    "end": "251599"
  },
  {
    "text": "an error given this Behavior it makes it",
    "start": "251599",
    "end": "253920"
  },
  {
    "text": "possible to chain this operator as you",
    "start": "253920",
    "end": "255640"
  },
  {
    "text": "cool nested properties of an object and",
    "start": "255640",
    "end": "258199"
  },
  {
    "text": "whilst it's not as effective as compile",
    "start": "258199",
    "end": "260120"
  },
  {
    "text": "time safety it certainly reduces the",
    "start": "260120",
    "end": "262240"
  },
  {
    "text": "boiler plate of having to write if",
    "start": "262240",
    "end": "263840"
  },
  {
    "text": "statements with a lot of Boolean ands",
    "start": "263840",
    "end": "266080"
  },
  {
    "text": "additionally the use of linters can also",
    "start": "266080",
    "end": "268040"
  },
  {
    "text": "help to reduce the risk of error",
    "start": "268040",
    "end": "270199"
  },
  {
    "text": "one such option is the no unsafe",
    "start": "270199",
    "end": "272720"
  },
  {
    "text": "optional chaining rule in eslint which",
    "start": "272720",
    "end": "274919"
  },
  {
    "text": "can be used to reduce any type errors",
    "start": "274919",
    "end": "276720"
  },
  {
    "text": "when using safe navigation as well as",
    "start": "276720",
    "end": "279039"
  },
  {
    "text": "JavaScript this feature is also found in",
    "start": "279039",
    "end": "281160"
  },
  {
    "text": "Ruby which instead uses the aasan symbol",
    "start": "281160",
    "end": "284520"
  },
  {
    "text": "given that the question mark is already",
    "start": "284520",
    "end": "286440"
  },
  {
    "text": "used by methods to Mark a Boolean return",
    "start": "286440",
    "end": "289080"
  },
  {
    "text": "value whilst both JavaScript and Ruby",
    "start": "289080",
    "end": "291520"
  },
  {
    "text": "support safe navigation one language",
    "start": "291520",
    "end": "293479"
  },
  {
    "text": "that does not is Python and despite a",
    "start": "293479",
    "end": "296000"
  },
  {
    "text": "proposal being raised in 2015 doesn't",
    "start": "296000",
    "end": "298560"
  },
  {
    "text": "look like it will any anytime soon as",
    "start": "298560",
    "end": "300759"
  },
  {
    "text": "well as interpreted languages safe",
    "start": "300759",
    "end": "302560"
  },
  {
    "text": "navigation has also made its way to",
    "start": "302560",
    "end": "304440"
  },
  {
    "text": "compiled ones Swift added the feature",
    "start": "304440",
    "end": "306479"
  },
  {
    "text": "the same time that it did optionals",
    "start": "306479",
    "end": "308400"
  },
  {
    "text": "requiring the use of the operator in",
    "start": "308400",
    "end": "310039"
  },
  {
    "text": "order to unwrap an optional safely rust",
    "start": "310039",
    "end": "312600"
  },
  {
    "text": "also provides safe navigation as well",
    "start": "312600",
    "end": "314759"
  },
  {
    "text": "when inside of a function that returns",
    "start": "314759",
    "end": "316400"
  },
  {
    "text": "an option any internal options can be",
    "start": "316400",
    "end": "318680"
  },
  {
    "text": "unwrapped using the safe navigation",
    "start": "318680",
    "end": "320600"
  },
  {
    "text": "operator which if the option is none",
    "start": "320600",
    "end": "322800"
  },
  {
    "text": "will Short Circuit the function and",
    "start": "322800",
    "end": "324560"
  },
  {
    "text": "return none early this Behavior again is",
    "start": "324560",
    "end": "327360"
  },
  {
    "text": "inspired by functional programming",
    "start": "327360",
    "end": "328880"
  },
  {
    "text": "languages in fact the maybe type in",
    "start": "328880",
    "end": "331039"
  },
  {
    "text": "hasco that we mentioned earlier is",
    "start": "331039",
    "end": "332520"
  },
  {
    "text": "actually a monad which provides this",
    "start": "332520",
    "end": "334280"
  },
  {
    "text": "chaining feature ultimately the",
    "start": "334280",
    "end": "336440"
  },
  {
    "text": "inclusion of n safety in many modern and",
    "start": "336440",
    "end": "338880"
  },
  {
    "text": "traditional languages is something I'm",
    "start": "338880",
    "end": "340520"
  },
  {
    "text": "happy to see newer languages such as",
    "start": "340520",
    "end": "342639"
  },
  {
    "text": "rust Swift and cotlin put a lot of",
    "start": "342639",
    "end": "344639"
  },
  {
    "text": "emphasis on runtime safety and by doing",
    "start": "344639",
    "end": "346919"
  },
  {
    "text": "so means we get to spend less time",
    "start": "346919",
    "end": "348880"
  },
  {
    "text": "fixing bugs and more time writing code",
    "start": "348880",
    "end": "351080"
  },
  {
    "text": "that we can feel just that little bit",
    "start": "351080",
    "end": "352759"
  },
  {
    "text": "more confident about",
    "start": "352759",
    "end": "357120"
  }
]