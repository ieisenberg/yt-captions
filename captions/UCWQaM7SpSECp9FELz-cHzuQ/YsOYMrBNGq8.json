[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "don't let anyone tell you that python is",
    "start": "179",
    "end": "2280"
  },
  {
    "text": "slow",
    "start": "2280",
    "end": "3080"
  },
  {
    "text": "it may not be as fast as those fancy",
    "start": "3080",
    "end": "5759"
  },
  {
    "text": "compiled languages but with these six",
    "start": "5759",
    "end": "9240"
  },
  {
    "text": "Secrets they won't be able to tell the",
    "start": "9240",
    "end": "11519"
  },
  {
    "text": "difference especially with the last one",
    "start": "11519",
    "end": "14219"
  },
  {
    "text": "the first secret use the building",
    "start": "14219",
    "end": "16080"
  },
  {
    "start": "15000",
    "end": "52000"
  },
  {
    "text": "functions it may seem tempting to write",
    "start": "16080",
    "end": "18840"
  },
  {
    "text": "your own code to solve problems and",
    "start": "18840",
    "end": "21119"
  },
  {
    "text": "let's be honest it's kind of fun however",
    "start": "21119",
    "end": "23699"
  },
  {
    "text": "if you really want to go fast you're",
    "start": "23699",
    "end": "25740"
  },
  {
    "text": "better off using the building functions",
    "start": "25740",
    "end": "27300"
  },
  {
    "text": "of the standard Library don't believe me",
    "start": "27300",
    "end": "29340"
  },
  {
    "text": "here's a comparison of my own sorting",
    "start": "29340",
    "end": "31380"
  },
  {
    "text": "algorithm against the built-in sorted",
    "start": "31380",
    "end": "33660"
  },
  {
    "text": "function",
    "start": "33660",
    "end": "35399"
  },
  {
    "text": "and no it's not slow because I'm bad at",
    "start": "35399",
    "end": "37860"
  },
  {
    "text": "writing code I think",
    "start": "37860",
    "end": "40500"
  },
  {
    "text": "these building functions are faster",
    "start": "40500",
    "end": "42239"
  },
  {
    "text": "because they're written in C which is",
    "start": "42239",
    "end": "44040"
  },
  {
    "text": "one of those compiled languages I",
    "start": "44040",
    "end": "45540"
  },
  {
    "text": "mentioned earlier if you can't beat them",
    "start": "45540",
    "end": "47640"
  },
  {
    "text": "you may as well join them just in secret",
    "start": "47640",
    "end": "51600"
  },
  {
    "text": "my second approach is to be lazy",
    "start": "51600",
    "end": "54020"
  },
  {
    "start": "52000",
    "end": "107000"
  },
  {
    "text": "laziness is a virtue our jobs as",
    "start": "54020",
    "end": "56879"
  },
  {
    "text": "developers is to enable that laziness",
    "start": "56879",
    "end": "59219"
  },
  {
    "text": "who wants to manually do anything when",
    "start": "59219",
    "end": "62039"
  },
  {
    "text": "you could just write some code to do it",
    "start": "62039",
    "end": "63600"
  },
  {
    "text": "for you in perhaps the same amount of",
    "start": "63600",
    "end": "66180"
  },
  {
    "text": "time if you're lucky",
    "start": "66180",
    "end": "68159"
  },
  {
    "text": "you can bring this laziness to python as",
    "start": "68159",
    "end": "70380"
  },
  {
    "text": "well through the use of generators by",
    "start": "70380",
    "end": "72960"
  },
  {
    "text": "using the yield keyword we can actually",
    "start": "72960",
    "end": "75299"
  },
  {
    "text": "turn functions into iterative generator",
    "start": "75299",
    "end": "77939"
  },
  {
    "text": "functions",
    "start": "77939",
    "end": "79500"
  },
  {
    "text": "through the yield keyword a generator",
    "start": "79500",
    "end": "81420"
  },
  {
    "text": "function returns a generator type",
    "start": "81420",
    "end": "83880"
  },
  {
    "text": "which can then be called using either",
    "start": "83880",
    "end": "85200"
  },
  {
    "text": "the next function or in a for Loop",
    "start": "85200",
    "end": "88200"
  },
  {
    "text": "call of the generator Returns the next",
    "start": "88200",
    "end": "89820"
  },
  {
    "text": "instance of yield in the function",
    "start": "89820",
    "end": "92159"
  },
  {
    "text": "you can imagine this as pausing and",
    "start": "92159",
    "end": "94140"
  },
  {
    "text": "resuming the function",
    "start": "94140",
    "end": "96299"
  },
  {
    "text": "using a generator when working with a",
    "start": "96299",
    "end": "98939"
  },
  {
    "text": "large data set prevents having to do",
    "start": "98939",
    "end": "100979"
  },
  {
    "text": "expensive memory allocation which can",
    "start": "100979",
    "end": "103680"
  },
  {
    "text": "heavily impact performance as you can",
    "start": "103680",
    "end": "105900"
  },
  {
    "text": "see",
    "start": "105900",
    "end": "107640"
  },
  {
    "start": "107000",
    "end": "159000"
  },
  {
    "text": "tip number three is to use concurrency",
    "start": "107640",
    "end": "110060"
  },
  {
    "text": "have you ever thought about cloning",
    "start": "110060",
    "end": "112560"
  },
  {
    "text": "yourself so you can get twice as much",
    "start": "112560",
    "end": "114360"
  },
  {
    "text": "done if so I have some good news for you",
    "start": "114360",
    "end": "117659"
  },
  {
    "text": "in computer science we refer to that as",
    "start": "117659",
    "end": "120000"
  },
  {
    "text": "concurrency",
    "start": "120000",
    "end": "121619"
  },
  {
    "text": "not all problems can be solved",
    "start": "121619",
    "end": "123180"
  },
  {
    "text": "concurrently but there are a good number",
    "start": "123180",
    "end": "124920"
  },
  {
    "text": "that can",
    "start": "124920",
    "end": "126060"
  },
  {
    "text": "the ones that really can are known as",
    "start": "126060",
    "end": "128700"
  },
  {
    "text": "embarrassingly parallel I'll probably do",
    "start": "128700",
    "end": "131340"
  },
  {
    "text": "a video on what problems are considered",
    "start": "131340",
    "end": "133260"
  },
  {
    "text": "embarrassingly parallel so now's a good",
    "start": "133260",
    "end": "135660"
  },
  {
    "text": "time to consider subscribing if you",
    "start": "135660",
    "end": "137400"
  },
  {
    "text": "haven't done so already",
    "start": "137400",
    "end": "139260"
  },
  {
    "text": "concurrency can be achieved in Python",
    "start": "139260",
    "end": "141480"
  },
  {
    "text": "using the multi-processing library in",
    "start": "141480",
    "end": "143879"
  },
  {
    "text": "this example we're making use of",
    "start": "143879",
    "end": "145500"
  },
  {
    "text": "multi-processing to batch process a",
    "start": "145500",
    "end": "147540"
  },
  {
    "text": "number of image by adding a gaussian",
    "start": "147540",
    "end": "149340"
  },
  {
    "text": "blur to them we're timing this both",
    "start": "149340",
    "end": "151140"
  },
  {
    "text": "running concurrently and in single",
    "start": "151140",
    "end": "152819"
  },
  {
    "text": "processing mode",
    "start": "152819",
    "end": "154260"
  },
  {
    "text": "as you can see running concurrently is a",
    "start": "154260",
    "end": "157379"
  },
  {
    "text": "fraction of the time",
    "start": "157379",
    "end": "159360"
  },
  {
    "start": "159000",
    "end": "204000"
  },
  {
    "text": "tip number four is to compile your code",
    "start": "159360",
    "end": "161580"
  },
  {
    "text": "using cython python is actually another",
    "start": "161580",
    "end": "165000"
  },
  {
    "text": "language that is a superset of python it",
    "start": "165000",
    "end": "167700"
  },
  {
    "text": "basically allows you to compile",
    "start": "167700",
    "end": "168900"
  },
  {
    "text": "python-like code to see",
    "start": "168900",
    "end": "171959"
  },
  {
    "text": "what this means is you can fit in with",
    "start": "171959",
    "end": "173879"
  },
  {
    "text": "your compiled friends from before and",
    "start": "173879",
    "end": "175620"
  },
  {
    "text": "this time they have to respect you",
    "start": "175620",
    "end": "177420"
  },
  {
    "text": "psython isn't a full-on replacement for",
    "start": "177420",
    "end": "179760"
  },
  {
    "text": "python but instead a way to optimize",
    "start": "179760",
    "end": "182040"
  },
  {
    "text": "certain parts of your code base to",
    "start": "182040",
    "end": "183840"
  },
  {
    "text": "improve the overall performance",
    "start": "183840",
    "end": "185940"
  },
  {
    "text": "in this example we're using it to",
    "start": "185940",
    "end": "188220"
  },
  {
    "text": "compile a module that calculates a",
    "start": "188220",
    "end": "190019"
  },
  {
    "text": "factorial for a given integer first we",
    "start": "190019",
    "end": "192720"
  },
  {
    "text": "just need to run our compilation command",
    "start": "192720",
    "end": "194400"
  },
  {
    "text": "to compile the code to C then we can run",
    "start": "194400",
    "end": "196920"
  },
  {
    "text": "our test file to measure the performance",
    "start": "196920",
    "end": "199140"
  },
  {
    "text": "yes that timing is correct we really do",
    "start": "199140",
    "end": "202019"
  },
  {
    "text": "get that level of improvement",
    "start": "202019",
    "end": "204239"
  },
  {
    "start": "204000",
    "end": "232000"
  },
  {
    "text": "my fifth secret is to use libraries and",
    "start": "204239",
    "end": "206700"
  },
  {
    "text": "Frameworks that are compiled",
    "start": "206700",
    "end": "208620"
  },
  {
    "text": "you may not know this already but I",
    "start": "208620",
    "end": "210720"
  },
  {
    "text": "actually just heard that compiled",
    "start": "210720",
    "end": "211980"
  },
  {
    "text": "languages tend to be more performant",
    "start": "211980",
    "end": "214080"
  },
  {
    "text": "well just like the standard Library",
    "start": "214080",
    "end": "216239"
  },
  {
    "text": "there are a number of other Frameworks",
    "start": "216239",
    "end": "217860"
  },
  {
    "text": "we can use to improve this performance",
    "start": "217860",
    "end": "220440"
  },
  {
    "text": "some of these Frameworks include numpy",
    "start": "220440",
    "end": "222720"
  },
  {
    "text": "pandas and pillow which are all",
    "start": "222720",
    "end": "225480"
  },
  {
    "text": "implemented using C under the hood this",
    "start": "225480",
    "end": "227640"
  },
  {
    "text": "allows you to harness the power of C",
    "start": "227640",
    "end": "229019"
  },
  {
    "text": "whilst writing code in a language that",
    "start": "229019",
    "end": "230580"
  },
  {
    "text": "is a bit more readable",
    "start": "230580",
    "end": "232680"
  },
  {
    "start": "232000",
    "end": "280000"
  },
  {
    "text": "and tip number six is to use Pi Pi",
    "start": "232680",
    "end": "236159"
  },
  {
    "text": "pipei is an alternative python",
    "start": "236159",
    "end": "238379"
  },
  {
    "text": "interpreter that can be faster than the",
    "start": "238379",
    "end": "240299"
  },
  {
    "text": "standard interpreter C python",
    "start": "240299",
    "end": "242819"
  },
  {
    "text": "what makes pie pie so fast is that it",
    "start": "242819",
    "end": "245159"
  },
  {
    "text": "uses a compiler method known as just in",
    "start": "245159",
    "end": "247260"
  },
  {
    "text": "time compilation just in time",
    "start": "247260",
    "end": "249120"
  },
  {
    "text": "compilation is very similar to",
    "start": "249120",
    "end": "250860"
  },
  {
    "text": "interpretation however the difference is",
    "start": "250860",
    "end": "253080"
  },
  {
    "text": "that it looks forward in your code and",
    "start": "253080",
    "end": "255000"
  },
  {
    "text": "compiles it before it's needed which has",
    "start": "255000",
    "end": "257100"
  },
  {
    "text": "a huge impact on performance it's the",
    "start": "257100",
    "end": "259620"
  },
  {
    "text": "same approach as what Java uses with the",
    "start": "259620",
    "end": "261239"
  },
  {
    "text": "jvm you can use pipei as just a drop-in",
    "start": "261239",
    "end": "263940"
  },
  {
    "text": "replacement for the python interpreter",
    "start": "263940",
    "end": "265500"
  },
  {
    "text": "as you can see on the screen again this",
    "start": "265500",
    "end": "267720"
  },
  {
    "text": "gives a huge performance increase",
    "start": "267720",
    "end": "269880"
  },
  {
    "text": "knowing when to use pie pie is a little",
    "start": "269880",
    "end": "272040"
  },
  {
    "text": "more Arcane however so it's probably a",
    "start": "272040",
    "end": "274259"
  },
  {
    "text": "good idea to Benchmark your code with",
    "start": "274259",
    "end": "276000"
  },
  {
    "text": "both Pi Pi and the standard python",
    "start": "276000",
    "end": "277919"
  },
  {
    "text": "interpreter before coming to a decision",
    "start": "277919",
    "end": "280500"
  },
  {
    "start": "280000",
    "end": "301000"
  },
  {
    "text": "armed with these six secrets you can now",
    "start": "280500",
    "end": "282720"
  },
  {
    "text": "make python as fast as those compiled",
    "start": "282720",
    "end": "284699"
  },
  {
    "text": "languages if you know of any secrets to",
    "start": "284699",
    "end": "287220"
  },
  {
    "text": "make python go faster that I didn't",
    "start": "287220",
    "end": "288660"
  },
  {
    "text": "cover in this video let me know in the",
    "start": "288660",
    "end": "290639"
  },
  {
    "text": "comments down below otherwise I hope you",
    "start": "290639",
    "end": "292919"
  },
  {
    "text": "enjoyed this video and I'll see you on",
    "start": "292919",
    "end": "294660"
  },
  {
    "text": "the next one",
    "start": "294660",
    "end": "297139"
  }
]