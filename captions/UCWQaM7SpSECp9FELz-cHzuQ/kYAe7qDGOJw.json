[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "JavaScript likes to do a lot of things a",
    "start": "80",
    "end": "2240"
  },
  {
    "text": "little differently and whilst it's the",
    "start": "2240",
    "end": "4080"
  },
  {
    "text": "most popular language out there as",
    "start": "4080",
    "end": "5839"
  },
  {
    "text": "anyone who went to school will tell you",
    "start": "5839",
    "end": "7359"
  },
  {
    "text": "being popular doesn't mean it's the best",
    "start": "7359",
    "end": "9960"
  },
  {
    "text": "so in this video we're going to look at",
    "start": "9960",
    "end": "11920"
  },
  {
    "text": "eight things that JavaScript does",
    "start": "11920",
    "end": "13480"
  },
  {
    "text": "differently but does not do them best",
    "start": "13480",
    "end": "16080"
  },
  {
    "start": "15000",
    "end": "132000"
  },
  {
    "text": "one of the most common operations when",
    "start": "16080",
    "end": "17800"
  },
  {
    "text": "writing code is to check whether or not",
    "start": "17800",
    "end": "19760"
  },
  {
    "text": "two values are the same in most",
    "start": "19760",
    "end": "21920"
  },
  {
    "text": "programming languages this is done using",
    "start": "21920",
    "end": "24039"
  },
  {
    "text": "the equality operator which is a binary",
    "start": "24039",
    "end": "26400"
  },
  {
    "text": "operator that compares the left hand",
    "start": "26400",
    "end": "28160"
  },
  {
    "text": "side with the right returning true if",
    "start": "28160",
    "end": "30240"
  },
  {
    "text": "both of the values match however",
    "start": "30240",
    "end": "32078"
  },
  {
    "text": "JavaScript isn't like most programming",
    "start": "32079",
    "end": "33879"
  },
  {
    "text": "languages and rather than having one of",
    "start": "33879",
    "end": "35480"
  },
  {
    "text": "these operators it actually has two now",
    "start": "35480",
    "end": "38000"
  },
  {
    "text": "this wasn't always the case JavaScript",
    "start": "38000",
    "end": "40000"
  },
  {
    "text": "initially had only one equality operator",
    "start": "40000",
    "end": "42399"
  },
  {
    "text": "which followed the style of other C",
    "start": "42399",
    "end": "44039"
  },
  {
    "text": "derived languages the problem was that",
    "start": "44039",
    "end": "46160"
  },
  {
    "text": "it didn't act the same for example in",
    "start": "46160",
    "end": "48399"
  },
  {
    "text": "any normal language comparing the",
    "start": "48399",
    "end": "50120"
  },
  {
    "text": "Boolean false with an empty string would",
    "start": "50120",
    "end": "52120"
  },
  {
    "text": "obviously not be true however in",
    "start": "52120",
    "end": "54199"
  },
  {
    "text": "JavaScript that's not the case this",
    "start": "54199",
    "end": "56359"
  },
  {
    "text": "happens because of a couple of reasons",
    "start": "56359",
    "end": "58600"
  },
  {
    "text": "the first is due to something called",
    "start": "58600",
    "end": "60199"
  },
  {
    "text": "type coercion which is where JavaScript",
    "start": "60199",
    "end": "62280"
  },
  {
    "text": "will automatically convert one type to",
    "start": "62280",
    "end": "64239"
  },
  {
    "text": "another in order to make an operation",
    "start": "64239",
    "end": "66159"
  },
  {
    "text": "work for example comparing the number",
    "start": "66159",
    "end": "68320"
  },
  {
    "text": "five to the string five will return true",
    "start": "68320",
    "end": "71159"
  },
  {
    "text": "this is because the number five has been",
    "start": "71159",
    "end": "72840"
  },
  {
    "text": "coerced to a string Under the Hood the",
    "start": "72840",
    "end": "75640"
  },
  {
    "text": "second reason for an empty string to",
    "start": "75640",
    "end": "77479"
  },
  {
    "text": "equal false is due to javascript's",
    "start": "77479",
    "end": "79280"
  },
  {
    "text": "concept of truthy and falsey values",
    "start": "79280",
    "end": "81840"
  },
  {
    "text": "these are values that resolve to true or",
    "start": "81840",
    "end": "83759"
  },
  {
    "text": "false respectively when apply to a",
    "start": "83759",
    "end": "85920"
  },
  {
    "text": "Boolean context as you can no doubt",
    "start": "85920",
    "end": "88720"
  },
  {
    "text": "guess this Behavior causes a lot of bugs",
    "start": "88720",
    "end": "91280"
  },
  {
    "text": "and so the language developers decided",
    "start": "91280",
    "end": "93280"
  },
  {
    "text": "to correct this however rather than",
    "start": "93280",
    "end": "95280"
  },
  {
    "text": "changing the existing equality operator",
    "start": "95280",
    "end": "97439"
  },
  {
    "text": "and breaking backwards compatibility",
    "start": "97439",
    "end": "99399"
  },
  {
    "text": "they decided to create a new operator",
    "start": "99399",
    "end": "101280"
  },
  {
    "text": "instead this operator called the strict",
    "start": "101280",
    "end": "103880"
  },
  {
    "text": "equality operator is defined using the",
    "start": "103880",
    "end": "106280"
  },
  {
    "text": "triple equal symbols this operator",
    "start": "106280",
    "end": "108759"
  },
  {
    "text": "checks both the value and type of the",
    "start": "108759",
    "end": "111000"
  },
  {
    "text": "given arguments only returning true if",
    "start": "111000",
    "end": "113399"
  },
  {
    "text": "both match in addition to this",
    "start": "113399",
    "end": "115280"
  },
  {
    "text": "JavaScript also provides the strict",
    "start": "115280",
    "end": "117119"
  },
  {
    "text": "inequality operator which will return",
    "start": "117119",
    "end": "119119"
  },
  {
    "text": "true if neither the type nor value match",
    "start": "119119",
    "end": "122039"
  },
  {
    "text": "it's generally recommended to use these",
    "start": "122039",
    "end": "123920"
  },
  {
    "text": "stricter operators rather than their",
    "start": "123920",
    "end": "125680"
  },
  {
    "text": "looser counterparts as it can prevent a",
    "start": "125680",
    "end": "128000"
  },
  {
    "text": "whole host of issues unfortunately that",
    "start": "128000",
    "end": "130319"
  },
  {
    "text": "advice can't apply to our next Quirk",
    "start": "130319",
    "end": "133040"
  },
  {
    "start": "132000",
    "end": "192000"
  },
  {
    "text": "equality isn't the only operator to be",
    "start": "133040",
    "end": "135239"
  },
  {
    "text": "affected by javascripts type coercion",
    "start": "135239",
    "end": "137519"
  },
  {
    "text": "with the arithmetic ones also being held",
    "start": "137519",
    "end": "139560"
  },
  {
    "text": "hostage to this wonderful feature in",
    "start": "139560",
    "end": "141680"
  },
  {
    "text": "most languages you can only perform",
    "start": "141680",
    "end": "143599"
  },
  {
    "text": "addition or subtraction on number types",
    "start": "143599",
    "end": "145920"
  },
  {
    "text": "other languages will take this even",
    "start": "145920",
    "end": "147480"
  },
  {
    "text": "further restricting only the same type",
    "start": "147480",
    "end": "149560"
  },
  {
    "text": "such as an integer or a float to be used",
    "start": "149560",
    "end": "151879"
  },
  {
    "text": "with one another JavaScript however",
    "start": "151879",
    "end": "153840"
  },
  {
    "text": "takes a more Laz Fair approach allowing",
    "start": "153840",
    "end": "156519"
  },
  {
    "text": "you to add pretty much any two values",
    "start": "156519",
    "end": "158400"
  },
  {
    "text": "you want to each other want to add the",
    "start": "158400",
    "end": "160360"
  },
  {
    "text": "value 10 to a string with JavaScript you",
    "start": "160360",
    "end": "162560"
  },
  {
    "text": "can what about a true to a null yep no",
    "start": "162560",
    "end": "165319"
  },
  {
    "text": "problem whilst this is a cool party",
    "start": "165319",
    "end": "167120"
  },
  {
    "text": "trick it can be a real headache when it",
    "start": "167120",
    "end": "169000"
  },
  {
    "text": "comes to production code not only that",
    "start": "169000",
    "end": "171239"
  },
  {
    "text": "it's incredibly inconsistent for example",
    "start": "171239",
    "end": "173800"
  },
  {
    "text": "if I add a number to a string or vice",
    "start": "173800",
    "end": "176000"
  },
  {
    "text": "versa I get a string back but if I",
    "start": "176000",
    "end": "178360"
  },
  {
    "text": "subtract a number from a string I'll get",
    "start": "178360",
    "end": "180360"
  },
  {
    "text": "back a number worse yet if I add a minus",
    "start": "180360",
    "end": "182959"
  },
  {
    "text": "number to a string I'm getting back a",
    "start": "182959",
    "end": "184560"
  },
  {
    "text": "string again whilst this may feel like",
    "start": "184560",
    "end": "186720"
  },
  {
    "text": "Madness there is actually some",
    "start": "186720",
    "end": "188400"
  },
  {
    "text": "precedence ordering to this type",
    "start": "188400",
    "end": "190040"
  },
  {
    "text": "coercion which the documentation does",
    "start": "190040",
    "end": "192319"
  },
  {
    "start": "192000",
    "end": "308000"
  },
  {
    "text": "Define unfortunately however when it",
    "start": "192319",
    "end": "194280"
  },
  {
    "text": "comes to numbers in JavaScript",
    "start": "194280",
    "end": "195920"
  },
  {
    "text": "arithmetic operators aren't the only",
    "start": "195920",
    "end": "197760"
  },
  {
    "text": "thing to make you feel a little crazy",
    "start": "197760",
    "end": "200040"
  },
  {
    "text": "for example if I gave you this list of",
    "start": "200040",
    "end": "202040"
  },
  {
    "text": "numbers and asked you to sort them in",
    "start": "202040",
    "end": "203720"
  },
  {
    "text": "ascending order there's a good chance",
    "start": "203720",
    "end": "205720"
  },
  {
    "text": "your sorted list would look like this if",
    "start": "205720",
    "end": "208239"
  },
  {
    "text": "so then I have some good news and bad",
    "start": "208239",
    "end": "210120"
  },
  {
    "text": "news for you the good news is that you",
    "start": "210120",
    "end": "212360"
  },
  {
    "text": "have sorted the list correctly the bad",
    "start": "212360",
    "end": "214640"
  },
  {
    "text": "news is that according to JavaScript",
    "start": "214640",
    "end": "216519"
  },
  {
    "text": "you're wrong this is what the sorted",
    "start": "216519",
    "end": "218560"
  },
  {
    "text": "list looks like in JavaScript I know",
    "start": "218560",
    "end": "221280"
  },
  {
    "text": "it's cursed whilst this is pretty awful",
    "start": "221280",
    "end": "223879"
  },
  {
    "text": "there is a logical reason for this and",
    "start": "223879",
    "end": "226040"
  },
  {
    "text": "it's to do with how JavaScript arrays",
    "start": "226040",
    "end": "227920"
  },
  {
    "text": "work arrays in JavaScript can either be",
    "start": "227920",
    "end": "230360"
  },
  {
    "text": "homogeneous or heterogeneous which means",
    "start": "230360",
    "end": "232560"
  },
  {
    "text": "they can be composed of the same or",
    "start": "232560",
    "end": "234439"
  },
  {
    "text": "different types for example here I have",
    "start": "234439",
    "end": "236640"
  },
  {
    "text": "a homogeneous array containing only",
    "start": "236640",
    "end": "238439"
  },
  {
    "text": "numbers however here here I have an",
    "start": "238439",
    "end": "240200"
  },
  {
    "text": "array that contains numbers strings a",
    "start": "240200",
    "end": "242360"
  },
  {
    "text": "Boolean and even another array which in",
    "start": "242360",
    "end": "245319"
  },
  {
    "text": "JavaScript is perfectly valid",
    "start": "245319",
    "end": "247640"
  },
  {
    "text": "unfortunately this little feature of",
    "start": "247640",
    "end": "249599"
  },
  {
    "text": "arrays causes some issues when trying to",
    "start": "249599",
    "end": "251640"
  },
  {
    "text": "apply any kind of standardized functions",
    "start": "251640",
    "end": "253480"
  },
  {
    "text": "to them like the sort function in the",
    "start": "253480",
    "end": "255720"
  },
  {
    "text": "case of sort it's a pretty simple",
    "start": "255720",
    "end": "257600"
  },
  {
    "text": "question how does one compare two",
    "start": "257600",
    "end": "259199"
  },
  {
    "text": "different types to each other sure four",
    "start": "259199",
    "end": "261320"
  },
  {
    "text": "is less than five but is it greater than",
    "start": "261320",
    "end": "263199"
  },
  {
    "text": "or equal to an array containing five in",
    "start": "263199",
    "end": "265840"
  },
  {
    "text": "most civilized societies this would be",
    "start": "265840",
    "end": "267680"
  },
  {
    "text": "reason enough to stop and reverse C",
    "start": "267680",
    "end": "269960"
  },
  {
    "text": "unfortunately when it came to JavaScript",
    "start": "269960",
    "end": "271800"
  },
  {
    "text": "a solution had to be found for some",
    "start": "271800",
    "end": "273880"
  },
  {
    "text": "unknown reason so the solution was to",
    "start": "273880",
    "end": "276240"
  },
  {
    "text": "convert everything in the array to a",
    "start": "276240",
    "end": "278000"
  },
  {
    "text": "single type the string type and then",
    "start": "278000",
    "end": "280240"
  },
  {
    "text": "sort that in alphabetical order whilst",
    "start": "280240",
    "end": "282759"
  },
  {
    "text": "it is a solution it does mean that",
    "start": "282759",
    "end": "284600"
  },
  {
    "text": "sorting numbers doesn't actually work",
    "start": "284600",
    "end": "286440"
  },
  {
    "text": "how we would expect fortunately we're",
    "start": "286440",
    "end": "288400"
  },
  {
    "text": "not stuck in sorting purgatory and if we",
    "start": "288400",
    "end": "290880"
  },
  {
    "text": "want to sort a list of numbers as both",
    "start": "290880",
    "end": "292840"
  },
  {
    "text": "the universe and mathematicians intended",
    "start": "292840",
    "end": "294960"
  },
  {
    "text": "we can do so by passing in a function to",
    "start": "294960",
    "end": "296960"
  },
  {
    "text": "our sort method the following one will",
    "start": "296960",
    "end": "299000"
  },
  {
    "text": "work really nice nicely when we want to",
    "start": "299000",
    "end": "300440"
  },
  {
    "text": "have an ascending order of numbers and",
    "start": "300440",
    "end": "302800"
  },
  {
    "text": "because it uses arithmetic which we",
    "start": "302800",
    "end": "304639"
  },
  {
    "text": "mentioned before it'll also work for",
    "start": "304639",
    "end": "306840"
  },
  {
    "text": "arrays and strings whilst JavaScript may",
    "start": "306840",
    "end": "309560"
  },
  {
    "start": "308000",
    "end": "380000"
  },
  {
    "text": "have an awkward way of sorting values it",
    "start": "309560",
    "end": "311680"
  },
  {
    "text": "does still perform correct sorting in a",
    "start": "311680",
    "end": "313600"
  },
  {
    "text": "timely manner and that's thanks to the",
    "start": "313600",
    "end": "315560"
  },
  {
    "text": "Sorting algorithm it uses sorting",
    "start": "315560",
    "end": "317639"
  },
  {
    "text": "algorithms can be a little Arcane but",
    "start": "317639",
    "end": "320000"
  },
  {
    "text": "it's worthwhile understanding how they",
    "start": "320000",
    "end": "321360"
  },
  {
    "text": "work under the hood and one of the best",
    "start": "321360",
    "end": "323520"
  },
  {
    "text": "ways to learn is to use the sponsor of",
    "start": "323520",
    "end": "325280"
  },
  {
    "text": "today's video brilliant.org brilliant is",
    "start": "325280",
    "end": "327840"
  },
  {
    "text": "a platform that allows you to learn",
    "start": "327840",
    "end": "329199"
  },
  {
    "text": "Compu computer science math and data",
    "start": "329199",
    "end": "331080"
  },
  {
    "text": "science interactively if you're looking",
    "start": "331080",
    "end": "332759"
  },
  {
    "text": "to learn JavaScript or any other",
    "start": "332759",
    "end": "334400"
  },
  {
    "text": "language brilliant can help you learn",
    "start": "334400",
    "end": "335919"
  },
  {
    "text": "the computer science fundamentals that",
    "start": "335919",
    "end": "337680"
  },
  {
    "text": "you might miss out on when just learning",
    "start": "337680",
    "end": "339319"
  },
  {
    "text": "a language's syntax by taking the",
    "start": "339319",
    "end": "341560"
  },
  {
    "text": "introduction to algorithms course you're",
    "start": "341560",
    "end": "343479"
  },
  {
    "text": "provided with 15 lessons looking at",
    "start": "343479",
    "end": "345560"
  },
  {
    "text": "commonly used algorithms for searching",
    "start": "345560",
    "end": "347639"
  },
  {
    "text": "sorting and matching the journey doesn't",
    "start": "347639",
    "end": "349720"
  },
  {
    "text": "stop there either as brilliant then",
    "start": "349720",
    "end": "351400"
  },
  {
    "text": "takes you to the algorithms and data",
    "start": "351400",
    "end": "352960"
  },
  {
    "text": "structure courses introducing you to the",
    "start": "352960",
    "end": "354880"
  },
  {
    "text": "Big O notation which is used to",
    "start": "354880",
    "end": "356720"
  },
  {
    "text": "determine and communicate the upper",
    "start": "356720",
    "end": "358639"
  },
  {
    "text": "bound running time of an algorithm all",
    "start": "358639",
    "end": "360960"
  },
  {
    "text": "of this is provided in interactive",
    "start": "360960",
    "end": "362919"
  },
  {
    "text": "bite-size courses allowing you to learn",
    "start": "362919",
    "end": "365039"
  },
  {
    "text": "at your own pace in your own time so to",
    "start": "365039",
    "end": "367560"
  },
  {
    "text": "try everything that brilliant has to",
    "start": "367560",
    "end": "368919"
  },
  {
    "text": "offer free visit brilliant.org dreamof",
    "start": "368919",
    "end": "371880"
  },
  {
    "text": "code or click the link in the",
    "start": "371880",
    "end": "373199"
  },
  {
    "text": "description down below the first 200",
    "start": "373199",
    "end": "374919"
  },
  {
    "text": "will also get 20% off brilliant's annual",
    "start": "374919",
    "end": "377080"
  },
  {
    "text": "premium subscription a big thank you to",
    "start": "377080",
    "end": "378960"
  },
  {
    "text": "brilliant for sponsoring this video this",
    "start": "378960",
    "end": "381400"
  },
  {
    "start": "380000",
    "end": "433000"
  },
  {
    "text": "next Quirk is a real doozy and one that",
    "start": "381400",
    "end": "383720"
  },
  {
    "text": "always shocks me every time I encounter",
    "start": "383720",
    "end": "385800"
  },
  {
    "text": "it let's take a look at the following",
    "start": "385800",
    "end": "387520"
  },
  {
    "text": "code it doesn't look right assigning a",
    "start": "387520",
    "end": "390080"
  },
  {
    "text": "value to X before it's even defined in",
    "start": "390080",
    "end": "392440"
  },
  {
    "text": "most languages this is a big no no but",
    "start": "392440",
    "end": "395520"
  },
  {
    "text": "we're talking about JavaScript here and",
    "start": "395520",
    "end": "397720"
  },
  {
    "text": "where other languages say no JavaScript",
    "start": "397720",
    "end": "400160"
  },
  {
    "text": "says yes this code Works due to a",
    "start": "400160",
    "end": "402639"
  },
  {
    "text": "feature called hoisting which involves",
    "start": "402639",
    "end": "404680"
  },
  {
    "text": "moving all declarations to the top of",
    "start": "404680",
    "end": "406639"
  },
  {
    "text": "their local scope so whilst the code may",
    "start": "406639",
    "end": "408960"
  },
  {
    "text": "look one way in reality it actually",
    "start": "408960",
    "end": "411160"
  },
  {
    "text": "behaves as if it was written like this",
    "start": "411160",
    "end": "413280"
  },
  {
    "text": "now hoisting isn't necessarily bad in",
    "start": "413280",
    "end": "415240"
  },
  {
    "text": "and of itself but it can sometimes trip",
    "start": "415240",
    "end": "417639"
  },
  {
    "text": "developers up fortunately JavaScript",
    "start": "417639",
    "end": "419560"
  },
  {
    "text": "introduced two new keywords for variable",
    "start": "419560",
    "end": "421520"
  },
  {
    "text": "declaration let and const which whilst",
    "start": "421520",
    "end": "424319"
  },
  {
    "text": "they are hoisted to the top of the",
    "start": "424319",
    "end": "425680"
  },
  {
    "text": "function when defined remain",
    "start": "425680",
    "end": "427560"
  },
  {
    "text": "uninitialized until their expected line",
    "start": "427560",
    "end": "430199"
  },
  {
    "text": "therefore it's often a better idea to",
    "start": "430199",
    "end": "432240"
  },
  {
    "text": "use these instead as well as hoisting we",
    "start": "432240",
    "end": "434960"
  },
  {
    "start": "433000",
    "end": "469000"
  },
  {
    "text": "also have to be considerate of scoping",
    "start": "434960",
    "end": "436800"
  },
  {
    "text": "when using the VAR keyword in JavaScript",
    "start": "436800",
    "end": "439400"
  },
  {
    "text": "Scopes are kind of different to most",
    "start": "439400",
    "end": "441039"
  },
  {
    "text": "other languages and the local scope of a",
    "start": "441039",
    "end": "443360"
  },
  {
    "text": "variable is not the Block it's defined",
    "start": "443360",
    "end": "445039"
  },
  {
    "text": "in but the function Instead This can",
    "start": "445039",
    "end": "447199"
  },
  {
    "text": "produce some odd behavior for example",
    "start": "447199",
    "end": "449400"
  },
  {
    "text": "pull in the following code most",
    "start": "449400",
    "end": "450919"
  },
  {
    "text": "languages would print out the number",
    "start": "450919",
    "end": "452560"
  },
  {
    "text": "five not JavaScript however in this case",
    "start": "452560",
    "end": "455000"
  },
  {
    "text": "it'll print out the number 10 again the",
    "start": "455000",
    "end": "457199"
  },
  {
    "text": "best way to handle this is to use those",
    "start": "457199",
    "end": "459000"
  },
  {
    "text": "newer keywords of let and const unless",
    "start": "459000",
    "end": "461160"
  },
  {
    "text": "you like spending a long time looking",
    "start": "461160",
    "end": "462720"
  },
  {
    "text": "for bugs if that's what you're looking",
    "start": "462720",
    "end": "464400"
  },
  {
    "text": "for however then don't worry our next",
    "start": "464400",
    "end": "466599"
  },
  {
    "text": "Quirk will provide all the bugs you",
    "start": "466599",
    "end": "468039"
  },
  {
    "text": "could ever ask for most programming",
    "start": "468039",
    "end": "470199"
  },
  {
    "start": "469000",
    "end": "533000"
  },
  {
    "text": "languages have a way of expressing a nil",
    "start": "470199",
    "end": "472360"
  },
  {
    "text": "value which is typically represented as",
    "start": "472360",
    "end": "474800"
  },
  {
    "text": "null in the case of JavaScript there's",
    "start": "474800",
    "end": "477120"
  },
  {
    "text": "actually two keywords that represent the",
    "start": "477120",
    "end": "479039"
  },
  {
    "text": "ABS of a value null and undefined now to",
    "start": "479039",
    "end": "482720"
  },
  {
    "text": "be fair these aren't interchangeable",
    "start": "482720",
    "end": "484720"
  },
  {
    "text": "they don't represent the exact same",
    "start": "484720",
    "end": "486599"
  },
  {
    "text": "thing the null value is pretty similar",
    "start": "486599",
    "end": "488680"
  },
  {
    "text": "to other languages representing an",
    "start": "488680",
    "end": "490800"
  },
  {
    "text": "explicitly assigned value of nothing on",
    "start": "490800",
    "end": "493520"
  },
  {
    "text": "the other hand the undefined keyword",
    "start": "493520",
    "end": "495440"
  },
  {
    "text": "represents the implicit value of nothing",
    "start": "495440",
    "end": "498039"
  },
  {
    "text": "and is the default for any variables",
    "start": "498039",
    "end": "499879"
  },
  {
    "text": "which have yet to be assigned a value",
    "start": "499879",
    "end": "502000"
  },
  {
    "text": "you can of course explicitly Define a",
    "start": "502000",
    "end": "504039"
  },
  {
    "text": "variable as undefined if you want to but",
    "start": "504039",
    "end": "506280"
  },
  {
    "text": "most of the time this comes from the",
    "start": "506280",
    "end": "507960"
  },
  {
    "text": "implicit Behavior because both null and",
    "start": "507960",
    "end": "510440"
  },
  {
    "text": "undefined are different values they do",
    "start": "510440",
    "end": "512479"
  },
  {
    "text": "not match each other when it comes to",
    "start": "512479",
    "end": "513919"
  },
  {
    "text": "strict equality but as they are both FY",
    "start": "513919",
    "end": "516919"
  },
  {
    "text": "values they will equal each other when",
    "start": "516919",
    "end": "518959"
  },
  {
    "text": "comparing them Loosely it's worth being",
    "start": "518959",
    "end": "521080"
  },
  {
    "text": "conscious of this fact when it comes to",
    "start": "521080",
    "end": "522680"
  },
  {
    "text": "checking for nulls as doing a strict",
    "start": "522680",
    "end": "524680"
  },
  {
    "text": "check will cause any undefined to fall",
    "start": "524680",
    "end": "526560"
  },
  {
    "text": "through instead you can use either a",
    "start": "526560",
    "end": "528440"
  },
  {
    "text": "loose check or better yet optional",
    "start": "528440",
    "end": "530519"
  },
  {
    "text": "chaining which will provide some level",
    "start": "530519",
    "end": "532320"
  },
  {
    "text": "of null safety as well as undefined",
    "start": "532320",
    "end": "535279"
  },
  {
    "start": "533000",
    "end": "640000"
  },
  {
    "text": "JavaScript also provides another special",
    "start": "535279",
    "end": "537440"
  },
  {
    "text": "keyword called Nan which stands for not",
    "start": "537440",
    "end": "540200"
  },
  {
    "text": "a number this value is produced from",
    "start": "540200",
    "end": "542480"
  },
  {
    "text": "certain operations where a number is",
    "start": "542480",
    "end": "544240"
  },
  {
    "text": "expected but can't be returned such as",
    "start": "544240",
    "end": "546519"
  },
  {
    "text": "paing an integer from a string where one",
    "start": "546519",
    "end": "548640"
  },
  {
    "text": "doesn't exist now credit where credit is",
    "start": "548640",
    "end": "550959"
  },
  {
    "text": "due this value is pretty useful however",
    "start": "550959",
    "end": "553640"
  },
  {
    "text": "when it comes to JavaScript we can't",
    "start": "553640",
    "end": "555399"
  },
  {
    "text": "just have nice things the Nan type",
    "start": "555399",
    "end": "557720"
  },
  {
    "text": "happens to be unintuitive when it comes",
    "start": "557720",
    "end": "559519"
  },
  {
    "text": "to equality for example if you compare a",
    "start": "559519",
    "end": "562079"
  },
  {
    "text": "nan to a nan you'd be forgiven for",
    "start": "562079",
    "end": "564120"
  },
  {
    "text": "expecting this to be true unfortunately",
    "start": "564120",
    "end": "566079"
  },
  {
    "text": "this is Javascript so it resolves to",
    "start": "566079",
    "end": "568120"
  },
  {
    "text": "false whilst this feels like it makes no",
    "start": "568120",
    "end": "570279"
  },
  {
    "text": "sense there's actually an intentional",
    "start": "570279",
    "end": "572240"
  },
  {
    "text": "reason behind it let me show you with",
    "start": "572240",
    "end": "574399"
  },
  {
    "text": "the following code here I have a",
    "start": "574399",
    "end": "576399"
  },
  {
    "text": "function that checks of a given number",
    "start": "576399",
    "end": "578360"
  },
  {
    "text": "is 1/10th of another as this is",
    "start": "578360",
    "end": "580600"
  },
  {
    "text": "Javascript I'm using the PA int method",
    "start": "580600",
    "end": "583040"
  },
  {
    "text": "in case I'm given a string if I call",
    "start": "583040",
    "end": "585000"
  },
  {
    "text": "this function with a string of five and",
    "start": "585000",
    "end": "587360"
  },
  {
    "text": "50 then this returns true however what",
    "start": "587360",
    "end": "589760"
  },
  {
    "text": "happens if I call it with the strings of",
    "start": "589760",
    "end": "591560"
  },
  {
    "text": "Fu and bar let's go through this step by",
    "start": "591560",
    "end": "594040"
  },
  {
    "text": "step the return value of PA's int on",
    "start": "594040",
    "end": "596519"
  },
  {
    "text": "both Fu and bar is Nan in both cases",
    "start": "596519",
    "end": "599480"
  },
  {
    "text": "because of this we can express our",
    "start": "599480",
    "end": "601120"
  },
  {
    "text": "return value as Nan * 10 is equal to Nan",
    "start": "601120",
    "end": "604320"
  },
  {
    "text": "Nan * 10 results in Nan so this equation",
    "start": "604320",
    "end": "607360"
  },
  {
    "text": "becomes a comparison between Nan and Nan",
    "start": "607360",
    "end": "610480"
  },
  {
    "text": "if this returned true then this function",
    "start": "610480",
    "end": "612680"
  },
  {
    "text": "would be incorrect and so by Nan not",
    "start": "612680",
    "end": "615399"
  },
  {
    "text": "equaling Nan we get back the valid",
    "start": "615399",
    "end": "617360"
  },
  {
    "text": "result so how do we determine if a value",
    "start": "617360",
    "end": "620160"
  },
  {
    "text": "is Nan fortunately there are a couple of",
    "start": "620160",
    "end": "622480"
  },
  {
    "text": "ways to do this the first is the is Nan",
    "start": "622480",
    "end": "625120"
  },
  {
    "text": "function which pretty much does what it",
    "start": "625120",
    "end": "626920"
  },
  {
    "text": "says on the tin the second is the object",
    "start": "626920",
    "end": "629519"
  },
  {
    "text": "do is method which will return true if",
    "start": "629519",
    "end": "631920"
  },
  {
    "text": "both values are Nan it's worth",
    "start": "631920",
    "end": "633920"
  },
  {
    "text": "mentioning however that this method will",
    "start": "633920",
    "end": "635639"
  },
  {
    "text": "also handle other types and objects and",
    "start": "635639",
    "end": "637839"
  },
  {
    "text": "won't explicitly match on just nans",
    "start": "637839",
    "end": "640600"
  },
  {
    "start": "640000",
    "end": "763000"
  },
  {
    "text": "speaking of objects this Segways nicely",
    "start": "640600",
    "end": "642920"
  },
  {
    "text": "into my last but certainly not least way",
    "start": "642920",
    "end": "645560"
  },
  {
    "text": "that JavaScript is just different Once",
    "start": "645560",
    "end": "648360"
  },
  {
    "text": "Upon a Time object orientated",
    "start": "648360",
    "end": "650120"
  },
  {
    "text": "programming was all of the rage in fact",
    "start": "650120",
    "end": "652279"
  },
  {
    "text": "that's how I cut my teeth on writing",
    "start": "652279",
    "end": "654000"
  },
  {
    "text": "code using abstract base classes",
    "start": "654000",
    "end": "656120"
  },
  {
    "text": "everywhere now it's no secret that",
    "start": "656120",
    "end": "658079"
  },
  {
    "text": "object-orientated programming has some",
    "start": "658079",
    "end": "659839"
  },
  {
    "text": "flaws but in some cases it also works",
    "start": "659839",
    "end": "662120"
  },
  {
    "text": "really well however the general",
    "start": "662120",
    "end": "663800"
  },
  {
    "text": "consensus is to avoid it like a bad",
    "start": "663800",
    "end": "665920"
  },
  {
    "text": "smell and I blame the source of that bad",
    "start": "665920",
    "end": "668200"
  },
  {
    "text": "smell on javascript's implementation a",
    "start": "668200",
    "end": "670760"
  },
  {
    "text": "core component of oop is the ability to",
    "start": "670760",
    "end": "673519"
  },
  {
    "text": "self-reference in languages such as Java",
    "start": "673519",
    "end": "675959"
  },
  {
    "text": "or C++ this is done using the this",
    "start": "675959",
    "end": "678279"
  },
  {
    "text": "keyword JavaScript also provides a this",
    "start": "678279",
    "end": "680680"
  },
  {
    "text": "keyword for self- reference but as",
    "start": "680680",
    "end": "682680"
  },
  {
    "text": "always there's a catch here I have a",
    "start": "682680",
    "end": "684880"
  },
  {
    "text": "simple class for a person which has a",
    "start": "684880",
    "end": "687000"
  },
  {
    "text": "property of name which is set in the",
    "start": "687000",
    "end": "688519"
  },
  {
    "text": "construct",
    "start": "688519",
    "end": "689600"
  },
  {
    "text": "this class also has a method called say",
    "start": "689600",
    "end": "691680"
  },
  {
    "text": "name which obtains the name property",
    "start": "691680",
    "end": "693839"
  },
  {
    "text": "using the this keyword and prints it to",
    "start": "693839",
    "end": "695800"
  },
  {
    "text": "the console if I run this code then it",
    "start": "695800",
    "end": "698200"
  },
  {
    "text": "works as expected however it's pretty",
    "start": "698200",
    "end": "700800"
  },
  {
    "text": "easy to break for example if I pull out",
    "start": "700800",
    "end": "703320"
  },
  {
    "text": "the person's say name method and assign",
    "start": "703320",
    "end": "705440"
  },
  {
    "text": "it to a variable followed by invoking it",
    "start": "705440",
    "end": "708160"
  },
  {
    "text": "I'll receive an error for accessing an",
    "start": "708160",
    "end": "710120"
  },
  {
    "text": "undefined this happens because the this",
    "start": "710120",
    "end": "712519"
  },
  {
    "text": "keyword is very dependent on how the",
    "start": "712519",
    "end": "714279"
  },
  {
    "text": "function is called it cares quite a lot",
    "start": "714279",
    "end": "716480"
  },
  {
    "text": "about context which we can also easily",
    "start": "716480",
    "end": "718560"
  },
  {
    "text": "change for example I can use the cool",
    "start": "718560",
    "end": "720920"
  },
  {
    "text": "function of the same name method of our",
    "start": "720920",
    "end": "722880"
  },
  {
    "text": "John person passing in an instance of",
    "start": "722880",
    "end": "725200"
  },
  {
    "text": "our person called Alice by doing so the",
    "start": "725200",
    "end": "727680"
  },
  {
    "text": "this keyword is now referencing Alice",
    "start": "727680",
    "end": "729720"
  },
  {
    "text": "instead of John printing her name to the",
    "start": "729720",
    "end": "731880"
  },
  {
    "text": "console this confusing behavior is one",
    "start": "731880",
    "end": "733959"
  },
  {
    "text": "of the reasons react moved away from oop",
    "start": "733959",
    "end": "736519"
  },
  {
    "text": "and into a more functional style",
    "start": "736519",
    "end": "738320"
  },
  {
    "text": "preferring hooks over classes now I",
    "start": "738320",
    "end": "740480"
  },
  {
    "text": "could talk about the this keyword for a",
    "start": "740480",
    "end": "742079"
  },
  {
    "text": "whole another video if that's something",
    "start": "742079",
    "end": "743639"
  },
  {
    "text": "you're interested in then let me know in",
    "start": "743639",
    "end": "745079"
  },
  {
    "text": "the comments down below even with these",
    "start": "745079",
    "end": "747160"
  },
  {
    "text": "quirks JavaScript is still the most",
    "start": "747160",
    "end": "749199"
  },
  {
    "text": "popular language out there and as",
    "start": "749199",
    "end": "750880"
  },
  {
    "text": "developers our best bet is to be aware",
    "start": "750880",
    "end": "752880"
  },
  {
    "text": "of these so that we know how to deal",
    "start": "752880",
    "end": "754360"
  },
  {
    "text": "with them when we encounter them in the",
    "start": "754360",
    "end": "756000"
  },
  {
    "text": "wild or perhaps maybe we should try to",
    "start": "756000",
    "end": "758560"
  },
  {
    "text": "avoid JavaScript as much as we",
    "start": "758560",
    "end": "761160"
  },
  {
    "text": "can",
    "start": "761160",
    "end": "764160"
  }
]