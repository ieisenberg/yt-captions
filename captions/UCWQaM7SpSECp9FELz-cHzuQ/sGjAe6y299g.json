[
  {
    "text": "Loops are one of the core components of",
    "start": "80",
    "end": "2159"
  },
  {
    "text": "software development they enable",
    "start": "2159",
    "end": "3919"
  },
  {
    "text": "developers to call sequences of",
    "start": "3919",
    "end": "5680"
  },
  {
    "text": "instructions repeatedly until a",
    "start": "5680",
    "end": "7720"
  },
  {
    "text": "condition is met in C derived languages",
    "start": "7720",
    "end": "10559"
  },
  {
    "text": "the most simple type of loop is known as",
    "start": "10559",
    "end": "12519"
  },
  {
    "text": "the while loop which will continue to",
    "start": "12519",
    "end": "14599"
  },
  {
    "text": "execute whilst a Boolean expression",
    "start": "14599",
    "end": "16720"
  },
  {
    "text": "resolves to true in the majority of",
    "start": "16720",
    "end": "19000"
  },
  {
    "text": "cases this Loop condition is a counter",
    "start": "19000",
    "end": "21519"
  },
  {
    "text": "in fact this is so common that another",
    "start": "21519",
    "end": "23519"
  },
  {
    "text": "type of loop has been created",
    "start": "23519",
    "end": "24920"
  },
  {
    "text": "specifically for this this Loop is known",
    "start": "24920",
    "end": "27320"
  },
  {
    "text": "as the for Loop which provides",
    "start": "27320",
    "end": "29119"
  },
  {
    "text": "syntactical sugar to initialize a",
    "start": "29119",
    "end": "30840"
  },
  {
    "text": "variable increment it and compare it to",
    "start": "30840",
    "end": "33480"
  },
  {
    "text": "a condition in most cases it takes the",
    "start": "33480",
    "end": "35920"
  },
  {
    "text": "form on screen but there can be any",
    "start": "35920",
    "end": "38079"
  },
  {
    "text": "number of variations of this with common",
    "start": "38079",
    "end": "40280"
  },
  {
    "text": "ones being reverse iteration or",
    "start": "40280",
    "end": "42079"
  },
  {
    "text": "performing stepped incrementation most",
    "start": "42079",
    "end": "44640"
  },
  {
    "text": "often the for Loop is used when",
    "start": "44640",
    "end": "46239"
  },
  {
    "text": "traversing through the elements of a",
    "start": "46239",
    "end": "48079"
  },
  {
    "text": "list or an array in fact this is so",
    "start": "48079",
    "end": "50199"
  },
  {
    "text": "common that another type of loop is used",
    "start": "50199",
    "end": "52719"
  },
  {
    "text": "this is the range based Loop found in",
    "start": "52719",
    "end": "54879"
  },
  {
    "text": "many modern languages this Loop provides",
    "start": "54879",
    "end": "57160"
  },
  {
    "text": "even further syntactical sugar enabling",
    "start": "57160",
    "end": "59199"
  },
  {
    "text": "the iteration of members of a collection",
    "start": "59199",
    "end": "61000"
  },
  {
    "text": "without having to use an index or a key",
    "start": "61000",
    "end": "63719"
  },
  {
    "text": "when you consider these three types of",
    "start": "63719",
    "end": "65239"
  },
  {
    "text": "Loops together it's clear to see that",
    "start": "65239",
    "end": "67080"
  },
  {
    "text": "each one Builds on top of the last the",
    "start": "67080",
    "end": "69320"
  },
  {
    "text": "Range Loop Builds on top of the for Loop",
    "start": "69320",
    "end": "71360"
  },
  {
    "text": "which itself Builds on top of the while",
    "start": "71360",
    "end": "73200"
  },
  {
    "text": "loop if we had a language that only",
    "start": "73200",
    "end": "75080"
  },
  {
    "text": "provided a while loop Well we'd still",
    "start": "75080",
    "end": "77200"
  },
  {
    "text": "manage to write code pretty much the",
    "start": "77200",
    "end": "78720"
  },
  {
    "text": "same way perhaps with just a little more",
    "start": "78720",
    "end": "80640"
  },
  {
    "text": "boilerplate but what about a language",
    "start": "80640",
    "end": "82799"
  },
  {
    "text": "that doesn't even have this what would",
    "start": "82799",
    "end": "84799"
  },
  {
    "text": "our code even look like fortunately we",
    "start": "84799",
    "end": "87079"
  },
  {
    "text": "don't have to look very far to find out",
    "start": "87079",
    "end": "89320"
  },
  {
    "text": "there's a good number of languages out",
    "start": "89320",
    "end": "91079"
  },
  {
    "text": "there that don't even provide this basic",
    "start": "91079",
    "end": "92880"
  },
  {
    "text": "Loop these are typically functional",
    "start": "92880",
    "end": "94759"
  },
  {
    "text": "languages such as hascal or Elixir and",
    "start": "94759",
    "end": "97360"
  },
  {
    "text": "when you think about it this makes sense",
    "start": "97360",
    "end": "99360"
  },
  {
    "text": "none of these languages have mutating",
    "start": "99360",
    "end": "101200"
  },
  {
    "text": "variables only immutable ones so it's",
    "start": "101200",
    "end": "103680"
  },
  {
    "text": "pretty futile to write a loop with a",
    "start": "103680",
    "end": "105320"
  },
  {
    "text": "condition that will never change but",
    "start": "105320",
    "end": "107000"
  },
  {
    "text": "then how does one repeatedly perform",
    "start": "107000",
    "end": "108759"
  },
  {
    "text": "sequences of actions in these languages",
    "start": "108759",
    "end": "111159"
  },
  {
    "text": "well this is actually done using a",
    "start": "111159",
    "end": "112880"
  },
  {
    "text": "technique called recursion recursion is",
    "start": "112880",
    "end": "115520"
  },
  {
    "text": "the act of a function calling itself you",
    "start": "115520",
    "end": "117759"
  },
  {
    "text": "can think of this as being similar to",
    "start": "117759",
    "end": "119079"
  },
  {
    "text": "looking into an infinite mirror where",
    "start": "119079",
    "end": "120920"
  },
  {
    "text": "each of the reflections is a recursive",
    "start": "120920",
    "end": "122960"
  },
  {
    "text": "function call to get a better",
    "start": "122960",
    "end": "125560"
  },
  {
    "text": "understanding let's look at a simple",
    "start": "125560",
    "end": "127079"
  },
  {
    "text": "example in C++ here I have a function",
    "start": "127079",
    "end": "130239"
  },
  {
    "text": "called sum which takes an array of",
    "start": "130239",
    "end": "131879"
  },
  {
    "text": "integers and a length if the length is",
    "start": "131879",
    "end": "134200"
  },
  {
    "text": "zero then it Returns the value of zero",
    "start": "134200",
    "end": "136720"
  },
  {
    "text": "otherwise it takes the last value of the",
    "start": "136720",
    "end": "138480"
  },
  {
    "text": "array and adds it to the result of",
    "start": "138480",
    "end": "140239"
  },
  {
    "text": "calling the sum function again if we run",
    "start": "140239",
    "end": "143080"
  },
  {
    "text": "this code you'll see we get the result",
    "start": "143080",
    "end": "144680"
  },
  {
    "text": "of 15 which is equal to the sum of the",
    "start": "144680",
    "end": "147080"
  },
  {
    "text": "numbers in the array as you can see",
    "start": "147080",
    "end": "149040"
  },
  {
    "text": "we've managed to Loop through our array",
    "start": "149040",
    "end": "150760"
  },
  {
    "text": "without using any of the looping",
    "start": "150760",
    "end": "152440"
  },
  {
    "text": "keywords let's dissect what is actually",
    "start": "152440",
    "end": "154840"
  },
  {
    "text": "happening every recursive function is",
    "start": "154840",
    "end": "157200"
  },
  {
    "text": "composed of two different parts the",
    "start": "157200",
    "end": "159599"
  },
  {
    "text": "first part which is the most obvious is",
    "start": "159599",
    "end": "161480"
  },
  {
    "text": "the recursive cool to itself in our",
    "start": "161480",
    "end": "163959"
  },
  {
    "text": "function we're doing that on line8",
    "start": "163959",
    "end": "166200"
  },
  {
    "text": "however there is one caveat the function",
    "start": "166200",
    "end": "168280"
  },
  {
    "text": "needs to use different values on each",
    "start": "168280",
    "end": "170040"
  },
  {
    "text": "recursive cool to show what I mean let",
    "start": "170040",
    "end": "172120"
  },
  {
    "text": "me remove the minus one from the length",
    "start": "172120",
    "end": "174200"
  },
  {
    "text": "parameter on our recursive function call",
    "start": "174200",
    "end": "176480"
  },
  {
    "text": "if I go ahead and run this code you'll",
    "start": "176480",
    "end": "177879"
  },
  {
    "text": "see that we never get our result back",
    "start": "177879",
    "end": "180120"
  },
  {
    "text": "and that's because the function is now",
    "start": "180120",
    "end": "181760"
  },
  {
    "text": "running infinitely this infinite",
    "start": "181760",
    "end": "183760"
  },
  {
    "text": "recursion is caused by the lack of an",
    "start": "183760",
    "end": "185599"
  },
  {
    "text": "exit condition being met which is also",
    "start": "185599",
    "end": "188159"
  },
  {
    "text": "the second requirement of a recursive",
    "start": "188159",
    "end": "190440"
  },
  {
    "text": "function in our case the exit condition",
    "start": "190440",
    "end": "192440"
  },
  {
    "text": "is found on lines four 5 and six where",
    "start": "192440",
    "end": "194920"
  },
  {
    "text": "we return zero if the given length is",
    "start": "194920",
    "end": "197239"
  },
  {
    "text": "also zero if we add back in the minus",
    "start": "197239",
    "end": "199480"
  },
  {
    "text": "one to the second parameter of the sum",
    "start": "199480",
    "end": "201159"
  },
  {
    "text": "call the length value will be",
    "start": "201159",
    "end": "202799"
  },
  {
    "text": "decremented by one on each recursive",
    "start": "202799",
    "end": "204599"
  },
  {
    "text": "iteration eventually this causes the",
    "start": "204599",
    "end": "206599"
  },
  {
    "text": "length value to equal zero which will",
    "start": "206599",
    "end": "208360"
  },
  {
    "text": "cause our exit condition to be mat this",
    "start": "208360",
    "end": "210799"
  },
  {
    "text": "is a pretty simple implementation of",
    "start": "210799",
    "end": "212640"
  },
  {
    "text": "recursion but it shows how easy it is to",
    "start": "212640",
    "end": "214959"
  },
  {
    "text": "apply in fact you can replace any Loop",
    "start": "214959",
    "end": "217239"
  },
  {
    "text": "based code with a recursive function if",
    "start": "217239",
    "end": "219680"
  },
  {
    "text": "you wanted to but that doesn't mean you",
    "start": "219680",
    "end": "221319"
  },
  {
    "text": "should as there are a couple of",
    "start": "221319",
    "end": "223000"
  },
  {
    "text": "considerations when doing so the most",
    "start": "223000",
    "end": "225360"
  },
  {
    "text": "major reason is the stack a processes",
    "start": "225360",
    "end": "228080"
  },
  {
    "text": "stack is responsible for storing",
    "start": "228080",
    "end": "229519"
  },
  {
    "text": "temporary data created by calling a",
    "start": "229519",
    "end": "231280"
  },
  {
    "text": "function this data includes the function",
    "start": "231280",
    "end": "233400"
  },
  {
    "text": "parameters any local variables created",
    "start": "233400",
    "end": "235519"
  },
  {
    "text": "within the function and the function",
    "start": "235519",
    "end": "237280"
  },
  {
    "text": "pointer itself this however can be an",
    "start": "237280",
    "end": "239799"
  },
  {
    "text": "issue for deep recursion each time a",
    "start": "239799",
    "end": "242480"
  },
  {
    "text": "function is called the function's data",
    "start": "242480",
    "end": "244120"
  },
  {
    "text": "is pushed onto the stack when the",
    "start": "244120",
    "end": "245879"
  },
  {
    "text": "function returns this data is then",
    "start": "245879",
    "end": "247640"
  },
  {
    "text": "popped off the stack freeing up the",
    "start": "247640",
    "end": "249360"
  },
  {
    "text": "memory that was used and pointing the",
    "start": "249360",
    "end": "250840"
  },
  {
    "text": "stack frame to the previous function",
    "start": "250840",
    "end": "252799"
  },
  {
    "text": "with deep recursion this means the stack",
    "start": "252799",
    "end": "254840"
  },
  {
    "text": "can grow pretty large and in some cases",
    "start": "254840",
    "end": "257239"
  },
  {
    "text": "will cause a stack Overflow which is",
    "start": "257239",
    "end": "259359"
  },
  {
    "text": "where the data has grown too large for",
    "start": "259359",
    "end": "260959"
  },
  {
    "text": "the stacks allocated memory causing the",
    "start": "260959",
    "end": "263080"
  },
  {
    "text": "application to panic and crash to show",
    "start": "263080",
    "end": "266080"
  },
  {
    "text": "this in action I've created a recursive",
    "start": "266080",
    "end": "268160"
  },
  {
    "text": "function that will attempt to call it",
    "start": "268160",
    "end": "269639"
  },
  {
    "text": "itself 2 million times at every 10,000th",
    "start": "269639",
    "end": "272440"
  },
  {
    "text": "step the function will also print the",
    "start": "272440",
    "end": "274360"
  },
  {
    "text": "current count if I compile this code",
    "start": "274360",
    "end": "276880"
  },
  {
    "text": "using the following command and then run",
    "start": "276880",
    "end": "278680"
  },
  {
    "text": "it you'll see we only make it up to",
    "start": "278680",
    "end": "280919"
  },
  {
    "text": "260,000 before the application crashes",
    "start": "280919",
    "end": "283960"
  },
  {
    "text": "this is due to a segmentation fault",
    "start": "283960",
    "end": "285720"
  },
  {
    "text": "caused by our stack Overflow so we can't",
    "start": "285720",
    "end": "288639"
  },
  {
    "text": "put infinite values on the stack however",
    "start": "288639",
    "end": "290919"
  },
  {
    "text": "if I run this same code using a",
    "start": "290919",
    "end": "292440"
  },
  {
    "text": "functional programming language such as",
    "start": "292440",
    "end": "293919"
  },
  {
    "text": "hco you'll see we hit 2 million no",
    "start": "293919",
    "end": "295919"
  },
  {
    "text": "problem in fact we can hit any number if",
    "start": "295919",
    "end": "298120"
  },
  {
    "text": "we want to infinitely",
    "start": "298120",
    "end": "300240"
  },
  {
    "text": "this is done using a technique called",
    "start": "300240",
    "end": "301800"
  },
  {
    "text": "tail cool optimization found in a number",
    "start": "301800",
    "end": "304199"
  },
  {
    "text": "of programming languages especially ones",
    "start": "304199",
    "end": "306360"
  },
  {
    "text": "that rely on recursion such as",
    "start": "306360",
    "end": "307919"
  },
  {
    "text": "functional languages like hascal and",
    "start": "307919",
    "end": "309800"
  },
  {
    "text": "oaml so what is tail optimization well",
    "start": "309800",
    "end": "313240"
  },
  {
    "text": "it's an optimization method performed by",
    "start": "313240",
    "end": "315039"
  },
  {
    "text": "compilers to allow for deep recursion",
    "start": "315039",
    "end": "316880"
  },
  {
    "text": "without blowing up the applications",
    "start": "316880",
    "end": "318440"
  },
  {
    "text": "stack I mentioned that it was used by",
    "start": "318440",
    "end": "320720"
  },
  {
    "text": "functional programming languages but",
    "start": "320720",
    "end": "322319"
  },
  {
    "text": "actually you can enable it within C++ as",
    "start": "322319",
    "end": "324440"
  },
  {
    "text": "well if I go back to the C++ example I",
    "start": "324440",
    "end": "326880"
  },
  {
    "text": "showed earlier and this time compile the",
    "start": "326880",
    "end": "328800"
  },
  {
    "text": "code using the optimization level of two",
    "start": "328800",
    "end": "331440"
  },
  {
    "text": "you'll see we're able to hit 2 million",
    "start": "331440",
    "end": "333160"
  },
  {
    "text": "iterations without causing a stack",
    "start": "333160",
    "end": "335080"
  },
  {
    "text": "Overflow so how does tail cool",
    "start": "335080",
    "end": "337160"
  },
  {
    "text": "optimization work well in order for the",
    "start": "337160",
    "end": "339639"
  },
  {
    "text": "compiler to perform tail cool",
    "start": "339639",
    "end": "341080"
  },
  {
    "text": "optimization it requires a recursive",
    "start": "341080",
    "end": "343360"
  },
  {
    "text": "function to meet two conditions the",
    "start": "343360",
    "end": "345199"
  },
  {
    "text": "first is that there needs to be only one",
    "start": "345199",
    "end": "347080"
  },
  {
    "text": "recursive call within the function and",
    "start": "347080",
    "end": "349479"
  },
  {
    "text": "the second is that the recursive cool",
    "start": "349479",
    "end": "351360"
  },
  {
    "text": "must be the function's last operation",
    "start": "351360",
    "end": "354160"
  },
  {
    "text": "only when those two conditions are met",
    "start": "354160",
    "end": "355880"
  },
  {
    "text": "can the compiler optimize but even then",
    "start": "355880",
    "end": "358080"
  },
  {
    "text": "it's not guaranteed if if you look at my",
    "start": "358080",
    "end": "360120"
  },
  {
    "text": "code you'll notice that I'm using the",
    "start": "360120",
    "end": "361680"
  },
  {
    "text": "print F function to Output my counts if",
    "start": "361680",
    "end": "364600"
  },
  {
    "text": "I change this to use stdc out then the",
    "start": "364600",
    "end": "367319"
  },
  {
    "text": "compiler no longer optimizes and we get",
    "start": "367319",
    "end": "369280"
  },
  {
    "text": "a stack Overflow the reason this doesn't",
    "start": "369280",
    "end": "371599"
  },
  {
    "text": "work is due to a pointer within the cout",
    "start": "371599",
    "end": "373800"
  },
  {
    "text": "function of the iost stream Library",
    "start": "373800",
    "end": "375880"
  },
  {
    "text": "which the compiler considers as a",
    "start": "375880",
    "end": "377639"
  },
  {
    "text": "possible side effect and therefore",
    "start": "377639",
    "end": "379400"
  },
  {
    "text": "removes the optimization so tail cool",
    "start": "379400",
    "end": "382000"
  },
  {
    "text": "optimization isn't guaranteed in",
    "start": "382000",
    "end": "383880"
  },
  {
    "text": "nonfunctional languages but it's still",
    "start": "383880",
    "end": "386080"
  },
  {
    "text": "good to know how it works under the hood",
    "start": "386080",
    "end": "388160"
  },
  {
    "text": "the compiler optimizes by using one of",
    "start": "388160",
    "end": "390240"
  },
  {
    "text": "two approaches the first is by using a",
    "start": "390240",
    "end": "392800"
  },
  {
    "text": "jump in assembly which we can actually",
    "start": "392800",
    "end": "395000"
  },
  {
    "text": "mimic by using a goto if I rearranged my",
    "start": "395000",
    "end": "398000"
  },
  {
    "text": "code as follows I can use the go-to as a",
    "start": "398000",
    "end": "400199"
  },
  {
    "text": "looping mechanism rather than relying on",
    "start": "400199",
    "end": "402199"
  },
  {
    "text": "the recursion now if I compile this",
    "start": "402199",
    "end": "404319"
  },
  {
    "text": "without any optimizations when I run it",
    "start": "404319",
    "end": "406280"
  },
  {
    "text": "you'll see we go through the full 2",
    "start": "406280",
    "end": "407960"
  },
  {
    "text": "million iterations without causing a",
    "start": "407960",
    "end": "409800"
  },
  {
    "text": "stack Overflow whilst this works I",
    "start": "409800",
    "end": "412080"
  },
  {
    "text": "wouldn't recommend doing it in",
    "start": "412080",
    "end": "413400"
  },
  {
    "text": "production as using goto can be",
    "start": "413400",
    "end": "415520"
  },
  {
    "text": "considered harmful the second approach",
    "start": "415520",
    "end": "417879"
  },
  {
    "text": "the compiler uses is just to convert the",
    "start": "417879",
    "end": "419639"
  },
  {
    "text": "recursive cool into a loop basically",
    "start": "419639",
    "end": "421759"
  },
  {
    "text": "adding in the loop even if we choose not",
    "start": "421759",
    "end": "423520"
  },
  {
    "text": "to use one which brings up a good point",
    "start": "423520",
    "end": "426080"
  },
  {
    "text": "for languages that can why not just use",
    "start": "426080",
    "end": "427960"
  },
  {
    "text": "a loop in the first place well for",
    "start": "427960",
    "end": "429919"
  },
  {
    "text": "certain data structures such as trees",
    "start": "429919",
    "end": "432080"
  },
  {
    "text": "graphs and linked lists using recursion",
    "start": "432080",
    "end": "434639"
  },
  {
    "text": "is often a more elegant and readable",
    "start": "434639",
    "end": "436800"
  },
  {
    "text": "solution however these aren't the most",
    "start": "436800",
    "end": "439080"
  },
  {
    "text": "commonly used data structures and using",
    "start": "439080",
    "end": "441280"
  },
  {
    "text": "recursion for things such as arrays or",
    "start": "441280",
    "end": "443000"
  },
  {
    "text": "dictionaries can be less readable and",
    "start": "443000",
    "end": "445199"
  },
  {
    "text": "more complex but then what are we to do",
    "start": "445199",
    "end": "447479"
  },
  {
    "text": "if we want to live a loop-free lifestyle",
    "start": "447479",
    "end": "449560"
  },
  {
    "text": "yet still interact with these data",
    "start": "449560",
    "end": "451080"
  },
  {
    "text": "structures fortunately the answer lies",
    "start": "451080",
    "end": "453160"
  },
  {
    "text": "again with functional programming",
    "start": "453160",
    "end": "454520"
  },
  {
    "text": "languages which have managed to solve",
    "start": "454520",
    "end": "456360"
  },
  {
    "text": "this problem already this solution is in",
    "start": "456360",
    "end": "458680"
  },
  {
    "text": "the form of higher order functions which",
    "start": "458680",
    "end": "460759"
  },
  {
    "text": "are a personal favorite of mine a higher",
    "start": "460759",
    "end": "463560"
  },
  {
    "text": "order function which is a bit of a fancy",
    "start": "463560",
    "end": "465639"
  },
  {
    "text": "name is a function that takes at least",
    "start": "465639",
    "end": "467639"
  },
  {
    "text": "one other function in its arguments if",
    "start": "467639",
    "end": "470199"
  },
  {
    "text": "you've used any modern language such as",
    "start": "470199",
    "end": "472120"
  },
  {
    "text": "rust cotlin or even JavaScript then",
    "start": "472120",
    "end": "474520"
  },
  {
    "text": "there's a good chance you've used a",
    "start": "474520",
    "end": "476039"
  },
  {
    "text": "higher order function already the most",
    "start": "476039",
    "end": "478159"
  },
  {
    "text": "commonly used ones are are the map",
    "start": "478159",
    "end": "480080"
  },
  {
    "text": "reduce and filter functions each one",
    "start": "480080",
    "end": "482720"
  },
  {
    "text": "with its own purpose the map function",
    "start": "482720",
    "end": "484800"
  },
  {
    "text": "transforms a collection of elements",
    "start": "484800",
    "end": "486440"
  },
  {
    "text": "using the given function in the example",
    "start": "486440",
    "end": "488800"
  },
  {
    "text": "on screen I'm converting a list of",
    "start": "488800",
    "end": "490639"
  },
  {
    "text": "integers into their squared values using",
    "start": "490639",
    "end": "492960"
  },
  {
    "text": "the map function in JavaScript",
    "start": "492960",
    "end": "495039"
  },
  {
    "text": "additionally this transformation isn't",
    "start": "495039",
    "end": "496720"
  },
  {
    "text": "restricted to any type in this next",
    "start": "496720",
    "end": "499000"
  },
  {
    "text": "function I'm converting my list of",
    "start": "499000",
    "end": "500639"
  },
  {
    "text": "integers into a list of strings as well",
    "start": "500639",
    "end": "503240"
  },
  {
    "text": "as the map function the reduce function",
    "start": "503240",
    "end": "505080"
  },
  {
    "text": "also applies a transformation to a",
    "start": "505080",
    "end": "506879"
  },
  {
    "text": "collection of elements however unlike",
    "start": "506879",
    "end": "509039"
  },
  {
    "text": "the map function it instead reduces down",
    "start": "509039",
    "end": "511240"
  },
  {
    "text": "to a single value in the example on",
    "start": "511240",
    "end": "513839"
  },
  {
    "text": "screen I'm using the reduce function to",
    "start": "513839",
    "end": "515680"
  },
  {
    "text": "calculate the sum of the integers inside",
    "start": "515680",
    "end": "517680"
  },
  {
    "text": "of the array again this single element",
    "start": "517680",
    "end": "520120"
  },
  {
    "text": "doesn't have to be the same type and can",
    "start": "520120",
    "end": "522159"
  },
  {
    "text": "actually be a collection itself in this",
    "start": "522159",
    "end": "524440"
  },
  {
    "text": "example I'm using the reduce function to",
    "start": "524440",
    "end": "526519"
  },
  {
    "text": "convert a list of integers into a set",
    "start": "526519",
    "end": "528880"
  },
  {
    "text": "containing only the unique values by the",
    "start": "528880",
    "end": "531680"
  },
  {
    "text": "way in some languages you may find that",
    "start": "531680",
    "end": "533640"
  },
  {
    "text": "the reduce function is in fact called",
    "start": "533640",
    "end": "535480"
  },
  {
    "text": "fold but they typically do the same",
    "start": "535480",
    "end": "537600"
  },
  {
    "text": "thing most of the time",
    "start": "537600",
    "end": "539760"
  },
  {
    "text": "the last of the most commonly used",
    "start": "539760",
    "end": "541640"
  },
  {
    "text": "higher order functions is filter which",
    "start": "541640",
    "end": "543839"
  },
  {
    "text": "instead of applying a transformation",
    "start": "543839",
    "end": "545720"
  },
  {
    "text": "will return a subset of the elements",
    "start": "545720",
    "end": "547519"
  },
  {
    "text": "that match the predicate in the given",
    "start": "547519",
    "end": "549320"
  },
  {
    "text": "function in this example I'm using the",
    "start": "549320",
    "end": "551720"
  },
  {
    "text": "filter method on an array of integers to",
    "start": "551720",
    "end": "554120"
  },
  {
    "text": "return a collection that only contains",
    "start": "554120",
    "end": "555720"
  },
  {
    "text": "the odd values as you can probably tell",
    "start": "555720",
    "end": "558800"
  },
  {
    "text": "higher order functions are rather",
    "start": "558800",
    "end": "560560"
  },
  {
    "text": "expressive and there's a couple of good",
    "start": "560560",
    "end": "562440"
  },
  {
    "text": "reasons to prefer them over the more",
    "start": "562440",
    "end": "563959"
  },
  {
    "text": "simpled Loops the first reason is that",
    "start": "563959",
    "end": "566399"
  },
  {
    "text": "it's much easier to communicate intent",
    "start": "566399",
    "end": "568760"
  },
  {
    "text": "this is because each higher order",
    "start": "568760",
    "end": "570279"
  },
  {
    "text": "function has a defined Behavior which",
    "start": "570279",
    "end": "572360"
  },
  {
    "text": "gives indication to the reader about",
    "start": "572360",
    "end": "573839"
  },
  {
    "text": "what the code is intending to do as a",
    "start": "573839",
    "end": "576240"
  },
  {
    "text": "loop gets more complex you can use",
    "start": "576240",
    "end": "578279"
  },
  {
    "text": "method chaining to simplify it even",
    "start": "578279",
    "end": "580279"
  },
  {
    "text": "further to show what I mean here's a",
    "start": "580279",
    "end": "582560"
  },
  {
    "text": "rather complex for loop at first glance",
    "start": "582560",
    "end": "584720"
  },
  {
    "text": "is probably very difficult to understand",
    "start": "584720",
    "end": "586519"
  },
  {
    "text": "what is happening if we compare this to",
    "start": "586519",
    "end": "588480"
  },
  {
    "text": "code composed of higher order functions",
    "start": "588480",
    "end": "590680"
  },
  {
    "text": "we get a much better idea or at least I",
    "start": "590680",
    "end": "593320"
  },
  {
    "text": "do either way let me know in the",
    "start": "593320",
    "end": "595079"
  },
  {
    "text": "comments if you can tell what this code",
    "start": "595079",
    "end": "596480"
  },
  {
    "text": "is doing the second major benefit is",
    "start": "596480",
    "end": "598519"
  },
  {
    "text": "that higher order order functions",
    "start": "598519",
    "end": "599800"
  },
  {
    "text": "encourage the use of immutability if you",
    "start": "599800",
    "end": "602279"
  },
  {
    "text": "paid attention to my examples earlier",
    "start": "602279",
    "end": "604399"
  },
  {
    "text": "you'll have noticed that I used const",
    "start": "604399",
    "end": "605880"
  },
  {
    "text": "for all of my values intentionally",
    "start": "605880",
    "end": "608320"
  },
  {
    "text": "instead of mutating the data structures",
    "start": "608320",
    "end": "610519"
  },
  {
    "text": "in place higher order functions tend to",
    "start": "610519",
    "end": "612640"
  },
  {
    "text": "generate new ones which can help prevent",
    "start": "612640",
    "end": "614839"
  },
  {
    "text": "a whole class of issues this can",
    "start": "614839",
    "end": "617279"
  },
  {
    "text": "sometimes incur a performance cost",
    "start": "617279",
    "end": "619240"
  },
  {
    "text": "however especially if the compiler",
    "start": "619240",
    "end": "621040"
  },
  {
    "text": "doesn't optimize although personally I'm",
    "start": "621040",
    "end": "623240"
  },
  {
    "text": "happy to trade performance for readable",
    "start": "623240",
    "end": "624760"
  },
  {
    "text": "and safe code any day of the week and",
    "start": "624760",
    "end": "626800"
  },
  {
    "text": "I'm not alone it's why non-functional",
    "start": "626800",
    "end": "629079"
  },
  {
    "text": "modern programming languages have also",
    "start": "629079",
    "end": "630720"
  },
  {
    "text": "decided to implement them even if",
    "start": "630720",
    "end": "632519"
  },
  {
    "text": "they're just using a loop internally at",
    "start": "632519",
    "end": "635120"
  },
  {
    "text": "the end of the day Loops are still an",
    "start": "635120",
    "end": "636880"
  },
  {
    "text": "important part of building software and",
    "start": "636880",
    "end": "638880"
  },
  {
    "text": "whilst it may be a little ambitious to",
    "start": "638880",
    "end": "640839"
  },
  {
    "text": "live an entirely loop-free lifestyle I",
    "start": "640839",
    "end": "643079"
  },
  {
    "text": "hope some of the information in this",
    "start": "643079",
    "end": "644440"
  },
  {
    "text": "video took you one iteration closer",
    "start": "644440",
    "end": "649279"
  }
]