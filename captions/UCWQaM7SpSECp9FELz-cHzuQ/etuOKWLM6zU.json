[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "Dino is a JavaScript typescript and",
    "start": "0",
    "end": "2639"
  },
  {
    "text": "webassembly runtime that aims to be a",
    "start": "2639",
    "end": "4920"
  },
  {
    "text": "productive and secure scripting",
    "start": "4920",
    "end": "6180"
  },
  {
    "text": "environment for the modern developer",
    "start": "6180",
    "end": "7919"
  },
  {
    "text": "Dina was first released in 2020 and is",
    "start": "7919",
    "end": "11099"
  },
  {
    "text": "the spiritual successor to node.js the",
    "start": "11099",
    "end": "14040"
  },
  {
    "text": "word Dino also happens to be an anagram",
    "start": "14040",
    "end": "16020"
  },
  {
    "text": "of the word node and there's a reason",
    "start": "16020",
    "end": "17940"
  },
  {
    "text": "for that it was co-created by the",
    "start": "17940",
    "end": "20640"
  },
  {
    "text": "creator of node.js Ryan Dahl who",
    "start": "20640",
    "end": "23400"
  },
  {
    "text": "believes Dino solves some of the regrets",
    "start": "23400",
    "end": "25080"
  },
  {
    "text": "he has with his original creation Dino",
    "start": "25080",
    "end": "27840"
  },
  {
    "text": "like node is powered by Chrome's V8",
    "start": "27840",
    "end": "30480"
  },
  {
    "text": "engine however unlike node it is written",
    "start": "30480",
    "end": "33180"
  },
  {
    "text": "in Rust instead of C plus",
    "start": "33180",
    "end": "35579"
  },
  {
    "text": "one major feature of Dino is that",
    "start": "35579",
    "end": "37920"
  },
  {
    "text": "typescript and webassembly are handled",
    "start": "37920",
    "end": "39780"
  },
  {
    "text": "out of the box without needing any",
    "start": "39780",
    "end": "41640"
  },
  {
    "text": "additional requirements",
    "start": "41640",
    "end": "43620"
  },
  {
    "text": "Oak is a middleware framework for Dino's",
    "start": "43620",
    "end": "46079"
  },
  {
    "text": "native HTTP server the framework is",
    "start": "46079",
    "end": "48480"
  },
  {
    "text": "inspired by color and color router",
    "start": "48480",
    "end": "52440"
  },
  {
    "start": "50000",
    "end": "203000"
  },
  {
    "text": "to get started Dino needs to be",
    "start": "52440",
    "end": "54539"
  },
  {
    "text": "installed as per the recommended",
    "start": "54539",
    "end": "56039"
  },
  {
    "text": "approach for once operating system",
    "start": "56039",
    "end": "58980"
  },
  {
    "text": "once it is installed JavaScript and",
    "start": "58980",
    "end": "61440"
  },
  {
    "text": "typescript files can be run using the",
    "start": "61440",
    "end": "63359"
  },
  {
    "text": "Dino Run command",
    "start": "63359",
    "end": "65158"
  },
  {
    "text": "to run a simple Hello World server the",
    "start": "65159",
    "end": "67740"
  },
  {
    "text": "application is first imported from the",
    "start": "67740",
    "end": "69540"
  },
  {
    "text": "oak package",
    "start": "69540",
    "end": "70799"
  },
  {
    "text": "in Dino packages are imported straight",
    "start": "70799",
    "end": "73260"
  },
  {
    "text": "from a URL which is similar to other",
    "start": "73260",
    "end": "75420"
  },
  {
    "text": "modern languages such as go",
    "start": "75420",
    "end": "77760"
  },
  {
    "text": "this differs from the centralized",
    "start": "77760",
    "end": "79500"
  },
  {
    "text": "approach that is found in node.js when",
    "start": "79500",
    "end": "81299"
  },
  {
    "text": "loading packages via npm",
    "start": "81299",
    "end": "83820"
  },
  {
    "text": "the main application code is very",
    "start": "83820",
    "end": "85740"
  },
  {
    "text": "similar to KOA and provides the use of a",
    "start": "85740",
    "end": "88380"
  },
  {
    "text": "context and async functionality",
    "start": "88380",
    "end": "91140"
  },
  {
    "text": "running this code and sending a request",
    "start": "91140",
    "end": "92939"
  },
  {
    "text": "to it via curl gets back the hello world",
    "start": "92939",
    "end": "95100"
  },
  {
    "text": "response",
    "start": "95100",
    "end": "96540"
  },
  {
    "text": "as Oak is middleware based it's a",
    "start": "96540",
    "end": "98880"
  },
  {
    "text": "familiar process to add request logging",
    "start": "98880",
    "end": "100619"
  },
  {
    "text": "to the server",
    "start": "100619",
    "end": "101759"
  },
  {
    "text": "adding a Handler and calling the next",
    "start": "101759",
    "end": "103619"
  },
  {
    "text": "function is all that's required",
    "start": "103619",
    "end": "105840"
  },
  {
    "text": "now logs should be output whenever a",
    "start": "105840",
    "end": "107880"
  },
  {
    "text": "request is made",
    "start": "107880",
    "end": "110479"
  },
  {
    "text": "the router type can provide more complex",
    "start": "110579",
    "end": "112680"
  },
  {
    "text": "routing than just the standard Handler",
    "start": "112680",
    "end": "116360"
  },
  {
    "text": "adding new methods and endpoints can be",
    "start": "117840",
    "end": "119759"
  },
  {
    "text": "chained",
    "start": "119759",
    "end": "120659"
  },
  {
    "text": "using a fluent API",
    "start": "120659",
    "end": "123979"
  },
  {
    "text": "[Music]",
    "start": "124420",
    "end": "131069"
  },
  {
    "text": "routers can also be nested in order to",
    "start": "133860",
    "end": "136020"
  },
  {
    "text": "create more complex pathing such as API",
    "start": "136020",
    "end": "138360"
  },
  {
    "text": "versions",
    "start": "138360",
    "end": "140190"
  },
  {
    "text": "[Music]",
    "start": "140190",
    "end": "141900"
  },
  {
    "text": "to obtain the data of a post or put",
    "start": "141900",
    "end": "144180"
  },
  {
    "text": "request the body function of the request",
    "start": "144180",
    "end": "146520"
  },
  {
    "text": "object can be called providing an",
    "start": "146520",
    "end": "148620"
  },
  {
    "text": "expected type to this function will",
    "start": "148620",
    "end": "150480"
  },
  {
    "text": "attempt to convert the body value",
    "start": "150480",
    "end": "152459"
  },
  {
    "text": "if the body data cannot be converted an",
    "start": "152459",
    "end": "154620"
  },
  {
    "text": "error will be thrown",
    "start": "154620",
    "end": "156360"
  },
  {
    "text": "path parameters can be obtained by",
    "start": "156360",
    "end": "158220"
  },
  {
    "text": "accessing the params object of the",
    "start": "158220",
    "end": "160080"
  },
  {
    "text": "context",
    "start": "160080",
    "end": "162239"
  },
  {
    "text": "subsequently the entire request query",
    "start": "162239",
    "end": "165000"
  },
  {
    "text": "and path parameters can be obtained",
    "start": "165000",
    "end": "167280"
  },
  {
    "text": "using the get query function with the",
    "start": "167280",
    "end": "169440"
  },
  {
    "text": "merge params option provided by the",
    "start": "169440",
    "end": "171480"
  },
  {
    "text": "helpers object founded the oak module",
    "start": "171480",
    "end": "174120"
  },
  {
    "text": "response data is sent by assigning it to",
    "start": "174120",
    "end": "176700"
  },
  {
    "text": "the context response body",
    "start": "176700",
    "end": "178620"
  },
  {
    "text": "like the request body the format of this",
    "start": "178620",
    "end": "180900"
  },
  {
    "text": "data can be defined by setting the type",
    "start": "180900",
    "end": "182700"
  },
  {
    "text": "value Oak has native support for Server",
    "start": "182700",
    "end": "185700"
  },
  {
    "text": "sent events a server push technology",
    "start": "185700",
    "end": "189060"
  },
  {
    "text": "servers and events or SSE allows a",
    "start": "189060",
    "end": "192659"
  },
  {
    "text": "client to receive data from the server",
    "start": "192659",
    "end": "194340"
  },
  {
    "text": "via an HTTP Connection in a push-based",
    "start": "194340",
    "end": "197340"
  },
  {
    "text": "model",
    "start": "197340",
    "end": "199459"
  },
  {
    "text": "Dino itself provides many tools that are",
    "start": "200040",
    "end": "202379"
  },
  {
    "text": "commonplace in modern programming one of",
    "start": "202379",
    "end": "204659"
  },
  {
    "start": "203000",
    "end": "266000"
  },
  {
    "text": "these tools is an inbuilt LSP server",
    "start": "204659",
    "end": "206879"
  },
  {
    "text": "which provides code completion to many",
    "start": "206879",
    "end": "209040"
  },
  {
    "text": "editors the dino binary also provides an",
    "start": "209040",
    "end": "211980"
  },
  {
    "text": "inbuilt linter and formatter which can",
    "start": "211980",
    "end": "214500"
  },
  {
    "text": "help to keep the code consistent safe",
    "start": "214500",
    "end": "216840"
  },
  {
    "text": "and well formatted",
    "start": "216840",
    "end": "218580"
  },
  {
    "text": "one of the other tools the DNA binary",
    "start": "218580",
    "end": "220560"
  },
  {
    "text": "provides is the bundle command which",
    "start": "220560",
    "end": "222659"
  },
  {
    "text": "converts all of the dependencies and",
    "start": "222659",
    "end": "224220"
  },
  {
    "text": "source code into a single file which can",
    "start": "224220",
    "end": "226560"
  },
  {
    "text": "then be distributed",
    "start": "226560",
    "end": "228659"
  },
  {
    "text": "the compile command goes one step",
    "start": "228659",
    "end": "230519"
  },
  {
    "text": "further and converts the application and",
    "start": "230519",
    "end": "233099"
  },
  {
    "text": "Dino runtime into a single binary",
    "start": "233099",
    "end": "235799"
  },
  {
    "text": "Dino has native support for tests and",
    "start": "235799",
    "end": "238200"
  },
  {
    "text": "does not require any additional run",
    "start": "238200",
    "end": "239760"
  },
  {
    "text": "times such as mocker or jest",
    "start": "239760",
    "end": "242519"
  },
  {
    "text": "all of these tools allow for an improved",
    "start": "242519",
    "end": "244379"
  },
  {
    "text": "developer experience when compared to",
    "start": "244379",
    "end": "246299"
  },
  {
    "text": "node.js whilst Dino is still a young",
    "start": "246299",
    "end": "248760"
  },
  {
    "text": "project it has a bright future with a",
    "start": "248760",
    "end": "251159"
  },
  {
    "text": "growing and active community and plenty",
    "start": "251159",
    "end": "253379"
  },
  {
    "text": "of potential",
    "start": "253379",
    "end": "254830"
  },
  {
    "text": "[Music]",
    "start": "254830",
    "end": "257949"
  }
]