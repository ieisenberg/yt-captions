[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "if you're a rockstar ninja unicorn 10x",
    "start": "120",
    "end": "2520"
  },
  {
    "text": "developer then you're probably someone",
    "start": "2520",
    "end": "4240"
  },
  {
    "text": "who can successfully test in prod me",
    "start": "4240",
    "end": "6640"
  },
  {
    "text": "however I'm just a mere mortal one that",
    "start": "6640",
    "end": "8719"
  },
  {
    "text": "likes to keep his job so whilst I may",
    "start": "8719",
    "end": "10920"
  },
  {
    "text": "not test against prod I still like to",
    "start": "10920",
    "end": "12880"
  },
  {
    "text": "test against Real services but doing so",
    "start": "12880",
    "end": "15599"
  },
  {
    "text": "is easier said than done especially when",
    "start": "15599",
    "end": "17720"
  },
  {
    "text": "trying to set up a test environment that",
    "start": "17720",
    "end": "19560"
  },
  {
    "text": "works on more than just my own machine",
    "start": "19560",
    "end": "22000"
  },
  {
    "text": "one common approach is to use Docker",
    "start": "22000",
    "end": "23680"
  },
  {
    "text": "compose however this can come with its",
    "start": "23680",
    "end": "25599"
  },
  {
    "text": "own problems such as Port collisions",
    "start": "25599",
    "end": "27920"
  },
  {
    "text": "stale data a lack of automation and race",
    "start": "27920",
    "end": "30599"
  },
  {
    "text": "conditions all of these causing what's",
    "start": "30599",
    "end": "32279"
  },
  {
    "text": "known as the dreaded flaky test instead",
    "start": "32279",
    "end": "35000"
  },
  {
    "text": "I prefer to use another approach one",
    "start": "35000",
    "end": "37239"
  },
  {
    "text": "that can significantly reduce the",
    "start": "37239",
    "end": "38840"
  },
  {
    "text": "flakiness property of your testing code",
    "start": "38840",
    "end": "41440"
  },
  {
    "text": "this is the test containers package",
    "start": "41440",
    "end": "43399"
  },
  {
    "text": "which has forever improved the way I",
    "start": "43399",
    "end": "45039"
  },
  {
    "text": "test my code this framework allows you",
    "start": "45039",
    "end": "47160"
  },
  {
    "text": "to easily automate the deployment of",
    "start": "47160",
    "end": "48960"
  },
  {
    "text": "service containers for integration",
    "start": "48960",
    "end": "50760"
  },
  {
    "text": "testing I actually mentioned test",
    "start": "50760",
    "end": "52399"
  },
  {
    "text": "containers in my video on using Docker",
    "start": "52399",
    "end": "54359"
  },
  {
    "text": "in unusual ways and it just so happens",
    "start": "54359",
    "end": "56920"
  },
  {
    "text": "that the docker team acquired the",
    "start": "56920",
    "end": "58320"
  },
  {
    "text": "project about a month before that video",
    "start": "58320",
    "end": "60039"
  },
  {
    "text": "went live as a lot of the comments on",
    "start": "60039",
    "end": "62079"
  },
  {
    "text": "that video expressed interest in test",
    "start": "62079",
    "end": "64000"
  },
  {
    "text": "containers the docker team kindly asked",
    "start": "64000",
    "end": "65960"
  },
  {
    "text": "if they could support a video therefore",
    "start": "65960",
    "end": "68119"
  },
  {
    "text": "this video is sponsored by Docker for me",
    "start": "68119",
    "end": "70080"
  },
  {
    "text": "to show how I use the test containers",
    "start": "70080",
    "end": "71759"
  },
  {
    "text": "package in my own applications to show",
    "start": "71759",
    "end": "74479"
  },
  {
    "start": "73000",
    "end": "209000"
  },
  {
    "text": "how I use it I have a simple project you",
    "start": "74479",
    "end": "76640"
  },
  {
    "text": "can clone down yourself which has a few",
    "start": "76640",
    "end": "78720"
  },
  {
    "text": "examples we're going to look at the",
    "start": "78720",
    "end": "80799"
  },
  {
    "text": "first example is to get test containers",
    "start": "80799",
    "end": "82520"
  },
  {
    "text": "working with a simple rate limiter that",
    "start": "82520",
    "end": "84520"
  },
  {
    "text": "I've written that uses a key Value Store",
    "start": "84520",
    "end": "86479"
  },
  {
    "text": "under the hood this project is written",
    "start": "86479",
    "end": "88360"
  },
  {
    "text": "in go but the test containers package is",
    "start": "88360",
    "end": "90560"
  },
  {
    "text": "also available for a number of other",
    "start": "90560",
    "end": "92360"
  },
  {
    "text": "popular languages such as python Java",
    "start": "92360",
    "end": "94680"
  },
  {
    "text": "rust and even JavaScript I'm choosing to",
    "start": "94680",
    "end": "97040"
  },
  {
    "text": "use go because well I like it and that's",
    "start": "97040",
    "end": "99399"
  },
  {
    "text": "the only reason you need to choose a",
    "start": "99399",
    "end": "101119"
  },
  {
    "text": "language despite this the approach we're",
    "start": "101119",
    "end": "103040"
  },
  {
    "text": "using here should be pretty similar to",
    "start": "103040",
    "end": "104759"
  },
  {
    "text": "other languages as well and the test",
    "start": "104759",
    "end": "106880"
  },
  {
    "text": "containers website also has great",
    "start": "106880",
    "end": "108759"
  },
  {
    "text": "documentation if you need it okay back",
    "start": "108759",
    "end": "111159"
  },
  {
    "text": "to the code this code is a naive",
    "start": "111159",
    "end": "113200"
  },
  {
    "text": "implementation of a rate limiter this",
    "start": "113200",
    "end": "115360"
  },
  {
    "text": "rate limiter has a method called add and",
    "start": "115360",
    "end": "117360"
  },
  {
    "text": "check if exceeds which takes an IP",
    "start": "117360",
    "end": "119880"
  },
  {
    "text": "increments its value in the key value",
    "start": "119880",
    "end": "121520"
  },
  {
    "text": "store and checks whether it's exceeded",
    "start": "121520",
    "end": "123399"
  },
  {
    "text": "the rate limit this is a pretty naive",
    "start": "123399",
    "end": "125840"
  },
  {
    "text": "implementation but it will work for this",
    "start": "125840",
    "end": "127680"
  },
  {
    "text": "demonstration to make sure the code",
    "start": "127680",
    "end": "129599"
  },
  {
    "text": "works as expected I have a couple of",
    "start": "129599",
    "end": "131560"
  },
  {
    "text": "integration tests set up these can be",
    "start": "131560",
    "end": "133280"
  },
  {
    "text": "found in the rate limitor test file",
    "start": "133280",
    "end": "135879"
  },
  {
    "text": "instead of using mocks these tests",
    "start": "135879",
    "end": "137519"
  },
  {
    "text": "connect to a real redice instance which",
    "start": "137519",
    "end": "139680"
  },
  {
    "text": "means we're testing the integration",
    "start": "139680",
    "end": "141480"
  },
  {
    "text": "rather than a simulation however when I",
    "start": "141480",
    "end": "143519"
  },
  {
    "text": "run these tests using the go test",
    "start": "143519",
    "end": "145440"
  },
  {
    "text": "command then they fail this is because I",
    "start": "145440",
    "end": "147840"
  },
  {
    "text": "don't have the correct redus environment",
    "start": "147840",
    "end": "149519"
  },
  {
    "text": "set up fortunately as the considerate",
    "start": "149519",
    "end": "151879"
  },
  {
    "text": "developer that I am I've included a",
    "start": "151879",
    "end": "153640"
  },
  {
    "text": "Docker compose file in this project",
    "start": "153640",
    "end": "155599"
  },
  {
    "text": "which contains the correct version of",
    "start": "155599",
    "end": "157200"
  },
  {
    "text": "Redd to use version 7.2 which was also",
    "start": "157200",
    "end": "160200"
  },
  {
    "text": "the last version of reddis that is open",
    "start": "160200",
    "end": "162200"
  },
  {
    "text": "source however when I try to run the",
    "start": "162200",
    "end": "164239"
  },
  {
    "text": "docker compose using the docker compose",
    "start": "164239",
    "end": "166440"
  },
  {
    "text": "up command then I receive an error",
    "start": "166440",
    "end": "168280"
  },
  {
    "text": "telling me the address being bound to is",
    "start": "168280",
    "end": "170120"
  },
  {
    "text": "already in use this happens because I",
    "start": "170120",
    "end": "172319"
  },
  {
    "text": "already have an existing redus service",
    "start": "172319",
    "end": "174239"
  },
  {
    "text": "running on that Port therefore in order",
    "start": "174239",
    "end": "176560"
  },
  {
    "text": "to run my tests I first need to stop my",
    "start": "176560",
    "end": "178879"
  },
  {
    "text": "local redus in before running Docker",
    "start": "178879",
    "end": "181200"
  },
  {
    "text": "compose up again with that everything",
    "start": "181200",
    "end": "183360"
  },
  {
    "text": "should be set up to test our code if I",
    "start": "183360",
    "end": "185440"
  },
  {
    "text": "run the go test command then everything",
    "start": "185440",
    "end": "187440"
  },
  {
    "text": "works as expected and our tests pass",
    "start": "187440",
    "end": "190040"
  },
  {
    "text": "hooray however we're still not out of",
    "start": "190040",
    "end": "192080"
  },
  {
    "text": "the fleaky woods just yet if I clear my",
    "start": "192080",
    "end": "194440"
  },
  {
    "text": "test cache and then run my go test",
    "start": "194440",
    "end": "196280"
  },
  {
    "text": "command again the tests are now failing",
    "start": "196280",
    "end": "198680"
  },
  {
    "text": "so what gives this happens because one",
    "start": "198680",
    "end": "200840"
  },
  {
    "text": "of the tests isn't tidying up after it's",
    "start": "200840",
    "end": "203120"
  },
  {
    "text": "done causing there to be stale data",
    "start": "203120",
    "end": "204959"
  },
  {
    "text": "which affects the next time it's run now",
    "start": "204959",
    "end": "207000"
  },
  {
    "text": "all of this is a bit of a dramatization",
    "start": "207000",
    "end": "209319"
  },
  {
    "start": "209000",
    "end": "437000"
  },
  {
    "text": "but it does show some common problems",
    "start": "209319",
    "end": "211159"
  },
  {
    "text": "that cause flaky tests when using",
    "start": "211159",
    "end": "212920"
  },
  {
    "text": "something like Docker compose let's go",
    "start": "212920",
    "end": "214879"
  },
  {
    "text": "ahead and make our tests more consistent",
    "start": "214879",
    "end": "216799"
  },
  {
    "text": "using test containers first things first",
    "start": "216799",
    "end": "219159"
  },
  {
    "text": "we need to add the test containers",
    "start": "219159",
    "end": "220640"
  },
  {
    "text": "package to our project which we can do",
    "start": "220640",
    "end": "222959"
  },
  {
    "text": "using the following goget command once",
    "start": "222959",
    "end": "225280"
  },
  {
    "text": "it's complet we can then import it into",
    "start": "225280",
    "end": "227319"
  },
  {
    "text": "our test file using the following two",
    "start": "227319",
    "end": "229280"
  },
  {
    "text": "lines the First Line Imports the base",
    "start": "229280",
    "end": "231560"
  },
  {
    "text": "test containers package and the Second",
    "start": "231560",
    "end": "233519"
  },
  {
    "text": "Line Imports the weight module which",
    "start": "233519",
    "end": "235439"
  },
  {
    "text": "we're going to need in a minute next we",
    "start": "235439",
    "end": "237200"
  },
  {
    "text": "can head down to our single test",
    "start": "237200",
    "end": "238840"
  },
  {
    "text": "function this is where we want to create",
    "start": "238840",
    "end": "240720"
  },
  {
    "text": "our test container instance to do so we",
    "start": "240720",
    "end": "243120"
  },
  {
    "text": "first instantiate a new instance of a",
    "start": "243120",
    "end": "245200"
  },
  {
    "text": "container request this type will contain",
    "start": "245200",
    "end": "247200"
  },
  {
    "text": "the properties of our container such as",
    "start": "247200",
    "end": "249360"
  },
  {
    "text": "the image which in our case we want to",
    "start": "249360",
    "end": "251239"
  },
  {
    "text": "be redis 7.2 the exposed ports of the",
    "start": "251239",
    "end": "254079"
  },
  {
    "text": "container which for reddis is TCP 6379",
    "start": "254079",
    "end": "257720"
  },
  {
    "text": "and lastly a property called waiting for",
    "start": "257720",
    "end": "260120"
  },
  {
    "text": "which is used as a weit condition to",
    "start": "260120",
    "end": "261880"
  },
  {
    "text": "tell our request to block until that",
    "start": "261880",
    "end": "263960"
  },
  {
    "text": "condition is met this is used to ensure",
    "start": "263960",
    "end": "266120"
  },
  {
    "text": "the container is in a good State before",
    "start": "266120",
    "end": "268240"
  },
  {
    "text": "our tests are allowed to proceeded",
    "start": "268240",
    "end": "270400"
  },
  {
    "text": "however what should we wait for if we",
    "start": "270400",
    "end": "272240"
  },
  {
    "text": "take a look at our Docker composed logs",
    "start": "272240",
    "end": "273840"
  },
  {
    "text": "you'll notice that we receive an output",
    "start": "273840",
    "end": "275520"
  },
  {
    "text": "of ready to accept connections when the",
    "start": "275520",
    "end": "277680"
  },
  {
    "text": "container has started up this seems like",
    "start": "277680",
    "end": "279600"
  },
  {
    "text": "a pretty good thing to wait for so let's",
    "start": "279600",
    "end": "281600"
  },
  {
    "text": "go ahead and do that we can achieve this",
    "start": "281600",
    "end": "283639"
  },
  {
    "text": "by using the for log function of the",
    "start": "283639",
    "end": "285680"
  },
  {
    "text": "weight package which we imported earlier",
    "start": "285680",
    "end": "287919"
  },
  {
    "text": "this function allows us to specify a log",
    "start": "287919",
    "end": "290000"
  },
  {
    "text": "line that we want the container to wait",
    "start": "290000",
    "end": "291560"
  },
  {
    "text": "for let's set this to the line we just",
    "start": "291560",
    "end": "293400"
  },
  {
    "text": "identified ready to accept connections",
    "start": "293400",
    "end": "295960"
  },
  {
    "text": "now that we have our container request",
    "start": "295960",
    "end": "297479"
  },
  {
    "text": "defined we can now create the container",
    "start": "297479",
    "end": "299400"
  },
  {
    "text": "using the generic container function of",
    "start": "299400",
    "end": "301639"
  },
  {
    "text": "the test containers package first",
    "start": "301639",
    "end": "303479"
  },
  {
    "text": "passing in a context. context followed",
    "start": "303479",
    "end": "306039"
  },
  {
    "text": "by passing in a new generic container",
    "start": "306039",
    "end": "308000"
  },
  {
    "text": "request struct inside of this struct",
    "start": "308000",
    "end": "310039"
  },
  {
    "text": "let's go ahead and pass in our container",
    "start": "310039",
    "end": "311800"
  },
  {
    "text": "request followed by setting the started",
    "start": "311800",
    "end": "313759"
  },
  {
    "text": "property to be true which tells the",
    "start": "313759",
    "end": "315440"
  },
  {
    "text": "container to automatically start lastly",
    "start": "315440",
    "end": "317960"
  },
  {
    "text": "because this function can return an",
    "start": "317960",
    "end": "319440"
  },
  {
    "text": "error then I'm going to add an assertion",
    "start": "319440",
    "end": "321240"
  },
  {
    "text": "to make sure that this is nil with that",
    "start": "321240",
    "end": "323280"
  },
  {
    "text": "our container should now be deploying",
    "start": "323280",
    "end": "324800"
  },
  {
    "text": "when we run our test code let's go ahead",
    "start": "324800",
    "end": "326840"
  },
  {
    "text": "and check it out to do so let's run the",
    "start": "326840",
    "end": "328960"
  },
  {
    "text": "following watch Cod command which will",
    "start": "328960",
    "end": "330360"
  },
  {
    "text": "show us when the docker containers are",
    "start": "330360",
    "end": "332080"
  },
  {
    "text": "created then in the second shell I'll",
    "start": "332080",
    "end": "334199"
  },
  {
    "text": "run the integration tests using the go",
    "start": "334199",
    "end": "336360"
  },
  {
    "text": "test command this will still fail as",
    "start": "336360",
    "end": "338360"
  },
  {
    "text": "we're using the existing Docker composed",
    "start": "338360",
    "end": "340240"
  },
  {
    "text": "container however we should see two new",
    "start": "340240",
    "end": "342280"
  },
  {
    "text": "containers being created the first of",
    "start": "342280",
    "end": "344639"
  },
  {
    "text": "these is our redest test container which",
    "start": "344639",
    "end": "346600"
  },
  {
    "text": "we can identify through the image name",
    "start": "346600",
    "end": "348680"
  },
  {
    "text": "you'll also notice that the port has",
    "start": "348680",
    "end": "350240"
  },
  {
    "text": "been dynamically assigned to",
    "start": "350240",
    "end": "352720"
  },
  {
    "text": "32781 this is how test containers",
    "start": "352720",
    "end": "354960"
  },
  {
    "text": "prevents Port conflicts by dynamically",
    "start": "354960",
    "end": "357479"
  },
  {
    "text": "assigning an open port to the exposed",
    "start": "357479",
    "end": "359440"
  },
  {
    "text": "port Port we configured the second",
    "start": "359440",
    "end": "361360"
  },
  {
    "text": "container that was created is known as",
    "start": "361360",
    "end": "363199"
  },
  {
    "text": "the reaper which happens to be named",
    "start": "363199",
    "end": "365039"
  },
  {
    "text": "after my favorite Shinigami the purpose",
    "start": "365039",
    "end": "367280"
  },
  {
    "text": "of this container is to automatically",
    "start": "367280",
    "end": "369080"
  },
  {
    "text": "clean up unused test containers which",
    "start": "369080",
    "end": "371400"
  },
  {
    "text": "happens after around 10 seconds this is",
    "start": "371400",
    "end": "373960"
  },
  {
    "text": "one of my favorite features of test",
    "start": "373960",
    "end": "375639"
  },
  {
    "text": "containers as it not only helps you to",
    "start": "375639",
    "end": "377720"
  },
  {
    "text": "make your tests more consistent it also",
    "start": "377720",
    "end": "379960"
  },
  {
    "text": "prevents you from having a bunch of",
    "start": "379960",
    "end": "381400"
  },
  {
    "text": "zombie containers lying around now that",
    "start": "381400",
    "end": "383919"
  },
  {
    "text": "we have our test container deploying the",
    "start": "383919",
    "end": "385880"
  },
  {
    "text": "next thing to do is configure our tests",
    "start": "385880",
    "end": "387880"
  },
  {
    "text": "to use it in order to do so we just need",
    "start": "387880",
    "end": "390160"
  },
  {
    "text": "to pass in the correct address for our",
    "start": "390160",
    "end": "392000"
  },
  {
    "text": "reddest client to connect to however as",
    "start": "392000",
    "end": "394319"
  },
  {
    "text": "we saw test containers dynamically",
    "start": "394319",
    "end": "396280"
  },
  {
    "text": "assigns the port which means we're",
    "start": "396280",
    "end": "398080"
  },
  {
    "text": "unable to hardcode the address value if",
    "start": "398080",
    "end": "400160"
  },
  {
    "text": "we try to do this then it'll fail to",
    "start": "400160",
    "end": "402039"
  },
  {
    "text": "connect fortunately the test containers",
    "start": "402039",
    "end": "404160"
  },
  {
    "text": "package provides us with the Endo we",
    "start": "404160",
    "end": "405880"
  },
  {
    "text": "need to connect with in order to obtain",
    "start": "405880",
    "end": "408039"
  },
  {
    "text": "this we need to use the return value of",
    "start": "408039",
    "end": "410080"
  },
  {
    "text": "the generic container function this",
    "start": "410080",
    "end": "412240"
  },
  {
    "text": "return value is of the container type",
    "start": "412240",
    "end": "414360"
  },
  {
    "text": "and contains a method called endpoint",
    "start": "414360",
    "end": "416599"
  },
  {
    "text": "which we can use to obtain the",
    "start": "416599",
    "end": "418039"
  },
  {
    "text": "dynamically generated address passing it",
    "start": "418039",
    "end": "420360"
  },
  {
    "text": "to our reddis client with that our test",
    "start": "420360",
    "end": "422879"
  },
  {
    "text": "code should be good to go if I go ahead",
    "start": "422879",
    "end": "424800"
  },
  {
    "text": "and run them using the go test command",
    "start": "424800",
    "end": "426680"
  },
  {
    "text": "you'll see that everything works as",
    "start": "426680",
    "end": "428160"
  },
  {
    "text": "expected and just to double check let's",
    "start": "428160",
    "end": "430560"
  },
  {
    "text": "go ahead and shut down the docker",
    "start": "430560",
    "end": "431960"
  },
  {
    "text": "composed containers and then run our",
    "start": "431960",
    "end": "433440"
  },
  {
    "text": "tests again with that we're almost",
    "start": "433440",
    "end": "435560"
  },
  {
    "text": "complete with this simple example",
    "start": "435560",
    "end": "437280"
  },
  {
    "start": "437000",
    "end": "474000"
  },
  {
    "text": "however we have one last thing I'd like",
    "start": "437280",
    "end": "438840"
  },
  {
    "text": "to change as you're probably aware redis",
    "start": "438840",
    "end": "441360"
  },
  {
    "text": "is no longer open source so let's go",
    "start": "441360",
    "end": "443800"
  },
  {
    "text": "ahead and make sure it works with the",
    "start": "443800",
    "end": "445120"
  },
  {
    "text": "Forerunner for Red's replacement valky",
    "start": "445120",
    "end": "448280"
  },
  {
    "text": "which is not only maintained by a lot of",
    "start": "448280",
    "end": "450199"
  },
  {
    "text": "the redis core contributors but also",
    "start": "450199",
    "end": "452319"
  },
  {
    "text": "happens to have the support of the Linux",
    "start": "452319",
    "end": "454319"
  },
  {
    "text": "foundation in order to use it let's",
    "start": "454319",
    "end": "456520"
  },
  {
    "text": "first head over to Docker Hub and find",
    "start": "456520",
    "end": "458639"
  },
  {
    "text": "the correct image and tag we want to use",
    "start": "458639",
    "end": "461280"
  },
  {
    "text": "then back in our test code let's change",
    "start": "461280",
    "end": "463240"
  },
  {
    "text": "the image of our container request from",
    "start": "463240",
    "end": "465000"
  },
  {
    "text": "being redis to valky now we can check",
    "start": "465000",
    "end": "467280"
  },
  {
    "text": "that everything works by running our",
    "start": "467280",
    "end": "468639"
  },
  {
    "text": "test code again and with that we've",
    "start": "468639",
    "end": "470680"
  },
  {
    "text": "successfully validated that our code",
    "start": "470680",
    "end": "472400"
  },
  {
    "text": "will work with Red's successor whilst",
    "start": "472400",
    "end": "474720"
  },
  {
    "start": "474000",
    "end": "654000"
  },
  {
    "text": "you're able to deploy any generic",
    "start": "474720",
    "end": "476240"
  },
  {
    "text": "container that you like using test",
    "start": "476240",
    "end": "477840"
  },
  {
    "text": "containers the project also provides a",
    "start": "477840",
    "end": "480039"
  },
  {
    "text": "number of pre-built modules these",
    "start": "480039",
    "end": "482000"
  },
  {
    "text": "modules are pre-configured",
    "start": "482000",
    "end": "483319"
  },
  {
    "text": "implementations of various Services",
    "start": "483319",
    "end": "485639"
  },
  {
    "text": "which help to simplify the setup code",
    "start": "485639",
    "end": "487520"
  },
  {
    "text": "for your tests for example here I have",
    "start": "487520",
    "end": "489879"
  },
  {
    "text": "some test code that makes use of a",
    "start": "489879",
    "end": "491400"
  },
  {
    "text": "postgres test container you'll notice",
    "start": "491400",
    "end": "493520"
  },
  {
    "text": "that compared to the reddest container",
    "start": "493520",
    "end": "495120"
  },
  {
    "text": "this setup is a little more complex part",
    "start": "495120",
    "end": "497280"
  },
  {
    "text": "of this complexity is the fact that we",
    "start": "497280",
    "end": "499080"
  },
  {
    "text": "have to craft our connection URI",
    "start": "499080",
    "end": "500960"
  },
  {
    "text": "hardcoding the authentication which",
    "start": "500960",
    "end": "502599"
  },
  {
    "text": "we've already provided to our container",
    "start": "502599",
    "end": "504479"
  },
  {
    "text": "whilst also having to interpolate The",
    "start": "504479",
    "end": "506199"
  },
  {
    "text": "Container endpoint we can simplify this",
    "start": "506199",
    "end": "508520"
  },
  {
    "text": "code by using the test containers",
    "start": "508520",
    "end": "510199"
  },
  {
    "text": "postgres module which we can add to our",
    "start": "510199",
    "end": "512320"
  },
  {
    "text": "project using the following goget",
    "start": "512320",
    "end": "514120"
  },
  {
    "text": "command once added we can then remove",
    "start": "514120",
    "end": "516159"
  },
  {
    "text": "our existing container setup code and",
    "start": "516159",
    "end": "518360"
  },
  {
    "text": "begin to replace it with the module",
    "start": "518360",
    "end": "520000"
  },
  {
    "text": "instead to do so we can use the Run",
    "start": "520000",
    "end": "522200"
  },
  {
    "text": "container function of the postgres",
    "start": "522200",
    "end": "523959"
  },
  {
    "text": "module followed by setting the container",
    "start": "523959",
    "end": "525880"
  },
  {
    "text": "image which in this case is postres 16",
    "start": "525880",
    "end": "528640"
  },
  {
    "text": "next we'll add in the following lines to",
    "start": "528640",
    "end": "530240"
  },
  {
    "text": "configure postres setting the database",
    "start": "530240",
    "end": "532279"
  },
  {
    "text": "name the user's name and the password",
    "start": "532279",
    "end": "534800"
  },
  {
    "text": "respectively next we can Define our wait",
    "start": "534800",
    "end": "537080"
  },
  {
    "text": "for strategy which will wait for the",
    "start": "537080",
    "end": "538920"
  },
  {
    "text": "following L line to occur twice and also",
    "start": "538920",
    "end": "541399"
  },
  {
    "text": "setting a timeout of 5 Seconds so far",
    "start": "541399",
    "end": "544279"
  },
  {
    "text": "this is pretty similar to setting up",
    "start": "544279",
    "end": "545720"
  },
  {
    "text": "environment variables however the best",
    "start": "545720",
    "end": "547760"
  },
  {
    "text": "part is Yet to Come rather than having",
    "start": "547760",
    "end": "549519"
  },
  {
    "text": "to construct our own connection URI we",
    "start": "549519",
    "end": "551880"
  },
  {
    "text": "can instead use the connection string",
    "start": "551880",
    "end": "553560"
  },
  {
    "text": "method of the container passing in the",
    "start": "553560",
    "end": "555519"
  },
  {
    "text": "additional parameter of SSL mode disable",
    "start": "555519",
    "end": "558320"
  },
  {
    "text": "now if I run my tests I can see that it",
    "start": "558320",
    "end": "560160"
  },
  {
    "text": "works as expected as well as postres",
    "start": "560160",
    "end": "562640"
  },
  {
    "text": "test containers provide some other",
    "start": "562640",
    "end": "564079"
  },
  {
    "text": "modules that I commonly use such as the",
    "start": "564079",
    "end": "566440"
  },
  {
    "text": "module for Kafka which makes deploying",
    "start": "566440",
    "end": "568440"
  },
  {
    "text": "an instance of it stupidly simple I mean",
    "start": "568440",
    "end": "570839"
  },
  {
    "text": "seriously just ask anyone who's deployed",
    "start": "570839",
    "end": "572959"
  },
  {
    "text": "a local instance of Kafka to know how",
    "start": "572959",
    "end": "574920"
  },
  {
    "text": "difficult this normally is as well as",
    "start": "574920",
    "end": "576800"
  },
  {
    "text": "Kafka another one of my favorite modules",
    "start": "576800",
    "end": "578800"
  },
  {
    "text": "is the local stack module which allows",
    "start": "578800",
    "end": "581079"
  },
  {
    "text": "you to easily test against AWS Services",
    "start": "581079",
    "end": "583320"
  },
  {
    "text": "running locally I've typically used this",
    "start": "583320",
    "end": "585360"
  },
  {
    "text": "module in the past to test S3 storage",
    "start": "585360",
    "end": "587600"
  },
  {
    "text": "sqs message cues and AWS Kinesis streams",
    "start": "587600",
    "end": "590959"
  },
  {
    "text": "modules and the test containers package",
    "start": "590959",
    "end": "593040"
  },
  {
    "text": "itself makes it really simple to test",
    "start": "593040",
    "end": "595120"
  },
  {
    "text": "code that would otherwise be difficult",
    "start": "595120",
    "end": "596800"
  },
  {
    "text": "to do so for example here I have another",
    "start": "596800",
    "end": "599800"
  },
  {
    "text": "test Suite one that's performing",
    "start": "599800",
    "end": "601600"
  },
  {
    "text": "integration tests on a repository that",
    "start": "601600",
    "end": "603560"
  },
  {
    "text": "manages wizard spells this repository is",
    "start": "603560",
    "end": "606360"
  },
  {
    "text": "integrated with a post database which",
    "start": "606360",
    "end": "608440"
  },
  {
    "text": "I've already set up with test containers",
    "start": "608440",
    "end": "610640"
  },
  {
    "text": "when I run these tests you'll see they",
    "start": "610640",
    "end": "612399"
  },
  {
    "text": "take a bit of time to complete around 10",
    "start": "612399",
    "end": "614839"
  },
  {
    "text": "seconds in total because these tests run",
    "start": "614839",
    "end": "617519"
  },
  {
    "text": "sequentially one approach to reduce this",
    "start": "617519",
    "end": "619440"
  },
  {
    "text": "time is to run them in parallel however",
    "start": "619440",
    "end": "621920"
  },
  {
    "text": "when I do so it causes a bunch of Errors",
    "start": "621920",
    "end": "624320"
  },
  {
    "text": "to occur this is because all of the",
    "start": "624320",
    "end": "626120"
  },
  {
    "text": "tests are sharing a single database",
    "start": "626120",
    "end": "628000"
  },
  {
    "text": "resource and so any modifications to",
    "start": "628000",
    "end": "630120"
  },
  {
    "text": "that resource can affect other tests",
    "start": "630120",
    "end": "632320"
  },
  {
    "text": "fortunately we can solve this using test",
    "start": "632320",
    "end": "634399"
  },
  {
    "text": "containers rather than spinning up a",
    "start": "634399",
    "end": "636360"
  },
  {
    "text": "single database instance for all of the",
    "start": "636360",
    "end": "638160"
  },
  {
    "text": "tests will instead spin up many database",
    "start": "638160",
    "end": "640399"
  },
  {
    "text": "instances one for each test this then",
    "start": "640399",
    "end": "643120"
  },
  {
    "text": "isolates each test into its own",
    "start": "643120",
    "end": "644880"
  },
  {
    "text": "environment preventing any of them from",
    "start": "644880",
    "end": "646880"
  },
  {
    "text": "affecting each other whilst this is",
    "start": "646880",
    "end": "648720"
  },
  {
    "text": "possible to do without test containers",
    "start": "648720",
    "end": "650480"
  },
  {
    "text": "it's a lot more difficult requiring a",
    "start": "650480",
    "end": "652720"
  },
  {
    "text": "lot of custom code to make it work this",
    "start": "652720",
    "end": "655040"
  },
  {
    "start": "654000",
    "end": "731000"
  },
  {
    "text": "merely scratches the surface of all of",
    "start": "655040",
    "end": "656920"
  },
  {
    "text": "the interesting ways you can use test",
    "start": "656920",
    "end": "658680"
  },
  {
    "text": "containers with some other examples",
    "start": "658680",
    "end": "660680"
  },
  {
    "text": "being compatibility testing where you",
    "start": "660680",
    "end": "662720"
  },
  {
    "text": "can test your code against many",
    "start": "662720",
    "end": "664120"
  },
  {
    "text": "different versions of these Services you",
    "start": "664120",
    "end": "665880"
  },
  {
    "text": "depend on another approach I've seen is",
    "start": "665880",
    "end": "667839"
  },
  {
    "text": "to use test containers to mock",
    "start": "667839",
    "end": "669360"
  },
  {
    "text": "thirdparty web servers that your",
    "start": "669360",
    "end": "670839"
  },
  {
    "text": "application May request protecting you",
    "start": "670839",
    "end": "672920"
  },
  {
    "text": "from potentially getting your IP banned",
    "start": "672920",
    "end": "675320"
  },
  {
    "text": "additionally test containers aren't just",
    "start": "675320",
    "end": "677079"
  },
  {
    "text": "limited to tests either and can be used",
    "start": "677079",
    "end": "679600"
  },
  {
    "text": "to automatically spin up a local",
    "start": "679600",
    "end": "681360"
  },
  {
    "text": "development environment when you run",
    "start": "681360",
    "end": "682839"
  },
  {
    "text": "your code the docker team have a great",
    "start": "682839",
    "end": "684920"
  },
  {
    "text": "blog post on how to do this which I'll",
    "start": "684920",
    "end": "686480"
  },
  {
    "text": "link in the description down below as",
    "start": "686480",
    "end": "688519"
  },
  {
    "text": "well as making sure you have a",
    "start": "688519",
    "end": "689959"
  },
  {
    "text": "consistent local test environment test",
    "start": "689959",
    "end": "692320"
  },
  {
    "text": "containers also works really well in",
    "start": "692320",
    "end": "694160"
  },
  {
    "text": "cicd pipelines such as GitHub actions",
    "start": "694160",
    "end": "697560"
  },
  {
    "text": "which makes it super simple to set up",
    "start": "697560",
    "end": "699360"
  },
  {
    "text": "your test to automatically run whenever",
    "start": "699360",
    "end": "701399"
  },
  {
    "text": "you push up a code change overall test",
    "start": "701399",
    "end": "703959"
  },
  {
    "text": "containers is a wonderful package one",
    "start": "703959",
    "end": "706360"
  },
  {
    "text": "that enables me to write test code that",
    "start": "706360",
    "end": "708120"
  },
  {
    "text": "hits real Services yet still remains",
    "start": "708120",
    "end": "710360"
  },
  {
    "text": "consistent versatile and simple to use",
    "start": "710360",
    "end": "713480"
  },
  {
    "text": "after having used test containers for a",
    "start": "713480",
    "end": "715399"
  },
  {
    "text": "few years now I can confidently say that",
    "start": "715399",
    "end": "718200"
  },
  {
    "text": "it has forever changed changed the way I",
    "start": "718200",
    "end": "720240"
  },
  {
    "text": "test my code I want to give a big thank",
    "start": "720240",
    "end": "723320"
  },
  {
    "text": "you to Docker for kindly sponsoring this",
    "start": "723320",
    "end": "725240"
  },
  {
    "text": "video with a big thank you to everyone",
    "start": "725240",
    "end": "727040"
  },
  {
    "text": "else for watching",
    "start": "727040",
    "end": "730639"
  }
]