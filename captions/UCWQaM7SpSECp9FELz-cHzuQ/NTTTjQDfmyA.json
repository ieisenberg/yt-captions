[
  {
    "start": "0",
    "end": "113000"
  },
  {
    "text": "the term AI is overloaded its",
    "start": "480",
    "end": "3360"
  },
  {
    "text": "applications cover a variety of topics",
    "start": "3360",
    "end": "5520"
  },
  {
    "text": "from photo correction art generation",
    "start": "5520",
    "end": "8040"
  },
  {
    "text": "chat Bots chess and other board games AI",
    "start": "8040",
    "end": "12120"
  },
  {
    "text": "has also been posed as an existential",
    "start": "12120",
    "end": "14040"
  },
  {
    "text": "threat to humanity",
    "start": "14040",
    "end": "15719"
  },
  {
    "text": "and then there's game AI",
    "start": "15719",
    "end": "18900"
  },
  {
    "text": "the issue probably lies in the name",
    "start": "18900",
    "end": "20580"
  },
  {
    "text": "really it should be called game a s for",
    "start": "20580",
    "end": "23699"
  },
  {
    "text": "artificial stupidity if NPCs were",
    "start": "23699",
    "end": "26279"
  },
  {
    "text": "actually intelligent players would lose",
    "start": "26279",
    "end": "28140"
  },
  {
    "text": "pretty much every time this stupidity",
    "start": "28140",
    "end": "30900"
  },
  {
    "text": "actually lends itself to the challenge",
    "start": "30900",
    "end": "33000"
  },
  {
    "text": "of game balancing",
    "start": "33000",
    "end": "35160"
  },
  {
    "text": "but I digress what this video is about",
    "start": "35160",
    "end": "37920"
  },
  {
    "text": "is pathfinding for NPCs",
    "start": "37920",
    "end": "40860"
  },
  {
    "text": "pathfinding is defined as the plotting",
    "start": "40860",
    "end": "42540"
  },
  {
    "text": "of the shortest route between two points",
    "start": "42540",
    "end": "44280"
  },
  {
    "text": "by a computer application most people",
    "start": "44280",
    "end": "46500"
  },
  {
    "text": "actually encounter pathfinding in Sat",
    "start": "46500",
    "end": "48180"
  },
  {
    "text": "Nav systems such as those founded cars",
    "start": "48180",
    "end": "50340"
  },
  {
    "text": "or on your phone",
    "start": "50340",
    "end": "51600"
  },
  {
    "text": "the other major application of",
    "start": "51600",
    "end": "52980"
  },
  {
    "text": "pathfinding is in games in order for",
    "start": "52980",
    "end": "55260"
  },
  {
    "text": "NPCs to dynamically move around the",
    "start": "55260",
    "end": "57300"
  },
  {
    "text": "environment so how do we apply",
    "start": "57300",
    "end": "59699"
  },
  {
    "text": "pathfinding to our NPCs the first thing",
    "start": "59699",
    "end": "62460"
  },
  {
    "text": "we're going to need is some NPCs to",
    "start": "62460",
    "end": "64198"
  },
  {
    "text": "control",
    "start": "64199",
    "end": "65400"
  },
  {
    "text": "what you're looking at is a quick game",
    "start": "65400",
    "end": "66900"
  },
  {
    "text": "I've whipped up in piglet it's nothing",
    "start": "66900",
    "end": "68880"
  },
  {
    "text": "special merely a window with an NPC at",
    "start": "68880",
    "end": "71640"
  },
  {
    "text": "the center",
    "start": "71640",
    "end": "72540"
  },
  {
    "text": "if I left click you'll see I'm placing a",
    "start": "72540",
    "end": "74640"
  },
  {
    "text": "marker of which the NPC turns to face",
    "start": "74640",
    "end": "77520"
  },
  {
    "text": "this marker is all I can interact with",
    "start": "77520",
    "end": "79380"
  },
  {
    "text": "as the player",
    "start": "79380",
    "end": "81119"
  },
  {
    "text": "if I left click on the marker again it",
    "start": "81119",
    "end": "83220"
  },
  {
    "text": "disappears I can also remove it by",
    "start": "83220",
    "end": "85259"
  },
  {
    "text": "right-clicking anywhere on the window",
    "start": "85259",
    "end": "87240"
  },
  {
    "text": "pretty simple",
    "start": "87240",
    "end": "88740"
  },
  {
    "text": "now all we want to do is have the MPC",
    "start": "88740",
    "end": "91200"
  },
  {
    "text": "walk to the marker this should be pretty",
    "start": "91200",
    "end": "94140"
  },
  {
    "text": "easy right",
    "start": "94140",
    "end": "95220"
  },
  {
    "text": "by the way you can follow along if you",
    "start": "95220",
    "end": "97020"
  },
  {
    "text": "like as this code is in GitHub the link",
    "start": "97020",
    "end": "99060"
  },
  {
    "text": "is in the description",
    "start": "99060",
    "end": "100799"
  },
  {
    "text": "all we need to do is travel in a",
    "start": "100799",
    "end": "102540"
  },
  {
    "text": "straight line to our dots let's go ahead",
    "start": "102540",
    "end": "104520"
  },
  {
    "text": "and add some code to do this",
    "start": "104520",
    "end": "106619"
  },
  {
    "text": "the code first checks for a Target",
    "start": "106619",
    "end": "108420"
  },
  {
    "text": "destination for impc",
    "start": "108420",
    "end": "110640"
  },
  {
    "text": "and also checks to make sure we're not",
    "start": "110640",
    "end": "112439"
  },
  {
    "text": "already at that Target if it exists if",
    "start": "112439",
    "end": "115320"
  },
  {
    "start": "113000",
    "end": "229000"
  },
  {
    "text": "either of those things are true we",
    "start": "115320",
    "end": "116759"
  },
  {
    "text": "actually return early whilst also making",
    "start": "116759",
    "end": "118740"
  },
  {
    "text": "sure to set our Target to be none",
    "start": "118740",
    "end": "120899"
  },
  {
    "text": "this saves us some precious CPU Cycles",
    "start": "120899",
    "end": "123240"
  },
  {
    "text": "remember we're working in Python here",
    "start": "123240",
    "end": "126600"
  },
  {
    "text": "here the code works out the angle from",
    "start": "126600",
    "end": "128880"
  },
  {
    "text": "the mpc's current position to the Target",
    "start": "128880",
    "end": "130679"
  },
  {
    "text": "position",
    "start": "130679",
    "end": "131700"
  },
  {
    "text": "and then uses some fancy math known as",
    "start": "131700",
    "end": "133860"
  },
  {
    "text": "trigonometry to determine how much to",
    "start": "133860",
    "end": "136440"
  },
  {
    "text": "move in a straight line",
    "start": "136440",
    "end": "138000"
  },
  {
    "text": "nice and effective",
    "start": "138000",
    "end": "140760"
  },
  {
    "text": "so as you can see this works great",
    "start": "140760",
    "end": "143220"
  },
  {
    "text": "until we stick a wall in the environment",
    "start": "143220",
    "end": "145920"
  },
  {
    "text": "our MPC just walks straight through and",
    "start": "145920",
    "end": "148560"
  },
  {
    "text": "the immersion is broken",
    "start": "148560",
    "end": "150000"
  },
  {
    "text": "not good",
    "start": "150000",
    "end": "151379"
  },
  {
    "text": "so how do we solve this well first up",
    "start": "151379",
    "end": "154560"
  },
  {
    "text": "let's go ahead and prevent the NPC from",
    "start": "154560",
    "end": "156480"
  },
  {
    "text": "walking through walls",
    "start": "156480",
    "end": "158040"
  },
  {
    "text": "here we'll just ensure that the MPC will",
    "start": "158040",
    "end": "160500"
  },
  {
    "text": "only move to a Target if it's in their",
    "start": "160500",
    "end": "162300"
  },
  {
    "text": "line of sight",
    "start": "162300",
    "end": "164840"
  },
  {
    "text": "the map class already has the method to",
    "start": "165060",
    "end": "167099"
  },
  {
    "text": "do that",
    "start": "167099",
    "end": "168599"
  },
  {
    "text": "now we can at least move our NPC through",
    "start": "168599",
    "end": "171660"
  },
  {
    "text": "the environment but this is a very",
    "start": "171660",
    "end": "173640"
  },
  {
    "text": "manual process to take it to the next",
    "start": "173640",
    "end": "175920"
  },
  {
    "text": "level so that our MPC actually navigates",
    "start": "175920",
    "end": "178080"
  },
  {
    "text": "the environment we need to dig into a",
    "start": "178080",
    "end": "180180"
  },
  {
    "text": "topic known as graph Theory",
    "start": "180180",
    "end": "182760"
  },
  {
    "text": "graph theory is a concept in mathematics",
    "start": "182760",
    "end": "185239"
  },
  {
    "text": "specifically discrete mathematics",
    "start": "185239",
    "end": "188580"
  },
  {
    "text": "no no not that kind of discreet discrete",
    "start": "188580",
    "end": "191099"
  },
  {
    "text": "as inseparate or distinct such as",
    "start": "191099",
    "end": "193200"
  },
  {
    "text": "integers or nodes graphs different from",
    "start": "193200",
    "end": "196200"
  },
  {
    "text": "those that you'd find in a PowerPoint",
    "start": "196200",
    "end": "197519"
  },
  {
    "text": "presentation are a data structure",
    "start": "197519",
    "end": "199680"
  },
  {
    "text": "amounting to a set of objects that are",
    "start": "199680",
    "end": "201659"
  },
  {
    "text": "related in some way to one another",
    "start": "201659",
    "end": "204060"
  },
  {
    "text": "in more common terms you can think of",
    "start": "204060",
    "end": "206040"
  },
  {
    "text": "them as nodes and edges the nodes being",
    "start": "206040",
    "end": "208800"
  },
  {
    "text": "the discrete value and the edges being",
    "start": "208800",
    "end": "210599"
  },
  {
    "text": "the relation with one another",
    "start": "210599",
    "end": "212519"
  },
  {
    "text": "now I'm sure this is all very",
    "start": "212519",
    "end": "214080"
  },
  {
    "text": "interesting but what does it have to do",
    "start": "214080",
    "end": "215879"
  },
  {
    "text": "with pathfinding well let me show you",
    "start": "215879",
    "end": "218580"
  },
  {
    "text": "here's our map again but this time with",
    "start": "218580",
    "end": "221220"
  },
  {
    "text": "some nodes added I've also gone a drawn",
    "start": "221220",
    "end": "223500"
  },
  {
    "text": "lines between them connecting them up",
    "start": "223500",
    "end": "225420"
  },
  {
    "text": "these represent the edges these nodes",
    "start": "225420",
    "end": "227940"
  },
  {
    "text": "and edges form our graph",
    "start": "227940",
    "end": "230099"
  },
  {
    "start": "229000",
    "end": "280000"
  },
  {
    "text": "using this we can discover a course for",
    "start": "230099",
    "end": "232620"
  },
  {
    "text": "our NPC between two points using an",
    "start": "232620",
    "end": "234780"
  },
  {
    "text": "algorithm",
    "start": "234780",
    "end": "235739"
  },
  {
    "text": "that algorithm is called dijkstra's",
    "start": "235739",
    "end": "238500"
  },
  {
    "text": "shortest path algorithm name so after",
    "start": "238500",
    "end": "241260"
  },
  {
    "text": "one of my favorite computer scientists",
    "start": "241260",
    "end": "243000"
  },
  {
    "text": "edska dijkstra so how does it work",
    "start": "243000",
    "end": "246780"
  },
  {
    "text": "well we first take our starting point",
    "start": "246780",
    "end": "248700"
  },
  {
    "text": "and then take our destination",
    "start": "248700",
    "end": "251340"
  },
  {
    "text": "and we find the closest nodes to each of",
    "start": "251340",
    "end": "253620"
  },
  {
    "text": "those",
    "start": "253620",
    "end": "255120"
  },
  {
    "text": "we can do this by iterating through our",
    "start": "255120",
    "end": "256680"
  },
  {
    "text": "nodes and calculating the distance from",
    "start": "256680",
    "end": "258359"
  },
  {
    "text": "our player and marker points whilst also",
    "start": "258359",
    "end": "260880"
  },
  {
    "text": "checking if they're in line of sight of",
    "start": "260880",
    "end": "262139"
  },
  {
    "text": "each other calculating our distance is",
    "start": "262139",
    "end": "264479"
  },
  {
    "text": "some more fancy math",
    "start": "264479",
    "end": "266160"
  },
  {
    "text": "basically the square root of a squared",
    "start": "266160",
    "end": "269100"
  },
  {
    "text": "plus b squared where a is X1 minus X2",
    "start": "269100",
    "end": "273360"
  },
  {
    "text": "and B is y1 minus Y2 we'll add this",
    "start": "273360",
    "end": "276660"
  },
  {
    "text": "distance calculation as a function in",
    "start": "276660",
    "end": "278280"
  },
  {
    "text": "our code because we're going to need it",
    "start": "278280",
    "end": "280080"
  },
  {
    "start": "280000",
    "end": "452000"
  },
  {
    "text": "later",
    "start": "280080",
    "end": "280979"
  },
  {
    "text": "now that we have our source and",
    "start": "280979",
    "end": "282479"
  },
  {
    "text": "destination nodes it's time to find our",
    "start": "282479",
    "end": "284639"
  },
  {
    "text": "path",
    "start": "284639",
    "end": "285780"
  },
  {
    "text": "the first thing we do is set the weight",
    "start": "285780",
    "end": "287460"
  },
  {
    "text": "of our nodes to Infinity",
    "start": "287460",
    "end": "289919"
  },
  {
    "text": "this is the show that we actually",
    "start": "289919",
    "end": "291240"
  },
  {
    "text": "haven't calculated the distance to that",
    "start": "291240",
    "end": "293100"
  },
  {
    "text": "node and therefore we don't actually",
    "start": "293100",
    "end": "294780"
  },
  {
    "text": "know the cost and distance to get there",
    "start": "294780",
    "end": "297540"
  },
  {
    "text": "once we've done all that we then take",
    "start": "297540",
    "end": "299759"
  },
  {
    "text": "our source node and set the cost of it",
    "start": "299759",
    "end": "301979"
  },
  {
    "text": "to zero we're already there so it",
    "start": "301979",
    "end": "304020"
  },
  {
    "text": "doesn't cost us anything to get there",
    "start": "304020",
    "end": "305340"
  },
  {
    "text": "next we calculate the cost to each of",
    "start": "305340",
    "end": "308340"
  },
  {
    "text": "the other nodes connected to our source",
    "start": "308340",
    "end": "310919"
  },
  {
    "text": "remember that calculation function",
    "start": "310919",
    "end": "313139"
  },
  {
    "text": "we use that to calculate the distance of",
    "start": "313139",
    "end": "315120"
  },
  {
    "text": "each node to our source node",
    "start": "315120",
    "end": "317280"
  },
  {
    "text": "one pro tip is to actually calculate the",
    "start": "317280",
    "end": "319500"
  },
  {
    "text": "weights of those edges beforehand",
    "start": "319500",
    "end": "322080"
  },
  {
    "text": "now we label each of these nodes with a",
    "start": "322080",
    "end": "324240"
  },
  {
    "text": "new cost which is the sum of the current",
    "start": "324240",
    "end": "326699"
  },
  {
    "text": "cost zero because we're at the starting",
    "start": "326699",
    "end": "328560"
  },
  {
    "text": "point and the weight at the edge",
    "start": "328560",
    "end": "331199"
  },
  {
    "text": "if the node's new sum is shorter than",
    "start": "331199",
    "end": "333180"
  },
  {
    "text": "its existing sum then we set a pointer",
    "start": "333180",
    "end": "335520"
  },
  {
    "text": "of the parent to that node to the one",
    "start": "335520",
    "end": "337919"
  },
  {
    "text": "that we're currently at",
    "start": "337919",
    "end": "339720"
  },
  {
    "text": "as all of these nodes have their weight",
    "start": "339720",
    "end": "341520"
  },
  {
    "text": "set to Infinity all of them Point their",
    "start": "341520",
    "end": "343919"
  },
  {
    "text": "parent to our starting node this will",
    "start": "343919",
    "end": "346020"
  },
  {
    "text": "allow us to retrace our steps once we",
    "start": "346020",
    "end": "347759"
  },
  {
    "text": "find our Target destination finally we",
    "start": "347759",
    "end": "350280"
  },
  {
    "text": "Mark our current node which is the",
    "start": "350280",
    "end": "351960"
  },
  {
    "text": "starting node as visited this means",
    "start": "351960",
    "end": "354419"
  },
  {
    "text": "we'll never consider that node ever",
    "start": "354419",
    "end": "355800"
  },
  {
    "text": "again this prevents us from getting",
    "start": "355800",
    "end": "357600"
  },
  {
    "text": "stuck in an infinite Loop now we just",
    "start": "357600",
    "end": "360060"
  },
  {
    "text": "select the next node to restart that",
    "start": "360060",
    "end": "361740"
  },
  {
    "text": "whole process with this is the node with",
    "start": "361740",
    "end": "363840"
  },
  {
    "text": "the lowest cost that has yet to be",
    "start": "363840",
    "end": "365460"
  },
  {
    "text": "visited then we repeat the process over",
    "start": "365460",
    "end": "368520"
  },
  {
    "text": "again",
    "start": "368520",
    "end": "370620"
  },
  {
    "text": "until we happen to find our destination",
    "start": "370620",
    "end": "373020"
  },
  {
    "text": "node",
    "start": "373020",
    "end": "375500"
  },
  {
    "text": "then we follow that parent pointer chain",
    "start": "377100",
    "end": "379500"
  },
  {
    "text": "back to our starting point and we have a",
    "start": "379500",
    "end": "382740"
  },
  {
    "text": "path",
    "start": "382740",
    "end": "384660"
  },
  {
    "text": "Dexter's algorithm is highly effective",
    "start": "384660",
    "end": "386580"
  },
  {
    "text": "and is guaranteed to find the shortest",
    "start": "386580",
    "end": "388500"
  },
  {
    "text": "path but it has one drawback",
    "start": "388500",
    "end": "391500"
  },
  {
    "text": "it's expensive at least from the CPU",
    "start": "391500",
    "end": "394020"
  },
  {
    "text": "perspective because games really need to",
    "start": "394020",
    "end": "396360"
  },
  {
    "text": "be considered as CPU Cycles especially",
    "start": "396360",
    "end": "398460"
  },
  {
    "text": "games that are written in Python this",
    "start": "398460",
    "end": "400020"
  },
  {
    "text": "can be an issue fortunately there's a",
    "start": "400020",
    "end": "401880"
  },
  {
    "text": "very similar algorithm that we can use",
    "start": "401880",
    "end": "403259"
  },
  {
    "text": "instead",
    "start": "403259",
    "end": "404280"
  },
  {
    "text": "a star is what's typically used in both",
    "start": "404280",
    "end": "406500"
  },
  {
    "text": "the games industry and for sat navs and",
    "start": "406500",
    "end": "409139"
  },
  {
    "text": "for good reason it's fast and does the",
    "start": "409139",
    "end": "411960"
  },
  {
    "text": "job the drawback",
    "start": "411960",
    "end": "413940"
  },
  {
    "text": "well it's not perfect",
    "start": "413940",
    "end": "415979"
  },
  {
    "text": "it's close to perfect but will sometimes",
    "start": "415979",
    "end": "418259"
  },
  {
    "text": "choose the almost shortest path",
    "start": "418259",
    "end": "421020"
  },
  {
    "text": "so how does this algorithm work well you",
    "start": "421020",
    "end": "423960"
  },
  {
    "text": "may be annoyed at how long I spent",
    "start": "423960",
    "end": "425280"
  },
  {
    "text": "talking about Dexter's only to push",
    "start": "425280",
    "end": "426960"
  },
  {
    "text": "another algorithm to you like some sort",
    "start": "426960",
    "end": "429060"
  },
  {
    "text": "of smug mathematician but just just hold",
    "start": "429060",
    "end": "431639"
  },
  {
    "text": "on a sec a star is actually built off of",
    "start": "431639",
    "end": "434280"
  },
  {
    "text": "dijkstra's algorithm in fact it's",
    "start": "434280",
    "end": "436919"
  },
  {
    "text": "dijkstra's with a Twist it uses a",
    "start": "436919",
    "end": "440099"
  },
  {
    "text": "heuristic which is another mathematical",
    "start": "440099",
    "end": "442560"
  },
  {
    "text": "term there's a lot of math in game",
    "start": "442560",
    "end": "444840"
  },
  {
    "text": "development",
    "start": "444840",
    "end": "446160"
  },
  {
    "text": "a heuristic is basically a technique for",
    "start": "446160",
    "end": "448380"
  },
  {
    "text": "solving a problem more quickly when the",
    "start": "448380",
    "end": "450419"
  },
  {
    "text": "classic method or methods are too slow",
    "start": "450419",
    "end": "452580"
  },
  {
    "start": "452000",
    "end": "528000"
  },
  {
    "text": "it's basically a trade of accuracy for",
    "start": "452580",
    "end": "455099"
  },
  {
    "text": "improved performance",
    "start": "455099",
    "end": "456780"
  },
  {
    "text": "in a star it's an additional weight that",
    "start": "456780",
    "end": "459120"
  },
  {
    "text": "adds to the node's cost",
    "start": "459120",
    "end": "461280"
  },
  {
    "text": "this weight is derived from the distance",
    "start": "461280",
    "end": "462960"
  },
  {
    "text": "between the node and the destination",
    "start": "462960",
    "end": "465240"
  },
  {
    "text": "the thinking being that the closer the",
    "start": "465240",
    "end": "467039"
  },
  {
    "text": "node is to the destination the higher",
    "start": "467039",
    "end": "468840"
  },
  {
    "text": "the likelihood that this node gets you",
    "start": "468840",
    "end": "470340"
  },
  {
    "text": "to where you want to go in our example",
    "start": "470340",
    "end": "472560"
  },
  {
    "text": "you can see that the bottom two nodes",
    "start": "472560",
    "end": "474720"
  },
  {
    "text": "would be checked before the top node",
    "start": "474720",
    "end": "476759"
  },
  {
    "text": "because of the addition of this",
    "start": "476759",
    "end": "477960"
  },
  {
    "text": "heuristic",
    "start": "477960",
    "end": "479960"
  },
  {
    "text": "and with a star implemented our MPC",
    "start": "479960",
    "end": "483300"
  },
  {
    "text": "navigates around the maze with no",
    "start": "483300",
    "end": "484860"
  },
  {
    "text": "problem whatsoever",
    "start": "484860",
    "end": "487939"
  },
  {
    "text": "so here is what the code looks like in",
    "start": "487979",
    "end": "490560"
  },
  {
    "text": "Python so you can also check out the",
    "start": "490560",
    "end": "492240"
  },
  {
    "text": "source code for a better look",
    "start": "492240",
    "end": "494280"
  },
  {
    "text": "at the start you can see we're",
    "start": "494280",
    "end": "495660"
  },
  {
    "text": "initializing our data structures and",
    "start": "495660",
    "end": "497699"
  },
  {
    "text": "setting the initial costs of the nodes",
    "start": "497699",
    "end": "499500"
  },
  {
    "text": "to be Infinity",
    "start": "499500",
    "end": "501360"
  },
  {
    "text": "next up we start the main Loop",
    "start": "501360",
    "end": "503819"
  },
  {
    "text": "which continues until our current node",
    "start": "503819",
    "end": "505440"
  },
  {
    "text": "is the end node in your implementations",
    "start": "505440",
    "end": "507960"
  },
  {
    "text": "you probably want to make sure that",
    "start": "507960",
    "end": "509160"
  },
  {
    "text": "reaching the end node is possible in our",
    "start": "509160",
    "end": "511319"
  },
  {
    "text": "graph it is however we then check the",
    "start": "511319",
    "end": "513719"
  },
  {
    "text": "neighbors of the current node and it's",
    "start": "513719",
    "end": "515640"
  },
  {
    "text": "been visited already we just continue",
    "start": "515640",
    "end": "518520"
  },
  {
    "text": "if it happens to be the end node that we",
    "start": "518520",
    "end": "520860"
  },
  {
    "text": "break because we found our destination",
    "start": "520860",
    "end": "523560"
  },
  {
    "text": "otherwise we get the distance",
    "start": "523560",
    "end": "526560"
  },
  {
    "text": "get the heuristic and assign that as the",
    "start": "526560",
    "end": "529380"
  },
  {
    "start": "528000",
    "end": "572000"
  },
  {
    "text": "new cost",
    "start": "529380",
    "end": "530640"
  },
  {
    "text": "if the new cost is less than the",
    "start": "530640",
    "end": "532260"
  },
  {
    "text": "previous cost we make sure to update",
    "start": "532260",
    "end": "534060"
  },
  {
    "text": "that value and the parent",
    "start": "534060",
    "end": "536279"
  },
  {
    "text": "after that we find the next node to look",
    "start": "536279",
    "end": "538440"
  },
  {
    "text": "at by looking at all the lowest cost",
    "start": "538440",
    "end": "539820"
  },
  {
    "text": "nodes",
    "start": "539820",
    "end": "541200"
  },
  {
    "text": "once the loop has completed we",
    "start": "541200",
    "end": "543060"
  },
  {
    "text": "reconstruct the path from the parents",
    "start": "543060",
    "end": "546240"
  },
  {
    "text": "this path is then returned for our MPC",
    "start": "546240",
    "end": "549540"
  },
  {
    "text": "only a small change is needed",
    "start": "549540",
    "end": "551640"
  },
  {
    "text": "all we do is follow the same logic from",
    "start": "551640",
    "end": "554279"
  },
  {
    "text": "moving towards a Target",
    "start": "554279",
    "end": "555899"
  },
  {
    "text": "but we do it for each of the nodes in",
    "start": "555899",
    "end": "557880"
  },
  {
    "text": "our path instead",
    "start": "557880",
    "end": "560220"
  },
  {
    "text": "now we're one step closer to creating an",
    "start": "560220",
    "end": "563100"
  },
  {
    "text": "artificial intelligence they warned us",
    "start": "563100",
    "end": "565200"
  },
  {
    "text": "about",
    "start": "565200",
    "end": "567320"
  }
]