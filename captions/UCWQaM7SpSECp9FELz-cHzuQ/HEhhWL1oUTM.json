[
  {
    "text": "web development has changed quite a lot",
    "start": "240",
    "end": "2240"
  },
  {
    "text": "over the years we've gone from web pages",
    "start": "2240",
    "end": "4720"
  },
  {
    "text": "displaying only static content aka the",
    "start": "4720",
    "end": "7560"
  },
  {
    "text": "Boomer web to being able to run a full",
    "start": "7560",
    "end": "9719"
  },
  {
    "text": "Boomer OS in web assembly somewhere in",
    "start": "9719",
    "end": "12440"
  },
  {
    "text": "the middle of that evolutionary chain we",
    "start": "12440",
    "end": "14639"
  },
  {
    "text": "developed the ability to perform",
    "start": "14639",
    "end": "16080"
  },
  {
    "text": "bidirectional real-time communication",
    "start": "16080",
    "end": "17960"
  },
  {
    "text": "with a server using a technology called",
    "start": "17960",
    "end": "20720"
  },
  {
    "text": "websockets now websockets are pretty",
    "start": "20720",
    "end": "23080"
  },
  {
    "text": "awesome but they are a little basic not",
    "start": "23080",
    "end": "25680"
  },
  {
    "text": "that that's a bad thing but when you're",
    "start": "25680",
    "end": "27439"
  },
  {
    "text": "building a new project from scratch they",
    "start": "27439",
    "end": "29400"
  },
  {
    "text": "are missing a few features you'll likely",
    "start": "29400",
    "end": "31199"
  },
  {
    "text": "need these features include reliability",
    "start": "31199",
    "end": "33960"
  },
  {
    "text": "authentication automatic reconnection",
    "start": "33960",
    "end": "36480"
  },
  {
    "text": "acknowledgements multiplexing and",
    "start": "36480",
    "end": "38960"
  },
  {
    "text": "broadcasting fortunately there is a",
    "start": "38960",
    "end": "41079"
  },
  {
    "text": "framework out there that provides all of",
    "start": "41079",
    "end": "42719"
  },
  {
    "text": "these features out of the box that",
    "start": "42719",
    "end": "44640"
  },
  {
    "text": "framework is socket.io and it does so in",
    "start": "44640",
    "end": "47120"
  },
  {
    "text": "a developer friendly experience the",
    "start": "47120",
    "end": "49280"
  },
  {
    "text": "thing is however despite all of these",
    "start": "49280",
    "end": "50920"
  },
  {
    "text": "benefits I've still typically chosen to",
    "start": "50920",
    "end": "52879"
  },
  {
    "text": "use websockets instead and it's not",
    "start": "52879",
    "end": "55280"
  },
  {
    "text": "because I'm some software purist at",
    "start": "55280",
    "end": "57559"
  },
  {
    "text": "least not this time the main reason I",
    "start": "57559",
    "end": "59559"
  },
  {
    "text": "choose to use websockets instead of",
    "start": "59559",
    "end": "61359"
  },
  {
    "text": "socket.io is because I no longer write",
    "start": "61359",
    "end": "63359"
  },
  {
    "text": "my services in JavaScript instead I",
    "start": "63359",
    "end": "65640"
  },
  {
    "text": "prefer to use more typesafe languages",
    "start": "65640",
    "end": "67640"
  },
  {
    "text": "such as go now go does have an",
    "start": "67640",
    "end": "70119"
  },
  {
    "text": "implementation of the socket.io server",
    "start": "70119",
    "end": "72759"
  },
  {
    "text": "unfortunately however it only supports",
    "start": "72759",
    "end": "74759"
  },
  {
    "text": "version 1.4 of the client which was",
    "start": "74759",
    "end": "77240"
  },
  {
    "text": "released in 2016 that meant there was no",
    "start": "77240",
    "end": "80119"
  },
  {
    "text": "way to use socket.io with a typs safe",
    "start": "80119",
    "end": "81880"
  },
  {
    "text": "language that wasn't Java at least not",
    "start": "81880",
    "end": "84400"
  },
  {
    "text": "until this year when a new Option became",
    "start": "84400",
    "end": "86799"
  },
  {
    "text": "available that option is Socket IO oxide",
    "start": "86799",
    "end": "90280"
  },
  {
    "text": "which provides an implementation of the",
    "start": "90280",
    "end": "91880"
  },
  {
    "text": "socket iio server in Rust this",
    "start": "91880",
    "end": "94119"
  },
  {
    "text": "implementation supports both version",
    "start": "94119",
    "end": "95759"
  },
  {
    "text": "four and five of the protocol which",
    "start": "95759",
    "end": "97560"
  },
  {
    "text": "means it will support whatever client",
    "start": "97560",
    "end": "99119"
  },
  {
    "text": "you're already using the framework",
    "start": "99119",
    "end": "100880"
  },
  {
    "text": "itself uses Tokyo as its asynchronous",
    "start": "100880",
    "end": "103040"
  },
  {
    "text": "runtime and integrates with server",
    "start": "103040",
    "end": "105079"
  },
  {
    "text": "Frameworks based on Tower these are warp",
    "start": "105079",
    "end": "107759"
  },
  {
    "text": "Salvo hyper and my personal favorite",
    "start": "107759",
    "end": "110520"
  },
  {
    "text": "axom because the framework uses tower",
    "start": "110520",
    "end": "113079"
  },
  {
    "text": "under the hood it can take advantage of",
    "start": "113079",
    "end": "114960"
  },
  {
    "text": "the layer system in order to provide",
    "start": "114960",
    "end": "116719"
  },
  {
    "text": "HTTP middleware such as enabling cores",
    "start": "116719",
    "end": "119439"
  },
  {
    "text": "or compression to see the framework in",
    "start": "119439",
    "end": "121640"
  },
  {
    "text": "action let's create a new project using",
    "start": "121640",
    "end": "123360"
  },
  {
    "text": "the cargo new command I'm going to call",
    "start": "123360",
    "end": "125479"
  },
  {
    "text": "mine chatly as a throwback to the bygone",
    "start": "125479",
    "end": "127560"
  },
  {
    "text": "era when socket.io first appeared next",
    "start": "127560",
    "end": "130160"
  },
  {
    "text": "open up the project in your favorite",
    "start": "130160",
    "end": "131800"
  },
  {
    "text": "text editor and head on over to the",
    "start": "131800",
    "end": "133319"
  },
  {
    "text": "cargo. Tomo file here we're going to add",
    "start": "133319",
    "end": "135800"
  },
  {
    "text": "our initial dependencies the ones you",
    "start": "135800",
    "end": "138040"
  },
  {
    "text": "want to add are socket iio oxide Tokyo",
    "start": "138040",
    "end": "141160"
  },
  {
    "text": "tracing tracing subscriber axom Sur and",
    "start": "141160",
    "end": "144840"
  },
  {
    "text": "Sur Json make sure to use the same",
    "start": "144840",
    "end": "146800"
  },
  {
    "text": "versions I am and to enable the same",
    "start": "146800",
    "end": "148760"
  },
  {
    "text": "features your notice that we're not",
    "start": "148760",
    "end": "150400"
  },
  {
    "text": "using the most recent version of axom",
    "start": "150400",
    "end": "152800"
  },
  {
    "text": "and that's intentional version 0.7",
    "start": "152800",
    "end": "155480"
  },
  {
    "text": "brought some breaking changes which",
    "start": "155480",
    "end": "157120"
  },
  {
    "text": "socket iio oxide has yet to implement if",
    "start": "157120",
    "end": "159680"
  },
  {
    "text": "you're watching this video in the future",
    "start": "159680",
    "end": "161319"
  },
  {
    "text": "then that may be resolved so please",
    "start": "161319",
    "end": "163239"
  },
  {
    "text": "check the documentation with our",
    "start": "163239",
    "end": "165239"
  },
  {
    "text": "dependencies added we can now head on",
    "start": "165239",
    "end": "166800"
  },
  {
    "text": "over to our main. RS file and begin",
    "start": "166800",
    "end": "168840"
  },
  {
    "text": "implementing our server first remove the",
    "start": "168840",
    "end": "171440"
  },
  {
    "text": "hello world from the main function next",
    "start": "171440",
    "end": "173400"
  },
  {
    "text": "add in the following lines to convert",
    "start": "173400",
    "end": "175040"
  },
  {
    "text": "our main function into an asynchronous",
    "start": "175040",
    "end": "177080"
  },
  {
    "text": "one using the Tokyo runtime we'll also",
    "start": "177080",
    "end": "179239"
  },
  {
    "text": "set the return type to be a result and",
    "start": "179239",
    "end": "181519"
  },
  {
    "text": "return okay after that let's go ahead",
    "start": "181519",
    "end": "183560"
  },
  {
    "text": "and set up logging with the tracing",
    "start": "183560",
    "end": "185000"
  },
  {
    "text": "subscriber followed by setting up our",
    "start": "185000",
    "end": "186959"
  },
  {
    "text": "web server which we're going to set to",
    "start": "186959",
    "end": "188480"
  },
  {
    "text": "run on Port 3000 we also have a basic",
    "start": "188480",
    "end": "191360"
  },
  {
    "text": "HTTP Handler for the SL path which is",
    "start": "191360",
    "end": "193599"
  },
  {
    "text": "just going to return hello world if we",
    "start": "193599",
    "end": "195760"
  },
  {
    "text": "build and run this code we should be",
    "start": "195760",
    "end": "196959"
  },
  {
    "text": "able to hit the server with a simple",
    "start": "196959",
    "end": "198599"
  },
  {
    "text": "curl request now we can move on to",
    "start": "198599",
    "end": "200920"
  },
  {
    "text": "setting up socket IO to do so add in the",
    "start": "200920",
    "end": "203519"
  },
  {
    "text": "following used declaration for the",
    "start": "203519",
    "end": "205200"
  },
  {
    "text": "socket ref and socket IO types then",
    "start": "205200",
    "end": "207560"
  },
  {
    "text": "we're going to Define our connection",
    "start": "207560",
    "end": "208879"
  },
  {
    "text": "Handler this is is going to be an async",
    "start": "208879",
    "end": "210560"
  },
  {
    "text": "function called connect which will",
    "start": "210560",
    "end": "212040"
  },
  {
    "text": "provide a socket reference all we're",
    "start": "212040",
    "end": "214080"
  },
  {
    "text": "going to do is log that we received a",
    "start": "214080",
    "end": "215680"
  },
  {
    "text": "connection back in our main function",
    "start": "215680",
    "end": "217599"
  },
  {
    "text": "let's call the new layer method of the",
    "start": "217599",
    "end": "219360"
  },
  {
    "text": "socket IO type to create both a tower",
    "start": "219360",
    "end": "221480"
  },
  {
    "text": "layer and an instance of socket.io we'll",
    "start": "221480",
    "end": "223920"
  },
  {
    "text": "then pass in the connect Handler to the",
    "start": "223920",
    "end": "225720"
  },
  {
    "text": "sln namespace of the I/O instance lastly",
    "start": "225720",
    "end": "228760"
  },
  {
    "text": "all we need to do is provide this layer",
    "start": "228760",
    "end": "230280"
  },
  {
    "text": "to our axom router it's really this easy",
    "start": "230280",
    "end": "233040"
  },
  {
    "text": "to get set up let's go ahead and test",
    "start": "233040",
    "end": "235599"
  },
  {
    "text": "this out to do so I'm using the socket",
    "start": "235599",
    "end": "238200"
  },
  {
    "text": "IO CLI which you can can install using",
    "start": "238200",
    "end": "240480"
  },
  {
    "text": "mpm once installed go ahead and run the",
    "start": "240480",
    "end": "242959"
  },
  {
    "text": "server using the cargo run command and",
    "start": "242959",
    "end": "244959"
  },
  {
    "text": "then you can connect using the same",
    "start": "244959",
    "end": "246280"
  },
  {
    "text": "command as I am on screen if everything",
    "start": "246280",
    "end": "248599"
  },
  {
    "text": "is set up correctly you should see the",
    "start": "248599",
    "end": "250079"
  },
  {
    "text": "server loged to STD out whilst the CLI",
    "start": "250079",
    "end": "253000"
  },
  {
    "text": "is good for a quick test it's not the",
    "start": "253000",
    "end": "255079"
  },
  {
    "text": "best way to really show the full",
    "start": "255079",
    "end": "256600"
  },
  {
    "text": "potential of socket.io therefore to go",
    "start": "256600",
    "end": "259040"
  },
  {
    "text": "along with this video I've created a",
    "start": "259040",
    "end": "260479"
  },
  {
    "text": "front end in react this front end is",
    "start": "260479",
    "end": "262840"
  },
  {
    "text": "pretty simple allowing you to join and",
    "start": "262840",
    "end": "264560"
  },
  {
    "text": "send messages to a number of language",
    "start": "264560",
    "end": "266400"
  },
  {
    "text": "specific rooms you can clone it down",
    "start": "266400",
    "end": "268320"
  },
  {
    "text": "using the following command",
    "start": "268320",
    "end": "270160"
  },
  {
    "text": "once downloaded you'll need to make sure",
    "start": "270160",
    "end": "271639"
  },
  {
    "text": "you have node version 18 installed and",
    "start": "271639",
    "end": "273600"
  },
  {
    "text": "then you can install the dependencies",
    "start": "273600",
    "end": "275000"
  },
  {
    "text": "using the mpm install command once",
    "start": "275000",
    "end": "277600"
  },
  {
    "text": "they're finished installing you can then",
    "start": "277600",
    "end": "279080"
  },
  {
    "text": "run the app using the mpm Run Dev",
    "start": "279080",
    "end": "281160"
  },
  {
    "text": "command and then heading over to",
    "start": "281160",
    "end": "282600"
  },
  {
    "text": "localhost 5173 in your browser for the",
    "start": "282600",
    "end": "285400"
  },
  {
    "text": "rest of the video you shouldn't need to",
    "start": "285400",
    "end": "286800"
  },
  {
    "text": "make any more changes to the app as it",
    "start": "286800",
    "end": "288800"
  },
  {
    "text": "should start to work as we add",
    "start": "288800",
    "end": "290199"
  },
  {
    "text": "functionality to our server you'll",
    "start": "290199",
    "end": "292160"
  },
  {
    "text": "notice as you try to send a message to",
    "start": "292160",
    "end": "293919"
  },
  {
    "text": "any of the rooms then the text you",
    "start": "293919",
    "end": "295440"
  },
  {
    "text": "entered just disappears that's because",
    "start": "295440",
    "end": "297680"
  },
  {
    "text": "we're missing a few key handlers on our",
    "start": "297680",
    "end": "299759"
  },
  {
    "text": "server side so for our first goal we're",
    "start": "299759",
    "end": "302240"
  },
  {
    "text": "going to enable the basic functionality",
    "start": "302240",
    "end": "304240"
  },
  {
    "text": "of sending messages to our various rooms",
    "start": "304240",
    "end": "306919"
  },
  {
    "text": "before we can do that however we have a",
    "start": "306919",
    "end": "308840"
  },
  {
    "text": "slight issue we need to resolve if you",
    "start": "308840",
    "end": "311639"
  },
  {
    "text": "open up the console in your web browser",
    "start": "311639",
    "end": "313560"
  },
  {
    "text": "you'll see we're getting a number of",
    "start": "313560",
    "end": "314680"
  },
  {
    "text": "failures when socket.io is trying to",
    "start": "314680",
    "end": "316560"
  },
  {
    "text": "connect this is due to cause the natural",
    "start": "316560",
    "end": "319360"
  },
  {
    "text": "predator of a web developer in order for",
    "start": "319360",
    "end": "322160"
  },
  {
    "text": "socket.io to work we're going to need to",
    "start": "322160",
    "end": "323960"
  },
  {
    "text": "fix it to enable it let's jump back on",
    "start": "323960",
    "end": "325960"
  },
  {
    "text": "over to our cargo. tumble file and add",
    "start": "325960",
    "end": "327840"
  },
  {
    "text": "in the following dependencies again make",
    "start": "327840",
    "end": "330000"
  },
  {
    "text": "sure to pay attention to which version",
    "start": "330000",
    "end": "331440"
  },
  {
    "text": "I'm using in this video with our",
    "start": "331440",
    "end": "333440"
  },
  {
    "text": "dependencies added let's head on over to",
    "start": "333440",
    "end": "335080"
  },
  {
    "text": "our main. RS function and specify some",
    "start": "335080",
    "end": "337120"
  },
  {
    "text": "used definitions then scroll down to",
    "start": "337120",
    "end": "339319"
  },
  {
    "text": "where we specified the layer for our app",
    "start": "339319",
    "end": "341280"
  },
  {
    "text": "router by adding in the following lines",
    "start": "341280",
    "end": "343639"
  },
  {
    "text": "We'll add a new layer which will also",
    "start": "343639",
    "end": "345160"
  },
  {
    "text": "check and handle CES for us now if we",
    "start": "345160",
    "end": "347639"
  },
  {
    "text": "run this code and head back on over to",
    "start": "347639",
    "end": "349319"
  },
  {
    "text": "our Chaple application the socket.io",
    "start": "349319",
    "end": "351440"
  },
  {
    "text": "client should connect with no problem",
    "start": "351440",
    "end": "353199"
  },
  {
    "text": "you can confirm this both in the server",
    "start": "353199",
    "end": "355120"
  },
  {
    "text": "logs and in the browser JavaScript",
    "start": "355120",
    "end": "357240"
  },
  {
    "text": "console with our connection now working",
    "start": "357240",
    "end": "359520"
  },
  {
    "text": "the next thing to do is to handle any",
    "start": "359520",
    "end": "361240"
  },
  {
    "text": "messages when the send button is pressed",
    "start": "361240",
    "end": "363400"
  },
  {
    "text": "on the chat form the client emits a",
    "start": "363400",
    "end": "365520"
  },
  {
    "text": "message event on the socket.io",
    "start": "365520",
    "end": "367160"
  },
  {
    "text": "connection therefore in our server we",
    "start": "367160",
    "end": "369479"
  },
  {
    "text": "need to handle this event and admit it",
    "start": "369479",
    "end": "371280"
  },
  {
    "text": "back to the room it came from to achieve",
    "start": "371280",
    "end": "373360"
  },
  {
    "text": "this head back on over to our main. RS",
    "start": "373360",
    "end": "375440"
  },
  {
    "text": "file first we're going to add another Ed",
    "start": "375440",
    "end": "377639"
  },
  {
    "text": "definition for an extract type called",
    "start": "377639",
    "end": "379680"
  },
  {
    "text": "Data this is used to extract data from",
    "start": "379680",
    "end": "382080"
  },
  {
    "text": "the actual emit event next we want to",
    "start": "382080",
    "end": "384160"
  },
  {
    "text": "add in a Handler for the message event",
    "start": "384160",
    "end": "386280"
  },
  {
    "text": "type we'll want to do this in the",
    "start": "386280",
    "end": "388080"
  },
  {
    "text": "onconnect Handler using the on method of",
    "start": "388080",
    "end": "390120"
  },
  {
    "text": "the socket reference for the closure",
    "start": "390120",
    "end": "392240"
  },
  {
    "text": "first specify the socket reference and",
    "start": "392240",
    "end": "394360"
  },
  {
    "text": "then Define a data type of value which",
    "start": "394360",
    "end": "396800"
  },
  {
    "text": "will contain the arguments of our given",
    "start": "396800",
    "end": "398560"
  },
  {
    "text": "Amit event inside of this Handler we'll",
    "start": "398560",
    "end": "400639"
  },
  {
    "text": "just log the data value at first we'll",
    "start": "400639",
    "end": "402960"
  },
  {
    "text": "also want to specify a used definition",
    "start": "402960",
    "end": "405080"
  },
  {
    "text": "for the Ser Json value which is the",
    "start": "405080",
    "end": "407479"
  },
  {
    "text": "value type we're extracting our data",
    "start": "407479",
    "end": "409160"
  },
  {
    "text": "into now if we run this code we can head",
    "start": "409160",
    "end": "411400"
  },
  {
    "text": "back over to the browser and see if this",
    "start": "411400",
    "end": "413120"
  },
  {
    "text": "works when we type out a message and",
    "start": "413120",
    "end": "415080"
  },
  {
    "text": "press send you should see the message",
    "start": "415080",
    "end": "416720"
  },
  {
    "text": "appear in the server logs so far so good",
    "start": "416720",
    "end": "419240"
  },
  {
    "text": "while whil we're here let's make a small",
    "start": "419240",
    "end": "420800"
  },
  {
    "text": "Improvement to the way that we're",
    "start": "420800",
    "end": "421960"
  },
  {
    "text": "passing data if you remember we're using",
    "start": "421960",
    "end": "424160"
  },
  {
    "text": "the Sur Json value type however it's a",
    "start": "424160",
    "end": "426960"
  },
  {
    "text": "better practice to use our own defined",
    "start": "426960",
    "end": "429120"
  },
  {
    "text": "struct in order to extract the data into",
    "start": "429120",
    "end": "431599"
  },
  {
    "text": "to do this let's define a new struct",
    "start": "431599",
    "end": "433360"
  },
  {
    "text": "type called message in which will",
    "start": "433360",
    "end": "435039"
  },
  {
    "text": "contain both a text and room field then",
    "start": "435039",
    "end": "437479"
  },
  {
    "text": "make sure to add a derive Macro for both",
    "start": "437479",
    "end": "439680"
  },
  {
    "text": "the debug and the serde deserialized",
    "start": "439680",
    "end": "442120"
  },
  {
    "text": "types we can then replace the cjson",
    "start": "442120",
    "end": "444479"
  },
  {
    "text": "value type of our data extractor with",
    "start": "444479",
    "end": "446199"
  },
  {
    "text": "our new message instruct this provides",
    "start": "446199",
    "end": "448759"
  },
  {
    "text": "us with some dat type safety when",
    "start": "448759",
    "end": "450160"
  },
  {
    "text": "dealing with inbound events now if we",
    "start": "450160",
    "end": "452240"
  },
  {
    "text": "run and test this code again you should",
    "start": "452240",
    "end": "453720"
  },
  {
    "text": "see that everything is working as it was",
    "start": "453720",
    "end": "455440"
  },
  {
    "text": "before but we're now using our own",
    "start": "455440",
    "end": "456960"
  },
  {
    "text": "defined type instead the next step is to",
    "start": "456960",
    "end": "459560"
  },
  {
    "text": "emit this message back to the room it",
    "start": "459560",
    "end": "461280"
  },
  {
    "text": "came from to do this we first need to",
    "start": "461280",
    "end": "463240"
  },
  {
    "text": "add another dependency into our cargo.",
    "start": "463240",
    "end": "465240"
  },
  {
    "text": "toml this is the Chrono dependency which",
    "start": "465240",
    "end": "467879"
  },
  {
    "text": "we're going to use to generate a Tim",
    "start": "467879",
    "end": "469240"
  },
  {
    "text": "stamp for when the message was received",
    "start": "469240",
    "end": "471199"
  },
  {
    "text": "once that's done we can head back on",
    "start": "471199",
    "end": "472440"
  },
  {
    "text": "over to our code and Define a new struct",
    "start": "472440",
    "end": "474800"
  },
  {
    "text": "I'm going to call this message out and",
    "start": "474800",
    "end": "476199"
  },
  {
    "text": "it's going to contain all the",
    "start": "476199",
    "end": "477120"
  },
  {
    "text": "information we want to send back to our",
    "start": "477120",
    "end": "478919"
  },
  {
    "text": "clients",
    "start": "478919",
    "end": "479840"
  },
  {
    "text": "this will be the actual message itself",
    "start": "479840",
    "end": "481479"
  },
  {
    "text": "the user who sent it and the timestamp",
    "start": "481479",
    "end": "483360"
  },
  {
    "text": "for when we received it we're using the",
    "start": "483360",
    "end": "485319"
  },
  {
    "text": "server to generate this Tim stamp",
    "start": "485319",
    "end": "486879"
  },
  {
    "text": "because you can never truly trust the",
    "start": "486879",
    "end": "488560"
  },
  {
    "text": "client the last thing to do in our type",
    "start": "488560",
    "end": "490440"
  },
  {
    "text": "definition is to derive The Sur",
    "start": "490440",
    "end": "492240"
  },
  {
    "text": "serialized macro then we can create an",
    "start": "492240",
    "end": "494840"
  },
  {
    "text": "instance of this type in our on message",
    "start": "494840",
    "end": "496560"
  },
  {
    "text": "Handler with our instance created we",
    "start": "496560",
    "end": "498720"
  },
  {
    "text": "then need to send it back to the room",
    "start": "498720",
    "end": "500120"
  },
  {
    "text": "that it came from we can do this using",
    "start": "500120",
    "end": "502080"
  },
  {
    "text": "the within method of the socket",
    "start": "502080",
    "end": "503720"
  },
  {
    "text": "reference passing it in the room value",
    "start": "503720",
    "end": "505639"
  },
  {
    "text": "that we received in the event this then",
    "start": "505639",
    "end": "507840"
  },
  {
    "text": "provides an emit method we can use to",
    "start": "507840",
    "end": "509599"
  },
  {
    "text": "send an event to all sockets that have",
    "start": "509599",
    "end": "511240"
  },
  {
    "text": "joined that room now if we redeploy this",
    "start": "511240",
    "end": "513719"
  },
  {
    "text": "and set up our chat app we can go ahead",
    "start": "513719",
    "end": "515320"
  },
  {
    "text": "and see if this works which it does not",
    "start": "515320",
    "end": "518320"
  },
  {
    "text": "and that's because on the server side",
    "start": "518320",
    "end": "519719"
  },
  {
    "text": "we've not yet joined the socket to the",
    "start": "519719",
    "end": "521360"
  },
  {
    "text": "room fortunately whenever we select a",
    "start": "521360",
    "end": "523360"
  },
  {
    "text": "new room on the browser we actually emit",
    "start": "523360",
    "end": "525080"
  },
  {
    "text": "a join event to the server so all we",
    "start": "525080",
    "end": "527279"
  },
  {
    "text": "need to do is add in a Handler on our",
    "start": "527279",
    "end": "529200"
  },
  {
    "text": "server the data for this Handler will",
    "start": "529200",
    "end": "531040"
  },
  {
    "text": "just be a simple string which will",
    "start": "531040",
    "end": "532800"
  },
  {
    "text": "represent the name of the room that the",
    "start": "532800",
    "end": "534399"
  },
  {
    "text": "client is attempting to join we can then",
    "start": "534399",
    "end": "536399"
  },
  {
    "text": "log this out in the actual closure the",
    "start": "536399",
    "end": "538600"
  },
  {
    "text": "next line calls the Lal method on the",
    "start": "538600",
    "end": "540480"
  },
  {
    "text": "socket reference which will remove the",
    "start": "540480",
    "end": "542200"
  },
  {
    "text": "client from any existing rooms this is",
    "start": "542200",
    "end": "544680"
  },
  {
    "text": "to ensure that the client is only a",
    "start": "544680",
    "end": "546320"
  },
  {
    "text": "member of one room at a time All That",
    "start": "546320",
    "end": "548640"
  },
  {
    "text": "Remains is to call the join method on",
    "start": "548640",
    "end": "550320"
  },
  {
    "text": "the socket passing in the room's name",
    "start": "550320",
    "end": "552399"
  },
  {
    "text": "now if we rerun this code and head back",
    "start": "552399",
    "end": "554120"
  },
  {
    "text": "on over to our browser we'll see a",
    "start": "554120",
    "end": "555839"
  },
  {
    "text": "message appear in the chat whenever we",
    "start": "555839",
    "end": "557360"
  },
  {
    "text": "send one not only that we'll also see",
    "start": "557360",
    "end": "559360"
  },
  {
    "text": "the messages sent by other users whilst",
    "start": "559360",
    "end": "561320"
  },
  {
    "text": "we're in the same room as them and if we",
    "start": "561320",
    "end": "563279"
  },
  {
    "text": "join a different room then we can no",
    "start": "563279",
    "end": "564880"
  },
  {
    "text": "longer see them all in all this means",
    "start": "564880",
    "end": "566839"
  },
  {
    "text": "our socket IO server is working as",
    "start": "566839",
    "end": "568760"
  },
  {
    "text": "expected it this is a pretty simple",
    "start": "568760",
    "end": "571079"
  },
  {
    "text": "example to get set up and running and",
    "start": "571079",
    "end": "573000"
  },
  {
    "text": "hopefully it shows how easy it is to use",
    "start": "573000",
    "end": "574920"
  },
  {
    "text": "the rust implementation that being said",
    "start": "574920",
    "end": "577680"
  },
  {
    "text": "there are a couple of advanced features",
    "start": "577680",
    "end": "579519"
  },
  {
    "text": "that I think are worth mentioning the",
    "start": "579519",
    "end": "581600"
  },
  {
    "text": "first is using socket.io in any of your",
    "start": "581600",
    "end": "584040"
  },
  {
    "text": "HTTP handlers with axom this is pretty",
    "start": "584040",
    "end": "586880"
  },
  {
    "text": "simple to do you can pass the socket IO",
    "start": "586880",
    "end": "589079"
  },
  {
    "text": "instance as part of your state using the",
    "start": "589079",
    "end": "591279"
  },
  {
    "text": "with State method then in an HTTP",
    "start": "591279",
    "end": "594120"
  },
  {
    "text": "Handler you can easily extract this out",
    "start": "594120",
    "end": "596160"
  },
  {
    "text": "and use it to send any events to",
    "start": "596160",
    "end": "597800"
  },
  {
    "text": "Connected clients now now if we run our",
    "start": "597800",
    "end": "599920"
  },
  {
    "text": "server connect to it using the socket IO",
    "start": "599920",
    "end": "601959"
  },
  {
    "text": "CLI and send a request to the /hello",
    "start": "601959",
    "end": "604360"
  },
  {
    "text": "mpoint we'll receive an event on our",
    "start": "604360",
    "end": "606440"
  },
  {
    "text": "socket IO Connection by doing this",
    "start": "606440",
    "end": "608480"
  },
  {
    "text": "you're able to send real-time events to",
    "start": "608480",
    "end": "610440"
  },
  {
    "text": "websocket clients when handling HTTP",
    "start": "610440",
    "end": "613120"
  },
  {
    "text": "events the second Advanced use case is",
    "start": "613120",
    "end": "615720"
  },
  {
    "text": "handling state within the socket.io",
    "start": "615720",
    "end": "617519"
  },
  {
    "text": "connections Believe It or Not State",
    "start": "617519",
    "end": "619440"
  },
  {
    "text": "handling was only added as I was filming",
    "start": "619440",
    "end": "621600"
  },
  {
    "text": "this video and prior to this the only",
    "start": "621600",
    "end": "623839"
  },
  {
    "text": "way to share State across multiple",
    "start": "623839",
    "end": "625279"
  },
  {
    "text": "sockets was to use a global one cell as",
    "start": "625279",
    "end": "627800"
  },
  {
    "text": "a sort of Singleton pattern which even",
    "start": "627800",
    "end": "629920"
  },
  {
    "text": "the author admitted wasn't great but",
    "start": "629920",
    "end": "632079"
  },
  {
    "text": "with version 0.8 State handling works",
    "start": "632079",
    "end": "634519"
  },
  {
    "text": "very similar to how it does in axom",
    "start": "634519",
    "end": "636600"
  },
  {
    "text": "let's demonstrate this by storing",
    "start": "636600",
    "end": "638040"
  },
  {
    "text": "historical messages for each room and",
    "start": "638040",
    "end": "639800"
  },
  {
    "text": "then sending them to a user when they",
    "start": "639800",
    "end": "641399"
  },
  {
    "text": "join to do so we first need to enable",
    "start": "641399",
    "end": "643680"
  },
  {
    "text": "the state feature flag of the socket IO",
    "start": "643680",
    "end": "645720"
  },
  {
    "text": "oxide dependency in the cargo. tumml",
    "start": "645720",
    "end": "648120"
  },
  {
    "text": "afterwards we're ready to Define our",
    "start": "648120",
    "end": "649680"
  },
  {
    "text": "state let's do so in a new file called",
    "start": "649680",
    "end": "651959"
  },
  {
    "text": "state. RS at the top add in the two",
    "start": "651959",
    "end": "654519"
  },
  {
    "text": "following use declarations and then",
    "start": "654519",
    "end": "656399"
  },
  {
    "text": "Define a new struct type called message",
    "start": "656399",
    "end": "658560"
  },
  {
    "text": "which is basically the same as our",
    "start": "658560",
    "end": "660120"
  },
  {
    "text": "message out type that we're already",
    "start": "660120",
    "end": "661560"
  },
  {
    "text": "using next Define a new type Alias",
    "start": "661560",
    "end": "663920"
  },
  {
    "text": "called Room Store which will represent a",
    "start": "663920",
    "end": "665760"
  },
  {
    "text": "hash map storing the room name as the",
    "start": "665760",
    "end": "667480"
  },
  {
    "text": "key and a VC deck of messages as the",
    "start": "667480",
    "end": "669959"
  },
  {
    "text": "value now we're going to Define our",
    "start": "669959",
    "end": "671680"
  },
  {
    "text": "actual state struct which I'm going to",
    "start": "671680",
    "end": "673639"
  },
  {
    "text": "call message store this type will",
    "start": "673639",
    "end": "675279"
  },
  {
    "text": "contain a property called messages which",
    "start": "675279",
    "end": "676839"
  },
  {
    "text": "will wrap an instance of The Room Store",
    "start": "676839",
    "end": "678639"
  },
  {
    "text": "in a Tokyo read write lock this is to",
    "start": "678639",
    "end": "681120"
  },
  {
    "text": "provide us with thread safety for our",
    "start": "681120",
    "end": "682839"
  },
  {
    "text": "mutable data structure let's also derive",
    "start": "682839",
    "end": "685279"
  },
  {
    "text": "the default macro in order to make it",
    "start": "685279",
    "end": "686880"
  },
  {
    "text": "easier to initialize lastly let's a",
    "start": "686880",
    "end": "689200"
  },
  {
    "text": "couple of methods to both insert a",
    "start": "689200",
    "end": "690680"
  },
  {
    "text": "message into the data store and pull out",
    "start": "690680",
    "end": "692760"
  },
  {
    "text": "the messages given a room key in our",
    "start": "692760",
    "end": "694839"
  },
  {
    "text": "insert method you'll notice we're",
    "start": "694839",
    "end": "696160"
  },
  {
    "text": "truncating the messages to length 20",
    "start": "696160",
    "end": "698240"
  },
  {
    "text": "which means that only the 20 most recent",
    "start": "698240",
    "end": "700200"
  },
  {
    "text": "messages will remain with our state",
    "start": "700200",
    "end": "702480"
  },
  {
    "text": "defined we can now move on to using it",
    "start": "702480",
    "end": "704480"
  },
  {
    "text": "within our socket.io handlers back in",
    "start": "704480",
    "end": "706680"
  },
  {
    "text": "our main. RS file let's import the new",
    "start": "706680",
    "end": "708839"
  },
  {
    "text": "state module and also add the state type",
    "start": "708839",
    "end": "710720"
  },
  {
    "text": "to the socket iio use declaration then",
    "start": "710720",
    "end": "713360"
  },
  {
    "text": "head down into the main function where",
    "start": "713360",
    "end": "714959"
  },
  {
    "text": "we're going to create a new instance of",
    "start": "714959",
    "end": "716680"
  },
  {
    "text": "our message store which we'll use across",
    "start": "716680",
    "end": "718639"
  },
  {
    "text": "our hand handers to do so we need to",
    "start": "718639",
    "end": "720399"
  },
  {
    "text": "change the way that we're creating our",
    "start": "720399",
    "end": "721880"
  },
  {
    "text": "socket iio layer let's replace the new",
    "start": "721880",
    "end": "724320"
  },
  {
    "text": "layer method Coe with the following code",
    "start": "724320",
    "end": "726519"
  },
  {
    "text": "which creates a socket.io builder passes",
    "start": "726519",
    "end": "728600"
  },
  {
    "text": "in our state and then builds the layer",
    "start": "728600",
    "end": "730720"
  },
  {
    "text": "now we can use the state in our handlers",
    "start": "730720",
    "end": "733040"
  },
  {
    "text": "if we jump to the on message Handler",
    "start": "733040",
    "end": "735120"
  },
  {
    "text": "let's define a new extractor for our",
    "start": "735120",
    "end": "736959"
  },
  {
    "text": "state in the closures arguments then",
    "start": "736959",
    "end": "739040"
  },
  {
    "text": "inside let's replace the message out",
    "start": "739040",
    "end": "740839"
  },
  {
    "text": "type with the new state message type and",
    "start": "740839",
    "end": "742760"
  },
  {
    "text": "then call the insert message of our",
    "start": "742760",
    "end": "744519"
  },
  {
    "text": "message store as this is an async",
    "start": "744519",
    "end": "746639"
  },
  {
    "text": "function we'll need to call it a wait",
    "start": "746639",
    "end": "748320"
  },
  {
    "text": "and also turn closure into an",
    "start": "748320",
    "end": "749839"
  },
  {
    "text": "asynchronous one using the async move",
    "start": "749839",
    "end": "752320"
  },
  {
    "text": "keywords once that's done let's remove",
    "start": "752320",
    "end": "754199"
  },
  {
    "text": "the message outst struct as we're no",
    "start": "754199",
    "end": "755839"
  },
  {
    "text": "longer using it next we need to pull the",
    "start": "755839",
    "end": "757920"
  },
  {
    "text": "messages out of our store in the join",
    "start": "757920",
    "end": "759680"
  },
  {
    "text": "Handler first add in the state extractor",
    "start": "759680",
    "end": "762160"
  },
  {
    "text": "to the closure definition and then call",
    "start": "762160",
    "end": "763880"
  },
  {
    "text": "the get method of the message store",
    "start": "763880",
    "end": "766199"
  },
  {
    "text": "again this is an async function so we",
    "start": "766199",
    "end": "767920"
  },
  {
    "text": "need to convert our closure to also be",
    "start": "767920",
    "end": "769639"
  },
  {
    "text": "asynchronous now All That Remains is to",
    "start": "769639",
    "end": "771920"
  },
  {
    "text": "emit these messages back to our joining",
    "start": "771920",
    "end": "773600"
  },
  {
    "text": "socket the client already expects a",
    "start": "773600",
    "end": "775639"
  },
  {
    "text": "messages event which accepts an object",
    "start": "775639",
    "end": "777880"
  },
  {
    "text": "that has an array of messages inside",
    "start": "777880",
    "end": "780199"
  },
  {
    "text": "therefore in order to emit this message",
    "start": "780199",
    "end": "781800"
  },
  {
    "text": "we'll need to define a new serializable",
    "start": "781800",
    "end": "783720"
  },
  {
    "text": "type to send up with that complete All",
    "start": "783720",
    "end": "785839"
  },
  {
    "text": "That Remains is to run our code and test",
    "start": "785839",
    "end": "787680"
  },
  {
    "text": "it out if we send a couple of messages",
    "start": "787680",
    "end": "789920"
  },
  {
    "text": "in the general Channel and then navigate",
    "start": "789920",
    "end": "791839"
  },
  {
    "text": "away when we've rejoined the room the",
    "start": "791839",
    "end": "793639"
  },
  {
    "text": "server will send us our previous",
    "start": "793639",
    "end": "795199"
  },
  {
    "text": "messages we can also test this with a",
    "start": "795199",
    "end": "797279"
  },
  {
    "text": "different browser and see that we get",
    "start": "797279",
    "end": "798760"
  },
  {
    "text": "the exact same behavior with that we've",
    "start": "798760",
    "end": "800760"
  },
  {
    "text": "managed to add in state handling for our",
    "start": "800760",
    "end": "802639"
  },
  {
    "text": "project in a production system this",
    "start": "802639",
    "end": "804720"
  },
  {
    "text": "would be replaced with an actual",
    "start": "804720",
    "end": "805959"
  },
  {
    "text": "database connection as will obviously",
    "start": "805959",
    "end": "807720"
  },
  {
    "text": "lose the data when the server restarts",
    "start": "807720",
    "end": "809959"
  },
  {
    "text": "but the underlying approach should still",
    "start": "809959",
    "end": "811519"
  },
  {
    "text": "be the same and that concludes this",
    "start": "811519",
    "end": "813760"
  },
  {
    "text": "brief overview of socket.io oxide",
    "start": "813760",
    "end": "816079"
  },
  {
    "text": "overall I'm pretty excited about this",
    "start": "816079",
    "end": "817920"
  },
  {
    "text": "project and the author has done some",
    "start": "817920",
    "end": "819519"
  },
  {
    "text": "amazing work more and more I find myself",
    "start": "819519",
    "end": "822000"
  },
  {
    "text": "writing service I code in Rust and this",
    "start": "822000",
    "end": "824320"
  },
  {
    "text": "project is yet another tool to enable me",
    "start": "824320",
    "end": "826639"
  },
  {
    "text": "still I'd love to know what you think",
    "start": "826639",
    "end": "828519"
  },
  {
    "text": "has this reignited any inspiration to",
    "start": "828519",
    "end": "830440"
  },
  {
    "text": "use socket.io in the future or perhaps",
    "start": "830440",
    "end": "832399"
  },
  {
    "text": "you'll just stick with good oldfashioned",
    "start": "832399",
    "end": "834120"
  },
  {
    "text": "websockets maybe that's another rust",
    "start": "834120",
    "end": "836320"
  },
  {
    "text": "video I can do in the future either way",
    "start": "836320",
    "end": "838920"
  },
  {
    "text": "thank you for watching and I'll see you",
    "start": "838920",
    "end": "840279"
  },
  {
    "text": "on the next one",
    "start": "840279",
    "end": "843880"
  }
]