[
  {
    "start": "0",
    "end": "12000"
  },
  {
    "text": "Tokyo is an asynchronous runtime for the",
    "start": "0",
    "end": "2520"
  },
  {
    "text": "rust programming language that provides",
    "start": "2520",
    "end": "4140"
  },
  {
    "text": "the building blocks needed for writing",
    "start": "4140",
    "end": "5640"
  },
  {
    "text": "efficient and scalable Network",
    "start": "5640",
    "end": "6960"
  },
  {
    "text": "applications",
    "start": "6960",
    "end": "8639"
  },
  {
    "text": "to get started with Tokyo we can create",
    "start": "8639",
    "end": "10740"
  },
  {
    "text": "a new project using cargo and add the",
    "start": "10740",
    "end": "12719"
  },
  {
    "start": "12000",
    "end": "106000"
  },
  {
    "text": "Tokyo crate to the cargo.tomel",
    "start": "12719",
    "end": "14880"
  },
  {
    "text": "with Tokyo installed we can create an",
    "start": "14880",
    "end": "16980"
  },
  {
    "text": "instance of the Tokyo runtime in our",
    "start": "16980",
    "end": "18420"
  },
  {
    "text": "main function next we call our run",
    "start": "18420",
    "end": "20760"
  },
  {
    "text": "function which returns a future we'll",
    "start": "20760",
    "end": "22859"
  },
  {
    "text": "discuss Futures in more detail later on",
    "start": "22859",
    "end": "24420"
  },
  {
    "text": "but you can think of them similar to",
    "start": "24420",
    "end": "25740"
  },
  {
    "text": "promises in node or other languages we",
    "start": "25740",
    "end": "28380"
  },
  {
    "text": "can then pass this future into the block",
    "start": "28380",
    "end": "30300"
  },
  {
    "text": "on function of the runtime",
    "start": "30300",
    "end": "32398"
  },
  {
    "text": "the future executes and calls the code",
    "start": "32399",
    "end": "34200"
  },
  {
    "text": "inside of the Run function which will",
    "start": "34200",
    "end": "35880"
  },
  {
    "text": "sleep for one second",
    "start": "35880",
    "end": "37739"
  },
  {
    "text": "pretty simple",
    "start": "37739",
    "end": "39660"
  },
  {
    "text": "this is a really basic example of using",
    "start": "39660",
    "end": "42059"
  },
  {
    "text": "the async and a weight keywords but",
    "start": "42059",
    "end": "44879"
  },
  {
    "text": "nothing much is happening here we could",
    "start": "44879",
    "end": "46860"
  },
  {
    "text": "have quite easily done this",
    "start": "46860",
    "end": "47820"
  },
  {
    "text": "synchronously let's add something else",
    "start": "47820",
    "end": "49739"
  },
  {
    "text": "to spice it up a little",
    "start": "49739",
    "end": "52140"
  },
  {
    "text": "now our run function is going to call",
    "start": "52140",
    "end": "54840"
  },
  {
    "text": "two other functions",
    "start": "54840",
    "end": "56640"
  },
  {
    "text": "first are sleeper function which is",
    "start": "56640",
    "end": "58680"
  },
  {
    "text": "basically the same code we had before",
    "start": "58680",
    "end": "60780"
  },
  {
    "text": "add our reader function which is loading",
    "start": "60780",
    "end": "63300"
  },
  {
    "text": "a data file reading to the end and",
    "start": "63300",
    "end": "65460"
  },
  {
    "text": "telling us how many bytes are in that",
    "start": "65460",
    "end": "66840"
  },
  {
    "text": "file",
    "start": "66840",
    "end": "68159"
  },
  {
    "text": "when we run this code we can see again",
    "start": "68159",
    "end": "70200"
  },
  {
    "text": "it's running synchronously nothing",
    "start": "70200",
    "end": "72240"
  },
  {
    "text": "special",
    "start": "72240",
    "end": "73260"
  },
  {
    "text": "let's make a change and actually wrap",
    "start": "73260",
    "end": "75060"
  },
  {
    "text": "these two functions in the join function",
    "start": "75060",
    "end": "76560"
  },
  {
    "text": "of the Tokyo module",
    "start": "76560",
    "end": "78420"
  },
  {
    "text": "in the output we can now see that both",
    "start": "78420",
    "end": "80759"
  },
  {
    "text": "functions occurred at the same time",
    "start": "80759",
    "end": "82860"
  },
  {
    "text": "AKA concurrently to further explain this",
    "start": "82860",
    "end": "85799"
  },
  {
    "text": "point let's go ahead and do this again",
    "start": "85799",
    "end": "87240"
  },
  {
    "text": "but calling the reader function 10 times",
    "start": "87240",
    "end": "89720"
  },
  {
    "text": "pretty cool",
    "start": "89720",
    "end": "91560"
  },
  {
    "text": "for reference here's how long this takes",
    "start": "91560",
    "end": "93479"
  },
  {
    "text": "if we perform this synchronously almost",
    "start": "93479",
    "end": "95460"
  },
  {
    "text": "double the amount of time due to the",
    "start": "95460",
    "end": "96900"
  },
  {
    "text": "lack of concurrency",
    "start": "96900",
    "end": "99240"
  },
  {
    "text": "so that's pretty great maybe we should",
    "start": "99240",
    "end": "101159"
  },
  {
    "text": "just be using Tokyo for everything right",
    "start": "101159",
    "end": "104119"
  },
  {
    "text": "well not exactly Tokyo is good for",
    "start": "104119",
    "end": "107820"
  },
  {
    "start": "106000",
    "end": "172000"
  },
  {
    "text": "non-blocking Io which is when an",
    "start": "107820",
    "end": "110040"
  },
  {
    "text": "application is waiting on operations",
    "start": "110040",
    "end": "111659"
  },
  {
    "text": "such as reading from a file or network",
    "start": "111659",
    "end": "114000"
  },
  {
    "text": "data however there are situations where",
    "start": "114000",
    "end": "116880"
  },
  {
    "text": "the bottleneck of an application is CPU",
    "start": "116880",
    "end": "119100"
  },
  {
    "text": "or performance bound",
    "start": "119100",
    "end": "120840"
  },
  {
    "text": "Tokyo uses a single thread for its main",
    "start": "120840",
    "end": "122939"
  },
  {
    "text": "event Loop therefore if any tasks are",
    "start": "122939",
    "end": "125460"
  },
  {
    "text": "performing heavy CPU based operations",
    "start": "125460",
    "end": "127680"
  },
  {
    "text": "this will actually slow down the other",
    "start": "127680",
    "end": "129780"
  },
  {
    "text": "asynchronous tasks that are running",
    "start": "129780",
    "end": "132420"
  },
  {
    "text": "to demonstrate this I've gone ahead and",
    "start": "132420",
    "end": "134340"
  },
  {
    "text": "added in a Fibonacci calculation to each",
    "start": "134340",
    "end": "136560"
  },
  {
    "text": "of the ridicules which is expensive on",
    "start": "136560",
    "end": "138660"
  },
  {
    "text": "the CPU by adding in this calculation",
    "start": "138660",
    "end": "140879"
  },
  {
    "text": "we've dramatically increased the runtime",
    "start": "140879",
    "end": "142920"
  },
  {
    "text": "of our application",
    "start": "142920",
    "end": "144720"
  },
  {
    "text": "fortunately there is a way to get the",
    "start": "144720",
    "end": "146459"
  },
  {
    "text": "performance back we can use the task",
    "start": "146459",
    "end": "148860"
  },
  {
    "text": "model of the Tokyo framework to sport a",
    "start": "148860",
    "end": "150780"
  },
  {
    "text": "task which will run in a different",
    "start": "150780",
    "end": "152099"
  },
  {
    "text": "thread",
    "start": "152099",
    "end": "154459"
  },
  {
    "text": "and just like that we're performing",
    "start": "154680",
    "end": "156480"
  },
  {
    "text": "again",
    "start": "156480",
    "end": "157500"
  },
  {
    "text": "oh I forgot to mention a little quality",
    "start": "157500",
    "end": "160500"
  },
  {
    "text": "of life Improvement",
    "start": "160500",
    "end": "162180"
  },
  {
    "text": "we can actually use the Tokyo main macro",
    "start": "162180",
    "end": "164280"
  },
  {
    "text": "instead of creating a new instance of",
    "start": "164280",
    "end": "166019"
  },
  {
    "text": "the runtime this turns our main function",
    "start": "166019",
    "end": "168180"
  },
  {
    "text": "into an async function that returns a",
    "start": "168180",
    "end": "170160"
  },
  {
    "text": "future",
    "start": "170160",
    "end": "170940"
  },
  {
    "text": "neat okay so now you're a master of",
    "start": "170940",
    "end": "173640"
  },
  {
    "start": "172000",
    "end": "279000"
  },
  {
    "text": "asynchronous rust it's probably time to",
    "start": "173640",
    "end": "175739"
  },
  {
    "text": "discuss Futures and how they differ from",
    "start": "175739",
    "end": "177900"
  },
  {
    "text": "promises",
    "start": "177900",
    "end": "179640"
  },
  {
    "text": "so it may not be very visible from the",
    "start": "179640",
    "end": "181440"
  },
  {
    "text": "code that we've written but we've been",
    "start": "181440",
    "end": "182580"
  },
  {
    "text": "interacting with the type known as",
    "start": "182580",
    "end": "183780"
  },
  {
    "text": "Futures this whole time",
    "start": "183780",
    "end": "185220"
  },
  {
    "text": "a future represents a computation that",
    "start": "185220",
    "end": "187080"
  },
  {
    "text": "will be completed in the future they are",
    "start": "187080",
    "end": "189360"
  },
  {
    "text": "the essential building blocks of",
    "start": "189360",
    "end": "190560"
  },
  {
    "text": "asynchronous code when compared to other",
    "start": "190560",
    "end": "192599"
  },
  {
    "text": "languages they are most like a promise",
    "start": "192599",
    "end": "194580"
  },
  {
    "text": "however with one major difference they",
    "start": "194580",
    "end": "197400"
  },
  {
    "text": "are lazy",
    "start": "197400",
    "end": "198659"
  },
  {
    "text": "this means they don't execute as soon as",
    "start": "198659",
    "end": "200700"
  },
  {
    "text": "you create them but instead only once",
    "start": "200700",
    "end": "202739"
  },
  {
    "text": "they are explicitly pulled by the Tokyo",
    "start": "202739",
    "end": "204720"
  },
  {
    "text": "runtime which is typically when the away",
    "start": "204720",
    "end": "206760"
  },
  {
    "text": "keyword is used",
    "start": "206760",
    "end": "208860"
  },
  {
    "text": "let's highlight this with an example",
    "start": "208860",
    "end": "211739"
  },
  {
    "text": "let's cool our sleeper function twice",
    "start": "211739",
    "end": "213659"
  },
  {
    "text": "using the await keyword each time",
    "start": "213659",
    "end": "216180"
  },
  {
    "text": "here we get a log output for each",
    "start": "216180",
    "end": "217980"
  },
  {
    "text": "execution of the function",
    "start": "217980",
    "end": "219720"
  },
  {
    "text": "now if we remove the await keyword from",
    "start": "219720",
    "end": "222840"
  },
  {
    "text": "the first lipical there's only a single",
    "start": "222840",
    "end": "224940"
  },
  {
    "text": "execution that takes place the first",
    "start": "224940",
    "end": "226739"
  },
  {
    "text": "execution never happens the compiler",
    "start": "226739",
    "end": "229319"
  },
  {
    "text": "does actually give us a warning which is",
    "start": "229319",
    "end": "230819"
  },
  {
    "text": "nice to see",
    "start": "230819",
    "end": "232019"
  },
  {
    "text": "whilst this might seem off there's a",
    "start": "232019",
    "end": "233879"
  },
  {
    "text": "good reason for this approach it",
    "start": "233879",
    "end": "235620"
  },
  {
    "text": "improves performance of the runtime as",
    "start": "235620",
    "end": "237480"
  },
  {
    "text": "it avoids having to constantly check",
    "start": "237480",
    "end": "239040"
  },
  {
    "text": "whether a future is ready to execute",
    "start": "239040",
    "end": "241799"
  },
  {
    "text": "well what if you want to execute the",
    "start": "241799",
    "end": "244019"
  },
  {
    "text": "future but no wait around for its",
    "start": "244019",
    "end": "245580"
  },
  {
    "text": "completion sort of like a fire and",
    "start": "245580",
    "end": "247680"
  },
  {
    "text": "forget",
    "start": "247680",
    "end": "248819"
  },
  {
    "text": "well we can do this using the Tokyo",
    "start": "248819",
    "end": "250739"
  },
  {
    "text": "spawn method",
    "start": "250739",
    "end": "253459"
  },
  {
    "text": "Futures are returned implicitly whenever",
    "start": "253680",
    "end": "256079"
  },
  {
    "text": "we use the async keyword which basically",
    "start": "256079",
    "end": "258720"
  },
  {
    "text": "acts as syntactical sugar it also allows",
    "start": "258720",
    "end": "261540"
  },
  {
    "text": "you to use the await keyword which can",
    "start": "261540",
    "end": "263940"
  },
  {
    "text": "only be called inside of an async",
    "start": "263940",
    "end": "265620"
  },
  {
    "text": "function",
    "start": "265620",
    "end": "266759"
  },
  {
    "text": "now that we've covered the basics of",
    "start": "266759",
    "end": "268320"
  },
  {
    "text": "Tokyo and Futures it's worth a brief",
    "start": "268320",
    "end": "270120"
  },
  {
    "text": "look at some of the other features that",
    "start": "270120",
    "end": "271440"
  },
  {
    "text": "the package provides I'll be doing more",
    "start": "271440",
    "end": "273419"
  },
  {
    "text": "in-depth videos on each of these in the",
    "start": "273419",
    "end": "275340"
  },
  {
    "text": "future so consider subscribing if you",
    "start": "275340",
    "end": "277620"
  },
  {
    "text": "don't want to miss them",
    "start": "277620",
    "end": "279120"
  },
  {
    "start": "279000",
    "end": "424000"
  },
  {
    "text": "the Tokyo sync module provides",
    "start": "279120",
    "end": "280740"
  },
  {
    "text": "functionality for communication and",
    "start": "280740",
    "end": "282120"
  },
  {
    "text": "synchronization across concurrent tasks",
    "start": "282120",
    "end": "284040"
  },
  {
    "text": "it provides both async counterparts to",
    "start": "284040",
    "end": "286259"
  },
  {
    "text": "the synchronization types of the",
    "start": "286259",
    "end": "287460"
  },
  {
    "text": "standard Library such as mutex read",
    "start": "287460",
    "end": "289800"
  },
  {
    "text": "write locks semaphores",
    "start": "289800",
    "end": "291720"
  },
  {
    "text": "and also provides some novel types used",
    "start": "291720",
    "end": "293940"
  },
  {
    "text": "for cross-task communication known as",
    "start": "293940",
    "end": "296040"
  },
  {
    "text": "channels these are similar to channels",
    "start": "296040",
    "end": "298139"
  },
  {
    "text": "that you would find in other languages",
    "start": "298139",
    "end": "299340"
  },
  {
    "text": "such as go but basically allow data to",
    "start": "299340",
    "end": "301560"
  },
  {
    "text": "be sent from one asynchronous task to",
    "start": "301560",
    "end": "303479"
  },
  {
    "text": "another",
    "start": "303479",
    "end": "304440"
  },
  {
    "text": "the net module provides low-level",
    "start": "304440",
    "end": "306479"
  },
  {
    "text": "Network Primitives for working with TCP",
    "start": "306479",
    "end": "308639"
  },
  {
    "text": "and UTP sockets asynchronously",
    "start": "308639",
    "end": "311400"
  },
  {
    "text": "some examples of the provided type are a",
    "start": "311400",
    "end": "313440"
  },
  {
    "text": "TCP listener for accepting TCP",
    "start": "313440",
    "end": "315600"
  },
  {
    "text": "connections as a server or a TCP socket",
    "start": "315600",
    "end": "318240"
  },
  {
    "text": "for making connections to the server",
    "start": "318240",
    "end": "321800"
  },
  {
    "text": "the Tokyo task module provides",
    "start": "321840",
    "end": "323759"
  },
  {
    "text": "asynchronous green threads green threads",
    "start": "323759",
    "end": "326160"
  },
  {
    "text": "are similar to operating system threads",
    "start": "326160",
    "end": "327900"
  },
  {
    "text": "but are much more lightweight and are",
    "start": "327900",
    "end": "329580"
  },
  {
    "text": "managed by the Tokyo runtime instead",
    "start": "329580",
    "end": "331500"
  },
  {
    "text": "these are similar to goes go routines",
    "start": "331500",
    "end": "333720"
  },
  {
    "text": "kotlin's co-routines or erlang or",
    "start": "333720",
    "end": "336180"
  },
  {
    "text": "Alexa's processors",
    "start": "336180",
    "end": "338100"
  },
  {
    "text": "the fs module provides asynchronous apis",
    "start": "338100",
    "end": "341100"
  },
  {
    "text": "for working with the file system",
    "start": "341100",
    "end": "342900"
  },
  {
    "text": "it includes functions for reading and",
    "start": "342900",
    "end": "344880"
  },
  {
    "text": "writing files as well as for managing",
    "start": "344880",
    "end": "346680"
  },
  {
    "text": "directories symbolic links and",
    "start": "346680",
    "end": "348600"
  },
  {
    "text": "permissions",
    "start": "348600",
    "end": "350340"
  },
  {
    "text": "the process module provides asynchronous",
    "start": "350340",
    "end": "352800"
  },
  {
    "text": "Process Management",
    "start": "352800",
    "end": "354000"
  },
  {
    "text": "it includes functions for spawning child",
    "start": "354000",
    "end": "355979"
  },
  {
    "text": "processes as well as communicating with",
    "start": "355979",
    "end": "357660"
  },
  {
    "text": "them through pipes using the process",
    "start": "357660",
    "end": "359759"
  },
  {
    "text": "module one can spawn other processes and",
    "start": "359759",
    "end": "362280"
  },
  {
    "text": "wait for them in an asynchronous",
    "start": "362280",
    "end": "363780"
  },
  {
    "text": "non-blocking manner",
    "start": "363780",
    "end": "365340"
  },
  {
    "text": "the signal module provides asynchronous",
    "start": "365340",
    "end": "367800"
  },
  {
    "text": "handling of operating system signals",
    "start": "367800",
    "end": "369479"
  },
  {
    "text": "such as interrupts allowing for graceful",
    "start": "369479",
    "end": "372300"
  },
  {
    "text": "termination of an application",
    "start": "372300",
    "end": "375120"
  },
  {
    "text": "the time module provides asynchronous",
    "start": "375120",
    "end": "377039"
  },
  {
    "text": "apis for working with time it includes",
    "start": "377039",
    "end": "379199"
  },
  {
    "text": "functions for delaying execution as well",
    "start": "379199",
    "end": "381120"
  },
  {
    "text": "as scheduling periodic tasks the module",
    "start": "381120",
    "end": "384240"
  },
  {
    "text": "also has support for setting timeouts on",
    "start": "384240",
    "end": "386100"
  },
  {
    "text": "Futures using the timeout function which",
    "start": "386100",
    "end": "388800"
  },
  {
    "text": "can be useful for cancellation of",
    "start": "388800",
    "end": "390900"
  },
  {
    "text": "long-running execution and the Tokyo",
    "start": "390900",
    "end": "394139"
  },
  {
    "text": "test macro provides the ability to test",
    "start": "394139",
    "end": "395819"
  },
  {
    "text": "asynchronous code concurrently",
    "start": "395819",
    "end": "398039"
  },
  {
    "text": "by using the macro with a test case",
    "start": "398039",
    "end": "399960"
  },
  {
    "text": "we're able to use the async and a weight",
    "start": "399960",
    "end": "401940"
  },
  {
    "text": "keyword with our test functions",
    "start": "401940",
    "end": "404460"
  },
  {
    "text": "with all of this functionality provided",
    "start": "404460",
    "end": "406380"
  },
  {
    "text": "by the Tokyo framework it's possible to",
    "start": "406380",
    "end": "408240"
  },
  {
    "text": "create i o based applications that are",
    "start": "408240",
    "end": "410039"
  },
  {
    "text": "both performant and scalable I hope this",
    "start": "410039",
    "end": "412440"
  },
  {
    "text": "video helped to encourage you to play",
    "start": "412440",
    "end": "413880"
  },
  {
    "text": "around with asynchronous programming in",
    "start": "413880",
    "end": "415919"
  },
  {
    "text": "Rust and inspired you for your next",
    "start": "415919",
    "end": "417840"
  },
  {
    "text": "project",
    "start": "417840",
    "end": "420139"
  }
]