[
  {
    "text": "as software developers we often have to",
    "start": "120",
    "end": "2120"
  },
  {
    "text": "deal with money and I don't mean the",
    "start": "2120",
    "end": "4000"
  },
  {
    "text": "millions of dollars that comes with",
    "start": "4000",
    "end": "5359"
  },
  {
    "text": "being a PHP developer let's be honest if",
    "start": "5359",
    "end": "8200"
  },
  {
    "text": "you ever want to own a sports car then",
    "start": "8200",
    "end": "9760"
  },
  {
    "text": "PHP is where the real money's at instead",
    "start": "9760",
    "end": "12519"
  },
  {
    "text": "I'm talking about the data",
    "start": "12519",
    "end": "13759"
  },
  {
    "text": "representation of money and how we store",
    "start": "13759",
    "end": "15599"
  },
  {
    "text": "it inside of a postgres database for",
    "start": "15599",
    "end": "18039"
  },
  {
    "text": "example let's say we have a database",
    "start": "18039",
    "end": "20080"
  },
  {
    "text": "table for storing courses and we want to",
    "start": "20080",
    "end": "22320"
  },
  {
    "text": "add a new column for storing the price",
    "start": "22320",
    "end": "24519"
  },
  {
    "text": "what type should we use believe it or",
    "start": "24519",
    "end": "26760"
  },
  {
    "text": "not this question is harder to answer",
    "start": "26760",
    "end": "28439"
  },
  {
    "text": "than it may seem especially if you've",
    "start": "28439",
    "end": "30439"
  },
  {
    "text": "never worked with money in a database",
    "start": "30439",
    "end": "32200"
  },
  {
    "text": "before so in this video we're going to",
    "start": "32200",
    "end": "34399"
  },
  {
    "text": "look at each of the data types you could",
    "start": "34399",
    "end": "35879"
  },
  {
    "text": "use in post Gres and why they may or may",
    "start": "35879",
    "end": "38320"
  },
  {
    "text": "not be a good choice the first data type",
    "start": "38320",
    "end": "41200"
  },
  {
    "text": "we're going to consider is perhaps the",
    "start": "41200",
    "end": "42760"
  },
  {
    "text": "most obvious the money type on First",
    "start": "42760",
    "end": "45440"
  },
  {
    "text": "Impressions this may seem like the",
    "start": "45440",
    "end": "47079"
  },
  {
    "text": "perfect type to use Case Closed if it",
    "start": "47079",
    "end": "50000"
  },
  {
    "text": "was that simple then this video would be",
    "start": "50000",
    "end": "51960"
  },
  {
    "text": "extremely short unfortunately the money",
    "start": "51960",
    "end": "54600"
  },
  {
    "text": "type has a couple of limitations that",
    "start": "54600",
    "end": "56600"
  },
  {
    "text": "makes it not so good at storing well",
    "start": "56600",
    "end": "58760"
  },
  {
    "text": "money the first of these is that it",
    "start": "58760",
    "end": "60680"
  },
  {
    "text": "can't handle fractions of the smallest",
    "start": "60680",
    "end": "62760"
  },
  {
    "text": "currency unit for example if I try to",
    "start": "62760",
    "end": "65518"
  },
  {
    "text": "divide a single us Cent by two then I",
    "start": "65519",
    "end": "68119"
  },
  {
    "text": "get back the value zero not great but in",
    "start": "68119",
    "end": "71000"
  },
  {
    "text": "some applications this doesn't actually",
    "start": "71000",
    "end": "72799"
  },
  {
    "text": "matter instead however there's another",
    "start": "72799",
    "end": "75080"
  },
  {
    "text": "issue with the money type that makes it",
    "start": "75080",
    "end": "76680"
  },
  {
    "text": "more problematic as you may have noticed",
    "start": "76680",
    "end": "79360"
  },
  {
    "text": "the money type is being formatted in the",
    "start": "79360",
    "end": "81520"
  },
  {
    "text": "US dollar postgres automatically does",
    "start": "81520",
    "end": "83840"
  },
  {
    "text": "this for us based on the database's",
    "start": "83840",
    "end": "86000"
  },
  {
    "text": "monetary local setting in my case this",
    "start": "86000",
    "end": "88479"
  },
  {
    "text": "is _ us if we go ahead and change this",
    "start": "88479",
    "end": "91759"
  },
  {
    "text": "local it'll also change the associated",
    "start": "91759",
    "end": "94119"
  },
  {
    "text": "formatting whilst this feels like a nice",
    "start": "94119",
    "end": "96200"
  },
  {
    "text": "to have feature it can actually be the",
    "start": "96200",
    "end": "98079"
  },
  {
    "text": "source of a couple of bugs to show what",
    "start": "98079",
    "end": "100320"
  },
  {
    "text": "I mean let's go ahead and add a price",
    "start": "100320",
    "end": "102119"
  },
  {
    "text": "column to our course table which is",
    "start": "102119",
    "end": "103920"
  },
  {
    "text": "going to have the type of money then",
    "start": "103920",
    "end": "106000"
  },
  {
    "text": "I'll perform the following query to set",
    "start": "106000",
    "end": "107920"
  },
  {
    "text": "the price of $100 for our course with",
    "start": "107920",
    "end": "110200"
  },
  {
    "text": "id1 if I go ahead and check the row",
    "start": "110200",
    "end": "112360"
  },
  {
    "text": "using a select statement you'll see that",
    "start": "112360",
    "end": "114399"
  },
  {
    "text": "I've made a mistake our course is",
    "start": "114399",
    "end": "116399"
  },
  {
    "text": "actually set to be 100n rather than $100",
    "start": "116399",
    "end": "119640"
  },
  {
    "text": "this this is because the monetary local",
    "start": "119640",
    "end": "121439"
  },
  {
    "text": "of the database is set to jaor JP which",
    "start": "121439",
    "end": "124759"
  },
  {
    "text": "is the local for Japan also known as",
    "start": "124759",
    "end": "127039"
  },
  {
    "text": "nion if you speak Nong go we can set our",
    "start": "127039",
    "end": "129759"
  },
  {
    "text": "money local back to us by using the",
    "start": "129759",
    "end": "132000"
  },
  {
    "text": "following command however if we pull out",
    "start": "132000",
    "end": "134280"
  },
  {
    "text": "the same row as we did before instead of",
    "start": "134280",
    "end": "136319"
  },
  {
    "text": "our price being set to $100 it's only",
    "start": "136319",
    "end": "138519"
  },
  {
    "text": "set to one to make matters worse if we",
    "start": "138519",
    "end": "140879"
  },
  {
    "text": "go ahead and set the price to be 100",
    "start": "140879",
    "end": "142959"
  },
  {
    "text": "again this time it sets it to $100",
    "start": "142959",
    "end": "146160"
  },
  {
    "text": "because the money value makes use of the",
    "start": "146160",
    "end": "147920"
  },
  {
    "text": "monetary local it also means you can't",
    "start": "147920",
    "end": "150239"
  },
  {
    "text": "store multiple currencies in the same",
    "start": "150239",
    "end": "152319"
  },
  {
    "text": "database whether or not that affects you",
    "start": "152319",
    "end": "154519"
  },
  {
    "text": "is going to be application specific",
    "start": "154519",
    "end": "156800"
  },
  {
    "text": "however personally I just wouldn't even",
    "start": "156800",
    "end": "158640"
  },
  {
    "text": "risk it because of these quirks I'm",
    "start": "158640",
    "end": "160879"
  },
  {
    "text": "therefore going to give the money type A",
    "start": "160879",
    "end": "162840"
  },
  {
    "text": "Hard pass when it comes to representing",
    "start": "162840",
    "end": "164879"
  },
  {
    "text": "money the next type we're going to look",
    "start": "164879",
    "end": "166879"
  },
  {
    "text": "at is the floating Point number which in",
    "start": "166879",
    "end": "169040"
  },
  {
    "text": "post gr is represented using either a",
    "start": "169040",
    "end": "171239"
  },
  {
    "text": "real or a double Precision if you've",
    "start": "171239",
    "end": "173560"
  },
  {
    "text": "never worked with monetary values before",
    "start": "173560",
    "end": "175480"
  },
  {
    "text": "then these may feel like a good type to",
    "start": "175480",
    "end": "177200"
  },
  {
    "text": "reach for however don't in fact pull",
    "start": "177200",
    "end": "180080"
  },
  {
    "text": "that hand back quickly and never think",
    "start": "180080",
    "end": "181760"
  },
  {
    "text": "about reaching for those types ever",
    "start": "181760",
    "end": "183319"
  },
  {
    "text": "again the reason for this Stone advice",
    "start": "183319",
    "end": "185480"
  },
  {
    "text": "is due to the way that floats work in",
    "start": "185480",
    "end": "187120"
  },
  {
    "text": "postgres and well any other programming",
    "start": "187120",
    "end": "189360"
  },
  {
    "text": "language that makes them unsuitable for",
    "start": "189360",
    "end": "191360"
  },
  {
    "text": "monetary data to show this in action let",
    "start": "191360",
    "end": "193680"
  },
  {
    "text": "me create a quick example here I have a",
    "start": "193680",
    "end": "196080"
  },
  {
    "text": "table called prices which has a value",
    "start": "196080",
    "end": "198040"
  },
  {
    "text": "column which has the type of real inside",
    "start": "198040",
    "end": "200480"
  },
  {
    "text": "of this table I'll go ahead and add a",
    "start": "200480",
    "end": "202239"
  },
  {
    "text": "th000 rows each with the value of 0.1",
    "start": "202239",
    "end": "205120"
  },
  {
    "text": "then if we perform a some aggregation",
    "start": "205120",
    "end": "206879"
  },
  {
    "text": "against every Row in this table we",
    "start": "206879",
    "end": "208560"
  },
  {
    "text": "should expect the result of 100",
    "start": "208560",
    "end": "210680"
  },
  {
    "text": "unfortunately however this isn't the",
    "start": "210680",
    "end": "212400"
  },
  {
    "text": "case we're a tiny bit short this happens",
    "start": "212400",
    "end": "215360"
  },
  {
    "text": "because the value of 0.1 for computers",
    "start": "215360",
    "end": "217760"
  },
  {
    "text": "is well not exactly 0.1 instead it's",
    "start": "217760",
    "end": "221080"
  },
  {
    "text": "this number which is incredibly close",
    "start": "221080",
    "end": "224000"
  },
  {
    "text": "because of the way that binary works",
    "start": "224000",
    "end": "225920"
  },
  {
    "text": "there are some floating Point numbers",
    "start": "225920",
    "end": "227360"
  },
  {
    "text": "that can't be accurately represented",
    "start": "227360",
    "end": "229159"
  },
  {
    "text": "using it such as 0.1 instead we have to",
    "start": "229159",
    "end": "232319"
  },
  {
    "text": "use the closest representation which",
    "start": "232319",
    "end": "234640"
  },
  {
    "text": "therefore causes some drift in typical",
    "start": "234640",
    "end": "236920"
  },
  {
    "text": "Computing these rounding off errors",
    "start": "236920",
    "end": "238680"
  },
  {
    "text": "don't cause too much of an issue however",
    "start": "238680",
    "end": "240720"
  },
  {
    "text": "when it comes to tasks that need a high",
    "start": "240720",
    "end": "242560"
  },
  {
    "text": "level of precision such as monetary data",
    "start": "242560",
    "end": "245159"
  },
  {
    "text": "then these rounding errors can be",
    "start": "245159",
    "end": "246720"
  },
  {
    "text": "absolutely",
    "start": "246720",
    "end": "248599"
  },
  {
    "text": "devastating therefore using a float to",
    "start": "248599",
    "end": "251000"
  },
  {
    "text": "represent a monetary value is generally",
    "start": "251000",
    "end": "253400"
  },
  {
    "text": "a bad idea no matter whether you're",
    "start": "253400",
    "end": "255400"
  },
  {
    "text": "using postgres or python speaking of",
    "start": "255400",
    "end": "257959"
  },
  {
    "text": "python we can also use the language to",
    "start": "257959",
    "end": "260000"
  },
  {
    "text": "prove these rounding off errors one way",
    "start": "260000",
    "end": "262199"
  },
  {
    "text": "to do so would be to use a simple for",
    "start": "262199",
    "end": "264160"
  },
  {
    "text": "Loop such as the following code however",
    "start": "264160",
    "end": "266840"
  },
  {
    "text": "perhaps you're finding this a little",
    "start": "266840",
    "end": "268160"
  },
  {
    "text": "hard to read and maybe your python",
    "start": "268160",
    "end": "270039"
  },
  {
    "text": "skills are getting a little rusty",
    "start": "270039",
    "end": "272039"
  },
  {
    "text": "fortunately that's where the sponsor of",
    "start": "272039",
    "end": "273759"
  },
  {
    "text": "today's video can help brilliant.org",
    "start": "273759",
    "end": "275840"
  },
  {
    "text": "brilliant is the place to go to learn by",
    "start": "275840",
    "end": "278120"
  },
  {
    "text": "doing with thousands of interactive",
    "start": "278120",
    "end": "279880"
  },
  {
    "text": "lessons in math data analysis",
    "start": "279880",
    "end": "281880"
  },
  {
    "text": "programming and AI brilliant helps build",
    "start": "281880",
    "end": "284400"
  },
  {
    "text": "your critical thinking skills through",
    "start": "284400",
    "end": "286000"
  },
  {
    "text": "problem solving rather than just",
    "start": "286000",
    "end": "287600"
  },
  {
    "text": "memorizing so as you're building real",
    "start": "287600",
    "end": "289680"
  },
  {
    "text": "knowledge on specific topics you'll also",
    "start": "289680",
    "end": "291680"
  },
  {
    "text": "become a better thinker if you're just",
    "start": "291680",
    "end": "293759"
  },
  {
    "text": "getting started in your coding Journey",
    "start": "293759",
    "end": "295560"
  },
  {
    "text": "then the thinking and code course can",
    "start": "295560",
    "end": "297120"
  },
  {
    "text": "help you develop your skills Beyond just",
    "start": "297120",
    "end": "298840"
  },
  {
    "text": "watching YouTube videos the course",
    "start": "298840",
    "end": "300800"
  },
  {
    "text": "contains all you need to get started",
    "start": "300800",
    "end": "302320"
  },
  {
    "text": "thinking in code such as engaging with",
    "start": "302320",
    "end": "304520"
  },
  {
    "text": "loops conditional statements recognizing",
    "start": "304520",
    "end": "306960"
  },
  {
    "text": "patterns and writing programs so to try",
    "start": "306960",
    "end": "309600"
  },
  {
    "text": "everything that brilliant has to offer",
    "start": "309600",
    "end": "310960"
  },
  {
    "text": "free for 30 days visit brilliant.org",
    "start": "310960",
    "end": "313039"
  },
  {
    "text": "dreamof code or click the link in the",
    "start": "313039",
    "end": "315280"
  },
  {
    "text": "description down below by signing up",
    "start": "315280",
    "end": "317440"
  },
  {
    "text": "you'll also receive 20% off brilliant's",
    "start": "317440",
    "end": "319720"
  },
  {
    "text": "annual premium subscription a big thank",
    "start": "319720",
    "end": "321919"
  },
  {
    "text": "you to brilliant for sponsoring this",
    "start": "321919",
    "end": "323600"
  },
  {
    "text": "video the next type we're going to",
    "start": "323600",
    "end": "325520"
  },
  {
    "text": "consider is the humble integer which is",
    "start": "325520",
    "end": "327840"
  },
  {
    "text": "perhaps my favorite numerical type",
    "start": "327840",
    "end": "329960"
  },
  {
    "text": "integers and their big brother the",
    "start": "329960",
    "end": "331600"
  },
  {
    "text": "bigint are commonly used types when it",
    "start": "331600",
    "end": "333560"
  },
  {
    "text": "comes to representing currency with some",
    "start": "333560",
    "end": "335520"
  },
  {
    "text": "of the biggest implementers being",
    "start": "335520",
    "end": "337039"
  },
  {
    "text": "cryptocurrencies like Bitcoin integers",
    "start": "337039",
    "end": "339280"
  },
  {
    "text": "work by using the integer value to",
    "start": "339280",
    "end": "341199"
  },
  {
    "text": "represent the smallest unit of currency",
    "start": "341199",
    "end": "343240"
  },
  {
    "text": "that an application cares about for",
    "start": "343240",
    "end": "345280"
  },
  {
    "text": "example the value one could be used to",
    "start": "345280",
    "end": "347280"
  },
  {
    "text": "represent either a single dollar or a",
    "start": "347280",
    "end": "349240"
  },
  {
    "text": "single Cent this makes integers more",
    "start": "349240",
    "end": "351600"
  },
  {
    "text": "versatile than the money type we looked",
    "start": "351600",
    "end": "353199"
  },
  {
    "text": "at earlier and because they're not",
    "start": "353199",
    "end": "354960"
  },
  {
    "text": "affected by the databases local we can",
    "start": "354960",
    "end": "357120"
  },
  {
    "text": "use them to store multiple currencies",
    "start": "357120",
    "end": "358919"
  },
  {
    "text": "inside of our data database as well as",
    "start": "358919",
    "end": "360680"
  },
  {
    "text": "being versatile integers are also",
    "start": "360680",
    "end": "362880"
  },
  {
    "text": "incredibly fast and only have a memory",
    "start": "362880",
    "end": "365400"
  },
  {
    "text": "footprint of 4 bytes despite this",
    "start": "365400",
    "end": "367919"
  },
  {
    "text": "however they're not perfect with one",
    "start": "367919",
    "end": "369880"
  },
  {
    "text": "limitation being the fact they can't",
    "start": "369880",
    "end": "371599"
  },
  {
    "text": "support decimals this means that in",
    "start": "371599",
    "end": "373680"
  },
  {
    "text": "order to effectively use an integer it",
    "start": "373680",
    "end": "375880"
  },
  {
    "text": "must represent the smallest unit of",
    "start": "375880",
    "end": "378000"
  },
  {
    "text": "currency that an application requires",
    "start": "378000",
    "end": "380440"
  },
  {
    "text": "this can be difficult to know when",
    "start": "380440",
    "end": "381759"
  },
  {
    "text": "designing your system initially and can",
    "start": "381759",
    "end": "383919"
  },
  {
    "text": "fall victim to unknown future",
    "start": "383919",
    "end": "385599"
  },
  {
    "text": "requirements as well as this integers in",
    "start": "385599",
    "end": "387919"
  },
  {
    "text": "postgres also have a limited range that",
    "start": "387919",
    "end": "390120"
  },
  {
    "text": "they can support with the max integer",
    "start": "390120",
    "end": "392199"
  },
  {
    "text": "value being just over 2 billion whilst",
    "start": "392199",
    "end": "394520"
  },
  {
    "text": "this may seem high to anyone who isn't a",
    "start": "394520",
    "end": "396440"
  },
  {
    "text": "PHP developer the problem here is that",
    "start": "396440",
    "end": "398680"
  },
  {
    "text": "it's affected by your base currency unit",
    "start": "398680",
    "end": "401160"
  },
  {
    "text": "if a single int value represents 1 cent",
    "start": "401160",
    "end": "403919"
  },
  {
    "text": "then the max dollar value that you can",
    "start": "403919",
    "end": "405680"
  },
  {
    "text": "support is only 21 million fortunately",
    "start": "405680",
    "end": "408720"
  },
  {
    "text": "this range limitation can be overcome by",
    "start": "408720",
    "end": "410759"
  },
  {
    "text": "using the big in type which supports a",
    "start": "410759",
    "end": "413080"
  },
  {
    "text": "much higher range albeit at a greater",
    "start": "413080",
    "end": "415560"
  },
  {
    "text": "memory cost even with these limitations",
    "start": "415560",
    "end": "418120"
  },
  {
    "text": "the integer is still a good choice",
    "start": "418120",
    "end": "420440"
  },
  {
    "text": "especially if you know what you're",
    "start": "420440",
    "end": "421639"
  },
  {
    "text": "expecting personally however I think",
    "start": "421639",
    "end": "423720"
  },
  {
    "text": "there's still a better type we can use",
    "start": "423720",
    "end": "425759"
  },
  {
    "text": "one that has much more versatility the",
    "start": "425759",
    "end": "428240"
  },
  {
    "text": "varar okay I got you there this type is",
    "start": "428240",
    "end": "431400"
  },
  {
    "text": "probably just as bad as using a floating",
    "start": "431400",
    "end": "433479"
  },
  {
    "text": "Point number as it doesn't support any",
    "start": "433479",
    "end": "435680"
  },
  {
    "text": "arithmetic and you pretty much have to",
    "start": "435680",
    "end": "437479"
  },
  {
    "text": "cast it to another type in order to make",
    "start": "437479",
    "end": "439400"
  },
  {
    "text": "it usable instead the type that is",
    "start": "439400",
    "end": "441560"
  },
  {
    "text": "considered most ideal for representing",
    "start": "441560",
    "end": "443560"
  },
  {
    "text": "money in postgres is the numeric which",
    "start": "443560",
    "end": "446280"
  },
  {
    "text": "is also known as the decimal this type",
    "start": "446280",
    "end": "448919"
  },
  {
    "text": "has a number number of properties that",
    "start": "448919",
    "end": "450319"
  },
  {
    "text": "make it ideal for representing money the",
    "start": "450319",
    "end": "452599"
  },
  {
    "text": "first of which is that they support",
    "start": "452599",
    "end": "454240"
  },
  {
    "text": "decimal places unlike a float however",
    "start": "454240",
    "end": "456759"
  },
  {
    "text": "they do this using a radic of 10 which",
    "start": "456759",
    "end": "459160"
  },
  {
    "text": "prevents a lot of the rounding errors",
    "start": "459160",
    "end": "460720"
  },
  {
    "text": "that occur when using a float as well as",
    "start": "460720",
    "end": "463039"
  },
  {
    "text": "this the numeric type supports a large",
    "start": "463039",
    "end": "465080"
  },
  {
    "text": "number of decimal places up to around",
    "start": "465080",
    "end": "467639"
  },
  {
    "text": "16,000 in total this allows the numeric",
    "start": "467639",
    "end": "470400"
  },
  {
    "text": "to support a very granular level of Base",
    "start": "470400",
    "end": "472599"
  },
  {
    "text": "currency in case you ever need it as",
    "start": "472599",
    "end": "474800"
  },
  {
    "text": "well as this the numeric type can also",
    "start": "474800",
    "end": "476560"
  },
  {
    "text": "be used to represent very large numbers",
    "start": "476560",
    "end": "479039"
  },
  {
    "text": "as it's able to store numbers with up to",
    "start": "479039",
    "end": "481759"
  },
  {
    "text": "131,072 digits before the decimal point",
    "start": "481759",
    "end": "485599"
  },
  {
    "text": "which is an outrageously big number if",
    "start": "485599",
    "end": "487960"
  },
  {
    "text": "that feels slightly overwhelming then",
    "start": "487960",
    "end": "489720"
  },
  {
    "text": "don't worry we can Define this level of",
    "start": "489720",
    "end": "491800"
  },
  {
    "text": "precision ourselves let's take a look at",
    "start": "491800",
    "end": "493840"
  },
  {
    "text": "this type in more detail to add a",
    "start": "493840",
    "end": "495919"
  },
  {
    "text": "numeric column to our course table we",
    "start": "495919",
    "end": "497840"
  },
  {
    "text": "can use the following sequel you'll",
    "start": "497840",
    "end": "499879"
  },
  {
    "text": "notice that we're passing in two",
    "start": "499879",
    "end": "501080"
  },
  {
    "text": "different values to our numeric",
    "start": "501080",
    "end": "502720"
  },
  {
    "text": "declaration the first of these values is",
    "start": "502720",
    "end": "505039"
  },
  {
    "text": "known as the Precision and defines the",
    "start": "505039",
    "end": "507280"
  },
  {
    "text": "total number of digits that the numeric",
    "start": "507280",
    "end": "509159"
  },
  {
    "text": "can contain the second value is the",
    "start": "509159",
    "end": "511479"
  },
  {
    "text": "scale which defines the total number of",
    "start": "511479",
    "end": "513839"
  },
  {
    "text": "digits you can have after the decimal",
    "start": "513839",
    "end": "515839"
  },
  {
    "text": "place in this case two this means we can",
    "start": "515839",
    "end": "518279"
  },
  {
    "text": "have any number between",
    "start": "518279",
    "end": "520440"
  },
  {
    "text": "99999 and its inverse as these are",
    "start": "520440",
    "end": "523120"
  },
  {
    "text": "five-digit numbers with two of the",
    "start": "523120",
    "end": "524760"
  },
  {
    "text": "digits being used for the decimal place",
    "start": "524760",
    "end": "526880"
  },
  {
    "text": "if instead our numeric was defined as 3",
    "start": "526880",
    "end": "528959"
  },
  {
    "text": "and 1 then we could only support values",
    "start": "528959",
    "end": "530880"
  },
  {
    "text": "between 99.9 and its inverse when",
    "start": "530880",
    "end": "533600"
  },
  {
    "text": "defining your own numeric size you may",
    "start": "533600",
    "end": "535399"
  },
  {
    "text": "want to give yourself a bit of a buffer",
    "start": "535399",
    "end": "537399"
  },
  {
    "text": "however you are able to both increase",
    "start": "537399",
    "end": "539000"
  },
  {
    "text": "the Precision ision and the scale later",
    "start": "539000",
    "end": "541440"
  },
  {
    "text": "as long as this doesn't truncate any",
    "start": "541440",
    "end": "543040"
  },
  {
    "text": "existing values if all of that sounds",
    "start": "543040",
    "end": "544880"
  },
  {
    "text": "like too much of a hassle you can choose",
    "start": "544880",
    "end": "546519"
  },
  {
    "text": "to Adit these two values when you define",
    "start": "546519",
    "end": "548399"
  },
  {
    "text": "your numeric which will cause it to take",
    "start": "548399",
    "end": "550320"
  },
  {
    "text": "the max of each value whilst the",
    "start": "550320",
    "end": "552519"
  },
  {
    "text": "numerical type is extremely versatile it",
    "start": "552519",
    "end": "555000"
  },
  {
    "text": "does come with a hidden cost variable",
    "start": "555000",
    "end": "557440"
  },
  {
    "text": "memory usage the numeric type requires",
    "start": "557440",
    "end": "559920"
  },
  {
    "text": "at least 8 bytes of data with the size",
    "start": "559920",
    "end": "562160"
  },
  {
    "text": "increasing depending on the value you're",
    "start": "562160",
    "end": "564000"
  },
  {
    "text": "storing for example here I have a",
    "start": "564000",
    "end": "566120"
  },
  {
    "text": "numeric that takes up 66,000 bytes for",
    "start": "566120",
    "end": "569360"
  },
  {
    "text": "comparison both the integer and bigin",
    "start": "569360",
    "end": "571480"
  },
  {
    "text": "only take four and8 bytes respectively",
    "start": "571480",
    "end": "573839"
  },
  {
    "text": "whilst this may seem kind of spooky you",
    "start": "573839",
    "end": "575800"
  },
  {
    "text": "are able to manage this memory cost by",
    "start": "575800",
    "end": "577600"
  },
  {
    "text": "setting both the Precision and scale",
    "start": "577600",
    "end": "579800"
  },
  {
    "text": "therefore personally I believe that the",
    "start": "579800",
    "end": "581480"
  },
  {
    "text": "numeric is the perfect type for",
    "start": "581480",
    "end": "583320"
  },
  {
    "text": "representing money in postgres given the",
    "start": "583320",
    "end": "585600"
  },
  {
    "text": "number of benefits that it provides",
    "start": "585600",
    "end": "587920"
  },
  {
    "text": "however by itself it is missing one key",
    "start": "587920",
    "end": "590160"
  },
  {
    "text": "piece of information the associated",
    "start": "590160",
    "end": "592279"
  },
  {
    "text": "currency when it comes to data modeling",
    "start": "592279",
    "end": "594640"
  },
  {
    "text": "it's usually a good idea to store as",
    "start": "594640",
    "end": "596519"
  },
  {
    "text": "much context as possible which means",
    "start": "596519",
    "end": "598640"
  },
  {
    "text": "that storing the Associated currency",
    "start": "598640",
    "end": "600480"
  },
  {
    "text": "next to the price value is generally a",
    "start": "600480",
    "end": "602640"
  },
  {
    "text": "good idea therefore in order to",
    "start": "602640",
    "end": "604600"
  },
  {
    "text": "capitalize on this good advice I decided",
    "start": "604600",
    "end": "606720"
  },
  {
    "text": "to create another table which will be",
    "start": "606720",
    "end": "608519"
  },
  {
    "text": "used to store the various prices of a",
    "start": "608519",
    "end": "610600"
  },
  {
    "text": "course this table currently has two",
    "start": "610600",
    "end": "612880"
  },
  {
    "text": "columns the first is the course ID which",
    "start": "612880",
    "end": "615640"
  },
  {
    "text": "is a foreign key reference to the course",
    "start": "615640",
    "end": "617560"
  },
  {
    "text": "table the second column is our course",
    "start": "617560",
    "end": "619839"
  },
  {
    "text": "price which is a numeric with a",
    "start": "619839",
    "end": "622000"
  },
  {
    "text": "Precision of 10 and a scale of four",
    "start": "622000",
    "end": "624440"
  },
  {
    "text": "let's add a new column to store the",
    "start": "624440",
    "end": "626120"
  },
  {
    "text": "currency the type of this column is",
    "start": "626120",
    "end": "628120"
  },
  {
    "text": "going to be a varar pretty simple",
    "start": "628120",
    "end": "630040"
  },
  {
    "text": "however to prevent garbage from being",
    "start": "630040",
    "end": "631600"
  },
  {
    "text": "added to this column we want to limit",
    "start": "631600",
    "end": "633399"
  },
  {
    "text": "the values that can be stored here one",
    "start": "633399",
    "end": "635600"
  },
  {
    "text": "way to do this is to use an enum in SQL",
    "start": "635600",
    "end": "638120"
  },
  {
    "text": "however enums have a couple of caveats",
    "start": "638120",
    "end": "640440"
  },
  {
    "text": "instead it's going to be better to use a",
    "start": "640440",
    "end": "642320"
  },
  {
    "text": "check constraint we can do this by",
    "start": "642320",
    "end": "644320"
  },
  {
    "text": "adding in the following line which",
    "start": "644320",
    "end": "645839"
  },
  {
    "text": "limits the column to only accepting the",
    "start": "645839",
    "end": "647760"
  },
  {
    "text": "values we've specified which in this",
    "start": "647760",
    "end": "649720"
  },
  {
    "text": "case is US Dollars Great British pounds",
    "start": "649720",
    "end": "652240"
  },
  {
    "text": "and Euros using their ISO 4217 currency",
    "start": "652240",
    "end": "655720"
  },
  {
    "text": "code the last thing that remains is to",
    "start": "655720",
    "end": "657920"
  },
  {
    "text": "make sure we only create a single price",
    "start": "657920",
    "end": "659920"
  },
  {
    "text": "per currency for each course we can do",
    "start": "659920",
    "end": "662399"
  },
  {
    "text": "this pretty easily by making a composite",
    "start": "662399",
    "end": "664279"
  },
  {
    "text": "primary key of both our course and",
    "start": "664279",
    "end": "666240"
  },
  {
    "text": "currency with that we've managed to add",
    "start": "666240",
    "end": "668680"
  },
  {
    "text": "price data into our courses with support",
    "start": "668680",
    "end": "671200"
  },
  {
    "text": "for multiple currencies using the",
    "start": "671200",
    "end": "673279"
  },
  {
    "text": "numeric type is my favorite way to",
    "start": "673279",
    "end": "675040"
  },
  {
    "text": "represent monetary values in postgres",
    "start": "675040",
    "end": "677399"
  },
  {
    "text": "although I do think using an integer is",
    "start": "677399",
    "end": "679600"
  },
  {
    "text": "sometimes okay as long as you're aware",
    "start": "679600",
    "end": "681560"
  },
  {
    "text": "of the limitations either way I'd love",
    "start": "681560",
    "end": "683920"
  },
  {
    "text": "to know your thoughts what have you been",
    "start": "683920",
    "end": "685760"
  },
  {
    "text": "using to typically represent money in a",
    "start": "685760",
    "end": "687839"
  },
  {
    "text": "database schema let me know in the",
    "start": "687839",
    "end": "689560"
  },
  {
    "text": "comments down below otherwise I want to",
    "start": "689560",
    "end": "691720"
  },
  {
    "text": "give a big thank you for watching and",
    "start": "691720",
    "end": "693200"
  },
  {
    "text": "I'll see you on the next one",
    "start": "693200",
    "end": "697399"
  }
]