[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "rust is a general purpose programming",
    "start": "0",
    "end": "1979"
  },
  {
    "text": "language that emphasizes performance",
    "start": "1979",
    "end": "3780"
  },
  {
    "text": "type safety and concurrency",
    "start": "3780",
    "end": "7379"
  },
  {
    "text": "rust was first released in 2015 and was",
    "start": "7379",
    "end": "10620"
  },
  {
    "text": "initially developed at Mozilla to be",
    "start": "10620",
    "end": "12360"
  },
  {
    "text": "used in their experimental browser",
    "start": "12360",
    "end": "13920"
  },
  {
    "text": "engine",
    "start": "13920",
    "end": "15120"
  },
  {
    "text": "since 2016 rustus sat as the most loved",
    "start": "15120",
    "end": "18480"
  },
  {
    "text": "language in the stack Overflow annual",
    "start": "18480",
    "end": "20100"
  },
  {
    "text": "developer survey the syntax of rust is",
    "start": "20100",
    "end": "22619"
  },
  {
    "text": "similar to that of C and C plus but",
    "start": "22619",
    "end": "25320"
  },
  {
    "text": "unlike those two languages it is heavily",
    "start": "25320",
    "end": "27660"
  },
  {
    "text": "influenced by Concepts from functional",
    "start": "27660",
    "end": "29279"
  },
  {
    "text": "programming languages such as ocampbell",
    "start": "29279",
    "end": "31439"
  },
  {
    "text": "scheme and Haskell",
    "start": "31439",
    "end": "34140"
  },
  {
    "text": "rust has been positioned as the modern",
    "start": "34140",
    "end": "35880"
  },
  {
    "text": "successor to C plus two in part to its",
    "start": "35880",
    "end": "38640"
  },
  {
    "text": "low-level applications and improved",
    "start": "38640",
    "end": "40079"
  },
  {
    "text": "memory safety especially when dealing",
    "start": "40079",
    "end": "41940"
  },
  {
    "text": "with concurrency many rust programmers",
    "start": "41940",
    "end": "44340"
  },
  {
    "text": "call themselves restations",
    "start": "44340",
    "end": "46500"
  },
  {
    "text": "a play on the word crustacean because of",
    "start": "46500",
    "end": "49079"
  },
  {
    "text": "this The Unofficial mascot of rust is a",
    "start": "49079",
    "end": "51719"
  },
  {
    "text": "crab named Ferris",
    "start": "51719",
    "end": "53460"
  },
  {
    "text": "a play of the adjective ferrous which",
    "start": "53460",
    "end": "55620"
  },
  {
    "text": "relates to iron which of course is",
    "start": "55620",
    "end": "57840"
  },
  {
    "text": "associated with rust",
    "start": "57840",
    "end": "60920"
  },
  {
    "start": "60000",
    "end": "100000"
  },
  {
    "text": "the rust website provides instructions",
    "start": "61079",
    "end": "63000"
  },
  {
    "text": "on how to get started",
    "start": "63000",
    "end": "64739"
  },
  {
    "text": "the preferred approach is to First",
    "start": "64739",
    "end": "66360"
  },
  {
    "text": "install an application called rust up",
    "start": "66360",
    "end": "68580"
  },
  {
    "text": "a rust version management tool",
    "start": "68580",
    "end": "71760"
  },
  {
    "text": "with rust up installed the rust up",
    "start": "71760",
    "end": "73560"
  },
  {
    "text": "default stable command will install the",
    "start": "73560",
    "end": "75299"
  },
  {
    "text": "latest version of rust",
    "start": "75299",
    "end": "76510"
  },
  {
    "text": "[Music]",
    "start": "76510",
    "end": "78840"
  },
  {
    "text": "to get started with a simple program",
    "start": "78840",
    "end": "80400"
  },
  {
    "text": "first create a new file that ends in the",
    "start": "80400",
    "end": "82680"
  },
  {
    "text": "extension.rs",
    "start": "82680",
    "end": "84960"
  },
  {
    "text": "Rost uses the main function as its entry",
    "start": "84960",
    "end": "87060"
  },
  {
    "text": "point similar to many other languages",
    "start": "87060",
    "end": "88740"
  },
  {
    "text": "and can write to sdd out using the print",
    "start": "88740",
    "end": "90780"
  },
  {
    "text": "LM macro",
    "start": "90780",
    "end": "92700"
  },
  {
    "text": "code can be compiled using the rust C",
    "start": "92700",
    "end": "94560"
  },
  {
    "text": "command which then produces a binary",
    "start": "94560",
    "end": "96780"
  },
  {
    "text": "output that can be executed",
    "start": "96780",
    "end": "100159"
  },
  {
    "start": "100000",
    "end": "132000"
  },
  {
    "text": "whilst Rusty works for simple files it",
    "start": "100159",
    "end": "103259"
  },
  {
    "text": "can be challenging to use with larger",
    "start": "103259",
    "end": "104820"
  },
  {
    "text": "projects instead it's recommended to use",
    "start": "104820",
    "end": "107100"
  },
  {
    "text": "cargo which is a package manager and",
    "start": "107100",
    "end": "109500"
  },
  {
    "text": "build tool for rust to create a new",
    "start": "109500",
    "end": "111720"
  },
  {
    "text": "project using cargo use the cargo new",
    "start": "111720",
    "end": "113700"
  },
  {
    "text": "command which creates a new application",
    "start": "113700",
    "end": "115560"
  },
  {
    "text": "project in a directory with the provided",
    "start": "115560",
    "end": "117540"
  },
  {
    "text": "name",
    "start": "117540",
    "end": "118500"
  },
  {
    "text": "the project can then be built using the",
    "start": "118500",
    "end": "120299"
  },
  {
    "text": "cargo build command or executed using",
    "start": "120299",
    "end": "123540"
  },
  {
    "text": "the cargo run command",
    "start": "123540",
    "end": "126680"
  },
  {
    "text": "the brass standard library is rather",
    "start": "126960",
    "end": "128640"
  },
  {
    "text": "minimal when compared to other languages",
    "start": "128640",
    "end": "129959"
  },
  {
    "text": "but this minimalism is by Design",
    "start": "129959",
    "end": "132480"
  },
  {
    "start": "132000",
    "end": "160000"
  },
  {
    "text": "the standard Library does provide some",
    "start": "132480",
    "end": "134340"
  },
  {
    "text": "common data structures that most",
    "start": "134340",
    "end": "135480"
  },
  {
    "text": "developers will find useful these are",
    "start": "135480",
    "end": "137760"
  },
  {
    "text": "similarly named to the data structures",
    "start": "137760",
    "end": "139440"
  },
  {
    "text": "found in C plus and therefore can be",
    "start": "139440",
    "end": "141840"
  },
  {
    "text": "confusing to developers from other",
    "start": "141840",
    "end": "143280"
  },
  {
    "text": "languages",
    "start": "143280",
    "end": "144420"
  },
  {
    "text": "the VEC type acts as a dynamic array",
    "start": "144420",
    "end": "146520"
  },
  {
    "text": "which will increase in size as more",
    "start": "146520",
    "end": "148140"
  },
  {
    "text": "values are pushed",
    "start": "148140",
    "end": "149879"
  },
  {
    "text": "hashmap type is used for storing key",
    "start": "149879",
    "end": "151560"
  },
  {
    "text": "value pairs",
    "start": "151560",
    "end": "153780"
  },
  {
    "text": "the hash set type is used for storing an",
    "start": "153780",
    "end": "155640"
  },
  {
    "text": "unordered set of unique values",
    "start": "155640",
    "end": "159260"
  },
  {
    "start": "160000",
    "end": "204000"
  },
  {
    "text": "these data structures are sufficient for",
    "start": "160620",
    "end": "162480"
  },
  {
    "text": "many simple use cases but in non-trivial",
    "start": "162480",
    "end": "164819"
  },
  {
    "text": "projects third-party dependencies are",
    "start": "164819",
    "end": "166739"
  },
  {
    "text": "usually required rust provides An",
    "start": "166739",
    "end": "168720"
  },
  {
    "text": "Elegant dependency management solution",
    "start": "168720",
    "end": "170280"
  },
  {
    "text": "through the use of cargo similar to npm",
    "start": "170280",
    "end": "173160"
  },
  {
    "text": "and pipei cargo uses a centralized",
    "start": "173160",
    "end": "175379"
  },
  {
    "text": "repository for dependencies which are",
    "start": "175379",
    "end": "177480"
  },
  {
    "text": "known as crates and can be discovered on",
    "start": "177480",
    "end": "179459"
  },
  {
    "text": "the crates.io website",
    "start": "179459",
    "end": "182040"
  },
  {
    "text": "adding a crate to a project is as easy",
    "start": "182040",
    "end": "184319"
  },
  {
    "text": "as setting the crate name and version",
    "start": "184319",
    "end": "185819"
  },
  {
    "text": "number to the dependencies section in",
    "start": "185819",
    "end": "187739"
  },
  {
    "text": "the cargo.tomel",
    "start": "187739",
    "end": "189959"
  },
  {
    "text": "the crate can then be imported into the",
    "start": "189959",
    "end": "191700"
  },
  {
    "text": "code with the use keyword",
    "start": "191700",
    "end": "193120"
  },
  {
    "text": "[Music]",
    "start": "193120",
    "end": "197940"
  },
  {
    "text": "calling over the cargo build or run",
    "start": "197940",
    "end": "199860"
  },
  {
    "text": "command will then download the",
    "start": "199860",
    "end": "201360"
  },
  {
    "text": "dependency and compile it in the",
    "start": "201360",
    "end": "202860"
  },
  {
    "text": "background",
    "start": "202860",
    "end": "204599"
  },
  {
    "start": "204000",
    "end": "241000"
  },
  {
    "text": "rust is a strongly typed language with",
    "start": "204599",
    "end": "206400"
  },
  {
    "text": "an expressive and Powerful type system",
    "start": "206400",
    "end": "208040"
  },
  {
    "text": "structs are the common data type for",
    "start": "208040",
    "end": "210120"
  },
  {
    "text": "encapsulation in Rust and are used as",
    "start": "210120",
    "end": "212280"
  },
  {
    "text": "the basis for creating more complex data",
    "start": "212280",
    "end": "214260"
  },
  {
    "text": "structures enums are a powerful feature",
    "start": "214260",
    "end": "216599"
  },
  {
    "text": "of rust which can also be composed of",
    "start": "216599",
    "end": "218760"
  },
  {
    "text": "other data structures as well as their",
    "start": "218760",
    "end": "220440"
  },
  {
    "text": "own values",
    "start": "220440",
    "end": "221940"
  },
  {
    "text": "there is no inheritance or",
    "start": "221940",
    "end": "223440"
  },
  {
    "text": "object-orientated programming in Rust",
    "start": "223440",
    "end": "225900"
  },
  {
    "text": "instead an interface type system known",
    "start": "225900",
    "end": "227819"
  },
  {
    "text": "as traits is used which defines the",
    "start": "227819",
    "end": "229920"
  },
  {
    "text": "expected method interface of a type",
    "start": "229920",
    "end": "231780"
  },
  {
    "text": "without defining its implementation Rost",
    "start": "231780",
    "end": "234299"
  },
  {
    "text": "also has support for generics which can",
    "start": "234299",
    "end": "236459"
  },
  {
    "text": "be used to create powerful abstractions",
    "start": "236459",
    "end": "238260"
  },
  {
    "text": "and code reusability",
    "start": "238260",
    "end": "240420"
  },
  {
    "text": "rust is influenced by functional",
    "start": "240420",
    "end": "242159"
  },
  {
    "start": "241000",
    "end": "298000"
  },
  {
    "text": "languages such as Haskell and ocamel and",
    "start": "242159",
    "end": "244379"
  },
  {
    "text": "brings many similar features to the",
    "start": "244379",
    "end": "245940"
  },
  {
    "text": "language one of the most prominent",
    "start": "245940",
    "end": "247739"
  },
  {
    "text": "features is that variables are immutable",
    "start": "247739",
    "end": "249720"
  },
  {
    "text": "by default",
    "start": "249720",
    "end": "251340"
  },
  {
    "text": "the mute keyword must be added to any",
    "start": "251340",
    "end": "253260"
  },
  {
    "text": "variable including parameters in order",
    "start": "253260",
    "end": "255720"
  },
  {
    "text": "for its value to be changed",
    "start": "255720",
    "end": "257699"
  },
  {
    "text": "functions are considered first class",
    "start": "257699",
    "end": "259440"
  },
  {
    "text": "types which allows for higher ordered",
    "start": "259440",
    "end": "261419"
  },
  {
    "text": "functions such as map and reduce",
    "start": "261419",
    "end": "263699"
  },
  {
    "text": "rust provides strong support for pattern",
    "start": "263699",
    "end": "265979"
  },
  {
    "text": "matching which allows the flow of the",
    "start": "265979",
    "end": "267479"
  },
  {
    "text": "program to Branch based on a given input",
    "start": "267479",
    "end": "270300"
  },
  {
    "text": "due to rust being a safe language the no",
    "start": "270300",
    "end": "272340"
  },
  {
    "text": "keyword does not exist instead an enum",
    "start": "272340",
    "end": "275100"
  },
  {
    "text": "code option is used which has two",
    "start": "275100",
    "end": "276660"
  },
  {
    "text": "variants none which is used to represent",
    "start": "276660",
    "end": "279180"
  },
  {
    "text": "null and sum which has an Associated",
    "start": "279180",
    "end": "282120"
  },
  {
    "text": "value of which is generic",
    "start": "282120",
    "end": "283770"
  },
  {
    "text": "[Music]",
    "start": "283770",
    "end": "285600"
  },
  {
    "text": "as well as the option type a result type",
    "start": "285600",
    "end": "288180"
  },
  {
    "text": "is used for error handling which has an",
    "start": "288180",
    "end": "290580"
  },
  {
    "text": "OK or error type associated",
    "start": "290580",
    "end": "294000"
  },
  {
    "text": "code is organized under us through the",
    "start": "294000",
    "end": "296340"
  },
  {
    "text": "concept of modules a module can be",
    "start": "296340",
    "end": "298800"
  },
  {
    "start": "298000",
    "end": "313000"
  },
  {
    "text": "another file or a folder with a mod.rs",
    "start": "298800",
    "end": "301259"
  },
  {
    "text": "file inside of it",
    "start": "301259",
    "end": "302820"
  },
  {
    "text": "access control is permitted using the",
    "start": "302820",
    "end": "305040"
  },
  {
    "text": "pub keyword which specifies that Public",
    "start": "305040",
    "end": "307380"
  },
  {
    "text": "Access outside of the module is allowed",
    "start": "307380",
    "end": "309300"
  },
  {
    "text": "for the associated type trait or",
    "start": "309300",
    "end": "311580"
  },
  {
    "text": "attribute",
    "start": "311580",
    "end": "313560"
  },
  {
    "start": "313000",
    "end": "373000"
  },
  {
    "text": "memory is managed to rust differently",
    "start": "313560",
    "end": "315240"
  },
  {
    "text": "when compared to other programming",
    "start": "315240",
    "end": "316500"
  },
  {
    "text": "languages this is due to the borrow",
    "start": "316500",
    "end": "318600"
  },
  {
    "text": "Checker which forces the concept of",
    "start": "318600",
    "end": "320340"
  },
  {
    "text": "memory ownership at compile time rust is",
    "start": "320340",
    "end": "322919"
  },
  {
    "text": "Infamous for its steep learning curve",
    "start": "322919",
    "end": "324539"
  },
  {
    "text": "and this is due in part to the borrow",
    "start": "324539",
    "end": "326220"
  },
  {
    "text": "Checker which is pretty understandable",
    "start": "326220",
    "end": "328320"
  },
  {
    "text": "the borrow Checker can be pretty",
    "start": "328320",
    "end": "329759"
  },
  {
    "text": "difficult for newcomers to rust",
    "start": "329759",
    "end": "332580"
  },
  {
    "text": "the borrow Checker tracks the lifetime",
    "start": "332580",
    "end": "334500"
  },
  {
    "text": "of references and ensures they are used",
    "start": "334500",
    "end": "336240"
  },
  {
    "text": "in a way that is safe and compliant with",
    "start": "336240",
    "end": "337740"
  },
  {
    "text": "the ownership rules this is what drives",
    "start": "337740",
    "end": "339900"
  },
  {
    "text": "the core safety behind rust one of the",
    "start": "339900",
    "end": "342120"
  },
  {
    "text": "easiest ways to encounter the borrow",
    "start": "342120",
    "end": "343380"
  },
  {
    "text": "Checker is to create a variable and pass",
    "start": "343380",
    "end": "345120"
  },
  {
    "text": "it to a function",
    "start": "345120",
    "end": "346440"
  },
  {
    "text": "doing so actually passes the ownership",
    "start": "346440",
    "end": "348539"
  },
  {
    "text": "of that variable to the called function",
    "start": "348539",
    "end": "350699"
  },
  {
    "text": "which will then release it when the",
    "start": "350699",
    "end": "352199"
  },
  {
    "text": "function is completed",
    "start": "352199",
    "end": "353639"
  },
  {
    "text": "this means that the variable can no",
    "start": "353639",
    "end": "355320"
  },
  {
    "text": "longer be used after this function is",
    "start": "355320",
    "end": "356940"
  },
  {
    "text": "cooled",
    "start": "356940",
    "end": "357900"
  },
  {
    "text": "the easiest way to prevent this is to",
    "start": "357900",
    "end": "359880"
  },
  {
    "text": "change the parameter of the function to",
    "start": "359880",
    "end": "361320"
  },
  {
    "text": "accept a reference instead denoted by",
    "start": "361320",
    "end": "363840"
  },
  {
    "text": "the ampersand",
    "start": "363840",
    "end": "366500"
  },
  {
    "text": "or you can just clone that variable and",
    "start": "367139",
    "end": "369660"
  },
  {
    "text": "give ownership of it to the function",
    "start": "369660",
    "end": "371640"
  },
  {
    "text": "[Music]",
    "start": "371640",
    "end": "373320"
  },
  {
    "start": "373000",
    "end": "429000"
  },
  {
    "text": "rust provides the sued of tools to",
    "start": "373320",
    "end": "374940"
  },
  {
    "text": "enable modern workflows and improve the",
    "start": "374940",
    "end": "376919"
  },
  {
    "text": "developer experience the majority of",
    "start": "376919",
    "end": "379080"
  },
  {
    "text": "these tools can be installed using the",
    "start": "379080",
    "end": "380520"
  },
  {
    "text": "rest up component add command otherwise",
    "start": "380520",
    "end": "382860"
  },
  {
    "text": "they exist in rust or cargo already rust",
    "start": "382860",
    "end": "385919"
  },
  {
    "text": "format provides a tool to automatically",
    "start": "385919",
    "end": "387720"
  },
  {
    "text": "format rust code making it easier to",
    "start": "387720",
    "end": "390360"
  },
  {
    "text": "read write and maintain clippy named",
    "start": "390360",
    "end": "393600"
  },
  {
    "text": "after the infamous Microsoft Office",
    "start": "393600",
    "end": "395160"
  },
  {
    "text": "helper is a linting tool that can catch",
    "start": "395160",
    "end": "397440"
  },
  {
    "text": "common mistakes and improve the quality",
    "start": "397440",
    "end": "399240"
  },
  {
    "text": "of one's code",
    "start": "399240",
    "end": "400620"
  },
  {
    "text": "code completion can be added to any text",
    "start": "400620",
    "end": "402840"
  },
  {
    "text": "editor that supports LSP through the use",
    "start": "402840",
    "end": "405360"
  },
  {
    "text": "of rust analyzer",
    "start": "405360",
    "end": "407460"
  },
  {
    "text": "testing is supported from the ground up",
    "start": "407460",
    "end": "409319"
  },
  {
    "text": "with unit tests being written in the",
    "start": "409319",
    "end": "411120"
  },
  {
    "text": "same file as the code",
    "start": "411120",
    "end": "412740"
  },
  {
    "text": "the cargo test command will run all of",
    "start": "412740",
    "end": "414479"
  },
  {
    "text": "the tests found in your project",
    "start": "414479",
    "end": "416180"
  },
  {
    "text": "documentation can be generated from The",
    "start": "416180",
    "end": "418380"
  },
  {
    "text": "Code by using the cargo dock command",
    "start": "418380",
    "end": "420360"
  },
  {
    "text": "which will generate this code in a",
    "start": "420360",
    "end": "422340"
  },
  {
    "text": "standardized manner which helps to",
    "start": "422340",
    "end": "423780"
  },
  {
    "text": "improve the readability of consuming",
    "start": "423780",
    "end": "425639"
  },
  {
    "text": "documentation from multiple authors",
    "start": "425639",
    "end": "429240"
  },
  {
    "start": "429000",
    "end": "473000"
  },
  {
    "text": "rust is one of the more exciting",
    "start": "429240",
    "end": "430800"
  },
  {
    "text": "languages to appear in recent years and",
    "start": "430800",
    "end": "433020"
  },
  {
    "text": "brings with it a modern developer",
    "start": "433020",
    "end": "434460"
  },
  {
    "text": "experience with unmatched safety and",
    "start": "434460",
    "end": "436440"
  },
  {
    "text": "performance given how much developers",
    "start": "436440",
    "end": "438479"
  },
  {
    "text": "love to code in Rust it's worth",
    "start": "438479",
    "end": "440160"
  },
  {
    "text": "considering as a language to learn",
    "start": "440160",
    "end": "442199"
  },
  {
    "text": "Frost is a deep and Powerful language",
    "start": "442199",
    "end": "444060"
  },
  {
    "text": "and has a large amount of features and",
    "start": "444060",
    "end": "445680"
  },
  {
    "text": "knowledge to absorb in order to become",
    "start": "445680",
    "end": "447360"
  },
  {
    "text": "an expert at it this video has only",
    "start": "447360",
    "end": "449520"
  },
  {
    "text": "touched the surface and hasn't dared to",
    "start": "449520",
    "end": "451500"
  },
  {
    "text": "enter any of the more advanced features",
    "start": "451500",
    "end": "453300"
  },
  {
    "text": "I'm looking forward to creating more",
    "start": "453300",
    "end": "455400"
  },
  {
    "text": "content on Rust especially when it comes",
    "start": "455400",
    "end": "457740"
  },
  {
    "text": "to these Advanced features and helping",
    "start": "457740",
    "end": "459900"
  },
  {
    "text": "both you and myself to understand the",
    "start": "459900",
    "end": "462419"
  },
  {
    "text": "better",
    "start": "462419",
    "end": "464660"
  }
]