[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "there's a few rust crates available when",
    "start": "60",
    "end": "2040"
  },
  {
    "text": "it comes to working with postgres but",
    "start": "2040",
    "end": "4020"
  },
  {
    "text": "the one I've always gravitated to has",
    "start": "4020",
    "end": "5580"
  },
  {
    "text": "been sqlx or SQL X I'm pretty terrible",
    "start": "5580",
    "end": "9599"
  },
  {
    "text": "with names",
    "start": "9599",
    "end": "10860"
  },
  {
    "start": "10000",
    "end": "130000"
  },
  {
    "text": "naming issues aside to get started with",
    "start": "10860",
    "end": "12960"
  },
  {
    "text": "sqlx we first create a new cargo project",
    "start": "12960",
    "end": "16980"
  },
  {
    "text": "then we add both the Tokyo and sqlx",
    "start": "16980",
    "end": "19560"
  },
  {
    "text": "create to the cargo.tomel make sure to",
    "start": "19560",
    "end": "21600"
  },
  {
    "text": "enable the same feature Flags I have",
    "start": "21600",
    "end": "23220"
  },
  {
    "text": "which is the runtime Tokyo rust LS and",
    "start": "23220",
    "end": "25859"
  },
  {
    "text": "postgres feature flag",
    "start": "25859",
    "end": "28080"
  },
  {
    "text": "with the crates added to the cargo Tomo",
    "start": "28080",
    "end": "30119"
  },
  {
    "text": "we can run a quick cargo check to make",
    "start": "30119",
    "end": "31740"
  },
  {
    "text": "sure everything installs correctly",
    "start": "31740",
    "end": "34559"
  },
  {
    "text": "now we can connect to our database first",
    "start": "34559",
    "end": "37200"
  },
  {
    "text": "let's change our main function to be an",
    "start": "37200",
    "end": "38700"
  },
  {
    "text": "async function that is part of the Tokyo",
    "start": "38700",
    "end": "40739"
  },
  {
    "text": "runtime we'll also make sure that this",
    "start": "40739",
    "end": "42600"
  },
  {
    "text": "function returns a result",
    "start": "42600",
    "end": "44760"
  },
  {
    "text": "now we can go ahead and create our",
    "start": "44760",
    "end": "46200"
  },
  {
    "text": "database connection using a connection",
    "start": "46200",
    "end": "47820"
  },
  {
    "text": "URL which contains the configuration",
    "start": "47820",
    "end": "50039"
  },
  {
    "text": "details of our database instance",
    "start": "50039",
    "end": "52379"
  },
  {
    "text": "I'm assuming you already have a postgres",
    "start": "52379",
    "end": "54420"
  },
  {
    "text": "database set up and you know what those",
    "start": "54420",
    "end": "56699"
  },
  {
    "text": "configuration details are if not you can",
    "start": "56699",
    "end": "59399"
  },
  {
    "text": "check the source code in the description",
    "start": "59399",
    "end": "60960"
  },
  {
    "text": "which has some instructions on how to",
    "start": "60960",
    "end": "62520"
  },
  {
    "text": "set up your own postgres instance the",
    "start": "62520",
    "end": "65040"
  },
  {
    "text": "connection URL contains the database",
    "start": "65040",
    "end": "66780"
  },
  {
    "text": "type which is postgres in our case the",
    "start": "66780",
    "end": "69060"
  },
  {
    "text": "username password the host the port and",
    "start": "69060",
    "end": "73200"
  },
  {
    "text": "the database name",
    "start": "73200",
    "end": "74820"
  },
  {
    "text": "once we've connected we will receive a",
    "start": "74820",
    "end": "77400"
  },
  {
    "text": "connection type we can use this",
    "start": "77400",
    "end": "79020"
  },
  {
    "text": "connection type with the sqlx query to",
    "start": "79020",
    "end": "81780"
  },
  {
    "text": "actually run our queries against our",
    "start": "81780",
    "end": "83220"
  },
  {
    "text": "database connection",
    "start": "83220",
    "end": "85080"
  },
  {
    "text": "here you can see we're getting the",
    "start": "85080",
    "end": "86520"
  },
  {
    "text": "result of OnePlus One which is two",
    "start": "86520",
    "end": "89040"
  },
  {
    "text": "whilst having a single connection is",
    "start": "89040",
    "end": "91320"
  },
  {
    "text": "pretty good for getting up and running",
    "start": "91320",
    "end": "92580"
  },
  {
    "text": "it's actually recommended to use a",
    "start": "92580",
    "end": "94560"
  },
  {
    "text": "connection pool instead especially in",
    "start": "94560",
    "end": "96540"
  },
  {
    "text": "production this offers better",
    "start": "96540",
    "end": "98280"
  },
  {
    "text": "performance and concurrency when it",
    "start": "98280",
    "end": "100439"
  },
  {
    "text": "comes to reading and writing from the",
    "start": "100439",
    "end": "101759"
  },
  {
    "text": "database this is easily done with sqlx",
    "start": "101759",
    "end": "104400"
  },
  {
    "text": "by creating a PG pool type which has the",
    "start": "104400",
    "end": "107280"
  },
  {
    "text": "exact same interface as a connection so",
    "start": "107280",
    "end": "109140"
  },
  {
    "text": "we can use it interchangeably",
    "start": "109140",
    "end": "111899"
  },
  {
    "text": "now this is all well and good but uh",
    "start": "111899",
    "end": "113880"
  },
  {
    "text": "we're using postgres as some form of",
    "start": "113880",
    "end": "115920"
  },
  {
    "text": "calculator at the moment what we really",
    "start": "115920",
    "end": "117840"
  },
  {
    "text": "want to do is interact with data in our",
    "start": "117840",
    "end": "119700"
  },
  {
    "text": "database both reading it and writing it",
    "start": "119700",
    "end": "121979"
  },
  {
    "text": "to tables so in order to do that we're",
    "start": "121979",
    "end": "124439"
  },
  {
    "text": "going to need to create some tables now",
    "start": "124439",
    "end": "126719"
  },
  {
    "text": "the recommended way to do this when",
    "start": "126719",
    "end": "128160"
  },
  {
    "text": "working with SQL databases is to use",
    "start": "128160",
    "end": "130979"
  },
  {
    "start": "130000",
    "end": "214000"
  },
  {
    "text": "database migrations fortunately sqlx",
    "start": "130979",
    "end": "134220"
  },
  {
    "text": "provides migration support out of the",
    "start": "134220",
    "end": "136020"
  },
  {
    "text": "box using the migrate macro",
    "start": "136020",
    "end": "138720"
  },
  {
    "text": "first we can create our migrations in a",
    "start": "138720",
    "end": "141599"
  },
  {
    "text": "directory of our choosing in this case",
    "start": "141599",
    "end": "143340"
  },
  {
    "text": "we're going to use the slash migrations",
    "start": "143340",
    "end": "145020"
  },
  {
    "text": "directory in the root of our cargo",
    "start": "145020",
    "end": "147120"
  },
  {
    "text": "project by default this is where sqlx",
    "start": "147120",
    "end": "149819"
  },
  {
    "text": "will search for migrations in this",
    "start": "149819",
    "end": "152459"
  },
  {
    "text": "directory we're going to create a new",
    "start": "152459",
    "end": "153900"
  },
  {
    "text": "file which is going to have our initial",
    "start": "153900",
    "end": "155459"
  },
  {
    "text": "database migration inside of it the name",
    "start": "155459",
    "end": "157739"
  },
  {
    "text": "of this file has to be the version",
    "start": "157739",
    "end": "159860"
  },
  {
    "text": "underscore description dot SQL the",
    "start": "159860",
    "end": "163319"
  },
  {
    "text": "version in this case is going to be zero",
    "start": "163319",
    "end": "165180"
  },
  {
    "text": "zero zero one this version has to be",
    "start": "165180",
    "end": "167040"
  },
  {
    "text": "sequential so that sqlx can know in",
    "start": "167040",
    "end": "169739"
  },
  {
    "text": "which order to run your database",
    "start": "169739",
    "end": "171239"
  },
  {
    "text": "migrations inside of the dot SQL file we",
    "start": "171239",
    "end": "173700"
  },
  {
    "text": "have our create table statement which is",
    "start": "173700",
    "end": "176040"
  },
  {
    "text": "going to create a new books table for",
    "start": "176040",
    "end": "177959"
  },
  {
    "text": "storing data on books",
    "start": "177959",
    "end": "180060"
  },
  {
    "text": "now back in our main code we can",
    "start": "180060",
    "end": "181800"
  },
  {
    "text": "actually call the migrate macro with our",
    "start": "181800",
    "end": "183780"
  },
  {
    "text": "database connection",
    "start": "183780",
    "end": "185220"
  },
  {
    "text": "next we can run our code and then check",
    "start": "185220",
    "end": "187680"
  },
  {
    "text": "our database to see if the table was",
    "start": "187680",
    "end": "189420"
  },
  {
    "text": "created",
    "start": "189420",
    "end": "190800"
  },
  {
    "text": "there is one caveat with using sqlx for",
    "start": "190800",
    "end": "193620"
  },
  {
    "text": "migration so they mentioned the",
    "start": "193620",
    "end": "194940"
  },
  {
    "text": "documentation",
    "start": "194940",
    "end": "196260"
  },
  {
    "text": "in order to handle changes in the dot",
    "start": "196260",
    "end": "199080"
  },
  {
    "text": "SQL files without code changes a cargo",
    "start": "199080",
    "end": "201300"
  },
  {
    "text": "build script needs to be added",
    "start": "201300",
    "end": "202739"
  },
  {
    "text": "fortunately this is easily done using",
    "start": "202739",
    "end": "204900"
  },
  {
    "text": "the sqlx CLI which can also be installed",
    "start": "204900",
    "end": "207599"
  },
  {
    "text": "using cargo",
    "start": "207599",
    "end": "209459"
  },
  {
    "text": "once installed the following command",
    "start": "209459",
    "end": "211260"
  },
  {
    "text": "adds in the build script which is all",
    "start": "211260",
    "end": "213000"
  },
  {
    "text": "that we need",
    "start": "213000",
    "end": "214140"
  },
  {
    "start": "214000",
    "end": "286000"
  },
  {
    "text": "now that we have our table set up we",
    "start": "214140",
    "end": "216060"
  },
  {
    "text": "want to probably write some data to the",
    "start": "216060",
    "end": "217440"
  },
  {
    "text": "database sqlx is not an orm database",
    "start": "217440",
    "end": "220440"
  },
  {
    "text": "driver orm stands for object relational",
    "start": "220440",
    "end": "223500"
  },
  {
    "text": "mapping it basically allows you to map",
    "start": "223500",
    "end": "226739"
  },
  {
    "text": "database commands and queries into",
    "start": "226739",
    "end": "228840"
  },
  {
    "text": "objects because sqlx is not an orm this",
    "start": "228840",
    "end": "233220"
  },
  {
    "text": "means we have to construct our SQL",
    "start": "233220",
    "end": "234780"
  },
  {
    "text": "queries by hand let's go ahead and",
    "start": "234780",
    "end": "236940"
  },
  {
    "text": "create a new struct that will represent",
    "start": "236940",
    "end": "238799"
  },
  {
    "text": "the database table that we have book",
    "start": "238799",
    "end": "241440"
  },
  {
    "text": "now we're going to write a new function",
    "start": "241440",
    "end": "242819"
  },
  {
    "text": "called create which will take an",
    "start": "242819",
    "end": "244860"
  },
  {
    "text": "instance of the book and the database",
    "start": "244860",
    "end": "246900"
  },
  {
    "text": "connection and we'll create an insert",
    "start": "246900",
    "end": "248640"
  },
  {
    "text": "query using the book",
    "start": "248640",
    "end": "250680"
  },
  {
    "text": "notice that we're using the bind",
    "start": "250680",
    "end": "252659"
  },
  {
    "text": "function to bind our input parameters",
    "start": "252659",
    "end": "255120"
  },
  {
    "text": "into the numbered parameters in the SQL",
    "start": "255120",
    "end": "257940"
  },
  {
    "text": "query after that we can call the execute",
    "start": "257940",
    "end": "260340"
  },
  {
    "text": "function on that query and await for the",
    "start": "260340",
    "end": "262320"
  },
  {
    "text": "result",
    "start": "262320",
    "end": "263100"
  },
  {
    "text": "let's go ahead and create a new book",
    "start": "263100",
    "end": "264540"
  },
  {
    "text": "which is going to be Salem's Lot by",
    "start": "264540",
    "end": "266520"
  },
  {
    "text": "Stephen King",
    "start": "266520",
    "end": "269000"
  },
  {
    "text": "now if we check the database we can see",
    "start": "269639",
    "end": "271560"
  },
  {
    "text": "that our book has been created",
    "start": "271560",
    "end": "273419"
  },
  {
    "text": "updating is a very similar process",
    "start": "273419",
    "end": "275780"
  },
  {
    "text": "instead we're going to create a new",
    "start": "275780",
    "end": "277740"
  },
  {
    "text": "function called update which will take",
    "start": "277740",
    "end": "279600"
  },
  {
    "text": "in an ISBN and the actual book we want",
    "start": "279600",
    "end": "281820"
  },
  {
    "text": "to replace it with",
    "start": "281820",
    "end": "283199"
  },
  {
    "text": "again we use the bind functions followed",
    "start": "283199",
    "end": "286380"
  },
  {
    "start": "286000",
    "end": "406000"
  },
  {
    "text": "by the execute function",
    "start": "286380",
    "end": "289080"
  },
  {
    "text": "and here we're able to change details",
    "start": "289080",
    "end": "291540"
  },
  {
    "text": "about our book using our new update",
    "start": "291540",
    "end": "294479"
  },
  {
    "text": "method",
    "start": "294479",
    "end": "296160"
  },
  {
    "text": "with writing being one half of the",
    "start": "296160",
    "end": "297780"
  },
  {
    "text": "puzzle the other half is reading or",
    "start": "297780",
    "end": "299699"
  },
  {
    "text": "fetching data from our database",
    "start": "299699",
    "end": "302280"
  },
  {
    "text": "we've seen this before but we can use",
    "start": "302280",
    "end": "304080"
  },
  {
    "text": "the query function in order to pull rows",
    "start": "304080",
    "end": "306180"
  },
  {
    "text": "out of our table",
    "start": "306180",
    "end": "307560"
  },
  {
    "text": "once we have the row from our table we",
    "start": "307560",
    "end": "309840"
  },
  {
    "text": "can use the get function to obtain the",
    "start": "309840",
    "end": "311880"
  },
  {
    "text": "value by its name or its index make sure",
    "start": "311880",
    "end": "314520"
  },
  {
    "text": "to import the sqlx row trait",
    "start": "314520",
    "end": "318600"
  },
  {
    "text": "you can see to do this we're using a",
    "start": "318600",
    "end": "320820"
  },
  {
    "text": "fetch one query but there are actually",
    "start": "320820",
    "end": "322919"
  },
  {
    "text": "four methods to obtain these rows from a",
    "start": "322919",
    "end": "325560"
  },
  {
    "text": "query",
    "start": "325560",
    "end": "326400"
  },
  {
    "text": "these are fetch one fetch optional fetch",
    "start": "326400",
    "end": "329340"
  },
  {
    "text": "all and fetch the fetch one method is",
    "start": "329340",
    "end": "332639"
  },
  {
    "text": "used for pulling a single row out of our",
    "start": "332639",
    "end": "334800"
  },
  {
    "text": "database this method does assume that",
    "start": "334800",
    "end": "337199"
  },
  {
    "text": "the row exists however and will return",
    "start": "337199",
    "end": "338820"
  },
  {
    "text": "an error if it does not",
    "start": "338820",
    "end": "340919"
  },
  {
    "text": "the fetch optional method is very",
    "start": "340919",
    "end": "342660"
  },
  {
    "text": "similar to the fetch one method except",
    "start": "342660",
    "end": "345060"
  },
  {
    "text": "it returns an optional which will be",
    "start": "345060",
    "end": "347039"
  },
  {
    "text": "none instead of an error being thrown if",
    "start": "347039",
    "end": "349320"
  },
  {
    "text": "no rows are found",
    "start": "349320",
    "end": "351419"
  },
  {
    "text": "the fetch all method will return all of",
    "start": "351419",
    "end": "354000"
  },
  {
    "text": "the rows that match the query as a",
    "start": "354000",
    "end": "355800"
  },
  {
    "text": "vector which can then be iterated or",
    "start": "355800",
    "end": "357479"
  },
  {
    "text": "mapped to convert into the type we're",
    "start": "357479",
    "end": "359220"
  },
  {
    "text": "expecting which is our book",
    "start": "359220",
    "end": "361500"
  },
  {
    "text": "and finally the fetch method returns all",
    "start": "361500",
    "end": "363780"
  },
  {
    "text": "the values as well but as a stream like",
    "start": "363780",
    "end": "365820"
  },
  {
    "text": "type that can then be iterated through",
    "start": "365820",
    "end": "368100"
  },
  {
    "text": "the rows in the results set this is a",
    "start": "368100",
    "end": "370800"
  },
  {
    "text": "more asynchronous approach than the",
    "start": "370800",
    "end": "372539"
  },
  {
    "text": "fetch all method which can be useful",
    "start": "372539",
    "end": "374400"
  },
  {
    "text": "when working with larger data sets the",
    "start": "374400",
    "end": "376320"
  },
  {
    "text": "try next method that I'm using also",
    "start": "376320",
    "end": "378060"
  },
  {
    "text": "requires the Futures crate so make sure",
    "start": "378060",
    "end": "379740"
  },
  {
    "text": "to add that to your cargo.com as well",
    "start": "379740",
    "end": "382560"
  },
  {
    "text": "as well as pulling data out by rows sqlx",
    "start": "382560",
    "end": "385800"
  },
  {
    "text": "provides some magic for automatically",
    "start": "385800",
    "end": "387960"
  },
  {
    "text": "converting those rows into concrete",
    "start": "387960",
    "end": "389759"
  },
  {
    "text": "types using the query as method",
    "start": "389759",
    "end": "392759"
  },
  {
    "text": "to do so we first need to derive the",
    "start": "392759",
    "end": "394919"
  },
  {
    "text": "from row type on our bookstruct then we",
    "start": "394919",
    "end": "397259"
  },
  {
    "text": "can use the turbo fish operator to",
    "start": "397259",
    "end": "398940"
  },
  {
    "text": "describe the type we want to convert it",
    "start": "398940",
    "end": "400380"
  },
  {
    "text": "into",
    "start": "400380",
    "end": "401220"
  },
  {
    "text": "then we have our Vector of books with",
    "start": "401220",
    "end": "403500"
  },
  {
    "text": "far less boilerplate Magic",
    "start": "403500",
    "end": "406740"
  },
  {
    "start": "406000",
    "end": "456000"
  },
  {
    "text": "often when working with databases there",
    "start": "406740",
    "end": "408780"
  },
  {
    "text": "are times when you'll want to perform a",
    "start": "408780",
    "end": "410220"
  },
  {
    "text": "group of operations atomically this",
    "start": "410220",
    "end": "412440"
  },
  {
    "text": "means that the operations occur together",
    "start": "412440",
    "end": "414240"
  },
  {
    "text": "all at once or not at all",
    "start": "414240",
    "end": "416699"
  },
  {
    "text": "databases provide this through the use",
    "start": "416699",
    "end": "418860"
  },
  {
    "text": "of transactions",
    "start": "418860",
    "end": "420960"
  },
  {
    "text": "starting a transaction is easy in sqlx",
    "start": "420960",
    "end": "423900"
  },
  {
    "text": "all we need to do is call the begin",
    "start": "423900",
    "end": "425759"
  },
  {
    "text": "function of our connection or pool which",
    "start": "425759",
    "end": "428580"
  },
  {
    "text": "returns our transaction type",
    "start": "428580",
    "end": "431340"
  },
  {
    "text": "we can then use this transaction type as",
    "start": "431340",
    "end": "433800"
  },
  {
    "text": "our connection type for our queries",
    "start": "433800",
    "end": "437340"
  },
  {
    "text": "once we're done we can either apply our",
    "start": "437340",
    "end": "439319"
  },
  {
    "text": "queries using the commit function or",
    "start": "439319",
    "end": "441180"
  },
  {
    "text": "revert them using the rollback method",
    "start": "441180",
    "end": "443039"
  },
  {
    "text": "one quick thing to mention is all of",
    "start": "443039",
    "end": "444900"
  },
  {
    "text": "these queries are prepared queries by",
    "start": "444900",
    "end": "446400"
  },
  {
    "text": "default sqlx automatically prepares",
    "start": "446400",
    "end": "449220"
  },
  {
    "text": "queries that have parameters associated",
    "start": "449220",
    "end": "451080"
  },
  {
    "text": "with them which improves performance",
    "start": "451080",
    "end": "453000"
  },
  {
    "text": "when performing the same queries",
    "start": "453000",
    "end": "454919"
  },
  {
    "text": "multiple times",
    "start": "454919",
    "end": "456539"
  },
  {
    "start": "456000",
    "end": "545000"
  },
  {
    "text": "sqlx also provides a number of feature",
    "start": "456539",
    "end": "459000"
  },
  {
    "text": "Flags to enable usage of popular rust",
    "start": "459000",
    "end": "461039"
  },
  {
    "text": "crates with postgres types",
    "start": "461039",
    "end": "463440"
  },
  {
    "text": "Json columns are supported using the",
    "start": "463440",
    "end": "465419"
  },
  {
    "text": "Json feature flag",
    "start": "465419",
    "end": "467580"
  },
  {
    "text": "with the flag enabled we can then set up",
    "start": "467580",
    "end": "469800"
  },
  {
    "text": "our data structures to use surday which",
    "start": "469800",
    "end": "471840"
  },
  {
    "text": "SQL X uses internally",
    "start": "471840",
    "end": "474120"
  },
  {
    "text": "this allows us to encode and decode Json",
    "start": "474120",
    "end": "476340"
  },
  {
    "text": "when reading or writing data from",
    "start": "476340",
    "end": "477780"
  },
  {
    "text": "columns",
    "start": "477780",
    "end": "480120"
  },
  {
    "text": "euids are supported by enabling the uuid",
    "start": "480120",
    "end": "482639"
  },
  {
    "text": "feature flag",
    "start": "482639",
    "end": "483960"
  },
  {
    "text": "we can then use the uuidcrate to write",
    "start": "483960",
    "end": "486240"
  },
  {
    "text": "to and read from postgres uuid columns",
    "start": "486240",
    "end": "490500"
  },
  {
    "text": "the Chrono feature allows us to use the",
    "start": "490500",
    "end": "492419"
  },
  {
    "text": "Chrono crate for timestamps with the",
    "start": "492419",
    "end": "494759"
  },
  {
    "text": "feature flag enabled and the Chrono",
    "start": "494759",
    "end": "496500"
  },
  {
    "text": "crate added timestamps and dates can be",
    "start": "496500",
    "end": "498720"
  },
  {
    "text": "mapped from their Associated chronotypes",
    "start": "498720",
    "end": "500580"
  },
  {
    "text": "into postgres",
    "start": "500580",
    "end": "502800"
  },
  {
    "text": "the IP network feature allows for",
    "start": "502800",
    "end": "505259"
  },
  {
    "text": "interfacing with IP cytotypes within",
    "start": "505259",
    "end": "507419"
  },
  {
    "text": "postgres after enabling the feature in",
    "start": "507419",
    "end": "510060"
  },
  {
    "text": "the cargo.tomel one can use the embedded",
    "start": "510060",
    "end": "512760"
  },
  {
    "text": "ipnetwork type within the sqlx in order",
    "start": "512760",
    "end": "515700"
  },
  {
    "text": "to interface with cytotypes",
    "start": "515700",
    "end": "518880"
  },
  {
    "text": "as well as types another feature flag",
    "start": "518880",
    "end": "520800"
  },
  {
    "text": "that sqlx provides is the macros feature",
    "start": "520800",
    "end": "523740"
  },
  {
    "text": "these macros provide drop-in",
    "start": "523740",
    "end": "525600"
  },
  {
    "text": "replacements for the query functions",
    "start": "525600",
    "end": "527220"
  },
  {
    "text": "we've been using whilst also it bringing",
    "start": "527220",
    "end": "529200"
  },
  {
    "text": "in powerful compile time verification",
    "start": "529200",
    "end": "531380"
  },
  {
    "text": "this compile-time verification performs",
    "start": "531380",
    "end": "533940"
  },
  {
    "text": "static type checking of our queries to",
    "start": "533940",
    "end": "535740"
  },
  {
    "text": "our database",
    "start": "535740",
    "end": "537060"
  },
  {
    "text": "in order to use these macros the",
    "start": "537060",
    "end": "538980"
  },
  {
    "text": "database URL environment variable must",
    "start": "538980",
    "end": "540959"
  },
  {
    "text": "be set and can be done so easily using a",
    "start": "540959",
    "end": "543360"
  },
  {
    "text": "DOT EMV file",
    "start": "543360",
    "end": "545399"
  },
  {
    "start": "545000",
    "end": "564000"
  },
  {
    "text": "the last feature I find useful is the",
    "start": "545399",
    "end": "547500"
  },
  {
    "text": "support for postgres's asynchronous",
    "start": "547500",
    "end": "549180"
  },
  {
    "text": "notifications using the listen and",
    "start": "549180",
    "end": "551279"
  },
  {
    "text": "notify commands by using the PG listener",
    "start": "551279",
    "end": "554279"
  },
  {
    "text": "type we can specify the topics we want",
    "start": "554279",
    "end": "556380"
  },
  {
    "text": "to listen for and wait until we receive",
    "start": "556380",
    "end": "558600"
  },
  {
    "text": "them this allows us to use postgres as",
    "start": "558600",
    "end": "560880"
  },
  {
    "text": "an asynchronous event notification",
    "start": "560880",
    "end": "562500"
  },
  {
    "text": "system",
    "start": "562500",
    "end": "564180"
  },
  {
    "start": "564000",
    "end": "587000"
  },
  {
    "text": "sqlx is one of my favorite crates to use",
    "start": "564180",
    "end": "566580"
  },
  {
    "text": "for asynchronous rust I really",
    "start": "566580",
    "end": "568680"
  },
  {
    "text": "appreciate the level of support it has",
    "start": "568680",
    "end": "570300"
  },
  {
    "text": "for core postgres features and the",
    "start": "570300",
    "end": "572160"
  },
  {
    "text": "integration with many popular rust",
    "start": "572160",
    "end": "573600"
  },
  {
    "text": "crates I'd also consider using it for",
    "start": "573600",
    "end": "575940"
  },
  {
    "text": "other databases such as MySQL or SQL",
    "start": "575940",
    "end": "579120"
  },
  {
    "text": "Lite I hope you enjoyed this video and",
    "start": "579120",
    "end": "581700"
  },
  {
    "text": "I'll see you on the next one",
    "start": "581700",
    "end": "584899"
  }
]