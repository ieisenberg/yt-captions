[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "go 1.22 is the gift that keeps on giving",
    "start": "80",
    "end": "3520"
  },
  {
    "text": "with the biggest features being the",
    "start": "3520",
    "end": "5200"
  },
  {
    "text": "enhanced routing capabilities Loop",
    "start": "5200",
    "end": "7279"
  },
  {
    "text": "variables that are now iteration scoped",
    "start": "7279",
    "end": "9519"
  },
  {
    "text": "and the new and improved math Rand slv2",
    "start": "9519",
    "end": "12679"
  },
  {
    "text": "package whilst these have been the",
    "start": "12679",
    "end": "14440"
  },
  {
    "text": "biggest Headliners of this new release",
    "start": "14440",
    "end": "16520"
  },
  {
    "text": "there's actually another that I think is",
    "start": "16520",
    "end": "18199"
  },
  {
    "text": "going to have a big impact on some of",
    "start": "18199",
    "end": "19960"
  },
  {
    "text": "the common coding patterns found in go",
    "start": "19960",
    "end": "22400"
  },
  {
    "text": "this is the new experimental feature",
    "start": "22400",
    "end": "24359"
  },
  {
    "start": "23000",
    "end": "115000"
  },
  {
    "text": "called range Funk and after playing",
    "start": "24359",
    "end": "26640"
  },
  {
    "text": "around with it for a couple of weeks I",
    "start": "26640",
    "end": "28480"
  },
  {
    "text": "think it has the potential to bring some",
    "start": "28480",
    "end": "30080"
  },
  {
    "text": "big changes to the language but also a",
    "start": "30080",
    "end": "32238"
  },
  {
    "text": "couple of risks this feature allows you",
    "start": "32239",
    "end": "34399"
  },
  {
    "text": "to create iterators from functions which",
    "start": "34399",
    "end": "36719"
  },
  {
    "text": "you can then use with the range keyword",
    "start": "36719",
    "end": "38960"
  },
  {
    "text": "for example here I have an iterator",
    "start": "38960",
    "end": "40920"
  },
  {
    "text": "function named backwards which is a",
    "start": "40920",
    "end": "42840"
  },
  {
    "text": "function to iterate over a slice of",
    "start": "42840",
    "end": "44640"
  },
  {
    "text": "integers in Reverse we can invoke this",
    "start": "44640",
    "end": "47160"
  },
  {
    "text": "function similar to how we would",
    "start": "47160",
    "end": "48440"
  },
  {
    "text": "typically perform iteration and go by",
    "start": "48440",
    "end": "50559"
  },
  {
    "text": "using the range keyword if I run my code",
    "start": "50559",
    "end": "53120"
  },
  {
    "text": "with the following command you can see",
    "start": "53120",
    "end": "54640"
  },
  {
    "text": "that it prints the elements of the slice",
    "start": "54640",
    "end": "56320"
  },
  {
    "text": "in Reverse pretty cool but it's not",
    "start": "56320",
    "end": "58640"
  },
  {
    "text": "exactly the most exciting example",
    "start": "58640",
    "end": "60719"
  },
  {
    "text": "instead what about a range iterator that",
    "start": "60719",
    "end": "62600"
  },
  {
    "text": "we can use to convert values using a",
    "start": "62600",
    "end": "64720"
  },
  {
    "text": "function such as converting a slice of",
    "start": "64720",
    "end": "66680"
  },
  {
    "text": "ins into their squared values or perhaps",
    "start": "66680",
    "end": "69000"
  },
  {
    "text": "just converting them into another type",
    "start": "69000",
    "end": "71240"
  },
  {
    "text": "we might also see one that allows us to",
    "start": "71240",
    "end": "72920"
  },
  {
    "text": "perform filtering based on a predicate",
    "start": "72920",
    "end": "75119"
  },
  {
    "text": "such as whether or not an integer value",
    "start": "75119",
    "end": "77080"
  },
  {
    "text": "is odd these are all higher order",
    "start": "77080",
    "end": "79119"
  },
  {
    "text": "functions which have typically not made",
    "start": "79119",
    "end": "80880"
  },
  {
    "text": "their way into the go programming",
    "start": "80880",
    "end": "82479"
  },
  {
    "text": "language however with the new Range Funk",
    "start": "82479",
    "end": "84560"
  },
  {
    "text": "feature they're certainly more likely to",
    "start": "84560",
    "end": "86680"
  },
  {
    "text": "appear whilst I expect these sorts of",
    "start": "86680",
    "end": "88720"
  },
  {
    "text": "iterators to be rather controversial I",
    "start": "88720",
    "end": "90840"
  },
  {
    "text": "still see some rather practical uses",
    "start": "90840",
    "end": "92680"
  },
  {
    "text": "when it comes to function iterators take",
    "start": "92680",
    "end": "94880"
  },
  {
    "text": "for example this iterator function named",
    "start": "94880",
    "end": "96920"
  },
  {
    "text": "parallel which was inspired by the rayon",
    "start": "96920",
    "end": "99119"
  },
  {
    "text": "crate found in the rust programming",
    "start": "99119",
    "end": "100680"
  },
  {
    "text": "language this function allows me to",
    "start": "100680",
    "end": "102520"
  },
  {
    "text": "iterate over elements of a slice",
    "start": "102520",
    "end": "104119"
  },
  {
    "text": "concurrently which is a rather common",
    "start": "104119",
    "end": "106040"
  },
  {
    "text": "pattern when it comes to go before we",
    "start": "106040",
    "end": "107719"
  },
  {
    "text": "look at this function iterator in detail",
    "start": "107719",
    "end": "109600"
  },
  {
    "text": "let's take a look at how this pattern is",
    "start": "109600",
    "end": "111119"
  },
  {
    "text": "normally implemented feel free to skip",
    "start": "111119",
    "end": "113159"
  },
  {
    "text": "this section if you already know how to",
    "start": "113159",
    "end": "114640"
  },
  {
    "text": "do this to start here I have some simple",
    "start": "114640",
    "end": "117360"
  },
  {
    "start": "115000",
    "end": "226000"
  },
  {
    "text": "code this code generates a number of",
    "start": "117360",
    "end": "119520"
  },
  {
    "text": "events iterates over them and calls the",
    "start": "119520",
    "end": "121600"
  },
  {
    "text": "process function on each one if I go",
    "start": "121600",
    "end": "123840"
  },
  {
    "text": "ahead and run this code you can see it",
    "start": "123840",
    "end": "125320"
  },
  {
    "text": "takes a bit of time to complete this is",
    "start": "125320",
    "end": "127640"
  },
  {
    "text": "because the process function can take up",
    "start": "127640",
    "end": "129599"
  },
  {
    "text": "to a full second and we happen to be",
    "start": "129599",
    "end": "131879"
  },
  {
    "text": "calling it five times a simple way to",
    "start": "131879",
    "end": "134360"
  },
  {
    "text": "speed this up is to call the process",
    "start": "134360",
    "end": "136080"
  },
  {
    "text": "functions concurrently we can achieve",
    "start": "136080",
    "end": "138120"
  },
  {
    "text": "this pretty easily and go by using the",
    "start": "138120",
    "end": "139920"
  },
  {
    "text": "go keyword which will run the process",
    "start": "139920",
    "end": "142000"
  },
  {
    "text": "function inside of a go routine however",
    "start": "142000",
    "end": "144440"
  },
  {
    "text": "when I go to run this code we'll see",
    "start": "144440",
    "end": "146040"
  },
  {
    "text": "that our application exits before any of",
    "start": "146040",
    "end": "148160"
  },
  {
    "text": "the events are processed this happens",
    "start": "148160",
    "end": "150120"
  },
  {
    "text": "because we reach the end of the main",
    "start": "150120",
    "end": "151599"
  },
  {
    "text": "function before any of the go routines",
    "start": "151599",
    "end": "153319"
  },
  {
    "text": "are finished or in this case before",
    "start": "153319",
    "end": "155319"
  },
  {
    "text": "they've even started to solve this we",
    "start": "155319",
    "end": "157440"
  },
  {
    "text": "can use a concurrency primitive founding",
    "start": "157440",
    "end": "159560"
  },
  {
    "text": "go called a weit group which lives",
    "start": "159560",
    "end": "161680"
  },
  {
    "text": "inside of the sync package this type",
    "start": "161680",
    "end": "163840"
  },
  {
    "text": "enables us to wait for a collection of",
    "start": "163840",
    "end": "165879"
  },
  {
    "text": "go routines to finish which will allow",
    "start": "165879",
    "end": "167680"
  },
  {
    "text": "us to block the main function until all",
    "start": "167680",
    "end": "169440"
  },
  {
    "text": "of the events have been processed in",
    "start": "169440",
    "end": "171280"
  },
  {
    "text": "order to use a weight group let's first",
    "start": "171280",
    "end": "173040"
  },
  {
    "text": "import the sync package followed by",
    "start": "173040",
    "end": "175280"
  },
  {
    "text": "creating a new weight group variable",
    "start": "175280",
    "end": "176959"
  },
  {
    "text": "called WG then inside of our for Loop",
    "start": "176959",
    "end": "179280"
  },
  {
    "text": "we'll call the weight group. add method",
    "start": "179280",
    "end": "181319"
  },
  {
    "text": "passing in the value of one the ad",
    "start": "181319",
    "end": "183480"
  },
  {
    "text": "method is used to increase the internal",
    "start": "183480",
    "end": "185319"
  },
  {
    "text": "counter of the weight group which is",
    "start": "185319",
    "end": "187120"
  },
  {
    "text": "used to determine when the weight group",
    "start": "187120",
    "end": "188840"
  },
  {
    "text": "should stop blocking then to decrement",
    "start": "188840",
    "end": "190959"
  },
  {
    "text": "this counter we can call the weight",
    "start": "190959",
    "end": "192440"
  },
  {
    "text": "groups done method which we'll need to",
    "start": "192440",
    "end": "194360"
  },
  {
    "text": "do once our process function has",
    "start": "194360",
    "end": "196000"
  },
  {
    "text": "completed before we can do that however",
    "start": "196000",
    "end": "198080"
  },
  {
    "text": "we need to wrap our process function",
    "start": "198080",
    "end": "199799"
  },
  {
    "text": "inside of a closure which will be used",
    "start": "199799",
    "end": "201640"
  },
  {
    "text": "for our go routine instead now we can",
    "start": "201640",
    "end": "203879"
  },
  {
    "text": "call the done function of the weight",
    "start": "203879",
    "end": "205400"
  },
  {
    "text": "group using a defer keyword which will",
    "start": "205400",
    "end": "207680"
  },
  {
    "text": "cause it to run when the closure exits",
    "start": "207680",
    "end": "209840"
  },
  {
    "text": "the last thing we need to do is call the",
    "start": "209840",
    "end": "211400"
  },
  {
    "text": "weight method of the weight group after",
    "start": "211400",
    "end": "213040"
  },
  {
    "text": "our for Loop this will cause our main",
    "start": "213040",
    "end": "214760"
  },
  {
    "text": "function to block until all of the go",
    "start": "214760",
    "end": "216560"
  },
  {
    "text": "routines have completed and called the",
    "start": "216560",
    "end": "218159"
  },
  {
    "text": "done method now when I go and run this",
    "start": "218159",
    "end": "220040"
  },
  {
    "text": "code you can see that all of our process",
    "start": "220040",
    "end": "221720"
  },
  {
    "text": "functions start in parallel and our",
    "start": "221720",
    "end": "223680"
  },
  {
    "text": "application waits for them to complete",
    "start": "223680",
    "end": "225439"
  },
  {
    "text": "before it exits with that we've managed",
    "start": "225439",
    "end": "227519"
  },
  {
    "start": "226000",
    "end": "357000"
  },
  {
    "text": "to implement parallel iteration in go as",
    "start": "227519",
    "end": "230040"
  },
  {
    "text": "I mentioned before this is a pretty",
    "start": "230040",
    "end": "231640"
  },
  {
    "text": "common pattern when it comes to the",
    "start": "231640",
    "end": "232959"
  },
  {
    "text": "programming language however when you",
    "start": "232959",
    "end": "234920"
  },
  {
    "text": "look at this code you'll notice that",
    "start": "234920",
    "end": "236519"
  },
  {
    "text": "there's quite a bit of boiler plate",
    "start": "236519",
    "end": "238200"
  },
  {
    "text": "which makes it harder to see the logic",
    "start": "238200",
    "end": "239840"
  },
  {
    "text": "Beyond The Parallel iteration this can",
    "start": "239840",
    "end": "241879"
  },
  {
    "text": "be solved by implementing it as a",
    "start": "241879",
    "end": "243640"
  },
  {
    "text": "function iterator to do so let's first",
    "start": "243640",
    "end": "246040"
  },
  {
    "text": "create a new function called parallel",
    "start": "246040",
    "end": "248000"
  },
  {
    "text": "which will accept a slice of events this",
    "start": "248000",
    "end": "250439"
  },
  {
    "text": "is the slice we wish to iterate over",
    "start": "250439",
    "end": "252360"
  },
  {
    "text": "concurrently next we need to define the",
    "start": "252360",
    "end": "254720"
  },
  {
    "text": "return value which is a function that",
    "start": "254720",
    "end": "256560"
  },
  {
    "text": "accepts another function as its",
    "start": "256560",
    "end": "258320"
  },
  {
    "text": "parameter this parameter function is",
    "start": "258320",
    "end": "260359"
  },
  {
    "text": "called the yield function and represents",
    "start": "260359",
    "end": "262400"
  },
  {
    "text": "the iterator of the loop with the",
    "start": "262400",
    "end": "264199"
  },
  {
    "text": "arguments given to it being the loop",
    "start": "264199",
    "end": "266160"
  },
  {
    "text": "variables the first value we're",
    "start": "266160",
    "end": "268080"
  },
  {
    "text": "providing is an integer which which will",
    "start": "268080",
    "end": "269960"
  },
  {
    "text": "represent the index in the slice that",
    "start": "269960",
    "end": "271560"
  },
  {
    "text": "this current iteration is at the second",
    "start": "271560",
    "end": "273720"
  },
  {
    "text": "argument is an event which will",
    "start": "273720",
    "end": "275520"
  },
  {
    "text": "represent the value in the slice at the",
    "start": "275520",
    "end": "277680"
  },
  {
    "text": "current iteration index these two values",
    "start": "277680",
    "end": "280320"
  },
  {
    "text": "correlate with the same values you'd",
    "start": "280320",
    "end": "281919"
  },
  {
    "text": "normally expect when ranging over a",
    "start": "281919",
    "end": "283880"
  },
  {
    "text": "slice lastly the yield function needs to",
    "start": "283880",
    "end": "286560"
  },
  {
    "text": "return a Boolean in order for it to",
    "start": "286560",
    "end": "288520"
  },
  {
    "text": "conform to what the range Funk feature",
    "start": "288520",
    "end": "290520"
  },
  {
    "text": "expects with that we have our function",
    "start": "290520",
    "end": "292680"
  },
  {
    "text": "signature defined the next thing to do",
    "start": "292680",
    "end": "294680"
  },
  {
    "text": "is to move on to our implementation",
    "start": "294680",
    "end": "296720"
  },
  {
    "text": "first add in the following line to",
    "start": "296720",
    "end": "298520"
  },
  {
    "text": "return a closure that EX steps our yield",
    "start": "298520",
    "end": "300520"
  },
  {
    "text": "function then inside of this closure is",
    "start": "300520",
    "end": "302520"
  },
  {
    "text": "where we want to add our logic let's",
    "start": "302520",
    "end": "304479"
  },
  {
    "text": "start with adding in the sync. we group",
    "start": "304479",
    "end": "306639"
  },
  {
    "text": "similar to our existing implementation",
    "start": "306639",
    "end": "308919"
  },
  {
    "text": "then let's go ahead and set the number",
    "start": "308919",
    "end": "310360"
  },
  {
    "text": "we want to wait for using the wg. add",
    "start": "310360",
    "end": "313039"
  },
  {
    "text": "method rather than calling this method",
    "start": "313039",
    "end": "314960"
  },
  {
    "text": "on each iteration of the loop we'll",
    "start": "314960",
    "end": "316720"
  },
  {
    "text": "instead only call it once passing in the",
    "start": "316720",
    "end": "318840"
  },
  {
    "text": "length of our input slice next we can",
    "start": "318840",
    "end": "321039"
  },
  {
    "text": "iterate over the events calling a new go",
    "start": "321039",
    "end": "323240"
  },
  {
    "text": "routine inside that does the same thing",
    "start": "323240",
    "end": "325199"
  },
  {
    "text": "as our existing implementation",
    "start": "325199",
    "end": "327000"
  },
  {
    "text": "performing a deferred call to weit",
    "start": "327000",
    "end": "328800"
  },
  {
    "text": "group.one then underneath this we want",
    "start": "328800",
    "end": "330960"
  },
  {
    "text": "to call the yield function which will",
    "start": "330960",
    "end": "332759"
  },
  {
    "text": "perform the logic inside of the caller's",
    "start": "332759",
    "end": "334600"
  },
  {
    "text": "for loop block lastly all we need to do",
    "start": "334600",
    "end": "336919"
  },
  {
    "text": "is call the weight method of the weight",
    "start": "336919",
    "end": "338720"
  },
  {
    "text": "group that wraps up our function",
    "start": "338720",
    "end": "340639"
  },
  {
    "text": "implementation now we can go ahead and",
    "start": "340639",
    "end": "342720"
  },
  {
    "text": "use it let's navigate back over to the",
    "start": "342720",
    "end": "344600"
  },
  {
    "text": "main function and clear out the existing",
    "start": "344600",
    "end": "346680"
  },
  {
    "text": "implementation now we can add in the",
    "start": "346680",
    "end": "348560"
  },
  {
    "text": "following code to range over our",
    "start": "348560",
    "end": "350400"
  },
  {
    "text": "parallel iterator with our events slice",
    "start": "350400",
    "end": "353000"
  },
  {
    "text": "then inside of the for Loop body all we",
    "start": "353000",
    "end": "354880"
  },
  {
    "text": "need to do is call the process function",
    "start": "354880",
    "end": "357160"
  },
  {
    "start": "357000",
    "end": "467000"
  },
  {
    "text": "when we run this code we can see that",
    "start": "357160",
    "end": "358680"
  },
  {
    "text": "everything works in par parallel as it",
    "start": "358680",
    "end": "360199"
  },
  {
    "text": "did before with the boiler plate",
    "start": "360199",
    "end": "361800"
  },
  {
    "text": "abstracted into the parallel function",
    "start": "361800",
    "end": "363960"
  },
  {
    "text": "unfortunately however we have a bug if I",
    "start": "363960",
    "end": "366360"
  },
  {
    "text": "change the code to iterate over more",
    "start": "366360",
    "end": "368039"
  },
  {
    "text": "events and then add a break into our for",
    "start": "368039",
    "end": "370280"
  },
  {
    "text": "Loop when we go to run this code the",
    "start": "370280",
    "end": "371880"
  },
  {
    "text": "application will Panic this is because",
    "start": "371880",
    "end": "373759"
  },
  {
    "text": "we're still calling the yield function",
    "start": "373759",
    "end": "375240"
  },
  {
    "text": "inside of our iterator even after the",
    "start": "375240",
    "end": "377319"
  },
  {
    "text": "break has been encountered the",
    "start": "377319",
    "end": "378880"
  },
  {
    "text": "documentation states that when you",
    "start": "378880",
    "end": "380039"
  },
  {
    "text": "receive a return value of false from",
    "start": "380039",
    "end": "381919"
  },
  {
    "text": "your yield function then your range",
    "start": "381919",
    "end": "383639"
  },
  {
    "text": "iterator should no longer continue in a",
    "start": "383639",
    "end": "385840"
  },
  {
    "text": "single-threaded loop we could easily",
    "start": "385840",
    "end": "387720"
  },
  {
    "text": "just check for this value and return",
    "start": "387720",
    "end": "389240"
  },
  {
    "text": "early however because we use concurrency",
    "start": "389240",
    "end": "391759"
  },
  {
    "text": "then this solution won't work for us",
    "start": "391759",
    "end": "393759"
  },
  {
    "text": "instead we need to use another",
    "start": "393759",
    "end": "395240"
  },
  {
    "text": "concurrency primitive found in go the",
    "start": "395240",
    "end": "397599"
  },
  {
    "text": "context. context type which enables us",
    "start": "397599",
    "end": "400120"
  },
  {
    "text": "to handle cancellation across multiple",
    "start": "400120",
    "end": "401880"
  },
  {
    "text": "go routines let's go ahead and add this",
    "start": "401880",
    "end": "404039"
  },
  {
    "text": "into our parallel iterator first things",
    "start": "404039",
    "end": "406479"
  },
  {
    "text": "first we need to import the context",
    "start": "406479",
    "end": "408560"
  },
  {
    "text": "package then we can create a new",
    "start": "408560",
    "end": "410360"
  },
  {
    "text": "instance of the context type using the",
    "start": "410360",
    "end": "412199"
  },
  {
    "text": "context dowi cancel method passing in a",
    "start": "412199",
    "end": "414960"
  },
  {
    "text": "background context as the parent this",
    "start": "414960",
    "end": "417160"
  },
  {
    "text": "method returns a context and a cancel",
    "start": "417160",
    "end": "419599"
  },
  {
    "text": "Funk which is used to notify the context",
    "start": "419599",
    "end": "422240"
  },
  {
    "text": "of when we want to cancel closing its",
    "start": "422240",
    "end": "424400"
  },
  {
    "text": "internal done Channel let's first use it",
    "start": "424400",
    "end": "426599"
  },
  {
    "text": "with the defer keyword so that it's",
    "start": "426599",
    "end": "428400"
  },
  {
    "text": "cancelled when the closure exits then",
    "start": "428400",
    "end": "430759"
  },
  {
    "text": "inside of our G routine closure we need",
    "start": "430759",
    "end": "432680"
  },
  {
    "text": "to check to see if the context has been",
    "start": "432680",
    "end": "434479"
  },
  {
    "text": "completed we can do this using a select",
    "start": "434479",
    "end": "436800"
  },
  {
    "text": "statement with our first case being the",
    "start": "436800",
    "end": "438759"
  },
  {
    "text": "context DOD method if this is the case",
    "start": "438759",
    "end": "441280"
  },
  {
    "text": "then we'll return early otherwise we'll",
    "start": "441280",
    "end": "443199"
  },
  {
    "text": "set a default case to go ahead and call",
    "start": "443199",
    "end": "445400"
  },
  {
    "text": "our yield function as we were before now",
    "start": "445400",
    "end": "447720"
  },
  {
    "text": "All That Remains is to check the return",
    "start": "447720",
    "end": "449520"
  },
  {
    "text": "value of the yield function and in the",
    "start": "449520",
    "end": "451599"
  },
  {
    "text": "case of a false we can cancel our",
    "start": "451599",
    "end": "453759"
  },
  {
    "text": "context now when I go ahead and run this",
    "start": "453759",
    "end": "455919"
  },
  {
    "text": "code you'll see that we no longer",
    "start": "455919",
    "end": "457240"
  },
  {
    "text": "receive a panic and if I go ahead and",
    "start": "457240",
    "end": "459440"
  },
  {
    "text": "remove the break statement the existing",
    "start": "459440",
    "end": "461400"
  },
  {
    "text": "functionality works as it did before",
    "start": "461400",
    "end": "463840"
  },
  {
    "text": "with that our function is now working",
    "start": "463840",
    "end": "465520"
  },
  {
    "text": "safely and will handle a break without",
    "start": "465520",
    "end": "467479"
  },
  {
    "start": "467000",
    "end": "508000"
  },
  {
    "text": "panicking however currently this",
    "start": "467479",
    "end": "469440"
  },
  {
    "text": "iterator is limited to the event type",
    "start": "469440",
    "end": "471440"
  },
  {
    "text": "only which means we can't use it with",
    "start": "471440",
    "end": "473319"
  },
  {
    "text": "other slic types fortunately we can",
    "start": "473319",
    "end": "475560"
  },
  {
    "text": "modify our iterator to work with any",
    "start": "475560",
    "end": "477479"
  },
  {
    "text": "type by making it generic we head back",
    "start": "477479",
    "end": "479840"
  },
  {
    "text": "on over to our function signature let's",
    "start": "479840",
    "end": "481680"
  },
  {
    "text": "first Define a generic type called e",
    "start": "481680",
    "end": "483759"
  },
  {
    "text": "which will conform to any type then we",
    "start": "483759",
    "end": "485759"
  },
  {
    "text": "just need to make the following changes",
    "start": "485759",
    "end": "487759"
  },
  {
    "text": "replacing any references to event with a",
    "start": "487759",
    "end": "490240"
  },
  {
    "text": "reference to e instead with that we can",
    "start": "490240",
    "end": "492680"
  },
  {
    "text": "now use this parallel iterator with any",
    "start": "492680",
    "end": "494759"
  },
  {
    "text": "slice type which means we now have a",
    "start": "494759",
    "end": "497039"
  },
  {
    "text": "reusable implementation for performing",
    "start": "497039",
    "end": "499319"
  },
  {
    "text": "parallel iteration this gives a glimpse",
    "start": "499319",
    "end": "501560"
  },
  {
    "text": "of what potential implementations of",
    "start": "501560",
    "end": "503599"
  },
  {
    "text": "function iterators could look like and",
    "start": "503599",
    "end": "505840"
  },
  {
    "text": "whilst I think this feature is going to",
    "start": "505840",
    "end": "507360"
  },
  {
    "text": "be really powerful I also believe it's",
    "start": "507360",
    "end": "509520"
  },
  {
    "start": "508000",
    "end": "548000"
  },
  {
    "text": "going to bring some powerful foot guns",
    "start": "509520",
    "end": "511680"
  },
  {
    "text": "when looking at code that makes use of",
    "start": "511680",
    "end": "513240"
  },
  {
    "text": "the parallel iterator it does a really",
    "start": "513240",
    "end": "515399"
  },
  {
    "text": "good job of hiding the fact that it's",
    "start": "515399",
    "end": "516959"
  },
  {
    "text": "running concurrently which means it's",
    "start": "516959",
    "end": "519039"
  },
  {
    "text": "going to be easier to make mistakes such",
    "start": "519039",
    "end": "521039"
  },
  {
    "text": "as dealing with race conditions or",
    "start": "521039",
    "end": "522839"
  },
  {
    "text": "accessing shared State this highlights",
    "start": "522839",
    "end": "524839"
  },
  {
    "text": "one of the potential risks with this",
    "start": "524839",
    "end": "526440"
  },
  {
    "text": "feature which is the fact that it",
    "start": "526440",
    "end": "528040"
  },
  {
    "text": "sometimes obfuscates what is actually",
    "start": "528040",
    "end": "529560"
  },
  {
    "text": "happening especially in the case of",
    "start": "529560",
    "end": "531120"
  },
  {
    "text": "concurrency as the language currently",
    "start": "531120",
    "end": "533120"
  },
  {
    "text": "has no way to specify that a function is",
    "start": "533120",
    "end": "535320"
  },
  {
    "text": "concurrent normally this isn't too much",
    "start": "535320",
    "end": "537240"
  },
  {
    "text": "of an issue but when it's applied to the",
    "start": "537240",
    "end": "538920"
  },
  {
    "text": "range function feature it looks like",
    "start": "538920",
    "end": "540480"
  },
  {
    "text": "it's working in a single-threaded",
    "start": "540480",
    "end": "542000"
  },
  {
    "text": "context now to be fair the feature is",
    "start": "542000",
    "end": "544240"
  },
  {
    "text": "still in an experimental State and so",
    "start": "544240",
    "end": "546600"
  },
  {
    "text": "some of this could potentially change",
    "start": "546600",
    "end": "548560"
  },
  {
    "start": "548000",
    "end": "601000"
  },
  {
    "text": "with that being said we are starting to",
    "start": "548560",
    "end": "550320"
  },
  {
    "text": "see it make its way into the standard",
    "start": "550320",
    "end": "552160"
  },
  {
    "text": "library with new packages types and",
    "start": "552160",
    "end": "554399"
  },
  {
    "text": "methods being made available one such",
    "start": "554399",
    "end": "556519"
  },
  {
    "text": "type is the SE 2 type found inside of",
    "start": "556519",
    "end": "558800"
  },
  {
    "text": "the iter package which we can actually",
    "start": "558800",
    "end": "560640"
  },
  {
    "text": "use to tidy up the return type of our",
    "start": "560640",
    "end": "562680"
  },
  {
    "text": "parallel iterator as well as this type",
    "start": "562680",
    "end": "564880"
  },
  {
    "text": "the iter package also provides a really",
    "start": "564880",
    "end": "567000"
  },
  {
    "text": "interesting function called iter dop",
    "start": "567000",
    "end": "569800"
  },
  {
    "text": "which allows us to pull values from",
    "start": "569800",
    "end": "571360"
  },
  {
    "text": "function iterators rather than being",
    "start": "571360",
    "end": "573120"
  },
  {
    "text": "pushed to us instead for example here I",
    "start": "573120",
    "end": "575480"
  },
  {
    "text": "have a method called zip which takes two",
    "start": "575480",
    "end": "577440"
  },
  {
    "text": "function iterators and iterates through",
    "start": "577440",
    "end": "579200"
  },
  {
    "text": "them using the pull method as it pulls",
    "start": "579200",
    "end": "581279"
  },
  {
    "text": "values from each iterator at the same",
    "start": "581279",
    "end": "583240"
  },
  {
    "text": "time it then Zips them up into a single",
    "start": "583240",
    "end": "585120"
  },
  {
    "text": "data structure before then sending it to",
    "start": "585120",
    "end": "587240"
  },
  {
    "text": "its own yield function we can then use",
    "start": "587240",
    "end": "589519"
  },
  {
    "text": "this ZIP function by first passing in",
    "start": "589519",
    "end": "591240"
  },
  {
    "text": "two function iterators and then ranging",
    "start": "591240",
    "end": "593279"
  },
  {
    "text": "over it printing out the zipped values",
    "start": "593279",
    "end": "595600"
  },
  {
    "text": "the new iter package found in the",
    "start": "595600",
    "end": "597079"
  },
  {
    "text": "standard Library gives a clue at some of",
    "start": "597079",
    "end": "598839"
  },
  {
    "text": "the potential of function iterator",
    "start": "598839",
    "end": "600760"
  },
  {
    "text": "compositions and as well as the SD lib",
    "start": "600760",
    "end": "603560"
  },
  {
    "start": "601000",
    "end": "638000"
  },
  {
    "text": "we can also expect to see new iterators",
    "start": "603560",
    "end": "605560"
  },
  {
    "text": "coming from third party packages one",
    "start": "605560",
    "end": "607680"
  },
  {
    "text": "such package is the loop package which I",
    "start": "607680",
    "end": "609880"
  },
  {
    "text": "created myself this package provides a",
    "start": "609880",
    "end": "612200"
  },
  {
    "text": "number of iterator functions based on",
    "start": "612200",
    "end": "614079"
  },
  {
    "text": "patterns I've encountered in the past",
    "start": "614079",
    "end": "616200"
  },
  {
    "text": "one of these functions is the batch",
    "start": "616200",
    "end": "617760"
  },
  {
    "text": "iterator which takes both a slice of",
    "start": "617760",
    "end": "619720"
  },
  {
    "text": "elements and a size allowing you to",
    "start": "619720",
    "end": "621920"
  },
  {
    "text": "iterate over the slice in sized chunks",
    "start": "621920",
    "end": "624720"
  },
  {
    "text": "so far the loop package has been pretty",
    "start": "624720",
    "end": "626440"
  },
  {
    "text": "enjoyable to work on to really push what",
    "start": "626440",
    "end": "628440"
  },
  {
    "text": "can be done with this experimental",
    "start": "628440",
    "end": "630000"
  },
  {
    "text": "feature and I haven't been the only one",
    "start": "630000",
    "end": "631920"
  },
  {
    "text": "kicking the proverbial tires with a",
    "start": "631920",
    "end": "634120"
  },
  {
    "text": "number of other packages available on",
    "start": "634120",
    "end": "635839"
  },
  {
    "text": "GitHub each trying their own different",
    "start": "635839",
    "end": "637880"
  },
  {
    "text": "experiments whilst it's difficult to",
    "start": "637880",
    "end": "639920"
  },
  {
    "start": "638000",
    "end": "659000"
  },
  {
    "text": "know whether the rang Funk feature is",
    "start": "639920",
    "end": "641720"
  },
  {
    "text": "going to be a good or bad thing for the",
    "start": "641720",
    "end": "643519"
  },
  {
    "text": "language I do think it'll bring some",
    "start": "643519",
    "end": "645200"
  },
  {
    "text": "standardization to the way we iterate",
    "start": "645200",
    "end": "646920"
  },
  {
    "text": "over data structures found in the",
    "start": "646920",
    "end": "648480"
  },
  {
    "text": "standard Library which is currently done",
    "start": "648480",
    "end": "650480"
  },
  {
    "text": "in a number of different ways either way",
    "start": "650480",
    "end": "652680"
  },
  {
    "text": "I'd love to know your thoughts what do",
    "start": "652680",
    "end": "654360"
  },
  {
    "text": "you think about this new feature and do",
    "start": "654360",
    "end": "656240"
  },
  {
    "text": "you see it impacting the way you",
    "start": "656240",
    "end": "657760"
  },
  {
    "text": "currently write go code before you leave",
    "start": "657760",
    "end": "660079"
  },
  {
    "start": "659000",
    "end": "695000"
  },
  {
    "text": "to go tell me that I have some good news",
    "start": "660079",
    "end": "662120"
  },
  {
    "text": "to share after a lot of requests I've",
    "start": "662120",
    "end": "664480"
  },
  {
    "text": "finally started working on my first",
    "start": "664480",
    "end": "666440"
  },
  {
    "text": "course which is going to be all about",
    "start": "666440",
    "end": "668279"
  },
  {
    "text": "writing command line applications in go",
    "start": "668279",
    "end": "670720"
  },
  {
    "text": "if that sounds like something of",
    "start": "670720",
    "end": "671880"
  },
  {
    "text": "Interest then there's a link in the",
    "start": "671880",
    "end": "673399"
  },
  {
    "text": "description below that you can use to",
    "start": "673399",
    "end": "674920"
  },
  {
    "text": "register your email which will allow you",
    "start": "674920",
    "end": "677000"
  },
  {
    "text": "to be notified when the course is",
    "start": "677000",
    "end": "678399"
  },
  {
    "text": "available but also provide you with a",
    "start": "678399",
    "end": "680079"
  },
  {
    "text": "discount code when it goes on sale",
    "start": "680079",
    "end": "681959"
  },
  {
    "text": "personally I'm really excited to be",
    "start": "681959",
    "end": "683600"
  },
  {
    "text": "building this course and I want to give",
    "start": "683600",
    "end": "685560"
  },
  {
    "text": "a big thank you to everyone who supports",
    "start": "685560",
    "end": "687320"
  },
  {
    "text": "me in the channel for making that happen",
    "start": "687320",
    "end": "689360"
  },
  {
    "text": "otherwise a big thank you for watching",
    "start": "689360",
    "end": "691040"
  },
  {
    "text": "and I'll see you on the next one",
    "start": "691040",
    "end": "695360"
  }
]