[
  {
    "text": "take a look at this code it looks pretty",
    "start": "80",
    "end": "2120"
  },
  {
    "text": "normal right what do you think will",
    "start": "2120",
    "end": "3760"
  },
  {
    "text": "happen when we run it you'd be forgiven",
    "start": "3760",
    "end": "5879"
  },
  {
    "text": "for thinking it would print out the",
    "start": "5879",
    "end": "7319"
  },
  {
    "text": "numbers one to five in a random order",
    "start": "7319",
    "end": "9639"
  },
  {
    "text": "but unfortunately that's not the case",
    "start": "9639",
    "end": "11719"
  },
  {
    "text": "instead it prints out the number five",
    "start": "11719",
    "end": "13960"
  },
  {
    "text": "five times weird right what you just",
    "start": "13960",
    "end": "16600"
  },
  {
    "text": "witnessed is one of the most common",
    "start": "16600",
    "end": "18279"
  },
  {
    "text": "mistakes you can make in go this",
    "start": "18279",
    "end": "20320"
  },
  {
    "text": "Behavior happens because each iteration",
    "start": "20320",
    "end": "22119"
  },
  {
    "text": "of the loop uses the same instance of",
    "start": "22119",
    "end": "24279"
  },
  {
    "text": "the variable X so each closure shares",
    "start": "24279",
    "end": "26920"
  },
  {
    "text": "that single variable when the closure",
    "start": "26920",
    "end": "28920"
  },
  {
    "text": "runs it prints the value of x at the",
    "start": "28920",
    "end": "30920"
  },
  {
    "text": "time format. print line is executed",
    "start": "30920",
    "end": "33600"
  },
  {
    "text": "however because this closure is ran",
    "start": "33600",
    "end": "35399"
  },
  {
    "text": "concurrently the loop finishes before",
    "start": "35399",
    "end": "37360"
  },
  {
    "text": "the print line statement is invoked",
    "start": "37360",
    "end": "39200"
  },
  {
    "text": "which means the value of x has been set",
    "start": "39200",
    "end": "41160"
  },
  {
    "text": "to the last value of the slice by the",
    "start": "41160",
    "end": "43079"
  },
  {
    "text": "time the first closure runs all of which",
    "start": "43079",
    "end": "45600"
  },
  {
    "text": "results in the number five being printed",
    "start": "45600",
    "end": "47920"
  },
  {
    "text": "five times an easier way to show this is",
    "start": "47920",
    "end": "50199"
  },
  {
    "text": "with the following code here we have a",
    "start": "50199",
    "end": "52039"
  },
  {
    "text": "for Loop that is iterating from 0 to 9",
    "start": "52039",
    "end": "54800"
  },
  {
    "text": "in each iteration of this loop we're",
    "start": "54800",
    "end": "56399"
  },
  {
    "text": "taking a reference to the loop variable",
    "start": "56399",
    "end": "58359"
  },
  {
    "text": "of I and storing it in a slice called",
    "start": "58359",
    "end": "60719"
  },
  {
    "text": "IDs if we run this code and print out",
    "start": "60719",
    "end": "63280"
  },
  {
    "text": "the values of our slice instead of them",
    "start": "63280",
    "end": "65400"
  },
  {
    "text": "being 0 to 9 they're all 10 if we print",
    "start": "65400",
    "end": "68560"
  },
  {
    "text": "the pointers instead of dereferencing",
    "start": "68560",
    "end": "70119"
  },
  {
    "text": "them we can see why this is happening",
    "start": "70119",
    "end": "71960"
  },
  {
    "text": "they all point to the same address in",
    "start": "71960",
    "end": "73759"
  },
  {
    "text": "memory now go isn't the only language",
    "start": "73759",
    "end": "76040"
  },
  {
    "text": "that falls victim to this Behavior we",
    "start": "76040",
    "end": "77840"
  },
  {
    "text": "can do the same thing in C++ using the",
    "start": "77840",
    "end": "80079"
  },
  {
    "text": "following code however when it comes to",
    "start": "80079",
    "end": "82360"
  },
  {
    "text": "go this mistake is much more common due",
    "start": "82360",
    "end": "84720"
  },
  {
    "text": "to the use of concurrency enclosures",
    "start": "84720",
    "end": "86680"
  },
  {
    "text": "inside of for Loops fortunately there",
    "start": "86680",
    "end": "88759"
  },
  {
    "text": "are a couple of easy ways to solve this",
    "start": "88759",
    "end": "90920"
  },
  {
    "text": "the first is to bind the value of our",
    "start": "90920",
    "end": "92799"
  },
  {
    "text": "Loop variable to each closure as it's",
    "start": "92799",
    "end": "94600"
  },
  {
    "text": "launched this can be achieved by",
    "start": "94600",
    "end": "96360"
  },
  {
    "text": "modifying the closure to accept a",
    "start": "96360",
    "end": "97880"
  },
  {
    "text": "parameter and passing in our Loop",
    "start": "97880",
    "end": "99840"
  },
  {
    "text": "variable when we invoke it an even",
    "start": "99840",
    "end": "101960"
  },
  {
    "text": "easier approach is to just rebind the",
    "start": "101960",
    "end": "103880"
  },
  {
    "text": "value to a local variable inside of the",
    "start": "103880",
    "end": "105759"
  },
  {
    "text": "loop which provides a new memory address",
    "start": "105759",
    "end": "107880"
  },
  {
    "text": "keeping the value distinct from the",
    "start": "107880",
    "end": "109479"
  },
  {
    "text": "Loop's variable despite these Simple",
    "start": "109479",
    "end": "111560"
  },
  {
    "text": "Solutions it still requires manually",
    "start": "111560",
    "end": "113399"
  },
  {
    "text": "having to fix the problem which can",
    "start": "113399",
    "end": "115320"
  },
  {
    "text": "sometimes be forgot because of this",
    "start": "115320",
    "end": "117320"
  },
  {
    "text": "static analysis tools such as Lins or",
    "start": "117320",
    "end": "119520"
  },
  {
    "text": "language servers can be used to help",
    "start": "119520",
    "end": "121399"
  },
  {
    "text": "detect this problem in case it's been",
    "start": "121399",
    "end": "123159"
  },
  {
    "text": "missed but these tools aren't perfect",
    "start": "123159",
    "end": "125600"
  },
  {
    "text": "and can often fail to detect this",
    "start": "125600",
    "end": "127520"
  },
  {
    "text": "mistake especially in the case of nested",
    "start": "127520",
    "end": "129720"
  },
  {
    "text": "functions as you can see on this code in",
    "start": "129720",
    "end": "132160"
  },
  {
    "text": "fact that's exactly what happened to",
    "start": "132160",
    "end": "133840"
  },
  {
    "text": "Let's encrypt back in 2020 where a bug",
    "start": "133840",
    "end": "136480"
  },
  {
    "text": "was caused by this very issue dodging",
    "start": "136480",
    "end": "138560"
  },
  {
    "text": "both the static analysis and code",
    "start": "138560",
    "end": "140480"
  },
  {
    "text": "reviews because of how common this issue",
    "start": "140480",
    "end": "142680"
  },
  {
    "text": "is the go developers have decided to",
    "start": "142680",
    "end": "144599"
  },
  {
    "text": "resolve it in the 1.22 release scheduled",
    "start": "144599",
    "end": "147120"
  },
  {
    "text": "for February of 2024 this release will",
    "start": "147120",
    "end": "149840"
  },
  {
    "text": "change the loop variable to be Scopes to",
    "start": "149840",
    "end": "151800"
  },
  {
    "text": "the iteration rather than being Scopes",
    "start": "151800",
    "end": "153720"
  },
  {
    "text": "to the entire Loop we can actually",
    "start": "153720",
    "end": "155640"
  },
  {
    "text": "preview this Behavior already by setting",
    "start": "155640",
    "end": "157920"
  },
  {
    "text": "the go experiment environment variable",
    "start": "157920",
    "end": "159879"
  },
  {
    "text": "to Loop far and running our code again",
    "start": "159879",
    "end": "162200"
  },
  {
    "text": "as well as working in the case where we",
    "start": "162200",
    "end": "163800"
  },
  {
    "text": "use a concurrent closure this fix also",
    "start": "163800",
    "end": "166120"
  },
  {
    "text": "works for the other example we had where",
    "start": "166120",
    "end": "168200"
  },
  {
    "text": "we took the reference of our Loop",
    "start": "168200",
    "end": "169800"
  },
  {
    "text": "variable and stored it in another slice",
    "start": "169800",
    "end": "172239"
  },
  {
    "text": "in fact because of this change the go",
    "start": "172239",
    "end": "174360"
  },
  {
    "text": "team themselves also discovered and",
    "start": "174360",
    "end": "176280"
  },
  {
    "text": "fixed a number of buggy tests so what do",
    "start": "176280",
    "end": "179120"
  },
  {
    "text": "you need to do as a go developer to",
    "start": "179120",
    "end": "180840"
  },
  {
    "text": "prepare for this change well not a lot",
    "start": "180840",
    "end": "183000"
  },
  {
    "text": "really to ensure backwards compatibility",
    "start": "183000",
    "end": "185159"
  },
  {
    "text": "the new semantics will only apply to",
    "start": "185159",
    "end": "187159"
  },
  {
    "text": "packages that declare go 1.22 or later",
    "start": "187159",
    "end": "189799"
  },
  {
    "text": "in their go dood files this means the",
    "start": "189799",
    "end": "192040"
  },
  {
    "text": "fix will only apply to new or updated",
    "start": "192040",
    "end": "194319"
  },
  {
    "text": "code if you have a larger code base",
    "start": "194319",
    "end": "196440"
  },
  {
    "text": "however then you'll be able to use the",
    "start": "196440",
    "end": "198040"
  },
  {
    "text": "go build lines in order to control this",
    "start": "198040",
    "end": "199920"
  },
  {
    "text": "decision on a per file basis although",
    "start": "199920",
    "end": "202519"
  },
  {
    "text": "personally I can't imagine a reason why",
    "start": "202519",
    "end": "204400"
  },
  {
    "text": "you want to use the existing Behavior",
    "start": "204400",
    "end": "206599"
  },
  {
    "text": "the only reason I could think of was",
    "start": "206599",
    "end": "208599"
  },
  {
    "text": "performance as I imagine changing the",
    "start": "208599",
    "end": "210599"
  },
  {
    "text": "scope of the variable would cause more",
    "start": "210599",
    "end": "212239"
  },
  {
    "text": "memory to be allocated I could only find",
    "start": "212239",
    "end": "214560"
  },
  {
    "text": "this to be true in the abnormal case",
    "start": "214560",
    "end": "216200"
  },
  {
    "text": "where I was taking the reference of the",
    "start": "216200",
    "end": "217959"
  },
  {
    "text": "loop variable on each iteration when it",
    "start": "217959",
    "end": "220319"
  },
  {
    "text": "came to looping normally or using a",
    "start": "220319",
    "end": "222120"
  },
  {
    "text": "closure then the performance was",
    "start": "222120",
    "end": "223799"
  },
  {
    "text": "actually better even saving a single",
    "start": "223799",
    "end": "225799"
  },
  {
    "text": "allocation in the closure test either",
    "start": "225799",
    "end": "228200"
  },
  {
    "text": "way I'm pretty happy for this change",
    "start": "228200",
    "end": "229959"
  },
  {
    "text": "I've certainly seen this issue pop up a",
    "start": "229959",
    "end": "231560"
  },
  {
    "text": "few times when reviewing other people's",
    "start": "231560",
    "end": "233239"
  },
  {
    "text": "code even with linters in check now I'm",
    "start": "233239",
    "end": "235879"
  },
  {
    "text": "interested to hear your thoughts however",
    "start": "235879",
    "end": "237480"
  },
  {
    "text": "have you seen this bug in the wild and",
    "start": "237480",
    "end": "239239"
  },
  {
    "text": "if so are you glad about this change if",
    "start": "239239",
    "end": "241280"
  },
  {
    "text": "you haven't then just share your",
    "start": "241280",
    "end": "242480"
  },
  {
    "text": "favorite emoji or something otherwise a",
    "start": "242480",
    "end": "244799"
  },
  {
    "text": "big thank you for watching and I'll see",
    "start": "244799",
    "end": "246239"
  },
  {
    "text": "you on the next",
    "start": "246239",
    "end": "248200"
  },
  {
    "text": "one",
    "start": "248200",
    "end": "251200"
  }
]