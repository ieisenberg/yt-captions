[
  {
    "text": "tide is a minimal and pragmatic web",
    "start": "0",
    "end": "2460"
  },
  {
    "text": "application framework for rust it comes",
    "start": "2460",
    "end": "4500"
  },
  {
    "text": "with a robust set of features that make",
    "start": "4500",
    "end": "6120"
  },
  {
    "text": "building async web applications and apis",
    "start": "6120",
    "end": "8580"
  },
  {
    "text": "easier and fun to get started with Tide",
    "start": "8580",
    "end": "11700"
  },
  {
    "text": "let's first create a new project using",
    "start": "11700",
    "end": "13679"
  },
  {
    "text": "cargo new we'll call our project wizard",
    "start": "13679",
    "end": "16198"
  },
  {
    "text": "API with our new project created we can",
    "start": "16199",
    "end": "19020"
  },
  {
    "text": "add the tide crate to the cargo.com",
    "start": "19020",
    "end": "20720"
  },
  {
    "text": "we'll also need to add an async runtime",
    "start": "20720",
    "end": "23400"
  },
  {
    "text": "the recommended runtime to use is async",
    "start": "23400",
    "end": "25740"
  },
  {
    "text": "STD so let's follow that recommendation",
    "start": "25740",
    "end": "28439"
  },
  {
    "text": "if Tokyo is more your preference it's",
    "start": "28439",
    "end": "30300"
  },
  {
    "text": "possible to also use it but more on that",
    "start": "30300",
    "end": "32279"
  },
  {
    "text": "later",
    "start": "32279",
    "end": "33719"
  },
  {
    "text": "whilst we're here let's add inserte as",
    "start": "33719",
    "end": "35760"
  },
  {
    "text": "well so we can do some encoding and",
    "start": "35760",
    "end": "37260"
  },
  {
    "text": "decoding",
    "start": "37260",
    "end": "39120"
  },
  {
    "text": "with the necessary crates added we can",
    "start": "39120",
    "end": "40920"
  },
  {
    "text": "now start writing our web API let's jump",
    "start": "40920",
    "end": "43379"
  },
  {
    "text": "on over to our main.rs file okay so now",
    "start": "43379",
    "end": "46500"
  },
  {
    "text": "that we're here let's turn our main",
    "start": "46500",
    "end": "47879"
  },
  {
    "text": "function into an async function and have",
    "start": "47879",
    "end": "50460"
  },
  {
    "text": "it return a tired result of ok",
    "start": "50460",
    "end": "53700"
  },
  {
    "text": "next we can create the app using the",
    "start": "53700",
    "end": "55920"
  },
  {
    "text": "tied new function and to listen at Port",
    "start": "55920",
    "end": "58680"
  },
  {
    "text": "8080. now let's go ahead and run our",
    "start": "58680",
    "end": "61680"
  },
  {
    "text": "server and send a curl request to it",
    "start": "61680",
    "end": "64018"
  },
  {
    "text": "just to see that it's running which it",
    "start": "64019",
    "end": "66180"
  },
  {
    "text": "is but it's returning a 404. let's go",
    "start": "66180",
    "end": "69119"
  },
  {
    "text": "ahead and add a Handler for the get",
    "start": "69119",
    "end": "70979"
  },
  {
    "text": "slash path",
    "start": "70979",
    "end": "72720"
  },
  {
    "text": "we use the at method of the app to set",
    "start": "72720",
    "end": "75299"
  },
  {
    "text": "the path and follow up with the get",
    "start": "75299",
    "end": "77040"
  },
  {
    "text": "method then we pass in an async closure",
    "start": "77040",
    "end": "79380"
  },
  {
    "text": "and return a result of ok with our hello",
    "start": "79380",
    "end": "81119"
  },
  {
    "text": "world string inside now let's rerun our",
    "start": "81119",
    "end": "83759"
  },
  {
    "text": "code and send another code request",
    "start": "83759",
    "end": "86460"
  },
  {
    "text": "we get back the response of hello world",
    "start": "86460",
    "end": "88799"
  },
  {
    "text": "pretty easy using a closure is fine for",
    "start": "88799",
    "end": "91680"
  },
  {
    "text": "a simple endpoint but it's a little",
    "start": "91680",
    "end": "93119"
  },
  {
    "text": "clearer when the code is in a function",
    "start": "93119",
    "end": "94920"
  },
  {
    "text": "and a little bit more testable let's go",
    "start": "94920",
    "end": "96780"
  },
  {
    "text": "ahead and move it to one",
    "start": "96780",
    "end": "98460"
  },
  {
    "text": "you'll see we require the parameter of",
    "start": "98460",
    "end": "100680"
  },
  {
    "text": "tied request which accepts a generic",
    "start": "100680",
    "end": "103500"
  },
  {
    "text": "type",
    "start": "103500",
    "end": "104280"
  },
  {
    "text": "this type represents any state the",
    "start": "104280",
    "end": "106140"
  },
  {
    "text": "request might have which we'll look in",
    "start": "106140",
    "end": "108119"
  },
  {
    "text": "more detail later at the moment the",
    "start": "108119",
    "end": "109740"
  },
  {
    "text": "state is empty now with the function",
    "start": "109740",
    "end": "111240"
  },
  {
    "text": "created we can go ahead and add it to",
    "start": "111240",
    "end": "112500"
  },
  {
    "text": "our index route",
    "start": "112500",
    "end": "114119"
  },
  {
    "text": "now if we run curl we can see it works",
    "start": "114119",
    "end": "116520"
  },
  {
    "text": "the same as it did before",
    "start": "116520",
    "end": "118740"
  },
  {
    "text": "okay so this is pretty basic but it's a",
    "start": "118740",
    "end": "120960"
  },
  {
    "text": "great starting point",
    "start": "120960",
    "end": "122340"
  },
  {
    "text": "let's do a quick power walk through some",
    "start": "122340",
    "end": "124259"
  },
  {
    "text": "of the other web application features",
    "start": "124259",
    "end": "125579"
  },
  {
    "text": "that tide provides",
    "start": "125579",
    "end": "127740"
  },
  {
    "text": "query parameters can be obtained one of",
    "start": "127740",
    "end": "129660"
  },
  {
    "text": "two ways the first is to load them in as",
    "start": "129660",
    "end": "132120"
  },
  {
    "text": "key value pairs using the query pairs",
    "start": "132120",
    "end": "134340"
  },
  {
    "text": "method of the request URL using this",
    "start": "134340",
    "end": "136739"
  },
  {
    "text": "method we can iterate over the pairs to",
    "start": "136739",
    "end": "138540"
  },
  {
    "text": "find the query parameter that matches",
    "start": "138540",
    "end": "139860"
  },
  {
    "text": "what we're looking for a more elegant",
    "start": "139860",
    "end": "141780"
  },
  {
    "text": "solution however is to deserialize the",
    "start": "141780",
    "end": "143819"
  },
  {
    "text": "query parameters into a struct tide does",
    "start": "143819",
    "end": "146580"
  },
  {
    "text": "this under the hood using the survey Qs",
    "start": "146580",
    "end": "148739"
  },
  {
    "text": "package so all we have to do is Define a",
    "start": "148739",
    "end": "151140"
  },
  {
    "text": "struct that represents our expected",
    "start": "151140",
    "end": "152640"
  },
  {
    "text": "query parameters and to derive the",
    "start": "152640",
    "end": "154680"
  },
  {
    "text": "deserialize method with that done we can",
    "start": "154680",
    "end": "157020"
  },
  {
    "text": "go ahead and call the query method of",
    "start": "157020",
    "end": "158520"
  },
  {
    "text": "the request",
    "start": "158520",
    "end": "159900"
  },
  {
    "text": "if we also implement the default",
    "start": "159900",
    "end": "161700"
  },
  {
    "text": "interface on our custom type we can",
    "start": "161700",
    "end": "163440"
  },
  {
    "text": "ensure that we have a default value for",
    "start": "163440",
    "end": "165840"
  },
  {
    "text": "the query parameters which tend to be",
    "start": "165840",
    "end": "167459"
  },
  {
    "text": "optional powerful stuff",
    "start": "167459",
    "end": "170700"
  },
  {
    "text": "as well as query parameters tied also",
    "start": "170700",
    "end": "172800"
  },
  {
    "text": "has support for path parameters we can",
    "start": "172800",
    "end": "175319"
  },
  {
    "text": "define an expected path parameter in our",
    "start": "175319",
    "end": "177239"
  },
  {
    "text": "route by using the colon followed by the",
    "start": "177239",
    "end": "179340"
  },
  {
    "text": "name of the parameter in this case we're",
    "start": "179340",
    "end": "181260"
  },
  {
    "text": "setting it to name now in our Handler",
    "start": "181260",
    "end": "183720"
  },
  {
    "text": "function we can call the param method on",
    "start": "183720",
    "end": "185760"
  },
  {
    "text": "the request to pull out our parameter",
    "start": "185760",
    "end": "187620"
  },
  {
    "text": "this method can fail so it's a good idea",
    "start": "187620",
    "end": "190019"
  },
  {
    "text": "to handle that error or set up a default",
    "start": "190019",
    "end": "192000"
  },
  {
    "text": "using the unwrap or method",
    "start": "192000",
    "end": "195540"
  },
  {
    "text": "we can now use Curl and pass in the name",
    "start": "195540",
    "end": "197819"
  },
  {
    "text": "parameter via the path the response",
    "start": "197819",
    "end": "200280"
  },
  {
    "text": "Returns the value we passed in",
    "start": "200280",
    "end": "203340"
  },
  {
    "text": "if you're making an API there's a good",
    "start": "203340",
    "end": "205260"
  },
  {
    "text": "chance you're going to want to pass Json",
    "start": "205260",
    "end": "206940"
  },
  {
    "text": "tide has native support for surdy Json",
    "start": "206940",
    "end": "209580"
  },
  {
    "text": "which is used for encoding and decoding",
    "start": "209580",
    "end": "211620"
  },
  {
    "text": "requests and response bodies to parse",
    "start": "211620",
    "end": "213780"
  },
  {
    "text": "Json from the request body we first need",
    "start": "213780",
    "end": "215640"
  },
  {
    "text": "a type to pass into",
    "start": "215640",
    "end": "217379"
  },
  {
    "text": "let's create a struct we want to",
    "start": "217379",
    "end": "219060"
  },
  {
    "text": "represent as our Json body next we",
    "start": "219060",
    "end": "221700"
  },
  {
    "text": "derive from the deserialized type of",
    "start": "221700",
    "end": "223620"
  },
  {
    "text": "survey",
    "start": "223620",
    "end": "224580"
  },
  {
    "text": "now in order to load the request body we",
    "start": "224580",
    "end": "226860"
  },
  {
    "text": "first need to Mark our request as",
    "start": "226860",
    "end": "228480"
  },
  {
    "text": "mutable this is so we can actually read",
    "start": "228480",
    "end": "230459"
  },
  {
    "text": "from the internal body stream",
    "start": "230459",
    "end": "232200"
  },
  {
    "text": "now all we do is call the rec.body Json",
    "start": "232200",
    "end": "235019"
  },
  {
    "text": "method which will use survey under the",
    "start": "235019",
    "end": "237180"
  },
  {
    "text": "hood and deserialize into our type now",
    "start": "237180",
    "end": "239940"
  },
  {
    "text": "when we send a Json payload to our",
    "start": "239940",
    "end": "241799"
  },
  {
    "text": "server it is correctly parsed into our",
    "start": "241799",
    "end": "243659"
  },
  {
    "text": "wizard type to send Json in our response",
    "start": "243659",
    "end": "246180"
  },
  {
    "text": "is a similar process first let's derive",
    "start": "246180",
    "end": "248760"
  },
  {
    "text": "the serialized type in our struct then",
    "start": "248760",
    "end": "250680"
  },
  {
    "text": "we can create a method that returns a",
    "start": "250680",
    "end": "252599"
  },
  {
    "text": "result of tied body",
    "start": "252599",
    "end": "254580"
  },
  {
    "text": "finally we can send Json back using the",
    "start": "254580",
    "end": "257400"
  },
  {
    "text": "from Json method with our value super",
    "start": "257400",
    "end": "259799"
  },
  {
    "text": "easy and refreshingly elegant",
    "start": "259799",
    "end": "262380"
  },
  {
    "text": "as your web application grows having all",
    "start": "262380",
    "end": "264660"
  },
  {
    "text": "of your routes at the top level can be",
    "start": "264660",
    "end": "266160"
  },
  {
    "text": "overwhelming fortunately Thai provides",
    "start": "266160",
    "end": "268259"
  },
  {
    "text": "nested routing by using the nest method",
    "start": "268259",
    "end": "270479"
  },
  {
    "text": "on a route The Nest method takes a",
    "start": "270479",
    "end": "272820"
  },
  {
    "text": "closure which expects a tied route to be",
    "start": "272820",
    "end": "274919"
  },
  {
    "text": "returned by doing so we can easily group",
    "start": "274919",
    "end": "277320"
  },
  {
    "text": "our API resources together or Nest our",
    "start": "277320",
    "end": "279419"
  },
  {
    "text": "entire API under a version such as V1 or",
    "start": "279419",
    "end": "282060"
  },
  {
    "text": "V2",
    "start": "282060",
    "end": "283919"
  },
  {
    "text": "so far we've only been sending back HTTP",
    "start": "283919",
    "end": "286259"
  },
  {
    "text": "200s in a production server we're going",
    "start": "286259",
    "end": "288840"
  },
  {
    "text": "to want to send back other status codes",
    "start": "288840",
    "end": "290460"
  },
  {
    "text": "depending on the outcomes of other",
    "start": "290460",
    "end": "292020"
  },
  {
    "text": "operations in order to send back custom",
    "start": "292020",
    "end": "294660"
  },
  {
    "text": "status codes we can create a new",
    "start": "294660",
    "end": "296639"
  },
  {
    "text": "response type using the new function",
    "start": "296639",
    "end": "298320"
  },
  {
    "text": "while passing in the desired status code",
    "start": "298320",
    "end": "300600"
  },
  {
    "text": "either via the status code enum or using",
    "start": "300600",
    "end": "303060"
  },
  {
    "text": "the integer value",
    "start": "303060",
    "end": "305280"
  },
  {
    "text": "with this type we can then set the",
    "start": "305280",
    "end": "307500"
  },
  {
    "text": "response body and return that as the",
    "start": "307500",
    "end": "309479"
  },
  {
    "text": "result",
    "start": "309479",
    "end": "311280"
  },
  {
    "text": "you can also use the response Builder",
    "start": "311280",
    "end": "313080"
  },
  {
    "text": "which allows us to create a response",
    "start": "313080",
    "end": "314699"
  },
  {
    "text": "without using the mutable keyword",
    "start": "314699",
    "end": "316199"
  },
  {
    "text": "whichever floats your boat",
    "start": "316199",
    "end": "317940"
  },
  {
    "text": "you can serve static files easily by",
    "start": "317940",
    "end": "320100"
  },
  {
    "text": "using the serve file method of a route",
    "start": "320100",
    "end": "322080"
  },
  {
    "text": "and by just pointing it at the file you",
    "start": "322080",
    "end": "324600"
  },
  {
    "text": "wish to serve Additionally you can",
    "start": "324600",
    "end": "326280"
  },
  {
    "text": "server directory as well using the",
    "start": "326280",
    "end": "327780"
  },
  {
    "text": "served dear method",
    "start": "327780",
    "end": "330419"
  },
  {
    "text": "tide provides some easy cookie",
    "start": "330419",
    "end": "332220"
  },
  {
    "text": "management for both requests and",
    "start": "332220",
    "end": "333960"
  },
  {
    "text": "responses",
    "start": "333960",
    "end": "335160"
  },
  {
    "text": "using the cookie method on the request",
    "start": "335160",
    "end": "337199"
  },
  {
    "text": "allows us to pull out cookie values by",
    "start": "337199",
    "end": "338880"
  },
  {
    "text": "key and we can ask the client to store",
    "start": "338880",
    "end": "340860"
  },
  {
    "text": "and remove cookies using the associated",
    "start": "340860",
    "end": "342900"
  },
  {
    "text": "methods on a response type",
    "start": "342900",
    "end": "346199"
  },
  {
    "text": "logging is an important part of running",
    "start": "346199",
    "end": "348180"
  },
  {
    "text": "an API tide provides a logging",
    "start": "348180",
    "end": "350639"
  },
  {
    "text": "middleware that can be used using the",
    "start": "350639",
    "end": "352259"
  },
  {
    "text": "with keyword on the app router however",
    "start": "352259",
    "end": "355320"
  },
  {
    "text": "just using this by itself won't do",
    "start": "355320",
    "end": "357300"
  },
  {
    "text": "anything you'll also need to set up a",
    "start": "357300",
    "end": "359340"
  },
  {
    "text": "logger using a package such as fem or",
    "start": "359340",
    "end": "361740"
  },
  {
    "text": "simple logger the documentation uses fem",
    "start": "361740",
    "end": "363960"
  },
  {
    "text": "so we're going to do the same first",
    "start": "363960",
    "end": "365580"
  },
  {
    "text": "let's add the crate2rcargo.com then we",
    "start": "365580",
    "end": "368520"
  },
  {
    "text": "can call the start method of the module",
    "start": "368520",
    "end": "370380"
  },
  {
    "text": "in our main function now we have some",
    "start": "370380",
    "end": "372539"
  },
  {
    "text": "pretty logging whenever we make a",
    "start": "372539",
    "end": "373919"
  },
  {
    "text": "request",
    "start": "373919",
    "end": "375479"
  },
  {
    "text": "at some point you're going to want to",
    "start": "375479",
    "end": "377340"
  },
  {
    "text": "share State across your endpoints this",
    "start": "377340",
    "end": "379259"
  },
  {
    "text": "is likely going to be in the form of a",
    "start": "379259",
    "end": "380940"
  },
  {
    "text": "repository such as a database or an",
    "start": "380940",
    "end": "382919"
  },
  {
    "text": "event bus",
    "start": "382919",
    "end": "384300"
  },
  {
    "text": "we can do this by creating an app using",
    "start": "384300",
    "end": "386280"
  },
  {
    "text": "the with State method provided by the",
    "start": "386280",
    "end": "388500"
  },
  {
    "text": "tide module and passing in what we want",
    "start": "388500",
    "end": "390660"
  },
  {
    "text": "to use as state in our case it's going",
    "start": "390660",
    "end": "392880"
  },
  {
    "text": "to be our Repository",
    "start": "392880",
    "end": "395280"
  },
  {
    "text": "which doesn't actually work tide is",
    "start": "395280",
    "end": "397740"
  },
  {
    "text": "asynchronous so we need to make sure",
    "start": "397740",
    "end": "399240"
  },
  {
    "text": "that whatever type we use for the state",
    "start": "399240",
    "end": "400860"
  },
  {
    "text": "conforms to the Clone send and sync",
    "start": "400860",
    "end": "403380"
  },
  {
    "text": "traits now this Probably sounds",
    "start": "403380",
    "end": "405419"
  },
  {
    "text": "complicated but don't worry",
    "start": "405419",
    "end": "407280"
  },
  {
    "text": "in most cases you can wrap your type in",
    "start": "407280",
    "end": "409440"
  },
  {
    "text": "an arc which stands for automatic",
    "start": "409440",
    "end": "411780"
  },
  {
    "text": "reference count in our case this won't",
    "start": "411780",
    "end": "414060"
  },
  {
    "text": "work as we need a mutable reference to",
    "start": "414060",
    "end": "415860"
  },
  {
    "text": "the underlying data structure so we're",
    "start": "415860",
    "end": "417900"
  },
  {
    "text": "going to use a read write lock provided",
    "start": "417900",
    "end": "419880"
  },
  {
    "text": "by the async STD package in order to",
    "start": "419880",
    "end": "422340"
  },
  {
    "text": "make changes to the state in our",
    "start": "422340",
    "end": "423960"
  },
  {
    "text": "handlers now that our type conforms to",
    "start": "423960",
    "end": "426120"
  },
  {
    "text": "the expected interfaces we can use the",
    "start": "426120",
    "end": "427979"
  },
  {
    "text": "with State method to generate a router",
    "start": "427979",
    "end": "429720"
  },
  {
    "text": "that provides state in its requests",
    "start": "429720",
    "end": "432180"
  },
  {
    "text": "we can then Define methods that expect",
    "start": "432180",
    "end": "433919"
  },
  {
    "text": "our state type in the input parameters",
    "start": "433919",
    "end": "437100"
  },
  {
    "text": "finally we can access our repository",
    "start": "437100",
    "end": "439139"
  },
  {
    "text": "using the State method of the request",
    "start": "439139",
    "end": "442319"
  },
  {
    "text": "with that we have a simple repository",
    "start": "442319",
    "end": "444180"
  },
  {
    "text": "for storing and retrieving Wizards",
    "start": "444180",
    "end": "446520"
  },
  {
    "text": "which we can add endpoints to manipulate",
    "start": "446520",
    "end": "448979"
  },
  {
    "text": "the internal state with",
    "start": "448979",
    "end": "451800"
  },
  {
    "text": "as well as using middleware such as with",
    "start": "451800",
    "end": "453780"
  },
  {
    "text": "the logging middleware we saw earlier we",
    "start": "453780",
    "end": "455699"
  },
  {
    "text": "can also Define our own middleware to",
    "start": "455699",
    "end": "457319"
  },
  {
    "text": "use with Tide to define a middleware",
    "start": "457319",
    "end": "459419"
  },
  {
    "text": "function we use a similar interface as",
    "start": "459419",
    "end": "461639"
  },
  {
    "text": "we do for requests but with the",
    "start": "461639",
    "end": "463680"
  },
  {
    "text": "additional parameter of next which",
    "start": "463680",
    "end": "465660"
  },
  {
    "text": "specifies the next function in the cool",
    "start": "465660",
    "end": "467460"
  },
  {
    "text": "chain we can then perform computation",
    "start": "467460",
    "end": "469380"
  },
  {
    "text": "before and after cooling the next",
    "start": "469380",
    "end": "471120"
  },
  {
    "text": "function by using middleware we can set",
    "start": "471120",
    "end": "473280"
  },
  {
    "text": "the extential value of a request so",
    "start": "473280",
    "end": "475080"
  },
  {
    "text": "information is passed along down the",
    "start": "475080",
    "end": "477120"
  },
  {
    "text": "cool chain or to modify any of the",
    "start": "477120",
    "end": "478919"
  },
  {
    "text": "request parameters we can also use",
    "start": "478919",
    "end": "480599"
  },
  {
    "text": "middleware to intercept and send back a",
    "start": "480599",
    "end": "482460"
  },
  {
    "text": "response before going further down the",
    "start": "482460",
    "end": "483960"
  },
  {
    "text": "chain this can be useful for tasks such",
    "start": "483960",
    "end": "485819"
  },
  {
    "text": "as rate limiting or checking the",
    "start": "485819",
    "end": "487440"
  },
  {
    "text": "validity of a Json web token",
    "start": "487440",
    "end": "489960"
  },
  {
    "text": "I mentioned at the start that async sdd",
    "start": "489960",
    "end": "492300"
  },
  {
    "text": "is the recommended asynchronous runtime",
    "start": "492300",
    "end": "494220"
  },
  {
    "text": "to use and it's probably a good idea to",
    "start": "494220",
    "end": "496440"
  },
  {
    "text": "do so",
    "start": "496440",
    "end": "497520"
  },
  {
    "text": "but there may be a case in which you",
    "start": "497520",
    "end": "499440"
  },
  {
    "text": "have to or just want to use Tokyo let's",
    "start": "499440",
    "end": "501840"
  },
  {
    "text": "say your favorite Library uses Tokyo",
    "start": "501840",
    "end": "503699"
  },
  {
    "text": "under the hood ad isn't compatible with",
    "start": "503699",
    "end": "505440"
  },
  {
    "text": "async sdd well fortunately you can get",
    "start": "505440",
    "end": "507960"
  },
  {
    "text": "tied to work with Tokyo to do so is",
    "start": "507960",
    "end": "509879"
  },
  {
    "text": "actually pretty simple just add Tokyo to",
    "start": "509879",
    "end": "512039"
  },
  {
    "text": "the cargo.com and change the main",
    "start": "512039",
    "end": "513719"
  },
  {
    "text": "function to use Tokyo main instead",
    "start": "513719",
    "end": "516959"
  },
  {
    "text": "now this should work as expected I've",
    "start": "516959",
    "end": "519539"
  },
  {
    "text": "not found any issues with this but I",
    "start": "519539",
    "end": "521099"
  },
  {
    "text": "also haven't tested it extensively",
    "start": "521099",
    "end": "522659"
  },
  {
    "text": "there's no reference to this in the",
    "start": "522659",
    "end": "524700"
  },
  {
    "text": "documentation so your mileage may vary",
    "start": "524700",
    "end": "528380"
  },
  {
    "text": "tide itself is a simple and familiar web",
    "start": "528720",
    "end": "530880"
  },
  {
    "text": "framework to use with rust having spent",
    "start": "530880",
    "end": "533220"
  },
  {
    "text": "a lot of time working with node go and C",
    "start": "533220",
    "end": "535620"
  },
  {
    "text": "plus tide feels a lot closer to home",
    "start": "535620",
    "end": "537660"
  },
  {
    "text": "compared to other rust web Frameworks",
    "start": "537660",
    "end": "539760"
  },
  {
    "text": "which can typically use more magic under",
    "start": "539760",
    "end": "542040"
  },
  {
    "text": "the hood I really enjoy writing apis in",
    "start": "542040",
    "end": "544740"
  },
  {
    "text": "Rust and I'm looking forward to doing",
    "start": "544740",
    "end": "546000"
  },
  {
    "text": "some future content on creating rust",
    "start": "546000",
    "end": "547560"
  },
  {
    "text": "microservices I hope you enjoyed this",
    "start": "547560",
    "end": "549600"
  },
  {
    "text": "brief look at tide and I'll see you on",
    "start": "549600",
    "end": "551220"
  },
  {
    "text": "the next one",
    "start": "551220",
    "end": "553639"
  }
]