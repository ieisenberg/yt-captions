[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": "Crystal as a general purpose",
    "start": "0",
    "end": "1560"
  },
  {
    "text": "object-oriented programming language",
    "start": "1560",
    "end": "3179"
  },
  {
    "text": "with syntax inspired by the language",
    "start": "3179",
    "end": "4860"
  },
  {
    "text": "Ruby",
    "start": "4860",
    "end": "6180"
  },
  {
    "text": "unlike Ruby however crystal is a",
    "start": "6180",
    "end": "8160"
  },
  {
    "text": "compiled language with decent",
    "start": "8160",
    "end": "9360"
  },
  {
    "text": "performance static type checking",
    "start": "9360",
    "end": "10980"
  },
  {
    "text": "concurrency and other modern features",
    "start": "10980",
    "end": "13380"
  },
  {
    "text": "all of which make it a really",
    "start": "13380",
    "end": "14940"
  },
  {
    "text": "interesting language to use but",
    "start": "14940",
    "end": "17940"
  },
  {
    "text": "I don't think it's ready for production",
    "start": "17940",
    "end": "19500"
  },
  {
    "text": "just yet",
    "start": "19500",
    "end": "21119"
  },
  {
    "text": "before I go into why let's look at some",
    "start": "21119",
    "end": "23460"
  },
  {
    "text": "of the features I think makes Crystal",
    "start": "23460",
    "end": "24840"
  },
  {
    "text": "such an interesting and fun language to",
    "start": "24840",
    "end": "27420"
  },
  {
    "text": "learn",
    "start": "27420",
    "end": "28740"
  },
  {
    "text": "to get started with Crystal first",
    "start": "28740",
    "end": "30480"
  },
  {
    "start": "29000",
    "end": "52000"
  },
  {
    "text": "install it as per the instructions for",
    "start": "30480",
    "end": "32099"
  },
  {
    "text": "your operating system",
    "start": "32099",
    "end": "33600"
  },
  {
    "text": "I'm using Arch by the way so I'll",
    "start": "33600",
    "end": "35700"
  },
  {
    "text": "install using Pac-Man",
    "start": "35700",
    "end": "37980"
  },
  {
    "text": "next we can write Crystal code in a file",
    "start": "37980",
    "end": "40379"
  },
  {
    "text": "that ends in the dot CR extension here's",
    "start": "40379",
    "end": "43079"
  },
  {
    "text": "how to write good old hello world",
    "start": "43079",
    "end": "45540"
  },
  {
    "text": "to run the code we then use the crystal",
    "start": "45540",
    "end": "47100"
  },
  {
    "text": "command with the file name",
    "start": "47100",
    "end": "48899"
  },
  {
    "text": "I know I promise interesting let me kick",
    "start": "48899",
    "end": "51539"
  },
  {
    "text": "it up a notch",
    "start": "51539",
    "end": "52680"
  },
  {
    "start": "52000",
    "end": "73000"
  },
  {
    "text": "Crystal provides some commonly used data",
    "start": "52680",
    "end": "54539"
  },
  {
    "text": "structures out of the box a Razer used",
    "start": "54539",
    "end": "56699"
  },
  {
    "text": "to store items in a list that can",
    "start": "56699",
    "end": "58140"
  },
  {
    "text": "dynamically grow sets are used for",
    "start": "58140",
    "end": "60480"
  },
  {
    "text": "storing a collection of unique elements",
    "start": "60480",
    "end": "62219"
  },
  {
    "text": "and hashes which are used to store key",
    "start": "62219",
    "end": "64378"
  },
  {
    "text": "value pairs one major difference when",
    "start": "64379",
    "end": "66540"
  },
  {
    "text": "compared to Ruby is that the value types",
    "start": "66540",
    "end": "68159"
  },
  {
    "text": "of these containers are set when we",
    "start": "68159",
    "end": "69540"
  },
  {
    "text": "initialize them which allows the",
    "start": "69540",
    "end": "71040"
  },
  {
    "text": "compiler to check for type safety",
    "start": "71040",
    "end": "73740"
  },
  {
    "start": "73000",
    "end": "118000"
  },
  {
    "text": "functions are written similar to how",
    "start": "73740",
    "end": "75540"
  },
  {
    "text": "they are in Ruby they are defined using",
    "start": "75540",
    "end": "77820"
  },
  {
    "text": "both the def and end keywords one major",
    "start": "77820",
    "end": "80939"
  },
  {
    "text": "difference when compared to Ruby is that",
    "start": "80939",
    "end": "82500"
  },
  {
    "text": "we're able to specify the expected type",
    "start": "82500",
    "end": "84299"
  },
  {
    "text": "of our input parameters this is called",
    "start": "84299",
    "end": "86820"
  },
  {
    "text": "type restriction and enables greater",
    "start": "86820",
    "end": "89460"
  },
  {
    "text": "type safety when defining functions and",
    "start": "89460",
    "end": "91560"
  },
  {
    "text": "helps to make crystal code more readable",
    "start": "91560",
    "end": "93840"
  },
  {
    "text": "in addition to the input parameters",
    "start": "93840",
    "end": "95640"
  },
  {
    "text": "we're also able to specify a type for",
    "start": "95640",
    "end": "97680"
  },
  {
    "text": "the return value which can be useful to",
    "start": "97680",
    "end": "99720"
  },
  {
    "text": "help the compiler understand what it",
    "start": "99720",
    "end": "101340"
  },
  {
    "text": "should return",
    "start": "101340",
    "end": "102720"
  },
  {
    "text": "when running our Fibonacci function",
    "start": "102720",
    "end": "104460"
  },
  {
    "text": "without this we end up with an",
    "start": "104460",
    "end": "106079"
  },
  {
    "text": "arithmetic overflow",
    "start": "106079",
    "end": "107700"
  },
  {
    "text": "setting the type to a 64-bit integer",
    "start": "107700",
    "end": "109799"
  },
  {
    "text": "allows our code to work as expected",
    "start": "109799",
    "end": "112200"
  },
  {
    "text": "functions can also be overloaded which",
    "start": "112200",
    "end": "114240"
  },
  {
    "text": "enables using different type parameters",
    "start": "114240",
    "end": "115860"
  },
  {
    "text": "for inputs",
    "start": "115860",
    "end": "118700"
  },
  {
    "start": "118000",
    "end": "188000"
  },
  {
    "text": "crystal is an object-oriented language",
    "start": "118740",
    "end": "120659"
  },
  {
    "text": "which means that classes are used",
    "start": "120659",
    "end": "122820"
  },
  {
    "text": "throughout",
    "start": "122820",
    "end": "124259"
  },
  {
    "text": "in fact similar to Ruby everything is an",
    "start": "124259",
    "end": "127439"
  },
  {
    "text": "object in Crystal which means that",
    "start": "127439",
    "end": "129539"
  },
  {
    "text": "everything has a type and can respond to",
    "start": "129539",
    "end": "131580"
  },
  {
    "text": "methods",
    "start": "131580",
    "end": "132660"
  },
  {
    "text": "to define a class we use the class",
    "start": "132660",
    "end": "135000"
  },
  {
    "text": "keyword followed by the name of the type",
    "start": "135000",
    "end": "136920"
  },
  {
    "text": "that we want we can then Define methods",
    "start": "136920",
    "end": "138959"
  },
  {
    "text": "and attributes that instances of our",
    "start": "138959",
    "end": "140879"
  },
  {
    "text": "class will have",
    "start": "140879",
    "end": "142080"
  },
  {
    "text": "to create an instance of a class we use",
    "start": "142080",
    "end": "143819"
  },
  {
    "text": "the new keyword",
    "start": "143819",
    "end": "145739"
  },
  {
    "text": "as with any object-oriented language",
    "start": "145739",
    "end": "147660"
  },
  {
    "text": "Crystal also provides support for",
    "start": "147660",
    "end": "149340"
  },
  {
    "text": "inheritance and polymorphism if",
    "start": "149340",
    "end": "151560"
  },
  {
    "text": "inheritance makes you wince there's also",
    "start": "151560",
    "end": "153660"
  },
  {
    "text": "abstract types that one can inherit from",
    "start": "153660",
    "end": "155459"
  },
  {
    "text": "which are similar to interfaces in other",
    "start": "155459",
    "end": "157379"
  },
  {
    "text": "languages such as Java or go",
    "start": "157379",
    "end": "159720"
  },
  {
    "text": "in addition to classes Crystal also",
    "start": "159720",
    "end": "161760"
  },
  {
    "text": "provides the struct type structs are",
    "start": "161760",
    "end": "164040"
  },
  {
    "text": "very similar to glasses except for one",
    "start": "164040",
    "end": "165599"
  },
  {
    "text": "major difference they are allocated on",
    "start": "165599",
    "end": "167580"
  },
  {
    "text": "the stack instead of the Heap this means",
    "start": "167580",
    "end": "169980"
  },
  {
    "text": "that they're also passed by value or",
    "start": "169980",
    "end": "172080"
  },
  {
    "text": "copied instead of passed by reference",
    "start": "172080",
    "end": "174780"
  },
  {
    "text": "Crystal also provides support for enums",
    "start": "174780",
    "end": "176940"
  },
  {
    "text": "which can be used to define a set of",
    "start": "176940",
    "end": "178500"
  },
  {
    "text": "named values",
    "start": "178500",
    "end": "180180"
  },
  {
    "text": "because everything a crystal is an",
    "start": "180180",
    "end": "181920"
  },
  {
    "text": "object this also applies to enums",
    "start": "181920",
    "end": "183900"
  },
  {
    "text": "therefore as well as having a type they",
    "start": "183900",
    "end": "186120"
  },
  {
    "text": "are able to Define methods",
    "start": "186120",
    "end": "188400"
  },
  {
    "start": "188000",
    "end": "214000"
  },
  {
    "text": "Crystal provides a concept known as",
    "start": "188400",
    "end": "190019"
  },
  {
    "text": "modules which are used for two purposes",
    "start": "190019",
    "end": "191819"
  },
  {
    "text": "the first is the namespacing of other",
    "start": "191819",
    "end": "194519"
  },
  {
    "text": "types methods or constants and the",
    "start": "194519",
    "end": "197220"
  },
  {
    "text": "second is as a partial type that can be",
    "start": "197220",
    "end": "199319"
  },
  {
    "text": "mixed into other types",
    "start": "199319",
    "end": "201599"
  },
  {
    "text": "to define a module you first use the",
    "start": "201599",
    "end": "203700"
  },
  {
    "text": "module keyword followed by the module",
    "start": "203700",
    "end": "205680"
  },
  {
    "text": "name we can then use this module as is",
    "start": "205680",
    "end": "208200"
  },
  {
    "text": "with encapsulation or include it into",
    "start": "208200",
    "end": "210659"
  },
  {
    "text": "another type to mix in the methods",
    "start": "210659",
    "end": "214519"
  },
  {
    "start": "214000",
    "end": "261000"
  },
  {
    "text": "Crystal also supports the use of",
    "start": "215099",
    "end": "216959"
  },
  {
    "text": "generics which allows for writing code",
    "start": "216959",
    "end": "218760"
  },
  {
    "text": "that can operate on different types",
    "start": "218760",
    "end": "220260"
  },
  {
    "text": "without sacrificing type safety",
    "start": "220260",
    "end": "222720"
  },
  {
    "text": "we've already used generic types with",
    "start": "222720",
    "end": "224580"
  },
  {
    "text": "our Collections and we can easily Define",
    "start": "224580",
    "end": "226620"
  },
  {
    "text": "our own when declaring our class",
    "start": "226620",
    "end": "228780"
  },
  {
    "text": "with our generic class defined we can go",
    "start": "228780",
    "end": "231599"
  },
  {
    "text": "ahead and create different instances",
    "start": "231599",
    "end": "233040"
  },
  {
    "text": "which specify the concrete type",
    "start": "233040",
    "end": "234780"
  },
  {
    "text": "associated",
    "start": "234780",
    "end": "236700"
  },
  {
    "text": "nil handling is perhaps one of my",
    "start": "236700",
    "end": "238680"
  },
  {
    "text": "favorite features of Crystal as Crystal",
    "start": "238680",
    "end": "240959"
  },
  {
    "text": "aims to be a safe language the compiler",
    "start": "240959",
    "end": "242940"
  },
  {
    "text": "will throw an error for any usage or",
    "start": "242940",
    "end": "244680"
  },
  {
    "text": "potential nil types that are unchecked",
    "start": "244680",
    "end": "246659"
  },
  {
    "text": "before use",
    "start": "246659",
    "end": "249060"
  },
  {
    "text": "it's also possible to define a function",
    "start": "249060",
    "end": "251159"
  },
  {
    "text": "that may return a nil by using the or",
    "start": "251159",
    "end": "253620"
  },
  {
    "text": "nil operator in our return type this",
    "start": "253620",
    "end": "256440"
  },
  {
    "text": "acts similar to the optional or maybe",
    "start": "256440",
    "end": "258479"
  },
  {
    "text": "types found in other languages",
    "start": "258479",
    "end": "261019"
  },
  {
    "start": "261000",
    "end": "304000"
  },
  {
    "text": "dependencies can be managed through the",
    "start": "261019",
    "end": "263340"
  },
  {
    "text": "use of the shards package manager",
    "start": "263340",
    "end": "265560"
  },
  {
    "text": "shards first needs to be installed as",
    "start": "265560",
    "end": "267360"
  },
  {
    "text": "per the instructions for your operating",
    "start": "267360",
    "end": "268979"
  },
  {
    "text": "system",
    "start": "268979",
    "end": "270000"
  },
  {
    "text": "with shards installed the init command",
    "start": "270000",
    "end": "271979"
  },
  {
    "text": "will create a shaft.yaml at the project",
    "start": "271979",
    "end": "273660"
  },
  {
    "text": "root we can then edit the yaml file to",
    "start": "273660",
    "end": "276180"
  },
  {
    "text": "add dependencies to our project",
    "start": "276180",
    "end": "278040"
  },
  {
    "text": "as shells is a decentralized package",
    "start": "278040",
    "end": "280199"
  },
  {
    "text": "manager we can load any git repository",
    "start": "280199",
    "end": "282479"
  },
  {
    "text": "such as foundong GitHub or gitlab as a",
    "start": "282479",
    "end": "285360"
  },
  {
    "text": "dependency to our project",
    "start": "285360",
    "end": "286860"
  },
  {
    "text": "with our dependency added we can then",
    "start": "286860",
    "end": "288900"
  },
  {
    "text": "use the shards install command to pull",
    "start": "288900",
    "end": "290460"
  },
  {
    "text": "them down and build them",
    "start": "290460",
    "end": "291960"
  },
  {
    "text": "we can then use our new dependency with",
    "start": "291960",
    "end": "294060"
  },
  {
    "text": "the require keyword which will import",
    "start": "294060",
    "end": "295800"
  },
  {
    "text": "the package into our file",
    "start": "295800",
    "end": "297960"
  },
  {
    "text": "by also setting up our Target in the",
    "start": "297960",
    "end": "299820"
  },
  {
    "text": "show.yammer we can use the shards build",
    "start": "299820",
    "end": "301740"
  },
  {
    "text": "and run commands with our project",
    "start": "301740",
    "end": "304500"
  },
  {
    "start": "304000",
    "end": "325000"
  },
  {
    "text": "concurrency is provided out of the box",
    "start": "304500",
    "end": "306300"
  },
  {
    "text": "with the use of fibers and channels",
    "start": "306300",
    "end": "308759"
  },
  {
    "text": "fibers are a form of green threads and",
    "start": "308759",
    "end": "310800"
  },
  {
    "text": "crystals similar to go routines in go or",
    "start": "310800",
    "end": "313259"
  },
  {
    "text": "co-routines in Colin",
    "start": "313259",
    "end": "315240"
  },
  {
    "text": "starting a new fiber is as simple as",
    "start": "315240",
    "end": "317100"
  },
  {
    "text": "using the spawn keyword",
    "start": "317100",
    "end": "319380"
  },
  {
    "text": "crossfiber communication can be achieved",
    "start": "319380",
    "end": "321300"
  },
  {
    "text": "using channels which allows data to be",
    "start": "321300",
    "end": "323280"
  },
  {
    "text": "sent from one fiber to another",
    "start": "323280",
    "end": "326100"
  },
  {
    "start": "325000",
    "end": "452000"
  },
  {
    "text": "given all the features I've mentioned",
    "start": "326100",
    "end": "327660"
  },
  {
    "text": "Crystal feels like a fantastic language",
    "start": "327660",
    "end": "329699"
  },
  {
    "text": "to start using right away",
    "start": "329699",
    "end": "331680"
  },
  {
    "text": "but as I mentioned I don't think it's",
    "start": "331680",
    "end": "333720"
  },
  {
    "text": "ready for production",
    "start": "333720",
    "end": "335100"
  },
  {
    "text": "let me explain why",
    "start": "335100",
    "end": "337139"
  },
  {
    "text": "so whilst Crystal provides native",
    "start": "337139",
    "end": "338940"
  },
  {
    "text": "support for concurrency it doesn't have",
    "start": "338940",
    "end": "340680"
  },
  {
    "text": "any parallel processing out of the box",
    "start": "340680",
    "end": "342360"
  },
  {
    "text": "this means that whilst we have",
    "start": "342360",
    "end": "344220"
  },
  {
    "text": "concurrent execution it's still",
    "start": "344220",
    "end": "345780"
  },
  {
    "text": "performed on a single thread which means",
    "start": "345780",
    "end": "348000"
  },
  {
    "text": "that fibers cannot be used to improve",
    "start": "348000",
    "end": "349860"
  },
  {
    "text": "the performance of CPU bound",
    "start": "349860",
    "end": "351240"
  },
  {
    "text": "applications",
    "start": "351240",
    "end": "352860"
  },
  {
    "text": "now there is a preview flag that one can",
    "start": "352860",
    "end": "354960"
  },
  {
    "text": "use to build their code which will",
    "start": "354960",
    "end": "356580"
  },
  {
    "text": "enable multi-threadica currency",
    "start": "356580",
    "end": "358979"
  },
  {
    "text": "which does work kind of",
    "start": "358979",
    "end": "361800"
  },
  {
    "text": "this is still very much in beta however",
    "start": "361800",
    "end": "363960"
  },
  {
    "text": "and has been since 2019.",
    "start": "363960",
    "end": "367380"
  },
  {
    "text": "the second reason I don't think crystal",
    "start": "367380",
    "end": "368940"
  },
  {
    "text": "is ready for production is the lack of",
    "start": "368940",
    "end": "370979"
  },
  {
    "text": "maturity in the ecosystem",
    "start": "370979",
    "end": "373199"
  },
  {
    "text": "tooling such as order completion is",
    "start": "373199",
    "end": "375419"
  },
  {
    "text": "still an active development and whilst",
    "start": "375419",
    "end": "377340"
  },
  {
    "text": "an LSP server does exist in the form of",
    "start": "377340",
    "end": "379500"
  },
  {
    "text": "crystalline it's still very much in",
    "start": "379500",
    "end": "381539"
  },
  {
    "text": "development other tooling such as syntax",
    "start": "381539",
    "end": "383940"
  },
  {
    "text": "highlighting and documentation does",
    "start": "383940",
    "end": "385979"
  },
  {
    "text": "exist but it's not as mature as I would",
    "start": "385979",
    "end": "388500"
  },
  {
    "text": "hope it to be especially from a modern",
    "start": "388500",
    "end": "390240"
  },
  {
    "text": "language",
    "start": "390240",
    "end": "391319"
  },
  {
    "text": "now I think the ecosystem is mature",
    "start": "391319",
    "end": "393660"
  },
  {
    "text": "enough that you can get by but it's just",
    "start": "393660",
    "end": "395880"
  },
  {
    "text": "going to make the development experience",
    "start": "395880",
    "end": "397319"
  },
  {
    "text": "less than ideal",
    "start": "397319",
    "end": "400020"
  },
  {
    "text": "and the biggest reason I think to hold",
    "start": "400020",
    "end": "401759"
  },
  {
    "text": "off on using crystal in production is",
    "start": "401759",
    "end": "403440"
  },
  {
    "text": "the lack of sponsorship from any big",
    "start": "403440",
    "end": "405240"
  },
  {
    "text": "companies",
    "start": "405240",
    "end": "406560"
  },
  {
    "text": "whilst I dislike that this is even a",
    "start": "406560",
    "end": "408360"
  },
  {
    "text": "thing having a large tech company",
    "start": "408360",
    "end": "409919"
  },
  {
    "text": "invested in our language even just by",
    "start": "409919",
    "end": "412080"
  },
  {
    "text": "using it means that the language is",
    "start": "412080",
    "end": "413759"
  },
  {
    "text": "likely to have constant development",
    "start": "413759",
    "end": "415319"
  },
  {
    "text": "resources allocated Crystal at the",
    "start": "415319",
    "end": "417720"
  },
  {
    "text": "moment is very much backed by the",
    "start": "417720",
    "end": "419460"
  },
  {
    "text": "community which makes it challenging to",
    "start": "419460",
    "end": "421740"
  },
  {
    "text": "guarantee whether or not the language",
    "start": "421740",
    "end": "423120"
  },
  {
    "text": "will continue to be maintained and",
    "start": "423120",
    "end": "424919"
  },
  {
    "text": "developed upon",
    "start": "424919",
    "end": "426360"
  },
  {
    "text": "therefore using it in production as a",
    "start": "426360",
    "end": "428400"
  },
  {
    "text": "risk one that does not really have a",
    "start": "428400",
    "end": "430259"
  },
  {
    "text": "worthwhile reward at this time",
    "start": "430259",
    "end": "433319"
  },
  {
    "text": "ultimately I think crystal is a really",
    "start": "433319",
    "end": "435479"
  },
  {
    "text": "interesting language and I'd love to see",
    "start": "435479",
    "end": "437100"
  },
  {
    "text": "it grow into its full potential until",
    "start": "437100",
    "end": "439440"
  },
  {
    "text": "that time however I'll be using it",
    "start": "439440",
    "end": "441240"
  },
  {
    "text": "mainly with hobby projects and won't",
    "start": "441240",
    "end": "443520"
  },
  {
    "text": "rely on it for production just yet",
    "start": "443520",
    "end": "447918"
  }
]