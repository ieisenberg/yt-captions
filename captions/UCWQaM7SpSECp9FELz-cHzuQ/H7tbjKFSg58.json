[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "since go 1.22 was released the net HTTP",
    "start": "120",
    "end": "3520"
  },
  {
    "text": "package is now all you need but knowing",
    "start": "3520",
    "end": "5759"
  },
  {
    "text": "how to use the HTTP serve M type can be",
    "start": "5759",
    "end": "8360"
  },
  {
    "text": "rather elusive especially for advanced",
    "start": "8360",
    "end": "10559"
  },
  {
    "text": "features such as middleware sub routing",
    "start": "10559",
    "end": "13000"
  },
  {
    "text": "path parameters HTTP methods and passing",
    "start": "13000",
    "end": "15799"
  },
  {
    "text": "through context so in this video we're",
    "start": "15799",
    "end": "18119"
  },
  {
    "text": "going to look at how to implement each",
    "start": "18119",
    "end": "19600"
  },
  {
    "text": "of these using only the go standard",
    "start": "19600",
    "end": "21880"
  },
  {
    "text": "Library the first implementation we're",
    "start": "21880",
    "end": "24160"
  },
  {
    "start": "22000",
    "end": "129000"
  },
  {
    "text": "going to look at is path parameters to",
    "start": "24160",
    "end": "26560"
  },
  {
    "text": "add a path parameter to a route is",
    "start": "26560",
    "end": "28400"
  },
  {
    "text": "pretty similar to other Frameworks such",
    "start": "28400",
    "end": "30160"
  },
  {
    "text": "as gorilla MX or Chi and involves",
    "start": "30160",
    "end": "32238"
  },
  {
    "text": "wrapping the path component you want to",
    "start": "32239",
    "end": "34040"
  },
  {
    "text": "parameterize in braces with the name of",
    "start": "34040",
    "end": "36200"
  },
  {
    "text": "the parameter inside in this example",
    "start": "36200",
    "end": "38480"
  },
  {
    "text": "we've added the path parameter of ID to",
    "start": "38480",
    "end": "40760"
  },
  {
    "text": "our / item path with our parameter",
    "start": "40760",
    "end": "43399"
  },
  {
    "text": "defined we can then pull this out inside",
    "start": "43399",
    "end": "45280"
  },
  {
    "text": "of our Handler by using the path Value",
    "start": "45280",
    "end": "47520"
  },
  {
    "text": "method of the request type if we run",
    "start": "47520",
    "end": "49840"
  },
  {
    "text": "this code and send up the following",
    "start": "49840",
    "end": "51399"
  },
  {
    "text": "requests our endpoint is now returning",
    "start": "51399",
    "end": "53559"
  },
  {
    "text": "the last path component to us which is",
    "start": "53559",
    "end": "55719"
  },
  {
    "text": "what's being captured in the ID path",
    "start": "55719",
    "end": "57760"
  },
  {
    "text": "parameter one thing to note however is",
    "start": "57760",
    "end": "59760"
  },
  {
    "text": "that in order to have access to path",
    "start": "59760",
    "end": "61559"
  },
  {
    "text": "parameters you'll need to make sure",
    "start": "61559",
    "end": "63039"
  },
  {
    "text": "you're using go 1.22 and that you have",
    "start": "63039",
    "end": "65960"
  },
  {
    "text": "go 1.22 specified in your go mod file",
    "start": "65960",
    "end": "69000"
  },
  {
    "text": "any earlier versions won't have access",
    "start": "69000",
    "end": "70920"
  },
  {
    "text": "to this feature whilst setting up path",
    "start": "70920",
    "end": "73040"
  },
  {
    "text": "parameters is rather simple there is one",
    "start": "73040",
    "end": "75200"
  },
  {
    "text": "caveat to be aware of the caveat is",
    "start": "75200",
    "end": "77439"
  },
  {
    "text": "conflicting paths and precedence for",
    "start": "77439",
    "end": "79680"
  },
  {
    "text": "example here I have two routes that",
    "start": "79680",
    "end": "81560"
  },
  {
    "text": "conflict with one another despite this",
    "start": "81560",
    "end": "83680"
  },
  {
    "text": "however if I send a request to the path",
    "start": "83680",
    "end": "85640"
  },
  {
    "text": "ending in/ latest it will still be",
    "start": "85640",
    "end": "87720"
  },
  {
    "text": "routed to the correct Handler even",
    "start": "87720",
    "end": "89600"
  },
  {
    "text": "though both of the registered paths",
    "start": "89600",
    "end": "91280"
  },
  {
    "text": "match this works because go determines",
    "start": "91280",
    "end": "93600"
  },
  {
    "text": "which path is correct based on a",
    "start": "93600",
    "end": "95240"
  },
  {
    "text": "precedent ordering of most specific wins",
    "start": "95240",
    "end": "97880"
  },
  {
    "text": "in our case that's the path that ends",
    "start": "97880",
    "end": "99640"
  },
  {
    "text": "in/ latest in rare cases however it's",
    "start": "99640",
    "end": "102680"
  },
  {
    "text": "difficult for go to determine which is",
    "start": "102680",
    "end": "104320"
  },
  {
    "text": "the more specific path take the",
    "start": "104320",
    "end": "106360"
  },
  {
    "text": "following two paths as an example if I",
    "start": "106360",
    "end": "108600"
  },
  {
    "text": "sent up a request to/ posts SL latest",
    "start": "108600",
    "end": "111680"
  },
  {
    "text": "which one would resolve in this case",
    "start": "111680",
    "end": "113520"
  },
  {
    "text": "they're both as specific as each other",
    "start": "113520",
    "end": "115439"
  },
  {
    "text": "each having one path parameter if we try",
    "start": "115439",
    "end": "118000"
  },
  {
    "text": "and run this code however go will Det",
    "start": "118000",
    "end": "119880"
  },
  {
    "text": "protect the conflict and panic when we",
    "start": "119880",
    "end": "121680"
  },
  {
    "text": "try to register our paths ultimately",
    "start": "121680",
    "end": "124079"
  },
  {
    "text": "this is a good thing as it prevents any",
    "start": "124079",
    "end": "126360"
  },
  {
    "text": "requests being routed to the wrong",
    "start": "126360",
    "end": "128360"
  },
  {
    "text": "Handler the next feature for advanced",
    "start": "128360",
    "end": "130560"
  },
  {
    "start": "129000",
    "end": "225000"
  },
  {
    "text": "hdtp routing is the ability to easily",
    "start": "130560",
    "end": "133040"
  },
  {
    "text": "handle different hdtp methods before",
    "start": "133040",
    "end": "135640"
  },
  {
    "text": "version 1.22 this was done by having to",
    "start": "135640",
    "end": "138280"
  },
  {
    "text": "perform a check on the request inside of",
    "start": "138280",
    "end": "140280"
  },
  {
    "text": "the HTTP Handler whilst it worked it was",
    "start": "140280",
    "end": "143120"
  },
  {
    "text": "pretty tedious now however it's pretty",
    "start": "143120",
    "end": "145599"
  },
  {
    "text": "easy all we have to do is Define the",
    "start": "145599",
    "end": "147599"
  },
  {
    "text": "method at the start of the matcher",
    "start": "147599",
    "end": "149280"
  },
  {
    "text": "string by adding the post method to the",
    "start": "149280",
    "end": "151400"
  },
  {
    "text": "start of the path the create monster",
    "start": "151400",
    "end": "153360"
  },
  {
    "text": "Handler will only be invoked for",
    "start": "153360",
    "end": "155040"
  },
  {
    "text": "requests that contain a post method",
    "start": "155040",
    "end": "157080"
  },
  {
    "text": "method-based routing can also be set up",
    "start": "157080",
    "end": "159000"
  },
  {
    "text": "for the other HTTP methods such as put",
    "start": "159000",
    "end": "161720"
  },
  {
    "text": "get delete patch and options if a path",
    "start": "161720",
    "end": "165159"
  },
  {
    "text": "has no explicit method defined then it",
    "start": "165159",
    "end": "167400"
  },
  {
    "text": "will handle any methods that haven't",
    "start": "167400",
    "end": "169080"
  },
  {
    "text": "been explicitly defined for that path",
    "start": "169080",
    "end": "171800"
  },
  {
    "text": "for example here I have two entries to",
    "start": "171800",
    "end": "173959"
  },
  {
    "text": "the/ monster slid endpoint the first is",
    "start": "173959",
    "end": "177200"
  },
  {
    "text": "set up to explicitly handle a PCH",
    "start": "177200",
    "end": "179280"
  },
  {
    "text": "request however the second has no",
    "start": "179280",
    "end": "181440"
  },
  {
    "text": "explicit method defined and therefore",
    "start": "181440",
    "end": "183760"
  },
  {
    "text": "will be routed to for any HTTP method",
    "start": "183760",
    "end": "186239"
  },
  {
    "text": "that isn't a put in this example you can",
    "start": "186239",
    "end": "188640"
  },
  {
    "text": "see the Handler is being called for get",
    "start": "188640",
    "end": "190799"
  },
  {
    "text": "post delete and even patch in order to",
    "start": "190799",
    "end": "193680"
  },
  {
    "text": "limit an endpoint to a method you'll",
    "start": "193680",
    "end": "195440"
  },
  {
    "text": "need to explicitly Define it now when we",
    "start": "195440",
    "end": "197680"
  },
  {
    "text": "send up any requests that aren't a get",
    "start": "197680",
    "end": "199760"
  },
  {
    "text": "method we'll receive a response of",
    "start": "199760",
    "end": "201840"
  },
  {
    "text": "method not allowed one thing to be aware",
    "start": "201840",
    "end": "204000"
  },
  {
    "text": "of is that when defining a method for",
    "start": "204000",
    "end": "205760"
  },
  {
    "text": "your path it requires a single space",
    "start": "205760",
    "end": "207920"
  },
  {
    "text": "after it anything more than a single",
    "start": "207920",
    "end": "209959"
  },
  {
    "text": "space will cause the route to no longer",
    "start": "209959",
    "end": "211879"
  },
  {
    "text": "match as was the case with path",
    "start": "211879",
    "end": "213680"
  },
  {
    "text": "parameters method-based routing also",
    "start": "213680",
    "end": "215599"
  },
  {
    "text": "requires 1.22 to be specified inside of",
    "start": "215599",
    "end": "218319"
  },
  {
    "text": "the Project's go mod file if an earlier",
    "start": "218319",
    "end": "220640"
  },
  {
    "text": "version of go is specified then your",
    "start": "220640",
    "end": "222519"
  },
  {
    "text": "expected endpoints will return a 44 the",
    "start": "222519",
    "end": "225599"
  },
  {
    "start": "225000",
    "end": "367000"
  },
  {
    "text": "next Advanced routing feature is to",
    "start": "225599",
    "end": "227720"
  },
  {
    "text": "perform handling based on a host name",
    "start": "227720",
    "end": "230120"
  },
  {
    "text": "rather than just a path we can achieve",
    "start": "230120",
    "end": "232200"
  },
  {
    "text": "this by passing in the host domain that",
    "start": "232200",
    "end": "234079"
  },
  {
    "text": "we want the router to handle on in my",
    "start": "234079",
    "end": "236360"
  },
  {
    "text": "case I'm setting this to be dreams of",
    "start": "236360",
    "end": "237959"
  },
  {
    "text": "code. Vu which will handle any requests",
    "start": "237959",
    "end": "240480"
  },
  {
    "text": "sent to that host we can test this",
    "start": "240480",
    "end": "242360"
  },
  {
    "text": "locally with curl by passing in the host",
    "start": "242360",
    "end": "244480"
  },
  {
    "text": "header however we can also make this a",
    "start": "244480",
    "end": "246480"
  },
  {
    "text": "little more real world by using an",
    "start": "246480",
    "end": "248680"
  },
  {
    "text": "actual domain but where to get one for",
    "start": "248680",
    "end": "251000"
  },
  {
    "text": "an affordable price that's where the",
    "start": "251000",
    "end": "252920"
  },
  {
    "text": "sponsor of this video can help us pork",
    "start": "252920",
    "end": "254920"
  },
  {
    "text": "bun.com whether you need a domain to",
    "start": "254920",
    "end": "257400"
  },
  {
    "text": "Showcase your latest app that will",
    "start": "257400",
    "end": "258919"
  },
  {
    "text": "change the world or you just want to be",
    "start": "258919",
    "end": "260919"
  },
  {
    "text": "the developer that ships pork bun has",
    "start": "260919",
    "end": "263759"
  },
  {
    "text": "you covered porkbun offers TOS that are",
    "start": "263759",
    "end": "266160"
  },
  {
    "text": "perfect for software development",
    "start": "266160",
    "end": "267520"
  },
  {
    "text": "projects such asapp dodev and my",
    "start": "267520",
    "end": "270320"
  },
  {
    "text": "personal favorite do Fu the best part is",
    "start": "270320",
    "end": "272880"
  },
  {
    "text": "through this video's referral link you",
    "start": "272880",
    "end": "274520"
  },
  {
    "text": "can get one of these domains for just $5",
    "start": "274520",
    "end": "276520"
  },
  {
    "text": "for the first year which is pretty much",
    "start": "276520",
    "end": "278639"
  },
  {
    "text": "unheard of in this economy for this",
    "start": "278639",
    "end": "280880"
  },
  {
    "text": "project I registered the dreams of code.",
    "start": "280880",
    "end": "283120"
  },
  {
    "text": "Food domain with pork bun and by using",
    "start": "283120",
    "end": "285440"
  },
  {
    "text": "pork Bun's intuitive UI I've easily",
    "start": "285440",
    "end": "287840"
  },
  {
    "text": "managed to point the a records to the",
    "start": "287840",
    "end": "289520"
  },
  {
    "text": "VPS server that I'm running my app on",
    "start": "289520",
    "end": "291680"
  },
  {
    "text": "not only are these TOS affordable but",
    "start": "291680",
    "end": "293759"
  },
  {
    "text": "they're also secure as each requires",
    "start": "293759",
    "end": "295759"
  },
  {
    "text": "https in order to load forban again has",
    "start": "295759",
    "end": "298639"
  },
  {
    "text": "us covered as they provide a free let's",
    "start": "298639",
    "end": "300759"
  },
  {
    "text": "encrypt SSL CT with every domain name",
    "start": "300759",
    "end": "303080"
  },
  {
    "text": "registration perfect for when you want",
    "start": "303080",
    "end": "304919"
  },
  {
    "text": "to ship quickly without worrying about",
    "start": "304919",
    "end": "306759"
  },
  {
    "text": "infrastructure we can add TLS by first",
    "start": "306759",
    "end": "309160"
  },
  {
    "text": "copying over the SSL bundle to our",
    "start": "309160",
    "end": "311280"
  },
  {
    "text": "server followed by extracting the",
    "start": "311280",
    "end": "313039"
  },
  {
    "text": "archive then you'll want to copy over",
    "start": "313039",
    "end": "315039"
  },
  {
    "text": "the domain seert and the private key",
    "start": "315039",
    "end": "316880"
  },
  {
    "text": "into your project directory afterwards",
    "start": "316880",
    "end": "319000"
  },
  {
    "text": "we can open up our main.go file and add",
    "start": "319000",
    "end": "321319"
  },
  {
    "text": "in the following lines to create a TLS",
    "start": "321319",
    "end": "323440"
  },
  {
    "text": "configuration from the certificate and",
    "start": "323440",
    "end": "325440"
  },
  {
    "text": "private key we can then use this",
    "start": "325440",
    "end": "327080"
  },
  {
    "text": "configuration with our server followed",
    "start": "327080",
    "end": "329080"
  },
  {
    "text": "by telling it to listen with TLS lastly",
    "start": "329080",
    "end": "331720"
  },
  {
    "text": "make sure to change the port to 443 now",
    "start": "331720",
    "end": "334479"
  },
  {
    "text": "if we build and run our API we should be",
    "start": "334479",
    "end": "336639"
  },
  {
    "text": "able to hit it at its domain using https",
    "start": "336639",
    "end": "340039"
  },
  {
    "text": "great for getting started in production",
    "start": "340039",
    "end": "342000"
  },
  {
    "text": "you'll probably want to automate the",
    "start": "342000",
    "end": "343720"
  },
  {
    "text": "generation of SSL SS using something",
    "start": "343720",
    "end": "345880"
  },
  {
    "text": "like cbot let me know if you want to see",
    "start": "345880",
    "end": "347800"
  },
  {
    "text": "a video on that in the future whilst",
    "start": "347800",
    "end": "349639"
  },
  {
    "text": "this app likely won't change the world",
    "start": "349639",
    "end": "351319"
  },
  {
    "text": "we have managed to ship it with TLS",
    "start": "351319",
    "end": "353039"
  },
  {
    "text": "enabled by using only the standard",
    "start": "353039",
    "end": "355120"
  },
  {
    "text": "library and a Little Help from pork bun",
    "start": "355120",
    "end": "357440"
  },
  {
    "text": "so to get your own domain for $5 use the",
    "start": "357440",
    "end": "360000"
  },
  {
    "text": "promo code appdev fu5 or click the link",
    "start": "360000",
    "end": "362720"
  },
  {
    "text": "in the description down below a big",
    "start": "362720",
    "end": "364800"
  },
  {
    "text": "thank you to porkbun for sponsoring this",
    "start": "364800",
    "end": "366720"
  },
  {
    "text": "video the next feature is actually the",
    "start": "366720",
    "end": "369080"
  },
  {
    "start": "367000",
    "end": "536000"
  },
  {
    "text": "one that was most requested in my video",
    "start": "369080",
    "end": "371039"
  },
  {
    "text": "about Go's 1.22 release this feature was",
    "start": "371039",
    "end": "373960"
  },
  {
    "text": "middleware and how to add it with HTTP",
    "start": "373960",
    "end": "376120"
  },
  {
    "text": "serve MX on initial thoughts it may seem",
    "start": "376120",
    "end": "378440"
  },
  {
    "text": "that this feature is lacking but this is",
    "start": "378440",
    "end": "380160"
  },
  {
    "text": "where the beauty of the net / HTTP",
    "start": "380160",
    "end": "382479"
  },
  {
    "text": "package really shines let's look at how",
    "start": "382479",
    "end": "384599"
  },
  {
    "text": "to do this by first adding in a simple",
    "start": "384599",
    "end": "386520"
  },
  {
    "text": "logging middleware to do so let's first",
    "start": "386520",
    "end": "388560"
  },
  {
    "text": "create a new function that accepts an",
    "start": "388560",
    "end": "390120"
  },
  {
    "text": "HTTP Handler as its parameter and",
    "start": "390120",
    "end": "392360"
  },
  {
    "text": "returns an HTTP Handler as its result",
    "start": "392360",
    "end": "394919"
  },
  {
    "text": "the HTTP Handler type is actually an",
    "start": "394919",
    "end": "397120"
  },
  {
    "text": "interface in the standard Library which",
    "start": "397120",
    "end": "399080"
  },
  {
    "text": "describes any type that has the function",
    "start": "399080",
    "end": "400800"
  },
  {
    "text": "serve HTTP these are the building blocks",
    "start": "400800",
    "end": "403400"
  },
  {
    "text": "of HTTP routing when it comes to go",
    "start": "403400",
    "end": "405720"
  },
  {
    "text": "inside of our middleware function we can",
    "start": "405720",
    "end": "407520"
  },
  {
    "text": "then return a new HTTP Handler Funk this",
    "start": "407520",
    "end": "410080"
  },
  {
    "text": "type allows us to easily wrap a closure",
    "start": "410080",
    "end": "412000"
  },
  {
    "text": "conforming it to the HTTP Handler",
    "start": "412000",
    "end": "413960"
  },
  {
    "text": "interface the code inside of this",
    "start": "413960",
    "end": "415919"
  },
  {
    "text": "closure is what makes up the middleware",
    "start": "415919",
    "end": "417759"
  },
  {
    "text": "logic and will be called for each",
    "start": "417759",
    "end": "419599"
  },
  {
    "text": "request inside let's add a new variable",
    "start": "419599",
    "end": "421680"
  },
  {
    "text": "to capture the start time of the request",
    "start": "421680",
    "end": "423720"
  },
  {
    "text": "being handled then we'll pass the",
    "start": "423720",
    "end": "425440"
  },
  {
    "text": "request and response down the Chain by",
    "start": "425440",
    "end": "427319"
  },
  {
    "text": "calling the serve HTTP method of the",
    "start": "427319",
    "end": "429400"
  },
  {
    "text": "next Handler afterwards we can then call",
    "start": "429400",
    "end": "431520"
  },
  {
    "text": "the log. print line function passing in",
    "start": "431520",
    "end": "433680"
  },
  {
    "text": "the request method the request path and",
    "start": "433680",
    "end": "436000"
  },
  {
    "text": "the amount of time that has passed since",
    "start": "436000",
    "end": "437680"
  },
  {
    "text": "the start timestamp this wraps up our",
    "start": "437680",
    "end": "440000"
  },
  {
    "text": "actual middleware function now we need",
    "start": "440000",
    "end": "441720"
  },
  {
    "text": "to add it into our routing stack to do",
    "start": "441720",
    "end": "444080"
  },
  {
    "text": "so let's head on over to where our",
    "start": "444080",
    "end": "445720"
  },
  {
    "text": "router is defined inside of main.go then",
    "start": "445720",
    "end": "448599"
  },
  {
    "text": "in order to use our logging middleware",
    "start": "448599",
    "end": "450400"
  },
  {
    "text": "we first need to import the middleware",
    "start": "450400",
    "end": "452080"
  },
  {
    "text": "package now we're ready to add logging",
    "start": "452080",
    "end": "453840"
  },
  {
    "text": "to each of our defined paths as the HTTP",
    "start": "453840",
    "end": "456759"
  },
  {
    "text": "serm router conforms to the HTTP Handler",
    "start": "456759",
    "end": "459639"
  },
  {
    "text": "interface then we can pass it as the",
    "start": "459639",
    "end": "461639"
  },
  {
    "text": "argument to our middleware function this",
    "start": "461639",
    "end": "463759"
  },
  {
    "text": "essentially creates a new router that is",
    "start": "463759",
    "end": "465599"
  },
  {
    "text": "wrapped in the logging middleware now",
    "start": "465599",
    "end": "467520"
  },
  {
    "text": "when we run this code and send up a",
    "start": "467520",
    "end": "469159"
  },
  {
    "text": "couple of requests using curl we can see",
    "start": "469159",
    "end": "471240"
  },
  {
    "text": "that each of these are logged to the",
    "start": "471240",
    "end": "472520"
  },
  {
    "text": "server's standard out which prints the",
    "start": "472520",
    "end": "474599"
  },
  {
    "text": "method path and time it took for the",
    "start": "474599",
    "end": "476680"
  },
  {
    "text": "request to be handled one Improvement we",
    "start": "476680",
    "end": "478720"
  },
  {
    "text": "can make is to also log the HTTP status",
    "start": "478720",
    "end": "481440"
  },
  {
    "text": "of the response as well however if we",
    "start": "481440",
    "end": "483400"
  },
  {
    "text": "try to do this we run into an issue the",
    "start": "483400",
    "end": "485599"
  },
  {
    "text": "response writer type doesn't provide us",
    "start": "485599",
    "end": "487280"
  },
  {
    "text": "a method to read the HTTP status code",
    "start": "487280",
    "end": "490360"
  },
  {
    "text": "fortunately because this is an interface",
    "start": "490360",
    "end": "492400"
  },
  {
    "text": "there is a way to expose it inside of",
    "start": "492400",
    "end": "494479"
  },
  {
    "text": "our middleware package we can create a",
    "start": "494479",
    "end": "496159"
  },
  {
    "text": "new type called a wrapped writer which",
    "start": "496159",
    "end": "498280"
  },
  {
    "text": "itself extends an HTTP response writer",
    "start": "498280",
    "end": "500960"
  },
  {
    "text": "but also contains a status code property",
    "start": "500960",
    "end": "503240"
  },
  {
    "text": "we can then implement the right header",
    "start": "503240",
    "end": "505120"
  },
  {
    "text": "method in order to intercept and capture",
    "start": "505120",
    "end": "507360"
  },
  {
    "text": "the given HTTP status code then inside",
    "start": "507360",
    "end": "510039"
  },
  {
    "text": "of our middleware we can use this new",
    "start": "510039",
    "end": "511560"
  },
  {
    "text": "type to wrap the response writer",
    "start": "511560",
    "end": "513360"
  },
  {
    "text": "provided to our middleware Handler we'll",
    "start": "513360",
    "end": "515440"
  },
  {
    "text": "also set the status code to be HTTP",
    "start": "515440",
    "end": "517839"
  },
  {
    "text": "status okay then we'll pass this waps",
    "start": "517839",
    "end": "520080"
  },
  {
    "text": "writer to our next HTTP Handler then in",
    "start": "520080",
    "end": "522599"
  },
  {
    "text": "our log. print line function we're able",
    "start": "522599",
    "end": "524640"
  },
  {
    "text": "to access the status code found in the",
    "start": "524640",
    "end": "526680"
  },
  {
    "text": "wrapped type now when we test this code",
    "start": "526680",
    "end": "529040"
  },
  {
    "text": "we'll also see the response status code",
    "start": "529040",
    "end": "531000"
  },
  {
    "text": "being printed to the console as well",
    "start": "531000",
    "end": "533000"
  },
  {
    "text": "with that we've managed to easily add",
    "start": "533000",
    "end": "534640"
  },
  {
    "text": "some middleware into our router however",
    "start": "534640",
    "end": "536880"
  },
  {
    "start": "536000",
    "end": "604000"
  },
  {
    "text": "when building API Services you'll often",
    "start": "536880",
    "end": "538839"
  },
  {
    "text": "use multiple when it comes to your",
    "start": "538839",
    "end": "540240"
  },
  {
    "text": "middleware stack as this stack starts to",
    "start": "540240",
    "end": "542440"
  },
  {
    "text": "grow your code will look less like go",
    "start": "542440",
    "end": "544399"
  },
  {
    "text": "and more like lisp to tidy this up we",
    "start": "544399",
    "end": "546640"
  },
  {
    "text": "can use something called middleware",
    "start": "546640",
    "end": "547959"
  },
  {
    "text": "chaining which turns our code from",
    "start": "547959",
    "end": "549640"
  },
  {
    "text": "looking like this into this to achieve",
    "start": "549640",
    "end": "552000"
  },
  {
    "text": "this let's head on over to the",
    "start": "552000",
    "end": "553040"
  },
  {
    "text": "middleware package and first Define a",
    "start": "553040",
    "end": "555000"
  },
  {
    "text": "new type this will be the middleware",
    "start": "555000",
    "end": "557079"
  },
  {
    "text": "type which is going to be a function",
    "start": "557079",
    "end": "558880"
  },
  {
    "text": "that accepts an HTTP Handler as its",
    "start": "558880",
    "end": "560880"
  },
  {
    "text": "input and returns an HTTP Handler this",
    "start": "560880",
    "end": "563320"
  },
  {
    "text": "is the same function definition as our",
    "start": "563320",
    "end": "565320"
  },
  {
    "text": "logging middleware next we can Define",
    "start": "565320",
    "end": "567240"
  },
  {
    "text": "the method to wrap our middleware in our",
    "start": "567240",
    "end": "569560"
  },
  {
    "text": "case this is going to be called create",
    "start": "569560",
    "end": "571120"
  },
  {
    "text": "stack this method will accept a vartic",
    "start": "571120",
    "end": "573480"
  },
  {
    "text": "array of middleware as its argument and",
    "start": "573480",
    "end": "575680"
  },
  {
    "text": "return a middleware as its result for",
    "start": "575680",
    "end": "578000"
  },
  {
    "text": "the implementation of this method let's",
    "start": "578000",
    "end": "579839"
  },
  {
    "text": "first return our middleware closure then",
    "start": "579839",
    "end": "582120"
  },
  {
    "text": "we can add the following implementation",
    "start": "582120",
    "end": "583720"
  },
  {
    "text": "to apply each middleware in the stack",
    "start": "583720",
    "end": "585839"
  },
  {
    "text": "this will cause us to return the topmost",
    "start": "585839",
    "end": "587600"
  },
  {
    "text": "middleware which itself will Nest all of",
    "start": "587600",
    "end": "589560"
  },
  {
    "text": "the subsequent middleware underneath now",
    "start": "589560",
    "end": "591839"
  },
  {
    "text": "if we head on over to our main function",
    "start": "591839",
    "end": "593720"
  },
  {
    "text": "we can then refactor our previously",
    "start": "593720",
    "end": "595399"
  },
  {
    "text": "wrapped code using this create stack",
    "start": "595399",
    "end": "597240"
  },
  {
    "text": "function if we go ahead and run this",
    "start": "597240",
    "end": "599000"
  },
  {
    "text": "code we can see that our middleware",
    "start": "599000",
    "end": "600399"
  },
  {
    "text": "chain works as it did before but now our",
    "start": "600399",
    "end": "602600"
  },
  {
    "text": "code is just that little bit more",
    "start": "602600",
    "end": "604120"
  },
  {
    "start": "604000",
    "end": "684000"
  },
  {
    "text": "readable the next feature to implement",
    "start": "604120",
    "end": "606480"
  },
  {
    "text": "is sub routing which enables us to split",
    "start": "606480",
    "end": "609079"
  },
  {
    "text": "our routing logic across multiple",
    "start": "609079",
    "end": "610720"
  },
  {
    "text": "routers to see how to implement this",
    "start": "610720",
    "end": "612839"
  },
  {
    "text": "let's first start with this example",
    "start": "612839",
    "end": "614519"
  },
  {
    "text": "which is a simple router that has some",
    "start": "614519",
    "end": "616160"
  },
  {
    "text": "paths already configured to perform crud",
    "start": "616160",
    "end": "618120"
  },
  {
    "text": "operations on a monster resource let's",
    "start": "618120",
    "end": "620480"
  },
  {
    "text": "say we receive a ticket that specifies",
    "start": "620480",
    "end": "622440"
  },
  {
    "text": "that this API should be versioned under",
    "start": "622440",
    "end": "624519"
  },
  {
    "text": "a V1 path prefix instead of adding this",
    "start": "624519",
    "end": "627120"
  },
  {
    "text": "prefix to each path manually we can use",
    "start": "627120",
    "end": "629480"
  },
  {
    "text": "another router to achieve this to do so",
    "start": "629480",
    "end": "631560"
  },
  {
    "text": "we can call the handle function on our",
    "start": "631560",
    "end": "633519"
  },
  {
    "text": "new router passing in the V1 path prefix",
    "start": "633519",
    "end": "636600"
  },
  {
    "text": "in order for this to work it needs to",
    "start": "636600",
    "end": "638079"
  },
  {
    "text": "have the trailing slash as well for the",
    "start": "638079",
    "end": "640120"
  },
  {
    "text": "Handler we need to use the HTTP strip",
    "start": "640120",
    "end": "642279"
  },
  {
    "text": "prefix function to remove the SL V1 From",
    "start": "642279",
    "end": "644639"
  },
  {
    "text": "the Path before it's sent to our next",
    "start": "644639",
    "end": "646320"
  },
  {
    "text": "router now when I run this code and send",
    "start": "646320",
    "end": "648440"
  },
  {
    "text": "up a couple of Cur requests to the slv1",
    "start": "648440",
    "end": "651240"
  },
  {
    "text": "monsters end points we can see that our",
    "start": "651240",
    "end": "653000"
  },
  {
    "text": "requests are being handled as expected",
    "start": "653000",
    "end": "655399"
  },
  {
    "text": "as well as nesting paths sub routers are",
    "start": "655399",
    "end": "657760"
  },
  {
    "text": "also useful when it comes to Middle W",
    "start": "657760",
    "end": "659800"
  },
  {
    "text": "for example in this case I have two",
    "start": "659800",
    "end": "661720"
  },
  {
    "text": "different routers one that's intended to",
    "start": "661720",
    "end": "663639"
  },
  {
    "text": "be used by anybody and the other",
    "start": "663639",
    "end": "665399"
  },
  {
    "text": "containing routes that are restricted to",
    "start": "665399",
    "end": "667160"
  },
  {
    "text": "admins only in order to require",
    "start": "667160",
    "end": "669360"
  },
  {
    "text": "authorization to our admin routes we can",
    "start": "669360",
    "end": "671800"
  },
  {
    "text": "add the following Handler to our router",
    "start": "671800",
    "end": "673800"
  },
  {
    "text": "wrapping the admin routes in the ensure",
    "start": "673800",
    "end": "675760"
  },
  {
    "text": "admin middleware if we then go ahead and",
    "start": "675760",
    "end": "677959"
  },
  {
    "text": "test this out we can see that our get",
    "start": "677959",
    "end": "679680"
  },
  {
    "text": "request doesn't require an admin",
    "start": "679680",
    "end": "681200"
  },
  {
    "text": "credential but our post requests do the",
    "start": "681200",
    "end": "684440"
  },
  {
    "start": "684000",
    "end": "832000"
  },
  {
    "text": "last feature I want to look at is how to",
    "start": "684440",
    "end": "686200"
  },
  {
    "text": "pass data down through your routing",
    "start": "686200",
    "end": "687880"
  },
  {
    "text": "stack for example let's say we have an",
    "start": "687880",
    "end": "690120"
  },
  {
    "text": "isauthenticated middleware that will",
    "start": "690120",
    "end": "692040"
  },
  {
    "text": "pull out and validate the user's",
    "start": "692040",
    "end": "693639"
  },
  {
    "text": "information from an authorization header",
    "start": "693639",
    "end": "695839"
  },
  {
    "text": "let's improve this middleware by making",
    "start": "695839",
    "end": "697560"
  },
  {
    "text": "the user ID available to any Downstream",
    "start": "697560",
    "end": "699880"
  },
  {
    "text": "handlers we can achieve this by making",
    "start": "699880",
    "end": "701720"
  },
  {
    "text": "use of the context type from the context",
    "start": "701720",
    "end": "703920"
  },
  {
    "text": "package normally this type is used for",
    "start": "703920",
    "end": "706079"
  },
  {
    "text": "cancellation in asynchronous tasks but",
    "start": "706079",
    "end": "708720"
  },
  {
    "text": "it also enables the ability to store",
    "start": "708720",
    "end": "710440"
  },
  {
    "text": "arbitrary data using key values every",
    "start": "710440",
    "end": "713000"
  },
  {
    "text": "HTTP request has an Associated context",
    "start": "713000",
    "end": "715880"
  },
  {
    "text": "which we can easily extend and override",
    "start": "715880",
    "end": "718120"
  },
  {
    "text": "to do so let's head back back on over to",
    "start": "718120",
    "end": "719680"
  },
  {
    "text": "our middleware code and first import the",
    "start": "719680",
    "end": "721680"
  },
  {
    "text": "context package next we need to define a",
    "start": "721680",
    "end": "724320"
  },
  {
    "text": "unique key that we can use to both set",
    "start": "724320",
    "end": "726399"
  },
  {
    "text": "and get this value from our requests",
    "start": "726399",
    "end": "728639"
  },
  {
    "text": "context then scrolling down to our",
    "start": "728639",
    "end": "730560"
  },
  {
    "text": "middlewares Handler let's first remove",
    "start": "730560",
    "end": "732560"
  },
  {
    "text": "the log. print line and replace it with",
    "start": "732560",
    "end": "734680"
  },
  {
    "text": "the following code this line calls the",
    "start": "734680",
    "end": "736800"
  },
  {
    "text": "with Value method of the context package",
    "start": "736800",
    "end": "739240"
  },
  {
    "text": "taking in the requests context our new",
    "start": "739240",
    "end": "741639"
  },
  {
    "text": "key and our user ID value this method",
    "start": "741639",
    "end": "744519"
  },
  {
    "text": "returns a new child context which",
    "start": "744519",
    "end": "746320"
  },
  {
    "text": "contains the key value pair inside",
    "start": "746320",
    "end": "748560"
  },
  {
    "text": "therefore we need to assign this new",
    "start": "748560",
    "end": "750079"
  },
  {
    "text": "context value to our request we can do",
    "start": "750079",
    "end": "752360"
  },
  {
    "text": "so using the with context method passing",
    "start": "752360",
    "end": "754839"
  },
  {
    "text": "in our new context value this will",
    "start": "754839",
    "end": "757079"
  },
  {
    "text": "return a new copy of the request that",
    "start": "757079",
    "end": "758760"
  },
  {
    "text": "contains this new context therefore we",
    "start": "758760",
    "end": "760920"
  },
  {
    "text": "need to pass this new value down to the",
    "start": "760920",
    "end": "762680"
  },
  {
    "text": "next Handler that wraps up the",
    "start": "762680",
    "end": "764279"
  },
  {
    "text": "implementation in our mware now we need",
    "start": "764279",
    "end": "766399"
  },
  {
    "text": "to pull the user ID out of the context",
    "start": "766399",
    "end": "768440"
  },
  {
    "text": "in the Handler function if we navigate",
    "start": "768440",
    "end": "770639"
  },
  {
    "text": "over to the Handler where we want to",
    "start": "770639",
    "end": "772160"
  },
  {
    "text": "pull out this user ID we can do so by",
    "start": "772160",
    "end": "774120"
  },
  {
    "text": "adding in the following line because the",
    "start": "774120",
    "end": "776240"
  },
  {
    "text": "context. context stores values in a type",
    "start": "776240",
    "end": "778360"
  },
  {
    "text": "unsafe manner we'll need to perform a",
    "start": "778360",
    "end": "780160"
  },
  {
    "text": "typ cast by adding in the following code",
    "start": "780160",
    "end": "782240"
  },
  {
    "text": "at the end of the line we can verify",
    "start": "782240",
    "end": "784199"
  },
  {
    "text": "that this type cast was okay by",
    "start": "784199",
    "end": "785959"
  },
  {
    "text": "capturing a second return value which is",
    "start": "785959",
    "end": "788320"
  },
  {
    "text": "a Boolean describing whether or not the",
    "start": "788320",
    "end": "790160"
  },
  {
    "text": "cast was successful now if we run this",
    "start": "790160",
    "end": "792440"
  },
  {
    "text": "code and send up a cur request with an",
    "start": "792440",
    "end": "794440"
  },
  {
    "text": "authorization header our Handler is able",
    "start": "794440",
    "end": "796560"
  },
  {
    "text": "to access the user ID contained due to",
    "start": "796560",
    "end": "798760"
  },
  {
    "text": "the middleware extracting the value with",
    "start": "798760",
    "end": "800880"
  },
  {
    "text": "that we've managed to implement Advanced",
    "start": "800880",
    "end": "802800"
  },
  {
    "text": "routing capabilities by only using the",
    "start": "802800",
    "end": "805240"
  },
  {
    "text": "standard library for some things you may",
    "start": "805240",
    "end": "807480"
  },
  {
    "text": "still want to consider using a third",
    "start": "807480",
    "end": "809160"
  },
  {
    "text": "party package however if you decide you",
    "start": "809160",
    "end": "811320"
  },
  {
    "text": "want to stick with the standard Library",
    "start": "811320",
    "end": "813040"
  },
  {
    "text": "the net / HTTP package now has",
    "start": "813040",
    "end": "815440"
  },
  {
    "text": "everything you",
    "start": "815440",
    "end": "816680"
  },
  {
    "text": "need I want to give a big thank you to",
    "start": "816680",
    "end": "818959"
  },
  {
    "text": "my newest Channel member Eduardo Diaz",
    "start": "818959",
    "end": "821600"
  },
  {
    "text": "thank you for supporting the channel and",
    "start": "821600",
    "end": "823279"
  },
  {
    "text": "allowing me to bring my content to",
    "start": "823279",
    "end": "824920"
  },
  {
    "text": "hundreds of thousands of viewers around",
    "start": "824920",
    "end": "826639"
  },
  {
    "text": "the",
    "start": "826639",
    "end": "828759"
  },
  {
    "text": "world",
    "start": "830600",
    "end": "833600"
  }
]