[
  {
    "start": "0",
    "end": "35000"
  },
  {
    "text": "the hardest thing to scale in a web",
    "start": "160",
    "end": "2040"
  },
  {
    "text": "application is the database therefore in",
    "start": "2040",
    "end": "4640"
  },
  {
    "text": "order to improve performance a cach",
    "start": "4640",
    "end": "6560"
  },
  {
    "text": "layer is often added to the stack this",
    "start": "6560",
    "end": "8800"
  },
  {
    "text": "can be pretty effective improving",
    "start": "8800",
    "end": "10639"
  },
  {
    "text": "performance while reducing the number of",
    "start": "10639",
    "end": "12400"
  },
  {
    "text": "database queries however when it comes",
    "start": "12400",
    "end": "14360"
  },
  {
    "text": "to software development nothing ever",
    "start": "14360",
    "end": "16240"
  },
  {
    "text": "comes for free and caching itself has",
    "start": "16240",
    "end": "18560"
  },
  {
    "text": "its own problems the biggest one is",
    "start": "18560",
    "end": "20920"
  },
  {
    "text": "stale data which is when the data in",
    "start": "20920",
    "end": "22840"
  },
  {
    "text": "your cache no longer matches what's in",
    "start": "22840",
    "end": "24800"
  },
  {
    "text": "your database this is solved through",
    "start": "24800",
    "end": "26720"
  },
  {
    "text": "cash invalidation but knowing when to",
    "start": "26720",
    "end": "28679"
  },
  {
    "text": "flush your cash can be run rather",
    "start": "28679",
    "end": "30480"
  },
  {
    "text": "difficult often being dictated by the",
    "start": "30480",
    "end": "32758"
  },
  {
    "text": "type of data you're caching and the",
    "start": "32759",
    "end": "34239"
  },
  {
    "text": "pattern you're using to understand what",
    "start": "34239",
    "end": "36360"
  },
  {
    "start": "35000",
    "end": "61000"
  },
  {
    "text": "those problems are and how to solve them",
    "start": "36360",
    "end": "38320"
  },
  {
    "text": "let's look at implementing the most",
    "start": "38320",
    "end": "39840"
  },
  {
    "text": "common caching pattern there is cach",
    "start": "39840",
    "end": "41879"
  },
  {
    "text": "aside which is also known as lazy",
    "start": "41879",
    "end": "43879"
  },
  {
    "text": "loading in this strategy your",
    "start": "43879",
    "end": "45600"
  },
  {
    "text": "application will request data initially",
    "start": "45600",
    "end": "47440"
  },
  {
    "text": "from the cache and if there's a hit",
    "start": "47440",
    "end": "49440"
  },
  {
    "text": "return that data to the client if the",
    "start": "49440",
    "end": "51320"
  },
  {
    "text": "cache misses however then the database",
    "start": "51320",
    "end": "53280"
  },
  {
    "text": "is instead quered for the data this data",
    "start": "53280",
    "end": "55359"
  },
  {
    "text": "is then both stored in the cache and",
    "start": "55359",
    "end": "57239"
  },
  {
    "text": "returned to the caller it's a pretty",
    "start": "57239",
    "end": "58879"
  },
  {
    "text": "naive strategy but but it works rather",
    "start": "58879",
    "end": "60840"
  },
  {
    "text": "effectively to see this in action let's",
    "start": "60840",
    "end": "62840"
  },
  {
    "start": "61000",
    "end": "412000"
  },
  {
    "text": "go ahead and implement it to go along",
    "start": "62840",
    "end": "65080"
  },
  {
    "text": "with this video I have a base project",
    "start": "65080",
    "end": "67000"
  },
  {
    "text": "that I've created in Rust which is a",
    "start": "67000",
    "end": "69000"
  },
  {
    "text": "simple CR app for managing spells inside",
    "start": "69000",
    "end": "71080"
  },
  {
    "text": "of a Wizard's spell book The text stack",
    "start": "71080",
    "end": "73439"
  },
  {
    "text": "of this project is rust and axom for the",
    "start": "73439",
    "end": "75600"
  },
  {
    "text": "HTTP server for the database we're using",
    "start": "75600",
    "end": "78200"
  },
  {
    "text": "post Gres with SQL X and for the cache",
    "start": "78200",
    "end": "80880"
  },
  {
    "text": "I'm choosing to use redis the actual",
    "start": "80880",
    "end": "82960"
  },
  {
    "text": "text stack itself doesn't matter too",
    "start": "82960",
    "end": "84640"
  },
  {
    "text": "much you could easily replace reddis",
    "start": "84640",
    "end": "86439"
  },
  {
    "text": "with an in-memory cache if you wanted to",
    "start": "86439",
    "end": "88560"
  },
  {
    "text": "the benefit of using reddis however is",
    "start": "88560",
    "end": "90400"
  },
  {
    "text": "that we're able to view the data that it",
    "start": "90400",
    "end": "92000"
  },
  {
    "text": "contains using the CLI in order to",
    "start": "92000",
    "end": "94399"
  },
  {
    "text": "implement the cach aze strategy first",
    "start": "94399",
    "end": "96520"
  },
  {
    "text": "clone down the project files using git",
    "start": "96520",
    "end": "98720"
  },
  {
    "text": "once completed you can open up the",
    "start": "98720",
    "end": "100360"
  },
  {
    "text": "project in your favorite text editor and",
    "start": "100360",
    "end": "102240"
  },
  {
    "text": "then navigate over to the handlers /",
    "start": "102240",
    "end": "104560"
  },
  {
    "text": "read. RS file inside of this is a find",
    "start": "104560",
    "end": "107320"
  },
  {
    "text": "by ID function which is used by our HTTP",
    "start": "107320",
    "end": "110119"
  },
  {
    "text": "Handler to pel out spells from the",
    "start": "110119",
    "end": "111600"
  },
  {
    "text": "database by their ID before we add in",
    "start": "111600",
    "end": "113759"
  },
  {
    "text": "our cache let's go ahead and see this",
    "start": "113759",
    "end": "115439"
  },
  {
    "text": "endpoint in action in order to run this",
    "start": "115439",
    "end": "117880"
  },
  {
    "text": "we're going to need an instance of postr",
    "start": "117880",
    "end": "120200"
  },
  {
    "text": "you can run an instance of this locally",
    "start": "120200",
    "end": "121759"
  },
  {
    "text": "if you want to but in order to give this",
    "start": "121759",
    "end": "123680"
  },
  {
    "text": "a more real world feel we're going to",
    "start": "123680",
    "end": "125759"
  },
  {
    "text": "use the sponsor of today's video Ivan",
    "start": "125759",
    "end": "128119"
  },
  {
    "text": "which will allow us to deploy both a",
    "start": "128119",
    "end": "129679"
  },
  {
    "text": "postgres and reddis instance for free to",
    "start": "129679",
    "end": "132040"
  },
  {
    "text": "deploy our instance first head on over",
    "start": "132040",
    "end": "133959"
  },
  {
    "text": "to the Ivan website at go. ian. i/",
    "start": "133959",
    "end": "137599"
  },
  {
    "text": "dreams of code or you can click the link",
    "start": "137599",
    "end": "139640"
  },
  {
    "text": "in the description down below then",
    "start": "139640",
    "end": "141239"
  },
  {
    "text": "you'll want to create a free Ivan",
    "start": "141239",
    "end": "142760"
  },
  {
    "text": "account using your preferred method once",
    "start": "142760",
    "end": "144959"
  },
  {
    "text": "signed up you'll then want to create a",
    "start": "144959",
    "end": "146560"
  },
  {
    "text": "new project for the application for me",
    "start": "146560",
    "end": "148599"
  },
  {
    "text": "I'm going to call this spellwork with",
    "start": "148599",
    "end": "150280"
  },
  {
    "text": "our project created we're then prompted",
    "start": "150280",
    "end": "152000"
  },
  {
    "text": "to create a new service for this we want",
    "start": "152000",
    "end": "154120"
  },
  {
    "text": "to create a postgrad database so go",
    "start": "154120",
    "end": "156319"
  },
  {
    "text": "ahead and click the service button upon",
    "start": "156319",
    "end": "158599"
  },
  {
    "text": "doing so make sure to click the free",
    "start": "158599",
    "end": "160360"
  },
  {
    "text": "plan and then choose the location",
    "start": "160360",
    "end": "162159"
  },
  {
    "text": "closest to you lastly give your service",
    "start": "162159",
    "end": "164400"
  },
  {
    "text": "a name and click the big blue create",
    "start": "164400",
    "end": "166519"
  },
  {
    "text": "button you'll then be shown your",
    "start": "166519",
    "end": "168280"
  },
  {
    "text": "connection details here copy the service",
    "start": "168280",
    "end": "170640"
  },
  {
    "text": "URI to your clipboard and then head back",
    "start": "170640",
    "end": "172640"
  },
  {
    "text": "on over to your project files inside",
    "start": "172640",
    "end": "174720"
  },
  {
    "text": "this project you'll find a NV file with",
    "start": "174720",
    "end": "177000"
  },
  {
    "text": "a couple of environment variables left",
    "start": "177000",
    "end": "178760"
  },
  {
    "text": "empty you'll want to pay paste this",
    "start": "178760",
    "end": "180239"
  },
  {
    "text": "service URI for the database URL envar",
    "start": "180239",
    "end": "183200"
  },
  {
    "text": "afterwards we can then run our server",
    "start": "183200",
    "end": "184680"
  },
  {
    "text": "using the cargo run command this will",
    "start": "184680",
    "end": "187000"
  },
  {
    "text": "automatically perform a database",
    "start": "187000",
    "end": "188640"
  },
  {
    "text": "migration for us and insert eight rows",
    "start": "188640",
    "end": "190959"
  },
  {
    "text": "into the spell table as well if we send",
    "start": "190959",
    "end": "193280"
  },
  {
    "text": "off a curl request to the Local Host",
    "start": "193280",
    "end": "195120"
  },
  {
    "text": "3000 spells endpoint we can retrieve all",
    "start": "195120",
    "end": "197920"
  },
  {
    "text": "of the rows inside of our table the",
    "start": "197920",
    "end": "199879"
  },
  {
    "text": "Handler that we looked at which we're",
    "start": "199879",
    "end": "201400"
  },
  {
    "text": "about to add caching to is the/ spells",
    "start": "201400",
    "end": "203760"
  },
  {
    "text": "/id endpoint which allows us to pull out",
    "start": "203760",
    "end": "206519"
  },
  {
    "text": "individual spells by their ID we can",
    "start": "206519",
    "end": "208799"
  },
  {
    "text": "measure the amount of time that request",
    "start": "208799",
    "end": "210239"
  },
  {
    "text": "takes by heading on over to the main. RS",
    "start": "210239",
    "end": "212400"
  },
  {
    "text": "file and enabling the debug logging",
    "start": "212400",
    "end": "214360"
  },
  {
    "text": "level then if we rerun our server and",
    "start": "214360",
    "end": "216519"
  },
  {
    "text": "send up two find by ID requests we can",
    "start": "216519",
    "end": "219360"
  },
  {
    "text": "see that it takes around 100",
    "start": "219360",
    "end": "220920"
  },
  {
    "text": "milliseconds for the request to process",
    "start": "220920",
    "end": "223159"
  },
  {
    "text": "you'll notice the first request was a",
    "start": "223159",
    "end": "224879"
  },
  {
    "text": "little bit longer that's because it's",
    "start": "224879",
    "end": "226360"
  },
  {
    "text": "creating a prepared statement that is",
    "start": "226360",
    "end": "228120"
  },
  {
    "text": "then reused by postgres let's take a",
    "start": "228120",
    "end": "230439"
  },
  {
    "text": "mental note of how long this took so we",
    "start": "230439",
    "end": "232120"
  },
  {
    "text": "can compare it to the cash a side",
    "start": "232120",
    "end": "233799"
  },
  {
    "text": "version that we're about to implement to",
    "start": "233799",
    "end": "235760"
  },
  {
    "text": "do so navigate back to your editor and",
    "start": "235760",
    "end": "237840"
  },
  {
    "text": "head on over to the Handler SL read. RS",
    "start": "237840",
    "end": "240799"
  },
  {
    "text": "file inside the find by ID function is",
    "start": "240799",
    "end": "243400"
  },
  {
    "text": "where we're going to implement this",
    "start": "243400",
    "end": "244760"
  },
  {
    "text": "strategy the first step is to check the",
    "start": "244760",
    "end": "246920"
  },
  {
    "text": "cache with the ID of the spell that",
    "start": "246920",
    "end": "248319"
  },
  {
    "text": "we're looking for to see if it contains",
    "start": "248319",
    "end": "249920"
  },
  {
    "text": "an entry in our case the redist",
    "start": "249920",
    "end": "251959"
  },
  {
    "text": "connection or Cache is stored inside of",
    "start": "251959",
    "end": "254159"
  },
  {
    "text": "the App State therefore we can use the",
    "start": "254159",
    "end": "256280"
  },
  {
    "text": "get method passing in the ID of the",
    "start": "256280",
    "end": "258199"
  },
  {
    "text": "spell this is what that would look like",
    "start": "258199",
    "end": "259880"
  },
  {
    "text": "in the redis CLI because this method can",
    "start": "259880",
    "end": "262600"
  },
  {
    "text": "fail we don't want it to break the",
    "start": "262600",
    "end": "264240"
  },
  {
    "text": "execution flow of the function therefore",
    "start": "264240",
    "end": "266440"
  },
  {
    "text": "we'll use the unwrap or method to turn",
    "start": "266440",
    "end": "268639"
  },
  {
    "text": "it into a none if it's an error on",
    "start": "268639",
    "end": "270560"
  },
  {
    "text": "success this method returns an optional",
    "start": "270560",
    "end": "272479"
  },
  {
    "text": "spell representing whether or not there",
    "start": "272479",
    "end": "274320"
  },
  {
    "text": "was an entry inside of the cache",
    "start": "274320",
    "end": "276160"
  },
  {
    "text": "therefore we can use the following lines",
    "start": "276160",
    "end": "277759"
  },
  {
    "text": "to check if the spell exists and if so",
    "start": "277759",
    "end": "280440"
  },
  {
    "text": "return it back to the client if the",
    "start": "280440",
    "end": "282240"
  },
  {
    "text": "result is none then this will continue",
    "start": "282240",
    "end": "283840"
  },
  {
    "text": "with the existing workflow this is the",
    "start": "283840",
    "end": "286000"
  },
  {
    "text": "first half of cash aside the second half",
    "start": "286000",
    "end": "288400"
  },
  {
    "text": "is that we store the result from the",
    "start": "288400",
    "end": "289800"
  },
  {
    "text": "database inside of the cache first we'll",
    "start": "289800",
    "end": "291960"
  },
  {
    "text": "check to see if we received a result",
    "start": "291960",
    "end": "293400"
  },
  {
    "text": "from the database if so we can then",
    "start": "293400",
    "end": "295240"
  },
  {
    "text": "write it to the cache using the set",
    "start": "295240",
    "end": "297039"
  },
  {
    "text": "method passing in the ID and the spell",
    "start": "297039",
    "end": "299759"
  },
  {
    "text": "this method also expects a couple more",
    "start": "299759",
    "end": "301520"
  },
  {
    "text": "parameters we'll set these to be none",
    "start": "301520",
    "end": "303280"
  },
  {
    "text": "and false for the meantime with that",
    "start": "303280",
    "end": "305240"
  },
  {
    "text": "we're writing to reddis as if we were",
    "start": "305240",
    "end": "306680"
  },
  {
    "text": "doing the following command in the",
    "start": "306680",
    "end": "308039"
  },
  {
    "text": "reddis CLI we now have a basic",
    "start": "308039",
    "end": "310479"
  },
  {
    "text": "implementation of cach aside however",
    "start": "310479",
    "end": "313000"
  },
  {
    "text": "before we can run this code we need an",
    "start": "313000",
    "end": "314639"
  },
  {
    "text": "instance of reddis that we can connect",
    "start": "314639",
    "end": "316280"
  },
  {
    "text": "to fortunately Ivan has us covered again",
    "start": "316280",
    "end": "318680"
  },
  {
    "text": "as they provide a free version of reddis",
    "start": "318680",
    "end": "320400"
  },
  {
    "text": "that we can use to do so head back on",
    "start": "320400",
    "end": "322360"
  },
  {
    "text": "over to the Ivan dashboard and create a",
    "start": "322360",
    "end": "324280"
  },
  {
    "text": "new reddis service again be sure to",
    "start": "324280",
    "end": "326639"
  },
  {
    "text": "select the free version and make sure",
    "start": "326639",
    "end": "328280"
  },
  {
    "text": "it's a location close to you preferably",
    "start": "328280",
    "end": "330440"
  },
  {
    "text": "in the same place as postgres once",
    "start": "330440",
    "end": "332520"
  },
  {
    "text": "deployed go ahead and copy the",
    "start": "332520",
    "end": "333960"
  },
  {
    "text": "connection URI then head back on over to",
    "start": "333960",
    "end": "336280"
  },
  {
    "text": "the EnV and add it to the Reddit URL",
    "start": "336280",
    "end": "339120"
  },
  {
    "text": "environment variable with that we're",
    "start": "339120",
    "end": "340800"
  },
  {
    "text": "ready to run our code again using the",
    "start": "340800",
    "end": "342360"
  },
  {
    "text": "cargo run command when we send our first",
    "start": "342360",
    "end": "344880"
  },
  {
    "text": "request to the Spells SL1 endpoint",
    "start": "344880",
    "end": "347360"
  },
  {
    "text": "you'll notice in the logs that we're",
    "start": "347360",
    "end": "348680"
  },
  {
    "text": "retrieving the version in the database",
    "start": "348680",
    "end": "350960"
  },
  {
    "text": "however if we make the same request",
    "start": "350960",
    "end": "352479"
  },
  {
    "text": "again this time it's coming from the",
    "start": "352479",
    "end": "354240"
  },
  {
    "text": "cache if we reenable the debug log in",
    "start": "354240",
    "end": "356639"
  },
  {
    "text": "order to measure the time this request",
    "start": "356639",
    "end": "358199"
  },
  {
    "text": "takes we can see that the response that",
    "start": "358199",
    "end": "360160"
  },
  {
    "text": "pulls from the database takes about 250",
    "start": "360160",
    "end": "362560"
  },
  {
    "text": "milliseconds with the cached response",
    "start": "362560",
    "end": "364759"
  },
  {
    "text": "taking around 50 therefore by using this",
    "start": "364759",
    "end": "367199"
  },
  {
    "text": "cache we've reduced the amount of time",
    "start": "367199",
    "end": "368720"
  },
  {
    "text": "it takes to pull out a record by 50% in",
    "start": "368720",
    "end": "371280"
  },
  {
    "text": "the best case however in the worst case",
    "start": "371280",
    "end": "373520"
  },
  {
    "text": "we've actually increased it by 2/3",
    "start": "373520",
    "end": "375599"
  },
  {
    "text": "that's because instead of performing a",
    "start": "375599",
    "end": "377080"
  },
  {
    "text": "single request to the database we're now",
    "start": "377080",
    "end": "378919"
  },
  {
    "text": "performing three requests in total with",
    "start": "378919",
    "end": "380840"
  },
  {
    "text": "the additional two going towards redis",
    "start": "380840",
    "end": "382840"
  },
  {
    "text": "fortunately there is a way to improve",
    "start": "382840",
    "end": "384560"
  },
  {
    "text": "this performance by concurrently writing",
    "start": "384560",
    "end": "386440"
  },
  {
    "text": "to the cache and sending the result back",
    "start": "386440",
    "end": "388120"
  },
  {
    "text": "to the client we can do this in our code",
    "start": "388120",
    "end": "390039"
  },
  {
    "text": "by using the following lines which will",
    "start": "390039",
    "end": "391880"
  },
  {
    "text": "perform our right of the cache in a",
    "start": "391880",
    "end": "393720"
  },
  {
    "text": "spawned Tokyo task because this task",
    "start": "393720",
    "end": "396240"
  },
  {
    "text": "takes place concurrently the return of",
    "start": "396240",
    "end": "398240"
  },
  {
    "text": "the result doesn't have to wait for the",
    "start": "398240",
    "end": "399720"
  },
  {
    "text": "right to finish now when we rerun our",
    "start": "399720",
    "end": "401960"
  },
  {
    "text": "code we can see that our first request",
    "start": "401960",
    "end": "404160"
  },
  {
    "text": "which was the worst case only takes an",
    "start": "404160",
    "end": "406360"
  },
  {
    "text": "extra 50 milliseconds when compared to",
    "start": "406360",
    "end": "408479"
  },
  {
    "text": "before so whilst there is still a",
    "start": "408479",
    "end": "410400"
  },
  {
    "text": "performance hit we've managed to reduce",
    "start": "410400",
    "end": "412120"
  },
  {
    "start": "412000",
    "end": "448000"
  },
  {
    "text": "its impact by the way you may have",
    "start": "412120",
    "end": "414199"
  },
  {
    "text": "noticed that every time we restart the",
    "start": "414199",
    "end": "415960"
  },
  {
    "text": "server it flushes all of the keys inside",
    "start": "415960",
    "end": "418000"
  },
  {
    "text": "of the cache this was done in",
    "start": "418000",
    "end": "419560"
  },
  {
    "text": "potentially in order to simplify",
    "start": "419560",
    "end": "421160"
  },
  {
    "text": "development during this first section",
    "start": "421160",
    "end": "423319"
  },
  {
    "text": "but you likely wouldn't want to do this",
    "start": "423319",
    "end": "424759"
  },
  {
    "text": "in production especially if you have",
    "start": "424759",
    "end": "426520"
  },
  {
    "text": "multiple instances or reading from the",
    "start": "426520",
    "end": "428280"
  },
  {
    "text": "same cache however removing this",
    "start": "428280",
    "end": "430400"
  },
  {
    "text": "presents a problem with our",
    "start": "430400",
    "end": "431919"
  },
  {
    "text": "implementation cash invalidation or the",
    "start": "431919",
    "end": "434560"
  },
  {
    "text": "lack thereof basically our keys will",
    "start": "434560",
    "end": "436960"
  },
  {
    "text": "remain in the cache for as long as it",
    "start": "436960",
    "end": "438479"
  },
  {
    "text": "exists therefore in order to prevent our",
    "start": "438479",
    "end": "440919"
  },
  {
    "text": "cach from consuming all of the available",
    "start": "440919",
    "end": "442680"
  },
  {
    "text": "memory it has we need to find a way to",
    "start": "442680",
    "end": "444800"
  },
  {
    "text": "invalidate our keys fortunately we have",
    "start": "444800",
    "end": "447479"
  },
  {
    "text": "a couple of options the first is to use",
    "start": "447479",
    "end": "449919"
  },
  {
    "start": "448000",
    "end": "555000"
  },
  {
    "text": "an eviction policy which tells reddis",
    "start": "449919",
    "end": "452039"
  },
  {
    "text": "how to remove keys from the cache when",
    "start": "452039",
    "end": "453759"
  },
  {
    "text": "the memory pressure climbs too high if",
    "start": "453759",
    "end": "455960"
  },
  {
    "text": "we head on back over to our redis",
    "start": "455960",
    "end": "457720"
  },
  {
    "text": "instance in Ivan we can actually select",
    "start": "457720",
    "end": "459720"
  },
  {
    "text": "one of the policies we want to use let's",
    "start": "459720",
    "end": "461960"
  },
  {
    "text": "take a look at what each one of these",
    "start": "461960",
    "end": "463400"
  },
  {
    "text": "does the first of these policies is the",
    "start": "463400",
    "end": "465919"
  },
  {
    "text": "evict or Keys least recently used first",
    "start": "465919",
    "end": "468680"
  },
  {
    "text": "or lru this policy frees up memory by",
    "start": "468680",
    "end": "471639"
  },
  {
    "text": "removing keys in the cache starting with",
    "start": "471639",
    "end": "473479"
  },
  {
    "text": "those that were least recently used with",
    "start": "473479",
    "end": "475800"
  },
  {
    "text": "the definition of used being either",
    "start": "475800",
    "end": "477319"
  },
  {
    "text": "written to or read from the next policy",
    "start": "477319",
    "end": "479919"
  },
  {
    "text": "is the evict only keys with expire set",
    "start": "479919",
    "end": "482440"
  },
  {
    "text": "least recently used first this is",
    "start": "482440",
    "end": "484759"
  },
  {
    "text": "similar to above but will only evict",
    "start": "484759",
    "end": "486639"
  },
  {
    "text": "keys if they have an expiration set",
    "start": "486639",
    "end": "489000"
  },
  {
    "text": "we'll talk more about what that is",
    "start": "489000",
    "end": "490319"
  },
  {
    "text": "shortly next we have evict all keys in",
    "start": "490319",
    "end": "492840"
  },
  {
    "text": "random order which is basically a form",
    "start": "492840",
    "end": "495000"
  },
  {
    "text": "of chaos the next one is similar but",
    "start": "495000",
    "end": "497159"
  },
  {
    "text": "will only evict keys if they have the",
    "start": "497159",
    "end": "499000"
  },
  {
    "text": "expiration set underneath this we have",
    "start": "499000",
    "end": "501199"
  },
  {
    "text": "evict only keys with expire set with the",
    "start": "501199",
    "end": "503560"
  },
  {
    "text": "shorter TTL Keys being evicted first",
    "start": "503560",
    "end": "506080"
  },
  {
    "text": "this policy is good for prioritizing the",
    "start": "506080",
    "end": "508280"
  },
  {
    "text": "eviction of keys that are likely going",
    "start": "508280",
    "end": "509919"
  },
  {
    "text": "to be removed soon anyway next we have",
    "start": "509919",
    "end": "512240"
  },
  {
    "text": "evict using approximated lfus among the",
    "start": "512240",
    "end": "514760"
  },
  {
    "text": "keys with an expiry set lfu stands for",
    "start": "514760",
    "end": "517599"
  },
  {
    "text": "least frequently used which differs",
    "start": "517599",
    "end": "519719"
  },
  {
    "text": "slightly from lru lfu will prioritize",
    "start": "519719",
    "end": "522560"
  },
  {
    "text": "keeping keys that have a lot of activity",
    "start": "522560",
    "end": "524560"
  },
  {
    "text": "on them instead preferring to evict",
    "start": "524560",
    "end": "526640"
  },
  {
    "text": "those that haven't been used as much the",
    "start": "526640",
    "end": "528720"
  },
  {
    "text": "last policy also uses an lfu but will",
    "start": "528720",
    "end": "531080"
  },
  {
    "text": "evict any key regardless of whether it",
    "start": "531080",
    "end": "533000"
  },
  {
    "text": "has an expiration set each of these",
    "start": "533000",
    "end": "535120"
  },
  {
    "text": "policies has their own use case",
    "start": "535120",
    "end": "536920"
  },
  {
    "text": "depending on what data you're storing",
    "start": "536920",
    "end": "538519"
  },
  {
    "text": "inside of the cache in our case the best",
    "start": "538519",
    "end": "540720"
  },
  {
    "text": "policy is likely going to be either the",
    "start": "540720",
    "end": "542680"
  },
  {
    "text": "evict or Keys least recently used first",
    "start": "542680",
    "end": "545279"
  },
  {
    "text": "or the evict any key using approximated",
    "start": "545279",
    "end": "547600"
  },
  {
    "text": "lfu in this case I'm going to go with",
    "start": "547600",
    "end": "549760"
  },
  {
    "text": "the least recently used first policy by",
    "start": "549760",
    "end": "552600"
  },
  {
    "text": "setting this we've now prevented our",
    "start": "552600",
    "end": "554120"
  },
  {
    "text": "instance from running out of memory as",
    "start": "554120",
    "end": "556079"
  },
  {
    "start": "555000",
    "end": "637000"
  },
  {
    "text": "well as setting an eviction policy we",
    "start": "556079",
    "end": "557839"
  },
  {
    "text": "can also tell our keys to expire after a",
    "start": "557839",
    "end": "559959"
  },
  {
    "text": "certain period of time by setting an",
    "start": "559959",
    "end": "561760"
  },
  {
    "text": "expiration on them we can add this to",
    "start": "561760",
    "end": "563880"
  },
  {
    "text": "our caching logic through the following",
    "start": "563880",
    "end": "565640"
  },
  {
    "text": "code which will cause our key to expire",
    "start": "565640",
    "end": "567800"
  },
  {
    "text": "after 60 seconds if we go ahead and run",
    "start": "567800",
    "end": "570200"
  },
  {
    "text": "our code then send up a couple of Cur",
    "start": "570200",
    "end": "571959"
  },
  {
    "text": "requests we can see that our workflow is",
    "start": "571959",
    "end": "574000"
  },
  {
    "text": "the same as before first pulling from",
    "start": "574000",
    "end": "575839"
  },
  {
    "text": "the database and then pulling from the",
    "start": "575839",
    "end": "577519"
  },
  {
    "text": "cache if I wait 60 seconds and send up",
    "start": "577519",
    "end": "580079"
  },
  {
    "text": "another request you'll see that this one",
    "start": "580079",
    "end": "581800"
  },
  {
    "text": "is also reloaded from the database",
    "start": "581800",
    "end": "583680"
  },
  {
    "text": "showing that the key had been expired",
    "start": "583680",
    "end": "585600"
  },
  {
    "text": "and removed setting an expiration is",
    "start": "585600",
    "end": "587800"
  },
  {
    "text": "really useful if you want your keys to",
    "start": "587800",
    "end": "589399"
  },
  {
    "text": "be removed after a period of time some",
    "start": "589399",
    "end": "591760"
  },
  {
    "text": "common use cases for this are session",
    "start": "591760",
    "end": "593600"
  },
  {
    "text": "tokens with authentication or tracking",
    "start": "593600",
    "end": "595640"
  },
  {
    "text": "usage for something such as rate",
    "start": "595640",
    "end": "597120"
  },
  {
    "text": "limiting other times they can be used to",
    "start": "597120",
    "end": "599000"
  },
  {
    "text": "force the periodic refreshing of data",
    "start": "599000",
    "end": "601440"
  },
  {
    "text": "however this can cause a common problem",
    "start": "601440",
    "end": "603200"
  },
  {
    "text": "when it comes to caching let me show you",
    "start": "603200",
    "end": "605079"
  },
  {
    "text": "what I mean here I've changed the",
    "start": "605079",
    "end": "606640"
  },
  {
    "text": "expiration to take place after 15",
    "start": "606640",
    "end": "608640"
  },
  {
    "text": "minutes if I send up a get request we",
    "start": "608640",
    "end": "610800"
  },
  {
    "text": "can see that our data has been cached as",
    "start": "610800",
    "end": "612519"
  },
  {
    "text": "expected however if I send up a request",
    "start": "612519",
    "end": "614519"
  },
  {
    "text": "to update the damage value of the spell",
    "start": "614519",
    "end": "616839"
  },
  {
    "text": "and then send a subsequent get request I",
    "start": "616839",
    "end": "619200"
  },
  {
    "text": "receive the old value this is because",
    "start": "619200",
    "end": "621360"
  },
  {
    "text": "the data in the cache is now stale and",
    "start": "621360",
    "end": "623480"
  },
  {
    "text": "no longer matches what's found in the",
    "start": "623480",
    "end": "625040"
  },
  {
    "text": "database in many applications this is",
    "start": "625040",
    "end": "627320"
  },
  {
    "text": "unacceptable and therefore has to be be",
    "start": "627320",
    "end": "629480"
  },
  {
    "text": "resolved unfortunately using cach aside",
    "start": "629480",
    "end": "631640"
  },
  {
    "text": "only doesn't solve this issue instead we",
    "start": "631640",
    "end": "633920"
  },
  {
    "text": "need to use another pattern known as",
    "start": "633920",
    "end": "636079"
  },
  {
    "text": "write through caching when a write",
    "start": "636079",
    "end": "638120"
  },
  {
    "start": "637000",
    "end": "769000"
  },
  {
    "text": "occurs in your database such as updating",
    "start": "638120",
    "end": "640120"
  },
  {
    "text": "a record a write will also occur to the",
    "start": "640120",
    "end": "642240"
  },
  {
    "text": "cache at the same time let's go ahead",
    "start": "642240",
    "end": "644360"
  },
  {
    "text": "and implement this inside of our update",
    "start": "644360",
    "end": "646279"
  },
  {
    "text": "Handler you can navigate there by",
    "start": "646279",
    "end": "648000"
  },
  {
    "text": "heading over to the Handler update. RS",
    "start": "648000",
    "end": "650680"
  },
  {
    "text": "file inside of the project inside of",
    "start": "650680",
    "end": "652639"
  },
  {
    "text": "this file we have our Handler function",
    "start": "652639",
    "end": "654399"
  },
  {
    "text": "called update which accepts an ID of the",
    "start": "654399",
    "end": "656600"
  },
  {
    "text": "spell we want to update and an update",
    "start": "656600",
    "end": "658600"
  },
  {
    "text": "request body which contains our damage",
    "start": "658600",
    "end": "660519"
  },
  {
    "text": "value this function is where we want to",
    "start": "660519",
    "end": "662720"
  },
  {
    "text": "apply right through caching to do so is",
    "start": "662720",
    "end": "665480"
  },
  {
    "text": "rather simple all we have to do is write",
    "start": "665480",
    "end": "667440"
  },
  {
    "text": "to the cache once we've successfully",
    "start": "667440",
    "end": "669000"
  },
  {
    "text": "written to the database we can do this",
    "start": "669000",
    "end": "670920"
  },
  {
    "text": "again by using the trusty set method on",
    "start": "670920",
    "end": "673240"
  },
  {
    "text": "our cache instance again making sure to",
    "start": "673240",
    "end": "675560"
  },
  {
    "text": "set the expires field however there's",
    "start": "675560",
    "end": "677720"
  },
  {
    "text": "another Improvement we can make here in",
    "start": "677720",
    "end": "679680"
  },
  {
    "text": "a right heavy workflow this would end up",
    "start": "679680",
    "end": "681839"
  },
  {
    "text": "creating a lot of keys that may not be",
    "start": "681839",
    "end": "683680"
  },
  {
    "text": "used and if we have an exploration",
    "start": "683680",
    "end": "685600"
  },
  {
    "text": "policy that uses an lru then this can be",
    "start": "685600",
    "end": "687760"
  },
  {
    "text": "problematic instead we only want to",
    "start": "687760",
    "end": "689920"
  },
  {
    "text": "write this key if it already exists in",
    "start": "689920",
    "end": "691920"
  },
  {
    "text": "the cache we can do that in reddis by",
    "start": "691920",
    "end": "693880"
  },
  {
    "text": "using the XX option of the set method",
    "start": "693880",
    "end": "696680"
  },
  {
    "text": "which will only write the value if the",
    "start": "696680",
    "end": "698279"
  },
  {
    "text": "key already exists we can do this in our",
    "start": "698279",
    "end": "700600"
  },
  {
    "text": "update function by adding in the",
    "start": "700600",
    "end": "702040"
  },
  {
    "text": "following code now let's go ahead and",
    "start": "702040",
    "end": "704240"
  },
  {
    "text": "test it out if I send a put request to a",
    "start": "704240",
    "end": "707120"
  },
  {
    "text": "spell that has been cached the next time",
    "start": "707120",
    "end": "709200"
  },
  {
    "text": "I request it will'll see the updated",
    "start": "709200",
    "end": "711040"
  },
  {
    "text": "damage value we can also see this",
    "start": "711040",
    "end": "713000"
  },
  {
    "text": "updated value inside of the reddis",
    "start": "713000",
    "end": "714760"
  },
  {
    "text": "instance however if I send a put request",
    "start": "714760",
    "end": "717000"
  },
  {
    "text": "to a spell that hasn't been cached if we",
    "start": "717000",
    "end": "719040"
  },
  {
    "text": "check check our reddest instance we can",
    "start": "719040",
    "end": "720440"
  },
  {
    "text": "see that no key exists but the update",
    "start": "720440",
    "end": "722600"
  },
  {
    "text": "did apply to the model inside of",
    "start": "722600",
    "end": "724079"
  },
  {
    "text": "postgres this shows that our right",
    "start": "724079",
    "end": "725880"
  },
  {
    "text": "through caching logic is working as",
    "start": "725880",
    "end": "727680"
  },
  {
    "text": "expected however we are suffering a",
    "start": "727680",
    "end": "729720"
  },
  {
    "text": "performance hit due to the fact that",
    "start": "729720",
    "end": "731240"
  },
  {
    "text": "we're writing to the cache as well we",
    "start": "731240",
    "end": "733040"
  },
  {
    "text": "can improve this by writing to the cache",
    "start": "733040",
    "end": "734720"
  },
  {
    "text": "concurrently inside of a Tokyo task",
    "start": "734720",
    "end": "737000"
  },
  {
    "text": "similar to how we did it in our Casher",
    "start": "737000",
    "end": "738720"
  },
  {
    "text": "side logic this gives us our caching",
    "start": "738720",
    "end": "740680"
  },
  {
    "text": "implementation without causing a",
    "start": "740680",
    "end": "742240"
  },
  {
    "text": "performance hit to our users with that",
    "start": "742240",
    "end": "744600"
  },
  {
    "text": "we've managed to solve the stale data",
    "start": "744600",
    "end": "746279"
  },
  {
    "text": "issue when it comes to our update",
    "start": "746279",
    "end": "747800"
  },
  {
    "text": "Handler however we have one last Handler",
    "start": "747800",
    "end": "750000"
  },
  {
    "text": "that can still be affected this is the",
    "start": "750000",
    "end": "751959"
  },
  {
    "text": "delete Handler which is used to remove a",
    "start": "751959",
    "end": "753839"
  },
  {
    "text": "spell from the database in order to",
    "start": "753839",
    "end": "755600"
  },
  {
    "text": "prevent stale data we also need to",
    "start": "755600",
    "end": "757279"
  },
  {
    "text": "delete this from the cache as well you",
    "start": "757279",
    "end": "759079"
  },
  {
    "text": "can do this using the Dell method of the",
    "start": "759079",
    "end": "761040"
  },
  {
    "text": "cache instance however rather than",
    "start": "761040",
    "end": "763120"
  },
  {
    "text": "showing you how to do this I'm going to",
    "start": "763120",
    "end": "764720"
  },
  {
    "text": "let you implement this yourselves let me",
    "start": "764720",
    "end": "766839"
  },
  {
    "text": "know how you get on in the comments down",
    "start": "766839",
    "end": "768560"
  },
  {
    "text": "below with that we've managed to add",
    "start": "768560",
    "end": "770600"
  },
  {
    "start": "769000",
    "end": "809000"
  },
  {
    "text": "caching into our application stack",
    "start": "770600",
    "end": "772880"
  },
  {
    "text": "whilst also addressing some of the",
    "start": "772880",
    "end": "774399"
  },
  {
    "text": "problems that can occur when doing so as",
    "start": "774399",
    "end": "776519"
  },
  {
    "text": "a final note caching isn't always the",
    "start": "776519",
    "end": "778360"
  },
  {
    "text": "Silver Bullet it's claimed to be most of",
    "start": "778360",
    "end": "780600"
  },
  {
    "text": "the time you should look at adding",
    "start": "780600",
    "end": "781920"
  },
  {
    "text": "indexing to your database tables as a",
    "start": "781920",
    "end": "783920"
  },
  {
    "text": "first step if you'd like to know more",
    "start": "783920",
    "end": "785760"
  },
  {
    "text": "about when to cach and when not to then",
    "start": "785760",
    "end": "787800"
  },
  {
    "text": "let me know in the comments down below",
    "start": "787800",
    "end": "789279"
  },
  {
    "text": "and I'll do another video on it I want",
    "start": "789279",
    "end": "791279"
  },
  {
    "text": "to give a big thank you to Ivan for",
    "start": "791279",
    "end": "792920"
  },
  {
    "text": "sponsoring this video they have a really",
    "start": "792920",
    "end": "794880"
  },
  {
    "text": "cool data platform with support for a",
    "start": "794880",
    "end": "796639"
  },
  {
    "text": "lot of services without them this video",
    "start": "796639",
    "end": "798680"
  },
  {
    "text": "wouldn't have been as good so please do",
    "start": "798680",
    "end": "800519"
  },
  {
    "text": "check them out using the referral link",
    "start": "800519",
    "end": "802360"
  },
  {
    "text": "down below otherwise I want to give a",
    "start": "802360",
    "end": "804000"
  },
  {
    "text": "big thank you for watching and I'll see",
    "start": "804000",
    "end": "805639"
  },
  {
    "text": "you on the next",
    "start": "805639",
    "end": "807519"
  },
  {
    "text": "one",
    "start": "807519",
    "end": "810519"
  }
]