[
  {
    "start": "0",
    "end": "11000"
  },
  {
    "text": "go 1.22 has finally dropped and with it",
    "start": "120",
    "end": "3040"
  },
  {
    "text": "we have a bunch of new and exciting",
    "start": "3040",
    "end": "4680"
  },
  {
    "text": "changes this release marks a huge",
    "start": "4680",
    "end": "6839"
  },
  {
    "text": "milestone for go Bringing about a new",
    "start": "6839",
    "end": "9240"
  },
  {
    "text": "future for the",
    "start": "9240",
    "end": "11320"
  },
  {
    "start": "11000",
    "end": "57000"
  },
  {
    "text": "language the first category of",
    "start": "11320",
    "end": "13320"
  },
  {
    "text": "improvements that this release brings is",
    "start": "13320",
    "end": "15040"
  },
  {
    "text": "for looping in go with the major one",
    "start": "15040",
    "end": "17279"
  },
  {
    "text": "being a fundamental change to the way",
    "start": "17279",
    "end": "18920"
  },
  {
    "text": "that Loop variables are scoped I have",
    "start": "18920",
    "end": "21240"
  },
  {
    "text": "another video that goes into this change",
    "start": "21240",
    "end": "23039"
  },
  {
    "text": "in Greater detail but to summarize it",
    "start": "23039",
    "end": "25320"
  },
  {
    "text": "changes the loop variable to be per",
    "start": "25320",
    "end": "27039"
  },
  {
    "text": "iteration scoped rather than scoped to",
    "start": "27039",
    "end": "28920"
  },
  {
    "text": "the entire Loop by doing so it fixes one",
    "start": "28920",
    "end": "31439"
  },
  {
    "text": "of the most common mistakes you can make",
    "start": "31439",
    "end": "33200"
  },
  {
    "text": "in go as well as this change 1.22 also",
    "start": "33200",
    "end": "36480"
  },
  {
    "text": "brings the ability to range over an",
    "start": "36480",
    "end": "38520"
  },
  {
    "text": "integer we can do this using the",
    "start": "38520",
    "end": "40360"
  },
  {
    "text": "following code which will iterate from 0",
    "start": "40360",
    "end": "42520"
  },
  {
    "text": "to 9 the last change to Loops that this",
    "start": "42520",
    "end": "44840"
  },
  {
    "text": "release brings is a new experimental",
    "start": "44840",
    "end": "46800"
  },
  {
    "text": "feature for ranging over function",
    "start": "46800",
    "end": "48559"
  },
  {
    "text": "iterators this feature is similar to",
    "start": "48559",
    "end": "50640"
  },
  {
    "text": "generator functions in other languages",
    "start": "50640",
    "end": "52760"
  },
  {
    "text": "allowing us to use the yield keyword to",
    "start": "52760",
    "end": "54480"
  },
  {
    "text": "turn a function into an",
    "start": "54480",
    "end": "56920"
  },
  {
    "text": "iterator the second category of",
    "start": "56920",
    "end": "59120"
  },
  {
    "text": "improvements that the the 1.22 release",
    "start": "59120",
    "end": "61160"
  },
  {
    "text": "brings is improvements to both CPU and",
    "start": "61160",
    "end": "63480"
  },
  {
    "text": "memory performance the runtime now keeps",
    "start": "63480",
    "end": "66000"
  },
  {
    "text": "type-based garbage collection metadata",
    "start": "66000",
    "end": "67720"
  },
  {
    "text": "nearer to each Heap object which",
    "start": "67720",
    "end": "69360"
  },
  {
    "text": "improves the CPU performance of go",
    "start": "69360",
    "end": "71360"
  },
  {
    "text": "applications by 1 to 3% additionally",
    "start": "71360",
    "end": "74280"
  },
  {
    "text": "this change also reduces the memory",
    "start": "74280",
    "end": "75960"
  },
  {
    "text": "overhead of the majority of go programs",
    "start": "75960",
    "end": "77960"
  },
  {
    "text": "by approximately 1% by duplicating",
    "start": "77960",
    "end": "80560"
  },
  {
    "text": "redundant metadata the nice part about",
    "start": "80560",
    "end": "83000"
  },
  {
    "text": "this Improvement is that it's mostly",
    "start": "83000",
    "end": "84479"
  },
  {
    "text": "provided for free without any",
    "start": "84479",
    "end": "86119"
  },
  {
    "text": "intervention on your end there is a",
    "start": "86119",
    "end": "88439"
  },
  {
    "text": "consequence of this change that's going",
    "start": "88439",
    "end": "90040"
  },
  {
    "text": "to affect programs that use assembly",
    "start": "90040",
    "end": "91759"
  },
  {
    "text": "instructions that expect memory",
    "start": "91759",
    "end": "93240"
  },
  {
    "text": "addresses to be in a certain alignment",
    "start": "93240",
    "end": "95840"
  },
  {
    "text": "however the developers expect this to be",
    "start": "95840",
    "end": "97520"
  },
  {
    "text": "a rare recurrence as well as improving",
    "start": "97520",
    "end": "100000"
  },
  {
    "text": "the runtime performance the compiler now",
    "start": "100000",
    "end": "102159"
  },
  {
    "text": "can use profile guided optimization or",
    "start": "102159",
    "end": "104600"
  },
  {
    "text": "PJ in order to see an improvement",
    "start": "104600",
    "end": "106600"
  },
  {
    "text": "between 2 and 14% pggo however doesn't",
    "start": "106600",
    "end": "109759"
  },
  {
    "text": "come for free and requires you to",
    "start": "109759",
    "end": "111439"
  },
  {
    "text": "profile your application whilst it's",
    "start": "111439",
    "end": "113079"
  },
  {
    "text": "running in production if that's",
    "start": "113079",
    "end": "114560"
  },
  {
    "text": "something you want to know more about",
    "start": "114560",
    "end": "115759"
  },
  {
    "text": "then let me know in the comments down",
    "start": "115759",
    "end": "116920"
  },
  {
    "text": "below and I'll do a video on it go 1.22",
    "start": "116920",
    "end": "121079"
  },
  {
    "start": "119000",
    "end": "200000"
  },
  {
    "text": "brings about a number of changes to the",
    "start": "121079",
    "end": "122719"
  },
  {
    "text": "standard library that will Define the",
    "start": "122719",
    "end": "124280"
  },
  {
    "text": "future of the language the most",
    "start": "124280",
    "end": "126240"
  },
  {
    "text": "significant of these changes is the",
    "start": "126240",
    "end": "127880"
  },
  {
    "text": "first ever V2 package inside of the",
    "start": "127880",
    "end": "129800"
  },
  {
    "text": "standard Library this is the math Rand",
    "start": "129800",
    "end": "132520"
  },
  {
    "text": "slv2 package which brings about a number",
    "start": "132520",
    "end": "134840"
  },
  {
    "text": "of important changes these changes",
    "start": "134840",
    "end": "136760"
  },
  {
    "text": "include faster algorithms improved",
    "start": "136760",
    "end": "138680"
  },
  {
    "text": "interfaces idiomatic naming of methods",
    "start": "138680",
    "end": "140959"
  },
  {
    "text": "and functions and a new generic function",
    "start": "140959",
    "end": "143080"
  },
  {
    "text": "called n which will take any integer",
    "start": "143080",
    "end": "145000"
  },
  {
    "text": "type to create a random from because",
    "start": "145000",
    "end": "147200"
  },
  {
    "text": "this method is generic it allows us to",
    "start": "147200",
    "end": "149160"
  },
  {
    "text": "easily create random numbers for types",
    "start": "149160",
    "end": "151120"
  },
  {
    "text": "that we weren't able to do so before",
    "start": "151120",
    "end": "153000"
  },
  {
    "text": "such as generating a random time do",
    "start": "153000",
    "end": "154920"
  },
  {
    "text": "duration as well as our first ever",
    "start": "154920",
    "end": "156920"
  },
  {
    "text": "versioned package we also have a brand",
    "start": "156920",
    "end": "159120"
  },
  {
    "text": "new package called go/ verion this",
    "start": "159120",
    "end": "161599"
  },
  {
    "text": "package is used to both validate and",
    "start": "161599",
    "end": "163400"
  },
  {
    "text": "compare Go version strings as well as",
    "start": "163400",
    "end": "166120"
  },
  {
    "text": "these changes there's been a number of",
    "start": "166120",
    "end": "167800"
  },
  {
    "text": "minor ones added to various different",
    "start": "167800",
    "end": "169480"
  },
  {
    "text": "packages throughout the standard library",
    "start": "169480",
    "end": "171440"
  },
  {
    "text": "of this list the one package I think",
    "start": "171440",
    "end": "173200"
  },
  {
    "text": "most interesting is the slices package",
    "start": "173200",
    "end": "175519"
  },
  {
    "text": "which now provides a new function to",
    "start": "175519",
    "end": "177360"
  },
  {
    "text": "concatenate multiple slices together the",
    "start": "177360",
    "end": "179760"
  },
  {
    "text": "the biggest change however is for",
    "start": "179760",
    "end": "181200"
  },
  {
    "text": "functions that shrink the size of a",
    "start": "181200",
    "end": "182680"
  },
  {
    "text": "slice such as the delete method these",
    "start": "182680",
    "end": "185200"
  },
  {
    "text": "functions will now zero the elements",
    "start": "185200",
    "end": "186760"
  },
  {
    "text": "between the new length and the old",
    "start": "186760",
    "end": "188159"
  },
  {
    "text": "length whereas in previous versions of",
    "start": "188159",
    "end": "190319"
  },
  {
    "text": "go these elements would still remain in",
    "start": "190319",
    "end": "192159"
  },
  {
    "text": "memory and be accessible in the existing",
    "start": "192159",
    "end": "194159"
  },
  {
    "text": "slice for all other minor changes I",
    "start": "194159",
    "end": "196319"
  },
  {
    "text": "recommend checking out the documentation",
    "start": "196319",
    "end": "198000"
  },
  {
    "text": "to see if there's anything that",
    "start": "198000",
    "end": "199200"
  },
  {
    "text": "interests you the last and perhaps",
    "start": "199200",
    "end": "201760"
  },
  {
    "start": "200000",
    "end": "271000"
  },
  {
    "text": "biggest change that go 1.22 brings is",
    "start": "201760",
    "end": "204519"
  },
  {
    "text": "the enhanced routing features of the net",
    "start": "204519",
    "end": "206440"
  },
  {
    "text": "/ HTTP package I covered the proposal",
    "start": "206440",
    "end": "209280"
  },
  {
    "text": "for this in another video about 9 months",
    "start": "209280",
    "end": "211560"
  },
  {
    "text": "ago and with 1.22 it's finally here this",
    "start": "211560",
    "end": "214959"
  },
  {
    "text": "change enhances the HTTP serve MX type",
    "start": "214959",
    "end": "218000"
  },
  {
    "text": "allowing us to easily specify routes",
    "start": "218000",
    "end": "219879"
  },
  {
    "text": "with both HTTP methods and path",
    "start": "219879",
    "end": "222080"
  },
  {
    "text": "parameters because of this change it now",
    "start": "222080",
    "end": "224280"
  },
  {
    "text": "makes the standard Library viable when",
    "start": "224280",
    "end": "226200"
  },
  {
    "text": "it comes to complex HTTP routing this",
    "start": "226200",
    "end": "228840"
  },
  {
    "text": "means you'll no longer need to use a",
    "start": "228840",
    "end": "230560"
  },
  {
    "text": "third party dependency such as gorilla",
    "start": "230560",
    "end": "232560"
  },
  {
    "text": "mqi or Fiber I for one am pretty happy",
    "start": "232560",
    "end": "235879"
  },
  {
    "text": "for this change having the language be",
    "start": "235879",
    "end": "237920"
  },
  {
    "text": "more resilient to third party dependency",
    "start": "237920",
    "end": "240000"
  },
  {
    "text": "is always a good thing now whenever I",
    "start": "240000",
    "end": "242319"
  },
  {
    "text": "need a simple HTTP server the standard",
    "start": "242319",
    "end": "244640"
  },
  {
    "text": "library is more than enough I'm",
    "start": "244640",
    "end": "246519"
  },
  {
    "text": "interested to know your thoughts however",
    "start": "246519",
    "end": "248319"
  },
  {
    "text": "are you happy with the changes that 1.22",
    "start": "248319",
    "end": "250599"
  },
  {
    "text": "brings or perhaps there were some other",
    "start": "250599",
    "end": "252439"
  },
  {
    "text": "features you'd have liked to seen either",
    "start": "252439",
    "end": "254280"
  },
  {
    "text": "way let me know in the comments down",
    "start": "254280",
    "end": "255720"
  },
  {
    "text": "below I want to give a big thank you to",
    "start": "255720",
    "end": "257519"
  },
  {
    "text": "my newest Channel member the 54mm thank",
    "start": "257519",
    "end": "260759"
  },
  {
    "text": "you for supporting the channel and",
    "start": "260759",
    "end": "262160"
  },
  {
    "text": "allowing me to bring my content to",
    "start": "262160",
    "end": "263639"
  },
  {
    "text": "hundreds of thousands of people around",
    "start": "263639",
    "end": "265120"
  },
  {
    "text": "the world a big thank you to everyone",
    "start": "265120",
    "end": "266960"
  },
  {
    "text": "else for watching and I'll see you on",
    "start": "266960",
    "end": "268639"
  },
  {
    "text": "the next one",
    "start": "268639",
    "end": "271600"
  }
]