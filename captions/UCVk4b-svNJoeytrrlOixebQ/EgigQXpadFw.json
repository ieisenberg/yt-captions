[
  {
    "text": "all right so you guys ready to do this we're going to keep on going number two so we're gonna start getting into some of these more interesting things that",
    "start": "0",
    "end": "5640"
  },
  {
    "text": "happen here uh all right all right so we've gone through this one we've done this one I",
    "start": "5640",
    "end": "10800"
  },
  {
    "text": "remember doing this and this one was very excited to do uh type errors versus exceptions okay so this is a big thing",
    "start": "10800",
    "end": "16139"
  },
  {
    "text": "for me because I love good error handling uh memes aside uh",
    "start": "16139",
    "end": "21420"
  },
  {
    "text": "thank you for all you do Prime love the content hey risk Runner I appreciate that I genuinely do appreciate that we're trying to make some good content",
    "start": "21420",
    "end": "27000"
  },
  {
    "text": "out here uh alerts alerts stay on during this time because I gotta say thank yous you know what I mean",
    "start": "27000",
    "end": "33360"
  },
  {
    "text": "all right so so let's just do this thing thank you congrats on 100K hey I love you thank",
    "start": "33360",
    "end": "39420"
  },
  {
    "text": "you I feel really happy about that um welcome to Costco I love you we don't want to be there uh let's go like this",
    "start": "39420",
    "end": "46440"
  },
  {
    "text": "let's go what do we call it I think it was called like hello something yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah there it is okay",
    "start": "46440",
    "end": "54300"
  },
  {
    "text": "um let's go Utah and let's just throw that in there uh this expression has uh let's see as a",
    "start": "54300",
    "end": "60660"
  },
  {
    "text": "type string okay good good we can see the air so how do we do the the turd thank you very much and nashik thank you",
    "start": "60660",
    "end": "65700"
  },
  {
    "text": "very much for the tier ones can someone explain welcome to Costco meme uh come on you should know this by now",
    "start": "65700",
    "end": "71640"
  },
  {
    "text": "you should know this by now idiocracy one of the greatest movies of",
    "start": "71640",
    "end": "76799"
  },
  {
    "text": "all time uh our competency our compile time errors because uh the plus requires that both arguments type event okay so",
    "start": "76799",
    "end": "82500"
  },
  {
    "text": "this would be a type error okay cool love type Bears whereas errors can't be cocked by the type system like division",
    "start": "82500",
    "end": "88619"
  },
  {
    "text": "by zero uh lead to run time exceptions okay okay",
    "start": "88619",
    "end": "93859"
  },
  {
    "text": "uh is multiple then let's go like this all right there we go so we have that so",
    "start": "94020",
    "end": "99720"
  },
  {
    "text": "we'd go like this is a uh multiple and then we go like this zero right",
    "start": "99720",
    "end": "107299"
  },
  {
    "text": "should be positive okay so there we go yeah yeah it should be positive perfect okay so we did we did see it",
    "start": "109799",
    "end": "115140"
  },
  {
    "text": "sweet sucks welcome okay so we can do that or a zombie thank you very much and tough Pace thank you for gifting a",
    "start": "115140",
    "end": "121560"
  },
  {
    "text": "subtle to ocam appreciate the first gift it's up um",
    "start": "121560",
    "end": "127320"
  },
  {
    "text": "thank you all right so let's keep on going I think we're looking good okay I think we're looking good",
    "start": "127320",
    "end": "133200"
  },
  {
    "text": "uh here we go for you guys I'll do this just for you guys because you know",
    "start": "133200",
    "end": "140180"
  },
  {
    "text": "there you go what does o camel stand for uh it stands for a lot of things but mostly uh functional programming",
    "start": "149340",
    "end": "157020"
  },
  {
    "text": "all right here we go so let's see let's keep on going right here this distinction uh here is that type errors",
    "start": "157020",
    "end": "162239"
  },
  {
    "text": "will stop you whether or not the offending code is actually ever executed merely defining add potato is an error",
    "start": "162239",
    "end": "167879"
  },
  {
    "text": "whereas is a multiple only fails when uh it's called okay okay I wrote an",
    "start": "167879",
    "end": "173220"
  },
  {
    "text": "infinite cost abstraction by implementing traits in TS if anyone's moving from the Costco I",
    "start": "173220",
    "end": "178680"
  },
  {
    "text": "love you an infinite cost abstraction laughs",
    "start": "178680",
    "end": "183900"
  },
  {
    "text": "love it um this is beautiful uh Hugo thank you very much",
    "start": "183900",
    "end": "189000"
  },
  {
    "text": "I love this the O uh is for functional programming it is the L is for functional programming uh tuples list",
    "start": "189000",
    "end": "195360"
  },
  {
    "text": "options and pattern matching let's go okay so this is the interesting this is the interesting part of ocamel that I'm",
    "start": "195360",
    "end": "201659"
  },
  {
    "text": "very excited about tuples oh not tuples though uh so far we well maybe tuples because JavaScript doesn't have tuples",
    "start": "201659",
    "end": "207239"
  },
  {
    "text": "which is very frustrating it is super frustrating uh in Italian dialect okay literally means the camel",
    "start": "207239",
    "end": "215760"
  },
  {
    "text": "oh canal how'd I do oh come here",
    "start": "215760",
    "end": "221060"
  },
  {
    "text": "come in I want to marry you for five dollars a month awful okay Italian SpongeBob really does not like it",
    "start": "227099",
    "end": "233220"
  },
  {
    "text": "okay well I got an exactly but Italian SpongeBob I'm canceling you right now bored that you uh fettuccine or camel or",
    "start": "233220",
    "end": "241680"
  },
  {
    "text": "camel oh come on that's beautiful come on if my fettuccine is correct then my oh camel's correct okay that's how I",
    "start": "241680",
    "end": "249180"
  },
  {
    "text": "determine the correctness of my accents uh anyways",
    "start": "249180",
    "end": "255659"
  },
  {
    "text": "let's keep on going Deez Nuts uh thank you for returning the fun to programming Prime hey thank you pronunciation one",
    "start": "255659",
    "end": "261299"
  },
  {
    "text": "hundo uh twitch Borah thank you that's how Italian sound it's fact it's fact when",
    "start": "261299",
    "end": "267000"
  },
  {
    "text": "you when you say fettuccine that's how they sound all right let's see here we go so we'll start by looking at a particular uh okay so",
    "start": "267000",
    "end": "274500"
  },
  {
    "text": "yeah okay so I think we're just fine a tuple is an order collection of values",
    "start": "274500",
    "end": "280320"
  },
  {
    "text": "that can each be a different type you can create tuples okay yep there's this I remember going through this I we kind",
    "start": "280320",
    "end": "285419"
  },
  {
    "text": "of looked at this in a different one thank you camel's Italian apparently I don't know uh for the math mathematically inclined",
    "start": "285419",
    "end": "292199"
  },
  {
    "text": "the star is used for the type T because that type corresponds to the set of all pairs containing one value of type T and",
    "start": "292199",
    "end": "298320"
  },
  {
    "text": "one of Type S okay in other words it's the Cartesian product okay you can",
    "start": "298320",
    "end": "303360"
  },
  {
    "text": "extract the component of Tuple using o camel's pattern matching okay I think we actually may have gone through this but",
    "start": "303360",
    "end": "308520"
  },
  {
    "text": "who knows uh here the X Y on the left hand side of the let binding is the pattern yes this pattern uh lets us mint",
    "start": "308520",
    "end": "316380"
  },
  {
    "text": "the new variables X and Y each bound to different components okay perfect perfect note the same",
    "start": "316380",
    "end": "322680"
  },
  {
    "text": "syntax is used for both constructing and for pattern matching okay perfect pattern matching can also show up in functional arguments here's a function",
    "start": "322680",
    "end": "328860"
  },
  {
    "text": "for computing the distance between two points all right so oh nice oh nice oh",
    "start": "328860",
    "end": "334139"
  },
  {
    "text": "nice I think rust can do the same thing right um this will be a YouTube video yeah yeah yeah yeah yeah yeah yeah yeah this",
    "start": "334139",
    "end": "340199"
  },
  {
    "text": "will be a YouTube video this will be on the vimogen so if you go to YouTube If you go to YouTube I have three channels",
    "start": "340199",
    "end": "345960"
  },
  {
    "text": "um I'm about to drop my first main Channel video in a while but there's the vimagine The Prime Time agenda and the prime gen you know what I mean oh camel",
    "start": "345960",
    "end": "352620"
  },
  {
    "text": "yeah and croissants are French uh France's greatest contribution to civilization nice",
    "start": "352620",
    "end": "359039"
  },
  {
    "text": "the double star operator is used above for raising a floating Point number to the power okay yep perfect okay",
    "start": "359039",
    "end": "365280"
  },
  {
    "text": "operators uh in base and the standard lib o camel standard library and bass mostly use the same operators for the",
    "start": "365280",
    "end": "371880"
  },
  {
    "text": "same things but there are some differences for example in bass uh star star dot is a float exponential and star",
    "start": "371880",
    "end": "377820"
  },
  {
    "text": "star's in uh integer exponentiation uh whereas in the standard Library star star is float exponentiation and injure",
    "start": "377820",
    "end": "385020"
  },
  {
    "text": "exponentiation isn't exposed as an operator perfect",
    "start": "385020",
    "end": "389419"
  },
  {
    "text": "this is what I'm happy to see",
    "start": "391560",
    "end": "395120"
  },
  {
    "text": "uh bass does what it does to be consistent with other numerical operators like uh this and this uh wait",
    "start": "399240",
    "end": "406979"
  },
  {
    "text": "what's start oh star comma that's no that's just star not star column I was like Star kava what the hell star commas",
    "start": "406979",
    "end": "412500"
  },
  {
    "text": "that European float numbers uh where the period is the uh and let's see the",
    "start": "412500",
    "end": "418919"
  },
  {
    "text": "period at the end is used to Mark the floating Point uh versions uh let's see in general bass is uh not shy about",
    "start": "418919",
    "end": "425400"
  },
  {
    "text": "presenting different apis then oh camel standard Library when it's done in the service of consistency and clarity",
    "start": "425400",
    "end": "431100"
  },
  {
    "text": "classic a reason is a programming language powered by ocamel strong type system well uh wait until you try belt",
    "start": "431100",
    "end": "438419"
  },
  {
    "text": "I'm not trying anything else the EU floats yeah it's real uh where tuples let you combine a fixed number of items",
    "start": "438419",
    "end": "443940"
  },
  {
    "text": "potentially of different types list let you hold any number of the same type okay cool uh note you can't mix elements",
    "start": "443940",
    "end": "450780"
  },
  {
    "text": "of different types in the list perfect okay that's fine with me uh the list module base comes with a list module",
    "start": "450780",
    "end": "456300"
  },
  {
    "text": "that has a rich collection of functions for working with lists uh we can access values from within a module yeah double",
    "start": "456300",
    "end": "462780"
  },
  {
    "text": "semicolon double semicolon is like end line um and you use semicolon to uh separate",
    "start": "462780",
    "end": "469259"
  },
  {
    "text": "items in the list which is I'm not really sure yes",
    "start": "469259",
    "end": "477419"
  },
  {
    "text": "what accent was that nobody knows nobody knows",
    "start": "482699",
    "end": "488120"
  },
  {
    "text": "you know what I mean double semicolons aren't necessary in source code Only In Rebel oh no",
    "start": "490500",
    "end": "497220"
  },
  {
    "text": "anyways let's go like this uh private so let's see it's so you can have a",
    "start": "497220",
    "end": "503160"
  },
  {
    "text": "commas for tuples in a list",
    "start": "503160",
    "end": "507199"
  },
  {
    "text": "I'd rather have parentheses the name bad pronunciation",
    "start": "512940",
    "end": "518099"
  },
  {
    "text": "the name not very good at accentsogen okay okay why isn't o camel more popular",
    "start": "518099",
    "end": "523500"
  },
  {
    "text": "oh okay we're gonna have to look at that here in a moment but let's keep on going",
    "start": "523500",
    "end": "528899"
  },
  {
    "text": "with oh camel first okay we're going with oh camel why are you so funny uh I find that offensive okay what am I a",
    "start": "528899",
    "end": "534720"
  },
  {
    "text": "clown am I a clown to you am I some sort of clown I'm trying to like get my best Joe Pesci",
    "start": "534720",
    "end": "540839"
  },
  {
    "text": "in here um here's something a little bit more complicated we can compute the list of lengths of each language as follows",
    "start": "540839",
    "end": "548580"
  },
  {
    "text": "let's see list map languages so this is for F string okay so this is argument F",
    "start": "548580",
    "end": "553620"
  },
  {
    "text": "gets string length oh nice okay I get that I get that I get",
    "start": "553620",
    "end": "560880"
  },
  {
    "text": "that okay so we take a list function map pass in our list of languages then we pass in our mapping function which",
    "start": "560880",
    "end": "566880"
  },
  {
    "text": "happens to be a uh which is a named argument here as length sweet I love that I love okay so I'm not gonna lie to",
    "start": "566880",
    "end": "573720"
  },
  {
    "text": "you I love well I wouldn't lie to you to begin with okay I'm not a liar okay I'm not I'm not a politician okay I'm not",
    "start": "573720",
    "end": "579959"
  },
  {
    "text": "gonna I'm not here to lie his voice reminds me of the red bearded gun blazing cartoon and I don't remember the",
    "start": "579959",
    "end": "585120"
  },
  {
    "text": "name are you talking about oh my goodness I've just forgot his name there's my voice sounds nothing like him",
    "start": "585120",
    "end": "594019"
  },
  {
    "text": "pants not oh Yosemite Sam Yosemite Sam Yosemite Sam I prefer Yosemite",
    "start": "595620",
    "end": "602580"
  },
  {
    "text": "um all right so anyways you can yeah this is great I love named arguments I like that oh camera looks like a toddler smashing",
    "start": "602580",
    "end": "609180"
  },
  {
    "text": "on the keyboard change my mind um you having a toddler that's incredible",
    "start": "609180",
    "end": "614839"
  },
  {
    "text": "incredible at smashing a keyboard into something that makes coherent sense I am",
    "start": "614839",
    "end": "619980"
  },
  {
    "text": "shocked uh the syntax is making more knots in my head it's just it's just different right uh list map takes two",
    "start": "619980",
    "end": "626100"
  },
  {
    "text": "arguments yep a list in the function okay uh notably uh the function is passed to a list map under the labeled",
    "start": "626100",
    "end": "631320"
  },
  {
    "text": "argument F labeled arguments are specified by name rather than by position and thus allow you to change",
    "start": "631320",
    "end": "636720"
  },
  {
    "text": "the order uh in which arguments are presented to a function without changing its Behavior I love that I love that uh",
    "start": "636720",
    "end": "644040"
  },
  {
    "text": "we'll learn more about that okay perfect constructing with list French Spanish languages okay",
    "start": "644040",
    "end": "649920"
  },
  {
    "text": "uh stringless French oh what the hell is this one in addition to constructing a list using brackets we can use the list",
    "start": "649920",
    "end": "656040"
  },
  {
    "text": "Constructor colon colon for adding elements to the front uh to the front of a list",
    "start": "656040",
    "end": "662480"
  },
  {
    "text": "Maria porque Marie porque or camel",
    "start": "663060",
    "end": "670200"
  },
  {
    "text": "prepend okay so you can double pretend okay here we are creating a new list let's see new and extending list and not",
    "start": "670200",
    "end": "676079"
  },
  {
    "text": "changing the list we started with as you can see below oh that is a non-mutating change okay cool",
    "start": "676079",
    "end": "682339"
  },
  {
    "text": "uh why is oh camel in there why is that Camel in there I don't know oh what do you plan to do with o camel I actually",
    "start": "682339",
    "end": "688019"
  },
  {
    "text": "plan okay so TJ Dax Adam and I have been talking and we",
    "start": "688019",
    "end": "694860"
  },
  {
    "text": "have there's a good idea floating around okay let's just say we got a really",
    "start": "694860",
    "end": "701279"
  },
  {
    "text": "good idea you know what I mean",
    "start": "701279",
    "end": "706939"
  },
  {
    "text": "and I'd like to use ocam I like this song as well uh unlike many other languages oh camel uses semicolons to separate list elements in a list rather",
    "start": "709140",
    "end": "715860"
  },
  {
    "text": "than commas commas instead are used for separating elements in a tuple if you try to use commas in a list you'll see the error code compiles and uh but",
    "start": "715860",
    "end": "722940"
  },
  {
    "text": "doesn't do quite what you might expect one thing that I will say that makes ocamo much more appealing right now from",
    "start": "722940",
    "end": "728760"
  },
  {
    "text": "me than um then rust is just the really great type",
    "start": "728760",
    "end": "733800"
  },
  {
    "text": "inference you know what I mean you know what I mean why uh why not the",
    "start": "733800",
    "end": "741240"
  },
  {
    "text": "T and the rest of go what does o camel solve that the others don't uh I want rust just without all the rust you know",
    "start": "741240",
    "end": "747600"
  },
  {
    "text": "what I mean so this would be a tuple nice okay perfect this example is okay okay to allocate a tuple of integers",
    "start": "747600",
    "end": "753600"
  },
  {
    "text": "this generally considered poor style and should be avoided the bracket notation for list is really just fantastic sugar",
    "start": "753600",
    "end": "758940"
  },
  {
    "text": "for this thus the following declarations are all equivalent note that the brackets are used to represent an empty list and that did it is the right",
    "start": "758940",
    "end": "764700"
  },
  {
    "text": "associative okay so we got Bam Bam Bam Bam Bam Bam okay so these are all",
    "start": "764700",
    "end": "771779"
  },
  {
    "text": "equivalent interesting okay I'd rather use this but I guess you could use this",
    "start": "771779",
    "end": "776880"
  },
  {
    "text": "it's just weird to do this at the end right so I think I'd rather do that uh the uh the Double Colonel a Constructor",
    "start": "776880",
    "end": "784320"
  },
  {
    "text": "can only be used for adding one element to the front of the list with the list terminating at that an empty list",
    "start": "784320",
    "end": "789600"
  },
  {
    "text": "there's also a list concatenation operator at which can be used to concatenate two lists okay perfectly",
    "start": "789600",
    "end": "795480"
  },
  {
    "text": "fine with me odd choice but whatever it's important to remember that unlike double colon that is not a constant time",
    "start": "795480",
    "end": "801360"
  },
  {
    "text": "operation concatenating two list makes time proportional to the length of the list",
    "start": "801360",
    "end": "807019"
  },
  {
    "text": "okay in other words N we just we would call that n uh by the way there's one",
    "start": "807660",
    "end": "812820"
  },
  {
    "text": "reason why I do like this do let's see there's one reason uh",
    "start": "812820",
    "end": "818880"
  },
  {
    "text": "there's one reason why I like this and I think uh people are saying this right here well a better type system than rust why people are saying this one one",
    "start": "818880",
    "end": "825240"
  },
  {
    "text": "reason why this is so awesome is that by using different symbols for different operations right an at sign for addition",
    "start": "825240",
    "end": "831959"
  },
  {
    "text": "of two lists versus a plus sign for addition of two ends versus a plus dot for an addition of two floats the reason",
    "start": "831959",
    "end": "838380"
  },
  {
    "text": "why that is good is that the type system can infer much quicker right there's way",
    "start": "838380",
    "end": "843720"
  },
  {
    "text": "more hints about what the types are so when you do a an AD Sign between two two",
    "start": "843720",
    "end": "850139"
  },
  {
    "text": "variables it can infer all the way up these must be listed I'm pretty sure of it so watch uh here we'll just try it",
    "start": "850139",
    "end": "855959"
  },
  {
    "text": "out I haven't tried this let's just find out let add uh to list we'll take X and Y and we'll equal and we'll go like this",
    "start": "855959",
    "end": "862740"
  },
  {
    "text": "uh we'll go X at uh ah at y right",
    "start": "862740",
    "end": "869100"
  },
  {
    "text": "there we go look at that see it's able to infer because the syntax this is a",
    "start": "869100",
    "end": "874560"
  },
  {
    "text": "list of we're not sure what the hell is in there but they're of the same subtype because we can add the two lists",
    "start": "874560",
    "end": "880019"
  },
  {
    "text": "together I think that's pretty cool right",
    "start": "880019",
    "end": "885180"
  },
  {
    "text": "I'm I'm in I'm in on that you know what I mean",
    "start": "885180",
    "end": "889940"
  },
  {
    "text": "I'm for it I'm for it uh doesn't that make it more difficult to learn",
    "start": "890459",
    "end": "897139"
  },
  {
    "text": "no so when it comes to learning I do not think",
    "start": "898440",
    "end": "904380"
  },
  {
    "text": "different Syntax for the same thing as harder it's more annoying than anything else but if there's a different concept",
    "start": "904380",
    "end": "912779"
  },
  {
    "text": "that's hard to learn right so concatenating two lists together you understand that syntax it's a matter of",
    "start": "912779",
    "end": "918420"
  },
  {
    "text": "EX or you understand that uh the uh semantics of that it's about expressing",
    "start": "918420",
    "end": "923880"
  },
  {
    "text": "it and so is this verbal is this expression harder than any other expression",
    "start": "923880",
    "end": "929519"
  },
  {
    "text": "no it's really not like this isn't this isn't like there's nothing to learn here",
    "start": "929519",
    "end": "936240"
  },
  {
    "text": "it's just a different symbol that's it right and so the expression of it is not hard uh list patterns using match all",
    "start": "936240",
    "end": "942480"
  },
  {
    "text": "right the elements of the list can be accessed through the pattern matching list patterns are just based on two list Constructors okay let's see my favorite",
    "start": "942480",
    "end": "949199"
  },
  {
    "text": "language favorite language this the rest oh interesting so this would be my favorite and the rest this must be the",
    "start": "949199",
    "end": "955260"
  },
  {
    "text": "first element and then the rest of the elements Maybe that's a warning uh eight pattern match",
    "start": "955260",
    "end": "962100"
  },
  {
    "text": "this pattern is not exhaustive nice ooh cool okay so look at this so it does a",
    "start": "962100",
    "end": "968760"
  },
  {
    "text": "little bit of pattern matching here okay okay that's kind of interesting that's",
    "start": "968760",
    "end": "976440"
  },
  {
    "text": "kind of interesting I like what's going I like what's going on here I like it um",
    "start": "976440",
    "end": "981779"
  },
  {
    "text": "uh by pattern matching using uh colon colon hey by the way thank you for karasik let's go 26 months hell yeah",
    "start": "981779",
    "end": "990260"
  },
  {
    "text": "uh anyways by pattern matching using double colon we've isolated and named the first element of the list my",
    "start": "990260",
    "end": "996180"
  },
  {
    "text": "favorite and the remaining the rest if you know lisper scheme what we've done is the equivalent of using functions car",
    "start": "996180",
    "end": "1001759"
  },
  {
    "text": "and CDR isn't there like a but isn't isn't there just some joke about car going forever isn't there just like car",
    "start": "1001759",
    "end": "1008920"
  },
  {
    "text": "or something like that it just keeps on going and getting bigger and bigger and bigger",
    "start": "1008920",
    "end": "1015100"
  },
  {
    "text": "if I'm not mistaken to ice like yeah yeah it just keeps on growing do I cite the",
    "start": "1015199",
    "end": "1021500"
  },
  {
    "text": "first element of the list and the remainder of that list as you can see however the top level uh did not like the definition and split out a warning",
    "start": "1021500",
    "end": "1027740"
  },
  {
    "text": "indicating that pattern is not exhaustive this means there are values of the type in question that won't be",
    "start": "1027740",
    "end": "1033140"
  },
  {
    "text": "captured by the pattern the warning even give an example all right so super cool so my favorite language awesome this one",
    "start": "1033140",
    "end": "1039678"
  },
  {
    "text": "failure okay you can avoid These Warnings and more importantly make sure that your code actually handles all",
    "start": "1039679",
    "end": "1044900"
  },
  {
    "text": "possible cases by the way this is Awesome by the way like this is a great I love so pattern matching is one of the",
    "start": "1044900",
    "end": "1050900"
  },
  {
    "text": "things I just do not use a lot to solve problems because I do not get a language that uses pattern matching to solve",
    "start": "1050900",
    "end": "1056720"
  },
  {
    "text": "problems right so for the most part I am required to use typescript or C plus plus or go and so I just I don't get",
    "start": "1056720",
    "end": "1063980"
  },
  {
    "text": "this as an option to really do but pattern matching seems to be one",
    "start": "1063980",
    "end": "1070039"
  },
  {
    "text": "of the most powerful features of programming languages I have ever seen in my lifetime and it seems like you can solve a whole host of problems with",
    "start": "1070039",
    "end": "1077539"
  },
  {
    "text": "syntax as opposed to imperative programming or procedural programming it's like super super amazing it brings",
    "start": "1077539",
    "end": "1085280"
  },
  {
    "text": "a whole level of uh of declarative nature to the programming that seems amazing you know what I mean TS pattern",
    "start": "1085280",
    "end": "1091580"
  },
  {
    "text": "I'm not using I'm not using a library for that okay can you show an example well we're looking at something right",
    "start": "1091580",
    "end": "1097160"
  },
  {
    "text": "here plucking the first element off the list right so look at that this is the first",
    "start": "1097160",
    "end": "1102200"
  },
  {
    "text": "element off the list this is expressed in syntax right like you look at this this is a declarative nature to this",
    "start": "1102200",
    "end": "1108860"
  },
  {
    "text": "function which is super cool so now let's let's see how they do this look at this one so you can say my favorite",
    "start": "1108860",
    "end": "1114860"
  },
  {
    "text": "language languages match with language first rest first nothing oh camel a good",
    "start": "1114860",
    "end": "1121940"
  },
  {
    "text": "default like that's great right I like this I",
    "start": "1121940",
    "end": "1128240"
  },
  {
    "text": "like this a lot right let's see the preceding code includes",
    "start": "1128240",
    "end": "1133400"
  },
  {
    "text": "our first comment oh camel's comments yeah that's a weird they went with a weird choice on this one but whatever uh can be nested covering multiple lines uh",
    "start": "1133400",
    "end": "1140240"
  },
  {
    "text": "there is no equivalent to C plus plus uh style single line quote blah blah blah first pattern first the rest covers the",
    "start": "1140240",
    "end": "1147380"
  },
  {
    "text": "case with the languages that have at least one element since every list uh except for the empty list can be written down with one or more of these true",
    "start": "1147380",
    "end": "1156140"
  },
  {
    "text": "second pattern matches only the empty list awesome verified by the compiler see this is sweet I love this I love",
    "start": "1156140",
    "end": "1162740"
  },
  {
    "text": "that that solves an entire thing right because how would you write this in so here we'll jump back here so for those",
    "start": "1162740",
    "end": "1168440"
  },
  {
    "text": "that don't know what I'm trying to say an equivalent of this would be something like this right function uh my fave",
    "start": "1168440",
    "end": "1173780"
  },
  {
    "text": "right takes in a list let's just go like that and we'd have to do something like this if uh list.length equals zero we",
    "start": "1173780",
    "end": "1180799"
  },
  {
    "text": "return you know uh o camel right else we return list zero right you could do",
    "start": "1180799",
    "end": "1186559"
  },
  {
    "text": "something like that or you do something you do what is it is it that",
    "start": "1186559",
    "end": "1192860"
  },
  {
    "text": "oh camel I think that's loud well either way you have to express it in some sort of way that's imperative right",
    "start": "1192860",
    "end": "1200600"
  },
  {
    "text": "it's just different there's no cases you can't break it down logically by different ways in which your your stuff",
    "start": "1200600",
    "end": "1206539"
  },
  {
    "text": "comes in you can't shape it as easily all right recursive list functions let's",
    "start": "1206539",
    "end": "1212179"
  },
  {
    "text": "go recursive functions or functions that call themselves are an important part of working in O camel or really any functional language the typical approach",
    "start": "1212179",
    "end": "1218539"
  },
  {
    "text": "to designing a recursive function is to separate the logic into set a set of Base cases that can be solved directly",
    "start": "1218539",
    "end": "1223760"
  },
  {
    "text": "in a set of inductive cases where the function breaks the problem down into smaller pieces then calls itself to",
    "start": "1223760",
    "end": "1228860"
  },
  {
    "text": "solve those problems so this is just Basics this is literally just the mathematical way to describe this uh",
    "start": "1228860",
    "end": "1234380"
  },
  {
    "text": "awesome okay I'm gonna go pee and then we're gonna keep on going pee pee time and then we're gonna go",
    "start": "1234380",
    "end": "1239480"
  },
  {
    "text": "foreign there we go while writing recursive uh list functions a separate let's see the separation between base cases and",
    "start": "1239480",
    "end": "1245360"
  },
  {
    "text": "inductive cases are often done doing pattern matching another beautiful thing uh",
    "start": "1245360",
    "end": "1251780"
  },
  {
    "text": "you got chat thank you lithium I appreciate that you didn't do anything lithium what naughty things did you do",
    "start": "1251900",
    "end": "1259580"
  },
  {
    "text": "lithium I knew oh you gotcha oh you got Chad",
    "start": "1259580",
    "end": "1264100"
  },
  {
    "text": "how did I not see that one coming",
    "start": "1267500",
    "end": "1272260"
  },
  {
    "text": "how did I not see this coming at all I love you",
    "start": "1273260",
    "end": "1279280"
  },
  {
    "text": "oh goodness gracious that scared the [ __ ] out of me um okay then uh thank you",
    "start": "1279280",
    "end": "1285500"
  },
  {
    "text": "lithium for these sphincter exercising that just went on uh it was the misdirect it was genuinely",
    "start": "1285500",
    "end": "1291500"
  },
  {
    "text": "the misdirect and your life choices that you've been making recently",
    "start": "1291500",
    "end": "1298360"
  },
  {
    "text": "did you pee a little bit more just a little bit more just enough to make it fun",
    "start": "1300320",
    "end": "1305440"
  },
  {
    "text": "uh okay for those that aren't on Twitch that makes no sense uh anyways let's see",
    "start": "1305780",
    "end": "1311419"
  },
  {
    "text": "uh PCG thank you very much lithium thank you and randomer thank you for the twitch Prime 14 months I feel like this",
    "start": "1311419",
    "end": "1316760"
  },
  {
    "text": "all day just a little bit of p man the real world oh camo makes me think of a certain bald guy",
    "start": "1316760",
    "end": "1323080"
  },
  {
    "text": "I'm not sure with whom the certain bald guy is but seems exciting all right so anyways let's keep on going okay so",
    "start": "1323600",
    "end": "1329260"
  },
  {
    "text": "match l nothing here a head tail some okay yep",
    "start": "1329260",
    "end": "1334700"
  },
  {
    "text": "and this is the tail recursive version boom boom boom I assume that oh Campbell does all the good things we don't actually do stack frames per recursive",
    "start": "1334700",
    "end": "1341240"
  },
  {
    "text": "call uh all right game on enjoy your stream thank you very much uh following the",
    "start": "1341240",
    "end": "1346520"
  },
  {
    "text": "let's see I feel like this uh all day dang following this common ocamel idiom uh we use head to refer to head and tail",
    "start": "1346520",
    "end": "1353539"
  },
  {
    "text": "to refer to tail note that this uh note that we have to use Rec a keyword to allow some to refer to itself as you",
    "start": "1353539",
    "end": "1360320"
  },
  {
    "text": "might imagine the base case and inductive case are different arms of the match yes logically you can think of the",
    "start": "1360320",
    "end": "1365720"
  },
  {
    "text": "evaluation of a simple recursive functions like some almost as if we were a mathematical equation uh whose meaning",
    "start": "1365720",
    "end": "1372260"
  },
  {
    "text": "could unfold by steps yep perfect yeah that I mean this is just like an",
    "start": "1372260",
    "end": "1378200"
  },
  {
    "text": "explanation of what recursion is you're an idiom I I'm an idiom",
    "start": "1378200",
    "end": "1383380"
  },
  {
    "text": "I love Randy 69 let's go Pokey W hell yeah girl pokey",
    "start": "1385280",
    "end": "1391659"
  },
  {
    "text": "poke pokey W let's go let's go",
    "start": "1391659",
    "end": "1397340"
  },
  {
    "text": "10 month subscriber here okay she pretty much is gonna give me her cell phone number at any moment okay",
    "start": "1397340",
    "end": "1406120"
  },
  {
    "text": "it's like obviously big fan obviously big fan uh I hate when",
    "start": "1406159",
    "end": "1411620"
  },
  {
    "text": "languages call themselves uh call the same [ __ ] by different names yeah chemical jokes are better than [ __ ]",
    "start": "1411620",
    "end": "1416720"
  },
  {
    "text": "jokes yeah I think so all right remove sequential duplicate",
    "start": "1416720",
    "end": "1422659"
  },
  {
    "text": "list match this first second tail if first equals second then remove sequential duplicates second",
    "start": "1422659",
    "end": "1431200"
  },
  {
    "text": "it's beautiful uh let's see let's see hold on hold on hold on hold on this pattern matching is not okay what is",
    "start": "1440320",
    "end": "1446360"
  },
  {
    "text": "this oh we can uh introduce more complicated list patterns as well here's a function removing sequential duplicates okay I",
    "start": "1446360",
    "end": "1453980"
  },
  {
    "text": "could understand why this doesn't work I think I understand why this doesn't work which is what about a list of one a list",
    "start": "1453980",
    "end": "1459919"
  },
  {
    "text": "of one does not have two individual items in it so is that the thing yeah there we go called it",
    "start": "1459919",
    "end": "1466700"
  },
  {
    "text": "okay called it called it not long enough I mean I I've I've been called that so",
    "start": "1466700",
    "end": "1472100"
  },
  {
    "text": "many times myself that it actually like I can just see it right I can just see it right away the moment something is",
    "start": "1472100",
    "end": "1478280"
  },
  {
    "text": "not long enough I just know because I've had just such an extensive Journey being there uh I want to thank",
    "start": "1478280",
    "end": "1483980"
  },
  {
    "text": "you because you saved my life I have ADHD and I was taking medications that were making me anxious and anti-social",
    "start": "1483980",
    "end": "1489500"
  },
  {
    "text": "dang that's tough not long enough I know Maple Leaf you're learning a nerd",
    "start": "1489500",
    "end": "1495020"
  },
  {
    "text": "language hell yeah Maple Leaf how you doing by the way Mapes my grapes um haven't seen you in a while ever since I",
    "start": "1495020",
    "end": "1501679"
  },
  {
    "text": "called you Andrew Mapes I feel like you haven't stopped by I have no idea why are you okay",
    "start": "1501679",
    "end": "1508658"
  },
  {
    "text": "yeah you said something about on the twitters that uh uh you just want to program more and you're tired of",
    "start": "1511820",
    "end": "1517220"
  },
  {
    "text": "[ __ ] so hey more power to you hell yeah Prime thank you very much appreciate that greater dispel uh first",
    "start": "1517220",
    "end": "1523880"
  },
  {
    "text": "EQ size uh you're not allowed to name the anime girl avatar yeah I know",
    "start": "1523880",
    "end": "1529960"
  },
  {
    "text": "uh is the functional programming language the other way of programming or does it provide it doesn't provide perform usually they're slower they tend",
    "start": "1531140",
    "end": "1536900"
  },
  {
    "text": "to be slower as far as I can tell but I don't think that's always true",
    "start": "1536900",
    "end": "1542179"
  },
  {
    "text": "all right note that this code used another variant of the list pattern head uh to match a list with a single element",
    "start": "1542179",
    "end": "1549260"
  },
  {
    "text": "we can do this to match a list with any fixed number of elements for example XYZ will match any list with exactly three",
    "start": "1549260",
    "end": "1555679"
  },
  {
    "text": "elements and bind those elements to the variables I wonder how that works oh camel is just recursion switch",
    "start": "1555679",
    "end": "1561380"
  },
  {
    "text": "statements and pipes yeah uh in the last few examples our list processing code involved a lot of recursive functions",
    "start": "1561380",
    "end": "1567260"
  },
  {
    "text": "practice okay options let's go through options okay so there is some okay oh",
    "start": "1567260",
    "end": "1572299"
  },
  {
    "text": "okay okay okay okay so this would be safe divide of course",
    "start": "1572299",
    "end": "1577520"
  },
  {
    "text": "speed is the only thing that matters in programming hell yeah girl",
    "start": "1577520",
    "end": "1582760"
  },
  {
    "text": "that's why I can that's why I'm the fastest",
    "start": "1583220",
    "end": "1588799"
  },
  {
    "text": "fastest slay in the west okay because speed matters hey chat does a streamer uh know purely functional language no I",
    "start": "1588799",
    "end": "1594260"
  },
  {
    "text": "know nothing it turns out your business uh that's the bifrost the by the the",
    "start": "1594260",
    "end": "1601159"
  },
  {
    "text": "bryfost thank you very much I know nothing of this is my first functional programming language the function divide either returns none",
    "start": "1601159",
    "end": "1608059"
  },
  {
    "text": "if the divisor is zero or some if the results of the division otherwise okay perfect uh two let's see to examine the",
    "start": "1608059",
    "end": "1614000"
  },
  {
    "text": "contents of an option we use pattern matching okay cool okay so how do we do that none some okay",
    "start": "1614000",
    "end": "1619760"
  },
  {
    "text": "okay cool okay this all makes sense so I'm starting to speed through because I don't want to keep on you know what I mean I don't want to",
    "start": "1619760",
    "end": "1625400"
  },
  {
    "text": "keep on going forever here I wanna you know I ask glass be your next lawyer no I'm not learning uh Haskell all okay I",
    "start": "1625400",
    "end": "1631279"
  },
  {
    "text": "shipped Haskell all to Broad already this morning can't confirm added so many opera operators just to confuse co-workers added some extra math too",
    "start": "1631279",
    "end": "1637520"
  },
  {
    "text": "nice some Lambda calculus you talked about some monads or some [ __ ] uh no",
    "start": "1637520",
    "end": "1642919"
  },
  {
    "text": "that we use the operator for cutting strings okay uh are you done with Zig uh friendship",
    "start": "1642919",
    "end": "1649100"
  },
  {
    "text": "over with Zig didn't you see that obviously C plus plus is my new love",
    "start": "1649100",
    "end": "1654500"
  },
  {
    "text": "okay this is my new love I only love C plus plus",
    "start": "1654500",
    "end": "1661159"
  },
  {
    "text": "okay I only love C plus plus okay",
    "start": "1661159",
    "end": "1666980"
  },
  {
    "text": "go ahead say something stupid",
    "start": "1666980",
    "end": "1670658"
  },
  {
    "text": "Double Stuffed tacos based thank you um can you uh still see that yeah wait what",
    "start": "1672260",
    "end": "1679880"
  },
  {
    "text": "I stared at Haskell once okay thank you hey thank you for pinning it uh I don't understand get the flamer yup yeah yeah",
    "start": "1679880",
    "end": "1686720"
  },
  {
    "text": "template type name okay that's just rude don't bring that up okay uh all right",
    "start": "1686720",
    "end": "1693260"
  },
  {
    "text": "and did you know that you can watch all that let's see do you watch other streamers too tiege tax Etc",
    "start": "1693260",
    "end": "1698600"
  },
  {
    "text": "um no I don't really watch streams I stop by to say hi it turns out you're busy because I like people thank you",
    "start": "1698600",
    "end": "1703880"
  },
  {
    "text": "dude okay okay thank you for the the two in a row Big Time thank yous um",
    "start": "1703880",
    "end": "1710360"
  },
  {
    "text": "I don't watch other streams welcome to Costco I'm not a baby I love you it's hard for me because I I have to be like",
    "start": "1710360",
    "end": "1715880"
  },
  {
    "text": "so in the zone you know what I mean I have to be so in",
    "start": "1715880",
    "end": "1720919"
  },
  {
    "text": "the zone I'm a manager no I'm an IC baby I would be",
    "start": "1720919",
    "end": "1726080"
  },
  {
    "text": "no I don't watch any I just said I don't watch anybody if I'm gonna like I will put TJ on sometimes in the background",
    "start": "1726080",
    "end": "1732140"
  },
  {
    "text": "just so I can chat with TJ every now and then like I said either I'm gonna be here",
    "start": "1732140",
    "end": "1738440"
  },
  {
    "text": "here's how it goes we're going straight to X Cali draw for this welcome to Costco I love you",
    "start": "1738440",
    "end": "1744799"
  },
  {
    "text": "it's very very simple it's very very simple okay here is my life",
    "start": "1744799",
    "end": "1750260"
  },
  {
    "text": "okay uh there's like c-suite right",
    "start": "1750260",
    "end": "1758020"
  },
  {
    "text": "there is uh esuite there are this is like a typical company",
    "start": "1758120",
    "end": "1765860"
  },
  {
    "text": "there are directors this is like typical company hierarchy right uh there are",
    "start": "1765860",
    "end": "1771140"
  },
  {
    "text": "managers and there's variations of all these right esuite c-suite uh senior this this",
    "start": "1771140",
    "end": "1776240"
  },
  {
    "text": "this this this this and I see right so here you go here's the variation of what is available I will literally never try",
    "start": "1776240",
    "end": "1782899"
  },
  {
    "text": "to be those one of these two I will only accept this this area",
    "start": "1782899",
    "end": "1788179"
  },
  {
    "text": "I am not good I am not I'm not that person right I'm just never going to be that person",
    "start": "1788179",
    "end": "1794960"
  },
  {
    "text": "you know what I mean I'm just not you know all the way uh I'm all the way",
    "start": "1794960",
    "end": "1800600"
  },
  {
    "text": "down have you forgotten the G-Spot that doesn't exist we all know that I want to be at the top of the uh of the bottom of",
    "start": "1800600",
    "end": "1807200"
  },
  {
    "text": "the pile exactly uh so you're the so you're a bottom I'm a bottom either I'm a top or I'm a bottom I'm not I'm not a",
    "start": "1807200",
    "end": "1813559"
  },
  {
    "text": "middle out okay there's no efficiency here I'm not around the boat as they say right that's how you row a boat right",
    "start": "1813559",
    "end": "1820159"
  },
  {
    "text": "there's no Row in the boat around here um is that what they say",
    "start": "1820159",
    "end": "1827380"
  },
  {
    "text": "uh do engineering managers at Netflix earn more than individual ICS I heard no from multiple managers I've asked",
    "start": "1827779",
    "end": "1833779"
  },
  {
    "text": "because I was like I hear changes once you get to director level but I don't want to do that even for the monies you",
    "start": "1833779",
    "end": "1839899"
  },
  {
    "text": "know what I mean if someone offered me to do a director at Netflix I wouldn't want to do that",
    "start": "1839899",
    "end": "1846039"
  },
  {
    "text": "you're a head or a tail not top or bottom that's right I'm a head or a tail baby so there you go",
    "start": "1846080",
    "end": "1853539"
  },
  {
    "text": "too many letters Greg is scared exactly what does I see individual contributor",
    "start": "1853940",
    "end": "1860480"
  },
  {
    "text": "am I the only one that don't get this icce Suite e-suites VPS",
    "start": "1860480",
    "end": "1866179"
  },
  {
    "text": "c-suite is Chief star officer",
    "start": "1866179",
    "end": "1871179"
  },
  {
    "text": "fine director of memes they'll have to be somebody else you know that you know that's a vice president of memes okay",
    "start": "1871760",
    "end": "1878240"
  },
  {
    "text": "uh anyways here we go there we go I see equals I can Chef Suite yes all right anyways",
    "start": "1878240",
    "end": "1886100"
  },
  {
    "text": "uh let's see uh let's see Han options are important because they are the standard way in O camel to encode a value that might not be there there's no",
    "start": "1886100",
    "end": "1892159"
  },
  {
    "text": "such thing as a null pointer exception in ocamel this is different than uh from most languages including Java and",
    "start": "1892159",
    "end": "1898399"
  },
  {
    "text": "c-sharp where most if not all the data are nullable meaning that whenever their",
    "start": "1898399",
    "end": "1903919"
  },
  {
    "text": "type is any given value that also contains the possibility of being a null value yep uh that that is why there's",
    "start": "1903919",
    "end": "1910760"
  },
  {
    "text": "nothing worse when someone in typescript has this value I hate that when someone comes dropping in in typescript giving",
    "start": "1910760",
    "end": "1917480"
  },
  {
    "text": "me that [ __ ] that is [ __ ] you will not hand me a nullable Boolean I",
    "start": "1917480",
    "end": "1922520"
  },
  {
    "text": "don't want Tri-State okay you give me a true you give me a false",
    "start": "1922520",
    "end": "1927620"
  },
  {
    "text": "you don't give me a Tri-State the end okay the end",
    "start": "1927620",
    "end": "1934600"
  },
  {
    "text": "bull Leon ice call Boolean",
    "start": "1934600",
    "end": "1940539"
  },
  {
    "text": "Boolean uh anyways let's say Point 2D as a record type okay so I don't know much about records",
    "start": "1940539",
    "end": "1946220"
  },
  {
    "text": "right hold on are We There Yet we're right yeah we're at records okay on REI records okay options we've done",
    "start": "1946220",
    "end": "1951799"
  },
  {
    "text": "options so let's go to record and variants so far we've only looked at data structures that were predefined in the language",
    "start": "1951799",
    "end": "1957220"
  },
  {
    "text": "hey thank you very much I love you too but ocamo allows you to Define new data types okay this is what I wanted to see",
    "start": "1957220",
    "end": "1963140"
  },
  {
    "text": "here's a toy example of data types representing a point in two-dimensional space okay type Point equals this sweet Point",
    "start": "1963140",
    "end": "1970220"
  },
  {
    "text": "2D is a record type which you can think of like a tuple where the individual fields are named rather than being defined personal uh positionally record",
    "start": "1970220",
    "end": "1976640"
  },
  {
    "text": "types are easy enough to construct yes oh that's beautiful love it love the syntax okay",
    "start": "1976640",
    "end": "1983919"
  },
  {
    "text": "we can access these elements with pattern matching let's go love it okay oh a floating squirt nothing's better",
    "start": "1985100",
    "end": "1992840"
  },
  {
    "text": "than a floating squirt you know what I mean the pattern match here binds the variable X position yep okay can you",
    "start": "1992840",
    "end": "1998779"
  },
  {
    "text": "just ask them with the dot separator or do you always have to pattern match the mount alternative we can use dot",
    "start": "1998779",
    "end": "2005799"
  },
  {
    "text": "notation for records perfect love it we can uh we can of course uh of course",
    "start": "2005799",
    "end": "2011140"
  },
  {
    "text": "include our newly defined types as components in larger types nice okay good",
    "start": "2011140",
    "end": "2017380"
  },
  {
    "text": "I'm all about that flow score so that means we can have some sort of function let Foo uh x equals x dot you know Fufu",
    "start": "2017380",
    "end": "2025299"
  },
  {
    "text": "there we go right Unbound record field Fufu Okay so",
    "start": "2025299",
    "end": "2032398"
  },
  {
    "text": "why doesn't that work do I have to first uh",
    "start": "2033039",
    "end": "2040419"
  },
  {
    "text": "do I have to first do this one was that the syntax",
    "start": "2040419",
    "end": "2047760"
  },
  {
    "text": "let's see type no they use uh",
    "start": "2047919",
    "end": "2052618"
  },
  {
    "text": "there we go uh-oh uh what what the hell",
    "start": "2053080",
    "end": "2059580"
  },
  {
    "text": "all right uh there we go syntax error",
    "start": "2061419",
    "end": "2066240"
  },
  {
    "text": "welcome to Costco I love you oh can I not use capital letters",
    "start": "2066460",
    "end": "2073080"
  },
  {
    "text": "oh strange but okay what about now",
    "start": "2073480",
    "end": "2081398"
  },
  {
    "text": "okay so since oh cool cool",
    "start": "2081399",
    "end": "2087240"
  },
  {
    "text": "you see that you I can't Define this function because this type never existed",
    "start": "2092080",
    "end": "2099180"
  },
  {
    "text": "kind of oh why did the music why did you pause my music YouTube let's restart this song because it's kind of a banger I kind of I'm kind of liking it you know",
    "start": "2102040",
    "end": "2108339"
  },
  {
    "text": "what I mean that was cool that was cool that the type you can't make a function that can't accept a type that's not",
    "start": "2108339",
    "end": "2113859"
  },
  {
    "text": "already in scope love it if a type is an in scope IG",
    "start": "2113859",
    "end": "2118900"
  },
  {
    "text": "different module you need to open that module locally like yeah yeah yeah yeah it posted on what kind of programming do",
    "start": "2118900",
    "end": "2125079"
  },
  {
    "text": "you like Prime uh the technical kind no Anonymous records no Anonymous records apparently",
    "start": "2125079",
    "end": "2130960"
  },
  {
    "text": "but I I assume it does I wonder if there's some there must be like an interface record or some way to types",
    "start": "2130960",
    "end": "2136720"
  },
  {
    "text": "are always explicit there must be some sort of animal dog thing going on right explicit",
    "start": "2136720",
    "end": "2144940"
  },
  {
    "text": "okay thank you for the tier one three months let's go let's go Point 2D is a",
    "start": "2144940",
    "end": "2149980"
  },
  {
    "text": "record type okay wait we already looked at that float squirt me Daddy oh",
    "start": "2149980",
    "end": "2155740"
  },
  {
    "text": "no my wife might hear that shut up Max going good it is going good",
    "start": "2155740",
    "end": "2165780"
  },
  {
    "text": "uh now I imagine that you want to combine multiple objects of these types together as a description of a multi-object scene you need uh some",
    "start": "2167579",
    "end": "2175780"
  },
  {
    "text": "undefined way of representing those objects together in a single type variant types uh let you do just that",
    "start": "2175780",
    "end": "2180880"
  },
  {
    "text": "okay oh nice variant types okay so these are variant types I assume this is the exact",
    "start": "2180880",
    "end": "2186160"
  },
  {
    "text": "same thing as saying a uh tagged Union is this effectively a tagged Union right",
    "start": "2186160",
    "end": "2191380"
  },
  {
    "text": "a music interrupter when I clicked your video YouTube knows everything I know the pipe character separates the",
    "start": "2191380",
    "end": "2196599"
  },
  {
    "text": "different cases of the variant um cool cool cool cool uh the first is optional",
    "start": "2196599",
    "end": "2203740"
  },
  {
    "text": "and each use case has a capital tag like Circle rectum and segments to distinguish that case from the others",
    "start": "2203740",
    "end": "2209560"
  },
  {
    "text": "awesome uh here's how we might write the function uh for testing whether a point is in the interior of some element of",
    "start": "2209560",
    "end": "2215079"
  },
  {
    "text": "the scene elements okay okay this is too much okay that's way too much math uh",
    "start": "2215079",
    "end": "2221440"
  },
  {
    "text": "first off I'd just like to say I'm sorry or congratulations",
    "start": "2221440",
    "end": "2227740"
  },
  {
    "text": "um really amazing stuff but I do see that we do use the rectum",
    "start": "2227740",
    "end": "2233380"
  },
  {
    "text": "the circle and the segment here um and then we call some sort of exist business",
    "start": "2233380",
    "end": "2238720"
  },
  {
    "text": "inside scene Point scene list scenes scenes function inside point and it does",
    "start": "2238720",
    "end": "2245079"
  },
  {
    "text": "some sort of magic so I don't know what the hell's happening there okay",
    "start": "2245079",
    "end": "2250380"
  },
  {
    "text": "I was told that oh Campbell didn't do math well apparently I'm doing math and I'm not sure if I like this okay you might at this point notice that we use",
    "start": "2250839",
    "end": "2256359"
  },
  {
    "text": "match here uh is reminiscent of how we use maps with options and lists there is no accident option lists are just",
    "start": "2256359",
    "end": "2261579"
  },
  {
    "text": "examples of variant types that are almost enough to be defined in the standard Library",
    "start": "2261579",
    "end": "2267520"
  },
  {
    "text": "almost and in this case of list let's see uh to have some special syntax okay uh we also made our first use of",
    "start": "2267520",
    "end": "2274900"
  },
  {
    "text": "anonymous function okay yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah what does that look like fun okay so if",
    "start": "2274900",
    "end": "2280540"
  },
  {
    "text": "you just do fun that's Anonymous function cool all right bass and polymorphic",
    "start": "2280540",
    "end": "2285820"
  },
  {
    "text": "comparison you know what everybody's we're getting based in polymorphic here boys let's go let's go",
    "start": "2285820",
    "end": "2294160"
  },
  {
    "text": "I can't wait um",
    "start": "2294160",
    "end": "2299338"
  },
  {
    "text": "all right one thing uh to notice though was the fact that we opened float zero in the definition of inside scene",
    "start": "2300339",
    "end": "2305619"
  },
  {
    "text": "element that allowed us to use the simple undotted infix operators but more",
    "start": "2305619",
    "end": "2311260"
  },
  {
    "text": "importantly it brought the float comparison operators into Scope when using Bass the default comparison",
    "start": "2311260",
    "end": "2317020"
  },
  {
    "text": "operators work only on integers if you need to explicitly choose other operators when you want them okay also",
    "start": "2317020",
    "end": "2324339"
  },
  {
    "text": "offers a special set of polymorphic comparison operators that can work on almost any type but those are considered",
    "start": "2324339",
    "end": "2330339"
  },
  {
    "text": "to be problematic agreed I actually love the fact that there's different things for every I like it whoopsies didn't",
    "start": "2330339",
    "end": "2336220"
  },
  {
    "text": "mean to click that go back and so our hit let's see and so we're hidden by default by base we'll learn more about",
    "start": "2336220",
    "end": "2341380"
  },
  {
    "text": "polymorphic comparing chapter three terser and faster patterns let's go thank you very much polymorphism hey",
    "start": "2341380",
    "end": "2348460"
  },
  {
    "text": "brifost thank you the Bry fost",
    "start": "2348460",
    "end": "2353160"
  },
  {
    "text": "ER all right on so let's see if let open with float zero",
    "start": "2353859",
    "end": "2362560"
  },
  {
    "text": "and so that means these are float operators are they supposed to be FL is that what they're saying okay so because lower x",
    "start": "2362560",
    "end": "2369400"
  },
  {
    "text": "what is that that's a lower X yeah that yeah lower those so these are",
    "start": "2369400",
    "end": "2375880"
  },
  {
    "text": "all floats so by doing this float open these became floats is that how the plus operator",
    "start": "2375880",
    "end": "2381460"
  },
  {
    "text": "works is that what happened am I saying this correct since we opened float zero",
    "start": "2381460",
    "end": "2388078"
  },
  {
    "text": "where are you sorry I don't know why I'm not looking at my screen uh that actually is the equivalent of",
    "start": "2388780",
    "end": "2396220"
  },
  {
    "text": "right of plus dot right it brought the float operators into lexical scope nice",
    "start": "2396220",
    "end": "2401440"
  },
  {
    "text": "okay so that's why you do these these kind of let open ends uh okay okay yeah yeah yeah yeah yeah yeah okay uh",
    "start": "2401440",
    "end": "2409180"
  },
  {
    "text": "imperative programming the code we've written so far has almost been purely uh entirely Pure or functional uh which",
    "start": "2409180",
    "end": "2415900"
  },
  {
    "text": "roughly speaking means the code in question doesn't modify variables or values or get you a day job as part of",
    "start": "2415900",
    "end": "2421480"
  },
  {
    "text": "its execution indeed almost all of the data structures we've encountered are immutable meaning there's no way to uh",
    "start": "2421480",
    "end": "2427000"
  },
  {
    "text": "in the language to modify them at all this is quite different style from imperative programming where computations are yeah are structured as",
    "start": "2427000",
    "end": "2434260"
  },
  {
    "text": "a sequence of instructions that operate by making modifications to the state of the program functional code is the",
    "start": "2434260",
    "end": "2439720"
  },
  {
    "text": "default in ocamel with variable bindings and most data structures being immutable but ocamel also has excellent support",
    "start": "2439720",
    "end": "2446140"
  },
  {
    "text": "for imperative imperative programming including mutable data structures like arrays and hash tables and control flow",
    "start": "2446140",
    "end": "2451839"
  },
  {
    "text": "structs like four and a while I love I love that this is great because like a rays are just fast right we I mean we",
    "start": "2451839",
    "end": "2459160"
  },
  {
    "text": "just got done watching a video about how fast arrays are again sounds pregnant but this is like the whole o camel thing",
    "start": "2459160",
    "end": "2465520"
  },
  {
    "text": "as far as I can tell o camel is like if a bunch of academics had to get a real job and then used all their brain power",
    "start": "2465520",
    "end": "2472300"
  },
  {
    "text": "to build something that you could actually get something done with I'm very excited about oh camel okay I know",
    "start": "2472300",
    "end": "2477339"
  },
  {
    "text": "that's very insulting to my to my haskellers out there but hey",
    "start": "2477339",
    "end": "2482859"
  },
  {
    "text": "you know what I mean you know what I mean all right a raise arrays are the",
    "start": "2482859",
    "end": "2488800"
  },
  {
    "text": "simplest mutable data structure in ocamel is the array arrays wait perhaps oh I added the word array somewhere in",
    "start": "2488800",
    "end": "2494440"
  },
  {
    "text": "there sorry sorry pick all right sorry Pig a raise in O camel are very similar",
    "start": "2494440",
    "end": "2500619"
  },
  {
    "text": "to arrays in other languages like C indexing starts at zero and acts oh good if it started at one I might just give",
    "start": "2500619",
    "end": "2506320"
  },
  {
    "text": "up right now and accessing or modifying an array element is a constant time operation arrays are more compact in",
    "start": "2506320",
    "end": "2512200"
  },
  {
    "text": "terms of memory utilization than most other data structures in ocamel including lists here's an example",
    "start": "2512200",
    "end": "2517599"
  },
  {
    "text": "oh you gotta do little barsies hell yeah girl let's do a bar okay",
    "start": "2517599",
    "end": "2523180"
  },
  {
    "text": "that is some this is some",
    "start": "2523180",
    "end": "2528060"
  },
  {
    "text": "this is some weird I'm not sure what I'm looking at",
    "start": "2531220",
    "end": "2537640"
  },
  {
    "text": "okay the dot eye syntax is used to refer to an element inside the array and the arrow syntaxes for modification",
    "start": "2537640",
    "end": "2545500"
  },
  {
    "text": "damn that's gonna be hard to remember okay that's mutable assignment shipped more Haskell to prod totally",
    "start": "2545500",
    "end": "2553000"
  },
  {
    "text": "academic sounds like such a Hassler comment well actually I did ship code to",
    "start": "2553000",
    "end": "2559780"
  },
  {
    "text": "production loser",
    "start": "2559780",
    "end": "2563920"
  },
  {
    "text": "happened happened okay uh the unit uh type we've seen as the",
    "start": "2565180",
    "end": "2571839"
  },
  {
    "text": "preceding code is interesting in that it only has one possible value this which means that the value of the type unit doesn't convey any information and so",
    "start": "2571839",
    "end": "2578680"
  },
  {
    "text": "generally is used as a placeholder thus we use unit for the return value I'm sorry dude I'm roasting chat sorry Chad",
    "start": "2578680",
    "end": "2585700"
  },
  {
    "text": "chat sorry okay for all my haskellers out there accept pick I think you guys",
    "start": "2585700",
    "end": "2590800"
  },
  {
    "text": "are wonderful and great nothing against you guys at all okay you",
    "start": "2590800",
    "end": "2597640"
  },
  {
    "text": "guys are just you're just you're just you're fantastic foreign",
    "start": "2597640",
    "end": "2605619"
  },
  {
    "text": "why does it keep becoming dark Karen but real talk Karen I need you to",
    "start": "2607540",
    "end": "2613300"
  },
  {
    "text": "immediately reach out to pick and send them yet another bottle",
    "start": "2613300",
    "end": "2618339"
  },
  {
    "text": "of my signature coconut oil pre-used you know what I mean he'll rub that all over his feet or some",
    "start": "2618339",
    "end": "2625119"
  },
  {
    "text": "some weird [ __ ] I don't know [Music]",
    "start": "2625119",
    "end": "2631820"
  },
  {
    "text": "pre-used coconut oil pretty excited about that huh it's actually my upcoming brand deal",
    "start": "2633880",
    "end": "2639900"
  },
  {
    "text": "upcoming brand deal what I do is I cover myself in coconut oil head to toe like thick okay we put",
    "start": "2639940",
    "end": "2647440"
  },
  {
    "text": "it on thick I I look like I look like Casper at this point okay that's how thick it is then what I do is I go stand",
    "start": "2647440",
    "end": "2653680"
  },
  {
    "text": "in a hot room and it drips down my body to my toes and I happen to be standing on a series of mason jars",
    "start": "2653680",
    "end": "2662280"
  },
  {
    "text": "okay full body full exposure oh what",
    "start": "2663280",
    "end": "2670839"
  },
  {
    "text": "what full oh yeah you get some sausage oil in there I'm just saying just saying just",
    "start": "2670839",
    "end": "2676720"
  },
  {
    "text": "saying like gamer girl bath water just like gamer girl bathwater or that other girl's fart jar air if you've seen that",
    "start": "2676720",
    "end": "2683740"
  },
  {
    "text": "one if you haven't seen that one you're a loser also girl who are selling fart jar air",
    "start": "2683740",
    "end": "2689500"
  },
  {
    "text": "uh also had to go to the hospital due to some problem my guess is that she was trying to eat highly fartable air food",
    "start": "2689500",
    "end": "2698339"
  },
  {
    "text": "internal combustion that was inappropriate you know what I mean Dusky thank you very much I appreciate it just join the",
    "start": "2698339",
    "end": "2704920"
  },
  {
    "text": "stream so glad I enjoyed a welcome welcome to the Stream",
    "start": "2704920",
    "end": "2710099"
  },
  {
    "text": "Prime coconut water absolutely okay all right here we go so let's let's get back in here okay uh mutable record Fields",
    "start": "2710380",
    "end": "2716260"
  },
  {
    "text": "the array is an important mutable data structure but it's not the only one records which are immutable by default can have some of their fields explicitly",
    "start": "2716260",
    "end": "2721780"
  },
  {
    "text": "declared as mutable oh cool explicitly individual Fields declared as mutable",
    "start": "2721780",
    "end": "2727300"
  },
  {
    "text": "love it here's an example of mutable data structures for storing running",
    "start": "2727300",
    "end": "2732359"
  },
  {
    "text": "statistical summary of a collection of numbers okay so you can go mutable some beautiful uh the fields in running some",
    "start": "2732359",
    "end": "2738760"
  },
  {
    "text": "are designed to be easy to extend incrementally and sufficient to compute means the standard deviation as shown in the following example though to compute",
    "start": "2738760",
    "end": "2744760"
  },
  {
    "text": "the standard deviation no one knows how that works okay variance summing and [ __ ] uh they are some equals",
    "start": "2744760",
    "end": "2752260"
  },
  {
    "text": "uh are some float are some samples okay",
    "start": "2752260",
    "end": "2757420"
  },
  {
    "text": "mean okay uh standard deviation equals all this stuff nobody knows what is going on there okay okay nobody knows",
    "start": "2757420",
    "end": "2764319"
  },
  {
    "text": "Okay so cool let's see we also need functions uh to create and update Running squares",
    "start": "2764319",
    "end": "2770800"
  },
  {
    "text": "okay create it does this one uh or running sums not squares okay uh update all right",
    "start": "2770800",
    "end": "2776980"
  },
  {
    "text": "okay then we do samples over oh interesting I've never liked code I've never liked white space aligned",
    "start": "2776980",
    "end": "2782440"
  },
  {
    "text": "assignments like this I've always found that gross do you guys find that gross I've always found that",
    "start": "2782440",
    "end": "2787900"
  },
  {
    "text": "gross right",
    "start": "2787900",
    "end": "2792940"
  },
  {
    "text": "I've never liked that I don't like to have to like read so far over right there's a lot of white space",
    "start": "2792940",
    "end": "2798700"
  },
  {
    "text": "and I get I I get all confused and stuff yeah like like and go it's actually so",
    "start": "2798700",
    "end": "2803740"
  },
  {
    "text": "one of the reasons that I hate it and go is that they make you do that and then I get really confused at my fields",
    "start": "2803740",
    "end": "2811720"
  },
  {
    "text": "yeah normally we don't do that no cam okay okay create return a running sum corresponding to an empty set and update",
    "start": "2811720",
    "end": "2818980"
  },
  {
    "text": "are some X changes so that must be what you're doing X must be",
    "start": "2818980",
    "end": "2824800"
  },
  {
    "text": "the sample right so we get one more sample the sum is this plus equals this the sum squared equals this plus okay",
    "start": "2824800",
    "end": "2830319"
  },
  {
    "text": "awesome uh cool note uh the use of single semicolons uh to sequence operations",
    "start": "2830319",
    "end": "2836920"
  },
  {
    "text": "when we're working purely functionally uh this wasn't necessarily necessary but when you start needing it you need to do",
    "start": "2836920",
    "end": "2843099"
  },
  {
    "text": "it with imperative code okay so there are single single semicolons are for like putting",
    "start": "2843099",
    "end": "2849940"
  },
  {
    "text": "statements but not ending the thing okay so this is the function it has",
    "start": "2849940",
    "end": "2856240"
  },
  {
    "text": "statement one statement two statement three and it's done okay okay",
    "start": "2856240",
    "end": "2862780"
  },
  {
    "text": "uh note the use of yes let's see here's an example to create an update in action uh note that this code uses list itter",
    "start": "2862780",
    "end": "2869619"
  },
  {
    "text": "which calls the function f okay cool all right so list itter go through here",
    "start": "2869619",
    "end": "2875200"
  },
  {
    "text": "function this update update update awesome love to see it warning the preceding algorithm is",
    "start": "2875200",
    "end": "2880780"
  },
  {
    "text": "numerically naive and has poor Precision in the uh in the presence of many values that cancel each other out the Wikipedia",
    "start": "2880780",
    "end": "2887319"
  },
  {
    "text": "article on algorithms for calculating variants provide much more detail okay refs we can create single mutable value",
    "start": "2887319",
    "end": "2893680"
  },
  {
    "text": "by uh using a ref love this okay a ref value or ref type comes dude this is so",
    "start": "2893680",
    "end": "2899680"
  },
  {
    "text": "good real talk like this is so good because this may not mean a lot to you but the",
    "start": "2899680",
    "end": "2906160"
  },
  {
    "text": "fact that they give you escape hatches to do the right like to do the better thing to make like",
    "start": "2906160",
    "end": "2912460"
  },
  {
    "text": "immutability isn't great immutability is a tool to simplify how you view the world",
    "start": "2912460",
    "end": "2919180"
  },
  {
    "text": "but being able to just be like [ __ ] let's just mutate everything in",
    "start": "2919180",
    "end": "2924220"
  },
  {
    "text": "this one special area because we just gotta go fast and they just give you everything I love this this is great",
    "start": "2924220",
    "end": "2929500"
  },
  {
    "text": "all right so cons this uh let x equals this it's a ref to contents uh contents",
    "start": "2929500",
    "end": "2935500"
  },
  {
    "text": "this this this all right",
    "start": "2935500",
    "end": "2938700"
  },
  {
    "text": "by using a ref the ref type comes predefined in the standard library but there's nothing really special about it okay good there's a handful of useful",
    "start": "2943960",
    "end": "2950079"
  },
  {
    "text": "functions and operators to find for refs to make more convenient work all right ref zero create a reference nice",
    "start": "2950079",
    "end": "2957720"
  },
  {
    "text": "get let's see it gets the contents of a ref oh",
    "start": "2958119",
    "end": "2964440"
  },
  {
    "text": "oh okay okay I see you I see you oh camel",
    "start": "2965859",
    "end": "2972940"
  },
  {
    "text": "strange strange syntax this is kind of strange syntax my brain has a really hard time with the bang",
    "start": "2972940",
    "end": "2978819"
  },
  {
    "text": "I'm not gonna lie to you I'm not gonna lie to you that guy you",
    "start": "2978819",
    "end": "2985000"
  },
  {
    "text": "know it hurts me we're banging refs out here and I'm not sure if that's legal or not there's nothing magical with these operation or operators either you can",
    "start": "2985000",
    "end": "2991060"
  },
  {
    "text": "completely re-implement the ref type and all these operations uh in just a few lines of code okay type a ref equals",
    "start": "2991060",
    "end": "2997660"
  },
  {
    "text": "mutable contents a type a uh ref equals mutable contents a cool uh let's see",
    "start": "2997660",
    "end": "3004800"
  },
  {
    "text": "ref let ref x equals contents X okay uh let bang oh oh oh",
    "start": "3004800",
    "end": "3012319"
  },
  {
    "text": "my goodness You just defined an operator okay love it",
    "start": "3012319",
    "end": "3018720"
  },
  {
    "text": "love it let colon equals RX equals contents go uh goes into this one oh my",
    "start": "3018720",
    "end": "3025800"
  },
  {
    "text": "goodness",
    "start": "3025800",
    "end": "3028400"
  },
  {
    "text": "this is cool are you sure you love it I think I love it I think I love it other than the fact",
    "start": "3032819",
    "end": "3039060"
  },
  {
    "text": "that I hate operator overloading",
    "start": "3039060",
    "end": "3042680"
  },
  {
    "text": "uh the tick a before the ref indicates a ref type is polymorphic in the same way that lists are polymorphic meaning it",
    "start": "3046140",
    "end": "3051780"
  },
  {
    "text": "can contain values of any type but uh but it's of a specific type yeah uh just",
    "start": "3051780",
    "end": "3056880"
  },
  {
    "text": "like any and go which is cool I like that they used any properly in Guild uh the parenthesis around bang and that are",
    "start": "3056880",
    "end": "3063540"
  },
  {
    "text": "needed because these operators rather than ordinary functions okay even though a ref is just another record",
    "start": "3063540",
    "end": "3068819"
  },
  {
    "text": "type it's important because it's the standard way of simulating the traditional mutable variables you'll find in most languages for example we",
    "start": "3068819",
    "end": "3075420"
  },
  {
    "text": "can sum over elements of a list imperatively by calling list itter to call a simple function on every okay",
    "start": "3075420",
    "end": "3081780"
  },
  {
    "text": "let's see it some list let some ref 0 in this list it or",
    "start": "3081780",
    "end": "3089160"
  },
  {
    "text": "function okay so this would be like avoiding a",
    "start": "3089160",
    "end": "3094980"
  },
  {
    "text": "reduce right is this what you do to avoid or reduce",
    "start": "3094980",
    "end": "3099680"
  },
  {
    "text": "right so I could make the 8 is equivalent to D",
    "start": "3101160",
    "end": "3106559"
  },
  {
    "text": "operator very excited",
    "start": "3106559",
    "end": "3111800"
  },
  {
    "text": "very excited we're going to make the longest eight is equivalent to D operator in in Haskell we're gonna do it",
    "start": "3113460",
    "end": "3121200"
  },
  {
    "text": "suddenly rust seems easy uh well we'll see nesting uh let's with",
    "start": "3121200",
    "end": "3127079"
  },
  {
    "text": "let and in yep the definition of sum in the above example was our first use of let to define a new variable within the",
    "start": "3127079",
    "end": "3133020"
  },
  {
    "text": "body of a function a let paired within can be used to introduce new bindings within any local scope yep including a",
    "start": "3133020",
    "end": "3139079"
  },
  {
    "text": "function body the N marks the beginning of the scope uh yep yep yep yep this makes sense so this only lasts until",
    "start": "3139079",
    "end": "3144780"
  },
  {
    "text": "this thing right here so Z only exists for this scope which is cool note that",
    "start": "3144780",
    "end": "3151740"
  },
  {
    "text": "the scope of the let binding is terminated by the double semicolon I love this this is cool I love being able to scope things even smaller",
    "start": "3151740",
    "end": "3159059"
  },
  {
    "text": "than say a function it's cool it's cool thing",
    "start": "3159059",
    "end": "3164599"
  },
  {
    "text": "we can also have multiple lead bindings in a row yep so they only exist within this region I think that that is super cool",
    "start": "3165059",
    "end": "3171180"
  },
  {
    "text": "does the new syntax gets captured by the LSP I assume that the LSP is good oh camel seems to have really good tooling",
    "start": "3171180",
    "end": "3177359"
  },
  {
    "text": "as far as I can tell it's a really good tooling four and while Loops okmul also supports traditional imperative control flow constructs like foreign wild okay",
    "start": "3177359",
    "end": "3183900"
  },
  {
    "text": "awesome four length for I equals zero two length minus two do do this thing",
    "start": "3183900",
    "end": "3189119"
  },
  {
    "text": "done okay very bashy uh permute array",
    "start": "3189119",
    "end": "3195839"
  },
  {
    "text": "let length and length of array in this four length this random in this",
    "start": "3195839",
    "end": "3201500"
  },
  {
    "text": "I see what happened here okay cool cool has someone made uh an O camel case joke",
    "start": "3209280",
    "end": "3215579"
  },
  {
    "text": "yet I don't think so here's an example of this code okay let's see hold on uh this is our first use of random module uh note that random",
    "start": "3215579",
    "end": "3222540"
  },
  {
    "text": "starts with the fixed seed yeah hey good luck using random numbers and in Rust uh but you can call random self and it",
    "start": "3222540",
    "end": "3229740"
  },
  {
    "text": "to choose a new seed okay from the syntactic perspective you should note the keywords that distinguish a for Loop",
    "start": "3229740",
    "end": "3236099"
  },
  {
    "text": "and a four two do and done here's an example code okay let's see here we go our array init 20 function f i for I",
    "start": "3236099",
    "end": "3245220"
  },
  {
    "text": "okay so this must be a size giving an array size 20. yep there it goes size 20. oh beautiful it can do us oh I love",
    "start": "3245220",
    "end": "3253260"
  },
  {
    "text": "that and pseudorandom actually Dev random actually",
    "start": "3253260",
    "end": "3260300"
  },
  {
    "text": "uh ocam also supports while Loops okay while position is less than array a",
    "start": "3260640",
    "end": "3266940"
  },
  {
    "text": "length array and array dot position is greater than or equal to zero",
    "start": "3266940",
    "end": "3272880"
  },
  {
    "text": "okay okay so this would be an array of an array of references",
    "start": "3272880",
    "end": "3278819"
  },
  {
    "text": "no no no no never mind positions the reference yeah that's right that's right that's right so",
    "start": "3278819",
    "end": "3284400"
  },
  {
    "text": "okay cool if position is equal to the array length",
    "start": "3284400",
    "end": "3289440"
  },
  {
    "text": "then none else sum okay perfect fine first nice okay this is cool I",
    "start": "3289440",
    "end": "3295619"
  },
  {
    "text": "understand this I can read oh camel I know Kung Fu",
    "start": "3295619",
    "end": "3302420"
  },
  {
    "text": "all right as a side note uh the preceding code takes advantage of the fact that uh that and and O camels and",
    "start": "3304200",
    "end": "3309900"
  },
  {
    "text": "operator short circuits in particular an expression with uh yep will only evaluate expression one uh if a",
    "start": "3309900",
    "end": "3316440"
  },
  {
    "text": "expression one yep yep this is just true in pretty much all languages uh indeed we can trigger the out of bounds error by rewriting our function",
    "start": "3316440",
    "end": "3322619"
  },
  {
    "text": "to avoid some uh short circuiting",
    "start": "3322619",
    "end": "3326480"
  },
  {
    "text": "welcome to Costco yeah we don't have to worry about that hey welcome to Costco I love you thank you very much pirate muncher",
    "start": "3327780",
    "end": "3336440"
  },
  {
    "text": "let's see that Kung Fu King oh I want to keep on going okay a complete program okay okay okay okay okay",
    "start": "3336900",
    "end": "3343619"
  },
  {
    "text": "all right let's try this thing out so far we've played with the basic features of the language via YouTube now",
    "start": "3343619",
    "end": "3348720"
  },
  {
    "text": "we'll show how to create a simple Standalone program in particular we'll create a program that sums up a list of numbers read in from the standard uh",
    "start": "3348720",
    "end": "3354960"
  },
  {
    "text": "input here's the code I really and which you can save in a file call so",
    "start": "3354960",
    "end": "3360119"
  },
  {
    "text": "I really wish they would uh walk you through right here so if anyone's listening because I know some people on Twitter were talking up that were",
    "start": "3360119",
    "end": "3366180"
  },
  {
    "text": "actually a part of making this we're saying hey they appreciate me going through this but this right here I find",
    "start": "3366180",
    "end": "3371640"
  },
  {
    "text": "very very important I wish they would have just showed you how to create the project here because I honestly don't even know where to put anything right",
    "start": "3371640",
    "end": "3378059"
  },
  {
    "text": "like where the hell do I put some ml I don't even know how do I how do I I",
    "start": "3378059",
    "end": "3383460"
  },
  {
    "text": "don't know how to create a project yet you know what I mean all right",
    "start": "3383460",
    "end": "3389339"
  },
  {
    "text": "ah crap all right all right so we're here I assume okay",
    "start": "3389339",
    "end": "3396319"
  },
  {
    "text": "what did I call my thing so this is what I don't know it's called hello world and I assume lib Dune says there's a library",
    "start": "3396839",
    "end": "3402480"
  },
  {
    "text": "named hello world so we don't want that right we want an executable is that what we want so would I go like this",
    "start": "3402480",
    "end": "3408960"
  },
  {
    "text": "so when I go to would I go here can I add more can I say an executable",
    "start": "3408960",
    "end": "3414359"
  },
  {
    "text": "it should be named some see I don't even know sum.ml is that is",
    "start": "3414359",
    "end": "3420599"
  },
  {
    "text": "that what they're asking me to do I have too many neovins open let's close",
    "start": "3420599",
    "end": "3425819"
  },
  {
    "text": "this one uh Dune build no module sum is used uh in several",
    "start": "3425819",
    "end": "3430980"
  },
  {
    "text": "stanzas okay let's see uh to fix this error you must",
    "start": "3430980",
    "end": "3437040"
  },
  {
    "text": "specify an explicit modules field in every Library executable and executables a stanza in this Dune file note that",
    "start": "3437040",
    "end": "3443700"
  },
  {
    "text": "each module cannot appear in more than one modules field it must belong to a single library or executable I don't",
    "start": "3443700",
    "end": "3449160"
  },
  {
    "text": "even know that I I don't even know what that means okay what the hell does that even mean",
    "start": "3449160",
    "end": "3455520"
  },
  {
    "text": "what the hell is Maine why is it in bin so that's another thing I don't",
    "start": "3455520",
    "end": "3461520"
  },
  {
    "text": "understand is how to like organize an O camel project right like I don't even know how to do a Hello World yet",
    "start": "3461520",
    "end": "3467819"
  },
  {
    "text": "that's how stupid I am so we're gonna go like this personal welcome to Costco I love you thank you very much appreciate",
    "start": "3467819",
    "end": "3474720"
  },
  {
    "text": "that one dude one live executable maybe I don't know I don't know yet okay we're gonna go",
    "start": "3474720",
    "end": "3480359"
  },
  {
    "text": "like this Dune a net project we're gonna do a project and we're gonna call this uh some some me",
    "start": "3480359",
    "end": "3487319"
  },
  {
    "text": "Daddy",
    "start": "3487319",
    "end": "3489500"
  },
  {
    "text": "all right so this has it does have it's a library I don't understand that",
    "start": "3493380",
    "end": "3498900"
  },
  {
    "text": "do I say executable if I wanted an executable docs explain it lad while I'm just",
    "start": "3498900",
    "end": "3504660"
  },
  {
    "text": "trying to go through this okay dog docs explain it son I'm going",
    "start": "3504660",
    "end": "3512099"
  },
  {
    "text": "through a tutorial okay a tutorial use the Bender after a all executables are",
    "start": "3512099",
    "end": "3517559"
  },
  {
    "text": "in the bin oh really",
    "start": "3517559",
    "end": "3520520"
  },
  {
    "text": "let's see on uh",
    "start": "3522780",
    "end": "3525740"
  },
  {
    "text": "first being the right of Dune project file specific to the root directory see you should start with this first",
    "start": "3529260",
    "end": "3535280"
  },
  {
    "text": "nice okay so cool okay so let's let's go to that last so let's try let's try to do this I guess without doing a dune",
    "start": "3536220",
    "end": "3543119"
  },
  {
    "text": "project or I'm RF Summit Daddy uh make her some me Daddy uh CD some me",
    "start": "3543119",
    "end": "3551460"
  },
  {
    "text": "Daddy all right so I'm gonna do this we need to create a dune project file uh",
    "start": "3551460",
    "end": "3557220"
  },
  {
    "text": "Dune a project file and that is looks like some sort of lispy scheme Lang doon",
    "start": "3557220",
    "end": "3563339"
  },
  {
    "text": "uh 2.9 okay and what's the other one name",
    "start": "3563339",
    "end": "3570500"
  },
  {
    "text": "rwo example what the hell does that even mean real world oh camel got it first try I'm a genius I'm an effing genius I",
    "start": "3570500",
    "end": "3578280"
  },
  {
    "text": "am an effing genius okay then we need to write a dune file to spec uh to specify the specific thing being built note that",
    "start": "3578280",
    "end": "3584880"
  },
  {
    "text": "a single project will just have one Dune project file but potentially many subdirectories with different Dune files",
    "start": "3584880",
    "end": "3591000"
  },
  {
    "text": "okay in this case however we just have one executable name libraries oh fun",
    "start": "3591000",
    "end": "3598140"
  },
  {
    "text": "okay so I assume I can just do a dune right here then",
    "start": "3598140",
    "end": "3603420"
  },
  {
    "text": "all right there we go and I assume this also means I do a sum ml right",
    "start": "3603420",
    "end": "3609440"
  },
  {
    "text": "now we invoke the build that's it let's see all we need to specify is the",
    "start": "3609660",
    "end": "3615180"
  },
  {
    "text": "fact that we're building an executable rather than a library the name of the executable in the libraries we depend on",
    "start": "3615180",
    "end": "3620520"
  },
  {
    "text": "cool cool uh so I'd go Dune build okay so I did build it",
    "start": "3620520",
    "end": "3626880"
  },
  {
    "text": "okay so there we go so we have that so let's go back up here so how do I do that so I I guess we're going open base",
    "start": "3626880",
    "end": "3632280"
  },
  {
    "text": "and we're doing do I do no we don't do that afterwards",
    "start": "3632280",
    "end": "3637099"
  },
  {
    "text": "open standard lib oh we're pwning Libs now boys we're pwning the libs well",
    "start": "3638700",
    "end": "3644280"
  },
  {
    "text": "what's this",
    "start": "3644280",
    "end": "3646760"
  },
  {
    "text": "see this okay so I don't quite get this one",
    "start": "3655079",
    "end": "3659960"
  },
  {
    "text": "we'll come back to that we'll come back to looking at that welcome I know what's going on I love you the thing I don't",
    "start": "3660900",
    "end": "3666480"
  },
  {
    "text": "know what to do is I need to go to Mason because I I I'm just using Mason right now I'm trying a year of Mason where I",
    "start": "3666480",
    "end": "3672180"
  },
  {
    "text": "just I I just install this one this one obviously takes the uh this one obviously takes just whatever",
    "start": "3672180",
    "end": "3677220"
  },
  {
    "text": "the latest one is and by taking the latest one I'm getting something that isn't for 4 14 I'm getting 5-0",
    "start": "3677220",
    "end": "3684540"
  },
  {
    "text": "right and so that means I need to somehow specify somewhere this is the version I need",
    "start": "3684540",
    "end": "3690720"
  },
  {
    "text": "you know what I mean I don't use the O camel yeah see that's the problem is I that's why I got it",
    "start": "3690720",
    "end": "3697500"
  },
  {
    "text": "we'll look at it later okay I'm not too worried about that let's just get my stuff okay so so we're gonna do some sort of uh let",
    "start": "3697500",
    "end": "3703980"
  },
  {
    "text": "wreck read in stream right equals right so let's see what we've got we've got to have an accumulator right oh we have an",
    "start": "3703980",
    "end": "3709380"
  },
  {
    "text": "accumulator interesting okay is that a ref accumulator no it's not a ref let's see let line equals in Channel input",
    "start": "3709380",
    "end": "3716460"
  },
  {
    "text": "line in Channel standard end okay that seems nice so we go like this let line equals",
    "start": "3716460",
    "end": "3723599"
  },
  {
    "text": "uh input Channel uh input line yes input line okay yeah",
    "start": "3723599",
    "end": "3730440"
  },
  {
    "text": "yeah and then what do we put here okay okay so it is this thing that is the one",
    "start": "3730440",
    "end": "3735480"
  },
  {
    "text": "we're referring to okay nice thank you copilot for being correct what do we do here we're going to match line with this",
    "start": "3735480",
    "end": "3740940"
  },
  {
    "text": "either we have something or we have nothing",
    "start": "3740940",
    "end": "3746180"
  },
  {
    "text": "so we're gonna go read and accumulate oh we're going to call ourselves with the new one",
    "start": "3746460",
    "end": "3752299"
  },
  {
    "text": "oh nice okay so we either have none which just Returns the accumulator",
    "start": "3752299",
    "end": "3757980"
  },
  {
    "text": "or we have is it some is it some X yep some X and this one we're gonna keep on doing the",
    "start": "3757980",
    "end": "3764640"
  },
  {
    "text": "whole read in stream yep yep yep yep yep except for we're not going to add it as a list we're going to want to do uh",
    "start": "3764640",
    "end": "3771119"
  },
  {
    "text": "float let's see we're going to want to do ecume plus as a float right we're plusing as a float and then we're gonna",
    "start": "3771119",
    "end": "3777119"
  },
  {
    "text": "want the float uh let's see of string X",
    "start": "3777119",
    "end": "3783599"
  },
  {
    "text": "yeah I think that's right then do I just do we just hit it right there as the ending oh you don't even",
    "start": "3783599",
    "end": "3789900"
  },
  {
    "text": "need to do the double semicolon interesting I kind of like the devil selling colon you know what I mean all right so then we have a no Function One",
    "start": "3789900",
    "end": "3797400"
  },
  {
    "text": "so we're going to do this then we're going to read and accumulate zero okay",
    "start": "3797400",
    "end": "3802619"
  },
  {
    "text": "interesting why do we have to do a function here so why do we have to do a function here I don't understand why we do a function",
    "start": "3802619",
    "end": "3808920"
  },
  {
    "text": "why can't we just go this",
    "start": "3808920",
    "end": "3813298"
  },
  {
    "text": "right why can't we just do that like why do we have to do a function of nothing and",
    "start": "3814680",
    "end": "3821040"
  },
  {
    "text": "and who invokes that I don't get that what does that mean",
    "start": "3821040",
    "end": "3828020"
  },
  {
    "text": "this is not a function oh let is like a main is like the main function oh",
    "start": "3828059",
    "end": "3835440"
  },
  {
    "text": "it's the entry point okay",
    "start": "3838440",
    "end": "3842298"
  },
  {
    "text": "okay so why didn't they just use Main I'm sure that's a stupid question you",
    "start": "3845339",
    "end": "3850559"
  },
  {
    "text": "don't have to answer that question",
    "start": "3850559",
    "end": "3853520"
  },
  {
    "text": "you're pattern matching the uh your pattern matching the two Normie I",
    "start": "3857460",
    "end": "3863940"
  },
  {
    "text": "don't know what that means I honestly don't know what that means yet but okay so if I put this somewhere this execute so",
    "start": "3863940",
    "end": "3870960"
  },
  {
    "text": "so why would people do that versus this like why not just that",
    "start": "3870960",
    "end": "3876660"
  },
  {
    "text": "what's the point of doing that all right Unbound module input channel",
    "start": "3876660",
    "end": "3883920"
  },
  {
    "text": "do you mean in Channel oh did I did I write that wrong",
    "start": "3883920",
    "end": "3890119"
  },
  {
    "text": "is it in channel oh it is in Channel isn't it all right printf Unbound value printf oh man is this that",
    "start": "3890220",
    "end": "3897180"
  },
  {
    "text": "weird thing I feel like there's there's like something weird about all this",
    "start": "3897180",
    "end": "3902579"
  },
  {
    "text": "I feel like I've been here before but I don't know why you just got a Netflix ad you wanted us",
    "start": "3902579",
    "end": "3908520"
  },
  {
    "text": "IO oh I did oh okay",
    "start": "3908520",
    "end": "3914099"
  },
  {
    "text": "okay dude can you just exactly do what do you do how do you run this how do you",
    "start": "3914099",
    "end": "3919920"
  },
  {
    "text": "run the son of a [ __ ] doing exactly why do I have to have an exe Dune build some",
    "start": "3919920",
    "end": "3925200"
  },
  {
    "text": "do I can I just say some damn it I have to have a EXE",
    "start": "3925200",
    "end": "3932660"
  },
  {
    "text": "okay so there is that one so then do I just do Dune run to run it do I go uh",
    "start": "3937079",
    "end": "3944819"
  },
  {
    "text": "build default sum EXE 45",
    "start": "3944819",
    "end": "3951780"
  },
  {
    "text": "it was 69. okay you don't need that well then why didn't",
    "start": "3963000",
    "end": "3968339"
  },
  {
    "text": "it work tough guy 45 24 kill the program okay well how the",
    "start": "3968339",
    "end": "3975480"
  },
  {
    "text": "hell do I how do I give it a num how do I give it none I'm trying to end this I'm trying",
    "start": "3975480",
    "end": "3981780"
  },
  {
    "text": "to end this thing oh oh we probably have to give it an end",
    "start": "3981780",
    "end": "3988500"
  },
  {
    "text": "to file so I'm going to want to go like this uh I'm going to want to go uh Vim nums uh 45",
    "start": "3988500",
    "end": "3996319"
  },
  {
    "text": "don't give it that new line you know what I'm talking about and we'll just go cat numbs pipe that",
    "start": "3998280",
    "end": "4005559"
  },
  {
    "text": "oh control D is into file yeah of course that makes sense gosh",
    "start": "4008599",
    "end": "4014180"
  },
  {
    "text": "genius I always forget I always forget about that uh 45 24.",
    "start": "4014180",
    "end": "4021380"
  },
  {
    "text": "got him okay my first program rookie mistake just straight rookie compiling",
    "start": "4021619",
    "end": "4027920"
  },
  {
    "text": "and running okay yep we've done all this all right Where'd I go from here that is our guided tour there are plenty of",
    "start": "4027920",
    "end": "4033319"
  },
  {
    "text": "features left and lots of details to explain but we hope you now have a sense of what to expect from oh camel I feel like I I need uh today I learned control",
    "start": "4033319",
    "end": "4040460"
  },
  {
    "text": "Deeds okay I forgot about the D but you got to know about the D um well this was great",
    "start": "4040460",
    "end": "4047000"
  },
  {
    "text": "I feel like I'm in a position now where I want to learn more oh camel do you know what I mean",
    "start": "4047000",
    "end": "4053740"
  }
]