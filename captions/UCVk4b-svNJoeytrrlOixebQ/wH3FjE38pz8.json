[
  {
    "text": "oh camel now I know pick is gonna die a little bit that this isn't Haskell so can you show me how to use not Haskell",
    "start": "0",
    "end": "6420"
  },
  {
    "text": "here yeah so we'll we'll start in lib which is where all the interesting stuff is right now",
    "start": "6420",
    "end": "11880"
  },
  {
    "text": "um I have I'm a little farther because I wrote some of the other parts of this too and I've been pushing them up but we can just go to token okay let's start",
    "start": "11880",
    "end": "17520"
  },
  {
    "text": "with token first so you got just like the kind of types like enums that you expect to have you know for when you've",
    "start": "17520",
    "end": "24300"
  },
  {
    "text": "got uh in Rust and the enums can all hold different data types so that's what that of is right that of is just saying",
    "start": "24300",
    "end": "29880"
  },
  {
    "text": "hey I'm I'm an enum with this inner type this right and so I've got a string inside for these things and then the other ones",
    "start": "29880",
    "end": "36000"
  },
  {
    "text": "you don't really you don't need to keep around charged or anything like you know what I mean like if you have real data",
    "start": "36000",
    "end": "41219"
  },
  {
    "text": "types you just pattern match on them and then it's good yep that makes sense okay then you have a little look up right here which does effectively a a quick",
    "start": "41219",
    "end": "49020"
  },
  {
    "text": "look up right here right so it just simply goes okay uh here's all the matches that are keywords return so you",
    "start": "49020",
    "end": "55260"
  },
  {
    "text": "don't even have to have a map you can just have this so you don't even have to compute a hash you're just doing small string checks which is probably",
    "start": "55260",
    "end": "61559"
  },
  {
    "text": "faster than doing a map lookup but it's going to be fast because like the compiler is good for this right so yeah",
    "start": "61559",
    "end": "67619"
  },
  {
    "text": "it'll look it'll be it'll be really fast for this all right can you explain this really quickly driving",
    "start": "67619",
    "end": "74360"
  },
  {
    "text": "that's basically macros okay so that takes the previous item is my guess yep",
    "start": "74360",
    "end": "79619"
  },
  {
    "text": "okay and this allows you to print it and this allows you to call equal sign on it or yeah so they generate new functions",
    "start": "79619",
    "end": "86880"
  },
  {
    "text": "like so they'll generate a show function in this uh namespace there's like a show",
    "start": "86880",
    "end": "92280"
  },
  {
    "text": "function which returns a string and then there's like a pretty printer uh function which you can use to pass to",
    "start": "92280",
    "end": "97740"
  },
  {
    "text": "like four matters okay that's pretty cool okay okay what's the next thing",
    "start": "97740",
    "end": "104100"
  },
  {
    "text": "um so one thing that's cool we'll I'll just show you quick in the Alexa dot mli so these are interface files oh so this",
    "start": "104100",
    "end": "110340"
  },
  {
    "text": "tells you what uh like the public interface is for relaxer",
    "start": "110340",
    "end": "116840"
  },
  {
    "text": "it's kind of like a header uh except you it is in some ways but you don't have to",
    "start": "118820",
    "end": "124500"
  },
  {
    "text": "Define average I guess you don't have to either for like a header file yeah but you can have a bunch of functions and nothing in the actual implementation",
    "start": "124500",
    "end": "130979"
  },
  {
    "text": "file cares that it's not in here it just has to match this and like it gets type checked and everything oh nice okay so",
    "start": "130979",
    "end": "137099"
  },
  {
    "text": "you can give it a light type checking of the file but the file itself can be vastly different as long as it contains",
    "start": "137099",
    "end": "142440"
  },
  {
    "text": "this this is the subset of what is contained in the file and does that mean when you support it in you only see the",
    "start": "142440",
    "end": "147720"
  },
  {
    "text": "subset yeah so yeah so you can't access anything else the other cool thing is like see how it's just type T you can",
    "start": "147720",
    "end": "154500"
  },
  {
    "text": "actually have a t type with like the implementation in the actual dot ml file okay but like this makes it so you can't",
    "start": "154500",
    "end": "161040"
  },
  {
    "text": "construct one on your own like the only way to construct the type the only thing that will pass the type",
    "start": "161040",
    "end": "166379"
  },
  {
    "text": "tracker and allow it to be compiled is calling a knit which returns a t so",
    "start": "166379",
    "end": "171720"
  },
  {
    "text": "there's no other way to get a t right which is this type and then like the next token thing below this is the",
    "start": "171720",
    "end": "178200"
  },
  {
    "text": "only thing you can do with this type which is called Next token on it and you get back a new parser and optionally a",
    "start": "178200",
    "end": "184920"
  },
  {
    "text": "token if if it's done so like the star is denoting like a tuple okay so quick question here so how do I read this so I",
    "start": "184920",
    "end": "192000"
  },
  {
    "text": "have a value a knit string so does that mean you've attached the init function to string",
    "start": "192000",
    "end": "198300"
  },
  {
    "text": "so a knit so it's saying like name is on the left side of the colon and then the right side is the type definition",
    "start": "198300",
    "end": "204239"
  },
  {
    "text": "so the type definition is a function that takes a string and returns a t okay okay I can see that okay so this one so",
    "start": "204239",
    "end": "210060"
  },
  {
    "text": "the next one is a function that takes a t and returns a tuple of t and optionally a token",
    "start": "210060",
    "end": "216599"
  },
  {
    "text": "interesting okay and then what's this last one that that one is like there's this kind you'll see this if you do it a bit more",
    "start": "216599",
    "end": "223379"
  },
  {
    "text": "with okayable but basically this four it's a formatter style thing that you use to pass into like the way that you",
    "start": "223379",
    "end": "229440"
  },
  {
    "text": "print values so this one's just for pretty printing stuff you can use it to pretty print um okay so now we go to the ml so now",
    "start": "229440",
    "end": "236519"
  },
  {
    "text": "you see we have a type T and we actually say what's inside no one can access those those are all private these are",
    "start": "236519",
    "end": "242220"
  },
  {
    "text": "because I did type T I could show it if I wanted but I didn't what what is that is that like the is that like",
    "start": "242220",
    "end": "248280"
  },
  {
    "text": "effectively the new line comma that you see an old node code uh you can put them anywhere you want like uh the the like",
    "start": "248280",
    "end": "256260"
  },
  {
    "text": "formatter style that I have it just does this because I like them to be aligned so I don't know that's just the way that",
    "start": "256260",
    "end": "262620"
  },
  {
    "text": "I have it okay okay if the string is empty we just return",
    "start": "262620",
    "end": "269580"
  },
  {
    "text": "back if this is empty then we return out effectively a input position zero charge",
    "start": "269580",
    "end": "276120"
  },
  {
    "text": "none else we do input position zero Char is sum",
    "start": "276120",
    "end": "282780"
  },
  {
    "text": "string input first character yeah so you're effectively doing a read rechar",
    "start": "282780",
    "end": "289259"
  },
  {
    "text": "right here right I did mine slightly different because I didn't I wanted to see if I could do without read position I've done",
    "start": "289259",
    "end": "295680"
  },
  {
    "text": "this already like twice right I didn't really get why we keep around read position because always just position plus one yeah yeah so I just I wanted to",
    "start": "295680",
    "end": "303600"
  },
  {
    "text": "see if I could do it without that and that's basically like just the the way um people are wondering about the double",
    "start": "303600",
    "end": "309479"
  },
  {
    "text": "semicolon you don't have to put these there's a few formatting cells that I just like from what I've seen so far",
    "start": "309479",
    "end": "315479"
  },
  {
    "text": "um and like the auto formatter does it for me I don't write two semicolons but it like clearly separates when a function starts and ends okay so that",
    "start": "315479",
    "end": "322139"
  },
  {
    "text": "you know that you're completely done with this function right because yeah because there's no Square thing yeah",
    "start": "322139",
    "end": "327479"
  },
  {
    "text": "right so I find it helpful because then it's like super obvious that okay sweet this one's all done now I'm gonna start",
    "start": "327479",
    "end": "334740"
  },
  {
    "text": "the next one right it's just like visually clear yeah I don't need that I find I do say",
    "start": "334740",
    "end": "340259"
  },
  {
    "text": "that the one thing I find right away with this language is that there's not a lot of symbols and it it actually makes it a little hard for me to kind of put",
    "start": "340259",
    "end": "346080"
  },
  {
    "text": "myself in the right headspace yeah it does take a little bit of time to like get to figure out what exactly like is",
    "start": "346080",
    "end": "353280"
  },
  {
    "text": "happening at first because there's some stuff that's quite different like no parentheses and things like that but then you start to just like especially",
    "start": "353280",
    "end": "360840"
  },
  {
    "text": "with a good syntax highlight anything you just like know you see like oh I have my color for my function it's like",
    "start": "360840",
    "end": "366120"
  },
  {
    "text": "super obvious and then you get you get going on right okay so a couple questions here Rec stands for recursive",
    "start": "366120",
    "end": "372360"
  },
  {
    "text": "yep you have to Define when a function is recursive yeah interesting what's in",
    "start": "372360",
    "end": "378840"
  },
  {
    "text": "uh so let statements must be followed by like basically an expression at some",
    "start": "378840",
    "end": "385680"
  },
  {
    "text": "point so you can't just like Define a variable and have it hang into nowhere without it so like let statements let",
    "start": "385680",
    "end": "392340"
  },
  {
    "text": "you you're basically like creating a new variable in the following scope it like makes a scope further down",
    "start": "392340",
    "end": "398039"
  },
  {
    "text": "you can think of the in basically as like a semicolon in most languages",
    "start": "398039",
    "end": "403319"
  },
  {
    "text": "so you're saying like let parser equals this in this next expression let open token basically just like um",
    "start": "403319",
    "end": "409740"
  },
  {
    "text": "it moves that namespace inside it's like include or like use in Rust",
    "start": "409740",
    "end": "415380"
  },
  {
    "text": "yes that's that's a better way to say it Antonio is right it creates an immutable binding to an identifier because they're",
    "start": "415380",
    "end": "421800"
  },
  {
    "text": "not variables you can't change them they're identifiers right so everything's immutable by default",
    "start": "421800",
    "end": "429919"
  },
  {
    "text": "she's stupid for oh camel no no no you got it you just remember that in is just a semicolon then it's",
    "start": "432479",
    "end": "439020"
  },
  {
    "text": "fine it's not a semicolon [Laughter] because you'd been typing in I can run",
    "start": "439020",
    "end": "445620"
  },
  {
    "text": "your function if that's if it's just a semicolon I can write a I can write a Vim plug-in to change all the ins to",
    "start": "445620",
    "end": "451800"
  },
  {
    "text": "semicolons for you and it'll look the same the prime is stupid oh camel plugin just",
    "start": "451800",
    "end": "459419"
  },
  {
    "text": "to make me feel safe and warm okay okay so toggle Prime mode on and off okay so really what they're saying is this this",
    "start": "459419",
    "end": "466440"
  },
  {
    "text": "this pointer to a value will exist for the the duration of the scope that it's in",
    "start": "466440",
    "end": "472259"
  },
  {
    "text": "which is this function parser yeah basically yeah okay so yeah explain to me why you have next token which",
    "start": "472259",
    "end": "478860"
  },
  {
    "text": "takes in a parser and then you reassign you Shadow parser by saying skip white",
    "start": "478860",
    "end": "484199"
  },
  {
    "text": "space which takes in a parser and then returns back out the parser yeah so the parser never gets changed like each",
    "start": "484199",
    "end": "491160"
  },
  {
    "text": "parser is immutable I wrote it in a style just to explore like what it was what it was doing so if you go back to",
    "start": "491160",
    "end": "496620"
  },
  {
    "text": "the type at the top of the file type D like is the parser at the very top if I wanted to we could have changed",
    "start": "496620",
    "end": "503039"
  },
  {
    "text": "this to make position and Char like on the ch c h we could have said that those",
    "start": "503039",
    "end": "508800"
  },
  {
    "text": "are mutable so like you literally put mutable in front of them and then that tells you that those fields are mutable then you'd be able to plus equal them",
    "start": "508800",
    "end": "515700"
  },
  {
    "text": "and all that but you decided to just like can you do this fully immutably right I just wanted to see right because",
    "start": "515700",
    "end": "521219"
  },
  {
    "text": "like that's in general like more of the style that you would do because it lets you",
    "start": "521219",
    "end": "526980"
  },
  {
    "text": "um it lets you reason very clearly about the functions functions always take in a parser if they can change the parser",
    "start": "526980",
    "end": "532560"
  },
  {
    "text": "they return a new parser if you don't use the results of a function that's an error",
    "start": "532560",
    "end": "538440"
  },
  {
    "text": "so you can't just like call Skip white space on the first line there and like not do anything with the result you have",
    "start": "538440",
    "end": "544680"
  },
  {
    "text": "to at least you would have to do something like that underscore is it one of those yeah you could do last",
    "start": "544680",
    "end": "549779"
  },
  {
    "text": "underscore okay okay oh you have to do let underscore yep wow you could say that okay",
    "start": "549779",
    "end": "555959"
  },
  {
    "text": "and then it would be an error because you're not doing anything right but like uh I just wanted to see if you could I",
    "start": "555959",
    "end": "562620"
  },
  {
    "text": "think you would write this in a different style maybe if you were more focused on doing it like immutably like",
    "start": "562620",
    "end": "568140"
  },
  {
    "text": "there might be some things to make it slightly easier okay but but I was just seeing how I could translate it and see",
    "start": "568140",
    "end": "573720"
  },
  {
    "text": "if it was possible that I could still get the same results and write like a completely immutable parser so every function is a pure function right like",
    "start": "573720",
    "end": "580200"
  },
  {
    "text": "if you give a parser and you call next token with like a certain state it will always return them that the same next",
    "start": "580200",
    "end": "586620"
  },
  {
    "text": "parser every time okay so in some sense it's a little bit easier to reason about because you never there is no such thing",
    "start": "586620",
    "end": "593279"
  },
  {
    "text": "as state there's just arguments in in the way that I'm writing it you can write it more like procedural style",
    "start": "593279",
    "end": "599640"
  },
  {
    "text": "where you're mutating the parser in place um but the like the compiler sees what",
    "start": "599640",
    "end": "605220"
  },
  {
    "text": "you're doing here where you're taking a parser and returning the parser and then now that I'm shadowing it it's",
    "start": "605220",
    "end": "610320"
  },
  {
    "text": "disappearing and as far as I can tell the parser like does or the compiler does smart things with that like make",
    "start": "610320",
    "end": "616920"
  },
  {
    "text": "sure that it's not uh just like copying everything all the time okay open token in yep so when we go back if",
    "start": "616920",
    "end": "624839"
  },
  {
    "text": "you like we're back in the token.ml file which we can just open really quick uh tokenml file yeah so like all of these",
    "start": "624839",
    "end": "632160"
  },
  {
    "text": "variants where we had like left brace all these other things if I didn't do let open I would need to put like token",
    "start": "632160",
    "end": "638580"
  },
  {
    "text": "dot assign uh but when I do let oh or let open token that just says basically like open",
    "start": "638580",
    "end": "644459"
  },
  {
    "text": "this module files are modules right so it's like the same you can actually make modules inside of files but files are",
    "start": "644459",
    "end": "649620"
  },
  {
    "text": "also modules so opening the token inside of this expression lets me just put like",
    "start": "649620",
    "end": "654839"
  },
  {
    "text": "five lines down see how it says semicolon I'll switch this way um like I don't have to put token dot",
    "start": "654839",
    "end": "660360"
  },
  {
    "text": "semicolon there I would also not have to put it after the first one uh because okay almost like type inference can tell",
    "start": "660360",
    "end": "666720"
  },
  {
    "text": "but I just think that is kind of nice and that's only like in the following statements right it doesn't open it for",
    "start": "666720",
    "end": "672240"
  },
  {
    "text": "the whole file okay for the following statements so what you're trying to say let me just try to say this back to you that that the the values that are in",
    "start": "672240",
    "end": "681000"
  },
  {
    "text": "this file um here I'm just going to use I'm gonna let me Harpoon myself here I'm getting off oh yeah uh there we go yeah",
    "start": "681000",
    "end": "687660"
  },
  {
    "text": "yeah okay so effectively these values right here and lookup",
    "start": "687660",
    "end": "694079"
  },
  {
    "text": "identifier those values are now scoped into this function because you opened up",
    "start": "694079",
    "end": "699839"
  },
  {
    "text": "capital T token which I don't see that so the the name of the file is token.ml",
    "start": "699839",
    "end": "705360"
  },
  {
    "text": "so like it created the module capital T token okay so okay okay okay so I see",
    "start": "705360",
    "end": "711000"
  },
  {
    "text": "this so so you you are opening it and effectively all the contents within it are now available specifically within this function is",
    "start": "711000",
    "end": "718260"
  },
  {
    "text": "what you're trying to say yes specifically for like this statement but it's not open everywhere right it's not",
    "start": "718260",
    "end": "723540"
  },
  {
    "text": "available everywhere that's why you do open base is that effectively like import standard yeah yeah basically yep",
    "start": "723540",
    "end": "729839"
  },
  {
    "text": "so that I don't have to write like base dot list dot editor or something like that yep okay okay so it actually so so",
    "start": "729839",
    "end": "735899"
  },
  {
    "text": "that means there is some problems with like namespace Collision stuff that could happen uh yeah the compiler will tell you like",
    "start": "735899",
    "end": "742860"
  },
  {
    "text": "if it doesn't match so like let's say you know you tried to use a name that doesn't work in like the right side of these parentheses like even though I'm",
    "start": "742860",
    "end": "749459"
  },
  {
    "text": "not saying the type anywhere it will know what the variant is that I'm doing like that type that I showed",
    "start": "749459",
    "end": "755760"
  },
  {
    "text": "where I have like semicolon method right if I just added one that doesn't exist it won't compile okay I'm just using",
    "start": "755760",
    "end": "761820"
  },
  {
    "text": "token by the way is there some sort of inference going on where you don't have to do like token dot or I'm not sure what the proper syntax would be yeah you",
    "start": "761820",
    "end": "768420"
  },
  {
    "text": "would do that if I didn't do open token yeah okay it just so it oh oh it's but",
    "start": "768420",
    "end": "773639"
  },
  {
    "text": "open token is home because what's this thing called this thing oh is type t yeah so for variants you don't do like T",
    "start": "773639",
    "end": "781620"
  },
  {
    "text": "dot T dot function or t dot you just like the name sort of get",
    "start": "781620",
    "end": "786720"
  },
  {
    "text": "I don't know what the right word is maybe Anton I think Antonio is here but like maybe C style when you do an enum",
    "start": "786720",
    "end": "792120"
  },
  {
    "text": "you don't go like the name of the enum dot the enum item you just go the enum",
    "start": "792120",
    "end": "797279"
  },
  {
    "text": "item it's like now right yep okay yeah and so if there's collisions it won't let you do that like",
    "start": "797279",
    "end": "802860"
  },
  {
    "text": "the compiler will just tell you that those don't work you have to name space them more okay so that's when you would drop this",
    "start": "802860",
    "end": "809639"
  },
  {
    "text": "you drop open token right I don't know how to do you know how to do comments in this language uh but you dropped that",
    "start": "809639",
    "end": "814980"
  },
  {
    "text": "thing and then you would be able to okay okay I see what's happening here yep yeah so then so then you can see the",
    "start": "814980",
    "end": "821519"
  },
  {
    "text": "rest of the like match statement right so uh I changed mine to be slightly different from the way that like it was",
    "start": "821519",
    "end": "827639"
  },
  {
    "text": "in the book where now like I call Advanced parser that returns that's one token right yeah we'll see right uh that",
    "start": "827639",
    "end": "835019"
  },
  {
    "text": "means let's say odd if a position is greater than string length uh minus one okay so there there's the plus one is right here instead yes exactly that",
    "start": "835019",
    "end": "842040"
  },
  {
    "text": "means it'd be a none else it's going to be position equals parser plus one",
    "start": "842040",
    "end": "847160"
  },
  {
    "text": "and now we need to do parser with position meaning that it effectively takes your parser and moves merges in",
    "start": "847160",
    "end": "853620"
  },
  {
    "text": "the position variable yep and it merges in this variable as well right so that's",
    "start": "853620",
    "end": "859440"
  },
  {
    "text": "the same thing where you can do like if the name of the um the name of the variable is the same name as the field",
    "start": "859440",
    "end": "865320"
  },
  {
    "text": "then you don't have to say position equals position right so I could have set parser with position equals position but you don't have to do that to write",
    "start": "865320",
    "end": "872639"
  },
  {
    "text": "this in a different language it looks something like a position equals position right yep right and then parser",
    "start": "872639",
    "end": "878639"
  },
  {
    "text": "dot yeah typescript you do something like that where you'd spread the parser because you're creating a copy and then",
    "start": "878639",
    "end": "884459"
  },
  {
    "text": "position equals position blah blah blah okay okay I see what's happening here and that's why you do an equal sign because sum this doesn't have a value",
    "start": "884459",
    "end": "891420"
  },
  {
    "text": "but if you wanted to do oopsies if you want ah if you wanted to do that you'd do something like this let's uh she",
    "start": "891420",
    "end": "897600"
  },
  {
    "text": "whatever oh I did the wrong thing that's from earlier when we were trying to be smart uh what would you do you do this",
    "start": "897600",
    "end": "904620"
  },
  {
    "text": "uh in and then I would just do yeah you just do that exactly yep okay",
    "start": "904620",
    "end": "911220"
  },
  {
    "text": "and then this returns and then okay so one more quick question",
    "start": "911220",
    "end": "916380"
  },
  {
    "text": "why is there why is there squirrely braces here and parentheses here",
    "start": "916380",
    "end": "922019"
  },
  {
    "text": "uh well both of them have squirrely braces right because they're both returning a parser which is like a record oh if this was multi-lined it",
    "start": "922019",
    "end": "928560"
  },
  {
    "text": "would look like that yeah well yeah if it's uh like this is actually the type that it's returning a new oh okay okay",
    "start": "928560",
    "end": "934440"
  },
  {
    "text": "right multiple like statements or whatever I guess I don't know how you would I don't know if that's the right word but I just use the word lines",
    "start": "934440",
    "end": "940740"
  },
  {
    "text": "because I don't know if it's expressions or statements or however they do yeah so I just yeah I don't know uh all everyone's mad at me haskellers are mad",
    "start": "940740",
    "end": "946920"
  },
  {
    "text": "okay Motors are mad uh it's all it's all the same um but yeah okay so you see what",
    "start": "946920",
    "end": "952260"
  },
  {
    "text": "Advanced does right just returns a new parser with the updated position right so it calls Advanced um so then if we go back to like the the",
    "start": "952260",
    "end": "959220"
  },
  {
    "text": "match statement um you'll see like those are the ones that Advance yep right and then I have",
    "start": "959220",
    "end": "964980"
  },
  {
    "text": "one that basically does peak where it says like hey what's the next thing uh so it's like when you get to bang",
    "start": "964980",
    "end": "971820"
  },
  {
    "text": "it's gonna say is the next thing it equals if it is then it's gonna return uh not equal otherwise it's going to turn bang right and those are named",
    "start": "971820",
    "end": "978540"
  },
  {
    "text": "named arguments oh it's like the oh I'm sorry for saying this so Peak so what",
    "start": "978540",
    "end": "983940"
  },
  {
    "text": "you're saying is does peak equal this if it does",
    "start": "983940",
    "end": "989399"
  },
  {
    "text": "it's wait no so those are all getting passed to the same function so like if you go",
    "start": "989399",
    "end": "994440"
  },
  {
    "text": "to there's a function in here called if peaked you can just look for if peaked oh oh if",
    "start": "994440",
    "end": "999720"
  },
  {
    "text": "peaked oh sorry yep okay so I don't get these tildes what are these tildes yeah so that's how you do",
    "start": "999720",
    "end": "1005899"
  },
  {
    "text": "named arguments um so like if you want to pass it with a",
    "start": "1005899",
    "end": "1011000"
  },
  {
    "text": "name then you can do till the default right and then it's got the same sort of",
    "start": "1011000",
    "end": "1016160"
  },
  {
    "text": "thing as well like where um if if the names are the same so like if you had a",
    "start": "1016160",
    "end": "1021860"
  },
  {
    "text": "variable called default and a variable called match and you called if peaked you can just do tilde default",
    "start": "1021860",
    "end": "1027558"
  },
  {
    "text": "and it will know it'll like put those together same way you do with records and then you advance at the end in which",
    "start": "1027559",
    "end": "1034220"
  },
  {
    "text": "you would that's the same thing that you're doing when you read like",
    "start": "1034220",
    "end": "1039438"
  },
  {
    "text": "um oh you do one more advanced okay yeah because you have to double Advance because right because if it's like if",
    "start": "1039439",
    "end": "1044600"
  },
  {
    "text": "it's bang not equals right yeah holy cow okay I think I'm starting to see I I think I understand how this works a",
    "start": "1044600",
    "end": "1050960"
  },
  {
    "text": "little bit this feels in in my head this feels a little confusing uh well yeah I mean there's a lot more",
    "start": "1050960",
    "end": "1057500"
  },
  {
    "text": "use to it or if it actually is really awesome right developer ergonomics right is it actually useful and you just don't",
    "start": "1057500",
    "end": "1063380"
  },
  {
    "text": "get it because you haven't done it enough or is it actually really not that great it's very hard to tell when you're when you're new to something if",
    "start": "1063380",
    "end": "1069440"
  },
  {
    "text": "something's bad or you're just bad yeah yes agreed yeah it can be it can be",
    "start": "1069440",
    "end": "1075140"
  },
  {
    "text": "difficult okay and this is how you do named stuff is you do tilde the name and this okay I",
    "start": "1075140",
    "end": "1081260"
  },
  {
    "text": "like it I didn't have to do that but I felt it's a lot easier because like which one do you want to do first the",
    "start": "1081260",
    "end": "1086299"
  },
  {
    "text": "one that matches when it's peaked or the one that matches when it doesn't peek forward right like I don't know I couldn't figure out well neither one",
    "start": "1086299",
    "end": "1092480"
  },
  {
    "text": "made more sense to me right to put as the first thing and they're the same type right because they're both token",
    "start": "1092480",
    "end": "1098059"
  },
  {
    "text": "they're both like the token.t type and then you can do that is an identifier you can read the",
    "start": "1098059",
    "end": "1104419"
  },
  {
    "text": "identifier with the parser which returns back out of parser plus one more item right yeah it Returns the parser and the",
    "start": "1104419",
    "end": "1110900"
  },
  {
    "text": "like token okay oh let's see that's what each of them do yep okay then you have to do this in at the end because of why",
    "start": "1110900",
    "end": "1118400"
  },
  {
    "text": "because basically Whatever Gets returned here yeah right then we're going to",
    "start": "1118400",
    "end": "1124520"
  },
  {
    "text": "um then we're gonna return it returns a parser and a token",
    "start": "1124520",
    "end": "1130160"
  },
  {
    "text": "yeah right and the result of this function I want to be parser and like a",
    "start": "1130160",
    "end": "1135500"
  },
  {
    "text": "token option where do you assign that so that's why so that's where I'm kind of confused is this thing this match",
    "start": "1135500",
    "end": "1141020"
  },
  {
    "text": "statement every branch is returning two things or it's it's the expression resolves into two two values but I don't",
    "start": "1141020",
    "end": "1147559"
  },
  {
    "text": "see something like let parser token equals this so I'm confused at how",
    "start": "1147559",
    "end": "1153380"
  },
  {
    "text": "how is it assigning to something um did I have that earlier now it looks",
    "start": "1153380",
    "end": "1159980"
  },
  {
    "text": "like maybe you deleted something let me just see what just to make sure we're here I'm gonna go like this uh there we",
    "start": "1159980",
    "end": "1166280"
  },
  {
    "text": "go uh load file just in case I did something yeah just in case otherwise no",
    "start": "1166280",
    "end": "1171500"
  },
  {
    "text": "no no no no okay so that's fine so what happens here is the um",
    "start": "1171500",
    "end": "1178419"
  },
  {
    "text": "well let me see where where did we oh sorry sorry the in when you scroll down I was like I don't know what you're doing the in is indented in one it's in",
    "start": "1178640",
    "end": "1185720"
  },
  {
    "text": "the match it's in the match for the for the sum oh it's in right here yeah yeah yeah yeah",
    "start": "1185720",
    "end": "1192980"
  },
  {
    "text": "so this is one okay so a good follow-up here this is why I tend to really like",
    "start": "1192980",
    "end": "1198160"
  },
  {
    "text": "uh some sort of ending token for various statements because then you have to play the game of indent looking I see what's",
    "start": "1198160",
    "end": "1204860"
  },
  {
    "text": "happening this is actually defined right uh right here right yeah this is the result of this match statement in which",
    "start": "1204860",
    "end": "1211460"
  },
  {
    "text": "you're returning right here okay okay perfect perfect I get this and so then both of these branches return this which",
    "start": "1211460",
    "end": "1217580"
  },
  {
    "text": "this is just Auto being returned right okay and there is no like return keyword",
    "start": "1217580",
    "end": "1222860"
  },
  {
    "text": "you can't just like which is unfortunate it's gonna it's gonna be a struggle bus for me but I'm gonna get it yeah okay so",
    "start": "1222860",
    "end": "1228380"
  },
  {
    "text": "that's so that's next token right so I mean that's pretty much it you can look at like what does uh read identifier",
    "start": "1228380",
    "end": "1233419"
  },
  {
    "text": "look like so I don't know this is where maybe you won't you won't really like this side and I will see",
    "start": "1233419",
    "end": "1239419"
  },
  {
    "text": "um oh no this one's fine yeah yeah so it's just like the thing that you do here right is we have this I have this",
    "start": "1239419",
    "end": "1245900"
  },
  {
    "text": "function read while that just like seeks forward in the parser right and notice they all return parsers okay hold on",
    "start": "1245900",
    "end": "1252700"
  },
  {
    "text": "read while this must be something you've made right yeah okay it takes an abortion of condition okay the condition",
    "start": "1252700",
    "end": "1259220"
  },
  {
    "text": "is a function yep okay okay so it's just keep reading the parser until it's done then it returns out the parser and the",
    "start": "1259220",
    "end": "1265580"
  },
  {
    "text": "ident yep and it does that so that means number is the exact same thing read while it's just the exact same thing",
    "start": "1265580",
    "end": "1270620"
  },
  {
    "text": "except for the condition is is number return okay that's straightforward I like that that's beautiful and like the the cool thing about these",
    "start": "1270620",
    "end": "1278299"
  },
  {
    "text": "right is like you'll notice throughout this thing that like I didn't have to write any types",
    "start": "1278299",
    "end": "1283820"
  },
  {
    "text": "yeah you really didn't have to write any types ever I didn't write any types basically you",
    "start": "1283820",
    "end": "1288860"
  },
  {
    "text": "know what I'm saying but like if one of the case statements in in the in the match didn't match the right type it",
    "start": "1288860",
    "end": "1295760"
  },
  {
    "text": "would err like it wouldn't compile interesting to give instead of so pattern matching is a large amount of",
    "start": "1295760",
    "end": "1301280"
  },
  {
    "text": "the checking of types uh it's not so much the pattern matching I'm just saying like",
    "start": "1301280",
    "end": "1306320"
  },
  {
    "text": "uh so the first match on line 20 right four lines above you match parser.ch that's the that's the thing that's",
    "start": "1306320",
    "end": "1312260"
  },
  {
    "text": "basically getting returned from next token right yeah and what you see is the first case is I return a parser and then",
    "start": "1312260",
    "end": "1317840"
  },
  {
    "text": "an option yeah so like if the other ones doesn't if the other one doesn't do that",
    "start": "1317840",
    "end": "1323120"
  },
  {
    "text": "then it will be an error and we'll say like you have two conflicting types for this function return but you can't have",
    "start": "1323120",
    "end": "1328820"
  },
  {
    "text": "that you could that is not allowed right okay and it knows and it knows the types",
    "start": "1328820",
    "end": "1334640"
  },
  {
    "text": "because you have this T right here I also notice that you use type T more than once which I am a little confused about like why that is but you it's kind",
    "start": "1334640",
    "end": "1341720"
  },
  {
    "text": "of like a token operates over types t",
    "start": "1341720",
    "end": "1347200"
  },
  {
    "text": "basically because we're in lecture scope right and the other one is token. it's a convention that",
    "start": "1348280",
    "end": "1354559"
  },
  {
    "text": "um like if you have a module a lot of times you make if you have some sort of like exported type that is the thing",
    "start": "1354559",
    "end": "1360559"
  },
  {
    "text": "that gets um like used is like the primary focus of that module because modules can contain",
    "start": "1360559",
    "end": "1367580"
  },
  {
    "text": "more than one type which like okay this this thing does and like I Define other ones later and have it right",
    "start": "1367580",
    "end": "1375919"
  },
  {
    "text": "um then you just usually use dot T because it's kind of nice interesting so it's like the convention",
    "start": "1375919",
    "end": "1381380"
  },
  {
    "text": "that you would do but you don't have to you can do anything you want you could have called this type uh laxer",
    "start": "1381380",
    "end": "1387440"
  },
  {
    "text": "if I wanted there's nothing special about t okay okay it's a convention though",
    "start": "1387440",
    "end": "1394880"
  },
  {
    "text": "interesting it's uh I I guess I don't you know because in my head I'm trying to reason about how does that work with",
    "start": "1394880",
    "end": "1400220"
  },
  {
    "text": "a lot of types and all that and how do people that import a bunch of stuff blah blah blah it doesn't really matter it's still it's just very interesting to me",
    "start": "1400220",
    "end": "1406039"
  },
  {
    "text": "like how little types were specified here but there is some level of specification",
    "start": "1406039",
    "end": "1411080"
  },
  {
    "text": "that is going on and no there's like it's 100 specified like yeah every",
    "start": "1411080",
    "end": "1416179"
  },
  {
    "text": "single line has one and only one type that anything can actually be there's no like yeah but it's four so it's forward",
    "start": "1416179",
    "end": "1422780"
  },
  {
    "text": "inference you know which is very interesting that's very very good",
    "start": "1422780",
    "end": "1428000"
  },
  {
    "text": "it's it's able to take this line and then it just keeps on inferring all the way through which I'm very right",
    "start": "1428000",
    "end": "1435580"
  },
  {
    "text": "okay I like it so like so that so you can write types in the file if you wanted like if so for example on the",
    "start": "1436280",
    "end": "1442460"
  },
  {
    "text": "parser on Advanced parser like on three lines down here if you put like a left parenthesis around parser",
    "start": "1442460",
    "end": "1449720"
  },
  {
    "text": "uh and then go over to the right and do a colon inside of there and do colon T like that's valid",
    "start": "1449720",
    "end": "1455900"
  },
  {
    "text": "okay you're just saying explicitly hey this is this is type right which can",
    "start": "1455900",
    "end": "1461419"
  },
  {
    "text": "sometimes be helpful like sometimes you want to write that type and you say like this right you you can do that",
    "start": "1461419",
    "end": "1467840"
  },
  {
    "text": "um and that's that's good uh someone was asking what's with the and at the beginning of these you can basically",
    "start": "1467840",
    "end": "1473720"
  },
  {
    "text": "make one big let statement and use functions interchangeably throughout it by using and so like functions don't get",
    "start": "1473720",
    "end": "1480320"
  },
  {
    "text": "hoisted there's no like Special top level hoisting of functions but if you want to have functions be able to like",
    "start": "1480320",
    "end": "1485960"
  },
  {
    "text": "intercall between each other all of these are part of like next token so they all get they're kind of like you",
    "start": "1485960",
    "end": "1492080"
  },
  {
    "text": "can write them with ands together and they can you can call them in any order I think it's called chaining or something like that I don't remember the",
    "start": "1492080",
    "end": "1497659"
  },
  {
    "text": "word okay and so you don't you don't have to have peaked defined below Peak Char because",
    "start": "1497659",
    "end": "1504500"
  },
  {
    "text": "it just goes okay right now they're we get all exactly right because they're all part of the same statement otherwise you do need to right like because it",
    "start": "1504500",
    "end": "1510799"
  },
  {
    "text": "makes sense because you need to know that you need to know the type of something and you can Shadow the name right so there's no way that you could",
    "start": "1510799",
    "end": "1516140"
  },
  {
    "text": "know ahead of time what like it's going to be unless you've already seen it okay I also noticed that you said this",
    "start": "1516140",
    "end": "1523280"
  },
  {
    "text": "thing is recursive but it's not I don't see anywhere in which it is recursive uh there's something kind of a little",
    "start": "1523280",
    "end": "1529760"
  },
  {
    "text": "bit and where you have these like um where you have these chain things together you still have to call you have",
    "start": "1529760",
    "end": "1535279"
  },
  {
    "text": "to say that it's recursive because it's kind of calling itself it's recursive in nature that the sense",
    "start": "1535279",
    "end": "1540380"
  },
  {
    "text": "that there's other things that it's calling within its definition this and business so once you have all once you have ants and what you're calling",
    "start": "1540380",
    "end": "1546380"
  },
  {
    "text": "between then you have to say hey it's recursive not maybe in the sense that I would use",
    "start": "1546380",
    "end": "1551840"
  },
  {
    "text": "the term recursive yeah I mean that you also use the same exact word and the same thing if you're gonna call yourself",
    "start": "1551840",
    "end": "1558260"
  },
  {
    "text": "um like I have examples of that in like the in the parser expression I know I'm just saying like",
    "start": "1558260",
    "end": "1563960"
  },
  {
    "text": "but so yeah I was that's where it gets exciting but you know that's fine",
    "start": "1563960",
    "end": "1569120"
  },
  {
    "text": "all right this has been good it's been awesome thank you for the oh camel look through",
    "start": "1569120",
    "end": "1574700"
  },
  {
    "text": "you're welcome chat was really mad we had a lot of Haskell nerds really upset that we were talking about oh camel just",
    "start": "1574700",
    "end": "1580340"
  },
  {
    "text": "really flaming it but too bad uh what what do you rate oh camel in this",
    "start": "1580340",
    "end": "1585380"
  },
  {
    "text": "situation um so the way that I wrote it I think is",
    "start": "1585380",
    "end": "1590720"
  },
  {
    "text": "not as good as you could write it for okay well there's some really good like lexor and parser-like libraries that let",
    "start": "1590720",
    "end": "1596779"
  },
  {
    "text": "you write really nice things um that that you could write in like a lot less stuff and a lot less lines like",
    "start": "1596779",
    "end": "1602840"
  },
  {
    "text": "more succinctly but I'll still give it it's I think it's really nice um",
    "start": "1602840",
    "end": "1609200"
  },
  {
    "text": "for just the laxer I don't know I don't know yeah we'll rate it uh Dune out of",
    "start": "1609200",
    "end": "1614900"
  },
  {
    "text": "ten dude out of 10. yeah I saw the Dune thing going on in my head I'm like how",
    "start": "1614900",
    "end": "1620659"
  },
  {
    "text": "many Dune jokes can I make oh there's a lot so Antonio and maybe he's still here he's the maintainer of melange you know",
    "start": "1620659",
    "end": "1627740"
  },
  {
    "text": "the spice from from Dune uh and that's that's one of the things that you can take Pokemon compile it directly to JS",
    "start": "1627740",
    "end": "1634460"
  },
  {
    "text": "like in the compile stuff it's a different back end for though okay we'll compiler basically I'm trying to",
    "start": "1634460",
    "end": "1639559"
  },
  {
    "text": "remember all the names I can't remember any of the names except for the benefits",
    "start": "1639559",
    "end": "1644500"
  },
  {
    "text": "uh gosh what what is the dad's name something at tradies Duke Duke he was like it really is it no",
    "start": "1650960",
    "end": "1659659"
  },
  {
    "text": "he's he is the dude I know he is the Duke okay Leto I like I liked the dad",
    "start": "1659659",
    "end": "1665480"
  },
  {
    "text": "the dad is like one of my favorite characters so good the dad is like so good they even made him good in the",
    "start": "1665480",
    "end": "1672260"
  },
  {
    "text": "movie which was shocking which is because they usually just they just they just make every strong character like",
    "start": "1672260",
    "end": "1678919"
  },
  {
    "text": "that just completely impotent they actually made him move so good in both ways I love um it was so good I'm gonna",
    "start": "1678919",
    "end": "1685400"
  },
  {
    "text": "go see that the next dude in IMAX for sure I made the mistake of not seeing it",
    "start": "1685400",
    "end": "1690500"
  },
  {
    "text": "in IMAX but I'm gonna go see it for sure I was shocked at how good Dune was the",
    "start": "1690500",
    "end": "1695539"
  },
  {
    "text": "movie because I like the book doesn't make sense to be a movie but they made it a movie It seems",
    "start": "1695539",
    "end": "1702679"
  },
  {
    "text": "impossible to make it a movie there's it's only people talking in their heads 90 of the book like it's just someone's",
    "start": "1702679",
    "end": "1709640"
  },
  {
    "text": "thinking about what's happening and that's it like they even made it what's it called like you know when Paul's in the cave and he gave me and he starts",
    "start": "1709640",
    "end": "1717020"
  },
  {
    "text": "seeing into the future he starts really understanding what's gonna happen they even did like a good job with that one",
    "start": "1717020",
    "end": "1722299"
  },
  {
    "text": "which was shocking that like that scene which was impossible to do well they did",
    "start": "1722299",
    "end": "1727520"
  },
  {
    "text": "it well and I was just like dang this is so good I did not like Doom part one thank you",
    "start": "1727520",
    "end": "1733580"
  },
  {
    "text": "guys want to get banned get you didn't like it I liked it I thought it was great my kids even",
    "start": "1733580",
    "end": "1738860"
  },
  {
    "text": "liked it I I watched it with my kids and my kids even liked it which is really weird because it's a very uh",
    "start": "1738860",
    "end": "1744620"
  },
  {
    "text": "kind of like thought yeah there's like action but it's not like all action the whole time yeah my",
    "start": "1744620",
    "end": "1751760"
  },
  {
    "text": "favorite in Dune is the MILF org [Laughter]",
    "start": "1751760",
    "end": "1758080"
  },
  {
    "text": "the Betty Jesuits is that what he's trying to say I think that's what he's talking about which is a little weird",
    "start": "1758080",
    "end": "1765440"
  },
  {
    "text": "I don't know it's a little weird that's all I have to say about that one",
    "start": "1765440",
    "end": "1770720"
  },
  {
    "text": "all right hey can I show you one thing then can I show you Zig since we're here yeah well I was interested can you give",
    "start": "1770720",
    "end": "1775880"
  },
  {
    "text": "me your final thoughts about okay well I wanted to know your first thoughts after seeing it like okay you know something",
    "start": "1775880",
    "end": "1781460"
  },
  {
    "text": "in it for real again I think for me when I see oh camel it comes down to a simple",
    "start": "1781460",
    "end": "1786980"
  },
  {
    "text": "problem which is I don't know if I'm bad or what you did is bad I'm so",
    "start": "1786980",
    "end": "1792500"
  },
  {
    "text": "inexperienced in it it all makes sense what you did the continuous immutability always worries",
    "start": "1792500",
    "end": "1799520"
  },
  {
    "text": "me but I may not understand how it actually works uh you know like it doesn't act the same as like JavaScript",
    "start": "1799520",
    "end": "1805340"
  },
  {
    "text": "it's not the same as JavaScript which is which which makes sense and so there's like there's all those problems that I'm trying to wrestle through which I I",
    "start": "1805340",
    "end": "1812000"
  },
  {
    "text": "don't like I wish they did a couple things in okay well I really don't understand why people don't want opening",
    "start": "1812000",
    "end": "1817279"
  },
  {
    "text": "and closing to any sort of scope like I just think it's really easy to read and keep track of where you're at oh like",
    "start": "1817279",
    "end": "1823580"
  },
  {
    "text": "brackets you're saying brackets right like it just there's there's no need to try to have to look at this and try to",
    "start": "1823580",
    "end": "1829159"
  },
  {
    "text": "figure out what am I returning from like where is this around that if you want okay so you could theoretically go uh I",
    "start": "1829159",
    "end": "1837620"
  },
  {
    "text": "mean you could do that which you wouldn't do and you do something like uh this right is what you're saying yeah",
    "start": "1837620",
    "end": "1842840"
  },
  {
    "text": "okay that makes me feel better because for me that's like a huge hindrance in just a lot of things I do what about at",
    "start": "1842840",
    "end": "1848419"
  },
  {
    "text": "the function level can I do a parenthesis here to hear oh I don't know you would look",
    "start": "1848419",
    "end": "1853520"
  },
  {
    "text": "like a big goofball you would probably it would work for me it just it's so easy to visually see what like right",
    "start": "1853520",
    "end": "1860600"
  },
  {
    "text": "here it's very like because we both of us got tripped up on this line right we both got dressed up on this line because",
    "start": "1860600",
    "end": "1866600"
  },
  {
    "text": "it's it's you don't get that extra information for me that's super important is that extra",
    "start": "1866600",
    "end": "1871820"
  },
  {
    "text": "information I'm all about low cognitive overhead in any language that's why I do like explicit returns I liked it I don't",
    "start": "1871820",
    "end": "1877039"
  },
  {
    "text": "want to have to think what is going on and so for me it's very important in a different way that would make it be like",
    "start": "1877039",
    "end": "1883100"
  },
  {
    "text": "less obvious but yeah the the thing is like the compiler will yell at you though if",
    "start": "1883100",
    "end": "1888559"
  },
  {
    "text": "you do it wrong right so that's one of the nice things like it's not just like it's gonna silently change the inferred",
    "start": "1888559",
    "end": "1895100"
  },
  {
    "text": "type of the function like in typescript right like so there's a lot of things where some of the problems that you feel",
    "start": "1895100",
    "end": "1901640"
  },
  {
    "text": "like oh man this would make me accidentally return the wrong thing all the time and like I'll just get screwed",
    "start": "1901640",
    "end": "1906980"
  },
  {
    "text": "in prod you just that's just not like a thing yeah I like that I don't care I saw that about it I like the the typing",
    "start": "1906980",
    "end": "1913039"
  },
  {
    "text": "system which almost feels like you're you're just not typing anything here which is really hard for me to",
    "start": "1913039",
    "end": "1918140"
  },
  {
    "text": "understand because there's like if you're looking at this there's virtually not a single stated type anywhere in here I don't yeah there's none in this",
    "start": "1918140",
    "end": "1924679"
  },
  {
    "text": "whole file but it is well there's like at least is string empty right like at least you you kind of give away the game",
    "start": "1924679",
    "end": "1929960"
  },
  {
    "text": "a little bit there and so that's it's very it's very interesting that just just this small amount of typing",
    "start": "1929960",
    "end": "1936440"
  },
  {
    "text": "can make all of this look typeless so that's like my thoughts about oh camera which is oh yeah pixel brings up a good",
    "start": "1936440",
    "end": "1942260"
  },
  {
    "text": "point too where you could just write reason then like you could look up reason we don't have to do it right now either but like reason ml is literally",
    "start": "1942260",
    "end": "1948860"
  },
  {
    "text": "just like a syntax variant uh okay that has what you're asking for which is like",
    "start": "1948860",
    "end": "1954559"
  },
  {
    "text": "brackets and things like that yeah because that's always that you know because again it's it's all about cognitive overhead I don't want to have",
    "start": "1954559",
    "end": "1960200"
  },
  {
    "text": "to I don't want to have to think too hard right because that's like a huge I call it search fatigue like I don't want to",
    "start": "1960200",
    "end": "1966620"
  },
  {
    "text": "have to unwind my stack in my head to know where I'm at I kind of want to be able to just always have something that",
    "start": "1966620",
    "end": "1972140"
  },
  {
    "text": "cues me and like okay I'm one indent in well I wasn't a match statement normally I'd say like that's why I have the little cookies up there so normally this",
    "start": "1972140",
    "end": "1979520"
  },
  {
    "text": "should like if I have this thing so I could make it show that as well and then I know exactly where I'm at and so it's",
    "start": "1979520",
    "end": "1986360"
  },
  {
    "text": "like I'm always trying to reduce the cognitive overhead and I assume that I won't oh look at that this one even does",
    "start": "1986360",
    "end": "1991940"
  },
  {
    "text": "this right here so that's we're getting close uh yeah we're getting close so I wouldn't need these if I can just get oh",
    "start": "1991940",
    "end": "1998539"
  },
  {
    "text": "look at that oh hold on let me just just really quickly I wonder if this thing does this thing break if you don't have that there",
    "start": "1998539",
    "end": "2004419"
  },
  {
    "text": "we go okay well so this thing does show me so I'd actually I probably wouldn't need as long as I can have that yeah now",
    "start": "2004419",
    "end": "2010179"
  },
  {
    "text": "that I'm getting the other one is too like when you have the LSP setup it does do the like um inlay hint things like",
    "start": "2010179",
    "end": "2017019"
  },
  {
    "text": "above the functions okay so you can so like I write all my code",
    "start": "2017019",
    "end": "2022240"
  },
  {
    "text": "with thinking about the types you know what I'm saying like all the types are just there but the thing is I don't have",
    "start": "2022240",
    "end": "2027640"
  },
  {
    "text": "to write them which is really nice for when you want to change them yes yes yes the more that's like the type the more",
    "start": "2027640",
    "end": "2034120"
  },
  {
    "text": "changing is difficult that's the thing that I find really difficult with Russ is like Okay so let's say I want to",
    "start": "2034120",
    "end": "2039279"
  },
  {
    "text": "change something that's like five functions deep right like I have all these functions",
    "start": "2039279",
    "end": "2044799"
  },
  {
    "text": "and I have this inner function that's called by all these other functions yeah if I want to change what the the interface of the inner one is they have",
    "start": "2044799",
    "end": "2051158"
  },
  {
    "text": "to go and change the one of all the out ones as well but that's pretty hard to do like there's not really an LSP way to do that I'm not renaming the original",
    "start": "2051159",
    "end": "2057460"
  },
  {
    "text": "type you know what I mean like I'm just it's changing yeah yeah that's right right so but in okay if I don't use",
    "start": "2057460",
    "end": "2064358"
  },
  {
    "text": "anything if the inner function is the one that like Narrows the type to be like you know lexer",
    "start": "2064359",
    "end": "2071320"
  },
  {
    "text": "and then I change it to like lexor plus plus you know or whatever you know something done like that then all then",
    "start": "2071320",
    "end": "2076419"
  },
  {
    "text": "it'll just infer the types all the way up unless I have like stuff in an mli link an interface file or whatever but",
    "start": "2076419",
    "end": "2082060"
  },
  {
    "text": "like but it just makes it feel so easy to change everything that's why I like that's kind of like the difference that",
    "start": "2082060",
    "end": "2087878"
  },
  {
    "text": "I feel when I'm versus when I'm writing rust is like oh I'm writing this I want to change stuff I'm doing it someone's",
    "start": "2087879",
    "end": "2093520"
  },
  {
    "text": "saying explicit is better than implicit everything's explicit the compiler explicitly says everything that's going",
    "start": "2093520",
    "end": "2098680"
  },
  {
    "text": "to happen like and it will error if it's not right yeah I'm fine I'm fine with type inference if it's a good language",
    "start": "2098680",
    "end": "2104200"
  },
  {
    "text": "to do it I've never liked it in typescript because it's not a good language the problem is is that the moment you",
    "start": "2104200",
    "end": "2110380"
  },
  {
    "text": "deviate it just goes oh that's cool we're now this or that right like it puts the onus on the caller to get it",
    "start": "2110380",
    "end": "2117040"
  },
  {
    "text": "right whereas this one it still looks like it's putting the onus on the definer which is what I want but you",
    "start": "2117040",
    "end": "2122740"
  },
  {
    "text": "don't have to spread the watch so I'm I'm told and it does this direction right and it doesn't do like the dumb",
    "start": "2122740",
    "end": "2128020"
  },
  {
    "text": "types your thing where just like unions things when you return it yeah goof up it's just like Union right it's like oh",
    "start": "2128020",
    "end": "2134500"
  },
  {
    "text": "I was returning an INT and then I had this if statement that accidentally now returns a Char and like and I was like",
    "start": "2134500",
    "end": "2140260"
  },
  {
    "text": "well you just returned into chars buddy no that's not a type and then all of your usages are expecting numbers and",
    "start": "2140260",
    "end": "2145780"
  },
  {
    "text": "you're passing them all in that way so nothing's currently looking like it failing but you don't even realize you've just like are spreading around",
    "start": "2145780",
    "end": "2153720"
  }
]