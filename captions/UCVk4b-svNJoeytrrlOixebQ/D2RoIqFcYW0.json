[
  {
    "text": "okay so let's do prim's algorithm minimum spanning tree there's two of",
    "start": "0",
    "end": "6359"
  },
  {
    "text": "them right I forgot the other uh [Music] continue without supporting",
    "start": "6359",
    "end": "13760"
  },
  {
    "text": "suck it upside down e plays geek for geeks okay I have no problem saying a crystals",
    "start": "13799",
    "end": "20939"
  },
  {
    "text": "that's right crystals oh no okay we have discussed Crystal's",
    "start": "20939",
    "end": "27660"
  },
  {
    "text": "uh algorithm for minimum spanning tree like Frisco's algorithm prim's algorithm is also a greedy algorithm I do like me",
    "start": "27660",
    "end": "34500"
  },
  {
    "text": "some greedy algorithms that's Dykstra dykstra's greedy too right I only do maximum for us yeah right you",
    "start": "34500",
    "end": "40860"
  },
  {
    "text": "don't know [ __ ] about a maximum Forest okay the second last algorithms course uh so",
    "start": "40860",
    "end": "46800"
  },
  {
    "text": "the thing is is that in the last algorithms course you ever needed I said that I wouldn't thank you for that I",
    "start": "46800",
    "end": "52079"
  },
  {
    "text": "wouldn't be able to uh cover everything you know what I mean I wouldn't be able",
    "start": "52079",
    "end": "57899"
  },
  {
    "text": "to cover everything that is uh I wouldn't be able to cover everything",
    "start": "57899",
    "end": "63120"
  },
  {
    "text": "but I will cover everything that you need this one's going to be called the last algorithms course you want I will",
    "start": "63120",
    "end": "69840"
  },
  {
    "text": "I'm going to see if uh what's it called uh I'm gonna see if I'm gonna see I'm going to see if Mark will let me call",
    "start": "69840",
    "end": "76560"
  },
  {
    "text": "that because there's the last algorithms course you need and then there's the one you want right this is the one with a",
    "start": "76560",
    "end": "81900"
  },
  {
    "text": "bunch of graph stuff we're going to talk about strongly connected components we're just gonna do a bunch of graph stuff okay minimum trees minimum flow",
    "start": "81900",
    "end": "88080"
  },
  {
    "text": "maximum flow you know what I mean so this is the one you want okay this is",
    "start": "88080",
    "end": "93960"
  },
  {
    "text": "not the one you need this is the one you want it doesn't cover anything that's like super it's not like you don't oh we",
    "start": "93960",
    "end": "100979"
  },
  {
    "text": "did trees we did tries in the other one uh we did uh oh technically you call them trees uh we did trees in the other",
    "start": "100979",
    "end": "107220"
  },
  {
    "text": "one so what is this one right here who who just said it who said that what the hell this man doing a stream once every 12 hours yeah effectively right now",
    "start": "107220",
    "end": "113700"
  },
  {
    "text": "because I'm in the process of writing a course fully erect absolutely uh probably no I'm just I'm just working",
    "start": "113700",
    "end": "118920"
  },
  {
    "text": "okay I can't I I can't where the hell is It Anyways trees somewhere in here",
    "start": "118920",
    "end": "124079"
  },
  {
    "text": "someone said the word trees t-r-i-e-s retrieval is what it stands for so it's called a retrieval tree right or uh",
    "start": "124079",
    "end": "132800"
  },
  {
    "text": "retrieval retrieval tree or shortened for uh tree it's a tree tree",
    "start": "132800",
    "end": "138360"
  },
  {
    "text": "people try to call it a try but those people they're not they're not they're not real cesogens okay you know what and",
    "start": "138360",
    "end": "145080"
  },
  {
    "text": "whenever someone goes like this oh it's a try I'm like no it's not it's not a try the guy never said it was a tribe",
    "start": "145080",
    "end": "150360"
  },
  {
    "text": "the guy specifically said it's a retrieval tree short tree now",
    "start": "150360",
    "end": "155580"
  },
  {
    "text": "was the guy being a [ __ ] for calling it a tree tree absolutely but nonetheless don't Rob the man of his",
    "start": "155580",
    "end": "161519"
  },
  {
    "text": "agency and his naming okay everyone knows naming is one of the hardest parts of computer science so guess what",
    "start": "161519",
    "end": "168840"
  },
  {
    "text": "he named it a tree tree harder boys okay where's this gonna be on front end",
    "start": "168840",
    "end": "173879"
  },
  {
    "text": "Masters nah it's a it's a Jiff tree okay cool driftry uh hey don't look at my",
    "start": "173879",
    "end": "180239"
  },
  {
    "text": "code okay anyways let's keep on going all right let's look at this uh should we start with uh crystals we could start",
    "start": "180239",
    "end": "186300"
  },
  {
    "text": "with Crooks crystals as well the algorithm starts with an empty spanning tree and the idea is to maintain two",
    "start": "186300",
    "end": "191640"
  },
  {
    "text": "sets of vertices the first set contains the vertices already included in the MSC the minimum spanning tree which is empty",
    "start": "191640",
    "end": "198239"
  },
  {
    "text": "because there's no minimum spanning tree yet and the other sets contains the vertices not yet included so my guess is if I remember correctly since this is a",
    "start": "198239",
    "end": "204959"
  },
  {
    "text": "greedy algorithm one can just make a guess right off the ramp right oh man I gotta get my uh drawing pad hooked up I",
    "start": "204959",
    "end": "211260"
  },
  {
    "text": "don't have my drawing pad discard get the hell out of here get them out of here get the hell out of here so my",
    "start": "211260",
    "end": "216599"
  },
  {
    "text": "guess is before even looking at it it's going to be something like this right uh let's do some of these Bam Bam Bam uh",
    "start": "216599",
    "end": "223739"
  },
  {
    "text": "right it's and let's just say there's it looks something like this right my guess is that it's going to look",
    "start": "223739",
    "end": "229980"
  },
  {
    "text": "something like um let's go like this let's go three one uh",
    "start": "229980",
    "end": "238860"
  },
  {
    "text": "one uh two right and so it's gonna it's gonna look like something like this you're gonna first choose this one so",
    "start": "238860",
    "end": "244560"
  },
  {
    "text": "then our minimum spanning tree set will be this then it'll be this then it's gonna be this then it'll be",
    "start": "244560",
    "end": "251340"
  },
  {
    "text": "this because it'll be greedy and this will be four versus five that's my guess",
    "start": "251340",
    "end": "257639"
  },
  {
    "text": "that's my guess that's my guess that's my guess you know what I mean",
    "start": "257639",
    "end": "264079"
  },
  {
    "text": "um all right at every step it considers all edges that connect the two sets and picks up the minimum weight uh Edge from",
    "start": "264419",
    "end": "270240"
  },
  {
    "text": "these uh from these edges yep after picking up the edge it moves at the other point or the let's see the ah it",
    "start": "270240",
    "end": "276840"
  },
  {
    "text": "moves the other end point of the edge to the set containing the minimum spanning trees so this seems pretty easy what",
    "start": "276840",
    "end": "283440"
  },
  {
    "text": "website is this uh this is uh looks like we're geeks for geeks okay uh",
    "start": "283440",
    "end": "288780"
  },
  {
    "text": "you know this is what we're doing you guys excited about that I'm excited about it okay",
    "start": "288780",
    "end": "294419"
  },
  {
    "text": "I think I'm correct on that let's say a group of edges that connects two sets of vertices in a graph is called uh cut in",
    "start": "294419",
    "end": "300660"
  },
  {
    "text": "graph Theory uh so at every step of prim's algorithm",
    "start": "300660",
    "end": "306840"
  },
  {
    "text": "a find a cut pick the minimum uh weight Edge from the cut and include this vertices in the MS uh T set the set of",
    "start": "306840",
    "end": "315000"
  },
  {
    "text": "the contained yep okay so how does Pro algorithms work okay so here we go determine let's see an arbitrary vertex",
    "start": "315000",
    "end": "320639"
  },
  {
    "text": "is the starting vertex of the MSC absolutely absolutely pick the minimum",
    "start": "320639",
    "end": "326280"
  },
  {
    "text": "pick the minimum uh follow steps three through five until",
    "start": "326280",
    "end": "331500"
  },
  {
    "text": "there are vertices that are not included in the MST known as Fringe vertices okay",
    "start": "331500",
    "end": "337020"
  },
  {
    "text": "wait what uh What uh find an edge connecting any tree vertices a Vertex",
    "start": "337020",
    "end": "343199"
  },
  {
    "text": "with The Fringe vertex okay this is just a way to say it I guess uh find the minimum among these edges add",
    "start": "343199",
    "end": "351060"
  },
  {
    "text": "the chosen Edge to the MST if it does not form a any cycle interesting yes",
    "start": "351060",
    "end": "356580"
  },
  {
    "text": "return the MST and exit okay so that's pretty much what I was saying",
    "start": "356580",
    "end": "363780"
  },
  {
    "text": "I think that's pretty much the same thing right uh question considering my interest in",
    "start": "363780",
    "end": "369180"
  },
  {
    "text": "both like I'm not we're not talking about that sorry literally don't understand any of this well we're we're trying to create a minimum spanning tree",
    "start": "369180",
    "end": "375419"
  },
  {
    "text": "no not among us that's not what we're doing uh MSG is tasty of course you recommend in typescript Mr Prime uh I",
    "start": "375419",
    "end": "381660"
  },
  {
    "text": "love anything on front end Masters all right there we go all right uh",
    "start": "381660",
    "end": "388440"
  },
  {
    "text": "illustration of prim's algorithm okay consider the following uh graph here okay so which one step one first select",
    "start": "388440",
    "end": "393960"
  },
  {
    "text": "one okay so we're gonna we're gonna grab this one that seems pretty nice uh my guess is that we only have four and eights to choose from so my guess is now",
    "start": "393960",
    "end": "401460"
  },
  {
    "text": "you have a second problem with the running time which is how do you select which Edge to cut right",
    "start": "401460",
    "end": "407960"
  },
  {
    "text": "so they're probably gonna suggest using a heap because you know running time so this is the problem okay so as you get further",
    "start": "408780",
    "end": "415259"
  },
  {
    "text": "into your career you realize that all data structures are a lie and just use an array but until then",
    "start": "415259",
    "end": "422300"
  },
  {
    "text": "when it comes to algorithms you don't do that right and so this is the hard part is the Practical algorithm versus the",
    "start": "422460",
    "end": "428520"
  },
  {
    "text": "actual algorithm right or the Practical algorithm versus the actual or",
    "start": "428520",
    "end": "433620"
  },
  {
    "text": "the actual algorithm versus the actual algorithm you get that one I think you do a heap is an array winky face",
    "start": "433620",
    "end": "440400"
  },
  {
    "text": "you're lucky you're lucky you're correct smart ass",
    "start": "440400",
    "end": "446520"
  },
  {
    "text": "I'll let this Heap I'll let the uh this flies in the face of my Heap but I'm gonna let it happen okay",
    "start": "446520",
    "end": "453840"
  },
  {
    "text": "he lost it in the war I lost my Heap in the war okay let's see okay blood of the blah so there's really only two edges",
    "start": "453840",
    "end": "459419"
  },
  {
    "text": "that are available yep that's what I said okay there's only two we choose this one so we choose that one boom welcome to Costco the edges contain the",
    "start": "459419",
    "end": "465539"
  },
  {
    "text": "incomplete MST uh and to other vertices so we'd add two new edges at this point we'd add 8 and 11 which means that",
    "start": "465539",
    "end": "473940"
  },
  {
    "text": "we'd have to have these like these interesting weights going on right so the minimum weight would be eight whereas this one would be 12 and this",
    "start": "473940",
    "end": "480599"
  },
  {
    "text": "one would be now what is that 4 plus 11 15. so obviously we choose this one now this one's selected now we kind of have",
    "start": "480599",
    "end": "486900"
  },
  {
    "text": "this problem right here which is you now have an edge and which is connected to two uh non what are they called Fringe",
    "start": "486900",
    "end": "493919"
  },
  {
    "text": "vertices Fringe Fringe Fringe Fringe vertices okay cool all right step three",
    "start": "493919",
    "end": "500039"
  },
  {
    "text": "connecting uh let's see the edge connecting the incomplete MST uh to other vertices let's see among these",
    "start": "500039",
    "end": "506520"
  },
  {
    "text": "edges the minimum weight is eight yes it is so this one would be the next",
    "start": "506520",
    "end": "512279"
  },
  {
    "text": "one uh we could have also included one and two uh let's see one to two is this one to two no that's one to seven",
    "start": "512279",
    "end": "518640"
  },
  {
    "text": "all right the yeah let's see the edges that can uh that connect the incomplete MST with The",
    "start": "518640",
    "end": "524159"
  },
  {
    "text": "Fringe vertices are these ones okay so now the real question is how is selecting these things right so I think",
    "start": "524159",
    "end": "529620"
  },
  {
    "text": "the interesting part about all of this is how do you efficiently select all of this right",
    "start": "529620",
    "end": "536600"
  },
  {
    "text": "exactly exactly it doesn't show I know but we already know that that happens internally right that's why we're",
    "start": "537300",
    "end": "543120"
  },
  {
    "text": "choosing these things um I'll show you a dangling vertices oh baby",
    "start": "543120",
    "end": "548399"
  },
  {
    "text": "oh maybe yeah it doesn't show that uh honestly a question what is weight in",
    "start": "548399",
    "end": "553980"
  },
  {
    "text": "this context it's the number associated with an edge so you can think of it like travel time right if this was a map",
    "start": "553980",
    "end": "560820"
  },
  {
    "text": "traveling from zero to seven takes eight traveling from zero to uh one takes four",
    "start": "560820",
    "end": "566940"
  },
  {
    "text": "and so you know can you make it so that it takes what what is the easiest way to get to four well probably on this one is",
    "start": "566940",
    "end": "573899"
  },
  {
    "text": "to go eight one two ten right eight one two ten yeah right",
    "start": "573899",
    "end": "579000"
  },
  {
    "text": "right yes",
    "start": "579000",
    "end": "582660"
  },
  {
    "text": "so I think it's good thank you very much for that brand new",
    "start": "584700",
    "end": "590100"
  },
  {
    "text": "twitch Prime and Evo smash with that brand new twitch Prime show the best",
    "start": "590100",
    "end": "595260"
  },
  {
    "text": "show back of hand you know what I mean you come at me like",
    "start": "595260",
    "end": "601980"
  },
  {
    "text": "that you know what you're gonna get okay dijkstra or a star well I mean a star is just a",
    "start": "601980",
    "end": "608459"
  },
  {
    "text": "just an iteration on dijkstra and dextra okay quit being such a dixtra",
    "start": "608459",
    "end": "614160"
  },
  {
    "text": "okay um let's see the connecting edges okay so I think I understand the algorithm at this",
    "start": "614160",
    "end": "620940"
  },
  {
    "text": "point blah blah blah blah blah blah blah um the real question is how do they select which edges they're looking at",
    "start": "620940",
    "end": "626399"
  },
  {
    "text": "because they're not they're kind of skipping one step that's kind of interesting which is",
    "start": "626399",
    "end": "631500"
  },
  {
    "text": "how do you know when to remove an edge right so this one right here this yellow 111. when do you remove it because it just",
    "start": "631500",
    "end": "638339"
  },
  {
    "text": "says okay find all the edges uh connecting the incomplete MST to the other vertices because if you do that",
    "start": "638339",
    "end": "643860"
  },
  {
    "text": "now you have this whole problem where you actually have",
    "start": "643860",
    "end": "648860"
  },
  {
    "text": "you just keep edging a lot of public edging hell yeah girl uh because the problem here is that",
    "start": "650519",
    "end": "656339"
  },
  {
    "text": "you don't want to cycle through stuff right you don't want to go through every single node and check every single edge",
    "start": "656339",
    "end": "663180"
  },
  {
    "text": "right because then you're performing an e operation for every single time so that means minimum the running time",
    "start": "663180",
    "end": "669680"
  },
  {
    "text": "but then you have to go through all connected edges which could be at worst e",
    "start": "669680",
    "end": "674820"
  },
  {
    "text": "so would you have v e squared if you did that just saying",
    "start": "674820",
    "end": "679860"
  },
  {
    "text": "but you wouldn't need to do that because you'd use a heap so then you what would you have what the hell would you have you'd have like v e log v e",
    "start": "679860",
    "end": "688579"
  },
  {
    "text": "that's way too confusing I'm off the edge I'm off the rails here okay let's see the running time give me the running time shut up I don't need you I don't",
    "start": "689339",
    "end": "695220"
  },
  {
    "text": "need you how to implement okay I don't need to implement it give me the running time baby okay other implementations okay the time complexity is oh why is",
    "start": "695220",
    "end": "702899"
  },
  {
    "text": "that why is it node vertices squared okay if",
    "start": "702899",
    "end": "709560"
  },
  {
    "text": "the input graph is represented using an adjacency list then the complexity of Prince algorithm can be reduced to e log",
    "start": "709560",
    "end": "715200"
  },
  {
    "text": "V okay that makes sense with the help of a binary tree a binary Heap a binary uh in this implementation",
    "start": "715200",
    "end": "722820"
  },
  {
    "text": "we always consider the spanning tree to start from uh the root of the graph auxiliary space okay okay so",
    "start": "722820",
    "end": "730860"
  },
  {
    "text": "I have to argue in my head oh Buneary um not to argue in my head why is it V",
    "start": "730860",
    "end": "736019"
  },
  {
    "text": "why is it V squared so let's kind of argue this out right this is a very important uh hey I'm give",
    "start": "736019",
    "end": "742920"
  },
  {
    "text": "it to Middle okay who's definitely became a member did someone just subscribe to my YouTube",
    "start": "742920",
    "end": "750120"
  },
  {
    "text": "hey thank you whatever you just did",
    "start": "750120",
    "end": "753740"
  },
  {
    "text": "thank you it's not a binary tree binary Heap Heap Heap I said Tree on accident",
    "start": "756420",
    "end": "761459"
  },
  {
    "text": "it's a binary Heap right Heap he was the answer I was right on the Heap heaps",
    "start": "761459",
    "end": "766800"
  },
  {
    "text": "probably what you're going to want to use to get the super efficient stuff but the problem again is that",
    "start": "766800",
    "end": "772320"
  },
  {
    "text": "you still have this problem with heaps which is you're still playing what's a binary Heap it's just you typically just",
    "start": "772320",
    "end": "778740"
  },
  {
    "text": "call that I love you uh somebody said he catch the live",
    "start": "778740",
    "end": "783839"
  },
  {
    "text": "stream instead of video in a video today so I did oh hey well thank you uh Duncan the dev well welcome Hey Primal hey uh o",
    "start": "783839",
    "end": "791160"
  },
  {
    "text": "of E equals V squared",
    "start": "791160",
    "end": "794540"
  },
  {
    "text": "why",
    "start": "800040",
    "end": "802639"
  },
  {
    "text": "how does that make sense",
    "start": "814139",
    "end": "817160"
  },
  {
    "text": "oh and help me help me understand that because I mean just like me just trying to look at this",
    "start": "819839",
    "end": "826100"
  },
  {
    "text": "how does Edge equal V squared in this situation right",
    "start": "827160",
    "end": "834019"
  },
  {
    "text": "welcome to Costco I love you",
    "start": "834019",
    "end": "838940"
  },
  {
    "text": "uh for every node is connected uh v s v let's see if every note is connected okay",
    "start": "842220",
    "end": "850399"
  },
  {
    "text": "okay Max connections okay",
    "start": "850500",
    "end": "854180"
  },
  {
    "text": "hmm time collection is vertices uh vertices squared okay so let's let's I want to",
    "start": "858120",
    "end": "863160"
  },
  {
    "text": "think about this why is it vertices squared okay well obviously you have to visit every vertices can we all agree to",
    "start": "863160",
    "end": "868620"
  },
  {
    "text": "that one you have to visit every vertices okay so that is true",
    "start": "868620",
    "end": "874680"
  },
  {
    "text": "so no matter what it's V minimum all right so then you have the Heap problem which insertion and deletion is",
    "start": "874680",
    "end": "882899"
  },
  {
    "text": "log the amount of items log e so that's where I'm starting to get",
    "start": "882899",
    "end": "888660"
  },
  {
    "text": "confused as to where they get um where we're getting this V squared business from so my guess is that",
    "start": "888660",
    "end": "895800"
  },
  {
    "text": "this is how are they getting that how are they getting that",
    "start": "895800",
    "end": "901079"
  },
  {
    "text": "and also finally if if V is squared I don't believe you guys",
    "start": "901079",
    "end": "906899"
  },
  {
    "text": "V squared cannot equally because then this statement makes absolutely no sense",
    "start": "906899",
    "end": "912779"
  },
  {
    "text": "now now I'm gonna have to go look this up is that true I'm trying to think of why that is true and I can't think of a reason why that's true",
    "start": "912779",
    "end": "919380"
  },
  {
    "text": "I cannot think of a reason why this uh why V squared equals e because then this makes like literally",
    "start": "919380",
    "end": "925980"
  },
  {
    "text": "no sense there's no way",
    "start": "925980",
    "end": "932300"
  },
  {
    "text": "no no a full graph E equals 2v doesn't it",
    "start": "938279",
    "end": "946639"
  },
  {
    "text": "I think you're wrong on this",
    "start": "949320",
    "end": "952639"
  },
  {
    "text": "yeah the average number of connections doesn't it turns out your bad feelings okay okay",
    "start": "958320",
    "end": "964680"
  },
  {
    "text": "hold on hold on hold on hold on maybe you're right okay okay so we got three let's do four that'd be one two three",
    "start": "964680",
    "end": "971339"
  },
  {
    "text": "let's do five then it'd be",
    "start": "971339",
    "end": "975920"
  },
  {
    "text": "on a fully connected graph every time you add a node you do not double the amount of edges",
    "start": "980279",
    "end": "987920"
  },
  {
    "text": "I think you guys are wrong okay I'm gonna go read I gotta go read okay radius thank you okay okay okay",
    "start": "994800",
    "end": "1000320"
  },
  {
    "text": "ready yes radius",
    "start": "1000320",
    "end": "1005259"
  },
  {
    "text": "radius",
    "start": "1017420",
    "end": "1020259"
  },
  {
    "text": "okay hold on okay hold on hold on okay okay my question is about whether",
    "start": "1026839",
    "end": "1033199"
  },
  {
    "text": "uh Big O of V plus E equals this basically if o of V plus e is a linear",
    "start": "1033199",
    "end": "1039558"
  },
  {
    "text": "time such that V plus E equals n wouldn't V squared also be linear time I",
    "start": "1039559",
    "end": "1044720"
  },
  {
    "text": "assume the worst case upper Bound for V plus e is an edge between every vertices yes that would make sense",
    "start": "1044720",
    "end": "1051340"
  },
  {
    "text": "uh I love you which will result in V minus one squared edges",
    "start": "1051340",
    "end": "1057640"
  },
  {
    "text": "it's that minus one that got me isn't it it's that minus one that got me I think",
    "start": "1061039",
    "end": "1066740"
  },
  {
    "text": "you're right now I also assume that I can consider uh let's see I also assume that can be",
    "start": "1066740",
    "end": "1071780"
  },
  {
    "text": "considered V squared I was so I think it'd be equivalent to this any runtime that is a big O of V plus e",
    "start": "1071780",
    "end": "1078320"
  },
  {
    "text": "is also a v squared uh see for the reason you articulated E equals o That's e this uh that doesn't mean that it's a",
    "start": "1078320",
    "end": "1085640"
  },
  {
    "text": "good idea to say the runtime is uh this uh though since that's less precise Bound in a sparse graph is a much",
    "start": "1085640",
    "end": "1092539"
  },
  {
    "text": "tighter bound than this okay fair fair however the converse isn't true for example consider this algorithm for each",
    "start": "1092539",
    "end": "1098419"
  },
  {
    "text": "node V and V for each node u and v print this the algorithm has a run time of",
    "start": "1098419",
    "end": "1103460"
  },
  {
    "text": "this and its runtime doesn't depend on the number of edges in the graph therefore would be it would not be correct to say that the runtime is this",
    "start": "1103460",
    "end": "1109820"
  },
  {
    "text": "since the graph with the beautiful this is actually a really great way to explain it okay",
    "start": "1109820",
    "end": "1116240"
  },
  {
    "text": "there we go this is actually really really good this makes a lot more sense I like this dude I have it so graph",
    "start": "1116240",
    "end": "1123140"
  },
  {
    "text": "Theory graph stuff I haven't looked at in almost 15 years yo dog I heard you like a race",
    "start": "1123140",
    "end": "1131500"
  },
  {
    "text": "oh this makes perfect sense okay so this this makes a lot of sense this makes perfect sense because as you",
    "start": "1133160",
    "end": "1138740"
  },
  {
    "text": "can see right here so check this out so start with three right so the equation was this V minus one",
    "start": "1138740",
    "end": "1147520"
  },
  {
    "text": "uh cubed are uh squared so you know apply the whole foil principle right",
    "start": "1148280",
    "end": "1153919"
  },
  {
    "text": "you're going to get something like this V and then some crap right and so in Big O you just take this right you don't",
    "start": "1153919",
    "end": "1160039"
  },
  {
    "text": "consider all the crap right so there is no minus 2v plus one or whatever nonsense it is",
    "start": "1160039",
    "end": "1166700"
  },
  {
    "text": "right is that what it is I haven't foiled I haven't foiled since like seventh grade I can't remember what it is right so 2v plus one boom right so",
    "start": "1166700",
    "end": "1175580"
  },
  {
    "text": "you just take that you don't care about this because it's about the growth it's",
    "start": "1175580",
    "end": "1180799"
  },
  {
    "text": "not about the Precision right and so you always drop the lower factors you only keep the highest one the most beautiful",
    "start": "1180799",
    "end": "1186740"
  },
  {
    "text": "the fastest growing and this makes sense so let's just apply this equation right here so a fully connected graph would be",
    "start": "1186740",
    "end": "1192740"
  },
  {
    "text": "three minus uh one squared which equals four which is well",
    "start": "1192740",
    "end": "1199760"
  },
  {
    "text": "that's a that's not correct okay so let's just pretend it's four big",
    "start": "1199760",
    "end": "1206140"
  },
  {
    "text": "am I missing a minus one somewhere in here all right so there you go let's try it again oh",
    "start": "1206480",
    "end": "1212840"
  },
  {
    "text": "oh there's a divided by two somewhere in there okay so I must have got somewhere something wrong somewhere along the way",
    "start": "1212840",
    "end": "1219700"
  },
  {
    "text": "thank you let's see which will result okay so this statement is incorrect right that statement is incorrect",
    "start": "1221720",
    "end": "1227419"
  },
  {
    "text": "because if you look at this you got one two three four five six edges you have six edges and you have four that would",
    "start": "1227419",
    "end": "1234500"
  },
  {
    "text": "be nine based on that equation so that's not right either",
    "start": "1234500",
    "end": "1239320"
  },
  {
    "text": "I'm trying to think of why oh this makes a lot okay so that's a",
    "start": "1244400",
    "end": "1251600"
  },
  {
    "text": "much different equation than going on here oh because it's not directed oh well",
    "start": "1251600",
    "end": "1256700"
  },
  {
    "text": "oh oh [Music]",
    "start": "1256700",
    "end": "1263260"
  },
  {
    "text": "directed yes facts facts and logic I just got fact and logic so hard",
    "start": "1263260",
    "end": "1269780"
  },
  {
    "text": "um trapezoidal some okay guy get out of here guy with your trapezoidal business okay",
    "start": "1269780",
    "end": "1279460"
  },
  {
    "text": "okay I'm starting to get a bunch of different values here you got this one now we got this one coming in",
    "start": "1280160",
    "end": "1286520"
  },
  {
    "text": "okay what's up hey JD you like dags yo I heard your dags like zags okay so I",
    "start": "1286520",
    "end": "1292280"
  },
  {
    "text": "still don't understand why okay so let's try to work out in our head why is by the way this is a great for those that",
    "start": "1292280",
    "end": "1299240"
  },
  {
    "text": "are wondering this is a great way to like re-re remember how algorithms work which is to take a",
    "start": "1299240",
    "end": "1306860"
  },
  {
    "text": "moment and understand like to actually argue with yourself so instead of just looking at the answer try to recall it",
    "start": "1306860",
    "end": "1313400"
  },
  {
    "text": "or try to try to like uh compute it why is it V squared how can we justify this",
    "start": "1313400",
    "end": "1319400"
  },
  {
    "text": "to ourselves I mean so the very first simple thing is",
    "start": "1319400",
    "end": "1325159"
  },
  {
    "text": "is that every single time we do an operation we have to visit one node so minimally",
    "start": "1325159",
    "end": "1331520"
  },
  {
    "text": "it is V right so we we we accounted for the first V but the second V the Menage etois the",
    "start": "1331520",
    "end": "1338419"
  },
  {
    "text": "Big O and the two v's how does this work this is where it gets confusing okay",
    "start": "1338419",
    "end": "1344260"
  },
  {
    "text": "all right so all right so this is what I see right away",
    "start": "1345500",
    "end": "1351140"
  },
  {
    "text": "is that if you consider the binary Heap for every single V wow we have to do a a",
    "start": "1351140",
    "end": "1357140"
  },
  {
    "text": "log uh a log of e right so this is the binary Heap operation every single time we have to do that",
    "start": "1357140",
    "end": "1365559"
  },
  {
    "text": "that makes sense",
    "start": "1371720",
    "end": "1374679"
  },
  {
    "text": "we have to do more than that",
    "start": "1378220",
    "end": "1381880"
  },
  {
    "text": "do we have to do more okay so now hold on hold on I think I might be uh",
    "start": "1383720",
    "end": "1390820"
  },
  {
    "text": "hey thank you doctor the doctor we have gifted now 10 Subs this goes out to the privilege and that was actual David",
    "start": "1390919",
    "end": "1397280"
  },
  {
    "text": "Hasselhoff um you need to select the next vertex to add to the minimum spanning tree this",
    "start": "1397280",
    "end": "1403340"
  },
  {
    "text": "operation uh needs to be done V times because they're okay I'm listening to",
    "start": "1403340",
    "end": "1409760"
  },
  {
    "text": "music okay okay let's hear this one this operation which needs to be done V times",
    "start": "1409760",
    "end": "1416120"
  },
  {
    "text": "absolutely correct because there are V vertices yes so it can take up up to V time in the worst case because you must",
    "start": "1416120",
    "end": "1422360"
  },
  {
    "text": "scan all vertices to find the smallest Edge",
    "start": "1422360",
    "end": "1426880"
  },
  {
    "text": "but do you need to scan all vertices why do you need to scan all vertices",
    "start": "1445039",
    "end": "1452080"
  },
  {
    "text": "that's my question why do you need to scan all vertices",
    "start": "1456679",
    "end": "1461020"
  },
  {
    "text": "no because that should be what the Heap is for right so",
    "start": "1474440",
    "end": "1479720"
  },
  {
    "text": "the Heap",
    "start": "1479720",
    "end": "1482740"
  },
  {
    "text": "damn it because vert is French for green and green means go scan them all",
    "start": "1491620",
    "end": "1498940"
  },
  {
    "text": "every note is a four yeah that's you can think of it totally agnostic approaches that any possible Edge might or might",
    "start": "1500480",
    "end": "1506120"
  },
  {
    "text": "not exist and since the total number of possible edges grows like this the expected value of uh",
    "start": "1506120",
    "end": "1512000"
  },
  {
    "text": "the expected value for a number of edges is this okay now you got me on that one uh I'm",
    "start": "1512000",
    "end": "1518960"
  },
  {
    "text": "not exactly following along all right so now let's try Okay so",
    "start": "1518960",
    "end": "1525020"
  },
  {
    "text": "I'm still having trouble seeing why it's V squared and why it's not V log e",
    "start": "1525020",
    "end": "1531760"
  },
  {
    "text": "well I mean okay so actually there if you insert e items into a Heap what",
    "start": "1534140",
    "end": "1539659"
  },
  {
    "text": "is what is the time of that",
    "start": "1539659",
    "end": "1543039"
  },
  {
    "text": "is that e log e it's not really e-loggy because",
    "start": "1544940",
    "end": "1552880"
  },
  {
    "text": "I don't I don't want to use this yet I don't want to use this yet all right fine we'll use it",
    "start": "1561980",
    "end": "1567260"
  },
  {
    "text": "we'll use it well priority queue is the Heap that's you're using the same term here",
    "start": "1567260",
    "end": "1574840"
  },
  {
    "text": "uh",
    "start": "1575360",
    "end": "1578320"
  },
  {
    "text": "I'm not gonna lie to you",
    "start": "1604580",
    "end": "1608080"
  },
  {
    "text": "not gonna lie to you hey hold on whoa whoa whoa whoa whoa",
    "start": "1615200",
    "end": "1620659"
  },
  {
    "text": "whoa whoa whoa whoa whoa whoa whoa whoa whoa whoa whoa whoa what do you mean hold on inserting n items into a heap",
    "start": "1620659",
    "end": "1626480"
  },
  {
    "text": "can be done in linear time where link me that how's that possible",
    "start": "1626480",
    "end": "1631720"
  },
  {
    "text": "the truth hurts please don't lie the truth the truth is that computer science Prim know is also a jarnix",
    "start": "1632539",
    "end": "1638900"
  },
  {
    "text": "algorithm is a greedy algorithm okay we already know all this okay okay wherever your name is Prim the algorithm was",
    "start": "1638900",
    "end": "1644779"
  },
  {
    "text": "developed in 1930 by dude okay so can we first just take a moment and realize",
    "start": "1644779",
    "end": "1650240"
  },
  {
    "text": "that wasn't the first graph algorithm done in was it Euler I always get the two",
    "start": "1650240",
    "end": "1656779"
  },
  {
    "text": "confused was it Euler or Gauss that did it or they had to do this like seven",
    "start": "1656779",
    "end": "1662120"
  },
  {
    "text": "bridge problem and they broke it into a graph",
    "start": "1662120",
    "end": "1668539"
  },
  {
    "text": "Oiler right yeah it's always Euler okay it's always over",
    "start": "1668539",
    "end": "1675140"
  },
  {
    "text": "Gauss is the [ __ ] Euler is like the cool guy right the traveling salesman was Oiler",
    "start": "1675140",
    "end": "1682220"
  },
  {
    "text": "it was God got him yeah you pronounce that Euler I know it is no you don't pronounce it",
    "start": "1682220",
    "end": "1688640"
  },
  {
    "text": "Euler Euler I think you actually mentioned it yeah",
    "start": "1688640",
    "end": "1694159"
  },
  {
    "text": "yeah I mentioned this because it's such a fun story Gauss is goat no Gauss is a total [ __ ]",
    "start": "1694159",
    "end": "1701240"
  },
  {
    "text": "he also did a lot of great things but still he was a complete [ __ ] so",
    "start": "1701240",
    "end": "1707600"
  },
  {
    "text": "Euler not Euler it's Euler",
    "start": "1707600",
    "end": "1712778"
  },
  {
    "text": "um without a heap uh should be e log V okay okay hold on let's let's go look at this",
    "start": "1713659",
    "end": "1719419"
  },
  {
    "text": "one okay description initialize the tree choose a Vertex scroll uh grow the tree by one Edge uh let's see of the edge",
    "start": "1719419",
    "end": "1725299"
  },
  {
    "text": "that connects the tree yeah yeah yeah yeah not in the tree uh find the minimum weight and let that transfer to the edge repeat step two until all vertices are",
    "start": "1725299",
    "end": "1732020"
  },
  {
    "text": "in the tree okay that makes sense",
    "start": "1732020",
    "end": "1735940"
  },
  {
    "text": "okay so the reason why I'm tripping up on why is it a v squared is because it feels like e is a huge running it it",
    "start": "1737720",
    "end": "1744380"
  },
  {
    "text": "feels like e is the thing you're looking at",
    "start": "1744380",
    "end": "1748059"
  },
  {
    "text": "okay okay okay I think I think I'm starting to see it I think I'm starting to see it I think I'm starting to see it",
    "start": "1762320",
    "end": "1769840"
  },
  {
    "text": "I'm still struggling why e isn't in there okay",
    "start": "1769940",
    "end": "1776360"
  },
  {
    "text": "okay I'm still struggling why e is not in there I think the reason why you would consider e as a v squared is because",
    "start": "1776360",
    "end": "1782720"
  },
  {
    "text": "that's the worst case given for an Arbiter yes e is definitely more accurate see that's okay so that's what my whole problem is",
    "start": "1782720",
    "end": "1788659"
  },
  {
    "text": "is why isn't this thing e",
    "start": "1788659",
    "end": "1792580"
  },
  {
    "text": "but it's it feels more than e and what I mean by that is okay so this is what I'm",
    "start": "1793760",
    "end": "1799159"
  },
  {
    "text": "playing in my head right now so so check this out let's take the let's take the case of a fully connected graph right",
    "start": "1799159",
    "end": "1806500"
  },
  {
    "text": "let's go like that there we go we got a fully connected graph right",
    "start": "1806899",
    "end": "1811940"
  },
  {
    "text": "all right and so we start here well what do we do we're gonna check",
    "start": "1811940",
    "end": "1818419"
  },
  {
    "text": "these three right there right one two three right and so we're gonna check a lot of the edges we're gonna pick one of",
    "start": "1818419",
    "end": "1823880"
  },
  {
    "text": "these it doesn't really matter what it is after that we go to this one we remove this Edge",
    "start": "1823880",
    "end": "1829399"
  },
  {
    "text": "from the one that we have and now we check one two and then we check the remaining ones",
    "start": "1829399",
    "end": "1835700"
  },
  {
    "text": "right and so this feels very e-directed right because yes I am visiting okay so I can",
    "start": "1835700",
    "end": "1841700"
  },
  {
    "text": "see this so I can I'm definitely starting to see this thing as being something that's",
    "start": "1841700",
    "end": "1847279"
  },
  {
    "text": "going to be like one of those uh n times n plus one businesses or n minus one divided by two businesses",
    "start": "1847279",
    "end": "1853700"
  },
  {
    "text": "this is that pattern right because you'll you'll go like this you'll go to a you'll go to a b you'll go to a b c",
    "start": "1853700",
    "end": "1861679"
  },
  {
    "text": "you'll go to a b c d right right so I can see the thing happening",
    "start": "1861679",
    "end": "1868039"
  },
  {
    "text": "right I can I can see this thing happening right here welcome to Costco I love you",
    "start": "1868039",
    "end": "1877120"
  },
  {
    "text": "I'm just curious why e is not being used in here I I don't understand that Costco I love you",
    "start": "1884000",
    "end": "1891700"
  },
  {
    "text": "let's see you might want to have one vertices making five connections",
    "start": "1892820",
    "end": "1898179"
  },
  {
    "text": "what Dylan stop trying to get me banned wait what is Dylan doing Dylan what the hell are you doing Dylan",
    "start": "1898220",
    "end": "1904820"
  },
  {
    "text": "big hell hello notation big hell no notation hey guio thank you very much and Flash uh kohana I haven't done I",
    "start": "1904820",
    "end": "1912260"
  },
  {
    "text": "haven't done graph stuff let's see you're thinking about this wrong you're not removing edges just uh failing to add you're breaking up the band and",
    "start": "1912260",
    "end": "1918620"
  },
  {
    "text": "reforming uh without them no I I was I was removing it right I didn't I didn't look at this Edge so once once I did this one",
    "start": "1918620",
    "end": "1926480"
  },
  {
    "text": "okay so let's call this thing uh let's go like this we're going to call this thing a b c d",
    "start": "1926480",
    "end": "1932659"
  },
  {
    "text": "and then call this one one two three four five right so we start with a and",
    "start": "1932659",
    "end": "1940039"
  },
  {
    "text": "we actually check a one two three right and so one's been chosen then we're actually gonna go do B two three",
    "start": "1940039",
    "end": "1947299"
  },
  {
    "text": "four damn it six okay and then we go to C so it doesn't",
    "start": "1947299",
    "end": "1954620"
  },
  {
    "text": "really matter which Edge was chosen three or four we'll just choose three to make it easy uh then we're gonna go two",
    "start": "1954620",
    "end": "1961840"
  },
  {
    "text": "let's see two o but then four also gets removed as well",
    "start": "1961840",
    "end": "1967220"
  },
  {
    "text": "it doesn't really get removed because you can't just remove it",
    "start": "1967220",
    "end": "1971980"
  },
  {
    "text": "wouldn't it technically get popped from the Heap and then you realize this ain't it",
    "start": "1972799",
    "end": "1979360"
  },
  {
    "text": "you check the edges of the current node",
    "start": "1999140",
    "end": "2003120"
  },
  {
    "text": "we have to consider if a Vertex is visited or not right but you but you still have to you still have to",
    "start": "2007240",
    "end": "2014399"
  },
  {
    "text": "you keep a path until it's no longer let's say longer than some other path to the same point probably possible not to",
    "start": "2019840",
    "end": "2025600"
  },
  {
    "text": "have to Traverse every point I'm also an idiot yeah",
    "start": "2025600",
    "end": "2030600"
  },
  {
    "text": "the problem is is that the other algorithms I really knowed it's the second time you you've done",
    "start": "2030940",
    "end": "2036940"
  },
  {
    "text": "this guy you're gonna get banned",
    "start": "2036940",
    "end": "2042760"
  },
  {
    "text": "don't all right let's ask let's ask Chad",
    "start": "2042760",
    "end": "2048040"
  },
  {
    "text": "chipity because obviously I'm too stupid I'm not seeing it I'm clearly not seeing the the very",
    "start": "2048040",
    "end": "2053858"
  },
  {
    "text": "obvious thing right here I don't know why I'm not saying it I'm",
    "start": "2053859",
    "end": "2058898"
  },
  {
    "text": "just not seeing it I must be the dummy",
    "start": "2058899",
    "end": "2063000"
  },
  {
    "text": "it does take login to extract a node from the queue is it a node from the queue it's not a node from the queue",
    "start": "2066159",
    "end": "2073260"
  },
  {
    "text": "foreign",
    "start": "2081760",
    "end": "2083940"
  },
  {
    "text": "what is prim's uh algorithms uh running uh running time and why it's that",
    "start": "2093599",
    "end": "2102720"
  },
  {
    "text": "you don't it never precede chat Jeopardy because the moment you say explain why",
    "start": "2103240",
    "end": "2108460"
  },
  {
    "text": "it's N squared or some crap it just might make up an answer right you don't want to be doing that",
    "start": "2108460",
    "end": "2114480"
  },
  {
    "text": "all right all right all right all right all right all right prim's algorithm is a classic greedy algorithm used in computer",
    "start": "2114820",
    "end": "2120280"
  },
  {
    "text": "science for volleyball okay okay I didn't ask that notice that explain what is prim's algorithms running time",
    "start": "2120280",
    "end": "2126720"
  },
  {
    "text": "did I just get shippity here okay okay okay okay",
    "start": "2131619",
    "end": "2137040"
  },
  {
    "text": "in terms of running time the algorithms efficiency heavily depends on the data structures that are used for the graph and The Ordering of the edges edges by",
    "start": "2137440",
    "end": "2144280"
  },
  {
    "text": "weight if the graph is stored as an adjacency Matrix a dense graph representation the running time for",
    "start": "2144280",
    "end": "2149560"
  },
  {
    "text": "prim's algorithm is V squared where V is the number of vertices this is because each extract Min operation in the main",
    "start": "2149560",
    "end": "2156880"
  },
  {
    "text": "Loop of the algorithm takes V time",
    "start": "2156880",
    "end": "2160680"
  },
  {
    "text": "all right this is because okay okay two if the graph is stored as adjacency list and a binary Heap is used to store the",
    "start": "2170380",
    "end": "2176380"
  },
  {
    "text": "vertices by distance from the current tree a lighter weight representation suitable",
    "start": "2176380",
    "end": "2183160"
  },
  {
    "text": "for sparse graphs the running time for prim's algorithm goes to e log V where e is the number of edges and V is",
    "start": "2183160",
    "end": "2189940"
  },
  {
    "text": "the number of vertices",
    "start": "2189940",
    "end": "2192720"
  },
  {
    "text": "I think I get that one or is the number of edges and V is the number of vertices of the extract mean operation in this",
    "start": "2204339",
    "end": "2209619"
  },
  {
    "text": "case uh log V yeah that's because you have to remove one thing at a time right",
    "start": "2209619",
    "end": "2215160"
  },
  {
    "text": "okay so you're actually keeping the distances on V",
    "start": "2215800",
    "end": "2220260"
  },
  {
    "text": "welcome to Costco I love you I think I see that one",
    "start": "2225880",
    "end": "2232780"
  },
  {
    "text": "welcome to Costco if the graph is stored as an adjacency list in a Fibonacci Heap which by the way I cannot do Fibonacci",
    "start": "2232780",
    "end": "2238780"
  },
  {
    "text": "heaps okay those are crazy is used to store vertices by distance from the current tree the running time of premise",
    "start": "2238780",
    "end": "2244480"
  },
  {
    "text": "algorithm can be improved to e plus v log V with the Fibonacci Heap the decrease key operations can be performed",
    "start": "2244480",
    "end": "2251380"
  },
  {
    "text": "in constant amortized time which is more efficient",
    "start": "2251380",
    "end": "2256260"
  },
  {
    "text": "uh Fibonacci Heap is straight magic dude it is like I've even I've I've tried I've tried like I haven't actually",
    "start": "2265240",
    "end": "2271060"
  },
  {
    "text": "really tried to to like build a Fibonacci Heap",
    "start": "2271060",
    "end": "2276280"
  },
  {
    "text": "but I've played a little bit let's see for a case of an adjacency Matrix when you're",
    "start": "2276280",
    "end": "2281980"
  },
  {
    "text": "given uh when you're at a given node you have to iterate over all possible edges in The Matrix to find the minimum Edge",
    "start": "2281980",
    "end": "2287980"
  },
  {
    "text": "which is why which is uh which is oov so OV squared is to iterate over all nodes",
    "start": "2287980",
    "end": "2293740"
  },
  {
    "text": "in the worst case correct",
    "start": "2293740",
    "end": "2300240"
  },
  {
    "text": "okay I can see that you know I think actually dude okay I",
    "start": "2303640",
    "end": "2310420"
  },
  {
    "text": "totally understand now why okay okay I totally get why is V squared equal to e I'm so stupid of course",
    "start": "2310420",
    "end": "2317740"
  },
  {
    "text": "of course when you say an adjacency matrix it's it's so stupid how did I not see this immediately",
    "start": "2317740",
    "end": "2324820"
  },
  {
    "text": "right an adjacency Matrix is a v by V right where obviously the center is",
    "start": "2324820",
    "end": "2331780"
  },
  {
    "text": "doesn't exist right unless there's like self references right and so",
    "start": "2331780",
    "end": "2337599"
  },
  {
    "text": "I'm so stupid for not just making the most obvious Connection in my head that",
    "start": "2337599",
    "end": "2343180"
  },
  {
    "text": "e in worst case literally equals V squared",
    "start": "2343180",
    "end": "2349560"
  },
  {
    "text": "it's technically V squared minus V right wouldn't that be like the actual answer because assuming there's no self",
    "start": "2349660",
    "end": "2356260"
  },
  {
    "text": "references right gosh I'm such a dummy not seeing this",
    "start": "2356260",
    "end": "2362260"
  },
  {
    "text": "how did I not see this one how did I not see that duh right",
    "start": "2362260",
    "end": "2371579"
  },
  {
    "text": "well that's so half of that I mean first off half of it I'm not even convinced that's an easy algorithm to even",
    "start": "2375880",
    "end": "2382000"
  },
  {
    "text": "Implement at all okay you're gonna use half the square yes you",
    "start": "2382000",
    "end": "2387280"
  },
  {
    "text": "can use half a square but that's only in a undirected thing which we're only dealing with undirected",
    "start": "2387280",
    "end": "2393640"
  },
  {
    "text": "right now",
    "start": "2393640",
    "end": "2396240"
  },
  {
    "text": "oh really light a store interesting electrical field is voltage squared minus voltage",
    "start": "2402820",
    "end": "2409800"
  },
  {
    "text": "are you trying to tell me that there's something uh oddly similar here that e sub f equals",
    "start": "2412119",
    "end": "2418420"
  },
  {
    "text": "V squared minus V if you're dealing with an undirector then yes you could only use half I know",
    "start": "2418420",
    "end": "2424720"
  },
  {
    "text": "but that doesn't somehow make it let's see nah this algo is not very intuitive and crisco's and prims can",
    "start": "2424720",
    "end": "2431020"
  },
  {
    "text": "produce potentially different msts depending on the graph if the msts are not unique yeah equals mc squared shut",
    "start": "2431020",
    "end": "2436780"
  },
  {
    "text": "the front door all right",
    "start": "2436780",
    "end": "2442240"
  },
  {
    "text": "all right so I want to still understand this one right here sorry this is just me going through college",
    "start": "2442240",
    "end": "2448180"
  },
  {
    "text": "again I'm sorry I haven't done prim's algorithm since 2007.",
    "start": "2448180",
    "end": "2454420"
  },
  {
    "text": "2007 is when I did prim's algorithm last it was a glorious time doing prim's algorithm I loved it I had a great time",
    "start": "2455640",
    "end": "2461800"
  },
  {
    "text": "huge fan of prim's algorithm loved it but nonetheless",
    "start": "2461800",
    "end": "2467700"
  },
  {
    "text": "they made you do prims in college absolutely we did Crystal's end prints and so I had to do it by hand on paper",
    "start": "2471099",
    "end": "2477460"
  },
  {
    "text": "and all sorts of stuff so I'm just trying to remember you know trying to like trying to like",
    "start": "2477460",
    "end": "2483359"
  },
  {
    "text": "regurgitate and re relive this is hard did you see the new Mission Impossible no Tom Cruise is like 9 000 years old",
    "start": "2483359",
    "end": "2491020"
  },
  {
    "text": "I'm kidding I haven't seen it I just don't care you know what I mean",
    "start": "2491020",
    "end": "2497880"
  },
  {
    "text": "uh is this part this is what I'm just looking through all the algorithms I'm just trying to re-familiarize myself with all the graph stuff you know when",
    "start": "2498760",
    "end": "2505540"
  },
  {
    "text": "you haven't done a lot of the graph stuff like I say in a while you know you gotta Like You Gotta Get You Gotta re-go",
    "start": "2505540",
    "end": "2511839"
  },
  {
    "text": "back into it you can't just you should just can't you can't just that's the stupidest chat I've ever read",
    "start": "2511839",
    "end": "2518440"
  },
  {
    "text": "in my lifetime I want you to know I'm not even gonna respect it with an answer",
    "start": "2518440",
    "end": "2524640"
  },
  {
    "text": "don't you use graphs at Netflix what you use at Netflix what do you use in the real world versus this is like very very",
    "start": "2528640",
    "end": "2534160"
  },
  {
    "text": "very different okay prim's algorithm what kind of graph could we use that we could put into memory right this",
    "start": "2534160",
    "end": "2540339"
  },
  {
    "text": "wouldn't make any sense you use more like clustering businesses right you don't and that's like all in machine",
    "start": "2540339",
    "end": "2546160"
  },
  {
    "text": "Learning Land you know what I mean that's why you have to go for crystals for sparse graphs and primes for dense one the AKA three edges Max uh",
    "start": "2546160",
    "end": "2553000"
  },
  {
    "text": "lightosaur how light isor how old are you because you are",
    "start": "2553000",
    "end": "2558040"
  },
  {
    "text": "you seem like someone fairly fresh off of school to remember these things",
    "start": "2558040",
    "end": "2563520"
  },
  {
    "text": "network devices this makes a lot of sense right",
    "start": "2567640",
    "end": "2574740"
  },
  {
    "text": "uh I have used gr I I have graph Theory PTSD okay so you must have went a little bit deep into graph Theory",
    "start": "2574900",
    "end": "2581500"
  },
  {
    "text": "and I'm in Telco okay okay this makes sense",
    "start": "2581500",
    "end": "2589380"
  },
  {
    "text": "this makes sense yeah when you when you when you're when you're in there let's say I hope you're doing great uh by the",
    "start": "2590380",
    "end": "2595420"
  },
  {
    "text": "way Ms air okay thank you fresh off school AKA dweeb okay okay okay okay",
    "start": "2595420",
    "end": "2601359"
  },
  {
    "text": "okay okay okay so let's think about this first one if",
    "start": "2601359",
    "end": "2606579"
  },
  {
    "text": "the graph is stored in adjacency Matrix dense uh uh a dense graph representation",
    "start": "2606579",
    "end": "2613079"
  },
  {
    "text": "the running time for prim's algorithm is V squared I guess because",
    "start": "2613079",
    "end": "2620700"
  },
  {
    "text": "I'm still trying to figure out why",
    "start": "2627220",
    "end": "2630720"
  },
  {
    "text": "do you really have to check over every single node every single time do you have to like so for prim's",
    "start": "2635200",
    "end": "2641859"
  },
  {
    "text": "algorithm just because maybe I'm doing it wrong in my head so for this example right here we're pretend you know",
    "start": "2641859",
    "end": "2647200"
  },
  {
    "text": "pretend we have this right here I know I'm co-opting My Graph right now so when we when it goes a b uh c d right just",
    "start": "2647200",
    "end": "2655300"
  },
  {
    "text": "like before when you do that and you go you check a then you have to check a b",
    "start": "2655300",
    "end": "2660400"
  },
  {
    "text": "then you have to check a uh b c then you have to check a b c d right b c",
    "start": "2660400",
    "end": "2667839"
  },
  {
    "text": "d right okay and that's because you can't",
    "start": "2667839",
    "end": "2672780"
  },
  {
    "text": "let me just check this in this little little this little this little representation because there has to be a point where do you do you go back over",
    "start": "2673300",
    "end": "2680500"
  },
  {
    "text": "every single node and check every single edge over every single node every single time",
    "start": "2680500",
    "end": "2687000"
  },
  {
    "text": "or is there like some sort of updating mechanism that makes more sense because that's what I'm trying to think of is how do you actually accomplish this",
    "start": "2688839",
    "end": "2695800"
  },
  {
    "text": "because I'm like in my head I'm going over every single node every single time and that doesn't that doesn't seem very",
    "start": "2695800",
    "end": "2701200"
  },
  {
    "text": "good right",
    "start": "2701200",
    "end": "2707940"
  },
  {
    "text": "uh it's a dense representation because you're reserving space for uh any possible weight between two nodes even",
    "start": "2709300",
    "end": "2715420"
  },
  {
    "text": "though the typical case uh most of those weights will be Infinity yes",
    "start": "2715420",
    "end": "2721180"
  },
  {
    "text": "all right let's watch that animation one more time is there a way can we just step",
    "start": "2721180",
    "end": "2727500"
  },
  {
    "text": "all right so there's six okay we're we're I guess that one's nine are we calling that one nine",
    "start": "2730060",
    "end": "2737040"
  },
  {
    "text": "all right so one one",
    "start": "2737079",
    "end": "2742440"
  },
  {
    "text": "okay so I guess my follow-up question is then I feel like this thing's kind of",
    "start": "2750160",
    "end": "2755560"
  },
  {
    "text": "skipping something because how does it know not to check this Edge",
    "start": "2755560",
    "end": "2760740"
  },
  {
    "text": "all right because it kind of skipped a visited list okay I know but that caught a visited List cost",
    "start": "2768040",
    "end": "2775599"
  },
  {
    "text": "right is it a visited list or is there just an",
    "start": "2775599",
    "end": "2782140"
  },
  {
    "text": "item on that edge and really in any sort of way of",
    "start": "2782140",
    "end": "2789480"
  },
  {
    "text": "no no I'm still doing htmx I love htmx so even if the flag was on the edge",
    "start": "2791680",
    "end": "2800520"
  },
  {
    "text": "the running time would be the same right you're still just looking at the edge adding some numbers or looking at an edge checking to see if a Boolean is",
    "start": "2800859",
    "end": "2807520"
  },
  {
    "text": "true or false if it's false then you add the numbers like in all practical sense",
    "start": "2807520",
    "end": "2814560"
  },
  {
    "text": "neighbors of visited vertices only oh",
    "start": "2822520",
    "end": "2829920"
  },
  {
    "text": "oh wait hold on",
    "start": "2830980",
    "end": "2833579"
  },
  {
    "text": "yeah Edge jokes we're doing let's say okay well during the first time when you don't know uh many edges uh let's see or",
    "start": "2842920",
    "end": "2849520"
  },
  {
    "text": "if uh V slash e let's see is less than two you end up going through every vertices however welcome to Costco I",
    "start": "2849520",
    "end": "2855700"
  },
  {
    "text": "love you let's see has you picking up edge of another vertices due to adjacency while visiting the current vertices okay for some odd reason that",
    "start": "2855700",
    "end": "2862480"
  },
  {
    "text": "didn't help me because either I'm too stupid I don't get knockout 99.99",
    "start": "2862480",
    "end": "2867180"
  },
  {
    "text": "yeah everyone does this okay so why why am I missing this why what am I missing here all right",
    "start": "2871000",
    "end": "2876819"
  },
  {
    "text": "back deck back it up okay so step one we just select a node right node that belongs to the minimum Fanning",
    "start": "2876819",
    "end": "2883119"
  },
  {
    "text": "tree is five",
    "start": "2883119",
    "end": "2885900"
  },
  {
    "text": "all right so yep nine to zero okay there we go so then now what do we do",
    "start": "2897280",
    "end": "2903480"
  },
  {
    "text": "okay so in our minimum spending tree we start with an",
    "start": "2904420",
    "end": "2910660"
  },
  {
    "text": "we start with just the right the whatever our root note is right is that what we do",
    "start": "2910660",
    "end": "2916440"
  },
  {
    "text": "let me just recheck the uh step by step of prims for a second",
    "start": "2917380",
    "end": "2923700"
  },
  {
    "text": "all right associate each vertex V let's let's just read this one okay the algorithm May informally be described by",
    "start": "2924339",
    "end": "2929560"
  },
  {
    "text": "following the four uh following steps initialize a tree with a single vertex okay a chosen arbitrarily from the graph",
    "start": "2929560",
    "end": "2935859"
  },
  {
    "text": "grow the tree by one edge of the edges that are connected to the tree two vertices not yet in the tree find the",
    "start": "2935859",
    "end": "2941800"
  },
  {
    "text": "minimum weight Edge and transfer it to the tree okay repeat step two until all vertices",
    "start": "2941800",
    "end": "2948640"
  },
  {
    "text": "are in the tree",
    "start": "2948640",
    "end": "2951779"
  },
  {
    "text": "okay okay I I I totally get this it's just I'm trying to get the last part of it I feel like I could program this",
    "start": "2954940",
    "end": "2962920"
  },
  {
    "text": "I I'm pretty sure I could program it but I don't think I could program it with the proper running because I think I'll",
    "start": "2962920",
    "end": "2968319"
  },
  {
    "text": "do something wrong that's what I'm struggling with is that the algorithm itself seems very simple",
    "start": "2968319",
    "end": "2973839"
  },
  {
    "text": "it's just how I would do it seems like it would suck right like I would program it in the worst possible way hey the 93",
    "start": "2973839",
    "end": "2979720"
  },
  {
    "text": "Flex thank you all right associate each uh vertex",
    "start": "2979720",
    "end": "2987940"
  },
  {
    "text": "let's say associate each vertex V of the graph let's see see if the cheapest cost",
    "start": "2987940",
    "end": "2993099"
  },
  {
    "text": "of the connection to V and Edge EV let's see providing the cheapest connection to initialize these values set all values",
    "start": "2993099",
    "end": "2998980"
  },
  {
    "text": "of CV to Infinity okay this makes sense or to any other number larger than the maximum Edge weight yep set each to a",
    "start": "2998980",
    "end": "3006660"
  },
  {
    "text": "special flag value indicating that there is no Edge connecting V to earlier vertices",
    "start": "3006660",
    "end": "3012800"
  },
  {
    "text": "okay interesting okay so this EV business okay so that's one I didn't see coming okay so I get this",
    "start": "3014099",
    "end": "3019560"
  },
  {
    "text": "that's our cost thing that's how we know how to decrement every cost",
    "start": "3019560",
    "end": "3024839"
  },
  {
    "text": "right initialize an empty Forest F and set Q a forest damn we're uh we're up in a",
    "start": "3024839",
    "end": "3031500"
  },
  {
    "text": "forest ass at this point and Set uh and a set queue of vertices that have not been included uh in F initially all the",
    "start": "3031500",
    "end": "3039180"
  },
  {
    "text": "vertices okay repeat the following steps until Q is",
    "start": "3039180",
    "end": "3045900"
  },
  {
    "text": "empty find and remove a vertices V from Q having the minimum possible cost okay",
    "start": "3045900",
    "end": "3051180"
  },
  {
    "text": "hmm okay so this is where having that binary Heap is so important but you need to be",
    "start": "3051180",
    "end": "3057180"
  },
  {
    "text": "able to have a binary Heap in which has update right not all binary heaps have update",
    "start": "3057180",
    "end": "3063380"
  },
  {
    "text": "you have a Min Heap Min Heap with update",
    "start": "3065819",
    "end": "3072420"
  },
  {
    "text": "yeah hell yeah hell yeah hell yeah all right",
    "start": "3072420",
    "end": "3079440"
  },
  {
    "text": "I think that makes sense all right add V to F let's eat",
    "start": "3079440",
    "end": "3085039"
  },
  {
    "text": "what is what is update operation in a heap yeah I know update is just log in but uh",
    "start": "3085380",
    "end": "3091319"
  },
  {
    "text": "but just to be just to make sure I understand update uh update in a heap is as simple as you go just pretend this is",
    "start": "3091319",
    "end": "3099240"
  },
  {
    "text": "some part of a tree right we don't this is some part of the Heap right if I update this value I simply see",
    "start": "3099240",
    "end": "3106140"
  },
  {
    "text": "if this is a minimum Heap have I become less than this value or have I become more than these values",
    "start": "3106140",
    "end": "3113220"
  },
  {
    "text": "and if I become less we just whippity swap and then I repeat the swap operation",
    "start": "3113220",
    "end": "3119579"
  },
  {
    "text": "right that's that's update right it goes up",
    "start": "3119579",
    "end": "3126500"
  },
  {
    "text": "yeah in this case if the value could only become less right if the value can only become less",
    "start": "3127980",
    "end": "3133619"
  },
  {
    "text": "yes but I guess in the general sense you'd have to keep on you keep on swapping down or up",
    "start": "3133619",
    "end": "3140720"
  },
  {
    "text": "uh swap the removal with top the top rehepify",
    "start": "3143640",
    "end": "3150240"
  },
  {
    "text": "no no this is for update this is you're doing like a little removing remove right",
    "start": "3166099",
    "end": "3172339"
  },
  {
    "text": "swap pop and Bop yeah you insert it at the at the top of the Heap you insert it at the top deep and then re-heapify",
    "start": "3173280",
    "end": "3181040"
  },
  {
    "text": "man I always forget these things I feel like I gotta do uh yeah and see how far I can go up you put it at the end and",
    "start": "3196079",
    "end": "3201180"
  },
  {
    "text": "see how far it can go up but you still have to fill the holes so it's not like you can't just if you",
    "start": "3201180",
    "end": "3207599"
  },
  {
    "text": "remove from the middle you still have to like heapify from that point right you still have to go",
    "start": "3207599",
    "end": "3213660"
  },
  {
    "text": "upwards remember you can't just remove from the middle it makes no sense you have to swap from the middle update update",
    "start": "3213660",
    "end": "3220980"
  },
  {
    "text": "requires the swapping right you definitely have to fill the hole wow",
    "start": "3220980",
    "end": "3226800"
  },
  {
    "text": "you have to swap it whenever you insert you add it to the",
    "start": "3226800",
    "end": "3232859"
  },
  {
    "text": "end and heapify up when you pop you pop off the top",
    "start": "3232859",
    "end": "3238319"
  },
  {
    "text": "is that heapify down yeah use a dick to fill it no dicks are very inefficient to fill fill it fill the",
    "start": "3238319",
    "end": "3244859"
  },
  {
    "text": "hole yeah so update would be",
    "start": "3244859",
    "end": "3251760"
  },
  {
    "text": "popify and swap fight you don't pop anything in an update you just update",
    "start": "3251760",
    "end": "3257960"
  },
  {
    "text": "right I graduated this is giving me flashbacks see I I I have graduated way too long ago",
    "start": "3261059",
    "end": "3267059"
  },
  {
    "text": "all right so the Wikipedia one's actually pretty good okay Wikipedia one's actually pretty",
    "start": "3267059",
    "end": "3272460"
  },
  {
    "text": "good all right associate each vertex with the graph okay so I remember this so we first create effectively we create",
    "start": "3272460",
    "end": "3278700"
  },
  {
    "text": "something with uh Infinities right and then we update this cost with every Edge",
    "start": "3278700",
    "end": "3283740"
  },
  {
    "text": "that I have right so you know if my one to four becomes so let's just walk through this one pretty straightforward",
    "start": "3283740",
    "end": "3289500"
  },
  {
    "text": "because this is actually a really good one okay so this this is much nicer we can visualize the uh whatever you call",
    "start": "3289500",
    "end": "3294839"
  },
  {
    "text": "it much easier here all right let's get a new one let's just create a very simple graph here let's go",
    "start": "3294839",
    "end": "3300780"
  },
  {
    "text": "like this your traditional box graph going on here",
    "start": "3300780",
    "end": "3307220"
  },
  {
    "text": "look at that box graph probably too many to do but we're gonna keep on going so that means we're going to select this one keep it simple right so we're going",
    "start": "3307619",
    "end": "3314160"
  },
  {
    "text": "to call this what we're going to call this one zero one two uh three",
    "start": "3314160",
    "end": "3319500"
  },
  {
    "text": "four five six I haven't put in edges so that means",
    "start": "3319500",
    "end": "3324599"
  },
  {
    "text": "my cost is going to look like this right zero and then Infinity pretty much for",
    "start": "3324599",
    "end": "3330359"
  },
  {
    "text": "the rest of them right one two three four five six",
    "start": "3330359",
    "end": "3336540"
  },
  {
    "text": "all right so there we go I can't do the infinity sign well on a mouse you get the idea",
    "start": "3336540",
    "end": "3342300"
  },
  {
    "text": "as Lord jokes can be funny well they're they're funny but when you're doing graphs for too long",
    "start": "3342300",
    "end": "3348119"
  },
  {
    "text": "edging jokes they're okay",
    "start": "3348119",
    "end": "3353460"
  },
  {
    "text": "all right so there we go so we got the cost we have this I guess I'm just gonna probably randomly put some things in",
    "start": "3353460",
    "end": "3359280"
  },
  {
    "text": "here there we go yeah let's do that there we",
    "start": "3359280",
    "end": "3365040"
  },
  {
    "text": "go classic box me Daddy now I have to put some weights in there okay so that means if we start here",
    "start": "3365040",
    "end": "3370619"
  },
  {
    "text": "we would have be able to update the the weight of one effectively and say this was five right so we'd actually be able",
    "start": "3370619",
    "end": "3376140"
  },
  {
    "text": "to just say okay this is now officially five and then I guess we also have a second",
    "start": "3376140",
    "end": "3382140"
  },
  {
    "text": "one which is called the set of e to V which is a special flag value",
    "start": "3382140",
    "end": "3387180"
  },
  {
    "text": "indicating that there is no Edge connecting V to earlier vertices oh",
    "start": "3387180",
    "end": "3393980"
  },
  {
    "text": "oh",
    "start": "3396000",
    "end": "3398300"
  },
  {
    "text": "huh okay so we'd also need to have some sort of uh",
    "start": "3408000",
    "end": "3414780"
  },
  {
    "text": "okay so that means we also have to have something like uh like your your MST list right",
    "start": "3414780",
    "end": "3421220"
  },
  {
    "text": "right your MST list would have to what is MST going to have to have we have to have an MST in here right",
    "start": "3421319",
    "end": "3429380"
  },
  {
    "text": "on this is more than any uh anything tells me maybe I need to take your algo course my uh my first one my first one's",
    "start": "3433500",
    "end": "3440220"
  },
  {
    "text": "all the easy ones right linked lists Stacks breadth first search depth first search I even do Dykes versus dyches is",
    "start": "3440220",
    "end": "3445800"
  },
  {
    "text": "pretty easy to argue over it the ve is a building no way to prevent a revisiting uh vertices already yeah to prevent",
    "start": "3445800",
    "end": "3451380"
  },
  {
    "text": "Cycles okay that makes it that's what I thought it was which means that that's what I originally was going to do",
    "start": "3451380",
    "end": "3457200"
  },
  {
    "text": "it as but then it was like a special flag value and I didn't understand it because then this should be effectively true and then we have all falses for the rest",
    "start": "3457200",
    "end": "3463920"
  },
  {
    "text": "right I think I put in one too many welcome to",
    "start": "3463920",
    "end": "3468960"
  },
  {
    "text": "Costco I love you yeah that's one too many yeah there we go does that make sense",
    "start": "3468960",
    "end": "3475500"
  },
  {
    "text": "the first course was a brilliant fresh for me yeah so it's all it's all the ones that you use more practically Knighton thank you very much",
    "start": "3475500",
    "end": "3482900"
  },
  {
    "text": "all right unfortunately I got started super late today and I want to go be with my wife and it's uh 9 15 so I gotta",
    "start": "3484020",
    "end": "3490559"
  },
  {
    "text": "be done now I only get an hour in the evenings to do studying you know what I mean I only get an hour sorry I'm stupid 4K money",
    "start": "3490559",
    "end": "3499039"
  }
]