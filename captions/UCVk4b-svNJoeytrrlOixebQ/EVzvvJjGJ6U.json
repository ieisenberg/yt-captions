[
  {
    "text": "yeah sure this this zigs will be there uh a pointer to a u8 hurts my soul it should um all right u8 D's Nuts okay got",
    "start": "199",
    "end": "6759"
  },
  {
    "text": "them let's see the zigging section yes it's going to be on YouTube I'll put this on YouTube it should be a okay so it's an it's an undefined slice is what",
    "start": "6759",
    "end": "13080"
  },
  {
    "text": "you're trying to say it's an it's an unknown what you're trying to say is this one right here which is a too many",
    "start": "13080",
    "end": "19359"
  },
  {
    "text": "item pointer uh an array of unknown size",
    "start": "19359",
    "end": "25720"
  },
  {
    "text": "right it's a potentially null array of unknown size",
    "start": "25720",
    "end": "31560"
  },
  {
    "text": "yeah see I'm not getting it yet we haven't got it yet we're not we're just not this is not",
    "start": "31560",
    "end": "38239"
  },
  {
    "text": "it okay let let me look at this again okay so I I I get this part but what I",
    "start": "39879",
    "end": "45760"
  },
  {
    "text": "don't get is this okay so let's let's just see if we can do this one if this exists right here why can't I take",
    "start": "45760",
    "end": "53039"
  },
  {
    "text": "this why can't I take this and do the exact same thing right",
    "start": "53039",
    "end": "59960"
  },
  {
    "text": "why can't I just do that nice I got it I got it I got it I",
    "start": "61760",
    "end": "69040"
  },
  {
    "text": "got it we got it I I so got that one okay okay so that's what it is pointers",
    "start": "69040",
    "end": "76600"
  },
  {
    "text": "baby Starbucks languages this is this is actually a morally uh this is a morally",
    "start": "76600",
    "end": "81759"
  },
  {
    "text": "aor language that we're learning right now an array of an unusual size I don't think they exist an array of unusual",
    "start": "81759",
    "end": "87479"
  },
  {
    "text": "size they do uh so there you go okay so this makes sense so I'm taking a letter I'm taking",
    "start": "87479",
    "end": "92960"
  },
  {
    "text": "a reference to this thing and then actually treating it as a u8 as a u8 array of size one that's a",
    "start": "92960",
    "end": "101840"
  },
  {
    "text": "constant pointer to it or a set of constant values of size one okay this makes sense is wild syntax it's not too",
    "start": "101840",
    "end": "108320"
  },
  {
    "text": "wild because this right here means that it could be null this right here means that it's a",
    "start": "108320",
    "end": "115960"
  },
  {
    "text": "pointer this is just it's constant values of size one u8 right to me this",
    "start": "116360",
    "end": "122280"
  },
  {
    "text": "is this is this doesn't bother me right s uh that is a single item pointer to an array which is not what people expect",
    "start": "122280",
    "end": "128879"
  },
  {
    "text": "yeah I mean it's technically the same thing right if you think about it this",
    "start": "128879",
    "end": "134200"
  },
  {
    "text": "is an array of size one everything is an array if you really think about",
    "start": "134200",
    "end": "142000"
  },
  {
    "text": "it if you really think about it everything is technically an array",
    "start": "142000",
    "end": "148680"
  },
  {
    "text": "um okay yeah but can it be null yes it can",
    "start": "150000",
    "end": "155040"
  },
  {
    "text": "be null so I can then also take this and go like this if I do this correctly I believe I",
    "start": "155040",
    "end": "160760"
  },
  {
    "text": "can just take this out and say null there we go it's",
    "start": "160760",
    "end": "165959"
  },
  {
    "text": "null because I specifi the type as being potentially nullable so for me to be able to get the letter out I believe I",
    "start": "165959",
    "end": "171920"
  },
  {
    "text": "have to go like this right uh did I get this correct where you have to go my letter uh letter right to get it out",
    "start": "171920",
    "end": "177360"
  },
  {
    "text": "right did I do that correct uh capture letter shallow local",
    "start": "177360",
    "end": "184080"
  },
  {
    "text": "constants from Outer scope oh whoopsies uh L there you go so now I've actually",
    "start": "184080",
    "end": "190720"
  },
  {
    "text": "got I've now got the value back out or you could do what it does down here which is this right here which",
    "start": "190720",
    "end": "198560"
  },
  {
    "text": "is uh which is period question which says like let's force it to be not null which if I",
    "start": "198560",
    "end": "207000"
  },
  {
    "text": "if I'm if I'm not mistaken I'm pretty sure this will actually cause a runtime",
    "start": "207000",
    "end": "212519"
  },
  {
    "text": "um explody oopsies you can't assign it to const yeah that makes",
    "start": "212519",
    "end": "218080"
  },
  {
    "text": "sense right pass letter A oh",
    "start": "218080",
    "end": "223640"
  },
  {
    "text": "whoopsies there we go there we go terminated unexpectedly",
    "start": "223640",
    "end": "229680"
  },
  {
    "text": "yeah I've effectively crashed my program it's suppressing output but I've crashed the I've crashed the I've crashed the",
    "start": "229680",
    "end": "235680"
  },
  {
    "text": "program because this is like a this is an asserts not equal",
    "start": "235680",
    "end": "241720"
  },
  {
    "text": "I don't like type inference I like type inference when it's good uh period question is called the Elvis notation",
    "start": "243360",
    "end": "249079"
  },
  {
    "text": "right is it is that Elvis notation I always forget which one's the Elvis one in debug and safe uh not uh let's see in",
    "start": "249079",
    "end": "255879"
  },
  {
    "text": "debug and safe not release modes in release modes it's undefined Behavior",
    "start": "255879",
    "end": "262759"
  },
  {
    "text": "okay okay well cool anyways let's go let's let's let's go on then",
    "start": "263639",
    "end": "270400"
  },
  {
    "text": "I do like that you have to that the language like enforces you to make things that don't change constant all",
    "start": "271479",
    "end": "276720"
  },
  {
    "text": "right here we go Loop Expressions so let's do some Loop Expressions 62 what else can we do here uh remember uh using",
    "start": "276720",
    "end": "282880"
  },
  {
    "text": "an IFL statements as expressions like this VAR by the way for everyone that's wondering Carson gross htx guy will be",
    "start": "282880",
    "end": "289039"
  },
  {
    "text": "here in approximately 28 minutes so we're just passing some time with a little bit of",
    "start": "289039",
    "end": "295039"
  },
  {
    "text": "zigging yeah double question is Elvis okay double question is Elvis are you sure uh also lets you use four and while",
    "start": "295039",
    "end": "301360"
  },
  {
    "text": "Loops as Expressions uh like return for functions you can also return a value from a loop block break true okay Russ",
    "start": "301360",
    "end": "308919"
  },
  {
    "text": "say the same thing cool uh but what values return from a loop if a break statement is never reached we need a",
    "start": "308919",
    "end": "314560"
  },
  {
    "text": "default expression thankfully Zig Loops have an else Clause okay I think that could be really",
    "start": "314560",
    "end": "321840"
  },
  {
    "text": "cool uh and as you might guess the else Clause is evaluated when one a while loop condition becomes false or two when",
    "start": "321840",
    "end": "328800"
  },
  {
    "text": "a four Loop Loop runs out of items so you can go while true break to else",
    "start": "328800",
    "end": "334759"
  },
  {
    "text": "zero for this u8 of one F break three",
    "start": "334759",
    "end": "340639"
  },
  {
    "text": "else zero nice nice if you uh if you do not",
    "start": "340639",
    "end": "347520"
  },
  {
    "text": "provide an else Clause uh an empty one will be provided for you which will evaluate to the void type which is",
    "start": "347520",
    "end": "353720"
  },
  {
    "text": "probably not what you want so consider the else Clause essential when using uh Loops as expressions for while true this",
    "start": "353720",
    "end": "359800"
  },
  {
    "text": "is an error because the implicit void right here okay that makes sense because you don't know because you can't guarantee that the while loop is going",
    "start": "359800",
    "end": "365400"
  },
  {
    "text": "to return something I assume that's the reason",
    "start": "365400",
    "end": "370800"
  },
  {
    "text": "why that's pretty neat I like it uh with a program in mind let's see if you can fix the problem okay let's see we got",
    "start": "371199",
    "end": "376560"
  },
  {
    "text": "languages we got llang algo c o camel Zig prologue let's find the first language with a three-letter name and",
    "start": "376560",
    "end": "382680"
  },
  {
    "text": "return it from the loop all right so current language is a nullable one of these four Langs Langs do this",
    "start": "382680",
    "end": "390240"
  },
  {
    "text": "uh else",
    "start": "390240",
    "end": "393918"
  },
  {
    "text": "null is it break null or is it just null what's the what's the syntax",
    "start": "395800",
    "end": "403120"
  },
  {
    "text": "here else zero okay else",
    "start": "403120",
    "end": "407800"
  },
  {
    "text": "zero okay I like that lse zero I I'm a fan of",
    "start": "410039",
    "end": "415280"
  },
  {
    "text": "that I'm a fan of that okay current Lang do this one we did not find one okay so I should be able to Zig",
    "start": "415360",
    "end": "421879"
  },
  {
    "text": "build yeah awesome we got that okay okay okay labels 63 labels labels should be",
    "start": "421879",
    "end": "427080"
  },
  {
    "text": "easy yeah you have outer block inner block unreachable okay um inner block break to outer block okay this all makes",
    "start": "427080",
    "end": "433360"
  },
  {
    "text": "sense uh make five constant Fu make five break to the",
    "start": "433360",
    "end": "439319"
  },
  {
    "text": "oh oh interesting so you can even break oh you can break out of a scope that's like",
    "start": "439319",
    "end": "445879"
  },
  {
    "text": "goto you can break out of a scope and return a value",
    "start": "445879",
    "end": "451520"
  },
  {
    "text": "okay okay hidden goto yeah rust can too Rus can you can break out of a scope and",
    "start": "457360",
    "end": "462759"
  },
  {
    "text": "return I didn't know that in Rust you could do that where do I find this this is just zigg Lings uh labels can be used",
    "start": "462759",
    "end": "469280"
  },
  {
    "text": "with loops uh being one able to break out of the nested Loops yeah yeah yeah yeah so you can do uh you could do VAR",
    "start": "469280",
    "end": "475120"
  },
  {
    "text": "Loop okay nice that makes sense",
    "start": "475120",
    "end": "479360"
  },
  {
    "text": "okay perfect uh I think I get this continue you finally you can use a block labels with continue statements Okay",
    "start": "480879",
    "end": "487479"
  },
  {
    "text": "cool so uh let's let's fix this right here so we have a print statement we have our print statement we have our ingredients as mentioned before we'll",
    "start": "487479",
    "end": "493400"
  },
  {
    "text": "soon understand why these two numbers don't explic need explicit types uh food is a struct with a a name and required",
    "start": "493400",
    "end": "500400"
  },
  {
    "text": "ingredients bull oh that's because it just oh this",
    "start": "500400",
    "end": "505720"
  },
  {
    "text": "just gets evaluated to a number the compiler just turns that into a number okay cool okay welcome to the cafeteria uh USA",
    "start": "505720",
    "end": "512599"
  },
  {
    "text": "choose your favorite ingredients and will produce a delicious meal cafeteria customers know not all ingredient combinations make a meal the default",
    "start": "512599",
    "end": "517800"
  },
  {
    "text": "meal is macaroni and cheese software developer note hard coding the ingredient numbers based on the array Position will be fine for our tiny",
    "start": "517800",
    "end": "523479"
  },
  {
    "text": "example but it would be our downright criminal in a real application it would be wanted ingredients okay meal Loop all",
    "start": "523479",
    "end": "531160"
  },
  {
    "text": "right all right let's look at this so we have our we have our food Loop so somewhere in here we need our food Loop",
    "start": "531160",
    "end": "536959"
  },
  {
    "text": "to run uh this ingredient isn't required so SC skip it",
    "start": "536959",
    "end": "542040"
  },
  {
    "text": "okay found our wanted ingredient if we haven't found it continue the food Loop which goes back up",
    "start": "542079",
    "end": "549920"
  },
  {
    "text": "here all right if we get this far the required ingredient we all wanted for let's see if we get please return this",
    "start": "552399",
    "end": "558760"
  },
  {
    "text": "food from the loop okay so I would have to return what wait hold what am I returning what am I returning",
    "start": "558760",
    "end": "565519"
  },
  {
    "text": "here oh I'm returning food so I just return food right here huh",
    "start": "565519",
    "end": "571160"
  },
  {
    "text": "right so the meal would be a let's see the meal is this okay so that means the meal right now what is the meal it's",
    "start": "571160",
    "end": "577480"
  },
  {
    "text": "that thing so that means I can go like this I can hit him with an",
    "start": "577480",
    "end": "581920"
  },
  {
    "text": "else I need a like a default meal oh the default meal the default meal is uh mac",
    "start": "584079",
    "end": "589720"
  },
  {
    "text": "and cheese right yeah yeah uh the default meal is macaroni and cheese okay so that's menu",
    "start": "589720",
    "end": "597480"
  },
  {
    "text": "menu zero right ah there we go so I'd go menu uh zero correct I think that's",
    "start": "597480",
    "end": "604320"
  },
  {
    "text": "correct I think I got",
    "start": "604320",
    "end": "608000"
  },
  {
    "text": "that there we go forgot to label The Brak I don't think I needed to label The Brak uh because the the break is in this",
    "start": "610800",
    "end": "617200"
  },
  {
    "text": "Loop so you don't need to do you don't need to do that uh did work without yeah you didn't",
    "start": "617200",
    "end": "622720"
  },
  {
    "text": "need to because it's already in the outer loop uh good morning primen you suck hey good morning to you mod you",
    "start": "622720",
    "end": "628959"
  },
  {
    "text": "also happen to suck all",
    "start": "628959",
    "end": "634320"
  },
  {
    "text": "right the following okay so we have some we have some errors here okay we can definitely do that the the zig compiler",
    "start": "634320",
    "end": "639839"
  },
  {
    "text": "provides built-in functions you've already gotten used to seeing import at the top of every zigging exercise uh we",
    "start": "639839",
    "end": "644920"
  },
  {
    "text": "can also see incast okay yep I remember incast and AIT from enum I never",
    "start": "644920",
    "end": "650320"
  },
  {
    "text": "actually used int from enum oh I guess I did but I must have forgot about it you suck hey thank you mod wow multiple mods",
    "start": "650320",
    "end": "656600"
  },
  {
    "text": "he woke up and chose to be violent yeah classic Beast just the man can't stop it uh I thought",
    "start": "656600",
    "end": "662880"
  },
  {
    "text": "Zig is an IDE no no no no no no no no no no that's zed zed would be the thing",
    "start": "662880",
    "end": "668120"
  },
  {
    "text": "you're looking for all right so we have our print statement we have our main uh",
    "start": "668120",
    "end": "673200"
  },
  {
    "text": "let's see this let's see the second built-in alphabetically is ADD with overflow a b struct type of B A U1 it's",
    "start": "673200",
    "end": "681240"
  },
  {
    "text": "kind of interesting that they have this any type right here I wonder how this works because I don't know how to program that this is a pretty",
    "start": "681240",
    "end": "687120"
  },
  {
    "text": "interesting concept though that they have this",
    "start": "687120",
    "end": "691240"
  },
  {
    "text": "right there's some good stuff going on right here all right so we have this binary we have this binary we're going",
    "start": "694519",
    "end": "700720"
  },
  {
    "text": "to add with overflow these are u4 so they're a nibble uh if we add with overflow what does overflow do see add",
    "start": "700720",
    "end": "708279"
  },
  {
    "text": "with overflow um Returns the value is a tuple with the result and the possible overflow bit",
    "start": "708279",
    "end": "714720"
  },
  {
    "text": "oh oh it sucks that it I really hate hate I",
    "start": "714720",
    "end": "720040"
  },
  {
    "text": "think the zig I think the zig uh language server is really just",
    "start": "720040",
    "end": "726240"
  },
  {
    "text": "painful right for me that's that's the thing that I really dislike like this ad with overflow is not coming back with a",
    "start": "726240",
    "end": "734199"
  },
  {
    "text": "result I know how to work with because I I don't know how to work with the result I don't I don't is it zeros what what is",
    "start": "734199",
    "end": "740680"
  },
  {
    "text": "this type I don't know what the type is it's unknown I I find that to be really",
    "start": "740680",
    "end": "746399"
  },
  {
    "text": "painful so let's see what do we got here I also don't I still don't know what these little Anonymous function or these",
    "start": "746399",
    "end": "751639"
  },
  {
    "text": "Anonymous strs are or whatever you call them I still don't quite understand them so AB my",
    "start": "751639",
    "end": "757760"
  },
  {
    "text": "result if my result 1 equals one true false oh I see okay inferred struct yeah",
    "start": "757760",
    "end": "764360"
  },
  {
    "text": "zls decided to not use the existing rug compiler infrastructure which was a huge mistake see I didn't know that all I",
    "start": "764360",
    "end": "769959"
  },
  {
    "text": "know Zs is definitely um I love you it's definitely really lagging behind Isa",
    "start": "769959",
    "end": "775519"
  },
  {
    "text": "Tuple well it's yeah but still it's just like I wish I",
    "start": "775519",
    "end": "781079"
  },
  {
    "text": "saw a tuple in in right or whatever it is instead I just I have no idea what it",
    "start": "781079",
    "end": "786160"
  },
  {
    "text": "is purple moist duck thank you for that twitch Prime ma the the catch syntax oh",
    "start": "786160",
    "end": "791480"
  },
  {
    "text": "I missed it Ma the catch let's see the catch syntax uh next time he'll write Twitch Plays Doom yeah I'm going to do",
    "start": "791480",
    "end": "796560"
  },
  {
    "text": "I'm gonna I'm pretty excited about I'm not going to do Twitch Plays Doom I'm going to do a tower defense that's what I want to do with Zig if I find the",
    "start": "796560",
    "end": "803320"
  },
  {
    "text": "language server too painful I think I'll abandon Zig until uh until they improve",
    "start": "803320",
    "end": "808399"
  },
  {
    "text": "it right welcome to Costco and so vulin",
    "start": "808399",
    "end": "815079"
  },
  {
    "text": "appreciate that tier one thank you uh it's an any type there's no way to specify a generic",
    "start": "815079",
    "end": "822600"
  },
  {
    "text": "tupal okay uh CRA Crash of Clans and Zig well I mean it knows the thing is is",
    "start": "824720",
    "end": "832480"
  },
  {
    "text": "that it knows this type it knows this type it knows these two types so what should come out is a type that's",
    "start": "832480",
    "end": "837800"
  },
  {
    "text": "probably very resemblant resembling that plus it also what comes",
    "start": "837800",
    "end": "843000"
  },
  {
    "text": "out here is going to be a tupal one with an overflow bit so it's going to be like a U1",
    "start": "843000",
    "end": "849079"
  },
  {
    "text": "right have you seen the Google leak it doesn't seem like it's a real story like when I say real stories it doesn't really seem like it there's much to even",
    "start": "849079",
    "end": "855440"
  },
  {
    "text": "say about it like it it have to compile zls does not",
    "start": "855440",
    "end": "861639"
  },
  {
    "text": "yeah what's your feeling Z Zig right now I don't have a strong feeling yet all right so let's make uh let's make sense",
    "start": "861639",
    "end": "867079"
  },
  {
    "text": "of the answer uh if value B is decimal 5 let's add five to a I already know what goes on here this makes this makes sense",
    "start": "867079",
    "end": "874720"
  },
  {
    "text": "uh if let's see if there was no overflow at all adding five to a uh what would the value of my result hold oh",
    "start": "874720",
    "end": "883959"
  },
  {
    "text": "interesting um I'd have to look at the maps I believe it just overflows and then it keeps on going to this right here is that",
    "start": "885839",
    "end": "892160"
  },
  {
    "text": "true the real answer is 10 yes so therefore we'd have a false we'd have this is this what it do I think it's two",
    "start": "892160",
    "end": "898800"
  },
  {
    "text": "is that is that what it is here what what what's what are the two numbers the two numbers are what is this uh that's",
    "start": "898800",
    "end": "905720"
  },
  {
    "text": "going to have a one right here yeah and then this will overflow all the way over here which will overflow so yeah it is",
    "start": "905720",
    "end": "910920"
  },
  {
    "text": "just two okay it's just a two fantastic bit reverse oh cool look at",
    "start": "910920",
    "end": "917639"
  },
  {
    "text": "that there's a bit reverse in here that's pretty neat by the way uh Libra Vox appreciate the tier one 6 months in",
    "start": "917639",
    "end": "924279"
  },
  {
    "text": "advance thank you let's go and major sep the answer is 14 always been what is",
    "start": "924279",
    "end": "930639"
  },
  {
    "text": "this this is Zig but this is cool bit reverse so it flips the bits",
    "start": "930639",
    "end": "935920"
  },
  {
    "text": "um I'm trying to think of what how I would do that in bitwise operations how would you do that in bitwise",
    "start": "939880",
    "end": "946959"
  },
  {
    "text": "operations welcome to Costco I love you I think I know how hold on no you",
    "start": "951639",
    "end": "959600"
  },
  {
    "text": "can't shift it shift is not the shift is not the answer so in bitwise operation so it's 1 one one one one 0 0 0 0 Z all",
    "start": "959600",
    "end": "968880"
  },
  {
    "text": "right for this answer the answer is pretty obvious",
    "start": "968880",
    "end": "975399"
  },
  {
    "text": "um the answer would be let's call this thing X right the answer would be um xus",
    "start": "975399",
    "end": "984680"
  },
  {
    "text": "one or with uh or it's just x - one yeah it's just x -",
    "start": "985959",
    "end": "992040"
  },
  {
    "text": "one hold it's x- one with X xord with",
    "start": "992040",
    "end": "999519"
  },
  {
    "text": "X no there's something else in here I'm missing one thing because I'm trying to figure out how to turn off that",
    "start": "999600",
    "end": "1007120"
  },
  {
    "text": "one how would we turn off the rightmost bit I mean I know I could use hacker",
    "start": "1007319",
    "end": "1013680"
  },
  {
    "text": "Delight to grab that to grab that one how' I grab this I'm missing this is just Zero by the way but",
    "start": "1013680",
    "end": "1020279"
  },
  {
    "text": "okay so xus one would produce 11 one one0 one one one one one let's do",
    "start": "1020279",
    "end": "1025640"
  },
  {
    "text": "another value let's go one0 1 0 so if I minus a one here that would only take",
    "start": "1025640",
    "end": "1030918"
  },
  {
    "text": "care of this bit okay so minusing one doesn't really matter how would I do that I have no idea oh of course duh The Logical not",
    "start": "1030919",
    "end": "1038798"
  },
  {
    "text": "what the hell am I saying have I been smoking have I just been smoking right",
    "start": "1038799",
    "end": "1045079"
  },
  {
    "text": "now am I just am I just",
    "start": "1045079",
    "end": "1052760"
  },
  {
    "text": "dumb that would just do that so why can't are there no oh this is bit",
    "start": "1056080",
    "end": "1063240"
  },
  {
    "text": "reverse wait why is that just not logical",
    "start": "1069520",
    "end": "1073760"
  },
  {
    "text": "knot oh it reverses them oh",
    "start": "1075840",
    "end": "1080840"
  },
  {
    "text": "oh yeah I have no clue I have no clue how to do that yes you really are dumb I'm dumb I",
    "start": "1081679",
    "end": "1087919"
  },
  {
    "text": "really missed the old uh primagen when he when his free hand Drew boxes instead of using uh the line okay shut up I do a",
    "start": "1087919",
    "end": "1096760"
  },
  {
    "text": "lot of I do a lot of very beautiful drawing okay that is that is a pretty good",
    "start": "1096760",
    "end": "1103480"
  },
  {
    "text": "box does going I don't know all the built-ins oh that's nice documentation",
    "start": "1103480",
    "end": "1109280"
  },
  {
    "text": "master all the built-ins you need to break the binary into blocks of this oh dang yeah okay",
    "start": "1109280",
    "end": "1115760"
  },
  {
    "text": "that seems crazy okay yeah I couldn't do that I don't know how to do that but found two um I don't know why why would",
    "start": "1115760",
    "end": "1122520"
  },
  {
    "text": "you do that furthermore uh here's a fun one an",
    "start": "1122520",
    "end": "1128760"
  },
  {
    "text": "enter value to reverse return the value dude I I couldn't do that uh I actually can't reverse I don't know how to",
    "start": "1128760",
    "end": "1134559"
  },
  {
    "text": "reverse one uh now it's your turn see if you can fix uh this attempt to use a buil-in to reverse the",
    "start": "1134559",
    "end": "1141280"
  },
  {
    "text": "bits but the built-in only takes one argument right did I really fix",
    "start": "1141280",
    "end": "1149440"
  },
  {
    "text": "anything on expected output is this one this one equals true without",
    "start": "1154960",
    "end": "1162039"
  },
  {
    "text": "overflow oh oh it went with the u8 oh the expected result as a u8 oh",
    "start": "1162559",
    "end": "1170640"
  },
  {
    "text": "shoot oh shoot okay yeah well then that would just be that would just be what",
    "start": "1170640",
    "end": "1176200"
  },
  {
    "text": "what what are you that would be a one right here and a one right here okay well that's that's kind of",
    "start": "1176200",
    "end": "1183559"
  },
  {
    "text": "stupid all",
    "start": "1184640",
    "end": "1187840"
  },
  {
    "text": "right I don't think there's a clean logic way you can use a lookup tables yeah I know I I the real htx hey by the",
    "start": "1190679",
    "end": "1196760"
  },
  {
    "text": "way real htx you're here do you want to you want to just start now you want to just start",
    "start": "1196760",
    "end": "1204559"
  },
  {
    "text": "now I don't even sure what that means",
    "start": "1213200",
    "end": "1218120"
  },
  {
    "text": "um keep grinding okay okay 10:30 10:30 okay yeah yeah yeah yeah yeah yeah yeah we we'll go to 1030 all right built-ins",
    "start": "1218919",
    "end": "1225480"
  },
  {
    "text": "number two let's do another built-in uh 65 uh Zig has a built-in for mathematical",
    "start": "1225480",
    "end": "1231520"
  },
  {
    "text": "operations such as squirt sin cost uh exponential log floor uh uh let's see as",
    "start": "1231520",
    "end": "1237919"
  },
  {
    "text": "lots of cting operations as erir from int float from int pointer from int int",
    "start": "1237919",
    "end": "1243080"
  },
  {
    "text": "from pointer int from enum spending part of a rainy day skimming through the complete list of built-ins in the",
    "start": "1243080",
    "end": "1248559"
  },
  {
    "text": "official Zig documentation wouldn't be a bad use of your time there's some seriously cool features there check out uh call compile log embed file Source",
    "start": "1248559",
    "end": "1256320"
  },
  {
    "text": "okay that's good to know now we're going to complete examination let's see now we're going to complete our examination of buildin by exploring three of zig's",
    "start": "1256320",
    "end": "1262760"
  },
  {
    "text": "many introspection abilities this type Returns the innermost struct inum or Union that is a function call ins uh is",
    "start": "1262760",
    "end": "1270000"
  },
  {
    "text": "inside okay type info comp time T import standard line built of type okay which",
    "start": "1270000",
    "end": "1275520"
  },
  {
    "text": "returns information about the type in the data structure which will contain different information depending on which type you're examining type of type",
    "start": "1275520",
    "end": "1282640"
  },
  {
    "text": "returns a type common to all input parameters Each of which may be an expression the type is resolved using",
    "start": "1282640",
    "end": "1289039"
  },
  {
    "text": "the same pure type resolution process the compiler itself uses when infer inferring",
    "start": "1289039",
    "end": "1294720"
  },
  {
    "text": "types okay I don't I think it I think it has me you're broken you're broken the squ the squirt for me oh yeah",
    "start": "1294720",
    "end": "1302559"
  },
  {
    "text": "squirt yeah this is Squirt you know a lot of people get this wrong they call it square root but it's never been",
    "start": "1302559",
    "end": "1309240"
  },
  {
    "text": "square root it's squirt it's always been squirt it's going to continue to be squirt",
    "start": "1309240",
    "end": "1315080"
  },
  {
    "text": "squirty it's not squirty because there's no why it's just",
    "start": "1323760",
    "end": "1328440"
  },
  {
    "text": "squirt it's just simply squirt all right anyways let's look at",
    "start": "1329039",
    "end": "1335760"
  },
  {
    "text": "this uh narcissus uh me myself that uh fetch the most beautiful",
    "start": "1335760",
    "end": "1343440"
  },
  {
    "text": "type this that's pretty funny all right all right",
    "start": "1343440",
    "end": "1349640"
  },
  {
    "text": "oops we cannot leave me and myself Fields undefined please set them um all right so me uh",
    "start": "1349640",
    "end": "1357240"
  },
  {
    "text": "myself I mean",
    "start": "1357240",
    "end": "1360520"
  },
  {
    "text": "that's hold on all right I thought my cursor got",
    "start": "1362720",
    "end": "1369640"
  },
  {
    "text": "moved here we go uh determines the peer type for the three separate types reference uh they just happen to all be",
    "start": "1369640",
    "end": "1375440"
  },
  {
    "text": "the same object type of this this this",
    "start": "1375440",
    "end": "1380440"
  },
  {
    "text": "what is the peer type what is the peer type what is the peer type of something like this that's a confusing statement",
    "start": "1382840",
    "end": "1388240"
  },
  {
    "text": "because it's like what what what is the type of some what is the type of multiple things coming out the peer type",
    "start": "1388240",
    "end": "1393520"
  },
  {
    "text": "oh wait peer type is the is the type in which they all eventually",
    "start": "1393520",
    "end": "1399679"
  },
  {
    "text": "are uh Returns the common type to all input",
    "start": "1399919",
    "end": "1405158"
  },
  {
    "text": "parameters okay there we go it's the common type which in this case happens to be a narc a narcissus right oh dear",
    "start": "1405360",
    "end": "1413120"
  },
  {
    "text": "we seem to have done something wrong uh when calling this function we called it uh called it as a method which would",
    "start": "1413120",
    "end": "1419559"
  },
  {
    "text": "work uh if it had a self parameter but it doesn't see above fix this uh fix this very subtle but it makes a big",
    "start": "1419559",
    "end": "1425919"
  },
  {
    "text": "difference",
    "start": "1425919",
    "end": "1428639"
  },
  {
    "text": "okay how do I do that we don't really talk about that",
    "start": "1431600",
    "end": "1439799"
  },
  {
    "text": "all hold on oh dear we seem to have done something wrong when calling this function we called it as a method which would work if we had a self parameter",
    "start": "1440080",
    "end": "1446679"
  },
  {
    "text": "but it doesn't see above to fix this very subtle uh to fix this is very subtle but it makes a big difference so",
    "start": "1446679",
    "end": "1453559"
  },
  {
    "text": "my assumption is it would be a uh if it's not there it would be this which",
    "start": "1453559",
    "end": "1458880"
  },
  {
    "text": "seems to work right there okay it's just off there okay I wasn't sure if they're asking me",
    "start": "1458880",
    "end": "1465840"
  },
  {
    "text": "to put in the self I'm trying to follow but I'm lost if let's see use the type not the",
    "start": "1465840",
    "end": "1472520"
  },
  {
    "text": "instance is it asking I'm not sure so I just I just did this right so I'm just",
    "start": "1472520",
    "end": "1478080"
  },
  {
    "text": "using the struct as the reference right because it looks like a a a struct hanging function his final words as he",
    "start": "1478080",
    "end": "1485080"
  },
  {
    "text": "was looking in those Waters he habitually watched were alas my beloved boy in vain the place gave every word",
    "start": "1485080",
    "end": "1491200"
  },
  {
    "text": "back in reply he cried farewell and it echoed farewell oid the metaph forus",
    "start": "1491200",
    "end": "1496320"
  },
  {
    "text": "translated by Ian Johnson I don't even know that is he has room in his heart",
    "start": "1496320",
    "end": "1501919"
  },
  {
    "text": "for I don't even get that",
    "start": "1510640",
    "end": "1517399"
  },
  {
    "text": "the what is this am I supposed to like what am I",
    "start": "1517399",
    "end": "1524600"
  },
  {
    "text": "even supposed to put here is a Chad he can concentrate with all the chat I'm I'm trying to I think it's",
    "start": "1524600",
    "end": "1530679"
  },
  {
    "text": "poetry yeah but the confusing part is what am I supposed to put in",
    "start": "1530679",
    "end": "1535960"
  },
  {
    "text": "here am I supposed to put something in here because now I'm just going to go like this and let it run and then I all",
    "start": "1536039",
    "end": "1541760"
  },
  {
    "text": "right here let me fix the eror and then I guess I'll just figure out what I'm supposed to put yeah I'm not going to I'm not I'm not a fan of those kind of",
    "start": "1541760",
    "end": "1548840"
  },
  {
    "text": "exercises please complete the if statements so that the field name will not be printed if the field is of type",
    "start": "1548840",
    "end": "1555799"
  },
  {
    "text": "void which is the zero bit which takes up no space at all which of course is Echo Echo is is the void bit okay so",
    "start": "1555799",
    "end": "1562600"
  },
  {
    "text": "echo's the void one so Fields zero get the type info of narcissist struct",
    "start": "1562600",
    "end": "1568000"
  },
  {
    "text": "Fields okay so this is a structured array fields are a slice of the structured field crazy that you can do",
    "start": "1568000",
    "end": "1573399"
  },
  {
    "text": "this by the way it's crazy that you can like I'm operating on struct stuff I'm",
    "start": "1573399",
    "end": "1579720"
  },
  {
    "text": "not sure why this would be useful it's just interesting that you could do that uh Fields is a slice",
    "start": "1579720",
    "end": "1586000"
  },
  {
    "text": "struck Fields here's the Declaration struct field name type default value is",
    "start": "1586000",
    "end": "1591159"
  },
  {
    "text": "comp time alignment please complete uh these if",
    "start": "1591159",
    "end": "1596279"
  },
  {
    "text": "statements so that the field will not be printed if the field is of type okay so type type so that means I would go field",
    "start": "1596279",
    "end": "1606080"
  },
  {
    "text": "zero type does not equal",
    "start": "1606080",
    "end": "1611000"
  },
  {
    "text": "this yuck look at all that repetitive go above I don't know about you but it makes makes me itchy alas we can't use",
    "start": "1613600",
    "end": "1619919"
  },
  {
    "text": "regular for Loop here because Fields can only be evaluated at compile time it seems like we're overdue to learn about",
    "start": "1619919",
    "end": "1626080"
  },
  {
    "text": "this comp time stuff that's cool I feel like uh I run into reflection problems that uh like",
    "start": "1626080",
    "end": "1632840"
  },
  {
    "text": "that quite a lot when inspecting types and go and it's always",
    "start": "1632840",
    "end": "1639039"
  },
  {
    "text": "awkward really I I guess I've never ran into that type yet even though I did",
    "start": "1640240",
    "end": "1645559"
  },
  {
    "text": "have one point where I could I just chose not to have it I feel like a lot of yeah I I I haven't got to any place",
    "start": "1645559",
    "end": "1653120"
  },
  {
    "text": "where I need the reflection yet all right so that should",
    "start": "1653120",
    "end": "1661000"
  },
  {
    "text": "build inline Loop let's go okay so here we go so now we're going to do now we're going to do a compile time Loop",
    "start": "1661440",
    "end": "1669399"
  },
  {
    "text": "hopefully so this is where things get really interesting I think this is probably the most interesting thing of it all um this is going to be compile",
    "start": "1669399",
    "end": "1677799"
  },
  {
    "text": "time uh compile time is a program a program's environment while it is being compiled in contrast runtime is the",
    "start": "1677799",
    "end": "1683919"
  },
  {
    "text": "runtime or is the environment while the uh compiled program is executing yep errors make uh errors make an easy",
    "start": "1683919",
    "end": "1691000"
  },
  {
    "text": "example compile time error caught by the compiler usually resulting in a message to the programmer runtime error usually caught by the running program itself or",
    "start": "1691000",
    "end": "1697240"
  },
  {
    "text": "by the host Hardware or operating system could be gracefully caught or handled or could cause the computer to crash or",
    "start": "1697240",
    "end": "1702600"
  },
  {
    "text": "Halt and Catch Fire all compiled languages uh must perform a certain amount of logic at comp compile time in",
    "start": "1702600",
    "end": "1708600"
  },
  {
    "text": "order to analyze the code maintain a table of symbols such as the variable and function names optimizing compilers",
    "start": "1708600",
    "end": "1714159"
  },
  {
    "text": "can also figure out how much of a program can be pre-computed or inlined at compile time to make the resulting",
    "start": "1714159",
    "end": "1720679"
  },
  {
    "text": "program more efficient smart compilers can even unroll Loops turning their logic into a fast linear sequence of",
    "start": "1720679",
    "end": "1726320"
  },
  {
    "text": "statements at the let's see at the usually very slight expense of increased size of repeated code Zig takes these",
    "start": "1726320",
    "end": "1733679"
  },
  {
    "text": "Concepts further by making these optimizations an integral part of the language itself",
    "start": "1733679",
    "end": "1739000"
  },
  {
    "text": "all right comp time time so this is really cool so you know with rust you can do procedural macros this is like as far as I can tell",
    "start": "1739000",
    "end": "1747440"
  },
  {
    "text": "comp time is like procedural macros my assumption is not as powerful as procedural macros",
    "start": "1747440",
    "end": "1754559"
  },
  {
    "text": "but much much much much simpler than procedural macros like you can",
    "start": "1754559",
    "end": "1760600"
  },
  {
    "text": "understand it because you're not stupid or you can understand it because you're stupid and I'm stupid but the six people",
    "start": "1760600",
    "end": "1766440"
  },
  {
    "text": "who can do Rust procedural macros aren't stupid and they can do that but that's",
    "start": "1766440",
    "end": "1772120"
  },
  {
    "text": "not you or I and I don't have a degree in in the Sin crate I don't have a",
    "start": "1772120",
    "end": "1777720"
  },
  {
    "text": "bachelor's of Science in the Sin crate all numeric literals in Zig are of type comp time int or comp time float they",
    "start": "1777720",
    "end": "1784519"
  },
  {
    "text": "are an arbitrary size as big as little as you need notice we don't have to specify the size like u8 i32 f64 when we",
    "start": "1784519",
    "end": "1791320"
  },
  {
    "text": "assign identifiers immutably with const uh when we use these identifiers",
    "start": "1791320",
    "end": "1797240"
  },
  {
    "text": "in our program the values are inserted at comp uh compile time into the executable code uh the identifier",
    "start": "1797240",
    "end": "1803880"
  },
  {
    "text": "constant and con float doesn't even exist in our compiled application okay",
    "start": "1803880",
    "end": "1808960"
  },
  {
    "text": "so we have these ones these are just inserted but sometimes changes when we assign the exact same values to identifiers uh mutably with VAR the",
    "start": "1808960",
    "end": "1816279"
  },
  {
    "text": "literals are still a comp time int and comp time float but we wish to assign them to identifiers which are mutable at runtime to be mutable at runtime these",
    "start": "1816279",
    "end": "1823720"
  },
  {
    "text": "identifiers must refer to an areas of memory in order to refer to areas of memory Zig must know exactly how much",
    "start": "1823720",
    "end": "1829720"
  },
  {
    "text": "memory to reserve for these values therefore it follows that we just specify numeric types with specified",
    "start": "1829720",
    "end": "1835360"
  },
  {
    "text": "size the comp time numbers will be coerced okay so AAR",
    "start": "1835360",
    "end": "1843120"
  },
  {
    "text": "int okay here's a varant varant varant we've reassigned",
    "start": "1843120",
    "end": "1848840"
  },
  {
    "text": "new values here so oh interesting so a changes at compile time what's going on",
    "start": "1848840",
    "end": "1854679"
  },
  {
    "text": "through here bonus now we're familiar with this built-ins can we inspect the types to",
    "start": "1854679",
    "end": "1860000"
  },
  {
    "text": "see what they are no guessing is needed oh I need to go like this right I assume I have to",
    "start": "1860000",
    "end": "1867200"
  },
  {
    "text": "go right I have to oh did I not get that uh let's see",
    "start": "1867480",
    "end": "1874360"
  },
  {
    "text": "variable of comp time in must be const or comp",
    "start": "1874360",
    "end": "1879039"
  },
  {
    "text": "time I'm confused oh is this varant",
    "start": "1883720",
    "end": "1889919"
  },
  {
    "text": "wait what wait what is it asking for to be mutable at run time I'm super confused at what it's asking to be",
    "start": "1890840",
    "end": "1896159"
  },
  {
    "text": "asking to go here hold on a variable of type comp time",
    "start": "1896159",
    "end": "1903320"
  },
  {
    "text": "int must be const or comp time to modify this variable at runtime",
    "start": "1908279",
    "end": "1913960"
  },
  {
    "text": "it must be given explicit fixed size okay and I'm expect to do what all right",
    "start": "1913960",
    "end": "1919519"
  },
  {
    "text": "hold on literals are still comp time int and comp time flow but we wish to assign them to identifiers which are mutable at",
    "start": "1919519",
    "end": "1925200"
  },
  {
    "text": "runtime to be mutable at runtime these identifiers must also refer to areas of memory in order to refer to Memories you must say have size oh okay so it's just",
    "start": "1925200",
    "end": "1931960"
  },
  {
    "text": "literally asking me to do uh like a a u32 uh an",
    "start": "1931960",
    "end": "1938960"
  },
  {
    "text": "F32 is that what they're asking me to",
    "start": "1938960",
    "end": "1942919"
  },
  {
    "text": "do comp time int has no member",
    "start": "1945519",
    "end": "1949840"
  },
  {
    "text": "oh oh interesting u32 has no members oh wait",
    "start": "1951639",
    "end": "1960000"
  },
  {
    "text": "do I just print it out then I don't like change it I don't say hey print out the",
    "start": "1960000",
    "end": "1966799"
  },
  {
    "text": "type comp time int comp time float u32 okay okay I I think I understand I think",
    "start": "1972440",
    "end": "1979200"
  },
  {
    "text": "I understand that now uh you can always oh I you know what I was doing the wrong thing there I was doing the wrong thing",
    "start": "1979200",
    "end": "1985159"
  },
  {
    "text": "uh Carson's coming in yeah Carson's going to be here oh Carson should be here now Carson you want to do this all right well that was interesting okay I",
    "start": "1985159",
    "end": "1992559"
  },
  {
    "text": "got confused yes but it makes sense you can't just have a variable that's an",
    "start": "1992559",
    "end": "1999600"
  },
  {
    "text": "integer that's a VAR without assigning its type because it can't guess the type",
    "start": "1999600",
    "end": "2005480"
  },
  {
    "text": "cuz it's it's not a constant okay interesting oh come on it was that was a",
    "start": "2005480",
    "end": "2011039"
  },
  {
    "text": "great one that was a great one",
    "start": "2011039",
    "end": "2014960"
  }
]