[
  {
    "start": "0",
    "end": "28000"
  },
  {
    "text": "is this a skill issue [Music]",
    "start": "40",
    "end": "6370"
  },
  {
    "text": "yeah so it turns out the only thing more over represented on this podcast than",
    "start": "7760",
    "end": "14719"
  },
  {
    "text": "developers who play DotA two is developers that rideo Camel and as it",
    "start": "14719",
    "end": "20519"
  },
  {
    "text": "turns out you do both is that is that correct that is correct I play Heart support and self support in Dota 2 and I",
    "start": "20519",
    "end": "26920"
  },
  {
    "text": "write a lot of a camel I know you as leoa is that you is that how you're known online soost is actually a",
    "start": "26920",
    "end": "32960"
  },
  {
    "start": "28000",
    "end": "97000"
  },
  {
    "text": "username that comes from my grandpa's email which was Kosta like CAA and",
    "start": "32960",
    "end": "38520"
  },
  {
    "text": "essentially it's like my first name le e Leandro osta is my last name so online",
    "start": "38520",
    "end": "43640"
  },
  {
    "text": "people usually call me Leo which is not wrong because my name is a Greek compound name that is composed from Leos",
    "start": "43640",
    "end": "49920"
  },
  {
    "text": "and Andros so Leo is essentially part of the root of the name it's completely fine but if uh some people also call me",
    "start": "49920",
    "end": "55920"
  },
  {
    "text": "Le or Leandro like one of those three are good and you were from argen I am I am I'm born and raised here live",
    "start": "55920",
    "end": "62760"
  },
  {
    "text": "like but with Greek Heritage no no no I don't I don't have Greek Heritage it's just my I guess my mom liked that name",
    "start": "62760",
    "end": "67799"
  },
  {
    "text": "so oh just the name okay just the name yes there's a weird mix of culture happening right now because I used to",
    "start": "67799",
    "end": "72960"
  },
  {
    "text": "live in Paraguay so I'm familiar with Paraguay in an Argentine culture and you're drinking coffee which is",
    "start": "72960",
    "end": "78840"
  },
  {
    "text": "definitely not what I would expect from an Argentine yeah so I guess you would expect me to be drinking Matti right yeah yeah and I think mat would be the",
    "start": "78840",
    "end": "85920"
  },
  {
    "text": "right choice if I was at home maybe I'll do that right now I'm cat seating a a beautiful cat for a friend so I don't",
    "start": "85920",
    "end": "92520"
  },
  {
    "text": "really have all my M and stuff with me so I'm just going for the coffee it's actually just an espresso machine okay I",
    "start": "92520",
    "end": "97960"
  },
  {
    "start": "97000",
    "end": "170000"
  },
  {
    "text": "brought you on to talk about o camel this podcast has widely overrepresented",
    "start": "97960",
    "end": "103360"
  },
  {
    "text": "the oaml language but it fascinates me so that's why that's why we're doing it tell me how you got involved with o",
    "start": "103360",
    "end": "109159"
  },
  {
    "text": "camel in the first place why are you even interested in this language o all right so I'll was try to keep the story",
    "start": "109159",
    "end": "114360"
  },
  {
    "text": "short short to medium maybe but I was writing a lot of large systems in Arline right and I started to feel more and",
    "start": "114360",
    "end": "121240"
  },
  {
    "text": "more the pain pain of dynamic languages of not knowing if a change I was making",
    "start": "121240",
    "end": "126520"
  },
  {
    "text": "was actually going to impact the rest of the work I had to do or even my colleagues right or if you know if it",
    "start": "126520",
    "end": "133160"
  },
  {
    "text": "was going to be safe to deploy and if since it was in a fintech I was scared",
    "start": "133160",
    "end": "138360"
  },
  {
    "text": "shitless right of shipping a bug and then losing a bunch of money to the company was rather rather young as well",
    "start": "138360",
    "end": "144440"
  },
  {
    "text": "at had a colleague Daniel McCain excellent engineer by the way he kept pestering me to learn Haso",
    "start": "144440",
    "end": "150400"
  },
  {
    "text": "and I was like I don't know should I relearn has schol uh we even got into like some meab thingies and built a",
    "start": "150400",
    "end": "156599"
  },
  {
    "text": "little ba basic interpreter in high school right eventually I decided that it was not for me it just looked very",
    "start": "156599",
    "end": "162959"
  },
  {
    "text": "weird and I couldn't get my head around the laziness of the language right but I thought the types are interesting so",
    "start": "162959",
    "end": "168200"
  },
  {
    "text": "what is out there like this and I found Idris so before writing OK camel I was writing Idis and um Idris is a a",
    "start": "168200",
    "end": "176680"
  },
  {
    "start": "170000",
    "end": "423000"
  },
  {
    "text": "dependently type language that goes like if you if you grab the type safety Noob that you know you can go from JavaScript",
    "start": "176680",
    "end": "182640"
  },
  {
    "text": "through like elixir to go to a camel the the the last number there is like Hol",
    "start": "182640",
    "end": "188000"
  },
  {
    "text": "and then after that you get stuff like Idris it's like breaking the noob you know what I mean uh where you're",
    "start": "188000",
    "end": "193440"
  },
  {
    "text": "actually just meta programming in types is that liter is like oh my",
    "start": "193440",
    "end": "199360"
  },
  {
    "text": "God the entire program is like a mathematical proof right and it is",
    "start": "199360",
    "end": "205680"
  },
  {
    "text": "mind-blowing surprisingly they also do run the programs which is super interesting right but um they actually",
    "start": "205680",
    "end": "211120"
  },
  {
    "text": "do compute something eventually exactly yeah they compute stuff yeah and I built a couple of libraries like daytime like",
    "start": "211120",
    "end": "216519"
  },
  {
    "text": "the date ranges for example that carry the proof mathematical proof that the beginning date and the end date are",
    "start": "216519",
    "end": "223000"
  },
  {
    "text": "actually distinct and the first one is earlier than the second one which are like you I can do that with two asserts",
    "start": "223000",
    "end": "228080"
  },
  {
    "text": "right it's like done but no here it was like that and um a lot of that really got ingrained in my head like how do you",
    "start": "228080",
    "end": "234879"
  },
  {
    "text": "think with types but the Idris ecosystem was very new Idris is still a research",
    "start": "234879",
    "end": "240760"
  },
  {
    "text": "language so I had to dial that Noob all the way down until I found something that was safe enough for my taste a big",
    "start": "240760",
    "end": "247879"
  },
  {
    "text": "upgrade from the dynamic languages I was used to right but had better of an ecosystem for me to actually build and",
    "start": "247879",
    "end": "254000"
  },
  {
    "text": "ship things and I landed on a camel I didn't know you could twist that",
    "start": "254000",
    "end": "259440"
  },
  {
    "text": "knob the for everyone listening by the way I'm just going to recap we're talking about dynamically typed and",
    "start": "259440",
    "end": "266199"
  },
  {
    "text": "statically typed languages like famously JavaScript and python like dynamically typed you don't really get to know what",
    "start": "266199",
    "end": "272479"
  },
  {
    "text": "types your things are unless you like print it out at runtime and we're saying that like you've got this knob that",
    "start": "272479",
    "end": "279360"
  },
  {
    "text": "represents how statically typed a language is and you can keep cranking it up and like go is is fairly statically typed you know o camel has has more type",
    "start": "279360",
    "end": "287080"
  },
  {
    "text": "power than go so you can like keep cranking that knob I thought the knob stopped at hasell but apparently you can",
    "start": "287080",
    "end": "292800"
  },
  {
    "text": "crank it until it breaks off and you get go 11 right you can go to 12 and today I",
    "start": "292800",
    "end": "299759"
  },
  {
    "text": "think you can go even further past that with other languages like agda or lean or which I have not dared Venture",
    "start": "299759",
    "end": "306160"
  },
  {
    "text": "into you're just making up words now I've never I know these are this could be Pokemon okay so you did this Idis thing",
    "start": "306160",
    "end": "313080"
  },
  {
    "text": "and then you went back and did you ever ship any production stuff in hcll or",
    "start": "313080",
    "end": "318440"
  },
  {
    "text": "Idris I haven't shipped hll but I have read a lot of production Haskell like doing audits it does exist it does it",
    "start": "318440",
    "end": "324680"
  },
  {
    "text": "does exist um I don't think I can divulge details Nas but but I have",
    "start": "324680",
    "end": "330680"
  },
  {
    "text": "shipped some Ines I actually wrote uh while I was at Spotify I wrote a little spec for part of the logic of one of the",
    "start": "330680",
    "end": "339400"
  },
  {
    "text": "sort of requirements in one of the systems we had that was around dates around like where a particular song is",
    "start": "339400",
    "end": "345479"
  },
  {
    "text": "available in the world like sometimes it has to be available earlier than in some other place in the world based on time",
    "start": "345479",
    "end": "351120"
  },
  {
    "text": "zones and stuff like that so I wrote for myself a little spec right that was like okay this is how it should work and it",
    "start": "351120",
    "end": "356560"
  },
  {
    "text": "had a proof and then it was implemented in Python which is the that makes sense right but at least I knew like okay this",
    "start": "356560",
    "end": "362520"
  },
  {
    "text": "logic is correct and we have respect for that right you proved it you proved it in one language and then actually went",
    "start": "362520",
    "end": "368400"
  },
  {
    "text": "and implemented it in Python yeah yeah I I didn't even implement it right somebody else did okay so in some sense",
    "start": "368400",
    "end": "375720"
  },
  {
    "text": "I feel like well maybe this is what these languages are are made of or for right you you prove the thing you prove",
    "start": "375720",
    "end": "381360"
  },
  {
    "text": "the design of the software you want and once you know it's correct you go back and implement it in a language that",
    "start": "381360",
    "end": "386639"
  },
  {
    "text": "everybody will be able to understand and modify and update right that was the most subtle I worked at Spotify by the",
    "start": "386639",
    "end": "393960"
  },
  {
    "text": "way I did I did I did yes that's really cool just actually two episodes ago we",
    "start": "394039",
    "end": "400639"
  },
  {
    "text": "moved our podcast host from a third party to Spotify simply because the only",
    "start": "400639",
    "end": "406160"
  },
  {
    "text": "way you can post video versions of your podcast on Spotify as far as we could tell is to host with Spotify so we're",
    "start": "406160",
    "end": "412400"
  },
  {
    "text": "now a Spotify hosted podcast and we upload the videos so if you're a podcast if you're a Spotify listener and you didn't notice you actually can now watch",
    "start": "412400",
    "end": "419280"
  },
  {
    "text": "the video version of this uh of this podcast on on that is so cool yeah Okay cool so you got into o camel how give us",
    "start": "419280",
    "end": "426000"
  },
  {
    "start": "423000",
    "end": "694000"
  },
  {
    "text": "a timeline like when when was this O So 2013 I think I wrote my first uh Airline",
    "start": "426000",
    "end": "433120"
  },
  {
    "text": "program 2015 I landed my first real like you're are going to write systems in IRL",
    "start": "433120",
    "end": "439199"
  },
  {
    "text": "now 2016 maybe the Idris book was released I remember we got a beta of that book with a friend and we devoured",
    "start": "439199",
    "end": "447039"
  },
  {
    "text": "the book like in I don't know a week wow wait sorry to interrupt for just a second to State my curiosity you",
    "start": "447039",
    "end": "452520"
  },
  {
    "text": "mentioned this and I totally blew past it is earling a dynamically typed language oh yeah uh it's strongly typed",
    "start": "452520",
    "end": "459280"
  },
  {
    "text": "but it's dynamically typed so you know variables don't change the type but you don't know what the type it is until you",
    "start": "459280",
    "end": "465319"
  },
  {
    "text": "run the code Python's the same way well I should say I'm sure they're very different but python is also strongly",
    "start": "465319",
    "end": "470400"
  },
  {
    "text": "typed yet very dynamically typed I had no idea I always assumed llang was a",
    "start": "470400",
    "end": "475479"
  },
  {
    "text": "statically typed language just because I've used a lot of rabbit mq and RAB mq is famously built in lling it's like one",
    "start": "475479",
    "end": "481680"
  },
  {
    "text": "of the I think it's one of the most famous pieces of software in Earl 100% like the at least the the pieces of",
    "start": "481680",
    "end": "487000"
  },
  {
    "text": "software that everybody can use right freely yeah yeah and like it's fast and it does concurrency and so like those",
    "start": "487000",
    "end": "494759"
  },
  {
    "text": "two things together I was like Fast concurrency like got to be statically TP exactly yeah if go is typed then this",
    "start": "494759",
    "end": "501039"
  },
  {
    "text": "thing has to be typed as well so I think ear has doing some incredible things",
    "start": "501039",
    "end": "506240"
  },
  {
    "text": "over its like 30 35 years of existence maybe more now is from 86 I think and",
    "start": "506240",
    "end": "512000"
  },
  {
    "text": "one of those was that they needed to be able to to swap out right the code that",
    "start": "512000",
    "end": "518000"
  },
  {
    "text": "was running in a box in like a telecom switch that was in a post 30 kilometers",
    "start": "518000",
    "end": "523279"
  },
  {
    "text": "away from the city right and they needed to be able to do that without taking down this the the box right to connect",
    "start": "523279",
    "end": "529600"
  },
  {
    "text": "remotely and swap out the software and when you need that kind of hot Cod reloading which by the way they",
    "start": "529600",
    "end": "536080"
  },
  {
    "text": "basically invented right like in the web we go like oh yeah we have HRM or whatever it's like these people hav been",
    "start": "536080",
    "end": "541800"
  },
  {
    "text": "doing that from the 90s you know it's like before the web was the thing that means you cannot really like try to type check your code right and then replace",
    "start": "541800",
    "end": "548800"
  },
  {
    "text": "it with a new version of that that might have different types like you need the flexibility of a dynamically typed",
    "start": "548800",
    "end": "554000"
  },
  {
    "text": "language I think like you can't recompile you just like put code there and run it right well so airling does",
    "start": "554000",
    "end": "559640"
  },
  {
    "text": "compile right like but it doesn't compile in the same sense that like I don't know go does or camel does right",
    "start": "559640",
    "end": "565480"
  },
  {
    "text": "it runs on like a VM like Java right exactly exactly so Erin compiles to some bu code and that bu code also is it",
    "start": "565480",
    "end": "572200"
  },
  {
    "text": "doesn't have like static types that you cannot tell like what the types of things are it's like here's memory here or there there are some literals so",
    "start": "572200",
    "end": "578640"
  },
  {
    "text": "sometimes by looking at it you can say this will be a string or number but then that VM is the thing that makes it fast so by keeping the language Dynamic but",
    "start": "578640",
    "end": "585680"
  },
  {
    "text": "having that intermediate representation they're able to optimize a lot of things right and then the VM makes sure that it runs crazy fast but the reliability part",
    "start": "585680",
    "end": "594160"
  },
  {
    "text": "right that is where the airline programming model comes in and saves the day because we have all the languages",
    "start": "594160",
    "end": "600279"
  },
  {
    "text": "like that that are not very good for like massive concurrency like JavaScript is kind of like that today right very Dynamic language that essentially",
    "start": "600279",
    "end": "606800"
  },
  {
    "text": "compiles that right compiles down to something the V8 will be able to run very quickly it doesn't explicitly have",
    "start": "606800",
    "end": "612800"
  },
  {
    "text": "like an bite code like irang does but then I don't see a lot of people running like massively concurrent no. JS",
    "start": "612800",
    "end": "620079"
  },
  {
    "text": "backends for example or concurrent at all yeah people use go people use Elixir they get concurrency by like scaling out",
    "start": "620079",
    "end": "626640"
  },
  {
    "text": "the number of kubernetes PODS ex exactly exactly multiple processes right exactly",
    "start": "626640",
    "end": "631680"
  },
  {
    "text": "kubernetes is you know to most languages what OTP is to earling and it has been",
    "start": "631680",
    "end": "637079"
  },
  {
    "text": "also since the 90s right like the ability to do that that thing like scale the processes horizontally okay so you",
    "start": "637079",
    "end": "642480"
  },
  {
    "text": "did some earling and then you did Idis that you said that was like 2016 yeah",
    "start": "642480",
    "end": "647839"
  },
  {
    "text": "cool and then where did you go from there programming language wise I picked up OK Cam and I started writing ok caml",
    "start": "647839",
    "end": "653000"
  },
  {
    "text": "then in 2017 I enjoined Spotify I was working at Clara before that which is the other big Swedish unicorn here this",
    "start": "653000",
    "end": "659040"
  },
  {
    "text": "is why I moved to Sweden by the way to work for claro and uh and then out there I was doing mostly JavaScript python",
    "start": "659040",
    "end": "665000"
  },
  {
    "text": "Scala Java you know usual stacks for a company that size you don't have a lot of uh let's say creativity you can't be",
    "start": "665000",
    "end": "671600"
  },
  {
    "text": "like Oh I'm going to use this research language for these things which is completely fine it's I think it's a solid technical decision for a company",
    "start": "671600",
    "end": "678600"
  },
  {
    "text": "that size and on the side I kept writing OK camel and then Reon came along I think Reon came along",
    "start": "678600",
    "end": "683920"
  },
  {
    "text": "2018 I think there was a big Global meet up and I was like we got to be on that",
    "start": "683920",
    "end": "689360"
  },
  {
    "text": "so I grabbed a friend and we organized a recent meet up at Spotify and this is",
    "start": "689360",
    "end": "694760"
  },
  {
    "start": "694000",
    "end": "948000"
  },
  {
    "text": "reason ml reent ml yes reent ml which was it's a new syntax or was a new syntax now it's just an alternative",
    "start": "694760",
    "end": "700920"
  },
  {
    "text": "syntax right for o camel which is essentially JavaScript it aims to be closer to what you would expect as a",
    "start": "700920",
    "end": "707560"
  },
  {
    "text": "javascrip right so okay were you like you",
    "start": "707560",
    "end": "713279"
  },
  {
    "text": "yeah let's make things look more like JavaScript like what the hell kind of goal is that well just want to remove",
    "start": "713279",
    "end": "720079"
  },
  {
    "text": "friction man like you know skill I'm with you I'm with you personally ISS",
    "start": "720079",
    "end": "726959"
  },
  {
    "text": "yeah I don't I don't necessarily agree with the Aesthetics of JavaScript I don't know I feel like OK camel is also",
    "start": "726959",
    "end": "732200"
  },
  {
    "text": "kind of ugly but it's okay I'm mostly kidding okay so they like make it look more like JavaScript probably to like",
    "start": "732200",
    "end": "739240"
  },
  {
    "text": "help with adoption I'm assuming exactly so the creator of reson is the same guy create that created react right Jordan W",
    "start": "739240",
    "end": "745720"
  },
  {
    "text": "which you should definitely try to bring on at some point yeah so Jordan creat cre a bunch of like react and he",
    "start": "745720",
    "end": "752279"
  },
  {
    "text": "actually prototyped react in standard ml so a lot of the functional ideas that are embedded in react model actually",
    "start": "752279",
    "end": "758800"
  },
  {
    "text": "come from OK camel OK camel's grandfather if you want to call it that because OK camel is the Like Son of",
    "start": "758800",
    "end": "764440"
  },
  {
    "text": "camel which is the son off keeps going and going until you reach standard ML and ml back from the 70s right and he",
    "start": "764440",
    "end": "770839"
  },
  {
    "text": "said well we got to remove friction from absolutely every step we can and so he made reason as a way of saying we're",
    "start": "770839",
    "end": "777360"
  },
  {
    "text": "going to remove friction from adopting the OK camel type system not necessarily the OK camel language entirely right",
    "start": "777360",
    "end": "784040"
  },
  {
    "text": "just the type system to recap that just a little bit standard ml is like the",
    "start": "784040",
    "end": "789279"
  },
  {
    "text": "parent of a whole branch of languages right and my understanding is and I",
    "start": "789279",
    "end": "795160"
  },
  {
    "text": "could be very wrong here is that it almost is like the grandparent of like one tree of languages and C is kind of",
    "start": "795160",
    "end": "802160"
  },
  {
    "text": "like the grandparent of like another branch of languages and like there's some crossover there and whatever but",
    "start": "802160",
    "end": "807680"
  },
  {
    "text": "like they're like two very different Phil philosophies I think small talk is like the other one that's kind of always",
    "start": "807680",
    "end": "812880"
  },
  {
    "text": "referred to as like kind of this ancestor language that like Ruby you know took a lot of inspiration from and I guess we have lisps as well at some",
    "start": "812880",
    "end": "819440"
  },
  {
    "text": "point oh yeah lisps yep do lisps Trace back to standard ml or no no lisp",
    "start": "819440",
    "end": "824720"
  },
  {
    "text": "predates standard Mill oh okay and they have very different philosophies lisps are not necessarily functional languages",
    "start": "824720",
    "end": "830639"
  },
  {
    "text": "right you can do functional programming in them but they are very procedural this load of mutable State everywhere",
    "start": "830639",
    "end": "836079"
  },
  {
    "text": "this commis has an entire thing called clause Clos which is the common list object system which has some really",
    "start": "836079",
    "end": "843480"
  },
  {
    "text": "weird stuff in it but it's you know they they call it alien tech for reasons but",
    "start": "843480",
    "end": "848639"
  },
  {
    "text": "it's not my speciality so I will I will not talk much about that that sounds like the biggest and and this could",
    "start": "848639",
    "end": "854279"
  },
  {
    "text": "again could be just like my misunderstanding or or perception but that sounded like the most like the no true Scotsman fallacy of like lisp isn't",
    "start": "854279",
    "end": "860720"
  },
  {
    "text": "really functional because when I learned lisp in college and like had to write my own little list it was definitely introduced as like this is a functional",
    "start": "860720",
    "end": "867040"
  },
  {
    "text": "thing right we're going to like do recursion instead of of doing you know iteration with loops uh but I could",
    "start": "867040",
    "end": "872680"
  },
  {
    "text": "totally see how you know obviously it's extremely dynamically typed and to like a rust or an O camer types I feel like",
    "start": "872680",
    "end": "879360"
  },
  {
    "text": "are such a fundamental part of of functional programming in some way yeah then again if you ask someone that",
    "start": "879360",
    "end": "884480"
  },
  {
    "text": "writes erang or Elixir they will say like no I'm a functional programmer I don't need types right right in some and",
    "start": "884480",
    "end": "890600"
  },
  {
    "text": "then if you ask a hcll they will tell you that okam is untyped right so he's such a big Spectrum there's definitely a",
    "start": "890600",
    "end": "897880"
  },
  {
    "text": "lot of opinions not sure how much production code is getting written in these languages but there's a lot of opinions are being shipped I think it's",
    "start": "897880",
    "end": "904480"
  },
  {
    "text": "probably the inverse relation there the more opinion like hll has so many opinions go doesn't have a lot of",
    "start": "904480",
    "end": "911639"
  },
  {
    "text": "opinions right it's like and there's so much sofware ring go like kubernetes Docker terraform everywhere everywhere",
    "start": "911639",
    "end": "918480"
  },
  {
    "text": "yeah everywhere that's actually not true go is extremely opinionated about not",
    "start": "918480",
    "end": "924079"
  },
  {
    "text": "having the ability to have your own opinions it's like this authoritarian like you will just do it this way and",
    "start": "924079",
    "end": "931639"
  },
  {
    "text": "it's like it's this very authoritarian like top down we have all the opinions they might not be right but it doesn't",
    "start": "931639",
    "end": "937920"
  },
  {
    "text": "matter you're going to follow them when I was just saying this because in has school like it is the people that have the opinions the language is like what",
    "start": "937920",
    "end": "944560"
  },
  {
    "text": "do you want to do you can do anything and um that's problematic okay we we're going to segue now into talking about",
    "start": "944560",
    "end": "951319"
  },
  {
    "start": "948000",
    "end": "1080000"
  },
  {
    "text": "the riot Library I think the Segway is really nice because we were talking off the air so now I'm going to bring the",
    "start": "951319",
    "end": "956720"
  },
  {
    "text": "audience up to speed about how you know camel you bring your own stuff a lot of the times bring your own standard",
    "start": "956720",
    "end": "963120"
  },
  {
    "text": "library right batter is not included go is completely the opposite philosophy it's like go ships with everything you",
    "start": "963120",
    "end": "969759"
  },
  {
    "text": "need it ships with a tool chain ships with a standard Library don't go outside the standard Library unless you really",
    "start": "969759",
    "end": "975000"
  },
  {
    "text": "need to tell me a little bit about that philosophy and why it got you started",
    "start": "975000",
    "end": "980880"
  },
  {
    "text": "building Riot okay I'm a little scared to say what I really think about that but all right so is this a",
    "start": "980880",
    "end": "987959"
  },
  {
    "text": "cancelable opinion [Laughter] you know camel terms you might I might",
    "start": "987959",
    "end": "994000"
  },
  {
    "text": "ruffle a few FS but here it goes so OK is batteries included but the the",
    "start": "994000",
    "end": "999720"
  },
  {
    "text": "batteries they include are generic and kind of and maybe they're halfway through they're like old doublea's from",
    "start": "999720",
    "end": "1006639"
  },
  {
    "text": "like the N like 1995 exactly and you really expected like the ghost style like duracel B9 battery right like this",
    "start": "1006639",
    "end": "1013800"
  },
  {
    "text": "going to last you a solid year uh or I don't know how long it would last for a program language but the problem is that",
    "start": "1013800",
    "end": "1020519"
  },
  {
    "text": "that library that standard library is incredibly out deer right it has only very few things that haven't changed in",
    "start": "1020519",
    "end": "1026720"
  },
  {
    "text": "a long time if you dig through the source code and if you get blame here and there you will like very frequently",
    "start": "1026720",
    "end": "1032798"
  },
  {
    "text": "see commits that are from like the 90s right and that means a lot of things are",
    "start": "1032799",
    "end": "1037839"
  },
  {
    "text": "just named the way they have been for 20 years even if they're absolutely garbage",
    "start": "1037839",
    "end": "1043720"
  },
  {
    "text": "like do you have a membership test right in a list to see if something exists",
    "start": "1043720",
    "end": "1049760"
  },
  {
    "text": "which we would nor normally say does this list contain these elements right in OK caml uh is called me mem and",
    "start": "1049760",
    "end": "1057280"
  },
  {
    "text": "that's for membership test right and that makes perfect sense of course yeah I knew it you knew it like everybody",
    "start": "1057280",
    "end": "1062320"
  },
  {
    "text": "knows it right it couldn't possibly mean like memory or something yeah exactly like do you remember this item list like",
    "start": "1062320",
    "end": "1068400"
  },
  {
    "text": "have you seen this item before like interrogate uh kind of a method and that sort of thing is pervasive it is it is",
    "start": "1068400",
    "end": "1075480"
  },
  {
    "text": "everywhere in the in the S library and makes it really hard sometimes to use for some things they have some deeper",
    "start": "1075480",
    "end": "1082240"
  },
  {
    "start": "1080000",
    "end": "1390000"
  },
  {
    "text": "problems I think than just the naming which is already big for example in know cam the type inference Works sort of",
    "start": "1082240",
    "end": "1088080"
  },
  {
    "text": "right to left so when you have a function and you give it a like a list map for example function to map over a",
    "start": "1088080",
    "end": "1094640"
  },
  {
    "text": "list with some function in the middle and and you give it that function right then the type inference still doesn't",
    "start": "1094640",
    "end": "1101200"
  },
  {
    "text": "know what is the type of the elements of the list so it cannot really help you know what are the things you can do with",
    "start": "1101200",
    "end": "1108080"
  },
  {
    "text": "in inside the list function right with every item so you have to pass in the the list at the very end and then it",
    "start": "1108080",
    "end": "1114320"
  },
  {
    "text": "goes like Oh yeah this was a list of integers yeah so inside the little function in list map right you know",
    "start": "1114320",
    "end": "1119360"
  },
  {
    "text": "usually you have like array. map you pass a function and then in there you're expected to know what the type is of the thing you are about to map over it's",
    "start": "1119360",
    "end": "1125720"
  },
  {
    "text": "pretty standard in most type languages that you do something like that I don't know how go deals with this because generics but I I imagine that if you",
    "start": "1125720",
    "end": "1132520"
  },
  {
    "text": "have a like int array uh map then you know that it's going to be in so aamel",
    "start": "1132520",
    "end": "1137640"
  },
  {
    "text": "has a problem where the library has been built in a way that for some reason is not very nice for inference which means",
    "start": "1137640",
    "end": "1145360"
  },
  {
    "text": "a lot of the time when you write out these functions you're like struggling with the LSP until you finally put the",
    "start": "1145360",
    "end": "1151320"
  },
  {
    "text": "last thing and it goes like now I know what you're talking about that's wild to hear from you because like like I said",
    "start": "1151320",
    "end": "1159280"
  },
  {
    "text": "this podcast is basically just an O camel shill podcast at this point and both Sabine and TJ talk about how great",
    "start": "1159280",
    "end": "1165760"
  },
  {
    "text": "the inference is so if I'm understanding correctly it it's great like once you write the",
    "start": "1165760",
    "end": "1171960"
  },
  {
    "text": "whole thing but like it needs that last bit is that what I'm hearing like you need to actually type out the whole thing for the inference to work you",
    "start": "1171960",
    "end": "1178520"
  },
  {
    "text": "can't you don't just like put the signatures and the functions is that or the types fun the inference is great but",
    "start": "1178520",
    "end": "1184360"
  },
  {
    "text": "if you write code that is going against how the inference Works you're not going",
    "start": "1184360",
    "end": "1189679"
  },
  {
    "text": "to get good inference right is this a skill issue",
    "start": "1189679",
    "end": "1194960"
  },
  {
    "text": "yeah maybe maybe I should still writing o all right I I'll go back tol it was a",
    "start": "1194960",
    "end": "1201520"
  },
  {
    "text": "good run I guess I guess what I'm asking is are you purposefully trying to do it like Let me",
    "start": "1201520",
    "end": "1208000"
  },
  {
    "text": "Give an example I've seen a lot of rubyists come into the go programming language and the way they write go you",
    "start": "1208000",
    "end": "1214120"
  },
  {
    "text": "know I think in their minds is great because it's it follows a lot of like the clean patterns of writing good Ruby",
    "start": "1214120",
    "end": "1220039"
  },
  {
    "text": "code um but it doesn't fit the language doesn't fit go and so you end up getting some pretty hard to maintain hardto read",
    "start": "1220039",
    "end": "1227000"
  },
  {
    "text": "weird code is is it possible that that's what's happening like are you trying to write o camel in a different way or are",
    "start": "1227000",
    "end": "1232760"
  },
  {
    "text": "you like pretty much convinced that like no this is the like idiomatic way to write this like mapping function and it",
    "start": "1232760",
    "end": "1239120"
  },
  {
    "text": "still makes the inference weird oh I'm not talking about code I'm writing I'm talking about this stand of Library ah",
    "start": "1239120",
    "end": "1245360"
  },
  {
    "text": "okay well then I I think we can just assume that it is yeah ID I think they just can't change it now anymore but it",
    "start": "1245360",
    "end": "1251600"
  },
  {
    "text": "was like somebody wrote it that way seemed like a great idea back then maybe the inference changed of the last 30",
    "start": "1251600",
    "end": "1256919"
  },
  {
    "text": "years and now we're stuck with the cheaty stand libr but I guess rounding like coming all the way back to the point of bring your own everything right",
    "start": "1256919",
    "end": "1263960"
  },
  {
    "text": "like batter is not included there are several replacement or extension standard libraries there's one called",
    "start": "1263960",
    "end": "1269919"
  },
  {
    "text": "containers you got base you got uh s leave by Jam Street as well I think it's called core these days uh you have one",
    "start": "1269919",
    "end": "1276480"
  },
  {
    "text": "called batteries as well even Riot ships his own standard Library these days it's not as complete as everything else but",
    "start": "1276480",
    "end": "1282279"
  },
  {
    "text": "we you made a third party library for my understanding is is it for concurrency",
    "start": "1282279",
    "end": "1287880"
  },
  {
    "text": "correct yes and you had to ship a whole standard library for the language with it for some parts of the language um that's",
    "start": "1287880",
    "end": "1294159"
  },
  {
    "text": "wild yeah it kind of to be honest it kind of sucks like I wish I didn't have to do that I wish okel was more it",
    "start": "1294159",
    "end": "1301440"
  },
  {
    "text": "already can be quite the go of functional programming languages I wish it was more like the go like go in terms",
    "start": "1301440",
    "end": "1308240"
  },
  {
    "text": "of the opinions like here's the way that you should do things and there's no room for the developer opinion but um you",
    "start": "1308240",
    "end": "1315480"
  },
  {
    "text": "know he has 30 years in the industry and Academia there's a lot of code and papers that have it written with it that",
    "start": "1315480",
    "end": "1321480"
  },
  {
    "text": "need to be replicable so I don't think that's going to change anytime soon for the record I did not pay Leo to say the",
    "start": "1321480",
    "end": "1329120"
  },
  {
    "text": "words o camel should be more like go that was organic that was organ that was organic I dude I love go I think it's",
    "start": "1329120",
    "end": "1336559"
  },
  {
    "text": "amazing what people build with go I have my pet peeves with the language itself but there's this meta thing above the",
    "start": "1336559",
    "end": "1342559"
  },
  {
    "text": "language which is what do people actually get to build with it right like people hate Ruby hate own Ruby sometimes",
    "start": "1342559",
    "end": "1348840"
  },
  {
    "text": "but because people have built all sorts of awful and amazing dsls with Ruby right but then look at what the Ruby",
    "start": "1348840",
    "end": "1354880"
  },
  {
    "text": "Community has done over the years right it's like they have done pretty good for themselves well I should say I do not like Ruby I'm not a fan but yes I look",
    "start": "1354880",
    "end": "1362600"
  },
  {
    "text": "at Ruby through the same lens that like I look at PHP which is like wow I hate",
    "start": "1362600",
    "end": "1367840"
  },
  {
    "text": "these languages but holy like they're making a lot of money over there yeah like they sure some of my first",
    "start": "1367840",
    "end": "1373480"
  },
  {
    "text": "money I made with both of those yeah exactly exactly yeah what what is this language good for is good for SAS to be",
    "start": "1373480",
    "end": "1379400"
  },
  {
    "text": "clear I still wouldn't do it like I'd still write my sass and go and I have but I appreciate that you can build a",
    "start": "1379400",
    "end": "1386279"
  },
  {
    "text": "very good business on top of these languages yeah it's a lot to be learn from that if we start talking about Riot",
    "start": "1386279",
    "end": "1392240"
  },
  {
    "start": "1390000",
    "end": "1457000"
  },
  {
    "text": "one of the things that has allowed us to move this fast has been that we look",
    "start": "1392240",
    "end": "1397440"
  },
  {
    "text": "around at other communities and I've had a chance to to do work like professional",
    "start": "1397440",
    "end": "1403600"
  },
  {
    "text": "engineering work right making a living of software with C PHP uh also Ruby and",
    "start": "1403600",
    "end": "1408919"
  },
  {
    "text": "python JavaScript I've written a bunch of coffee script all the other languages that we mentioned Airline Elixir Java",
    "start": "1408919",
    "end": "1415039"
  },
  {
    "text": "Scala I haven't written go professionally right but that has given me the idea that all languages kind of",
    "start": "1415039",
    "end": "1421600"
  },
  {
    "text": "suck but the ecosystems are kind of awesome in different ways right so if you know what to look for you can go",
    "start": "1421600",
    "end": "1426840"
  },
  {
    "text": "find the gems of Ruby the gems of Elixir and go right and say I don't need to try to solve that problem from scratch again",
    "start": "1426840",
    "end": "1434120"
  },
  {
    "text": "because my ecosystem OK camel doesn't need like Novel Web servers it just needs like reliable web servers so what",
    "start": "1434120",
    "end": "1440679"
  },
  {
    "text": "ecosystem has a good one out there can we learn from that design and bring it to a camel so we've done a lot of that",
    "start": "1440679",
    "end": "1446080"
  },
  {
    "text": "and we've done a little of that we go as well I think this is actually a point that well in some ways is not talked",
    "start": "1446080",
    "end": "1453520"
  },
  {
    "text": "about enough and in other ways is like honestly beating a dead horse and let me let me tell you what I mean the ecosystem of a language is critically",
    "start": "1453520",
    "end": "1459679"
  },
  {
    "start": "1457000",
    "end": "1694000"
  },
  {
    "text": "important I would argue and I think go is a really good example of this and python as well go as a language is very",
    "start": "1459679",
    "end": "1466760"
  },
  {
    "text": "simple easy to get started with there's some drawbacks to that Simplicity I talk about this a lot enums like I hate the",
    "start": "1466760",
    "end": "1472600"
  },
  {
    "text": "lack of enums it's really weird I feel like we should have that part of the type system in go it would be really",
    "start": "1472600",
    "end": "1478840"
  },
  {
    "text": "nice the go ecosystem the idea that like I can compile it to a static binary and deploy it anywhere right like cross",
    "start": "1478840",
    "end": "1485279"
  },
  {
    "text": "compilation is easy the standard library is super rich I don't need to like pick a framework to build an HTTP server like",
    "start": "1485279",
    "end": "1490640"
  },
  {
    "text": "there's all these really nice things baked in Python on the other hand I mean it is dynamically typed so I will say that's like a drawback of the language",
    "start": "1490640",
    "end": "1496720"
  },
  {
    "text": "cuz I don't like dynamically typed languages generally speaking but it's a great language to write and this is why",
    "start": "1496720",
    "end": "1502520"
  },
  {
    "text": "I teach new developers um computer science principles with python on boev because it's just it's so easy to write",
    "start": "1502520",
    "end": "1508000"
  },
  {
    "text": "it gets out of your way like if you want to build a binary tree in Python you all you have to worry about is like the",
    "start": "1508000",
    "end": "1513600"
  },
  {
    "text": "mechanics of the tree itself the syntax is like super super easy the ecosystem is a nightmare the Schism",
    "start": "1513600",
    "end": "1520720"
  },
  {
    "text": "between Python 2 and three if you want to deploy it somewhere you have to install python like dependency",
    "start": "1520720",
    "end": "1526000"
  },
  {
    "text": "Management's a nightmare with Pip but like d Jango there's a lot of successful",
    "start": "1526000",
    "end": "1531559"
  },
  {
    "text": "SAS companies built with Django just like rails right and so like that's a really batteries included framework that just exists when you go out to these",
    "start": "1531559",
    "end": "1538200"
  },
  {
    "text": "other like more esoteric languages sometimes like the languages are really cool and they're fun to talk about on podcasts like this this is going to",
    "start": "1538200",
    "end": "1544480"
  },
  {
    "text": "sound like I'm on a camel I'm not and I guess I am okay so like the ecosystem like this is the problem right",
    "start": "1544480",
    "end": "1551200"
  },
  {
    "text": "is like the ecosystem needs to evolve to the point where you can just like start the project write the code and ship the",
    "start": "1551200",
    "end": "1558039"
  },
  {
    "text": "thing I think people are obsessed with the idea that because they love a language everybody should come write a",
    "start": "1558039",
    "end": "1563840"
  },
  {
    "text": "language out of love for the language and languages are tools sorry to break this to y'all I don't care about your",
    "start": "1563840",
    "end": "1569200"
  },
  {
    "text": "Lang I don't I don't care much about o camel as much as I don't care about go right I want to be able to do things",
    "start": "1569200",
    "end": "1574279"
  },
  {
    "text": "with OK camel and I think OK camel is a better tool for some things than go but as long as OK camel lets me build the",
    "start": "1574279",
    "end": "1579799"
  },
  {
    "text": "things I want to build I'll be using it the moment I can't use it for that then I'll just switch for something else",
    "start": "1579799",
    "end": "1585279"
  },
  {
    "text": "right I have people asking me hey should I build my SAS app you know C I'm like not yet there's so many missing pieces",
    "start": "1585279",
    "end": "1591000"
  },
  {
    "text": "you know what I mean it's like I don't recommend it right now if you're one of the listeners to this podcast that likes",
    "start": "1591000",
    "end": "1597159"
  },
  {
    "text": "to hang out on like Tech YouTube Tech Twitter Tech Reddit whatever it's important to remember you're in like the",
    "start": "1597159",
    "end": "1604279"
  },
  {
    "text": "2% of developers that do that like the other 98% of developers like show up to",
    "start": "1604279",
    "end": "1609880"
  },
  {
    "text": "their job and they just want to like use stuff that gets their job done so they can go home at the end of the day and be",
    "start": "1609880",
    "end": "1615679"
  },
  {
    "text": "done and I'm not saying you shouldn't listen to YouTube to podcast because it honestly does make you a better engineer",
    "start": "1615679",
    "end": "1621279"
  },
  {
    "text": "it's just important to realize that the other people you're hanging out with sometimes are doing things literally",
    "start": "1621279",
    "end": "1627679"
  },
  {
    "text": "just for fun not because it's like a great business decision or it's hyper",
    "start": "1627679",
    "end": "1633080"
  },
  {
    "text": "optimized to like further their career and so if those are your goals like you should just keep that in mind thank you",
    "start": "1633080",
    "end": "1638240"
  },
  {
    "text": "for saying that because it's so important to distinguish right between like what what are your goals right when",
    "start": "1638240",
    "end": "1644120"
  },
  {
    "text": "you're starting a company when you're learning a language if I was to start ass sass right now right I would",
    "start": "1644120",
    "end": "1650120"
  },
  {
    "text": "probably pick Elixir because that's one of the languages I feel I'm most proficient in that has the largest ecosystem where I can build most things",
    "start": "1650120",
    "end": "1656720"
  },
  {
    "text": "like this right uh but it could be go as well just as well I I don't say go because I haven't done that already but",
    "start": "1656720",
    "end": "1662840"
  },
  {
    "text": "I have done that several matters a lot exactly exactly but this is one of the reasons I'm building Riot because I want",
    "start": "1662840",
    "end": "1669120"
  },
  {
    "text": "to make a camell sass ready and it's not right now it's not but I really want to make it and I'm not saying all the",
    "start": "1669120",
    "end": "1674200"
  },
  {
    "text": "people aren't and I'm not saying the pieces for making assassino camel are not there I'm just saying for that 98%",
    "start": "1674200",
    "end": "1680039"
  },
  {
    "text": "of developers that just want to show up to the work OK caml is so far from a like a turnkey Solution that's sort of",
    "start": "1680039",
    "end": "1686279"
  },
  {
    "text": "what I would like to have it be to have it be like turn the key and C up and running you have a service and off you",
    "start": "1686279",
    "end": "1692519"
  },
  {
    "text": "go focus on your business right is Riot a concurrency library or a web framework",
    "start": "1692519",
    "end": "1698080"
  },
  {
    "start": "1694000",
    "end": "1861000"
  },
  {
    "text": "that's a great question uh so it's a it's actually a concurrency Library so to put it in in like parallels with",
    "start": "1698080",
    "end": "1704120"
  },
  {
    "text": "other languages you have erlang the language and you have elixir and both languages run on the same virtual",
    "start": "1704120",
    "end": "1710200"
  },
  {
    "text": "machine so a lot of the common properties of the languages are actually properties of the virtual machine the concurrency the fact that is immutable",
    "start": "1710200",
    "end": "1716799"
  },
  {
    "text": "by default or almost ex exclusively immutable the ability to scale to",
    "start": "1716799",
    "end": "1722559"
  },
  {
    "text": "millions of processes right this is not a property of erlang or Elixir is the runtime itself and on top of that you",
    "start": "1722559",
    "end": "1728919"
  },
  {
    "text": "have Frameworks in Aang there's a couple of Frameworks like web machine for example in Elixir you have Phoenix and",
    "start": "1728919",
    "end": "1734519"
  },
  {
    "text": "so on what Riot is or how it fits in that picture is that RI is kind of like",
    "start": "1734519",
    "end": "1739880"
  },
  {
    "text": "the erlang virtual machine we're bringing in a lot of things from the erlang virtual machine into OK camel",
    "start": "1739880",
    "end": "1745559"
  },
  {
    "text": "because OK camel with its philosophy of bring your own everything shipped tools for you to build your own concurrency",
    "start": "1745559",
    "end": "1752679"
  },
  {
    "text": "models instead of saying hey we're GNA give you g routines right like o camel routines or whatever they said like well",
    "start": "1752679",
    "end": "1758919"
  },
  {
    "text": "we don't want to decide for you so here's the smallest possible thing that you could use to build processes to",
    "start": "1758919",
    "end": "1765559"
  },
  {
    "text": "build go routines to build whatever right go bananas and in some sense that's kind of amazing that the language",
    "start": "1765559",
    "end": "1772000"
  },
  {
    "text": "is so flexible but now that means as a user of a camel 5 and above you have to",
    "start": "1772000",
    "end": "1777120"
  },
  {
    "text": "choose which standard Library you're going to use and then also which concurrency model you're going to use which you can imagine generates a little",
    "start": "1777120",
    "end": "1783679"
  },
  {
    "text": "bit of a split it's not as straightforward like with go you use it and you have a s library and you have G",
    "start": "1783679",
    "end": "1788919"
  },
  {
    "text": "routines done there may be libraries that Implement some other things around G routines but G routines are part of the language period so that's what Riot",
    "start": "1788919",
    "end": "1795919"
  },
  {
    "text": "is it's an actor model like you know Lang lure you have processes that are isolated from each other and send",
    "start": "1795919",
    "end": "1801200"
  },
  {
    "text": "messages to each other that would be like the actor model part scheduler for a camel 5 and by scheduler I mean it",
    "start": "1801200",
    "end": "1807480"
  },
  {
    "text": "grabs all those actors you you can have 10 or 10,000 or a million right and it",
    "start": "1807480",
    "end": "1812799"
  },
  {
    "text": "moves him around and it sort of balances the load across all of your cores and it kind of makes your cam program is",
    "start": "1812799",
    "end": "1818480"
  },
  {
    "text": "multicore for free right it's never exactly for free but it is as free as it's in llink where if you have 10",
    "start": "1818480",
    "end": "1824640"
  },
  {
    "text": "processes and 10 CPUs then it will run one process per you so parity not just",
    "start": "1824640",
    "end": "1829720"
  },
  {
    "text": "concurrently so that's what Riot is first of all this sounds really cool because coming from a go background like",
    "start": "1829720",
    "end": "1836159"
  },
  {
    "text": "concurrency I've become entitled to concurrency it's like it's like you know",
    "start": "1836159",
    "end": "1842360"
  },
  {
    "text": "when you have something around for long enough you just take it for granted and occasionally when I leave the go ecosystem I'm reminded how hard",
    "start": "1842360",
    "end": "1849720"
  },
  {
    "text": "concurrency can be in other languages so a lot of my listeners to this podcast",
    "start": "1849720",
    "end": "1855279"
  },
  {
    "text": "will be familiar with how go does concurrency with go routine and channels in the occasional mutex can you compare",
    "start": "1855279",
    "end": "1862760"
  },
  {
    "start": "1861000",
    "end": "1982000"
  },
  {
    "text": "this the model that you're building in Riot with the actor model to are you familiar enough with go routines to be",
    "start": "1862760",
    "end": "1869080"
  },
  {
    "text": "able to make that comparison if not I can give I think so okay uh but yeah if you want to give me a refresher then I will appreciate that but uh go for it",
    "start": "1869080",
    "end": "1876799"
  },
  {
    "text": "and and I can for the listeners too really quick because not everybody is familiar with go say by the Bell okay so in go basically you have",
    "start": "1876799",
    "end": "1885080"
  },
  {
    "text": "this keyword the go keyword and when you use it in front of a function call then that function will be called within a",
    "start": "1885080",
    "end": "1891440"
  },
  {
    "text": "separate go routine and a go routine you can think of it as just an extremely lightweight thread so operating systems",
    "start": "1891440",
    "end": "1899320"
  },
  {
    "text": "have threads which basically allow you to utilize multiple CPU cores but they're kind of like heavy and so what",
    "start": "1899320",
    "end": "1905320"
  },
  {
    "text": "the go runtime does is it says okay you can actually make way more go routines than you can make operating system",
    "start": "1905320",
    "end": "1911279"
  },
  {
    "text": "threads so it will actually make a small amount of operating system threads say two three four whatever and you can make",
    "start": "1911279",
    "end": "1919159"
  },
  {
    "text": "like a thousand go routines on top of that and it will do like multiplexing so it will like utilize the hardware in a",
    "start": "1919159",
    "end": "1925240"
  },
  {
    "text": "fairly efficient way and you can think of your the nice thing for the programmer is you can think of",
    "start": "1925240",
    "end": "1930639"
  },
  {
    "text": "everything at the Go routine level right every go routine is essentially a separate process and then if you want to",
    "start": "1930639",
    "end": "1935919"
  },
  {
    "text": "do synchronization you have to use either like channels or some other primitive like like a mutex so mutex",
    "start": "1935919",
    "end": "1941880"
  },
  {
    "text": "mutual exclusion locks this is like the very classical way of doing like threading in C it's like okay I'm going",
    "start": "1941880",
    "end": "1948880"
  },
  {
    "text": "to lock this memory so that only one thread can have access to it at a time but but go introduces this new primitive",
    "start": "1948880",
    "end": "1955360"
  },
  {
    "text": "called channels which are basically just thread safe cues so you can have one go",
    "start": "1955360",
    "end": "1960840"
  },
  {
    "text": "routine sending data on a channel and another go routine waiting and reading",
    "start": "1960840",
    "end": "1965919"
  },
  {
    "text": "on that channel and so the philosophy in go is like we should use channels when",
    "start": "1965919",
    "end": "1971440"
  },
  {
    "text": "we can because they make everything more efficient there's a lot less waiting involved and everything's more kind of",
    "start": "1971440",
    "end": "1977919"
  },
  {
    "text": "real time and snappy thank you for the explanation that's uh that maps to the model I had to go as well the way that",
    "start": "1977919",
    "end": "1983360"
  },
  {
    "start": "1982000",
    "end": "2314000"
  },
  {
    "text": "Riot implements the actor model is almost ver team like the same up to channels so we don't have a keyword",
    "start": "1983360",
    "end": "1989360"
  },
  {
    "text": "called go we have a function called pawn and this Pawn function takes a function that will be executed in what",
    "start": "1989360",
    "end": "1995960"
  },
  {
    "text": "essentially is a crazy crazy lightweight thread so like a go routine like a go",
    "start": "1995960",
    "end": "2001000"
  },
  {
    "text": "routin exactly okay last time I measured it was like 140 words about half the size of what airling process is I",
    "start": "2001000",
    "end": "2007279"
  },
  {
    "text": "expected R to be competitive with earling in some things over the years if we keep keep it up right once we spin up",
    "start": "2007279",
    "end": "2013200"
  },
  {
    "text": "a process right we schedule that process to run on some of the different schedulers that are running on different",
    "start": "2013200",
    "end": "2020559"
  },
  {
    "text": "threads actual operating system threads usually we spin up one thread per CPU",
    "start": "2020559",
    "end": "2025840"
  },
  {
    "text": "one scheduler per CPU so your program is composed of processes Riot processes",
    "start": "2025840",
    "end": "2031320"
  },
  {
    "text": "just like your go program is composed of go routines so you forget about the OS level of concurrency and multi-threading",
    "start": "2031320",
    "end": "2038039"
  },
  {
    "text": "does that for you so when you spin up a process it will run in a CPU right and you may run on any of those randomly",
    "start": "2038039",
    "end": "2043720"
  },
  {
    "text": "allocated right so that's the process story some interesting things to know",
    "start": "2043720",
    "end": "2049118"
  },
  {
    "text": "about processes is that they are essentially a function execution so it's kind of like saying I'm going to run",
    "start": "2049119",
    "end": "2054760"
  },
  {
    "text": "this function on this isolated context right if it blows up if it like crashes",
    "start": "2054760",
    "end": "2059800"
  },
  {
    "text": "with an exception or something it's completely isolated so it doesn't actually crash any of your other things",
    "start": "2059800",
    "end": "2065040"
  },
  {
    "text": "and I imagine go routines have a similar property if a go routine crashes it doesn't crash all go routines right yeah",
    "start": "2065040",
    "end": "2070158"
  },
  {
    "text": "it's just if the main go routine crashes then the process crashes yeah that is something we have differently here where",
    "start": "2070159",
    "end": "2077520"
  },
  {
    "text": "when you create your first Riot process the one that starts the entire application every other process is",
    "start": "2077520",
    "end": "2082800"
  },
  {
    "text": "detached from it so even if like your main process dies which is usually used for orchestration at first everything",
    "start": "2082800",
    "end": "2089919"
  },
  {
    "text": "else may continue to live and we have some other ways of dealing with essentially termination policies right",
    "start": "2089919",
    "end": "2096158"
  },
  {
    "text": "how do you close down your system shut down sort of orchestration and stuff like that that we're also picking up",
    "start": "2096159",
    "end": "2101320"
  },
  {
    "text": "from erlang and elixir because they're great at doing that right so that will be up to like what processes what",
    "start": "2101320",
    "end": "2107800"
  },
  {
    "text": "processes are about if you want a process to leave for a long time you essentially make a recursive function",
    "start": "2107800",
    "end": "2113400"
  },
  {
    "text": "right so as long as the function never finishes running then that process will continue to live and that usually means",
    "start": "2113400",
    "end": "2119440"
  },
  {
    "text": "we have one tiny Loop function that it recurs with a state so you always pass the same state around if you need to",
    "start": "2119440",
    "end": "2125400"
  },
  {
    "text": "make some change then you change the state and then you it around in the next recursion right and that's what a",
    "start": "2125400",
    "end": "2130680"
  },
  {
    "text": "process is like um I'm not sure how people do that sort of thing in our routines I imagine you have some Global",
    "start": "2130680",
    "end": "2137040"
  },
  {
    "text": "like not Global but State before the go routine or at the beginning of the go routine and then you have like some sort",
    "start": "2137040",
    "end": "2142760"
  },
  {
    "text": "of loop like a receive loop with a select on the channel or something like that yeah I mean you've definitely",
    "start": "2142760",
    "end": "2148599"
  },
  {
    "text": "chosen violence I'm just kidding 's a functional programming language I would expect like this this recursion with",
    "start": "2148599",
    "end": "2155280"
  },
  {
    "text": "State makes makes a lot of sense in go although like all of my students",
    "start": "2155280",
    "end": "2160920"
  },
  {
    "text": "going through the functional programming language like heard that and they're like ah why why don't you just loop with a while yeah in Go I mean I guess it",
    "start": "2160920",
    "end": "2168640"
  },
  {
    "text": "depends on what you're trying to do like some of the common patterns in go is like okay I'm going to spawn this lawn long running worker thread and it's just",
    "start": "2168640",
    "end": "2175920"
  },
  {
    "text": "in a for in go we don't have while Loops but we have forever for loops and just like in a forever for loop it's going to",
    "start": "2175920",
    "end": "2182599"
  },
  {
    "text": "do something every 30 seconds or whatever right you called them forever for Loops well I mean instead of just",
    "start": "2182599",
    "end": "2188079"
  },
  {
    "text": "like forever Loops I should that's such a better way",
    "start": "2188079",
    "end": "2193720"
  },
  {
    "text": "to say it come on go Community forever Loops I don't know how anyone else says",
    "start": "2193720",
    "end": "2199319"
  },
  {
    "text": "it I just make up my own when it's written out it's just four and then the immediately the bracket",
    "start": "2199319",
    "end": "2206000"
  },
  {
    "text": "there's no like La so one of those four Loops that's pretty common another thing you can do is like range over a ticker",
    "start": "2206000",
    "end": "2212200"
  },
  {
    "text": "channel so the ghost standard library has this idea of a channel that just on an interval will send a message and so",
    "start": "2212200",
    "end": "2218200"
  },
  {
    "text": "you can ask for a channel and say hey give me a channel that ticks every 15 seconds and you just range over the",
    "start": "2218200",
    "end": "2224520"
  },
  {
    "text": "channel in an infinite Loop and every 15 seconds it will do a thing common",
    "start": "2224520",
    "end": "2230200"
  },
  {
    "text": "pattern I think I've seen that pattern in the bubble te Library I think they us SE something like that for controlling the refresh rate of the two application",
    "start": "2230200",
    "end": "2237520"
  },
  {
    "text": "yeah yeah anything that happen has to happen on like a static interval that's super common if it's a more like real timey thing then that's when you're",
    "start": "2237520",
    "end": "2244599"
  },
  {
    "text": "definitely going to see a lot more of like just like custom channels that are passing messages around if it's like",
    "start": "2244599",
    "end": "2250200"
  },
  {
    "text": "Global state for example I have like apis that maybe log visit counts just in",
    "start": "2250200",
    "end": "2256680"
  },
  {
    "text": "memory on the server then I'd probably use like a mutex right just like all the go routines have access to this like",
    "start": "2256680",
    "end": "2262319"
  },
  {
    "text": "shared state and they'll just like lock and unlock the state and increment the thing right that makes sense so yeah",
    "start": "2262319",
    "end": "2268079"
  },
  {
    "text": "unfortunately like we we have Wilds in OK camel as well so you can say wild true just do this thing infinitely um",
    "start": "2268079",
    "end": "2275839"
  },
  {
    "text": "however one of the downsides of the language not shipping a specific concurrency model and rather allowing",
    "start": "2275839",
    "end": "2281560"
  },
  {
    "text": "you to build your own is that they cannot decide between cooperative and preemptive scheduling for you like they",
    "start": "2281560",
    "end": "2287839"
  },
  {
    "text": "cannot say we're GNA give you a scheduling model that interrupts your code anywhere you sort of have to build",
    "start": "2287839",
    "end": "2293839"
  },
  {
    "text": "some of that which at the end of the day ends up being comparative scheduling right imagine if the G routine cannot do",
    "start": "2293839",
    "end": "2299920"
  },
  {
    "text": "a forever Loop forever for Loop but rather inside there you have to call something like yield right every time",
    "start": "2299920",
    "end": "2306440"
  },
  {
    "text": "you actually you you have to remember to do that otherwise that forever for Loop will just like starve one of the threads",
    "start": "2306440",
    "end": "2312440"
  },
  {
    "text": "of the operating system thread right can you compare and contrast those two scheduling approaches yeah absolutely so",
    "start": "2312440",
    "end": "2319000"
  },
  {
    "start": "2314000",
    "end": "2490000"
  },
  {
    "text": "Cooperative scheduling right and then you have preemptive scheduling and the first one the co-op Co-op scheduling is",
    "start": "2319000",
    "end": "2324280"
  },
  {
    "text": "essentially saying you and I are having this conversation right and you don't talk until I say what do you think lane",
    "start": "2324280",
    "end": "2331599"
  },
  {
    "text": "and then you say something okay you like pass pass the time over to me to talk got exactly it's like I'm done here or",
    "start": "2331599",
    "end": "2337160"
  },
  {
    "text": "I'll just just wait a little bit and then you get to do your thing preemptive scheduling would be if the editor just",
    "start": "2337160",
    "end": "2342680"
  },
  {
    "text": "says enough enough Leandro and just cuts me and then it makes you talk a little bit and then Cuts you at some point and so on and so forth erlang is and I",
    "start": "2342680",
    "end": "2349720"
  },
  {
    "text": "assume goal also is uh preemptive scheduled so in erlang and Le here and go you don't have to like sneak around",
    "start": "2349720",
    "end": "2356359"
  },
  {
    "text": "these little calls to say well this would be a good point for the scheduler to like run a different go routine OK",
    "start": "2356359",
    "end": "2362079"
  },
  {
    "text": "camel isn't and historically we've had Cooperative scheduling via concurr",
    "start": "2362079",
    "end": "2367599"
  },
  {
    "text": "monets right where some Library figures out like oh this promise or this future right is right now waiting on like an I",
    "start": "2367599",
    "end": "2375359"
  },
  {
    "text": "don't know socket to be ready to be read or written to so now I'll put it aside and so on right and that's something",
    "start": "2375359",
    "end": "2380680"
  },
  {
    "text": "that okamo 5 kind of inherits there is no easy way of saying I'm want to have this function like a while true and the",
    "start": "2380680",
    "end": "2387560"
  },
  {
    "text": "compiler will magically know when it's time for that while true to pause so something else can run so what we do is",
    "start": "2387560",
    "end": "2394800"
  },
  {
    "text": "that we actually offer you a little function called yield so if you want to write a while true which you can then",
    "start": "2394800",
    "end": "2400520"
  },
  {
    "text": "you just got to remember that every now and then call that function yield so then you tell the Schuler hey I am good",
    "start": "2400520",
    "end": "2406880"
  },
  {
    "text": "to be swapped out to be suspended for a little bit because otherwise one while through just like brecks the whole",
    "start": "2406880",
    "end": "2413359"
  },
  {
    "text": "thread let me like say this back especially for our listeners who maybe have only done concurrency in go because",
    "start": "2413359",
    "end": "2418720"
  },
  {
    "text": "this is very different so in go in a preemptive scheduling system you can",
    "start": "2418720",
    "end": "2424319"
  },
  {
    "text": "just like write a thousand different go routines they I'll just do stuff and the go run time is going to be responsible",
    "start": "2424319",
    "end": "2430960"
  },
  {
    "text": "for being like okay I've got four CPUs I'm going to like take these 200 go",
    "start": "2430960",
    "end": "2436319"
  },
  {
    "text": "routines I'm going to do like one operation on this on go routine one and then I'm going to sneak in an operation",
    "start": "2436319",
    "end": "2441680"
  },
  {
    "text": "on go routine two and then I'm going to sneak in an operation on go routine 3 and it like very quickly shifts all the",
    "start": "2441680",
    "end": "2447880"
  },
  {
    "text": "computations that need to happen across all the go routines through the CPU like it does them all like it it multiplexes",
    "start": "2447880",
    "end": "2454079"
  },
  {
    "text": "them all it does them all uh kind of at the same time and it's in charge of swapping them in and out it sounds like",
    "start": "2454079",
    "end": "2459480"
  },
  {
    "text": "with Cooperative scheduling you as the developer have to be like okay I'm now at a point where you're safe to like",
    "start": "2459480",
    "end": "2466000"
  },
  {
    "text": "pause me for a second and now you can like go do some other go routine or process or whatever and you as a",
    "start": "2466000",
    "end": "2472319"
  },
  {
    "text": "developer have to like kind of be aware of that if I don't yield then this this",
    "start": "2472319",
    "end": "2478240"
  },
  {
    "text": "go routine is going to just lock down an entire core until it decides to stop yes you can imagine how that is hard is a",
    "start": "2478240",
    "end": "2486119"
  },
  {
    "text": "lot harder than sounds a writing the code yeah it sounds pretty awful yeah so how do we fix that most of the time the",
    "start": "2486119",
    "end": "2493000"
  },
  {
    "start": "2490000",
    "end": "2594000"
  },
  {
    "text": "places where you could block are not really like wild throughs I mean how many wild throughs have you for real",
    "start": "2493000",
    "end": "2498119"
  },
  {
    "text": "written in like for business applications you know like not that many maybe one or two in specific situations",
    "start": "2498119",
    "end": "2503520"
  },
  {
    "text": "when you like go through arrays or stuff like that right like it Loops in that sense recursion though we do recursion",
    "start": "2503520",
    "end": "2509079"
  },
  {
    "text": "all the time in functional programming but most of the time your processes or your go routines are going to be",
    "start": "2509079",
    "end": "2514880"
  },
  {
    "text": "blocking on iO they're going to be blocking because they want to write to a socket and the socket's not ready right",
    "start": "2514880",
    "end": "2520200"
  },
  {
    "text": "so how do we fix this the standard library that Riot ships with and this is where we go back to the whole bring your",
    "start": "2520200",
    "end": "2525720"
  },
  {
    "text": "own everything includes TCP listener objects TCP streams to be able to read",
    "start": "2525720",
    "end": "2531880"
  },
  {
    "text": "and write data over the wire right it includes support for files and all of",
    "start": "2531880",
    "end": "2536960"
  },
  {
    "text": "this are aware of the schedu link right so when you say I want to write to the",
    "start": "2536960",
    "end": "2542480"
  },
  {
    "text": "socket we immediately know oh this probably will block so we'll suspend you until that socket is ready in practice",
    "start": "2542480",
    "end": "2549000"
  },
  {
    "text": "your code looks completely imperative like just write to this thing and read from this thing and so on right but",
    "start": "2549000",
    "end": "2554839"
  },
  {
    "text": "under the hood we are doing that scheduling for you so it's only in the cases where you actually want to do like",
    "start": "2554839",
    "end": "2560640"
  },
  {
    "text": "unbounded like wild truths or stuff like that that you have to be like oh okay I need to put a yield here you just",
    "start": "2560640",
    "end": "2566119"
  },
  {
    "text": "snuck in all the yield statements into the standard Library exactly yes that's wonderful I love",
    "start": "2566119",
    "end": "2572079"
  },
  {
    "text": "that it is it is sneaky but it works yeah no I mean that sounds way better than like me doing it at the application",
    "start": "2572079",
    "end": "2578760"
  },
  {
    "text": "Level I don't like the sound of that at all so hold on like just to back up for a second so you personally not only",
    "start": "2578760",
    "end": "2584559"
  },
  {
    "text": "wrote a scheduler and a concurrency library for o camel you shipped a",
    "start": "2584559",
    "end": "2589920"
  },
  {
    "text": "standard Library like you like just you it's not like super complete few other people so we've shaped quite a few",
    "start": "2589920",
    "end": "2596280"
  },
  {
    "start": "2594000",
    "end": "2785000"
  },
  {
    "text": "things from the bottom of the stack right we have shied a library for doing conditional compilation in OK camel that",
    "start": "2596280",
    "end": "2603160"
  },
  {
    "text": "is getting a lot of love from different people which I'm really happy about and it's super nice to use versus the C",
    "start": "2603160",
    "end": "2608839"
  },
  {
    "text": "current alternatives for that we've shipped bindings to LEC as a library and",
    "start": "2608839",
    "end": "2614280"
  },
  {
    "text": "not complete but enough definitions to be dangerous to be useful we've shipped an a sync engine for a camel called",
    "start": "2614280",
    "end": "2620960"
  },
  {
    "text": "gluon that is a is essentially very very close in design to the a sync engine",
    "start": "2620960",
    "end": "2627319"
  },
  {
    "text": "that Tokyo uses in Rust again there's no reason to try to come up like invent a new thing we'll just go and learn from",
    "start": "2627319",
    "end": "2632680"
  },
  {
    "text": "the best Mio the Tokyo engine is insane it's really good it's really small it is crazy fast so we've done very",
    "start": "2632680",
    "end": "2639720"
  },
  {
    "text": "similar in design to them on top of that we have shipped a library for composable",
    "start": "2639720",
    "end": "2646119"
  },
  {
    "text": "read write streams that are similar to The read and write traits in Rust so",
    "start": "2646119",
    "end": "2651480"
  },
  {
    "text": "they allow you to say I have a source I'm going to wrap a wrap it in a reader or a writer right and then you forget",
    "start": "2651480",
    "end": "2657599"
  },
  {
    "text": "what the source was and then you have all this flexibility to say like I want to write a parser for example for HTTP",
    "start": "2657599",
    "end": "2663400"
  },
  {
    "text": "but I don't care where the data comes from right so as long as you give me a reader and I can read from that and so on and on top of that we've shipped a",
    "start": "2663400",
    "end": "2670839"
  },
  {
    "text": "new kind of strings for ok camel called bite strings that allow you to do",
    "start": "2670839",
    "end": "2676440"
  },
  {
    "text": "pattern matching like you do in Elixir which you probably seen when you do like you take a string a string you do like",
    "start": "2676440",
    "end": "2681839"
  },
  {
    "text": "pattern matching with that and you say like oh the prefix is that or I want to grab like the first two bits and stuff like that which you can imagine is",
    "start": "2681839",
    "end": "2687839"
  },
  {
    "text": "pretty fantastic for for Designing protocol parsers for Network applications yeah because everything's",
    "start": "2687839",
    "end": "2693200"
  },
  {
    "text": "like based on what's the first bit exactly exactly second bit is a second be like one all right then we should",
    "start": "2693200",
    "end": "2699079"
  },
  {
    "text": "read this thing in that way and so on and so forth so it gets really declarative on top of that we've shipped a riot which is primarily the scheduler",
    "start": "2699079",
    "end": "2706000"
  },
  {
    "text": "and the standard library right and and this will be like the riot stack so up to that point is all like lowlevel",
    "start": "2706000",
    "end": "2712559"
  },
  {
    "text": "things that you mostly not going to use directly you know except for the Ros s library and on top of that we've shipped",
    "start": "2712559",
    "end": "2719559"
  },
  {
    "text": "uh a socket pool that we've uh essentially learned design from an Elixir Library called Thousand Island",
    "start": "2719559",
    "end": "2726720"
  },
  {
    "text": "which I understand is a default socket pool for Phoenix these days and also on top of that we've shipped a web server",
    "start": "2726720",
    "end": "2734160"
  },
  {
    "text": "http1 and websockets uh that mirrors Bandit from Elixir as well and on top of",
    "start": "2734160",
    "end": "2739680"
  },
  {
    "text": "that so we have two or three more Li we who is wi it's a royal",
    "start": "2739680",
    "end": "2746359"
  },
  {
    "text": "Wii so there we are maybe 25 people contributing to different projects by now it's it's grow really fast to be",
    "start": "2746359",
    "end": "2752240"
  },
  {
    "text": "honest I'm really excited about that it's primarily being me prototyping the libraries like vertical St like vertical",
    "start": "2752240",
    "end": "2757680"
  },
  {
    "text": "style like here's a vertical slice of the web server this is what we do right and then trying to document issues and",
    "start": "2757680",
    "end": "2763760"
  },
  {
    "text": "trying to make it as easy as possible for people to read the code extended right and then because I'm doing all",
    "start": "2763760",
    "end": "2768880"
  },
  {
    "text": "this live on like live streams and stuff like that people get engaged and they want to learn on Cel uh they just like",
    "start": "2768880",
    "end": "2774280"
  },
  {
    "text": "join and engage and I'm I'm really excited about that that kind of growth that we're having that's an insane",
    "start": "2774280",
    "end": "2780079"
  },
  {
    "text": "number of projects to work on so like are you doing this full-time like how do you have time to do this well so I was",
    "start": "2780079",
    "end": "2786960"
  },
  {
    "start": "2785000",
    "end": "2985000"
  },
  {
    "text": "between jobs between my last startup that was a bill system company that closed down last",
    "start": "2786960",
    "end": "2794720"
  },
  {
    "text": "July August classic startup Story We Built something awesome nobody wanted to buy it we really tried to sell it and it",
    "start": "2794720",
    "end": "2800559"
  },
  {
    "text": "was really hard to sell developer tools to developers turns out and um between October and December I started playing",
    "start": "2800559",
    "end": "2806720"
  },
  {
    "text": "around with this idea of like the scheduler and then in December I was",
    "start": "2806720",
    "end": "2812319"
  },
  {
    "text": "here in Sweden by myself all through the month and I was like I have nothing to do so just start streaming like czy and",
    "start": "2812319",
    "end": "2818200"
  },
  {
    "text": "just build build build build U so for maybe two months fulltime working on all these things we sort of can I say the",
    "start": "2818200",
    "end": "2824599"
  },
  {
    "text": "word erected we erected the ecosystem yeah we built the",
    "start": "2824599",
    "end": "2829720"
  },
  {
    "text": "ecosystem yeah that way that's crazy I've learned a life hack if you want to",
    "start": "2829720",
    "end": "2835920"
  },
  {
    "text": "get good at programming move to Sweden or Norway or Finland we have like",
    "start": "2835920",
    "end": "2843240"
  },
  {
    "text": "several students on botev that are like in like the top like one percentile of",
    "start": "2843240",
    "end": "2848359"
  },
  {
    "text": "like how much they code per day they all  live in that part of the world and the only thing I can think of is",
    "start": "2848359",
    "end": "2854079"
  },
  {
    "text": "that like it's 18 hours of Darkness or 20 hours of Darkness there's nothing to do there's nothing to do to",
    "start": "2854079",
    "end": "2861559"
  },
  {
    "text": "do and so if you live there you'll just write code all day yeah yeah it's like",
    "start": "2861559",
    "end": "2866920"
  },
  {
    "text": "UA cop is like 9:00 in the morning and you have like half an hour of sun and it's cold outside and all your friends",
    "start": "2866920",
    "end": "2872599"
  },
  {
    "text": "are just at home and they don't want to go out and then you're all right I guess I'll just go until you know midnight and",
    "start": "2872599",
    "end": "2878839"
  },
  {
    "text": "then you go to bed get up and repeat isn't lonus from that area of the world lonus is that finish there's like",
    "start": "2878839",
    "end": "2885079"
  },
  {
    "text": "there's something going on over there BJ stup that sounds like a name from that area of the world yeah it sounds like",
    "start": "2885079",
    "end": "2891280"
  },
  {
    "text": "maybe Danish or or norw Norwegian but I think he's Canadian right Guido vanon rossom no he's Dutch yeah but Dutch is",
    "start": "2891280",
    "end": "2898640"
  },
  {
    "text": "like over there it's like close not to us not to us am I show is my American showing or",
    "start": "2898640",
    "end": "2905040"
  },
  {
    "text": "like I just don't understand geography is like just all the same thing isn't it like I mean it's like a state or",
    "start": "2905040",
    "end": "2911160"
  },
  {
    "text": "something northern Europe is a cold place I'm not even from around here so I",
    "start": "2911160",
    "end": "2916200"
  },
  {
    "text": "don't get offended by that stuff it's like I just alienated half of my listeners exactly yeah they churn going",
    "start": "2916200",
    "end": "2923599"
  },
  {
    "text": "out pimp Dev I know that they're different I just thought that it was cold and dark so yeah I don't know I",
    "start": "2923599",
    "end": "2930480"
  },
  {
    "text": "know they're different I just don't care I didn't say",
    "start": "2930480",
    "end": "2935720"
  },
  {
    "text": "that it's it's a compliment really like I said for some reason great programmers",
    "start": "2935720",
    "end": "2941160"
  },
  {
    "text": "are coming out of that area of the world it also makes a lot of sense all the best DOTA players come from that area of the world too or at least they did until",
    "start": "2941160",
    "end": "2948119"
  },
  {
    "text": "like southeast Asia could be I am a very aggressively mediocre oh yeah I mean the",
    "start": "2948119",
    "end": "2955480"
  },
  {
    "text": "Americas are famously mediocre like both North America and Latin America as far as I can tell we're just like we're just",
    "start": "2955480",
    "end": "2962160"
  },
  {
    "text": "like not good no I mean we we might make a lot of the game but we're just not for",
    "start": "2962160",
    "end": "2967559"
  },
  {
    "text": "playing it right for some reason we don't get any better when we play yeah yeah exactly I have not improved in",
    "start": "2967559",
    "end": "2974040"
  },
  {
    "text": "seven years yeah yeah exactly my MMR just somehow keeps going down right it's like there's an MMR reset everybody has",
    "start": "2974040",
    "end": "2980799"
  },
  {
    "text": "zero MMR and I lose MMR on every much just like how these Sten it I don't know cool well this is a lot of fun anyone",
    "start": "2980799",
    "end": "2987200"
  },
  {
    "start": "2985000",
    "end": "3120000"
  },
  {
    "text": "that's interested in no camel should definitely check out Riot again thanks for coming on can you just go ahead really quick and plug all the different",
    "start": "2987200",
    "end": "2993440"
  },
  {
    "text": "things that you'd like people that are listening to go check out you plug Riot plug your Twitch stream all that kind of",
    "start": "2993440",
    "end": "3000079"
  },
  {
    "text": "stuff yeah absolutely so if you want to check out Riot the best starting point",
    "start": "3000079",
    "end": "3005799"
  },
  {
    "text": "right now is riot. ml that's a website the website is a little bit work in progress but it will keep growing as we",
    "start": "3005799",
    "end": "3012079"
  },
  {
    "text": "add more things to it phase one of the ecosystem is sort of the current goal and we're going to try to get vertical",
    "start": "3012079",
    "end": "3017160"
  },
  {
    "text": "stack right that you can build side projects with not something you can Bank a business on just yet but something",
    "start": "3017160",
    "end": "3022640"
  },
  {
    "text": "that you can play around and be productive in right and I I'm hoping that we'll we'll have thata and running",
    "start": "3022640",
    "end": "3028839"
  },
  {
    "text": "and in good shape in the next couple of months so you can contribute in three different ways right the first one is",
    "start": "3028839",
    "end": "3034319"
  },
  {
    "text": "just using it right build things with r stack build things with a Suri framework which is the web framework we built on",
    "start": "3034319",
    "end": "3040599"
  },
  {
    "text": "top of that even if it tucks at first The Experience if you report those bux if you hang out in the Discord with us",
    "start": "3040599",
    "end": "3046160"
  },
  {
    "text": "we'll get a chance to make it better right and you'll get a chance to sort of give inputs on how you would expect that",
    "start": "3046160",
    "end": "3051319"
  },
  {
    "text": "to be uh which we're very open to receiving right uh the second way of doing that will be to contribute by",
    "start": "3051319",
    "end": "3057319"
  },
  {
    "text": "actually picking up some of the good first issues we have a road map page which will be linked in the riot ml",
    "start": "3057319",
    "end": "3062599"
  },
  {
    "text": "website so you'll be able to go there and see like oh these are good first issues across all of the repos we have contributing to the stack and usually",
    "start": "3062599",
    "end": "3069359"
  },
  {
    "text": "the issues have very good explanations like we're making sure that anybody can pick that up and says this is the",
    "start": "3069359",
    "end": "3074720"
  },
  {
    "text": "problem statement this is implementation notes how we think it could be solved we're very open to your experience so",
    "start": "3074720",
    "end": "3080359"
  },
  {
    "text": "you want to contribute those and the last way would be to actually contribute",
    "start": "3080359",
    "end": "3085799"
  },
  {
    "text": "indirectly by sponsoring us so you can go to um RL as well and you'll see a",
    "start": "3085799",
    "end": "3091200"
  },
  {
    "text": "sponsor button there that you can click on and takes you to K up sponsors or alternatively if you just want to hang",
    "start": "3091200",
    "end": "3096880"
  },
  {
    "text": "out and see how all this stuff gets made you can go to uh my Liv stream Twitch tv/ leoa down of the show notes and just",
    "start": "3096880",
    "end": "3103680"
  },
  {
    "text": "hang out there with us sub and have fun awesome Leo sta Leo thank you so much for coming on man we'll talk to you",
    "start": "3103680",
    "end": "3109799"
  },
  {
    "text": "later thank you Lane have a great one [Music]",
    "start": "3109799",
    "end": "3115520"
  },
  {
    "text": "cheers",
    "start": "3115520",
    "end": "3118520"
  }
]