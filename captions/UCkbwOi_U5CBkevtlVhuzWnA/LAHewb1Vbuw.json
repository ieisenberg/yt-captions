[
  {
    "text": "the worst thing you could do in my opinion is to listen to people on YouTube or podcasts that just take their word for it you got you got to try this",
    "start": "0",
    "end": "6120"
  },
  {
    "text": "stuff yeah and have a strong opinion that's Loosely yeah I mean at the end of the day if you come along across a new functionality or a new paradigm that you",
    "start": "6120",
    "end": "12179"
  },
  {
    "text": "prefer better which",
    "start": "12179",
    "end": "15200"
  },
  {
    "text": "[Music] thank you",
    "start": "23590",
    "end": "29470"
  },
  {
    "text": "[Music]",
    "start": "29470",
    "end": "37320"
  },
  {
    "text": "today I'm joined by Michael Green he's the author of zero to Pi he has a PHD in chemistry and made a transition to",
    "start": "37320",
    "end": "43920"
  },
  {
    "text": "back-end web development Michael do you want to take just a second and introduce yourself so so my name is Michael uh",
    "start": "43920",
    "end": "50399"
  },
  {
    "text": "pleasure to be here my background getting into into web development comes from a scientific Computing background",
    "start": "50399",
    "end": "56820"
  },
  {
    "text": "so I started out in Academia most of my my Computing experience comes from doing",
    "start": "56820",
    "end": "64198"
  },
  {
    "text": "scientific Computing for materials and houses and as I was going through that",
    "start": "64199",
    "end": "69420"
  },
  {
    "text": "process of getting my my PhD I figured out or I I came to the conclusion that I",
    "start": "69420",
    "end": "77100"
  },
  {
    "text": "was having a lot of fun with the work that I was doing developing these ETL pipelines for doing materials analysis",
    "start": "77100",
    "end": "82920"
  },
  {
    "text": "and it wasn't that big of a job to go from the scientific Computing domain that I had started into web development",
    "start": "82920",
    "end": "88680"
  },
  {
    "text": "where I am now actually building ETL pipelines for the current company that I that I work for okay so for the",
    "start": "88680",
    "end": "94380"
  },
  {
    "text": "listeners uh I'm really excited for this episode episode of back-end banter because I think there's going to be more",
    "start": "94380",
    "end": "100020"
  },
  {
    "text": "back end banter in the episode that there normally is because uh Michael and",
    "start": "100020",
    "end": "105299"
  },
  {
    "text": "I have had some some Twitter discussions and we actually disagree on some stuff which uh to be honest like I think is",
    "start": "105299",
    "end": "111000"
  },
  {
    "text": "fantastic especially for like students going through boot Dev they kind of get all of my opinions through a fire hose",
    "start": "111000",
    "end": "116579"
  },
  {
    "text": "but I love the idea of everyone listening to this podcast getting to hear kind of the other take",
    "start": "116579",
    "end": "121799"
  },
  {
    "text": "um so so super excited about that but it's really interesting to hear that we have such a similar background",
    "start": "121799",
    "end": "127200"
  },
  {
    "text": "um you know I did a lot of python in school obviously you're the author of zero to Pi you've done a lot of python",
    "start": "127200",
    "end": "132720"
  },
  {
    "text": "um I've done mostly go in my kind of professional experience um but a lot of that work was in ETL",
    "start": "132720",
    "end": "139560"
  },
  {
    "text": "pipelines um and so we kind of have that that similarity in our professional background can you explain to the",
    "start": "139560",
    "end": "145680"
  },
  {
    "text": "audience just kind of really high level overview what what is an ETL pipeline so yeah an ETL pipeline the ETL stands",
    "start": "145680",
    "end": "153060"
  },
  {
    "text": "for extract transform and load basically what you're trying to do is you're trying to build this pipeline that you",
    "start": "153060",
    "end": "161280"
  },
  {
    "text": "have data that comes in at One Source you need to do load it into your your process do some extraction do some",
    "start": "161280",
    "end": "167160"
  },
  {
    "text": "transformation on that data and then send it out to some other service that allows you to do like for my example",
    "start": "167160",
    "end": "173160"
  },
  {
    "text": "when I was in grad school I was doing a lot of analytics based off of the data that we were ingesting from these",
    "start": "173160",
    "end": "178379"
  },
  {
    "text": "ancient machines that were just spewing out CSV files so where you know the work",
    "start": "178379",
    "end": "184620"
  },
  {
    "text": "that I do now is is pretty similar we take in the CSV files from API endpoints and we do some data transformations to",
    "start": "184620",
    "end": "190500"
  },
  {
    "text": "get them to work with our backend servers and then we do analytics based off of the resultants of those",
    "start": "190500",
    "end": "195540"
  },
  {
    "text": "Transformations yeah okay great explanation I mean in my experience there's like two main things you do as a",
    "start": "195540",
    "end": "202080"
  },
  {
    "text": "back-end developer it's like you build kind of crud apis right so apis that sit in front of like databases that allow",
    "start": "202080",
    "end": "208980"
  },
  {
    "text": "clients of the API so create read update delete resources or you're building like",
    "start": "208980",
    "end": "214440"
  },
  {
    "text": "ETL pipelines where you're slurping data from some Source doing some sort of interesting transformation on it maybe even like Computing some analytics on it",
    "start": "214440",
    "end": "220560"
  },
  {
    "text": "and then shuffling it somewhere else yeah exactly um a lot of the work that I do nowadays is hitting API endpoints",
    "start": "220560",
    "end": "227519"
  },
  {
    "text": "doing those Transformations based off of internal schema that we require um some third-party API is going to have",
    "start": "227519",
    "end": "234180"
  },
  {
    "text": "a different schema trying to translate those between the two and then send it off to some of the service yeah makes a",
    "start": "234180",
    "end": "239640"
  },
  {
    "text": "lot of sense during your PhD in chemistry you've done a lot with was it the scientific stack in Python",
    "start": "239640",
    "end": "246480"
  },
  {
    "text": "um yeah so so when I was getting started in my grad work my professor literally",
    "start": "246480",
    "end": "251519"
  },
  {
    "text": "came to me with a bunch of Excel files was like Hey I have this five by in",
    "start": "251519",
    "end": "257180"
  },
  {
    "text": "sheet of data that we need to take from describing the electric and magnetic",
    "start": "257180",
    "end": "262979"
  },
  {
    "text": "properties of materials and we need to use that to compute this six-dimensional manifold of how this material will",
    "start": "262979",
    "end": "268979"
  },
  {
    "text": "interact with electromagnetic radiation at different and he was doing all this in Excel and I",
    "start": "268979",
    "end": "274440"
  },
  {
    "text": "was like that's insane I'm not doing that so I got to figure out some other Paradigm that would allow me to actually",
    "start": "274440",
    "end": "280020"
  },
  {
    "text": "do these calculations so I spent some time looking into some of the various paradigms that would allow you to do this kind of work and python stood out",
    "start": "280020",
    "end": "286800"
  },
  {
    "text": "to me just because it's really simple syntax you know it gets you it's it's",
    "start": "286800",
    "end": "291900"
  },
  {
    "text": "not very hard to go from zero to one in terms of I know nothing to okay I can do something and then it also gives you",
    "start": "291900",
    "end": "298139"
  },
  {
    "text": "this Rich ecosystem of okay I know how to do a few things let me go ahead and see what else is available out there in",
    "start": "298139",
    "end": "303960"
  },
  {
    "text": "the package ecosystem that I can leverage in order to actually do these calculations more efficiently and it",
    "start": "303960",
    "end": "309000"
  },
  {
    "text": "also provides a bunch of hooks that allow you to even you know push the compete even farther you know instead of",
    "start": "309000",
    "end": "314699"
  },
  {
    "text": "doing all that competing python where math is really slow you can push it down into C layer and suddenly you're getting",
    "start": "314699",
    "end": "320040"
  },
  {
    "text": "this raw C execution speed um that allows you to get from executing something that takes 45 minutes to",
    "start": "320040",
    "end": "326039"
  },
  {
    "text": "something executing something that there's like Point yeah sometimes it's insane how much uh you know the difference can be In Those computer",
    "start": "326039",
    "end": "332220"
  },
  {
    "text": "times I remember even when I was studying C plus plus in college I'd run a lot of times in Visual Studio not",
    "start": "332220",
    "end": "337560"
  },
  {
    "text": "Visual Studio code but Visual Studio in like debug mode um versus release mode for my C plus",
    "start": "337560",
    "end": "343020"
  },
  {
    "text": "builds and I I was always blown away at the execution speed like I'm having a",
    "start": "343020",
    "end": "349740"
  },
  {
    "text": "hard time remembering the exact numbers but it was like at least an order of magnitude off like I'd be running some crazy calculation for like an algorithms",
    "start": "349740",
    "end": "355740"
  },
  {
    "text": "course and it would take like 10 times as long if I forgot to switch into release mode um just because you don't get I've got",
    "start": "355740",
    "end": "362039"
  },
  {
    "text": "some algorithms that take no you're good good I've seen algorithms that take like",
    "start": "362039",
    "end": "367139"
  },
  {
    "text": "or like six thousand percent faster than just GMC versus if you're doing python you know at the end of the day you want to pick the tool that's right for your",
    "start": "367139",
    "end": "373259"
  },
  {
    "text": "job if you're trying to ingest a CSV file you're trying to load it into some sort",
    "start": "373259",
    "end": "379139"
  },
  {
    "text": "of process you know you can do that in Python where it's like super you're super Dynamic and you're super expressive and the things that you can",
    "start": "379139",
    "end": "385860"
  },
  {
    "text": "do with this USB but once you actually get down to actually crunching numbers you just want to push it down down into the C layer where you can actually get",
    "start": "385860",
    "end": "391919"
  },
  {
    "text": "some real performance yeah it so it warms my heart to hear that you were kind of in Academia or at least in in",
    "start": "391919",
    "end": "399180"
  },
  {
    "text": "chemistry right a stem field that's not programming and that you found your way",
    "start": "399180",
    "end": "404759"
  },
  {
    "text": "into the python stack because for a long time it's kind of been like Matlab this",
    "start": "404759",
    "end": "409860"
  },
  {
    "text": "proprietary programming language just kind of had a Stranglehold over like Academia that is not computer science",
    "start": "409860",
    "end": "415500"
  },
  {
    "text": "right like the computer scientists were like sitting over here writing like C and Python and like quote unquote real programming languages and like I go talk",
    "start": "415500",
    "end": "422220"
  },
  {
    "text": "to my like mechanical engineering you know father-in-law it's like he's only ever done anything in Matlab and I'm like I can't like we need to bridge this",
    "start": "422220",
    "end": "429300"
  },
  {
    "text": "Gap and from what I understand a lot of universities are starting to use Python a lot more how outside of the computer",
    "start": "429300",
    "end": "435060"
  },
  {
    "text": "science department um and and I love to see that just because you know python is like at the end of the day a like production-ready",
    "start": "435060",
    "end": "440880"
  },
  {
    "text": "programming language that you're actually going to deploy applications in write scripts and write automation with when I was an undergrad I did a little",
    "start": "440880",
    "end": "447419"
  },
  {
    "text": "bit of dabbling with the engineering department specific chemical engineering and they did a lot of Matlab and when I",
    "start": "447419",
    "end": "452699"
  },
  {
    "text": "was looking and it was like oh God I'm not paying 2000. he's like that's insane so you know going back into grad school",
    "start": "452699",
    "end": "459300"
  },
  {
    "text": "wondering you know what kind of tools do other people use for this there was Matlab and was like uh no and then there",
    "start": "459300",
    "end": "465479"
  },
  {
    "text": "was this python ecosystem that was free it was open source it just allowed you to install the pipeline interpreter and get running yeah and like what I tell my",
    "start": "465479",
    "end": "472080"
  },
  {
    "text": "I have a brother-in-law who's currently studying engineering um electrical engineering in school and",
    "start": "472080",
    "end": "477360"
  },
  {
    "text": "he was like asking me like should I do my projects in like Matlab or python I was like well if you if you do them in Python assuming you can like still pass",
    "start": "477360",
    "end": "483900"
  },
  {
    "text": "the class like you come out of that class with like an additional skill that's actually super useful",
    "start": "483900",
    "end": "490199"
  },
  {
    "text": "um yeah and you're not throwing away in some license that you're you're now vendor locked you know you know like you're gonna spend two thousand dollars",
    "start": "490199",
    "end": "496620"
  },
  {
    "text": "on a license and you're gonna expect your company to actually spend money on maintaining that license so they can actually get access to the skills that",
    "start": "496620",
    "end": "502500"
  },
  {
    "text": "they have or you could just still you know develop yourself in the skill set that is free and open source you know it",
    "start": "502500",
    "end": "508620"
  },
  {
    "text": "seems like an obvious choice to me yeah couldn't agree more so okay me and you both love python but we love it a little",
    "start": "508620",
    "end": "515279"
  },
  {
    "text": "differently uh and that's where the banter is going to start so like just to kind of set the stage a little bit on",
    "start": "515279",
    "end": "521159"
  },
  {
    "text": "boot Dev where obviously it's it's my website for kind of training up back-end developers you can always think of it as",
    "start": "521159",
    "end": "526380"
  },
  {
    "text": "like a a CS degree online but specifically tailored towards like a career path in back-end development",
    "start": "526380",
    "end": "533279"
  },
  {
    "text": "um I start programmers in Python um and and my reasoning behind that is I",
    "start": "533279",
    "end": "538740"
  },
  {
    "text": "think python is a just a fantastic language to learn computer science fundamentals with uh you don't have to",
    "start": "538740",
    "end": "544920"
  },
  {
    "text": "be too concerned about syntax right the syntax really gets out of your way",
    "start": "544920",
    "end": "550560"
  },
  {
    "text": "um it feels kind of like writing plain English and and so I really think like learning data structures and algorithms",
    "start": "550560",
    "end": "556920"
  },
  {
    "text": "learning object-oriented programming and stuff in the python ecosystem is is one of the best ways to get started that doesn't mean you can't start in other",
    "start": "556920",
    "end": "562920"
  },
  {
    "text": "languages but I personally love starting people in Python where I start to not",
    "start": "562920",
    "end": "568019"
  },
  {
    "text": "favor python or I start to struggle with python is in like large projects like production size projects there's two",
    "start": "568019",
    "end": "574620"
  },
  {
    "text": "reasons for that the first is python being a dynamically typed language",
    "start": "574620",
    "end": "580140"
  },
  {
    "text": "um and that's the discussion that I think I think we should have first and the second one is is more about like performance and speed",
    "start": "580140",
    "end": "586019"
  },
  {
    "text": "um but let's start there so you know I I last week wrote this article about how I",
    "start": "586019",
    "end": "592260"
  },
  {
    "text": "really am not a fan of dynamic typing I responded to dhh's article about Dynamic",
    "start": "592260",
    "end": "597480"
  },
  {
    "text": "types um primogen then reacted to that article and and part of the problem is I don't",
    "start": "597480",
    "end": "603540"
  },
  {
    "text": "actually know personally very many people who are fans of dynamic typing obviously dhh is but I don't know him I",
    "start": "603540",
    "end": "611040"
  },
  {
    "text": "was just responding to his article so I've had them I didn't really make an argument in his article you know it was more like a I feel like I like doing",
    "start": "611040",
    "end": "619140"
  },
  {
    "text": "this so I like doing it and this is yeah okay it's circular it's like you're not going to argue with someone who's",
    "start": "619140",
    "end": "624959"
  },
  {
    "text": "arguing based on feelings yeah a lot of times the the proponents of dynamic typing just say something simple like",
    "start": "624959",
    "end": "631440"
  },
  {
    "text": "you know I don't have to worry about types I can just kind of write the code and and to a certain extent I agree with",
    "start": "631440",
    "end": "636779"
  },
  {
    "text": "that if your program is like tiny tiny tiny right like if it's just like 10 lines of script",
    "start": "636779",
    "end": "642720"
  },
  {
    "text": "um but I struggle to see so so yeah I want to jump right into your uh your case for dynamic types well don't ever",
    "start": "642720",
    "end": "649740"
  },
  {
    "text": "come work here because our back end is like 1.2 million lines of 5.00 oh my God all right",
    "start": "649740",
    "end": "655459"
  },
  {
    "text": "so to preface the conversation I I think it would be improper to suggest that",
    "start": "655459",
    "end": "661079"
  },
  {
    "text": "dynamicism versus static types is like a tautology I don't necessarily and think",
    "start": "661079",
    "end": "666480"
  },
  {
    "text": "that Dynamic types is always the answer versus static types I think people prefer different workflows and",
    "start": "666480",
    "end": "674040"
  },
  {
    "text": "generally have different ways of viewing software development and to say that one is superior always superior to the other",
    "start": "674040",
    "end": "679680"
  },
  {
    "text": "I think um that being said I don't think that Dynamic types are nearly as bad as",
    "start": "679680",
    "end": "684899"
  },
  {
    "text": "everyone believes it just requires the document workflow there's more complementary to the Paradigm so when we",
    "start": "684899",
    "end": "690660"
  },
  {
    "text": "talk about a sound static type system meaning a type system where type safety is an algebraic property uh that could",
    "start": "690660",
    "end": "697920"
  },
  {
    "text": "be you know formally proven that type system is enforcing a restriction on the set of popular possible operations that",
    "start": "697920",
    "end": "704640"
  },
  {
    "text": "you can execute given a particular value or object even if an operation is possible you are not allowed to execute",
    "start": "704640",
    "end": "711420"
  },
  {
    "text": "that obsolete operation unless it fits the expected semantic definition of that kind of type let's say go for example so",
    "start": "711420",
    "end": "717360"
  },
  {
    "text": "go provides a great deal of flexibility in terms of creating objects Anonymous the language supports both Anonymous",
    "start": "717360",
    "end": "724320"
  },
  {
    "text": "structs and Anonymous function right yeah so using these two constructs you can do things like create entities like",
    "start": "724320",
    "end": "730500"
  },
  {
    "text": "closures where you wrap your enclosing state or your state inside the enclosing function which now acts as your",
    "start": "730500",
    "end": "736380"
  },
  {
    "text": "Constructor and from that function you can return an anonymous struct which defines Fields as Anonymous I want to",
    "start": "736380",
    "end": "742620"
  },
  {
    "text": "pause you right here for just a second to throw down some definitions because a lot of our listeners are pretty new to",
    "start": "742620",
    "end": "748079"
  },
  {
    "text": "programming still so let's just Define a couple terms and then we'll continue so first of all struct objects we're kind",
    "start": "748079",
    "end": "755820"
  },
  {
    "text": "of using those terms a little interchangeably I think that's okay but basically collections of of data right like I",
    "start": "755820",
    "end": "763740"
  },
  {
    "text": "could have a struct that represents a car it might have like a tire size and a make and a model so like when we say",
    "start": "763740",
    "end": "769260"
  },
  {
    "text": "structure objects we're kind of talking about collections of data and behavior right sure like and go it's a type name",
    "start": "769260",
    "end": "775800"
  },
  {
    "text": "structs braces and then you have your your methods and your attributes and your Builds on based off of that but",
    "start": "775800",
    "end": "781560"
  },
  {
    "text": "like you said there's a collection of data that you include and distract your fields and then after the facts you",
    "start": "781560",
    "end": "788279"
  },
  {
    "text": "write out the methods in their own function which I also don't like but we can have that conversation later and",
    "start": "788279",
    "end": "794160"
  },
  {
    "text": "then you also said Anonymous functions and Anonymous trucks and and by that we just mean a struct type definition",
    "start": "794160",
    "end": "800579"
  },
  {
    "text": "Mission or a function definition that is not named we're kind of making it on the spot and creating it as a value within",
    "start": "800579",
    "end": "807360"
  },
  {
    "text": "our program like to be used I mean probably just once or twice at least that's how it's been used in my experience but but realistically what's",
    "start": "807360",
    "end": "813420"
  },
  {
    "text": "happening is you're kind of defining it as data within your program you can then like use the definition later or call",
    "start": "813420",
    "end": "819180"
  },
  {
    "text": "the function later is that is that a fair enough definition yeah I would say that's a fair definition yeah so you have these",
    "start": "819180",
    "end": "825480"
  },
  {
    "text": "paradigms and go that allow you to Define these Anonymous structures and then on those structures you can find",
    "start": "825480",
    "end": "830880"
  },
  {
    "text": "even Anonymous functions as as fields in the struct and since you have garbage",
    "start": "830880",
    "end": "836040"
  },
  {
    "text": "collection on the back end handling your state resistance after the enclosing function returns you get this nice object representation which is",
    "start": "836040",
    "end": "842459"
  },
  {
    "text": "functionally equivalent to a formal struct type with formal methods that people are used to you know you define your stripes is your type and then you",
    "start": "842459",
    "end": "849060"
  },
  {
    "text": "define methods they act the same thing the API is the same now the problem with this however is that there is no",
    "start": "849060",
    "end": "854639"
  },
  {
    "text": "interface and go that will allow you to pass that object around the Pulse app because the ghost fact does not allow",
    "start": "854639",
    "end": "859860"
  },
  {
    "text": "for interfaces to type back against those struct field to turn on misfunctions it's not that the interface is different per se the API you have for",
    "start": "859860",
    "end": "867300"
  },
  {
    "text": "this closure object is the same API you would have for a proper time but the Ghost type system sets this arbitrary",
    "start": "867300",
    "end": "873480"
  },
  {
    "text": "restriction regardless so as you as a developer are limited in your expressiveness all the sake of quote",
    "start": "873480",
    "end": "879000"
  },
  {
    "text": "takes it first of all I'm going to just like right up front make that concession like I I completely agree generally",
    "start": "879000",
    "end": "885000"
  },
  {
    "text": "speaking our type systems are imperfect um like in reality they're imperfect I I",
    "start": "885000",
    "end": "890459"
  },
  {
    "text": "have a hard time believing that like theoretically you couldn't keep making the type system more and more expressive",
    "start": "890459",
    "end": "896160"
  },
  {
    "text": "um and and basically mitigate all the problems but like especially in go right go is famously a like feature less",
    "start": "896160",
    "end": "903240"
  },
  {
    "text": "language it's very simple language with very few features um sure we can we can imagine a perfect",
    "start": "903240",
    "end": "909360"
  },
  {
    "text": "Paradigm where the type system is perfect and unless you do all the things that you want but at the end of the day you are stuck with the type system that",
    "start": "909360",
    "end": "915300"
  },
  {
    "text": "you have and the type system that you have and go is restricting you to a subset of the language that you could do",
    "start": "915300",
    "end": "920399"
  },
  {
    "text": "otherwise yeah and I completely agree with that my main point is when I'm programming like large back-end systems",
    "start": "920399",
    "end": "927240"
  },
  {
    "text": "and go and keep in mind I'm mostly talking about specifically back and systems here the trade-off to me of like",
    "start": "927240",
    "end": "934620"
  },
  {
    "text": "not being able to be as expressive in my meta programming versus having type safety at compile time so knowing that",
    "start": "934620",
    "end": "941699"
  },
  {
    "text": "like this struct has these fields right and that when I try to access them they will be there or knowing that when I",
    "start": "941699",
    "end": "947699"
  },
  {
    "text": "pass 10 different arguments into a function like all all of them are there right and the caller didn't just",
    "start": "947699",
    "end": "953519"
  },
  {
    "text": "arbitrarily decide to pass a different amount of of arguments by function",
    "start": "953519",
    "end": "958560"
  },
  {
    "text": "um it's like an order of magnitude difference in like importance to me is pro like from a productivity standpoint",
    "start": "958560",
    "end": "965220"
  },
  {
    "text": "um but I think we could definitely agree that you do lose expressiveness the more",
    "start": "965220",
    "end": "971820"
  },
  {
    "text": "restrictive the type system is um I'm not familiar enough with like the",
    "start": "971820",
    "end": "977399"
  },
  {
    "text": "type system in Rust to be able to make the case for like the state of the world in Rust but I will say that I know that",
    "start": "977399",
    "end": "983820"
  },
  {
    "text": "it has many more features than go for example I've talked a lot about how I wish go had like pattern matching and",
    "start": "983820",
    "end": "990360"
  },
  {
    "text": "enums um like rust has I think that would allow for just just much better modeling of the state of the",
    "start": "990360",
    "end": "996839"
  },
  {
    "text": "world um in the go programming language um but the co-authors have like famously made this decision to be like we're not",
    "start": "996839",
    "end": "1002720"
  },
  {
    "text": "shipping any features until we're like a thousand percent sure that it's going to be super useful in production because in",
    "start": "1002720",
    "end": "1009860"
  },
  {
    "text": "their experience it was like we have we have these languages with like feature bloat and in order to get really proficient in the language like for you",
    "start": "1009860",
    "end": "1016160"
  },
  {
    "text": "to jump into a huge project as a new developer it can be so overwhelming because there's just so many things",
    "start": "1016160",
    "end": "1021199"
  },
  {
    "text": "about the language that you need to be familiar with and I get and I get that we've discussed the idea that static",
    "start": "1021199",
    "end": "1027438"
  },
  {
    "text": "type system is a restriction on your expressiveness but sometimes it might be a benefit in order to make sure that you",
    "start": "1027439",
    "end": "1034400"
  },
  {
    "text": "have a complete feature set that is that is for to the things that you're actually trying to do if you get rid of",
    "start": "1034400",
    "end": "1040760"
  },
  {
    "text": "get rid of your type system you get access to these these more esoteric paradigms that you may want to use you",
    "start": "1040760",
    "end": "1046459"
  },
  {
    "text": "know for example I really like closures but you know the fact that I can't use struck fields of anonymous functions",
    "start": "1046459",
    "end": "1052160"
  },
  {
    "text": "through the system is is a real barrier to that that development Paradigm at the end of the day the type system is going",
    "start": "1052160",
    "end": "1058280"
  },
  {
    "text": "to restrict you from being able to do those things and it's on you to decide whether or not you're okay with that yeah I I agree let's just like bring it",
    "start": "1058280",
    "end": "1065900"
  },
  {
    "text": "back to a specific domain so like back-end development um running in production I would argue",
    "start": "1065900",
    "end": "1071480"
  },
  {
    "text": "there's very few cases where you need a closure with Anonymous functions in",
    "start": "1071480",
    "end": "1076520"
  },
  {
    "text": "order to effectively communicate what you want your program to do sure that's fair but you have to accept that you",
    "start": "1076520",
    "end": "1082400"
  },
  {
    "text": "have to use the author's pair the the author of the programming languages his preferred Paradigm or preferred Paradigm",
    "start": "1082400",
    "end": "1089360"
  },
  {
    "text": "instead of the Paradigm would be working yeah I completely agree with that um you know programming languages are good at",
    "start": "1089360",
    "end": "1095419"
  },
  {
    "text": "different things but let's catch this here and give the other side of the coin let's talk about Dynamic type stuff yeah for a second so Dynamic typing on the",
    "start": "1095419",
    "end": "1103280"
  },
  {
    "text": "other hand is going to be the recognition that at the end of the day we may not really care whether or not an object fits this semantic definition of",
    "start": "1103280",
    "end": "1109820"
  },
  {
    "text": "a given type we just care about whether or not we can do the things we want given the object it's practicing",
    "start": "1109820",
    "end": "1115880"
  },
  {
    "text": "functionality over identity and in Python for example you have you don't even have the concept at least from The",
    "start": "1115880",
    "end": "1121160"
  },
  {
    "text": "Interpreter standpoint of type checking The Interpreter is just going to run your code the way you said to run it's your job to make sure that the operations you're calling for are",
    "start": "1121160",
    "end": "1127760"
  },
  {
    "text": "supported by the object yes so like you were saying the response to that is well Dynamic language is you know dynamic",
    "start": "1127760",
    "end": "1133520"
  },
  {
    "text": "languages don't guarantee the sort of pipe taking unless you run it okay yes but but I want to to like I want to say",
    "start": "1133520",
    "end": "1139880"
  },
  {
    "text": "correct but maybe even just elaborate on a point that you made I don't think that it's specific to dynamically typed or",
    "start": "1139880",
    "end": "1147440"
  },
  {
    "text": "quote unquote duct type languages that we just care about functionality rather than types because that Paradigm does",
    "start": "1147440",
    "end": "1155120"
  },
  {
    "text": "exist in statically typed languages under the guise of interfaces and generics so like you can get I would",
    "start": "1155120",
    "end": "1160580"
  },
  {
    "text": "argue 98 or even 99 of that benefit in a statically type language without making",
    "start": "1160580",
    "end": "1167299"
  },
  {
    "text": "all the trade-offs but yeah go on but there's that limitation so again you gotta you gotta you gotta preferences",
    "start": "1167299",
    "end": "1173720"
  },
  {
    "text": "your value or you you got to pick your values here do you want the full expressiveness or do you want the types of people and I'm going to argue that",
    "start": "1173720",
    "end": "1179720"
  },
  {
    "text": "the type safety it is a valid intermediate step but at the at the end",
    "start": "1179720",
    "end": "1185120"
  },
  {
    "text": "of the day type safety is a subset of runtime so you know like I was saying",
    "start": "1185120",
    "end": "1190220"
  },
  {
    "text": "um you can't guarantee any sort of type safety in the dynamic language unless you run it yes and the answer to that is",
    "start": "1190220",
    "end": "1195440"
  },
  {
    "text": "yeah let's run it and that's where this idea of testing comes to go the dynamic language is like python it's super",
    "start": "1195440",
    "end": "1200960"
  },
  {
    "text": "important to have good testing practices because the way you prove that a function piece of functionality is correct is by executing your code and",
    "start": "1200960",
    "end": "1207799"
  },
  {
    "text": "making sure that your resultant State matches your expectations and since like I said runtime safety is a super set of",
    "start": "1207799",
    "end": "1214160"
  },
  {
    "text": "type safety a test Suite that generates results went back to your expectations is by definition type",
    "start": "1214160",
    "end": "1220100"
  },
  {
    "text": "and sure if you're working in a paradigm where it's not typically standard practice to have a robusting testing",
    "start": "1220100",
    "end": "1225140"
  },
  {
    "text": "framework alongside your application you know for example like front end web app development a lot of times aren't there aren't",
    "start": "1225140",
    "end": "1231380"
  },
  {
    "text": "testing Frameworks that that people will use when they're slapping JavaScript together then sure being able to",
    "start": "1231380",
    "end": "1236780"
  },
  {
    "text": "annotate your data types and inferring your type safety across your application vis-a-vis typescript can be event",
    "start": "1236780",
    "end": "1242539"
  },
  {
    "text": "benefit but since we're back in developers here anyways typically we have access to test Suites to run our",
    "start": "1242539",
    "end": "1247940"
  },
  {
    "text": "application against and personally I don't see a compelling enough reason to require both the intermediate type",
    "start": "1247940",
    "end": "1253940"
  },
  {
    "text": "safety check as well as the runside page runtime safety check when runtime safety via your test Suite is going to provide",
    "start": "1253940",
    "end": "1260299"
  },
  {
    "text": "you the same assurances like directness that you get from the static types I think it very simply comes down to an",
    "start": "1260299",
    "end": "1266360"
  },
  {
    "text": "argument of developer experience and productivity so in my experience especially recently because a lot of",
    "start": "1266360",
    "end": "1272780"
  },
  {
    "text": "tooling has gotten a lot better in the last decade but um it is",
    "start": "1272780",
    "end": "1278299"
  },
  {
    "text": "orders of magnitude faster to test using a type system than to actually write",
    "start": "1278299",
    "end": "1284900"
  },
  {
    "text": "like spend the labor and toil of writing unit tests to test a type system I can",
    "start": "1284900",
    "end": "1290960"
  },
  {
    "text": "get in editor line by line type testing for free by using static types the",
    "start": "1290960",
    "end": "1297500"
  },
  {
    "text": "trade-off is when you move to a dynamic type system yes you can like test for those things by writing unit tests right",
    "start": "1297500",
    "end": "1304159"
  },
  {
    "text": "and making sure the properties exist on objects but it's going to be 10 to 100 times as much work in order to get the",
    "start": "1304159",
    "end": "1312380"
  },
  {
    "text": "same result so like if we're arguing about what's possible I completely agree you can get to that level of robustness",
    "start": "1312380",
    "end": "1318080"
  },
  {
    "text": "but in terms of like business productivity and expense I I don't I don't think it's it's even close so we",
    "start": "1318080",
    "end": "1325280"
  },
  {
    "text": "have a little bit of a discharming here between what I'm trying to say and what you're okay I'm not suggesting that you",
    "start": "1325280",
    "end": "1331640"
  },
  {
    "text": "would go around and turn you would turn around and test your types I'm suggesting that you have the objects",
    "start": "1331640",
    "end": "1336679"
  },
  {
    "text": "you're going to use them as if they have a certain type and the process of using them as if it is a certain type is the",
    "start": "1336679",
    "end": "1343880"
  },
  {
    "text": "check that proves that your object is sufficiently enough of the type that you",
    "start": "1343880",
    "end": "1349400"
  },
  {
    "text": "are trying to make use of so for example python lists if I want to do a get item operation on a python list",
    "start": "1349400",
    "end": "1355940"
  },
  {
    "text": "at the end of the day as long as the object that I have supports that get item operation is going to execute so",
    "start": "1355940",
    "end": "1361760"
  },
  {
    "text": "you can think of the get item you know the score brackets as an interface that you are requesting that your object",
    "start": "1361760",
    "end": "1368480"
  },
  {
    "text": "adhere to and list types do that so as you do a get item operation on your",
    "start": "1368480",
    "end": "1374059"
  },
  {
    "text": "object that happens to be a list the fact that it has that that that that function definition on the type",
    "start": "1374059",
    "end": "1380539"
  },
  {
    "text": "is proof enough that your object is list enough you know it's it's that it's that old adage of that typing if it walks",
    "start": "1380539",
    "end": "1386780"
  },
  {
    "text": "like a duck if it cracks like a duck then it's sufficiently enough adapt it's not that you're testing to make sure that this is a deck before you use it",
    "start": "1386780",
    "end": "1392659"
  },
  {
    "text": "it's you're going to use this thing like a dock and if it blows up on you you need to you know you need to figure that",
    "start": "1392659",
    "end": "1397940"
  },
  {
    "text": "out yeah and this this like it takes the developer experience",
    "start": "1397940",
    "end": "1404900"
  },
  {
    "text": "um discussion I think one one level even lower so for example um what you're saying is and correct me",
    "start": "1404900",
    "end": "1411500"
  },
  {
    "text": "if I'm wrong I have a property on an object or maybe a method on an objects and I want to call that method I'm going",
    "start": "1411500",
    "end": "1416720"
  },
  {
    "text": "to go ahead and just call it and I'm going to write a unit test uh that tests the object and it's going",
    "start": "1416720",
    "end": "1424520"
  },
  {
    "text": "to call that method and assuming everything works as intended I've effectively type checked like the name",
    "start": "1424520",
    "end": "1430700"
  },
  {
    "text": "of that method right um you've type checked the method enough to where your code is yeah and like",
    "start": "1430700",
    "end": "1437419"
  },
  {
    "text": "agree Michael the iteration cycle I would I would argue again is like an order of",
    "start": "1437419",
    "end": "1443240"
  },
  {
    "text": "magnitude maybe even two order of magnitudes faster if when I'm typing the function in the first place I'm getting",
    "start": "1443240",
    "end": "1449919"
  },
  {
    "text": "autocomplete I'm getting like you know assurances through my editor that these",
    "start": "1449919",
    "end": "1455960"
  },
  {
    "text": "things exist that I didn't misspell them right so I don't have to go through just you know the the 10 minutes the 20",
    "start": "1455960",
    "end": "1462919"
  },
  {
    "text": "minutes the half hour of writing the unit tests trying to find all the different test cases again just just to",
    "start": "1462919",
    "end": "1468320"
  },
  {
    "text": "make sure that the the types are there we recently migrated so here's the difference between here's the difference",
    "start": "1468320",
    "end": "1474080"
  },
  {
    "text": "between what you're describing and what I usually do at work I'm usually not trying to sling everything in the other",
    "start": "1474080",
    "end": "1479539"
  },
  {
    "text": "at the same time I'm usually spending about just as much time in the in the python debugger that actually gives you",
    "start": "1479539",
    "end": "1485120"
  },
  {
    "text": "a runtime sandbox of the object that you have in in the python interpreter and",
    "start": "1485120",
    "end": "1490700"
  },
  {
    "text": "instead of having the definition of the type in my editor I have both the code",
    "start": "1490700",
    "end": "1495799"
  },
  {
    "text": "that was executed and as well in a separate process the debugger that actually gives me the full the whole",
    "start": "1495799",
    "end": "1502460"
  },
  {
    "text": "object and the whole scope of that object in the call step so instead of just spending all of my time in in the",
    "start": "1502460",
    "end": "1508159"
  },
  {
    "text": "text editor that's giving me all these these autocomplete I'm writing a unit of code I'm executing that in debugger",
    "start": "1508159",
    "end": "1515480"
  },
  {
    "text": "again this is dynamic language so there's no compile time at the wait for drop into the the scope of the function",
    "start": "1515480",
    "end": "1520760"
  },
  {
    "text": "make sure that I have the object that I am expecting to have and then I write a little bit of more code and kind of doing this back and forth between the",
    "start": "1520760",
    "end": "1526580"
  },
  {
    "text": "debugger and the text editor in order to actually get my code to line up and that's how you actually get into really",
    "start": "1526580",
    "end": "1532940"
  },
  {
    "text": "big complex python projects you know one of the questions that you raised earlier is how do you just hop into a large",
    "start": "1532940",
    "end": "1538520"
  },
  {
    "text": "python product and start being productive well my Approach is to start with the test Suite you know find the",
    "start": "1538520",
    "end": "1543620"
  },
  {
    "text": "sort of unit integration and end test to actually execute a bit of functionality that I'm hoping to work with and then",
    "start": "1543620",
    "end": "1549740"
  },
  {
    "text": "just drop into a debugger at the point of implication in doing this you may not have the type definition in your editor",
    "start": "1549740",
    "end": "1555020"
  },
  {
    "text": "but instead you have the full object representation in scope with the entire call stack to be 2 in the debugger as",
    "start": "1555020",
    "end": "1561320"
  },
  {
    "text": "well and since this is python you can do things right in the debugger like list all the attributes and methods available on objects you can collect the local and",
    "start": "1561320",
    "end": "1568640"
  },
  {
    "text": "Global scope of variables currently in scope and even hop up and down the call stack to see if there's some data somewhere you need in order to fix the",
    "start": "1568640",
    "end": "1575900"
  },
  {
    "text": "bug so the workflow in Python that leans heavily on this you know John Carmack style of debugging in tandem but the",
    "start": "1575900",
    "end": "1582380"
  },
  {
    "text": "test Suite is where you're going to have a better development experience in my opinion so I I want to be clear I think",
    "start": "1582380",
    "end": "1587900"
  },
  {
    "text": "everyone listening to this should should really listen to what you're saying here because it's it's actually really",
    "start": "1587900",
    "end": "1594020"
  },
  {
    "text": "important if you're building large python projects like I couldn't agree more there's there's probably not a",
    "start": "1594020",
    "end": "1599720"
  },
  {
    "text": "better way than to be like in the debugger in run time checking what's there and what's not",
    "start": "1599720",
    "end": "1605659"
  },
  {
    "text": "um because you're getting effectively the same types of assurances that you would get in a statically typed language",
    "start": "1605659",
    "end": "1611120"
  },
  {
    "text": "without running the code at all um and and like you said you're going to",
    "start": "1611120",
    "end": "1616400"
  },
  {
    "text": "have to have more robust test Suites in dynamically typed languages in fact I've",
    "start": "1616400",
    "end": "1621679"
  },
  {
    "text": "started putting two and two together over the last few years of like it tends to be people that spend a lot of time in",
    "start": "1621679",
    "end": "1627440"
  },
  {
    "text": "statically typed languages that aren't as heavy on their unit tests and and",
    "start": "1627440",
    "end": "1632600"
  },
  {
    "text": "don't practice strict test driven development at least this is like me anecdotally observing all the different",
    "start": "1632600",
    "end": "1637640"
  },
  {
    "text": "people I talk to whereas the people that are like really into python or Ruby tend to be really heavy on unit tests and my",
    "start": "1637640",
    "end": "1643640"
  },
  {
    "text": "guess is it's because you have to test your types right and you'd be crazy not to because that's like where frankly",
    "start": "1643640",
    "end": "1649820"
  },
  {
    "text": "most bugs come from just like I shipped some code and like this thing is nil",
    "start": "1649820",
    "end": "1655100"
  },
  {
    "text": "right or this thing is null or this thing doesn't exist or this thing is none um like tons of bugs crop up from",
    "start": "1655100",
    "end": "1660500"
  },
  {
    "text": "those types of of Errors even in statically typed languages well most of the bugs that I tend to work on day to",
    "start": "1660500",
    "end": "1666200"
  },
  {
    "text": "day in terms of like going back to El pipelines are the third party API change something in their Json that my ETL",
    "start": "1666200",
    "end": "1672380"
  },
  {
    "text": "pipeline doesn't know how to handle anymore so it's actually going to give me a warning and say hey I don't know how to handle this we're going to stop",
    "start": "1672380",
    "end": "1677600"
  },
  {
    "text": "right now could you come look at it and the way you debug something like that in the dynamic domain language Dynamic",
    "start": "1677600",
    "end": "1683900"
  },
  {
    "text": "language like python is you go ahead and write some sort of functionality that allows you to test this thing locally",
    "start": "1683900",
    "end": "1688940"
  },
  {
    "text": "you can press that down into a test that allows you to get faster Cycles drop into the debugger at the point where",
    "start": "1688940",
    "end": "1695240"
  },
  {
    "text": "it's actually failing look at this new type add some functionality to your ETL pipeline that allows the handle this",
    "start": "1695240",
    "end": "1700640"
  },
  {
    "text": "type and then you're shipping them in like 20 minutes so this is I think one of the best use cases for statically typed languages",
    "start": "1700640",
    "end": "1706580"
  },
  {
    "text": "um what I would do in this case is let's just assume is it like a Json API are you like consuming Json objects or is it",
    "start": "1706580",
    "end": "1712520"
  },
  {
    "text": "so it's usually Json some XML um could be for your metadata and then CSV and",
    "start": "1712520",
    "end": "1718520"
  },
  {
    "text": "again okay um for your data you have these two API endpoints that that your your ecl",
    "start": "1718520",
    "end": "1724820"
  },
  {
    "text": "pipeline is going to hit it's going to get data back and you need to do that transformation from their schema to your",
    "start": "1724820",
    "end": "1729860"
  },
  {
    "text": "RC map and then sometimes those things will fall over because they made an update to your there API you need to be",
    "start": "1729860",
    "end": "1735500"
  },
  {
    "text": "able to update our ETL pipeline to handle the update that that yeah so let",
    "start": "1735500",
    "end": "1740960"
  },
  {
    "text": "me explain like what the workflow would look like in like say example for example in go which like my job for a",
    "start": "1740960",
    "end": "1746299"
  },
  {
    "text": "long time was I worked kind of consuming social media data from like tons of different social media sites like Reddit and Twitter and Facebook and Linkedin",
    "start": "1746299",
    "end": "1752539"
  },
  {
    "text": "they all have their different stupid apis and we have to like Mudge all that data into our our own format sounds like very similar to what you're doing",
    "start": "1752539",
    "end": "1759080"
  },
  {
    "text": "um what I do is like I'd call the endpoint and I'd get the Json structure and I dump I just paste it into my uh",
    "start": "1759080",
    "end": "1766340"
  },
  {
    "text": "Json to go structs tool it would generate my struct I'd plop that into my program and all of a sudden I have a ton",
    "start": "1766340",
    "end": "1771860"
  },
  {
    "text": "of errors in my editor on like you know I just changed the structure of what I'm trying to parse now I go resolve all those errors and like 99 of the time it",
    "start": "1771860",
    "end": "1779600"
  },
  {
    "text": "works perfectly because like I just have all of the assurances that all of these different properties exist I see all of",
    "start": "1779600",
    "end": "1785659"
  },
  {
    "text": "the red files in my editor where like I just created a bunch of breaking changes and I can go resolve them one by one we",
    "start": "1785659",
    "end": "1791659"
  },
  {
    "text": "just went through this pane on the front end of boot Dev where we've we've been migrating from JavaScript to typescript",
    "start": "1791659",
    "end": "1797419"
  },
  {
    "text": "and we literally just like fixed bugs that we didn't even know existed like",
    "start": "1797419",
    "end": "1803000"
  },
  {
    "text": "tiny little Edge case bugs by modeling all of the API responses that our front end was consuming from our back end in",
    "start": "1803000",
    "end": "1809539"
  },
  {
    "text": "typescript interfaces because you know you just like model the interface and all of a sudden you have all these again",
    "start": "1809539",
    "end": "1814760"
  },
  {
    "text": "like red squigglies in a bunch of different lines you're like a bunch of different files you're like oh crap I assumed that this was this was this",
    "start": "1814760",
    "end": "1820039"
  },
  {
    "text": "thing but it's actually this other thing at the end of the day I think the only way to form your own opinion which is what I think everyone listening to this",
    "start": "1820039",
    "end": "1825559"
  },
  {
    "text": "podcast should do is to like do both and that's why like on boot Dev I love starting people in Python then",
    "start": "1825559",
    "end": "1831140"
  },
  {
    "text": "introducing them to go because you you get you get a much more well-rounded experience as a developer working in",
    "start": "1831140",
    "end": "1837020"
  },
  {
    "text": "both paradigms okay so I have a question for you now when you were doing that work where you were hitting someone's",
    "start": "1837020",
    "end": "1843620"
  },
  {
    "text": "third-party API and getting data you were you said you were just dumping that into a type system and then using using",
    "start": "1843620",
    "end": "1851840"
  },
  {
    "text": "those types um throughout your process to actually do your development yeah how often are you actually hitting that API",
    "start": "1851840",
    "end": "1858440"
  },
  {
    "text": "um it depends like with Twitter we were consuming anywhere from like 100 to 1000 tweets a second",
    "start": "1858440",
    "end": "1864980"
  },
  {
    "text": "um read it was maybe a few hundred and then it like really dropped off because we also like consumed blogs through like",
    "start": "1864980",
    "end": "1870080"
  },
  {
    "text": "RSS and stuff like that were you always hitting that API point when you were doing your development or did you turn",
    "start": "1870080",
    "end": "1876500"
  },
  {
    "text": "around and hit that API point just a few times enough to where you were generating a mock that you could use",
    "start": "1876500",
    "end": "1882500"
  },
  {
    "text": "instead to do your development events sorry I want you to ask that again so I make sure I understand the whole",
    "start": "1882500",
    "end": "1888140"
  },
  {
    "text": "question so uh so what I'm trying to do is I'm trying to type this into a discussion just to give you some contact",
    "start": "1888140",
    "end": "1893240"
  },
  {
    "text": "of of mocking and so the question was are you hitting that API endpoint every",
    "start": "1893240",
    "end": "1900320"
  },
  {
    "text": "time you need to simulate a API request against Twitter or are you doing",
    "start": "1900320",
    "end": "1905779"
  },
  {
    "text": "something else like creating a mock that allows you to do all of that testing locally without actually hitting that",
    "start": "1905779",
    "end": "1911000"
  },
  {
    "text": "API got it um yeah so I'm effectively creating a mock right I'm getting some",
    "start": "1911000",
    "end": "1916640"
  },
  {
    "text": "like Json data that if I wanted to I could then like paste into a unit test and use as like a thing to parse for my",
    "start": "1916640",
    "end": "1925039"
  },
  {
    "text": "unit test right I expect this payload now I can parse it and test against against the types right and that's",
    "start": "1925039",
    "end": "1931039"
  },
  {
    "text": "that's basically what we have to do also in our python back-end this is where we",
    "start": "1931039",
    "end": "1936440"
  },
  {
    "text": "can get into the composition of whether or not we'd like like to use mocks or not one of the things that we Mock and I",
    "start": "1936440",
    "end": "1942919"
  },
  {
    "text": "don't see a better way to do it in Python other than to mock is to mock the session object that takes an API request",
    "start": "1942919",
    "end": "1950059"
  },
  {
    "text": "and turns it into a file system request that will actually read the data from the file system instead of making an API",
    "start": "1950059",
    "end": "1956120"
  },
  {
    "text": "point or API requesting is a third party so so literally you know you have in",
    "start": "1956120",
    "end": "1961760"
  },
  {
    "text": "Python you have this request uh you have this request dot session object that has your get your post your delete your your",
    "start": "1961760",
    "end": "1968179"
  },
  {
    "text": "methods like that but in testing we will pass our Integrations our our ETL",
    "start": "1968179",
    "end": "1973220"
  },
  {
    "text": "pipeline a mock of that session and it knows how to take the API endpoint request that you're making and turn that",
    "start": "1973220",
    "end": "1979760"
  },
  {
    "text": "into a file system read and it returns your response object that has the same attributes that the response object from",
    "start": "1979760",
    "end": "1986600"
  },
  {
    "text": "from the requests library has it has like your dot text it has your dot context yeah it has your dot content it",
    "start": "1986600",
    "end": "1993620"
  },
  {
    "text": "has your inner content allow you to iterate over this um lazily getting getting us into the",
    "start": "1993620",
    "end": "1998779"
  },
  {
    "text": "next conversation of whether or not we like mocks I do think that there are some instances where a mock is necessary",
    "start": "1998779",
    "end": "2005140"
  },
  {
    "text": "because at the end of the day when you're developing these robust test Suites you know if you're testing your endpoint you know in your article you",
    "start": "2005140",
    "end": "2011620"
  },
  {
    "text": "were talking about separating functionality based off of you have your validation and you have your DB your your database query and you can only",
    "start": "2011620",
    "end": "2018159"
  },
  {
    "text": "test one part but at the end of the day there is one function that is going to call both and that is your API so if",
    "start": "2018159",
    "end": "2025419"
  },
  {
    "text": "you're doing an API if you're testing end-to-end based off of your API you're making a response you you know and for",
    "start": "2025419",
    "end": "2031179"
  },
  {
    "text": "our tests this week we'll actually spin up a web server that our tests will actually hit you know given an API endpoint given the data that our front",
    "start": "2031179",
    "end": "2038140"
  },
  {
    "text": "end is actually going to make a request to it's going to go through that whole end-to-end process and during testing we",
    "start": "2038140",
    "end": "2045100"
  },
  {
    "text": "want to make sure that we pass a mock of that session object that we're not actually hitting our third-party apis every time we run the test Suite because",
    "start": "2045100",
    "end": "2051638"
  },
  {
    "text": "then they'll be pissed at us for you know streaming like 12 gigas 12 gigabytes of CSV data today is like what",
    "start": "2051639",
    "end": "2057339"
  },
  {
    "text": "the heck right yeah so so yeah like hitting third-party apis during like unit test Suites generally a bad idea",
    "start": "2057339",
    "end": "2064000"
  },
  {
    "text": "um hitting local data databases can be a better or worse idea I think depending on like how hard it is to spin up your",
    "start": "2064000",
    "end": "2070839"
  },
  {
    "text": "database right like uh if you depend on like a proprietary Oracle database running the cloud like that's probably a",
    "start": "2070839",
    "end": "2076658"
  },
  {
    "text": "non-starter maybe if you have like an embedded sqlite database it's not as a big deal but first of all I want to Define what I mean when I say mocks",
    "start": "2076659",
    "end": "2083080"
  },
  {
    "text": "because we might be talking about different things um and and whenever I have this conversation with people online I find",
    "start": "2083080",
    "end": "2089200"
  },
  {
    "text": "very quickly that people have different definitions in their heads so um you'll often hear the terms like mocks fakes",
    "start": "2089200",
    "end": "2094599"
  },
  {
    "text": "and stubs um and sometimes they're used interchangeably sometimes people have like really specific academic",
    "start": "2094599",
    "end": "2100480"
  },
  {
    "text": "definitions for each one but like I don't care about that what I mean when I say a mock is I have some large function",
    "start": "2100480",
    "end": "2107260"
  },
  {
    "text": "like you said maybe an API endpoint that has some dependencies on usually i o right so like input output so to a like",
    "start": "2107260",
    "end": "2114400"
  },
  {
    "text": "database calls over the network or like you said a third-party API called like Twitter or something",
    "start": "2114400",
    "end": "2119440"
  },
  {
    "text": "um and when I say a mock what I mean is there's some in go it would be an",
    "start": "2119440",
    "end": "2125440"
  },
  {
    "text": "interface in Python it would probably be an object that has knowledge of like how to go out",
    "start": "2125440",
    "end": "2130540"
  },
  {
    "text": "to the database and get data right or how to go out to Twitter and make you know a get request to pull some data",
    "start": "2130540",
    "end": "2136780"
  },
  {
    "text": "down and in production that object is going to actually reach out to say",
    "start": "2136780",
    "end": "2143380"
  },
  {
    "text": "Twitter or the database whereas in a test Suite that's using mocks it will kind of",
    "start": "2143380",
    "end": "2150000"
  },
  {
    "text": "intrinsically generate whatever the thing is so like you said maybe like a copy pasted version of the expected Json",
    "start": "2150000",
    "end": "2156400"
  },
  {
    "text": "output right that's what the mock is going to generate so yeah we're",
    "start": "2156400",
    "end": "2161859"
  },
  {
    "text": "basically talk about dependency injection yeah instead of in production you're going to send the actual session object but in testing you're going to",
    "start": "2161859",
    "end": "2168339"
  },
  {
    "text": "send amoxic exactly yep I think we're talking about the same we're talking about the same thing I'm just saying",
    "start": "2168339",
    "end": "2173380"
  },
  {
    "text": "that in testing when you don't want to actually hit that API endpoint but you're going to run that end-to-end test",
    "start": "2173380",
    "end": "2178480"
  },
  {
    "text": "you have to mark somewhere and one of the things that we do for mocking and when when the API endpoint is actually",
    "start": "2178480",
    "end": "2185380"
  },
  {
    "text": "or when our API when you make a request against our API and we have to go make a third-party API request is it has it has",
    "start": "2185380",
    "end": "2192520"
  },
  {
    "text": "more accession instead of an actual so but in production it hasn't happened yet so I think we test the exact same way and I think we test the exact same level",
    "start": "2192520",
    "end": "2199900"
  },
  {
    "text": "of robustness at least theoretically in our different paradigms my argument is",
    "start": "2199900",
    "end": "2205000"
  },
  {
    "text": "that instead of writing a unit test for the whole API endpoint right and inject thing essentially an object that can be",
    "start": "2205000",
    "end": "2212320"
  },
  {
    "text": "this or that right A real one or a fake one instead you just write unit tests like you write actual unit tests rather",
    "start": "2212320",
    "end": "2219940"
  },
  {
    "text": "than integration tests and you test the part that you actually care about right so if you have a function that goes and",
    "start": "2219940",
    "end": "2226240"
  },
  {
    "text": "grabs data from Twitter does some sort of transformation and then shoves it in the database instead of testing that",
    "start": "2226240",
    "end": "2231820"
  },
  {
    "text": "whole function and stubbing out two of the sections with parts that don't actually run in production so you're not",
    "start": "2231820",
    "end": "2238000"
  },
  {
    "text": "actually testing them in any meaningful way you're just testing the middle part is it just just test the middle part",
    "start": "2238000",
    "end": "2243280"
  },
  {
    "text": "because now you don't have like a false sense of security that your whole API endpoint is tested in the sense that",
    "start": "2243280",
    "end": "2250780"
  },
  {
    "text": "like I've tested this when I run it in production it will work the same way just test the code that you wrote by I",
    "start": "2250780",
    "end": "2257260"
  },
  {
    "text": "mean by mocking it right so I'll still take that Json blob and use it in my unit tests it's just that my unit tests",
    "start": "2257260",
    "end": "2263800"
  },
  {
    "text": "will like have a hard-coded Json blob called the two transformation functions make sure that I get the expected output",
    "start": "2263800",
    "end": "2269079"
  },
  {
    "text": "and and that's all it does if that makes sense okay well I mean at the end of the",
    "start": "2269079",
    "end": "2274420"
  },
  {
    "text": "day again you know like Glenn was saying you gotta go try these things for yourself and for you know last is how",
    "start": "2274420",
    "end": "2280300"
  },
  {
    "text": "we've been doing that at crunch for the last three years you know having these dependency injections for mocks that you're saying not to do I remember",
    "start": "2280300",
    "end": "2286240"
  },
  {
    "text": "having problems so and this is just like again I'm going to like start stereotyping people here in my",
    "start": "2286240",
    "end": "2291760"
  },
  {
    "text": "experience people that work in like super object oriented paradigms tend to be more fans of dependency injections",
    "start": "2291760",
    "end": "2298480"
  },
  {
    "text": "and mocks um like Java developers love their dependency injections",
    "start": "2298480",
    "end": "2303700"
  },
  {
    "text": "um in in my experience uh people that work in more functional or procedural languages like go rust we tend to have",
    "start": "2303700",
    "end": "2309880"
  },
  {
    "text": "this more like unit first approach to testing where it's like I just want to test this thing do I really have to mock",
    "start": "2309880",
    "end": "2316359"
  },
  {
    "text": "an entire object with a bunch of fake functionality can I just test the thing I wrote",
    "start": "2316359",
    "end": "2321700"
  },
  {
    "text": "um and and like you said try it both ways the worst thing you could do in my opinion is to listen to people on",
    "start": "2321700",
    "end": "2326740"
  },
  {
    "text": "YouTube or podcasts that just take their word for it you got you got to try this yeah and have a strong opinion that's Loosely yeah I mean at the end of the",
    "start": "2326740",
    "end": "2333099"
  },
  {
    "text": "day if you come along across the new functionality or a new paradigm that you prefer better which yeah yeah and like I",
    "start": "2333099",
    "end": "2338740"
  },
  {
    "text": "said but I think both of these um ways of doing it results in exactly",
    "start": "2338740",
    "end": "2343839"
  },
  {
    "text": "the same amount of actual code covered in terms of like I I I know when I run",
    "start": "2343839",
    "end": "2349359"
  },
  {
    "text": "the test Suite that I can trust that the things are working the way I expect them to the difference is in my mind is",
    "start": "2349359",
    "end": "2355839"
  },
  {
    "text": "really just how I'm scaffolding the test Suite like I think one way is is much simpler and easier to get scaffolded",
    "start": "2355839",
    "end": "2361599"
  },
  {
    "text": "well you're also saying don't test the API endpoint and I would say that you should test the API endpoint you know",
    "start": "2361599",
    "end": "2367599"
  },
  {
    "text": "the way that we do this at crunch is we spin up an actual web server and we're actually making API requests now your",
    "start": "2367599",
    "end": "2373780"
  },
  {
    "text": "argument is well your mock session actually does you can't guarantee that the data that is returning is going to",
    "start": "2373780",
    "end": "2379000"
  },
  {
    "text": "be the same way that the actual API request is going to add so you're given",
    "start": "2379000",
    "end": "2385420"
  },
  {
    "text": "a false sense of security in that in in faking that I'm saying that hey that's",
    "start": "2385420",
    "end": "2391599"
  },
  {
    "text": "not my experience well I want to be clear you can still like if you're talking about integration tests I'm",
    "start": "2391599",
    "end": "2397480"
  },
  {
    "text": "still a huge fan of integration tests um I just usually separate them from my unit test because my unit tests are",
    "start": "2397480",
    "end": "2403420"
  },
  {
    "text": "something they're like I can run them really quick it's like a test Suite that runs in like a second there's no setup or tear down time",
    "start": "2403420",
    "end": "2409960"
  },
  {
    "text": "um it's like when I write a new function that does something pretty you know self-contained in memory right hopefully",
    "start": "2409960",
    "end": "2416500"
  },
  {
    "text": "a pure function huge fan of pure functions um I could just like add it to my test Suite run it it's really quick um",
    "start": "2416500",
    "end": "2422440"
  },
  {
    "text": "whereas integration tests I look at is something a lot more end to end but but again like with my integration tests I",
    "start": "2422440",
    "end": "2427780"
  },
  {
    "text": "still want to kind of be be mirroring production as much as I can so I'll usually have like a staging database uh",
    "start": "2427780",
    "end": "2434859"
  },
  {
    "text": "that I've seeded with data that I can test against um I am spinning up the API and testing",
    "start": "2434859",
    "end": "2440380"
  },
  {
    "text": "it's just like a different approach almost based on like how much work it is to get the suite set up okay so we",
    "start": "2440380",
    "end": "2446500"
  },
  {
    "text": "talked about mocks we talked about Dynamic types the last thing I want to make sure that we cover in this episode is",
    "start": "2446500",
    "end": "2452020"
  },
  {
    "text": "python being slow so uh I'm just gonna like start the conversation by accusing",
    "start": "2452020",
    "end": "2458740"
  },
  {
    "text": "python of being slow what do you got to say about that Michael",
    "start": "2458740",
    "end": "2464700"
  },
  {
    "text": "you know python is obviously slow um when you're trying to do specifically like numeric operations like pushing it",
    "start": "2465060",
    "end": "2471940"
  },
  {
    "text": "down into something like the C layer is going to be this would be better way better for you so about a month ago Theo",
    "start": "2471940",
    "end": "2478119"
  },
  {
    "text": "if you're on Twitter is t3.gg did a video titled performance doesn't matter until it done in which she diagrammed",
    "start": "2478119",
    "end": "2484900"
  },
  {
    "text": "this 2D access uh speed of iteration versus tons of traffic and Theo's argument was that typescript",
    "start": "2484900",
    "end": "2491680"
  },
  {
    "text": "provided an ecosystem where you can iterative iterate quickly and early and then eventually as your traffic",
    "start": "2491680",
    "end": "2497980"
  },
  {
    "text": "increases you hit this payable you don't line up prime or it makes sense to consider a rewrite in a language like",
    "start": "2497980",
    "end": "2503200"
  },
  {
    "text": "rust or using a developer at the caliper of the primogen after you've sort of nailed down that core functionality of",
    "start": "2503200",
    "end": "2509680"
  },
  {
    "text": "your application and need it to be more you needed to be able to execute in a more manner but when I look at that",
    "start": "2509680",
    "end": "2516400"
  },
  {
    "text": "iteration versus traffic graph what really stands out to me is how much of a great framework that graph is for",
    "start": "2516400",
    "end": "2521859"
  },
  {
    "text": "addressing this question of Python's performance problem you see python when",
    "start": "2521859",
    "end": "2527260"
  },
  {
    "text": "you start out building your application your all of your code is written in this highly Dynamic language which provides you the benefit of these pass iterations",
    "start": "2527260",
    "end": "2533619"
  },
  {
    "text": "and since you're early in the development cycle it's the trade-off that you want to make because there's such a first mover advantage to software",
    "start": "2533619",
    "end": "2539740"
  },
  {
    "text": "development and it's really hard to not have those fast Generations benefit from early on so as you start product development",
    "start": "2539740",
    "end": "2546220"
  },
  {
    "text": "performance really isn't an issue but that being said as you start increasing traffic and increasing application load",
    "start": "2546220",
    "end": "2552700"
  },
  {
    "text": "python also provides the ability to take these pieces of performance critical functionality and extract that out into",
    "start": "2552700",
    "end": "2558160"
  },
  {
    "text": "these dynamically loaded extensor modules written in either C or C plus plus during the rust in some cases using",
    "start": "2558160",
    "end": "2563800"
  },
  {
    "text": "libraries like Pi O3 and these hook directly into The Interpreter runtime itself so the result here is you get",
    "start": "2563800",
    "end": "2570220"
  },
  {
    "text": "this ability to incrementally improve your application without having to resort to say adding a network boundary",
    "start": "2570220",
    "end": "2576339"
  },
  {
    "text": "or doing so the answer to the question of when is this a problem well it's not a problem",
    "start": "2576339",
    "end": "2582520"
  },
  {
    "text": "until it is but luckily python provides you with the hooks necessary to address",
    "start": "2582520",
    "end": "2587980"
  },
  {
    "text": "these performance problems when they're yeah so like generally speaking like I just agree um if anyone's ever used like a lot of",
    "start": "2587980",
    "end": "2596200"
  },
  {
    "text": "my students for example like look into machine learning or artificial intelligence like you know uh tools like",
    "start": "2596200",
    "end": "2602020"
  },
  {
    "text": "tensorflow um those big projects like you think",
    "start": "2602020",
    "end": "2607060"
  },
  {
    "text": "about it you're like machine learning like that sounds like it would be pretty compute intense like why why is python",
    "start": "2607060",
    "end": "2612220"
  },
  {
    "text": "the most popular language it's like it's in my opinion it's for two simple reasons first like all that crap's actually written in C under the hood",
    "start": "2612220",
    "end": "2617980"
  },
  {
    "text": "right and it's just a python API uh that you can like pip install and then run",
    "start": "2617980",
    "end": "2623140"
  },
  {
    "text": "um and then like God Rest Your Soul when you run the python code and it's like oh all these",
    "start": "2623140",
    "end": "2628480"
  },
  {
    "text": "dynamically loaded C libraries don't exist on your operating system good luck finding them and getting them to work aside from that problem it works great",
    "start": "2628480",
    "end": "2635200"
  },
  {
    "text": "like you can you can write very minimal python code get a ton of power um coming from these c-level libraries",
    "start": "2635200",
    "end": "2641619"
  },
  {
    "text": "under the hood when it comes to web development I haven't seen well let me give you an example so a",
    "start": "2641619",
    "end": "2648400"
  },
  {
    "text": "couple companies ago I worked at this this company where we were ingesting large amounts of social media data doing",
    "start": "2648400",
    "end": "2653440"
  },
  {
    "text": "Transformations on the data and shoving in the database that application was originally written in Ruby which like",
    "start": "2653440",
    "end": "2658780"
  },
  {
    "text": "vanilla Ruby and vanilla python are very comparable in terms of execution speed they're both interpreted languages",
    "start": "2658780",
    "end": "2664720"
  },
  {
    "text": "people love the syntax they tend to be really slow um we saved a lot of money by rewriting",
    "start": "2664720",
    "end": "2671740"
  },
  {
    "text": "those computational pieces in go um and and I would argue a lot of developer experience I really really",
    "start": "2671740",
    "end": "2678339"
  },
  {
    "text": "prefer writing go but that's obviously that's a different discussion um but the only other option I think we",
    "start": "2678339",
    "end": "2683980"
  },
  {
    "text": "would have had and correct me if I'm wrong but I think the only other thing we could have done was go right like",
    "start": "2683980",
    "end": "2689740"
  },
  {
    "text": "extensions for our python code in C or rust or something and then plugged it in",
    "start": "2689740",
    "end": "2695200"
  },
  {
    "text": "yeah at the end of the I can even give an example uh of one of the ways that we",
    "start": "2695200",
    "end": "2700300"
  },
  {
    "text": "do this crunch with our utl pipelines um one of the things we do is parsing",
    "start": "2700300",
    "end": "2706060"
  },
  {
    "text": "CSV files and typically involves taking a metadata API endpoint a data Empire endpoint and then parsing those two",
    "start": "2706060",
    "end": "2711940"
  },
  {
    "text": "entities out into integral jdsl representation of our analytics engine that is sorry internal jdsl Json domain",
    "start": "2711940",
    "end": "2720579"
  },
  {
    "text": "specific language that our analytics engine is designed to work with and this is something that our Integrations have",
    "start": "2720579",
    "end": "2726099"
  },
  {
    "text": "to do basically all the time because the typical data format that these third-party apis like to use the CSV so",
    "start": "2726099",
    "end": "2732579"
  },
  {
    "text": "the first iteration of the CTL pipeline was just using off-the-shelf tooling to get some things put up quickly we originally were using pandas to ingest",
    "start": "2732579",
    "end": "2739060"
  },
  {
    "text": "CSV files parse them out by column and then write the data to our jdsm as we started onboarding customers to this new",
    "start": "2739060",
    "end": "2745060"
  },
  {
    "text": "integration we saw the need to iterate to a more robust implementation that could handle these larger files although",
    "start": "2745060",
    "end": "2751000"
  },
  {
    "text": "pandas could do the job it really was in the optimum pool to you for our use case because of the large overhead incurs in",
    "start": "2751000",
    "end": "2757660"
  },
  {
    "text": "terms of both memory and execution performance and it provides a lot of functionality that would give you we didn't really",
    "start": "2757660",
    "end": "2763359"
  },
  {
    "text": "so the second iteration one of my colleagues Chris Perkins wrote an updated CSV parser that made use of some",
    "start": "2763359",
    "end": "2768880"
  },
  {
    "text": "pythons and python building around this idea of indexing commas in the file and then opening that CSV file into a memory",
    "start": "2768880",
    "end": "2774880"
  },
  {
    "text": "map on my file um so that was better it got rid of a lot of the overhead but still had this",
    "start": "2774880",
    "end": "2780160"
  },
  {
    "text": "issue where in some cases your indexes were like bigger than the data file itself you know for example uh your",
    "start": "2780160",
    "end": "2785560"
  },
  {
    "text": "index value of 65 506 uh your indexes if your index is unsigned you need to store that in like",
    "start": "2785560",
    "end": "2791740"
  },
  {
    "text": "U and 32 type in order to store that like memory but that's four bytes of memory that using this really quick can",
    "start": "2791740",
    "end": "2796839"
  },
  {
    "text": "you define what an index is for some of our listeners yes so an index is",
    "start": "2796839",
    "end": "2802780"
  },
  {
    "text": "basically the number that you would have to go through an array in order to find the",
    "start": "2802780",
    "end": "2808900"
  },
  {
    "text": "value so for example the index 5 is going to be the fifth character in that CSV file",
    "start": "2808900",
    "end": "2815859"
  },
  {
    "text": "and that say that say if the if there's a comma on Care on the fifth character the index of five is pointing so in this",
    "start": "2815859",
    "end": "2822760"
  },
  {
    "text": "example so instead of having something that runs sequentially and have to search for all of them you have a list",
    "start": "2822760",
    "end": "2829599"
  },
  {
    "text": "of indexes that say okay there's a comment at one five seven eleven and you",
    "start": "2829599",
    "end": "2834640"
  },
  {
    "text": "just have all those in in memory or in this case got it so to improve uh speed of computation you're building",
    "start": "2834640",
    "end": "2841599"
  },
  {
    "text": "up this big in-memory index so that your algorithm's faster but you're saying that the indexes actually started to",
    "start": "2841599",
    "end": "2847960"
  },
  {
    "text": "kind of bloat memory and take up so much space and memory that maybe there was a trade-off to consider",
    "start": "2847960",
    "end": "2853300"
  },
  {
    "text": "yeah so that was the second iteration so then I came around and took that implementation we wrote it in C stripped",
    "start": "2853300",
    "end": "2858940"
  },
  {
    "text": "out a bunch of the business logic that could really be implemented on top of a strict parser and then did some optimizations for indexing for example I",
    "start": "2858940",
    "end": "2866020"
  },
  {
    "text": "was indexing commas in the CSV file but using those comment index to figure out the bits which represented the field",
    "start": "2866020",
    "end": "2871300"
  },
  {
    "text": "value but there's two edge cases uh that where that approaches the pain to work with the first Edge case is the fact",
    "start": "2871300",
    "end": "2877000"
  },
  {
    "text": "that on Windows the CSV file will be written with a two character um",
    "start": "2877000",
    "end": "2883859"
  },
  {
    "text": "on Mac OS and slash R and it's just kind of a pain so that kind of ruins your indexing",
    "start": "2884220",
    "end": "2889540"
  },
  {
    "text": "so but it turns out that during the second iteration of the library called",
    "start": "2889540",
    "end": "2895000"
  },
  {
    "text": "lazy CSV we also added a secondary index that would limit our field index to types of un system type in order to save",
    "start": "2895000",
    "end": "2901300"
  },
  {
    "text": "on space and it does all this using memory Maps so the parser basically takes up essentially zero gram so this",
    "start": "2901300",
    "end": "2908680"
  },
  {
    "text": "latest iteration of our parser was super fast it was lean it had zero dependencies which we did make numpy an",
    "start": "2908680",
    "end": "2914440"
  },
  {
    "text": "optional compile time dependency so if you wanted to manipulate an interval out of an IRA you could do that and since",
    "start": "2914440",
    "end": "2920440"
  },
  {
    "text": "we've separated out the business logic from the parser we went ahead and open sourced that library and that can actually be found on our companies",
    "start": "2920440",
    "end": "2926079"
  },
  {
    "text": "getting a repo if you wanted to go take a look at one of the results of being able to iteratively improve a library",
    "start": "2926079",
    "end": "2932020"
  },
  {
    "text": "that we had for parsing out CSV files for young we originally had a python version then we had a python python and",
    "start": "2932020",
    "end": "2937240"
  },
  {
    "text": "now we have a complete C version which is actually probably the fastest parser out there for personal RCS that's super",
    "start": "2937240",
    "end": "2942819"
  },
  {
    "text": "cool uh that sounds like a really fun experience to have to like get down in the weeds that much",
    "start": "2942819",
    "end": "2949000"
  },
  {
    "text": "um you know not every back-end developer I mean I feel like at all at some point in",
    "start": "2949000",
    "end": "2954940"
  },
  {
    "text": "all of our careers is back-end developers we're going to be working on performance but it's not always to that",
    "start": "2954940",
    "end": "2961060"
  },
  {
    "text": "degree right A lot of times you can solve big problems even while staying in",
    "start": "2961060",
    "end": "2967000"
  },
  {
    "text": "Python but clearly in this example like no you had to jump into the C code and write an extension for your python code",
    "start": "2967000",
    "end": "2973900"
  },
  {
    "text": "um which which I think is great I mean obviously there is the huge drawback that like if that's part of your",
    "start": "2973900",
    "end": "2979540"
  },
  {
    "text": "day-to-day workflow you need all of your python developers to also be like C or rust developers",
    "start": "2979540",
    "end": "2986079"
  },
  {
    "text": "um in order to get that same level of performance at least you get to keep I mean the benefit obviously being you get",
    "start": "2986079",
    "end": "2992380"
  },
  {
    "text": "to keep the nice python API at the top yeah and one of the benefits of doing it",
    "start": "2992380",
    "end": "2997599"
  },
  {
    "text": "you see you know like I said you can also do it in like C plus plus for us but one of the reasons that we found from using C as our extension language",
    "start": "2997599",
    "end": "3004859"
  },
  {
    "text": "was that the workflow that you used in Python you know this idea of dropping into a blogger",
    "start": "3004859",
    "end": "3011240"
  },
  {
    "text": "it also works in C using the the gnu debugger and you can actually run those",
    "start": "3011240",
    "end": "3016619"
  },
  {
    "text": "at the same time so you have your break points and Senior C extensions that you can stop at the beginning of the debugger while the canoe debugger is",
    "start": "3016619",
    "end": "3022380"
  },
  {
    "text": "actually running your python test so you have break points in Python you have break points and c and everything just works kind of synergistically which is",
    "start": "3022380",
    "end": "3029099"
  },
  {
    "text": "which is really nice yeah thanks so much for that explanation I think that was hopefully really helpful",
    "start": "3029099",
    "end": "3034500"
  },
  {
    "text": "to my students and uh it's it's something that I think people should play with um there's in my experience most people",
    "start": "3034500",
    "end": "3042119"
  },
  {
    "text": "kind of fall into one of two categories when it comes to debugging and like developer iteration um and a lot of that will be influenced",
    "start": "3042119",
    "end": "3048000"
  },
  {
    "text": "by like the language the framework the domain that you're working in um for example like me working on the",
    "start": "3048000",
    "end": "3055260"
  },
  {
    "text": "web typescript on the front end go on the back end I tend to not use the debugger very often unless there's like",
    "start": "3055260",
    "end": "3060300"
  },
  {
    "text": "a really hairy problem I need to solve because most of my work is done in statically typed land where I can kind",
    "start": "3060300",
    "end": "3066480"
  },
  {
    "text": "of just write the code run the server very quickly because go has compile times of like one second or whatever",
    "start": "3066480",
    "end": "3072000"
  },
  {
    "text": "make sure that it worked and maybe write a unit test if there's something like nice some nice pure transformation there",
    "start": "3072000",
    "end": "3078359"
  },
  {
    "text": "that I want to test um and like that's generally speaking my developer experience but like for",
    "start": "3078359",
    "end": "3083760"
  },
  {
    "text": "example John Carmack a developer that's way more experienced and way better than",
    "start": "3083760",
    "end": "3089220"
  },
  {
    "text": "me but also is his domain is kind of game development and you coming from the python World",
    "start": "3089220",
    "end": "3095220"
  },
  {
    "text": "um like very develop debugger heavy heavy from my experience right you're spinning up a debugger you're you're in",
    "start": "3095220",
    "end": "3100559"
  },
  {
    "text": "the middle of the code my understanding is like if your application is super stateful that can also be really helpful",
    "start": "3100559",
    "end": "3107579"
  },
  {
    "text": "like imagine you're writing a video game and like you're trying to debug this very specific case where like I don't",
    "start": "3107579",
    "end": "3113460"
  },
  {
    "text": "know when you hit somebody with this sword as this unit there's a problem it's like you have to get your application into that state before you",
    "start": "3113460",
    "end": "3119460"
  },
  {
    "text": "can like debug it effectively and so it makes sense to me to use a debugger or set a break point",
    "start": "3119460",
    "end": "3124559"
  },
  {
    "text": "um and look into those things so I love that everybody can hear hear your your take on this yeah at the end of the day",
    "start": "3124559",
    "end": "3131339"
  },
  {
    "text": "I'm getting trying to trying to wrap this all up it's the idea of iteratively improving your application",
    "start": "3131339",
    "end": "3137819"
  },
  {
    "text": "um being fully borne out in this example you know first iteration just get some push-up second iteration you start gaming out with what what sort of",
    "start": "3137819",
    "end": "3145200"
  },
  {
    "text": "functionality you can improve in your code and then just iterating until you have this typing at this performance and you didn't throw away the rest of your",
    "start": "3145200",
    "end": "3151440"
  },
  {
    "text": "app in the meantime right completely agree um awesome Michael Green where I mean obviously you're the author of zero to",
    "start": "3151440",
    "end": "3157920"
  },
  {
    "text": "Pi um tell people where they can find your book that's fine no no yeah we don't",
    "start": "3157920",
    "end": "3163260"
  },
  {
    "text": "need to go into the details on it but I want I want you to tell people where they can find you um where they can follow you and where",
    "start": "3163260",
    "end": "3168480"
  },
  {
    "text": "they can find your book yeah so I'm on Twitter mg.dev I'm sorry if I've changed",
    "start": "3168480",
    "end": "3173700"
  },
  {
    "text": "it a few times over the last week or so I actually haven't but uh so just just trying to just trying to crystallize on",
    "start": "3173700",
    "end": "3179819"
  },
  {
    "text": "on a specific domain um a specific tag and I didn't like the one that I've been stuck with for the longest time so",
    "start": "3179819",
    "end": "3185300"
  },
  {
    "text": "mg.dev on Twitter on threads and the book that I wrote If you want to get",
    "start": "3185300",
    "end": "3191160"
  },
  {
    "text": "into this the the basic idea being finding a golden thread that allows you",
    "start": "3191160",
    "end": "3196260"
  },
  {
    "text": "to get from understanding nothing to all the way down to how can I debug these C extensions using this this is this",
    "start": "3196260",
    "end": "3202680"
  },
  {
    "text": "robust testing and debugging platform um Paradigm uh the book is called zero to Pi it's on the lean Pub platform one of",
    "start": "3202680",
    "end": "3210000"
  },
  {
    "text": "the benefits that I found publishing with that is that if you get the book through that platform you get all the",
    "start": "3210000",
    "end": "3215520"
  },
  {
    "text": "future iterations So the plan is to publish a new version of the book with with every release of the minor python",
    "start": "3215520",
    "end": "3221460"
  },
  {
    "text": "interpreters of 3.12 is going to come out but in a few months there's going to be a new version of that you get on new",
    "start": "3221460",
    "end": "3226559"
  },
  {
    "text": "pub you're going to get that version for free so you know at the end of the day you're not going to have this book that you purchase and it's going to go on a",
    "start": "3226559",
    "end": "3232980"
  },
  {
    "text": "date in three years you have to buy a new one that's that's not a problem and listeners to this podcast boot.dev can",
    "start": "3232980",
    "end": "3239099"
  },
  {
    "text": "go to leanpub.com zero to Pi slash C boot.dev and there will be a 60 discount",
    "start": "3239099",
    "end": "3245940"
  },
  {
    "text": "amazing thanks so much for coming on man yeah hey this was a lot of fun thanks for thanks for having me it was it's fun",
    "start": "3245940",
    "end": "3251819"
  },
  {
    "text": "to get something going foreign",
    "start": "3251819",
    "end": "3259578"
  },
  {
    "text": "foreign",
    "start": "3260520",
    "end": "3262760"
  }
]