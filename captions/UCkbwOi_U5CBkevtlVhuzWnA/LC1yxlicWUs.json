[
  {
    "text": "if you look at every popular mainstream object-oriented language with one exception and you took the object",
    "start": "80",
    "end": "6839"
  },
  {
    "text": "orientation out of that they're all going to be better languages I claim and most people be like no you need you need",
    "start": "6839",
    "end": "12880"
  },
  {
    "text": "this you need that you need that I'm like I don't buy it I I think the history has shown that basically all of",
    "start": "12880",
    "end": "18279"
  },
  {
    "text": "the good parts of O languages turn out to not require",
    "start": "18279",
    "end": "24160"
  },
  {
    "text": "objects [Music]",
    "start": "28960",
    "end": "45239"
  },
  {
    "text": "welcome back to the backend Baner podcast where we talk about backend engineering and careers today I'm joined",
    "start": "45239",
    "end": "50559"
  },
  {
    "text": "by Richard Feldman now Richard is the author of The Rock programming language",
    "start": "50559",
    "end": "56199"
  },
  {
    "text": "which you may have not heard of yet don't feel too bad um but I was actually",
    "start": "56199",
    "end": "61719"
  },
  {
    "text": "pleasantly surprised I was on Richard's podcast just I mean we recorded just like a week ago uh and I didn't even",
    "start": "61719",
    "end": "69360"
  },
  {
    "text": "realize that Richard was the author of The Rock programming language but I've seen it on Hacker News a couple of times",
    "start": "69360",
    "end": "74560"
  },
  {
    "text": "so it's actually like it is at least gaining some amount of steam and i' I'd love to see it you know gain some more",
    "start": "74560",
    "end": "80560"
  },
  {
    "text": "steam so um Richard can you take just a second and introduce yourself yeah sure um so hello I'm",
    "start": "80560",
    "end": "87759"
  },
  {
    "text": "Richard uh I I created The Rock programming Lang I used to be the sole author of it but now there's a bunch of people working on",
    "start": "87759",
    "end": "93079"
  },
  {
    "text": "it so I I can't claim to be the only author um I am the author of the book El and action from Manning Publications so",
    "start": "93079",
    "end": "98600"
  },
  {
    "text": "Elm is the language that inspired Rock that's it's more of a front end language which I know this is a backend podcast but okay rock rock much more on the back",
    "start": "98600",
    "end": "105280"
  },
  {
    "text": "end side of things um but uh yeah I'm happy to be here awesome yeah we're",
    "start": "105280",
    "end": "110759"
  },
  {
    "text": "gonna talk about rock we'll talk a little bit about Elm um we'll talk about functional programming which seems to be",
    "start": "110759",
    "end": "116159"
  },
  {
    "text": "a more and more recurring theme on the podcast uh which I love because frankly I feel like oop you know did a lot um on",
    "start": "116159",
    "end": "124520"
  },
  {
    "text": "the backend side specifically with like Java and CP python R Ruby and these days we're seeing yeah a lot of damage was uh",
    "start": "124520",
    "end": "131520"
  },
  {
    "text": "a lot of damage was dealt to the industry and now we're seeing I wouldn't even say like com like purely functional",
    "start": "131520",
    "end": "139519"
  },
  {
    "text": "stuff on the back end though there is some of that but even just like a move away from oop um into languages that",
    "start": "139519",
    "end": "145080"
  },
  {
    "text": "have more of a functional style um even if they're not purely functional langu angues uh things like go rust and then",
    "start": "145080",
    "end": "153640"
  },
  {
    "text": "of course o camel being much more uh much more functional okay I want to",
    "start": "153640",
    "end": "158920"
  },
  {
    "text": "start Broad and then we'll narrow in the first question I have for you is you'd",
    "start": "158920",
    "end": "164720"
  },
  {
    "text": "mentioned um to me when we were recording on your podcast you'd said functional programming makes simple",
    "start": "164720",
    "end": "171040"
  },
  {
    "text": "problems harder and it also makes hard problems simpler and I thought that was",
    "start": "171040",
    "end": "177239"
  },
  {
    "text": "like the best take on functional programming that I've ever heard could you could you elaborate on that yeah",
    "start": "177239",
    "end": "182480"
  },
  {
    "text": "sure so um so I guess I have a story that's relevant to this um back end story so at my previous job um company",
    "start": "182480",
    "end": "189680"
  },
  {
    "text": "called no red Inc and we made software for English teachers had like millions of teachers millions of students answering billions of questions so not",
    "start": "189680",
    "end": "197080"
  },
  {
    "text": "like you know Pico byes of data but like a lot of data and we were running into",
    "start": "197080",
    "end": "202120"
  },
  {
    "text": "this problem where we were coming up on the limit of like the highest single database instance we could get from",
    "start": "202120",
    "end": "207879"
  },
  {
    "text": "Amazon so we kind of referred to the is the database apocalypse because if we didn't solve the problem somehow before",
    "start": "207879",
    "end": "213760"
  },
  {
    "text": "we hit that um we were just that's it no more no more questions that's it no more vertical scaling yeah right um so we had",
    "start": "213760",
    "end": "221200"
  },
  {
    "text": "to do something we looked at sort of charting like breaking it into horizontal scaling for various reasons we concluded that was the wrong way to",
    "start": "221200",
    "end": "227080"
  },
  {
    "text": "solve this particular problem um what we needed to do was just to get some load off of the database especially in a",
    "start": "227080",
    "end": "232319"
  },
  {
    "text": "couple of critical spots and the problem was that so we were using Ruby on the back end Ruby on Rails and we had",
    "start": "232319",
    "end": "240239"
  },
  {
    "text": "uh a lot of code in this sort of section that was using active record which is Ruby's om like object relational mapper",
    "start": "240239",
    "end": "246840"
  },
  {
    "text": "and I don't know if you're familiar with active record but it's very side Effy like you'll do one thing and you'll be like just change this part of this user",
    "start": "246840",
    "end": "254560"
  },
  {
    "text": "and it's like okay I'll go update the database but also I'm going to do all these other things and update these other relations that relate to it in",
    "start": "254560",
    "end": "259880"
  },
  {
    "text": "memory and so you mean like you do a like a user. saave or something I'm making it up because I haven't done a",
    "start": "259880",
    "end": "265720"
  },
  {
    "text": "ton with Ruby syntax especially in a while but like user. saave and like instead of maybe just saving the user",
    "start": "265720",
    "end": "270919"
  },
  {
    "text": "record it's like touching other tables is that kind of eventally yeah I mean so so it it has some things in common with",
    "start": "270919",
    "end": "277000"
  },
  {
    "text": "like database triggers where it's like when whenever you do a certain thing there's a bunch of stuff it'll do for",
    "start": "277000",
    "end": "282080"
  },
  {
    "text": "you sort of for convenience and the problem being in this case that what we wanted to do is we wanted to Cache this",
    "start": "282080",
    "end": "287880"
  },
  {
    "text": "one big operation so caching is a really nice thing for like pure functions pure functions being ones where you call them",
    "start": "287880",
    "end": "295080"
  },
  {
    "text": "with the same arguments you always get the same answer and they never do any side effects they don't affect any other observable State about the program um",
    "start": "295080",
    "end": "302160"
  },
  {
    "text": "that's great if you want to cach something and caching is the solution to your problem because all we have to do is say okay well we're gonna you know",
    "start": "302160",
    "end": "308960"
  },
  {
    "text": "whenever we get this particular set of data we'll just substitute it with the answer that we got from somewhere outside the database like redis really",
    "start": "308960",
    "end": "315520"
  },
  {
    "text": "fast cache now the problem was that because all of this code was super side",
    "start": "315520",
    "end": "320759"
  },
  {
    "text": "Effy you couldn't just cach it you couldn't say oh I I see this thing I'll just substitute just skip all that all",
    "start": "320759",
    "end": "326919"
  },
  {
    "text": "that stuff and go straight to the end because all these side effects were loadbearing they would they would cause bugs elsewhere if we skipped them and so",
    "start": "326919",
    "end": "334160"
  },
  {
    "text": "what we ended up having to do was it was like an 18month of an entire teams project to make all the changes",
    "start": "334160",
    "end": "340120"
  },
  {
    "text": "necessary to basically convert it from this very side Effy thing into a pure function in a basically in a functional",
    "start": "340120",
    "end": "346400"
  },
  {
    "text": "style and then make the changes that were necessary to introduce caching and some cues also as well but um but the",
    "start": "346400",
    "end": "353199"
  },
  {
    "text": "main thing was just that we had to get it into that more functional style so this is an example where if we' written",
    "start": "353199",
    "end": "359080"
  },
  {
    "text": "it in aun functional style to begin with this would not have been an 18-month project this would have been a much much simpler undertaking but because we",
    "start": "359080",
    "end": "366199"
  },
  {
    "text": "hadn't it was a really really big expensive project um and that's an",
    "start": "366199",
    "end": "371400"
  },
  {
    "text": "example of like making hard problems like that's a hard problem cashing is the famously hard problem a lot easier",
    "start": "371400",
    "end": "377199"
  },
  {
    "text": "because if you're already writing it in this pure function heavy style well it's it's naturally amendable to that um on",
    "start": "377199",
    "end": "382960"
  },
  {
    "text": "the flip side I the example that we talked about on software unscripted which is my podcast um was Loops like",
    "start": "382960",
    "end": "389639"
  },
  {
    "text": "you learn how to do a for loop at a while loop and you can solve a whole bunch of problems with that um in pure",
    "start": "389639",
    "end": "395199"
  },
  {
    "text": "functional programming languages like rock you don't have for Loops you don't have while Loops there's other techniques that you use instead of those",
    "start": "395199",
    "end": "401240"
  },
  {
    "text": "to achieve the same thing but there's more of a learning curve there for sure and so that's an example of it's like it's not like this is rocket science but",
    "start": "401240",
    "end": "407840"
  },
  {
    "text": "it's definitely harder and so that's an example of like an easy thing getting a little bit harder but the benefit which",
    "start": "407840",
    "end": "414080"
  },
  {
    "text": "you maybe don't see until you're sort of further along and like solving much harder problems or confronted with much harder problems is that those problems",
    "start": "414080",
    "end": "420240"
  },
  {
    "text": "tend to get easier than my experience a absolutely so that that's that's definitely been my experience and I've",
    "start": "420240",
    "end": "425479"
  },
  {
    "text": "never even really worked in a purely functional language in production I've done a lot of toy stuff I've played",
    "start": "425479",
    "end": "431319"
  },
  {
    "text": "around with a lot of like pure script hcll o camel but okay I have not like",
    "start": "431319",
    "end": "437400"
  },
  {
    "text": "deployed to production uh in those languages and but I do teach functional",
    "start": "437400",
    "end": "443919"
  },
  {
    "text": "programming on bootd the basics like a intro to functional programming course and it is the fourth course in our",
    "start": "443919",
    "end": "450840"
  },
  {
    "text": "curriculum so we we start with like okay learn the basics of programming which we do in Python then we teach um",
    "start": "450840",
    "end": "456560"
  },
  {
    "text": "object-oriented programming and there's like a little course on setting up a local development environment and then we teach functional programming and",
    "start": "456560",
    "end": "463120"
  },
  {
    "text": "functional programming is like this spike in difficulty uh for new developers it's like I just learned how",
    "start": "463120",
    "end": "468919"
  },
  {
    "text": "to do loops right Loops are great I can do anything with loops I love Loops uh",
    "start": "468919",
    "end": "475080"
  },
  {
    "text": "and now you're telling me I need to use recursion and recursion but I mean",
    "start": "475080",
    "end": "480400"
  },
  {
    "text": "ultimately if you want a full substitute for loose yes that is kind of the end the end game yeah yeah and and there's",
    "start": "480400",
    "end": "486720"
  },
  {
    "text": "definitely other stuff right like you can do uh you know map filter reduce kind of stuff but",
    "start": "486720",
    "end": "493720"
  },
  {
    "text": "um it is it is fundamentally much harder to get to like that that step where",
    "start": "493720",
    "end": "499280"
  },
  {
    "text": "you're competent in it but I completely agree there's and I and I would argue it's really that there's like specific",
    "start": "499280",
    "end": "505319"
  },
  {
    "text": "Concepts from functional programming that give you like 80% of the value um things like immutability and pure",
    "start": "505319",
    "end": "511400"
  },
  {
    "text": "functions totally stuff like that yeah do you have some like favorite parts that like when you go outside of a",
    "start": "511400",
    "end": "516919"
  },
  {
    "text": "purely functional language like what what what are the things that you still do even when you're not working in a",
    "start": "516919",
    "end": "522039"
  },
  {
    "text": "purely functional language I mean the things that I the main thing that I still do is if I have the option I will",
    "start": "522039",
    "end": "528560"
  },
  {
    "text": "try to make a function pure like if I if if that's like a straightforward thing to do with how I'm solving the problem",
    "start": "528560",
    "end": "533800"
  },
  {
    "text": "then that's what I'm going to default to um one of the big differences between",
    "start": "533800",
    "end": "539200"
  },
  {
    "text": "functional languages and the functional style is that in functional languages you don't have to think about following",
    "start": "539200",
    "end": "545399"
  },
  {
    "text": "rules as much because they're just that's just the way things are it's like you're like a fish is inside water",
    "start": "545399",
    "end": "551200"
  },
  {
    "text": "doesn't know that it's in water it's just like Hey how do you deal with all that water it's like what this is just how things are and that's just the the",
    "start": "551200",
    "end": "558480"
  },
  {
    "text": "environment you work in similarly if I'm in rock I'm not thinking about how do I make this function pure it's just like I don't know that's just kind of the",
    "start": "558480",
    "end": "564519"
  },
  {
    "text": "default and like the only reason it would not be Pure or or like the only",
    "start": "564519",
    "end": "569640"
  },
  {
    "text": "way that it wouldn't feel like a pure function anymore is if I need to do some IO but at least in rock and also in Elm",
    "start": "569640",
    "end": "574680"
  },
  {
    "text": "and hasell um that changes the type of the function because now you're returning like a task or you know some",
    "start": "574680",
    "end": "580240"
  },
  {
    "text": "languages call it IO or future or promise or things like that rather than just returning a string or whatever it",
    "start": "580240",
    "end": "586560"
  },
  {
    "text": "was um so it doesn't feel like it's a big mental burden to to follow the rules",
    "start": "586560",
    "end": "594000"
  },
  {
    "text": "rather it's more like you know at least when I was getting into it it felt more like I'm trying to reach for this thing",
    "start": "594000",
    "end": "599600"
  },
  {
    "text": "but that doesn't exist so then I have to stop and think well how do I solve this problem in a different way so it feels more like a constraint than a burden if",
    "start": "599600",
    "end": "606360"
  },
  {
    "text": "that makes sense like the burden being I have to be thinking actively about how do I not accidentally violate the rules",
    "start": "606360",
    "end": "612000"
  },
  {
    "text": "that's not a thing because the they're just you know The Primitives are what you have access to there is no like mutation primitive that you have to",
    "start": "612000",
    "end": "618240"
  },
  {
    "text": "avoid um but yeah it is still at least when I was first getting into it now it feels very natural to me I actually",
    "start": "618240",
    "end": "624320"
  },
  {
    "text": "funny story so the rock compiler is written in Rust and um one of the first early contributors was somebody who was",
    "start": "624320",
    "end": "631160"
  },
  {
    "text": "super experienced with functional programming but hadn't actually written any imperative programming in a long time Russ is a very imperative language",
    "start": "631160",
    "end": "637279"
  },
  {
    "text": "um and so he we were PA programming on on some early project and he was like",
    "start": "637279",
    "end": "642399"
  },
  {
    "text": "hey um I'm kind of not sure how I should write this part I'm trying to like do it in this way but it's like not really",
    "start": "642399",
    "end": "647440"
  },
  {
    "text": "working out I was like I would just use a for Loop for that he's like right for Loops yeah those are things like forgot",
    "start": "647440",
    "end": "654519"
  },
  {
    "text": "you know it been so long so it's there's definitely an element of like once you do get up up to speed it's like that",
    "start": "654519",
    "end": "660560"
  },
  {
    "text": "that style feels natural and you you know you're just like used to that tool set um but definitely I think the",
    "start": "660560",
    "end": "666519"
  },
  {
    "text": "imperative like especially when it comes to like little stuff comparatively little stuff like Loops as opposed to",
    "start": "666519",
    "end": "671920"
  },
  {
    "text": "like how do you solve this billion you know questions problem um that stuff I think is easier to pick up than the like",
    "start": "671920",
    "end": "678160"
  },
  {
    "text": "the functional Primitives just because there's more of them I wish there was some like worldclass programming",
    "start": "678160",
    "end": "685560"
  },
  {
    "text": "competition where like experts from every programming language had to like ship the same project in a certain",
    "start": "685560",
    "end": "690839"
  },
  {
    "text": "amount of time and like if year after year we kept seeing like certain languages come ahead it would be like a",
    "start": "690839",
    "end": "696399"
  },
  {
    "text": "decent heuristic because everyone claims that once you come up to speed in their programming language like I say this",
    "start": "696399",
    "end": "702120"
  },
  {
    "text": "about go right pythonista say about python it's like once you learn it like you can ship really fast but like",
    "start": "702120",
    "end": "707720"
  },
  {
    "text": "everyone says that I'd love to see some kind of like competition where the best programmers in every language around the",
    "start": "707720",
    "end": "713639"
  },
  {
    "text": "world they're just shipping the same app uh and you get to see really and like it",
    "start": "713639",
    "end": "718680"
  },
  {
    "text": "would have to be kind of complex because you could consider some like especially like web Frameworks cheating and they",
    "start": "718680",
    "end": "725279"
  },
  {
    "text": "just like give you the boiler boiler plate so it have to be like something with like some complexity to it uh oh",
    "start": "725279",
    "end": "730839"
  },
  {
    "text": "man that that that would be that would be amazing but you touched on something that I think is a really underrated point which is that some different",
    "start": "730839",
    "end": "738000"
  },
  {
    "text": "languages and also different Frameworks are good at different stages of a project so rails is like famously really",
    "start": "738000",
    "end": "744240"
  },
  {
    "text": "really good at getting you up and running on a web project that was like the original pitch the original pitch video was build a Blog engine Ruby on",
    "start": "744240",
    "end": "750040"
  },
  {
    "text": "Rails in 15 minutes and it didn't really have much to say about what happens when you're not in you know minute 15 but",
    "start": "750040",
    "end": "756600"
  },
  {
    "text": "you're in month 15 like now now how much does it help you and it turns out not as much as a lot of other Technologies help",
    "start": "756600",
    "end": "762199"
  },
  {
    "text": "you um but because it's so good at getting up and running a lot of people successfully got their businesses off",
    "start": "762199",
    "end": "768120"
  },
  {
    "text": "the ground using the fact that it's so good at getting you off the ground and up and running and then like I'm",
    "start": "768120",
    "end": "773360"
  },
  {
    "text": "thinking about um like Shopify is like a famous early example of this where they there was an interview with the the the",
    "start": "773360",
    "end": "779480"
  },
  {
    "text": "creator of it talked about how rails really helped him get up and running fast and it was like a just a perfect fit for what he did but now as I",
    "start": "779480",
    "end": "785320"
  },
  {
    "text": "understand it they've written their own Ruby VM to try to work around some of the performance problems they ran into",
    "start": "785320",
    "end": "790399"
  },
  {
    "text": "which I'm guessing if they'd gotten it up and running and go they would not be doing that because just runs a lot",
    "start": "790399",
    "end": "795880"
  },
  {
    "text": "faster um there's these famous stories about like they had there was some company I think it was iron.io that",
    "start": "795880",
    "end": "801720"
  },
  {
    "text": "wrote a blog post about how they had 30 Ruby web servers and after they switched",
    "start": "801720",
    "end": "807199"
  },
  {
    "text": "to go they went down to Two web servers and actually it was that one web server",
    "start": "807199",
    "end": "812959"
  },
  {
    "text": "would have been way more than enough but they wanted to have a backup so they had two like the same traffic right just",
    "start": "812959",
    "end": "819279"
  },
  {
    "text": "didn't even need one full web server and they just had one for redundancy so yeah it's it's like you do run into different",
    "start": "819279",
    "end": "826639"
  },
  {
    "text": "sets of problems as your uh as your company grows your organization your codebase whatever yeah I I had a similar",
    "start": "826639",
    "end": "834000"
  },
  {
    "text": "story like one of my first jobs writing go we were moving some backend like web",
    "start": "834000",
    "end": "839199"
  },
  {
    "text": "services from Ruby to go and it was like crazy that we were even using Ruby and specifically Ruby on Rails for these",
    "start": "839199",
    "end": "845839"
  },
  {
    "text": "Services because there was like no HTML rendering involved it was just like data apis um and the only reason they were",
    "start": "845839",
    "end": "853040"
  },
  {
    "text": "used was because the rest of the app did use Ruby on Rails and so there was a bunch of rails developers so was like",
    "start": "853040",
    "end": "858199"
  },
  {
    "text": "well we can just do it quickly in rails right um but yeah the the difference",
    "start": "858199",
    "end": "864600"
  },
  {
    "text": "like it was like two orders of magnitude in terms of like compute speed um for the kinds of computations we were doing",
    "start": "864600",
    "end": "871440"
  },
  {
    "text": "uh so yeah we had like this you know a similar uh switch of like 30 services in",
    "start": "871440",
    "end": "877800"
  },
  {
    "text": "Ruby to like one in go and it doesn't always map that way I don't want people that are listening to this to just think",
    "start": "877800",
    "end": "883240"
  },
  {
    "text": "go is always 30 times faster than Ruby it's very problem specific but like sometimes it is yeah well and and",
    "start": "883240",
    "end": "890639"
  },
  {
    "text": "although it is problem specific it's like more common than than not it's not",
    "start": "890639",
    "end": "895759"
  },
  {
    "text": "like oh that's that's a cherry-picked example like no that's that's that's kind of on the typical side yeah yeah",
    "start": "895759",
    "end": "903600"
  },
  {
    "text": "it's also worth pointing out I think you mentioned something really great which is that like different Technologies um",
    "start": "903600",
    "end": "909120"
  },
  {
    "text": "are strong at different stages in like a company's life cycle or in a product life cycle and you'll often and you have",
    "start": "909120",
    "end": "918000"
  },
  {
    "text": "to keep this in mind like when you're on Twitter or YouTube and you're hearing opinions or you're listening to this podcast you're hearing our opinions",
    "start": "918000",
    "end": "923680"
  },
  {
    "text": "right I think it's really important to remember like these people like where do they work right like where are their",
    "start": "923680",
    "end": "930000"
  },
  {
    "text": "opinions shaped from like if you're listening to somebody who's like I don't know building a kind of custom",
    "start": "930000",
    "end": "936639"
  },
  {
    "text": "e-commerce site using like some JavaScript framework and like it's a solo operation they might be really into",
    "start": "936639",
    "end": "943079"
  },
  {
    "text": "like nextjs and versel and like all this kind of stuff um whereas if you're talking to like an infrastructure person",
    "start": "943079",
    "end": "949160"
  },
  {
    "text": "that works on like S3 at Amazon like they're going to be interested in way",
    "start": "949160",
    "end": "954519"
  },
  {
    "text": "different Technologies right they're solving very different problems and so it can be a trap I think for new",
    "start": "954519",
    "end": "960440"
  },
  {
    "text": "developers they just hear like X is good Y is bad but like you really want to",
    "start": "960440",
    "end": "965560"
  },
  {
    "text": "just be I would say context aware yeah I I definitely um I had a past job where",
    "start": "965560",
    "end": "972040"
  },
  {
    "text": "uh we had a backend that was doing um compute on like a large amount of like scientific data and uh it was like",
    "start": "972040",
    "end": "980000"
  },
  {
    "text": "petabytes of of data going through the system and I remember a couple of the people on that project talking about how",
    "start": "980000",
    "end": "986680"
  },
  {
    "text": "a lot of people will say that they've got big data quote unquote but what they mean is like this whole data set could",
    "start": "986680",
    "end": "992839"
  },
  {
    "text": "fit easily in memory on my laptop and they're like that's have you know you can if you want you can turn that into a",
    "start": "992839",
    "end": "999720"
  },
  {
    "text": "massive you know distributed system but you don't have to so maybe you shouldn't",
    "start": "999720",
    "end": "1005160"
  },
  {
    "text": "and like maybe maybe you're just kind of making things harder for yourself because you imagine that you're G to have this scale someday um whereas",
    "start": "1005160",
    "end": "1012639"
  },
  {
    "text": "they're like yeah we have to deal with that right now and like it's not possible for our data set to fit on any one machine in the world unless you know",
    "start": "1012639",
    "end": "1019240"
  },
  {
    "text": "it's like some bespoke custom super computer which you know would be a way out of our budget right problem that",
    "start": "1019240",
    "end": "1027400"
  },
  {
    "text": "makes no that that makes perfect sense I was just talking to um I know it was my professor on our distributed systems uh",
    "start": "1027400",
    "end": "1034760"
  },
  {
    "text": "episode where he was basically saying the same thing like it's not really big data if you can fit it on a thumb drive",
    "start": "1034760",
    "end": "1040400"
  },
  {
    "text": "right yeah sometimes it can feel like big data especially as like a new developer because like you open it up in",
    "start": "1040400",
    "end": "1047760"
  },
  {
    "text": "I don't know if like you can open it up in a spreadsheet or in like a SQL Quant you see that there's like a million rows",
    "start": "1047760",
    "end": "1053320"
  },
  {
    "text": "like a million rows actually isn't that much data when you look at it like the bite level um yeah so although it does",
    "start": "1053320",
    "end": "1060880"
  },
  {
    "text": "matter like how much overhead is associated with each of those so a million rows of data in C versus in Ruby",
    "start": "1060880",
    "end": "1066640"
  },
  {
    "text": "is actually a lot more memory in the Ruby case because every single row and every single column and every single row",
    "start": "1066640",
    "end": "1073039"
  },
  {
    "text": "is going to be an object which means it has all this extra metadata and stuff associated with it whereas in C it's",
    "start": "1073039",
    "end": "1078080"
  },
  {
    "text": "probably just going to be the bare minimum amount of memory required to represent that and that's it right right",
    "start": "1078080",
    "end": "1084320"
  },
  {
    "text": "and of course like I guess I'm I'm ignoring all the Nuance of like you could have giant Json blobs like in each",
    "start": "1084320",
    "end": "1089840"
  },
  {
    "text": "cell in the in in the row but yeah if you're like storing what most web applications do which is like timestamps",
    "start": "1089840",
    "end": "1097039"
  },
  {
    "text": "IDs and like maybe a string uhan Rose isn't too much to too much to worry",
    "start": "1097039",
    "end": "1103159"
  },
  {
    "text": "about yeah Okay cool so I want to tie this now all back into rock and talk a",
    "start": "1103159",
    "end": "1108480"
  },
  {
    "text": "little bit more about rock um let's start with like the motivation behind Rock so like why does the world need yet",
    "start": "1108480",
    "end": "1115440"
  },
  {
    "text": "another functional programming language yeah so I mean I I could well I could I could take that broader and say like why",
    "start": "1115440",
    "end": "1121440"
  },
  {
    "text": "does the world need yet another programming language right yeah the usual answer to that question is one of",
    "start": "1121440",
    "end": "1126919"
  },
  {
    "text": "several things and I can say what the answer is in Rock's case in one case somebody's just like I just wanted to",
    "start": "1126919",
    "end": "1131960"
  },
  {
    "text": "make the thing I just I thought it'd be fun and this is not one of those projects it's not like a hobby you know",
    "start": "1131960",
    "end": "1137159"
  },
  {
    "text": "oh I'm just going to do this for fun this is like I want this to exist I want to use this this is solving a problem",
    "start": "1137159",
    "end": "1142880"
  },
  {
    "text": "that I have and I think a lot of other people have um the second type of reason that people make a language is that they",
    "start": "1142880",
    "end": "1149840"
  },
  {
    "text": "need to take some existing language and they need to sort of like enhance it or",
    "start": "1149840",
    "end": "1155360"
  },
  {
    "text": "do something slightly different like fix some problems and for whatever reason they can't Upstream that into the actual",
    "start": "1155360",
    "end": "1160640"
  },
  {
    "text": "language so I would say like cotland is an example of this where it's like they they just want to take Java and make",
    "start": "1160640",
    "end": "1165720"
  },
  {
    "text": "certain things about it better um Mojo if heard of that as like a new language that's like a superet of python",
    "start": "1165720",
    "end": "1171679"
  },
  {
    "text": "typescript is an example of this um there's plenty of languages that are in that category rock is also not in that",
    "start": "1171679",
    "end": "1177039"
  },
  {
    "text": "category um rock is in the category of I have a set of problems that can't be",
    "start": "1177039",
    "end": "1182240"
  },
  {
    "text": "solved by any existing language the only way to solve those problems is to make a new language so that's what I'm going to",
    "start": "1182240",
    "end": "1188080"
  },
  {
    "text": "do um basically I guess it really kind of comes down to certain characteristics",
    "start": "1188080",
    "end": "1193400"
  },
  {
    "text": "that I want both in terms of user experience and also like as a user of the language and also in terms of of",
    "start": "1193400",
    "end": "1198480"
  },
  {
    "text": "performance characteristics when I say performance I both mean runtime performance and also compile time",
    "start": "1198480",
    "end": "1203720"
  },
  {
    "text": "performance and actually go is one of The Inspirations here because go is one of the few languages that I'm aware of",
    "start": "1203720",
    "end": "1209559"
  },
  {
    "text": "that's like really good at both while also having automatic memory management so like Zig is a language that's really",
    "start": "1209559",
    "end": "1216360"
  },
  {
    "text": "fast build times and also runs really fast but also you have to manage all your own memory which uh has is is a",
    "start": "1216360",
    "end": "1222360"
  },
  {
    "text": "whole can of worms um and like you know for a certain set of problems that's awesome uh but there's also a certain",
    "start": "1222360",
    "end": "1227799"
  },
  {
    "text": "set of problem s like if I'm doing a startup I probably don't want that I probably want to just not have to worry",
    "start": "1227799",
    "end": "1233280"
  },
  {
    "text": "about memory corruption bugs at all and just like the language takes care of that um so I wanted something that has",
    "start": "1233280",
    "end": "1239600"
  },
  {
    "text": "those characteristics but also a bunch of other characteristics that again there aren't any existing languages that",
    "start": "1239600",
    "end": "1245120"
  },
  {
    "text": "I could get all those things from right okay that makes sense so is Rock a",
    "start": "1245120",
    "end": "1250960"
  },
  {
    "text": "compiled language then oh yeah yeah so so also similar to go like when you build your rock program it just spits",
    "start": "1250960",
    "end": "1257080"
  },
  {
    "text": "out a executable like a binary executable you can just run you don't need to have Rock installed on your system to run it you can just build it",
    "start": "1257080",
    "end": "1263360"
  },
  {
    "text": "and then say here you go here's here's your executable go ahead and run it you know whatever operating system you built it for so how should we think of it in",
    "start": "1263360",
    "end": "1269799"
  },
  {
    "text": "terms of like performance class and actually let me let me back up so in my",
    "start": "1269799",
    "end": "1275240"
  },
  {
    "text": "mind you've basically got like fully interpreted programming languages like Python and Ruby and javascripts and I",
    "start": "1275240",
    "end": "1282120"
  },
  {
    "text": "feel like JavaScript has kind of separated itself just because there's been so much engineering work put into like the V8 Javas engine that actually",
    "start": "1282120",
    "end": "1289679"
  },
  {
    "text": "does write you know run quite a bit faster than Python and Ruby tends to um",
    "start": "1289679",
    "end": "1294760"
  },
  {
    "text": "but then you've got like in another class you've got like uh kind of java C and at least in compute performance I",
    "start": "1294760",
    "end": "1301760"
  },
  {
    "text": "also kind of put go into this category which is sure like it's kind of compiled like Java and C",
    "start": "1301760",
    "end": "1309279"
  },
  {
    "text": "don't actually compile down to uh machine code they like compile for their virtual machine um and then like go",
    "start": "1309279",
    "end": "1315480"
  },
  {
    "text": "actually does but it comes with a runtime and garbage collectors it's like a little slower um and then you've got",
    "start": "1315480",
    "end": "1321120"
  },
  {
    "text": "like the Bare Bones languages like rust and c and Zig that are just like hyper",
    "start": "1321120",
    "end": "1326880"
  },
  {
    "text": "optimized for Speed and memory usage where should we categorize Rock so I I",
    "start": "1326880",
    "end": "1333679"
  },
  {
    "text": "mean like literally a thing that we talk about all the time is we're always when we're benchmarking we're trying to meet",
    "start": "1333679",
    "end": "1339080"
  },
  {
    "text": "or exceed go and if we don't make it to the like rust or you know uh C or or C++",
    "start": "1339080",
    "end": "1347120"
  },
  {
    "text": "tier we're finally with that our our preference is if we can tie those then that's that's a win there's no world in",
    "start": "1347120",
    "end": "1352919"
  },
  {
    "text": "which we can do better than them because I mean except on like certain benchmarks where it's like they didn't choose to",
    "start": "1352919",
    "end": "1359159"
  },
  {
    "text": "optimize it but the whole point of those languages is like they give you access to literally everything the hardware can do so it's not like theoretically",
    "start": "1359159",
    "end": "1366080"
  },
  {
    "text": "possible like whatever program you write they can always match that by just doing it the hard way so um so in that sense",
    "start": "1366080",
    "end": "1373120"
  },
  {
    "text": "it's like we're not trying to be competitive with that with like the fastest because in order to do do that",
    "start": "1373120",
    "end": "1378320"
  },
  {
    "text": "you have to support a lot of memory unsafe operations which opens up this whole category of really nasty bugs and",
    "start": "1378320",
    "end": "1383480"
  },
  {
    "text": "stuff so we want to be like you don't have to worry about those however uh we still want to be super fast you know",
    "start": "1383480",
    "end": "1389480"
  },
  {
    "text": "with that in mind so yeah like go I would also put Swift as like one of the languages that's that's up there in terms of um automatic memory management",
    "start": "1389480",
    "end": "1396159"
  },
  {
    "text": "and really fast performance um so like go and Swift when are two of the languages that we're like yeah we we",
    "start": "1396159",
    "end": "1401799"
  },
  {
    "text": "want to really aim for being like at or better ideally better than um than those",
    "start": "1401799",
    "end": "1407200"
  },
  {
    "text": "two and that also implies like faster than Java C JavaScript Ruby all those",
    "start": "1407200",
    "end": "1412279"
  },
  {
    "text": "other ones you mentioned right I found that like Java C and go tend to be pretty similar in terms of like compute",
    "start": "1412279",
    "end": "1418559"
  },
  {
    "text": "performance um go will usually lead by a little bit but um not like a crazy",
    "start": "1418559",
    "end": "1423960"
  },
  {
    "text": "margin um but in memory go usually does like way better yeah",
    "start": "1423960",
    "end": "1429600"
  },
  {
    "text": "just we don't need to go into all the details on that but like I understand why that is but yeah right we don't need",
    "start": "1429600",
    "end": "1435000"
  },
  {
    "text": "to get into it yeah we've talked about in a couple other episodes episod but like uh where does does Rock have a",
    "start": "1435000",
    "end": "1440760"
  },
  {
    "text": "split like that as well in terms of compute and memory um so we should also do quite",
    "start": "1440760",
    "end": "1445880"
  },
  {
    "text": "well on memory uh so actually like um without getting into like a really detailed analysis of this like I mean on",
    "start": "1445880",
    "end": "1452360"
  },
  {
    "text": "software and scripted like we we get into like the nitty-gritty in a lot of a lot of cases but um I know your audience is like a lot of people who like new to",
    "start": "1452360",
    "end": "1458799"
  },
  {
    "text": "backend development so I don't want to like you know drink from the fire hose on this but I'm sure you've talked a little bit about stack versus Heap like",
    "start": "1458799",
    "end": "1465559"
  },
  {
    "text": "to some extent um so basically Rock we try to stack allocate as much as possible and we do that by just",
    "start": "1465559",
    "end": "1471840"
  },
  {
    "text": "automatically detecting so like in go I think it's called structs in go right is that right yeah so in go structs uh I",
    "start": "1471840",
    "end": "1479720"
  },
  {
    "text": "believe aren't on the Heap by default they're just like stack allocated unless you yeah okay unless you like do a",
    "start": "1479720",
    "end": "1485720"
  },
  {
    "text": "pointer right um so it's the same thing in rock but a difference is that in rock",
    "start": "1485720",
    "end": "1491480"
  },
  {
    "text": "you don't have to actually declare the type ahead of time we figure it out with type inference but then we still stack allocate it whereas in Java for example",
    "start": "1491480",
    "end": "1499320"
  },
  {
    "text": "um you do have to declare the type but it is always on the Heap like an object in Java is always reallocated um",
    "start": "1499320",
    "end": "1504720"
  },
  {
    "text": "similarly like in JavaScript or Ruby or python they're uh you don't have to declare the type but they're also always",
    "start": "1504720",
    "end": "1510480"
  },
  {
    "text": "on the Heap so rock and go are are both doing the same thing where it's like this this doesn't require a heap",
    "start": "1510480",
    "end": "1515880"
  },
  {
    "text": "allocation um and it's also the same with as many things as we can basically it's like numbers are not on the Heap",
    "start": "1515880",
    "end": "1521960"
  },
  {
    "text": "whereas they are in Python um uh strings strings do have to be on the Heap but um actually we do an optimization that C++",
    "start": "1521960",
    "end": "1528559"
  },
  {
    "text": "does if we wanted to do a really unfair Benchmark we could like try to do something that's really heavy on like",
    "start": "1528559",
    "end": "1534279"
  },
  {
    "text": "string operations where they're all under like uh 24 characters or 24 bytes in memory because at that point we",
    "start": "1534279",
    "end": "1540919"
  },
  {
    "text": "basically store them on the stack like we reuse all the data that would be used to store the pointers and we we just",
    "start": "1540919",
    "end": "1546799"
  },
  {
    "text": "overwrite that with with the actual Str so C++ does that we do that too um so",
    "start": "1546799",
    "end": "1552720"
  },
  {
    "text": "the idea being that in a lot of cases your strings are that short um and so like if we don't don't need to let's",
    "start": "1552720",
    "end": "1558720"
  },
  {
    "text": "let's not store a heap allocation for that um but that's like that adds a lot of complexity to the implementation but",
    "start": "1558720",
    "end": "1564080"
  },
  {
    "text": "um we already kind of handled that so uh as a user of the language that that distinction is just like you might notice that if your strings are kind of",
    "start": "1564080",
    "end": "1570399"
  },
  {
    "text": "short like under 24 characters they tend to run faster like string operations do",
    "start": "1570399",
    "end": "1575720"
  },
  {
    "text": "um and you use less memory but uh but again like that that would be kind of a cheaty Benchmark um another thing that's",
    "start": "1575720",
    "end": "1581880"
  },
  {
    "text": "different um and we saw this in our we have this quicksort Benchmark uh where quicksort is an algorithm that's very",
    "start": "1581880",
    "end": "1588240"
  },
  {
    "text": "dependent on mutation to run fast and I gave a talk about this called um outperforming imperative with pure",
    "start": "1588240",
    "end": "1593880"
  },
  {
    "text": "functional languages at strange Loop 2021 I think it's on YouTube somewhere okay but basically uh one of the things",
    "start": "1593880",
    "end": "1601399"
  },
  {
    "text": "that we wanted to see was can you take an algorithm that is inherently like it's like pathologically bad for a pure",
    "start": "1601399",
    "end": "1607880"
  },
  {
    "text": "functional language and can we do well at it anyway because of all of our optimizations behind the scenes and so",
    "start": "1607880",
    "end": "1613720"
  },
  {
    "text": "where we ended up was um if you uh quick sorted it was a million uh we had to",
    "start": "1613720",
    "end": "1619880"
  },
  {
    "text": "change it actually to be uh 64-bit floating Point numbers originally it had them as integers but it turns out that",
    "start": "1619880",
    "end": "1625880"
  },
  {
    "text": "javascript's really bad at integers 64-bit integers so we had to change it to floats just to not unfairly penalize",
    "start": "1625880",
    "end": "1632120"
  },
  {
    "text": "JavaScript um so we did Java JavaScript go rock and C++ I think with the five",
    "start": "1632120",
    "end": "1637480"
  },
  {
    "text": "languages that we did um we also did has but that was it kind of didn't didn't really matters kind more to make a point",
    "start": "1637480",
    "end": "1643200"
  },
  {
    "text": "about hascal um but basically then we just like graphed like how fast could we quick sort those numbers and we always",
    "start": "1643200",
    "end": "1648919"
  },
  {
    "text": "in every case we started with the exact same set of numbers which had been pre-randomized ahead of time to the same randomized set um and basically we came",
    "start": "1648919",
    "end": "1656320"
  },
  {
    "text": "up with two graphs one was where we did that for Million numbers and other one where we did that for a thousand numbers and for the Million numbers one it was",
    "start": "1656320",
    "end": "1662039"
  },
  {
    "text": "like if I remember remember right it was like JavaScript was the slowest then Java was a little bit faster and then uh",
    "start": "1662039",
    "end": "1668000"
  },
  {
    "text": "go was a little bit faster than that and rock was a little very very slightly faster than go and then C++ was a little",
    "start": "1668000",
    "end": "1673799"
  },
  {
    "text": "bit faster than Rock but they were all like kind of close um a thousand numbers it was not close because Rock and go and",
    "start": "1673799",
    "end": "1682600"
  },
  {
    "text": "C++ were all like ity bitty little bit of runtime and Javas Java and JavaScript",
    "start": "1682600",
    "end": "1687720"
  },
  {
    "text": "like massive runtime because the jit kicks in around 4,000 iterations of a loop so they were still running in",
    "start": "1687720",
    "end": "1695120"
  },
  {
    "text": "interpreted mode they weren't actually getting the the optimizations yet and that was kind of the point of that was",
    "start": "1695120",
    "end": "1701000"
  },
  {
    "text": "you I I think when people talk about like jit so that's just in time compilation in a lot of cases people",
    "start": "1701000",
    "end": "1707200"
  },
  {
    "text": "have this idea in their heads of like it's this magic one that like makes your code faster in general but it's not",
    "start": "1707200",
    "end": "1714559"
  },
  {
    "text": "actually true it's it's that like what happens with the jit is your program is running and it's making a counter as you",
    "start": "1714559",
    "end": "1721279"
  },
  {
    "text": "go every time you do some sort of iteration of a loop and it says how many times are we doing this and once it",
    "start": "1721279",
    "end": "1726559"
  },
  {
    "text": "passes some threshold let's say like 4,000 in the case of JavaScript and Java it says okay that's enough this seems to",
    "start": "1726559",
    "end": "1733360"
  },
  {
    "text": "be a big loop and I'm actually going to stop running this Loop right now now and I'm going to take the contents of this",
    "start": "1733360",
    "end": "1739760"
  },
  {
    "text": "Loop and I'm going to compile it into machine code like what go and rock and C++ do from the get-go always but",
    "start": "1739760",
    "end": "1746399"
  },
  {
    "text": "they're doing this at runtime when they say now that I've got this machine code thing like what those other ones had",
    "start": "1746399",
    "end": "1751679"
  },
  {
    "text": "from the Geto now I'll run that for the rest of the iterations of the loop until it runs out and the challenge of that or",
    "start": "1751679",
    "end": "1757960"
  },
  {
    "text": "or or I guess the downside of that is if you have a bunch of small Loops instead of like one big loop it never kicks in",
    "start": "1757960",
    "end": "1763960"
  },
  {
    "text": "like if you have a bunch of you know your data sets are all like uh you know a couple hundred couple thousand or maybe a couple dozen or even a couple of",
    "start": "1763960",
    "end": "1771360"
  },
  {
    "text": "elements in them you're not getting the jit benefit from any of those and that's a thing that comes up in the real world",
    "start": "1771360",
    "end": "1777519"
  },
  {
    "text": "pretty often and depending on your workload might be the norm but yet in the benchmarks people always in order to",
    "start": "1777519",
    "end": "1782960"
  },
  {
    "text": "like make them Fair they'll always choose a number that's like way over the jit threshold and I wanted to show both to be like yeah you know there's a these",
    "start": "1782960",
    "end": "1790120"
  },
  {
    "text": "are all pretty close you know if if you're running a huge workload but even if you have a bunch of small Loops like",
    "start": "1790120",
    "end": "1796279"
  },
  {
    "text": "the difference between like rock and go in C++ and Java and JavaScript is actually very large yeah I want to re I",
    "start": "1796279",
    "end": "1802440"
  },
  {
    "text": "want to like reiterate that and say say it back uh sure just because I think it's an important point and to make sure I understood it so um jit stands in just",
    "start": "1802440",
    "end": "1810320"
  },
  {
    "text": "in time right and in this case we're talking about just in time compiling yes and sounds like C++ go and rock they",
    "start": "1810320",
    "end": "1819360"
  },
  {
    "text": "compile a binary so like machine code that you can run on your computer as an",
    "start": "1819360",
    "end": "1825320"
  },
  {
    "text": "executable if you're on Windows right you probably exe right this is like executable if you're on Linux there's",
    "start": "1825320",
    "end": "1830880"
  },
  {
    "text": "usually not a file extension but it's just like a binary that is compiled to your architecture um you don't need any",
    "start": "1830880",
    "end": "1837360"
  },
  {
    "text": "external programs to be able to run this thing your computer knows how to run it exactly okay and that's been like",
    "start": "1837360",
    "end": "1842399"
  },
  {
    "text": "compiled and optimized yes whereas in the case of like Java and javascripts and Java is a little confusing because",
    "start": "1842399",
    "end": "1848640"
  },
  {
    "text": "you do like compile a Java program but you're not like compiling it to machine code usually right you're compiling it like for the virtual machine to be able",
    "start": "1848640",
    "end": "1854840"
  },
  {
    "text": "to run it uh like the Java B right so so technically both Java and JavaScript are",
    "start": "1854840",
    "end": "1860600"
  },
  {
    "text": "interpreted languages the difference is that Java has a compile step that compiles your source code into this",
    "start": "1860600",
    "end": "1866559"
  },
  {
    "text": "binary bite code and then that gets interpreted at runtime uh whereas in JavaScript it's the source code itself",
    "start": "1866559",
    "end": "1872639"
  },
  {
    "text": "that's getting interpreted directly so that's why if you want to run a Java program on your you know whatever your",
    "start": "1872639",
    "end": "1878159"
  },
  {
    "text": "operating system is you have to first install the Java runtime environment you you can't just be like oh I'll I'll just",
    "start": "1878159",
    "end": "1883559"
  },
  {
    "text": "get this executable and just run it with Java you have to actually have Java installed just like you have to have JavaScript installed either in your browser or node.js or something like",
    "start": "1883559",
    "end": "1890519"
  },
  {
    "text": "that in order to run you know to interpret the source code right okay makes sense so like Java compiles but is",
    "start": "1890519",
    "end": "1896840"
  },
  {
    "text": "still interpreted afterwards so both of these languages are interpreting something and basically what I'm understanding is we're taking whatever",
    "start": "1896840",
    "end": "1902679"
  },
  {
    "text": "thing is going to be interpreted so in Java's case some bite code in javascript's case some source code yeah",
    "start": "1902679",
    "end": "1907880"
  },
  {
    "text": "and it like starts running and like it just starts doing stuff starts you know executing instructions and at some point",
    "start": "1907880",
    "end": "1916320"
  },
  {
    "text": "The Interpreter has some like heris built into it to like I'm noticing that this thing is happening a lot and",
    "start": "1916320",
    "end": "1923159"
  },
  {
    "text": "interpreting things is kind of slow so I'm going to actually take this common",
    "start": "1923159",
    "end": "1928639"
  },
  {
    "text": "operation compile it directly down to machine code which the entire program in the case of rock go and C++ was already",
    "start": "1928639",
    "end": "1935600"
  },
  {
    "text": "compiled to machine code and I'm gonna I'm going to compile that machine code and now I'm going to run that machine",
    "start": "1935600",
    "end": "1941320"
  },
  {
    "text": "code when I do this repeated operation and it's like it's way faster now yeah I",
    "start": "1941320",
    "end": "1946480"
  },
  {
    "text": "I think is very much an oversimplification but I think easy way to have well what I'm about to say is",
    "start": "1946480",
    "end": "1952360"
  },
  {
    "text": "right that was that was a good explanation oh thank you okay but but but I'm about to oversimplify um so an",
    "start": "1952360",
    "end": "1957559"
  },
  {
    "text": "oversimplified way to think about why interpreters are so much slower is imagine you look at your source code and",
    "start": "1957559",
    "end": "1964240"
  },
  {
    "text": "literally every single operation and every single number and every single",
    "start": "1964240",
    "end": "1969559"
  },
  {
    "text": "string every single thing in every like token in your source code gets",
    "start": "1969559",
    "end": "1975000"
  },
  {
    "text": "surrounded by an if statement that's kind of what's going on because what what's happening with The Interpreter is",
    "start": "1975000",
    "end": "1981240"
  },
  {
    "text": "it's like you know the machine is like the CPU is like oh okay I have been told to expect a string here at this point in",
    "start": "1981240",
    "end": "1987880"
  },
  {
    "text": "memory and I'm going to like do this operation then my next instruction is add this thing to that thing and I'm I've been told that those are numbers so",
    "start": "1987880",
    "end": "1994080"
  },
  {
    "text": "I'm just going to add them and you know do the things whereas an interpreter is like I don't necessarily know what I've",
    "start": "1994080",
    "end": "1999559"
  },
  {
    "text": "got until I like read the next line of source code or or the next bite in the bite code and those are all if",
    "start": "1999559",
    "end": "2005080"
  },
  {
    "text": "statements it's like oh if I get this then then I'm going to tell the machine do this instruction if I get this then I'm going to tell it to this instruction",
    "start": "2005080",
    "end": "2011360"
  },
  {
    "text": "so there's this it's it's like this glob of extra indirection every single thing",
    "start": "2011360",
    "end": "2017039"
  },
  {
    "text": "that you do has an extra if around it and those really add up there's more to it than that it's like actually even",
    "start": "2017039",
    "end": "2022519"
  },
  {
    "text": "more than that which is why they have like more memory usage and stuff um but at a baseline that gives you kind of an",
    "start": "2022519",
    "end": "2027559"
  },
  {
    "text": "oversimplified like oh this is why it's a lot slower what if you had ifs around every single thing you did yeah no that",
    "start": "2027559",
    "end": "2034000"
  },
  {
    "text": "makes perfect sense and I like in the extreme case of python it's like even worse because it like goes line by line",
    "start": "2034000",
    "end": "2040360"
  },
  {
    "text": "as it executes right and so like yeah if you want to see this there's a really",
    "start": "2040360",
    "end": "2045679"
  },
  {
    "text": "cool course this is like not aimed at beginners but if you ever if you ever want to learn how this stuff really",
    "start": "2045679",
    "end": "2051440"
  },
  {
    "text": "works um so this guy Casey miror who I had on software inscripted a couple ago ago um he makes this course called",
    "start": "2051440",
    "end": "2057878"
  },
  {
    "text": "performance aware programming and one of the first things that he does is he takes uh a a really simple Python",
    "start": "2057879",
    "end": "2063919"
  },
  {
    "text": "program all it does is it Loops through a bunch of numbers and adds them all up and then he goes through the steps of like moving that to C and literally",
    "start": "2063919",
    "end": "2070320"
  },
  {
    "text": "shows it getting I think it was like a thousand times faster and and by like making like one little change at a time",
    "start": "2070320",
    "end": "2076440"
  },
  {
    "text": "it's still like not many lines of code but um one of the cool things that he does is he he actually builds python the",
    "start": "2076440",
    "end": "2084079"
  },
  {
    "text": "The Interpreter from source so that he can go through in a debugger and just show you all the things that The",
    "start": "2084079",
    "end": "2089320"
  },
  {
    "text": "Interpreter is doing every single line of code so like when you see when it's doing an ad instruction it's actually",
    "start": "2089320",
    "end": "2094720"
  },
  {
    "text": "way more than just one if there it's like it's jumping through all these function calls and like and he's like and here's the C version it's like you",
    "start": "2094720",
    "end": "2101520"
  },
  {
    "text": "know that's that's an ad it's like one CPU do one thing whereas the other case it was like oh hang on hang on just to do an ad are you kidding that's like",
    "start": "2101520",
    "end": "2108119"
  },
  {
    "text": "that's so much work and it's it's really Illuminating just to kind of see that in action you do have to like it is a paid",
    "start": "2108119",
    "end": "2114040"
  },
  {
    "text": "course so like you don't you can't just like I can't just link it to a YouTube video unfortunately but it's really cool um and I I learned a lot from that",
    "start": "2114040",
    "end": "2121160"
  },
  {
    "text": "course even though I've been like doing this stuff for like 15 20 well I've been programming like closer to 20 five years",
    "start": "2121160",
    "end": "2127359"
  },
  {
    "text": "now but uh yeah there there's there's always there's always more stuff to learn with programming oh yeah it does",
    "start": "2127359",
    "end": "2133480"
  },
  {
    "text": "it doesn't stop and yeah i' I've certainly noticed there is there's a difference between programmers who kind",
    "start": "2133480",
    "end": "2139119"
  },
  {
    "text": "of do stop learning and stagnate and people that actually just keep improving because that 10 years of experience in",
    "start": "2139119",
    "end": "2146280"
  },
  {
    "text": "two different developers like don't do not always look the same they rarely do",
    "start": "2146280",
    "end": "2151640"
  },
  {
    "text": "there's the there's the funny way I've heard of it of it being put it's like you know one person could get 10 years of experience where each year they learn",
    "start": "2151640",
    "end": "2158599"
  },
  {
    "text": "different things and then another person might over 10 years just repeat the same one year 10 times in a row and by the",
    "start": "2158599",
    "end": "2165920"
  },
  {
    "text": "they didn't really actually learn that much and it's crazy because like we don't represent that like on resumés",
    "start": "2165920",
    "end": "2171520"
  },
  {
    "text": "hardly at all that's part of why like the whole interviewing and recruiting",
    "start": "2171520",
    "end": "2176960"
  },
  {
    "text": "process is such a mess yeah yeah so Rock's a compiled language",
    "start": "2176960",
    "end": "2183720"
  },
  {
    "text": "building compilers is famously hard um are you making use of the llvm compiler",
    "start": "2183720",
    "end": "2191560"
  },
  {
    "text": "or did you roll it from scratch how does that work yes so um there's a bunch of different stages that a compiler does so",
    "start": "2191560",
    "end": "2197839"
  },
  {
    "text": "the first one is parsing and that's where you take the source code and you translate it into some inmemory data",
    "start": "2197839",
    "end": "2203520"
  },
  {
    "text": "structure that's like you can kind of analyze you don't want to have to go one letter at a time when you're thinking about how do I type check this that's",
    "start": "2203520",
    "end": "2209400"
  },
  {
    "text": "it's not going to work so parsing is like turn it from source code into some in memory thing then after that you do",
    "start": "2209400",
    "end": "2215599"
  },
  {
    "text": "like name resolutions so so that's where you get like your naming errors like hey you use this variable without naming it or initializing it or something I don't",
    "start": "2215599",
    "end": "2221720"
  },
  {
    "text": "know what this thing means um and that's kind of where you sort of wire all the variables together and say like they",
    "start": "2221720",
    "end": "2227000"
  },
  {
    "text": "have these relationships this one connects to this argument you know Etc um and then after that you have type",
    "start": "2227000",
    "end": "2232800"
  },
  {
    "text": "checking uh which in our case is type inference because Rock has 100% type inference it's like a sound type system",
    "start": "2232800",
    "end": "2238400"
  },
  {
    "text": "it always correctly infers the the types of your things even if you don't write a type on them which you don't have to um",
    "start": "2238400",
    "end": "2244240"
  },
  {
    "text": "once that's done then you get into uh that that's all of what I just described is known as the front end of the",
    "start": "2244240",
    "end": "2250480"
  },
  {
    "text": "compiler so not not to do with uis it's just like there kind of two sections that's the front end and then there's the back end and the back end refers to",
    "start": "2250480",
    "end": "2257520"
  },
  {
    "text": "what do you actually output it's like at that point we're like we did all the parsing name resolution type checking we",
    "start": "2257520",
    "end": "2263160"
  },
  {
    "text": "sort of understand what your program is in these data structures we validated it we know what we're going to produce the back end is where we actually produce",
    "start": "2263160",
    "end": "2269240"
  },
  {
    "text": "that thing so llvm which originally stood for low-level virtual machine but it's never been a virtual machine so I",
    "start": "2269240",
    "end": "2275319"
  },
  {
    "text": "don't know why they chose that acronym for it um basically llvm is a compiler backend and its job is basically you",
    "start": "2275319",
    "end": "2281960"
  },
  {
    "text": "give llvm these data structures and it says cool uh you're you're building for let's say an Intel CPU and a and a Mac I",
    "start": "2281960",
    "end": "2289280"
  },
  {
    "text": "will just output an executable for you in that format or you're saying I'm building for a Linux and its arm",
    "start": "2289280",
    "end": "2295560"
  },
  {
    "text": "actually usually it's more like arm on Mac and Intel on Linux these days but um whatever uh and you're it's like sure I",
    "start": "2295560",
    "end": "2301640"
  },
  {
    "text": "I will output that you say I want web assembly please and it says no problem here's your web assembly all of that stuff is a lot of work and it turns out",
    "start": "2301640",
    "end": "2308599"
  },
  {
    "text": "that a lot of compilers want that stuff done the same way um and also lvm does a",
    "start": "2308599",
    "end": "2314119"
  },
  {
    "text": "bunch of optimizations so you can say I want you to run through and optimize this for performance or I want you to",
    "start": "2314119",
    "end": "2320160"
  },
  {
    "text": "optimize this for size like the lowest size possible of the output binary you can tell it to optimize for different",
    "start": "2320160",
    "end": "2326079"
  },
  {
    "text": "things um lvm because it's been worked on by like Swift uses lvm Rock does C++",
    "start": "2326079",
    "end": "2331760"
  },
  {
    "text": "rust a lot of languages use LM um go does not and we can talk about about why",
    "start": "2331760",
    "end": "2336839"
  },
  {
    "text": "that is and why that's actually in some ways a good thing um although I did see a project which I I I didn't I I'm not",
    "start": "2336839",
    "end": "2343400"
  },
  {
    "text": "sure if they have if the name is as amazing as I think it is I hope it is but it's go llvm which I really hope is",
    "start": "2343400",
    "end": "2349359"
  },
  {
    "text": "pronounced Gollum because that's like what it looks like except for a v instead of a u i don't know I don't know",
    "start": "2349359",
    "end": "2356079"
  },
  {
    "text": "but um but it kind of seemed like that's like not really maintained or used or maybe worked on I'm not sure but um",
    "start": "2356079",
    "end": "2362440"
  },
  {
    "text": "doesn't seem like something a lot of people are using just got to grab the domain name on that one that's that's Prett yeah right but but at any rate I",
    "start": "2362440",
    "end": "2368599"
  },
  {
    "text": "assume that the reason someone would do that is because they want lm's performance optimizations which are like really kind of tied for best-in class",
    "start": "2368599",
    "end": "2375480"
  },
  {
    "text": "basically um and they're they're sort of language agnostic so the problem with lvm and the reason that it's in a lot a",
    "start": "2375480",
    "end": "2383240"
  },
  {
    "text": "lot of ways an asset to go that it doesn't use LM is that it is slow it is it takes so long to run like we ran some",
    "start": "2383240",
    "end": "2389720"
  },
  {
    "text": "benchmarks of even if you turn off all the optimizations and you're like on we",
    "start": "2389720",
    "end": "2394760"
  },
  {
    "text": "don't there's no like big rock code basis today it's like the biggest ones are like thousands of lines of code there's no like 100k you know at all",
    "start": "2394760",
    "end": "2401200"
  },
  {
    "text": "like uh yet um but it was like we were seeing numbers where it's like basically",
    "start": "2401200",
    "end": "2407520"
  },
  {
    "text": "if you look at a flame graph of like what are the different parts of the compiler that are taking time it looks like all the compiler does is wait for",
    "start": "2407520",
    "end": "2414480"
  },
  {
    "text": "llvm and also linking and like that's it and like everything else all the parsing and type check all the stuff that's",
    "start": "2414480",
    "end": "2419839"
  },
  {
    "text": "unique to rock is just like like a little sliver on the graph and it's like mainly what this compiler does is wait",
    "start": "2419839",
    "end": "2425200"
  },
  {
    "text": "for LM to do its thing um which is ridiculous it's it doesn't that's that's so it's not acceptable so",
    "start": "2425200",
    "end": "2432800"
  },
  {
    "text": "what we do and what a couple of other languages do Zig does this um for example is that we say okay we will use",
    "start": "2432800",
    "end": "2439319"
  },
  {
    "text": "LM for our optimized build so if you call rock-- optimize and you're like I want you to take some extra time to make",
    "start": "2439319",
    "end": "2445319"
  },
  {
    "text": "my compiled executable fast because this is the like production build as opposed to like development build um then then",
    "start": "2445319",
    "end": "2451160"
  },
  {
    "text": "we use LM but actually we took the time to write like direct to machine code",
    "start": "2451160",
    "end": "2457000"
  },
  {
    "text": "back ends for all those other targets I mentioned so r64 Intel web assembly um",
    "start": "2457000",
    "end": "2462960"
  },
  {
    "text": "which is like really hard and timec consuming it took a really long time also I mean I didn't do that like Brandon Hans connect fulker de and um a",
    "start": "2462960",
    "end": "2470040"
  },
  {
    "text": "couple other people like Brian Carroll for the web assembly one um did that so shout out to them and thank you to them for doing that but if you look at this",
    "start": "2470040",
    "end": "2476160"
  },
  {
    "text": "code I mean it's like basically we're like okay if we if we want to do an if",
    "start": "2476160",
    "end": "2481440"
  },
  {
    "text": "that's 76 which and 76 is like the CPU instruction you know for an if right",
    "start": "2481440",
    "end": "2487920"
  },
  {
    "text": "yeah yeah you just go through the manual and it's like you know this extremely long Manual of all these like magic",
    "start": "2487920",
    "end": "2493640"
  },
  {
    "text": "numbers that the CPU understands and you're like yep we hit one of these put this in the binary you know um there's",
    "start": "2493640",
    "end": "2499599"
  },
  {
    "text": "just a whole bunch of magic numbers in in that code and so it's not nice to work with and it's understandable why",
    "start": "2499599",
    "end": "2505800"
  },
  {
    "text": "basically everybody who can will probably kind of default to llbm but at the same time it's also understandable why if you really value having a really",
    "start": "2505800",
    "end": "2512280"
  },
  {
    "text": "fast compiler you would say we're just going to use this for the optimizations because because yeah it's really",
    "start": "2512280",
    "end": "2518119"
  },
  {
    "text": "slow that's that's fascinating I didn't realize that was uh that was how the trade-off works so so",
    "start": "2518119",
    "end": "2524200"
  },
  {
    "text": "lvm slow compile slow like llvm's run slowly is llvm written in C C++ it's a",
    "start": "2524200",
    "end": "2532200"
  },
  {
    "text": "it's enormous it's definitely over a million lines of C++ I don't know how many millions or how many total lines um",
    "start": "2532200",
    "end": "2538400"
  },
  {
    "text": "and also it is a famously hard codebase to get into it's like very complicated and uh not well optimized C++ shall we",
    "start": "2538400",
    "end": "2547440"
  },
  {
    "text": "say okay any so it is a very large C++",
    "start": "2547440",
    "end": "2553520"
  },
  {
    "text": "project and we're accusing it of of of not necessarily being the most well optimized C++ but the point is you run",
    "start": "2553520",
    "end": "2559160"
  },
  {
    "text": "it on this kind of data structure that you hand it and it will produce a very fast program right of of what of like",
    "start": "2559160",
    "end": "2567200"
  },
  {
    "text": "your code so like you give it the in memory data structure it'll give you a really fast um binary that like does",
    "start": "2567200",
    "end": "2573720"
  },
  {
    "text": "that thing but the process of getting the B are of actually doing the compilation is egregiously slow which",
    "start": "2573720",
    "end": "2580800"
  },
  {
    "text": "yeah like coming from go the nicest thing about go is like I rarely have a compile time more that's more than like",
    "start": "2580800",
    "end": "2586359"
  },
  {
    "text": "a second or two yeah um and so it's like I don't even worry about like using the G run command for the most part like I",
    "start": "2586359",
    "end": "2592839"
  },
  {
    "text": "just build and run um build and run the executable for the most part I'm always running in production mode which is also kind of nice because it means I'm like",
    "start": "2592839",
    "end": "2599200"
  },
  {
    "text": "testing in production mode um the same way I would run in production",
    "start": "2599200",
    "end": "2604480"
  },
  {
    "text": "um but with LL M I cannot believe that you guys took the time to like build",
    "start": "2604480",
    "end": "2610559"
  },
  {
    "text": "your own compiler just for essentially debug mode right yeah yeah exactly so so that's",
    "start": "2610559",
    "end": "2617000"
  },
  {
    "text": "kind of what you get by default unless you use the optimized flag I mean the way that I like to think of the trade-off is that the normal development",
    "start": "2617000",
    "end": "2622520"
  },
  {
    "text": "build the build runs fast but then your compiled binary doesn't run I mean it's still like pretty fast it's just not",
    "start": "2622520",
    "end": "2628640"
  },
  {
    "text": "nearly as fast as it could be with LM your build is slow but then it produces something that runs fast so that's what",
    "start": "2628640",
    "end": "2634359"
  },
  {
    "text": "you use for your you know production builds yeah okay what are your",
    "start": "2634359",
    "end": "2640119"
  },
  {
    "text": "um what are the languages that rock most pulled inspiration from so I'd actually",
    "start": "2640119",
    "end": "2645400"
  },
  {
    "text": "say that the if I had to pick two I mean number one is obviously Elm because Elm is like Elm is a very frontend Focus",
    "start": "2645400",
    "end": "2651480"
  },
  {
    "text": "language and rock is a direct descendant of elm that's sort of applied to other use cases um so not just backend like",
    "start": "2651480",
    "end": "2657520"
  },
  {
    "text": "also command line apps and hopefully in the future like native desktop goys and want to be in like I like to call it the",
    "start": "2657520",
    "end": "2663000"
  },
  {
    "text": "long tale of domains um like I would say go is a Mor focused language in that way than rock is like go is is pretty like",
    "start": "2663000",
    "end": "2668720"
  },
  {
    "text": "servers and CIS is kind of its bread and butter which I certainly think that like that's an area where people right now",
    "start": "2668720",
    "end": "2674440"
  },
  {
    "text": "there's that's actually the main area that people use Rock in but it's been explicitly designed to try to get into",
    "start": "2674440",
    "end": "2679520"
  },
  {
    "text": "other domains and maybe not be quite as good as languages like Elm that or go that are focused on those domains but",
    "start": "2679520",
    "end": "2685760"
  },
  {
    "text": "still be like a good experience in those domains and like a reasonable Choice um yeah so as far as inspiration I would",
    "start": "2685760",
    "end": "2693119"
  },
  {
    "text": "actually put if I had to pick a number two language I would pick go and uh the things that I think that that rock takes",
    "start": "2693119",
    "end": "2699119"
  },
  {
    "text": "from go even though go is not a functional language and um certainly when it comes to like the type system they're they're quite different rocks",
    "start": "2699119",
    "end": "2704480"
  },
  {
    "text": "type system is very close to Elms and really has almost nothing in common with goes other than I guess numbers like the numbers are are very similar whereas",
    "start": "2704480",
    "end": "2711720"
  },
  {
    "text": "like Elm just has like integer and uh float and then um whereas Rock and go have like unsigned and signed eight bit",
    "start": "2711720",
    "end": "2718599"
  },
  {
    "text": "16 bit you know leata integers and so forth um but but the main ways in which",
    "start": "2718599",
    "end": "2723800"
  },
  {
    "text": "rock takes inspiration from go number one like we talked about it's like we want to build really fast and run really fast to be fair Elm also does that so",
    "start": "2723800",
    "end": "2730280"
  },
  {
    "text": "you could say that comes from Elm but it's kind of apples and oranges because elm's not a backend language um",
    "start": "2730280",
    "end": "2735520"
  },
  {
    "text": "separately though there's this tooling philosophy like go is like we are going to ship with nice versions of like all",
    "start": "2735520",
    "end": "2741000"
  },
  {
    "text": "the tools you want so you don't need to go hunt down like all these like third party things which may or may not be",
    "start": "2741000",
    "end": "2746400"
  },
  {
    "text": "compatible in different ways and are duplicating a bunch of work and maybe they get the same answers to compile like no here's a here's a really nice",
    "start": "2746400",
    "end": "2752160"
  },
  {
    "text": "tool set that just works out the box go forth and enjoy you know um and that's",
    "start": "2752160",
    "end": "2757400"
  },
  {
    "text": "something that we really want to do um so right now so for example when you get",
    "start": "2757400",
    "end": "2762480"
  },
  {
    "text": "the The Rock um compiler it also gives you like some basic package management like you can just like say here's a URL",
    "start": "2762480",
    "end": "2768000"
  },
  {
    "text": "and it'll just come and like download that for you um you can say uh it's got testing built in so built on top of git",
    "start": "2768000",
    "end": "2773960"
  },
  {
    "text": "like it'll download like a git repo is that uh it's not it's not actually it doesn't use Git it uses um it's a little",
    "start": "2773960",
    "end": "2779160"
  },
  {
    "text": "bit more General than that um have a whole digression on on package management but it's basically just like a a tarball of like where you so",
    "start": "2779160",
    "end": "2785280"
  },
  {
    "text": "actually people use GitHub releases for this um because it produces hard balls um but basically uh yeah so so there's",
    "start": "2785280",
    "end": "2792040"
  },
  {
    "text": "that uh there's uh for we want to also put an even more advanced package manager on it kind of similar to what go",
    "start": "2792040",
    "end": "2797079"
  },
  {
    "text": "ended up doing with go modules um that's like their version resolution algorithm in particular is something that I",
    "start": "2797079",
    "end": "2802760"
  },
  {
    "text": "definitely want to like directly use for our package management system um but also there's like a formatter so uh like",
    "start": "2802760",
    "end": "2809359"
  },
  {
    "text": "gof fump is like famously zero configuration possible it's like there's nothing to argue about it's just like",
    "start": "2809359",
    "end": "2814520"
  },
  {
    "text": "format your code done we want to do that same thing um Elm format works the same way but Elm format is not built into the",
    "start": "2814520",
    "end": "2821040"
  },
  {
    "text": "like in the elm Community everybody uses it but it is a separate tool we're like nope bake it in we already have that that's like rock for you say rock space",
    "start": "2821040",
    "end": "2827359"
  },
  {
    "text": "format it just formats your code no configuration done um we we have testing",
    "start": "2827359",
    "end": "2832520"
  },
  {
    "text": "baked in already so you can say rock test and it just runs all your tests um we want to integrate um hot code loading",
    "start": "2832520",
    "end": "2838599"
  },
  {
    "text": "into your uh development build so I'm working on watch right now and then we have a design in mind for after that um",
    "start": "2838599",
    "end": "2844280"
  },
  {
    "text": "hot code loading so like you just hit save and like your running web server just updates with the latest thing and",
    "start": "2844280",
    "end": "2850119"
  },
  {
    "text": "like ex that comes in it's you know it doesn't reconn database or everything um",
    "start": "2850119",
    "end": "2855800"
  },
  {
    "text": "that might be the first like language that does that that I'm aware of um at a",
    "start": "2855800",
    "end": "2861640"
  },
  {
    "text": "language level perhaps uh I mean so like rails does it um right but I know there's framework compiled language yeah",
    "start": "2861640",
    "end": "2868559"
  },
  {
    "text": "that might be the case and this is that's actually another example of like um functional programming making a hard",
    "start": "2868559",
    "end": "2873880"
  },
  {
    "text": "problem easier like the the only reason reason that we're able to do that is because basically of like everything is",
    "start": "2873880",
    "end": "2879599"
  },
  {
    "text": "represented as pure functions so it's really easy to just swap it out because there was actually we had a close call with this where um there was a",
    "start": "2879599",
    "end": "2886640"
  },
  {
    "text": "particular set of problems where I was debating introducing a language feature that had something in common there is",
    "start": "2886640",
    "end": "2893520"
  },
  {
    "text": "basically a way to store Global State at the language level and it it still would basically be represented as IO but it",
    "start": "2893520",
    "end": "2900000"
  },
  {
    "text": "was kind of a convenience and it was it seemed like it would have some nice uh use use cases um but I realized when we",
    "start": "2900000",
    "end": "2906800"
  },
  {
    "text": "started talking about hot code loading that it would just totally break that because now when you say like hey just",
    "start": "2906800",
    "end": "2912079"
  },
  {
    "text": "swap in this new compiled binary it's like yeah what about all that Global State that's in the old one like oh God",
    "start": "2912079",
    "end": "2918319"
  },
  {
    "text": "now we have to go like what track it all down and copy it over and hopefully napping yeah that sounds oh no oh no and",
    "start": "2918319",
    "end": "2924200"
  },
  {
    "text": "like most languages just have to actually deal with that if they're trying to do hot code loading but then I was like okay never mind this is not",
    "start": "2924200",
    "end": "2929799"
  },
  {
    "text": "actually an ergonomics Improvement this is like I mean maybe in some cases it would have been but it's like mostly what this does is it makes one of our",
    "start": "2929799",
    "end": "2936079"
  },
  {
    "text": "like really nice features stop working or like become like way harder and more error prone to implement and probably",
    "start": "2936079",
    "end": "2942319"
  },
  {
    "text": "would like buggier which is a typical problem with hot code loading is that like you know you get it working and it makes a really nice demo and then",
    "start": "2942319",
    "end": "2948400"
  },
  {
    "text": "someone tries to use it and they're like this thing makes so many mistakes that I stop trusting it I just go back refresh",
    "start": "2948400",
    "end": "2953760"
  },
  {
    "text": "the page yeah yeah right so it's it's got to be actually reliable for people to use it in practice and so that was",
    "start": "2953760",
    "end": "2959680"
  },
  {
    "text": "the type of thing we're like yeah never mind we're not going to do that because we don't we didn't need the feature it was just like it seemed like a nice way to solve certain things and um I mean I",
    "start": "2959680",
    "end": "2967480"
  },
  {
    "text": "guess that just kind of goes to show that it's like even as like the language designer of a of a pure functional language it's still easy sometimes to be",
    "start": "2967480",
    "end": "2973440"
  },
  {
    "text": "to like forget about like the benefits and like take them for granted and then until you have something where you're",
    "start": "2973440",
    "end": "2978760"
  },
  {
    "text": "like oh actually I need this like I need the caching or I need the hot code loading to work reliably and you're like",
    "start": "2978760",
    "end": "2984160"
  },
  {
    "text": "oh yeah never mind never mind let's let's not let's not do side effects after all let's not let's not do any that stuff yeah",
    "start": "2984160",
    "end": "2990359"
  },
  {
    "text": "yeah as the as the designer of a new purely",
    "start": "2990359",
    "end": "2996119"
  },
  {
    "text": "functional language what is your most unpopular software engineering opinion my most okay overall most",
    "start": "2996119",
    "end": "3004160"
  },
  {
    "text": "unpopular software engineering opinion I would say if you look at every popular",
    "start": "3004160",
    "end": "3011839"
  },
  {
    "text": "mainstream object-oriented language with one exception and you took the object",
    "start": "3011839",
    "end": "3017280"
  },
  {
    "text": "orientation out of that they're all going to be better languages I claim one",
    "start": "3017280",
    "end": "3022319"
  },
  {
    "text": "exception is Ruby um and most people like no you need you need this you need that you need",
    "start": "3022319",
    "end": "3028559"
  },
  {
    "text": "that I'm like I don't buy it I I think the history has shown that basically all of the good parts of O languages turn",
    "start": "3028559",
    "end": "3036160"
  },
  {
    "text": "out to not require objects and not be object-oriented specific they're just like procedural or they're functional",
    "start": "3036160",
    "end": "3042520"
  },
  {
    "text": "and like um like encapsulation is just kind of a special case of like modules or go call them packages like if you got",
    "start": "3042520",
    "end": "3049480"
  },
  {
    "text": "public and private you don't need objects for that they're just like an over complication like inheritance like is that a good idea like even even in",
    "start": "3049480",
    "end": "3055559"
  },
  {
    "text": "the objectoriented world people say prefer composition to inheritance you don't need like inheritance is the is",
    "start": "3055559",
    "end": "3061079"
  },
  {
    "text": "the only thing that's unique to oo like you don't find inheritance in procedural you don't find it in functional it's",
    "start": "3061079",
    "end": "3066640"
  },
  {
    "text": "just like this is an object-oriented thing and it's considered an an pattern even by practitioners of objectoriented",
    "start": "3066640",
    "end": "3072440"
  },
  {
    "text": "programming and it's just like if you go down the line and you try to like isolate what's the part that's unique to",
    "start": "3072440",
    "end": "3077880"
  },
  {
    "text": "O because you don't find it in procedural you don't find it in functional you just get down to a set of",
    "start": "3077880",
    "end": "3083319"
  },
  {
    "text": "anti patterns like by and large again Ruby being one exception I think if you try to take the O out out of Ruby it's",
    "start": "3083319",
    "end": "3089160"
  },
  {
    "text": "not really Ruby anymore but most languages it's like I think this turned out to be a mistake which is weird",
    "start": "3089160",
    "end": "3095319"
  },
  {
    "text": "because it's like how can you call it a mistake because all the most popular languages are objectoriented but I had I had a talk called why isn't functional",
    "start": "3095319",
    "end": "3101799"
  },
  {
    "text": "programming the norm which we briefly mentioned in in the software inscripted episode where I kind of got into the history of like why the most popular",
    "start": "3101799",
    "end": "3107839"
  },
  {
    "text": "languages are the way they are and spoiler alert it's not because they were object-oriented that's more of a like historical coincidence and um but I",
    "start": "3107839",
    "end": "3115240"
  },
  {
    "text": "think I think people get PE people tend to overvalue oo itself as opposed to",
    "start": "3115240",
    "end": "3120839"
  },
  {
    "text": "being like this oo language has a lot of nice properties and then the O gets the credit for those things even though I",
    "start": "3120839",
    "end": "3126160"
  },
  {
    "text": "don't think it should that's really interesting so why is Ruby like why is Ruby a special case",
    "start": "3126160",
    "end": "3133799"
  },
  {
    "text": "because is it just like so deeply is the idea of inheritance so deeply ingrained",
    "start": "3133799",
    "end": "3139839"
  },
  {
    "text": "in it what is it so Ruby and Objective C are unique among like top 10 or or I",
    "start": "3139839",
    "end": "3145640"
  },
  {
    "text": "don't know if Objective C still is because Apple's kind of intentionally been phasing it out in favor of Swift so it's certainly going down and at some",
    "start": "3145640",
    "end": "3151440"
  },
  {
    "text": "point it'll be out of the top 10 if it isn't already um but those two languages are unique among popular ones in that",
    "start": "3151440",
    "end": "3158000"
  },
  {
    "text": "they follow the small talk philosophy of oo so there's kind of this lineage of oo",
    "start": "3158000",
    "end": "3163559"
  },
  {
    "text": "the term object orientation was coined by Alan K in like 1970 and he came up",
    "start": "3163559",
    "end": "3168760"
  },
  {
    "text": "with this language Small Talk he designed that language um not at all used today really um I actually I know",
    "start": "3168760",
    "end": "3174799"
  },
  {
    "text": "one guy who's like a really big small talk fan he's like a diard loves Small Talk um but by and that guy actually",
    "start": "3174799",
    "end": "3180079"
  },
  {
    "text": "wrote arpec by the way like the the most famous Ruby testing Library so it's not like he's a just some you know random",
    "start": "3180079",
    "end": "3185839"
  },
  {
    "text": "person like off in his Corner doing his Small Talk um but uh but basically it's",
    "start": "3185839",
    "end": "3191520"
  },
  {
    "text": "uh it's a language that H thinks about objects as like the main the main idea",
    "start": "3191520",
    "end": "3197040"
  },
  {
    "text": "behind objects to Alan Kay is that you have these things that are conceptually",
    "start": "3197040",
    "end": "3202119"
  },
  {
    "text": "essentially like independent computers like an object is basically a computer he he uses this phrase recursive design",
    "start": "3202119",
    "end": "3209240"
  },
  {
    "text": "and he says like the essence of recursive design is that each of the parts is as powerful as the whole so",
    "start": "3209240",
    "end": "3215599"
  },
  {
    "text": "like they're all it's like computers all the way down and each object is like it's kind of like the ultimate microservices like Allan K's vision for",
    "start": "3215599",
    "end": "3223240"
  },
  {
    "text": "objects and the only way they communicate to each other so they have like a little bit of a internal State like a computer does like on its hard",
    "start": "3223240",
    "end": "3229359"
  },
  {
    "text": "drive and the only way to communicate is again like computers with message passing like instead of sending over the network it's more of a conceptual",
    "start": "3229359",
    "end": "3234880"
  },
  {
    "text": "message Mage passing because you can't really do exactly that if you want fast enough but so that's the small talk",
    "start": "3234880",
    "end": "3241160"
  },
  {
    "text": "philosophy of O and you could argue that's the original because that's the guy who coined the term came up with that subsequently there are other",
    "start": "3241160",
    "end": "3247799"
  },
  {
    "text": "object-oriented languages C++ being the first really famous one that come from basically they're descended from simula",
    "start": "3247799",
    "end": "3253799"
  },
  {
    "text": "which is this language for simulations and um Alan K was also inspired by simula so simula introduced objects but",
    "start": "3253799",
    "end": "3259319"
  },
  {
    "text": "not object orientation um C++ and like all these other objectoriented languages that are mainstream really descend from",
    "start": "3259319",
    "end": "3266079"
  },
  {
    "text": "C++ sort of like as a as a school of O which is where you see the like much more of an emphasis on inheritance and",
    "start": "3266079",
    "end": "3271400"
  },
  {
    "text": "they don't really talk about message passing at all the reason I bring that up is because Ruby as a language is",
    "start": "3271400",
    "end": "3276760"
  },
  {
    "text": "really all about the message passing and like people in Ruby will do stuff like you know hey what happens if I get a",
    "start": "3276760",
    "end": "3282280"
  },
  {
    "text": "message saying messages being kind of like method calls it's like what if I get a message that I don't recognize",
    "start": "3282280",
    "end": "3287440"
  },
  {
    "text": "then I'm G to do something totally wild and different and a lot of like actual practical Ruby like code is written on",
    "start": "3287440",
    "end": "3294520"
  },
  {
    "text": "that like meth meod missing is like a really common thing that people do in Ruby and like you could argue abuse for all horrible hacks but the point is that",
    "start": "3294520",
    "end": "3301720"
  },
  {
    "text": "if you took that out of Ruby I don't think you it would just like not really resemble Ruby anymore whereas right I think if you took inheritance out of",
    "start": "3301720",
    "end": "3307920"
  },
  {
    "text": "java people might say oh actually this is better now you know yeah I I think arguably you could you could make that",
    "start": "3307920",
    "end": "3313640"
  },
  {
    "text": "claim having that explanation about message passing makes a lot more sense now I did an episode I don't know 15",
    "start": "3313640",
    "end": "3320160"
  },
  {
    "text": "back with Travis uh Travis Walker and he was he was talking about method method missing and it was like going over my",
    "start": "3320160",
    "end": "3326200"
  },
  {
    "text": "head because not having done a lot of production Ruby uh was like wait why why",
    "start": "3326200",
    "end": "3331319"
  },
  {
    "text": "why would this be a problem this seems like a non problem I mean metaphorically it's it's like if your object is a web",
    "start": "3331319",
    "end": "3336760"
  },
  {
    "text": "server you get a request for a path and you're like I don't know what to do with this it's like having a custom 404 page",
    "start": "3336760",
    "end": "3342640"
  },
  {
    "text": "not found you know Ruby supports that at an object level yeah that's F Java does not right it Mak it makes a lot more",
    "start": "3342640",
    "end": "3349640"
  },
  {
    "text": "sense now having that framework of of message passing um okay I have I have",
    "start": "3349640",
    "end": "3355960"
  },
  {
    "text": "one more question well two more questions I want to get to really quick um",
    "start": "3355960",
    "end": "3362880"
  },
  {
    "text": "as as one of the most dieh hard functional programming Advocates that I know um are there any cases where you",
    "start": "3363079",
    "end": "3369920"
  },
  {
    "text": "would not choose a functional language over oh yeah any other language and what are those cases absolutely I mean well",
    "start": "3369920",
    "end": "3377079"
  },
  {
    "text": "the first one that comes to mind is like anytime I'm doing anything really lowlevel I mean like the CPU is like",
    "start": "3377079",
    "end": "3382480"
  },
  {
    "text": "extremely imperative it's like the nothing is more imperative than the CPU if like even in like C if you do",
    "start": "3382480",
    "end": "3389760"
  },
  {
    "text": "addition it's still like you know I'm going to give you my two things that I want to add and it'll return to me no in",
    "start": "3389760",
    "end": "3395359"
  },
  {
    "text": "the CPU you're like take the contents of this register add it to that register it's going to mutate a third register",
    "start": "3395359",
    "end": "3401079"
  },
  {
    "text": "it's like it's always mutating stuff there it's never not mutating things um so if you're doing low-l stuff like I I",
    "start": "3401079",
    "end": "3409039"
  },
  {
    "text": "think functional doesn't really make sense in that world it's like you're you're kind of swimming Upstream for no",
    "start": "3409039",
    "end": "3414480"
  },
  {
    "text": "reason um I can still try to write things like using pure functions as often as possible but um but trying to like go",
    "start": "3414480",
    "end": "3421200"
  },
  {
    "text": "all the way to tr try to get the benefits of like I don't think it's it makes sense um similarly if I have",
    "start": "3421200",
    "end": "3427520"
  },
  {
    "text": "something where like I'm just writing a really quick script and I'm not thinking about like long-term maintainability or",
    "start": "3427520",
    "end": "3433240"
  },
  {
    "text": "caching it's like never going to get that complicated and like the main thing I'm going to do is just like a bunch of IO operations in a row it's like do I",
    "start": "3433240",
    "end": "3440400"
  },
  {
    "text": "even need a concept of like async or whatever like like a A bash script or something it's like not really I I don't",
    "start": "3440400",
    "end": "3445760"
  },
  {
    "text": "I don't need that I'm just like just here's the stuff I want to do just do these things in this order I don't care which ones are IO and which ones are not",
    "start": "3445760",
    "end": "3451440"
  },
  {
    "text": "I don't need a separation of that that's not going to benefit me so I'm like yeah I'm just happy to to reach for something imperative um so yeah I mean I would say",
    "start": "3451440",
    "end": "3459440"
  },
  {
    "text": "that to me the thing that's appealing to me about functional programming is that the types of problems I've run into at",
    "start": "3459440",
    "end": "3465760"
  },
  {
    "text": "work as a career in web development more often than not I felt that functional programming would be the best approach",
    "start": "3465760",
    "end": "3471599"
  },
  {
    "text": "for that problem but I mean like the rock compiler is not written at all in a function functional style because we want to be really close to the metal we",
    "start": "3471599",
    "end": "3477400"
  },
  {
    "text": "want to be as fast as possible and in order to do that we want to use a language namely rust in our case we'd",
    "start": "3477400",
    "end": "3482520"
  },
  {
    "text": "also consider like Zig or or C or something like that um we want that level of control over memory where like",
    "start": "3482520",
    "end": "3488839"
  },
  {
    "text": "we're not thinking about like you know how do I actually we do have some caching in there so actually we have to",
    "start": "3488839",
    "end": "3494240"
  },
  {
    "text": "be kind of careful with that um but we're not thinking about like uh you",
    "start": "3494240",
    "end": "3499599"
  },
  {
    "text": "know how can we make the best ergonomic experience for ourselves obviously since we're like literally writing out the bites to the machine code we're just",
    "start": "3499599",
    "end": "3506119"
  },
  {
    "text": "thinking about like how can we make the maximum possible use of this Hardware which is not something that makes sense",
    "start": "3506119",
    "end": "3511480"
  },
  {
    "text": "for a lot of web companies to be honest it's it's more like you know your bottleneck is like usually the database or or like you know uh just whatever",
    "start": "3511480",
    "end": "3518839"
  },
  {
    "text": "language you chose and how fast it runs on your servers um but yeah like like we're not optimizing like you know CPU",
    "start": "3518839",
    "end": "3525599"
  },
  {
    "text": "instructions in anyone's like web backends unless you I guess once you get to some scale maybe you are but um very",
    "start": "3525599",
    "end": "3531880"
  },
  {
    "text": "very rare very Niche skill set to to do that um yeah I mean I I would say for me",
    "start": "3531880",
    "end": "3537000"
  },
  {
    "text": "it absolutely depends on the problem and it's it's really just the thing that excites me about it is that I've run into in my career a bunch of different",
    "start": "3537000",
    "end": "3542880"
  },
  {
    "text": "use cases where I I I want that that purely functional experience because it has these really nice",
    "start": "3542880",
    "end": "3549119"
  },
  {
    "text": "characteristics it sounds like in Broad Strokes it's like okay if I want to get super close to the hardware I might",
    "start": "3549119",
    "end": "3555280"
  },
  {
    "text": "avoid functional do some more imperative stuff and it's like the extremes so like really close to Hardware or like super",
    "start": "3555280",
    "end": "3561799"
  },
  {
    "text": "high level just like a quick script that's going to do a bunch of IO for me like maybe automated task yeah then then",
    "start": "3561799",
    "end": "3568960"
  },
  {
    "text": "I'll uh then I also don't necessarily care um I think that's a really good answer last question is um how do you",
    "start": "3568960",
    "end": "3577400"
  },
  {
    "text": "see the rock project maintaining itself into the future is there a business or monetization plan",
    "start": "3577400",
    "end": "3582960"
  },
  {
    "text": "there uh no I mean it's all donation funded um so right now it's I mean it's like mostly volunteers there's a couple",
    "start": "3582960",
    "end": "3588440"
  },
  {
    "text": "of uh generous corporate sponsors who have been paying some of us to like work on it you know as part of our jobs um I",
    "start": "3588440",
    "end": "3594000"
  },
  {
    "text": "don't think anybody is like getting paid full-time to work on Rock um but we actually want to change that with donations so we're currently trying to",
    "start": "3594000",
    "end": "3600760"
  },
  {
    "text": "get up to like $4,000 a month and worth of donations we're not not there yet but",
    "start": "3600760",
    "end": "3605839"
  },
  {
    "text": "we're like on the way we've had some like nice corporate donors and a lot of individual donors um and there's this",
    "start": "3605839",
    "end": "3611680"
  },
  {
    "text": "there's this one guy in Belgium who's been doing amazing contributions we really want to try and get him a full-time salary um but that would be",
    "start": "3611680",
    "end": "3617960"
  },
  {
    "text": "the first one uh so I know that other projects have done this like Zig is entirely funded through donations we",
    "start": "3617960",
    "end": "3623240"
  },
  {
    "text": "also have a nonprofit Foundation that all the donations go into so it's tax deductible if that matters to you or",
    "start": "3623240",
    "end": "3628640"
  },
  {
    "text": "your your company um but uh yeah I mean the plan is really just to kind of uh",
    "start": "3628640",
    "end": "3634200"
  },
  {
    "text": "just focus on making something that's really nice for people and not try to turn into a business um I I mean there's",
    "start": "3634200",
    "end": "3641440"
  },
  {
    "text": "there's some organizations that have tried to do that there's some companies that have tried to do that um I don't think it's had a really good success",
    "start": "3641440",
    "end": "3648200"
  },
  {
    "text": "record uh in this day and age the most successful one I can think of is kind of like cotlin where it's basically like",
    "start": "3648200",
    "end": "3653839"
  },
  {
    "text": "jet brains makes an IDE and then they made a language that's a really good fit for their IDE but I don't that's not",
    "start": "3653839",
    "end": "3660920"
  },
  {
    "text": "really you know a path that I want to go down so yeah no that's awesome I hope I hope you get a ton of uh traffic and",
    "start": "3660920",
    "end": "3668440"
  },
  {
    "text": "donations from this podcast we're small the moment we're growing uh yeah where",
    "start": "3668440",
    "end": "3674119"
  },
  {
    "text": "do you want people to go find your stuff where can they find rock where can they find your podcast that kind of stuff yeah I mean honestly uh so I'm on",
    "start": "3674119",
    "end": "3680559"
  },
  {
    "text": "Twitter at RT Feldman so that's Richard and then my middle name starts with t and then Feld um also uh you can find rock at r- lang.",
    "start": "3680559",
    "end": "3689520"
  },
  {
    "text": "org um and honestly if you just put Richard Felman into YouTube I have a bunch of talks on a bunch of different topics so you can find that and then the",
    "start": "3689520",
    "end": "3696359"
  },
  {
    "text": "podcast that I host is called software unscripted perfect yeah you can go find me on software unscripted as well you",
    "start": "3696359",
    "end": "3703280"
  },
  {
    "text": "that episode we talked about go and a bunch of other stuff uh yeah thanks so",
    "start": "3703280",
    "end": "3708520"
  },
  {
    "text": "much for coming on Richard this is uh this is great yeah thanks for having me it was fun yeah talk to you later man",
    "start": "3708520",
    "end": "3714000"
  },
  {
    "text": "all right [Music]",
    "start": "3714000",
    "end": "3724929"
  }
]