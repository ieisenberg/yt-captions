[
  {
    "start": "0",
    "end": "54000"
  },
  {
    "text": "people have probably called them like region allocators like there's lots of different names for arena sounds so",
    "start": "80",
    "end": "5319"
  },
  {
    "text": "badass though I I can see why it's like the term is starting to stick I have a more flexible Json like format that that",
    "start": "5319",
    "end": "12400"
  },
  {
    "text": "I designed that I have a parser for but it's but Jon's a subset of that wait you made your",
    "start": "12400",
    "end": "18800"
  },
  {
    "text": "own I need a sound bite of you saying something like malok is too high level",
    "start": "18800",
    "end": "24119"
  },
  {
    "text": "for me [Music]",
    "start": "24119",
    "end": "31240"
  },
  {
    "text": "welcome back to back and Advan today I'm joined by Ryan H I've only seen your last name typed is it flurry yeah that's",
    "start": "31240",
    "end": "39760"
  },
  {
    "text": "perfect yep Ryan flurry you're joining us uh you're a game developer currently",
    "start": "39760",
    "end": "45320"
  },
  {
    "text": "working at I work at epic games um I work on sort of the sub team of epic games that used to be rad game tools",
    "start": "45320",
    "end": "51840"
  },
  {
    "text": "before they were purchased by epic I came into programming because I'm I was interested in making games and",
    "start": "51840",
    "end": "58039"
  },
  {
    "start": "54000",
    "end": "169000"
  },
  {
    "text": "throughout my time programming games kind of got more and more mad at tools that I was using so I started with engines a lot of people start bottom up",
    "start": "58039",
    "end": "65040"
  },
  {
    "text": "they kind of are like they just love computers they're writing assembly on day one or something like that I mean you see more of that like 30 years ago",
    "start": "65040",
    "end": "71320"
  },
  {
    "text": "but I was going to say I don't see a lot of that anymore but I'm sure it happens yeah but you you know you can you can",
    "start": "71320",
    "end": "77680"
  },
  {
    "text": "think of a conversation with a senior where it's like oh I started reading the 6502 manual or something like that and",
    "start": "77680",
    "end": "83840"
  },
  {
    "text": "that's probably not even right I'm not familiar with that world so a lot of people are bottom up I'm more top down I",
    "start": "83840",
    "end": "89920"
  },
  {
    "text": "started with engines stripped them away when I got fed up with them and eventually I got down to the point of",
    "start": "89920",
    "end": "95479"
  },
  {
    "text": "like I got really into working on more tooling and engine stuff so I started going a little bit lower um and now I",
    "start": "95479",
    "end": "102840"
  },
  {
    "text": "work on the rad debugger project which is I mean just developer tooling it's it's um just a native graphical debugger",
    "start": "102840",
    "end": "110439"
  },
  {
    "text": "uh for user space code that's what I do I work on primarily tooling I still have my pet game projects but that's not what",
    "start": "110439",
    "end": "116439"
  },
  {
    "text": "I do like for the most part awesome we met on Twitter um you slid into my",
    "start": "116439",
    "end": "122680"
  },
  {
    "text": "replies when I was talking with TJ about his memory management course and you brought up Arenas which is great because",
    "start": "122680",
    "end": "129520"
  },
  {
    "text": "frankly so basically TJ and I collaborated on this course he wrote it I helped produce it it's on the boot Dev",
    "start": "129520",
    "end": "135440"
  },
  {
    "text": "side it's you know learn memory management and c and you build your own garbage collector and we talk about",
    "start": "135440",
    "end": "140640"
  },
  {
    "text": "memory management I mean I don't want to make it sound like it's not modern because I mean it is new it is up toate",
    "start": "140640",
    "end": "146680"
  },
  {
    "text": "but we talk about memory management from the perspective of hey let's build a rough count garbage collector let's",
    "start": "146680",
    "end": "153040"
  },
  {
    "text": "build a mark and sweep garbage collector let's show you how this stuff works in memory and you were like you should talk",
    "start": "153040",
    "end": "158519"
  },
  {
    "text": "about Arenas and I was like I don't know about Arenas so I brought you on to talk about Arenas awesome well yeah thank you",
    "start": "158519",
    "end": "165040"
  },
  {
    "text": "so much for having me I'm glad to be here yeah I'm super excited for this so to give everyone just a really quick",
    "start": "165040",
    "end": "172959"
  },
  {
    "start": "169000",
    "end": "411000"
  },
  {
    "text": "understanding of Arenas can you do a quick compare and contrast from like",
    "start": "172959",
    "end": "179319"
  },
  {
    "text": "arenas manual memory management and maybe like the traditional way we think about garbage collectors just so everybody's",
    "start": "179319",
    "end": "186040"
  },
  {
    "text": "on the same page I think the first thing I would say is that arena is a very overloaded term so a lot of people mean",
    "start": "186040",
    "end": "192879"
  },
  {
    "text": "a lot of different things by it I my personal like my usage of the term comes from sort of more the it's some category",
    "start": "192879",
    "end": "200440"
  },
  {
    "text": "some subset of game developers use it in a very particular way other people use it in a different way um other people",
    "start": "200440",
    "end": "205840"
  },
  {
    "text": "use other words for what I mean with that caveat in place the way to think about Arena is is that they are they're",
    "start": "205840",
    "end": "212159"
  },
  {
    "text": "just like the stack basically so when you first learn Z programming you learn about like pushing variables onto the",
    "start": "212159",
    "end": "217920"
  },
  {
    "text": "stack right you learn if I say int X inside of the body of a function that's",
    "start": "217920",
    "end": "223239"
  },
  {
    "text": "going to be allocated I mean these days obviously it's going to be allocated into a register and and you know all",
    "start": "223239",
    "end": "228760"
  },
  {
    "text": "these things but you're thinking conceptually of the stack and how if you call into a function pushes onto the stack once that function exits you pop",
    "start": "228760",
    "end": "234840"
  },
  {
    "text": "back out of that function so the arena is just taking that stack like allocation pattern and applying it to a",
    "start": "234840",
    "end": "241599"
  },
  {
    "text": "larger category of lifetimes than your call call stack at any one point in time",
    "start": "241599",
    "end": "246799"
  },
  {
    "text": "the basic principle behind this is that the stack sort of organizes lifetimes together right so if you push a bunch of",
    "start": "246799",
    "end": "252439"
  },
  {
    "text": "things onto one in in the body of one function once that function exits all of those things are jettisoned completely",
    "start": "252439",
    "end": "259479"
  },
  {
    "text": "uh you're not supposed to for example return pointers to things that were in that function's uh local variables that",
    "start": "259479",
    "end": "265440"
  },
  {
    "text": "end of the function sort of marks the end of an overarching lifetime for each one of those variables you could almost",
    "start": "265440",
    "end": "270919"
  },
  {
    "text": "think of that as some like Proto version of a garbage collector if you wanted to",
    "start": "270919",
    "end": "275960"
  },
  {
    "text": "stretch the definition a lot more and I think that people sort of inherently feel that because when they're working",
    "start": "275960",
    "end": "281160"
  },
  {
    "text": "with things on the stack and C it's generally not super difficult at at the beginning when you're first like",
    "start": "281160",
    "end": "287199"
  },
  {
    "text": "learning okay put a local variable onto the stack have an array have a counter through the array these kinds of things",
    "start": "287199",
    "end": "292360"
  },
  {
    "text": "all in local variables it's not complicated you don't have to clean anything up you don't really have to do anything you just have to remember the",
    "start": "292360",
    "end": "298600"
  },
  {
    "text": "simple rule to not like return pointers to anything to Outer Scopes then the thing that comes in is sort of the",
    "start": "298600",
    "end": "304639"
  },
  {
    "text": "traditional C style man manual memory management which is like maloc andf free generally is what people will be taught",
    "start": "304639",
    "end": "311160"
  },
  {
    "text": "which is like arbitrary Heap allocator every single Dynamic allocation is one new lifetime that you've added into the",
    "start": "311160",
    "end": "317160"
  },
  {
    "text": "mix and that lifetime if you don't want it to persist forever needs to be terminated at some point at at the",
    "start": "317160",
    "end": "323280"
  },
  {
    "text": "appropriate time and that's when you sort of return it to the global malok allocator Arenas are just saying hey",
    "start": "323280",
    "end": "329280"
  },
  {
    "text": "this like stack style allocation scheme is pretty useful for functions uh we can't use it for everything because",
    "start": "329280",
    "end": "335560"
  },
  {
    "text": "often times the lifetimes of things we want to allocate conflict with our functions um like if we want to allocate",
    "start": "335560",
    "end": "341680"
  },
  {
    "text": "something deep in a call stack the second we exit that frame you know that that thing will be freed we won't be",
    "start": "341680",
    "end": "347360"
  },
  {
    "text": "able to allocate long long lasting things that way can I ask a question about that really quick so yes it's",
    "start": "347360",
    "end": "353160"
  },
  {
    "text": "really interesting to me that before even going to Malik and free which for anyone that hasn't taken the memory",
    "start": "353160",
    "end": "359360"
  },
  {
    "text": "manag course by the way this conversation is going to make a lot more sense after you've taken that course so",
    "start": "359360",
    "end": "364560"
  },
  {
    "text": "just just so you know I'll try to like introduce a lot of these Concepts but if you're totally lost you you might want",
    "start": "364560",
    "end": "370240"
  },
  {
    "text": "to check that out the stack is where local variables uh within a function",
    "start": "370240",
    "end": "376319"
  },
  {
    "text": "live during the functions execution and like you said you you create a variable local to a function xal 5 when the",
    "start": "376319",
    "end": "383639"
  },
  {
    "text": "function returns that variable's memory is automatically cleaned up by the stack pointer you don't have to worry about",
    "start": "383639",
    "end": "389759"
  },
  {
    "text": "that so when we talk about man manual man memory management we're usually not talking about that we're talking about",
    "start": "389759",
    "end": "394800"
  },
  {
    "text": "the malakin free portion that you talked about afterwards as opposed to stack that's Heap allocations and if I'm",
    "start": "394800",
    "end": "402520"
  },
  {
    "text": "understanding what you're saying correctly that's basically when you need the memory to span outside of the lifetime of the function and the last",
    "start": "402520",
    "end": "410000"
  },
  {
    "text": "bit that you said there that was really interesting to me was like okay Arenas are kind of like the stack pointer when",
    "start": "410000",
    "end": "416199"
  },
  {
    "start": "411000",
    "end": "1011000"
  },
  {
    "text": "it comes to functions you're like I'm imagining the fun the the scope of the function as essentially a little mini",
    "start": "416199",
    "end": "422160"
  },
  {
    "text": "Arena and it is weird to me that functions in production code or I guess",
    "start": "422160",
    "end": "427360"
  },
  {
    "text": "in any code doesn't matter whether it's running production or not are kind of ways to organize our code like they're",
    "start": "427360",
    "end": "432560"
  },
  {
    "text": "almost organ organizational tools more than anything else they're not memory management tools typically I don't",
    "start": "432560",
    "end": "439000"
  },
  {
    "text": "usually think of a function as a memory management tool and if what I'm hearing you say correctly or or maybe this is",
    "start": "439000",
    "end": "445919"
  },
  {
    "text": "just what I'm making up it's like we could have Arenas that aren't necessarily tightly coupled to the scope",
    "start": "445919",
    "end": "451759"
  },
  {
    "text": "of a function but they work in a similar way to automatically clean up memory is that kind of what an arena is yeah I",
    "start": "451759",
    "end": "458840"
  },
  {
    "text": "would say that that's like a pretty good like angle on it so one of the things you'll see people recommend when people are doing C programming is like to avoid",
    "start": "458840",
    "end": "466759"
  },
  {
    "text": "this problem of functions implicitly calling malok for example unbeknownst to the collar of that function to sort of",
    "start": "466759",
    "end": "473280"
  },
  {
    "text": "combat that problem one thing that people will often suggest is like the collar should allocate and then pass the buffer to the to the function that",
    "start": "473280",
    "end": "479599"
  },
  {
    "text": "calling and then it's the function implementation's job to fill out that buffer but it's not supposed to allocate",
    "start": "479599",
    "end": "485280"
  },
  {
    "text": "anything it's supposed to use whatever the caller pass to it that is like not a bad idea in fact in one sense it's what",
    "start": "485280",
    "end": "492960"
  },
  {
    "text": "people do with Arenas but it's a little bit hairer than that because the function that you call May it may want",
    "start": "492960",
    "end": "499520"
  },
  {
    "text": "to be closely involved with how that structure is allocated so if it's if it's just a single buffer and you know",
    "start": "499520",
    "end": "504560"
  },
  {
    "text": "how big it needs to be and things like that then it's not that big of a deal like the Coller can allocate the buffer",
    "start": "504560",
    "end": "509919"
  },
  {
    "text": "passed it to the function the function can fill it out but let's say that it's not a buffer and it's like some variable",
    "start": "509919",
    "end": "515760"
  },
  {
    "text": "number of nodes because you're parsing a stream of text or something like that like you you've been you have this big stream of Json you're parsing it you but",
    "start": "515760",
    "end": "522399"
  },
  {
    "text": "has to be relatively generic parse so you have to build out the whole the whole tree structure the parser is the one who figures out how many nodes it",
    "start": "522399",
    "end": "529360"
  },
  {
    "text": "needs to allocate it's not the caller who's going to know that I mean you could have like okay I'll I'll fail once",
    "start": "529360",
    "end": "534600"
  },
  {
    "text": "you get past this certain point or something like that but it's not an arbitrarily good solution it it breaks down fairly quickly is I guess what I'm",
    "start": "534600",
    "end": "540720"
  },
  {
    "text": "saying with an arena it's kind of like saying the thing that the caller passes in directly to the function is a handle",
    "start": "540720",
    "end": "548160"
  },
  {
    "text": "to here is a here is a backing store for all of the allocations I would like you to do but I control the lifetime of that",
    "start": "548160",
    "end": "554839"
  },
  {
    "text": "so I'm saying okay I have a big block of text parse a Json tree out of it put every single one of the allocations just",
    "start": "554839",
    "end": "560600"
  },
  {
    "text": "push it onto this Arena and I'll and the user tells that function where uh which Arena to put it on and so now you kind",
    "start": "560600",
    "end": "567399"
  },
  {
    "text": "of get the best of both worlds because the arena as I kind of use them it can either have a large reservation of",
    "start": "567399",
    "end": "573519"
  },
  {
    "text": "address Bas and the ability to grow or it can grow through chaining either way",
    "start": "573519",
    "end": "579519"
  },
  {
    "text": "it's not a fixed upper limit the stack for example one problem is that you run out of space on the stack right stack",
    "start": "579519",
    "end": "584959"
  },
  {
    "text": "Overflow everyone knows stack Overflow an arena you because it's not defined in like sort of the way that the operating",
    "start": "584959",
    "end": "591040"
  },
  {
    "text": "system will set up your thread stack or something like that instead you can kind of control it's like okay if I'm if I'm",
    "start": "591040",
    "end": "596360"
  },
  {
    "text": "running out of space what am I going to do I could get into virtual memory stuff uh because that's one very useful way",
    "start": "596360",
    "end": "601760"
  },
  {
    "text": "you can actually do it but but you can also for example allocate a new block and start pushing onto that block the blocks are discontiguous but you can",
    "start": "601760",
    "end": "608320"
  },
  {
    "text": "still keep pushing onto the arena so it's like the block the memory exists in different address spaces but it's all",
    "start": "608320",
    "end": "614640"
  },
  {
    "text": "kind of one Arena virtually yes yeah you can think of it as several Arenas chained together if you want to think it",
    "start": "614640",
    "end": "621160"
  },
  {
    "text": "depends on how you slice it like is one Arena ONE contiguous block I don't know but generally I refer to the arena as",
    "start": "621160",
    "end": "626279"
  },
  {
    "text": "the entire chain of blocks point being that Json parsing problem you pass at the arena and now the parser gets to",
    "start": "626279",
    "end": "633399"
  },
  {
    "text": "decide how much it allocates and when it allocates you don't need an initial Loop which scans and needs to determine how",
    "start": "633399",
    "end": "640079"
  },
  {
    "text": "many things to allocate or something like that instead the parser can actually just allocate whenever it wants but it's only pushing onto a buffer that",
    "start": "640079",
    "end": "646200"
  },
  {
    "text": "the caller has has prepared for it effectively so does the in that scenario does the caller have to know pretty",
    "start": "646200",
    "end": "654920"
  },
  {
    "text": "intimately how the called function is is going to use the memory like it has to",
    "start": "654920",
    "end": "660839"
  },
  {
    "text": "pre-allocate the I mean you said that the the call E so so the function being",
    "start": "660839",
    "end": "666440"
  },
  {
    "text": "called could expand the arena if need be I guess what",
    "start": "666440",
    "end": "671519"
  },
  {
    "text": "I'm asking is how much work does the the function that's passing the arena into the other function MH how much work does",
    "start": "671519",
    "end": "678639"
  },
  {
    "text": "it have to do to know that it's passing the right amount of Arena yeah so um basically none like",
    "start": "678639",
    "end": "685440"
  },
  {
    "text": "that's uh that's kind of the magic part about it is that the caller prepares the arena which is just this very simple",
    "start": "685440",
    "end": "690920"
  },
  {
    "text": "alloc so it could be like arena. new and that's basically all it needs to do yeah pretty much that's how I do it literally",
    "start": "690920",
    "end": "696279"
  },
  {
    "text": "I mean the caller can specify whoever is creating the arena has the opportunity to specify certain constraints on the",
    "start": "696279",
    "end": "701880"
  },
  {
    "text": "arena like at the very first line of your program you could say all of my memory is going to be in this single",
    "start": "701880",
    "end": "706920"
  },
  {
    "text": "Arena and it's going to be I will disallow chain growth like I won't allow this Arena to grow I will allocate 8 GB",
    "start": "706920",
    "end": "713839"
  },
  {
    "text": "up front and it has to fit in that if not abort like not going to work similarly that that code path could also",
    "start": "713839",
    "end": "720720"
  },
  {
    "text": "just say I'm creating an arena it's going to start with a 64 megabyte block if I run out of space on that 64 megab",
    "start": "720720",
    "end": "726800"
  },
  {
    "text": "loock block I'll chain on new blocks to it or another growth strategy would be",
    "start": "726800",
    "end": "732519"
  },
  {
    "text": "I'm going to reserve uh 256 gigabytes of address space but that's not a physical",
    "start": "732519",
    "end": "737920"
  },
  {
    "text": "commit of memory that's saying here is this add I'm reserving this address space so nobody else can refer to these",
    "start": "737920",
    "end": "743600"
  },
  {
    "text": "addresses legally except for me but there's no physical memory backing those pages yet and then when I'm pushing onto",
    "start": "743600",
    "end": "750880"
  },
  {
    "text": "the arena I run out of the space I've committed so far so the part of the Arena that has actual physical storage",
    "start": "750880",
    "end": "756040"
  },
  {
    "text": "when you're about to end that region of the Arena that's when you can uh call back down to the operating system and",
    "start": "756040",
    "end": "761199"
  },
  {
    "text": "say okay please guarantee physical storage will be there for this uh new",
    "start": "761199",
    "end": "767279"
  },
  {
    "text": "range of addresses within this large res block of reserved address space so the caller gets to decide things like that",
    "start": "767279",
    "end": "772440"
  },
  {
    "text": "so very high level things about the way that the arena is able to grow but then when you actually pass it down into the",
    "start": "772440",
    "end": "779279"
  },
  {
    "text": "Json parsing helper function that function can just push and that's all really that it needs to do now if you",
    "start": "779279",
    "end": "786040"
  },
  {
    "text": "could imagine a more complicated function would actually be wanting to you know temporarily free things it",
    "start": "786040",
    "end": "791880"
  },
  {
    "text": "could still do all those things on the arena it just only needs to push when it actually knows it needs more actual",
    "start": "791880",
    "end": "797199"
  },
  {
    "text": "space from the arena if that makes sense um we can we can unpack that a little bit cuz that that that went over a lot of details so okay so in the example",
    "start": "797199",
    "end": "804839"
  },
  {
    "text": "that we're using here it sounds like we have let's just say a kind of a main function and it's the caller and it's",
    "start": "804839",
    "end": "811360"
  },
  {
    "text": "going to allocate an arena let's just pretend that we have like an arena. new method that returns like an arena object",
    "start": "811360",
    "end": "818959"
  },
  {
    "text": "I don't know if that's quite the right word but let's just pretend that it is uh for a minute and we've got like this",
    "start": "818959",
    "end": "824320"
  },
  {
    "text": "parse Jon function as and as input maybe it takes the arena itself and a stream",
    "start": "824320",
    "end": "830639"
  },
  {
    "text": "of data and its job is to like read from that stream of data and allocate kind of",
    "start": "830639",
    "end": "837120"
  },
  {
    "text": "structured Json into the arena so it's reading from the stream allocating into the arena and the",
    "start": "837120",
    "end": "843360"
  },
  {
    "text": "whole point is that like the caller main is the one that created the arena but now this function that needs to do",
    "start": "843360",
    "end": "849000"
  },
  {
    "text": "Dynamic allocations has a place to do them maybe we'll get to this later in theory like",
    "start": "849000",
    "end": "855079"
  },
  {
    "text": "later in main we could do some sort of like Al arena. cleanup or arena. free is that kind of what we're talking about",
    "start": "855079",
    "end": "861920"
  },
  {
    "text": "here that's basically how I would describe it and and it's not structured in exactly the way that I use it but it doesn't matter point is you have when",
    "start": "861920",
    "end": "868399"
  },
  {
    "text": "you begin Arena you're sort of establishing a lifetime like formally as the structure uh that you're using and",
    "start": "868399",
    "end": "874639"
  },
  {
    "text": "then when you pass it to the Json parsing function yeah exactly you're saying if you do a dynamic allocation I",
    "start": "874639",
    "end": "880000"
  },
  {
    "text": "mean this is assuming a Json function that's like built in this style kind of thing but yeah you're basically saying to the Json parser push all of your",
    "start": "880000",
    "end": "887079"
  },
  {
    "text": "results onto this Arena so now I know as the caller every amount of memory that you've allocated that hasn't been",
    "start": "887079",
    "end": "893800"
  },
  {
    "text": "cleaned up by the time you've exited is now sort of stored on that Arena as a lifetime this is related to other um",
    "start": "893800",
    "end": "900560"
  },
  {
    "text": "many new languages have explicit allocator passing so they'll say something like pass me an allocator and and I will use that to allocate",
    "start": "900560",
    "end": "907000"
  },
  {
    "text": "explicitly like Zig does this for example the difference with with the arena is that it's simpler than that it's not doing a generic allocator",
    "start": "907000",
    "end": "913519"
  },
  {
    "text": "interface so the interface of the arena is push and pop it's not maloc and free",
    "start": "913519",
    "end": "919040"
  },
  {
    "text": "where you can um have arbitrary overlapping lifetimes inside of the Arena by default and they can all",
    "start": "919040",
    "end": "924560"
  },
  {
    "text": "intermix like you could malok a malok b Malo C and then Ma and then free free a free B free C that's not a support at",
    "start": "924560",
    "end": "931720"
  },
  {
    "text": "the base level of using the arena you can only push new bites off the end and then pop them off the back so it's very",
    "start": "931720",
    "end": "938519"
  },
  {
    "text": "simple it's much simpler than and do you usually pop like that or do you usually just free the whole Arena at once it",
    "start": "938519",
    "end": "946120"
  },
  {
    "text": "kind of depends like I said arena is sort of like it's this handle that refers to a lifetime of memory it can be",
    "start": "946120",
    "end": "953440"
  },
  {
    "text": "applied to a lot of different cases so one example is like if you're running a game you might have a per frame Arena so",
    "start": "953440",
    "end": "959040"
  },
  {
    "text": "every frame you clear the arena meaning you reset the allocation pointer back to you know the zero position or whatever",
    "start": "959040",
    "end": "965480"
  },
  {
    "text": "the minimum is and then you push and push and push you put like strings on there you can put all kinds of random",
    "start": "965480",
    "end": "970519"
  },
  {
    "text": "Dynamic stuff that you're allocating on there and then at the beginning of the next frame it's sort of garbage collected and the the pointers reset",
    "start": "970519",
    "end": "976360"
  },
  {
    "text": "again so you could have that as one overarching lifetime another pattern that comes up would be like if you're",
    "start": "976360",
    "end": "981480"
  },
  {
    "text": "running a web server or something like that you could have uh like a per request Arena you know some request",
    "start": "981480",
    "end": "987120"
  },
  {
    "text": "comes in you're about to push a bunch of prepare bunch of results I don't write web servers but you know I know vaguely how they work but it's but you know you",
    "start": "987120",
    "end": "994199"
  },
  {
    "text": "have a bunch of uh you have some inputs to the request you have some work to do per that request you have a bunch of",
    "start": "994199",
    "end": "999480"
  },
  {
    "text": "results to respond with and uh that Arena could begin at the beginning of the request you push all the results",
    "start": "999480",
    "end": "1005240"
  },
  {
    "text": "onto it in linear fashion so it's just like the stack once that data has been presumably like sent over the network or",
    "start": "1005240",
    "end": "1010680"
  },
  {
    "text": "something like that then you can clear that Arena that memory is available for use again now there's a different pattern you could do which does actually",
    "start": "1010680",
    "end": "1016759"
  },
  {
    "start": "1011000",
    "end": "1660000"
  },
  {
    "text": "work hand inand with like sort of the the call stack kind of model so with the traditional C model um like we talked",
    "start": "1016759",
    "end": "1024400"
  },
  {
    "text": "about before there's a fixed block of memory called the stack for every thread that that's in your program and when you",
    "start": "1024400",
    "end": "1031280"
  },
  {
    "text": "allocate some variables and you know fudging the register stuff away from you know many of them are being allocated in",
    "start": "1031280",
    "end": "1038079"
  },
  {
    "text": "registers but once you run out of registers then they'll be pushed onto the stack or in debug builds they'll always be on the stack whatever point",
    "start": "1038079",
    "end": "1043360"
  },
  {
    "text": "being you have stuff uh on the stack memory that's being used for these variables it's less of this like",
    "start": "1043360",
    "end": "1049160"
  },
  {
    "text": "allocate a bunch of stuff and then reset everything it's more like several granular versions of that right with",
    "start": "1049160",
    "end": "1055080"
  },
  {
    "text": "with functions because it's like okay allocate a bunch of local variables call into a function allocate a bunch of local variables pop back to the point",
    "start": "1055080",
    "end": "1060919"
  },
  {
    "text": "you were when you began that second function and and so on and so forth so you can use Arenas like that too and",
    "start": "1060919",
    "end": "1066600"
  },
  {
    "text": "that's how they come in handy with a different case of using Arenas so one example would be if I am in a in a",
    "start": "1066600",
    "end": "1071880"
  },
  {
    "text": "function where I would like to put things onto the lifetime of my current function scope I can't use the stack",
    "start": "1071880",
    "end": "1078559"
  },
  {
    "text": "right if if I've written all this code about Arenas like I have a Json parsing helper library inside my code base that",
    "start": "1078559",
    "end": "1084280"
  },
  {
    "text": "code is all written to take an arena I can't pass the stack as an arena like I can't really do that uh because that's",
    "start": "1084280",
    "end": "1089919"
  },
  {
    "text": "automatically being managed by the generated instructions by the compiler but I need some way to expose my sort of",
    "start": "1089919",
    "end": "1095480"
  },
  {
    "text": "scope lifetime to this function and so what you can say also is that you just have like per thread scratch Arenas",
    "start": "1095480",
    "end": "1101679"
  },
  {
    "text": "which are kind of like Stacks that you've kind of prepared for each thread you can just pass that as well and then you could uh begin the lifetime at the",
    "start": "1101679",
    "end": "1108039"
  },
  {
    "text": "beginning of your function pop it at the end and then anything in between is just whatever allocations you want to do during the lifetime of that function you",
    "start": "1108039",
    "end": "1114080"
  },
  {
    "text": "can you can also get an arena for that is my point and so that's more of the push and Pop Style got it okay here's a",
    "start": "1114080",
    "end": "1120919"
  },
  {
    "text": "point that I just want to emphasize and make sure we don't gloss over because I said earlier and I I probably was not",
    "start": "1120919",
    "end": "1126919"
  },
  {
    "text": "precise enough when I said this that like okay the Stack's great because it's",
    "start": "1126919",
    "end": "1132039"
  },
  {
    "text": "kind of automatically Scopes to a function and you don't have to do quote unquote manual memory management for like you know xal 5 within your function",
    "start": "1132039",
    "end": "1139480"
  },
  {
    "text": "will automatically get popped at the end but the other problem with the stack it's it's not just that it's like bound to functions you can almost argue that's",
    "start": "1139480",
    "end": "1146240"
  },
  {
    "text": "sort of an implementation detail it's more that like it's not dynamically allocated if I'm being fed data across",
    "start": "1146240",
    "end": "1152840"
  },
  {
    "text": "the network I'm not stack allocating I can't I can't stack allocate that data I have to dynamically keep asking for more",
    "start": "1152840",
    "end": "1159720"
  },
  {
    "text": "memory from the operating system so to be clear and correct from I'm wrong like Arenas they work in a similar fashion to",
    "start": "1159720",
    "end": "1167720"
  },
  {
    "text": "the stack in that it's push and pop and it's kind of automatically adding things into the arena and taking it off the",
    "start": "1167720",
    "end": "1173480"
  },
  {
    "text": "arena cleaning up the arena but it is possible to dynamically allocate it as",
    "start": "1173480",
    "end": "1178640"
  },
  {
    "text": "opposed to the stack you can actually use the stack for some Dynamic allocation things in C there are there",
    "start": "1178640",
    "end": "1184360"
  },
  {
    "text": "are functions you can call like uh Alo a for example which will push a d like a variable amount of data onto the stack",
    "start": "1184360",
    "end": "1191640"
  },
  {
    "text": "oh okay someone I'm sure will correct me if I'm wrong but I'm I'm fairly certain there's a way to um at least varies by",
    "start": "1191640",
    "end": "1199080"
  },
  {
    "text": "operating system cuz the operating system is the one doing the allocation like that's another thing is that there's no true dichotomy between stack",
    "start": "1199080",
    "end": "1205840"
  },
  {
    "text": "and Heap allocation the stack is just one Dynamic allocation that the operating system has done for you before",
    "start": "1205840",
    "end": "1211760"
  },
  {
    "text": "it called you right it's saying like Okay you're spawning a thread I've allocated a stack for that thread and",
    "start": "1211760",
    "end": "1217280"
  },
  {
    "text": "I've set up the the registers for the stack pointer okay go I'm pretty sure on Windows perhaps I don't use this I just",
    "start": "1217280",
    "end": "1223520"
  },
  {
    "text": "kind of use the default stack as it is but I'm pretty sure on Windows it's and probably Linux I'm I I'd be shocked if",
    "start": "1223520",
    "end": "1229400"
  },
  {
    "text": "not that you can say I would like a reserve and commit style like allocation here so I I want my stack to be 1 gab uh",
    "start": "1229400",
    "end": "1237640"
  },
  {
    "text": "but I don't want to allocate actually one gab of of memory up front I want to do uh incremental committing of physical",
    "start": "1237640",
    "end": "1244679"
  },
  {
    "text": "memory too basically As I push enough onto the stack only only allocate the pages when I actually touch those in",
    "start": "1244679",
    "end": "1249799"
  },
  {
    "text": "fact that's that's probably what's going to happen by default on Windows that those semantics are a little bit more explicit so it might be I might be",
    "start": "1249799",
    "end": "1255440"
  },
  {
    "text": "remembering a specific compiler flag to do to do that kind of pattern but that is actually the thing like the stack and",
    "start": "1255440",
    "end": "1261240"
  },
  {
    "text": "heat they are terms that that sort of exist at at a semantic layer but they're not there's no difference between stack",
    "start": "1261240",
    "end": "1266400"
  },
  {
    "text": "memory and heat memory still Ram underneath the hood yeah both are ultimately virtual address space",
    "start": "1266400",
    "end": "1271960"
  },
  {
    "text": "reservations from the operating system both are going to have all the same caveats it's just that one is sort of being sort of micromanaged by the",
    "start": "1271960",
    "end": "1278559"
  },
  {
    "text": "compiler by the compiler's generated instructions it's doing all the stack work and the operating system is",
    "start": "1278559",
    "end": "1283960"
  },
  {
    "text": "micromanaging like what that allocation looks like and how big it is and and things like that although can tweak it",
    "start": "1283960",
    "end": "1289159"
  },
  {
    "text": "but yeah yeah so I I do a lot of go programming my mental model of stack and Heap is pretty simplistic for the most",
    "start": "1289159",
    "end": "1296120"
  },
  {
    "text": "part it's like I'm pretty aware of when things are going on the stack and I'm pretty aware of when they're going on the Heap but I don't have to do much",
    "start": "1296120",
    "end": "1301760"
  },
  {
    "text": "other than that it's funny cuz anytime you say anything in programming like you can't you can do X or you can't do y",
    "start": "1301760",
    "end": "1308880"
  },
  {
    "text": "usually not actually true there's like crazy ways to get around it or if you there you know there's some architecture",
    "start": "1308880",
    "end": "1315120"
  },
  {
    "text": "for which it's not true um but just to to follow up on that so you mentioned dynamically allocating on the stack is a",
    "start": "1315120",
    "end": "1320600"
  },
  {
    "text": "thing that you can do potentially is that common like or is it just like you could do it but like yeah usually I mean",
    "start": "1320600",
    "end": "1328240"
  },
  {
    "text": "some people will do it usually not because I think people are in the code that I read I almost never see it done",
    "start": "1328240",
    "end": "1334000"
  },
  {
    "text": "because it's like people are kind of paranoid about how much space the stack has on it and rightfully so it's like",
    "start": "1334000",
    "end": "1339159"
  },
  {
    "text": "the top level code is going to be deciding how big their stack is if you're writing a library for example you don't want this to be dependent on okay",
    "start": "1339159",
    "end": "1346159"
  },
  {
    "text": "this this Library works but only if you haven't like called it 20 call frames",
    "start": "1346159",
    "end": "1351279"
  },
  {
    "text": "deep or something like that like that's not generally how you want to write libraries or something and so if you're about to do like a Alo call and you're",
    "start": "1351279",
    "end": "1358440"
  },
  {
    "text": "like okay allocate 64 kilobytes or whatever it's like okay goodbye stack like you there's you just can't do that",
    "start": "1358440",
    "end": "1364240"
  },
  {
    "text": "um and so it has fairly limited utility unless you're really controlling the whole thing it also has limited utility",
    "start": "1364240",
    "end": "1370320"
  },
  {
    "text": "for that coupling reason where it's coupled to which functions you're calling I can't use aloc a in C to",
    "start": "1370320",
    "end": "1377080"
  },
  {
    "text": "return something to my caller because the second I pop out of that function and go back to my caller that allocation",
    "start": "1377080",
    "end": "1382440"
  },
  {
    "text": "is now it's it's freed right it's still a local Dynamic allocation right but",
    "start": "1382440",
    "end": "1388080"
  },
  {
    "text": "it's it's that memory is no longer legally accessible by the caller after that function is popped so it's like you",
    "start": "1388080",
    "end": "1393720"
  },
  {
    "text": "can't it has more limited utility the the difference with Arenas is that you can actually you can separate the",
    "start": "1393720",
    "end": "1399320"
  },
  {
    "text": "lifetime from the actual function lifetime so I could say Okay begin a scratch Arena Scope Call into this Json",
    "start": "1399320",
    "end": "1405840"
  },
  {
    "text": "function thing look through the par tree after the parts has come back and then pop so I can I can kind of expand the",
    "start": "1405840",
    "end": "1412799"
  },
  {
    "text": "scope outside of what the function would have allowed me to do it's not tightly coupled to function call and function",
    "start": "1412799",
    "end": "1418799"
  },
  {
    "text": "return even though it's it's like at the not the hardware level that's the wrong term at like the the conceptual memory",
    "start": "1418799",
    "end": "1425760"
  },
  {
    "text": "management level it's it's kind of similar to a stack but it's decoupled from how your code is organized it",
    "start": "1425760",
    "end": "1432120"
  },
  {
    "text": "sounds like yeah and so I guess what I would say is that we covered a lot of details there and people who maybe aren't familiar with like the concept",
    "start": "1432120",
    "end": "1438480"
  },
  {
    "text": "might be kind of going like okay like and and so and what like and so what and the reason why is because once you have",
    "start": "1438480",
    "end": "1445600"
  },
  {
    "text": "these lifetimes established so once you sort of organize these things which is a very small task relatively like like I I",
    "start": "1445600",
    "end": "1452000"
  },
  {
    "text": "gave some real examples like one arena for every frame in your game you you begin an arena scope and you clear it at",
    "start": "1452000",
    "end": "1458039"
  },
  {
    "text": "the beginning of every frame off you go the benefit to all this is that it's virtually you don't have to think about",
    "start": "1458039",
    "end": "1463960"
  },
  {
    "text": "freeing anything like it just becomes a non-issue it's like I've okay I'm going to allocate a a string like a dynamic",
    "start": "1463960",
    "end": "1469480"
  },
  {
    "text": "string variable length could be any size for all I care it doesn't matter I don't have to think about that I don't have to call malok means I don't have to call",
    "start": "1469480",
    "end": "1475880"
  },
  {
    "text": "free I've pushed onto the arena the arena is already set up by code I wrote several months ago and so I'm done",
    "start": "1475880",
    "end": "1481399"
  },
  {
    "text": "basically all I do is push and then I forget about it I'm just waiting for you to say zero cost",
    "start": "1481399",
    "end": "1487039"
  },
  {
    "text": "abstraction well I wouldn't go that far but I will say so in the game development world I'm not sure how",
    "start": "1487039",
    "end": "1493840"
  },
  {
    "text": "common it is with like backend web stuff but you know the game development world there's like a common thing that people",
    "start": "1493840",
    "end": "1498919"
  },
  {
    "text": "say is like don't dynamically allocate in a hot Loop like if you're doing a bunch of hot like work that needs to be",
    "start": "1498919",
    "end": "1504600"
  },
  {
    "text": "very tightly scoped it's supposed to run extremely fast you don't want to be call like you don't want to insert a malok call in there or something like that",
    "start": "1504600",
    "end": "1511440"
  },
  {
    "text": "because malo's implementation has to be fairly complicated because it's it's doing a fully generic lifetime",
    "start": "1511440",
    "end": "1517120"
  },
  {
    "text": "management problem because any allocation you allocate it there's no guarantee like with the arena that it's",
    "start": "1517120",
    "end": "1523039"
  },
  {
    "text": "in in some order there's no stack-like pattern to it um anything you allocate could be freed at any time it has to",
    "start": "1523039",
    "end": "1528679"
  },
  {
    "text": "manage all these structures in order to there's like a lot of logic there that potentially has to run and there's also",
    "start": "1528679",
    "end": "1535480"
  },
  {
    "text": "like concerns about I mean the the newer malok implementations are generally smarter about this part but there are",
    "start": "1535480",
    "end": "1540679"
  },
  {
    "text": "also concerns about like is this going to cause interlocking with other threads while I'm calling it in this hot Loop",
    "start": "1540679",
    "end": "1546799"
  },
  {
    "text": "like there's B like the older Malo implementations definitely had problems with that newer ones I think have been",
    "start": "1546799",
    "end": "1553480"
  },
  {
    "text": "smarter about that problem but point being you're not supposed to dynamically allocate in the hot Loop that's like the that's",
    "start": "1553480",
    "end": "1560240"
  },
  {
    "text": "ARA Dam the arena been damoc if I'm allocating what do I do I take a pointer",
    "start": "1560399",
    "end": "1567080"
  },
  {
    "text": "from the arena and then I add some number of bites to the Arena's pointer in the common case right if it has to",
    "start": "1567080",
    "end": "1572640"
  },
  {
    "text": "grow that's a genuine cost but you can tweak you can tweak the arena St that you don't have to grow in common cases",
    "start": "1572640",
    "end": "1578880"
  },
  {
    "text": "in the common case your allocations can be as simple as remember this pointer like return that as the as my as my",
    "start": "1578880",
    "end": "1585320"
  },
  {
    "text": "result or whatever and then add some number of bites to the to the Arena's allocation pointer",
    "start": "1585320",
    "end": "1591320"
  },
  {
    "text": "it's just like the stack so yeah I was going to say in the common case it sounds like basically a stack allocation yep so it's it's it's just as fast just",
    "start": "1591320",
    "end": "1598720"
  },
  {
    "text": "as simple that like bit of wisdom kind of just goes away like you just have this very simplified allocator and you",
    "start": "1598720",
    "end": "1604840"
  },
  {
    "text": "push onto it and you forget about the allocations and they're cleaned up for you later so it's once you've kind of",
    "start": "1604840",
    "end": "1611120"
  },
  {
    "text": "gone this route what I found when I kind of learned about these and started really using them all of the traditional",
    "start": "1611120",
    "end": "1616799"
  },
  {
    "text": "concerns about memory management in see went away like it was not a problem for me anymore to manage malx and freeze I",
    "start": "1616799",
    "end": "1623520"
  },
  {
    "text": "didn't have problems with memory leaks I didn't have problems really with uh like use after free or things like that it it",
    "start": "1623520",
    "end": "1630159"
  },
  {
    "text": "became much simpler to think about where my memory was was going you know having it cleaned up appropriately and things",
    "start": "1630159",
    "end": "1636240"
  },
  {
    "text": "like that so I think the problem just gets a lot easier and you just stop H you just don't have to think about it very much anymore and I think it's very",
    "start": "1636240",
    "end": "1642559"
  },
  {
    "text": "useful uh to people so I have one question about I I know I'm just like",
    "start": "1642559",
    "end": "1649039"
  },
  {
    "text": "re-explaining the concept A Thousand Times but I think it'll be helpful to the listeners uh I've got one more question about explaining it and then",
    "start": "1649039",
    "end": "1655320"
  },
  {
    "text": "and then I have a maybe more interesting question uh so first one is um are you",
    "start": "1655320",
    "end": "1660919"
  },
  {
    "start": "1660000",
    "end": "1899000"
  },
  {
    "text": "familiar with slices in Go I mean I know the word slices in other contexts um I'm",
    "start": "1660919",
    "end": "1666200"
  },
  {
    "text": "assuming it's like okay yeah go I'll just give like a brief overview I'm sure there's a lot of people listening that probably don't know too too much about",
    "start": "1666200",
    "end": "1672519"
  },
  {
    "text": "them either basically a slice and go is just a view into an array right so",
    "start": "1672519",
    "end": "1677679"
  },
  {
    "text": "arrays fixed size in go just like in C so you can have this array that's like you know a th uh has a th000 entries in",
    "start": "1677679",
    "end": "1684600"
  },
  {
    "text": "it array of 1 th000 integers a slice would be like a view into that array so maybe from you know index zero to index",
    "start": "1684600",
    "end": "1689880"
  },
  {
    "text": "8 is your current slice the interesting thing about go is that we basically never use arrays directly when you use",
    "start": "1689880",
    "end": "1695519"
  },
  {
    "text": "slices they just allocate arrays in the background and when you create a slice",
    "start": "1695519",
    "end": "1700640"
  },
  {
    "text": "kind of the normal way to do it if you're not being like too precise about performance is you just create like an empty slice and then you'd push onto it",
    "start": "1700640",
    "end": "1707440"
  },
  {
    "text": "with like the tend function and in the background it just grows so like maybe",
    "start": "1707440",
    "end": "1713240"
  },
  {
    "text": "uh the backing array starts at like eight entries and once you push past eight it reallocates a new array of 16",
    "start": "1713240",
    "end": "1720399"
  },
  {
    "text": "entries copies the old data from the first uh array to the new array this growing sort of happens in the",
    "start": "1720399",
    "end": "1727360"
  },
  {
    "text": "background you've got the length of the slice which is actually how many items are in it and then you've got the capacity which is the size of the",
    "start": "1727360",
    "end": "1732679"
  },
  {
    "text": "backing array and I guess my question is is that basically Arenas like but for",
    "start": "1732679",
    "end": "1738519"
  },
  {
    "text": "memory yeah uh yeah so I would say that that's exactly it it's just that same concept with the caveat but it's",
    "start": "1738519",
    "end": "1744880"
  },
  {
    "text": "basically it's basically the same concept except applied to Raw memory in general so it's taking that pattern and",
    "start": "1744880",
    "end": "1750559"
  },
  {
    "text": "instead of saying we can only use this for this particular array you're applying it to the concept of memory as",
    "start": "1750559",
    "end": "1757399"
  },
  {
    "text": "it's used by anyone anywhere basically so like I said with that Json parsing example how that function has to be",
    "start": "1757399",
    "end": "1763960"
  },
  {
    "text": "aware of how it's going to be allocating how many things it's going to be allocating in what order like when it finds them during the parse uh phase or",
    "start": "1763960",
    "end": "1770760"
  },
  {
    "text": "whatever it's not necessarily allocating one type of thing like Json nodes I mean the way I would write it Json node would",
    "start": "1770760",
    "end": "1776799"
  },
  {
    "text": "be a single singular type but but a lot of people don't do that with Json and you know partly for good reason because",
    "start": "1776799",
    "end": "1782159"
  },
  {
    "text": "the grammar doesn't work that way right you have like differently typed nodes it's a heterogenous sort of abstract",
    "start": "1782159",
    "end": "1787440"
  },
  {
    "text": "syntax tree and so you have certain like you have an object node and and an array node and I guess a map would be an",
    "start": "1787440",
    "end": "1793440"
  },
  {
    "text": "object I'm trying to think uh you probably have different nodes for like number uh numeric like like uh entities",
    "start": "1793440",
    "end": "1799360"
  },
  {
    "text": "I guess um or numeric literals and string literals and things like that those are probably all differently typed",
    "start": "1799360",
    "end": "1805279"
  },
  {
    "text": "nodes similarly you might want to be dynamically allocating strings for example if you're doing processing on",
    "start": "1805279",
    "end": "1811000"
  },
  {
    "text": "strings from the original from the original text buffer something like that yeah the arena is sort of at a lower level than what you're describing with",
    "start": "1811000",
    "end": "1817159"
  },
  {
    "text": "slices so that you can intermix these allocations it's it's so you can say like okay allocated a node and I want to",
    "start": "1817159",
    "end": "1823200"
  },
  {
    "text": "generate the string for this node let me apply some processing to the input text string and that's the string for this",
    "start": "1823200",
    "end": "1829159"
  },
  {
    "text": "node and so push that on the arena that goes there okay I'm parsing a an array of numbers right so I'm allocating the",
    "start": "1829159",
    "end": "1835080"
  },
  {
    "text": "node for the for the array of integers and now I'm descending one level into the parse and finding all the integers",
    "start": "1835080",
    "end": "1840200"
  },
  {
    "text": "that are in this array okay allocate all these nodes or or some structure probably not like a like a link list or",
    "start": "1840200",
    "end": "1845519"
  },
  {
    "text": "whatever but like you know probably just a bunch of these chunks of of numbers that you're parsing out or something all",
    "start": "1845519",
    "end": "1850799"
  },
  {
    "text": "of these like heterogenous allocations are all going onto that same like quote unquote slice so that's the main",
    "start": "1850799",
    "end": "1856639"
  },
  {
    "text": "difference uh now I think think there was another point that I thought you were going to with the slices thing which is pretty interesting which is so",
    "start": "1856639",
    "end": "1862960"
  },
  {
    "text": "the way that I know understand the word slice is slightly different from what I think you explained which is that the slice is kind of like the it's sort of",
    "start": "1862960",
    "end": "1870360"
  },
  {
    "text": "like the read only view into the buffer that's how I think about it where it's like this is actually probably the same distinction as like in C++ you have STD",
    "start": "1870360",
    "end": "1877000"
  },
  {
    "text": "string you also have STD string view the string view thing is what I think of as a slice got it but it sounds like go",
    "start": "1877000",
    "end": "1883799"
  },
  {
    "text": "kind of welds those two concepts together a little bit yeah I like you can change what's in a slice like you can swap out elements and Stu",
    "start": "1883799",
    "end": "1890519"
  },
  {
    "text": "it is you know it depends on exactly what you mean by read only like if swapping out elements isn't allowed and",
    "start": "1890519",
    "end": "1896679"
  },
  {
    "text": "see that is allowed and go I guess yeah like for example when I think of the canonical example of slices at least",
    "start": "1896679",
    "end": "1902919"
  },
  {
    "start": "1899000",
    "end": "2577000"
  },
  {
    "text": "with the way that I write code is is with string like length strings basically so if I have a string it could be the Json text buffer actually and I'm",
    "start": "1902919",
    "end": "1910000"
  },
  {
    "text": "trying to say I'm trying to like pull a re a sub region of that string out and point at it and say like this is this is",
    "start": "1910000",
    "end": "1915720"
  },
  {
    "text": "the string attached to this node or something like that generally what I do is all of my strings are slices and so",
    "start": "1915720",
    "end": "1922039"
  },
  {
    "text": "I'll say okay I'm going to form a new string slice basically and the base",
    "start": "1922039",
    "end": "1927159"
  },
  {
    "text": "pointer of that is going to be the same region of memory as the initial string",
    "start": "1927159",
    "end": "1932760"
  },
  {
    "text": "it'll just be offset I'll say like okay refer into the orig original buffer so I've got the overall buffer like multiple slices into the same backing",
    "start": "1932760",
    "end": "1939799"
  },
  {
    "text": "array yeah and and you treat all those as a mutable is the important part so you kind of like you don't touch you don't mutate through those cuz they're",
    "start": "1939799",
    "end": "1946240"
  },
  {
    "text": "all pointing at the same thing and so you have kind of immutability by default kind of rule so like you can do that in",
    "start": "1946240",
    "end": "1951960"
  },
  {
    "text": "go but like the slices in go are just like you use them the exact same way you use like lists in Python it's just kind",
    "start": "1951960",
    "end": "1958240"
  },
  {
    "text": "of like the default way to do ordered collection Dynamic arrays or stuff like that yeah got it EXA or vectors in C++",
    "start": "1958240",
    "end": "1964480"
  },
  {
    "text": "right um very similar not like similar implementation but like you use them in a similar way that you probably would um",
    "start": "1964480",
    "end": "1972080"
  },
  {
    "text": "oh yeah okay other caveat that's pretty important difference between like slices and uh Arenas other than being like sort",
    "start": "1972080",
    "end": "1979679"
  },
  {
    "text": "of bite based like generic memory allocating kind of thing when a slice resizes in go I would assume that you",
    "start": "1979679",
    "end": "1986760"
  },
  {
    "text": "cannot assume the pointers remain stable so if you have a pointer to an element",
    "start": "1986760",
    "end": "1993000"
  },
  {
    "text": "in a slice and that slice resizes it's not guaranteed that that pointer is",
    "start": "1993000",
    "end": "1998600"
  },
  {
    "text": "still valid I believe that's correct I believe it gets copied to a new address yeah St Vector um I I think every",
    "start": "1998600",
    "end": "2005399"
  },
  {
    "text": "implementation works the same way where it'll do a gck which is basically like check the initial allocation if it's not",
    "start": "2005399",
    "end": "2011799"
  },
  {
    "text": "big enough double the size or something I don't think it's literally double but you know you you expand the capacity somehow reserve a new block copy the",
    "start": "2011799",
    "end": "2018080"
  },
  {
    "text": "entire array to that new block and then you're done but that invalidates all your pointers with an arena the way that I write them at least I don't do that",
    "start": "2018080",
    "end": "2025240"
  },
  {
    "text": "that's why I do the chaining or the large virtual address space reservation",
    "start": "2025240",
    "end": "2030799"
  },
  {
    "text": "and uh incremental physical uh commits of physical memory because after a resize so after you chain a new block on",
    "start": "2030799",
    "end": "2037360"
  },
  {
    "text": "or after after you commit new physical memory to back your virtual address bace reservation those pointers all remain",
    "start": "2037360",
    "end": "2043000"
  },
  {
    "text": "stable so you can you can take pointers to them before after the growth doesn't matter everything's in the same region",
    "start": "2043000",
    "end": "2049679"
  },
  {
    "text": "so that's like one pretty important difference it simplifies a lot if you can assume pointer stability so that's I",
    "start": "2049679",
    "end": "2055158"
  },
  {
    "text": "that's why I say that's important so during the lifetime of the Arena as long as you haven't like",
    "start": "2055159",
    "end": "2061560"
  },
  {
    "text": "popped yeah the memory addresses are stable yeah the addresses are stable no",
    "start": "2061560",
    "end": "2066878"
  },
  {
    "text": "matter what but it's but yeah I mean if you pop the problem with popping is that somebody else could push and overwrite",
    "start": "2066879",
    "end": "2073398"
  },
  {
    "text": "what you were pointing to so it's same thing as the stack right it's like once you pop out of a function you had some variable the second you exit that",
    "start": "2073399",
    "end": "2080000"
  },
  {
    "text": "function that variable's memory is still going to be there it'll it'll have the same value in it but then the problem is",
    "start": "2080000",
    "end": "2085560"
  },
  {
    "text": "that you could call another function and that function is going to stop that memory right so so the chaining of the",
    "start": "2085560",
    "end": "2091079"
  },
  {
    "text": "Arenas doesn't screw up the memory address space of the previous Arenas got",
    "start": "2091079",
    "end": "2096919"
  },
  {
    "text": "exactly yeah cuz it's um it's a linked list of of large fixed size link",
    "start": "2096919",
    "end": "2102040"
  },
  {
    "text": "basically being the doing the heavy lifting right because you didn't have to copy all that memory uh to a new place",
    "start": "2102040",
    "end": "2108560"
  },
  {
    "text": "like which is how slices work with backing arrays okay very cool all right this leads me to my next question which",
    "start": "2108560",
    "end": "2116560"
  },
  {
    "text": "has frankly been in the back of my mind ever since you uh responded on Twitter which is I've heard hearsay of arenas",
    "start": "2116560",
    "end": "2124680"
  },
  {
    "text": "for a while haven't dug super far into them what people are hearing here on this podcast is basically my",
    "start": "2124680",
    "end": "2131320"
  },
  {
    "text": "understanding of Arenas they sound like this kind of too good to be true zero cost abstraction like I just I create an",
    "start": "2131320",
    "end": "2137880"
  },
  {
    "text": "arena I magically put stuff into the arena later I free the arena I don't need a garbage collector anymore if it's",
    "start": "2137880",
    "end": "2143880"
  },
  {
    "text": "all so true where are they like why aren't we using them all over the place the reason why I brought up the name",
    "start": "2143880",
    "end": "2149359"
  },
  {
    "text": "thing first the fact that people refer to them by different names I think that's important for understanding the",
    "start": "2149359",
    "end": "2155280"
  },
  {
    "text": "answer to this question so so the first thing I I would say is that people have been using these for before I was born",
    "start": "2155280",
    "end": "2160880"
  },
  {
    "text": "yes the stack is an arena but even before saying that game developers have been using Arena allocators like forever",
    "start": "2160880",
    "end": "2166400"
  },
  {
    "text": "and they go by other names too so linear allocator bump allocator people have probably called them like region",
    "start": "2166400",
    "end": "2172160"
  },
  {
    "text": "allocators like there's a lot of different so badass though I I can see why it's like the term is starting to",
    "start": "2172160",
    "end": "2178440"
  },
  {
    "text": "stick yeah I mean what can you do I agree with you so people have been using this for a very very long time I think",
    "start": "2178440",
    "end": "2185280"
  },
  {
    "text": "the problem is that the knowledge of how to work with these allocators effectively in many cases it doesn't",
    "start": "2185280",
    "end": "2191319"
  },
  {
    "text": "escape like certain teams for example and so the place where I learned about them was watching Casey miror on",
    "start": "2191319",
    "end": "2197040"
  },
  {
    "text": "handmade hero this was his thing he's like I don't need a garbage collector I don't even need ra I'm not doing any of",
    "start": "2197040",
    "end": "2202760"
  },
  {
    "text": "that I'm just doing very simple allocation schemes with like these very basic allocators in fact the first thing",
    "start": "2202760",
    "end": "2208560"
  },
  {
    "text": "in handmade hero that he does or one of the first things he does is at the beginning of his program he reserves a",
    "start": "2208560",
    "end": "2214599"
  },
  {
    "text": "block of memory for every single allocation his program does does so he knows whether or not his allocations are",
    "start": "2214599",
    "end": "2220160"
  },
  {
    "text": "going to are going to fail by like the fifth line of the program like there's no more any allocations after that other",
    "start": "2220160",
    "end": "2226480"
  },
  {
    "text": "than you know he calls into open Gil or or in handmade hero who was open G I'm sure the user mode driver is doing tons",
    "start": "2226480",
    "end": "2232520"
  },
  {
    "text": "of stuff but point being he's not allocating more more stuff after that right when I learned about them I was",
    "start": "2232520",
    "end": "2238560"
  },
  {
    "text": "watching him and it felt I felt exactly the same way as you described it's like wow this sounds really way too good to",
    "start": "2238560",
    "end": "2244480"
  },
  {
    "text": "be true how is it so easy for him maybe he's just done a lot of practice or something like that and I mean",
    "start": "2244480",
    "end": "2249960"
  },
  {
    "text": "everything requires practice but I think the reason why I had never been exposed to that before is that Casey was coming from he worked at rad game tools and",
    "start": "2249960",
    "end": "2256760"
  },
  {
    "text": "that they were kind of this old school game development industry kinds of low-l C kind of programmers and they had they",
    "start": "2256760",
    "end": "2263160"
  },
  {
    "text": "had found ways to work comfortably inside of sea the ways that they worked comfortably inside of sea didn't involve",
    "start": "2263160",
    "end": "2269319"
  },
  {
    "text": "like a lot of people like to say like skill issues you know just write better C or whatever like there's lots of like",
    "start": "2269319",
    "end": "2275359"
  },
  {
    "text": "that kind of discourse that's not to be very very clear that's not what I mean I'm not saying that they found ways to",
    "start": "2275359",
    "end": "2281280"
  },
  {
    "text": "be comfortable and C because they simplifi their problems and so when he kind of showed how you do that that was",
    "start": "2281280",
    "end": "2288079"
  },
  {
    "text": "like light switch for me it's like oh I I now I get it like now I see how you can you can change the definition of",
    "start": "2288079",
    "end": "2294560"
  },
  {
    "text": "your problem to make your allocation patterns very simple and off you go and the reason why people probably don't talk about it very much is because it's",
    "start": "2294560",
    "end": "2301160"
  },
  {
    "text": "like once you see it it's actually very trivial it's like oh it's a stack that's it and I just have multiple of them now",
    "start": "2301160",
    "end": "2308040"
  },
  {
    "text": "instead of just the one you know for local variables or whatever it's like no I have a level stack and uh you know so",
    "start": "2308040",
    "end": "2313599"
  },
  {
    "text": "on and so forth and so I think it's like it's a very simple idea but I think the reason why I've talked about them a lot and why Casey talked about them in",
    "start": "2313599",
    "end": "2319960"
  },
  {
    "text": "handmade hero probably has to do with the fact that there's so much unlearning to do like people have to unwind a lot",
    "start": "2319960",
    "end": "2325079"
  },
  {
    "text": "of this stuff about how complicated memory management is cuz that's what people say looking back at it it's like",
    "start": "2325079",
    "end": "2330200"
  },
  {
    "text": "doesn't have to be that way it can be a lot simpler within the context of C programming it's not like a special",
    "start": "2330200",
    "end": "2336680"
  },
  {
    "text": "library that you import to do Arenas uh maybe there's some libraries I don't",
    "start": "2336680",
    "end": "2342319"
  },
  {
    "text": "know but like I'm assuming that's not what we're talking about here it's a way of writing code it's a way of architecting and thinking about your",
    "start": "2342319",
    "end": "2348160"
  },
  {
    "text": "program and you kind of do it upfront uh and you need to like build your whole",
    "start": "2348160",
    "end": "2353480"
  },
  {
    "text": "program in this style and so if I'm understanding what you're saying is it's basically like you just need to get out",
    "start": "2353480",
    "end": "2359400"
  },
  {
    "text": "of the mindset of using Malik and free in the way you've probably been taught",
    "start": "2359400",
    "end": "2364680"
  },
  {
    "text": "in principle there's nothing really wrong with Malo and free like it's not that malakan free should be deleted or something it's that",
    "start": "2364680",
    "end": "2370839"
  },
  {
    "text": "they're just introducing a lot more stuff than you need for most problems most problems can be simplified in this",
    "start": "2370839",
    "end": "2377599"
  },
  {
    "text": "kind of like stack-like allocator way with Malak and free it's like you're doing this whole generic allocation",
    "start": "2377599",
    "end": "2384119"
  },
  {
    "text": "problem for every like little microallocation you're doing but a really sensible way to use malakin free",
    "start": "2384119",
    "end": "2389760"
  },
  {
    "text": "is to implement an arena with them so you can say like oh malok 64 Megs that's my first Chunk in my Arena like you are",
    "start": "2389760",
    "end": "2395599"
  },
  {
    "text": "using malakin free you're just like doing it in chunks basically right I personally don't use Malin free but you",
    "start": "2395599",
    "end": "2401680"
  },
  {
    "text": "can use them for Arenas cuz how do you do it I program primarily on Windows that's where the game development",
    "start": "2401680",
    "end": "2407680"
  },
  {
    "text": "industry tends to work it's unfortunate but here we are yeah yes I mean what can you do I mean I I like I like my audio",
    "start": "2407680",
    "end": "2415560"
  },
  {
    "text": "drivers working unfortunately I won't get people are going to yell at me in the comments if I no I have a PC and a",
    "start": "2415560",
    "end": "2421800"
  },
  {
    "text": "Mac uh and I've been thinking about switching to PC and Linux but like I can't get away from PC cuz it's where",
    "start": "2421800",
    "end": "2427440"
  },
  {
    "text": "play games but I despise doing any work on it um yeah yeah that's just I don't know that's various reasons I think one",
    "start": "2427440",
    "end": "2435160"
  },
  {
    "text": "important thing is that there's Windows tends to have the best debuggers for game developers for the kinds of work",
    "start": "2435160",
    "end": "2441440"
  },
  {
    "text": "that game developers are doing debuggers are very useful on Linux you're stuck with like GDB and lldb and people don't",
    "start": "2441440",
    "end": "2447760"
  },
  {
    "text": "tend to like those very much so on Windows I'm less familiar with the Linux picture but it's I know it's slightly",
    "start": "2447760",
    "end": "2452839"
  },
  {
    "text": "different things are coupled a little bit more but on Windows malok is a helper function implemented of the C runtime library and it is itself calling",
    "start": "2452839",
    "end": "2460560"
  },
  {
    "text": "into the operating system for you the operating system provides a much lower level uh mechanism for doing memory",
    "start": "2460560",
    "end": "2469200"
  },
  {
    "text": "allocation which is called virtual alloc and virtual aloc is like the API that Microsoft wants you to call when you're",
    "start": "2469200",
    "end": "2474760"
  },
  {
    "text": "doing like the lowest possible level um like memory reservation kinds of things and that's that's how you can do some of",
    "start": "2474760",
    "end": "2480880"
  },
  {
    "text": "those like virtual memory things I was talking about so so you call that I call that and I just Implement all the higher",
    "start": "2480880",
    "end": "2487000"
  },
  {
    "text": "level stuff on top that's what malok does too like Malo has to call virtual aloc in fact I think malok technically",
    "start": "2487000",
    "end": "2492079"
  },
  {
    "text": "calls Heap aloc which is a higher level helper that that Microsoft wrote as well so malok calls heat alock I think I",
    "start": "2492079",
    "end": "2498119"
  },
  {
    "text": "would assume that Microsoft's C runtime Library calls Microsoft's heat outlock function I hope that's a safe assumption",
    "start": "2498119",
    "end": "2504640"
  },
  {
    "text": "maybe they duplicated it I need a sound bite of you saying something like malok is too high level for",
    "start": "2504640",
    "end": "2512079"
  },
  {
    "text": "me um yeah well oh man I mean",
    "start": "2512720",
    "end": "2517920"
  },
  {
    "text": "there would be too much to unpack I guess sorry I cut you off to make a",
    "start": "2517920",
    "end": "2524440"
  },
  {
    "text": "stupid joke you're good yeah so I just call virtual aloc and then I just build these",
    "start": "2524440",
    "end": "2529680"
  },
  {
    "text": "Arenas on with virtual aloc cuz virtual aloc it's not like a generic Heap allocator like malok like with malok you",
    "start": "2529680",
    "end": "2535640"
  },
  {
    "text": "could do something like allocate eight bytes for example like you'd say like okay I want eight bytes or I want 100",
    "start": "2535640",
    "end": "2541000"
  },
  {
    "text": "btes I want 256 bytes and I'm Mal loocking that with virtual outlock you're talking to the operating systems",
    "start": "2541000",
    "end": "2547240"
  },
  {
    "text": "page allocator so it's doing the job of passing out ranges of pages inside of",
    "start": "2547240",
    "end": "2552800"
  },
  {
    "text": "your address space to processes so it's it's basically saying like I've reserved",
    "start": "2552800",
    "end": "2557880"
  },
  {
    "text": "you know page you know n wherever n happens to be like this this address and then the minimum granularity that you're",
    "start": "2557880",
    "end": "2564720"
  },
  {
    "text": "going to see is 4K so it's basically like at 4K granularity that's what we're hands you a whole chunk deal with it",
    "start": "2564720",
    "end": "2571800"
  },
  {
    "text": "whereas Mallot gives you a little finer grained API to deal with the individual bites that you need and stuff right yeah",
    "start": "2571800",
    "end": "2578000"
  },
  {
    "start": "2577000",
    "end": "2928000"
  },
  {
    "text": "exactly so Malo is is built to be some ways more generic and some ways less",
    "start": "2578000",
    "end": "2583119"
  },
  {
    "text": "generic it's it's more generic in the sense that it's like more size variable like it's not for these giant chunk allocations it's for it's for many micro",
    "start": "2583119",
    "end": "2590880"
  },
  {
    "text": "allocations it's less generic in the sense that it doesn't expose like virtual memory semantics which are Universal on consumer hardware and",
    "start": "2590880",
    "end": "2597640"
  },
  {
    "text": "server hardware for example I just build the Arenas with the virtual aloc API cuz it's like it provides me extra",
    "start": "2597640",
    "end": "2604160"
  },
  {
    "text": "functionality there's fewer intermediate layers there is over but it's there's no extra overhead incurred by a Malo",
    "start": "2604160",
    "end": "2609800"
  },
  {
    "text": "implementation basically I just like to do it at that layer but you could use Malo and free to build an arena there's nothing stopping you from doing that so",
    "start": "2609800",
    "end": "2615920"
  },
  {
    "text": "I think it's really a it's really a pattern thing it's like are you calling malok 10 million times or 10 times in",
    "start": "2615920",
    "end": "2622240"
  },
  {
    "text": "your program like that's kind of the the problem I'm getting at it's been helpful for me to think about how to get it down to 10 rather than just like going off to",
    "start": "2622240",
    "end": "2629119"
  },
  {
    "text": "infinity and trying really hard and then having malok all over the place and like oh I I'm pointing to that but I freed",
    "start": "2629119",
    "end": "2634720"
  },
  {
    "text": "that and I I freed that but it was already freed and or I allocated that and I never freed it so I have this leak it's like none of that has to happen",
    "start": "2634720",
    "end": "2641480"
  },
  {
    "text": "just a better way of using Mal works okay here's my next question then and it's kind of along the same lines of",
    "start": "2641480",
    "end": "2647240"
  },
  {
    "text": "like why don't we use Arenas everywhere sorry to use another go analogy but it's where I do all my work so you're good",
    "start": "2647240",
    "end": "2653640"
  },
  {
    "text": "and it'll be it'll help be it'll be helpful to our audience too because we got a lot of go developers listening okay in go there's this concept of the",
    "start": "2653640",
    "end": "2660559"
  },
  {
    "text": "context it's part of the goh standard library and basically the context is this thing it's you can imagine it as",
    "start": "2660559",
    "end": "2667760"
  },
  {
    "text": "just an object kind of like an arena that you pass around your various function calls in a web server the most",
    "start": "2667760",
    "end": "2674200"
  },
  {
    "text": "useful thing about the context is that it can be cancelled so for example if client makes an HTTP request and while",
    "start": "2674200",
    "end": "2681280"
  },
  {
    "text": "the HTTP request is being processed say a database call gets kicked off the",
    "start": "2681280",
    "end": "2686599"
  },
  {
    "text": "client disconnects that context is cancelled and the server can abort early",
    "start": "2686599",
    "end": "2692440"
  },
  {
    "text": "essentially that call to the database so it can like clean up the function really quickly and efficiently because the",
    "start": "2692440",
    "end": "2697760"
  },
  {
    "text": "context has been canceled contexts are really cool thing is anytime you're making a function call in go now because",
    "start": "2697760",
    "end": "2705240"
  },
  {
    "text": "context pattern is so ubiquitous you basically need to include this in in in",
    "start": "2705240",
    "end": "2711599"
  },
  {
    "text": "your function signature this additional context parameter uh just kind of by convention it should always be the first",
    "start": "2711599",
    "end": "2718800"
  },
  {
    "text": "uh thing that you pass to the function so for example instead of like db. getet user pass in an ID it's something like",
    "start": "2718800",
    "end": "2725559"
  },
  {
    "text": "db. getet user context ID pass them both in now I'm not saying that it's bad but",
    "start": "2725559",
    "end": "2732440"
  },
  {
    "text": "I am saying that like if you have a codebase that hasn't been using context and now you need to introduce context",
    "start": "2732440",
    "end": "2737760"
  },
  {
    "text": "you've got to change all the function and signatures and it's like very at the application layer you're very aware of",
    "start": "2737760",
    "end": "2744520"
  },
  {
    "text": "it and I'm sure there's some programmers out there that just like can't this thing like be invisible in the background not like bother me all the",
    "start": "2744520",
    "end": "2750319"
  },
  {
    "text": "time is that what it's like working with Arenas I think what you said is accurate like if you are coming into a codebase",
    "start": "2750319",
    "end": "2755559"
  },
  {
    "text": "that hasn't used Arenas it's going to be a pretty large task to like move all of code to being Arena based and yes as",
    "start": "2755559",
    "end": "2762680"
  },
  {
    "text": "you're writing code you definitely do have to be aware of like what arena you're pushing things on to to me that's",
    "start": "2762680",
    "end": "2768680"
  },
  {
    "text": "acceptable uh to a lot of people it's it's not I think the wins outweigh the costs because a garbage collector obviously it has to basically infer what",
    "start": "2768680",
    "end": "2775599"
  },
  {
    "text": "the what you're manually doing with an arena so the arena is saying I won't access this pointer with this allocation",
    "start": "2775599",
    "end": "2782480"
  },
  {
    "text": "after this lifetime ends and you specify that by which Arena you pick at what point point in time a garbage collector",
    "start": "2782480",
    "end": "2788200"
  },
  {
    "text": "also has to like figure out when you're going to stop accessing something but it",
    "start": "2788200",
    "end": "2793440"
  },
  {
    "text": "has to fish that out more implicitly from all of your code there's a lot of problems with that you do pay the cost",
    "start": "2793440",
    "end": "2799000"
  },
  {
    "text": "of saying like okay I've got to specify this Arena manually but the win obviously allocations become very fast",
    "start": "2799000",
    "end": "2805920"
  },
  {
    "text": "frees become trivially fast and I don't have to think about freeing to me that's a worthwhile try it off but you're right",
    "start": "2805920",
    "end": "2811400"
  },
  {
    "text": "it's extra it's a little bit of extra friction at every kind of function call kind of boundary for every function call",
    "start": "2811400",
    "end": "2817079"
  },
  {
    "text": "does dynamic allocation yeah it like takes an allocator and yeah I'm not like saying that it's not worth it um in fact",
    "start": "2817079",
    "end": "2824280"
  },
  {
    "text": "Arena's especially based on our discussion today I'd need to do a whole bunch more research but like they sound",
    "start": "2824280",
    "end": "2829640"
  },
  {
    "text": "awesome and when you described a web server as like I can imagine like a function Handler that handles like an",
    "start": "2829640",
    "end": "2835559"
  },
  {
    "text": "HTTP request having its own top level Arena that you can do all these dynamic allocations in that just automatically",
    "start": "2835559",
    "end": "2840920"
  },
  {
    "text": "gets cleaned up that'd be hugely efficient cuz like in go like we build these highly performant servers that",
    "start": "2840920",
    "end": "2845960"
  },
  {
    "text": "handle thousands of requests per second but like you still have that GC Loop",
    "start": "2845960",
    "end": "2851160"
  },
  {
    "text": "that just happens every once in a while right and so memory builds in this Sawtooth pattern if you were able to do",
    "start": "2851160",
    "end": "2856760"
  },
  {
    "text": "a lot of the allocations that are happening on the Heap within an arena I could imagine that having huge huge",
    "start": "2856760",
    "end": "2863160"
  },
  {
    "text": "performance uh boosts yeah to web servers in particular okay so like in C",
    "start": "2863160",
    "end": "2869720"
  },
  {
    "text": "if you want Arenas you build your own Arena we got that right like you're you're building an arena I so I will I",
    "start": "2869720",
    "end": "2875640"
  },
  {
    "text": "will throw in there like I I said they're so simple which is kind of why nobody talks about them and that shows",
    "start": "2875640",
    "end": "2880760"
  },
  {
    "text": "up in the implementation like if you try to build your own malok you know you could build a simple malok and in you know very little code but but if you're",
    "start": "2880760",
    "end": "2886800"
  },
  {
    "text": "building like a production ready malok kind of implementation I mean you can go look at them like u m malok is is",
    "start": "2886800",
    "end": "2892920"
  },
  {
    "text": "available I think J malok or there's a few different maloc implementation implementations that you can import and",
    "start": "2892920",
    "end": "2898640"
  },
  {
    "text": "use in your C code base like today and they're prettyy I don't want to say big cuz it's not big on The Grand in the grand scheme of things but it's like",
    "start": "2898640",
    "end": "2904280"
  },
  {
    "text": "several thousands of lines of code cuz they have all of these like fairly sophisticated tracking data structures",
    "start": "2904280",
    "end": "2909880"
  },
  {
    "text": "and things like this because they're solving a generic problem so it's going to be harder with the arena it's like",
    "start": "2909880",
    "end": "2915319"
  },
  {
    "text": "200 lines of code at most like the one that we use on the debugger project it's an alpha still but it's like it's been",
    "start": "2915319",
    "end": "2921119"
  },
  {
    "text": "running on this Arena implementation for a very very long time it's something like 200 lines of code like it's not",
    "start": "2921119",
    "end": "2926520"
  },
  {
    "text": "much code so you can do it very easily is my point are you aware of any languages or tool chains you mentioned",
    "start": "2926520",
    "end": "2934400"
  },
  {
    "start": "2928000",
    "end": "3698000"
  },
  {
    "text": "Zig does something similar then you made it sound like it actually do Arenas are there any languages that are building",
    "start": "2934400",
    "end": "2939520"
  },
  {
    "text": "support for Arenas like directly into the language or at least into the conventions that you're aware of not",
    "start": "2939520",
    "end": "2945480"
  },
  {
    "text": "really um I think yeah like Odin and zigg do the most like Odin has an arena",
    "start": "2945480",
    "end": "2951480"
  },
  {
    "text": "implementation as far as I know Ginger bill I mean I don't want to speak for him but he has said before he's like I",
    "start": "2951480",
    "end": "2956839"
  },
  {
    "text": "use Arenas in the same way you do but he he didn't quite go as far as standardizing their practice in the way",
    "start": "2956839",
    "end": "2962920"
  },
  {
    "text": "that that he and I use them throughout all of the Odin standard Library and things like that because it's just it is",
    "start": "2962920",
    "end": "2968520"
  },
  {
    "text": "it is an extra step to learn for people and he wanted to make it more like he uses that kind of generic allocator",
    "start": "2968520",
    "end": "2973720"
  },
  {
    "text": "interface that Zig also uses because it's more familiar to people who are used to working with a malakin freestyle",
    "start": "2973720",
    "end": "2979480"
  },
  {
    "text": "is that more similar to malakin free like just you know thing okay that's like kind of the",
    "start": "2979480",
    "end": "2985079"
  },
  {
    "text": "standard interface um that Odin has and it's it also has a thing called a context but I think it's different but",
    "start": "2985079",
    "end": "2990559"
  },
  {
    "text": "that context is passing through that allocator implicitly and that allocator is a generic allocator so it's not an",
    "start": "2990559",
    "end": "2995880"
  },
  {
    "text": "arena it could an arena and Zig does the same thing but that's not quite the same as standardizing zigg standardizes on",
    "start": "2995880",
    "end": "3003599"
  },
  {
    "text": "explicit allocators which is like halfway there the problem is is that the arena helps simplify both implementation",
    "start": "3003599",
    "end": "3010760"
  },
  {
    "text": "code and usage code and so by requiring everyone to conform to the generic",
    "start": "3010760",
    "end": "3015839"
  },
  {
    "text": "memory allocator interface nobody can really be guaranteed that they don't have to call free for example they they",
    "start": "3015839",
    "end": "3021440"
  },
  {
    "text": "still have to go and do all that work even if the free is actually a no op cuz you're secretly passing it Arena I've",
    "start": "3021440",
    "end": "3027480"
  },
  {
    "text": "not seen any language do this kind of thing in a first class way lots of codebases do it but yeah no no languages",
    "start": "3027480",
    "end": "3034240"
  },
  {
    "text": "to my knowledge fundamentally it's just to have the right interface it's a different interface right it might not",
    "start": "3034240",
    "end": "3040200"
  },
  {
    "text": "be totally true that nobody's like standardizing on it because I'm sure garbage collector implementations in",
    "start": "3040200",
    "end": "3045480"
  },
  {
    "text": "fact I'm 99 without having looked at them I'm like 99% sure that production",
    "start": "3045480",
    "end": "3050799"
  },
  {
    "text": "garbage collector interfaces are doing Arena like patterns all the time they're just doing it implicitly so they can't",
    "start": "3050799",
    "end": "3056319"
  },
  {
    "text": "do they're not doing it out all the time obviously because you could have longer lasting allocations that that break the",
    "start": "3056319",
    "end": "3061760"
  },
  {
    "text": "lifetime patterns of an of any individual Arena I think they'll move the allocation like they'll they'll",
    "start": "3061760",
    "end": "3066880"
  },
  {
    "text": "assume if it's a shortlived allocation or something they'll assume it's on a shortlived Arena scope and then they'll",
    "start": "3066880",
    "end": "3072079"
  },
  {
    "text": "move the allocation if it's not that kind of thing so there's some stuff like that you could argue that it's being used in standardized garbage collector",
    "start": "3072079",
    "end": "3078559"
  },
  {
    "text": "implementations but but not in the same way that I use them in C where it's like explicit but um just kind of like first",
    "start": "3078559",
    "end": "3084520"
  },
  {
    "text": "class everywhere kind of thing okay now I'm going to try to get you to play Devil's Advocate and like tell me all",
    "start": "3084520",
    "end": "3090079"
  },
  {
    "text": "right so you use Arenas but like you know wink when do you stop but like do",
    "start": "3090079",
    "end": "3096839"
  },
  {
    "text": "you ever escape hatch and just like Malak and freeze some stuff I never escape hatch I will sometimes call a",
    "start": "3096839",
    "end": "3102400"
  },
  {
    "text": "library which Escape hatches like but it's like you're forced to at that point because the library does it yeah like",
    "start": "3102400",
    "end": "3108079"
  },
  {
    "text": "you could like stb image is a good example you can you can change the allocator that it's using but if you",
    "start": "3108079",
    "end": "3113160"
  },
  {
    "text": "don't change it it's going to call malok um and so I just I just kind live with that I could go so far as to like sneak",
    "start": "3113160",
    "end": "3119160"
  },
  {
    "text": "in an arena somehow um through their malan free like just on principle yeah",
    "start": "3119160",
    "end": "3124880"
  },
  {
    "text": "just on principle exactly um you do get some wins for that like you could see if you have debug visualizations in your",
    "start": "3124880",
    "end": "3130559"
  },
  {
    "text": "code base of like seeing when memory is allocated and how much is me how much memory is allocated across time there's",
    "start": "3130559",
    "end": "3136559"
  },
  {
    "text": "some use to that it's mostly on principle but there's some win you get for it but yeah yeah I never personally",
    "start": "3136559",
    "end": "3141839"
  },
  {
    "text": "go to malok really I will just build more complicated allocating structures on top top of an arena Lifetime and so",
    "start": "3141839",
    "end": "3148079"
  },
  {
    "text": "this is the next like this is the whole other half of like working with Arenas that generally people get hung up on a",
    "start": "3148079",
    "end": "3154520"
  },
  {
    "text": "lot of people will say these Arenas sound great but like what if I do want to free something out of the middle of",
    "start": "3154520",
    "end": "3160319"
  },
  {
    "text": "the Arena like it's a game level and an entity is destroyed or something I can't",
    "start": "3160319",
    "end": "3165720"
  },
  {
    "text": "like pop it cuz it's in the middle of the Arena I can't like you know there's all this stuff allocated after that entity how how can I pop back to theid",
    "start": "3165720",
    "end": "3171720"
  },
  {
    "text": "the problem with Stacks is they're fast because they don't let you do yes exactly",
    "start": "3171720",
    "end": "3177880"
  },
  {
    "text": "and so the way you solve that generally is you implement the higher level allocating structures yourself on top of",
    "start": "3177880",
    "end": "3183960"
  },
  {
    "text": "so basically you still have the arena Lifetime and you still have that allocation in the middle and it's still allocated you can't free it uh but what",
    "start": "3183960",
    "end": "3190200"
  },
  {
    "text": "you do is you build your own free list on top of it let's say it is entities in a game level every entity is larger than",
    "start": "3190200",
    "end": "3196119"
  },
  {
    "text": "8 bytes presumably is big enough to store uh like a like a pointer to a next",
    "start": "3196119",
    "end": "3201359"
  },
  {
    "text": "thing in a chain and so what you can do with that is if an entity is released you could just say there's a pointer at the beginning of every single entity if",
    "start": "3201359",
    "end": "3207559"
  },
  {
    "text": "that's too costly you can just use it when they're freed the point is when when an entity is like destroyed and you want to reallocate it for some future",
    "start": "3207559",
    "end": "3214680"
  },
  {
    "text": "entity all you do is you move that to what's what is generally called a free list so this is basically a linked list",
    "start": "3214680",
    "end": "3221280"
  },
  {
    "text": "of things that are free to allocate within like a pool of memory for example",
    "start": "3221280",
    "end": "3226359"
  },
  {
    "text": "you can think of like you have like a big array of entities and if if you know these three are free you could you can",
    "start": "3226359",
    "end": "3232680"
  },
  {
    "text": "imagine some pointer which is the top of the free list pointing to the first one that's free this one points to this one which is free this one points to this",
    "start": "3232680",
    "end": "3239240"
  },
  {
    "text": "one which is free everything else is not free so you can't allocate it because it's being used by entities that are",
    "start": "3239240",
    "end": "3244799"
  },
  {
    "text": "alive or whatever that's the first example of a more complicated allocation structure that you build on top of an",
    "start": "3244799",
    "end": "3250359"
  },
  {
    "text": "arena where it's this uh go ahead no I just I just want to make sure I'm understanding the purpose of that so is",
    "start": "3250359",
    "end": "3255920"
  },
  {
    "text": "it that the next time you push onto the Heap instead of going to like the end",
    "start": "3255920",
    "end": "3261280"
  },
  {
    "text": "it's going to go fill in one of those gaps right so instead of having to say like push a new entity on to the end of",
    "start": "3261280",
    "end": "3266920"
  },
  {
    "text": "the Arena you still have some free ones that are left over that that were from entities that got blown up or whatever",
    "start": "3266920",
    "end": "3272440"
  },
  {
    "text": "and so you can just pop them off the free list and now that's a live entity again and that entity is now like the",
    "start": "3272440",
    "end": "3278200"
  },
  {
    "text": "new entity that spawned somewhere else for example so you just reuse that slot and this is this is what Malo",
    "start": "3278200",
    "end": "3283799"
  },
  {
    "text": "implementations do this is what I was going to say this is kind of funny cuz like now we're full circle like we just built Malak and free right kind of yes",
    "start": "3283799",
    "end": "3291040"
  },
  {
    "text": "like when you take this problem to the extreme you're absolutely right like you end up at malok and free",
    "start": "3291040",
    "end": "3296880"
  },
  {
    "text": "they solved exactly this problem for the generic problem the difference really is that you're not solving generic problems",
    "start": "3296880",
    "end": "3303040"
  },
  {
    "text": "you're solving your problems and so a single free list is also like an extra",
    "start": "3303040",
    "end": "3308119"
  },
  {
    "text": "five lines of code or something like it's not hard to implement a single free list between fixed size things in a pool",
    "start": "3308119",
    "end": "3313760"
  },
  {
    "text": "for example yeah um and so once you have that that's like first thing then you",
    "start": "3313760",
    "end": "3319079"
  },
  {
    "text": "can start ramping up the difficulty you could say now I don't have fixed size things that I want to you know kind of release and free uh now I have strings",
    "start": "3319079",
    "end": "3326640"
  },
  {
    "text": "you could have variable length allocations the as you layer on more and more constraints it becomes more and",
    "start": "3326640",
    "end": "3332000"
  },
  {
    "text": "more maloc like my personal experience is I never really get to that malok level like it never has to become that",
    "start": "3332000",
    "end": "3337400"
  },
  {
    "text": "generic do you have to do some more complicated allocation things yes are they ever as complicated as maloc and",
    "start": "3337400",
    "end": "3342760"
  },
  {
    "text": "free no not really uh is I guess what I would say I mean that's not true for all",
    "start": "3342760",
    "end": "3348000"
  },
  {
    "text": "problems obviously I'm talking about like what I tend to work on and the problems that I see I don't tend to ever",
    "start": "3348000",
    "end": "3353599"
  },
  {
    "text": "need that complicated of an allocator obviously people are really pushing the boundary they will want a very fast",
    "start": "3353599",
    "end": "3359400"
  },
  {
    "text": "allocator and yeah at that point you would not do yourself a disservice by",
    "start": "3359400",
    "end": "3364920"
  },
  {
    "text": "grabbing uh M malok for example and using it which has very good performance for example and it also still has a um",
    "start": "3364920",
    "end": "3372400"
  },
  {
    "text": "many of these like newer malok libraries they don't they're not just Global which has a lot of problem like many of the",
    "start": "3372400",
    "end": "3377839"
  },
  {
    "text": "problems in malok and free are that they're a global allocator and so you can get like a scoped allocation instead",
    "start": "3377839",
    "end": "3383720"
  },
  {
    "text": "of passing in an arena you pass in a heap and that's that's now your handle to the to the whole malok allocator",
    "start": "3383720",
    "end": "3389720"
  },
  {
    "text": "structure if you need general purpose allocation use general purpose allocation but my experience is that usually you don't now I need to go read",
    "start": "3389720",
    "end": "3395920"
  },
  {
    "text": "up on I saw news a while back that like the go team was considering Arenas and I",
    "start": "3395920",
    "end": "3402160"
  },
  {
    "text": "have no idea how true that is but I'm now I'm C because like I I'm",
    "start": "3402160",
    "end": "3408640"
  },
  {
    "text": "imagining what it could look like and I could imagine there being some sort of like essentially Arena object that's",
    "start": "3408640",
    "end": "3414440"
  },
  {
    "text": "context like that you pass around and use and it's this interface with like push poop and free or whatever but that",
    "start": "3414440",
    "end": "3421039"
  },
  {
    "text": "you don't use it all the time like cuz obviously go by default is just like we'll do Heap allocations and get",
    "start": "3421039",
    "end": "3426960"
  },
  {
    "text": "garbage collected but like when you're trying to be like you said in like the the 90% or the 95% of cases like you can",
    "start": "3426960",
    "end": "3434240"
  },
  {
    "text": "get all these kind of performance benefits by you know explicitly going into an arena yeah yeah with with",
    "start": "3434240",
    "end": "3440319"
  },
  {
    "text": "something like go I would imagine that it would make more sense for either explicitly the performance case like you're talking about or as an",
    "start": "3440319",
    "end": "3445599"
  },
  {
    "text": "optimization certain garbage collector patterns I would be surprised if they hadn't done that already for the garbage collector but but yeah I mean there is a",
    "start": "3445599",
    "end": "3451079"
  },
  {
    "text": "performance win in C it's simultaneously a simple uh Simplicity win and a performance win so your allocation",
    "start": "3451079",
    "end": "3457280"
  },
  {
    "text": "problems get simpler and see when you do it if you're in a garbage collected language and you're kind of not thinking",
    "start": "3457280",
    "end": "3463640"
  },
  {
    "text": "about allocations anyways yeah your codee's already simple even though it's",
    "start": "3463640",
    "end": "3469640"
  },
  {
    "text": "magically being slow yeah right it's like not thinking about this problem at all so um you're not you're not going to",
    "start": "3469640",
    "end": "3475119"
  },
  {
    "text": "feel like it's simpler at first the actual code that's being executed is probably going to be simpler",
    "start": "3475119",
    "end": "3480319"
  },
  {
    "text": "like what the CPU has to do is going to be simpler but maybe you feel like there's this new burden on top of it so",
    "start": "3480319",
    "end": "3485760"
  },
  {
    "text": "I like that you say maybe you feel like there's a there definitely is a burden on the application developer it's it's",
    "start": "3485760",
    "end": "3493359"
  },
  {
    "text": "not made up I mean you still have to write more code CPUs don't have",
    "start": "3493359",
    "end": "3500200"
  },
  {
    "text": "feelings yeah yeah um that's definitely fair my my feeling on it is I would",
    "start": "3500400",
    "end": "3506799"
  },
  {
    "text": "rather spend a little bit more effort at the beginning of a project than getting to the end and noticing that the garbage",
    "start": "3506799",
    "end": "3512599"
  },
  {
    "text": "collector is too slow and being like well I got to write Arenas everywhere I guess like start start really trying to",
    "start": "3512599",
    "end": "3518960"
  },
  {
    "text": "put things into pools and just avoid the garbage collector at all costs I know I know that that happens a lot with like Unity games for example like a lot of",
    "start": "3518960",
    "end": "3526400"
  },
  {
    "text": "people have given talks and talked about how when it came time to ship they're like man this garbage collector is",
    "start": "3526400",
    "end": "3532000"
  },
  {
    "text": "killing us like this is not playable and so yeah what do you do it's like all right it's time to go rearchitecturing",
    "start": "3532000",
    "end": "3540240"
  },
  {
    "text": "so I love having these conversations because game developers web developers",
    "start": "3546200",
    "end": "3551559"
  },
  {
    "text": "like we're developers but we work in very different worlds in my experience",
    "start": "3551559",
    "end": "3558000"
  },
  {
    "text": "game developers are much more tolerant of Windows uh for example uh game developers typically have to think a lot",
    "start": "3558000",
    "end": "3564599"
  },
  {
    "text": "more about performance some times as web developers we like to tell ourselves that's not true um and there definitely",
    "start": "3564599",
    "end": "3571359"
  },
  {
    "text": "are web developers out there that have to think really really hard about performance but it's usually different like it's not graphics programming for",
    "start": "3571359",
    "end": "3577680"
  },
  {
    "text": "example and so I I guess all this to say like it can be really hard to start a project say with an engine that uses a",
    "start": "3577680",
    "end": "3584760"
  },
  {
    "text": "garbage collector get to the end of the project and realize that essentially your dependency the garbage collector is the thing that's making you slow and so",
    "start": "3584760",
    "end": "3591880"
  },
  {
    "text": "these days you prefer to kind of build bottom up totally get that in the web development world I would argue for",
    "start": "3591880",
    "end": "3598839"
  },
  {
    "text": "because so many projects you understand the scale of the piece of the web system",
    "start": "3598839",
    "end": "3605799"
  },
  {
    "text": "that you're building the risk of that happening is lower it still can happen famously Discord like got all sad",
    "start": "3605799",
    "end": "3614119"
  },
  {
    "text": "because their go servers were too slow and they decided to build them in Rust I'm still skeptical um of all the",
    "start": "3614119",
    "end": "3620599"
  },
  {
    "text": "details of that story but but uh I guess my point is like",
    "start": "3620599",
    "end": "3625720"
  },
  {
    "text": "there's different trade-offs when starting a project and it's just a different world I don't know yeah definitely I mean I I like having these",
    "start": "3625720",
    "end": "3632319"
  },
  {
    "text": "conversations too because there's a lot of unfortunate discourse which on both sides to be clear which tends to like",
    "start": "3632319",
    "end": "3639599"
  },
  {
    "text": "minimize the problems that the others are facing like oh that's web development like that's not real or oh that's game development that's very",
    "start": "3639599",
    "end": "3645520"
  },
  {
    "text": "specific that's not real like that's not what we have to deal with kind of thing the reality is is that we're both using computers we do have different problems",
    "start": "3645520",
    "end": "3652559"
  },
  {
    "text": "so it's not true that we're solving the same problems but a lot of things in Computing are pretty generalizable you",
    "start": "3652559",
    "end": "3658200"
  },
  {
    "text": "know I I think it's worthwhile to kind of have people from different different",
    "start": "3658200",
    "end": "3663359"
  },
  {
    "text": "kind of sub Industries to talk about stuff like this because it's like we're all program programming computers",
    "start": "3663359",
    "end": "3668480"
  },
  {
    "text": "techniques that work in one field they probably don't just work there actually they they probably can be applied elsewhere and I think I really like the",
    "start": "3668480",
    "end": "3675160"
  },
  {
    "text": "opportunity to talk about this stuff because I feel like that's there's probably a lot of insight to be gained just from people from different sub",
    "start": "3675160",
    "end": "3681400"
  },
  {
    "text": "Industries talking to each other because I think sometimes they don't tend to talk to each other and and so it's like Oh weird you guys do some you you guys",
    "start": "3681400",
    "end": "3687920"
  },
  {
    "text": "do this thing in game development like way different than we do over here and it's like yeah works great try it out and and I'm sure there's parallels to",
    "start": "3687920",
    "end": "3695079"
  },
  {
    "text": "for for web developers to the game to the game development world too so there are people rolling like you know pretty",
    "start": "3695079",
    "end": "3701520"
  },
  {
    "start": "3698000",
    "end": "4183000"
  },
  {
    "text": "crazy custom web stuff I don't want to say those people don't exist one thing",
    "start": "3701520",
    "end": "3706799"
  },
  {
    "text": "that I think is so cool about game development is that there's people like you that are like no actually you know",
    "start": "3706799",
    "end": "3713119"
  },
  {
    "text": "what I don't want to start with an engine like I'm going to build from the bottom up you know what I I I don't want",
    "start": "3713119",
    "end": "3719039"
  },
  {
    "text": "an engine you know what else I don't want I don't want to use this really high level function called Malik like",
    "start": "3719039",
    "end": "3724760"
  },
  {
    "text": "I'd prefer to stay away from that instead instead I'm going to build my own little Arena allocation system and",
    "start": "3724760",
    "end": "3730720"
  },
  {
    "text": "and to your point like you know you kept it simple and it works and I'm not saying that's that's bad or wrong it's just fascinating to me because it's so",
    "start": "3730720",
    "end": "3737880"
  },
  {
    "text": "different like no go program or building a web server that I'm ever aware of has been like you know what this garbage",
    "start": "3737880",
    "end": "3744200"
  },
  {
    "text": "collector thing like I'm just going to allocate like an array of fixed bites and like we're going to roll that to get",
    "start": "3744200",
    "end": "3752160"
  },
  {
    "text": "this web server working it's like there's different conventions and and mindsets and just it's almost like",
    "start": "3752160",
    "end": "3759319"
  },
  {
    "text": "cultural norms about like how you would start a project yeah for sure I think there's a lot of there's probably some",
    "start": "3759319",
    "end": "3765880"
  },
  {
    "text": "degree of historical accident to like the introduction of an arena allocator to solve an allocation problem makes",
    "start": "3765880",
    "end": "3771240"
  },
  {
    "text": "more sense in C if you're just sitting there thinking about the problem it makes more sense there than it does in a higher level language that has all of",
    "start": "3771240",
    "end": "3777880"
  },
  {
    "text": "this memory management Machinery built in to that point there's tons of libraries tons of stuff that's been built for web development for languages",
    "start": "3777880",
    "end": "3784839"
  },
  {
    "text": "other than c so it's it's not it's probably no coincidence that those libraries exist there and and people",
    "start": "3784839",
    "end": "3790559"
  },
  {
    "text": "aren't thinking about like C like problems there as well so I don't know of anyone writing like a like a custom",
    "start": "3790559",
    "end": "3796319"
  },
  {
    "text": "web server in C uh does anyone do that I mean arguably this is maybe not what you",
    "start": "3796319",
    "end": "3801839"
  },
  {
    "text": "would call Custom anymore but uh n Jinx was all I think but I guess that's what",
    "start": "3801839",
    "end": "3807240"
  },
  {
    "text": "I'm saying is like that's like an off-the-shelf like you know load balancer and file server right I mean",
    "start": "3807240",
    "end": "3813400"
  },
  {
    "text": "like you know my company's Json API like I don't know anyone building that in uh",
    "start": "3813400",
    "end": "3819359"
  },
  {
    "text": "prob C and I'm not sure that there's like I hate saying this CU I get very frustrated with website performance but",
    "start": "3819359",
    "end": "3825839"
  },
  {
    "text": "they probably don't have any reason to like there's probably good reasons for people to be doing what they're doing and as much as I want to like yell at",
    "start": "3825839",
    "end": "3832160"
  },
  {
    "text": "everyone and be like oh just do it better kind of thing it's like well change the incent and you change the outcomes kind of thing yeah I mean I",
    "start": "3832160",
    "end": "3838240"
  },
  {
    "text": "build some web stuff in C but it's not really a server like I I basically it's",
    "start": "3838240",
    "end": "3843319"
  },
  {
    "text": "more client side stuff where I'm doing I I I don't write my own like uh you know",
    "start": "3843319",
    "end": "3848599"
  },
  {
    "text": "definitely not like the security layer uh stuff and I don't have my own like HTTP part server after the security",
    "start": "3848599",
    "end": "3854799"
  },
  {
    "text": "layer stuff but I do write web stuff for managing like I have a Discord server and I have uh like striped subscriptions",
    "start": "3854799",
    "end": "3862440"
  },
  {
    "text": "and I also have a substack and I have to synchronize the state across all of those places like if I want subscribers",
    "start": "3862440",
    "end": "3867559"
  },
  {
    "text": "on substack whove subscribed via the stripe uh payment backend and I and if I want to somehow correlate those with uh",
    "start": "3867559",
    "end": "3874359"
  },
  {
    "text": "Discord usernames and also my private I don't know how to pronounce it gtia g gy whatever yeah Gia I don't know I say Gia",
    "start": "3874359",
    "end": "3881559"
  },
  {
    "text": "I don't know if it's right I I've kind of been hoping I've I've just not had to pronounce it I just read it and write it",
    "start": "3881559",
    "end": "3887000"
  },
  {
    "text": "and I'm good with that but but yeah here I am um so I run one instance of that and I want people who subscribe on the",
    "start": "3887000",
    "end": "3893240"
  },
  {
    "text": "suback for example to get access to both Discord stuff and also the the gdia",
    "start": "3893240",
    "end": "3898480"
  },
  {
    "text": "stuff and so I just write web stuff to like synchronize all those things and see but that's a simple problem that's",
    "start": "3898480",
    "end": "3903880"
  },
  {
    "text": "not like a web server kind of thing do stripe and Discord have sdks in C or did",
    "start": "3903880",
    "end": "3909319"
  },
  {
    "text": "you have to roll your own no I just did I just call the HTTP apis myself yeah so",
    "start": "3909319",
    "end": "3915920"
  },
  {
    "text": "I don't have I guess I'm not sure exactly what people do like I don't know if sdks are just calling the HTTP apis",
    "start": "3915920",
    "end": "3923720"
  },
  {
    "text": "under the hood I haven't done this stuff much so yeah they are under the hood it's just nice cuz like for example you're an a",
    "start": "3923720",
    "end": "3930359"
  },
  {
    "text": "statically typed language like go if you're using the official SDK you get like autocomplete of the available",
    "start": "3930359",
    "end": "3937599"
  },
  {
    "text": "function calls and stuff like that right yeah that makes sense but yeah it's just using their HTTP API under the hood I'm",
    "start": "3937599",
    "end": "3943760"
  },
  {
    "text": "pretty sure right okay unless theyve done like some Advanced RPC stuff that's hidden or something I don't know okay",
    "start": "3943760",
    "end": "3950559"
  },
  {
    "text": "yeah yeah that makes sense yeah I tend to do basically that like I'll call I'll do the http stuff myself and then I'll",
    "start": "3950559",
    "end": "3957559"
  },
  {
    "text": "just it's not technically a Json parser I have a more flexible Json like format that that I designed that I have a",
    "start": "3957559",
    "end": "3963039"
  },
  {
    "text": "parser for but it's but js's a subset of that form so just wait you made your",
    "start": "3963039",
    "end": "3968359"
  },
  {
    "text": "own yeah I mean we could I could I could Deep dive on that but um long story",
    "start": "3968359",
    "end": "3974799"
  },
  {
    "text": "short it's basically um a more flexible Json it's it's to me it's more comfortable for handwriting the reason",
    "start": "3974799",
    "end": "3980480"
  },
  {
    "text": "why I initially made it was not for data inter like uh data transfer like Json it was for very comfortable handwriting for",
    "start": "3980480",
    "end": "3986200"
  },
  {
    "text": "the purpose of metaprogramming in C and so that's why it's called metadesk um the point is Json is a syntactic subset",
    "start": "3986200",
    "end": "3993400"
  },
  {
    "text": "of this metadesk format and so I have a parser for for metadesk and so I can plug Json from these HTTP requests into",
    "start": "3993400",
    "end": "4000359"
  },
  {
    "text": "it and get my parse tree out and then I just used the metadesk trees that's like a pretty comfortable way for me in fact",
    "start": "4000359",
    "end": "4005839"
  },
  {
    "text": "I wrote the same thing in go first I'm not much of a go programmer um but I just I was like I assumed I'm doing web",
    "start": "4005839",
    "end": "4012279"
  },
  {
    "text": "stuff better use the language that people use for web stuff I know get I was doing gidea API stuff I could use the gidea code base as a reference I I",
    "start": "4012279",
    "end": "4019640"
  },
  {
    "text": "didn't end up doing that I just ended up doing it and go for basically no reason I mean it was it was fun like I got to",
    "start": "4019640",
    "end": "4025680"
  },
  {
    "text": "learn a little bit of go but my C version is shorter actually so like I wrote The Go code and I was like maybe",
    "start": "4025680",
    "end": "4031799"
  },
  {
    "text": "it was bad go like so you know I don't want to say like oh c is better than go for this or whatever because I don't",
    "start": "4031799",
    "end": "4036880"
  },
  {
    "text": "know I could have just done really crappy job of doing go but I wrote The Go version and I was like I really just",
    "start": "4036880",
    "end": "4042559"
  },
  {
    "text": "want this in my own code base all of my code is in c i is there for example and",
    "start": "4042559",
    "end": "4047799"
  },
  {
    "text": "um and I just wanted to do stuff that way and uh so I I just ported it to see it was not a particularly long program",
    "start": "4047799",
    "end": "4054559"
  },
  {
    "text": "like it was thousand lines or something like that yeah the C version was like 200 lines shorter and I'm like okay great like and now it's in a language I",
    "start": "4054559",
    "end": "4061319"
  },
  {
    "text": "I'm comfortable with so was it because gof fumed added new lines that's uh that",
    "start": "4061319",
    "end": "4066799"
  },
  {
    "text": "is interesting because go like obviously go is written by C people I can't think",
    "start": "4066799",
    "end": "4073039"
  },
  {
    "text": "of why it would be longer cuz you just strip out the allocations and it should",
    "start": "4073039",
    "end": "4078640"
  },
  {
    "text": "look pretty similar but I don't know yeah I mean even though I'm using I'm using system libraries uh for",
    "start": "4078640",
    "end": "4085680"
  },
  {
    "text": "HTTP uh requests but I anytime I do that anytime I'm talking to in this case I'm",
    "start": "4085680",
    "end": "4090960"
  },
  {
    "text": "I'm on Windows cuz game developers use Windows I'm so I'm using win HTTP but anytime I rely on a system like that I",
    "start": "4090960",
    "end": "4097238"
  },
  {
    "text": "always wrap it in my own abstraction and I do that so that you know I kind of control the abstraction I control the",
    "start": "4097239",
    "end": "4102520"
  },
  {
    "text": "code that's written to the abstraction I don't couple my code with a particular system's interface too much I do the",
    "start": "4102520",
    "end": "4107719"
  },
  {
    "text": "same thing yeah yeah I like to do that what I'll try to do is if I'm writing to for example when HTTP in this case I'll",
    "start": "4107719",
    "end": "4114758"
  },
  {
    "text": "try to investigate alternatives on other platforms so I have some model in my head of how this abstraction has to look",
    "start": "4114759",
    "end": "4120159"
  },
  {
    "text": "and then I'll build a first pass of it and then and then start start looping on it but yeah so I'm running to win HTTP and I built my own abstraction and I",
    "start": "4120159",
    "end": "4126640"
  },
  {
    "text": "noticed that just the the HTTP abstraction for me felt I wasn't super familiar with the go language semantics",
    "start": "4126640",
    "end": "4133960"
  },
  {
    "text": "of like like I don't know you have you have a string but that needs to be converted into a stream reader which I I",
    "start": "4133960",
    "end": "4142400"
  },
  {
    "text": "don't know don't ask me about Go stuff but point being it was like it just I kind of designed it to be a little bit more fluid for my for my codebase and",
    "start": "4142400",
    "end": "4148600"
  },
  {
    "text": "see I'm sure go people are like this guy's an idiot he could have just done X Y and Z or whatever there may have been",
    "start": "4148600",
    "end": "4155159"
  },
  {
    "text": "some standard Library things to use yeah maybe yeah yeah yeah and I I did that",
    "start": "4155159",
    "end": "4161838"
  },
  {
    "text": "like I would follow online resources and stuff to try to do this stuff and they're like you need like H man I wish I could remember more specific details",
    "start": "4161839",
    "end": "4168359"
  },
  {
    "text": "but yeah I mean I just I don't know and it ended up being simpler but that's probably mostly a familiarity kind of",
    "start": "4168359",
    "end": "4174199"
  },
  {
    "text": "thing just cuz it's in my codebase and I write all my game stuff in in this code base and now I wrote this web thing in",
    "start": "4174199",
    "end": "4179480"
  },
  {
    "text": "this code base so it was like you know it's just a lot more familiar to me well this has been awesome thanks so much for",
    "start": "4179480",
    "end": "4185480"
  },
  {
    "start": "4183000",
    "end": "4310000"
  },
  {
    "text": "coming on man I had a blast I knew vanishingly little about Arenas and now",
    "start": "4185480",
    "end": "4191318"
  },
  {
    "text": "I know a little bit more about Arena",
    "start": "4191319",
    "end": "4196679"
  },
  {
    "text": "yeah um oh go ahead sorry no I was just going to say like I want you to plug",
    "start": "4196679",
    "end": "4202000"
  },
  {
    "text": "your stuff like your substack let people know where they can find uh everything else that you've published um so they",
    "start": "4202000",
    "end": "4207239"
  },
  {
    "text": "can read more if they're interested if people are interested in in sort of a concrete codebase that uses Arena so if",
    "start": "4207239",
    "end": "4214719"
  },
  {
    "text": "they want to say like if they kind of understand the point and they're like I want to go see how these things are working in practice uh you can check out",
    "start": "4214719",
    "end": "4220560"
  },
  {
    "text": "the project I work on full-time professionally which is the rad debugger it's on get Hub it's just an open source",
    "start": "4220560",
    "end": "4226360"
  },
  {
    "text": "project completely it's all MIT licensed so uh people check that out we'll drop links to all these places yeah that code",
    "start": "4226360",
    "end": "4233120"
  },
  {
    "text": "Bas is something like 150,000 lines of C that's all built in this style so you can go see like how do they do string",
    "start": "4233120",
    "end": "4239120"
  },
  {
    "text": "stuff like how do they how do they allocate for this particular kind of problem um and it's a full graphical",
    "start": "4239120",
    "end": "4244320"
  },
  {
    "text": "application written that way so you can go look at it um if you want and then apart from that I've I've written one",
    "start": "4244320",
    "end": "4251480"
  },
  {
    "text": "fairly popular blog post on Arenas which tried to do my best job at introducing",
    "start": "4251480",
    "end": "4256760"
  },
  {
    "text": "the topic at the time and then I also gave one talk on it so and those are both on my substack which are at RF",
    "start": "4256760",
    "end": "4262040"
  },
  {
    "text": "fury.com which is RF l y.com and then aside from all the arena stuff there's",
    "start": "4262040",
    "end": "4267880"
  },
  {
    "text": "tons of other adjacent topics that I write about um stuff that I pick up as I as I work on the debugger and some of my",
    "start": "4267880",
    "end": "4274320"
  },
  {
    "text": "other projects I'll pull out lessons and try to try to package them up uh I did a whole series on UI programming for",
    "start": "4274320",
    "end": "4280800"
  },
  {
    "text": "example uh cuz I wrote all the UI for the debugger so it's that's that's what I've got to plug basically yeah and I guess Twitter or X it's Ryan J flurry so",
    "start": "4280800",
    "end": "4288520"
  },
  {
    "text": "it's Ryan and then J and then fle r y amazing go check out Ryan again thanks",
    "start": "4288520",
    "end": "4295040"
  },
  {
    "text": "so much for coming on man uh we'll talk to you later yeah thank you so much man appreciate it",
    "start": "4295040",
    "end": "4302638"
  },
  {
    "text": "[Music]",
    "start": "4303180",
    "end": "4308060"
  }
]