[
  {
    "text": "I didn't leave Java Java left",
    "start": "199",
    "end": "3679"
  },
  {
    "text": "[Music]",
    "start": "11830",
    "end": "25320"
  },
  {
    "text": "me before we jump into today's conversation I've got a recommendation Jonathan Hall a friend of mine who was",
    "start": "25320",
    "end": "31640"
  },
  {
    "text": "on the show 10 or so episodes back well he's got his own podcast that you should",
    "start": "31640",
    "end": "36879"
  },
  {
    "text": "definitely check out it's called cupo go and we do talk lot about go development",
    "start": "36879",
    "end": "42160"
  },
  {
    "text": "here on this podcast but we also talk about a lot of other stuff and cup a go is a great podcast if you really just",
    "start": "42160",
    "end": "48399"
  },
  {
    "text": "want to keep going deeper on the go programming language so cup a go go check them out they're on all the major",
    "start": "48399",
    "end": "54480"
  },
  {
    "text": "podcasting platforms and on YouTube Welcome to backend banter the show about backend Technologies and careers today I",
    "start": "54480",
    "end": "61399"
  },
  {
    "text": "am joined by John Bodner the author of learning go super excited to have him on",
    "start": "61399",
    "end": "66400"
  },
  {
    "text": "John do you want to take just a second and just a quick introduction who are you sure uh name is John Bodner been a",
    "start": "66400",
    "end": "72920"
  },
  {
    "text": "software engineer for over 25 years now hard to believe um currently a staff engineer at data dog I work on making it",
    "start": "72920",
    "end": "80360"
  },
  {
    "text": "easier for people to start using our products I've worked in probably every corner of software at this point um last",
    "start": "80360",
    "end": "87159"
  },
  {
    "text": "several years been focusing my career on go um excited about the language and I was lucky enough to be able to write a book on it for O'Reilly um came out in",
    "start": "87159",
    "end": "94920"
  },
  {
    "text": "2021 second edition is now due out January 20124 hey fantastic O'Reilly has written",
    "start": "94920",
    "end": "101960"
  },
  {
    "text": "I mean O'Reilly has published so many programming books it's really cool how did you get in with O'Reilly just out of",
    "start": "101960",
    "end": "108520"
  },
  {
    "text": "curiosity just go like hey I want to write a book on go I'm GNA go talk to O'Reilly I tried that it didn't work um",
    "start": "108520",
    "end": "113719"
  },
  {
    "text": "so it turns out like everything else in life it's kind of knowing people um so when I worked at Capital One my job as a",
    "start": "113719",
    "end": "120159"
  },
  {
    "text": "distinguished engineer was also giving conference talks was helping raise Capital one's reputation as a tech",
    "start": "120159",
    "end": "125520"
  },
  {
    "text": "company and I met Carmen Ando who was on the Google team work on the go team at",
    "start": "125520",
    "end": "130520"
  },
  {
    "text": "Google at a conference met her again at another conference and mentioned her in passing hey I'd love to write a book on",
    "start": "130520",
    "end": "136200"
  },
  {
    "text": "go and then at gophercon that same year she saw me in the hallway and said the O'Reilly editor is down the hall go talk",
    "start": "136200",
    "end": "142599"
  },
  {
    "text": "to her I told her the best person to write this book and so I met her and I met xan and we went to a baseball game",
    "start": "142599",
    "end": "149360"
  },
  {
    "text": "that night and that kind of sealed the deal I sent a proposal in and wrote a book that's amazing that's really cool I",
    "start": "149360",
    "end": "156400"
  },
  {
    "text": "didn't realize uh I mean I know nothing about the process I've never written a book uh seems like a big undertaking how",
    "start": "156400",
    "end": "162040"
  },
  {
    "text": "long did it take like start to finish let's see I guess I started it around September",
    "start": "162040",
    "end": "167480"
  },
  {
    "text": "201 18 19 September 2019 yeah okay um",
    "start": "167480",
    "end": "172720"
  },
  {
    "text": "the book was finished probably about a little bit more than a year later um published in March of 2021 okay a year a",
    "start": "172720",
    "end": "181519"
  },
  {
    "text": "little over a year I mean that's it's a it's a big book it's not for the faint of heart yeah yeah um yeah it was my",
    "start": "181519",
    "end": "188840"
  },
  {
    "text": "pandemic project it turned out some people baked bread I explain pointers I love that so what is it that",
    "start": "188840",
    "end": "195760"
  },
  {
    "text": "got you interested in go in the first place you mentioned you've been coding for 25 years but like go hasn't been",
    "start": "195760",
    "end": "202080"
  },
  {
    "text": "around that long no um so most of my career has actually spent on Java for the first",
    "start": "202080",
    "end": "207440"
  },
  {
    "text": "half so I first learned Java when I was in grad school jav 1.0 had come out I had a research project that was actually",
    "start": "207440",
    "end": "212799"
  },
  {
    "text": "hacking the jvm I was really into Java for a long time um but the language was",
    "start": "212799",
    "end": "218200"
  },
  {
    "text": "going places I didn't particularly like just like the style of programming was much more around this um annotation",
    "start": "218200",
    "end": "224480"
  },
  {
    "text": "driven style that was much more indirect so you didn't quite know what was going on in your code like Java was the first",
    "start": "224480",
    "end": "230360"
  },
  {
    "text": "time like o made sense to me so like it very logical procedural way of simplified language language was getting",
    "start": "230360",
    "end": "236040"
  },
  {
    "text": "more complex techniques were getting more dynamic in a way um harder to understand exactly what your code was",
    "start": "236040",
    "end": "241560"
  },
  {
    "text": "doing and then I saw the first go demo like when they first announced it in I guess 2010 2011 2010 yeah that sounds",
    "start": "241560",
    "end": "248439"
  },
  {
    "text": "right and I saw the demo where they showed we can compile the whole thing in like five minutes I was like this is",
    "start": "248439",
    "end": "253680"
  },
  {
    "text": "pretty cool and the names from it you know I grew up around Unix and like oh these are these are the Unix people who",
    "start": "253680",
    "end": "259519"
  },
  {
    "text": "are doing this this there's probably something here and the style for development was back to this very simple",
    "start": "259519",
    "end": "265080"
  },
  {
    "text": "basic again Unix kind of inspired style of build something small and practical that does something well and get rid of",
    "start": "265080",
    "end": "271479"
  },
  {
    "text": "a lot of the fluff and right it was it's like I didn't leave Java Java left me",
    "start": "271479",
    "end": "276520"
  },
  {
    "text": "and so go just kind of fit how I think about how you program and I just found it an attractive way to do things that's",
    "start": "276520",
    "end": "282680"
  },
  {
    "text": "really interesting to hear when you say indirect you said you know the way you",
    "start": "282680",
    "end": "288560"
  },
  {
    "text": "felt you were writing Java over the years or maybe the way that you were expected to write Java over the years felt more and more indirect what could",
    "start": "288560",
    "end": "294680"
  },
  {
    "text": "you give some examples of of what you mean by that yeah I think lot of this is really driven by Spring and it's ation",
    "start": "294680",
    "end": "299880"
  },
  {
    "text": "driven style of programming where you have dependencies that are not explicit they're implicit so you just declare you",
    "start": "299880",
    "end": "305039"
  },
  {
    "text": "autowire a bunch of stuff you do class path scanning and load your code in um I",
    "start": "305039",
    "end": "310199"
  },
  {
    "text": "actually hit problems at work sometimes where you have this class that was declared to be have be Auto wire with a",
    "start": "310199",
    "end": "316960"
  },
  {
    "text": "certain class implement this interface and you just sort of knew there's only be one implementation that's available well turned out we happened to write a",
    "start": "316960",
    "end": "322800"
  },
  {
    "text": "second library that was pulled in which implemented the same interface and everything now blows up and everything",
    "start": "322800",
    "end": "329560"
  },
  {
    "text": "piles everything builds everything deploys and you try to run it and it dies why because somewhere somewhere",
    "start": "329560",
    "end": "334600"
  },
  {
    "text": "else someone added a second implementation that's on your class path now and the only way you discover this is by running",
    "start": "334600",
    "end": "340240"
  },
  {
    "text": "it that's really interest that's like I I'm having a hard time wrapping my brain around why would like thirdparty code",
    "start": "340240",
    "end": "346720"
  },
  {
    "text": "implementing your interface blow anything up it was both first Parts different teams building the same thing",
    "start": "346720",
    "end": "352880"
  },
  {
    "text": "and someone else built this other implementation the same interface but this class was declared to look for one and there's no discriminator put on",
    "start": "352880",
    "end": "359280"
  },
  {
    "text": "saying oh this is the one I really meant which once you're doing that just put the just put the dependency in there directly right why have this layer of",
    "start": "359280",
    "end": "365520"
  },
  {
    "text": "indirection um when I was a cap one there's a framework called chassis that's used internally to build Java",
    "start": "365520",
    "end": "370800"
  },
  {
    "text": "applications and Chassis was used for everything it lowered the bar of difficulty but when something went wrong with it no one could actually tell you",
    "start": "370800",
    "end": "377680"
  },
  {
    "text": "sometimes what was actually going wrong because there all these layers and layers of things calling things that you couldn't figure out and I mean people",
    "start": "377680",
    "end": "384400"
  },
  {
    "text": "are very successful using Java it's still one the most popular language in the world I can't say it doesn't work because clearly it works but",
    "start": "384400",
    "end": "390039"
  },
  {
    "text": "my mental model doesn't fit with it well got it so so you were early into go then",
    "start": "390039",
    "end": "395639"
  },
  {
    "text": "pretty early I mean I wasn't getting paid to do it until probably like 2015 2016 2016 I guess wow but you heard",
    "start": "395639",
    "end": "402639"
  },
  {
    "text": "about it I mean back in 2010 that's like or 2011 that's super early so what were you doing just like building side",
    "start": "402639",
    "end": "409039"
  },
  {
    "text": "projects fun stuff yeah I I was learning I was running little tools there I WR a version of lisp that's up in my GitHub",
    "start": "409039",
    "end": "415240"
  },
  {
    "text": "repo just to like learn how to build it was just to like see what goes like and so I a lis",
    "start": "415240",
    "end": "420360"
  },
  {
    "text": "um it's very small no you can't use it for anything um but it's just like what's the smallest thing you can do as a project to like get a feel for a",
    "start": "420360",
    "end": "425960"
  },
  {
    "text": "language I feel like there's two kinds of programmers there's programmers that will build a lisp in a language for fun",
    "start": "425960",
    "end": "432319"
  },
  {
    "text": "and then programmers that won't and you seem to very concretely fall into the",
    "start": "432319",
    "end": "437919"
  },
  {
    "text": "the the group of people that will I'm a PhD student so yeah well I",
    "start": "437919",
    "end": "444199"
  },
  {
    "text": "think it's a fantastic place to be like if if you're in that camp the the camp that will just build a list for fun like",
    "start": "444199",
    "end": "449960"
  },
  {
    "text": "you're you're probably never going to struggle with employment I would imagine I hope",
    "start": "449960",
    "end": "455479"
  },
  {
    "text": "so there's my yeah there's my my prophecy we can check back in in 10 years or so cool no so this is really",
    "start": "455479",
    "end": "464360"
  },
  {
    "text": "cool um like I said I've never written a book myself um pretty much everything I've done in ter in like the education",
    "start": "464360",
    "end": "471039"
  },
  {
    "text": "space in go has been like kind of more like articles so it's like all text based for the most part maybe a few videos but I've always had this",
    "start": "471039",
    "end": "477360"
  },
  {
    "text": "advantage that like I publish article or I publish a page on a website and I say",
    "start": "477360",
    "end": "483080"
  },
  {
    "text": "something that I'd rather word a different way or God forbid is actually Incorrect and I need to go update it um",
    "start": "483080",
    "end": "490039"
  },
  {
    "text": "I can just go update it really quickly like I've never published something in print uh is that a stressful thing like",
    "start": "490039",
    "end": "496800"
  },
  {
    "text": "you go publish this big book and then I imagine if it were me afterwards I'd go back and read it and be like ah I wish I",
    "start": "496800",
    "end": "502479"
  },
  {
    "text": "would have like said this a little bit differently have you ever had any experiences like that yeah there was there was one thing actually um one the",
    "start": "502479",
    "end": "509280"
  },
  {
    "text": "example in the and this is why this is part of the reason why there is a second edition um",
    "start": "509280",
    "end": "514800"
  },
  {
    "text": "is as you're getting towards towards the end of the book I kind like I'm kind of done um I just want this book to be",
    "start": "514800",
    "end": "520120"
  },
  {
    "text": "finished and I had lots of great reviewers one of them said you know this example in your concurrency chapter is",
    "start": "520120",
    "end": "525640"
  },
  {
    "text": "kind of terrible I'm like I'm not gonna pay any attention to you I'm gonna write I publish in this book and then I",
    "start": "525640",
    "end": "531680"
  },
  {
    "text": "started doing some um um presentations based around the content in the book and I was doing like presentations to",
    "start": "531680",
    "end": "536760"
  },
  {
    "text": "different groups and I said oh I have concurrency chapter I'll do a presentation on concurrency and I'm like",
    "start": "536760",
    "end": "542079"
  },
  {
    "text": "ah got this great example the end of the chapter I'll use that for my talk and I start using I'm like oh my God this example's awful this this is the worst",
    "start": "542079",
    "end": "549640"
  },
  {
    "text": "uh I can't explain this at all and I'm like Robert was right um so um but of",
    "start": "549640",
    "end": "557120"
  },
  {
    "text": "course that point book's published it's too late second edition fixes the example and so I threw it out for that for that slide deck I threw out the",
    "start": "557120",
    "end": "563279"
  },
  {
    "text": "example from the book wrote a second one that did the exact same thing only in a comprehensible way and in the book",
    "start": "563279",
    "end": "568560"
  },
  {
    "text": "second edition of the book that's the example that I used examples are hard man I I mean that that's one thing I",
    "start": "568560",
    "end": "575000"
  },
  {
    "text": "have done a lot of is just written tons and tons of examples and it's not easy",
    "start": "575000",
    "end": "580800"
  },
  {
    "text": "and I feel like um and I do feel like you do this well I I did read through the book um I think a lot of people",
    "start": "580800",
    "end": "588000"
  },
  {
    "text": "don't do examples well I have a lot of pet peeves around examples um things like very simple like Foo bar type",
    "start": "588000",
    "end": "597040"
  },
  {
    "text": "implementations uh that's stuff works for me the like you know x equals Fu um",
    "start": "597040",
    "end": "603519"
  },
  {
    "text": "when you're writing for more experienced developers that like really just want like give me the raw syntax um but I",
    "start": "603519",
    "end": "610519"
  },
  {
    "text": "work with a lot of newer developers and I sometimes really struggle to come up with um sometimes you have to get a little creative to like okay I'm trying",
    "start": "610519",
    "end": "617440"
  },
  {
    "text": "to explain concurrency but I'm also trying to explain it in such a way that someone who's never actually done concurrency before can understand why",
    "start": "617440",
    "end": "624240"
  },
  {
    "text": "it's useful because that that sometimes is even the the harder uh thing in my",
    "start": "624240",
    "end": "629360"
  },
  {
    "text": "mind is there anything that you ran into when you were writing the book in",
    "start": "629360",
    "end": "635079"
  },
  {
    "text": "particular that you had like pet peeves about in other people's writings that you wanted to improve",
    "start": "635079",
    "end": "641480"
  },
  {
    "text": "on that's let's see um the example one is a little bit of it um I don't want to",
    "start": "641480",
    "end": "646760"
  },
  {
    "text": "bad mouth the book um like there's like the go programming language book like the book that that you know Brian kernigan writes and it uses these",
    "start": "646760",
    "end": "654399"
  },
  {
    "text": "examples that are kind of weird um it's a it's a i it was actually the book I used a reference while I was working I",
    "start": "654399",
    "end": "660079"
  },
  {
    "text": "wanted to make sure I wasn't like copying somebody else's stuff inadvertently but that one was just so good I would actually use that one to",
    "start": "660079",
    "end": "665279"
  },
  {
    "text": "back and check and make sure I wasn't just making stuff up yeah um but it had some examples in the book that were just like kind of like out there but the",
    "start": "665279",
    "end": "671480"
  },
  {
    "text": "target audience wasn't beginning developers and which is very hard place to be when you're trying to do this and it's hard when you're writing a book to",
    "start": "671480",
    "end": "678040"
  },
  {
    "text": "Target who know who you're talking to in the first place um I was very intentionally trying to Target more",
    "start": "678040",
    "end": "683600"
  },
  {
    "text": "experienced developers who already knew a language or two because otherwise there's things you explain and things",
    "start": "683600",
    "end": "688680"
  },
  {
    "text": "you just don't explain I can kind of skip over and assume knowledge of and that that helps a lot because it does like you said level up the levels up",
    "start": "688680",
    "end": "694880"
  },
  {
    "text": "your examples levels up your language too right you can use simpler well I should say more concise words right to",
    "start": "694880",
    "end": "701680"
  },
  {
    "text": "explain the same concept you you have a common understanding a common vocabulary you can start from um the pointer",
    "start": "701680",
    "end": "707120"
  },
  {
    "text": "chapter actually was the one where that was probably the hardest thing to solve because a lot maybe even most developers",
    "start": "707120",
    "end": "712839"
  },
  {
    "text": "today really are unaware of pointers and probably a little bit afraid of it when they hear about it and so I had to like",
    "start": "712839",
    "end": "718160"
  },
  {
    "text": "spend a part of that chapter explaining you've already been using pointers like there's nothing scary about them in fact is not having pointers sometimes is",
    "start": "718160",
    "end": "724720"
  },
  {
    "text": "actually the thing that's unusual that's going on here so trying to trying to find a way to gently break people into",
    "start": "724720",
    "end": "730440"
  },
  {
    "text": "the concepts that was hardest one I think to do the funny thing to me is like a lot of the scariest stuff when it",
    "start": "730440",
    "end": "736240"
  },
  {
    "text": "comes to pointers and and like references if you get a little if you widen the net a little bit um you run",
    "start": "736240",
    "end": "742560"
  },
  {
    "text": "into another languages like when I teach python right like you can just change lists uh and it will alter weird parts",
    "start": "742560",
    "end": "749600"
  },
  {
    "text": "of your program that you weren't expecting it to um and when I tell people that go has pointers one of the",
    "start": "749600",
    "end": "755639"
  },
  {
    "text": "things I very quickly say is but no point to arithmetic right sort of I I Do cover",
    "start": "755639",
    "end": "762480"
  },
  {
    "text": "the last chapter of my book is the fun stuff and was the second and last chapter in the first edition it's now the last chapter in the second edition",
    "start": "762480",
    "end": "768480"
  },
  {
    "text": "it's all the dangerous things you can do and go there is unsafe which lets you do pointer arithmetic um but it's it's it's",
    "start": "768480",
    "end": "775399"
  },
  {
    "text": "the chapter is called he there be dragons um yeah yeah that's scary I I haven't uh in fact that was that was",
    "start": "775399",
    "end": "781639"
  },
  {
    "text": "going to be one of my questions I was reading through your book and I got to the section on the go-to keyword yes and",
    "start": "781639",
    "end": "787160"
  },
  {
    "text": "I'm like I forgot go has go-to in it uh no one uses this thing nope why do you",
    "start": "787160",
    "end": "795959"
  },
  {
    "text": "have it do you know why like why do we have this thing in this language it's a it's a modern language dyra warned us",
    "start": "795959",
    "end": "801560"
  },
  {
    "text": "about go-to statements like 50 years ago what are we doing here so what dyra",
    "start": "801560",
    "end": "807320"
  },
  {
    "text": "warned us about is not what go does so Go's goto is very well behaved it's like",
    "start": "807320",
    "end": "812880"
  },
  {
    "text": "the pointers where they sit there and kind of like made it tame um one of the problems with go-to is like you may skip",
    "start": "812880",
    "end": "818680"
  },
  {
    "text": "with like C for example or other or just doing a jump in Assembly Language is you may skip over a variable initialization",
    "start": "818680",
    "end": "824800"
  },
  {
    "text": "you may skip out of context and so it's kind of you've you've lost the thread right you can do the long jump out of",
    "start": "824800",
    "end": "829920"
  },
  {
    "text": "things and have to come back so what goes go to does it says if you try to jump over a variable declaration says",
    "start": "829920",
    "end": "835839"
  },
  {
    "text": "Nope compiler will catch it and say you can't do that it's it's intended to basically it's it's basically intended",
    "start": "835839",
    "end": "842320"
  },
  {
    "text": "for math operations where you have some complicated algorithm and there's some common cleanup code that's going to happen at the very end so I'm going to",
    "start": "842320",
    "end": "848399"
  },
  {
    "text": "do some stuff if this situation happens bail early and jump to this common cleanup code otherwise keep on processing and do the other stuff um",
    "start": "848399",
    "end": "856560"
  },
  {
    "text": "It's just sometimes it's easier to do it this way that have like a bunch of if else's and booleans you have goto in the language you declare a Boolean variable",
    "start": "856560",
    "end": "862480"
  },
  {
    "text": "and then declare that Boolean and break out of a bunch of things to a label and then put an if statement wrapping some",
    "start": "862480",
    "end": "867560"
  },
  {
    "text": "code it's actually worse if you didn't have go-to in those situations but realistically speaking you're not going",
    "start": "867560",
    "end": "873639"
  },
  {
    "text": "to use it it was kind of cool to show it in a language and show it a safe go-to it look like but um yeah I'd be I've",
    "start": "873639",
    "end": "879639"
  },
  {
    "text": "never run across someone using it for real production yeah that example is interesting to me yeah I I don't think",
    "start": "879639",
    "end": "884800"
  },
  {
    "text": "I've ever even seen it let alone uh write it yeah I I had do a",
    "start": "884800",
    "end": "891320"
  },
  {
    "text": "search to the standard library to find a couple examples just to like show it does exist just to find it yeah that makes sense I that example you gave is",
    "start": "891320",
    "end": "898320"
  },
  {
    "text": "really interesting to me though because it sounds like something the defer keyword would maybe handle is that am I",
    "start": "898320",
    "end": "904160"
  },
  {
    "text": "missing something there I mean defer is a little bit different defer is meant for different kind of cleanup um it's",
    "start": "904160",
    "end": "910279"
  },
  {
    "text": "it's also function based it's not block based so often times you don't want to have um the defer works when it's when",
    "start": "910279",
    "end": "919079"
  },
  {
    "text": "your function's bounded you're like finished with the function you're done you want to clean up on exit a function but right often times it's actually a",
    "start": "919079",
    "end": "925079"
  },
  {
    "text": "thing that catches people sometimes then refactor their code they'll have like a loop that's creating F opening files or",
    "start": "925079",
    "end": "930880"
  },
  {
    "text": "something they'll put a defer close and they're not actually closing until you actually leave the function which is not what they intended to do um it's you can",
    "start": "930880",
    "end": "938120"
  },
  {
    "text": "do it you can do something bad and go like create like a a closure right there in place use that as a block and then you attach a defer to that that's that's",
    "start": "938120",
    "end": "944240"
  },
  {
    "text": "ugly it's kind of not really what you should do just put the defer there and be done with you should just put the clothes there and be done with it not",
    "start": "944240",
    "end": "949399"
  },
  {
    "text": "try to use a defer in that situation that makes sense I found myself wanting to put a defer in a loop quite a few",
    "start": "949399",
    "end": "956759"
  },
  {
    "text": "times and but usually like the right answer is like actually let's make this thing its own function uh and then call",
    "start": "956759",
    "end": "963360"
  },
  {
    "text": "that in the loop right that that's kind of the nice thing when when you see like a code smell like go go is push you in a",
    "start": "963360",
    "end": "968920"
  },
  {
    "text": "direction of how it wants you to write your code and if you find yourself fighting the language this is true in every language like it's just not it's",
    "start": "968920",
    "end": "974680"
  },
  {
    "text": "not just go it's it's every language that treats it this way that when you find yourself fighting the language you're probably doing the wrong thing",
    "start": "974680",
    "end": "980680"
  },
  {
    "text": "you're probably writing your code in a worse way this would be harder for other people to read yeah no I I completely",
    "start": "980680",
    "end": "985959"
  },
  {
    "text": "agree I I've worked with so this is actually funny um I I didn't realize that you had you know so much experience",
    "start": "985959",
    "end": "992600"
  },
  {
    "text": "in Java or that you had a Java background coming in to go um most developers that I have worked with",
    "start": "992600",
    "end": "998959"
  },
  {
    "text": "coming into to go from JavaScript or even python tend to have a good time and",
    "start": "998959",
    "end": "1004759"
  },
  {
    "text": "oftentimes the people I've worked with that are coming from java tend to have a bad time not because like they can't handle it it's not that they just like",
    "start": "1004759",
    "end": "1011600"
  },
  {
    "text": "don't like it right it's very different than than where they're coming from in the Java world so I'm I'm a little",
    "start": "1011600",
    "end": "1018079"
  },
  {
    "text": "curious what your perspective is just just on that shift of just coming from",
    "start": "1018079",
    "end": "1023839"
  },
  {
    "text": "java to go I I think it's the love of magic um again this I I left Java",
    "start": "1023839",
    "end": "1029038"
  },
  {
    "text": "because I didn't like the magic but I started like in C I started into Pascal and c and assembly and you know old",
    "start": "1029039",
    "end": "1035280"
  },
  {
    "text": "school stuff so when I see I like the go go feels to me like a better SE I mean",
    "start": "1035280",
    "end": "1041480"
  },
  {
    "text": "the people who built it again with the people who built a lot of them people who built sea in the first place so it's like they went back after 40 50 years",
    "start": "1041480",
    "end": "1047160"
  },
  {
    "text": "and said what do we do wrong What could we fix today what are the things that have made C programming so painful and they said oh these are the things and",
    "start": "1047160",
    "end": "1054840"
  },
  {
    "text": "that's a DA different mindset than Java where with the objects in the virtual in Virtual dispatch um",
    "start": "1054840",
    "end": "1061320"
  },
  {
    "text": "annotations um it it's just a different style and philosophy of development and I like what Java could do for me um yeah",
    "start": "1061320",
    "end": "1068720"
  },
  {
    "text": "and then I stopped liking what Java like I said got too complicated to do the things I want to do and the fact that every version of java is adding more and",
    "start": "1068720",
    "end": "1075039"
  },
  {
    "text": "more functionality in every single release you just can't you just can't know the whole language anymore um I",
    "start": "1075039",
    "end": "1081400"
  },
  {
    "text": "think I was described as like lava flow development patterns you can tell like what year some Java code is written based on the features they're using and",
    "start": "1081400",
    "end": "1087440"
  },
  {
    "text": "this this this year the new the new style is going to be this functionality so we have these features in our code oh",
    "start": "1087440",
    "end": "1092760"
  },
  {
    "text": "wait this year the new features are these features so we're gonna have this functionality in the code just like go back through like old code that you're maintaining and say Ah that's a 2015",
    "start": "1092760",
    "end": "1099640"
  },
  {
    "text": "Edition I can tell that's the feel I get in I've done a lot more JavaScript than I have Java",
    "start": "1099640",
    "end": "1106240"
  },
  {
    "text": "um but it's a similar thing right like when let and const came out it was like immediately all the new JavaScript code",
    "start": "1106240",
    "end": "1111960"
  },
  {
    "text": "uses these keywords to declare variables whereas you know you back up and it's VAR um yeah that that presents an",
    "start": "1111960",
    "end": "1119159"
  },
  {
    "text": "interesting problem for like finding answers online uh especially as a as a",
    "start": "1119159",
    "end": "1125400"
  },
  {
    "text": "newer developer right you find yourself Googling for things and happening upon old stack overflows that like sometimes",
    "start": "1125400",
    "end": "1131840"
  },
  {
    "text": "the code still works but it's very often there's a much better way to do it like now um and at least to me me it seems",
    "start": "1131840",
    "end": "1138799"
  },
  {
    "text": "like go doesn't have at least that as much of a problem with that it's been around for what 12 years now um and it",
    "start": "1138799",
    "end": "1147320"
  },
  {
    "text": "seems to just be a little it moves slower it does so um I did a talk in",
    "start": "1147320",
    "end": "1152960"
  },
  {
    "text": "2020 called go is boring and that's fantastic um and it was all about how most of go features date from the 1970s",
    "start": "1152960",
    "end": "1159960"
  },
  {
    "text": "and the reason why they were chosen is because they kind of work and everyone kind of knows that they're that they are good um and I use the analogy the book",
    "start": "1159960",
    "end": "1166600"
  },
  {
    "text": "appears in the my book really briefly too that when you're building a bridge like bridges are important things you've building them for like 5,000 7,000 years",
    "start": "1166600",
    "end": "1173360"
  },
  {
    "text": "we've been building bridges and we expect them just to work bridge is really boring but it's kind of exciting how Mo if a bridge fails that's huge",
    "start": "1173360",
    "end": "1180400"
  },
  {
    "text": "news yeah if a program works the first time that's huge news and that's a little scary right",
    "start": "1180400",
    "end": "1187280"
  },
  {
    "text": "like we don't get second chances at Bridges and we don't want people building Bridge with exciting new things",
    "start": "1187280",
    "end": "1192400"
  },
  {
    "text": "we want boring stable things that we're sure you don't be the first guy to drive over that bridge that someone this is a",
    "start": "1192400",
    "end": "1198080"
  },
  {
    "text": "really really cool idea I think it's going to work I've never tried it before but trust me right that that's not my",
    "start": "1198080",
    "end": "1203200"
  },
  {
    "text": "bridge I'll take a boat um so go is go is intentionally like that and there",
    "start": "1203200",
    "end": "1209559"
  },
  {
    "text": "have been changes the tooling around go has changed a bunch over time especially that's been the big change and I've got a couple call outs in the book where I",
    "start": "1209559",
    "end": "1215480"
  },
  {
    "text": "said this is the old way of doing things don't do this anymore you see things online telling you to build you using um",
    "start": "1215480",
    "end": "1221240"
  },
  {
    "text": "the centralized directory for it don't do that use modules um but there have been changes recently so generics was",
    "start": "1221240",
    "end": "1227480"
  },
  {
    "text": "the was the first big change that happened to the language but it was designed to be backwards compatible and it's mostly invisible um the standard",
    "start": "1227480",
    "end": "1233840"
  },
  {
    "text": "Library didn't actually add anything generic until I think the last release till like um 121 and now 122 is actually",
    "start": "1233840",
    "end": "1241039"
  },
  {
    "text": "introducing something pretty interesting which is the first backwards breaking change but it's only it's an optin backwards breaking change also so it's",
    "start": "1241039",
    "end": "1248720"
  },
  {
    "text": "kind of f read about this can you can you elaborate do you have it yeah I I was racing my book against this being",
    "start": "1248720",
    "end": "1254840"
  },
  {
    "text": "announced this is like I delayed the book by a little bit to make sure this this was actually going to happen so I was cover it in the book um for loops",
    "start": "1254840",
    "end": "1261080"
  },
  {
    "text": "and go for Loops in in most languages um you reuse you declare a variable you have you know your I equals 0 to 10 that",
    "start": "1261080",
    "end": "1267720"
  },
  {
    "text": "I is declared once and you re every time you Loop through the every time you go through the loop you're copying the",
    "start": "1267720",
    "end": "1273760"
  },
  {
    "text": "value into that same variable over and over again so you create the variable exactly once and that worked fine until",
    "start": "1273760",
    "end": "1279559"
  },
  {
    "text": "you got to closures and especially when you got to concurrency so ghost concurrency models built around launch en closures into their own threads of",
    "start": "1279559",
    "end": "1286039"
  },
  {
    "text": "execution called go routines yeah and if you because they're but it's called a closure because it closes over the the",
    "start": "1286039",
    "end": "1292400"
  },
  {
    "text": "environment which includes making keeping a reference to those variables that have been used so if you have a loop this is a very common thing to do",
    "start": "1292400",
    "end": "1298600"
  },
  {
    "text": "I'm launching a bunch of goutin to go do some work for me I have an index variable and I and I C I pass that index",
    "start": "1298600",
    "end": "1304679"
  },
  {
    "text": "use that index variable directly inside of each of those go routines that they're being launched and conceptually you look at that you say oh I've G to",
    "start": "1304679",
    "end": "1311279"
  },
  {
    "text": "pass a different value in each of those gur routines but you're not because you passed a reference to the same variable",
    "start": "1311279",
    "end": "1316480"
  },
  {
    "text": "into all the gur routines and when what they actually get is the last value assigned to it by the time the gtin get a chance to run and when this happens in",
    "start": "1316480",
    "end": "1323919"
  },
  {
    "text": "production code it's pretty bad but you notice it relatively quickly the really pernicious thing is it happens in test codes you run your test in parallel and",
    "start": "1323919",
    "end": "1330640"
  },
  {
    "text": "you think you're testing a bunch of different values you're not you're just testing that last value in your test the whatever I the largest value of I",
    "start": "1330640",
    "end": "1338360"
  },
  {
    "text": "typically right exactly right and so the go team realized they made a mistake in",
    "start": "1338360",
    "end": "1344520"
  },
  {
    "text": "the language when they did this and so they went through like every bit of code they could possibly find and they could",
    "start": "1344520",
    "end": "1349559"
  },
  {
    "text": "not find a single example where someone did this intentionally like they really wanted that behavior and so I talked to",
    "start": "1349559",
    "end": "1355000"
  },
  {
    "text": "a bunch of people turns out that c r into this issue about five 10 years ago I'm not a c developer and they just said",
    "start": "1355000",
    "end": "1360720"
  },
  {
    "text": "forget it we're just going to break the language from now on every time you iterate through a forward Loop creting a brand new variable and they took a",
    "start": "1360720",
    "end": "1367440"
  },
  {
    "text": "little bit of pain and everyone loved it and went on but go had this mechanism with",
    "start": "1367440",
    "end": "1372760"
  },
  {
    "text": "modules they want to forward and backwards compatibility and so in your go mod file you declare the version of go your using this is module by module",
    "start": "1372760",
    "end": "1379400"
  },
  {
    "text": "so you're bring a third party code it applies also and so what they're doing starting at 122 is based on the value",
    "start": "1379400",
    "end": "1385520"
  },
  {
    "text": "the the the value of go assigned in the in your go mod file it decides what the behavior is going to be for a for Loop",
    "start": "1385520",
    "end": "1391720"
  },
  {
    "text": "so if it's 122 or higher you get the new Behavior where will create a new variable each time if it's 121 or",
    "start": "1391720",
    "end": "1397120"
  },
  {
    "text": "earlier you get the old Behavior where it creates only a variable once and so this way your old code doesn't change",
    "start": "1397120",
    "end": "1403240"
  },
  {
    "text": "your new code will change but you won't be caught unintentionally doing it so if you want to fix your code bump the Go",
    "start": "1403240",
    "end": "1408440"
  },
  {
    "text": "version in your mod file and you get the new Behavior but it's it's this really clever idea of how do I how do I revise",
    "start": "1408440",
    "end": "1414039"
  },
  {
    "text": "my language and fix big mistakes but not break anybody and C didn't have that functionality",
    "start": "1414039",
    "end": "1420279"
  },
  {
    "text": "available I love that it's it sounds amazing in user space like as a user of",
    "start": "1420279",
    "end": "1425840"
  },
  {
    "text": "the go programming language it sounds like a pain in the ass as a maintainer like now you have to build the B the",
    "start": "1425840",
    "end": "1432320"
  },
  {
    "text": "like the go tooling to actually deal with that right you do and they've actually trying to give me very good",
    "start": "1432320",
    "end": "1438240"
  },
  {
    "text": "about backwards compatibility there's a variable called go debug you can set when you launch your programs and go",
    "start": "1438240",
    "end": "1443559"
  },
  {
    "text": "debug let you actually control like they they've promise backwards compatibility goes as very compatibility promise but",
    "start": "1443559",
    "end": "1449480"
  },
  {
    "text": "sometimes they have to tweak algorithms in ways that would still meet the compatibility promise but they may have some unexpected behaviors and oftentimes",
    "start": "1449480",
    "end": "1456400"
  },
  {
    "text": "it means it broke kubernetes is really what they care about because kubernetes is probably the biggest thing written in",
    "start": "1456400",
    "end": "1461640"
  },
  {
    "text": "yeah and so there's now this go debug flag that says okay here's the thing I changed like like TLS rules for for",
    "start": "1461640",
    "end": "1467919"
  },
  {
    "text": "example there's been a few other ones that have happened and when we make these changes we promise that this flag",
    "start": "1467919",
    "end": "1473000"
  },
  {
    "text": "is going to still work for like two years I for the actual rule was we make go back and revisit this but if you set it you'll get the old Behavior still if",
    "start": "1473000",
    "end": "1479480"
  },
  {
    "text": "you don't set it you get the new behavior and this again to support this is kind of a pain for the go team",
    "start": "1479480",
    "end": "1484799"
  },
  {
    "text": "they've got to actually have these multiple pads in the code base but they want to guarantee that backwards compatibility because it is software",
    "start": "1484799",
    "end": "1491120"
  },
  {
    "text": "engineering right it is something that has to last for a long time and you can't just break people like this is something I think that's hard for",
    "start": "1491120",
    "end": "1496880"
  },
  {
    "text": "developers to understand sometimes you can't just throw it out and break people their livelihoods depend on these things",
    "start": "1496880",
    "end": "1502200"
  },
  {
    "text": "working they need some trust well like the farther you go down the stack I don't know if Stack's",
    "start": "1502200",
    "end": "1509120"
  },
  {
    "text": "the right word but the farther you go down in like layers of abstraction uh the more and more stable things need to",
    "start": "1509120",
    "end": "1514799"
  },
  {
    "text": "get right there's the famous like uh Linus torold like we don't break user space right like uh whereas in my",
    "start": "1514799",
    "end": "1522919"
  },
  {
    "text": "application code I break user space all the time but like we we make the trade-offs",
    "start": "1522919",
    "end": "1529320"
  },
  {
    "text": "right because we have to change where the button is 17 times a day when the product manager asks us to move it",
    "start": "1529320",
    "end": "1535919"
  },
  {
    "text": "um it's different world I guess it's true but there's a balance though right",
    "start": "1535919",
    "end": "1541200"
  },
  {
    "text": "like there's some behaviors you can break and some behaviors you can't break for customers like moving buttons around that customers kind of accept it",
    "start": "1541200",
    "end": "1546440"
  },
  {
    "text": "although some Grumble a little bit like I could find it before why can't I find it now um but other things like if",
    "start": "1546440",
    "end": "1551960"
  },
  {
    "text": "there's like data you're keeping track like your database is forever right like anything that makes into the database like lives customer comes back to that",
    "start": "1551960",
    "end": "1558760"
  },
  {
    "text": "you can't say yeah I renamed your stuff enjoy they they put that in they want to get it back out again like so that that",
    "start": "1558760",
    "end": "1564919"
  },
  {
    "text": "level of handling and those kind of things are are frozen and the code is codee's ephemeral like data is forever",
    "start": "1564919",
    "end": "1572039"
  },
  {
    "text": "yes yeah I wrote an article about this in fact where basically I was like you really should like compute things for as",
    "start": "1572039",
    "end": "1578720"
  },
  {
    "text": "long as you can because the minute you start storing it uh you you kind of are making a promise either to yourselves or",
    "start": "1578720",
    "end": "1585039"
  },
  {
    "text": "to some team somewhere or maybe to a customer it's a lot harder to to make those",
    "start": "1585039",
    "end": "1590159"
  },
  {
    "text": "changes later it is and once dollars come into play it's you know yeah well I",
    "start": "1590159",
    "end": "1596000"
  },
  {
    "text": "mean you're are you at data dog currently I am yeah I mean I imagine",
    "start": "1596000",
    "end": "1601159"
  },
  {
    "text": "this is like what you guys do all the time it is these these are things we have to think about right it's like the",
    "start": "1601159",
    "end": "1607240"
  },
  {
    "text": "balance between how do you improve customer experience make their lives better but you can't break them that",
    "start": "1607240",
    "end": "1612440"
  },
  {
    "text": "they we are mission critical software for big companies like we if we're not working correctly some companies can't",
    "start": "1612440",
    "end": "1617960"
  },
  {
    "text": "operate because they can't trust their environments and that that that's this really awesome responsibility just you know have to",
    "start": "1617960",
    "end": "1624520"
  },
  {
    "text": "think twice about what you're doing be very careful with all the work you're doing because you just can't",
    "start": "1624520",
    "end": "1630919"
  },
  {
    "text": "right I can only imagine do you work on like a part of the pro like do you work",
    "start": "1630919",
    "end": "1636080"
  },
  {
    "text": "on a I know data dog has a lot of like apis and sdks do you work on that like",
    "start": "1636080",
    "end": "1641279"
  },
  {
    "text": "developer facing stuff or are you on like internal systems I'm actually in a",
    "start": "1641279",
    "end": "1647159"
  },
  {
    "text": "weird other place so my the team of man is the APM onboarding team um I work for APM application Performance Management",
    "start": "1647159",
    "end": "1653039"
  },
  {
    "text": "the tracing tools are the primary thing that part of our group but there's profiling tools and other things",
    "start": "1653039",
    "end": "1658279"
  },
  {
    "text": "security tools and one of the my my responsibility is how to make it as easy",
    "start": "1658279",
    "end": "1663440"
  },
  {
    "text": "as possible for our customers to start adopting our tools like it's tended to be really easy to adopt monitoring adopt",
    "start": "1663440",
    "end": "1669559"
  },
  {
    "text": "logging and metrics but APM is a bit more of a hurdle because it involved some changes by developers to their applications right and we want to make",
    "start": "1669559",
    "end": "1677320"
  },
  {
    "text": "it it's easy for operations people to be able to add tracing support and profiling support and so on without having to get a developer involved and",
    "start": "1677320",
    "end": "1684600"
  },
  {
    "text": "so I I tell people I do magic tricks for a living that's my job you're are you like trying to sidecar in like like",
    "start": "1684600",
    "end": "1692240"
  },
  {
    "text": "you're trying to get applications deployed within applications without actually making code changes that's kind",
    "start": "1692240",
    "end": "1697320"
  },
  {
    "text": "of what I heard that's more or less what I yeah that I spent the last year doing so and now it's it works it's great it's",
    "start": "1697320",
    "end": "1704559"
  },
  {
    "text": "fantastic seeing it out there we had a big announcement at our developer conference Dash in in August um uptakes",
    "start": "1704559",
    "end": "1711159"
  },
  {
    "text": "been really exciting people it was spontaneous Applause which is kind of nice like there was no like C C the Applause when people announce it was",
    "start": "1711159",
    "end": "1716960"
  },
  {
    "text": "like oh we want this future great and and those are existing customers like the new customers is really where that",
    "start": "1716960",
    "end": "1722519"
  },
  {
    "text": "where that's at you want new customers to come in and have this magical experience when they first use your product but keep it all safe and secure",
    "start": "1722519",
    "end": "1728240"
  },
  {
    "text": "not like break them it's right it's it's you know it's a balance like I said it's always the right number of hacks right",
    "start": "1728240",
    "end": "1735360"
  },
  {
    "text": "like it's always always trying to find the right number of facts which actually brings me back to a question that I that I had for you so the title of the book",
    "start": "1735360",
    "end": "1742720"
  },
  {
    "text": "is let me pull so don't botch it an idiomatic approach so learning go an idiomatic approach to real world go",
    "start": "1742720",
    "end": "1748159"
  },
  {
    "text": "program right yeah um speaking of hacks can you explain what idiomatic means",
    "start": "1748159",
    "end": "1754360"
  },
  {
    "text": "this word is used all the time in programming I feel like you know some new developers might not know what it means yeah it's it's it's used as a",
    "start": "1754360",
    "end": "1761080"
  },
  {
    "text": "weapons sometimes developers like to argue um so I mean the concept of",
    "start": "1761080",
    "end": "1766440"
  },
  {
    "text": "idiomatic is I'm my code in that means two criteria one other people understand",
    "start": "1766440",
    "end": "1771880"
  },
  {
    "text": "what I'm doing and two I'm not fighting the language I'm I'm working in the way the language intends I'm kind of like",
    "start": "1771880",
    "end": "1777000"
  },
  {
    "text": "you know carving the Michelangelo quot I'm discovering the statue within the block of marble um you're you're going",
    "start": "1777000",
    "end": "1783600"
  },
  {
    "text": "with what's supp what's actually in there um and that that's really what idiomatic is about like what's the style that people tend to write their code in",
    "start": "1783600",
    "end": "1789600"
  },
  {
    "text": "and the style is chosen because it actually fits with the way the language was designed these are the features how they how they compose together um and",
    "start": "1789600",
    "end": "1796399"
  },
  {
    "text": "like you mentioned like Java velers come and have a hard time because they really they want that inheritance they want to impose this idea of inheritance and um a",
    "start": "1796399",
    "end": "1803480"
  },
  {
    "text": "lot of layers and a lot of um misunderstand how interfaces work it's a very different model of interfaces and",
    "start": "1803480",
    "end": "1808960"
  },
  {
    "text": "it doesn't match the mental model so when I first started learning go I said oh type embedding inheritance that's",
    "start": "1808960",
    "end": "1815159"
  },
  {
    "text": "pretty much the same I bet it can make it work and I read this awful code trying to make it work and it doesn't and I think every Java developer or",
    "start": "1815159",
    "end": "1821720"
  },
  {
    "text": "developer has experience with inheritance comes to go and does this at least once and then then realizes no I'm fighting the language is not idiomatic",
    "start": "1821720",
    "end": "1827960"
  },
  {
    "text": "for a reason right and then either give up or continue fighting tooth and nail I've seen",
    "start": "1827960",
    "end": "1834000"
  },
  {
    "text": "both yes and they they get really angry at go for this it's like you know",
    "start": "1834000",
    "end": "1839039"
  },
  {
    "text": "there's a there's a Simpsons episode where where um um Ned is complaining to",
    "start": "1839039",
    "end": "1844279"
  },
  {
    "text": "the minister about something and the minister says Ned have you ever thought about other other religions are all pretty much the same I often felt that",
    "start": "1844279",
    "end": "1850120"
  },
  {
    "text": "way people complain about go it's like just try one of the other languages are all pretty much the same just try",
    "start": "1850120",
    "end": "1855360"
  },
  {
    "text": "something else please go away yeah it's okay it's you don't have to like it it's",
    "start": "1855360",
    "end": "1860440"
  },
  {
    "text": "this is a this is a way in a philosophy of developing software if it's not yours that's fine I'm not that that's okay but",
    "start": "1860440",
    "end": "1866919"
  },
  {
    "text": "if you're curious about it and think this might be a strategy you like this is here's how to learn how about it we",
    "start": "1866919",
    "end": "1872240"
  },
  {
    "text": "like it please stop ruining it for us um what are some of the examples some",
    "start": "1872240",
    "end": "1880360"
  },
  {
    "text": "of like the the most egregious examples of non-idiomatic code like big foot guns",
    "start": "1880360",
    "end": "1888760"
  },
  {
    "text": "um let's see people the big one is trying to fake inheritance um that people doing that",
    "start": "1888760",
    "end": "1896440"
  },
  {
    "text": "just don't really get it um and they get really upset about this people like get",
    "start": "1896440",
    "end": "1901639"
  },
  {
    "text": "writing Getters and Setters treating struck like they're objects um overuse of pointers especially is one of the things I see a lot um the Java every",
    "start": "1901639",
    "end": "1909960"
  },
  {
    "text": "every everything's an object except for a couple of Primitives and everything's being Heap allocated and this is actually hurting Java right now like",
    "start": "1909960",
    "end": "1915760"
  },
  {
    "text": "Java's garbage collectors are really smart because they have to be Java program use a ton of memory and have those pauses because everything is Heap",
    "start": "1915760",
    "end": "1922279"
  },
  {
    "text": "allocated and go encourage you to keep things stack allocated because cleaning up a stack is easy to slide a stack",
    "start": "1922279",
    "end": "1927880"
  },
  {
    "text": "pointer down everything's cleaned up and you're done cleaning up a heap is kind of painful it's kind of slow and it's",
    "start": "1927880",
    "end": "1933240"
  },
  {
    "text": "unavoidable some things have to go on Heap but it's worse and so go gives you tools to avoid doing that and it makes",
    "start": "1933240",
    "end": "1938480"
  },
  {
    "text": "your programs faster makes them use less memory there like no downsides to it it encourages a bit of immutability which",
    "start": "1938480",
    "end": "1944039"
  },
  {
    "text": "go is not good at and people fight it they every struct everything's a pointer",
    "start": "1944039",
    "end": "1949120"
  },
  {
    "text": "and they pass around pointers they return back pointers like you've madej your like oh pointers are faster like no they're actually slower because there's",
    "start": "1949120",
    "end": "1955200"
  },
  {
    "text": "a heap allocation happening and actually have numbers in the pointer chapter like show here's a benchmark program it has all the code and shows you what happens",
    "start": "1955200",
    "end": "1961279"
  },
  {
    "text": "as you pass pointers back and forth you're actually making your program worse by doing this I I want to pause on",
    "start": "1961279",
    "end": "1966799"
  },
  {
    "text": "this this is actually really interesting I don't think yet on the podcast we've we've dug into stack versus Heap um so",
    "start": "1966799",
    "end": "1975279"
  },
  {
    "text": "so I'd like to just cover it for a second so really quickly can you explain",
    "start": "1975279",
    "end": "1980360"
  },
  {
    "text": "high level what's the difference between stack and Heap in memory oh boy this is",
    "start": "1980360",
    "end": "1987039"
  },
  {
    "text": "going back in time um to explain this very high level you can wave your hands as much as you want yeah okay so it's",
    "start": "1987039",
    "end": "1993840"
  },
  {
    "text": "basically programs need memory to do things and they've got to put them somewhere and so as a program is running",
    "start": "1993840",
    "end": "2000440"
  },
  {
    "text": "you have a function it's running it's trying to store a value somewhere to hold to have a variable to store a value",
    "start": "2000440",
    "end": "2005799"
  },
  {
    "text": "and the question is how long long is that value going to be valid for is the value going stop being valid when I exit",
    "start": "2005799",
    "end": "2011919"
  },
  {
    "text": "the function or does it need to live for longer and if it's going to be if the value goes away when you leave the",
    "start": "2011919",
    "end": "2017399"
  },
  {
    "text": "function then you can allocate What's called the stack which is a straight it's like just going counting down from memory traditionally Stacks count it",
    "start": "2017399",
    "end": "2023639"
  },
  {
    "text": "down they can count up doesn't really make a difference but it's this linear growth of memory so I just allocate one after another after another and then",
    "start": "2023639",
    "end": "2030200"
  },
  {
    "text": "when I'm done with the function I pop it from my stack and it's a stack pointer just go back to the previous function",
    "start": "2030200",
    "end": "2036120"
  },
  {
    "text": "everything that you allocated there just gone very quick very simple way to clean up now if a value is going to live after",
    "start": "2036120",
    "end": "2041880"
  },
  {
    "text": "you've left that function you're returning something back out you've got two choices you can make a copy of that value back to the other function in",
    "start": "2041880",
    "end": "2047440"
  },
  {
    "text": "which case you can get rid of your your value and just copy it back to the to the previous function possibly on its stack or you put it up in memory and",
    "start": "2047440",
    "end": "2054200"
  },
  {
    "text": "what you have to pass back instead is a pointer to it and this is what all pointers are Pointers just references of stuff on a heap and so you pass back a",
    "start": "2054200",
    "end": "2060720"
  },
  {
    "text": "pointer instead and copy that instead and the memory that the value actually has lives in What's called the Heap and the Heap is just a bunch of M M",
    "start": "2060720",
    "end": "2067638"
  },
  {
    "text": "different sizes of blocks being allocated and it lives until all the references to it are gone and that's if",
    "start": "2067639",
    "end": "2073079"
  },
  {
    "text": "you have a garbage collected language it's job is to keep track of all those pointers that you have going back to your stack and there's no pointers left",
    "start": "2073079",
    "end": "2079358"
  },
  {
    "text": "on the stack you can deallocate you can garbage collect it that's all garbage is it's memory you're not using anymore if",
    "start": "2079359",
    "end": "2084398"
  },
  {
    "text": "you're in C then you got to keep track of that yourself and if you're in Rust you have to play garbage collector and",
    "start": "2084399",
    "end": "2090118"
  },
  {
    "text": "they tell you nuh the program W compile until you break it everything correct so C has no garbage collector and rust you",
    "start": "2090119",
    "end": "2095919"
  },
  {
    "text": "are the garbage collector in Java and go there is a garbage clutcher in the runtime got it so okay so just I'm going",
    "start": "2095919",
    "end": "2102880"
  },
  {
    "text": "to play it back just to make sure I understood everything so stack is kind of they're both memory right like these both live in Ram um stack is like simple",
    "start": "2102880",
    "end": "2111240"
  },
  {
    "text": "and fast to use Heap is like longer lived maybe a little less efficient to",
    "start": "2111240",
    "end": "2116480"
  },
  {
    "text": "get in and out of but you can maybe use more of it or you use it for a longer period of time so traditionally one of",
    "start": "2116480",
    "end": "2124560"
  },
  {
    "text": "the limitations on stack allocation in language is like see in Java is that the stack size is bounded so I think it's",
    "start": "2124560",
    "end": "2129640"
  },
  {
    "text": "like 64 Megs Maybe by default go is weird go let you grow the stack and so",
    "start": "2129640",
    "end": "2136720"
  },
  {
    "text": "which is ironic because so go so when you call it function and go it actually the first thing it does in that function is check to see if there's enough room",
    "start": "2136720",
    "end": "2142560"
  },
  {
    "text": "in the stack and if not it will grow it and copy everything over there the irony is that things on the stack are relocatable they can move in memory",
    "start": "2142560",
    "end": "2149240"
  },
  {
    "text": "things on the Heap and go never move so once you allocate some memory on the Heap it lives there until it's done but things in this stack get moved around",
    "start": "2149240",
    "end": "2155520"
  },
  {
    "text": "all the time okay and if I'm hearing you correctly generally speaking when we use pointers",
    "start": "2155520",
    "end": "2161280"
  },
  {
    "text": "we're going to the Heap when we don't generally speaking we're going to the stack and a lot of people and I've",
    "start": "2161280",
    "end": "2168640"
  },
  {
    "text": "definitely I hear this all the time will say well pointers are fast because if I use a pointer I don't have to like copy",
    "start": "2168640",
    "end": "2174599"
  },
  {
    "text": "the memory right I'm just passing around a reference to it and that's why it's fast but what you're saying is in a lot",
    "start": "2174599",
    "end": "2180400"
  },
  {
    "text": "of cases it's faster to not use a pointer because I'm able to stay on the stack rather than move to the the the",
    "start": "2180400",
    "end": "2187440"
  },
  {
    "text": "Val it's it's returning the value back from the function in particular using a pointer starts biting you because it's",
    "start": "2187440",
    "end": "2192720"
  },
  {
    "text": "not just like there's two things going on there's an allocation like the memory is still being created it's just being allocated on the Heap instead and then",
    "start": "2192720",
    "end": "2199480"
  },
  {
    "text": "you pass then you copy back the 8 byte pointer four by usually eight by pointer now because 64bit machines so the idea",
    "start": "2199480",
    "end": "2204760"
  },
  {
    "text": "with the pointer is that I'm only copying eight bytes each time so it's smaller right well first of all if your if your value is smaller than eight",
    "start": "2204760",
    "end": "2210839"
  },
  {
    "text": "bytes there's no difference um and if your value isn't smaller than eight",
    "start": "2210839",
    "end": "2215880"
  },
  {
    "text": "bytes well sure it takes a nanc or two to make the copy but I R numbers in the book like we're talking not a many nanc",
    "start": "2215880",
    "end": "2222599"
  },
  {
    "text": "it's probably not the optimization that actually matters and especially in a language like go where go doesn't let you declare something as constant when",
    "start": "2222599",
    "end": "2228800"
  },
  {
    "text": "you put something on the stack and you pass it from function to function it's making a copy of that value and it's",
    "start": "2228800",
    "end": "2234040"
  },
  {
    "text": "effectively immutable now so if I pass a parameter into a function and it's a value not a it's not a reference type",
    "start": "2234040",
    "end": "2240200"
  },
  {
    "text": "value but a value um and I modified inside that function that modification is not visible outside that function",
    "start": "2240200",
    "end": "2245640"
  },
  {
    "text": "because it was a copy of it the original never got modified where if I pass a pointer in it's like the behavior described in Python before I can modify",
    "start": "2245640",
    "end": "2252359"
  },
  {
    "text": "it and all sorts of crazy things can happen and who knows what changed it where right and now you got to sit there and walk through all your code to try to",
    "start": "2252359",
    "end": "2258359"
  },
  {
    "text": "find where things happened so um it it this be be careful what you wish for",
    "start": "2258359",
    "end": "2263520"
  },
  {
    "text": "like oh they Sav me a nanc of time on my program running and it cost me an hour tracking down bugs is that a great",
    "start": "2263520",
    "end": "2269560"
  },
  {
    "text": "trade-off probably not was also just weird like I read your function and I'm like oh you're giving me back a point or",
    "start": "2269560",
    "end": "2275400"
  },
  {
    "text": "two string like I wonder why right like am I supposed to do something with this string now uh whereas if you just gave",
    "start": "2275400",
    "end": "2282880"
  },
  {
    "text": "me a string I'd probably just you know take it for what it is the advice I usually give and I'm actually curious to hear what you think about this um see if",
    "start": "2282880",
    "end": "2289880"
  },
  {
    "text": "maybe my advice could be improved is like don't use pointers unless you have",
    "start": "2289880",
    "end": "2295599"
  },
  {
    "text": "a reason to and that reason is very rarely performance and if it is performance you should be pretty sure",
    "start": "2295599",
    "end": "2301560"
  },
  {
    "text": "because you've benchmarked it like you've you've figured out exactly what the hot path is and and you found that",
    "start": "2301560",
    "end": "2307720"
  },
  {
    "text": "using a pointer actually would help um but until then you kind of only use",
    "start": "2307720",
    "end": "2312960"
  },
  {
    "text": "pointers when you really do need that mutable reference to something yeah absolutely that that that is more or",
    "start": "2312960",
    "end": "2319079"
  },
  {
    "text": "less the advice I I give out all the time um the only difference yeah great keep it up um the the only thing is",
    "start": "2319079",
    "end": "2326000"
  },
  {
    "text": "there's there's a pattern again and go this is I've have mixed feelings about it which is if you have a struct or you",
    "start": "2326000",
    "end": "2332800"
  },
  {
    "text": "you have some type and you've got methods on this type and one method requires youd have a pointer type on it",
    "start": "2332800",
    "end": "2337880"
  },
  {
    "text": "has a reference type just make all of your methods pointer type to that point oh yeah yeah I've seen that advice it's",
    "start": "2337880",
    "end": "2343599"
  },
  {
    "text": "pretty common it it's because of type sets on interfaces and having it meet it um I don't know I have very mixed",
    "start": "2343599",
    "end": "2349760"
  },
  {
    "text": "feelings about it because it does send kind of the wrong message sometime but well it can get tough because you can have yeah you can have potentially lots",
    "start": "2349760",
    "end": "2356359"
  },
  {
    "text": "of methods on a type and it can get kind of weird when you have to only use pointers but yeah I know what you",
    "start": "2356359",
    "end": "2363480"
  },
  {
    "text": "mean okay um I want to talk a little bit about some",
    "start": "2363480",
    "end": "2369440"
  },
  {
    "text": "of your favorite tools in the go space so you've obvious been doing go for a while do you",
    "start": "2369440",
    "end": "2375680"
  },
  {
    "text": "have any favorite I mean obviously you I'm sure you use like the go standard library and the standard tool chain is",
    "start": "2375680",
    "end": "2381240"
  },
  {
    "text": "there are there any other tools that you use dayto day things like linters formatters debuggers anything like that that you think people should be aware",
    "start": "2381240",
    "end": "2387839"
  },
  {
    "text": "about aware of yeah um so let's see um so IDE wise I think um I use go I use",
    "start": "2387839",
    "end": "2394720"
  },
  {
    "text": "intell um I've been using for literally 21 years bought my first license in 2002",
    "start": "2394720",
    "end": "2400400"
  },
  {
    "text": "you came from java you have to usej I do and when they announced a Go version I'm like this is the greatest thing ever my",
    "start": "2400400",
    "end": "2405560"
  },
  {
    "text": "fingers have never left it um I I use Visual Studio code because of course you have to by law I think at some point use",
    "start": "2405560",
    "end": "2411800"
  },
  {
    "text": "Visual Studio code but um time I'm an intelligent don't yeah um and so yes big",
    "start": "2411800",
    "end": "2419240"
  },
  {
    "text": "recommend definitely use that for your IDE it does everything you need to do it's ghost supports excellent um it's",
    "start": "2419240",
    "end": "2424400"
  },
  {
    "text": "everything else supports excellent um for formattings I'm fine with gofun most",
    "start": "2424400",
    "end": "2430079"
  },
  {
    "text": "of the time I think go Imports is the one that will fix your import order also that's fine sometimes it gets annoying",
    "start": "2430079",
    "end": "2435839"
  },
  {
    "text": "because I've had test I've had like the linter fail because has my import are in the wrong order like really this is this",
    "start": "2435839",
    "end": "2442000"
  },
  {
    "text": "isn't that important um there's one lter we have at work that does that every so often I forget to run something and it",
    "start": "2442000",
    "end": "2448359"
  },
  {
    "text": "it complains um there's there's that um there's um",
    "start": "2448359",
    "end": "2453400"
  },
  {
    "text": "goang Island I think is what it's called um I forget the name wrong that that one is great for have like a billion tools",
    "start": "2453400",
    "end": "2459920"
  },
  {
    "text": "available um if there's something you want to validate with your code it's there go vet's actually gotten very good",
    "start": "2459920",
    "end": "2465599"
  },
  {
    "text": "um there's a new tool that's been released called go vul check which does cve checks against your code and so",
    "start": "2465599",
    "end": "2471440"
  },
  {
    "text": "rather than rely on some third party to scan your code you just run goone check against your applications it'll tell you",
    "start": "2471440",
    "end": "2477680"
  },
  {
    "text": "um if it's vulnerable based on some known cves and it's clever enough to say oh some function this in this is in this",
    "start": "2477680",
    "end": "2485160"
  },
  {
    "text": "module is known to be vulnerable but you're not using it so it's not as big of a deal for you to worry about you're using this one that's vulnerable you",
    "start": "2485160",
    "end": "2491280"
  },
  {
    "text": "should worry about that oh that's nice yeah yeah um there's actually a chapter on go tooling I added in the second",
    "start": "2491280",
    "end": "2497319"
  },
  {
    "text": "edition because I realized that the tools are a big part of what go makes go great and I totally ignored that in the",
    "start": "2497319",
    "end": "2502520"
  },
  {
    "text": "first book so the second edition I add a whole chapter on all the different tools that are available um go in bed which is",
    "start": "2502520",
    "end": "2509040"
  },
  {
    "text": "kind of not quite a tool but it's like a feature yeah it it's it's weirdly handy this idea of like you can just like take",
    "start": "2509040",
    "end": "2514240"
  },
  {
    "text": "text files and binaries and embed them into your go binary and use them because one of the nice things with your go",
    "start": "2514240",
    "end": "2520000"
  },
  {
    "text": "programs you get back to that having that single binary like in Java the class files are all loose you jar files and you had multiple jar files and then",
    "start": "2520000",
    "end": "2526599"
  },
  {
    "text": "people make Uber jar files out of their jar file because having that single file is so important but you still have a jvm hanging around right or Python and Ruby",
    "start": "2526599",
    "end": "2533359"
  },
  {
    "text": "and you still have the JV you still have a virtual machine hanging around but go gives you that one file that you can",
    "start": "2533359",
    "end": "2538520"
  },
  {
    "text": "just you can email to somebody it doesn't matter how you distribute it like the single file is great so if you have like support files that are like",
    "start": "2538520",
    "end": "2544720"
  },
  {
    "text": "that are immutable like you have like some a little bit of HTML or something a simple UI or some help files just be",
    "start": "2544720",
    "end": "2550040"
  },
  {
    "text": "able to put them in the binary and not worry about are they actually being copied along with my stuff is gonna",
    "start": "2550040",
    "end": "2555319"
  },
  {
    "text": "modify it behind my back no it's part of the binary that that's loved going bed",
    "start": "2555319",
    "end": "2561480"
  },
  {
    "text": "it's yes like I I ever since it was released I've started using it a ton because it's exactly what you just said",
    "start": "2561480",
    "end": "2567720"
  },
  {
    "text": "like the idea of dynamic linking or dynamic dependencies right in like C for",
    "start": "2567720",
    "end": "2573079"
  },
  {
    "text": "example I feel like sometimes file based depend Tes just feel the exact same way in the sense that like if this file",
    "start": "2573079",
    "end": "2579760"
  },
  {
    "text": "doesn't exist I can't run my program like doesn't it doesn't fail in the same way but it's still kind of a failure um",
    "start": "2579760",
    "end": "2585319"
  },
  {
    "text": "so being able to it's that idea of static or uh excuse me static um",
    "start": "2585319",
    "end": "2591960"
  },
  {
    "text": "compiling Dynamic compiling yeah thank you static linking that's what I was looking for um being able to bundle the",
    "start": "2591960",
    "end": "2597000"
  },
  {
    "text": "files directly into the binary has been amazing I did run into one really weird thing that I now have to tell you about",
    "start": "2597000",
    "end": "2602640"
  },
  {
    "text": "uh with with go bed and I went and uh started uh little discussion about it on the the goang",
    "start": "2602640",
    "end": "2610040"
  },
  {
    "text": "repo with go embed you can't really embed go files so you can embed",
    "start": "2610040",
    "end": "2616839"
  },
  {
    "text": "basically any type of file out there like markdown files like whatever but if there's a go dood in a directory it will",
    "start": "2616839",
    "end": "2623160"
  },
  {
    "text": "ignore it and there's great reasons for that but it's really frustrating when you're trying to build a website that",
    "start": "2623160",
    "end": "2629079"
  },
  {
    "text": "bundles in like full go like directories of go code to use as like examples on",
    "start": "2629079",
    "end": "2635160"
  },
  {
    "text": "the website you can't actually bundle in go codes that was a weird thing I ran into that's fascinating I never even",
    "start": "2635160",
    "end": "2641760"
  },
  {
    "text": "thought about that huh yeah because it it ignores it because it assumes that like you know all of your go files in",
    "start": "2641760",
    "end": "2647680"
  },
  {
    "text": "your project are going to be compiled into the end binary right sure um and so yeah there's like this special case made",
    "start": "2647680",
    "end": "2653960"
  },
  {
    "text": "basically like ignore I can't remember if it was ignore anything with a go dood or ignore things with the Dogo extension",
    "start": "2653960",
    "end": "2661000"
  },
  {
    "text": "there's some and I tried to like hack my way around it it's actually really hard to hack your way around",
    "start": "2661000",
    "end": "2666800"
  },
  {
    "text": "um as well but uh but yeah that that was a tricky thing for us see now you're",
    "start": "2666800",
    "end": "2672240"
  },
  {
    "text": "giving me something I want to fix in my book and it's too late this is not good I'm sure like very few people run",
    "start": "2672240",
    "end": "2677800"
  },
  {
    "text": "into this I have a very weird use case where like on boot Dev we have students that are like running go code in their",
    "start": "2677800",
    "end": "2684720"
  },
  {
    "text": "browser in web assembly and I'm trying to like ship go files to them it's like a really meta thing that like most most",
    "start": "2684720",
    "end": "2691000"
  },
  {
    "text": "companies aren't going to run into but but it was interesting",
    "start": "2691000",
    "end": "2696640"
  },
  {
    "text": "nice cool um what is your least favorite thing about go what would you change",
    "start": "2696640",
    "end": "2702240"
  },
  {
    "text": "about the language go needs better a better immutability story like this is",
    "start": "2702240",
    "end": "2707280"
  },
  {
    "text": "the fact that constant go just means something the compiler can figure out is not great um like I said that using the",
    "start": "2707280",
    "end": "2714800"
  },
  {
    "text": "pointer type versus value type to indicate immutability is okay but it falls apart in some cases like with with",
    "start": "2714800",
    "end": "2720200"
  },
  {
    "text": "slices being passed around is kind of weird um because I have a big chunk explain like with slice Behavior as you",
    "start": "2720200",
    "end": "2725720"
  },
  {
    "text": "pass pass it around and I did I did a talk at Goofer con called Ghost says what that was based on the the what talk",
    "start": "2725720",
    "end": "2731880"
  },
  {
    "text": "about ruby and JavaScript and there was a game show I was running like here's the four things here's some code here's",
    "start": "2731880",
    "end": "2737160"
  },
  {
    "text": "four things it could be doing what's it doing and this is why it did that weird thing and slices with like 10% of that",
    "start": "2737160",
    "end": "2743200"
  },
  {
    "text": "that talk which just like here's weird things slices do because you pass them around because yeah it's a pointer and you copied a pointer so you can change",
    "start": "2743200",
    "end": "2748920"
  },
  {
    "text": "the values and but you didn't really want to change those values if you grow it you can't get the back again it's like it's it once you understand the",
    "start": "2748920",
    "end": "2756680"
  },
  {
    "text": "mental model of what a slice is it's all fine explaining it to a new developer is impossible like I've tried their eyes",
    "start": "2756680",
    "end": "2762839"
  },
  {
    "text": "just glaze over like but why did that H why is this different it's like well you see when you look at the implementation",
    "start": "2762839",
    "end": "2768280"
  },
  {
    "text": "and the run time they're like oh my god um it it's it's awful um and the reason",
    "start": "2768280",
    "end": "2774000"
  },
  {
    "text": "why it's awful is because there's no way to just declare a slice as const there's no way to declare a map as const especially maps are always mutable",
    "start": "2774000",
    "end": "2779720"
  },
  {
    "text": "there's no way to declare this this you know so you run into these situations where I just want to pass this long I",
    "start": "2779720",
    "end": "2785880"
  },
  {
    "text": "wanted the compiler to tell me if someone's tried to modify my thing and you can't really do that and go terribly",
    "start": "2785880",
    "end": "2791760"
  },
  {
    "text": "well in some situations and especially with concurrency it's a Miss because there's a there's a race detector that checks to see if cross threads cross G",
    "start": "2791760",
    "end": "2799119"
  },
  {
    "text": "routines you've modified the same value in two places if I could just like declare it Con then it wouldn't be a",
    "start": "2799119",
    "end": "2804599"
  },
  {
    "text": "problem but I can't so there's a possibility that this value has been captured and been modified in two places",
    "start": "2804599",
    "end": "2810400"
  },
  {
    "text": "it is pretty ironic like go has a really strong concurrency story but it's it's also very well-known like fact in",
    "start": "2810400",
    "end": "2817480"
  },
  {
    "text": "computer science that immutability makes concurrency a lot easier yes and we don't have a strong I",
    "start": "2817480",
    "end": "2823920"
  },
  {
    "text": "don't understand why it is the way it is U I'm sure that you know they're smarter than me like these are really smart",
    "start": "2823920",
    "end": "2829720"
  },
  {
    "text": "people they made a decision they probably had a really good reason for it but I kind of wish they had a different",
    "start": "2829720",
    "end": "2835040"
  },
  {
    "text": "answer yeah no I I definitely get that I I I'm the same way I um I I like the",
    "start": "2835040",
    "end": "2841280"
  },
  {
    "text": "idea of compile time constants I just feel like they ate up a really useful",
    "start": "2841280",
    "end": "2846480"
  },
  {
    "text": "keyword cons right like maybe it could have been I don't know maybe it could have been something else I surely",
    "start": "2846480",
    "end": "2852359"
  },
  {
    "text": "couldn't design the language like you said I'm not pretending to be able to do a better job but I know what you",
    "start": "2852359",
    "end": "2859280"
  },
  {
    "text": "mean if you were trying to sell python excuse me if you were trying to sell go",
    "start": "2859280",
    "end": "2865800"
  },
  {
    "text": "to a python developer specifically what's the benefit of the language that you'd focus on explaining oh types types",
    "start": "2865800",
    "end": "2873640"
  },
  {
    "text": "types and types um I I I'm a type snob I guess in languages I mean I was when",
    "start": "2873640",
    "end": "2879720"
  },
  {
    "text": "Ruby was a big thing like 2004 20068 I did I did some Ruby on Rails development",
    "start": "2879720",
    "end": "2885760"
  },
  {
    "text": "and the Ruby developers like oh I don't need types my code I'll write unit test and I'm like really no what that's",
    "start": "2885760",
    "end": "2891680"
  },
  {
    "text": "that's not true we all know that that's a lie um no one writes enot test no one's going check their stuff that",
    "start": "2891680",
    "end": "2897599"
  },
  {
    "text": "well we all say we're doing it but none of us are doing it the right way um I mean go go to me strikes this nice",
    "start": "2897599",
    "end": "2905839"
  },
  {
    "text": "like people hear types oh I've got to like they think start thinking like Scala or like some or H or some other",
    "start": "2905839",
    "end": "2911079"
  },
  {
    "text": "language like that like types are executable documentation right I put",
    "start": "2911079",
    "end": "2916280"
  },
  {
    "text": "this note in my code that says this thing is this and my buddy the compiler is going to check it for me I don't have to do anything if I make a mistake it",
    "start": "2916280",
    "end": "2922960"
  },
  {
    "text": "will catch it for me my IDE will draw a little red squiggle under it if I mess it up I can autocomplete it better I",
    "start": "2922960",
    "end": "2928240"
  },
  {
    "text": "know exactly what I'm getting right in Python code I pass a something into a function and I don't know what that",
    "start": "2928240",
    "end": "2934760"
  },
  {
    "text": "something is and one thing I tell people is there is always a type right all data has a type",
    "start": "2934760",
    "end": "2942240"
  },
  {
    "text": "just whether not it's explicit or implicit in your code so when you look at that python function someone passed it into you call it python function I",
    "start": "2942240",
    "end": "2949640"
  },
  {
    "text": "know they have type pins now but type pins aren't really enforced and there's lots of code that doesn't use them um and it's like okay what did you pass me",
    "start": "2949640",
    "end": "2956400"
  },
  {
    "text": "what are you looking for I don't even know what you actually want to like read your source code and you're going to call something else that's going to take",
    "start": "2956400",
    "end": "2961640"
  },
  {
    "text": "that value and pass it to something else I'm going to read that source code to figure it out and maybe it'll all kind of work in the end and maybe it won't",
    "start": "2961640",
    "end": "2970119"
  },
  {
    "text": "and that's people must be much smarter than me to like keep all this running in their head and keep their program logic",
    "start": "2970119",
    "end": "2975680"
  },
  {
    "text": "in their head because I can't do it so that that's I think the big win is there's relatively simple language there",
    "start": "2975680",
    "end": "2980760"
  },
  {
    "text": "relatively low maintenance and low low noise but you get types yeah I I tend to agree and I I I",
    "start": "2980760",
    "end": "2988440"
  },
  {
    "text": "guess that's you could you could basically make the argument that uh that's probably what I you would say for",
    "start": "2988440",
    "end": "2993559"
  },
  {
    "text": "any dynamically typed language right it it kind of is um I'm you know God bless",
    "start": "2993559",
    "end": "3000280"
  },
  {
    "text": "these people I don't know how they do it I was talking to a ruby developer recently I think his episode comes out",
    "start": "3000280",
    "end": "3006280"
  },
  {
    "text": "next week which will have been like I don't know four weeks ago by the time this episode comes out but uh he",
    "start": "3006280",
    "end": "3012559"
  },
  {
    "text": "basically said he loves loves programming in Ruby for like web apps but he also never wants to fly on a plane that has Ruby aboard",
    "start": "3012559",
    "end": "3020960"
  },
  {
    "text": "uh so that that reminds me of the war in Java the Java light you used to say you can't like um run nuclear reactors with",
    "start": "3020960",
    "end": "3027079"
  },
  {
    "text": "Java code yeah yeah same same basic idea yeah",
    "start": "3027079",
    "end": "3034960"
  },
  {
    "text": "cool um this has been fantastic John um could you tell everybody where they can go find your",
    "start": "3034960",
    "end": "3041640"
  },
  {
    "text": "stuff and obviously specifically where they can find your book oh sure so I have a bunch of blog posts actually up",
    "start": "3041640",
    "end": "3047200"
  },
  {
    "text": "on medium um look for John Bodner on medium it's it's probably me um the the",
    "start": "3047200",
    "end": "3052880"
  },
  {
    "text": "book I have a a course I did years ago for packed publishing called learn go in 3 hours it's mostly still okay um the",
    "start": "3052880",
    "end": "3061599"
  },
  {
    "text": "section on on dependencies could use some love but you know um and the book is from O'Reilly learning go um the",
    "start": "3061599",
    "end": "3068640"
  },
  {
    "text": "first edition is available um Second Edition is coming out in just a few months so as much as I want people to",
    "start": "3068640",
    "end": "3073799"
  },
  {
    "text": "buy as many copies of my book as they possibly can I don't want you to be disappointed when you find out new additions coming um pre-release is",
    "start": "3073799",
    "end": "3080040"
  },
  {
    "text": "already up on O'Reilly's website there's a first most of the chapters are available they've all been written at this point the book's been done for a",
    "start": "3080040",
    "end": "3085559"
  },
  {
    "text": "little bit um now I'm copy editing um so if you have a Riley learning access used to be called safari you can access the",
    "start": "3085559",
    "end": "3092760"
  },
  {
    "text": "book there um Amazon every bookstore you can think of have copies of the book as",
    "start": "3092760",
    "end": "3097880"
  },
  {
    "text": "Welling yeah give it a chance take a look no thank you so much I uh like I",
    "start": "3097880",
    "end": "3102960"
  },
  {
    "text": "said I love the book I've got a lot of students on boot Dev that I don't know how familiar you are with with boot Dev",
    "start": "3102960",
    "end": "3108000"
  },
  {
    "text": "obviously Josh Hales is a um kind of mutual acquaintance of ours through through boot Dev at least on my end but",
    "start": "3108000",
    "end": "3114880"
  },
  {
    "text": "uh we do a lot of online Interactive Learning and I get asked all the time",
    "start": "3114880",
    "end": "3120280"
  },
  {
    "text": "like where's a book I could go pick up to like read on the side while I'm doing this and learning go is definitely going to be my recommendation so yeah thanks",
    "start": "3120280",
    "end": "3128359"
  },
  {
    "text": "John the next Edition is including exercises as well with answers up on GitHub so you can get work through the exercises and see if you got the right",
    "start": "3128359",
    "end": "3134640"
  },
  {
    "text": "answer and why it's right or wrong so perfect great it's good for your students awesome thanks for coming on",
    "start": "3134640",
    "end": "3140200"
  },
  {
    "text": "John thanks so much [Music] Lane",
    "start": "3140200",
    "end": "3147280"
  },
  {
    "text": "[Music]",
    "start": "3148730",
    "end": "3151789"
  }
]