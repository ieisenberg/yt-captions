[
  {
    "text": "i have a love hate relationship when it",
    "start": "80",
    "end": "2480"
  },
  {
    "text": "comes to nulls you know nulls are",
    "start": "2480",
    "end": "5520"
  },
  {
    "text": "this",
    "start": "5520",
    "end": "7040"
  },
  {
    "text": "keyword if you will it's a value but",
    "start": "7040",
    "end": "9760"
  },
  {
    "text": "it's not a value",
    "start": "9760",
    "end": "11360"
  },
  {
    "text": "it's a value that represents the absence",
    "start": "11360",
    "end": "14000"
  },
  {
    "text": "of a value and it's really important",
    "start": "14000",
    "end": "16480"
  },
  {
    "text": "in database engineering you know",
    "start": "16480",
    "end": "18640"
  },
  {
    "text": "sometimes you cannot just use a zero to",
    "start": "18640",
    "end": "20880"
  },
  {
    "text": "represent",
    "start": "20880",
    "end": "22480"
  },
  {
    "text": "a missing value because zero could be",
    "start": "22480",
    "end": "25359"
  },
  {
    "text": "one valid value you know you can do",
    "start": "25359",
    "end": "27760"
  },
  {
    "text": "tricks and do minus one and or or minus",
    "start": "27760",
    "end": "31119"
  },
  {
    "text": "negative nine thousand or whatever that",
    "start": "31119",
    "end": "34079"
  },
  {
    "text": "to represent that",
    "start": "34079",
    "end": "36079"
  },
  {
    "text": "uh something that is not applicable but",
    "start": "36079",
    "end": "37680"
  },
  {
    "text": "nulls are very convenient we love them",
    "start": "37680",
    "end": "39840"
  },
  {
    "text": "and we do all sorts of tricks when we",
    "start": "39840",
    "end": "42000"
  },
  {
    "text": "store nulls you know we don't actually",
    "start": "42000",
    "end": "44640"
  },
  {
    "text": "store a value we trim",
    "start": "44640",
    "end": "47200"
  },
  {
    "text": "the row storage as a result we try to be",
    "start": "47200",
    "end": "51039"
  },
  {
    "text": "very efficient when it comes to this but",
    "start": "51039",
    "end": "52960"
  },
  {
    "text": "we also do nasty stuff",
    "start": "52960",
    "end": "55440"
  },
  {
    "text": "because there is no",
    "start": "55440",
    "end": "57360"
  },
  {
    "text": "standard when it comes to null i guess",
    "start": "57360",
    "end": "60160"
  },
  {
    "text": "we can say that nobody agrees on the sql",
    "start": "60160",
    "end": "62559"
  },
  {
    "text": "standard",
    "start": "62559",
    "end": "63680"
  },
  {
    "text": "for what to do with nulls so every",
    "start": "63680",
    "end": "65760"
  },
  {
    "text": "database does different things",
    "start": "65760",
    "end": "67920"
  },
  {
    "text": "and we notice that some of the things is",
    "start": "67920",
    "end": "70799"
  },
  {
    "text": "nulls are sometimes not indexed so if",
    "start": "70799",
    "end": "73600"
  },
  {
    "text": "you create an index on a table that",
    "start": "73600",
    "end": "75680"
  },
  {
    "text": "happens to have a null and you did a",
    "start": "75680",
    "end": "77680"
  },
  {
    "text": "query that says where this column is no",
    "start": "77680",
    "end": "80960"
  },
  {
    "text": "that won't use the index and",
    "start": "80960",
    "end": "82880"
  },
  {
    "text": "some people don't know that effectively",
    "start": "82880",
    "end": "85840"
  },
  {
    "text": "that could cause you know performance",
    "start": "85840",
    "end": "87680"
  },
  {
    "text": "problems",
    "start": "87680",
    "end": "88720"
  },
  {
    "text": "but this is a new thing that i never",
    "start": "88720",
    "end": "91119"
  },
  {
    "text": "knew that existed actually a little bit",
    "start": "91119",
    "end": "93680"
  },
  {
    "text": "nasty",
    "start": "93680",
    "end": "94799"
  },
  {
    "text": "pulse quest 15 kind of solves it",
    "start": "94799",
    "end": "97119"
  },
  {
    "text": "but let's discuss so this comes from",
    "start": "97119",
    "end": "99680"
  },
  {
    "text": "rust proof labs",
    "start": "99680",
    "end": "102240"
  },
  {
    "text": "let's read the",
    "start": "102240",
    "end": "103920"
  },
  {
    "text": "part where they discuss",
    "start": "103920",
    "end": "106640"
  },
  {
    "text": "the",
    "start": "106640",
    "end": "107360"
  },
  {
    "text": "old",
    "start": "107360",
    "end": "108399"
  },
  {
    "text": "style what we have today here let's take",
    "start": "108399",
    "end": "111840"
  },
  {
    "text": "about this right",
    "start": "111840",
    "end": "113360"
  },
  {
    "text": "so if i create a table",
    "start": "113360",
    "end": "115280"
  },
  {
    "text": "this is the name of the table you have a",
    "start": "115280",
    "end": "117119"
  },
  {
    "text": "field a primary key",
    "start": "117119",
    "end": "119040"
  },
  {
    "text": "value one value two and this value two",
    "start": "119040",
    "end": "121680"
  },
  {
    "text": "can be null right and you created a",
    "start": "121680",
    "end": "124000"
  },
  {
    "text": "constraint",
    "start": "124000",
    "end": "125280"
  },
  {
    "text": "and this is the name of the constraint",
    "start": "125280",
    "end": "126719"
  },
  {
    "text": "and this is a unique constraint",
    "start": "126719",
    "end": "128959"
  },
  {
    "text": "that means",
    "start": "128959",
    "end": "130640"
  },
  {
    "text": "these two values must be unique that",
    "start": "130640",
    "end": "133360"
  },
  {
    "text": "means if you insert the value of 1 and 3",
    "start": "133360",
    "end": "136959"
  },
  {
    "text": "you can never insert another entry",
    "start": "136959",
    "end": "139760"
  },
  {
    "text": "another row the value 1 and three that",
    "start": "139760",
    "end": "142080"
  },
  {
    "text": "sounds simple to understand and if you",
    "start": "142080",
    "end": "144640"
  },
  {
    "text": "do you're going to get a constraint",
    "start": "144640",
    "end": "146160"
  },
  {
    "text": "violation error because this constraint",
    "start": "146160",
    "end": "148239"
  },
  {
    "text": "was violated same thing when you create",
    "start": "148239",
    "end": "150400"
  },
  {
    "text": "a you create a unique index on",
    "start": "150400",
    "end": "153440"
  },
  {
    "text": "a given column or a collection of",
    "start": "153440",
    "end": "155360"
  },
  {
    "text": "columns very very similar these two",
    "start": "155360",
    "end": "157599"
  },
  {
    "text": "things",
    "start": "157599",
    "end": "158400"
  },
  {
    "text": "so if we if we look at this",
    "start": "158400",
    "end": "161120"
  },
  {
    "text": "look what happened",
    "start": "161120",
    "end": "162640"
  },
  {
    "text": "if we actually use a null",
    "start": "162640",
    "end": "164959"
  },
  {
    "text": "so if i'm going to insert here",
    "start": "164959",
    "end": "167360"
  },
  {
    "text": "a value into this so they are inserting",
    "start": "167360",
    "end": "170319"
  },
  {
    "text": "five rows effectively",
    "start": "170319",
    "end": "172080"
  },
  {
    "text": "value one is hello and value two is null",
    "start": "172080",
    "end": "175040"
  },
  {
    "text": "so technically these are the same values",
    "start": "175040",
    "end": "178560"
  },
  {
    "text": "but guess what",
    "start": "178560",
    "end": "180560"
  },
  {
    "text": "it is",
    "start": "180560",
    "end": "181440"
  },
  {
    "text": "they are allowed in",
    "start": "181440",
    "end": "183680"
  },
  {
    "text": "so you can have hello now hello now",
    "start": "183680",
    "end": "185760"
  },
  {
    "text": "hello now hold on despite it it's it's",
    "start": "185760",
    "end": "188879"
  },
  {
    "text": "clearly violating",
    "start": "188879",
    "end": "190720"
  },
  {
    "text": "the",
    "start": "190720",
    "end": "191599"
  },
  {
    "text": "uh",
    "start": "191599",
    "end": "193040"
  },
  {
    "text": "the unique constraint",
    "start": "193040",
    "end": "194800"
  },
  {
    "text": "but",
    "start": "194800",
    "end": "195840"
  },
  {
    "text": "why is that",
    "start": "195840",
    "end": "198720"
  },
  {
    "text": "to answer this we go to",
    "start": "198720",
    "end": "201440"
  },
  {
    "text": "the unique null treatment option this",
    "start": "201440",
    "end": "203920"
  },
  {
    "text": "has been a thread since 2021 from the",
    "start": "203920",
    "end": "207440"
  },
  {
    "text": "postgres team let's read this and",
    "start": "207440",
    "end": "209840"
  },
  {
    "text": "discuss this this is from peter is in",
    "start": "209840",
    "end": "213760"
  },
  {
    "text": "trout i think he's a really big in the",
    "start": "213760",
    "end": "216959"
  },
  {
    "text": "postgres community the sql standard has",
    "start": "216959",
    "end": "219920"
  },
  {
    "text": "been ambiguous",
    "start": "219920",
    "end": "221599"
  },
  {
    "text": "about whether no values in unique",
    "start": "221599",
    "end": "224400"
  },
  {
    "text": "constraint should be considered equal or",
    "start": "224400",
    "end": "227120"
  },
  {
    "text": "not it always",
    "start": "227120",
    "end": "229200"
  },
  {
    "text": "comes back to the standards you know if",
    "start": "229200",
    "end": "231360"
  },
  {
    "text": "the standard doesn't",
    "start": "231360",
    "end": "233519"
  },
  {
    "text": "clearly specify everything",
    "start": "233519",
    "end": "236879"
  },
  {
    "text": "then you have wiggle rooms and this is",
    "start": "236879",
    "end": "239360"
  },
  {
    "text": "where things go out of hand you know",
    "start": "239360",
    "end": "242239"
  },
  {
    "text": "different implementation have different",
    "start": "242239",
    "end": "243760"
  },
  {
    "text": "behavior in sql 2020 draft this has been",
    "start": "243760",
    "end": "247200"
  },
  {
    "text": "formalized by making this implementation",
    "start": "247200",
    "end": "249360"
  },
  {
    "text": "defined and adding an option",
    "start": "249360",
    "end": "251439"
  },
  {
    "text": "on a unique constraint defined",
    "start": "251439",
    "end": "253680"
  },
  {
    "text": "unique distinct so nulls by default were",
    "start": "253680",
    "end": "258160"
  },
  {
    "text": "always treated",
    "start": "258160",
    "end": "259919"
  },
  {
    "text": "as distinct so if you insert a null each",
    "start": "259919",
    "end": "263280"
  },
  {
    "text": "null",
    "start": "263280",
    "end": "264080"
  },
  {
    "text": "is",
    "start": "264080",
    "end": "264880"
  },
  {
    "text": "to the database is a different null that",
    "start": "264880",
    "end": "268400"
  },
  {
    "text": "just hurts my head thinking about it",
    "start": "268400",
    "end": "271120"
  },
  {
    "text": "but it is what it is so what they are",
    "start": "271120",
    "end": "272800"
  },
  {
    "text": "adding is a brand new option here unique",
    "start": "272800",
    "end": "276320"
  },
  {
    "text": "nulls",
    "start": "276320",
    "end": "277759"
  },
  {
    "text": "distinct",
    "start": "277759",
    "end": "279280"
  },
  {
    "text": "or not distinct",
    "start": "279280",
    "end": "281440"
  },
  {
    "text": "so now you can effectively specify",
    "start": "281440",
    "end": "284160"
  },
  {
    "text": "whether you want the null to be distinct",
    "start": "284160",
    "end": "286240"
  },
  {
    "text": "or not the default behavior is there",
    "start": "286240",
    "end": "288800"
  },
  {
    "text": "effectively the current behavior which",
    "start": "288800",
    "end": "290960"
  },
  {
    "text": "nulls are distinct each null is a",
    "start": "290960",
    "end": "293440"
  },
  {
    "text": "different from the other node",
    "start": "293440",
    "end": "295440"
  },
  {
    "text": "right so you can do unique not distinct",
    "start": "295440",
    "end": "299680"
  },
  {
    "text": "and that's what the theme ad",
    "start": "299680",
    "end": "302240"
  },
  {
    "text": "rust proof here shows in the new style",
    "start": "302240",
    "end": "305120"
  },
  {
    "text": "supported by postgres15 what do we do",
    "start": "305120",
    "end": "308720"
  },
  {
    "text": "we create the same table",
    "start": "308720",
    "end": "310560"
  },
  {
    "text": "same thing here",
    "start": "310560",
    "end": "311840"
  },
  {
    "text": "integer value one value constrained the",
    "start": "311840",
    "end": "314479"
  },
  {
    "text": "constraint name unique nulls",
    "start": "314479",
    "end": "317120"
  },
  {
    "text": "not distinct",
    "start": "317120",
    "end": "318639"
  },
  {
    "text": "the nulls are nulls they are all the",
    "start": "318639",
    "end": "320800"
  },
  {
    "text": "same",
    "start": "320800",
    "end": "322000"
  },
  {
    "text": "i guess",
    "start": "322000",
    "end": "323199"
  },
  {
    "text": "mathematically speaking you can you i",
    "start": "323199",
    "end": "325759"
  },
  {
    "text": "think",
    "start": "325759",
    "end": "326560"
  },
  {
    "text": "mathematicians argue about the infinity",
    "start": "326560",
    "end": "329199"
  },
  {
    "text": "the same thing right is infinity equal",
    "start": "329199",
    "end": "331360"
  },
  {
    "text": "to infinity",
    "start": "331360",
    "end": "333600"
  },
  {
    "text": "right all philosophical",
    "start": "333600",
    "end": "336240"
  },
  {
    "text": "thoughts that",
    "start": "336240",
    "end": "337680"
  },
  {
    "text": "i really have no interest",
    "start": "337680",
    "end": "340160"
  },
  {
    "text": "and brain power to think about to be",
    "start": "340160",
    "end": "342000"
  },
  {
    "text": "honest but yeah when you do that",
    "start": "342000",
    "end": "345280"
  },
  {
    "text": "and you insert a value",
    "start": "345280",
    "end": "348320"
  },
  {
    "text": "you can insert one value",
    "start": "348320",
    "end": "350320"
  },
  {
    "text": "that goes in but the moment you insert",
    "start": "350320",
    "end": "352320"
  },
  {
    "text": "another entry with null and hello you're",
    "start": "352320",
    "end": "356000"
  },
  {
    "text": "gonna get this infamous error",
    "start": "356000",
    "end": "358800"
  },
  {
    "text": "that says duplicate key value violate",
    "start": "358800",
    "end": "361680"
  },
  {
    "text": "unique constraint and the name of the",
    "start": "361680",
    "end": "364000"
  },
  {
    "text": "constraint that you effectively created",
    "start": "364000",
    "end": "366800"
  },
  {
    "text": "because now hello nalt already",
    "start": "366800",
    "end": "370080"
  },
  {
    "text": "exists so guys what do you think about",
    "start": "370080",
    "end": "372400"
  },
  {
    "text": "this did you know about this behavior",
    "start": "372400",
    "end": "374160"
  },
  {
    "text": "because i didn't i definitely didn't",
    "start": "374160",
    "end": "376400"
  },
  {
    "text": "know about this behavior i'm actually",
    "start": "376400",
    "end": "378479"
  },
  {
    "text": "surprised right because i guess i don't",
    "start": "378479",
    "end": "381199"
  },
  {
    "text": "use nulls as often in this particular",
    "start": "381199",
    "end": "384080"
  },
  {
    "text": "case where things are unique so yeah i",
    "start": "384080",
    "end": "386000"
  },
  {
    "text": "was a little bit surprised and i thought",
    "start": "386000",
    "end": "387680"
  },
  {
    "text": "i'll share this with you now let me know",
    "start": "387680",
    "end": "389199"
  },
  {
    "text": "what you think about this in the comment",
    "start": "389199",
    "end": "391039"
  },
  {
    "text": "section below poscas15 and b is in beta",
    "start": "391039",
    "end": "393600"
  },
  {
    "text": "still not released yet and they",
    "start": "393600",
    "end": "395440"
  },
  {
    "text": "effectively introduced a new syntax to",
    "start": "395440",
    "end": "398400"
  },
  {
    "text": "solve this",
    "start": "398400",
    "end": "400080"
  },
  {
    "text": "if you consider it a problem only if you",
    "start": "400080",
    "end": "402319"
  },
  {
    "text": "consider the problem",
    "start": "402319",
    "end": "404000"
  },
  {
    "text": "see you in the next one guys",
    "start": "404000",
    "end": "407520"
  }
]