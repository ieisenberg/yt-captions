[
  {
    "start": "0",
    "end": "109000"
  },
  {
    "text": "select star from table is a universal SQL",
    "start": "0",
    "end": "6980"
  },
  {
    "text": "syntax that will basically return all columns in the table that you're",
    "start": "6980",
    "end": "13980"
  },
  {
    "text": "selecting it's been said that select star is slow and to avoid it like don't return on",
    "start": "13980",
    "end": "23100"
  },
  {
    "text": "column because it is slow but I want to actually",
    "start": "23100",
    "end": "29660"
  },
  {
    "text": "dive deep into the reasons of why select",
    "start": "29660",
    "end": "34680"
  },
  {
    "text": "star is is slow some of these reasons you might already",
    "start": "34680",
    "end": "39780"
  },
  {
    "text": "know hey we're turning 50 columns",
    "start": "39780",
    "end": "44879"
  },
  {
    "text": "is of course lower than returning one but I think some of these reasons",
    "start": "44879",
    "end": "51480"
  },
  {
    "text": "you might not have think about because it really involves understanding the",
    "start": "51480",
    "end": "56940"
  },
  {
    "text": "entire stack and the backend engineering fundamentals and",
    "start": "56940",
    "end": "63960"
  },
  {
    "text": "specifically the network aspects of things as well",
    "start": "63960",
    "end": "69360"
  },
  {
    "text": "you know and of course programming logic memory management how",
    "start": "69360",
    "end": "76200"
  },
  {
    "text": "the OS works all of this really affects the performance of your queries and",
    "start": "76200",
    "end": "84060"
  },
  {
    "text": "selecting all the fields while convenient because you don't have to enumerate the fields you want",
    "start": "84060",
    "end": "90600"
  },
  {
    "text": "it's really it can impact the performance in general so",
    "start": "90600",
    "end": "95759"
  },
  {
    "text": "I wrote up an article on medium that I'm gonna review in this video I'm going to",
    "start": "95759",
    "end": "101700"
  },
  {
    "text": "add my comments and going through the reasons of all of these things how about",
    "start": "101700",
    "end": "107640"
  },
  {
    "text": "we jump into it alright so all right so let's get started how slow is Select star let's read this little",
    "start": "107640",
    "end": "115200"
  },
  {
    "start": "109000",
    "end": "300000"
  },
  {
    "text": "bit of a paragraph and then start discussing this though in a row store",
    "start": "115200",
    "end": "120780"
  },
  {
    "text": "database engine rows are stored in units called Pages boy don't get me started",
    "start": "120780",
    "end": "127079"
  },
  {
    "text": "now we're already in the first sentence and I already like thinking about this stuff right",
    "start": "127079",
    "end": "133400"
  },
  {
    "text": "after I ride this and then coming back and says wow there is just so much to",
    "start": "133400",
    "end": "139200"
  },
  {
    "text": "these things like a page is and a block is the most overloaded term in in in",
    "start": "139200",
    "end": "147060"
  },
  {
    "text": "software engineering that is right you have no idea how the word page shows up",
    "start": "147060",
    "end": "153980"
  },
  {
    "text": "in the entire stack you know from the database to the file system to the",
    "start": "153980",
    "end": "160800"
  },
  {
    "text": "operating system to the uh SSD itself",
    "start": "160800",
    "end": "166440"
  },
  {
    "text": "right or to the drive itself the page oh pages are all different in sizes and",
    "start": "166440",
    "end": "173160"
  },
  {
    "text": "specifically here we're talking about database pages right and then database pages are are really fixed size like all",
    "start": "173160",
    "end": "181739"
  },
  {
    "text": "the databases that I know of use fixed size Pages or just just think of it",
    "start": "181739",
    "end": "187560"
  },
  {
    "text": "structure I suppose with headers and the content of the page is essentially",
    "start": "187560",
    "end": "194940"
  },
  {
    "text": "mostly rows or if you have like a column store it's going to be the columns right",
    "start": "194940",
    "end": "202620"
  },
  {
    "text": "for that first row and then the columns for the second rows it depends on the implementations and if you have",
    "start": "202620",
    "end": "208500"
  },
  {
    "text": "documents it's going to be the document so it's going to have graphs it's going to be the graphs and so on right and of course this",
    "start": "208500",
    "end": "215819"
  },
  {
    "text": "little bit changes if this is an index page versus a heap page but essentially that's the gist of it right so",
    "start": "215819",
    "end": "222360"
  },
  {
    "text": "everything is at the page effectively right and this is an example I put where",
    "start": "222360",
    "end": "227400"
  },
  {
    "text": "this is how the postgres page looks like there's a bunch of headers and these are called the the Tuple pointers and they",
    "start": "227400",
    "end": "237620"
  },
  {
    "text": "specifically specify where does this Tuple start in byte 134 and it has a",
    "start": "237620",
    "end": "246540"
  },
  {
    "text": "length of 20 bytes right and the second table starts at 155 and it has 10 and",
    "start": "246540",
    "end": "252060"
  },
  {
    "text": "this is basically lives in page zero those are Pages there but so technically",
    "start": "252060",
    "end": "260100"
  },
  {
    "text": "speaking if you really think about it the row is stored in the page with all its",
    "start": "260100",
    "end": "268860"
  },
  {
    "text": "columns so the first question is since I am when I read a page",
    "start": "268860",
    "end": "274500"
  },
  {
    "text": "I get all the rows and in that page and I get all the cons",
    "start": "274500",
    "end": "280080"
  },
  {
    "text": "so technically select star should be cheap right because I already have all",
    "start": "280080",
    "end": "285720"
  },
  {
    "text": "the columns in line quote unquote online in that page right",
    "start": "285720",
    "end": "292259"
  },
  {
    "text": "because that's how raw store stores things basically we're dealing with transactional you know workload in this",
    "start": "292259",
    "end": "298320"
  },
  {
    "text": "case so we'll always assume raw store but but then why is why do people tell",
    "start": "298320",
    "end": "305160"
  },
  {
    "start": "300000",
    "end": "649000"
  },
  {
    "text": "us that select start is slow and that's basically what we need to understand here right you see every time you fetch",
    "start": "305160",
    "end": "313620"
  },
  {
    "text": "let's say let's explain first of all how do we read something right I want to",
    "start": "313620",
    "end": "319860"
  },
  {
    "text": "read a row right select",
    "start": "319860",
    "end": "325919"
  },
  {
    "text": "star from table where ID equal one let's say this is a student ID right so",
    "start": "325940",
    "end": "333979"
  },
  {
    "text": "assuming there is no index what the database will do is okay we're",
    "start": "333979",
    "end": "339120"
  },
  {
    "text": "going to do a full table scan so there is your table and the table is literally one file and it is organized as an array",
    "start": "339120",
    "end": "347039"
  },
  {
    "text": "of these pages that we talked about this fixed size pages so what what the database will do is again I need to do a",
    "start": "347039",
    "end": "353460"
  },
  {
    "text": "full table scan and what that means is I need to scan the pages one by one in the file so I'm",
    "start": "353460",
    "end": "360539"
  },
  {
    "text": "gonna read page 0 from the file how do I get page zero remember when you read",
    "start": "360539",
    "end": "367380"
  },
  {
    "text": "from disk you have very a certain operations when you want to read right",
    "start": "367380",
    "end": "373919"
  },
  {
    "text": "you you read you specify the file descriptor where do you want to read",
    "start": "373919",
    "end": "379440"
  },
  {
    "text": "from where the starting position is and how much bytes you want to read that's",
    "start": "379440",
    "end": "385800"
  },
  {
    "text": "it and the how much thing is I think up to two gig that's the limiting and Linux",
    "start": "385800",
    "end": "391139"
  },
  {
    "text": "at least okay that that's all you already got so how does that convert to pages when it comes",
    "start": "391139",
    "end": "397020"
  },
  {
    "text": "to databases well once you understand the fundamentals is this is all simple",
    "start": "397020",
    "end": "402539"
  },
  {
    "text": "stuff right the database to read page zero page 0 starts at the zeroth",
    "start": "402539",
    "end": "408300"
  },
  {
    "text": "position in the file so the opposite is zero and Page the page size is also",
    "start": "408300",
    "end": "413520"
  },
  {
    "text": "fixed right in postgres is 8k in annual DB MySQL is 16 right and",
    "start": "413520",
    "end": "420660"
  },
  {
    "text": "so the length is 8k it's all effects so you might say how do I read page seven",
    "start": "420660",
    "end": "426180"
  },
  {
    "text": "then well seven is literally page seven is seven times the length of all the pages that went before it right so seven",
    "start": "426180",
    "end": "433500"
  },
  {
    "text": "times eight plus one so you actually start the next page right the next buy",
    "start": "433500",
    "end": "439020"
  },
  {
    "text": "and then you read 8K right and so on that's that's basically how you read",
    "start": "439020",
    "end": "444419"
  },
  {
    "text": "pages once you the database reads the these raw bytes and and these in Reading",
    "start": "444419",
    "end": "450660"
  },
  {
    "text": "verses there's little more to it than then just I say read right I don't like",
    "start": "450660",
    "end": "456900"
  },
  {
    "text": "to say these things anymore I like to understand how things work there's there's layers and layers and layers of",
    "start": "456900",
    "end": "462900"
  },
  {
    "text": "things underneath that read operation that is the file systems involved the",
    "start": "462900",
    "end": "468720"
  },
  {
    "text": "the bytes are converted into file system blocks and these blocks are mapped to",
    "start": "468720",
    "end": "474300"
  },
  {
    "text": "the SSD blocks or the sectors or in the in the drive",
    "start": "474300",
    "end": "479580"
  },
  {
    "text": "and those blocks are physically retrieved you know because the API to",
    "start": "479580",
    "end": "485759"
  },
  {
    "text": "read offset length is not consistent across the the the the the the the",
    "start": "485759",
    "end": "492800"
  },
  {
    "text": "storage driver right we don't read bytes we read blocks assuming this is a block",
    "start": "492800",
    "end": "500520"
  },
  {
    "text": "storage right we we deal mostly with block storage so everything is a block so if you want to read a single byte you",
    "start": "500520",
    "end": "507900"
  },
  {
    "text": "read whatever the number of minimum number of block the file system allows",
    "start": "507900",
    "end": "513000"
  },
  {
    "text": "you to and that's 4K in most cases all right so I'm gonna I'm gonna talk",
    "start": "513000",
    "end": "518940"
  },
  {
    "text": "about this maybe in another video so so just so I don't I don't go off track here but once you read that",
    "start": "518940",
    "end": "527580"
  },
  {
    "text": "um once that page is read from the SSD transfer to the file system into many",
    "start": "527580",
    "end": "534899"
  },
  {
    "text": "blocks and now we have the raw bytes the operating system have the raw bytes in",
    "start": "534899",
    "end": "540720"
  },
  {
    "text": "memory hot right the database now takes those Place those memory location and",
    "start": "540720",
    "end": "549120"
  },
  {
    "text": "space them into something called the shared buffers right it's the databases",
    "start": "549120",
    "end": "554820"
  },
  {
    "text": "on Cache where those pages will be lived so that hopefully someone will want to",
    "start": "554820",
    "end": "561839"
  },
  {
    "text": "query something that is in the same page so I just pull to this shared memory effectively it is",
    "start": "561839",
    "end": "568980"
  },
  {
    "text": "the reason is shared memory because the databases will spin up multiple processes of course most databases deal",
    "start": "568980",
    "end": "575040"
  },
  {
    "text": "with multi-processes and these multi-processes all of these executing multiple transaction that you need to",
    "start": "575040",
    "end": "580620"
  },
  {
    "text": "see a unified view of of all the pages and this is where the shared buffers are",
    "start": "580620",
    "end": "587279"
  },
  {
    "text": "located right so that's what we do so when I do a select ID right one oh",
    "start": "587279",
    "end": "593339"
  },
  {
    "text": "that's uh page zero oh well we don't really know it's page zero we just scan",
    "start": "593339",
    "end": "598680"
  },
  {
    "text": "we read page zero now look let's read row by one is is the id1 is id1 is the",
    "start": "598680",
    "end": "606540"
  },
  {
    "text": "id1 and then we find it if we didn't find it we read the next page page one and then it",
    "start": "606540",
    "end": "614040"
  },
  {
    "text": "verified it is page page two and so on right until we find that ID and once we",
    "start": "614040",
    "end": "619320"
  },
  {
    "text": "find it we really have everything because the page have all the columns in line",
    "start": "619320",
    "end": "629040"
  },
  {
    "text": "I'm gonna put an asterisk on that so that's that's how things work now",
    "start": "629040",
    "end": "635100"
  },
  {
    "text": "now let's go to the reasons because now everything is there why is Select star",
    "start": "635100",
    "end": "640200"
  },
  {
    "text": "slow right let's first go to the first reason case index only index only scans goodbye",
    "start": "640200",
    "end": "647760"
  },
  {
    "text": "first of all you're right right if you're actually reading the Heap which",
    "start": "647760",
    "end": "653220"
  },
  {
    "start": "649000",
    "end": "1080000"
  },
  {
    "text": "is the table data you're right you have that select store",
    "start": "653220",
    "end": "658260"
  },
  {
    "text": "you can have everything but here's what you miss on let's assume you have an index",
    "start": "658260",
    "end": "665519"
  },
  {
    "text": "like a student let's go back to the example of students right if I am a student",
    "start": "665519",
    "end": "671040"
  },
  {
    "text": "and I have a table student there is a the table uh there's an ID field there is a grade there is a name there's a",
    "start": "671040",
    "end": "677519"
  },
  {
    "text": "bunch of other stuff right so now I have the student who has an ID that is a name there's a gray there's a bunch of other",
    "start": "677519",
    "end": "683760"
  },
  {
    "text": "columns as well right so now as you might have a grade",
    "start": "683760",
    "end": "690300"
  },
  {
    "text": "index an index on the great field so if I do",
    "start": "690300",
    "end": "696720"
  },
  {
    "text": "a query says okay give me all the student IDs I'm just interested in the IDS",
    "start": "696720",
    "end": "701940"
  },
  {
    "text": "that scored more than 90. right",
    "start": "701940",
    "end": "707880"
  },
  {
    "text": "Mark a mark of 90 or higher well if you're great",
    "start": "707880",
    "end": "715140"
  },
  {
    "text": "index and assume let's assume this is",
    "start": "715140",
    "end": "720360"
  },
  {
    "text": "my sequel right or SQL Server",
    "start": "720360",
    "end": "726000"
  },
  {
    "text": "and I always I picked those two letters because they they store secondary indexes a little bit different than",
    "start": "726000",
    "end": "731399"
  },
  {
    "text": "postgresway and we're going to come to the boss guys it's just it's very similar there here",
    "start": "731399",
    "end": "737100"
  },
  {
    "text": "so now because I'm doing a grid grid is greater than 90. definitely I'm going to use the index that is there right so as",
    "start": "737100",
    "end": "744720"
  },
  {
    "text": "I'm scanning the index and again the scanning the index is going through the B trees and the b3s have layers and",
    "start": "744720",
    "end": "751380"
  },
  {
    "text": "these layers store these keys and the keys are stored in pages and the pages are stored on",
    "start": "751380",
    "end": "757860"
  },
  {
    "text": "disk very similar thing it's just that data structure is different now but but the content is still Pages you're",
    "start": "757860",
    "end": "764220"
  },
  {
    "text": "reading pages now we have read this we read through",
    "start": "764220",
    "end": "770700"
  },
  {
    "text": "this beautiful index and we found as we're scanning",
    "start": "770700",
    "end": "776940"
  },
  {
    "text": "right because the index is ordered the grades because we are having an index on",
    "start": "776940",
    "end": "782760"
  },
  {
    "text": "the grade it's order so the ones I find the 90 I find 90 and 90 and 90 and",
    "start": "782760",
    "end": "788100"
  },
  {
    "text": "another 90 and a 91 and 92 everything is ordered and and and",
    "start": "788100",
    "end": "793980"
  },
  {
    "text": "because the value of the secondary index in the leave page is the primary key",
    "start": "793980",
    "end": "801360"
  },
  {
    "text": "right again this is let's see my sequel right",
    "start": "801360",
    "end": "806639"
  },
  {
    "text": "uh or Oracle of the you have an index organized uh table right",
    "start": "806639",
    "end": "812880"
  },
  {
    "text": "then you technically have the ID because the CSA the ID is the primary key right",
    "start": "812880",
    "end": "818459"
  },
  {
    "text": "you have the ID right there in the leave page in the index so your",
    "start": "818459",
    "end": "825060"
  },
  {
    "text": "your work is done technically rock is done I said you",
    "start": "825060",
    "end": "830579"
  },
  {
    "text": "found the the grade you have over there of course is right there and you have also the the primary key",
    "start": "830579",
    "end": "837899"
  },
  {
    "text": "which is the ID which is what you want so it becomes what we call a covering",
    "start": "837899",
    "end": "843240"
  },
  {
    "text": "uh indexes scan or in in postgres speak is called index only scans right so you",
    "start": "843240",
    "end": "851040"
  },
  {
    "text": "only really need to scan the index because you don't really need anything else you just ask for the ID but the",
    "start": "851040",
    "end": "858120"
  },
  {
    "text": "moment you do select star that optimization is just screwed the",
    "start": "858120",
    "end": "863459"
  },
  {
    "text": "database is you really had to ask for the all the fields are you really did have to do",
    "start": "863459",
    "end": "869220"
  },
  {
    "text": "that damn it now says okay you need the ID but you also need the name and you need the date of birth and you need uh",
    "start": "869220",
    "end": "876839"
  },
  {
    "text": "his documents and whatever right so now what the database needs to do is collect",
    "start": "876839",
    "end": "883139"
  },
  {
    "text": "all these IDs which our primary ID is and now it has to do turn around and do",
    "start": "883139",
    "end": "890220"
  },
  {
    "text": "another lookup it's called index six right on the primary key hey I have I",
    "start": "890220",
    "end": "898199"
  },
  {
    "text": "found ID 7 scored more than 90 and 11 and 1007 and 1008 and and and 20",
    "start": "898199",
    "end": "909360"
  },
  {
    "text": "0007 they have to be random right because you don't you have no idea that the students",
    "start": "909360",
    "end": "915959"
  },
  {
    "text": "who score more than 90 are actually in order right you'll be lucky but it's never the case this is called random",
    "start": "915959",
    "end": "922800"
  },
  {
    "text": "reads So Random reads are the worst right I wanted you to the database random everything is the worst when it",
    "start": "922800",
    "end": "928800"
  },
  {
    "text": "comes to ssds reading from desk reading of databases you want to avoid those but",
    "start": "928800",
    "end": "934440"
  },
  {
    "text": "sometimes you can't right so now you have a collection of these puppies you",
    "start": "934440",
    "end": "940320"
  },
  {
    "text": "turn around and then do another scan or a seek on the primary index so you say",
    "start": "940320",
    "end": "945480"
  },
  {
    "text": "Okay I want to find this a student this student so you'll be you'll be scatter shot all over the index which",
    "start": "945480",
    "end": "953820"
  },
  {
    "text": "will cause eventually many i o to desk",
    "start": "953820",
    "end": "959579"
  },
  {
    "text": "why because you just chose to do a star instead of asking for what you want so",
    "start": "959579",
    "end": "965779"
  },
  {
    "text": "really really slow stuff in postgres right in postgres",
    "start": "965779",
    "end": "972779"
  },
  {
    "text": "by default when you just create an index on the grade right",
    "start": "972779",
    "end": "978440"
  },
  {
    "text": "always has to do that even if you ask for the ID it has to go back to the table because uh",
    "start": "978440",
    "end": "986720"
  },
  {
    "text": "postgres secondary indexes which is everything is",
    "start": "986720",
    "end": "991920"
  },
  {
    "text": "secondary there are there are no primary indexes in in postgres the the value is",
    "start": "991920",
    "end": "997500"
  },
  {
    "text": "actually called the Tuple ID which is where we explained right here right a typical ideas is literally is literally",
    "start": "997500",
    "end": "1003860"
  },
  {
    "text": "a two pair which is Page index and the index of the Tuple or the row in that",
    "start": "1003860",
    "end": "1011959"
  },
  {
    "text": "page right that's that's what it is so like this in this particular case page 0 comma one is",
    "start": "1011959",
    "end": "1021079"
  },
  {
    "text": "the first row 0.2 0 comma two is is the second Tuple",
    "start": "1021079",
    "end": "1027140"
  },
  {
    "text": "and so on right so so that that's that's what's happening to and posca stores these",
    "start": "1027140",
    "end": "1033798"
  },
  {
    "text": "tuples so it has to go back but in postgres you also can have a covering",
    "start": "1033799",
    "end": "1038839"
  },
  {
    "text": "indexes where you can create an index and you include columns from the Heap from the table in the index right such",
    "start": "1038839",
    "end": "1046880"
  },
  {
    "text": "that that index will have the ID or will have anything else you want",
    "start": "1046880",
    "end": "1053000"
  },
  {
    "text": "so you can get that beautiful index only scan so if you have such index and your",
    "start": "1053000",
    "end": "1058220"
  },
  {
    "text": "front-end application on this case is actually is the backend server right",
    "start": "1058220",
    "end": "1063260"
  },
  {
    "text": "that actually executes the query in this case it is a front-end to the database right",
    "start": "1063260",
    "end": "1069140"
  },
  {
    "text": "well will not utilize this beautiful index on this Castle so that's that's the first",
    "start": "1069140",
    "end": "1075559"
  },
  {
    "text": "case index only scans you basically kiss them goodbye when you do a select Star right",
    "start": "1075559",
    "end": "1082179"
  },
  {
    "start": "1080000",
    "end": "1260000"
  },
  {
    "text": "you might say okay I don't care the random reads affecting from this is really bad okay let's talk about",
    "start": "1082179",
    "end": "1089320"
  },
  {
    "text": "deserialization cost correct when you select star",
    "start": "1089320",
    "end": "1095900"
  },
  {
    "text": "The Columns live in the page but getting them out",
    "start": "1095900",
    "end": "1104240"
  },
  {
    "text": "and into the protocol that will be eventually",
    "start": "1104240",
    "end": "1109880"
  },
  {
    "text": "delivered to the app will require something called",
    "start": "1109880",
    "end": "1115340"
  },
  {
    "text": "deserialization because these are just a bunch of bytes at this point they are raw bytes in the page because the page",
    "start": "1115340",
    "end": "1123559"
  },
  {
    "text": "is just literally a memory once it it's pulled into the memory right through",
    "start": "1123559",
    "end": "1129980"
  },
  {
    "text": "right you you may lock it effective effectively it's just a bunch of bytes right so so now you have to actually",
    "start": "1129980",
    "end": "1137660"
  },
  {
    "text": "parse right it says okay there's this row and the first this is the First",
    "start": "1137660",
    "end": "1142820"
  },
  {
    "text": "Column this is the second column this is the third column and once you get the content of this column you actually have",
    "start": "1142820",
    "end": "1148280"
  },
  {
    "text": "to coerce you have to deserialize this from byte down to the data type of",
    "start": "1148280",
    "end": "1155000"
  },
  {
    "text": "whatever this thing is if this is an integer you cast it to an integer if this is a long if this is a double it",
    "start": "1155000",
    "end": "1162559"
  },
  {
    "text": "has to do a double if this is a custom data type you cast it to this custom",
    "start": "1162559",
    "end": "1168140"
  },
  {
    "text": "data type there's a string request a string that also has a cost not much but it can",
    "start": "1168140",
    "end": "1175280"
  },
  {
    "text": "add up if you have a lot of columns so deserialization cost you can really add",
    "start": "1175280",
    "end": "1180740"
  },
  {
    "text": "up because you don't really know how many fields that exist in advance",
    "start": "1180740",
    "end": "1187880"
  },
  {
    "text": "right he's doing select store you have to do all of that stuff right and and",
    "start": "1187880",
    "end": "1194600"
  },
  {
    "text": "that decentralization of course again we're talking about the day at the database level here converting the page",
    "start": "1194600",
    "end": "1201020"
  },
  {
    "text": "raw byte to data structure that then that data structure will be",
    "start": "1201020",
    "end": "1207340"
  },
  {
    "text": "serialized I suppose down to the network eventually right but but but but dealing",
    "start": "1207340",
    "end": "1213860"
  },
  {
    "text": "with them into a number or a value the conversion needs work and and it",
    "start": "1213860",
    "end": "1221960"
  },
  {
    "text": "needs to be stored in its own form as a variable as a data structure so you're",
    "start": "1221960",
    "end": "1227660"
  },
  {
    "text": "actually allocating more memory if you think about it just to store these things right",
    "start": "1227660",
    "end": "1233840"
  },
  {
    "text": "building those raw objects all right",
    "start": "1233840",
    "end": "1238880"
  },
  {
    "text": "so that's uh legislation cost right not much but it can add up",
    "start": "1238880",
    "end": "1244940"
  },
  {
    "text": "okay not all columns are in line first of all what do we what do you mean by inline when we say in inline when I say",
    "start": "1244940",
    "end": "1252799"
  },
  {
    "text": "inline I mean when I say when I have a raw Store where the rows are literally",
    "start": "1252799",
    "end": "1258559"
  },
  {
    "text": "one after the other row all columns first row all columns second row all",
    "start": "1258559",
    "end": "1264440"
  },
  {
    "start": "1260000",
    "end": "1680000"
  },
  {
    "text": "columns third row all comes just one after the other right The Columns that are appearing inside",
    "start": "1264440",
    "end": "1271840"
  },
  {
    "text": "the row I'll call it in line in the same page right there it's called inline columns",
    "start": "1271840",
    "end": "1279320"
  },
  {
    "text": "okay and you're going to see this word being used all the time like inline",
    "start": "1279320",
    "end": "1285160"
  },
  {
    "text": "functions right and compiler like like inlining sometimes gives poor performance things right but the problem",
    "start": "1285160",
    "end": "1291860"
  },
  {
    "text": "here is remember when we said pages are fixed size I forgot to mention one thing",
    "start": "1291860",
    "end": "1297200"
  },
  {
    "text": "which is rows cannot really span multiple Pages if you have like what do you have like a really big role with a I",
    "start": "1297200",
    "end": "1304400"
  },
  {
    "text": "don't know 20 000 columns can't happen but if you have that then the raw",
    "start": "1304400",
    "end": "1309740"
  },
  {
    "text": "technically cannot fit you will have one page with a single row and that row will",
    "start": "1309740",
    "end": "1315559"
  },
  {
    "text": "not fit that page because it's so big right so you you will have to spin up another page to complete that role",
    "start": "1315559",
    "end": "1321799"
  },
  {
    "text": "database never allowed to do that because the complexity to find the row",
    "start": "1321799",
    "end": "1327140"
  },
  {
    "text": "becomes exponentially harder so no databases as well as far as I'm aware allow rows to be spanned between",
    "start": "1327140",
    "end": "1334760"
  },
  {
    "text": "multiple Pages just because of the complexity if you think about it right",
    "start": "1334760",
    "end": "1340400"
  },
  {
    "text": "so Rose cannot span badges because of that then Hussain what do I do if I have",
    "start": "1340400",
    "end": "1347120"
  },
  {
    "text": "one field of the strength that has the entire work of Shakespeare in it",
    "start": "1347120",
    "end": "1354340"
  },
  {
    "text": "that's what databases do like think about this or or blob or lobs right",
    "start": "1354679",
    "end": "1360440"
  },
  {
    "text": "things that are actually binary that are stored in as a column Jason Jason's are",
    "start": "1360440",
    "end": "1367039"
  },
  {
    "text": "rarely stored in line like Json documents like in postgres or other databases you can't because you can't",
    "start": "1367039",
    "end": "1373400"
  },
  {
    "text": "fit a page so what happens is those are assigned a pointer and when I",
    "start": "1373400",
    "end": "1381020"
  },
  {
    "text": "say a pointer don't think of a C sharp position don't think of a c pointer here and it's",
    "start": "1381020",
    "end": "1387080"
  },
  {
    "text": "actual it's an it's a unique identifier that points back to that blob right so what",
    "start": "1387080",
    "end": "1393799"
  },
  {
    "text": "happens is a a marker is created and that thing is placed on an external",
    "start": "1393799",
    "end": "1400520"
  },
  {
    "text": "table right and and MySQL has it poscus has it's called toast right they have to",
    "start": "1400520",
    "end": "1407240"
  },
  {
    "text": "have it there's no way out you have to have some external place to store your stuff right there",
    "start": "1407240",
    "end": "1415100"
  },
  {
    "text": "are they cannot fit into the page and as a result if you think about it this actually what limits the number of",
    "start": "1415100",
    "end": "1421460"
  },
  {
    "text": "columns why don't databases allow unlimited number of columns because of this reason right because at the end of",
    "start": "1421460",
    "end": "1427940"
  },
  {
    "text": "the day you can have a non-variable static type integer like the integer is",
    "start": "1427940",
    "end": "1433220"
  },
  {
    "text": "not variable right it's a fixed size it's either four byte or eight okay 64 or 32 right if you have that then how",
    "start": "1433220",
    "end": "1441260"
  },
  {
    "text": "many actually you cannot really put that outside it doesn't make sense right that's an integer right so",
    "start": "1441260",
    "end": "1448480"
  },
  {
    "text": "so so what happens is you are limited by the whatever the number of columns based",
    "start": "1448480",
    "end": "1455600"
  },
  {
    "text": "on certain calculation you can do the math as well so what what databases do is they take",
    "start": "1455600",
    "end": "1461600"
  },
  {
    "text": "that long strength that long document that long blob that long Json put it in another table put an ID to it and that",
    "start": "1461600",
    "end": "1469039"
  },
  {
    "text": "ID is instead is stored in it's very tiny like one or two bytes or even less",
    "start": "1469039",
    "end": "1475059"
  },
  {
    "text": "inline so you only that column only have the pointer that identifier of the",
    "start": "1475059",
    "end": "1483320"
  },
  {
    "text": "external storage it's never stored in line right",
    "start": "1483320",
    "end": "1489799"
  },
  {
    "text": "and again it depends on the size of the thing right sometimes if you have like 128 characters supposed to say eh okay",
    "start": "1489799",
    "end": "1496580"
  },
  {
    "text": "I'll put it in line right there is there is a threshold to decide that but mostly large stuff are stored outside and guess",
    "start": "1496580",
    "end": "1503179"
  },
  {
    "text": "what they're often compressed so there is a cost if you actually say",
    "start": "1503179",
    "end": "1508760"
  },
  {
    "text": "give me that Json give me that document give me that strength you're asking the",
    "start": "1508760",
    "end": "1513980"
  },
  {
    "text": "database yeah you're saying it's already in line uh no I got this but I have to now do another",
    "start": "1513980",
    "end": "1521120"
  },
  {
    "text": "query to another table called the toast table and postgres the oversize something uh text or",
    "start": "1521120",
    "end": "1529760"
  },
  {
    "text": "something I forgot what it stands for okay and that",
    "start": "1529760",
    "end": "1534860"
  },
  {
    "text": "is an additional IO because that page where that toast exists might not be in the shared",
    "start": "1534860",
    "end": "1542179"
  },
  {
    "text": "buffers and as a result you're just closed another i o",
    "start": "1542179",
    "end": "1547700"
  },
  {
    "text": "look at the work you're doing look at the pain you're causing",
    "start": "1547700",
    "end": "1552980"
  },
  {
    "text": "you're causing pain an IO call goes to the disk and the disc suffers every time",
    "start": "1552980",
    "end": "1560059"
  },
  {
    "text": "you hit it with an i o right next time you do a select star think about the suffering you're causing",
    "start": "1560059",
    "end": "1567799"
  },
  {
    "text": "to all this equipments okay I tried to say this with the straight",
    "start": "1567799",
    "end": "1573740"
  },
  {
    "text": "fair but I couldn't okay so especially that because these",
    "start": "1573740",
    "end": "1579260"
  },
  {
    "text": "are things are compressed right and you can disable compression if you want but that will just blow to your",
    "start": "1579260",
    "end": "1585559"
  },
  {
    "text": "storage if you don't care about storage sure but then",
    "start": "1585559",
    "end": "1591500"
  },
  {
    "text": "not only you're pulling it from an i o external now either a CPU involved",
    "start": "1591500",
    "end": "1597260"
  },
  {
    "text": "now you're making the CPU work for you right you're uncompressing stop because",
    "start": "1597260",
    "end": "1603740"
  },
  {
    "text": "uncompressing has to be done in memory right now I'm just like ah let me uncompress Huffman encoding whatever",
    "start": "1603740",
    "end": "1612559"
  },
  {
    "text": "right gzip all this stuff is happening now geometry",
    "start": "1612559",
    "end": "1617960"
  },
  {
    "text": "stuff you deal with geometry I do with geometry all day that's my basically my my nine to five",
    "start": "1617960",
    "end": "1624140"
  },
  {
    "text": "okay geometry stuff GIS right so so yeah",
    "start": "1624140",
    "end": "1631340"
  },
  {
    "text": "this is really expensive right so it's doing select store now you're silently",
    "start": "1631340",
    "end": "1637700"
  },
  {
    "text": "and and the sad part is if you ask the neighbors to do all this stuff to pull all these blobs to pull these strings",
    "start": "1637700",
    "end": "1644480"
  },
  {
    "text": "and you just in the client you just say I really just needed the ID well I don't",
    "start": "1644480",
    "end": "1650059"
  },
  {
    "text": "really need the rest of this stuff all right it's like asking someone to bring you all this stuff right and bring",
    "start": "1650059",
    "end": "1657380"
  },
  {
    "text": "you a dish of food or something but you only take one thing you say oh I I don't want that anymore",
    "start": "1657380",
    "end": "1665900"
  },
  {
    "text": "how rude how rude really okay not all comms are online so be",
    "start": "1665900",
    "end": "1671600"
  },
  {
    "text": "careful be very careful Network cost when was the last time you're back and",
    "start": "1671600",
    "end": "1678320"
  },
  {
    "text": "running the same time in the same place as the database never you'd ever put the database in the same",
    "start": "1678320",
    "end": "1684020"
  },
  {
    "start": "1680000",
    "end": "2160000"
  },
  {
    "text": "place as the back end right they don't they never run in the same processes in",
    "start": "1684020",
    "end": "1689600"
  },
  {
    "text": "the same host right sure you can run in the same physical Halls on a separate container right but I don't know why I",
    "start": "1689600",
    "end": "1696860"
  },
  {
    "text": "would do that but you might have virtualization set up but still you have",
    "start": "1696860",
    "end": "1702020"
  },
  {
    "text": "to separate them there is networking involved right and and of course you need to keep them",
    "start": "1702020",
    "end": "1709880"
  },
  {
    "text": "as close as possible so the latency is low right you don't want to put one in",
    "start": "1709880",
    "end": "1715700"
  },
  {
    "text": "U.S West and the second one is the database is you and us East and the back",
    "start": "1715700",
    "end": "1721159"
  },
  {
    "text": "end application in U.S West and you expect queries to be fast no you have to",
    "start": "1721159",
    "end": "1727580"
  },
  {
    "text": "put them in the same network Zone hopefully right and if if you can't then create replicas and have the replicas",
    "start": "1727580",
    "end": "1734960"
  },
  {
    "text": "close by right I think I created a one video at some point I think I think it was clever keep your database closed and",
    "start": "1734960",
    "end": "1742940"
  },
  {
    "text": "your no keep your servers closed and your database closer I think I think that was clever",
    "start": "1742940",
    "end": "1749779"
  },
  {
    "text": "a clever way of saying it did I just call myself clever because kids kids",
    "start": "1749779",
    "end": "1755720"
  },
  {
    "text": "these days will call me crunch so uh right Network cost so now that we talked",
    "start": "1755720",
    "end": "1762919"
  },
  {
    "text": "about okay you selected all the fields you took the hit you did you avoided the",
    "start": "1762919",
    "end": "1767960"
  },
  {
    "text": "beautiful index on the scan you took the head of database uh data structure C",
    "start": "1767960",
    "end": "1775240"
  },
  {
    "text": "deserialization from the page down to their finger and then you took",
    "start": "1775240",
    "end": "1782419"
  },
  {
    "text": "uh uh uh what was that what else yes uh you you told me to get all these",
    "start": "1782419",
    "end": "1790039"
  },
  {
    "text": "text fields and blobfish and Jason Fields so I had to go to a toastable an external table decompress them and and",
    "start": "1790039",
    "end": "1797000"
  },
  {
    "text": "also put them in a data structure so the double double trouble and then now I'm",
    "start": "1797000",
    "end": "1803360"
  },
  {
    "text": "ready to send it back across the network now each database has its own networking protocol right",
    "start": "1803360",
    "end": "1809539"
  },
  {
    "text": "right it could be most used like binary specific proponentation I don't see I",
    "start": "1809539",
    "end": "1816380"
  },
  {
    "text": "didn't see really a a unified uh and that's something I I talk about sometimes in my channel where there is",
    "start": "1816380",
    "end": "1823580"
  },
  {
    "text": "no unified database protocol doesn't exist every database just does",
    "start": "1823580",
    "end": "1830360"
  },
  {
    "text": "its own thing right unlike the web we have HTTP right it's a unified web",
    "start": "1830360",
    "end": "1835940"
  },
  {
    "text": "protocol anything web you go HTTP right and there's like the the use cases uh",
    "start": "1835940",
    "end": "1843080"
  },
  {
    "text": "went beyond web right so everywhere else like this is the de",
    "start": "1843080",
    "end": "1848179"
  },
  {
    "text": "facto standard some people brought HTTP down to the database I don't know how how well that performs to be honest",
    "start": "1848179",
    "end": "1856279"
  },
  {
    "text": "but but every database does its own thing like a SQL server has its own postgres has its own redis has its own",
    "start": "1856279",
    "end": "1862399"
  },
  {
    "text": "everybody database I was like ah I want to build my own and then now you",
    "start": "1862399",
    "end": "1867620"
  },
  {
    "text": "you realize that data structures you have down serialized it down to bytes",
    "start": "1867620",
    "end": "1872840"
  },
  {
    "text": "down to this protocol uh language that you have right so the serialization",
    "start": "1872840",
    "end": "1879080"
  },
  {
    "text": "aspect to to that protocol application Level protocol right your application at",
    "start": "1879080",
    "end": "1886159"
  },
  {
    "text": "that the database protocol application in this case right whatever that structure is right and then that goes",
    "start": "1886159",
    "end": "1894380"
  },
  {
    "text": "into the the transport protocol which we don't have anything else TCP that's all what we have right so it goes into down",
    "start": "1894380",
    "end": "1901399"
  },
  {
    "text": "to IP packets and then segments sorry and then IP packets and",
    "start": "1901399",
    "end": "1907279"
  },
  {
    "text": "those IP packets are shipped right so now if you're sending really really really",
    "start": "1907279",
    "end": "1913820"
  },
  {
    "text": "really large columns the response from that protocol",
    "start": "1913820",
    "end": "1920840"
  },
  {
    "text": "the database response the database SQL result will be so large such that the",
    "start": "1920840",
    "end": "1926960"
  },
  {
    "text": "network transmission you will feel it especially if you have like larger latency you will feel it",
    "start": "1926960",
    "end": "1933500"
  },
  {
    "text": "because now I need to write and the the maximum I can write at a",
    "start": "1933500",
    "end": "1941360"
  },
  {
    "text": "time is the MTU which is the maximum transmission unit defined by the IP",
    "start": "1941360",
    "end": "1946760"
  },
  {
    "text": "layer like layer three and that's basically is defined based on on path",
    "start": "1946760",
    "end": "1953659"
  },
  {
    "text": "Discovery MTU right the the the the the the the protocol that discovers what is",
    "start": "1953659",
    "end": "1958820"
  },
  {
    "text": "the weakest link in this network that I'm transferring this is okay what is the minimum I can",
    "start": "1958820",
    "end": "1966559"
  },
  {
    "text": "send or maximum in this case I can set 1500 is the default on the internet you can send lower there",
    "start": "1966559",
    "end": "1974960"
  },
  {
    "text": "are some routers like a support like 500 like very old routers by 1500",
    "start": "1974960",
    "end": "1980840"
  },
  {
    "text": "is the standard there are routers with jumbo frames that suppose like nine thousand",
    "start": "1980840",
    "end": "1987799"
  },
  {
    "text": "and stuff like that and they are even large but that's the kind of standard so you can only send 15 bytes at a time in",
    "start": "1987799",
    "end": "1995059"
  },
  {
    "text": "the IP and that even it's even lower the TCP segment layer right I know I'm going into very details but",
    "start": "1995059",
    "end": "2001419"
  },
  {
    "text": "this is the point in all my videos I always go into details right I don't make like one minutes videos and deal",
    "start": "2001419",
    "end": "2008500"
  },
  {
    "text": "with it I I like to explore this thing because I I am passionate about this stuff so I apologize if you don't like",
    "start": "2008500",
    "end": "2014799"
  },
  {
    "text": "this content but I really do like to go into these details it couldn't brush",
    "start": "2014799",
    "end": "2022000"
  },
  {
    "text": "everything like I understand everything remove the black boxes so now if you",
    "start": "2022000",
    "end": "2028059"
  },
  {
    "text": "have a lot of data even if you do compress it which is an additional CPU database overhead",
    "start": "2028059",
    "end": "2034240"
  },
  {
    "text": "then you still have to transmit it and the the conjunction algorithm protocols",
    "start": "2034240",
    "end": "2041260"
  },
  {
    "text": "and slow start will allow you to send multiple of these 1500 or 1460 segments",
    "start": "2041260",
    "end": "2049500"
  },
  {
    "text": "without waiting for an acknowledgment right and initially you're going to send one",
    "start": "2049500",
    "end": "2055540"
  },
  {
    "text": "I suppose 10 recently 10 segments at a time like Google increased the initial",
    "start": "2055540",
    "end": "2061599"
  },
  {
    "text": "window size for the congestion window to 10 I suppose because like there is no point the intern is really fast these",
    "start": "2061599",
    "end": "2068260"
  },
  {
    "text": "days so let me send 10 at a time so 10 times 15 that's like what that's 15K",
    "start": "2068260",
    "end": "2073419"
  },
  {
    "text": "this is 15K right so you can say 15K at a time if",
    "start": "2073419",
    "end": "2078638"
  },
  {
    "text": "you want right at a stocked right and then",
    "start": "2078639",
    "end": "2084000"
  },
  {
    "text": "but but not all Network supports that right so it always starts slow and then it creates increase increases slowly",
    "start": "2084040",
    "end": "2090158"
  },
  {
    "text": "right incremental increases so now as you go through this you're sending that",
    "start": "2090159",
    "end": "2095980"
  },
  {
    "text": "but eventually the client have to start acknowledging this it has to process",
    "start": "2095980",
    "end": "2102339"
  },
  {
    "text": "this and it only the client only acknowledged something that actually was able to receive right so if there is a",
    "start": "2102339",
    "end": "2108940"
  },
  {
    "text": "data loss guess what the client didn't receive it the server timeout will hit and then we'll",
    "start": "2108940",
    "end": "2115000"
  },
  {
    "text": "retransmit it so all of this you'll feel it then more Network you have latency",
    "start": "2115000",
    "end": "2120240"
  },
  {
    "text": "the more you will kind of feel it that's why it's like I always feel like",
    "start": "2120240",
    "end": "2125859"
  },
  {
    "text": "applications if you want to really test applications like when it comes to Performance like",
    "start": "2125859",
    "end": "2132220"
  },
  {
    "text": "just just put put the database and the back end in a very really you know uh far apart I know it's",
    "start": "2132220",
    "end": "2140859"
  },
  {
    "text": "a bad idea right to do that in production but but it will it will force you to optimize because you're gonna you",
    "start": "2140859",
    "end": "2147280"
  },
  {
    "text": "you're gonna send as small as possible and you're gonna receive as small as possible data you're gonna say okay ah",
    "start": "2147280",
    "end": "2152560"
  },
  {
    "text": "why am I sending this much let me send less right so it's like putting yourself in",
    "start": "2152560",
    "end": "2157780"
  },
  {
    "text": "slow mode such that you feel the pain uh off of these kind of things right so",
    "start": "2157780",
    "end": "2164740"
  },
  {
    "start": "2160000",
    "end": "2364000"
  },
  {
    "text": "returning all columns require decentralization right of of these large",
    "start": "2164740",
    "end": "2169839"
  },
  {
    "text": "columns such as strengths blob the client will never use that's the sad part all of this you're encoding all the",
    "start": "2169839",
    "end": "2176800"
  },
  {
    "text": "high cost of transmission for nothing nothing at all and then we finally talk about the",
    "start": "2176800",
    "end": "2183579"
  },
  {
    "text": "client deserialization where now that I actually the client received all this raw TCP",
    "start": "2183579",
    "end": "2191040"
  },
  {
    "text": "segments from the neck the neck actually transferred it to the",
    "start": "2191040",
    "end": "2196599"
  },
  {
    "text": "OS through dma and then that becomes just robots and the sigma and the OS now",
    "start": "2196599",
    "end": "2205720"
  },
  {
    "text": "just say okay what's for this listener where is this going this is IP this IP this destination all right it is this",
    "start": "2205720",
    "end": "2213040"
  },
  {
    "text": "socket so it will start transmitting your data to The Client app which is the",
    "start": "2213040",
    "end": "2218079"
  },
  {
    "text": "the basically if you have no node.js that's the node.js app and specifically",
    "start": "2218079",
    "end": "2224200"
  },
  {
    "text": "the library that you use for the database uh",
    "start": "2224200",
    "end": "2229300"
  },
  {
    "text": "uh client right so if it's a postgres client that will be that that Library will be called and you're at the mercy",
    "start": "2229300",
    "end": "2236320"
  },
  {
    "text": "of how this library is authored how is it parsing the protocol how is it how is",
    "start": "2236320",
    "end": "2241720"
  },
  {
    "text": "it understanding this stuff that's why lazy parsing is also a thing and a client side where uh let's actually wait",
    "start": "2241720",
    "end": "2250240"
  },
  {
    "text": "for the client to consume some of the stuff such that",
    "start": "2250240",
    "end": "2255280"
  },
  {
    "text": "you can avoid the head of client deserialization and client building all",
    "start": "2255280",
    "end": "2260440"
  },
  {
    "text": "these objects fetch has the same thing by the way right the fish API fetch API",
    "start": "2260440",
    "end": "2266380"
  },
  {
    "text": "when you call it it will it will it will give you the headers only it will give you the",
    "start": "2266380",
    "end": "2272079"
  },
  {
    "text": "response but it'll give you the just the byte the raw body right you cannot actually do anything with the body until",
    "start": "2272079",
    "end": "2278020"
  },
  {
    "text": "you call Body Dot Json function so go",
    "start": "2278020",
    "end": "2283480"
  },
  {
    "text": "ahead and actually took take the head to actually this realizer and the reason they do fish does it this way is because",
    "start": "2283480",
    "end": "2290700"
  },
  {
    "text": "uh you might only lead the headers for some reason or you might only need the response code right the status code or",
    "start": "2290700",
    "end": "2298240"
  },
  {
    "text": "content lag so this is the way such that the app the",
    "start": "2298240",
    "end": "2304480"
  },
  {
    "text": "client will consume what it needs and when it actually is the content to the body it will do Json or dot text to",
    "start": "2304480",
    "end": "2312040"
  },
  {
    "text": "actually move it from binary down to the deserialization down to the data",
    "start": "2312040",
    "end": "2318400"
  },
  {
    "text": "structure in this case it's Json because compared to Json is expensive right",
    "start": "2318400",
    "end": "2324240"
  },
  {
    "text": "now I'm assuming it's the response is Json in this case right and uh so so the",
    "start": "2324520",
    "end": "2330280"
  },
  {
    "text": "decentralization is costly so if you can do it lazily that's even better but how",
    "start": "2330280",
    "end": "2335500"
  },
  {
    "text": "about that if you can avoid sending data that you never use that's even better",
    "start": "2335500",
    "end": "2340780"
  },
  {
    "text": "for the back end isn't it right so yeah guys that's that's all what I have for",
    "start": "2340780",
    "end": "2347200"
  },
  {
    "text": "you today right so we talked about Hawaii select star is",
    "start": "2347200",
    "end": "2353260"
  },
  {
    "text": "really slow really really really slow I might have missed a reason or not let me know in the those comments down below",
    "start": "2353260",
    "end": "2359920"
  },
  {
    "text": "hope you enjoyed this video I'm gonna see you on the next one you guys stay awesome goodbye",
    "start": "2359920",
    "end": "2365640"
  }
]