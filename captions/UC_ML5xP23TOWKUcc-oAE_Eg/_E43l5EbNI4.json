[
  {
    "start": "0",
    "end": "180000"
  },
  {
    "text": "what is going on guys my name is hussein and this is um an old bug gold",
    "start": "80",
    "end": "7680"
  },
  {
    "text": "article uber engineering switched from postgres to mysql",
    "start": "7680",
    "end": "13599"
  },
  {
    "text": "and this article was published on july 26 2016 and uh",
    "start": "13599",
    "end": "20480"
  },
  {
    "text": "this article explains why uber moved from polls chris to my",
    "start": "20480",
    "end": "26160"
  },
  {
    "text": "sequel back in the days i remember that this article got a lot of backlash",
    "start": "26160",
    "end": "32640"
  },
  {
    "text": "from the postgres community and actually the whole database community uh to be honest because of of how the",
    "start": "32640",
    "end": "40719"
  },
  {
    "text": "language used in this article severely criticized postgres as if it's a bad database",
    "start": "40719",
    "end": "48079"
  },
  {
    "text": "right they don't even mention that thing that they say hey by the way guys this is just didn't work for us it doesn't mean it",
    "start": "48079",
    "end": "54079"
  },
  {
    "text": "won't work for you so that's that's was uh that was the main reason this article was",
    "start": "54079",
    "end": "60399"
  },
  {
    "text": "heavily criticized i'm gonna reference below this article and the hacker news um uh thread",
    "start": "60399",
    "end": "68320"
  },
  {
    "text": "that explains that they're just gonna have a lot of discussions as some discussions go into the deep some",
    "start": "68320",
    "end": "73920"
  },
  {
    "text": "discussions uh kind of pulling the flaws of this article but what i want to do in this",
    "start": "73920",
    "end": "79520"
  },
  {
    "text": "video slash podcast is going to go through this article and through the main pain point that",
    "start": "79520",
    "end": "85119"
  },
  {
    "text": "uber had and then discuss them give you my personal opinion whether i think uh",
    "start": "85119",
    "end": "90799"
  },
  {
    "text": "uber moving from pulse chris did they have to move from postgres to my sequel",
    "start": "90799",
    "end": "96000"
  },
  {
    "text": "or not all of that stuff how about we jump into it guys so guys um first they explained that",
    "start": "96000",
    "end": "104159"
  },
  {
    "text": "their architecture right here um they have the money thick back in application written in python",
    "start": "104159",
    "end": "109840"
  },
  {
    "text": "that use postgres for data persistence and they're moving that again this is 2016 things changing",
    "start": "109840",
    "end": "116479"
  },
  {
    "text": "and change but they're moving to a microservices architecture and surprisingly to a new system",
    "start": "116479",
    "end": "124079"
  },
  {
    "text": "using schema-less it's a noble database shorting layer built on top of my sql so we're going to",
    "start": "124079",
    "end": "130160"
  },
  {
    "text": "talk about that a little bit that that just that is a little bit of flag you might you might you might say you're",
    "start": "130160",
    "end": "135760"
  },
  {
    "text": "saying what schema list and mysql that doesn't make any sense right exactly that's a lot of people confused",
    "start": "135760",
    "end": "142080"
  },
  {
    "text": "oh okay why would you pick my sequel for scheme of this",
    "start": "142080",
    "end": "147360"
  },
  {
    "text": "just go with with cassandra crush db i don't think crushdb was born back then",
    "start": "147360",
    "end": "154160"
  },
  {
    "text": "but but fauna mango right anything but yeah",
    "start": "154160",
    "end": "161040"
  },
  {
    "text": "again they have their own reasons uh and that's another article but what i want to focus in here is the",
    "start": "161040",
    "end": "167760"
  },
  {
    "text": "architecture of postgres as they claim so here's the for the people listening we're reading now",
    "start": "167760",
    "end": "173680"
  },
  {
    "text": "the architecture of postgres and i'm gonna read the article the five most pain point",
    "start": "173680",
    "end": "180959"
  },
  {
    "start": "180000",
    "end": "240000"
  },
  {
    "text": "that led uber to move from postgres to mysql so",
    "start": "180959",
    "end": "188480"
  },
  {
    "text": "so this is this is the article now we encountered many postgres limitations the first one",
    "start": "188480",
    "end": "196000"
  },
  {
    "text": "in inefficient architecture for rights the second one inefficient data replication the third",
    "start": "196000",
    "end": "202480"
  },
  {
    "text": "one issue with table corruption issues with table correction issues not issue and",
    "start": "202480",
    "end": "208959"
  },
  {
    "text": "there's poor the fourth one poor replica mvcc multi-version concurrency control",
    "start": "208959",
    "end": "215599"
  },
  {
    "text": "support and the fifth one is the final one difficulty upgrading to new releases i",
    "start": "215599",
    "end": "222080"
  },
  {
    "text": "kind of agree with some of them because i use postgres and i know how painful is to upgrade postgres so i can relate it to that",
    "start": "222080",
    "end": "230239"
  },
  {
    "text": "i i understand that this is a little bit easier process right now but nevertheless how about we i don't",
    "start": "230239",
    "end": "238000"
  },
  {
    "text": "agree with all the points by the way but i'm just reading out to you i agree with some of them some of them is just to me to be",
    "start": "238000",
    "end": "245200"
  },
  {
    "start": "240000",
    "end": "585000"
  },
  {
    "text": "preposterous so how about we jump into it so they look through the limitation and they",
    "start": "245200",
    "end": "250720"
  },
  {
    "text": "decide to move to my sequel because it solves most of these problems so how about we jumped into",
    "start": "250720",
    "end": "257280"
  },
  {
    "text": "one point one point after another so the first point here",
    "start": "257280",
    "end": "263280"
  },
  {
    "text": "that's called the on disk format they are describing in this article in this",
    "start": "263280",
    "end": "268639"
  },
  {
    "text": "section that that on disk format of postgres that implements a",
    "start": "268639",
    "end": "275600"
  },
  {
    "text": "multi-version concurrency controller and we talked about it many times in this channel how the uh indexes are stored",
    "start": "275600",
    "end": "283759"
  },
  {
    "text": "how secondary indexes are stored in in postgres how do they implement a multiversion",
    "start": "283759",
    "end": "289440"
  },
  {
    "text": "concurrency controller using the transaction id the tid right and then max id and min id and how you",
    "start": "289440",
    "end": "296080"
  },
  {
    "text": "how a row becomes visible my transaction and once i go out of scope of the transaction i need to",
    "start": "296080",
    "end": "302240"
  },
  {
    "text": "do a vacuum to clean up those rows that need no longer seen by any other transaction",
    "start": "302240",
    "end": "308320"
  },
  {
    "text": "so that's all gum comes down to the isolation and all that stuff that we talked about",
    "start": "308320",
    "end": "314720"
  },
  {
    "text": "many times this channel so check out the acid video here to learn about isolation acid atomicity i'm not going to explain",
    "start": "314720",
    "end": "320639"
  },
  {
    "text": "it right here so that's that's what i explained here so the what they are going through here is they",
    "start": "320639",
    "end": "327759"
  },
  {
    "text": "have a table called users and they showing you how postgres works",
    "start": "327759",
    "end": "332880"
  },
  {
    "text": "so we're for the people listening in the podcast we're looking at a table with four columns id first last",
    "start": "332880",
    "end": "340720"
  },
  {
    "text": "and birth of the year so first name last name and then birthday and then there's",
    "start": "340720",
    "end": "347120"
  },
  {
    "text": "an id is a number first name is a obviously string last name the string character and then birth year and they",
    "start": "347120",
    "end": "353759"
  },
  {
    "text": "show you how this is on disk there's a a ct id which is",
    "start": "353759",
    "end": "359039"
  },
  {
    "text": "which which is a transaction id that is stored that's basically the tuple reference",
    "start": "359039",
    "end": "366960"
  },
  {
    "text": "on the disk this is very very important so these tables are a b c d e f g and so",
    "start": "366960",
    "end": "373759"
  },
  {
    "text": "on and so the primary keys they have an index on the primary key which is the id they have a secondary index",
    "start": "373759",
    "end": "380000"
  },
  {
    "text": "on the first last and birth year so they have indexes on all of them and again this is just an",
    "start": "380000",
    "end": "386000"
  },
  {
    "text": "example they didn't show us their their architecture for security reason probably",
    "start": "386000",
    "end": "391199"
  },
  {
    "text": "so they don't they don't show us their scheme and nothing like that but from this example that tells me that",
    "start": "391199",
    "end": "398000"
  },
  {
    "text": "they have a lot of indexes so pay attention to that so postgres",
    "start": "398000",
    "end": "404000"
  },
  {
    "text": "and their primary key and secondary key always point to the tuple id which is the physical",
    "start": "404000",
    "end": "410800"
  },
  {
    "text": "representation on disk right and here's here's here's how",
    "start": "410800",
    "end": "416080"
  },
  {
    "text": "postgres works so if you now go ahead and update a row any row in this table",
    "start": "416080",
    "end": "424400"
  },
  {
    "text": "what we do is we essentially insult insert a duplicate row with a new tuple id this tid right",
    "start": "424400",
    "end": "433759"
  },
  {
    "text": "and now that we have a new id we need to point the indexes",
    "start": "433759",
    "end": "441360"
  },
  {
    "text": "the secondary indexes and pretty much everything that uses this tuple id to the new",
    "start": "441360",
    "end": "446400"
  },
  {
    "text": "representation right and that takes a finite amount of time",
    "start": "446400",
    "end": "452880"
  },
  {
    "text": "finite amount of writes i find what i want to work for postgres to do right because everything points directly",
    "start": "452880",
    "end": "459199"
  },
  {
    "text": "to the desk just like my i uh my isom isam",
    "start": "459199",
    "end": "464960"
  },
  {
    "text": "and mysql that's exactly the same architecture where everything points directly to disk and you might say",
    "start": "464960",
    "end": "470400"
  },
  {
    "text": "what's bad about this there's good and bad the bad thing is what they are",
    "start": "470400",
    "end": "476080"
  },
  {
    "text": "explaining explaining here is this hey the moment we touch any role i i i have to update all the indexes",
    "start": "476080",
    "end": "485199"
  },
  {
    "text": "including the primary key because now all these indexes have a new uh the those",
    "start": "485199",
    "end": "492639"
  },
  {
    "text": "entries have a new id that i need to pick up tuple id so i have to update that and",
    "start": "492639",
    "end": "498000"
  },
  {
    "text": "that obviously takes a ripple effect it's called they called it right amplification",
    "start": "498000",
    "end": "503440"
  },
  {
    "text": "in the common slides right and this logical writer i updated a single field",
    "start": "503440",
    "end": "509360"
  },
  {
    "text": "in a single row yet it results on five six seven",
    "start": "509360",
    "end": "514640"
  },
  {
    "text": "right physical rights to disk because you're updating the secondary index the secondary and the second if you have a",
    "start": "514640",
    "end": "520719"
  },
  {
    "text": "lot of indexes this even gets slower and slower and slower right so bear bear with me here right this is",
    "start": "520719",
    "end": "528240"
  },
  {
    "text": "i'm just explaining their point now so they they go through all of this exactly what i said and",
    "start": "528240",
    "end": "536080"
  },
  {
    "text": "that as a result slows things down because first of all",
    "start": "536080",
    "end": "542800"
  },
  {
    "text": "rights are not just right or not slow per se because you you do flush right you have a lot of rights to",
    "start": "542800",
    "end": "549680"
  },
  {
    "text": "do and then you do all of them at once but the the side effect of the",
    "start": "549680",
    "end": "554720"
  },
  {
    "text": "rights we're gonna explain it in a minute it's like one single thing translate to a lot of physical rights i",
    "start": "554720",
    "end": "562160"
  },
  {
    "text": "have to update this index this index this and doesn't doesn't it the right to headlock which is which is something we're going to explain in this",
    "start": "562160",
    "end": "568320"
  },
  {
    "text": "article a lot gets large when you when you want to",
    "start": "568320",
    "end": "573760"
  },
  {
    "text": "apply these changes so that's the first thing on disk they go through",
    "start": "573760",
    "end": "578959"
  },
  {
    "text": "the on disk representation of postgres then they explain the second point is",
    "start": "578959",
    "end": "585440"
  },
  {
    "start": "585000",
    "end": "799000"
  },
  {
    "text": "replication and replication here guys as i discussed the right ahead log is",
    "start": "585440",
    "end": "591600"
  },
  {
    "text": "basically if i do an insert if i do an update this statement is translated into",
    "start": "591600",
    "end": "598080"
  },
  {
    "text": "physical changes okay go to this block and change this location and and replace this value",
    "start": "598080",
    "end": "605120"
  },
  {
    "text": "with this value right or go to this index and change this value to this value go to this",
    "start": "605120",
    "end": "610399"
  },
  {
    "text": "index on this position change this these changes are written in the right",
    "start": "610399",
    "end": "615440"
  },
  {
    "text": "ahead log as actual disk changes okay so this is a very very",
    "start": "615440",
    "end": "623360"
  },
  {
    "text": "very important thing to know now this is the right ahead look we have this and and also direct ahead log is has its its own",
    "start": "623360",
    "end": "630959"
  },
  {
    "text": "structure right it's somewhere else and and it's being maintained so that's",
    "start": "630959",
    "end": "636240"
  },
  {
    "text": "also the right ahead log also has physical representation on disk when you",
    "start": "636240",
    "end": "642959"
  },
  {
    "text": "translate it into an ssd right so there is a lot lots going on so now",
    "start": "642959",
    "end": "648079"
  },
  {
    "text": "when you come to replication which we talked about right here guys and also discussed in my course",
    "start": "648079",
    "end": "653200"
  },
  {
    "text": "introduction to database engineering the idea of having a primary database accept the rights and standby",
    "start": "653200",
    "end": "660399"
  },
  {
    "text": "replication for reads that that you can they can take reads you need to push these changes",
    "start": "660399",
    "end": "666240"
  },
  {
    "text": "and the way you push them is you push the right ahead log which is a very consistent thing down",
    "start": "666240",
    "end": "673360"
  },
  {
    "text": "the standby databases so they can get up to date right so it sounds simple",
    "start": "673360",
    "end": "680959"
  },
  {
    "text": "enough and what what what what they explain here in the replication form and this is where",
    "start": "680959",
    "end": "688160"
  },
  {
    "text": "kinda their point about the limitation of postgres is you guys have this first of all you have",
    "start": "688160",
    "end": "694720"
  },
  {
    "text": "this right ahead look which is quite large why because a single update statement translated",
    "start": "694720",
    "end": "701920"
  },
  {
    "text": "into multiple writes and these writes are made its way to the",
    "start": "701920",
    "end": "707120"
  },
  {
    "text": "right ahead log hmm so the word the right ahead log doesn't have",
    "start": "707120",
    "end": "712399"
  },
  {
    "text": "update this table it's not like statement based replication",
    "start": "712399",
    "end": "717760"
  },
  {
    "text": "despite postgres support statement based replication through a third party i believe the my",
    "start": "717760",
    "end": "725120"
  },
  {
    "text": "sequel have both supported both statement based replication",
    "start": "725120",
    "end": "730320"
  },
  {
    "text": "and also right based replication there is again pros and cons for both",
    "start": "730320",
    "end": "736959"
  },
  {
    "text": "so now when when we try to apply that came back the dog was barking all",
    "start": "736959",
    "end": "744000"
  },
  {
    "text": "right so the master database pushes the wall changes down to the",
    "start": "744000",
    "end": "751200"
  },
  {
    "text": "standby databases so they can get updated but they might say hussein what if",
    "start": "751200",
    "end": "756320"
  },
  {
    "text": "the standbys actually executing a query do this just do we just stop this query right",
    "start": "756320",
    "end": "763279"
  },
  {
    "text": "let's say i'm seeing a query in the standby to read something that happened to be deleted in the",
    "start": "763279",
    "end": "768720"
  },
  {
    "text": "master and it's being written directly so i stop there do i stop the query do i wait",
    "start": "768720",
    "end": "775440"
  },
  {
    "text": "all these questions are gonna get answered in a minute and as a result it will shape their",
    "start": "775440",
    "end": "781920"
  },
  {
    "text": "decision to move to my sequel i'm gonna i'm just gonna explain it to you now",
    "start": "781920",
    "end": "787360"
  },
  {
    "text": "so now they have they we talked about the on desk replica and the on desk representation we talked",
    "start": "787360",
    "end": "793040"
  },
  {
    "text": "about replication and now we're gonna talk about the consequences of postgres design",
    "start": "793040",
    "end": "799040"
  },
  {
    "start": "799000",
    "end": "1004000"
  },
  {
    "text": "that's the third point here where the problems of postgres so let's enjoy this i'm",
    "start": "799040",
    "end": "806560"
  },
  {
    "text": "reading this the first problem is right amplification and writing verification is apparently something it isn't in ssd",
    "start": "806560",
    "end": "813760"
  },
  {
    "text": "where a single write that you think it's logical",
    "start": "813760",
    "end": "819120"
  },
  {
    "text": "translate to many many many physical writes especially in ssd ssd does its own thing",
    "start": "819120",
    "end": "824639"
  },
  {
    "text": "so when you update versus insert ssd does a little bit different thing",
    "start": "824639",
    "end": "832560"
  },
  {
    "text": "ssds love to insert new things you have to like to logically just insert new things and and",
    "start": "832560",
    "end": "838720"
  },
  {
    "text": "change create new pages ssd",
    "start": "838720",
    "end": "844079"
  },
  {
    "text": "does not do well with updates because the goal of ssd",
    "start": "844079",
    "end": "850480"
  },
  {
    "text": "is to have a page and flush it in order to update an existing page you have to",
    "start": "850480",
    "end": "855839"
  },
  {
    "text": "invalidate that existing page you take it and then you copy it",
    "start": "855839",
    "end": "861760"
  },
  {
    "text": "change it and then write it so there is a little bit more work when it comes to an update versus an",
    "start": "861760",
    "end": "867040"
  },
  {
    "text": "insert which is faster so that's just that's that's all the reason why google invented the level db database",
    "start": "867040",
    "end": "875199"
  },
  {
    "text": "and then why facebook invented rocks db uh on top of that i think that to to",
    "start": "875199",
    "end": "882000"
  },
  {
    "text": "take advantage of ssds and they built a completely different structure called the log structured merge tree where it's",
    "start": "882000",
    "end": "889040"
  },
  {
    "text": "it's optimized for inserts instead of updates right so everything is an insert",
    "start": "889040",
    "end": "894240"
  },
  {
    "text": "almost in the in the log structure merger so so that's that's the idea of right",
    "start": "894240",
    "end": "899839"
  },
  {
    "text": "amplification ssd now take that and amplify it at the postgres level",
    "start": "899839",
    "end": "905199"
  },
  {
    "text": "i at that a client i'm doing a single update statement to my table and if i have like 700",
    "start": "905199",
    "end": "912560"
  },
  {
    "text": "indexes i just made 700 updates physical updates",
    "start": "912560",
    "end": "918959"
  },
  {
    "text": "as a result of my single logical update",
    "start": "918959",
    "end": "924240"
  },
  {
    "text": "so that this 700 updates also at the ssd level translate to many",
    "start": "924240",
    "end": "930480"
  },
  {
    "text": "many physical amplified ssd updates because you were going rights and pages",
    "start": "930480",
    "end": "936639"
  },
  {
    "text": "and it's this d poor thing they have a limited shelf life so if you have if you have a limited",
    "start": "936639",
    "end": "943440"
  },
  {
    "text": "shelf life ssd you can only write so much i think there is a number that varies between a disc and another",
    "start": "943440",
    "end": "950320"
  },
  {
    "text": "but in general it's essentially i think 12 000 times or something like that",
    "start": "950320",
    "end": "955360"
  },
  {
    "text": "that's most of them so yeah so they explained this here i just summarized it",
    "start": "955360",
    "end": "960720"
  },
  {
    "text": "to you right amplification is a problem for them so there is this getting is getting um their life",
    "start": "960720",
    "end": "968480"
  },
  {
    "text": "span of ssd is getting lower and lower because of the right amplification because those guys have hundreds and",
    "start": "968480",
    "end": "975519"
  },
  {
    "text": "hundreds of indexes why would you have this much indexes beats me do you really query on all of them do",
    "start": "975519",
    "end": "982480"
  },
  {
    "text": "you really query on first name right or last",
    "start": "982480",
    "end": "988000"
  },
  {
    "text": "name that's why adding indexes is great adding too much indexes is just a bad",
    "start": "988000",
    "end": "994320"
  },
  {
    "text": "idea so that's the right amplification problem",
    "start": "994320",
    "end": "999120"
  },
  {
    "text": "the second problem they want to discuss here is is the replication problem guys take the same thing that we",
    "start": "1000240",
    "end": "1007519"
  },
  {
    "start": "1004000",
    "end": "1276000"
  },
  {
    "text": "did we did a single update that translated to lots of update to all the indexes",
    "start": "1007519",
    "end": "1013360"
  },
  {
    "text": "because all of the indexes point to the row directly so and the roach id changes",
    "start": "1013360",
    "end": "1019360"
  },
  {
    "text": "so we have to make them aware of this row changes so all of these indexes point to the row",
    "start": "1019360",
    "end": "1025438"
  },
  {
    "text": "directly so these changes are are just amplified now these changes translate to what to a",
    "start": "1025439",
    "end": "1032880"
  },
  {
    "text": "wall right right ahead log hey update this physical index and this index and the second and then",
    "start": "1032880",
    "end": "1039520"
  },
  {
    "text": "this this and by the way there is a row here change this value to this and the result it's all physical right to the disk",
    "start": "1039520",
    "end": "1049439"
  },
  {
    "text": "what they complain about in their applications is this wall translates to a large",
    "start": "1050320",
    "end": "1059440"
  },
  {
    "text": "big sized bandwidth when it comes to to their to their",
    "start": "1059440",
    "end": "1066160"
  },
  {
    "text": "master uh worker or standby replication",
    "start": "1066160",
    "end": "1072559"
  },
  {
    "text": "and those are interstate they they have their replica replicas across states across different",
    "start": "1072559",
    "end": "1079520"
  },
  {
    "text": "countries so they had to buy expensive bandwidth to kind of",
    "start": "1079520",
    "end": "1086799"
  },
  {
    "text": "transmit their wall changes from this replica to this replica and i believe",
    "start": "1086799",
    "end": "1093520"
  },
  {
    "text": "they have also child grandchild replication so take that into consideration so",
    "start": "1093520",
    "end": "1098880"
  },
  {
    "text": "the wall changes as they grow large the bandwidth ex is becomes expensive because they are",
    "start": "1098880",
    "end": "1104000"
  },
  {
    "text": "very large and they're not making small updates they're making large updates which tonight is even larger so that's that that's the",
    "start": "1104000",
    "end": "1110559"
  },
  {
    "text": "limitation problem here in case i'm going to read this this section for you guys so",
    "start": "1110559",
    "end": "1115919"
  },
  {
    "text": "um so you can learn more about it in case one where postgres replication happens",
    "start": "1115919",
    "end": "1121840"
  },
  {
    "text": "purely within a single data center the replication bandwidth may not be a problem",
    "start": "1121840",
    "end": "1126960"
  },
  {
    "text": "modern network equipment and switches can handle a large amount of bandwidth and many host providers offer free or",
    "start": "1126960",
    "end": "1133200"
  },
  {
    "text": "cheap intra data center bandwidth right fewer internally i can transfer one gig",
    "start": "1133200",
    "end": "1140559"
  },
  {
    "text": "of all sizes easily however when replication must happen between",
    "start": "1140559",
    "end": "1145600"
  },
  {
    "text": "data centers issues can quickly escalate for instance uber originally used a physical servers",
    "start": "1145600",
    "end": "1152320"
  },
  {
    "text": "in colic collocation space i don't know what what the heck is a core location",
    "start": "1152320",
    "end": "1157679"
  },
  {
    "text": "collocation space on the west coast for disaster recovery purposes we added servers in the",
    "start": "1157679",
    "end": "1163520"
  },
  {
    "text": "in second east coast collocation space uh in this design we had a master",
    "start": "1163520",
    "end": "1169679"
  },
  {
    "text": "postgas instance plus replicas in western data center and set of replication estrone so that",
    "start": "1169679",
    "end": "1176080"
  },
  {
    "text": "that kind of can the constraint you can see from east to west just just did not scale for them",
    "start": "1176080",
    "end": "1183840"
  },
  {
    "text": "right because of that see one how one single problem can lead to a lot of bigger problems can",
    "start": "1183840",
    "end": "1190080"
  },
  {
    "text": "lead to another problem you see the pattern guys rights are big because they have a lot",
    "start": "1190080",
    "end": "1197360"
  },
  {
    "text": "of indexes that's where you should start why do you have this much indexes",
    "start": "1197360",
    "end": "1206400"
  },
  {
    "text": "you might say hey i'm saying i cannot live i have to have 350 indexes on all my fields",
    "start": "1206400",
    "end": "1214320"
  },
  {
    "text": "because i query against them well in this case i was like okay maybe",
    "start": "1214320",
    "end": "1219760"
  },
  {
    "text": "that's not a choice for you then but try to avoid that in the first place",
    "start": "1219760",
    "end": "1225280"
  },
  {
    "text": "that's that's what i that's what i didn't see and that's why people are pissed it's like wow can't didn't did you",
    "start": "1225280",
    "end": "1232880"
  },
  {
    "text": "really exp didn't you explain why do you guys have a lot of indexes can you explain why do you need i bet if",
    "start": "1232880",
    "end": "1240080"
  },
  {
    "text": "you go into the actual architecture most things don't need this much indexes",
    "start": "1240080",
    "end": "1248320"
  },
  {
    "text": "as a result you will not translate to a huge uh right amplification consequences you",
    "start": "1248320",
    "end": "1254640"
  },
  {
    "text": "will not have that because you'll not have a lot of of indexes to update",
    "start": "1254640",
    "end": "1260159"
  },
  {
    "text": "right but well we we're not on uber so we don't know",
    "start": "1260159",
    "end": "1266240"
  },
  {
    "text": "their architecture but that might be a valid use case so let's go to the data corruption this is the",
    "start": "1266240",
    "end": "1272000"
  },
  {
    "text": "this is the most dumb section in this whole arc article i'll save you some time what",
    "start": "1272000",
    "end": "1278799"
  },
  {
    "start": "1276000",
    "end": "1440000"
  },
  {
    "text": "they say here is hey during the replication we postgres92 had a bug in it",
    "start": "1278799",
    "end": "1285039"
  },
  {
    "text": "and our table were was corrupted as a result",
    "start": "1285039",
    "end": "1290960"
  },
  {
    "text": "seriously seriously uber what software doesn't have bugs you're",
    "start": "1290960",
    "end": "1297520"
  },
  {
    "text": "adding a bug as a result to move from pulse chris to a my sequel like",
    "start": "1297520",
    "end": "1303919"
  },
  {
    "text": "mysql is perfect that's just odd that's just to me i'm",
    "start": "1303919",
    "end": "1310159"
  },
  {
    "text": "sorry that's just odd so they said during during the replication",
    "start": "1310159",
    "end": "1315200"
  },
  {
    "text": "process the replicas were not in sync for some reason and as a result when you",
    "start": "1315200",
    "end": "1320720"
  },
  {
    "text": "query for for a unique value let's say select star from users were id equal four you should",
    "start": "1320720",
    "end": "1326000"
  },
  {
    "text": "get one right they were getting two they were getting the old retired row for some for some reason",
    "start": "1326000",
    "end": "1332880"
  },
  {
    "text": "right and that causes their application to to to fall down and then fall apart so they had to",
    "start": "1332880",
    "end": "1338400"
  },
  {
    "text": "add defensive programming and then to catch for this stuff but",
    "start": "1338400",
    "end": "1343840"
  },
  {
    "text": "it's a bug postcards immediately if if they notified pogba's team they would immediately have fixed it and",
    "start": "1343840",
    "end": "1349840"
  },
  {
    "text": "and fix that bug immediately but that's a good bug but i don't see bugs as a reason to move",
    "start": "1349840",
    "end": "1356320"
  },
  {
    "text": "from as a showstopper in my opinion so that's they talk about that and they talk about",
    "start": "1356320",
    "end": "1362799"
  },
  {
    "text": "here one section is the b3 rebalancing which is by the way",
    "start": "1362799",
    "end": "1367840"
  },
  {
    "text": "by the way b3 rebalancing adds to the right amplification i just",
    "start": "1367840",
    "end": "1372880"
  },
  {
    "text": "they don't mention that but it's just implied because a lot of people know that when you",
    "start": "1372880",
    "end": "1378159"
  },
  {
    "text": "insert insert insert insert to a row and you have a lot of indexes you keep updating those indexes",
    "start": "1378159",
    "end": "1384640"
  },
  {
    "text": "naturally if you if your value touches that index right",
    "start": "1384640",
    "end": "1391200"
  },
  {
    "text": "however as a result of inserting that might the b3 structure",
    "start": "1391200",
    "end": "1398240"
  },
  {
    "text": "might need to rebalance itself and when it needs to rebalance itself",
    "start": "1398240",
    "end": "1404559"
  },
  {
    "text": "it actually doesn't update physical update to the tree and updates or updates not",
    "start": "1404559",
    "end": "1412320"
  },
  {
    "text": "in search right so updates translate to what to actual ssd write amplifications because",
    "start": "1412320",
    "end": "1418799"
  },
  {
    "text": "ssd do not like updates so that's that's another thing that can amplify",
    "start": "1418799",
    "end": "1424159"
  },
  {
    "text": "the rights i'm talking if you go to the millions of rows right obviously",
    "start": "1424159",
    "end": "1431760"
  },
  {
    "text": "right let's move to the next one replica mvcc all right replica mvcc or",
    "start": "1431760",
    "end": "1438880"
  },
  {
    "text": "replica multi-version concurrency control it says posgus does not have true",
    "start": "1438880",
    "end": "1444960"
  },
  {
    "start": "1440000",
    "end": "1890000"
  },
  {
    "text": "replica on vcc well why because",
    "start": "1444960",
    "end": "1451840"
  },
  {
    "text": "th the fact that replicas apply wall updates directly right because if you think",
    "start": "1451840",
    "end": "1458000"
  },
  {
    "text": "about it postgres by default again by deficit by default",
    "start": "1458000",
    "end": "1463840"
  },
  {
    "text": "takes the on disk representation of the wall changes and that's what get transmitted so it's",
    "start": "1463840",
    "end": "1470000"
  },
  {
    "text": "often higher bandwidth but it's if you think about it it's",
    "start": "1470000",
    "end": "1475279"
  },
  {
    "text": "faster right the alternative is just do statement based replication",
    "start": "1475279",
    "end": "1480720"
  },
  {
    "text": "right where when instead of sending the results of the execution of the queries",
    "start": "1480720",
    "end": "1488320"
  },
  {
    "text": "send the queries themselves like hey i just did an insert i just did an",
    "start": "1488320",
    "end": "1494960"
  },
  {
    "text": "update i just didn't so the actual string of the statements the sql statement just send",
    "start": "1494960",
    "end": "1502400"
  },
  {
    "text": "them to the replica this will be way slower right because yeah the bandwidth of",
    "start": "1502400",
    "end": "1509279"
  },
  {
    "text": "change transmitting these wall changes as as form of statement is",
    "start": "1509279",
    "end": "1517120"
  },
  {
    "text": "smaller than the actual physical changes that happen however applying them to the replica now",
    "start": "1517120",
    "end": "1523360"
  },
  {
    "text": "you have to actually inserts are not straightforward inserts might be okay but what if you do an",
    "start": "1523360",
    "end": "1529120"
  },
  {
    "text": "update for example an update could scan could touch the index",
    "start": "1529120",
    "end": "1534799"
  },
  {
    "text": "actually does work so you did double the work technically",
    "start": "1534799",
    "end": "1540559"
  },
  {
    "text": "right because you did the work to execute the statement on the master you now are doing the same",
    "start": "1540559",
    "end": "1545679"
  },
  {
    "text": "work exactly and that that statement is expensive you're going to take the same cost",
    "start": "1545679",
    "end": "1551279"
  },
  {
    "text": "on the server and the the destination so there is a pros of cause for using",
    "start": "1551279",
    "end": "1556880"
  },
  {
    "text": "both but they're complaining here that postgres",
    "start": "1556880",
    "end": "1563440"
  },
  {
    "text": "wall update is just uh doesn't give them mvcc support so let's claim that so let's say if i am if i'm in a replica",
    "start": "1564240",
    "end": "1571840"
  },
  {
    "text": "standby and i'm executing a query and",
    "start": "1571840",
    "end": "1577520"
  },
  {
    "text": "one of my wall changes affects that query that is being",
    "start": "1577520",
    "end": "1582880"
  },
  {
    "text": "executed on the standby so okay i have a master i am i deleted",
    "start": "1582880",
    "end": "1589200"
  },
  {
    "text": "let's say i deleted a table that's just a little bit harsh but let's say deleted few rows right",
    "start": "1589200",
    "end": "1596480"
  },
  {
    "text": "and now on the on the standby i'm actually querying those rows that is",
    "start": "1596480",
    "end": "1603279"
  },
  {
    "text": "being deleted on the master i am on a different replica so now i am pushing the master pushing",
    "start": "1603279",
    "end": "1608880"
  },
  {
    "text": "the wall changes to the to the standby while that query that",
    "start": "1608880",
    "end": "1615120"
  },
  {
    "text": "squaring those deleted rows is being executed what should postgres do you you tell me as the viewer listener",
    "start": "1615120",
    "end": "1622880"
  },
  {
    "text": "what should what do you think should happen here should the postgres immediately cancel",
    "start": "1622880",
    "end": "1629440"
  },
  {
    "text": "the query right and and write the changes",
    "start": "1629440",
    "end": "1635440"
  },
  {
    "text": "or should the should the role changes be paused until the query",
    "start": "1635440",
    "end": "1642000"
  },
  {
    "text": "finishes if you think about there are no other choices right you have to pause it obviously",
    "start": "1642000",
    "end": "1647919"
  },
  {
    "text": "you're not posing all world changes you're only posing changes that affect",
    "start": "1647919",
    "end": "1654000"
  },
  {
    "text": "running transaction and that's another thing to worry about how the heck do i know that the query that being executed",
    "start": "1654000",
    "end": "1660960"
  },
  {
    "text": "actually affects my wall changes building databases is not easy guys look",
    "start": "1660960",
    "end": "1666159"
  },
  {
    "text": "at all this complexity so they're complaining here that you guys don't have mv vcc support",
    "start": "1666159",
    "end": "1672159"
  },
  {
    "text": "because what you're doing is what posgus does effectively is essentially having a",
    "start": "1672159",
    "end": "1679440"
  },
  {
    "text": "timeout says hey we're gonna we're gonna block the wall changes for a given timeout and they give you",
    "start": "1679440",
    "end": "1685600"
  },
  {
    "text": "this timeout configurable if the query didn't finish in this",
    "start": "1685600",
    "end": "1691120"
  },
  {
    "text": "amount of time we're sorry we're gonna cancel those changes",
    "start": "1691120",
    "end": "1696159"
  },
  {
    "text": "we're going to cancel the query that is actually querying it's reading",
    "start": "1696159",
    "end": "1702000"
  },
  {
    "text": "and while we're applying we're going to force applying the changes why because postgres design favor",
    "start": "1702000",
    "end": "1710480"
  },
  {
    "text": "eventual consistency over let's say just reading queries right in",
    "start": "1710480",
    "end": "1716399"
  },
  {
    "text": "this case right so i'd rather be eventually consistent remember eventually this is eventually",
    "start": "1716399",
    "end": "1722159"
  },
  {
    "text": "consistent as well so stop saying that nosql is the only database has eventual consistency every",
    "start": "1722159",
    "end": "1727840"
  },
  {
    "text": "database has it as long as between replicas right relational does it in the same same same",
    "start": "1727840",
    "end": "1733760"
  },
  {
    "text": "instance yeah it's completely consistent but across replicas there is always this idea of eventual",
    "start": "1733760",
    "end": "1739039"
  },
  {
    "text": "consistency so what postgres does is actually kills the transaction and they did not like",
    "start": "1739039",
    "end": "1744240"
  },
  {
    "text": "that so guys let's read this a little bit i i kind of don't don't agree with this statement right",
    "start": "1744240",
    "end": "1751840"
  },
  {
    "text": "the design means that replicas can retain routinely lag seconds behind master obviously and therefore",
    "start": "1751840",
    "end": "1757520"
  },
  {
    "text": "it is easy to write code that results in kill transactions what does that mean this problem might",
    "start": "1757520",
    "end": "1764720"
  },
  {
    "text": "not be apparent to the application developer writing code that obscure where the transactions start on m for instance say developer has some code",
    "start": "1764720",
    "end": "1771120"
  },
  {
    "text": "that has to email or receive to a user depending on how it's written the code may implicitly have",
    "start": "1771120",
    "end": "1776880"
  },
  {
    "text": "a database transaction that helds open until the email finishes to sync",
    "start": "1776880",
    "end": "1782960"
  },
  {
    "text": "that's just a bad idea right you don't have you don't hold",
    "start": "1782960",
    "end": "1788960"
  },
  {
    "text": "you don't hold a transaction open and you do stuff has nothing to do with the transaction itself try to avoid that as",
    "start": "1788960",
    "end": "1795600"
  },
  {
    "text": "much as possible so that's just that's just the best best practice while it's always bad",
    "start": "1795600",
    "end": "1801760"
  },
  {
    "text": "form uh to let your code hold open database transaction while performing unrelated blocking by old",
    "start": "1801760",
    "end": "1807840"
  },
  {
    "text": "okay thank thankfully they make sure that the reality is the most injury or not database expert and may not always understand this problem",
    "start": "1807840",
    "end": "1815520"
  },
  {
    "text": "i have to disagree with this one again guys uh if you if you if you haven't if you have seen if you",
    "start": "1815520",
    "end": "1821760"
  },
  {
    "text": "know me from this channel or the podcast you know that war as an engineer you",
    "start": "1821760",
    "end": "1826880"
  },
  {
    "text": "have to take your pride of your work and the thing that you interface with i",
    "start": "1826880",
    "end": "1832159"
  },
  {
    "text": "believe that you have to understand what you're communicating with so yeah engineers are not database",
    "start": "1832159",
    "end": "1838399"
  },
  {
    "text": "expert but this does not qualify as a database expert this is just basic",
    "start": "1838399",
    "end": "1844080"
  },
  {
    "text": "transaction management in my opinion right and and i believe engineers have to understand this right and",
    "start": "1844080",
    "end": "1851279"
  },
  {
    "text": "engineers have to unders if you you you might be not as radical as",
    "start": "1851279",
    "end": "1856320"
  },
  {
    "text": "as me i don't like to work with anything that i don't understand if it's black box i don't like to work",
    "start": "1856320",
    "end": "1861760"
  },
  {
    "text": "with it i before i pick a tool i have to understand fully how it actually works",
    "start": "1861760",
    "end": "1867440"
  },
  {
    "text": "fully fully from zero to a hundred percent if i'm if i'm working on it if i'm",
    "start": "1867440",
    "end": "1874159"
  },
  {
    "text": "connecting with it if i'm interested with it it's okay if i understand 80 70 of the tool right but again i'm not",
    "start": "1874159",
    "end": "1881039"
  },
  {
    "text": "going to understand every single thing in that case right but that's just me you might have a different opinion postcards upgrades so",
    "start": "1881039",
    "end": "1887600"
  },
  {
    "text": "and i kind of agree with them on this one i i try to upgrade poscas many times and always",
    "start": "1887600",
    "end": "1893360"
  },
  {
    "start": "1890000",
    "end": "1980000"
  },
  {
    "text": "didn't find the right tutorial or it was so complicated that i gave up right and they kind of re-iterated",
    "start": "1893360",
    "end": "1900640"
  },
  {
    "text": "the same problem so but i had to agree with them 100 percent on this pulse chris uppercase is really painful",
    "start": "1900640",
    "end": "1907679"
  },
  {
    "text": "really painful i've i've been there i've been there from nine three to nine four nine four to",
    "start": "1907679",
    "end": "1913519"
  },
  {
    "text": "nine five i then just gives up i i just rather recreate my databases from scratch after",
    "start": "1913519",
    "end": "1920320"
  },
  {
    "text": "that obviously i'm running a test database here but but yeah i didn't run a production",
    "start": "1920320",
    "end": "1927760"
  },
  {
    "text": "database that i had to upgrade it but what i'm gonna do in this case is just obviously there is a way but",
    "start": "1927760",
    "end": "1935919"
  },
  {
    "text": "apparently this way sometimes works sometimes it doesn't so there's a there is there is also the pg logical",
    "start": "1935919",
    "end": "1943039"
  },
  {
    "text": "way of writing i think there's there are some tools that allow you to do upgrades right and um guys if you if you know any",
    "start": "1943039",
    "end": "1950480"
  },
  {
    "text": "of that stuff if you have ever upgraded postgres database smoothly let me know in the comment",
    "start": "1950480",
    "end": "1956320"
  },
  {
    "text": "section below i'd love to know how to do it i i tried twice i believe",
    "start": "1956320",
    "end": "1961679"
  },
  {
    "text": "and i gave up and says you know what this is not straightforward and i didn't have i wasn't forced to do",
    "start": "1961679",
    "end": "1967840"
  },
  {
    "text": "it so i took the easy route of recreating my days okay the architecture of my sequel",
    "start": "1967840",
    "end": "1974840"
  },
  {
    "text": "and new db android we talked about it if you guys check out the video right here",
    "start": "1974840",
    "end": "1980480"
  },
  {
    "start": "1980000",
    "end": "2220000"
  },
  {
    "text": "if you don't want to learn more about it but any db what they so they go now through their own disk",
    "start": "1980480",
    "end": "1985519"
  },
  {
    "text": "representation compared to a postgres so anodi or just my sequel in general",
    "start": "1985519",
    "end": "1991840"
  },
  {
    "text": "mysql or any db in general that's the right voice saying yeah they have the primary key and the prior",
    "start": "1991840",
    "end": "1998320"
  },
  {
    "text": "key has a pointer to the row directly to the physical database on the scroll all the indexes",
    "start": "1998320",
    "end": "2006159"
  },
  {
    "text": "that you create points back to the primary key and that's the powerful thing here for them",
    "start": "2006159",
    "end": "2013279"
  },
  {
    "text": "because now if i update anything on on the on the row only the primary key needs to",
    "start": "2013279",
    "end": "2019840"
  },
  {
    "text": "be updated to know the new kind of raw id and even that right it's it's a little bit different but i",
    "start": "2019840",
    "end": "2027120"
  },
  {
    "text": "don't have to try to to touch my secondary indexes right that",
    "start": "2027120",
    "end": "2032159"
  },
  {
    "text": "being said guys they didn't that's not always true if",
    "start": "2032159",
    "end": "2037200"
  },
  {
    "text": "you're updating a field that has no index then",
    "start": "2037200",
    "end": "2043519"
  },
  {
    "text": "right you're gonna not touch only the primary key but if you updated a field that has an index",
    "start": "2043760",
    "end": "2050079"
  },
  {
    "text": "you gotta touch both so they didn't mention that but yeah right because this very defensive",
    "start": "2050079",
    "end": "2057118"
  },
  {
    "text": "arc article right mysql is perfect yeah if you update the actual field that",
    "start": "2057119",
    "end": "2063200"
  },
  {
    "text": "has a secondary index you have to update the secondary index you just updated the value so you have to go to",
    "start": "2063200",
    "end": "2068560"
  },
  {
    "text": "your index and and change the tree so that includes this value right so yeah you touch a lot of fields",
    "start": "2068560",
    "end": "2075280"
  },
  {
    "text": "right and if you touch a lot of fields yeah then you have to update all the indexes right",
    "start": "2075280",
    "end": "2080480"
  },
  {
    "text": "it's just by design it's less if you have a lot of indexes you have less changes in general right so as a",
    "start": "2080480",
    "end": "2087520"
  },
  {
    "text": "result this translates to obviously less uh less wall changes because they don't have as",
    "start": "2087520",
    "end": "2094000"
  },
  {
    "text": "much changes logical to physical translation and now they talk about the",
    "start": "2094000",
    "end": "2100000"
  },
  {
    "text": "uh rollback mechanism here that might be called they have this concept of rollback segments",
    "start": "2100000",
    "end": "2105040"
  },
  {
    "text": "so instead of inserting a row in the heap itself uh",
    "start": "2105040",
    "end": "2113040"
  },
  {
    "text": "when you update a data row in a postgres you insert a row in the heap itself in",
    "start": "2113040",
    "end": "2118320"
  },
  {
    "text": "the table itself right mysql and odb does it differently it's just",
    "start": "2118320",
    "end": "2123440"
  },
  {
    "text": "they they copy the row into some other place called the undo the rollback segments the undo logs",
    "start": "2123440",
    "end": "2130160"
  },
  {
    "text": "right and they keep it all there and then based on that they point to that location in the rollback",
    "start": "2130160",
    "end": "2136560"
  },
  {
    "text": "segments all right so so there it's a little bit different architecture so if you query now if you want the",
    "start": "2136560",
    "end": "2143119"
  },
  {
    "text": "latest the latest is always there so that's the beautiful thing but based on your transaction id if you are",
    "start": "2143119",
    "end": "2149040"
  },
  {
    "text": "coming from the past you're covering in the past you want all the results you have to do the jump to go back",
    "start": "2149040",
    "end": "2156400"
  },
  {
    "text": "to to get that all done this jump doesn't exist in postcards so queries that that are concurrent are",
    "start": "2156400",
    "end": "2163280"
  },
  {
    "text": "faster on postgres they are technically slower and in in my sequel because",
    "start": "2163280",
    "end": "2168560"
  },
  {
    "text": "now you have to jump back and go through different places to do to do the query right and",
    "start": "2168560",
    "end": "2175280"
  },
  {
    "text": "uh and vice versa so that they explain that hey secondary indexes point to the primary index and the",
    "start": "2175280",
    "end": "2181839"
  },
  {
    "text": "primary next point to the disk this is for people listening on the podcast were listening",
    "start": "2181839",
    "end": "2188160"
  },
  {
    "text": "we're looking at a picture of secondary index pointing to the primary index and then primary index is pointing to",
    "start": "2188880",
    "end": "2195280"
  },
  {
    "text": "the disk that's just an extra layer and then they claim that they say here",
    "start": "2195280",
    "end": "2200720"
  },
  {
    "text": "that the replication faction of mysql supports multiple replication mode statement based and",
    "start": "2200720",
    "end": "2208480"
  },
  {
    "text": "wall changes and the moment you if you implement uh if you implement any of this mod if",
    "start": "2208480",
    "end": "2214960"
  },
  {
    "text": "you implement statement based replication you have true mvc support because now",
    "start": "2214960",
    "end": "2220880"
  },
  {
    "start": "2220000",
    "end": "2400000"
  },
  {
    "text": "the statement that the wall changes that coming that is coming to you from the master to the",
    "start": "2220880",
    "end": "2228079"
  },
  {
    "text": "standby is just another right to consider it another transaction",
    "start": "2228079",
    "end": "2233520"
  },
  {
    "text": "trying to be executed so it will have truly true mvcc support in that case it will",
    "start": "2233520",
    "end": "2240720"
  },
  {
    "text": "not be blocking right because you can technically query and write at the same time",
    "start": "2240720",
    "end": "2246240"
  },
  {
    "text": "and now as a result you can implement the same exact thing that you're doing right because you have logical view of",
    "start": "2246240",
    "end": "2253280"
  },
  {
    "text": "what is changing as a result the database is aware of the change it can implement in vcc at the higher",
    "start": "2253280",
    "end": "2259520"
  },
  {
    "text": "level right even through replication",
    "start": "2259520",
    "end": "2264720"
  },
  {
    "text": "postgres does support that there is a third party that you can install and does exactly that you can't do that it's just they they",
    "start": "2264960",
    "end": "2271280"
  },
  {
    "text": "just didn't mention that again guys this is an old article so things can change obviously right",
    "start": "2271280",
    "end": "2278400"
  },
  {
    "text": "in my sequel uh and they they say that oh by the way",
    "start": "2278400",
    "end": "2284079"
  },
  {
    "text": "even the wall the wall says the wall sizes are so small because we're changing uh we're",
    "start": "2284079",
    "end": "2289359"
  },
  {
    "text": "changing very few things here they go through all of that stuff again i'm not gonna go through that but that's",
    "start": "2289359",
    "end": "2295920"
  },
  {
    "text": "essentially their advantages they go through another advantage here of my sequel saying that",
    "start": "2295920",
    "end": "2302000"
  },
  {
    "text": "buffer pool the bar for pool is the caching mechanism in postgres compared to uh buffer pool",
    "start": "2302000",
    "end": "2310240"
  },
  {
    "text": "is the caching mechanism in in my sequel compared to the caching",
    "start": "2310240",
    "end": "2315599"
  },
  {
    "text": "mechanism in postgres which is which is basically the rss memory right",
    "start": "2315599",
    "end": "2320720"
  },
  {
    "text": "and uh they're explaining the difference here they they they claim that postgre is using it uses a different",
    "start": "2320720",
    "end": "2327040"
  },
  {
    "text": "uh operator operating system calls like they're using two calls instead of one",
    "start": "2327040",
    "end": "2332720"
  },
  {
    "text": "i don't know much about that to be honest i'm not an expert in operating systems but a lot of people say that yeah you",
    "start": "2332720",
    "end": "2337920"
  },
  {
    "text": "have to use a one call to seek and read at the same time instead of seeking and reading",
    "start": "2337920",
    "end": "2343599"
  },
  {
    "text": "i don't know maybe postgres actually changes a lot of people here listening and watching this channel some",
    "start": "2343599",
    "end": "2348640"
  },
  {
    "text": "some people actually are experts in this thing and might correct that part but i'm not aware of that as a result so i",
    "start": "2348640",
    "end": "2356240"
  },
  {
    "text": "can't comment more much on that part there's then the nrdb storage engine",
    "start": "2356240",
    "end": "2362160"
  },
  {
    "text": "implements the least recently used buffer pool and which you can",
    "start": "2362160",
    "end": "2367280"
  },
  {
    "text": "apparently control i'm surprised that you cannot control them cash size and postgres i need to read",
    "start": "2367280",
    "end": "2372400"
  },
  {
    "text": "more about that a little bit but that's another thing they they say though this is another advantage of my",
    "start": "2372400",
    "end": "2377520"
  },
  {
    "text": "sequel then another thing says connection handling and post in my sequel there's a thread pair",
    "start": "2377520",
    "end": "2384240"
  },
  {
    "text": "connection each tcp connection to you open to mysql is a thread on the server side however",
    "start": "2384240",
    "end": "2390800"
  },
  {
    "text": "postcards it's a actual process so technically now they they claim obviously enough a",
    "start": "2390800",
    "end": "2398160"
  },
  {
    "text": "thread is cheaper to spit off than a process i read i read that this is no longer",
    "start": "2398160",
    "end": "2405040"
  },
  {
    "start": "2400000",
    "end": "2834000"
  },
  {
    "text": "true because the process another is almost identical now but could be back in the days it could",
    "start": "2405040",
    "end": "2411119"
  },
  {
    "text": "be that oh that was true but now if you think about it to scale 10",
    "start": "2411119",
    "end": "2416319"
  },
  {
    "text": "000 connections right now if you think about it opening opening a lot of tcp connections",
    "start": "2416319",
    "end": "2423040"
  },
  {
    "text": "is just a bad idea so that's that's why we have a the idea of connection pooling right",
    "start": "2423040",
    "end": "2428480"
  },
  {
    "text": "we build our application so they use a pool reserve a pool reverse reserve a",
    "start": "2428480",
    "end": "2435520"
  },
  {
    "text": "connection from the pool execute that transaction and then return it to the pool right and if you have",
    "start": "2435520",
    "end": "2440800"
  },
  {
    "text": "you're doing a single atomic trans uh statement that executed",
    "start": "2440800",
    "end": "2446160"
  },
  {
    "text": "you can just execute on the pool directly say hey pick any pool any instance in the pool execute and",
    "start": "2446160",
    "end": "2452000"
  },
  {
    "text": "then return return it immediately this reserve and release is also",
    "start": "2452000",
    "end": "2457920"
  },
  {
    "text": "back to their queries if they have a quiz that spans three four five seven minutes and",
    "start": "2457920",
    "end": "2465599"
  },
  {
    "text": "again nothing wrong with a query that that transaction has stands long",
    "start": "2465599",
    "end": "2470880"
  },
  {
    "text": "if you're actually doing all database works some some some transactions i've seen",
    "start": "2470880",
    "end": "2476480"
  },
  {
    "text": "transaction that takes 30 minutes just because it does a lot of work",
    "start": "2476480",
    "end": "2482880"
  },
  {
    "text": "it changes a lot of state and these changes has to be atomic right yeah you can argue that you can",
    "start": "2482880",
    "end": "2488400"
  },
  {
    "text": "break it even that you can you have to break this transaction into smaller and smaller smaller small",
    "start": "2488400",
    "end": "2494160"
  },
  {
    "text": "small pieces so that each piece can be executed in its own atomic manner",
    "start": "2494160",
    "end": "2501280"
  },
  {
    "text": "right so you can minimize the transaction side so this this also results in if you have a long",
    "start": "2501280",
    "end": "2507200"
  },
  {
    "text": "running transactions then you have to really think about how do the reservation and connection",
    "start": "2507200",
    "end": "2512480"
  },
  {
    "text": "pooling works right so the number of connection right think about it so that if if no if a",
    "start": "2512480",
    "end": "2519119"
  },
  {
    "text": "client's not it's not using a connection then don't let them open a connection and just have it open",
    "start": "2519119",
    "end": "2525680"
  },
  {
    "text": "use connection polling and they say they they use a i believe pg bouncer is that what they're using",
    "start": "2525680",
    "end": "2531040"
  },
  {
    "text": "some some service that actually does that that connection polling but a lot of",
    "start": "2531040",
    "end": "2536400"
  },
  {
    "text": "applications do it even if you don't you can build your own layer on top and i showed the connection pooling on",
    "start": "2536400",
    "end": "2542000"
  },
  {
    "text": "postgres many times in this channel right that's the idea guys and hopefully",
    "start": "2542000",
    "end": "2547440"
  },
  {
    "text": "hopefully in the future and this we're well at the end of the article obviously guys right",
    "start": "2547440",
    "end": "2554480"
  },
  {
    "text": "we're the end of the article but hopefully when it comes to connection polling i really hope that",
    "start": "2554480",
    "end": "2561280"
  },
  {
    "text": "quick as a protocol and mask i believe that they're just working on a new",
    "start": "2561280",
    "end": "2566800"
  },
  {
    "text": "protocol right now it's called mask that will allows you to kind of stream",
    "start": "2566800",
    "end": "2573440"
  },
  {
    "text": "multiple to open multiple streams on a given tcp connection or udp",
    "start": "2573440",
    "end": "2578960"
  },
  {
    "text": "connection in case of quick that represents your your con",
    "start": "2578960",
    "end": "2585280"
  },
  {
    "text": "your database connection so that if if my sequel or post is supported quick",
    "start": "2585280",
    "end": "2590720"
  },
  {
    "text": "and i don't see a reason why not then the client can open a single and",
    "start": "2590720",
    "end": "2596319"
  },
  {
    "text": "remember the client is always a bob server or something like that right so open a single connection",
    "start": "2596319",
    "end": "2602240"
  },
  {
    "text": "and have up to 200 even more than that streams concurrently in a single tcp connection",
    "start": "2602240",
    "end": "2608800"
  },
  {
    "text": "the only trick here is the database has to understand the idea of streams so that's a lot of work but i believe it's",
    "start": "2608800",
    "end": "2614400"
  },
  {
    "text": "going to be really lucrative for a database to",
    "start": "2614400",
    "end": "2619520"
  },
  {
    "text": "implement a protocol like that just like i don't really need tcp anymore right",
    "start": "2619520",
    "end": "2625599"
  },
  {
    "text": "a single tcp it's just a wasteful thing to have a single tcp connection for a",
    "start": "2625599",
    "end": "2632000"
  },
  {
    "text": "given client right or connection pooling this has to go away and we have to move to a model where we multiplex queries in a",
    "start": "2632000",
    "end": "2640640"
  },
  {
    "text": "single tcp connection using this protocol right whether it's whether you're using",
    "start": "2640640",
    "end": "2645680"
  },
  {
    "text": "even if they implemented their own they don't have use quick you just implement in your own protocol that supports multiplexing",
    "start": "2645680",
    "end": "2651920"
  },
  {
    "text": "through multiplexing so that every request every session every channel has its own logical",
    "start": "2651920",
    "end": "2658720"
  },
  {
    "text": "representation in that tcp connection that you open so this so you don't have to open many you can actually just have to open one",
    "start": "2658720",
    "end": "2665359"
  },
  {
    "text": "or a few of them and each one of them has basically some limit",
    "start": "2665359",
    "end": "2670800"
  },
  {
    "text": "obviously that doesn't come with for free because now you just increase the cpu size at",
    "start": "2670800",
    "end": "2676800"
  },
  {
    "text": "the back end and the front end because now you have to assemble these channels and streams",
    "start": "2676800",
    "end": "2682800"
  },
  {
    "text": "that's the problem with hdb2 and quicker people start lucas perdue and and",
    "start": "2682800",
    "end": "2687839"
  },
  {
    "text": "and what's his name chris wood and people working on the quick protocol they're trying to solve this problem with the",
    "start": "2687839",
    "end": "2694000"
  },
  {
    "text": "cpu usage right because cpu usage now you have you're just not working with just stream",
    "start": "2694000",
    "end": "2700560"
  },
  {
    "text": "of content coming from the tcp socket no you have to actually look at the data and then arrange the packets so they are",
    "start": "2700560",
    "end": "2707280"
  },
  {
    "text": "in logical streams or channels and then then deliver to the app so",
    "start": "2707280",
    "end": "2712560"
  },
  {
    "text": "the operating system or the application wherever this thing lives doing extra",
    "start": "2712560",
    "end": "2719040"
  },
  {
    "text": "work so again i'm sorry about that segway but i want to discuss that a little bit i",
    "start": "2719040",
    "end": "2725280"
  },
  {
    "text": "think that's just an idea that is just great conclusion obviously they say hey",
    "start": "2725280",
    "end": "2730800"
  },
  {
    "text": "postgres serve does well in their ladies of uber but we ran into significant problems",
    "start": "2730800",
    "end": "2736720"
  },
  {
    "text": "scaling postgres with our growth today we have some legacy postgres instances",
    "start": "2736720",
    "end": "2742160"
  },
  {
    "text": "but the bulk of our databases are either on top of my sequel typically using our schema list layer",
    "start": "2742160",
    "end": "2747359"
  },
  {
    "text": "that's another point you have now schema less",
    "start": "2747359",
    "end": "2753520"
  },
  {
    "text": "you have schema less and using my sequel",
    "start": "2754560",
    "end": "2759680"
  },
  {
    "text": "maybe there is something i'm missing here but it does not seem natural to me",
    "start": "2759680",
    "end": "2766960"
  },
  {
    "text": "a lot of people use this uh postgres as a schema-less layer where they put a hunk of jason in",
    "start": "2767280",
    "end": "2772640"
  },
  {
    "text": "a single field as jason b and they they they work with that but",
    "start": "2772640",
    "end": "2778640"
  },
  {
    "text": "maybe that that's just the way for uber because if they have a lot of fields and they have a lot of indexes on those",
    "start": "2778640",
    "end": "2784480"
  },
  {
    "text": "fields maybe that's the way to go who knows right again",
    "start": "2784480",
    "end": "2790400"
  },
  {
    "text": "guys what do you think what do you think about all that stuff let me know in the comment section below i'm gonna see you in the next one hope",
    "start": "2790400",
    "end": "2796240"
  },
  {
    "text": "you enjoyed this video give it a like if you do and share it with your friends i'm going",
    "start": "2796240",
    "end": "2801280"
  },
  {
    "text": "to see you in the next one thank you ivan kiltez",
    "start": "2801280",
    "end": "2806400"
  },
  {
    "text": "kilt kill to ziki a staff engineer in uber engineering this is a great article",
    "start": "2806400",
    "end": "2811760"
  },
  {
    "text": "again yeah and things that things has been changing a lot and the",
    "start": "2811760",
    "end": "2818880"
  },
  {
    "text": "the uber ward but this is again this is a this is a historical article that goes",
    "start": "2818880",
    "end": "2824880"
  },
  {
    "text": "in the years and years and we had to discuss it so thank you so",
    "start": "2824880",
    "end": "2830319"
  },
  {
    "text": "much appreciate you i'm going to see on the next one you guys stay awesome",
    "start": "2830319",
    "end": "2835599"
  }
]