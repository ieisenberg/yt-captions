[
  {
    "start": "0",
    "end": "255000"
  },
  {
    "text": "i'd like to spend few moments to discuss the concept of synchronicity versus",
    "start": "480",
    "end": "6319"
  },
  {
    "text": "asynchronicity in database systems in message queues",
    "start": "6319",
    "end": "11840"
  },
  {
    "text": "such as rabbikum kafka and in programming i believe this is where",
    "start": "11840",
    "end": "16880"
  },
  {
    "text": "it was most popularized let's jump into it welcome to the backend engineering show with your host",
    "start": "16880",
    "end": "23840"
  },
  {
    "text": "hussein nasser and the definition of synchronous versus asynchronous is",
    "start": "23840",
    "end": "32160"
  },
  {
    "text": "when you read it it doesn't make any sense so the best way to understand the synchronicity and asynchronicity is is",
    "start": "32160",
    "end": "39840"
  },
  {
    "text": "really just put it in practice if you have an operation that you called right",
    "start": "39840",
    "end": "46640"
  },
  {
    "text": "you made a method call if that operation blocks you for the",
    "start": "46640",
    "end": "53360"
  },
  {
    "text": "duration of the execution and it does everything in its own unit",
    "start": "53360",
    "end": "61039"
  },
  {
    "text": "while you're blocked then that's synchronous and during the",
    "start": "61039",
    "end": "67040"
  },
  {
    "text": "period from which this operation is doing its work you are effectively blocked you",
    "start": "67040",
    "end": "72080"
  },
  {
    "text": "cannot resume and do anything you're just waiting for the result of",
    "start": "72080",
    "end": "77520"
  },
  {
    "text": "the operation and the moment this operation fully completes an emphasis on fully",
    "start": "77520",
    "end": "82799"
  },
  {
    "text": "complete here right and then returns the result to you right",
    "start": "82799",
    "end": "88320"
  },
  {
    "text": "you are unblocked and you can continuing execution so what's the problem with that with synchronous operations uh main",
    "start": "88320",
    "end": "95200"
  },
  {
    "text": "problem is uh while i am blocked i can really do other things",
    "start": "95200",
    "end": "101840"
  },
  {
    "text": "technically right so i can call this method and while it's doing its thing i can really",
    "start": "101840",
    "end": "107840"
  },
  {
    "text": "do other stuff right because i'm not really as a client i'm not really doing anything right so this is where",
    "start": "107840",
    "end": "114880"
  },
  {
    "text": "asynchronous behavior comes into the picture it says okay right",
    "start": "114880",
    "end": "120320"
  },
  {
    "text": "here's what we can do i'm gonna call this function right and",
    "start": "120320",
    "end": "125360"
  },
  {
    "text": "we're gonna immediately get you back a result not really it's not really the final",
    "start": "125360",
    "end": "130560"
  },
  {
    "text": "result it's a promise for a result it's a future result that's what it's called in c plus plus i",
    "start": "130560",
    "end": "136640"
  },
  {
    "text": "believe right it's something that hey we we're gonna get we're gonna get you that as well but i i have scheduled successfully the",
    "start": "136640",
    "end": "144319"
  },
  {
    "text": "function call or this operation call and and this operation can do literally anything it can it can use a single",
    "start": "144319",
    "end": "151760"
  },
  {
    "text": "threaded model like node.js or really the the javascript model",
    "start": "151760",
    "end": "157760"
  },
  {
    "text": "where it just will will look for period of idle anything where the",
    "start": "157760",
    "end": "163519"
  },
  {
    "text": "function is idle and we'll just hey i'm going to execute that stuff during that time or it can execute the workload on",
    "start": "163519",
    "end": "170640"
  },
  {
    "text": "another thread or another process or guess what and another machine all together doesn't matter",
    "start": "170640",
    "end": "177200"
  },
  {
    "text": "while this operation is being executed on",
    "start": "177200",
    "end": "182720"
  },
  {
    "text": "any other room i can do my own stuff right and i can do my own job and when that",
    "start": "182720",
    "end": "189680"
  },
  {
    "text": "operation completes it can call me back with a result right so when i get called",
    "start": "189680",
    "end": "197360"
  },
  {
    "text": "back with this result that's the initial model uh yeah okay i can do this stuff right so now when i get back the call",
    "start": "197360",
    "end": "204159"
  },
  {
    "text": "back with the results uh i would have gotten another result but during that time i wasn't really blocked i could",
    "start": "204159",
    "end": "209680"
  },
  {
    "text": "have done anything else very popular methods this is basically what's referred to as asynchronous operations",
    "start": "209680",
    "end": "216799"
  },
  {
    "text": "asynchronous operation synchronous operation so we want to take it to the next level it's very critical to understand the",
    "start": "216799",
    "end": "222640"
  },
  {
    "text": "difference between the two because they show up everywhere",
    "start": "222640",
    "end": "227840"
  },
  {
    "text": "right specifically specifically in the back end they show up everywhere right they show up in databases they show up",
    "start": "227840",
    "end": "233439"
  },
  {
    "text": "in message queueing they show up in programming or daily day-to-day programming the operations that you do",
    "start": "233439",
    "end": "240000"
  },
  {
    "text": "so let's take some examples of that now that we have defined what synchronous versus asynchronous mean and by the way",
    "start": "240000",
    "end": "245599"
  },
  {
    "text": "if you want to dive into details i made a video on synchronous versus asynchronous uh with examples uh check it out if you",
    "start": "245599",
    "end": "252840"
  },
  {
    "text": "want more definition than that so the first example is in programming for the longest time",
    "start": "252840",
    "end": "259280"
  },
  {
    "start": "255000",
    "end": "470000"
  },
  {
    "text": "most operations when i used to program in the early 2000s were synchronous there was no",
    "start": "259280",
    "end": "266320"
  },
  {
    "text": "concept of asynchronous as far as i know like you call a function you are blocked you cannot do anything",
    "start": "266320",
    "end": "272720"
  },
  {
    "text": "for for even in those early days when i used to build b v b6 app and rarely vb.net apps and",
    "start": "272720",
    "end": "279919"
  },
  {
    "text": "c-sharp apps even the ui wasn't refreshing if you called asynchronous",
    "start": "279919",
    "end": "286960"
  },
  {
    "text": "synchronous methods my man this is a pain how do you say synchronous methods without adding an a",
    "start": "286960",
    "end": "293280"
  },
  {
    "text": "right so i'm just going to say synchronous method if you call any synchronous method you're",
    "start": "293280",
    "end": "299600"
  },
  {
    "text": "technically blocked so so even the ui didn't have a way to",
    "start": "299600",
    "end": "305840"
  },
  {
    "text": "refresh and then later we had this thing that's called do events in vb6 i don't know if any one of",
    "start": "305840",
    "end": "313120"
  },
  {
    "text": "you guys remember the stuff do events you do that so that hey while this is actually executing you can still do some",
    "start": "313120",
    "end": "320080"
  },
  {
    "text": "other work in the back inside some some hacks and walk clowns and then this was enhanced by adding the",
    "start": "320080",
    "end": "326320"
  },
  {
    "text": "concept of async await right and then up i think it's in pretty much every",
    "start": "326320",
    "end": "331919"
  },
  {
    "text": "programming language has these kinds of async awaits within in c sharp and",
    "start": "331919",
    "end": "337199"
  },
  {
    "text": "javascript obviously it's there with promises right you call a function and then",
    "start": "337199",
    "end": "343600"
  },
  {
    "text": "you you don't you're not really blocked and waiting for this function to finish no you can do other stuff as well right",
    "start": "343600",
    "end": "351039"
  },
  {
    "text": "you're not just sitting there idle and that's that's the main problem",
    "start": "351039",
    "end": "356240"
  },
  {
    "text": "so you might say isn't asynchronous thing is the best right well we're gonna come to that right",
    "start": "356240",
    "end": "363440"
  },
  {
    "text": "so while synchronous the javascript eventually initially tried to solve it",
    "start": "363440",
    "end": "368639"
  },
  {
    "text": "with callbacks that was a terrible model we all have seen those functions that",
    "start": "368639",
    "end": "374639"
  },
  {
    "text": "has a callback and then you in the callback you call another function that has a callback or another function has a",
    "start": "374639",
    "end": "380880"
  },
  {
    "text": "callback so yeah not readable at all so promises kind of",
    "start": "380880",
    "end": "387440"
  },
  {
    "text": "simplified that of and async 08 kind of put a nail on the cuff and says yeah this is the best thing ever now your",
    "start": "387440",
    "end": "394800"
  },
  {
    "text": "code looks synchronous like as if you're blocked right but you're not really blocked the the",
    "start": "394800",
    "end": "401440"
  },
  {
    "text": "main thread is doing is squeezing any idle time you might have right but",
    "start": "401440",
    "end": "409599"
  },
  {
    "text": "giving you the behavior of synchronicity right but the whole thing is almost",
    "start": "409599",
    "end": "414880"
  },
  {
    "text": "asynchronous you call a method if you're calling a network right rest api now",
    "start": "414880",
    "end": "420960"
  },
  {
    "text": "i i don't have to sit here and wait for anything well technically you are",
    "start": "420960",
    "end": "426160"
  },
  {
    "text": "waiting but while you're waiting your thread of execution can do other",
    "start": "426160",
    "end": "433280"
  },
  {
    "text": "stuff that you might have like it can respond to events that you click on a button it can",
    "start": "433280",
    "end": "440720"
  },
  {
    "text": "respond to animation that you might have in the browser and that that that kind of applies to",
    "start": "440720",
    "end": "446639"
  },
  {
    "text": "literally anything like if you ever can respond to a timer that triggers every second it can do stuff imagine this was",
    "start": "446639",
    "end": "453759"
  },
  {
    "text": "not possible 20 years ago yikes right so",
    "start": "453759",
    "end": "459360"
  },
  {
    "text": "it was possible but with hacks but yeah so asynchronous synchronicity very simple thing and then that was in",
    "start": "459360",
    "end": "466160"
  },
  {
    "text": "programming we brought it in in message queues uh especially now we will move to",
    "start": "466160",
    "end": "471919"
  },
  {
    "start": "470000",
    "end": "1020000"
  },
  {
    "text": "back-end programming right if i have a service on the back end that does",
    "start": "471919",
    "end": "479199"
  },
  {
    "text": "a certain amount of work right i don't know i did it it does",
    "start": "479199",
    "end": "484800"
  },
  {
    "text": "some execution and maybe queries a database and get some results and morph",
    "start": "484800",
    "end": "491199"
  },
  {
    "text": "this result to something else it has some sort of an x amount of execution time right",
    "start": "491199",
    "end": "497919"
  },
  {
    "text": "and that is depends how you define long but it's long effectively right",
    "start": "497919",
    "end": "504160"
  },
  {
    "text": "so so engineers said sure",
    "start": "504160",
    "end": "509440"
  },
  {
    "text": "i can call this rest call right this network call i can call it",
    "start": "509440",
    "end": "516399"
  },
  {
    "text": "asynchronously from the client or pay attention to that so i am asynchronous",
    "start": "516399",
    "end": "521919"
  },
  {
    "text": "here at the client side yeah i made the call the backend is executing",
    "start": "521919",
    "end": "528880"
  },
  {
    "text": "that call synchronously technically so from the",
    "start": "528880",
    "end": "534959"
  },
  {
    "text": "from if you if you put like a lens where are you looking here if you're looking",
    "start": "534959",
    "end": "540480"
  },
  {
    "text": "at the back end you're synchronous you're executing things synchronously because you're blocked technically right",
    "start": "540480",
    "end": "547839"
  },
  {
    "text": "whoever called this is blocked but from the client perspective you called it asynchronously",
    "start": "547839",
    "end": "555920"
  },
  {
    "text": "right so you did not receive the results yet you you called it and",
    "start": "555920",
    "end": "561279"
  },
  {
    "text": "then you moved along and doing the other thing so the",
    "start": "561279",
    "end": "566680"
  },
  {
    "text": "asynchronicity at the client side is different from the back",
    "start": "566680",
    "end": "572800"
  },
  {
    "text": "so now that wasn't scalable",
    "start": "572800",
    "end": "578000"
  },
  {
    "text": "for uh because what happened if that operation failed like okay",
    "start": "578000",
    "end": "583440"
  },
  {
    "text": "you can retry so saying i'm gonna i'm just gonna retry but that wasn't scalable",
    "start": "583440",
    "end": "589760"
  },
  {
    "text": "so people introduced this asynchronous execution at the back end level",
    "start": "589760",
    "end": "596640"
  },
  {
    "text": "in a form of queues right a very basic beautiful",
    "start": "596640",
    "end": "602480"
  },
  {
    "text": "data structure it says okay here's here's what we're going to do you can call this method that is long running",
    "start": "602480",
    "end": "607920"
  },
  {
    "text": "operation but we're not going to actually call it",
    "start": "607920",
    "end": "613680"
  },
  {
    "text": "we're just going to add it to a queue and the fact by us",
    "start": "613680",
    "end": "620800"
  },
  {
    "text": "and the back end adding you request to a queue that in itself",
    "start": "620800",
    "end": "628480"
  },
  {
    "text": "is a synchronous operation that it takes milliseconds to execute hey adding to iq",
    "start": "628480",
    "end": "634880"
  },
  {
    "text": "and then i can return the operation being a success to the client who called",
    "start": "634880",
    "end": "643279"
  },
  {
    "text": "it so so now it was an immediate almost immediate",
    "start": "643279",
    "end": "652079"
  },
  {
    "text": "execution did we get the result no we did not but to the client we technically",
    "start": "652079",
    "end": "660240"
  },
  {
    "text": "got a result and we now you can argue oh this is not the",
    "start": "660240",
    "end": "666240"
  },
  {
    "text": "actual result well we got a job id we got a q id we got",
    "start": "666240",
    "end": "672959"
  },
  {
    "text": "something in the client side right and now the client is responsible to",
    "start": "672959",
    "end": "681519"
  },
  {
    "text": "pull the result so now",
    "start": "681519",
    "end": "687040"
  },
  {
    "text": "you can pull okay send another request am i done yet and the fact",
    "start": "687040",
    "end": "693680"
  },
  {
    "text": "just the nature of this polling is also synchronous",
    "start": "693680",
    "end": "699760"
  },
  {
    "text": "right because hey calling this and get the result back right hey it's not there calling is not",
    "start": "699760",
    "end": "707200"
  },
  {
    "text": "there calling is not there so the whole thing is still synchronous but",
    "start": "707200",
    "end": "712320"
  },
  {
    "text": "the whole backing operation if you look at it as a whole that is an",
    "start": "712320",
    "end": "718240"
  },
  {
    "text": "a synchronous execution with the help of this cues right",
    "start": "718240",
    "end": "724160"
  },
  {
    "text": "so the the entry that we added is effectively a message that's how message queues is able to scale right because i",
    "start": "724160",
    "end": "730639"
  },
  {
    "text": "don't i don't want i don't want to put the burden",
    "start": "730639",
    "end": "736079"
  },
  {
    "text": "right on execution failure on the client so hey if this failed i'm gonna don't",
    "start": "736079",
    "end": "741200"
  },
  {
    "text": "worry i'm gonna retry it later on the back end so we just",
    "start": "741200",
    "end": "747200"
  },
  {
    "text": "we just performed asynchronous execution of a job",
    "start": "747200",
    "end": "752480"
  },
  {
    "text": "on the back end so this is what is called the the asynchronous execution",
    "start": "752480",
    "end": "757680"
  },
  {
    "text": "but we talk it in another lens it's at the back end level so technically i called your method and",
    "start": "757680",
    "end": "764959"
  },
  {
    "text": "i immediately got a result back right although technically the method",
    "start": "764959",
    "end": "770399"
  },
  {
    "text": "was not finished right sounds sound familiar",
    "start": "770399",
    "end": "776560"
  },
  {
    "text": "right it's very similar to calling a local method that you call and you immediately get a future or a promise",
    "start": "776560",
    "end": "783920"
  },
  {
    "text": "right let's say hey oh something is is almost done here right so i'm i'm doing the execution",
    "start": "783920",
    "end": "791279"
  },
  {
    "text": "on the background technically we took if we zoomed out this is very similar to calling a network call and",
    "start": "791279",
    "end": "798800"
  },
  {
    "text": "having the back end asynchronously on the back end",
    "start": "798800",
    "end": "804560"
  },
  {
    "text": "doing its own job and executing the job on the back end so that's another",
    "start": "804560",
    "end": "809839"
  },
  {
    "text": "way of looking at asynchronous execution but from a different lens if that makes",
    "start": "809839",
    "end": "815680"
  },
  {
    "text": "sense right so calling the method immediately get a result but now you're responsible as a",
    "start": "815680",
    "end": "821920"
  },
  {
    "text": "client to pull all right and we can do all sorts of things like long polling or you can have",
    "start": "821920",
    "end": "827600"
  },
  {
    "text": "the server actually pushes the result disadvantages and advantages for every",
    "start": "827600",
    "end": "833279"
  },
  {
    "text": "single method i talked about these things and many times in this channel but yeah asynchronous execution on the",
    "start": "833279",
    "end": "840720"
  },
  {
    "text": "back end is and i there's another name for it already officials like asynchronous",
    "start": "840720",
    "end": "846480"
  },
  {
    "text": "service so if you heard this term asynchronous service that's a service that you call that",
    "start": "846480",
    "end": "853040"
  },
  {
    "text": "doesn't immediately give you the raw final result",
    "start": "853040",
    "end": "858079"
  },
  {
    "text": "right when it finishes no it gives you a hold a placeholder for you to come",
    "start": "858079",
    "end": "864000"
  },
  {
    "text": "back and check if if that job is done right so asynchronously on the back end is gonna is gonna do some work but you",
    "start": "864000",
    "end": "871680"
  },
  {
    "text": "can check back with me and and a given amount of time if that job is done or",
    "start": "871680",
    "end": "877360"
  },
  {
    "text": "not so q is very very popular right that is one of the ways that back-ends can scale",
    "start": "877360",
    "end": "884399"
  },
  {
    "text": "effectively take youtube for example if you upload a raw video now youtube has to do a lot of work and it's",
    "start": "884399",
    "end": "892240"
  },
  {
    "text": "impossible to do this synchronously right after you",
    "start": "892240",
    "end": "897680"
  },
  {
    "text": "upload the video imagine uploading a video and youtube has to uh compress the video you'd have to to",
    "start": "897680",
    "end": "905440"
  },
  {
    "text": "do a codec for the video has to produce uh 480p 720p",
    "start": "905440",
    "end": "912000"
  },
  {
    "text": "1080p and 4k all these formats has to produce them while you as a client just waiting for",
    "start": "912000",
    "end": "918880"
  },
  {
    "text": "the upload right imagine if any of these operations fail your upload will fail right",
    "start": "918880",
    "end": "924560"
  },
  {
    "text": "it's impossible to do it so what you do is upload that file and then just tell me",
    "start": "924560",
    "end": "932000"
  },
  {
    "text": "hey here is your youtube id but i'm not done yet",
    "start": "932000",
    "end": "938320"
  },
  {
    "text": "don't you say i'm not done yet that's asynchronous right because you yeah you give me a partial result which",
    "start": "938320",
    "end": "945759"
  },
  {
    "text": "is the id of the youtube video but you're still checking for copyright infringement",
    "start": "945759",
    "end": "951120"
  },
  {
    "text": "checking for content id checking for compressing the video doing all of this",
    "start": "951120",
    "end": "957279"
  },
  {
    "text": "stuff how do you possibly gonna do that message queues and pop subsystems help",
    "start": "957279",
    "end": "963279"
  },
  {
    "text": "real-time messaging effectively help in doing that right so you're to add you're going to probably create multiple topics",
    "start": "963279",
    "end": "970320"
  },
  {
    "text": "and if you can use kafka and asynchronously you're going to pick up the jobs different jobs and all these",
    "start": "970320",
    "end": "977600"
  },
  {
    "text": "processes going to pick up these stuff right this is another example of an asynchronous execution in message queues",
    "start": "977600",
    "end": "985040"
  },
  {
    "text": "and and then top subsystems right so we've seen",
    "start": "985040",
    "end": "990079"
  },
  {
    "text": "the synchronous execution versus asynchronous execution in programming normal day-to-day programming we've seen",
    "start": "990079",
    "end": "996399"
  },
  {
    "text": "it in back-end systems network backing systems uh",
    "start": "996399",
    "end": "1002240"
  },
  {
    "text": "with message queues and pop sub systems right you submit something and in the back end immediately responds to you",
    "start": "1002240",
    "end": "1009519"
  },
  {
    "text": "with a placeholder and then asynchronously on the back and",
    "start": "1009519",
    "end": "1015440"
  },
  {
    "text": "it actually continues execution this stuff right and then finally the example",
    "start": "1015440",
    "end": "1021680"
  },
  {
    "start": "1020000",
    "end": "1430000"
  },
  {
    "text": "my favorite is how databases actually do these asynchronous versus synchronous",
    "start": "1021680",
    "end": "1027760"
  },
  {
    "text": "operations right so most databases have this feature that's called synchronous replication right",
    "start": "1027760",
    "end": "1033360"
  },
  {
    "text": "so if you have a replicated database system where we have a primary database and you have i",
    "start": "1033360",
    "end": "1039678"
  },
  {
    "text": "don't know three uh worker database systems so if you issue a right to the primary right",
    "start": "1039679",
    "end": "1047678"
  },
  {
    "text": "the worker nodes need to have knowledge of this right that you have made right",
    "start": "1047679",
    "end": "1053600"
  },
  {
    "text": "because you want to keep the the whole system consistent right you want the one",
    "start": "1053600",
    "end": "1058720"
  },
  {
    "text": "you want this to hold the whole thing to be consistent right you can you can you can do this you can issue",
    "start": "1058720",
    "end": "1065919"
  },
  {
    "text": "the update statement or the insert statement or the delete statement in the primary right and then",
    "start": "1065919",
    "end": "1072880"
  },
  {
    "text": "block block the client do not",
    "start": "1072880",
    "end": "1077919"
  },
  {
    "text": "return success to the client who issued this dml just block and wait there",
    "start": "1077919",
    "end": "1086799"
  },
  {
    "text": "and in the background the primary is gonna issue three calls to each of the",
    "start": "1086799",
    "end": "1093520"
  },
  {
    "text": "worker nodes delete delete delete or insert insert or up the update issue the same dml",
    "start": "1093520",
    "end": "1099760"
  },
  {
    "text": "and if you're gonna wait for the first node and the second one and the third one",
    "start": "1099760",
    "end": "1105360"
  },
  {
    "text": "for a success on all of them and if all of them succeed",
    "start": "1105360",
    "end": "1110559"
  },
  {
    "text": "then you're going to get all of them succeed on the primary get these messages only then the message",
    "start": "1110559",
    "end": "1118240"
  },
  {
    "text": "right will be delivered to the client that says your right have seen succeed",
    "start": "1118240",
    "end": "1123840"
  },
  {
    "text": "despite the initial right actually succeeding on the primary database",
    "start": "1123840",
    "end": "1129840"
  },
  {
    "text": "because i wrote i issued a right to the primary yet i have blocked for the duration of execution in all the worker",
    "start": "1129840",
    "end": "1138160"
  },
  {
    "text": "nodes yaik c that is called synchronous replication",
    "start": "1138160",
    "end": "1143840"
  },
  {
    "text": "very very popular for strong consistency if you want to",
    "start": "1143840",
    "end": "1148960"
  },
  {
    "text": "guarantee strong consistency you have to do synchronous commits right",
    "start": "1148960",
    "end": "1154160"
  },
  {
    "text": "synchro sorry synchronous replication so chris commits another thing the other phase of this coin is asynchronous",
    "start": "1154160",
    "end": "1161760"
  },
  {
    "text": "replication so you're going to issue a right to this primary database but",
    "start": "1161760",
    "end": "1168320"
  },
  {
    "text": "immediately get a success when the right effectively succeeds on the primary that",
    "start": "1168320",
    "end": "1176400"
  },
  {
    "text": "is if you write successfully to the wall record right",
    "start": "1176400",
    "end": "1181440"
  },
  {
    "text": "the right ad log and then get back the results but you say oh say wait a second how",
    "start": "1181440",
    "end": "1187039"
  },
  {
    "text": "about this work or not well i don't know i don't really care right let them asynchronously let the",
    "start": "1187039",
    "end": "1194320"
  },
  {
    "text": "database asynchronously update this thing to me i wrote successfully why do i have to",
    "start": "1194320",
    "end": "1201200"
  },
  {
    "text": "wait for all these suckers to write to their own local data files i don't care",
    "start": "1201200",
    "end": "1207360"
  },
  {
    "text": "okay so when you do that what do you get asynchronous replication",
    "start": "1207360",
    "end": "1213280"
  },
  {
    "text": "gets you beautiful fast right blazing fast right because you're just",
    "start": "1213280",
    "end": "1219120"
  },
  {
    "text": "writing to one thing and one thing only right just that primary database so so",
    "start": "1219120",
    "end": "1225200"
  },
  {
    "text": "your rights are fast but do you get consistency nah",
    "start": "1225200",
    "end": "1230559"
  },
  {
    "text": "because the moment you and then you return success if you c if",
    "start": "1230559",
    "end": "1236960"
  },
  {
    "text": "you immediately follow it up with a read you read might be load balance to one of",
    "start": "1236960",
    "end": "1243919"
  },
  {
    "text": "the replicas and if you go to that replica while you",
    "start": "1243919",
    "end": "1249840"
  },
  {
    "text": "well you're right haven't asynchronously finished yet writing to the replica you're going to get the stale version",
    "start": "1249840",
    "end": "1256720"
  },
  {
    "text": "that's what happened to youtube back in 2006 2007 right people will go to their profile picture",
    "start": "1256720",
    "end": "1263280"
  },
  {
    "text": "doesn't do do an update and what do they do save and the first thing they do refresh",
    "start": "1263280",
    "end": "1269360"
  },
  {
    "text": "the page when you refresh the page reads were configured to be read from",
    "start": "1269360",
    "end": "1276240"
  },
  {
    "text": "the replicas that's how you basically uh make it uh uh make it fast right like hey i want to",
    "start": "1276240",
    "end": "1282480"
  },
  {
    "text": "scale my reads uh let them go to my replicas to my worker nodes and my rights goes to the primary that was like",
    "start": "1282480",
    "end": "1288400"
  },
  {
    "text": "the basic simplest design that you can build and when you do that refreshing the profile is what",
    "start": "1288400",
    "end": "1296240"
  },
  {
    "text": "i don't see my change what happened i took this this is an example from",
    "start": "1296240",
    "end": "1301760"
  },
  {
    "text": "the youtube lead i think uh sugu marang i hope i didn't push on his name",
    "start": "1301760",
    "end": "1308000"
  },
  {
    "text": "right uh he is the creator of he maintained youtube for a long time he's a creator of uh",
    "start": "1308000",
    "end": "1314559"
  },
  {
    "text": "vetas which is the my sequel plugin that allow you to",
    "start": "1314559",
    "end": "1320799"
  },
  {
    "text": "scale mysql shards basically there's a there's like a logical layer and my",
    "start": "1320799",
    "end": "1326400"
  },
  {
    "text": "circle sharding beautiful beautiful product so uh",
    "start": "1326400",
    "end": "1331520"
  },
  {
    "text": "when you and so users were confused like wait i just i just threw it what the heck",
    "start": "1331520",
    "end": "1336960"
  },
  {
    "text": "happened so that's the result of eventual consistency yeah sure eventually we're gonna be consistent the",
    "start": "1336960",
    "end": "1343760"
  },
  {
    "text": "whole system is gonna be consistent right but at that point",
    "start": "1343760",
    "end": "1348880"
  },
  {
    "text": "you can decide hey it's not really a big deal refresh again keep refreshing you're going to see your change right",
    "start": "1348880",
    "end": "1354960"
  },
  {
    "text": "but but youtube fixed it differently at that end right they said okay if you're coming from the same ips and you just",
    "start": "1354960",
    "end": "1360640"
  },
  {
    "text": "issued a right i'm gonna point you read to the primary you know so you always see your change so they did this hack so",
    "start": "1360640",
    "end": "1366880"
  },
  {
    "text": "that people don't freak out nothing wrong with that to me that's that's always a good solution",
    "start": "1366880",
    "end": "1372480"
  },
  {
    "text": "temporarily for that fix right so and they got fast rights and they got consistent results because",
    "start": "1372480",
    "end": "1379360"
  },
  {
    "text": "they kind of played with the kind of played it sticky if you think about like they they sh issued a sticky",
    "start": "1379360",
    "end": "1386400"
  },
  {
    "text": "read in this particular case so synchronous replication asynchronous application a lot of database supports",
    "start": "1386400",
    "end": "1391440"
  },
  {
    "text": "this is that it's a it's a plug you can do right it's just a tune tuning option you can do if you want is strongly",
    "start": "1391440",
    "end": "1398400"
  },
  {
    "text": "consistent result go with synchronous but you suffer with your right your rights are going to be slower obviously",
    "start": "1398400",
    "end": "1404480"
  },
  {
    "text": "right but if you want in if you want fast rights but",
    "start": "1404480",
    "end": "1409679"
  },
  {
    "text": "uh you don't really you're fine if if if your if you read gets like i",
    "start": "1409679",
    "end": "1415280"
  },
  {
    "text": "don't know a little bit of stellar results i don't know if you're building instagram you have you have a little bit",
    "start": "1415280",
    "end": "1420320"
  },
  {
    "text": "of a stellar number of likes who cares right uh",
    "start": "1420320",
    "end": "1426159"
  },
  {
    "text": "yeah so it really depends use case there's no right or wrong right so another option with synchronicity is is",
    "start": "1426159",
    "end": "1431440"
  },
  {
    "start": "1430000",
    "end": "1770000"
  },
  {
    "text": "this thing that's called synchronous commits and i don't know if other database supports it but poscas have this option that you",
    "start": "1431440",
    "end": "1438080"
  },
  {
    "text": "can turn on so synchronous commits it by default is scary right it's like okay synchronous",
    "start": "1438080",
    "end": "1444640"
  },
  {
    "text": "commits like just just you who are saying same synchronous commits",
    "start": "1444640",
    "end": "1450080"
  },
  {
    "text": "that implies there is an asynchronous commits right this is not something you play with",
    "start": "1450080",
    "end": "1457039"
  },
  {
    "text": "this is scary because what is a commit a commit doesn't mean okay i am doing all my",
    "start": "1457039",
    "end": "1462480"
  },
  {
    "text": "transaction transaction and i'm issuing all these beautiful operations and all of a sudden uh",
    "start": "1462480",
    "end": "1469600"
  },
  {
    "text": "finally i say commit my changes and that writes basically",
    "start": "1469600",
    "end": "1474720"
  },
  {
    "text": "a record that says this is final this this please",
    "start": "1474720",
    "end": "1479840"
  },
  {
    "text": "make this changes durable on desk so that durability right committing is is a very",
    "start": "1479840",
    "end": "1486880"
  },
  {
    "text": "critical thing in database when i say commit and you tell me that it succeeds i better not lose this if the moment you",
    "start": "1486880",
    "end": "1495440"
  },
  {
    "text": "tell me my commits succeed i can turn off the power at that exact millisecond",
    "start": "1495440",
    "end": "1502320"
  },
  {
    "text": "and i can turn back the database back on and my change should be there that's what durability is when you tell me as",
    "start": "1502320",
    "end": "1510000"
  },
  {
    "text": "long as you tell me my comments succeed if you don't tell me my comment succeeds all bets are off but if you if i commit",
    "start": "1510000",
    "end": "1516480"
  },
  {
    "text": "my changes and and even the moment just a fraction of a millisecond later",
    "start": "1516480",
    "end": "1522799"
  },
  {
    "text": "the power went off my changes should be durable that's that's what the definition of commit",
    "start": "1522799",
    "end": "1528640"
  },
  {
    "text": "that's technically what a synchronous commit is when you do a commit",
    "start": "1528640",
    "end": "1533840"
  },
  {
    "text": "you immediately flush all these things to to disk",
    "start": "1533840",
    "end": "1538880"
  },
  {
    "text": "and you can imagine how slow can this be if your transaction is so large and it",
    "start": "1538880",
    "end": "1544159"
  },
  {
    "text": "has to flush all this rights to desk right i know databases",
    "start": "1544159",
    "end": "1550240"
  },
  {
    "text": "kind of flush to disk as you they assume they are optimistic most databases have this optimistic models",
    "start": "1550240",
    "end": "1556320"
  },
  {
    "text": "like okay i trust you you're not gonna roll back or fail so i'm gonna write right right right right right right to",
    "start": "1556320",
    "end": "1561840"
  },
  {
    "text": "disk and at the end that's at least what postgres does at the end when you do a commit oh i already flushed all these to",
    "start": "1561840",
    "end": "1567919"
  },
  {
    "text": "disk i have only a few things to flush to disk done right",
    "start": "1567919",
    "end": "1573440"
  },
  {
    "text": "other databases are not right they write to memory instead and then when you commit they flush things",
    "start": "1573440",
    "end": "1579520"
  },
  {
    "text": "from memory to desk and that takes more time right that's why commits and postgres are blazing fast because they",
    "start": "1579520",
    "end": "1585440"
  },
  {
    "text": "write to disk all the time and then they in case of a failure then they figure out how they can roll back",
    "start": "1585440",
    "end": "1591919"
  },
  {
    "text": "these stale changes that they shouldn't be in disk anymore so yeah postgres had this option called synchronous commands",
    "start": "1591919",
    "end": "1598080"
  },
  {
    "text": "right they when you issue a command i'm going to block you until all of these rights",
    "start": "1598080",
    "end": "1604400"
  },
  {
    "text": "physically are on disk emphasis on physically there is a code here",
    "start": "1604400",
    "end": "1611360"
  },
  {
    "text": "with fsync and how operating system cache works i'm not going to go into that",
    "start": "1611360",
    "end": "1618400"
  },
  {
    "text": "here it deserves its own video but let's assume it's physically written to describe for you for for the for example",
    "start": "1618400",
    "end": "1624880"
  },
  {
    "text": "sex so now there is another option for the brave called asynchronous commits yes you",
    "start": "1624880",
    "end": "1632960"
  },
  {
    "text": "heard me right that means if i issue a commit i'm gonna immediately get a success",
    "start": "1632960",
    "end": "1639200"
  },
  {
    "text": "succeed success so my transactions are",
    "start": "1639200",
    "end": "1644320"
  },
  {
    "text": "i don't know what's that but they're fast they are blazing fast because hey i just",
    "start": "1644320",
    "end": "1651360"
  },
  {
    "text": "commit i'm going to asynchronously commit your changes while uh",
    "start": "1651360",
    "end": "1656399"
  },
  {
    "text": "while you just have the you you're going to you you're going to",
    "start": "1656399",
    "end": "1661520"
  },
  {
    "text": "enjoy the fast commits well well you might say what if the asynchronous there was a",
    "start": "1661520",
    "end": "1666799"
  },
  {
    "text": "failure yep this is a",
    "start": "1666799",
    "end": "1673679"
  },
  {
    "text": "thing that you take a risk for there is a high chance of data loss",
    "start": "1673840",
    "end": "1680559"
  },
  {
    "text": "because when when in synchronous operations and synchronous commits when the postgres or",
    "start": "1680559",
    "end": "1686399"
  },
  {
    "text": "any other database tells you commit succeeds you can guarantee that it's actually commit succeed but in asynchronous mode",
    "start": "1686399",
    "end": "1694559"
  },
  {
    "text": "when you say commit succeed you cannot trust it you can turn off the power",
    "start": "1694559",
    "end": "1699919"
  },
  {
    "text": "right after that succeeds sexist success and",
    "start": "1699919",
    "end": "1705840"
  },
  {
    "text": "your data might not be there sorry yes",
    "start": "1705840",
    "end": "1711760"
  },
  {
    "text": "yes but i have this option actually",
    "start": "1711760",
    "end": "1717679"
  },
  {
    "text": "turned on asynchronous operation that's actually the option is called synchronous commits",
    "start": "1717679",
    "end": "1723120"
  },
  {
    "text": "and that's owned by default in postgres and i have it turned off on my testing",
    "start": "1723120",
    "end": "1728240"
  },
  {
    "text": "database uh because it's it's just for running tests and i load data on a daily basis i",
    "start": "1728240",
    "end": "1735600"
  },
  {
    "text": "flush the database and load stuff daily basis so",
    "start": "1735600",
    "end": "1740720"
  },
  {
    "text": "i want fast transaction and i know asynchronously i'm not going to have a power outage and if it did big deal i'm",
    "start": "1740720",
    "end": "1747279"
  },
  {
    "text": "just going to reload the data right for running daily tests it's amazing",
    "start": "1747279",
    "end": "1753039"
  },
  {
    "text": "my transactions finish way much faster not as fast as i would like but",
    "start": "1753039",
    "end": "1758240"
  },
  {
    "text": "they're fast there's no much big difference in iso right",
    "start": "1758240",
    "end": "1763760"
  },
  {
    "text": "yeah asynchronicity everywhere the final example fsync let's say i said no i'm",
    "start": "1763760",
    "end": "1769120"
  },
  {
    "text": "not going to mention it but i'm going to mention it so if sync what is this",
    "start": "1769120",
    "end": "1775278"
  },
  {
    "start": "1770000",
    "end": "2078000"
  },
  {
    "text": "so this is an operating system level thing when you when you write when you ask your operating system to write to",
    "start": "1775919",
    "end": "1782880"
  },
  {
    "text": "disk the operators the os is actually sneaky they they don't write physically to desk",
    "start": "1782880",
    "end": "1790799"
  },
  {
    "text": "they write to their own operating system cache because they don't",
    "start": "1790799",
    "end": "1797120"
  },
  {
    "text": "because most applications you know",
    "start": "1797120",
    "end": "1802480"
  },
  {
    "text": "when they write they write a lot right they they issue a lot of rights so",
    "start": "1802480",
    "end": "1807840"
  },
  {
    "text": "operating system kind of batches these rights is okay i know i know you want to write to disk",
    "start": "1807840",
    "end": "1813039"
  },
  {
    "text": "but wait for a few milliseconds cache all these things in my own",
    "start": "1813039",
    "end": "1818240"
  },
  {
    "text": "operating system cache which is in memory and then i'm gonna flush them to this so it's very similar",
    "start": "1818240",
    "end": "1824799"
  },
  {
    "text": "to synchronous command it's gonna flush them to physically to the desk after a period of",
    "start": "1824799",
    "end": "1830320"
  },
  {
    "text": "time i don't know i don't know how long but",
    "start": "1830320",
    "end": "1835440"
  },
  {
    "text": "uh it's gonna be this could be 300 milliseconds could be 10 milliseconds who care who knows i don't",
    "start": "1835440",
    "end": "1842159"
  },
  {
    "text": "know to be honest you might say hussein but isn't if i write something and i read it",
    "start": "1842159",
    "end": "1847760"
  },
  {
    "text": "i see it immediately in the operating system what are you talking about well the operating system had the full control of course they're going to give",
    "start": "1847760",
    "end": "1854880"
  },
  {
    "text": "you the results from the latest fresh cache they're not going to go to the disk and read a stale value for you",
    "start": "1854880",
    "end": "1861519"
  },
  {
    "text": "right so the operating system at the end of the day it's the the barest",
    "start": "1861519",
    "end": "1867039"
  },
  {
    "text": "thing to the to the metal right so if you issue all right it always goes through a os right",
    "start": "1867039",
    "end": "1873279"
  },
  {
    "text": "so in databases this is unacceptable",
    "start": "1873279",
    "end": "1878559"
  },
  {
    "text": "most databases turn this capability off os caching yuck i don't want it",
    "start": "1878559",
    "end": "1884320"
  },
  {
    "text": "if i tell you to write os you better write to desk don't do",
    "start": "1884320",
    "end": "1889519"
  },
  {
    "text": "this or operating system hacky hack caches i don't care i want to maintain durability",
    "start": "1889519",
    "end": "1897519"
  },
  {
    "text": "right i am a database god damn it i'm a database so if i tell",
    "start": "1897519",
    "end": "1902559"
  },
  {
    "text": "you to commit and or or write this thing you better write especially wall changes",
    "start": "1902559",
    "end": "1907679"
  },
  {
    "text": "wall changes this this right ahead log this you cannot play with those you can play with data pages like index i don't",
    "start": "1907679",
    "end": "1914640"
  },
  {
    "text": "care if the index didn't get updated i have my wall changes here which says update blah blah blah",
    "start": "1914640",
    "end": "1921039"
  },
  {
    "text": "that's almost like a journal does this have to be flushed it is because of the",
    "start": "1921039",
    "end": "1926080"
  },
  {
    "text": "durability yikesy bad thing so uh this this option is turned on by default",
    "start": "1926080",
    "end": "1933360"
  },
  {
    "text": "i believe impossible but you can't turn it off too and it gives you very similar to",
    "start": "1933360",
    "end": "1938399"
  },
  {
    "text": "synchronous versus asynchronous right think about it the os cache is an asynchronous",
    "start": "1938399",
    "end": "1945679"
  },
  {
    "text": "operation because you told the operating system to write to this but it didn't it gives you",
    "start": "1945679",
    "end": "1950799"
  },
  {
    "text": "a partial result it says yeah i wrote but it says",
    "start": "1950799",
    "end": "1955840"
  },
  {
    "text": "idiot i didn't really write it to this i write it to my cache but yeah asynchronously is going to flush it to",
    "start": "1955840",
    "end": "1962320"
  },
  {
    "text": "disk and this is a good reason for the os to do that because if you issue a lot of writes right into this really a hard",
    "start": "1962320",
    "end": "1969200"
  },
  {
    "text": "drive it's going to be slow so operating system that meant",
    "start": "1969200",
    "end": "1975039"
  },
  {
    "text": "try to batch as much of right as possible so that if there is a a an uh and oh",
    "start": "1975039",
    "end": "1982000"
  },
  {
    "text": "if there is a disk page that receives a lot of rights it's gonna it's gonna all",
    "start": "1982000",
    "end": "1987120"
  },
  {
    "text": "these rights come become in memory and then you flash this right one shot to the database right",
    "start": "1987120",
    "end": "1995440"
  },
  {
    "text": "to the desk immediately right right versus imagine you're updating the same page and every single object to the",
    "start": "1995440",
    "end": "2001760"
  },
  {
    "text": "page you go to the disk and slam it right you just updated the same page 10 times",
    "start": "2001760",
    "end": "2008399"
  },
  {
    "text": "right so you're gonna issue 10 ios in the case of os you update it 10 times in the",
    "start": "2008399",
    "end": "2015279"
  },
  {
    "text": "cache and the os will write it only once this also gives you uh the the ssd if in",
    "start": "2015279",
    "end": "2021840"
  },
  {
    "text": "case if you're using ssd it's going to prolong the life of the ssd because this is these the the hand that if there's",
    "start": "2021840",
    "end": "2028880"
  },
  {
    "text": "one thing that ssd hates is writing in the same page multiple times yaxi i know",
    "start": "2028880",
    "end": "2035679"
  },
  {
    "text": "uh ssds does all this kind of a garbage collection and it just tries to move things around into new pages so it can",
    "start": "2035679",
    "end": "2042159"
  },
  {
    "text": "reuse different pages but yeah and over this this video went too long i guess guys huh",
    "start": "2042159",
    "end": "2047919"
  },
  {
    "text": "sorry about that but asynchronicity synchronous operations versus asynchronous operation they are",
    "start": "2047919",
    "end": "2054878"
  },
  {
    "text": "everywhere they are everywhere",
    "start": "2054879",
    "end": "2060040"
  },
  {
    "text": "and tell me guys give me examples where you preferred",
    "start": "2060079",
    "end": "2065520"
  },
  {
    "text": "synchronicity over asynchronicity right let me know in the comment section below",
    "start": "2065520",
    "end": "2070638"
  },
  {
    "text": "i am going to see you on the next one you guys all stay awesome all this",
    "start": "2070639",
    "end": "2079358"
  }
]