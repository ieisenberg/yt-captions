[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "in this episode of the back engineering show i would like to talk about threading multi-threaded application",
    "start": "80",
    "end": "7759"
  },
  {
    "text": "specifically within the context of networking and connection management",
    "start": "7759",
    "end": "13920"
  },
  {
    "text": "to be more specific even than that tcp connection management it's very critical",
    "start": "13920",
    "end": "19600"
  },
  {
    "text": "in backend applications that you have a socket that you listen to whether this is a",
    "start": "19600",
    "end": "26320"
  },
  {
    "text": "web server whether this is a ssh server whether this is a custom made",
    "start": "26320",
    "end": "33680"
  },
  {
    "text": "protocol that you built grpc you know any other protocol",
    "start": "33680",
    "end": "39200"
  },
  {
    "text": "right but the the the challenge becomes how do you accept",
    "start": "39200",
    "end": "46480"
  },
  {
    "text": "connections from clients and how much uh can a single box",
    "start": "46480",
    "end": "53039"
  },
  {
    "text": "right manage all these connections from all these clients this is what i want to",
    "start": "53039",
    "end": "58399"
  },
  {
    "text": "talk about in this episode let's jump into it welcome to the backend engineering show with your host hussein nelson and this",
    "start": "58399",
    "end": "64960"
  },
  {
    "text": "is our series our laid-back series where we sit down and and discuss",
    "start": "64960",
    "end": "70880"
  },
  {
    "text": "interesting topics and specifically to back in engineering it's a it's a podcast so you can listen",
    "start": "70880",
    "end": "77439"
  },
  {
    "text": "to it on your favorite podcast player there's i usually don't add any graphic at all it's supposed to be",
    "start": "77439",
    "end": "84560"
  },
  {
    "text": "just a talking head video so if you like this kind of content consider subscribing to this channel and",
    "start": "84560",
    "end": "91119"
  },
  {
    "text": "check us out on the spotify and apple podcast yeah i do have other content on this channel if you this is not your cup",
    "start": "91119",
    "end": "97600"
  },
  {
    "text": "of tea of course i understand i have all sorts of other content i have crash courses i have",
    "start": "97600",
    "end": "104320"
  },
  {
    "text": "you know tutorials i have hands-on stuff using software you know with that",
    "start": "104320",
    "end": "111600"
  },
  {
    "text": "out of the way let's get into it in the early days very very very early days of computing",
    "start": "111600",
    "end": "120079"
  },
  {
    "start": "120000",
    "end": "390000"
  },
  {
    "text": "when you spin up a process and you had a single cpu on your host",
    "start": "120079",
    "end": "125520"
  },
  {
    "text": "machine and that process executes certain tasks let's say",
    "start": "125520",
    "end": "131120"
  },
  {
    "text": "it accepts a connection and that connection now has some sort of a request",
    "start": "131120",
    "end": "136400"
  },
  {
    "text": "let's say it's an http request once it determines",
    "start": "136400",
    "end": "142400"
  },
  {
    "text": "where the request starts and where the request ends that logic of the",
    "start": "142400",
    "end": "148480"
  },
  {
    "text": "translation of a request will be taken to the application and then application start processing it whatever that means",
    "start": "148480",
    "end": "154480"
  },
  {
    "text": "you know if it's a git slash api that will make a request to some other",
    "start": "154480",
    "end": "159840"
  },
  {
    "text": "database as somewhere else so we'll establish another connection to other database since the request since the sql",
    "start": "159840",
    "end": "167920"
  },
  {
    "text": "command or the you know key value",
    "start": "167920",
    "end": "174400"
  },
  {
    "text": "request to get a value regardless what is the processing some of the processing will be",
    "start": "174400",
    "end": "181360"
  },
  {
    "text": "localized within that instance so it will consume cpu",
    "start": "181360",
    "end": "187360"
  },
  {
    "text": "power from that host some of the kind of the request will be",
    "start": "187360",
    "end": "192480"
  },
  {
    "text": "not cpu bound maybe ioban whether this is",
    "start": "192480",
    "end": "197599"
  },
  {
    "text": "a network call or a desk call hey i'm going to the desk so that's why very important to understand the nature of",
    "start": "197599",
    "end": "204239"
  },
  {
    "text": "your back-end and whether it's does it cost cpu or does it cost io",
    "start": "204239",
    "end": "211360"
  },
  {
    "text": "and this is an episode by itself you know because you can scale differently based on that",
    "start": "211360",
    "end": "217120"
  },
  {
    "text": "but regardless if you assume it's a cpu intensive app where you're you're doing processing in",
    "start": "217120",
    "end": "225120"
  },
  {
    "text": "the machine itself right even after sending a request to the",
    "start": "225120",
    "end": "231200"
  },
  {
    "text": "database getting response you kind of doing localized processing even if you don't know it",
    "start": "231200",
    "end": "237760"
  },
  {
    "text": "you are using you're probably using a library that does that kind of processing especially the serialization",
    "start": "237760",
    "end": "244319"
  },
  {
    "text": "deserialization that's costly encryption decryption of tls all of this stuff is",
    "start": "244319",
    "end": "250080"
  },
  {
    "text": "happening without us knowing and uh i try as much as possible",
    "start": "250080",
    "end": "257199"
  },
  {
    "text": "at least this is for myself to erase",
    "start": "257199",
    "end": "263360"
  },
  {
    "text": "all this uh m ambiguity and and you know the",
    "start": "263360",
    "end": "269120"
  },
  {
    "text": "vagueness of anything that i use by understanding what every",
    "start": "269120",
    "end": "274479"
  },
  {
    "text": "single thing i use what is actually doing right it's not everyone's cup of tea i",
    "start": "274479",
    "end": "280720"
  },
  {
    "text": "understand but i like to understand everything i use that's just me it's just",
    "start": "280720",
    "end": "285840"
  },
  {
    "text": "gives you it keeps your eye open in the old days when you have this single core",
    "start": "285840",
    "end": "291680"
  },
  {
    "text": "and you have single process that core will be occupied to your",
    "start": "291680",
    "end": "296880"
  },
  {
    "text": "process right and you might your host might have multiple processes and they are sharing",
    "start": "296880",
    "end": "302320"
  },
  {
    "text": "you know time sharing this cpu and like all right let's stop there i'm done take over cpu right take over the next",
    "start": "302320",
    "end": "310400"
  },
  {
    "text": "process process three you can take over and the operating system is scheduling",
    "start": "310400",
    "end": "315440"
  },
  {
    "text": "these things you know more few years more few more years a decade maybe",
    "start": "315440",
    "end": "322160"
  },
  {
    "text": "in the future and now we were able to make cpus more",
    "start": "322160",
    "end": "329759"
  },
  {
    "text": "powerful you know uh we have more power for cpus the single core is",
    "start": "329759",
    "end": "335840"
  },
  {
    "text": "powerful move a little bit forward and now we have the ability to add",
    "start": "335840",
    "end": "342160"
  },
  {
    "text": "multiple cores in a processor so you have a processor",
    "start": "342160",
    "end": "348479"
  },
  {
    "text": "but that processor will have multiple cores so there's dual cores technically",
    "start": "348479",
    "end": "353520"
  },
  {
    "text": "think of it two cpus you know and",
    "start": "353520",
    "end": "358800"
  },
  {
    "text": "we have four chords eighth chords so on with that in mind",
    "start": "358800",
    "end": "366000"
  },
  {
    "text": "we don't have contention between different applications now because if i if my single process app",
    "start": "366000",
    "end": "374720"
  },
  {
    "text": "will get a core and the other host processes can use other cores",
    "start": "374720",
    "end": "381360"
  },
  {
    "text": "that's pretty neat i no longer share one core between all the processing",
    "start": "381360",
    "end": "386639"
  },
  {
    "text": "but developers thought about it says ha that sounds like a great idea",
    "start": "386639",
    "end": "394319"
  },
  {
    "start": "390000",
    "end": "855000"
  },
  {
    "text": "what if my app i'm greedy i am greedy",
    "start": "394319",
    "end": "401280"
  },
  {
    "text": "my app is a single process but what if my app actually consists of multiple",
    "start": "401280",
    "end": "407120"
  },
  {
    "text": "processes or multiple threads right a process and a thread is very it's it's",
    "start": "407120",
    "end": "414319"
  },
  {
    "text": "almost like splitting hairs when it comes to a process and a thread especially in linux i think this process",
    "start": "414319",
    "end": "419360"
  },
  {
    "text": "is a thread it's just like they share the same memory sort of speak right",
    "start": "419360",
    "end": "425520"
  },
  {
    "text": "so what people invented was says all right let's just spin up multiple threads you know",
    "start": "425520",
    "end": "431440"
  },
  {
    "text": "so multiple worker threads and we have one main thread and let them",
    "start": "431440",
    "end": "436560"
  },
  {
    "text": "do the work in parallel why because now not only i have access to",
    "start": "436560",
    "end": "442400"
  },
  {
    "text": "one core my multiple threads can utilize multiple",
    "start": "442400",
    "end": "448479"
  },
  {
    "text": "cores you know at the same time no sore",
    "start": "448479",
    "end": "454000"
  },
  {
    "text": "even i'm starting to remember even in the 2000",
    "start": "454000",
    "end": "460319"
  },
  {
    "text": "six ish 2006 and 2007 multi-threading was the",
    "start": "460319",
    "end": "465360"
  },
  {
    "text": "jam you know like everybody was talking about multi-threading it's like oh yeah you have to get into",
    "start": "465360",
    "end": "471680"
  },
  {
    "text": "multi-threading like maybe it was earlier than that but when i because 2005 was the start of my career",
    "start": "471680",
    "end": "478720"
  },
  {
    "text": "and this is where i started hearing about multi-threading that's just being a lot of people start talking about it",
    "start": "478720",
    "end": "486800"
  },
  {
    "text": "so now a lot of people move to multi-threading because of the performance benefit that",
    "start": "486879",
    "end": "493039"
  },
  {
    "text": "mike they might get right because now i can share multiple cpu if",
    "start": "493039",
    "end": "499120"
  },
  {
    "text": "a single process needs x amount of cpu and i can parallelize that work let's",
    "start": "499120",
    "end": "505520"
  },
  {
    "text": "pin up multiple threads right and let",
    "start": "505520",
    "end": "511120"
  },
  {
    "text": "divide this work and let them all spin up",
    "start": "511120",
    "end": "517919"
  },
  {
    "text": "their own task and they execute these tasks in parallel concurrently if you",
    "start": "519200",
    "end": "524480"
  },
  {
    "text": "will that was a revelation so now we are using multiple core so the app is is",
    "start": "524480",
    "end": "532839"
  },
  {
    "text": "faster but just like any human",
    "start": "532839",
    "end": "537920"
  },
  {
    "text": "evolution nothing comes without its own problems almost every",
    "start": "537920",
    "end": "544560"
  },
  {
    "text": "solution we create as engineers comes with its own downsides i can't think of",
    "start": "544560",
    "end": "551200"
  },
  {
    "text": "anything that we created you know software engineering wise",
    "start": "551200",
    "end": "557600"
  },
  {
    "text": "that didn't come with its own downside solos follow the case correct me if i'm",
    "start": "557600",
    "end": "562959"
  },
  {
    "text": "wrong what's the problem with multi-threading well the benefits of multi-threading is",
    "start": "562959",
    "end": "571279"
  },
  {
    "text": "obvious the problems with multi-threading is",
    "start": "571279",
    "end": "576560"
  },
  {
    "text": "two things that i can think of first the management of the threads and the resource access",
    "start": "576560",
    "end": "581920"
  },
  {
    "text": "we mentioned that when you spin up a process you are allocated certain amount of memory",
    "start": "581920",
    "end": "587279"
  },
  {
    "text": "right it's called the heap you can dump your stuff there",
    "start": "587279",
    "end": "592800"
  },
  {
    "text": "but then and and we never had this problem before with the single process because a single",
    "start": "592800",
    "end": "597839"
  },
  {
    "text": "process is a single process you know it's when a single process want to write a read a variable it can go ahead and",
    "start": "597839",
    "end": "604640"
  },
  {
    "text": "read that variable we need to want to write the variable nobody's writing to that variable except",
    "start": "604640",
    "end": "609839"
  },
  {
    "text": "itself but with multi-threading all these threads shares the same memory",
    "start": "609839",
    "end": "616480"
  },
  {
    "text": "it's a shared memory when it comes to just that process you can also have shared memory between",
    "start": "616480",
    "end": "623440"
  },
  {
    "text": "processes as well i suppose no i'm pretty sure you can",
    "start": "623440",
    "end": "628880"
  },
  {
    "text": "i think postgres has that concept and it's an operating system thing i think",
    "start": "628880",
    "end": "634079"
  },
  {
    "text": "you can have as dedicated share memory but only do you have a shared memory between these threads those guys",
    "start": "634079",
    "end": "642000"
  },
  {
    "text": "start competing on these resources because no two thing",
    "start": "642000",
    "end": "647760"
  },
  {
    "text": "no two threads can access the same variable at the same time you might say why",
    "start": "647760",
    "end": "652800"
  },
  {
    "text": "they can't sure they can let them do that but you get undesired",
    "start": "652800",
    "end": "658839"
  },
  {
    "text": "results and this is a whole thing i talk about in my database course when it comes to the acid thing like atomicity",
    "start": "658839",
    "end": "665120"
  },
  {
    "text": "consistency isolation and durability we have the same problem there right because we are a concurrent system",
    "start": "665120",
    "end": "670880"
  },
  {
    "text": "database after all so you have two transactions trying to update the same row what does what does that mean what",
    "start": "670880",
    "end": "676880"
  },
  {
    "text": "is what do we do so the simplest thing to do is to acquire",
    "start": "676880",
    "end": "682880"
  },
  {
    "text": "a mutex or a lock i think it's the same thing no",
    "start": "682880",
    "end": "688560"
  },
  {
    "text": "where you if a thread wants to write something it acquires a mutex on it it",
    "start": "688560",
    "end": "694079"
  },
  {
    "text": "locks it says hey hey this variable i'm about to write to it nobody can write to it or nobody can read to it at all",
    "start": "694079",
    "end": "701440"
  },
  {
    "text": "so if another if i want to do something to that it's blocked see",
    "start": "701440",
    "end": "707360"
  },
  {
    "text": "then the management of this stuff is absolutely",
    "start": "707360",
    "end": "713120"
  },
  {
    "text": "challenging a lot of people liked it in the beginning but the more they got into it the more complex your app becomes now",
    "start": "713120",
    "end": "720240"
  },
  {
    "text": "things that you use do not worry about now you have to worry about them at the",
    "start": "720240",
    "end": "725279"
  },
  {
    "text": "cost of an additional cpu so you're finding yourself serializing",
    "start": "725279",
    "end": "730560"
  },
  {
    "text": "things so so you the multi-threaded apps all of a sudden now if this uh if these threads",
    "start": "730560",
    "end": "737839"
  },
  {
    "text": "are completely isolated you you want the jackpot but if they need to access the same variable which guess what almost",
    "start": "737839",
    "end": "745760"
  },
  {
    "text": "most of the time you're going to need to access the same variable either to read or write to increment the value even increment",
    "start": "745760",
    "end": "753440"
  },
  {
    "text": "is a very hard problem to solve like how do you increment something you have to serialize it when i say",
    "start": "753440",
    "end": "759760"
  },
  {
    "text": "serialized i mean you have to lock it so that the other thread cannot they cannot both of the time let's take",
    "start": "759760",
    "end": "766480"
  },
  {
    "text": "an example let's say increment the value the variable foo right",
    "start": "766480",
    "end": "772800"
  },
  {
    "text": "if you have two threads that doesn't increment both of them will read the value both of them will read zero both",
    "start": "772800",
    "end": "778639"
  },
  {
    "text": "of them will increment it and then both of them will store one that's not",
    "start": "778639",
    "end": "783760"
  },
  {
    "text": "correct right because incrementing in that particular case should give you 0 1 and 2.",
    "start": "783760",
    "end": "790560"
  },
  {
    "text": "instead you've got one so that's just a simple example of where things can go wrong okay but",
    "start": "790560",
    "end": "796560"
  },
  {
    "text": "so now we talked about multiple multi-threading uh of one of the problems with multi-thread",
    "start": "796560",
    "end": "802079"
  },
  {
    "text": "is the management of the the second problem that i think of is uh",
    "start": "802079",
    "end": "807680"
  },
  {
    "text": "isolation in in a bad way",
    "start": "807680",
    "end": "812880"
  },
  {
    "text": "if every thread is running in isolation",
    "start": "812880",
    "end": "817920"
  },
  {
    "text": "we don't know what the workload",
    "start": "818240",
    "end": "823760"
  },
  {
    "text": "of these threads we don't know if this thread is overloaded compared to this thread",
    "start": "823760",
    "end": "829839"
  },
  {
    "text": "that is might not be overloaded so as a result you might not have even load balancing between these threads right",
    "start": "829839",
    "end": "837839"
  },
  {
    "text": "so in order to do that you have to introduce a manager a coordinator",
    "start": "837839",
    "end": "843040"
  },
  {
    "text": "right more complexity but it is it is what it is so why am i",
    "start": "843040",
    "end": "849279"
  },
  {
    "text": "talking about multi-threading right we all know what multi-threading is but i thought it's very critical to talk about",
    "start": "849279",
    "end": "854639"
  },
  {
    "text": "and then we're gonna link it back to socket management and connection management here",
    "start": "854639",
    "end": "860639"
  },
  {
    "start": "855000",
    "end": "1215000"
  },
  {
    "text": "you see when you have",
    "start": "860639",
    "end": "866240"
  },
  {
    "text": "when you have a web application and no js application and node.js is a bad",
    "start": "866240",
    "end": "871360"
  },
  {
    "text": "example it's a single thread so let's take it out of the equation let's say you built your own app from using c",
    "start": "871360",
    "end": "878000"
  },
  {
    "text": "or go and you have a single thread",
    "start": "878000",
    "end": "883440"
  },
  {
    "text": "and you said hey i want to listen on port 80",
    "start": "883440",
    "end": "888720"
  },
  {
    "text": "that's a web app http",
    "start": "888720",
    "end": "892639"
  },
  {
    "text": "so would you listen on port 80.",
    "start": "893760",
    "end": "899560"
  },
  {
    "text": "what happened is you're telling the operating system that hey on this particular",
    "start": "900240",
    "end": "906320"
  },
  {
    "text": "ip address i'm listening to port 80 and you can specify which ip address",
    "start": "906320",
    "end": "912800"
  },
  {
    "text": "might say what do you what does that mean i should have only one ip address nope you have so many ip addresses",
    "start": "912800",
    "end": "919519"
  },
  {
    "text": "on your machine you have the loopback that's an ipad",
    "start": "919519",
    "end": "924959"
  },
  {
    "text": "you have you might have an ethernet that has an ip at us but i have a wi-fi",
    "start": "924959",
    "end": "932320"
  },
  {
    "text": "that has i don't know ip address might have a a docker",
    "start": "932320",
    "end": "939040"
  },
  {
    "text": "bridged in uh interface neck you might have a virtual neck",
    "start": "939040",
    "end": "945120"
  },
  {
    "text": "you might have another ethernet port yeah and all you all of these network card",
    "start": "945120",
    "end": "950720"
  },
  {
    "text": "another nic i mean can have their own ip headers they have their own connected to their own gateway",
    "start": "950720",
    "end": "956720"
  },
  {
    "text": "and they have another completely different ip and a different subnet so",
    "start": "956720",
    "end": "962160"
  },
  {
    "text": "when you listen in a specific interface right you can listen on all of them if you want and",
    "start": "962160",
    "end": "969199"
  },
  {
    "text": "sadly that's the default and most i didn't understand this before",
    "start": "969199",
    "end": "974240"
  },
  {
    "text": "i recently learned that like in the past year like listening is very expensive and i i",
    "start": "974240",
    "end": "981600"
  },
  {
    "text": "really i'm really worried that the default",
    "start": "981600",
    "end": "986800"
  },
  {
    "text": "when you don't specify hey listen 80 even in node.js most apps when you listen it's listening",
    "start": "986800",
    "end": "993839"
  },
  {
    "text": "on all interfaces why i would love",
    "start": "993839",
    "end": "999199"
  },
  {
    "text": "i guess they did it for simplicity but just like anything in engineering the",
    "start": "999199",
    "end": "1004639"
  },
  {
    "text": "more the if the moment you simplify the developer experience by making the",
    "start": "1004639",
    "end": "1011440"
  },
  {
    "text": "code easier you're introducing your hiding",
    "start": "1011440",
    "end": "1017240"
  },
  {
    "text": "abstractions right you're introducing abstraction which hides the complexity of these",
    "start": "1017240",
    "end": "1022639"
  },
  {
    "text": "interfaces right and this is a perfect example when you",
    "start": "1022639",
    "end": "1028240"
  },
  {
    "text": "just listen on port 80 i know i'm going all over the place but i think it's all related",
    "start": "1028240",
    "end": "1033280"
  },
  {
    "text": "so if you listen on port 80 which is the default like without and was specifying a host",
    "start": "1033280",
    "end": "1039600"
  },
  {
    "text": "what will happen is it will listen to and i a pseudo ip address called 0.0.0.0",
    "start": "1039600",
    "end": "1046558"
  },
  {
    "text": "right which means listen on all interfaces and",
    "start": "1046559",
    "end": "1052799"
  },
  {
    "text": "to nitpick actually i think it listens to all ipv4 interfaces",
    "start": "1052799",
    "end": "1059679"
  },
  {
    "text": "right if you do fffffff that",
    "start": "1059679",
    "end": "1064799"
  },
  {
    "text": "that listens to uh all ipv6 i might be wrong on that one",
    "start": "1064799",
    "end": "1069919"
  },
  {
    "text": "but just just to guess right so this is all interfaces",
    "start": "1069919",
    "end": "1075039"
  },
  {
    "text": "why what what if you're building like an admin api right",
    "start": "1075039",
    "end": "1080559"
  },
  {
    "text": "and this admin api shouldn't only be accessed within",
    "start": "1080559",
    "end": "1086480"
  },
  {
    "text": "the machine itself or within a specific",
    "start": "1086480",
    "end": "1091600"
  },
  {
    "text": "interface so if that host happened to have a public ip address and you wrote your",
    "start": "1091600",
    "end": "1097520"
  },
  {
    "text": "application in a way said such that it listens to all ipads by default then you just expose your admin",
    "start": "1097520",
    "end": "1104559"
  },
  {
    "text": "api to the public that's why",
    "start": "1104559",
    "end": "1109679"
  },
  {
    "text": "that's why all all these leaks happen with elastic search leak",
    "start": "1109679",
    "end": "1115679"
  },
  {
    "text": "and mongodb leak and then postgres leak right because when you listen when",
    "start": "1115679",
    "end": "1124559"
  },
  {
    "text": "postgres listen to us when mongodb listens it listens to all ip addresses i think the default should be changed",
    "start": "1124559",
    "end": "1132000"
  },
  {
    "text": "the default should be hey you tell me which interface to listen to and i understand is that's not convenient",
    "start": "1132000",
    "end": "1139520"
  },
  {
    "text": "for programming but i think we should at some point point we",
    "start": "1139520",
    "end": "1145440"
  },
  {
    "text": "should stop simplifying everything because that's not the way to go",
    "start": "1145440",
    "end": "1150720"
  },
  {
    "text": "right just simplifying everything because eventually you're gonna get you're gonna",
    "start": "1150720",
    "end": "1156400"
  },
  {
    "text": "get bit in the ass that's what's gonna happen right yeah you simplify the api",
    "start": "1156400",
    "end": "1162080"
  },
  {
    "text": "and that's true for everything we're doing in software engineering look at all the countless libraries",
    "start": "1162080",
    "end": "1168640"
  },
  {
    "text": "all competing to make the code",
    "start": "1168640",
    "end": "1175200"
  },
  {
    "text": "shorter instead of writing oh my code is only five lines of code oh my code is three",
    "start": "1175200",
    "end": "1181039"
  },
  {
    "text": "client of code my card is one line of code in one line of code you can do all of this stuff",
    "start": "1181039",
    "end": "1187039"
  },
  {
    "text": "these things really scares me because you the do you know the developer who's gonna use this you have no clue what's",
    "start": "1187039",
    "end": "1193600"
  },
  {
    "text": "going on behind that one line of code you know and that is really creepy right hey if you know what's going on",
    "start": "1193600",
    "end": "1201200"
  },
  {
    "text": "all power to you but if you don't and you're just using an app and this is hey one line of code",
    "start": "1201200",
    "end": "1206240"
  },
  {
    "text": "and voila i built twitter",
    "start": "1206240",
    "end": "1210960"
  },
  {
    "text": "that's a whole thing by itself i don't know yeah i know i know",
    "start": "1211520",
    "end": "1216799"
  },
  {
    "start": "1215000",
    "end": "1740000"
  },
  {
    "text": "we'll come back to the point yeah so listening on port we talked about all these ipv4 thing ip interfaces",
    "start": "1216799",
    "end": "1224000"
  },
  {
    "text": "but we listened we have a listener and it's a single thread listener",
    "start": "1224000",
    "end": "1230000"
  },
  {
    "text": "so when you listen what happened is the operating system will allocate",
    "start": "1230159",
    "end": "1238720"
  },
  {
    "text": "let's call the backlog for you the queue if you will okay",
    "start": "1238720",
    "end": "1244000"
  },
  {
    "text": "now again this is just tcp let's not go through udp right now because http 1 and",
    "start": "1244000",
    "end": "1249440"
  },
  {
    "text": "hdb2 is gcp so let's just assume tcp for now if you listen",
    "start": "1249440",
    "end": "1255360"
  },
  {
    "text": "the operating system will like will allocate a q40 and you can specify the length of this cube i think it's a",
    "start": "1255360",
    "end": "1262080"
  },
  {
    "text": "thousand by default and that queue is in the kernel memory",
    "start": "1262080",
    "end": "1269919"
  },
  {
    "text": "so you're here at the user space you listened your application is running",
    "start": "1269919",
    "end": "1275280"
  },
  {
    "text": "you asked the operating system hey i'm listening to port 80 the os will create",
    "start": "1275280",
    "end": "1281039"
  },
  {
    "text": "all right it says okay i'm listening on the loopback one two seven seven zero zero one right",
    "start": "1281039",
    "end": "1287440"
  },
  {
    "text": "let's say i'm i'm practicing hygiene here and i only listen to the loopback because i don't",
    "start": "1287440",
    "end": "1292720"
  },
  {
    "text": "really need to listen to anything else so they always will clear this two cues for us something called the syn",
    "start": "1292720",
    "end": "1299919"
  },
  {
    "text": "queue and something called the accept cue right what are these well we talked about",
    "start": "1299919",
    "end": "1305520"
  },
  {
    "text": "how the tcp works right there is a sen snack and then ack which is the",
    "start": "1305520",
    "end": "1311679"
  },
  {
    "text": "three-way handshake so every time a client want to connect",
    "start": "1311679",
    "end": "1317039"
  },
  {
    "text": "to your server on that specific ip address on that specific port",
    "start": "1317039",
    "end": "1322880"
  },
  {
    "text": "which is 80 it will need to send a send",
    "start": "1322880",
    "end": "1327919"
  },
  {
    "text": "packet tcp segment which is carried in an ip packet",
    "start": "1327919",
    "end": "1335440"
  },
  {
    "text": "and is sent to that the operating system receives it through the network",
    "start": "1335440",
    "end": "1341039"
  },
  {
    "text": "interface controller right or some people like to call it card",
    "start": "1341039",
    "end": "1347360"
  },
  {
    "text": "network interface card same thing right",
    "start": "1347360",
    "end": "1352080"
  },
  {
    "text": "that network card will take that frame and then package it up into an ip",
    "start": "1352720",
    "end": "1359280"
  },
  {
    "text": "packet and then package it up to a tcp so i'm going to ship it to the to the operating system and i think it",
    "start": "1359280",
    "end": "1365919"
  },
  {
    "text": "doesn't even do that it just takes the frame hey is it is it destined to is the frame tested into this machine yes yep",
    "start": "1365919",
    "end": "1372640"
  },
  {
    "text": "just take it ship it to the os the os will take it oh it's a sin and it's listen to 80 as listen to this ipad is",
    "start": "1372640",
    "end": "1379120"
  },
  {
    "text": "yup ask me let me add this to the syn queue and it will add it to the syn queue",
    "start": "1379120",
    "end": "1386000"
  },
  {
    "text": "right the app doesn't know about it yet right now it adds that to the send queue they",
    "start": "1386000",
    "end": "1392480"
  },
  {
    "text": "always kicks in and it will say all right let it's time to start finishing the",
    "start": "1392480",
    "end": "1398559"
  },
  {
    "text": "handshake right so once it added to the syn queue the os will kick in and they say okay let me",
    "start": "1398559",
    "end": "1404799"
  },
  {
    "text": "take this sin request because someone is trying to connect to me right at this point it's",
    "start": "1404799",
    "end": "1410640"
  },
  {
    "text": "not a full-fledged connection yet it's just a request to connect if you will",
    "start": "1410640",
    "end": "1415679"
  },
  {
    "text": "so the os will take that sin and they say okay then i need to send us",
    "start": "1415679",
    "end": "1421200"
  },
  {
    "text": "a knack i agree synag will send us an act to the",
    "start": "1421200",
    "end": "1426480"
  },
  {
    "text": "to the uh to the client and then we'll move on because it needs",
    "start": "1426480",
    "end": "1431760"
  },
  {
    "text": "to receive the final act right so we'll move on so meanwhile lots of other sins",
    "start": "1431760",
    "end": "1436799"
  },
  {
    "text": "are coming connection to request and they are added to the queue yeah that's by the way house sin flooding can happen",
    "start": "1436799",
    "end": "1445120"
  },
  {
    "text": "right because because you're adding blindly adding the send",
    "start": "1445120",
    "end": "1450880"
  },
  {
    "text": "packets to this queue this queue can easily get flooded right",
    "start": "1450880",
    "end": "1456159"
  },
  {
    "text": "why very easy a client that's cinder sin and never acts",
    "start": "1456159",
    "end": "1462320"
  },
  {
    "text": "okay just send sin sin sense and all of a sudden you're flooded nobody",
    "start": "1462320",
    "end": "1468400"
  },
  {
    "text": "can else can connect why because there is a timer and the reason is every sin",
    "start": "1468400",
    "end": "1475200"
  },
  {
    "text": "that is received all right is it automatically synacked",
    "start": "1475200",
    "end": "1481520"
  },
  {
    "text": "immediately it will be try to send act the operating system will try to send us an act back and that will immediately",
    "start": "1481520",
    "end": "1487840"
  },
  {
    "text": "fill back the backlog that we talked about so you can increase the backlog",
    "start": "1487840",
    "end": "1493039"
  },
  {
    "text": "but or you can decrease the backup to prevent that sunflower has been solved with",
    "start": "1493039",
    "end": "1498159"
  },
  {
    "text": "send cookies but we don't want to go that right now it's a different story for another day",
    "start": "1498159",
    "end": "1504400"
  },
  {
    "text": "but that's how it works so let's say a legitimate client will send an act back",
    "start": "1504400",
    "end": "1511039"
  },
  {
    "text": "so completing effectively the handshake so when the opponent system receives that",
    "start": "1511039",
    "end": "1516640"
  },
  {
    "text": "final act it maps it back to an entry in the queue so oh you are from this guy",
    "start": "1516640",
    "end": "1523279"
  },
  {
    "text": "because the sin will have a source port and a source ip",
    "start": "1523279",
    "end": "1529360"
  },
  {
    "text": "and a destination port and a destination ip and those four tuples will be mapped",
    "start": "1529360",
    "end": "1535200"
  },
  {
    "text": "to that queue effectively right and that will",
    "start": "1535200",
    "end": "1540480"
  },
  {
    "text": "effectively complete the connection and the moment the connection is complete",
    "start": "1540480",
    "end": "1545520"
  },
  {
    "text": "that pop it's popped from the queue and now there is another key that we",
    "start": "1545520",
    "end": "1550960"
  },
  {
    "text": "talked about the accept queue which is basically a full-fledged connection to happen here",
    "start": "1550960",
    "end": "1556080"
  },
  {
    "text": "so hey i i guarantee this client is good he finished the connection with us again we",
    "start": "1556080",
    "end": "1561840"
  },
  {
    "text": "didn't send anything here we're just connecting we didn't even establish the tls i'm not even talking about tls right",
    "start": "1561840",
    "end": "1567840"
  },
  {
    "text": "here right it's port 80 right the next thing is to send an actual http",
    "start": "1567840",
    "end": "1573760"
  },
  {
    "text": "request right but we send that and now that connection will be transferred to",
    "start": "1573760",
    "end": "1580960"
  },
  {
    "text": "an accept queue all right what does that mean it means that it's",
    "start": "1580960",
    "end": "1588159"
  },
  {
    "text": "the operating system does did its job it's up to the application",
    "start": "1588159",
    "end": "1593520"
  },
  {
    "text": "which is moi remember i listened listening to an app doesn't mean you",
    "start": "1593520",
    "end": "1599120"
  },
  {
    "text": "have connections right you as the application which is the backend application in this",
    "start": "1599120",
    "end": "1605440"
  },
  {
    "text": "particular case have to accept connections actively accept connections so you have",
    "start": "1605440",
    "end": "1613279"
  },
  {
    "text": "to technically ask the you the operating system do i have a connection do you have a",
    "start": "1613279",
    "end": "1618880"
  },
  {
    "text": "connection you have a connection do i have a connection do you have a connection that's how it works today",
    "start": "1618880",
    "end": "1625440"
  },
  {
    "text": "right and you can do this by calling something called accept and you might say i never did this with",
    "start": "1625440",
    "end": "1632000"
  },
  {
    "text": "not js well node.js does that for you behind the scenes",
    "start": "1632000",
    "end": "1637039"
  },
  {
    "text": "there is there is an infinite loop that just accepts what is this infinite loop we might say",
    "start": "1637039",
    "end": "1644159"
  },
  {
    "text": "it is in your thread which is again we said it's a single",
    "start": "1644159",
    "end": "1649200"
  },
  {
    "text": "thread app so we have one listener it it it it has a loop that and that's",
    "start": "1649200",
    "end": "1655679"
  },
  {
    "text": "accepting all the connection and the way it works if it cause accept",
    "start": "1655679",
    "end": "1660799"
  },
  {
    "text": "if the the the the function call except will go to the operating system say hey i want to",
    "start": "1660799",
    "end": "1666240"
  },
  {
    "text": "accept the connection so sure you you have one right here in the accept queue take it",
    "start": "1666240",
    "end": "1672320"
  },
  {
    "text": "and take it really means that it was going to be popped from the accept queue and a file descriptor a unique integer",
    "start": "1672320",
    "end": "1679760"
  },
  {
    "text": "value will be returned to that thread that called accept whoever called",
    "start": "1679760",
    "end": "1685279"
  },
  {
    "text": "it will get that file descriptor and that file descriptor will represent your connection",
    "start": "1685279",
    "end": "1692080"
  },
  {
    "text": "and that is one client one connection one user connected",
    "start": "1692080",
    "end": "1698080"
  },
  {
    "text": "to you and then you can exchange information using that file",
    "start": "1698080",
    "end": "1703760"
  },
  {
    "text": "descriptor so the thread can write to the file descriptor and i can read from the file descriptor",
    "start": "1703760",
    "end": "1708960"
  },
  {
    "text": "and that's its own story reading and writing there is asynchronously there is",
    "start": "1708960",
    "end": "1715760"
  },
  {
    "text": "synchronous blocking reads and there is this whole new thing that",
    "start": "1715760",
    "end": "1721360"
  },
  {
    "text": "linux built called iou ring which is a fabulous design for asynchronous",
    "start": "1721360",
    "end": "1727840"
  },
  {
    "text": "reads and rides for everything files network calls pretty much everything right so",
    "start": "1727840",
    "end": "1735120"
  },
  {
    "text": "i owe you ring that's what it's called but let's let's not get into a lot of details here let's keep this objective",
    "start": "1735120",
    "end": "1742240"
  },
  {
    "start": "1740000",
    "end": "2010000"
  },
  {
    "text": "and yeah sure what's the problem i have a single thread",
    "start": "1742240",
    "end": "1747840"
  },
  {
    "text": "that's single thread which is not js contrary to the belief not js is a single threaded app yeah it",
    "start": "1747840",
    "end": "1753760"
  },
  {
    "text": "has multiple threading apps but has nothing to do with networking right the networking is still a single threaded",
    "start": "1753760",
    "end": "1761200"
  },
  {
    "text": "experience in node.js the only time node.js uses a multi-threading and it's",
    "start": "1761200",
    "end": "1766480"
  },
  {
    "text": "documented well documented in node.js is when it does dns entries and",
    "start": "1766480",
    "end": "1773440"
  },
  {
    "text": "in specific libraries where it uses multiple",
    "start": "1773440",
    "end": "1778799"
  },
  {
    "text": "but dns definitely right and i suppose when when it uses",
    "start": "1778799",
    "end": "1783840"
  },
  {
    "text": "asynchronous file system reads i talked about through node.js threading uh check out the video",
    "start": "1783840",
    "end": "1789840"
  },
  {
    "text": "there just type node.js studying hussein and you should find it",
    "start": "1789840",
    "end": "1795679"
  },
  {
    "text": "but yeah but network also in girl thread so that means i have a loop that accepts",
    "start": "1795679",
    "end": "1802720"
  },
  {
    "text": "connection and i have a loop that actually processes",
    "start": "1802720",
    "end": "1809279"
  },
  {
    "text": "my request so that's actually pretty cool so",
    "start": "1809279",
    "end": "1816320"
  },
  {
    "text": "that connection that thread will just accept the connections so i have a",
    "start": "1816320",
    "end": "1821760"
  },
  {
    "text": "connection file descriptor what if what if another user came in another connection request well i'm just going",
    "start": "1821760",
    "end": "1827440"
  },
  {
    "text": "to accept it again the thread if it's free it's going to accept the connection and now i have another file descriptor",
    "start": "1827440",
    "end": "1832880"
  },
  {
    "text": "so now it's your responsibility to add it into an array so to speak right",
    "start": "1832880",
    "end": "1838000"
  },
  {
    "text": "because if it's an http request you you you can do that right you there will be an event",
    "start": "1838000",
    "end": "1844320"
  },
  {
    "text": "that will be called for you and they say hey there is an event an open i think connection open is",
    "start": "1844320",
    "end": "1850559"
  },
  {
    "text": "called right in http library itself and that will be delivering you an actual",
    "start": "1850559",
    "end": "1855840"
  },
  {
    "text": "connection object even fancier than that right and the connection object will have methods like write and read and this is",
    "start": "1855840",
    "end": "1862720"
  },
  {
    "text": "how websockets work identically right the same thing",
    "start": "1862720",
    "end": "1867760"
  },
  {
    "text": "and you'll build basically an array of connection in your thread in your process and uh you can talk to any of",
    "start": "1867760",
    "end": "1875679"
  },
  {
    "text": "them right and every connection object will have an event associated with it so",
    "start": "1875679",
    "end": "1882080"
  },
  {
    "text": "and what is happening is your app is constantly asking hey did i get a read",
    "start": "1882080",
    "end": "1887440"
  },
  {
    "text": "here did i get a read here did i get a read here did i get it right here all of this stuff is really going to be",
    "start": "1887440",
    "end": "1892880"
  },
  {
    "text": "managed by the node.js http library and says okay oh some something just came in",
    "start": "1892880",
    "end": "1898240"
  },
  {
    "text": "from connection number one oh something came just coming from connection number 103",
    "start": "1898240",
    "end": "1904480"
  },
  {
    "text": "and so on right so we have one thread what's the problem of this it easily",
    "start": "1904480",
    "end": "1909840"
  },
  {
    "text": "becomes the bottleneck right because if one of those connections sends you an http request",
    "start": "1909840",
    "end": "1915679"
  },
  {
    "text": "and at that http request you're doing a blocking call",
    "start": "1915679",
    "end": "1922240"
  },
  {
    "text": "that is computing a hash or doing something so expensive",
    "start": "1922240",
    "end": "1929120"
  },
  {
    "text": "and let's assume you don't have threading because if you do like a specific krepto",
    "start": "1929120",
    "end": "1934480"
  },
  {
    "text": "operation node.js will use threading if you enabled it but let's assume there is none right",
    "start": "1934480",
    "end": "1940399"
  },
  {
    "text": "so if you're doing that compute that expensive let's say it's a loop while loop and while loop one through",
    "start": "1940399",
    "end": "1948399"
  },
  {
    "text": "you're done basically why because now",
    "start": "1948399",
    "end": "1954080"
  },
  {
    "text": "it depends on what node.js will do i keep talking about node.js as an example because it's a very popular backend",
    "start": "1954159",
    "end": "1959360"
  },
  {
    "text": "right but if you build your own c application you have to do all this stuff yourself",
    "start": "1959360",
    "end": "1965200"
  },
  {
    "text": "right so now you're blocked and that becomes quickly becomes the bottleneck",
    "start": "1965200",
    "end": "1972480"
  },
  {
    "text": "the listening authority cannot do work technically you can of course you can if",
    "start": "1972480",
    "end": "1978159"
  },
  {
    "text": "you know the limit but at the moment you do work in the listeners in the same thread then new",
    "start": "1978159",
    "end": "1984960"
  },
  {
    "text": "connections cannot be accepted or they will be delayed because the",
    "start": "1984960",
    "end": "1990799"
  },
  {
    "text": "moment that listener thread the worker thread will have a time to breathe",
    "start": "1990799",
    "end": "1996320"
  },
  {
    "text": "finally i'm done with this test oh i'm go i'll go now go accept a connection oh i'll go execute a read right here oh let",
    "start": "1996320",
    "end": "2003519"
  },
  {
    "text": "me go the user asked me to write something up so it's just busy doing stuff",
    "start": "2003519",
    "end": "2009200"
  },
  {
    "text": "you will be facing blocking at some point right so",
    "start": "2009200",
    "end": "2016158"
  },
  {
    "start": "2010000",
    "end": "2340000"
  },
  {
    "text": "now what do we do like one use case right",
    "start": "2016559",
    "end": "2022559"
  },
  {
    "text": "is uh what memcache d does and we digested a crash course architecture",
    "start": "2022559",
    "end": "2028480"
  },
  {
    "text": "crash course on memcache d what memcached does is it's exactly identical the same thing right it has one listener",
    "start": "2028480",
    "end": "2035120"
  },
  {
    "text": "thread but that listener thread only accepts connection the moment it accepts a",
    "start": "2035120",
    "end": "2040880"
  },
  {
    "text": "connection it spins up a new thread and since that thread that thread that",
    "start": "2040880",
    "end": "2047360"
  },
  {
    "text": "connection file descriptor says hey thread take it that's yours now",
    "start": "2047360",
    "end": "2052560"
  },
  {
    "text": "i'm gonna move on now you have the file descriptor you do a thing if there is a read",
    "start": "2052560",
    "end": "2058638"
  },
  {
    "text": "that comes into that connection it's your responsibility if you want to write right to that i'm not involved anymore",
    "start": "2058639",
    "end": "2063679"
  },
  {
    "text": "as a main listener thread my job has done i just accepted the connection i handed you the",
    "start": "2063679",
    "end": "2069200"
  },
  {
    "text": "connection so the connection array if you will it's not in the listener",
    "start": "2069200",
    "end": "2074720"
  },
  {
    "text": "main thread it's in the somewhere else keep shaking the table right it's in in the thread so another",
    "start": "2074720",
    "end": "2081839"
  },
  {
    "text": "connection came spinnable another connection and there is a limit to the threads i",
    "start": "2081839",
    "end": "2086960"
  },
  {
    "text": "don't know what is the limit i think it's a thousand right because it will go crazy after a while right that's why",
    "start": "2086960",
    "end": "2093919"
  },
  {
    "text": "memcached say hey don't go above a thousand per instance goes there i don't know",
    "start": "2093919",
    "end": "2098960"
  },
  {
    "text": "what will happen right it's fascinating once you know what's happening it's just",
    "start": "2098960",
    "end": "2105520"
  },
  {
    "text": "so cool to understand really hey guys hussein from post editing right",
    "start": "2105520",
    "end": "2110880"
  },
  {
    "text": "now and uh noticed that uh it might be this is slightly incorrect reading",
    "start": "2110880",
    "end": "2116720"
  },
  {
    "text": "through the memcache d so i just wanted to clarify something it sounds like the default number of threads in memcache d",
    "start": "2116720",
    "end": "2124160"
  },
  {
    "text": "is four you can up that but they do not recommend that right but",
    "start": "2124160",
    "end": "2130400"
  },
  {
    "text": "every connection that comes in right will spin up a new thread but up until the maximum number thread",
    "start": "2130400",
    "end": "2137520"
  },
  {
    "text": "allowed if the default is four those four will share these new connections so",
    "start": "2137520",
    "end": "2142560"
  },
  {
    "text": "every connection that comes in will be given to one of the available threads so",
    "start": "2142560",
    "end": "2149119"
  },
  {
    "text": "it's not one thread pair connection it's one thread",
    "start": "2149119",
    "end": "2154400"
  },
  {
    "text": "multiple connections per thread otherwise bear as per the dock i'm going to share it below as well uh it's going",
    "start": "2154400",
    "end": "2161599"
  },
  {
    "text": "to be a disaster if there will there will be like a thousand can actually have a thousand thread so one thread",
    "start": "2161599",
    "end": "2168000"
  },
  {
    "text": "multiple connection pathways just a slight clarification there so just to be uh objective a little bit here back to",
    "start": "2168000",
    "end": "2174560"
  },
  {
    "text": "the video yeah so that's one way so the work the compute",
    "start": "2174560",
    "end": "2181040"
  },
  {
    "text": "is done in the threads right that's that's my point with the multi-threading",
    "start": "2181040",
    "end": "2186160"
  },
  {
    "text": "so that's powerful so now i accepted the connection with the multi-thread right or when with",
    "start": "2186160",
    "end": "2192720"
  },
  {
    "text": "the listener thread but the connections are being worked out in each and on thread so a",
    "start": "2192720",
    "end": "2198560"
  },
  {
    "text": "read that is happening is a responsibility of the thread that can",
    "start": "2198560",
    "end": "2204480"
  },
  {
    "text": "should continue to pull for read are you is there a read is there a read is there a read is there it",
    "start": "2204480",
    "end": "2211040"
  },
  {
    "text": "right or a blocking grid or a iou ring read depends where we whatever you use",
    "start": "2211040",
    "end": "2217119"
  },
  {
    "text": "the threads are doing this job now so that's a model that's one way to do it what so we talked about",
    "start": "2217119",
    "end": "2223359"
  },
  {
    "text": "one way have one thread do do everything ex accept the connection and do the work",
    "start": "2223359",
    "end": "2229200"
  },
  {
    "text": "doesn't scale well right another way memcache d",
    "start": "2229200",
    "end": "2234560"
  },
  {
    "text": "have one thread accept all the connection but send off these connections spin up a new thread for each connection",
    "start": "2234560",
    "end": "2241119"
  },
  {
    "text": "and let the connection do the thread what's the problem with that design the problem with that design is",
    "start": "2241119",
    "end": "2248079"
  },
  {
    "text": "uh one connection",
    "start": "2248079",
    "end": "2253520"
  },
  {
    "text": "not all connections are equal what does that mean a client that connected to my application might",
    "start": "2253839",
    "end": "2260880"
  },
  {
    "text": "be greedier than other clients right one client might send",
    "start": "2260880",
    "end": "2267280"
  },
  {
    "text": "very heavy requests and another kind might send lightweight request right",
    "start": "2267280",
    "end": "2272880"
  },
  {
    "text": "another request by just just flood with me with requests that are so tiny so they are not equal what does that",
    "start": "2272880",
    "end": "2279839"
  },
  {
    "text": "mean it means that you'll end up with a thread that is so overloaded and other",
    "start": "2279839",
    "end": "2285920"
  },
  {
    "text": "threads that has connections have connections but they're relaxed they're just",
    "start": "2285920",
    "end": "2291200"
  },
  {
    "text": "chilling sitting there chilling doing nothing or doing very minimum work",
    "start": "2291200",
    "end": "2296240"
  },
  {
    "text": "so you wasted memory on spinning all these threads but those threads ain't doing much okay",
    "start": "2296240",
    "end": "2304240"
  },
  {
    "text": "why why is this the case because that's part of the problem on multi-threading we talked about it initially right",
    "start": "2304240",
    "end": "2310400"
  },
  {
    "text": "multi-threading is just there is no knowledge knowledge",
    "start": "2310400",
    "end": "2315599"
  },
  {
    "text": "there is no knowledge it doesn't exist the knowledge doesn't exist between these threads so you'll",
    "start": "2318079",
    "end": "2324560"
  },
  {
    "text": "end up with unfairness and this word that we live in is very unfair my friends",
    "start": "2324560",
    "end": "2331119"
  },
  {
    "text": "it's very very unfair so one thread might do 80 of the work",
    "start": "2331119",
    "end": "2336240"
  },
  {
    "text": "while the other threads are sitting by the water cooler and drinking and chatting and",
    "start": "2336240",
    "end": "2342000"
  },
  {
    "start": "2340000",
    "end": "2530000"
  },
  {
    "text": "just having fun you know so",
    "start": "2342000",
    "end": "2347200"
  },
  {
    "text": "another model is as follows",
    "start": "2347200",
    "end": "2352240"
  },
  {
    "text": "what if we do this what if",
    "start": "2352240",
    "end": "2356880"
  },
  {
    "text": "let the so that's the third one now",
    "start": "2357280",
    "end": "2362880"
  },
  {
    "text": "let there be one listener thread let that be multi-threading but here's how we're going to do it",
    "start": "2363520",
    "end": "2369839"
  },
  {
    "text": "that thread is responsible to accept the connection so we have the connections but keep the connection arrays in the",
    "start": "2369839",
    "end": "2376960"
  },
  {
    "text": "main thread um isn't that just the first one nope wait a second let's do that let's do",
    "start": "2376960",
    "end": "2383200"
  },
  {
    "text": "that what if since since we're trying to solve this load balancing problem right",
    "start": "2383200",
    "end": "2390240"
  },
  {
    "text": "what if we do this what if",
    "start": "2390240",
    "end": "2395440"
  },
  {
    "text": "we accept the connections we have this connection array in the thread all the file descriptors",
    "start": "2395440",
    "end": "2402640"
  },
  {
    "text": "but we also read from all the connections",
    "start": "2402640",
    "end": "2408960"
  },
  {
    "text": "but we do not process so we read the requests",
    "start": "2408960",
    "end": "2414480"
  },
  {
    "text": "the little the listener thread is just re accepting connections saving this for the sculptor and also reading from all",
    "start": "2414480",
    "end": "2421839"
  },
  {
    "text": "these connections so it's reading request but the request",
    "start": "2421839",
    "end": "2427520"
  },
  {
    "text": "oh you want git slash this is get slash api this is good blah this is a good structure",
    "start": "2427520",
    "end": "2433040"
  },
  {
    "text": "and now that it has the vision of requests what it does is hey",
    "start": "2433040",
    "end": "2440240"
  },
  {
    "text": "okay i have a request i think this is going to be expensive go there thread hey there's another request you're there",
    "start": "2440240",
    "end": "2446800"
  },
  {
    "text": "there's another all right and we start distributing requests to threads not connections the the threads",
    "start": "2446800",
    "end": "2453839"
  },
  {
    "text": "have no clue about connections here so you just send requests send requests hey process this process",
    "start": "2453839",
    "end": "2460560"
  },
  {
    "text": "this process so now we just split it the problem",
    "start": "2460560",
    "end": "2465680"
  },
  {
    "text": "that's a beautiful design i like it a lot and i like it a lot",
    "start": "2465680",
    "end": "2471200"
  },
  {
    "text": "now we kind of distributed the lot because now if there is a thread that is",
    "start": "2471200",
    "end": "2476319"
  },
  {
    "text": "doing a lot of work the main thread knows about it hey this thing is busy it knows it's busy because hey it's talking",
    "start": "2476319",
    "end": "2483440"
  },
  {
    "text": "to it you can argue that this is part of the problem we're talking to it there is exchange",
    "start": "2483440",
    "end": "2490000"
  },
  {
    "text": "but hey you got to pay a price all right nothing is free but yeah just talking to them talk talk",
    "start": "2490000",
    "end": "2496240"
  },
  {
    "text": "talk talk and then send requests right and hey you're busy hey he's a threat that is not doing anything hey get back",
    "start": "2496240",
    "end": "2503359"
  },
  {
    "text": "to work here's some work do some work stop sitting",
    "start": "2503359",
    "end": "2508560"
  },
  {
    "text": "next to the water cooler do some work okay",
    "start": "2508560",
    "end": "2514880"
  },
  {
    "text": "no more sitting next to the water cooler okay so",
    "start": "2514880",
    "end": "2520400"
  },
  {
    "text": "load dancing assault that's what's that's an interesting solution that's all i like it a lot i like a lot",
    "start": "2520400",
    "end": "2526240"
  },
  {
    "text": "i forgot what app uses that design though here's another one uh",
    "start": "2526240",
    "end": "2532480"
  },
  {
    "start": "2530000",
    "end": "2720000"
  },
  {
    "text": "go back to the original model right",
    "start": "2532480",
    "end": "2539119"
  },
  {
    "text": "now let's let's let's do one more so one two three fourth a fourth one",
    "start": "2539839",
    "end": "2546160"
  },
  {
    "text": "we always talk about one listener thread why do we have only one listener process",
    "start": "2546160",
    "end": "2551760"
  },
  {
    "text": "why don't we have multiple processes listen to the same port haha we can't have you even seen this error",
    "start": "2551760",
    "end": "2558160"
  },
  {
    "text": "before you listen to port 80 and you try to listen to port 80 again another app says hey port is already",
    "start": "2558160",
    "end": "2564480"
  },
  {
    "text": "listening can't do that right that was by design you cannot have",
    "start": "2564480",
    "end": "2569599"
  },
  {
    "text": "two processors listed on the same port but if you know what you're doing you",
    "start": "2569599",
    "end": "2574800"
  },
  {
    "text": "can turn that that switch and let the operating system know",
    "start": "2574800",
    "end": "2580720"
  },
  {
    "text": "it's cool opening system i own these two puppies",
    "start": "2580720",
    "end": "2585760"
  },
  {
    "text": "so you can spin up two puppies two threads listening on the same port",
    "start": "2585760",
    "end": "2593280"
  },
  {
    "text": "by turning on an option called so",
    "start": "2593280",
    "end": "2598560"
  },
  {
    "text": "reuse port socket option underscore reuse port it's like hey reuse port useful so now you have multiple",
    "start": "2598560",
    "end": "2607440"
  },
  {
    "text": "reds listeners listening on the same port so now multiple threads",
    "start": "2607440",
    "end": "2613760"
  },
  {
    "text": "you can have 10 threads listening on the same port so the operating system",
    "start": "2613760",
    "end": "2620800"
  },
  {
    "text": "and all of them are calling accept are looping so now the throughput of accepting",
    "start": "2620800",
    "end": "2626400"
  },
  {
    "text": "connection are way higher you don't have a single thread accepting the connection because",
    "start": "2626400",
    "end": "2632960"
  },
  {
    "text": "if you have a client a flood of users connected at the same time you're going to face trouble accepting connections",
    "start": "2632960",
    "end": "2639920"
  },
  {
    "text": "right talked about that right the accept queue might be full and the app is not fast enough except in",
    "start": "2639920",
    "end": "2646079"
  },
  {
    "text": "this connection because it's just a single thread so you do this just scatter shot",
    "start": "2646079",
    "end": "2652079"
  },
  {
    "text": "all of the threads threads are less unorthodox all of them are listening",
    "start": "2652079",
    "end": "2657440"
  },
  {
    "text": "all of them are listening at the same time and all of them are accepting connections so it's an in-parallel",
    "start": "2657440",
    "end": "2662880"
  },
  {
    "text": "connection acceptance so each of you whatever connection you accept it's your loot",
    "start": "2662880",
    "end": "2668880"
  },
  {
    "text": "you take care of it it's yours you process it you do whatever you want",
    "start": "2668880",
    "end": "2673920"
  },
  {
    "text": "proxies like invoice support that proxies like ha proxy supports that i support nginx even supports that",
    "start": "2673920",
    "end": "2680319"
  },
  {
    "text": "right because it's a it's a busy you do this when you have like a very busy back-end you accept like a api gateway a",
    "start": "2680319",
    "end": "2688480"
  },
  {
    "text": "load balancer like a layer 4 reverse proxy when you do that even layer 7",
    "start": "2688480",
    "end": "2694480"
  },
  {
    "text": "doesn't matter right you right this gateway is going to have ton",
    "start": "2694480",
    "end": "2701359"
  },
  {
    "text": "of connections so you would need to accept as fast as possible connections",
    "start": "2701359",
    "end": "2706560"
  },
  {
    "text": "either deliver them to another thread you can do that model right instead of you but then you're going to have a",
    "start": "2706560",
    "end": "2712480"
  },
  {
    "text": "thread explosion so comes to the fourth this is fourth one",
    "start": "2712480",
    "end": "2718240"
  },
  {
    "text": "fifth one now which is kind of i i like",
    "start": "2718240",
    "end": "2723280"
  },
  {
    "start": "2720000",
    "end": "2970000"
  },
  {
    "text": "back to the basics back to the original model single beautiful thread it listens and it works",
    "start": "2723280",
    "end": "2730160"
  },
  {
    "text": "as i said you're not using your power of multi-core",
    "start": "2730160",
    "end": "2735280"
  },
  {
    "text": "sure i can though what if i",
    "start": "2735280",
    "end": "2741280"
  },
  {
    "text": "i don't want to listen in the same port single threaded app so simple that's my",
    "start": "2741280",
    "end": "2746319"
  },
  {
    "text": "job that's my app so my app becomes so elegant because it's a single thread",
    "start": "2746319",
    "end": "2751359"
  },
  {
    "text": "doesn't have this mumbo jumbo of threads and connections and loop and coordination no not that",
    "start": "2751359",
    "end": "2758240"
  },
  {
    "text": "a single thread you might say jose single core you're not going to take advantage of your",
    "start": "2758240",
    "end": "2763520"
  },
  {
    "text": "16 core aws instance here i'll let you know",
    "start": "2763520",
    "end": "2769839"
  },
  {
    "text": "i have this beautiful thing and i use this thing that's called docker you know put in my app in a container and i spin",
    "start": "2769839",
    "end": "2776640"
  },
  {
    "text": "up a hundred containers of my application all of them are different ports sure and",
    "start": "2776640",
    "end": "2783599"
  },
  {
    "text": "then put that and then let them do the work right",
    "start": "2783599",
    "end": "2788960"
  },
  {
    "text": "in this case can i have two containers listed on the same port",
    "start": "2788960",
    "end": "2794319"
  },
  {
    "text": "i wish i can if it's not if it's possible then this is really good let the operating system",
    "start": "2794319",
    "end": "2799920"
  },
  {
    "text": "handle that i suppose you can i never tried it right but that'll be really cool but",
    "start": "2799920",
    "end": "2806319"
  },
  {
    "text": "even if not then i can just do an ipv table",
    "start": "2806319",
    "end": "2811520"
  },
  {
    "text": "rule that just say hey if someone connect to port 443 or 80",
    "start": "2811520",
    "end": "2817280"
  },
  {
    "text": "load balance them through these guys right and you're going to have an a process running on port 81 82 83",
    "start": "2817280",
    "end": "2825920"
  },
  {
    "text": "just give an example so now your app is didn't change but now you've just taken",
    "start": "2825920",
    "end": "2832480"
  },
  {
    "text": "advantage of a single threaded app but literally multiplicated",
    "start": "2832480",
    "end": "2839920"
  },
  {
    "text": "right so you are taking advantage of your single machine cores",
    "start": "2839920",
    "end": "2845599"
  },
  {
    "text": "and at the same time you kept your application simple i like this design i like it a lot hey you might say one one",
    "start": "2845599",
    "end": "2852559"
  },
  {
    "text": "app might receive more load than the other then you might add another logic",
    "start": "2852559",
    "end": "2857839"
  },
  {
    "text": "on top of it like a a layer 4 proxy that controls that maybe",
    "start": "2857839",
    "end": "2864000"
  },
  {
    "text": "you can do that then of course it becomes kind of a single point of failure make it simple make it a nat",
    "start": "2864000",
    "end": "2871119"
  },
  {
    "text": "level layer for proxy i don't know i just i just like that fifth model it's just it seems like it's",
    "start": "2871119",
    "end": "2878000"
  },
  {
    "text": "so elegant and simple i i of course nothing is free i'm pretty sure it has its own problem but simplicity like",
    "start": "2878000",
    "end": "2884079"
  },
  {
    "text": "going back to the basics okay my app having my app being simple is is",
    "start": "2884079",
    "end": "2890400"
  },
  {
    "text": "a game changer like given that you have to of course write your app in a way that is",
    "start": "2890400",
    "end": "2896079"
  },
  {
    "text": "statelesslyishway yeah certain isn't it i throw an arabic word there and when i'm tired",
    "start": "2896079",
    "end": "2903520"
  },
  {
    "text": "specifically after a long day like today right i'll uh my english juice will",
    "start": "2903520",
    "end": "2911280"
  },
  {
    "text": "deplete and i'll start throwing arabic words because back to my native language i i work always and by the time i it's 6",
    "start": "2911280",
    "end": "2918880"
  },
  {
    "text": "p.m i'll start just uh i can't talk english anymore",
    "start": "2918880",
    "end": "2924559"
  },
  {
    "text": "i don't this is just me all right this is kind of indication that i have to in this video all right",
    "start": "2924559",
    "end": "2930480"
  },
  {
    "text": "guys i hope you enjoyed this uh video i i like this stuff i like this a lot uh i'm learning a lot",
    "start": "2930480",
    "end": "2935760"
  },
  {
    "text": "and uh if you enjoyed this kind of content consider becoming a member this channel supports the show",
    "start": "2935760",
    "end": "2941520"
  },
  {
    "text": "uh check us out on spotify apple podcast would you if you prefer to listen to this",
    "start": "2941520",
    "end": "2947119"
  },
  {
    "text": "and uh check out my courses uh this is this is kind of at the same realm",
    "start": "2947119",
    "end": "2952160"
  },
  {
    "text": "network.hsnasa.com for discount coupon learn the fundamentals of network engineering",
    "start": "2952160",
    "end": "2958240"
  },
  {
    "text": "because any anything that comes on top can be derived to its basic first",
    "start": "2958240",
    "end": "2963359"
  },
  {
    "text": "principles hope you enjoyed this episode i'm going to see you in the next one you guys stay awesome goodbye",
    "start": "2963359",
    "end": "2970119"
  }
]