[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "I want to spend some time to talk about osaris architecture with a extreme focus",
    "start": "40",
    "end": "6480"
  },
  {
    "text": "on the different processes that uh pois spins up to take",
    "start": "6480",
    "end": "13799"
  },
  {
    "text": "care of all the auxiliary and maintenance and",
    "start": "13799",
    "end": "19279"
  },
  {
    "text": "IO in uh its software it's pretty interesting once you can understand how",
    "start": "19279",
    "end": "25800"
  },
  {
    "text": "postris works it we're going to shed the light on all of this um all of the",
    "start": "25800",
    "end": "31519"
  },
  {
    "text": "pieces and the components of porris it's going to be an interesting episode let's get into it so what we're seeing here is",
    "start": "31519",
    "end": "37440"
  },
  {
    "text": "an architecture diagram that I drew and uh I I wrote up a a medium article detailing this you know all the pieces",
    "start": "37440",
    "end": "45559"
  },
  {
    "text": "of pois uh and uh and explaining",
    "start": "45559",
    "end": "50800"
  },
  {
    "text": "them and how they are connected to each other and what is the what is the design",
    "start": "50800",
    "end": "57280"
  },
  {
    "text": "goals of and why pogress picks picks certain architecture",
    "start": "57280",
    "end": "64280"
  },
  {
    "text": "choices versus others it's very interesting article I'm going to reference a below for for you if you want to read it but in this I'm going to",
    "start": "64280",
    "end": "71200"
  },
  {
    "text": "go over a summary and uh summarizing each pieces in this video/ podcast so",
    "start": "71200",
    "end": "77479"
  },
  {
    "text": "maybe we can start with kind of an overview of what are we going to discuss then we can pick Pieces by pieces so",
    "start": "77479",
    "end": "85200"
  },
  {
    "text": "what we're looking at for people listening in the podcast we're looking at a diagram with all the pieces that I",
    "start": "85200",
    "end": "90920"
  },
  {
    "start": "90000",
    "end": "210000"
  },
  {
    "text": "can think of of in post there might be others that I have missed or uh maybe",
    "start": "90920",
    "end": "97360"
  },
  {
    "text": "omitted because they are not relevant for this discussion but the ma main",
    "start": "97360",
    "end": "102680"
  },
  {
    "text": "process is called the postmaster process and that's the listener and if you if",
    "start": "102680",
    "end": "107799"
  },
  {
    "text": "you took my courses either the network or the backend course you know that to listen in a for an interface on a port",
    "start": "107799",
    "end": "117479"
  },
  {
    "text": "you have to specify the address family like is it ipv4 IPv6 and which one",
    "start": "117479",
    "end": "123200"
  },
  {
    "text": "exactly am I listening on the Wi-Fi uh interface am I listening to the",
    "start": "123200",
    "end": "129360"
  },
  {
    "text": "ethernet am I listening to the loopback am I listening to the uh link local right what am I listening at and uh",
    "start": "129360",
    "end": "138040"
  },
  {
    "text": "basically sometimes most software just listen to everything it's kind of kind of a bad",
    "start": "138040",
    "end": "143800"
  },
  {
    "text": "idea and I'm really sad that that's actually the default right but uh it is what it is just I guess for Simplicity",
    "start": "143800",
    "end": "151160"
  },
  {
    "text": "reasons but yeah so we have the listener right Port pois uses Port 5432 as a",
    "start": "151160",
    "end": "158519"
  },
  {
    "text": "default and then clients connect to the database by specifying the Target Port as 543 and the address right whether",
    "start": "158519",
    "end": "167120"
  },
  {
    "text": "that's ipv4 or IPv6 then there's backend processes we're going to talk about what that means right",
    "start": "167120",
    "end": "173760"
  },
  {
    "text": "very you're going to see the word backend use a lot in posters pretty much",
    "start": "173760",
    "end": "179680"
  },
  {
    "text": "if everything is a back end in Pro in postris right any process they call a",
    "start": "179680",
    "end": "184720"
  },
  {
    "text": "back end right and so it gets really confusing when you read the dog then there's shared memory right what is that",
    "start": "184720",
    "end": "190640"
  },
  {
    "text": "the buffer the shared buffers then there's the background workers and there is like a list of auxiliary processes",
    "start": "190640",
    "end": "198519"
  },
  {
    "text": "you know a list of standby processes that are used for maintenance and things",
    "start": "198519",
    "end": "204319"
  },
  {
    "text": "like that we're going to go through them the Auto vocum Workers the wall senders yeah that's B summary we're going to go",
    "start": "204319",
    "end": "210959"
  },
  {
    "start": "210000",
    "end": "330000"
  },
  {
    "text": "through each one of these let's go ahead so we start with the first process and",
    "start": "210959",
    "end": "216760"
  },
  {
    "text": "this is kind of a lie cuz this is technically not the first process that runs there's another process that we're",
    "start": "216760",
    "end": "222640"
  },
  {
    "text": "going to talk about at the end of the video that runs first but less for sake",
    "start": "222640",
    "end": "229360"
  },
  {
    "text": "of Simplicity we call this the postmaster process is the one that runs first and is the it is basically the one",
    "start": "229360",
    "end": "236519"
  },
  {
    "text": "that is the parent process for pretty much everything in po postgress you see",
    "start": "236519",
    "end": "242920"
  },
  {
    "text": "postgress is a suppose we have to Define what postgress really is Right POS is a is a",
    "start": "242920",
    "end": "249599"
  },
  {
    "text": "relational database system that is based on uh the idea",
    "start": "249599",
    "end": "257919"
  },
  {
    "text": "of having multiversion concurrency control by doing an append model where",
    "start": "257919",
    "end": "265320"
  },
  {
    "text": "everything is an aend and everything that you do in post creates a new Tuple",
    "start": "265320",
    "end": "272000"
  },
  {
    "text": "as they call it so you can have raow one and then you update it we don't update",
    "start": "272000",
    "end": "278199"
  },
  {
    "text": "in place right we create a new one with a version right we we assign it a new",
    "start": "278199",
    "end": "285680"
  },
  {
    "text": "triple ID but it is technically the same logical row so you have one logical row",
    "start": "285680",
    "end": "292320"
  },
  {
    "text": "and that logical row can have 10 different instances of tuples right",
    "start": "292320",
    "end": "298000"
  },
  {
    "text": "physical tuples and being the last one being the active one effectively right",
    "start": "298000",
    "end": "303240"
  },
  {
    "text": "assume it's committed and that's is an interesting design choice that you don't see in other databases that's what makes",
    "start": "303240",
    "end": "308280"
  },
  {
    "text": "bcus unique uh there is advantages and disadvantages for that choice of uh the architectural design but uh it it's",
    "start": "308280",
    "end": "316880"
  },
  {
    "text": "interesting I talked about that in in my differences uh between my sequence pul Chris video",
    "start": "316880",
    "end": "324400"
  },
  {
    "text": "sometimes this design Choice wins sometimes it loses right and and another key aspect in postris is is that it is a",
    "start": "324400",
    "end": "331600"
  },
  {
    "start": "330000",
    "end": "460000"
  },
  {
    "text": "process based not threads right everything is a processes in postris and that's that's another interesting choice",
    "start": "331600",
    "end": "338880"
  },
  {
    "text": "uh the reason for going with process and threads in my like research and",
    "start": "338880",
    "end": "346360"
  },
  {
    "text": "understanding is basically stability right threads back in the days were not",
    "start": "346360",
    "end": "352360"
  },
  {
    "text": "stable right processes were more stable but definitely these days in 2023",
    "start": "352360",
    "end": "358520"
  },
  {
    "text": "threads technically is lighter weight and definitely stable right we don't",
    "start": "358520",
    "end": "365840"
  },
  {
    "text": "have that problem anymore so processes become kind of a a bloat if you think about it because",
    "start": "365840",
    "end": "373599"
  },
  {
    "text": "it's a it's a harder uh there is so much overhead with",
    "start": "373599",
    "end": "379560"
  },
  {
    "text": "spinning up a process compared to spinning up thread right there's the virtual memory uh virtual memory address",
    "start": "379560",
    "end": "388280"
  },
  {
    "text": "space every process will have its own which means every process will have its own page table mapping so that means",
    "start": "388280",
    "end": "396520"
  },
  {
    "text": "also we're going to thrash a lot in the CPU tiny area which is called the tlb",
    "start": "396520",
    "end": "402240"
  },
  {
    "text": "which is the uh translation loc aide buffer which basically translate the",
    "start": "402240",
    "end": "407400"
  },
  {
    "text": "virtual addresses to uh uh to the",
    "start": "407400",
    "end": "412599"
  },
  {
    "text": "physical addresses in in the ram right if you have a lot of processors you're going to have a lot of tables and these",
    "start": "412599",
    "end": "418680"
  },
  {
    "text": "entries are going to be different effectively right compared this to threads where we",
    "start": "418680",
    "end": "425560"
  },
  {
    "text": "have those threads share the page table of the parent process and as a result",
    "start": "425560",
    "end": "432879"
  },
  {
    "text": "you chances you're going to hit the cash hits in the tlb will be",
    "start": "432879",
    "end": "438960"
  },
  {
    "text": "much higher than if those were processes right it's just yeah is that a big deal I don't I",
    "start": "438960",
    "end": "448160"
  },
  {
    "text": "didn't see any numbers to prove that is a big deal to be honest but it is what it is just understanding this is a",
    "start": "448160",
    "end": "454759"
  },
  {
    "text": "critical thing that's why when you open process the when you do top in Linux or Task Manager in Windows you'll see a lot",
    "start": "454759",
    "end": "462240"
  },
  {
    "start": "460000",
    "end": "480000"
  },
  {
    "text": "of postris processes and uh we're going to talk about why that is the case",
    "start": "462240",
    "end": "468319"
  },
  {
    "text": "right so yeah the first process is basically the postmaster that's the listener and clients connect to this",
    "start": "468319",
    "end": "475919"
  },
  {
    "text": "listener effectively and for each of these listeners when a client connects and clients here",
    "start": "475919",
    "end": "484440"
  },
  {
    "start": "480000",
    "end": "810000"
  },
  {
    "text": "are not really end users like q and I the clients of the",
    "start": "484440",
    "end": "491960"
  },
  {
    "text": "database is usually other applications usually back in applications right it's",
    "start": "491960",
    "end": "498319"
  },
  {
    "text": "rare that you have the user actually connecting to the database directly we don't do that",
    "start": "498319",
    "end": "503919"
  },
  {
    "text": "right we spin up a finite amount of who servers and these who servers will have a probably a connection",
    "start": "503919",
    "end": "511039"
  },
  {
    "text": "pool right whatever the maximum connection pool is and then those connect to the database effectively",
    "start": "511039",
    "end": "518640"
  },
  {
    "text": "right so there is a pool of connections so the the the connection are limited by the number of",
    "start": "518640",
    "end": "525959"
  },
  {
    "text": "applications right it's not like you're going in it's not like you're spinning",
    "start": "525959",
    "end": "531360"
  },
  {
    "text": "Eng Gen X right or a CDN or a web server like I that potentially can have",
    "start": "531360",
    "end": "540360"
  },
  {
    "text": "millions of connections right it's not the case like end users don't",
    "start": "540360",
    "end": "547800"
  },
  {
    "text": "connect to the database like that right but they do connect directly to a",
    "start": "547800",
    "end": "553959"
  },
  {
    "text": "reverse proxy or a CDN right or a web server and so this distinction is very",
    "start": "553959",
    "end": "560600"
  },
  {
    "text": "critical because that's the economy of scale effectively right what is important here is the understanding that",
    "start": "560600",
    "end": "568800"
  },
  {
    "text": "every client that connects gets its own backend process",
    "start": "568800",
    "end": "576360"
  },
  {
    "text": "that's the second component for every connection you get a brand new process",
    "start": "576360",
    "end": "583320"
  },
  {
    "text": "that will be a Dead on Arrival if this was like a web server right we never do",
    "start": "583320",
    "end": "589720"
  },
  {
    "text": "that there's always a pool of processes that actually uh limit the number of",
    "start": "589720",
    "end": "597000"
  },
  {
    "text": "processes right like engine X SP up a process engine is the same thing like as pul they use processes they don't use",
    "start": "597000",
    "end": "604120"
  },
  {
    "text": "threads right and they use a shared memory between these processes like we're going to talk about in a",
    "start": "604120",
    "end": "610320"
  },
  {
    "text": "minute but but those processes are limited by the number of cores by default like that's the auto mode when",
    "start": "610320",
    "end": "617600"
  },
  {
    "text": "when you first spin up in genx and I think ha proxy behaves the same it will spin up a process for each",
    "start": "617600",
    "end": "625640"
  },
  {
    "text": "core or Hardware thread right if if you have hyper threading",
    "start": "625640",
    "end": "632200"
  },
  {
    "text": "enabled so that's what that's what's going to happen but here for every connection you get a process so I was",
    "start": "632200",
    "end": "638839"
  },
  {
    "text": "really surprised when I saw that that just that is just doesn't scale if you have a lot of connections and pus know",
    "start": "638839",
    "end": "645360"
  },
  {
    "text": "that that's why there's a a property called Max connections and this is set to 100 which is a very low number if you",
    "start": "645360",
    "end": "651839"
  },
  {
    "text": "think about it right it's like 100 connection that's it right so because they know that that's a bad idea like",
    "start": "651839",
    "end": "657880"
  },
  {
    "text": "you don't spin up a process for each connection right if you have a lot of connections soon enough your your your",
    "start": "657880",
    "end": "665519"
  },
  {
    "text": "database will be run out of ram right and of course the CPU will just die",
    "start": "665519",
    "end": "672360"
  },
  {
    "text": "right because of of of you know context switching between all these",
    "start": "672360",
    "end": "677480"
  },
  {
    "text": "processes but yeah so that's that's the design we're going to know that it's not as bad as I originally thought because",
    "start": "677480",
    "end": "685040"
  },
  {
    "text": "there's not much work Happening Here it used to be before 9 insect but not",
    "start": "685040",
    "end": "690639"
  },
  {
    "text": "anymore right because of these guys the background workers right back what",
    "start": "690639",
    "end": "697399"
  },
  {
    "text": "whatever work happens here is very minimal right so there's the backend processes and it's ma it's capped by the",
    "start": "697399",
    "end": "703800"
  },
  {
    "text": "max connections because it's like one to one right so that's that's the backend processes right so we have the",
    "start": "703800",
    "end": "709000"
  },
  {
    "text": "postmaster each every time the user connects the postmaster Forks a new",
    "start": "709000",
    "end": "715839"
  },
  {
    "text": "connection which it's very critical to understand here Fork in a connection foring a connection foring a process",
    "start": "715839",
    "end": "723680"
  },
  {
    "text": "will technically copy the process and because it's a process it needs its own",
    "start": "723680",
    "end": "729519"
  },
  {
    "text": "virtual memory space right because that's how a process work but if you do",
    "start": "729519",
    "end": "734560"
  },
  {
    "text": "that then you have to also copy whatever the master had the postmaster had into",
    "start": "734560",
    "end": "740000"
  },
  {
    "text": "the virtual the the new virtual memory address but Linux doesn't do that pretty",
    "start": "740000",
    "end": "748000"
  },
  {
    "text": "much any no operating system does that for optimization reasons so they they",
    "start": "748000",
    "end": "753120"
  },
  {
    "text": "have the page tables point to the same location but as you start changing they do something called copy on write or cow",
    "start": "753120",
    "end": "761279"
  },
  {
    "text": "right so as users or the parent process start changing one part of the page and those",
    "start": "761279",
    "end": "770000"
  },
  {
    "text": "pages are like 4K in size and you can change them you make you can make them",
    "start": "770000",
    "end": "775240"
  },
  {
    "text": "huge pages and that's another discussion like um this is something I'm researching these days right huge huge",
    "start": "775240",
    "end": "782360"
  },
  {
    "text": "pages in operating system but but these Pages like as you change them they will be copied as we",
    "start": "782360",
    "end": "789480"
  },
  {
    "text": "change right so just in case right so they are shared once you start changing",
    "start": "789480",
    "end": "795440"
  },
  {
    "text": "they're going to be copied on right right so that they can stay stay distinct so that's the trick operating",
    "start": "795440",
    "end": "801440"
  },
  {
    "text": "system play here but yeah everything is a basically a fork here all",
    "start": "801440",
    "end": "807120"
  },
  {
    "text": "right so all these processes actually need to talk to each other right not per",
    "start": "807120",
    "end": "814199"
  },
  {
    "start": "810000",
    "end": "892000"
  },
  {
    "text": "se but like as they load stuff as you",
    "start": "814199",
    "end": "819320"
  },
  {
    "text": "read pages from disk right whether these pages are table data whether these are",
    "start": "819320",
    "end": "824720"
  },
  {
    "text": "indexes they they put in memory right and when you put in memory this memory is actually called shared memory or",
    "start": "824720",
    "end": "831279"
  },
  {
    "text": "shared buffers and sometimes they call it or buffer pool many names right this",
    "start": "831279",
    "end": "837399"
  },
  {
    "text": "is where the wall records live the is where the pages live and and pretty much everything that is shared is right here",
    "start": "837399",
    "end": "844639"
  },
  {
    "text": "and it's called the shared memory right this very very critical piece of memory that every single process have access to",
    "start": "844639",
    "end": "852240"
  },
  {
    "text": "and this is allocated using this Linux command it's called M map I think right",
    "start": "852240",
    "end": "859720"
  },
  {
    "text": "and that's how you do it look sharing share share a memory space between processes right and of course you got to",
    "start": "859720",
    "end": "867160"
  },
  {
    "text": "be careful CU you have to obtain mutexes and semaphor to avoid two processes",
    "start": "867160",
    "end": "873079"
  },
  {
    "text": "writing to the same page at the same time and you have to lock it and stuff like that so things uh becomes really",
    "start": "873079",
    "end": "880880"
  },
  {
    "text": "really pretty pretty tricky when it comes to them and that's true for both processes and threat of course race",
    "start": "880880",
    "end": "887240"
  },
  {
    "text": "conditions you need to avoid it as much as possible right then we come to background workers which",
    "start": "887240",
    "end": "894320"
  },
  {
    "start": "892000",
    "end": "1038000"
  },
  {
    "text": "were introduced I would say in 996 with the parallel plans a backend process",
    "start": "894320",
    "end": "901639"
  },
  {
    "text": "when it receives a query from the user",
    "start": "901639",
    "end": "906720"
  },
  {
    "text": "right you the backend process May execute the query in its local backend",
    "start": "906720",
    "end": "914160"
  },
  {
    "text": "process right but optionally if parallel plans were enabled it can Outsource this",
    "start": "914160",
    "end": "922160"
  },
  {
    "text": "right uh the execution to one or more something called background workers",
    "start": "922160",
    "end": "928759"
  },
  {
    "text": "right so this can and this is a pool now this design I'm I'm familiar with and",
    "start": "928759",
    "end": "934519"
  },
  {
    "text": "it's scalable right because there a limited set of processes and you can just throw things at it right this so we",
    "start": "934519",
    "end": "941000"
  },
  {
    "text": "have predictability we have this many number of processes and these do the work for us if they are all busy you get",
    "start": "941000",
    "end": "947920"
  },
  {
    "text": "to wait clients get to wait right it's it's a predictable thing as opposed to",
    "start": "947920",
    "end": "955040"
  },
  {
    "text": "like let's say don't we don't have this backround workers and every backend process Act does the work all the time",
    "start": "955040",
    "end": "961319"
  },
  {
    "text": "then if if if if a thousand clients executed a th queries all these thousand",
    "start": "961319",
    "end": "967399"
  },
  {
    "text": "processes will run concurrently right and they will try to take the CPU time",
    "start": "967399",
    "end": "973120"
  },
  {
    "text": "of course most of the work will be IO because it's a database but sorting",
    "start": "973120",
    "end": "978600"
  },
  {
    "text": "think of sorting think of hashing think of join think of like what merge sorts and whatever algorithms they use this",
    "start": "978600",
    "end": "985920"
  },
  {
    "text": "needs the CPU and in this case you will be just at the mercy of the operating",
    "start": "985920",
    "end": "991800"
  },
  {
    "text": "system scheduler effectively so that's not predictable this is predictable when",
    "start": "991800",
    "end": "997680"
  },
  {
    "text": "you actually have a specific sets of background workers and those don't the work and hey they are busy they're busy",
    "start": "997680",
    "end": "1004399"
  },
  {
    "text": "that's it you get the weight you can measure the weight you can you can know what's going on right so that background",
    "start": "1004399",
    "end": "1011440"
  },
  {
    "text": "process they are limited by something called the max worker processor very",
    "start": "1011440",
    "end": "1016560"
  },
  {
    "text": "interesting thing like that's that's the configuration you can set cool the so background workers that's another pieces",
    "start": "1016560",
    "end": "1023560"
  },
  {
    "text": "this processes and again those are spun up by the post Christ postmaster process",
    "start": "1023560",
    "end": "1029678"
  },
  {
    "text": "so they are Fork everything is pretty much Fork from this postmaster all right so uh let's switch to our auxiliary",
    "start": "1029679",
    "end": "1037199"
  },
  {
    "text": "processes auxiliary means that's a new word I learned cuz English is not my",
    "start": "1037199",
    "end": "1042240"
  },
  {
    "start": "1038000",
    "end": "1065000"
  },
  {
    "text": "first language so I'm learning a lot of stuff here so auxiliary is like something that is aside",
    "start": "1042240",
    "end": "1049600"
  },
  {
    "text": "process that helps things right it's a standby side processes helper that's",
    "start": "1049600",
    "end": "1056559"
  },
  {
    "text": "another word for it and so the auxilary process we're going to move them one by one talk to",
    "start": "1056559",
    "end": "1062960"
  },
  {
    "text": "talk about them the first one is they called the background writer not to be",
    "start": "1062960",
    "end": "1068240"
  },
  {
    "start": "1065000",
    "end": "1350000"
  },
  {
    "text": "confused by with the background worker so the background writer you see",
    "start": "1068240",
    "end": "1075039"
  },
  {
    "text": "every time if you receive like a an an update statement from a from a user it goes to",
    "start": "1075039",
    "end": "1082360"
  },
  {
    "text": "the backend process the backend process chooses to build a parallel plan or not",
    "start": "1082360",
    "end": "1088159"
  },
  {
    "text": "a parallel plan and based on that if it's not a parallel plan it execute it executed itself right so there is like a",
    "start": "1088159",
    "end": "1095240"
  },
  {
    "text": "nice work memory I forgot to talk about it this work M this work M live in both",
    "start": "1095240",
    "end": "1100600"
  },
  {
    "text": "the backend process and also in the background workers the the parallel",
    "start": "1100600",
    "end": "1106000"
  },
  {
    "text": "processes and uh you do this stuff and we change Pages at the end of the day",
    "start": "1106000",
    "end": "1111919"
  },
  {
    "text": "right what we do is write to this shared memory with our changes so the dirty",
    "start": "1111919",
    "end": "1118760"
  },
  {
    "text": "changes are written to these pages and those pages become dirty right and when",
    "start": "1118760",
    "end": "1124880"
  },
  {
    "text": "you write to the pages when you write to also the wall is this Abend only",
    "start": "1124880",
    "end": "1130320"
  },
  {
    "text": "mechanism for durability right we need to eventually flush it to disk for",
    "start": "1130320",
    "end": "1136000"
  },
  {
    "text": "durability right they are only in memory so so this guy background writer it's",
    "start": "1136000",
    "end": "1141200"
  },
  {
    "text": "all job is wakes up and then flushes those pages to disk now this is big",
    "start": "1141200",
    "end": "1153080"
  },
  {
    "text": "difference background writers only writes to the OS it says hey",
    "start": "1153080",
    "end": "1158760"
  },
  {
    "text": "write you know the OS actually when you say write it lies to you it doesn't",
    "start": "1158760",
    "end": "1164880"
  },
  {
    "text": "immediately write to disk it writes to its own file system cache and the reason it does",
    "start": "1164880",
    "end": "1173799"
  },
  {
    "text": "that because if I'm updating a file like I say updated one bite in the file and I",
    "start": "1173799",
    "end": "1179520"
  },
  {
    "text": "save right we don't really the oper doesn't really save to desk immediately",
    "start": "1179520",
    "end": "1185919"
  },
  {
    "text": "it stores it in the in in its own cache right and then you change another bite",
    "start": "1185919",
    "end": "1192480"
  },
  {
    "text": "and imagine you don't have this cash it will write it to dis and you change another bite it will write to dis",
    "start": "1192480",
    "end": "1200280"
  },
  {
    "text": "that will really issue so many iOS right to the desk and it will slow down",
    "start": "1200280",
    "end": "1206240"
  },
  {
    "text": "operations it will slow down the bandwidth and the iio and the and the desk itself and it will reduce the life",
    "start": "1206240",
    "end": "1215400"
  },
  {
    "text": "cycle life cycle the lifetime of the SSD right if it's an SSD specifically I'm",
    "start": "1215400",
    "end": "1221960"
  },
  {
    "text": "not sure about hard drive but is ISD definitely because you going to right right right right right to it and these",
    "start": "1221960",
    "end": "1227600"
  },
  {
    "text": "cells have lifetime they they have basically each cell has you can only",
    "start": "1227600",
    "end": "1234240"
  },
  {
    "text": "write to it x amount of times after that it just burns right that's why ssds have this wear",
    "start": "1234240",
    "end": "1241440"
  },
  {
    "text": "leveling that just moves stuff along oh you've been called for a long time let me move you here and let me write let me",
    "start": "1241440",
    "end": "1248039"
  },
  {
    "text": "use your location to write more hot data but yeah so so with the OS does all wres",
    "start": "1248039",
    "end": "1255280"
  },
  {
    "text": "they they cash things in memory in hopes that might receive more rights and we",
    "start": "1255280",
    "end": "1261360"
  },
  {
    "text": "can flush all these rights at once that's the hope so the background right are just rights to the",
    "start": "1261360",
    "end": "1267039"
  },
  {
    "text": "OS right because it's fine the background writer job is not really for",
    "start": "1267039",
    "end": "1273320"
  },
  {
    "text": "du ability it's just for let's let's let's free up some stuff from the shared",
    "start": "1273320",
    "end": "1278799"
  },
  {
    "text": "buffers from the shared memory because this shared memory is not unlimited right it's just whatever you configured",
    "start": "1278799",
    "end": "1285840"
  },
  {
    "text": "post to be I think 128 Megs is the default which is very low right but as",
    "start": "1285840",
    "end": "1292720"
  },
  {
    "text": "you pull pages in and you write to these Pages you want to read more pages and",
    "start": "1292720",
    "end": "1298720"
  },
  {
    "text": "there sometimes there's no there's no space in the shared memory and you cannot operate on things that are not in",
    "start": "1298720",
    "end": "1304919"
  },
  {
    "text": "memory so you have to pull in memory so the background writer will occasionally just wake up and says okay uh we don't",
    "start": "1304919",
    "end": "1312120"
  },
  {
    "text": "have space let me flush these dirty Pages flushing to the to the uh flush",
    "start": "1312120",
    "end": "1318880"
  },
  {
    "text": "them right and then empty them now I can put some more stuff they go to the file",
    "start": "1318880",
    "end": "1324559"
  },
  {
    "text": "cache and then poo eventually the OS will flush them to dis you might say saying what if we",
    "start": "1324559",
    "end": "1330960"
  },
  {
    "text": "crash we'll come to that that's F that's fine right this is in the best situation",
    "start": "1330960",
    "end": "1337360"
  },
  {
    "text": "where the database will not crash which is 99.999% of the cases databases don't",
    "start": "1337360",
    "end": "1343200"
  },
  {
    "text": "crash right it's the it's the 0.1% when the database crash we'll come to that right there's another problem process",
    "start": "1343200",
    "end": "1348760"
  },
  {
    "text": "which is actually the next one it's called the",
    "start": "1348760",
    "end": "1353519"
  },
  {
    "start": "1350000",
    "end": "1420000"
  },
  {
    "text": "checkpoint the checkpoint job is to actually says you know what all the wall",
    "start": "1353960",
    "end": "1359400"
  },
  {
    "text": "changes that we did all the pages we have let's flush everything to desk not",
    "start": "1359400",
    "end": "1366720"
  },
  {
    "text": "to the OS it will use a specific flag called the _ direct and says hey OS I'm",
    "start": "1366720",
    "end": "1373919"
  },
  {
    "text": "going straight to desk I'm flushing everything to desk boom",
    "start": "1373919",
    "end": "1379520"
  },
  {
    "text": "so that if that when we flush all these changes to disk and we flush wall it creates a checkpoint record as it here",
    "start": "1379520",
    "end": "1387400"
  },
  {
    "text": "at this point and this date and this time and this second we are consistent",
    "start": "1387400",
    "end": "1393200"
  },
  {
    "text": "anything after that we have to replay this data right but that's a important",
    "start": "1393200",
    "end": "1399520"
  },
  {
    "text": "concept the checkpoint creates a checkpoint after which we'll say hey we",
    "start": "1399520",
    "end": "1405240"
  },
  {
    "text": "are actually good at this point so it flushes everything today so check pointer is also another auxilary process",
    "start": "1405240",
    "end": "1411520"
  },
  {
    "text": "that's is very critical especially because the wall actually has a fixed size it's not really unlimited all right",
    "start": "1411520",
    "end": "1417080"
  },
  {
    "text": "the logger uh you can enable logging by default to standard output standard error to CSV and post G and someone need",
    "start": "1417080",
    "end": "1426919"
  },
  {
    "start": "1420000",
    "end": "1446000"
  },
  {
    "text": "to wake up and write these logs these errors to desk right to the to the logs",
    "start": "1426919",
    "end": "1433400"
  },
  {
    "text": "and that's the logger really nothing much to say of this process",
    "start": "1433400",
    "end": "1438799"
  },
  {
    "text": "so if you want to enable like tracing you want to see what queries poers",
    "start": "1438799",
    "end": "1443919"
  },
  {
    "text": "does this is actually interesting autov vacuum launchers and autov vacuum workers so what is vacuum right vacu we",
    "start": "1443919",
    "end": "1451320"
  },
  {
    "start": "1446000",
    "end": "1530000"
  },
  {
    "text": "talked about the architecture of postris being tole base like it's a it's updates",
    "start": "1451320",
    "end": "1458279"
  },
  {
    "text": "and deletes and inserts are all inserts right so you you would get this bloat",
    "start": "1458279",
    "end": "1463640"
  },
  {
    "text": "eventually where you have 100 tuples representing the same row but all the",
    "start": "1463640",
    "end": "1470440"
  },
  {
    "text": "transactions that needed those old tupes for uh multiversion concurrency control",
    "start": "1470440",
    "end": "1478200"
  },
  {
    "text": "reasons are done are committed they those toles have zero reasons to exist",
    "start": "1478200",
    "end": "1486799"
  },
  {
    "text": "vacuum cleans those up free those up right for us to",
    "start": "1486799",
    "end": "1493760"
  },
  {
    "text": "actually use this pages to write more useful dat data that's one job of the",
    "start": "1493760",
    "end": "1500640"
  },
  {
    "text": "auto vacuum right but there's so much other thing vacuum does so much other",
    "start": "1500640",
    "end": "1505799"
  },
  {
    "text": "stuff as well and there is like a so the autov vacuum launcher is the process that launches the auto vacuums just case",
    "start": "1505799",
    "end": "1513720"
  },
  {
    "text": "for example if it crashes one of the autov vacuum workers crashes the autov vacuum will start spinning those up up",
    "start": "1513720",
    "end": "1521320"
  },
  {
    "text": "until autov vacuum Max workers parameter all right so the wall processes I kind",
    "start": "1521320",
    "end": "1526919"
  },
  {
    "text": "of combined all these guys in into one so we have the wall archiver this the",
    "start": "1526919",
    "end": "1532000"
  },
  {
    "start": "1530000",
    "end": "1733000"
  },
  {
    "text": "responsible for backing up just the wall entri the wall is very important because",
    "start": "1532000",
    "end": "1537720"
  },
  {
    "text": "it it has like a compressed version of the changes that the users made right",
    "start": "1537720",
    "end": "1543200"
  },
  {
    "text": "not the fat pages with everything which is like the 8K pages right it's like",
    "start": "1543200",
    "end": "1551520"
  },
  {
    "text": "very tiny very it will it will tell you the story of what happened so the wall records are very very critical right so",
    "start": "1551520",
    "end": "1559640"
  },
  {
    "text": "that's what basically help us to recover in case of a crash it will basically use",
    "start": "1559640",
    "end": "1566279"
  },
  {
    "text": "this for replication we push these wall changes to the to the replicas and",
    "start": "1566279",
    "end": "1571520"
  },
  {
    "text": "that's it that we don't really need to change anything this just the wall entries is really just the DNA if you",
    "start": "1571520",
    "end": "1577080"
  },
  {
    "text": "think about it's the DNA of the database right just everything is that we changed so you can replay these changes in any",
    "start": "1577080",
    "end": "1584080"
  },
  {
    "text": "database and you can get to the same state so the wall archiva the wa archives entire wall",
    "start": "1584080",
    "end": "1591039"
  },
  {
    "text": "changes for history purposes so you can technically take the wall changes and",
    "start": "1591039",
    "end": "1596919"
  },
  {
    "text": "replay from zero to the state you have in the database right pretty cool if you",
    "start": "1596919",
    "end": "1602880"
  },
  {
    "text": "ask me the wall receiver so that's a process runs on the replicas that receives those",
    "start": "1602880",
    "end": "1608520"
  },
  {
    "text": "wall right and you can write in any language you want right to to as long as you understand that application protocol",
    "start": "1608520",
    "end": "1615279"
  },
  {
    "text": "the wall what is that ww the heck is that oh the war writer ww",
    "start": "1615279",
    "end": "1623360"
  },
  {
    "text": "the war writer is the responsible for writing the wall records and flush them",
    "start": "1623360",
    "end": "1629320"
  },
  {
    "text": "to desk you might say saying isn't that the job of the checkpoint or not really remember when when we commit we really",
    "start": "1629320",
    "end": "1637600"
  },
  {
    "text": "need to make sure that the wall changes that's the only thing we need to make",
    "start": "1637600",
    "end": "1642840"
  },
  {
    "text": "sure committing a transaction the wall must be on desk I don't care about the p",
    "start": "1642840",
    "end": "1648200"
  },
  {
    "text": "PES right I don't care about the pages in memory they can still stay dirty the",
    "start": "1648200",
    "end": "1654240"
  },
  {
    "text": "changes that I made right but the changes in the wall must be flushed to disk and once it's actually flush to dis",
    "start": "1654240",
    "end": "1662880"
  },
  {
    "text": "returns access to these that's when you tell the user commit sucess if if the",
    "start": "1662880",
    "end": "1668000"
  },
  {
    "text": "wall is not flush to this you can crash and you can lose everything right that's",
    "start": "1668000",
    "end": "1674080"
  },
  {
    "text": "really bad that's the job of the wall writer very critical job right when you Comm it takes the wall writer wakes up",
    "start": "1674080",
    "end": "1681000"
  },
  {
    "text": "like let me flush that does that mean maybe the wall writer will actually flush even if you transaction didn't",
    "start": "1681000",
    "end": "1687000"
  },
  {
    "text": "commit might say what that's absolutely fine we have a record that says that",
    "start": "1687000",
    "end": "1692600"
  },
  {
    "text": "this transaction is committed or not so even in case of a crash we're going to clean ourself up so don't worry about",
    "start": "1692600",
    "end": "1698440"
  },
  {
    "text": "that so flushing as as often as possible check pointer is actually flushing both",
    "start": "1698440",
    "end": "1704360"
  },
  {
    "text": "the wall and the pages right and creates a checkpoint right that says okay this",
    "start": "1704360",
    "end": "1710559"
  },
  {
    "text": "is where we are a fully consistent in this say that's that's the difference right we talked about that the wall",
    "start": "1710559",
    "end": "1716080"
  },
  {
    "text": "senders is basically in the client side which is basically the master database pushes the wall Cher changes the wall",
    "start": "1716080",
    "end": "1723640"
  },
  {
    "text": "changes to the replicas right wall senders and they have like Max wall senders you can configure that as",
    "start": "1723640",
    "end": "1730760"
  },
  {
    "text": "well and the final process the started process and this is actually what I told you in the",
    "start": "1730760",
    "end": "1737440"
  },
  {
    "start": "1733000",
    "end": "1996000"
  },
  {
    "text": "beginning this is the first process that actually runs even before the postmaster",
    "start": "1737440",
    "end": "1743360"
  },
  {
    "text": "process you see if you let's say we have a a transaction we start a transaction",
    "start": "1743360",
    "end": "1749960"
  },
  {
    "text": "we start writing start writing so much stuff right and we write we write to the",
    "start": "1749960",
    "end": "1755080"
  },
  {
    "text": "pages and we write like we write Al almost like a million records right the million records will be really full",
    "start": "1755080",
    "end": "1762360"
  },
  {
    "text": "fledged rows in in the shared buffer right here and will also be represented",
    "start": "1762360",
    "end": "1767760"
  },
  {
    "text": "as walls right wall changes wall records in the wall right and when I say let's",
    "start": "1767760",
    "end": "1773760"
  },
  {
    "text": "say I I I committed right the",
    "start": "1773760",
    "end": "1779159"
  },
  {
    "text": "transaction right so what we really need to just to make sure let's say the",
    "start": "1779159",
    "end": "1784960"
  },
  {
    "text": "checkpoint didn't run right just the wall writer and we committed and the",
    "start": "1784960",
    "end": "1790039"
  },
  {
    "text": "wall writer flushed all these changes and then we crashed so technically pages are empty",
    "start": "1790039",
    "end": "1797679"
  },
  {
    "text": "we don't have not really empty but they have the original state where they were",
    "start": "1797679",
    "end": "1803279"
  },
  {
    "text": "before myund million raw transaction started so the startup process if once",
    "start": "1803279",
    "end": "1810080"
  },
  {
    "text": "we start post the startup processor starts and says okay what was the last",
    "start": "1810080",
    "end": "1815399"
  },
  {
    "text": "last checkpoint well the last checkpoint was this wow that was like a while ago",
    "start": "1815399",
    "end": "1820960"
  },
  {
    "text": "what did we do since then right we take that point since then we inserted a",
    "start": "1820960",
    "end": "1826440"
  },
  {
    "text": "million rows in the wall okay there's there's the entri is good but the pages are oh wow they're really",
    "start": "1826440",
    "end": "1833960"
  },
  {
    "text": "out of date so what do we need to do spin it up pull all these pages in",
    "start": "1833960",
    "end": "1839480"
  },
  {
    "text": "memory right before we start up the postmaster process and listen to anything don't let anyone connect right",
    "start": "1839480",
    "end": "1847799"
  },
  {
    "text": "don't let anyone connect just spin up apply all the changes in the wall to the",
    "start": "1847799",
    "end": "1855840"
  },
  {
    "text": "dirty pages to the pages make them dirty and all of a sudden now you got into the",
    "start": "1855840",
    "end": "1861360"
  },
  {
    "text": "same state this is called the redo right literally go and redo all the wall",
    "start": "1861360",
    "end": "1868919"
  },
  {
    "text": "changes because technically you did them at once right at at some point you did",
    "start": "1868919",
    "end": "1874799"
  },
  {
    "text": "them before the crash now you're redoing those wall changes to the dirty page to",
    "start": "1874799",
    "end": "1882519"
  },
  {
    "text": "the pages and the shared memory right bringing them to the same state fantastic if you think think about it",
    "start": "1882519",
    "end": "1888639"
  },
  {
    "text": "that's why the wall is also called the redo log in other databases",
    "start": "1888639",
    "end": "1894880"
  },
  {
    "text": "right and there's also something called the undo log pcus doesn't really have undo logs and the reason is because of",
    "start": "1895840",
    "end": "1903639"
  },
  {
    "text": "this brilliant design of using tuples as the markup for the mvcc right",
    "start": "1903639",
    "end": "1911080"
  },
  {
    "text": "uh other databases use undo lxs to record the old state which is",
    "start": "1911080",
    "end": "1918320"
  },
  {
    "text": "maybe if I do ever doing the MySQL NB architecture I'll I'll talk about that",
    "start": "1918320",
    "end": "1923440"
  },
  {
    "text": "but but postris doesn't have to worry about the vacuum will clean those up the all toles right even if you flush",
    "start": "1923440",
    "end": "1930840"
  },
  {
    "text": "records that you you technically didn't commit a transaction",
    "start": "1930840",
    "end": "1937960"
  },
  {
    "text": "that you didn't commit that's fine transactions will know not to read those uncommitted toles",
    "start": "1937960",
    "end": "1946679"
  },
  {
    "text": "so simple because the they will look up so it's a little bit slower they will look up and say oh oh I'm not supposed",
    "start": "1946679",
    "end": "1952399"
  },
  {
    "text": "to read this law this stle so I'm going to ignore it and that lookup is expensive so it's always like a it's a",
    "start": "1952399",
    "end": "1958919"
  },
  {
    "text": "two two sword uh what's it called it two two blade sword two double double edge",
    "start": "1958919",
    "end": "1964880"
  },
  {
    "text": "sword yes two blade sword what the heck all right all right guys um that's it",
    "start": "1964880",
    "end": "1970000"
  },
  {
    "text": "for me today I think uh hopefully you enjoy this video um I thought I'll talk about this postris it's it's so",
    "start": "1970000",
    "end": "1976200"
  },
  {
    "text": "fascinating I'm learning so much every time I go to the DAT this this database I'm learning so much you know so I spend",
    "start": "1976200",
    "end": "1983080"
  },
  {
    "text": "a lot of time in the dark and in the code to decode all this information if",
    "start": "1983080",
    "end": "1989320"
  },
  {
    "text": "you like this stuff uh check out my database course database. hos.com supports the show thank you so much",
    "start": "1989320",
    "end": "1995399"
  },
  {
    "text": "goodbye",
    "start": "1995399",
    "end": "1997720"
  }
]