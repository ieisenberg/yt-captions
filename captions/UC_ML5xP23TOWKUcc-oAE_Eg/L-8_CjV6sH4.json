[
  {
    "start": "0",
    "end": "82000"
  },
  {
    "text": "aggregate functions like count average",
    "start": "80",
    "end": "2879"
  },
  {
    "text": "max men are very useful we use them all",
    "start": "2879",
    "end": "5279"
  },
  {
    "text": "the time however if used improperly at",
    "start": "5279",
    "end": "8800"
  },
  {
    "text": "the wrong",
    "start": "8800",
    "end": "10160"
  },
  {
    "text": "database tuning and configuration",
    "start": "10160",
    "end": "12719"
  },
  {
    "text": "they can",
    "start": "12719",
    "end": "14240"
  },
  {
    "text": "show visible performance degradation and",
    "start": "14240",
    "end": "16960"
  },
  {
    "text": "this is what i want to discuss in this",
    "start": "16960",
    "end": "19279"
  },
  {
    "text": "video",
    "start": "19279",
    "end": "20240"
  },
  {
    "text": "let's jump into it so i'm at this poll",
    "start": "20240",
    "end": "22160"
  },
  {
    "text": "on my social media that have this",
    "start": "22160",
    "end": "24160"
  },
  {
    "text": "question a table t with one column a and",
    "start": "24160",
    "end": "27199"
  },
  {
    "text": "a hundred million rows there is an index",
    "start": "27199",
    "end": "29679"
  },
  {
    "text": "on a which one of these queries are more",
    "start": "29679",
    "end": "33120"
  },
  {
    "text": "likely to use the index",
    "start": "33120",
    "end": "36000"
  },
  {
    "text": "so the first one is select count star",
    "start": "36000",
    "end": "38079"
  },
  {
    "text": "from t",
    "start": "38079",
    "end": "39520"
  },
  {
    "text": "second one select max a from t",
    "start": "39520",
    "end": "43520"
  },
  {
    "text": "the third one is select average a from t",
    "start": "43520",
    "end": "46239"
  },
  {
    "text": "and the fourth one is all of the above",
    "start": "46239",
    "end": "48879"
  },
  {
    "text": "so the short answer to this is",
    "start": "48879",
    "end": "52480"
  },
  {
    "text": "max is more likely to use",
    "start": "52480",
    "end": "55440"
  },
  {
    "text": "the index but so the most appropriate",
    "start": "55440",
    "end": "57840"
  },
  {
    "text": "answer is max but the question is really",
    "start": "57840",
    "end": "60800"
  },
  {
    "text": "why",
    "start": "60800",
    "end": "61680"
  },
  {
    "text": "why is max the fastest here this all",
    "start": "61680",
    "end": "64559"
  },
  {
    "text": "comes back to understanding the basic",
    "start": "64559",
    "end": "66560"
  },
  {
    "text": "fundamentals of how indexes are built",
    "start": "66560",
    "end": "68880"
  },
  {
    "text": "and how tables are built and once you",
    "start": "68880",
    "end": "71119"
  },
  {
    "text": "really understand that",
    "start": "71119",
    "end": "73040"
  },
  {
    "text": "this questions become",
    "start": "73040",
    "end": "74880"
  },
  {
    "text": "really easy because you really know how",
    "start": "74880",
    "end": "78320"
  },
  {
    "text": "things are built we pick one",
    "start": "78320",
    "end": "80799"
  },
  {
    "text": "by one",
    "start": "80799",
    "end": "82000"
  },
  {
    "start": "82000",
    "end": "270000"
  },
  {
    "text": "like select count",
    "start": "82000",
    "end": "84000"
  },
  {
    "text": "to count every single",
    "start": "84000",
    "end": "87119"
  },
  {
    "text": "entry",
    "start": "87119",
    "end": "88479"
  },
  {
    "text": "right",
    "start": "88479",
    "end": "89600"
  },
  {
    "text": "in the table",
    "start": "89600",
    "end": "91600"
  },
  {
    "text": "you have to scan the entire table",
    "start": "91600",
    "end": "95759"
  },
  {
    "text": "and",
    "start": "95759",
    "end": "96720"
  },
  {
    "text": "from experience we know that scanning",
    "start": "96720",
    "end": "98799"
  },
  {
    "text": "the table directly is easier than",
    "start": "98799",
    "end": "102479"
  },
  {
    "text": "actually going and scanning a b3 which",
    "start": "102479",
    "end": "105439"
  },
  {
    "text": "is",
    "start": "105439",
    "end": "106159"
  },
  {
    "text": "which is not designed for sequential",
    "start": "106159",
    "end": "109280"
  },
  {
    "text": "scanning you know it's just easier to go",
    "start": "109280",
    "end": "111600"
  },
  {
    "text": "to the table and read page by page and",
    "start": "111600",
    "end": "114159"
  },
  {
    "text": "then count the rows but you might have",
    "start": "114159",
    "end": "116159"
  },
  {
    "text": "this question why is the index have an",
    "start": "116159",
    "end": "119280"
  },
  {
    "text": "updated value of the latest count",
    "start": "119280",
    "end": "122399"
  },
  {
    "text": "why don't we do that",
    "start": "122399",
    "end": "124640"
  },
  {
    "text": "if you really want to do that then you",
    "start": "124640",
    "end": "128000"
  },
  {
    "text": "just killed concurrency what does that",
    "start": "128000",
    "end": "130080"
  },
  {
    "text": "mean counting is really one of the",
    "start": "130080",
    "end": "132959"
  },
  {
    "text": "hardest problems in database",
    "start": "132959",
    "end": "136720"
  },
  {
    "text": "systems especially one if you want to do",
    "start": "136720",
    "end": "138879"
  },
  {
    "text": "it concurrently because how do you do",
    "start": "138879",
    "end": "140480"
  },
  {
    "text": "that",
    "start": "140480",
    "end": "141440"
  },
  {
    "text": "you're assuming that you have a single",
    "start": "141440",
    "end": "143599"
  },
  {
    "text": "writer right that that inserts rows to",
    "start": "143599",
    "end": "146480"
  },
  {
    "text": "this table but no we have multiple",
    "start": "146480",
    "end": "150080"
  },
  {
    "text": "uh we want remember these answer we want",
    "start": "150080",
    "end": "152480"
  },
  {
    "text": "these answers to be as fast as possible",
    "start": "152480",
    "end": "154879"
  },
  {
    "text": "right so we use this concurrency we use",
    "start": "154879",
    "end": "157599"
  },
  {
    "text": "a lot of other threads right to the",
    "start": "157599",
    "end": "159920"
  },
  {
    "text": "table and usually these stories they",
    "start": "159920",
    "end": "162319"
  },
  {
    "text": "don't know anything about each other you",
    "start": "162319",
    "end": "164319"
  },
  {
    "text": "just write and insert new records at the",
    "start": "164319",
    "end": "166879"
  },
  {
    "text": "end so if you now",
    "start": "166879",
    "end": "168560"
  },
  {
    "text": "introduce a counter",
    "start": "168560",
    "end": "171360"
  },
  {
    "text": "whether this is an index or another data",
    "start": "171360",
    "end": "173120"
  },
  {
    "text": "structure",
    "start": "173120",
    "end": "174239"
  },
  {
    "text": "then you have to include some sort of a",
    "start": "174239",
    "end": "176480"
  },
  {
    "text": "mutex or a lock you have to",
    "start": "176480",
    "end": "179599"
  },
  {
    "text": "uh first of all",
    "start": "179599",
    "end": "181440"
  },
  {
    "text": "you have to acquire a lock on the count",
    "start": "181440",
    "end": "184319"
  },
  {
    "text": "and then if the new row comes in you",
    "start": "184319",
    "end": "187760"
  },
  {
    "text": "increment that and you have to pose any",
    "start": "187760",
    "end": "190159"
  },
  {
    "text": "other inserts meanwhile otherwise you're",
    "start": "190159",
    "end": "192480"
  },
  {
    "text": "going to get a miscount all the time",
    "start": "192480",
    "end": "194560"
  },
  {
    "text": "right so counting if you the moment you",
    "start": "194560",
    "end": "197519"
  },
  {
    "text": "count",
    "start": "197519",
    "end": "198720"
  },
  {
    "text": "you lose throughput",
    "start": "198720",
    "end": "200720"
  },
  {
    "text": "so nobody actually does it there is",
    "start": "200720",
    "end": "202959"
  },
  {
    "text": "another way to give you an estimate of",
    "start": "202959",
    "end": "205519"
  },
  {
    "text": "the account i made a video about that",
    "start": "205519",
    "end": "206879"
  },
  {
    "text": "i'm going to reference it here just give",
    "start": "206879",
    "end": "208560"
  },
  {
    "text": "you an estimate and then these are the",
    "start": "208560",
    "end": "210560"
  },
  {
    "text": "database statistics that he's like hey i",
    "start": "210560",
    "end": "212959"
  },
  {
    "text": "think it's around this number and this",
    "start": "212959",
    "end": "216080"
  },
  {
    "text": "is basically from the inserts that the",
    "start": "216080",
    "end": "218480"
  },
  {
    "text": "database collects but the the database",
    "start": "218480",
    "end": "220959"
  },
  {
    "text": "statistics never actually intervene and",
    "start": "220959",
    "end": "223599"
  },
  {
    "text": "unlock things and there never slows",
    "start": "223599",
    "end": "225519"
  },
  {
    "text": "things down it counts whatever it can",
    "start": "225519",
    "end": "227440"
  },
  {
    "text": "count so counting is out of the question",
    "start": "227440",
    "end": "229840"
  },
  {
    "text": "it's just not not performant to use the",
    "start": "229840",
    "end": "231920"
  },
  {
    "text": "index doesn't make any sense so",
    "start": "231920",
    "end": "234000"
  },
  {
    "text": "if you do count on a large table it",
    "start": "234000",
    "end": "236000"
  },
  {
    "text": "doesn't need to use the index there is",
    "start": "236000",
    "end": "238080"
  },
  {
    "text": "obviously some exceptions where you have",
    "start": "238080",
    "end": "241280"
  },
  {
    "text": "a where clause and that where clause uh",
    "start": "241280",
    "end": "244959"
  },
  {
    "text": "have a field that",
    "start": "244959",
    "end": "247120"
  },
  {
    "text": "that is indexed and it returns a",
    "start": "247120",
    "end": "249519"
  },
  {
    "text": "a small collective number",
    "start": "249519",
    "end": "251680"
  },
  {
    "text": "that will use the index in this case but",
    "start": "251680",
    "end": "253360"
  },
  {
    "text": "if you have like an unbounded count",
    "start": "253360",
    "end": "255920"
  },
  {
    "text": "you know query it will not use the index",
    "start": "255920",
    "end": "258400"
  },
  {
    "text": "you know so that's that's what i'd like",
    "start": "258400",
    "end": "260000"
  },
  {
    "text": "to always discuss in these questions",
    "start": "260000",
    "end": "261600"
  },
  {
    "text": "there is no one answer all the time it's",
    "start": "261600",
    "end": "264880"
  },
  {
    "text": "that's why i added",
    "start": "264880",
    "end": "266840"
  },
  {
    "text": "the",
    "start": "266840",
    "end": "268639"
  },
  {
    "text": "that's why i added like what is more",
    "start": "268639",
    "end": "270639"
  },
  {
    "start": "270000",
    "end": "315000"
  },
  {
    "text": "likely to use the index now if we go to",
    "start": "270639",
    "end": "273199"
  },
  {
    "text": "the average we have the same problem to",
    "start": "273199",
    "end": "275520"
  },
  {
    "text": "average something you need the whole",
    "start": "275520",
    "end": "277440"
  },
  {
    "text": "count right which puts out the same back",
    "start": "277440",
    "end": "280880"
  },
  {
    "text": "to the same problem and you also need to",
    "start": "280880",
    "end": "284080"
  },
  {
    "text": "actually iterate through all these",
    "start": "284080",
    "end": "285840"
  },
  {
    "text": "entries in order to calculate this",
    "start": "285840",
    "end": "287680"
  },
  {
    "text": "average and the moment you iterate",
    "start": "287680",
    "end": "289759"
  },
  {
    "text": "through things it's just",
    "start": "289759",
    "end": "292000"
  },
  {
    "text": "especially large number of things that",
    "start": "292000",
    "end": "293919"
  },
  {
    "text": "you need to iterate through you just go",
    "start": "293919",
    "end": "296000"
  },
  {
    "text": "to directly to the table",
    "start": "296000",
    "end": "298080"
  },
  {
    "text": "all right so average and count",
    "start": "298080",
    "end": "300000"
  },
  {
    "text": "are less likely to use the index now",
    "start": "300000",
    "end": "302080"
  },
  {
    "text": "with that said there is really an",
    "start": "302080",
    "end": "303840"
  },
  {
    "text": "exception when it comes to count an",
    "start": "303840",
    "end": "305360"
  },
  {
    "text": "average and",
    "start": "305360",
    "end": "307120"
  },
  {
    "text": "if you have an in a non-clustered index",
    "start": "307120",
    "end": "309600"
  },
  {
    "text": "versus a cluster index and i'm going to",
    "start": "309600",
    "end": "311600"
  },
  {
    "text": "mention that at the end of the video but",
    "start": "311600",
    "end": "313600"
  },
  {
    "text": "let's go back to the max",
    "start": "313600",
    "end": "315680"
  },
  {
    "start": "315000",
    "end": "480000"
  },
  {
    "text": "max",
    "start": "315680",
    "end": "316960"
  },
  {
    "text": "right",
    "start": "316960",
    "end": "318320"
  },
  {
    "text": "is the best thing you can use for an",
    "start": "318320",
    "end": "320720"
  },
  {
    "text": "index why because if you think about b3",
    "start": "320720",
    "end": "323919"
  },
  {
    "text": "structure",
    "start": "323919",
    "end": "325039"
  },
  {
    "text": "these b3 entries are organized into",
    "start": "325039",
    "end": "328960"
  },
  {
    "text": "pages and",
    "start": "328960",
    "end": "330960"
  },
  {
    "text": "the",
    "start": "330960",
    "end": "331759"
  },
  {
    "text": "b3 is designed to be sequential and",
    "start": "331759",
    "end": "334960"
  },
  {
    "text": "ordered and the most important thing in",
    "start": "334960",
    "end": "337600"
  },
  {
    "text": "the index is that is order so",
    "start": "337600",
    "end": "340800"
  },
  {
    "text": "if you ask the index you can know the",
    "start": "340800",
    "end": "344400"
  },
  {
    "text": "first page of that index and you can",
    "start": "344400",
    "end": "347600"
  },
  {
    "text": "immediately know the last page of the",
    "start": "347600",
    "end": "349280"
  },
  {
    "text": "index and guess what the first page will",
    "start": "349280",
    "end": "352000"
  },
  {
    "text": "always have",
    "start": "352000",
    "end": "353520"
  },
  {
    "text": "the lowest number of entries like the",
    "start": "353520",
    "end": "356080"
  },
  {
    "text": "smallest entries and the last page will",
    "start": "356080",
    "end": "358880"
  },
  {
    "text": "have the maxed entries so you can use a",
    "start": "358880",
    "end": "361600"
  },
  {
    "text": "big o of one to go to the last page and",
    "start": "361600",
    "end": "364639"
  },
  {
    "text": "you can go to the bigger phone to go to",
    "start": "364639",
    "end": "366319"
  },
  {
    "text": "the first page",
    "start": "366319",
    "end": "367759"
  },
  {
    "text": "that cost nothing right you're not",
    "start": "367759",
    "end": "370639"
  },
  {
    "text": "looping through anything you know the",
    "start": "370639",
    "end": "372319"
  },
  {
    "text": "last page and if you go to the last page",
    "start": "372319",
    "end": "374400"
  },
  {
    "text": "you can pick the last",
    "start": "374400",
    "end": "377199"
  },
  {
    "text": "key and that key is the maximum if you",
    "start": "377199",
    "end": "381280"
  },
  {
    "text": "go to the first page and you pick the",
    "start": "381280",
    "end": "383120"
  },
  {
    "text": "first key that key is the minimum",
    "start": "383120",
    "end": "387039"
  },
  {
    "text": "and",
    "start": "387039",
    "end": "388160"
  },
  {
    "text": "obviously i'm admitting here that you",
    "start": "388160",
    "end": "390880"
  },
  {
    "text": "need you the database might",
    "start": "390880",
    "end": "394319"
  },
  {
    "text": "need to check if this entry is dead or",
    "start": "394319",
    "end": "398400"
  },
  {
    "text": "alive this is especially true in case of",
    "start": "398400",
    "end": "400240"
  },
  {
    "text": "postgres where it needs to go back to",
    "start": "400240",
    "end": "402639"
  },
  {
    "text": "the heap and fetch that page and check",
    "start": "402639",
    "end": "406160"
  },
  {
    "text": "the uh the the what do we call the hint",
    "start": "406160",
    "end": "409440"
  },
  {
    "text": "table the attempt columns to see okay",
    "start": "409440",
    "end": "411840"
  },
  {
    "text": "did someone delete this entry",
    "start": "411840",
    "end": "414319"
  },
  {
    "text": "did someone update this entry am i",
    "start": "414319",
    "end": "416479"
  },
  {
    "text": "looking in an old entry right and this",
    "start": "416479",
    "end": "418479"
  },
  {
    "text": "is where heap only tipple comes into the",
    "start": "418479",
    "end": "420479"
  },
  {
    "text": "picture and all that jazz but but in a",
    "start": "420479",
    "end": "423120"
  },
  {
    "text": "nutshell max and men are the best when",
    "start": "423120",
    "end": "425919"
  },
  {
    "text": "it comes to",
    "start": "425919",
    "end": "427039"
  },
  {
    "text": "when you when you have an index",
    "start": "427039",
    "end": "429360"
  },
  {
    "text": "obviously if you don't have index right",
    "start": "429360",
    "end": "431680"
  },
  {
    "text": "and you're asking hey give me that in",
    "start": "431680",
    "end": "434319"
  },
  {
    "text": "uh give me the maximum right",
    "start": "434319",
    "end": "438080"
  },
  {
    "text": "the database will suffer",
    "start": "438080",
    "end": "439840"
  },
  {
    "text": "right",
    "start": "439840",
    "end": "440639"
  },
  {
    "text": "as a result because there is no index",
    "start": "440639",
    "end": "442960"
  },
  {
    "text": "there is no order",
    "start": "442960",
    "end": "444319"
  },
  {
    "text": "right",
    "start": "444319",
    "end": "445360"
  },
  {
    "text": "that",
    "start": "445360",
    "end": "446479"
  },
  {
    "text": "kind of kills the database if you don't",
    "start": "446479",
    "end": "448000"
  },
  {
    "text": "have order",
    "start": "448000",
    "end": "449280"
  },
  {
    "text": "that's the database",
    "start": "449280",
    "end": "452160"
  },
  {
    "text": "databases at any i o workload hates",
    "start": "452160",
    "end": "455039"
  },
  {
    "text": "randomness like ssd",
    "start": "455039",
    "end": "457440"
  },
  {
    "text": "what kills ssd is randomness random",
    "start": "457440",
    "end": "459919"
  },
  {
    "text": "reads and random rights is just what",
    "start": "459919",
    "end": "462000"
  },
  {
    "text": "kills",
    "start": "462000",
    "end": "462880"
  },
  {
    "text": "any disk and any performance if you know",
    "start": "462880",
    "end": "466080"
  },
  {
    "text": "things are ordered and sorted this is",
    "start": "466080",
    "end": "468560"
  },
  {
    "text": "the best thing that's why most of the",
    "start": "468560",
    "end": "470319"
  },
  {
    "text": "you know interview questions like oh",
    "start": "470319",
    "end": "471840"
  },
  {
    "text": "sort this and so that and so that",
    "start": "471840",
    "end": "473919"
  },
  {
    "text": "sorting is really critical to get a data",
    "start": "473919",
    "end": "476479"
  },
  {
    "text": "structure that is sorted and if you know",
    "start": "476479",
    "end": "478639"
  },
  {
    "text": "things are sorted you can make so much",
    "start": "478639",
    "end": "480879"
  },
  {
    "start": "480000",
    "end": "690000"
  },
  {
    "text": "better assumptions as a result",
    "start": "480879",
    "end": "482879"
  },
  {
    "text": "so now these most of these aggregate",
    "start": "482879",
    "end": "484960"
  },
  {
    "text": "functions can't really take advantage of",
    "start": "484960",
    "end": "487520"
  },
  {
    "text": "indexes because we're scanning a large",
    "start": "487520",
    "end": "489520"
  },
  {
    "text": "number of data right and indexes are not",
    "start": "489520",
    "end": "492000"
  },
  {
    "text": "designed to scan",
    "start": "492000",
    "end": "493919"
  },
  {
    "text": "a large number of stuff and return them",
    "start": "493919",
    "end": "497360"
  },
  {
    "text": "it's designed to find",
    "start": "497360",
    "end": "499840"
  },
  {
    "text": "a few items that's what b3s are designed",
    "start": "499840",
    "end": "502879"
  },
  {
    "text": "for if you're looking for one or two or",
    "start": "502879",
    "end": "505120"
  },
  {
    "text": "ten or hundred things indexes are",
    "start": "505120",
    "end": "507840"
  },
  {
    "text": "beautiful for that but if you're",
    "start": "507840",
    "end": "509759"
  },
  {
    "text": "actually scanning the entire table or",
    "start": "509759",
    "end": "511840"
  },
  {
    "text": "large portion of it it just the index",
    "start": "511840",
    "end": "514560"
  },
  {
    "text": "the b3 will just slow you down it's",
    "start": "514560",
    "end": "516719"
  },
  {
    "text": "better to just read the direct table",
    "start": "516719",
    "end": "519680"
  },
  {
    "text": "so now what do we do with this count and",
    "start": "519680",
    "end": "522320"
  },
  {
    "text": "average and standard deviation functions",
    "start": "522320",
    "end": "525760"
  },
  {
    "text": "now if i only have to scan the table in",
    "start": "525760",
    "end": "528800"
  },
  {
    "text": "this case",
    "start": "528800",
    "end": "530000"
  },
  {
    "text": "then what if my table",
    "start": "530000",
    "end": "532560"
  },
  {
    "text": "is organized",
    "start": "532560",
    "end": "534560"
  },
  {
    "text": "such that",
    "start": "534560",
    "end": "535839"
  },
  {
    "text": "the columns are stored first",
    "start": "535839",
    "end": "539600"
  },
  {
    "text": "right so if you store the columns first",
    "start": "539600",
    "end": "542959"
  },
  {
    "text": "you know all the entries of",
    "start": "542959",
    "end": "545680"
  },
  {
    "text": "the columns",
    "start": "545680",
    "end": "547120"
  },
  {
    "text": "column by column",
    "start": "547120",
    "end": "549120"
  },
  {
    "text": "then a single io so if you store",
    "start": "549120",
    "end": "553279"
  },
  {
    "text": "the table",
    "start": "553279",
    "end": "555040"
  },
  {
    "text": "column by column so",
    "start": "555040",
    "end": "556880"
  },
  {
    "text": "you take column a and you pick all the",
    "start": "556880",
    "end": "560240"
  },
  {
    "text": "values for all the hundred million rows",
    "start": "560240",
    "end": "563200"
  },
  {
    "text": "and you actually store them that way",
    "start": "563200",
    "end": "565839"
  },
  {
    "text": "right and then you take the second",
    "start": "565839",
    "end": "567440"
  },
  {
    "text": "column and you do the same thing this",
    "start": "567440",
    "end": "569360"
  },
  {
    "text": "way a single read",
    "start": "569360",
    "end": "572160"
  },
  {
    "text": "in the page will give you just",
    "start": "572160",
    "end": "575600"
  },
  {
    "text": "beautiful",
    "start": "575600",
    "end": "577279"
  },
  {
    "text": "values of that column no garbage none",
    "start": "577279",
    "end": "581600"
  },
  {
    "text": "other none of the other stuff",
    "start": "581600",
    "end": "583519"
  },
  {
    "text": "this is unlike the row",
    "start": "583519",
    "end": "585680"
  },
  {
    "text": "storage model which most of the database",
    "start": "585680",
    "end": "588160"
  },
  {
    "text": "uses right so this comes back to the",
    "start": "588160",
    "end": "590240"
  },
  {
    "text": "discussion of column store versus rose",
    "start": "590240",
    "end": "592560"
  },
  {
    "text": "stone that's why",
    "start": "592560",
    "end": "594320"
  },
  {
    "text": "if you're doing analytics and",
    "start": "594320",
    "end": "595839"
  },
  {
    "text": "aggregation like that column store is",
    "start": "595839",
    "end": "598000"
  },
  {
    "text": "really the best because a single read",
    "start": "598000",
    "end": "600080"
  },
  {
    "text": "will give you just that",
    "start": "600080",
    "end": "602240"
  },
  {
    "text": "a collection of just that value",
    "start": "602240",
    "end": "605680"
  },
  {
    "text": "nothing else so that you're going to get",
    "start": "605680",
    "end": "608160"
  },
  {
    "text": "a lot from your i o",
    "start": "608160",
    "end": "610160"
  },
  {
    "text": "versus if you do a",
    "start": "610160",
    "end": "613040"
  },
  {
    "text": "single io to read a page that happens to",
    "start": "613200",
    "end": "615839"
  },
  {
    "text": "have all this column the salary column",
    "start": "615839",
    "end": "618240"
  },
  {
    "text": "and it has also the date of birth and",
    "start": "618240",
    "end": "620720"
  },
  {
    "text": "you have also the name and the first",
    "start": "620720",
    "end": "622320"
  },
  {
    "text": "name which you're gonna throw away",
    "start": "622320",
    "end": "624320"
  },
  {
    "text": "because you're not gonna read of that so",
    "start": "624320",
    "end": "626240"
  },
  {
    "text": "the trick here is to minimize the number",
    "start": "626240",
    "end": "628640"
  },
  {
    "text": "of ios that's why analytics and",
    "start": "628640",
    "end": "630880"
  },
  {
    "text": "aggregation are our best use cases for",
    "start": "630880",
    "end": "634079"
  },
  {
    "text": "column store and column store families",
    "start": "634079",
    "end": "636079"
  },
  {
    "text": "you know like uh",
    "start": "636079",
    "end": "638160"
  },
  {
    "text": "i believe many adb have a column store",
    "start": "638160",
    "end": "641440"
  },
  {
    "text": "a sap hana has a corner store",
    "start": "641440",
    "end": "644560"
  },
  {
    "text": "cassandra has a column store option even",
    "start": "644560",
    "end": "646959"
  },
  {
    "text": "postgres you can install an extension to",
    "start": "646959",
    "end": "649040"
  },
  {
    "text": "make it a column store this workload is",
    "start": "649040",
    "end": "651600"
  },
  {
    "text": "called usually the all app online",
    "start": "651600",
    "end": "654880"
  },
  {
    "text": "online and letter analytic and",
    "start": "654880",
    "end": "656560"
  },
  {
    "text": "processing to your analysis right so",
    "start": "656560",
    "end": "659200"
  },
  {
    "text": "this comes back to all this aggregates",
    "start": "659200",
    "end": "661600"
  },
  {
    "text": "and",
    "start": "661600",
    "end": "662560"
  },
  {
    "text": "it really comes down to",
    "start": "662560",
    "end": "665440"
  },
  {
    "text": "what the database is doing and once you",
    "start": "665440",
    "end": "667279"
  },
  {
    "text": "really understand what the function your",
    "start": "667279",
    "end": "669120"
  },
  {
    "text": "executed is doing and then how is your",
    "start": "669120",
    "end": "672079"
  },
  {
    "text": "data stored",
    "start": "672079",
    "end": "673440"
  },
  {
    "text": "and",
    "start": "673440",
    "end": "675040"
  },
  {
    "text": "you can go more into more tuning like",
    "start": "675040",
    "end": "677680"
  },
  {
    "text": "fill factor and how much a page can have",
    "start": "677680",
    "end": "680320"
  },
  {
    "text": "data and this comes really it becomes",
    "start": "680320",
    "end": "682800"
  },
  {
    "text": "really important in case of clustering",
    "start": "682800",
    "end": "684560"
  },
  {
    "text": "which is the next final point that i",
    "start": "684560",
    "end": "686959"
  },
  {
    "text": "want to make",
    "start": "686959",
    "end": "688560"
  },
  {
    "text": "if you have a clustered",
    "start": "688560",
    "end": "690480"
  },
  {
    "start": "690000",
    "end": "840000"
  },
  {
    "text": "index",
    "start": "690480",
    "end": "691600"
  },
  {
    "text": "right or a clustered table",
    "start": "691600",
    "end": "694880"
  },
  {
    "text": "usually a cluster table is a table that",
    "start": "694880",
    "end": "696560"
  },
  {
    "text": "has a primary key and we really mean a",
    "start": "696560",
    "end": "698880"
  },
  {
    "text": "primary key that is actual primary key",
    "start": "698880",
    "end": "700800"
  },
  {
    "text": "here which is",
    "start": "700800",
    "end": "702640"
  },
  {
    "text": "the table itself is no longer just this",
    "start": "702640",
    "end": "705920"
  },
  {
    "text": "random blob of heap that has just rows",
    "start": "705920",
    "end": "710079"
  },
  {
    "text": "right stored in in whatever the insert",
    "start": "710079",
    "end": "714079"
  },
  {
    "text": "order happen to come no the a cluster",
    "start": "714079",
    "end": "718560"
  },
  {
    "text": "table is an order table around that",
    "start": "718560",
    "end": "722399"
  },
  {
    "text": "primary key so if you have a primary key",
    "start": "722399",
    "end": "726000"
  },
  {
    "text": "that is integer",
    "start": "726000",
    "end": "728639"
  },
  {
    "text": "you know",
    "start": "728639",
    "end": "729600"
  },
  {
    "text": "that means any value so you insert a",
    "start": "729600",
    "end": "732240"
  },
  {
    "text": "value of one",
    "start": "732240",
    "end": "734480"
  },
  {
    "text": "the the value will go to this page one",
    "start": "734480",
    "end": "737440"
  },
  {
    "text": "and if you have a value of two it will",
    "start": "737440",
    "end": "739200"
  },
  {
    "text": "go next to it three go next to it if you",
    "start": "739200",
    "end": "741920"
  },
  {
    "text": "enter in insert",
    "start": "741920",
    "end": "743519"
  },
  {
    "text": "100",
    "start": "743519",
    "end": "744800"
  },
  {
    "text": "it will make a space and insert it",
    "start": "744800",
    "end": "746800"
  },
  {
    "text": "somewhere else right",
    "start": "746800",
    "end": "748800"
  },
  {
    "text": "and then if you insert four it will find",
    "start": "748800",
    "end": "752639"
  },
  {
    "text": "the three and insert the value right",
    "start": "752639",
    "end": "754720"
  },
  {
    "text": "there so it as you insert is the table",
    "start": "754720",
    "end": "758399"
  },
  {
    "text": "is actually ordered",
    "start": "758399",
    "end": "760399"
  },
  {
    "text": "you know",
    "start": "760399",
    "end": "761680"
  },
  {
    "text": "so oracle for example calls this an",
    "start": "761680",
    "end": "764000"
  },
  {
    "text": "index organized table iot and i i love",
    "start": "764000",
    "end": "768320"
  },
  {
    "text": "this because it's literally a table that",
    "start": "768320",
    "end": "770800"
  },
  {
    "text": "is organized around an index right sql",
    "start": "770800",
    "end": "774000"
  },
  {
    "text": "server calls it a clustered index and",
    "start": "774000",
    "end": "776320"
  },
  {
    "text": "you can only have one cluster index",
    "start": "776320",
    "end": "777839"
  },
  {
    "text": "because you can only order the table one",
    "start": "777839",
    "end": "780320"
  },
  {
    "text": "way right so if you have a table that is",
    "start": "780320",
    "end": "782480"
  },
  {
    "text": "already ordered by default the beauty of",
    "start": "782480",
    "end": "784959"
  },
  {
    "text": "this is if you do a read",
    "start": "784959",
    "end": "787600"
  },
  {
    "text": "you get everything that is actually",
    "start": "787600",
    "end": "789519"
  },
  {
    "text": "ordered",
    "start": "789519",
    "end": "790959"
  },
  {
    "text": "the bad thing about this is",
    "start": "790959",
    "end": "793040"
  },
  {
    "text": "your inserts slightly are suffering",
    "start": "793040",
    "end": "795760"
  },
  {
    "text": "because now every insert actually need",
    "start": "795760",
    "end": "797920"
  },
  {
    "text": "to to know where it where it needs to go",
    "start": "797920",
    "end": "801920"
  },
  {
    "text": "right because it's ordered",
    "start": "801920",
    "end": "803760"
  },
  {
    "text": "unlike an unknown clustered index you",
    "start": "803760",
    "end": "806079"
  },
  {
    "text": "don't need to order anything you know",
    "start": "806079",
    "end": "807519"
  },
  {
    "text": "under customers you just",
    "start": "807519",
    "end": "809200"
  },
  {
    "text": "insert insert insert insert inside",
    "start": "809200",
    "end": "811040"
  },
  {
    "text": "answer so you're not reading anything",
    "start": "811040",
    "end": "813519"
  },
  {
    "text": "just inserting so it's almost like",
    "start": "813519",
    "end": "815120"
  },
  {
    "text": "append only",
    "start": "815120",
    "end": "817200"
  },
  {
    "text": "versus a clustered index",
    "start": "817200",
    "end": "819920"
  },
  {
    "text": "no you have to",
    "start": "819920",
    "end": "822000"
  },
  {
    "text": "take that row and find where you need to",
    "start": "822000",
    "end": "824320"
  },
  {
    "text": "put it and it becomes really",
    "start": "824320",
    "end": "826839"
  },
  {
    "text": "interesting if you're",
    "start": "826839",
    "end": "829519"
  },
  {
    "text": "in two cases",
    "start": "829519",
    "end": "830959"
  },
  {
    "text": "right and we're gonna come to the count",
    "start": "830959",
    "end": "832560"
  },
  {
    "text": "and the average come back to that",
    "start": "832560",
    "end": "835839"
  },
  {
    "text": "if you are inserting",
    "start": "835839",
    "end": "839839"
  },
  {
    "start": "840000",
    "end": "1039000"
  },
  {
    "text": "sequential values like one two three",
    "start": "840160",
    "end": "842160"
  },
  {
    "text": "four five six seven eight so all",
    "start": "842160",
    "end": "843680"
  },
  {
    "text": "sequential you know you have a sequence",
    "start": "843680",
    "end": "845920"
  },
  {
    "text": "on the back end and that",
    "start": "845920",
    "end": "848320"
  },
  {
    "text": "primary key is organized around the",
    "start": "848320",
    "end": "850399"
  },
  {
    "text": "sequence you know",
    "start": "850399",
    "end": "852560"
  },
  {
    "text": "this is based on how the database",
    "start": "852560",
    "end": "854480"
  },
  {
    "text": "actually designed this",
    "start": "854480",
    "end": "856959"
  },
  {
    "text": "the",
    "start": "856959",
    "end": "857920"
  },
  {
    "text": "last page",
    "start": "857920",
    "end": "860320"
  },
  {
    "text": "will always be be the busiest page",
    "start": "860320",
    "end": "864000"
  },
  {
    "text": "because you're inserting right so what",
    "start": "864000",
    "end": "865760"
  },
  {
    "text": "does that mean because as you insert",
    "start": "865760",
    "end": "868800"
  },
  {
    "text": "like let's say you you're inserting",
    "start": "868800",
    "end": "870880"
  },
  {
    "text": "thousands of thousands of rows at the",
    "start": "870880",
    "end": "872560"
  },
  {
    "text": "same time",
    "start": "872560",
    "end": "873920"
  },
  {
    "text": "you'll have the one two three four five",
    "start": "873920",
    "end": "876320"
  },
  {
    "text": "six seven eight and then hundred and a",
    "start": "876320",
    "end": "878240"
  },
  {
    "text": "hundred and one hundred two all of these",
    "start": "878240",
    "end": "880639"
  },
  {
    "text": "are fighting on the",
    "start": "880639",
    "end": "882399"
  },
  {
    "text": "last or the tail page",
    "start": "882399",
    "end": "884880"
  },
  {
    "text": "so you have all these threads that are",
    "start": "884880",
    "end": "887120"
  },
  {
    "text": "trying to insert the same page and guess",
    "start": "887120",
    "end": "888959"
  },
  {
    "text": "what you need try to insert in memory",
    "start": "888959",
    "end": "891040"
  },
  {
    "text": "memory doesn't you cannot just write in",
    "start": "891040",
    "end": "892880"
  },
  {
    "text": "the memory like willy-nilly you have to",
    "start": "892880",
    "end": "895440"
  },
  {
    "text": "acquire a mutex you have to lock it the",
    "start": "895440",
    "end": "898480"
  },
  {
    "text": "moment you lock something",
    "start": "898480",
    "end": "900560"
  },
  {
    "text": "you start",
    "start": "900560",
    "end": "901600"
  },
  {
    "text": "failing the race conditions",
    "start": "901600",
    "end": "903600"
  },
  {
    "text": "you know so the insert actually slows",
    "start": "903600",
    "end": "906480"
  },
  {
    "text": "down",
    "start": "906480",
    "end": "908480"
  },
  {
    "text": "if you have",
    "start": "908480",
    "end": "909519"
  },
  {
    "text": "massive amount of right competing on",
    "start": "909519",
    "end": "911519"
  },
  {
    "text": "this",
    "start": "911519",
    "end": "912800"
  },
  {
    "text": "small amount of space you know on the",
    "start": "912800",
    "end": "915279"
  },
  {
    "text": "page itself this is where you need to",
    "start": "915279",
    "end": "917440"
  },
  {
    "text": "really think about",
    "start": "917440",
    "end": "919279"
  },
  {
    "text": "what you can do when it comes to that",
    "start": "919279",
    "end": "921199"
  },
  {
    "text": "this that particular case",
    "start": "921199",
    "end": "923440"
  },
  {
    "text": "technically",
    "start": "923440",
    "end": "924839"
  },
  {
    "text": "random roads are",
    "start": "924839",
    "end": "927920"
  },
  {
    "text": "kind of faster as this in sql server i'm",
    "start": "927920",
    "end": "930160"
  },
  {
    "text": "not sure about other databases but it",
    "start": "930160",
    "end": "932160"
  },
  {
    "text": "really",
    "start": "932160",
    "end": "933120"
  },
  {
    "text": "this comes down now you're on into the",
    "start": "933120",
    "end": "935519"
  },
  {
    "text": "advanced database engineering",
    "start": "935519",
    "end": "937839"
  },
  {
    "text": "right it's like okay how what does the",
    "start": "937839",
    "end": "939440"
  },
  {
    "text": "database actually do in that particular",
    "start": "939440",
    "end": "941600"
  },
  {
    "text": "case and very few people can access",
    "start": "941600",
    "end": "943440"
  },
  {
    "text": "answer these questions right",
    "start": "943440",
    "end": "945360"
  },
  {
    "text": "you're you're alone at this point you",
    "start": "945360",
    "end": "947360"
  },
  {
    "text": "know and trying to understand what's",
    "start": "947360",
    "end": "949360"
  },
  {
    "text": "happening low level at the database and",
    "start": "949360",
    "end": "951920"
  },
  {
    "text": "every database does this differently",
    "start": "951920",
    "end": "953680"
  },
  {
    "text": "some databases take this page and then",
    "start": "953680",
    "end": "955839"
  },
  {
    "text": "okay i'm going to write everything to",
    "start": "955839",
    "end": "957279"
  },
  {
    "text": "memory and then",
    "start": "957279",
    "end": "958959"
  },
  {
    "text": "as i write everything to memory i'm",
    "start": "958959",
    "end": "961279"
  },
  {
    "text": "going to flush my wall changes so i okay",
    "start": "961279",
    "end": "964560"
  },
  {
    "text": "so i have durability but also when i",
    "start": "964560",
    "end": "967199"
  },
  {
    "text": "write this",
    "start": "967199",
    "end": "968399"
  },
  {
    "text": "right i write everything into the same",
    "start": "968399",
    "end": "970240"
  },
  {
    "text": "page",
    "start": "970240",
    "end": "971440"
  },
  {
    "text": "i have sequential slowdown because",
    "start": "971440",
    "end": "974480"
  },
  {
    "text": "because only one thing can be written to",
    "start": "974480",
    "end": "977759"
  },
  {
    "text": "a specific page the memory location at a",
    "start": "977759",
    "end": "980720"
  },
  {
    "text": "specific time right it's just",
    "start": "980720",
    "end": "983839"
  },
  {
    "text": "you can't have multiple",
    "start": "983839",
    "end": "986399"
  },
  {
    "text": "like this",
    "start": "986399",
    "end": "987600"
  },
  {
    "text": "at this point we're we're we're with",
    "start": "987600",
    "end": "990320"
  },
  {
    "text": "we're at our limitation when it comes to",
    "start": "990320",
    "end": "992320"
  },
  {
    "text": "cpu writing to a piece of memory",
    "start": "992320",
    "end": "994800"
  },
  {
    "text": "no two cpus can write into the piece",
    "start": "994800",
    "end": "997040"
  },
  {
    "text": "same piece of memory at the same time",
    "start": "997040",
    "end": "998800"
  },
  {
    "text": "the bus controls that right",
    "start": "998800",
    "end": "1002160"
  },
  {
    "text": "so",
    "start": "1002160",
    "end": "1003440"
  },
  {
    "text": "we had limitations and once you",
    "start": "1003440",
    "end": "1004880"
  },
  {
    "text": "understand these limitations",
    "start": "1004880",
    "end": "1006800"
  },
  {
    "text": "you go into",
    "start": "1006800",
    "end": "1008320"
  },
  {
    "text": "trying to actually improve this",
    "start": "1008320",
    "end": "1009839"
  },
  {
    "text": "limitation but yeah this is one",
    "start": "1009839",
    "end": "1011440"
  },
  {
    "text": "limitation",
    "start": "1011440",
    "end": "1012880"
  },
  {
    "text": "the the sequential thing and i'm not",
    "start": "1012880",
    "end": "1015040"
  },
  {
    "text": "quite sure how to",
    "start": "1015040",
    "end": "1016480"
  },
  {
    "text": "get away with it to be honest uh this is",
    "start": "1016480",
    "end": "1020399"
  },
  {
    "text": "this is really way above my head when it",
    "start": "1020399",
    "end": "1023279"
  },
  {
    "text": "comes to this thing i'm not really an",
    "start": "1023279",
    "end": "1024959"
  },
  {
    "text": "advanced you know i i don't write",
    "start": "1024959",
    "end": "1027038"
  },
  {
    "text": "database uh systems but this is these",
    "start": "1027039",
    "end": "1029760"
  },
  {
    "text": "are kind of questions that people take",
    "start": "1029760",
    "end": "1031360"
  },
  {
    "text": "phds and try to answer these this is",
    "start": "1031360",
    "end": "1033520"
  },
  {
    "text": "like very advanced stuff",
    "start": "1033520",
    "end": "1035600"
  },
  {
    "text": "so the other thing is let's have a",
    "start": "1035600",
    "end": "1037918"
  },
  {
    "text": "primary key as a random",
    "start": "1037919",
    "end": "1039839"
  },
  {
    "start": "1039000",
    "end": "1230000"
  },
  {
    "text": "now if the primary key is random",
    "start": "1039839",
    "end": "1042959"
  },
  {
    "text": "then",
    "start": "1042959",
    "end": "1043760"
  },
  {
    "text": "well",
    "start": "1043760",
    "end": "1044558"
  },
  {
    "text": "if i'm going to insert",
    "start": "1044559",
    "end": "1046160"
  },
  {
    "text": "what i'm what i'm what i'm going to do",
    "start": "1046160",
    "end": "1048160"
  },
  {
    "text": "is",
    "start": "1048160",
    "end": "1050400"
  },
  {
    "text": "a uuid for example here it's completely",
    "start": "1051360",
    "end": "1054080"
  },
  {
    "text": "random so as you insert",
    "start": "1054080",
    "end": "1057280"
  },
  {
    "text": "you don't have these locks anymore",
    "start": "1057280",
    "end": "1059679"
  },
  {
    "text": "so your right will be fast because",
    "start": "1059679",
    "end": "1062080"
  },
  {
    "text": "no",
    "start": "1062080",
    "end": "1062960"
  },
  {
    "text": "two writes will ever compete on the same",
    "start": "1062960",
    "end": "1065280"
  },
  {
    "text": "page almost",
    "start": "1065280",
    "end": "1067039"
  },
  {
    "text": "they will always have their right to",
    "start": "1067039",
    "end": "1069120"
  },
  {
    "text": "their own memory location so that's nice",
    "start": "1069120",
    "end": "1071280"
  },
  {
    "text": "random",
    "start": "1071280",
    "end": "1072400"
  },
  {
    "text": "but",
    "start": "1072400",
    "end": "1073280"
  },
  {
    "text": "guess what",
    "start": "1073280",
    "end": "1074400"
  },
  {
    "text": "as you write",
    "start": "1074400",
    "end": "1076080"
  },
  {
    "text": "to a page you need to pull it in memory",
    "start": "1076080",
    "end": "1078880"
  },
  {
    "text": "right so let's say random uid number one",
    "start": "1078880",
    "end": "1082480"
  },
  {
    "text": "this page",
    "start": "1082480",
    "end": "1083600"
  },
  {
    "text": "and then",
    "start": "1083600",
    "end": "1084480"
  },
  {
    "text": "the the id number two",
    "start": "1084480",
    "end": "1087520"
  },
  {
    "text": "page seven your id number three page a",
    "start": "1087520",
    "end": "1090640"
  },
  {
    "text": "hundred and eighteen so you're pulling",
    "start": "1090640",
    "end": "1092640"
  },
  {
    "text": "this page in memory but you almost never",
    "start": "1092640",
    "end": "1096480"
  },
  {
    "text": "never",
    "start": "1096480",
    "end": "1098000"
  },
  {
    "text": "write to them you just",
    "start": "1098000",
    "end": "1099760"
  },
  {
    "text": "pull something in memory write to it",
    "start": "1099760",
    "end": "1101520"
  },
  {
    "text": "once and you keep it in memory dirty",
    "start": "1101520",
    "end": "1104080"
  },
  {
    "text": "right",
    "start": "1104080",
    "end": "1105200"
  },
  {
    "text": "what we call a buffer pool you keep you",
    "start": "1105200",
    "end": "1107919"
  },
  {
    "text": "keep these pages in memory yeah your",
    "start": "1107919",
    "end": "1109840"
  },
  {
    "text": "rights are fast but your memory is",
    "start": "1109840",
    "end": "1111679"
  },
  {
    "text": "filling up real quick",
    "start": "1111679",
    "end": "1114080"
  },
  {
    "text": "this is unlike the sequential one you",
    "start": "1114080",
    "end": "1115760"
  },
  {
    "text": "have you have just one page that is hot",
    "start": "1115760",
    "end": "1118880"
  },
  {
    "text": "you're just writing to the same page but",
    "start": "1118880",
    "end": "1120559"
  },
  {
    "text": "now you're competing on",
    "start": "1120559",
    "end": "1122480"
  },
  {
    "text": "frankly speaking cpu i guess right look",
    "start": "1122480",
    "end": "1124799"
  },
  {
    "text": "at the memory is just we have one memory",
    "start": "1124799",
    "end": "1126480"
  },
  {
    "text": "and where everybody's just trying to",
    "start": "1126480",
    "end": "1128480"
  },
  {
    "text": "compete on writing to that single page",
    "start": "1128480",
    "end": "1131919"
  },
  {
    "text": "which we you have",
    "start": "1131919",
    "end": "1133840"
  },
  {
    "text": "effectively effectively mutex and",
    "start": "1133840",
    "end": "1135679"
  },
  {
    "text": "latches",
    "start": "1135679",
    "end": "1137039"
  },
  {
    "text": "and people competing to write to that",
    "start": "1137039",
    "end": "1138799"
  },
  {
    "text": "same page versus the random uid you have",
    "start": "1138799",
    "end": "1142480"
  },
  {
    "text": "everything",
    "start": "1142480",
    "end": "1143600"
  },
  {
    "text": "effectively writing the random one and",
    "start": "1143600",
    "end": "1145360"
  },
  {
    "text": "uid might start fast",
    "start": "1145360",
    "end": "1148320"
  },
  {
    "text": "once your memory pool",
    "start": "1148320",
    "end": "1151039"
  },
  {
    "text": "is filled the ram is filled",
    "start": "1151039",
    "end": "1154400"
  },
  {
    "text": "you're dead",
    "start": "1154400",
    "end": "1155600"
  },
  {
    "text": "because",
    "start": "1155600",
    "end": "1156640"
  },
  {
    "text": "what what happened when you filled the",
    "start": "1156640",
    "end": "1158240"
  },
  {
    "text": "buffer pool you have all these dirty",
    "start": "1158240",
    "end": "1160240"
  },
  {
    "text": "pages",
    "start": "1160240",
    "end": "1161360"
  },
  {
    "text": "you effectively trigger what we call a",
    "start": "1161360",
    "end": "1163679"
  },
  {
    "text": "checkpoint",
    "start": "1163679",
    "end": "1165360"
  },
  {
    "text": "and when you trigger checkpoints is",
    "start": "1165360",
    "end": "1167280"
  },
  {
    "text": "databases",
    "start": "1167280",
    "end": "1168559"
  },
  {
    "text": "hold the up",
    "start": "1168559",
    "end": "1170559"
  },
  {
    "text": "i need to write everything that i have a",
    "start": "1170559",
    "end": "1172799"
  },
  {
    "text": "memory i have so much",
    "start": "1172799",
    "end": "1174799"
  },
  {
    "text": " in my memory i need to write it to",
    "start": "1174799",
    "end": "1177520"
  },
  {
    "text": "desk right now",
    "start": "1177520",
    "end": "1179200"
  },
  {
    "text": "stop so we'll just just takes all the",
    "start": "1179200",
    "end": "1183679"
  },
  {
    "text": "resources it needs to flush",
    "start": "1183679",
    "end": "1186400"
  },
  {
    "text": "all these pages",
    "start": "1186400",
    "end": "1188080"
  },
  {
    "text": "to desk",
    "start": "1188080",
    "end": "1189679"
  },
  {
    "text": "affordability and checkpointing reasons",
    "start": "1189679",
    "end": "1192559"
  },
  {
    "text": "and this is so expensive and if it keeps",
    "start": "1192559",
    "end": "1195600"
  },
  {
    "text": "happening over and over again as you",
    "start": "1195600",
    "end": "1197520"
  },
  {
    "text": "fill the memory with all these dirty",
    "start": "1197520",
    "end": "1198880"
  },
  {
    "text": "pages and and and sadly these pages are",
    "start": "1198880",
    "end": "1204159"
  },
  {
    "text": "so",
    "start": "1204159",
    "end": "1205360"
  },
  {
    "text": "lightly written you have one page that",
    "start": "1205360",
    "end": "1208320"
  },
  {
    "text": "changed one byte now",
    "start": "1208320",
    "end": "1211039"
  },
  {
    "text": "i'm exaggerating you change one thing in",
    "start": "1211039",
    "end": "1212799"
  },
  {
    "text": "this uid and then you write it down",
    "start": "1212799",
    "end": "1215600"
  },
  {
    "text": "you know how sad this is",
    "start": "1215600",
    "end": "1218480"
  },
  {
    "text": "you just waste the the right",
    "start": "1218480",
    "end": "1221240"
  },
  {
    "text": "amplification that is happening in all",
    "start": "1221240",
    "end": "1224320"
  },
  {
    "text": "the layers from the database layer to",
    "start": "1224320",
    "end": "1226960"
  },
  {
    "text": "the file system to the ssd to the many",
    "start": "1226960",
    "end": "1231280"
  },
  {
    "start": "1230000",
    "end": "1371000"
  },
  {
    "text": "lbas that you need to hit oh my god so",
    "start": "1231280",
    "end": "1235919"
  },
  {
    "text": "we're we're screwed either way",
    "start": "1235919",
    "end": "1238480"
  },
  {
    "text": "with clustered that's why you have to",
    "start": "1238480",
    "end": "1240159"
  },
  {
    "text": "really be careful when it comes to",
    "start": "1240159",
    "end": "1241600"
  },
  {
    "text": "clustered it and i i don't have all the",
    "start": "1241600",
    "end": "1243440"
  },
  {
    "text": "answers guys i'm just telling you what",
    "start": "1243440",
    "end": "1245200"
  },
  {
    "text": "it is to be honest",
    "start": "1245200",
    "end": "1247280"
  },
  {
    "text": "and again these these are kind of dive",
    "start": "1247280",
    "end": "1249760"
  },
  {
    "text": "deep discussion and we went into all",
    "start": "1249760",
    "end": "1252240"
  },
  {
    "text": "this stuff because of the i gotta get a",
    "start": "1252240",
    "end": "1254000"
  },
  {
    "text": "function right if you come back",
    "start": "1254000",
    "end": "1256640"
  },
  {
    "text": "the aggregate function come back to the",
    "start": "1256640",
    "end": "1258720"
  },
  {
    "text": "first question",
    "start": "1258720",
    "end": "1260080"
  },
  {
    "text": "what is uh likely to use the index count",
    "start": "1260080",
    "end": "1263840"
  },
  {
    "text": "and average",
    "start": "1263840",
    "end": "1265039"
  },
  {
    "text": "if your tables are clustered",
    "start": "1265039",
    "end": "1267679"
  },
  {
    "text": "it will use the index",
    "start": "1267679",
    "end": "1269679"
  },
  {
    "text": "why",
    "start": "1269679",
    "end": "1270559"
  },
  {
    "text": "because the index is the table",
    "start": "1270559",
    "end": "1273760"
  },
  {
    "text": "right",
    "start": "1273760",
    "end": "1274799"
  },
  {
    "text": "because it's a clustered index",
    "start": "1274799",
    "end": "1276880"
  },
  {
    "text": "and what it will effectively do",
    "start": "1276880",
    "end": "1279360"
  },
  {
    "text": "it's it's a cluster index that is",
    "start": "1279360",
    "end": "1280960"
  },
  {
    "text": "there's the b through the internal nodes",
    "start": "1280960",
    "end": "1282960"
  },
  {
    "text": "and then all of a sudden at the end the",
    "start": "1282960",
    "end": "1285039"
  },
  {
    "text": "root you have the chain i'm assuming",
    "start": "1285039",
    "end": "1287679"
  },
  {
    "text": "also b plus three not all people use b",
    "start": "1287679",
    "end": "1290480"
  },
  {
    "text": "trees anymore i talk about all that",
    "start": "1290480",
    "end": "1292480"
  },
  {
    "text": "stuff by the way in my course shameless",
    "start": "1292480",
    "end": "1294400"
  },
  {
    "text": "plug uh go to database. and sort of come",
    "start": "1294400",
    "end": "1297039"
  },
  {
    "text": "to",
    "start": "1297039",
    "end": "1298000"
  },
  {
    "text": "enjoy the learning experience with me",
    "start": "1298000",
    "end": "1300799"
  },
  {
    "text": "but yeah so you have this chain of pages",
    "start": "1300799",
    "end": "1303440"
  },
  {
    "text": "with all these clustered keys together",
    "start": "1303440",
    "end": "1306080"
  },
  {
    "text": "so and and every page points to the next",
    "start": "1306080",
    "end": "1308480"
  },
  {
    "text": "one points to the next one so",
    "start": "1308480",
    "end": "1310400"
  },
  {
    "text": "a scan of the a a clustered indexes scan",
    "start": "1310400",
    "end": "1314640"
  },
  {
    "text": "as sql code sql server calls it is an",
    "start": "1314640",
    "end": "1318080"
  },
  {
    "text": "identical to a table scan right so yeah",
    "start": "1318080",
    "end": "1321440"
  },
  {
    "text": "if you want to be tricky",
    "start": "1321440",
    "end": "1323520"
  },
  {
    "text": "you could say i was saying but yeah",
    "start": "1323520",
    "end": "1326159"
  },
  {
    "text": "actually now if the table is clustered",
    "start": "1326159",
    "end": "1329440"
  },
  {
    "text": "then these functions will always use the",
    "start": "1329440",
    "end": "1332000"
  },
  {
    "text": "index because the index is the table you",
    "start": "1332000",
    "end": "1334240"
  },
  {
    "text": "can you can play with that i don't want",
    "start": "1334240",
    "end": "1335840"
  },
  {
    "text": "to have i don't have i would have to",
    "start": "1335840",
    "end": "1337840"
  },
  {
    "text": "agree with you in that case right",
    "start": "1337840",
    "end": "1340240"
  },
  {
    "text": "but",
    "start": "1340240",
    "end": "1341039"
  },
  {
    "text": "yeah that's what i wanted to talk about",
    "start": "1341039",
    "end": "1342720"
  },
  {
    "text": "uh sorry if i'm all over the place but i",
    "start": "1342720",
    "end": "1345200"
  },
  {
    "text": "i thought this topic is really",
    "start": "1345200",
    "end": "1346640"
  },
  {
    "text": "interesting because i have been bitten",
    "start": "1346640",
    "end": "1348400"
  },
  {
    "text": "so many times with these kind of",
    "start": "1348400",
    "end": "1350000"
  },
  {
    "text": "low-level details and as i more",
    "start": "1350000",
    "end": "1352480"
  },
  {
    "text": "understand more of these things i'd like",
    "start": "1352480",
    "end": "1354080"
  },
  {
    "text": "to share it with you guys and i think",
    "start": "1354080",
    "end": "1355679"
  },
  {
    "text": "some of you might find this beneficial",
    "start": "1355679",
    "end": "1357520"
  },
  {
    "text": "if you already know this knowledge then",
    "start": "1357520",
    "end": "1359520"
  },
  {
    "text": "obviously he didn't learn it he didn't",
    "start": "1359520",
    "end": "1361520"
  },
  {
    "text": "he didn't he didn't get anything of this",
    "start": "1361520",
    "end": "1363520"
  },
  {
    "text": "video but if you did",
    "start": "1363520",
    "end": "1365600"
  },
  {
    "text": "give this video a like and share with",
    "start": "1365600",
    "end": "1367280"
  },
  {
    "text": "your friend and i'm going to see on the",
    "start": "1367280",
    "end": "1368400"
  },
  {
    "text": "next one yesterday as well goodbye",
    "start": "1368400",
    "end": "1372320"
  }
]