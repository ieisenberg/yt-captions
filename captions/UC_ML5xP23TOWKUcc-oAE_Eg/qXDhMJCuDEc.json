[
  {
    "start": "0",
    "end": "108000"
  },
  {
    "text": "in database engineering io is the currency that we deal with",
    "start": "80",
    "end": "8000"
  },
  {
    "text": "whether that is an io that is going to a mechanical drive",
    "start": "8000",
    "end": "15040"
  },
  {
    "text": "or to an ssd drive or to a page in memory",
    "start": "15040",
    "end": "22640"
  },
  {
    "text": "you know that is cached or even to the os file system cache",
    "start": "22640",
    "end": "30720"
  },
  {
    "text": "it's an io regardless yeah you can argue that and one io can be faster than the other but it is an io",
    "start": "30720",
    "end": "38399"
  },
  {
    "text": "and the goal that we do as database engineers and backend engineers and",
    "start": "38399",
    "end": "43840"
  },
  {
    "text": "anyone who build applications is to try to minimize the number of ios",
    "start": "43840",
    "end": "50559"
  },
  {
    "text": "being logical or physical logical you can't think of logical as",
    "start": "50559",
    "end": "56719"
  },
  {
    "text": "i'm hitting the cache you know so obviously",
    "start": "56719",
    "end": "62160"
  },
  {
    "text": "one read one io is better than one million i or even if",
    "start": "62160",
    "end": "67600"
  },
  {
    "text": "that those million going to the cache does that make sense and",
    "start": "67600",
    "end": "72960"
  },
  {
    "text": "the topics of today topics topic one topic the topic of today i want to discuss",
    "start": "72960",
    "end": "79280"
  },
  {
    "text": "one property in the index that is called fill",
    "start": "79280",
    "end": "84960"
  },
  {
    "text": "that factor of helps minimize the number of i o",
    "start": "84960",
    "end": "91119"
  },
  {
    "text": "depending on your use case right and this is a property of",
    "start": "91119",
    "end": "96880"
  },
  {
    "text": "usually of indexes or any sorted data structure that is a",
    "start": "96880",
    "end": "102479"
  },
  {
    "text": "cluster table which you can argue it's actually an index all right how about we actually discuss this",
    "start": "102479",
    "end": "108880"
  },
  {
    "start": "108000",
    "end": "270000"
  },
  {
    "text": "welcome to the backend engineering show with your host hussein nasser and quick",
    "start": "108880",
    "end": "114159"
  },
  {
    "text": "shout out before we jump into the show if you enjoy this content and you can't",
    "start": "114159",
    "end": "120079"
  },
  {
    "text": "really watch it on youtube this show is available on all your favorite podcasting listening",
    "start": "120079",
    "end": "127840"
  },
  {
    "text": "platform just google the backend engineering shows available spotify",
    "start": "127840",
    "end": "134160"
  },
  {
    "text": "um google podcast apple podcast all that jazz listen through that and",
    "start": "134160",
    "end": "141360"
  },
  {
    "text": "appreciate your support but but just by listening you're actually supporting the show uh raiding the show helps uh boost",
    "start": "141360",
    "end": "148400"
  },
  {
    "text": "it up in all the algorithms that are out there it's funny that we are being run by",
    "start": "148400",
    "end": "155920"
  },
  {
    "text": "robots if you think about it really we're at the mercy of algorithms which are nothing but a iron",
    "start": "155920",
    "end": "162720"
  },
  {
    "text": "those are robots the revolution is already here my friends we are run by roberts",
    "start": "162720",
    "end": "169519"
  },
  {
    "text": "okay that was too deep let's jump into the show guys another thing i want to mention is if you like",
    "start": "169519",
    "end": "175680"
  },
  {
    "text": "my content consider checking out my courses i have a few of them since this is a database topic",
    "start": "175680",
    "end": "183200"
  },
  {
    "text": "check my database course so really popular people like it it's over 20 hours worth of content and uh",
    "start": "183200",
    "end": "191040"
  },
  {
    "text": "it's uh it's really a course that i wish i had when i was first learning database",
    "start": "191040",
    "end": "196879"
  },
  {
    "text": "engine i took my experience basically from you know roughly in 15 years worth",
    "start": "196879",
    "end": "202400"
  },
  {
    "text": "of database experience 20 years total and i try to boil them into you know",
    "start": "202400",
    "end": "209440"
  },
  {
    "text": "practical as much as you know bottom up so to speak",
    "start": "209440",
    "end": "214720"
  },
  {
    "text": "experience where okay we have these things but why do they exist you know try to link them back up to",
    "start": "214720",
    "end": "222000"
  },
  {
    "text": "use cases and useful things instead of you know when you're in a university we're just basically being taught things",
    "start": "222000",
    "end": "229920"
  },
  {
    "text": "hey this is an index shut up and use it you know oh this is this and just just use it that this is a window size tcp",
    "start": "229920",
    "end": "237360"
  },
  {
    "text": "window size it yeah why why no no reason just just learn it and",
    "start": "237360",
    "end": "243920"
  },
  {
    "text": "move on with your life uh yeah i always was confused about things that are",
    "start": "243920",
    "end": "249040"
  },
  {
    "text": "i don't know why they exist and i try to answer the question of a why in all my",
    "start": "249040",
    "end": "254319"
  },
  {
    "text": "videos really all right so database.josemaster.com is also available right here",
    "start": "254319",
    "end": "259840"
  },
  {
    "text": "now if you want to get a coupon for the udemy course appreciate your",
    "start": "259840",
    "end": "265440"
  },
  {
    "text": "support let's get on with the show so if we thought about how",
    "start": "265440",
    "end": "272080"
  },
  {
    "start": "270000",
    "end": "390000"
  },
  {
    "text": "a table is formed right and for simplicity let's let's assume a row store instead of a",
    "start": "272080",
    "end": "278960"
  },
  {
    "text": "column store you know so you would basically you'll have a block of memory",
    "start": "278960",
    "end": "285120"
  },
  {
    "text": "and you're going to add your rows and each row will have a bunch of columns so",
    "start": "285120",
    "end": "290240"
  },
  {
    "text": "they will be added padded one after the other you know just",
    "start": "290240",
    "end": "296800"
  },
  {
    "text": "the first row all it's column second row all its column so you can see if it's really a rectangle if you want to",
    "start": "296800",
    "end": "302960"
  },
  {
    "text": "visualize it as a rectangle it will be like this right the the rows like snake going multiple rows padded one after the",
    "start": "302960",
    "end": "310880"
  },
  {
    "text": "other you know and until one page is filled and depending on the database",
    "start": "310880",
    "end": "318240"
  },
  {
    "text": "uh you know page size mysql i believe is 16 kilobyte and postgres by default is",
    "start": "318240",
    "end": "324160"
  },
  {
    "text": "eight and you can change these so these pages is the unit of work and that's the",
    "start": "324160",
    "end": "330000"
  },
  {
    "text": "minimum thing we can read from a database speak so that's 8k",
    "start": "330000",
    "end": "335759"
  },
  {
    "text": "i don't want to go through actually how that 8k is actually translated to the file system that kind",
    "start": "335759",
    "end": "342160"
  },
  {
    "text": "of complicates the story because one 8k could be different one 8k page in the database logical",
    "start": "342160",
    "end": "351039"
  },
  {
    "text": "speak is different from a file system page you know that's the operating",
    "start": "351039",
    "end": "356319"
  },
  {
    "text": "system so if your database is built on top of the file system then there is another",
    "start": "356319",
    "end": "362080"
  },
  {
    "text": "layer of abstraction and database engineers try to remove that layer and go directly to the disk as much as",
    "start": "362080",
    "end": "368000"
  },
  {
    "text": "possible you know to avoid this kind of unneeded abstraction",
    "start": "368000",
    "end": "374319"
  },
  {
    "text": "what do we do try to sync up this two states as much as possible you know the sizes",
    "start": "374319",
    "end": "380639"
  },
  {
    "text": "you know but that's what we have effectively and this end up eventually as a page on disk or multiple pages you",
    "start": "380639",
    "end": "388080"
  },
  {
    "text": "know or blocks whatever the the name is convention for that device",
    "start": "388080",
    "end": "394160"
  },
  {
    "start": "390000",
    "end": "600000"
  },
  {
    "text": "the storage medium so the goal here is to write right a page or read a page let's think",
    "start": "394160",
    "end": "401919"
  },
  {
    "text": "about it this way right and the an io is the ability to read a page and",
    "start": "401919",
    "end": "409120"
  },
  {
    "text": "you can ask questions like can i reach can how many pages can i read in a single io and and",
    "start": "409120",
    "end": "415360"
  },
  {
    "text": "bear you can barely find any answers about this because it's so complex of a question really",
    "start": "415360",
    "end": "421039"
  },
  {
    "text": "and the operating system doesn't have a concept of pages per se when it comes to a device",
    "start": "421039",
    "end": "428880"
  },
  {
    "text": "itself you know says hey read me this in a single io in a single request",
    "start": "428880",
    "end": "434880"
  },
  {
    "text": "go and read from this position until this position and that's an io right so",
    "start": "434880",
    "end": "441039"
  },
  {
    "text": "you can technically read multiple pages in a single io or request if you will",
    "start": "441039",
    "end": "447759"
  },
  {
    "text": "but regardless so if the database know that it needs five pages",
    "start": "447759",
    "end": "452960"
  },
  {
    "text": "uh it will send multiple you know one request to fetch these five pages now i'm not",
    "start": "452960",
    "end": "460560"
  },
  {
    "text": "sure i'm not really an expert in operating system and those who listen to the show and watches the videos can can",
    "start": "460560",
    "end": "466800"
  },
  {
    "text": "maybe add add to this i couldn't find an interface that reads",
    "start": "466800",
    "end": "472240"
  },
  {
    "text": "multiple blocks from the desk with a single io it",
    "start": "472240",
    "end": "478879"
  },
  {
    "text": "has to be consecutive all right so you send a request okay send from read from this",
    "start": "478879",
    "end": "484479"
  },
  {
    "text": "position to this position that's one block right and then read this to this right",
    "start": "484479",
    "end": "490879"
  },
  {
    "text": "is there an api that allows you to read okay",
    "start": "490879",
    "end": "496160"
  },
  {
    "text": "here's one interval if you will you know here's",
    "start": "496160",
    "end": "501199"
  },
  {
    "text": "another range range is a better word read this range this range this range is",
    "start": "501199",
    "end": "506319"
  },
  {
    "text": "right so it's it's it's going to accept like an array of ranges you know i would if i would build something like that i",
    "start": "506319",
    "end": "512800"
  },
  {
    "text": "would build it this way you know i would accept an array of ranges so this way i send one request to the ssd controller",
    "start": "512800",
    "end": "520399"
  },
  {
    "text": "right hopefully the nvme have something like that i personally didn't see it but it",
    "start": "520399",
    "end": "525440"
  },
  {
    "text": "will say okay read this range this registry with a single call you know that's how i'd",
    "start": "525440",
    "end": "530480"
  },
  {
    "text": "build it i wouldn't build it such that it will it's like oh it's one call and you get one range this way",
    "start": "530480",
    "end": "536880"
  },
  {
    "text": "you'll require multiple calls this is basic api designs right but i'm not expert in that area so i",
    "start": "536880",
    "end": "542800"
  },
  {
    "text": "can't speak to what is the current implementation right but let's assume you you can read right",
    "start": "542800",
    "end": "548720"
  },
  {
    "text": "this is an io so that's the currency an io is the currency okay",
    "start": "548720",
    "end": "554399"
  },
  {
    "text": "and sure you can read multiple pages whether this is going to require one io or multiple that's out of the question i",
    "start": "554399",
    "end": "561360"
  },
  {
    "text": "hope i get an answer for that right i i really wish i can speak to like you know matthias who's like",
    "start": "561360",
    "end": "568000"
  },
  {
    "text": "the western digital kind of speaks person when it comes to nvme i really want to just talk to him i",
    "start": "568000",
    "end": "574560"
  },
  {
    "text": "have so many questions and unfortunately i don't have people who are expert to this but yeah um i wish we can have that kind",
    "start": "574560",
    "end": "582320"
  },
  {
    "text": "of discussion like this like i have so many questions when it comes to these things that i don't have answers and the mv aspect is so complex to read at least",
    "start": "582320",
    "end": "590000"
  },
  {
    "text": "for me personally maybe i'll get there one day so let's still continue talking about this we talked about the the concept of",
    "start": "590000",
    "end": "596240"
  },
  {
    "text": "a page and that's not so bad if you add these rows",
    "start": "596240",
    "end": "602079"
  },
  {
    "start": "600000",
    "end": "810000"
  },
  {
    "text": "one after the other in this page you know then they will just be appended one",
    "start": "602079",
    "end": "607279"
  },
  {
    "text": "after the other right doesn't really matter right that's when you actually add a table",
    "start": "607279",
    "end": "613440"
  },
  {
    "text": "but then if you index the things that then change right because we usually index a column or",
    "start": "613440",
    "end": "620079"
  },
  {
    "text": "multiple of columns right and what does it mean to really index",
    "start": "620079",
    "end": "625279"
  },
  {
    "text": "a column the beauty of index is to create this",
    "start": "625279",
    "end": "630480"
  },
  {
    "text": "structure that we call b3 and the goal is to sort",
    "start": "630480",
    "end": "637680"
  },
  {
    "text": "that is the most pinnacle important property of an index that",
    "start": "637680",
    "end": "644640"
  },
  {
    "text": "things are sorted right and don't think of it like it's just a",
    "start": "644640",
    "end": "649680"
  },
  {
    "text": "single blob of pages no it is actually brilliantly designed for",
    "start": "649680",
    "end": "656560"
  },
  {
    "text": "searching as well not just sorting but once you land on a page in an index",
    "start": "656560",
    "end": "663279"
  },
  {
    "text": "the column that you indexed all the values are sorted there so",
    "start": "663279",
    "end": "668800"
  },
  {
    "text": "let's say you are so let's say you're indexing on a column that is called the serial number",
    "start": "668800",
    "end": "677839"
  },
  {
    "text": "it's a string sure then that",
    "start": "677839",
    "end": "683440"
  },
  {
    "text": "serial numbers that look similar will live in the same page",
    "start": "683440",
    "end": "691519"
  },
  {
    "text": "let's be let's use that number for simplicity because it's gonna we're gonna come to strings and go ahead and uh id and",
    "start": "691519",
    "end": "698560"
  },
  {
    "text": "if the serial number then is actually serial like one two three four a thousand thousand and one thousand two",
    "start": "698560",
    "end": "704560"
  },
  {
    "text": "then the page that you're gonna read from an index is",
    "start": "704560",
    "end": "709839"
  },
  {
    "text": "if you're searching for serial number 2000 you're not going to get just one entry",
    "start": "709839",
    "end": "717040"
  },
  {
    "text": "from the index we talked about this because an io in the index",
    "start": "717040",
    "end": "722639"
  },
  {
    "text": "in in the database gives you at least a page there is no",
    "start": "722639",
    "end": "727920"
  },
  {
    "text": "byte addressability you know you get a whole page or a block think of it right",
    "start": "727920",
    "end": "734079"
  },
  {
    "text": "and that page when you make the query to pull it from the database",
    "start": "734079",
    "end": "739360"
  },
  {
    "text": "because the index lives in the in the desk sorry when you pull it from the desk the index lives in the desk",
    "start": "739360",
    "end": "745279"
  },
  {
    "text": "just on another data structure right gotta persist it we pull that page and we pick the value",
    "start": "745279",
    "end": "752000"
  },
  {
    "text": "two thousand not only we got two thousand we got two thousand",
    "start": "752000",
    "end": "757279"
  },
  {
    "text": "one thousand nine nine nine one thousand nine nine eight and anything after that as well 2001 2002",
    "start": "757279",
    "end": "764560"
  },
  {
    "text": "2003 up until whatever that",
    "start": "764560",
    "end": "769920"
  },
  {
    "text": "the last entry and the first entry in that page happened to be let's say 1800 is the first and the last one is",
    "start": "769920",
    "end": "776560"
  },
  {
    "text": "like you know 2 and 2 hundred right right",
    "start": "776560",
    "end": "781839"
  },
  {
    "text": "so you get a lot of stuff and that's good in some situations especially if you're",
    "start": "781839",
    "end": "787680"
  },
  {
    "text": "doing like a range query if you need those entries you got them it's there",
    "start": "787680",
    "end": "792880"
  },
  {
    "text": "you did the io right and that is the the important part here",
    "start": "792880",
    "end": "801040"
  },
  {
    "text": "so now because things are sorted in the index if i insert more rows",
    "start": "801040",
    "end": "807760"
  },
  {
    "text": "right then the index is responsible to shove",
    "start": "807760",
    "end": "814399"
  },
  {
    "start": "810000",
    "end": "1080000"
  },
  {
    "text": "the entry in the right page based on the sorting order",
    "start": "814399",
    "end": "821760"
  },
  {
    "text": "and that is the trick here because if i have a page and let's say let's start from scratch",
    "start": "821920",
    "end": "828480"
  },
  {
    "text": "i have an empty table and i'm indexing on the serial number here",
    "start": "828480",
    "end": "834160"
  },
  {
    "text": "and that serial number is not really a a sequence per se it's not like one two",
    "start": "834639",
    "end": "839680"
  },
  {
    "text": "three four no it's just i don't know random values so if i insert the value",
    "start": "839680",
    "end": "846320"
  },
  {
    "text": "the first row with a value of serial number 1 right then a page will be created and the",
    "start": "846320",
    "end": "853680"
  },
  {
    "text": "value of 1 will be inserted in the index and another the whole row will be obviously created in the heap and then",
    "start": "853680",
    "end": "860480"
  },
  {
    "text": "later flush to the memory and the table doesn't really need to have an order unless it's a clustered table right",
    "start": "860480",
    "end": "869199"
  },
  {
    "text": "so we have two structures the table and the index all right we insert one then let's say i inserted",
    "start": "869199",
    "end": "876079"
  },
  {
    "text": "one thousand well one thousand is another entry i have one page i'm gonna insert one thousand",
    "start": "876079",
    "end": "883279"
  },
  {
    "text": "then because there is a page available because 1000 comes after one right so it",
    "start": "883279",
    "end": "888720"
  },
  {
    "text": "fits right into the same page and then i inserted 2 000.",
    "start": "888720",
    "end": "895760"
  },
  {
    "text": "right 1 2000 is greater than 1000 then okay 2000 comes right after 1 000. and",
    "start": "895760",
    "end": "902079"
  },
  {
    "text": "you can see the gaps no physical gaps the logical gaps that",
    "start": "902079",
    "end": "907360"
  },
  {
    "text": "we have because there are numbers between thousand and 2000 and they are definitely numbers between one and one thousand",
    "start": "907360",
    "end": "913279"
  },
  {
    "text": "so now if you continue inserting values like five thousand six thousand ten thousand all of these will go to the",
    "start": "913279",
    "end": "920560"
  },
  {
    "text": "same page until that page is filled because it reached the page size which is 8k for",
    "start": "920560",
    "end": "926480"
  },
  {
    "text": "example in case of postgres and then we're gonna insert i don't know",
    "start": "926480",
    "end": "931839"
  },
  {
    "text": "let's say two right or left for simply let's say i'm going",
    "start": "931839",
    "end": "938000"
  },
  {
    "text": "to insert 10th uh 20 000 right 20 000 should go right after whatever the last",
    "start": "938000",
    "end": "944720"
  },
  {
    "text": "number 5000 but the page is full okay let's create a new",
    "start": "944720",
    "end": "950000"
  },
  {
    "text": "page and 2000 lives exactly next to that page because larger values go to the tail",
    "start": "950000",
    "end": "956320"
  },
  {
    "text": "that's not bad because we're going to the tail we're going at the end but what happened if i now",
    "start": "956320",
    "end": "963519"
  },
  {
    "text": "insert the number 2 well two actually comes right after one",
    "start": "963519",
    "end": "969600"
  },
  {
    "text": "which lives in this page which happened to be full",
    "start": "969600",
    "end": "974560"
  },
  {
    "text": "you cannot insert the two after the 20 000 that we just added so we have to go back to that full page",
    "start": "974720",
    "end": "981519"
  },
  {
    "text": "and we have to split that page",
    "start": "981519",
    "end": "986639"
  },
  {
    "text": "where the one and then insert the two right after that",
    "start": "987040",
    "end": "992160"
  },
  {
    "text": "and then reshuffle the values as a result so now we have two pages",
    "start": "992160",
    "end": "997519"
  },
  {
    "text": "with some space left in each of them that is",
    "start": "997519",
    "end": "1002720"
  },
  {
    "text": "extremely expensive and i talked about it in another show this page split okay",
    "start": "1002720",
    "end": "1008160"
  },
  {
    "text": "and it happens because of the random insert that we did i don't know what my dog is",
    "start": "1008160",
    "end": "1013199"
  },
  {
    "text": "doing so just understanding and i'm sure some of you as they listen to oh i have some",
    "start": "1013199",
    "end": "1020160"
  },
  {
    "text": "scenarios like that some of you might say oh no don't have any examples like that if you",
    "start": "1020160",
    "end": "1025199"
  },
  {
    "text": "have a serial number that keeps increasing autonomous what was the there is a word for it autonomously",
    "start": "1025199",
    "end": "1032079"
  },
  {
    "text": "you know what i'm talking about autonomous autonomous monotonically",
    "start": "1032079",
    "end": "1038558"
  },
  {
    "text": "i don't know what i'm talking about right so so if if the values are keep increasing then",
    "start": "1038559",
    "end": "1044880"
  },
  {
    "text": "that pages can be left alone you never like to go to and split the page because",
    "start": "1044880",
    "end": "1049919"
  },
  {
    "text": "first of all it's two reads uh first of all it's a get it read put a memory do some sort of",
    "start": "1049919",
    "end": "1055600"
  },
  {
    "text": "manipulation create two pages right uh put the values here figure out which",
    "start": "1055600",
    "end": "1062320"
  },
  {
    "text": "values go to which page then flush pause to disk so that single right inserts",
    "start": "1062320",
    "end": "1067840"
  },
  {
    "text": "will lead to multiple writes right depending on how",
    "start": "1067840",
    "end": "1072960"
  },
  {
    "text": "how small and the page will lead to so it's interesting um",
    "start": "1072960",
    "end": "1078960"
  },
  {
    "text": "grids or some people call them uuids are nefarious for this",
    "start": "1078960",
    "end": "1085200"
  },
  {
    "start": "1080000",
    "end": "1185000"
  },
  {
    "text": "if you use if you index a grid field or a uid field",
    "start": "1085200",
    "end": "1091360"
  },
  {
    "text": "uuids are random by nature",
    "start": "1091360",
    "end": "1096480"
  },
  {
    "text": "right so if you sort them uh",
    "start": "1096480",
    "end": "1102160"
  },
  {
    "text": "then there there is no choice but they will be all over the place right if you keep inserting goes words",
    "start": "1102160",
    "end": "1109760"
  },
  {
    "text": "they will be next to each other but then chances that a new grid will need to be",
    "start": "1109760",
    "end": "1115120"
  },
  {
    "text": "filled right after a certain good based on the alpha it depends like what's the data type if it's a string",
    "start": "1115120",
    "end": "1121360"
  },
  {
    "text": "then it goes into this like you use the alphabetical if it's an hexadecimal number then you use",
    "start": "1121360",
    "end": "1127039"
  },
  {
    "text": "different byte representation of what sorting comes after that but that's that's effectively it",
    "start": "1127039",
    "end": "1133120"
  },
  {
    "text": "right and i believe uuid version 4 has some sort of a",
    "start": "1133120",
    "end": "1138400"
  },
  {
    "text": "sorting mechanism they are naturally sorted only generated",
    "start": "1138400",
    "end": "1144320"
  },
  {
    "text": "as if the first x number of digits are the same that's nice i i",
    "start": "1144320",
    "end": "1150559"
  },
  {
    "text": "would like to see that but then i don't know how much collision that you get",
    "start": "1150559",
    "end": "1156559"
  },
  {
    "text": "you're gonna get with that right that's another topic right if you if you know that your ids are sorted then you're",
    "start": "1156559",
    "end": "1162240"
  },
  {
    "text": "gonna get better performance out of the database because they'll be nicely tucked one after the other right",
    "start": "1162240",
    "end": "1168799"
  },
  {
    "text": "but that's just another topic for other days that's why i keep saying the ui just be careful if you index a uid field",
    "start": "1168799",
    "end": "1175520"
  },
  {
    "text": "just know that this thing exists right and and",
    "start": "1175520",
    "end": "1180559"
  },
  {
    "text": "and and keep and keep in mind that this can happen so so how do we address this",
    "start": "1180559",
    "end": "1186880"
  },
  {
    "start": "1185000",
    "end": "1395000"
  },
  {
    "text": "problem in the index well one solution that",
    "start": "1186880",
    "end": "1193919"
  },
  {
    "text": "we came up with is to introduce a fill capacity in the page",
    "start": "1193919",
    "end": "1201039"
  },
  {
    "text": "four indexes because it doesn't make any sense for heap right if it's unordered right because it's unordered i'm not",
    "start": "1201039",
    "end": "1206960"
  },
  {
    "text": "gonna enforce any order right but fill factor has been introduced as a percentage",
    "start": "1206960",
    "end": "1213679"
  },
  {
    "text": "as you insert if you create a new page and as you insert values to this page once you",
    "start": "1213679",
    "end": "1220720"
  },
  {
    "text": "reach 80 of that page",
    "start": "1220720",
    "end": "1225760"
  },
  {
    "text": "stop don't use it anymore that's that's the trick here right",
    "start": "1225760",
    "end": "1232720"
  },
  {
    "text": "if you reach 70 that's the fill factor 70 keep filling the page until 70 off the",
    "start": "1232720",
    "end": "1239840"
  },
  {
    "text": "8k once you reach that leave the space",
    "start": "1239840",
    "end": "1245360"
  },
  {
    "text": "unfilled and then go to the next page given that you can actually do that",
    "start": "1245360",
    "end": "1253600"
  },
  {
    "text": "what does that mean all right if you're going to insert one two three four five",
    "start": "1253600",
    "end": "1259520"
  },
  {
    "text": "ten and the page reaches 70 then you want to represent 11 11 should",
    "start": "1259520",
    "end": "1265760"
  },
  {
    "text": "come after the 10 right then sure that will basically create a new page",
    "start": "1265760",
    "end": "1271840"
  },
  {
    "text": "leave the 30 free right so now if you",
    "start": "1271840",
    "end": "1277600"
  },
  {
    "text": "if you insert the value 11 just go to a new page right and 12 goes to the other page right",
    "start": "1277600",
    "end": "1283679"
  },
  {
    "text": "there but then if you want to insert the value i know three let's say we have one and",
    "start": "1283679",
    "end": "1291039"
  },
  {
    "text": "two and four but we don't have a three you can use that page you have to you use that pitch so you have a little bit",
    "start": "1291039",
    "end": "1297760"
  },
  {
    "text": "of a wiggle room to grow in that page and that is the the most important thing",
    "start": "1297760",
    "end": "1303120"
  },
  {
    "text": "in a fill factor representation of an index where you have at least you avoid splitting the",
    "start": "1303120",
    "end": "1309120"
  },
  {
    "text": "page because there is room to insert in that thing",
    "start": "1309120",
    "end": "1314640"
  },
  {
    "text": "so you want to leave room in the index if you have random inserting values",
    "start": "1314720",
    "end": "1321840"
  },
  {
    "text": "right in the page things like goods like or uid that are actually random or even integer numbers",
    "start": "1321840",
    "end": "1328720"
  },
  {
    "text": "that you know it's random this is gonna be coming in a random fashion",
    "start": "1328720",
    "end": "1333919"
  },
  {
    "text": "then having a full factor of eighty percent it depends it's all at the end of the day it's all subjective and really",
    "start": "1333919",
    "end": "1340320"
  },
  {
    "text": "depends on i guess use cases and testing and trial and error i can't give you a number to be honest",
    "start": "1340320",
    "end": "1347280"
  },
  {
    "text": "right so i tried 80 i have 70 i have even 100 i'm gonna talk about it",
    "start": "1347280",
    "end": "1353600"
  },
  {
    "text": "you have to sometimes the fill factor is actually uh to a double edged sword we're going to come to that in a minute",
    "start": "1353600",
    "end": "1359280"
  },
  {
    "text": "hopefully i don't forget so what will happen is you're going to you're going to end up",
    "start": "1359280",
    "end": "1365840"
  },
  {
    "text": "with with these things right so you need the random values that get inserted you need",
    "start": "1365840",
    "end": "1371120"
  },
  {
    "text": "some space so that just in case i had to insert a value between two values i",
    "start": "1371120",
    "end": "1376559"
  },
  {
    "text": "happen to be in the same page i have room to grow that's the purpose right here",
    "start": "1376559",
    "end": "1382000"
  },
  {
    "text": "okay but let's talk about",
    "start": "1382000",
    "end": "1388480"
  },
  {
    "text": "when fill factor actually is a detriment to the index",
    "start": "1388480",
    "end": "1393760"
  },
  {
    "text": "let's say i use a fill factor on a sequence",
    "start": "1393760",
    "end": "1398799"
  },
  {
    "start": "1395000",
    "end": "1600000"
  },
  {
    "text": "on an integer field that is that has a sequels that means every value that you insert is always",
    "start": "1398799",
    "end": "1405200"
  },
  {
    "text": "increasing by one right so one two three there will there will never be",
    "start": "1405200",
    "end": "1410480"
  },
  {
    "text": "a gap at all right assuming this natural number is obviously an integer right",
    "start": "1410480",
    "end": "1418240"
  },
  {
    "text": "so if i even start one and two and three and four and five six and i had like a fill factor of fifty",
    "start": "1418240",
    "end": "1424159"
  },
  {
    "text": "percent that is absolutely will degrade the performance",
    "start": "1424159",
    "end": "1430240"
  },
  {
    "text": "why because this is increasing this is continually",
    "start": "1430240",
    "end": "1435760"
  },
  {
    "text": "increasing that means you're going to have one two three four five six seven eight nine ten",
    "start": "1435760",
    "end": "1441039"
  },
  {
    "text": "and let's say the maximum is 20 you just lift 50 percent empty",
    "start": "1441039",
    "end": "1446320"
  },
  {
    "text": "then 11 will go to a new page why why don't you put 11 on the same page",
    "start": "1446320",
    "end": "1453520"
  },
  {
    "text": "right i'm going to continue okay 11. 20 right use another page",
    "start": "1453520",
    "end": "1460720"
  },
  {
    "text": "that really will kill the performance why",
    "start": "1460720",
    "end": "1466320"
  },
  {
    "text": "you see because now backs to the our currency which is the i o i keep slipping actually",
    "start": "1466320",
    "end": "1472799"
  },
  {
    "text": "our currency is the i o right if i want to read a range query in the in my index yeah",
    "start": "1472799",
    "end": "1480159"
  },
  {
    "text": "give me all the values all the rows that between 5 and",
    "start": "1480159",
    "end": "1485200"
  },
  {
    "text": "300 right my index will go to that page and fetch",
    "start": "1485200",
    "end": "1491840"
  },
  {
    "text": "it right it will find a page that has 10 numbers",
    "start": "1491840",
    "end": "1496880"
  },
  {
    "text": "but it will also have half of the page 4 kilobyte of the 8k",
    "start": "1496880",
    "end": "1503760"
  },
  {
    "text": "is null it's all zeroed out which is absolutely useless for me",
    "start": "1503760",
    "end": "1509440"
  },
  {
    "text": "obviously i need to continue reading so i go and read another page oh we got now 10 to 20.",
    "start": "1509440",
    "end": "1515840"
  },
  {
    "text": "oh the rest is empty a lot of shame now you keep reading",
    "start": "1515840",
    "end": "1521279"
  },
  {
    "text": "blank useless data you're spending money",
    "start": "1521279",
    "end": "1527440"
  },
  {
    "text": "currency to read half of the data",
    "start": "1527440",
    "end": "1533360"
  },
  {
    "text": "so in that particular center where you know there will never be gaps dates is",
    "start": "1533360",
    "end": "1538400"
  },
  {
    "text": "another example if you have logs that like you're logging something and you know that you'll never go to the past",
    "start": "1538400",
    "end": "1544720"
  },
  {
    "text": "and insert something in the past and you never do that fill factor should be hundred percent",
    "start": "1544720",
    "end": "1551600"
  },
  {
    "text": "right you have to use a factor of hundred percent",
    "start": "1551600",
    "end": "1557120"
  },
  {
    "text": "fill that page make it cram cram it with content so that just one",
    "start": "1557120",
    "end": "1563600"
  },
  {
    "text": "single audio gives you as much possible data as possible right so we want fill factor sometimes",
    "start": "1563600",
    "end": "1570400"
  },
  {
    "text": "to be hundred percent and sometimes we want it to have a little bit of a wiggle wiggle wiggle wiggle room",
    "start": "1570400",
    "end": "1577360"
  },
  {
    "text": "right my money don't wiggle wiggle it falls",
    "start": "1577360",
    "end": "1583120"
  },
  {
    "text": "that's a poem i wrote by the way i'm just kidding",
    "start": "1583120",
    "end": "1588240"
  },
  {
    "text": "song is everywhere my brain is melting okay",
    "start": "1589039",
    "end": "1594640"
  },
  {
    "text": "so fill factor so let's talk about final thing fragment",
    "start": "1594640",
    "end": "1600159"
  },
  {
    "start": "1600000",
    "end": "1830000"
  },
  {
    "text": "fragmentation a fragmented index is kind of a result of kind of similar to this",
    "start": "1600159",
    "end": "1606000"
  },
  {
    "text": "let's say you have a nice beautiful page",
    "start": "1606000",
    "end": "1612320"
  },
  {
    "text": "with all our entries and you start deleting it or even in case of a",
    "start": "1612320",
    "end": "1618640"
  },
  {
    "text": "postgres update might be smarter in update so i'll take that back",
    "start": "1618640",
    "end": "1624400"
  },
  {
    "text": "but if you delete rows or even update all the rows right",
    "start": "1624400",
    "end": "1630320"
  },
  {
    "text": "then you're gonna have rows that are orphaned",
    "start": "1630320",
    "end": "1635360"
  },
  {
    "text": "in in the page right so you can have one two three and then deleted deleted deleted deleted and then five six seven",
    "start": "1635360",
    "end": "1642000"
  },
  {
    "text": "deleted so this is very similar to when the fill factor",
    "start": "1642000",
    "end": "1647440"
  },
  {
    "text": "is is a very low value and then you're gonna read values right",
    "start": "1647440",
    "end": "1653120"
  },
  {
    "text": "only to find that most of these rows has been deleted",
    "start": "1653120",
    "end": "1658480"
  },
  {
    "text": "so that's a waste of money right of currency because",
    "start": "1658480",
    "end": "1663919"
  },
  {
    "text": "io didn't give me everything i need what's the goal what what did i say when we started we want to make the least",
    "start": "1663919",
    "end": "1671200"
  },
  {
    "text": "number of minimum number of ios i want to spend the least amount of money right currency ios currency every io you",
    "start": "1671200",
    "end": "1679279"
  },
  {
    "text": "make a duck dies you kill a duck so try to minimize the number of ducks that you",
    "start": "1679279",
    "end": "1686159"
  },
  {
    "text": "slaughter right in this in this process",
    "start": "1686159",
    "end": "1692640"
  },
  {
    "text": "so now in a single io if you have all these deleted rows then that's also wasted",
    "start": "1692640",
    "end": "1698320"
  },
  {
    "text": "so re-indexing really helps here as well",
    "start": "1698320",
    "end": "1703520"
  },
  {
    "text": "if you re-index your table that's that's probably all database and you are familiar with that your performance",
    "start": "1703520",
    "end": "1709919"
  },
  {
    "text": "increases especially if in a heavily edited table where you're just changing",
    "start": "1709919",
    "end": "1715760"
  },
  {
    "text": "all the time and editing all the time right but then also",
    "start": "1715760",
    "end": "1721279"
  },
  {
    "text": "that is not always true because deleted rows",
    "start": "1721279",
    "end": "1726960"
  },
  {
    "text": "if you read it a page that has some deleted rows if i'm an old",
    "start": "1726960",
    "end": "1732320"
  },
  {
    "text": "transaction and my isolation level is read repeatable read or serializable or even recommended in",
    "start": "1732320",
    "end": "1739279"
  },
  {
    "text": "certain areas i might have need these deleted rows",
    "start": "1739279",
    "end": "1744320"
  },
  {
    "text": "because i started long time ago right and i i and i'm not seeing",
    "start": "1744320",
    "end": "1751200"
  },
  {
    "text": "i need to see these values for a certain recommend read committed might not be the case here but definitely repeatable",
    "start": "1751200",
    "end": "1757679"
  },
  {
    "text": "readers like hey i started a long time ago i need to see these deleted rows right so you can't always physically remove",
    "start": "1757679",
    "end": "1764559"
  },
  {
    "text": "this entry from the index sometimes you keep them that's why a lot of you know database",
    "start": "1764559",
    "end": "1770159"
  },
  {
    "text": "experts i'm not a database expert i don't like to call myself because there's so much to learn it's like like",
    "start": "1770159",
    "end": "1775520"
  },
  {
    "text": "i was we were talking about the i o and at the beginning i didn't know anything about that stuff yet so i don't like to",
    "start": "1775520",
    "end": "1780880"
  },
  {
    "text": "call myself an expert at all so a lot of people who knows about database engineering they advise against",
    "start": "1780880",
    "end": "1788720"
  },
  {
    "text": "long-running transactions because those long running transactions will hold",
    "start": "1788720",
    "end": "1795039"
  },
  {
    "text": "sort of special locks on these deleted rows that vacuum in case of postgres and other",
    "start": "1795039",
    "end": "1802640"
  },
  {
    "text": "undo the undo log sh cannot physically remove them",
    "start": "1802640",
    "end": "1808799"
  },
  {
    "text": "at all it has to stay there and if they are there new transactions suffer",
    "start": "1808799",
    "end": "1814000"
  },
  {
    "text": "because new transaction they don't have business of these directors to them they started after their was demon",
    "start": "1814000",
    "end": "1820080"
  },
  {
    "text": "deleted so their snapshot is reading from that state",
    "start": "1820080",
    "end": "1825200"
  },
  {
    "text": "right so they don't need there is no business so long running transactions are holding back the system",
    "start": "1825200",
    "end": "1831120"
  },
  {
    "start": "1830000",
    "end": "2028000"
  },
  {
    "text": "so fragmented index is a thing page splits is the thing so as a summary we're going to summarize this film",
    "start": "1831120",
    "end": "1836559"
  },
  {
    "text": "factor is a very nice property but it's a double-edged sword make the fill factor too small and you",
    "start": "1836559",
    "end": "1842720"
  },
  {
    "text": "might suffer from you know expensive reeds that don't have as much",
    "start": "1842720",
    "end": "1849360"
  },
  {
    "text": "juicy data make it full 100 to too large then you might suffer",
    "start": "1849360",
    "end": "1855919"
  },
  {
    "text": "page splits and page splits also you know expensive you know",
    "start": "1855919",
    "end": "1862000"
  },
  {
    "text": "it's like you're taking a saw and then you saw the page in half",
    "start": "1862000",
    "end": "1868000"
  },
  {
    "text": "very very painful to the database you know sometimes databases have feelings",
    "start": "1868000",
    "end": "1874159"
  },
  {
    "text": "you have to care my friends about the database feelings and then uh you want to leave i'm",
    "start": "1874159",
    "end": "1880799"
  },
  {
    "text": "looking at my bullet points here so i'm not really i don't have a script or anything like that just literally have",
    "start": "1880799",
    "end": "1886080"
  },
  {
    "text": "like four bullet points with three words in each one and uh yeah so sometimes you want to leave it",
    "start": "1886080",
    "end": "1892559"
  },
  {
    "text": "hundred percent you want to leave it um make it too small uh sometimes you're gonna worry about the fragmented index",
    "start": "1892559",
    "end": "1899440"
  },
  {
    "text": "that's another thing where as you delete you need to re-index that uh",
    "start": "1899440",
    "end": "1905440"
  },
  {
    "text": "phil uh i don't know if phil factor helps with fragment index to be honest i think",
    "start": "1905440",
    "end": "1911279"
  },
  {
    "text": "will factor a small factor will result in a fragmented index in a sense where",
    "start": "1911279",
    "end": "1916399"
  },
  {
    "text": "you're gonna have these fill empty pages that your index will be too",
    "start": "1916399",
    "end": "1921440"
  },
  {
    "text": "large if the fill factor is too small and your values values are monotok mona takata",
    "start": "1921440",
    "end": "1928000"
  },
  {
    "text": "bata kalati monotomically increasing i'm pretty sure that's the war and you guys are yelling",
    "start": "1928000",
    "end": "1934799"
  },
  {
    "text": "at me you know it's it's just keep increasing and we'll never go back and insert an old value dates or exam another example right so yeah guys what",
    "start": "1934799",
    "end": "1941840"
  },
  {
    "text": "do you think about this video are you using fill factor i keep saying think about fill factor fear factor the",
    "start": "1941840",
    "end": "1948240"
  },
  {
    "text": "the show that uh you know joe rogan was on fear factors like it always confuses the two",
    "start": "1948240",
    "end": "1954880"
  },
  {
    "text": "all right guys hope you enjoyed this episode of the back engineering show uh consider becoming a member it supports",
    "start": "1954880",
    "end": "1960000"
  },
  {
    "text": "the show keeps the shows going you know consider using this super thanks in youtube",
    "start": "1960000",
    "end": "1966240"
  },
  {
    "text": "keeps the show going consider getting my my courses database i have a database course i have a network course and",
    "start": "1966240",
    "end": "1972640"
  },
  {
    "text": "check them out uh go to my uh database dot hussein also dot com",
    "start": "1972640",
    "end": "1978480"
  },
  {
    "text": "network dots and also dot com just go my website you're gonna find all my courses there um",
    "start": "1978480",
    "end": "1984480"
  },
  {
    "text": "we have all sorts of great community here where we have great discussions i try to sometimes reply when i have the",
    "start": "1984480",
    "end": "1991200"
  },
  {
    "text": "chance but with with a new baby now he's a toddler yeah he he messed up my my mic so i",
    "start": "1991200",
    "end": "1997840"
  },
  {
    "text": "don't know if this uh hopefully the the audio is clear because he just he now he can stand and walk",
    "start": "1997840",
    "end": "2004080"
  },
  {
    "text": "everywhere so he he went to my also the audio interface and start just tuning he like anything that has a",
    "start": "2004080",
    "end": "2010880"
  },
  {
    "text": "rotate he would just flip it right and right so i have no idea i try i tested it sounds let's go but",
    "start": "2010880",
    "end": "2017440"
  },
  {
    "text": "hopefully this audio is good uh appreciate all of you guys",
    "start": "2017440",
    "end": "2022880"
  },
  {
    "text": "thank you so much for all the support see you in the next one goodbye",
    "start": "2022880",
    "end": "2029120"
  }
]