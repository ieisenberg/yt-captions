[
  {
    "start": "0",
    "end": "180000"
  },
  {
    "text": "I recently authored an article on medium",
    "start": "0",
    "end": "2700"
  },
  {
    "text": "titled",
    "start": "2700",
    "end": "4620"
  },
  {
    "text": "when node.js IO blocks",
    "start": "4620",
    "end": "8639"
  },
  {
    "text": "and it talks about",
    "start": "8639",
    "end": "12080"
  },
  {
    "text": "node.js threading architecture and how",
    "start": "12080",
    "end": "15299"
  },
  {
    "text": "is it a single threaded and it's how it",
    "start": "15299",
    "end": "18060"
  },
  {
    "text": "is an asynchronous non-blocking IO how",
    "start": "18060",
    "end": "22199"
  },
  {
    "text": "does it achieve that in in details so I",
    "start": "22199",
    "end": "25680"
  },
  {
    "text": "talk about the thread pool I talk about",
    "start": "25680",
    "end": "27560"
  },
  {
    "text": "the how does it perform file I or I talk",
    "start": "27560",
    "end": "32220"
  },
  {
    "text": "about how does it perform socket IO",
    "start": "32220",
    "end": "35120"
  },
  {
    "text": "asynchronously such as UDP and TCP I",
    "start": "35120",
    "end": "38700"
  },
  {
    "text": "talk about how does it perform DNS",
    "start": "38700",
    "end": "42020"
  },
  {
    "text": "queries through the thread poll and I",
    "start": "42020",
    "end": "45420"
  },
  {
    "text": "also talk about when exactly is it",
    "start": "45420",
    "end": "48960"
  },
  {
    "text": "that node.js blocks the execution from",
    "start": "48960",
    "end": "52980"
  },
  {
    "text": "the user perspective I thought it was an",
    "start": "52980",
    "end": "55440"
  },
  {
    "text": "interesting read and this is the audio",
    "start": "55440",
    "end": "57719"
  },
  {
    "text": "version of this article I'm gonna",
    "start": "57719",
    "end": "59820"
  },
  {
    "text": "publish the audio version on my podcast",
    "start": "59820",
    "end": "62940"
  },
  {
    "text": "the backend engineering show and the",
    "start": "62940",
    "end": "65939"
  },
  {
    "text": "video and audio of course on my members",
    "start": "65939",
    "end": "69960"
  },
  {
    "text": "uh only YouTube channel I hope you enjoy",
    "start": "69960",
    "end": "73320"
  },
  {
    "text": "it when node.jsio blocks written by",
    "start": "73320",
    "end": "76920"
  },
  {
    "text": "Hussein Nasser on October 11 2022.",
    "start": "76920",
    "end": "81320"
  },
  {
    "text": "node is an unblocking JavaScript runtime",
    "start": "81320",
    "end": "84900"
  },
  {
    "text": "you can simultaneously run an HTTP",
    "start": "84900",
    "end": "88380"
  },
  {
    "text": "server read files from desk send UDP",
    "start": "88380",
    "end": "92040"
  },
  {
    "text": "datagrams except TCP connections from",
    "start": "92040",
    "end": "95040"
  },
  {
    "text": "clients and still have room to execute",
    "start": "95040",
    "end": "98280"
  },
  {
    "text": "JavaScript code",
    "start": "98280",
    "end": "100020"
  },
  {
    "text": "operations without blocking",
    "start": "100020",
    "end": "103560"
  },
  {
    "text": "emphasism without blocking here",
    "start": "103560",
    "end": "106560"
  },
  {
    "text": "most of these operations are known as I",
    "start": "106560",
    "end": "110159"
  },
  {
    "text": "slash o i o or input output for show you",
    "start": "110159",
    "end": "114840"
  },
  {
    "text": "send an input to a device a file or a",
    "start": "114840",
    "end": "118680"
  },
  {
    "text": "socket and it replies back with an",
    "start": "118680",
    "end": "121500"
  },
  {
    "text": "output",
    "start": "121500",
    "end": "122579"
  },
  {
    "text": "node achieves a non-blocking IO with",
    "start": "122579",
    "end": "127439"
  },
  {
    "text": "mostly a single thread executed",
    "start": "127439",
    "end": "130580"
  },
  {
    "text": "asynchronously using a library called",
    "start": "130580",
    "end": "133440"
  },
  {
    "text": "Leb UV the exception being DNS queries",
    "start": "133440",
    "end": "137280"
  },
  {
    "text": "which use a thread pool this means when",
    "start": "137280",
    "end": "140580"
  },
  {
    "text": "you use fetch or axios to make an HTTP",
    "start": "140580",
    "end": "144540"
  },
  {
    "text": "request to a domain the DNS resolution",
    "start": "144540",
    "end": "147959"
  },
  {
    "text": "for that domain will most probably go",
    "start": "147959",
    "end": "151560"
  },
  {
    "text": "through that thread pool",
    "start": "151560",
    "end": "154260"
  },
  {
    "text": "while the actual request itself",
    "start": "154260",
    "end": "157980"
  },
  {
    "text": "that Rick the HTTP request to the IP",
    "start": "157980",
    "end": "161340"
  },
  {
    "text": "address will be sent asynchronously on",
    "start": "161340",
    "end": "165060"
  },
  {
    "text": "the main thread",
    "start": "165060",
    "end": "167040"
  },
  {
    "text": "so one does not block and when it",
    "start": "167040",
    "end": "170940"
  },
  {
    "text": "doesn't I attempt to answer this",
    "start": "170940",
    "end": "173280"
  },
  {
    "text": "question in this article part one",
    "start": "173280",
    "end": "176400"
  },
  {
    "text": "socket IO when a back-end application",
    "start": "176400",
    "end": "179340"
  },
  {
    "text": "binds to an address and a port it",
    "start": "179340",
    "end": "183000"
  },
  {
    "start": "180000",
    "end": "588000"
  },
  {
    "text": "creates a socket",
    "start": "183000",
    "end": "185180"
  },
  {
    "text": "attempts to connect to the socket will",
    "start": "185180",
    "end": "188040"
  },
  {
    "text": "spawn connections that can be accessed",
    "start": "188040",
    "end": "191400"
  },
  {
    "text": "through file descriptors",
    "start": "191400",
    "end": "194819"
  },
  {
    "text": "file descriptors or integer values",
    "start": "194819",
    "end": "197120"
  },
  {
    "text": "representing TCP connections",
    "start": "197120",
    "end": "200159"
  },
  {
    "text": "UDP sockets or even literal files on",
    "start": "200159",
    "end": "204480"
  },
  {
    "text": "disk",
    "start": "204480",
    "end": "206220"
  },
  {
    "text": "when a client sends data on the",
    "start": "206220",
    "end": "208860"
  },
  {
    "text": "connection the server operating system",
    "start": "208860",
    "end": "211260"
  },
  {
    "text": "reads the data from the neck",
    "start": "211260",
    "end": "214379"
  },
  {
    "text": "or their network interface controller",
    "start": "214379",
    "end": "217379"
  },
  {
    "text": "using the from and the two IP address",
    "start": "217379",
    "end": "220560"
  },
  {
    "text": "and Port the OS Maps the data to a file",
    "start": "220560",
    "end": "225299"
  },
  {
    "text": "descriptor and puts it in the kernel",
    "start": "225299",
    "end": "228000"
  },
  {
    "text": "buffer",
    "start": "228000",
    "end": "228959"
  },
  {
    "text": "it is now up to the application logic to",
    "start": "228959",
    "end": "232920"
  },
  {
    "text": "explicitly read the data on the",
    "start": "232920",
    "end": "235680"
  },
  {
    "text": "connection so it can be moved from the",
    "start": "235680",
    "end": "238980"
  },
  {
    "text": "kernel memory to the application",
    "start": "238980",
    "end": "241200"
  },
  {
    "text": "dedicated memory",
    "start": "241200",
    "end": "243120"
  },
  {
    "text": "calling read from the application will",
    "start": "243120",
    "end": "247200"
  },
  {
    "text": "do exactly that read here is an actual",
    "start": "247200",
    "end": "250140"
  },
  {
    "text": "operating system call",
    "start": "250140",
    "end": "253739"
  },
  {
    "text": "and that's a very important thing this",
    "start": "253739",
    "end": "255840"
  },
  {
    "text": "is now Hussein no no I'm not reading",
    "start": "255840",
    "end": "257699"
  },
  {
    "text": "anything in the article",
    "start": "257699",
    "end": "259160"
  },
  {
    "text": "read will move data from the kernel to",
    "start": "259160",
    "end": "264180"
  },
  {
    "text": "the user space memory and I never",
    "start": "264180",
    "end": "267600"
  },
  {
    "text": "actually knew that actually this is",
    "start": "267600",
    "end": "270180"
  },
  {
    "text": "happening and now that my eyes are",
    "start": "270180",
    "end": "272100"
  },
  {
    "text": "opened",
    "start": "272100",
    "end": "273300"
  },
  {
    "text": "a lot of things started to make sense in",
    "start": "273300",
    "end": "276540"
  },
  {
    "text": "my earlier readings and Analysis this is",
    "start": "276540",
    "end": "279240"
  },
  {
    "text": "all good and well when there is data in",
    "start": "279240",
    "end": "281880"
  },
  {
    "text": "the buffer for that connection",
    "start": "281880",
    "end": "283740"
  },
  {
    "text": "but",
    "start": "283740",
    "end": "284940"
  },
  {
    "text": "what if there isn't anything in the",
    "start": "284940",
    "end": "288180"
  },
  {
    "text": "kernel buffer the client didn't send",
    "start": "288180",
    "end": "290699"
  },
  {
    "text": "anything yet the read call from our back",
    "start": "290699",
    "end": "294300"
  },
  {
    "text": "end will block because there isn't",
    "start": "294300",
    "end": "297060"
  },
  {
    "text": "anything there that's the definition of",
    "start": "297060",
    "end": "300419"
  },
  {
    "text": "the system read call again that's me now",
    "start": "300419",
    "end": "303240"
  },
  {
    "text": "I'm not reading anything about that",
    "start": "303240",
    "end": "304680"
  },
  {
    "text": "article I'll be jumping back and forth",
    "start": "304680",
    "end": "307199"
  },
  {
    "text": "in the podcast to actually make",
    "start": "307199",
    "end": "309060"
  },
  {
    "text": "commentary on my own article it's pretty",
    "start": "309060",
    "end": "311759"
  },
  {
    "text": "interesting so you get more content",
    "start": "311759",
    "end": "313139"
  },
  {
    "text": "actually when you're listening or",
    "start": "313139",
    "end": "314699"
  },
  {
    "text": "watching this video",
    "start": "314699",
    "end": "316919"
  },
  {
    "text": "the read call from our backend will",
    "start": "316919",
    "end": "319139"
  },
  {
    "text": "block the OS will move the application",
    "start": "319139",
    "end": "322500"
  },
  {
    "text": "process out of the CPU so the CPU can do",
    "start": "322500",
    "end": "326460"
  },
  {
    "text": "better itself because guess what when",
    "start": "326460",
    "end": "328380"
  },
  {
    "text": "you actually that's me now again when",
    "start": "328380",
    "end": "330180"
  },
  {
    "text": "you actually make a call and that call",
    "start": "330180",
    "end": "333900"
  },
  {
    "text": "is just blocked sitting there not doing",
    "start": "333900",
    "end": "336479"
  },
  {
    "text": "anything",
    "start": "336479",
    "end": "337740"
  },
  {
    "text": "the CPU will not leave our instruction",
    "start": "337740",
    "end": "341160"
  },
  {
    "text": "less",
    "start": "341160",
    "end": "343680"
  },
  {
    "text": "process in the CPU it will put more",
    "start": "343680",
    "end": "346520"
  },
  {
    "text": "useful stuff and that moving us from out",
    "start": "346520",
    "end": "351000"
  },
  {
    "text": "of the CPU is very expensive it's called",
    "start": "351000",
    "end": "352919"
  },
  {
    "text": "context switching let's continue",
    "start": "352919",
    "end": "355620"
  },
  {
    "text": "I guess I'm jumping the Gunner here a",
    "start": "355620",
    "end": "357780"
  },
  {
    "text": "little bit the recall from our backend",
    "start": "357780",
    "end": "359340"
  },
  {
    "text": "will block the OS will move the",
    "start": "359340",
    "end": "361560"
  },
  {
    "text": "application process out of the CPU so",
    "start": "361560",
    "end": "363600"
  },
  {
    "text": "the CPU can do better stuff while our",
    "start": "363600",
    "end": "366720"
  },
  {
    "text": "app remains blocked until someone sends",
    "start": "366720",
    "end": "370979"
  },
  {
    "text": "data on the connection that is very",
    "start": "370979",
    "end": "373380"
  },
  {
    "text": "interesting really right we are at the",
    "start": "373380",
    "end": "377280"
  },
  {
    "text": "mercy of actually someone sending data",
    "start": "377280",
    "end": "379620"
  },
  {
    "text": "otherwise we will be completely blocked",
    "start": "379620",
    "end": "381419"
  },
  {
    "text": "that's by Design",
    "start": "381419",
    "end": "383699"
  },
  {
    "text": "this behavior is called synchronous IO",
    "start": "383699",
    "end": "387240"
  },
  {
    "text": "well we just described is called",
    "start": "387240",
    "end": "389160"
  },
  {
    "text": "synchronous IO and synchronous IO is",
    "start": "389160",
    "end": "391620"
  },
  {
    "text": "always blocking and it is mostly",
    "start": "391620",
    "end": "394080"
  },
  {
    "text": "undesirable because guess what",
    "start": "394080",
    "end": "396960"
  },
  {
    "text": "not only the CPU has things to do you",
    "start": "396960",
    "end": "400319"
  },
  {
    "text": "can't block the app just because we're",
    "start": "400319",
    "end": "403500"
  },
  {
    "text": "not doing anything I actually the app",
    "start": "403500",
    "end": "407100"
  },
  {
    "text": "can do other stuff while it's waiting",
    "start": "407100",
    "end": "410220"
  },
  {
    "text": "the app also has other things to do",
    "start": "410220",
    "end": "412740"
  },
  {
    "text": "technically right",
    "start": "412740",
    "end": "415020"
  },
  {
    "text": "and this is where the asynchronous io",
    "start": "415020",
    "end": "418560"
  },
  {
    "text": "was born so all that paragraph was",
    "start": "418560",
    "end": "421080"
  },
  {
    "text": "discussing asynchronous Io asynchronous",
    "start": "421080",
    "end": "423600"
  },
  {
    "text": "Io was designed initially based on the",
    "start": "423600",
    "end": "426120"
  },
  {
    "text": "idea of Readiness and the event and",
    "start": "426120",
    "end": "429240"
  },
  {
    "text": "Eventing to solve this exact problem",
    "start": "429240",
    "end": "431759"
  },
  {
    "text": "this is at least in Linux if you ask me",
    "start": "431759",
    "end": "434220"
  },
  {
    "text": "this is a knee-jerk reaction if you ask",
    "start": "434220",
    "end": "437580"
  },
  {
    "text": "me actually in Linux because it was a",
    "start": "437580",
    "end": "440460"
  },
  {
    "text": "quick where we were quick to jump in to",
    "start": "440460",
    "end": "442740"
  },
  {
    "text": "solve that exact problem right it says",
    "start": "442740",
    "end": "445740"
  },
  {
    "text": "okay",
    "start": "445740",
    "end": "446660"
  },
  {
    "text": "we are just solving the readiness",
    "start": "446660",
    "end": "450720"
  },
  {
    "text": "model for sockets",
    "start": "450720",
    "end": "453599"
  },
  {
    "text": "what does that mean",
    "start": "453599",
    "end": "455160"
  },
  {
    "text": "we're going to split the i o into two",
    "start": "455160",
    "end": "457080"
  },
  {
    "text": "calls that's how that was initially",
    "start": "457080",
    "end": "459300"
  },
  {
    "text": "solved a call called select to check if",
    "start": "459300",
    "end": "463080"
  },
  {
    "text": "the file descriptor is ready",
    "start": "463080",
    "end": "465120"
  },
  {
    "text": "and means has something to read and a",
    "start": "465120",
    "end": "468660"
  },
  {
    "text": "second call to perform the physical",
    "start": "468660",
    "end": "471120"
  },
  {
    "text": "actual read",
    "start": "471120",
    "end": "473039"
  },
  {
    "text": "and",
    "start": "473039",
    "end": "474360"
  },
  {
    "text": "if we call Select and it says hey you're",
    "start": "474360",
    "end": "476520"
  },
  {
    "text": "not ready we're just gonna turn around",
    "start": "476520",
    "end": "478199"
  },
  {
    "text": "and call it again right it says hey are",
    "start": "478199",
    "end": "480599"
  },
  {
    "text": "you ready now are you ready now are you",
    "start": "480599",
    "end": "482099"
  },
  {
    "text": "ready or just you know what I'm gonna",
    "start": "482099",
    "end": "483780"
  },
  {
    "text": "call you now and let me know when you're",
    "start": "483780",
    "end": "486360"
  },
  {
    "text": "actually ready let me know when you have",
    "start": "486360",
    "end": "489300"
  },
  {
    "text": "data and I'm gonna when when you have",
    "start": "489300",
    "end": "491580"
  },
  {
    "text": "data I'm gonna call read and in this",
    "start": "491580",
    "end": "493560"
  },
  {
    "text": "case I know that I'm not gonna be",
    "start": "493560",
    "end": "495419"
  },
  {
    "text": "blocked and that's the trick here",
    "start": "495419",
    "end": "498180"
  },
  {
    "text": "if select returns ready we know that",
    "start": "498180",
    "end": "501000"
  },
  {
    "text": "reads will not block us else if select",
    "start": "501000",
    "end": "504660"
  },
  {
    "text": "return not ready our app can move on to",
    "start": "504660",
    "end": "508740"
  },
  {
    "text": "do something else meanwhile",
    "start": "508740",
    "end": "512159"
  },
  {
    "text": "variations of this model were developed",
    "start": "512159",
    "end": "514380"
  },
  {
    "text": "to improve asynchronous IO most popular",
    "start": "514380",
    "end": "516779"
  },
  {
    "text": "being e-pol in Linux details here are",
    "start": "516779",
    "end": "521700"
  },
  {
    "text": "Irrelevant for this post but select poll",
    "start": "521700",
    "end": "524880"
  },
  {
    "text": "and e-poll are based on the idea of",
    "start": "524880",
    "end": "527940"
  },
  {
    "text": "Eventing",
    "start": "527940",
    "end": "529560"
  },
  {
    "text": "here are a bunch of file descriptors",
    "start": "529560",
    "end": "531540"
  },
  {
    "text": "tell me whenever any of them are ready",
    "start": "531540",
    "end": "534959"
  },
  {
    "text": "for me to read that's the idea here",
    "start": "534959",
    "end": "537600"
  },
  {
    "text": "nothing to do with actual completion but",
    "start": "537600",
    "end": "541800"
  },
  {
    "text": "it's based on Readiness are you ready",
    "start": "541800",
    "end": "544440"
  },
  {
    "text": "for me to actually do the task",
    "start": "544440",
    "end": "547740"
  },
  {
    "text": "this is a pause of the other model which",
    "start": "547740",
    "end": "550680"
  },
  {
    "text": "is the completionist model which we're",
    "start": "550680",
    "end": "552660"
  },
  {
    "text": "gonna talk about in the end of the",
    "start": "552660",
    "end": "554040"
  },
  {
    "text": "article now there this is a cult code we",
    "start": "554040",
    "end": "557640"
  },
  {
    "text": "could have modified the read function to",
    "start": "557640",
    "end": "559920"
  },
  {
    "text": "know up when there isn't anything in the",
    "start": "559920",
    "end": "562740"
  },
  {
    "text": "file descriptor instead of blocking my",
    "start": "562740",
    "end": "565440"
  },
  {
    "text": "guess is this would have created bad",
    "start": "565440",
    "end": "568440"
  },
  {
    "text": "pattern where the app makes a lot of",
    "start": "568440",
    "end": "571440"
  },
  {
    "text": "unnecessary calls to the OS which will",
    "start": "571440",
    "end": "574680"
  },
  {
    "text": "hinder performance eventually I could",
    "start": "574680",
    "end": "577200"
  },
  {
    "text": "argue the read calls blocks on purpose",
    "start": "577200",
    "end": "581279"
  },
  {
    "text": "because of this particular reason",
    "start": "581279",
    "end": "585240"
  },
  {
    "text": "part two",
    "start": "585240",
    "end": "586980"
  },
  {
    "text": "file IO reading and writing to files",
    "start": "586980",
    "end": "590580"
  },
  {
    "start": "588000",
    "end": "762000"
  },
  {
    "text": "didn't benefit from asynchronous",
    "start": "590580",
    "end": "592380"
  },
  {
    "text": "Eventing model described above because",
    "start": "592380",
    "end": "594660"
  },
  {
    "text": "there are no events when it comes to",
    "start": "594660",
    "end": "597180"
  },
  {
    "text": "files",
    "start": "597180",
    "end": "598200"
  },
  {
    "text": "unlike network sockets where the app can",
    "start": "598200",
    "end": "600720"
  },
  {
    "text": "be notified when data arrives to the",
    "start": "600720",
    "end": "603779"
  },
  {
    "text": "socket the file data is always there I",
    "start": "603779",
    "end": "608100"
  },
  {
    "text": "suppose you can use the model to listen",
    "start": "608100",
    "end": "610380"
  },
  {
    "text": "to changes on file on the file and",
    "start": "610380",
    "end": "614459"
  },
  {
    "text": "notify the app but use cases for that",
    "start": "614459",
    "end": "617640"
  },
  {
    "text": "are",
    "start": "617640",
    "end": "618660"
  },
  {
    "text": "limited calling greed on files will",
    "start": "618660",
    "end": "622380"
  },
  {
    "text": "still block but not because of absence",
    "start": "622380",
    "end": "625680"
  },
  {
    "text": "of data but because it just takes time",
    "start": "625680",
    "end": "629040"
  },
  {
    "text": "to read from the hard drive or the SSD",
    "start": "629040",
    "end": "631920"
  },
  {
    "text": "the read transfers the requested blocks",
    "start": "631920",
    "end": "634920"
  },
  {
    "text": "from the disk controller to the OS cache",
    "start": "634920",
    "end": "637620"
  },
  {
    "text": "and then to the application",
    "start": "637620",
    "end": "640080"
  },
  {
    "text": "in the few milliseconds that the read is",
    "start": "640080",
    "end": "643019"
  },
  {
    "text": "blocking the app could do other things",
    "start": "643019",
    "end": "646680"
  },
  {
    "text": "so an asynchronous model for reading",
    "start": "646680",
    "end": "649320"
  },
  {
    "text": "files is still desirable especially for",
    "start": "649320",
    "end": "652500"
  },
  {
    "text": "database people like us if the requested",
    "start": "652500",
    "end": "654779"
  },
  {
    "text": "portion of the file happened to be in",
    "start": "654779",
    "end": "657120"
  },
  {
    "text": "the OS cache",
    "start": "657120",
    "end": "659220"
  },
  {
    "text": "the read will be faster now",
    "start": "659220",
    "end": "663420"
  },
  {
    "text": "whether you consider the read to be",
    "start": "663420",
    "end": "665820"
  },
  {
    "text": "blocking in that particular case is opt",
    "start": "665820",
    "end": "669480"
  },
  {
    "text": "for debate",
    "start": "669480",
    "end": "670920"
  },
  {
    "text": "it sounds like there is a specific",
    "start": "670920",
    "end": "672720"
  },
  {
    "text": "definition of what blocking really is",
    "start": "672720",
    "end": "675540"
  },
  {
    "text": "but to me",
    "start": "675540",
    "end": "677820"
  },
  {
    "text": "if the app is waiting for something",
    "start": "677820",
    "end": "680760"
  },
  {
    "text": "it is blocked whether it is 10",
    "start": "680760",
    "end": "683760"
  },
  {
    "text": "milliseconds or 10 nanoseconds",
    "start": "683760",
    "end": "687060"
  },
  {
    "text": "the app can still do something while it",
    "start": "687060",
    "end": "690240"
  },
  {
    "text": "waits you may argue that the cost to",
    "start": "690240",
    "end": "692880"
  },
  {
    "text": "switch to do something else will be",
    "start": "692880",
    "end": "694980"
  },
  {
    "text": "slower than the time the app Waits the",
    "start": "694980",
    "end": "698100"
  },
  {
    "text": "10 nanoseconds however today I think",
    "start": "698100",
    "end": "701820"
  },
  {
    "text": "it's just a technical limitation",
    "start": "701820",
    "end": "705000"
  },
  {
    "text": "this is also true when you read from the",
    "start": "705000",
    "end": "708420"
  },
  {
    "text": "socket",
    "start": "708420",
    "end": "709440"
  },
  {
    "text": "that has data",
    "start": "709440",
    "end": "711779"
  },
  {
    "text": "which copies memory from the kernel to",
    "start": "711779",
    "end": "715560"
  },
  {
    "text": "the user space that's also kind of",
    "start": "715560",
    "end": "718140"
  },
  {
    "text": "blocking right so I'm kind of arguing",
    "start": "718140",
    "end": "720720"
  },
  {
    "text": "also semantics here on this particle or",
    "start": "720720",
    "end": "723660"
  },
  {
    "text": "podcast as we talk about this so what do",
    "start": "723660",
    "end": "727019"
  },
  {
    "text": "you do if you don't want to wait in line",
    "start": "727019",
    "end": "729600"
  },
  {
    "text": "using someone who does we may spin up a",
    "start": "729600",
    "end": "732839"
  },
  {
    "text": "threat to perform the blocking read",
    "start": "732839",
    "end": "735320"
  },
  {
    "text": "while keeping the main thread block free",
    "start": "735320",
    "end": "739040"
  },
  {
    "text": "The Logical read operation becomes",
    "start": "739040",
    "end": "742820"
  },
  {
    "text": "asynchronous non-blocking from a user",
    "start": "742820",
    "end": "746880"
  },
  {
    "text": "perspective",
    "start": "746880",
    "end": "748079"
  },
  {
    "text": "but technically speaking",
    "start": "748079",
    "end": "750839"
  },
  {
    "text": "it is still synchronous and blocking to",
    "start": "750839",
    "end": "754440"
  },
  {
    "text": "the OS",
    "start": "754440",
    "end": "755640"
  },
  {
    "text": "it is just the thread that is blocked",
    "start": "755640",
    "end": "758700"
  },
  {
    "text": "instead of the main process so we're",
    "start": "758700",
    "end": "760980"
  },
  {
    "text": "just playing games part 3 DNS",
    "start": "760980",
    "end": "766079"
  },
  {
    "start": "762000",
    "end": "982000"
  },
  {
    "text": "DNS or domain name system or server or",
    "start": "766079",
    "end": "771060"
  },
  {
    "text": "service",
    "start": "771060",
    "end": "772440"
  },
  {
    "text": "is a protocol that resolves domains and",
    "start": "772440",
    "end": "775560"
  },
  {
    "text": "host names to network addresses it is",
    "start": "775560",
    "end": "779339"
  },
  {
    "text": "built on top of UDP and more recently on",
    "start": "779339",
    "end": "783240"
  },
  {
    "text": "top of TCP and quick via DOT or DNS over",
    "start": "783240",
    "end": "788519"
  },
  {
    "text": "TLS and Doh or D DNS over https for",
    "start": "788519",
    "end": "795420"
  },
  {
    "text": "encrypted DNS",
    "start": "795420",
    "end": "797339"
  },
  {
    "text": "we know how to do socket IO",
    "start": "797339",
    "end": "799800"
  },
  {
    "text": "asynchronously so you would think DNS",
    "start": "799800",
    "end": "802680"
  },
  {
    "text": "would fit right in right because it's",
    "start": "802680",
    "end": "805139"
  },
  {
    "text": "just UDP right it's just sockets we know",
    "start": "805139",
    "end": "807360"
  },
  {
    "text": "how to do a circle socketizing currently",
    "start": "807360",
    "end": "810060"
  },
  {
    "text": "this is true if you rolled out your own",
    "start": "810060",
    "end": "813540"
  },
  {
    "text": "DNS implementation",
    "start": "813540",
    "end": "815519"
  },
  {
    "text": "however most libraries and Frameworks",
    "start": "815519",
    "end": "819120"
  },
  {
    "text": "and runtimes call the existing OS",
    "start": "819120",
    "end": "822600"
  },
  {
    "text": "implementation of DNS which is get Aid",
    "start": "822600",
    "end": "827160"
  },
  {
    "text": "or address info",
    "start": "827160",
    "end": "829740"
  },
  {
    "text": "uh get addr info",
    "start": "829740",
    "end": "833760"
  },
  {
    "text": "this method is synchronous and blocking",
    "start": "833760",
    "end": "837139"
  },
  {
    "text": "and it will require the third pool trick",
    "start": "837139",
    "end": "840899"
  },
  {
    "text": "we did with files to call it",
    "start": "840899",
    "end": "843120"
  },
  {
    "text": "asynchronously why is it synchronous",
    "start": "843120",
    "end": "845639"
  },
  {
    "text": "Frankly Speaking I couldn't find an",
    "start": "845639",
    "end": "847440"
  },
  {
    "text": "answer on the web but as always doesn't",
    "start": "847440",
    "end": "850320"
  },
  {
    "text": "hurt to guess because I like to always",
    "start": "850320",
    "end": "853260"
  },
  {
    "text": "speculate on things like this you know",
    "start": "853260",
    "end": "856079"
  },
  {
    "text": "things like this when when someone just",
    "start": "856079",
    "end": "858060"
  },
  {
    "text": "says that hey this is me again when",
    "start": "858060",
    "end": "860459"
  },
  {
    "text": "someone just says hey this is uh this is",
    "start": "860459",
    "end": "862680"
  },
  {
    "text": "blocking why is it blocking I don't know",
    "start": "862680",
    "end": "866160"
  },
  {
    "text": "so this is where I come and try to guess",
    "start": "866160",
    "end": "869399"
  },
  {
    "text": "why things are",
    "start": "869399",
    "end": "871260"
  },
  {
    "text": "because this is where we are right now",
    "start": "871260",
    "end": "873839"
  },
  {
    "text": "guys we are deep deep deep into the weed",
    "start": "873839",
    "end": "877680"
  },
  {
    "text": "you know so if you if you're a beginner",
    "start": "877680",
    "end": "880079"
  },
  {
    "text": "you might find this a little bit",
    "start": "880079",
    "end": "881579"
  },
  {
    "text": "overwhelming but I absolutely love this",
    "start": "881579",
    "end": "884639"
  },
  {
    "text": "stuff and I'm I'm just I just still feel",
    "start": "884639",
    "end": "887880"
  },
  {
    "text": "like I don't understand anything",
    "start": "887880",
    "end": "890339"
  },
  {
    "text": "it's just fascinating the the amount of",
    "start": "890339",
    "end": "892980"
  },
  {
    "text": "information and and things that I learn",
    "start": "892980",
    "end": "895380"
  },
  {
    "text": "on a daily basis back in engineering is",
    "start": "895380",
    "end": "898800"
  },
  {
    "text": "indeed a word",
    "start": "898800",
    "end": "900420"
  },
  {
    "text": "back to the article my guess that get",
    "start": "900420",
    "end": "902519"
  },
  {
    "text": "address info function isn't just doing",
    "start": "902519",
    "end": "905339"
  },
  {
    "text": "the NS resolution via the network but it",
    "start": "905339",
    "end": "908459"
  },
  {
    "text": "might be reading the host's file and",
    "start": "908459",
    "end": "911820"
  },
  {
    "text": "getting any user defined resolution from",
    "start": "911820",
    "end": "913980"
  },
  {
    "text": "there if you remember the host file at",
    "start": "913980",
    "end": "916320"
  },
  {
    "text": "least in Windows I don't know much about",
    "start": "916320",
    "end": "917820"
  },
  {
    "text": "Linux but in Windows",
    "start": "917820",
    "end": "920459"
  },
  {
    "text": "you can go to see Windows system 32",
    "start": "920459",
    "end": "924839"
  },
  {
    "text": "drivers Etsy and then host and you can",
    "start": "924839",
    "end": "927779"
  },
  {
    "text": "just add your own DNS resolution",
    "start": "927779",
    "end": "931639"
  },
  {
    "text": "entries there and you can just type in I",
    "start": "931639",
    "end": "935579"
  },
  {
    "text": "don't know www.google.com",
    "start": "935579",
    "end": "937519"
  },
  {
    "text": "Tab and then",
    "start": "937519",
    "end": "940279"
  },
  {
    "text": "127.000.1 and in this case google.com",
    "start": "940279",
    "end": "943079"
  },
  {
    "text": "will resolve to your local host right",
    "start": "943079",
    "end": "945360"
  },
  {
    "text": "and if you have a web server running",
    "start": "945360",
    "end": "946740"
  },
  {
    "text": "there on Port 80 or 443 it will just",
    "start": "946740",
    "end": "950579"
  },
  {
    "text": "work it will just point to your website",
    "start": "950579",
    "end": "952680"
  },
  {
    "text": "locally because that trumps anything",
    "start": "952680",
    "end": "955500"
  },
  {
    "text": "else",
    "start": "955500",
    "end": "956519"
  },
  {
    "text": "so that's my guess my guess is that this",
    "start": "956519",
    "end": "959579"
  },
  {
    "text": "is actually reading the whole spot so",
    "start": "959579",
    "end": "962459"
  },
  {
    "text": "it's doing more just the network so if",
    "start": "962459",
    "end": "964500"
  },
  {
    "text": "it's reading a file then it's definitely",
    "start": "964500",
    "end": "967019"
  },
  {
    "text": "going to be blocking right and that's my",
    "start": "967019",
    "end": "969300"
  },
  {
    "text": "guess here I know that there is an",
    "start": "969300",
    "end": "971279"
  },
  {
    "text": "asynchronous version of get address info",
    "start": "971279",
    "end": "973680"
  },
  {
    "text": "function but it doesn't seem to be used",
    "start": "973680",
    "end": "976820"
  },
  {
    "text": "as often I think it's called the get",
    "start": "976820",
    "end": "980100"
  },
  {
    "text": "address info underscore a part four",
    "start": "980100",
    "end": "984199"
  },
  {
    "start": "982000",
    "end": "1150000"
  },
  {
    "text": "node.js async single thread",
    "start": "984199",
    "end": "989279"
  },
  {
    "text": "now we go to node.js",
    "start": "989279",
    "end": "991560"
  },
  {
    "text": "node.js is a single threaded runtime and",
    "start": "991560",
    "end": "995279"
  },
  {
    "text": "most of the work is done asynchronously",
    "start": "995279",
    "end": "997940"
  },
  {
    "text": "with that single thread",
    "start": "997940",
    "end": "1000820"
  },
  {
    "text": "node.js uses whatever tools available to",
    "start": "1000820",
    "end": "1004459"
  },
  {
    "text": "it through the OS to perform the task",
    "start": "1004459",
    "end": "1007699"
  },
  {
    "text": "asynchronously",
    "start": "1007699",
    "end": "1009560"
  },
  {
    "text": "in Linux it uses e-pol in Mac OS it uses",
    "start": "1009560",
    "end": "1013519"
  },
  {
    "text": "KQ for sun OS it uses event ports and",
    "start": "1013519",
    "end": "1017779"
  },
  {
    "text": "for Windows it uses the iocp which is",
    "start": "1017779",
    "end": "1021380"
  },
  {
    "text": "stands for input output completion ports",
    "start": "1021380",
    "end": "1025699"
  },
  {
    "text": "regardless of the method performed after",
    "start": "1025699",
    "end": "1028160"
  },
  {
    "text": "the asynchronous i o is done node calls",
    "start": "1028160",
    "end": "1032120"
  },
  {
    "text": "the user callback that are scheduled in",
    "start": "1032120",
    "end": "1036020"
  },
  {
    "text": "the event main Loop take the TCP server",
    "start": "1036020",
    "end": "1039199"
  },
  {
    "text": "and not for example",
    "start": "1039199",
    "end": "1041360"
  },
  {
    "text": "as developers writing JavaScript code we",
    "start": "1041360",
    "end": "1046819"
  },
  {
    "text": "never read from connections right if you",
    "start": "1046819",
    "end": "1050419"
  },
  {
    "text": "write code in Express or node you never",
    "start": "1050419",
    "end": "1053960"
  },
  {
    "text": "actually physically call a read on a",
    "start": "1053960",
    "end": "1056179"
  },
  {
    "text": "connection not just gives you data",
    "start": "1056179",
    "end": "1058400"
  },
  {
    "text": "whenever it comes in right through an",
    "start": "1058400",
    "end": "1060320"
  },
  {
    "text": "event right we say hey on socket data",
    "start": "1060320",
    "end": "1063260"
  },
  {
    "text": "just give it to me and if it's an HTTP",
    "start": "1063260",
    "end": "1066080"
  },
  {
    "text": "server not does even more job it",
    "start": "1066080",
    "end": "1068660"
  },
  {
    "text": "actually parses the TCP stream to find",
    "start": "1068660",
    "end": "1071919"
  },
  {
    "text": "request for you and give you a nice",
    "start": "1071919",
    "end": "1074720"
  },
  {
    "text": "request object that is wrapped in you",
    "start": "1074720",
    "end": "1078080"
  },
  {
    "text": "know tight and nicely ready for you to",
    "start": "1078080",
    "end": "1081140"
  },
  {
    "text": "use right",
    "start": "1081140",
    "end": "1083020"
  },
  {
    "text": "instead we listened to an event with a",
    "start": "1083020",
    "end": "1087380"
  },
  {
    "text": "callback function and whenever there is",
    "start": "1087380",
    "end": "1089840"
  },
  {
    "text": "data not cause our function",
    "start": "1089840",
    "end": "1092720"
  },
  {
    "text": "behind the scenes not is always reading",
    "start": "1092720",
    "end": "1095780"
  },
  {
    "text": "from the file descriptor asynchronously",
    "start": "1095780",
    "end": "1099440"
  },
  {
    "text": "now how is this is exactly done I don't",
    "start": "1099440",
    "end": "1102559"
  },
  {
    "text": "know but this must be done in a part of",
    "start": "1102559",
    "end": "1105620"
  },
  {
    "text": "a loop",
    "start": "1105620",
    "end": "1106640"
  },
  {
    "text": "if you ask me",
    "start": "1106640",
    "end": "1108020"
  },
  {
    "text": "analysis uses a pool",
    "start": "1108020",
    "end": "1110600"
  },
  {
    "text": "passing the file descriptor which is the",
    "start": "1110600",
    "end": "1112760"
  },
  {
    "text": "connection and when the connection has",
    "start": "1112760",
    "end": "1114620"
  },
  {
    "text": "data the OS notifies node which in turns",
    "start": "1114620",
    "end": "1118179"
  },
  {
    "text": "turns around and read the socket which",
    "start": "1118179",
    "end": "1121100"
  },
  {
    "text": "calls our function with the data",
    "start": "1121100",
    "end": "1125380"
  },
  {
    "text": "of course when you read the socket we",
    "start": "1125419",
    "end": "1128299"
  },
  {
    "text": "copy the data from the kernel to the",
    "start": "1128299",
    "end": "1130640"
  },
  {
    "text": "Opera to the user process which is node",
    "start": "1130640",
    "end": "1133820"
  },
  {
    "text": "in this case and the node.js will",
    "start": "1133820",
    "end": "1136760"
  },
  {
    "text": "actually uh call our function let me add",
    "start": "1136760",
    "end": "1139520"
  },
  {
    "text": "this part actually to the article",
    "start": "1139520",
    "end": "1141500"
  },
  {
    "text": "I'm going to actually editing the",
    "start": "1141500",
    "end": "1143299"
  },
  {
    "text": "article as we as I'm making the audio",
    "start": "1143299",
    "end": "1144980"
  },
  {
    "text": "version here this is identical to http",
    "start": "1144980",
    "end": "1147500"
  },
  {
    "text": "server and in turn expressjs part 5",
    "start": "1147500",
    "end": "1151600"
  },
  {
    "start": "1150000",
    "end": "1283000"
  },
  {
    "text": "node.js red pool there are cases where",
    "start": "1151600",
    "end": "1154760"
  },
  {
    "text": "asynchronous ready based Eventing is not",
    "start": "1154760",
    "end": "1157039"
  },
  {
    "text": "possible and where the call must block",
    "start": "1157039",
    "end": "1159200"
  },
  {
    "text": "examples are file read write or DNS",
    "start": "1159200",
    "end": "1162260"
  },
  {
    "text": "lookup as we explained earlier if we put",
    "start": "1162260",
    "end": "1165320"
  },
  {
    "text": "the blocking calls on the main thread",
    "start": "1165320",
    "end": "1168140"
  },
  {
    "text": "event Loop node will block starving",
    "start": "1168140",
    "end": "1171679"
  },
  {
    "text": "other tasks in the process node uses a",
    "start": "1171679",
    "end": "1175640"
  },
  {
    "text": "thread pool to address this problem when",
    "start": "1175640",
    "end": "1178160"
  },
  {
    "text": "a blocking call example DNS lookup is",
    "start": "1178160",
    "end": "1181700"
  },
  {
    "text": "scheduled in node a thread is assigned",
    "start": "1181700",
    "end": "1184640"
  },
  {
    "text": "that blocking call and whenever the",
    "start": "1184640",
    "end": "1188600"
  },
  {
    "text": "thread is done it creates a callback in",
    "start": "1188600",
    "end": "1191000"
  },
  {
    "text": "node main thread where the next",
    "start": "1191000",
    "end": "1193460"
  },
  {
    "text": "iteration of the loop will pick it up",
    "start": "1193460",
    "end": "1195799"
  },
  {
    "text": "and execute the callback for the result",
    "start": "1195799",
    "end": "1198620"
  },
  {
    "text": "DNS lookups file IO and user specified",
    "start": "1198620",
    "end": "1203179"
  },
  {
    "text": "workload can use the threadball some",
    "start": "1203179",
    "end": "1206600"
  },
  {
    "text": "ctpu intensive libraries and nodes such",
    "start": "1206600",
    "end": "1209240"
  },
  {
    "text": "as the crypto Library uses the thread",
    "start": "1209240",
    "end": "1212299"
  },
  {
    "text": "pool too all this is implemented in the",
    "start": "1212299",
    "end": "1216020"
  },
  {
    "text": "lab UV Library which node uses note",
    "start": "1216020",
    "end": "1220820"
  },
  {
    "text": "Linux new shiny asynchronous IO which is",
    "start": "1220820",
    "end": "1224660"
  },
  {
    "text": "called IO urine is based on completion",
    "start": "1224660",
    "end": "1228380"
  },
  {
    "text": "instead of Readiness and it supports all",
    "start": "1228380",
    "end": "1231679"
  },
  {
    "text": "file descriptors this is relatively a",
    "start": "1231679",
    "end": "1234260"
  },
  {
    "text": "new technology and libuv has an open",
    "start": "1234260",
    "end": "1237200"
  },
  {
    "text": "pull request to implement it it is",
    "start": "1237200",
    "end": "1239240"
  },
  {
    "text": "possible not to use the asynchronous",
    "start": "1239240",
    "end": "1241820"
  },
  {
    "text": "version of read file and opt-in for the",
    "start": "1241820",
    "end": "1245179"
  },
  {
    "text": "synchronous version instead those calls",
    "start": "1245179",
    "end": "1248419"
  },
  {
    "text": "ends in sync",
    "start": "1248419",
    "end": "1250900"
  },
  {
    "text": "s-y-n-c example f s dot read file sync",
    "start": "1250900",
    "end": "1255400"
  },
  {
    "text": "will call the read directly and will",
    "start": "1255400",
    "end": "1259580"
  },
  {
    "text": "block it will not use the thread pool",
    "start": "1259580",
    "end": "1261820"
  },
  {
    "text": "calling this function will block the",
    "start": "1261820",
    "end": "1264260"
  },
  {
    "text": "event main Loop",
    "start": "1264260",
    "end": "1266120"
  },
  {
    "text": "why would you do that maybe you want",
    "start": "1266120",
    "end": "1269120"
  },
  {
    "text": "your code to look pretty",
    "start": "1269120",
    "end": "1270980"
  },
  {
    "text": "maybe you are using the threads for some",
    "start": "1270980",
    "end": "1273440"
  },
  {
    "text": "other more important things maybe the",
    "start": "1273440",
    "end": "1276140"
  },
  {
    "text": "file you're reading is so tiny then you",
    "start": "1276140",
    "end": "1278600"
  },
  {
    "text": "know it's not gonna cost much part 6 DNS",
    "start": "1278600",
    "end": "1282140"
  },
  {
    "text": "lookup bottleneck and node",
    "start": "1282140",
    "end": "1284780"
  },
  {
    "start": "1283000",
    "end": "1509000"
  },
  {
    "text": "as discussed DNS lookup happens in the",
    "start": "1284780",
    "end": "1288320"
  },
  {
    "text": "background using the thread pool when",
    "start": "1288320",
    "end": "1290179"
  },
  {
    "text": "calling fetch the domain in the URL",
    "start": "1290179",
    "end": "1293480"
  },
  {
    "text": "needs to be resolved to an IP address an",
    "start": "1293480",
    "end": "1297200"
  },
  {
    "text": "ipv4 and IPv6 so fetch can establish a",
    "start": "1297200",
    "end": "1301700"
  },
  {
    "text": "TCP connection with the server",
    "start": "1301700",
    "end": "1304400"
  },
  {
    "text": "it could be the case where all the",
    "start": "1304400",
    "end": "1307039"
  },
  {
    "text": "threads in the thread pool are busy",
    "start": "1307039",
    "end": "1310400"
  },
  {
    "text": "quote-unquote blocked looking up DNS",
    "start": "1310400",
    "end": "1313659"
  },
  {
    "text": "which will block the thread Port from",
    "start": "1313659",
    "end": "1316159"
  },
  {
    "text": "doing other DNS resolutions",
    "start": "1316159",
    "end": "1318860"
  },
  {
    "text": "or even worse asynchronous file IO or",
    "start": "1318860",
    "end": "1323780"
  },
  {
    "text": "other crypto preparation or user-defined",
    "start": "1323780",
    "end": "1327140"
  },
  {
    "text": "CPU a thread pull operations",
    "start": "1327140",
    "end": "1330860"
  },
  {
    "text": "that's a little dangerous if you think",
    "start": "1330860",
    "end": "1333020"
  },
  {
    "text": "about it",
    "start": "1333020",
    "end": "1335000"
  },
  {
    "text": "right because if you do a lot of DNS",
    "start": "1335000",
    "end": "1337580"
  },
  {
    "text": "calls like intentionally or",
    "start": "1337580",
    "end": "1340220"
  },
  {
    "text": "unintentionally the thread pool might be",
    "start": "1340220",
    "end": "1342200"
  },
  {
    "text": "saturated",
    "start": "1342200",
    "end": "1345200"
  },
  {
    "text": "you can of course increase the thread",
    "start": "1345200",
    "end": "1347539"
  },
  {
    "text": "pool size",
    "start": "1347539",
    "end": "1348860"
  },
  {
    "text": "there is a property called UV thread",
    "start": "1348860",
    "end": "1351559"
  },
  {
    "text": "pool underscore size but that but once",
    "start": "1351559",
    "end": "1355460"
  },
  {
    "text": "that number exceeds the number of",
    "start": "1355460",
    "end": "1357020"
  },
  {
    "text": "Hardware threads on your CPU it can",
    "start": "1357020",
    "end": "1360380"
  },
  {
    "text": "backfire",
    "start": "1360380",
    "end": "1361760"
  },
  {
    "text": "and the reason is because the moment you",
    "start": "1361760",
    "end": "1365120"
  },
  {
    "text": "can add an any number of threads right",
    "start": "1365120",
    "end": "1367340"
  },
  {
    "text": "you can spin up any number of it but",
    "start": "1367340",
    "end": "1369080"
  },
  {
    "text": "does that mean yours your your",
    "start": "1369080",
    "end": "1370700"
  },
  {
    "text": "application will gonna get faster your",
    "start": "1370700",
    "end": "1372740"
  },
  {
    "text": "back and we're going to be faster now",
    "start": "1372740",
    "end": "1374059"
  },
  {
    "text": "because at the end of the day you have",
    "start": "1374059",
    "end": "1375980"
  },
  {
    "text": "limited resources the CPU is where the",
    "start": "1375980",
    "end": "1379940"
  },
  {
    "text": "thread has to live to be executed right",
    "start": "1379940",
    "end": "1382820"
  },
  {
    "text": "and if you have a hundred threads you're",
    "start": "1382820",
    "end": "1385280"
  },
  {
    "text": "going to be shifting left and right",
    "start": "1385280",
    "end": "1387080"
  },
  {
    "text": "moving threads out of the end of the CPU",
    "start": "1387080",
    "end": "1389900"
  },
  {
    "text": "to be executed and eventually the cost",
    "start": "1389900",
    "end": "1393260"
  },
  {
    "text": "to context switch between threads is",
    "start": "1393260",
    "end": "1395179"
  },
  {
    "text": "going to be way higher than the cost of",
    "start": "1395179",
    "end": "1397760"
  },
  {
    "text": "execution and that's bad",
    "start": "1397760",
    "end": "1400400"
  },
  {
    "text": "that's not on the article I by the way",
    "start": "1400400",
    "end": "1402200"
  },
  {
    "text": "just judged me",
    "start": "1402200",
    "end": "1404000"
  },
  {
    "text": "so a node provides a function called",
    "start": "1404000",
    "end": "1406780"
  },
  {
    "text": "dns.resolve dns.resolve resolves the DNS",
    "start": "1406780",
    "end": "1410360"
  },
  {
    "text": "that always uses the network and as a",
    "start": "1410360",
    "end": "1413840"
  },
  {
    "text": "result it is asynchronous the problem is",
    "start": "1413840",
    "end": "1417260"
  },
  {
    "text": "how do you know what DNS method your",
    "start": "1417260",
    "end": "1420799"
  },
  {
    "text": "library is using right if you're using a",
    "start": "1420799",
    "end": "1423559"
  },
  {
    "text": "library it's completely a block box how",
    "start": "1423559",
    "end": "1426260"
  },
  {
    "text": "do you know if it's oh is this like",
    "start": "1426260",
    "end": "1427820"
  },
  {
    "text": "synchronous versus asynchronous you have",
    "start": "1427820",
    "end": "1429440"
  },
  {
    "text": "no idea right",
    "start": "1429440",
    "end": "1431299"
  },
  {
    "text": "this is where leaky abstractions can",
    "start": "1431299",
    "end": "1433400"
  },
  {
    "text": "really bite us not",
    "start": "1433400",
    "end": "1435260"
  },
  {
    "text": "DNS lookup is slightly different from",
    "start": "1435260",
    "end": "1437600"
  },
  {
    "text": "DNS resolving lookup indicates that you",
    "start": "1437600",
    "end": "1440659"
  },
  {
    "text": "might have the entry cache locally or",
    "start": "1440659",
    "end": "1443840"
  },
  {
    "text": "might need to read it from the host file",
    "start": "1443840",
    "end": "1446799"
  },
  {
    "text": "while resolving indicates that you",
    "start": "1446799",
    "end": "1450020"
  },
  {
    "text": "actively do a network call to D to a DNS",
    "start": "1450020",
    "end": "1453620"
  },
  {
    "text": "resolver to find the result",
    "start": "1453620",
    "end": "1458799"
  },
  {
    "text": "guys I hope you enjoyed this article I",
    "start": "1459020",
    "end": "1462140"
  },
  {
    "text": "hope you enjoyed this audio podcast and",
    "start": "1462140",
    "end": "1464600"
  },
  {
    "text": "I for members thank you so much for",
    "start": "1464600",
    "end": "1467240"
  },
  {
    "text": "becoming a member and appreciate you I",
    "start": "1467240",
    "end": "1470960"
  },
  {
    "text": "hope you enjoyed this article if you're",
    "start": "1470960",
    "end": "1472940"
  },
  {
    "text": "interested to learn more about network",
    "start": "1472940",
    "end": "1474440"
  },
  {
    "text": "engineering stuff that I mentioned here",
    "start": "1474440",
    "end": "1476299"
  },
  {
    "text": "check out my fundamental to network",
    "start": "1476299",
    "end": "1478039"
  },
  {
    "text": "engineering",
    "start": "1478039",
    "end": "1479840"
  },
  {
    "text": "udemy course to get a discount coupon",
    "start": "1479840",
    "end": "1481460"
  },
  {
    "text": "head to",
    "start": "1481460",
    "end": "1483159"
  },
  {
    "text": "network.hose.com that's Network dot",
    "start": "1483159",
    "end": "1485840"
  },
  {
    "text": "Hussain nassau.com",
    "start": "1485840",
    "end": "1488740"
  },
  {
    "text": "n-e-t-w-o-r-k dot Hussein nasser.com",
    "start": "1489640",
    "end": "1494799"
  },
  {
    "text": "h-u-s-s-e-i-n-n-a-s-s-e-r.com that",
    "start": "1496720",
    "end": "1498020"
  },
  {
    "text": "redirects directly to udemy with the",
    "start": "1498020",
    "end": "1500480"
  },
  {
    "text": "latest and greatest discount coupon it",
    "start": "1500480",
    "end": "1504020"
  },
  {
    "text": "supports the show thank you so much I'm",
    "start": "1504020",
    "end": "1506240"
  },
  {
    "text": "gonna see you on the next one you guys",
    "start": "1506240",
    "end": "1507559"
  },
  {
    "text": "stay awesome goodbye",
    "start": "1507559",
    "end": "1510399"
  }
]