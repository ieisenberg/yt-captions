[
  {
    "start": "0",
    "end": "170000"
  },
  {
    "text": "raw versus column oriented database storages are two style of by which databases",
    "start": "399",
    "end": "6799"
  },
  {
    "text": "use to store their tables on disk each have pros and cons",
    "start": "6799",
    "end": "13599"
  },
  {
    "text": "nothing is perfect there are use cases for column oriented there are use cases for row oriented",
    "start": "13599",
    "end": "20080"
  },
  {
    "text": "databases in this video i want to discuss what is a row oriented database or",
    "start": "20080",
    "end": "26640"
  },
  {
    "text": "also called row store database because that's that's the store type how is it",
    "start": "26640",
    "end": "32398"
  },
  {
    "text": "stored on disk right i'm going to also describe the column oriented database or",
    "start": "32399",
    "end": "39840"
  },
  {
    "text": "also known as column store all another fancy name is columnar database because yeah why not",
    "start": "39840",
    "end": "46960"
  },
  {
    "text": "just let's confuse everybody by new by inventing new names so it's all the same thing",
    "start": "46960",
    "end": "52559"
  },
  {
    "text": "it's just how how things are stored on this we're gonna talk about the difference these two and then finally",
    "start": "52559",
    "end": "58800"
  },
  {
    "text": "we're going to discuss pros and cons",
    "start": "58800",
    "end": "64000"
  },
  {
    "text": "of both how about we jump into it guys all right guys so let's say we have a beautiful table like this",
    "start": "64000",
    "end": "69520"
  },
  {
    "text": "okay it's an employees table it doesn't only have eight rows that have thousands of thousands of rows right but",
    "start": "69520",
    "end": "76560"
  },
  {
    "text": "for simplicity we only have these these are the columns straight forward and the first i want",
    "start": "76560",
    "end": "82880"
  },
  {
    "text": "you to pay attention to this this is the row id this is how databases it's a unique",
    "start": "82880",
    "end": "90079"
  },
  {
    "text": "identifier that identifies the row it's different than the primary key or this id it's just something that most of the",
    "start": "90079",
    "end": "96159"
  },
  {
    "text": "time most databases have this internal mechanism to identify this rule okay",
    "start": "96159",
    "end": "101439"
  },
  {
    "text": "and i want you to pay attention to this so if i'm going to submit a bunch of queries on this",
    "start": "101439",
    "end": "106560"
  },
  {
    "text": "table i want to do this without any indexes because indexes will just complicate the",
    "start": "106560",
    "end": "113280"
  },
  {
    "text": "manner and add by way we think about column versus raw organic i don't i want to take them out of the equation and",
    "start": "113280",
    "end": "119840"
  },
  {
    "text": "think about them just we don't have any indexes we're just scanning the table to to to answer these following",
    "start": "119840",
    "end": "127360"
  },
  {
    "text": "questions so these are the following queries that i'm going to execute on a raw database and then i'm going to ask you the same",
    "start": "127360",
    "end": "133440"
  },
  {
    "text": "exact queries on column database and see which one does best for each style",
    "start": "133440",
    "end": "140080"
  },
  {
    "text": "of how we're going to store these tables right the same table we're going to store it in row yeah same table we're going to start on",
    "start": "140080",
    "end": "146080"
  },
  {
    "text": "column uh storage and then we're going to look how these queries perform so select",
    "start": "146080",
    "end": "151440"
  },
  {
    "text": "first name from employees where a social security number requires 6x the devil and then we're going to select star from",
    "start": "151440",
    "end": "157920"
  },
  {
    "text": "employee where id equal one very simple okay and the final is select sum we're",
    "start": "157920",
    "end": "163599"
  },
  {
    "text": "just going to sum all the salaries of the employees for some reason so the first one row oriented databases",
    "start": "163599",
    "end": "171120"
  },
  {
    "start": "170000",
    "end": "930000"
  },
  {
    "text": "guys so for row oriented databases tables are stored as rows",
    "start": "171120",
    "end": "177440"
  },
  {
    "text": "on disk and this might sound a little bit confusing when you first read it was like of course i was saying how how",
    "start": "177440",
    "end": "184000"
  },
  {
    "text": "else are you gonna store stuff in the day are you gonna start raw by raw right so if you think of the disc as a blob",
    "start": "184000",
    "end": "190159"
  },
  {
    "text": "huge blob store just things that come to bob just just bunch of bits and bytes then the rows",
    "start": "190159",
    "end": "198560"
  },
  {
    "text": "are just contiguous one after the other so uh the id",
    "start": "198560",
    "end": "203920"
  },
  {
    "text": "followed by the first name followed by the second name well then last name then followed by the associated number and then comma and then the",
    "start": "203920",
    "end": "210319"
  },
  {
    "text": "second row starts right and then so on each row obviously has a different size",
    "start": "210319",
    "end": "215519"
  },
  {
    "text": "it could be variable size because i don't know so like my name is john smith and someone",
    "start": "215519",
    "end": "220959"
  },
  {
    "text": "else named hussein met nassar right so that's a longer name so it's going to occupy more storage on",
    "start": "220959",
    "end": "226239"
  },
  {
    "text": "disk obviously unless the rules can again vary but for simplicity let's think about their their fixed size rows",
    "start": "226239",
    "end": "232480"
  },
  {
    "text": "all right when i want to read a particular row",
    "start": "232480",
    "end": "238000"
  },
  {
    "text": "i go i do uh an operation on this called i or read when i read this stuff",
    "start": "238000",
    "end": "246640"
  },
  {
    "text": "the the controller whether this is an ssd drive or a hard disk",
    "start": "246640",
    "end": "252560"
  },
  {
    "text": "reads and blocks it doesn't read like bit by bit more oh but zero one zero one doesn't really",
    "start": "252560",
    "end": "258880"
  },
  {
    "text": "like that it's really just blocked so let's shove 512 bytes at a time",
    "start": "258880",
    "end": "264479"
  },
  {
    "text": "and when you or or i don't know 1024 bytes at a time it depends on the block size this is",
    "start": "264479",
    "end": "270000"
  },
  {
    "text": "something called block side and once you read that you're gonna get not only one row you could get one two three four five",
    "start": "270000",
    "end": "278240"
  },
  {
    "text": "rows in a given block so you get you the act of doing one io can give you five rows and just not all",
    "start": "278240",
    "end": "285840"
  },
  {
    "text": "these five rows five rows and all their columns or their values so so whether you want them or not",
    "start": "285840",
    "end": "292080"
  },
  {
    "text": "you're gonna get everything you're gonna get all the columns so think about that so technically it",
    "start": "292080",
    "end": "298320"
  },
  {
    "text": "you need more ios to find the row you're looking for so imagine you're",
    "start": "298320",
    "end": "303520"
  },
  {
    "text": "doing a table sequential scan on on the entire table so if you're",
    "start": "303520",
    "end": "308639"
  },
  {
    "text": "looking for uh employee with uh social security number six six six you're gonna have to do a",
    "start": "308639",
    "end": "316400"
  },
  {
    "text": "block io you got i don't know seven rows then search these throws one by one you're only interested in the social",
    "start": "316400",
    "end": "322720"
  },
  {
    "text": "security number so you're gonna only pick that field unfortunately you you got all the fields",
    "start": "322720",
    "end": "328400"
  },
  {
    "text": "not saying that's bad could be bad could be good depends what you're doing but that's what you have to work with so you",
    "start": "328400",
    "end": "335280"
  },
  {
    "text": "have to do a lot of ios to to to actually get to the row that",
    "start": "335280",
    "end": "340720"
  },
  {
    "text": "you're looking for because you spent a lot of wasteful reads pulling columns that you didn't",
    "start": "340720",
    "end": "347360"
  },
  {
    "text": "need and you didn't have a choice right so that's that's just one thing",
    "start": "347360",
    "end": "352720"
  },
  {
    "text": "you have to think about withdraw oriented does that mean they're bad no they are beautiful they are elegantly",
    "start": "352720",
    "end": "358319"
  },
  {
    "text": "designed because they are so simple they are just rows and you can easily think about them you",
    "start": "358319",
    "end": "363840"
  },
  {
    "text": "can easily implement them compared to what we're going to come up next so let's dive deep into this so",
    "start": "363840",
    "end": "369520"
  },
  {
    "text": "we're going to take our table and then we're going to convert it into a row based on desk how would how will this look",
    "start": "369520",
    "end": "376160"
  },
  {
    "text": "like let's take a look this is how we're going to look like so imagine this gray box",
    "start": "376160",
    "end": "382080"
  },
  {
    "text": "as a block right and uh for simplicity i bought i put two rows in the same block it",
    "start": "382080",
    "end": "388720"
  },
  {
    "text": "could be three could be four could be five who knows right depends on the block size but think about this as as a given",
    "start": "388720",
    "end": "394560"
  },
  {
    "text": "block each gray box takes one io",
    "start": "394560",
    "end": "400000"
  },
  {
    "text": "jump to the controller to pull that block so once you did",
    "start": "400000",
    "end": "406240"
  },
  {
    "text": "you ask for this block you got everything son you got everything right so now this is how it's stored",
    "start": "406240",
    "end": "412960"
  },
  {
    "text": "basically the roar comma it's not really comma it's just literally consequent",
    "start": "412960",
    "end": "418240"
  },
  {
    "text": "right values but i just added comma for you guys to understand that id first name second last name",
    "start": "418240",
    "end": "425039"
  },
  {
    "text": "ssn or the salary birth date i guess uh when this john the",
    "start": "425039",
    "end": "430800"
  },
  {
    "text": "occupation and so on and so you can see that and this i added this so it can indicate",
    "start": "430800",
    "end": "436319"
  },
  {
    "text": "the second row it doesn't really exist it's just an identifier like to allow us that oh this is",
    "start": "436319",
    "end": "443199"
  },
  {
    "text": "actually a second row yes they just started and then a row just ended and you can see that",
    "start": "443199",
    "end": "448800"
  },
  {
    "text": "we these are the two rows two rows two rows so let's execute our first query against",
    "start": "448800",
    "end": "455680"
  },
  {
    "text": "a row oriented database i'm looking for the first name",
    "start": "455680",
    "end": "461520"
  },
  {
    "text": "for employee where the their social security number is 666. they're devil all right so let's pull it",
    "start": "461520",
    "end": "470720"
  },
  {
    "text": "what do we do we ask hey because i don't know i have to start from the top right because",
    "start": "470720",
    "end": "475840"
  },
  {
    "text": "i don't know where employee 666 is something like that this number this field has any relation",
    "start": "475840",
    "end": "484080"
  },
  {
    "text": "to the row itself it's just a random value right so i have to pull the first block",
    "start": "484080",
    "end": "490240"
  },
  {
    "text": "of the table does 666 exist in this nope",
    "start": "490240",
    "end": "495280"
  },
  {
    "text": "this is two two two and this guy is one one one that's the social security so let's pull the second block right",
    "start": "495280",
    "end": "503199"
  },
  {
    "text": "nope it doesn't exist this is four three three three right and yeah it might look sorted but it",
    "start": "503199",
    "end": "508479"
  },
  {
    "text": "doesn't have to be sorted guys right just this is just um i'm i'm walking through that query with",
    "start": "508479",
    "end": "514000"
  },
  {
    "text": "you right again no indexes nothing now i'm gonna pull this next block so i",
    "start": "514000",
    "end": "521279"
  },
  {
    "text": "did three reads and then ah i happened to find that 666 so i found what i'm looking for",
    "start": "521279",
    "end": "529360"
  },
  {
    "text": "now i want the first name guess what i don't need to do any extra",
    "start": "529360",
    "end": "536080"
  },
  {
    "text": "read why because the first name is right there in the memory now because that once i pull this block it's",
    "start": "536080",
    "end": "543040"
  },
  {
    "text": "in memory it's in the ram and when when i ask for it i don't have to go back to the disc because yeah",
    "start": "543040",
    "end": "548080"
  },
  {
    "text": "guess what i just pulled it i found it now i just hey this is the first name and i know because",
    "start": "548080",
    "end": "553440"
  },
  {
    "text": "the position this position number two is the first name so pull it so once i find something",
    "start": "553440",
    "end": "560399"
  },
  {
    "text": "asking for extra columns are really cheap because we we already got them right",
    "start": "560399",
    "end": "567120"
  },
  {
    "text": "again guys you have to think about this whatever i'm going to explain to you there is no bad or good that depends on",
    "start": "567120",
    "end": "573200"
  },
  {
    "text": "your use case depending on your queries it depends on your where clauses and based on that you pick",
    "start": "573200",
    "end": "579120"
  },
  {
    "text": "raw versus column day so we're going to come to that so that's the first query let's do another query let's do another",
    "start": "579120",
    "end": "586560"
  },
  {
    "text": "query okay i guess it's executed immediately all right so we're gonna do select star from employee",
    "start": "586560",
    "end": "593680"
  },
  {
    "text": "where id equal one right and since it's id equal one",
    "start": "593680",
    "end": "599279"
  },
  {
    "text": "this if this is a sequence the database can do tricks where it can link this sequence",
    "start": "599279",
    "end": "605120"
  },
  {
    "text": "with the raw id and says okay id1 is on row 1001 so",
    "start": "605120",
    "end": "610399"
  },
  {
    "text": "i know actually where to jump and pull this row this block",
    "start": "610399",
    "end": "616720"
  },
  {
    "text": "right it doesn't have to read other things but it happened to be that this the first block is what we're looking for so yeah",
    "start": "616720",
    "end": "623120"
  },
  {
    "text": "we're lucky i guess but even if we don't have this trick where we link the id to the raw id",
    "start": "623120",
    "end": "628320"
  },
  {
    "text": "we still have to go through each block and once we find the block we want",
    "start": "628320",
    "end": "633360"
  },
  {
    "text": "guess what now i want all the columns can i do this absolutely that is so",
    "start": "633360",
    "end": "640880"
  },
  {
    "text": "cheap because all the columns are already in memory",
    "start": "640880",
    "end": "646000"
  },
  {
    "text": "assuming they are not vertically partitioned into another location right vertical partitioning i",
    "start": "646000",
    "end": "652320"
  },
  {
    "text": "talked about that in many times in my channels and my courses so vertical",
    "start": "652320",
    "end": "657440"
  },
  {
    "text": "partitioning where we take a column and put it somewhere else right this is not the case well everything is in one beautiful block so",
    "start": "657440",
    "end": "664079"
  },
  {
    "text": "i i pulled that block i asked for the id i found the id and now the user is asking for every",
    "start": "664079",
    "end": "670560"
  },
  {
    "text": "field i always tell people that hey select star is bad guys stay away from it but",
    "start": "670560",
    "end": "675839"
  },
  {
    "text": "it really depends what you're trying to do if you have indexes try to do less of that stuff so next",
    "start": "675839",
    "end": "682560"
  },
  {
    "text": "time we're gonna learn that it's the worst thing you can do in a column oriented database select star in raw you can live without",
    "start": "682560",
    "end": "690640"
  },
  {
    "text": "it i guess still just just be aware of that so that's cheap that's relatively cheap",
    "start": "690640",
    "end": "696160"
  },
  {
    "text": "because i'm going to pull all the rows and if they're everything in memory beautiful assume it fit in memory",
    "start": "696160",
    "end": "702000"
  },
  {
    "text": "so could it could only could it only be one block not necessarily because a row can span multiple blocks if it's",
    "start": "702000",
    "end": "709519"
  },
  {
    "text": "too huge let's say that we have a i don't know some blob here field and then",
    "start": "709519",
    "end": "714880"
  },
  {
    "text": "like it's a bad idea to store blobs in line anyway but let's let's assume you do but",
    "start": "714880",
    "end": "721600"
  },
  {
    "text": "that means this block can this row can span seven blocks for example so you need to",
    "start": "721600",
    "end": "727440"
  },
  {
    "text": "read all the block not necessary the database are smart it's going to read the first block",
    "start": "727440",
    "end": "732639"
  },
  {
    "text": "find the id and only the rows the the columns you ask for is going to ask for the rest of the block to",
    "start": "732639",
    "end": "739040"
  },
  {
    "text": "to fetch your stuff databases have been doing this for years they know what they doing but i want you just to i want to",
    "start": "739040",
    "end": "744639"
  },
  {
    "text": "explain how i was doing this stuff awesome so let's let's do the same thing but an aggregate",
    "start": "744639",
    "end": "751120"
  },
  {
    "text": "this is called an aggregate function which is an aggregate is just grouping by something right so you work",
    "start": "751120",
    "end": "757440"
  },
  {
    "text": "on one or a few columns mainly one or less how do you work with the",
    "start": "757440",
    "end": "763680"
  },
  {
    "text": "less column that's just idiot i'm an idiot okay so you work with few",
    "start": "763680",
    "end": "770880"
  },
  {
    "text": "columns or let's say one in this example okay so select some salary from employees just sum every",
    "start": "770880",
    "end": "777920"
  },
  {
    "text": "salary let's do this so we pick the first block",
    "start": "777920",
    "end": "783680"
  },
  {
    "text": "well tough luck i only wanted the salary tough luck i i got everything again no indexes here",
    "start": "783680",
    "end": "789200"
  },
  {
    "text": "with indexes this could be extremely fast but i'm i'm just telling you what the database does without",
    "start": "789200",
    "end": "795200"
  },
  {
    "text": "indexes so you pull this oh pick the salary it's uh one thousand and one and one thousand",
    "start": "795200",
    "end": "801440"
  },
  {
    "text": "two so we summed those two now let's pull the next block so we get the more rows",
    "start": "801440",
    "end": "806639"
  },
  {
    "text": "okay one thousand uh 103 103k 104k sum them and then pull",
    "start": "806639",
    "end": "814079"
  },
  {
    "text": "105 106. sum them so guys every block we write we pull",
    "start": "814079",
    "end": "821199"
  },
  {
    "text": "we're pulling raw ids we're pulling first names one last names one ssm we're putting salary or pointing there",
    "start": "821199",
    "end": "827519"
  },
  {
    "text": "which we never use right so imagine if i only asked for the uh for the salaries and if they ca",
    "start": "827519",
    "end": "835279"
  },
  {
    "text": "they were grouped nicely that would be awesome wouldn't it but now unfortunately we're asking",
    "start": "835279",
    "end": "841920"
  },
  {
    "text": "salary but we're pulling all the rows so that's a lot of io so again this is not just one read",
    "start": "841920",
    "end": "848399"
  },
  {
    "text": "it can appear in this screen he has a one read if the row is long you can read seven blocks so that's",
    "start": "848399",
    "end": "854480"
  },
  {
    "text": "seven ios right i mean yeah the databases can do trick where they send one request asynchronously read multiple",
    "start": "854480",
    "end": "862880"
  },
  {
    "text": "blocks but regardless you're hitting the disk which which every time you hit the disk is uh a duck",
    "start": "862880",
    "end": "870480"
  },
  {
    "text": "dies essentially right so try to save ducks as much as possible save the ducks guys save the ducks so",
    "start": "870480",
    "end": "878720"
  },
  {
    "text": "yeah reading reading and we're summing we're summing all that stuff that's not so bad i guess yeah but",
    "start": "878720",
    "end": "886240"
  },
  {
    "text": "you read unnecessary information that means you almost read the entire table",
    "start": "886240",
    "end": "893120"
  },
  {
    "text": "but you used very very small portion of it that's",
    "start": "893120",
    "end": "898560"
  },
  {
    "text": "extremely inefficient so raw databases doesn't do well this kind of queries if you think about it",
    "start": "898560",
    "end": "904480"
  },
  {
    "text": "does it doesn't mean it's slow really depends what do you mean by slow i mean you you've run this kind of",
    "start": "904480",
    "end": "911360"
  },
  {
    "text": "course the databases do all kind of tricks to be fast but if you think about the logic and i'm not saying",
    "start": "911360",
    "end": "918240"
  },
  {
    "text": "this is how databases absolutely work they have all sorts of trick again multi-threading they send multiple",
    "start": "918240",
    "end": "924079"
  },
  {
    "text": "threads postgres and multiple threads to to read asynchronously so so they do all sorts of work to do fast but",
    "start": "924079",
    "end": "931360"
  },
  {
    "start": "930000",
    "end": "1590000"
  },
  {
    "text": "let's discuss how column oriented databases work so we'll call them oriented databases if",
    "start": "931360",
    "end": "936880"
  },
  {
    "text": "you think about it tables are stored as columns first in disk so think about",
    "start": "936880",
    "end": "944000"
  },
  {
    "text": "the first name column the id column the last name column so what they do is",
    "start": "944000",
    "end": "949839"
  },
  {
    "text": "they take the first name and they take all possible values john melissa",
    "start": "949839",
    "end": "957360"
  },
  {
    "text": "uh wreck paul hussein everybody and and pull all of these into in",
    "start": "957360",
    "end": "965279"
  },
  {
    "text": "and save them in disk as consecutive values and then once that table is done and",
    "start": "965279",
    "end": "971120"
  },
  {
    "text": "their last value of the first name is done they start with the second one right last name and then and then so on",
    "start": "971120",
    "end": "978160"
  },
  {
    "text": "so you might say oh why are we doing this and we're to come to that so a single block io read",
    "start": "978160",
    "end": "985600"
  },
  {
    "text": "to the table features multiple columns with all matching rows right so it",
    "start": "985600",
    "end": "992560"
  },
  {
    "text": "features a column it could be fetched one column or multiple",
    "start": "992560",
    "end": "998160"
  },
  {
    "text": "depends right it depends like if the if you have a small table you can fetch multiple one if you",
    "start": "998160",
    "end": "1004160"
  },
  {
    "text": "ask the databases hey give me this you're going to get a lot of rows that's the the trick here",
    "start": "1004160",
    "end": "1010320"
  },
  {
    "text": "so a single column with a lot of rows less ios are required to get more values",
    "start": "1010320",
    "end": "1017759"
  },
  {
    "text": "of a given column right because if you want to get as we said",
    "start": "1017759",
    "end": "1025520"
  },
  {
    "text": "the first hundred salaries that is extremely efficient in column-oriented data because hey",
    "start": "1025520",
    "end": "1030720"
  },
  {
    "text": "just go to the place where we know we start the salary column and just walk through there because",
    "start": "1030720",
    "end": "1036640"
  },
  {
    "text": "you're gonna see the values just consequent we're going to go into the example and they are great on online analytic processes as we're going",
    "start": "1036640",
    "end": "1043120"
  },
  {
    "text": "to see in the in the coming slides all right so let's take the same exact table and start as columns here's how it",
    "start": "1043120",
    "end": "1049760"
  },
  {
    "text": "looks like again the raw id is very critical here the id field is this this is the first name second last name",
    "start": "1049760",
    "end": "1056240"
  },
  {
    "text": "i keep saying second social security number this is a salary",
    "start": "1056240",
    "end": "1061520"
  },
  {
    "text": "the date of birth the title i think and this is the join date look at this",
    "start": "1061520",
    "end": "1067039"
  },
  {
    "text": "so look at this i want the the id one and this which row is this thousand and",
    "start": "1067039",
    "end": "1072880"
  },
  {
    "text": "one i need two which row three thousand three why we're gonna we're gonna see look at",
    "start": "1072880",
    "end": "1079280"
  },
  {
    "text": "this the raw id is duplicated in every column so just like that what is the first",
    "start": "1079280",
    "end": "1085200"
  },
  {
    "text": "thing that comes to mind in mind oh editing is gonna be painful",
    "start": "1085200",
    "end": "1091280"
  },
  {
    "text": "because anything you if you delete row 1004 you have to poof",
    "start": "1091280",
    "end": "1098000"
  },
  {
    "text": "you have to go and mark all these stupid columns right or these blocks remember these are",
    "start": "1100480",
    "end": "1106080"
  },
  {
    "text": "blocks right so and and for fun i split some of them and and multiple blocks",
    "start": "1106080",
    "end": "1111440"
  },
  {
    "text": "doesn't mean they are like i know this is an integer for example or string i just split them for telling me that",
    "start": "1111440",
    "end": "1118160"
  },
  {
    "text": "okay we couldn't store all all four rows here in one block so we",
    "start": "1118160",
    "end": "1123600"
  },
  {
    "text": "had to split it to another block right so i can show you different kind of examples again take it with a grain of salt i",
    "start": "1123600",
    "end": "1129919"
  },
  {
    "text": "just want to explain this things to you so this is one block two blocks two blocks two blocks",
    "start": "1129919",
    "end": "1135440"
  },
  {
    "text": "one block one block one block one block okay got it so this is how it works so they just",
    "start": "1135440",
    "end": "1141280"
  },
  {
    "text": "store all this stuff in columns so all the id field the entire the entire",
    "start": "1141280",
    "end": "1147280"
  },
  {
    "text": "tables here right all the possible values so this is not just one",
    "start": "1147280",
    "end": "1152559"
  },
  {
    "text": "block could be hundreds of thousands of blocks if you have a lot of rows remember everything needs to be",
    "start": "1152559",
    "end": "1159760"
  },
  {
    "text": "updated if you add a new row you have to updated in all of these",
    "start": "1159760",
    "end": "1165280"
  },
  {
    "text": "logical structures so what that being said now we know how",
    "start": "1165280",
    "end": "1170559"
  },
  {
    "text": "this works let's put it to the test select first name from employee",
    "start": "1170559",
    "end": "1176000"
  },
  {
    "text": "or social security number 666 so now the database will say wait a second",
    "start": "1176000",
    "end": "1181200"
  },
  {
    "text": "you're looking for social security number i don't need to look at any of other",
    "start": "1181200",
    "end": "1186400"
  },
  {
    "text": "logical structures except for the social security which is this puppy this is the social",
    "start": "1186400",
    "end": "1192000"
  },
  {
    "text": "security data desk right this is how a store i know this is",
    "start": "1192000",
    "end": "1197360"
  },
  {
    "text": "the location so in disk i know where to point my needle and read this stuff so",
    "start": "1197360",
    "end": "1204960"
  },
  {
    "text": "to search for social security number i only need to pull this right so now i start reading block",
    "start": "1204960",
    "end": "1211919"
  },
  {
    "text": "by block i read first block and i got a lot of beautiful values i got five five five",
    "start": "1211919",
    "end": "1217679"
  },
  {
    "text": "four four four three three two one one we did not get six six six so okay no",
    "start": "1217679",
    "end": "1224480"
  },
  {
    "text": "problem let's pull the second block this is almost like the row base but now at the column level does that make sense",
    "start": "1224480",
    "end": "1231840"
  },
  {
    "text": "so now we got it we found it but now i need the first name",
    "start": "1231840",
    "end": "1239200"
  },
  {
    "text": "what first name is not here son you only got the six six now you found",
    "start": "1239200",
    "end": "1244799"
  },
  {
    "text": "that this is actually 1006. that's almost like an how indexing works if you think about it",
    "start": "1244799",
    "end": "1251280"
  },
  {
    "text": "this is how postgres stores indexes is actually if you think about this as an index it's it's almost very similar right it just",
    "start": "1251280",
    "end": "1258960"
  },
  {
    "text": "points to the row now 1006. row 1006 i know this value i know the",
    "start": "1258960",
    "end": "1265760"
  },
  {
    "text": "row i'm looking for this is very critical and i'm asked for the first name where's",
    "start": "1265760",
    "end": "1273039"
  },
  {
    "text": "the first name the first name is right here this is the first name so i'm not gonna read this",
    "start": "1273039",
    "end": "1278480"
  },
  {
    "text": "blah i'm only gonna jump right here right so obviously we found this row as",
    "start": "1278480",
    "end": "1283919"
  },
  {
    "text": "we said and then we're gonna jump right not the first block",
    "start": "1283919",
    "end": "1288960"
  },
  {
    "text": "i'm gonna jump to this block you might say jose how did you know that it's in this block and you didn't pull",
    "start": "1288960",
    "end": "1294320"
  },
  {
    "text": "this block because i know the row number and the database does all sorts of trick",
    "start": "1294320",
    "end": "1299440"
  },
  {
    "text": "to to so okay this block has only rose from 1001 to",
    "start": "1299440",
    "end": "1304799"
  },
  {
    "text": "1004 right so i'm going to jump to block number 703",
    "start": "1304799",
    "end": "1310000"
  },
  {
    "text": "because it it exactly locate the row i want right because they have",
    "start": "1310000",
    "end": "1315440"
  },
  {
    "text": "all this metadata mumbo jumbo right again that's back to our question",
    "start": "1315440",
    "end": "1320880"
  },
  {
    "text": "the 1006 link with the block it's all there they know they pull it and they find it",
    "start": "1320880",
    "end": "1327280"
  },
  {
    "text": "so we had to do one jump one block read second block read jumped back to another block read and",
    "start": "1327280",
    "end": "1334480"
  },
  {
    "text": "then we got it so three not so bad i guess let's just like start",
    "start": "1334480",
    "end": "1340159"
  },
  {
    "text": "from employee where id equal and let's see how how how calm how our beautiful column",
    "start": "1340159",
    "end": "1345919"
  },
  {
    "text": "index column storage do all right so i'd equal one again i don't have any knowledge",
    "start": "1345919",
    "end": "1350960"
  },
  {
    "text": "with this so i'm going to start id where's id this is the id so i need only to read these",
    "start": "1350960",
    "end": "1357760"
  },
  {
    "text": "structures right let's pull it found 1001 it's thousand and one",
    "start": "1357760",
    "end": "1365200"
  },
  {
    "text": "so now i have knowledge of the row i know which block to read",
    "start": "1365200",
    "end": "1370480"
  },
  {
    "text": "but the user asked me for everything okay",
    "start": "1370480",
    "end": "1378400"
  },
  {
    "text": "let's jump on okay we found that let's jump on to the first name",
    "start": "1378400",
    "end": "1383919"
  },
  {
    "text": "we know which block to read so this one that's one read let's jump on another i o last name",
    "start": "1383919",
    "end": "1391039"
  },
  {
    "text": "because they want the last name they want everything read oh found it because i know i don't need to read this because",
    "start": "1391039",
    "end": "1397280"
  },
  {
    "text": "i only know which block exactly in each column to read to find my value all right ssn",
    "start": "1397280",
    "end": "1405360"
  },
  {
    "text": "find read salary read birthday read",
    "start": "1405360",
    "end": "1412799"
  },
  {
    "text": "engineer i have a bug here i should have i didn't stretch it enough engineer read",
    "start": "1412799",
    "end": "1420000"
  },
  {
    "text": "and joined it read what have we done guys this is the worst",
    "start": "1420000",
    "end": "1427360"
  },
  {
    "text": "query there is so much thrashing happening on disk",
    "start": "1427360",
    "end": "1432880"
  },
  {
    "text": "that this is the worst thing you can do column databases just tanks when you do",
    "start": "1432880",
    "end": "1439840"
  },
  {
    "text": "this especially if you have a lot of columns and you're asking for everything and if especially if you have like a lot",
    "start": "1439840",
    "end": "1446480"
  },
  {
    "text": "of and queries or queries here where you had to jump to find then multiple rows that will",
    "start": "1446480",
    "end": "1455039"
  },
  {
    "text": "dude dude do that do it and do that i'm talking to both of",
    "start": "1455039",
    "end": "1460400"
  },
  {
    "text": "you dude do that do not do this select store with the raw storage",
    "start": "1460400",
    "end": "1466240"
  },
  {
    "text": "column storage do not do select store this is do you know how how many ducks die when",
    "start": "1466240",
    "end": "1473039"
  },
  {
    "text": "you do this kind of queries guys you go to the database you read all this stuff ducks every io kills a duck right",
    "start": "1473039",
    "end": "1480559"
  },
  {
    "text": "save the ducks please guys all right let's do this select some salary from employees now",
    "start": "1480559",
    "end": "1486240"
  },
  {
    "text": "that we saw how horrible column oriented databases can be let's see how great they are",
    "start": "1486240",
    "end": "1493120"
  },
  {
    "text": "i want to sum all the salaries yes sir where's the salary field there it is",
    "start": "1493120",
    "end": "1500000"
  },
  {
    "text": "one read done done",
    "start": "1500000",
    "end": "1506559"
  },
  {
    "text": "well if you have if you live in multiple blocks you're gonna read the multiple blocks but done that's it that's it",
    "start": "1506559",
    "end": "1514400"
  },
  {
    "text": "and if you have caching and stuff like that [Music] and by the way i didn't mention",
    "start": "1514400",
    "end": "1521200"
  },
  {
    "text": "something if you if people multiple people have the same salary column oriented databases do something",
    "start": "1521200",
    "end": "1527440"
  },
  {
    "text": "called compression and aggregate they actually if let's say if",
    "start": "1527440",
    "end": "1533440"
  },
  {
    "text": "three people have a hundred thousand salary calories okay all of them have a lot of calories",
    "start": "1533440",
    "end": "1540080"
  },
  {
    "text": "right they have a lot of salaries and then you can you can just have one",
    "start": "1540080",
    "end": "1545600"
  },
  {
    "text": "entry one hundred thousand with a comma base right some one thousand three one thousand four one thousand and five all of them have the same ones",
    "start": "1545600",
    "end": "1552240"
  },
  {
    "text": "so this is even more compact so this will give me a lot of bang for my buck",
    "start": "1552240",
    "end": "1558159"
  },
  {
    "text": "by just doing one block again i sometimes if i if if if there's like a duplication",
    "start": "1558159",
    "end": "1563760"
  },
  {
    "text": "ooh this is the best thing for common oriented database that you just shove it in the same row because there okay they're going to do it as an array",
    "start": "1563760",
    "end": "1570400"
  },
  {
    "text": "we talked about that a little bit in in my postscript 13 prosciutto 13 they just started doing this",
    "start": "1570400",
    "end": "1576720"
  },
  {
    "text": "index deduplication i believe they called it b3 deduplication postgres version 13 they start shoving",
    "start": "1576720",
    "end": "1584159"
  },
  {
    "text": "more duplicated values on a single leaf node so they can compress compress on",
    "start": "1584159",
    "end": "1592400"
  },
  {
    "start": "1590000",
    "end": "2056000"
  },
  {
    "text": "so yeah pros and cons is this thing perfect nope nope nope",
    "start": "1592400",
    "end": "1598080"
  },
  {
    "text": "nothing perfect it depends on your use case guys uh if you ask me i still prefer row bass to be honest",
    "start": "1598080",
    "end": "1604960"
  },
  {
    "text": "just simplicity of writes and reads but there are some cases where you need",
    "start": "1604960",
    "end": "1610159"
  },
  {
    "text": "column-based orientations to summarize right right and reads",
    "start": "1610159",
    "end": "1616159"
  },
  {
    "text": "you want a simple structure and we saw how complex column stores are right they're very complex",
    "start": "1616159",
    "end": "1623679"
  },
  {
    "text": "they you have to duplicate you have to show the the the the the raw ids",
    "start": "1623679",
    "end": "1629039"
  },
  {
    "text": "everywhere that can be a little bit messy for writes and slow rights and redraw that's",
    "start": "1629039",
    "end": "1634640"
  },
  {
    "text": "why a lot of people use column based and warehouses and stuff like that and lakes data lakes",
    "start": "1634640",
    "end": "1640480"
  },
  {
    "text": "where things are just almost static they don't edit they just do a lot of analytics on a single column so that's powerful",
    "start": "1640480",
    "end": "1648159"
  },
  {
    "text": "stuff right so let's go through these pros and cons in general so for all based uh",
    "start": "1648159",
    "end": "1654960"
  },
  {
    "text": "it's very optimal for read and writes right and then well i'm going to say read and write i'm going to say transactions in general",
    "start": "1654960",
    "end": "1661440"
  },
  {
    "text": "online transactional processing right they're very great for this because",
    "start": "1661440",
    "end": "1666559"
  },
  {
    "text": "they are very simple in their implementation so and if something simple we can",
    "start": "1666559",
    "end": "1672320"
  },
  {
    "text": "enhance it and make it more and more efficient as as we go right that's why rights are fast",
    "start": "1672320",
    "end": "1677760"
  },
  {
    "text": "that what uh reads almost fast it depends what how your query looks like we saw some examples right online trans trains",
    "start": "1677760",
    "end": "1684960"
  },
  {
    "text": "uh online transaction protocols uh processing right transactions are great for row based",
    "start": "1684960",
    "end": "1691360"
  },
  {
    "text": "because you start a transaction we know what exactly what rows what blocks to touch we can",
    "start": "1691360",
    "end": "1696720"
  },
  {
    "text": "write the wall the right ahead log efficiently because we know exactly what we're changing",
    "start": "1696720",
    "end": "1703440"
  },
  {
    "text": "right versus column this will a little bit the structure is all over the place so we have to do a",
    "start": "1703440",
    "end": "1709520"
  },
  {
    "text": "scatter shot compression isn't really as effective though because uh",
    "start": "1709520",
    "end": "1716320"
  },
  {
    "text": "think about it right i'm not talking about the that do duplication that's something you can do in the index",
    "start": "1716320",
    "end": "1721760"
  },
  {
    "text": "i'm talking about just the idea of having the the values uh in the",
    "start": "1721760",
    "end": "1729120"
  },
  {
    "text": "in the row the row itself is almost distinct right it's almost like a",
    "start": "1729120",
    "end": "1736159"
  },
  {
    "text": "hash because like it consists of different fields right so you can really easily compress it",
    "start": "1736159",
    "end": "1743360"
  },
  {
    "text": "right the compression algorithms is not going to find a lot of tweaks to compress",
    "start": "1743360",
    "end": "1749200"
  },
  {
    "text": "because the values are are not consequent right compared to",
    "start": "1749200",
    "end": "1754559"
  },
  {
    "text": "uh the column oriented where the or the the consequent values are almost the same type and",
    "start": "1754559",
    "end": "1760640"
  },
  {
    "text": "almost the same thing right so you're gonna get a lot of chances where of duplication like so you're going to",
    "start": "1760640",
    "end": "1767200"
  },
  {
    "text": "learn a lot of people named john right so john's all going to be swa",
    "start": "1767200",
    "end": "1772240"
  },
  {
    "text": "squash together so compression is not as efficient with rose because you get all this different things that",
    "start": "1772240",
    "end": "1780080"
  },
  {
    "text": "are next to each other i know completely different so we can't compress as effectively aggregation we saw how how poorly the",
    "start": "1780080",
    "end": "1787200"
  },
  {
    "text": "raw based database did with the with the aggregation i mean we had to query the whole table",
    "start": "1787200",
    "end": "1793679"
  },
  {
    "text": "but we we pulled lots of information that we didn't pick so column oriented databases were more",
    "start": "1793679",
    "end": "1801039"
  },
  {
    "text": "efficient when it comes to with aggregation because we fetch only what we need and",
    "start": "1801039",
    "end": "1806840"
  },
  {
    "text": "we work on that so if you if you started switching information",
    "start": "1806840",
    "end": "1812720"
  },
  {
    "text": "or data that that are only what you need then you're going to start you you'd be",
    "start": "1812720",
    "end": "1818960"
  },
  {
    "text": "very very efficient in your query and you only fetch the information that you need",
    "start": "1818960",
    "end": "1824559"
  },
  {
    "text": "right so obviously you're going to have a lot and you're going to finish faster than than raw or oriented databases",
    "start": "1824559",
    "end": "1831440"
  },
  {
    "text": "efficient queries with multi columns right so if you're picking multiple columns in a query or",
    "start": "1831440",
    "end": "1837440"
  },
  {
    "text": "working with multiple columns usually raw oriented or better",
    "start": "1837440",
    "end": "1844320"
  },
  {
    "text": "right and again it depends i'm talking only about the queries itself right",
    "start": "1844320",
    "end": "1850559"
  },
  {
    "text": "so you can have a lot of columns if you want to but if you're only working with a few of them that's",
    "start": "1850559",
    "end": "1856640"
  },
  {
    "text": "absolutely fine with column oriented databases but if you",
    "start": "1856640",
    "end": "1862240"
  },
  {
    "text": "actually working and touching all these columns i could be bad right with",
    "start": "1862240",
    "end": "1868399"
  },
  {
    "text": "column-oriented databases with withdrawal we saw it right a fetch on the row give us almost all the columns against",
    "start": "1868399",
    "end": "1875279"
  },
  {
    "text": "again you if you unless you have vertical partitioning so with column based rights are slower because we have to",
    "start": "1875279",
    "end": "1882000"
  },
  {
    "text": "update all these beautiful structures every column has almost a structure on itself think of it this way houses",
    "start": "1882000",
    "end": "1887840"
  },
  {
    "text": "stored so i need to know where is it located and touch it touch it touch it every column right like very similar to indexes if",
    "start": "1887840",
    "end": "1894880"
  },
  {
    "text": "you think about they are perfect for online analytical processing so if you're doing analysis",
    "start": "1894880",
    "end": "1900960"
  },
  {
    "text": "you're not touching you're not writing perfect column learning to databases it compressed greatly because all",
    "start": "1900960",
    "end": "1908640"
  },
  {
    "text": "similar sampling are together so you can the compression algorithms",
    "start": "1908640",
    "end": "1914320"
  },
  {
    "text": "can do magic on these things and compress them amazing for aggregation",
    "start": "1914320",
    "end": "1920559"
  },
  {
    "text": "we saw beep bro done right that was that's that was amazing",
    "start": "1920559",
    "end": "1925760"
  },
  {
    "text": "i'm gonna i gotta i can admit and finally it's inefficient for queries",
    "start": "1925760",
    "end": "1931279"
  },
  {
    "text": "well the multiple comes if you're working if you're asking for a lot of columns don't do a column don't do a column oriented i know this",
    "start": "1931279",
    "end": "1937679"
  },
  {
    "text": "is this is a little bit weird you think that column oriented databases or columnar into data stores or columnar",
    "start": "1937679",
    "end": "1943760"
  },
  {
    "text": "will be great if you're asking for a lot of columns nope they're the worst of this stuff",
    "start": "1943760",
    "end": "1949039"
  },
  {
    "text": "i know guys postgres mysql other databases most of them are",
    "start": "1949039",
    "end": "1955840"
  },
  {
    "text": "raw based storage however sap hana and others have uh oracle i believe most databases",
    "start": "1955840",
    "end": "1964960"
  },
  {
    "text": "by default go with road row row based storage however if you think about it",
    "start": "1964960",
    "end": "1973120"
  },
  {
    "text": "they have database storage engine and we talked about database storage in in my database course and then my",
    "start": "1973120",
    "end": "1980159"
  },
  {
    "text": "youtube channel as well i talked about it how how a database engine you can swizzle this database engine for a given",
    "start": "1980159",
    "end": "1986880"
  },
  {
    "text": "table so every table you can pick a table and you store this table as column store and you can pick another",
    "start": "1986880",
    "end": "1995120"
  },
  {
    "text": "table and store it as row store you can swizzle the database engine right",
    "start": "1995120",
    "end": "2000640"
  },
  {
    "text": "based on that you can just change your database engine for every table based on the needs if you have a table",
    "start": "2000640",
    "end": "2006960"
  },
  {
    "text": "that only get queried make it column for example right if you're doing a lot of analytics on it",
    "start": "2006960",
    "end": "2013120"
  },
  {
    "text": "make it a column right if you're doing a lot of writes and probably you want to make it a raw",
    "start": "2013120",
    "end": "2018159"
  },
  {
    "text": "store right and think about all of the stuff like you cannot for example join a",
    "start": "2018159",
    "end": "2024279"
  },
  {
    "text": "row-based store call a table with a column-based",
    "start": "2024279",
    "end": "2029840"
  },
  {
    "text": "table right that's just bad i mean some databases support this but",
    "start": "2029840",
    "end": "2035919"
  },
  {
    "text": "give them give them a break guys give them a break because that will be really disastrous i i can't",
    "start": "2035919",
    "end": "2041679"
  },
  {
    "text": "even imagine what the database will do it was gonna freak out i guess all right guys that's it for me today",
    "start": "2041679",
    "end": "2046960"
  },
  {
    "text": "what do you think about these two puppies let me know in the comment section below i'm gonna see you",
    "start": "2046960",
    "end": "2052480"
  },
  {
    "text": "in the next one you guys stay awesome goodbye",
    "start": "2052480",
    "end": "2057280"
  }
]