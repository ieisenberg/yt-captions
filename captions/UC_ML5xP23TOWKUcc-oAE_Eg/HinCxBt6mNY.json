[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "hey guys i absolutely love this kind of",
    "start": "160",
    "end": "2480"
  },
  {
    "text": "content where i ask a question on the",
    "start": "2480",
    "end": "4880"
  },
  {
    "text": "community tab and i make it into a poll",
    "start": "4880",
    "end": "7839"
  },
  {
    "text": "you know to see the different kind of",
    "start": "7839",
    "end": "9760"
  },
  {
    "text": "thinking the different kind of answers",
    "start": "9760",
    "end": "11759"
  },
  {
    "text": "we get based on this uh question and i",
    "start": "11759",
    "end": "15839"
  },
  {
    "text": "try to as much as possible not phrase it",
    "start": "15839",
    "end": "18240"
  },
  {
    "text": "into as okay there's one answer and",
    "start": "18240",
    "end": "20560"
  },
  {
    "text": "one's answer only and if you don't",
    "start": "20560",
    "end": "22240"
  },
  {
    "text": "answer it right you bad me good no",
    "start": "22240",
    "end": "25599"
  },
  {
    "text": "because many times i ask a question i",
    "start": "25599",
    "end": "28080"
  },
  {
    "text": "thought the answer is",
    "start": "28080",
    "end": "29679"
  },
  {
    "text": "one thing right so that's what i think",
    "start": "29679",
    "end": "32320"
  },
  {
    "text": "the appropriate answer but it turns out",
    "start": "32320",
    "end": "34000"
  },
  {
    "text": "to be different because one of you will",
    "start": "34000",
    "end": "36880"
  },
  {
    "text": "call me out and say hey hussein you you",
    "start": "36880",
    "end": "39600"
  },
  {
    "text": "forgot one tiny thing that kind of",
    "start": "39600",
    "end": "42000"
  },
  {
    "text": "renders your whole question moot right",
    "start": "42000",
    "end": "44640"
  },
  {
    "text": "so i love absolutely love this question",
    "start": "44640",
    "end": "46879"
  },
  {
    "text": "because not only we learn together but",
    "start": "46879",
    "end": "48960"
  },
  {
    "text": "we",
    "start": "48960",
    "end": "49840"
  },
  {
    "text": "i personally learn more uh stuff here as",
    "start": "49840",
    "end": "53520"
  },
  {
    "text": "we explore these kind of things today's",
    "start": "53520",
    "end": "56480"
  },
  {
    "text": "question is a database question so get",
    "start": "56480",
    "end": "58480"
  },
  {
    "text": "your dbs ready table t with three",
    "start": "58480",
    "end": "62559"
  },
  {
    "start": "60000",
    "end": "200000"
  },
  {
    "text": "integer fields a b and c we have one",
    "start": "62559",
    "end": "65518"
  },
  {
    "text": "table with three fields a b and c so",
    "start": "65519",
    "end": "68159"
  },
  {
    "text": "they're all integers for simplicity here",
    "start": "68159",
    "end": "70720"
  },
  {
    "text": "a has a primary key",
    "start": "70720",
    "end": "72880"
  },
  {
    "text": "clustered index focus on the word",
    "start": "72880",
    "end": "75040"
  },
  {
    "text": "clustered and primary key right although",
    "start": "75040",
    "end": "77600"
  },
  {
    "text": "this is kind of a redundant statement",
    "start": "77600",
    "end": "80000"
  },
  {
    "text": "you know because most primary keys are",
    "start": "80000",
    "end": "82159"
  },
  {
    "text": "clustered not all databases follow this",
    "start": "82159",
    "end": "85280"
  },
  {
    "text": "postgres is a good example there are no",
    "start": "85280",
    "end": "87439"
  },
  {
    "text": "primary keys in postgres everything is a",
    "start": "87439",
    "end": "90240"
  },
  {
    "text": "secondary key right",
    "start": "90240",
    "end": "92880"
  },
  {
    "text": "while you can literally type a primary",
    "start": "92880",
    "end": "94960"
  },
  {
    "text": "key you know but it's treated as a",
    "start": "94960",
    "end": "96799"
  },
  {
    "text": "secondary key so the the keys the values",
    "start": "96799",
    "end": "99759"
  },
  {
    "text": "point to the row directly right and the",
    "start": "99759",
    "end": "102640"
  },
  {
    "text": "secondary indexes also point to the row",
    "start": "102640",
    "end": "104799"
  },
  {
    "text": "directly",
    "start": "104799",
    "end": "105920"
  },
  {
    "text": "but this is very critical to understand",
    "start": "105920",
    "end": "107520"
  },
  {
    "text": "because that kind of depends",
    "start": "107520",
    "end": "110240"
  },
  {
    "text": "which is the most appropriate answer it",
    "start": "110240",
    "end": "112159"
  },
  {
    "text": "really depends on the database",
    "start": "112159",
    "end": "115200"
  },
  {
    "text": "b",
    "start": "115200",
    "end": "116079"
  },
  {
    "text": "has a secondary index",
    "start": "116079",
    "end": "118159"
  },
  {
    "text": "right so usually secondary indexes point",
    "start": "118159",
    "end": "120719"
  },
  {
    "text": "to the primary key or",
    "start": "120719",
    "end": "122960"
  },
  {
    "text": "point to the table and and the answer",
    "start": "122960",
    "end": "125520"
  },
  {
    "text": "differs right",
    "start": "125520",
    "end": "127119"
  },
  {
    "text": "so the question is which query is more",
    "start": "127119",
    "end": "129280"
  },
  {
    "text": "likely and i try to ask as much as well",
    "start": "129280",
    "end": "132080"
  },
  {
    "text": "more likely to be the most efficient",
    "start": "132080",
    "end": "134319"
  },
  {
    "text": "here so based on",
    "start": "134319",
    "end": "136560"
  },
  {
    "text": "kind of understanding what is what is",
    "start": "136560",
    "end": "138879"
  },
  {
    "text": "going on behind the scenes and that's",
    "start": "138879",
    "end": "141040"
  },
  {
    "text": "our goal here to understand the queries",
    "start": "141040",
    "end": "143599"
  },
  {
    "text": "we send so understand the code we're",
    "start": "143599",
    "end": "145200"
  },
  {
    "text": "writing right",
    "start": "145200",
    "end": "146560"
  },
  {
    "text": "as much as possible sometimes we fail",
    "start": "146560",
    "end": "149200"
  },
  {
    "text": "right so all indexes are b plus threes",
    "start": "149200",
    "end": "152000"
  },
  {
    "text": "try to be as as specific as possible",
    "start": "152000",
    "end": "154720"
  },
  {
    "text": "right and here's the first choice select",
    "start": "154720",
    "end": "158319"
  },
  {
    "text": "start from t where a is between 50 and",
    "start": "158319",
    "end": "162400"
  },
  {
    "text": "50 000. so we're querying on the a field",
    "start": "162400",
    "end": "166560"
  },
  {
    "text": "which has an index which has the primary",
    "start": "166560",
    "end": "168160"
  },
  {
    "text": "key index and cluster next to be",
    "start": "168160",
    "end": "170160"
  },
  {
    "text": "specific select start from the second",
    "start": "170160",
    "end": "171680"
  },
  {
    "text": "one the second choice select start from",
    "start": "171680",
    "end": "173440"
  },
  {
    "text": "t where b is between 50 and 50 000.",
    "start": "173440",
    "end": "177599"
  },
  {
    "text": "so now we're clearing on the b which",
    "start": "177599",
    "end": "179840"
  },
  {
    "text": "also has an index and and the final one",
    "start": "179840",
    "end": "182720"
  },
  {
    "text": "select start from t where's",
    "start": "182720",
    "end": "184959"
  },
  {
    "text": "c is between 50 and 50 000. and i",
    "start": "184959",
    "end": "187599"
  },
  {
    "text": "specifically put that large values",
    "start": "187599",
    "end": "189360"
  },
  {
    "text": "because i wanted to pull a large amount",
    "start": "189360",
    "end": "192239"
  },
  {
    "text": "of data as much as possible to see the",
    "start": "192239",
    "end": "194959"
  },
  {
    "text": "to feel the difference in the query so",
    "start": "194959",
    "end": "197440"
  },
  {
    "text": "how about we start with the kind of",
    "start": "197440",
    "end": "198879"
  },
  {
    "text": "easiest one that we can eliminate",
    "start": "198879",
    "end": "201200"
  },
  {
    "start": "200000",
    "end": "330000"
  },
  {
    "text": "so let's start from t where c is between",
    "start": "201200",
    "end": "203519"
  },
  {
    "text": "50 and 50 000.",
    "start": "203519",
    "end": "206159"
  },
  {
    "text": "most of the time well querying on a",
    "start": "206159",
    "end": "208720"
  },
  {
    "text": "field that doesn't have an index",
    "start": "208720",
    "end": "211120"
  },
  {
    "text": "will say hey",
    "start": "211120",
    "end": "214159"
  },
  {
    "text": "doesn't have an index so i have to do a",
    "start": "214239",
    "end": "215599"
  },
  {
    "text": "table scan right i should have mentioned",
    "start": "215599",
    "end": "217760"
  },
  {
    "text": "here",
    "start": "217760",
    "end": "219599"
  },
  {
    "text": "you might say",
    "start": "219599",
    "end": "221280"
  },
  {
    "text": "the answer could be c",
    "start": "221280",
    "end": "223519"
  },
  {
    "text": "why",
    "start": "223519",
    "end": "224879"
  },
  {
    "text": "because hey the table is",
    "start": "224879",
    "end": "228080"
  },
  {
    "text": "almost empty you can you can you can say",
    "start": "228080",
    "end": "230720"
  },
  {
    "text": "this and the answer would be c",
    "start": "230720",
    "end": "233200"
  },
  {
    "text": "right because the table is empty so",
    "start": "233200",
    "end": "235920"
  },
  {
    "text": "it's faster to scan the heap directly if",
    "start": "235920",
    "end": "240000"
  },
  {
    "text": "it's almost empty if there's like three",
    "start": "240000",
    "end": "241840"
  },
  {
    "text": "rows hey just go pull the only page in",
    "start": "241840",
    "end": "244959"
  },
  {
    "text": "the heap and read it",
    "start": "244959",
    "end": "246959"
  },
  {
    "text": "so the answer could be c in this case",
    "start": "246959",
    "end": "249439"
  },
  {
    "text": "right but obviously if the if the table",
    "start": "249439",
    "end": "251760"
  },
  {
    "text": "is large",
    "start": "251760",
    "end": "253120"
  },
  {
    "text": "millions of rows",
    "start": "253120",
    "end": "254480"
  },
  {
    "text": "the answer is not c because",
    "start": "254480",
    "end": "257120"
  },
  {
    "text": "scanning the whole table you need an",
    "start": "257120",
    "end": "258959"
  },
  {
    "text": "index",
    "start": "258959",
    "end": "260400"
  },
  {
    "text": "if the if the table is almost empty",
    "start": "260400",
    "end": "262880"
  },
  {
    "text": "the planner itself will scan the table",
    "start": "262880",
    "end": "265120"
  },
  {
    "text": "directly so it's not worth it going to",
    "start": "265120",
    "end": "266960"
  },
  {
    "text": "the index because it's more expensive to",
    "start": "266960",
    "end": "269360"
  },
  {
    "text": "crack open the data structure that is",
    "start": "269360",
    "end": "271520"
  },
  {
    "text": "the index pull the pages",
    "start": "271520",
    "end": "274000"
  },
  {
    "text": "all of the index try to scan things only",
    "start": "274000",
    "end": "277680"
  },
  {
    "text": "to find out that there isn't anything",
    "start": "277680",
    "end": "280160"
  },
  {
    "text": "right",
    "start": "280160",
    "end": "281280"
  },
  {
    "text": "and then take the hit to scan the index",
    "start": "281280",
    "end": "284240"
  },
  {
    "text": "only to find out there is nothing and uh",
    "start": "284240",
    "end": "286720"
  },
  {
    "text": "you just waste this time so it's",
    "start": "286720",
    "end": "287840"
  },
  {
    "text": "actually slower to scan the index",
    "start": "287840",
    "end": "290400"
  },
  {
    "text": "there's an overhead if the table is",
    "start": "290400",
    "end": "292240"
  },
  {
    "text": "empty right and that's why database",
    "start": "292240",
    "end": "294240"
  },
  {
    "text": "statistics really matter you really need",
    "start": "294240",
    "end": "296800"
  },
  {
    "text": "to know why am i not centered you really",
    "start": "296800",
    "end": "299040"
  },
  {
    "text": "need to know how how large and how",
    "start": "299040",
    "end": "301360"
  },
  {
    "text": "what's the statistics possibility of the",
    "start": "301360",
    "end": "303759"
  },
  {
    "text": "value that i'm scanning",
    "start": "303759",
    "end": "305440"
  },
  {
    "text": "so if your stats are out of date",
    "start": "305440",
    "end": "308160"
  },
  {
    "text": "right",
    "start": "308160",
    "end": "309120"
  },
  {
    "text": "the planner is is screwed because like",
    "start": "309120",
    "end": "311759"
  },
  {
    "text": "you cannot make proper decisions you",
    "start": "311759",
    "end": "314400"
  },
  {
    "text": "need to update your statistics there are",
    "start": "314400",
    "end": "316240"
  },
  {
    "text": "command for every database i believe to",
    "start": "316240",
    "end": "318160"
  },
  {
    "text": "update statistics",
    "start": "318160",
    "end": "321120"
  },
  {
    "text": "i'm assuming that i only know the",
    "start": "322720",
    "end": "324560"
  },
  {
    "text": "command in oracle and sql server i'm not",
    "start": "324560",
    "end": "327039"
  },
  {
    "text": "sure posgus has that command to",
    "start": "327039",
    "end": "328800"
  },
  {
    "text": "physically update the statistics i",
    "start": "328800",
    "end": "331199"
  },
  {
    "start": "330000",
    "end": "800000"
  },
  {
    "text": "believe it does it automatically which",
    "start": "331199",
    "end": "333360"
  },
  {
    "text": "is expensive obviously to update the",
    "start": "333360",
    "end": "334720"
  },
  {
    "text": "statistics right",
    "start": "334720",
    "end": "336639"
  },
  {
    "text": "all right let's pick the second one so",
    "start": "336639",
    "end": "338320"
  },
  {
    "text": "we talked about c where the third answer",
    "start": "338320",
    "end": "340240"
  },
  {
    "text": "could be true",
    "start": "340240",
    "end": "341840"
  },
  {
    "text": "right could be the most efficient",
    "start": "341840",
    "end": "344479"
  },
  {
    "text": "if the table is empty but if the table",
    "start": "344479",
    "end": "346080"
  },
  {
    "text": "is not empty is really large then c is",
    "start": "346080",
    "end": "349120"
  },
  {
    "text": "not the answer three three is on the",
    "start": "349120",
    "end": "350800"
  },
  {
    "text": "answer querying on c which doesn't have",
    "start": "350800",
    "end": "352560"
  },
  {
    "text": "an index is not an answer in this case",
    "start": "352560",
    "end": "355199"
  },
  {
    "text": "b",
    "start": "355199",
    "end": "355919"
  },
  {
    "text": "so if i'm scanning",
    "start": "355919",
    "end": "358240"
  },
  {
    "text": "the b which is a secondary index",
    "start": "358240",
    "end": "362560"
  },
  {
    "text": "between values between 50 and 50 000.",
    "start": "362560",
    "end": "366720"
  },
  {
    "text": "right let's assume that the table is",
    "start": "366720",
    "end": "368479"
  },
  {
    "text": "large",
    "start": "368479",
    "end": "369440"
  },
  {
    "text": "i'm going to use the index",
    "start": "369440",
    "end": "371199"
  },
  {
    "text": "the secondary index",
    "start": "371199",
    "end": "373440"
  },
  {
    "text": "will let's assume first it's um it's a",
    "start": "373440",
    "end": "376800"
  },
  {
    "text": "primary key",
    "start": "376800",
    "end": "378400"
  },
  {
    "text": "based database such as mysql the",
    "start": "378400",
    "end": "381600"
  },
  {
    "text": "secondary index will point to what to",
    "start": "381600",
    "end": "383680"
  },
  {
    "text": "the primary keys right",
    "start": "383680",
    "end": "386400"
  },
  {
    "text": "so in this case",
    "start": "386400",
    "end": "387680"
  },
  {
    "text": "every entry that i find in the b",
    "start": "387680",
    "end": "391600"
  },
  {
    "text": "index between 50 and 50 000 that is a",
    "start": "391600",
    "end": "394400"
  },
  {
    "text": "candidate but guess what i don't i don't",
    "start": "394400",
    "end": "396960"
  },
  {
    "text": "want values in b",
    "start": "396960",
    "end": "398800"
  },
  {
    "text": "i want the entire thing i want a b and c",
    "start": "398800",
    "end": "403520"
  },
  {
    "text": "i want",
    "start": "403520",
    "end": "404880"
  },
  {
    "text": "the three columns",
    "start": "404880",
    "end": "406479"
  },
  {
    "text": "b does not have the three columns it",
    "start": "406479",
    "end": "408240"
  },
  {
    "text": "only have the b obviously that's what",
    "start": "408240",
    "end": "409759"
  },
  {
    "text": "i'm scanning right",
    "start": "409759",
    "end": "412000"
  },
  {
    "text": "and so i need a and c",
    "start": "412000",
    "end": "414720"
  },
  {
    "text": "so",
    "start": "414720",
    "end": "415919"
  },
  {
    "text": "if this is a my sequel we're gonna break",
    "start": "415919",
    "end": "418240"
  },
  {
    "text": "this into two points if this is a mysql",
    "start": "418240",
    "end": "421039"
  },
  {
    "text": "sql server i believe in oracle as well",
    "start": "421039",
    "end": "424319"
  },
  {
    "text": "oracle i'm not sure about that",
    "start": "424319",
    "end": "426479"
  },
  {
    "text": "but if it's a mysql definitely",
    "start": "426479",
    "end": "428800"
  },
  {
    "text": "then the secondary keys point to the",
    "start": "428800",
    "end": "431919"
  },
  {
    "text": "primary key so at the end of this scan",
    "start": "431919",
    "end": "436400"
  },
  {
    "text": "and this is the b plus three so you're",
    "start": "436400",
    "end": "437680"
  },
  {
    "text": "gonna get a nicely tucked in values",
    "start": "437680",
    "end": "439840"
  },
  {
    "text": "together the range scans are beautiful",
    "start": "439840",
    "end": "441680"
  },
  {
    "text": "for b plus trees we talked about this in",
    "start": "441680",
    "end": "443759"
  },
  {
    "text": "my database course right so immediately",
    "start": "443759",
    "end": "446160"
  },
  {
    "text": "you're gonna find 50 to 50 000 very",
    "start": "446160",
    "end": "448080"
  },
  {
    "text": "quick",
    "start": "448080",
    "end": "449120"
  },
  {
    "text": "i wish that's that's the end if that was",
    "start": "449120",
    "end": "451199"
  },
  {
    "text": "the end if you're doing a count maybe",
    "start": "451199",
    "end": "453440"
  },
  {
    "text": "you're going to get away with it that",
    "start": "453440",
    "end": "454560"
  },
  {
    "text": "would be fast",
    "start": "454560",
    "end": "455680"
  },
  {
    "text": "right but if if you're that if that's it",
    "start": "455680",
    "end": "458639"
  },
  {
    "text": "but no you have to",
    "start": "458639",
    "end": "460400"
  },
  {
    "text": "pull back the values and take the list",
    "start": "460400",
    "end": "463280"
  },
  {
    "text": "of keys which are what now they are list",
    "start": "463280",
    "end": "465840"
  },
  {
    "text": "of primary keys take that which are",
    "start": "465840",
    "end": "470000"
  },
  {
    "text": "completely random",
    "start": "470000",
    "end": "472240"
  },
  {
    "text": "right",
    "start": "472240",
    "end": "473120"
  },
  {
    "text": "fifth the value of b50",
    "start": "473120",
    "end": "475759"
  },
  {
    "text": "could be the last row in the table right",
    "start": "475759",
    "end": "479680"
  },
  {
    "text": "and it could be a one in the middle it",
    "start": "479680",
    "end": "481759"
  },
  {
    "text": "could be one in the beginning so it's",
    "start": "481759",
    "end": "483919"
  },
  {
    "text": "gonna be all over",
    "start": "483919",
    "end": "486000"
  },
  {
    "text": "the place",
    "start": "486000",
    "end": "488000"
  },
  {
    "text": "so now you have to take these values",
    "start": "488000",
    "end": "490400"
  },
  {
    "text": "probably the database was going to sort",
    "start": "490400",
    "end": "491919"
  },
  {
    "text": "them",
    "start": "491919",
    "end": "492720"
  },
  {
    "text": "and then scan",
    "start": "492720",
    "end": "494960"
  },
  {
    "text": "the",
    "start": "494960",
    "end": "495919"
  },
  {
    "text": "a primary key index and that's going to",
    "start": "495919",
    "end": "498720"
  },
  {
    "text": "be expensive",
    "start": "498720",
    "end": "500400"
  },
  {
    "text": "because of the randomness right so we're",
    "start": "500400",
    "end": "502400"
  },
  {
    "text": "going to see some gaps they're going to",
    "start": "502400",
    "end": "504000"
  },
  {
    "text": "be the database was going to do some",
    "start": "504000",
    "end": "505440"
  },
  {
    "text": "sorting and then eventually it's going",
    "start": "505440",
    "end": "506800"
  },
  {
    "text": "to scan the primary key index",
    "start": "506800",
    "end": "510000"
  },
  {
    "text": "and find the values and once it finds",
    "start": "510000",
    "end": "512800"
  },
  {
    "text": "the values because it's a clustered",
    "start": "512800",
    "end": "514399"
  },
  {
    "text": "index",
    "start": "514399",
    "end": "516719"
  },
  {
    "text": "the row is in the index itself so we're",
    "start": "516719",
    "end": "519440"
  },
  {
    "text": "going to find c",
    "start": "519440",
    "end": "522399"
  },
  {
    "text": "free of charge if you will all right",
    "start": "522399",
    "end": "524560"
  },
  {
    "text": "there is no additional jump to the heap",
    "start": "524560",
    "end": "526320"
  },
  {
    "text": "because the primary key if you will is",
    "start": "526320",
    "end": "529040"
  },
  {
    "text": "the heap in this case right",
    "start": "529040",
    "end": "531600"
  },
  {
    "text": "it it sits on top of the heap points to",
    "start": "531600",
    "end": "534000"
  },
  {
    "text": "the pages of the heap where the values",
    "start": "534000",
    "end": "536399"
  },
  {
    "text": "are so they are clustered together",
    "start": "536399",
    "end": "539360"
  },
  {
    "text": "a cluster linux if you don't know guys",
    "start": "539360",
    "end": "541519"
  },
  {
    "text": "it's a it's",
    "start": "541519",
    "end": "543279"
  },
  {
    "text": "it's built",
    "start": "543279",
    "end": "545200"
  },
  {
    "text": "around",
    "start": "545200",
    "end": "547440"
  },
  {
    "text": "uh the values are built around that",
    "start": "547440",
    "end": "550560"
  },
  {
    "text": "index so if you insert the value",
    "start": "550560",
    "end": "553200"
  },
  {
    "text": "and a is one",
    "start": "553200",
    "end": "554640"
  },
  {
    "text": "and then another value two three or four",
    "start": "554640",
    "end": "557440"
  },
  {
    "text": "the database will put them",
    "start": "557440",
    "end": "559360"
  },
  {
    "text": "nicely into the same page so now if you",
    "start": "559360",
    "end": "561680"
  },
  {
    "text": "insert a value of a thousand that's",
    "start": "561680",
    "end": "564000"
  },
  {
    "text": "going to go into another page a thousand",
    "start": "564000",
    "end": "565839"
  },
  {
    "text": "one",
    "start": "565839",
    "end": "566720"
  },
  {
    "text": "next to it if you insert a value of ten",
    "start": "566720",
    "end": "568800"
  },
  {
    "text": "goes back to the same page it's not",
    "start": "568800",
    "end": "572880"
  },
  {
    "text": "versus unclustered index or table",
    "start": "572880",
    "end": "576720"
  },
  {
    "text": "that will be basically how you send a",
    "start": "576720",
    "end": "579200"
  },
  {
    "text": "one and then a thousand and then a two",
    "start": "579200",
    "end": "580800"
  },
  {
    "text": "thousand and then f3 that's going to be",
    "start": "580800",
    "end": "582959"
  },
  {
    "text": "the same order you insert almost depends",
    "start": "582959",
    "end": "585600"
  },
  {
    "text": "on the transactions one which one",
    "start": "585600",
    "end": "587360"
  },
  {
    "text": "committed first and you cannot guarantee",
    "start": "587360",
    "end": "589360"
  },
  {
    "text": "the order of the transaction obviously",
    "start": "589360",
    "end": "591680"
  },
  {
    "text": "at that lower level when it goes when it",
    "start": "591680",
    "end": "594000"
  },
  {
    "text": "comes to the actual insertion of the",
    "start": "594000",
    "end": "596000"
  },
  {
    "text": "table so they're gonna they're gonna be",
    "start": "596000",
    "end": "597760"
  },
  {
    "text": "random that's unclustered right",
    "start": "597760",
    "end": "600480"
  },
  {
    "text": "and that's basically it uh cluster index",
    "start": "600480",
    "end": "602880"
  },
  {
    "text": "forces the row to go into the exact page",
    "start": "602880",
    "end": "607040"
  },
  {
    "text": "to be clustered together the values",
    "start": "607040",
    "end": "609839"
  },
  {
    "text": "could be clustered and that you can",
    "start": "609839",
    "end": "612000"
  },
  {
    "text": "argue that it's actually",
    "start": "612000",
    "end": "613680"
  },
  {
    "text": "slow in this case that is slower because",
    "start": "613680",
    "end": "616720"
  },
  {
    "text": "now you need to find where to put",
    "start": "616720",
    "end": "619680"
  },
  {
    "text": "the row right",
    "start": "619680",
    "end": "621200"
  },
  {
    "text": "versus default and postgres you just",
    "start": "621200",
    "end": "623839"
  },
  {
    "text": "insert at the end it's just almost like",
    "start": "623839",
    "end": "625279"
  },
  {
    "text": "an append only right so now we talked",
    "start": "625279",
    "end": "627360"
  },
  {
    "text": "about this in the case of mysql i'm",
    "start": "627360",
    "end": "629680"
  },
  {
    "text": "gonna scan the b secondary index so",
    "start": "629680",
    "end": "632480"
  },
  {
    "text": "that's one index scan",
    "start": "632480",
    "end": "634399"
  },
  {
    "text": "you can argue it's fast because you're",
    "start": "634399",
    "end": "636320"
  },
  {
    "text": "searching for values that are",
    "start": "636320",
    "end": "637839"
  },
  {
    "text": "consecutive to each other fifty to fifty",
    "start": "637839",
    "end": "639680"
  },
  {
    "text": "thousand and then you gotta get a bunch",
    "start": "639680",
    "end": "641519"
  },
  {
    "text": "of random",
    "start": "641519",
    "end": "643519"
  },
  {
    "text": "a values this is the primary keys right",
    "start": "643519",
    "end": "646640"
  },
  {
    "text": "that's in case of a mysql now you turn a",
    "start": "646640",
    "end": "648880"
  },
  {
    "text": "turn around and do another scan",
    "start": "648880",
    "end": "651760"
  },
  {
    "text": "in the primary index so that's two index",
    "start": "651760",
    "end": "655760"
  },
  {
    "text": "scans",
    "start": "655760",
    "end": "657120"
  },
  {
    "text": "right and the second one will be slower",
    "start": "657120",
    "end": "659200"
  },
  {
    "text": "than the first one because of the random",
    "start": "659200",
    "end": "661200"
  },
  {
    "text": "nature obviously so you're going to do",
    "start": "661200",
    "end": "663600"
  },
  {
    "text": "to do you're going to be jumping all",
    "start": "663600",
    "end": "664720"
  },
  {
    "text": "over the place",
    "start": "664720",
    "end": "666160"
  },
  {
    "text": "you might the davis might do multiple",
    "start": "666160",
    "end": "668560"
  },
  {
    "text": "scans right because it would be ranges",
    "start": "668560",
    "end": "671200"
  },
  {
    "text": "different ranges",
    "start": "671200",
    "end": "673040"
  },
  {
    "text": "and as a result",
    "start": "673040",
    "end": "675200"
  },
  {
    "text": "so that's that's not optimal i think",
    "start": "675200",
    "end": "677279"
  },
  {
    "text": "right",
    "start": "677279",
    "end": "678880"
  },
  {
    "text": "um so let's take the case there's still",
    "start": "678880",
    "end": "681279"
  },
  {
    "text": "on the second answer here let's take the",
    "start": "681279",
    "end": "682959"
  },
  {
    "text": "case where we're in the",
    "start": "682959",
    "end": "684959"
  },
  {
    "text": "a postgres database",
    "start": "684959",
    "end": "687040"
  },
  {
    "text": "postgres was scanning the b index",
    "start": "687040",
    "end": "689519"
  },
  {
    "text": "it's a truly secondary index so it",
    "start": "689519",
    "end": "691120"
  },
  {
    "text": "points directly to the table so now i'm",
    "start": "691120",
    "end": "693600"
  },
  {
    "text": "scanning 50 to 50 000 again that's blast",
    "start": "693600",
    "end": "696480"
  },
  {
    "text": "fast",
    "start": "696480",
    "end": "697760"
  },
  {
    "text": "blast fast that rhymed",
    "start": "697760",
    "end": "699839"
  },
  {
    "text": "so now we're searching everything",
    "start": "699839",
    "end": "702000"
  },
  {
    "text": "between 50 and 50 000. what do we get we",
    "start": "702000",
    "end": "704480"
  },
  {
    "text": "get a bunch",
    "start": "704480",
    "end": "705839"
  },
  {
    "text": "of row ids or tuple ids they call them",
    "start": "705839",
    "end": "708320"
  },
  {
    "text": "postgres",
    "start": "708320",
    "end": "709760"
  },
  {
    "text": "and now",
    "start": "709760",
    "end": "711600"
  },
  {
    "text": "we have",
    "start": "711600",
    "end": "713040"
  },
  {
    "text": "all the rows that we can get and the",
    "start": "713040",
    "end": "715600"
  },
  {
    "text": "database can choose here to do",
    "start": "715600",
    "end": "717920"
  },
  {
    "text": "an index scan or a bitmap index scan i",
    "start": "717920",
    "end": "721760"
  },
  {
    "text": "would choose because of the large net",
    "start": "721760",
    "end": "724800"
  },
  {
    "text": "larger result i would choose a bitmap",
    "start": "724800",
    "end": "726560"
  },
  {
    "text": "index again i think it's more optimal",
    "start": "726560",
    "end": "728720"
  },
  {
    "text": "here",
    "start": "728720",
    "end": "729600"
  },
  {
    "text": "and it will get basically all the pages",
    "start": "729600",
    "end": "732800"
  },
  {
    "text": "in case of a bitmap index scans you will",
    "start": "732800",
    "end": "735200"
  },
  {
    "text": "mark all the pages that needs to feature",
    "start": "735200",
    "end": "737440"
  },
  {
    "text": "so okay i need to pitch one two three",
    "start": "737440",
    "end": "740160"
  },
  {
    "text": "and seven row i want to pull row one",
    "start": "740160",
    "end": "743200"
  },
  {
    "text": "seventy three hundred",
    "start": "743200",
    "end": "745279"
  },
  {
    "text": "five thousand and seven",
    "start": "745279",
    "end": "746880"
  },
  {
    "text": "and all these",
    "start": "746880",
    "end": "748160"
  },
  {
    "text": "we're gonna collect the pages which is",
    "start": "748160",
    "end": "750399"
  },
  {
    "text": "also stored in the index",
    "start": "750399",
    "end": "752880"
  },
  {
    "text": "and so it's it translates to page seven",
    "start": "752880",
    "end": "755760"
  },
  {
    "text": "eight uh 2002 301",
    "start": "755760",
    "end": "759519"
  },
  {
    "text": "and go and switch all these pages boom",
    "start": "759519",
    "end": "762639"
  },
  {
    "text": "so you fetch all these pages again they",
    "start": "762639",
    "end": "764240"
  },
  {
    "text": "will be all over the place because it's",
    "start": "764240",
    "end": "766480"
  },
  {
    "text": "not clustered right",
    "start": "766480",
    "end": "768240"
  },
  {
    "text": "in this case",
    "start": "768240",
    "end": "770320"
  },
  {
    "text": "it's not clustered on b yeah a is a",
    "start": "770320",
    "end": "772320"
  },
  {
    "text": "cluster but",
    "start": "772320",
    "end": "773600"
  },
  {
    "text": "b is not right",
    "start": "773600",
    "end": "775200"
  },
  {
    "text": "so the table's not clustered only so",
    "start": "775200",
    "end": "777279"
  },
  {
    "text": "it's going to be all over the place",
    "start": "777279",
    "end": "778560"
  },
  {
    "text": "again and we're going to fetch the",
    "start": "778560",
    "end": "780160"
  },
  {
    "text": "results and if in case of a bitmap index",
    "start": "780160",
    "end": "782240"
  },
  {
    "text": "again we're going to refilter them and",
    "start": "782240",
    "end": "784959"
  },
  {
    "text": "get the results so",
    "start": "784959",
    "end": "787200"
  },
  {
    "text": "i would think",
    "start": "787200",
    "end": "788959"
  },
  {
    "text": "maybe postgres will be faster with a",
    "start": "788959",
    "end": "791680"
  },
  {
    "text": "bitmap index scan i might be wrong",
    "start": "791680",
    "end": "794639"
  },
  {
    "text": "but still",
    "start": "794639",
    "end": "796000"
  },
  {
    "text": "that's not the most efficient query",
    "start": "796000",
    "end": "798000"
  },
  {
    "text": "regardless of the database right so",
    "start": "798000",
    "end": "800399"
  },
  {
    "start": "800000",
    "end": "1022000"
  },
  {
    "text": "let's go to the last one which is select",
    "start": "800399",
    "end": "802320"
  },
  {
    "text": "star from t where a is between 50 and 50",
    "start": "802320",
    "end": "805360"
  },
  {
    "text": "000. oh that's the most beautiful thing",
    "start": "805360",
    "end": "808399"
  },
  {
    "text": "because guess what a is the primary key",
    "start": "808399",
    "end": "810800"
  },
  {
    "text": "a is clustered and guess what",
    "start": "810800",
    "end": "813200"
  },
  {
    "text": "we're searching",
    "start": "813200",
    "end": "814639"
  },
  {
    "text": "in a very range so 50 to 50 000. so that",
    "start": "814639",
    "end": "818079"
  },
  {
    "text": "is just a single scan to the primary key",
    "start": "818079",
    "end": "820800"
  },
  {
    "text": "index right",
    "start": "820800",
    "end": "822560"
  },
  {
    "text": "in case of mysql you're scanning that",
    "start": "822560",
    "end": "825519"
  },
  {
    "text": "and",
    "start": "825519",
    "end": "827519"
  },
  {
    "text": "you found the 50 and just when you found",
    "start": "827519",
    "end": "829199"
  },
  {
    "text": "the 50 you're going to find everything",
    "start": "829199",
    "end": "830880"
  },
  {
    "text": "because you go to the leaf and because",
    "start": "830880",
    "end": "832880"
  },
  {
    "text": "it's a b plus 3 you're going to find the",
    "start": "832880",
    "end": "834240"
  },
  {
    "text": "next place in the next place and guess",
    "start": "834240",
    "end": "835760"
  },
  {
    "text": "what you go to the next page you found",
    "start": "835760",
    "end": "837760"
  },
  {
    "text": "everything",
    "start": "837760",
    "end": "838800"
  },
  {
    "text": "now you're going to the heap itself",
    "start": "838800",
    "end": "840800"
  },
  {
    "text": "because the primary key is",
    "start": "840800",
    "end": "843360"
  },
  {
    "text": "pointing to the heap pages eventually",
    "start": "843360",
    "end": "845839"
  },
  {
    "text": "right so you're going to jump",
    "start": "845839",
    "end": "848560"
  },
  {
    "text": "and every page you jump to next is",
    "start": "848560",
    "end": "851279"
  },
  {
    "text": "values you want because if you start",
    "start": "851279",
    "end": "853279"
  },
  {
    "text": "with page 50 you're going to find 50 50",
    "start": "853279",
    "end": "855680"
  },
  {
    "text": "50 50 and you're getting 551 52 53 50",
    "start": "855680",
    "end": "858880"
  },
  {
    "text": "there'll be duplicates no there are no",
    "start": "858880",
    "end": "860639"
  },
  {
    "text": "replicas this is the primary key what do",
    "start": "860639",
    "end": "862160"
  },
  {
    "text": "you what am i talking about so be 50 51",
    "start": "862160",
    "end": "864720"
  },
  {
    "text": "52 53 and it is",
    "start": "864720",
    "end": "867760"
  },
  {
    "text": "70 right and then the next page 73 73 or",
    "start": "867760",
    "end": "870639"
  },
  {
    "text": "74.",
    "start": "870639",
    "end": "871920"
  },
  {
    "text": "so every page you jump and it's very",
    "start": "871920",
    "end": "874560"
  },
  {
    "text": "fast",
    "start": "874560",
    "end": "875680"
  },
  {
    "text": "up until you reach 49",
    "start": "875680",
    "end": "878240"
  },
  {
    "text": "000",
    "start": "878240",
    "end": "879120"
  },
  {
    "text": "and counting and that's a single",
    "start": "879120",
    "end": "882639"
  },
  {
    "text": "quick scan",
    "start": "882639",
    "end": "884959"
  },
  {
    "text": "and guess what",
    "start": "884959",
    "end": "886560"
  },
  {
    "text": "because it's a primary key",
    "start": "886560",
    "end": "888399"
  },
  {
    "text": "the c and the b is in there because i'm",
    "start": "888399",
    "end": "891120"
  },
  {
    "text": "doing select star",
    "start": "891120",
    "end": "893279"
  },
  {
    "text": "that has to be the fastest thing because",
    "start": "893279",
    "end": "895600"
  },
  {
    "text": "i'm doing a single scan it's a very",
    "start": "895600",
    "end": "897199"
  },
  {
    "text": "efficient it's a range scan",
    "start": "897199",
    "end": "899279"
  },
  {
    "text": "b plus three",
    "start": "899279",
    "end": "901600"
  },
  {
    "text": "love",
    "start": "901600",
    "end": "902560"
  },
  {
    "text": "absolutely love range scans",
    "start": "902560",
    "end": "905040"
  },
  {
    "text": "right",
    "start": "905040",
    "end": "905920"
  },
  {
    "text": "as long as a b plus not b just b3 right",
    "start": "905920",
    "end": "908480"
  },
  {
    "text": "and that that that that's awesome right",
    "start": "908480",
    "end": "911600"
  },
  {
    "text": "so that's that's gotta be it",
    "start": "911600",
    "end": "913760"
  },
  {
    "text": "as at least i think right thinking",
    "start": "913760",
    "end": "916079"
  },
  {
    "text": "logically you can test this all stuff",
    "start": "916079",
    "end": "917839"
  },
  {
    "text": "you can create a table and test it right",
    "start": "917839",
    "end": "919360"
  },
  {
    "text": "now",
    "start": "919360",
    "end": "920320"
  },
  {
    "text": "uh and by in postgres",
    "start": "920320",
    "end": "923920"
  },
  {
    "text": "uh",
    "start": "924079",
    "end": "925120"
  },
  {
    "text": "assuming um",
    "start": "925120",
    "end": "928320"
  },
  {
    "text": "in postgres there is a clear",
    "start": "928320",
    "end": "932240"
  },
  {
    "text": "distinction and i might be mistaken here",
    "start": "932240",
    "end": "935839"
  },
  {
    "text": "you can cluster postgres the problem",
    "start": "935839",
    "end": "938560"
  },
  {
    "text": "with postgres is",
    "start": "938560",
    "end": "940480"
  },
  {
    "text": "cluster and poscas have to be done",
    "start": "940480",
    "end": "943040"
  },
  {
    "text": "manually you have to call a cluster and",
    "start": "943040",
    "end": "946320"
  },
  {
    "text": "more the inserts are never clustered if",
    "start": "946320",
    "end": "949199"
  },
  {
    "text": "you cluster a table yeah it will be",
    "start": "949199",
    "end": "951199"
  },
  {
    "text": "ordered around the index you picked but",
    "start": "951199",
    "end": "953360"
  },
  {
    "text": "the moment you start inserting the right",
    "start": "953360",
    "end": "955120"
  },
  {
    "text": "is it random again",
    "start": "955120",
    "end": "956959"
  },
  {
    "text": "pulse stress as far as i remember as",
    "start": "956959",
    "end": "959759"
  },
  {
    "text": "last time i checked pulse gas 14",
    "start": "959759",
    "end": "962240"
  },
  {
    "text": "does not guarantee order in a in a table",
    "start": "962240",
    "end": "965440"
  },
  {
    "text": "that you happen to cluster it won't",
    "start": "965440",
    "end": "967279"
  },
  {
    "text": "won't order anything so",
    "start": "967279",
    "end": "968959"
  },
  {
    "text": "i don't care",
    "start": "968959",
    "end": "970240"
  },
  {
    "text": "i rather get fast right i don't care",
    "start": "970240",
    "end": "972720"
  },
  {
    "text": "about clustering it's up to you okay so",
    "start": "972720",
    "end": "975839"
  },
  {
    "text": "you can quickly get out of sync",
    "start": "975839",
    "end": "978320"
  },
  {
    "text": "unless you cluster",
    "start": "978320",
    "end": "979839"
  },
  {
    "text": "uh periodically which i believe also",
    "start": "979839",
    "end": "982480"
  },
  {
    "text": "obtained an exclusive lock clustering is",
    "start": "982480",
    "end": "985279"
  },
  {
    "text": "a big operation right to order the rows",
    "start": "985279",
    "end": "988959"
  },
  {
    "text": "into their own things and this question",
    "start": "988959",
    "end": "991440"
  },
  {
    "text": "went way beyond the time i allotted for",
    "start": "991440",
    "end": "994320"
  },
  {
    "text": "it so hope you enjoyed it guys uh that",
    "start": "994320",
    "end": "996560"
  },
  {
    "text": "was kind of uh i i like to tease upon",
    "start": "996560",
    "end": "999680"
  },
  {
    "text": "these things and let me know what i",
    "start": "999680",
    "end": "1001120"
  },
  {
    "text": "missed",
    "start": "1001120",
    "end": "1002240"
  },
  {
    "text": "and i absolutely love it",
    "start": "1002240",
    "end": "1004160"
  },
  {
    "text": "uh",
    "start": "1004160",
    "end": "1005600"
  },
  {
    "text": "you can throw in a lot of monkey",
    "start": "1005600",
    "end": "1007279"
  },
  {
    "text": "wrenches here what about a column store",
    "start": "1007279",
    "end": "1009360"
  },
  {
    "text": "versus column family versus raw store",
    "start": "1009360",
    "end": "1012079"
  },
  {
    "text": "what happened in this case situation",
    "start": "1012079",
    "end": "1014720"
  },
  {
    "text": "the video will go for hours we'll never",
    "start": "1014720",
    "end": "1017120"
  },
  {
    "text": "finish",
    "start": "1017120",
    "end": "1019440"
  },
  {
    "text": "see you on the next one thank you so",
    "start": "1019759",
    "end": "1021040"
  },
  {
    "text": "much",
    "start": "1021040",
    "end": "1023360"
  }
]