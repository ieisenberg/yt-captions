[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "few months ago shopify's engineering have posted this interesting blog and",
    "start": "0",
    "end": "6960"
  },
  {
    "text": "Brilliant in fact uh talking about top 10 tips",
    "start": "6960",
    "end": "12540"
  },
  {
    "text": "for building resilient payment system and uh I'll reference the blog for you",
    "start": "12540",
    "end": "19080"
  },
  {
    "text": "guys and the description and the show notes but and each of these 10 tips is",
    "start": "19080",
    "end": "26880"
  },
  {
    "text": "absolutely well crafted just for their use cases and in this particular uh",
    "start": "26880",
    "end": "33180"
  },
  {
    "text": "episode I'd like to focus on just one",
    "start": "33180",
    "end": "39059"
  },
  {
    "text": "of these tips because Frankly Speaking each one of these steps is its own content its own article oh and there's",
    "start": "39059",
    "end": "48660"
  },
  {
    "text": "not much details but boy you can extract so much if you understand the fundamentals so for this particular show",
    "start": "48660",
    "end": "55500"
  },
  {
    "text": "I'll focus on the database engineering aspects specifically tip number six",
    "start": "55500",
    "end": "62579"
  },
  {
    "text": "which is to use item portency ease right and how they",
    "start": "62579",
    "end": "72240"
  },
  {
    "text": "use a unique key that optimizes their inserts and select",
    "start": "72240",
    "end": "79020"
  },
  {
    "text": "and queries for identified in this case how about we jump into it all right so uh I talked about what I don't potency",
    "start": "79020",
    "end": "86700"
  },
  {
    "text": "is in another video basically in a nutshell I'd important request or an",
    "start": "86700",
    "end": "92939"
  },
  {
    "start": "90000",
    "end": "390000"
  },
  {
    "text": "important backend is when you send a request and this request is repeatable",
    "start": "92939",
    "end": "100799"
  },
  {
    "text": "such that it doesn't change the state on the back end right an example is a get request a get request by definition must",
    "start": "100799",
    "end": "107460"
  },
  {
    "text": "be I'd important because if I do a read on a specific endpoint if I send that",
    "start": "107460",
    "end": "115380"
  },
  {
    "text": "read twice it doesn't matter nothing changes on the back end nothing should change right uh post on the other hand",
    "start": "115380",
    "end": "122520"
  },
  {
    "text": "by definition is always not item potent right unless you make it to be if you",
    "start": "122520",
    "end": "128759"
  },
  {
    "text": "post if you insert a row repeating that insert is basically Lee will change the",
    "start": "128759",
    "end": "137220"
  },
  {
    "text": "state you don't want that it's not a desired Behavior okay so if your end point says okay slash post and that",
    "start": "137220",
    "end": "144840"
  },
  {
    "text": "creates a new entry for example let me fix my and of course Shopify being a payment system you want the ability to",
    "start": "144840",
    "end": "153840"
  },
  {
    "text": "retry a payment without actually causing a double spend you don't want to pay for",
    "start": "153840",
    "end": "160379"
  },
  {
    "text": "something twice that's never fine right and the opposite side for merchants you",
    "start": "160379",
    "end": "166200"
  },
  {
    "text": "don't want uh if that happens you don't want an accidental twice of a refund right so",
    "start": "166200",
    "end": "174000"
  },
  {
    "text": "that's why item point is here is a critical concept I'm going to reference the video for you guys if you're",
    "start": "174000",
    "end": "179160"
  },
  {
    "text": "interested to learn more about that item potency is a very critical concept to him you have to build it yourself you",
    "start": "179160",
    "end": "186060"
  },
  {
    "text": "have to configure your backend to be item ported doesn't it's not for free right that's why something called an",
    "start": "186060",
    "end": "192599"
  },
  {
    "text": "upsert is a thing right where you insert but if this exists",
    "start": "192599",
    "end": "198540"
  },
  {
    "text": "it becomes an update an upsert is an item important concept okay so let's go ahead and read this",
    "start": "198540",
    "end": "205620"
  },
  {
    "text": "blurb and the in this particular blurb they talk",
    "start": "205620",
    "end": "211200"
  },
  {
    "text": "about okay the importance of our I don't want to see blah blah blah we know right but here's the important",
    "start": "211200",
    "end": "217920"
  },
  {
    "text": "thing that I am going to spend the most of the show about just talking about that particle okay",
    "start": "217920",
    "end": "224819"
  },
  {
    "text": "because it fascinated me the Brilliance of",
    "start": "224819",
    "end": "231120"
  },
  {
    "text": "Shopify engineering when it comes to database level tuning and data modeling",
    "start": "231120",
    "end": "236640"
  },
  {
    "text": "which is very underrated all right let's let's go ahead and read this",
    "start": "236640",
    "end": "241860"
  },
  {
    "text": "an item potency key needs to be unique well that's that's important right",
    "start": "241860",
    "end": "247980"
  },
  {
    "text": "because in this particular case when they send a request they add a key to",
    "start": "247980",
    "end": "253739"
  },
  {
    "text": "uniquely identify payment requests that's how you identify a payment or a",
    "start": "253739",
    "end": "259199"
  },
  {
    "text": "request right if someone retried the same request with the same key that you know this is an actual retry that's",
    "start": "259199",
    "end": "266400"
  },
  {
    "text": "whether happening from the user or from a proxy or from reverse proxy from API",
    "start": "266400",
    "end": "272160"
  },
  {
    "text": "Gateway some any middle layer that does that it tried it doesn't matter we know that a retry has happened",
    "start": "272160",
    "end": "279240"
  },
  {
    "text": "right sometimes the user go back and then forward and then hit refresh and then you get this message oh do you want",
    "start": "279240",
    "end": "285479"
  },
  {
    "text": "to resend it again you say yes and that sends the same technical request ID",
    "start": "285479",
    "end": "290520"
  },
  {
    "text": "unless you went all the way and generated a brand new request ID and physically wanted to pay again that's a",
    "start": "290520",
    "end": "298560"
  },
  {
    "text": "different story but most of the uh the item potency key requests are sent",
    "start": "298560",
    "end": "305880"
  },
  {
    "text": "within within a few seconds right but what they do here is",
    "start": "305880",
    "end": "311639"
  },
  {
    "text": "another one Z key needs to be unique for the time we want the request to be",
    "start": "311639",
    "end": "317460"
  },
  {
    "text": "retryable and that's a very critical use case for them they don't want their cost",
    "start": "317460",
    "end": "322620"
  },
  {
    "text": "to be retryable infinitely right if you send a request in 2018",
    "start": "322620",
    "end": "328080"
  },
  {
    "text": "payment request in 2018 is not gonna live until 2022 that doesn't make any",
    "start": "328080",
    "end": "333360"
  },
  {
    "text": "sense it should live within they estimate a payment request to live within a 24 hour if you never made a",
    "start": "333360",
    "end": "340380"
  },
  {
    "text": "payment within a 24-hour it it was a failed for example on the back end for",
    "start": "340380",
    "end": "346080"
  },
  {
    "text": "any reason we can try to retry it within this amount but if after that it says",
    "start": "346080",
    "end": "352020"
  },
  {
    "text": "hey you know what all bets are off just do it again right we will email you to say hey we could not retry that so",
    "start": "352020",
    "end": "357660"
  },
  {
    "text": "typically 24 hours or less I think that's something you add as a as",
    "start": "357660",
    "end": "363539"
  },
  {
    "text": "a designer an architect we prefer using and here's the interesting part",
    "start": "363539",
    "end": "370320"
  },
  {
    "text": "we prefer using an N universally that sounds like a typo a universally",
    "start": "370320",
    "end": "376680"
  },
  {
    "text": "unique lexicographically sortable identifier or this thing that's called",
    "start": "376680",
    "end": "383400"
  },
  {
    "text": "UL IDs right so you this is you called ulid right for these item potency Keys",
    "start": "383400",
    "end": "390539"
  },
  {
    "start": "390000",
    "end": "590000"
  },
  {
    "text": "instead of a random version for uuid so if you don't know Universal unique",
    "start": "390539",
    "end": "396180"
  },
  {
    "text": "identifiers is or sometimes in Microsoft we call them gweds or globally unique",
    "start": "396180",
    "end": "401520"
  },
  {
    "text": "identifier is a certain number of bits forgot I think 128 bits probably",
    "start": "401520",
    "end": "407699"
  },
  {
    "text": "mistaken 128 bits and these one remembers are guaranteed to be unique if",
    "start": "407699",
    "end": "413520"
  },
  {
    "text": "you can generate them on the device and then you are 99 sure that's gonna be",
    "start": "413520",
    "end": "420120"
  },
  {
    "text": "unique which is powerful concept why do you want to use those",
    "start": "420120",
    "end": "425460"
  },
  {
    "text": "you want to use those because you want the client to generate a unique ID as opposed",
    "start": "425460",
    "end": "431639"
  },
  {
    "text": "of a database or a backend to generate a sequential unique identifier because you",
    "start": "431639",
    "end": "439020"
  },
  {
    "text": "see sequential identifiers are very powerful because sequence is beautiful",
    "start": "439020",
    "end": "444300"
  },
  {
    "text": "in databases database is liked or like ordered things it likes things that are",
    "start": "444300",
    "end": "449880"
  },
  {
    "text": "ordered because they can put them the same page and you can query them and you can they've been tucked in nicely to",
    "start": "449880",
    "end": "455759"
  },
  {
    "text": "each other and problems uh generating a sequence is very expensive because you have to talk",
    "start": "455759",
    "end": "461039"
  },
  {
    "text": "to the database to give you a unique sequence right so there is a center",
    "start": "461039",
    "end": "466199"
  },
  {
    "text": "point to generating like almost a center point of failure where we ask someone to",
    "start": "466199",
    "end": "472380"
  },
  {
    "text": "give us a unique ID versus the client just generates it and we know it's",
    "start": "472380",
    "end": "477660"
  },
  {
    "text": "Unique so that's why uuids are very powerful the problem with uid is or they",
    "start": "477660",
    "end": "483599"
  },
  {
    "text": "are random or why does that why is that a problem let's continue reading and con and",
    "start": "483599",
    "end": "490860"
  },
  {
    "text": "explain that a little bit more ulids contain a 48 bit stamp timestamps",
    "start": "490860",
    "end": "498180"
  },
  {
    "text": "followed by 80 bit so I was right at 128 is that right yeah",
    "start": "498180",
    "end": "504120"
  },
  {
    "text": "128. if I can do math so followed by 80 bit of random data so UL",
    "start": "504120",
    "end": "510780"
  },
  {
    "text": "IDs Ellie ID has some sort of an order to them so the first 48-bit has a time",
    "start": "510780",
    "end": "518159"
  },
  {
    "text": "stamp and this time stamp will uh",
    "start": "518159",
    "end": "524099"
  },
  {
    "text": "uh will inject some sort of an order to",
    "start": "524099",
    "end": "529680"
  },
  {
    "text": "these random uuids what is the benefit of this the time stamp allow UL IDs to be sorted",
    "start": "529680",
    "end": "537480"
  },
  {
    "text": "unlike random uuids which are not sorted which works much better with a B3 data",
    "start": "537480",
    "end": "545459"
  },
  {
    "text": "structure databases user for indexes in one high throughput system as Shopify",
    "start": "545459",
    "end": "551339"
  },
  {
    "text": "we've seen a 50 percent decrease in insert statement duration by switching",
    "start": "551339",
    "end": "558180"
  },
  {
    "text": "from a uuid version 4 to UU UL IDs for item participation and that's all what",
    "start": "558180",
    "end": "564899"
  },
  {
    "text": "they say they don't tell you how they don't tell you why but I'm here to actually explain why this is the case",
    "start": "564899",
    "end": "572640"
  },
  {
    "text": "and why it is faster because everything once you understand how databases work and how the fundamentals of first",
    "start": "572640",
    "end": "580620"
  },
  {
    "text": "principle of databases this is just like reading one plus one equal to so let's",
    "start": "580620",
    "end": "586680"
  },
  {
    "text": "explain that okay so you see you you",
    "start": "586680",
    "end": "593220"
  },
  {
    "start": "590000",
    "end": "810000"
  },
  {
    "text": "their databases here they don't spell it out but it's my sequel right my sequel",
    "start": "593220",
    "end": "600360"
  },
  {
    "text": "okay primary keys are called a clustered",
    "start": "600360",
    "end": "605940"
  },
  {
    "text": "index which means that if you pick a primary key that is for example an",
    "start": "605940",
    "end": "612600"
  },
  {
    "text": "integer a clustered primary key index is the",
    "start": "612600",
    "end": "619260"
  },
  {
    "text": "table itself so what does that mean if your integer is the primary key then the index",
    "start": "619260",
    "end": "626339"
  },
  {
    "text": "structure at the end there is the leaf Pages where",
    "start": "626339",
    "end": "631500"
  },
  {
    "text": "basically the pointers of where this integer points to",
    "start": "631500",
    "end": "636540"
  },
  {
    "text": "is the actual pages of data right so if",
    "start": "636540",
    "end": "642300"
  },
  {
    "text": "you have a row one row two Row three row four row five row 607 8 9 10.",
    "start": "642300",
    "end": "648380"
  },
  {
    "text": "these are tucked in nicely together in a single page and not only there are the",
    "start": "648380",
    "end": "655079"
  },
  {
    "text": "values but every single column in the table is in the leaf page so if you",
    "start": "655079",
    "end": "660540"
  },
  {
    "text": "search for the value of seven right you will find seven",
    "start": "660540",
    "end": "666600"
  },
  {
    "text": "right and you will find the row 7 you'll find that all the columns that belongs",
    "start": "666600",
    "end": "672000"
  },
  {
    "text": "to row seven that's how clustered indexes work and not only you find row seven you get",
    "start": "672000",
    "end": "678420"
  },
  {
    "text": "it for around find row eight row 9 10 if 11 doesn't exist you're going to find 12",
    "start": "678420",
    "end": "684959"
  },
  {
    "text": "next to it and not only just the values 12 at 10 and 12 and and thirteen you're",
    "start": "684959",
    "end": "692040"
  },
  {
    "text": "gonna find older columns and because of this order if you look up for row 7 you",
    "start": "692040",
    "end": "697500"
  },
  {
    "text": "will Traverse the B3 you find row 7 and you're gonna find any rows that is next",
    "start": "697500",
    "end": "703079"
  },
  {
    "text": "to it so if you're doing range scans it is really beautiful right because",
    "start": "703079",
    "end": "709200"
  },
  {
    "text": "it's like I'll give me all the rows between 7 and 12. oh that's that's a",
    "start": "709200",
    "end": "714899"
  },
  {
    "text": "cheap query for uh B plus trees right and because we are searching on an",
    "start": "714899",
    "end": "722640"
  },
  {
    "text": "indexed a clustered index not only we find it's almost like an index only scan",
    "start": "722640",
    "end": "728339"
  },
  {
    "text": "it is an index only scan in this particular case right all right that's nice we're reading an integer value",
    "start": "728339",
    "end": "733920"
  },
  {
    "text": "right and integer values are ordered in this particular clustered index are nice",
    "start": "733920",
    "end": "739800"
  },
  {
    "text": "I get all the next values next to it but what if I'm inserting if you're inserting rows one",
    "start": "739800",
    "end": "746519"
  },
  {
    "text": "and then 10 and then thousand they are not ordered and you're inserting",
    "start": "746519",
    "end": "753180"
  },
  {
    "text": "20 000 and then you turn around and insert re",
    "start": "753180",
    "end": "758880"
  },
  {
    "text": "the database must insert the Row 3 in the same page that has the one",
    "start": "758880",
    "end": "765360"
  },
  {
    "text": "right because it needs to order them and not only it needs to order order the",
    "start": "765360",
    "end": "771839"
  },
  {
    "text": "index it needs to order the whole row right so the pages must be ordered and",
    "start": "771839",
    "end": "779399"
  },
  {
    "text": "the CL that's the that's the both the advantages the disadvantage of a",
    "start": "779399",
    "end": "785459"
  },
  {
    "text": "clustered index so now if we take if we move this into the primary key concept",
    "start": "785459",
    "end": "791100"
  },
  {
    "text": "with a uuid which is a random one you generate a uid which is random it's the",
    "start": "791100",
    "end": "796620"
  },
  {
    "text": "table is empty you're gonna insert in the first page create a brand new page and you insert it right and then the",
    "start": "796620",
    "end": "802200"
  },
  {
    "text": "second uid is also random well we don't have anything else we just have this one and",
    "start": "802200",
    "end": "809579"
  },
  {
    "text": "we order it and this one happened to be right after it and then you keep inserting and inserting random random",
    "start": "809579",
    "end": "816300"
  },
  {
    "start": "810000",
    "end": "1035000"
  },
  {
    "text": "Goods right and Shifting the results as you find out as the tables start to grow",
    "start": "816300",
    "end": "823560"
  },
  {
    "text": "as you start inserting these random Goods you will find yourself pointing to random Pages because guess what the",
    "start": "823560",
    "end": "830220"
  },
  {
    "text": "there is no order of the way you're inserting these things they are not ordered at all so you need to find where",
    "start": "830220",
    "end": "838740"
  },
  {
    "text": "this random glitch should live based on their order it's exactly identical to inserting",
    "start": "838740",
    "end": "845519"
  },
  {
    "text": "random integer values identical so if you insert value one and then value thousand and then a value or three",
    "start": "845519",
    "end": "852779"
  },
  {
    "text": "million and then seven million and then you turn around insert two you need to",
    "start": "852779",
    "end": "858660"
  },
  {
    "text": "find the page where two lives exactly next to the one right so Random",
    "start": "858660",
    "end": "865040"
  },
  {
    "text": "insertion will just B will cause random iOS so we'll we will",
    "start": "865040",
    "end": "872700"
  },
  {
    "text": "do an i o fetch that page get a new memory which is called also the buffer pool in MySQL and then put it nicely in",
    "start": "872700",
    "end": "880079"
  },
  {
    "text": "memory and let's just hope that this page will receive another write which",
    "start": "880079",
    "end": "885540"
  },
  {
    "text": "will never which will Almost Never receive another right because everything is random right",
    "start": "885540",
    "end": "890940"
  },
  {
    "text": "so you get a get this page you insert insert that random word and then you",
    "start": "890940",
    "end": "896040"
  },
  {
    "text": "insert another random uuids and guess what it's not on the same page you have to fetch the page that needs to live in",
    "start": "896040",
    "end": "902519"
  },
  {
    "text": "you fetch another page you write an important memory so now we have two pages in memory and then another random",
    "start": "902519",
    "end": "908100"
  },
  {
    "text": "again it's not in these Pages it's another page so you end up filling the",
    "start": "908100",
    "end": "914040"
  },
  {
    "text": "buffer pool which is the memory with pages that almost receive just one or",
    "start": "914040",
    "end": "920040"
  },
  {
    "text": "two writes that's bad because what happens is you will fill up your memory",
    "start": "920040",
    "end": "925620"
  },
  {
    "text": "the buffer pool with pages that are almost never used okay",
    "start": "925620",
    "end": "932459"
  },
  {
    "text": "it's almost you're gonna read the entire data with with the uuid that's why it's",
    "start": "932459",
    "end": "937860"
  },
  {
    "text": "bad that's why it's inserts are slow right and I'm focusing on inserts because",
    "start": "937860",
    "end": "944399"
  },
  {
    "text": "reads are also bad but inserts are the worst because now inserts you have to read the page and then write to the page",
    "start": "944399",
    "end": "950760"
  },
  {
    "text": "and then right to the wall which is the right headlock and then flush the page with checkpoints so not only you slow",
    "start": "950760",
    "end": "958680"
  },
  {
    "text": "down rights because to receive a right you have to read put it in memory and",
    "start": "958680",
    "end": "965760"
  },
  {
    "text": "then write to it and if it's not in memory you have to go and do an i o so inserts are always almost causing an i o",
    "start": "965760",
    "end": "973019"
  },
  {
    "text": "right and guess what what if the buffer pool fills up which it will",
    "start": "973019",
    "end": "978720"
  },
  {
    "text": "give it a few million requests which Shopify easily due in an hour right and",
    "start": "978720",
    "end": "985440"
  },
  {
    "text": "then this power pool will fill up so what does that mean if if it fills up you can't even write right so what does",
    "start": "985440",
    "end": "992459"
  },
  {
    "text": "that mean you have to flush existing buffer pool Pages back to disk that is a",
    "start": "992459",
    "end": "997920"
  },
  {
    "text": "cost that is an expensive thing it's called checkpointing it's not exactly",
    "start": "997920",
    "end": "1003019"
  },
  {
    "text": "checkpointing but it's part of the writing flushing back the changes that",
    "start": "1003019",
    "end": "1008480"
  },
  {
    "text": "you do on the data pages to desk checkpointing is something else but when you flush these things you have to flush",
    "start": "1008480",
    "end": "1015680"
  },
  {
    "text": "them to disk or system right and then now that we wrote wrote These",
    "start": "1015680",
    "end": "1022759"
  },
  {
    "text": "30 pages to this now we have some free memory on the buffer pool let's read now that random page that this good has",
    "start": "1022759",
    "end": "1030020"
  },
  {
    "text": "happened to live in and then inserted and and you see this thrashing that the database keeps doing which is uh awful",
    "start": "1030020",
    "end": "1038260"
  },
  {
    "start": "1035000",
    "end": "1320000"
  },
  {
    "text": "so what those guys did was Shopify it is like they realized this big problem with",
    "start": "1038260",
    "end": "1044660"
  },
  {
    "text": "the uid so I said hey we still like uui this we we like the uniqueness of the uitis I'm not going to introduce a",
    "start": "1044660",
    "end": "1051400"
  },
  {
    "text": "centralized system for to generate unique IDs that's just an I mean you can",
    "start": "1051400",
    "end": "1056720"
  },
  {
    "text": "but you created a bottleneck right all these requests you can create a micro service",
    "start": "1056720",
    "end": "1062380"
  },
  {
    "text": "that its sole job is to generate unique IDs that are integers",
    "start": "1062380",
    "end": "1067940"
  },
  {
    "text": "that works right and it will guarantee that no to services or or two requests will get the",
    "start": "1067940",
    "end": "1075140"
  },
  {
    "text": "same unique ID you can do that but you have to serialize them right and it is",
    "start": "1075140",
    "end": "1081320"
  },
  {
    "text": "it becomes a bonding so they still want to use the UI but they will use the UL ID which has a time stamp base so these",
    "start": "1081320",
    "end": "1089480"
  },
  {
    "text": "there is there is a there is an order to this request and",
    "start": "1089480",
    "end": "1095240"
  },
  {
    "text": "the order by time and it works perfectly for Shopify why when you generate",
    "start": "1095240",
    "end": "1100820"
  },
  {
    "text": "requests they are time based they are absolutely time-based requests that are",
    "start": "1100820",
    "end": "1105860"
  },
  {
    "text": "generated is definitely time based so if I generate a new request and I want to write it right in t0 the next request is",
    "start": "1105860",
    "end": "1113660"
  },
  {
    "text": "TZ T1 the list request is T3 the next request T4 this requests will definitely",
    "start": "1113660",
    "end": "1119299"
  },
  {
    "text": "will be one after the other what does that mean in B3 speak in B3 speak if I",
    "start": "1119299",
    "end": "1126740"
  },
  {
    "text": "my primary key is the ulids then I generate the t0 request right and",
    "start": "1126740",
    "end": "1134780"
  },
  {
    "text": "again I'm I'm saying t0 but it's t zero followed by a random number which the most important part is the first part",
    "start": "1134780",
    "end": "1141520"
  },
  {
    "text": "for the database right it's always left to right and just like indexes combined indexes",
    "start": "1141520",
    "end": "1147280"
  },
  {
    "text": "uh uh compound indexes has to go left to right as well right same thing so now we",
    "start": "1147280",
    "end": "1152360"
  },
  {
    "text": "generate request to zero request T1 request T3 T4",
    "start": "1152360",
    "end": "1157820"
  },
  {
    "text": "T5 and all of these t0 guess what go to this page and then where is T1 goes",
    "start": "1157820",
    "end": "1164740"
  },
  {
    "text": "right in the same page which is exactly what you want so t 0 first will say okay",
    "start": "1164740",
    "end": "1170720"
  },
  {
    "text": "I don't have this page let me fetch it from disk put it there and then write to it and then T request T1 comes in it's",
    "start": "1170720",
    "end": "1178400"
  },
  {
    "text": "now random it's ordered so T1 all the requests that comes in almost always",
    "start": "1178400",
    "end": "1184880"
  },
  {
    "text": "goes to the tail of the B3 right which is which is good",
    "start": "1184880",
    "end": "1191179"
  },
  {
    "text": "but there is also another problem that I'm going to mention that they don't talk about it here uh that page will",
    "start": "1191179",
    "end": "1197840"
  },
  {
    "text": "receive many rights so T1 will goes to a T3 will goes to a T4 all of these budget",
    "start": "1197840",
    "end": "1203720"
  },
  {
    "text": "pages will until it gets full done leave it it's almost impossible and",
    "start": "1203720",
    "end": "1210919"
  },
  {
    "text": "probably let's say that another request in in the past will just come in out of",
    "start": "1210919",
    "end": "1216860"
  },
  {
    "text": "the blue and then fetches a page from the past and you can insert that request in the past right",
    "start": "1216860",
    "end": "1222860"
  },
  {
    "text": "all requests will come real time okay I guess I suppose there is there might be",
    "start": "1222860",
    "end": "1228260"
  },
  {
    "text": "a bug I all called a bug in the client where the client generates the the ulid",
    "start": "1228260",
    "end": "1234620"
  },
  {
    "text": "but it got disconnected right and then later it was connected after an hour and",
    "start": "1234620",
    "end": "1241039"
  },
  {
    "text": "then use that ID that's fine right that's fine sure that is kind of an",
    "start": "1241039",
    "end": "1246799"
  },
  {
    "text": "anomaly where an old request ID with an old time stamp will pull an old page to",
    "start": "1246799",
    "end": "1253280"
  },
  {
    "text": "write to it because we have moved on already but the goal here is all the",
    "start": "1253280",
    "end": "1258320"
  },
  {
    "text": "requests that comes in will be nicely ordered the buffer pool will almost have",
    "start": "1258320",
    "end": "1264740"
  },
  {
    "text": "one or two or three pages right and would get right to the tail always right to the tail so rights are fast how about",
    "start": "1264740",
    "end": "1272419"
  },
  {
    "text": "reads reads are also fast because guess what if you're gonna read a request chances that this request you you ID",
    "start": "1272419",
    "end": "1279260"
  },
  {
    "text": "that you just generated it's just you just generated it so if you just generated it chances that it is almost",
    "start": "1279260",
    "end": "1285500"
  },
  {
    "text": "always in memory it's a dirty page right so yeah you can read this page that is effectively it's",
    "start": "1285500",
    "end": "1292880"
  },
  {
    "text": "committed in the wall but it's still in in the memory so we're gonna read it remember so it's already there so reads",
    "start": "1292880",
    "end": "1299659"
  },
  {
    "text": "are fast as opposed to random uuids which you just random they have no",
    "start": "1299659",
    "end": "1304880"
  },
  {
    "text": "absolutely no uh order to them then you're gonna query that and then you",
    "start": "1304880",
    "end": "1311600"
  },
  {
    "text": "have to find the page where it lives and then pull it in memory and just hope that someone else will ask for the same page right but what the because of their",
    "start": "1311600",
    "end": "1320539"
  },
  {
    "start": "1320000",
    "end": "1500000"
  },
  {
    "text": "unique use case Shopify because of this request the order of the request and the",
    "start": "1320539",
    "end": "1326000"
  },
  {
    "text": "order there come in and the effect that's 24 hours or less they built this",
    "start": "1326000",
    "end": "1331220"
  },
  {
    "text": "so tight such that this works perfectly for them ulids work perfectly for them",
    "start": "1331220",
    "end": "1338480"
  },
  {
    "text": "what's the problem here there's another problem is a little thing called the mutexes and",
    "start": "1338480",
    "end": "1347240"
  },
  {
    "text": "suppose this is it's an operating system thing it's a computer science thing whether it's a lock I talked about pages",
    "start": "1347240",
    "end": "1353780"
  },
  {
    "text": "in my medium and I'm I'm making another video about it just talk about database pages",
    "start": "1353780",
    "end": "1359419"
  },
  {
    "text": "very critical concept to understand okay whether it's no SQL graph doesn't matter",
    "start": "1359419",
    "end": "1365900"
  },
  {
    "text": "every database has a concept of a page it's different from the file system page",
    "start": "1365900",
    "end": "1372020"
  },
  {
    "text": "and it's different from the SSD page has nothing to do with each other and page is nothing but an in-memory structure",
    "start": "1372020",
    "end": "1378340"
  },
  {
    "text": "and if you have multi-threading right in your database which almost you do",
    "start": "1378340",
    "end": "1384440"
  },
  {
    "text": "then multiple authors will try to write on the same page right and if you don't",
    "start": "1384440",
    "end": "1390740"
  },
  {
    "text": "do it correctly you can corrupt your page right what is conditions I know",
    "start": "1390740",
    "end": "1395900"
  },
  {
    "text": "so unless you build your structure set that such that you can have two threads right",
    "start": "1395900",
    "end": "1401000"
  },
  {
    "text": "in the same memory location which is very hard you have to acquire something called the mutex and I think in if I'm",
    "start": "1401000",
    "end": "1406340"
  },
  {
    "text": "mistaking in MySQL they call them latches or that might be SQL Server I can't",
    "start": "1406340",
    "end": "1413360"
  },
  {
    "text": "remember so you have to latch on the page if a thread wants to write something it latches to it and then it",
    "start": "1413360",
    "end": "1418460"
  },
  {
    "text": "writes and then it unlatches right or release the mutex",
    "start": "1418460",
    "end": "1423500"
  },
  {
    "text": "right and that constant if you're writing to the tail always if you're",
    "start": "1423500",
    "end": "1429380"
  },
  {
    "text": "like there's like thousands of requests always competing for the tail you're gonna start seeing serialization right",
    "start": "1429380",
    "end": "1437480"
  },
  {
    "text": "as as threads being serialized so you see slight slow down for that particular problem but it's not",
    "start": "1437480",
    "end": "1444980"
  },
  {
    "text": "as bad as having the buffer pool filled up I think they already realized this",
    "start": "1444980",
    "end": "1450380"
  },
  {
    "text": "problem where this latching happened in the tail I don't know if there's a solution to it to be honest right",
    "start": "1450380",
    "end": "1456520"
  },
  {
    "text": "I guess solutions to be having a little bit of a Randomness to it right but for",
    "start": "1456520",
    "end": "1462919"
  },
  {
    "text": "for this particular case yeah maybe make the make the page size a little bit",
    "start": "1462919",
    "end": "1470419"
  },
  {
    "text": "smaller right so that you have a little bit more pages but I don't know so that they can if you have a large",
    "start": "1470419",
    "end": "1476840"
  },
  {
    "text": "page size I mean SQL MySQL I know DB is 16 and I have no idea if they configured",
    "start": "1476840",
    "end": "1482659"
  },
  {
    "text": "that and changed it 16 KB so 16kb can fill up really quick with with the uuids",
    "start": "1482659",
    "end": "1489620"
  },
  {
    "text": "UL IDs I suppose and I have no idea what their table structure looks like",
    "start": "1489620",
    "end": "1495260"
  },
  {
    "text": "but yeah it's interesting looking at all these things right they actually took",
    "start": "1495260",
    "end": "1501260"
  },
  {
    "start": "1500000",
    "end": "1883000"
  },
  {
    "text": "full advantage of ulid the first time I've seen a full advantage of ulids right now we're going to be careful with",
    "start": "1501260",
    "end": "1507980"
  },
  {
    "text": "this right so now we know there is a something called ulid a new uid is",
    "start": "1507980",
    "end": "1513500"
  },
  {
    "text": "is you only you you but what I want to say is",
    "start": "1513500",
    "end": "1518600"
  },
  {
    "text": "don't just use ulid because it's a new thing I think you still need to",
    "start": "1518600",
    "end": "1525500"
  },
  {
    "text": "fix make sure that it's a uh your use case actually fits it right",
    "start": "1525500",
    "end": "1531799"
  },
  {
    "text": "nicely let's take an example so let's say I want to make a a URL shortener",
    "start": "1531799",
    "end": "1538340"
  },
  {
    "text": "such that I don't want the user to select anything right I just wanted",
    "start": "1538340",
    "end": "1546559"
  },
  {
    "text": "to generate a unique short URL based on",
    "start": "1546559",
    "end": "1552020"
  },
  {
    "text": "the UL ID so when you tell me hey this is a long URL make it short I'll",
    "start": "1552020",
    "end": "1557360"
  },
  {
    "text": "generate a mule ID for you and based on that this is now the short URL this is",
    "start": "1557360",
    "end": "1564380"
  },
  {
    "text": "if you use normal random uuids inserts right a fleet of people will be",
    "start": "1564380",
    "end": "1571520"
  },
  {
    "text": "creating short URLs right and in that particular case Randomness will hurt",
    "start": "1571520",
    "end": "1577880"
  },
  {
    "text": "performance especially in right performance right if you use ulids then",
    "start": "1577880",
    "end": "1582980"
  },
  {
    "text": "you can control the inserts because you know that people who generate the short",
    "start": "1582980",
    "end": "1588320"
  },
  {
    "text": "URLs will be generated in game one after the other you can get a nice boost in",
    "start": "1588320",
    "end": "1594320"
  },
  {
    "text": "insert performance with ulids generating short results again if you have like",
    "start": "1594320",
    "end": "1599840"
  },
  {
    "text": "many many thousands of requests because this uld will come in and",
    "start": "1599840",
    "end": "1606320"
  },
  {
    "text": "the beauty here is uh actually you can either have the client generate them or",
    "start": "1606320",
    "end": "1611960"
  },
  {
    "text": "have the database generate them and if you do that all these keys that come in",
    "start": "1611960",
    "end": "1617200"
  },
  {
    "text": "will will look up where should they fit and most of probably they're going to be",
    "start": "1617200",
    "end": "1622940"
  },
  {
    "text": "ordered because write requests to generate new URLs will",
    "start": "1622940",
    "end": "1629480"
  },
  {
    "text": "be in order and as a result they can all fit in in the nice nicely tucked in page",
    "start": "1629480",
    "end": "1635059"
  },
  {
    "text": "instead of randomly right so that's nice but reads I don't think it's going to benefit you at all just same thing as",
    "start": "1635059",
    "end": "1641419"
  },
  {
    "text": "you ID read or will be still random you have absolutely no guarantee in this case",
    "start": "1641419",
    "end": "1649460"
  },
  {
    "text": "to optimize the read requests unlike Shopify uh Shopify actually optimize both write and read Because reading they",
    "start": "1649460",
    "end": "1657200"
  },
  {
    "text": "will almost read requests that are within this 24 hours there's no point",
    "start": "1657200",
    "end": "1662360"
  },
  {
    "text": "trading requests from seven years right doesn't make sense",
    "start": "1662360",
    "end": "1667520"
  },
  {
    "text": "because hey we're building an item potency token here URLs you have no control over that someone might request",
    "start": "1667520",
    "end": "1674779"
  },
  {
    "text": "a URL that you have created a year ago right and in that case you're gonna pull",
    "start": "1674779",
    "end": "1681380"
  },
  {
    "text": "that page so with uid unfortunately in short you are a shortener this",
    "start": "1681380",
    "end": "1687320"
  },
  {
    "text": "Randomness the use case is random and there is absolutely no",
    "start": "1687320",
    "end": "1692840"
  },
  {
    "text": "the way I can think of to make it better for read request",
    "start": "1692840",
    "end": "1698539"
  },
  {
    "text": "okay because because the the the the use case is random",
    "start": "1698539",
    "end": "1705020"
  },
  {
    "text": "the read request is random you have no control of you what users URLs visit",
    "start": "1705020",
    "end": "1711080"
  },
  {
    "text": "right so the result is it's just a random and I have you have to configure your Hardware based on that so just this",
    "start": "1711080",
    "end": "1716960"
  },
  {
    "text": "is just an understanding of this they don't don't think that URL ID will fix everything for you right so another",
    "start": "1716960",
    "end": "1724400"
  },
  {
    "text": "disadvantage if you will is um um the size right 128",
    "start": "1724400",
    "end": "1731360"
  },
  {
    "text": "is huge and if you're using MySQL in particular not necessarily postcode but",
    "start": "1731360",
    "end": "1737659"
  },
  {
    "text": "my sequel will um uh secondary indexes",
    "start": "1737659",
    "end": "1742760"
  },
  {
    "text": "point back to the um to the",
    "start": "1742760",
    "end": "1748520"
  },
  {
    "text": "to the primary index key so if you're like indexing another field that has nothing to do with the ulid right but",
    "start": "1748520",
    "end": "1755480"
  },
  {
    "text": "even though I don't know you understand the date right on which this created then this date will create an index and",
    "start": "1755480",
    "end": "1763820"
  },
  {
    "text": "the values the keys is the date the values is what is the ulid because that's how uh MySQL",
    "start": "1763820",
    "end": "1773419"
  },
  {
    "text": "actually cluster indexes work right as this is the same recently in mongodb as",
    "start": "1773419",
    "end": "1780020"
  },
  {
    "text": "well with clustered collections so if you're using mongodb and you decided to",
    "start": "1780020",
    "end": "1785539"
  },
  {
    "text": "turn on cluster collections on your collections that is identical to mySQL right now",
    "start": "1785539",
    "end": "1791840"
  },
  {
    "text": "so the secondary indexes can bloat up based on the size of the primary key so",
    "start": "1791840",
    "end": "1799220"
  },
  {
    "text": "just just something a fruit of thought to understand these things what's the problem of large indexes like hey I have",
    "start": "1799220",
    "end": "1805820"
  },
  {
    "text": "all the space in the world well you have all the space in the war but you don't have all the memory in the world right",
    "start": "1805820",
    "end": "1811520"
  },
  {
    "text": "if you do kudos but large indexes effectively need to be in memory to be",
    "start": "1811520",
    "end": "1818659"
  },
  {
    "text": "effective in reading so if you have a large indexes with a lot of bloated secondary indexes and you have I know 10",
    "start": "1818659",
    "end": "1825799"
  },
  {
    "text": "indexes can really add up and it can slow down rights as well and rates",
    "start": "1825799",
    "end": "1832100"
  },
  {
    "text": "mostly but right guys so this is what I wanted to discuss a very interesting concept ulid",
    "start": "1832100",
    "end": "1838940"
  },
  {
    "text": "and uh I'll keep thinking more about it it's like where can this break but most",
    "start": "1838940",
    "end": "1845120"
  },
  {
    "text": "of probably ulid is almost always better than uuid right but I'm yet to think about a case",
    "start": "1845120",
    "end": "1853039"
  },
  {
    "text": "where both are actually not a good idea right",
    "start": "1853039",
    "end": "1859159"
  },
  {
    "text": "size is one of them I suppose right but yeah but this is one of the first use cases that I saw",
    "start": "1859159",
    "end": "1865880"
  },
  {
    "text": "that actually takes full advantage of ulids right brilliantly when I say so again good",
    "start": "1865880",
    "end": "1873919"
  },
  {
    "text": "article I'm gonna reference below the show notes I hope you enjoyed this uh video podcast okay see you in the next",
    "start": "1873919",
    "end": "1880700"
  },
  {
    "text": "one you guys stay awesome goodbye",
    "start": "1880700",
    "end": "1883898"
  }
]