[
  {
    "text": "so guys from time to time i'd like to",
    "start": "80",
    "end": "3120"
  },
  {
    "text": "loiter on",
    "start": "3120",
    "end": "4319"
  },
  {
    "text": "people's github repos looking for",
    "start": "4319",
    "end": "7759"
  },
  {
    "text": "issues and bugs specifically to see if",
    "start": "7759",
    "end": "11040"
  },
  {
    "text": "there is an",
    "start": "11040",
    "end": "11679"
  },
  {
    "text": "interesting gym lessons that we can",
    "start": "11679",
    "end": "15120"
  },
  {
    "text": "learn",
    "start": "15120",
    "end": "15599"
  },
  {
    "text": "from those issues of homeless bugs and",
    "start": "15599",
    "end": "17840"
  },
  {
    "text": "boy i",
    "start": "17840",
    "end": "18960"
  },
  {
    "text": "have an interesting one for me i have a",
    "start": "18960",
    "end": "21439"
  },
  {
    "text": "gem for you guys today",
    "start": "21439",
    "end": "23039"
  },
  {
    "text": "i found it in stripe nude",
    "start": "23039",
    "end": "26640"
  },
  {
    "text": "i have no idea how i stumbled upon this",
    "start": "26640",
    "end": "28720"
  },
  {
    "text": "link it's oh it's usually",
    "start": "28720",
    "end": "30480"
  },
  {
    "text": "from a github to another github from",
    "start": "30480",
    "end": "32398"
  },
  {
    "text": "linking from an issue or twitter",
    "start": "32399",
    "end": "34800"
  },
  {
    "text": "and i eventually i found but let's read",
    "start": "34800",
    "end": "37680"
  },
  {
    "text": "through this",
    "start": "37680",
    "end": "38320"
  },
  {
    "text": "let's see through the problem it's it's",
    "start": "38320",
    "end": "41040"
  },
  {
    "text": "it's",
    "start": "41040",
    "end": "41760"
  },
  {
    "text": "it involves aws lambda which is their",
    "start": "41760",
    "end": "44320"
  },
  {
    "text": "serverless offering",
    "start": "44320",
    "end": "46079"
  },
  {
    "text": "and stripe node",
    "start": "46079",
    "end": "49200"
  },
  {
    "text": "client you know if you don't know stripe",
    "start": "49200",
    "end": "51680"
  },
  {
    "text": "is the",
    "start": "51680",
    "end": "53039"
  },
  {
    "text": "api that allows you to payment and it's",
    "start": "53039",
    "end": "55840"
  },
  {
    "text": "a very interesting bug amazon",
    "start": "55840",
    "end": "59280"
  },
  {
    "text": "replied and we're gonna do we're gonna",
    "start": "59280",
    "end": "61199"
  },
  {
    "text": "read the reply now to that but let's",
    "start": "61199",
    "end": "62960"
  },
  {
    "text": "read it through the bug",
    "start": "62960",
    "end": "64000"
  },
  {
    "text": "let's see what's the bug exactly and",
    "start": "64000",
    "end": "65518"
  },
  {
    "text": "then go through the amazon and then",
    "start": "65519",
    "end": "67119"
  },
  {
    "text": "i'm gonna go through some slides that i",
    "start": "67119",
    "end": "68799"
  },
  {
    "text": "did to explain with it because",
    "start": "68799",
    "end": "70479"
  },
  {
    "text": "it's very interesting it's not it's not",
    "start": "70479",
    "end": "72320"
  },
  {
    "text": "straightforward let's go ahead so the",
    "start": "72320",
    "end": "73840"
  },
  {
    "text": "time the bug title is",
    "start": "73840",
    "end": "75600"
  },
  {
    "text": "intermittent error those are the best",
    "start": "75600",
    "end": "78400"
  },
  {
    "text": "isn't it",
    "start": "78400",
    "end": "79520"
  },
  {
    "text": "right e-pipe when running stripe client",
    "start": "79520",
    "end": "82880"
  },
  {
    "text": "in aws lambda entered by hisham we're",
    "start": "82880",
    "end": "85840"
  },
  {
    "text": "using stripe node client",
    "start": "85840",
    "end": "87520"
  },
  {
    "text": "8.7 71.0 on aws lambda running node",
    "start": "87520",
    "end": "92159"
  },
  {
    "text": "12.x a stripe customers.list",
    "start": "92159",
    "end": "95520"
  },
  {
    "text": "call is called first thing when the",
    "start": "95520",
    "end": "98079"
  },
  {
    "text": "lambda execute",
    "start": "98079",
    "end": "99680"
  },
  {
    "text": "33 of the time we get this error on that",
    "start": "99680",
    "end": "103759"
  },
  {
    "text": "call",
    "start": "103759",
    "end": "104479"
  },
  {
    "text": "it's consistently happens so does not",
    "start": "104479",
    "end": "107680"
  },
  {
    "text": "seem to be",
    "start": "107680",
    "end": "108479"
  },
  {
    "text": "transient i did read issue 650",
    "start": "108479",
    "end": "111840"
  },
  {
    "text": "and sitting the max network race rise",
    "start": "111840",
    "end": "115280"
  },
  {
    "text": "in stripe to two seems to resolve",
    "start": "115280",
    "end": "118960"
  },
  {
    "text": "the issue however it seems that",
    "start": "118960",
    "end": "122320"
  },
  {
    "text": "just masked the issue boy this is badass",
    "start": "122320",
    "end": "125759"
  },
  {
    "text": "hashem is a badass",
    "start": "125759",
    "end": "126880"
  },
  {
    "text": "guys you're a badass",
    "start": "126880",
    "end": "130239"
  },
  {
    "text": "thank you for being the ideal engineer",
    "start": "130239",
    "end": "133599"
  },
  {
    "text": "and not just hacking shits through and",
    "start": "133599",
    "end": "136800"
  },
  {
    "text": "actually and try to understand what's",
    "start": "136800",
    "end": "139440"
  },
  {
    "text": "going on",
    "start": "139440",
    "end": "140480"
  },
  {
    "text": "that's what every engineer should do you",
    "start": "140480",
    "end": "142879"
  },
  {
    "text": "don't just copy and paste stuff",
    "start": "142879",
    "end": "144720"
  },
  {
    "text": "you don't just change your variables oh",
    "start": "144720",
    "end": "146800"
  },
  {
    "text": "it seems to be working and guys was",
    "start": "146800",
    "end": "148879"
  },
  {
    "text": "fine no we need to understand what's",
    "start": "148879",
    "end": "151120"
  },
  {
    "text": "going on so",
    "start": "151120",
    "end": "152480"
  },
  {
    "text": "it looks like the sockets being closed",
    "start": "152480",
    "end": "155440"
  },
  {
    "text": "on itself",
    "start": "155440",
    "end": "156480"
  },
  {
    "text": "and retry solves it obviously eritrea",
    "start": "156480",
    "end": "159200"
  },
  {
    "text": "solves everything but",
    "start": "159200",
    "end": "160879"
  },
  {
    "text": "do you really this is the most fragile",
    "start": "160879",
    "end": "164640"
  },
  {
    "text": "thing you need to do right",
    "start": "164640",
    "end": "166560"
  },
  {
    "text": "if you change something and it works and",
    "start": "166560",
    "end": "168879"
  },
  {
    "text": "you don't know how",
    "start": "168879",
    "end": "170080"
  },
  {
    "text": "how how it works that is you have to be",
    "start": "170080",
    "end": "173360"
  },
  {
    "text": "scared okay and and then obviously he",
    "start": "173360",
    "end": "176400"
  },
  {
    "text": "shows the errors and stuff",
    "start": "176400",
    "end": "178080"
  },
  {
    "text": "sorry charm goes through issues that",
    "start": "178080",
    "end": "180159"
  },
  {
    "text": "brings in some more people and and he",
    "start": "180159",
    "end": "182239"
  },
  {
    "text": "finally",
    "start": "182239",
    "end": "182879"
  },
  {
    "text": "receives a reply from amazon let's read",
    "start": "182879",
    "end": "186159"
  },
  {
    "text": "amazon reply starting with the error",
    "start": "186159",
    "end": "188319"
  },
  {
    "text": "e-pipe error",
    "start": "188319",
    "end": "189519"
  },
  {
    "text": "zero is generally caused when the data",
    "start": "189519",
    "end": "192000"
  },
  {
    "text": "is piped into closed",
    "start": "192000",
    "end": "193760"
  },
  {
    "text": "stream that means because you're working",
    "start": "193760",
    "end": "196400"
  },
  {
    "text": "on",
    "start": "196400",
    "end": "196800"
  },
  {
    "text": "tcp connections normally guys",
    "start": "196800",
    "end": "200239"
  },
  {
    "text": "tcp connection that's me speaking now no",
    "start": "200239",
    "end": "202319"
  },
  {
    "text": "i'm not coding",
    "start": "202319",
    "end": "204000"
  },
  {
    "text": "tcp connections as stateful or stateful",
    "start": "204000",
    "end": "206560"
  },
  {
    "text": "right so there's a state",
    "start": "206560",
    "end": "207920"
  },
  {
    "text": "and there is the state has to be",
    "start": "207920",
    "end": "209519"
  },
  {
    "text": "maintained right when you start the",
    "start": "209519",
    "end": "211120"
  },
  {
    "text": "state goes",
    "start": "211120",
    "end": "212239"
  },
  {
    "text": "into established and then when you close",
    "start": "212239",
    "end": "214720"
  },
  {
    "text": "it goes into fenway to one and fenway",
    "start": "214720",
    "end": "217040"
  },
  {
    "text": "two and then close and goes into",
    "start": "217040",
    "end": "218560"
  },
  {
    "text": "different states",
    "start": "218560",
    "end": "219680"
  },
  {
    "text": "so if if this states are out of sync and",
    "start": "219680",
    "end": "222720"
  },
  {
    "text": "you",
    "start": "222720",
    "end": "223200"
  },
  {
    "text": "it's closed technically and you try to",
    "start": "223200",
    "end": "225120"
  },
  {
    "text": "send something you're going to get an",
    "start": "225120",
    "end": "226560"
  },
  {
    "text": "error from the linux kernel or",
    "start": "226560",
    "end": "229680"
  },
  {
    "text": "if your app has a state that doesn't",
    "start": "229680",
    "end": "232080"
  },
  {
    "text": "match the kernel",
    "start": "232080",
    "end": "233200"
  },
  {
    "text": "right so that's what you get that's what",
    "start": "233200",
    "end": "235120"
  },
  {
    "text": "happens so sometimes",
    "start": "235120",
    "end": "236480"
  },
  {
    "text": "it looks like do you have a process with",
    "start": "236480",
    "end": "238159"
  },
  {
    "text": "a closed stream and you have to",
    "start": "238159",
    "end": "240080"
  },
  {
    "text": "you but your app thinks it's open",
    "start": "240080",
    "end": "243200"
  },
  {
    "text": "that's the worst thing in the stateful",
    "start": "243200",
    "end": "245680"
  },
  {
    "text": "apps that you can get",
    "start": "245680",
    "end": "247280"
  },
  {
    "text": "right essentially you're out of sync ah",
    "start": "247280",
    "end": "249840"
  },
  {
    "text": "let me get in",
    "start": "249840",
    "end": "250640"
  },
  {
    "text": "okay in this case node.js lambda",
    "start": "250640",
    "end": "253680"
  },
  {
    "text": "function",
    "start": "253680",
    "end": "254159"
  },
  {
    "text": "the error might cause when the node.js",
    "start": "254159",
    "end": "256400"
  },
  {
    "text": "event loop did not",
    "start": "256400",
    "end": "257600"
  },
  {
    "text": "clean up closed tcp connections from the",
    "start": "257600",
    "end": "260160"
  },
  {
    "text": "http connection pool",
    "start": "260160",
    "end": "262320"
  },
  {
    "text": "and then the node.js runtime attempt to",
    "start": "262320",
    "end": "264240"
  },
  {
    "text": "use the closed",
    "start": "264240",
    "end": "265440"
  },
  {
    "text": "tcp connection all right that's one",
    "start": "265440",
    "end": "268240"
  },
  {
    "text": "scenario but look at this",
    "start": "268240",
    "end": "270320"
  },
  {
    "text": "now they explain how lambda works and i",
    "start": "270320",
    "end": "272720"
  },
  {
    "text": "was",
    "start": "272720",
    "end": "273520"
  },
  {
    "text": "really intrigued by this it's very",
    "start": "273520",
    "end": "275919"
  },
  {
    "text": "interesting because",
    "start": "275919",
    "end": "276960"
  },
  {
    "text": "lambda if you don't know guys before we",
    "start": "276960",
    "end": "278880"
  },
  {
    "text": "go into this",
    "start": "278880",
    "end": "280000"
  },
  {
    "text": "lambda is their server is offering it's",
    "start": "280000",
    "end": "281600"
  },
  {
    "text": "a serverless",
    "start": "281600",
    "end": "283040"
  },
  {
    "text": "concept where you make a request to some",
    "start": "283040",
    "end": "285759"
  },
  {
    "text": "sort of a reverse proxy or a gateway",
    "start": "285759",
    "end": "288000"
  },
  {
    "text": "their lambda aws",
    "start": "288000",
    "end": "289919"
  },
  {
    "text": "and then based on your request they spin",
    "start": "289919",
    "end": "292000"
  },
  {
    "text": "up a container",
    "start": "292000",
    "end": "293440"
  },
  {
    "text": "shove your code into that container",
    "start": "293440",
    "end": "297280"
  },
  {
    "text": "and that takes time that's called the",
    "start": "297280",
    "end": "299120"
  },
  {
    "text": "cold start once that starts",
    "start": "299120",
    "end": "301199"
  },
  {
    "text": "you then you run your code and then they",
    "start": "301199",
    "end": "303039"
  },
  {
    "text": "destroy that container and return it",
    "start": "303039",
    "end": "304880"
  },
  {
    "text": "there is one case where they reuse the",
    "start": "304880",
    "end": "306960"
  },
  {
    "text": "container if you making a lot of",
    "start": "306960",
    "end": "308560"
  },
  {
    "text": "requests",
    "start": "308560",
    "end": "309280"
  },
  {
    "text": "in a very quick delay right it's a very",
    "start": "309280",
    "end": "312560"
  },
  {
    "text": "very small delay",
    "start": "312560",
    "end": "313600"
  },
  {
    "text": "they they reuse the container and that's",
    "start": "313600",
    "end": "315199"
  },
  {
    "text": "when the bug happens let's review this",
    "start": "315199",
    "end": "318160"
  },
  {
    "text": "aws lambda function runs in an isolated",
    "start": "318160",
    "end": "321440"
  },
  {
    "text": "container and usually",
    "start": "321440",
    "end": "322960"
  },
  {
    "text": "each invoke starts a new lambda function",
    "start": "322960",
    "end": "325759"
  },
  {
    "text": "execution in a new container so a brand",
    "start": "325759",
    "end": "327840"
  },
  {
    "text": "new container i mean we always say that",
    "start": "327840",
    "end": "329680"
  },
  {
    "text": "serverless is stateless that as a result",
    "start": "329680",
    "end": "331840"
  },
  {
    "text": "you have to start in a brand new",
    "start": "331840",
    "end": "333440"
  },
  {
    "text": "container so you have",
    "start": "333440",
    "end": "334800"
  },
  {
    "text": "absolutely no side effect however if the",
    "start": "334800",
    "end": "338000"
  },
  {
    "text": "delay between two requests is very small",
    "start": "338000",
    "end": "340479"
  },
  {
    "text": "then the container used",
    "start": "340479",
    "end": "342240"
  },
  {
    "text": "by the previous invoke might be used",
    "start": "342240",
    "end": "345919"
  },
  {
    "text": "later might be reused",
    "start": "345919",
    "end": "348960"
  },
  {
    "text": "to cater to a later request as well",
    "start": "348960",
    "end": "352720"
  },
  {
    "text": "this is known as container use and they",
    "start": "352720",
    "end": "354720"
  },
  {
    "text": "have a very beautiful article i'm going",
    "start": "354720",
    "end": "356319"
  },
  {
    "text": "to reference",
    "start": "356319",
    "end": "356880"
  },
  {
    "text": "below that they discuss container reuse",
    "start": "356880",
    "end": "360639"
  },
  {
    "text": "they did a good job in discussing stuff",
    "start": "360639",
    "end": "362319"
  },
  {
    "text": "amazon while finishing execution",
    "start": "362319",
    "end": "364639"
  },
  {
    "text": "lambda does not consider the state of",
    "start": "364639",
    "end": "367600"
  },
  {
    "text": "active processes",
    "start": "367600",
    "end": "369280"
  },
  {
    "text": "in the background other than the handler",
    "start": "369280",
    "end": "372160"
  },
  {
    "text": "function",
    "start": "372160",
    "end": "372960"
  },
  {
    "text": "so the function that actually executed",
    "start": "372960",
    "end": "375680"
  },
  {
    "text": "for",
    "start": "375680",
    "end": "376000"
  },
  {
    "text": "your code which is basically your main",
    "start": "376000",
    "end": "378560"
  },
  {
    "text": "node.js",
    "start": "378560",
    "end": "379680"
  },
  {
    "text": "thread right if you start other",
    "start": "379680",
    "end": "383039"
  },
  {
    "text": "processes you fork other processes",
    "start": "383039",
    "end": "385440"
  },
  {
    "text": "lambda is not responsible of those it",
    "start": "385440",
    "end": "387120"
  },
  {
    "text": "says hey as long as i execute this code",
    "start": "387120",
    "end": "389759"
  },
  {
    "text": "this is my main function handler",
    "start": "389759",
    "end": "392000"
  },
  {
    "text": "i'm going to execute it when it's done",
    "start": "392000",
    "end": "394560"
  },
  {
    "text": "i'm going to kill my container",
    "start": "394560",
    "end": "396080"
  },
  {
    "text": "i'm going to stop it if in case of",
    "start": "396080",
    "end": "398240"
  },
  {
    "text": "release so what does it do with that",
    "start": "398240",
    "end": "400720"
  },
  {
    "text": "active processes thus",
    "start": "400720",
    "end": "404240"
  },
  {
    "text": "when the execution is finished the",
    "start": "404240",
    "end": "405919"
  },
  {
    "text": "active processes turn into a frozen",
    "start": "405919",
    "end": "408479"
  },
  {
    "text": "state they froze it man",
    "start": "408479",
    "end": "412000"
  },
  {
    "text": "bring those meat from costco and put in",
    "start": "412000",
    "end": "414400"
  },
  {
    "text": "the freezer look at that stuff",
    "start": "414400",
    "end": "416319"
  },
  {
    "text": "when the next request is processed by",
    "start": "416319",
    "end": "418160"
  },
  {
    "text": "the container is",
    "start": "418160",
    "end": "419360"
  },
  {
    "text": "if it happened to have a reuse those",
    "start": "419360",
    "end": "422479"
  },
  {
    "text": "frozen processes are just started back",
    "start": "422479",
    "end": "424960"
  },
  {
    "text": "again in their frozen state",
    "start": "424960",
    "end": "427360"
  },
  {
    "text": "so if you had a tcp socket in one of",
    "start": "427360",
    "end": "430240"
  },
  {
    "text": "those frozen processes",
    "start": "430240",
    "end": "432160"
  },
  {
    "text": "in a state of established right and then",
    "start": "432160",
    "end": "437120"
  },
  {
    "text": "all of a sudden lambda decided to freeze",
    "start": "437120",
    "end": "439680"
  },
  {
    "text": "your process",
    "start": "439680",
    "end": "440720"
  },
  {
    "text": "so the server that you have been",
    "start": "440720",
    "end": "442400"
  },
  {
    "text": "connected to in the background",
    "start": "442400",
    "end": "444160"
  },
  {
    "text": "decides like hey where is this guy where",
    "start": "444160",
    "end": "446720"
  },
  {
    "text": "is it again",
    "start": "446720",
    "end": "447360"
  },
  {
    "text": "where did you go and decided so you know",
    "start": "447360",
    "end": "449520"
  },
  {
    "text": "what i'm gonna close it",
    "start": "449520",
    "end": "450639"
  },
  {
    "text": "and obviously he's gonna do a fan and",
    "start": "450639",
    "end": "452639"
  },
  {
    "text": "get a fin and then gonna retry the fence",
    "start": "452639",
    "end": "454720"
  },
  {
    "text": "and obviously it's gonna give up at the",
    "start": "454720",
    "end": "456160"
  },
  {
    "text": "end of the day",
    "start": "456160",
    "end": "457039"
  },
  {
    "text": "based on the keep alive uh and some",
    "start": "457039",
    "end": "459840"
  },
  {
    "text": "timeouts and",
    "start": "459840",
    "end": "460800"
  },
  {
    "text": "other stuff on the server side so the",
    "start": "460800",
    "end": "462479"
  },
  {
    "text": "server actually physically closes the",
    "start": "462479",
    "end": "464400"
  },
  {
    "text": "connection that's it it's done",
    "start": "464400",
    "end": "465840"
  },
  {
    "text": "so now if any frozen process has",
    "start": "465840",
    "end": "467599"
  },
  {
    "text": "dependencies of priming and streaming",
    "start": "467599",
    "end": "469680"
  },
  {
    "text": "the process fails to continue execution",
    "start": "469680",
    "end": "471919"
  },
  {
    "text": "as it does not find the",
    "start": "471919",
    "end": "473680"
  },
  {
    "text": "pipeline connection stream it used in",
    "start": "473680",
    "end": "475680"
  },
  {
    "text": "the previous request it's done",
    "start": "475680",
    "end": "477199"
  },
  {
    "text": "that's it it's completely gone you're a",
    "start": "477199",
    "end": "479680"
  },
  {
    "text": "completely",
    "start": "479680",
    "end": "480240"
  },
  {
    "text": "new container so that state is not",
    "start": "480240",
    "end": "482639"
  },
  {
    "text": "matching anymore",
    "start": "482639",
    "end": "483680"
  },
  {
    "text": "so let's go through the slides that i",
    "start": "483680",
    "end": "486000"
  },
  {
    "text": "did guys",
    "start": "486000",
    "end": "486800"
  },
  {
    "text": "um all right guys you don't need to see",
    "start": "486800",
    "end": "488319"
  },
  {
    "text": "my face so let's go ahead",
    "start": "488319",
    "end": "489840"
  },
  {
    "text": "so here's a lambda aws cloud",
    "start": "489840",
    "end": "493599"
  },
  {
    "text": "for example i am a client i make a",
    "start": "493599",
    "end": "495680"
  },
  {
    "text": "request what happens",
    "start": "495680",
    "end": "497360"
  },
  {
    "text": "the first request that you make uh aws",
    "start": "497360",
    "end": "500960"
  },
  {
    "text": "lambda will spin up a new brand new",
    "start": "500960",
    "end": "502720"
  },
  {
    "text": "container let's call it container x",
    "start": "502720",
    "end": "504479"
  },
  {
    "text": "and then based on the code that you have",
    "start": "504479",
    "end": "506160"
  },
  {
    "text": "configured for your lambda function",
    "start": "506160",
    "end": "508080"
  },
  {
    "text": "it will load the node.js it will load",
    "start": "508080",
    "end": "510160"
  },
  {
    "text": "the python it will load the ruby",
    "start": "510160",
    "end": "512000"
  },
  {
    "text": "whatever",
    "start": "512000",
    "end": "512880"
  },
  {
    "text": "your code was that specific runtime",
    "start": "512880",
    "end": "516320"
  },
  {
    "text": "and then delegate the function to your",
    "start": "516320",
    "end": "519518"
  },
  {
    "text": "main process essentially this is i i",
    "start": "519519",
    "end": "521599"
  },
  {
    "text": "drew it as a thread",
    "start": "521599",
    "end": "522880"
  },
  {
    "text": "and it's red because it's in use right",
    "start": "522880",
    "end": "524640"
  },
  {
    "text": "now okay that's called the handler",
    "start": "524640",
    "end": "526480"
  },
  {
    "text": "function main process",
    "start": "526480",
    "end": "528560"
  },
  {
    "text": "so once this is done the handle function",
    "start": "528560",
    "end": "531040"
  },
  {
    "text": "is released",
    "start": "531040",
    "end": "532160"
  },
  {
    "text": "and the container remains at this stage",
    "start": "532160",
    "end": "535120"
  },
  {
    "text": "yet",
    "start": "535120",
    "end": "535440"
  },
  {
    "text": "we're done with it right and then we're",
    "start": "535440",
    "end": "537279"
  },
  {
    "text": "going to return the results back",
    "start": "537279",
    "end": "538640"
  },
  {
    "text": "whatever that json responds that xml",
    "start": "538640",
    "end": "541200"
  },
  {
    "text": "response",
    "start": "541200",
    "end": "542000"
  },
  {
    "text": "back to the lambda and then lambda",
    "start": "542000",
    "end": "543440"
  },
  {
    "text": "returns it back to the client very",
    "start": "543440",
    "end": "545200"
  },
  {
    "text": "simple stuff okay",
    "start": "545200",
    "end": "546560"
  },
  {
    "text": "and after a while if nobody made a",
    "start": "546560",
    "end": "549200"
  },
  {
    "text": "request in x",
    "start": "549200",
    "end": "550240"
  },
  {
    "text": "amount of milliseconds or seconds i",
    "start": "550240",
    "end": "552240"
  },
  {
    "text": "don't know that's the timing",
    "start": "552240",
    "end": "554000"
  },
  {
    "text": "amazon kills that container and just",
    "start": "554000",
    "end": "555839"
  },
  {
    "text": "released it back",
    "start": "555839",
    "end": "557040"
  },
  {
    "text": "okay that's how serverless in a nutshell",
    "start": "557040",
    "end": "559839"
  },
  {
    "text": "works",
    "start": "559839",
    "end": "560959"
  },
  {
    "text": "but let's talk about what exactly",
    "start": "560959",
    "end": "562800"
  },
  {
    "text": "happened with stripe and lambda",
    "start": "562800",
    "end": "564560"
  },
  {
    "text": "let's do is actually go into details",
    "start": "564560",
    "end": "566399"
  },
  {
    "text": "here okay so what happened here",
    "start": "566399",
    "end": "568640"
  },
  {
    "text": "a new request was made all right and",
    "start": "568640",
    "end": "570720"
  },
  {
    "text": "then this is the handler function",
    "start": "570720",
    "end": "572560"
  },
  {
    "text": "a container was spun up but node.js",
    "start": "572560",
    "end": "576080"
  },
  {
    "text": "stripe code actually spun up background",
    "start": "576080",
    "end": "579519"
  },
  {
    "text": "processes that itself",
    "start": "579519",
    "end": "582959"
  },
  {
    "text": "starts its own connections right so",
    "start": "582959",
    "end": "585600"
  },
  {
    "text": "these are the background processes",
    "start": "585600",
    "end": "587120"
  },
  {
    "text": "and all of them are unused however what",
    "start": "587120",
    "end": "589519"
  },
  {
    "text": "happened here is",
    "start": "589519",
    "end": "590640"
  },
  {
    "text": "the main process finished that's the fun",
    "start": "590640",
    "end": "593360"
  },
  {
    "text": "that's the lambda",
    "start": "593360",
    "end": "594560"
  },
  {
    "text": "that's what lambda watch is for it was",
    "start": "594560",
    "end": "596880"
  },
  {
    "text": "finished but those",
    "start": "596880",
    "end": "598160"
  },
  {
    "text": "guys were still running and as a result",
    "start": "598160",
    "end": "601839"
  },
  {
    "text": "what did lambda do it froze those two",
    "start": "601839",
    "end": "604959"
  },
  {
    "text": "background processes it kept the",
    "start": "604959",
    "end": "606560"
  },
  {
    "text": "container running and then",
    "start": "606560",
    "end": "608399"
  },
  {
    "text": "the next request that happened so fast",
    "start": "608399",
    "end": "611279"
  },
  {
    "text": "happened to hit the same container",
    "start": "611279",
    "end": "613200"
  },
  {
    "text": "that's called container reuse",
    "start": "613200",
    "end": "615200"
  },
  {
    "text": "so we reused the same",
    "start": "615200",
    "end": "618320"
  },
  {
    "text": "container and as a result we started",
    "start": "618320",
    "end": "620480"
  },
  {
    "text": "using the same main thread",
    "start": "620480",
    "end": "622000"
  },
  {
    "text": "but guess what we unfroze that",
    "start": "622000",
    "end": "624079"
  },
  {
    "text": "connection they started to",
    "start": "624079",
    "end": "625760"
  },
  {
    "text": "start up and all of a sudden what is it",
    "start": "625760",
    "end": "628399"
  },
  {
    "text": "it's like they they woke up after",
    "start": "628399",
    "end": "629839"
  },
  {
    "text": "hibernating right and they're like oh",
    "start": "629839",
    "end": "631760"
  },
  {
    "text": "what is there",
    "start": "631760",
    "end": "632800"
  },
  {
    "text": "what the currency has changed what's",
    "start": "632800",
    "end": "634880"
  },
  {
    "text": "going on oh",
    "start": "634880",
    "end": "636320"
  },
  {
    "text": "who's president right now oh all these",
    "start": "636320",
    "end": "638959"
  },
  {
    "text": "weird things right",
    "start": "638959",
    "end": "639839"
  },
  {
    "text": "all of a sudden boom that's it it's",
    "start": "639839",
    "end": "642560"
  },
  {
    "text": "crashing",
    "start": "642560",
    "end": "643839"
  },
  {
    "text": "so obviously gonna get an error you try",
    "start": "643839",
    "end": "646640"
  },
  {
    "text": "to",
    "start": "646640",
    "end": "647120"
  },
  {
    "text": "do your own thing because the process",
    "start": "647120",
    "end": "648640"
  },
  {
    "text": "thinks is this the tcp connection is",
    "start": "648640",
    "end": "650560"
  },
  {
    "text": "alive which is",
    "start": "650560",
    "end": "651519"
  },
  {
    "text": "not true and it will try to do its own",
    "start": "651519",
    "end": "653920"
  },
  {
    "text": "thing gets that",
    "start": "653920",
    "end": "654959"
  },
  {
    "text": "e pipe error gets back in error and then",
    "start": "654959",
    "end": "658160"
  },
  {
    "text": "goes back right so that's that's exactly",
    "start": "658160",
    "end": "660399"
  },
  {
    "text": "what happened all right",
    "start": "660399",
    "end": "661920"
  },
  {
    "text": "back to my face hello and let's see",
    "start": "661920",
    "end": "665600"
  },
  {
    "text": "so that's that's what happened guys so",
    "start": "665600",
    "end": "668079"
  },
  {
    "text": "that makes sense",
    "start": "668079",
    "end": "669279"
  },
  {
    "text": "that the suggestion that he",
    "start": "669279",
    "end": "672959"
  },
  {
    "text": "has red which is max increasing the max",
    "start": "672959",
    "end": "676560"
  },
  {
    "text": "that it tries to 2",
    "start": "676560",
    "end": "677760"
  },
  {
    "text": "will solve it because the next request",
    "start": "677760",
    "end": "679839"
  },
  {
    "text": "that you make is going to spin up a new",
    "start": "679839",
    "end": "681760"
  },
  {
    "text": "container",
    "start": "681760",
    "end": "682640"
  },
  {
    "text": "and that new container we're going to",
    "start": "682640",
    "end": "684240"
  },
  {
    "text": "have brand new background processes",
    "start": "684240",
    "end": "686079"
  },
  {
    "text": "which will not have that problem even if",
    "start": "686079",
    "end": "688240"
  },
  {
    "text": "you did hit the same container",
    "start": "688240",
    "end": "690000"
  },
  {
    "text": "you'll be lucky because that connection",
    "start": "690000",
    "end": "692480"
  },
  {
    "text": "will just",
    "start": "692480",
    "end": "693279"
  },
  {
    "text": "be will be closed and then the logic in",
    "start": "693279",
    "end": "696480"
  },
  {
    "text": "node",
    "start": "696480",
    "end": "696959"
  },
  {
    "text": "stripe will just oh close all right let",
    "start": "696959",
    "end": "698880"
  },
  {
    "text": "me open it again",
    "start": "698880",
    "end": "700480"
  },
  {
    "text": "that's what we'll do it will it will fix",
    "start": "700480",
    "end": "702160"
  },
  {
    "text": "it",
    "start": "702160",
    "end": "703519"
  },
  {
    "text": "but to me that's a hack and that's what",
    "start": "703519",
    "end": "706160"
  },
  {
    "text": "hisham also agreed with",
    "start": "706160",
    "end": "708000"
  },
  {
    "text": "so what did what did amazon suggest",
    "start": "708000",
    "end": "710320"
  },
  {
    "text": "let's see let's see what the dimensions",
    "start": "710320",
    "end": "711760"
  },
  {
    "text": "suggest",
    "start": "711760",
    "end": "712480"
  },
  {
    "text": "what did amazon suggest to avoid these",
    "start": "712480",
    "end": "715440"
  },
  {
    "text": "errors",
    "start": "715440",
    "end": "716320"
  },
  {
    "text": "the following is suggested revisit the",
    "start": "716320",
    "end": "718720"
  },
  {
    "text": "function code",
    "start": "718720",
    "end": "719760"
  },
  {
    "text": "and ensure that processes dependent on",
    "start": "719760",
    "end": "721920"
  },
  {
    "text": "the connection stream",
    "start": "721920",
    "end": "723519"
  },
  {
    "text": "are finished before lambda execute",
    "start": "723519",
    "end": "726320"
  },
  {
    "text": "execution",
    "start": "726320",
    "end": "727360"
  },
  {
    "text": "function finisher 100 this is the right",
    "start": "727360",
    "end": "730320"
  },
  {
    "text": "way",
    "start": "730320",
    "end": "730639"
  },
  {
    "text": "in my opinion absolutely hundred percent",
    "start": "730639",
    "end": "734160"
  },
  {
    "text": "one thousand percent this is the right",
    "start": "734160",
    "end": "736079"
  },
  {
    "text": "solution so the background processes",
    "start": "736079",
    "end": "739760"
  },
  {
    "text": "wait for that dang thing to finish",
    "start": "739760",
    "end": "741839"
  },
  {
    "text": "before the main function the main",
    "start": "741839",
    "end": "743279"
  },
  {
    "text": "function should",
    "start": "743279",
    "end": "744480"
  },
  {
    "text": "coordinate those things all right and as",
    "start": "744480",
    "end": "747680"
  },
  {
    "text": "a result you should not finish before",
    "start": "747680",
    "end": "749440"
  },
  {
    "text": "them right and that's what",
    "start": "749440",
    "end": "750560"
  },
  {
    "text": "apparently has happened right use",
    "start": "750560",
    "end": "754320"
  },
  {
    "text": "the retry which will create new",
    "start": "754320",
    "end": "756320"
  },
  {
    "text": "connection stream for the near request",
    "start": "756320",
    "end": "759200"
  },
  {
    "text": "that works and from what i read from all",
    "start": "759200",
    "end": "762560"
  },
  {
    "text": "the issues that i started read",
    "start": "762560",
    "end": "765040"
  },
  {
    "text": "a lot of people are even amazon",
    "start": "765040",
    "end": "767360"
  },
  {
    "text": "themselves",
    "start": "767360",
    "end": "768880"
  },
  {
    "text": "based on hisham's they are using the",
    "start": "768880",
    "end": "772560"
  },
  {
    "text": "same solution they're just like hey",
    "start": "772560",
    "end": "774959"
  },
  {
    "text": "instead what they did they will not fail",
    "start": "774959",
    "end": "778399"
  },
  {
    "text": "instead they will they will they don't",
    "start": "778399",
    "end": "780240"
  },
  {
    "text": "cause the e-pipe",
    "start": "780240",
    "end": "782000"
  },
  {
    "text": "error to return back to the user no",
    "start": "782000",
    "end": "785519"
  },
  {
    "text": "if that error happened they will treat",
    "start": "785519",
    "end": "788560"
  },
  {
    "text": "it",
    "start": "788560",
    "end": "789279"
  },
  {
    "text": "as a closed connection",
    "start": "789279",
    "end": "793839"
  },
  {
    "text": "and it will automatically reopen that",
    "start": "793839",
    "end": "796079"
  },
  {
    "text": "connection",
    "start": "796079",
    "end": "797519"
  },
  {
    "text": "which sounds to me like okay that's",
    "start": "797519",
    "end": "800639"
  },
  {
    "text": "a fine solution okay all right guys",
    "start": "800639",
    "end": "803120"
  },
  {
    "text": "that's it for me today very quick video",
    "start": "803120",
    "end": "805360"
  },
  {
    "text": "and a very interesting find what do you",
    "start": "805360",
    "end": "807600"
  },
  {
    "text": "think about this",
    "start": "807600",
    "end": "808720"
  },
  {
    "text": "thing do you think it's a hack do you",
    "start": "808720",
    "end": "810320"
  },
  {
    "text": "think it's the right solution because",
    "start": "810320",
    "end": "811680"
  },
  {
    "text": "hey he's saying",
    "start": "811680",
    "end": "812880"
  },
  {
    "text": "sometimes this stuff can happen",
    "start": "812880",
    "end": "816160"
  },
  {
    "text": "but you have to kind of capture it and",
    "start": "816160",
    "end": "818000"
  },
  {
    "text": "resume and instead of failing",
    "start": "818000",
    "end": "821760"
  },
  {
    "text": "just reconnect and try again as long as",
    "start": "821760",
    "end": "825120"
  },
  {
    "text": "we know what's happening i'm okay with",
    "start": "825120",
    "end": "827120"
  },
  {
    "text": "that",
    "start": "827120",
    "end": "828240"
  },
  {
    "text": "not with the max retry equal to but",
    "start": "828240",
    "end": "831920"
  },
  {
    "text": "with essentially reconnecting when the",
    "start": "831920",
    "end": "835680"
  },
  {
    "text": "pipe is closed",
    "start": "835680",
    "end": "837440"
  },
  {
    "text": "having the solution in node.js itself",
    "start": "837440",
    "end": "840639"
  },
  {
    "text": "right or in stripe let's say instead of",
    "start": "840639",
    "end": "843199"
  },
  {
    "text": "having",
    "start": "843199",
    "end": "843839"
  },
  {
    "text": "to retry every time there is a fairy",
    "start": "843839",
    "end": "846240"
  },
  {
    "text": "because sometimes it's a real failure",
    "start": "846240",
    "end": "848000"
  },
  {
    "text": "and now",
    "start": "848000",
    "end": "848720"
  },
  {
    "text": "you're doubling the number of requests",
    "start": "848720",
    "end": "852000"
  },
  {
    "text": "right because if it's if it's an actual",
    "start": "852000",
    "end": "854480"
  },
  {
    "text": "failure",
    "start": "854480",
    "end": "855680"
  },
  {
    "text": "what if you increase the retry to two",
    "start": "855680",
    "end": "858800"
  },
  {
    "text": "every time you failed truly",
    "start": "858800",
    "end": "862399"
  },
  {
    "text": "that is unrecoverable you're gonna",
    "start": "862399",
    "end": "864160"
  },
  {
    "text": "attend the retry and that just doubles",
    "start": "864160",
    "end": "866160"
  },
  {
    "text": "the amount of work that you have to do",
    "start": "866160",
    "end": "867680"
  },
  {
    "text": "on your client",
    "start": "867680",
    "end": "869120"
  },
  {
    "text": "how much work at the server side i don't",
    "start": "869120",
    "end": "871040"
  },
  {
    "text": "know i'll leave the comments back to you",
    "start": "871040",
    "end": "872959"
  },
  {
    "text": "guys in the comment what do you think",
    "start": "872959",
    "end": "874320"
  },
  {
    "text": "about this",
    "start": "874320",
    "end": "874880"
  },
  {
    "text": "i'm gonna see on the next one you guys",
    "start": "874880",
    "end": "876720"
  },
  {
    "text": "stay awesome goodbye yo",
    "start": "876720",
    "end": "880000"
  }
]