[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "mongodb is a document based nosql database",
    "start": "319",
    "end": "7580"
  },
  {
    "text": "it became very very popular for its schema-less",
    "start": "7740",
    "end": "13040"
  },
  {
    "text": "way of storing documents you know because the friction when it",
    "start": "13040",
    "end": "19320"
  },
  {
    "text": "comes to writing code has gone compared to SQL based databases but",
    "start": "19320",
    "end": "26160"
  },
  {
    "text": "I get this question a lot and uh I thought this video will be the perfect",
    "start": "26160",
    "end": "31859"
  },
  {
    "text": "segue to actually answer that question what is really the difference between nosql and SQL so I'm going to address",
    "start": "31859",
    "end": "37980"
  },
  {
    "text": "that in this video and but the main purpose of this video is actually going",
    "start": "37980",
    "end": "43739"
  },
  {
    "text": "through the evolution of mongodb internal architecture so this is a topic",
    "start": "43739",
    "end": "50399"
  },
  {
    "text": "that very rarely people discuss because we're going into the bowels of the",
    "start": "50399",
    "end": "55620"
  },
  {
    "text": "database not the front end in a sense that how you interact with it and store",
    "start": "55620",
    "end": "61320"
  },
  {
    "text": "data right so we're talking about the actual architecture of the internals right there's been Evolution up until",
    "start": "61320",
    "end": "67920"
  },
  {
    "text": "version 5.3 a very interesting uh feature was added it's called the",
    "start": "67920",
    "end": "74400"
  },
  {
    "text": "cluster collections so I'll go through this the evolution of this so to discuss what is the difference between SQL and",
    "start": "74400",
    "end": "80820"
  },
  {
    "text": "non-sql and in a very deep way and",
    "start": "80820",
    "end": "85860"
  },
  {
    "text": "we'll discuss the first version of mongodb starts with",
    "start": "85860",
    "end": "91799"
  },
  {
    "text": "their storage engine MAV V1 then the wire tiger acquiring them back in 2014 I",
    "start": "91799",
    "end": "98579"
  },
  {
    "text": "think and then moving all the way to the recent changes which is the clustered",
    "start": "98579",
    "end": "104340"
  },
  {
    "text": "Collections and this is all gonna make sense by the end of the video hopefully how about we get started alright so I'm",
    "start": "104340",
    "end": "110759"
  },
  {
    "text": "gonna use uh my medium article at least the images in my medium article to",
    "start": "110759",
    "end": "116399"
  },
  {
    "text": "illustrate this think of it as like as the slide shows but go ahead and make",
    "start": "116399",
    "end": "122759"
  },
  {
    "start": "120000",
    "end": "1080000"
  },
  {
    "text": "sure to follow me on medium I started posting a lot of content there if you're if you like if you like more the written",
    "start": "122759",
    "end": "129899"
  },
  {
    "text": "mediums and actual videos but the first thing we're going to discuss is like the database internals if if you look really",
    "start": "129899",
    "end": "136440"
  },
  {
    "text": "at any database any database almost always",
    "start": "136440",
    "end": "142920"
  },
  {
    "text": "will have two pieces and the most piece that we actually deal with and interact",
    "start": "142920",
    "end": "149640"
  },
  {
    "text": "with is actually the front end piece of the database which is the API you see the most popular databases API",
    "start": "149640",
    "end": "159000"
  },
  {
    "text": "to actually communicate to the database to tell it what to pitch to to to to actually ask it to store something is",
    "start": "159000",
    "end": "167700"
  },
  {
    "text": "the SQL language which was the state for structured query language right and that",
    "start": "167700",
    "end": "175080"
  },
  {
    "text": "is the API that we know and love and another piece of another different API",
    "start": "175080",
    "end": "180720"
  },
  {
    "text": "could be like redis or right so hey get this document and store this",
    "start": "180720",
    "end": "187860"
  },
  {
    "text": "document there's no structured query language there's no selecting tables and",
    "start": "187860",
    "end": "193620"
  },
  {
    "text": "Fields right it's just its own different API so the DPI can actually change based",
    "start": "193620",
    "end": "200280"
  },
  {
    "text": "on the database the second portion is actually the data format when I ask you to get something or I want to store",
    "start": "200280",
    "end": "206700"
  },
  {
    "text": "something what am I giving you and what am I taking back from you and this is",
    "start": "206700",
    "end": "211739"
  },
  {
    "text": "where really a database can shine it's it's it's the core",
    "start": "211739",
    "end": "217319"
  },
  {
    "text": "of any database system the data format so for the longest time",
    "start": "217319",
    "end": "222379"
  },
  {
    "text": "databases has always been tables and rows and columns",
    "start": "222379",
    "end": "229200"
  },
  {
    "text": "right and to interact with these rows and",
    "start": "229200",
    "end": "234540"
  },
  {
    "text": "columns you use the SQL language right to query it so when people design the",
    "start": "234540",
    "end": "242459"
  },
  {
    "text": "database back in the 70s or 60s even right they they thought about it always is hey it's always going to be tables",
    "start": "242459",
    "end": "249480"
  },
  {
    "text": "and always going to be rows and all is going to be columns and then the application can build on top of it right we built it bottom up if you will",
    "start": "249480",
    "end": "257760"
  },
  {
    "text": "and then uh so that's one data format right but then",
    "start": "257760",
    "end": "263639"
  },
  {
    "text": "people challenge this people came in the 2000 era and says wait a minute why do I have to",
    "start": "263639",
    "end": "271320"
  },
  {
    "text": "be really fixed to these tables I don't know what my application has nothing to",
    "start": "271320",
    "end": "277800"
  },
  {
    "text": "do with tables as the web evolved as the as the evolution of the web right Cayman",
    "start": "277800",
    "end": "284520"
  },
  {
    "text": "and Json and documents really I want to deal with documents I don't even have a",
    "start": "284520",
    "end": "289919"
  },
  {
    "text": "schema per se I don't have tables with a specific schema I want to be flexible why are you forcing me to to do tables",
    "start": "289919",
    "end": "296940"
  },
  {
    "text": "and that's the idea of where documents came in later graphs came in later other",
    "start": "296940",
    "end": "303860"
  },
  {
    "text": "column based storage came in right instead of row storage all of this it",
    "start": "303860",
    "end": "310979"
  },
  {
    "text": "really automatically the database became this two part where the front-end and the",
    "start": "310979",
    "end": "316139"
  },
  {
    "text": "storage engine which is more the most important part the storage engine here you see so the storage once we discuss",
    "start": "316139",
    "end": "322860"
  },
  {
    "text": "this there's the data format how I'm referring these things to the user and the user here I really mean the",
    "start": "322860",
    "end": "328380"
  },
  {
    "text": "application and again the front and the front end here I'm talking about the actual database front and it's in the",
    "start": "328380",
    "end": "336600"
  },
  {
    "text": "database right portion and then the second portion which is",
    "start": "336600",
    "end": "341880"
  },
  {
    "text": "the most important part is how am I storing the data on disk right",
    "start": "341880",
    "end": "350220"
  },
  {
    "text": "and the storage engine doesn't really care what are your",
    "start": "350220",
    "end": "355320"
  },
  {
    "text": "storing in it to the storage engine you have something called a page and you in the page you have bytes",
    "start": "355320",
    "end": "364320"
  },
  {
    "text": "that's all what it cares about and the front end part of the database will say",
    "start": "364320",
    "end": "371100"
  },
  {
    "text": "hey by the way in this page there is a bunch of rows",
    "start": "371100",
    "end": "376139"
  },
  {
    "text": "right I have a row store right where I have a table and I put the row and all",
    "start": "376139",
    "end": "383039"
  },
  {
    "text": "the columns and then right after the final column of the first row I put the",
    "start": "383039",
    "end": "389039"
  },
  {
    "text": "second row and you can see that it's just uh if you if you think of like an",
    "start": "389039",
    "end": "394919"
  },
  {
    "text": "actual page a rectangle the first row and then followed by the second row followed by the third row and all its",
    "start": "394919",
    "end": "401759"
  },
  {
    "text": "column fourth row and all it's going on if I throw an old column until the page fills that's why the storage engine has",
    "start": "401759",
    "end": "407940"
  },
  {
    "text": "a property called the page size in in nanodb MySQL that's 16k kilobyte in uh",
    "start": "407940",
    "end": "414360"
  },
  {
    "text": "mango mongodb I don't remember mango DB but postgres is 8k and you can change this page size",
    "start": "414360",
    "end": "421500"
  },
  {
    "text": "so in what we're storing is just a document",
    "start": "421500",
    "end": "426900"
  },
  {
    "text": "it's a Json document there with front end receives and it turns it into a",
    "start": "426900",
    "end": "433440"
  },
  {
    "text": "bunch of bytes and then we flush it to a page and it's the same",
    "start": "433440",
    "end": "438900"
  },
  {
    "text": "thing the document or key the first key and then the value and then we just write it to the storage engine",
    "start": "438900",
    "end": "446880"
  },
  {
    "text": "so if you think really really about it it's always the storage what are you storing and what how the front end is",
    "start": "446880",
    "end": "453960"
  },
  {
    "text": "actually extracting this information so document graph",
    "start": "453960",
    "end": "459060"
  },
  {
    "text": "write-based database when I say hey this is a graph based database the storage engine doesn't care",
    "start": "459060",
    "end": "464819"
  },
  {
    "text": "it's just how the front and part of the database actually organizes the bytes such that when I store them",
    "start": "464819",
    "end": "473460"
  },
  {
    "text": "I want to read that page and get as much",
    "start": "473460",
    "end": "479419"
  },
  {
    "text": "efficiency in my read as possible so another piece of the storage engine is",
    "start": "479419",
    "end": "484860"
  },
  {
    "text": "indexes right because now we're storing things in a bunch of pages right how are",
    "start": "484860",
    "end": "490740"
  },
  {
    "text": "we storing them is also another story right are they are they just a bunch of files H does each file represent a table",
    "start": "490740",
    "end": "498960"
  },
  {
    "text": "or a collection in mongodb right or am I storing the actual data in the indexes",
    "start": "498960",
    "end": "505860"
  },
  {
    "text": "itself we're going to talk about all that right indexes will help Fast Track",
    "start": "505860",
    "end": "511979"
  },
  {
    "text": "what you're looking for right that's also part of the storage engine the type of indexes you're creating is it a just",
    "start": "511979",
    "end": "519479"
  },
  {
    "text": "is it a B3 and all really helps pinpoint exactly what page you are",
    "start": "519479",
    "end": "527940"
  },
  {
    "text": "trying to read so if you have a like a table or a",
    "start": "527940",
    "end": "533640"
  },
  {
    "text": "mongodb collection this mongodb collection is just a bunch of Json documents right",
    "start": "533640",
    "end": "540899"
  },
  {
    "text": "storage engine can decide you know what this document is really large I'm gonna decide to compress it so that's all property of the storage",
    "start": "540899",
    "end": "547920"
  },
  {
    "text": "engine the frontal has doesn't even know that this document is compressed all it does is hey just give me that document",
    "start": "547920",
    "end": "554220"
  },
  {
    "text": "and this part will just decompress it and give you back give it back to the front and and the front end will return",
    "start": "554220",
    "end": "561060"
  },
  {
    "text": "it right so there is like a clear separation between these two and they can share tasks as well of course there",
    "start": "561060",
    "end": "568920"
  },
  {
    "text": "are files like where is the actual full data you know because indexes only have",
    "start": "568920",
    "end": "574140"
  },
  {
    "text": "parts of the data right it's like I'm I'm indexing on the first name and give me all first name is a bad index and",
    "start": "574140",
    "end": "583200"
  },
  {
    "text": "I don't know salary maybe right salary is another data structure we create and",
    "start": "583200",
    "end": "588660"
  },
  {
    "text": "then we Traverse it back to get back to exactly to that data right to that data",
    "start": "588660",
    "end": "594360"
  },
  {
    "text": "file which then pulls the entire document or row and then we return it",
    "start": "594360",
    "end": "599459"
  },
  {
    "text": "and you can you can really be creative here and that's what people did right the storage engine are also",
    "start": "599459",
    "end": "606300"
  },
  {
    "text": "responsible for transactions you know when I'm changing this and this and this and this and this I wanted to",
    "start": "606300",
    "end": "613080"
  },
  {
    "text": "do it as one unit of work such that if there is a failure please roll back all",
    "start": "613080",
    "end": "618120"
  },
  {
    "text": "these changes don't persist anything halfway through I want to be consistent",
    "start": "618120",
    "end": "625860"
  },
  {
    "text": "I want to be Atomic and I want to be isolated my concurrent transaction all",
    "start": "625860",
    "end": "631500"
  },
  {
    "text": "of these are property to the storage engine really right I want durability I want that if if I say commit and you",
    "start": "631500",
    "end": "638700"
  },
  {
    "text": "told me the front end right that's another thing right the transaction will say hey I want you to commit and the",
    "start": "638700",
    "end": "644880"
  },
  {
    "text": "store Ginger will say yes you committed successfully if I get the success and return to the user and then later you",
    "start": "644880",
    "end": "651420"
  },
  {
    "text": "crashed that data better be there when I come back because you told me you committed",
    "start": "651420",
    "end": "658500"
  },
  {
    "text": "successfully right all of these things wall the right ahead log or journaling as mongodb calls it",
    "start": "658500",
    "end": "665519"
  },
  {
    "text": "right as I'm writing things originally when you write things it goes",
    "start": "665519",
    "end": "671220"
  },
  {
    "text": "it needs to go to the data file that's what were the the major storage lies",
    "start": "671220",
    "end": "676740"
  },
  {
    "text": "right lives but but then right into the data file is",
    "start": "676740",
    "end": "681839"
  },
  {
    "text": "really expensive because you're writing in Pages you these massive Pages 8K and",
    "start": "681839",
    "end": "687120"
  },
  {
    "text": "16k so right if imagine like you're touching one column one property you you",
    "start": "687120",
    "end": "693480"
  },
  {
    "text": "need to write a whole page there is no writing one byte in databases no no no sir we don't go to disk and say hey just",
    "start": "693480",
    "end": "700440"
  },
  {
    "text": "change that tiny byte or just change that tiny three byte or distinct at 1K",
    "start": "700440",
    "end": "705600"
  },
  {
    "text": "by nope you can do that that's not how ssds and hard drive works you have to",
    "start": "705600",
    "end": "711300"
  },
  {
    "text": "write in chunks and big chunks for Efficiency do an IO you're gonna write an all sector you do an SSD You're Gonna",
    "start": "711300",
    "end": "718680"
  },
  {
    "text": "Write the whole page or a block or a raiseable unit based on the new technology of ssds right",
    "start": "718680",
    "end": "726320"
  },
  {
    "text": "that's where the shingled hard drives comes into the picture where they increase the right",
    "start": "727140",
    "end": "733579"
  },
  {
    "text": "portions and stuff like that right we don't have byte addressability on desk",
    "start": "733579",
    "end": "739200"
  },
  {
    "text": "unfortunately until today 2022 we have bite addressability on RAM you can",
    "start": "739200",
    "end": "746880"
  },
  {
    "text": "definitely write single byte and RAM definitely that's fine right but on disk",
    "start": "746880",
    "end": "752100"
  },
  {
    "text": "uh persisted no you gotta write in pages right and that's where we have today",
    "start": "752100",
    "end": "758220"
  },
  {
    "text": "and because of that cost right writing to hold data files what the data storage",
    "start": "758220",
    "end": "764040"
  },
  {
    "text": "engine does like as you change all these changes goes to run we call them dirty Pages the moment you",
    "start": "764040",
    "end": "770579"
  },
  {
    "text": "touch a page where have you have your raw or collection or document we just mark it as dirty and again the search",
    "start": "770579",
    "end": "777420"
  },
  {
    "text": "engine doesn't know it's a document it just knows it's bytes it knows that a page with a bunch of bytes that you",
    "start": "777420",
    "end": "783300"
  },
  {
    "text": "touched right and then you write in memory and so it's fast and then later",
    "start": "783300",
    "end": "788579"
  },
  {
    "text": "the storage engine will collect as much changes as possible and then flush it once right to the database",
    "start": "788579",
    "end": "794940"
  },
  {
    "text": "all of this this job of the storage engine I still didn't come to the difference between SQL and SQL but you you will get",
    "start": "794940",
    "end": "802260"
  },
  {
    "text": "to get there right you're clearly gonna see it I think by the by this time if you're still watching or listening",
    "start": "802260",
    "end": "809279"
  },
  {
    "text": "you're probably gonna know the difference right so we're not writing immediately right",
    "start": "809279",
    "end": "817380"
  },
  {
    "text": "we're collecting this change you might say Hussein but wait a minute you're right into a ram if I commit you're writing to Ram what if I crash that's",
    "start": "817380",
    "end": "823740"
  },
  {
    "text": "the problem right that's why in case to to recover from the crash we create this",
    "start": "823740",
    "end": "829200"
  },
  {
    "text": "called something The Thinker is called wall there right ahead log so as we ride to the ram to these data Pages we also",
    "start": "829200",
    "end": "837120"
  },
  {
    "text": "write on desk tiny things that says hey here's a journal on this date I on this",
    "start": "837120",
    "end": "845399"
  },
  {
    "text": "date right dear diary on this date I updated the salary from ten thousand to",
    "start": "845399",
    "end": "852779"
  },
  {
    "text": "ten thousand and fifty cent it's a bad year what do you want me to say right so and and this on this date I",
    "start": "852779",
    "end": "861480"
  },
  {
    "text": "read this on this then you just rewrite the changes so that in case of a crash we're gonna",
    "start": "861480",
    "end": "867060"
  },
  {
    "text": "lose the dirty pages on that on memory but if I came back I have all the wall",
    "start": "867060",
    "end": "873240"
  },
  {
    "text": "and I have the last checkpoint on the data file so I restore that and I redo",
    "start": "873240",
    "end": "880860"
  },
  {
    "text": "the changes I apply the wall to the data files and now in memory I",
    "start": "880860",
    "end": "888480"
  },
  {
    "text": "have the final representation as it was when I crashed brilliant design anyway",
    "start": "888480",
    "end": "893820"
  },
  {
    "text": "I'm going over the place but the storage engine front end that is the main pieces so we talked about what a front-end is",
    "start": "893820",
    "end": "900060"
  },
  {
    "text": "we talked about what a storage engine is the difference between the SQL and nosql mainly is this Bobby",
    "start": "900060",
    "end": "908339"
  },
  {
    "text": "the front end the nosql guys came in and says ah you",
    "start": "908339",
    "end": "913920"
  },
  {
    "text": "really respected me with this tables and columns and this sequel I hate sick or I",
    "start": "913920",
    "end": "919440"
  },
  {
    "text": "don't like sequel at all right I don't like it and it does it just this didn't fit our",
    "start": "919440",
    "end": "925500"
  },
  {
    "text": "application I want to be like I want just to give you a document just store it and that's where they redesigned I",
    "start": "925500",
    "end": "932399"
  },
  {
    "text": "think someone came up in in one day shop is like no sequel they started movement they said no sequel no SQL no sequel no",
    "start": "932399",
    "end": "939720"
  },
  {
    "text": "more sequel and they created their own technical storage engine",
    "start": "939720",
    "end": "946019"
  },
  {
    "text": "and they I believe if I'm not mistaken they didn't even have indexes so see you guys",
    "start": "946019",
    "end": "951360"
  },
  {
    "text": "are so because one database is Oracle and SQL Server created they were just so wired to be uh you know to have tables",
    "start": "951360",
    "end": "961860"
  },
  {
    "text": "and rows and so everything was glued together and sticky can't change it so they created everything from scratch a",
    "start": "961860",
    "end": "968519"
  },
  {
    "text": "storage engine uh I'm storing just documents for example that's the first use case I have a document that Json",
    "start": "968519",
    "end": "974339"
  },
  {
    "text": "document just store it it's just a bunch of bytes later they added transactions later they added wall later they have",
    "start": "974339",
    "end": "980940"
  },
  {
    "text": "the indexes they slowly edited and then the API just take it and sit",
    "start": "980940",
    "end": "986519"
  },
  {
    "text": "the user will get a document and we'll get a store it on the storage engine that's it it's just a bunch of bytes",
    "start": "986519",
    "end": "993180"
  },
  {
    "text": "we're gonna store convert the Json into Basin bison binary Json and then we preset it that's",
    "start": "993180",
    "end": "1001100"
  },
  {
    "text": "the only difference that's the only difference right",
    "start": "1001100",
    "end": "1006680"
  },
  {
    "text": "the data format which we changed from tables and rows into documents and then the API which is the get and set instead",
    "start": "1006920",
    "end": "1013339"
  },
  {
    "text": "of just SQL clear separation and then of course",
    "start": "1013339",
    "end": "1020600"
  },
  {
    "text": "there are out of the box storage engines such as level DB or my rocks right roxdb",
    "start": "1020600",
    "end": "1026780"
  },
  {
    "text": "sorry roxdb is a very popular storage engine that does exactly that takes a bunch of bytes doesn't care what you",
    "start": "1026780",
    "end": "1032298"
  },
  {
    "text": "have in your bytes it doesn't care it just it gives you the beauty of indexes and storage engine and all this stuff",
    "start": "1032299",
    "end": "1038839"
  },
  {
    "text": "right but then in the front end you can build your database the way you want",
    "start": "1038839",
    "end": "1044240"
  },
  {
    "text": "that's where you can build a graph database so graph will prioritize not",
    "start": "1044240",
    "end": "1049640"
  },
  {
    "text": "rows or columns per se or even documents but the traversability like so if this",
    "start": "1049640",
    "end": "1055760"
  },
  {
    "text": "is not connected to this node to connect to this node I want to store them next to each other right in this way and so",
    "start": "1055760",
    "end": "1063679"
  },
  {
    "text": "that the old goal between the API and the storage unit and the front end is that when I do an i o and I give me a",
    "start": "1063679",
    "end": "1070400"
  },
  {
    "text": "page you want as much as possible that page to be to have everything you need you",
    "start": "1070400",
    "end": "1077539"
  },
  {
    "text": "don't want to go back to read more pages and I go I can go for ages about this",
    "start": "1077539",
    "end": "1083660"
  },
  {
    "start": "1080000",
    "end": "1590000"
  },
  {
    "text": "you know this just the efficiency of there I think this is the most important thing but we still didn't get to the",
    "start": "1083660",
    "end": "1089360"
  },
  {
    "text": "main Port which is the mongodb databases so now we talked about netsql versus SQL",
    "start": "1089360",
    "end": "1094640"
  },
  {
    "text": "what's the difference right now what we want to discuss is the first",
    "start": "1094640",
    "end": "1101179"
  },
  {
    "text": "version of mongodb you know this is",
    "start": "1101179",
    "end": "1107059"
  },
  {
    "text": "prior to 4.2 mongodb first storage engine was called memory map version one",
    "start": "1107059",
    "end": "1113240"
  },
  {
    "text": "which is literally just a bunch of data files right and the data file right",
    "start": "1113240",
    "end": "1120919"
  },
  {
    "text": "uh the data file are stored document after one one document after",
    "start": "1120919",
    "end": "1128600"
  },
  {
    "text": "the other now I don't know if there is one data file have per collection maybe when you have a collection you'll have a",
    "start": "1128600",
    "end": "1135020"
  },
  {
    "text": "data file maybe maybe it's different but what's the the brilliant design behind the",
    "start": "1135020",
    "end": "1141559"
  },
  {
    "text": "first version was an offset based that means hey I want this document right document",
    "start": "1141559",
    "end": "1148400"
  },
  {
    "text": "this particle document with an ID so uh what what has and is a unique",
    "start": "1148400",
    "end": "1154580"
  },
  {
    "text": "identifier right if you know about that and this I your unique identifier will",
    "start": "1154580",
    "end": "1160220"
  },
  {
    "text": "tell you exactly about this document right and there's an index attached to it",
    "start": "1160220",
    "end": "1166160"
  },
  {
    "text": "right and this Index this is a B3 index a new",
    "start": "1166160",
    "end": "1171460"
  },
  {
    "text": "Traverse the B3 and X you find the IDS okay this is it's in this page it's in",
    "start": "1171460",
    "end": "1177559"
  },
  {
    "text": "this page and then you find it the pointer of this unique identifier is",
    "start": "1177559",
    "end": "1183679"
  },
  {
    "text": "something called the disk locations I think it's a 32 byte it's actually 64.",
    "start": "1183679",
    "end": "1189380"
  },
  {
    "text": "bit sorry it's a 64 bit uh pointer 3232",
    "start": "1189380",
    "end": "1194900"
  },
  {
    "text": "the 32 bits the first 32-bit to do the file name which file and the second",
    "start": "1194900",
    "end": "1200360"
  },
  {
    "text": "32-bit tells you the offset right because now you know which file but then",
    "start": "1200360",
    "end": "1205400"
  },
  {
    "text": "you the file is is one gig right where exactly is the document in this file is",
    "start": "1205400",
    "end": "1211580"
  },
  {
    "text": "the offset so with one single read you can go exactly",
    "start": "1211580",
    "end": "1217940"
  },
  {
    "text": "because how this is how the OS read right the OS would read will give you the file name says hey go exactly to",
    "start": "1217940",
    "end": "1225320"
  },
  {
    "text": "that location you can absolutely do that and the file system allow it so say read that portion and read for x amount of",
    "start": "1225320",
    "end": "1231919"
  },
  {
    "text": "bytes okay so I suppose the another property is the as the document size so",
    "start": "1231919",
    "end": "1237559"
  },
  {
    "text": "you need to store also the document size right so yeah read this part and then you're",
    "start": "1237559",
    "end": "1243740"
  },
  {
    "text": "gonna read that right and then you get a bunch of pages probably and then if",
    "start": "1243740",
    "end": "1249740"
  },
  {
    "text": "you're lucky you're gonna get one document or more right that's why the document also have a fixed size you",
    "start": "1249740",
    "end": "1255559"
  },
  {
    "text": "can't go beyond certain size because of these limitations right so now you've got it so you do one B3 scan from the ID",
    "start": "1255559",
    "end": "1264320"
  },
  {
    "text": "right to find exactly which document",
    "start": "1264320",
    "end": "1270200"
  },
  {
    "text": "to pull right again you're gonna get a bunch of bites and then the front end is responsible to",
    "start": "1270200",
    "end": "1276919"
  },
  {
    "text": "purse the bytes to actually find documents per se right and of course this was like a",
    "start": "1276919",
    "end": "1284120"
  },
  {
    "text": "relational database then gonna be columns and rows right if there was a graph you can pause it such that you",
    "start": "1284120",
    "end": "1290360"
  },
  {
    "text": "know the beginning and the end right and it's not really rocket science at the end of it so we're getting a bigger of",
    "start": "1290360",
    "end": "1297620"
  },
  {
    "text": "log in right so it's just a one IO or multiple iOS to Traverse the",
    "start": "1297620",
    "end": "1304580"
  },
  {
    "text": "nodes that's why it's important that the B3 is small enough to fit in memory such",
    "start": "1304580",
    "end": "1310760"
  },
  {
    "text": "that because a bit the index is just another data structure which is persisted on desk you read it from desk",
    "start": "1310760",
    "end": "1316880"
  },
  {
    "text": "and you put in memory hopefully it fits in memory that's why Discord actually one of one problem that Discord faced",
    "start": "1316880",
    "end": "1324620"
  },
  {
    "text": "was they moved from mongodb because their indexes were so large they couldn't even fit in memory",
    "start": "1324620",
    "end": "1331039"
  },
  {
    "text": "and if your index doesn't fit in memory that means as you Traverse right",
    "start": "1331039",
    "end": "1337340"
  },
  {
    "text": "the operating system will will do this paging and swap files and we'll swap",
    "start": "1337340",
    "end": "1342980"
  },
  {
    "text": "things to disk if it's not used right and this scanning is going to become",
    "start": "1342980",
    "end": "1348740"
  },
  {
    "text": "slower just to find the disk lock but that was the original thing the problem",
    "start": "1348740",
    "end": "1354440"
  },
  {
    "text": "the clear problem with this is anything you touch you change the document size",
    "start": "1354440",
    "end": "1359539"
  },
  {
    "text": "you updated it to a longer string the entire file is now scrambled right",
    "start": "1359539",
    "end": "1366860"
  },
  {
    "text": "because the offset you change the physical offset of the disk right I suppose you can play with",
    "start": "1366860",
    "end": "1373880"
  },
  {
    "text": "games with this but this became very very problematic right because the documents are based on offset the moment",
    "start": "1373880",
    "end": "1380360"
  },
  {
    "text": "you change the document size you push it a little bit the whole offsets are now off right that was the original design I",
    "start": "1380360",
    "end": "1387620"
  },
  {
    "text": "suppose if I'm not mistaken and my isim Isam and MySQL which is no longer used",
    "start": "1387620",
    "end": "1394400"
  },
  {
    "text": "because of the same reason yeah it's nice for read only it's beautiful right",
    "start": "1394400",
    "end": "1400220"
  },
  {
    "text": "if I'm not changing it yeah it's just very fast you know exactly what it is and you pull it but as you change it",
    "start": "1400220",
    "end": "1406880"
  },
  {
    "text": "just it becomes really a mess I suppose you can play tricks of course you can update the offsets offsets right you can",
    "start": "1406880",
    "end": "1414500"
  },
  {
    "text": "update the offsets but that was a problem uh plus uh another",
    "start": "1414500",
    "end": "1419600"
  },
  {
    "text": "problem with the m map is the Locking model right that's another thing there's a responsibility of the storage engine",
    "start": "1419600",
    "end": "1426320"
  },
  {
    "text": "really locking right how do you prevent two people from editing the same",
    "start": "1426320",
    "end": "1432039"
  },
  {
    "text": "document at the same time you shouldn't really do that right",
    "start": "1432039",
    "end": "1437419"
  },
  {
    "text": "databases no two database will allow you to update the same unit of fork if you will if it's a row",
    "start": "1437419",
    "end": "1446059"
  },
  {
    "text": "if it's a table if it's a collection right in a map",
    "start": "1446059",
    "end": "1452539"
  },
  {
    "text": "it was very strict right imagine this like",
    "start": "1452539",
    "end": "1458360"
  },
  {
    "text": "the first version of a map was even they didn't bother imagine because these are people who are",
    "start": "1458360",
    "end": "1465200"
  },
  {
    "text": "rebuilding a database from scratch so they didn't think about all this stuff that the databases people have been",
    "start": "1465200",
    "end": "1473419"
  },
  {
    "text": "doing it for years right for decades actually so the first problem they run into is like is uh oh two people can",
    "start": "1473419",
    "end": "1480320"
  },
  {
    "text": "change the same doc the different documents oh the offsets are out or a base ah you know what let's just uh",
    "start": "1480320",
    "end": "1487940"
  },
  {
    "text": "create a lock a global lock so the first version was a global lock pair database",
    "start": "1487940",
    "end": "1493159"
  },
  {
    "text": "so no two transactions can actually change",
    "start": "1493159",
    "end": "1499179"
  },
  {
    "text": "documents in different collections at all so if you have collection one collection two you can even change",
    "start": "1499179",
    "end": "1506120"
  },
  {
    "text": "collection one and collection two documents concurrently they are serialized there",
    "start": "1506120",
    "end": "1513020"
  },
  {
    "text": "is one Global lock again that was the first first version because it's a single database lock she says Hey read",
    "start": "1513020",
    "end": "1521539"
  },
  {
    "text": "these data files this tells me that the data files are actually collapse so multiple data files I mean",
    "start": "1521539",
    "end": "1530240"
  },
  {
    "text": "multiple collections can live in the same data files that's one reason you have to acquire a lock so that no two",
    "start": "1530240",
    "end": "1537440"
  },
  {
    "text": "people no two transaction can change it but then they approve this in three three in the version threes that wasn't",
    "start": "1537440",
    "end": "1543799"
  },
  {
    "text": "the version twos of mango in bonjour 2 they made it a collection level lock which is still not good right it's it's",
    "start": "1543799",
    "end": "1551440"
  },
  {
    "text": "for the for for the SQL people it's like saying a table lock imagine you have a",
    "start": "1551440",
    "end": "1557000"
  },
  {
    "text": "table of a million row and you want to insert a row in the table and then you want to update",
    "start": "1557000",
    "end": "1562880"
  },
  {
    "text": "another row in this in the same table has nothing to do with each other right imagine these are blocked yes it was",
    "start": "1562880",
    "end": "1569120"
  },
  {
    "text": "blocked and it if you're using a map this is still the case one collection",
    "start": "1569120",
    "end": "1574460"
  },
  {
    "text": "which is deprecated by the way my V1 is deprecated now one collection is a is a",
    "start": "1574460",
    "end": "1580700"
  },
  {
    "text": "per collection lock so now sure you can do a concurrent right on two different collections right without blocking but",
    "start": "1580700",
    "end": "1588500"
  },
  {
    "text": "now if you're updating the same document as a problem right so then it became",
    "start": "1588500",
    "end": "1595279"
  },
  {
    "start": "1590000",
    "end": "2280000"
  },
  {
    "text": "very challenging to manage this storage engine so what mongodb did is as you know what let's just acquire this wire",
    "start": "1595279",
    "end": "1602419"
  },
  {
    "text": "tiger storage very very popular very uh efficient storage engine so what they",
    "start": "1602419",
    "end": "1608960"
  },
  {
    "text": "did is they mongodb just just scrapped this and they bought a storage engine out of the box",
    "start": "1608960",
    "end": "1616120"
  },
  {
    "text": "this has become the what we call a wire tiger wired tiger right and the front",
    "start": "1616120",
    "end": "1622039"
  },
  {
    "text": "end didn't change so your application code doesn't change the storage engine in the back end changed right so now",
    "start": "1622039",
    "end": "1628279"
  },
  {
    "text": "this is wire tiger they gave wire tiger the ability here's the thing with wire tiger the",
    "start": "1628279",
    "end": "1636620"
  },
  {
    "text": "ability of document level locking has become popular",
    "start": "1636620",
    "end": "1642620"
  },
  {
    "text": "now you can update two documents on the same collection I'm not saying these things and you",
    "start": "1642620",
    "end": "1649400"
  },
  {
    "text": "might say it's like this is all exist I know but I'm telling you the history of things because building database is not",
    "start": "1649400",
    "end": "1655580"
  },
  {
    "text": "really a trivial thing the the brilliant Engineers went through",
    "start": "1655580",
    "end": "1660679"
  },
  {
    "text": "this and they are you know they run into a lot of challenges and this is one of them so",
    "start": "1660679",
    "end": "1667039"
  },
  {
    "text": "the wire Target and storage engine allowed you to update two different documents on",
    "start": "1667039",
    "end": "1672860"
  },
  {
    "text": "the same collection concurrently which is now a beautiful thing right now",
    "start": "1672860",
    "end": "1680000"
  },
  {
    "text": "we can and this is now made it equivalent to",
    "start": "1680000",
    "end": "1685460"
  },
  {
    "text": "basically all databases because their databases have raw level locks like at",
    "start": "1685460",
    "end": "1690679"
  },
  {
    "text": "least my second boss graph you cannot you can definitely update two rows on the same table but you cannot update the",
    "start": "1690679",
    "end": "1698299"
  },
  {
    "text": "same row on the same table right we acquire a lock and then the",
    "start": "1698299",
    "end": "1704840"
  },
  {
    "text": "second transaction try to say it up it's the same row that will basically pose the second",
    "start": "1704840",
    "end": "1711380"
  },
  {
    "text": "transaction right with raw level locking now there is like I think um what's that",
    "start": "1711380",
    "end": "1716779"
  },
  {
    "text": "database called Yoga Yoga DB if I'm not mistaken they",
    "start": "1716779",
    "end": "1722840"
  },
  {
    "text": "even introduced column level locking which is another thing like if I if I",
    "start": "1722840",
    "end": "1728000"
  },
  {
    "text": "have a row and I'm updating field one in the row but your updating field two technically",
    "start": "1728000",
    "end": "1734299"
  },
  {
    "text": "I'm not we're not changing the same thing postgres will lock you even if you're updating different thing my",
    "start": "1734299",
    "end": "1740059"
  },
  {
    "text": "sequel if I'm not mistaken they will also lock you because it's a row level lock but now",
    "start": "1740059",
    "end": "1745940"
  },
  {
    "text": "you can also include column level login which is hey if you you yeah you touched",
    "start": "1745940",
    "end": "1751520"
  },
  {
    "text": "this row but different fields from this row same thing with the document right I",
    "start": "1751520",
    "end": "1757159"
  },
  {
    "text": "am really just updating this field in the document and Json document um and someone is inserting a new field or",
    "start": "1757159",
    "end": "1763039"
  },
  {
    "text": "updating another are we locking do we really need to lock it well at the end of the day this is what we do",
    "start": "1763039",
    "end": "1770059"
  },
  {
    "text": "we lock it so yeah if you have if you happen to have two transaction updating the same row",
    "start": "1770059",
    "end": "1776960"
  },
  {
    "text": "even different columns you can't do that unless you have column level locking right or key level locking if you will",
    "start": "1776960",
    "end": "1783559"
  },
  {
    "text": "in nungo which I don't think it exists and believe me when you when you when",
    "start": "1783559",
    "end": "1789380"
  },
  {
    "text": "I'm talking about this thing this is not cheap right the moment you introduce column level locking that's another",
    "start": "1789380",
    "end": "1794659"
  },
  {
    "text": "expense because now you have to keep track of what you're locking and locks or guess what in memory and raw locks",
    "start": "1794659",
    "end": "1802159"
  },
  {
    "text": "are more expensive than page logs or table locks or collection locks because",
    "start": "1802159",
    "end": "1807320"
  },
  {
    "text": "you just need one versus if you have million and you updated a million rows",
    "start": "1807320",
    "end": "1813020"
  },
  {
    "text": "and transactions are in progress that's a million lock right imagine adding",
    "start": "1813020",
    "end": "1819260"
  },
  {
    "text": "column blocks to that so million times whatever columns you're updating",
    "start": "1819260",
    "end": "1824299"
  },
  {
    "text": "becomes really challenges and yeah database building database is not",
    "start": "1824299",
    "end": "1829640"
  },
  {
    "text": "trivial all right go back to wire tiger we talked about that right manga wire",
    "start": "1829640",
    "end": "1834740"
  },
  {
    "text": "Target introduced compression which didn't exist by the way in mmvb right it",
    "start": "1834740",
    "end": "1840500"
  },
  {
    "text": "didn't exist here wire tiger introduced compression now when you actually take the document wire tiger compresses the",
    "start": "1840500",
    "end": "1848720"
  },
  {
    "text": "Json document so that's really brilliant now you're we because especially Json",
    "start": "1848720",
    "end": "1855320"
  },
  {
    "text": "documents have these fields repeated all the time right field repeats so you need to compress it",
    "start": "1855320",
    "end": "1861380"
  },
  {
    "text": "so mongod wire Target actually compresses that so that's tiny why is it",
    "start": "1861380",
    "end": "1866539"
  },
  {
    "text": "tiny because now if I'm compressing it the page will fit more document one IO",
    "start": "1866539",
    "end": "1871820"
  },
  {
    "text": "will give me more documents than it was a one IO in uncompressed if one i o",
    "start": "1871820",
    "end": "1879440"
  },
  {
    "text": "uncompressed give me three documents one i o compressed in a single page will give me 20",
    "start": "1879440",
    "end": "1885980"
  },
  {
    "text": "documents this is really powerful because now I don't really need to go if I'm fetching",
    "start": "1885980",
    "end": "1893179"
  },
  {
    "text": "20 documents in in wire in the older models I have to do multiple iOS I have",
    "start": "1893179",
    "end": "1898580"
  },
  {
    "text": "to hit the disk multiple times versus in The Wire Target just one pulled all this stuff compressed do a",
    "start": "1898580",
    "end": "1906200"
  },
  {
    "text": "little com decompression and decline side and memory and you get a beautiful 20 document the major thing you have to",
    "start": "1906200",
    "end": "1912679"
  },
  {
    "text": "think about here how do I save iOS that is the number one job of a DBA of a",
    "start": "1912679",
    "end": "1918799"
  },
  {
    "text": "developer of a database saving iOS the list that I O the faster the database",
    "start": "1918799",
    "end": "1924799"
  },
  {
    "text": "nothing else matter that is exactly what it is",
    "start": "1924799",
    "end": "1930820"
  },
  {
    "text": "all right so now what the way water targets stored the",
    "start": "1931279",
    "end": "1936740"
  },
  {
    "text": "database is completely changed it's no longer using this this clock thing right where it's just a bunch of data file and",
    "start": "1936740",
    "end": "1942440"
  },
  {
    "text": "then you have offset because offsets are really terrible right for changing like the offset changes and you have to",
    "start": "1942440",
    "end": "1948919"
  },
  {
    "text": "update everything like what should you want documents will will screw all your offsets right",
    "start": "1948919",
    "end": "1954919"
  },
  {
    "text": "so what they did instead they started as a cluster B3 index and I",
    "start": "1954919",
    "end": "1961039"
  },
  {
    "text": "talked about this in another video because I'm not gonna go on details but in a in a nutshell right they have",
    "start": "1961039",
    "end": "1967700"
  },
  {
    "text": "something called the record ID here and you can basically create anything this is a hidden index cluster index and the",
    "start": "1967700",
    "end": "1974240"
  },
  {
    "text": "wire tiger and based on the key you can search and when",
    "start": "1974240",
    "end": "1979580"
  },
  {
    "text": "you get here the value is actually the entire document and not only a document",
    "start": "1979580",
    "end": "1985039"
  },
  {
    "text": "right but physically all the documents",
    "start": "1985039",
    "end": "1990140"
  },
  {
    "text": "right or ordered next to each other so the page that you land on here in the",
    "start": "1990140",
    "end": "1997039"
  },
  {
    "text": "leaf pages are the data is the data this is the data the entire",
    "start": "1997039",
    "end": "2004240"
  },
  {
    "text": "data is the index that's what a cluster index says it's it's it's by default what do you get for uh one MySQL not in",
    "start": "2004240",
    "end": "2011679"
  },
  {
    "text": "postgres but in MySQL everything is a cluster index every table has a cluster index and that's how your data is",
    "start": "2011679",
    "end": "2018460"
  },
  {
    "text": "organized around the index so your table is organized around this index where the",
    "start": "2018460",
    "end": "2024820"
  },
  {
    "text": "leaf pages is the data so now if you land here you get the document and guess",
    "start": "2024820",
    "end": "2029860"
  },
  {
    "text": "what because it's on the one page you get any document before it and you get any documents after it and because it's",
    "start": "2029860",
    "end": "2035500"
  },
  {
    "text": "compressed you're gonna get a lot on tight documents as well so you you read this page and you get all the documents",
    "start": "2035500",
    "end": "2042940"
  },
  {
    "text": "nearby because it's ordered not only that each Leaf page in B plus 3 is actually",
    "start": "2042940",
    "end": "2050138"
  },
  {
    "text": "linked to the next page and to the next page and to the next it's a linked list of pages so the entire data is right",
    "start": "2050139",
    "end": "2057878"
  },
  {
    "text": "here so if you find this if you want to do a range query it says find me all all record IDs between X and Y and we're",
    "start": "2057879",
    "end": "2065200"
  },
  {
    "text": "going to talk about what record I sell because this is not the ID of the document and that's the problem that so",
    "start": "2065200",
    "end": "2071919"
  },
  {
    "text": "why are tigered and Mungo introduced in a way now if we have this",
    "start": "2071919",
    "end": "2078638"
  },
  {
    "text": "you do a rick if you do a range scan you're gonna get all the documents that are next to each",
    "start": "2078639",
    "end": "2085599"
  },
  {
    "text": "other so arrange card is really powerful in B plus three especially if it's clustered because now you're gonna get",
    "start": "2085599",
    "end": "2090878"
  },
  {
    "text": "all the nice documents tucked in together right so you can find your",
    "start": "2090879",
    "end": "2097240"
  },
  {
    "text": "document using a B plus tree search in wiretarget using the record audio but",
    "start": "2097240",
    "end": "2102820"
  },
  {
    "text": "guess what what is this record ID it doesn't mean anything to the user",
    "start": "2102820",
    "end": "2108339"
  },
  {
    "text": "this is an internal thing but where where did this disc look happen this used to be called the desk",
    "start": "2108339",
    "end": "2114940"
  },
  {
    "text": "lock but they changed it and that's what they had they had this as this clock and",
    "start": "2114940",
    "end": "2119980"
  },
  {
    "text": "their indexes the ID the actual user-facing ID document index",
    "start": "2119980",
    "end": "2127300"
  },
  {
    "text": "has been mapped always to the disk clock because that's what we had right the score that's what that's exactly this",
    "start": "2127300",
    "end": "2133540"
  },
  {
    "text": "this is this this used to be this this look the rate or change it to record ID so",
    "start": "2133540",
    "end": "2140020"
  },
  {
    "text": "it's like it doesn't make sense to call it this law but then this record ID now is just a pointer to where not to disk",
    "start": "2140020",
    "end": "2147460"
  },
  {
    "text": "it is a pointer to this B plus 3 which is the hidden index so now if you're",
    "start": "2147460",
    "end": "2153040"
  },
  {
    "text": "actually searching for the ID the primary key you're doing two lockups in",
    "start": "2153040",
    "end": "2158140"
  },
  {
    "text": "wiretiger not one so actually ID lookup in wire Target were slower",
    "start": "2158140",
    "end": "2165060"
  },
  {
    "text": "than the older one because now you have to",
    "start": "2165060",
    "end": "2170140"
  },
  {
    "text": "you have to search two indexes you have to load two indexes in memory double the space double the searches wio",
    "start": "2170140",
    "end": "2177119"
  },
  {
    "text": "you have to write you have to write to the multiple indexes because you have to sync those two guys together",
    "start": "2177119",
    "end": "2184559"
  },
  {
    "text": "secondary index is not so much because the secondary indexes right if you think about really secondary indexes secondary",
    "start": "2184960",
    "end": "2192400"
  },
  {
    "text": "indexes now just point directly to the record ID so yeah in this particular",
    "start": "2192400",
    "end": "2198040"
  },
  {
    "text": "case all of these indexes always point to the record ID whether it's a primary",
    "start": "2198040",
    "end": "2203800"
  },
  {
    "text": "index or a secondary index they all point to this primary key and that",
    "start": "2203800",
    "end": "2208960"
  },
  {
    "text": "that's what's causing us the double search effectively right so very similar to my sequel not quite",
    "start": "2208960",
    "end": "2217240"
  },
  {
    "text": "because MySQL primary key is actually this thing right but the primary key in",
    "start": "2217240",
    "end": "2226420"
  },
  {
    "text": "the first version at least from 4.2 4.2 to 5.2 very recent this change by the",
    "start": "2226420",
    "end": "2232000"
  },
  {
    "text": "way right until very recently 5.2 4.2 to 5.2 is",
    "start": "2232000",
    "end": "2238060"
  },
  {
    "text": "like this or you search for ID you'd find this and then you do another search another beat research this is not a big",
    "start": "2238060",
    "end": "2244300"
  },
  {
    "text": "O of one right this is a big O of log n plus big off login to searches right",
    "start": "2244300",
    "end": "2250660"
  },
  {
    "text": "whereas this guy you do big off login and then big off one Boop so now we have this beautiful design the problems we",
    "start": "2250660",
    "end": "2257800"
  },
  {
    "text": "understood now the ID is a problem we have we have to do we have to kind of a",
    "start": "2257800",
    "end": "2263079"
  },
  {
    "text": "duplicate style right the recorder is a 64-bit same thing here but secondary indexes all point to",
    "start": "2263079",
    "end": "2270220"
  },
  {
    "text": "darker already that's the stator of art as if 5.2 right and the ID index is just another",
    "start": "2270220",
    "end": "2277119"
  },
  {
    "text": "secondary index at this point it's not really a true primary index okay because",
    "start": "2277119",
    "end": "2282460"
  },
  {
    "start": "2280000",
    "end": "2605000"
  },
  {
    "text": "the primary index by definition at least is the clustered Index right it is this",
    "start": "2282460",
    "end": "2287500"
  },
  {
    "text": "one but we have now double now let's go to the final stage where",
    "start": "2287500",
    "end": "2293940"
  },
  {
    "text": "5.3 I think is July of 2022 really very very brand new feature it's called",
    "start": "2293940",
    "end": "2300400"
  },
  {
    "text": "clustered collections where you can create a collection and you can make it",
    "start": "2300400",
    "end": "2305440"
  },
  {
    "text": "a clustered collection that means the wire tiger hidden key disappears and",
    "start": "2305440",
    "end": "2312520"
  },
  {
    "text": "instead this becomes your hidden index effectively this becomes your clustered",
    "start": "2312520",
    "end": "2318760"
  },
  {
    "text": "index and the ID field is the main focus for this now if you're searching by ID",
    "start": "2318760",
    "end": "2325800"
  },
  {
    "text": "right you will immediately search by ID do a little Bill lookup and then find",
    "start": "2325800",
    "end": "2332440"
  },
  {
    "text": "the document because the cluster document is right here all the leave Pages have we're full documents right here",
    "start": "2332440",
    "end": "2338859"
  },
  {
    "text": "pretty neat you don't really need to do these two lookups anymore if you're searching for",
    "start": "2338859",
    "end": "2344560"
  },
  {
    "text": "ID again this is not is it an option it's not you don't have to do it right",
    "start": "2344560",
    "end": "2349720"
  },
  {
    "text": "so if you still want this design for some reason I'm gonna talk about why in a",
    "start": "2349720",
    "end": "2355000"
  },
  {
    "text": "minute you can still have it but now in this guy",
    "start": "2355000",
    "end": "2360520"
  },
  {
    "text": "you can do this what's the problem with this now we talked about the good thing the good thing single search if you're",
    "start": "2360520",
    "end": "2366520"
  },
  {
    "text": "using the ID for mongodb right if you're looking up a document by its ID it's a single beautiful search",
    "start": "2366520",
    "end": "2373780"
  },
  {
    "text": "immediately finding the document based on document right and you're gonna if you're lucky you're gonna find anything",
    "start": "2373780",
    "end": "2379420"
  },
  {
    "text": "in next to it it's not just one document this is a collection of documents in a single page I gotta I gotta find out",
    "start": "2379420",
    "end": "2386680"
  },
  {
    "text": "what's the page size in wire tiger okay but this is what you get you're going to get this and it's going to be",
    "start": "2386680",
    "end": "2392560"
  },
  {
    "text": "cached in memory temporarily right so if you're lucky the next the previous ID",
    "start": "2392560",
    "end": "2398079"
  },
  {
    "text": "next to it is also you're gonna get that as well right if the sequence really",
    "start": "2398079",
    "end": "2403660"
  },
  {
    "text": "makes sense here the problem though the problem my friends is now let's go",
    "start": "2403660",
    "end": "2409780"
  },
  {
    "text": "back to secondary indexes the moment you introduce now this becomes identical to my sequel mongodb",
    "start": "2409780",
    "end": "2417579"
  },
  {
    "text": "after 5.3 if you choose to be a cluster connection it's almost identical to my sequel now became is identical to my",
    "start": "2417579",
    "end": "2424599"
  },
  {
    "text": "sequel the ID field which is the primary key is the cluster index the secondary",
    "start": "2424599",
    "end": "2430960"
  },
  {
    "text": "indexes point to what now they have to point to the ID right there",
    "start": "2430960",
    "end": "2438040"
  },
  {
    "text": "is no record that you moved where the data is right previously the second index I",
    "start": "2438040",
    "end": "2444579"
  },
  {
    "text": "should have drawn this but sorry I did not the second index is used to point to this thing the hidden which is a very",
    "start": "2444579",
    "end": "2451660"
  },
  {
    "text": "tiny value record ID 64-bit that's it you know how large is the ID field",
    "start": "2451660",
    "end": "2458560"
  },
  {
    "text": "and did I did I actually mention that it's called the object ID I actually mentioned someone highlighted it",
    "start": "2458560",
    "end": "2464079"
  },
  {
    "text": "12 bytes dude this is bites not bits this thing is a 12 byte by default and",
    "start": "2464079",
    "end": "2471760"
  },
  {
    "text": "it has like the first four bytes is the timestamp the second three bytes I don't know what this is because decided",
    "start": "2471760",
    "end": "2479380"
  },
  {
    "text": "to scale first try so they wanted their ideas to be unique across machines so",
    "start": "2479380",
    "end": "2485920"
  },
  {
    "text": "even the second four bytes is a combination between the process ID and the Machine name and well so the idea is",
    "start": "2485920",
    "end": "2494380"
  },
  {
    "text": "truly universally identified across machine so that's why it's so big 12 bytes is so large yeah so it's 12 byte",
    "start": "2494380",
    "end": "2501460"
  },
  {
    "text": "compared to 8 bytes right because 64 bit is there is 8 bytes and 12 bytes is",
    "start": "2501460",
    "end": "2508720"
  },
  {
    "text": "12 bytes right so four bytes extra you might say who cares four byte Texas but here's the thing here's the thing I",
    "start": "2508720",
    "end": "2514900"
  },
  {
    "text": "didn't know mongodb actually allowing those who who use mongodb more my my no",
    "start": "2514900",
    "end": "2523000"
  },
  {
    "text": "you can actually set anything in the ID field so it's a user controlled field",
    "start": "2523000",
    "end": "2528339"
  },
  {
    "text": "if you don't set an ID is going to generate one for you but if we do set it you can have it to be a very large",
    "start": "2528339",
    "end": "2535240"
  },
  {
    "text": "people can have crazy ID file values and guess what",
    "start": "2535240",
    "end": "2540400"
  },
  {
    "text": "the secondary indexes now has to point to the ID because that's where the data",
    "start": "2540400",
    "end": "2546400"
  },
  {
    "text": "is and that's where all the problems of MySQL arise where if the ID is a poorly",
    "start": "2546400",
    "end": "2554079"
  },
  {
    "text": "chosen value if the primary key is a poorly chosen like a gwed right again there's a lot of of course",
    "start": "2554079",
    "end": "2561760"
  },
  {
    "text": "design discussion about having a uuid as a primary key but we know it's very",
    "start": "2561760",
    "end": "2567640"
  },
  {
    "text": "large if you use it as a as a primary key then those primary keys are stored",
    "start": "2567640",
    "end": "2572859"
  },
  {
    "text": "in the secondary indexes as values and that's what blows everything up",
    "start": "2572859",
    "end": "2578020"
  },
  {
    "text": "so now the secondary is actually just blow up right and that's the basically the",
    "start": "2578020",
    "end": "2585339"
  },
  {
    "text": "evolution of mongodb you guys right as a summary we started with mm map",
    "start": "2585339",
    "end": "2591520"
  },
  {
    "text": "right move to wire tiger again a little bit of new features but introduce the new problems for sync 5.3 and 6o you can",
    "start": "2591520",
    "end": "2599260"
  },
  {
    "text": "actually do clustered indexes gonna see in the next one you hope you enjoyed this video goodbye",
    "start": "2599260",
    "end": "2606060"
  }
]