[
  {
    "start": "0",
    "end": "360000"
  },
  {
    "text": "so an abstraction is the idea of hiding implementation details hiding",
    "start": "80",
    "end": "7040"
  },
  {
    "text": "complexity hiding the nature of how things actually work behind some sort of",
    "start": "7040",
    "end": "13040"
  },
  {
    "text": "an interface behind some sort of a project behind some sort of a product a",
    "start": "13040",
    "end": "19039"
  },
  {
    "text": "component anything a language that essentially",
    "start": "19039",
    "end": "24680"
  },
  {
    "text": "simplifies the communication between you as a client as a developer as a user as",
    "start": "24680",
    "end": "31439"
  },
  {
    "text": "a user experienced user right as an engineer dealing with this thing",
    "start": "31439",
    "end": "36480"
  },
  {
    "text": "you deal with an interface instead of the actual implementation right so the naive explanation i've been",
    "start": "36480",
    "end": "44160"
  },
  {
    "text": "doing for many years in object orientation is this is not a dog this is not a cat",
    "start": "44160",
    "end": "51199"
  },
  {
    "text": "this is not a sloth this is not a snake you just deal with a pet and if you want",
    "start": "51199",
    "end": "58320"
  },
  {
    "text": "to make this pet makes some noise or you want to pet them or just play with",
    "start": "58320",
    "end": "64878"
  },
  {
    "text": "them then you don't care about how the implementation of how a dog sounds like",
    "start": "64879",
    "end": "70880"
  },
  {
    "text": "versus how a cat sounds like versus how a snake sounds like who had pets as snakes that's just a terrible",
    "start": "70880",
    "end": "77119"
  },
  {
    "text": "example right and and while sloth sounds like these are different implementations so you",
    "start": "77119",
    "end": "83040"
  },
  {
    "text": "and we've been told so many times by so many like the designers like okay always program to an interface not to an actual",
    "start": "83040",
    "end": "90240"
  },
  {
    "text": "implementation or program to and uh to high don't don't work with concrete classes",
    "start": "90240",
    "end": "96640"
  },
  {
    "text": "work with interfaces all the time right so we that's where we've been told so we're working with this pet class and",
    "start": "96640",
    "end": "104159"
  },
  {
    "text": "then it hides it abstracts away the complexity of the packing obviously this is a very",
    "start": "104159",
    "end": "111439"
  },
  {
    "text": "simple example but let's take it to an actual world where an abstraction could be the tcp stack that the transmission",
    "start": "111439",
    "end": "118799"
  },
  {
    "text": "control protocol right and then it it gives you the abstraction of an",
    "start": "118799",
    "end": "124479"
  },
  {
    "text": "of a reliable connection but there is complexity on the back end that you have no idea about and there is let's go back and a little",
    "start": "124479",
    "end": "131440"
  },
  {
    "text": "bit step further http 2 gives you the idea of multiplexing streams",
    "start": "131440",
    "end": "137360"
  },
  {
    "text": "and gives you allowing the to present multiple requests on the same beautiful tcp connection all",
    "start": "137360",
    "end": "143200"
  },
  {
    "text": "right multiplexing very beautiful idea http let's move on up sql language the actual sql syntax is",
    "start": "143200",
    "end": "151120"
  },
  {
    "text": "an abstraction if you know that you're stinking select star from employee if you just know how much",
    "start": "151120",
    "end": "157760"
  },
  {
    "text": "work the data is doing for your select star from employee you will really appreciate",
    "start": "157760",
    "end": "163519"
  },
  {
    "text": "that a beautiful abstraction it just hides so much complexity instead of going to future",
    "start": "163519",
    "end": "169040"
  },
  {
    "text": "go through a structure that is index and then search the index traverse the b3 get them tuples go back to",
    "start": "169040",
    "end": "176000"
  },
  {
    "text": "find where the pages for this tuple look like go to the actual page pull those pages",
    "start": "176000",
    "end": "182959"
  },
  {
    "text": "from the heap and then look through this there's so much stuff that is going on there okay just to",
    "start": "182959",
    "end": "189040"
  },
  {
    "text": "satisfy your so stick on languages another abstraction another abstraction is orms right people",
    "start": "189040",
    "end": "195360"
  },
  {
    "text": "love this stuff object relational mappings right i don't care about sql because i it's very hard",
    "start": "195360",
    "end": "201040"
  },
  {
    "text": "to learn i just want to deal with objects hey give me all products products.all give me all that and then",
    "start": "201040",
    "end": "208640"
  },
  {
    "text": "for each product give me the price the productive price and that's it so it abstracts away even the complexity of",
    "start": "208640",
    "end": "215280"
  },
  {
    "text": "sql language right but there's someone named joel spolsky",
    "start": "215280",
    "end": "220319"
  },
  {
    "text": "brilliant brilliant engineer that came up with a with a coined he coined the term called leaky",
    "start": "220319",
    "end": "226000"
  },
  {
    "text": "abstraction and that's the topic of today that was a long intro how about we jump",
    "start": "226000",
    "end": "231440"
  },
  {
    "text": "into it guys this is the backend engineering show with your host hussein",
    "start": "231440",
    "end": "237040"
  },
  {
    "text": "nasser and today's topic is leaky abstractions",
    "start": "237040",
    "end": "242239"
  },
  {
    "text": "and i've been running into this leaky abstraction concept in my career but i didn't know it had a name",
    "start": "242239",
    "end": "248159"
  },
  {
    "text": "and it always bugged me that when i work when i work with the",
    "start": "248159",
    "end": "254080"
  },
  {
    "text": "postgres versus sql server versus oracle versus db2 i always hated that my application",
    "start": "254080",
    "end": "261919"
  },
  {
    "text": "needed to understand the concrete implementation behind db2",
    "start": "261919",
    "end": "267919"
  },
  {
    "text": "sql syntax versus sql server sql senders versus oracle",
    "start": "267919",
    "end": "273440"
  },
  {
    "text": "uh to date oh the dates in oracle are the best aren't they uh",
    "start": "273440",
    "end": "279199"
  },
  {
    "text": "and uh yeah i always like hated that stuff and this is one example of a leaky abstraction an",
    "start": "279199",
    "end": "285440"
  },
  {
    "text": "abstraction gives you the goal of an abstraction gives you",
    "start": "285440",
    "end": "291040"
  },
  {
    "text": "the power that you don't have to ask anything about the backend implementation details",
    "start": "292400",
    "end": "299840"
  },
  {
    "text": "that's the goal of an abstraction if you started asking hey why is this",
    "start": "299840",
    "end": "308000"
  },
  {
    "text": "happening why am i getting an error why this is slow",
    "start": "308000",
    "end": "314720"
  },
  {
    "text": "right when you start asking any of these questions or more then you essentially dealing with a",
    "start": "314720",
    "end": "320960"
  },
  {
    "text": "leaky abstraction the moment you start working with something why this is bloated",
    "start": "320960",
    "end": "327520"
  },
  {
    "text": "why there's so many javascript files in css files you're you're gonna essentially why are",
    "start": "327520",
    "end": "333520"
  },
  {
    "text": "css files so large why the javascript file is so large once you start dealing into this that's part of the",
    "start": "333520",
    "end": "340160"
  },
  {
    "text": "abstraction that's essentially one one side effect of frameworks right foreign frameworks are also abstractions",
    "start": "340160",
    "end": "346800"
  },
  {
    "text": "but the moment you start leaking those abstraction details leaking those details back to you as a",
    "start": "346800",
    "end": "352960"
  },
  {
    "text": "user you have leaky abstractions leaky abstractions are really nasty all right here are some",
    "start": "352960",
    "end": "360080"
  },
  {
    "start": "360000",
    "end": "445000"
  },
  {
    "text": "examples of leaky abstractions very few that i collected from",
    "start": "360080",
    "end": "365680"
  },
  {
    "text": "joel and uh some of them are from me and them personally observed them so the sql",
    "start": "365680",
    "end": "372160"
  },
  {
    "text": "language is one abstraction right we have seen countless queries that look identical",
    "start": "372160",
    "end": "378400"
  },
  {
    "text": "you execute it on one one one database it gives you a certain performance result you move to another database you",
    "start": "378400",
    "end": "385520"
  },
  {
    "text": "execute that same exact sql you get a completely different performance",
    "start": "385520",
    "end": "390880"
  },
  {
    "text": "and as a result the abstract if you have using some sort of these uh apps that kind of hides the",
    "start": "390880",
    "end": "398479"
  },
  {
    "text": "complexity of the backend the actual language then you have introduced some leaky",
    "start": "398479",
    "end": "404960"
  },
  {
    "text": "abstraction essentially there's language itself is leaky because you cannot the moment",
    "start": "404960",
    "end": "410800"
  },
  {
    "text": "you start asking why this is slow i even forget about different dbms taking just postgres you can execute one",
    "start": "410800",
    "end": "418160"
  },
  {
    "text": "query in postgres at a given moment and wait for the transactions the transactional",
    "start": "418160",
    "end": "424160"
  },
  {
    "text": "system just to kind of settle down right itself just work itself out",
    "start": "424160",
    "end": "429599"
  },
  {
    "text": "you execute it again you get completely atrocious performance why because the way postgres have",
    "start": "429599",
    "end": "436639"
  },
  {
    "text": "the idea of did tuples and the need to vacuum and take another example with",
    "start": "436639",
    "end": "444800"
  },
  {
    "text": "mysql and they use the default use of clustering in mysql in the primary key",
    "start": "444800",
    "end": "452639"
  },
  {
    "start": "445000",
    "end": "563000"
  },
  {
    "text": "if you used the wrong data type and as your primary key in my sequel",
    "start": "452639",
    "end": "459599"
  },
  {
    "text": "especially something random like grids or uuids",
    "start": "459599",
    "end": "464639"
  },
  {
    "text": "inserts might look great in the beginning but as they",
    "start": "464639",
    "end": "469919"
  },
  {
    "text": "progress inserts will be atrociously slow so that's the same answer didn't",
    "start": "469919",
    "end": "476400"
  },
  {
    "text": "change all of a sudden it is slow why because of the clustering needs of the grids will basically are random or the",
    "start": "476400",
    "end": "483680"
  },
  {
    "text": "uid are random so you don't know where which page what you're going to fetch to insert that",
    "start": "483680",
    "end": "489360"
  },
  {
    "text": "guide into that page especially in a cluster environment right it's not like your inserting always",
    "start": "489360",
    "end": "494400"
  },
  {
    "text": "append nicely in the end clustering forces you to order up an insert and the whole tuples",
    "start": "494400",
    "end": "501440"
  },
  {
    "text": "the whole rows should be ordered based on that right the idea of having clustering",
    "start": "501440",
    "end": "507599"
  },
  {
    "text": "together so it has to be clustered nice together that's not a big problem if it's sequential but",
    "start": "507599",
    "end": "513279"
  },
  {
    "text": "as you go random you're pushing different pages from the desk the buffer",
    "start": "513279",
    "end": "520399"
  },
  {
    "text": "the buffer pool will get filled very quickly and then every query every insert",
    "start": "520399",
    "end": "526720"
  },
  {
    "text": "will eventually not use the power for pro because everything that is in the buffer pool is",
    "start": "526720",
    "end": "532959"
  },
  {
    "text": "essentially useless it's not gonna unless you're lucky you're not gonna hit that same",
    "start": "532959",
    "end": "538320"
  },
  {
    "text": "nice page that you're always inserting to right so that kind of leaky abstraction as",
    "start": "538320",
    "end": "545440"
  },
  {
    "text": "well so sql language is leaky because you always gonna ask yourself",
    "start": "545440",
    "end": "550480"
  },
  {
    "text": "why this is slow why this is giving me an error why this is behaving this way why this",
    "start": "550480",
    "end": "557120"
  },
  {
    "text": "is uh why this is even succeeding this is supposed to be error things like that",
    "start": "557120",
    "end": "563120"
  },
  {
    "start": "563000",
    "end": "690000"
  },
  {
    "text": "so speaking of things that fail that's supposed to succeed another leaky abstraction is axios which is a",
    "start": "563120",
    "end": "569440"
  },
  {
    "text": "library that allows you to make http requests and you make an http request and the",
    "start": "569440",
    "end": "574880"
  },
  {
    "text": "server returns a 404 a lot of client libraries treat that as an error",
    "start": "574880",
    "end": "580959"
  },
  {
    "text": "but guess what at the back end that's not an error that's an actual status quo says hey i",
    "start": "580959",
    "end": "587120"
  },
  {
    "text": "could not find this i did not fail right but",
    "start": "587120",
    "end": "592160"
  },
  {
    "text": "i just written a 404. yeah i you ask for something that just doesn't exist it's not an error you can it's a",
    "start": "592160",
    "end": "598720"
  },
  {
    "text": "philosophical question you can disagree with that but technically on the back end to us back in engineers that's not an error",
    "start": "598720",
    "end": "605040"
  },
  {
    "text": "that's a legitimate thing that you asked for and i couldn't find technically i blame",
    "start": "605040",
    "end": "611360"
  },
  {
    "text": "you it's a requester or if you think about it right that's why i start for 400. request a client error starts for 400 i believe",
    "start": "611360",
    "end": "618399"
  },
  {
    "text": "that's that's the standard but 500 errors that's",
    "start": "618399",
    "end": "623680"
  },
  {
    "text": "a server error right so axios essentially treats four all fours as errors",
    "start": "623680",
    "end": "630320"
  },
  {
    "text": "if you so if you have used fetch which is the native browser library",
    "start": "630320",
    "end": "637519"
  },
  {
    "text": "that doesn't return an error right but if you use axios all of a sudden that throws in",
    "start": "637519",
    "end": "642800"
  },
  {
    "text": "a javascript exception and people don't like that well some people don't care but some people say hey",
    "start": "642800",
    "end": "649600"
  },
  {
    "text": "why is this throwing an error now once you start asking why something is the way it is then the",
    "start": "649600",
    "end": "656399"
  },
  {
    "text": "abstraction is leaky because you started asking why because you want to know the details and then once you start",
    "start": "656399",
    "end": "662399"
  },
  {
    "text": "knowing the details you just dive deep into the abstraction and when you dive deep into the abstraction implementation details",
    "start": "662399",
    "end": "670880"
  },
  {
    "text": "you might as well just write it yourself huh that's why i'll leave my opinion about",
    "start": "670880",
    "end": "676640"
  },
  {
    "text": "this at the end but i'm going to give you more more examples let's just let's just jump on another example so we talked about sql language",
    "start": "676640",
    "end": "682800"
  },
  {
    "text": "uh we talked about the axios orms which sits on tops of sql technically right",
    "start": "682800",
    "end": "689440"
  },
  {
    "text": "object relational mapping there is a very infamous problem in orms that's called the n plus",
    "start": "689440",
    "end": "696640"
  },
  {
    "start": "690000",
    "end": "810000"
  },
  {
    "text": "one problem graphql is infamous for that if you used orms",
    "start": "696640",
    "end": "702079"
  },
  {
    "text": "on the back and i never deployed graphql server i believe you have to use some sort of object relational mapping i",
    "start": "702079",
    "end": "708480"
  },
  {
    "text": "might be wrong there alone no but if you do then you get the n plus one problem and",
    "start": "708480",
    "end": "715519"
  },
  {
    "text": "n plus one problem is is essentially a leaky as",
    "start": "715519",
    "end": "720959"
  },
  {
    "text": "is the canonical example of leaky abstractions where where you can",
    "start": "720959",
    "end": "727680"
  },
  {
    "text": "easily solve this with a single query that the idea of abstracting the sql",
    "start": "727680",
    "end": "735120"
  },
  {
    "text": "language to object such as hey products dot get all then",
    "start": "735120",
    "end": "743600"
  },
  {
    "text": "for uh products then get price right that translates to",
    "start": "743600",
    "end": "750160"
  },
  {
    "text": "select star from products give you all the products and then you get price will translate to",
    "start": "750160",
    "end": "758160"
  },
  {
    "text": "oh give me the uh select it will translate to give me the",
    "start": "758160",
    "end": "763279"
  },
  {
    "text": "price of each product and that what that will do essentially because that's that the default implementation of orms",
    "start": "763279",
    "end": "770959"
  },
  {
    "text": "is it will turn around and execute a query for each product to get the price right because that sits in another table",
    "start": "770959",
    "end": "779040"
  },
  {
    "text": "and that will translate to many many many many queries right so a single statement",
    "start": "779040",
    "end": "786720"
  },
  {
    "text": "in your programming language will translate to thousands of quiz and you're going to start asking a question",
    "start": "786720",
    "end": "791760"
  },
  {
    "text": "why this is slow why my graphql is slow well because it's leaky",
    "start": "791760",
    "end": "798560"
  },
  {
    "text": "everything that is abstracted away if it's complex like graphql is going to",
    "start": "798560",
    "end": "804880"
  },
  {
    "text": "leak eventually and when you leak you start asking this question next thing you're on youtube",
    "start": "804880",
    "end": "810639"
  },
  {
    "start": "810000",
    "end": "930000"
  },
  {
    "text": "trying to understand why why why your graphql is slow why are your arms why are your djangos low",
    "start": "810639",
    "end": "816560"
  },
  {
    "text": "that's one reason because you don't understand what is it doing so i always cry on this channel",
    "start": "816560",
    "end": "823680"
  },
  {
    "text": "guys assume every abstraction is leaky when you're dealing with it",
    "start": "823680",
    "end": "829440"
  },
  {
    "text": "again i'm talking about myself here assume everything is leaky and understand what",
    "start": "829440",
    "end": "835279"
  },
  {
    "text": "you use understand what this thing is doing when you do you're gonna first of all",
    "start": "835279",
    "end": "842160"
  },
  {
    "text": "appreciate the work behind the open source maintainer the people who built that library that you use that",
    "start": "842160",
    "end": "848399"
  },
  {
    "text": "abstraction that protocol that standard and then finally you'll become a better",
    "start": "848399",
    "end": "853920"
  },
  {
    "text": "software engineer because hey you know how things work you can work around it you will build better",
    "start": "853920",
    "end": "861760"
  },
  {
    "text": "application because of this right it's like even one single query",
    "start": "861760",
    "end": "867680"
  },
  {
    "text": "could be rewritten in a single way in a certain way in postgres that gives you completely",
    "start": "867680",
    "end": "873440"
  },
  {
    "text": "the same result but completely different performance why because you understand how it works and you might argue with this you're",
    "start": "873440",
    "end": "879519"
  },
  {
    "text": "saying that's not my job well i i have to agree with you at a certain",
    "start": "879519",
    "end": "884959"
  },
  {
    "text": "time you can't understand everything like i drive the car every day i have no idea",
    "start": "884959",
    "end": "890079"
  },
  {
    "text": "how it works right i know it's like there's some compulsion that just",
    "start": "890079",
    "end": "895680"
  },
  {
    "text": "flames and just does magic i don't know how it works yeah you can laugh at me i don't know",
    "start": "895680",
    "end": "900959"
  },
  {
    "text": "how a car works right but airplane i don't know how it works i just",
    "start": "900959",
    "end": "906480"
  },
  {
    "text": "i travel i hate traveling but i travel on airplanes i don't know how it works but if it's my job if i'm interfacing with",
    "start": "906480",
    "end": "913279"
  },
  {
    "text": "this thing directly if i'm backing engineer i'm sorry i have to understand it i don't claim to",
    "start": "913279",
    "end": "919279"
  },
  {
    "text": "understand everything i try right but if i deal with nginx i gotta understand how nginx works",
    "start": "919279",
    "end": "925360"
  },
  {
    "text": "how threading works in nginx how threading works in envoy because you can use these things",
    "start": "925360",
    "end": "930560"
  },
  {
    "start": "930000",
    "end": "1170000"
  },
  {
    "text": "blindly but that will give that only gives you so far okay",
    "start": "930560",
    "end": "936320"
  },
  {
    "text": "another example tcp tcp that's the example joel gibbs did i talk about",
    "start": "936320",
    "end": "942800"
  },
  {
    "text": "joel i have joe's basically a genius brilliant software engineer been in",
    "start": "942800",
    "end": "949040"
  },
  {
    "text": "microsoft for a long time i've been the ceo of the stack overflow",
    "start": "949040",
    "end": "954320"
  },
  {
    "text": "right and he writes good books he has this i nice ideas of leak abstraction",
    "start": "954320",
    "end": "959680"
  },
  {
    "text": "and the painter problem that i forgot was called uh very very interesting sites his blog",
    "start": "959680",
    "end": "965920"
  },
  {
    "text": "is very nice i like listening and listening and watching and reading his work so tcp",
    "start": "965920",
    "end": "972079"
  },
  {
    "text": "is an example the reliability of the transmission secure protocol",
    "start": "972079",
    "end": "978480"
  },
  {
    "text": "transmission control protocol that is given to the user in this case the user is",
    "start": "978480",
    "end": "984560"
  },
  {
    "text": "think about the http client in this case right or even if you building a game that using directly tcp",
    "start": "984560",
    "end": "990880"
  },
  {
    "text": "you are the user you are given a promise that this is an abs uh a reliable",
    "start": "990880",
    "end": "997040"
  },
  {
    "text": "connection you give me a message i'll send your message directly",
    "start": "997040",
    "end": "1002399"
  },
  {
    "text": "and i'll guarantee you our eyes why why are things not guaranteed by default",
    "start": "1002399",
    "end": "1007519"
  },
  {
    "text": "internet of course not the ip protocols move layer three because dcv is layer four move a",
    "start": "1007519",
    "end": "1014079"
  },
  {
    "text": "little bit down layer three it's just a blind best effort guarantee",
    "start": "1014079",
    "end": "1020079"
  },
  {
    "text": "right but it's not even i don't think it's the best ever i p packets literally just have",
    "start": "1020079",
    "end": "1025678"
  },
  {
    "text": "destination ip source ip it doesn't have ports or anything it's like hey i'm gonna deliver",
    "start": "1025679",
    "end": "1031360"
  },
  {
    "text": "this packet to this machine and then the higher layers will take care of other stuff like ports",
    "start": "1031360",
    "end": "1038720"
  },
  {
    "text": "and stuff right if if there are ports sometimes like there are no ports icmp for example there are no ports",
    "start": "1038720",
    "end": "1044880"
  },
  {
    "text": "so there this is not guaranteed tcp builds guarantees on top of that cut and go guarantees by",
    "start": "1044880",
    "end": "1052799"
  },
  {
    "text": "having the re-transmission by having a flow control",
    "start": "1052799",
    "end": "1060880"
  },
  {
    "text": "by building sequences making tcp stateful essentially storing",
    "start": "1060880",
    "end": "1068320"
  },
  {
    "text": "physically storing in memory values that correspond to the actual",
    "start": "1068320",
    "end": "1074640"
  },
  {
    "text": "sequence message there's sequences left and right this will be stateful the all this work and use in the message",
    "start": "1074640",
    "end": "1082720"
  },
  {
    "text": "using one message and then using another message and the third message they look all identical the third message takes text",
    "start": "1082720",
    "end": "1089120"
  },
  {
    "text": "400 milliseconds or the first two takes two milliseconds why why",
    "start": "1089120",
    "end": "1096400"
  },
  {
    "text": "you asked why that's a leaky abstraction the moment you start asking why the moment you start seeing",
    "start": "1096400",
    "end": "1104000"
  },
  {
    "text": "asking worrying about how how our abstraction like tcp works",
    "start": "1104000",
    "end": "1110880"
  },
  {
    "text": "it just leaked you information when you leak you got dive into an implementation so my points are always understand it",
    "start": "1110880",
    "end": "1118400"
  },
  {
    "text": "assume every abstraction is leaky that's understanding the only abstraction that it i didn't have",
    "start": "1118400",
    "end": "1124640"
  },
  {
    "text": "to really worry about is hashing really hashing is always big o of one to me and and literally is just a",
    "start": "1124640",
    "end": "1132240"
  },
  {
    "text": "black box i know how a works theoretically but i never needed to understand the",
    "start": "1132240",
    "end": "1138240"
  },
  {
    "text": "actual implementation it just always consistently work it never leaks unless you might have run into an",
    "start": "1138240",
    "end": "1144480"
  },
  {
    "text": "example where hashing something actually leaked",
    "start": "1144480",
    "end": "1150160"
  },
  {
    "text": "some abstraction details when you have you ever asked your question oh why did i when i generate a grid which",
    "start": "1150160",
    "end": "1157039"
  },
  {
    "text": "is the good generated why is it slower than this time if you start asking this question then you just",
    "start": "1157039",
    "end": "1162720"
  },
  {
    "text": "leaked the abstraction got leaked in this case uh let's give an example are you sick of",
    "start": "1162720",
    "end": "1168240"
  },
  {
    "text": "examples no i don't think you are and this one is that i personally coined",
    "start": "1168240",
    "end": "1174080"
  },
  {
    "start": "1170000",
    "end": "1620000"
  },
  {
    "text": "and so it might be wrong well this is not the first time i would be wrong so what the hell let's do",
    "start": "1174080",
    "end": "1180480"
  },
  {
    "text": "it hdv2 is also a big huge abstraction leaker",
    "start": "1180480",
    "end": "1188960"
  },
  {
    "text": "hdb2 is a leaker it leaks we're gonna bring a bucket and a map for these leaky abstractions man",
    "start": "1188960",
    "end": "1197280"
  },
  {
    "text": "so hdb2 leaks too how we're saying how well leaked by two methods",
    "start": "1198799",
    "end": "1206080"
  },
  {
    "text": "the problem when you send massive requests and",
    "start": "1206080",
    "end": "1213120"
  },
  {
    "text": "later requests get blocked and not received by the back end",
    "start": "1213120",
    "end": "1220080"
  },
  {
    "text": "because earlier requests have not completed yet because",
    "start": "1220080",
    "end": "1226640"
  },
  {
    "text": "a stinking packet or segment in this case because tcp have not",
    "start": "1226640",
    "end": "1234159"
  },
  {
    "text": "reached its destination and when we don't reach that the tcp stack so you can blame tcp for",
    "start": "1234159",
    "end": "1241919"
  },
  {
    "text": "that one if you think if you view it like that the tcp stack will block all sequences below that number",
    "start": "1241919",
    "end": "1249280"
  },
  {
    "text": "until that particular sequence that belongs to that logical request is arrived successfully and then it will unblock",
    "start": "1249280",
    "end": "1255919"
  },
  {
    "text": "and you can essentially send deliver all these packets to you all of a sudden",
    "start": "1255919",
    "end": "1261760"
  },
  {
    "text": "then the application layer 7 will assemble these 100 segments into 70",
    "start": "1261760",
    "end": "1269440"
  },
  {
    "text": "streams right whatever that's a lot of streams seven streams maybe and then",
    "start": "1269440",
    "end": "1275200"
  },
  {
    "text": "these streams will be delivered to the application and then you you'll see the require different requests so that's ahead of line blocking the tcp head of",
    "start": "1275200",
    "end": "1281440"
  },
  {
    "text": "line bro blocking blah blah blah blah can't talk anymore",
    "start": "1281440",
    "end": "1286880"
  },
  {
    "text": "uh quick solve that by using udp because tcp is a leaky abstraction we don't like",
    "start": "1286880",
    "end": "1293280"
  },
  {
    "text": "this head of limb broken let's take care of our own",
    "start": "1293280",
    "end": "1299600"
  },
  {
    "text": "flow control our own delivery transmission at the at the layer 4 which which we",
    "start": "1299600",
    "end": "1307280"
  },
  {
    "text": "have more control over i don't want you to blindly do that so this is a very good example quick",
    "start": "1307280",
    "end": "1313440"
  },
  {
    "text": "is a great example where we got a leaky abstraction we understand why things are",
    "start": "1313440",
    "end": "1318480"
  },
  {
    "text": "slow but we want to do something else so we broke the abstraction",
    "start": "1318480",
    "end": "1323600"
  },
  {
    "text": "and we re-abstracted away as as a quick i'm pretty sure down the line we're going to run into quick's on problem",
    "start": "1323600",
    "end": "1330559"
  },
  {
    "text": "quick is not finalized yet people are still working smart people are working on on finals",
    "start": "1330559",
    "end": "1335760"
  },
  {
    "text": "and quick yeah so let's go back to http 2b2 another leaky apps like http 2 is",
    "start": "1335760",
    "end": "1342799"
  },
  {
    "text": "because something i just mentioned right all these tcp segments coming to the application all of a sudden",
    "start": "1342799",
    "end": "1347919"
  },
  {
    "text": "that doesn't mean anything to the client these are just packets these are not requests in hdb1",
    "start": "1347919",
    "end": "1355760"
  },
  {
    "text": "you get a beautiful tcp segment or packet this is one to one almost one to one",
    "start": "1355760",
    "end": "1364000"
  },
  {
    "text": "a collection of packets content right the tcp content becomes the",
    "start": "1364000",
    "end": "1369280"
  },
  {
    "text": "application data immediately there are no other funky stuff going on",
    "start": "1369280",
    "end": "1374320"
  },
  {
    "text": "so that's very one-to-one almost you get the data immediately you deliver to the application that's a",
    "start": "1374320",
    "end": "1379679"
  },
  {
    "text": "request well you you find where the end of the request is by this hacky string manipulation that http does like okay",
    "start": "1379679",
    "end": "1386720"
  },
  {
    "text": "this is the start of the request get slash http 1 and then this is the end the end is like what is a flash n",
    "start": "1386720",
    "end": "1392240"
  },
  {
    "text": "slash r that's the end of the line uh that's the end of the request yeah but that's that's pretty much it",
    "start": "1392240",
    "end": "1398400"
  },
  {
    "text": "initially too",
    "start": "1398400",
    "end": "1401280"
  },
  {
    "text": "that's not what we're doing that should be doing so we do have this idea of streams so we have technically the tcp segment",
    "start": "1404320",
    "end": "1411039"
  },
  {
    "text": "that we sent contains our http content contains your get request but guess what",
    "start": "1411039",
    "end": "1416559"
  },
  {
    "text": "the http 2 client adds headers ads",
    "start": "1416559",
    "end": "1423600"
  },
  {
    "text": "stream information ads magic streams",
    "start": "1423600",
    "end": "1428840"
  },
  {
    "text": "ads and what is it called h-pac compression it adds",
    "start": "1428840",
    "end": "1434640"
  },
  {
    "text": "all this stuff that you have no idea that exists it is an abstraction but it's a leaky one",
    "start": "1434640",
    "end": "1443039"
  },
  {
    "text": "you might say hussein how well all of a sudden lucidchart actually ran into this",
    "start": "1443039",
    "end": "1450240"
  },
  {
    "text": "they said hey http2 fantastic let's turn off https they turned hdb2 all the way on all their backend",
    "start": "1450240",
    "end": "1456960"
  },
  {
    "text": "servers what happened cpu percentage usage 100 all of their servers like what the",
    "start": "1456960",
    "end": "1464880"
  },
  {
    "text": "heck happened we literally didn't change anything well you actually did you changed a major protocol technically",
    "start": "1464880",
    "end": "1472400"
  },
  {
    "text": "the client is not is not even a braking change well it depends",
    "start": "1472400",
    "end": "1479600"
  },
  {
    "text": "i'm going to take that back is that it's a braking change in the lower level but the application didn't",
    "start": "1479600",
    "end": "1485279"
  },
  {
    "text": "you when you say when you make an axios or a fetch request you don't really care if it's hdb2 or dv1",
    "start": "1485279",
    "end": "1492320"
  },
  {
    "text": "so from that point that's not a breaking change",
    "start": "1492320",
    "end": "1497519"
  },
  {
    "text": "but the client need to understand how to",
    "start": "1498840",
    "end": "1504400"
  },
  {
    "text": "speak hdb2 and you have been if you're a web developer you have been blessed by this",
    "start": "1504400",
    "end": "1510240"
  },
  {
    "text": "thing that's called a browser that is basically is the biggest client library to you",
    "start": "1510240",
    "end": "1515760"
  },
  {
    "text": "and it basically take care of this complex abstraction so http 2 is",
    "start": "1515760",
    "end": "1522000"
  },
  {
    "text": "cpu hungry quick is cpu hungry why because we we get",
    "start": "1522000",
    "end": "1528559"
  },
  {
    "text": "these packets delivered to the application instead of prior to that stuff in hdb11 we just",
    "start": "1528559",
    "end": "1535440"
  },
  {
    "text": "use it we just straight up use that content but now we have to do",
    "start": "1535440",
    "end": "1542559"
  },
  {
    "text": "more work we have to parse these packets to find the stream id to find all these",
    "start": "1542559",
    "end": "1550480"
  },
  {
    "text": "other header information that http 2 has and then wait for more packets to arrive oh this",
    "start": "1550480",
    "end": "1557760"
  },
  {
    "text": "seven packets is actually stream one so go here this is request number one all these other packets are",
    "start": "1557760",
    "end": "1564799"
  },
  {
    "text": "stream three so this is okay go stream three so you have to wait for packets to arrive to",
    "start": "1564799",
    "end": "1570640"
  },
  {
    "text": "and parse them so there is an additional cpu overhead over there and there is",
    "start": "1570640",
    "end": "1577200"
  },
  {
    "text": "obviously the edge back compression decompression all the header compression there is the body compression",
    "start": "1577200",
    "end": "1583120"
  },
  {
    "text": "stuff like this so there's work there's work and then the work of hdb2 uh",
    "start": "1583120",
    "end": "1590080"
  },
  {
    "text": "makes the cpu essentially hungrier and the cpu becomes hungry and busier",
    "start": "1590080",
    "end": "1597440"
  },
  {
    "text": "you feel it and all of a sudden your performance becomes atrocious as a result i'm am i saying http 2 is bad no it",
    "start": "1597440",
    "end": "1603840"
  },
  {
    "text": "really depends on your use case right http 2 and quick became better",
    "start": "1603840",
    "end": "1609200"
  },
  {
    "text": "at managing this cpu usage so we're better at that but still it's a leaky abstraction",
    "start": "1609200",
    "end": "1617200"
  },
  {
    "text": "and a final leaky abstraction example is",
    "start": "1617200",
    "end": "1621519"
  },
  {
    "start": "1620000",
    "end": "1720000"
  },
  {
    "text": "your api that you built you back in api uh microservices let's take an example",
    "start": "1623039",
    "end": "1630000"
  },
  {
    "text": "microservices like this is the leakiest abstraction of all my god",
    "start": "1630000",
    "end": "1635760"
  },
  {
    "text": "people jumping in the stream that like there's no tomorrow so when you make a call to a service in",
    "start": "1635760",
    "end": "1642240"
  },
  {
    "text": "a microservice you think hey i'm just asking for the",
    "start": "1642240",
    "end": "1648480"
  },
  {
    "text": "price of this product but no the price of the product",
    "start": "1648480",
    "end": "1653840"
  },
  {
    "text": "is asking service a for the product info and service a is asking three services",
    "start": "1653840",
    "end": "1661600"
  },
  {
    "text": "for or is the average price what is the best seller price what was the price like",
    "start": "1661600",
    "end": "1667200"
  },
  {
    "text": "100 100 days ago and then these query their databases and get results",
    "start": "1667200",
    "end": "1673360"
  },
  {
    "text": "and sometimes it's old so queries another service for the actual uh backup price information so you one",
    "start": "1673360",
    "end": "1680960"
  },
  {
    "text": "request end up to be 100 requests at the end of the day easily this happened right that's a",
    "start": "1680960",
    "end": "1686399"
  },
  {
    "text": "microservice even you a click of a button that abstracts away in the user",
    "start": "1686399",
    "end": "1692240"
  },
  {
    "text": "experience that does something you end up sending 700 http requests for some reason",
    "start": "1692240",
    "end": "1698080"
  },
  {
    "text": "that's another leaky abstraction you abstracted away that this is just a click of a button but now",
    "start": "1698080",
    "end": "1704080"
  },
  {
    "text": "you're making me ask questions the moment i ask questions i need to know the details you you have to explain",
    "start": "1704080",
    "end": "1710000"
  },
  {
    "text": "the details for me like oh why is this this way okay if you want to understand i'm going to explain it to you okay",
    "start": "1710000",
    "end": "1717120"
  },
  {
    "text": "postgres why is this uh it says index only scan it's supposed to be a lot of people ask",
    "start": "1717120",
    "end": "1722720"
  },
  {
    "start": "1720000",
    "end": "2015000"
  },
  {
    "text": "me this question right in my introduction to the database engineering plug time",
    "start": "1722720",
    "end": "1727840"
  },
  {
    "text": "introduction to database engineering by the way is my udemy course very popular bestseller i talk about",
    "start": "1727840",
    "end": "1734320"
  },
  {
    "text": "database engineering there so check it out courses uh over 14",
    "start": "1734320",
    "end": "1741200"
  },
  {
    "text": "hours worth of content i talk about fundamentals the fundamentals of business",
    "start": "1741200",
    "end": "1746960"
  },
  {
    "text": "because you're gonna be mental if you don't have fun right but that is fun in it the",
    "start": "1746960",
    "end": "1753120"
  },
  {
    "text": "fundamentals of business the fundamentals of business",
    "start": "1753120",
    "end": "1758399"
  },
  {
    "text": "mental is a part of the word i have underlined it because your mental if you don't have a",
    "start": "1758399",
    "end": "1763919"
  },
  {
    "text": "good time you have to enjoy it well the the fun isn't it",
    "start": "1763919",
    "end": "1770240"
  },
  {
    "text": "oh right get out i know yes so yeah so a lot of people ask me",
    "start": "1770799",
    "end": "1776159"
  },
  {
    "text": "this question what was this lecture that i put there i talked about index scan and postgres",
    "start": "1776159",
    "end": "1781760"
  },
  {
    "text": "versus index only scan but the mistake i made in this video was the index only scan was actually slower",
    "start": "1781760",
    "end": "1789039"
  },
  {
    "text": "than index scan which is kind of contradictory to the point of the lecture i made and people called me",
    "start": "1789039",
    "end": "1794320"
  },
  {
    "text": "out and said that you said index only scan is faster but it's you showing that it's slow i mean",
    "start": "1794320",
    "end": "1799600"
  },
  {
    "text": "when i showed it the whole thing i'm showing is all moot because it's it's a it's a toy data set and when it's",
    "start": "1799600",
    "end": "1806640"
  },
  {
    "text": "a toy that i said it's just like 5 millisecond versus 10 milliseconds who cares right",
    "start": "1806640",
    "end": "1812799"
  },
  {
    "text": "but the concept still applies but the leaky abstractions here is you guys",
    "start": "1812799",
    "end": "1819200"
  },
  {
    "text": "the students ask these questions like why is index only scan slower",
    "start": "1819200",
    "end": "1824480"
  },
  {
    "text": "than index cam and there was a good point why index only scan again this is",
    "start": "1824480",
    "end": "1830880"
  },
  {
    "text": "another abstraction where hey i'm gonna only use the index so i'm gonna give you a faster performance",
    "start": "1830880",
    "end": "1836000"
  },
  {
    "text": "but you did not give me pass that performance you give me slower so now i started digging up okay why is",
    "start": "1836000",
    "end": "1843360"
  },
  {
    "text": "indexing only scanning slower in this case and then it took me a few seconds like okay that's why so when i did",
    "start": "1843360",
    "end": "1851039"
  },
  {
    "text": "explain analyze on my query there was uh",
    "start": "1851039",
    "end": "1857440"
  },
  {
    "text": "there was a note from postgres supposed to say yo do what up man",
    "start": "1857440",
    "end": "1863519"
  },
  {
    "text": "uh yeah i understand your home or you want to query this table but the staples actually been edited",
    "start": "1863519",
    "end": "1871760"
  },
  {
    "text": "and my visibility map says that the pages you're looking for invisible",
    "start": "1871760",
    "end": "1879120"
  },
  {
    "text": "that's that's exactly what postcards told me so they aim visible so i had i couldn't",
    "start": "1879120",
    "end": "1887360"
  },
  {
    "text": "look up i couldn't i i couldn't assume they are visible so i had to go to the",
    "start": "1887360",
    "end": "1892559"
  },
  {
    "text": "heap to check if the tuples that you're asking for are are actually visible say yeah i promise",
    "start": "1892559",
    "end": "1898640"
  },
  {
    "text": "you an index only scan which by definition that is that means don't go to the heap",
    "start": "1898640",
    "end": "1904559"
  },
  {
    "text": "and don't don't touch the heap this expensive nasty heap right don't go there",
    "start": "1904559",
    "end": "1911360"
  },
  {
    "text": "but i had to go homie because i'm sorry your your pages have been",
    "start": "1911360",
    "end": "1917440"
  },
  {
    "text": "edited someone had been touching this stuff and it was me i was the one editing it",
    "start": "1917440",
    "end": "1922559"
  },
  {
    "text": "of course and you edited that stuff this this thing that's called vm which is the visibility map it's basically a a",
    "start": "1922559",
    "end": "1929200"
  },
  {
    "text": "glorified bloom filter in postgres that gives you the",
    "start": "1929200",
    "end": "1936880"
  },
  {
    "text": "the it gives you hey it says all the rows in this page that you're about to",
    "start": "1936880",
    "end": "1942799"
  },
  {
    "text": "query are visible so you don't have to check if that if the transaction actually",
    "start": "1942799",
    "end": "1948799"
  },
  {
    "text": "can't see this this is mvc series on the multi-version concurrency controller i'd say hey i don't want gold to check that",
    "start": "1948799",
    "end": "1955200"
  },
  {
    "text": "this is let's assume they are good and then just just return them to the",
    "start": "1955200",
    "end": "1960880"
  },
  {
    "text": "user right instead because they are not visible because",
    "start": "1960880",
    "end": "1966640"
  },
  {
    "text": "i've been editing them actually i'd never edited them they are freshly inserted all i had to",
    "start": "1966640",
    "end": "1972080"
  },
  {
    "text": "do was run vacuum if i run vacuum vacuum will go through all the pages",
    "start": "1972080",
    "end": "1977840"
  },
  {
    "text": "that are invisible physically go to the rows say okay are there any transactions that are",
    "start": "1977840",
    "end": "1982880"
  },
  {
    "text": "still using those old rows can i mark these rows are fully visible to all",
    "start": "1982880",
    "end": "1990159"
  },
  {
    "text": "transactions this is a very critical concept in in mysql and all databases and postgres",
    "start": "1990159",
    "end": "1995840"
  },
  {
    "text": "so that when you mark that page as all visible the query planner will not require",
    "start": "1995840",
    "end": "2003120"
  },
  {
    "text": "to hit the heap to check if a row is visible does that make sense so that's another leaky abstraction index only scans",
    "start": "2003120",
    "end": "2009360"
  },
  {
    "text": "how many abstractions did i give you now so many git is another example get",
    "start": "2009360",
    "end": "2014559"
  },
  {
    "text": "interface a lot of people say hey there's a thing there's a beautiful um xd xdc",
    "start": "2014559",
    "end": "2022799"
  },
  {
    "start": "2015000",
    "end": "2090000"
  },
  {
    "text": "uh comic uh that that explains this like hey use gets",
    "start": "2022799",
    "end": "2028320"
  },
  {
    "text": "it's like it manages your source controls and all that stuff like it gives you history and you can push",
    "start": "2028320",
    "end": "2033919"
  },
  {
    "text": "comments and you can go back and reverse and roll back all this stuff oh yeah how do i use it i",
    "start": "2033919",
    "end": "2039600"
  },
  {
    "text": "don't know just use this command line and whenever things go wrong just back up your directory",
    "start": "2039600",
    "end": "2045360"
  },
  {
    "text": "just restore it back because git is the leakiest abstraction git interface and",
    "start": "2045360",
    "end": "2051599"
  },
  {
    "text": "it's a brilliant protocol behind it don't doubt me not genius design right but it's",
    "start": "2051599",
    "end": "2058480"
  },
  {
    "text": "leaky as f man it is leaky and when it's leaky what you think",
    "start": "2058480",
    "end": "2065520"
  },
  {
    "text": "get push actually pushes thing but oh get push gives you an error because something i",
    "start": "2065520",
    "end": "2071440"
  },
  {
    "text": "don't know there is someone else who pushed now you have to get paul but you have some changes that are conflicting with that",
    "start": "2071440",
    "end": "2077760"
  },
  {
    "text": "it's not easy interface this is the worst interface that you're gonna deal with right and whoever says that it is easy uh",
    "start": "2077760",
    "end": "2085118"
  },
  {
    "text": "you you you're smart and smarter than me essentially",
    "start": "2085119",
    "end": "2090800"
  },
  {
    "start": "2090000",
    "end": "2222000"
  },
  {
    "text": "all right so guys check out joel's blog on leaky abstraction he goes into more",
    "start": "2090800",
    "end": "2096720"
  },
  {
    "text": "details into like uh more older stuff you know tcp and stuff he's he's very low level he's talking about c",
    "start": "2096720",
    "end": "2103760"
  },
  {
    "text": "and low level tcp stuff i try to kind of abstract it to",
    "start": "2103760",
    "end": "2109200"
  },
  {
    "text": "you abstract abstraction abstract the leaky abstraction to you but apparently i'm leaking stuff",
    "start": "2109200",
    "end": "2114240"
  },
  {
    "text": "get it no sorry but yeah essentially uh my goal is",
    "start": "2114240",
    "end": "2121520"
  },
  {
    "text": "when i when i see into these things when i deal with things interface directly i always i always end up",
    "start": "2121520",
    "end": "2129040"
  },
  {
    "text": "asking more questions which end up i i end up understanding the tech i'm working with right so",
    "start": "2129040",
    "end": "2135839"
  },
  {
    "text": "i'm technically i'm just i'm assuming every abstraction is leaky i'm just working with it it's like like",
    "start": "2135839",
    "end": "2143440"
  },
  {
    "text": "when i work with nginx it behave in a weird way i had to read about uh how threading is working into a or another",
    "start": "2143440",
    "end": "2150079"
  },
  {
    "text": "postgres it starts spinning like 300 processors like what the heck why do we have 300 plus post aggressive",
    "start": "2150079",
    "end": "2156800"
  },
  {
    "text": "processes here i had to learn more about postgres and how their forks works and the shared memory",
    "start": "2156800",
    "end": "2162720"
  },
  {
    "text": "all this stuff pretty much everything i assume just is a leak abstraction and understand it",
    "start": "2162720",
    "end": "2168960"
  },
  {
    "text": "as a result right this obviously doesn't scale and that's why you have to ask people who have people who",
    "start": "2168960",
    "end": "2176400"
  },
  {
    "text": "understand these pieces like you can't understand possibly everything but you try as much as possible now that's what i'm doing",
    "start": "2176400",
    "end": "2183440"
  },
  {
    "text": "i'm trying to understand all this stuff but sometimes i fail sometimes i succeed alright guys uh that's it for me today",
    "start": "2183440",
    "end": "2189520"
  },
  {
    "text": "that was leaky abstraction i'm gonna see you in the next one make sure to check out the",
    "start": "2189520",
    "end": "2195119"
  },
  {
    "text": "other content on the channel on the podcast for us listeners make sure to rate us on i don't know who's awesome",
    "start": "2195119",
    "end": "2202480"
  },
  {
    "text": "it's just me uh rate me on the apple podcast give me five stars if you",
    "start": "2202480",
    "end": "2209920"
  },
  {
    "text": "like it four and a half if you don't like it one star if you absolutely hate it",
    "start": "2209920",
    "end": "2215599"
  },
  {
    "text": "i thank you so much love you i'm gonna see you on the next one you guys stay awesome goodbye",
    "start": "2215599",
    "end": "2222800"
  }
]