[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "i get asked sometimes about the importance of data structures and algorithms and my",
    "start": "160",
    "end": "5680"
  },
  {
    "text": "opinion is is very clear on these these are very critical it really depends why are you learning",
    "start": "5680",
    "end": "12480"
  },
  {
    "text": "learning them if you're learning for to pass an interview or to get a job then it's",
    "start": "12480",
    "end": "19039"
  },
  {
    "text": "they are just a burden you're gonna memorize them you don't really understand what they do but if you truly go into this data",
    "start": "19039",
    "end": "25199"
  },
  {
    "text": "structure and really look at the route why they will do it do they exist",
    "start": "25199",
    "end": "30640"
  },
  {
    "text": "and what problems do they solve they're gonna make you an adept uh software engineer",
    "start": "30640",
    "end": "37520"
  },
  {
    "text": "you're gonna use this to your advantage and you're gonna nobody's gonna their way",
    "start": "37520",
    "end": "44239"
  },
  {
    "text": "through you at all because the you really know when to use this and i'm not going",
    "start": "44239",
    "end": "50160"
  },
  {
    "text": "to talk about development here coding here really i'm talking about actual",
    "start": "50160",
    "end": "55360"
  },
  {
    "text": "engineering working with a database right for example and that's the topic",
    "start": "55360",
    "end": "60800"
  },
  {
    "text": "of today b trees we're going to discuss all about the concept of b trees and how would improve to b plus 3",
    "start": "60800",
    "end": "68720"
  },
  {
    "text": "and what is the difference and the advantages what problems do they solve what are the limitations of these things",
    "start": "68720",
    "end": "74799"
  },
  {
    "text": "all of this stuff we're gonna discuss it in this episode stay tuned welcome to the backend engineering show with your host",
    "start": "74799",
    "end": "81360"
  },
  {
    "text": "hussein nasser and guys if you like this deep dive uh discussions of our database concept",
    "start": "81360",
    "end": "87520"
  },
  {
    "text": "you might enjoy my introduction to database engineering udemy course",
    "start": "87520",
    "end": "93040"
  },
  {
    "start": "90000",
    "end": "360000"
  },
  {
    "text": "over 14 hours worth of exclusive content that you won't find anywhere else so if you're interested check out the",
    "start": "93040",
    "end": "99600"
  },
  {
    "text": "pinned comment below and the show notes as well if you're listening on the podcast it",
    "start": "99600",
    "end": "104880"
  },
  {
    "text": "really supports the show thank you so much scott all right guys so b3s",
    "start": "104880",
    "end": "112240"
  },
  {
    "text": "in order to discuss this data structure why does why was it invented",
    "start": "112240",
    "end": "118719"
  },
  {
    "text": "we need to go back into a very",
    "start": "118719",
    "end": "123759"
  },
  {
    "text": "real use case you have a table in a database it's a huge table",
    "start": "123759",
    "end": "129679"
  },
  {
    "text": "millions and millions of rows and you want to search for a particular row",
    "start": "129679",
    "end": "136160"
  },
  {
    "text": "by its identification let's say id number 1007 you want to look at that",
    "start": "136160",
    "end": "142720"
  },
  {
    "text": "id okay and you just you don't want to really look at that id for the sake of looking",
    "start": "142720",
    "end": "148560"
  },
  {
    "text": "at the value 1007 no you want to pull more",
    "start": "148560",
    "end": "153599"
  },
  {
    "text": "information right so you want to get to that row so you can pull more stuff",
    "start": "153599",
    "end": "159680"
  },
  {
    "text": "if you want to search for 70 you already know 70 you're not searching for 17 for the 17 you want more",
    "start": "159680",
    "end": "166160"
  },
  {
    "text": "and that's the key 17 the value is the tuple for the longest time what we do is",
    "start": "166160",
    "end": "174480"
  },
  {
    "text": "one by one let's read the table page by page oh one page one thousand rows another",
    "start": "174480",
    "end": "180560"
  },
  {
    "text": "page one thousand rows read it nope 1007 is not any of them so you have to read one by one until you",
    "start": "180560",
    "end": "187519"
  },
  {
    "text": "find it and if you sure that this is unique so you're gonna stop the search right and then exit there this is called",
    "start": "187519",
    "end": "194080"
  },
  {
    "text": "a full table scan you're scanning the entire table right and if it's not unique you know there's",
    "start": "194080",
    "end": "199519"
  },
  {
    "text": "more to it you're gonna scan the entire table eventually which is very slow scanning one million rows and worst case scenarios",
    "start": "199519",
    "end": "207040"
  },
  {
    "text": "two million three million very very slow so it's slow the trick is we're saying make it faster",
    "start": "207040",
    "end": "214159"
  },
  {
    "text": "make it faster that's what we want so how do you make searching one million stuff faster",
    "start": "214159",
    "end": "220640"
  },
  {
    "text": "well one way is to parallelize it let's just split the table in in three four five seven and then let's",
    "start": "220640",
    "end": "227519"
  },
  {
    "text": "distribute the jobs on these threads or these machines and let this search",
    "start": "227519",
    "end": "232560"
  },
  {
    "text": "that becomes complicated but that's that's one way of doing it another way of doing it is that",
    "start": "232560",
    "end": "237760"
  },
  {
    "text": "partition it partitioning a very very important concept we break the table into chunks based on",
    "start": "237760",
    "end": "244319"
  },
  {
    "text": "key sizes so okay values from one to one thousand and this partition values from two one",
    "start": "244319",
    "end": "250239"
  },
  {
    "text": "thousand to two thousand is in this partition on this table so it's just essentially break it down to multiple tables right",
    "start": "250239",
    "end": "256799"
  },
  {
    "text": "another solution we're doing is create an index so we search",
    "start": "256799",
    "end": "262079"
  },
  {
    "text": "on the index this small data structure and then once we find it we jump into the exact page",
    "start": "262079",
    "end": "267680"
  },
  {
    "text": "that we need in all these scenarios and many many other scenarios we always",
    "start": "267680",
    "end": "273520"
  },
  {
    "text": "reduce the search space that is it we're not doing anything magic really",
    "start": "273520",
    "end": "280080"
  },
  {
    "text": "if we want we do i made a video so like how to work with a billion row",
    "start": "280080",
    "end": "285199"
  },
  {
    "text": "table okay it's it's a it's exclusive for members in this channel and the and the takeaway",
    "start": "285199",
    "end": "290639"
  },
  {
    "text": "from that video was in order to work with a billion row table you need to",
    "start": "290639",
    "end": "296000"
  },
  {
    "text": "avoid working with a billion rows yes it's not really rocket science don't",
    "start": "296000",
    "end": "303120"
  },
  {
    "text": "search one billion rules find any sneaky way to avoid working with large datasets",
    "start": "303120",
    "end": "308720"
  },
  {
    "text": "and then and and it's try to segment and eliminate things that you know is not",
    "start": "308720",
    "end": "314080"
  },
  {
    "text": "it's not going to give you the results that's the trick and here's where this topic is indexes",
    "start": "314080",
    "end": "320160"
  },
  {
    "text": "the indexing i made a video about indexing check it out but the idea of having this index so that i can search",
    "start": "320160",
    "end": "328560"
  },
  {
    "text": "only the things that i am absolutely sure that the row that i'm looking at the",
    "start": "328560",
    "end": "333600"
  },
  {
    "text": "value of look at is in that space right and when you've when you",
    "start": "333600",
    "end": "339680"
  },
  {
    "text": "design and structure your index that way you're going to get a smaller set you're",
    "start": "339680",
    "end": "346080"
  },
  {
    "text": "going to search fewer search space",
    "start": "346080",
    "end": "351199"
  },
  {
    "text": "and that the fewer the the search space the smaller the search space the faster",
    "start": "351199",
    "end": "356639"
  },
  {
    "text": "the results rocket science i know okay",
    "start": "356639",
    "end": "362479"
  },
  {
    "start": "360000",
    "end": "510000"
  },
  {
    "text": "so what's saying how do we build these structures these trees came into",
    "start": "362479",
    "end": "370800"
  },
  {
    "text": "the equation so okay how about we build trees so how do we build these trees for the longest time we had this idea of",
    "start": "370800",
    "end": "376639"
  },
  {
    "text": "a binary tree which is a very very simple beautiful structure that says okay you put a value",
    "start": "376639",
    "end": "382560"
  },
  {
    "text": "on the top and then larger values go to the right smaller values of this node",
    "start": "382560",
    "end": "389520"
  },
  {
    "text": "go to the left very simple data structure okay so if we put a value of 100 here",
    "start": "389520",
    "end": "395199"
  },
  {
    "text": "okay anything above 100 goes to the right of the tree right and i'm doing right here it's my",
    "start": "395199",
    "end": "401039"
  },
  {
    "text": "right i don't know if it's you right and anything to the left of the three is less than 100.",
    "start": "401039",
    "end": "406400"
  },
  {
    "text": "so if you're searching for the value of i don't know 200 then you always go to the root",
    "start": "406400",
    "end": "413759"
  },
  {
    "text": "so that's one cost jumping to the root you say okay i'm looking for 200 you",
    "start": "413759",
    "end": "419759"
  },
  {
    "text": "know what you're looking at is 200 greater or less than 100",
    "start": "419759",
    "end": "425120"
  },
  {
    "text": "this is a cheap check that gives you almost no cost at all but that check",
    "start": "425120",
    "end": "432160"
  },
  {
    "text": "eliminates almost half if you're lucky",
    "start": "432160",
    "end": "437199"
  },
  {
    "text": "half the search space because just like that you're now searching the right hand side because ah you know",
    "start": "437199",
    "end": "443759"
  },
  {
    "text": "that 200 is going to be in that area and as a result you only going to search 100",
    "start": "443759",
    "end": "449599"
  },
  {
    "text": "and above so you're searching less results and this is a very simple example but",
    "start": "449599",
    "end": "456880"
  },
  {
    "text": "the problem with binary three are by default they are not really balanced what does that mean take this example",
    "start": "456880",
    "end": "462880"
  },
  {
    "text": "let's assume the root is one okay and then any value that",
    "start": "462880",
    "end": "470319"
  },
  {
    "text": "puts uh that you add is greater than one what will happen two three four five six seven with",
    "start": "470319",
    "end": "477840"
  },
  {
    "text": "you're gonna end up with a linear search space that you didn't really that is as absolutely useless because",
    "start": "477840",
    "end": "484720"
  },
  {
    "text": "this is called an unbalanced tree you're gonna end up almost like if it's not even slower",
    "start": "484720",
    "end": "490720"
  },
  {
    "text": "than a full table scan you're going to jump into multiple pages to get into the value of",
    "start": "490720",
    "end": "496080"
  },
  {
    "text": "the 200 but you end up doing more work effectively to search",
    "start": "496080",
    "end": "501120"
  },
  {
    "text": "that so binary trees didn't really satisfy database workload because of this",
    "start": "501120",
    "end": "506479"
  },
  {
    "text": "lack of balancing okay so we need a self-healing self-balancing tree this is",
    "start": "506479",
    "end": "512320"
  },
  {
    "start": "510000",
    "end": "1170000"
  },
  {
    "text": "where b3 came into the situation and b3's guys stands for",
    "start": "512320",
    "end": "517680"
  },
  {
    "text": "really doesn't have it the paper doesn't really say what it stands for it could be balanced",
    "start": "517680",
    "end": "523039"
  },
  {
    "text": "could be boeing which is the company that uh the the research lab that this paper",
    "start": "523039",
    "end": "528560"
  },
  {
    "text": "came from or could be bayer one of the creators of this uh the researchers well yeah it could be anything really",
    "start": "528560",
    "end": "535440"
  },
  {
    "text": "and the beauty of this is it's really truly balanced so if you think about it",
    "start": "535440",
    "end": "541519"
  },
  {
    "text": "what does really balance really mean that means as you insert the tree balances itself",
    "start": "541519",
    "end": "549279"
  },
  {
    "text": "and if you're an engineer almost like wait a second",
    "start": "549279",
    "end": "554560"
  },
  {
    "text": "you're balancing as i'm inserting stuff the moment you hear that if you really",
    "start": "554560",
    "end": "561519"
  },
  {
    "text": "pay attention then there's a cost at all the cost and that is where you need to look",
    "start": "561519",
    "end": "569920"
  },
  {
    "text": "so there is a cost on rights which is this constant rebalancing",
    "start": "569920",
    "end": "578160"
  },
  {
    "text": "that needs to happen to balance itself so it's the left is equal to the right but at",
    "start": "578160",
    "end": "584080"
  },
  {
    "text": "the cost of this as i'm writing i'm continually balancing my tree",
    "start": "584080",
    "end": "590080"
  },
  {
    "text": "the reads my reads are gonna be very very quick quick as a result so b3s are",
    "start": "590080",
    "end": "596240"
  },
  {
    "text": "nothing but a generalized binary tree you can have any number of children not",
    "start": "596240",
    "end": "601440"
  },
  {
    "text": "just two you can have seven you can have",
    "start": "601440",
    "end": "607360"
  },
  {
    "text": "a thousand really the databases actually calculate that on on the fly let's take",
    "start": "607360",
    "end": "613120"
  },
  {
    "text": "an example all right so this is one of the most popular websites that demonstrates b trees and",
    "start": "613120",
    "end": "620640"
  },
  {
    "text": "it comes from university of san francisco fantastic website really very simple right no",
    "start": "620640",
    "end": "628399"
  },
  {
    "text": "fancy stuff just to the point so we're going to explain b trees here with in this website so effectively so let's",
    "start": "628399",
    "end": "635839"
  },
  {
    "text": "say my b3 has a maximum uh chill uh number of child the degree",
    "start": "635839",
    "end": "641440"
  },
  {
    "text": "of the order is three that means it can have up to three nodes okay so i'll go ahead and insert a bunch",
    "start": "641440",
    "end": "648000"
  },
  {
    "text": "of values that's gonna insert a value of one so this is this is going to become the root which is one here",
    "start": "648000",
    "end": "653680"
  },
  {
    "text": "if i insert the value of two right then when i want to insert a value of 2",
    "start": "653680",
    "end": "659680"
  },
  {
    "text": "we're going to look is 2 greater than 1 well yes but i'm not going to add it as a children",
    "start": "659680",
    "end": "665360"
  },
  {
    "text": "because i can actually put the value 2 inside the note itself",
    "start": "665360",
    "end": "670399"
  },
  {
    "text": "as an element okay so if i get an insert now i can have another value and here's the",
    "start": "670399",
    "end": "676399"
  },
  {
    "text": "thing you might say jose how many elements or keys can you add in the node itself it is the value which",
    "start": "676399",
    "end": "684079"
  },
  {
    "text": "is the maximum degree minus one as effectively it's always like that so three minus one so",
    "start": "684079",
    "end": "689200"
  },
  {
    "text": "two is the maximum you can get so now if i want to insert three what will happen here is okay i'm going",
    "start": "689200",
    "end": "694959"
  },
  {
    "text": "to insert three here but i'm gonna exceed my my coda in this node because i'm just exceeded by that",
    "start": "694959",
    "end": "700720"
  },
  {
    "text": "so i'm going to split this note and that split hurts that split sometimes",
    "start": "700720",
    "end": "708959"
  },
  {
    "text": "really hurts specifically if you're doing a lot of stuff the splitting of the page and doing this work that's all database io",
    "start": "708959",
    "end": "717040"
  },
  {
    "text": "right think about it this way as i go through this so if i insert into the value of three",
    "start": "717040",
    "end": "722639"
  },
  {
    "text": "it's gonna insert that but what will happen is two is gonna be promoted as root and one is gonna be to the left and",
    "start": "722639",
    "end": "729440"
  },
  {
    "text": "three is going to be to the right let's go ahead and do this boom as we can see again this now",
    "start": "729440",
    "end": "736079"
  },
  {
    "text": "i still if i now answer the value of four what will happen here so if i come to",
    "start": "736079",
    "end": "741360"
  },
  {
    "text": "here and i say okay four i'm going to add four four is greater than two so it has really too",
    "start": "741360",
    "end": "748720"
  },
  {
    "text": "nearly to go to the right of the tree right not to the left so what will happen here is as i insert",
    "start": "748720",
    "end": "755600"
  },
  {
    "text": "this it will go to the four it will go to the add and then it will add it as another",
    "start": "755600",
    "end": "761839"
  },
  {
    "text": "element in this right three and then you can see that now the three has three and four okay so how do you read",
    "start": "761839",
    "end": "769440"
  },
  {
    "text": "this tree let's continue reading it so the value is 2 which is the key here there is something that is hidden here",
    "start": "769440",
    "end": "775839"
  },
  {
    "text": "that is not shown which is the actual value of that point the pointer where",
    "start": "775839",
    "end": "781360"
  },
  {
    "text": "this value points to so to the left we have the value of one",
    "start": "781360",
    "end": "786399"
  },
  {
    "text": "to the right of the tree anything that is greater than two we have this node now you go to this",
    "start": "786399",
    "end": "792399"
  },
  {
    "text": "node and you find three and four are elements in this node so let's add five what will happen what",
    "start": "792399",
    "end": "799040"
  },
  {
    "text": "do you guys think what will happen when you add five well five is greater so it",
    "start": "799040",
    "end": "804320"
  },
  {
    "text": "needs to go here right and if i add it right here it's gonna go to the node but we just",
    "start": "804320",
    "end": "810399"
  },
  {
    "text": "decree exceeded the number of elements it should be just two we shouldn't go beyond two",
    "start": "810399",
    "end": "815600"
  },
  {
    "text": "so now four is gonna be promoted as a node three is gonna go to the left",
    "start": "815600",
    "end": "820880"
  },
  {
    "text": "and five is gonna to the right but since we want to keep the levels four are gonna be",
    "start": "820880",
    "end": "826160"
  },
  {
    "text": "pushed so we're going to be 204 and let's go let's add it so we can explain",
    "start": "826160",
    "end": "831600"
  },
  {
    "text": "this add it we'll get added and then promote that four and here's here's how you read this",
    "start": "831600",
    "end": "839199"
  },
  {
    "text": "let's read this this is a little bit different than a binary tree so this node has the value of element of",
    "start": "839199",
    "end": "845440"
  },
  {
    "text": "two an element of four okay the key is two and four to the left any values that are less than two are",
    "start": "845440",
    "end": "852880"
  },
  {
    "text": "here any values that are between two and four are in this pointer you go here and you",
    "start": "852880",
    "end": "859120"
  },
  {
    "text": "search there could be one element could be 700 depends on the degree of the tree and",
    "start": "859120",
    "end": "864160"
  },
  {
    "text": "then any values that are greater than four goes to the left so it's a full balanced tree but look at the work",
    "start": "864160",
    "end": "870720"
  },
  {
    "text": "that we're doing as we insert and we're just balancing and undoing all that stuff",
    "start": "870720",
    "end": "876480"
  },
  {
    "text": "uh so and that's because we we have a very small uh element degree of the size which",
    "start": "876480",
    "end": "883600"
  },
  {
    "text": "databases shouldn't use a value of three you should have a huge as as big as your page size",
    "start": "883600",
    "end": "891920"
  },
  {
    "text": "all right so talking about the b3s let's talk about",
    "start": "891920",
    "end": "896959"
  },
  {
    "text": "the the the benefits of this if i want to search let's find the value find value of three",
    "start": "896959",
    "end": "904800"
  },
  {
    "text": "very simple right before we go through it three three well three is between two",
    "start": "904800",
    "end": "911120"
  },
  {
    "text": "and four first of all i need to go jump to the root and say okay where's three three is between two and three two two",
    "start": "911120",
    "end": "916959"
  },
  {
    "text": "and four so i mean i need to jump to this pointer so i follow this pointer",
    "start": "916959",
    "end": "922079"
  },
  {
    "text": "to whatever note it points me we are seeing an actual node but in databases this is a page mostly",
    "start": "922079",
    "end": "929920"
  },
  {
    "text": "at least the postgres implementation this is a page itself this is a page this is a page and there",
    "start": "929920",
    "end": "935920"
  },
  {
    "text": "is thousands and thousands of elements in that page right so this is an i o",
    "start": "935920",
    "end": "940959"
  },
  {
    "text": "this is an i o so now i go to three and then i found three this is a very very short three essentially",
    "start": "940959",
    "end": "947600"
  },
  {
    "text": "and you just found it the value three i'm not really interested in the value three i'm interested is what is the content of",
    "start": "947600",
    "end": "954079"
  },
  {
    "text": "the value three and that is the value here there is something that is not shown in",
    "start": "954079",
    "end": "960320"
  },
  {
    "text": "this diagram i wish they they actually showed them but there is a there is a value there's not this this is not just the tree",
    "start": "960320",
    "end": "966639"
  },
  {
    "text": "we're not looking at just the numbers here there is some content that associates with the key",
    "start": "966639",
    "end": "973440"
  },
  {
    "text": "it's almost like a key value right so the 2 has a value next to it",
    "start": "973440",
    "end": "980560"
  },
  {
    "text": "in b3s every element has a value attached to it so two could",
    "start": "980560",
    "end": "986880"
  },
  {
    "text": "have any value it could point postgres implementation pointed directly to the tuple id right my sql",
    "start": "986880",
    "end": "994560"
  },
  {
    "text": "implementation pointed directly to the primary key right in that case and that's why",
    "start": "994560",
    "end": "1002639"
  },
  {
    "text": "if you use a primary key in in my sequel that is like a good then your indexes are going to be a",
    "start": "1002639",
    "end": "1010199"
  },
  {
    "text": "huge very huge right so be careful what primary key you use in my sequel",
    "start": "1010199",
    "end": "1015839"
  },
  {
    "text": "right and and and post because they don't have that problem effectively because everything is a secondary key",
    "start": "1015839",
    "end": "1022800"
  },
  {
    "text": "and they always point to the tuple all right so that that's that's what we're looking at so",
    "start": "1022800",
    "end": "1028400"
  },
  {
    "text": "who's saying why are you telling us that there's values here because that is the difference in the other data structure",
    "start": "1028400",
    "end": "1034319"
  },
  {
    "text": "that is called b plus three and what problems it is solved so now when i when i'm searching here i",
    "start": "1034319",
    "end": "1041760"
  },
  {
    "text": "this is a page right this is a whole page so if there is two and the value of it",
    "start": "1041760",
    "end": "1049039"
  },
  {
    "text": "whatever that value is if if if you if you're in my sequel then it's the pointer to the primary key so",
    "start": "1049039",
    "end": "1055520"
  },
  {
    "text": "the primary key data type goes there if it's postgres is the tuple i believe it's i don't know if there's",
    "start": "1055520",
    "end": "1061200"
  },
  {
    "text": "two bits maybe forgot what's the table id value size so that that is the tuple id in that",
    "start": "1061200",
    "end": "1067520"
  },
  {
    "text": "case so you you put more bits here so",
    "start": "1067520",
    "end": "1072960"
  },
  {
    "text": "this page is gonna be is gonna fit fewer elements",
    "start": "1072960",
    "end": "1081760"
  },
  {
    "text": "because we are carrying also values right if i only had the keys i could fit more elements in my page",
    "start": "1081760",
    "end": "1090400"
  },
  {
    "text": "which is let's say in pos because it's 8k i can fit more elements there and as a result i",
    "start": "1090400",
    "end": "1096160"
  },
  {
    "text": "can search i can i can traverse through much more elements in a single io compared to this data",
    "start": "1096160",
    "end": "1103120"
  },
  {
    "text": "structure which has the values which let's be honest the values are out of burden",
    "start": "1103120",
    "end": "1111039"
  },
  {
    "text": "if you think about it another thing here is what if i am searching for one three",
    "start": "1111039",
    "end": "1118400"
  },
  {
    "text": "and five at the same time how do i do that well oh let's search for one oh one is",
    "start": "1118400",
    "end": "1123919"
  },
  {
    "text": "here so i'm gonna read here okay we found it okay now now i want to search for three",
    "start": "1123919",
    "end": "1129520"
  },
  {
    "text": "oh so let's do it again go here and then three so you did a double jump to get to the",
    "start": "1129520",
    "end": "1136799"
  },
  {
    "text": "value of three okay i wanna search for five well let's do it again here five so you did three ios to get to five",
    "start": "1136799",
    "end": "1145280"
  },
  {
    "text": "and this is not uh a great example but you you you see that the work you did",
    "start": "1145280",
    "end": "1150640"
  },
  {
    "text": "it's like three jumps three hops what if you're reading 100 you're gonna go all over the place",
    "start": "1150640",
    "end": "1156480"
  },
  {
    "text": "to find these values because they are although they are ordered in the tree but",
    "start": "1156480",
    "end": "1163440"
  },
  {
    "text": "the they are they cannot be they are not sequential once you find a value it has nothing to",
    "start": "1163440",
    "end": "1171120"
  },
  {
    "start": "1170000",
    "end": "1320000"
  },
  {
    "text": "do with the value 5 despite them being next to each other in logical view so now we're looking at a b",
    "start": "1171120",
    "end": "1177679"
  },
  {
    "text": "plus three and the difference between a b plus three and a b three is really just the",
    "start": "1177679",
    "end": "1184320"
  },
  {
    "text": "realization that we're wasting uh space we're wasting space by",
    "start": "1184320",
    "end": "1192080"
  },
  {
    "text": "putting the values in next to the key in the elements it says okay what if i don't put the",
    "start": "1192080",
    "end": "1198640"
  },
  {
    "text": "value here so okay you have to put the value eventually right no",
    "start": "1198640",
    "end": "1204320"
  },
  {
    "text": "i'm going to put the values at the at the leaf nodes only so now that oh saying that means you",
    "start": "1204320",
    "end": "1211280"
  },
  {
    "text": "have to duplicate your keys as we're seeing the value three here also appear",
    "start": "1211280",
    "end": "1216400"
  },
  {
    "text": "at the leaf but that is a very small cost compared to the",
    "start": "1216400",
    "end": "1222159"
  },
  {
    "text": "benefits that we're getting all of a sudden now these intermediate nodes that we're searching",
    "start": "1222159",
    "end": "1228480"
  },
  {
    "text": "are so tiny we're only searching keys here they effectively can fit entirely",
    "start": "1228480",
    "end": "1235840"
  },
  {
    "text": "in the memory so i can traverse this stuff without actually having to worry about the value",
    "start": "1235840",
    "end": "1241120"
  },
  {
    "text": "of them but once i find something here's another benefit of a b plus 3. once you find",
    "start": "1241120",
    "end": "1248000"
  },
  {
    "text": "something there is a pointer to the next actual key so technically once you find",
    "start": "1248000",
    "end": "1254080"
  },
  {
    "text": "something you can find pretty much everything range queries in this case and a b plus three are much more effective than an mb3",
    "start": "1254080",
    "end": "1262400"
  },
  {
    "text": "because if i give you hey find me all values between one and five in a b3",
    "start": "1262400",
    "end": "1270080"
  },
  {
    "text": "if you go to a b3 between one and five you have to search one and again you have to find obviously",
    "start": "1270080",
    "end": "1276720"
  },
  {
    "text": "two you have to find three you have to have four i have to five because you have to find every one of",
    "start": "1276720",
    "end": "1282559"
  },
  {
    "text": "them the values itself right so you have to traverse go back and forth the tree to find the",
    "start": "1282559",
    "end": "1289280"
  },
  {
    "text": "stuff however in a b plus three just go and find one",
    "start": "1289280",
    "end": "1295280"
  },
  {
    "text": "we found one once you found one just go because you know everything is",
    "start": "1295280",
    "end": "1300640"
  },
  {
    "text": "sequential right if index are always sorted by default so if it's sorted then okay",
    "start": "1300640",
    "end": "1305840"
  },
  {
    "text": "where's the next value oh there's two there's a point a nice beautiful pointer now you might say hussein isn't the",
    "start": "1305840",
    "end": "1311679"
  },
  {
    "text": "pointer adding the pointer is a cost of course there's always the cost to everything so people studies okay the addition of",
    "start": "1311679",
    "end": "1318799"
  },
  {
    "text": "that pointer really doesn't really affect much but the value of having this",
    "start": "1318799",
    "end": "1324000"
  },
  {
    "start": "1320000",
    "end": "1500000"
  },
  {
    "text": "beautiful range queries where i can search and then immediately find two and three and four and five these might",
    "start": "1324000",
    "end": "1330799"
  },
  {
    "text": "fit into a single page if it's like five but let's say you're searching for i don't know",
    "start": "1330799",
    "end": "1336159"
  },
  {
    "text": "two thousand or three thousand right you might read it really depends again on the data size",
    "start": "1336159",
    "end": "1341200"
  },
  {
    "text": "and the values and all that stuff you might read maybe three or four pages right depends on the on the size and all",
    "start": "1341200",
    "end": "1346799"
  },
  {
    "text": "that stuff right but yeah that is the benefits of the difference between b",
    "start": "1346799",
    "end": "1352640"
  },
  {
    "text": "trees and b plus trees almost b3s are never used in databases right although i see some",
    "start": "1352640",
    "end": "1360320"
  },
  {
    "text": "value to the simplicity of the b3 right but studies shows that the cost the",
    "start": "1360320",
    "end": "1366960"
  },
  {
    "text": "addition cost of the b3 which is b which is the duplication because you have to duplicate the key itself",
    "start": "1366960",
    "end": "1373360"
  },
  {
    "text": "in the intermediate node and in the leaf node plus the addition of the pointers to to",
    "start": "1373360",
    "end": "1380559"
  },
  {
    "text": "l to to to do a linked list at the leaflet is is almost negligible to the",
    "start": "1380559",
    "end": "1388240"
  },
  {
    "text": "to the cost of the b3 right itself but if you like i mean if you're for",
    "start": "1388240",
    "end": "1395520"
  },
  {
    "text": "instance if you absolutely know that your workload is gonna always gonna be okay i",
    "start": "1395520",
    "end": "1401520"
  },
  {
    "text": "don't know key value store where you're always searching by one value you're never never gonna search by multiple values",
    "start": "1401520",
    "end": "1407919"
  },
  {
    "text": "then you can use a b3 right but i still think that it's very hard",
    "start": "1407919",
    "end": "1415120"
  },
  {
    "text": "it's harder to fit a b3 in memory fully compared to a b",
    "start": "1415120",
    "end": "1420880"
  },
  {
    "text": "plus three right why a b3 is is you have to put it all or",
    "start": "1420880",
    "end": "1427440"
  },
  {
    "text": "nothing really so a b3 is really it's it's all or nothing you can you can you have to put it all in memory",
    "start": "1427440",
    "end": "1433600"
  },
  {
    "text": "i mean you can play tricks with paging it's like okay let's page some part of the tree but not all of it but",
    "start": "1433600",
    "end": "1439120"
  },
  {
    "text": "yeah it's it's really unpredictable right but b plus three i've got reference post",
    "start": "1439120",
    "end": "1445440"
  },
  {
    "text": "case because that that's the database i try to focus on according to postgres when they implemented their",
    "start": "1445440",
    "end": "1451279"
  },
  {
    "text": "b plus trees 99 of the cost and storage of b trees",
    "start": "1451279",
    "end": "1457440"
  },
  {
    "text": "is in the leaf this is just one percent all this nodes that",
    "start": "1457440",
    "end": "1463840"
  },
  {
    "text": "helps the reverser just to get to one leaf is one percent",
    "start": "1463840",
    "end": "1468960"
  },
  {
    "text": "so definitely you can fit a one percent in it's right in in memory let's say",
    "start": "1468960",
    "end": "1475360"
  },
  {
    "text": "your index is 100 gig that's a huge index by the way if you think about it right",
    "start": "1475360",
    "end": "1481360"
  },
  {
    "text": "then you can fit if you have enough memory if you can fit one gigabyte",
    "start": "1481360",
    "end": "1486960"
  },
  {
    "text": "in memory that is fine then the traversal are so fast to get to",
    "start": "1486960",
    "end": "1493279"
  },
  {
    "text": "one leaf and then you're gonna start doing some io once you get to the actual leaf value right",
    "start": "1493279",
    "end": "1501200"
  },
  {
    "start": "1500000",
    "end": "1800000"
  },
  {
    "text": "and i i think that's still i'm still actually thinking about this stuff like is there",
    "start": "1501200",
    "end": "1506240"
  },
  {
    "text": "benefits to using just pure b3 versus b plus three but always to me it looks like always b b plus three",
    "start": "1506240",
    "end": "1512720"
  },
  {
    "text": "always wins over b3 right that's what i what i noticed i noticed like mongodb",
    "start": "1512720",
    "end": "1517760"
  },
  {
    "text": "even being a key value store they they use b plus 3 they don't use b3 and maybe that that's uh that's a that's",
    "start": "1517760",
    "end": "1524000"
  },
  {
    "text": "sort of actually let's check oh i take that back look at that mongodb uses b3 data",
    "start": "1524000",
    "end": "1531520"
  },
  {
    "text": "structure uh they did not specify except the b plus three it looks like they are using just",
    "start": "1531520",
    "end": "1536640"
  },
  {
    "text": "a b3 you know what i think that's enough uh showing off the the",
    "start": "1536640",
    "end": "1542080"
  },
  {
    "text": "screen let's discuss this part a little bit you know this this reminds me of what",
    "start": "1542080",
    "end": "1549039"
  },
  {
    "text": "it's like this whole thing with mongodb and just b3 according to their dock they don't not",
    "start": "1549039",
    "end": "1555360"
  },
  {
    "text": "they're not using b plus three okay they're using a pure b3 so",
    "start": "1555360",
    "end": "1560640"
  },
  {
    "text": "my guess is they're gonna have trouble fitting that tree in completely in memory as a result",
    "start": "1560640",
    "end": "1567520"
  },
  {
    "text": "because the search you you cannot search through it effectively",
    "start": "1567520",
    "end": "1572880"
  },
  {
    "text": "right just to get it to a leaf it's all or nothing if it's a b3 because the values are with",
    "start": "1572880",
    "end": "1578559"
  },
  {
    "text": "the keys so you're burdened with that that made me remember discord remember",
    "start": "1578559",
    "end": "1585360"
  },
  {
    "text": "the video we did on discord because i remember covering this mongodb the discord moved from mongodb",
    "start": "1585360",
    "end": "1591840"
  },
  {
    "text": "to i believe cassandra and then later they moved to cellar db",
    "start": "1591840",
    "end": "1597440"
  },
  {
    "text": "because of this exact thing let me read this the messages were stored in a mongodb",
    "start": "1597440",
    "end": "1603120"
  },
  {
    "text": "collection with a single compound index on channel id and created app around november 2015 we reached 100",
    "start": "1603120",
    "end": "1610400"
  },
  {
    "text": "million stored messages and at this time we started to see the expected issues appearing",
    "start": "1610400",
    "end": "1616320"
  },
  {
    "text": "the data and the index could no longer fit in ram and latency started to become",
    "start": "1616320",
    "end": "1624559"
  },
  {
    "text": "unpredictable it was time to migrate to database more suited for the tax",
    "start": "1624559",
    "end": "1631120"
  },
  {
    "text": "again i'm just putting two and two together here my guess is maybe",
    "start": "1631440",
    "end": "1638799"
  },
  {
    "text": "because of the choice mongodb used a b3 for their indexes",
    "start": "1638799",
    "end": "1646080"
  },
  {
    "text": "they can't fit the indexes efficiently in ram compared to if it was",
    "start": "1646080",
    "end": "1653600"
  },
  {
    "text": "a pure b plus 3 where you can fit the actual traversal part of things",
    "start": "1653600",
    "end": "1662559"
  },
  {
    "text": "in memory right and you can you can put some of the leaves which",
    "start": "1662559",
    "end": "1668080"
  },
  {
    "text": "contains the keys and the data itself right which which points either point to",
    "start": "1668080",
    "end": "1673600"
  },
  {
    "text": "the row tuple or the actual value and if you do that maybe that was it that",
    "start": "1673600",
    "end": "1681520"
  },
  {
    "text": "was caused mongodb to not fit could not fit the b the b3 structure",
    "start": "1681520",
    "end": "1688320"
  },
  {
    "text": "in entirely fully memory because think about this way if you can't fit in memory entirely",
    "start": "1688320",
    "end": "1695360"
  },
  {
    "text": "then you have to go to this but how do you know what part to put in the disk and what not you can't have the choice unfortunately",
    "start": "1695360",
    "end": "1701919"
  },
  {
    "text": "you have to put you you would decide okay i'm going to put half of it on memory and half of it but",
    "start": "1701919",
    "end": "1707279"
  },
  {
    "text": "how do you know you might be unlucky that the queries that needs to traverse the tree or in this",
    "start": "1707279",
    "end": "1714080"
  },
  {
    "text": "that you will you you'll end up hitting the the uh the desk constantly to retrieve pages just to",
    "start": "1714080",
    "end": "1721200"
  },
  {
    "text": "traverse bad stuff so to me i still think b",
    "start": "1721200",
    "end": "1726559"
  },
  {
    "text": "plus 3 is the superior structure regardless of your uh really use case if you think about it",
    "start": "1726559",
    "end": "1735039"
  },
  {
    "text": "because like that's what i thought it's like okay i want a simpler data session i'm going to use a beautiful simple b tree i don't need to",
    "start": "1735039",
    "end": "1741440"
  },
  {
    "text": "pay plus 3 because i'm just it's a key value store i'm just searching for a key and then give me my value and that's why",
    "start": "1741440",
    "end": "1749120"
  },
  {
    "text": "was my initial response as it was in the video right like i started changing my mind",
    "start": "1749120",
    "end": "1754720"
  },
  {
    "text": "while making this video then it was like wait a second that's fine and all if i have a small index but",
    "start": "1754720",
    "end": "1761600"
  },
  {
    "text": "if it's a huge index with a lot of stuff then if i can't fit all of this stuff in",
    "start": "1761600",
    "end": "1768960"
  },
  {
    "text": "memory it's gonna spill to disk then i'll end up searching all of that stuff",
    "start": "1768960",
    "end": "1774640"
  },
  {
    "text": "in disk you might argue hussain if your b plus 3 is so large i don't",
    "start": "1774640",
    "end": "1780640"
  },
  {
    "text": "know one terabyte then you're what is one percent of one terabyte it is 10 gig yeah it's",
    "start": "1780640",
    "end": "1787760"
  },
  {
    "text": "around 10 gig so i mean do you have 10 gig war for ram well if you're managing a thousand",
    "start": "1787760",
    "end": "1793440"
  },
  {
    "text": "was a petabyte worth of content please invest in a better memory you should",
    "start": "1793440",
    "end": "1800320"
  },
  {
    "start": "1800000",
    "end": "1910000"
  },
  {
    "text": "have at least 256 or 512 ram to fit your 10 gigabit of index",
    "start": "1800320",
    "end": "1807360"
  },
  {
    "text": "but think about it this way right it is it looks like bps3 always wins regardless and that's the",
    "start": "1807360",
    "end": "1814159"
  },
  {
    "text": "discussion i wanted to have guys it says very interesting as like as i make these videos",
    "start": "1814159",
    "end": "1819840"
  },
  {
    "text": "i keep i keep remembering old videos that we covered and i can we put things and we links together is",
    "start": "1819840",
    "end": "1825600"
  },
  {
    "text": "fascinating i'm gonna reference the discord video that i made obviously in the description if you're interested in that stuff and uh",
    "start": "1825600",
    "end": "1831600"
  },
  {
    "text": "that's it for me guys so what did we discuss we discussed the beauty of the data structure algorithms very important",
    "start": "1831600",
    "end": "1838559"
  },
  {
    "text": "to understand not memorize for an interview actually understand so it helps you once",
    "start": "1838559",
    "end": "1844640"
  },
  {
    "text": "you understand what things together you can put one two and two together and these are oh wait a second this doesn't make sense",
    "start": "1844640",
    "end": "1851200"
  },
  {
    "text": "and that the power that's the that's where the power of the engineer comes comes in beauty then we talked about b",
    "start": "1851200",
    "end": "1858240"
  },
  {
    "text": "trees and we talked about b plus trees and the differences between them and how do we how do they actually uh",
    "start": "1858240",
    "end": "1866080"
  },
  {
    "text": "um how do they actually thrive in an actual database production we've seen an",
    "start": "1866080",
    "end": "1871200"
  },
  {
    "text": "example of mongodb again that's what they say they say b3 they didn't say b plus three honest",
    "start": "1871200",
    "end": "1876240"
  },
  {
    "text": "uh again i'm gonna i might make another video about b3s and then how postgres",
    "start": "1876240",
    "end": "1881600"
  },
  {
    "text": "effectively determined that the degree of b trees because if you think about it",
    "start": "1881600",
    "end": "1887760"
  },
  {
    "text": "like postgres or other database they don't say okay oh we're going to use i don't",
    "start": "1887760",
    "end": "1893120"
  },
  {
    "text": "know a 2000 degree b3 no no they don't do that they derive that",
    "start": "1893120",
    "end": "1900399"
  },
  {
    "text": "based on your data type of the index you're trying to create i'm going to make another video discussing that hopefully",
    "start": "1900399",
    "end": "1907760"
  },
  {
    "text": "stay awesome goodbye this guy",
    "start": "1907760",
    "end": "1911440"
  }
]