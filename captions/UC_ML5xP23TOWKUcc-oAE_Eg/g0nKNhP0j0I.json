[
  {
    "start": "0",
    "end": "160000"
  },
  {
    "text": "you know fragmentation is a very interesting topic to me specifically that it is a",
    "start": "80",
    "end": "7759"
  },
  {
    "text": "very overloaded term because now when I say",
    "start": "7759",
    "end": "12839"
  },
  {
    "text": "fragmentation do I mean disk fragmentation if you grw up in the '90s",
    "start": "12839",
    "end": "17920"
  },
  {
    "text": "you probably seen you know hard drives and options in the US to Def fragment",
    "start": "17920",
    "end": "24480"
  },
  {
    "text": "your drive I'm not really talking about that per se nor that I'm talking about",
    "start": "24480",
    "end": "30519"
  },
  {
    "text": "fragmentation at layer three on the IP packet where if an IP packet that is of",
    "start": "30519",
    "end": "38800"
  },
  {
    "text": "size I don't know 1,500 bytes encountered a router with a smaller MTU",
    "start": "38800",
    "end": "45440"
  },
  {
    "text": "maximum trans transfer unit for any reason then the router will chop that",
    "start": "45440",
    "end": "53280"
  },
  {
    "text": "large uh IP packet into a smaller what call fragments based on the offset of",
    "start": "53280",
    "end": "59559"
  },
  {
    "text": "where the bites are you know I'm not talking about that Ty fragmentation I'm talking about fragmentation in memory",
    "start": "59559",
    "end": "67159"
  },
  {
    "text": "and uh I'm working on a on a new course an operating system course and that's where where things for me started to you",
    "start": "67159",
    "end": "74759"
  },
  {
    "text": "know um ignite more interest because how critical is fragmentation",
    "start": "74759",
    "end": "82960"
  },
  {
    "text": "and memory I want to answer a few questions in this podcast like what is the fragmentation in memory what is",
    "start": "82960",
    "end": "89479"
  },
  {
    "text": "extern interal fragmentation what is internal fragmentation and is is it",
    "start": "89479",
    "end": "95000"
  },
  {
    "text": "really that's the most a question that I can't find answer in the internet you know I actually did find one article",
    "start": "95000",
    "end": "102640"
  },
  {
    "text": "from Yale from 200 until 2010 that actually discusses this exact topic and",
    "start": "102640",
    "end": "108600"
  },
  {
    "text": "the question is if I put my data right in a different places in Ram is there a",
    "start": "108600",
    "end": "116439"
  },
  {
    "text": "cost for reading a block of memory that let's",
    "start": "116439",
    "end": "122240"
  },
  {
    "text": "say an array that I know is contiguous but it is physically not contiguous on",
    "start": "122240",
    "end": "128879"
  },
  {
    "text": "the ram right it is chopped off and place it it plays in multiple physical",
    "start": "128879",
    "end": "135560"
  },
  {
    "text": "location different rows and columns in in the D uh in the DDR Ram is there a",
    "start": "135560",
    "end": "141440"
  },
  {
    "text": "cost to reading that and jumping between one uh uh one place in memory to another",
    "start": "141440",
    "end": "149840"
  },
  {
    "text": "other place that's the question I'm trying to answer and I I think I'm 99%",
    "start": "149840",
    "end": "155519"
  },
  {
    "text": "there how about we jump into it and and discuss this welcome to the back and Jing show with your host Hussein Nas and",
    "start": "155519",
    "end": "161280"
  },
  {
    "start": "160000",
    "end": "250000"
  },
  {
    "text": "today's topic is fragmentation in",
    "start": "161280",
    "end": "166120"
  },
  {
    "text": "memory you see when when I when I allocate a certain",
    "start": "166720",
    "end": "174000"
  },
  {
    "text": "memory my process says Hey I want a th000 bytes and and I want this",
    "start": "174000",
    "end": "182159"
  },
  {
    "text": "necessarily memory is always contiguous next to each other that's the",
    "start": "182159",
    "end": "189080"
  },
  {
    "text": "rule now when I say contiguous in memory virtual money memory kind of",
    "start": "189080",
    "end": "196640"
  },
  {
    "text": "breaks this rule because it can present you with a thousand bytes that is contiguous from by0 to bite",
    "start": "196640",
    "end": "205000"
  },
  {
    "text": "999 but it can play tricks on the back end",
    "start": "205000",
    "end": "210840"
  },
  {
    "text": "not pun intended that it will will Swizzle that it will trick you say all right yeah virtually you have thousand",
    "start": "210840",
    "end": "217799"
  },
  {
    "text": "contiguous but but physically they are all over the place for one reason or another I don't have memory I my memory",
    "start": "217799",
    "end": "224760"
  },
  {
    "text": "is fragmented which all come to and it's over all the place so that the the the contiguous memory is is a rule that",
    "start": "224760",
    "end": "233239"
  },
  {
    "text": "comes to the operating to to the process itself to the request no but in",
    "start": "233239",
    "end": "239680"
  },
  {
    "text": "implementation can differ so now if I say hey give me this thousand memory you",
    "start": "239680",
    "end": "245000"
  },
  {
    "text": "know allocation of this memory is critical",
    "start": "245000",
    "end": "250480"
  },
  {
    "start": "250000",
    "end": "540000"
  },
  {
    "text": "throwing all the rules out out of the door how would you implement such",
    "start": "250480",
    "end": "256359"
  },
  {
    "text": "strategy to allocate memory well we really have one option is",
    "start": "256359",
    "end": "264360"
  },
  {
    "text": "um allocate exactly the amount of memory that the client asked you and when I say",
    "start": "264360",
    "end": "270680"
  },
  {
    "text": "client here I mean the process or the thread of execution",
    "start": "270680",
    "end": "276800"
  },
  {
    "text": "right and it's asking you the asking basically what the the kernel to",
    "start": "276800",
    "end": "283160"
  },
  {
    "text": "allocate the memory right the operating system to allocate this memory for you right and you you can you can abstract",
    "start": "283160",
    "end": "290520"
  },
  {
    "text": "this idea to anything really you can build your own memory um you know management system and you have a client",
    "start": "290520",
    "end": "297520"
  },
  {
    "text": "and a backend and the client request memory through our HTTP request right",
    "start": "297520",
    "end": "302880"
  },
  {
    "text": "that's fine like redis hey I I locate this memory for me and and uh that's the",
    "start": "302880",
    "end": "309960"
  },
  {
    "text": "idea there is a client that request certain memory and then you",
    "start": "309960",
    "end": "315520"
  },
  {
    "text": "can so so this is this is the first approach give me exactly what I asked",
    "start": "315520",
    "end": "320919"
  },
  {
    "text": "for I asked for a th000 give me exactly thousand I asked for 10 kilobyte give me",
    "start": "320919",
    "end": "326759"
  },
  {
    "text": "exactly 10 kilobyte one megabyte give me exactly one megabyte what's wrong with this approach",
    "start": "326759",
    "end": "334800"
  },
  {
    "text": "well this approach um is efficient because you're exactly",
    "start": "334800",
    "end": "341319"
  },
  {
    "text": "given what you're asked for but I want you to",
    "start": "341319",
    "end": "347360"
  },
  {
    "text": "imagine fast forward through the play just play it out imagine thousands of",
    "start": "347360",
    "end": "354319"
  },
  {
    "text": "processes one requesting three bytes one requesting 10 bytes one requested 1",
    "start": "354319",
    "end": "359759"
  },
  {
    "text": "Megabyte one requested 10 megabytes one requesting 10 kiloby and there's there's this this the memory will be allocated",
    "start": "359759",
    "end": "367199"
  },
  {
    "text": "in order you know whatever first come first serve in very in the order that",
    "start": "367199",
    "end": "372880"
  },
  {
    "text": "that comes in and then eventually processes will terminate and they will deallocate so",
    "start": "372880",
    "end": "379759"
  },
  {
    "text": "what will happen is the three byte uh process will deallocate the 10 kilobyte process will deallocate uh the 10",
    "start": "379759",
    "end": "387160"
  },
  {
    "text": "megabyte maybe lives a little bit longer the the three the 10 bytes will live a little bit longer and what will happen",
    "start": "387160",
    "end": "393960"
  },
  {
    "text": "eventually is like this nice used memory all of a sudden now we'll have patches",
    "start": "393960",
    "end": "400639"
  },
  {
    "text": "in the middle right it's like oh there's like a three BT free memory now oh now",
    "start": "400639",
    "end": "406319"
  },
  {
    "text": "he has like a one bite here oh there's like a 10 kilobyte here oh there is like one kilobyte here there and you will",
    "start": "406319",
    "end": "412280"
  },
  {
    "text": "have these patches in the middle right and these patches unfortunately",
    "start": "412280",
    "end": "420840"
  },
  {
    "text": "a very what's the word very tedious because what are you",
    "start": "420840",
    "end": "427560"
  },
  {
    "text": "going to do with this three byte patch that is a free memory the possibility that someone",
    "start": "427560",
    "end": "434879"
  },
  {
    "text": "another process will ask for a three byte is so low that this three by will remain three byte unallocated absolutely",
    "start": "434879",
    "end": "442440"
  },
  {
    "text": "useless in the middle of your memory yucks right and that's what we're called",
    "start": "442440",
    "end": "449520"
  },
  {
    "text": "external fragmentation because looking externally right you're you're uh you",
    "start": "449520",
    "end": "457720"
  },
  {
    "text": "have memory right but they are all over the place like oh you have 10 bytes here",
    "start": "457720",
    "end": "463039"
  },
  {
    "text": "five bytes here uh 10 bytes here and so if someone genuinely let's say like you",
    "start": "463039",
    "end": "469440"
  },
  {
    "text": "you filled up all this Ram right and someone wants a one megabyte guess what",
    "start": "469440",
    "end": "475479"
  },
  {
    "text": "you absolutely have one megabyte you actually have maybe 20 or 30 or 40",
    "start": "475479",
    "end": "480720"
  },
  {
    "text": "megabytes but guess what you don't have one megabyte of contiguous memory",
    "start": "480720",
    "end": "485960"
  },
  {
    "text": "anymore you don't have that because it's all over the place right so you cannot",
    "start": "485960",
    "end": "492080"
  },
  {
    "text": "allocate memory with this approach uh because it's all over the",
    "start": "492080",
    "end": "498199"
  },
  {
    "text": "place now virtual memory actually solves this problem right but we're going to",
    "start": "498199",
    "end": "504240"
  },
  {
    "text": "come to that in a way that it doesn't really use this approach you know",
    "start": "504240",
    "end": "510879"
  },
  {
    "text": "uh this this on demand Dynamic allocation is uh is frowned upon because",
    "start": "510879",
    "end": "520039"
  },
  {
    "text": "it's unpredictable right so so that's the",
    "start": "520039",
    "end": "525360"
  },
  {
    "text": "problem with external fragmentation you have you have memory but you cannot possibly allocate it not let's say you",
    "start": "525360",
    "end": "533600"
  },
  {
    "text": "cannot easily allocate M so what what what people did is all right we're going",
    "start": "533600",
    "end": "539760"
  },
  {
    "text": "to we're going to we're going to solve this problem in two ways right first of all there's no this monkey business that",
    "start": "539760",
    "end": "546760"
  },
  {
    "start": "540000",
    "end": "690000"
  },
  {
    "text": "you can if you ask me for a th000 I'm not going to give you a th000 I'm going to give you a fixed",
    "start": "546760",
    "end": "553640"
  },
  {
    "text": "block and it may be more than what you need it's almost always more than what",
    "start": "553640",
    "end": "558880"
  },
  {
    "text": "you need right so if you let's say I'm my fixed block size is a one 1,000 bytes",
    "start": "558880",
    "end": "564279"
  },
  {
    "text": "or 1,24 if you ask for a th000 I'm going to give you that one block if you ask for",
    "start": "564279",
    "end": "573160"
  },
  {
    "text": "1,00 and one I'm going to give you two blocks one block you're going to",
    "start": "573160",
    "end": "579600"
  },
  {
    "text": "probably use all the second block you're going to only use one bite and you're going to you're going to",
    "start": "579600",
    "end": "585839"
  },
  {
    "text": "have 9999 uh empty",
    "start": "585839",
    "end": "592680"
  },
  {
    "text": "space now you just you just created another problem and this is this is the",
    "start": "592680",
    "end": "600320"
  },
  {
    "text": "this is the life that we're living um currently right human",
    "start": "600320",
    "end": "606399"
  },
  {
    "text": "beings every we solve we always create other problems always always always",
    "start": "606399",
    "end": "611680"
  },
  {
    "text": "there is no exception to this everything you create there's always a side effect to it to everything you can think of",
    "start": "611680",
    "end": "618320"
  },
  {
    "text": "anything there's always a side effect right and uh I'm not going to philosophize here but but just think",
    "start": "618320",
    "end": "624800"
  },
  {
    "text": "about it a little bit it's very interesting if you think about it so",
    "start": "624800",
    "end": "629880"
  },
  {
    "text": "now you have another problem where you created something called internal fragmentation now you have space but",
    "start": "629880",
    "end": "636760"
  },
  {
    "text": "guess what you as the operating system you have no control because you gave",
    "start": "636760",
    "end": "641920"
  },
  {
    "text": "this block this guy something that more than what they need now what they what",
    "start": "641920",
    "end": "648839"
  },
  {
    "text": "do what what you got as a result as a side effect of this is is a is a nice",
    "start": "648839",
    "end": "655200"
  },
  {
    "text": "block sizes so if I allocated some deallocated something I have fixed size",
    "start": "655200",
    "end": "661560"
  },
  {
    "text": "of memory so these patches still exist but they are more",
    "start": "661560",
    "end": "667480"
  },
  {
    "text": "manageable and they're more useful right",
    "start": "667480",
    "end": "674000"
  },
  {
    "text": "furthermore virtual me memory can actually Thrive here now I can create a",
    "start": "674160",
    "end": "680800"
  },
  {
    "text": "mapping table that says hey uh this",
    "start": "680800",
    "end": "686600"
  },
  {
    "text": "block uh you allocated this block as a logical block but physically it's this",
    "start": "686600",
    "end": "693160"
  },
  {
    "start": "690000",
    "end": "920000"
  },
  {
    "text": "block and you create a mapping table what we call a page table right",
    "start": "693160",
    "end": "700279"
  },
  {
    "text": "and with virtual memory now you can allocate certain amount of",
    "start": "700320",
    "end": "706639"
  },
  {
    "text": "memory even if it's not contiguous you say hey I want 10 megabytes and of",
    "start": "706639",
    "end": "712240"
  },
  {
    "text": "course virtually I'm going to give you a virtual address that looks contiguous from zero to whatever 10,000",
    "start": "712240",
    "end": "719639"
  },
  {
    "text": ",000 but I don't have that I don't have the luxury to give you all of that in in",
    "start": "719639",
    "end": "727279"
  },
  {
    "text": "one con physically right in in in the ram they are not physical I have a a",
    "start": "727279",
    "end": "734000"
  },
  {
    "text": "free Block over here I have two free blocks over here I have 10 fre free blocks over here and then what we do is",
    "start": "734000",
    "end": "742000"
  },
  {
    "text": "we fill up these blocks says all right uh block number one logically is",
    "start": "742000",
    "end": "748160"
  },
  {
    "text": "actually physic block number 917 block number two is block uh",
    "start": "748160",
    "end": "755320"
  },
  {
    "text": "10,1 and 10,002 and this block is this block and then you start mapping",
    "start": "755320",
    "end": "762120"
  },
  {
    "text": "it very very creative you know virtual memory is a beautiful design indeed you",
    "start": "762120",
    "end": "767880"
  },
  {
    "text": "know there's of course a cost comes with it no come to that so now you filled up you solved",
    "start": "767880",
    "end": "776680"
  },
  {
    "text": "technically solved external fragmentation remember what was the problem with external fragmentation we have space but we absolutely have no way",
    "start": "776680",
    "end": "785800"
  },
  {
    "text": "to fill up this gaps in the middle these patches I don't I cannot use them well",
    "start": "785800",
    "end": "792959"
  },
  {
    "text": "with fixed block size and paging essentially and you know virtual memory",
    "start": "792959",
    "end": "799560"
  },
  {
    "text": "of course you have to virtualize things now you can fill up these gaps you can reuse these",
    "start": "799560",
    "end": "805480"
  },
  {
    "text": "gaps very nice right Furthermore with uh my favorite word",
    "start": "805480",
    "end": "812920"
  },
  {
    "text": "today is furthermore so moreover let's change a little bit what you do is even if you don't",
    "start": "812920",
    "end": "820440"
  },
  {
    "text": "have space now that because now you have this physical block that is just well known well Define I can swap it back to",
    "start": "820440",
    "end": "828279"
  },
  {
    "text": "dis say hey you've been consuming this memory but you don't really use it much huh I know you you need it in the future",
    "start": "828279",
    "end": "835480"
  },
  {
    "text": "but I'm going to save it to this going to swap area here's here's a space in dis I'm going to write it back here I'm",
    "start": "835480",
    "end": "842320"
  },
  {
    "text": "going to remember that you need those this is in your virtual memory table the",
    "start": "842320",
    "end": "848600"
  },
  {
    "text": "page table I'm going to point to that swap space like hey if you ever need it's right there okay but that physical",
    "start": "848600",
    "end": "856160"
  },
  {
    "text": "space is released for other more important you know urgent process than",
    "start": "856160",
    "end": "861959"
  },
  {
    "text": "need memory and then you you the next time you access this equate where is my",
    "start": "861959",
    "end": "868839"
  },
  {
    "text": "mapping you'll say oh there is no mapping anymore there is no physical block that maps to my virtual block so",
    "start": "868839",
    "end": "876000"
  },
  {
    "text": "you would detect it oh someone swapped this to dis page fault that's what's called",
    "start": "876000",
    "end": "881720"
  },
  {
    "text": "pageold and then things happen and you read it back well you know you don't do",
    "start": "881720",
    "end": "886920"
  },
  {
    "text": "anything as a process it's just all the operating system does all that and then read it back and then just put",
    "start": "886920",
    "end": "892720"
  },
  {
    "text": "it and it does not put it back in the same physical space no no no you don't care right it's going to put it",
    "start": "892720",
    "end": "899320"
  },
  {
    "text": "somewhere else and update the mapping table to point to these new physical Pages very beautiful design indeed",
    "start": "899320",
    "end": "907160"
  },
  {
    "text": "absolutely love it",
    "start": "907160",
    "end": "912480"
  },
  {
    "text": "now it it does however solve external fragmentation we don't have that problem",
    "start": "912480",
    "end": "918199"
  },
  {
    "text": "anymore right but we do have a problem with internal fragmentation",
    "start": "918199",
    "end": "924000"
  },
  {
    "start": "920000",
    "end": "1080000"
  },
  {
    "text": "now the page size actually matters",
    "start": "924000",
    "end": "929680"
  },
  {
    "text": "like how much do you allocate what is this fixed size thing that you're talking about is it 4 kilobyte that's",
    "start": "929680",
    "end": "935120"
  },
  {
    "text": "the default by the way 4 kilobyte well if I allocate 4 kilobyte and my processes are really efficient",
    "start": "935120",
    "end": "942480"
  },
  {
    "text": "and only is like few bytes like hey I just need a few bytes here three bytes here right and operating system are",
    "start": "942480",
    "end": "949880"
  },
  {
    "text": "pretty smart like if you allocate three and then you allocate another three bytes and look at five bytes it's going",
    "start": "949880",
    "end": "955160"
  },
  {
    "text": "to still reuse the same block of memory it's not going to like allocate a brand new block for you right so they're smart",
    "start": "955160",
    "end": "962040"
  },
  {
    "text": "but still some processes are not hungry and they're not as we say in Arabic sh",
    "start": "962040",
    "end": "967880"
  },
  {
    "text": "you know there's no Affinity in in these processes so they they use bulber memory",
    "start": "967880",
    "end": "973920"
  },
  {
    "text": "so larger block say they call huge Pages you know",
    "start": "973920",
    "end": "979600"
  },
  {
    "text": "uh waste increase internal fragmentation on the opposite side you know uh",
    "start": "979600",
    "end": "987199"
  },
  {
    "text": "database system I would say will benefit with larger",
    "start": "987199",
    "end": "993000"
  },
  {
    "text": "memory page sizes you know huge Pages no I don't I can't I can't remember what's",
    "start": "993000",
    "end": "999160"
  },
  {
    "text": "the huge page size not 4 kilobytes more than that like could be a Meg me if I'm",
    "start": "999160",
    "end": "1004920"
  },
  {
    "text": "not mistaken right so because because database systems like most of the database system is cashing right you hey",
    "start": "1004920",
    "end": "1011680"
  },
  {
    "text": "I'm I'm going to look at look all these shared buffers and put it in my memory I don't want to allocate like",
    "start": "1011680",
    "end": "1017199"
  },
  {
    "text": "small tiny blocks like there's a lot of management and mapping and all there is all stuff I don't want any of this I",
    "start": "1017199",
    "end": "1023319"
  },
  {
    "text": "want just like massive huge nice chunk of page give me map so the mapping",
    "start": "1023319",
    "end": "1029720"
  },
  {
    "text": "records decrease right the mapping table will decrease",
    "start": "1029720",
    "end": "1035558"
  },
  {
    "text": "naturally but that's not our topic our topic is internal fragmentation so now the more the page size the more these",
    "start": "1035559",
    "end": "1043918"
  },
  {
    "text": "gaps inside the page will be wasted and and",
    "start": "1043919",
    "end": "1048960"
  },
  {
    "text": "there is absolutely no way the operating system knows that oh you only use 10 of this maybe there is but most of the time",
    "start": "1048960",
    "end": "1056880"
  },
  {
    "text": "it's like hey you I allocated this for you maybe in the future you're going to use it so the OS is not going to touch",
    "start": "1056880",
    "end": "1062200"
  },
  {
    "text": "it so chances with paging we increase the fragmentation as well but it's now",
    "start": "1062200",
    "end": "1068039"
  },
  {
    "text": "it's internal it's internal to this block this black box that we allocated",
    "start": "1068039",
    "end": "1074120"
  },
  {
    "text": "internally there is fragments all over the place but it's internal now MCD is a beautifully solved this",
    "start": "1074120",
    "end": "1082760"
  },
  {
    "start": "1080000",
    "end": "1190000"
  },
  {
    "text": "problem fantastically solved this problem MCD no who created M was it",
    "start": "1082760",
    "end": "1089640"
  },
  {
    "text": "Facebook right this this Sagar guy no when he doesn't do all this uh monkey",
    "start": "1089640",
    "end": "1097520"
  },
  {
    "text": "business with uh what is it called this web 3 or or this VR Stu he actually",
    "start": "1097520",
    "end": "1105200"
  },
  {
    "text": "designed good really good systems but now he's just of doing all this uh you",
    "start": "1105200",
    "end": "1111080"
  },
  {
    "text": "know weird things no but yeah so what what what they did is they created this idea of slabs and they broke down the",
    "start": "1111080",
    "end": "1118919"
  },
  {
    "text": "slabs into smaller and smaller memory so now they basically outsourced the idea",
    "start": "1118919",
    "end": "1125520"
  },
  {
    "text": "of memory management completely to a low level such that even if you have",
    "start": "1125520",
    "end": "1130799"
  },
  {
    "text": "internal fragmentation you don't have that problem anymore because they",
    "start": "1130799",
    "end": "1136120"
  },
  {
    "text": "manage objects in it it smaller forms and they have like different size of",
    "start": "1136120",
    "end": "1141840"
  },
  {
    "text": "chunks I I believe they call it and if you release something they release that",
    "start": "1141840",
    "end": "1147440"
  },
  {
    "text": "object but it's still allocated to the operating system that MIM casd just",
    "start": "1147440",
    "end": "1152919"
  },
  {
    "text": "allocated the whole thing but then mimd as a software broke down all this memory",
    "start": "1152919",
    "end": "1160520"
  },
  {
    "text": "allocation and assigned it state if you will so there all this",
    "start": "1160520",
    "end": "1166440"
  },
  {
    "text": "object is allocated I made a whole course about MIM casd if you if you're interested it's also on the free code",
    "start": "1166440",
    "end": "1172240"
  },
  {
    "text": "Camp website go check it out but yeah have very brilliant design so they",
    "start": "1172240",
    "end": "1177320"
  },
  {
    "text": "solved internal fragmentation at the application Level so that's very",
    "start": "1177320",
    "end": "1183640"
  },
  {
    "text": "interesting but now let's come to the final question which is uh the cost of",
    "start": "1183640",
    "end": "1189600"
  },
  {
    "text": "virtual memory you know especially by solving external",
    "start": "1189600",
    "end": "1195000"
  },
  {
    "start": "1190000",
    "end": "1500000"
  },
  {
    "text": "fragmentation by having us map through different location physically I allocate",
    "start": "1195000",
    "end": "1201480"
  },
  {
    "text": "an array I allocate a a you know a slab of memory a th bytes but physically they",
    "start": "1201480",
    "end": "1209760"
  },
  {
    "text": "are even maybe in different dims altogether different DDR Rams you know there's like here and here and here with",
    "start": "1209760",
    "end": "1217360"
  },
  {
    "text": "time they are all over the place now to talk about this we need to",
    "start": "1217360",
    "end": "1222559"
  },
  {
    "text": "talk about how the CPU actually read data from ram C doesn't really read one",
    "start": "1222559",
    "end": "1229919"
  },
  {
    "text": "bite at a time no the the uh the DDR",
    "start": "1229919",
    "end": "1235200"
  },
  {
    "text": "controller I'm talk about like you know double data rate remember this is the",
    "start": "1235200",
    "end": "1240280"
  },
  {
    "text": "final you know the latest and greatest technology ddr5 H the minimum thing you can read is",
    "start": "1240280",
    "end": "1248520"
  },
  {
    "text": "64 bytes you know you make a request you want to read an instruction of a memory or you want to read one bite out of",
    "start": "1248520",
    "end": "1255679"
  },
  {
    "text": "specific address of a physical address no way you can get one bite it's a waste",
    "start": "1255679",
    "end": "1261480"
  },
  {
    "text": "of time to get one bite the minimum you can get is 64 you can get more if you want but 64 is what you get just it 64",
    "start": "1261480",
    "end": "1268720"
  },
  {
    "text": "bytes and that matches nicely The Cash Line on the L L1 uh cash on the CPU core itself so you",
    "start": "1268720",
    "end": "1277760"
  },
  {
    "text": "read 64 by so guess what now now back to C our beautiful cashing we are back in",
    "start": "1277760",
    "end": "1282960"
  },
  {
    "text": "engineer we know this stuff you know if I read something",
    "start": "1282960",
    "end": "1288679"
  },
  {
    "text": "and I asked for the first bite you know and I got 64 bite then the",
    "start": "1288679",
    "end": "1294559"
  },
  {
    "text": "next thing that I want to read is actually next to it is actually physically next to it the next B to it",
    "start": "1294559",
    "end": "1300720"
  },
  {
    "text": "guess what it's an L1 cache beautiful five NS very fast but that 64 byte fit",
    "start": "1300720",
    "end": "1309600"
  },
  {
    "text": "from memory that's a what a 100 nond I think 50 to 100 nond I know it's 100 n",
    "start": "1309600",
    "end": "1316760"
  },
  {
    "text": "it's still fast but but on the grand scheme of things it's uh you know it's a",
    "start": "1316760",
    "end": "1323039"
  },
  {
    "text": "it's it's uh it takes ages to create that 100",
    "start": "1323039",
    "end": "1328520"
  },
  {
    "text": "Nan so now Imagine This and That 100 second and the 100 NC is literally is",
    "start": "1328520",
    "end": "1337720"
  },
  {
    "text": "the most the cost of it is to open what is called the row in the DDR Ram you",
    "start": "1337720",
    "end": "1344679"
  },
  {
    "text": "know a row this is how Ram is consisting of there is the bank right I think it's",
    "start": "1344679",
    "end": "1351600"
  },
  {
    "text": "called the bank there's the rank and then there is uh rows and columns that's",
    "start": "1351600",
    "end": "1359360"
  },
  {
    "text": "what uh Rams are consisting of you know and a row have around about uh th 1,24",
    "start": "1359360",
    "end": "1368520"
  },
  {
    "text": "columns on average you know and when you actually want to read and the column",
    "start": "1368520",
    "end": "1376400"
  },
  {
    "text": "actually has the value and each column will have I think 64 bit you know which",
    "start": "1376400",
    "end": "1381440"
  },
  {
    "text": "is what eight bytes each column has 8 by 8 by 8 by8 by so technically modern Rams",
    "start": "1381440",
    "end": "1387440"
  },
  {
    "text": "a full row has around 8 kilobytes you know 8,000 bytes know give or take that",
    "start": "1387440",
    "end": "1395240"
  },
  {
    "text": "100 nond that we talked about is the cost of opening that entire row if you",
    "start": "1395240",
    "end": "1400840"
  },
  {
    "text": "want to take one bite or the whole 8,000 you're going to pay the 100 nond",
    "start": "1400840",
    "end": "1408120"
  },
  {
    "text": "cost to open this whole row and there's electronics that I'm not very honestly",
    "start": "1408120",
    "end": "1413279"
  },
  {
    "text": "I'm not very familiar with but that's the rule here no opening that row just",
    "start": "1413279",
    "end": "1418400"
  },
  {
    "text": "to read from that it gives you like you get access to a whole 8 kilobytes and",
    "start": "1418400",
    "end": "1424400"
  },
  {
    "text": "that El not doesn't is not sent to the CPU it's actually put in the row buffer in the ram itself it's actually a RW",
    "start": "1424400",
    "end": "1431320"
  },
  {
    "text": "buffer in the Ram uh controller the the memory controller in the DDR Ram so now",
    "start": "1431320",
    "end": "1437360"
  },
  {
    "text": "you have a cached 8 kilobyte think about that and now you read only 64 byte good that's",
    "start": "1437360",
    "end": "1446159"
  },
  {
    "text": "the minimum and you use the bytes use 64 bit bite you know use use the next one",
    "start": "1446159",
    "end": "1453000"
  },
  {
    "text": "and then use 64 by then you until you're done with the 64 by all of this nicely",
    "start": "1453000",
    "end": "1459080"
  },
  {
    "text": "cached you never actually go back to the run but then you say all right we talk",
    "start": "1459080",
    "end": "1465120"
  },
  {
    "text": "about contiguous memory right if it's if everything a physically contiguous that",
    "start": "1465120",
    "end": "1470240"
  },
  {
    "text": "8 kilobyte back to the 8 kilobyte I want 1,000 bytes that are contiguous or 64",
    "start": "1470240",
    "end": "1476840"
  },
  {
    "text": "all give me the next 64 byte you sending that request to get the",
    "start": "1476840",
    "end": "1482679"
  },
  {
    "text": "next 64 byte is is a signal to the uh to the Dem no the Dual module for how it's",
    "start": "1482679",
    "end": "1490720"
  },
  {
    "text": "called dual inline memory module and say give me the next 64 by guess",
    "start": "1490720",
    "end": "1496279"
  },
  {
    "text": "what that 100 a second is gone you don't need to do it because it's cached in the ram there is a raow buffer with all this",
    "start": "1496279",
    "end": "1504159"
  },
  {
    "start": "1500000",
    "end": "1740000"
  },
  {
    "text": "beautiful stuff in the same row you asked for that row it's the same row I'm asking for the same row it's the same",
    "start": "1504159",
    "end": "1509640"
  },
  {
    "text": "address physically located so now that's a cost there's like a NC here and there",
    "start": "1509640",
    "end": "1516399"
  },
  {
    "text": "but no cost physical contiguous is a good",
    "start": "1516399",
    "end": "1522080"
  },
  {
    "text": "thing and you consume the 64 by and then you do it again and you cash it and you",
    "start": "1522080",
    "end": "1527240"
  },
  {
    "text": "cash it and you do the next 64 so that's beautiful contiguous memory now take the",
    "start": "1527240",
    "end": "1532799"
  },
  {
    "text": "concept of virtual memory where things is completely scattered again it's it's it's the wor",
    "start": "1532799",
    "end": "1540159"
  },
  {
    "text": "case worst case scenario where things are scattered not necessarily but let's take a scenario where my virtual memory",
    "start": "1540159",
    "end": "1546799"
  },
  {
    "text": "looks contiguous to me of course there is the cost of translation between the virtual memory to physical memory and",
    "start": "1546799",
    "end": "1554600"
  },
  {
    "text": "the tlb and all that stuff that I'm not going to talk about but there's a mapping that needs to be done and this",
    "start": "1554600",
    "end": "1560360"
  },
  {
    "text": "mapping is done in the I think it's the page table it says you oh this Ram this",
    "start": "1560360",
    "end": "1567000"
  },
  {
    "text": "Frame this block that you reserved actually in this physical memory so you",
    "start": "1567000",
    "end": "1572200"
  },
  {
    "text": "you ask for that address you take the hit of the 100 nond and then you consume the 64 BYT and",
    "start": "1572200",
    "end": "1579080"
  },
  {
    "text": "then all of a sudden uh your next thing that you need",
    "start": "1579080",
    "end": "1586320"
  },
  {
    "text": "is actually a completely different physical address you mapped you changed the you you Chang the virtual you know",
    "start": "1586320",
    "end": "1592200"
  },
  {
    "text": "memory mapping and then all of a sudden oh this is a completely physical address it's a completely different place",
    "start": "1592200",
    "end": "1597279"
  },
  {
    "text": "completely different bank different complet row different different column all together so now what you do is like",
    "start": "1597279",
    "end": "1604440"
  },
  {
    "text": "you send that other request so oh you know what never mind I want this next 64 bit where where is it oh it's",
    "start": "1604440",
    "end": "1611919"
  },
  {
    "text": "here okay so you send it to the L says all right you got to wait dude I need to",
    "start": "1611919",
    "end": "1617039"
  },
  {
    "text": "close that that old row and open this new row you just took a hit another 100",
    "start": "1617039",
    "end": "1624320"
  },
  {
    "text": "nond and then you you do it again and after a few reads maybe you you're lucky",
    "start": "1624360",
    "end": "1631080"
  },
  {
    "text": "everything is continuous maybe you're not and everything is like it's a",
    "start": "1631080",
    "end": "1636559"
  },
  {
    "text": "different place another H again another H nobody talks about this because it's",
    "start": "1636559",
    "end": "1642000"
  },
  {
    "text": "it is so minuscule but I want to shed light on it it adds up",
    "start": "1642000",
    "end": "1649360"
  },
  {
    "text": "you know if you're reading all over data from all over the ram physically all over the ram I don't care about virtual",
    "start": "1649360",
    "end": "1655399"
  },
  {
    "text": "memory they fragmentation in this case external the cause of external",
    "start": "1655399",
    "end": "1662320"
  },
  {
    "text": "fragmentation which we solve with virtual memory created additional degradation if",
    "start": "1662320",
    "end": "1668720"
  },
  {
    "text": "you will these 100 nond now you might sayin you're",
    "start": "1668720",
    "end": "1674000"
  },
  {
    "text": "exaggerating uh not really because the the the cashes are large we're going to",
    "start": "1674000",
    "end": "1679039"
  },
  {
    "text": "cash all this stuff yeah I read here I read here I'm going to take it in the beginning but then the caches will fill",
    "start": "1679039",
    "end": "1684760"
  },
  {
    "text": "up uh we have beautiful large L3 caches L2 caches L1 caches well it's all about",
    "start": "1684760",
    "end": "1691039"
  },
  {
    "text": "that but this comes the same thing that I'm talking about with back in engineering we always solve things in a",
    "start": "1691039",
    "end": "1699360"
  },
  {
    "text": "I don't know it's a it's not an elegant solution you know we're just ignoring",
    "start": "1699360",
    "end": "1704960"
  },
  {
    "text": "the problem by by throwing money at it you know why don't we build efficient",
    "start": "1704960",
    "end": "1711200"
  },
  {
    "text": "software so now of course I'm not proposing any solution I'm not criticizing anything here I'm just State",
    "start": "1711200",
    "end": "1718159"
  },
  {
    "text": "stating it the way it is there is cost and and just sheding",
    "start": "1718159",
    "end": "1724399"
  },
  {
    "text": "light on this is so you know refreshing it's a refreshing thing to to understand",
    "start": "1724399",
    "end": "1730679"
  },
  {
    "text": "how things work you know and we don't really care about this thing anymore because like it's so minuscule but it",
    "start": "1730679",
    "end": "1737200"
  },
  {
    "text": "can can add up you know especially it can add up for you",
    "start": "1737200",
    "end": "1742919"
  },
  {
    "start": "1740000",
    "end": "2040000"
  },
  {
    "text": "know large code bases you know I know this is still in discussion but I'm going to throw it in anyway MySQL 8",
    "start": "1742919",
    "end": "1750559"
  },
  {
    "text": "versus MySQL 5 people are still you know flabbergasted or why MySQL",
    "start": "1750559",
    "end": "1758240"
  },
  {
    "text": "8 has huge performing performance you know degradation there is a lot of",
    "start": "1758240",
    "end": "1764760"
  },
  {
    "text": "regression with eight compared to five I just slow down all of a sudden and",
    "start": "1764760",
    "end": "1770960"
  },
  {
    "text": "there's one theory that goes on and I'm we're not saying going to say 100% that's true but that's that's from a one",
    "start": "1770960",
    "end": "1777960"
  },
  {
    "text": "MySQL developer that an X MySQL developer that that here's his theory it",
    "start": "1777960",
    "end": "1784480"
  },
  {
    "text": "says all right my SQL 8 added massive",
    "start": "1784480",
    "end": "1789519"
  },
  {
    "text": "code base they increased the code base you know exponentially there's a lot of",
    "start": "1789519",
    "end": "1794640"
  },
  {
    "text": "lines of code which Essen ually because code lives in",
    "start": "1794640",
    "end": "1799880"
  },
  {
    "text": "memory right and if you execute something says all right I want to",
    "start": "1799880",
    "end": "1805240"
  },
  {
    "text": "execute this piece of code the piece of code lives in memory right and lives",
    "start": "1805240",
    "end": "1811480"
  },
  {
    "text": "well in virtual memory okay which then the CPU needs the mmu to be specific in CPU needs to",
    "start": "1811480",
    "end": "1818679"
  },
  {
    "text": "translate that portion to the physical memory and that's called the a ma a page",
    "start": "1818679",
    "end": "1825360"
  },
  {
    "text": "entry mapping you know and that translation is actually you know stored because that translation",
    "start": "1825360",
    "end": "1832720"
  },
  {
    "text": "technically is stored in memory also it's called the page table says all right this virtual memory address in",
    "start": "1832720",
    "end": "1839679"
  },
  {
    "text": "this process is actually uh this physical memory address in in in this",
    "start": "1839679",
    "end": "1845039"
  },
  {
    "text": "memory right and there's mapping this page is this page this page is this page it's like actually just it's a very tiny",
    "start": "1845039",
    "end": "1852000"
  },
  {
    "text": "you know it's a very efficient way of storing things they're storing just the numbers like oh this logical this this",
    "start": "1852000",
    "end": "1857440"
  },
  {
    "text": "virtual page because in Virtual space we're always going from zero until whatever the number is now 4 gigabyte or",
    "start": "1857440",
    "end": "1864559"
  },
  {
    "text": "even more than that right but physical memory is just it's it's a one contiguous large thing for processes",
    "start": "1864559",
    "end": "1870919"
  },
  {
    "text": "they always start from zero or one or whatever right the virtual memory space is identical for all processes but the",
    "start": "1870919",
    "end": "1877960"
  },
  {
    "text": "mapping is different you know and that's where what makes virtual memory really attractive so now back to this MySQL a",
    "start": "1877960",
    "end": "1885600"
  },
  {
    "text": "they have a massive LGE code bases now if I read this again go back to the",
    "start": "1885600",
    "end": "1891679"
  },
  {
    "text": "fragmentation concept you're reading something you put it in memory and then all of a sudden said all right a",
    "start": "1891679",
    "end": "1897200"
  },
  {
    "text": "function code happened and this function code is a completely 180 it's like that",
    "start": "1897200",
    "end": "1902760"
  },
  {
    "text": "code is lives somewhere completely different memory well you need to fit",
    "start": "1902760",
    "end": "1909519"
  },
  {
    "text": "that instruction and that fing that instruction will require a memory read which which will you of course headit",
    "start": "1909519",
    "end": "1915960"
  },
  {
    "text": "through the row axis in Ram and you take the 100 nond and then that function calls another function and guess what",
    "start": "1915960",
    "end": "1921840"
  },
  {
    "text": "that function is not next to each other the code is not next to each other because it's so large scattered all over",
    "start": "1921840",
    "end": "1928639"
  },
  {
    "text": "the space so what happens is as you execute code most of your time is is spent you know mapping virtual memory to",
    "start": "1928639",
    "end": "1936679"
  },
  {
    "text": "physical because you're reading the page table which is in memory to map and you're caching those in something called",
    "start": "1936679",
    "end": "1943720"
  },
  {
    "text": "the tlb the uh the translation look has side buffer you know which Maps Okay",
    "start": "1943720",
    "end": "1949080"
  },
  {
    "text": "this is this this is this this is this but that that memory the tlb is also limited so as you store more mapping the",
    "start": "1949080",
    "end": "1956840"
  },
  {
    "text": "old mappings are are you know are discarded from the tlb no and you you",
    "start": "1956840",
    "end": "1962440"
  },
  {
    "text": "need to kind of invalidate these caches and stuff like that so so you're losing those if you're hit if your tlb cach is",
    "start": "1962440",
    "end": "1970000"
  },
  {
    "text": "hit that's good because you don't need to go back to memory to read the mapping but if you miss there's a tlb miss you",
    "start": "1970000",
    "end": "1976919"
  },
  {
    "text": "have you have to go back to memory read it and then perhaps the tlb is full you have to you know it's an lru you have to",
    "start": "1976919",
    "end": "1984639"
  },
  {
    "text": "discard the old stuff to make memory for the new one so you're spending time reading from all over the place and then",
    "start": "1984639",
    "end": "1991159"
  },
  {
    "text": "translating and then executing code you that's one Theory the pay there's a lot",
    "start": "1991159",
    "end": "1997159"
  },
  {
    "text": "of function calls because we we know like inlining kind of help right you",
    "start": "1997159",
    "end": "2003279"
  },
  {
    "text": "want as you execute code you want the code is be to be nice contiguous needs to each other CU for the same reasons we",
    "start": "2003279",
    "end": "2010840"
  },
  {
    "text": "talked about memory access next to each other beautifully but if you keep like jumping",
    "start": "2010840",
    "end": "2017399"
  },
  {
    "text": "oh call Print F oh print f is all over there okay let's go there fix that",
    "start": "2017399",
    "end": "2022440"
  },
  {
    "text": "memory and it's going to be cached sure but then if you have a lot of function",
    "start": "2022440",
    "end": "2027600"
  },
  {
    "text": "calls and those function calls are knock next to each other physically they might",
    "start": "2027600",
    "end": "2032799"
  },
  {
    "text": "be next to each other virtually again but they are not next next to each other",
    "start": "2032799",
    "end": "2038840"
  },
  {
    "text": "physically and that will cause you you're reading cash misses cash eviction",
    "start": "2038840",
    "end": "2044360"
  },
  {
    "start": "2040000",
    "end": "2299000"
  },
  {
    "text": "cash and then you're you have another problem with multiprocessing which is",
    "start": "2044360",
    "end": "2049398"
  },
  {
    "text": "like oh you have one core this is another core this core read something and changed the mapping and now this",
    "start": "2049399",
    "end": "2056720"
  },
  {
    "text": "core is having the old tlb mapping so you need to shoot down the old tlb entry",
    "start": "2056720",
    "end": "2062800"
  },
  {
    "text": "and use this new one so this this thing is complex operating system as a I make this course OS is one of the most",
    "start": "2062800",
    "end": "2070760"
  },
  {
    "text": "complex you know pieces of software out there you know then this scheduling then there is process you know context",
    "start": "2070760",
    "end": "2078280"
  },
  {
    "text": "switches and yeah so that's that's another thing I wanted to discuss so we talked about fragmentation and",
    "start": "2078280",
    "end": "2084240"
  },
  {
    "text": "fragmentation memory as a summary there is external fragmentation where you have",
    "start": "2084240",
    "end": "2089679"
  },
  {
    "text": "space but they are all over the place you know virtual memory solve this with",
    "start": "2089679",
    "end": "2095480"
  },
  {
    "text": "paging which is fixed size allocation but then you have another problem introduced which is internal",
    "start": "2095480",
    "end": "2101800"
  },
  {
    "text": "fragmentation those blocks Unfortunately they have spaces we said okay we closed our eyes and says okay I don't care uh",
    "start": "2101800",
    "end": "2108240"
  },
  {
    "text": "who cares it's just space you know uh but then even with external",
    "start": "2108240",
    "end": "2114079"
  },
  {
    "text": "fragmentation we have the problem of",
    "start": "2114079",
    "end": "2119560"
  },
  {
    "text": "fragmented what looks contiguous to you is actually fragmented in in physical",
    "start": "2119560",
    "end": "2126200"
  },
  {
    "text": "memory and we talked about the cost of retrieving why did I say this way retrieving retrieving contiguous memory",
    "start": "2126200",
    "end": "2135200"
  },
  {
    "text": "from uncontinuous or discontiguous fragmented physical locations and that",
    "start": "2135200",
    "end": "2142000"
  },
  {
    "text": "has a cast no just like the whole old hard drive thing that when I started",
    "start": "2142000",
    "end": "2147240"
  },
  {
    "text": "this podcast the hard drive has this needle and it's just moving",
    "start": "2147240",
    "end": "2154359"
  },
  {
    "text": "around from all the sprad to to read the data right that is of course way slower",
    "start": "2154359",
    "end": "2160200"
  },
  {
    "text": "that you're talking milliseconds right but now with the ram you still have the cast right with with at least the ram we",
    "start": "2160200",
    "end": "2168240"
  },
  {
    "text": "know it today you know the uh",
    "start": "2168240",
    "end": "2174480"
  },
  {
    "text": "uh ISD right is it called ISD no sdam is the the synchronous one the fast one",
    "start": "2174480",
    "end": "2180359"
  },
  {
    "text": "we're talking about the asynchronous no we're talking about synchronous yes synchronous d Dynamic",
    "start": "2180359",
    "end": "2187200"
  },
  {
    "text": "Ram which is US uses capacitor which needs refreshing",
    "start": "2187200",
    "end": "2192680"
  },
  {
    "text": "okay yeah so uh I don't know about to be honest I don't know about the the ssds",
    "start": "2192680",
    "end": "2199359"
  },
  {
    "text": "I'm not really well versed about nand technology in the ssds is this the cost",
    "start": "2199359",
    "end": "2205640"
  },
  {
    "text": "the same cost how if I want to read uh a block in in a specific place in SSD versus at",
    "start": "2205640",
    "end": "2214720"
  },
  {
    "text": "the end I'm not really traveling per se I'm sending the request even in the Ryme you're not really traveling even if",
    "start": "2214720",
    "end": "2220800"
  },
  {
    "text": "you're accessing Row one and row thousand it's not about the travel speed is about the opening and closing cost",
    "start": "2220800",
    "end": "2228319"
  },
  {
    "text": "right we opening the row you have to open all the columns and that takes time",
    "start": "2228319",
    "end": "2233520"
  },
  {
    "text": "to you know refresh all the you know and do all the Ramy stuff you know but in in",
    "start": "2233520",
    "end": "2240040"
  },
  {
    "text": "the N technology is might be different there is is there a cost to there's",
    "start": "2240040",
    "end": "2245440"
  },
  {
    "text": "other cost to of course you know ssds and you know uh you know garbage",
    "start": "2245440",
    "end": "2251119"
  },
  {
    "text": "collection and whatnot and there's also a mapping in the ssds to map between you",
    "start": "2251119",
    "end": "2257880"
  },
  {
    "text": "know logical block adolesence to physical block adolesence but that's not our topic the fragmentation here in this",
    "start": "2257880",
    "end": "2263599"
  },
  {
    "text": "particular cases I don't think it's a problem per se in ssds yeah because there is no this this",
    "start": "2263599",
    "end": "2272079"
  },
  {
    "text": "cost of opening something in the net as far as I know I might be wrong though but yeah that's what I want to talk",
    "start": "2272079",
    "end": "2278520"
  },
  {
    "text": "about fragmentation very interesting topic very uh rarely talked about so I",
    "start": "2278520",
    "end": "2285200"
  },
  {
    "text": "wanted to throw it in here and guys call me out if I said something that you",
    "start": "2285200",
    "end": "2290359"
  },
  {
    "text": "might disagree with and uh let's have some discussion what do you guys think let me know in the comment section below",
    "start": "2290359",
    "end": "2295920"
  },
  {
    "text": "going to see you in the next one you guys stay awesome",
    "start": "2295920",
    "end": "2300760"
  }
]