[
  {
    "start": "0",
    "end": "280000"
  },
  {
    "text": "memcache d is a simple in-memory key value store",
    "start": "0",
    "end": "5279"
  },
  {
    "text": "written in c i was originally i think written in perl and then rear a tendency this is",
    "start": "5279",
    "end": "11200"
  },
  {
    "text": "back in 2003 so it's been a while and it has been popular with companies",
    "start": "11200",
    "end": "17520"
  },
  {
    "text": "such as facebook netflix wikipedia facebook i think pushed it to its",
    "start": "17520",
    "end": "22960"
  },
  {
    "text": "limit you know and the most uh and the reason is why popular is",
    "start": "22960",
    "end": "29039"
  },
  {
    "text": "because of its simplicity and we're going to talk about that i know we throw the word simple a lot these days but",
    "start": "29039",
    "end": "35360"
  },
  {
    "text": "memcached is truly simple i mean",
    "start": "35360",
    "end": "40480"
  },
  {
    "text": "if you're looking for advanced features it's not here it was designed to be simple",
    "start": "40480",
    "end": "45600"
  },
  {
    "text": "solve the problems of the web back in 2003 which is we want to help alleviate",
    "start": "45600",
    "end": "51440"
  },
  {
    "text": "the queries to the database we're you know we're the databases are taking a hit you know so let's cash things",
    "start": "51440",
    "end": "58960"
  },
  {
    "text": "although i usually do not agree with having a cash to solve a slow query",
    "start": "58960",
    "end": "66640"
  },
  {
    "text": "because i think personally i think it's a cop-out you know to to just add a cash when you have a slow query you have to",
    "start": "66640",
    "end": "72880"
  },
  {
    "text": "understand why it's slow you have to understand why it exactly taking time",
    "start": "72880",
    "end": "78000"
  },
  {
    "text": "why there are a lot of logic reads and how to minimize it and that's another story for another day but sometimes you",
    "start": "78000",
    "end": "84400"
  },
  {
    "text": "need a cache of course right and then memcached was born of course there are alternatives such as",
    "start": "84400",
    "end": "90400"
  },
  {
    "text": "redis i made a video about it but this video is to it's a crash course of memcache d",
    "start": "90400",
    "end": "96880"
  },
  {
    "text": "we're going to dive into the agenda here if you're watching this on youtube there will be",
    "start": "96880",
    "end": "102640"
  },
  {
    "text": "uh chapters where you can jump into the interesting part of the things but it's an in-memory database we're gonna",
    "start": "102640",
    "end": "109040"
  },
  {
    "text": "talk about memory management you might say why well we're going to find out memory measurements not easy at",
    "start": "109040",
    "end": "115680"
  },
  {
    "text": "all you know it's not just like hey just throw things in memory and then read it it's a little bit more complicated than",
    "start": "115680",
    "end": "121680"
  },
  {
    "text": "that going to talk about the lru that least recently used which was designed to avoid",
    "start": "121680",
    "end": "129280"
  },
  {
    "text": "growing the memory of this instance unlimitedly right because",
    "start": "129280",
    "end": "134400"
  },
  {
    "text": "you have to have a some sort of a mechanism to evict all the entries that has been never used",
    "start": "134400",
    "end": "142080"
  },
  {
    "text": "that's why you cannot really rely on memcache d to have a value always there",
    "start": "142080",
    "end": "147520"
  },
  {
    "text": "it was never the goal of this cache right unlike credits right as if you if",
    "start": "147520",
    "end": "153599"
  },
  {
    "text": "you start something it's going to be there and you told it to be there forever it's going to stay forever it will make sure to stay forever memcached",
    "start": "153599",
    "end": "160879"
  },
  {
    "text": "does not guarantee that and you can argue that this is actually a feature and you could argue that this is",
    "start": "160879",
    "end": "166080"
  },
  {
    "text": "something you don't want you know so tread lightly",
    "start": "166080",
    "end": "171360"
  },
  {
    "text": "throw it we're going to talk about the threading model because you have to have multiple threads if you want to serve a",
    "start": "171360",
    "end": "176959"
  },
  {
    "text": "lot a lot a lot of clients with a lot a lot a lot of tcp connection connected to this thing read and write",
    "start": "176959",
    "end": "183760"
  },
  {
    "text": "we're going to go through examples of a read example for that right and okay",
    "start": "183760",
    "end": "190319"
  },
  {
    "text": "open the hood and look what is inside this beautiful thing",
    "start": "190319",
    "end": "195680"
  },
  {
    "text": "locking model obviously two people trying to write in the same item it's not as advanced as acid",
    "start": "195680",
    "end": "203519"
  },
  {
    "text": "obviously where you have isolation levels now it's a serialized model where",
    "start": "203519",
    "end": "209760"
  },
  {
    "text": "we try not to have two people read the same item at the same time or write the",
    "start": "209760",
    "end": "215360"
  },
  {
    "text": "same item at the same time so locking and we're gonna talk about the old model and the new model",
    "start": "215360",
    "end": "221120"
  },
  {
    "text": "that's where you really try to understand how things are built is completely",
    "start": "221120",
    "end": "226799"
  },
  {
    "text": "different from the way we explain it distributed cache i know they say it's a distributed cache but i kind of don't",
    "start": "226799",
    "end": "233040"
  },
  {
    "text": "like to say that because in itself memcache d is not distributed it's just",
    "start": "233040",
    "end": "238799"
  },
  {
    "text": "when you spit up a memcache the instance three memcached they don't know about each other and they will never be right",
    "start": "238799",
    "end": "245360"
  },
  {
    "text": "the client is responsible for the distribution so i kind of reluctant to say it's a distributed cash i know",
    "start": "245360",
    "end": "250480"
  },
  {
    "text": "people call it a distributed cash i don't like to do that but hey it is a distributed cache if you if you",
    "start": "250480",
    "end": "257440"
  },
  {
    "text": "if you put the distribution on the client side and i think this is part of the beautiful simple design they",
    "start": "257440",
    "end": "264639"
  },
  {
    "text": "they on purpose they didn't make it distributed to make it simple and then",
    "start": "264639",
    "end": "269840"
  },
  {
    "text": "we're going to go through a demo we're going to use docker because you can spin up a lot of instances in in docker",
    "start": "269840",
    "end": "276639"
  },
  {
    "text": "really easily let's do that so in memory key value store what's that really uh we're going to talk about some",
    "start": "276639",
    "end": "283360"
  },
  {
    "start": "280000",
    "end": "465000"
  },
  {
    "text": "terminology here specific to memcache d an item that's what they call it an item",
    "start": "283360",
    "end": "289280"
  },
  {
    "text": "is really what consists of a key and value a key is usually should be unique right and a value could be literally anything",
    "start": "289280",
    "end": "296880"
  },
  {
    "text": "a key has to be a string and it maxed out a 250 character you can",
    "start": "296880",
    "end": "302479"
  },
  {
    "text": "see the limits right that's why i think uh redis kind of won the cash game when",
    "start": "302479",
    "end": "308639"
  },
  {
    "text": "it comes to this thing because memcached has a lot of limits and",
    "start": "308639",
    "end": "313759"
  },
  {
    "text": "this kind of you know crippled some people from using",
    "start": "313759",
    "end": "319039"
  },
  {
    "text": "this cache because of these limits right but you can argue also the simplicity of this design and if you can work around",
    "start": "319039",
    "end": "326160"
  },
  {
    "text": "the the design to use memcached it it's actually pretty nice right",
    "start": "326160",
    "end": "333440"
  },
  {
    "text": "when they take key as a string they did that for a simplicity reason to right if",
    "start": "333440",
    "end": "338960"
  },
  {
    "text": "you support like dates uh or or i don't know like blobs as keys then things become really complicated and that shows",
    "start": "338960",
    "end": "346160"
  },
  {
    "text": "in the architecture and if there is a bug it's really hard to track down right",
    "start": "346160",
    "end": "352560"
  },
  {
    "text": "and the value can be any type uh it's by default one megabyte again another",
    "start": "352560",
    "end": "357600"
  },
  {
    "text": "limitation in memcache d you know i i you can see that i i talk about limitation but these limitations",
    "start": "357600",
    "end": "363600"
  },
  {
    "text": "technically to me i i see them as features you know because they didn't claim to be like the best in the world",
    "start": "363600",
    "end": "369840"
  },
  {
    "text": "they said hey we are designed to be simple and i appreciate and i completely",
    "start": "369840",
    "end": "375759"
  },
  {
    "text": "love that you know when you say i want to build something simple the simple",
    "start": "375759",
    "end": "380880"
  },
  {
    "text": "thing has limitations right the simple thing will by design have limitation when you look at the big",
    "start": "380880",
    "end": "387759"
  },
  {
    "text": "picture right it's not going to have like tons of features right so yeah you can configure this to to",
    "start": "387759",
    "end": "393280"
  },
  {
    "text": "increase it but again it's not really a good idea all the time uh keys have expiration date ttls right",
    "start": "393280",
    "end": "399759"
  },
  {
    "text": "time to lives and uh even that don't rely on that right even if you put like",
    "start": "399759",
    "end": "404880"
  },
  {
    "text": "a key that has like a one hour and your memory is filled the lru will can kick",
    "start": "404880",
    "end": "410720"
  },
  {
    "text": "in and if you never use that key it's gonna get affected and they tell you that right hey memcache d is a transient",
    "start": "410720",
    "end": "418240"
  },
  {
    "text": "we're not gonna make sure that it's actually persisted it's not supposed to be that right",
    "start": "418240",
    "end": "425360"
  },
  {
    "text": "again always go back to the the requirements here they never meant right for this to be a persistent cache",
    "start": "425360",
    "end": "433039"
  },
  {
    "text": "forever right you don't rely on that you can use it to help you avoid expensive",
    "start": "433039",
    "end": "440240"
  },
  {
    "text": "queries but yeah be ready at any time that this value is not going to be there everything is stored in memory right",
    "start": "440240",
    "end": "447360"
  },
  {
    "text": "that's by the time cash memcache d again don't confuse memcache deal with memcachedb that's a completely different",
    "start": "447360",
    "end": "453599"
  },
  {
    "text": "project and i think it's abandoned since 29 2009 right but yeah memcached is still going",
    "start": "453599",
    "end": "460319"
  },
  {
    "text": "and facebook and i think mark zuckerberg gave a presentation about memcache d as well as",
    "start": "460319",
    "end": "465840"
  },
  {
    "start": "465000",
    "end": "960000"
  },
  {
    "text": "at some point how they tuned it to its maximal values let's talk about memory",
    "start": "465840",
    "end": "471360"
  },
  {
    "text": "management here's the memory right when you allocate items you know when you say hey i want to allocate an array and i'm",
    "start": "471360",
    "end": "477840"
  },
  {
    "text": "going to look at an integer and i will allocate here's a block of memory you know",
    "start": "477840",
    "end": "483680"
  },
  {
    "text": "these items that you allocate and even in your program today they're going to go in random places now they",
    "start": "483680",
    "end": "490720"
  },
  {
    "text": "yes the process has a dedicated memory area but when you allocate these things",
    "start": "490720",
    "end": "496000"
  },
  {
    "text": "go random so the grain is allocated they're going to go to random places right yeah initially they might be consequent",
    "start": "496000",
    "end": "503840"
  },
  {
    "text": "but as you uh remove and free items you're going to end up with these gaps",
    "start": "503840",
    "end": "509360"
  },
  {
    "text": "so we might say what's wrong with these gaps the problem is like this is called the fragmentation what's wrong with",
    "start": "509360",
    "end": "514719"
  },
  {
    "text": "fragmentation well you're going to have like a little bit of few bites here a few bites here a few bites here for this here but if you want like a big",
    "start": "514719",
    "end": "522320"
  },
  {
    "text": "bulk of memory location consecutive let's you want one meg you have one mig but it's fragmented and",
    "start": "522320",
    "end": "529200"
  },
  {
    "text": "guess what if it's fragmented you cannot use it you cannot just allocate here oh in my part and the next part here and",
    "start": "529200",
    "end": "535040"
  },
  {
    "text": "this part here i think that the operating system allows you to do that maybe",
    "start": "535040",
    "end": "540160"
  },
  {
    "text": "but then it will it will thrash left and right to collect what you have right we have the same",
    "start": "540160",
    "end": "545920"
  },
  {
    "text": "problem with hard drive i guess right back in the days or fragmentation where the the seek you",
    "start": "545920",
    "end": "552800"
  },
  {
    "text": "know the needle has to to go multiple places to fetch your files because it's a circle right",
    "start": "552800",
    "end": "560080"
  },
  {
    "text": "this this disk and has that if if you store a file and you start editing the file the files will go to multiple",
    "start": "560080",
    "end": "566640"
  },
  {
    "text": "sectors and to read that file back you have to go sector one",
    "start": "566640",
    "end": "572080"
  },
  {
    "text": "this was supposed to be like a rotating disk i failed miserably but you get a",
    "start": "572800",
    "end": "578240"
  },
  {
    "text": "point right so memory fragmentation is bad we try to avoid it right new items can on can no longer fit so what what do",
    "start": "578240",
    "end": "584160"
  },
  {
    "text": "they do so memcached at least what they did is they allocate pages",
    "start": "584160",
    "end": "591360"
  },
  {
    "text": "instead even if they don't use it they say hey when you start i look at the whole page",
    "start": "591360",
    "end": "597760"
  },
  {
    "text": "one meg again that's that's the design right that's the",
    "start": "597760",
    "end": "602959"
  },
  {
    "text": "reason why we have one value up to one megabyte you cannot go beyond that so i say hey let's start with the one meg",
    "start": "602959",
    "end": "609279"
  },
  {
    "text": "so if they allocate they are located at one meg the whole thing they don't use it",
    "start": "609279",
    "end": "614320"
  },
  {
    "text": "technically to the operating system you the cache has used one megabyte it",
    "start": "614320",
    "end": "620000"
  },
  {
    "text": "doesn't know it right that it's not actively using it that client us",
    "start": "620000",
    "end": "625440"
  },
  {
    "text": "connecting to memcached we're not probably we're using like part of that memory does that make sense but this",
    "start": "625440",
    "end": "631279"
  },
  {
    "text": "avoids fragmentation right because now all of this just one big page with a lot",
    "start": "631279",
    "end": "637279"
  },
  {
    "text": "of empty space right but it is allocated and then there's this idea of chunks",
    "start": "637279",
    "end": "643519"
  },
  {
    "text": "right so the pages are broken down into equal size of the vehicle chunk so",
    "start": "643519",
    "end": "651040"
  },
  {
    "text": "um keep these in mind the terminology in mind the chunk is a fixed size and what",
    "start": "651040",
    "end": "656800"
  },
  {
    "text": "determines the chunk size is actually something called the slab class right and the slab is think of a slab every",
    "start": "656800",
    "end": "663920"
  },
  {
    "text": "time i hear the word slap i remember dark souls you know it's a video game where you have the last item that you",
    "start": "663920",
    "end": "670399"
  },
  {
    "text": "require in order to upgrade your weapon it's called the titanite slab where it's just like really large",
    "start": "670399",
    "end": "677680"
  },
  {
    "text": "rock that you use in order to upgrade your weapon it's it's basically a a big thing",
    "start": "677680",
    "end": "684480"
  },
  {
    "text": "a slab of meat they say right it's just a big thing that's what it means so this idea of slab and slap classes will",
    "start": "684480",
    "end": "691279"
  },
  {
    "text": "always show up here so it's like a big portion of memory",
    "start": "691279",
    "end": "696399"
  },
  {
    "text": "a slab class is what defined the chunk size right so there is there will be a slab class of 40 bytes there should be a",
    "start": "696399",
    "end": "703680"
  },
  {
    "text": "slap class of a one meg so the chunk sizes will be 44 bytes right and the",
    "start": "703680",
    "end": "710720"
  },
  {
    "text": "chunk sizes for a slab class of that type is one meg so we're going to show an example to consider to show that of",
    "start": "710720",
    "end": "717200"
  },
  {
    "text": "stuff and the pages consist of fixed chunk size right items are stored in chunks here's the",
    "start": "717200",
    "end": "723279"
  },
  {
    "text": "very important item so your item will be stored in the chunk your chunk size can",
    "start": "723279",
    "end": "728320"
  },
  {
    "text": "be let's say uh 100 bytes right if it's 100 bytes and your item which includes the key and",
    "start": "728320",
    "end": "735279"
  },
  {
    "text": "the value is less than 100 you're going to include the whole chunk right so if it's 90 byte",
    "start": "735279",
    "end": "741360"
  },
  {
    "text": "you lost 10 bytes within that chunk nothing to do about it sorry",
    "start": "741360",
    "end": "746399"
  },
  {
    "text": "that's one limitation here so there will be a free space a tiny free space in the",
    "start": "746399",
    "end": "751760"
  },
  {
    "text": "trunk and obviously each slab class has a fixed chunk size so that's how they are determined it's going to be clear as",
    "start": "751760",
    "end": "757680"
  },
  {
    "text": "we go through them obviously avoid memory fragmentation here's an example right so here we have",
    "start": "757680",
    "end": "764320"
  },
  {
    "text": "a slab class with a chunk size of 72 x sub class 1 and slab class 43 for",
    "start": "764320",
    "end": "772000"
  },
  {
    "text": "example the chunk size is one meg so you have in a single page right so slab",
    "start": "772000",
    "end": "778079"
  },
  {
    "text": "class have multiple pages and sometimes they call them also these called slabs the word slab in the documentation is so",
    "start": "778079",
    "end": "785440"
  },
  {
    "text": "overloaded and i've seen people use it one over the other so i avoid using it the word slap so it's lab class and",
    "start": "785440",
    "end": "792560"
  },
  {
    "text": "they're pages right so this page in this case we said one meg right and",
    "start": "792560",
    "end": "798160"
  },
  {
    "text": "the chunks are 72 divided that means we have 1 14 563",
    "start": "798160",
    "end": "804079"
  },
  {
    "text": "chunks per page but each chunk is 72 byte right so if you have an item around",
    "start": "804079",
    "end": "810079"
  },
  {
    "text": "72 byte fits nicely in this but if your item is larger",
    "start": "810079",
    "end": "816079"
  },
  {
    "text": "let's say 900k then oh it doesn't fit this slab class",
    "start": "816079",
    "end": "821120"
  },
  {
    "text": "so we need to uh let's let's find out what is the sub class for this item oh it's epsilon 43",
    "start": "821120",
    "end": "827279"
  },
  {
    "text": "because the closest one meg and guess what the one the one meg class",
    "start": "827279",
    "end": "834240"
  },
  {
    "text": "slap class has this entire page is one chunk",
    "start": "834240",
    "end": "839760"
  },
  {
    "text": "right so this is really important to understand here right so that's how they allocate memories this",
    "start": "839760",
    "end": "846560"
  },
  {
    "text": "we're looking at the internal architecture of uh memcached here all right let's go for our example i new",
    "start": "846560",
    "end": "853199"
  },
  {
    "text": "item 40 byte 40 byte the closest thing is this guy right slab class one let's",
    "start": "853199",
    "end": "859440"
  },
  {
    "text": "allocate memory and then boom we don't look at memory this memory is already allocated right we just store",
    "start": "859440",
    "end": "866800"
  },
  {
    "text": "the item right in this chunk and then we start adding pointers and stuff like that here",
    "start": "866800",
    "end": "872880"
  },
  {
    "text": "so now our item is right here and we're going to talk about the hash table and stuff like that but this is",
    "start": "872880",
    "end": "878959"
  },
  {
    "text": "just again memory management let's say i have a new item 900k oh this fits right",
    "start": "878959",
    "end": "884480"
  },
  {
    "text": "here so one big chunk in one page right so that's interesting",
    "start": "884480",
    "end": "889519"
  },
  {
    "text": "let's say another a new item 40 bytes but guess what slapcast a slab class one",
    "start": "889519",
    "end": "896480"
  },
  {
    "text": "because that's the what the chunk size is fits is nicely but guess what we have two pages they're all completely",
    "start": "896480",
    "end": "904079"
  },
  {
    "text": "full so i cannot insert this what do we do create a brand new page",
    "start": "904079",
    "end": "910639"
  },
  {
    "text": "put that thing here does that make sense so we i look at the new page and you when",
    "start": "910639",
    "end": "915839"
  },
  {
    "text": "you go to the demo we're going to see all this stuff right we're going to do a stats and see like oh how number of pages are located is this right",
    "start": "915839",
    "end": "922800"
  },
  {
    "text": "so it's just i i absolutely love how they did this it's interesting obviously it doesn't have limitation of",
    "start": "922800",
    "end": "929199"
  },
  {
    "text": "course but you're gonna see that depends on the sizes of the item you say and once you",
    "start": "929199",
    "end": "935199"
  },
  {
    "text": "really understand how things work your you can architect your application specifically",
    "start": "935199",
    "end": "941360"
  },
  {
    "text": "the back in here front-end doesn't really talk to memcached at all right the back end here can be architected so",
    "start": "941360",
    "end": "948639"
  },
  {
    "text": "that you can choose the perfect items right to fit this entire thing right",
    "start": "948639",
    "end": "955440"
  },
  {
    "text": "you're not gonna just choose haphazardly right that's how you know your craft effectively all right let's get to the",
    "start": "955440",
    "end": "962480"
  },
  {
    "start": "960000",
    "end": "1517000"
  },
  {
    "text": "meat lru least recently used you know the main",
    "start": "962480",
    "end": "968320"
  },
  {
    "text": "problem with memory is it's limited you know and even if memcache d allocated",
    "start": "968320",
    "end": "973440"
  },
  {
    "text": "certain amount of memory if you store a lot a lot of keys even with good expiration date",
    "start": "973440",
    "end": "980720"
  },
  {
    "text": "memory can get full what do you do do you block new inserts",
    "start": "980720",
    "end": "987199"
  },
  {
    "text": "i would say that's that's one feature that you can add i suppose but",
    "start": "987199",
    "end": "993360"
  },
  {
    "text": "but memcached they don't allow you to do they won't let you go to that state you know if the memory",
    "start": "993360",
    "end": "999839"
  },
  {
    "text": "is be about to be full then anything that hasn't been used for a very long time they will",
    "start": "999839",
    "end": "1007120"
  },
  {
    "text": "release it that's another reason where memcache d is a transient memory it do",
    "start": "1007120",
    "end": "1013199"
  },
  {
    "text": "not rely on a key even if you set the expire for an hour do not rely to that",
    "start": "1013199",
    "end": "1018320"
  },
  {
    "text": "key to be to be there in an hour it can't go any time and that's another",
    "start": "1018320",
    "end": "1023519"
  },
  {
    "text": "limitation that's another feature right i say limitation and a feature at the",
    "start": "1023519",
    "end": "1028798"
  },
  {
    "text": "same time because it is it is a feature right and it's to some people it's a limitation and how",
    "start": "1028799",
    "end": "1034160"
  },
  {
    "text": "do they do that right they use something called the link list have you ever heard about this before",
    "start": "1034160",
    "end": "1040798"
  },
  {
    "text": "uh 20 years ago 21 years ago uh in the university i took a course and the cs",
    "start": "1040799",
    "end": "1047600"
  },
  {
    "text": "cs101 they talked about linkedlist and that is pretty much the only time you know my entire professional career i",
    "start": "1047600",
    "end": "1054799"
  },
  {
    "text": "ever use the link list that's probably i'm not saying that's just the case with my the application i",
    "start": "1054799",
    "end": "1061039"
  },
  {
    "text": "wrote is all high-level languages i never had to write a database or a memcache you know so i never use the",
    "start": "1061039",
    "end": "1068000"
  },
  {
    "text": "linked list right so it doesn't doesn't mean that it's it's a useless structure but it is it's a",
    "start": "1068000",
    "end": "1073679"
  },
  {
    "text": "important data structure why because the least recently used is a",
    "start": "1073679",
    "end": "1080240"
  },
  {
    "text": "linked list there is a head and there's a tail and every item is linked to each other so",
    "start": "1080240",
    "end": "1086320"
  },
  {
    "text": "if all these items that you add are the in this architecture they are in the linked list and there is",
    "start": "1086320",
    "end": "1092720"
  },
  {
    "text": "every slap class has its own lru right so if i for example access an item that",
    "start": "1092720",
    "end": "1099039"
  },
  {
    "text": "it happens to be in the tail it will be popped and go back to the head so there is a cost to accessing an item",
    "start": "1099039",
    "end": "1106240"
  },
  {
    "text": "there is a cost there is a cost of removing this chain putting that back",
    "start": "1106240",
    "end": "1111280"
  },
  {
    "text": "pulling the head to this point this guy to this guy point this guy to this guy that's how you do a link list right",
    "start": "1111280",
    "end": "1117600"
  },
  {
    "text": "so every time you access an item it goes back to the head so items that are not",
    "start": "1117600",
    "end": "1123280"
  },
  {
    "text": "used they will automatically be pushed down to the tail and if the memory is out of reach basically",
    "start": "1123280",
    "end": "1130320"
  },
  {
    "text": "these items will be removed from the tail but also another thing with this linked list",
    "start": "1130320",
    "end": "1136720"
  },
  {
    "text": "is like with threads if you with which memcache d is is a multi-threaded app",
    "start": "1136720",
    "end": "1143039"
  },
  {
    "text": "how can you have multiple threads read at the same items right you can't you",
    "start": "1143039",
    "end": "1148400"
  },
  {
    "text": "have to lock this structure you know if people who done multi-threading you have",
    "start": "1148400",
    "end": "1153440"
  },
  {
    "text": "to you have to lock it right and the moment you do locking if you if you know about something about databases which i",
    "start": "1153440",
    "end": "1159840"
  },
  {
    "text": "write is a course on database engineering check out check it out it's actually right here",
    "start": "1159840",
    "end": "1165559"
  },
  {
    "text": "database.jso.com i talk about all this stuff you know in details and fundamental details you",
    "start": "1165559",
    "end": "1171360"
  },
  {
    "text": "know so don't expect like sequel syntaxes in my courses not like that right i talk about fundamentals which",
    "start": "1171360",
    "end": "1177280"
  },
  {
    "text": "usually then build up and see how the client is built out right",
    "start": "1177280",
    "end": "1183440"
  },
  {
    "text": "but yeah locks is a very critical concept here you have to lock it to avoid this you know mutation you know",
    "start": "1183440",
    "end": "1190400"
  },
  {
    "text": "corruption right but yeah it's a cost and there is an lru claw crawler and a demon that",
    "start": "1190400",
    "end": "1197280"
  },
  {
    "text": "does the cash eviction from the tail and again every time it kicks down you have to lock and if it's locked people cannot",
    "start": "1197280",
    "end": "1204320"
  },
  {
    "text": "read people threads cannot read and if threads cannot read latency right block slow",
    "start": "1204320",
    "end": "1212880"
  },
  {
    "text": "right all of this you can understand when things happen this is why",
    "start": "1212880",
    "end": "1218000"
  },
  {
    "text": "and i'm gonna share my opinion about the lru right",
    "start": "1218000",
    "end": "1223039"
  },
  {
    "text": "and i think this is a good time by the way there is an audio cache per slab class i think i mentioned that so the one meg slap class",
    "start": "1223039",
    "end": "1230000"
  },
  {
    "text": "right which has like pages of one meg and the chunk sizes of one meg has its own laryu and each other sub slab class",
    "start": "1230000",
    "end": "1237280"
  },
  {
    "text": "has its own audio by the way i i don't me i'm not making any of this up i'm i had to read",
    "start": "1237280",
    "end": "1243200"
  },
  {
    "text": "frankly maybe 20 different documents to collect this information and kind of present it in a summarized manner here",
    "start": "1243200",
    "end": "1249520"
  },
  {
    "text": "right because there is no one doc to explain all that unfortunately right it's it's not incomplete unfortunately",
    "start": "1249520",
    "end": "1255600"
  },
  {
    "text": "that's what i notice and outdated so my opinion about the lru and my in my",
    "start": "1255600",
    "end": "1262720"
  },
  {
    "text": "personal humble opinion is i wish memcached actually disabled this",
    "start": "1262720",
    "end": "1268320"
  },
  {
    "text": "by default you know lru is a feature right and the the reason they added it",
    "start": "1268320",
    "end": "1274799"
  },
  {
    "text": "because memory is limited especially back in 2003 when they first built this thing memory was so scarce",
    "start": "1274799",
    "end": "1282080"
  },
  {
    "text": "or scarce is it scarce or scars scarce right it's very limited and when you do",
    "start": "1282080",
    "end": "1287600"
  },
  {
    "text": "that you don't want to run out of memory right so if you allocate certain amount of memory for memcached it can easily",
    "start": "1287600",
    "end": "1294080"
  },
  {
    "text": "run out right if you have a lot of keys so how do you manage that they say hey we're going to",
    "start": "1294080",
    "end": "1299600"
  },
  {
    "text": "remove we're going to build an ru least recently items get kicked out from the memory",
    "start": "1299600",
    "end": "1306480"
  },
  {
    "text": "that's a fine but i wish they disabled that by default or give us an option to disable it",
    "start": "1306480",
    "end": "1312000"
  },
  {
    "text": "because the overhead of managing audio and you can see from the papers i'm going to refresh is so large the locks",
    "start": "1312000",
    "end": "1319760"
  },
  {
    "text": "that they have to maintain slows down throughput right and comple and",
    "start": "1319760",
    "end": "1324880"
  },
  {
    "text": "complicate the application so i think they stuck",
    "start": "1324880",
    "end": "1330080"
  },
  {
    "text": "whoever built this 2000 in 2003 memcached brad fitzpatrick who is the",
    "start": "1330080",
    "end": "1335120"
  },
  {
    "text": "original developer of memcached he built this for his website live journal you know",
    "start": "1335120",
    "end": "1341360"
  },
  {
    "text": "i wish he disabled this by default i really wish because his original design is so simple and so elegant i absolutely",
    "start": "1341360",
    "end": "1349200"
  },
  {
    "text": "love it you know you build something so simple with its features stripped there",
    "start": "1349200",
    "end": "1354640"
  },
  {
    "text": "are no much features lru made it not simple unfortunately yeah",
    "start": "1354640",
    "end": "1360080"
  },
  {
    "text": "cool have is a feature but disable by by default",
    "start": "1360080",
    "end": "1365600"
  },
  {
    "text": "or have an option to disable i don't know if there's an option to this here maybe there is but hey i want to take",
    "start": "1365600",
    "end": "1371440"
  },
  {
    "text": "the responsibility as a client right if i'm going to allocate certain amount of memory because i'm responsible i'm going",
    "start": "1371440",
    "end": "1377919"
  },
  {
    "text": "to give a memcache d 5 gig 10 gig and my",
    "start": "1377919",
    "end": "1383200"
  },
  {
    "text": "application is smart enough to know to set expiry date right for this item and",
    "start": "1383200",
    "end": "1389600"
  },
  {
    "text": "yeah if i'm going to get errors if it's filled out it's on me i want to delete an items i want to do this management",
    "start": "1389600",
    "end": "1396720"
  },
  {
    "text": "this way for 95 of the users who want simple",
    "start": "1396720",
    "end": "1403120"
  },
  {
    "text": "things they're going to get it it'll are you in my personal opinion again this is just my",
    "start": "1403120",
    "end": "1408240"
  },
  {
    "text": "personal opinion you can agree or disagree i think you should this this should have been disabled because",
    "start": "1408240",
    "end": "1413679"
  },
  {
    "text": "now they they created a new lru which is like as hot and warm and cold and and",
    "start": "1413679",
    "end": "1419919"
  },
  {
    "text": "they move stuff around because they have a lot of problems with lru like moving stuff around all the time is so",
    "start": "1419919",
    "end": "1426559"
  },
  {
    "text": "expensive you know so it has a cost so let us",
    "start": "1426559",
    "end": "1431600"
  },
  {
    "text": "just how about give me an option not to use it and go back to a simple model of course i don't",
    "start": "1431600",
    "end": "1439679"
  },
  {
    "text": "i don't mind if two items two users try to access the same two threads trying to access the same item at the same time",
    "start": "1439679",
    "end": "1446640"
  },
  {
    "text": "let them be serialized that's fine right but lru as a whole thing i think it's a",
    "start": "1446640",
    "end": "1451840"
  },
  {
    "text": "it's just to me over engineering that's just my opinion you can disagree here's how it looks like by the way a lot of",
    "start": "1451840",
    "end": "1457840"
  },
  {
    "text": "you in the big picture again this is all drawings i made it uh",
    "start": "1457840",
    "end": "1462960"
  },
  {
    "text": "i could be wrong in small details because i don't i don't know the actual architecture so this is i derive this",
    "start": "1462960",
    "end": "1468640"
  },
  {
    "text": "from reading the source code and the doc so this is how it looks like so this is",
    "start": "1468640",
    "end": "1474000"
  },
  {
    "text": "this is where you talk about the pages right and the chunks so the chunks or the items is what being a lru'd right so",
    "start": "1474000",
    "end": "1482320"
  },
  {
    "text": "the head is right here and this is linked to this item this link to this item is linked to this item this thing's there this is the tail so this is how it",
    "start": "1482320",
    "end": "1489440"
  },
  {
    "text": "looks like every item here is actually linked to the linux to the one next to",
    "start": "1489440",
    "end": "1494880"
  },
  {
    "text": "it right this is think this of this as a snapshot after",
    "start": "1494880",
    "end": "1500159"
  },
  {
    "text": "many many usages right gates and red there so so things will move to the head",
    "start": "1500159",
    "end": "1505520"
  },
  {
    "text": "and the tail obviously i didn't draw every particular thing because it's going to be a mess of a drawing but you",
    "start": "1505520",
    "end": "1511440"
  },
  {
    "text": "get the point right it does that that's how they allow you and you can see how complex things get so let's talk about",
    "start": "1511440",
    "end": "1517279"
  },
  {
    "start": "1517000",
    "end": "1840000"
  },
  {
    "text": "threading so this is one of my favorite parts i know i absolutely have",
    "start": "1517279",
    "end": "1523760"
  },
  {
    "text": "i absolutely love networking and if you're interested i have a networking course and and this part is all about",
    "start": "1523760",
    "end": "1532000"
  },
  {
    "text": "sockets connections the way listeners work the way the tcp",
    "start": "1532000",
    "end": "1538480"
  },
  {
    "text": "connection works i talk this about this in detail in my network course if you're interested go to network.husseinosa.com",
    "start": "1538480",
    "end": "1545760"
  },
  {
    "text": "learn more about that again network dot hussein also.com this url redirected",
    "start": "1545760",
    "end": "1551520"
  },
  {
    "text": "immediately to udemy with the latest coupon applied so uh you're gonna get a discount and you're gonna be supporting",
    "start": "1551520",
    "end": "1557919"
  },
  {
    "text": "this channel this work thank you so much there's here's the threading model for uh",
    "start": "1557919",
    "end": "1563520"
  },
  {
    "text": "for memcached right because it accepts clients it has to have networking right",
    "start": "1563520",
    "end": "1569679"
  },
  {
    "text": "so what they do is they listen on a tcp port right so that means they support",
    "start": "1569679",
    "end": "1575360"
  },
  {
    "text": "transmission control protocol that's the native transport that they support they also support udp which i didn't mention",
    "start": "1575360",
    "end": "1581919"
  },
  {
    "text": "here but udp has been now disabled by default because of an attack that happened four years",
    "start": "1581919",
    "end": "1588559"
  },
  {
    "text": "ago 2018 uh reflection attack actually right with with memcached public servers",
    "start": "1588559",
    "end": "1594559"
  },
  {
    "text": "so it was the cloudflare actually reported that so udp has been disabled by default but yeah you can use it if",
    "start": "1594559",
    "end": "1600000"
  },
  {
    "text": "you want but yeah let's stick with tcp right now tcp port one one two one one",
    "start": "1600000",
    "end": "1605120"
  },
  {
    "text": "and there is a listener thread so one spin up listener one thread that spins",
    "start": "1605120",
    "end": "1611440"
  },
  {
    "text": "up it listens to port one one two one one so that creates a a socket right in the operating system speak right and",
    "start": "1611440",
    "end": "1618080"
  },
  {
    "text": "that basically creates its own accept queue it's on syncqueue this is how the",
    "start": "1618080",
    "end": "1624960"
  },
  {
    "text": "application start accepting connection right so everything",
    "start": "1624960",
    "end": "1630159"
  },
  {
    "text": "every single connection that is happening the listener thread will",
    "start": "1630159",
    "end": "1635279"
  },
  {
    "text": "accept it so there is a loop infinite loop here literally all application has this loop where it's constantly",
    "start": "1635279",
    "end": "1641760"
  },
  {
    "text": "accepting connections one thread right so all the connections goes to this thread so",
    "start": "1641760",
    "end": "1649919"
  },
  {
    "text": "once it accept the connection it gets the file descriptor we call it right which actually represents the connection",
    "start": "1649919",
    "end": "1656480"
  },
  {
    "text": "and now what what memcached does is spins up a new thread gives that file",
    "start": "1656480",
    "end": "1661919"
  },
  {
    "text": "descriptor to that thread now if a stream of data if a request to get a key",
    "start": "1661919",
    "end": "1670559"
  },
  {
    "text": "was sent to this connection it will the operating system knows to send it to this thread well technically what",
    "start": "1670559",
    "end": "1677360"
  },
  {
    "text": "happens is the thread pulls the file descriptor right this is a now this",
    "start": "1677360",
    "end": "1682559"
  },
  {
    "text": "thread is responsible for this connection this thread is responsible for this connection there's a response for this",
    "start": "1682559",
    "end": "1687840"
  },
  {
    "text": "connection so you can see that now this model just blows up right if",
    "start": "1687840",
    "end": "1694159"
  },
  {
    "text": "one can actually perform if you have so many connections you can rather run out of threads right",
    "start": "1694159",
    "end": "1700159"
  },
  {
    "text": "or that corner also bloats your memory and cpu so be careful with that as well",
    "start": "1700159",
    "end": "1705919"
  },
  {
    "text": "i think they put a limit the number of connections memcached i might be wrong there but yeah so this is basically",
    "start": "1705919",
    "end": "1711279"
  },
  {
    "text": "explains all of that now the moment you have threading now the beauty here is you don't have",
    "start": "1711279",
    "end": "1716720"
  },
  {
    "text": "bottleneck right if you have one thread that is responsible for all the connections and listening",
    "start": "1716720",
    "end": "1723679"
  },
  {
    "text": "you you will be blocked right one user will send a key and then another user will send a key they won't",
    "start": "1723679",
    "end": "1729440"
  },
  {
    "text": "be served right they have to be serialized because there's one thread actually executing",
    "start": "1729440",
    "end": "1734799"
  },
  {
    "text": "them one by one right but here if one user executes a sends a key request to",
    "start": "1734799",
    "end": "1739919"
  },
  {
    "text": "get a key and this guy want to write they can happen at the same time right this thread will read it and this thread",
    "start": "1739919",
    "end": "1746159"
  },
  {
    "text": "will read they are different processing this could be an accord this could be in a completely different core that could be also",
    "start": "1746159",
    "end": "1753600"
  },
  {
    "text": "possible versus its one thread then becomes really a problem so we had to go with",
    "start": "1753600",
    "end": "1759760"
  },
  {
    "text": "multi threads what's the problem with that well the problem is these threads will try to",
    "start": "1759760",
    "end": "1765919"
  },
  {
    "text": "access what we call the alarium and the items and the memory so everything is shared between all these",
    "start": "1765919",
    "end": "1772799"
  },
  {
    "text": "threads but you can't have two threads right to the same location that's a problem that's",
    "start": "1772799",
    "end": "1779600"
  },
  {
    "text": "why the original design had one global lock it was serialized so in this case yeah",
    "start": "1779600",
    "end": "1787520"
  },
  {
    "text": "the threads kind of helped with the connection but but you were serialized as the locking",
    "start": "1787520",
    "end": "1793919"
  },
  {
    "text": "model so nobody can even access two different items has nothing to do with each other they were serialized they",
    "start": "1793919",
    "end": "1800720"
  },
  {
    "text": "were locked so one thread has to be served with after the other they fought if they fixed that they completely",
    "start": "1800720",
    "end": "1806640"
  },
  {
    "text": "revamped there now it's a pair item lock so if two threads try to access the same",
    "start": "1806640",
    "end": "1812159"
  },
  {
    "text": "item then it will be sorted out that's good that's okay i'm okay with that right but yeah if i'm accessing item one",
    "start": "1812159",
    "end": "1818960"
  },
  {
    "text": "key number one and then another three axis t key number two at the same time they should be served at the same time",
    "start": "1818960",
    "end": "1825360"
  },
  {
    "text": "there is no reason for locking and the only reason we lock is because we want to update the lru again so there",
    "start": "1825360",
    "end": "1832399"
  },
  {
    "text": "is so much stuff that comes back always to the audio was like omar really we did we really need an nru why what if we",
    "start": "1832399",
    "end": "1839840"
  },
  {
    "text": "disabled by default right again that's just me let's go through an example",
    "start": "1839840",
    "end": "1845200"
  },
  {
    "start": "1840000",
    "end": "2070000"
  },
  {
    "text": "read and this is something we never talked about here which is the hash table if",
    "start": "1845200",
    "end": "1850720"
  },
  {
    "text": "you think about it if you have a key how do you actually find where this key lives right if you think about it you",
    "start": "1850720",
    "end": "1857120"
  },
  {
    "text": "need hash tables so what do you do and i talked about hash table in my youtube channel",
    "start": "1857120",
    "end": "1862720"
  },
  {
    "text": "look up hashing and consistent hashing i talk about details hash table is nothing",
    "start": "1862720",
    "end": "1868320"
  },
  {
    "text": "but an associative array it's really just an array and the beauty of an array is",
    "start": "1868320",
    "end": "1873360"
  },
  {
    "text": "if you have an array right let's talk about it arrays a little bit if you have an array from an array has to be",
    "start": "1873360",
    "end": "1878960"
  },
  {
    "text": "consecutive if you are allocated an array of a thousand elements accessing",
    "start": "1878960",
    "end": "1884320"
  },
  {
    "text": "element number seven accessing element number thousand twenty four or one thousand seven three",
    "start": "1884320",
    "end": "1890240"
  },
  {
    "text": "is big o of one is fast because you know the index and once you know the index",
    "start": "1890240",
    "end": "1895600"
  },
  {
    "text": "you know the head of the array you add the address to the index voila you have the address and the memory of the cpu",
    "start": "1895600",
    "end": "1901600"
  },
  {
    "text": "can immediately go to that location that's the beauty you have an index with hash tables you",
    "start": "1901600",
    "end": "1907600"
  },
  {
    "text": "don't have an index you have a key the trick is to convert the key back to an index that is all what it is a hash",
    "start": "1907600",
    "end": "1914960"
  },
  {
    "text": "table nothing fancy it's just an array so we take that what we do is the do a hash on",
    "start": "1914960",
    "end": "1920799"
  },
  {
    "text": "the key right let's say i'm going to read test key right and then do a hash and then do modular n",
    "start": "1920799",
    "end": "1927279"
  },
  {
    "text": "where n is the size of this array or the hash table right and then you're going to get the value between 0",
    "start": "1927279",
    "end": "1932880"
  },
  {
    "text": "and n minus one i guess right so now okay let's go on point it and that's big o of one plus",
    "start": "1932880",
    "end": "1939679"
  },
  {
    "text": "the cost of the hash right now you got here found it now what you do is you're gonna get a",
    "start": "1939679",
    "end": "1946840"
  },
  {
    "text": "pointer which takes you to the page on that specific slab class for that item",
    "start": "1946840",
    "end": "1954960"
  },
  {
    "text": "which is happened to be d in this case that's how a read works so it's a big",
    "start": "1954960",
    "end": "1960640"
  },
  {
    "text": "off one you can argue that this is one read and this is the second read yeah i suppose that works too right",
    "start": "1960640",
    "end": "1968320"
  },
  {
    "text": "i think the the new model have kind of two hash tables if i'm mistaking but i couldn't find detailed docs about this",
    "start": "1968320",
    "end": "1974880"
  },
  {
    "text": "so i explained this so apologies if this is a little bit out of date but this gives you the idea here the new two",
    "start": "1974880",
    "end": "1980880"
  },
  {
    "text": "hashes i think uh there were provided to provide a pair item lock and obviously",
    "start": "1980880",
    "end": "1986159"
  },
  {
    "text": "what happened here is this is the lru you access the item the d",
    "start": "1986159",
    "end": "1991440"
  },
  {
    "text": "is pushed to the head right so now you have a b c d a is now the least recently",
    "start": "1991440",
    "end": "1996720"
  },
  {
    "text": "used item is in the tail and a points to b b points to c c point to d and",
    "start": "1996720",
    "end": "2002000"
  },
  {
    "text": "obviously it's a reverse length as well so d point to c c pose to b p point to a right so that's how would they allow you",
    "start": "2002000",
    "end": "2009279"
  },
  {
    "text": "actually what if you think about it the the pointers are right here in the item itself right but i drew it this way for",
    "start": "2009279",
    "end": "2016320"
  },
  {
    "text": "simplicity otherwise it's not readable at all read to",
    "start": "2016320",
    "end": "2021519"
  },
  {
    "text": "this is another example for it i'm gonna read buzz hash the buzz get the n",
    "start": "2021519",
    "end": "2027440"
  },
  {
    "text": "whoa get the item boop get a c nice now when we're ready to see the c",
    "start": "2027440",
    "end": "2033919"
  },
  {
    "text": "is pushed to the head d is slightly pushed and then obviously the lr is updated and that's another lock right",
    "start": "2033919",
    "end": "2040320"
  },
  {
    "text": "you have to do a lock to do that so if buzz and whatever the value before a test was read at the same time they are",
    "start": "2040320",
    "end": "2047360"
  },
  {
    "text": "serialized at the lru level if they belong to the same slab class",
    "start": "2047360",
    "end": "2054960"
  },
  {
    "text": "again this might have changed with the new architecture they changed that a little bit so i think that you can you",
    "start": "2054960",
    "end": "2060320"
  },
  {
    "text": "can play with that a little bit but again to update the lru you have to you have to kind of acquire a lock so you're",
    "start": "2060320",
    "end": "2067200"
  },
  {
    "text": "going to be serialized right here let's go through our right i'm going to",
    "start": "2067200",
    "end": "2072638"
  },
  {
    "start": "2070000",
    "end": "2177000"
  },
  {
    "text": "write key new of a value with 44",
    "start": "2072639",
    "end": "2078000"
  },
  {
    "text": "whopping bytes let's do that well to write we need to obviously find the hash right where to",
    "start": "2078000",
    "end": "2084878"
  },
  {
    "text": "write it hash module n get that puppy find where to write it oh happen to be",
    "start": "2084879",
    "end": "2091679"
  },
  {
    "text": "an empty location sure that's good right and now you have questions what if",
    "start": "2091679",
    "end": "2097040"
  },
  {
    "text": "what if i happen to have something that is already written you can you can't have collisions we're going to talk about collisions in a minute right it's",
    "start": "2097040",
    "end": "2104160"
  },
  {
    "text": "a problem with hash tables hash tables are fun and good but the moment they you run into collisions and you want to",
    "start": "2104160",
    "end": "2110320"
  },
  {
    "text": "resize it it falls apart but now i create a new pointer this pointer now",
    "start": "2110320",
    "end": "2117760"
  },
  {
    "text": "i need to allocate a slab class not a slab cast i need to allocate a chunk",
    "start": "2117760",
    "end": "2123520"
  },
  {
    "text": "where i'm going to put my item in and that chunk goes into a specific slab class well 44 bytes pick a slab class",
    "start": "2123520",
    "end": "2130800"
  },
  {
    "text": "right and even the slab classes guys by the way it's not really fixed you can play with those the other configuration",
    "start": "2130800",
    "end": "2137280"
  },
  {
    "text": "called the change the chunk factors growth size i'm not going to mention it",
    "start": "2137280",
    "end": "2143119"
  },
  {
    "text": "here it's just going to make the course a little bit longer but you get the point there are so many tweaking you can",
    "start": "2143119",
    "end": "2148880"
  },
  {
    "text": "play with and tweak these chunk sizes but yeah i'll look at a new memory location in",
    "start": "2148880",
    "end": "2154160"
  },
  {
    "text": "this specific page in an empty page in a fit fitting chunk right because you want to",
    "start": "2154160",
    "end": "2160720"
  },
  {
    "text": "pick a chunk that is almost fits right in the chunk right",
    "start": "2160720",
    "end": "2166160"
  },
  {
    "text": "not too small obviously cannot be larger than the chunk size have to fit right into it right but that that's the the",
    "start": "2166160",
    "end": "2173440"
  },
  {
    "text": "that's what the what memcached does all right let's spice things up let's say i'm gonna",
    "start": "2173440",
    "end": "2179440"
  },
  {
    "start": "2177000",
    "end": "2380000"
  },
  {
    "text": "write a key called nanny which is a new key i don't have it before and value 44 but it happened to clash",
    "start": "2179440",
    "end": "2187359"
  },
  {
    "text": "with another existing key because that's hashes always do that right",
    "start": "2187359",
    "end": "2192960"
  },
  {
    "text": "so when you do that you hash nani and happen to be fitting on a entry that already have a pointer",
    "start": "2192960",
    "end": "2201040"
  },
  {
    "text": "what do we do do we overwrite it no what they did is this is called a bucket",
    "start": "2201040",
    "end": "2206320"
  },
  {
    "text": "by the way right they add more item to the bucket you know we have one item",
    "start": "2206320",
    "end": "2211920"
  },
  {
    "text": "let's call it a test or something all right and then we have nanny which fits",
    "start": "2211920",
    "end": "2217280"
  },
  {
    "text": "right in the same bucket what we do is just we make it into a chain this",
    "start": "2217280",
    "end": "2222720"
  },
  {
    "text": "chain of buckets right actually one bucket with two items i don't know right whatever the terminology doesn't really",
    "start": "2222720",
    "end": "2228960"
  },
  {
    "text": "matter you just read to understand let's turn back the laser here and yeah we're going to add it here",
    "start": "2228960",
    "end": "2236000"
  },
  {
    "text": "and then just do the pointer and do the do your thing now obviously",
    "start": "2236000",
    "end": "2241359"
  },
  {
    "text": "we need to talk about that collision what happened to that collision i want to read the key nani",
    "start": "2241359",
    "end": "2247119"
  },
  {
    "text": "right go here hash it obviously go here oh we have two",
    "start": "2247119",
    "end": "2253200"
  },
  {
    "text": "which one ah that's the cost you have to go one by",
    "start": "2253200",
    "end": "2259040"
  },
  {
    "text": "one through all of them right why because now you have a hash you don't know one of which one of these",
    "start": "2259040",
    "end": "2265359"
  },
  {
    "text": "are actually nanny what you do is read the first one right",
    "start": "2265359",
    "end": "2270640"
  },
  {
    "text": "check it compare the key oh because if you go to the item you're going to find the actual key right that's stored here",
    "start": "2270640",
    "end": "2278000"
  },
  {
    "text": "so you're going to find it and say oh that's not 90. that's something else right let's go through the bucket go to",
    "start": "2278000",
    "end": "2283520"
  },
  {
    "text": "the next one there you go that's my item so here is a completely different paper",
    "start": "2283520",
    "end": "2290880"
  },
  {
    "text": "that you can write here this p people take phds on this stuff by the way guys you know",
    "start": "2290880",
    "end": "2296240"
  },
  {
    "text": "this is called the uh the the scale factor you know memcache d measures this growth",
    "start": "2296240",
    "end": "2304160"
  },
  {
    "text": "and if it's too much based on a certain percentage if you're overloading then then you're going to see performance",
    "start": "2304160",
    "end": "2310320"
  },
  {
    "text": "problems right reading a key is going to have to go through multiple reads to find the actual key",
    "start": "2310320",
    "end": "2316640"
  },
  {
    "text": "versus if it goes right here hey the key is right here of course there's one entry it has to be it right",
    "start": "2316640",
    "end": "2322160"
  },
  {
    "text": "but if there is multiple yeah then it's a problem right",
    "start": "2322160",
    "end": "2327359"
  },
  {
    "text": "i mean you can you can think about it you can argue that you can hash a key that happened to get to a value that is",
    "start": "2327359",
    "end": "2333280"
  },
  {
    "text": "not there so technically you have to read it and compare because your key might not exist but it",
    "start": "2333280",
    "end": "2339839"
  },
  {
    "text": "happened to hash to a value that does right so you have to read it so there is a cost to reading so that's the problem",
    "start": "2339839",
    "end": "2346320"
  },
  {
    "text": "of hash table so and if that's the case then they do a hash resize",
    "start": "2346320",
    "end": "2351920"
  },
  {
    "text": "and boy when you rehash your table they have to shift everything around and i",
    "start": "2351920",
    "end": "2356960"
  },
  {
    "text": "believe this is when they use the consisting hashing which is this ring concept which i talked about in another",
    "start": "2356960",
    "end": "2363760"
  },
  {
    "text": "video and that just gets really complicated right because they now",
    "start": "2363760",
    "end": "2368960"
  },
  {
    "text": "know the moment you resize your hash table you need to move stuff around because nanny will not be this index",
    "start": "2368960",
    "end": "2375839"
  },
  {
    "text": "number one anymore you're gonna be index number 1700 something like that right 1700 is not a number i think i'm gonna",
    "start": "2375839",
    "end": "2382800"
  },
  {
    "start": "2380000",
    "end": "2430000"
  },
  {
    "text": "skip this because we talked about locking in a minute we talked about thread threads and then accessing the lru and how",
    "start": "2382800",
    "end": "2389119"
  },
  {
    "text": "it was a global lock and then it changed to a pair item lock and then still we have a riff counting you know every time",
    "start": "2389119",
    "end": "2395599"
  },
  {
    "text": "you read an item you increase the ref count you know and when you release it you decrement the risk and this is for",
    "start": "2395599",
    "end": "2401520"
  },
  {
    "text": "so the garbage collection can the garbage collection it's written in c there is no garbage collector but the",
    "start": "2401520",
    "end": "2409040"
  },
  {
    "text": "the the ephemeral application level garbage collection",
    "start": "2409040",
    "end": "2414560"
  },
  {
    "text": "when al ellario king can remove the item because you cannot just",
    "start": "2414560",
    "end": "2419599"
  },
  {
    "text": "remove the item if if someone is referencing it that's the definition of",
    "start": "2419599",
    "end": "2425119"
  },
  {
    "text": "memory leaks right all right let's talk about distributed cash and how it's uh memcache is",
    "start": "2425119",
    "end": "2430240"
  },
  {
    "start": "2430000",
    "end": "2610000"
  },
  {
    "text": "actually not a distributed cash in my opinion memcache d servers when you spin up mm cash d server memcache december",
    "start": "2430240",
    "end": "2437119"
  },
  {
    "text": "they are completely isolated you cannot link a server to another server there is",
    "start": "2437119",
    "end": "2442880"
  },
  {
    "text": "no mechanism to do that right when you spin up a memcached server it's a memcached server it doesn't talk to",
    "start": "2442880",
    "end": "2449839"
  },
  {
    "text": "another servers and i absolutely love this design how simple and elegant this is put the",
    "start": "2449839",
    "end": "2456800"
  },
  {
    "text": "responsibility if you want to distribute it well the apis at the client side has",
    "start": "2456800",
    "end": "2462720"
  },
  {
    "text": "to do that and that's what we're going to show in the in the code section where we're going to write our own",
    "start": "2462720",
    "end": "2468960"
  },
  {
    "text": "uh we're going to use a node.js application to do that obviously we're going to use also telnet to connect to",
    "start": "2468960",
    "end": "2474880"
  },
  {
    "text": "that and write stuff right but we're going to go through all this stuff now but yeah what happens here is the client",
    "start": "2474880",
    "end": "2481440"
  },
  {
    "text": "actually knows about all the servers it has knowledge so the client side",
    "start": "2481440",
    "end": "2486960"
  },
  {
    "text": "actually does the distribution right so it's like okay key number one go here key number two go here key number three",
    "start": "2486960",
    "end": "2493040"
  },
  {
    "text": "go here so there is a hashing going on consistent hashing to be specific",
    "start": "2493040",
    "end": "2498160"
  },
  {
    "text": "you can build your own memcache d a client that does whatever you want",
    "start": "2498160",
    "end": "2503599"
  },
  {
    "text": "right and then distribute that stuff well what happened if i if i add if i add a server",
    "start": "2503599",
    "end": "2510319"
  },
  {
    "text": "well your client can start distributing the keys i would definitely",
    "start": "2510319",
    "end": "2518079"
  },
  {
    "text": "not be with that because why would you distribute the keys form in a transient",
    "start": "2518079",
    "end": "2523359"
  },
  {
    "text": "cache anyway who cares at the server it's like oh yeah if the key is not there you're going to query the database",
    "start": "2523359",
    "end": "2529119"
  },
  {
    "text": "and pull it up right it's it's not worth it to do this this chattiness to move items",
    "start": "2529119",
    "end": "2535839"
  },
  {
    "text": "around from one server to another that's just a bad idea i don't know if clients do it maybe they do but i don't think",
    "start": "2535839",
    "end": "2542400"
  },
  {
    "text": "it's it's required it's just thrashing for the case of thrashing database sharding",
    "start": "2542400",
    "end": "2549520"
  },
  {
    "text": "again you you might if you know this channel you know that i'm i tried as much as",
    "start": "2549520",
    "end": "2554560"
  },
  {
    "text": "possible to push it as the last resort i do not like distributed stuff",
    "start": "2554560",
    "end": "2561760"
  },
  {
    "text": "especially so complex to deal with right i like simplicity i'm a simple man",
    "start": "2561760",
    "end": "2567359"
  },
  {
    "text": "right but yeah sometimes you go you have",
    "start": "2567359",
    "end": "2572960"
  },
  {
    "text": "you go to the youtube scale and in google scale then you don't have a choice one machine cannot possibly",
    "start": "2572960",
    "end": "2579440"
  },
  {
    "text": "handle everything i would i would go with raid replicas i would go with partitioning horizontal",
    "start": "2579440",
    "end": "2586160"
  },
  {
    "text": "partitioning in the server itself minimize that as much as possible i",
    "start": "2586160",
    "end": "2592480"
  },
  {
    "text": "would go with raid you know the distributed disk storage but the application may remain as a",
    "start": "2592480",
    "end": "2599440"
  },
  {
    "text": "single writer the moment you have multiple writers and you have to deal with the",
    "start": "2599440",
    "end": "2605040"
  },
  {
    "text": "sharding it becomes really complex you know if you want to deal with the complete",
    "start": "2605040",
    "end": "2610880"
  },
  {
    "start": "2610000",
    "end": "2700000"
  },
  {
    "text": "complexity sure but yeah that's that's the idea of distributed cache okay let's do a demo we're going to do a",
    "start": "2610880",
    "end": "2617040"
  },
  {
    "text": "demo we're going to spin up a bunch of memcache d docker instances so for this exercise",
    "start": "2617040",
    "end": "2624880"
  },
  {
    "text": "you just install docker and you're good to go and you have to have a darker uh",
    "start": "2624880",
    "end": "2630319"
  },
  {
    "text": "you have to have a docker account because somehow they are locked behind an account when cash d i have no idea",
    "start": "2630319",
    "end": "2635440"
  },
  {
    "text": "why did they do they do that sometimes right so you just create an account do a docker login",
    "start": "2635440",
    "end": "2641839"
  },
  {
    "text": "you're good to go right once you do that you can download the image and you can spin up as many memcached instances as",
    "start": "2641839",
    "end": "2647760"
  },
  {
    "text": "you want so we're going to do that i'm going to use telnet because i love the simplicity of memcache d you know how",
    "start": "2647760",
    "end": "2654000"
  },
  {
    "text": "many clients these days that you can actually just telnet and run comments to they can be counted on one finger you",
    "start": "2654000",
    "end": "2660240"
  },
  {
    "text": "know they don't exist anymore the simplicity is gone from these",
    "start": "2660240",
    "end": "2666079"
  },
  {
    "text": "from today's applications right the good old days of you just telnet and run",
    "start": "2666079",
    "end": "2671200"
  },
  {
    "text": "and one thing i didn't mention is memcached doesn't have security by default so that might be a deal breaker",
    "start": "2671200",
    "end": "2677680"
  },
  {
    "text": "for you right so you have to you can implement authentication which doesn't exist by default sassle i believe they",
    "start": "2677680",
    "end": "2683200"
  },
  {
    "text": "call it you can implement tls if you want but by default they don't have any of that stuff right so take it with a",
    "start": "2683200",
    "end": "2689920"
  },
  {
    "text": "grain of salt right they say they said simple it is simple all right but you have to be careful in",
    "start": "2689920",
    "end": "2695599"
  },
  {
    "text": "a cloud environment when it comes to memcached you have to tls it right they support that there is a support for",
    "start": "2695599",
    "end": "2701760"
  },
  {
    "start": "2700000",
    "end": "3137000"
  },
  {
    "text": "that and obviously we're going to use node.js memcached for this consistent hashing and i'm going to put all our docker",
    "start": "2701760",
    "end": "2708400"
  },
  {
    "text": "containers in and play with that a little bit how about we do that so i have docker installed here on my",
    "start": "2708400",
    "end": "2713599"
  },
  {
    "text": "mac you can have windows and install docker on top of it you can have linux or install docker or some of it that's why i always like to use docker it's",
    "start": "2713599",
    "end": "2719680"
  },
  {
    "text": "just it's an agnostic whether whatever your application is you know wherever your",
    "start": "2719680",
    "end": "2725440"
  },
  {
    "text": "operating system docker works you know we have it on top of all of this stuff so let's go ahead and spin up a docker",
    "start": "2725440",
    "end": "2733760"
  },
  {
    "text": "container that have a memcache d instance one memcached uninstance right so docker run you do dash dash name",
    "start": "2733760",
    "end": "2740800"
  },
  {
    "text": "let's give it a name uh it's called m1 memcached or mem1 right you don't have to give it a name",
    "start": "2740800",
    "end": "2746400"
  },
  {
    "text": "but i like that so that we can find it and delete it later easily and then you can expose the port",
    "start": "2746400",
    "end": "2753599"
  },
  {
    "text": "by default one one two one one right one one two one one so this is",
    "start": "2753599",
    "end": "2758960"
  },
  {
    "text": "what is running in the container this is what is exposed in my host right because",
    "start": "2758960",
    "end": "2764640"
  },
  {
    "text": "i'm gonna hit my host which is hussein mac which is that's the actual host that is running docker and then i'm gonna hit",
    "start": "2764640",
    "end": "2771200"
  },
  {
    "text": "that port which will be port forwarded to this container and i'm gonna spin up another",
    "start": "2771200",
    "end": "2777280"
  },
  {
    "text": "one with one one two one one one one two one two and one one two one three and",
    "start": "2777280",
    "end": "2784079"
  },
  {
    "text": "later we're gonna spin up multiple ones and then finally we're gonna do a mim cash",
    "start": "2784079",
    "end": "2789200"
  },
  {
    "text": "d right if you do just like that this will block the uh the terminal you",
    "start": "2789200",
    "end": "2795920"
  },
  {
    "text": "know and it's gonna be just work so i i suggest you do that first i know it's gonna work for me because i i did it",
    "start": "2795920",
    "end": "2801599"
  },
  {
    "text": "before but i like to do dash d right dash d means just hey detach it because",
    "start": "2801599",
    "end": "2806640"
  },
  {
    "text": "i'm gonna use this terminal for something else later right so just go just like that we created a container",
    "start": "2806640",
    "end": "2812319"
  },
  {
    "text": "you can do docker ps to make sure that the container is running obviously if the image is not there it's going to",
    "start": "2812319",
    "end": "2818079"
  },
  {
    "text": "download it for you and you have to do docker login to do all that stuff so do all of that log into your account and",
    "start": "2818079",
    "end": "2825760"
  },
  {
    "text": "all that stuff all right so let's test it out how do you test it telnet",
    "start": "2825760",
    "end": "2831680"
  },
  {
    "text": "why are we telling it into hussein mac which is my host and which port one one two one one again this is the port that",
    "start": "2831680",
    "end": "2837440"
  },
  {
    "text": "i exposed that happened to be the same doesn't have to right if i do that all of a sudden i'm logged in how do i do",
    "start": "2837440",
    "end": "2844800"
  },
  {
    "text": "that well let's do a stats give me your stats and this is the stuff",
    "start": "2844800",
    "end": "2850240"
  },
  {
    "text": "that most of the stuff here we talked about currently right uptime what's the version of memcache d the pointer size",
    "start": "2850240",
    "end": "2857200"
  },
  {
    "text": "maximum number of connections thousand twenty four we talked about that right there's a maximum number of connections",
    "start": "2857200",
    "end": "2862559"
  },
  {
    "text": "uh how many times you run a get how many times you're on a set how many times you",
    "start": "2862559",
    "end": "2867760"
  },
  {
    "text": "incremented uh the threads how many threads you have here right eviction how many times that audio",
    "start": "2867760",
    "end": "2874559"
  },
  {
    "text": "kicked in and evicted stuff and then you can do like stats uh slabs i think which",
    "start": "2874559",
    "end": "2879920"
  },
  {
    "text": "are going to give you like how many slabs were active how many is actually",
    "start": "2879920",
    "end": "2885119"
  },
  {
    "text": "allocated obviously we don't have anything because we didn't do anything right so let's go ahead and set something so to set a key you do set and",
    "start": "2885119",
    "end": "2892640"
  },
  {
    "text": "then you do the key let's call a foo and then um the flags zero i don't have any",
    "start": "2892640",
    "end": "2898000"
  },
  {
    "text": "flags here flags you can do more further controls over here and the second parameter here is the expiration so",
    "start": "2898000",
    "end": "2904559"
  },
  {
    "text": "let's say it's 3600 which is an hour right you can set it for for an hour you",
    "start": "2904559",
    "end": "2909920"
  },
  {
    "text": "can set it for a minute because for a second if you want right that's the explanation so if your item ever get to",
    "start": "2909920",
    "end": "2917119"
  },
  {
    "text": "after an hour it will be evicted it will not be returned to you",
    "start": "2917119",
    "end": "2922880"
  },
  {
    "text": "not necessarily will be evicted until the lru kicks in and that actually physically removes it",
    "start": "2922880",
    "end": "2928880"
  },
  {
    "text": "right and then finally we're gonna uh put the data length how how how big is",
    "start": "2928880",
    "end": "2934319"
  },
  {
    "text": "the value that you're gonna set let's say two characters here right so i'm gonna do high",
    "start": "2934319",
    "end": "2940079"
  },
  {
    "text": "you have to exactly match it right otherwise it's gonna be uh it's not gonna fit nicely okay so now",
    "start": "2940079",
    "end": "2947200"
  },
  {
    "text": "we store the value so let's read that value good boo yay i know this is just very simple stuff",
    "start": "2947200",
    "end": "2954240"
  },
  {
    "text": "but you get the point right you can you can increment you can you can delete that key right",
    "start": "2954240",
    "end": "2960160"
  },
  {
    "text": "and if you delete it you can read that it's not there so very simple stuff i",
    "start": "2960160",
    "end": "2965200"
  },
  {
    "text": "don't really care about the api i want more to talk about the architecture of stuff here right and that's what matters",
    "start": "2965200",
    "end": "2971839"
  },
  {
    "text": "here there's there are actually two protocols command sets this is the old one and there's the new one which is",
    "start": "2971839",
    "end": "2978640"
  },
  {
    "text": "starts with mg like two characters and there's like a different set of syntax right there are two syntaxes here syntax",
    "start": "2978640",
    "end": "2985920"
  },
  {
    "text": "can you say syntaxes i i guess you do you can but you can play with this it's very simple you connect to that",
    "start": "2985920",
    "end": "2992400"
  },
  {
    "text": "and you see i didn't log in there's no accounts or anything like that there's no collection that you create it's just",
    "start": "2992400",
    "end": "2999200"
  },
  {
    "text": "a free floating right some people might like that some people might not like them because they",
    "start": "2999200",
    "end": "3005280"
  },
  {
    "text": "want partitioning hey let me create a table or collection let me play with that key value right",
    "start": "3005280",
    "end": "3010720"
  },
  {
    "text": "there so it's a it's a free for all if i if i destroy this connection so if i",
    "start": "3010720",
    "end": "3016000"
  },
  {
    "text": "destroy it and connect it again right and i do get foo obviously it's not there because we deleted it so if i set",
    "start": "3016000",
    "end": "3021440"
  },
  {
    "text": "it again um black zero let's set it for 10 seconds",
    "start": "3021440",
    "end": "3027440"
  },
  {
    "text": "or 2000 seconds whatever urban two high stored gefu right if i",
    "start": "3027440",
    "end": "3034800"
  },
  {
    "text": "killed it now let's kill the session right quit and then do",
    "start": "3034800",
    "end": "3040640"
  },
  {
    "text": "again connect and then get through the value's still there obviously right because that it's stored in memory right",
    "start": "3040640",
    "end": "3047440"
  },
  {
    "text": "even if i connect it as a different tcp connection right now that we did that if you do stats",
    "start": "3047440",
    "end": "3053599"
  },
  {
    "text": "slabs you can see some interesting values that we talked about here right the chunk size right so we have this number one",
    "start": "3053599",
    "end": "3061119"
  },
  {
    "text": "which is this represents the slab class that we talked about right so we happen to have one slab class because my value",
    "start": "3061119",
    "end": "3067040"
  },
  {
    "text": "is so tiny right if i create another chunk with a large value",
    "start": "3067040",
    "end": "3072480"
  },
  {
    "text": "the large item another slab class will be created and that will have its own configuration so the chunks per page",
    "start": "3072480",
    "end": "3079520"
  },
  {
    "text": "which we talked about ten 922 we have one page only as we add",
    "start": "3079520",
    "end": "3085440"
  },
  {
    "text": "items we can just increase that if we want how many is in used one chunk how many is free",
    "start": "3085440",
    "end": "3091359"
  },
  {
    "text": "21 109 21 so that's the total we used one how many time we read it how many",
    "start": "3091359",
    "end": "3097280"
  },
  {
    "text": "times we said it how many time we deleted everything here is actually",
    "start": "3097280",
    "end": "3102800"
  },
  {
    "text": "accounted for active slabs we have one slab right here effectively active",
    "start": "3102800",
    "end": "3108800"
  },
  {
    "text": "and this is the memory allocated right so it's like what",
    "start": "3108800",
    "end": "3113520"
  },
  {
    "text": "that's like uh one meg exactly right that's the make is that is allocated we talked about that",
    "start": "3114079",
    "end": "3121839"
  },
  {
    "text": "so yeah so you can start playing with that and add multiple data",
    "start": "3121839",
    "end": "3126960"
  },
  {
    "text": "points and and look at the stats and play with that a little bit so let's control",
    "start": "3126960",
    "end": "3132960"
  },
  {
    "text": "this and quit so now that we talked about telnet how about we actually go to node.js and",
    "start": "3132960",
    "end": "3138800"
  },
  {
    "start": "3137000",
    "end": "3375000"
  },
  {
    "text": "build our beautiful interesting application here all right so i created this i went to my projects",
    "start": "3138800",
    "end": "3144720"
  },
  {
    "text": "folder here i'm going to go ahead and create a directory called nodemen right and i'll just go ahead and do that",
    "start": "3144720",
    "end": "3152400"
  },
  {
    "text": "right do and npm init-y right i have a node.js of course",
    "start": "3152400",
    "end": "3158880"
  },
  {
    "text": "installed right here to do all this stuff right and then let's create an index.js file and we're",
    "start": "3158880",
    "end": "3166240"
  },
  {
    "text": "going to do const mem cached equal",
    "start": "3166240",
    "end": "3172160"
  },
  {
    "text": "i believe you just do require mem cache literally and that's the library we're going to install",
    "start": "3172160",
    "end": "3177920"
  },
  {
    "text": "so once we have this library we can call it right how can i",
    "start": "3177920",
    "end": "3183280"
  },
  {
    "text": "call it const um let's call it server and then we're gonna create a new memcached and here's",
    "start": "3183280",
    "end": "3190880"
  },
  {
    "text": "the interesting thing you can pass in an array of servers and you can just pass in a string you can pass an array you",
    "start": "3190880",
    "end": "3197760"
  },
  {
    "text": "can pass an object if you pass an array then the",
    "start": "3197760",
    "end": "3202960"
  },
  {
    "text": "the the keys will be evenly distributed between all these instances today i have only one server so hussein mac one one",
    "start": "3202960",
    "end": "3210319"
  },
  {
    "text": "two one one all right close the array we're gonna add more servers later but that's that's it",
    "start": "3210319",
    "end": "3216160"
  },
  {
    "text": "basically because server i guess server pool is a better name huh just call it server pool because that's",
    "start": "3216160",
    "end": "3222880"
  },
  {
    "text": "what it is it's a server pool here let's create a function call run and this function will be",
    "start": "3222880",
    "end": "3228480"
  },
  {
    "text": "called in right and this function we're gonna use the server",
    "start": "3228480",
    "end": "3234079"
  },
  {
    "text": "pool and we're to set a value so here's how you set a value simple server pool",
    "start": "3234079",
    "end": "3239359"
  },
  {
    "text": "does set and you give it a key say foo right and then the value bar right and then",
    "start": "3239359",
    "end": "3245920"
  },
  {
    "text": "expiration day an hour and then the final one is a callback which gives you like in case of",
    "start": "3245920",
    "end": "3251680"
  },
  {
    "text": "an error i'm not going to set it because i trust that it's going to just work so all we have to do is",
    "start": "3251680",
    "end": "3259359"
  },
  {
    "text": "do that and this will just set the value but for the sake of time i'm gonna actually",
    "start": "3259359",
    "end": "3265599"
  },
  {
    "text": "set 10 values three four five six seven eight nine for those who know javascript we",
    "start": "3265599",
    "end": "3272000"
  },
  {
    "text": "can do this trick like for each i i think you can do a better job at this than i will but i think this works",
    "start": "3272000",
    "end": "3279359"
  },
  {
    "text": "right this this should work right",
    "start": "3279359",
    "end": "3284960"
  },
  {
    "text": "i like that so they will have a different key a",
    "start": "3284960",
    "end": "3290000"
  },
  {
    "text": "and the bar will have a this way we'll set what ten values in this case and",
    "start": "3290000",
    "end": "3295839"
  },
  {
    "text": "each value will have the foo a for one and bar one four two bar two the reason",
    "start": "3295839",
    "end": "3302240"
  },
  {
    "text": "i do this is because i wanna actually see that i'm not gonna read it from here all of us are going to do that is just",
    "start": "3302240",
    "end": "3307359"
  },
  {
    "text": "run and i'm going to read it from telnet and that's how we're going to do it let's go ahead and do",
    "start": "3307359",
    "end": "3313839"
  },
  {
    "text": "save npm install memcached",
    "start": "3313839",
    "end": "3318960"
  },
  {
    "text": "and then npm that's it node index.js hopefully it runs",
    "start": "3318960",
    "end": "3325359"
  },
  {
    "text": "and of course the moment i say that i have an error so let's go ahead and check the error here",
    "start": "3325359",
    "end": "3330480"
  },
  {
    "text": "so it's going to see that what the error is for each",
    "start": "3330480",
    "end": "3335838"
  },
  {
    "text": "so let's go ahead and just add that okay this is going to print the error in case",
    "start": "3338160",
    "end": "3344079"
  },
  {
    "text": "there is an error just in case all right let's try it again",
    "start": "3344079",
    "end": "3350720"
  },
  {
    "text": "node index.js all right now works i had like a typo so i had to",
    "start": "3350960",
    "end": "3358000"
  },
  {
    "text": "fix but look at this get four three get full four get full five",
    "start": "3358000",
    "end": "3363520"
  },
  {
    "text": "we're getting all the values that is pretty cool you guys right it's pretty cool so here's what i'm gonna do now",
    "start": "3363520",
    "end": "3369119"
  },
  {
    "text": "let's control exit here quit here's what i'm gonna do now i'm gonna",
    "start": "3369119",
    "end": "3374640"
  },
  {
    "text": "spin up more containers so it's going to do run dash",
    "start": "3374640",
    "end": "3381200"
  },
  {
    "start": "3375000",
    "end": "3660000"
  },
  {
    "text": "dash name mem2 right and they call it dash p one one",
    "start": "3381200",
    "end": "3386960"
  },
  {
    "text": "two one two one one two one one again this is the",
    "start": "3386960",
    "end": "3392160"
  },
  {
    "text": "actual con port will this will not change this is what's changing here right right here right detach memcache",
    "start": "3392160",
    "end": "3399680"
  },
  {
    "text": "d right i'm gonna do the same thing or three",
    "start": "3399680",
    "end": "3406400"
  },
  {
    "text": "three that is pretty neat right and uh for for sake of completing let's",
    "start": "3406880",
    "end": "3414240"
  },
  {
    "text": "add so four servers why servers are free we can we can spin up as much as we want",
    "start": "3414240",
    "end": "3420720"
  },
  {
    "text": "now let's edit our application right here and uh what we're gonna do is",
    "start": "3420720",
    "end": "3427839"
  },
  {
    "text": "literally just add a comma so hey saying one two one two is another server right",
    "start": "3427839",
    "end": "3435040"
  },
  {
    "text": "here's another one too for saying mac all they are living in the same server if you think about it right",
    "start": "3435040",
    "end": "3442160"
  },
  {
    "text": "it's just different services right i was saying mac one one two one four",
    "start": "3442160",
    "end": "3448319"
  },
  {
    "text": "that is awesome nothing changes right so i'm gonna do it again and then node",
    "start": "3448319",
    "end": "3454440"
  },
  {
    "text": "index.js i want you to pay attention to what will happen now the client app now",
    "start": "3454440",
    "end": "3459599"
  },
  {
    "text": "distributed all the stuff to all the servers so now my foods will be",
    "start": "3459599",
    "end": "3464960"
  },
  {
    "text": "all over the place let's test it out telnet hussein mac uh",
    "start": "3464960",
    "end": "3470559"
  },
  {
    "text": "one one two one two right let's connect to one one two one two the",
    "start": "3470559",
    "end": "3476720"
  },
  {
    "text": "second server and then get full one it's right there get four two not there good for three",
    "start": "3476720",
    "end": "3483599"
  },
  {
    "text": "no yeah it's right there good four four it's not there get it because it now the",
    "start": "3483599",
    "end": "3488640"
  },
  {
    "text": "distribution is up to the client i have no idea how how this will be distributed probably around robin but uh",
    "start": "3488640",
    "end": "3495839"
  },
  {
    "text": "could be something else right so if i pick now another server right",
    "start": "3495839",
    "end": "3501280"
  },
  {
    "text": "three let's do that get four one not there get four two not",
    "start": "3501280",
    "end": "3506400"
  },
  {
    "text": "there get four three not there get full four now there get full five",
    "start": "3506400",
    "end": "3511520"
  },
  {
    "text": "right there so it took us like five five is there right and and you get the",
    "start": "3511520",
    "end": "3516559"
  },
  {
    "text": "idea these keys are now distributed everywhere and when you ask about it now i'm going",
    "start": "3516559",
    "end": "3523920"
  },
  {
    "text": "physically to the server itself to ask about it but if i ask the node.js app",
    "start": "3523920",
    "end": "3529599"
  },
  {
    "text": "it's going to give me these values right so here's what i'm going to do next",
    "start": "3529599",
    "end": "3534799"
  },
  {
    "text": "right i'm going to do index.js after i run all these which is",
    "start": "3534799",
    "end": "3540160"
  },
  {
    "text": "i'm not going to run it anymore right because i have already stored these for an hour i'm going to just go a loop and",
    "start": "3540160",
    "end": "3546240"
  },
  {
    "text": "read right i'm going to create a function that reads and exactly similar",
    "start": "3546240",
    "end": "3552880"
  },
  {
    "text": "uh yy p and then just do a get",
    "start": "3552880",
    "end": "3559839"
  },
  {
    "text": "right the gate is slightly different what we're going to do is you don't need a value right you don't need an expiry",
    "start": "3559839",
    "end": "3565839"
  },
  {
    "text": "date but it's going to give you a function a callback where it's actually two places error and data right",
    "start": "3565839",
    "end": "3573599"
  },
  {
    "text": "and then we just print the data because that's what we're interested in assume there are no errors here again this is a",
    "start": "3573599",
    "end": "3578720"
  },
  {
    "text": "very simple app here and let's just go ahead and read so in this case you're talking to the pool directly",
    "start": "3578720",
    "end": "3585599"
  },
  {
    "text": "you're not talking to individual machines so we know that the keys were actually evenly distributed between the",
    "start": "3585599",
    "end": "3591040"
  },
  {
    "text": "servers because we telnetted into each service and tested that out right so now what we're going to do is let's run and",
    "start": "3591040",
    "end": "3597760"
  },
  {
    "text": "see node index.js look at beautiful",
    "start": "3597760",
    "end": "3602880"
  },
  {
    "text": "par nine bar two bar four by three bar six bar seven bar eight bar one by five",
    "start": "3602880",
    "end": "3608319"
  },
  {
    "text": "why do we get the different values it's very easy because we we're we're running asynchronous job",
    "start": "3608319",
    "end": "3614799"
  },
  {
    "text": "we have no idea yeah we executed full one first right but for",
    "start": "3614799",
    "end": "3620319"
  },
  {
    "text": "right we what we did is like we looped and send all the 10 requests at",
    "start": "3620319",
    "end": "3625440"
  },
  {
    "text": "the same time okay oh this is what we did we looped and",
    "start": "3625440",
    "end": "3631200"
  },
  {
    "text": "said all this 10 requests but these are asynchronous so bar 9",
    "start": "3631200",
    "end": "3637040"
  },
  {
    "text": "4 9 might get give us a result before 4 8 right all of this is just this is how",
    "start": "3637040",
    "end": "3642559"
  },
  {
    "text": "node.js works there's a single threaded and it sends all these requests and just",
    "start": "3642559",
    "end": "3647839"
  },
  {
    "text": "loops through that's main um the the main loop that the main thread loop right and looks for the results up it",
    "start": "3647839",
    "end": "3654319"
  },
  {
    "text": "depends on the server how fast it is going to respond right so it's going to send all these things and then hey the server response for this response for",
    "start": "3654319",
    "end": "3660799"
  },
  {
    "start": "3660000",
    "end": "3891000"
  },
  {
    "text": "this for this will just do all this stuff so the client here it really depends what it",
    "start": "3660799",
    "end": "3666000"
  },
  {
    "text": "does as well right so the client really depends on this it",
    "start": "3666000",
    "end": "3671520"
  },
  {
    "text": "took the hash right of the full one determine the full one should exist on",
    "start": "3671520",
    "end": "3677119"
  },
  {
    "text": "this server connect it to the server ask for the value pull that value and then return it so you have no idea how",
    "start": "3677119",
    "end": "3684480"
  },
  {
    "text": "fast these servers will reply right and the number of connections to each server also really matter right so that's",
    "start": "3684480",
    "end": "3691440"
  },
  {
    "text": "basically uh it's for the demo guys uh kind of explained all this uh idea of memcache d let's go ahead and",
    "start": "3691440",
    "end": "3698720"
  },
  {
    "text": "summarize this course all right we did the demo let's summarize we talked about memory management memory is fragmented",
    "start": "3698720",
    "end": "3705200"
  },
  {
    "text": "if we didn't do the slab pages concept then we're gonna be allocating values left and right right and that as a",
    "start": "3705200",
    "end": "3712480"
  },
  {
    "text": "result becomes fragmentation and the fragmentation is bad because now you have all these beautiful",
    "start": "3712480",
    "end": "3718960"
  },
  {
    "text": "gaps of free space that we cannot use unfortunately right because our items might not necessarily fit these gaps",
    "start": "3718960",
    "end": "3725920"
  },
  {
    "text": "right so we need memory management lru again a very an unpopular opinion i",
    "start": "3725920",
    "end": "3732400"
  },
  {
    "text": "i would like for this to be an option to be disabled so that i don't get locked",
    "start": "3732400",
    "end": "3737920"
  },
  {
    "text": "right and keep my application simple and if someone want to build an ru why don't",
    "start": "3737920",
    "end": "3743039"
  },
  {
    "text": "they build it themselves right or just have that client have the control i wish they stayed simple and didn't implement",
    "start": "3743039",
    "end": "3749760"
  },
  {
    "text": "this just that's just my only this criticism of the memcached they they stayed simple they stick to their rules",
    "start": "3749760",
    "end": "3756799"
  },
  {
    "text": "this is to in my opinion i think it's an overkill right threads i love this design yeah we can work with many",
    "start": "3756799",
    "end": "3764240"
  },
  {
    "text": "threads of course there is a limit for the there is another problem with the thread design here is that let's assume you have",
    "start": "3764240",
    "end": "3772079"
  },
  {
    "text": "multiple threads right and each thread is a connection right let's say about",
    "start": "3772079",
    "end": "3777680"
  },
  {
    "text": "that right and and when we looked at the data i think when we looked at the stat we thought that there is a fixed number",
    "start": "3777680",
    "end": "3783119"
  },
  {
    "text": "of threads right and i don't know if this if memcache d share",
    "start": "3783119",
    "end": "3788400"
  },
  {
    "text": "connections on a given thread like have multiple connections on a thread i don't know that maybe because otherwise it's going to",
    "start": "3788400",
    "end": "3794640"
  },
  {
    "text": "run out of threads right so in this case what you you you can end up with is a",
    "start": "3794640",
    "end": "3800319"
  },
  {
    "text": "thread with a connection that happens to have a very aggressive client a client that",
    "start": "3800319",
    "end": "3805920"
  },
  {
    "text": "sends a lot of data to this thread you know so in this particular thing you create a bottleneck",
    "start": "3805920",
    "end": "3812240"
  },
  {
    "text": "and that bottleneck really there is no solution to it because you don't know if a connection",
    "start": "3812240",
    "end": "3817280"
  },
  {
    "text": "is going to be aggressive or light weight right you can you can change them complete model",
    "start": "3817280",
    "end": "3823200"
  },
  {
    "text": "to a centralized thread model whereas a center thread that takes the messages",
    "start": "3823200",
    "end": "3828240"
  },
  {
    "text": "these requests and these requests will be distributed evenly right you can do that but then the bottleneck is moved to",
    "start": "3828240",
    "end": "3834240"
  },
  {
    "text": "a single thread you lose either way right there is no solution the best solution that's when",
    "start": "3834240",
    "end": "3839920"
  },
  {
    "text": "you when you when you're going to deep these things like it's it's fascinating to me i absolutely love it",
    "start": "3839920",
    "end": "3845520"
  },
  {
    "text": "we talked about read and write talked about locking cover distribution cache which is completely client-side guys i",
    "start": "3845520",
    "end": "3851440"
  },
  {
    "text": "hope you enjoyed this uh crash course deep dive level into memcache d",
    "start": "3851440",
    "end": "3856799"
  },
  {
    "text": "absolutely i enjoyed researching this took me about a month to research this entire",
    "start": "3856799",
    "end": "3862799"
  },
  {
    "text": "course uh absolutely love it and if you want to support the channel become a member there is a lot of",
    "start": "3862799",
    "end": "3868559"
  },
  {
    "text": "member exclusive content in this channel if you want to support otherwise",
    "start": "3868559",
    "end": "3873680"
  },
  {
    "text": "there is the there's uh i have a lot of udemy courses uh there's discount coupons check out",
    "start": "3873680",
    "end": "3879280"
  },
  {
    "text": "took the mouse and that supports the channel appreciate you so much and thank you all for your wonderful messages hope",
    "start": "3879280",
    "end": "3886559"
  },
  {
    "text": "you enjoyed this course i'm gonna see you on the next one you guys stay awesome goodbye",
    "start": "3886559",
    "end": "3892160"
  }
]