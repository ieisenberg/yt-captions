[
  {
    "start": "0",
    "end": "150000"
  },
  {
    "text": "initially I wanted this episode to be about a Blog that notion has written and",
    "start": "0",
    "end": "6420"
  },
  {
    "text": "how they're starting to move to sharding and because of limitations in postgres",
    "start": "6420",
    "end": "13380"
  },
  {
    "text": "uh freeze mechanisms but as I'm starting writing or talking about this article",
    "start": "13380",
    "end": "20400"
  },
  {
    "text": "and so I was like you know I I have a little bit of a weakness when it comes to understanding uh postgres locking",
    "start": "20400",
    "end": "30300"
  },
  {
    "text": "appears just so much that would conflict with each other when it",
    "start": "30900",
    "end": "36360"
  },
  {
    "text": "comes to postgresp there are of course three level of logs table logs page and",
    "start": "36360",
    "end": "43920"
  },
  {
    "text": "row level locks but then the table locks are is not really what",
    "start": "43920",
    "end": "49860"
  },
  {
    "text": "do you think they are you know to me and mostly most dbas I can",
    "start": "49860",
    "end": "56039"
  },
  {
    "text": "and I don't consider myself a pdba but if someone said hey acquire a table look",
    "start": "56039",
    "end": "61140"
  },
  {
    "text": "that means it's a table look you can't do anything to that table but that's not true in postgres there are what I'm",
    "start": "61140",
    "end": "69659"
  },
  {
    "text": "looking at six seven eight types of table locks so a table lock by a certain type I mean",
    "start": "69659",
    "end": "77580"
  },
  {
    "text": "it just means that something happened to this table it doesn't mean you cannot edit this table you can absolutely do",
    "start": "77580",
    "end": "84000"
  },
  {
    "text": "that it's just that of an indication that same thing with the raw level Lux which",
    "start": "84000",
    "end": "90000"
  },
  {
    "text": "is easier to understand and Page logs which have we have zero knowledge about postgres that at least from the dock but",
    "start": "90000",
    "end": "97079"
  },
  {
    "text": "that's what I wanted to do in this video I just want to go through the different types of logs",
    "start": "97079",
    "end": "102600"
  },
  {
    "text": "confusing as they are name wise and just try to know what what operation has",
    "start": "102600",
    "end": "108060"
  },
  {
    "text": "acquire what kind of lock if I do a vacuum full what can I do to my table concurrently if I do a vacuum normal the",
    "start": "108060",
    "end": "116520"
  },
  {
    "text": "auto vacuum what can I do what can't I do if I do a trunk kit what happens if I",
    "start": "116520",
    "end": "122640"
  },
  {
    "text": "do a normal insert can I do another uncertain table if I update a row can I update that same row okay",
    "start": "122640",
    "end": "129660"
  },
  {
    "text": "these are the questions that I wanted to understand before I jump into taking out like a bigger project actual",
    "start": "129660",
    "end": "137940"
  },
  {
    "text": "things that happen and try to kind of talk about something that I don't understand right that's what I wanted to",
    "start": "137940",
    "end": "144720"
  },
  {
    "text": "do in this channel let's jump into it all right so looking at chapter 13 from the dog concurrency",
    "start": "144720",
    "end": "151620"
  },
  {
    "start": "150000",
    "end": "330000"
  },
  {
    "text": "control and specifically chapter 13.3 explicit locking I don't know why they",
    "start": "151620",
    "end": "158760"
  },
  {
    "text": "are called explicit locking because most of the things that we're going to talk about here are not really explicit it just happened implicitly",
    "start": "158760",
    "end": "165239"
  },
  {
    "text": "as a side effect from you running certain operations and I suppose before",
    "start": "165239",
    "end": "170459"
  },
  {
    "text": "we we jump into this we might need to Define what locks are",
    "start": "170459",
    "end": "178319"
  },
  {
    "text": "locks are critical for concurrency and and ensuring Integrity when it comes to",
    "start": "178319",
    "end": "183540"
  },
  {
    "text": "data right they are used in some form",
    "start": "183540",
    "end": "189480"
  },
  {
    "text": "in the operating system if you talks data structures courses you will see that logs are",
    "start": "189480",
    "end": "197580"
  },
  {
    "text": "talked about in certain in terms of semaphores or",
    "start": "197580",
    "end": "204140"
  },
  {
    "text": "mutexes you know where a certain variable can be locked",
    "start": "204140",
    "end": "209760"
  },
  {
    "text": "so that if multiple threads which is what concurrency is right or single user single thread you don't",
    "start": "209760",
    "end": "217200"
  },
  {
    "text": "have this problem you don't need to acquire any locks technically so we acquire mutexes and locks to ensure",
    "start": "217200",
    "end": "224819"
  },
  {
    "text": "correctness the only the types that are familiar and popular are shared logs",
    "start": "224819",
    "end": "232620"
  },
  {
    "text": "if someone if someone is a read a value think of it like an object a row a",
    "start": "232620",
    "end": "240180"
  },
  {
    "text": "document right they can acquire a shared log and if someone else acquired the same Sherlock",
    "start": "240180",
    "end": "246599"
  },
  {
    "text": "you can acquire unlimited number of shared logs readers are called real drugs and then if someone want to update",
    "start": "246599",
    "end": "253799"
  },
  {
    "text": "there must be no shared locks to update that why and the reason is",
    "start": "253799",
    "end": "260400"
  },
  {
    "text": "because if I'm reading something I want to make sure no it doesn't change goal of shared locks right so that's that's",
    "start": "260400",
    "end": "266759"
  },
  {
    "text": "the locks we know and exclusive locks of course will give you exclusive access now once you obtain an exclusive lock on",
    "start": "266759",
    "end": "273479"
  },
  {
    "text": "that object or row nobody can change it why because nobody can acquire",
    "start": "273479",
    "end": "279180"
  },
  {
    "text": "a shared lock and that's basically the two simplest type of locks which are also",
    "start": "279180",
    "end": "285600"
  },
  {
    "text": "aggressive if you think about it right because if in real databases like when",
    "start": "285600",
    "end": "291720"
  },
  {
    "text": "you read something you absolutely other transaction can change that thing right so real database don't really acquire",
    "start": "291720",
    "end": "300240"
  },
  {
    "text": "access or shared locks and exclusive when you do normal operations they don't",
    "start": "300240",
    "end": "305400"
  },
  {
    "text": "do that right they do other type of lighter weight locks and that's what",
    "start": "305400",
    "end": "310620"
  },
  {
    "text": "we're gonna talk about here can you still acquire access shared logs and uh",
    "start": "310620",
    "end": "315780"
  },
  {
    "text": "exclusive block yeah manually explicitly Say Hey I want I want to access shared lock on this I want to simulate this",
    "start": "315780",
    "end": "322860"
  },
  {
    "text": "experience and you can absolutely do that with that out of the way let's start with this document all right so we'll",
    "start": "322860",
    "end": "329340"
  },
  {
    "text": "talk about explicit locking here four types or actually more than then table locks things that happen at the table",
    "start": "329340",
    "end": "335639"
  },
  {
    "start": "330000",
    "end": "550000"
  },
  {
    "text": "level and again it's not really locking the whole table don't think of it like this way like oh I'm locking the whole",
    "start": "335639",
    "end": "341699"
  },
  {
    "text": "table nobody can do anything there are lighter weight things that happen at the table level that tells postgres things",
    "start": "341699",
    "end": "348720"
  },
  {
    "text": "here row level locks things happen at the row level page level because",
    "start": "348720",
    "end": "354240"
  },
  {
    "text": "databases work with Pages you can lock a certain page and again we don't have",
    "start": "354240",
    "end": "359820"
  },
  {
    "text": "many information about that particular one Deadlocks things that happen when two transactions try to manage the same",
    "start": "359820",
    "end": "367680"
  },
  {
    "text": "resource and they are waiting on each other you end up with a Deadlock advisory log that's a also called",
    "start": "367680",
    "end": "374639"
  },
  {
    "text": "application locks level locks which is apps can create this concept of a mutex that",
    "start": "374639",
    "end": "382259"
  },
  {
    "text": "is manually created by the app but those live in the database so other",
    "start": "382259",
    "end": "387900"
  },
  {
    "text": "apps that try to acquire the same advisory lock will will wait and you can",
    "start": "387900",
    "end": "393060"
  },
  {
    "text": "do cert so much cool things with those you can serialize as a different logical",
    "start": "393060",
    "end": "399180"
  },
  {
    "text": "operation even if it's not really a transaction right let's say your application is is",
    "start": "399180",
    "end": "404940"
  },
  {
    "text": "performing an operation but this operation is Eve is also a multiple transactions right",
    "start": "404940",
    "end": "410460"
  },
  {
    "text": "so you need to protect the whole operation not just that transaction level because you have protection at the",
    "start": "410460",
    "end": "416580"
  },
  {
    "text": "transaction level so you can operate at that level so let's say you want to",
    "start": "416580",
    "end": "421680"
  },
  {
    "text": "prevent people from running this operation twice concurrently you can't just do that with",
    "start": "421680",
    "end": "427259"
  },
  {
    "text": "normal transactions because your application your operation might acquire multiple transactions and and and at a",
    "start": "427259",
    "end": "433680"
  },
  {
    "text": "whole it's one unit of work right so advisor lock all right let's let's get it started what's good SQL provides",
    "start": "433680",
    "end": "440759"
  },
  {
    "text": "various lock mood to concurrent control access to the data to data and tables",
    "start": "440759",
    "end": "446460"
  },
  {
    "text": "these modes can be used by for application controlled locking in situations where mvcc does not give the",
    "start": "446460",
    "end": "453120"
  },
  {
    "text": "desired Behavior as I told you right because mvcc which is multiversion concussion control doesn't always give you what you want you need sometimes you",
    "start": "453120",
    "end": "460380"
  },
  {
    "text": "need more and that control is given to you as well also most postgres commands",
    "start": "460380",
    "end": "466560"
  },
  {
    "text": "automatically acquire logs of appropriate modes to ensure that reference tables are not dropped or",
    "start": "466560",
    "end": "472319"
  },
  {
    "text": "modified in incompatible ways while the command executes and that's an interesting thing right so we so they're",
    "start": "472319",
    "end": "479460"
  },
  {
    "text": "giving an example here for example trinket cannot safely be executed concurrently with other operations",
    "start": "479460",
    "end": "486240"
  },
  {
    "text": "so it obtains an access exclusive lock on the table to enforce that acts",
    "start": "486240",
    "end": "492419"
  },
  {
    "text": "exclusive as we're gonna see here is the highest level of locks it's a most aggressive one",
    "start": "492419",
    "end": "498740"
  },
  {
    "text": "it's you do that when you actually want to change the layout of the whole thing",
    "start": "498740",
    "end": "504060"
  },
  {
    "text": "right it's acquired by truncate because let's see how how do you do actually try and",
    "start": "504060",
    "end": "509639"
  },
  {
    "text": "gate operation you might say oh delete all the table no no that's just so not",
    "start": "509639",
    "end": "515159"
  },
  {
    "text": "performant because you know that's a trend K that is undoable what do you do",
    "start": "515159",
    "end": "520260"
  },
  {
    "text": "is you literally create another table and point the pointer of this stable",
    "start": "520260",
    "end": "525720"
  },
  {
    "text": "your name points to the empty table leave the whole thing that all tables",
    "start": "525720",
    "end": "531300"
  },
  {
    "text": "just goes away that's how I would do it you know it's it's a it's an instant that's how you truncate your table and",
    "start": "531300",
    "end": "538440"
  },
  {
    "text": "to do that you want to make sure that nobody actually reading that at all right and how do you know that through",
    "start": "538440",
    "end": "545880"
  },
  {
    "text": "other type of logs that we're gonna talk about all right so let's get started with table level locks",
    "start": "545880",
    "end": "552420"
  },
  {
    "start": "550000",
    "end": "700000"
  },
  {
    "text": "the list below shows the available lock modes and contexts in which they are",
    "start": "552420",
    "end": "558660"
  },
  {
    "text": "used automatically by postgres again it's an automatic operation it's not really implicit so this chapter called",
    "start": "558660",
    "end": "566220"
  },
  {
    "text": "explicit lock-ins a little bit confusing you can also acquire any of these logs",
    "start": "566220",
    "end": "573480"
  },
  {
    "text": "explicitly with the lock command interesting I didn't know that so you can acquire",
    "start": "573480",
    "end": "580440"
  },
  {
    "text": "any of these just say lock and simulate",
    "start": "580440",
    "end": "586019"
  },
  {
    "text": "an access share simulate an access axis exclusive like a truncate like as if you",
    "start": "586019",
    "end": "592380"
  },
  {
    "text": "run a trunk it huh that's very interesting probably not a good idea unless you know what you're doing right",
    "start": "592380",
    "end": "597839"
  },
  {
    "text": "remember that all these locksmodes are table level locks even if the name",
    "start": "597839",
    "end": "603360"
  },
  {
    "text": "contained the word draw which which is what confuses me here you might say",
    "start": "603360",
    "end": "609839"
  },
  {
    "text": "something called row share it doesn't really mean it's it it's a raw lock it's actually a table lock that has happened",
    "start": "609839",
    "end": "616200"
  },
  {
    "text": "to be called raw share the names of the lock modes are historical the to some extent the names",
    "start": "616200",
    "end": "623399"
  },
  {
    "text": "reflect the type the typical usage of each lock mode but the semantics are all",
    "start": "623399",
    "end": "629220"
  },
  {
    "text": "the same the only real difference between one lock mode and another is the",
    "start": "629220",
    "end": "634500"
  },
  {
    "text": "set of lock modes which with which each conflicts that's what",
    "start": "634500",
    "end": "640920"
  },
  {
    "text": "important what matters when we see a lock mode conflicts with another and that's where the blocking will happen",
    "start": "640920",
    "end": "646920"
  },
  {
    "text": "when it comes to transaction two transactions cannot hold locks of conflicting modes on the same table at",
    "start": "646920",
    "end": "655260"
  },
  {
    "text": "the same time so if transaction a is holding a certain lock right type and",
    "start": "655260",
    "end": "661680"
  },
  {
    "text": "the transaction B want to hold a conflicting type right it will it will conflict and they will block each other",
    "start": "661680",
    "end": "667920"
  },
  {
    "text": "however a transaction never conflicts with itself right for example if my",
    "start": "667920",
    "end": "673200"
  },
  {
    "text": "acquire x a transaction my acquire an exclusive log and later acquire access",
    "start": "673200",
    "end": "679500"
  },
  {
    "text": "share log on the same table that's fine as long as it's the same transaction that's fine like it's similar to how you",
    "start": "679500",
    "end": "686459"
  },
  {
    "text": "write and you can read your own rights right and you can write your own right you can change the things you just",
    "start": "686459",
    "end": "692760"
  },
  {
    "text": "changed that's fine but it's other transactions can Duty that to you",
    "start": "692760",
    "end": "698880"
  },
  {
    "text": "so that's a very interesting thing and I want to start and instead of starting with these lock mode I want to",
    "start": "698880",
    "end": "706680"
  },
  {
    "start": "700000",
    "end": "1060000"
  },
  {
    "text": "start with the most aggressive one access exclusive this one conflicts with locks of all",
    "start": "706680",
    "end": "715560"
  },
  {
    "text": "modes and you can manually acquire that using something called the lock command",
    "start": "715560",
    "end": "720660"
  },
  {
    "text": "or it can be implicitly acquired by these operations this mode guarantees that the",
    "start": "720660",
    "end": "729360"
  },
  {
    "text": "holder is the only transaction accessing the table in any way that's the most aggressive one right you can't read you",
    "start": "729360",
    "end": "737700"
  },
  {
    "text": "can change you can do anything on this lock is acquired by another transaction example drop table if you're in the",
    "start": "737700",
    "end": "745860"
  },
  {
    "text": "process of dropping table nobody can read it nobody can write to it if you're in the process of truncating which you",
    "start": "745860",
    "end": "752040"
  },
  {
    "text": "must mean that you acquired an exclusive nobody can do anything to this table can read it can do anything that includes",
    "start": "752040",
    "end": "759420"
  },
  {
    "text": "another transaction trying to try and create that same table right access exclusive kinda conflict with access",
    "start": "759420",
    "end": "767060"
  },
  {
    "text": "exclusive right re-index if you want to re-index that whole table I want to make",
    "start": "767060",
    "end": "772200"
  },
  {
    "text": "sure that I'm reading this and I don't want anything to change it right",
    "start": "772200",
    "end": "779060"
  },
  {
    "text": "in re-indexing the table or even create index for that manner should you create",
    "start": "779060",
    "end": "784200"
  },
  {
    "text": "that should acquire the same one because I don't want anyone changing the state of the table or",
    "start": "784200",
    "end": "791579"
  },
  {
    "text": "insert the new stuff while I'm re-indexing because I can't miss stuff right because as I'm reading reading",
    "start": "791579",
    "end": "797880"
  },
  {
    "text": "reading someone just changed something if someone just changed something then I'm not I'm not gonna pick it up and my",
    "start": "797880",
    "end": "805079"
  },
  {
    "text": "index is gonna be out of uh State out of out of sync cluster if I want to Cluster",
    "start": "805079",
    "end": "812820"
  },
  {
    "text": "my table such that on a certain column I want to reorder the Heap and the table on that column I",
    "start": "812820",
    "end": "821940"
  },
  {
    "text": "can call this command and the moment you're starting shoveling things up in the table changing to pull location that",
    "start": "821940",
    "end": "829500"
  },
  {
    "text": "will require you to essentially re reset the table IDs create new triple IDs and",
    "start": "829500",
    "end": "835380"
  },
  {
    "text": "as a result not only you have to update all the indexes but also you have to change you have to make sure nobody's is screwing",
    "start": "835380",
    "end": "842279"
  },
  {
    "text": "with that table in that process vacuum full vacuum is an operation that Mar",
    "start": "842279",
    "end": "847920"
  },
  {
    "text": "removes the tuples that are not visible by anyone right it's dead nobody's needing that",
    "start": "847920",
    "end": "855180"
  },
  {
    "text": "record anymore because even if it's like an older running transaction that still needs that for example it's a repeatable",
    "start": "855180",
    "end": "861360"
  },
  {
    "text": "read that requires cons and VCC and needs that row no all these transactions",
    "start": "861360",
    "end": "868680"
  },
  {
    "text": "are committed this row has been dead someone updated someone deleted it and that that that's done we have zero",
    "start": "868680",
    "end": "875880"
  },
  {
    "text": "reason to keep that row if that's the case vacuum will just remove it freeing up",
    "start": "875880",
    "end": "883740"
  },
  {
    "text": "space in that page for other tuples to go in that page that's the only thing",
    "start": "883740",
    "end": "889860"
  },
  {
    "text": "that vacuum does vacuum fall is",
    "start": "889860",
    "end": "897180"
  },
  {
    "text": "here's an example before we go to vacuum phone for normal vacuum if you have a page with all of it",
    "start": "897180",
    "end": "905040"
  },
  {
    "text": "filled with dead tuples let's say not just page 10 pages",
    "start": "905040",
    "end": "910920"
  },
  {
    "text": "to say you deleted a massive number of rows on your table if you just do a normal vacuum",
    "start": "910920",
    "end": "917760"
  },
  {
    "text": "eventually it will Mark all these Pages as",
    "start": "917760",
    "end": "923120"
  },
  {
    "text": "the rows are deleted so those pages are still there occupying space on the table",
    "start": "923120",
    "end": "930720"
  },
  {
    "text": "but they are free to be inserted and you can insert stuff in those pages right that does not mean it will be reclaimed",
    "start": "930720",
    "end": "938399"
  },
  {
    "text": "and sent back to a desk no you're still acquiring whatever how many pages times",
    "start": "938399",
    "end": "945300"
  },
  {
    "text": "8K which is that default page size right vacuum full actually does that vacuum full removes physically remove all these",
    "start": "945300",
    "end": "953160"
  },
  {
    "text": "space you know compact the table rename things if if necessary if you have like",
    "start": "953160",
    "end": "961440"
  },
  {
    "text": "Pages 0 to 10 and all are dead the whole page is already renamed I",
    "start": "961440",
    "end": "968699"
  },
  {
    "text": "think right it's like okay from zero to ten it's like unused now and Pages 11",
    "start": "968699",
    "end": "973860"
  },
  {
    "text": "and forward are used no the whole thing will be just cleaned out right we started over from page zero and start",
    "start": "973860",
    "end": "982079"
  },
  {
    "text": "moving data around and right so so it's shuffling the whole structure so it has",
    "start": "982079",
    "end": "987839"
  },
  {
    "text": "to acquire access exclusive right to do all this thing refresh materialize View",
    "start": "987839",
    "end": "993300"
  },
  {
    "text": "a material as a view is a view that is materialized as persisted on desk right",
    "start": "993300",
    "end": "998759"
  },
  {
    "text": "and to make sure so because it's persisted and instead of actually",
    "start": "998759",
    "end": "1004100"
  },
  {
    "text": "on demand you query the database and give you the view materials viewers faster but they can go",
    "start": "1004100",
    "end": "1010940"
  },
  {
    "text": "out of sync right so to refresh the materials review We want to make sure that while I'm refreshing while I'm",
    "start": "1010940",
    "end": "1016160"
  },
  {
    "text": "copying data I make sure that nobody actually touches that original table so",
    "start": "1016160",
    "end": "1022279"
  },
  {
    "text": "I don't want anybody to touch anything right so I'm gonna acquire that and remove it of course concurrently can be",
    "start": "1022279",
    "end": "1029178"
  },
  {
    "text": "added to indexing to certain things that to allow",
    "start": "1029179",
    "end": "1034819"
  },
  {
    "text": "other operations because you can currently do things like you can create index concurrently create index can",
    "start": "1034819",
    "end": "1042140"
  },
  {
    "text": "can lock the table of course right would access exclusive I don't see it",
    "start": "1042140",
    "end": "1047839"
  },
  {
    "text": "here but I'm pretty sure it does if free index is there why is create index not there it doesn't make sense right I",
    "start": "1047839",
    "end": "1054140"
  },
  {
    "text": "would imagine like create index will also block so create index concurrently doesn't need to and we're gonna go with that",
    "start": "1054140",
    "end": "1060799"
  },
  {
    "start": "1060000",
    "end": "1140000"
  },
  {
    "text": "now we understood the most aggressive let's understand the least aggressive which is access share right so X is",
    "start": "1060799",
    "end": "1068960"
  },
  {
    "text": "exclusive and access share these are conflicting locks",
    "start": "1068960",
    "end": "1074360"
  },
  {
    "text": "access share is acquired by selects normal select none like select for update just normal suck if you like do a",
    "start": "1074360",
    "end": "1080120"
  },
  {
    "text": "select on a table right or if you select a row from that table the whole table is",
    "start": "1080120",
    "end": "1087980"
  },
  {
    "text": "uh locked with this type of lock which is access share for that transaction so",
    "start": "1087980",
    "end": "1095900"
  },
  {
    "text": "access Sherlock now we obtain it that means the moment anyone selects the trend select something right and it",
    "start": "1095900",
    "end": "1103460"
  },
  {
    "text": "leaves that transaction open you cannot try and get the table",
    "start": "1103460",
    "end": "1108500"
  },
  {
    "text": "you cannot delete the table you cannot drop it you cannot do anything like",
    "start": "1108500",
    "end": "1113720"
  },
  {
    "text": "re-index or vacuum full this version will be blocked if someone is actually reading so that's very critical so",
    "start": "1113720",
    "end": "1120260"
  },
  {
    "text": "vacuum Falls really not something you have to do but normal vacuum shouldn't really",
    "start": "1120260",
    "end": "1125660"
  },
  {
    "text": "block that and that's what I want to understand truly as I as I dig deep into",
    "start": "1125660",
    "end": "1130940"
  },
  {
    "text": "this let's continue so access share simple operations right roll share a row share",
    "start": "1130940",
    "end": "1138740"
  },
  {
    "text": "is the select commands acquire a lock of this mode on all tables for on which one",
    "start": "1138740",
    "end": "1146240"
  },
  {
    "start": "1140000",
    "end": "1275000"
  },
  {
    "text": "of the four update for no key update for share or for key share options specified",
    "start": "1146240",
    "end": "1153200"
  },
  {
    "text": "in addition to access shared logs on any other tables that are referenced without",
    "start": "1153200",
    "end": "1158960"
  },
  {
    "text": "any explicit four options so because we're reading like we're doing a select",
    "start": "1158960",
    "end": "1164480"
  },
  {
    "text": "statement so we're acquiring a shared law a shared access access share but then we also acquiring a row share on",
    "start": "1164480",
    "end": "1171380"
  },
  {
    "text": "the table so someone in the stable did a row share and",
    "start": "1171380",
    "end": "1176600"
  },
  {
    "text": "I know the names are very confusing right which means someone did an actual",
    "start": "1176600",
    "end": "1182419"
  },
  {
    "text": "select for updated so technically they didn't really changed",
    "start": "1182419",
    "end": "1188419"
  },
  {
    "text": "the they didn't really edit anything but they're acquiring M4 update or for d for",
    "start": "1188419",
    "end": "1194419"
  },
  {
    "text": "share or for uh for for key share these operations will acquire an explicit lock",
    "start": "1194419",
    "end": "1201919"
  },
  {
    "text": "at the row level which we're gonna talk about right but also acquire a table level lock code row share so it gives",
    "start": "1201919",
    "end": "1208100"
  },
  {
    "text": "indication this gives an intention to possible that something is happening on this table right",
    "start": "1208100",
    "end": "1213260"
  },
  {
    "text": "raw exclusive so what what happened here raw exclusive",
    "start": "1213260",
    "end": "1218360"
  },
  {
    "text": "raw exclusive what happens when you do that normal DML",
    "start": "1218360",
    "end": "1224360"
  },
  {
    "text": "stuff like if you insert the row if you delete a row if you update a row the",
    "start": "1224360",
    "end": "1229400"
  },
  {
    "text": "table is marked as raw exclusive for that",
    "start": "1229400",
    "end": "1234440"
  },
  {
    "text": "transaction again or here we start at the table level so what happened with that those kind of conflict with other",
    "start": "1234440",
    "end": "1241640"
  },
  {
    "text": "operations they kind of conflict with share and share or exclusive and exclusive and access exclusive we're",
    "start": "1241640",
    "end": "1247520"
  },
  {
    "text": "gonna come to that like in a minute and we're gonna when we see the table so if you do a merge and insert an update this",
    "start": "1247520",
    "end": "1254179"
  },
  {
    "text": "is acquired at the table level and and I will tell you what can and can't be done and of course access inclusive the",
    "start": "1254179",
    "end": "1260419"
  },
  {
    "text": "moment you do that or select you can't re-index the table you can't vacuum right because that complex with anything",
    "start": "1260419",
    "end": "1266480"
  },
  {
    "text": "but I'm interested in the in the interested in the small things here and that's what I'm really interesting okay",
    "start": "1266480",
    "end": "1273260"
  },
  {
    "text": "share update exclusive or getting interested now share update exclusive right conflict with share update",
    "start": "1273260",
    "end": "1281179"
  },
  {
    "start": "1275000",
    "end": "1410000"
  },
  {
    "text": "exclusive share share raw exclusive exclusive it's get it's getting ridiculous right now right this mode",
    "start": "1281179",
    "end": "1287600"
  },
  {
    "text": "protects the table against concurrent schema changes and vacuum runs",
    "start": "1287600",
    "end": "1294320"
  },
  {
    "text": "here is interesting this one share update exclusive is",
    "start": "1294320",
    "end": "1300380"
  },
  {
    "text": "acquired with vacuum normal vacuum not full because we know vacuum fall re",
    "start": "1300380",
    "end": "1306919"
  },
  {
    "text": "changes the whole structure right and acquires an access exclusive normal",
    "start": "1306919",
    "end": "1312559"
  },
  {
    "text": "vacuum right acquires simple share update exclusive which is uh",
    "start": "1312559",
    "end": "1319900"
  },
  {
    "text": "lightweight slightly lightweight what can you do with this guy right",
    "start": "1319900",
    "end": "1325280"
  },
  {
    "text": "when you do that you acquire this share update exclusive and we'll see what",
    "start": "1325280",
    "end": "1330440"
  },
  {
    "text": "can't we do with this right does it it it complex with share update exclusive",
    "start": "1330440",
    "end": "1336140"
  },
  {
    "text": "which is itself so no two vacuums can run this at the same time it conflicts",
    "start": "1336140",
    "end": "1341480"
  },
  {
    "text": "with share we don't know what share is yet we're going to come to that it comes with share raw exclusive",
    "start": "1341480",
    "end": "1348679"
  },
  {
    "text": "shadow which we didn't explain yet it it talks",
    "start": "1348679",
    "end": "1353720"
  },
  {
    "text": "with exclusive which we didn't talk about yet and then exclusive lock right this one's protectable against schema",
    "start": "1353720",
    "end": "1359240"
  },
  {
    "text": "changes like if you're making a concurrent schema changes and vacuum runs this will protect the table against",
    "start": "1359240",
    "end": "1365419"
  },
  {
    "text": "it so what things are acquires this if you do an analyze if you want to actually get that table statistics",
    "start": "1365419",
    "end": "1373280"
  },
  {
    "text": "update that table statistic you acquire that so technically speaking",
    "start": "1373280",
    "end": "1379159"
  },
  {
    "text": "so I can absolutely do uh a vacuum and continue to insert rows in the table",
    "start": "1379159",
    "end": "1386480"
  },
  {
    "text": "because those guys do not conflict with each other we'll look at the table in a",
    "start": "1386480",
    "end": "1391520"
  },
  {
    "text": "minute and understand this create index concurrently acquires that right so you can still create rows that's what really",
    "start": "1391520",
    "end": "1399200"
  },
  {
    "text": "matters to me right I can create update and delete while create index concurrently I can do that right I can",
    "start": "1399200",
    "end": "1405440"
  },
  {
    "text": "do creating statistics I can I can re-index concurrently and do all of that",
    "start": "1405440",
    "end": "1410480"
  },
  {
    "start": "1410000",
    "end": "1490000"
  },
  {
    "text": "what is share now share conflicts with raw exclusive share",
    "start": "1410480",
    "end": "1417020"
  },
  {
    "text": "update exclusive right raw exclusive is there is the one ah now",
    "start": "1417020",
    "end": "1423140"
  },
  {
    "text": "this is actually interesting right share that's our shared lock okay",
    "start": "1423140",
    "end": "1431500"
  },
  {
    "text": "table you can't really change that table right because the conflict will draw",
    "start": "1431740",
    "end": "1437120"
  },
  {
    "text": "exclusive and raw exclusive is the one that acquire when you update and certain delete",
    "start": "1437120",
    "end": "1443600"
  },
  {
    "text": "so that's a dangerous one so if you if your transaction acquires share like a",
    "start": "1443600",
    "end": "1449000"
  },
  {
    "text": "create index credit index can't be run in the transaction I think not right",
    "start": "1449000",
    "end": "1454159"
  },
  {
    "text": "or maybe it is yeah yeah it's this is postgres this is not um it's not Oracle so yeah create index will acquire share",
    "start": "1454159",
    "end": "1462080"
  },
  {
    "text": "log on the table and when you do that you can do any updates or insert on or deletes your",
    "start": "1462080",
    "end": "1470059"
  },
  {
    "text": "table and also it conflict with share raw exclusive which we talked about",
    "start": "1470059",
    "end": "1475460"
  },
  {
    "text": "no we didn't talk about share raw exposure and it acquire and a conflicts also will",
    "start": "1475460",
    "end": "1480980"
  },
  {
    "text": "share update exclusive which is acquired by vacuum so if you're creating an index",
    "start": "1480980",
    "end": "1486080"
  },
  {
    "text": "you can't run a vacuum share raw exclusive conflicts",
    "start": "1486080",
    "end": "1491480"
  },
  {
    "start": "1490000",
    "end": "1518000"
  },
  {
    "text": "with pretty much everything right this mode protects a table against concurrent",
    "start": "1491480",
    "end": "1497120"
  },
  {
    "text": "data changes and is self-exclusive so that only one session can hold that down",
    "start": "1497120",
    "end": "1502340"
  },
  {
    "text": "it's acquired by create trigger and other forms of alter table so",
    "start": "1502340",
    "end": "1507919"
  },
  {
    "text": "I don't see it much often but it's a Creator how often you call Creator so I'm not really interested in this much",
    "start": "1507919",
    "end": "1514580"
  },
  {
    "text": "exclusive what is exclusive this is acquired by refresh material view concurrently so some of these are really",
    "start": "1514580",
    "end": "1522140"
  },
  {
    "start": "1518000",
    "end": "1530000"
  },
  {
    "text": "interested to me some of them are really interesting it's like vacuum is interesting to me and I want to know",
    "start": "1522140",
    "end": "1527960"
  },
  {
    "text": "like now with this knowledge what conflicts with what and this is where we're",
    "start": "1527960",
    "end": "1533240"
  },
  {
    "start": "1530000",
    "end": "1710000"
  },
  {
    "text": "looking at this beautiful table here and let's see if I can zoom in a little bit here I think that's fun so we have",
    "start": "1533240",
    "end": "1539659"
  },
  {
    "text": "access share on the left side side we request raw share raw exclusive and of course we have to go back to understand",
    "start": "1539659",
    "end": "1545600"
  },
  {
    "text": "what the heck are these right access cloth again this is the the the the the the hammer right and what is interesting",
    "start": "1545600",
    "end": "1553580"
  },
  {
    "text": "is access share which is the read select and we have access Rocher which is Select for update and we have share",
    "start": "1553580",
    "end": "1559820"
  },
  {
    "text": "update exclusive right share update exclusive is the is the vacuum yes share",
    "start": "1559820",
    "end": "1565039"
  },
  {
    "text": "update explodes is the most important thing so I can definitely run a vacuum",
    "start": "1565039",
    "end": "1570620"
  },
  {
    "text": "right while doing editing right and that's what really this box is the most",
    "start": "1570620",
    "end": "1576620"
  },
  {
    "text": "important one to me the reason I'm asking that is because you want to be able to run vacuum so you",
    "start": "1576620",
    "end": "1582440"
  },
  {
    "text": "can freeze transactions as you continue such that you can run as often as",
    "start": "1582440",
    "end": "1588559"
  },
  {
    "text": "possible nobody will should technically block you when you run vacuum",
    "start": "1588559",
    "end": "1595279"
  },
  {
    "text": "and that's the most important thing here right the only time vacuum will be blocked which is this guy is if you do a",
    "start": "1595279",
    "end": "1602600"
  },
  {
    "text": "share update exclusive what the heck is that it's the same thing of course it doesn't",
    "start": "1602600",
    "end": "1607640"
  },
  {
    "text": "make sense right like you you're it's like uh what else",
    "start": "1607640",
    "end": "1614299"
  },
  {
    "text": "if you if you re-index concurrently for example right it's like okay uh my table my",
    "start": "1614299",
    "end": "1621320"
  },
  {
    "text": "index is corrupt I just want to re-index it just throw everything away and just like",
    "start": "1621320",
    "end": "1627500"
  },
  {
    "text": "green does everything right for some reason you want to do that that will that will prevent you from running",
    "start": "1627500",
    "end": "1633140"
  },
  {
    "text": "vacuums which is dangerous you want to run vacuums as as often as possible so",
    "start": "1633140",
    "end": "1638179"
  },
  {
    "text": "to get rid of to freeze transactions so you don't reach the the their transaction wrap around right and",
    "start": "1638179",
    "end": "1645559"
  },
  {
    "text": "that's really a disaster if you do and also share what's share share was like",
    "start": "1645559",
    "end": "1651260"
  },
  {
    "text": "created by index like yeah how often you create an index right I'm talking about just like the operation that just is so",
    "start": "1651260",
    "end": "1660279"
  },
  {
    "text": "aggressive share raw exclusive what the heck is",
    "start": "1660279",
    "end": "1665360"
  },
  {
    "text": "that share raw exclusive let's go back and read that yeah that's the create trigger one who cares an exclusive and",
    "start": "1665360",
    "end": "1671900"
  },
  {
    "text": "access explosive so that's what that's the most important role to me really and as long as I can",
    "start": "1671900",
    "end": "1678500"
  },
  {
    "text": "read I can write and Rocher what the heck is Roshan again Rocher is by select for update so I can",
    "start": "1678500",
    "end": "1686000"
  },
  {
    "text": "also do select by update for update sorry and still",
    "start": "1686000",
    "end": "1691279"
  },
  {
    "text": "run vacuums normally right I suppose the the selected rows can't be touched in",
    "start": "1691279",
    "end": "1698000"
  },
  {
    "text": "that case right let's continue row level locks now we're moving up in the stack here to Raw level",
    "start": "1698000",
    "end": "1705740"
  },
  {
    "text": "locks all right so now we talked about table locks it's time to talk about row",
    "start": "1705740",
    "end": "1711020"
  },
  {
    "start": "1710000",
    "end": "1800000"
  },
  {
    "text": "level locks which is very interesting there are four types of row level locks",
    "start": "1711020",
    "end": "1717520"
  },
  {
    "text": "these can be obtained explicitly you know you can actually say select for",
    "start": "1717520",
    "end": "1722679"
  },
  {
    "text": "update select for no key updates select for share select four key share and",
    "start": "1722679",
    "end": "1728960"
  },
  {
    "text": "we're gonna explain talk about them and read through the dark here understand what what the",
    "start": "1728960",
    "end": "1734539"
  },
  {
    "text": "difference between them understand that it depends on the lock here some locks can block",
    "start": "1734539",
    "end": "1742279"
  },
  {
    "text": "other Riders and other locals but doesn't necessarily",
    "start": "1742279",
    "end": "1747500"
  },
  {
    "text": "block other readers and here's the most important thing here to to understand so",
    "start": "1747500",
    "end": "1754760"
  },
  {
    "text": "these locks can be acquired as I said explicitly or also implicitly by update and delete delete are easy",
    "start": "1754760",
    "end": "1762080"
  },
  {
    "text": "okay but updates on the interesting cases here because updates there are two types of locks that can be updated by",
    "start": "1762080",
    "end": "1768980"
  },
  {
    "text": "update and give you that because like an update can happen to the row on a column that doesn't have",
    "start": "1768980",
    "end": "1776419"
  },
  {
    "text": "an index or it can happen to a column that had an index and",
    "start": "1776419",
    "end": "1781760"
  },
  {
    "text": "or can be referenced by primary keys and or I mean foreign key so that makes a",
    "start": "1781760",
    "end": "1786980"
  },
  {
    "text": "difference on this updates So Soft updates if you will and hard updates that can cause",
    "start": "1786980",
    "end": "1794898"
  },
  {
    "text": "ramifications so let's talk about four update which is the first one you do you can do select for update and",
    "start": "1795340",
    "end": "1801860"
  },
  {
    "start": "1800000",
    "end": "1980000"
  },
  {
    "text": "this sucks for updates causes the rows retrieved by select statement to be",
    "start": "1801860",
    "end": "1806960"
  },
  {
    "text": "locked as though for update as though for update as if you're actually updating it this prevents them from",
    "start": "1806960",
    "end": "1814700"
  },
  {
    "text": "being locked modified or deleted by other transaction until the current",
    "start": "1814700",
    "end": "1820159"
  },
  {
    "text": "transaction ends so this is like the hardest the most aggressive raw locks there",
    "start": "1820159",
    "end": "1827179"
  },
  {
    "text": "right that is other transaction that attempts to update delete select for update select for Nick no key share",
    "start": "1827179",
    "end": "1833960"
  },
  {
    "text": "select four key share anything you do if you have a row that is have been for updated",
    "start": "1833960",
    "end": "1839600"
  },
  {
    "text": "you're done you can't do anything to all this stuff you can read it though right it doesn't block normal",
    "start": "1839600",
    "end": "1846580"
  },
  {
    "text": "reading of that row will be blocked until the current transaction conversely select for update will wait for a",
    "start": "1846580",
    "end": "1853640"
  },
  {
    "text": "current concurrent transaction that has run any of those commands on the same row so same thing right if you want to",
    "start": "1853640",
    "end": "1861740"
  },
  {
    "text": "run a select for update and someone had done a delete on that row you can't do",
    "start": "1861740",
    "end": "1868279"
  },
  {
    "text": "it right because a deleted row is it deleted on another transaction but might not have",
    "start": "1868279",
    "end": "1873980"
  },
  {
    "text": "been committed yet but now on your transaction you want to read that deleted row you can't do it if you do",
    "start": "1873980",
    "end": "1880399"
  },
  {
    "text": "select by update can't it will be blocked right and of course in repeatable read and serializable because",
    "start": "1880399",
    "end": "1887059"
  },
  {
    "text": "they're using optimistic concurrency control this thing will be will effectively be",
    "start": "1887059",
    "end": "1893360"
  },
  {
    "text": "blocked right and it will you'll get to get an error it says Hey serialization failed something changed from the moment",
    "start": "1893360",
    "end": "1899539"
  },
  {
    "text": "you did this operation things has changed and I cannot I can no longer guarantee that that that same operation",
    "start": "1899539",
    "end": "1907700"
  },
  {
    "text": "will be red you know in a snapshot anymore I can't do that and you're gonna get an error",
    "start": "1907700",
    "end": "1913580"
  },
  {
    "text": "here's an important important part select for update lock mode is also acquired by delete if you do a normal",
    "start": "1913580",
    "end": "1919820"
  },
  {
    "text": "delete on a row that is as if someone did a select 4",
    "start": "1919820",
    "end": "1925039"
  },
  {
    "text": "update on that role very critical to understand yeah so at that row level lock and also by an",
    "start": "1925039",
    "end": "1933799"
  },
  {
    "text": "update that modifies the values of certain color not all columns right concurrently the set of columns",
    "start": "1933799",
    "end": "1940700"
  },
  {
    "text": "considered for update are those that have unique index that can be used in a",
    "start": "1940700",
    "end": "1945860"
  },
  {
    "text": "foreign key so that is the reference here so now with that said",
    "start": "1945860",
    "end": "1951860"
  },
  {
    "text": "how do I differentiate between updates that update the key and updates that",
    "start": "1951860",
    "end": "1957020"
  },
  {
    "text": "doesn't update the key there you go the name is clear here for Nokia update hey I'm doing an update but",
    "start": "1957020",
    "end": "1963980"
  },
  {
    "text": "I'm not updating any Keys No index keys or anything like that so this this is",
    "start": "1963980",
    "end": "1971059"
  },
  {
    "text": "identical to 4 update I'm doing a four no key update in this case I'm looking",
    "start": "1971059",
    "end": "1976399"
  },
  {
    "text": "for out there but I'm not really updating any Keys except that look is acquired is this is so this",
    "start": "1976399",
    "end": "1984380"
  },
  {
    "start": "1980000",
    "end": "2040000"
  },
  {
    "text": "is very similar to four update but it's weaker okay this lock will not block for select for key share for example because",
    "start": "1984380",
    "end": "1991880"
  },
  {
    "text": "I know that the thing I'm doing is not really updating keys right so it's safe",
    "start": "1991880",
    "end": "1997820"
  },
  {
    "text": "to share a key a few well this particular lock is acquired when you do",
    "start": "1997820",
    "end": "2004240"
  },
  {
    "text": "a normal update if you update a column right implicitly like doing an update",
    "start": "2004240",
    "end": "2010620"
  },
  {
    "text": "that particular lock will be acquired for no key update like as if you if",
    "start": "2010620",
    "end": "2015940"
  },
  {
    "text": "you're updating like column B and B doesn't have an index that lock will be acquired on the row and that's a very",
    "start": "2015940",
    "end": "2022659"
  },
  {
    "text": "soft lock so you can technically we'll see what conflicts with others here in a",
    "start": "2022659",
    "end": "2029919"
  },
  {
    "text": "minute for share so behave similarly to four Nokia update except that as a this acquires a shared",
    "start": "2029919",
    "end": "2037480"
  },
  {
    "text": "lock rather than an exclusive lock on the retrieved row right a shared lock blocks other transaction from performing",
    "start": "2037480",
    "end": "2044620"
  },
  {
    "start": "2040000",
    "end": "2080000"
  },
  {
    "text": "update delete select for update select for no key update right you can even do that but it does",
    "start": "2044620",
    "end": "2051760"
  },
  {
    "text": "not prevent select for share and select for Keisha because that's that's the",
    "start": "2051760",
    "end": "2056800"
  },
  {
    "text": "definition of shared log so now if you actually want to do a shared log you do select for share and that row and you",
    "start": "2056800",
    "end": "2063520"
  },
  {
    "text": "you can have a hundred transaction doing select four share that's fine it doesn't conflict with each other but only once",
    "start": "2063520",
    "end": "2069398"
  },
  {
    "text": "you do that no one can actually update the row if you do that physically",
    "start": "2069399",
    "end": "2074580"
  },
  {
    "text": "updating the row becomes impossible because you you just acquired a shared log here so this one the four key share",
    "start": "2074580",
    "end": "2082599"
  },
  {
    "start": "2080000",
    "end": "2365000"
  },
  {
    "text": "is will block you from making deletes right but it will not block it will block you",
    "start": "2082599",
    "end": "2091179"
  },
  {
    "text": "from making deletes we'll block you from making updates to columns that are indexed that has keys but it will not",
    "start": "2091179",
    "end": "2098740"
  },
  {
    "text": "block you from making updates to columns that doesn't have keys so will not",
    "start": "2098740",
    "end": "2105520"
  },
  {
    "text": "conflict with this for no key up there so let's go look at that at the table here so again I'm telling you this this",
    "start": "2105520",
    "end": "2111760"
  },
  {
    "text": "is like a really head spinner so let's go through the concurrent locking for Roblox here all right let's take a look",
    "start": "2111760",
    "end": "2117160"
  },
  {
    "text": "at the table here and see what conflicts with what so roll looks for update is",
    "start": "2117160",
    "end": "2122200"
  },
  {
    "text": "the kind of most aggressive one where it kind of conflicts with everything you know it is acquired by deletes if you",
    "start": "2122200",
    "end": "2128920"
  },
  {
    "text": "actually delete a row it is acquired right if you if you update a a row that has a primary or even a",
    "start": "2128920",
    "end": "2138280"
  },
  {
    "text": "secondary key any key really right that's from what we read here it does not acquire when you do a normal",
    "start": "2138280",
    "end": "2145839"
  },
  {
    "text": "update on a column that doesn't have an index which is very critical to understand here right you can do those",
    "start": "2145839",
    "end": "2151300"
  },
  {
    "text": "kind of updates but they won't require that particular key lock right and it",
    "start": "2151300",
    "end": "2157660"
  },
  {
    "text": "will conflict with all this stuff right so the second one is uh four key select",
    "start": "2157660",
    "end": "2162700"
  },
  {
    "text": "for for no key update right so it's an update but it's not",
    "start": "2162700",
    "end": "2169660"
  },
  {
    "text": "updating keys so uh this is a quad when you actually",
    "start": "2169660",
    "end": "2175960"
  },
  {
    "text": "explicitly say that select or Noki update right or when you do an update on",
    "start": "2175960",
    "end": "2183220"
  },
  {
    "text": "a column that doesn't have an index this this is what what gets uh uh uh locks",
    "start": "2183220",
    "end": "2188740"
  },
  {
    "text": "and by doing that that kind of lock you will still still conflict with normal for update so like",
    "start": "2188740",
    "end": "2196000"
  },
  {
    "text": "you cannot update a column that's been deleted right or you cannot uh update a",
    "start": "2196000",
    "end": "2203740"
  },
  {
    "text": "column that has been updated with a key right that's critical to",
    "start": "2203740",
    "end": "2210160"
  },
  {
    "text": "understand okay and but you can definitely update a",
    "start": "2210160",
    "end": "2216579"
  },
  {
    "text": "column right that has been for has been read for key share right",
    "start": "2216579",
    "end": "2223119"
  },
  {
    "text": "those have four key update right it doesn't it doesn't acquire for key share so what does what what four key shares",
    "start": "2223119",
    "end": "2231579"
  },
  {
    "text": "doesn't seem like something will acquire that it goes from where we read nothing from postgres Aquarius except the user",
    "start": "2231579",
    "end": "2238839"
  },
  {
    "text": "so if a user can actually select four key share you can technically update",
    "start": "2238839",
    "end": "2245859"
  },
  {
    "text": "things that are not keys right that's what you can do right and then",
    "start": "2245859",
    "end": "2252040"
  },
  {
    "text": "we're gonna go with another harder share log which is four share which basically",
    "start": "2252040",
    "end": "2258760"
  },
  {
    "text": "will block any update to that you can still acquire many shared lock on that guy but",
    "start": "2258760",
    "end": "2264820"
  },
  {
    "text": "you will you you want to",
    "start": "2264820",
    "end": "2270359"
  },
  {
    "text": "you want to prevent delete and any kind of updates right but if you want to acquire this for",
    "start": "2270400",
    "end": "2278140"
  },
  {
    "text": "keyshare you can do a delete updates but you you may want to allow",
    "start": "2278140",
    "end": "2284560"
  },
  {
    "text": "uh updates to non-keys and in this case you can you you can acquire that I can't",
    "start": "2284560",
    "end": "2290980"
  },
  {
    "text": "think of an example to be honest to do that but the most important thing to understand is just really just the",
    "start": "2290980",
    "end": "2296859"
  },
  {
    "text": "delete example and update example the update example is the interesting one because it has two cases right can I",
    "start": "2296859",
    "end": "2304180"
  },
  {
    "text": "read in all of these cases you can absolutely read the row even if you deleted or updated right that's that's",
    "start": "2304180",
    "end": "2311320"
  },
  {
    "text": "fine right but if you want to simulate now the question is like how do I simulate the app an access log",
    "start": "2311320",
    "end": "2320339"
  },
  {
    "text": "or a shared log versus exclusive log you can do that so you do a select for",
    "start": "2320339",
    "end": "2325780"
  },
  {
    "text": "update and if you really want no one to read that your application must submit",
    "start": "2325780",
    "end": "2333160"
  },
  {
    "text": "selects for share all the time so that they get blocked right because they will",
    "start": "2333160",
    "end": "2339220"
  },
  {
    "text": "do that and now now you can play tricks with your application and you say all right I want to do a select for keyshare",
    "start": "2339220",
    "end": "2346480"
  },
  {
    "text": "such that hey I'm really relaxed I I'll let you do delete I'll let you do",
    "start": "2346480",
    "end": "2351760"
  },
  {
    "text": "updates but update to keys but if you're updating things that has nothing to do with indexes I'll let you do that you",
    "start": "2351760",
    "end": "2360099"
  },
  {
    "text": "can you can go a little bit lower there then let's run through the page locks",
    "start": "2360099",
    "end": "2365380"
  },
  {
    "start": "2365000",
    "end": "2520000"
  },
  {
    "text": "here page level locks in addition to tables and roll logs page level shared",
    "start": "2365380",
    "end": "2371619"
  },
  {
    "text": "exclusive locks are used to control read write access to table pages in the",
    "start": "2371619",
    "end": "2376720"
  },
  {
    "text": "shared buffer pool so the share buffer pool is where the polskas put their pages in so it's a shared memory between",
    "start": "2376720",
    "end": "2383859"
  },
  {
    "text": "all the processes that postgres spins off and then you can it it basically",
    "start": "2383859",
    "end": "2389740"
  },
  {
    "text": "puts shared and exclusive logs to this and absolutely there's no control here",
    "start": "2389740",
    "end": "2395380"
  },
  {
    "text": "okay these locks are released immediately after a row is fetched or",
    "start": "2395380",
    "end": "2402400"
  },
  {
    "text": "updated application developers normally need not to be concerned with this but they are",
    "start": "2402400",
    "end": "2408760"
  },
  {
    "text": "mentioned for completeness here so this makes me think like what happened if I am updating or inserting or reading or",
    "start": "2408760",
    "end": "2416079"
  },
  {
    "text": "we actually locking the page so this tells me that you no two transaction",
    "start": "2416079",
    "end": "2424180"
  },
  {
    "text": "these two things are serialized right the page logs are being obtained to prevent two",
    "start": "2424180",
    "end": "2432040"
  },
  {
    "text": "threads two process from updating the same page and understandably so right doesn't make sense to have like this is",
    "start": "2432040",
    "end": "2439900"
  },
  {
    "text": "now we're at the OS level in memory right this is like basically a mu attacks so yeah so it makes sense to",
    "start": "2439900",
    "end": "2445839"
  },
  {
    "text": "have page logs I'm just worried about yeah performance when it comes to concurrency of multiple processes",
    "start": "2445839",
    "end": "2453280"
  },
  {
    "text": "updating the same pages like I've seen this in SQL server and I have no idea about postgres level of",
    "start": "2453280",
    "end": "2461680"
  },
  {
    "text": "page locking there and uh okay assume I'm doing many inserts",
    "start": "2461680",
    "end": "2469780"
  },
  {
    "text": "right to some table or multiple transactions",
    "start": "2469780",
    "end": "2477040"
  },
  {
    "text": "right multiple clients let's say because each client gets a process and passwords like a back-end process so they those",
    "start": "2477040",
    "end": "2484480"
  },
  {
    "text": "two might essentially perform the insert themselves and try to update the same",
    "start": "2484480",
    "end": "2491380"
  },
  {
    "text": "page right and when you do that this will contend",
    "start": "2491380",
    "end": "2497619"
  },
  {
    "text": "on the last page effectively because all of them were basically inserted the same tail page right that's where inserts go",
    "start": "2497619",
    "end": "2504460"
  },
  {
    "text": "and I'm I'm just thinking what is the ramification of doing that on concurrently I think you you will feel",
    "start": "2504460",
    "end": "2511420"
  },
  {
    "text": "it because at the end of the day a mutex must must be acquired like a lock must",
    "start": "2511420",
    "end": "2517060"
  },
  {
    "text": "be acquired the page level otherwise you get corruption Deadlocks are interesting here I have",
    "start": "2517060",
    "end": "2522880"
  },
  {
    "start": "2520000",
    "end": "2760000"
  },
  {
    "text": "the whole video about Deadlocks and they're talking about an example here where the locks can happen so especially",
    "start": "2522880",
    "end": "2529000"
  },
  {
    "text": "especially if you're doing explicit locking like when you're controlling the transaction like all of a sudden you can",
    "start": "2529000",
    "end": "2535060"
  },
  {
    "text": "easily get into a deadlock where this is needing this transaction needs this but this transaction is also needing",
    "start": "2535060",
    "end": "2541240"
  },
  {
    "text": "something and they are waiting on each other for example let's read an example here if transaction one acquires an",
    "start": "2541240",
    "end": "2546460"
  },
  {
    "text": "exclusive lock on table a and then tries to acquire an exclusive lock on table B",
    "start": "2546460",
    "end": "2551640"
  },
  {
    "text": "while transaction 2 has already a exclusive lock on B and now wants an",
    "start": "2551640",
    "end": "2557680"
  },
  {
    "text": "exclusive tab on a then neither of them can proceed note that deadlock can also",
    "start": "2557680",
    "end": "2563980"
  },
  {
    "text": "occur as a result of raw level locks and thus they can occur even if the explicit",
    "start": "2563980",
    "end": "2571060"
  },
  {
    "text": "locking is not used oh okay how I've seen it in SQL Server a lot but",
    "start": "2571060",
    "end": "2577260"
  },
  {
    "text": "especially with certain custom applications right consider the case in which two concurrent transaction",
    "start": "2577260",
    "end": "2583300"
  },
  {
    "text": "modifier table the first execution the First turns are going to execute update accounts set balance equal balance plus",
    "start": "2583300",
    "end": "2590800"
  },
  {
    "text": "100 where account number equal 100.111 so that's that doesn't update to the",
    "start": "2590800",
    "end": "2599619"
  },
  {
    "text": "balance and I don't know if balance is actually what is balance balance is I",
    "start": "2599619",
    "end": "2605079"
  },
  {
    "text": "don't know if it's indexed or not but let's assume it's not so it's a four no key right",
    "start": "2605079",
    "end": "2610420"
  },
  {
    "text": "clock this acquires a row level lock on the row with a specified account number",
    "start": "2610420",
    "end": "2616780"
  },
  {
    "text": "so that particular account number is now locked in the second transaction executes this updates it account to",
    "start": "2616780",
    "end": "2625180"
  },
  {
    "text": "all right so someone just increased their account by 100 the other wanted to",
    "start": "2625180",
    "end": "2630339"
  },
  {
    "text": "debit the account at the same time right so it it executed two queries in the",
    "start": "2630339",
    "end": "2635680"
  },
  {
    "text": "same transaction one to increase account two two two two by 100 which is okay",
    "start": "2635680",
    "end": "2640720"
  },
  {
    "text": "that are all locked but then that other transaction also",
    "start": "2640720",
    "end": "2647579"
  },
  {
    "text": "decrements the account one one one by a hundred so that has to wait so that so",
    "start": "2647579",
    "end": "2653260"
  },
  {
    "text": "far there's no edit lock here right the first update same successfully acquires a rollover log on the specific",
    "start": "2653260",
    "end": "2660220"
  },
  {
    "text": "row so it succeeds updating however the second update statement finds that the",
    "start": "2660220",
    "end": "2665319"
  },
  {
    "text": "row is attempted to update is already being locked so it waits for the transaction that acquires the log to",
    "start": "2665319",
    "end": "2670660"
  },
  {
    "text": "complete transaction two is now waiting on transaction one to complete before it",
    "start": "2670660",
    "end": "2677500"
  },
  {
    "text": "continues exercise execution so far no Deadlock then the first transaction",
    "start": "2677500",
    "end": "2683680"
  },
  {
    "text": "a start deducting account number two right two two two two with a hundred now",
    "start": "2683680",
    "end": "2690640"
  },
  {
    "text": "it wants to do that and now it's it detects that there is a lock on that row",
    "start": "2690640",
    "end": "2695740"
  },
  {
    "text": "and get stuck so absolutely especially in this kind of scenario you can get",
    "start": "2695740",
    "end": "2701500"
  },
  {
    "text": "into a Deadlock right transaction two already hold the lock so",
    "start": "2701500",
    "end": "2707380"
  },
  {
    "text": "it waits for the transaction two to complete thus transaction one is blocked on",
    "start": "2707380",
    "end": "2714040"
  },
  {
    "text": "transaction two and transaction two is blocked on transaction one added lock condition pause this will detect this",
    "start": "2714040",
    "end": "2719200"
  },
  {
    "text": "and abort it immediately postgres will immediately detect this right it's called the deadlock graph",
    "start": "2719200",
    "end": "2726940"
  },
  {
    "text": "so very careful especially when when you up when two transactions try to update the same rows in certain order",
    "start": "2726940",
    "end": "2734680"
  },
  {
    "text": "so how do you solve this be consistent the problem this happened because we first updated Row one and then the",
    "start": "2734680",
    "end": "2741700"
  },
  {
    "text": "second transaction updated row two first like if you flip this order then it would have second transaction wouldn't",
    "start": "2741700",
    "end": "2748540"
  },
  {
    "text": "have even permitted it started to begin with right but you can't always control",
    "start": "2748540",
    "end": "2753579"
  },
  {
    "text": "this that's the problem right in the application advisory Locker is probably its own",
    "start": "2753579",
    "end": "2759099"
  },
  {
    "text": "topic to be honest but advisory luck uh advisor look are those locks that are",
    "start": "2759099",
    "end": "2766440"
  },
  {
    "start": "2760000",
    "end": "2840000"
  },
  {
    "text": "acquired by the application so let's take a look here postgres provides a mean for creating logs that have",
    "start": "2766440",
    "end": "2772599"
  },
  {
    "text": "application defined meaning as I said right these are called advisory lock because the system does not enforce",
    "start": "2772599",
    "end": "2778839"
  },
  {
    "text": "their use right it is up to the application to use them correctly so hey Europe this application you create them",
    "start": "2778839",
    "end": "2785740"
  },
  {
    "text": "you you deal with them right as a database if if someone tries to acquire",
    "start": "2785740",
    "end": "2791319"
  },
  {
    "text": "this log I'll block it if it's already exist and advisory locks can be useful for locking",
    "start": "2791319",
    "end": "2798819"
  },
  {
    "text": "strategies that are awkward for mvcc and and I'll personally run into this a lot",
    "start": "2798819",
    "end": "2804960"
  },
  {
    "text": "in cases enough personally locked around into cases where I I had to use advisory lock",
    "start": "2804960",
    "end": "2812079"
  },
  {
    "text": "right in SQL Server there called application Level logs and oracles calls them something else",
    "start": "2812079",
    "end": "2818020"
  },
  {
    "text": "but yeah sometimes you have specific the application has certain semantics that",
    "start": "2818020",
    "end": "2825700"
  },
  {
    "text": "it spans Beyond uh transactions really and you can't really",
    "start": "2825700",
    "end": "2831520"
  },
  {
    "text": "rely on that right so for consistency use application Level lock all right",
    "start": "2831520",
    "end": "2836680"
  },
  {
    "text": "guys so that was a a very long podcast discussing all the types of locking in",
    "start": "2836680",
    "end": "2843220"
  },
  {
    "start": "2840000",
    "end": "2903000"
  },
  {
    "text": "uh postgres uh I learned a lot about this and I think I'll use this knowledge for you",
    "start": "2843220",
    "end": "2850060"
  },
  {
    "text": "know two understand when someone says oh our vacuums has",
    "start": "2850060",
    "end": "2857740"
  },
  {
    "text": "been blocked and we can't run it I want to call that out I just like what does that mean why would vacuum",
    "start": "2857740",
    "end": "2865060"
  },
  {
    "text": "be blocked because now that I understand the vacuum as an operation what exactly does it",
    "start": "2865060",
    "end": "2872740"
  },
  {
    "text": "block is it's it's truly important",
    "start": "2872740",
    "end": "2878140"
  },
  {
    "text": "right because it tells you like what kind of workload people are running",
    "start": "2878140",
    "end": "2885339"
  },
  {
    "text": "right because vacuum is not being blocked by anything there are specific operation that is blocked by it and",
    "start": "2885339",
    "end": "2892240"
  },
  {
    "text": "understanding this level of details uh it makes me at least want to learn more",
    "start": "2892240",
    "end": "2898900"
  },
  {
    "text": "alright guys thank you so much goodbye",
    "start": "2898900",
    "end": "2904140"
  }
]