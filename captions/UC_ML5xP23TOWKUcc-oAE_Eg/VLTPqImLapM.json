[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "can reduce take the place of your",
    "start": "80",
    "end": "2080"
  },
  {
    "text": "primary database system",
    "start": "2080",
    "end": "3439"
  },
  {
    "text": "can you replace your relational postgres",
    "start": "3439",
    "end": "6080"
  },
  {
    "text": "or mysql",
    "start": "6080",
    "end": "7440"
  },
  {
    "text": "database with redis or your nosql",
    "start": "7440",
    "end": "10880"
  },
  {
    "text": "mongodb or cassandra would reduce can",
    "start": "10880",
    "end": "14080"
  },
  {
    "text": "radius be",
    "start": "14080",
    "end": "15040"
  },
  {
    "text": "more than just a cache these are",
    "start": "15040",
    "end": "17279"
  },
  {
    "text": "questions that",
    "start": "17279",
    "end": "18240"
  },
  {
    "text": "you will be able to answer by the end of",
    "start": "18240",
    "end": "20400"
  },
  {
    "text": "the video",
    "start": "20400",
    "end": "21840"
  },
  {
    "text": "stay tuned this episode of the backend",
    "start": "21840",
    "end": "23760"
  },
  {
    "text": "engineering show is sponsored by my",
    "start": "23760",
    "end": "25680"
  },
  {
    "text": "friends at",
    "start": "25680",
    "end": "26720"
  },
  {
    "text": "redis labs i'm gonna break this video",
    "start": "26720",
    "end": "30080"
  },
  {
    "text": "into three sections first of all we're",
    "start": "30080",
    "end": "32800"
  },
  {
    "text": "gonna define",
    "start": "32800",
    "end": "33680"
  },
  {
    "text": "what really is a primary database what",
    "start": "33680",
    "end": "36480"
  },
  {
    "text": "qualifies a primary database the second",
    "start": "36480",
    "end": "38879"
  },
  {
    "text": "thing is",
    "start": "38879",
    "end": "39440"
  },
  {
    "text": "does redis actually check the boxes of a",
    "start": "39440",
    "end": "42480"
  },
  {
    "text": "primary database and then finally we're",
    "start": "42480",
    "end": "44800"
  },
  {
    "text": "going to go through features",
    "start": "44800",
    "end": "46320"
  },
  {
    "text": "and radius that go beyond just a primary",
    "start": "46320",
    "end": "49360"
  },
  {
    "text": "database",
    "start": "49360",
    "end": "50079"
  },
  {
    "text": "i was personally surprised by by most of",
    "start": "50079",
    "end": "52960"
  },
  {
    "text": "these features to be honest",
    "start": "52960",
    "end": "54879"
  },
  {
    "text": "let's just jump into this video so first",
    "start": "54879",
    "end": "57440"
  },
  {
    "text": "of all",
    "start": "57440",
    "end": "58079"
  },
  {
    "text": "what qualifies a database as a primary",
    "start": "58079",
    "end": "60320"
  },
  {
    "start": "60000",
    "end": "180000"
  },
  {
    "text": "database",
    "start": "60320",
    "end": "61600"
  },
  {
    "text": "these are few features slash",
    "start": "61600",
    "end": "64000"
  },
  {
    "text": "capabilities that a primary database",
    "start": "64000",
    "end": "66479"
  },
  {
    "text": "must have in order to be considered your",
    "start": "66479",
    "end": "71600"
  },
  {
    "text": "teller data store where you store your",
    "start": "71600",
    "end": "74880"
  },
  {
    "text": "information",
    "start": "74880",
    "end": "75600"
  },
  {
    "text": "and these are not set on stone features",
    "start": "75600",
    "end": "78240"
  },
  {
    "text": "you can argue about these kind of",
    "start": "78240",
    "end": "79920"
  },
  {
    "text": "features but in my opinion i think these",
    "start": "79920",
    "end": "81680"
  },
  {
    "text": "features are what qualifies the database",
    "start": "81680",
    "end": "83439"
  },
  {
    "text": "as to be",
    "start": "83439",
    "end": "84080"
  },
  {
    "text": "your primary main database system",
    "start": "84080",
    "end": "86159"
  },
  {
    "text": "atomosity individual statements in a",
    "start": "86159",
    "end": "88400"
  },
  {
    "text": "transaction should all",
    "start": "88400",
    "end": "89759"
  },
  {
    "text": "succeed or fail thus provide a unit",
    "start": "89759",
    "end": "93280"
  },
  {
    "text": "of work isolation how isolated",
    "start": "93280",
    "end": "96960"
  },
  {
    "text": "a given transaction is from changes made",
    "start": "96960",
    "end": "100479"
  },
  {
    "text": "by",
    "start": "100479",
    "end": "100880"
  },
  {
    "text": "other concurrent transactions durability",
    "start": "100880",
    "end": "103439"
  },
  {
    "text": "rights committed by a transaction must",
    "start": "103439",
    "end": "105600"
  },
  {
    "text": "persist",
    "start": "105600",
    "end": "106399"
  },
  {
    "text": "on a storage medium that even if a case",
    "start": "106399",
    "end": "109520"
  },
  {
    "text": "of a failure",
    "start": "109520",
    "end": "111040"
  },
  {
    "text": "we should see these rights and these",
    "start": "111040",
    "end": "112799"
  },
  {
    "text": "rights should not be lost",
    "start": "112799",
    "end": "114159"
  },
  {
    "text": "consistency it's the spectrum by which a",
    "start": "114159",
    "end": "116960"
  },
  {
    "text": "read transaction gets a",
    "start": "116960",
    "end": "118479"
  },
  {
    "text": "consistent value from the database",
    "start": "118479",
    "end": "120479"
  },
  {
    "text": "system and i call this a spectrum",
    "start": "120479",
    "end": "122399"
  },
  {
    "text": "because you can",
    "start": "122399",
    "end": "123680"
  },
  {
    "text": "get a consistent value or you can get an",
    "start": "123680",
    "end": "126399"
  },
  {
    "text": "eventually consistent value",
    "start": "126399",
    "end": "128000"
  },
  {
    "text": "after some certain time so your system",
    "start": "128000",
    "end": "130800"
  },
  {
    "text": "might not be consistent at this time",
    "start": "130800",
    "end": "132800"
  },
  {
    "text": "but after a while it will eventually",
    "start": "132800",
    "end": "135360"
  },
  {
    "text": "converge and get consistent so",
    "start": "135360",
    "end": "137280"
  },
  {
    "text": "consistency eventual consistency",
    "start": "137280",
    "end": "139680"
  },
  {
    "text": "consistency all of these fall into this",
    "start": "139680",
    "end": "142959"
  },
  {
    "text": "category availability the spectrum by",
    "start": "142959",
    "end": "146000"
  },
  {
    "text": "which",
    "start": "146000",
    "end": "146640"
  },
  {
    "text": "a read or write transaction get a",
    "start": "146640",
    "end": "149200"
  },
  {
    "text": "successful execution",
    "start": "149200",
    "end": "150800"
  },
  {
    "text": "from your database system again",
    "start": "150800",
    "end": "152560"
  },
  {
    "text": "availability is also a spectrum because",
    "start": "152560",
    "end": "154480"
  },
  {
    "text": "you can configure this based on the cap",
    "start": "154480",
    "end": "156879"
  },
  {
    "text": "theorem that i talked about",
    "start": "156879",
    "end": "158160"
  },
  {
    "text": "you can check that video right here and",
    "start": "158160",
    "end": "159599"
  },
  {
    "text": "finally concurrency control what",
    "start": "159599",
    "end": "161280"
  },
  {
    "text": "happened when a transaction tries to",
    "start": "161280",
    "end": "162879"
  },
  {
    "text": "change a value that",
    "start": "162879",
    "end": "164080"
  },
  {
    "text": "actually had been changed since the",
    "start": "164080",
    "end": "166400"
  },
  {
    "text": "transaction started do you block that",
    "start": "166400",
    "end": "168400"
  },
  {
    "text": "change",
    "start": "168400",
    "end": "169040"
  },
  {
    "text": "or do you allow it and fail later",
    "start": "169040",
    "end": "171519"
  },
  {
    "text": "pessimistic",
    "start": "171519",
    "end": "172319"
  },
  {
    "text": "versus optimistic currency control very",
    "start": "172319",
    "end": "175120"
  },
  {
    "text": "popular to method",
    "start": "175120",
    "end": "176560"
  },
  {
    "text": "there's no right or wrong i talked about",
    "start": "176560",
    "end": "178239"
  },
  {
    "text": "this video in detail if you want to",
    "start": "178239",
    "end": "179760"
  },
  {
    "text": "learn about concurrency control here",
    "start": "179760",
    "end": "181200"
  },
  {
    "start": "180000",
    "end": "460000"
  },
  {
    "text": "check it out",
    "start": "181200",
    "end": "181760"
  },
  {
    "text": "now that we know some of the properties",
    "start": "181760",
    "end": "183360"
  },
  {
    "text": "of our primary database",
    "start": "183360",
    "end": "185120"
  },
  {
    "text": "does radius actually check those boxes",
    "start": "185120",
    "end": "187360"
  },
  {
    "text": "let's see atomicity",
    "start": "187360",
    "end": "188800"
  },
  {
    "text": "yes radius is atomic you can start a",
    "start": "188800",
    "end": "190800"
  },
  {
    "text": "transaction and you can do",
    "start": "190800",
    "end": "192560"
  },
  {
    "text": "multiple statements multiple commands",
    "start": "192560",
    "end": "195200"
  },
  {
    "text": "and then you can commit these changes",
    "start": "195200",
    "end": "197040"
  },
  {
    "text": "and if there is a failure if you're",
    "start": "197040",
    "end": "198879"
  },
  {
    "text": "using aof append only file writers will",
    "start": "198879",
    "end": "201200"
  },
  {
    "text": "make sure to",
    "start": "201200",
    "end": "202159"
  },
  {
    "text": "only commit all of these commands",
    "start": "202159",
    "end": "205360"
  },
  {
    "text": "or none of them at all so this is atomic",
    "start": "205360",
    "end": "208400"
  },
  {
    "text": "isolation",
    "start": "208400",
    "end": "209440"
  },
  {
    "text": "redis uses the highest level of",
    "start": "209440",
    "end": "211599"
  },
  {
    "text": "isolation which is called serializable",
    "start": "211599",
    "end": "213920"
  },
  {
    "text": "so if you're executing two transaction",
    "start": "213920",
    "end": "215599"
  },
  {
    "text": "at the same time they will be serialized",
    "start": "215599",
    "end": "217599"
  },
  {
    "text": "to be",
    "start": "217599",
    "end": "218400"
  },
  {
    "text": "exactly after each other durability",
    "start": "218400",
    "end": "220959"
  },
  {
    "text": "radius have something called append only",
    "start": "220959",
    "end": "223120"
  },
  {
    "text": "file durability format which is very",
    "start": "223120",
    "end": "225360"
  },
  {
    "text": "similar to the wall",
    "start": "225360",
    "end": "226560"
  },
  {
    "text": "right ahead log or the redo files in",
    "start": "226560",
    "end": "228720"
  },
  {
    "text": "other databases",
    "start": "228720",
    "end": "229920"
  },
  {
    "text": "and any command or transaction that you",
    "start": "229920",
    "end": "232480"
  },
  {
    "text": "commit",
    "start": "232480",
    "end": "233200"
  },
  {
    "text": "goes into this append only file and and",
    "start": "233200",
    "end": "236319"
  },
  {
    "text": "it's very fast because it happened only",
    "start": "236319",
    "end": "238000"
  },
  {
    "text": "so you can achieve",
    "start": "238000",
    "end": "239120"
  },
  {
    "text": "high durability with append only file",
    "start": "239120",
    "end": "241760"
  },
  {
    "text": "and the good thing about redis with",
    "start": "241760",
    "end": "243120"
  },
  {
    "text": "durability is that you can configure",
    "start": "243120",
    "end": "245120"
  },
  {
    "text": "this durability it's almost like a",
    "start": "245120",
    "end": "246640"
  },
  {
    "text": "spectrum unlike other databases",
    "start": "246640",
    "end": "248480"
  },
  {
    "text": "you can go with the snapshot durability",
    "start": "248480",
    "end": "250879"
  },
  {
    "text": "that means",
    "start": "250879",
    "end": "252000"
  },
  {
    "text": "all rights that have been happening to",
    "start": "252000",
    "end": "254000"
  },
  {
    "text": "memory which is very fast",
    "start": "254000",
    "end": "255439"
  },
  {
    "text": "will be flushed to disk that snapshot of",
    "start": "255439",
    "end": "257759"
  },
  {
    "text": "the memory will be flush to disk",
    "start": "257759",
    "end": "259120"
  },
  {
    "text": "asynchronously on the background",
    "start": "259120",
    "end": "261280"
  },
  {
    "text": "every x amount of seconds the power of",
    "start": "261280",
    "end": "263520"
  },
  {
    "text": "that your",
    "start": "263520",
    "end": "264479"
  },
  {
    "text": "rights will be super fast because you're",
    "start": "264479",
    "end": "267280"
  },
  {
    "text": "always right into memory",
    "start": "267280",
    "end": "268479"
  },
  {
    "text": "and asynchronously you're gonna write",
    "start": "268479",
    "end": "270240"
  },
  {
    "text": "and persist this to this",
    "start": "270240",
    "end": "271759"
  },
  {
    "text": "yeah there is a possibility of failure",
    "start": "271759",
    "end": "273840"
  },
  {
    "text": "but this is something you can figure",
    "start": "273840",
    "end": "275440"
  },
  {
    "text": "do you want strong durability go with",
    "start": "275440",
    "end": "278560"
  },
  {
    "text": "aof",
    "start": "278560",
    "end": "279840"
  },
  {
    "text": "if you want fast right you go with",
    "start": "279840",
    "end": "282400"
  },
  {
    "text": "snapshot",
    "start": "282400",
    "end": "283280"
  },
  {
    "text": "and you can actually combine those two",
    "start": "283280",
    "end": "284960"
  },
  {
    "text": "as well just like other databases you",
    "start": "284960",
    "end": "286720"
  },
  {
    "text": "can configure it is to be",
    "start": "286720",
    "end": "288160"
  },
  {
    "text": "strongly consistent or eventually",
    "start": "288160",
    "end": "289919"
  },
  {
    "text": "consistent strong consistency is done by",
    "start": "289919",
    "end": "293199"
  },
  {
    "text": "generally synchronous replications that",
    "start": "293199",
    "end": "295040"
  },
  {
    "text": "means you issue a right to a master node",
    "start": "295040",
    "end": "297919"
  },
  {
    "text": "that right does not commit until it",
    "start": "297919",
    "end": "300080"
  },
  {
    "text": "commits to all",
    "start": "300080",
    "end": "301520"
  },
  {
    "text": "other worker nodes if you want faster",
    "start": "301520",
    "end": "303440"
  },
  {
    "text": "rights you do asynchronous applications",
    "start": "303440",
    "end": "305199"
  },
  {
    "text": "so",
    "start": "305199",
    "end": "305840"
  },
  {
    "text": "as long as the master rights succeeds",
    "start": "305840",
    "end": "308960"
  },
  {
    "text": "commit and tell me it's done",
    "start": "308960",
    "end": "311360"
  },
  {
    "text": "asynchronously in the background update",
    "start": "311360",
    "end": "313120"
  },
  {
    "text": "your",
    "start": "313120",
    "end": "313520"
  },
  {
    "text": "worker nodes and as a result yeah reads",
    "start": "313520",
    "end": "316479"
  },
  {
    "text": "might get a little bit of a staler",
    "start": "316479",
    "end": "318479"
  },
  {
    "text": "version",
    "start": "318479",
    "end": "319520"
  },
  {
    "text": "but the rights are fast it's a choice",
    "start": "319520",
    "end": "322320"
  },
  {
    "text": "that",
    "start": "322320",
    "end": "322960"
  },
  {
    "text": "you make speaking of consistency it's",
    "start": "322960",
    "end": "325680"
  },
  {
    "text": "worth mentioning that redis enterprise",
    "start": "325680",
    "end": "327840"
  },
  {
    "text": "offers strong eventual consistency",
    "start": "327840",
    "end": "331280"
  },
  {
    "text": "in active active clusters between data",
    "start": "331280",
    "end": "333600"
  },
  {
    "text": "centers",
    "start": "333600",
    "end": "334479"
  },
  {
    "text": "when we use active active clusters",
    "start": "334479",
    "end": "336720"
  },
  {
    "text": "conflicts are",
    "start": "336720",
    "end": "337680"
  },
  {
    "text": "inescapable since we are writing to both",
    "start": "337680",
    "end": "340800"
  },
  {
    "text": "instances at the same time",
    "start": "340800",
    "end": "342880"
  },
  {
    "text": "and when we get conflicts we are bound",
    "start": "342880",
    "end": "345919"
  },
  {
    "text": "to be weakly consistent redis enterprise",
    "start": "345919",
    "end": "348880"
  },
  {
    "text": "offers",
    "start": "348880",
    "end": "349440"
  },
  {
    "text": "conflict-free replication through",
    "start": "349440",
    "end": "351680"
  },
  {
    "text": "predefined rules",
    "start": "351680",
    "end": "352800"
  },
  {
    "text": "and as a result we get strong eventual",
    "start": "352800",
    "end": "355840"
  },
  {
    "text": "consistency",
    "start": "355840",
    "end": "356960"
  },
  {
    "text": "between those instances and availability",
    "start": "356960",
    "end": "359840"
  },
  {
    "text": "redis is available and you can configure",
    "start": "359840",
    "end": "361840"
  },
  {
    "text": "this availability based on the",
    "start": "361840",
    "end": "363199"
  },
  {
    "text": "asynchronous replication versus",
    "start": "363199",
    "end": "364639"
  },
  {
    "text": "synchronous replication if you chose",
    "start": "364639",
    "end": "366479"
  },
  {
    "text": "strong consistency usually you're not",
    "start": "366479",
    "end": "368560"
  },
  {
    "text": "that available because if any right",
    "start": "368560",
    "end": "371600"
  },
  {
    "text": "from the master to the worker failed",
    "start": "371600",
    "end": "374080"
  },
  {
    "text": "then you're",
    "start": "374080",
    "end": "374800"
  },
  {
    "text": "really not available right because",
    "start": "374800",
    "end": "376160"
  },
  {
    "text": "you're gonna fail the right right",
    "start": "376160",
    "end": "378000"
  },
  {
    "text": "and on the other hand if you chose",
    "start": "378000",
    "end": "379600"
  },
  {
    "text": "eventual consistency",
    "start": "379600",
    "end": "381120"
  },
  {
    "text": "then yeah your rights will always",
    "start": "381120",
    "end": "383280"
  },
  {
    "text": "succeed as you are available",
    "start": "383280",
    "end": "385280"
  },
  {
    "text": "but you might get a little bit of a",
    "start": "385280",
    "end": "387360"
  },
  {
    "text": "stale data",
    "start": "387360",
    "end": "389039"
  },
  {
    "text": "what are the mercy of the cap theorem",
    "start": "389039",
    "end": "391039"
  },
  {
    "text": "finally concurrency control as i talk",
    "start": "391039",
    "end": "393120"
  },
  {
    "text": "about many time in the channel",
    "start": "393120",
    "end": "394319"
  },
  {
    "text": "reduce is a simple single threaded",
    "start": "394319",
    "end": "396560"
  },
  {
    "text": "database system",
    "start": "396560",
    "end": "397759"
  },
  {
    "text": "so there isn't really a true concurrency",
    "start": "397759",
    "end": "400479"
  },
  {
    "text": "but",
    "start": "400479",
    "end": "400880"
  },
  {
    "text": "you can still prevent other transaction",
    "start": "400880",
    "end": "402800"
  },
  {
    "text": "from changing something that you're",
    "start": "402800",
    "end": "404800"
  },
  {
    "text": "about to read",
    "start": "404800",
    "end": "406639"
  },
  {
    "text": "through something called optimistic",
    "start": "406639",
    "end": "408080"
  },
  {
    "text": "locks or optimistic concurrency control",
    "start": "408080",
    "end": "409919"
  },
  {
    "text": "and this is achieved by something called",
    "start": "409919",
    "end": "411360"
  },
  {
    "text": "the watch",
    "start": "411360",
    "end": "412160"
  },
  {
    "text": "command in redis you watch a value you",
    "start": "412160",
    "end": "414639"
  },
  {
    "text": "start your transaction and if someone",
    "start": "414639",
    "end": "417199"
  },
  {
    "text": "else committed a change to that value",
    "start": "417199",
    "end": "419680"
  },
  {
    "text": "your transaction eventually at the end",
    "start": "419680",
    "end": "421840"
  },
  {
    "text": "when you try to execute it or to commit",
    "start": "421840",
    "end": "424160"
  },
  {
    "text": "it",
    "start": "424160",
    "end": "424639"
  },
  {
    "text": "it will fail thus turning you telling",
    "start": "424639",
    "end": "427440"
  },
  {
    "text": "you to retry it",
    "start": "427440",
    "end": "428560"
  },
  {
    "text": "that's the effectively the optimistic",
    "start": "428560",
    "end": "430560"
  },
  {
    "text": "approach right there's obviously pros",
    "start": "430560",
    "end": "432560"
  },
  {
    "text": "and cons to",
    "start": "432560",
    "end": "433360"
  },
  {
    "text": "each approach but yeah it does support",
    "start": "433360",
    "end": "436160"
  },
  {
    "text": "that and starting from",
    "start": "436160",
    "end": "437520"
  },
  {
    "text": "redis version 6 io in redis is actually",
    "start": "437520",
    "end": "441199"
  },
  {
    "text": "now threaded while the core",
    "start": "441199",
    "end": "443120"
  },
  {
    "text": "remains single threaded and we have knew",
    "start": "443120",
    "end": "445840"
  },
  {
    "text": "this",
    "start": "445840",
    "end": "446319"
  },
  {
    "text": "even before redis 6 redis still uses",
    "start": "446319",
    "end": "449039"
  },
  {
    "text": "multi-threading",
    "start": "449039",
    "end": "450400"
  },
  {
    "text": "to take the snapshot of the memory and",
    "start": "450400",
    "end": "452880"
  },
  {
    "text": "write it to the",
    "start": "452880",
    "end": "453759"
  },
  {
    "text": "desk and it seems now they expanded that",
    "start": "453759",
    "end": "456560"
  },
  {
    "text": "to",
    "start": "456560",
    "end": "456880"
  },
  {
    "text": "almost all ios pretty good now that we",
    "start": "456880",
    "end": "459599"
  },
  {
    "text": "know that",
    "start": "459599",
    "end": "460400"
  },
  {
    "start": "460000",
    "end": "738000"
  },
  {
    "text": "redis has the properties of a primary",
    "start": "460400",
    "end": "463759"
  },
  {
    "text": "database",
    "start": "463759",
    "end": "465199"
  },
  {
    "text": "let's go beyond just a storage system",
    "start": "465199",
    "end": "469120"
  },
  {
    "text": "and actually i made a few videos talking",
    "start": "469120",
    "end": "471919"
  },
  {
    "text": "about some of these features",
    "start": "471919",
    "end": "473120"
  },
  {
    "text": "you may know red is for caching but it's",
    "start": "473120",
    "end": "475599"
  },
  {
    "text": "actually used for",
    "start": "475599",
    "end": "476960"
  },
  {
    "text": "about 20 completely different things",
    "start": "476960",
    "end": "479680"
  },
  {
    "text": "here are a few",
    "start": "479680",
    "end": "480800"
  },
  {
    "text": "common use cases caching obviously it's",
    "start": "480800",
    "end": "483680"
  },
  {
    "text": "a very",
    "start": "483680",
    "end": "484960"
  },
  {
    "text": "fast in-memory right cache so you can",
    "start": "484960",
    "end": "488479"
  },
  {
    "text": "use it as a right through cache right",
    "start": "488479",
    "end": "490319"
  },
  {
    "text": "back cache",
    "start": "490319",
    "end": "491120"
  },
  {
    "text": "you can use it as search for session",
    "start": "491120",
    "end": "492800"
  },
  {
    "text": "management you can use it for",
    "start": "492800",
    "end": "494800"
  },
  {
    "text": "pub sub yes it's very popular i've seen",
    "start": "494800",
    "end": "498639"
  },
  {
    "text": "many",
    "start": "498639",
    "end": "499520"
  },
  {
    "text": "many many many companies users use redis",
    "start": "499520",
    "end": "502400"
  },
  {
    "text": "for pop sub systems so",
    "start": "502400",
    "end": "503840"
  },
  {
    "text": "just like that you get features from a q",
    "start": "503840",
    "end": "506560"
  },
  {
    "text": "and a pop subsystem so if you're looking",
    "start": "506560",
    "end": "508240"
  },
  {
    "text": "for a pop sub system",
    "start": "508240",
    "end": "510240"
  },
  {
    "text": "you can replace your kafka or rabbitmq",
    "start": "510240",
    "end": "512719"
  },
  {
    "text": "with radius",
    "start": "512719",
    "end": "513599"
  },
  {
    "text": "and speaking of kafka you can use redis",
    "start": "513599",
    "end": "516399"
  },
  {
    "text": "streams",
    "start": "516399",
    "end": "517518"
  },
  {
    "text": "which works like kafka to ingest",
    "start": "517519",
    "end": "519680"
  },
  {
    "text": "real-time data",
    "start": "519680",
    "end": "521200"
  },
  {
    "text": "for example from an iot devices to",
    "start": "521200",
    "end": "524480"
  },
  {
    "text": "connect different microservices together",
    "start": "524480",
    "end": "527040"
  },
  {
    "text": "uber actually uses radio streams to",
    "start": "527040",
    "end": "529120"
  },
  {
    "text": "replicate their data across data centers",
    "start": "529120",
    "end": "531600"
  },
  {
    "text": "they also obviously use redis for other",
    "start": "531600",
    "end": "534320"
  },
  {
    "text": "common use cases such as",
    "start": "534320",
    "end": "535760"
  },
  {
    "text": "queuing and caching i'll have a link to",
    "start": "535760",
    "end": "537600"
  },
  {
    "text": "their video in the cards a lot of other",
    "start": "537600",
    "end": "539680"
  },
  {
    "text": "users use it for rate limiting",
    "start": "539680",
    "end": "541839"
  },
  {
    "text": "especially if you're building an eye api",
    "start": "541839",
    "end": "543440"
  },
  {
    "text": "gateway or ip",
    "start": "543440",
    "end": "545760"
  },
  {
    "text": "white listing because you can you you're",
    "start": "545760",
    "end": "547760"
  },
  {
    "text": "quickly looking at our ip",
    "start": "547760",
    "end": "549519"
  },
  {
    "text": "and because it's a key value store",
    "start": "549519",
    "end": "551360"
  },
  {
    "text": "you're going to get it very fast",
    "start": "551360",
    "end": "552560"
  },
  {
    "text": "in addition redis is also used for",
    "start": "552560",
    "end": "555040"
  },
  {
    "text": "real-time",
    "start": "555040",
    "end": "555839"
  },
  {
    "text": "search knowledge graph real-time",
    "start": "555839",
    "end": "558880"
  },
  {
    "text": "analytics",
    "start": "558880",
    "end": "560000"
  },
  {
    "text": "application metrics and forecasting and",
    "start": "560000",
    "end": "563120"
  },
  {
    "text": "real-time artificial intelligence and",
    "start": "563120",
    "end": "566320"
  },
  {
    "text": "all these use cases really",
    "start": "566320",
    "end": "568320"
  },
  {
    "text": "are even possible because redis provides",
    "start": "568320",
    "end": "571279"
  },
  {
    "text": "more than",
    "start": "571279",
    "end": "571760"
  },
  {
    "text": "15 data structures and six modules",
    "start": "571760",
    "end": "575440"
  },
  {
    "text": "which work natively in redis to make it",
    "start": "575440",
    "end": "578640"
  },
  {
    "text": "all possible",
    "start": "578640",
    "end": "579600"
  },
  {
    "text": "this is why redis is not just a primary",
    "start": "579600",
    "end": "581920"
  },
  {
    "text": "database but it's actually a multi-model",
    "start": "581920",
    "end": "584720"
  },
  {
    "text": "multi-structure database so here are few",
    "start": "584720",
    "end": "587760"
  },
  {
    "text": "data types that redis supports strings",
    "start": "587760",
    "end": "590320"
  },
  {
    "text": "obviously lists sets hashes",
    "start": "590320",
    "end": "593360"
  },
  {
    "text": "sorted sets bitmaps and hyperlog logs",
    "start": "593360",
    "end": "596640"
  },
  {
    "text": "another fundamental benefit of having",
    "start": "596640",
    "end": "598959"
  },
  {
    "text": "these native data structures is they",
    "start": "598959",
    "end": "600880"
  },
  {
    "text": "make it easy for engineers to store data",
    "start": "600880",
    "end": "603360"
  },
  {
    "text": "naturally without transformation",
    "start": "603360",
    "end": "605760"
  },
  {
    "text": "for example in java you have sets arrays",
    "start": "605760",
    "end": "608800"
  },
  {
    "text": "hash maps etc",
    "start": "608800",
    "end": "610480"
  },
  {
    "text": "all these types exist in redis",
    "start": "610480",
    "end": "613920"
  },
  {
    "text": "natively however if you're using an",
    "start": "613920",
    "end": "615920"
  },
  {
    "text": "rdbms",
    "start": "615920",
    "end": "617120"
  },
  {
    "text": "you'll need to morph and transform these",
    "start": "617120",
    "end": "620320"
  },
  {
    "text": "data structures",
    "start": "620320",
    "end": "621839"
  },
  {
    "text": "into tables not only that you'll also",
    "start": "621839",
    "end": "624959"
  },
  {
    "text": "need to",
    "start": "624959",
    "end": "625519"
  },
  {
    "text": "access this data using sql this is as",
    "start": "625519",
    "end": "628959"
  },
  {
    "text": "opposed to",
    "start": "628959",
    "end": "629760"
  },
  {
    "text": "regular array set or hash map commands",
    "start": "629760",
    "end": "633279"
  },
  {
    "text": "this additional overhead is a result of",
    "start": "633279",
    "end": "636800"
  },
  {
    "text": "the mismatch",
    "start": "636800",
    "end": "637839"
  },
  {
    "text": "between how you think an object in",
    "start": "637839",
    "end": "640880"
  },
  {
    "text": "object-oriented programming",
    "start": "640880",
    "end": "642560"
  },
  {
    "text": "versus relational databases tables this",
    "start": "642560",
    "end": "646079"
  },
  {
    "text": "is known as the",
    "start": "646079",
    "end": "647040"
  },
  {
    "text": "object relational impedance mismatch",
    "start": "647040",
    "end": "649680"
  },
  {
    "text": "martin fuller has talked about impedance",
    "start": "649680",
    "end": "651839"
  },
  {
    "text": "mismatch and object oriented programming",
    "start": "651839",
    "end": "654320"
  },
  {
    "text": "a bit",
    "start": "654320",
    "end": "654720"
  },
  {
    "text": "i'm going to reference his video in the",
    "start": "654720",
    "end": "656720"
  },
  {
    "text": "description below another plus for red",
    "start": "656720",
    "end": "658640"
  },
  {
    "text": "is because it's a very popular",
    "start": "658640",
    "end": "660079"
  },
  {
    "text": "database you have many supports for a",
    "start": "660079",
    "end": "662959"
  },
  {
    "text": "lot of languages",
    "start": "662959",
    "end": "664160"
  },
  {
    "text": "and sdks as well another thing i love",
    "start": "664160",
    "end": "666720"
  },
  {
    "text": "about this and i",
    "start": "666720",
    "end": "667680"
  },
  {
    "text": "talked about this in my previous videos",
    "start": "667680",
    "end": "670160"
  },
  {
    "text": "about reddish is",
    "start": "670160",
    "end": "671440"
  },
  {
    "text": "the redis binary protocol which is",
    "start": "671440",
    "end": "673440"
  },
  {
    "text": "called resp",
    "start": "673440",
    "end": "674800"
  },
  {
    "text": "that that protocol actually supports",
    "start": "674800",
    "end": "676800"
  },
  {
    "text": "something called pipelining which i",
    "start": "676800",
    "end": "678560"
  },
  {
    "text": "talked about in my http videos",
    "start": "678560",
    "end": "680240"
  },
  {
    "text": "pipelining",
    "start": "680240",
    "end": "680959"
  },
  {
    "text": "is the ability to send multiple commands",
    "start": "680959",
    "end": "683839"
  },
  {
    "text": "at the same",
    "start": "683839",
    "end": "684880"
  },
  {
    "text": "time on the same tcp connection and",
    "start": "684880",
    "end": "687519"
  },
  {
    "text": "instead of",
    "start": "687519",
    "end": "688399"
  },
  {
    "text": "doing a request response like so send a",
    "start": "688399",
    "end": "691120"
  },
  {
    "text": "command wait for results in the command",
    "start": "691120",
    "end": "692640"
  },
  {
    "text": "wait for a result",
    "start": "692640",
    "end": "693600"
  },
  {
    "text": "so you get much much better throughput",
    "start": "693600",
    "end": "696320"
  },
  {
    "text": "as a result",
    "start": "696320",
    "end": "697040"
  },
  {
    "text": "so during this video we learned what a",
    "start": "697040",
    "end": "698959"
  },
  {
    "text": "primary database is",
    "start": "698959",
    "end": "700720"
  },
  {
    "text": "we saw that rellis checks these boxes of",
    "start": "700720",
    "end": "703680"
  },
  {
    "text": "a primary database",
    "start": "703680",
    "end": "705120"
  },
  {
    "text": "we also seen that radius use cases go",
    "start": "705120",
    "end": "707279"
  },
  {
    "text": "beyond just a primary database we've",
    "start": "707279",
    "end": "709440"
  },
  {
    "text": "seen how red this is a multi-modal",
    "start": "709440",
    "end": "711680"
  },
  {
    "text": "database",
    "start": "711680",
    "end": "712560"
  },
  {
    "text": "we've seen it reduce the impedance",
    "start": "712560",
    "end": "714880"
  },
  {
    "text": "mismatch in programming with",
    "start": "714880",
    "end": "716639"
  },
  {
    "text": "native data types and finally redis",
    "start": "716639",
    "end": "719519"
  },
  {
    "text": "enterprise provides even more",
    "start": "719519",
    "end": "721279"
  },
  {
    "text": "enterprise grade features such as active",
    "start": "721279",
    "end": "723519"
  },
  {
    "text": "active conflict-free",
    "start": "723519",
    "end": "725200"
  },
  {
    "text": "geo replication now i gotta ask the",
    "start": "725200",
    "end": "727279"
  },
  {
    "text": "question to you guys what do you think",
    "start": "727279",
    "end": "729120"
  },
  {
    "text": "can rudders be used as a primary",
    "start": "729120",
    "end": "730880"
  },
  {
    "text": "database let me know in those comments",
    "start": "730880",
    "end": "732800"
  },
  {
    "text": "down below",
    "start": "732800",
    "end": "733600"
  },
  {
    "text": "i'm gonna see you on the next one you",
    "start": "733600",
    "end": "735040"
  },
  {
    "text": "guys stay awesome goodbye",
    "start": "735040",
    "end": "738959"
  }
]