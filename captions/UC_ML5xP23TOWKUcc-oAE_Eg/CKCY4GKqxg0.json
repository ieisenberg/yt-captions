[
  {
    "start": "0",
    "end": "140000"
  },
  {
    "text": "postgres version 14 beta 1 has just been released with a lot of exciting new features",
    "start": "80",
    "end": "8080"
  },
  {
    "text": "and i usually do these kind of videos where i when whenever a postcard's new poscas",
    "start": "8080",
    "end": "13440"
  },
  {
    "text": "version is released i just make a video about the new features and kind of go into",
    "start": "13440",
    "end": "19520"
  },
  {
    "text": "details about what those features uh do kind of technical so these",
    "start": "19520",
    "end": "24640"
  },
  {
    "text": "kind of episodes are very very technical right so we go into details like i try to explain",
    "start": "24640",
    "end": "30400"
  },
  {
    "text": "some of the things i can some of the things obviously but above my head and i can't",
    "start": "30400",
    "end": "35440"
  },
  {
    "text": "explain and it takes time but i'm very passionate with postcards i love this database i did these kind of",
    "start": "35440",
    "end": "41040"
  },
  {
    "text": "videos with postgres 12 i started doing it with 12. uh maybe 11 i don't remember and i did",
    "start": "41040",
    "end": "47280"
  },
  {
    "text": "it with 13 and since 14 is in beta it's about to be released fully in a few weeks",
    "start": "47280",
    "end": "53840"
  },
  {
    "text": "i usually decided to okay let's go ahead and go through the new features of pulse",
    "start": "53840",
    "end": "59520"
  },
  {
    "text": "chris version 14. how about we jump into it guys guys welcome to the backend engineering show",
    "start": "59520",
    "end": "64878"
  },
  {
    "text": "with your host hussein nasser and how about we jump into",
    "start": "64879",
    "end": "70000"
  },
  {
    "text": "the features that have been shipped with version 14 of uh postgres",
    "start": "70000",
    "end": "77119"
  },
  {
    "text": "yeah what we're gonna review is actually the beta but it looks like these are pretty much all",
    "start": "77119",
    "end": "82720"
  },
  {
    "text": "the features or at least the highlights the most important features that is available in the",
    "start": "82720",
    "end": "88880"
  },
  {
    "text": "software let's jump into the screen share now all right guys postgres sequel",
    "start": "88880",
    "end": "97040"
  },
  {
    "text": "14 feature highlights so there are a lot of categories there's performance data types new data",
    "start": "97040",
    "end": "104159"
  },
  {
    "text": "type on sql server there is administration kind of changes",
    "start": "104159",
    "end": "109759"
  },
  {
    "text": "and tweaks and new features there there is replication and recovery so if you're using replication you might want",
    "start": "109759",
    "end": "115520"
  },
  {
    "text": "to pay attention to this this is interesting stuff and security obviously tls authentication and things like that",
    "start": "115520",
    "end": "120799"
  },
  {
    "text": "so this is the categories and i'll have some chapters for you guys",
    "start": "120799",
    "end": "125840"
  },
  {
    "text": "to jump in and end time stamp even if you're on the podcast you can just click on the description your favorite",
    "start": "125840",
    "end": "132239"
  },
  {
    "text": "part podcast player you should see the description there with timestamp where you jump into the",
    "start": "132239",
    "end": "137280"
  },
  {
    "text": "uh interesting part of the video where you're interested in this stuff",
    "start": "137280",
    "end": "142400"
  },
  {
    "start": "140000",
    "end": "1130000"
  },
  {
    "text": "all right performance postcards 14 continues to trend of recent releases in providing",
    "start": "142400",
    "end": "149120"
  },
  {
    "text": "performance benefits to work loads of all sizes this release has significant improvement in transaction",
    "start": "149120",
    "end": "155920"
  },
  {
    "text": "throughput for postgres beautiful pretty i love throughput right that have large number of",
    "start": "155920",
    "end": "162640"
  },
  {
    "text": "connections to the database regardless if they are an active or idle state this is",
    "start": "162640",
    "end": "170160"
  },
  {
    "text": "basically a problem in all databases to be honest right the more connections you have the more cpu is being consumed",
    "start": "170160",
    "end": "178400"
  },
  {
    "text": "just handling these connections and and the postgres database even if you're idle you still do polling",
    "start": "178400",
    "end": "184959"
  },
  {
    "text": "and stuff like that on the connection and that kind of consumes stuff so the post team apparently they figured",
    "start": "184959",
    "end": "190720"
  },
  {
    "text": "out ways to work with large number of connections postcards 14 also contains",
    "start": "190720",
    "end": "195840"
  },
  {
    "text": "additional gains in reducing b trees indexing overhead including reducing",
    "start": "195840",
    "end": "202480"
  },
  {
    "text": "the bloat on tables with frequently updated indexes so",
    "start": "202480",
    "end": "209040"
  },
  {
    "text": "there's a link here that you can click and read more about it but i can summarize what's going on here",
    "start": "209040",
    "end": "216159"
  },
  {
    "text": "when you update a field in a row and that field",
    "start": "216159",
    "end": "224720"
  },
  {
    "text": "whether if it has an index on it postgres needs to update the index",
    "start": "224720",
    "end": "232879"
  },
  {
    "text": "to reference the new tuple that you just created that's because of postgres model of the",
    "start": "232879",
    "end": "239280"
  },
  {
    "text": "versioning right and it just always creates a new tuple if you do an update we keep the old",
    "start": "239280",
    "end": "246879"
  },
  {
    "text": "tuple right and we create a new uh tuple with that new change that you",
    "start": "246879",
    "end": "253280"
  },
  {
    "text": "made now this tuple new tuple id the index is referencing the old tuple id so you need",
    "start": "253280",
    "end": "259040"
  },
  {
    "text": "to go to the index and say hey index by the way there is a new version of this raw",
    "start": "259040",
    "end": "264479"
  },
  {
    "text": "here's the new tuple id hey guys we're saying from anything here i forgot to mention very important",
    "start": "264479",
    "end": "269759"
  },
  {
    "text": "something very important here when you have an index on a column and you update that",
    "start": "269759",
    "end": "276320"
  },
  {
    "text": "column you have to update the index b3 with the value that you just updated",
    "start": "276320",
    "end": "282160"
  },
  {
    "text": "how how else would you search for the new value that is the reason you update the index",
    "start": "282160",
    "end": "287600"
  },
  {
    "text": "when there is an index on top of the column you just updated right obviously you have to also",
    "start": "287600",
    "end": "293600"
  },
  {
    "text": "update the tuple but the main reason is because you have to update the p3 itself",
    "start": "293600",
    "end": "298880"
  },
  {
    "text": "the leaf to beer all right let's back back to the video by the way just this is a clarification",
    "start": "298880",
    "end": "304960"
  },
  {
    "text": "a row and a tuple is in post because they are kind of a slightly different when you say logical",
    "start": "304960",
    "end": "312080"
  },
  {
    "text": "row that means it's the latest representation of that row logical row",
    "start": "312080",
    "end": "318080"
  },
  {
    "text": "right the tuple is what tuple exactly you're referring to because a logical",
    "start": "318080",
    "end": "324160"
  },
  {
    "text": "role could have been updated 100 times so it could have hundred tuples",
    "start": "324160",
    "end": "329440"
  },
  {
    "text": "right so what is the final representation of that logical row is what is logical",
    "start": "329440",
    "end": "336720"
  },
  {
    "text": "raw refers to well tuples on the other hand really really need to defer like okay which double",
    "start": "336720",
    "end": "342800"
  },
  {
    "text": "maybe you can you're reading an old logical row old version of the row in an old tuple that's what we mean by tuples",
    "start": "342800",
    "end": "350080"
  },
  {
    "text": "here so this makes sense if you update a field that has an index we need to go to the index and update the tuple",
    "start": "350080",
    "end": "356639"
  },
  {
    "text": "id because that's what we store in the index we only store the tuple id and if you have a covering index you",
    "start": "356639",
    "end": "362639"
  },
  {
    "text": "might have other columns that you store in the index as well but postgres also",
    "start": "362639",
    "end": "372479"
  },
  {
    "text": "when you update other fields as well that doesn't have an index unfortunately",
    "start": "372479",
    "end": "380720"
  },
  {
    "text": "and this is fixed and postgres by still really depends when you update other fields that has",
    "start": "380720",
    "end": "387360"
  },
  {
    "text": "nothing to do or no indexes at all you still get a new",
    "start": "387360",
    "end": "393039"
  },
  {
    "text": "tuple id however for the long time",
    "start": "393039",
    "end": "399520"
  },
  {
    "text": "the index now still points to the old",
    "start": "399520",
    "end": "405759"
  },
  {
    "text": "tuple you don't want that you need you still need to update the index unfortunately",
    "start": "405759",
    "end": "412639"
  },
  {
    "text": "because if you now search for this uh if you start searching the index and you",
    "start": "412639",
    "end": "418960"
  },
  {
    "text": "found your entry and you go and you locate the tuple you're pointing to an older version of the row which is",
    "start": "418960",
    "end": "425280"
  },
  {
    "text": "incorrect right so now you have to also go",
    "start": "425280",
    "end": "430479"
  },
  {
    "text": "to the index and update it it has been always through for polska's 83 or",
    "start": "430479",
    "end": "437599"
  },
  {
    "text": "something they fixed that with something though called the heap only to pull the hot",
    "start": "437599",
    "end": "443599"
  },
  {
    "text": "optimization and uh so that they did a trick in",
    "start": "443599",
    "end": "451520"
  },
  {
    "text": "the heap when you update something that has nothing to do with indexes they do a little pointer a little bit of",
    "start": "451520",
    "end": "457919"
  },
  {
    "text": "track there so that old tuple they keep it and they say okay by the way this an old tuple actually this is the new",
    "start": "457919",
    "end": "464479"
  },
  {
    "text": "version of this odd table in the heap itself in the page itself so that the index can stay",
    "start": "464479",
    "end": "470639"
  },
  {
    "text": "pointing to the multiple but if you did a search",
    "start": "470639",
    "end": "475759"
  },
  {
    "text": "and you found that multiple in the index you will go to the heap and you will find the old table but",
    "start": "475759",
    "end": "482319"
  },
  {
    "text": "the page will say hey index how you doing there is a new version of this",
    "start": "482319",
    "end": "488160"
  },
  {
    "text": "index uh tuple and here's that here it is right this is called heap only double",
    "start": "488160",
    "end": "494479"
  },
  {
    "text": "okay obviously we can't always do that because this only is true",
    "start": "494479",
    "end": "502639"
  },
  {
    "text": "if the row the tuple that you just updated and that that new version of the",
    "start": "502639",
    "end": "509120"
  },
  {
    "text": "tuple is in the same page right and you might say how can a tuple jump into another page",
    "start": "509120",
    "end": "515360"
  },
  {
    "text": "well a page has a size dear of course there is an 8k",
    "start": "515360",
    "end": "521039"
  },
  {
    "text": "right and and this page gets full eventually so if it's the last throw let's say and you're updating it and",
    "start": "521039",
    "end": "526800"
  },
  {
    "text": "it's full it had to spill into another uh page unfortunately right and if",
    "start": "526800",
    "end": "534399"
  },
  {
    "text": "that's the case you can't use this hot optimization and in that case you'll get this bloated",
    "start": "534399",
    "end": "541040"
  },
  {
    "text": "index so all of that we're always talking about as this optimization reduce the bloat on",
    "start": "541040",
    "end": "548240"
  },
  {
    "text": "the table with frequently updated indexes so they did a lot of tricks all right to",
    "start": "548240",
    "end": "554480"
  },
  {
    "text": "reduce this double then like this is called like bottom delete i",
    "start": "554480",
    "end": "559920"
  },
  {
    "text": "forgot what was called the bottom deleting indexes or something like that so they they essentially delete this bloat",
    "start": "559920",
    "end": "568160"
  },
  {
    "text": "in certain situation and don't wait wait for vacuum to do it so yeah vacuum usually clear up these bloats but",
    "start": "568160",
    "end": "576480"
  },
  {
    "text": "you don't want to wait for vacuum to clean up all this stuff sometimes right so they did a better job at cleaning the",
    "start": "576480",
    "end": "584320"
  },
  {
    "text": "bloat earlier essentially so yeah all right so we need to moved a little bit faster",
    "start": "584320",
    "end": "590160"
  },
  {
    "text": "otherwise this is this video is not going to finish huh yeah so for this uh the the indexes and",
    "start": "590160",
    "end": "596959"
  },
  {
    "text": "all that stuff the hot only topple optimization you need to optimize your fill factor",
    "start": "596959",
    "end": "603519"
  },
  {
    "text": "so that you have your page filled to a certain extent i'm going to make a video talking just",
    "start": "603519",
    "end": "609440"
  },
  {
    "text": "about that it's fill factor fill factor and all that stuff right so yeah you don't want to fill the page 100",
    "start": "609440",
    "end": "615519"
  },
  {
    "text": "right you need a little bit of a space so that you can take advantage of the hot optimization all right another optimization with the",
    "start": "615519",
    "end": "622480"
  },
  {
    "text": "index is this jest indexes which stands for uh generalized",
    "start": "622480",
    "end": "627839"
  },
  {
    "text": "search tree indexes uh to be honest i never use these kind of things but this these are the domain i believe that is",
    "start": "627839",
    "end": "634320"
  },
  {
    "text": "the same thing as the domain indexes in sql server where you can essentially build your own expression",
    "start": "634320",
    "end": "640640"
  },
  {
    "text": "kind of index right you don't want to build it on a specific integer field or string you have like a",
    "start": "640640",
    "end": "646959"
  },
  {
    "text": "fancy data type right that you created like a spatial type type and you want to build a jest index",
    "start": "646959",
    "end": "653040"
  },
  {
    "text": "in this case to do your own algorithm to do the searching and indexing so these are just index so they did a",
    "start": "653040",
    "end": "659120"
  },
  {
    "text": "bunch of optimization for that they implemented covering indexes for that so you can include",
    "start": "659120",
    "end": "664800"
  },
  {
    "text": "a field in your index i talked about covering indexes uh in my course actually introduction to",
    "start": "664800",
    "end": "671839"
  },
  {
    "text": "database engineering this is a plug by the way guys i have a",
    "start": "671839",
    "end": "676880"
  },
  {
    "text": "course it's called introduction to database engineering people seem to love it but at least i got 4.7 on udemy",
    "start": "676880",
    "end": "684640"
  },
  {
    "text": "yikes thank you so much uh so check it out jose nozzle.com all right there are many",
    "start": "684640",
    "end": "691279"
  },
  {
    "text": "improvements to query parallelism in postgres14 okay so query parallelism in general the",
    "start": "691279",
    "end": "697680"
  },
  {
    "text": "the idea of using multiple processes to process a single query right and we see it all the time",
    "start": "697680",
    "end": "702880"
  },
  {
    "text": "in the query planner the the postgres planner will say hey by the way i used a parallel index",
    "start": "702880",
    "end": "708640"
  },
  {
    "text": "scan or a parallel heap scan things like that so i'd use multiple worker",
    "start": "708640",
    "end": "714160"
  },
  {
    "text": "to execute these kind of queries for you in addition to overall improvements uh",
    "start": "714160",
    "end": "720399"
  },
  {
    "text": "for parallel sequential scans the return query directive and plc pg",
    "start": "720399",
    "end": "726000"
  },
  {
    "text": "sql can now execute query with parallelism or apparently it couldn't before right if you",
    "start": "726000",
    "end": "731040"
  },
  {
    "text": "if you care about pl sql this is something maybe you gonna like refreshed materialized view",
    "start": "731040",
    "end": "738720"
  },
  {
    "text": "can now use query parallelism as well so a materialized view if you don't know",
    "start": "738720",
    "end": "744000"
  },
  {
    "text": "guys is a view that is essentially persisted right a view is a view you create a you you",
    "start": "744000",
    "end": "749760"
  },
  {
    "text": "build a query a complex query of multiple tables and you just create a view out of it that's",
    "start": "749760",
    "end": "755120"
  },
  {
    "text": "just a view so if you query the view you always re-execute that expense of a query every time a",
    "start": "755120",
    "end": "760959"
  },
  {
    "text": "materializer view is a view that is persistent asynchronously essentially so the query will asynchronously build",
    "start": "760959",
    "end": "768079"
  },
  {
    "text": "right you can build it manually and then you when you query the view it's persisted",
    "start": "768079",
    "end": "773920"
  },
  {
    "text": "you can hit the view directly right there isn't that you don't get a cost of executing that",
    "start": "773920",
    "end": "779680"
  },
  {
    "text": "obviously there is a delay of or what now but so apparently refresh materialize view which essentially build as materialist",
    "start": "779680",
    "end": "786720"
  },
  {
    "text": "view is using parallelism nice it is noise postgres14 also introduces the",
    "start": "786720",
    "end": "795680"
  },
  {
    "text": "ability to leverage query parallelism when querying remote databases using foreign dead rubber",
    "start": "795680",
    "end": "802079"
  },
  {
    "text": "this is apparently the ability to query other databases",
    "start": "802079",
    "end": "809600"
  },
  {
    "text": "and you can leverage the parallelism here as well the release has also",
    "start": "809600",
    "end": "815040"
  },
  {
    "text": "several improvement to the partitioning system partitioning you know guys i talk about partitioning a lot and possibly improve the",
    "start": "815040",
    "end": "821920"
  },
  {
    "text": "partitioning system a lot right include performance gain when updating or deleting rows",
    "start": "821920",
    "end": "828079"
  },
  {
    "text": "on tables where only a few partitions are affected in postgres 14 so let's talk about this",
    "start": "828079",
    "end": "834240"
  },
  {
    "text": "a little bit so if you're updating or deleting rows right you're going to provide a",
    "start": "834240",
    "end": "841120"
  },
  {
    "text": "where clause where it has the key the partition key where it helps you helps the database decide",
    "start": "841120",
    "end": "848480"
  },
  {
    "text": "which partition to hit a partition is just another table think about it right huge table or partitioned",
    "start": "848480",
    "end": "854320"
  },
  {
    "text": "by key essentially so now if your query is hitting few partitions",
    "start": "854320",
    "end": "861440"
  },
  {
    "text": "there's a improvement in that particular case obviously if you're hitting a lot of partitions that's just a bad idea",
    "start": "861440",
    "end": "867440"
  },
  {
    "text": "right that's just going to slow you down as as much as as you're having as uh a large table right that's why the",
    "start": "867440",
    "end": "874320"
  },
  {
    "text": "beauty of partition if you hit a single or maybe two partitions at most if you",
    "start": "874320",
    "end": "880399"
  },
  {
    "text": "found yourself doing partitioning and you're hitting the entire set of",
    "start": "880399",
    "end": "886079"
  },
  {
    "text": "100 partitions maybe it's time to revise your query partitions can now be detached in an",
    "start": "886079",
    "end": "892800"
  },
  {
    "text": "unblocking manner using alter table detach partition concatenately",
    "start": "892800",
    "end": "898079"
  },
  {
    "text": "this is a very consistent thing you're going to see in postgres they add concurrently to",
    "start": "898079",
    "end": "904560"
  },
  {
    "text": "any query the amount you see concurrently supported they add it to the index they by whenever you see",
    "start": "904560",
    "end": "909920"
  },
  {
    "text": "concurrently that means this is allowing you to rebuild the index or create an index",
    "start": "909920",
    "end": "918000"
  },
  {
    "text": "without acquiring locks because this is certain operations ddl",
    "start": "918000",
    "end": "924880"
  },
  {
    "text": "to be specific require an exclusive lock and when you do that you can't try to the table",
    "start": "924880",
    "end": "932240"
  },
  {
    "text": "other transactions are blocked right so if you add concurrently postgres will",
    "start": "932240",
    "end": "937839"
  },
  {
    "text": "slow the process down the process of creating then just rebuilding on this or detaching the",
    "start": "937839",
    "end": "943839"
  },
  {
    "text": "partition in this case but it will allow transactions to",
    "start": "943839",
    "end": "949839"
  },
  {
    "text": "right essentially so if someone is trying to write is gonna like pause the process that is creating",
    "start": "949839",
    "end": "955519"
  },
  {
    "text": "the index or rebuilding the index that is the blocking a process and then allow the other process to continue right so it prefers dmls over",
    "start": "955519",
    "end": "963360"
  },
  {
    "text": "ddls let's let's put it this way incrementer sorting introduced in the",
    "start": "963360",
    "end": "969839"
  },
  {
    "text": "previous or window functions this is another features",
    "start": "969839",
    "end": "975360"
  },
  {
    "text": "this new release has more capability and extended statistics right so statistics enjoy this is another",
    "start": "975360",
    "end": "982000"
  },
  {
    "text": "something new i didn't read i didn't know about it statistics in general you know this is like okay this field",
    "start": "982000",
    "end": "988639"
  },
  {
    "text": "has this many value right this table has this many rows this feed has these kind of values",
    "start": "988639",
    "end": "994560"
  },
  {
    "text": "this is allows the table and the query planner to plan better your query and to choose okay maybe an",
    "start": "994560",
    "end": "1000880"
  },
  {
    "text": "index plan maybe an index is better than scanning the table or maybe",
    "start": "1000880",
    "end": "1006480"
  },
  {
    "text": "the index is just not worth it for this kind of carry i'm gonna might as well just go to the heap",
    "start": "1006480",
    "end": "1011519"
  },
  {
    "text": "and scan the whole table it's better these kinds of statistics extended statistics actually",
    "start": "1011519",
    "end": "1019000"
  },
  {
    "text": "allows you to build your own kind of expressions and and uh",
    "start": "1019000",
    "end": "1026720"
  },
  {
    "text": "related statistics like oh this columns are related to this column so you can build complex statistics with this and",
    "start": "1026720",
    "end": "1034000"
  },
  {
    "text": "you can build even expressions with these things yikes not just fields expression poscas has also",
    "start": "1034000",
    "end": "1040319"
  },
  {
    "text": "supported compression on its oversized data column known as toast i talked about toast a little bit",
    "start": "1040319",
    "end": "1046000"
  },
  {
    "text": "in the uh previous videos and toast if you don't know guys is",
    "start": "1046000",
    "end": "1052320"
  },
  {
    "text": "the when you have like a string field or a blob field uh poscas does not store that",
    "start": "1052320",
    "end": "1060640"
  },
  {
    "text": "large string or large blob in that topple itself because there's a requirement in",
    "start": "1060640",
    "end": "1067520"
  },
  {
    "text": "postcards that a row should not span a page and the page is 8k",
    "start": "1067520",
    "end": "1072960"
  },
  {
    "text": "so if you put the whole string in a large string in a tuple itself the row will will just",
    "start": "1072960",
    "end": "1079440"
  },
  {
    "text": "spill over two pages and that will complicate the database so they decided you know what",
    "start": "1079440",
    "end": "1084559"
  },
  {
    "text": "rows should never ever span two pages that means i cannot put a whole roger",
    "start": "1084559",
    "end": "1089919"
  },
  {
    "text": "string in the tuple the so they decided to do this idea of a pointer so that toast pointer they put the pointer",
    "start": "1089919",
    "end": "1096880"
  },
  {
    "text": "in the column where the string is or where the blob is and they put it in the toast stables in a different",
    "start": "1096880",
    "end": "1102960"
  },
  {
    "text": "table and they chunk it up and they compress that thing okay they now supported a different kind of",
    "start": "1102960",
    "end": "1110080"
  },
  {
    "text": "compression right and it's called lz4 i'm not familiar with it",
    "start": "1110080",
    "end": "1115760"
  },
  {
    "text": "right but this is the new is another supporter apparently it's uh someone uh been requesting that lz for",
    "start": "1115760",
    "end": "1122880"
  },
  {
    "text": "compression so it is now support if you you can turn it on by uh if you want to i don't think this is",
    "start": "1122880",
    "end": "1129039"
  },
  {
    "text": "the default though they didn't specify all right some data types and sql what",
    "start": "1129039",
    "end": "1135120"
  },
  {
    "start": "1130000",
    "end": "1380000"
  },
  {
    "text": "what have been new this time okay so what did they introduce then there's this they building upon its existing support",
    "start": "1135120",
    "end": "1143760"
  },
  {
    "text": "for range type so they had a range type which basically you create a range and",
    "start": "1143760",
    "end": "1148880"
  },
  {
    "text": "you say okay this is the valid range in this column anything outside this range please fail",
    "start": "1148880",
    "end": "1154160"
  },
  {
    "text": "don't allow it to insert right that's what i understand and it now adds a multi-range type",
    "start": "1154160",
    "end": "1160799"
  },
  {
    "text": "nice all right so you can have a multi-range right so someone interested in that that is non-contiguous so the ranges have to be",
    "start": "1160799",
    "end": "1167440"
  },
  {
    "text": "contiguous apparently to each other right like a date we'll look at the date from 2021",
    "start": "1167440",
    "end": "1172799"
  },
  {
    "text": "july 1st to 21 july 31st now you can essentially break it up into",
    "start": "1172799",
    "end": "1178240"
  },
  {
    "text": "okay from from july 1st to july 31st and from september 1st to september 30 and and so",
    "start": "1178240",
    "end": "1184960"
  },
  {
    "text": "on all right what else they also added",
    "start": "1184960",
    "end": "1190080"
  },
  {
    "text": "a general subscripting framework for retrieving information in nested objects oh for those people who love jason b",
    "start": "1190080",
    "end": "1197840"
  },
  {
    "text": "this is exciting so you can write expressions like this where you can uh in",
    "start": "1197840",
    "end": "1205280"
  },
  {
    "text": "in the select statement man oh my god what polska's what are you doing jason has",
    "start": "1205280",
    "end": "1212400"
  },
  {
    "text": "nothing to do with this relational yeah i don't know man i know people like",
    "start": "1212400",
    "end": "1218320"
  },
  {
    "text": "jason as a field but come on come on have a schema already",
    "start": "1218320",
    "end": "1224559"
  },
  {
    "text": "have a schema okay okay this is controversial a little bit people don't love",
    "start": "1224559",
    "end": "1229919"
  },
  {
    "text": "i know a lot of people say well uh sometimes i don't my my requirement uh",
    "start": "1229919",
    "end": "1236080"
  },
  {
    "text": "the client keeps changing the schema so i'd like to just have a json field and just throw my junk there well",
    "start": "1236080",
    "end": "1244880"
  },
  {
    "text": "i never run into a requirement like that so i can't talk to that i'll but i like",
    "start": "1244880",
    "end": "1250720"
  },
  {
    "text": "explicit explicit schema obviously i'm not saying there are not user use cases apparently there are that's",
    "start": "1250720",
    "end": "1257440"
  },
  {
    "text": "why it's popular right i don't like it",
    "start": "1257440",
    "end": "1262480"
  },
  {
    "text": "here's here's the truth i like my relation database to stay relational beautiful data type let me have a schema",
    "start": "1262480",
    "end": "1270240"
  },
  {
    "text": "this this mumbo jumbo i don't know guys so you you can essentially take that if",
    "start": "1270240",
    "end": "1276320"
  },
  {
    "text": "you have a feel of json b which has your json document you can essentially do sub string and do",
    "start": "1276320",
    "end": "1282000"
  },
  {
    "text": "okay the sub get the key and then get a sub get the key so you can basically run",
    "start": "1282000",
    "end": "1287520"
  },
  {
    "text": "javascript that's what we're looking at if at the end of the day you'll you'll be able to run javascript",
    "start": "1287520",
    "end": "1293679"
  },
  {
    "text": "in postgres that's what we're going to end up with right but it's a very simple representation",
    "start": "1293679",
    "end": "1300960"
  },
  {
    "text": "right so let's say you have a json document with a user and the user has an as an object with an id and a name so",
    "start": "1300960",
    "end": "1308159"
  },
  {
    "text": "you can do select you where the user field is you",
    "start": "1308159",
    "end": "1314400"
  },
  {
    "text": "dot not dot you cannot do doubt apparently they are using this uh this array not array just this square",
    "start": "1314400",
    "end": "1321120"
  },
  {
    "text": "bracket so square bracket id to get the id and then you can do a square product name",
    "start": "1321120",
    "end": "1326400"
  },
  {
    "text": "to get the name right posgus 14 also adds support for out parameters in",
    "start": "1326400",
    "end": "1332320"
  },
  {
    "text": "stored procedures to allow group by clause to use distinct keyword to remove",
    "start": "1332320",
    "end": "1337679"
  },
  {
    "text": "duplicate grouping set so that's another requirement with group by and stored procedure very specific",
    "start": "1337679",
    "end": "1345120"
  },
  {
    "text": "right another uh thing for the common table expression cte square which is called",
    "start": "1345120",
    "end": "1351120"
  },
  {
    "text": "also with queries posgus 14 add syntactic conveniences to",
    "start": "1351120",
    "end": "1356720"
  },
  {
    "text": "search and cycle to help with ordering and cycle detection respectively there is also new data bin",
    "start": "1356720",
    "end": "1365760"
  },
  {
    "text": "function in postgres 14 that can align time stem with specific interval a technique called",
    "start": "1365760",
    "end": "1371520"
  },
  {
    "text": "also known as binning all right",
    "start": "1371520",
    "end": "1376559"
  },
  {
    "text": "so there's there is a lot of stuff in type so if you like this stuff guys puzzle 14",
    "start": "1376559",
    "end": "1382880"
  },
  {
    "start": "1380000",
    "end": "1950000"
  },
  {
    "text": "maybe for you consider upgrading let's go to administration one of the my favorite",
    "start": "1382880",
    "end": "1388960"
  },
  {
    "text": "parts postgres 14 makes numerous improvements to vacuum right",
    "start": "1388960",
    "end": "1396159"
  },
  {
    "text": "vacuum you know this post process that's called vacuum that cleans up postgres",
    "start": "1396159",
    "end": "1402880"
  },
  {
    "text": "with optimization geared toward indexes auto vacuum now analyzes partition",
    "start": "1402880",
    "end": "1409200"
  },
  {
    "text": "tables and can propagate information about row counts two parent table",
    "start": "1409200",
    "end": "1417200"
  },
  {
    "text": "very very interesting this is looks like this is as part of the analyze as that is",
    "start": "1417200",
    "end": "1424159"
  },
  {
    "text": "added because the row count of the partition table is now propagated to the parent table",
    "start": "1424159",
    "end": "1431679"
  },
  {
    "text": "and we know this pattern is the logical representation of the partition table right so now you do an analyze",
    "start": "1431679",
    "end": "1439600"
  },
  {
    "text": "and now you can essentially have more information about the row counts very critical for query planning so now",
    "start": "1439600",
    "end": "1447919"
  },
  {
    "text": "we know the the planner especially the database knows that okay this table has this much rows this table",
    "start": "1447919",
    "end": "1455039"
  },
  {
    "text": "this partition has almost no rows this table this partition has few roles",
    "start": "1455039",
    "end": "1460320"
  },
  {
    "text": "so it can decide what path it can take based on the",
    "start": "1460320",
    "end": "1466000"
  },
  {
    "text": "essentially the statistics there are also performance gains in analyze that can be controlled with",
    "start": "1466000",
    "end": "1472320"
  },
  {
    "text": "maintenance i o concurrency so i read a lot of uh i read about this maintenance i o",
    "start": "1472320",
    "end": "1478480"
  },
  {
    "text": "currencies it's related to the effective io concurrency and then",
    "start": "1478480",
    "end": "1483600"
  },
  {
    "text": "it boils down to the how many uh processes or concurrent io",
    "start": "1483600",
    "end": "1491279"
  },
  {
    "text": "operations you want to allow concurrently at the same time right this is this is a very very low level",
    "start": "1491279",
    "end": "1498720"
  },
  {
    "text": "change that you can make to your postgres database you can increase it i think up to a",
    "start": "1498720",
    "end": "1504159"
  },
  {
    "text": "thousand i believe 1000 io and that will allow you to execute this as much",
    "start": "1504159",
    "end": "1512159"
  },
  {
    "text": "as a thousand i o right but the more i o you have obviously it can",
    "start": "1512159",
    "end": "1520080"
  },
  {
    "text": "uh it's gonna it's gonna consume more cpu because cpu needs to",
    "start": "1520080",
    "end": "1525520"
  },
  {
    "text": "read these io the arrays to manage this asynchronous i o at the end of the day so the more value that more cpu is going",
    "start": "1525520",
    "end": "1532240"
  },
  {
    "text": "to consume and obviously it depends also on whether you have a hard drive a spinning disk or ssd usually",
    "start": "1532240",
    "end": "1540159"
  },
  {
    "text": "what they recommend if it's sd you can put in the hundreds right as all this is all really trial",
    "start": "1540159",
    "end": "1546320"
  },
  {
    "text": "and seeing what what what fits your use case to be honest this is like advanced stuff even i don't know a lot",
    "start": "1546320",
    "end": "1553279"
  },
  {
    "text": "about that postgres14 includes numerous improvement of what information can be monitored",
    "start": "1553279",
    "end": "1560159"
  },
  {
    "text": "including the ability to track progress on copy using the pg stat progress copy so if",
    "start": "1560159",
    "end": "1565760"
  },
  {
    "text": "you run copy you can track the progress of that this release",
    "start": "1565760",
    "end": "1570960"
  },
  {
    "text": "lets you track wall activity from the pg stat wall view and inspect replication slot statistics",
    "start": "1570960",
    "end": "1578159"
  },
  {
    "text": "from the pg stat replication slot so if you have replication or and if you have replication you're",
    "start": "1578159",
    "end": "1586080"
  },
  {
    "text": "probably maintaining your wall uh the right headlock and you you're monitoring your wall so this is",
    "start": "1586080",
    "end": "1592640"
  },
  {
    "text": "very very critical to see how how large your wall is and and how how is it affecting your",
    "start": "1592640",
    "end": "1599840"
  },
  {
    "text": "bandwidth the streaming whether it depends really on whether you're still using a streaming or logical replication",
    "start": "1599840",
    "end": "1606159"
  },
  {
    "text": "but monitoring wall is something you might want to do as a dba or here we're an",
    "start": "1606159",
    "end": "1611679"
  },
  {
    "text": "administrator if you're a back-end developer you might not worry about that",
    "start": "1611679",
    "end": "1616960"
  },
  {
    "text": "stuff but it's good it's not it's nice to know it's nice to know this information it doesn't hurt",
    "start": "1616960",
    "end": "1623360"
  },
  {
    "text": "right if you're interested in database and how they work just look at this stuff and you appreciate the work that the",
    "start": "1623360",
    "end": "1631520"
  },
  {
    "text": "elite people are doing and building this stuff for us and we just blindly do a docker run",
    "start": "1631520",
    "end": "1640320"
  },
  {
    "text": "and we don't know how things work me myself included",
    "start": "1640320",
    "end": "1645520"
  },
  {
    "text": "there are several new parameters i try i try to understand there's just a lot of stuff you can't",
    "start": "1645520",
    "end": "1651120"
  },
  {
    "text": "possibly understand everything i try there are several new parameters in postgres14 to help",
    "start": "1651120",
    "end": "1658480"
  },
  {
    "text": "manage connections these include idle session timeout",
    "start": "1658480",
    "end": "1665440"
  },
  {
    "text": "so now if you have connections and and and uh if you have like tcp",
    "start": "1665760",
    "end": "1671600"
  },
  {
    "text": "connections to your postgres database and these are idle your backend let's say you have pooling",
    "start": "1671600",
    "end": "1677520"
  },
  {
    "text": "and the the pool has not been visited for a long time you execute something",
    "start": "1677520",
    "end": "1682720"
  },
  {
    "text": "for for a while and then it stayed idle you can now specify an idle session timer okay if nobody",
    "start": "1682720",
    "end": "1690640"
  },
  {
    "text": "is actually doing anything kill that session skill that tcp",
    "start": "1690640",
    "end": "1697360"
  },
  {
    "text": "connection so we have lower tc number of tcp connections so we can essentially have a little bit",
    "start": "1697360",
    "end": "1704640"
  },
  {
    "text": "more memory and our cpu doesn't have to worry about this additional connections that are",
    "start": "1704640",
    "end": "1710399"
  },
  {
    "text": "idle here's another interesting parameter it's called client connection check interval",
    "start": "1710399",
    "end": "1718240"
  },
  {
    "text": "and that lets postgres cancel long-running queries if the client disconnects so i mean let's let's say you're back",
    "start": "1718240",
    "end": "1725520"
  },
  {
    "text": "and execute a query and that query is taking a long time second sweet ass time",
    "start": "1725520",
    "end": "1731360"
  },
  {
    "text": "joining stuff i don't know par doing all this stuff and",
    "start": "1731360",
    "end": "1736640"
  },
  {
    "text": "maybe it's doing full table scan so it's it's a slow for some reason and your client",
    "start": "1736640",
    "end": "1743039"
  },
  {
    "text": "disconnects and it's expecting to return a result right after after the long query",
    "start": "1743039",
    "end": "1750080"
  },
  {
    "text": "security you need to return the result however this particular scenario is absolutely",
    "start": "1750080",
    "end": "1755520"
  },
  {
    "text": "useless because postcards will will have taken all that time to fetch their rows consume all the cpu",
    "start": "1755520",
    "end": "1763440"
  },
  {
    "text": "memory only to discover that the connection has been closed while it was",
    "start": "1763440",
    "end": "1771760"
  },
  {
    "text": "after the fact the executive because it doesn't know right once the query has been executed the",
    "start": "1771760",
    "end": "1778320"
  },
  {
    "text": "socket stays right in the in the postgres uh",
    "start": "1778320",
    "end": "1784080"
  },
  {
    "text": "side of things right and the postgres goes on and execute the query on another",
    "start": "1784080",
    "end": "1789279"
  },
  {
    "text": "process right and then once it tries to compose the result everything is ready",
    "start": "1789279",
    "end": "1794799"
  },
  {
    "text": "it tries to push it to the socket it pulls the socket and discover the socket is actually",
    "start": "1794799",
    "end": "1800240"
  },
  {
    "text": "closed and at that point time is actually just it's too late",
    "start": "1800240",
    "end": "1805840"
  },
  {
    "text": "this particular parameter parameter which is client connection check interval allows postgres to periodically check",
    "start": "1805840",
    "end": "1812960"
  },
  {
    "text": "the socket even if the connection is running right so yeah there's an additional overhead to check the po to",
    "start": "1812960",
    "end": "1819840"
  },
  {
    "text": "pull the socket and there's a little bit more details whether you're using unix or windows",
    "start": "1819840",
    "end": "1825840"
  },
  {
    "text": "it depends whether the it is supported or not i don't know the details but it needs it",
    "start": "1825840",
    "end": "1832480"
  },
  {
    "text": "to pull the socket every now and then right so if you if you just started and",
    "start": "1832480",
    "end": "1840799"
  },
  {
    "text": "you if the client immediately disconnects postgres can pull this socket okay after every 100",
    "start": "1840799",
    "end": "1848320"
  },
  {
    "text": "millisecond let's pull and if the connection is closed let's let's just",
    "start": "1848320",
    "end": "1853840"
  },
  {
    "text": "kill the query let's not let's not go ahead and execute the whole query right so if you disable this i think the value",
    "start": "1853840",
    "end": "1861120"
  },
  {
    "text": "of zero means the old behavior which is go ahead and execute the whole query until we interact with the socket",
    "start": "1861120",
    "end": "1869519"
  },
  {
    "text": "and at that time we basically we we kill the socket the re-index",
    "start": "1869519",
    "end": "1876399"
  },
  {
    "text": "command can now process all of the child indexes of a partition",
    "start": "1876399",
    "end": "1882000"
  },
  {
    "text": "table and postgres 14 as pg am check utility to help check for",
    "start": "1882000",
    "end": "1888399"
  },
  {
    "text": "data corruption okay that's nice here's the thing i didn't know that i thought reindex when you re-index",
    "start": "1888399",
    "end": "1894559"
  },
  {
    "text": "um the the partition the the table itself that",
    "start": "1894559",
    "end": "1900960"
  },
  {
    "text": "is the the pattern table i kind of assumed that all the partitions are gonna be",
    "start": "1900960",
    "end": "1907279"
  },
  {
    "text": "re-indexed apparently this is not true so if you just thought that",
    "start": "1907279",
    "end": "1915518"
  },
  {
    "text": "maybe you have to have posgus 14 or if you're using post usd and you're running re-index on your parent",
    "start": "1915679",
    "end": "1924080"
  },
  {
    "text": "table thinking that all the partitions will all auto magically get re-indexed apparently",
    "start": "1924080",
    "end": "1929760"
  },
  {
    "text": "that is not true who knew okay that's a new thing to me",
    "start": "1929760",
    "end": "1935840"
  },
  {
    "text": "so posgus14 fixes that to me it's a bug right not really a feature pulse chris",
    "start": "1935840",
    "end": "1942320"
  },
  {
    "text": "the bug if i part if i re-index the parent i i expect everything to get index in the children right it's",
    "start": "1942320",
    "end": "1948799"
  },
  {
    "text": "just by design again people might disagree with that",
    "start": "1948799",
    "end": "1953840"
  },
  {
    "start": "1950000",
    "end": "2147000"
  },
  {
    "text": "replication and recovery okay what do we add replication recovery",
    "start": "1953840",
    "end": "1959200"
  },
  {
    "text": "postgres14 adds numerous performance benefits for logical replication so this kind of",
    "start": "1959200",
    "end": "1965519"
  },
  {
    "text": "not not streaming where we stream the binary content of the wall we stream the logical wall",
    "start": "1965519",
    "end": "1974360"
  },
  {
    "text": "representation here okay so it's lighter weight i believe and it's compatible with what",
    "start": "1974360",
    "end": "1981360"
  },
  {
    "text": "all the releases do so you can like logically replicate postgres 14",
    "start": "1981360",
    "end": "1987600"
  },
  {
    "text": "or 10 to pause 14 because we're dealing with logical representation that",
    "start": "1987600",
    "end": "1994080"
  },
  {
    "text": "usually they they maintain compatibility at that level at the logical level while the binary state that always",
    "start": "1994080",
    "end": "2001360"
  },
  {
    "text": "change you don't you cannot guarantee right postgres version always changes the binary representation",
    "start": "2001360",
    "end": "2008240"
  },
  {
    "text": "that's why if you're using docker and you backed up a volume of postgres 13 and you try to",
    "start": "2008240",
    "end": "2015440"
  },
  {
    "text": "sneak in that volume and you spun up postgres 14 and you shove it that volume",
    "start": "2015440",
    "end": "2023600"
  },
  {
    "text": "of opposed goods 13 data it's gonna yell at you it's like what the heck are you doing that's a completely different files so",
    "start": "2023600",
    "end": "2031200"
  },
  {
    "text": "it's going to freak out right i tried that with with 12 and 10 i believe and i got yelled at",
    "start": "2031200",
    "end": "2038399"
  },
  {
    "text": "so i expect to get yelled at with 13 and 14 too including the ability to stream in",
    "start": "2038399",
    "end": "2044799"
  },
  {
    "text": "progress transaction to subscriber instead of waiting for them to to be completed very very powerful stuff",
    "start": "2044799",
    "end": "2053280"
  },
  {
    "text": "right as the transactions are in progress you're streaming and there you can you can see this",
    "start": "2053280",
    "end": "2058878"
  },
  {
    "text": "you can see this as both pros and cons right because you you might if you roll back the transaction all of",
    "start": "2058879",
    "end": "2064638"
  },
  {
    "text": "a sudden you just streamed junk to the to the to the standby and you wasted the bandwidth",
    "start": "2064639",
    "end": "2070878"
  },
  {
    "text": "just so that it rolled back but let's be optimistic a little bit and be",
    "start": "2070879",
    "end": "2078079"
  },
  {
    "text": "a little bit optimistic and think that things will succeed for a minute that is good stuff because",
    "start": "2078079",
    "end": "2084720"
  },
  {
    "text": "if you stream on progress then synchronous commits right",
    "start": "2084720",
    "end": "2091679"
  },
  {
    "text": "synchronous replication are extremely fast because boom just like that i'm not going to",
    "start": "2091679",
    "end": "2097839"
  },
  {
    "text": "wait for the whole wall to get filled and just shove that wall down the network throat",
    "start": "2097839",
    "end": "2103520"
  },
  {
    "text": "right it's much faster the alter service encryption makes it easier to add and remove the",
    "start": "2103520",
    "end": "2110560"
  },
  {
    "text": "publication using the add drop application syntax okay there's better syntax i love it i love it there",
    "start": "2110560",
    "end": "2117200"
  },
  {
    "text": "are performance improvement in postgres 14 to how postgres starts up when in a crash recovery",
    "start": "2117200",
    "end": "2125920"
  },
  {
    "text": "how far you sleep guys it's a little bit late for me i'm a dad now right so i sleep at at",
    "start": "2125920",
    "end": "2132400"
  },
  {
    "text": "nine and there's a dog barking oh my god bugs day",
    "start": "2132400",
    "end": "2137680"
  },
  {
    "text": "let me finish this video and you can now use pg rewind on a postgres instance",
    "start": "2137680",
    "end": "2144480"
  },
  {
    "text": "that is in the standby mode that's good okay all right final thing we're almost done guys if you're still",
    "start": "2144480",
    "end": "2152560"
  },
  {
    "start": "2147000",
    "end": "2333000"
  },
  {
    "text": "watching i really need to give you a kiss because you are a badass give me a like that's okay",
    "start": "2152560",
    "end": "2160400"
  },
  {
    "text": "i was still watching until security you reached the end this is a long video",
    "start": "2160400",
    "end": "2165440"
  },
  {
    "text": "you powered through my friends security postgres14 has the ability to",
    "start": "2165440",
    "end": "2172240"
  },
  {
    "text": "give user universal read-only and right-only privileges",
    "start": "2172240",
    "end": "2177680"
  },
  {
    "text": "boy i needed this you have no idea how much i wanted to kind of i read a master",
    "start": "2177680",
    "end": "2185680"
  },
  {
    "text": "read-only role it's like i don't care this user is read only he's going to read every",
    "start": "2185680",
    "end": "2191200"
  },
  {
    "text": "is only supposed to read i want to create a rest url route",
    "start": "2191200",
    "end": "2198720"
  },
  {
    "text": "that this this route is only going to read stuff so i'm going",
    "start": "2198720",
    "end": "2204000"
  },
  {
    "text": "to create a user with read privileges right so now i have to create a user and i've created a role",
    "start": "2204000",
    "end": "2210320"
  },
  {
    "text": "and read only role for every single table that is there oh very hard right it's just",
    "start": "2210320",
    "end": "2217280"
  },
  {
    "text": "it's just complicating this way hey this guy's a read-only it's getting universal read-only or",
    "start": "2217280",
    "end": "2222400"
  },
  {
    "text": "universal right only why would you have a right only that doesn't make any sense",
    "start": "2222400",
    "end": "2227920"
  },
  {
    "text": "you need to read to write that doesn't make any sense i don't know who requested right only i can't think",
    "start": "2227920",
    "end": "2233280"
  },
  {
    "text": "of a single use case where all you only write right logs i don't know",
    "start": "2233280",
    "end": "2241520"
  },
  {
    "text": "oh no well for security reason hey you are allowed to append to this thing but",
    "start": "2241520",
    "end": "2246880"
  },
  {
    "text": "you can't read it well maybe this is actually not a bad thing right hey you are a logger you just log",
    "start": "2246880",
    "end": "2253760"
  },
  {
    "text": "stuff you're not allowed to read what you logged or you're not allowed to read anything but most of what a query is actually",
    "start": "2253760",
    "end": "2259760"
  },
  {
    "text": "like a as a and a select or an insert into select that that won't work in that case",
    "start": "2259760",
    "end": "2265200"
  },
  {
    "text": "but yeah you get my idea so pg read all data bg write all data that's really good",
    "start": "2265200",
    "end": "2272480"
  },
  {
    "text": "stuff this release also defaults to using scramshaw 256 for password management on use",
    "start": "2272480",
    "end": "2278240"
  },
  {
    "text": "possible sentences so this is the new default now postgres scram sha 256",
    "start": "2278240",
    "end": "2283760"
  },
  {
    "text": "client search parameter in pghba conf must now use either of the values verify",
    "start": "2283760",
    "end": "2289920"
  },
  {
    "text": "ca or verify fold so better verification better client of better password management",
    "start": "2289920",
    "end": "2296000"
  },
  {
    "text": "all right guys all right guys so it is postcards 14 seems like a",
    "start": "2296000",
    "end": "2302960"
  },
  {
    "text": "very exciting performance release especially when you use like replication",
    "start": "2302960",
    "end": "2309599"
  },
  {
    "text": "right indexes admin stuff vacuum all of this stuff uh it looks like a",
    "start": "2309599",
    "end": "2316240"
  },
  {
    "text": "very performance release there's a little bit of features when you have the data type like json uh manipulation stuff like that but",
    "start": "2316240",
    "end": "2324000"
  },
  {
    "text": "overall i kind of like it i'm gonna start using him these features i believe alright guys i'm gonna see you in the",
    "start": "2324000",
    "end": "2330079"
  },
  {
    "text": "next one you guys awesome goodbye",
    "start": "2330079",
    "end": "2334319"
  }
]