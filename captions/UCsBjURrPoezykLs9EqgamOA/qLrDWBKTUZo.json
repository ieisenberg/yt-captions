[
  {
    "text": "security is a critical concern for any",
    "start": "530",
    "end": "3240"
  },
  {
    "text": "web application a secure app must",
    "start": "3240",
    "end": "5580"
  },
  {
    "text": "prevent unauthorized database operations",
    "start": "5580",
    "end": "7950"
  },
  {
    "text": "as well as validate the integrity of",
    "start": "7950",
    "end": "10260"
  },
  {
    "text": "incoming data firebase allows you to",
    "start": "10260",
    "end": "13110"
  },
  {
    "text": "define database security logic and a",
    "start": "13110",
    "end": "16170"
  },
  {
    "text": "JSON file that corresponds to the",
    "start": "16170",
    "end": "18570"
  },
  {
    "text": "structure of your database the no sequel",
    "start": "18570",
    "end": "21330"
  },
  {
    "text": "database is essentially just a series of",
    "start": "21330",
    "end": "23519"
  },
  {
    "text": "nodes and each node can have its own",
    "start": "23519",
    "end": "26640"
  },
  {
    "text": "validation and security rules for",
    "start": "26640",
    "end": "29519"
  },
  {
    "text": "example you might have some data that's",
    "start": "29519",
    "end": "31349"
  },
  {
    "text": "accessible to everybody that visits the",
    "start": "31349",
    "end": "33180"
  },
  {
    "text": "site or you might have some data that",
    "start": "33180",
    "end": "35670"
  },
  {
    "text": "should only be accessed by authenticated",
    "start": "35670",
    "end": "38070"
  },
  {
    "text": "users or other data that's only",
    "start": "38070",
    "end": "40440"
  },
  {
    "text": "accessible to the user that created it",
    "start": "40440",
    "end": "42210"
  },
  {
    "text": "and this lesson I'm going to go through",
    "start": "42210",
    "end": "43860"
  },
  {
    "text": "all these different scenarios and show",
    "start": "43860",
    "end": "45539"
  },
  {
    "text": "you how to implement these or Squier",
    "start": "45539",
    "end": "47039"
  },
  {
    "text": "based database rules you can define",
    "start": "47039",
    "end": "50160"
  },
  {
    "text": "firebase rules directly from your",
    "start": "50160",
    "end": "51870"
  },
  {
    "text": "angular project or from the firebase",
    "start": "51870",
    "end": "54030"
  },
  {
    "text": "clone form personally I prefer using the",
    "start": "54030",
    "end": "56219"
  },
  {
    "text": "firebase console because you can send",
    "start": "56219",
    "end": "58020"
  },
  {
    "text": "test requests to make sure that your",
    "start": "58020",
    "end": "60449"
  },
  {
    "text": "rules are working properly there are",
    "start": "60449",
    "end": "63840"
  },
  {
    "text": "three types of rules you can set read",
    "start": "63840",
    "end": "65909"
  },
  {
    "text": "write and validate read controls access",
    "start": "65909",
    "end": "68880"
  },
  {
    "text": "to data write controls the ability to",
    "start": "68880",
    "end": "72119"
  },
  {
    "text": "create edit or delete data and validate",
    "start": "72119",
    "end": "76259"
  },
  {
    "text": "control format of data you can use any",
    "start": "76259",
    "end": "79409"
  },
  {
    "text": "combination of these rules together or",
    "start": "79409",
    "end": "81060"
  },
  {
    "text": "none of them at all there's also a",
    "start": "81060",
    "end": "83909"
  },
  {
    "text": "series of variables that give you access",
    "start": "83909",
    "end": "85409"
  },
  {
    "text": "to firebase resources auth gives you",
    "start": "85409",
    "end": "89340"
  },
  {
    "text": "access to the user authentication state",
    "start": "89340",
    "end": "91500"
  },
  {
    "text": "roof gives you access to the root note",
    "start": "91500",
    "end": "94049"
  },
  {
    "text": "of the database data gives you access to",
    "start": "94049",
    "end": "97710"
  },
  {
    "text": "the data as it appears before the",
    "start": "97710",
    "end": "100049"
  },
  {
    "text": "operation takes place new data shows you",
    "start": "100049",
    "end": "102960"
  },
  {
    "text": "how the data will appear after an",
    "start": "102960",
    "end": "104640"
  },
  {
    "text": "operation takes place now gives you the",
    "start": "104640",
    "end": "107659"
  },
  {
    "text": "UNIX timestamp for the current time",
    "start": "107659",
    "end": "110800"
  },
  {
    "text": "there is also a wild card variable that",
    "start": "110800",
    "end": "113020"
  },
  {
    "text": "you can use to reference any child key",
    "start": "113020",
    "end": "115150"
  },
  {
    "text": "throughout the database now let's run",
    "start": "115150",
    "end": "118390"
  },
  {
    "text": "through some of the most common security",
    "start": "118390",
    "end": "119620"
  },
  {
    "text": "scenarios Google might run into first we",
    "start": "119620",
    "end": "123250"
  },
  {
    "text": "can just disable all security so anybody",
    "start": "123250",
    "end": "125110"
  },
  {
    "text": "can read or write to the database we can",
    "start": "125110",
    "end": "129369"
  },
  {
    "text": "put everything on lockdown to where",
    "start": "129369",
    "end": "131590"
  },
  {
    "text": "nobody can redirect to the database we",
    "start": "131590",
    "end": "135790"
  },
  {
    "text": "can limit access to only authenticated",
    "start": "135790",
    "end": "138070"
  },
  {
    "text": "users who are currently logged in we can",
    "start": "138070",
    "end": "145060"
  },
  {
    "text": "also limit users access to only content",
    "start": "145060",
    "end": "148240"
  },
  {
    "text": "that they created we do this by using",
    "start": "148240",
    "end": "150640"
  },
  {
    "text": "the wild card variable that we talked",
    "start": "150640",
    "end": "153100"
  },
  {
    "text": "about earlier in this case we have some",
    "start": "153100",
    "end": "155770"
  },
  {
    "text": "data as nested under a user ID so we can",
    "start": "155770",
    "end": "158650"
  },
  {
    "text": "then reference that user ID to make sure",
    "start": "158650",
    "end": "160570"
  },
  {
    "text": "it matches the current auth ID of the",
    "start": "160570",
    "end": "162970"
  },
  {
    "text": "logged in user in this example we're",
    "start": "162970",
    "end": "167740"
  },
  {
    "text": "only going to allow users who have been",
    "start": "167740",
    "end": "169780"
  },
  {
    "text": "flagged as moderators to write data to",
    "start": "169780",
    "end": "172030"
  },
  {
    "text": "the database we do this by first setting",
    "start": "172030",
    "end": "175180"
  },
  {
    "text": "a moderator variable to true somewhere",
    "start": "175180",
    "end": "177700"
  },
  {
    "text": "else in the database then we use the",
    "start": "177700",
    "end": "180340"
  },
  {
    "text": "root variable to traverse to wherever",
    "start": "180340",
    "end": "182890"
  },
  {
    "text": "that point is you can also use firebase",
    "start": "182890",
    "end": "187989"
  },
  {
    "text": "rules to validate the integrity or",
    "start": "187989",
    "end": "190150"
  },
  {
    "text": "format of incoming data in this case I'm",
    "start": "190150",
    "end": "193540"
  },
  {
    "text": "validating that some input is a string",
    "start": "193540",
    "end": "195510"
  },
  {
    "text": "and that it's at least one character",
    "start": "195510",
    "end": "198760"
  },
  {
    "text": "long but less than or equal to 140",
    "start": "198760",
    "end": "202120"
  },
  {
    "text": "characters",
    "start": "202120",
    "end": "202630"
  },
  {
    "text": "[Music]",
    "start": "202630",
    "end": "205840"
  },
  {
    "text": "the now variable allows you to validate",
    "start": "205840",
    "end": "208489"
  },
  {
    "text": "whether some data calls within a certain",
    "start": "208489",
    "end": "210439"
  },
  {
    "text": "time frame in this case we're checking",
    "start": "210439",
    "end": "212870"
  },
  {
    "text": "to make sure the post doesn't have a",
    "start": "212870",
    "end": "214609"
  },
  {
    "text": "timestamp that fall at a future time you",
    "start": "214609",
    "end": "221209"
  },
  {
    "text": "can validate that new data has certain",
    "start": "221209",
    "end": "223010"
  },
  {
    "text": "child attributes by calling the get",
    "start": "223010",
    "end": "225200"
  },
  {
    "text": "children function and then passing it an",
    "start": "225200",
    "end": "227510"
  },
  {
    "text": "array of the attributes that you want to",
    "start": "227510",
    "end": "229489"
  },
  {
    "text": "check",
    "start": "229489",
    "end": "231579"
  },
  {
    "text": "lastly you can validate the existence or",
    "start": "231579",
    "end": "234769"
  },
  {
    "text": "the non-existence of data before",
    "start": "234769",
    "end": "237049"
  },
  {
    "text": "performing some kind of operation this",
    "start": "237049",
    "end": "239780"
  },
  {
    "text": "is useful because it allows you to",
    "start": "239780",
    "end": "241069"
  },
  {
    "text": "control whether or not a user can create",
    "start": "241069",
    "end": "243260"
  },
  {
    "text": "update or delete some data a common",
    "start": "243260",
    "end": "247549"
  },
  {
    "text": "pitfall with firebase rules is that once",
    "start": "247549",
    "end": "249919"
  },
  {
    "text": "you grant access to a resource",
    "start": "249919",
    "end": "251659"
  },
  {
    "text": "it can't be revoked somewhere further",
    "start": "251659",
    "end": "253790"
  },
  {
    "text": "down the tree so you always want to err",
    "start": "253790",
    "end": "256549"
  },
  {
    "text": "on the side of caution and only grant",
    "start": "256549",
    "end": "258739"
  },
  {
    "text": "access when specific credit conditions",
    "start": "258739",
    "end": "260930"
  },
  {
    "text": "have been met so in this example you can",
    "start": "260930",
    "end": "264740"
  },
  {
    "text": "see that we granted access initially but",
    "start": "264740",
    "end": "267289"
  },
  {
    "text": "then try to deny access later in the",
    "start": "267289",
    "end": "269990"
  },
  {
    "text": "tree to only authenticated users when we",
    "start": "269990",
    "end": "273259"
  },
  {
    "text": "run a test to this rule we see that it",
    "start": "273259",
    "end": "275960"
  },
  {
    "text": "fails NIT grant access to the user that",
    "start": "275960",
    "end": "278509"
  },
  {
    "text": "should not have access so when we",
    "start": "278509",
    "end": "280970"
  },
  {
    "text": "reverse this around and deny access",
    "start": "280970",
    "end": "283250"
  },
  {
    "text": "initially we can see that the rule then",
    "start": "283250",
    "end": "286009"
  },
  {
    "text": "does work we send the corresponding",
    "start": "286009",
    "end": "288080"
  },
  {
    "text": "request",
    "start": "288080",
    "end": "290470"
  },
  {
    "text": "that's it for database rules thanks for",
    "start": "297490",
    "end": "300439"
  },
  {
    "text": "watching",
    "start": "300439",
    "end": "301610"
  },
  {
    "text": "[Music]",
    "start": "301610",
    "end": "308508"
  }
]