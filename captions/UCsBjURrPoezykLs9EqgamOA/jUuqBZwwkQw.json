[
  {
    "text": "Lua a fast multi-paradigm scripting",
    "start": "120",
    "end": "2560"
  },
  {
    "text": "language famous for being so underrated",
    "start": "2560",
    "end": "4799"
  },
  {
    "text": "imagine a language that's easier to",
    "start": "4799",
    "end": "6480"
  },
  {
    "text": "learn than python while also being",
    "start": "6480",
    "end": "8200"
  },
  {
    "text": "faster and more portable than python Lua",
    "start": "8200",
    "end": "10519"
  },
  {
    "text": "was named after the moon when it was",
    "start": "10519",
    "end": "11840"
  },
  {
    "text": "designed by a team of computer",
    "start": "11840",
    "end": "13280"
  },
  {
    "text": "scientists in Brazil in 1993 it's",
    "start": "13280",
    "end": "15519"
  },
  {
    "text": "lightweight and extremely fast because",
    "start": "15519",
    "end": "17320"
  },
  {
    "text": "its virtual machine Maps very closely to",
    "start": "17320",
    "end": "19240"
  },
  {
    "text": "see and when used with its Justin Time",
    "start": "19240",
    "end": "20960"
  },
  {
    "text": "compiler it's widely considered the",
    "start": "20960",
    "end": "22600"
  },
  {
    "text": "fastest scripting language in the world",
    "start": "22600",
    "end": "24199"
  },
  {
    "text": "this makes it ideal for embedding into",
    "start": "24199",
    "end": "26160"
  },
  {
    "text": "other applications like World of",
    "start": "26160",
    "end": "27760"
  },
  {
    "text": "Warcraft or Roblox for example where",
    "start": "27760",
    "end": "30000"
  },
  {
    "text": "users can write Lua to build their own",
    "start": "30000",
    "end": "31800"
  },
  {
    "text": "games and features because the language",
    "start": "31800",
    "end": "33480"
  },
  {
    "text": "is embedded into the base game it's easy",
    "start": "33480",
    "end": "35399"
  },
  {
    "text": "to learn because it has only 21 reserved",
    "start": "35399",
    "end": "37680"
  },
  {
    "text": "words and has only one data structuring",
    "start": "37680",
    "end": "39719"
  },
  {
    "text": "mechanism called a table that can",
    "start": "39719",
    "end": "41320"
  },
  {
    "text": "represent arrays dictionaries graphs",
    "start": "41320",
    "end": "43600"
  },
  {
    "text": "trees and more it also supports",
    "start": "43600",
    "end": "45399"
  },
  {
    "text": "collaborative multitasking with co-",
    "start": "45399",
    "end": "47079"
  },
  {
    "text": "routines its standard library is very",
    "start": "47079",
    "end": "48879"
  },
  {
    "text": "minimal but it does have a large",
    "start": "48879",
    "end": "50440"
  },
  {
    "text": "ecosystem of packages with the Lu Rock",
    "start": "50440",
    "end": "52680"
  },
  {
    "text": "package manager to get started install",
    "start": "52680",
    "end": "54760"
  },
  {
    "text": "it then create a file ending in Lua",
    "start": "54760",
    "end": "57000"
  },
  {
    "text": "declare a variable by providing a name",
    "start": "57000",
    "end": "59079"
  },
  {
    "text": "and value by default variables are",
    "start": "59079",
    "end": "61120"
  },
  {
    "text": "Global but make them local with the",
    "start": "61120",
    "end": "62680"
  },
  {
    "text": "local keyword it's a dynamic language so",
    "start": "62680",
    "end": "64878"
  },
  {
    "text": "no type annotations are required we can",
    "start": "64879",
    "end": "66680"
  },
  {
    "text": "then use print to Output the value to",
    "start": "66680",
    "end": "68479"
  },
  {
    "text": "the standard output there are no classes",
    "start": "68479",
    "end": "70200"
  },
  {
    "text": "in Lua but anything you can imagine can",
    "start": "70200",
    "end": "72280"
  },
  {
    "text": "be done with functions and tables a",
    "start": "72280",
    "end": "74320"
  },
  {
    "text": "function is declared with the function",
    "start": "74320",
    "end": "75759"
  },
  {
    "text": "keyword then closed with the nend",
    "start": "75759",
    "end": "77240"
  },
  {
    "text": "keyword functions are first class",
    "start": "77240",
    "end": "78840"
  },
  {
    "text": "objects which means they can be passed",
    "start": "78840",
    "end": "80320"
  },
  {
    "text": "around to other functions to support",
    "start": "80320",
    "end": "82119"
  },
  {
    "text": "functional programming patterns now to",
    "start": "82119",
    "end": "83960"
  },
  {
    "text": "structured data you create tables with",
    "start": "83960",
    "end": "85920"
  },
  {
    "text": "braces a table is actually an associate",
    "start": "85920",
    "end": "88240"
  },
  {
    "text": "of array which means the index in the",
    "start": "88240",
    "end": "89960"
  },
  {
    "text": "the array can be replaced with different",
    "start": "89960",
    "end": "91479"
  },
  {
    "text": "values by default it uses integer values",
    "start": "91479",
    "end": "94040"
  },
  {
    "text": "and the craziest thing about this",
    "start": "94040",
    "end": "95240"
  },
  {
    "text": "language is that it starts the index at",
    "start": "95240",
    "end": "96960"
  },
  {
    "text": "one instead of zero like most languages",
    "start": "96960",
    "end": "99399"
  },
  {
    "text": "that gives us a conventional array but",
    "start": "99399",
    "end": "100960"
  },
  {
    "text": "we can also easily create a dictionary",
    "start": "100960",
    "end": "102920"
  },
  {
    "text": "by giving the keys a string value now we",
    "start": "102920",
    "end": "104960"
  },
  {
    "text": "can use four to Loop over every key",
    "start": "104960",
    "end": "106960"
  },
  {
    "text": "value pair in the table the language is",
    "start": "106960",
    "end": "108880"
  },
  {
    "text": "single threaded but we can use co-",
    "start": "108880",
    "end": "110399"
  },
  {
    "text": "routines to pause and resume a function",
    "start": "110399",
    "end": "112759"
  },
  {
    "text": "create a co- routine then use yield to",
    "start": "112759",
    "end": "114960"
  },
  {
    "text": "suspend its execution now somewhere else",
    "start": "114960",
    "end": "116960"
  },
  {
    "text": "in the code use co-routine resume to",
    "start": "116960",
    "end": "119039"
  },
  {
    "text": "continue execution until you get to the",
    "start": "119039",
    "end": "121000"
  },
  {
    "text": "return statement now if you're a c",
    "start": "121000",
    "end": "122520"
  },
  {
    "text": "programmer you'll be happy to know that",
    "start": "122520",
    "end": "124039"
  },
  {
    "text": "Lua has a very simple C API it allows us",
    "start": "124039",
    "end": "126920"
  },
  {
    "text": "to run Lua code inside a c program or",
    "start": "126920",
    "end": "129360"
  },
  {
    "text": "vice versa run C code from a Lua program",
    "start": "129360",
    "end": "131959"
  },
  {
    "text": "now to execute your code open up the",
    "start": "131959",
    "end": "133560"
  },
  {
    "text": "terminal and run the Lua interpreter",
    "start": "133560",
    "end": "135640"
  },
  {
    "text": "this is been Lua in 100 seconds hit the",
    "start": "135640",
    "end": "137920"
  },
  {
    "text": "like button and subscribe if you want to",
    "start": "137920",
    "end": "139360"
  },
  {
    "text": "see more short videos like this thanks",
    "start": "139360",
    "end": "141000"
  },
  {
    "text": "for watching and I will see you in the",
    "start": "141000",
    "end": "142959"
  },
  {
    "text": "next one",
    "start": "142959",
    "end": "145959"
  }
]