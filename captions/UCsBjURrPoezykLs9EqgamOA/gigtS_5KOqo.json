[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "Grossberg it's great to learn because",
    "start": "30",
    "end": "4200"
  },
  {
    "text": "knowledge is power functions are the",
    "start": "4200",
    "end": "6390"
  },
  {
    "text": "backbone of JavaScript development yet",
    "start": "6390",
    "end": "8160"
  },
  {
    "text": "also one of the most difficult concepts",
    "start": "8160",
    "end": "9809"
  },
  {
    "text": "to master but once you understand",
    "start": "9809",
    "end": "11400"
  },
  {
    "text": "functions everything else in the",
    "start": "11400",
    "end": "12630"
  },
  {
    "text": "language becomes relatively easy we'll",
    "start": "12630",
    "end": "14460"
  },
  {
    "text": "start from the absolute basics then go",
    "start": "14460",
    "end": "16020"
  },
  {
    "text": "into practical examples of arrow",
    "start": "16020",
    "end": "17400"
  },
  {
    "text": "functions closures higher-order",
    "start": "17400",
    "end": "18869"
  },
  {
    "text": "functions recursion and we'll even talk",
    "start": "18869",
    "end": "21060"
  },
  {
    "text": "about some common best practices for",
    "start": "21060",
    "end": "22830"
  },
  {
    "text": "writing high-quality JavaScript code",
    "start": "22830",
    "end": "24330"
  },
  {
    "text": "welcome to episode 4 of the full course",
    "start": "24330",
    "end": "26460"
  },
  {
    "text": "JavaScript function if you're new here",
    "start": "26460",
    "end": "30240"
  },
  {
    "text": "like and subscribe and you can follow",
    "start": "30240",
    "end": "31710"
  },
  {
    "text": "the full free course on fire ship IO now",
    "start": "31710",
    "end": "34320"
  },
  {
    "text": "in order to understand a function let's",
    "start": "34320",
    "end": "36090"
  },
  {
    "text": "start by dissecting it and looking at",
    "start": "36090",
    "end": "37620"
  },
  {
    "text": "its anatomy what we're looking at here",
    "start": "37620",
    "end": "44100"
  },
  {
    "start": "43000",
    "end": "188000"
  },
  {
    "text": "is a function declaration also called a",
    "start": "44100",
    "end": "46079"
  },
  {
    "text": "function definition or statement it",
    "start": "46079",
    "end": "47969"
  },
  {
    "text": "starts with the function keyword then",
    "start": "47969",
    "end": "49530"
  },
  {
    "text": "you need to choose a name for it and you",
    "start": "49530",
    "end": "51180"
  },
  {
    "text": "should choose something that's readable",
    "start": "51180",
    "end": "52500"
  },
  {
    "text": "to other human beings because there's a",
    "start": "52500",
    "end": "54149"
  },
  {
    "text": "good saying there's only two hard things",
    "start": "54149",
    "end": "55829"
  },
  {
    "text": "in computer science cache and validation",
    "start": "55829",
    "end": "57930"
  },
  {
    "text": "naming things and off-by-one errors in",
    "start": "57930",
    "end": "60210"
  },
  {
    "text": "other words choosing the right name for",
    "start": "60210",
    "end": "61649"
  },
  {
    "text": "your function is almost as hard as",
    "start": "61649",
    "end": "63480"
  },
  {
    "text": "making a joke about programming but once",
    "start": "63480",
    "end": "65280"
  },
  {
    "text": "you decide on a name the next step is to",
    "start": "65280",
    "end": "67260"
  },
  {
    "text": "add parentheses and then add any",
    "start": "67260",
    "end": "68820"
  },
  {
    "text": "parameters or inputs to the function you",
    "start": "68820",
    "end": "71159"
  },
  {
    "text": "can think of a parameter as a variable",
    "start": "71159",
    "end": "73229"
  },
  {
    "text": "that this function lot access to when",
    "start": "73229",
    "end": "75030"
  },
  {
    "text": "it's called and then from there we have",
    "start": "75030",
    "end": "76560"
  },
  {
    "text": "curly braces and everything inside is",
    "start": "76560",
    "end": "78689"
  },
  {
    "text": "the function body and that's where you",
    "start": "78689",
    "end": "80490"
  },
  {
    "text": "define all your logic the function body",
    "start": "80490",
    "end": "82439"
  },
  {
    "text": "will typically do one of two things",
    "start": "82439",
    "end": "84060"
  },
  {
    "text": "it will either perform a task or return",
    "start": "84060",
    "end": "85979"
  },
  {
    "text": "a value or possibly both an example of a",
    "start": "85979",
    "end": "88799"
  },
  {
    "text": "function performing a task is a console",
    "start": "88799",
    "end": "90750"
  },
  {
    "text": "log and because there's no return",
    "start": "90750",
    "end": "92340"
  },
  {
    "text": "statement it will implicitly return",
    "start": "92340",
    "end": "94020"
  },
  {
    "text": "undefined but a function body might also",
    "start": "94020",
    "end": "96000"
  },
  {
    "text": "contain a return statement and that",
    "start": "96000",
    "end": "97710"
  },
  {
    "text": "allows us to take the value that was",
    "start": "97710",
    "end": "99240"
  },
  {
    "text": "calculated inside the function body and",
    "start": "99240",
    "end": "101189"
  },
  {
    "text": "set it as a variable now at this point",
    "start": "101189",
    "end": "103259"
  },
  {
    "text": "we've declared a function which",
    "start": "103259",
    "end": "104579"
  },
  {
    "text": "describes what the code will do but in",
    "start": "104579",
    "end": "106439"
  },
  {
    "text": "order to actually execute it we need to",
    "start": "106439",
    "end": "108390"
  },
  {
    "text": "call the function we do that by",
    "start": "108390",
    "end": "109979"
  },
  {
    "text": "referencing the function by its name and",
    "start": "109979",
    "end": "111600"
  },
  {
    "text": "then we pass in actual values as",
    "start": "111600",
    "end": "113460"
  },
  {
    "text": "arguments to the parameters so imagine",
    "start": "113460",
    "end": "115920"
  },
  {
    "text": "you get asked on an interview what is",
    "start": "115920",
    "end": "117240"
  },
  {
    "text": "the difference between a parameter and",
    "start": "117240",
    "end": "119070"
  },
  {
    "text": "an argument you might say something like",
    "start": "119070",
    "end": "120570"
  },
  {
    "text": "parameters are the variable inputs that",
    "start": "120570",
    "end": "122579"
  },
  {
    "text": "you use in the function definition while",
    "start": "122579",
    "end": "124590"
  },
  {
    "text": "arguments are the actual values or",
    "start": "124590",
    "end": "126390"
  },
  {
    "text": "expressions used when calling the",
    "start": "126390",
    "end": "127950"
  },
  {
    "text": "function so what we just looked at there",
    "start": "127950",
    "end": "129720"
  },
  {
    "text": "was a named function declaration but",
    "start": "129720",
    "end": "131970"
  },
  {
    "text": "there's also a thing called a function",
    "start": "131970",
    "end": "133770"
  },
  {
    "text": "rushon which basically means using a",
    "start": "133770",
    "end": "135660"
  },
  {
    "text": "function as a value let's go ahead and",
    "start": "135660",
    "end": "137730"
  },
  {
    "text": "refactor our declaration to an",
    "start": "137730",
    "end": "139380"
  },
  {
    "text": "expression we'll use the same function",
    "start": "139380",
    "end": "140760"
  },
  {
    "text": "name but instead set it as a variable",
    "start": "140760",
    "end": "142350"
  },
  {
    "text": "and then use an anonymous function which",
    "start": "142350",
    "end": "144990"
  },
  {
    "text": "is just a function without a name as the",
    "start": "144990",
    "end": "146910"
  },
  {
    "text": "value now when calling these functions",
    "start": "146910",
    "end": "148590"
  },
  {
    "text": "they will produce an identical result",
    "start": "148590",
    "end": "150090"
  },
  {
    "text": "and if you watch the previous video you",
    "start": "150090",
    "end": "151890"
  },
  {
    "text": "might know that the function declaration",
    "start": "151890",
    "end": "153600"
  },
  {
    "text": "is hoisted while the expression is not",
    "start": "153600",
    "end": "155550"
  },
  {
    "text": "the function declaration will always be",
    "start": "155550",
    "end": "157590"
  },
  {
    "text": "put at the top of the scope which means",
    "start": "157590",
    "end": "159660"
  },
  {
    "text": "you can make calls to the function even",
    "start": "159660",
    "end": "161280"
  },
  {
    "text": "if it's declared somewhere later in the",
    "start": "161280",
    "end": "162780"
  },
  {
    "text": "code but when you have an expression the",
    "start": "162780",
    "end": "164670"
  },
  {
    "text": "function doesn't actually get created",
    "start": "164670",
    "end": "166110"
  },
  {
    "text": "until that code is reached in the script",
    "start": "166110",
    "end": "167790"
  },
  {
    "text": "and that means you get an error if you",
    "start": "167790",
    "end": "169230"
  },
  {
    "text": "try to call it beforehand so now that",
    "start": "169230",
    "end": "171330"
  },
  {
    "text": "you know the difference between a",
    "start": "171330",
    "end": "172230"
  },
  {
    "text": "function declaration and expression",
    "start": "172230",
    "end": "174000"
  },
  {
    "text": "which one should you use well there's",
    "start": "174000",
    "end": "175920"
  },
  {
    "text": "actually no universal best practice here",
    "start": "175920",
    "end": "177570"
  },
  {
    "text": "but I think most people today would lean",
    "start": "177570",
    "end": "179370"
  },
  {
    "text": "towards function expressions because",
    "start": "179370",
    "end": "181110"
  },
  {
    "text": "they're not hoisted it makes it easier",
    "start": "181110",
    "end": "182640"
  },
  {
    "text": "to understand where they belong in the",
    "start": "182640",
    "end": "184230"
  },
  {
    "text": "context of an application and they're",
    "start": "184230",
    "end": "186120"
  },
  {
    "text": "less likely to pollute the global",
    "start": "186120",
    "end": "187560"
  },
  {
    "text": "namespace and speaking of that a cool",
    "start": "187560",
    "end": "189840"
  },
  {
    "start": "188000",
    "end": "221000"
  },
  {
    "text": "thing you can do is create an",
    "start": "189840",
    "end": "191190"
  },
  {
    "text": "immediately invoked function expression",
    "start": "191190",
    "end": "192990"
  },
  {
    "text": "by wrapping an anonymous function in",
    "start": "192990",
    "end": "194730"
  },
  {
    "text": "parentheses you can then call it",
    "start": "194730",
    "end": "196290"
  },
  {
    "text": "immediately by adding parentheses",
    "start": "196290",
    "end": "197490"
  },
  {
    "text": "afterwards but I think that looks goofy",
    "start": "197490",
    "end": "199860"
  },
  {
    "text": "because what we're talking about is the",
    "start": "199860",
    "end": "202170"
  },
  {
    "text": "whole invocation but we got these things",
    "start": "202170",
    "end": "204810"
  },
  {
    "text": "hanging outside of it looking sort of",
    "start": "204810",
    "end": "207150"
  },
  {
    "text": "like dog balls you know",
    "start": "207150",
    "end": "211280"
  },
  {
    "text": "what's important is the whole invocation",
    "start": "213630",
    "end": "216430"
  },
  {
    "text": "so I would put the parents around it",
    "start": "216430",
    "end": "219450"
  },
  {
    "text": "that's better I think so now let's go",
    "start": "219450",
    "end": "222640"
  },
  {
    "start": "221000",
    "end": "288000"
  },
  {
    "text": "ahead and switch gears and take a closer",
    "start": "222640",
    "end": "224260"
  },
  {
    "text": "look at parameters and arguments as you",
    "start": "224260",
    "end": "226570"
  },
  {
    "text": "can see here we have three parameters a",
    "start": "226570",
    "end": "228430"
  },
  {
    "text": "main aside and a drink and if we want to",
    "start": "228430",
    "end": "231010"
  },
  {
    "text": "log those out at runtime we can do",
    "start": "231010",
    "end": "233080"
  },
  {
    "text": "console log arguments which is a keyword",
    "start": "233080",
    "end": "234850"
  },
  {
    "text": "built into JavaScript this particular",
    "start": "234850",
    "end": "236920"
  },
  {
    "text": "function takes three positional",
    "start": "236920",
    "end": "238360"
  },
  {
    "text": "arguments and that means when you call",
    "start": "238360",
    "end": "240040"
  },
  {
    "text": "this function you need to pass in your",
    "start": "240040",
    "end": "241510"
  },
  {
    "text": "arguments in the right order",
    "start": "241510",
    "end": "242980"
  },
  {
    "text": "that's pretty manageable when you have",
    "start": "242980",
    "end": "244420"
  },
  {
    "text": "three arguments but imagine we had five",
    "start": "244420",
    "end": "246250"
  },
  {
    "text": "or ten arguments to a function things to",
    "start": "246250",
    "end": "248200"
  },
  {
    "text": "get out of hand very quickly but when",
    "start": "248200",
    "end": "250060"
  },
  {
    "text": "you run into a situation like that a",
    "start": "250060",
    "end": "251680"
  },
  {
    "text": "common solution is to use an object for",
    "start": "251680",
    "end": "253780"
  },
  {
    "text": "named parameters the make lunch function",
    "start": "253780",
    "end": "255970"
  },
  {
    "text": "only has one single argument but that",
    "start": "255970",
    "end": "258040"
  },
  {
    "text": "argument is an object that can contain",
    "start": "258040",
    "end": "259959"
  },
  {
    "text": "multiple values and that means we can D",
    "start": "259959",
    "end": "262120"
  },
  {
    "text": "structure the object or use it directly",
    "start": "262120",
    "end": "263919"
  },
  {
    "text": "inside the function body so with this",
    "start": "263919",
    "end": "265660"
  },
  {
    "text": "approach you don't have to worry about",
    "start": "265660",
    "end": "266890"
  },
  {
    "text": "the order of the arguments and also",
    "start": "266890",
    "end": "268930"
  },
  {
    "text": "makes it more flexible to extend your",
    "start": "268930",
    "end": "270520"
  },
  {
    "text": "code with non breaking changes in the",
    "start": "270520",
    "end": "272110"
  },
  {
    "text": "future",
    "start": "272110",
    "end": "272410"
  },
  {
    "text": "now one other trick that JavaScript has",
    "start": "272410",
    "end": "274570"
  },
  {
    "text": "up its sleeve is rest parameters in the",
    "start": "274570",
    "end": "276970"
  },
  {
    "text": "make dinner function we have a single",
    "start": "276970",
    "end": "278440"
  },
  {
    "text": "parameter but it's preceded by three",
    "start": "278440",
    "end": "280210"
  },
  {
    "text": "dots that allows us to call the function",
    "start": "280210",
    "end": "282160"
  },
  {
    "text": "with multiple positioned arguments and",
    "start": "282160",
    "end": "283660"
  },
  {
    "text": "then access them as an array inside the",
    "start": "283660",
    "end": "285640"
  },
  {
    "text": "function body now at this point we've",
    "start": "285640",
    "end": "288070"
  },
  {
    "start": "288000",
    "end": "392000"
  },
  {
    "text": "only been looking at the function",
    "start": "288070",
    "end": "289450"
  },
  {
    "text": "keyword but there's actually a more",
    "start": "289450",
    "end": "291070"
  },
  {
    "text": "compact and concise way to write your",
    "start": "291070",
    "end": "292690"
  },
  {
    "text": "functions and that's using the arrow",
    "start": "292690",
    "end": "294310"
  },
  {
    "text": "syntax let's go ahead and refactor one",
    "start": "294310",
    "end": "296890"
  },
  {
    "text": "of our earlier function expressions to",
    "start": "296890",
    "end": "298660"
  },
  {
    "text": "use the arrow syntax we start with a",
    "start": "298660",
    "end": "300880"
  },
  {
    "text": "variable to provide a name then we have",
    "start": "300880",
    "end": "302890"
  },
  {
    "text": "parentheses with the parameters to the",
    "start": "302890",
    "end": "304810"
  },
  {
    "text": "function and then we have an arrow that",
    "start": "304810",
    "end": "306729"
  },
  {
    "text": "points to the function body a cool thing",
    "start": "306729",
    "end": "308950"
  },
  {
    "text": "about the syntax is that if you omit",
    "start": "308950",
    "end": "310360"
  },
  {
    "text": "curly braces then it will implicitly",
    "start": "310360",
    "end": "312340"
  },
  {
    "text": "return that value from the function and",
    "start": "312340",
    "end": "314169"
  },
  {
    "text": "that means that three lines of code now",
    "start": "314169",
    "end": "315790"
  },
  {
    "text": "become one now if you have additional",
    "start": "315790",
    "end": "317710"
  },
  {
    "text": "work to do inside the function you can",
    "start": "317710",
    "end": "319300"
  },
  {
    "text": "still add brackets in which case you",
    "start": "319300",
    "end": "321010"
  },
  {
    "text": "would still need to add a return",
    "start": "321010",
    "end": "322000"
  },
  {
    "text": "statement to return a value from it but",
    "start": "322000",
    "end": "324610"
  },
  {
    "text": "arrow functions are more than just",
    "start": "324610",
    "end": "325660"
  },
  {
    "text": "syntactic sugar there are a couple of",
    "start": "325660",
    "end": "327760"
  },
  {
    "text": "other characteristics that you should",
    "start": "327760",
    "end": "329140"
  },
  {
    "text": "know first of all they will always be",
    "start": "329140",
    "end": "331060"
  },
  {
    "text": "expressions and that means you can't",
    "start": "331060",
    "end": "332530"
  },
  {
    "text": "simply declare an arrow function in your",
    "start": "332530",
    "end": "333940"
  },
  {
    "text": "code like this and the other big thing",
    "start": "333940",
    "end": "336160"
  },
  {
    "text": "is that they don't have their own this",
    "start": "336160",
    "end": "337660"
  },
  {
    "text": "object now we're not going to get into",
    "start": "337660",
    "end": "339370"
  },
  {
    "text": "this in this video because there'll be",
    "start": "339370",
    "end": "341320"
  },
  {
    "text": "an entire video dedicated to object",
    "start": "341320",
    "end": "343180"
  },
  {
    "text": "oriented JavaScript that covers this and",
    "start": "343180",
    "end": "344770"
  },
  {
    "text": "much more",
    "start": "344770",
    "end": "345890"
  },
  {
    "text": "but here's a little history that you",
    "start": "345890",
    "end": "347240"
  },
  {
    "text": "should know for right now prior to arrow",
    "start": "347240",
    "end": "349070"
  },
  {
    "text": "functions every new function would have",
    "start": "349070",
    "end": "350750"
  },
  {
    "text": "its own this context that was based on",
    "start": "350750",
    "end": "352670"
  },
  {
    "text": "how that function was called and the",
    "start": "352670",
    "end": "354380"
  },
  {
    "text": "reason this is important is because you",
    "start": "354380",
    "end": "355730"
  },
  {
    "text": "might see older code where you have a",
    "start": "355730",
    "end": "356960"
  },
  {
    "text": "function that defines a variable named",
    "start": "356960",
    "end": "358850"
  },
  {
    "text": "self that is equal to this and the",
    "start": "358850",
    "end": "361010"
  },
  {
    "text": "reason you see code like this is because",
    "start": "361010",
    "end": "362630"
  },
  {
    "text": "JavaScript will close over that variable",
    "start": "362630",
    "end": "364580"
  },
  {
    "text": "and allow you to reference it",
    "start": "364580",
    "end": "365930"
  },
  {
    "text": "consistently and other functions for",
    "start": "365930",
    "end": "368150"
  },
  {
    "text": "example if we define a property on this",
    "start": "368150",
    "end": "370190"
  },
  {
    "text": "function we can now reference it using",
    "start": "370190",
    "end": "372110"
  },
  {
    "text": "the self variable and other functions",
    "start": "372110",
    "end": "373790"
  },
  {
    "text": "but the great thing about arrow",
    "start": "373790",
    "end": "375080"
  },
  {
    "text": "functions is that we no longer need this",
    "start": "375080",
    "end": "376760"
  },
  {
    "text": "ridiculousness we can just use an arrow",
    "start": "376760",
    "end": "378620"
  },
  {
    "text": "function get rid of these self variable",
    "start": "378620",
    "end": "380510"
  },
  {
    "text": "and we're good to go now that's more",
    "start": "380510",
    "end": "382669"
  },
  {
    "text": "information than you need to get started",
    "start": "382669",
    "end": "384260"
  },
  {
    "text": "working with arrow functions but it may",
    "start": "384260",
    "end": "385790"
  },
  {
    "text": "come into play if you use a framework",
    "start": "385790",
    "end": "387169"
  },
  {
    "text": "like view in particular so always make",
    "start": "387169",
    "end": "389330"
  },
  {
    "text": "sure to read the instruction manual that",
    "start": "389330",
    "end": "390890"
  },
  {
    "text": "comes with your framework and from here",
    "start": "390890",
    "end": "392750"
  },
  {
    "start": "392000",
    "end": "466000"
  },
  {
    "text": "on out we'll be mostly using arrow",
    "start": "392750",
    "end": "394040"
  },
  {
    "text": "functions because I think you should",
    "start": "394040",
    "end": "395330"
  },
  {
    "text": "prefer that syntax when possible now",
    "start": "395330",
    "end": "397460"
  },
  {
    "text": "another big thing you'll hear from",
    "start": "397460",
    "end": "398570"
  },
  {
    "text": "thought leaders in the industry is the",
    "start": "398570",
    "end": "400370"
  },
  {
    "text": "value of pure functions but what is it",
    "start": "400370",
    "end": "402860"
  },
  {
    "text": "that makes a function pure well let's",
    "start": "402860",
    "end": "404870"
  },
  {
    "text": "start by looking at an impure function",
    "start": "404870",
    "end": "406400"
  },
  {
    "text": "first we have a global variable then we",
    "start": "406400",
    "end": "408380"
  },
  {
    "text": "define our function and that function",
    "start": "408380",
    "end": "409910"
  },
  {
    "text": "mutates the global variable and also",
    "start": "409910",
    "end": "412220"
  },
  {
    "text": "uses it in its return value what makes",
    "start": "412220",
    "end": "414320"
  },
  {
    "text": "this code difficult to work with is that",
    "start": "414320",
    "end": "415910"
  },
  {
    "text": "its operating on values outside of its",
    "start": "415910",
    "end": "417950"
  },
  {
    "text": "local scope and when you have functions",
    "start": "417950",
    "end": "419600"
  },
  {
    "text": "that depend on and you take little",
    "start": "419600",
    "end": "420979"
  },
  {
    "text": "variables it tends to create a lot of",
    "start": "420979",
    "end": "422870"
  },
  {
    "text": "drama let me just explain to her what's",
    "start": "422870",
    "end": "425150"
  },
  {
    "text": "going on you're gonna have it we're all",
    "start": "425150",
    "end": "427220"
  },
  {
    "text": "clear yeah I just want to talk about",
    "start": "427220",
    "end": "428330"
  },
  {
    "text": "what Garret because this is the most",
    "start": "428330",
    "end": "429560"
  },
  {
    "text": "important thing this conversation wasn't",
    "start": "429560",
    "end": "430610"
  },
  {
    "text": "even how all this guy brought up I was",
    "start": "430610",
    "end": "432080"
  },
  {
    "text": "Manning up there then because Garret",
    "start": "432080",
    "end": "433220"
  },
  {
    "text": "asked me and I left the house there",
    "start": "433220",
    "end": "434810"
  },
  {
    "text": "Steven got back to my one-on-one both",
    "start": "434810",
    "end": "436100"
  },
  {
    "text": "both you told me who could make sure you",
    "start": "436100",
    "end": "438110"
  },
  {
    "text": "don't talk about any of us so a pure",
    "start": "438110",
    "end": "439790"
  },
  {
    "text": "function is one that only depends on its",
    "start": "439790",
    "end": "441620"
  },
  {
    "text": "input parameters and only mutates",
    "start": "441620",
    "end": "443479"
  },
  {
    "text": "variables within its local scope and it",
    "start": "443479",
    "end": "445580"
  },
  {
    "text": "should also not produce any side effects",
    "start": "445580",
    "end": "447050"
  },
  {
    "text": "and the end result is code that will",
    "start": "447050",
    "end": "449090"
  },
  {
    "text": "always produce the same output given",
    "start": "449090",
    "end": "450650"
  },
  {
    "text": "these same inputs code like that tends",
    "start": "450650",
    "end": "452780"
  },
  {
    "text": "to be easier to test and also just",
    "start": "452780",
    "end": "454460"
  },
  {
    "text": "easier to think about in general not to",
    "start": "454460",
    "end": "456530"
  },
  {
    "text": "mention pure functions will help you",
    "start": "456530",
    "end": "458030"
  },
  {
    "text": "compose your applications as a",
    "start": "458030",
    "end": "459410"
  },
  {
    "text": "collection of higher-order functions we",
    "start": "459410",
    "end": "462020"
  },
  {
    "text": "learned in the very first video of this",
    "start": "462020",
    "end": "463490"
  },
  {
    "text": "course that JavaScript supports",
    "start": "463490",
    "end": "465050"
  },
  {
    "text": "first-class functions and that means",
    "start": "465050",
    "end": "466850"
  },
  {
    "start": "466000",
    "end": "567000"
  },
  {
    "text": "that you can pass functions as arguments",
    "start": "466850",
    "end": "468530"
  },
  {
    "text": "to other functions or use functions as",
    "start": "468530",
    "end": "470690"
  },
  {
    "text": "the return value from a function so when",
    "start": "470690",
    "end": "472790"
  },
  {
    "text": "you hear the term higher-order function",
    "start": "472790",
    "end": "474260"
  },
  {
    "text": "or higher-order component and react",
    "start": "474260",
    "end": "475940"
  },
  {
    "text": "we're simply talking about functions",
    "start": "475940",
    "end": "477650"
  },
  {
    "text": "that take other functions as",
    "start": "477650",
    "end": "479090"
  },
  {
    "text": "input arguments or return a new function",
    "start": "479090",
    "end": "481220"
  },
  {
    "text": "when they're called using a function as",
    "start": "481220",
    "end": "482840"
  },
  {
    "text": "an argument is a very common thing to do",
    "start": "482840",
    "end": "484520"
  },
  {
    "text": "in JavaScript especially when you start",
    "start": "484520",
    "end": "486080"
  },
  {
    "text": "working with async code we're not going",
    "start": "486080",
    "end": "488000"
  },
  {
    "text": "to cover async stuff in this video like",
    "start": "488000",
    "end": "489770"
  },
  {
    "text": "promises and callbacks because that",
    "start": "489770",
    "end": "491570"
  },
  {
    "text": "deserves an entire video on its own but",
    "start": "491570",
    "end": "493970"
  },
  {
    "text": "a simple example of a higher-order",
    "start": "493970",
    "end": "495350"
  },
  {
    "text": "function is the set timeout function",
    "start": "495350",
    "end": "497510"
  },
  {
    "text": "that's built into JavaScript it allows",
    "start": "497510",
    "end": "499400"
  },
  {
    "text": "you to execute code after a specific",
    "start": "499400",
    "end": "501110"
  },
  {
    "text": "delay and it achieves this by taking a",
    "start": "501110",
    "end": "503360"
  },
  {
    "text": "function as its first argument and then",
    "start": "503360",
    "end": "505430"
  },
  {
    "text": "the number of seconds that you want to",
    "start": "505430",
    "end": "506690"
  },
  {
    "text": "delay as the second argument we don't",
    "start": "506690",
    "end": "508669"
  },
  {
    "text": "want to immediately execute the function",
    "start": "508669",
    "end": "510139"
  },
  {
    "text": "that we pass to the set timeout instead",
    "start": "510139",
    "end": "512210"
  },
  {
    "text": "we wait for the delay and then the",
    "start": "512210",
    "end": "513529"
  },
  {
    "text": "JavaScript engine will call that",
    "start": "513529",
    "end": "514789"
  },
  {
    "text": "function later hence the name callback",
    "start": "514789",
    "end": "516950"
  },
  {
    "text": "function and you'll see code like this",
    "start": "516950",
    "end": "518659"
  },
  {
    "text": "all over the place in modern JavaScript",
    "start": "518659",
    "end": "519950"
  },
  {
    "text": "another thing we can do with functional",
    "start": "519950",
    "end": "521719"
  },
  {
    "text": "code is replace traditional for loops as",
    "start": "521719",
    "end": "523880"
  },
  {
    "text": "you can see in this example we are",
    "start": "523880",
    "end": "525470"
  },
  {
    "text": "looping over an array and then we're",
    "start": "525470",
    "end": "527300"
  },
  {
    "text": "mutating each item in that array with a",
    "start": "527300",
    "end": "529070"
  },
  {
    "text": "new value but in modern JavaScript we",
    "start": "529070",
    "end": "531140"
  },
  {
    "text": "can achieve the same thing in a single",
    "start": "531140",
    "end": "532580"
  },
  {
    "text": "line with array map which takes a",
    "start": "532580",
    "end": "534920"
  },
  {
    "text": "function with a specific signature as",
    "start": "534920",
    "end": "536660"
  },
  {
    "text": "its argument and it will call this",
    "start": "536660",
    "end": "538610"
  },
  {
    "text": "function for each item in the array so X",
    "start": "538610",
    "end": "541130"
  },
  {
    "text": "represents an individual item in the",
    "start": "541130",
    "end": "542810"
  },
  {
    "text": "array and then the return value from the",
    "start": "542810",
    "end": "544670"
  },
  {
    "text": "function is what we want to transform it",
    "start": "544670",
    "end": "546470"
  },
  {
    "text": "to and this is especially awesome when",
    "start": "546470",
    "end": "548390"
  },
  {
    "text": "combined with arrow functions because",
    "start": "548390",
    "end": "549830"
  },
  {
    "text": "you can achieve a lot with a single line",
    "start": "549830",
    "end": "551360"
  },
  {
    "text": "of code and if you want to reuse this",
    "start": "551360",
    "end": "553250"
  },
  {
    "text": "code you can simply set up a function",
    "start": "553250",
    "end": "554900"
  },
  {
    "text": "expression with a descriptive name and",
    "start": "554900",
    "end": "556730"
  },
  {
    "text": "then pass it as the argument to map now",
    "start": "556730",
    "end": "558950"
  },
  {
    "text": "I should point out that these functional",
    "start": "558950",
    "end": "560180"
  },
  {
    "text": "techniques tend to be less performant",
    "start": "560180",
    "end": "561709"
  },
  {
    "text": "than a regular for loop so I feel",
    "start": "561709",
    "end": "563450"
  },
  {
    "text": "obligated to mention that even though",
    "start": "563450",
    "end": "565040"
  },
  {
    "text": "it's not going to matter in the majority",
    "start": "565040",
    "end": "566480"
  },
  {
    "text": "of use cases now another type of",
    "start": "566480",
    "end": "568760"
  },
  {
    "start": "567000",
    "end": "648000"
  },
  {
    "text": "higher-order function is one that",
    "start": "568760",
    "end": "570410"
  },
  {
    "text": "returns a function now the thing you",
    "start": "570410",
    "end": "571970"
  },
  {
    "text": "should know at this point is that",
    "start": "571970",
    "end": "572930"
  },
  {
    "text": "whenever you define a function you're",
    "start": "572930",
    "end": "574850"
  },
  {
    "text": "also creating a lexical environment and",
    "start": "574850",
    "end": "576920"
  },
  {
    "text": "that sounds like a pretty scary term but",
    "start": "576920",
    "end": "578959"
  },
  {
    "text": "basically anything inside of curly",
    "start": "578959",
    "end": "580610"
  },
  {
    "text": "braces is its own lexical environment",
    "start": "580610",
    "end": "582800"
  },
  {
    "text": "now the inner function has a lexical",
    "start": "582800",
    "end": "584900"
  },
  {
    "text": "environment that contains its own local",
    "start": "584900",
    "end": "586370"
  },
  {
    "text": "variables and also a reference to the",
    "start": "586370",
    "end": "588440"
  },
  {
    "text": "outer environment which includes the",
    "start": "588440",
    "end": "589970"
  },
  {
    "text": "outer function as well as the global",
    "start": "589970",
    "end": "591620"
  },
  {
    "text": "script as well basically what this boils",
    "start": "591620",
    "end": "593930"
  },
  {
    "text": "down to is that the inner function can",
    "start": "593930",
    "end": "595940"
  },
  {
    "text": "remember the local variables in the",
    "start": "595940",
    "end": "597709"
  },
  {
    "text": "outer function but the outer function",
    "start": "597709",
    "end": "599270"
  },
  {
    "text": "can't look inward at the local variables",
    "start": "599270",
    "end": "601339"
  },
  {
    "text": "in the inner function as we can see here",
    "start": "601339",
    "end": "603290"
  },
  {
    "text": "from the undefined error now let's go",
    "start": "603290",
    "end": "605450"
  },
  {
    "text": "ahead and define a function called use",
    "start": "605450",
    "end": "606980"
  },
  {
    "text": "cat that is a closure loosely inspired",
    "start": "606980",
    "end": "608930"
  },
  {
    "text": "by react Oaks the outer function is its",
    "start": "608930",
    "end": "611630"
  },
  {
    "text": "own lexical environment and will define",
    "start": "611630",
    "end": "613280"
  },
  {
    "text": "local variables within it such as a",
    "start": "613280",
    "end": "615079"
  },
  {
    "text": "default name when this function is first",
    "start": "615079",
    "end": "616880"
  },
  {
    "text": "called",
    "start": "616880",
    "end": "617240"
  },
  {
    "text": "then we'll return an array that itself",
    "start": "617240",
    "end": "619160"
  },
  {
    "text": "contains two different functions the",
    "start": "619160",
    "end": "620870"
  },
  {
    "text": "first one just gets the name and",
    "start": "620870",
    "end": "622160"
  },
  {
    "text": "prefixes it with meow well the second",
    "start": "622160",
    "end": "624560"
  },
  {
    "text": "function is a setter that takes a new",
    "start": "624560",
    "end": "626180"
  },
  {
    "text": "name as an argument and then sets it as",
    "start": "626180",
    "end": "627980"
  },
  {
    "text": "the name in the outer function and now",
    "start": "627980",
    "end": "629750"
  },
  {
    "text": "we can use it in a way that resembles",
    "start": "629750",
    "end": "631220"
  },
  {
    "text": "use state from react to X but the most",
    "start": "631220",
    "end": "633290"
  },
  {
    "text": "important takeaway here is that the",
    "start": "633290",
    "end": "634850"
  },
  {
    "text": "inner lexical environment or the inner",
    "start": "634850",
    "end": "636589"
  },
  {
    "text": "functions in the array have access to",
    "start": "636589",
    "end": "638420"
  },
  {
    "text": "the local variables in the outer used",
    "start": "638420",
    "end": "640250"
  },
  {
    "text": "cat function so I highly recommend that",
    "start": "640250",
    "end": "642050"
  },
  {
    "text": "you practice this and get comfortable",
    "start": "642050",
    "end": "643310"
  },
  {
    "text": "with closures because you'll find them",
    "start": "643310",
    "end": "644690"
  },
  {
    "text": "on both interview questions and in the",
    "start": "644690",
    "end": "646550"
  },
  {
    "text": "real world",
    "start": "646550",
    "end": "647060"
  },
  {
    "text": "and speaking of interview questions",
    "start": "647060",
    "end": "648650"
  },
  {
    "start": "648000",
    "end": "746000"
  },
  {
    "text": "another thing you might encounter is",
    "start": "648650",
    "end": "650180"
  },
  {
    "text": "recursion in JavaScript we can create a",
    "start": "650180",
    "end": "652370"
  },
  {
    "text": "recursive function by simply defining a",
    "start": "652370",
    "end": "654290"
  },
  {
    "text": "function and then calling it by name in",
    "start": "654290",
    "end": "656240"
  },
  {
    "text": "the function body when this function",
    "start": "656240",
    "end": "658070"
  },
  {
    "text": "encounters the function call it's simply",
    "start": "658070",
    "end": "659990"
  },
  {
    "text": "going to push another instance of this",
    "start": "659990",
    "end": "662089"
  },
  {
    "text": "function on the call stack and in our",
    "start": "662089",
    "end": "663920"
  },
  {
    "text": "case we have no stopping condition which",
    "start": "663920",
    "end": "665660"
  },
  {
    "text": "means it will do this forever in an",
    "start": "665660",
    "end": "666950"
  },
  {
    "text": "infinite loop until we reach Stack",
    "start": "666950",
    "end": "668450"
  },
  {
    "text": "Overflow",
    "start": "668450",
    "end": "668990"
  },
  {
    "text": "let's go ahead and look at a more",
    "start": "668990",
    "end": "670280"
  },
  {
    "text": "practical example using nodejs that will",
    "start": "670280",
    "end": "672380"
  },
  {
    "text": "traverse the filesystem on this computer",
    "start": "672380",
    "end": "674270"
  },
  {
    "text": "recursive algorithms tend to be very",
    "start": "674270",
    "end": "676160"
  },
  {
    "text": "efficient when traversing tree like data",
    "start": "676160",
    "end": "678079"
  },
  {
    "text": "structures in nodejs we can import file",
    "start": "678079",
    "end": "680420"
  },
  {
    "text": "system which is a module that will allow",
    "start": "680420",
    "end": "682280"
  },
  {
    "text": "us to read files on this local system",
    "start": "682280",
    "end": "684230"
  },
  {
    "text": "and we'll define a function called",
    "start": "684230",
    "end": "685579"
  },
  {
    "text": "traverse that takes a directory path as",
    "start": "685579",
    "end": "687800"
  },
  {
    "text": "its argument from there we'll use node",
    "start": "687800",
    "end": "689390"
  },
  {
    "text": "to ensure that this path is a directory",
    "start": "689390",
    "end": "691190"
  },
  {
    "text": "and then we'll read the contents of that",
    "start": "691190",
    "end": "692720"
  },
  {
    "text": "directory that will give us an array of",
    "start": "692720",
    "end": "694850"
  },
  {
    "text": "subfolders or it will be undefined so by",
    "start": "694850",
    "end": "697160"
  },
  {
    "text": "adding a conditional statement we've",
    "start": "697160",
    "end": "698630"
  },
  {
    "text": "added a stopping condition to this",
    "start": "698630",
    "end": "700280"
  },
  {
    "text": "recursive function because if no",
    "start": "700280",
    "end": "701900"
  },
  {
    "text": "subfolders exists then it will stop",
    "start": "701900",
    "end": "703520"
  },
  {
    "text": "rehearsing or stop looping over that",
    "start": "703520",
    "end": "705410"
  },
  {
    "text": "function call but if we do have",
    "start": "705410",
    "end": "707089"
  },
  {
    "text": "subfolders then we'll go ahead and loop",
    "start": "707089",
    "end": "708800"
  },
  {
    "text": "over them with the for each method and",
    "start": "708800",
    "end": "710570"
  },
  {
    "text": "then we'll call the outer function that",
    "start": "710570",
    "end": "711860"
  },
  {
    "text": "we're defining right now by name and",
    "start": "711860",
    "end": "713450"
  },
  {
    "text": "that's the thing that gives us a",
    "start": "713450",
    "end": "714560"
  },
  {
    "text": "recursive function and lastly we'll",
    "start": "714560",
    "end": "716480"
  },
  {
    "text": "start the whole process by calling",
    "start": "716480",
    "end": "717680"
  },
  {
    "text": "traverse with the current working",
    "start": "717680",
    "end": "719089"
  },
  {
    "text": "directory now at this point we've",
    "start": "719089",
    "end": "720709"
  },
  {
    "text": "covered a bunch of different ways to use",
    "start": "720709",
    "end": "722270"
  },
  {
    "text": "JavaScript functions but the best way to",
    "start": "722270",
    "end": "724070"
  },
  {
    "text": "fully understand these concepts is to",
    "start": "724070",
    "end": "725660"
  },
  {
    "text": "get a lot of practice and that's exactly",
    "start": "725660",
    "end": "727579"
  },
  {
    "text": "what we'll be doing in the upcoming",
    "start": "727579",
    "end": "728990"
  },
  {
    "text": "videos in this series so if this video",
    "start": "728990",
    "end": "730790"
  },
  {
    "text": "helped you please like it",
    "start": "730790",
    "end": "732290"
  },
  {
    "text": "and consider becoming a pro member at",
    "start": "732290",
    "end": "734299"
  },
  {
    "text": "fire ship IO thanks for watching and I",
    "start": "734299",
    "end": "736729"
  },
  {
    "text": "will talk to you soon",
    "start": "736729",
    "end": "739509"
  },
  {
    "text": "[Music]",
    "start": "745860",
    "end": "748100"
  }
]