[
  {
    "text": "JavaScript It's a Wonderful programming",
    "start": "240",
    "end": "2399"
  },
  {
    "text": "language to learn for beginners it's",
    "start": "2399",
    "end": "4160"
  },
  {
    "text": "also a horrible programming language to",
    "start": "4160",
    "end": "5960"
  },
  {
    "text": "learn for beginners on one hand you can",
    "start": "5960",
    "end": "7839"
  },
  {
    "text": "build almost anything with it and get a",
    "start": "7839",
    "end": "9719"
  },
  {
    "text": "job anywhere if you master it on the",
    "start": "9719",
    "end": "11480"
  },
  {
    "text": "other hand it's weird ugly and",
    "start": "11480",
    "end": "13519"
  },
  {
    "text": "surrounded by a dystopian Wasteland of",
    "start": "13519",
    "end": "15759"
  },
  {
    "text": "Frameworks and libraries don't want to",
    "start": "15759",
    "end": "17439"
  },
  {
    "text": "sound like a dick or nothing but uh it",
    "start": "17439",
    "end": "19600"
  },
  {
    "text": "says on your chart that you're [ __ ] up",
    "start": "19600",
    "end": "21800"
  },
  {
    "text": "welcome to JavaScript 101 over the next",
    "start": "21800",
    "end": "24199"
  },
  {
    "text": "few minutes you'll learn 101 different",
    "start": "24199",
    "end": "26000"
  },
  {
    "text": "things you need to know about JavaScript",
    "start": "26000",
    "end": "28080"
  },
  {
    "text": "like how to use it where to use it and",
    "start": "28080",
    "end": "30039"
  },
  {
    "text": "why it is the way it is by the end of",
    "start": "30039",
    "end": "31720"
  },
  {
    "text": "this video you'll be able to build a",
    "start": "31720",
    "end": "33120"
  },
  {
    "text": "website a mobile app a desktop app a",
    "start": "33120",
    "end": "35160"
  },
  {
    "text": "server an operating system artificial",
    "start": "35160",
    "end": "37239"
  },
  {
    "text": "intelligence and all kinds of other",
    "start": "37239",
    "end": "38760"
  },
  {
    "text": "stuff you shouldn't build with it it was",
    "start": "38760",
    "end": "40280"
  },
  {
    "text": "created in 1993 by Brendan Ike at",
    "start": "40280",
    "end": "42680"
  },
  {
    "text": "Netscape at the time the web browser was",
    "start": "42680",
    "end": "44680"
  },
  {
    "text": "cutting edge technology that connected",
    "start": "44680",
    "end": "46640"
  },
  {
    "text": "everybody on the planet via the",
    "start": "46640",
    "end": "47960"
  },
  {
    "text": "worldwide web now that I've gotten on",
    "start": "47960",
    "end": "49719"
  },
  {
    "text": "the internet I'd rather be on my",
    "start": "49719",
    "end": "51360"
  },
  {
    "text": "computer than doing just about anything",
    "start": "51360",
    "end": "53440"
  },
  {
    "text": "at the time websites were completely",
    "start": "53440",
    "end": "55039"
  },
  {
    "text": "static with pure HTML JavaScript was",
    "start": "55039",
    "end": "57760"
  },
  {
    "text": "designed as an easyto use highle",
    "start": "57760",
    "end": "60000"
  },
  {
    "text": "language to help developers make these",
    "start": "60000",
    "end": "61760"
  },
  {
    "text": "websites interactive today it's arguably",
    "start": "61760",
    "end": "64158"
  },
  {
    "text": "the most popular language in the world",
    "start": "64159",
    "end": "65880"
  },
  {
    "text": "and its standard implementation is",
    "start": "65880",
    "end": "67479"
  },
  {
    "text": "called ecmascript and is the default",
    "start": "67479",
    "end": "69240"
  },
  {
    "text": "language in all web browsers in fact",
    "start": "69240",
    "end": "71320"
  },
  {
    "text": "it's the only code that natively runs in",
    "start": "71320",
    "end": "72880"
  },
  {
    "text": "a browser aside from web assembly",
    "start": "72880",
    "end": "75200"
  },
  {
    "text": "however the browser is not the only",
    "start": "75200",
    "end": "76920"
  },
  {
    "text": "runtime and you can also run JavaScript",
    "start": "76920",
    "end": "78920"
  },
  {
    "text": "code on a server thanks to tools like",
    "start": "78920",
    "end": "80880"
  },
  {
    "text": "node.js and Dino as the name implies",
    "start": "80880",
    "end": "83560"
  },
  {
    "text": "JavaScript is a scripting language that",
    "start": "83560",
    "end": "85840"
  },
  {
    "text": "means you can execute code on the Fly by",
    "start": "85840",
    "end": "87920"
  },
  {
    "text": "opening up the console in your browser",
    "start": "87920",
    "end": "89920"
  },
  {
    "text": "Dev tools to run some code that changes",
    "start": "89920",
    "end": "91759"
  },
  {
    "text": "the appearance of a website at any time",
    "start": "91759",
    "end": "93759"
  },
  {
    "text": "it's interpreted line by line as opposed",
    "start": "93759",
    "end": "95799"
  },
  {
    "text": "to other languages like C that are",
    "start": "95799",
    "end": "97720"
  },
  {
    "text": "compiled ahead of time however",
    "start": "97720",
    "end": "99560"
  },
  {
    "text": "interpreted is not the most accurate",
    "start": "99560",
    "end": "101280"
  },
  {
    "text": "term to use here under the hood of the",
    "start": "101280",
    "end": "102960"
  },
  {
    "text": "browser there's an engine called V8 it",
    "start": "102960",
    "end": "105320"
  },
  {
    "text": "makes JavaScript run extremely fast by",
    "start": "105320",
    "end": "107600"
  },
  {
    "text": "taking your code and converting it to",
    "start": "107600",
    "end": "109159"
  },
  {
    "text": "machine code with a process called Just",
    "start": "109159",
    "end": "111119"
  },
  {
    "text": "in Time compilation but none of this",
    "start": "111119",
    "end": "113240"
  },
  {
    "text": "stuff really matters let's jump into",
    "start": "113240",
    "end": "114840"
  },
  {
    "text": "some code to use JavaScript on a web",
    "start": "114840",
    "end": "116680"
  },
  {
    "text": "page you'll first need an HTML document",
    "start": "116680",
    "end": "118920"
  },
  {
    "text": "inside of which we'll have script tag",
    "start": "118920",
    "end": "120840"
  },
  {
    "text": "you can write code inside the tag",
    "start": "120840",
    "end": "122240"
  },
  {
    "text": "directly or reference an external file",
    "start": "122240",
    "end": "124280"
  },
  {
    "text": "with the source attribute now to say",
    "start": "124280",
    "end": "126039"
  },
  {
    "text": "hello world use console log which is",
    "start": "126039",
    "end": "128239"
  },
  {
    "text": "javascript's built-in tool for printing",
    "start": "128239",
    "end": "130160"
  },
  {
    "text": "to the standard output now open the HTML",
    "start": "130160",
    "end": "132360"
  },
  {
    "text": "file in a browser and you should see the",
    "start": "132360",
    "end": "133959"
  },
  {
    "text": "value printed out in the dev tools there",
    "start": "133959",
    "end": "135920"
  },
  {
    "text": "are several different ways to Define",
    "start": "135920",
    "end": "137519"
  },
  {
    "text": "variables the most common of which today",
    "start": "137519",
    "end": "139440"
  },
  {
    "text": "is let start by giving it a name which",
    "start": "139440",
    "end": "141440"
  },
  {
    "text": "will normally be in camel case then",
    "start": "141440",
    "end": "143480"
  },
  {
    "text": "assign a value to it it's a dynamically",
    "start": "143480",
    "end": "145720"
  },
  {
    "text": "typed language which means no data type",
    "start": "145720",
    "end": "147760"
  },
  {
    "text": "annotations are necessary in this case",
    "start": "147760",
    "end": "149920"
  },
  {
    "text": "I've assigned a number which is one of",
    "start": "149920",
    "end": "151440"
  },
  {
    "text": "the seven primitive data types built",
    "start": "151440",
    "end": "153319"
  },
  {
    "text": "into the language however we don't need",
    "start": "153319",
    "end": "155160"
  },
  {
    "text": "to assign the variable a value right now",
    "start": "155160",
    "end": "157480"
  },
  {
    "text": "because it can be reassigned later",
    "start": "157480",
    "end": "159000"
  },
  {
    "text": "without an assignment it automatically",
    "start": "159000",
    "end": "160680"
  },
  {
    "text": "uses the Primitive value of undefined as",
    "start": "160680",
    "end": "163080"
  },
  {
    "text": "its default value however we can",
    "start": "163080",
    "end": "165200"
  },
  {
    "text": "explicitly represent an empty value",
    "start": "165200",
    "end": "167239"
  },
  {
    "text": "using null and later on we could",
    "start": "167239",
    "end": "169239"
  },
  {
    "text": "reassign that same variable to a string",
    "start": "169239",
    "end": "171319"
  },
  {
    "text": "it's an entirely different data type but",
    "start": "171319",
    "end": "173040"
  },
  {
    "text": "that's perfectly okay now any value",
    "start": "173040",
    "end": "175040"
  },
  {
    "text": "that's not a primitive will inherit from",
    "start": "175040",
    "end": "177120"
  },
  {
    "text": "the object class but more on that later",
    "start": "177120",
    "end": "179560"
  },
  {
    "text": "right now now we need to talk about this",
    "start": "179560",
    "end": "181159"
  },
  {
    "text": "semicolon technically semicolons are",
    "start": "181159",
    "end": "183159"
  },
  {
    "text": "optional because if you leave them out",
    "start": "183159",
    "end": "184680"
  },
  {
    "text": "the JavaScript parser will add them",
    "start": "184680",
    "end": "186400"
  },
  {
    "text": "automatically in real life JavaScript",
    "start": "186400",
    "end": "188400"
  },
  {
    "text": "developers will often fight to the death",
    "start": "188400",
    "end": "190159"
  },
  {
    "text": "over whether or not to use semicolons",
    "start": "190159",
    "end": "192159"
  },
  {
    "text": "but let is not the only way to define a",
    "start": "192159",
    "end": "194159"
  },
  {
    "text": "variable another common option is const",
    "start": "194159",
    "end": "196680"
  },
  {
    "text": "which is used for variables that cannot",
    "start": "196680",
    "end": "198599"
  },
  {
    "text": "be reassigned later but the original way",
    "start": "198599",
    "end": "200920"
  },
  {
    "text": "to declare a variable is VAR I would",
    "start": "200920",
    "end": "203159"
  },
  {
    "text": "recommend ignoring its existence",
    "start": "203159",
    "end": "204519"
  },
  {
    "text": "altogether although you will find it out",
    "start": "204519",
    "end": "206280"
  },
  {
    "text": "in the wild the reason we have so many",
    "start": "206280",
    "end": "208040"
  },
  {
    "text": "different ways to Define variables has",
    "start": "208040",
    "end": "209840"
  },
  {
    "text": "to do with the lexical environment which",
    "start": "209840",
    "end": "211720"
  },
  {
    "text": "determines where variables work and",
    "start": "211720",
    "end": "213560"
  },
  {
    "text": "where they don't there's Global scope",
    "start": "213560",
    "end": "215280"
  },
  {
    "text": "which is where we are right now which",
    "start": "215280",
    "end": "216680"
  },
  {
    "text": "means this variable will be available",
    "start": "216680",
    "end": "218480"
  },
  {
    "text": "everywhere however if we Define a",
    "start": "218480",
    "end": "220280"
  },
  {
    "text": "variable inside a function it then",
    "start": "220280",
    "end": "222040"
  },
  {
    "text": "becomes local to that function and",
    "start": "222040",
    "end": "223760"
  },
  {
    "text": "cannot be used outside of it and finally",
    "start": "223760",
    "end": "225760"
  },
  {
    "text": "if you have a statement like an if",
    "start": "225760",
    "end": "227519"
  },
  {
    "text": "condition variables can be scoped inside",
    "start": "227519",
    "end": "229439"
  },
  {
    "text": "the braces or block unless you use VAR",
    "start": "229439",
    "end": "231920"
  },
  {
    "text": "for that variable which is not block",
    "start": "231920",
    "end": "233640"
  },
  {
    "text": "scope in which case it will be hoisted",
    "start": "233640",
    "end": "235439"
  },
  {
    "text": "up into the local scope for that",
    "start": "235439",
    "end": "237120"
  },
  {
    "text": "function and trust me you don't want",
    "start": "237120",
    "end": "238720"
  },
  {
    "text": "that weirdness in your life when the",
    "start": "238720",
    "end": "240120"
  },
  {
    "text": "function keyword is used by itself it's",
    "start": "240120",
    "end": "241879"
  },
  {
    "text": "called a function definition or",
    "start": "241879",
    "end": "243599"
  },
  {
    "text": "statement functions are one of the main",
    "start": "243599",
    "end": "245079"
  },
  {
    "text": "building blocks in JavaScript and they",
    "start": "245079",
    "end": "246879"
  },
  {
    "text": "work by taking an input or argument then",
    "start": "246879",
    "end": "249360"
  },
  {
    "text": "optionally return a value that can be",
    "start": "249360",
    "end": "251159"
  },
  {
    "text": "used somewhere else now functions are",
    "start": "251159",
    "end": "253079"
  },
  {
    "text": "just objects which means they can also",
    "start": "253079",
    "end": "255120"
  },
  {
    "text": "be used as Expressions allowing them to",
    "start": "255120",
    "end": "257160"
  },
  {
    "text": "be used as variables or to construct",
    "start": "257160",
    "end": "259239"
  },
  {
    "text": "higher order functions where a function",
    "start": "259239",
    "end": "261359"
  },
  {
    "text": "is used as an argument or a return value",
    "start": "261359",
    "end": "263960"
  },
  {
    "text": "functions can also be nested to create a",
    "start": "263960",
    "end": "266080"
  },
  {
    "text": "closure that encapsulates data and logic",
    "start": "266080",
    "end": "268680"
  },
  {
    "text": "from the rest of the program normally",
    "start": "268680",
    "end": "270400"
  },
  {
    "text": "when you call a function that has a",
    "start": "270400",
    "end": "272120"
  },
  {
    "text": "variable with a primitive value it's",
    "start": "272120",
    "end": "273919"
  },
  {
    "text": "stored on the call stack which is the",
    "start": "273919",
    "end": "275560"
  },
  {
    "text": "browser's short-term memory however when",
    "start": "275560",
    "end": "277520"
  },
  {
    "text": "you create a closure the inner function",
    "start": "277520",
    "end": "279520"
  },
  {
    "text": "can still access variables in the outer",
    "start": "279520",
    "end": "281600"
  },
  {
    "text": "function even after the initial function",
    "start": "281600",
    "end": "283400"
  },
  {
    "text": "call that happens because JavaScript",
    "start": "283400",
    "end": "285320"
  },
  {
    "text": "automatically stores the data in the",
    "start": "285320",
    "end": "286880"
  },
  {
    "text": "outer function in the Heap memory which",
    "start": "286880",
    "end": "288880"
  },
  {
    "text": "will persist between function calls",
    "start": "288880",
    "end": "290800"
  },
  {
    "text": "you'll rarely have to think about that",
    "start": "290800",
    "end": "292199"
  },
  {
    "text": "as a developer but what you're more",
    "start": "292199",
    "end": "293840"
  },
  {
    "text": "likely to run into is this it's a",
    "start": "293840",
    "end": "296039"
  },
  {
    "text": "keyword that references an object based",
    "start": "296039",
    "end": "298039"
  },
  {
    "text": "on how a function is called when called",
    "start": "298039",
    "end": "300039"
  },
  {
    "text": "from the global scope it references the",
    "start": "300039",
    "end": "301880"
  },
  {
    "text": "window object in the browser however if",
    "start": "301880",
    "end": "304280"
  },
  {
    "text": "that same function is attached to an",
    "start": "304280",
    "end": "305960"
  },
  {
    "text": "object and called by that object this",
    "start": "305960",
    "end": "308080"
  },
  {
    "text": "will be a reference to that object and",
    "start": "308080",
    "end": "310000"
  },
  {
    "text": "you can manually bind a function to some",
    "start": "310000",
    "end": "312120"
  },
  {
    "text": "other object using the bind method this",
    "start": "312120",
    "end": "314639"
  },
  {
    "text": "can be rather confusing but modern",
    "start": "314639",
    "end": "316440"
  },
  {
    "text": "JavaScript has another way to define",
    "start": "316440",
    "end": "318199"
  },
  {
    "text": "functions using the arrow syntax Arrow",
    "start": "318199",
    "end": "320520"
  },
  {
    "text": "functions don't have their own this",
    "start": "320520",
    "end": "322000"
  },
  {
    "text": "value and they're always Anonymous which",
    "start": "322000",
    "end": "323840"
  },
  {
    "text": "makes them ideal for function",
    "start": "323840",
    "end": "325199"
  },
  {
    "text": "Expressions now one last thing you need",
    "start": "325199",
    "end": "326800"
  },
  {
    "text": "to know about functions is that when",
    "start": "326800",
    "end": "328400"
  },
  {
    "text": "passing arguments a primitive like a",
    "start": "328400",
    "end": "330560"
  },
  {
    "text": "number is passed by value which means a",
    "start": "330560",
    "end": "333120"
  },
  {
    "text": "copy is created of the original variable",
    "start": "333120",
    "end": "335400"
  },
  {
    "text": "however if the argument is an object",
    "start": "335400",
    "end": "337199"
  },
  {
    "text": "that means it's stored in the Heap and",
    "start": "337199",
    "end": "338840"
  },
  {
    "text": "it's passed by reference that means",
    "start": "338840",
    "end": "340639"
  },
  {
    "text": "multiple parts of the code might be",
    "start": "340639",
    "end": "342080"
  },
  {
    "text": "mutating the same object speaking of",
    "start": "342080",
    "end": "344120"
  },
  {
    "text": "which let's talk about objects the",
    "start": "344120",
    "end": "346080"
  },
  {
    "text": "easiest way to define one is with the",
    "start": "346080",
    "end": "347919"
  },
  {
    "text": "object literal syntax using braces but",
    "start": "347919",
    "end": "350440"
  },
  {
    "text": "there's also an object type that can be",
    "start": "350440",
    "end": "352360"
  },
  {
    "text": "created with a Constructor using the new",
    "start": "352360",
    "end": "354319"
  },
  {
    "text": "keyword an object contains a collection",
    "start": "354319",
    "end": "356319"
  },
  {
    "text": "of key value pairs or properties and",
    "start": "356319",
    "end": "358600"
  },
  {
    "text": "values what's interesting interesting is",
    "start": "358600",
    "end": "360199"
  },
  {
    "text": "that objects can inherit properties from",
    "start": "360199",
    "end": "362120"
  },
  {
    "text": "each other thanks to a mechanism called",
    "start": "362120",
    "end": "364000"
  },
  {
    "text": "the Prototype chain every object has a",
    "start": "364000",
    "end": "366319"
  },
  {
    "text": "private property that links to exactly",
    "start": "366319",
    "end": "368479"
  },
  {
    "text": "one prototype this differs from",
    "start": "368479",
    "end": "370319"
  },
  {
    "text": "class-based inheritance found in many",
    "start": "370319",
    "end": "372000"
  },
  {
    "text": "other languages because we're dealing",
    "start": "372000",
    "end": "373479"
  },
  {
    "text": "with real objects that take up memory as",
    "start": "373479",
    "end": "375599"
  },
  {
    "text": "opposed to abstract classes in your code",
    "start": "375599",
    "end": "377759"
  },
  {
    "text": "now what's confusing is Javascript",
    "start": "377759",
    "end": "379680"
  },
  {
    "text": "supports object-oriented programming",
    "start": "379680",
    "end": "381720"
  },
  {
    "text": "with a class keyword however classes are",
    "start": "381720",
    "end": "384039"
  },
  {
    "text": "just syntactic sugar for prototypal",
    "start": "384039",
    "end": "385960"
  },
  {
    "text": "inheritance and objects a class can",
    "start": "385960",
    "end": "388120"
  },
  {
    "text": "define a Constructor which is a function",
    "start": "388120",
    "end": "390039"
  },
  {
    "text": "that's called when the object is first",
    "start": "390039",
    "end": "391599"
  },
  {
    "text": "created it can also have properties and",
    "start": "391599",
    "end": "393800"
  },
  {
    "text": "optionally create Getters and Setters to",
    "start": "393800",
    "end": "395840"
  },
  {
    "text": "access them and it more easily",
    "start": "395840",
    "end": "397280"
  },
  {
    "text": "encapsulates functions by organizing",
    "start": "397280",
    "end": "399319"
  },
  {
    "text": "them as methods on an object instance or",
    "start": "399319",
    "end": "401639"
  },
  {
    "text": "making them Global to the class name",
    "start": "401639",
    "end": "403479"
  },
  {
    "text": "with the static keyword in addition to",
    "start": "403479",
    "end": "405280"
  },
  {
    "text": "objects JavaScript has a bunch of",
    "start": "405280",
    "end": "407199"
  },
  {
    "text": "built-in data structures like an array",
    "start": "407199",
    "end": "409479"
  },
  {
    "text": "for holding a dynamic collection of",
    "start": "409479",
    "end": "411599"
  },
  {
    "text": "indexed items or a set to hold a",
    "start": "411599",
    "end": "414000"
  },
  {
    "text": "collection of unique items or map which",
    "start": "414000",
    "end": "416520"
  },
  {
    "text": "also holds a key value pair like an",
    "start": "416520",
    "end": "418360"
  },
  {
    "text": "object but can be more easily looped",
    "start": "418360",
    "end": "420240"
  },
  {
    "text": "over along with a variety of other",
    "start": "420240",
    "end": "421879"
  },
  {
    "text": "features now what you should also know",
    "start": "421879",
    "end": "423520"
  },
  {
    "text": "at this point is that JavaScript is",
    "start": "423520",
    "end": "425440"
  },
  {
    "text": "garbage collected that means it will",
    "start": "425440",
    "end": "427120"
  },
  {
    "text": "automatically deallocate objects from",
    "start": "427120",
    "end": "429039"
  },
  {
    "text": "memory when they're no longer referenced",
    "start": "429039",
    "end": "430599"
  },
  {
    "text": "in your code however when you have a map",
    "start": "430599",
    "end": "432759"
  },
  {
    "text": "all the properties will always be",
    "start": "432759",
    "end": "434280"
  },
  {
    "text": "referenced if that's not optimal there's",
    "start": "434280",
    "end": "436160"
  },
  {
    "text": "a weak map and weak set that contain",
    "start": "436160",
    "end": "438400"
  },
  {
    "text": "properties that can be garbage collected",
    "start": "438400",
    "end": "440120"
  },
  {
    "text": "to reduce memory usage now that we have",
    "start": "440120",
    "end": "442080"
  },
  {
    "text": "a basic idea of what JavaScript looks",
    "start": "442080",
    "end": "443840"
  },
  {
    "text": "like let's talk about one of its most",
    "start": "443840",
    "end": "445479"
  },
  {
    "text": "interesting features which is its",
    "start": "445479",
    "end": "447039"
  },
  {
    "text": "non-blocking event Loop normally when",
    "start": "447039",
    "end": "448960"
  },
  {
    "text": "you write code in a script it's executed",
    "start": "448960",
    "end": "451000"
  },
  {
    "text": "synchronously line by line which means",
    "start": "451000",
    "end": "453000"
  },
  {
    "text": "the next line can't start until the",
    "start": "453000",
    "end": "454599"
  },
  {
    "text": "previous line finishes with an event",
    "start": "454599",
    "end": "456360"
  },
  {
    "text": "Loop we can write a synchronous code in",
    "start": "456360",
    "end": "458120"
  },
  {
    "text": "JavaScript that runs in a separate",
    "start": "458120",
    "end": "459759"
  },
  {
    "text": "threadpool while the rest of the",
    "start": "459759",
    "end": "461280"
  },
  {
    "text": "application continues to execute this is",
    "start": "461280",
    "end": "463240"
  },
  {
    "text": "really important because modern websites",
    "start": "463240",
    "end": "465120"
  },
  {
    "text": "often have multiple things going on at",
    "start": "465120",
    "end": "466800"
  },
  {
    "text": "the same time but they only have access",
    "start": "466800",
    "end": "468680"
  },
  {
    "text": "to a single thread for computing called",
    "start": "468680",
    "end": "470440"
  },
  {
    "text": "the main thread without asynchronous",
    "start": "470440",
    "end": "472080"
  },
  {
    "text": "code it would be impossible to multitask",
    "start": "472080",
    "end": "474240"
  },
  {
    "text": "an easy way to demonstrate this is with",
    "start": "474240",
    "end": "476039"
  },
  {
    "text": "set timeout which takes a function as an",
    "start": "476039",
    "end": "478240"
  },
  {
    "text": "argument but won't call that function",
    "start": "478240",
    "end": "480720"
  },
  {
    "text": "until X number of milliseconds have",
    "start": "480720",
    "end": "482440"
  },
  {
    "text": "elapsed this is called a call back",
    "start": "482440",
    "end": "484360"
  },
  {
    "text": "function because it gets in cued in the",
    "start": "484360",
    "end": "486000"
  },
  {
    "text": "event Loop only to be called back later",
    "start": "486000",
    "end": "487840"
  },
  {
    "text": "when it's ready to execute on the main",
    "start": "487840",
    "end": "489639"
  },
  {
    "text": "thread callback functions are very",
    "start": "489639",
    "end": "491080"
  },
  {
    "text": "common but when they're overused and",
    "start": "491080",
    "end": "492639"
  },
  {
    "text": "become too deeply nested it leads to a",
    "start": "492639",
    "end": "494639"
  },
  {
    "text": "situation called call back hell luckily",
    "start": "494639",
    "end": "496840"
  },
  {
    "text": "there are better ways to write a sync",
    "start": "496840",
    "end": "498360"
  },
  {
    "text": "code like a promise A promise is a",
    "start": "498360",
    "end": "500840"
  },
  {
    "text": "wrapper for a value that's unknown right",
    "start": "500840",
    "end": "502879"
  },
  {
    "text": "now but that will resolve to a value in",
    "start": "502879",
    "end": "504840"
  },
  {
    "text": "the future like maybe a call to a third",
    "start": "504840",
    "end": "506840"
  },
  {
    "text": "party API that resolves to some data if",
    "start": "506840",
    "end": "509720"
  },
  {
    "text": "something goes wrong the promise can",
    "start": "509720",
    "end": "511240"
  },
  {
    "text": "reject to raise an error now the",
    "start": "511240",
    "end": "513240"
  },
  {
    "text": "consumer of the promise can use methods",
    "start": "513240",
    "end": "515240"
  },
  {
    "text": "like then and catch to handle these two",
    "start": "515240",
    "end": "517399"
  },
  {
    "text": "possible outcomes or better yet you can",
    "start": "517399",
    "end": "519440"
  },
  {
    "text": "define an async function that will",
    "start": "519440",
    "end": "521240"
  },
  {
    "text": "automatically return a promise then in",
    "start": "521240",
    "end": "523240"
  },
  {
    "text": "the body of the function we can pause",
    "start": "523240",
    "end": "524920"
  },
  {
    "text": "its execution using the await keyword to",
    "start": "524920",
    "end": "527279"
  },
  {
    "text": "wait for other promises to resolve this",
    "start": "527279",
    "end": "529600"
  },
  {
    "text": "results in nice readable code however in",
    "start": "529600",
    "end": "531680"
  },
  {
    "text": "order to implement error handling you",
    "start": "531680",
    "end": "533480"
  },
  {
    "text": "want to wrap this code in a TR catch",
    "start": "533480",
    "end": "535480"
  },
  {
    "text": "block now as your code grows in",
    "start": "535480",
    "end": "537080"
  },
  {
    "text": "complexity it won't all fit in a single",
    "start": "537080",
    "end": "539079"
  },
  {
    "text": "file luckily we can use modules to share",
    "start": "539079",
    "end": "541600"
  },
  {
    "text": "code between files by default all the",
    "start": "541600",
    "end": "544040"
  },
  {
    "text": "code in a file or module is private to",
    "start": "544040",
    "end": "546600"
  },
  {
    "text": "that file however if there's some code",
    "start": "546600",
    "end": "548240"
  },
  {
    "text": "we want to use elsewhere like a function",
    "start": "548240",
    "end": "550440"
  },
  {
    "text": "we can make it a default export this",
    "start": "550440",
    "end": "552560"
  },
  {
    "text": "allows us to go into a different file",
    "start": "552560",
    "end": "554279"
  },
  {
    "text": "and use an import statement to use the",
    "start": "554279",
    "end": "556160"
  },
  {
    "text": "function there as well it's also",
    "start": "556160",
    "end": "557839"
  },
  {
    "text": "possible to export multiple values from",
    "start": "557839",
    "end": "559760"
  },
  {
    "text": "a single file and then import them by",
    "start": "559760",
    "end": "561720"
  },
  {
    "text": "name in the other file but often what",
    "start": "561720",
    "end": "563760"
  },
  {
    "text": "you'll do in JavaScript land is use code",
    "start": "563760",
    "end": "565720"
  },
  {
    "text": "written by an entirely different",
    "start": "565720",
    "end": "567120"
  },
  {
    "text": "developer the largest JavaScript package",
    "start": "567120",
    "end": "568959"
  },
  {
    "text": "manager is npm when you install a",
    "start": "568959",
    "end": "571200"
  },
  {
    "text": "package from npm it downloads its code",
    "start": "571200",
    "end": "573320"
  },
  {
    "text": "into the node modules folder in your",
    "start": "573320",
    "end": "575200"
  },
  {
    "text": "project it also provides a package Json",
    "start": "575200",
    "end": "577480"
  },
  {
    "text": "file that will list out all the",
    "start": "577480",
    "end": "578880"
  },
  {
    "text": "dependencies used in your project now",
    "start": "578880",
    "end": "580800"
  },
  {
    "text": "let's go into the code and assume we're",
    "start": "580800",
    "end": "582320"
  },
  {
    "text": "building a website on the web the code",
    "start": "582320",
    "end": "584200"
  },
  {
    "text": "will run in the browser which is based",
    "start": "584200",
    "end": "585959"
  },
  {
    "text": "on the document object model where the",
    "start": "585959",
    "end": "587839"
  },
  {
    "text": "UI is represented as a tree of HTML",
    "start": "587839",
    "end": "590800"
  },
  {
    "text": "elements or nodes the browser provides",
    "start": "590800",
    "end": "593000"
  },
  {
    "text": "apis to interact with these nodes with",
    "start": "593000",
    "end": "595160"
  },
  {
    "text": "the most important object being the",
    "start": "595160",
    "end": "596959"
  },
  {
    "text": "document the document allows us to grab",
    "start": "596959",
    "end": "598880"
  },
  {
    "text": "an individ ual HTML element using a",
    "start": "598880",
    "end": "601079"
  },
  {
    "text": "method called query selector it takes a",
    "start": "601079",
    "end": "603240"
  },
  {
    "text": "CSS selector as an argument and we'll",
    "start": "603240",
    "end": "605200"
  },
  {
    "text": "find the HTML element that has the same",
    "start": "605200",
    "end": "607200"
  },
  {
    "text": "class Name ID or tag name it returns an",
    "start": "607200",
    "end": "610000"
  },
  {
    "text": "instance of the element class which",
    "start": "610000",
    "end": "611800"
  },
  {
    "text": "itself has a variety of properties and",
    "start": "611800",
    "end": "613720"
  },
  {
    "text": "methods to get information about it or",
    "start": "613720",
    "end": "615640"
  },
  {
    "text": "change its behavior in addition we can",
    "start": "615640",
    "end": "617399"
  },
  {
    "text": "grab multiple elements at the same time",
    "start": "617399",
    "end": "619240"
  },
  {
    "text": "using query selector all most",
    "start": "619240",
    "end": "621040"
  },
  {
    "text": "importantly we can listen to events that",
    "start": "621040",
    "end": "623079"
  },
  {
    "text": "happen to it like when a button is",
    "start": "623079",
    "end": "624800"
  },
  {
    "text": "clicked with add event listener we can",
    "start": "624800",
    "end": "626839"
  },
  {
    "text": "assign a function that will be called",
    "start": "626839",
    "end": "628560"
  },
  {
    "text": "whenever that event takes place much of",
    "start": "628560",
    "end": "630480"
  },
  {
    "text": "web development revolves around",
    "start": "630480",
    "end": "631920"
  },
  {
    "text": "listening to events and updating the UI",
    "start": "631920",
    "end": "633880"
  },
  {
    "text": "accordingly however one thing that many",
    "start": "633880",
    "end": "635680"
  },
  {
    "text": "developers dislike about vanilla",
    "start": "635680",
    "end": "637320"
  },
  {
    "text": "JavaScript is that it results in",
    "start": "637320",
    "end": "638800"
  },
  {
    "text": "imperative code where the UI is mutated",
    "start": "638800",
    "end": "641120"
  },
  {
    "text": "directly many developers now use",
    "start": "641120",
    "end": "642760"
  },
  {
    "text": "front-end Frameworks that produce",
    "start": "642760",
    "end": "644320"
  },
  {
    "text": "declarative code where the UI is a",
    "start": "644320",
    "end": "646360"
  },
  {
    "text": "function of its input data these",
    "start": "646360",
    "end": "648040"
  },
  {
    "text": "libraries encapsulate JavaScript HTML",
    "start": "648040",
    "end": "650360"
  },
  {
    "text": "and CSS into components which are then",
    "start": "650360",
    "end": "652440"
  },
  {
    "text": "used together to form a component tree",
    "start": "652440",
    "end": "654440"
  },
  {
    "text": "to represent the UI most importantly",
    "start": "654440",
    "end": "656560"
  },
  {
    "text": "inside a component data is reactive it",
    "start": "656560",
    "end": "658839"
  },
  {
    "text": "can be from the JavaScript directly to",
    "start": "658839",
    "end": "661079"
  },
  {
    "text": "the HTML that means anytime data changes",
    "start": "661079",
    "end": "663519"
  },
  {
    "text": "the UI will be updated automatically now",
    "start": "663519",
    "end": "665720"
  },
  {
    "text": "after you build a complete Javascript",
    "start": "665720",
    "end": "667399"
  },
  {
    "text": "app you'll need to take all of your",
    "start": "667399",
    "end": "668800"
  },
  {
    "text": "JavaScript files and combine them into a",
    "start": "668800",
    "end": "671040"
  },
  {
    "text": "single bundle that can be used by the",
    "start": "671040",
    "end": "672920"
  },
  {
    "text": "browser to handle this process",
    "start": "672920",
    "end": "674560"
  },
  {
    "text": "efficiently you'll need a tool called a",
    "start": "674560",
    "end": "676320"
  },
  {
    "text": "module bundler like V or webpack one",
    "start": "676320",
    "end": "678959"
  },
  {
    "text": "problem though is that sometimes this",
    "start": "678959",
    "end": "680399"
  },
  {
    "text": "Javascript file can get too big which",
    "start": "680399",
    "end": "682200"
  },
  {
    "text": "affects the page load performance and",
    "start": "682200",
    "end": "683959"
  },
  {
    "text": "this can be measured by the network",
    "start": "683959",
    "end": "685240"
  },
  {
    "text": "waterfall in your browser Dev tools",
    "start": "685240",
    "end": "687360"
  },
  {
    "text": "luckily it's possible to split this",
    "start": "687360",
    "end": "689279"
  },
  {
    "text": "JavaScript bundle into multiple files",
    "start": "689279",
    "end": "691240"
  },
  {
    "text": "then use Dynamic Imports in your code to",
    "start": "691240",
    "end": "693279"
  },
  {
    "text": "only import that JavaScript when it",
    "start": "693279",
    "end": "694880"
  },
  {
    "text": "becomes needed now JavaScript doesn't",
    "start": "694880",
    "end": "696600"
  },
  {
    "text": "just run in the browser but also on the",
    "start": "696600",
    "end": "698480"
  },
  {
    "text": "server node.js is the most popular",
    "start": "698480",
    "end": "700440"
  },
  {
    "text": "runtime and you can execute JavaScript",
    "start": "700440",
    "end": "702240"
  },
  {
    "text": "code at any time using the node command",
    "start": "702240",
    "end": "704440"
  },
  {
    "text": "this opens the door to Frameworks like",
    "start": "704440",
    "end": "705959"
  },
  {
    "text": "electron which combine node.js with a",
    "start": "705959",
    "end": "708279"
  },
  {
    "text": "browser to create full stack desktop",
    "start": "708279",
    "end": "710440"
  },
  {
    "text": "apps with JavaScript or IOS and Android",
    "start": "710440",
    "end": "712760"
  },
  {
    "text": "apps with react native at this point",
    "start": "712760",
    "end": "714680"
  },
  {
    "text": "you've got 99 problems and JavaScript is",
    "start": "714680",
    "end": "717160"
  },
  {
    "text": "every single one of them if you want to",
    "start": "717160",
    "end": "718600"
  },
  {
    "text": "make life easier here use a tool like",
    "start": "718600",
    "end": "720120"
  },
  {
    "text": "typescript or ES lent that does static",
    "start": "720120",
    "end": "722279"
  },
  {
    "text": "analysis to improve your code quality",
    "start": "722279",
    "end": "724240"
  },
  {
    "text": "congratulations for reaching the end of",
    "start": "724240",
    "end": "726040"
  },
  {
    "text": "JavaScript 101 if you want to go beyond",
    "start": "726040",
    "end": "728040"
  },
  {
    "text": "this video I just released a brand new",
    "start": "728040",
    "end": "729920"
  },
  {
    "text": "JavaScript course on fireship IO this",
    "start": "729920",
    "end": "732200"
  },
  {
    "text": "video is the introduction to that course",
    "start": "732200",
    "end": "734199"
  },
  {
    "text": "which is followed by a deeper dive into",
    "start": "734199",
    "end": "735880"
  },
  {
    "text": "these Concepts then we work on some",
    "start": "735880",
    "end": "737519"
  },
  {
    "text": "Hands-On projects with a bunch of",
    "start": "737519",
    "end": "739120"
  },
  {
    "text": "quizzes along the way thanks for",
    "start": "739120",
    "end": "740720"
  },
  {
    "text": "watching and I will see you in the next",
    "start": "740720",
    "end": "742440"
  },
  {
    "text": "one",
    "start": "742440",
    "end": "745279"
  }
]