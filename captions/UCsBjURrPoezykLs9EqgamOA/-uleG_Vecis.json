[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "what's the first thing you should do",
    "start": "80",
    "end": "1360"
  },
  {
    "text": "when your code throws an error obviously",
    "start": "1360",
    "end": "3439"
  },
  {
    "text": "you should change nothing and try to run",
    "start": "3439",
    "end": "5120"
  },
  {
    "text": "it again a few times if that doesn't",
    "start": "5120",
    "end": "6799"
  },
  {
    "text": "work you're gonna need a computer",
    "start": "6799",
    "end": "8160"
  },
  {
    "text": "science degree the awesome thing about",
    "start": "8160",
    "end": "9760"
  },
  {
    "text": "software engineering is that you can",
    "start": "9760",
    "end": "11280"
  },
  {
    "text": "learn to code and get a high paying job",
    "start": "11280",
    "end": "13360"
  },
  {
    "text": "while literally having no idea how",
    "start": "13360",
    "end": "15120"
  },
  {
    "text": "anything actually works it all just",
    "start": "15120",
    "end": "16560"
  },
  {
    "text": "feels like magic like a pilot driving a",
    "start": "16560",
    "end": "18880"
  },
  {
    "text": "giant metal tube in the sky while",
    "start": "18880",
    "end": "20320"
  },
  {
    "text": "knowing nothing about aerodynamics",
    "start": "20320",
    "end": "23520"
  },
  {
    "text": "[Music]",
    "start": "23520",
    "end": "24720"
  },
  {
    "text": "welcome to computer science 101 in",
    "start": "24720",
    "end": "26720"
  },
  {
    "text": "today's video you'll learn the science",
    "start": "26720",
    "end": "28400"
  },
  {
    "text": "behind the garbage code you've been",
    "start": "28400",
    "end": "29599"
  },
  {
    "text": "writing by learning 101 different",
    "start": "29599",
    "end": "31599"
  },
  {
    "text": "computer science terms and concepts this",
    "start": "31599",
    "end": "33760"
  },
  {
    "start": "33000",
    "end": "79000"
  },
  {
    "text": "is a computer it's just a piece of tape",
    "start": "33760",
    "end": "35760"
  },
  {
    "text": "that holds ones and zeros along with a",
    "start": "35760",
    "end": "37680"
  },
  {
    "text": "device that can read and write to it",
    "start": "37680",
    "end": "39520"
  },
  {
    "text": "it's called a turing machine and in",
    "start": "39520",
    "end": "41120"
  },
  {
    "text": "theory it can compute anything like the",
    "start": "41120",
    "end": "43040"
  },
  {
    "text": "graphics in this video or the algorithm",
    "start": "43040",
    "end": "44960"
  },
  {
    "text": "that recommended that you watch it at",
    "start": "44960",
    "end": "46640"
  },
  {
    "text": "the core of modern computers we have the",
    "start": "46640",
    "end": "48480"
  },
  {
    "text": "central processing unit if we crack it",
    "start": "48480",
    "end": "50399"
  },
  {
    "text": "open we find a piece of silicon that",
    "start": "50399",
    "end": "52160"
  },
  {
    "text": "contains billions of tiny transistors",
    "start": "52160",
    "end": "54160"
  },
  {
    "text": "which are like microscopic on off",
    "start": "54160",
    "end": "55920"
  },
  {
    "text": "switches the value at one of these",
    "start": "55920",
    "end": "57440"
  },
  {
    "text": "switches is called a bit and is the",
    "start": "57440",
    "end": "59120"
  },
  {
    "text": "smallest piece of information a computer",
    "start": "59120",
    "end": "60879"
  },
  {
    "text": "can use however one bit by itself is not",
    "start": "60879",
    "end": "63280"
  },
  {
    "text": "very useful so they come in a package of",
    "start": "63280",
    "end": "65119"
  },
  {
    "text": "eight called a byte one byte can",
    "start": "65119",
    "end": "66799"
  },
  {
    "text": "represent 256 different values like all",
    "start": "66799",
    "end": "69600"
  },
  {
    "text": "the characters that you type on your",
    "start": "69600",
    "end": "71040"
  },
  {
    "text": "keyboard in fact when you type into your",
    "start": "71040",
    "end": "72799"
  },
  {
    "text": "keyboard the character produced is",
    "start": "72799",
    "end": "74479"
  },
  {
    "text": "actually mapped to a binary value in a",
    "start": "74479",
    "end": "76560"
  },
  {
    "text": "character encoding like ascii or utf-8",
    "start": "76560",
    "end": "79200"
  },
  {
    "start": "79000",
    "end": "201000"
  },
  {
    "text": "binary is just a system for counting",
    "start": "79200",
    "end": "81360"
  },
  {
    "text": "like the base 10 system you normally use",
    "start": "81360",
    "end": "83200"
  },
  {
    "text": "when counting on your fingers but it",
    "start": "83200",
    "end": "85040"
  },
  {
    "text": "only has two characters one and zero",
    "start": "85040",
    "end": "87200"
  },
  {
    "text": "humans have a hard time reading binary",
    "start": "87200",
    "end": "89040"
  },
  {
    "text": "so most often it's represented in a",
    "start": "89040",
    "end": "91119"
  },
  {
    "text": "hexadecimal base 16 format where ten",
    "start": "91119",
    "end": "93680"
  },
  {
    "text": "numbers and six letters can represent a",
    "start": "93680",
    "end": "95920"
  },
  {
    "text": "four bit group called a nibble as a",
    "start": "95920",
    "end": "97759"
  },
  {
    "text": "developer when you write code in a",
    "start": "97759",
    "end": "99280"
  },
  {
    "text": "programming language it will eventually",
    "start": "99280",
    "end": "100880"
  },
  {
    "text": "be converted into machine code which is",
    "start": "100880",
    "end": "102720"
  },
  {
    "text": "a binary format that can be decoded and",
    "start": "102720",
    "end": "104960"
  },
  {
    "text": "executed by the cpu what it doesn't do",
    "start": "104960",
    "end": "107040"
  },
  {
    "text": "though is store data for your",
    "start": "107040",
    "end": "108640"
  },
  {
    "text": "applications for that computers have",
    "start": "108640",
    "end": "110560"
  },
  {
    "text": "random access memory or ram it's like a",
    "start": "110560",
    "end": "113040"
  },
  {
    "text": "neighborhood and inside of every house",
    "start": "113040",
    "end": "115040"
  },
  {
    "text": "lives a byte every location has a memory",
    "start": "115040",
    "end": "117280"
  },
  {
    "text": "address which the cpu can read and write",
    "start": "117280",
    "end": "119600"
  },
  {
    "text": "to you can think of the cpu and ram as",
    "start": "119600",
    "end": "121680"
  },
  {
    "text": "the brain of the computer but in order",
    "start": "121680",
    "end": "123360"
  },
  {
    "text": "for a computer to be useful it needs to",
    "start": "123360",
    "end": "125200"
  },
  {
    "text": "handle input and output an input device",
    "start": "125200",
    "end": "127360"
  },
  {
    "text": "might be the keyboard and mouse while an",
    "start": "127360",
    "end": "129039"
  },
  {
    "text": "output device might be your monitor",
    "start": "129039",
    "end": "130560"
  },
  {
    "text": "luckily most developers don't need to",
    "start": "130560",
    "end": "132160"
  },
  {
    "text": "worry about how this hardware fits",
    "start": "132160",
    "end": "133520"
  },
  {
    "text": "together because we have operating",
    "start": "133520",
    "end": "135200"
  },
  {
    "text": "system kernels like linux mac and",
    "start": "135200",
    "end": "137040"
  },
  {
    "text": "windows that control all hardware",
    "start": "137040",
    "end": "138640"
  },
  {
    "text": "resources via device drivers now to",
    "start": "138640",
    "end": "141040"
  },
  {
    "text": "start hacking on the operating system",
    "start": "141040",
    "end": "142720"
  },
  {
    "text": "your first entry point is the shell",
    "start": "142720",
    "end": "144560"
  },
  {
    "text": "which is a program that exposes the",
    "start": "144560",
    "end": "146319"
  },
  {
    "text": "operating system to the end user it's",
    "start": "146319",
    "end": "148400"
  },
  {
    "text": "called a shell because it wraps the",
    "start": "148400",
    "end": "150080"
  },
  {
    "text": "kernel it takes a line of text as input",
    "start": "150080",
    "end": "152319"
  },
  {
    "text": "and produces an output this is called a",
    "start": "152319",
    "end": "154319"
  },
  {
    "text": "command line interface not only can it",
    "start": "154319",
    "end": "156319"
  },
  {
    "text": "connect to your own computer but with",
    "start": "156319",
    "end": "157920"
  },
  {
    "text": "the secure shell protocol it can also",
    "start": "157920",
    "end": "159840"
  },
  {
    "text": "connect to remote computers over a",
    "start": "159840",
    "end": "161599"
  },
  {
    "text": "network now that you have access to the",
    "start": "161599",
    "end": "163200"
  },
  {
    "text": "mainframe it's time to pick a",
    "start": "163200",
    "end": "164879"
  },
  {
    "text": "programming language which is a tool",
    "start": "164879",
    "end": "166560"
  },
  {
    "text": "that uses the abstraction principle to",
    "start": "166560",
    "end": "168480"
  },
  {
    "text": "make computers practical to work with",
    "start": "168480",
    "end": "170080"
  },
  {
    "text": "for humans by simplifying different",
    "start": "170080",
    "end": "172080"
  },
  {
    "text": "systems layer by layer some languages",
    "start": "172080",
    "end": "174080"
  },
  {
    "text": "like python are interpreted that means",
    "start": "174080",
    "end": "176080"
  },
  {
    "text": "there's a program called an interpreter",
    "start": "176080",
    "end": "177920"
  },
  {
    "text": "that will execute each line of code one",
    "start": "177920",
    "end": "179760"
  },
  {
    "text": "by one other languages like c plus are",
    "start": "179760",
    "end": "182239"
  },
  {
    "text": "compiled they use a compiler to convert",
    "start": "182239",
    "end": "184560"
  },
  {
    "text": "the entire program into machine code in",
    "start": "184560",
    "end": "186800"
  },
  {
    "text": "advance before the cpu attempts to",
    "start": "186800",
    "end": "188800"
  },
  {
    "text": "execute it this results in an executable",
    "start": "188800",
    "end": "190879"
  },
  {
    "text": "file that can be run by the operating",
    "start": "190879",
    "end": "192720"
  },
  {
    "text": "system without any extra dependencies",
    "start": "192720",
    "end": "194879"
  },
  {
    "text": "now every programming language has a",
    "start": "194879",
    "end": "196560"
  },
  {
    "text": "variety of built-in data types to",
    "start": "196560",
    "end": "198640"
  },
  {
    "text": "represent the data we're working with in",
    "start": "198640",
    "end": "200319"
  },
  {
    "text": "our code instead of bytes we work with",
    "start": "200319",
    "end": "202080"
  },
  {
    "start": "201000",
    "end": "259000"
  },
  {
    "text": "more human-friendly things like",
    "start": "202080",
    "end": "203519"
  },
  {
    "text": "characters and numbers now the most",
    "start": "203519",
    "end": "205200"
  },
  {
    "text": "fundamental way to use data in your",
    "start": "205200",
    "end": "206879"
  },
  {
    "text": "application is to declare a variable",
    "start": "206879",
    "end": "209200"
  },
  {
    "text": "this attaches a name to a data point",
    "start": "209200",
    "end": "211120"
  },
  {
    "text": "allowing you to reuse it somewhere else",
    "start": "211120",
    "end": "212959"
  },
  {
    "text": "in your code python is a dynamically",
    "start": "212959",
    "end": "215120"
  },
  {
    "text": "typed language which means we don't need",
    "start": "215120",
    "end": "216799"
  },
  {
    "text": "to tell the program exactly which data",
    "start": "216799",
    "end": "218799"
  },
  {
    "text": "type is assigned to a variable it just",
    "start": "218799",
    "end": "220799"
  },
  {
    "text": "figures it out automatically however",
    "start": "220799",
    "end": "222720"
  },
  {
    "text": "other languages like c are statically",
    "start": "222720",
    "end": "224799"
  },
  {
    "text": "typed and that means you need to specify",
    "start": "224799",
    "end": "226560"
  },
  {
    "text": "the data type of a variable in your code",
    "start": "226560",
    "end": "228640"
  },
  {
    "text": "when you define a variable its value is",
    "start": "228640",
    "end": "230640"
  },
  {
    "text": "stored somewhere in memory on the",
    "start": "230640",
    "end": "232080"
  },
  {
    "text": "hardware and you may need to allocate",
    "start": "232080",
    "end": "233920"
  },
  {
    "text": "and free up memory throughout the",
    "start": "233920",
    "end": "235360"
  },
  {
    "text": "program a pointer is a variable whose",
    "start": "235360",
    "end": "237760"
  },
  {
    "text": "value is the memory address of another",
    "start": "237760",
    "end": "239920"
  },
  {
    "text": "variable which can be used for low-level",
    "start": "239920",
    "end": "242159"
  },
  {
    "text": "memory control many languages don't want",
    "start": "242159",
    "end": "244239"
  },
  {
    "text": "to deal with low-level memory management",
    "start": "244239",
    "end": "246239"
  },
  {
    "text": "and instead implement a garbage",
    "start": "246239",
    "end": "247840"
  },
  {
    "text": "collector which automatically allocates",
    "start": "247840",
    "end": "249840"
  },
  {
    "text": "and de-allocates memory when an object",
    "start": "249840",
    "end": "251920"
  },
  {
    "text": "is no longer referenced in the program",
    "start": "251920",
    "end": "255840"
  },
  {
    "text": "[Music]",
    "start": "256060",
    "end": "259759"
  },
  {
    "start": "259000",
    "end": "318000"
  },
  {
    "text": "now the data types available are",
    "start": "259759",
    "end": "261280"
  },
  {
    "text": "different in every programming language",
    "start": "261280",
    "end": "262960"
  },
  {
    "text": "but typically you'll find int to",
    "start": "262960",
    "end": "264400"
  },
  {
    "text": "represent whole numbers which may or may",
    "start": "264400",
    "end": "266320"
  },
  {
    "text": "not be signed or unsigned to represent",
    "start": "266320",
    "end": "268639"
  },
  {
    "text": "negative numbers as well when numbers",
    "start": "268639",
    "end": "270320"
  },
  {
    "text": "require a decimal point they typically",
    "start": "270320",
    "end": "272240"
  },
  {
    "text": "use the floating point type it's called",
    "start": "272240",
    "end": "274080"
  },
  {
    "text": "a float because there's only enough",
    "start": "274080",
    "end": "275600"
  },
  {
    "text": "memory to represent a certain range of",
    "start": "275600",
    "end": "277520"
  },
  {
    "text": "numbers at a certain precision and is",
    "start": "277520",
    "end": "279360"
  },
  {
    "text": "basically a form of scientific notation",
    "start": "279360",
    "end": "281360"
  },
  {
    "text": "to make computers faster if you need",
    "start": "281360",
    "end": "283120"
  },
  {
    "text": "more range or precision many languages",
    "start": "283120",
    "end": "284960"
  },
  {
    "text": "also have a double that doubles the",
    "start": "284960",
    "end": "286639"
  },
  {
    "text": "amount of memory used for the number now",
    "start": "286639",
    "end": "288320"
  },
  {
    "text": "when it comes to characters you'll",
    "start": "288320",
    "end": "289680"
  },
  {
    "text": "typically find the char data type to",
    "start": "289680",
    "end": "291360"
  },
  {
    "text": "represent a single character or more",
    "start": "291360",
    "end": "293280"
  },
  {
    "text": "commonly a string to represent multiple",
    "start": "293280",
    "end": "295600"
  },
  {
    "text": "characters together ultimately these",
    "start": "295600",
    "end": "297280"
  },
  {
    "text": "characters get stored in a memory",
    "start": "297280",
    "end": "298800"
  },
  {
    "text": "address somewhere but they need to be",
    "start": "298800",
    "end": "300240"
  },
  {
    "text": "stored in a certain order when the order",
    "start": "300240",
    "end": "302160"
  },
  {
    "text": "starts with the most significant byte",
    "start": "302160",
    "end": "303680"
  },
  {
    "text": "and the smallest memory address it's",
    "start": "303680",
    "end": "305280"
  },
  {
    "text": "called big endian or vice versa if the",
    "start": "305280",
    "end": "307600"
  },
  {
    "text": "least significant byte is stored in the",
    "start": "307600",
    "end": "309199"
  },
  {
    "text": "smallest address it's called little",
    "start": "309199",
    "end": "310960"
  },
  {
    "text": "endian when it comes to practical",
    "start": "310960",
    "end": "312560"
  },
  {
    "text": "software engineering one of the most",
    "start": "312560",
    "end": "313919"
  },
  {
    "text": "fundamental things we do is organize",
    "start": "313919",
    "end": "315840"
  },
  {
    "text": "data into data structures the most",
    "start": "315840",
    "end": "318000"
  },
  {
    "start": "318000",
    "end": "403000"
  },
  {
    "text": "useful data structure is probably the",
    "start": "318000",
    "end": "319919"
  },
  {
    "text": "array or list just like a shopping list",
    "start": "319919",
    "end": "322560"
  },
  {
    "text": "it organizes multiple data points in",
    "start": "322560",
    "end": "324560"
  },
  {
    "text": "order however it also maintains an index",
    "start": "324560",
    "end": "327039"
  },
  {
    "text": "of integers that starts at zero and goes",
    "start": "327039",
    "end": "329440"
  },
  {
    "text": "up for every new item in the list that",
    "start": "329440",
    "end": "331520"
  },
  {
    "text": "can be useful but you don't actually",
    "start": "331520",
    "end": "333039"
  },
  {
    "text": "need an index to create a list of items",
    "start": "333039",
    "end": "335120"
  },
  {
    "text": "another option is a linked list where",
    "start": "335120",
    "end": "336960"
  },
  {
    "text": "each item has a pointer to the next item",
    "start": "336960",
    "end": "339120"
  },
  {
    "text": "in front of it another option is a stack",
    "start": "339120",
    "end": "341440"
  },
  {
    "text": "that follows the last in first out",
    "start": "341440",
    "end": "343440"
  },
  {
    "text": "principle it's like stacking a set of",
    "start": "343440",
    "end": "345120"
  },
  {
    "text": "plates then when you want to access the",
    "start": "345120",
    "end": "346800"
  },
  {
    "text": "data you pop the last one off the top",
    "start": "346800",
    "end": "349039"
  },
  {
    "text": "the inverse option is a queue which is",
    "start": "349039",
    "end": "351120"
  },
  {
    "text": "first in first out just like when you",
    "start": "351120",
    "end": "353039"
  },
  {
    "text": "get into the red line the first person",
    "start": "353039",
    "end": "354720"
  },
  {
    "text": "there is the first one to be fed now",
    "start": "354720",
    "end": "356639"
  },
  {
    "text": "another extremely useful data structure",
    "start": "356639",
    "end": "358479"
  },
  {
    "text": "is the hash which might also be called a",
    "start": "358479",
    "end": "360639"
  },
  {
    "text": "map or dictionary it's like an array but",
    "start": "360639",
    "end": "362800"
  },
  {
    "text": "instead of an index of integers you",
    "start": "362800",
    "end": "364639"
  },
  {
    "text": "define the keys that point to each",
    "start": "364639",
    "end": "366160"
  },
  {
    "text": "individual item giving you a collection",
    "start": "366160",
    "end": "368479"
  },
  {
    "text": "of key value pairs in many cases though",
    "start": "368479",
    "end": "370800"
  },
  {
    "text": "it's not efficient to organize data in a",
    "start": "370800",
    "end": "372880"
  },
  {
    "text": "linear way to address that problem we",
    "start": "372880",
    "end": "374720"
  },
  {
    "text": "have trees which organize nodes together",
    "start": "374720",
    "end": "376800"
  },
  {
    "text": "in a hierarchy that can often be",
    "start": "376800",
    "end": "378639"
  },
  {
    "text": "traversed more quickly this can",
    "start": "378639",
    "end": "380000"
  },
  {
    "text": "sometimes be too rigid of a data",
    "start": "380000",
    "end": "381600"
  },
  {
    "text": "structure though so instead a graph can",
    "start": "381600",
    "end": "383600"
  },
  {
    "text": "be created to connect multiple nodes",
    "start": "383600",
    "end": "385360"
  },
  {
    "text": "together in a virtually unlimited number",
    "start": "385360",
    "end": "387280"
  },
  {
    "text": "of ways a graph has a node for the data",
    "start": "387280",
    "end": "389600"
  },
  {
    "text": "and an edge for the relationship between",
    "start": "389600",
    "end": "391600"
  },
  {
    "text": "the data points data structures are",
    "start": "391600",
    "end": "393280"
  },
  {
    "text": "essential but they don't do anything by",
    "start": "393280",
    "end": "394960"
  },
  {
    "text": "themselves to do something useful you'll",
    "start": "394960",
    "end": "396960"
  },
  {
    "text": "need to code up an algorithm which is",
    "start": "396960",
    "end": "398639"
  },
  {
    "text": "just code that solves a problem i took",
    "start": "398639",
    "end": "400880"
  },
  {
    "text": "the initiative in",
    "start": "400880",
    "end": "402319"
  },
  {
    "text": "creating the internet in our code we",
    "start": "402319",
    "end": "404080"
  },
  {
    "start": "403000",
    "end": "492000"
  },
  {
    "text": "have several mechanisms for implementing",
    "start": "404080",
    "end": "405919"
  },
  {
    "text": "algorithms the most fundamental of which",
    "start": "405919",
    "end": "407680"
  },
  {
    "text": "is a function which is a block of code",
    "start": "407680",
    "end": "409840"
  },
  {
    "text": "that takes an input then does something",
    "start": "409840",
    "end": "412080"
  },
  {
    "text": "and returns an output like a variable a",
    "start": "412080",
    "end": "414319"
  },
  {
    "text": "function has a name and it can be called",
    "start": "414319",
    "end": "416160"
  },
  {
    "text": "from other parts of your code with",
    "start": "416160",
    "end": "417680"
  },
  {
    "text": "different input parameters called",
    "start": "417680",
    "end": "419280"
  },
  {
    "text": "arguments one thing you might do in the",
    "start": "419280",
    "end": "420880"
  },
  {
    "text": "function body is compare one value to",
    "start": "420880",
    "end": "422960"
  },
  {
    "text": "another every language has a variety of",
    "start": "422960",
    "end": "425199"
  },
  {
    "text": "built-in operators like equality greater",
    "start": "425199",
    "end": "427680"
  },
  {
    "text": "than and less than that you can use to",
    "start": "427680",
    "end": "429599"
  },
  {
    "text": "compare two values if a is greater than",
    "start": "429599",
    "end": "431680"
  },
  {
    "text": "b then it forms a value of true but if b",
    "start": "431680",
    "end": "434319"
  },
  {
    "text": "is greater than a then the value is",
    "start": "434319",
    "end": "435919"
  },
  {
    "text": "false true false is what's known as a",
    "start": "435919",
    "end": "438000"
  },
  {
    "text": "boolean data type and whenever your code",
    "start": "438000",
    "end": "439840"
  },
  {
    "text": "produces a value like this it's known as",
    "start": "439840",
    "end": "441840"
  },
  {
    "text": "an expression but not all code will",
    "start": "441840",
    "end": "443759"
  },
  {
    "text": "produce a value sometimes your code will",
    "start": "443759",
    "end": "445440"
  },
  {
    "text": "simply do something which is known as a",
    "start": "445440",
    "end": "447440"
  },
  {
    "text": "statement a good example is the if",
    "start": "447440",
    "end": "449520"
  },
  {
    "text": "statement which handles conditional",
    "start": "449520",
    "end": "451360"
  },
  {
    "text": "logic for example if the condition is",
    "start": "451360",
    "end": "453440"
  },
  {
    "text": "true it will execute this code otherwise",
    "start": "453440",
    "end": "455680"
  },
  {
    "text": "it will short circuit and run the code",
    "start": "455680",
    "end": "457599"
  },
  {
    "text": "inside of the else block another very",
    "start": "457599",
    "end": "459680"
  },
  {
    "text": "common type of statement is a loop a",
    "start": "459680",
    "end": "461759"
  },
  {
    "text": "while loop will run this block of code",
    "start": "461759",
    "end": "463520"
  },
  {
    "text": "over and over again until the condition",
    "start": "463520",
    "end": "465440"
  },
  {
    "text": "in the parentheses becomes false that",
    "start": "465440",
    "end": "467280"
  },
  {
    "text": "can be useful but more often than not",
    "start": "467280",
    "end": "469199"
  },
  {
    "text": "you'll want to loop over an iterable",
    "start": "469199",
    "end": "470960"
  },
  {
    "text": "data type like an array most languages",
    "start": "470960",
    "end": "473039"
  },
  {
    "text": "have a for loop that can run some code",
    "start": "473039",
    "end": "474800"
  },
  {
    "text": "for every object in the array or",
    "start": "474800",
    "end": "476639"
  },
  {
    "text": "iterable data structure now in some",
    "start": "476639",
    "end": "478479"
  },
  {
    "text": "cases a function may not have an output",
    "start": "478479",
    "end": "480879"
  },
  {
    "text": "which is generally called a void",
    "start": "480879",
    "end": "482479"
  },
  {
    "text": "function an interesting thing about",
    "start": "482479",
    "end": "484000"
  },
  {
    "text": "functions is that they can call",
    "start": "484000",
    "end": "485440"
  },
  {
    "text": "themselves when a function calls itself",
    "start": "485440",
    "end": "487440"
  },
  {
    "text": "it's called recursion because when done",
    "start": "487440",
    "end": "489199"
  },
  {
    "text": "like this by default it will recurse",
    "start": "489199",
    "end": "490960"
  },
  {
    "text": "forever creating an infinite loop that",
    "start": "490960",
    "end": "493039"
  },
  {
    "text": "happens because when you call a function",
    "start": "493039",
    "end": "494720"
  },
  {
    "text": "the programming language will put it",
    "start": "494720",
    "end": "496240"
  },
  {
    "text": "into memory on what's known as the call",
    "start": "496240",
    "end": "498319"
  },
  {
    "text": "stack which is a short-term chunk of",
    "start": "498319",
    "end": "499840"
  },
  {
    "text": "memory for executing your code when a",
    "start": "499840",
    "end": "501759"
  },
  {
    "text": "function keeps calling itself the",
    "start": "501759",
    "end": "503280"
  },
  {
    "text": "language will keep pushing frames onto",
    "start": "503280",
    "end": "504800"
  },
  {
    "text": "the call stack until you get a stack",
    "start": "504800",
    "end": "506720"
  },
  {
    "text": "overflow error to avoid this your",
    "start": "506720",
    "end": "508560"
  },
  {
    "text": "algorithm needs a base condition so it",
    "start": "508560",
    "end": "510400"
  },
  {
    "text": "knows when to terminate the loop now",
    "start": "510400",
    "end": "512000"
  },
  {
    "text": "when you write an algorithm you'll need",
    "start": "512000",
    "end": "513440"
  },
  {
    "text": "to determine if it's any good and the",
    "start": "513440",
    "end": "514880"
  },
  {
    "text": "system for doing that is called big-o",
    "start": "514880",
    "end": "516800"
  },
  {
    "text": "notation it's a standard format for",
    "start": "516800",
    "end": "518800"
  },
  {
    "text": "approximating the performance of an",
    "start": "518800",
    "end": "520320"
  },
  {
    "text": "algorithm at scale it may reference time",
    "start": "520320",
    "end": "522320"
  },
  {
    "text": "complexity which is how fast your",
    "start": "522320",
    "end": "524080"
  },
  {
    "text": "algorithm will run and space complexity",
    "start": "524080",
    "end": "526240"
  },
  {
    "text": "which deals with how much memory is",
    "start": "526240",
    "end": "527760"
  },
  {
    "text": "required to run it developers have many",
    "start": "527760",
    "end": "529839"
  },
  {
    "text": "different algorithm types at their",
    "start": "529839",
    "end": "531200"
  },
  {
    "text": "disposal the most crude option is brute",
    "start": "531200",
    "end": "533279"
  },
  {
    "text": "force where you might loop over every",
    "start": "533279",
    "end": "534880"
  },
  {
    "text": "possible combination to hack somebody's",
    "start": "534880",
    "end": "536880"
  },
  {
    "text": "credit card pin a more sophisticated",
    "start": "536880",
    "end": "538640"
  },
  {
    "text": "approach might be divide and conquer",
    "start": "538640",
    "end": "540320"
  },
  {
    "text": "like binary search where you cut the",
    "start": "540320",
    "end": "542000"
  },
  {
    "text": "problem in half multiple times until you",
    "start": "542000",
    "end": "543920"
  },
  {
    "text": "find what you're looking for another",
    "start": "543920",
    "end": "545519"
  },
  {
    "text": "option is dynamic programming algorithms",
    "start": "545519",
    "end": "547920"
  },
  {
    "text": "where a problem is broken down into",
    "start": "547920",
    "end": "549839"
  },
  {
    "start": "548000",
    "end": "592000"
  },
  {
    "text": "multiple smaller sub-problems and the",
    "start": "549839",
    "end": "551680"
  },
  {
    "text": "result of each computation is stored for",
    "start": "551680",
    "end": "553920"
  },
  {
    "text": "later use using a technique called",
    "start": "553920",
    "end": "556000"
  },
  {
    "text": "memoization that means if a function has",
    "start": "556000",
    "end": "557920"
  },
  {
    "text": "already been called it will use the",
    "start": "557920",
    "end": "559360"
  },
  {
    "text": "existing value instead of recomputing it",
    "start": "559360",
    "end": "561519"
  },
  {
    "text": "again from scratch then we have greedy",
    "start": "561519",
    "end": "563279"
  },
  {
    "text": "algorithms that will make the choice",
    "start": "563279",
    "end": "564640"
  },
  {
    "text": "that is most beneficial in the short",
    "start": "564640",
    "end": "566320"
  },
  {
    "text": "term without considering the problem as",
    "start": "566320",
    "end": "568080"
  },
  {
    "text": "a whole one example of this is",
    "start": "568080",
    "end": "569760"
  },
  {
    "text": "dijkstra's shortest path algorithm on",
    "start": "569760",
    "end": "571680"
  },
  {
    "text": "the flip side we have backtracking",
    "start": "571680",
    "end": "573519"
  },
  {
    "text": "algorithms which take a more incremental",
    "start": "573519",
    "end": "575440"
  },
  {
    "text": "approach by looking at all the possible",
    "start": "575440",
    "end": "577360"
  },
  {
    "text": "options like a rat and a maze exploring",
    "start": "577360",
    "end": "579600"
  },
  {
    "text": "all the different potential paths now",
    "start": "579600",
    "end": "581200"
  },
  {
    "text": "when it comes to implementing your code",
    "start": "581200",
    "end": "582800"
  },
  {
    "text": "there are always multiple ways to get",
    "start": "582800",
    "end": "584399"
  },
  {
    "text": "the job done one programming paradigm is",
    "start": "584399",
    "end": "586560"
  },
  {
    "text": "declarative where your code describes",
    "start": "586560",
    "end": "588399"
  },
  {
    "text": "what the program does and the outcome",
    "start": "588399",
    "end": "590320"
  },
  {
    "text": "but doesn't care about things like",
    "start": "590320",
    "end": "591680"
  },
  {
    "text": "control flow this style of programming",
    "start": "591680",
    "end": "593519"
  },
  {
    "start": "592000",
    "end": "675000"
  },
  {
    "text": "is often associated with functional",
    "start": "593519",
    "end": "595120"
  },
  {
    "text": "languages like haskell the other",
    "start": "595120",
    "end": "596880"
  },
  {
    "text": "paradigm is imperative programming where",
    "start": "596880",
    "end": "598880"
  },
  {
    "text": "your code uses statements like if and",
    "start": "598880",
    "end": "600880"
  },
  {
    "text": "while providing explicit instructions",
    "start": "600880",
    "end": "602880"
  },
  {
    "text": "about how to produce an outcome it's",
    "start": "602880",
    "end": "604800"
  },
  {
    "text": "associated with procedural languages",
    "start": "604800",
    "end": "606560"
  },
  {
    "text": "like c today most general purpose",
    "start": "606560",
    "end": "608560"
  },
  {
    "text": "languages like python javascript kotlin",
    "start": "608560",
    "end": "610959"
  },
  {
    "text": "swift and so on are multi-paradigm which",
    "start": "610959",
    "end": "613040"
  },
  {
    "text": "means they support all these options at",
    "start": "613040",
    "end": "614640"
  },
  {
    "text": "the same time in addition to",
    "start": "614640",
    "end": "616320"
  },
  {
    "text": "object-oriented programming the idea",
    "start": "616320",
    "end": "618240"
  },
  {
    "text": "behind oop is that you use classes to",
    "start": "618240",
    "end": "620480"
  },
  {
    "text": "write a blueprint for the data or",
    "start": "620480",
    "end": "622480"
  },
  {
    "text": "objects in your code a class can",
    "start": "622480",
    "end": "624399"
  },
  {
    "text": "encapsulate variables which are commonly",
    "start": "624399",
    "end": "626240"
  },
  {
    "text": "called properties as well as functions",
    "start": "626240",
    "end": "628160"
  },
  {
    "text": "which are usually called methods in this",
    "start": "628160",
    "end": "629839"
  },
  {
    "text": "context it's a common way to organize",
    "start": "629839",
    "end": "631920"
  },
  {
    "text": "and reuse code because classes can share",
    "start": "631920",
    "end": "634000"
  },
  {
    "text": "behaviors between each other through",
    "start": "634000",
    "end": "635519"
  },
  {
    "text": "inheritance where a subclass can extend",
    "start": "635519",
    "end": "637920"
  },
  {
    "text": "and override the behaviors of the parent",
    "start": "637920",
    "end": "639839"
  },
  {
    "text": "class and it opens the door to all kinds",
    "start": "639839",
    "end": "641680"
  },
  {
    "text": "of other ideas called design patterns",
    "start": "641680",
    "end": "643760"
  },
  {
    "text": "now a class by itself doesn't actually",
    "start": "643760",
    "end": "645600"
  },
  {
    "text": "do anything instead it's used to",
    "start": "645600",
    "end": "647519"
  },
  {
    "text": "instantiate objects which are actual",
    "start": "647519",
    "end": "649519"
  },
  {
    "text": "chunks of data that live in your",
    "start": "649519",
    "end": "651040"
  },
  {
    "text": "computer's memory often you'll want to",
    "start": "651040",
    "end": "652959"
  },
  {
    "text": "reference the same object over and over",
    "start": "652959",
    "end": "654880"
  },
  {
    "text": "again in your code when data is",
    "start": "654880",
    "end": "656320"
  },
  {
    "text": "long-lived it can't go in the call stack",
    "start": "656320",
    "end": "658320"
  },
  {
    "text": "instead most languages have a separate",
    "start": "658320",
    "end": "660079"
  },
  {
    "text": "area of memory called the heap which",
    "start": "660079",
    "end": "661839"
  },
  {
    "text": "unlike the call stack can grow and",
    "start": "661839",
    "end": "663519"
  },
  {
    "text": "shrink based on how your application is",
    "start": "663519",
    "end": "665519"
  },
  {
    "text": "used it also allows you to pass objects",
    "start": "665519",
    "end": "667760"
  },
  {
    "text": "by reference which means you can use the",
    "start": "667760",
    "end": "669440"
  },
  {
    "text": "same object in multiple variables",
    "start": "669440",
    "end": "671200"
  },
  {
    "text": "without increasing the memory footprint",
    "start": "671200",
    "end": "672959"
  },
  {
    "text": "because it always points to the same",
    "start": "672959",
    "end": "674240"
  },
  {
    "text": "chunk of memory in the heap now what's",
    "start": "674240",
    "end": "675920"
  },
  {
    "text": "interesting is that if we go back to the",
    "start": "675920",
    "end": "677519"
  },
  {
    "text": "cpu that we talked about in the",
    "start": "677519",
    "end": "678959"
  },
  {
    "text": "beginning you'll notice that it contains",
    "start": "678959",
    "end": "680720"
  },
  {
    "text": "multiple threads a thread takes the",
    "start": "680720",
    "end": "682720"
  },
  {
    "text": "physical cpu core and breaks it into",
    "start": "682720",
    "end": "684959"
  },
  {
    "text": "virtual cores that allow it to run code",
    "start": "684959",
    "end": "686880"
  },
  {
    "text": "simultaneously there are some",
    "start": "686880",
    "end": "688320"
  },
  {
    "text": "programming languages that support",
    "start": "688320",
    "end": "689680"
  },
  {
    "text": "parallelism where you can write code",
    "start": "689680",
    "end": "691279"
  },
  {
    "text": "that literally executes on two different",
    "start": "691279",
    "end": "693200"
  },
  {
    "text": "threads at the same time however many",
    "start": "693200",
    "end": "695279"
  },
  {
    "text": "languages out there are only single",
    "start": "695279",
    "end": "696800"
  },
  {
    "text": "threaded but that doesn't mean they",
    "start": "696800",
    "end": "698160"
  },
  {
    "text": "can't do two things at the same time",
    "start": "698160",
    "end": "700079"
  },
  {
    "text": "instead they implement concurrency",
    "start": "700079",
    "end": "701680"
  },
  {
    "text": "models like an event loop or co-routines",
    "start": "701680",
    "end": "704160"
  },
  {
    "text": "that can pause or delay the normal",
    "start": "704160",
    "end": "705839"
  },
  {
    "text": "execution of code to handle multiple",
    "start": "705839",
    "end": "707600"
  },
  {
    "text": "jobs on a single thread at the same time",
    "start": "707600",
    "end": "709600"
  },
  {
    "text": "now in modern computing we're rarely",
    "start": "709600",
    "end": "711519"
  },
  {
    "text": "working with the bare metal cpu and ram",
    "start": "711519",
    "end": "713839"
  },
  {
    "text": "instead we work in the cloud with a",
    "start": "713839",
    "end": "715360"
  },
  {
    "text": "virtual machine which is just a piece of",
    "start": "715360",
    "end": "717279"
  },
  {
    "text": "software that simulates hardware that",
    "start": "717279",
    "end": "719360"
  },
  {
    "text": "allows us to take really big computers",
    "start": "719360",
    "end": "721279"
  },
  {
    "text": "and split them up into a bunch of",
    "start": "721279",
    "end": "722800"
  },
  {
    "text": "smaller virtual computers these machines",
    "start": "722800",
    "end": "724800"
  },
  {
    "text": "are the backbone of the internet and are",
    "start": "724800",
    "end": "726240"
  },
  {
    "text": "connected via the internet protocol each",
    "start": "726240",
    "end": "728240"
  },
  {
    "text": "machine has a unique ip address to",
    "start": "728240",
    "end": "730399"
  },
  {
    "text": "identify it on the network that ip",
    "start": "730399",
    "end": "732240"
  },
  {
    "text": "address is usually alias to a url that",
    "start": "732240",
    "end": "734720"
  },
  {
    "text": "is registered in a global database",
    "start": "734720",
    "end": "736480"
  },
  {
    "text": "called the domain name service now to",
    "start": "736480",
    "end": "738320"
  },
  {
    "text": "establish a connection the two computers",
    "start": "738320",
    "end": "740399"
  },
  {
    "text": "will perform a tcp handshake which will",
    "start": "740399",
    "end": "742880"
  },
  {
    "text": "allow them to exchange messages called",
    "start": "742880",
    "end": "744800"
  },
  {
    "text": "packets on top of that there's usually a",
    "start": "744800",
    "end": "746959"
  },
  {
    "text": "security layer like ssl to encrypt and",
    "start": "746959",
    "end": "749519"
  },
  {
    "text": "decrypt the messages over the network",
    "start": "749519",
    "end": "751440"
  },
  {
    "text": "now the two computers can securely share",
    "start": "751440",
    "end": "753360"
  },
  {
    "text": "data with the hypertext transfer",
    "start": "753360",
    "end": "755120"
  },
  {
    "text": "protocol the client may request a web",
    "start": "755120",
    "end": "757200"
  },
  {
    "text": "page then the server will respond with",
    "start": "757200",
    "end": "758959"
  },
  {
    "text": "some html modern servers provide a",
    "start": "758959",
    "end": "761200"
  },
  {
    "text": "standardized way for a client to request",
    "start": "761200",
    "end": "763279"
  },
  {
    "text": "data which is called an application",
    "start": "763279",
    "end": "765040"
  },
  {
    "text": "programming interface or api the most",
    "start": "765040",
    "end": "767360"
  },
  {
    "text": "common architecture is rest where urls",
    "start": "767360",
    "end": "769600"
  },
  {
    "text": "are mapped to different data entities",
    "start": "769600",
    "end": "771360"
  },
  {
    "text": "available on the server and that brings",
    "start": "771360",
    "end": "773120"
  },
  {
    "text": "us to our final topic mother effin",
    "start": "773120",
    "end": "775279"
  },
  {
    "text": "printers you're gonna need to learn how",
    "start": "775279",
    "end": "776720"
  },
  {
    "text": "these things work inside and out because",
    "start": "776720",
    "end": "778560"
  },
  {
    "text": "every time you go to grandma's house",
    "start": "778560",
    "end": "779920"
  },
  {
    "text": "she's going to ask you to fix it which",
    "start": "779920",
    "end": "781519"
  },
  {
    "text": "shouldn't be a problem for a computer",
    "start": "781519",
    "end": "783120"
  },
  {
    "text": "scientist like you thanks for watching",
    "start": "783120",
    "end": "785120"
  },
  {
    "text": "and i will see you in the next one",
    "start": "785120",
    "end": "789120"
  }
]