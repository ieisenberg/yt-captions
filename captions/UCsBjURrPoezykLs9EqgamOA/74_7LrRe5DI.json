[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "Pearl a dynamic interpreted scripting",
    "start": "120",
    "end": "2520"
  },
  {
    "text": "language famous for its powerful text",
    "start": "2520",
    "end": "4560"
  },
  {
    "text": "processing abilities it was developed in",
    "start": "4560",
    "end": "6660"
  },
  {
    "text": "1987 by Larry wall a linguist who",
    "start": "6660",
    "end": "9300"
  },
  {
    "text": "designed it to feel more like a human",
    "start": "9300",
    "end": "10800"
  },
  {
    "text": "language than a computer language when",
    "start": "10800",
    "end": "12599"
  },
  {
    "text": "someone says Pearl they're usually",
    "start": "12599",
    "end": "13980"
  },
  {
    "text": "talking about version 5. there was a",
    "start": "13980",
    "end": "15839"
  },
  {
    "text": "version 6 under development but it",
    "start": "15839",
    "end": "17520"
  },
  {
    "text": "evolved into another language called",
    "start": "17520",
    "end": "18900"
  },
  {
    "text": "Raku Pearl is often referred to as a",
    "start": "18900",
    "end": "21180"
  },
  {
    "text": "glue language and has been dubbed the",
    "start": "21180",
    "end": "22920"
  },
  {
    "text": "Swiss Army chainsaw of the Internet it's",
    "start": "22920",
    "end": "24660"
  },
  {
    "start": "23000",
    "end": "40000"
  },
  {
    "text": "most commonly used to write CGI scripts",
    "start": "24660",
    "end": "26699"
  },
  {
    "text": "that allow web servers to communicate",
    "start": "26699",
    "end": "28380"
  },
  {
    "text": "with external programs its powerful",
    "start": "28380",
    "end": "30359"
  },
  {
    "text": "string parsing abilities has made it the",
    "start": "30359",
    "end": "32219"
  },
  {
    "text": "language of choice on high traffic sites",
    "start": "32219",
    "end": "34020"
  },
  {
    "text": "like DuckDuckGo booking.com and",
    "start": "34020",
    "end": "36239"
  },
  {
    "text": "Craigslist syntactically it resembles C",
    "start": "36239",
    "end": "38399"
  },
  {
    "text": "but is far more compressed allowing",
    "start": "38399",
    "end": "40140"
  },
  {
    "start": "40000",
    "end": "60000"
  },
  {
    "text": "developers to write very tourist code",
    "start": "40140",
    "end": "41879"
  },
  {
    "text": "like one-liners that hack together a",
    "start": "41879",
    "end": "43620"
  },
  {
    "text": "solution much quicker than other",
    "start": "43620",
    "end": "44879"
  },
  {
    "text": "scripting languages like python it",
    "start": "44879",
    "end": "46680"
  },
  {
    "text": "contains a large collection of language",
    "start": "46680",
    "end": "48059"
  },
  {
    "text": "Primitives and a ton of shortcuts for",
    "start": "48059",
    "end": "50160"
  },
  {
    "text": "getting things done quickly you may find",
    "start": "50160",
    "end": "51899"
  },
  {
    "text": "it ugly and awkward but system",
    "start": "51899",
    "end": "53579"
  },
  {
    "text": "administrators love it because it gets",
    "start": "53579",
    "end": "55500"
  },
  {
    "text": "the job done to get started install the",
    "start": "55500",
    "end": "57360"
  },
  {
    "text": "Pearl interpreter then create a file",
    "start": "57360",
    "end": "59100"
  },
  {
    "text": "ending in.pl it's a scripting language",
    "start": "59100",
    "end": "61379"
  },
  {
    "text": "so we start with a shebang and point it",
    "start": "61379",
    "end": "63359"
  },
  {
    "text": "to the interpreter's binary declare a",
    "start": "63359",
    "end": "65280"
  },
  {
    "text": "variable with a dollar sign then print",
    "start": "65280",
    "end": "67020"
  },
  {
    "text": "it to the standard output and the",
    "start": "67020",
    "end": "68400"
  },
  {
    "text": "variable can be easily interpolated into",
    "start": "68400",
    "end": "70320"
  },
  {
    "text": "another string variables can be scoped",
    "start": "70320",
    "end": "72240"
  },
  {
    "text": "locally with the my keyword or globally",
    "start": "72240",
    "end": "74100"
  },
  {
    "text": "to an entire package with the hour",
    "start": "74100",
    "end": "75900"
  },
  {
    "text": "keyword the dollar sign creates a scalar",
    "start": "75900",
    "end": "78000"
  },
  {
    "text": "variable which is a single value like a",
    "start": "78000",
    "end": "80100"
  },
  {
    "text": "string or number if we change the dollar",
    "start": "80100",
    "end": "81659"
  },
  {
    "text": "sign to the at symbol this variable",
    "start": "81659",
    "end": "83520"
  },
  {
    "text": "becomes an array the index of any item",
    "start": "83520",
    "end": "85560"
  },
  {
    "text": "in the array can be accessed with",
    "start": "85560",
    "end": "87119"
  },
  {
    "text": "brackets now name the variable with a",
    "start": "87119",
    "end": "88979"
  },
  {
    "text": "percent sign to get a hash or key value",
    "start": "88979",
    "end": "91259"
  },
  {
    "text": "pair to access one of its Keys use",
    "start": "91259",
    "end": "93540"
  },
  {
    "text": "braces one of the design principles of",
    "start": "93540",
    "end": "95520"
  },
  {
    "start": "95000",
    "end": "145000"
  },
  {
    "text": "pearl is things that are different",
    "start": "95520",
    "end": "97020"
  },
  {
    "text": "should look different handle conditional",
    "start": "97020",
    "end": "98880"
  },
  {
    "text": "logic using IF or unless then make it",
    "start": "98880",
    "end": "101100"
  },
  {
    "text": "more concise by refactoring it to one",
    "start": "101100",
    "end": "103020"
  },
  {
    "text": "line then make it even more concise",
    "start": "103020",
    "end": "104640"
  },
  {
    "text": "using the ternary operator one of the",
    "start": "104640",
    "end": "106560"
  },
  {
    "text": "most unusual things about Pearl is that",
    "start": "106560",
    "end": "108479"
  },
  {
    "text": "your functions are defined as",
    "start": "108479",
    "end": "109920"
  },
  {
    "text": "subroutines instead of defining",
    "start": "109920",
    "end": "111600"
  },
  {
    "text": "parameters within parentheses like most",
    "start": "111600",
    "end": "113340"
  },
  {
    "text": "other languages any arguments passed to",
    "start": "113340",
    "end": "115380"
  },
  {
    "text": "the function can be accessed with the at",
    "start": "115380",
    "end": "117360"
  },
  {
    "text": "underscore array when it comes to",
    "start": "117360",
    "end": "118979"
  },
  {
    "text": "parsing text regex is built in and The",
    "start": "118979",
    "end": "121380"
  },
  {
    "text": "Binding operator can easily match a",
    "start": "121380",
    "end": "123180"
  },
  {
    "text": "string to a regular expression Pearl",
    "start": "123180",
    "end": "125159"
  },
  {
    "text": "also has a lot of magic features like",
    "start": "125159",
    "end": "127020"
  },
  {
    "text": "Auto vivification where if we try to",
    "start": "127020",
    "end": "129119"
  },
  {
    "text": "increment a value in an array that",
    "start": "129119",
    "end": "130860"
  },
  {
    "text": "doesn't exist it will automatically",
    "start": "130860",
    "end": "132239"
  },
  {
    "text": "bring to life all the elements in",
    "start": "132239",
    "end": "133980"
  },
  {
    "text": "between now to render code open the",
    "start": "133980",
    "end": "135720"
  },
  {
    "text": "terminal and run The Interpreter this",
    "start": "135720",
    "end": "137580"
  },
  {
    "text": "has been Pearl in 100 seconds hit the",
    "start": "137580",
    "end": "139739"
  },
  {
    "text": "like button and subscribe if you want to",
    "start": "139739",
    "end": "141300"
  },
  {
    "text": "see more short videos like this thanks",
    "start": "141300",
    "end": "142860"
  },
  {
    "text": "for watching and I will see you in the",
    "start": "142860",
    "end": "144840"
  },
  {
    "text": "next one",
    "start": "144840",
    "end": "147140"
  }
]