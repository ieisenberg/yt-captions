[
  {
    "text": "[Music]",
    "start": "0",
    "end": "5250"
  },
  {
    "text": "if you're building a social media or",
    "start": "6170",
    "end": "8760"
  },
  {
    "text": "chat app having real-time user presence",
    "start": "8760",
    "end": "10830"
  },
  {
    "text": "is very likely a critical feature",
    "start": "10830",
    "end": "12750"
  },
  {
    "text": "fortunately the firebase real-time",
    "start": "12750",
    "end": "14130"
  },
  {
    "text": "database makes it very easy to determine",
    "start": "14130",
    "end": "16049"
  },
  {
    "text": "whether or not a client is connected to",
    "start": "16049",
    "end": "17940"
  },
  {
    "text": "the database in today's video we'll use",
    "start": "17940",
    "end": "19560"
  },
  {
    "text": "this functionality to build a present",
    "start": "19560",
    "end": "21630"
  },
  {
    "text": "system that will show whether a user is",
    "start": "21630",
    "end": "23310"
  },
  {
    "text": "online offline or way if you're new to",
    "start": "23310",
    "end": "25529"
  },
  {
    "text": "the channel I can subscribe and make",
    "start": "25529",
    "end": "27119"
  },
  {
    "text": "sure to follow along with the full",
    "start": "27119",
    "end": "28109"
  },
  {
    "text": "source code on fire ship IO the first",
    "start": "28109",
    "end": "30330"
  },
  {
    "text": "thing that I want to point out is that",
    "start": "30330",
    "end": "31410"
  },
  {
    "text": "there are a lot of different edge cases",
    "start": "31410",
    "end": "33180"
  },
  {
    "text": "when building a presence system in",
    "start": "33180",
    "end": "34829"
  },
  {
    "text": "today's video we'll look at five",
    "start": "34829",
    "end": "35969"
  },
  {
    "text": "different situations that the user can",
    "start": "35969",
    "end": "37590"
  },
  {
    "text": "be in if they're signing and using the",
    "start": "37590",
    "end": "39180"
  },
  {
    "text": "app they should be online if they're",
    "start": "39180",
    "end": "40800"
  },
  {
    "text": "signed in but the app is closed they'll",
    "start": "40800",
    "end": "42239"
  },
  {
    "text": "be offline but if they're only on a",
    "start": "42239",
    "end": "43649"
  },
  {
    "text": "different browser tab then we'll just",
    "start": "43649",
    "end": "45030"
  },
  {
    "text": "set the status to away then in scenario",
    "start": "45030",
    "end": "47070"
  },
  {
    "text": "number four the user might be signed out",
    "start": "47070",
    "end": "48660"
  },
  {
    "text": "but still have the app open in which",
    "start": "48660",
    "end": "50340"
  },
  {
    "text": "case the connection will still be active",
    "start": "50340",
    "end": "51750"
  },
  {
    "text": "because firebase tracks the connection",
    "start": "51750",
    "end": "53699"
  },
  {
    "text": "to the device and not the authentication",
    "start": "53699",
    "end": "55800"
  },
  {
    "text": "state and if they're signed out in the",
    "start": "55800",
    "end": "57300"
  },
  {
    "text": "app is closed and of course the status",
    "start": "57300",
    "end": "58920"
  },
  {
    "text": "should be offline now let's take a look",
    "start": "58920",
    "end": "60539"
  },
  {
    "text": "at the database model that we'll use for",
    "start": "60539",
    "end": "62160"
  },
  {
    "text": "this we're in the real time database and",
    "start": "62160",
    "end": "64018"
  },
  {
    "text": "we have a note called status then for",
    "start": "64019",
    "end": "66000"
  },
  {
    "text": "each user will create a node based on",
    "start": "66000",
    "end": "67619"
  },
  {
    "text": "their user ID which contains the status",
    "start": "67619",
    "end": "69780"
  },
  {
    "text": "itself and also a timestamp for when it",
    "start": "69780",
    "end": "71820"
  },
  {
    "text": "was changed now let's look at how we",
    "start": "71820",
    "end": "73110"
  },
  {
    "text": "consume this data from the front-end",
    "start": "73110",
    "end": "74610"
  },
  {
    "text": "application on the Left we have the",
    "start": "74610",
    "end": "76110"
  },
  {
    "text": "actual user and then on the right we",
    "start": "76110",
    "end": "77670"
  },
  {
    "text": "just have an incognito browser to",
    "start": "77670",
    "end": "79229"
  },
  {
    "text": "observe the changes in the state when we",
    "start": "79229",
    "end": "81119"
  },
  {
    "text": "log in on the left you'll see that the",
    "start": "81119",
    "end": "82710"
  },
  {
    "text": "browser on the right also gets an",
    "start": "82710",
    "end": "84150"
  },
  {
    "text": "updated status for the user if these are",
    "start": "84150",
    "end": "87000"
  },
  {
    "text": "on the Left then switches to a different",
    "start": "87000",
    "end": "88439"
  },
  {
    "text": "browser tab the status will update to",
    "start": "88439",
    "end": "90479"
  },
  {
    "text": "away I just had to check my myspace for",
    "start": "90479",
    "end": "92520"
  },
  {
    "text": "a minute but when I flip back it will",
    "start": "92520",
    "end": "94020"
  },
  {
    "text": "immediately go back to online now if I",
    "start": "94020",
    "end": "96390"
  },
  {
    "text": "close the browser tab on the left it",
    "start": "96390",
    "end": "98100"
  },
  {
    "text": "will set my status to offline even",
    "start": "98100",
    "end": "99930"
  },
  {
    "text": "though I didn't technically sign out so",
    "start": "99930",
    "end": "101970"
  },
  {
    "text": "the general idea here is that we're",
    "start": "101970",
    "end": "103200"
  },
  {
    "text": "listening to state changes to the users",
    "start": "103200",
    "end": "105060"
  },
  {
    "text": "connection to the database as well as",
    "start": "105060",
    "end": "106770"
  },
  {
    "text": "their authentication state and then",
    "start": "106770",
    "end": "108299"
  },
  {
    "text": "updating the database in response to",
    "start": "108299",
    "end": "109860"
  },
  {
    "text": "those events and you may have noticed",
    "start": "109860",
    "end": "111450"
  },
  {
    "text": "that we're using the real-time database",
    "start": "111450",
    "end": "113070"
  },
  {
    "text": "and not firestorm that's because",
    "start": "113070",
    "end": "114509"
  },
  {
    "text": "presence is not currently supported in",
    "start": "114509",
    "end": "116130"
  },
  {
    "text": "firestore hopefully it is in the future",
    "start": "116130",
    "end": "117719"
  },
  {
    "text": "but for right now you can set up a cloud",
    "start": "117719",
    "end": "119850"
  },
  {
    "text": "function to mirror this data in fire",
    "start": "119850",
    "end": "121619"
  },
  {
    "text": "store if you really need it there",
    "start": "121619",
    "end": "123060"
  },
  {
    "text": "now we're going to jump into the code",
    "start": "123060",
    "end": "124799"
  },
  {
    "text": "but first he should have angularfire",
    "start": "124799",
    "end": "126299"
  },
  {
    "text": "installed in your angular project and",
    "start": "126299",
    "end": "128340"
  },
  {
    "text": "it's also a good idea to have a user",
    "start": "128340",
    "end": "129509"
  },
  {
    "text": "authentication system in place I'll show",
    "start": "129509",
    "end": "131160"
  },
  {
    "text": "all the relevant code in this video but",
    "start": "131160",
    "end": "132900"
  },
  {
    "text": "if you haven't already watch",
    "start": "132900",
    "end": "133680"
  },
  {
    "text": "one of my previous user off videos I",
    "start": "133680",
    "end": "135420"
  },
  {
    "text": "recommend doing that first the first",
    "start": "135420",
    "end": "137549"
  },
  {
    "text": "thing I'm going to do is generate a",
    "start": "137549",
    "end": "138569"
  },
  {
    "text": "service called presence and this will",
    "start": "138569",
    "end": "140430"
  },
  {
    "text": "handle all the business logic for this",
    "start": "140430",
    "end": "142170"
  },
  {
    "text": "feature if we go into the app module you",
    "start": "142170",
    "end": "144180"
  },
  {
    "text": "can see that we're importing angularfire",
    "start": "144180",
    "end": "145680"
  },
  {
    "text": "auth and the angular fired database I",
    "start": "145680",
    "end": "147750"
  },
  {
    "text": "have fire store in here as well but",
    "start": "147750",
    "end": "149459"
  },
  {
    "text": "that's not necessary for this feature",
    "start": "149459",
    "end": "150900"
  },
  {
    "text": "then the last setup thing I'll do is",
    "start": "150900",
    "end": "152909"
  },
  {
    "text": "generate a component called user which",
    "start": "152909",
    "end": "154709"
  },
  {
    "text": "will consume the actual status from the",
    "start": "154709",
    "end": "156480"
  },
  {
    "text": "database and handle the presentation",
    "start": "156480",
    "end": "158310"
  },
  {
    "text": "logic in the UI the bulk of the work",
    "start": "158310",
    "end": "160769"
  },
  {
    "text": "will be done in the service so let's go",
    "start": "160769",
    "end": "162389"
  },
  {
    "text": "ahead and start there first we'll import",
    "start": "162389",
    "end": "164430"
  },
  {
    "text": "angularfire auth and the database and",
    "start": "164430",
    "end": "166379"
  },
  {
    "text": "then we have a few things here from rxjs",
    "start": "166379",
    "end": "168359"
  },
  {
    "text": "that you'll see in use here in a minute",
    "start": "168359",
    "end": "169650"
  },
  {
    "text": "and just as a reference I've commented",
    "start": "169650",
    "end": "171540"
  },
  {
    "text": "in the 5 different states that the user",
    "start": "171540",
    "end": "173400"
  },
  {
    "text": "might be in from there we'll go down to",
    "start": "173400",
    "end": "175590"
  },
  {
    "text": "the constructor and will inject",
    "start": "175590",
    "end": "177030"
  },
  {
    "text": "angularfire auth and the database and",
    "start": "177030",
    "end": "178950"
  },
  {
    "text": "we'll set up a few global subscriptions",
    "start": "178950",
    "end": "181049"
  },
  {
    "text": "here we'll define these in just a minute",
    "start": "181049",
    "end": "183239"
  },
  {
    "text": "but basically we're going to listen to",
    "start": "183239",
    "end": "185040"
  },
  {
    "text": "the users off state we're also going to",
    "start": "185040",
    "end": "187139"
  },
  {
    "text": "listen to an on disconnect hook which",
    "start": "187139",
    "end": "188969"
  },
  {
    "text": "allows us to determine when the user has",
    "start": "188969",
    "end": "190739"
  },
  {
    "text": "disconnected from the database and we'll",
    "start": "190739",
    "end": "192840"
  },
  {
    "text": "also determine if the app is visible",
    "start": "192840",
    "end": "194189"
  },
  {
    "text": "using the browser's visibility API in",
    "start": "194189",
    "end": "196709"
  },
  {
    "text": "order to maximize reusability and",
    "start": "196709",
    "end": "198569"
  },
  {
    "text": "readability I'm going to break",
    "start": "198569",
    "end": "200220"
  },
  {
    "text": "everything down into a couple of small",
    "start": "200220",
    "end": "201569"
  },
  {
    "text": "methods the first one is get presents",
    "start": "201569",
    "end": "203609"
  },
  {
    "text": "which is just wrapping the database",
    "start": "203609",
    "end": "205349"
  },
  {
    "text": "object observable so we can listen to",
    "start": "205349",
    "end": "207419"
  },
  {
    "text": "the user status based on their user ID",
    "start": "207419",
    "end": "209569"
  },
  {
    "text": "the next one is get user which is just",
    "start": "209569",
    "end": "212489"
  },
  {
    "text": "wrapping the angularfire off state but",
    "start": "212489",
    "end": "214530"
  },
  {
    "text": "returning it as a promise this is really",
    "start": "214530",
    "end": "216540"
  },
  {
    "text": "useful when you have a lot of updates to",
    "start": "216540",
    "end": "217859"
  },
  {
    "text": "do because you can use async/await in",
    "start": "217859",
    "end": "219569"
  },
  {
    "text": "your methods we just take the off state",
    "start": "219569",
    "end": "221549"
  },
  {
    "text": "observable pipe in the first operator to",
    "start": "221549",
    "end": "223530"
  },
  {
    "text": "complete the observable and then convert",
    "start": "223530",
    "end": "225299"
  },
  {
    "text": "it to a promise the next method will",
    "start": "225299",
    "end": "226949"
  },
  {
    "text": "perform the actual database write to set",
    "start": "226949",
    "end": "228930"
  },
  {
    "text": "the presence it will take the status",
    "start": "228930",
    "end": "231090"
  },
  {
    "text": "which is either online offline or away",
    "start": "231090",
    "end": "232949"
  },
  {
    "text": "and then the first thing that we'll do",
    "start": "232949",
    "end": "234299"
  },
  {
    "text": "is get the current user based on the off",
    "start": "234299",
    "end": "236250"
  },
  {
    "text": "state if the user is logged in then",
    "start": "236250",
    "end": "238079"
  },
  {
    "text": "we'll go ahead and make a reference to",
    "start": "238079",
    "end": "239400"
  },
  {
    "text": "that object in the database and then",
    "start": "239400",
    "end": "241290"
  },
  {
    "text": "we'll perform an update on it with the",
    "start": "241290",
    "end": "242909"
  },
  {
    "text": "new status it's also a good idea to set",
    "start": "242909",
    "end": "244709"
  },
  {
    "text": "up a timestamp here so you know when the",
    "start": "244709",
    "end": "246299"
  },
  {
    "text": "last status changed you could just use a",
    "start": "246299",
    "end": "248879"
  },
  {
    "text": "JavaScript date here but then that",
    "start": "248879",
    "end": "250620"
  },
  {
    "text": "timestamp won't be consistent across all",
    "start": "250620",
    "end": "252329"
  },
  {
    "text": "of your clients what we'll do instead is",
    "start": "252329",
    "end": "254489"
  },
  {
    "text": "set up a getter to get the firebase",
    "start": "254489",
    "end": "256289"
  },
  {
    "text": "server validates to set the timestamp",
    "start": "256289",
    "end": "260220"
  },
  {
    "text": "server-side so you're not relying on",
    "start": "260220",
    "end": "261719"
  },
  {
    "text": "your clients JavaScript date to set it",
    "start": "261719",
    "end": "263729"
  },
  {
    "text": "now we're going to start writing out the",
    "start": "263729",
    "end": "265710"
  },
  {
    "text": "methods that can actually perform the",
    "start": "265710",
    "end": "267590"
  },
  {
    "text": "date to the status reactively the first",
    "start": "267590",
    "end": "270260"
  },
  {
    "text": "one is update on user and it's primarily",
    "start": "270260",
    "end": "271790"
  },
  {
    "text": "responsible for setting the online",
    "start": "271790",
    "end": "273740"
  },
  {
    "text": "status the real-time database has a",
    "start": "273740",
    "end": "275720"
  },
  {
    "text": "special location called info / connected",
    "start": "275720",
    "end": "278300"
  },
  {
    "text": "which will return a boolean true or",
    "start": "278300",
    "end": "279980"
  },
  {
    "text": "false if a device is connected we'll",
    "start": "279980",
    "end": "282470"
  },
  {
    "text": "take this initial value in the map it to",
    "start": "282470",
    "end": "284210"
  },
  {
    "text": "online if it's true or offline if it's",
    "start": "284210",
    "end": "286340"
  },
  {
    "text": "false so now we can determine if a",
    "start": "286340",
    "end": "288590"
  },
  {
    "text": "device is online or offline but we need",
    "start": "288590",
    "end": "290660"
  },
  {
    "text": "to connect it to a user ID for that",
    "start": "290660",
    "end": "293120"
  },
  {
    "text": "we're going to listen to the angularfire",
    "start": "293120",
    "end": "294889"
  },
  {
    "text": "off state then we'll pipe in switch map",
    "start": "294889",
    "end": "296930"
  },
  {
    "text": "and if the user is logged in then we'll",
    "start": "296930",
    "end": "298970"
  },
  {
    "text": "go ahead and return that connection",
    "start": "298970",
    "end": "300440"
  },
  {
    "text": "observable otherwise we'll just say",
    "start": "300440",
    "end": "302000"
  },
  {
    "text": "they're offline so the end result here",
    "start": "302000",
    "end": "303860"
  },
  {
    "text": "is an observable that tells us whether",
    "start": "303860",
    "end": "305300"
  },
  {
    "text": "or not a log end-users device is",
    "start": "305300",
    "end": "307160"
  },
  {
    "text": "connected to the database but we also",
    "start": "307160",
    "end": "309050"
  },
  {
    "text": "want to perform a side effect here so",
    "start": "309050",
    "end": "310910"
  },
  {
    "text": "we'll use the rxjs tap operator when the",
    "start": "310910",
    "end": "313130"
  },
  {
    "text": "status changes we'll go ahead and update",
    "start": "313130",
    "end": "314810"
  },
  {
    "text": "it in the database and we can use our",
    "start": "314810",
    "end": "316700"
  },
  {
    "text": "set presence method we defined earlier",
    "start": "316700",
    "end": "318430"
  },
  {
    "text": "so that takes care of the online status",
    "start": "318430",
    "end": "320840"
  },
  {
    "text": "now let's take a look at how we can use",
    "start": "320840",
    "end": "322729"
  },
  {
    "text": "the page visibility API in the browser",
    "start": "322729",
    "end": "324500"
  },
  {
    "text": "to determine the away status this is a",
    "start": "324500",
    "end": "326570"
  },
  {
    "text": "very simple API that will just tell us",
    "start": "326570",
    "end": "327979"
  },
  {
    "text": "whether or not the document is visible",
    "start": "327979",
    "end": "329600"
  },
  {
    "text": "now my implementation here is very",
    "start": "329600",
    "end": "331520"
  },
  {
    "text": "simple and there's a lot of things you",
    "start": "331520",
    "end": "332810"
  },
  {
    "text": "could do to make this more sophisticated",
    "start": "332810",
    "end": "334160"
  },
  {
    "text": "but basically it works like this if the",
    "start": "334160",
    "end": "336200"
  },
  {
    "text": "user has the app open but the actual",
    "start": "336200",
    "end": "338000"
  },
  {
    "text": "document is not visible like they're on",
    "start": "338000",
    "end": "339530"
  },
  {
    "text": "a different browser tab then it will set",
    "start": "339530",
    "end": "341150"
  },
  {
    "text": "the status to away so we'll set up a",
    "start": "341150",
    "end": "343760"
  },
  {
    "text": "method here called update on a way and",
    "start": "343760",
    "end": "345560"
  },
  {
    "text": "it will set an event handler for the",
    "start": "345560",
    "end": "347570"
  },
  {
    "text": "unvisible to change event in the browser",
    "start": "347570",
    "end": "349550"
  },
  {
    "text": "now keep in mind that I am touching the",
    "start": "349550",
    "end": "351440"
  },
  {
    "text": "Dom directly here so this code will only",
    "start": "351440",
    "end": "353300"
  },
  {
    "text": "work on the web platform when the",
    "start": "353300",
    "end": "354950"
  },
  {
    "text": "visibility changes we'll go ahead and",
    "start": "354950",
    "end": "356690"
  },
  {
    "text": "check if the visibility is hidden if it",
    "start": "356690",
    "end": "358460"
  },
  {
    "text": "is hidden and we'll set the status to",
    "start": "358460",
    "end": "359750"
  },
  {
    "text": "away otherwise we'll set it to online",
    "start": "359750",
    "end": "361760"
  },
  {
    "text": "that was incredibly easy so let's go",
    "start": "361760",
    "end": "363919"
  },
  {
    "text": "ahead and move on to the most difficult",
    "start": "363919",
    "end": "365210"
  },
  {
    "text": "part which is setting the offline status",
    "start": "365210",
    "end": "367300"
  },
  {
    "text": "the first thing you probably want to do",
    "start": "367300",
    "end": "369320"
  },
  {
    "text": "is update your Sign Out method if you",
    "start": "369320",
    "end": "371060"
  },
  {
    "text": "have one to set the presents to offline",
    "start": "371060",
    "end": "373039"
  },
  {
    "text": "when the user signs out a user might",
    "start": "373039",
    "end": "374840"
  },
  {
    "text": "sign out but still have a database",
    "start": "374840",
    "end": "376010"
  },
  {
    "text": "connection so we want to make sure that",
    "start": "376010",
    "end": "377450"
  },
  {
    "text": "we set them to offline when they do",
    "start": "377450",
    "end": "379010"
  },
  {
    "text": "manually sign out now the cool thing",
    "start": "379010",
    "end": "381410"
  },
  {
    "text": "about the real-time database is that it",
    "start": "381410",
    "end": "383150"
  },
  {
    "text": "gives us a hook called on disconnect",
    "start": "383150",
    "end": "384770"
  },
  {
    "text": "that we can use to run an update after",
    "start": "384770",
    "end": "386720"
  },
  {
    "text": "the actual app has been closed normally",
    "start": "386720",
    "end": "389450"
  },
  {
    "text": "that's not something that's easy to do",
    "start": "389450",
    "end": "390650"
  },
  {
    "text": "in JavaScript because you can't really",
    "start": "390650",
    "end": "392000"
  },
  {
    "text": "run code after the users close the",
    "start": "392000",
    "end": "393440"
  },
  {
    "text": "window but the firebase SDK can do this",
    "start": "393440",
    "end": "395539"
  },
  {
    "text": "with its offline magic we need to",
    "start": "395539",
    "end": "397729"
  },
  {
    "text": "re-register this hook every time the",
    "start": "397729",
    "end": "399440"
  },
  {
    "text": "authentication state changes",
    "start": "399440",
    "end": "400999"
  },
  {
    "text": "in other words we're going to queue up a",
    "start": "400999",
    "end": "402860"
  },
  {
    "text": "database update with the user ID",
    "start": "402860",
    "end": "404419"
  },
  {
    "text": "whenever the database is disconnected so",
    "start": "404419",
    "end": "407239"
  },
  {
    "text": "we'll make this observable dependent on",
    "start": "407239",
    "end": "408829"
  },
  {
    "text": "the angularfire off state then we'll use",
    "start": "408829",
    "end": "411110"
  },
  {
    "text": "the tap operator to queue it up so we'll",
    "start": "411110",
    "end": "413509"
  },
  {
    "text": "say if we have a user",
    "start": "413509",
    "end": "414679"
  },
  {
    "text": "we'll make a reference to that user",
    "start": "414679",
    "end": "416029"
  },
  {
    "text": "object in the database then we'll say a",
    "start": "416029",
    "end": "418219"
  },
  {
    "text": "query ref on disconnect and we can",
    "start": "418219",
    "end": "420469"
  },
  {
    "text": "attach an update to this hook so we'll",
    "start": "420469",
    "end": "422959"
  },
  {
    "text": "just say update the status to offline",
    "start": "422959",
    "end": "424579"
  },
  {
    "text": "and then give it a new timestamp and",
    "start": "424579",
    "end": "426169"
  },
  {
    "text": "remember this method is returning an",
    "start": "426169",
    "end": "427789"
  },
  {
    "text": "observable so make sure that you",
    "start": "427789",
    "end": "429139"
  },
  {
    "text": "subscribe to it somewhere such as the",
    "start": "429139",
    "end": "430579"
  },
  {
    "text": "constructor of this service so that",
    "start": "430579",
    "end": "433339"
  },
  {
    "text": "takes care of all the business logic for",
    "start": "433339",
    "end": "434809"
  },
  {
    "text": "our present system now we just need a",
    "start": "434809",
    "end": "436369"
  },
  {
    "text": "component to actually consume the data",
    "start": "436369",
    "end": "438079"
  },
  {
    "text": "and show some UI elements before we get",
    "start": "438079",
    "end": "440269"
  },
  {
    "text": "to that I recommend injecting the",
    "start": "440269",
    "end": "441739"
  },
  {
    "text": "present service in the app component",
    "start": "441739",
    "end": "443419"
  },
  {
    "text": "constructor this is most likely a global",
    "start": "443419",
    "end": "445610"
  },
  {
    "text": "service that you want to be available",
    "start": "445610",
    "end": "446689"
  },
  {
    "text": "everywhere so this will just make sure",
    "start": "446689",
    "end": "448099"
  },
  {
    "text": "that it's instantiated when your app is",
    "start": "448099",
    "end": "449719"
  },
  {
    "text": "initialized from there we'll go into our",
    "start": "449719",
    "end": "452059"
  },
  {
    "text": "user component and we'll give it an",
    "start": "452059",
    "end": "453829"
  },
  {
    "text": "input variable of UID so you can pass in",
    "start": "453829",
    "end": "456319"
  },
  {
    "text": "a user ID and have it query the status",
    "start": "456319",
    "end": "458360"
  },
  {
    "text": "from the database so a common use case",
    "start": "458360",
    "end": "460759"
  },
  {
    "text": "might be you have a user and that user",
    "start": "460759",
    "end": "462259"
  },
  {
    "text": "has an array of friends on their",
    "start": "462259",
    "end": "463759"
  },
  {
    "text": "document and you loop over that array of",
    "start": "463759",
    "end": "465919"
  },
  {
    "text": "user IDs and show the presence for each",
    "start": "465919",
    "end": "467929"
  },
  {
    "text": "one of them and we've already defined",
    "start": "467929",
    "end": "469639"
  },
  {
    "text": "the logic to get the actual status for a",
    "start": "469639",
    "end": "471559"
  },
  {
    "text": "user so all we have to do is go into ng",
    "start": "471559",
    "end": "474169"
  },
  {
    "text": "on an it then call get presence with the",
    "start": "474169",
    "end": "476149"
  },
  {
    "text": "user ID that's passed into this",
    "start": "476149",
    "end": "477559"
  },
  {
    "text": "component presence will be an observable",
    "start": "477559",
    "end": "479029"
  },
  {
    "text": "of that user status so we can unwrap",
    "start": "479029",
    "end": "481069"
  },
  {
    "text": "that in the HTML with the async pipe and",
    "start": "481069",
    "end": "483169"
  },
  {
    "text": "then we'll set it as a template variable",
    "start": "483169",
    "end": "484789"
  },
  {
    "text": "called presence for right now we'll just",
    "start": "484789",
    "end": "486379"
  },
  {
    "text": "show the status again that'll be online",
    "start": "486379",
    "end": "488089"
  },
  {
    "text": "offline or away but you could also use",
    "start": "488089",
    "end": "489889"
  },
  {
    "text": "the timestamp to determine when the user",
    "start": "489889",
    "end": "491599"
  },
  {
    "text": "was last active this is also a really",
    "start": "491599",
    "end": "494029"
  },
  {
    "text": "good use case for the ng class directive",
    "start": "494029",
    "end": "496039"
  },
  {
    "text": "and angular this will allow us to use a",
    "start": "496039",
    "end": "498110"
  },
  {
    "text": "different CSS class based on the user",
    "start": "498110",
    "end": "499909"
  },
  {
    "text": "status it takes an object and the key of",
    "start": "499909",
    "end": "502489"
  },
  {
    "text": "that object is a CSS class then the",
    "start": "502489",
    "end": "504619"
  },
  {
    "text": "value or the right side is an expression",
    "start": "504619",
    "end": "506419"
  },
  {
    "text": "that should resolve to true or false so",
    "start": "506419",
    "end": "508699"
  },
  {
    "text": "we'll show a green background when",
    "start": "508699",
    "end": "510079"
  },
  {
    "text": "they're online a yellow background when",
    "start": "510079",
    "end": "511969"
  },
  {
    "text": "they're away and a red background when",
    "start": "511969",
    "end": "513620"
  },
  {
    "text": "they're offline that takes care of the",
    "start": "513620",
    "end": "515959"
  },
  {
    "text": "component now you can put it to use",
    "start": "515959",
    "end": "517490"
  },
  {
    "text": "somewhere in your application when you",
    "start": "517490",
    "end": "518779"
  },
  {
    "text": "have the user ID in the context if you",
    "start": "518779",
    "end": "521719"
  },
  {
    "text": "want to show the current status to the",
    "start": "521719",
    "end": "523309"
  },
  {
    "text": "logged in user you might pass in the UID",
    "start": "523309",
    "end": "525019"
  },
  {
    "text": "like this or when you're testing it's",
    "start": "525019",
    "end": "526939"
  },
  {
    "text": "useful to just hard code the user ID in",
    "start": "526939",
    "end": "528980"
  },
  {
    "text": "the component that way you can just open",
    "start": "528980",
    "end": "530660"
  },
  {
    "text": "up an incognito browser and look at the",
    "start": "530660",
    "end": "532550"
  },
  {
    "text": "state changes from the perspective of a",
    "start": "532550",
    "end": "534290"
  },
  {
    "text": "diff",
    "start": "534290",
    "end": "534590"
  },
  {
    "text": "user you can imagine how difficult",
    "start": "534590",
    "end": "536120"
  },
  {
    "text": "building a real-time present system",
    "start": "536120",
    "end": "537890"
  },
  {
    "text": "would be without something like firebase",
    "start": "537890",
    "end": "539360"
  },
  {
    "text": "managing real time state between the",
    "start": "539360",
    "end": "541040"
  },
  {
    "text": "client and server is very challenging",
    "start": "541040",
    "end": "542480"
  },
  {
    "text": "but we managed to get a flexible yet",
    "start": "542480",
    "end": "544520"
  },
  {
    "text": "reliable system up and running in just a",
    "start": "544520",
    "end": "546440"
  },
  {
    "text": "few minutes I'm gonna go ahead and wrap",
    "start": "546440",
    "end": "547760"
  },
  {
    "text": "things up there make sure to grab the",
    "start": "547760",
    "end": "549140"
  },
  {
    "text": "source code from fire ship IO thanks for",
    "start": "549140",
    "end": "551270"
  },
  {
    "text": "watching and I will talk to you soon",
    "start": "551270",
    "end": "554350"
  },
  {
    "text": "[Music]",
    "start": "554350",
    "end": "563319"
  }
]