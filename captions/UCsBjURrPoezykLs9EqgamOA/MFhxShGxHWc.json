[
  {
    "text": "binary search an algorithm for finding",
    "start": "160",
    "end": "2560"
  },
  {
    "text": "an element in a sorted array by",
    "start": "2560",
    "end": "4480"
  },
  {
    "text": "continuously chopping the search area in",
    "start": "4480",
    "end": "6480"
  },
  {
    "text": "half the first known implementation took",
    "start": "6480",
    "end": "8320"
  },
  {
    "text": "place around 200 bc and ancient babylon",
    "start": "8320",
    "end": "10880"
  },
  {
    "text": "on clay tablets used for record keeping",
    "start": "10880",
    "end": "13040"
  },
  {
    "text": "but your brain has likely implemented",
    "start": "13040",
    "end": "14799"
  },
  {
    "text": "binary search in everyday life without",
    "start": "14799",
    "end": "16640"
  },
  {
    "text": "you even knowing it imagine looking for",
    "start": "16640",
    "end": "18240"
  },
  {
    "text": "a word like magic in the dictionary you",
    "start": "18240",
    "end": "20240"
  },
  {
    "text": "wouldn't flip every page until you get",
    "start": "20240",
    "end": "21760"
  },
  {
    "text": "to m instead you open it in the middle",
    "start": "21760",
    "end": "24080"
  },
  {
    "text": "if you overshoot to the cues then you go",
    "start": "24080",
    "end": "26000"
  },
  {
    "text": "to the middle of that chunk this time",
    "start": "26000",
    "end": "27760"
  },
  {
    "text": "you undershoot to the js so you do the",
    "start": "27760",
    "end": "29439"
  },
  {
    "text": "same thing again but in the other",
    "start": "29439",
    "end": "31039"
  },
  {
    "text": "direction until finally you find the",
    "start": "31039",
    "end": "32640"
  },
  {
    "text": "page you're looking for easy enough now",
    "start": "32640",
    "end": "34399"
  },
  {
    "text": "it's time for your technical interview",
    "start": "34399",
    "end": "36000"
  },
  {
    "text": "you might be given a question like given",
    "start": "36000",
    "end": "37920"
  },
  {
    "text": "a sorted array write a function that",
    "start": "37920",
    "end": "39920"
  },
  {
    "text": "returns the index for the given element",
    "start": "39920",
    "end": "41840"
  },
  {
    "text": "the easy way to solve that problem is",
    "start": "41840",
    "end": "43520"
  },
  {
    "text": "with a simple for loop just loop over",
    "start": "43520",
    "end": "45520"
  },
  {
    "text": "every element in the array until you",
    "start": "45520",
    "end": "47039"
  },
  {
    "text": "find the one you're looking for that",
    "start": "47039",
    "end": "48559"
  },
  {
    "text": "works but you failed the interview",
    "start": "48559",
    "end": "50000"
  },
  {
    "text": "because you need to go faster a regular",
    "start": "50000",
    "end": "51920"
  },
  {
    "text": "loop results in linear time complexity",
    "start": "51920",
    "end": "54000"
  },
  {
    "text": "but you can do better than that here's",
    "start": "54000",
    "end": "55280"
  },
  {
    "text": "how we might map out a binary search on",
    "start": "55280",
    "end": "56960"
  },
  {
    "text": "a whiteboard first we need to figure out",
    "start": "56960",
    "end": "58960"
  },
  {
    "text": "the middle index instead of starting at",
    "start": "58960",
    "end": "60719"
  },
  {
    "text": "index 0 we start in the middle if it's",
    "start": "60719",
    "end": "62640"
  },
  {
    "text": "equal to the target then we return that",
    "start": "62640",
    "end": "64320"
  },
  {
    "text": "index but if that element is greater",
    "start": "64320",
    "end": "66159"
  },
  {
    "text": "than the target we know the target must",
    "start": "66159",
    "end": "67840"
  },
  {
    "text": "be somewhere on the left so we find the",
    "start": "67840",
    "end": "69439"
  },
  {
    "text": "middle of that slice of the array but if",
    "start": "69439",
    "end": "71280"
  },
  {
    "text": "it's less than the target then we know",
    "start": "71280",
    "end": "72640"
  },
  {
    "text": "the target is somewhere on the right so",
    "start": "72640",
    "end": "74159"
  },
  {
    "text": "we repeat the process for that slice of",
    "start": "74159",
    "end": "75920"
  },
  {
    "text": "the array the result is a much faster",
    "start": "75920",
    "end": "77759"
  },
  {
    "text": "algorithm with logarithmic time",
    "start": "77759",
    "end": "79280"
  },
  {
    "text": "complexity because it's able to divide",
    "start": "79280",
    "end": "81280"
  },
  {
    "text": "and conquer now to implement the code we",
    "start": "81280",
    "end": "83280"
  },
  {
    "text": "could use an iterative approach with a",
    "start": "83280",
    "end": "84960"
  },
  {
    "text": "while loop or a recursive function",
    "start": "84960",
    "end": "86960"
  },
  {
    "text": "either way is acceptable but let's",
    "start": "86960",
    "end": "88479"
  },
  {
    "text": "define a recursive function in",
    "start": "88479",
    "end": "90079"
  },
  {
    "text": "javascript the function takes the target",
    "start": "90079",
    "end": "92159"
  },
  {
    "text": "value as an argument as well as a",
    "start": "92159",
    "end": "93840"
  },
  {
    "text": "starting and ending index first we have",
    "start": "93840",
    "end": "95680"
  },
  {
    "text": "a base condition to stop looping when it",
    "start": "95680",
    "end": "97759"
  },
  {
    "text": "reaches the end of the array at which",
    "start": "97759",
    "end": "99520"
  },
  {
    "text": "point we know the target is not in the",
    "start": "99520",
    "end": "101360"
  },
  {
    "text": "array from there we compute the middle",
    "start": "101360",
    "end": "103119"
  },
  {
    "text": "index then we check to see if that",
    "start": "103119",
    "end": "104720"
  },
  {
    "text": "middle index is equal to the target at",
    "start": "104720",
    "end": "106560"
  },
  {
    "text": "which point we can return because we",
    "start": "106560",
    "end": "108159"
  },
  {
    "text": "found the element we're looking for",
    "start": "108159",
    "end": "109600"
  },
  {
    "text": "otherwise we need to continue searching",
    "start": "109600",
    "end": "111520"
  },
  {
    "text": "and that's where recursion comes into",
    "start": "111520",
    "end": "112880"
  },
  {
    "text": "play if the middle value is greater than",
    "start": "112880",
    "end": "114720"
  },
  {
    "text": "the target then we'll call the same",
    "start": "114720",
    "end": "116159"
  },
  {
    "text": "function but this time we'll put the",
    "start": "116159",
    "end": "117840"
  },
  {
    "text": "ending index at the middle the other",
    "start": "117840",
    "end": "119840"
  },
  {
    "text": "possibility is that the middle value is",
    "start": "119840",
    "end": "121920"
  },
  {
    "text": "less than the target in which case we",
    "start": "121920",
    "end": "123680"
  },
  {
    "text": "can also recurse but this time we'll put",
    "start": "123680",
    "end": "125759"
  },
  {
    "text": "the starting index in the middle and now",
    "start": "125759",
    "end": "127520"
  },
  {
    "text": "we have an algorithm that can find an",
    "start": "127520",
    "end": "129039"
  },
  {
    "text": "element in a sorted array much faster",
    "start": "129039",
    "end": "130879"
  },
  {
    "text": "than a regular loop if you want to see",
    "start": "130879",
    "end": "132319"
  },
  {
    "text": "more videos about algorithms on this",
    "start": "132319",
    "end": "133840"
  },
  {
    "text": "channel hit the like button and let me",
    "start": "133840",
    "end": "135440"
  },
  {
    "text": "know in the comments thanks for watching",
    "start": "135440",
    "end": "137200"
  },
  {
    "text": "and i will see you in the next one",
    "start": "137200",
    "end": "141280"
  }
]