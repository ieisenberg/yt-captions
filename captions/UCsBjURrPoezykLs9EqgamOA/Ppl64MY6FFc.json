[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "6529"
  },
  {
    "text": "angular seven is officially here and one",
    "start": "6529",
    "end": "9210"
  },
  {
    "text": "of its coolest new features is the",
    "start": "9210",
    "end": "10679"
  },
  {
    "text": "virtual scroll behavior in the component",
    "start": "10679",
    "end": "12599"
  },
  {
    "text": "development kit it allows you to easily",
    "start": "12599",
    "end": "14130"
  },
  {
    "text": "build a high-performance list that only",
    "start": "14130",
    "end": "16470"
  },
  {
    "text": "renders the items visible to the user in",
    "start": "16470",
    "end": "18600"
  },
  {
    "text": "today's video I'll show you everything",
    "start": "18600",
    "end": "20220"
  },
  {
    "text": "you need to know about virtual scroll",
    "start": "20220",
    "end": "21750"
  },
  {
    "text": "but we'll also take things a few steps",
    "start": "21750",
    "end": "23609"
  },
  {
    "text": "further by making an animated infinite",
    "start": "23609",
    "end": "25619"
  },
  {
    "text": "and real-time if you're new here like",
    "start": "25619",
    "end": "27660"
  },
  {
    "text": "and subscribe and I'm giving away some",
    "start": "27660",
    "end": "29429"
  },
  {
    "text": "winter swag with this video all you have",
    "start": "29429",
    "end": "31140"
  },
  {
    "text": "to do is leave a comment below and we'll",
    "start": "31140",
    "end": "32640"
  },
  {
    "text": "pick a winner on the live stream on",
    "start": "32640",
    "end": "34260"
  },
  {
    "text": "Wednesday so first of all what is",
    "start": "34260",
    "end": "36390"
  },
  {
    "text": "virtual scrolling and why would you want",
    "start": "36390",
    "end": "38280"
  },
  {
    "text": "to use it it's useful when you have a",
    "start": "38280",
    "end": "40140"
  },
  {
    "text": "large list of items to loop over but you",
    "start": "40140",
    "end": "42210"
  },
  {
    "text": "only want to render the items that are",
    "start": "42210",
    "end": "44070"
  },
  {
    "text": "visible in the viewport this should give",
    "start": "44070",
    "end": "45960"
  },
  {
    "text": "you much smoother performance when",
    "start": "45960",
    "end": "47309"
  },
  {
    "text": "working with big lists because the",
    "start": "47309",
    "end": "48840"
  },
  {
    "text": "browser only needs to render a small",
    "start": "48840",
    "end": "50700"
  },
  {
    "text": "subset of the data the cdk provides a",
    "start": "50700",
    "end": "53430"
  },
  {
    "text": "handful of components and directives to",
    "start": "53430",
    "end": "55079"
  },
  {
    "text": "make virtual scrolling super easy in",
    "start": "55079",
    "end": "57270"
  },
  {
    "text": "addition it provides a handful of tools",
    "start": "57270",
    "end": "58920"
  },
  {
    "text": "that makes it much easier to measure the",
    "start": "58920",
    "end": "60840"
  },
  {
    "text": "scrolled element which we can then use",
    "start": "60840",
    "end": "62520"
  },
  {
    "text": "to pull data from our back-end database",
    "start": "62520",
    "end": "63960"
  },
  {
    "text": "in batches giving us an infinite",
    "start": "63960",
    "end": "65729"
  },
  {
    "text": "real-time virtual scroll the first thing",
    "start": "65729",
    "end": "68430"
  },
  {
    "start": "68000",
    "end": "107000"
  },
  {
    "text": "you want to do is make sure you're",
    "start": "68430",
    "end": "69420"
  },
  {
    "text": "up-to-date with angular version 7 then",
    "start": "69420",
    "end": "72060"
  },
  {
    "text": "we can quickly add the cdk to our app by",
    "start": "72060",
    "end": "74189"
  },
  {
    "text": "running ng add angular material you'll",
    "start": "74189",
    "end": "76890"
  },
  {
    "text": "notice that when you do this in angular",
    "start": "76890",
    "end": "78240"
  },
  {
    "text": "7 it gives you a prompt to have",
    "start": "78240",
    "end": "79770"
  },
  {
    "text": "questions to go through you can just",
    "start": "79770",
    "end": "81390"
  },
  {
    "text": "select the defaults and then if you also",
    "start": "81390",
    "end": "83009"
  },
  {
    "text": "want to follow along with the firebase",
    "start": "83009",
    "end": "84570"
  },
  {
    "text": "part you'll want to install angular fire",
    "start": "84570",
    "end": "86580"
  },
  {
    "text": "at this point as well but I'm going to",
    "start": "86580",
    "end": "88500"
  },
  {
    "text": "start with just the cdk basics before we",
    "start": "88500",
    "end": "90659"
  },
  {
    "text": "get to that point if we jump over to my",
    "start": "90659",
    "end": "93000"
  },
  {
    "text": "app module you can see that I'm",
    "start": "93000",
    "end": "94590"
  },
  {
    "text": "importing the scrolling module from the",
    "start": "94590",
    "end": "96450"
  },
  {
    "text": "cdk and then I also have a couple of",
    "start": "96450",
    "end": "98400"
  },
  {
    "text": "components generated just for this demo",
    "start": "98400",
    "end": "100049"
  },
  {
    "text": "so you want to make sure that you have",
    "start": "100049",
    "end": "101670"
  },
  {
    "text": "the scrolling module here in the import",
    "start": "101670",
    "end": "103710"
  },
  {
    "text": "section and then optionally angularfire",
    "start": "103710",
    "end": "105600"
  },
  {
    "text": "for the back-end stuff now that we're",
    "start": "105600",
    "end": "107909"
  },
  {
    "start": "107000",
    "end": "140000"
  },
  {
    "text": "all set up let's start by looking at the",
    "start": "107909",
    "end": "109560"
  },
  {
    "text": "basics of virtual scroll the first thing",
    "start": "109560",
    "end": "111869"
  },
  {
    "text": "you'll need is a big list of something",
    "start": "111869",
    "end": "113399"
  },
  {
    "text": "to loop over so I want to show you how",
    "start": "113399",
    "end": "114960"
  },
  {
    "text": "to generate a ton of fake data really",
    "start": "114960",
    "end": "116759"
  },
  {
    "text": "quickly first I wrote my own helper",
    "start": "116759",
    "end": "118920"
  },
  {
    "text": "function that will return a random emoji",
    "start": "118920",
    "end": "120659"
  },
  {
    "text": "and then I installed the fakir j/s",
    "start": "120659",
    "end": "122549"
  },
  {
    "text": "library that we can use to generate fake",
    "start": "122549",
    "end": "124350"
  },
  {
    "text": "names and email addresses and stuff like",
    "start": "124350",
    "end": "126270"
  },
  {
    "text": "that then I'll set up a property of",
    "start": "126270",
    "end": "128399"
  },
  {
    "text": "people and then I'll define that",
    "start": "128399",
    "end": "129780"
  },
  {
    "text": "property as an array of 100 elements",
    "start": "129780",
    "end": "131879"
  },
  {
    "text": "then we can map each element",
    "start": "131879",
    "end": "133830"
  },
  {
    "text": "that array to an object with some fake",
    "start": "133830",
    "end": "135660"
  },
  {
    "text": "data so we'll give each object a name a",
    "start": "135660",
    "end": "138090"
  },
  {
    "text": "bio and an emoji so that gives us a big",
    "start": "138090",
    "end": "141360"
  },
  {
    "start": "140000",
    "end": "188000"
  },
  {
    "text": "array of items to loop over now we need",
    "start": "141360",
    "end": "143400"
  },
  {
    "text": "to go into the HTML and set up a context",
    "start": "143400",
    "end": "145620"
  },
  {
    "text": "for our virtual scroll we can do that by",
    "start": "145620",
    "end": "147660"
  },
  {
    "text": "just dropping in the cdk virtual school",
    "start": "147660",
    "end": "149820"
  },
  {
    "text": "viewport component it has one required",
    "start": "149820",
    "end": "152250"
  },
  {
    "text": "argument which is the item size or",
    "start": "152250",
    "end": "154080"
  },
  {
    "text": "height which is represented in pixels so",
    "start": "154080",
    "end": "156930"
  },
  {
    "text": "typically with a virtual scroll you want",
    "start": "156930",
    "end": "158730"
  },
  {
    "text": "items to have a fixed height if possible",
    "start": "158730",
    "end": "160770"
  },
  {
    "text": "so with that being said let's quickly",
    "start": "160770",
    "end": "162840"
  },
  {
    "text": "jump over to our CSS code you'll first",
    "start": "162840",
    "end": "165270"
  },
  {
    "text": "want to make sure that your viewport has",
    "start": "165270",
    "end": "166590"
  },
  {
    "text": "some height so in this case I'm having",
    "start": "166590",
    "end": "168750"
  },
  {
    "text": "it fill up the entire height of the",
    "start": "168750",
    "end": "170310"
  },
  {
    "text": "viewport then each item inside of my",
    "start": "170310",
    "end": "172530"
  },
  {
    "text": "viewport will have a fixed height of 100",
    "start": "172530",
    "end": "174690"
  },
  {
    "text": "pixels which matches the item size",
    "start": "174690",
    "end": "176340"
  },
  {
    "text": "argument in the component itself and",
    "start": "176340",
    "end": "178770"
  },
  {
    "text": "just for bonus points if you want to",
    "start": "178770",
    "end": "180090"
  },
  {
    "text": "make it look cool this is a good place",
    "start": "180090",
    "end": "181620"
  },
  {
    "text": "to customize the pseudo selector for the",
    "start": "181620",
    "end": "184020"
  },
  {
    "text": "actual scroll bar element to give it a",
    "start": "184020",
    "end": "186000"
  },
  {
    "text": "different style and size as the user",
    "start": "186000",
    "end": "187620"
  },
  {
    "text": "Scrolls down when inside the context of",
    "start": "187620",
    "end": "190230"
  },
  {
    "text": "a scroll viewport the cdk gives you a",
    "start": "190230",
    "end": "192330"
  },
  {
    "text": "structural directive called cdk virtual",
    "start": "192330",
    "end": "194550"
  },
  {
    "text": "for it replaces ng4 but it works exactly",
    "start": "194550",
    "end": "197400"
  },
  {
    "text": "the same way if we go ahead and serve",
    "start": "197400",
    "end": "199500"
  },
  {
    "text": "the app what's happening is that the cdk",
    "start": "199500",
    "end": "201660"
  },
  {
    "text": "is keeping track of the items in the",
    "start": "201660",
    "end": "203489"
  },
  {
    "text": "list and which items will fit into the",
    "start": "203489",
    "end": "205290"
  },
  {
    "text": "viewport a good way to demonstrate this",
    "start": "205290",
    "end": "207209"
  },
  {
    "text": "is just by using a plain CSS animation",
    "start": "207209",
    "end": "209730"
  },
  {
    "text": "because that animation will be applied",
    "start": "209730",
    "end": "211350"
  },
  {
    "text": "each time the item is rerender so I'm",
    "start": "211350",
    "end": "213780"
  },
  {
    "text": "using a little library here you may have",
    "start": "213780",
    "end": "215250"
  },
  {
    "text": "heard of called animate CSS and you'll",
    "start": "215250",
    "end": "217380"
  },
  {
    "text": "notice as I scroll up and down the",
    "start": "217380",
    "end": "219060"
  },
  {
    "text": "animation is reapplied to each element",
    "start": "219060",
    "end": "221130"
  },
  {
    "text": "because it's being rear-ended in the Dom",
    "start": "221130",
    "end": "223260"
  },
  {
    "text": "in a regular list the CSS animation",
    "start": "223260",
    "end": "225840"
  },
  {
    "text": "would only be applied on the initial",
    "start": "225840",
    "end": "227370"
  },
  {
    "text": "page load so that's kind of an",
    "start": "227370",
    "end": "228810"
  },
  {
    "text": "interesting little side effect with",
    "start": "228810",
    "end": "230160"
  },
  {
    "text": "virtual scroll that you can play with",
    "start": "230160",
    "end": "231830"
  },
  {
    "text": "now there's a couple of other basic",
    "start": "231830",
    "end": "233850"
  },
  {
    "text": "things that you need to know first of",
    "start": "233850",
    "end": "235890"
  },
  {
    "text": "all the virtual scroll component emits a",
    "start": "235890",
    "end": "238080"
  },
  {
    "text": "custom event called scrolled index",
    "start": "238080",
    "end": "239910"
  },
  {
    "text": "change eventually we'll use this to",
    "start": "239910",
    "end": "241830"
  },
  {
    "text": "implement our infinite scroll because it",
    "start": "241830",
    "end": "244019"
  },
  {
    "text": "emits the index of the item that the",
    "start": "244019",
    "end": "245700"
  },
  {
    "text": "user has scrolled to so we can use that",
    "start": "245700",
    "end": "247170"
  },
  {
    "text": "to determine when to pull the next batch",
    "start": "247170",
    "end": "249060"
  },
  {
    "text": "of items from the database then you'll",
    "start": "249060",
    "end": "251549"
  },
  {
    "text": "also notice that this component has its",
    "start": "251549",
    "end": "253170"
  },
  {
    "text": "own public API that we can use to do",
    "start": "253170",
    "end": "254940"
  },
  {
    "text": "things like measure the viewport or get",
    "start": "254940",
    "end": "256829"
  },
  {
    "text": "the total item list size or even",
    "start": "256830",
    "end": "258419"
  },
  {
    "text": "dynamically scroll to a specific element",
    "start": "258419",
    "end": "260640"
  },
  {
    "text": "in order to use those methods you'll",
    "start": "260640",
    "end": "263520"
  },
  {
    "text": "need to grab the component from the Dom",
    "start": "263520",
    "end": "265229"
  },
  {
    "text": "and you'll definitely want a strong type",
    "start": "265229",
    "end": "267030"
  },
  {
    "text": "it so will",
    "start": "267030",
    "end": "267780"
  },
  {
    "text": "import the cdk virtual school viewport",
    "start": "267780",
    "end": "269700"
  },
  {
    "text": "component and then we can grab it with",
    "start": "269700",
    "end": "271740"
  },
  {
    "text": "view child then we can set it up as a",
    "start": "271740",
    "end": "273960"
  },
  {
    "text": "property called viewport and if we start",
    "start": "273960",
    "end": "276000"
  },
  {
    "text": "typing this out you'll notice it shows",
    "start": "276000",
    "end": "277440"
  },
  {
    "text": "us a bunch of different methods that we",
    "start": "277440",
    "end": "278910"
  },
  {
    "text": "can use so that's how you can interact",
    "start": "278910",
    "end": "281100"
  },
  {
    "text": "with the component dynamically in your",
    "start": "281100",
    "end": "282930"
  },
  {
    "text": "typescript code for example if you have",
    "start": "282930",
    "end": "285240"
  },
  {
    "text": "some chat messages you could use this to",
    "start": "285240",
    "end": "287100"
  },
  {
    "text": "scroll directly to the bottom or update",
    "start": "287100",
    "end": "289080"
  },
  {
    "text": "the scroll position when new messages",
    "start": "289080",
    "end": "290430"
  },
  {
    "text": "are received now that you know the",
    "start": "290430",
    "end": "292770"
  },
  {
    "start": "292000",
    "end": "347000"
  },
  {
    "text": "basics we're ready to build out our",
    "start": "292770",
    "end": "294480"
  },
  {
    "text": "infinite real-time scroll using",
    "start": "294480",
    "end": "296040"
  },
  {
    "text": "firestore I created an infinite scroll",
    "start": "296040",
    "end": "298800"
  },
  {
    "text": "video with firestore a while back but",
    "start": "298800",
    "end": "301169"
  },
  {
    "text": "today's solution will improve upon it in",
    "start": "301169",
    "end": "303060"
  },
  {
    "text": "two big ways first of all it will make",
    "start": "303060",
    "end": "305040"
  },
  {
    "text": "the list real-time so even though we're",
    "start": "305040",
    "end": "307140"
  },
  {
    "text": "pulling items and batches they'll still",
    "start": "307140",
    "end": "308880"
  },
  {
    "text": "be updated in real time if the data",
    "start": "308880",
    "end": "310800"
  },
  {
    "text": "changes on the back end and the second",
    "start": "310800",
    "end": "313380"
  },
  {
    "text": "obvious improvement is that this will be",
    "start": "313380",
    "end": "314850"
  },
  {
    "text": "a virtual scroll so we should be able to",
    "start": "314850",
    "end": "316800"
  },
  {
    "text": "get much better performance as the user",
    "start": "316800",
    "end": "318419"
  },
  {
    "text": "Scrolls through more and more items and",
    "start": "318419",
    "end": "320100"
  },
  {
    "text": "also the cdk will just make our code",
    "start": "320100",
    "end": "322110"
  },
  {
    "text": "much more simple and reliable now",
    "start": "322110",
    "end": "324720"
  },
  {
    "text": "starting in the component type script",
    "start": "324720",
    "end": "326250"
  },
  {
    "text": "we'll first import angularfire store as",
    "start": "326250",
    "end": "328500"
  },
  {
    "text": "well as a bunch of different stuff here",
    "start": "328500",
    "end": "329880"
  },
  {
    "text": "from rxjs we'll pull items from the",
    "start": "329880",
    "end": "332700"
  },
  {
    "text": "database in batch sizes of 20 then we'll",
    "start": "332700",
    "end": "335850"
  },
  {
    "text": "set up a property for the viewport",
    "start": "335850",
    "end": "337500"
  },
  {
    "text": "itself and then one to determine whether",
    "start": "337500",
    "end": "339540"
  },
  {
    "text": "or not we've reached the end of the list",
    "start": "339540",
    "end": "341010"
  },
  {
    "text": "and then a behavior subject to keep",
    "start": "341010",
    "end": "343620"
  },
  {
    "text": "track of the offset that we'll use to",
    "start": "343620",
    "end": "345840"
  },
  {
    "text": "make our query to fire store and it's",
    "start": "345840",
    "end": "348270"
  },
  {
    "start": "347000",
    "end": "418000"
  },
  {
    "text": "important that the subject starts with",
    "start": "348270",
    "end": "349530"
  },
  {
    "text": "null and not undefined or an empty",
    "start": "349530",
    "end": "351390"
  },
  {
    "text": "string because we need that null value",
    "start": "351390",
    "end": "353280"
  },
  {
    "text": "to start our query to fire store so",
    "start": "353280",
    "end": "355680"
  },
  {
    "text": "every time this offset changes we're",
    "start": "355680",
    "end": "357660"
  },
  {
    "text": "going to want to make a new query to",
    "start": "357660",
    "end": "359310"
  },
  {
    "text": "fire store for the source data but we",
    "start": "359310",
    "end": "361740"
  },
  {
    "text": "only want to do that when the user",
    "start": "361740",
    "end": "363030"
  },
  {
    "text": "Scrolls to the bottom of the current",
    "start": "363030",
    "end": "364890"
  },
  {
    "text": "list so we can listen to that index",
    "start": "364890",
    "end": "367169"
  },
  {
    "text": "change event that I showed you earlier",
    "start": "367169",
    "end": "368490"
  },
  {
    "text": "and then we'll run this next batch",
    "start": "368490",
    "end": "370289"
  },
  {
    "text": "method which takes the event as well as",
    "start": "370289",
    "end": "372300"
  },
  {
    "text": "the very last item in the list as its",
    "start": "372300",
    "end": "374280"
  },
  {
    "text": "argument then if we've reached the end",
    "start": "374280",
    "end": "376229"
  },
  {
    "text": "then we'll just go ahead and return and",
    "start": "376229",
    "end": "377760"
  },
  {
    "text": "not pull any additional data but",
    "start": "377760",
    "end": "379890"
  },
  {
    "text": "otherwise we can take the viewport",
    "start": "379890",
    "end": "381360"
  },
  {
    "text": "rendered range end value and compare",
    "start": "381360",
    "end": "383430"
  },
  {
    "text": "that to the total items in the actual",
    "start": "383430",
    "end": "385800"
  },
  {
    "text": "list itself and conveniently the cdk has",
    "start": "385800",
    "end": "388320"
  },
  {
    "text": "a method for that called get data length",
    "start": "388320",
    "end": "390510"
  },
  {
    "text": "so if the ending index equals the total",
    "start": "390510",
    "end": "392970"
  },
  {
    "text": "length of the items in the array then we",
    "start": "392970",
    "end": "395130"
  },
  {
    "text": "know that we've reached the end we can",
    "start": "395130",
    "end": "396930"
  },
  {
    "text": "send the next offset value to our",
    "start": "396930",
    "end": "398669"
  },
  {
    "text": "behavior subject which will reactively",
    "start": "398669",
    "end": "400349"
  },
  {
    "text": "pull a new back",
    "start": "400349",
    "end": "401280"
  },
  {
    "text": "of items from the database and then",
    "start": "401280",
    "end": "403620"
  },
  {
    "text": "while I have you here I'm also going to",
    "start": "403620",
    "end": "405000"
  },
  {
    "text": "set up a track by function which just",
    "start": "405000",
    "end": "406650"
  },
  {
    "text": "tracks the index of the items in the",
    "start": "406650",
    "end": "408630"
  },
  {
    "text": "array and only renders the ones that",
    "start": "408630",
    "end": "410280"
  },
  {
    "text": "change that's just a good thing to have",
    "start": "410280",
    "end": "412710"
  },
  {
    "text": "for real-time data because otherwise the",
    "start": "412710",
    "end": "414750"
  },
  {
    "text": "entire list would rerender for each item",
    "start": "414750",
    "end": "416970"
  },
  {
    "text": "that changes so now I'm going to break",
    "start": "416970",
    "end": "419700"
  },
  {
    "text": "this down into manageable chunks the",
    "start": "419700",
    "end": "422010"
  },
  {
    "text": "first one is getting an individual batch",
    "start": "422010",
    "end": "423930"
  },
  {
    "text": "from the database and to do that we need",
    "start": "423930",
    "end": "425850"
  },
  {
    "text": "to know the last scene item in the",
    "start": "425850",
    "end": "427620"
  },
  {
    "text": "previous batch I've added 200 records to",
    "start": "427620",
    "end": "430440"
  },
  {
    "text": "firestore of the same dummy data that I",
    "start": "430440",
    "end": "432450"
  },
  {
    "text": "showed you earlier and I want to do a",
    "start": "432450",
    "end": "434970"
  },
  {
    "text": "paginate query on that data so first I",
    "start": "434970",
    "end": "437760"
  },
  {
    "text": "want to order by that user's name and",
    "start": "437760",
    "end": "439770"
  },
  {
    "text": "then we'll start after the offset value",
    "start": "439770",
    "end": "442169"
  },
  {
    "text": "which needs to be null if we're starting",
    "start": "442169",
    "end": "444060"
  },
  {
    "text": "a new batch",
    "start": "444060",
    "end": "444870"
  },
  {
    "text": "otherwise it needs to be the name of the",
    "start": "444870",
    "end": "446580"
  },
  {
    "text": "last user in the last batch and lastly",
    "start": "446580",
    "end": "449669"
  },
  {
    "text": "we'll limit our query to our batch size",
    "start": "449669",
    "end": "451380"
  },
  {
    "text": "which again is 20 from there we'll go",
    "start": "451380",
    "end": "454410"
  },
  {
    "text": "ahead and call snapshot changes to get",
    "start": "454410",
    "end": "456150"
  },
  {
    "text": "these documents snapshots as an",
    "start": "456150",
    "end": "457740"
  },
  {
    "text": "observable if this observable emits an",
    "start": "457740",
    "end": "460410"
  },
  {
    "text": "empty array then it's safe to assume",
    "start": "460410",
    "end": "461880"
  },
  {
    "text": "that we've reached the end of our",
    "start": "461880",
    "end": "463320"
  },
  {
    "text": "collection in the database at which",
    "start": "463320",
    "end": "465180"
  },
  {
    "text": "point we can set the end property to",
    "start": "465180",
    "end": "467430"
  },
  {
    "text": "true now the tricky part is keeping",
    "start": "467430",
    "end": "470190"
  },
  {
    "text": "everything up to date in real-time",
    "start": "470190",
    "end": "471390"
  },
  {
    "text": "across multiple batches in order to do",
    "start": "471390",
    "end": "474300"
  },
  {
    "text": "that reliably we need to take the array",
    "start": "474300",
    "end": "476010"
  },
  {
    "text": "of documents and then map them to an",
    "start": "476010",
    "end": "477960"
  },
  {
    "text": "object where the key is their document",
    "start": "477960",
    "end": "480240"
  },
  {
    "text": "ID this allows us to update a documents",
    "start": "480240",
    "end": "483030"
  },
  {
    "text": "data anywhere in the list based on its",
    "start": "483030",
    "end": "484979"
  },
  {
    "text": "key value instead of its index position",
    "start": "484979",
    "end": "486780"
  },
  {
    "text": "this ensures that every document in the",
    "start": "486780",
    "end": "489419"
  },
  {
    "text": "array is unique because otherwise we are",
    "start": "489419",
    "end": "491400"
  },
  {
    "text": "at risk of adding duplicate documents to",
    "start": "491400",
    "end": "493500"
  },
  {
    "text": "the array if things change between the",
    "start": "493500",
    "end": "495360"
  },
  {
    "text": "queries so the next thing we want to do",
    "start": "495360",
    "end": "497940"
  },
  {
    "start": "496000",
    "end": "559000"
  },
  {
    "text": "is go into our constructor and set up a",
    "start": "497940",
    "end": "500130"
  },
  {
    "text": "source observable that first listens to",
    "start": "500130",
    "end": "502470"
  },
  {
    "text": "the offset value and then merges and new",
    "start": "502470",
    "end": "504690"
  },
  {
    "text": "batches whenever the offset changes",
    "start": "504690",
    "end": "506820"
  },
  {
    "text": "which again will happen when the user",
    "start": "506820",
    "end": "508740"
  },
  {
    "text": "Scrolls to the bottom of the list that",
    "start": "508740",
    "end": "511229"
  },
  {
    "text": "event can be fired multiple times so I'm",
    "start": "511229",
    "end": "513419"
  },
  {
    "text": "going to throttle it by 500 milliseconds",
    "start": "513419",
    "end": "515760"
  },
  {
    "text": "just so we're not sending off redundant",
    "start": "515760",
    "end": "517229"
  },
  {
    "text": "requests to the backend now you'll",
    "start": "517229",
    "end": "519659"
  },
  {
    "text": "notice that I'm using merge map here to",
    "start": "519659",
    "end": "521339"
  },
  {
    "text": "merge a new batch into the stream it's",
    "start": "521339",
    "end": "523919"
  },
  {
    "text": "important to use merge map here and not",
    "start": "523919",
    "end": "525390"
  },
  {
    "text": "switch map because otherwise the",
    "start": "525390",
    "end": "527070"
  },
  {
    "text": "previous subscriptions would be canceled",
    "start": "527070",
    "end": "528750"
  },
  {
    "text": "meaning that only the very last batch",
    "start": "528750",
    "end": "530880"
  },
  {
    "text": "would be real-time from there we can",
    "start": "530880",
    "end": "533100"
  },
  {
    "text": "pipe in the scan operator which will",
    "start": "533100",
    "end": "534660"
  },
  {
    "text": "just",
    "start": "534660",
    "end": "534870"
  },
  {
    "text": "merge in the current batch with the",
    "start": "534870",
    "end": "536339"
  },
  {
    "text": "existing batches so this batch map",
    "start": "536339",
    "end": "538920"
  },
  {
    "text": "observable is our main source of truth",
    "start": "538920",
    "end": "540750"
  },
  {
    "text": "because it contains all the mappings for",
    "start": "540750",
    "end": "542790"
  },
  {
    "text": "the individual item keys and their data",
    "start": "542790",
    "end": "545240"
  },
  {
    "text": "but we still want an actual array to",
    "start": "545240",
    "end": "547680"
  },
  {
    "text": "loop over in the front end so we can go",
    "start": "547680",
    "end": "550860"
  },
  {
    "text": "here and define our actual infinite",
    "start": "550860",
    "end": "552839"
  },
  {
    "text": "array of objects as this batch map but",
    "start": "552839",
    "end": "555660"
  },
  {
    "text": "map to the object values which will give",
    "start": "555660",
    "end": "557580"
  },
  {
    "text": "us an array of objects and that takes",
    "start": "557580",
    "end": "560370"
  },
  {
    "start": "559000",
    "end": "626000"
  },
  {
    "text": "care of the main logic for our infinite",
    "start": "560370",
    "end": "562200"
  },
  {
    "text": "real-time virtual scroll that may have",
    "start": "562200",
    "end": "564450"
  },
  {
    "text": "seemed relatively complex but in the",
    "start": "564450",
    "end": "566339"
  },
  {
    "text": "grand scheme of things it's very simple",
    "start": "566339",
    "end": "568110"
  },
  {
    "text": "considering what it does now we just",
    "start": "568110",
    "end": "570300"
  },
  {
    "text": "have a couple of small modifications in",
    "start": "570300",
    "end": "571950"
  },
  {
    "text": "the HTML if you want to show an index in",
    "start": "571950",
    "end": "574080"
  },
  {
    "text": "your list you can just say let I equals",
    "start": "574080",
    "end": "576060"
  },
  {
    "text": "index and then we'll also add in our",
    "start": "576060",
    "end": "577980"
  },
  {
    "text": "track by function that we defined",
    "start": "577980",
    "end": "579180"
  },
  {
    "text": "earlier then we can listen to that",
    "start": "579180",
    "end": "581910"
  },
  {
    "text": "scrolled index change event and the",
    "start": "581910",
    "end": "583980"
  },
  {
    "text": "first argument will be the event itself",
    "start": "583980",
    "end": "585660"
  },
  {
    "text": "which is the index number then the",
    "start": "585660",
    "end": "588089"
  },
  {
    "text": "second argument is the offset value for",
    "start": "588089",
    "end": "590190"
  },
  {
    "text": "the query which in our case will be the",
    "start": "590190",
    "end": "591810"
  },
  {
    "text": "name of the very last person in the",
    "start": "591810",
    "end": "593970"
  },
  {
    "text": "array we can actually just parse that",
    "start": "593970",
    "end": "596160"
  },
  {
    "text": "value right here in the template not the",
    "start": "596160",
    "end": "598230"
  },
  {
    "text": "prettiest code in the world but it works",
    "start": "598230",
    "end": "599880"
  },
  {
    "text": "then the last thing we need to do is",
    "start": "599880",
    "end": "601740"
  },
  {
    "text": "unwrap the infinite observable my",
    "start": "601740",
    "end": "604170"
  },
  {
    "text": "preferred way of doing this is using an",
    "start": "604170",
    "end": "605820"
  },
  {
    "text": "NG container and then unwrapping the",
    "start": "605820",
    "end": "607890"
  },
  {
    "text": "observable with the async pipe we can",
    "start": "607890",
    "end": "610140"
  },
  {
    "text": "then say as people to give us a template",
    "start": "610140",
    "end": "612330"
  },
  {
    "text": "variable of the array of objects and",
    "start": "612330",
    "end": "614490"
  },
  {
    "text": "then we can just use it throughout this",
    "start": "614490",
    "end": "615779"
  },
  {
    "text": "HTML now if we pull up the demo you can",
    "start": "615779",
    "end": "618450"
  },
  {
    "text": "see that we have all of our objects here",
    "start": "618450",
    "end": "620130"
  },
  {
    "text": "in the database and they're queried in",
    "start": "620130",
    "end": "621959"
  },
  {
    "text": "the same alphabetical order that we get",
    "start": "621959",
    "end": "623880"
  },
  {
    "text": "when we order them on the firebase",
    "start": "623880",
    "end": "625529"
  },
  {
    "text": "console and if we make any changes to",
    "start": "625529",
    "end": "628200"
  },
  {
    "start": "626000",
    "end": "703000"
  },
  {
    "text": "our data on the right it'll be reflected",
    "start": "628200",
    "end": "630029"
  },
  {
    "text": "in the UI on the left in real time it is",
    "start": "630029",
    "end": "632940"
  },
  {
    "text": "important to keep in mind that the",
    "start": "632940",
    "end": "634050"
  },
  {
    "text": "actual position of the item won't change",
    "start": "634050",
    "end": "635760"
  },
  {
    "text": "and if it's deleted it won't be removed",
    "start": "635760",
    "end": "637860"
  },
  {
    "text": "from the list but if you need that",
    "start": "637860",
    "end": "639480"
  },
  {
    "text": "functionality that could definitely be",
    "start": "639480",
    "end": "640770"
  },
  {
    "text": "made possible with some additional work",
    "start": "640770",
    "end": "642480"
  },
  {
    "text": "in the code now I am pulling up the",
    "start": "642480",
    "end": "644490"
  },
  {
    "text": "browser console and you'll notice that",
    "start": "644490",
    "end": "646170"
  },
  {
    "text": "there's an array being console logged on",
    "start": "646170",
    "end": "647940"
  },
  {
    "text": "the right every time we get to a certain",
    "start": "647940",
    "end": "649620"
  },
  {
    "text": "event the array size initially starts at",
    "start": "649620",
    "end": "651900"
  },
  {
    "text": "20 and then as we scroll down it will",
    "start": "651900",
    "end": "654270"
  },
  {
    "text": "change the offset and our array grows",
    "start": "654270",
    "end": "655980"
  },
  {
    "text": "from 20 to 40 to 60 and so on and from",
    "start": "655980",
    "end": "659820"
  },
  {
    "text": "the users perspective it happens so fast",
    "start": "659820",
    "end": "661500"
  },
  {
    "text": "that it looks like this list existed all",
    "start": "661500",
    "end": "663570"
  },
  {
    "text": "along which is exactly what you want",
    "start": "663570",
    "end": "665550"
  },
  {
    "text": "with an infinite scroll",
    "start": "665550",
    "end": "666800"
  },
  {
    "text": "but we are keeping track when we get to",
    "start": "666800",
    "end": "668720"
  },
  {
    "text": "the end of the list so when we finally",
    "start": "668720",
    "end": "670370"
  },
  {
    "text": "reach that point we'll go ahead and give",
    "start": "670370",
    "end": "671750"
  },
  {
    "text": "the user some indication that there are",
    "start": "671750",
    "end": "673399"
  },
  {
    "text": "no items left to retrieve that's all",
    "start": "673399",
    "end": "675709"
  },
  {
    "text": "folks if this video helps you please",
    "start": "675709",
    "end": "677420"
  },
  {
    "text": "like and subscribe and if you want to",
    "start": "677420",
    "end": "679070"
  },
  {
    "text": "take your development to the next level",
    "start": "679070",
    "end": "680600"
  },
  {
    "text": "consider becoming a pro member at",
    "start": "680600",
    "end": "682310"
  },
  {
    "text": "angular firebase comm you'll get access",
    "start": "682310",
    "end": "684200"
  },
  {
    "text": "to all kinds of exclusive content like",
    "start": "684200",
    "end": "686149"
  },
  {
    "text": "full courses and my book designed to",
    "start": "686149",
    "end": "688190"
  },
  {
    "text": "help you build and ship your app faster",
    "start": "688190",
    "end": "689570"
  },
  {
    "text": "thanks for watching and I'll talk to you",
    "start": "689570",
    "end": "691940"
  },
  {
    "text": "soon",
    "start": "691940",
    "end": "694089"
  }
]