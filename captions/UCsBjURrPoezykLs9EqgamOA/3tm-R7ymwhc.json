[
  {
    "start": "0",
    "end": "87000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "6389"
  },
  {
    "text": "state management for whatever reason is",
    "start": "6410",
    "end": "9030"
  },
  {
    "text": "a topic that brings out strong opinions",
    "start": "9030",
    "end": "10769"
  },
  {
    "text": "and developers I'm gonna have to go",
    "start": "10769",
    "end": "17010"
  },
  {
    "text": "ahead and sort of disagree with you",
    "start": "17010",
    "end": "18750"
  },
  {
    "text": "there in today's video we'll look at 10",
    "start": "18750",
    "end": "20490"
  },
  {
    "text": "different ways to build a basic counter",
    "start": "20490",
    "end": "22140"
  },
  {
    "text": "app using different state management",
    "start": "22140",
    "end": "23699"
  },
  {
    "text": "strategies employer we'll also just talk",
    "start": "23699",
    "end": "25500"
  },
  {
    "text": "about what state management is and why",
    "start": "25500",
    "end": "27240"
  },
  {
    "text": "there are so many different ways to",
    "start": "27240",
    "end": "28349"
  },
  {
    "text": "approach it and hopefully by the end of",
    "start": "28349",
    "end": "29820"
  },
  {
    "text": "this video you know exactly where",
    "start": "29820",
    "end": "31140"
  },
  {
    "text": "strategy is ideal for your app if you're",
    "start": "31140",
    "end": "33210"
  },
  {
    "text": "new here like and subscribe and you grab",
    "start": "33210",
    "end": "34829"
  },
  {
    "text": "the full source code on fire ship IO and",
    "start": "34829",
    "end": "36750"
  },
  {
    "text": "I'm giving away another t-shirt with",
    "start": "36750",
    "end": "38280"
  },
  {
    "text": "this video just leave me a comment with",
    "start": "38280",
    "end": "39809"
  },
  {
    "text": "your own opinions about state management",
    "start": "39809",
    "end": "41280"
  },
  {
    "text": "below first of all what is stake in a",
    "start": "41280",
    "end": "43739"
  },
  {
    "text": "reactive framework like flutter you can",
    "start": "43739",
    "end": "45329"
  },
  {
    "text": "think of your UI as the return value of",
    "start": "45329",
    "end": "47340"
  },
  {
    "text": "a function that function gets called",
    "start": "47340",
    "end": "48870"
  },
  {
    "text": "with one argument which is your state so",
    "start": "48870",
    "end": "51180"
  },
  {
    "text": "state is just data that changes over the",
    "start": "51180",
    "end": "53039"
  },
  {
    "text": "lifecycle of your app a lot of your data",
    "start": "53039",
    "end": "55140"
  },
  {
    "text": "can be self-contained within a single",
    "start": "55140",
    "end": "56699"
  },
  {
    "text": "widget that's known as local state we'll",
    "start": "56699",
    "end": "59010"
  },
  {
    "text": "look at the tools that we have built",
    "start": "59010",
    "end": "60030"
  },
  {
    "text": "into flutter to manage local state which",
    "start": "60030",
    "end": "61829"
  },
  {
    "text": "is pretty straightforward things get",
    "start": "61829",
    "end": "63329"
  },
  {
    "text": "interesting when we start talking about",
    "start": "63329",
    "end": "64588"
  },
  {
    "text": "global state or state that needs to be",
    "start": "64589",
    "end": "66510"
  },
  {
    "text": "shared throughout the widget tree coming",
    "start": "66510",
    "end": "68369"
  },
  {
    "text": "from the web development world I've seen",
    "start": "68369",
    "end": "69869"
  },
  {
    "text": "tons of debate over state management and",
    "start": "69869",
    "end": "71820"
  },
  {
    "text": "a lot of apps over engineered with these",
    "start": "71820",
    "end": "73680"
  },
  {
    "text": "big state management libraries that",
    "start": "73680",
    "end": "75210"
  },
  {
    "text": "didn't really need them that's not to",
    "start": "75210",
    "end": "76710"
  },
  {
    "text": "say they're not valuable but even the",
    "start": "76710",
    "end": "78180"
  },
  {
    "text": "creators and maintainer of those",
    "start": "78180",
    "end": "79439"
  },
  {
    "text": "libraries will tell you that you",
    "start": "79439",
    "end": "80670"
  },
  {
    "text": "probably don't need them we'll talk",
    "start": "80670",
    "end": "82170"
  },
  {
    "text": "about the pros and cons of these various",
    "start": "82170",
    "end": "83700"
  },
  {
    "text": "libraries as we go but for now let's",
    "start": "83700",
    "end": "85530"
  },
  {
    "text": "focus on the fundamental building blocks",
    "start": "85530",
    "end": "87119"
  },
  {
    "start": "87000",
    "end": "161000"
  },
  {
    "text": "in flutter starting with the stateful",
    "start": "87119",
    "end": "89189"
  },
  {
    "text": "widget when you run flutter create from",
    "start": "89189",
    "end": "90869"
  },
  {
    "text": "the command line it gives you some",
    "start": "90869",
    "end": "92130"
  },
  {
    "text": "starter code that increments a counter",
    "start": "92130",
    "end": "93630"
  },
  {
    "text": "with a stateful widget we're going to",
    "start": "93630",
    "end": "95759"
  },
  {
    "text": "rebuild this counter multiple times",
    "start": "95759",
    "end": "97079"
  },
  {
    "text": "throughout this video using different",
    "start": "97079",
    "end": "98549"
  },
  {
    "text": "state management strategies to create a",
    "start": "98549",
    "end": "100409"
  },
  {
    "text": "stateful widget we need two classes the",
    "start": "100409",
    "end": "102570"
  },
  {
    "text": "first one is the stateful widget itself",
    "start": "102570",
    "end": "104460"
  },
  {
    "text": "and that implements a create state",
    "start": "104460",
    "end": "106229"
  },
  {
    "text": "method and that returns our second class",
    "start": "106229",
    "end": "108750"
  },
  {
    "text": "which is an extension of the state class",
    "start": "108750",
    "end": "110970"
  },
  {
    "text": "and this is where all the heavy lifting",
    "start": "110970",
    "end": "112470"
  },
  {
    "text": "happens first we define a property",
    "start": "112470",
    "end": "114360"
  },
  {
    "text": "called counter which is an integer that",
    "start": "114360",
    "end": "116189"
  },
  {
    "text": "defines the actual data state of this",
    "start": "116189",
    "end": "117990"
  },
  {
    "text": "widget then we define a method called",
    "start": "117990",
    "end": "119790"
  },
  {
    "text": "increment counter and it calls a method",
    "start": "119790",
    "end": "121590"
  },
  {
    "text": "called set state which will tell this",
    "start": "121590",
    "end": "123420"
  },
  {
    "text": "widget to re-render when this value",
    "start": "123420",
    "end": "125250"
  },
  {
    "text": "changes after that we implement the",
    "start": "125250",
    "end": "127439"
  },
  {
    "text": "build function which defines the actual",
    "start": "127439",
    "end": "129330"
  },
  {
    "text": "widgets that will be rebuilt every time",
    "start": "129330",
    "end": "131250"
  },
  {
    "text": "set state is called I've stripped these",
    "start": "131250",
    "end": "132840"
  },
  {
    "text": "down to the bare minimum",
    "start": "132840",
    "end": "133709"
  },
  {
    "text": "we just have a text widget that will",
    "start": "133709",
    "end": "135450"
  },
  {
    "text": "display the current value of the counter",
    "start": "135450",
    "end": "136709"
  },
  {
    "text": "and we have a floating action button",
    "start": "136709",
    "end": "138750"
  },
  {
    "text": "that will increment the counter when",
    "start": "138750",
    "end": "140099"
  },
  {
    "text": "pressed stateful widgets are great for",
    "start": "140099",
    "end": "142709"
  },
  {
    "text": "managing local state but there's a",
    "start": "142709",
    "end": "144269"
  },
  {
    "text": "couple things I don't like here first of",
    "start": "144269",
    "end": "145920"
  },
  {
    "text": "all we have to define two separate",
    "start": "145920",
    "end": "147359"
  },
  {
    "text": "classes which is sort of confusing and",
    "start": "147359",
    "end": "149099"
  },
  {
    "text": "adds boilerplate and I know from",
    "start": "149099",
    "end": "150569"
  },
  {
    "text": "experience with react j/s that coin set",
    "start": "150569",
    "end": "152790"
  },
  {
    "text": "state all over the place does not scale",
    "start": "152790",
    "end": "154349"
  },
  {
    "text": "very well it's fine when we just have",
    "start": "154349",
    "end": "155849"
  },
  {
    "text": "one property but you can imagine how",
    "start": "155849",
    "end": "157349"
  },
  {
    "text": "this would become a mess if we had 20",
    "start": "157349",
    "end": "158879"
  },
  {
    "text": "different properties on this widget to",
    "start": "158879",
    "end": "160319"
  },
  {
    "text": "update and with that I'll move on to",
    "start": "160319",
    "end": "162060"
  },
  {
    "start": "161000",
    "end": "255000"
  },
  {
    "text": "topic number two a stateful builder",
    "start": "162060",
    "end": "163980"
  },
  {
    "text": "there's a variety of different builder",
    "start": "163980",
    "end": "165659"
  },
  {
    "text": "widgets in flutter that allow you to",
    "start": "165659",
    "end": "167189"
  },
  {
    "text": "react to different types of changes one",
    "start": "167189",
    "end": "169709"
  },
  {
    "text": "of those a stateful builder which will",
    "start": "169709",
    "end": "171209"
  },
  {
    "text": "allow us to simplify our stateful widget",
    "start": "171209",
    "end": "173370"
  },
  {
    "text": "code notice this time we're starting by",
    "start": "173370",
    "end": "175230"
  },
  {
    "text": "extending a stateless widget and then",
    "start": "175230",
    "end": "177060"
  },
  {
    "text": "we'll define our state as a counter that",
    "start": "177060",
    "end": "178650"
  },
  {
    "text": "starts at zero then the first widget",
    "start": "178650",
    "end": "181049"
  },
  {
    "text": "that will add to our build method is a",
    "start": "181049",
    "end": "182700"
  },
  {
    "text": "stateful builder and that takes a",
    "start": "182700",
    "end": "184769"
  },
  {
    "text": "builder function that function gives us",
    "start": "184769",
    "end": "186840"
  },
  {
    "text": "access to the build context and also a",
    "start": "186840",
    "end": "189090"
  },
  {
    "text": "function called set state when we call",
    "start": "189090",
    "end": "191400"
  },
  {
    "text": "set state it will tell the stateful",
    "start": "191400",
    "end": "192959"
  },
  {
    "text": "builder to rebuild all the widgets",
    "start": "192959",
    "end": "194700"
  },
  {
    "text": "inside this function and they'll look",
    "start": "194700",
    "end": "196200"
  },
  {
    "text": "pretty much identical to the previous",
    "start": "196200",
    "end": "197609"
  },
  {
    "text": "example where we have text for the",
    "start": "197609",
    "end": "199229"
  },
  {
    "text": "counter value and then a floating action",
    "start": "199229",
    "end": "200879"
  },
  {
    "text": "button to increment it now I want to",
    "start": "200879",
    "end": "203069"
  },
  {
    "text": "point out that I'm kind of breaking the",
    "start": "203069",
    "end": "204329"
  },
  {
    "text": "rules in flutter that's why you see this",
    "start": "204329",
    "end": "205949"
  },
  {
    "text": "green squiggly line under the class name",
    "start": "205949",
    "end": "207720"
  },
  {
    "text": "this class is immutable which means the",
    "start": "207720",
    "end": "209879"
  },
  {
    "text": "properties on it should never be",
    "start": "209879",
    "end": "210989"
  },
  {
    "text": "reassigned and we're violating that by",
    "start": "210989",
    "end": "213000"
  },
  {
    "text": "incrementing the counter so if you use a",
    "start": "213000",
    "end": "214859"
  },
  {
    "text": "stateful builder within a stateless",
    "start": "214859",
    "end": "216449"
  },
  {
    "text": "widget I would recommend setting up your",
    "start": "216449",
    "end": "218099"
  },
  {
    "text": "data as a map or a list because you can",
    "start": "218099",
    "end": "220290"
  },
  {
    "text": "mutate values in those data structures",
    "start": "220290",
    "end": "221970"
  },
  {
    "text": "without breaking the contract of the",
    "start": "221970",
    "end": "223650"
  },
  {
    "text": "stateless widget but overall the",
    "start": "223650",
    "end": "225689"
  },
  {
    "text": "stateful builder is a nice little tool",
    "start": "225689",
    "end": "227250"
  },
  {
    "text": "that helps you avoid the boilerplate of",
    "start": "227250",
    "end": "229019"
  },
  {
    "text": "a stateful widget and is really ideal",
    "start": "229019",
    "end": "230790"
  },
  {
    "text": "when you have simple local state",
    "start": "230790",
    "end": "232409"
  },
  {
    "text": "management to deal with but now things",
    "start": "232409",
    "end": "234479"
  },
  {
    "text": "are going to start getting interesting",
    "start": "234479",
    "end": "235769"
  },
  {
    "text": "because we're going to talk about app",
    "start": "235769",
    "end": "237030"
  },
  {
    "text": "state or global state in flutter it's",
    "start": "237030",
    "end": "239430"
  },
  {
    "text": "possible to pass data from top to bottom",
    "start": "239430",
    "end": "241049"
  },
  {
    "text": "or from parent to child but it's not",
    "start": "241049",
    "end": "243599"
  },
  {
    "text": "really practical to pass data the other",
    "start": "243599",
    "end": "245099"
  },
  {
    "text": "way around from child back to parent or",
    "start": "245099",
    "end": "247319"
  },
  {
    "text": "from sibling to sibling but almost every",
    "start": "247319",
    "end": "249840"
  },
  {
    "text": "non-trivial app is going to have some",
    "start": "249840",
    "end": "251609"
  },
  {
    "text": "kind of shared state at one point or",
    "start": "251609",
    "end": "252989"
  },
  {
    "text": "another that runs into this limitation",
    "start": "252989",
    "end": "254519"
  },
  {
    "text": "the first thing I want to show you is",
    "start": "254519",
    "end": "256199"
  },
  {
    "start": "255000",
    "end": "371000"
  },
  {
    "text": "inherited widget now I don't recommend",
    "start": "256199",
    "end": "257970"
  },
  {
    "text": "using this as a state management",
    "start": "257970",
    "end": "259320"
  },
  {
    "text": "solution because there are better",
    "start": "259320",
    "end": "260669"
  },
  {
    "text": "alternatives that already do it for you",
    "start": "260669",
    "end": "262200"
  },
  {
    "text": "but it's important to know how it works",
    "start": "262200",
    "end": "263430"
  },
  {
    "text": "because it's a fundamental building",
    "start": "263430",
    "end": "264690"
  },
  {
    "text": "block in flutter that's implemented in",
    "start": "264690",
    "end": "266580"
  },
  {
    "text": "many other",
    "start": "266580",
    "end": "267210"
  },
  {
    "text": "features of the framework basically it's",
    "start": "267210",
    "end": "268800"
  },
  {
    "text": "a widget that allows you to pass context",
    "start": "268800",
    "end": "270569"
  },
  {
    "text": "to any of its descendants no matter how",
    "start": "270569",
    "end": "272280"
  },
  {
    "text": "far nested they are in the widget tree",
    "start": "272280",
    "end": "273900"
  },
  {
    "text": "so the first thing you'll usually do is",
    "start": "273900",
    "end": "276060"
  },
  {
    "text": "put the inherited widget towards the top",
    "start": "276060",
    "end": "277979"
  },
  {
    "text": "of the widget tree which we've done here",
    "start": "277979",
    "end": "279389"
  },
  {
    "text": "with our inherited counter and then we",
    "start": "279389",
    "end": "281009"
  },
  {
    "text": "have our actual homepage as a child of",
    "start": "281009",
    "end": "283020"
  },
  {
    "text": "that inherited widget our inherited",
    "start": "283020",
    "end": "284789"
  },
  {
    "text": "counter will extend the inherited widget",
    "start": "284789",
    "end": "286620"
  },
  {
    "text": "built into flutter and it will take a",
    "start": "286620",
    "end": "288150"
  },
  {
    "text": "child widget as an argument to its",
    "start": "288150",
    "end": "289889"
  },
  {
    "text": "constructor from there we're going to",
    "start": "289889",
    "end": "292020"
  },
  {
    "text": "override a method called update should",
    "start": "292020",
    "end": "293669"
  },
  {
    "text": "notify and this will run when this",
    "start": "293669",
    "end": "295590"
  },
  {
    "text": "inherited widget is rebuilt and will",
    "start": "295590",
    "end": "297539"
  },
  {
    "text": "notify any descendents whether or not",
    "start": "297539",
    "end": "298949"
  },
  {
    "text": "they need to rebuild I'm just setting it",
    "start": "298949",
    "end": "300810"
  },
  {
    "text": "to true but you could look at the",
    "start": "300810",
    "end": "303320"
  },
  {
    "text": "different the widget actually needs to",
    "start": "303320",
    "end": "305820"
  },
  {
    "text": "re-render",
    "start": "305820",
    "end": "306300"
  },
  {
    "text": "and then it's conventional to also",
    "start": "306300",
    "end": "308400"
  },
  {
    "text": "implement a static method called of",
    "start": "308400",
    "end": "310050"
  },
  {
    "text": "thing calls inherit from widget of exact",
    "start": "310050",
    "end": "312389"
  },
  {
    "text": "type with the inherited counter type now",
    "start": "312389",
    "end": "315240"
  },
  {
    "text": "the inherited widget is immutable so we",
    "start": "315240",
    "end": "317340"
  },
  {
    "text": "could wrap it in a stateful widget to",
    "start": "317340",
    "end": "318960"
  },
  {
    "text": "tell it when to rebuild but for the sake",
    "start": "318960",
    "end": "320970"
  },
  {
    "text": "of simplicity I'll just go ahead and",
    "start": "320970",
    "end": "322380"
  },
  {
    "text": "define our counter data as a map this is",
    "start": "322380",
    "end": "324659"
  },
  {
    "text": "a private variable so first we'll go",
    "start": "324659",
    "end": "326580"
  },
  {
    "text": "ahead and define an increment method",
    "start": "326580",
    "end": "328050"
  },
  {
    "text": "which allows us to increment the counter",
    "start": "328050",
    "end": "330000"
  },
  {
    "text": "value and then we'll add a getter to get",
    "start": "330000",
    "end": "332039"
  },
  {
    "text": "the current value from the map now that",
    "start": "332039",
    "end": "334110"
  },
  {
    "text": "we have that setup we can go down here",
    "start": "334110",
    "end": "335610"
  },
  {
    "text": "and define our state list widget home",
    "start": "335610",
    "end": "337380"
  },
  {
    "text": "page now just for convenience I'm using",
    "start": "337380",
    "end": "339419"
  },
  {
    "text": "the example we had set up previously",
    "start": "339419",
    "end": "340500"
  },
  {
    "text": "with our stateful builder and inside",
    "start": "340500",
    "end": "342750"
  },
  {
    "text": "that builder method we can access the",
    "start": "342750",
    "end": "344550"
  },
  {
    "text": "value from the inherited counter by",
    "start": "344550",
    "end": "346139"
  },
  {
    "text": "calling of context with the values from",
    "start": "346139",
    "end": "348750"
  },
  {
    "text": "that class now this may look trivial in",
    "start": "348750",
    "end": "351180"
  },
  {
    "text": "this example but if you imagine our",
    "start": "351180",
    "end": "352919"
  },
  {
    "text": "homepage was nested 20 levels deep it",
    "start": "352919",
    "end": "355259"
  },
  {
    "text": "could still access these values without",
    "start": "355259",
    "end": "357090"
  },
  {
    "text": "having to directly pass anything through",
    "start": "357090",
    "end": "358800"
  },
  {
    "text": "each constructor in the widget tree now",
    "start": "358800",
    "end": "361199"
  },
  {
    "text": "like I said earlier you probably don't",
    "start": "361199",
    "end": "362789"
  },
  {
    "text": "need to mess with inherited widgets",
    "start": "362789",
    "end": "364259"
  },
  {
    "text": "directly and you'll see why later in",
    "start": "364259",
    "end": "365909"
  },
  {
    "text": "this video because there's already",
    "start": "365909",
    "end": "367139"
  },
  {
    "text": "libraries that do similar things in a",
    "start": "367139",
    "end": "369030"
  },
  {
    "text": "much less awkward way but before we get",
    "start": "369030",
    "end": "371370"
  },
  {
    "start": "371000",
    "end": "530000"
  },
  {
    "text": "to that point I want to show you my",
    "start": "371370",
    "end": "372840"
  },
  {
    "text": "personal favorite way to manage global",
    "start": "372840",
    "end": "374460"
  },
  {
    "text": "State in a flutter app and that is to",
    "start": "374460",
    "end": "376380"
  },
  {
    "text": "leverage a special type of stream and rx",
    "start": "376380",
    "end": "378300"
  },
  {
    "text": "dart called a behavior subject we'll",
    "start": "378300",
    "end": "380400"
  },
  {
    "text": "start by creating our own custom class",
    "start": "380400",
    "end": "381780"
  },
  {
    "text": "and then give it a private value that's",
    "start": "381780",
    "end": "383699"
  },
  {
    "text": "set to a behavior subject that starts at",
    "start": "383699",
    "end": "385710"
  },
  {
    "text": "0 these are incredibly useful for state",
    "start": "385710",
    "end": "388289"
  },
  {
    "text": "management for a variety of reasons",
    "start": "388289",
    "end": "389909"
  },
  {
    "text": "first of all they always have a current",
    "start": "389909",
    "end": "391710"
  },
  {
    "text": "value that we can read and flutters",
    "start": "391710",
    "end": "393210"
  },
  {
    "text": "build methods but at the same time we",
    "start": "393210",
    "end": "395190"
  },
  {
    "text": "can treat them as a stream and a stream",
    "start": "395190",
    "end": "397139"
  },
  {
    "text": "that we can control by adding new values",
    "start": "397139",
    "end": "398849"
  },
  {
    "text": "to it and it's a broadcast stream by",
    "start": "398849",
    "end": "400529"
  },
  {
    "text": "default",
    "start": "400529",
    "end": "400960"
  },
  {
    "text": "so multiple widgets can listen to the",
    "start": "400960",
    "end": "402610"
  },
  {
    "text": "same stream this allows us to implement",
    "start": "402610",
    "end": "404740"
  },
  {
    "text": "our own business logic related to the",
    "start": "404740",
    "end": "406389"
  },
  {
    "text": "flow of data for the stream and we can",
    "start": "406389",
    "end": "408580"
  },
  {
    "text": "do it completely independent of the",
    "start": "408580",
    "end": "409900"
  },
  {
    "text": "widget tree that makes it much easier to",
    "start": "409900",
    "end": "411729"
  },
  {
    "text": "test in isolation and also just easier",
    "start": "411729",
    "end": "413800"
  },
  {
    "text": "to reason about now we can define our",
    "start": "413800",
    "end": "415630"
  },
  {
    "text": "own custom API that our widgets can",
    "start": "415630",
    "end": "417280"
  },
  {
    "text": "consume for example if we want to expose",
    "start": "417280",
    "end": "419320"
  },
  {
    "text": "the stream we can just call counter",
    "start": "419320",
    "end": "420789"
  },
  {
    "text": "stream then we can also create a getter",
    "start": "420789",
    "end": "422470"
  },
  {
    "text": "that grabs the current value",
    "start": "422470",
    "end": "423820"
  },
  {
    "text": "synchronously from the behavior subject",
    "start": "423820",
    "end": "425530"
  },
  {
    "text": "and then we'll define a method to mutate",
    "start": "425530",
    "end": "427870"
  },
  {
    "text": "the behavior subject called increment",
    "start": "427870",
    "end": "429160"
  },
  {
    "text": "which just adds a new value to the",
    "start": "429160",
    "end": "431080"
  },
  {
    "text": "stream and that's basically all it takes",
    "start": "431080",
    "end": "432699"
  },
  {
    "text": "to build your own custom state",
    "start": "432699",
    "end": "433990"
  },
  {
    "text": "management solution that all of your",
    "start": "433990",
    "end": "435550"
  },
  {
    "text": "widgets can react to and share now I'm",
    "start": "435550",
    "end": "438130"
  },
  {
    "text": "going to just instantiate it in the",
    "start": "438130",
    "end": "439630"
  },
  {
    "text": "global namespace which is kind of",
    "start": "439630",
    "end": "441130"
  },
  {
    "text": "frowned upon but I'll show you an",
    "start": "441130",
    "end": "442419"
  },
  {
    "text": "alternative to this in just a minute",
    "start": "442419",
    "end": "443919"
  },
  {
    "text": "now that we have access to this counter",
    "start": "443919",
    "end": "445479"
  },
  {
    "text": "service globally we can rebuild that",
    "start": "445479",
    "end": "447190"
  },
  {
    "text": "homepage widget in the build method",
    "start": "447190",
    "end": "449139"
  },
  {
    "text": "we'll start with a scaffold and then as",
    "start": "449139",
    "end": "450910"
  },
  {
    "text": "the body will add a stream builder then",
    "start": "450910",
    "end": "453130"
  },
  {
    "text": "we'll pass it the stream from our",
    "start": "453130",
    "end": "454270"
  },
  {
    "text": "behavior subject so now every time we",
    "start": "454270",
    "end": "456580"
  },
  {
    "text": "add a new value to the behavior subject",
    "start": "456580",
    "end": "458259"
  },
  {
    "text": "this widget will rebuild and one minor",
    "start": "458259",
    "end": "460630"
  },
  {
    "text": "thing that you might have missed is that",
    "start": "460630",
    "end": "461800"
  },
  {
    "text": "we're able to mess this stream builder",
    "start": "461800",
    "end": "463419"
  },
  {
    "text": "deeper in the widget tree and that means",
    "start": "463419",
    "end": "465070"
  },
  {
    "text": "we're repainting less of the UI than we",
    "start": "465070",
    "end": "466840"
  },
  {
    "text": "were in previous examples it's not a big",
    "start": "466840",
    "end": "469000"
  },
  {
    "text": "deal here but it could be if you have a",
    "start": "469000",
    "end": "470440"
  },
  {
    "text": "lot of widgets nested in the scaffold",
    "start": "470440",
    "end": "472180"
  },
  {
    "text": "the next thing we'll do is implement the",
    "start": "472180",
    "end": "474370"
  },
  {
    "text": "Builder function for that we'll just",
    "start": "474370",
    "end": "475870"
  },
  {
    "text": "return our text and that will have a",
    "start": "475870",
    "end": "477580"
  },
  {
    "text": "snapshot of the current count or the",
    "start": "477580",
    "end": "479440"
  },
  {
    "text": "current data from the stream and the",
    "start": "479440",
    "end": "481599"
  },
  {
    "text": "actual etc that data is completely",
    "start": "481599",
    "end": "483400"
  },
  {
    "text": "decoupled from the stream builder which",
    "start": "483400",
    "end": "485199"
  },
  {
    "text": "means we can add it outside of the build",
    "start": "485199",
    "end": "486820"
  },
  {
    "text": "context so it doesn't need to rebuild",
    "start": "486820",
    "end": "488320"
  },
  {
    "text": "whenever the actual value of the stream",
    "start": "488320",
    "end": "490120"
  },
  {
    "text": "changes and another bonus of a stream",
    "start": "490120",
    "end": "492580"
  },
  {
    "text": "builder is that it will automatically",
    "start": "492580",
    "end": "493930"
  },
  {
    "text": "unsubscribe from the stream when the",
    "start": "493930",
    "end": "495490"
  },
  {
    "text": "widget is disposed that means you don't",
    "start": "495490",
    "end": "497050"
  },
  {
    "text": "need to manually cancel streams to avoid",
    "start": "497050",
    "end": "498789"
  },
  {
    "text": "memory leaks this is really nice and",
    "start": "498789",
    "end": "500740"
  },
  {
    "text": "flexible but I'd like to get this",
    "start": "500740",
    "end": "502120"
  },
  {
    "text": "applicable namespace and use it in a way",
    "start": "502120",
    "end": "504009"
  },
  {
    "text": "that's more like a true singleton for",
    "start": "504009",
    "end": "505960"
  },
  {
    "text": "that I'm going to register it with a",
    "start": "505960",
    "end": "507310"
  },
  {
    "text": "library called gedit we'll go ahead and",
    "start": "507310",
    "end": "509590"
  },
  {
    "text": "import that library and then instantiate",
    "start": "509590",
    "end": "511449"
  },
  {
    "text": "get it then we'll go into our main",
    "start": "511449",
    "end": "513070"
  },
  {
    "text": "function and call register singleton",
    "start": "513070",
    "end": "514839"
  },
  {
    "text": "pass in the type counter and then",
    "start": "514839",
    "end": "516760"
  },
  {
    "text": "instantiate the counter now we can use",
    "start": "516760",
    "end": "518620"
  },
  {
    "text": "our counter state in any widget that",
    "start": "518620",
    "end": "520360"
  },
  {
    "text": "requires it this makes the state easier",
    "start": "520360",
    "end": "522039"
  },
  {
    "text": "to mock for integration tests and",
    "start": "522039",
    "end": "523750"
  },
  {
    "text": "guarantees that you won't accidentally",
    "start": "523750",
    "end": "525430"
  },
  {
    "text": "instantiate the counter class more than",
    "start": "525430",
    "end": "527170"
  },
  {
    "text": "once if you're an angular developer I",
    "start": "527170",
    "end": "529029"
  },
  {
    "text": "definitely think you'll like this",
    "start": "529029",
    "end": "530020"
  },
  {
    "start": "530000",
    "end": "846000"
  },
  {
    "text": "pattern but now it's time to move on to",
    "start": "530020",
    "end": "531730"
  },
  {
    "text": "the next strategy the block pattern now",
    "start": "531730",
    "end": "534010"
  },
  {
    "text": "we could implement this",
    "start": "534010",
    "end": "534910"
  },
  {
    "text": "entirely from scratch but I highly",
    "start": "534910",
    "end": "536470"
  },
  {
    "text": "recommend using the flutter block",
    "start": "536470",
    "end": "537850"
  },
  {
    "text": "library under the hood it extends the",
    "start": "537850",
    "end": "539800"
  },
  {
    "text": "inherited widget that we looked at",
    "start": "539800",
    "end": "541090"
  },
  {
    "text": "earlier but it provides a much more",
    "start": "541090",
    "end": "542710"
  },
  {
    "text": "intuitive way to pass state around the",
    "start": "542710",
    "end": "544360"
  },
  {
    "text": "widget tree block is very similar to",
    "start": "544360",
    "end": "546220"
  },
  {
    "text": "redux if you've ever worked with react",
    "start": "546220",
    "end": "547980"
  },
  {
    "text": "it provides a very explicit one-way data",
    "start": "547980",
    "end": "550600"
  },
  {
    "text": "flow that we can break down into three",
    "start": "550600",
    "end": "552460"
  },
  {
    "text": "steps there's an event such as the user",
    "start": "552460",
    "end": "554560"
  },
  {
    "text": "clicking on a button that event gets",
    "start": "554560",
    "end": "556510"
  },
  {
    "text": "dispatched to a block and then it will",
    "start": "556510",
    "end": "558430"
  },
  {
    "text": "reduce the next state and omit it out as",
    "start": "558430",
    "end": "560140"
  },
  {
    "text": "a stream so we can use it in stream",
    "start": "560140",
    "end": "561640"
  },
  {
    "text": "builder just like we did in the previous",
    "start": "561640",
    "end": "562840"
  },
  {
    "text": "example the first thing we'll do is",
    "start": "562840",
    "end": "564970"
  },
  {
    "text": "install block and flutter block then",
    "start": "564970",
    "end": "566800"
  },
  {
    "text": "import them in this file then we'll add",
    "start": "566800",
    "end": "568930"
  },
  {
    "text": "the block provider to the root of the",
    "start": "568930",
    "end": "570940"
  },
  {
    "text": "application the block provider itself",
    "start": "570940",
    "end": "572950"
  },
  {
    "text": "actually extends inherited widget and it",
    "start": "572950",
    "end": "574990"
  },
  {
    "text": "takes a block type which will define in",
    "start": "574990",
    "end": "576670"
  },
  {
    "text": "the next step all descendants of this",
    "start": "576670",
    "end": "578230"
  },
  {
    "text": "widget will be able to access the state",
    "start": "578230",
    "end": "580090"
  },
  {
    "text": "where the data contained inside this",
    "start": "580090",
    "end": "581530"
  },
  {
    "text": "block now the next thing we need to do",
    "start": "581530",
    "end": "583240"
  },
  {
    "text": "is define the actions or the events that",
    "start": "583240",
    "end": "585190"
  },
  {
    "text": "the user can dispatch to the block",
    "start": "585190",
    "end": "587170"
  },
  {
    "text": "we just have one single event with no",
    "start": "587170",
    "end": "588670"
  },
  {
    "text": "data payload we'll define that as the",
    "start": "588670",
    "end": "590560"
  },
  {
    "text": "counter event enum with one value of",
    "start": "590560",
    "end": "592600"
  },
  {
    "text": "increment from there we define the",
    "start": "592600",
    "end": "594220"
  },
  {
    "text": "counter block class and it extends block",
    "start": "594220",
    "end": "596320"
  },
  {
    "text": "which is provided by the library and we",
    "start": "596320",
    "end": "598420"
  },
  {
    "text": "provide it with our counter event you",
    "start": "598420",
    "end": "599980"
  },
  {
    "text": "know that we just created now the job of",
    "start": "599980",
    "end": "601720"
  },
  {
    "text": "the block is to define the initial state",
    "start": "601720",
    "end": "603580"
  },
  {
    "text": "this can be your own class but in our",
    "start": "603580",
    "end": "605350"
  },
  {
    "text": "case it's just an integer that starts at",
    "start": "605350",
    "end": "607150"
  },
  {
    "text": "0 the next thing we do is define a",
    "start": "607150",
    "end": "609550"
  },
  {
    "text": "reducer function called map event to",
    "start": "609550",
    "end": "611740"
  },
  {
    "text": "state it has the current state as its",
    "start": "611740",
    "end": "613420"
  },
  {
    "text": "first argument and the event as its",
    "start": "613420",
    "end": "615070"
  },
  {
    "text": "second argument if you've ever worked",
    "start": "615070",
    "end": "616690"
  },
  {
    "text": "with redux or ng rx this should look",
    "start": "616690",
    "end": "618490"
  },
  {
    "text": "very familiar and you'll know the next",
    "start": "618490",
    "end": "620470"
  },
  {
    "text": "step is to define a switch statement",
    "start": "620470",
    "end": "621730"
  },
  {
    "text": "that will look at the event itself and",
    "start": "621730",
    "end": "623680"
  },
  {
    "text": "then determine how to reduce the next",
    "start": "623680",
    "end": "625360"
  },
  {
    "text": "state based on that event so to",
    "start": "625360",
    "end": "626920"
  },
  {
    "text": "increment a counter we take the current",
    "start": "626920",
    "end": "628570"
  },
  {
    "text": "state and add 1 to it and now we're",
    "start": "628570",
    "end": "630880"
  },
  {
    "text": "ready to build out the actual home page",
    "start": "630880",
    "end": "632470"
  },
  {
    "text": "UI widget so this will just be a",
    "start": "632470",
    "end": "634270"
  },
  {
    "text": "stateless widget and inside its build",
    "start": "634270",
    "end": "636550"
  },
  {
    "text": "method it can access the counter block",
    "start": "636550",
    "end": "638320"
  },
  {
    "text": "which it does by calling block provider",
    "start": "638320",
    "end": "639970"
  },
  {
    "text": "of contexts",
    "start": "639970",
    "end": "640930"
  },
  {
    "text": "along with our counter block type and",
    "start": "640930",
    "end": "642490"
  },
  {
    "text": "that should feel very natural to a",
    "start": "642490",
    "end": "643870"
  },
  {
    "text": "flutter developer because you do the",
    "start": "643870",
    "end": "645160"
  },
  {
    "text": "same thing for media queries and themes",
    "start": "645160",
    "end": "646900"
  },
  {
    "text": "and things like that at this point we",
    "start": "646900",
    "end": "648550"
  },
  {
    "text": "want to rebuild the UI when the state of",
    "start": "648550",
    "end": "650170"
  },
  {
    "text": "the block changes we can do that with a",
    "start": "650170",
    "end": "651850"
  },
  {
    "text": "block builder the block builder is just",
    "start": "651850",
    "end": "654310"
  },
  {
    "text": "like a stream builder but instead of a",
    "start": "654310",
    "end": "655840"
  },
  {
    "text": "stream it takes the block as an argument",
    "start": "655840",
    "end": "657880"
  },
  {
    "text": "then we can access the current state",
    "start": "657880",
    "end": "659770"
  },
  {
    "text": "inside of this function which in our",
    "start": "659770",
    "end": "661330"
  },
  {
    "text": "case is just the integer of the counter",
    "start": "661330",
    "end": "663010"
  },
  {
    "text": "when it comes to changing the state we",
    "start": "663010",
    "end": "664810"
  },
  {
    "text": "don't actually mutate the state directly",
    "start": "664810",
    "end": "666370"
  },
  {
    "text": "like we have in previous examples",
    "start": "666370",
    "end": "668250"
  },
  {
    "text": "instead we dispatch an action to the",
    "start": "668250",
    "end": "670350"
  },
  {
    "text": "block and I really like this approach",
    "start": "670350",
    "end": "672270"
  },
  {
    "text": "because it separates all of our business",
    "start": "672270",
    "end": "673980"
  },
  {
    "text": "logic from the widget which is now only",
    "start": "673980",
    "end": "675690"
  },
  {
    "text": "concerned with rendering the UI and",
    "start": "675690",
    "end": "677370"
  },
  {
    "text": "dispatching actions so it obviously took",
    "start": "677370",
    "end": "679230"
  },
  {
    "text": "a little more code to get to this point",
    "start": "679230",
    "end": "680520"
  },
  {
    "text": "but the block pattern is a solid state",
    "start": "680520",
    "end": "682260"
  },
  {
    "text": "management solution that can pay off in",
    "start": "682260",
    "end": "683910"
  },
  {
    "text": "the long run now I don't know if you've",
    "start": "683910",
    "end": "685560"
  },
  {
    "text": "been keeping count but I promise you ten",
    "start": "685560",
    "end": "687090"
  },
  {
    "text": "different state management solutions so",
    "start": "687090",
    "end": "689160"
  },
  {
    "text": "far we've only covered five but there",
    "start": "689160",
    "end": "690690"
  },
  {
    "text": "are five more that you should definitely",
    "start": "690690",
    "end": "691770"
  },
  {
    "text": "know about before making any big",
    "start": "691770",
    "end": "693390"
  },
  {
    "text": "decisions the godfather of all the state",
    "start": "693390",
    "end": "695700"
  },
  {
    "text": "management stuff is redux which has been",
    "start": "695700",
    "end": "697620"
  },
  {
    "text": "the de facto state management library",
    "start": "697620",
    "end": "699120"
  },
  {
    "text": "from the react world but is also",
    "start": "699120",
    "end": "700620"
  },
  {
    "text": "available on flutter it follows a lot of",
    "start": "700620",
    "end": "702270"
  },
  {
    "text": "the same concepts that we just looked at",
    "start": "702270",
    "end": "703740"
  },
  {
    "text": "in the block pattern but usually you",
    "start": "703740",
    "end": "705330"
  },
  {
    "text": "have a single store provider for the",
    "start": "705330",
    "end": "707010"
  },
  {
    "text": "entire app and then you connect that",
    "start": "707010",
    "end": "708390"
  },
  {
    "text": "store to different widgets where it's",
    "start": "708390",
    "end": "709770"
  },
  {
    "text": "needed if you're brand new to state",
    "start": "709770",
    "end": "711060"
  },
  {
    "text": "management I would probably recommend",
    "start": "711060",
    "end": "712080"
  },
  {
    "text": "going straight to block but if you're",
    "start": "712080",
    "end": "713850"
  },
  {
    "text": "already experienced with redux this is",
    "start": "713850",
    "end": "715500"
  },
  {
    "text": "definitely something you'd want to check",
    "start": "715500",
    "end": "716640"
  },
  {
    "text": "out there's another library that",
    "start": "716640",
    "end": "718440"
  },
  {
    "text": "recently became available in flutter",
    "start": "718440",
    "end": "719730"
  },
  {
    "text": "that also comes from the react world mob",
    "start": "719730",
    "end": "721860"
  },
  {
    "text": "X a poll is a lot of the same principles",
    "start": "721860",
    "end": "724110"
  },
  {
    "text": "as redux and block but provides some",
    "start": "724110",
    "end": "725940"
  },
  {
    "text": "extra abstractions that I think make the",
    "start": "725940",
    "end": "727620"
  },
  {
    "text": "process a little more developer-friendly",
    "start": "727620",
    "end": "729210"
  },
  {
    "text": "and one thing that's cool is that it has",
    "start": "729210",
    "end": "730710"
  },
  {
    "text": "a code gen package that you can use to",
    "start": "730710",
    "end": "732570"
  },
  {
    "text": "eliminate a lot of the boilerplate code",
    "start": "732570",
    "end": "733980"
  },
  {
    "text": "that can be very useful if you want to",
    "start": "733980",
    "end": "735660"
  },
  {
    "text": "apply these powerful state management",
    "start": "735660",
    "end": "737010"
  },
  {
    "text": "patterns but have a small team or maybe",
    "start": "737010",
    "end": "739080"
  },
  {
    "text": "you're just prototyping out some ideas",
    "start": "739080",
    "end": "740430"
  },
  {
    "text": "quickly now mob X read X and block are",
    "start": "740430",
    "end": "742740"
  },
  {
    "text": "all state management libraries that I",
    "start": "742740",
    "end": "744150"
  },
  {
    "text": "would consider a pretty heavy weight",
    "start": "744150",
    "end": "745320"
  },
  {
    "text": "that require a lot of explicit code if",
    "start": "745320",
    "end": "747630"
  },
  {
    "text": "you just want to change some data and",
    "start": "747630",
    "end": "749280"
  },
  {
    "text": "pass it around the widget tree then you",
    "start": "749280",
    "end": "750750"
  },
  {
    "text": "should check out scoped model this is",
    "start": "750750",
    "end": "752610"
  },
  {
    "text": "the state management approach that they",
    "start": "752610",
    "end": "753930"
  },
  {
    "text": "described in the official documentation",
    "start": "753930",
    "end": "755370"
  },
  {
    "text": "and like a lot of the other things we've",
    "start": "755370",
    "end": "757170"
  },
  {
    "text": "looked at it uses an inherited widget to",
    "start": "757170",
    "end": "759150"
  },
  {
    "text": "pass state around the tree but in this",
    "start": "759150",
    "end": "761160"
  },
  {
    "text": "version you don't have to write your own",
    "start": "761160",
    "end": "762270"
  },
  {
    "text": "reducer functions or actions or any",
    "start": "762270",
    "end": "764280"
  },
  {
    "text": "other boilerplate code basically you",
    "start": "764280",
    "end": "766500"
  },
  {
    "text": "just define your data and your mutations",
    "start": "766500",
    "end": "768300"
  },
  {
    "text": "inside of a model then you scope that",
    "start": "768300",
    "end": "770160"
  },
  {
    "text": "model somewhere in the widget tree and",
    "start": "770160",
    "end": "771810"
  },
  {
    "text": "then you have a builder that can rebuild",
    "start": "771810",
    "end": "773850"
  },
  {
    "text": "the UI when that model changes so it's a",
    "start": "773850",
    "end": "776130"
  },
  {
    "text": "relatively simple way to deal with",
    "start": "776130",
    "end": "777450"
  },
  {
    "text": "shared state the next package on this",
    "start": "777450",
    "end": "779400"
  },
  {
    "text": "list is one I haven't actually used yet",
    "start": "779400",
    "end": "781020"
  },
  {
    "text": "but that looks very promising flutter",
    "start": "781020",
    "end": "782730"
  },
  {
    "text": "hooks I have used hooks in react Jas and",
    "start": "782730",
    "end": "785130"
  },
  {
    "text": "they definitely improve productivity and",
    "start": "785130",
    "end": "786780"
  },
  {
    "text": "also code reusability this example from",
    "start": "786780",
    "end": "788970"
  },
  {
    "text": "the docs has a use reducer hook and you",
    "start": "788970",
    "end": "791190"
  },
  {
    "text": "can see that hook sets up a lot of the",
    "start": "791190",
    "end": "792570"
  },
  {
    "text": "things that we'd have to do manually",
    "start": "792570",
    "end": "793920"
  },
  {
    "text": "like the state and the action",
    "start": "793920",
    "end": "795390"
  },
  {
    "text": "dispatching so that's a really nice",
    "start": "795390",
    "end": "797220"
  },
  {
    "text": "alternative to the stateful widget or",
    "start": "797220",
    "end": "798959"
  },
  {
    "text": "some of the other approaches that we",
    "start": "798959",
    "end": "800220"
  },
  {
    "text": "looked at for local",
    "start": "800220",
    "end": "801139"
  },
  {
    "text": "state the last item on this list is one",
    "start": "801139",
    "end": "803179"
  },
  {
    "text": "you might not expect",
    "start": "803179",
    "end": "804170"
  },
  {
    "text": "firebase but a lot of people don't",
    "start": "804170",
    "end": "805609"
  },
  {
    "text": "realize is that firebase is already a",
    "start": "805609",
    "end": "807230"
  },
  {
    "text": "state management system that is way more",
    "start": "807230",
    "end": "809059"
  },
  {
    "text": "advanced than anything you're going to",
    "start": "809059",
    "end": "810230"
  },
  {
    "text": "build it may not be a solution for every",
    "start": "810230",
    "end": "812209"
  },
  {
    "text": "state management need but it can't",
    "start": "812209",
    "end": "813649"
  },
  {
    "text": "handle some of the most advanced aspects",
    "start": "813649",
    "end": "815420"
  },
  {
    "text": "of state management like user",
    "start": "815420",
    "end": "816679"
  },
  {
    "text": "authentication persisting data to it",
    "start": "816679",
    "end": "818629"
  },
  {
    "text": "back-end database remote config file",
    "start": "818629",
    "end": "820730"
  },
  {
    "text": "uploads and the list goes on the",
    "start": "820730",
    "end": "822379"
  },
  {
    "text": "firebase SDK exposes everything as",
    "start": "822379",
    "end": "824269"
  },
  {
    "text": "streams or futures which is exactly what",
    "start": "824269",
    "end": "826339"
  },
  {
    "text": "you want with a reactor framework like",
    "start": "826339",
    "end": "827869"
  },
  {
    "text": "flutter I'm gonna go ahead and wrap",
    "start": "827869",
    "end": "829069"
  },
  {
    "text": "things up there if I miss anything",
    "start": "829069",
    "end": "830540"
  },
  {
    "text": "please let me know in the comments and",
    "start": "830540",
    "end": "832069"
  },
  {
    "text": "if you want to support this channel and",
    "start": "832069",
    "end": "833569"
  },
  {
    "text": "get access to even more content consider",
    "start": "833569",
    "end": "835429"
  },
  {
    "text": "becoming a pro member at fire ship IO",
    "start": "835429",
    "end": "837139"
  },
  {
    "text": "thanks for watching and I will talk to",
    "start": "837139",
    "end": "838879"
  },
  {
    "text": "you soon",
    "start": "838879",
    "end": "840650"
  },
  {
    "text": "[Music]",
    "start": "840650",
    "end": "848459"
  }
]