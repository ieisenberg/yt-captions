[
  {
    "start": "0",
    "end": "64000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "6259"
  },
  {
    "text": "which is better",
    "start": "6259",
    "end": "7890"
  },
  {
    "text": "object-oriented or functional",
    "start": "7890",
    "end": "9540"
  },
  {
    "text": "programming how about composition or",
    "start": "9540",
    "end": "11460"
  },
  {
    "text": "inheritance semicolons or no semicolons",
    "start": "11460",
    "end": "14099"
  },
  {
    "text": "is it pronounced Jif or gif and is a hot",
    "start": "14099",
    "end": "17070"
  },
  {
    "text": "dog of sandwich today you'll get all the",
    "start": "17070",
    "end": "19140"
  },
  {
    "text": "answers and I encourage you to just",
    "start": "19140",
    "end": "20609"
  },
  {
    "text": "accept these as the facts and not try",
    "start": "20609",
    "end": "22650"
  },
  {
    "text": "out anything on your own there's only",
    "start": "22650",
    "end": "24449"
  },
  {
    "text": "one correct way to write code and if",
    "start": "24449",
    "end": "26189"
  },
  {
    "text": "there's one thing that employers hate",
    "start": "26189",
    "end": "27390"
  },
  {
    "text": "it's creative problem-solving skills",
    "start": "27390",
    "end": "29160"
  },
  {
    "text": "from their programmers if you're new",
    "start": "29160",
    "end": "30960"
  },
  {
    "text": "here like and subscribe and congrats to",
    "start": "30960",
    "end": "32668"
  },
  {
    "text": "Alexander Torres here the random t-shirt",
    "start": "32669",
    "end": "34620"
  },
  {
    "text": "winner from last week and a huge thank",
    "start": "34620",
    "end": "36600"
  },
  {
    "text": "you to Patrick Neal Lou",
    "start": "36600",
    "end": "37950"
  },
  {
    "text": "he contributed to the content of this",
    "start": "37950",
    "end": "39629"
  },
  {
    "text": "video and has helped out hundreds if not",
    "start": "39629",
    "end": "41280"
  },
  {
    "text": "thousands of developers on our slack",
    "start": "41280",
    "end": "42960"
  },
  {
    "text": "Channel so make sure to spam him with a",
    "start": "42960",
    "end": "45120"
  },
  {
    "text": "thank you message let's go ahead and",
    "start": "45120",
    "end": "46950"
  },
  {
    "text": "take care of the easy ones first when",
    "start": "46950",
    "end": "48690"
  },
  {
    "text": "writing your code you should leave some",
    "start": "48690",
    "end": "49710"
  },
  {
    "text": "Mikael arms out and then have prettier",
    "start": "49710",
    "end": "51390"
  },
  {
    "text": "add them back when you save the file gif",
    "start": "51390",
    "end": "53670"
  },
  {
    "text": "stands for graphics interchange format",
    "start": "53670",
    "end": "55199"
  },
  {
    "text": "so it's obviously pronounced gift",
    "start": "55199",
    "end": "57120"
  },
  {
    "text": "following the first word in the acronym",
    "start": "57120",
    "end": "58680"
  },
  {
    "text": "itself is a hot dog sandwich well that",
    "start": "58680",
    "end": "61440"
  },
  {
    "text": "one's a little more complex so let's",
    "start": "61440",
    "end": "63000"
  },
  {
    "text": "wait till the end of the video",
    "start": "63000",
    "end": "64220"
  },
  {
    "start": "64000",
    "end": "237000"
  },
  {
    "text": "how about object-oriented versus",
    "start": "64220",
    "end": "66630"
  },
  {
    "text": "functional programming",
    "start": "66630",
    "end": "67650"
  },
  {
    "text": "if you guessed object-oriented is better",
    "start": "67650",
    "end": "69540"
  },
  {
    "text": "you're completely wrong and if you",
    "start": "69540",
    "end": "71250"
  },
  {
    "text": "guessed functional programming you're",
    "start": "71250",
    "end": "72570"
  },
  {
    "text": "way off base debating programming",
    "start": "72570",
    "end": "74490"
  },
  {
    "text": "paradigms at this level is like debating",
    "start": "74490",
    "end": "76049"
  },
  {
    "text": "art there is always more than one way to",
    "start": "76049",
    "end": "78090"
  },
  {
    "text": "solve a problem especially in JavaScript",
    "start": "78090",
    "end": "80100"
  },
  {
    "text": "and it's great to debate these things",
    "start": "80100",
    "end": "81450"
  },
  {
    "text": "but there are no absolutes there's going",
    "start": "81450",
    "end": "83850"
  },
  {
    "text": "to be a trade-off for every decision",
    "start": "83850",
    "end": "85259"
  },
  {
    "text": "that you make let's start by taking a",
    "start": "85259",
    "end": "87600"
  },
  {
    "text": "look at some functional typescript code",
    "start": "87600",
    "end": "89430"
  },
  {
    "text": "the most important concept in functional",
    "start": "89430",
    "end": "92009"
  },
  {
    "text": "programming is the concept of pure",
    "start": "92009",
    "end": "93630"
  },
  {
    "text": "functions this means that the output of",
    "start": "93630",
    "end": "96119"
  },
  {
    "text": "your function should only depend on its",
    "start": "96119",
    "end": "97829"
  },
  {
    "text": "inputs for example here we have a",
    "start": "97829",
    "end": "99780"
  },
  {
    "text": "function called two string which takes a",
    "start": "99780",
    "end": "101729"
  },
  {
    "text": "value as its argument and then returns",
    "start": "101729",
    "end": "103649"
  },
  {
    "text": "that value formatted as a string we can",
    "start": "103649",
    "end": "106140"
  },
  {
    "text": "make this an impure function by mutating",
    "start": "106140",
    "end": "108210"
  },
  {
    "text": "the number variable directly this would",
    "start": "108210",
    "end": "110610"
  },
  {
    "text": "be considered a side-effect and",
    "start": "110610",
    "end": "111990"
  },
  {
    "text": "functional code should produce no",
    "start": "111990",
    "end": "113549"
  },
  {
    "text": "side-effects in addition they should not",
    "start": "113549",
    "end": "115439"
  },
  {
    "text": "rely on any outside value to produce a",
    "start": "115439",
    "end": "117780"
  },
  {
    "text": "return value pure functions are easier",
    "start": "117780",
    "end": "120240"
  },
  {
    "text": "to test and also easier to reason about",
    "start": "120240",
    "end": "122310"
  },
  {
    "text": "because you don't have to think about",
    "start": "122310",
    "end": "123689"
  },
  {
    "text": "anything happening outside of the",
    "start": "123689",
    "end": "125189"
  },
  {
    "text": "function itself another core principle",
    "start": "125189",
    "end": "127799"
  },
  {
    "text": "of functional programming is immutable",
    "start": "127799",
    "end": "129840"
  },
  {
    "text": "data functional code is stateless",
    "start": "129840",
    "end": "131819"
  },
  {
    "text": "meaning that when data is created",
    "start": "131819",
    "end": "133740"
  },
  {
    "text": "it is never mutated for example we can",
    "start": "133740",
    "end": "136200"
  },
  {
    "text": "simulate this in JavaScript by using",
    "start": "136200",
    "end": "137850"
  },
  {
    "text": "object freeze on this array of numbers",
    "start": "137850",
    "end": "139650"
  },
  {
    "text": "we could hack around this but it",
    "start": "139650",
    "end": "141510"
  },
  {
    "text": "prevents us from doing things like a",
    "start": "141510",
    "end": "142620"
  },
  {
    "text": "right push which you wouldn't do in a",
    "start": "142620",
    "end": "144270"
  },
  {
    "text": "functional program so obviously our data",
    "start": "144270",
    "end": "147270"
  },
  {
    "text": "has to change somehow if we have a",
    "start": "147270",
    "end": "148680"
  },
  {
    "text": "dynamic software application so you'll",
    "start": "148680",
    "end": "151170"
  },
  {
    "text": "often be passing functions as arguments",
    "start": "151170",
    "end": "153120"
  },
  {
    "text": "to other functions so here we have a",
    "start": "153120",
    "end": "155880"
  },
  {
    "text": "typical first order function which takes",
    "start": "155880",
    "end": "157680"
  },
  {
    "text": "a value and returns a different value in",
    "start": "157680",
    "end": "160020"
  },
  {
    "text": "this case just appending an emoji to a",
    "start": "160020",
    "end": "162090"
  },
  {
    "text": "string now a higher-order function is",
    "start": "162090",
    "end": "165000"
  },
  {
    "text": "one that either takes a function as an",
    "start": "165000",
    "end": "166680"
  },
  {
    "text": "argument or it turns a function itself",
    "start": "166680",
    "end": "168710"
  },
  {
    "text": "javascript has some really nice built-in",
    "start": "168710",
    "end": "170910"
  },
  {
    "text": "higher-order functions for arrays such",
    "start": "170910",
    "end": "172770"
  },
  {
    "text": "as map so instead of using a for loop we",
    "start": "172770",
    "end": "175440"
  },
  {
    "text": "can just pass in our function to map",
    "start": "175440",
    "end": "177120"
  },
  {
    "text": "which will run our add emoji function on",
    "start": "177120",
    "end": "179430"
  },
  {
    "text": "every element in the array and transform",
    "start": "179430",
    "end": "181770"
  },
  {
    "text": "the value so that gives us a very",
    "start": "181770",
    "end": "183600"
  },
  {
    "text": "concise and elegant way to transform the",
    "start": "183600",
    "end": "185760"
  },
  {
    "text": "values in an array another cool thing we",
    "start": "185760",
    "end": "188490"
  },
  {
    "text": "can do is create functions that return",
    "start": "188490",
    "end": "190320"
  },
  {
    "text": "functions this is very useful when you",
    "start": "190320",
    "end": "192990"
  },
  {
    "text": "want to start with some base",
    "start": "192990",
    "end": "193950"
  },
  {
    "text": "functionality and then extend it with",
    "start": "193950",
    "end": "195750"
  },
  {
    "text": "some dynamic data let's imagine we're",
    "start": "195750",
    "end": "198210"
  },
  {
    "text": "building a weather app and we need to",
    "start": "198210",
    "end": "199740"
  },
  {
    "text": "append strings with certain emojis we'll",
    "start": "199740",
    "end": "202530"
  },
  {
    "text": "start with a base function called append",
    "start": "202530",
    "end": "204240"
  },
  {
    "text": "emoji and then use it to compose more",
    "start": "204240",
    "end": "206220"
  },
  {
    "text": "complex functions so in this case the",
    "start": "206220",
    "end": "208830"
  },
  {
    "text": "inner function takes both of the",
    "start": "208830",
    "end": "210300"
  },
  {
    "text": "arguments and adds them together we can",
    "start": "210300",
    "end": "212820"
  },
  {
    "text": "use this to create more specialized",
    "start": "212820",
    "end": "214170"
  },
  {
    "text": "functions that point to a specific emoji",
    "start": "214170",
    "end": "216180"
  },
  {
    "text": "for example we'll have a rain function",
    "start": "216180",
    "end": "218160"
  },
  {
    "text": "and a Sun function then we can call this",
    "start": "218160",
    "end": "220530"
  },
  {
    "text": "function with the string that we want",
    "start": "220530",
    "end": "221820"
  },
  {
    "text": "the emoji appended to the end result is",
    "start": "221820",
    "end": "224610"
  },
  {
    "text": "some concise and readable code that",
    "start": "224610",
    "end": "226290"
  },
  {
    "text": "doesn't rely on any shared state that",
    "start": "226290",
    "end": "227910"
  },
  {
    "text": "would make it difficult to test that's",
    "start": "227910",
    "end": "229920"
  },
  {
    "text": "about as basic as it gets for functional",
    "start": "229920",
    "end": "231690"
  },
  {
    "text": "programming and things get a lot more",
    "start": "231690",
    "end": "233100"
  },
  {
    "text": "interesting when you have asynchronous",
    "start": "233100",
    "end": "234690"
  },
  {
    "text": "data and side-effects and things like",
    "start": "234690",
    "end": "236640"
  },
  {
    "text": "that",
    "start": "236640",
    "end": "237090"
  },
  {
    "start": "237000",
    "end": "425000"
  },
  {
    "text": "so now let's go ahead and compare this",
    "start": "237090",
    "end": "239160"
  },
  {
    "text": "to object-oriented programming the best",
    "start": "239160",
    "end": "241470"
  },
  {
    "text": "comparison I've seen is to a baking",
    "start": "241470",
    "end": "243210"
  },
  {
    "text": "recipe I'll have a link to that in the",
    "start": "243210",
    "end": "244620"
  },
  {
    "text": "description the object-oriented or",
    "start": "244620",
    "end": "247140"
  },
  {
    "text": "imperative approach on the top gives you",
    "start": "247140",
    "end": "248730"
  },
  {
    "text": "a clear set of statements to follow to",
    "start": "248730",
    "end": "250290"
  },
  {
    "text": "get the cake to its final state the",
    "start": "250290",
    "end": "252630"
  },
  {
    "text": "functional or declarative approach on",
    "start": "252630",
    "end": "254459"
  },
  {
    "text": "the bottom describes the state and logic",
    "start": "254459",
    "end": "256470"
  },
  {
    "text": "involved but has no opinion on the",
    "start": "256470",
    "end": "258120"
  },
  {
    "text": "actual control flow now let's go ahead",
    "start": "258120",
    "end": "260220"
  },
  {
    "text": "and look at some object-oriented",
    "start": "260220",
    "end": "261570"
  },
  {
    "text": "typescript code the first thing we'll do",
    "start": "261570",
    "end": "263430"
  },
  {
    "text": "is define a class which itself doesn't",
    "start": "263430",
    "end": "265290"
  },
  {
    "text": "really do anything but rather it serves",
    "start": "265290",
    "end": "266970"
  },
  {
    "text": "as a blue",
    "start": "266970",
    "end": "267630"
  },
  {
    "text": "print for instantiating objects so an",
    "start": "267630",
    "end": "270510"
  },
  {
    "text": "instance of this emoji class will be an",
    "start": "270510",
    "end": "272490"
  },
  {
    "text": "object with an icon property then the",
    "start": "272490",
    "end": "275160"
  },
  {
    "text": "constructor method is special because it",
    "start": "275160",
    "end": "276900"
  },
  {
    "text": "runs once when the object is",
    "start": "276900",
    "end": "278400"
  },
  {
    "text": "instantiated will pass an argument to",
    "start": "278400",
    "end": "280860"
  },
  {
    "text": "the constructor with the actual emoji",
    "start": "280860",
    "end": "282660"
  },
  {
    "text": "icon and then we'll set that equal to",
    "start": "282660",
    "end": "284820"
  },
  {
    "text": "the property on this object and the",
    "start": "284820",
    "end": "287820"
  },
  {
    "text": "emoji class works similar to a function",
    "start": "287820",
    "end": "289530"
  },
  {
    "text": "but we use the new keyword in front of",
    "start": "289530",
    "end": "291300"
  },
  {
    "text": "it and as you can see when we do that it",
    "start": "291300",
    "end": "293340"
  },
  {
    "text": "creates the an emoji object with an icon",
    "start": "293340",
    "end": "295290"
  },
  {
    "text": "property of Sun in typescript there's an",
    "start": "295290",
    "end": "298050"
  },
  {
    "text": "easier way to do this because we have",
    "start": "298050",
    "end": "299520"
  },
  {
    "text": "the concept of public and private",
    "start": "299520",
    "end": "301050"
  },
  {
    "text": "members so if we use the public key word",
    "start": "301050",
    "end": "303870"
  },
  {
    "text": "in front of the argument in the",
    "start": "303870",
    "end": "304950"
  },
  {
    "text": "constructor typescript will",
    "start": "304950",
    "end": "306330"
  },
  {
    "text": "automatically know to set that as a",
    "start": "306330",
    "end": "307830"
  },
  {
    "text": "public property on each object when you",
    "start": "307830",
    "end": "310290"
  },
  {
    "text": "declare a property or method public it",
    "start": "310290",
    "end": "312390"
  },
  {
    "text": "means it's available to the class itself",
    "start": "312390",
    "end": "314100"
  },
  {
    "text": "and any instances of the class that can",
    "start": "314100",
    "end": "317070"
  },
  {
    "text": "be both a good and a bad thing for",
    "start": "317070",
    "end": "318690"
  },
  {
    "text": "example we can simply change the icon by",
    "start": "318690",
    "end": "321150"
  },
  {
    "text": "just mutating the value on its object on",
    "start": "321150",
    "end": "323280"
  },
  {
    "text": "one hand it's very convenient but on the",
    "start": "323280",
    "end": "325380"
  },
  {
    "text": "other hand if you have a lot of code",
    "start": "325380",
    "end": "326520"
  },
  {
    "text": "doing this it can be hard to keep track",
    "start": "326520",
    "end": "328110"
  },
  {
    "text": "of and hard to test effectively I'd like",
    "start": "328110",
    "end": "331200"
  },
  {
    "text": "to point out at this point that classes",
    "start": "331200",
    "end": "332820"
  },
  {
    "text": "in JavaScript are actually just",
    "start": "332820",
    "end": "334140"
  },
  {
    "text": "syntactic sugar for functions and",
    "start": "334140",
    "end": "336030"
  },
  {
    "text": "prototype one heritance",
    "start": "336030",
    "end": "337320"
  },
  {
    "text": "if we can pile our code to yes three you",
    "start": "337320",
    "end": "340170"
  },
  {
    "text": "can see that it's just a function with a",
    "start": "340170",
    "end": "341910"
  },
  {
    "text": "closure that prevents the local",
    "start": "341910",
    "end": "343980"
  },
  {
    "text": "variables from bleeding out into the",
    "start": "343980",
    "end": "345360"
  },
  {
    "text": "global scope that's just something to be",
    "start": "345360",
    "end": "347520"
  },
  {
    "text": "aware of but typescript also provides",
    "start": "347520",
    "end": "349320"
  },
  {
    "text": "some tools for us to improve the tone",
    "start": "349320",
    "end": "351180"
  },
  {
    "text": "that we have when writing",
    "start": "351180",
    "end": "352230"
  },
  {
    "text": "object-oriented code for example we can",
    "start": "352230",
    "end": "354810"
  },
  {
    "text": "mark members as private so that they can",
    "start": "354810",
    "end": "356640"
  },
  {
    "text": "only be used inside of this class",
    "start": "356640",
    "end": "358170"
  },
  {
    "text": "definition this means that we can",
    "start": "358170",
    "end": "360090"
  },
  {
    "text": "separate our public API from internal",
    "start": "360090",
    "end": "362490"
  },
  {
    "text": "logic for this class for example if we",
    "start": "362490",
    "end": "365490"
  },
  {
    "text": "want to make this icon value and mutable",
    "start": "365490",
    "end": "367320"
  },
  {
    "text": "we can make it private and we'll define",
    "start": "367320",
    "end": "369510"
  },
  {
    "text": "a getter so the user can read the value",
    "start": "369510",
    "end": "371670"
  },
  {
    "text": "but not change the value another",
    "start": "371670",
    "end": "374190"
  },
  {
    "text": "important thing to point out here is",
    "start": "374190",
    "end": "375540"
  },
  {
    "text": "that class instances can have their own",
    "start": "375540",
    "end": "377460"
  },
  {
    "text": "internal state let's imagine we have a",
    "start": "377460",
    "end": "379620"
  },
  {
    "text": "button where the user can toggle the",
    "start": "379620",
    "end": "381300"
  },
  {
    "text": "emoji and maybe go back and forth",
    "start": "381300",
    "end": "383010"
  },
  {
    "text": "between different states this is a",
    "start": "383010",
    "end": "385170"
  },
  {
    "text": "really simple thing to implement an",
    "start": "385170",
    "end": "386700"
  },
  {
    "text": "object-oriented programming will add",
    "start": "386700",
    "end": "388980"
  },
  {
    "text": "another private property to this class",
    "start": "388980",
    "end": "390720"
  },
  {
    "text": "called previous and then use a getter to",
    "start": "390720",
    "end": "392670"
  },
  {
    "text": "retrieve that value then we'll define a",
    "start": "392670",
    "end": "395310"
  },
  {
    "text": "change method which will mutate the",
    "start": "395310",
    "end": "397080"
  },
  {
    "text": "actual icon value on this instance when",
    "start": "397080",
    "end": "400080"
  },
  {
    "text": "that happens we'll first change the",
    "start": "400080",
    "end": "401400"
  },
  {
    "text": "previous value to the current icon and",
    "start": "401400",
    "end": "403620"
  },
  {
    "text": "then update the current icon to the new",
    "start": "403620",
    "end": "405630"
  },
  {
    "text": "value on the first console log we get",
    "start": "405630",
    "end": "407880"
  },
  {
    "text": "the Sun icon and undefined and if we",
    "start": "407880",
    "end": "410280"
  },
  {
    "text": "mutate the state a couple times you can",
    "start": "410280",
    "end": "412020"
  },
  {
    "text": "see that our internal values on this",
    "start": "412020",
    "end": "413699"
  },
  {
    "text": "class instance have changed so the end",
    "start": "413699",
    "end": "416400"
  },
  {
    "text": "result is that we have a class that's",
    "start": "416400",
    "end": "417900"
  },
  {
    "text": "encapsulated all the logic for how an",
    "start": "417900",
    "end": "419729"
  },
  {
    "text": "emoji should work and with typescript we",
    "start": "419729",
    "end": "421800"
  },
  {
    "text": "automatically have an interface and",
    "start": "421800",
    "end": "423060"
  },
  {
    "text": "documentation for this class another",
    "start": "423060",
    "end": "425789"
  },
  {
    "text": "cool thing you can do with classes is",
    "start": "425789",
    "end": "427259"
  },
  {
    "text": "define static methods the unique thing",
    "start": "427259",
    "end": "429870"
  },
  {
    "text": "about a static method is that it's on",
    "start": "429870",
    "end": "431550"
  },
  {
    "text": "the class itself and not an instance of",
    "start": "431550",
    "end": "433740"
  },
  {
    "text": "a class so we'll just go ahead and",
    "start": "433740",
    "end": "436080"
  },
  {
    "text": "define a static method here which itself",
    "start": "436080",
    "end": "437910"
  },
  {
    "text": "is actually a pure function and its job",
    "start": "437910",
    "end": "440010"
  },
  {
    "text": "is simply to add one to the input",
    "start": "440010",
    "end": "441990"
  },
  {
    "text": "argument the cool thing is that we can",
    "start": "441990",
    "end": "443760"
  },
  {
    "text": "now use the Emoji class as a namespace",
    "start": "443760",
    "end": "445949"
  },
  {
    "text": "to run this function now we're going to",
    "start": "445949",
    "end": "448680"
  },
  {
    "text": "switch gears and talk about composition",
    "start": "448680",
    "end": "450419"
  },
  {
    "text": "versus inheritance for code reusability",
    "start": "450419",
    "end": "452910"
  },
  {
    "text": "this is an area where people tend to get",
    "start": "452910",
    "end": "454919"
  },
  {
    "text": "very strong opinions and the actual",
    "start": "454919",
    "end": "456630"
  },
  {
    "text": "definition of composition tends to be a",
    "start": "456630",
    "end": "458580"
  },
  {
    "text": "little convoluted but the whole thing",
    "start": "458580",
    "end": "460710"
  },
  {
    "text": "really just boils down to this with",
    "start": "460710",
    "end": "462240"
  },
  {
    "text": "inheritance you start with a larger base",
    "start": "462240",
    "end": "464099"
  },
  {
    "text": "class then have child classes inherit",
    "start": "464099",
    "end": "466349"
  },
  {
    "text": "all of this functionality and override",
    "start": "466349",
    "end": "468270"
  },
  {
    "text": "or extend it with whatever custom",
    "start": "468270",
    "end": "470130"
  },
  {
    "text": "behaviors that they need composition on",
    "start": "470130",
    "end": "472500"
  },
  {
    "text": "the other hand breaks apart the",
    "start": "472500",
    "end": "473880"
  },
  {
    "text": "interfaces and logic into a lot of small",
    "start": "473880",
    "end": "476310"
  },
  {
    "text": "pieces then builds up larger functions",
    "start": "476310",
    "end": "478530"
  },
  {
    "text": "or objects by combining these pieces",
    "start": "478530",
    "end": "480419"
  },
  {
    "text": "together let's go ahead and take a look",
    "start": "480419",
    "end": "482639"
  },
  {
    "text": "at an example of inheritance we start",
    "start": "482639",
    "end": "485340"
  },
  {
    "text": "with the class of human that has a",
    "start": "485340",
    "end": "486750"
  },
  {
    "text": "public property of name and has the",
    "start": "486750",
    "end": "489060"
  },
  {
    "text": "ability to say hi but what if we have a",
    "start": "489060",
    "end": "491580"
  },
  {
    "text": "lot of other objects in our program that",
    "start": "491580",
    "end": "493229"
  },
  {
    "text": "are similar but implement slightly",
    "start": "493229",
    "end": "495030"
  },
  {
    "text": "different features based on what they're",
    "start": "495030",
    "end": "496530"
  },
  {
    "text": "designed to do for example in a video",
    "start": "496530",
    "end": "498810"
  },
  {
    "text": "game you might have a human character",
    "start": "498810",
    "end": "500460"
  },
  {
    "text": "and then a super human character that",
    "start": "500460",
    "end": "502289"
  },
  {
    "text": "has all the human abilities but with a",
    "start": "502289",
    "end": "504180"
  },
  {
    "text": "little something extra in typescript we",
    "start": "504180",
    "end": "506820"
  },
  {
    "text": "can simply inherit all the functionality",
    "start": "506820",
    "end": "508710"
  },
  {
    "text": "from the human class by saying super",
    "start": "508710",
    "end": "510659"
  },
  {
    "text": "human extends human we do have an",
    "start": "510659",
    "end": "513539"
  },
  {
    "text": "argument in the constructor so we'll",
    "start": "513539",
    "end": "515010"
  },
  {
    "text": "also need to add that to the constructor",
    "start": "515010",
    "end": "517140"
  },
  {
    "text": "without private or public then we call",
    "start": "517140",
    "end": "519390"
  },
  {
    "text": "super which will execute the code in the",
    "start": "519390",
    "end": "521400"
  },
  {
    "text": "constructor of the parent class which in",
    "start": "521400",
    "end": "523620"
  },
  {
    "text": "our case is just initializing this name",
    "start": "523620",
    "end": "525330"
  },
  {
    "text": "property at this point we'll go ahead",
    "start": "525330",
    "end": "527459"
  },
  {
    "text": "and define an additional method called",
    "start": "527459",
    "end": "529020"
  },
  {
    "text": "super power then we'll create an",
    "start": "529020",
    "end": "531240"
  },
  {
    "text": "instance of the super human class and",
    "start": "531240",
    "end": "533250"
  },
  {
    "text": "what you'll see here is that it has this",
    "start": "533250",
    "end": "535110"
  },
  {
    "text": "or power method whereas the regular",
    "start": "535110",
    "end": "536550"
  },
  {
    "text": "human does not but the superhuman can",
    "start": "536550",
    "end": "538800"
  },
  {
    "text": "still call all the methods that were",
    "start": "538800",
    "end": "540209"
  },
  {
    "text": "defined in the parent class inheritance",
    "start": "540209",
    "end": "543089"
  },
  {
    "text": "can be great in the right situation but",
    "start": "543089",
    "end": "545010"
  },
  {
    "text": "you want to avoid creating really deeply",
    "start": "545010",
    "end": "546810"
  },
  {
    "text": "nested classes because it becomes very",
    "start": "546810",
    "end": "548579"
  },
  {
    "text": "hard to debug when things go wrong",
    "start": "548579",
    "end": "550320"
  },
  {
    "text": "somewhere in the middle as an",
    "start": "550320",
    "end": "552029"
  },
  {
    "text": "alternative we can use composition and",
    "start": "552029",
    "end": "554010"
  },
  {
    "text": "there are actually multiple different",
    "start": "554010",
    "end": "555269"
  },
  {
    "text": "ways we can apply this pattern in",
    "start": "555269",
    "end": "556790"
  },
  {
    "text": "angular we can do it by injecting",
    "start": "556790",
    "end": "558510"
  },
  {
    "text": "services into our components and also at",
    "start": "558510",
    "end": "560910"
  },
  {
    "text": "the template level by creating",
    "start": "560910",
    "end": "562320"
  },
  {
    "text": "directives I'm not going to cover that",
    "start": "562320",
    "end": "563970"
  },
  {
    "text": "here but it's just one of the awesome",
    "start": "563970",
    "end": "565529"
  },
  {
    "text": "things about angular that I've covered",
    "start": "565529",
    "end": "566730"
  },
  {
    "text": "in many other videos another alternative",
    "start": "566730",
    "end": "569220"
  },
  {
    "start": "568000",
    "end": "726000"
  },
  {
    "text": "is to concatenate objects together which",
    "start": "569220",
    "end": "571200"
  },
  {
    "text": "I've seen covered in several different",
    "start": "571200",
    "end": "572519"
  },
  {
    "text": "articles on the web the idea here is",
    "start": "572519",
    "end": "574620"
  },
  {
    "text": "that you decouple your properties or",
    "start": "574620",
    "end": "576329"
  },
  {
    "text": "behaviors into objects or functions that",
    "start": "576329",
    "end": "578700"
  },
  {
    "text": "return objects we can then merge all",
    "start": "578700",
    "end": "581160"
  },
  {
    "text": "these objects together into a final",
    "start": "581160",
    "end": "583050"
  },
  {
    "text": "function that does everything that we",
    "start": "583050",
    "end": "584519"
  },
  {
    "text": "need it to this is usually referred to",
    "start": "584519",
    "end": "586620"
  },
  {
    "text": "as a mixin pattern and it's just a",
    "start": "586620",
    "end": "588660"
  },
  {
    "text": "certain type of multiple inheritance so",
    "start": "588660",
    "end": "591060"
  },
  {
    "text": "the terminology between composition and",
    "start": "591060",
    "end": "593010"
  },
  {
    "text": "inheritance is sort of convoluted in any",
    "start": "593010",
    "end": "595560"
  },
  {
    "text": "case this mixin pattern can be very",
    "start": "595560",
    "end": "597240"
  },
  {
    "text": "powerful but in its current form we lose",
    "start": "597240",
    "end": "599610"
  },
  {
    "text": "all of the ergonomics of class-based",
    "start": "599610",
    "end": "601440"
  },
  {
    "text": "object-oriented programming that might",
    "start": "601440",
    "end": "603420"
  },
  {
    "text": "be a good or bad thing depending on who",
    "start": "603420",
    "end": "605070"
  },
  {
    "text": "you ask",
    "start": "605070",
    "end": "605579"
  },
  {
    "text": "but typescript actually gives us the",
    "start": "605579",
    "end": "606930"
  },
  {
    "text": "flexibility to use mix-ins in a",
    "start": "606930",
    "end": "609000"
  },
  {
    "text": "class-based format first I'm going to",
    "start": "609000",
    "end": "611250"
  },
  {
    "text": "pull in this really ugly function from",
    "start": "611250",
    "end": "612690"
  },
  {
    "text": "the typescript Docs which we'll see in",
    "start": "612690",
    "end": "614250"
  },
  {
    "text": "use here in just a minute from there I'm",
    "start": "614250",
    "end": "616410"
  },
  {
    "text": "going to create a couple of small",
    "start": "616410",
    "end": "617850"
  },
  {
    "text": "behavior classes that define the",
    "start": "617850",
    "end": "619829"
  },
  {
    "text": "individual behaviors instead of trying",
    "start": "619829",
    "end": "621540"
  },
  {
    "text": "to encapsulate everything in a single",
    "start": "621540",
    "end": "623430"
  },
  {
    "text": "class so these classes are more",
    "start": "623430",
    "end": "625680"
  },
  {
    "text": "concerned with what something does",
    "start": "625680",
    "end": "627180"
  },
  {
    "text": "instead of what something is now in the",
    "start": "627180",
    "end": "630449"
  },
  {
    "text": "superhero class there's a very subtle",
    "start": "630449",
    "end": "632250"
  },
  {
    "text": "difference from the previous example",
    "start": "632250",
    "end": "633839"
  },
  {
    "text": "instead of extending the class we are",
    "start": "633839",
    "end": "636000"
  },
  {
    "text": "going to implement multiple classes when",
    "start": "636000",
    "end": "638790"
  },
  {
    "text": "you implement something you're only",
    "start": "638790",
    "end": "640050"
  },
  {
    "text": "concerned about its interface and not",
    "start": "640050",
    "end": "642060"
  },
  {
    "text": "its underlying code it's the apply",
    "start": "642060",
    "end": "644370"
  },
  {
    "text": "mix-ins function that we defined at the",
    "start": "644370",
    "end": "645899"
  },
  {
    "text": "very beginning that will actually take",
    "start": "645899",
    "end": "647610"
  },
  {
    "text": "these interfaces and apply their code to",
    "start": "647610",
    "end": "650070"
  },
  {
    "text": "this class that does leave us with some",
    "start": "650070",
    "end": "652230"
  },
  {
    "text": "extra boilerplate code where we have to",
    "start": "652230",
    "end": "654180"
  },
  {
    "text": "actually type the return values on the",
    "start": "654180",
    "end": "656220"
  },
  {
    "text": "methods for this class in this case we",
    "start": "656220",
    "end": "658980"
  },
  {
    "text": "have two methods say hi and super power",
    "start": "658980",
    "end": "661529"
  },
  {
    "text": "both of which return strings and the",
    "start": "661529",
    "end": "664350"
  },
  {
    "text": "final step is the requirement to call",
    "start": "664350",
    "end": "666029"
  },
  {
    "text": "that apply mix-ins function with the",
    "start": "666029",
    "end": "667860"
  },
  {
    "text": "base classes the first",
    "start": "667860",
    "end": "668970"
  },
  {
    "text": "and the mixed in classes as the second",
    "start": "668970",
    "end": "671670"
  },
  {
    "text": "argument now we can finally answer the",
    "start": "671670",
    "end": "674310"
  },
  {
    "text": "question is a hot dog a sandwich if you",
    "start": "674310",
    "end": "676830"
  },
  {
    "text": "use inheritance then you're going to",
    "start": "676830",
    "end": "678210"
  },
  {
    "text": "have to inherit from some base sandwich",
    "start": "678210",
    "end": "680070"
  },
  {
    "text": "class which means it is a sandwich but",
    "start": "680070",
    "end": "682530"
  },
  {
    "text": "if you use composition then you can just",
    "start": "682530",
    "end": "684210"
  },
  {
    "text": "pull in the hot dog in the bun meaning",
    "start": "684210",
    "end": "685920"
  },
  {
    "text": "that it is not a sandwich I'm gonna go",
    "start": "685920",
    "end": "688410"
  },
  {
    "text": "ahead and wrap things up there if this",
    "start": "688410",
    "end": "689760"
  },
  {
    "text": "video helped you please like and",
    "start": "689760",
    "end": "690960"
  },
  {
    "text": "subscribe and I just want to say thank",
    "start": "690960",
    "end": "692880"
  },
  {
    "text": "you to everybody for an amazing 2018 I'm",
    "start": "692880",
    "end": "695100"
  },
  {
    "text": "super grateful for the community around",
    "start": "695100",
    "end": "696690"
  },
  {
    "text": "this channel and I look forward to",
    "start": "696690",
    "end": "698160"
  },
  {
    "text": "pushing things even further in 2019 I'm",
    "start": "698160",
    "end": "700770"
  },
  {
    "text": "going to be taking a short break for the",
    "start": "700770",
    "end": "702360"
  },
  {
    "text": "next couple of weeks and then I have a",
    "start": "702360",
    "end": "703740"
  },
  {
    "text": "video plan for January 1st so stay tuned",
    "start": "703740",
    "end": "706290"
  },
  {
    "text": "for that I hope everybody has an awesome",
    "start": "706290",
    "end": "708330"
  },
  {
    "text": "end of the year and you can still find",
    "start": "708330",
    "end": "709830"
  },
  {
    "text": "me on slack if you have any questions or",
    "start": "709830",
    "end": "711420"
  },
  {
    "text": "need anything at all thanks for watching",
    "start": "711420",
    "end": "712980"
  },
  {
    "text": "and I'll talk to you soon",
    "start": "712980",
    "end": "715800"
  },
  {
    "text": "[Music]",
    "start": "715800",
    "end": "725489"
  }
]