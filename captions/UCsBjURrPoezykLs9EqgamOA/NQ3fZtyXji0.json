[
  {
    "text": "rabbit mq an open source distributed",
    "start": "80",
    "end": "2800"
  },
  {
    "text": "message broker that works like a post",
    "start": "2800",
    "end": "4880"
  },
  {
    "text": "office in the cloud it was developed in",
    "start": "4880",
    "end": "6799"
  },
  {
    "text": "2007 and written in the erlang",
    "start": "6799",
    "end": "9120"
  },
  {
    "text": "programming language which itself is",
    "start": "9120",
    "end": "10880"
  },
  {
    "text": "famous for powering the open telecom",
    "start": "10880",
    "end": "12960"
  },
  {
    "text": "platform in the beginning apps were",
    "start": "12960",
    "end": "14719"
  },
  {
    "text": "built as monoliths with all concerns",
    "start": "14719",
    "end": "16640"
  },
  {
    "text": "coupled together on a single runtime the",
    "start": "16640",
    "end": "18800"
  },
  {
    "text": "problem is that not everything scales in",
    "start": "18800",
    "end": "20720"
  },
  {
    "text": "parallel differing computational needs",
    "start": "20720",
    "end": "22880"
  },
  {
    "text": "gave rise to the microservice",
    "start": "22880",
    "end": "24400"
  },
  {
    "text": "architecture where every concern has its",
    "start": "24400",
    "end": "26400"
  },
  {
    "text": "own run time that scales independently",
    "start": "26400",
    "end": "28560"
  },
  {
    "text": "rabbitmq is a tool that allows these",
    "start": "28560",
    "end": "30480"
  },
  {
    "text": "microservices to communicate",
    "start": "30480",
    "end": "31920"
  },
  {
    "text": "asynchronously with a variety of",
    "start": "31920",
    "end": "33760"
  },
  {
    "text": "different protocols for example you may",
    "start": "33760",
    "end": "35600"
  },
  {
    "text": "have an app that applies deep learning",
    "start": "35600",
    "end": "37360"
  },
  {
    "text": "photo filters when the user clicks a",
    "start": "37360",
    "end": "38960"
  },
  {
    "text": "button that request goes to a rest api",
    "start": "38960",
    "end": "41280"
  },
  {
    "text": "but instead of processing the image",
    "start": "41280",
    "end": "42800"
  },
  {
    "text": "there it produces a message with the",
    "start": "42800",
    "end": "44480"
  },
  {
    "text": "required data and publishes it to an",
    "start": "44480",
    "end": "46559"
  },
  {
    "text": "exchange the exchange is then",
    "start": "46559",
    "end": "48239"
  },
  {
    "text": "responsible for routing it to one or",
    "start": "48239",
    "end": "50239"
  },
  {
    "text": "more queues which are linked to the",
    "start": "50239",
    "end": "51840"
  },
  {
    "text": "exchange with a binding and routing key",
    "start": "51840",
    "end": "54239"
  },
  {
    "text": "now the message sits in the queue until",
    "start": "54239",
    "end": "56000"
  },
  {
    "text": "it's handled by the consumer which in",
    "start": "56000",
    "end": "57760"
  },
  {
    "text": "this case would be the image processing",
    "start": "57760",
    "end": "59520"
  },
  {
    "text": "server the exchange can route directly",
    "start": "59520",
    "end": "61520"
  },
  {
    "text": "to a specific queue or to multiple cues",
    "start": "61520",
    "end": "63680"
  },
  {
    "text": "with a shared pattern using topics or to",
    "start": "63680",
    "end": "66000"
  },
  {
    "text": "every queue it knows about with fanout",
    "start": "66000",
    "end": "67760"
  },
  {
    "text": "the end result is an architecture that",
    "start": "67760",
    "end": "69520"
  },
  {
    "text": "allows servers to both publish and",
    "start": "69520",
    "end": "71439"
  },
  {
    "text": "subscribe to data thanks to the rabbitmq",
    "start": "71439",
    "end": "73840"
  },
  {
    "text": "middleman to get started install it or",
    "start": "73840",
    "end": "75920"
  },
  {
    "text": "run it in a docker container on port",
    "start": "75920",
    "end": "77920"
  },
  {
    "text": "5672 it also contains a cli tool to",
    "start": "77920",
    "end": "81119"
  },
  {
    "text": "manage and inspect your broker now",
    "start": "81119",
    "end": "83040"
  },
  {
    "text": "create a file in your favorite server",
    "start": "83040",
    "end": "84880"
  },
  {
    "text": "side language and bring in a library",
    "start": "84880",
    "end": "86880"
  },
  {
    "text": "that implements a messaging protocol",
    "start": "86880",
    "end": "88799"
  },
  {
    "text": "like advanced messaging queue protocol",
    "start": "88799",
    "end": "90640"
  },
  {
    "text": "091 this file will send a message and",
    "start": "90640",
    "end": "93119"
  },
  {
    "text": "first needs to connect to rabbitmq on",
    "start": "93119",
    "end": "95200"
  },
  {
    "text": "that connection we can use the create",
    "start": "95200",
    "end": "97040"
  },
  {
    "text": "channel method to declare a cue which",
    "start": "97040",
    "end": "99040"
  },
  {
    "text": "can be named whatever you want cues can",
    "start": "99040",
    "end": "100799"
  },
  {
    "text": "be durable where the metadata is stored",
    "start": "100799",
    "end": "102560"
  },
  {
    "text": "on disk or transient where it's only",
    "start": "102560",
    "end": "104479"
  },
  {
    "text": "stored in memory and now produce a",
    "start": "104479",
    "end": "106159"
  },
  {
    "text": "message by sending a buffer to that",
    "start": "106159",
    "end": "108079"
  },
  {
    "text": "queue go ahead and run the file to",
    "start": "108079",
    "end": "109680"
  },
  {
    "text": "create the queue and send the message",
    "start": "109680",
    "end": "111119"
  },
  {
    "text": "then create another file to receive the",
    "start": "111119",
    "end": "112799"
  },
  {
    "text": "message in real life this could be a",
    "start": "112799",
    "end": "114399"
  },
  {
    "text": "different server on the other side of",
    "start": "114399",
    "end": "115920"
  },
  {
    "text": "the world connect to rabbitmq just like",
    "start": "115920",
    "end": "118079"
  },
  {
    "text": "we did for the publisher then reference",
    "start": "118079",
    "end": "119759"
  },
  {
    "text": "the same queue name on that connection",
    "start": "119759",
    "end": "121520"
  },
  {
    "text": "now use the consume method to receive a",
    "start": "121520",
    "end": "123520"
  },
  {
    "text": "message and run a callback function with",
    "start": "123520",
    "end": "125520"
  },
  {
    "text": "its data now run that file in a separate",
    "start": "125520",
    "end": "127439"
  },
  {
    "text": "terminal to receive the message that's",
    "start": "127439",
    "end": "129280"
  },
  {
    "text": "how a basic queue works but we could",
    "start": "129280",
    "end": "130959"
  },
  {
    "text": "expand on this code by creating an",
    "start": "130959",
    "end": "132560"
  },
  {
    "text": "exchange to manage multiple queues at",
    "start": "132560",
    "end": "134640"
  },
  {
    "text": "the same time a fan out or topic",
    "start": "134640",
    "end": "136640"
  },
  {
    "text": "exchange would allow multiple servers to",
    "start": "136640",
    "end": "138640"
  },
  {
    "text": "subscribe to the same messages but",
    "start": "138640",
    "end": "140400"
  },
  {
    "text": "consume them at different times this has",
    "start": "140400",
    "end": "142560"
  },
  {
    "text": "been rabbitmq in 100 seconds hit the",
    "start": "142560",
    "end": "145040"
  },
  {
    "text": "like button if you want to see more",
    "start": "145040",
    "end": "146160"
  },
  {
    "text": "short videos like this thanks for",
    "start": "146160",
    "end": "147760"
  },
  {
    "text": "watching and i will see you in the next",
    "start": "147760",
    "end": "149840"
  },
  {
    "text": "one",
    "start": "149840",
    "end": "152160"
  }
]