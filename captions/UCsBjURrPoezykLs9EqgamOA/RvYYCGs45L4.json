[
  {
    "text": "a promise represents a value that is",
    "start": "60",
    "end": "2010"
  },
  {
    "text": "unknown now that may become known in the",
    "start": "2010",
    "end": "4110"
  },
  {
    "text": "future in other words in asynchronous",
    "start": "4110",
    "end": "5879"
  },
  {
    "text": "value think of it like a ride hailing",
    "start": "5879",
    "end": "7919"
  },
  {
    "text": "app when you request a ride the driver",
    "start": "7919",
    "end": "9929"
  },
  {
    "text": "makes a promise to pick you up while",
    "start": "9929",
    "end": "12000"
  },
  {
    "text": "you're waiting the ride is pending in",
    "start": "12000",
    "end": "13740"
  },
  {
    "text": "the future if all goes according to plan",
    "start": "13740",
    "end": "15480"
  },
  {
    "text": "the driver will resolve to pick you up",
    "start": "15480",
    "end": "17609"
  },
  {
    "text": "then take you somewhere",
    "start": "17609",
    "end": "18990"
  },
  {
    "text": "at which point your ride has been",
    "start": "18990",
    "end": "20400"
  },
  {
    "text": "fulfilled but in some cases the driver",
    "start": "20400",
    "end": "22619"
  },
  {
    "text": "might reject your ride in which case",
    "start": "22619",
    "end": "24180"
  },
  {
    "text": "you'll need to catch one somewhere else",
    "start": "24180",
    "end": "25590"
  },
  {
    "text": "either way the original request is now",
    "start": "25590",
    "end": "27720"
  },
  {
    "text": "finally settled as a developer he might",
    "start": "27720",
    "end": "30269"
  },
  {
    "text": "want to create a promise to represent an",
    "start": "30269",
    "end": "32130"
  },
  {
    "text": "asynchronous value but more often than",
    "start": "32130",
    "end": "33960"
  },
  {
    "text": "not you'll be consuming promises to use",
    "start": "33960",
    "end": "36030"
  },
  {
    "text": "the result of an asynchronous operation",
    "start": "36030",
    "end": "37890"
  },
  {
    "text": "in your code on the Left we're making",
    "start": "37890",
    "end": "39719"
  },
  {
    "text": "promises on the right we're using them",
    "start": "39719",
    "end": "41460"
  },
  {
    "text": "when constructed a promise starts off in",
    "start": "41460",
    "end": "43800"
  },
  {
    "text": "a pending state it's your job to define",
    "start": "43800",
    "end": "46050"
  },
  {
    "text": "a callback function called an executor",
    "start": "46050",
    "end": "48030"
  },
  {
    "text": "that defines when to resolve or reject",
    "start": "48030",
    "end": "50160"
  },
  {
    "text": "the promise this is where you would kick",
    "start": "50160",
    "end": "51899"
  },
  {
    "text": "off your asynchronous work on the other",
    "start": "51899",
    "end": "53879"
  },
  {
    "text": "side the consumer of the promise has",
    "start": "53879",
    "end": "55800"
  },
  {
    "text": "called it's then method it's waiting for",
    "start": "55800",
    "end": "57809"
  },
  {
    "text": "the asynchronous value to be fulfilled",
    "start": "57809",
    "end": "59579"
  },
  {
    "text": "when that happens it will call this",
    "start": "59579",
    "end": "61590"
  },
  {
    "text": "function with the value as its argument",
    "start": "61590",
    "end": "63780"
  },
  {
    "text": "we fulfill the promise by calling",
    "start": "63780",
    "end": "65610"
  },
  {
    "text": "resolve but there's always the",
    "start": "65610",
    "end": "66960"
  },
  {
    "text": "possibility of an exception in that case",
    "start": "66960",
    "end": "68939"
  },
  {
    "text": "we can reject the promise and send the",
    "start": "68939",
    "end": "70560"
  },
  {
    "text": "error back down to the consumer which",
    "start": "70560",
    "end": "72479"
  },
  {
    "text": "can use the catch method and an entirely",
    "start": "72479",
    "end": "74220"
  },
  {
    "text": "different function for handling",
    "start": "74220",
    "end": "75659"
  },
  {
    "text": "exceptions and if you just want to run",
    "start": "75659",
    "end": "77640"
  },
  {
    "text": "some code no matter what you can use",
    "start": "77640",
    "end": "78990"
  },
  {
    "text": "finally to handle both possibilities all",
    "start": "78990",
    "end": "81390"
  },
  {
    "text": "of these methods return promises which",
    "start": "81390",
    "end": "83189"
  },
  {
    "text": "means they can be chained together to",
    "start": "83189",
    "end": "84570"
  },
  {
    "text": "handle multiple asynchronous operations",
    "start": "84570",
    "end": "86310"
  },
  {
    "text": "in a row this has been JavaScript",
    "start": "86310",
    "end": "87960"
  },
  {
    "text": "promises in 100 seconds thanks for",
    "start": "87960",
    "end": "90090"
  },
  {
    "text": "watching and also make sure to follow my",
    "start": "90090",
    "end": "91950"
  },
  {
    "text": "brand new Instagram account for even",
    "start": "91950",
    "end": "93600"
  },
  {
    "text": "more content on this topic I will see",
    "start": "93600",
    "end": "95610"
  },
  {
    "text": "you in the next one",
    "start": "95610",
    "end": "97030"
  },
  {
    "text": "[Music]",
    "start": "97030",
    "end": "100290"
  }
]