[
  {
    "start": "0",
    "end": "54000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "5360"
  },
  {
    "text": "one of the most challenging aspects of",
    "start": "5870",
    "end": "8099"
  },
  {
    "text": "building any app is determining the",
    "start": "8099",
    "end": "9570"
  },
  {
    "text": "optimal data structure ideally you want",
    "start": "9570",
    "end": "11670"
  },
  {
    "text": "to maximize performance while minimizing",
    "start": "11670",
    "end": "13590"
  },
  {
    "text": "costs but that's easier said than done",
    "start": "13590",
    "end": "15210"
  },
  {
    "text": "and especially so with a no SQL database",
    "start": "15210",
    "end": "17640"
  },
  {
    "text": "like firestore because you really have",
    "start": "17640",
    "end": "19230"
  },
  {
    "text": "to plan ahead on how you model your data",
    "start": "19230",
    "end": "20820"
  },
  {
    "text": "last week I asked everybody on our slack",
    "start": "20820",
    "end": "22949"
  },
  {
    "text": "channel to send me the biggest",
    "start": "22949",
    "end": "24090"
  },
  {
    "text": "challenges that they faced modeling data",
    "start": "24090",
    "end": "25769"
  },
  {
    "text": "and firestore and this conversation",
    "start": "25769",
    "end": "27240"
  },
  {
    "text": "snowballed into an entire new course on",
    "start": "27240",
    "end": "29279"
  },
  {
    "text": "fire ship dedicated completely to no SQL",
    "start": "29279",
    "end": "31890"
  },
  {
    "text": "data modeling and queries so this is a",
    "start": "31890",
    "end": "33989"
  },
  {
    "text": "topic you're interested in consider",
    "start": "33989",
    "end": "35309"
  },
  {
    "text": "becoming a pro member to get access to",
    "start": "35309",
    "end": "37050"
  },
  {
    "text": "that course and I'll leave a discount",
    "start": "37050",
    "end": "38579"
  },
  {
    "text": "code in the video description in today's",
    "start": "38579",
    "end": "40410"
  },
  {
    "text": "video we're going to look at five",
    "start": "40410",
    "end": "41700"
  },
  {
    "text": "different ways you can structure and",
    "start": "41700",
    "end": "43140"
  },
  {
    "text": "query your data that you may not know",
    "start": "43140",
    "end": "44760"
  },
  {
    "text": "about and each technique that we'll look",
    "start": "44760",
    "end": "46260"
  },
  {
    "text": "at is based on a real submission from",
    "start": "46260",
    "end": "47940"
  },
  {
    "text": "the community a minute ago I said that",
    "start": "47940",
    "end": "49800"
  },
  {
    "text": "you have to plan ahead when structuring",
    "start": "49800",
    "end": "51539"
  },
  {
    "text": "your data so what do I mean by that",
    "start": "51539",
    "end": "53070"
  },
  {
    "text": "exactly",
    "start": "53070",
    "end": "53730"
  },
  {
    "text": "well the basic idea is that you want to",
    "start": "53730",
    "end": "55289"
  },
  {
    "start": "54000",
    "end": "78000"
  },
  {
    "text": "pre render your data so that it fits the",
    "start": "55289",
    "end": "57270"
  },
  {
    "text": "view or the screen in your app as",
    "start": "57270",
    "end": "58800"
  },
  {
    "text": "closely as possible ideally you only",
    "start": "58800",
    "end": "60809"
  },
  {
    "text": "need to make one document read or one",
    "start": "60809",
    "end": "62460"
  },
  {
    "text": "query to a collection to fill the entire",
    "start": "62460",
    "end": "64470"
  },
  {
    "text": "view with data this differs from a",
    "start": "64470",
    "end": "66210"
  },
  {
    "text": "relational SQL database where the idea",
    "start": "66210",
    "end": "68250"
  },
  {
    "text": "is to break your data into a lot of",
    "start": "68250",
    "end": "69780"
  },
  {
    "text": "small pieces and then join it all",
    "start": "69780",
    "end": "71280"
  },
  {
    "text": "together server-side heard people say",
    "start": "71280",
    "end": "73260"
  },
  {
    "text": "that fires store or no SQL databases in",
    "start": "73260",
    "end": "75270"
  },
  {
    "text": "general are not good for relational data",
    "start": "75270",
    "end": "77040"
  },
  {
    "text": "modeling but that's actually not true",
    "start": "77040",
    "end": "78659"
  },
  {
    "text": "and it's really just a matter of",
    "start": "78659",
    "end": "79799"
  },
  {
    "text": "rethinking the way that you model data",
    "start": "79799",
    "end": "81360"
  },
  {
    "text": "in general and what you'll find is that",
    "start": "81360",
    "end": "82890"
  },
  {
    "text": "you can solve all the same problems that",
    "start": "82890",
    "end": "84240"
  },
  {
    "text": "you can with SQL but you can do it in a",
    "start": "84240",
    "end": "86009"
  },
  {
    "text": "way that's faster less expensive and",
    "start": "86009",
    "end": "87900"
  },
  {
    "text": "more flexible with that being said let's",
    "start": "87900",
    "end": "89700"
  },
  {
    "text": "go ahead and jump into our first data",
    "start": "89700",
    "end": "90840"
  },
  {
    "text": "model and access pattern this suggestion",
    "start": "90840",
    "end": "93119"
  },
  {
    "text": "comes from Samrat and he wants to query",
    "start": "93119",
    "end": "94950"
  },
  {
    "text": "a collection based on whether or not a",
    "start": "94950",
    "end": "96720"
  },
  {
    "text": "user was mentioned in a post in that",
    "start": "96720",
    "end": "98400"
  },
  {
    "text": "collection this is similar to something",
    "start": "98400",
    "end": "100290"
  },
  {
    "text": "like Twitter where if you mention a user",
    "start": "100290",
    "end": "101759"
  },
  {
    "text": "name with the @ symbol it will notify",
    "start": "101759",
    "end": "103350"
  },
  {
    "text": "that user that they've been mentioned",
    "start": "103350",
    "end": "104790"
  },
  {
    "text": "and they also might want to see a list",
    "start": "104790",
    "end": "106350"
  },
  {
    "text": "of all the tweets that they've been",
    "start": "106350",
    "end": "107399"
  },
  {
    "text": "mentioned in in this case we have a",
    "start": "107399",
    "end": "109229"
  },
  {
    "text": "many-to-many relationship where a tweet",
    "start": "109229",
    "end": "111060"
  },
  {
    "text": "can have many mentioned users and a user",
    "start": "111060",
    "end": "113009"
  },
  {
    "text": "can be mentioned in many tweets but the",
    "start": "113009",
    "end": "115020"
  },
  {
    "text": "thing to keep in mind here is that a",
    "start": "115020",
    "end": "116130"
  },
  {
    "text": "tweet or a post can maybe only have one",
    "start": "116130",
    "end": "118229"
  },
  {
    "text": "to 10 mentioned users but a user can be",
    "start": "118229",
    "end": "120509"
  },
  {
    "text": "mentioned in potentially billions of",
    "start": "120509",
    "end": "121920"
  },
  {
    "text": "tweets in situations like this it's",
    "start": "121920",
    "end": "123689"
  },
  {
    "text": "usually best to have the document with",
    "start": "123689",
    "end": "125579"
  },
  {
    "text": "the smaller side of the relational data",
    "start": "125579",
    "end": "127290"
  },
  {
    "text": "manage D relationships in this example",
    "start": "127290",
    "end": "129660"
  },
  {
    "text": "we have an array of usernames embedded",
    "start": "129660",
    "end": "131430"
  },
  {
    "text": "on the tweet or post doc",
    "start": "131430",
    "end": "133430"
  },
  {
    "text": "you'd implement this logic somewhere in",
    "start": "133430",
    "end": "134900"
  },
  {
    "text": "your front-end code using regex to",
    "start": "134900",
    "end": "136400"
  },
  {
    "text": "extract the user names out of the post",
    "start": "136400",
    "end": "138230"
  },
  {
    "text": "text and then duplicate them on the same",
    "start": "138230",
    "end": "139940"
  },
  {
    "text": "document as an array now it becomes very",
    "start": "139940",
    "end": "142280"
  },
  {
    "text": "easy to query all the tweets that a user",
    "start": "142280",
    "end": "144260"
  },
  {
    "text": "is mentioned in by making a reference to",
    "start": "144260",
    "end": "145940"
  },
  {
    "text": "the post collection then we can use the",
    "start": "145940",
    "end": "148040"
  },
  {
    "text": "array contains operator to get all the",
    "start": "148040",
    "end": "149690"
  },
  {
    "text": "tweets that have a corresponding user ID",
    "start": "149690",
    "end": "151610"
  },
  {
    "text": "in that mentions array and then we could",
    "start": "151610",
    "end": "153650"
  },
  {
    "text": "use a cloud function to listen for a new",
    "start": "153650",
    "end": "155570"
  },
  {
    "text": "post to be created and then send a push",
    "start": "155570",
    "end": "157250"
  },
  {
    "text": "notification or an email to a user when",
    "start": "157250",
    "end": "159200"
  },
  {
    "text": "they're mentioned so the main limitation",
    "start": "159200",
    "end": "161090"
  },
  {
    "text": "with array contains is that you can only",
    "start": "161090",
    "end": "162620"
  },
  {
    "text": "query for one item at a time and that",
    "start": "162620",
    "end": "164630"
  },
  {
    "text": "leads me to the next challenge which is",
    "start": "164630",
    "end": "166160"
  },
  {
    "start": "165000",
    "end": "293000"
  },
  {
    "text": "a category system that allows you to",
    "start": "166160",
    "end": "167690"
  },
  {
    "text": "filter by multiple categories at the",
    "start": "167690",
    "end": "169310"
  },
  {
    "text": "same time while also being able to see",
    "start": "169310",
    "end": "171740"
  },
  {
    "text": "if a post contains a given category out",
    "start": "171740",
    "end": "173840"
  },
  {
    "text": "of potentially multiple passed values",
    "start": "173840",
    "end": "175580"
  },
  {
    "text": "and also the ability to filter by not",
    "start": "175580",
    "end": "177680"
  },
  {
    "text": "containing a certain value so these",
    "start": "177680",
    "end": "179630"
  },
  {
    "text": "requirements roughly translate into an",
    "start": "179630",
    "end": "181460"
  },
  {
    "text": "and or or not statement in a sequel",
    "start": "181460",
    "end": "183920"
  },
  {
    "text": "database I'm gonna go ahead and call",
    "start": "183920",
    "end": "185630"
  },
  {
    "text": "these tags instead of categories but the",
    "start": "185630",
    "end": "187400"
  },
  {
    "text": "general idea here is the same we have a",
    "start": "187400",
    "end": "189140"
  },
  {
    "text": "tags collection which is really just",
    "start": "189140",
    "end": "190700"
  },
  {
    "text": "there to hold any extra data about a tag",
    "start": "190700",
    "end": "192710"
  },
  {
    "text": "like a description or a URL or something",
    "start": "192710",
    "end": "194990"
  },
  {
    "text": "like that and I'd recommend giving your",
    "start": "194990",
    "end": "196520"
  },
  {
    "text": "tags a unique ID that's something",
    "start": "196520",
    "end": "198260"
  },
  {
    "text": "descriptive that you can actually show",
    "start": "198260",
    "end": "199610"
  },
  {
    "text": "in the UI and then you'll take that ID",
    "start": "199610",
    "end": "201530"
  },
  {
    "text": "and associate it to a post by using a",
    "start": "201530",
    "end": "203870"
  },
  {
    "text": "map so we have a map called tags and",
    "start": "203870",
    "end": "205940"
  },
  {
    "text": "then each key in that map is the ID from",
    "start": "205940",
    "end": "208280"
  },
  {
    "text": "the tags collection and the cool thing",
    "start": "208280",
    "end": "209900"
  },
  {
    "text": "about firestore is that it automatically",
    "start": "209900",
    "end": "211460"
  },
  {
    "text": "indexes the keys in the map which means",
    "start": "211460",
    "end": "213380"
  },
  {
    "text": "we can query them without any additional",
    "start": "213380",
    "end": "214940"
  },
  {
    "text": "configuration first let's take a look at",
    "start": "214940",
    "end": "217010"
  },
  {
    "text": "how we can do a logical and query or in",
    "start": "217010",
    "end": "218960"
  },
  {
    "text": "other words we want to get all of the",
    "start": "218960",
    "end": "220400"
  },
  {
    "text": "items that have both of these tags",
    "start": "220400",
    "end": "222020"
  },
  {
    "text": "present we can do this by simply",
    "start": "222020",
    "end": "223610"
  },
  {
    "text": "chaining together where statements and",
    "start": "223610",
    "end": "225530"
  },
  {
    "text": "as long as they're using the equal to",
    "start": "225530",
    "end": "227030"
  },
  {
    "text": "operator we can do this as many times as",
    "start": "227030",
    "end": "228860"
  },
  {
    "text": "we want so this works great if you're",
    "start": "228860",
    "end": "230690"
  },
  {
    "text": "filtering by multiple boolean values but",
    "start": "230690",
    "end": "232820"
  },
  {
    "text": "if you throw in a range operator that",
    "start": "232820",
    "end": "234440"
  },
  {
    "text": "means you'll need a composite index and",
    "start": "234440",
    "end": "236330"
  },
  {
    "text": "keep in mind you can only use one range",
    "start": "236330",
    "end": "238010"
  },
  {
    "text": "operator per query so that's a",
    "start": "238010",
    "end": "239600"
  },
  {
    "text": "limitation that you want to consider now",
    "start": "239600",
    "end": "241430"
  },
  {
    "text": "if you wanted to make something that was",
    "start": "241430",
    "end": "242480"
  },
  {
    "text": "more like an or query you can just make",
    "start": "242480",
    "end": "244190"
  },
  {
    "text": "multiple queries for separate tags we're",
    "start": "244190",
    "end": "246620"
  },
  {
    "text": "able to run these queries concurrently",
    "start": "246620",
    "end": "248090"
  },
  {
    "text": "and then we can just join them together",
    "start": "248090",
    "end": "249500"
  },
  {
    "text": "and filter out any duplicates in our",
    "start": "249500",
    "end": "251510"
  },
  {
    "text": "client-side code now the most difficult",
    "start": "251510",
    "end": "253160"
  },
  {
    "text": "part of this challenge is implementing",
    "start": "253160",
    "end": "254630"
  },
  {
    "text": "the knot logic the values on the map are",
    "start": "254630",
    "end": "256880"
  },
  {
    "text": "set up as boyens so the most",
    "start": "256880",
    "end": "258560"
  },
  {
    "text": "straightforward approach here would be",
    "start": "258560",
    "end": "260030"
  },
  {
    "text": "to add all of the tags to every document",
    "start": "260030",
    "end": "262010"
  },
  {
    "text": "and then set them to false by default",
    "start": "262010",
    "end": "263930"
  },
  {
    "text": "this would be perfectly fine if you have",
    "start": "263930",
    "end": "265850"
  },
  {
    "text": "a finite set of",
    "start": "265850",
    "end": "266930"
  },
  {
    "text": "and know their values upfront but it",
    "start": "266930",
    "end": "268820"
  },
  {
    "text": "would be much more challenging if tags",
    "start": "268820",
    "end": "270290"
  },
  {
    "text": "are generated by users and there could",
    "start": "270290",
    "end": "271880"
  },
  {
    "text": "be potentially billions of tags so",
    "start": "271880",
    "end": "273889"
  },
  {
    "text": "that's a limitation to consider but keep",
    "start": "273889",
    "end": "275780"
  },
  {
    "text": "in mind that if you have a numeric value",
    "start": "275780",
    "end": "277070"
  },
  {
    "text": "or if you have a string value with some",
    "start": "277070",
    "end": "278810"
  },
  {
    "text": "sort of ordering and bedded in it and",
    "start": "278810",
    "end": "280550"
  },
  {
    "text": "you can simulate a knock query by using",
    "start": "280550",
    "end": "281930"
  },
  {
    "text": "range operators for example if we wanted",
    "start": "281930",
    "end": "284270"
  },
  {
    "text": "to get all the items that were not",
    "start": "284270",
    "end": "285710"
  },
  {
    "text": "twenty dollars then we could query on",
    "start": "285710",
    "end": "287690"
  },
  {
    "text": "either side of that range or in other",
    "start": "287690",
    "end": "289340"
  },
  {
    "text": "words all the items that are less than",
    "start": "289340",
    "end": "290720"
  },
  {
    "text": "twenty dollars and all the items that",
    "start": "290720",
    "end": "292160"
  },
  {
    "text": "are more than twenty dollars and if",
    "start": "292160",
    "end": "293840"
  },
  {
    "start": "293000",
    "end": "452000"
  },
  {
    "text": "you're doing a lot of stuff like this it",
    "start": "293840",
    "end": "295190"
  },
  {
    "text": "might be time to look into something",
    "start": "295190",
    "end": "296210"
  },
  {
    "text": "like algo Leah to index some of your",
    "start": "296210",
    "end": "298009"
  },
  {
    "text": "data in a full-text search engine that's",
    "start": "298009",
    "end": "299780"
  },
  {
    "text": "what I do for fire ship and firebase in",
    "start": "299780",
    "end": "301610"
  },
  {
    "text": "algo Leah work really well together now",
    "start": "301610",
    "end": "303380"
  },
  {
    "text": "moving on to our next data model this",
    "start": "303380",
    "end": "304880"
  },
  {
    "text": "one comes from Lenny Cunningham and his",
    "start": "304880",
    "end": "306650"
  },
  {
    "text": "flight now dotnet app geolocation",
    "start": "306650",
    "end": "308630"
  },
  {
    "text": "queries bring up a really interesting",
    "start": "308630",
    "end": "309889"
  },
  {
    "text": "data modeling technique called composite",
    "start": "309889",
    "end": "311870"
  },
  {
    "text": "strings not only do composite strings",
    "start": "311870",
    "end": "313820"
  },
  {
    "text": "allow us to do things like geo hashing",
    "start": "313820",
    "end": "315470"
  },
  {
    "text": "but it also allows us to do things like",
    "start": "315470",
    "end": "317180"
  },
  {
    "text": "treat reversals and threaded comments",
    "start": "317180",
    "end": "319360"
  },
  {
    "text": "take a look at this tree structure we",
    "start": "319360",
    "end": "321470"
  },
  {
    "text": "have here where each letter represents a",
    "start": "321470",
    "end": "323479"
  },
  {
    "text": "document in the database what I'm going",
    "start": "323479",
    "end": "325340"
  },
  {
    "text": "to show you next is how to write a query",
    "start": "325340",
    "end": "326720"
  },
  {
    "text": "that will traverse down one node of the",
    "start": "326720",
    "end": "328580"
  },
  {
    "text": "tree and this is especially useful if",
    "start": "328580",
    "end": "330320"
  },
  {
    "text": "you're building something like reddit",
    "start": "330320",
    "end": "331490"
  },
  {
    "text": "comments that can be threaded multiple",
    "start": "331490",
    "end": "333020"
  },
  {
    "text": "levels deep or if you have a hierarchy",
    "start": "333020",
    "end": "334820"
  },
  {
    "text": "of categories and only want to query a",
    "start": "334820",
    "end": "336680"
  },
  {
    "text": "specific node in that tree we can do",
    "start": "336680",
    "end": "338960"
  },
  {
    "text": "this with all of the documents in the",
    "start": "338960",
    "end": "340190"
  },
  {
    "text": "same collection and you can see here at",
    "start": "340190",
    "end": "341960"
  },
  {
    "text": "the top of the tree we have the document",
    "start": "341960",
    "end": "344000"
  },
  {
    "text": "a and it has a parent value set to false",
    "start": "344000",
    "end": "346159"
  },
  {
    "text": "that would be our top-level comment and",
    "start": "346159",
    "end": "348530"
  },
  {
    "text": "then let's say a user responds to this",
    "start": "348530",
    "end": "350150"
  },
  {
    "text": "comment that will be our B document and",
    "start": "350150",
    "end": "352159"
  },
  {
    "text": "it has a parent value set to a now let's",
    "start": "352159",
    "end": "354919"
  },
  {
    "text": "imagine we have a response to the B",
    "start": "354919",
    "end": "356330"
  },
  {
    "text": "document then we would have a C and D",
    "start": "356330",
    "end": "358250"
  },
  {
    "text": "document and they both reference the",
    "start": "358250",
    "end": "360080"
  },
  {
    "text": "same parents of a B so what we've done",
    "start": "360080",
    "end": "362720"
  },
  {
    "text": "here is create a composite key where the",
    "start": "362720",
    "end": "364550"
  },
  {
    "text": "items at the third level of the tree",
    "start": "364550",
    "end": "366349"
  },
  {
    "text": "referenced the IDS of the parent",
    "start": "366349",
    "end": "368510"
  },
  {
    "text": "documents at the first and second levels",
    "start": "368510",
    "end": "370340"
  },
  {
    "text": "these don't need to be an alphabetical",
    "start": "370340",
    "end": "372050"
  },
  {
    "text": "order anything like that you can just",
    "start": "372050",
    "end": "373460"
  },
  {
    "text": "use fire stores automatically generated",
    "start": "373460",
    "end": "375260"
  },
  {
    "text": "IDs the only thing that's important is",
    "start": "375260",
    "end": "377090"
  },
  {
    "text": "that the composite string is created in",
    "start": "377090",
    "end": "378949"
  },
  {
    "text": "the same order that the parent elements",
    "start": "378949",
    "end": "380810"
  },
  {
    "text": "appear in the tree let's take a look at",
    "start": "380810",
    "end": "383000"
  },
  {
    "text": "how we can actually traverse this tree",
    "start": "383000",
    "end": "384050"
  },
  {
    "text": "if we just want to grab the top level of",
    "start": "384050",
    "end": "386090"
  },
  {
    "text": "the tree which you would probably want",
    "start": "386090",
    "end": "387080"
  },
  {
    "text": "to do if you're showing the top level",
    "start": "387080",
    "end": "388370"
  },
  {
    "text": "comments is just query where the parent",
    "start": "388370",
    "end": "390380"
  },
  {
    "text": "equals false now if you want to query",
    "start": "390380",
    "end": "393139"
  },
  {
    "text": "across the breadth of the tree or just",
    "start": "393139",
    "end": "394699"
  },
  {
    "text": "get all of the top level responses or",
    "start": "394699",
    "end": "396740"
  },
  {
    "text": "something like that you can also save a",
    "start": "396740",
    "end": "398300"
  },
  {
    "text": "level property on each document which",
    "start": "398300",
    "end": "400130"
  },
  {
    "text": "would",
    "start": "400130",
    "end": "400430"
  },
  {
    "text": "you to do so but I think most use cases",
    "start": "400430",
    "end": "402170"
  },
  {
    "text": "will require you to query the depth of",
    "start": "402170",
    "end": "404150"
  },
  {
    "text": "the tree so this parts technically",
    "start": "404150",
    "end": "405620"
  },
  {
    "text": "optional then assuming you have the",
    "start": "405620",
    "end": "407570"
  },
  {
    "text": "level property which is just an integer",
    "start": "407570",
    "end": "409280"
  },
  {
    "text": "that increases by one for each level you",
    "start": "409280",
    "end": "411980"
  },
  {
    "text": "can use where to query where all the",
    "start": "411980",
    "end": "413480"
  },
  {
    "text": "documents live at a certain level or you",
    "start": "413480",
    "end": "415100"
  },
  {
    "text": "could use a range operator to get",
    "start": "415100",
    "end": "416450"
  },
  {
    "text": "everything above or below a certain",
    "start": "416450",
    "end": "417950"
  },
  {
    "text": "level now things get a lot more",
    "start": "417950",
    "end": "420020"
  },
  {
    "text": "interesting when we query the depth of",
    "start": "420020",
    "end": "421670"
  },
  {
    "text": "the tree the composite key that we set",
    "start": "421670",
    "end": "423170"
  },
  {
    "text": "up earlier will get larger and larger as",
    "start": "423170",
    "end": "425090"
  },
  {
    "text": "we get deeper in the tree that means we",
    "start": "425090",
    "end": "427250"
  },
  {
    "text": "can take a document ID and use it as a",
    "start": "427250",
    "end": "428930"
  },
  {
    "text": "starting point and then query all of the",
    "start": "428930",
    "end": "430850"
  },
  {
    "text": "children that start with that same ID in",
    "start": "430850",
    "end": "432950"
  },
  {
    "text": "their composite parent string we can",
    "start": "432950",
    "end": "434750"
  },
  {
    "text": "make this query by saying where the",
    "start": "434750",
    "end": "436010"
  },
  {
    "text": "parent is greater than or equal to the",
    "start": "436010",
    "end": "437750"
  },
  {
    "text": "ID and where the parent is less than or",
    "start": "437750",
    "end": "439940"
  },
  {
    "text": "equal to the ID plus a high Unicode",
    "start": "439940",
    "end": "442340"
  },
  {
    "text": "character so that would allow us to",
    "start": "442340",
    "end": "444230"
  },
  {
    "text": "start from any node in the tree and then",
    "start": "444230",
    "end": "445910"
  },
  {
    "text": "traverse downward and this is actually",
    "start": "445910",
    "end": "447740"
  },
  {
    "text": "the same way that geo hashing works and",
    "start": "447740",
    "end": "449240"
  },
  {
    "text": "it's a very powerful feature but is a",
    "start": "449240",
    "end": "450860"
  },
  {
    "text": "little more advanced now moving on to",
    "start": "450860",
    "end": "452900"
  },
  {
    "start": "452000",
    "end": "527000"
  },
  {
    "text": "our next data model which comes from",
    "start": "452900",
    "end": "454190"
  },
  {
    "text": "Stefan we're going to look at how we can",
    "start": "454190",
    "end": "456020"
  },
  {
    "text": "query a collection starting with an",
    "start": "456020",
    "end": "457640"
  },
  {
    "text": "array of document IDs his data model was",
    "start": "457640",
    "end": "460010"
  },
  {
    "text": "a lot more complex but I just wanted to",
    "start": "460010",
    "end": "461630"
  },
  {
    "text": "pick out one little thing that I think",
    "start": "461630",
    "end": "462920"
  },
  {
    "text": "is helpful to a lot of people when",
    "start": "462920",
    "end": "464690"
  },
  {
    "text": "working with firestore it's ideal to",
    "start": "464690",
    "end": "466220"
  },
  {
    "text": "denormalize your data or embed it on a",
    "start": "466220",
    "end": "468050"
  },
  {
    "text": "single document but there are a lot of",
    "start": "468050",
    "end": "469550"
  },
  {
    "text": "cases when it's just not practical or",
    "start": "469550",
    "end": "471380"
  },
  {
    "text": "possible to do that so one thing you can",
    "start": "471380",
    "end": "473240"
  },
  {
    "text": "do is create a more normalized model",
    "start": "473240",
    "end": "474890"
  },
  {
    "text": "like we see here with a sizes array then",
    "start": "474890",
    "end": "477050"
  },
  {
    "text": "each element in that array is a string",
    "start": "477050",
    "end": "478910"
  },
  {
    "text": "referencing a document in a different",
    "start": "478910",
    "end": "480650"
  },
  {
    "text": "collection but because there are no",
    "start": "480650",
    "end": "482360"
  },
  {
    "text": "server-side joins in firestore how do we",
    "start": "482360",
    "end": "484190"
  },
  {
    "text": "actually join this data so we can use it",
    "start": "484190",
    "end": "485930"
  },
  {
    "text": "in our UI we can actually do this very",
    "start": "485930",
    "end": "487850"
  },
  {
    "text": "efficiently in firestore because we can",
    "start": "487850",
    "end": "489590"
  },
  {
    "text": "send multiple read requests to the",
    "start": "489590",
    "end": "490970"
  },
  {
    "text": "database and firestore will handle all",
    "start": "490970",
    "end": "492980"
  },
  {
    "text": "of those requests concurrently here's a",
    "start": "492980",
    "end": "494900"
  },
  {
    "text": "little helper function you can use in",
    "start": "494900",
    "end": "496160"
  },
  {
    "text": "JavaScript to join an array of IDs to a",
    "start": "496160",
    "end": "498110"
  },
  {
    "text": "collection it takes a collection and an",
    "start": "498110",
    "end": "500360"
  },
  {
    "text": "array of IDs as its argument then it",
    "start": "500360",
    "end": "502430"
  },
  {
    "text": "Maps the IDS to a document read that",
    "start": "502430",
    "end": "505130"
  },
  {
    "text": "will give us an array of promises and",
    "start": "505130",
    "end": "506480"
  },
  {
    "text": "then we can use promise dot all to",
    "start": "506480",
    "end": "508070"
  },
  {
    "text": "resolve all of those promises",
    "start": "508070",
    "end": "509120"
  },
  {
    "text": "concurrently and lastly we can map the",
    "start": "509120",
    "end": "510980"
  },
  {
    "text": "document snapshot to its raw data now if",
    "start": "510980",
    "end": "513560"
  },
  {
    "text": "we wanted to use this helper method in",
    "start": "513560",
    "end": "515180"
  },
  {
    "text": "our code we can just pass at this",
    "start": "515180",
    "end": "516409"
  },
  {
    "text": "collection reference and the array of",
    "start": "516410",
    "end": "517969"
  },
  {
    "text": "ID's that we want to read and it will",
    "start": "517970",
    "end": "519560"
  },
  {
    "text": "return an array of the document data so",
    "start": "519560",
    "end": "522050"
  },
  {
    "text": "if you want to model your data in a more",
    "start": "522050",
    "end": "523400"
  },
  {
    "text": "normalized SQL style you can do it using",
    "start": "523400",
    "end": "525740"
  },
  {
    "text": "something like this now that brings us",
    "start": "525740",
    "end": "527600"
  },
  {
    "start": "527000",
    "end": "703000"
  },
  {
    "text": "to the final model coming from Troy and",
    "start": "527600",
    "end": "529550"
  },
  {
    "text": "he's building something like a social",
    "start": "529550",
    "end": "531500"
  },
  {
    "text": "media style follower feed",
    "start": "531500",
    "end": "533410"
  },
  {
    "text": "in other words you follow a bunch of",
    "start": "533410",
    "end": "534910"
  },
  {
    "text": "users and you want to see the most",
    "start": "534910",
    "end": "536290"
  },
  {
    "text": "recent posts from those users that you",
    "start": "536290",
    "end": "538000"
  },
  {
    "text": "follow this is actually a very",
    "start": "538000",
    "end": "539290"
  },
  {
    "text": "challenging requirement so I built a",
    "start": "539290",
    "end": "540880"
  },
  {
    "text": "full demo to show that it's possible in",
    "start": "540880",
    "end": "542530"
  },
  {
    "text": "firestorm as you can see here I'm logged",
    "start": "542530",
    "end": "544420"
  },
  {
    "text": "in as Jeff d23 and when I unfollow these",
    "start": "544420",
    "end": "547060"
  },
  {
    "text": "users their posts are removed from my",
    "start": "547060",
    "end": "549040"
  },
  {
    "text": "feed so basically what we're doing here",
    "start": "549040",
    "end": "550840"
  },
  {
    "text": "is we're grabbing the most recent posts",
    "start": "550840",
    "end": "552520"
  },
  {
    "text": "from these users and then ordering them",
    "start": "552520",
    "end": "554260"
  },
  {
    "text": "by date and on top of that we're also",
    "start": "554260",
    "end": "556030"
  },
  {
    "text": "maintaining the user to user follow",
    "start": "556030",
    "end": "557620"
  },
  {
    "text": "relationship let's start by taking a",
    "start": "557620",
    "end": "559420"
  },
  {
    "text": "look at the data model the only way to",
    "start": "559420",
    "end": "561220"
  },
  {
    "text": "make a system like this scale to a deist",
    "start": "561220",
    "end": "562810"
  },
  {
    "text": "amount of users is to duplicate some",
    "start": "562810",
    "end": "564460"
  },
  {
    "text": "data in our database we have three",
    "start": "564460",
    "end": "566410"
  },
  {
    "text": "collections at play we have one for",
    "start": "566410",
    "end": "568090"
  },
  {
    "text": "users one for posts that can be posted",
    "start": "568090",
    "end": "570460"
  },
  {
    "text": "by a user and then another one for",
    "start": "570460",
    "end": "572080"
  },
  {
    "text": "followers all the relational data will",
    "start": "572080",
    "end": "574360"
  },
  {
    "text": "be handled by the followers collection",
    "start": "574360",
    "end": "576190"
  },
  {
    "text": "and in fact all of the data that you see",
    "start": "576190",
    "end": "578380"
  },
  {
    "text": "in the UI is coming from a query from",
    "start": "578380",
    "end": "580240"
  },
  {
    "text": "the followers document the followers",
    "start": "580240",
    "end": "582310"
  },
  {
    "text": "document belongs to the user who is",
    "start": "582310",
    "end": "583900"
  },
  {
    "text": "being followed and keeps track of all of",
    "start": "583900",
    "end": "585910"
  },
  {
    "text": "the followers in an array but in",
    "start": "585910",
    "end": "587890"
  },
  {
    "text": "addition to keeping track of the",
    "start": "587890",
    "end": "588790"
  },
  {
    "text": "followers it also duplicates some of the",
    "start": "588790",
    "end": "590740"
  },
  {
    "text": "users recent posts it doesn't duplicate",
    "start": "590740",
    "end": "593380"
  },
  {
    "text": "everything it only duplicates the data",
    "start": "593380",
    "end": "595330"
  },
  {
    "text": "that we need to show in the feed like",
    "start": "595330",
    "end": "596800"
  },
  {
    "text": "the title and it may be a preview of",
    "start": "596800",
    "end": "598570"
  },
  {
    "text": "some of the text and the last thing we",
    "start": "598570",
    "end": "600370"
  },
  {
    "text": "need to do is keep a timestamp of the",
    "start": "600370",
    "end": "602050"
  },
  {
    "text": "users last post what we're going to do",
    "start": "602050",
    "end": "604150"
  },
  {
    "text": "is make a query on this last post",
    "start": "604150",
    "end": "605740"
  },
  {
    "text": "property along with the users array and",
    "start": "605740",
    "end": "607660"
  },
  {
    "text": "the result of that will be all these",
    "start": "607660",
    "end": "609070"
  },
  {
    "text": "duplicated posts from the users that the",
    "start": "609070",
    "end": "611080"
  },
  {
    "text": "user is following now an important thing",
    "start": "611080",
    "end": "613000"
  },
  {
    "text": "to point out here is that we're keeping",
    "start": "613000",
    "end": "614380"
  },
  {
    "text": "track of the followers on a single",
    "start": "614380",
    "end": "615640"
  },
  {
    "text": "document so that means we can only scale",
    "start": "615640",
    "end": "617440"
  },
  {
    "text": "up to one megabyte of data and that",
    "start": "617440",
    "end": "619180"
  },
  {
    "text": "means you may need to break this up into",
    "start": "619180",
    "end": "620650"
  },
  {
    "text": "multiple documents as your app grows I'm",
    "start": "620650",
    "end": "622690"
  },
  {
    "text": "going to go ahead and write this query",
    "start": "622690",
    "end": "623980"
  },
  {
    "text": "inside of an async function because",
    "start": "623980",
    "end": "625540"
  },
  {
    "text": "we'll need to do some data wrangling",
    "start": "625540",
    "end": "626770"
  },
  {
    "text": "after we retrieve the initial data first",
    "start": "626770",
    "end": "629050"
  },
  {
    "text": "we'll make a reference to the followers",
    "start": "629050",
    "end": "630460"
  },
  {
    "text": "collection and then we'll query it using",
    "start": "630460",
    "end": "632260"
  },
  {
    "text": "array contains with the username of the",
    "start": "632260",
    "end": "634330"
  },
  {
    "text": "logged in user",
    "start": "634330",
    "end": "635290"
  },
  {
    "text": "after that we'll make this a compound",
    "start": "635290",
    "end": "637000"
  },
  {
    "text": "query by using order by with the last",
    "start": "637000",
    "end": "639250"
  },
  {
    "text": "post timestamp and keep in mind this is",
    "start": "639250",
    "end": "641620"
  },
  {
    "text": "a compound query so it's going to",
    "start": "641620",
    "end": "643000"
  },
  {
    "text": "require an index and firestore we'll",
    "start": "643000",
    "end": "644770"
  },
  {
    "text": "give you a warning about that in the",
    "start": "644770",
    "end": "646270"
  },
  {
    "text": "console now the cool thing about this is",
    "start": "646270",
    "end": "648520"
  },
  {
    "text": "we can limit it to 10 document reads so",
    "start": "648520",
    "end": "650530"
  },
  {
    "text": "it's a very efficient read but it can",
    "start": "650530",
    "end": "652240"
  },
  {
    "text": "provide us with data to populate",
    "start": "652240",
    "end": "653440"
  },
  {
    "text": "potentially dozens of different posts in",
    "start": "653440",
    "end": "655660"
  },
  {
    "text": "the feed once we have the result of this",
    "start": "655660",
    "end": "657790"
  },
  {
    "text": "query we have an array that we need to",
    "start": "657790",
    "end": "659440"
  },
  {
    "text": "then map to the document data and then",
    "start": "659440",
    "end": "661930"
  },
  {
    "text": "on the document data we're going to have",
    "start": "661930",
    "end": "663580"
  },
  {
    "text": "an array of the users most recent posts",
    "start": "663580",
    "end": "665800"
  },
  {
    "text": "and that's what we actually want to",
    "start": "665800",
    "end": "667209"
  },
  {
    "text": "be showing in the view so I'm going to",
    "start": "667209",
    "end": "668949"
  },
  {
    "text": "reduce this array of documents down to a",
    "start": "668949",
    "end": "671259"
  },
  {
    "text": "new array that only contains the recent",
    "start": "671259",
    "end": "673269"
  },
  {
    "text": "posts and then I want to sort those",
    "start": "673269",
    "end": "675249"
  },
  {
    "text": "recent posts based on their published",
    "start": "675249",
    "end": "676899"
  },
  {
    "text": "date we can use a race sort to handle",
    "start": "676899",
    "end": "678759"
  },
  {
    "text": "that and at this point we now have a",
    "start": "678759",
    "end": "680259"
  },
  {
    "text": "sorted array of post that spans across",
    "start": "680259",
    "end": "681939"
  },
  {
    "text": "multiple users that this user is",
    "start": "681939",
    "end": "683860"
  },
  {
    "text": "following I'm gonna go ahead and wrap",
    "start": "683860",
    "end": "685329"
  },
  {
    "text": "things up there if you want to learn",
    "start": "685329",
    "end": "686589"
  },
  {
    "text": "more about data modeling and how these",
    "start": "686589",
    "end": "688029"
  },
  {
    "text": "particular data models work consider",
    "start": "688029",
    "end": "689829"
  },
  {
    "text": "becoming a pro member at fire ship IO to",
    "start": "689829",
    "end": "691749"
  },
  {
    "text": "get access to the course thanks for",
    "start": "691749",
    "end": "693610"
  },
  {
    "text": "watching and I will talk to you soon",
    "start": "693610",
    "end": "697139"
  },
  {
    "text": "[Music]",
    "start": "697490",
    "end": "705360"
  }
]