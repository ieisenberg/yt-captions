[
  {
    "start": "0",
    "end": "58000"
  },
  {
    "text": "in a recent technical interview i was",
    "start": "160",
    "end": "1839"
  },
  {
    "text": "asked to debug the redux effect for the",
    "start": "1839",
    "end": "3679"
  },
  {
    "text": "lunar wayne shaft on a turbo",
    "start": "3679",
    "end": "5200"
  },
  {
    "text": "encapsulator but i failed because my",
    "start": "5200",
    "end": "7120"
  },
  {
    "text": "asynchronous anonymous function",
    "start": "7120",
    "end": "8559"
  },
  {
    "text": "abstraction was not item potent or",
    "start": "8559",
    "end": "10480"
  },
  {
    "text": "ephemeral and failed to memorize the",
    "start": "10480",
    "end": "12320"
  },
  {
    "text": "predicate and serialize the output",
    "start": "12320",
    "end": "14240"
  },
  {
    "text": "it's one thing if your code doesn't work",
    "start": "14240",
    "end": "15759"
  },
  {
    "text": "but it's impossible to fix if you don't",
    "start": "15759",
    "end": "17680"
  },
  {
    "text": "understand the words that describe the",
    "start": "17680",
    "end": "19119"
  },
  {
    "text": "problem",
    "start": "19119",
    "end": "19600"
  },
  {
    "text": "when you learn the code you not only",
    "start": "19600",
    "end": "21039"
  },
  {
    "text": "have to learn a programming language but",
    "start": "21039",
    "end": "22800"
  },
  {
    "text": "also a bunch of fancy words",
    "start": "22800",
    "end": "24320"
  },
  {
    "text": "that you would never use in a normal",
    "start": "24320",
    "end": "25760"
  },
  {
    "text": "conversation in today's video",
    "start": "25760",
    "end": "27599"
  },
  {
    "text": "we'll unpack and define a variety of",
    "start": "27599",
    "end": "29599"
  },
  {
    "text": "different technical words that you'll",
    "start": "29599",
    "end": "31119"
  },
  {
    "text": "definitely need to know for interviews",
    "start": "31119",
    "end": "32880"
  },
  {
    "text": "and your day-to-day work as a programmer",
    "start": "32880",
    "end": "34800"
  },
  {
    "text": "but first a quick word from our sponsor",
    "start": "34800",
    "end": "37440"
  },
  {
    "text": "work has been proceeding on the crudely",
    "start": "37440",
    "end": "39120"
  },
  {
    "text": "conceived idea of an instrument that",
    "start": "39120",
    "end": "40879"
  },
  {
    "text": "would not only provide",
    "start": "40879",
    "end": "42000"
  },
  {
    "text": "inverse reactive current for use in",
    "start": "42000",
    "end": "43920"
  },
  {
    "text": "unilateral phase detractors",
    "start": "43920",
    "end": "46399"
  },
  {
    "text": "but would also be capable of",
    "start": "46399",
    "end": "48000"
  },
  {
    "text": "automatically synchronizing cardinal",
    "start": "48000",
    "end": "49600"
  },
  {
    "text": "gram meters",
    "start": "49600",
    "end": "50640"
  },
  {
    "text": "rockwell automation's retro encapsulator",
    "start": "50640",
    "end": "53440"
  },
  {
    "text": "it's available soon",
    "start": "53440",
    "end": "55039"
  },
  {
    "text": "wherever rockwell automation products",
    "start": "55039",
    "end": "56879"
  },
  {
    "text": "are sold",
    "start": "56879",
    "end": "58640"
  },
  {
    "start": "58000",
    "end": "128000"
  },
  {
    "text": "item potent item potent the key part of",
    "start": "58640",
    "end": "61680"
  },
  {
    "text": "this word",
    "start": "61680",
    "end": "62239"
  },
  {
    "text": "is item which is latin for same the word",
    "start": "62239",
    "end": "64559"
  },
  {
    "text": "was coined in the 1800s in the context",
    "start": "64559",
    "end": "66479"
  },
  {
    "text": "of mathematics and it means an operation",
    "start": "66479",
    "end": "68640"
  },
  {
    "text": "that when applied multiple times will",
    "start": "68640",
    "end": "70320"
  },
  {
    "text": "always produce the same result for",
    "start": "70320",
    "end": "71840"
  },
  {
    "text": "example",
    "start": "71840",
    "end": "72400"
  },
  {
    "text": "multiplying by one multiple times always",
    "start": "72400",
    "end": "74400"
  },
  {
    "text": "produces the same result",
    "start": "74400",
    "end": "75759"
  },
  {
    "text": "that's an item potent operation unlike",
    "start": "75759",
    "end": "77840"
  },
  {
    "text": "multiplying by two which always produces",
    "start": "77840",
    "end": "79840"
  },
  {
    "text": "a different result",
    "start": "79840",
    "end": "80960"
  },
  {
    "text": "think of a crosswalk button if you push",
    "start": "80960",
    "end": "82880"
  },
  {
    "text": "it multiple times does it go any faster",
    "start": "82880",
    "end": "84960"
  },
  {
    "text": "no that's because it's an item potent",
    "start": "84960",
    "end": "86880"
  },
  {
    "text": "system in programming it means the same",
    "start": "86880",
    "end": "88880"
  },
  {
    "text": "thing",
    "start": "88880",
    "end": "89200"
  },
  {
    "text": "an operation or function that can be",
    "start": "89200",
    "end": "91040"
  },
  {
    "text": "called multiple times creating the same",
    "start": "91040",
    "end": "92799"
  },
  {
    "text": "output or side effect",
    "start": "92799",
    "end": "94079"
  },
  {
    "text": "for example if we have an array and we",
    "start": "94079",
    "end": "96079"
  },
  {
    "text": "push a new element to that array it's",
    "start": "96079",
    "end": "97840"
  },
  {
    "text": "making the array longer even if it's the",
    "start": "97840",
    "end": "99360"
  },
  {
    "text": "same element",
    "start": "99360",
    "end": "100079"
  },
  {
    "text": "so that is not item potent if we use a",
    "start": "100079",
    "end": "102560"
  },
  {
    "text": "set on the other hand",
    "start": "102560",
    "end": "103600"
  },
  {
    "text": "we can run the same operation multiple",
    "start": "103600",
    "end": "105280"
  },
  {
    "text": "times and it only keeps the unique",
    "start": "105280",
    "end": "107040"
  },
  {
    "text": "element",
    "start": "107040",
    "end": "107600"
  },
  {
    "text": "therefore adding an item to a set is",
    "start": "107600",
    "end": "109759"
  },
  {
    "text": "item potent this term comes to play most",
    "start": "109759",
    "end": "111759"
  },
  {
    "text": "often",
    "start": "111759",
    "end": "112240"
  },
  {
    "text": "in the context of apis the http verbs of",
    "start": "112240",
    "end": "115360"
  },
  {
    "text": "git",
    "start": "115360",
    "end": "115759"
  },
  {
    "text": "put and delete should always be",
    "start": "115759",
    "end": "117360"
  },
  {
    "text": "implemented in an item-potent way",
    "start": "117360",
    "end": "119280"
  },
  {
    "text": "in addition if you have an e-commerce",
    "start": "119280",
    "end": "120960"
  },
  {
    "text": "app where a user can submit a payment",
    "start": "120960",
    "end": "122560"
  },
  {
    "text": "you likely want that operation to be",
    "start": "122560",
    "end": "124240"
  },
  {
    "text": "item potent as well because posting the",
    "start": "124240",
    "end": "126079"
  },
  {
    "text": "same form",
    "start": "126079",
    "end": "126719"
  },
  {
    "text": "shouldn't result in multiple charges to",
    "start": "126719",
    "end": "128399"
  },
  {
    "start": "128000",
    "end": "196000"
  },
  {
    "text": "that customer ephemeral",
    "start": "128399",
    "end": "130560"
  },
  {
    "text": "ephemeral it comes from the greek word",
    "start": "130560",
    "end": "132560"
  },
  {
    "text": "ephemeros which means lasting only a day",
    "start": "132560",
    "end": "135200"
  },
  {
    "text": "think of an ephemeral plant like a",
    "start": "135200",
    "end": "136879"
  },
  {
    "text": "daylily whose flowers only last for a",
    "start": "136879",
    "end": "138959"
  },
  {
    "text": "day",
    "start": "138959",
    "end": "139280"
  },
  {
    "text": "in programming it's an antonym for terms",
    "start": "139280",
    "end": "141440"
  },
  {
    "text": "like persistent and immutable",
    "start": "141440",
    "end": "143200"
  },
  {
    "text": "at the hardware level your ram is",
    "start": "143200",
    "end": "144800"
  },
  {
    "text": "ephemeral while the hard disk is",
    "start": "144800",
    "end": "146480"
  },
  {
    "text": "persistent",
    "start": "146480",
    "end": "147200"
  },
  {
    "text": "when you shut down your computer any",
    "start": "147200",
    "end": "148640"
  },
  {
    "text": "memory in the ram is lost",
    "start": "148640",
    "end": "150319"
  },
  {
    "text": "while the data in the hard disk can be",
    "start": "150319",
    "end": "152000"
  },
  {
    "text": "retrieved later the term is also used to",
    "start": "152000",
    "end": "154000"
  },
  {
    "text": "define data structures within our code",
    "start": "154000",
    "end": "155840"
  },
  {
    "text": "for example",
    "start": "155840",
    "end": "156640"
  },
  {
    "text": "a plain javascript object is considered",
    "start": "156640",
    "end": "158720"
  },
  {
    "text": "ephemeral that's because we can mutate",
    "start": "158720",
    "end": "160480"
  },
  {
    "text": "its properties and have no way to get",
    "start": "160480",
    "end": "162160"
  },
  {
    "text": "back to the original object",
    "start": "162160",
    "end": "163680"
  },
  {
    "text": "however we can make it persistent or",
    "start": "163680",
    "end": "165680"
  },
  {
    "text": "immutable there's a bonus word for you",
    "start": "165680",
    "end": "167840"
  },
  {
    "text": "by calling object freeze which will",
    "start": "167840",
    "end": "169840"
  },
  {
    "text": "prevent any future modifications to the",
    "start": "169840",
    "end": "171840"
  },
  {
    "text": "object",
    "start": "171840",
    "end": "172480"
  },
  {
    "text": "but the place you might hear ephemeral",
    "start": "172480",
    "end": "173920"
  },
  {
    "text": "used most often is within the context of",
    "start": "173920",
    "end": "176000"
  },
  {
    "text": "cloud computing",
    "start": "176000",
    "end": "177040"
  },
  {
    "text": "many things in the cloud are becoming",
    "start": "177040",
    "end": "178480"
  },
  {
    "text": "serverless instead of a persistent",
    "start": "178480",
    "end": "180480"
  },
  {
    "text": "server always running in the cloud",
    "start": "180480",
    "end": "182239"
  },
  {
    "text": "we can use ephemeral servers",
    "start": "182239",
    "end": "185840"
  },
  {
    "start": "196000",
    "end": "253000"
  },
  {
    "text": "anonymous first and foremost the word is",
    "start": "197760",
    "end": "199760"
  },
  {
    "text": "used to describe a global group of",
    "start": "199760",
    "end": "201440"
  },
  {
    "text": "hacktivists that fight against things",
    "start": "201440",
    "end": "202959"
  },
  {
    "text": "like censorship and big government i",
    "start": "202959",
    "end": "204720"
  },
  {
    "text": "would highly recommend that you sign up",
    "start": "204720",
    "end": "206080"
  },
  {
    "text": "and put that on your resume today",
    "start": "206080",
    "end": "207920"
  },
  {
    "text": "but the word anonymous is also used in",
    "start": "207920",
    "end": "209920"
  },
  {
    "text": "our code primarily to define functions",
    "start": "209920",
    "end": "212239"
  },
  {
    "text": "that don't have a name take for example",
    "start": "212239",
    "end": "214400"
  },
  {
    "text": "a javascript function",
    "start": "214400",
    "end": "215680"
  },
  {
    "text": "or a python function if you prefer that",
    "start": "215680",
    "end": "217519"
  },
  {
    "text": "takes an argument and multiplies it by",
    "start": "217519",
    "end": "219519"
  },
  {
    "text": "two",
    "start": "219519",
    "end": "219840"
  },
  {
    "text": "what we have here is a named function",
    "start": "219840",
    "end": "221840"
  },
  {
    "text": "but it becomes cumbersome to pass name",
    "start": "221840",
    "end": "223680"
  },
  {
    "text": "functions around everywhere",
    "start": "223680",
    "end": "224879"
  },
  {
    "text": "especially as your code grows in",
    "start": "224879",
    "end": "226239"
  },
  {
    "text": "complexity and that's where anonymous",
    "start": "226239",
    "end": "227920"
  },
  {
    "text": "functions come in they're just functions",
    "start": "227920",
    "end": "229760"
  },
  {
    "text": "that don't have a name instead the",
    "start": "229760",
    "end": "231840"
  },
  {
    "text": "function is defined as the argument",
    "start": "231840",
    "end": "233840"
  },
  {
    "text": "therefore it doesn't need to be",
    "start": "233840",
    "end": "234959"
  },
  {
    "text": "referenced by a name in javascript we",
    "start": "234959",
    "end": "236959"
  },
  {
    "text": "can use an anonymous function with the",
    "start": "236959",
    "end": "238560"
  },
  {
    "text": "arrow syntax",
    "start": "238560",
    "end": "239680"
  },
  {
    "text": "but many other languages like python use",
    "start": "239680",
    "end": "242080"
  },
  {
    "text": "the lambda keyword to define an",
    "start": "242080",
    "end": "243760"
  },
  {
    "text": "anonymous function",
    "start": "243760",
    "end": "244799"
  },
  {
    "text": "the syntax feels a little weird at first",
    "start": "244799",
    "end": "246799"
  },
  {
    "text": "but is incredibly useful for small",
    "start": "246799",
    "end": "248560"
  },
  {
    "text": "simple functions as",
    "start": "248560",
    "end": "249519"
  },
  {
    "text": "arguments now speaking of functions that",
    "start": "249519",
    "end": "252000"
  },
  {
    "text": "brings us to our next fancy word",
    "start": "252000",
    "end": "253680"
  },
  {
    "start": "253000",
    "end": "310000"
  },
  {
    "text": "predicate the word has its roots in",
    "start": "253680",
    "end": "255519"
  },
  {
    "text": "latin for something declared or",
    "start": "255519",
    "end": "257199"
  },
  {
    "text": "proclaimed",
    "start": "257199",
    "end": "258160"
  },
  {
    "text": "in programming it most often means a",
    "start": "258160",
    "end": "260000"
  },
  {
    "text": "function that returns a single boolean",
    "start": "260000",
    "end": "262000"
  },
  {
    "text": "value",
    "start": "262000",
    "end": "262560"
  },
  {
    "text": "true or false by convention you'll often",
    "start": "262560",
    "end": "264800"
  },
  {
    "text": "see these functions start with the word",
    "start": "264800",
    "end": "266400"
  },
  {
    "text": "is is the value a turkey it's a simple",
    "start": "266400",
    "end": "268880"
  },
  {
    "text": "yes or no question",
    "start": "268880",
    "end": "270000"
  },
  {
    "text": "so we can return a boolean you might see",
    "start": "270000",
    "end": "272080"
  },
  {
    "text": "the word predicate come up more often",
    "start": "272080",
    "end": "273759"
  },
  {
    "text": "and strongly type languages like",
    "start": "273759",
    "end": "275199"
  },
  {
    "text": "typescript one cool thing we can do is",
    "start": "275199",
    "end": "277280"
  },
  {
    "text": "set up type",
    "start": "277280",
    "end": "277919"
  },
  {
    "text": "guards take for example this code where",
    "start": "277919",
    "end": "280000"
  },
  {
    "text": "we have an interface of a dog that can",
    "start": "280000",
    "end": "281520"
  },
  {
    "text": "bark",
    "start": "281520",
    "end": "282000"
  },
  {
    "text": "and a cat that can meow then we have a",
    "start": "282000",
    "end": "284000"
  },
  {
    "text": "function called make sound",
    "start": "284000",
    "end": "285600"
  },
  {
    "text": "that can take either a cat or a dog a",
    "start": "285600",
    "end": "288000"
  },
  {
    "text": "union type",
    "start": "288000",
    "end": "288720"
  },
  {
    "text": "as its argument the problem with this",
    "start": "288720",
    "end": "290400"
  },
  {
    "text": "code is that we don't know whether we",
    "start": "290400",
    "end": "291840"
  },
  {
    "text": "have a cat or a dog in the function body",
    "start": "291840",
    "end": "294240"
  },
  {
    "text": "however we can overcome this limitation",
    "start": "294240",
    "end": "296400"
  },
  {
    "text": "by setting up a predicate function",
    "start": "296400",
    "end": "298080"
  },
  {
    "text": "that checks whether or not the animal is",
    "start": "298080",
    "end": "299840"
  },
  {
    "text": "a cat if we then use the predicate or",
    "start": "299840",
    "end": "301840"
  },
  {
    "text": "type guard in our function body",
    "start": "301840",
    "end": "303600"
  },
  {
    "text": "typescript is smart enough to infer the",
    "start": "303600",
    "end": "305520"
  },
  {
    "text": "types based on this condition",
    "start": "305520",
    "end": "307120"
  },
  {
    "text": "if it's a cat we meow otherwise it has",
    "start": "307120",
    "end": "309280"
  },
  {
    "text": "to be a dog in which case we bark",
    "start": "309280",
    "end": "311759"
  },
  {
    "start": "310000",
    "end": "359000"
  },
  {
    "text": "memoization memoization i'm not sure if",
    "start": "311759",
    "end": "315039"
  },
  {
    "text": "this word means memo like a written",
    "start": "315039",
    "end": "316720"
  },
  {
    "text": "message",
    "start": "316720",
    "end": "317280"
  },
  {
    "text": "or memo like memory and although it",
    "start": "317280",
    "end": "319360"
  },
  {
    "text": "sounds like a scary word",
    "start": "319360",
    "end": "320639"
  },
  {
    "text": "it just means to cache the return value",
    "start": "320639",
    "end": "322560"
  },
  {
    "text": "of a function if you've ever used",
    "start": "322560",
    "end": "324000"
  },
  {
    "text": "react you might be familiar with the use",
    "start": "324000",
    "end": "325919"
  },
  {
    "text": "memo hook it creates a memoized value",
    "start": "325919",
    "end": "328479"
  },
  {
    "text": "by only re-running the function when its",
    "start": "328479",
    "end": "330320"
  },
  {
    "text": "dependencies change",
    "start": "330320",
    "end": "331520"
  },
  {
    "text": "the classic example is the fibonacci",
    "start": "331520",
    "end": "333680"
  },
  {
    "text": "sequence here we have a recursive",
    "start": "333680",
    "end": "335360"
  },
  {
    "text": "function",
    "start": "335360",
    "end": "335919"
  },
  {
    "text": "this function works but it needs to",
    "start": "335919",
    "end": "337680"
  },
  {
    "text": "recompute the same values over and over",
    "start": "337680",
    "end": "339680"
  },
  {
    "text": "again",
    "start": "339680",
    "end": "340080"
  },
  {
    "text": "we can optimize it by creating an empty",
    "start": "340080",
    "end": "342240"
  },
  {
    "text": "object and then when our function runs a",
    "start": "342240",
    "end": "344240"
  },
  {
    "text": "computation",
    "start": "344240",
    "end": "345120"
  },
  {
    "text": "it will save the value in this object",
    "start": "345120",
    "end": "347680"
  },
  {
    "text": "that means when we encounter the same",
    "start": "347680",
    "end": "349039"
  },
  {
    "text": "value again",
    "start": "349039",
    "end": "349919"
  },
  {
    "text": "we can use the value in memory instead",
    "start": "349919",
    "end": "351680"
  },
  {
    "text": "of recomputing it multiple times",
    "start": "351680",
    "end": "353680"
  },
  {
    "text": "when you hear the word memoization just",
    "start": "353680",
    "end": "355840"
  },
  {
    "text": "think memorization",
    "start": "355840",
    "end": "357039"
  },
  {
    "text": "of a return value from a function",
    "start": "357039",
    "end": "359199"
  },
  {
    "start": "359000",
    "end": "426000"
  },
  {
    "text": "abstraction",
    "start": "359199",
    "end": "360319"
  },
  {
    "text": "abstraction this word is derived from",
    "start": "360319",
    "end": "362639"
  },
  {
    "text": "the latin abs which means from",
    "start": "362639",
    "end": "365120"
  },
  {
    "text": "here which means draw so it roughly",
    "start": "365120",
    "end": "366960"
  },
  {
    "text": "translates to drawn from",
    "start": "366960",
    "end": "368800"
  },
  {
    "text": "in the most general sense it's the",
    "start": "368800",
    "end": "370240"
  },
  {
    "text": "process of hiding implementation details",
    "start": "370240",
    "end": "372479"
  },
  {
    "text": "from the end user",
    "start": "372479",
    "end": "373680"
  },
  {
    "text": "programming is like an onion it's layer",
    "start": "373680",
    "end": "375759"
  },
  {
    "text": "upon layer of abstractions",
    "start": "375759",
    "end": "377520"
  },
  {
    "text": "when you build an application you're",
    "start": "377520",
    "end": "379039"
  },
  {
    "text": "doing it on top of programming languages",
    "start": "379039",
    "end": "380960"
  },
  {
    "text": "and apis",
    "start": "380960",
    "end": "381840"
  },
  {
    "text": "that sit on top of networks and hardware",
    "start": "381840",
    "end": "383919"
  },
  {
    "text": "that sit on top of transistors and",
    "start": "383919",
    "end": "385440"
  },
  {
    "text": "electricity and so on",
    "start": "385440",
    "end": "387199"
  },
  {
    "text": "as a programmer you've likely heard the",
    "start": "387199",
    "end": "388800"
  },
  {
    "text": "phrase do not repeat yourself or",
    "start": "388800",
    "end": "390800"
  },
  {
    "text": "write dry code in this example we have a",
    "start": "390800",
    "end": "393199"
  },
  {
    "text": "shark and a tuna and both classes have",
    "start": "393199",
    "end": "395440"
  },
  {
    "text": "the same implementation details for",
    "start": "395440",
    "end": "397360"
  },
  {
    "text": "their swim method",
    "start": "397360",
    "end": "398560"
  },
  {
    "text": "rather than duplicate this code for each",
    "start": "398560",
    "end": "400400"
  },
  {
    "text": "class definition we can create an",
    "start": "400400",
    "end": "402240"
  },
  {
    "text": "abstract class called phish",
    "start": "402240",
    "end": "403840"
  },
  {
    "text": "the abstract keyword means this class",
    "start": "403840",
    "end": "405919"
  },
  {
    "text": "will never be instantiated on its own",
    "start": "405919",
    "end": "407919"
  },
  {
    "text": "because there is no such thing as a",
    "start": "407919",
    "end": "409360"
  },
  {
    "text": "generic fish",
    "start": "409360",
    "end": "410479"
  },
  {
    "text": "instead it's used to hide implementation",
    "start": "410479",
    "end": "412639"
  },
  {
    "text": "details that can be inherited from other",
    "start": "412639",
    "end": "414720"
  },
  {
    "text": "classes",
    "start": "414720",
    "end": "415440"
  },
  {
    "text": "which we can do by extending them with",
    "start": "415440",
    "end": "417280"
  },
  {
    "text": "the abstract class",
    "start": "417280",
    "end": "418720"
  },
  {
    "text": "and that's just one of many ways you can",
    "start": "418720",
    "end": "420400"
  },
  {
    "text": "create an abstraction in your code",
    "start": "420400",
    "end": "422240"
  },
  {
    "text": "the word itself really just means to",
    "start": "422240",
    "end": "423840"
  },
  {
    "text": "hide unnecessary implementation details",
    "start": "423840",
    "end": "426840"
  },
  {
    "start": "426000",
    "end": "506000"
  },
  {
    "text": "serialization serialization",
    "start": "426840",
    "end": "430000"
  },
  {
    "text": "this word comes from the english word",
    "start": "430000",
    "end": "431520"
  },
  {
    "text": "series which is just a collection of",
    "start": "431520",
    "end": "433360"
  },
  {
    "text": "items in a fixed order",
    "start": "433360",
    "end": "434960"
  },
  {
    "text": "in the programming world there's all",
    "start": "434960",
    "end": "436400"
  },
  {
    "text": "kinds of different languages and formats",
    "start": "436400",
    "end": "438240"
  },
  {
    "text": "and we often need to interop between",
    "start": "438240",
    "end": "440319"
  },
  {
    "text": "these different tools",
    "start": "440319",
    "end": "441599"
  },
  {
    "text": "java doesn't know how to understand php",
    "start": "441599",
    "end": "443759"
  },
  {
    "text": "code but what we can do",
    "start": "443759",
    "end": "445280"
  },
  {
    "text": "is take code from either language and",
    "start": "445280",
    "end": "447199"
  },
  {
    "text": "serialize it into a format that they",
    "start": "447199",
    "end": "448960"
  },
  {
    "text": "both understand",
    "start": "448960",
    "end": "450000"
  },
  {
    "text": "like binary then it can be deserialized",
    "start": "450000",
    "end": "452319"
  },
  {
    "text": "back into code that can be used natively",
    "start": "452319",
    "end": "454639"
  },
  {
    "text": "take for example a javascript app and a",
    "start": "454639",
    "end": "456800"
  },
  {
    "text": "python app that communicate over an api",
    "start": "456800",
    "end": "459280"
  },
  {
    "text": "we have a javascript object that we want",
    "start": "459280",
    "end": "461199"
  },
  {
    "text": "to use in our python app as a dictionary",
    "start": "461199",
    "end": "463520"
  },
  {
    "text": "before we send the object from",
    "start": "463520",
    "end": "464800"
  },
  {
    "text": "javascript we serialize it as a string",
    "start": "464800",
    "end": "467840"
  },
  {
    "text": "json is a standard format that can be",
    "start": "467840",
    "end": "469840"
  },
  {
    "text": "understood by virtually all modern",
    "start": "469840",
    "end": "471440"
  },
  {
    "text": "languages",
    "start": "471440",
    "end": "472400"
  },
  {
    "text": "that's how we serialize a javascript",
    "start": "472400",
    "end": "474160"
  },
  {
    "text": "object then we can go back into our",
    "start": "474160",
    "end": "476080"
  },
  {
    "text": "python code",
    "start": "476080",
    "end": "476960"
  },
  {
    "text": "and deserialize it by using json loads",
    "start": "476960",
    "end": "480000"
  },
  {
    "text": "the bottom line here is that",
    "start": "480000",
    "end": "481280"
  },
  {
    "text": "serialization is the process",
    "start": "481280",
    "end": "483039"
  },
  {
    "text": "of taking data from one format and",
    "start": "483039",
    "end": "485280"
  },
  {
    "text": "converting it to a more generic form",
    "start": "485280",
    "end": "487120"
  },
  {
    "text": "that can be used by other programs i'm",
    "start": "487120",
    "end": "489280"
  },
  {
    "text": "going to go ahead and wrap things up",
    "start": "489280",
    "end": "490319"
  },
  {
    "text": "there",
    "start": "490319",
    "end": "490639"
  },
  {
    "text": "if this video helped you please like and",
    "start": "490639",
    "end": "492080"
  },
  {
    "text": "subscribe thanks for watching",
    "start": "492080",
    "end": "493759"
  },
  {
    "text": "and i will see you in the next one the",
    "start": "493759",
    "end": "495919"
  },
  {
    "text": "lineup consisted simply of six",
    "start": "495919",
    "end": "497680"
  },
  {
    "text": "hydrocoptic marshall veins",
    "start": "497680",
    "end": "499759"
  },
  {
    "text": "so fitted to the ambifacent lunar wane",
    "start": "499759",
    "end": "502080"
  },
  {
    "text": "shaft that side fumbling was",
    "start": "502080",
    "end": "504000"
  },
  {
    "text": "effectively prevented",
    "start": "504000",
    "end": "507120"
  }
]