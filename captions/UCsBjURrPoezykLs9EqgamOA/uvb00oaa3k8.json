[
  {
    "text": "Apache kofka a distributed event",
    "start": "280",
    "end": "2600"
  },
  {
    "text": "streaming platform that can scale",
    "start": "2600",
    "end": "4279"
  },
  {
    "text": "massive pipelines of real-time data it",
    "start": "4279",
    "end": "6560"
  },
  {
    "text": "was created in 2011 at LinkedIn written",
    "start": "6560",
    "end": "9040"
  },
  {
    "text": "in Java and Scola and named kofka",
    "start": "9040",
    "end": "11240"
  },
  {
    "text": "because it's a system optimized for",
    "start": "11240",
    "end": "13080"
  },
  {
    "text": "writing let's imagine using it to build",
    "start": "13080",
    "end": "14920"
  },
  {
    "text": "a dashboard like Google analytics when",
    "start": "14920",
    "end": "17279"
  },
  {
    "text": "an event occurs like a website visit the",
    "start": "17279",
    "end": "19880"
  },
  {
    "text": "producer API creates a new record these",
    "start": "19880",
    "end": "22359"
  },
  {
    "text": "records are stored to disk in an ordered",
    "start": "22359",
    "end": "24640"
  },
  {
    "text": "immutable log called a topic which can",
    "start": "24640",
    "end": "27080"
  },
  {
    "text": "persist forever or disappear when no",
    "start": "27080",
    "end": "29039"
  },
  {
    "text": "longer needed top are distributed and",
    "start": "29039",
    "end": "31199"
  },
  {
    "text": "replicated in a cluster which contains",
    "start": "31199",
    "end": "33360"
  },
  {
    "text": "multiple servers called Brokers this",
    "start": "33360",
    "end": "35480"
  },
  {
    "text": "makes kofka fault tolerant and able to",
    "start": "35480",
    "end": "37559"
  },
  {
    "text": "scale to any workload on the other side",
    "start": "37559",
    "end": "39960"
  },
  {
    "text": "multiple consumers can subscribe to this",
    "start": "39960",
    "end": "42039"
  },
  {
    "text": "data they can read the most recent",
    "start": "42039",
    "end": "43719"
  },
  {
    "text": "message like AQ or read the entire topic",
    "start": "43719",
    "end": "46120"
  },
  {
    "text": "log and listen to updates in real time",
    "start": "46120",
    "end": "48480"
  },
  {
    "text": "in addition it provides a very powerful",
    "start": "48480",
    "end": "50440"
  },
  {
    "text": "streams API that can transform and",
    "start": "50440",
    "end": "53039"
  },
  {
    "text": "aggregate these topics before they ever",
    "start": "53039",
    "end": "54879"
  },
  {
    "text": "reach the consumer this all may sound",
    "start": "54879",
    "end": "56719"
  },
  {
    "text": "similar to message Brokers like rabbit",
    "start": "56719",
    "end": "58600"
  },
  {
    "text": "mq but kofka can handle more throughput",
    "start": "58600",
    "end": "61239"
  },
  {
    "text": "and is ideal for streaming data",
    "start": "61239",
    "end": "63120"
  },
  {
    "text": "applications for example it's used today",
    "start": "63120",
    "end": "65560"
  },
  {
    "text": "by companies like Lyft to collect and",
    "start": "65560",
    "end": "67520"
  },
  {
    "text": "process geolocation data Spotify and",
    "start": "67520",
    "end": "69960"
  },
  {
    "text": "Netflix for log processing and",
    "start": "69960",
    "end": "71960"
  },
  {
    "text": "cloudflare for real-time analytics to",
    "start": "71960",
    "end": "74159"
  },
  {
    "text": "get started download it and use a tool",
    "start": "74159",
    "end": "76240"
  },
  {
    "text": "like zookeeper or Kraft to manage your",
    "start": "76240",
    "end": "78600"
  },
  {
    "text": "cluster now in one terminal start",
    "start": "78600",
    "end": "80280"
  },
  {
    "text": "zookeeper then in the other start the",
    "start": "80280",
    "end": "82200"
  },
  {
    "text": "kofka server with the environment up and",
    "start": "82200",
    "end": "84159"
  },
  {
    "text": "running we can now create our first",
    "start": "84159",
    "end": "85799"
  },
  {
    "text": "topic remember a topic is just a log of",
    "start": "85799",
    "end": "88520"
  },
  {
    "text": "events kept in order in an event will",
    "start": "88520",
    "end": "90520"
  },
  {
    "text": "have a key value and timestamp and may",
    "start": "90520",
    "end": "93040"
  },
  {
    "text": "also contain optional metadata and",
    "start": "93040",
    "end": "94799"
  },
  {
    "text": "headers now let's use this command to",
    "start": "94799",
    "end": "96960"
  },
  {
    "text": "publish an event to the topic where",
    "start": "96960",
    "end": "98799"
  },
  {
    "text": "every line represents a different event",
    "start": "98799",
    "end": "100960"
  },
  {
    "text": "and now these events are written to a",
    "start": "100960",
    "end": "102520"
  },
  {
    "text": "topic which is stored durably and",
    "start": "102520",
    "end": "104360"
  },
  {
    "text": "partitioned in the cluster cofa",
    "start": "104360",
    "end": "106040"
  },
  {
    "text": "guarantees that any consumer of a given",
    "start": "106040",
    "end": "108040"
  },
  {
    "text": "topic will always read the events in the",
    "start": "108040",
    "end": "110000"
  },
  {
    "text": "exact same order now with this command",
    "start": "110000",
    "end": "111920"
  },
  {
    "text": "we're able to consume the topic by",
    "start": "111920",
    "end": "113920"
  },
  {
    "text": "default it will give us the latest event",
    "start": "113920",
    "end": "115759"
  },
  {
    "text": "although we can use the from beginning",
    "start": "115759",
    "end": "117159"
  },
  {
    "text": "flag to read the entire log it's also",
    "start": "117159",
    "end": "119560"
  },
  {
    "text": "Poss to provide an offset to read a",
    "start": "119560",
    "end": "121880"
  },
  {
    "text": "subset of records at this point we've",
    "start": "121880",
    "end": "123840"
  },
  {
    "text": "achieved basic event streaming but the",
    "start": "123840",
    "end": "125840"
  },
  {
    "text": "kofka streams API can take things to",
    "start": "125840",
    "end": "127759"
  },
  {
    "text": "another level it's most well supported",
    "start": "127759",
    "end": "129479"
  },
  {
    "text": "with Java and can do things like",
    "start": "129479",
    "end": "131039"
  },
  {
    "text": "stateless transformation like filtering",
    "start": "131039",
    "end": "133040"
  },
  {
    "text": "out a subset of events or state full",
    "start": "133040",
    "end": "135400"
  },
  {
    "text": "transformation like an aggregation that",
    "start": "135400",
    "end": "137680"
  },
  {
    "text": "combines multiple events into a single",
    "start": "137680",
    "end": "139680"
  },
  {
    "text": "value over a certain window of time and",
    "start": "139680",
    "end": "141920"
  },
  {
    "text": "at that point you're able to manage",
    "start": "141920",
    "end": "143480"
  },
  {
    "text": "real-time streams of data at virtually",
    "start": "143480",
    "end": "145560"
  },
  {
    "text": "any scale this has been Apache kofka in",
    "start": "145560",
    "end": "148040"
  },
  {
    "text": "100 seconds hit the like button and sub",
    "start": "148040",
    "end": "149879"
  },
  {
    "text": "subscribe for more short videos like",
    "start": "149879",
    "end": "151319"
  },
  {
    "text": "this thanks for watching and I will see",
    "start": "151319",
    "end": "153200"
  },
  {
    "text": "you in the next one",
    "start": "153200",
    "end": "156239"
  }
]