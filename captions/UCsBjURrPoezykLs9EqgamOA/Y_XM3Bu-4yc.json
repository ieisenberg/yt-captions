[
  {
    "text": "[Music]",
    "start": "490",
    "end": "2030"
  },
  {
    "text": "the most exciting thing to happen last",
    "start": "2030",
    "end": "4319"
  },
  {
    "text": "week was the announcement of tensorflow",
    "start": "4319",
    "end": "6420"
  },
  {
    "text": "GS",
    "start": "6420",
    "end": "7410"
  },
  {
    "text": "a javascript library that allows us to",
    "start": "7410",
    "end": "9360"
  },
  {
    "text": "build train and make predictions from",
    "start": "9360",
    "end": "11849"
  },
  {
    "text": "machine learning models directly in the",
    "start": "11849",
    "end": "13620"
  },
  {
    "text": "browser will use tensorflow j/s with",
    "start": "13620",
    "end": "16350"
  },
  {
    "text": "angular to take a hand-drawn digit image",
    "start": "16350",
    "end": "18930"
  },
  {
    "text": "and then predict its actual numeric",
    "start": "18930",
    "end": "20939"
  },
  {
    "text": "value I'm super excited about this",
    "start": "20939",
    "end": "23160"
  },
  {
    "text": "because it opens up a whole new world of",
    "start": "23160",
    "end": "24869"
  },
  {
    "text": "possibilities to combine web development",
    "start": "24869",
    "end": "26910"
  },
  {
    "text": "with machine learning make sure to",
    "start": "26910",
    "end": "29010"
  },
  {
    "text": "subscribe if you're new here and you can",
    "start": "29010",
    "end": "30689"
  },
  {
    "text": "grab the source code from angular",
    "start": "30689",
    "end": "32070"
  },
  {
    "text": "firebase com the first thing we need to",
    "start": "32070",
    "end": "34739"
  },
  {
    "text": "answer is what is tensorflow and the",
    "start": "34739",
    "end": "37320"
  },
  {
    "text": "simple answer is that it's a library for",
    "start": "37320",
    "end": "39300"
  },
  {
    "text": "performing mathematical computations but",
    "start": "39300",
    "end": "41850"
  },
  {
    "text": "it's famous for building deep neural",
    "start": "41850",
    "end": "43350"
  },
  {
    "text": "networks that power some of the most",
    "start": "43350",
    "end": "44940"
  },
  {
    "text": "impressive artificial intelligence",
    "start": "44940",
    "end": "46649"
  },
  {
    "text": "technology that we have in the world",
    "start": "46649",
    "end": "48180"
  },
  {
    "text": "today the sad part of this answer is",
    "start": "48180",
    "end": "50700"
  },
  {
    "text": "that if you don't have a background in",
    "start": "50700",
    "end": "52110"
  },
  {
    "text": "machine learning tensorflow is not going",
    "start": "52110",
    "end": "54090"
  },
  {
    "text": "to be very easy to use or very useful to",
    "start": "54090",
    "end": "56370"
  },
  {
    "text": "you that being said I started out with",
    "start": "56370",
    "end": "58590"
  },
  {
    "text": "zero machine learning knowledge a couple",
    "start": "58590",
    "end": "60120"
  },
  {
    "text": "years ago and it worked my way up to an",
    "start": "60120",
    "end": "62190"
  },
  {
    "text": "expert rake on kaggle which is the hub",
    "start": "62190",
    "end": "64260"
  },
  {
    "text": "for data science competition around the",
    "start": "64260",
    "end": "66330"
  },
  {
    "text": "world if you want to get really good at",
    "start": "66330",
    "end": "68010"
  },
  {
    "text": "machine learning I recommend spending",
    "start": "68010",
    "end": "69479"
  },
  {
    "text": "about half your time with traditional",
    "start": "69479",
    "end": "71400"
  },
  {
    "text": "courses such as Coursera or Google's",
    "start": "71400",
    "end": "73860"
  },
  {
    "text": "machine learning crash course and spend",
    "start": "73860",
    "end": "75990"
  },
  {
    "text": "the other half of your time applying",
    "start": "75990",
    "end": "77310"
  },
  {
    "text": "what you learn in data science",
    "start": "77310",
    "end": "78720"
  },
  {
    "text": "competitions on Kaggle but be careful",
    "start": "78720",
    "end": "81270"
  },
  {
    "text": "because data science competitions can be",
    "start": "81270",
    "end": "83220"
  },
  {
    "text": "very very addicting if you're watching",
    "start": "83220",
    "end": "85590"
  },
  {
    "text": "this video with zero machine learning",
    "start": "85590",
    "end": "87240"
  },
  {
    "text": "background I still want to give you a",
    "start": "87240",
    "end": "88650"
  },
  {
    "text": "high-level overview of how machine",
    "start": "88650",
    "end": "90420"
  },
  {
    "text": "learning models work the typical",
    "start": "90420",
    "end": "92520"
  },
  {
    "text": "narrative goes something like this we",
    "start": "92520",
    "end": "94409"
  },
  {
    "text": "have a set of data and each item in that",
    "start": "94409",
    "end": "96630"
  },
  {
    "text": "data set has a label telling us what it",
    "start": "96630",
    "end": "98759"
  },
  {
    "text": "is in this video we're using a data set",
    "start": "98759",
    "end": "101009"
  },
  {
    "text": "called M nest which is a series of",
    "start": "101009",
    "end": "102869"
  },
  {
    "text": "images of hand drawn digits because",
    "start": "102869",
    "end": "106079"
  },
  {
    "text": "you're most likely a human being it's",
    "start": "106079",
    "end": "107850"
  },
  {
    "text": "easy for you to recognize what these",
    "start": "107850",
    "end": "109439"
  },
  {
    "text": "digits are but to a computer each image",
    "start": "109439",
    "end": "111960"
  },
  {
    "text": "just looks like a matrix of values and",
    "start": "111960",
    "end": "114180"
  },
  {
    "text": "it has no way to discern the context or",
    "start": "114180",
    "end": "116549"
  },
  {
    "text": "actual meaning of the image itself a",
    "start": "116549",
    "end": "118759"
  },
  {
    "text": "typical image recognition convolutional",
    "start": "118759",
    "end": "121680"
  },
  {
    "text": "neural network is going to look at many",
    "start": "121680",
    "end": "123630"
  },
  {
    "text": "samples of these images and attempt to",
    "start": "123630",
    "end": "126149"
  },
  {
    "text": "extract features out that will",
    "start": "126149",
    "end": "128009"
  },
  {
    "text": "distinguish one digit from another the",
    "start": "128009",
    "end": "130319"
  },
  {
    "text": "algorithm starts off completely random",
    "start": "130319",
    "end": "132270"
  },
  {
    "text": "then slowly corrects itself",
    "start": "132270",
    "end": "133770"
  },
  {
    "text": "after seeing more and more samples of",
    "start": "133770",
    "end": "135510"
  },
  {
    "text": "these images so that's a very high-level",
    "start": "135510",
    "end": "138120"
  },
  {
    "text": "overview of how a tensor flow model",
    "start": "138120",
    "end": "140250"
  },
  {
    "text": "might work what I want to show you now",
    "start": "140250",
    "end": "141780"
  },
  {
    "text": "is how we build and train a model and",
    "start": "141780",
    "end": "143880"
  },
  {
    "text": "then make predictions from it in the",
    "start": "143880",
    "end": "145500"
  },
  {
    "text": "browser I'm going to generate a new",
    "start": "145500",
    "end": "147900"
  },
  {
    "text": "angular app with the angular CLI then",
    "start": "147900",
    "end": "150360"
  },
  {
    "text": "we'll CD into the app and install tensor",
    "start": "150360",
    "end": "152670"
  },
  {
    "text": "flow J ass for this first part what I",
    "start": "152670",
    "end": "155160"
  },
  {
    "text": "want to do is show you how to build the",
    "start": "155160",
    "end": "156510"
  },
  {
    "text": "most basic possible tensor flow model",
    "start": "156510",
    "end": "158550"
  },
  {
    "text": "which would just be a linear regression",
    "start": "158550",
    "end": "160470"
  },
  {
    "text": "so we'll feed tensor flow an array of",
    "start": "160470",
    "end": "162600"
  },
  {
    "text": "values that should predict some other",
    "start": "162600",
    "end": "164580"
  },
  {
    "text": "value think of the relationship between",
    "start": "164580",
    "end": "166740"
  },
  {
    "text": "a person's height and weight you should",
    "start": "166740",
    "end": "168600"
  },
  {
    "text": "be able to use their height to roughly",
    "start": "168600",
    "end": "170400"
  },
  {
    "text": "predict their weight we will train the",
    "start": "170400",
    "end": "172800"
  },
  {
    "text": "machine learning model and angular when",
    "start": "172800",
    "end": "174360"
  },
  {
    "text": "this component is initialized and then",
    "start": "174360",
    "end": "176580"
  },
  {
    "text": "when the user enters a new value into",
    "start": "176580",
    "end": "178440"
  },
  {
    "text": "the form field",
    "start": "178440",
    "end": "179160"
  },
  {
    "text": "we'll run a new prediction with that",
    "start": "179160",
    "end": "180960"
  },
  {
    "text": "tensor flow model if you're more of a",
    "start": "180960",
    "end": "183600"
  },
  {
    "text": "visual person the actual data set would",
    "start": "183600",
    "end": "185820"
  },
  {
    "text": "look something like this with blue dots",
    "start": "185820",
    "end": "187980"
  },
  {
    "text": "being our samples and then the red line",
    "start": "187980",
    "end": "190050"
  },
  {
    "text": "being the model that tensorflow",
    "start": "190050",
    "end": "191520"
  },
  {
    "text": "generates let's go ahead and code this",
    "start": "191520",
    "end": "194250"
  },
  {
    "text": "up by opening the app component in",
    "start": "194250",
    "end": "196380"
  },
  {
    "text": "angular then we'll import tensorflow",
    "start": "196380",
    "end": "198630"
  },
  {
    "text": "under the namespace of TF then I'm",
    "start": "198630",
    "end": "201840"
  },
  {
    "text": "setting up a property called linear",
    "start": "201840",
    "end": "203310"
  },
  {
    "text": "model that defines the actual tensor",
    "start": "203310",
    "end": "205680"
  },
  {
    "text": "flow model that will train and make",
    "start": "205680",
    "end": "207330"
  },
  {
    "text": "predictions we're going to use the",
    "start": "207330",
    "end": "209310"
  },
  {
    "text": "sequential API and tensor flow J S which",
    "start": "209310",
    "end": "211950"
  },
  {
    "text": "is a little bit higher level and easier",
    "start": "211950",
    "end": "213780"
  },
  {
    "text": "to work with it's very similar to Karis",
    "start": "213780",
    "end": "216000"
  },
  {
    "text": "if you have a Python background then",
    "start": "216000",
    "end": "218760"
  },
  {
    "text": "I'll also set up a property for the",
    "start": "218760",
    "end": "220290"
  },
  {
    "text": "prediction value so we can show it in",
    "start": "220290",
    "end": "222180"
  },
  {
    "text": "the front end UI in this demo we're only",
    "start": "222180",
    "end": "225060"
  },
  {
    "text": "training some randomly generated static",
    "start": "225060",
    "end": "227280"
  },
  {
    "text": "data so we'll do that as soon as the",
    "start": "227280",
    "end": "229170"
  },
  {
    "text": "component is initialized tensorflow j s",
    "start": "229170",
    "end": "232860"
  },
  {
    "text": "works in promises so it tends to be",
    "start": "232860",
    "end": "235020"
  },
  {
    "text": "really easy to work with in JavaScript",
    "start": "235020",
    "end": "236820"
  },
  {
    "text": "apps we'll set up an asynchronous",
    "start": "236820",
    "end": "238620"
  },
  {
    "text": "function here called train new model",
    "start": "238620",
    "end": "240780"
  },
  {
    "text": "then we'll define an empty model by just",
    "start": "240780",
    "end": "243360"
  },
  {
    "text": "calling TF sequential in this case we're",
    "start": "243360",
    "end": "246300"
  },
  {
    "text": "just performing a linear regression and",
    "start": "246300",
    "end": "248280"
  },
  {
    "text": "we can do that by adding a dense layer",
    "start": "248280",
    "end": "250260"
  },
  {
    "text": "or a fully connected layer that will",
    "start": "250260",
    "end": "253020"
  },
  {
    "text": "output a shape of one and also take an",
    "start": "253020",
    "end": "255540"
  },
  {
    "text": "input with a shape one in larger neural",
    "start": "255540",
    "end": "258480"
  },
  {
    "text": "networks you have multiple layers and",
    "start": "258480",
    "end": "260190"
  },
  {
    "text": "the dense layer keeps all of the neurons",
    "start": "260190",
    "end": "262500"
  },
  {
    "text": "in each layer connected together but",
    "start": "262500",
    "end": "265290"
  },
  {
    "text": "since we're only drawing a single",
    "start": "265290",
    "end": "266520"
  },
  {
    "text": "straight line through the day",
    "start": "266520",
    "end": "267660"
  },
  {
    "text": "we don't really need to worry about that",
    "start": "267660",
    "end": "269220"
  },
  {
    "text": "we just need to define the loss metric",
    "start": "269220",
    "end": "271770"
  },
  {
    "text": "which in this case will be mean squared",
    "start": "271770",
    "end": "274050"
  },
  {
    "text": "error in other words we're just trying",
    "start": "274050",
    "end": "276210"
  },
  {
    "text": "to minimize the mean squared error of",
    "start": "276210",
    "end": "278010"
  },
  {
    "text": "the predictions from the algorithm then",
    "start": "278010",
    "end": "280530"
  },
  {
    "text": "we also define an optimizer which is the",
    "start": "280530",
    "end": "283020"
  },
  {
    "text": "function that determines how we reach",
    "start": "283020",
    "end": "284670"
  },
  {
    "text": "this actual minimum error point SG d",
    "start": "284670",
    "end": "287700"
  },
  {
    "text": "stands for stochastic gradient descent",
    "start": "287700",
    "end": "289620"
  },
  {
    "text": "and there's a number of different",
    "start": "289620",
    "end": "291330"
  },
  {
    "text": "optimizers that you can choose from so",
    "start": "291330",
    "end": "294000"
  },
  {
    "text": "that's actually our entire model right",
    "start": "294000",
    "end": "295710"
  },
  {
    "text": "there now we just need to Train it by",
    "start": "295710",
    "end": "297990"
  },
  {
    "text": "feeding it some data but we need to feed",
    "start": "297990",
    "end": "300480"
  },
  {
    "text": "it that data in the form of a tensor but",
    "start": "300480",
    "end": "302880"
  },
  {
    "text": "you might be asking yourself what the",
    "start": "302880",
    "end": "304500"
  },
  {
    "text": "hell is a tensor for our purposes the",
    "start": "304500",
    "end": "306930"
  },
  {
    "text": "easiest way to think about it is just as",
    "start": "306930",
    "end": "308880"
  },
  {
    "text": "an array for example a one-dimensional",
    "start": "308880",
    "end": "311550"
  },
  {
    "text": "tensor would look the same as an array",
    "start": "311550",
    "end": "313680"
  },
  {
    "text": "of numbers the actual tensor terminology",
    "start": "313680",
    "end": "316230"
  },
  {
    "text": "is not something you really need to get",
    "start": "316230",
    "end": "317790"
  },
  {
    "text": "tripped up with especially when you're",
    "start": "317790",
    "end": "319410"
  },
  {
    "text": "just learning tensor flow as you can see",
    "start": "319410",
    "end": "322050"
  },
  {
    "text": "here we have 1 tensor named excess when",
    "start": "322050",
    "end": "324810"
  },
  {
    "text": "you have a variable named X in machine",
    "start": "324810",
    "end": "326730"
  },
  {
    "text": "learning that means it's your actual",
    "start": "326730",
    "end": "328650"
  },
  {
    "text": "training features for the data set the Y",
    "start": "328650",
    "end": "331380"
  },
  {
    "text": "variable on the other hand is the label",
    "start": "331380",
    "end": "333690"
  },
  {
    "text": "for that data it's the actual thing that",
    "start": "333690",
    "end": "335940"
  },
  {
    "text": "we want our machine learning algorithm",
    "start": "335940",
    "end": "337530"
  },
  {
    "text": "to predict depending on the size of the",
    "start": "337530",
    "end": "339780"
  },
  {
    "text": "data set training the model can take a",
    "start": "339780",
    "end": "341460"
  },
  {
    "text": "long time but in this case we just have",
    "start": "341460",
    "end": "343530"
  },
  {
    "text": "a few values so it's going to happen",
    "start": "343530",
    "end": "344940"
  },
  {
    "text": "very quick and we make that happen by",
    "start": "344940",
    "end": "346890"
  },
  {
    "text": "calling linear model fit with our x and",
    "start": "346890",
    "end": "349410"
  },
  {
    "text": "y data the end result there is that we",
    "start": "349410",
    "end": "352200"
  },
  {
    "text": "have a statistical model that can now",
    "start": "352200",
    "end": "354120"
  },
  {
    "text": "predict values based on this data set",
    "start": "354120",
    "end": "356520"
  },
  {
    "text": "that we've provided to make a prediction",
    "start": "356520",
    "end": "359100"
  },
  {
    "text": "we'll call linear model predict then",
    "start": "359100",
    "end": "361350"
  },
  {
    "text": "pass on the value in the form of a",
    "start": "361350",
    "end": "363210"
  },
  {
    "text": "tensor that's going to return a",
    "start": "363210",
    "end": "365250"
  },
  {
    "text": "prediction in the form of a tensor so",
    "start": "365250",
    "end": "367650"
  },
  {
    "text": "now we just need to convert that tensor",
    "start": "367650",
    "end": "369270"
  },
  {
    "text": "into something that we can use an",
    "start": "369270",
    "end": "370380"
  },
  {
    "text": "angular everything in tensor flow runs",
    "start": "370380",
    "end": "372810"
  },
  {
    "text": "in the context of a session so to get",
    "start": "372810",
    "end": "375270"
  },
  {
    "text": "out the data we actually want we create",
    "start": "375270",
    "end": "377250"
  },
  {
    "text": "an array and then call data sync on the",
    "start": "377250",
    "end": "379860"
  },
  {
    "text": "tensor now we'll switch over to our HTML",
    "start": "379860",
    "end": "382140"
  },
  {
    "text": "and run this linear prediction method",
    "start": "382140",
    "end": "384720"
  },
  {
    "text": "whenever the form value changes on this",
    "start": "384720",
    "end": "386970"
  },
  {
    "text": "HTML form input if we pull up the app in",
    "start": "386970",
    "end": "389910"
  },
  {
    "text": "the browser we should get the results of",
    "start": "389910",
    "end": "391620"
  },
  {
    "text": "our linear regression",
    "start": "391620",
    "end": "392610"
  },
  {
    "text": "if you enter a smaller number the",
    "start": "392610",
    "end": "394770"
  },
  {
    "text": "prediction should decrease if you enter",
    "start": "394770",
    "end": "396750"
  },
  {
    "text": "a larger number it should increase now",
    "start": "396750",
    "end": "399210"
  },
  {
    "text": "that you know the basics let's do",
    "start": "399210",
    "end": "400650"
  },
  {
    "text": "something",
    "start": "400650",
    "end": "400950"
  },
  {
    "text": "a little more complex neural networks",
    "start": "400950",
    "end": "403050"
  },
  {
    "text": "have really revolutionized image",
    "start": "403050",
    "end": "404880"
  },
  {
    "text": "recognition problems in this example",
    "start": "404880",
    "end": "407310"
  },
  {
    "text": "we're going to take an image of a",
    "start": "407310",
    "end": "408810"
  },
  {
    "text": "handwritten digit using an HTML canvas",
    "start": "408810",
    "end": "411540"
  },
  {
    "text": "and then we'll have our neural network",
    "start": "411540",
    "end": "413070"
  },
  {
    "text": "predict what the actual value of that",
    "start": "413070",
    "end": "415530"
  },
  {
    "text": "number is the training process for an",
    "start": "415530",
    "end": "418200"
  },
  {
    "text": "algorithm like this is way too CPU and",
    "start": "418200",
    "end": "420780"
  },
  {
    "text": "memory intensive to run in the browser",
    "start": "420780",
    "end": "422810"
  },
  {
    "text": "but one of the really cool things about",
    "start": "422810",
    "end": "424830"
  },
  {
    "text": "tensorflow j/s is that we can import",
    "start": "424830",
    "end": "427410"
  },
  {
    "text": "models that have been trained in Python",
    "start": "427410",
    "end": "429330"
  },
  {
    "text": "so that means you can build your own",
    "start": "429330",
    "end": "431130"
  },
  {
    "text": "machine learning model on your local",
    "start": "431130",
    "end": "432780"
  },
  {
    "text": "system and then upload it to your web",
    "start": "432780",
    "end": "434790"
  },
  {
    "text": "app so your users can use it on the web",
    "start": "434790",
    "end": "436740"
  },
  {
    "text": "I included my model in the source code",
    "start": "436740",
    "end": "439440"
  },
  {
    "text": "for this project but I recommend going",
    "start": "439440",
    "end": "441120"
  },
  {
    "text": "to kaggle and participating in the digit",
    "start": "441120",
    "end": "443250"
  },
  {
    "text": "recognizer competition using Kerris to",
    "start": "443250",
    "end": "445770"
  },
  {
    "text": "build your own from scratch caris will",
    "start": "445770",
    "end": "448590"
  },
  {
    "text": "allow you to export your trained model",
    "start": "448590",
    "end": "450480"
  },
  {
    "text": "and then tensorflow has a tool that",
    "start": "450480",
    "end": "452730"
  },
  {
    "text": "allows you to convert that model into a",
    "start": "452730",
    "end": "454740"
  },
  {
    "text": "format that can be used specifically by",
    "start": "454740",
    "end": "456720"
  },
  {
    "text": "tensorflow j/s to install that tool you",
    "start": "456720",
    "end": "460650"
  },
  {
    "text": "need to install tensorflow j/s with the",
    "start": "460650",
    "end": "463080"
  },
  {
    "text": "Python package manager pip then it gives",
    "start": "463080",
    "end": "465510"
  },
  {
    "text": "you a command that will take the Charis",
    "start": "465510",
    "end": "467250"
  },
  {
    "text": "file and not only convert it to",
    "start": "467250",
    "end": "468960"
  },
  {
    "text": "tensorflow j/s but it will also shard",
    "start": "468960",
    "end": "471870"
  },
  {
    "text": "the file so you can load it efficiently",
    "start": "471870",
    "end": "473790"
  },
  {
    "text": "on the web for right now I'm just using",
    "start": "473790",
    "end": "475770"
  },
  {
    "text": "the assets directory and angular but",
    "start": "475770",
    "end": "477870"
  },
  {
    "text": "you'd want to use a cloud storage bucket",
    "start": "477870",
    "end": "479520"
  },
  {
    "text": "in the real world now that our model has",
    "start": "479520",
    "end": "481800"
  },
  {
    "text": "been converted to tensorflow I'm going",
    "start": "481800",
    "end": "483960"
  },
  {
    "text": "to go back into the app component and",
    "start": "483960",
    "end": "485670"
  },
  {
    "text": "add a load model method to ng on init",
    "start": "485670",
    "end": "488580"
  },
  {
    "text": "and a quick side note I'm using this",
    "start": "488580",
    "end": "491070"
  },
  {
    "text": "drawable directive to create the HTML",
    "start": "491070",
    "end": "492900"
  },
  {
    "text": "canvas I'm not going to show you that",
    "start": "492900",
    "end": "495330"
  },
  {
    "text": "code but it's in the main repo if you",
    "start": "495330",
    "end": "497160"
  },
  {
    "text": "want to check it out",
    "start": "497160",
    "end": "498060"
  },
  {
    "text": "you'll notice here that this time our",
    "start": "498060",
    "end": "499950"
  },
  {
    "text": "model is type two just a point tensor",
    "start": "499950",
    "end": "501960"
  },
  {
    "text": "flow model that's the lower level API",
    "start": "501960",
    "end": "503970"
  },
  {
    "text": "that's generally a little more difficult",
    "start": "503970",
    "end": "505650"
  },
  {
    "text": "to use if you're a newcomer then this",
    "start": "505650",
    "end": "507690"
  },
  {
    "text": "time our predictions will be an array of",
    "start": "507690",
    "end": "509640"
  },
  {
    "text": "ten different values where each value",
    "start": "509640",
    "end": "512090"
  },
  {
    "text": "represents the probability that that",
    "start": "512090",
    "end": "514560"
  },
  {
    "text": "index is the correct value for the",
    "start": "514560",
    "end": "516539"
  },
  {
    "text": "drawing on the canvas so we can take the",
    "start": "516540",
    "end": "519090"
  },
  {
    "text": "index with the highest probability and",
    "start": "519090",
    "end": "521039"
  },
  {
    "text": "assume that that's the number that was",
    "start": "521040",
    "end": "522630"
  },
  {
    "text": "drawn on the canvas",
    "start": "522630",
    "end": "524060"
  },
  {
    "text": "since our models already pre trained we",
    "start": "524060",
    "end": "526680"
  },
  {
    "text": "can just load it with a simple one-liner",
    "start": "526680",
    "end": "528450"
  },
  {
    "text": "of tensorflow load model but our predict",
    "start": "528450",
    "end": "532410"
  },
  {
    "text": "method is going to be a little more",
    "start": "532410",
    "end": "533850"
  },
  {
    "text": "tricky",
    "start": "533850",
    "end": "534350"
  },
  {
    "text": "the first thing that makes it more",
    "start": "534350",
    "end": "535790"
  },
  {
    "text": "tricky is that we need to think about",
    "start": "535790",
    "end": "537260"
  },
  {
    "text": "memory management neural networks can",
    "start": "537260",
    "end": "539780"
  },
  {
    "text": "use a lot of memory and we want to avoid",
    "start": "539780",
    "end": "541730"
  },
  {
    "text": "memory leaks in our client side app to",
    "start": "541730",
    "end": "544250"
  },
  {
    "text": "do that we can run all of our code",
    "start": "544250",
    "end": "545840"
  },
  {
    "text": "inside this tensorflow tidy method that",
    "start": "545840",
    "end": "548930"
  },
  {
    "text": "will ensure that all of our tensors are",
    "start": "548930",
    "end": "550460"
  },
  {
    "text": "released from memory when that",
    "start": "550460",
    "end": "551840"
  },
  {
    "text": "prediction is finished",
    "start": "551840",
    "end": "553040"
  },
  {
    "text": "the actual image data that we want is",
    "start": "553040",
    "end": "555620"
  },
  {
    "text": "coming from the HTML canvas that were",
    "start": "555620",
    "end": "558230"
  },
  {
    "text": "extracting as the image data type you",
    "start": "558230",
    "end": "561410"
  },
  {
    "text": "can pass on a variety of different types",
    "start": "561410",
    "end": "562970"
  },
  {
    "text": "here and it will convert the image into",
    "start": "562970",
    "end": "565160"
  },
  {
    "text": "a tensor that can be used in the tensor",
    "start": "565160",
    "end": "567440"
  },
  {
    "text": "flow graph in our case this model was",
    "start": "567440",
    "end": "570200"
  },
  {
    "text": "trained with images that were 28 pixels",
    "start": "570200",
    "end": "572510"
  },
  {
    "text": "by 28 pixels with just one color channel",
    "start": "572510",
    "end": "575360"
  },
  {
    "text": "so we need to reshape our data into that",
    "start": "575360",
    "end": "578090"
  },
  {
    "text": "shape the first value here is the batch",
    "start": "578090",
    "end": "580610"
  },
  {
    "text": "size which is going to be 1 because we",
    "start": "580610",
    "end": "582710"
  },
  {
    "text": "just have one image then 28 pixels by 28",
    "start": "582710",
    "end": "585860"
  },
  {
    "text": "pixels and one color channel the Python",
    "start": "585860",
    "end": "589970"
  },
  {
    "text": "model that I trained for this demo is",
    "start": "589970",
    "end": "591590"
  },
  {
    "text": "using an integer data type but",
    "start": "591590",
    "end": "594230"
  },
  {
    "text": "tensorflow requires it to be a",
    "start": "594230",
    "end": "595640"
  },
  {
    "text": "floating-point so we can change that by",
    "start": "595640",
    "end": "597800"
  },
  {
    "text": "calling tensorflow cast because all data",
    "start": "597800",
    "end": "600080"
  },
  {
    "text": "types in a tensor need to be the same so",
    "start": "600080",
    "end": "603020"
  },
  {
    "text": "now that we have our data in the correct",
    "start": "603020",
    "end": "604580"
  },
  {
    "text": "format we can just pass it into our",
    "start": "604580",
    "end": "606710"
  },
  {
    "text": "model and call predict and just like",
    "start": "606710",
    "end": "609320"
  },
  {
    "text": "last time it returns the prediction as a",
    "start": "609320",
    "end": "611300"
  },
  {
    "text": "tensor so we'll convert that to an array",
    "start": "611300",
    "end": "613550"
  },
  {
    "text": "and call data sync in this demo I've set",
    "start": "613550",
    "end": "616910"
  },
  {
    "text": "up my app to run this predict method",
    "start": "616910",
    "end": "618920"
  },
  {
    "text": "every time a new image is drawn into the",
    "start": "618920",
    "end": "621050"
  },
  {
    "text": "canvas it's not a perfect model but it's",
    "start": "621050",
    "end": "623960"
  },
  {
    "text": "about 90% accurate with my handwriting",
    "start": "623960",
    "end": "625910"
  },
  {
    "text": "and you can clone this repo to try it",
    "start": "625910",
    "end": "628730"
  },
  {
    "text": "out for yourself but if you're curious",
    "start": "628730",
    "end": "630740"
  },
  {
    "text": "to you visualize how the neural networks",
    "start": "630740",
    "end": "632570"
  },
  {
    "text": "under the hood I recommend going to the",
    "start": "632570",
    "end": "634430"
  },
  {
    "text": "tensorflow playground this was actually",
    "start": "634430",
    "end": "637190"
  },
  {
    "text": "the original inspiration to tensorflow",
    "start": "637190",
    "end": "639140"
  },
  {
    "text": "j/s and it shows you how neural networks",
    "start": "639140",
    "end": "641540"
  },
  {
    "text": "build complex boundaries around data",
    "start": "641540",
    "end": "643490"
  },
  {
    "text": "sets to make predictions I'm gonna go",
    "start": "643490",
    "end": "645890"
  },
  {
    "text": "ahead and wrap things up there if you",
    "start": "645890",
    "end": "647330"
  },
  {
    "text": "want to see more tensorflow content",
    "start": "647330",
    "end": "649010"
  },
  {
    "text": "please let me know in the comments and",
    "start": "649010",
    "end": "651080"
  },
  {
    "text": "if you want to learn how to build modern",
    "start": "651080",
    "end": "652370"
  },
  {
    "text": "JavaScript apps for any platform",
    "start": "652370",
    "end": "654140"
  },
  {
    "text": "consider becoming a pro member at",
    "start": "654140",
    "end": "656210"
  },
  {
    "text": "angular firebase comm you'll get access",
    "start": "656210",
    "end": "658430"
  },
  {
    "text": "to a huge library of exclusive content",
    "start": "658430",
    "end": "660650"
  },
  {
    "text": "as well as one on one project support",
    "start": "660650",
    "end": "663050"
  },
  {
    "text": "thanks for watching and",
    "start": "663050",
    "end": "664930"
  },
  {
    "text": "see you soon",
    "start": "664930",
    "end": "667440"
  }
]