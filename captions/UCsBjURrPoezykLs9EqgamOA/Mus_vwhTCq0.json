[
  {
    "text": "[Music]",
    "start": "0",
    "end": "6680"
  },
  {
    "text": "javascript is a programming language",
    "start": "6680",
    "end": "8610"
  },
  {
    "text": "that people love to hate a long time ago",
    "start": "8610",
    "end": "11309"
  },
  {
    "text": "developers used to pride themselves on",
    "start": "11309",
    "end": "12870"
  },
  {
    "text": "being back in developers because it was",
    "start": "12870",
    "end": "14759"
  },
  {
    "text": "more challenging and complex javascript",
    "start": "14759",
    "end": "17010"
  },
  {
    "text": "was just a toy for annoying people on",
    "start": "17010",
    "end": "18990"
  },
  {
    "text": "websites but it's 2019 and today we have",
    "start": "18990",
    "end": "23609"
  },
  {
    "text": "tools like the cloud docker and many API",
    "start": "23609",
    "end": "26220"
  },
  {
    "text": "is that abstract way the complexity of",
    "start": "26220",
    "end": "28109"
  },
  {
    "text": "back-end development if you're starting",
    "start": "28109",
    "end": "29849"
  },
  {
    "text": "up a company today there's a good chance",
    "start": "29849",
    "end": "31320"
  },
  {
    "text": "you'll do the majority of your",
    "start": "31320",
    "end": "32369"
  },
  {
    "text": "development on the front end with",
    "start": "32369",
    "end": "34020"
  },
  {
    "text": "JavaScript so today I want to show you",
    "start": "34020",
    "end": "35610"
  },
  {
    "text": "how to write good JavaScript with modern",
    "start": "35610",
    "end": "37410"
  },
  {
    "text": "features and avoid bad JavaScript if",
    "start": "37410",
    "end": "39750"
  },
  {
    "text": "you're just finding me like and",
    "start": "39750",
    "end": "40920"
  },
  {
    "text": "subscribe and if you have your own",
    "start": "40920",
    "end": "42329"
  },
  {
    "text": "JavaScript pro tips let me know in the",
    "start": "42329",
    "end": "43980"
  },
  {
    "text": "comments one lucky comment will win this",
    "start": "43980",
    "end": "45870"
  },
  {
    "text": "one-of-a-kind t-shirt via livestream",
    "start": "45870",
    "end": "47430"
  },
  {
    "text": "next week",
    "start": "47430",
    "end": "49730"
  },
  {
    "text": "so the first thing you need to know is",
    "start": "49730",
    "end": "51899"
  },
  {
    "text": "how to debug your JavaScript like a pro",
    "start": "51899",
    "end": "54059"
  },
  {
    "text": "and the way we do that of course is by",
    "start": "54059",
    "end": "56129"
  },
  {
    "text": "console logging stuff and I'm saying",
    "start": "56129",
    "end": "58140"
  },
  {
    "text": "that with a straight face there are good",
    "start": "58140",
    "end": "59850"
  },
  {
    "text": "ways to console log and bad ways let's",
    "start": "59850",
    "end": "62039"
  },
  {
    "text": "imagine we have three different objects",
    "start": "62039",
    "end": "63390"
  },
  {
    "text": "each one assigned to its own variable",
    "start": "63390",
    "end": "64890"
  },
  {
    "text": "the obvious way to log these is just one",
    "start": "64890",
    "end": "67170"
  },
  {
    "text": "after the other but the main problem is",
    "start": "67170",
    "end": "68939"
  },
  {
    "text": "we don't know the name of the variable",
    "start": "68939",
    "end": "69930"
  },
  {
    "text": "when this gets logged but there's a",
    "start": "69930",
    "end": "71820"
  },
  {
    "text": "trick we can use here called computed",
    "start": "71820",
    "end": "73290"
  },
  {
    "text": "property names where we add the",
    "start": "73290",
    "end": "74520"
  },
  {
    "text": "variables to an object not only does",
    "start": "74520",
    "end": "76590"
  },
  {
    "text": "this reduce the code footprint but it",
    "start": "76590",
    "end": "78090"
  },
  {
    "text": "also tells us exactly which variable",
    "start": "78090",
    "end": "79890"
  },
  {
    "text": "define this data one line of code one",
    "start": "79890",
    "end": "82080"
  },
  {
    "text": "console log and all the information we",
    "start": "82080",
    "end": "84000"
  },
  {
    "text": "need but maybe this data is extra",
    "start": "84000",
    "end": "85950"
  },
  {
    "text": "important so we want to make it stand",
    "start": "85950",
    "end": "87299"
  },
  {
    "text": "out with some custom CSS styling you can",
    "start": "87299",
    "end": "89759"
  },
  {
    "text": "substitute data and also CSS styles by",
    "start": "89759",
    "end": "92070"
  },
  {
    "text": "using a percent sign so we'll add",
    "start": "92070",
    "end": "93810"
  },
  {
    "text": "percent C and then have the second",
    "start": "93810",
    "end": "95460"
  },
  {
    "text": "argument be our actual CSS style and now",
    "start": "95460",
    "end": "98159"
  },
  {
    "text": "we get this bold orange color in the",
    "start": "98159",
    "end": "99810"
  },
  {
    "text": "console one thing you might have noticed",
    "start": "99810",
    "end": "101280"
  },
  {
    "text": "is that the objects all share common",
    "start": "101280",
    "end": "103079"
  },
  {
    "text": "properties so maybe we could display",
    "start": "103079",
    "end": "104909"
  },
  {
    "text": "those as a table this is really useful",
    "start": "104909",
    "end": "106920"
  },
  {
    "text": "when you have an array of objects just",
    "start": "106920",
    "end": "108689"
  },
  {
    "text": "do console table with the array I could",
    "start": "108689",
    "end": "111360"
  },
  {
    "text": "probably do a whole video on console",
    "start": "111360",
    "end": "112799"
  },
  {
    "text": "logging so I'll just show you a couple",
    "start": "112799",
    "end": "114299"
  },
  {
    "text": "more things here if you're benchmarking",
    "start": "114299",
    "end": "115829"
  },
  {
    "text": "performance you can actually keep track",
    "start": "115829",
    "end": "117180"
  },
  {
    "text": "of time in the console will first define",
    "start": "117180",
    "end": "119579"
  },
  {
    "text": "our timer and we'll give it a name of",
    "start": "119579",
    "end": "121200"
  },
  {
    "text": "looper then we'll set up a while loop",
    "start": "121200",
    "end": "123299"
  },
  {
    "text": "and we'll go through a million",
    "start": "123299",
    "end": "124590"
  },
  {
    "text": "iterations in that loop when that's done",
    "start": "124590",
    "end": "126750"
  },
  {
    "text": "we'll run console time and as you can",
    "start": "126750",
    "end": "129119"
  },
  {
    "text": "see here it takes an average of about 4",
    "start": "129119",
    "end": "130950"
  },
  {
    "text": "to 5 milliseconds to loop a million",
    "start": "130950",
    "end": "133140"
  },
  {
    "text": "times",
    "start": "133140",
    "end": "133530"
  },
  {
    "text": "keeping track of time is great but what",
    "start": "133530",
    "end": "135450"
  },
  {
    "text": "if you need to know where a console.log",
    "start": "135450",
    "end": "136860"
  },
  {
    "text": "originated from let's imagine we have a",
    "start": "136860",
    "end": "138930"
  },
  {
    "text": "really important function that deletes",
    "start": "138930",
    "end": "140760"
  },
  {
    "text": "items from our database and we want to",
    "start": "140760",
    "end": "142440"
  },
  {
    "text": "make sure that we don't accidentally",
    "start": "142440",
    "end": "143580"
  },
  {
    "text": "call this method twice you can add a",
    "start": "143580",
    "end": "145740"
  },
  {
    "text": "console trace to your function and it",
    "start": "145740",
    "end": "147569"
  },
  {
    "text": "will give you a stack trace for where it",
    "start": "147569",
    "end": "149190"
  },
  {
    "text": "was called and what defined it if we run",
    "start": "149190",
    "end": "151860"
  },
  {
    "text": "this code we'll get a console log that",
    "start": "151860",
    "end": "153209"
  },
  {
    "text": "tells us the function was defined on",
    "start": "153209",
    "end": "154800"
  },
  {
    "text": "line 35 and then called on lines 37 and",
    "start": "154800",
    "end": "157620"
  },
  {
    "text": "38 so now that you're a debugging expert",
    "start": "157620",
    "end": "161010"
  },
  {
    "text": "I'm going to show you a few different",
    "start": "161010",
    "end": "162090"
  },
  {
    "text": "ways you can make your code as concise",
    "start": "162090",
    "end": "163770"
  },
  {
    "text": "and efficient as possible let's imagine",
    "start": "163770",
    "end": "166050"
  },
  {
    "text": "we have an object with some animal data",
    "start": "166050",
    "end": "167820"
  },
  {
    "text": "and we need a function that will tell us",
    "start": "167820",
    "end": "169620"
  },
  {
    "text": "how to feed the animal this is just a",
    "start": "169620",
    "end": "172500"
  },
  {
    "text": "function that returns a string so inside",
    "start": "172500",
    "end": "174750"
  },
  {
    "text": "that string will interpolate a few",
    "start": "174750",
    "end": "176340"
  },
  {
    "text": "values from that object this doesn't",
    "start": "176340",
    "end": "178890"
  },
  {
    "text": "look too bad but you'll notice that",
    "start": "178890",
    "end": "180330"
  },
  {
    "text": "we're repeating the word animal over and",
    "start": "180330",
    "end": "182220"
  },
  {
    "text": "over again there's a technique called",
    "start": "182220",
    "end": "184350"
  },
  {
    "text": "object D structuring that we can use to",
    "start": "184350",
    "end": "186180"
  },
  {
    "text": "eliminate most of the repetition here if",
    "start": "186180",
    "end": "188519"
  },
  {
    "text": "we have a function that takes an object",
    "start": "188519",
    "end": "189900"
  },
  {
    "text": "but we only need to use a handful of its",
    "start": "189900",
    "end": "192120"
  },
  {
    "text": "properties we can D structure those in",
    "start": "192120",
    "end": "194370"
  },
  {
    "text": "the argument itself we just wrap it in",
    "start": "194370",
    "end": "196650"
  },
  {
    "text": "brackets and then pass in the names of",
    "start": "196650",
    "end": "198750"
  },
  {
    "text": "the object properties that we want to",
    "start": "198750",
    "end": "200370"
  },
  {
    "text": "use so now we can format the same string",
    "start": "200370",
    "end": "203250"
  },
  {
    "text": "but we never actually have to use the",
    "start": "203250",
    "end": "204870"
  },
  {
    "text": "word animal directly this might seem",
    "start": "204870",
    "end": "207000"
  },
  {
    "text": "like a modest gain on this simple",
    "start": "207000",
    "end": "208500"
  },
  {
    "text": "function but when you have a big object",
    "start": "208500",
    "end": "210570"
  },
  {
    "text": "with a lot of properties this can make a",
    "start": "210570",
    "end": "212160"
  },
  {
    "text": "huge difference and I completely",
    "start": "212160",
    "end": "214200"
  },
  {
    "text": "understand that some people don't like",
    "start": "214200",
    "end": "215670"
  },
  {
    "text": "that bracket syntax in the object",
    "start": "215670",
    "end": "217500"
  },
  {
    "text": "argument so there's actually another way",
    "start": "217500",
    "end": "219120"
  },
  {
    "text": "we can do this which is just as good",
    "start": "219120",
    "end": "220799"
  },
  {
    "text": "this time we pass in the animal object",
    "start": "220799",
    "end": "222989"
  },
  {
    "text": "like we did originally but then we set",
    "start": "222989",
    "end": "224850"
  },
  {
    "text": "up a variable that has the names of the",
    "start": "224850",
    "end": "226709"
  },
  {
    "text": "properties in that object set equal to",
    "start": "226709",
    "end": "228900"
  },
  {
    "text": "the object and now we can use those",
    "start": "228900",
    "end": "230790"
  },
  {
    "text": "properties like variables throughout the",
    "start": "230790",
    "end": "232620"
  },
  {
    "text": "function and this tends to be the better",
    "start": "232620",
    "end": "234420"
  },
  {
    "text": "way to go if you have multiple objects",
    "start": "234420",
    "end": "236250"
  },
  {
    "text": "2d structure and a single function the",
    "start": "236250",
    "end": "238829"
  },
  {
    "text": "next thing we'll look at is template",
    "start": "238829",
    "end": "240299"
  },
  {
    "text": "literals which we've already been using",
    "start": "240299",
    "end": "241709"
  },
  {
    "text": "in the code but there's more to talk",
    "start": "241709",
    "end": "243660"
  },
  {
    "text": "about here when I first started",
    "start": "243660",
    "end": "245220"
  },
  {
    "text": "programming about 10 years ago",
    "start": "245220",
    "end": "246480"
  },
  {
    "text": "jQuery was the cool thing in JavaScript",
    "start": "246480",
    "end": "248190"
  },
  {
    "text": "kind of like react is today but",
    "start": "248190",
    "end": "250799"
  },
  {
    "text": "unfortunately it didn't have all of the",
    "start": "250799",
    "end": "252359"
  },
  {
    "text": "awesome things that we have in",
    "start": "252359",
    "end": "253470"
  },
  {
    "text": "JavaScript now for example you would see",
    "start": "253470",
    "end": "255660"
  },
  {
    "text": "a lot of string concatenation that looks",
    "start": "255660",
    "end": "257700"
  },
  {
    "text": "like this where you have a variable plus",
    "start": "257700",
    "end": "259799"
  },
  {
    "text": "a string and you have to manage the",
    "start": "259799",
    "end": "261539"
  },
  {
    "text": "spaces in between plus an expression",
    "start": "261539",
    "end": "263909"
  },
  {
    "text": "plus a whole bunch of other stuff this",
    "start": "263909",
    "end": "266070"
  },
  {
    "text": "type of code is",
    "start": "266070",
    "end": "267000"
  },
  {
    "text": "incredibly annoying to deal with but",
    "start": "267000",
    "end": "268560"
  },
  {
    "text": "template literals in modern JavaScript",
    "start": "268560",
    "end": "270210"
  },
  {
    "text": "solve this problem completely",
    "start": "270210",
    "end": "271980"
  },
  {
    "text": "instead of concatenating values together",
    "start": "271980",
    "end": "274200"
  },
  {
    "text": "we can actually interpolate them",
    "start": "274200",
    "end": "275910"
  },
  {
    "text": "directly into the string you can do this",
    "start": "275910",
    "end": "278070"
  },
  {
    "text": "by defining your string with backticks",
    "start": "278070",
    "end": "279780"
  },
  {
    "text": "and then use dollar sign brackets and",
    "start": "279780",
    "end": "282150"
  },
  {
    "text": "then whatever variable or expression you",
    "start": "282150",
    "end": "284250"
  },
  {
    "text": "want inside up there so we'll go ahead",
    "start": "284250",
    "end": "286320"
  },
  {
    "text": "and grab the properties we need with",
    "start": "286320",
    "end": "287760"
  },
  {
    "text": "object D structuring that we learned",
    "start": "287760",
    "end": "289410"
  },
  {
    "text": "just a minute ago",
    "start": "289410",
    "end": "290160"
  },
  {
    "text": "and then we'll interpolate those into",
    "start": "290160",
    "end": "292020"
  },
  {
    "text": "the string itself which is a lot more",
    "start": "292020",
    "end": "293700"
  },
  {
    "text": "readable and a lot easier to maintain",
    "start": "293700",
    "end": "295370"
  },
  {
    "text": "but you can actually take things a step",
    "start": "295370",
    "end": "297360"
  },
  {
    "text": "further and build strings in a purely",
    "start": "297360",
    "end": "299669"
  },
  {
    "text": "functional way so we'll write a function",
    "start": "299669",
    "end": "302130"
  },
  {
    "text": "here called horse age that takes in",
    "start": "302130",
    "end": "304230"
  },
  {
    "text": "array of strings as the first argument",
    "start": "304230",
    "end": "305850"
  },
  {
    "text": "and then it can take whatever other",
    "start": "305850",
    "end": "307620"
  },
  {
    "text": "arguments that wants after that we can",
    "start": "307620",
    "end": "309840"
  },
  {
    "text": "look at the arguments to this function",
    "start": "309840",
    "end": "310980"
  },
  {
    "text": "and use them to compose a string so here",
    "start": "310980",
    "end": "314460"
  },
  {
    "text": "we're going to look at the age of the",
    "start": "314460",
    "end": "315720"
  },
  {
    "text": "animal and if it's older than five we'll",
    "start": "315720",
    "end": "317520"
  },
  {
    "text": "say it's old otherwise we'll say it's",
    "start": "317520",
    "end": "319169"
  },
  {
    "text": "young and the last thing we'll do is",
    "start": "319169",
    "end": "321090"
  },
  {
    "text": "return the actual value of the string",
    "start": "321090",
    "end": "323010"
  },
  {
    "text": "that's a pretty standard looking",
    "start": "323010",
    "end": "324660"
  },
  {
    "text": "function but the interesting thing here",
    "start": "324660",
    "end": "326850"
  },
  {
    "text": "is that instead of passing a regular",
    "start": "326850",
    "end": "328680"
  },
  {
    "text": "argument to this function we can",
    "start": "328680",
    "end": "330270"
  },
  {
    "text": "actually just attach it to a template",
    "start": "330270",
    "end": "332250"
  },
  {
    "text": "literal and it will parse the arguments",
    "start": "332250",
    "end": "334260"
  },
  {
    "text": "in it this might seem kind of weird at",
    "start": "334260",
    "end": "336090"
  },
  {
    "text": "first but instead of doing parentheses",
    "start": "336090",
    "end": "337890"
  },
  {
    "text": "with the arguments we'll just attach our",
    "start": "337890",
    "end": "339870"
  },
  {
    "text": "template literal and it will parse all",
    "start": "339870",
    "end": "342060"
  },
  {
    "text": "of the string segments as an array of",
    "start": "342060",
    "end": "344100"
  },
  {
    "text": "strings as the first argument to the",
    "start": "344100",
    "end": "345960"
  },
  {
    "text": "function that we defined then it will",
    "start": "345960",
    "end": "347790"
  },
  {
    "text": "handle all the other arguments in the",
    "start": "347790",
    "end": "349500"
  },
  {
    "text": "order in which they appear inside of the",
    "start": "349500",
    "end": "351270"
  },
  {
    "text": "dollar sign brackets in other words you",
    "start": "351270",
    "end": "353669"
  },
  {
    "text": "can take a single argument and use it to",
    "start": "353669",
    "end": "355830"
  },
  {
    "text": "compose multiple values in the return",
    "start": "355830",
    "end": "357810"
  },
  {
    "text": "string this can be a very powerful",
    "start": "357810",
    "end": "359490"
  },
  {
    "text": "concept for templating and it's actually",
    "start": "359490",
    "end": "361860"
  },
  {
    "text": "used in the polymer project now via a",
    "start": "361860",
    "end": "363900"
  },
  {
    "text": "library called lit HTML so now that we",
    "start": "363900",
    "end": "368040"
  },
  {
    "text": "know how to work with strings we're",
    "start": "368040",
    "end": "369150"
  },
  {
    "text": "going to move on to the spread syntax to",
    "start": "369150",
    "end": "371190"
  },
  {
    "text": "work with objects and arrays let's",
    "start": "371190",
    "end": "373950"
  },
  {
    "text": "imagine we have one object for a Pokemon",
    "start": "373950",
    "end": "375990"
  },
  {
    "text": "and the other one for the stats that",
    "start": "375990",
    "end": "377880"
  },
  {
    "text": "define its various attributes let's say",
    "start": "377880",
    "end": "380460"
  },
  {
    "text": "we want to assign the properties from",
    "start": "380460",
    "end": "381960"
  },
  {
    "text": "the stats object to the Pikachu object",
    "start": "381960",
    "end": "384300"
  },
  {
    "text": "one way to do that is to just redefine",
    "start": "384300",
    "end": "386940"
  },
  {
    "text": "them one by one on the original Pikachu",
    "start": "386940",
    "end": "389220"
  },
  {
    "text": "object for one this is just really ugly",
    "start": "389220",
    "end": "391830"
  },
  {
    "text": "and verbose but we're also mutating the",
    "start": "391830",
    "end": "394290"
  },
  {
    "text": "original object when we most likely want",
    "start": "394290",
    "end": "396570"
  },
  {
    "text": "to create a new immutable object because",
    "start": "396570",
    "end": "399660"
  },
  {
    "text": "let's say that our Pokemon",
    "start": "399660",
    "end": "400900"
  },
  {
    "text": "levels up over time we want to represent",
    "start": "400900",
    "end": "402910"
  },
  {
    "text": "each level up as its own object we could",
    "start": "402910",
    "end": "406030"
  },
  {
    "text": "use object to sign here and take the",
    "start": "406030",
    "end": "408070"
  },
  {
    "text": "original object and merge it in with the",
    "start": "408070",
    "end": "409930"
  },
  {
    "text": "stats and this will merge them together",
    "start": "409930",
    "end": "411789"
  },
  {
    "text": "from left to right or if we just wanted",
    "start": "411789",
    "end": "414400"
  },
  {
    "text": "to update a single property we could add",
    "start": "414400",
    "end": "416259"
  },
  {
    "text": "an object with that property in it this",
    "start": "416259",
    "end": "419020"
  },
  {
    "text": "isn't too bad but there's a more concise",
    "start": "419020",
    "end": "420759"
  },
  {
    "text": "way to do this with the spread syntax by",
    "start": "420759",
    "end": "423610"
  },
  {
    "text": "creating a new object and placing our",
    "start": "423610",
    "end": "425650"
  },
  {
    "text": "existing objects in it with three dots",
    "start": "425650",
    "end": "427419"
  },
  {
    "text": "in front of them it will compose a new",
    "start": "427419",
    "end": "429220"
  },
  {
    "text": "object from left to right so the",
    "start": "429220",
    "end": "431440"
  },
  {
    "text": "property is farthest to the right will",
    "start": "431440",
    "end": "433060"
  },
  {
    "text": "have the priority again this is mostly",
    "start": "433060",
    "end": "435430"
  },
  {
    "text": "just syntactic sugar and it just makes",
    "start": "435430",
    "end": "437470"
  },
  {
    "text": "your code more readable and easier to",
    "start": "437470",
    "end": "439270"
  },
  {
    "text": "maintain and it's also possible to use",
    "start": "439270",
    "end": "441490"
  },
  {
    "text": "the spread syntax on arrays so let's",
    "start": "441490",
    "end": "443800"
  },
  {
    "text": "imagine we have an array of strings and",
    "start": "443800",
    "end": "445389"
  },
  {
    "text": "we need to push additional items to this",
    "start": "445389",
    "end": "447610"
  },
  {
    "text": "array the old-school way to do this",
    "start": "447610",
    "end": "449740"
  },
  {
    "text": "would be to just push new items to the",
    "start": "449740",
    "end": "451419"
  },
  {
    "text": "array one by one but in today's world we",
    "start": "451419",
    "end": "453789"
  },
  {
    "text": "can reduce these three lines of code to",
    "start": "453789",
    "end": "455260"
  },
  {
    "text": "just one by defining an array with the",
    "start": "455260",
    "end": "457300"
  },
  {
    "text": "new items and in the spread syntax on",
    "start": "457300",
    "end": "459699"
  },
  {
    "text": "the original array if we add the three",
    "start": "459699",
    "end": "462370"
  },
  {
    "text": "dots to the beginning then it's the",
    "start": "462370",
    "end": "463810"
  },
  {
    "text": "equivalent of doing an array push",
    "start": "463810",
    "end": "465639"
  },
  {
    "text": "because it will append the new items to",
    "start": "465639",
    "end": "468039"
  },
  {
    "text": "the end of the array but the nice thing",
    "start": "468039",
    "end": "469630"
  },
  {
    "text": "is we could just add this to the end of",
    "start": "469630",
    "end": "471400"
  },
  {
    "text": "the array and then we have the",
    "start": "471400",
    "end": "472510"
  },
  {
    "text": "equivalent of a race shift and we might",
    "start": "472510",
    "end": "475090"
  },
  {
    "text": "even take the original values and just",
    "start": "475090",
    "end": "476860"
  },
  {
    "text": "splice them in the middle of the array",
    "start": "476860",
    "end": "478300"
  },
  {
    "text": "giving us even more flexibility and this",
    "start": "478300",
    "end": "481030"
  },
  {
    "text": "code brings back some memories you see",
    "start": "481030",
    "end": "482710"
  },
  {
    "text": "this little trailing comma here this",
    "start": "482710",
    "end": "484510"
  },
  {
    "text": "used to be the kind of thing that would",
    "start": "484510",
    "end": "485830"
  },
  {
    "text": "break an entire JavaScript program and",
    "start": "485830",
    "end": "487930"
  },
  {
    "text": "be really difficult to figure out but",
    "start": "487930",
    "end": "490240"
  },
  {
    "text": "luckily in modern JavaScript it just",
    "start": "490240",
    "end": "492190"
  },
  {
    "text": "works and it's actually kind of",
    "start": "492190",
    "end": "493389"
  },
  {
    "text": "considered a good practice because you",
    "start": "493389",
    "end": "494979"
  },
  {
    "text": "can reduce the number of lines that",
    "start": "494979",
    "end": "496690"
  },
  {
    "text": "change when you do get commits now it's",
    "start": "496690",
    "end": "499690"
  },
  {
    "text": "time to move on to loops let's imagine",
    "start": "499690",
    "end": "501639"
  },
  {
    "text": "we have an array of numbers here that",
    "start": "501639",
    "end": "503560"
  },
  {
    "text": "represent the order totals that we've",
    "start": "503560",
    "end": "505510"
  },
  {
    "text": "had throughout the day in our app now",
    "start": "505510",
    "end": "507070"
  },
  {
    "text": "let's say we need to compute some values",
    "start": "507070",
    "end": "509320"
  },
  {
    "text": "based on this array such as the order",
    "start": "509320",
    "end": "511210"
  },
  {
    "text": "total maybe we need to add some tax to",
    "start": "511210",
    "end": "513400"
  },
  {
    "text": "each one and filter out the high value",
    "start": "513400",
    "end": "515469"
  },
  {
    "text": "orders to be reviewed by a manager one",
    "start": "515469",
    "end": "517810"
  },
  {
    "text": "option is to just use a classic for loop",
    "start": "517810",
    "end": "519880"
  },
  {
    "text": "like you'll find in pretty much every",
    "start": "519880",
    "end": "521260"
  },
  {
    "text": "programming language we have an integer",
    "start": "521260",
    "end": "523360"
  },
  {
    "text": "that starts at zero while that integer",
    "start": "523360",
    "end": "525250"
  },
  {
    "text": "is less than the orders length we will",
    "start": "525250",
    "end": "527260"
  },
  {
    "text": "increment it by one",
    "start": "527260",
    "end": "528490"
  },
  {
    "text": "personally I hate loops that look like",
    "start": "528490",
    "end": "530440"
  },
  {
    "text": "this and I almost never use them in",
    "start": "530440",
    "end": "532120"
  },
  {
    "text": "JavaScript but while we're in the loop",
    "start": "532120",
    "end": "533920"
  },
  {
    "text": "we can start computing",
    "start": "533920",
    "end": "534850"
  },
  {
    "text": "values for the total we will just do",
    "start": "534850",
    "end": "537009"
  },
  {
    "text": "plus equals with the order total then to",
    "start": "537009",
    "end": "539800"
  },
  {
    "text": "create a new array with the tax added to",
    "start": "539800",
    "end": "542110"
  },
  {
    "text": "it we'll go ahead and take the order",
    "start": "542110",
    "end": "543819"
  },
  {
    "text": "amount and multiply it by 1.1 to add 10%",
    "start": "543819",
    "end": "546579"
  },
  {
    "text": "tax then if we have order values that",
    "start": "546579",
    "end": "549220"
  },
  {
    "text": "are greater than 100 we'll go ahead and",
    "start": "549220",
    "end": "551110"
  },
  {
    "text": "add those to the high value order array",
    "start": "551110",
    "end": "553389"
  },
  {
    "text": "this code is a very ugly and B it's",
    "start": "553389",
    "end": "556630"
  },
  {
    "text": "mutating values that might make our code",
    "start": "556630",
    "end": "558519"
  },
  {
    "text": "a little more unpredictable luckily we",
    "start": "558519",
    "end": "560949"
  },
  {
    "text": "can reduce this down to just three lines",
    "start": "560949",
    "end": "562329"
  },
  {
    "text": "of code by using modern JavaScript array",
    "start": "562329",
    "end": "564519"
  },
  {
    "text": "methods if we want to take an array and",
    "start": "564519",
    "end": "566829"
  },
  {
    "text": "then have it accumulate to a value that",
    "start": "566829",
    "end": "568779"
  },
  {
    "text": "equals say a total amount we can use",
    "start": "568779",
    "end": "571089"
  },
  {
    "text": "array reduce it takes a callback",
    "start": "571089",
    "end": "573880"
  },
  {
    "text": "function as the argument where the first",
    "start": "573880",
    "end": "575860"
  },
  {
    "text": "argument is the accumulated value and",
    "start": "575860",
    "end": "577990"
  },
  {
    "text": "the second argument is the current value",
    "start": "577990",
    "end": "580149"
  },
  {
    "text": "in the loop so if we want to sum up all",
    "start": "580149",
    "end": "582459"
  },
  {
    "text": "of the items in the array we can just do",
    "start": "582459",
    "end": "584019"
  },
  {
    "text": "the accumulated values plus the current",
    "start": "584019",
    "end": "585850"
  },
  {
    "text": "value and when the loop finishes that",
    "start": "585850",
    "end": "587889"
  },
  {
    "text": "will give us the total of all elements",
    "start": "587889",
    "end": "589720"
  },
  {
    "text": "in that array mapping and filtering",
    "start": "589720",
    "end": "592180"
  },
  {
    "text": "values is even easier if we want to add",
    "start": "592180",
    "end": "594610"
  },
  {
    "text": "tax to all the items in the array we can",
    "start": "594610",
    "end": "596860"
  },
  {
    "text": "just take the values in the array then",
    "start": "596860",
    "end": "598720"
  },
  {
    "text": "map them to their value times 1.1 and",
    "start": "598720",
    "end": "601420"
  },
  {
    "text": "lastly we can use filter to create an",
    "start": "601420",
    "end": "603759"
  },
  {
    "text": "array that only has the values greater",
    "start": "603759",
    "end": "605560"
  },
  {
    "text": "than 100 in it whenever the callback",
    "start": "605560",
    "end": "608290"
  },
  {
    "text": "function equals true it's going to allow",
    "start": "608290",
    "end": "610630"
  },
  {
    "text": "a value through so in other words if the",
    "start": "610630",
    "end": "612519"
  },
  {
    "text": "value is greater than 100 it will allow",
    "start": "612519",
    "end": "614589"
  },
  {
    "text": "that value through to the new array I",
    "start": "614589",
    "end": "617459"
  },
  {
    "text": "wanted to save the best for last and",
    "start": "617459",
    "end": "620050"
  },
  {
    "text": "that of course is async/await let's",
    "start": "620050",
    "end": "623079"
  },
  {
    "text": "create a method called random that",
    "start": "623079",
    "end": "624610"
  },
  {
    "text": "returns a promise that resolves to a",
    "start": "624610",
    "end": "626589"
  },
  {
    "text": "random number asynchronously now let's",
    "start": "626589",
    "end": "629019"
  },
  {
    "text": "imagine that we want to retrieve three",
    "start": "629019",
    "end": "630819"
  },
  {
    "text": "different asynchronous numbers one after",
    "start": "630819",
    "end": "632860"
  },
  {
    "text": "the other and then add them all together",
    "start": "632860",
    "end": "634360"
  },
  {
    "text": "at the end that might seem like a silly",
    "start": "634360",
    "end": "636459"
  },
  {
    "text": "example but that's actually how things",
    "start": "636459",
    "end": "638259"
  },
  {
    "text": "work a lot of times in the real world",
    "start": "638259",
    "end": "639790"
  },
  {
    "text": "when you have to retrieve one item from",
    "start": "639790",
    "end": "641470"
  },
  {
    "text": "the database get some data retrieving",
    "start": "641470",
    "end": "643449"
  },
  {
    "text": "another item from an API and so on with",
    "start": "643449",
    "end": "646209"
  },
  {
    "text": "promises you wait for an asynchronous",
    "start": "646209",
    "end": "647949"
  },
  {
    "text": "value to resolve and then you handle it",
    "start": "647949",
    "end": "650050"
  },
  {
    "text": "with a callback function inside of then",
    "start": "650050",
    "end": "651970"
  },
  {
    "text": "once you have your data you can return",
    "start": "651970",
    "end": "654250"
  },
  {
    "text": "another promise and then chain another",
    "start": "654250",
    "end": "656199"
  },
  {
    "text": "then call back to it and continue this",
    "start": "656199",
    "end": "658269"
  },
  {
    "text": "pattern on for as long as you need to",
    "start": "658269",
    "end": "660279"
  },
  {
    "text": "you end up with this ridiculous looking",
    "start": "660279",
    "end": "661930"
  },
  {
    "text": "code where you keep saying and then",
    "start": "661930",
    "end": "663900"
  },
  {
    "text": "and then and then but fortunately",
    "start": "663900",
    "end": "671640"
  },
  {
    "text": "there's a really nice solution to this",
    "start": "671640",
    "end": "673230"
  },
  {
    "text": "which is async/await",
    "start": "673230",
    "end": "674720"
  },
  {
    "text": "basically it allows us to express a",
    "start": "674720",
    "end": "677310"
  },
  {
    "text": "singer s code in a synchronous format we",
    "start": "677310",
    "end": "680790"
  },
  {
    "text": "can come down here and rewrite our",
    "start": "680790",
    "end": "682170"
  },
  {
    "text": "promise chain the only difference is",
    "start": "682170",
    "end": "683940"
  },
  {
    "text": "adding async in front of the function",
    "start": "683940",
    "end": "685710"
  },
  {
    "text": "which will force it to return a promise",
    "start": "685710",
    "end": "688220"
  },
  {
    "text": "but the real benefit here is that we can",
    "start": "688220",
    "end": "690810"
  },
  {
    "text": "use a weight in front of our promises",
    "start": "690810",
    "end": "692520"
  },
  {
    "text": "and have them resolve to an actual",
    "start": "692520",
    "end": "694590"
  },
  {
    "text": "variable value so instead of using those",
    "start": "694590",
    "end": "697590"
  },
  {
    "text": "then callbacks we can just say Const",
    "start": "697590",
    "end": "699510"
  },
  {
    "text": "first equals await random and do the",
    "start": "699510",
    "end": "702150"
  },
  {
    "text": "same thing for the second and third",
    "start": "702150",
    "end": "703500"
  },
  {
    "text": "number and now it's much easier to read",
    "start": "703500",
    "end": "706650"
  },
  {
    "text": "and understand this code because we can",
    "start": "706650",
    "end": "708210"
  },
  {
    "text": "just go line by line and see that we're",
    "start": "708210",
    "end": "709920"
  },
  {
    "text": "waiting one number awaiting another",
    "start": "709920",
    "end": "711450"
  },
  {
    "text": "number and so on",
    "start": "711450",
    "end": "712710"
  },
  {
    "text": "a sync wait is one of the most awesome",
    "start": "712710",
    "end": "715020"
  },
  {
    "text": "things to ever happen to JavaScript and",
    "start": "715020",
    "end": "717120"
  },
  {
    "text": "it really deserves its own video right",
    "start": "717120",
    "end": "719430"
  },
  {
    "text": "now we're out of time but in the future",
    "start": "719430",
    "end": "720870"
  },
  {
    "text": "I'll show you some of the cool things",
    "start": "720870",
    "end": "721830"
  },
  {
    "text": "you can do with it like use it in",
    "start": "721830",
    "end": "723360"
  },
  {
    "text": "conditional statements or use it in for",
    "start": "723360",
    "end": "725460"
  },
  {
    "text": "loops and things like that I'm gonna go",
    "start": "725460",
    "end": "727410"
  },
  {
    "text": "ahead and wrap things up there if this",
    "start": "727410",
    "end": "728820"
  },
  {
    "text": "video helped you please like and",
    "start": "728820",
    "end": "730140"
  },
  {
    "text": "subscribe and make sure to check out the",
    "start": "730140",
    "end": "731850"
  },
  {
    "text": "livestream next week to see if you want",
    "start": "731850",
    "end": "733350"
  },
  {
    "text": "some free swag and if you're serious",
    "start": "733350",
    "end": "735090"
  },
  {
    "text": "about building apps consider becoming a",
    "start": "735090",
    "end": "736770"
  },
  {
    "text": "pro member at angular firebase comm",
    "start": "736770",
    "end": "738870"
  },
  {
    "text": "you'll get all kinds of exclusive",
    "start": "738870",
    "end": "740460"
  },
  {
    "text": "content designed to help you build and",
    "start": "740460",
    "end": "742320"
  },
  {
    "text": "ship your app faster thanks for watching",
    "start": "742320",
    "end": "744510"
  },
  {
    "text": "and I'll talk to you soon",
    "start": "744510",
    "end": "747710"
  }
]