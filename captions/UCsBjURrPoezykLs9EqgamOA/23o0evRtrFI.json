[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "4670"
  },
  {
    "text": "components are like the LEGO pieces of",
    "start": "6170",
    "end": "8400"
  },
  {
    "text": "an angular application if you don't know",
    "start": "8400",
    "end": "10200"
  },
  {
    "text": "how to put them together properly you're",
    "start": "10200",
    "end": "11730"
  },
  {
    "text": "not going to be able to build anything",
    "start": "11730",
    "end": "12780"
  },
  {
    "text": "cool over the next 10 minutes or so I'll",
    "start": "12780",
    "end": "14969"
  },
  {
    "text": "show you all of the basics and angular",
    "start": "14969",
    "end": "16740"
  },
  {
    "text": "components and how to piece them",
    "start": "16740",
    "end": "18390"
  },
  {
    "text": "together in an application",
    "start": "18390",
    "end": "19859"
  },
  {
    "text": "this video is beginner level so if you",
    "start": "19859",
    "end": "21900"
  },
  {
    "text": "know a little bit about JavaScript and",
    "start": "21900",
    "end": "23460"
  },
  {
    "text": "web development you should be okay if",
    "start": "23460",
    "end": "25619"
  },
  {
    "text": "you're new to the channel make sure to",
    "start": "25619",
    "end": "26849"
  },
  {
    "text": "LIKE and subscribe and grab the full",
    "start": "26849",
    "end": "28529"
  },
  {
    "text": "write-up from angular firebase com the",
    "start": "28529",
    "end": "31080"
  },
  {
    "text": "first question we need to answer is what",
    "start": "31080",
    "end": "32910"
  },
  {
    "text": "is a component in the first place and I",
    "start": "32910",
    "end": "35160"
  },
  {
    "text": "think the most simple answer to this",
    "start": "35160",
    "end": "36450"
  },
  {
    "text": "question is that it's just a controller",
    "start": "36450",
    "end": "38370"
  },
  {
    "text": "for the user interface as a developer",
    "start": "38370",
    "end": "41070"
  },
  {
    "text": "you write components to control how your",
    "start": "41070",
    "end": "42840"
  },
  {
    "text": "app is experienced by end-users to show",
    "start": "42840",
    "end": "45899"
  },
  {
    "start": "45000",
    "end": "120000"
  },
  {
    "text": "you this in practice I'm opening a brand",
    "start": "45899",
    "end": "47789"
  },
  {
    "text": "new angular 6 app that was generated",
    "start": "47789",
    "end": "49829"
  },
  {
    "text": "with the CLI then I'm generating a new",
    "start": "49829",
    "end": "52410"
  },
  {
    "text": "component called home which you'll",
    "start": "52410",
    "end": "54510"
  },
  {
    "text": "notice creates four different files in",
    "start": "54510",
    "end": "56129"
  },
  {
    "text": "the app directory the vast majority of",
    "start": "56129",
    "end": "58530"
  },
  {
    "text": "the logic that you'll write will be in",
    "start": "58530",
    "end": "60059"
  },
  {
    "text": "the home component ES file the component",
    "start": "60059",
    "end": "63329"
  },
  {
    "text": "itself is just a typescript class but it",
    "start": "63329",
    "end": "65250"
  },
  {
    "text": "uses this component decorator to",
    "start": "65250",
    "end": "66900"
  },
  {
    "text": "sprinkle in some angular magic the most",
    "start": "66900",
    "end": "69420"
  },
  {
    "text": "important thing is that it allows us to",
    "start": "69420",
    "end": "71040"
  },
  {
    "text": "bind data from this typescript file to",
    "start": "71040",
    "end": "73229"
  },
  {
    "text": "the HTML template the first thing I want",
    "start": "73229",
    "end": "75600"
  },
  {
    "text": "to show you is how to bind typescript",
    "start": "75600",
    "end": "77220"
  },
  {
    "text": "code to your HTML let's define a",
    "start": "77220",
    "end": "79439"
  },
  {
    "text": "property on this class called clicked",
    "start": "79439",
    "end": "81030"
  },
  {
    "text": "that defaults to false now let's go into",
    "start": "81030",
    "end": "83909"
  },
  {
    "text": "the HTML and let's imagine we have a",
    "start": "83909",
    "end": "85590"
  },
  {
    "text": "button that we want to disable after",
    "start": "85590",
    "end": "87570"
  },
  {
    "text": "it's been clicked we combined our",
    "start": "87570",
    "end": "89460"
  },
  {
    "text": "typescript data to this attribute in",
    "start": "89460",
    "end": "91380"
  },
  {
    "text": "HTML by wrapping it in square brackets",
    "start": "91380",
    "end": "93890"
  },
  {
    "text": "disabled isn't something angular",
    "start": "93890",
    "end": "95729"
  },
  {
    "text": "provides it's an actual attribute on the",
    "start": "95729",
    "end": "97680"
  },
  {
    "text": "HTML element which I'm looking at here",
    "start": "97680",
    "end": "99810"
  },
  {
    "text": "in the Mozilla documentation the special",
    "start": "99810",
    "end": "102630"
  },
  {
    "text": "thing about angular is that we can wrap",
    "start": "102630",
    "end": "103950"
  },
  {
    "text": "this attribute in square brackets and",
    "start": "103950",
    "end": "105450"
  },
  {
    "text": "then bind it to our type script so",
    "start": "105450",
    "end": "107970"
  },
  {
    "text": "instead of just passing it a boolean",
    "start": "107970",
    "end": "109409"
  },
  {
    "text": "value like false we can actually pass it",
    "start": "109409",
    "end": "111329"
  },
  {
    "text": "our clicked property which we can then",
    "start": "111329",
    "end": "112920"
  },
  {
    "text": "toggle on our typescript as needed it's",
    "start": "112920",
    "end": "115290"
  },
  {
    "text": "currently set to false so we should be",
    "start": "115290",
    "end": "116790"
  },
  {
    "text": "able to serve our app and the button",
    "start": "116790",
    "end": "118320"
  },
  {
    "text": "should be clickable which it is if we go",
    "start": "118320",
    "end": "121049"
  },
  {
    "start": "120000",
    "end": "165000"
  },
  {
    "text": "into typescript and change our clicked",
    "start": "121049",
    "end": "122820"
  },
  {
    "text": "property to true you'll see that the",
    "start": "122820",
    "end": "124229"
  },
  {
    "text": "button is now disabled and unclick Abul",
    "start": "124229",
    "end": "126570"
  },
  {
    "text": "in addition to attributes we can also",
    "start": "126570",
    "end": "128849"
  },
  {
    "text": "bind to events that happen in the HTML",
    "start": "128849",
    "end": "131690"
  },
  {
    "text": "so let's say we want to change this",
    "start": "131690",
    "end": "134010"
  },
  {
    "text": "two disabled after it's been clicked",
    "start": "134010",
    "end": "135810"
  },
  {
    "text": "once we can use parentheses to bind to",
    "start": "135810",
    "end": "138360"
  },
  {
    "text": "the click event on this button and then",
    "start": "138360",
    "end": "140580"
  },
  {
    "text": "we'll pass it a function that will",
    "start": "140580",
    "end": "142110"
  },
  {
    "text": "define in our typescript to handle this",
    "start": "142110",
    "end": "144180"
  },
  {
    "text": "event now we can switch back to",
    "start": "144180",
    "end": "146670"
  },
  {
    "text": "typescript and define this event handler",
    "start": "146670",
    "end": "148530"
  },
  {
    "text": "method we currently have the clicked",
    "start": "148530",
    "end": "150870"
  },
  {
    "text": "property set to false but we want to set",
    "start": "150870",
    "end": "153090"
  },
  {
    "text": "that to true once the button is clicked",
    "start": "153090",
    "end": "154739"
  },
  {
    "text": "which we can do by calling this clicked",
    "start": "154739",
    "end": "156599"
  },
  {
    "text": "equals true when we click the button",
    "start": "156599",
    "end": "158819"
  },
  {
    "text": "this handle or will fire and in the",
    "start": "158819",
    "end": "160830"
  },
  {
    "text": "button becomes disabled because it flips",
    "start": "160830",
    "end": "162510"
  },
  {
    "text": "that property to true that's how you",
    "start": "162510",
    "end": "165690"
  },
  {
    "start": "165000",
    "end": "200000"
  },
  {
    "text": "bind to events and attributes in angular",
    "start": "165690",
    "end": "167220"
  },
  {
    "text": "but one other fundamental thing is",
    "start": "167220",
    "end": "168750"
  },
  {
    "text": "interpolation and basically all that",
    "start": "168750",
    "end": "171569"
  },
  {
    "text": "means is we're taking a raw value from",
    "start": "171569",
    "end": "173190"
  },
  {
    "text": "our typescript and rendering it out in",
    "start": "173190",
    "end": "175110"
  },
  {
    "text": "the HTML so for example let's say we",
    "start": "175110",
    "end": "177390"
  },
  {
    "text": "have the title here that shows the",
    "start": "177390",
    "end": "178980"
  },
  {
    "text": "angular version that we're currently",
    "start": "178980",
    "end": "180599"
  },
  {
    "text": "running so the title is just a string",
    "start": "180599",
    "end": "183239"
  },
  {
    "text": "value that gets created dynamically and",
    "start": "183239",
    "end": "185069"
  },
  {
    "text": "then we can go into our HTML and use the",
    "start": "185069",
    "end": "187860"
  },
  {
    "text": "handle bar syntax to interpolate it into",
    "start": "187860",
    "end": "190349"
  },
  {
    "text": "the template if we reload the browser it",
    "start": "190349",
    "end": "192540"
  },
  {
    "text": "should show us that we're running in",
    "start": "192540",
    "end": "193860"
  },
  {
    "text": "angular 6 for this project so now that",
    "start": "193860",
    "end": "196290"
  },
  {
    "text": "we have a working component how do we",
    "start": "196290",
    "end": "197790"
  },
  {
    "text": "actually use it within the context of",
    "start": "197790",
    "end": "199500"
  },
  {
    "text": "our angular application the most basic",
    "start": "199500",
    "end": "201600"
  },
  {
    "text": "way is to declare it in the HTML with",
    "start": "201600",
    "end": "203370"
  },
  {
    "text": "its selector which in this case is just",
    "start": "203370",
    "end": "205049"
  },
  {
    "text": "app - home if we go into this project's",
    "start": "205049",
    "end": "207810"
  },
  {
    "text": "app component we can just declare our",
    "start": "207810",
    "end": "209670"
  },
  {
    "text": "app home page there and it will be",
    "start": "209670",
    "end": "211500"
  },
  {
    "text": "rendered out like it's just a regular",
    "start": "211500",
    "end": "213030"
  },
  {
    "text": "HTML element but we can also load it",
    "start": "213030",
    "end": "216090"
  },
  {
    "text": "with the router and have it appear where",
    "start": "216090",
    "end": "217769"
  },
  {
    "text": "this router outlet is based on a certain",
    "start": "217769",
    "end": "219810"
  },
  {
    "text": "URL path check out episode 113 to learn",
    "start": "219810",
    "end": "222989"
  },
  {
    "text": "all about the router but the most basic",
    "start": "222989",
    "end": "224760"
  },
  {
    "text": "use case is that we setup a path and",
    "start": "224760",
    "end": "226530"
  },
  {
    "text": "then we point this path to our component",
    "start": "226530",
    "end": "228959"
  },
  {
    "text": "if we reload the app in the browser",
    "start": "228959",
    "end": "231090"
  },
  {
    "text": "you'll see it looks exactly the same but",
    "start": "231090",
    "end": "233160"
  },
  {
    "text": "if we open the augury plug-in and go to",
    "start": "233160",
    "end": "235139"
  },
  {
    "text": "the router tree you can see that it's",
    "start": "235139",
    "end": "236970"
  },
  {
    "text": "being loaded by the router instead of",
    "start": "236970",
    "end": "238799"
  },
  {
    "text": "just the HTML directly you can also load",
    "start": "238799",
    "end": "241530"
  },
  {
    "text": "components dynamically but without",
    "start": "241530",
    "end": "243090"
  },
  {
    "text": "changing the route a common use case",
    "start": "243090",
    "end": "244829"
  },
  {
    "text": "would be like a pop-up or a modal window",
    "start": "244829",
    "end": "246690"
  },
  {
    "text": "this technique is used frequently in the",
    "start": "246690",
    "end": "248910"
  },
  {
    "text": "ionic framework for example the alerts",
    "start": "248910",
    "end": "250889"
  },
  {
    "text": "controller will dynamically load an",
    "start": "250889",
    "end": "252630"
  },
  {
    "text": "entry component whenever the button is",
    "start": "252630",
    "end": "254549"
  },
  {
    "text": "clicked and lastly the cool new way to",
    "start": "254549",
    "end": "256979"
  },
  {
    "text": "load a component is with angular",
    "start": "256979",
    "end": "258810"
  },
  {
    "text": "elements which allows you to convert it",
    "start": "258810",
    "end": "260669"
  },
  {
    "text": "to a regular web component and then use",
    "start": "260669",
    "end": "262590"
  },
  {
    "text": "it outside of angular completely so you",
    "start": "262590",
    "end": "264419"
  },
  {
    "text": "could just drop it into a regular HT",
    "start": "264419",
    "end": "266470"
  },
  {
    "text": "mell page which you can learn all about",
    "start": "266470",
    "end": "267850"
  },
  {
    "text": "an episode 102 the next thing we're",
    "start": "267850",
    "end": "270670"
  },
  {
    "start": "270000",
    "end": "310000"
  },
  {
    "text": "going to look at our directives and a",
    "start": "270670",
    "end": "272620"
  },
  {
    "text": "directive is basically just like a",
    "start": "272620",
    "end": "274120"
  },
  {
    "text": "component but without its own HTML or",
    "start": "274120",
    "end": "276670"
  },
  {
    "text": "CSS instead it attaches to a host",
    "start": "276670",
    "end": "279040"
  },
  {
    "text": "element and changes the behavior of it",
    "start": "279040",
    "end": "280930"
  },
  {
    "text": "to demonstrate this I've added an object",
    "start": "280930",
    "end": "283300"
  },
  {
    "text": "called boat with some dummy data to our",
    "start": "283300",
    "end": "285070"
  },
  {
    "text": "component then perhaps the most useful",
    "start": "285070",
    "end": "287470"
  },
  {
    "text": "built in directive and angular is ng-if",
    "start": "287470",
    "end": "290080"
  },
  {
    "text": "and any directive that starts with a",
    "start": "290080",
    "end": "291940"
  },
  {
    "text": "star means it's a structural directive",
    "start": "291940",
    "end": "293770"
  },
  {
    "text": "and controls how elements are rendered",
    "start": "293770",
    "end": "295990"
  },
  {
    "text": "in the Dom in this case we're attaching",
    "start": "295990",
    "end": "298090"
  },
  {
    "text": "an NG F to a div and it will only render",
    "start": "298090",
    "end": "300760"
  },
  {
    "text": "this div if the right-hand side resolves",
    "start": "300760",
    "end": "302830"
  },
  {
    "text": "to true so going back to our clicks",
    "start": "302830",
    "end": "304840"
  },
  {
    "text": "property we're only going to show this",
    "start": "304840",
    "end": "306610"
  },
  {
    "text": "boat data if the button has been clicked",
    "start": "306610",
    "end": "309120"
  },
  {
    "text": "when we open the app you can see that it",
    "start": "309120",
    "end": "311500"
  },
  {
    "start": "310000",
    "end": "450000"
  },
  {
    "text": "looks just like it did before but when",
    "start": "311500",
    "end": "313090"
  },
  {
    "text": "we click the button it displays our boat",
    "start": "313090",
    "end": "315160"
  },
  {
    "text": "data you'll end up using ng F all the",
    "start": "315160",
    "end": "318130"
  },
  {
    "text": "time and angular and there's one other",
    "start": "318130",
    "end": "319690"
  },
  {
    "text": "directive that you'll use very",
    "start": "319690",
    "end": "321010"
  },
  {
    "text": "frequently as well which is ng 4 you can",
    "start": "321010",
    "end": "324100"
  },
  {
    "text": "use it to loop over an array of data so",
    "start": "324100",
    "end": "326350"
  },
  {
    "text": "let's imagine we have an array with",
    "start": "326350",
    "end": "327490"
  },
  {
    "text": "multiple boats in it",
    "start": "327490",
    "end": "329130"
  },
  {
    "text": "we've already mapped out how we want",
    "start": "329130",
    "end": "331419"
  },
  {
    "text": "each boat to be displayed but instead of",
    "start": "331419",
    "end": "333490"
  },
  {
    "text": "using ng if here we can replace it with",
    "start": "333490",
    "end": "335590"
  },
  {
    "text": "ng 4 then we'll iterate over the boats",
    "start": "335590",
    "end": "338140"
  },
  {
    "text": "array by saying let boat of boats then",
    "start": "338140",
    "end": "341950"
  },
  {
    "text": "the div that this directive is attached",
    "start": "341950",
    "end": "343510"
  },
  {
    "text": "to will be rendered for each item in",
    "start": "343510",
    "end": "345580"
  },
  {
    "text": "that array if we open the app you can",
    "start": "345580",
    "end": "347770"
  },
  {
    "text": "see we now have multiple boats utilizing",
    "start": "347770",
    "end": "349600"
  },
  {
    "text": "the same presentation logic so those are",
    "start": "349600",
    "end": "352510"
  },
  {
    "text": "super powerful but another thing you",
    "start": "352510",
    "end": "354130"
  },
  {
    "text": "often want to do is display different",
    "start": "354130",
    "end": "355990"
  },
  {
    "text": "CSS classes conditionally based on some",
    "start": "355990",
    "end": "358780"
  },
  {
    "text": "logic in your type script just as a",
    "start": "358780",
    "end": "361060"
  },
  {
    "text": "basic example let's imagine we have a",
    "start": "361060",
    "end": "362890"
  },
  {
    "text": "green and red CSS class we can use the",
    "start": "362890",
    "end": "366520"
  },
  {
    "text": "ng class directive to control which CSS",
    "start": "366520",
    "end": "369010"
  },
  {
    "text": "class gets applied to the h1 title based",
    "start": "369010",
    "end": "371410"
  },
  {
    "text": "on the name of the boat so we'll pass",
    "start": "371410",
    "end": "374050"
  },
  {
    "text": "the directive and object where the",
    "start": "374050",
    "end": "375760"
  },
  {
    "text": "left-hand side of each object property",
    "start": "375760",
    "end": "378070"
  },
  {
    "text": "is the CSS class we want to apply then",
    "start": "378070",
    "end": "380740"
  },
  {
    "text": "the value or the right side is an",
    "start": "380740",
    "end": "382510"
  },
  {
    "text": "expression that resolves to true or",
    "start": "382510",
    "end": "384070"
  },
  {
    "text": "false which in this case will either be",
    "start": "384070",
    "end": "385630"
  },
  {
    "text": "boat name equals Starfire or boat name",
    "start": "385630",
    "end": "387970"
  },
  {
    "text": "equals Oracle now we get a different",
    "start": "387970",
    "end": "390400"
  },
  {
    "text": "color for each title based on this logic",
    "start": "390400",
    "end": "392430"
  },
  {
    "text": "so far we've only looked at built in",
    "start": "392430",
    "end": "394870"
  },
  {
    "text": "directives in angular but you can also",
    "start": "394870",
    "end": "396550"
  },
  {
    "text": "build your own custom directives let's",
    "start": "396550",
    "end": "398860"
  },
  {
    "text": "go ahead and build our own with the",
    "start": "398860",
    "end": "399880"
  },
  {
    "text": "angular",
    "start": "399880",
    "end": "400240"
  },
  {
    "text": "CLI by running an ng generate directive",
    "start": "400240",
    "end": "402490"
  },
  {
    "text": "which we'll call magnifier that will",
    "start": "402490",
    "end": "404470"
  },
  {
    "text": "increase the size of an image when it's",
    "start": "404470",
    "end": "406270"
  },
  {
    "text": "hovered over overall this looks pretty",
    "start": "406270",
    "end": "408460"
  },
  {
    "text": "similar to a component but the key",
    "start": "408460",
    "end": "409990"
  },
  {
    "text": "difference is that there is no HTML",
    "start": "409990",
    "end": "411849"
  },
  {
    "text": "template or CSS styles instead it's used",
    "start": "411849",
    "end": "414460"
  },
  {
    "text": "as an attribute on an HTML element this",
    "start": "414460",
    "end": "417580"
  },
  {
    "text": "particular directive will be used to",
    "start": "417580",
    "end": "419110"
  },
  {
    "text": "modify the width of an image element so",
    "start": "419110",
    "end": "421360"
  },
  {
    "text": "we can bind to the host elements width",
    "start": "421360",
    "end": "423550"
  },
  {
    "text": "by using the host binding decorator then",
    "start": "423550",
    "end": "426400"
  },
  {
    "text": "any image that uses this directive will",
    "start": "426400",
    "end": "428380"
  },
  {
    "text": "start with a width of 200 then we also",
    "start": "428380",
    "end": "431380"
  },
  {
    "text": "want to listen to the mouse enter event",
    "start": "431380",
    "end": "433479"
  },
  {
    "text": "to know when the user is hovered over",
    "start": "433479",
    "end": "435039"
  },
  {
    "text": "the image with their mouse with that we",
    "start": "435039",
    "end": "436810"
  },
  {
    "text": "can use the host listener decorator pass",
    "start": "436810",
    "end": "439090"
  },
  {
    "text": "in the Dom event that we want to listen",
    "start": "439090",
    "end": "440470"
  },
  {
    "text": "to and then define a function to handle",
    "start": "440470",
    "end": "443229"
  },
  {
    "text": "this event in this case what we want to",
    "start": "443229",
    "end": "445150"
  },
  {
    "text": "do is really simple just increase the",
    "start": "445150",
    "end": "447039"
  },
  {
    "text": "width from 200 to 300 now we'll switch",
    "start": "447039",
    "end": "450159"
  },
  {
    "start": "450000",
    "end": "595000"
  },
  {
    "text": "back to the HTML in our component and we",
    "start": "450159",
    "end": "452530"
  },
  {
    "text": "currently have an image in there that",
    "start": "452530",
    "end": "453789"
  },
  {
    "text": "displays the boat image with a width of",
    "start": "453789",
    "end": "455650"
  },
  {
    "text": "200 let's go ahead and take this out and",
    "start": "455650",
    "end": "458319"
  },
  {
    "text": "replace it with the app magnifier",
    "start": "458319",
    "end": "460210"
  },
  {
    "text": "directive if we go back to our app and",
    "start": "460210",
    "end": "462430"
  },
  {
    "text": "hover over the images you'll see that",
    "start": "462430",
    "end": "463960"
  },
  {
    "text": "they're resized as soon as we hover over",
    "start": "463960",
    "end": "466000"
  },
  {
    "text": "them not the most useful thing in the",
    "start": "466000",
    "end": "467440"
  },
  {
    "text": "world but you get the idea of how you",
    "start": "467440",
    "end": "468729"
  },
  {
    "text": "can use components and directives",
    "start": "468729",
    "end": "470110"
  },
  {
    "text": "together to write really dry reusable",
    "start": "470110",
    "end": "472240"
  },
  {
    "text": "code there's another mechanism in",
    "start": "472240",
    "end": "474729"
  },
  {
    "text": "angular that helps us write reusable",
    "start": "474729",
    "end": "476409"
  },
  {
    "text": "code called pipes a pipe is always used",
    "start": "476409",
    "end": "479469"
  },
  {
    "text": "in an interpolated value in the HTML so",
    "start": "479469",
    "end": "482110"
  },
  {
    "text": "let's imagine we have a big number here",
    "start": "482110",
    "end": "483280"
  },
  {
    "text": "we can use the built in number pipe to",
    "start": "483280",
    "end": "485710"
  },
  {
    "text": "round this down to 3 decimals angular",
    "start": "485710",
    "end": "488710"
  },
  {
    "text": "has some useful built in pipes but the",
    "start": "488710",
    "end": "490599"
  },
  {
    "text": "real power comes when you start building",
    "start": "490599",
    "end": "491830"
  },
  {
    "text": "your own custom pipes and chances are",
    "start": "491830",
    "end": "494319"
  },
  {
    "text": "somebody's already written the code that",
    "start": "494319",
    "end": "495729"
  },
  {
    "text": "you need for your use case so make sure",
    "start": "495729",
    "end": "497800"
  },
  {
    "text": "to check out the angular pipes of github",
    "start": "497800",
    "end": "499240"
  },
  {
    "text": "repo for a full list of examples there's",
    "start": "499240",
    "end": "502180"
  },
  {
    "text": "one really special pipe that I want to",
    "start": "502180",
    "end": "503680"
  },
  {
    "text": "talk about now which is the async pipe",
    "start": "503680",
    "end": "505690"
  },
  {
    "text": "in web application you're commonly",
    "start": "505690",
    "end": "507880"
  },
  {
    "text": "fetching data asynchronously as a",
    "start": "507880",
    "end": "509620"
  },
  {
    "text": "promise or an observable and the async",
    "start": "509620",
    "end": "512950"
  },
  {
    "text": "pipe allows you to do this automatically",
    "start": "512950",
    "end": "514839"
  },
  {
    "text": "in a predictable way directly in the",
    "start": "514839",
    "end": "516490"
  },
  {
    "text": "HTML in this example I'm converting our",
    "start": "516490",
    "end": "519250"
  },
  {
    "text": "boats array into an observable by using",
    "start": "519250",
    "end": "521260"
  },
  {
    "text": "the rxjs of method so now it becomes an",
    "start": "521260",
    "end": "524680"
  },
  {
    "text": "observable object so our regular ng for",
    "start": "524680",
    "end": "527380"
  },
  {
    "text": "loop isn't going to work what we can do",
    "start": "527380",
    "end": "529959"
  },
  {
    "text": "is simply add the async pipe to our for",
    "start": "529959",
    "end": "531970"
  },
  {
    "text": "loop and now it's going to convert that",
    "start": "531970",
    "end": "534070"
  },
  {
    "text": "observable to an array by subscribing to",
    "start": "534070",
    "end": "536050"
  },
  {
    "text": "it and in addition it also unsubscribes",
    "start": "536050",
    "end": "538720"
  },
  {
    "text": "when this component is destroyed that's",
    "start": "538720",
    "end": "540880"
  },
  {
    "text": "a whole nother subject on rxjs",
    "start": "540880",
    "end": "542770"
  },
  {
    "text": "but just know that it's a very useful",
    "start": "542770",
    "end": "544630"
  },
  {
    "text": "mechanism for simplifying your angular",
    "start": "544630",
    "end": "546550"
  },
  {
    "text": "code in a real app we'd probably be",
    "start": "546550",
    "end": "548620"
  },
  {
    "text": "fetching these boats asynchronously from",
    "start": "548620",
    "end": "550300"
  },
  {
    "text": "a database and the async pipe allows us",
    "start": "550300",
    "end": "552460"
  },
  {
    "text": "to treat them more like a synchronous",
    "start": "552460",
    "end": "554140"
  },
  {
    "text": "plain JavaScript array at its core a",
    "start": "554140",
    "end": "556660"
  },
  {
    "text": "pipe is very simple it's just a function",
    "start": "556660",
    "end": "558910"
  },
  {
    "text": "that takes in a value and then spits out",
    "start": "558910",
    "end": "560860"
  },
  {
    "text": "another value each of our boats has a",
    "start": "560860",
    "end": "563140"
  },
  {
    "text": "year property on it let's say we want to",
    "start": "563140",
    "end": "565150"
  },
  {
    "text": "only display the last two digits in that",
    "start": "565150",
    "end": "567340"
  },
  {
    "text": "four-digit year all we have to do is go",
    "start": "567340",
    "end": "569770"
  },
  {
    "text": "into our custom pipe and then implement",
    "start": "569770",
    "end": "571660"
  },
  {
    "text": "this transform method the value",
    "start": "571660",
    "end": "574000"
  },
  {
    "text": "represents whatever value is inside the",
    "start": "574000",
    "end": "576280"
  },
  {
    "text": "handlebar syntax in your HTML then the",
    "start": "576280",
    "end": "578860"
  },
  {
    "text": "value you return is what you want to be",
    "start": "578860",
    "end": "580600"
  },
  {
    "text": "shown in the HTML in this case we'll",
    "start": "580600",
    "end": "583000"
  },
  {
    "text": "convert the number to a string and then",
    "start": "583000",
    "end": "584770"
  },
  {
    "text": "grab the last two elements on that",
    "start": "584770",
    "end": "586660"
  },
  {
    "text": "string then we can go add it to the boat",
    "start": "586660",
    "end": "588880"
  },
  {
    "text": "year and our HTML and then if we reopen",
    "start": "588880",
    "end": "591670"
  },
  {
    "text": "the app we'll see that we only get the",
    "start": "591670",
    "end": "592900"
  },
  {
    "text": "last two numbers on the year so now that",
    "start": "592900",
    "end": "595990"
  },
  {
    "start": "595000",
    "end": "695000"
  },
  {
    "text": "you know a lot about components pipes",
    "start": "595990",
    "end": "597430"
  },
  {
    "text": "and directives I want to talk about a",
    "start": "597430",
    "end": "599410"
  },
  {
    "text": "concept that's really important for",
    "start": "599410",
    "end": "600730"
  },
  {
    "text": "angular developers and that's never",
    "start": "600730",
    "end": "602410"
  },
  {
    "text": "touched the Dom if you're an experienced",
    "start": "602410",
    "end": "604600"
  },
  {
    "text": "JavaScript developer you're probably",
    "start": "604600",
    "end": "605950"
  },
  {
    "text": "used to doing something like this where",
    "start": "605950",
    "end": "607390"
  },
  {
    "text": "you call document query selector then",
    "start": "607390",
    "end": "609460"
  },
  {
    "text": "grab some element in the Dom and change",
    "start": "609460",
    "end": "611710"
  },
  {
    "text": "its inner HTML and when you're building",
    "start": "611710",
    "end": "614140"
  },
  {
    "text": "a progressive web app this code will",
    "start": "614140",
    "end": "615880"
  },
  {
    "text": "work perfectly fine because the Dom",
    "start": "615880",
    "end": "617560"
  },
  {
    "text": "exists in a web app but if you write",
    "start": "617560",
    "end": "619900"
  },
  {
    "text": "code like this and you ever want to do",
    "start": "619900",
    "end": "621190"
  },
  {
    "text": "server-side rendering or build a native",
    "start": "621190",
    "end": "623170"
  },
  {
    "text": "mobile app this code will not work",
    "start": "623170",
    "end": "624850"
  },
  {
    "text": "because the Dom does not exist on other",
    "start": "624850",
    "end": "627010"
  },
  {
    "text": "platforms so now you know why the use of",
    "start": "627010",
    "end": "629500"
  },
  {
    "text": "libraries like jQuery are generally",
    "start": "629500",
    "end": "631420"
  },
  {
    "text": "discouraged in angular now let's switch",
    "start": "631420",
    "end": "633670"
  },
  {
    "text": "gears into the component lifecycle a",
    "start": "633670",
    "end": "636030"
  },
  {
    "text": "component is just a class so the very",
    "start": "636030",
    "end": "638620"
  },
  {
    "text": "first thing that happen in its lifecycle",
    "start": "638620",
    "end": "640090"
  },
  {
    "text": "is the constructor aspired but",
    "start": "640090",
    "end": "642850"
  },
  {
    "text": "components have relationships with other",
    "start": "642850",
    "end": "644530"
  },
  {
    "text": "components and they have bindings that",
    "start": "644530",
    "end": "646360"
  },
  {
    "text": "are initialized in the HTML so things",
    "start": "646360",
    "end": "648250"
  },
  {
    "text": "get a little bit more complex in angular",
    "start": "648250",
    "end": "650920"
  },
  {
    "text": "you typically don't do anything in the",
    "start": "650920",
    "end": "652330"
  },
  {
    "text": "constructor except add your dependencies",
    "start": "652330",
    "end": "654310"
  },
  {
    "text": "and that's because your property",
    "start": "654310",
    "end": "656320"
  },
  {
    "text": "bindings aren't guaranteed to be",
    "start": "656320",
    "end": "657610"
  },
  {
    "text": "available until you run ng on it knit",
    "start": "657610",
    "end": "660150"
  },
  {
    "text": "which is the first time change detection",
    "start": "660150",
    "end": "662320"
  },
  {
    "text": "runs in this component so the uninit",
    "start": "662320",
    "end": "665020"
  },
  {
    "text": "lifecycle hook is where you do all of",
    "start": "665020",
    "end": "666400"
  },
  {
    "text": "your setup maybe you're fetching",
    "start": "666400",
    "end": "667860"
  },
  {
    "text": "from an API or you're setting up a",
    "start": "667860",
    "end": "669990"
  },
  {
    "text": "reactive form or something along those",
    "start": "669990",
    "end": "671730"
  },
  {
    "text": "lines I'll go ahead and add our boats",
    "start": "671730",
    "end": "674040"
  },
  {
    "text": "observable to energy on an it just to",
    "start": "674040",
    "end": "675899"
  },
  {
    "text": "simulate it coming from a database or",
    "start": "675899",
    "end": "677760"
  },
  {
    "text": "API the very last thing to happen to a",
    "start": "677760",
    "end": "680490"
  },
  {
    "text": "component is that it's destroyed which",
    "start": "680490",
    "end": "682350"
  },
  {
    "text": "triggers the on destroyed lifecycle hook",
    "start": "682350",
    "end": "684390"
  },
  {
    "text": "this is where you do any teardown for",
    "start": "684390",
    "end": "686640"
  },
  {
    "text": "your component and angular that is",
    "start": "686640",
    "end": "688380"
  },
  {
    "text": "commonly unsubscribing from an",
    "start": "688380",
    "end": "689910"
  },
  {
    "text": "observable to prevent things like memory",
    "start": "689910",
    "end": "691680"
  },
  {
    "text": "leaks and performance issues on an it is",
    "start": "691680",
    "end": "695310"
  },
  {
    "start": "695000",
    "end": "831000"
  },
  {
    "text": "by far the most common hook that you'll",
    "start": "695310",
    "end": "696899"
  },
  {
    "text": "use but if you have child views inside",
    "start": "696899",
    "end": "699120"
  },
  {
    "text": "of your component you might also want to",
    "start": "699120",
    "end": "700740"
  },
  {
    "text": "use after view in it which will ensure",
    "start": "700740",
    "end": "702540"
  },
  {
    "text": "that your child views are loaded as well",
    "start": "702540",
    "end": "704450"
  },
  {
    "text": "now that segues into a really important",
    "start": "704450",
    "end": "707100"
  },
  {
    "text": "concept in angular which is change",
    "start": "707100",
    "end": "708779"
  },
  {
    "text": "detection behind the scenes angular is",
    "start": "708779",
    "end": "711450"
  },
  {
    "text": "using something called zone j s that",
    "start": "711450",
    "end": "713579"
  },
  {
    "text": "will listen for any events or",
    "start": "713579",
    "end": "715140"
  },
  {
    "text": "asynchronous activity in your app and",
    "start": "715140",
    "end": "717089"
  },
  {
    "text": "then re render components as needed you",
    "start": "717089",
    "end": "720120"
  },
  {
    "text": "can determine when change detection is",
    "start": "720120",
    "end": "721709"
  },
  {
    "text": "happening by using this do check",
    "start": "721709",
    "end": "723360"
  },
  {
    "text": "lifecycle hook you wouldn't normally use",
    "start": "723360",
    "end": "725310"
  },
  {
    "text": "this to do anything significant but it",
    "start": "725310",
    "end": "727529"
  },
  {
    "text": "is useful for debugging at times if",
    "start": "727529",
    "end": "729959"
  },
  {
    "text": "you're building an interactive app this",
    "start": "729959",
    "end": "731579"
  },
  {
    "text": "lifecycle hook will be triggered",
    "start": "731579",
    "end": "732990"
  },
  {
    "text": "constantly you can see we get the first",
    "start": "732990",
    "end": "734910"
  },
  {
    "text": "console log when the component is",
    "start": "734910",
    "end": "736560"
  },
  {
    "text": "initialized that's when the ng on an it",
    "start": "736560",
    "end": "738510"
  },
  {
    "text": "lifecycle hook runs and then as we hover",
    "start": "738510",
    "end": "740519"
  },
  {
    "text": "around different events take place and",
    "start": "740519",
    "end": "742230"
  },
  {
    "text": "that triggers change detection and the",
    "start": "742230",
    "end": "744180"
  },
  {
    "text": "console log in the browser so now I want",
    "start": "744180",
    "end": "747120"
  },
  {
    "text": "to segue into a concept that is also",
    "start": "747120",
    "end": "749100"
  },
  {
    "text": "common in other JavaScript frameworks",
    "start": "749100",
    "end": "750570"
  },
  {
    "text": "like react in view and that smart",
    "start": "750570",
    "end": "752640"
  },
  {
    "text": "components versus dumb components or",
    "start": "752640",
    "end": "754470"
  },
  {
    "text": "also commonly called stateful versus",
    "start": "754470",
    "end": "756690"
  },
  {
    "text": "stateless or container versus",
    "start": "756690",
    "end": "758760"
  },
  {
    "text": "presentational and basically all this",
    "start": "758760",
    "end": "760890"
  },
  {
    "text": "boils down to is a separation of",
    "start": "760890",
    "end": "762750"
  },
  {
    "text": "concerns to make your code predictable a",
    "start": "762750",
    "end": "764850"
  },
  {
    "text": "smart component is generally a page or",
    "start": "764850",
    "end": "767160"
  },
  {
    "text": "container that controls how things work",
    "start": "767160",
    "end": "769140"
  },
  {
    "text": "throughout the app well the dumb",
    "start": "769140",
    "end": "770850"
  },
  {
    "text": "component is only concerned with",
    "start": "770850",
    "end": "772260"
  },
  {
    "text": "presentation logic I have generated a",
    "start": "772260",
    "end": "774660"
  },
  {
    "text": "new component called boat that will be",
    "start": "774660",
    "end": "776310"
  },
  {
    "text": "our dumb component it's going to take",
    "start": "776310",
    "end": "778050"
  },
  {
    "text": "the data from this ng for loop and",
    "start": "778050",
    "end": "780089"
  },
  {
    "text": "extract it into its own isolated",
    "start": "780089",
    "end": "782100"
  },
  {
    "text": "presentational component this allows the",
    "start": "782100",
    "end": "784529"
  },
  {
    "text": "parent component to focus on more",
    "start": "784529",
    "end": "786209"
  },
  {
    "text": "low-level things like synchronizing the",
    "start": "786209",
    "end": "787949"
  },
  {
    "text": "state of the app and fetching the items",
    "start": "787949",
    "end": "789750"
  },
  {
    "text": "from the database as your app grows in",
    "start": "789750",
    "end": "791940"
  },
  {
    "text": "complexity this just becomes an easier",
    "start": "791940",
    "end": "793800"
  },
  {
    "text": "way to rationalize what's happening in",
    "start": "793800",
    "end": "796070"
  },
  {
    "text": "so the home component is a container",
    "start": "796070",
    "end": "798110"
  },
  {
    "text": "that fetches the data while the boat",
    "start": "798110",
    "end": "799880"
  },
  {
    "text": "component is only concerned with",
    "start": "799880",
    "end": "801470"
  },
  {
    "text": "presenting the data in the UI there's a",
    "start": "801470",
    "end": "804440"
  },
  {
    "text": "ton of other things we can talk about",
    "start": "804440",
    "end": "805699"
  },
  {
    "text": "with angular components but many of",
    "start": "805699",
    "end": "807500"
  },
  {
    "text": "those you'll see in practice as we build",
    "start": "807500",
    "end": "809420"
  },
  {
    "text": "out different features on this channel",
    "start": "809420",
    "end": "810860"
  },
  {
    "text": "I'm gonna go ahead and wrap things up",
    "start": "810860",
    "end": "812569"
  },
  {
    "text": "there if this video helped you please",
    "start": "812569",
    "end": "813920"
  },
  {
    "text": "like and subscribe and if you want to",
    "start": "813920",
    "end": "815899"
  },
  {
    "text": "build more advanced real world features",
    "start": "815899",
    "end": "817639"
  },
  {
    "text": "consider becoming a pro member at",
    "start": "817639",
    "end": "819470"
  },
  {
    "text": "angular firebase comm you'll get",
    "start": "819470",
    "end": "821569"
  },
  {
    "text": "exclusive pro videos every week plus a",
    "start": "821569",
    "end": "823670"
  },
  {
    "text": "copy of the angular firebase Survival",
    "start": "823670",
    "end": "825769"
  },
  {
    "text": "Guide thanks for watching and I'll talk",
    "start": "825769",
    "end": "827930"
  },
  {
    "text": "to you soon",
    "start": "827930",
    "end": "830319"
  }
]