[
  {
    "text": "[Music]",
    "start": "0",
    "end": "6350"
  },
  {
    "text": "why use a state management library and",
    "start": "6350",
    "end": "8760"
  },
  {
    "text": "angular when you can just build your own",
    "start": "8760",
    "end": "10200"
  },
  {
    "text": "from scratch when you combine rxjs with",
    "start": "10200",
    "end": "12750"
  },
  {
    "text": "angular's dependency injection it",
    "start": "12750",
    "end": "14400"
  },
  {
    "text": "provides a powerful foundation for",
    "start": "14400",
    "end": "16260"
  },
  {
    "text": "building your own state management",
    "start": "16260",
    "end": "17670"
  },
  {
    "text": "system that means you can get all the",
    "start": "17670",
    "end": "19050"
  },
  {
    "text": "benefits of the redux pattern including",
    "start": "19050",
    "end": "20850"
  },
  {
    "text": "the dev tools that you see here on the",
    "start": "20850",
    "end": "22199"
  },
  {
    "text": "right but you can create your own",
    "start": "22199",
    "end": "23609"
  },
  {
    "text": "abstractions and conventions to reduce",
    "start": "23609",
    "end": "25800"
  },
  {
    "text": "the amount of boilerplate code plus",
    "start": "25800",
    "end": "27480"
  },
  {
    "text": "you'll have a much better understanding",
    "start": "27480",
    "end": "28230"
  },
  {
    "text": "of how your app works under the hood",
    "start": "28230",
    "end": "30119"
  },
  {
    "text": "over the next few minutes you'll learn",
    "start": "30119",
    "end": "31650"
  },
  {
    "text": "how to use custom rxjs operators and",
    "start": "31650",
    "end": "33989"
  },
  {
    "text": "multi casting to build your own state",
    "start": "33989",
    "end": "36000"
  },
  {
    "text": "management library but mostly I just",
    "start": "36000",
    "end": "37829"
  },
  {
    "text": "want to show you how this pattern works",
    "start": "37829",
    "end": "39000"
  },
  {
    "text": "at a fundamental level if you're new",
    "start": "39000",
    "end": "41100"
  },
  {
    "text": "like and subscribe and grab the source",
    "start": "41100",
    "end": "42899"
  },
  {
    "text": "code from angular firebase comm in case",
    "start": "42899",
    "end": "45629"
  },
  {
    "text": "you're not familiar with the redux",
    "start": "45629",
    "end": "46680"
  },
  {
    "text": "pattern here's a quick refresher the",
    "start": "46680",
    "end": "48690"
  },
  {
    "text": "whole idea is that we treat our app data",
    "start": "48690",
    "end": "50610"
  },
  {
    "text": "or state as a global immutable object",
    "start": "50610",
    "end": "53340"
  },
  {
    "text": "the only way we can change the current",
    "start": "53340",
    "end": "54899"
  },
  {
    "text": "state of the app is by dispatching an",
    "start": "54899",
    "end": "57120"
  },
  {
    "text": "action so that might happen on a button",
    "start": "57120",
    "end": "59190"
  },
  {
    "text": "click then the payload for that action",
    "start": "59190",
    "end": "60989"
  },
  {
    "text": "will go to a reducer function to",
    "start": "60989",
    "end": "62789"
  },
  {
    "text": "determine what the next state should",
    "start": "62789",
    "end": "64408"
  },
  {
    "text": "look like the store itself isn't",
    "start": "64409",
    "end": "66299"
  },
  {
    "text": "observable so everything will happen in",
    "start": "66299",
    "end": "68310"
  },
  {
    "text": "a reactive way so anything that",
    "start": "68310",
    "end": "70110"
  },
  {
    "text": "subscribes to the store will be updated",
    "start": "70110",
    "end": "72210"
  },
  {
    "text": "with the latest data the benefit of this",
    "start": "72210",
    "end": "74189"
  },
  {
    "text": "is that we now have a one-way data flow",
    "start": "74189",
    "end": "76170"
  },
  {
    "text": "that provides a predictable history of",
    "start": "76170",
    "end": "78210"
  },
  {
    "text": "all the changes that occur in the app so",
    "start": "78210",
    "end": "79979"
  },
  {
    "text": "we can do time-travel debugging and cool",
    "start": "79979",
    "end": "81930"
  },
  {
    "text": "stuff like that if we think about this",
    "start": "81930",
    "end": "84150"
  },
  {
    "text": "in code our current state is equal to",
    "start": "84150",
    "end": "86460"
  },
  {
    "text": "the stream of actions and the function",
    "start": "86460",
    "end": "88380"
  },
  {
    "text": "that reduces them a reducer is just a",
    "start": "88380",
    "end": "90390"
  },
  {
    "text": "pure function that takes in the current",
    "start": "90390",
    "end": "92040"
  },
  {
    "text": "state and the action and then returns",
    "start": "92040",
    "end": "94020"
  },
  {
    "text": "the next state so let's go ahead and",
    "start": "94020",
    "end": "96390"
  },
  {
    "text": "build this thing the first thing I want",
    "start": "96390",
    "end": "97799"
  },
  {
    "text": "to do is generate a service called store",
    "start": "97799",
    "end": "99930"
  },
  {
    "text": "and I'd also like to point out that I",
    "start": "99930",
    "end": "101850"
  },
  {
    "text": "have lodash installed not only will it",
    "start": "101850",
    "end": "103770"
  },
  {
    "text": "dramatically simplify our code but it",
    "start": "103770",
    "end": "105570"
  },
  {
    "text": "will also give us better performance",
    "start": "105570",
    "end": "107100"
  },
  {
    "text": "than we'd be able to achieve natively so",
    "start": "107100",
    "end": "109590"
  },
  {
    "text": "first I want to show you how our store",
    "start": "109590",
    "end": "111030"
  },
  {
    "text": "service will be used in a component one",
    "start": "111030",
    "end": "113189"
  },
  {
    "text": "really important concept in redux is",
    "start": "113189",
    "end": "114840"
  },
  {
    "text": "that our components should be stateless",
    "start": "114840",
    "end": "116159"
  },
  {
    "text": "meaning they should only be listening to",
    "start": "116159",
    "end": "118020"
  },
  {
    "text": "data from the store as an observable or",
    "start": "118020",
    "end": "120060"
  },
  {
    "text": "dispatching actions they shouldn't have",
    "start": "120060",
    "end": "122189"
  },
  {
    "text": "any state of their own so the service",
    "start": "122189",
    "end": "124680"
  },
  {
    "text": "will provide the store itself and then",
    "start": "124680",
    "end": "126390"
  },
  {
    "text": "also an action class which will just",
    "start": "126390",
    "end": "128099"
  },
  {
    "text": "give us a standardized way for creating",
    "start": "128099",
    "end": "129989"
  },
  {
    "text": "actions the store can be injected in the",
    "start": "129989",
    "end": "132209"
  },
  {
    "text": "constructor then the cool thing of",
    "start": "132209",
    "end": "133900"
  },
  {
    "text": "building your own state management",
    "start": "133900",
    "end": "135099"
  },
  {
    "text": "library is you can make it behave",
    "start": "135099",
    "end": "136510"
  },
  {
    "text": "however you want so in my case I want to",
    "start": "136510",
    "end": "138819"
  },
  {
    "text": "be able to grab properties with dot",
    "start": "138819",
    "end": "140680"
  },
  {
    "text": "notation this differs from say ng rx",
    "start": "140680",
    "end": "143260"
  },
  {
    "text": "where you'd use a callback function or a",
    "start": "143260",
    "end": "145060"
  },
  {
    "text": "pipe herbal operator to select your data",
    "start": "145060",
    "end": "147069"
  },
  {
    "text": "then there are three fundamental",
    "start": "147069",
    "end": "148799"
  },
  {
    "text": "credence that you're probably familiar",
    "start": "148799",
    "end": "150700"
  },
  {
    "text": "with if you work with no sequel",
    "start": "150700",
    "end": "152170"
  },
  {
    "text": "databases the first one is set which",
    "start": "152170",
    "end": "154359"
  },
  {
    "text": "will completely wipe out the store and",
    "start": "154359",
    "end": "156250"
  },
  {
    "text": "set it with new values so if we want to",
    "start": "156250",
    "end": "158829"
  },
  {
    "text": "reset the store will dispatch a new",
    "start": "158829",
    "end": "160810"
  },
  {
    "text": "action called set and that will include",
    "start": "160810",
    "end": "163030"
  },
  {
    "text": "the new data that we want to update but",
    "start": "163030",
    "end": "166180"
  },
  {
    "text": "we might also want to do a",
    "start": "166180",
    "end": "167409"
  },
  {
    "text": "non-destructive update for that will",
    "start": "167409",
    "end": "169450"
  },
  {
    "text": "create an update action and then we'll",
    "start": "169450",
    "end": "171040"
  },
  {
    "text": "tell a reducer to only update the",
    "start": "171040",
    "end": "172750"
  },
  {
    "text": "properties that are contained in the",
    "start": "172750",
    "end": "174340"
  },
  {
    "text": "data payload and the last one is delete",
    "start": "174340",
    "end": "177099"
  },
  {
    "text": "which as its action payload expects an",
    "start": "177099",
    "end": "179349"
  },
  {
    "text": "object property and then it will delete",
    "start": "179349",
    "end": "181209"
  },
  {
    "text": "that key from the store now remember all",
    "start": "181209",
    "end": "184269"
  },
  {
    "text": "of our data is just a global immutable",
    "start": "184269",
    "end": "186310"
  },
  {
    "text": "object as an observable so if we want to",
    "start": "186310",
    "end": "188470"
  },
  {
    "text": "view it in the UI we can just say store",
    "start": "188470",
    "end": "190720"
  },
  {
    "text": "dot state and then unwrap it with the",
    "start": "190720",
    "end": "192700"
  },
  {
    "text": "async pipe and then we also set a method",
    "start": "192700",
    "end": "195489"
  },
  {
    "text": "called select which will select a",
    "start": "195489",
    "end": "197170"
  },
  {
    "text": "specific slice of that state and setting",
    "start": "197170",
    "end": "199480"
  },
  {
    "text": "up that slicing is probably the most",
    "start": "199480",
    "end": "200919"
  },
  {
    "text": "complex thing that we'll have to do and",
    "start": "200919",
    "end": "203109"
  },
  {
    "text": "then lastly we'll set up a few buttons",
    "start": "203109",
    "end": "204459"
  },
  {
    "text": "here just to dispatch our actions then",
    "start": "204459",
    "end": "207069"
  },
  {
    "text": "the end result from the user's",
    "start": "207069",
    "end": "208180"
  },
  {
    "text": "perspective is just this UI with a few",
    "start": "208180",
    "end": "210159"
  },
  {
    "text": "buttons and then when clicked we get a",
    "start": "210159",
    "end": "211959"
  },
  {
    "text": "full history of every state change that",
    "start": "211959",
    "end": "214030"
  },
  {
    "text": "occurs so every time we click a button",
    "start": "214030",
    "end": "216310"
  },
  {
    "text": "you'll notice that it changes the state",
    "start": "216310",
    "end": "217810"
  },
  {
    "text": "in the UI and then we also have an event",
    "start": "217810",
    "end": "219819"
  },
  {
    "text": "in the Redux dev tools history overall",
    "start": "219819",
    "end": "222879"
  },
  {
    "text": "this is hugely beneficial for debugging",
    "start": "222879",
    "end": "224650"
  },
  {
    "text": "and also a lot easier to test now it's",
    "start": "224650",
    "end": "227470"
  },
  {
    "text": "time for the fun part",
    "start": "227470",
    "end": "228519"
  },
  {
    "text": "we're just here in a regular angular",
    "start": "228519",
    "end": "229840"
  },
  {
    "text": "service which is our store service I",
    "start": "229840",
    "end": "231970"
  },
  {
    "text": "have a few imports here from rxjs and lo",
    "start": "231970",
    "end": "234909"
  },
  {
    "text": "- then I'm creating my own custom action",
    "start": "234909",
    "end": "237430"
  },
  {
    "text": "class just to standardize the way",
    "start": "237430",
    "end": "239019"
  },
  {
    "text": "actions are dispatched you could also",
    "start": "239019",
    "end": "240819"
  },
  {
    "text": "make this an interface and then create a",
    "start": "240819",
    "end": "242470"
  },
  {
    "text": "different class for each action that's",
    "start": "242470",
    "end": "244120"
  },
  {
    "text": "the way it's done in ng Rx but in action",
    "start": "244120",
    "end": "247359"
  },
  {
    "text": "is super simple it's just a plain object",
    "start": "247359",
    "end": "249459"
  },
  {
    "text": "that has a type property which is a",
    "start": "249459",
    "end": "251079"
  },
  {
    "text": "string that defines the action that's",
    "start": "251079",
    "end": "252909"
  },
  {
    "text": "taking place and then it has an optional",
    "start": "252909",
    "end": "255159"
  },
  {
    "text": "payload that your reducer function can",
    "start": "255159",
    "end": "256900"
  },
  {
    "text": "use to construct the next state object",
    "start": "256900",
    "end": "258820"
  },
  {
    "text": "for the store now our service class",
    "start": "258820",
    "end": "261609"
  },
  {
    "text": "itself only has two properties the state",
    "start": "261609",
    "end": "264279"
  },
  {
    "text": "itself is our immutable data as an",
    "start": "264279",
    "end": "266200"
  },
  {
    "text": "observable and then our",
    "start": "266200",
    "end": "267650"
  },
  {
    "text": "actions are an rxjs subject which would",
    "start": "267650",
    "end": "270139"
  },
  {
    "text": "just be a stream of the action class",
    "start": "270139",
    "end": "272120"
  },
  {
    "text": "that we just created to make this",
    "start": "272120",
    "end": "274310"
  },
  {
    "text": "pattern super readable in the code I'm",
    "start": "274310",
    "end": "275930"
  },
  {
    "text": "going to create a custom rxjs operator",
    "start": "275930",
    "end": "278600"
  },
  {
    "text": "that we can pipe into our action stream",
    "start": "278600",
    "end": "280810"
  },
  {
    "text": "remember the state is 100% determined by",
    "start": "280810",
    "end": "283910"
  },
  {
    "text": "the actions so we can say our state",
    "start": "283910",
    "end": "285830"
  },
  {
    "text": "observable is equal to the actions which",
    "start": "285830",
    "end": "288020"
  },
  {
    "text": "will convert the actions to an",
    "start": "288020",
    "end": "289340"
  },
  {
    "text": "observable and then we can pipe in the",
    "start": "289340",
    "end": "291229"
  },
  {
    "text": "reducer operator that will create here",
    "start": "291229",
    "end": "293150"
  },
  {
    "text": "in the next step rxjs has an operator",
    "start": "293150",
    "end": "296389"
  },
  {
    "text": "called scan which will allow you to",
    "start": "296389",
    "end": "298039"
  },
  {
    "text": "accumulate values as they're emitted",
    "start": "298039",
    "end": "300050"
  },
  {
    "text": "through the observable to create a",
    "start": "300050",
    "end": "302030"
  },
  {
    "text": "custom operator in rxjs all you have to",
    "start": "302030",
    "end": "304220"
  },
  {
    "text": "do is create a function that returns an",
    "start": "304220",
    "end": "305990"
  },
  {
    "text": "existing operators such as scan and scan",
    "start": "305990",
    "end": "308750"
  },
  {
    "text": "provides two things first the",
    "start": "308750",
    "end": "310280"
  },
  {
    "text": "accumulated object which would be our",
    "start": "310280",
    "end": "312050"
  },
  {
    "text": "current state and also the current",
    "start": "312050",
    "end": "313850"
  },
  {
    "text": "action that was emitted through the",
    "start": "313850",
    "end": "315350"
  },
  {
    "text": "action stream subject now the only thing",
    "start": "315350",
    "end": "318199"
  },
  {
    "text": "we have to do is write some logic to",
    "start": "318199",
    "end": "319760"
  },
  {
    "text": "return the next state based on these two",
    "start": "319760",
    "end": "321770"
  },
  {
    "text": "input objects",
    "start": "321770",
    "end": "323110"
  },
  {
    "text": "traditionally in redux this is done with",
    "start": "323110",
    "end": "325190"
  },
  {
    "text": "a switch statement where we look at the",
    "start": "325190",
    "end": "327110"
  },
  {
    "text": "action type and then perform some logic",
    "start": "327110",
    "end": "329180"
  },
  {
    "text": "based on the type of action that was",
    "start": "329180",
    "end": "330500"
  },
  {
    "text": "dispatched but you don't necessarily",
    "start": "330500",
    "end": "331849"
  },
  {
    "text": "have to do it this way so if we have an",
    "start": "331849",
    "end": "334639"
  },
  {
    "text": "action type of set we'll go ahead and",
    "start": "334639",
    "end": "336260"
  },
  {
    "text": "set the next state as the action payload",
    "start": "336260",
    "end": "338750"
  },
  {
    "text": "which will just overwrite everything in",
    "start": "338750",
    "end": "340340"
  },
  {
    "text": "the state then if we have an update",
    "start": "340340",
    "end": "342889"
  },
  {
    "text": "action we'll go ahead and use the spread",
    "start": "342889",
    "end": "344659"
  },
  {
    "text": "syntax to merge the payload object into",
    "start": "344659",
    "end": "347539"
  },
  {
    "text": "the current state that will give us a",
    "start": "347539",
    "end": "349430"
  },
  {
    "text": "non-destructive update then if we're",
    "start": "349430",
    "end": "351470"
  },
  {
    "text": "going to delete a property we can use",
    "start": "351470",
    "end": "353270"
  },
  {
    "text": "the low - omit operator that's a lot",
    "start": "353270",
    "end": "355460"
  },
  {
    "text": "cleaner than trying to iterate through",
    "start": "355460",
    "end": "356960"
  },
  {
    "text": "all the object keys on your own so you",
    "start": "356960",
    "end": "359090"
  },
  {
    "text": "could pass delete either an object",
    "start": "359090",
    "end": "360740"
  },
  {
    "text": "property or an array of properties and",
    "start": "360740",
    "end": "362659"
  },
  {
    "text": "they would all be deleted from the state",
    "start": "362659",
    "end": "364220"
  },
  {
    "text": "in that action so that's all there is to",
    "start": "364220",
    "end": "366380"
  },
  {
    "text": "it we take the current state in the",
    "start": "366380",
    "end": "367760"
  },
  {
    "text": "action and use it to compose the next",
    "start": "367760",
    "end": "369919"
  },
  {
    "text": "state but we're not quite done yet we",
    "start": "369919",
    "end": "372320"
  },
  {
    "text": "still need to set up a way to dispatch",
    "start": "372320",
    "end": "373760"
  },
  {
    "text": "actions and also select a slice of the",
    "start": "373760",
    "end": "376550"
  },
  {
    "text": "state dispatching an action is super",
    "start": "376550",
    "end": "379789"
  },
  {
    "text": "easy all we have to do is write a method",
    "start": "379789",
    "end": "381440"
  },
  {
    "text": "here that takes an action as an argument",
    "start": "381440",
    "end": "383599"
  },
  {
    "text": "and then we'll go ahead and call actions",
    "start": "383599",
    "end": "385550"
  },
  {
    "text": "next and push that next action to the",
    "start": "385550",
    "end": "387889"
  },
  {
    "text": "stream now when it comes to selecting",
    "start": "387889",
    "end": "390800"
  },
  {
    "text": "data from the store things get a little",
    "start": "390800",
    "end": "392750"
  },
  {
    "text": "more tricky",
    "start": "392750",
    "end": "393289"
  },
  {
    "text": "the first issue we'll tackle is that",
    "start": "393289",
    "end": "395330"
  },
  {
    "text": "this observable should be shared between",
    "start": "395330",
    "end": "396979"
  },
  {
    "text": "all subscribers in other words we don't",
    "start": "396979",
    "end": "399380"
  },
  {
    "text": "want to create a new observable every",
    "start": "399380",
    "end": "400909"
  },
  {
    "text": "time",
    "start": "400909",
    "end": "401420"
  },
  {
    "text": "new subscription happens on the store on",
    "start": "401420",
    "end": "403730"
  },
  {
    "text": "top of that we want to make sure that a",
    "start": "403730",
    "end": "405350"
  },
  {
    "text": "new subscription always gets a value",
    "start": "405350",
    "end": "407180"
  },
  {
    "text": "when you have a hot observable and it",
    "start": "407180",
    "end": "409490"
  },
  {
    "text": "receives a new subscriber that",
    "start": "409490",
    "end": "410990"
  },
  {
    "text": "subscriber won't receive any data that",
    "start": "410990",
    "end": "413120"
  },
  {
    "text": "was emitted in the past well fortunately",
    "start": "413120",
    "end": "415460"
  },
  {
    "text": "we can solve all these problems with one",
    "start": "415460",
    "end": "417260"
  },
  {
    "text": "magical operator called share replay",
    "start": "417260",
    "end": "419300"
  },
  {
    "text": "this will ensure that all subscribers",
    "start": "419300",
    "end": "421010"
  },
  {
    "text": "are sharing the same source state and it",
    "start": "421010",
    "end": "423680"
  },
  {
    "text": "will also save the last emitted state so",
    "start": "423680",
    "end": "425690"
  },
  {
    "text": "new subscribers will always get a value",
    "start": "425690",
    "end": "427670"
  },
  {
    "text": "when they subscribe for the first time",
    "start": "427670",
    "end": "429050"
  },
  {
    "text": "now our last major hurdle is figuring",
    "start": "429050",
    "end": "431600"
  },
  {
    "text": "out how to select a slice of the state",
    "start": "431600",
    "end": "433490"
  },
  {
    "text": "or a nested object property and only",
    "start": "433490",
    "end": "435920"
  },
  {
    "text": "listen to changes on that slice once",
    "start": "435920",
    "end": "438980"
  },
  {
    "text": "again for that I'm going to create my",
    "start": "438980",
    "end": "440540"
  },
  {
    "text": "own custom rxjs operator it takes the",
    "start": "440540",
    "end": "443900"
  },
  {
    "text": "path as an argument which is just a",
    "start": "443900",
    "end": "445640"
  },
  {
    "text": "string and dot notation that points to",
    "start": "445640",
    "end": "447740"
  },
  {
    "text": "the object property that you want to",
    "start": "447740",
    "end": "449450"
  },
  {
    "text": "observe and again you don't have to make",
    "start": "449450",
    "end": "451730"
  },
  {
    "text": "this a custom operator I'm doing it",
    "start": "451730",
    "end": "453230"
  },
  {
    "text": "strictly for code readability it's going",
    "start": "453230",
    "end": "455870"
  },
  {
    "text": "to take the current state observable and",
    "start": "455870",
    "end": "457580"
  },
  {
    "text": "then map it down to a nested object",
    "start": "457580",
    "end": "460160"
  },
  {
    "text": "property lodash has a get method that",
    "start": "460160",
    "end": "462200"
  },
  {
    "text": "makes this super easy so we just called",
    "start": "462200",
    "end": "463970"
  },
  {
    "text": "get with the current state object and",
    "start": "463970",
    "end": "465710"
  },
  {
    "text": "then the path string that we want to",
    "start": "465710",
    "end": "467600"
  },
  {
    "text": "grab then as a third argument will pass",
    "start": "467600",
    "end": "470210"
  },
  {
    "text": "the default value if it doesn't exist",
    "start": "470210",
    "end": "471650"
  },
  {
    "text": "which can just be null now normally this",
    "start": "471650",
    "end": "474200"
  },
  {
    "text": "would emit the same object over and over",
    "start": "474200",
    "end": "476120"
  },
  {
    "text": "again because this nested state is still",
    "start": "476120",
    "end": "478580"
  },
  {
    "text": "tied to the parent observable but we can",
    "start": "478580",
    "end": "480710"
  },
  {
    "text": "create a really beautiful marriage",
    "start": "480710",
    "end": "481940"
  },
  {
    "text": "between rxjs and lodash here we take the",
    "start": "481940",
    "end": "484520"
  },
  {
    "text": "RX distinct until changed operator which",
    "start": "484520",
    "end": "487160"
  },
  {
    "text": "will only emit unique values but under",
    "start": "487160",
    "end": "489530"
  },
  {
    "text": "the hood it's using the regular",
    "start": "489530",
    "end": "490850"
  },
  {
    "text": "JavaScript equality operator that will",
    "start": "490850",
    "end": "493040"
  },
  {
    "text": "work for plain numbers and strings but",
    "start": "493040",
    "end": "494840"
  },
  {
    "text": "it won't work for any objects that get",
    "start": "494840",
    "end": "496460"
  },
  {
    "text": "emitted through the observable but we",
    "start": "496460",
    "end": "498290"
  },
  {
    "text": "can pass it the is equal function from",
    "start": "498290",
    "end": "499910"
  },
  {
    "text": "lodash which does a deep comparison on",
    "start": "499910",
    "end": "502010"
  },
  {
    "text": "object properties so now your sliced",
    "start": "502010",
    "end": "504470"
  },
  {
    "text": "observable will only emit new values if",
    "start": "504470",
    "end": "506480"
  },
  {
    "text": "the data that it's actually listening to",
    "start": "506480",
    "end": "508130"
  },
  {
    "text": "changes so that's pretty amazing for a",
    "start": "508130",
    "end": "510560"
  },
  {
    "text": "single line of code but now we're ready",
    "start": "510560",
    "end": "512840"
  },
  {
    "text": "for the moment that you've all been",
    "start": "512840",
    "end": "513860"
  },
  {
    "text": "waiting for",
    "start": "513860",
    "end": "514400"
  },
  {
    "text": "and that's wiring up Redux dev tools if",
    "start": "514400",
    "end": "516740"
  },
  {
    "text": "you don't have it installed yet you can",
    "start": "516740",
    "end": "518750"
  },
  {
    "text": "find it on the Chrome Web Store and it's",
    "start": "518750",
    "end": "521090"
  },
  {
    "text": "super easy to setup because under the",
    "start": "521090",
    "end": "522770"
  },
  {
    "text": "hood it's just using the same Redux",
    "start": "522770",
    "end": "524240"
  },
  {
    "text": "pattern that we've already implemented",
    "start": "524240",
    "end": "525680"
  },
  {
    "text": "in this app we can interact with it on",
    "start": "525680",
    "end": "527990"
  },
  {
    "text": "the window object in the browser so I'll",
    "start": "527990",
    "end": "529880"
  },
  {
    "text": "create a variable here for the window",
    "start": "529880",
    "end": "531850"
  },
  {
    "text": "then when the service is constructed",
    "start": "531850",
    "end": "534260"
  },
  {
    "text": "I'll go ahead and set it up as a",
    "start": "534260",
    "end": "536180"
  },
  {
    "text": "property on the window called dev tools",
    "start": "536180",
    "end": "538010"
  },
  {
    "text": "and we can find the extension and call",
    "start": "538010",
    "end": "540260"
  },
  {
    "text": "connect on it then the only thing left",
    "start": "540260",
    "end": "542630"
  },
  {
    "text": "to do is pass it the current action and",
    "start": "542630",
    "end": "544760"
  },
  {
    "text": "the state which we already have in our",
    "start": "544760",
    "end": "546560"
  },
  {
    "text": "reducer function so we can simply call",
    "start": "546560",
    "end": "549440"
  },
  {
    "text": "window dev tool send pass it the action",
    "start": "549440",
    "end": "551870"
  },
  {
    "text": "type and the next state and there's a",
    "start": "551870",
    "end": "554240"
  },
  {
    "text": "bunch can customize and configure dev",
    "start": "554240",
    "end": "556130"
  },
  {
    "text": "tools this is just your most basic use",
    "start": "556130",
    "end": "558050"
  },
  {
    "text": "case so hopefully that gives you an idea",
    "start": "558050",
    "end": "560240"
  },
  {
    "text": "of some of the fundamental principles",
    "start": "560240",
    "end": "561410"
  },
  {
    "text": "behind redux style state management",
    "start": "561410",
    "end": "563540"
  },
  {
    "text": "libraries like ng RX + ng XS if this",
    "start": "563540",
    "end": "567050"
  },
  {
    "text": "video helped you please like and",
    "start": "567050",
    "end": "568190"
  },
  {
    "text": "subscribe and if you want to learn more",
    "start": "568190",
    "end": "569870"
  },
  {
    "text": "about stuff like this to get your",
    "start": "569870",
    "end": "571220"
  },
  {
    "text": "angular app in production consider",
    "start": "571220",
    "end": "572840"
  },
  {
    "text": "becoming a pro member at angular",
    "start": "572840",
    "end": "574370"
  },
  {
    "text": "firebase comm you'll get a free copy my",
    "start": "574370",
    "end": "576410"
  },
  {
    "text": "book as well as one on one project",
    "start": "576410",
    "end": "578000"
  },
  {
    "text": "support thanks for watching and I'll",
    "start": "578000",
    "end": "580160"
  },
  {
    "text": "talk to you soon",
    "start": "580160",
    "end": "582819"
  }
]