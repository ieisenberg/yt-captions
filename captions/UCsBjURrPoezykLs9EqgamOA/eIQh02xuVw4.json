[
  {
    "text": "graphql a query language for reading and",
    "start": "640",
    "end": "3760"
  },
  {
    "text": "mutating data in apis",
    "start": "3760",
    "end": "5759"
  },
  {
    "text": "as a back-end developer graphql provides",
    "start": "5759",
    "end": "8240"
  },
  {
    "text": "a type system",
    "start": "8240",
    "end": "9120"
  },
  {
    "text": "where you can describe a schema for your",
    "start": "9120",
    "end": "11200"
  },
  {
    "text": "data in turn",
    "start": "11200",
    "end": "12400"
  },
  {
    "text": "this gives front-end consumers of the",
    "start": "12400",
    "end": "14160"
  },
  {
    "text": "api the power to explore",
    "start": "14160",
    "end": "16080"
  },
  {
    "text": "and request the exact data they need",
    "start": "16080",
    "end": "18480"
  },
  {
    "text": "traditionally",
    "start": "18480",
    "end": "19199"
  },
  {
    "text": "web developers have consumed apis using",
    "start": "19199",
    "end": "21600"
  },
  {
    "text": "rest where data entities",
    "start": "21600",
    "end": "23199"
  },
  {
    "text": "live on a bunch of urls on a server when",
    "start": "23199",
    "end": "25439"
  },
  {
    "text": "a request is received",
    "start": "25439",
    "end": "26720"
  },
  {
    "text": "the api responds with the full data",
    "start": "26720",
    "end": "28560"
  },
  {
    "text": "payload of that entity",
    "start": "28560",
    "end": "30000"
  },
  {
    "text": "that sounds simple enough but there are",
    "start": "30000",
    "end": "31840"
  },
  {
    "text": "two potential drawbacks here",
    "start": "31840",
    "end": "33440"
  },
  {
    "text": "we may need multiple entities at one",
    "start": "33440",
    "end": "35200"
  },
  {
    "text": "time in which case",
    "start": "35200",
    "end": "36480"
  },
  {
    "text": "each request is under fetching the",
    "start": "36480",
    "end": "38480"
  },
  {
    "text": "actual data we want",
    "start": "38480",
    "end": "39760"
  },
  {
    "text": "in other cases we may only want a small",
    "start": "39760",
    "end": "42079"
  },
  {
    "text": "subset of a data entity",
    "start": "42079",
    "end": "43760"
  },
  {
    "text": "in which case we need to over fetch from",
    "start": "43760",
    "end": "45760"
  },
  {
    "text": "the api and that of course is bad for",
    "start": "45760",
    "end": "48000"
  },
  {
    "text": "the environment",
    "start": "48000",
    "end": "48800"
  },
  {
    "text": "how dare you instead of multiple urls a",
    "start": "48800",
    "end": "51760"
  },
  {
    "text": "graphql api",
    "start": "51760",
    "end": "52960"
  },
  {
    "text": "has a single entry point data is queried",
    "start": "52960",
    "end": "55520"
  },
  {
    "text": "or fetched",
    "start": "55520",
    "end": "56320"
  },
  {
    "text": "by describing it with a syntax that",
    "start": "56320",
    "end": "58399"
  },
  {
    "text": "mirrors its return shape in json",
    "start": "58399",
    "end": "60640"
  },
  {
    "text": "the front-end developer describes the",
    "start": "60640",
    "end": "62160"
  },
  {
    "text": "data they want while the back-end",
    "start": "62160",
    "end": "63600"
  },
  {
    "text": "developer",
    "start": "63600",
    "end": "64320"
  },
  {
    "text": "writes code to resolve the request and",
    "start": "64320",
    "end": "66560"
  },
  {
    "text": "it all happens in a syntax that can work",
    "start": "66560",
    "end": "68479"
  },
  {
    "text": "with any programming language",
    "start": "68479",
    "end": "69920"
  },
  {
    "text": "we can start defining a schema with our",
    "start": "69920",
    "end": "71840"
  },
  {
    "text": "own custom objects using the type",
    "start": "71840",
    "end": "73680"
  },
  {
    "text": "keyword",
    "start": "73680",
    "end": "74320"
  },
  {
    "text": "a type can have multiple fields like a",
    "start": "74320",
    "end": "76640"
  },
  {
    "text": "unique id",
    "start": "76640",
    "end": "77520"
  },
  {
    "text": "and we'll make that required with a bang",
    "start": "77520",
    "end": "79360"
  },
  {
    "text": "let's also give it integer and string",
    "start": "79360",
    "end": "81119"
  },
  {
    "text": "values",
    "start": "81119",
    "end": "81680"
  },
  {
    "text": "then create a relationship with another",
    "start": "81680",
    "end": "83680"
  },
  {
    "text": "type a creator can have many videos",
    "start": "83680",
    "end": "86080"
  },
  {
    "text": "which we can represent by wrapping the",
    "start": "86080",
    "end": "87840"
  },
  {
    "text": "type in brackets on the flip side",
    "start": "87840",
    "end": "89840"
  },
  {
    "text": "a video belongs to a creator now every",
    "start": "89840",
    "end": "92640"
  },
  {
    "text": "graphql api",
    "start": "92640",
    "end": "93840"
  },
  {
    "text": "has a query type which is the main entry",
    "start": "93840",
    "end": "95920"
  },
  {
    "text": "point for a consumer of the api",
    "start": "95920",
    "end": "98079"
  },
  {
    "text": "we can query a list of videos or an",
    "start": "98079",
    "end": "100159"
  },
  {
    "text": "individual user based on their id",
    "start": "100159",
    "end": "102159"
  },
  {
    "text": "that's how a consumer reads data but",
    "start": "102159",
    "end": "103840"
  },
  {
    "text": "they may also want to mutate data",
    "start": "103840",
    "end": "106000"
  },
  {
    "text": "in which case we implement a mutation",
    "start": "106000",
    "end": "108000"
  },
  {
    "text": "type that defines how data can be",
    "start": "108000",
    "end": "109759"
  },
  {
    "text": "modified on the api",
    "start": "109759",
    "end": "111360"
  },
  {
    "text": "from there we can define code to resolve",
    "start": "111360",
    "end": "113119"
  },
  {
    "text": "this data in any programming language",
    "start": "113119",
    "end": "115280"
  },
  {
    "text": "once deployed any developer consuming",
    "start": "115280",
    "end": "117200"
  },
  {
    "text": "this api will be able to explore it with",
    "start": "117200",
    "end": "119360"
  },
  {
    "text": "a complete understanding",
    "start": "119360",
    "end": "120719"
  },
  {
    "text": "of all possible queries and data",
    "start": "120719",
    "end": "122560"
  },
  {
    "text": "entities which means the tooling can",
    "start": "122560",
    "end": "124320"
  },
  {
    "text": "autocomplete your query as you type it",
    "start": "124320",
    "end": "126240"
  },
  {
    "text": "out in your editor",
    "start": "126240",
    "end": "127280"
  },
  {
    "text": "this has been graphql in 100 seconds if",
    "start": "127280",
    "end": "129679"
  },
  {
    "text": "you want to see more short videos like",
    "start": "129679",
    "end": "130959"
  },
  {
    "text": "this make sure to like and subscribe and",
    "start": "130959",
    "end": "132879"
  },
  {
    "text": "turn on notifications because there is a",
    "start": "132879",
    "end": "134800"
  },
  {
    "text": "lot more on the way",
    "start": "134800",
    "end": "135760"
  },
  {
    "text": "thanks for watching and i will see you",
    "start": "135760",
    "end": "137840"
  },
  {
    "text": "in the next one",
    "start": "137840",
    "end": "143840"
  }
]