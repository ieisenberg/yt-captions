[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "today we're going to use flutter to",
    "start": "30",
    "end": "1650"
  },
  {
    "text": "build a clock and not just any ordinary",
    "start": "1650",
    "end": "3510"
  },
  {
    "text": "clock but a binary clock just a few days",
    "start": "3510",
    "end": "6089"
  },
  {
    "text": "ago the flutter team launched a new",
    "start": "6089",
    "end": "7589"
  },
  {
    "text": "competition where the goal is to build",
    "start": "7589",
    "end": "9510"
  },
  {
    "text": "the most beautiful clock face I don't",
    "start": "9510",
    "end": "11219"
  },
  {
    "text": "plan on entering this competition myself",
    "start": "11219",
    "end": "12870"
  },
  {
    "text": "so this video is more of a QuickStart",
    "start": "12870",
    "end": "14370"
  },
  {
    "text": "guide to get you started building your",
    "start": "14370",
    "end": "15750"
  },
  {
    "text": "own clock from scratch as you'll see in",
    "start": "15750",
    "end": "17699"
  },
  {
    "text": "a few minutes",
    "start": "17699",
    "end": "18270"
  },
  {
    "text": "building a clock and flutter is really",
    "start": "18270",
    "end": "20039"
  },
  {
    "text": "easy so in order to make this video a",
    "start": "20039",
    "end": "21869"
  },
  {
    "text": "little more challenging I also want to",
    "start": "21869",
    "end": "23519"
  },
  {
    "text": "teach you everything you didn't know",
    "start": "23519",
    "end": "24869"
  },
  {
    "text": "about binary and if you're entering the",
    "start": "24869",
    "end": "26760"
  },
  {
    "text": "flutter clock competition make sure to",
    "start": "26760",
    "end": "28500"
  },
  {
    "text": "watch until the end of the video because",
    "start": "28500",
    "end": "29970"
  },
  {
    "text": "I'll be sharing additional clock ideas",
    "start": "29970",
    "end": "31590"
  },
  {
    "text": "there that you're more than welcome to",
    "start": "31590",
    "end": "32820"
  },
  {
    "text": "steal from me if you're new here like",
    "start": "32820",
    "end": "34559"
  },
  {
    "text": "and subscribe and you can grab the full",
    "start": "34559",
    "end": "36030"
  },
  {
    "text": "source code from fire ship IO in order",
    "start": "36030",
    "end": "38489"
  },
  {
    "start": "38000",
    "end": "117000"
  },
  {
    "text": "to build a binary clock we need to know",
    "start": "38489",
    "end": "40290"
  },
  {
    "text": "a little bit about how binary works in",
    "start": "40290",
    "end": "42059"
  },
  {
    "text": "mathematics a binary number is just a",
    "start": "42059",
    "end": "44460"
  },
  {
    "text": "number that has two possible States",
    "start": "44460",
    "end": "46140"
  },
  {
    "text": "which we can represent as a 0 or 1 you",
    "start": "46140",
    "end": "49170"
  },
  {
    "text": "can think of this logically as true or",
    "start": "49170",
    "end": "50730"
  },
  {
    "text": "false or electronically as on off and in",
    "start": "50730",
    "end": "53910"
  },
  {
    "text": "computer systems we call a single binary",
    "start": "53910",
    "end": "55770"
  },
  {
    "text": "value a bit now a single bit by itself",
    "start": "55770",
    "end": "58829"
  },
  {
    "text": "can't represent very much just two",
    "start": "58829",
    "end": "60750"
  },
  {
    "text": "values to be precise so how do we make",
    "start": "60750",
    "end": "63090"
  },
  {
    "text": "bits represent more complex data well we",
    "start": "63090",
    "end": "65400"
  },
  {
    "text": "simply combine them together when you",
    "start": "65400",
    "end": "67170"
  },
  {
    "text": "combine bits together it creates a",
    "start": "67170",
    "end": "68790"
  },
  {
    "text": "geometric series where the number of",
    "start": "68790",
    "end": "70650"
  },
  {
    "text": "different values we can represent is",
    "start": "70650",
    "end": "72180"
  },
  {
    "text": "determined by 2 to the power of the",
    "start": "72180",
    "end": "74220"
  },
  {
    "text": "number of bits that we have so 2 to the",
    "start": "74220",
    "end": "76680"
  },
  {
    "text": "power of 1 equals 2 which means we can",
    "start": "76680",
    "end": "78810"
  },
  {
    "text": "represent two things 2 to the power of 2",
    "start": "78810",
    "end": "81000"
  },
  {
    "text": "is 4 so we can represent 4 things with 2",
    "start": "81000",
    "end": "83130"
  },
  {
    "text": "bits but when talking about bits we",
    "start": "83130",
    "end": "85470"
  },
  {
    "text": "usually think about them grouped in",
    "start": "85470",
    "end": "86880"
  },
  {
    "text": "series of 8 which is a single bite a",
    "start": "86880",
    "end": "89070"
  },
  {
    "text": "bite would be 2 to the power of 8 which",
    "start": "89070",
    "end": "91619"
  },
  {
    "text": "can represent 256 different things now",
    "start": "91619",
    "end": "94560"
  },
  {
    "text": "the reason we call 8 bits a byte is",
    "start": "94560",
    "end": "96540"
  },
  {
    "text": "somewhat arbitrary it's just a good even",
    "start": "96540",
    "end": "98820"
  },
  {
    "text": "number and contains a enough space for",
    "start": "98820",
    "end": "100650"
  },
  {
    "text": "all the letters of the alphabet and",
    "start": "100650",
    "end": "102060"
  },
  {
    "text": "uppercase and lowercase for example you",
    "start": "102060",
    "end": "104520"
  },
  {
    "text": "may have heard of utf-8 which stands for",
    "start": "104520",
    "end": "106380"
  },
  {
    "text": "8 bit Unicode transformation format it",
    "start": "106380",
    "end": "108960"
  },
  {
    "text": "encodes millions of different characters",
    "start": "108960",
    "end": "110520"
  },
  {
    "text": "from languages around the world",
    "start": "110520",
    "end": "111540"
  },
  {
    "text": "including emojis and does so by",
    "start": "111540",
    "end": "113909"
  },
  {
    "text": "combining 1 2 4 8 bit bytes together so",
    "start": "113909",
    "end": "116399"
  },
  {
    "text": "whenever you use Unicode characters in",
    "start": "116399",
    "end": "118020"
  },
  {
    "start": "117000",
    "end": "158000"
  },
  {
    "text": "your code which is all the time each",
    "start": "118020",
    "end": "119909"
  },
  {
    "text": "character is actually encoded to a",
    "start": "119909",
    "end": "121680"
  },
  {
    "text": "binary value and the computer uses that",
    "start": "121680",
    "end": "123810"
  },
  {
    "text": "value to look in this giant table to",
    "start": "123810",
    "end": "125759"
  },
  {
    "text": "figure out which character to actually",
    "start": "125759",
    "end": "127500"
  },
  {
    "text": "show on the screen or the UI in fact",
    "start": "127500",
    "end": "129690"
  },
  {
    "text": "here's a cool little trick you can do in",
    "start": "129690",
    "end": "131340"
  },
  {
    "text": "your dart code start with a string and",
    "start": "131340",
    "end": "133349"
  },
  {
    "text": "then",
    "start": "133349",
    "end": "133740"
  },
  {
    "text": "rabbits actual character code from the",
    "start": "133740",
    "end": "135360"
  },
  {
    "text": "utf-8 table by calling code unit at a",
    "start": "135360",
    "end": "138000"
  },
  {
    "text": "given index in that string that will",
    "start": "138000",
    "end": "139950"
  },
  {
    "text": "give you a base ten decimal by default",
    "start": "139950",
    "end": "141930"
  },
  {
    "text": "if you want to convert it to binary call",
    "start": "141930",
    "end": "144060"
  },
  {
    "text": "to radix string with a base of two radix",
    "start": "144060",
    "end": "147090"
  },
  {
    "text": "is just another name for bass so it's",
    "start": "147090",
    "end": "149040"
  },
  {
    "text": "taking the original base ten number that",
    "start": "149040",
    "end": "150810"
  },
  {
    "text": "we normally use and converting it to a",
    "start": "150810",
    "end": "152700"
  },
  {
    "text": "base two binary value so that's how",
    "start": "152700",
    "end": "155430"
  },
  {
    "text": "binary works to high-level but how do we",
    "start": "155430",
    "end": "157230"
  },
  {
    "text": "actually use the ones and zeros to",
    "start": "157230",
    "end": "158610"
  },
  {
    "text": "represent more complex data like how do",
    "start": "158610",
    "end": "161400"
  },
  {
    "text": "we use binary to tell time you can see",
    "start": "161400",
    "end": "163890"
  },
  {
    "text": "we have six columns on the clock where",
    "start": "163890",
    "end": "165510"
  },
  {
    "text": "each column is used to represent a digit",
    "start": "165510",
    "end": "167580"
  },
  {
    "text": "in time blue shows the hours green the",
    "start": "167580",
    "end": "169860"
  },
  {
    "text": "minutes and pink the seconds the large",
    "start": "169860",
    "end": "172410"
  },
  {
    "text": "colorful numbers represent the time in",
    "start": "172410",
    "end": "174750"
  },
  {
    "text": "digits that you would be familiar with",
    "start": "174750",
    "end": "176070"
  },
  {
    "text": "and you'll see our flutter clock is",
    "start": "176070",
    "end": "177780"
  },
  {
    "text": "synced up with the actual device clock",
    "start": "177780",
    "end": "179520"
  },
  {
    "text": "now each one of the cells or the",
    "start": "179520",
    "end": "181380"
  },
  {
    "text": "intersection between a row and a column",
    "start": "181380",
    "end": "182640"
  },
  {
    "text": "represents a bit",
    "start": "182640",
    "end": "184050"
  },
  {
    "text": "notice how inside of every cell we have",
    "start": "184050",
    "end": "186000"
  },
  {
    "text": "a number this is the actual value that",
    "start": "186000",
    "end": "188280"
  },
  {
    "text": "that bit represents so the bottom row",
    "start": "188280",
    "end": "190380"
  },
  {
    "text": "represents one's the second row",
    "start": "190380",
    "end": "191970"
  },
  {
    "text": "represents twos third row fours and the",
    "start": "191970",
    "end": "194430"
  },
  {
    "text": "top row aids if none of the cells are",
    "start": "194430",
    "end": "196680"
  },
  {
    "text": "highlighted then it represents a zero if",
    "start": "196680",
    "end": "198990"
  },
  {
    "text": "there's just a single cell highlighted",
    "start": "198990",
    "end": "200520"
  },
  {
    "text": "then you can assume that it represents",
    "start": "200520",
    "end": "202050"
  },
  {
    "text": "that number but if you have multiple",
    "start": "202050",
    "end": "203880"
  },
  {
    "text": "cells highlighted then you get the value",
    "start": "203880",
    "end": "205710"
  },
  {
    "text": "by adding them together for example if",
    "start": "205710",
    "end": "208140"
  },
  {
    "text": "we look at the first column we don't",
    "start": "208140",
    "end": "209790"
  },
  {
    "text": "have any bits highlighted so that means",
    "start": "209790",
    "end": "211710"
  },
  {
    "text": "it's a zero if we go to the next column",
    "start": "211710",
    "end": "213570"
  },
  {
    "text": "we have an eight and a one highlighted",
    "start": "213570",
    "end": "215460"
  },
  {
    "text": "add those together and you get nine",
    "start": "215460",
    "end": "217520"
  },
  {
    "text": "continue that process for all the other",
    "start": "217520",
    "end": "219870"
  },
  {
    "text": "columns and that's how you read a binary",
    "start": "219870",
    "end": "221910"
  },
  {
    "text": "clock you'll notice that some of the",
    "start": "221910",
    "end": "223920"
  },
  {
    "text": "columns have four rows but others only",
    "start": "223920",
    "end": "225720"
  },
  {
    "text": "have two or three you'll notice the",
    "start": "225720",
    "end": "227430"
  },
  {
    "text": "column with four rows represents the",
    "start": "227430",
    "end": "229050"
  },
  {
    "text": "ones position four hours minutes and",
    "start": "229050",
    "end": "230880"
  },
  {
    "text": "seconds we need four bits for these",
    "start": "230880",
    "end": "232770"
  },
  {
    "text": "columns because their value can range",
    "start": "232770",
    "end": "234300"
  },
  {
    "text": "from 0 to 9 and 4 bits allows us to",
    "start": "234300",
    "end": "237120"
  },
  {
    "text": "represent 16 different values but when",
    "start": "237120",
    "end": "239730"
  },
  {
    "text": "it comes to seconds in minutes we only",
    "start": "239730",
    "end": "241350"
  },
  {
    "text": "need to represent 6 values because a",
    "start": "241350",
    "end": "243180"
  },
  {
    "text": "clock can only go up to 60 seconds or 60",
    "start": "243180",
    "end": "245670"
  },
  {
    "text": "minutes and we can represent 6 values",
    "start": "245670",
    "end": "247530"
  },
  {
    "text": "with 3 bits and when it comes to hours",
    "start": "247530",
    "end": "249900"
  },
  {
    "text": "there's only 24 hours in a day which",
    "start": "249900",
    "end": "251640"
  },
  {
    "text": "means we only need to represent a 0 1 or",
    "start": "251640",
    "end": "253770"
  },
  {
    "text": "a 2 which we can do with 2 bits so now",
    "start": "253770",
    "end": "256980"
  },
  {
    "text": "that you know how a binary clock works",
    "start": "256980",
    "end": "258390"
  },
  {
    "text": "let's go ahead and build one from",
    "start": "258390",
    "end": "259890"
  },
  {
    "text": "scratch with flutter let's go ahead and",
    "start": "259890",
    "end": "262049"
  },
  {
    "text": "get started from a new flutter project",
    "start": "262049",
    "end": "263820"
  },
  {
    "text": "if you're entering the competition you",
    "start": "263820",
    "end": "265830"
  },
  {
    "start": "264000",
    "end": "618000"
  },
  {
    "text": "can clone the repo from the con",
    "start": "265830",
    "end": "267420"
  },
  {
    "text": "homepage we do have one dependency for",
    "start": "267420",
    "end": "269730"
  },
  {
    "text": "our app int L so we'll go ahead and add",
    "start": "269730",
    "end": "271830"
  },
  {
    "text": "that to the pub spec yeah mol it's used",
    "start": "271830",
    "end": "273750"
  },
  {
    "text": "for date formatting and localization of",
    "start": "273750",
    "end": "275700"
  },
  {
    "text": "timestamps which tends to be pretty",
    "start": "275700",
    "end": "277800"
  },
  {
    "text": "useful if you're building a clock inside",
    "start": "277800",
    "end": "280620"
  },
  {
    "text": "the main dot dart file we'll go ahead",
    "start": "280620",
    "end": "282060"
  },
  {
    "text": "and import dart async dart math and then",
    "start": "282060",
    "end": "284790"
  },
  {
    "text": "we'll use system chrome and device",
    "start": "284790",
    "end": "285990"
  },
  {
    "text": "orientation from the flutter services",
    "start": "285990",
    "end": "288000"
  },
  {
    "text": "package the competition requires that",
    "start": "288000",
    "end": "290610"
  },
  {
    "text": "the app is in landscape mode so in our",
    "start": "290610",
    "end": "292710"
  },
  {
    "text": "main function we'll go ahead and use",
    "start": "292710",
    "end": "294210"
  },
  {
    "text": "system Chrome to set the preferred",
    "start": "294210",
    "end": "295950"
  },
  {
    "text": "orientations to landscape left or",
    "start": "295950",
    "end": "298170"
  },
  {
    "text": "landscape right and moving down to the",
    "start": "298170",
    "end": "300630"
  },
  {
    "text": "app itself we have a material app with",
    "start": "300630",
    "end": "302820"
  },
  {
    "text": "some basic theme data and then we have a",
    "start": "302820",
    "end": "304830"
  },
  {
    "text": "scaffold whose body is the clock",
    "start": "304830",
    "end": "307170"
  },
  {
    "text": "stateful widget so the entire app will",
    "start": "307170",
    "end": "309390"
  },
  {
    "text": "basically be coated inside of this",
    "start": "309390",
    "end": "311010"
  },
  {
    "text": "stateful widget that we're giving a name",
    "start": "311010",
    "end": "312720"
  },
  {
    "text": "of o'clock the first thing we'll want to",
    "start": "312720",
    "end": "315390"
  },
  {
    "text": "do is make our clock tick every second",
    "start": "315390",
    "end": "317460"
  },
  {
    "text": "we'll set up a property name now which",
    "start": "317460",
    "end": "319650"
  },
  {
    "text": "is equal to date/time now this is",
    "start": "319650",
    "end": "322020"
  },
  {
    "text": "actually the only state that we have on",
    "start": "322020",
    "end": "323760"
  },
  {
    "text": "the widget and the state will change",
    "start": "323760",
    "end": "325680"
  },
  {
    "text": "every second for every tick of the clock",
    "start": "325680",
    "end": "327570"
  },
  {
    "text": "we can set that up during the Annette",
    "start": "327570",
    "end": "329520"
  },
  {
    "text": "State lifecycle hook where we set up a",
    "start": "329520",
    "end": "331320"
  },
  {
    "text": "periodic timer with a duration of one",
    "start": "331320",
    "end": "333420"
  },
  {
    "text": "second that gives us a callback function",
    "start": "333420",
    "end": "335430"
  },
  {
    "text": "where we'll call set state to update the",
    "start": "335430",
    "end": "337770"
  },
  {
    "text": "now value now because we're building a",
    "start": "337770",
    "end": "340140"
  },
  {
    "text": "binary clock I'm going to abstract some",
    "start": "340140",
    "end": "342390"
  },
  {
    "text": "of the logic into my own custom class",
    "start": "342390",
    "end": "344160"
  },
  {
    "text": "called binary time this will take the",
    "start": "344160",
    "end": "346530"
  },
  {
    "text": "logic of converting a timestamp to",
    "start": "346530",
    "end": "348450"
  },
  {
    "text": "binary outside of the widget which will",
    "start": "348450",
    "end": "350310"
  },
  {
    "text": "make it a little easier to maintain and",
    "start": "350310",
    "end": "352050"
  },
  {
    "text": "hopefully easier to read but we actually",
    "start": "352050",
    "end": "353970"
  },
  {
    "text": "want here for our UI is an array of",
    "start": "353970",
    "end": "355860"
  },
  {
    "text": "strings where each string represents the",
    "start": "355860",
    "end": "358110"
  },
  {
    "text": "ones and zeros needed to display a given",
    "start": "358110",
    "end": "360750"
  },
  {
    "text": "column in the clock we'll call that list",
    "start": "360750",
    "end": "362880"
  },
  {
    "text": "binary integers and when this class is",
    "start": "362880",
    "end": "364830"
  },
  {
    "text": "instantiated",
    "start": "364830",
    "end": "365640"
  },
  {
    "text": "we'll grab the timestamp and then we'll",
    "start": "365640",
    "end": "367650"
  },
  {
    "text": "convert that timestamp to the hour",
    "start": "367650",
    "end": "369360"
  },
  {
    "text": "minute second format now by default the",
    "start": "369360",
    "end": "372150"
  },
  {
    "text": "hours minutes and seconds will be",
    "start": "372150",
    "end": "373410"
  },
  {
    "text": "separated by a colon which we don't need",
    "start": "373410",
    "end": "375120"
  },
  {
    "text": "and we can get rid of the colons by",
    "start": "375120",
    "end": "377010"
  },
  {
    "text": "using replace all with an empty string",
    "start": "377010",
    "end": "378870"
  },
  {
    "text": "that will give us a string with a length",
    "start": "378870",
    "end": "380640"
  },
  {
    "text": "of 6 and then we'll map each element",
    "start": "380640",
    "end": "382890"
  },
  {
    "text": "first to an integer then to a radix",
    "start": "382890",
    "end": "385320"
  },
  {
    "text": "string with a radix or base of two if",
    "start": "385320",
    "end": "388050"
  },
  {
    "text": "you remember earlier we talked about how",
    "start": "388050",
    "end": "389580"
  },
  {
    "text": "binary values have a base of two radix",
    "start": "389580",
    "end": "392430"
  },
  {
    "text": "is just another name for the base so",
    "start": "392430",
    "end": "394290"
  },
  {
    "text": "what it's doing is taking this integer",
    "start": "394290",
    "end": "395970"
  },
  {
    "text": "and converting it to a string of ones",
    "start": "395970",
    "end": "398400"
  },
  {
    "text": "and zeros I'd recommend playing around",
    "start": "398400",
    "end": "400350"
  },
  {
    "text": "with this a little bit on",
    "start": "400350",
    "end": "401270"
  },
  {
    "text": "artpad for example you can take an",
    "start": "401270",
    "end": "402980"
  },
  {
    "text": "integer and convert it to a radix string",
    "start": "402980",
    "end": "405200"
  },
  {
    "text": "with a given base or you can convert a",
    "start": "405200",
    "end": "407780"
  },
  {
    "text": "string back to an integer by passing in",
    "start": "407780",
    "end": "410450"
  },
  {
    "text": "a radix argument of two so unless you're",
    "start": "410450",
    "end": "412940"
  },
  {
    "text": "some kind of psychopath who understands",
    "start": "412940",
    "end": "414560"
  },
  {
    "text": "how to convert base-10 to base-2 I'd",
    "start": "414560",
    "end": "416570"
  },
  {
    "text": "recommend playing around with this a",
    "start": "416570",
    "end": "417770"
  },
  {
    "text": "little bit the last thing I'm going to",
    "start": "417770",
    "end": "419510"
  },
  {
    "text": "do is pad each of the binary integers",
    "start": "419510",
    "end": "421610"
  },
  {
    "text": "with zeros on the left side if they",
    "start": "421610",
    "end": "423440"
  },
  {
    "text": "don't exist this just makes them easier",
    "start": "423440",
    "end": "425360"
  },
  {
    "text": "to loop over when we get to the UI and",
    "start": "425360",
    "end": "427210"
  },
  {
    "text": "also to make our UI code a little more",
    "start": "427210",
    "end": "429590"
  },
  {
    "text": "readable I'm going to set up a getter",
    "start": "429590",
    "end": "431330"
  },
  {
    "text": "for each of the positions in the clock",
    "start": "431330",
    "end": "433250"
  },
  {
    "text": "the clock represents time in a base 10",
    "start": "433250",
    "end": "435320"
  },
  {
    "text": "system so we have the hours 10 position",
    "start": "435320",
    "end": "437480"
  },
  {
    "text": "the hours 1 position",
    "start": "437480",
    "end": "438890"
  },
  {
    "text": "the minutes tens and so on so that's how",
    "start": "438890",
    "end": "441650"
  },
  {
    "text": "we convert all of the base 10 digits in",
    "start": "441650",
    "end": "443360"
  },
  {
    "text": "a clock to binary now we just need to",
    "start": "443360",
    "end": "445250"
  },
  {
    "text": "loop over them and show a column in the",
    "start": "445250",
    "end": "447170"
  },
  {
    "text": "UI for each of the binary values so in",
    "start": "447170",
    "end": "450620"
  },
  {
    "text": "our state for widget will setup a",
    "start": "450620",
    "end": "451940"
  },
  {
    "text": "container with a little bit of padding",
    "start": "451940",
    "end": "453170"
  },
  {
    "text": "then we'll set up a row and this row",
    "start": "453170",
    "end": "455480"
  },
  {
    "text": "will contain six clock columns the clock",
    "start": "455480",
    "end": "457820"
  },
  {
    "text": "column will be a custom stateless widget",
    "start": "457820",
    "end": "459590"
  },
  {
    "text": "that we'll build next instead of",
    "start": "459590",
    "end": "461390"
  },
  {
    "text": "creating a loop here I'm just adding",
    "start": "461390",
    "end": "462860"
  },
  {
    "text": "each of the clock columns manually so we",
    "start": "462860",
    "end": "464840"
  },
  {
    "text": "can adjust the title the color and the",
    "start": "464840",
    "end": "467060"
  },
  {
    "text": "number of rows that are actually",
    "start": "467060",
    "end": "468290"
  },
  {
    "text": "displayed and each column takes a",
    "start": "468290",
    "end": "470180"
  },
  {
    "text": "different binary integer based on the",
    "start": "470180",
    "end": "471890"
  },
  {
    "text": "value of the clock that it's meant to",
    "start": "471890",
    "end": "473480"
  },
  {
    "text": "represent now each column will display",
    "start": "473480",
    "end": "475220"
  },
  {
    "text": "four rows so we'll go ahead and",
    "start": "475220",
    "end": "477140"
  },
  {
    "text": "implement that logic in this stateless",
    "start": "477140",
    "end": "479240"
  },
  {
    "text": "clock column widget it will take a few",
    "start": "479240",
    "end": "481610"
  },
  {
    "text": "input properties so we can customize the",
    "start": "481610",
    "end": "483650"
  },
  {
    "text": "title color and things like that as well",
    "start": "483650",
    "end": "485930"
  },
  {
    "text": "as the binary integer that it represents",
    "start": "485930",
    "end": "488210"
  },
  {
    "text": "and one additional property called bits",
    "start": "488210",
    "end": "490340"
  },
  {
    "text": "which will just be an array of the",
    "start": "490340",
    "end": "492020"
  },
  {
    "text": "values in the binary integer which will",
    "start": "492020",
    "end": "494000"
  },
  {
    "text": "contain four values of ones and zeros",
    "start": "494000",
    "end": "496420"
  },
  {
    "text": "inside the build method we'll go ahead",
    "start": "496420",
    "end": "498620"
  },
  {
    "text": "and set up a column we'll set the main",
    "start": "498620",
    "end": "500600"
  },
  {
    "text": "axis alignment to space between and then",
    "start": "500600",
    "end": "503030"
  },
  {
    "text": "the first child of that column will be",
    "start": "503030",
    "end": "504950"
  },
  {
    "text": "the title now the interesting part here",
    "start": "504950",
    "end": "507620"
  },
  {
    "text": "is showing the active cells inside the",
    "start": "507620",
    "end": "509270"
  },
  {
    "text": "column will do that by looping over the",
    "start": "509270",
    "end": "511340"
  },
  {
    "text": "four bits in the column but one kind of",
    "start": "511340",
    "end": "513409"
  },
  {
    "text": "annoying thing about dart is that it",
    "start": "513410",
    "end": "515030"
  },
  {
    "text": "does not allow us to access the index",
    "start": "515030",
    "end": "517039"
  },
  {
    "text": "inside of a map operation we can",
    "start": "517040",
    "end": "519020"
  },
  {
    "text": "overcome this limitation by simply",
    "start": "519020",
    "end": "520849"
  },
  {
    "text": "converting the list to a map grabbing",
    "start": "520850",
    "end": "522890"
  },
  {
    "text": "its entries then we can set local",
    "start": "522890",
    "end": "525020"
  },
  {
    "text": "variables for the value and the index",
    "start": "525020",
    "end": "527090"
  },
  {
    "text": "the settle is considered active if the",
    "start": "527090",
    "end": "529430"
  },
  {
    "text": "bit equals one if it's zero then it's",
    "start": "529430",
    "end": "531590"
  },
  {
    "text": "inactive you'll also notice in the UI",
    "start": "531590",
    "end": "533720"
  },
  {
    "text": "that each end",
    "start": "533720",
    "end": "534680"
  },
  {
    "text": "we'll sell shows the base-10 value that",
    "start": "534680",
    "end": "537260"
  },
  {
    "text": "that bit represents so how do we convert",
    "start": "537260",
    "end": "539750"
  },
  {
    "text": "a bit to a base 10 integer well if you",
    "start": "539750",
    "end": "542089"
  },
  {
    "text": "remember from earlier it's simply a",
    "start": "542089",
    "end": "543800"
  },
  {
    "text": "power of two so we'll take the power of",
    "start": "543800",
    "end": "545720"
  },
  {
    "text": "two and then raise it to three minus the",
    "start": "545720",
    "end": "548390"
  },
  {
    "text": "index we do 3 minus the index and not",
    "start": "548390",
    "end": "551330"
  },
  {
    "text": "the index directly because we're",
    "start": "551330",
    "end": "552770"
  },
  {
    "text": "actually looping and reverse here we're",
    "start": "552770",
    "end": "554510"
  },
  {
    "text": "starting with the highest value and then",
    "start": "554510",
    "end": "556160"
  },
  {
    "text": "going down to the lowest value so that",
    "start": "556160",
    "end": "559100"
  },
  {
    "text": "should be all the computation we need",
    "start": "559100",
    "end": "560510"
  },
  {
    "text": "for the UI so at this point we'll go",
    "start": "560510",
    "end": "562339"
  },
  {
    "text": "ahead and return an animated container",
    "start": "562339",
    "end": "564260"
  },
  {
    "text": "and then we'll set the duration to",
    "start": "564260",
    "end": "566240"
  },
  {
    "text": "around 500 milliseconds just so we can",
    "start": "566240",
    "end": "568370"
  },
  {
    "text": "animate the color when it goes from",
    "start": "568370",
    "end": "569870"
  },
  {
    "text": "active to inactive if we look at the box",
    "start": "569870",
    "end": "572959"
  },
  {
    "text": "decoration for the container you can see",
    "start": "572959",
    "end": "574850"
  },
  {
    "text": "if it's active we show the color that we",
    "start": "574850",
    "end": "576860"
  },
  {
    "text": "passed as an input property otherwise if",
    "start": "576860",
    "end": "579410"
  },
  {
    "text": "the index is less than 4 minus the Rose",
    "start": "579410",
    "end": "582560"
  },
  {
    "text": "then we'll go ahead and make that",
    "start": "582560",
    "end": "584089"
  },
  {
    "text": "invisible by setting the opacity to zero",
    "start": "584089",
    "end": "586600"
  },
  {
    "text": "otherwise we'll go ahead and show a",
    "start": "586600",
    "end": "588680"
  },
  {
    "text": "black or inactive cell then as the child",
    "start": "588680",
    "end": "591830"
  },
  {
    "text": "of the animated container we'll go ahead",
    "start": "591830",
    "end": "593360"
  },
  {
    "text": "and show the actual binary value in base",
    "start": "593360",
    "end": "595399"
  },
  {
    "text": "10 and we'll give it some opacity just",
    "start": "595399",
    "end": "597500"
  },
  {
    "text": "so it blends in with the existing cell",
    "start": "597500",
    "end": "599240"
  },
  {
    "text": "color then down below the cells I'll go",
    "start": "599240",
    "end": "601490"
  },
  {
    "text": "ahead and use integer parse with a radix",
    "start": "601490",
    "end": "604100"
  },
  {
    "text": "value of two this will convert the",
    "start": "604100",
    "end": "605930"
  },
  {
    "text": "binary integer to a decimal in base 10",
    "start": "605930",
    "end": "608839"
  },
  {
    "text": "format and then down below that we'll go",
    "start": "608839",
    "end": "610970"
  },
  {
    "text": "ahead and show the binary integer itself",
    "start": "610970",
    "end": "612680"
  },
  {
    "text": "in a smaller font size and that's all",
    "start": "612680",
    "end": "615260"
  },
  {
    "text": "there is to it we now have a fully",
    "start": "615260",
    "end": "616640"
  },
  {
    "text": "functional binary clock built with",
    "start": "616640",
    "end": "618290"
  },
  {
    "start": "618000",
    "end": "693000"
  },
  {
    "text": "flutter my hope with this video is that",
    "start": "618290",
    "end": "620540"
  },
  {
    "text": "someone watches it builds their own",
    "start": "620540",
    "end": "622100"
  },
  {
    "text": "clock and flutter and wins the",
    "start": "622100",
    "end": "623720"
  },
  {
    "text": "competition and there's some pretty",
    "start": "623720",
    "end": "625010"
  },
  {
    "text": "decent prizes for the top entries a",
    "start": "625010",
    "end": "626810"
  },
  {
    "text": "thing to keep in mind is that the point",
    "start": "626810",
    "end": "628459"
  },
  {
    "text": "of this competition is to build the UI",
    "start": "628459",
    "end": "630050"
  },
  {
    "text": "for the Lenovo smart display so a binary",
    "start": "630050",
    "end": "632930"
  },
  {
    "text": "clock might not be exactly what they're",
    "start": "632930",
    "end": "634550"
  },
  {
    "text": "going for but here are a few other ideas",
    "start": "634550",
    "end": "636320"
  },
  {
    "text": "that you might use to hopefully win this",
    "start": "636320",
    "end": "638209"
  },
  {
    "text": "competition one potential idea is to",
    "start": "638209",
    "end": "640310"
  },
  {
    "text": "integrate text into your clock so",
    "start": "640310",
    "end": "642529"
  },
  {
    "text": "instead of showing the digits at 7:30",
    "start": "642529",
    "end": "644329"
  },
  {
    "text": "you would say it is half-past seven so",
    "start": "644329",
    "end": "647120"
  },
  {
    "text": "you just need to write a little dart",
    "start": "647120",
    "end": "648529"
  },
  {
    "text": "algorithm that converts to a time stamp",
    "start": "648529",
    "end": "650240"
  },
  {
    "text": "into a human readable sentence another",
    "start": "650240",
    "end": "652670"
  },
  {
    "text": "idea is to recreate the classic flip",
    "start": "652670",
    "end": "654709"
  },
  {
    "text": "clock this should be relatively easy to",
    "start": "654709",
    "end": "656720"
  },
  {
    "text": "execute with flutter animation and your",
    "start": "656720",
    "end": "658640"
  },
  {
    "text": "own custom graphics also consider",
    "start": "658640",
    "end": "660529"
  },
  {
    "text": "building a clock that adjusts its color",
    "start": "660529",
    "end": "662180"
  },
  {
    "text": "gradient based on the time so the color",
    "start": "662180",
    "end": "664640"
  },
  {
    "text": "gradient will adjust every second",
    "start": "664640",
    "end": "666290"
  },
  {
    "text": "becoming darker at night and brighter",
    "start": "666290",
    "end": "668240"
  },
  {
    "text": "today ultimately I think the winning",
    "start": "668240",
    "end": "670790"
  },
  {
    "text": "design will be something that is clean",
    "start": "670790",
    "end": "672170"
  },
  {
    "text": "and modern that incorporates some",
    "start": "672170",
    "end": "673640"
  },
  {
    "text": "animation I'm gonna go ahead and wrap",
    "start": "673640",
    "end": "675470"
  },
  {
    "text": "things up there if this video helped you",
    "start": "675470",
    "end": "677120"
  },
  {
    "text": "please like and subscribe and consider",
    "start": "677120",
    "end": "678890"
  },
  {
    "text": "becoming a pro member at bioship i/o to",
    "start": "678890",
    "end": "680779"
  },
  {
    "text": "get access to the full flutter chorus",
    "start": "680779",
    "end": "682459"
  },
  {
    "text": "and a bunch of other exclusive content",
    "start": "682459",
    "end": "683899"
  },
  {
    "text": "thanks for watching and I will talk to",
    "start": "683899",
    "end": "686120"
  },
  {
    "text": "you soon",
    "start": "686120",
    "end": "687360"
  },
  {
    "text": "[Music]",
    "start": "687360",
    "end": "695509"
  }
]