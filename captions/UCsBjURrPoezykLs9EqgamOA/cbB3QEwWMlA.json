[
  {
    "text": "web assembly write applications for the",
    "start": "560",
    "end": "2639"
  },
  {
    "text": "web and languages other than javascript",
    "start": "2639",
    "end": "4720"
  },
  {
    "text": "imagine a world where you could build",
    "start": "4720",
    "end": "6080"
  },
  {
    "text": "software with c plus plus rust python go",
    "start": "6080",
    "end": "9120"
  },
  {
    "text": "or even cobalt then deliver that",
    "start": "9120",
    "end": "10800"
  },
  {
    "text": "software to the end user in a web",
    "start": "10800",
    "end": "12400"
  },
  {
    "text": "browser without any installation",
    "start": "12400",
    "end": "14160"
  },
  {
    "text": "and near native performance that world",
    "start": "14160",
    "end": "15759"
  },
  {
    "text": "became a reality in december 2019",
    "start": "15759",
    "end": "18080"
  },
  {
    "text": "when webassembly became an official w3c",
    "start": "18080",
    "end": "20640"
  },
  {
    "text": "standard",
    "start": "20640",
    "end": "21199"
  },
  {
    "text": "it includes a low-level language similar",
    "start": "21199",
    "end": "22960"
  },
  {
    "text": "to assembly that can be represented with",
    "start": "22960",
    "end": "24880"
  },
  {
    "text": "text",
    "start": "24880",
    "end": "25359"
  },
  {
    "text": "then converted to a binary format that",
    "start": "25359",
    "end": "27279"
  },
  {
    "text": "runs on all modern browsers",
    "start": "27279",
    "end": "28800"
  },
  {
    "text": "however you won't actually write this",
    "start": "28800",
    "end": "30400"
  },
  {
    "text": "code directly but rather use it as a",
    "start": "30400",
    "end": "32320"
  },
  {
    "text": "compilation target",
    "start": "32320",
    "end": "33440"
  },
  {
    "text": "for programs written in other languages",
    "start": "33440",
    "end": "35440"
  },
  {
    "text": "for example you might build a game with",
    "start": "35440",
    "end": "37280"
  },
  {
    "text": "unity and c-sharp",
    "start": "37280",
    "end": "38559"
  },
  {
    "text": "then compile it to webassembly where it",
    "start": "38559",
    "end": "40399"
  },
  {
    "text": "can be delivered in the browser",
    "start": "40399",
    "end": "41920"
  },
  {
    "text": "now it's important to note that it's not",
    "start": "41920",
    "end": "43520"
  },
  {
    "text": "intended to replace javascript",
    "start": "43520",
    "end": "45200"
  },
  {
    "text": "in fact the two work well together side",
    "start": "45200",
    "end": "46800"
  },
  {
    "text": "by side figma for example",
    "start": "46800",
    "end": "48640"
  },
  {
    "text": "uses react.js for its outer ui then on",
    "start": "48640",
    "end": "51360"
  },
  {
    "text": "the inside you have a high performance c",
    "start": "51360",
    "end": "53360"
  },
  {
    "text": "plus plus design tool that feels just as",
    "start": "53360",
    "end": "55520"
  },
  {
    "text": "fast as native software",
    "start": "55520",
    "end": "56960"
  },
  {
    "text": "as a developer there are many different",
    "start": "56960",
    "end": "58480"
  },
  {
    "text": "ways you can build a webassembly app",
    "start": "58480",
    "end": "60239"
  },
  {
    "text": "with many more under development one of",
    "start": "60239",
    "end": "62000"
  },
  {
    "text": "the most popular tools is mscriptin",
    "start": "62000",
    "end": "64000"
  },
  {
    "text": "which can convert a c",
    "start": "64000",
    "end": "65360"
  },
  {
    "text": "or c plus plus program to webassembly as",
    "start": "65360",
    "end": "67760"
  },
  {
    "text": "it did by bringing autocad to the web",
    "start": "67760",
    "end": "69680"
  },
  {
    "text": "which is a 30 year old codebase",
    "start": "69680",
    "end": "71439"
  },
  {
    "text": "no way one of the best ways to get",
    "start": "71439",
    "end": "74240"
  },
  {
    "text": "started is with assembly script which is",
    "start": "74240",
    "end": "76080"
  },
  {
    "text": "a language that looks like typescript",
    "start": "76080",
    "end": "77680"
  },
  {
    "text": "but compiles to webassembly we can",
    "start": "77680",
    "end": "79360"
  },
  {
    "text": "easily start a new assembly script",
    "start": "79360",
    "end": "80960"
  },
  {
    "text": "project",
    "start": "80960",
    "end": "81439"
  },
  {
    "text": "using node.js and npm then we'll write",
    "start": "81439",
    "end": "83759"
  },
  {
    "text": "our first webassembly module",
    "start": "83759",
    "end": "85280"
  },
  {
    "text": "in the index ts file unlike javascript a",
    "start": "85280",
    "end": "88000"
  },
  {
    "text": "dynamic interpreted language",
    "start": "88000",
    "end": "89759"
  },
  {
    "text": "webassembly is a static compiled",
    "start": "89759",
    "end": "91600"
  },
  {
    "text": "language with strict type guarantees",
    "start": "91600",
    "end": "93520"
  },
  {
    "text": "for example our code can't use the any",
    "start": "93520",
    "end": "95680"
  },
  {
    "text": "type when it comes to numbers",
    "start": "95680",
    "end": "97200"
  },
  {
    "text": "we need to specify a 32-bit integer or a",
    "start": "97200",
    "end": "100000"
  },
  {
    "text": "64-bit floating point",
    "start": "100000",
    "end": "101439"
  },
  {
    "text": "in addition we can't use dynamic objects",
    "start": "101439",
    "end": "103680"
  },
  {
    "text": "instead we use maps where we can",
    "start": "103680",
    "end": "105200"
  },
  {
    "text": "strongly type the key value pairs once",
    "start": "105200",
    "end": "107119"
  },
  {
    "text": "we're happy with our code we can then",
    "start": "107119",
    "end": "108479"
  },
  {
    "text": "compile it down to a binary which is a",
    "start": "108479",
    "end": "110560"
  },
  {
    "text": "file that ends in",
    "start": "110560",
    "end": "111920"
  },
  {
    "text": "wasm we can now run this binary in the",
    "start": "111920",
    "end": "113840"
  },
  {
    "text": "browser open an html page",
    "start": "113840",
    "end": "116000"
  },
  {
    "text": "and then use the webassembly api to",
    "start": "116000",
    "end": "118159"
  },
  {
    "text": "instantiate streaming",
    "start": "118159",
    "end": "119520"
  },
  {
    "text": "simply fetch the binary and when the",
    "start": "119520",
    "end": "121280"
  },
  {
    "text": "promise resolves do something with it",
    "start": "121280",
    "end": "123439"
  },
  {
    "text": "this has been webassembly in 100 seconds",
    "start": "123439",
    "end": "125680"
  },
  {
    "text": "if you want to see a more in-depth video",
    "start": "125680",
    "end": "127439"
  },
  {
    "text": "on this topic",
    "start": "127439",
    "end": "128239"
  },
  {
    "text": "please let me know in the comments and",
    "start": "128239",
    "end": "129599"
  },
  {
    "text": "make sure to subscribe and hit the like",
    "start": "129599",
    "end": "131280"
  },
  {
    "text": "button",
    "start": "131280",
    "end": "131680"
  },
  {
    "text": "thanks for watching and i will see you",
    "start": "131680",
    "end": "133520"
  },
  {
    "text": "in the next one",
    "start": "133520",
    "end": "137360"
  }
]