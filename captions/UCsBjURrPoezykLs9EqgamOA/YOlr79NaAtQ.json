[
  {
    "text": "what is this in JavaScript it's a",
    "start": "0",
    "end": "2580"
  },
  {
    "text": "keyword that references another value",
    "start": "2580",
    "end": "4319"
  },
  {
    "text": "usually an object that represents the",
    "start": "4319",
    "end": "6359"
  },
  {
    "text": "current execution context okay but what",
    "start": "6359",
    "end": "8849"
  },
  {
    "text": "the hell does execution context mean it",
    "start": "8849",
    "end": "10920"
  },
  {
    "text": "either refers to your global environment",
    "start": "10920",
    "end": "12540"
  },
  {
    "text": "like the browser or nodejs for when used",
    "start": "12540",
    "end": "15089"
  },
  {
    "text": "inside a function it references the",
    "start": "15089",
    "end": "16800"
  },
  {
    "text": "object calling that function at a given",
    "start": "16800",
    "end": "18600"
  },
  {
    "text": "time",
    "start": "18600",
    "end": "19170"
  },
  {
    "text": "open up the browser and run console like",
    "start": "19170",
    "end": "20939"
  },
  {
    "text": "this you get the window object back",
    "start": "20939",
    "end": "22769"
  },
  {
    "text": "because you're in the global execution",
    "start": "22769",
    "end": "24510"
  },
  {
    "text": "context doing the same thing and nodejs",
    "start": "24510",
    "end": "26400"
  },
  {
    "text": "from the command line gives you the",
    "start": "26400",
    "end": "27750"
  },
  {
    "text": "global object back things get",
    "start": "27750",
    "end": "29460"
  },
  {
    "text": "interesting when we talk about function",
    "start": "29460",
    "end": "31050"
  },
  {
    "text": "context define a function and then",
    "start": "31050",
    "end": "32820"
  },
  {
    "text": "console.log this inside the function",
    "start": "32820",
    "end": "34559"
  },
  {
    "text": "body now if we run this function in the",
    "start": "34559",
    "end": "36210"
  },
  {
    "text": "browser we'll still get the window",
    "start": "36210",
    "end": "37620"
  },
  {
    "text": "object back that's because our global",
    "start": "37620",
    "end": "39450"
  },
  {
    "text": "context is executing the function now",
    "start": "39450",
    "end": "41640"
  },
  {
    "text": "let's take that same function and use it",
    "start": "41640",
    "end": "43620"
  },
  {
    "text": "as a property on an object when we call",
    "start": "43620",
    "end": "45629"
  },
  {
    "text": "the function on this object it",
    "start": "45629",
    "end": "46980"
  },
  {
    "text": "references this object now sometimes you",
    "start": "46980",
    "end": "49680"
  },
  {
    "text": "might have a function and an object",
    "start": "49680",
    "end": "51300"
  },
  {
    "text": "defined separately you can tell the",
    "start": "51300",
    "end": "52739"
  },
  {
    "text": "function to use some other object as its",
    "start": "52739",
    "end": "54780"
  },
  {
    "text": "this value using the functions bind",
    "start": "54780",
    "end": "56699"
  },
  {
    "text": "method the result is a new function",
    "start": "56699",
    "end": "58170"
  },
  {
    "text": "where any references to this inside the",
    "start": "58170",
    "end": "60329"
  },
  {
    "text": "function will point to the object that",
    "start": "60329",
    "end": "62219"
  },
  {
    "text": "you pass as the argument here but where",
    "start": "62219",
    "end": "64198"
  },
  {
    "text": "you'll see this used most often is in",
    "start": "64199",
    "end": "66060"
  },
  {
    "text": "constructor functions using the new",
    "start": "66060",
    "end": "67710"
  },
  {
    "text": "keyword the new keyword allows you to",
    "start": "67710",
    "end": "69689"
  },
  {
    "text": "call a function that creates an object",
    "start": "69689",
    "end": "71640"
  },
  {
    "text": "where this is automatically bound to",
    "start": "71640",
    "end": "73950"
  },
  {
    "text": "that newly created object and that means",
    "start": "73950",
    "end": "75930"
  },
  {
    "text": "you can create properties and methods",
    "start": "75930",
    "end": "77250"
  },
  {
    "text": "like many other object-oriented",
    "start": "77250",
    "end": "79290"
  },
  {
    "text": "programming languages for example we can",
    "start": "79290",
    "end": "81509"
  },
  {
    "text": "define a property like this name then we",
    "start": "81509",
    "end": "83729"
  },
  {
    "text": "can define a method like say hello and",
    "start": "83729",
    "end": "85770"
  },
  {
    "text": "use this to reference the name property",
    "start": "85770",
    "end": "87689"
  },
  {
    "text": "on this object and that gives us a",
    "start": "87689",
    "end": "89460"
  },
  {
    "text": "convenient way to keep the data and",
    "start": "89460",
    "end": "91200"
  },
  {
    "text": "functionality of an object tightly",
    "start": "91200",
    "end": "92909"
  },
  {
    "text": "coupled together but there's a lot more",
    "start": "92909",
    "end": "94470"
  },
  {
    "text": "to this than meets the eye so keep",
    "start": "94470",
    "end": "96180"
  },
  {
    "text": "watching if you want to go beyond 100",
    "start": "96180",
    "end": "97650"
  },
  {
    "text": "seconds and learn some more advanced and",
    "start": "97650",
    "end": "99479"
  },
  {
    "text": "weird aspects of this but first make",
    "start": "99479",
    "end": "101460"
  },
  {
    "text": "sure to hit the like button and",
    "start": "101460",
    "end": "102540"
  },
  {
    "text": "subscribe",
    "start": "102540",
    "end": "104630"
  },
  {
    "text": "oh hey there thanks for sticking around",
    "start": "106860",
    "end": "109290"
  },
  {
    "text": "this is a special bonus segment where we",
    "start": "109290",
    "end": "111420"
  },
  {
    "text": "can slow things down and take a deeper",
    "start": "111420",
    "end": "113160"
  },
  {
    "text": "dive into JavaScript this which gives",
    "start": "113160",
    "end": "115230"
  },
  {
    "text": "you plenty of rope to hang yourself with",
    "start": "115230",
    "end": "116640"
  },
  {
    "text": "if you like this extra segment let me",
    "start": "116640",
    "end": "118380"
  },
  {
    "text": "know in the comments because there's",
    "start": "118380",
    "end": "119640"
  },
  {
    "text": "always room to go beyond 100 seconds",
    "start": "119640",
    "end": "121650"
  },
  {
    "text": "over the next few minutes we'll look at",
    "start": "121650",
    "end": "123030"
  },
  {
    "text": "some caveats of this look at the bind",
    "start": "123030",
    "end": "125070"
  },
  {
    "text": "call and apply methods and look at some",
    "start": "125070",
    "end": "126990"
  },
  {
    "text": "more practical examples of object",
    "start": "126990",
    "end": "128789"
  },
  {
    "text": "oriented and functional programming",
    "start": "128790",
    "end": "130470"
  },
  {
    "text": "patterns so when I'm writing JavaScript",
    "start": "130470",
    "end": "132780"
  },
  {
    "text": "code and I see this I always try to ask",
    "start": "132780",
    "end": "134610"
  },
  {
    "text": "myself what is this but unfortunately if",
    "start": "134610",
    "end": "137250"
  },
  {
    "text": "the answer is not very clear because",
    "start": "137250",
    "end": "138870"
  },
  {
    "text": "this in JavaScript works differently",
    "start": "138870",
    "end": "140550"
  },
  {
    "text": "than a lot of other languages and it",
    "start": "140550",
    "end": "142230"
  },
  {
    "text": "just seems completely weird if you're",
    "start": "142230",
    "end": "143520"
  },
  {
    "text": "brand new to programming",
    "start": "143520",
    "end": "144480"
  },
  {
    "text": "now here's caveat number one strict mode",
    "start": "144480",
    "end": "146910"
  },
  {
    "text": "and non strict mode back in the earlier",
    "start": "146910",
    "end": "149400"
  },
  {
    "text": "days of JavaScript there were certain",
    "start": "149400",
    "end": "150870"
  },
  {
    "text": "features of the language that sucked",
    "start": "150870",
    "end": "152490"
  },
  {
    "text": "and so with es5 they introduced strict",
    "start": "152490",
    "end": "154709"
  },
  {
    "text": "mode to turn some of those features off",
    "start": "154709",
    "end": "156300"
  },
  {
    "text": "for this video I'm going to assume that",
    "start": "156300",
    "end": "158040"
  },
  {
    "text": "you're in strict mode if you're doing",
    "start": "158040",
    "end": "159510"
  },
  {
    "text": "front-end development",
    "start": "159510",
    "end": "160290"
  },
  {
    "text": "you're probably in strict mode without",
    "start": "160290",
    "end": "161490"
  },
  {
    "text": "even realizing it but it's important to",
    "start": "161490",
    "end": "163140"
  },
  {
    "text": "note that this behaves slightly",
    "start": "163140",
    "end": "164370"
  },
  {
    "text": "different if you're not in strict mode",
    "start": "164370",
    "end": "166140"
  },
  {
    "text": "one of the most important differences is",
    "start": "166140",
    "end": "167880"
  },
  {
    "text": "that in strict mode if you call a",
    "start": "167880",
    "end": "169500"
  },
  {
    "text": "function in the global context this will",
    "start": "169500",
    "end": "171840"
  },
  {
    "text": "be undefined instead of referring to",
    "start": "171840",
    "end": "173640"
  },
  {
    "text": "window or global and node this usually",
    "start": "173640",
    "end": "176070"
  },
  {
    "text": "isn't a big deal because in most code",
    "start": "176070",
    "end": "177750"
  },
  {
    "text": "you'll just reference window or global",
    "start": "177750",
    "end": "179610"
  },
  {
    "text": "directly and not use this as a reference",
    "start": "179610",
    "end": "181620"
  },
  {
    "text": "to those objects now that's one thing to",
    "start": "181620",
    "end": "183930"
  },
  {
    "text": "keep in mind but I think the single most",
    "start": "183930",
    "end": "185459"
  },
  {
    "text": "important caveat to understand what this",
    "start": "185459",
    "end": "187350"
  },
  {
    "text": "is how it works with arrow functions as",
    "start": "187350",
    "end": "189450"
  },
  {
    "text": "you can see here we have an object on",
    "start": "189450",
    "end": "191280"
  },
  {
    "text": "the first object property we have a",
    "start": "191280",
    "end": "192989"
  },
  {
    "text": "function defined with the function",
    "start": "192989",
    "end": "194550"
  },
  {
    "text": "keyword it's the same example that I",
    "start": "194550",
    "end": "196320"
  },
  {
    "text": "showed you at the beginning of this",
    "start": "196320",
    "end": "197430"
  },
  {
    "text": "video this when called by the object",
    "start": "197430",
    "end": "199830"
  },
  {
    "text": "references the object that called that",
    "start": "199830",
    "end": "201570"
  },
  {
    "text": "function now if we write a second",
    "start": "201570",
    "end": "203220"
  },
  {
    "text": "property and use an arrow function",
    "start": "203220",
    "end": "204720"
  },
  {
    "text": "you'll notice this is now the global",
    "start": "204720",
    "end": "206310"
  },
  {
    "text": "object or undefined in strict mode in an",
    "start": "206310",
    "end": "208800"
  },
  {
    "text": "arrow function this is based on the",
    "start": "208800",
    "end": "210810"
  },
  {
    "text": "enclosing objects execution context",
    "start": "210810",
    "end": "212910"
  },
  {
    "text": "which in this example would be global in",
    "start": "212910",
    "end": "215280"
  },
  {
    "text": "other words it doesn't have its own",
    "start": "215280",
    "end": "216570"
  },
  {
    "text": "binding to this so it looks up to its",
    "start": "216570",
    "end": "218519"
  },
  {
    "text": "parent and closing object and uses that",
    "start": "218519",
    "end": "220470"
  },
  {
    "text": "this value if you've ever used a BAS",
    "start": "220470",
    "end": "222510"
  },
  {
    "text": "you'll notice in the documentation they",
    "start": "222510",
    "end": "224100"
  },
  {
    "text": "tell you to use a regular function",
    "start": "224100",
    "end": "225600"
  },
  {
    "text": "keyword as opposed to an arrow function",
    "start": "225600",
    "end": "227430"
  },
  {
    "text": "and that's because they're not really",
    "start": "227430",
    "end": "228660"
  },
  {
    "text": "suitable for methods because of the way",
    "start": "228660",
    "end": "230130"
  },
  {
    "text": "they interact with this so now that you",
    "start": "230130",
    "end": "232230"
  },
  {
    "text": "know some of the caveats we're going to",
    "start": "232230",
    "end": "233670"
  },
  {
    "text": "look at three prototype methods that",
    "start": "233670",
    "end": "235319"
  },
  {
    "text": "live on a function object bind call and",
    "start": "235319",
    "end": "237930"
  },
  {
    "text": "apply let's start by looking at bind",
    "start": "237930",
    "end": "239790"
  },
  {
    "text": "because",
    "start": "239790",
    "end": "240270"
  },
  {
    "text": "I think you'll come across this one most",
    "start": "240270",
    "end": "241620"
  },
  {
    "text": "often let's imagine we have a function",
    "start": "241620",
    "end": "243870"
  },
  {
    "text": "and an object and these things are",
    "start": "243870",
    "end": "245580"
  },
  {
    "text": "immutable meaning we can't change them",
    "start": "245580",
    "end": "247320"
  },
  {
    "text": "the function reference is this inside",
    "start": "247320",
    "end": "249360"
  },
  {
    "text": "the body which in this case would be the",
    "start": "249360",
    "end": "250740"
  },
  {
    "text": "global context but we wanted to use this",
    "start": "250740",
    "end": "252810"
  },
  {
    "text": "other object as this we can create a new",
    "start": "252810",
    "end": "255690"
  },
  {
    "text": "function that's bound to this object by",
    "start": "255690",
    "end": "257790"
  },
  {
    "text": "calling bind on the original function",
    "start": "257790",
    "end": "259470"
  },
  {
    "text": "and passing the object as the argument",
    "start": "259470",
    "end": "261450"
  },
  {
    "text": "when we execute this function you'll",
    "start": "261450",
    "end": "263520"
  },
  {
    "text": "notice that this now refers to the",
    "start": "263520",
    "end": "265230"
  },
  {
    "text": "object we passed in so bind gives you a",
    "start": "265230",
    "end": "267780"
  },
  {
    "text": "way to explicitly set this on a function",
    "start": "267780",
    "end": "269910"
  },
  {
    "text": "now in other cases you might want to",
    "start": "269910",
    "end": "271800"
  },
  {
    "text": "call a function with a different this",
    "start": "271800",
    "end": "273150"
  },
  {
    "text": "context but not create a whole brand-new",
    "start": "273150",
    "end": "275130"
  },
  {
    "text": "function and for that you can use call",
    "start": "275130",
    "end": "277260"
  },
  {
    "text": "or apply in this example we use the call",
    "start": "277260",
    "end": "279780"
  },
  {
    "text": "method on the function and the first",
    "start": "279780",
    "end": "281430"
  },
  {
    "text": "argument to it is it's this context that",
    "start": "281430",
    "end": "283590"
  },
  {
    "text": "you want to set this will call the",
    "start": "283590",
    "end": "285090"
  },
  {
    "text": "function immediately and you can pass",
    "start": "285090",
    "end": "286620"
  },
  {
    "text": "additional arguments to it as well for",
    "start": "286620",
    "end": "288420"
  },
  {
    "text": "the arguments that go to that function",
    "start": "288420",
    "end": "289920"
  },
  {
    "text": "and lastly I'll point out that you also",
    "start": "289920",
    "end": "292650"
  },
  {
    "text": "have the apply method which is identical",
    "start": "292650",
    "end": "294510"
  },
  {
    "text": "to call the only difference is that the",
    "start": "294510",
    "end": "296430"
  },
  {
    "text": "second argument is an array of arguments",
    "start": "296430",
    "end": "298350"
  },
  {
    "text": "a good way to remember the difference is",
    "start": "298350",
    "end": "300420"
  },
  {
    "text": "to thank a for array or apply or C for",
    "start": "300420",
    "end": "303270"
  },
  {
    "text": "comma or call call is more common in",
    "start": "303270",
    "end": "305790"
  },
  {
    "text": "modern JavaScript because you can use",
    "start": "305790",
    "end": "307230"
  },
  {
    "text": "the spread syntax on the arguments when",
    "start": "307230",
    "end": "309120"
  },
  {
    "text": "you're working with an array but the",
    "start": "309120",
    "end": "310710"
  },
  {
    "text": "bottom line is that they both serve the",
    "start": "310710",
    "end": "312090"
  },
  {
    "text": "same purpose to call a function with an",
    "start": "312090",
    "end": "314250"
  },
  {
    "text": "explicit this context now it's worth",
    "start": "314250",
    "end": "316380"
  },
  {
    "text": "noting that you tend to encounter this",
    "start": "316380",
    "end": "318090"
  },
  {
    "text": "much more often in classical",
    "start": "318090",
    "end": "319980"
  },
  {
    "text": "object-oriented programming",
    "start": "319980",
    "end": "321510"
  },
  {
    "text": "versus functional programming both of",
    "start": "321510",
    "end": "323460"
  },
  {
    "text": "which are programming paradigms that you",
    "start": "323460",
    "end": "324930"
  },
  {
    "text": "can use in JavaScript for example one of",
    "start": "324930",
    "end": "327720"
  },
  {
    "text": "the big motivations of react to use",
    "start": "327720",
    "end": "329280"
  },
  {
    "text": "functional components over class-based",
    "start": "329280",
    "end": "330990"
  },
  {
    "text": "components was so that developers",
    "start": "330990",
    "end": "332310"
  },
  {
    "text": "wouldn't have to use this in their code",
    "start": "332310",
    "end": "334170"
  },
  {
    "text": "because it gets even more complicated",
    "start": "334170",
    "end": "335400"
  },
  {
    "text": "when you have a big framework with a",
    "start": "335400",
    "end": "337050"
  },
  {
    "text": "bunch of dependencies and components",
    "start": "337050",
    "end": "338880"
  },
  {
    "text": "personally though I find this to be very",
    "start": "338880",
    "end": "340860"
  },
  {
    "text": "straightforward when working with",
    "start": "340860",
    "end": "342180"
  },
  {
    "text": "JavaScript constructor functions let's",
    "start": "342180",
    "end": "344250"
  },
  {
    "text": "imagine we wanted to create a horse",
    "start": "344250",
    "end": "345870"
  },
  {
    "text": "class when this function is called with",
    "start": "345870",
    "end": "347370"
  },
  {
    "text": "a new keyword it creates a new object so",
    "start": "347370",
    "end": "349500"
  },
  {
    "text": "we can create methods and properties on",
    "start": "349500",
    "end": "351120"
  },
  {
    "text": "those objects by making a reference to",
    "start": "351120",
    "end": "352980"
  },
  {
    "text": "this so this works much more like a",
    "start": "352980",
    "end": "354780"
  },
  {
    "text": "class definition in other languages like",
    "start": "354780",
    "end": "356700"
  },
  {
    "text": "Java Ruby Python and so on and",
    "start": "356700",
    "end": "359160"
  },
  {
    "text": "JavaScript actually provides syntactic",
    "start": "359160",
    "end": "361200"
  },
  {
    "text": "sugar for this whole process using the",
    "start": "361200",
    "end": "362970"
  },
  {
    "text": "class keyword but we'll save that one",
    "start": "362970",
    "end": "364650"
  },
  {
    "text": "for a future 100 second video because",
    "start": "364650",
    "end": "367110"
  },
  {
    "text": "there's one more important thing that",
    "start": "367110",
    "end": "368280"
  },
  {
    "text": "you should know about this and that's a",
    "start": "368280",
    "end": "369720"
  },
  {
    "text": "thing called method chaining you'll see",
    "start": "369720",
    "end": "371370"
  },
  {
    "text": "a lot of JavaScript libraries that allow",
    "start": "371370",
    "end": "373050"
  },
  {
    "text": "you to chain method",
    "start": "373050",
    "end": "374040"
  },
  {
    "text": "together like this always keeping a",
    "start": "374040",
    "end": "375600"
  },
  {
    "text": "reference to the original object so how",
    "start": "375600",
    "end": "377670"
  },
  {
    "text": "do you change methods together in",
    "start": "377670",
    "end": "378720"
  },
  {
    "text": "JavaScript well you simply return this",
    "start": "378720",
    "end": "380550"
  },
  {
    "text": "from your method and now you can chain",
    "start": "380550",
    "end": "382170"
  },
  {
    "text": "together an infinite number of method",
    "start": "382170",
    "end": "383790"
  },
  {
    "text": "calls thanks for sticking around to go",
    "start": "383790",
    "end": "385380"
  },
  {
    "text": "beyond 100 seconds I hope you learned",
    "start": "385380",
    "end": "387180"
  },
  {
    "text": "something and I will see you in the next",
    "start": "387180",
    "end": "389070"
  },
  {
    "text": "one",
    "start": "389070",
    "end": "390950"
  },
  {
    "text": "[Music]",
    "start": "390950",
    "end": "399129"
  }
]