[
  {
    "text": "[Music]",
    "start": "0",
    "end": "6500"
  },
  {
    "text": "decorator's are one of the coolest",
    "start": "6500",
    "end": "8160"
  },
  {
    "text": "features in typescript we see them used",
    "start": "8160",
    "end": "9929"
  },
  {
    "text": "all over the place in frameworks like",
    "start": "9929",
    "end": "11250"
  },
  {
    "text": "angular mob X and stencil to help us",
    "start": "11250",
    "end": "13559"
  },
  {
    "text": "write more elegant code but have you",
    "start": "13559",
    "end": "15240"
  },
  {
    "text": "ever created your own from scratch if",
    "start": "15240",
    "end": "16710"
  },
  {
    "text": "not today's video is all about the",
    "start": "16710",
    "end": "18330"
  },
  {
    "text": "practical applications of typescript",
    "start": "18330",
    "end": "20100"
  },
  {
    "text": "decorators will look at a whole bunch of",
    "start": "20100",
    "end": "21779"
  },
  {
    "text": "different examples and will even go so",
    "start": "21779",
    "end": "23430"
  },
  {
    "text": "far as to implement an API that looks",
    "start": "23430",
    "end": "25470"
  },
  {
    "text": "similar to react hooks in angular and",
    "start": "25470",
    "end": "27539"
  },
  {
    "text": "will do it with only five lines of code",
    "start": "27539",
    "end": "28980"
  },
  {
    "text": "if you're new here like and subscribe",
    "start": "28980",
    "end": "30630"
  },
  {
    "text": "and you can find the full source code on",
    "start": "30630",
    "end": "32130"
  },
  {
    "text": "fire ship IO so what is it that grater",
    "start": "32130",
    "end": "34500"
  },
  {
    "text": "exactly it's just a function that allows",
    "start": "34500",
    "end": "36570"
  },
  {
    "text": "you to hook into your source code and",
    "start": "36570",
    "end": "38280"
  },
  {
    "text": "either extend the functionality of it or",
    "start": "38280",
    "end": "40200"
  },
  {
    "text": "annotate it with metadata so why would",
    "start": "40200",
    "end": "42300"
  },
  {
    "text": "you ever want to annotate your code with",
    "start": "42300",
    "end": "43829"
  },
  {
    "text": "metadata the answer is you probably",
    "start": "43829",
    "end": "45390"
  },
  {
    "text": "don't there might be some good use cases",
    "start": "45390",
    "end": "47399"
  },
  {
    "text": "out there but it comes more into play if",
    "start": "47399",
    "end": "48960"
  },
  {
    "text": "you're building something like a",
    "start": "48960",
    "end": "49829"
  },
  {
    "text": "compiler like the angular compiler for",
    "start": "49829",
    "end": "51989"
  },
  {
    "text": "example and you need to analyze the",
    "start": "51989",
    "end": "53610"
  },
  {
    "text": "metadata to do things like dependency",
    "start": "53610",
    "end": "55199"
  },
  {
    "text": "injection so decorators can provide this",
    "start": "55199",
    "end": "57239"
  },
  {
    "text": "metadata but they can also directly hook",
    "start": "57239",
    "end": "59219"
  },
  {
    "text": "into your code and alter the behavior of",
    "start": "59219",
    "end": "61109"
  },
  {
    "text": "it and that's what's really useful to",
    "start": "61109",
    "end": "62699"
  },
  {
    "text": "the average app developer because it",
    "start": "62699",
    "end": "64170"
  },
  {
    "text": "allows you to write abstractions that",
    "start": "64170",
    "end": "65820"
  },
  {
    "text": "are clear and concise but they're almost",
    "start": "65820",
    "end": "67890"
  },
  {
    "text": "too good at creating abstractions so you",
    "start": "67890",
    "end": "69720"
  },
  {
    "text": "need to be careful not to overuse",
    "start": "69720",
    "end": "71400"
  },
  {
    "text": "decorators it can be tempting to create",
    "start": "71400",
    "end": "73350"
  },
  {
    "text": "a new decorator for every little thing",
    "start": "73350",
    "end": "75270"
  },
  {
    "text": "but they should be reserved for logic",
    "start": "75270",
    "end": "76710"
  },
  {
    "text": "that's stable and that needs to be",
    "start": "76710",
    "end": "78090"
  },
  {
    "text": "reused frequently throughout the app",
    "start": "78090",
    "end": "79560"
  },
  {
    "text": "there are five different things that you",
    "start": "79560",
    "end": "81119"
  },
  {
    "text": "can decorate class definitions methods",
    "start": "81119",
    "end": "83549"
  },
  {
    "text": "properties getters and setters and",
    "start": "83549",
    "end": "85890"
  },
  {
    "text": "parameters we'll be looking at examples",
    "start": "85890",
    "end": "88259"
  },
  {
    "text": "of all these throughout the video but",
    "start": "88259",
    "end": "89820"
  },
  {
    "text": "basically the function that you",
    "start": "89820",
    "end": "91200"
  },
  {
    "text": "implement will be dependent on the thing",
    "start": "91200",
    "end": "93090"
  },
  {
    "text": "that you're decorating in other words",
    "start": "93090",
    "end": "94590"
  },
  {
    "text": "the function arguments required to",
    "start": "94590",
    "end": "96119"
  },
  {
    "text": "decorate a class will be different from",
    "start": "96119",
    "end": "97799"
  },
  {
    "text": "the arguments required to decorate a",
    "start": "97799",
    "end": "99479"
  },
  {
    "text": "method I'll be using angular for this",
    "start": "99479",
    "end": "101040"
  },
  {
    "text": "demo so we have some actual working",
    "start": "101040",
    "end": "102509"
  },
  {
    "text": "examples and you can see here I'm in a",
    "start": "102509",
    "end": "104790"
  },
  {
    "text": "component file and I've simply taken out",
    "start": "104790",
    "end": "106829"
  },
  {
    "text": "the component decorator and replaced it",
    "start": "106829",
    "end": "108720"
  },
  {
    "text": "with this frozen decorator basically",
    "start": "108720",
    "end": "111210"
  },
  {
    "text": "what we want to do is prevent this class",
    "start": "111210",
    "end": "112829"
  },
  {
    "text": "from being extended when you're",
    "start": "112829",
    "end": "114479"
  },
  {
    "text": "extending a class with inheritance you",
    "start": "114479",
    "end": "116340"
  },
  {
    "text": "need to be careful with decorators",
    "start": "116340",
    "end": "117780"
  },
  {
    "text": "because the inherited class won't",
    "start": "117780",
    "end": "119130"
  },
  {
    "text": "actually receive the functionality of",
    "start": "119130",
    "end": "120509"
  },
  {
    "text": "the decorator that being said you might",
    "start": "120509",
    "end": "122310"
  },
  {
    "text": "just want to freeze or seal the class so",
    "start": "122310",
    "end": "123930"
  },
  {
    "text": "let's build a decorator to do that we'll",
    "start": "123930",
    "end": "126270"
  },
  {
    "text": "create a function called frozen and it",
    "start": "126270",
    "end": "128280"
  },
  {
    "text": "takes the constructor function from that",
    "start": "128280",
    "end": "130140"
  },
  {
    "text": "class as its argument from there we can",
    "start": "130140",
    "end": "131970"
  },
  {
    "text": "just call object freeze",
    "start": "131970",
    "end": "133410"
  },
  {
    "text": "or object seal on the constructor and",
    "start": "133410",
    "end": "135630"
  },
  {
    "text": "the constructor prototype and that's all",
    "start": "135630",
    "end": "137430"
  },
  {
    "text": "it takes to build a decorator just one",
    "start": "137430",
    "end": "139230"
  },
  {
    "text": "simple function we can make sure that",
    "start": "139230",
    "end": "140820"
  },
  {
    "text": "the class is in fact frozen by calling",
    "start": "140820",
    "end": "142800"
  },
  {
    "text": "an object is frozen with the class",
    "start": "142800",
    "end": "144450"
  },
  {
    "text": "itself and keep in mind that this is",
    "start": "144450",
    "end": "146160"
  },
  {
    "text": "freezing the class definition it's not",
    "start": "146160",
    "end": "148260"
  },
  {
    "text": "going to freeze instances of the class",
    "start": "148260",
    "end": "149820"
  },
  {
    "text": "so if we create a new instance of the",
    "start": "149820",
    "end": "151770"
  },
  {
    "text": "class it would not be frozen so the main",
    "start": "151770",
    "end": "153780"
  },
  {
    "text": "purpose of this decorator is just to",
    "start": "153780",
    "end": "155250"
  },
  {
    "text": "prevent the class from being treated as",
    "start": "155250",
    "end": "156690"
  },
  {
    "text": "a superclass for example if we try to",
    "start": "156690",
    "end": "159120"
  },
  {
    "text": "create a froyo class that extends ice",
    "start": "159120",
    "end": "161010"
  },
  {
    "text": "cream we'll get an error and that's",
    "start": "161010",
    "end": "162750"
  },
  {
    "text": "because our decorator is making the",
    "start": "162750",
    "end": "164190"
  },
  {
    "text": "constructor read-only so that gives us a",
    "start": "164190",
    "end": "166500"
  },
  {
    "text": "basic class decorator but I think the",
    "start": "166500",
    "end": "168390"
  },
  {
    "text": "most useful decorators are four methods",
    "start": "168390",
    "end": "170160"
  },
  {
    "text": "and properties and I say this because I",
    "start": "170160",
    "end": "172380"
  },
  {
    "text": "actually use method decorators on fire",
    "start": "172380",
    "end": "174240"
  },
  {
    "text": "ship IO to automatically trigger",
    "start": "174240",
    "end": "176040"
  },
  {
    "text": "angular's change detection let's imagine",
    "start": "176040",
    "end": "177900"
  },
  {
    "text": "we have this flavor property and every",
    "start": "177900",
    "end": "179880"
  },
  {
    "text": "time this property is defined we want to",
    "start": "179880",
    "end": "181830"
  },
  {
    "text": "add emojis to the beginning and end of",
    "start": "181830",
    "end": "183660"
  },
  {
    "text": "it now I know this sounds trivial but",
    "start": "183660",
    "end": "185370"
  },
  {
    "text": "we're actually hooking into the getting",
    "start": "185370",
    "end": "187170"
  },
  {
    "text": "and setting of this property which can",
    "start": "187170",
    "end": "188790"
  },
  {
    "text": "be very powerful for example stencil Jas",
    "start": "188790",
    "end": "191010"
  },
  {
    "text": "has a decorator called state and it",
    "start": "191010",
    "end": "192870"
  },
  {
    "text": "tells the framework to re-render the",
    "start": "192870",
    "end": "194190"
  },
  {
    "text": "component if this property changes so",
    "start": "194190",
    "end": "196410"
  },
  {
    "text": "basically you can just run some magical",
    "start": "196410",
    "end": "198120"
  },
  {
    "text": "code under the hood without actually",
    "start": "198120",
    "end": "199560"
  },
  {
    "text": "having to change the way your code works",
    "start": "199560",
    "end": "200970"
  },
  {
    "text": "at a fundamental level you'll notice",
    "start": "200970",
    "end": "202950"
  },
  {
    "text": "we're calling our emoji decorator with",
    "start": "202950",
    "end": "204450"
  },
  {
    "text": "parentheses that's because it's a",
    "start": "204450",
    "end": "206130"
  },
  {
    "text": "decorator factory a factory is just a",
    "start": "206130",
    "end": "208350"
  },
  {
    "text": "function that returns the decorator",
    "start": "208350",
    "end": "210090"
  },
  {
    "text": "function itself and I generally",
    "start": "210090",
    "end": "211470"
  },
  {
    "text": "recommend writing your decorators as",
    "start": "211470",
    "end": "212940"
  },
  {
    "text": "factories because it gives you the",
    "start": "212940",
    "end": "214410"
  },
  {
    "text": "flexibility to pass in your own custom",
    "start": "214410",
    "end": "216240"
  },
  {
    "text": "data as needed every decorator has a",
    "start": "216240",
    "end": "218280"
  },
  {
    "text": "very specific function signature for",
    "start": "218280",
    "end": "220380"
  },
  {
    "text": "example this function takes a target and",
    "start": "220380",
    "end": "222390"
  },
  {
    "text": "a key as its arguments the target is the",
    "start": "222390",
    "end": "224820"
  },
  {
    "text": "parent class and the key is the name of",
    "start": "224820",
    "end": "226590"
  },
  {
    "text": "the property that we're decorating so we",
    "start": "226590",
    "end": "228570"
  },
  {
    "text": "can make a reference to the value by",
    "start": "228570",
    "end": "229950"
  },
  {
    "text": "calling the target key now if we want to",
    "start": "229950",
    "end": "232500"
  },
  {
    "text": "listen to changes to this property we",
    "start": "232500",
    "end": "234480"
  },
  {
    "text": "need to replace the value with getters",
    "start": "234480",
    "end": "236130"
  },
  {
    "text": "and setters that getter function is just",
    "start": "236130",
    "end": "238290"
  },
  {
    "text": "a simple function that returns the value",
    "start": "238290",
    "end": "239880"
  },
  {
    "text": "and the setter is also a function but",
    "start": "239880",
    "end": "242670"
  },
  {
    "text": "here we'll go ahead and console.log so",
    "start": "242670",
    "end": "244320"
  },
  {
    "text": "we know whenever the value changes and",
    "start": "244320",
    "end": "245910"
  },
  {
    "text": "then we'll also go ahead and mutate the",
    "start": "245910",
    "end": "247980"
  },
  {
    "text": "value with our emojis so now anytime we",
    "start": "247980",
    "end": "250350"
  },
  {
    "text": "change the value of this decorated",
    "start": "250350",
    "end": "251910"
  },
  {
    "text": "property it will always have these two",
    "start": "251910",
    "end": "253440"
  },
  {
    "text": "emojis surrounding it obviously that's",
    "start": "253440",
    "end": "255480"
  },
  {
    "text": "completely useless but I'm sure you can",
    "start": "255480",
    "end": "257130"
  },
  {
    "text": "find a good use case here the last step",
    "start": "257130",
    "end": "259380"
  },
  {
    "text": "is to override the initial property with",
    "start": "259380",
    "end": "261419"
  },
  {
    "text": "these getters and setters so we can do",
    "start": "261419",
    "end": "263310"
  },
  {
    "text": "that by calling object defined property",
    "start": "263310",
    "end": "265169"
  },
  {
    "text": "and call that on the target",
    "start": "265169",
    "end": "266770"
  },
  {
    "text": "key and then we'll define our getters",
    "start": "266770",
    "end": "268660"
  },
  {
    "text": "and setters in here if you're not",
    "start": "268660",
    "end": "270009"
  },
  {
    "text": "familiar with object defined property I",
    "start": "270009",
    "end": "271660"
  },
  {
    "text": "recommend checking out the official Docs",
    "start": "271660",
    "end": "273069"
  },
  {
    "text": "but basically it just gives us",
    "start": "273069",
    "end": "274360"
  },
  {
    "text": "fine-grained control over how a property",
    "start": "274360",
    "end": "276220"
  },
  {
    "text": "behaves if we go ahead and open up the",
    "start": "276220",
    "end": "278560"
  },
  {
    "text": "app in the browser we should see the",
    "start": "278560",
    "end": "279910"
  },
  {
    "text": "emojis appended to our variable value",
    "start": "279910",
    "end": "282099"
  },
  {
    "text": "and we should see the setter logged in",
    "start": "282099",
    "end": "284020"
  },
  {
    "text": "the browser console the next thing we'll",
    "start": "284020",
    "end": "285970"
  },
  {
    "text": "look at is a method decorator so let's",
    "start": "285970",
    "end": "287949"
  },
  {
    "text": "imagine we have this toppings array on",
    "start": "287949",
    "end": "289720"
  },
  {
    "text": "the component and then we have an add",
    "start": "289720",
    "end": "291160"
  },
  {
    "text": "topping method and we'll just go ahead",
    "start": "291160",
    "end": "293139"
  },
  {
    "text": "and use this method to push a new item",
    "start": "293139",
    "end": "294880"
  },
  {
    "text": "to the array but let's say we have a lot",
    "start": "294880",
    "end": "297130"
  },
  {
    "text": "of different methods in our app and we",
    "start": "297130",
    "end": "298690"
  },
  {
    "text": "want to make sure the user confirms",
    "start": "298690",
    "end": "300159"
  },
  {
    "text": "these operations before they're actually",
    "start": "300159",
    "end": "301780"
  },
  {
    "text": "executed so we'll create a confirmable",
    "start": "301780",
    "end": "304030"
  },
  {
    "text": "decorator to handle this operation for",
    "start": "304030",
    "end": "305919"
  },
  {
    "text": "us and I'd also like to point out that",
    "start": "305919",
    "end": "307659"
  },
  {
    "text": "decorators are composable so you can",
    "start": "307659",
    "end": "309460"
  },
  {
    "text": "stack them on top of each other and",
    "start": "309460",
    "end": "310870"
  },
  {
    "text": "they'll be applied from top to bottom in",
    "start": "310870",
    "end": "312789"
  },
  {
    "text": "our case here when the user clicks add",
    "start": "312789",
    "end": "314229"
  },
  {
    "text": "topping is going to bring up this",
    "start": "314229",
    "end": "315430"
  },
  {
    "text": "confirm message and the user will have",
    "start": "315430",
    "end": "317139"
  },
  {
    "text": "to click it twice for both decorators",
    "start": "317139",
    "end": "319090"
  },
  {
    "text": "that we applied there for this decorator",
    "start": "319090",
    "end": "321370"
  },
  {
    "text": "will actually pass in some custom data",
    "start": "321370",
    "end": "323050"
  },
  {
    "text": "which we do by creating the factory",
    "start": "323050",
    "end": "324669"
  },
  {
    "text": "function and then we can pass in any",
    "start": "324669",
    "end": "326470"
  },
  {
    "text": "custom arguments that we want the",
    "start": "326470",
    "end": "328270"
  },
  {
    "text": "decorator function for a method takes",
    "start": "328270",
    "end": "329919"
  },
  {
    "text": "three arguments the target is the parent",
    "start": "329919",
    "end": "331780"
  },
  {
    "text": "class the key is the name of the",
    "start": "331780",
    "end": "333430"
  },
  {
    "text": "function and the descriptor is the",
    "start": "333430",
    "end": "335380"
  },
  {
    "text": "actual function itself more specifically",
    "start": "335380",
    "end": "337900"
  },
  {
    "text": "it's a property descriptor because a",
    "start": "337900",
    "end": "339610"
  },
  {
    "text": "method is essentially just an object",
    "start": "339610",
    "end": "341110"
  },
  {
    "text": "property whose value is a function now",
    "start": "341110",
    "end": "343780"
  },
  {
    "text": "we're going to modify this descriptor",
    "start": "343780",
    "end": "345340"
  },
  {
    "text": "and then return it from this function",
    "start": "345340",
    "end": "346599"
  },
  {
    "text": "first we'll make a reference to the",
    "start": "346599",
    "end": "348460"
  },
  {
    "text": "original then we'll override the",
    "start": "348460",
    "end": "349900"
  },
  {
    "text": "descriptor value and make sure that this",
    "start": "349900",
    "end": "351550"
  },
  {
    "text": "is a regular function and not using the",
    "start": "351550",
    "end": "353409"
  },
  {
    "text": "arrow syntax so this will allow us to",
    "start": "353409",
    "end": "356229"
  },
  {
    "text": "run some code either before the function",
    "start": "356229",
    "end": "357669"
  },
  {
    "text": "is executed or after but in our case we",
    "start": "357669",
    "end": "360069"
  },
  {
    "text": "actually want to change the entire",
    "start": "360069",
    "end": "361330"
  },
  {
    "text": "control flow of the method will do this",
    "start": "361330",
    "end": "363250"
  },
  {
    "text": "by showing a confirm message in the",
    "start": "363250",
    "end": "364840"
  },
  {
    "text": "browser if the user clicks confirm then",
    "start": "364840",
    "end": "367060"
  },
  {
    "text": "it will be true otherwise it'll be false",
    "start": "367060",
    "end": "368770"
  },
  {
    "text": "if it's true then we want to run the",
    "start": "368770",
    "end": "370569"
  },
  {
    "text": "logic in the original function so we can",
    "start": "370569",
    "end": "372580"
  },
  {
    "text": "do that by calling apply and then pass",
    "start": "372580",
    "end": "374590"
  },
  {
    "text": "it through this context of the current",
    "start": "374590",
    "end": "376449"
  },
  {
    "text": "function that we're in and that's why we",
    "start": "376449",
    "end": "377800"
  },
  {
    "text": "don't use an arrow function here because",
    "start": "377800",
    "end": "379210"
  },
  {
    "text": "otherwise the this context would be",
    "start": "379210",
    "end": "380770"
  },
  {
    "text": "different so apply basically takes the",
    "start": "380770",
    "end": "382539"
  },
  {
    "text": "original function applies it to this",
    "start": "382539",
    "end": "384190"
  },
  {
    "text": "function plus the original arguments",
    "start": "384190",
    "end": "386289"
  },
  {
    "text": "then we'll go ahead and return the",
    "start": "386289",
    "end": "387759"
  },
  {
    "text": "result of this function but if the user",
    "start": "387759",
    "end": "389710"
  },
  {
    "text": "does not confirm the message then we'll",
    "start": "389710",
    "end": "391479"
  },
  {
    "text": "just go ahead and return null which will",
    "start": "391479",
    "end": "392949"
  },
  {
    "text": "bypass the logic in this function",
    "start": "392949",
    "end": "394389"
  },
  {
    "text": "altogether now I want to show you a",
    "start": "394389",
    "end": "397120"
  },
  {
    "text": "similar example with an accessor in",
    "start": "397120",
    "end": "399909"
  },
  {
    "text": "other words a",
    "start": "399909",
    "end": "400689"
  },
  {
    "text": "or a setter let's say we have a price",
    "start": "400689",
    "end": "402999"
  },
  {
    "text": "getter and it's responsibility is just",
    "start": "402999",
    "end": "404949"
  },
  {
    "text": "to calculate the price based on the",
    "start": "404949",
    "end": "406659"
  },
  {
    "text": "users input one thing you're not able to",
    "start": "406659",
    "end": "408580"
  },
  {
    "text": "do with getters is pass an arguments so",
    "start": "408580",
    "end": "410769"
  },
  {
    "text": "instead we can create a decorator to",
    "start": "410769",
    "end": "412389"
  },
  {
    "text": "extend the functionality so we can also",
    "start": "412389",
    "end": "414039"
  },
  {
    "text": "calculate a variable tax value with this",
    "start": "414039",
    "end": "416409"
  },
  {
    "text": "method in our demo we should see the",
    "start": "416409",
    "end": "418689"
  },
  {
    "text": "price updated with the tax included",
    "start": "418689",
    "end": "420459"
  },
  {
    "text": "every time we add a new topping to the",
    "start": "420459",
    "end": "422229"
  },
  {
    "text": "order the decorator starts out just like",
    "start": "422229",
    "end": "424449"
  },
  {
    "text": "the previous one with the same arguments",
    "start": "424449",
    "end": "426129"
  },
  {
    "text": "and returns the descriptor that main",
    "start": "426129",
    "end": "427989"
  },
  {
    "text": "difference here is that instead of",
    "start": "427989",
    "end": "429369"
  },
  {
    "text": "overwriting the descriptor value we're",
    "start": "429369",
    "end": "431019"
  },
  {
    "text": "going to override descriptor get then",
    "start": "431019",
    "end": "433479"
  },
  {
    "text": "just like we did before we'll override",
    "start": "433479",
    "end": "435159"
  },
  {
    "text": "this with a new function we'll start by",
    "start": "435159",
    "end": "437110"
  },
  {
    "text": "just applying the original function to",
    "start": "437110",
    "end": "438610"
  },
  {
    "text": "the new this context and then we'll take",
    "start": "438610",
    "end": "440649"
  },
  {
    "text": "that result and apply some additional",
    "start": "440649",
    "end": "442360"
  },
  {
    "text": "logic to it afterwards",
    "start": "442360",
    "end": "443529"
  },
  {
    "text": "in this case just multiplying the result",
    "start": "443529",
    "end": "445539"
  },
  {
    "text": "by the tax rate and then rounding it to",
    "start": "445539",
    "end": "447369"
  },
  {
    "text": "two decimal places now let's switch",
    "start": "447369",
    "end": "449739"
  },
  {
    "text": "gears to the real gamechanger",
    "start": "449739",
    "end": "451269"
  },
  {
    "text": "how do we implement react hooks in",
    "start": "451269",
    "end": "452739"
  },
  {
    "text": "angular now I'm being sarcastic and",
    "start": "452739",
    "end": "455259"
  },
  {
    "text": "hooks really aren't necessary in angular",
    "start": "455259",
    "end": "456999"
  },
  {
    "text": "and we'll still need to use a class so",
    "start": "456999",
    "end": "458589"
  },
  {
    "text": "they're really not the same thing but",
    "start": "458589",
    "end": "459789"
  },
  {
    "text": "they will look very similar if you're",
    "start": "459789",
    "end": "461919"
  },
  {
    "text": "not familiar with hooks",
    "start": "461919",
    "end": "462759"
  },
  {
    "text": "it's basically a function that returns a",
    "start": "462759",
    "end": "464979"
  },
  {
    "text": "getter and a setter when you update the",
    "start": "464979",
    "end": "466419"
  },
  {
    "text": "value with the setter it will rerender",
    "start": "466419",
    "end": "468099"
  },
  {
    "text": "the UI automatically angular 2 has been",
    "start": "468099",
    "end": "470319"
  },
  {
    "text": "able to do this from the very beginning",
    "start": "470319",
    "end": "471699"
  },
  {
    "text": "but let's go ahead and use decorators to",
    "start": "471699",
    "end": "473139"
  },
  {
    "text": "make it feel more like react hooks so I",
    "start": "473139",
    "end": "475300"
  },
  {
    "text": "have just a regular angular component",
    "start": "475300",
    "end": "476979"
  },
  {
    "text": "here and then I have two decorator",
    "start": "476979",
    "end": "478389"
  },
  {
    "text": "functions set up one called use state",
    "start": "478389",
    "end": "480189"
  },
  {
    "text": "and one called use effect the use effect",
    "start": "480189",
    "end": "482409"
  },
  {
    "text": "took will be used to trigger a",
    "start": "482409",
    "end": "483429"
  },
  {
    "text": "side-effect to update the document title",
    "start": "483429",
    "end": "485469"
  },
  {
    "text": "so the template will show the count and",
    "start": "485469",
    "end": "487809"
  },
  {
    "text": "then it'll have a button to set the",
    "start": "487809",
    "end": "489189"
  },
  {
    "text": "count and then it will also update the",
    "start": "489189",
    "end": "490749"
  },
  {
    "text": "title every time that button is clicked",
    "start": "490749",
    "end": "492279"
  },
  {
    "text": "so if we go down here to our component",
    "start": "492279",
    "end": "494259"
  },
  {
    "text": "this is how we would use the decorator",
    "start": "494259",
    "end": "495759"
  },
  {
    "text": "we pass in a seed value of 0 to start",
    "start": "495759",
    "end": "498279"
  },
  {
    "text": "the count and then we define the getter",
    "start": "498279",
    "end": "500110"
  },
  {
    "text": "and setter as count and set count so",
    "start": "500110",
    "end": "502479"
  },
  {
    "text": "that's our property decorator then we'll",
    "start": "502479",
    "end": "504429"
  },
  {
    "text": "also define a method decorator that has",
    "start": "504429",
    "end": "506349"
  },
  {
    "text": "this on effect method and this will run",
    "start": "506349",
    "end": "508449"
  },
  {
    "text": "in effect either when the component is",
    "start": "508449",
    "end": "510069"
  },
  {
    "text": "initialized or when any value changes in",
    "start": "510069",
    "end": "512289"
  },
  {
    "text": "the component so we're just duplicating",
    "start": "512289",
    "end": "513849"
  },
  {
    "text": "the same exact example that you'll find",
    "start": "513849",
    "end": "515409"
  },
  {
    "text": "in the react Docs",
    "start": "515409",
    "end": "516309"
  },
  {
    "text": "we'll start by implementing the use",
    "start": "516309",
    "end": "517839"
  },
  {
    "text": "state decorator this is a property",
    "start": "517839",
    "end": "519879"
  },
  {
    "text": "decorator so it has a target in a key",
    "start": "519879",
    "end": "521740"
  },
  {
    "text": "and the first thing we want to do is set",
    "start": "521740",
    "end": "524018"
  },
  {
    "text": "this property to the seed value that's",
    "start": "524019",
    "end": "525819"
  },
  {
    "text": "passed in through the decorator the key",
    "start": "525819",
    "end": "528160"
  },
  {
    "text": "is the name of the property so we'll use",
    "start": "528160",
    "end": "529899"
  },
  {
    "text": "that key to figure out what the setter",
    "start": "529899",
    "end": "531279"
  },
  {
    "text": "should be named we'll use some regex",
    "start": "531279",
    "end": "532899"
  },
  {
    "text": "here to take the name",
    "start": "532899",
    "end": "534370"
  },
  {
    "text": "of the property itself and then",
    "start": "534370",
    "end": "535720"
  },
  {
    "text": "capitalize the first letter and then",
    "start": "535720",
    "end": "537160"
  },
  {
    "text": "append set to it then we can define it",
    "start": "537160",
    "end": "539230"
  },
  {
    "text": "as a method that sets the property value",
    "start": "539230",
    "end": "541510"
  },
  {
    "text": "and that's all there is to it we just",
    "start": "541510",
    "end": "543250"
  },
  {
    "text": "have a reactive getter and setter now",
    "start": "543250",
    "end": "545200"
  },
  {
    "text": "let's move on to the use effect",
    "start": "545200",
    "end": "546310"
  },
  {
    "text": "decorator which is even easier angular",
    "start": "546310",
    "end": "548470"
  },
  {
    "text": "components already have built-in",
    "start": "548470",
    "end": "549580"
  },
  {
    "text": "lifecycle hooks that are similar to",
    "start": "549580",
    "end": "551110"
  },
  {
    "text": "reiax component did mount and component",
    "start": "551110",
    "end": "553390"
  },
  {
    "text": "did update so our decorator gives us",
    "start": "553390",
    "end": "555040"
  },
  {
    "text": "access to the parent object which",
    "start": "555040",
    "end": "556779"
  },
  {
    "text": "already has ng on an it defined as well",
    "start": "556779",
    "end": "558910"
  },
  {
    "text": "as ng after view checked so we can just",
    "start": "558910",
    "end": "560770"
  },
  {
    "text": "take the descriptor value from the",
    "start": "560770",
    "end": "562270"
  },
  {
    "text": "decorator and apply it to those methods",
    "start": "562270",
    "end": "564100"
  },
  {
    "text": "and that's pretty much it we now have",
    "start": "564100",
    "end": "565660"
  },
  {
    "text": "the same organ Onix as react to use",
    "start": "565660",
    "end": "567430"
  },
  {
    "text": "effect in angular when we click the",
    "start": "567430",
    "end": "569440"
  },
  {
    "text": "button you can see the value updates and",
    "start": "569440",
    "end": "571210"
  },
  {
    "text": "the title also updates in the document",
    "start": "571210",
    "end": "573040"
  },
  {
    "text": "head as well I'm going to go ahead and",
    "start": "573040",
    "end": "574450"
  },
  {
    "text": "wrap things up there hopefully you",
    "start": "574450",
    "end": "575770"
  },
  {
    "text": "learned a thing or two about type script",
    "start": "575770",
    "end": "576970"
  },
  {
    "text": "decorators and if this video helped you",
    "start": "576970",
    "end": "578589"
  },
  {
    "text": "please like and subscribe thanks for",
    "start": "578589",
    "end": "580300"
  },
  {
    "text": "watching and I will talk to you soon",
    "start": "580300",
    "end": "584010"
  },
  {
    "text": "[Music]",
    "start": "584200",
    "end": "592009"
  }
]