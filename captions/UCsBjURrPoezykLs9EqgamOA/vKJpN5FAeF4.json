[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "javascript closures are functions that",
    "start": "640",
    "end": "2960"
  },
  {
    "text": "can access values outside of their own",
    "start": "2960",
    "end": "4960"
  },
  {
    "text": "curly braces in order to call a function",
    "start": "4960",
    "end": "7120"
  },
  {
    "text": "in your code the javascript interpreter",
    "start": "7120",
    "end": "9200"
  },
  {
    "text": "needs to know about the function itself",
    "start": "9200",
    "end": "11040"
  },
  {
    "text": "and any other data from the surrounding",
    "start": "11040",
    "end": "12960"
  },
  {
    "text": "environment that it depends on",
    "start": "12960",
    "end": "14559"
  },
  {
    "text": "everything needs to be neatly closed up",
    "start": "14559",
    "end": "16160"
  },
  {
    "text": "into a box before it can be fed into the",
    "start": "16160",
    "end": "18160"
  },
  {
    "text": "machine",
    "start": "18160",
    "end": "18640"
  },
  {
    "text": "take for example a pure function that",
    "start": "18640",
    "end": "20880"
  },
  {
    "start": "20000",
    "end": "77000"
  },
  {
    "text": "only depends on its own arguments and",
    "start": "20880",
    "end": "22880"
  },
  {
    "text": "internal data",
    "start": "22880",
    "end": "23760"
  },
  {
    "text": "what we have here is a fully",
    "start": "23760",
    "end": "25199"
  },
  {
    "text": "self-contained closed expression",
    "start": "25199",
    "end": "27119"
  },
  {
    "text": "when it's called it gets pushed onto the",
    "start": "27119",
    "end": "28880"
  },
  {
    "text": "call stack where it's executed and its",
    "start": "28880",
    "end": "31039"
  },
  {
    "text": "internal data is only kept in memory",
    "start": "31039",
    "end": "32960"
  },
  {
    "text": "until it's popped back off the call",
    "start": "32960",
    "end": "34559"
  },
  {
    "text": "stack but what if that function",
    "start": "34559",
    "end": "35920"
  },
  {
    "text": "references data",
    "start": "35920",
    "end": "36960"
  },
  {
    "text": "outside of its own scope like from the",
    "start": "36960",
    "end": "38800"
  },
  {
    "text": "global environment or an outer function",
    "start": "38800",
    "end": "40960"
  },
  {
    "text": "that leaves us with an open expression",
    "start": "40960",
    "end": "42800"
  },
  {
    "text": "that references other",
    "start": "42800",
    "end": "44000"
  },
  {
    "text": "free variables throughout the",
    "start": "44000",
    "end": "45200"
  },
  {
    "text": "environment now in order for the",
    "start": "45200",
    "end": "46719"
  },
  {
    "text": "interpreter to call this function",
    "start": "46719",
    "end": "48320"
  },
  {
    "text": "and also know the value of these free",
    "start": "48320",
    "end": "50160"
  },
  {
    "text": "variables it creates a closure to store",
    "start": "50160",
    "end": "52640"
  },
  {
    "text": "them in a place in memory where they can",
    "start": "52640",
    "end": "54399"
  },
  {
    "text": "be accessed later",
    "start": "54399",
    "end": "55520"
  },
  {
    "text": "that area of memory is called the heap",
    "start": "55520",
    "end": "57440"
  },
  {
    "text": "and unlike the call stack which is",
    "start": "57440",
    "end": "58960"
  },
  {
    "text": "short-lived",
    "start": "58960",
    "end": "59600"
  },
  {
    "text": "it can keep data in memory indefinitely",
    "start": "59600",
    "end": "61760"
  },
  {
    "text": "then decide once you get rid of it later",
    "start": "61760",
    "end": "63440"
  },
  {
    "text": "with the garbage collector",
    "start": "63440",
    "end": "64640"
  },
  {
    "text": "so a closure is not just a function it's",
    "start": "64640",
    "end": "66880"
  },
  {
    "text": "a function combined with its outer state",
    "start": "66880",
    "end": "69040"
  },
  {
    "text": "or lexical environment as you might",
    "start": "69040",
    "end": "70880"
  },
  {
    "text": "imagine closures require more memory and",
    "start": "70880",
    "end": "72960"
  },
  {
    "text": "processing power than a pure function",
    "start": "72960",
    "end": "74720"
  },
  {
    "text": "but you'll come across many practical",
    "start": "74720",
    "end": "76320"
  },
  {
    "text": "reasons to use them",
    "start": "76320",
    "end": "77280"
  },
  {
    "start": "77000",
    "end": "130000"
  },
  {
    "text": "the most important one being data",
    "start": "77280",
    "end": "78960"
  },
  {
    "text": "encapsulation to prevent leaking or",
    "start": "78960",
    "end": "80960"
  },
  {
    "text": "exposing data where it's not needed we",
    "start": "80960",
    "end": "82799"
  },
  {
    "text": "can create a closure by defining an",
    "start": "82799",
    "end": "84400"
  },
  {
    "text": "outer function that contains the state",
    "start": "84400",
    "end": "86320"
  },
  {
    "text": "then an inner function that operates on",
    "start": "86320",
    "end": "88240"
  },
  {
    "text": "it the data contained here will not leak",
    "start": "88240",
    "end": "90079"
  },
  {
    "text": "out to the surrounding environment the",
    "start": "90079",
    "end": "91680"
  },
  {
    "text": "inner function has access to data",
    "start": "91680",
    "end": "93759"
  },
  {
    "text": "defined in the outer function scope but",
    "start": "93759",
    "end": "95759"
  },
  {
    "text": "the outer function does not have",
    "start": "95759",
    "end": "97200"
  },
  {
    "text": "access to the inner function in addition",
    "start": "97200",
    "end": "99280"
  },
  {
    "text": "many javascript apis are callback based",
    "start": "99280",
    "end": "101840"
  },
  {
    "text": "you can use closures to create a",
    "start": "101840",
    "end": "103439"
  },
  {
    "text": "function factory that takes an argument",
    "start": "103439",
    "end": "105439"
  },
  {
    "text": "then returns a brand new function which",
    "start": "105439",
    "end": "107200"
  },
  {
    "text": "can then be passed along to other",
    "start": "107200",
    "end": "108640"
  },
  {
    "text": "functions that expect a callback",
    "start": "108640",
    "end": "110320"
  },
  {
    "text": "this has been javascript closures in 100",
    "start": "110320",
    "end": "112560"
  },
  {
    "text": "seconds but stay tuned",
    "start": "112560",
    "end": "114000"
  },
  {
    "text": "because today we're going beyond 100",
    "start": "114000",
    "end": "115759"
  },
  {
    "text": "seconds to take a look at one of the",
    "start": "115759",
    "end": "117360"
  },
  {
    "text": "most famous javascript trick questions",
    "start": "117360",
    "end": "119360"
  },
  {
    "text": "that will wreck you on an interview if",
    "start": "119360",
    "end": "120960"
  },
  {
    "text": "you don't know closures but first make",
    "start": "120960",
    "end": "122799"
  },
  {
    "text": "sure to like and subscribe i'm trying to",
    "start": "122799",
    "end": "124479"
  },
  {
    "text": "fulfill my childhood dream of getting to",
    "start": "124479",
    "end": "126320"
  },
  {
    "text": "a million subscribers but it's going to",
    "start": "126320",
    "end": "127920"
  },
  {
    "text": "be really hard to get there",
    "start": "127920",
    "end": "129039"
  },
  {
    "text": "if you don't click the button just",
    "start": "129039",
    "end": "130640"
  },
  {
    "start": "130000",
    "end": "244000"
  },
  {
    "text": "kidding i have a ton of fun making these",
    "start": "130640",
    "end": "132239"
  },
  {
    "text": "videos and learn something new every",
    "start": "132239",
    "end": "134000"
  },
  {
    "text": "time",
    "start": "134000",
    "end": "134319"
  },
  {
    "text": "a great example of which is this tricky",
    "start": "134319",
    "end": "136080"
  },
  {
    "text": "javascript interview question the",
    "start": "136080",
    "end": "137599"
  },
  {
    "text": "question itself",
    "start": "137599",
    "end": "138560"
  },
  {
    "text": "is what does this code log out let's go",
    "start": "138560",
    "end": "140720"
  },
  {
    "text": "through it line by line",
    "start": "140720",
    "end": "142000"
  },
  {
    "text": "first we're declaring a variable i with",
    "start": "142000",
    "end": "144319"
  },
  {
    "text": "the var keyword",
    "start": "144319",
    "end": "145360"
  },
  {
    "text": "then a for loop that will run three",
    "start": "145360",
    "end": "147040"
  },
  {
    "text": "times by incrementing that variable",
    "start": "147040",
    "end": "149200"
  },
  {
    "text": "now inside the for loop is where",
    "start": "149200",
    "end": "150800"
  },
  {
    "text": "closures come into play we define a",
    "start": "150800",
    "end": "152720"
  },
  {
    "text": "function",
    "start": "152720",
    "end": "153360"
  },
  {
    "text": "log that console logs the global",
    "start": "153360",
    "end": "155840"
  },
  {
    "text": "variable i",
    "start": "155840",
    "end": "156959"
  },
  {
    "text": "this is not a pure function because it",
    "start": "156959",
    "end": "158720"
  },
  {
    "text": "depends on a variable outside of its",
    "start": "158720",
    "end": "160879"
  },
  {
    "text": "scope",
    "start": "160879",
    "end": "161360"
  },
  {
    "text": "therefore creating a closure then from",
    "start": "161360",
    "end": "163599"
  },
  {
    "text": "there we set up a timeout",
    "start": "163599",
    "end": "165200"
  },
  {
    "text": "and pass the log function as the",
    "start": "165200",
    "end": "167120"
  },
  {
    "text": "callback this queues up a task",
    "start": "167120",
    "end": "169120"
  },
  {
    "text": "to execute the log function after 100",
    "start": "169120",
    "end": "171519"
  },
  {
    "text": "milliseconds",
    "start": "171519",
    "end": "172400"
  },
  {
    "text": "so what do you think the output of this",
    "start": "172400",
    "end": "173840"
  },
  {
    "text": "code will be we're capturing the i",
    "start": "173840",
    "end": "175519"
  },
  {
    "text": "variable in the closure for each",
    "start": "175519",
    "end": "177200"
  },
  {
    "text": "iteration of the loop",
    "start": "177200",
    "end": "178400"
  },
  {
    "text": "so it would seem like it should log out",
    "start": "178400",
    "end": "180239"
  },
  {
    "text": "as 0 1 2.",
    "start": "180239",
    "end": "181440"
  },
  {
    "text": "but if we log it out it actually console",
    "start": "181440",
    "end": "183440"
  },
  {
    "text": "logs three three times",
    "start": "183440",
    "end": "185120"
  },
  {
    "text": "to understand why that happens we also",
    "start": "185120",
    "end": "187120"
  },
  {
    "text": "need to understand the difference",
    "start": "187120",
    "end": "188400"
  },
  {
    "text": "between",
    "start": "188400",
    "end": "188879"
  },
  {
    "text": "var and let when you use var in a for",
    "start": "188879",
    "end": "191440"
  },
  {
    "text": "loop",
    "start": "191440",
    "end": "191920"
  },
  {
    "text": "that variable actually gets hoisted up",
    "start": "191920",
    "end": "194400"
  },
  {
    "text": "into the parent scope which in this case",
    "start": "194400",
    "end": "196640"
  },
  {
    "text": "would be the global scope watch what",
    "start": "196640",
    "end": "198400"
  },
  {
    "text": "happens when we change the variable to",
    "start": "198400",
    "end": "200080"
  },
  {
    "text": "let",
    "start": "200080",
    "end": "200560"
  },
  {
    "text": "we get our original expectation of a",
    "start": "200560",
    "end": "202720"
  },
  {
    "text": "console log of 0 1",
    "start": "202720",
    "end": "204400"
  },
  {
    "text": "2. with var we have a global variable",
    "start": "204400",
    "end": "206879"
  },
  {
    "text": "that we're mutating over and over again",
    "start": "206879",
    "end": "209040"
  },
  {
    "text": "but with let we're creating a variable",
    "start": "209040",
    "end": "211120"
  },
  {
    "text": "that is scoped to the for loop in other",
    "start": "211120",
    "end": "213280"
  },
  {
    "text": "words",
    "start": "213280",
    "end": "213760"
  },
  {
    "text": "it's local to the for loop and can't be",
    "start": "213760",
    "end": "215920"
  },
  {
    "text": "accessed outside of it now remember",
    "start": "215920",
    "end": "217920"
  },
  {
    "text": "a closure is the combination of a",
    "start": "217920",
    "end": "219840"
  },
  {
    "text": "function and its lexical environment",
    "start": "219840",
    "end": "222080"
  },
  {
    "text": "in the case of let the closure is",
    "start": "222080",
    "end": "224080"
  },
  {
    "text": "capturing the log function",
    "start": "224080",
    "end": "225599"
  },
  {
    "text": "along with the variable i for each",
    "start": "225599",
    "end": "227760"
  },
  {
    "text": "iteration of the loop which would be 0 1",
    "start": "227760",
    "end": "229760"
  },
  {
    "text": "2. if we didn't have a closure here",
    "start": "229760",
    "end": "231599"
  },
  {
    "text": "javascript would allocate that i",
    "start": "231599",
    "end": "233439"
  },
  {
    "text": "variable in memory",
    "start": "233439",
    "end": "234640"
  },
  {
    "text": "in the call stack and then immediately",
    "start": "234640",
    "end": "236319"
  },
  {
    "text": "release it but because we do have a",
    "start": "236319",
    "end": "237840"
  },
  {
    "text": "closure",
    "start": "237840",
    "end": "238400"
  },
  {
    "text": "it stores that variable in the heap",
    "start": "238400",
    "end": "240000"
  },
  {
    "text": "memory so it can be referenced again",
    "start": "240000",
    "end": "241599"
  },
  {
    "text": "when that closure is called by the",
    "start": "241599",
    "end": "242879"
  },
  {
    "text": "timeout in the future",
    "start": "242879",
    "end": "244159"
  },
  {
    "start": "244000",
    "end": "296000"
  },
  {
    "text": "but when var is used it's capturing the",
    "start": "244159",
    "end": "246080"
  },
  {
    "text": "reference to the global variable",
    "start": "246080",
    "end": "247680"
  },
  {
    "text": "the reason it logs three three times is",
    "start": "247680",
    "end": "249840"
  },
  {
    "text": "because the timeout",
    "start": "249840",
    "end": "250879"
  },
  {
    "text": "doesn't run until 100 milliseconds later",
    "start": "250879",
    "end": "253280"
  },
  {
    "text": "long after that for loop has completed",
    "start": "253280",
    "end": "255120"
  },
  {
    "text": "and",
    "start": "255120",
    "end": "255439"
  },
  {
    "text": "iterated up to three we can actually",
    "start": "255439",
    "end": "257440"
  },
  {
    "text": "examine this behavior in the browser dev",
    "start": "257440",
    "end": "259359"
  },
  {
    "text": "tools by adding a debugger to the",
    "start": "259359",
    "end": "261280"
  },
  {
    "text": "closure",
    "start": "261280",
    "end": "261919"
  },
  {
    "text": "if you try to run this code in the",
    "start": "261919",
    "end": "263280"
  },
  {
    "text": "browser with the devtools open",
    "start": "263280",
    "end": "264960"
  },
  {
    "text": "it will take you to the sources tab and",
    "start": "264960",
    "end": "266800"
  },
  {
    "text": "allow you to inspect the call stack and",
    "start": "266800",
    "end": "268560"
  },
  {
    "text": "scope of the function",
    "start": "268560",
    "end": "269600"
  },
  {
    "text": "when lead is used you can see we have a",
    "start": "269600",
    "end": "271360"
  },
  {
    "text": "block scoped variable named i",
    "start": "271360",
    "end": "273280"
  },
  {
    "text": "but when var is used that variable is",
    "start": "273280",
    "end": "275360"
  },
  {
    "text": "now in the global scope",
    "start": "275360",
    "end": "276639"
  },
  {
    "text": "which changes the way it's captured by",
    "start": "276639",
    "end": "278160"
  },
  {
    "text": "the closure that's a pretty tricky one",
    "start": "278160",
    "end": "279919"
  },
  {
    "text": "but javascript interviewers love to ask",
    "start": "279919",
    "end": "282000"
  },
  {
    "text": "questions like this if you ever find",
    "start": "282000",
    "end": "283600"
  },
  {
    "text": "yourself faced with a question like this",
    "start": "283600",
    "end": "285199"
  },
  {
    "text": "the best thing you can do is talk",
    "start": "285199",
    "end": "286560"
  },
  {
    "text": "through the code slowly and explain how",
    "start": "286560",
    "end": "288320"
  },
  {
    "text": "a closure works",
    "start": "288320",
    "end": "289280"
  },
  {
    "text": "so they know you're on the right track",
    "start": "289280",
    "end": "290560"
  },
  {
    "text": "even if you don't come to the right",
    "start": "290560",
    "end": "291680"
  },
  {
    "text": "conclusion",
    "start": "291680",
    "end": "292400"
  },
  {
    "text": "i'm going to go ahead and wrap things up",
    "start": "292400",
    "end": "293600"
  },
  {
    "text": "there thanks for watching and i will see",
    "start": "293600",
    "end": "295759"
  },
  {
    "text": "you",
    "start": "295759",
    "end": "296000"
  },
  {
    "text": "in the next one",
    "start": "296000",
    "end": "298800"
  }
]