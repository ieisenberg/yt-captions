[
  {
    "text": "[Music]",
    "start": "0",
    "end": "6319"
  },
  {
    "text": "building a real-time chat app used to be",
    "start": "6319",
    "end": "8730"
  },
  {
    "text": "something that would take at least weeks",
    "start": "8730",
    "end": "10290"
  },
  {
    "text": "of development time but with firebase it",
    "start": "10290",
    "end": "12330"
  },
  {
    "text": "becomes almost trivial because the SDK",
    "start": "12330",
    "end": "14370"
  },
  {
    "text": "handles all the state management and",
    "start": "14370",
    "end": "16108"
  },
  {
    "text": "data syncing in between the client and",
    "start": "16109",
    "end": "17820"
  },
  {
    "text": "server for you it's so easy in fact that",
    "start": "17820",
    "end": "20039"
  },
  {
    "text": "I built an entire chat app in the last",
    "start": "20039",
    "end": "21539"
  },
  {
    "text": "24 hours that you can use right now and",
    "start": "21539",
    "end": "23880"
  },
  {
    "text": "over the next few minutes I'll show you",
    "start": "23880",
    "end": "25350"
  },
  {
    "text": "exactly how I built it using an angular",
    "start": "25350",
    "end": "27210"
  },
  {
    "text": "fire and fire store if you're just",
    "start": "27210",
    "end": "29279"
  },
  {
    "text": "finding the channel like and subscribe",
    "start": "29279",
    "end": "30630"
  },
  {
    "text": "and if you leave a comment below you'll",
    "start": "30630",
    "end": "32008"
  },
  {
    "text": "have a chance to win either a sticker or",
    "start": "32009",
    "end": "33480"
  },
  {
    "text": "a t-shirt on the livestream later this",
    "start": "33480",
    "end": "35430"
  },
  {
    "text": "week now the first thing I want to talk",
    "start": "35430",
    "end": "37350"
  },
  {
    "text": "about in this video is data modeling",
    "start": "37350",
    "end": "39239"
  },
  {
    "text": "because there's no one-size-fits-all for",
    "start": "39239",
    "end": "41340"
  },
  {
    "text": "every chat feature the first thing every",
    "start": "41340",
    "end": "43649"
  },
  {
    "text": "app will need is a user authentication",
    "start": "43649",
    "end": "45270"
  },
  {
    "text": "system and then some public user profile",
    "start": "45270",
    "end": "47670"
  },
  {
    "text": "information saved in a user's collection",
    "start": "47670",
    "end": "49860"
  },
  {
    "text": "and firestore that's pretty",
    "start": "49860",
    "end": "51329"
  },
  {
    "text": "straightforward but you have a lot of",
    "start": "51329",
    "end": "52860"
  },
  {
    "text": "different options when it comes to",
    "start": "52860",
    "end": "54149"
  },
  {
    "text": "modeling the relationship between users",
    "start": "54149",
    "end": "56010"
  },
  {
    "text": "chats and individual messages",
    "start": "56010",
    "end": "58230"
  },
  {
    "text": "I think the logical first approach that",
    "start": "58230",
    "end": "60510"
  },
  {
    "text": "most people would take is to set up a",
    "start": "60510",
    "end": "62219"
  },
  {
    "text": "collection of chats and then for each of",
    "start": "62219",
    "end": "64170"
  },
  {
    "text": "these chats create a sub collection of",
    "start": "64170",
    "end": "66240"
  },
  {
    "text": "messages this is a good way to go",
    "start": "66240",
    "end": "68310"
  },
  {
    "text": "because you can save all of your chat",
    "start": "68310",
    "end": "69780"
  },
  {
    "text": "metadata on one small document and then",
    "start": "69780",
    "end": "71970"
  },
  {
    "text": "query as many messages as you need from",
    "start": "71970",
    "end": "74100"
  },
  {
    "text": "the sub collection and as an alternative",
    "start": "74100",
    "end": "75810"
  },
  {
    "text": "you might make this a root collection so",
    "start": "75810",
    "end": "78000"
  },
  {
    "text": "you can query the messages across all of",
    "start": "78000",
    "end": "79920"
  },
  {
    "text": "the different chats throughout your",
    "start": "79920",
    "end": "81060"
  },
  {
    "text": "application for example a root",
    "start": "81060",
    "end": "83250"
  },
  {
    "text": "collection will allow you to query all",
    "start": "83250",
    "end": "84659"
  },
  {
    "text": "the messages for a specific user across",
    "start": "84659",
    "end": "86909"
  },
  {
    "text": "all the different chats that they're",
    "start": "86909",
    "end": "88380"
  },
  {
    "text": "participating in I think this approach",
    "start": "88380",
    "end": "90360"
  },
  {
    "text": "is the most flexible but the drawback is",
    "start": "90360",
    "end": "92490"
  },
  {
    "text": "that you need to execute a document read",
    "start": "92490",
    "end": "94409"
  },
  {
    "text": "for every message that you show in the",
    "start": "94409",
    "end": "96270"
  },
  {
    "text": "UI in this video we're going to take a",
    "start": "96270",
    "end": "98430"
  },
  {
    "text": "completely different approach by",
    "start": "98430",
    "end": "99840"
  },
  {
    "text": "modeling each chat as its own document",
    "start": "99840",
    "end": "101939"
  },
  {
    "text": "and then embedding the messages for that",
    "start": "101939",
    "end": "103710"
  },
  {
    "text": "chat on the document this method is fast",
    "start": "103710",
    "end": "106350"
  },
  {
    "text": "and simple but there are some",
    "start": "106350",
    "end": "107759"
  },
  {
    "text": "limitations first we can no longer query",
    "start": "107759",
    "end": "110130"
  },
  {
    "text": "the individual messages because they're",
    "start": "110130",
    "end": "111869"
  },
  {
    "text": "embedded on the document we can only",
    "start": "111869",
    "end": "113490"
  },
  {
    "text": "sort them client side and the second",
    "start": "113490",
    "end": "115649"
  },
  {
    "text": "thing is that documents are limited to",
    "start": "115649",
    "end": "117540"
  },
  {
    "text": "one megabyte of data which is",
    "start": "117540",
    "end": "119280"
  },
  {
    "text": "conservatively somewhere between 250 and",
    "start": "119280",
    "end": "121710"
  },
  {
    "text": "a thousand messages per document to",
    "start": "121710",
    "end": "124320"
  },
  {
    "text": "address this limitation will set up a",
    "start": "124320",
    "end": "126000"
  },
  {
    "text": "cloud function that will either archive",
    "start": "126000",
    "end": "128129"
  },
  {
    "text": "or delete older messages and this has",
    "start": "128129",
    "end": "130500"
  },
  {
    "text": "the added benefit of keeping the",
    "start": "130500",
    "end": "131970"
  },
  {
    "text": "document size relatively small so",
    "start": "131970",
    "end": "133770"
  },
  {
    "text": "the initial load should always be very",
    "start": "133770",
    "end": "135390"
  },
  {
    "text": "performant if we look at the actual",
    "start": "135390",
    "end": "137160"
  },
  {
    "text": "database you can see that each chat has",
    "start": "137160",
    "end": "139170"
  },
  {
    "text": "an owner and then each individual",
    "start": "139170",
    "end": "140940"
  },
  {
    "text": "message is an object inside this",
    "start": "140940",
    "end": "142920"
  },
  {
    "text": "messages array it contains the user ID a",
    "start": "142920",
    "end": "145800"
  },
  {
    "text": "created at timestamp and the message",
    "start": "145800",
    "end": "147840"
  },
  {
    "text": "content when a user is logged in and",
    "start": "147840",
    "end": "150330"
  },
  {
    "text": "they create a new chat it will create",
    "start": "150330",
    "end": "151830"
  },
  {
    "text": "this document with their user ID as the",
    "start": "151830",
    "end": "153870"
  },
  {
    "text": "owner ID this will give us a URL that",
    "start": "153870",
    "end": "156720"
  },
  {
    "text": "the user can then share so other",
    "start": "156720",
    "end": "158400"
  },
  {
    "text": "authenticated users can use this link",
    "start": "158400",
    "end": "160410"
  },
  {
    "text": "and then participate in the chat",
    "start": "160410",
    "end": "161820"
  },
  {
    "text": "currently all the chats are public but",
    "start": "161820",
    "end": "163650"
  },
  {
    "text": "check out episode 75 if you want to",
    "start": "163650",
    "end": "165570"
  },
  {
    "text": "learn more about user authorization and",
    "start": "165570",
    "end": "167250"
  },
  {
    "text": "firestore now let's get to building this",
    "start": "167250",
    "end": "169230"
  },
  {
    "text": "thing the first thing you'll need is an",
    "start": "169230",
    "end": "170520"
  },
  {
    "text": "angular app with angular fire and",
    "start": "170520",
    "end": "172290"
  },
  {
    "text": "firebase installed I'm not going to",
    "start": "172290",
    "end": "174330"
  },
  {
    "text": "cover every single line of code in",
    "start": "174330",
    "end": "175620"
  },
  {
    "text": "detail but you can find the full source",
    "start": "175620",
    "end": "177480"
  },
  {
    "text": "code on angular firebase com we have",
    "start": "177480",
    "end": "180180"
  },
  {
    "text": "three main resources in our code that",
    "start": "180180",
    "end": "181800"
  },
  {
    "text": "we'll focus on the first one is our",
    "start": "181800",
    "end": "183480"
  },
  {
    "text": "authentication service which gets that",
    "start": "183480",
    "end": "185160"
  },
  {
    "text": "user logged in and saves their",
    "start": "185160",
    "end": "186690"
  },
  {
    "text": "information a firestorm then we have a",
    "start": "186690",
    "end": "188700"
  },
  {
    "text": "chat service which handles all the",
    "start": "188700",
    "end": "190410"
  },
  {
    "text": "interaction with the chat like creating",
    "start": "190410",
    "end": "192120"
  },
  {
    "text": "new ones and adding messages to it and",
    "start": "192120",
    "end": "194010"
  },
  {
    "text": "then we have a chat component which",
    "start": "194010",
    "end": "195690"
  },
  {
    "text": "handles displaying the actual chat",
    "start": "195690",
    "end": "197370"
  },
  {
    "text": "information in the UI the chat component",
    "start": "197370",
    "end": "200190"
  },
  {
    "text": "will be loaded by the angular router and",
    "start": "200190",
    "end": "202140"
  },
  {
    "text": "you can see here that it's nested under",
    "start": "202140",
    "end": "204000"
  },
  {
    "text": "a dynamic ID so we can save each chat",
    "start": "204000",
    "end": "206460"
  },
  {
    "text": "under its own unique URL the first thing",
    "start": "206460",
    "end": "208920"
  },
  {
    "text": "we'll look at is the auth service and",
    "start": "208920",
    "end": "210630"
  },
  {
    "text": "we're not going to go through it line by",
    "start": "210630",
    "end": "211710"
  },
  {
    "text": "line but I just want to show you",
    "start": "211710",
    "end": "212940"
  },
  {
    "text": "generally what's going on you can get a",
    "start": "212940",
    "end": "214770"
  },
  {
    "text": "more detailed explanation in episode 55",
    "start": "214770",
    "end": "217250"
  },
  {
    "text": "the first thing we're doing is we're",
    "start": "217250",
    "end": "219510"
  },
  {
    "text": "listening to the angular fire off state",
    "start": "219510",
    "end": "221640"
  },
  {
    "text": "which is the currently authenticated",
    "start": "221640",
    "end": "222600"
  },
  {
    "text": "user and then we're going into fire",
    "start": "222600",
    "end": "224670"
  },
  {
    "text": "store and grabbing a related user",
    "start": "224670",
    "end": "226770"
  },
  {
    "text": "document with their profile information",
    "start": "226770",
    "end": "228500"
  },
  {
    "text": "then we also have a handful of methods",
    "start": "228500",
    "end": "230910"
  },
  {
    "text": "to sign the user in with Google and also",
    "start": "230910",
    "end": "232770"
  },
  {
    "text": "sign out and the one unique line of code",
    "start": "232770",
    "end": "235110"
  },
  {
    "text": "that you'll see throughout this video is",
    "start": "235110",
    "end": "236550"
  },
  {
    "text": "this get user method which converts that",
    "start": "236550",
    "end": "238620"
  },
  {
    "text": "user observable to a promise so we can",
    "start": "238620",
    "end": "240810"
  },
  {
    "text": "later use it with async await this is",
    "start": "240810",
    "end": "242760"
  },
  {
    "text": "just much easier to work with when it",
    "start": "242760",
    "end": "244200"
  },
  {
    "text": "comes to writing data to fire store so",
    "start": "244200",
    "end": "247110"
  },
  {
    "text": "now that we have a way to manage user",
    "start": "247110",
    "end": "248580"
  },
  {
    "text": "data we're going to go into our chat",
    "start": "248580",
    "end": "250230"
  },
  {
    "text": "service and build out the actual methods",
    "start": "250230",
    "end": "252360"
  },
  {
    "text": "that control our chat the service will",
    "start": "252360",
    "end": "255270"
  },
  {
    "text": "use angular fire store along with our",
    "start": "255270",
    "end": "257400"
  },
  {
    "text": "off service the router and we'll also",
    "start": "257400",
    "end": "259650"
  },
  {
    "text": "import fire store directly from firebase",
    "start": "259650",
    "end": "261989"
  },
  {
    "text": "app the first method we'll write is get",
    "start": "261989",
    "end": "264360"
  },
  {
    "text": "chat which just retrieves a chat",
    "start": "264360",
    "end": "266310"
  },
  {
    "text": "document from the",
    "start": "266310",
    "end": "267330"
  },
  {
    "text": "store database we're going to want the",
    "start": "267330",
    "end": "269610"
  },
  {
    "text": "chat document to be retrieved as an",
    "start": "269610",
    "end": "271259"
  },
  {
    "text": "observable because it will be constantly",
    "start": "271259",
    "end": "273090"
  },
  {
    "text": "changing and we'll also want to tell",
    "start": "273090",
    "end": "275250"
  },
  {
    "text": "angularfire to map the document ID along",
    "start": "275250",
    "end": "277889"
  },
  {
    "text": "with the data payload as the final",
    "start": "277889",
    "end": "279719"
  },
  {
    "text": "result from this observable this will",
    "start": "279719",
    "end": "281909"
  },
  {
    "text": "just make it easier to pass the document",
    "start": "281909",
    "end": "284069"
  },
  {
    "text": "ID around once we get to the main",
    "start": "284069",
    "end": "285360"
  },
  {
    "text": "component here in a few minutes the next",
    "start": "285360",
    "end": "288060"
  },
  {
    "text": "method create will add a new document to",
    "start": "288060",
    "end": "290280"
  },
  {
    "text": "the database we can make it an async",
    "start": "290280",
    "end": "292229"
  },
  {
    "text": "function because all right methods in",
    "start": "292229",
    "end": "294000"
  },
  {
    "text": "firebase are promise based when we fire",
    "start": "294000",
    "end": "296520"
  },
  {
    "text": "this create method we want to ensure",
    "start": "296520",
    "end": "298289"
  },
  {
    "text": "that we have the currently authenticated",
    "start": "298289",
    "end": "299370"
  },
  {
    "text": "users user ID we can get it by awaiting",
    "start": "299370",
    "end": "302789"
  },
  {
    "text": "the promise and then we'll set up a data",
    "start": "302789",
    "end": "304770"
  },
  {
    "text": "payload here with the user ID a",
    "start": "304770",
    "end": "306300"
  },
  {
    "text": "timestamp and then also an empty array",
    "start": "306300",
    "end": "308849"
  },
  {
    "text": "of messages from there it's just a",
    "start": "308849",
    "end": "310949"
  },
  {
    "text": "matter of making a reference to the",
    "start": "310949",
    "end": "312330"
  },
  {
    "text": "chats collection and then we'll call the",
    "start": "312330",
    "end": "314039"
  },
  {
    "text": "add method to add this data as a new",
    "start": "314039",
    "end": "316409"
  },
  {
    "text": "document when that operation is complete",
    "start": "316409",
    "end": "318419"
  },
  {
    "text": "we'll go ahead and use the angular",
    "start": "318419",
    "end": "319710"
  },
  {
    "text": "router to navigate to the URL with that",
    "start": "319710",
    "end": "322349"
  },
  {
    "text": "chat ID that takes care of creating a",
    "start": "322349",
    "end": "325139"
  },
  {
    "text": "new chatroom adding in messages to the",
    "start": "325139",
    "end": "327090"
  },
  {
    "text": "chat follows a very similar process",
    "start": "327090",
    "end": "329069"
  },
  {
    "text": "well once again create an async function",
    "start": "329069",
    "end": "330960"
  },
  {
    "text": "that takes the chat ID and the message",
    "start": "330960",
    "end": "333090"
  },
  {
    "text": "content as an argument then we'll",
    "start": "333090",
    "end": "335430"
  },
  {
    "text": "determine the current users ID with our",
    "start": "335430",
    "end": "337169"
  },
  {
    "text": "get user method and then we'll set up a",
    "start": "337169",
    "end": "339270"
  },
  {
    "text": "data payload with the user ID the",
    "start": "339270",
    "end": "341190"
  },
  {
    "text": "content and a created at timestamp we're",
    "start": "341190",
    "end": "344129"
  },
  {
    "text": "going to use a relatively new method and",
    "start": "344129",
    "end": "345930"
  },
  {
    "text": "firestore which is the array union",
    "start": "345930",
    "end": "347969"
  },
  {
    "text": "method it changes the behavior of",
    "start": "347969",
    "end": "350460"
  },
  {
    "text": "updates when working with arrays so if",
    "start": "350460",
    "end": "352560"
  },
  {
    "text": "we have a unique object it's going to",
    "start": "352560",
    "end": "354479"
  },
  {
    "text": "append that object to the end of the",
    "start": "354479",
    "end": "356190"
  },
  {
    "text": "array the nice thing about this is that",
    "start": "356190",
    "end": "358289"
  },
  {
    "text": "it ensures every messages unique and",
    "start": "358289",
    "end": "360270"
  },
  {
    "text": "item potent in other words if we",
    "start": "360270",
    "end": "362370"
  },
  {
    "text": "accidentally submit the same data",
    "start": "362370",
    "end": "363960"
  },
  {
    "text": "payload twice only one of those objects",
    "start": "363960",
    "end": "366120"
  },
  {
    "text": "will actually be added to the chat array",
    "start": "366120",
    "end": "368009"
  },
  {
    "text": "and that's actually a really nice",
    "start": "368009",
    "end": "369599"
  },
  {
    "text": "advantage over working with a dedicated",
    "start": "369599",
    "end": "371460"
  },
  {
    "text": "collection for your messages the last",
    "start": "371460",
    "end": "373860"
  },
  {
    "text": "thing I'm going to show you here",
    "start": "373860",
    "end": "374699"
  },
  {
    "text": "requires some pretty advanced rxjs",
    "start": "374699",
    "end": "376500"
  },
  {
    "text": "knowledge if you get completely lost",
    "start": "376500",
    "end": "378449"
  },
  {
    "text": "with this code it's understandable and I",
    "start": "378449",
    "end": "380550"
  },
  {
    "text": "recommend that you watch my firestore",
    "start": "380550",
    "end": "382259"
  },
  {
    "text": "joins video to get a better idea of",
    "start": "382259",
    "end": "384000"
  },
  {
    "text": "what's going on here so the purpose of",
    "start": "384000",
    "end": "386069"
  },
  {
    "text": "this method is to join the user profiles",
    "start": "386069",
    "end": "388440"
  },
  {
    "text": "to the individual chat messages this",
    "start": "388440",
    "end": "391110"
  },
  {
    "text": "will ensure that our chat messages",
    "start": "391110",
    "end": "392550"
  },
  {
    "text": "always show the most recent user profile",
    "start": "392550",
    "end": "394740"
  },
  {
    "text": "image and user name on the message",
    "start": "394740",
    "end": "396509"
  },
  {
    "text": "itself this can get pretty complex",
    "start": "396509",
    "end": "398399"
  },
  {
    "text": "because the user can post multiple",
    "start": "398399",
    "end": "400139"
  },
  {
    "text": "messages to",
    "start": "400139",
    "end": "401009"
  },
  {
    "text": "single chatroom but we don't want to",
    "start": "401009",
    "end": "402900"
  },
  {
    "text": "redundantly read their profile data over",
    "start": "402900",
    "end": "405119"
  },
  {
    "text": "and over again so what we do is we take",
    "start": "405119",
    "end": "407249"
  },
  {
    "text": "the original chat document and find all",
    "start": "407249",
    "end": "409409"
  },
  {
    "text": "of the unique user id's within that",
    "start": "409409",
    "end": "411059"
  },
  {
    "text": "messages array then we read all those",
    "start": "411059",
    "end": "412949"
  },
  {
    "text": "user profiles concurrently using the",
    "start": "412949",
    "end": "414869"
  },
  {
    "text": "combined latest method and lastly we",
    "start": "414869",
    "end": "417180"
  },
  {
    "text": "recompose the original messages object",
    "start": "417180",
    "end": "419309"
  },
  {
    "text": "so that every message also has a user",
    "start": "419309",
    "end": "421469"
  },
  {
    "text": "property with the user profile data the",
    "start": "421469",
    "end": "424110"
  },
  {
    "text": "end result is that we have a single",
    "start": "424110",
    "end": "425399"
  },
  {
    "text": "object that has all the chat messages",
    "start": "425399",
    "end": "427259"
  },
  {
    "text": "and all the user profiles and everything",
    "start": "427259",
    "end": "429449"
  },
  {
    "text": "is synced up in real time so that takes",
    "start": "429449",
    "end": "431699"
  },
  {
    "text": "care of us the hard stuff now we can get",
    "start": "431699",
    "end": "433680"
  },
  {
    "text": "into the chat component and build out",
    "start": "433680",
    "end": "435389"
  },
  {
    "text": "the UI this component will depend on our",
    "start": "435389",
    "end": "437729"
  },
  {
    "text": "chat service and also activated route",
    "start": "437729",
    "end": "440069"
  },
  {
    "text": "from the angular router we have two",
    "start": "440069",
    "end": "442169"
  },
  {
    "text": "properties on this component we have the",
    "start": "442169",
    "end": "443939"
  },
  {
    "text": "chat observable which is the actual data",
    "start": "443939",
    "end": "445770"
  },
  {
    "text": "that we want to show in the UI and then",
    "start": "445770",
    "end": "447569"
  },
  {
    "text": "new message which is the form input that",
    "start": "447569",
    "end": "449520"
  },
  {
    "text": "the user will enter to add a new message",
    "start": "449520",
    "end": "451649"
  },
  {
    "text": "to the chat now because this component",
    "start": "451649",
    "end": "453959"
  },
  {
    "text": "is loaded by the angular router we can",
    "start": "453959",
    "end": "455819"
  },
  {
    "text": "grab the document ID using activated",
    "start": "455819",
    "end": "457800"
  },
  {
    "text": "route which we do by saying route",
    "start": "457800",
    "end": "459479"
  },
  {
    "text": "snapshot / am map get ID we can use that",
    "start": "459479",
    "end": "463289"
  },
  {
    "text": "ID to first set up a source observable",
    "start": "463289",
    "end": "465330"
  },
  {
    "text": "of the chat messages and you could just",
    "start": "465330",
    "end": "467669"
  },
  {
    "text": "stop at this point if you only need the",
    "start": "467669",
    "end": "469139"
  },
  {
    "text": "messages but we also want to join the",
    "start": "469139",
    "end": "471300"
  },
  {
    "text": "users to this original observable so",
    "start": "471300",
    "end": "473669"
  },
  {
    "text": "we'll set up the chat property as the",
    "start": "473669",
    "end": "476069"
  },
  {
    "text": "observable returned from the join users",
    "start": "476069",
    "end": "478080"
  },
  {
    "text": "method for this demo I'm just going to",
    "start": "478080",
    "end": "480240"
  },
  {
    "text": "use the most basic type of form that you",
    "start": "480240",
    "end": "481919"
  },
  {
    "text": "can use an angular which is an NG model",
    "start": "481919",
    "end": "483659"
  },
  {
    "text": "form these are also called template",
    "start": "483659",
    "end": "485939"
  },
  {
    "text": "driven forms and basically we're just",
    "start": "485939",
    "end": "487589"
  },
  {
    "text": "going to take the value from a form",
    "start": "487589",
    "end": "489149"
  },
  {
    "text": "input and send it to our send message",
    "start": "489149",
    "end": "491519"
  },
  {
    "text": "method which will update firestore and",
    "start": "491519",
    "end": "493709"
  },
  {
    "text": "the last little tip here is that",
    "start": "493709",
    "end": "495389"
  },
  {
    "text": "whenever working with a real-time array",
    "start": "495389",
    "end": "497159"
  },
  {
    "text": "and looping over it in angular you",
    "start": "497159",
    "end": "499019"
  },
  {
    "text": "should set up a track by method this",
    "start": "499019",
    "end": "501059"
  },
  {
    "text": "just tells angular to only rerender",
    "start": "501059",
    "end": "502889"
  },
  {
    "text": "items that have changed and it will",
    "start": "502889",
    "end": "504449"
  },
  {
    "text": "dramatically improve the user experience",
    "start": "504449",
    "end": "505620"
  },
  {
    "text": "and performance now we can switch over",
    "start": "505620",
    "end": "508259"
  },
  {
    "text": "to the HTML and we'll set up an NG if",
    "start": "508259",
    "end": "510509"
  },
  {
    "text": "statement that unwraps that chat",
    "start": "510509",
    "end": "512459"
  },
  {
    "text": "observable you'll notice I'm doing this",
    "start": "512459",
    "end": "514440"
  },
  {
    "text": "on an NG container which allows us to",
    "start": "514440",
    "end": "516209"
  },
  {
    "text": "set up a context in this template",
    "start": "516209",
    "end": "517919"
  },
  {
    "text": "without actually rendering any Dom",
    "start": "517919",
    "end": "519659"
  },
  {
    "text": "elements so once our chat observable",
    "start": "519659",
    "end": "522060"
  },
  {
    "text": "data is ready we can just use it as this",
    "start": "522060",
    "end": "523800"
  },
  {
    "text": "chat variable throughout the template",
    "start": "523800",
    "end": "525449"
  },
  {
    "text": "from there I'll set up an NG for loop",
    "start": "525449",
    "end": "527970"
  },
  {
    "text": "and loop over the messages in the chat",
    "start": "527970",
    "end": "529920"
  },
  {
    "text": "messages array because they're all",
    "start": "529920",
    "end": "532110"
  },
  {
    "text": "embedded on the document we don't have",
    "start": "532110",
    "end": "533579"
  },
  {
    "text": "to wait for anything asynchronous",
    "start": "533579",
    "end": "535460"
  },
  {
    "text": "and this is the point where we'll also",
    "start": "535460",
    "end": "536990"
  },
  {
    "text": "want to use our track by function from",
    "start": "536990",
    "end": "539300"
  },
  {
    "text": "there we'll have access to the message",
    "start": "539300",
    "end": "540680"
  },
  {
    "text": "itself plus some information about the",
    "start": "540680",
    "end": "542510"
  },
  {
    "text": "user and the final step is to set up our",
    "start": "542510",
    "end": "545089"
  },
  {
    "text": "form if we use ng model it will bind",
    "start": "545089",
    "end": "547250"
  },
  {
    "text": "this new message property to the",
    "start": "547250",
    "end": "548899"
  },
  {
    "text": "component type script and then if the",
    "start": "548899",
    "end": "550940"
  },
  {
    "text": "user clicks the Enter key we'll go ahead",
    "start": "550940",
    "end": "552709"
  },
  {
    "text": "and submit their chat message and just",
    "start": "552709",
    "end": "555230"
  },
  {
    "text": "for good measure will also add a submit",
    "start": "555230",
    "end": "556880"
  },
  {
    "text": "button for users that don't have an",
    "start": "556880",
    "end": "558529"
  },
  {
    "text": "Enter key that takes care of the front",
    "start": "558529",
    "end": "561080"
  },
  {
    "text": "end code but there's still one thing",
    "start": "561080",
    "end": "562399"
  },
  {
    "text": "that we have to address to really make",
    "start": "562399",
    "end": "564050"
  },
  {
    "text": "this a usable feature as I mentioned",
    "start": "564050",
    "end": "566630"
  },
  {
    "text": "earlier this data model will only work",
    "start": "566630",
    "end": "568399"
  },
  {
    "text": "up to one megabyte at which point",
    "start": "568399",
    "end": "570170"
  },
  {
    "text": "firestore will start rejecting new",
    "start": "570170",
    "end": "571760"
  },
  {
    "text": "messages we can actually address this",
    "start": "571760",
    "end": "574040"
  },
  {
    "text": "with a very simple cloud function that",
    "start": "574040",
    "end": "575870"
  },
  {
    "text": "just listens to the incoming messages",
    "start": "575870",
    "end": "577940"
  },
  {
    "text": "and if we get over a certain point it",
    "start": "577940",
    "end": "579830"
  },
  {
    "text": "will just either archive or delete the",
    "start": "579830",
    "end": "581779"
  },
  {
    "text": "oldest messages if you look over here on",
    "start": "581779",
    "end": "584209"
  },
  {
    "text": "the left I'm adding new messages and",
    "start": "584209",
    "end": "585860"
  },
  {
    "text": "once I get over ten it's going to start",
    "start": "585860",
    "end": "587779"
  },
  {
    "text": "deleting messages on the right that's my",
    "start": "587779",
    "end": "590240"
  },
  {
    "text": "cloud function working in the background",
    "start": "590240",
    "end": "591709"
  },
  {
    "text": "and I don't know if something change",
    "start": "591709",
    "end": "593089"
  },
  {
    "text": "recently but there's almost no latency",
    "start": "593089",
    "end": "595160"
  },
  {
    "text": "on these requests the cloud function",
    "start": "595160",
    "end": "597110"
  },
  {
    "text": "round-trip finishes in just a few",
    "start": "597110",
    "end": "598580"
  },
  {
    "text": "hundred milliseconds so I already have",
    "start": "598580",
    "end": "601279"
  },
  {
    "text": "cloud functions initialized in this",
    "start": "601279",
    "end": "602600"
  },
  {
    "text": "project with typescript and the only",
    "start": "602600",
    "end": "604370"
  },
  {
    "text": "thing I'm doing is importing the admin",
    "start": "604370",
    "end": "606290"
  },
  {
    "text": "SDK and initializing it then we'll go",
    "start": "606290",
    "end": "609080"
  },
  {
    "text": "ahead and define firestore as our",
    "start": "609080",
    "end": "610670"
  },
  {
    "text": "database then we can name our function",
    "start": "610670",
    "end": "612920"
  },
  {
    "text": "archive chat then we'll have it point to",
    "start": "612920",
    "end": "615170"
  },
  {
    "text": "our chat collection and only run when",
    "start": "615170",
    "end": "617420"
  },
  {
    "text": "the document is updated the purpose of",
    "start": "617420",
    "end": "620029"
  },
  {
    "text": "this function is to look at the current",
    "start": "620029",
    "end": "621770"
  },
  {
    "text": "size of the messages array if there's",
    "start": "621770",
    "end": "623930"
  },
  {
    "text": "more than 50 messages in there or if the",
    "start": "623930",
    "end": "626209"
  },
  {
    "text": "messages characters are greater than",
    "start": "626209",
    "end": "628130"
  },
  {
    "text": "10,000 then we'll want to start deleting",
    "start": "628130",
    "end": "630529"
  },
  {
    "text": "or archiving those messages it's not",
    "start": "630529",
    "end": "632959"
  },
  {
    "text": "actually implemented here but you could",
    "start": "632959",
    "end": "634730"
  },
  {
    "text": "use json stringify to check the total",
    "start": "634730",
    "end": "636920"
  },
  {
    "text": "length of the object as a string then",
    "start": "636920",
    "end": "639320"
  },
  {
    "text": "you can roughly estimate the total size",
    "start": "639320",
    "end": "640820"
  },
  {
    "text": "of the document based on the length of",
    "start": "640820",
    "end": "642350"
  },
  {
    "text": "that string so if we determine that the",
    "start": "642350",
    "end": "645050"
  },
  {
    "text": "array is too big then we'll go ahead and",
    "start": "645050",
    "end": "646700"
  },
  {
    "text": "start splicing items from the beginning",
    "start": "646700",
    "end": "648620"
  },
  {
    "text": "of that array or the oldest messages",
    "start": "648620",
    "end": "650510"
  },
  {
    "text": "then you'll also notice that I'm setting",
    "start": "650510",
    "end": "652490"
  },
  {
    "text": "this up as a batch right because you",
    "start": "652490",
    "end": "653899"
  },
  {
    "text": "might want to add the deleted messages",
    "start": "653899",
    "end": "655310"
  },
  {
    "text": "to some other location if that is the",
    "start": "655310",
    "end": "658130"
  },
  {
    "text": "case you definitely want to make this an",
    "start": "658130",
    "end": "659390"
  },
  {
    "text": "atomic batch because you don't want the",
    "start": "659390",
    "end": "661310"
  },
  {
    "text": "delete operation to succeed and the",
    "start": "661310",
    "end": "663260"
  },
  {
    "text": "update to fail then you would lose those",
    "start": "663260",
    "end": "664850"
  },
  {
    "text": "messages forever and lastly we'll just",
    "start": "664850",
    "end": "667640"
  },
  {
    "text": "go ahead and return null if",
    "start": "667640",
    "end": "669020"
  },
  {
    "text": "these conditions are not met we won't",
    "start": "669020",
    "end": "670460"
  },
  {
    "text": "make any update to the existing document",
    "start": "670460",
    "end": "672530"
  },
  {
    "text": "now we have a basic chat feature up and",
    "start": "672530",
    "end": "674810"
  },
  {
    "text": "running make sure to check out the link",
    "start": "674810",
    "end": "676250"
  },
  {
    "text": "in the description and play around with",
    "start": "676250",
    "end": "677930"
  },
  {
    "text": "the live demo based on this code if this",
    "start": "677930",
    "end": "680300"
  },
  {
    "text": "video helped you please like and",
    "start": "680300",
    "end": "681560"
  },
  {
    "text": "subscribe and I realize that we went",
    "start": "681560",
    "end": "683390"
  },
  {
    "text": "through that code pretty fast but I'm",
    "start": "683390",
    "end": "684830"
  },
  {
    "text": "working on a fully fledged chat feature",
    "start": "684830",
    "end": "686630"
  },
  {
    "text": "for the ionic course which will be",
    "start": "686630",
    "end": "688520"
  },
  {
    "text": "released in the next week or two so if",
    "start": "688520",
    "end": "690470"
  },
  {
    "text": "you want to see more features at a",
    "start": "690470",
    "end": "691850"
  },
  {
    "text": "slightly slower pace than I recommend",
    "start": "691850",
    "end": "693710"
  },
  {
    "text": "upgrading to a pro membership to get",
    "start": "693710",
    "end": "695390"
  },
  {
    "text": "access to that course thanks for",
    "start": "695390",
    "end": "697340"
  },
  {
    "text": "watching and I'll talk to you soon",
    "start": "697340",
    "end": "700900"
  }
]