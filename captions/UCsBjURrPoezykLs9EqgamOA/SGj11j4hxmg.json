[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "[Music]",
    "start": "490",
    "end": "1879"
  },
  {
    "text": "today we're going to take a look at ng",
    "start": "1879",
    "end": "4380"
  },
  {
    "text": "XS a new state management library that",
    "start": "4380",
    "end": "6960"
  },
  {
    "text": "reimagines the way the Redux pattern",
    "start": "6960",
    "end": "8849"
  },
  {
    "text": "should be applied and angular it gives",
    "start": "8849",
    "end": "11099"
  },
  {
    "text": "us a global and mutable data store then",
    "start": "11099",
    "end": "13530"
  },
  {
    "text": "components can select data from the",
    "start": "13530",
    "end": "15450"
  },
  {
    "text": "store as an observable then dispatch",
    "start": "15450",
    "end": "17699"
  },
  {
    "text": "actions to mutate the store the end",
    "start": "17699",
    "end": "20310"
  },
  {
    "text": "result is a circular predictable flow of",
    "start": "20310",
    "end": "22529"
  },
  {
    "text": "data that is especially beneficial for",
    "start": "22529",
    "end": "24510"
  },
  {
    "text": "apps that have a complex data state in",
    "start": "24510",
    "end": "27480"
  },
  {
    "text": "this episode we'll go through the basics",
    "start": "27480",
    "end": "29099"
  },
  {
    "text": "of ng XS from the ground up if you're",
    "start": "29099",
    "end": "31410"
  },
  {
    "text": "new make sure to LIKE and subscribe and",
    "start": "31410",
    "end": "33059"
  },
  {
    "text": "grab the full source code from angular",
    "start": "33059",
    "end": "34890"
  },
  {
    "text": "firebase comm so first we need to",
    "start": "34890",
    "end": "37920"
  },
  {
    "start": "36000",
    "end": "58000"
  },
  {
    "text": "address the elephant in the room there's",
    "start": "37920",
    "end": "39660"
  },
  {
    "text": "already a state management library for",
    "start": "39660",
    "end": "41309"
  },
  {
    "text": "angular called ng R X which has become",
    "start": "41309",
    "end": "43800"
  },
  {
    "text": "very popular by taking the",
    "start": "43800",
    "end": "45329"
  },
  {
    "text": "implementation details of react Redux",
    "start": "45329",
    "end": "47579"
  },
  {
    "text": "and applying them to angular but the",
    "start": "47579",
    "end": "50100"
  },
  {
    "text": "problem is that angular has a type",
    "start": "50100",
    "end": "51660"
  },
  {
    "text": "system and makes heavy use of",
    "start": "51660",
    "end": "53129"
  },
  {
    "text": "object-oriented programming while react",
    "start": "53129",
    "end": "55559"
  },
  {
    "text": "has no type system and makes heavy use",
    "start": "55559",
    "end": "57329"
  },
  {
    "text": "of pure functions in order to strong",
    "start": "57329",
    "end": "59609"
  },
  {
    "text": "type everything and maintain a strict",
    "start": "59609",
    "end": "61230"
  },
  {
    "text": "separation of concerns and ng Rx we have",
    "start": "61230",
    "end": "63719"
  },
  {
    "text": "to write a ton of boilerplate code code",
    "start": "63719",
    "end": "66210"
  },
  {
    "text": "that is often very difficult to read",
    "start": "66210",
    "end": "67920"
  },
  {
    "text": "especially for someone without an rxjs",
    "start": "67920",
    "end": "70170"
  },
  {
    "text": "background while I'm a big fan of ng rx",
    "start": "70170",
    "end": "72990"
  },
  {
    "text": "and one of its top donors I think ng XS",
    "start": "72990",
    "end": "75420"
  },
  {
    "text": "addresses some of these concerns in a",
    "start": "75420",
    "end": "77280"
  },
  {
    "text": "very elegant way so what I've done for",
    "start": "77280",
    "end": "79740"
  },
  {
    "text": "this video is I built an app with ng XS",
    "start": "79740",
    "end": "82110"
  },
  {
    "text": "and then I built the same exact app with",
    "start": "82110",
    "end": "84000"
  },
  {
    "text": "ng Rx so we can compare them",
    "start": "84000",
    "end": "85830"
  },
  {
    "text": "side-by-side",
    "start": "85830",
    "end": "86729"
  },
  {
    "text": "the rest of this video will focus on the",
    "start": "86729",
    "end": "89070"
  },
  {
    "text": "basics of ng XS but occasionally I'll",
    "start": "89070",
    "end": "91350"
  },
  {
    "text": "flip over to this ng rx app just so you",
    "start": "91350",
    "end": "93659"
  },
  {
    "text": "can see that differences and how the",
    "start": "93659",
    "end": "95159"
  },
  {
    "text": "code is implemented and I'm not",
    "start": "95159",
    "end": "97020"
  },
  {
    "text": "recommending one over the other just",
    "start": "97020",
    "end": "98610"
  },
  {
    "text": "showing you a comparison between the two",
    "start": "98610",
    "end": "100549"
  },
  {
    "text": "the app itself is called ng XS salad bar",
    "start": "100549",
    "end": "104159"
  },
  {
    "text": "and it allows the user to create and",
    "start": "104159",
    "end": "106649"
  },
  {
    "text": "customize a salad order if you look at",
    "start": "106649",
    "end": "109229"
  },
  {
    "text": "the UI here you'll see everything",
    "start": "109229",
    "end": "110579"
  },
  {
    "text": "highlighted in green is saved in the app",
    "start": "110579",
    "end": "112619"
  },
  {
    "text": "store and everything with a solid",
    "start": "112619",
    "end": "115079"
  },
  {
    "text": "outline border is triggering an action",
    "start": "115079",
    "end": "117420"
  },
  {
    "text": "so you can see here we trigger actions",
    "start": "117420",
    "end": "119909"
  },
  {
    "text": "that add toppings to the salad and then",
    "start": "119909",
    "end": "122100"
  },
  {
    "text": "it computes the price in response to",
    "start": "122100",
    "end": "123990"
  },
  {
    "text": "those actions to get started we'll",
    "start": "123990",
    "end": "126420"
  },
  {
    "start": "125000",
    "end": "138000"
  },
  {
    "text": "generate a new angular app with the CLI",
    "start": "126420",
    "end": "128429"
  },
  {
    "text": "then we'll install ng XS store and also",
    "start": "128429",
    "end": "131849"
  },
  {
    "text": "a couple plugins for development so we",
    "start": "131849",
    "end": "133650"
  },
  {
    "text": "can",
    "start": "133650",
    "end": "133890"
  },
  {
    "text": "Redux dev tools or console.log state",
    "start": "133890",
    "end": "136260"
  },
  {
    "text": "changes directly in the browser the next",
    "start": "136260",
    "end": "139290"
  },
  {
    "start": "138000",
    "end": "190000"
  },
  {
    "text": "step is to go into the app module and",
    "start": "139290",
    "end": "141450"
  },
  {
    "text": "import ng XS you'll also notice that",
    "start": "141450",
    "end": "145020"
  },
  {
    "text": "I've created a shared folder which is",
    "start": "145020",
    "end": "146970"
  },
  {
    "text": "where we're going to keep the app state",
    "start": "146970",
    "end": "148560"
  },
  {
    "text": "in the router state we're going to build",
    "start": "148560",
    "end": "151170"
  },
  {
    "text": "these out later but you can think of the",
    "start": "151170",
    "end": "153090"
  },
  {
    "text": "state as a combination of an ng rx",
    "start": "153090",
    "end": "155670"
  },
  {
    "text": "reducer and effect in a single class",
    "start": "155670",
    "end": "158060"
  },
  {
    "text": "then we'll import the state classes here",
    "start": "158060",
    "end": "160860"
  },
  {
    "text": "in the app module and add them to the ng",
    "start": "160860",
    "end": "163830"
  },
  {
    "text": "XS for route and then we'll also add our",
    "start": "163830",
    "end": "166170"
  },
  {
    "text": "ng XS plugins here as well then just a",
    "start": "166170",
    "end": "168810"
  },
  {
    "text": "quick side note the plug-in system is",
    "start": "168810",
    "end": "170550"
  },
  {
    "text": "really awesome because it allows you to",
    "start": "170550",
    "end": "171989"
  },
  {
    "text": "tap into the state changes and the",
    "start": "171989",
    "end": "173790"
  },
  {
    "text": "action that triggered them to extend the",
    "start": "173790",
    "end": "175620"
  },
  {
    "text": "library with your own custom",
    "start": "175620",
    "end": "177060"
  },
  {
    "text": "functionality",
    "start": "177060",
    "end": "178010"
  },
  {
    "text": "now just to do a quick comparison our",
    "start": "178010",
    "end": "180480"
  },
  {
    "text": "app module and ng rx would look more",
    "start": "180480",
    "end": "182880"
  },
  {
    "text": "like this where we have a storm module",
    "start": "182880",
    "end": "184560"
  },
  {
    "text": "for route with a couple of reducers and",
    "start": "184560",
    "end": "186540"
  },
  {
    "text": "then an FX for route with the effects",
    "start": "186540",
    "end": "189480"
  },
  {
    "text": "classes now back to our ng access app",
    "start": "189480",
    "end": "192660"
  },
  {
    "start": "190000",
    "end": "357000"
  },
  {
    "text": "we're going to build our first action",
    "start": "192660",
    "end": "194820"
  },
  {
    "text": "inaction is just a class that has a type",
    "start": "194820",
    "end": "197610"
  },
  {
    "text": "property and an optional payload the",
    "start": "197610",
    "end": "200190"
  },
  {
    "text": "only difference from an ng RX action is",
    "start": "200190",
    "end": "202440"
  },
  {
    "text": "that the type property is static using a",
    "start": "202440",
    "end": "205350"
  },
  {
    "text": "static property here is a clever way to",
    "start": "205350",
    "end": "207060"
  },
  {
    "text": "reduce boilerplate because we don't",
    "start": "207060",
    "end": "208650"
  },
  {
    "text": "actually have to instantiate an object",
    "start": "208650",
    "end": "210299"
  },
  {
    "text": "we can just pass in the class name when",
    "start": "210299",
    "end": "212489"
  },
  {
    "text": "dispatching an action now I'm going to",
    "start": "212489",
    "end": "215070"
  },
  {
    "text": "jump into the app state and that's where",
    "start": "215070",
    "end": "216989"
  },
  {
    "text": "all the action happens the very first",
    "start": "216989",
    "end": "220170"
  },
  {
    "text": "thing we'll do is model our data as an",
    "start": "220170",
    "end": "221880"
  },
  {
    "text": "interface which should look very",
    "start": "221880",
    "end": "223350"
  },
  {
    "text": "familiar if you use ng Rx for the app",
    "start": "223350",
    "end": "226470"
  },
  {
    "text": "state will set a username order ID and a",
    "start": "226470",
    "end": "229440"
  },
  {
    "text": "status the next step is to drop in the",
    "start": "229440",
    "end": "232739"
  },
  {
    "text": "state decorator which replaces a reducer",
    "start": "232739",
    "end": "235440"
  },
  {
    "text": "and ng rx it's a class decorator and we",
    "start": "235440",
    "end": "239400"
  },
  {
    "text": "can strong type it to the interface that",
    "start": "239400",
    "end": "241410"
  },
  {
    "text": "we just defined then we'll give the",
    "start": "241410",
    "end": "243810"
  },
  {
    "text": "state a name so we can slice it from the",
    "start": "243810",
    "end": "245910"
  },
  {
    "text": "global store based on that name so this",
    "start": "245910",
    "end": "249150"
  },
  {
    "text": "will be our app slice and we can also",
    "start": "249150",
    "end": "252000"
  },
  {
    "text": "pass it some default values in this case",
    "start": "252000",
    "end": "255180"
  },
  {
    "text": "I just give it an empty string and a",
    "start": "255180",
    "end": "257130"
  },
  {
    "text": "random number as the order ID so as you",
    "start": "257130",
    "end": "260430"
  },
  {
    "text": "can see here we now have a slice of the",
    "start": "260430",
    "end": "262079"
  },
  {
    "text": "state that's clearly defined with",
    "start": "262080",
    "end": "263669"
  },
  {
    "text": "default values the next thing we'll want",
    "start": "263669",
    "end": "266490"
  },
  {
    "text": "to do is listen to",
    "start": "266490",
    "end": "267650"
  },
  {
    "text": "actions and then handle them as they're",
    "start": "267650",
    "end": "269449"
  },
  {
    "text": "dispatched for that we have this action",
    "start": "269449",
    "end": "271639"
  },
  {
    "text": "decorator that takes the action class as",
    "start": "271639",
    "end": "274310"
  },
  {
    "text": "its argument in our case set username",
    "start": "274310",
    "end": "276530"
  },
  {
    "text": "then you define a method to handle this",
    "start": "276530",
    "end": "279139"
  },
  {
    "text": "action the first argument in this method",
    "start": "279139",
    "end": "281690"
  },
  {
    "text": "is the state context which allows us to",
    "start": "281690",
    "end": "284120"
  },
  {
    "text": "get and mutate the state within this",
    "start": "284120",
    "end": "285979"
  },
  {
    "text": "method in this case here I'm going to",
    "start": "285979",
    "end": "287990"
  },
  {
    "text": "use patch state to update a single",
    "start": "287990",
    "end": "290210"
  },
  {
    "text": "property in the state without updating",
    "start": "290210",
    "end": "292039"
  },
  {
    "text": "other items then the second argument is",
    "start": "292039",
    "end": "294680"
  },
  {
    "text": "the action which may or may not have a",
    "start": "294680",
    "end": "296600"
  },
  {
    "text": "payload in this case it has the username",
    "start": "296600",
    "end": "298699"
  },
  {
    "text": "as its payload at this point we want to",
    "start": "298699",
    "end": "301280"
  },
  {
    "text": "update the current state with the new",
    "start": "301280",
    "end": "303470"
  },
  {
    "text": "username and we can do that by calling",
    "start": "303470",
    "end": "305330"
  },
  {
    "text": "patch state with The Associated data in",
    "start": "305330",
    "end": "308080"
  },
  {
    "text": "ng rx normally you would compose a new",
    "start": "308080",
    "end": "310610"
  },
  {
    "text": "object by using the spread syntax inside",
    "start": "310610",
    "end": "312949"
  },
  {
    "text": "your reducer function but here we're",
    "start": "312949",
    "end": "314990"
  },
  {
    "text": "calling patch state which does the same",
    "start": "314990",
    "end": "316880"
  },
  {
    "text": "thing under the hood but makes our code",
    "start": "316880",
    "end": "318500"
  },
  {
    "text": "a lot more readable and there's actually",
    "start": "318500",
    "end": "320900"
  },
  {
    "text": "a few other tricks that we can do within",
    "start": "320900",
    "end": "322610"
  },
  {
    "text": "the state context patch state will only",
    "start": "322610",
    "end": "325130"
  },
  {
    "text": "update the properties that are specified",
    "start": "325130",
    "end": "326840"
  },
  {
    "text": "but if we want to update everything",
    "start": "326840",
    "end": "328610"
  },
  {
    "text": "within the context of this slice of the",
    "start": "328610",
    "end": "330830"
  },
  {
    "text": "state we can call set state and that",
    "start": "330830",
    "end": "332960"
  },
  {
    "text": "will reset the state to the new",
    "start": "332960",
    "end": "334580"
  },
  {
    "text": "specified object we can also dispatch",
    "start": "334580",
    "end": "337280"
  },
  {
    "text": "other actions from inside this action",
    "start": "337280",
    "end": "339500"
  },
  {
    "text": "which is especially useful when you",
    "start": "339500",
    "end": "341090"
  },
  {
    "text": "start working with asynchronous data and",
    "start": "341090",
    "end": "343060"
  },
  {
    "text": "the other thing you can do is you can",
    "start": "343060",
    "end": "345470"
  },
  {
    "text": "get the current state as a plain object",
    "start": "345470",
    "end": "347720"
  },
  {
    "text": "let's say we want to look at the current",
    "start": "347720",
    "end": "349909"
  },
  {
    "text": "user before we actually update their",
    "start": "349909",
    "end": "351710"
  },
  {
    "text": "user name we just call get state and",
    "start": "351710",
    "end": "353780"
  },
  {
    "text": "that gives us this slice as a plain",
    "start": "353780",
    "end": "355909"
  },
  {
    "text": "object now let's quickly run through a",
    "start": "355909",
    "end": "358610"
  },
  {
    "text": "more concrete example let's say we have",
    "start": "358610",
    "end": "360740"
  },
  {
    "text": "an action that navigates with the",
    "start": "360740",
    "end": "362599"
  },
  {
    "text": "angular router first we'll set up an",
    "start": "362599",
    "end": "365120"
  },
  {
    "text": "action called navigate with a static",
    "start": "365120",
    "end": "367130"
  },
  {
    "text": "read-only type and the payload is the",
    "start": "367130",
    "end": "369740"
  },
  {
    "text": "actual path that we want to navigate to",
    "start": "369740",
    "end": "372430"
  },
  {
    "text": "then we'll set up our state to just be a",
    "start": "372430",
    "end": "374930"
  },
  {
    "text": "string where the value represents the",
    "start": "374930",
    "end": "377449"
  },
  {
    "text": "actual path that the user had navigated",
    "start": "377449",
    "end": "379460"
  },
  {
    "text": "to then we can inject the angular router",
    "start": "379460",
    "end": "382400"
  },
  {
    "text": "directly into our state which is a",
    "start": "382400",
    "end": "384440"
  },
  {
    "text": "really awesome feature of ng XS one",
    "start": "384440",
    "end": "386840"
  },
  {
    "text": "thing that you really miss in a reducer",
    "start": "386840",
    "end": "388250"
  },
  {
    "text": "function is the ability to use angular's",
    "start": "388250",
    "end": "390440"
  },
  {
    "text": "dependency injection and yet another",
    "start": "390440",
    "end": "393260"
  },
  {
    "text": "cool feature is that we're not just",
    "start": "393260",
    "end": "394880"
  },
  {
    "text": "limited to observables the angular",
    "start": "394880",
    "end": "396919"
  },
  {
    "text": "router returns a promise when we",
    "start": "396919",
    "end": "398539"
  },
  {
    "text": "navigate so we can actually just make",
    "start": "398539",
    "end": "400400"
  },
  {
    "text": "this an async phone",
    "start": "400400",
    "end": "401750"
  },
  {
    "text": "then await the router navigation and",
    "start": "401750",
    "end": "403879"
  },
  {
    "text": "update the state afterwards async/await",
    "start": "403879",
    "end": "406340"
  },
  {
    "text": "provides huge gains and code readability",
    "start": "406340",
    "end": "408289"
  },
  {
    "text": "and avoids the callback hell that you",
    "start": "408289",
    "end": "410180"
  },
  {
    "text": "would normally have in an NG rx effect",
    "start": "410180",
    "end": "412159"
  },
  {
    "text": "for dealing with a simple asynchronous",
    "start": "412159",
    "end": "414199"
  },
  {
    "text": "operation that's promise based that",
    "start": "414199",
    "end": "416659"
  },
  {
    "start": "416000",
    "end": "444000"
  },
  {
    "text": "being said you can still listen to a",
    "start": "416659",
    "end": "418490"
  },
  {
    "text": "stream of actions and handle them just",
    "start": "418490",
    "end": "420650"
  },
  {
    "text": "like you would in an NG rx effect what",
    "start": "420650",
    "end": "423590"
  },
  {
    "text": "you're looking at here with this route",
    "start": "423590",
    "end": "424699"
  },
  {
    "text": "handler is a stream of actions that is",
    "start": "424699",
    "end": "427129"
  },
  {
    "text": "filtered to our navigate action so you",
    "start": "427129",
    "end": "429560"
  },
  {
    "text": "do have the option to do things the ng",
    "start": "429560",
    "end": "431539"
  },
  {
    "text": "RX effects way if you prefer that and",
    "start": "431539",
    "end": "433639"
  },
  {
    "text": "there are certainly use cases for doing",
    "start": "433639",
    "end": "435229"
  },
  {
    "text": "so now that we have all this code in",
    "start": "435229",
    "end": "437090"
  },
  {
    "text": "place let's go into a component and look",
    "start": "437090",
    "end": "439430"
  },
  {
    "text": "at how we can select slices of the state",
    "start": "439430",
    "end": "441560"
  },
  {
    "text": "and dispatch actions let's say we want",
    "start": "441560",
    "end": "445340"
  },
  {
    "start": "444000",
    "end": "524000"
  },
  {
    "text": "to select the app state in our app",
    "start": "445340",
    "end": "447650"
  },
  {
    "text": "component the most familiar way to do it",
    "start": "447650",
    "end": "450770"
  },
  {
    "text": "is to declare a property and then inject",
    "start": "450770",
    "end": "453289"
  },
  {
    "text": "the store in the constructor and then",
    "start": "453289",
    "end": "455389"
  },
  {
    "text": "call store select and use a callback",
    "start": "455389",
    "end": "457669"
  },
  {
    "text": "function to select that slice of the",
    "start": "457669",
    "end": "459650"
  },
  {
    "text": "store so that's all good but in a second",
    "start": "459650",
    "end": "462590"
  },
  {
    "text": "here I'm going to show you a much better",
    "start": "462590",
    "end": "463759"
  },
  {
    "text": "way to do this with an NG access select",
    "start": "463759",
    "end": "466339"
  },
  {
    "text": "decorator but first I want to show you",
    "start": "466339",
    "end": "468919"
  },
  {
    "text": "how you can dispatch actions to do that",
    "start": "468919",
    "end": "471199"
  },
  {
    "text": "you can simply call stored dispatch and",
    "start": "471199",
    "end": "473270"
  },
  {
    "text": "then either pass in a single action or",
    "start": "473270",
    "end": "475370"
  },
  {
    "text": "an array of multiple actions in this",
    "start": "475370",
    "end": "477919"
  },
  {
    "text": "case we want to set the user name and",
    "start": "477919",
    "end": "479839"
  },
  {
    "text": "then navigate to our lazy loaded module",
    "start": "479839",
    "end": "482240"
  },
  {
    "text": "that's cool but let's see if we can make",
    "start": "482240",
    "end": "484789"
  },
  {
    "text": "some of this code magically disappear",
    "start": "484789",
    "end": "486469"
  },
  {
    "text": "let's delete everything from the",
    "start": "486469",
    "end": "487969"
  },
  {
    "text": "constructor and instead we'll use the",
    "start": "487969",
    "end": "490009"
  },
  {
    "text": "select decorator and then point to a",
    "start": "490009",
    "end": "492529"
  },
  {
    "text": "property of app followed by a dollar",
    "start": "492529",
    "end": "494719"
  },
  {
    "text": "sign by convention the library will",
    "start": "494719",
    "end": "497089"
  },
  {
    "text": "automatically look for a property named",
    "start": "497089",
    "end": "498830"
  },
  {
    "text": "app - the dollar sign on the root Store",
    "start": "498830",
    "end": "501319"
  },
  {
    "text": "and that's all you have to do to get",
    "start": "501319",
    "end": "503629"
  },
  {
    "text": "observable data from the store but if",
    "start": "503629",
    "end": "505759"
  },
  {
    "text": "that's a little too magical you can",
    "start": "505759",
    "end": "507409"
  },
  {
    "text": "still pass a function in to select a",
    "start": "507409",
    "end": "509180"
  },
  {
    "text": "slice as well the next thing I want to",
    "start": "509180",
    "end": "511639"
  },
  {
    "text": "show you is how to set up lazy loading",
    "start": "511639",
    "end": "513409"
  },
  {
    "text": "which is really easy to do with ng XS",
    "start": "513409",
    "end": "515680"
  },
  {
    "text": "after the user selects a name for their",
    "start": "515680",
    "end": "517820"
  },
  {
    "text": "order it's going to redirect them to a",
    "start": "517820",
    "end": "519768"
  },
  {
    "text": "lazy loaded route and update the state",
    "start": "519769",
    "end": "522078"
  },
  {
    "text": "with this new data if we look at the app",
    "start": "522079",
    "end": "525560"
  },
  {
    "start": "524000",
    "end": "546000"
  },
  {
    "text": "routing module you can see that we have",
    "start": "525560",
    "end": "527240"
  },
  {
    "text": "a lazy loaded salad module in order to",
    "start": "527240",
    "end": "531470"
  },
  {
    "text": "get this working we just need to tell ng",
    "start": "531470",
    "end": "533300"
  },
  {
    "text": "XS which state to use inside",
    "start": "533300",
    "end": "535250"
  },
  {
    "text": "is lazy module in this case we'll call",
    "start": "535250",
    "end": "538730"
  },
  {
    "text": "ng excess module for feature and then",
    "start": "538730",
    "end": "541670"
  },
  {
    "text": "pass it the solid state for this lazy",
    "start": "541670",
    "end": "543770"
  },
  {
    "text": "module the implementation details for",
    "start": "543770",
    "end": "547850"
  },
  {
    "start": "546000",
    "end": "578000"
  },
  {
    "text": "the lazy module are very similar to what",
    "start": "547850",
    "end": "550100"
  },
  {
    "text": "we set up in the app but I still want to",
    "start": "550100",
    "end": "552260"
  },
  {
    "text": "show you how selectors work when we need",
    "start": "552260",
    "end": "554030"
  },
  {
    "text": "to select complex slices of the state",
    "start": "554030",
    "end": "556540"
  },
  {
    "text": "this is common when you have to do",
    "start": "556540",
    "end": "558440"
  },
  {
    "text": "things like client-side filtering if you",
    "start": "558440",
    "end": "560510"
  },
  {
    "text": "imagine you have an array and you want",
    "start": "560510",
    "end": "562040"
  },
  {
    "text": "to sort it alphabetically or something",
    "start": "562040",
    "end": "563960"
  },
  {
    "text": "along those lines you can create a",
    "start": "563960",
    "end": "566930"
  },
  {
    "text": "selector by using this selector",
    "start": "566930",
    "end": "568700"
  },
  {
    "text": "decorator and then attach it to a static",
    "start": "568700",
    "end": "571400"
  },
  {
    "text": "method in this example we'll just do",
    "start": "571400",
    "end": "572900"
  },
  {
    "text": "something really simple like",
    "start": "572900",
    "end": "573890"
  },
  {
    "text": "transforming the dressing property to",
    "start": "573890",
    "end": "576560"
  },
  {
    "text": "locale uppercase now we can combine the",
    "start": "576560",
    "end": "579710"
  },
  {
    "start": "578000",
    "end": "616000"
  },
  {
    "text": "static method with our select decorator",
    "start": "579710",
    "end": "582170"
  },
  {
    "text": "in the actual component if you remember",
    "start": "582170",
    "end": "586190"
  },
  {
    "text": "the select decorator takes a function so",
    "start": "586190",
    "end": "588410"
  },
  {
    "text": "we can just pass it our class followed",
    "start": "588410",
    "end": "590210"
  },
  {
    "text": "by the function name and then that will",
    "start": "590210",
    "end": "591980"
  },
  {
    "text": "select that slice of the state in",
    "start": "591980",
    "end": "593720"
  },
  {
    "text": "whichever format we want it let's go",
    "start": "593720",
    "end": "596180"
  },
  {
    "text": "ahead and compare this code to ng our X",
    "start": "596180",
    "end": "598190"
  },
  {
    "text": "building the selector will look",
    "start": "598190",
    "end": "600170"
  },
  {
    "text": "something like this with ng XS on the",
    "start": "600170",
    "end": "602420"
  },
  {
    "text": "top and ng rx on the bottom we have the",
    "start": "602420",
    "end": "604910"
  },
  {
    "text": "functional approach on the bottom and",
    "start": "604910",
    "end": "606440"
  },
  {
    "text": "the object-oriented approach on the top",
    "start": "606440",
    "end": "608810"
  },
  {
    "text": "if you look at how we select state in",
    "start": "608810",
    "end": "611000"
  },
  {
    "text": "the component you can see we get by with",
    "start": "611000",
    "end": "612890"
  },
  {
    "text": "about 60% less code and ng XS the last",
    "start": "612890",
    "end": "617600"
  },
  {
    "start": "616000",
    "end": "669000"
  },
  {
    "text": "thing I want to show you is an",
    "start": "617600",
    "end": "618860"
  },
  {
    "text": "asynchronous action in ng XS jumping",
    "start": "618860",
    "end": "622490"
  },
  {
    "text": "back to the app component will create a",
    "start": "622490",
    "end": "624650"
  },
  {
    "text": "new action and pass at this confirm",
    "start": "624650",
    "end": "626810"
  },
  {
    "text": "order action class and then notice I'm",
    "start": "626810",
    "end": "629330"
  },
  {
    "text": "passing this cancel uncompleted true",
    "start": "629330",
    "end": "631850"
  },
  {
    "text": "option in the action decorator I'll show",
    "start": "631850",
    "end": "635000"
  },
  {
    "text": "you how this comes into play in just a",
    "start": "635000",
    "end": "636380"
  },
  {
    "text": "second inside this action itself we're",
    "start": "636380",
    "end": "639770"
  },
  {
    "text": "going to first patch the state with an",
    "start": "639770",
    "end": "641960"
  },
  {
    "text": "order status of pending then we'll",
    "start": "641960",
    "end": "644300"
  },
  {
    "text": "return an observable that represents the",
    "start": "644300",
    "end": "646460"
  },
  {
    "text": "async activity that we want to perform",
    "start": "646460",
    "end": "648100"
  },
  {
    "text": "that would most likely be an API call",
    "start": "648100",
    "end": "650780"
  },
  {
    "text": "over the network but in this case I'm",
    "start": "650780",
    "end": "653240"
  },
  {
    "text": "just returning a mock observable that",
    "start": "653240",
    "end": "655040"
  },
  {
    "text": "has a 50/50 chance of returning true or",
    "start": "655040",
    "end": "657440"
  },
  {
    "text": "false",
    "start": "657440",
    "end": "658120"
  },
  {
    "text": "inside the observable we'll pipe in the",
    "start": "658120",
    "end": "660620"
  },
  {
    "text": "tap operator if the observable resolves",
    "start": "660620",
    "end": "663020"
  },
  {
    "text": "are true then we'll go ahead and",
    "start": "663020",
    "end": "664040"
  },
  {
    "text": "dispatch the order success action",
    "start": "664040",
    "end": "666020"
  },
  {
    "text": "otherwise we'll dispatch or",
    "start": "666020",
    "end": "668180"
  },
  {
    "text": "failed now if we dispatch this action",
    "start": "668180",
    "end": "671149"
  },
  {
    "start": "669000",
    "end": "719000"
  },
  {
    "text": "it's going to subscribe to that",
    "start": "671149",
    "end": "672589"
  },
  {
    "text": "observable automatically",
    "start": "672589",
    "end": "674170"
  },
  {
    "text": "normally it would subscribe to every",
    "start": "674170",
    "end": "676339"
  },
  {
    "text": "single one and resolve to a value but",
    "start": "676339",
    "end": "678740"
  },
  {
    "text": "because we added the cancel uncompleted",
    "start": "678740",
    "end": "680750"
  },
  {
    "text": "true option in the action decorator it's",
    "start": "680750",
    "end": "683360"
  },
  {
    "text": "going to cancel all the previous",
    "start": "683360",
    "end": "684890"
  },
  {
    "text": "requests automatically let's say pretty",
    "start": "684890",
    "end": "686930"
  },
  {
    "text": "common requirement when you have",
    "start": "686930",
    "end": "688100"
  },
  {
    "text": "something like a type-ahead where you're",
    "start": "688100",
    "end": "689630"
  },
  {
    "text": "making multiple asynchronous API calls",
    "start": "689630",
    "end": "691880"
  },
  {
    "text": "and this is just one simple way that the",
    "start": "691880",
    "end": "694430"
  },
  {
    "text": "library tries to make things easier for",
    "start": "694430",
    "end": "696410"
  },
  {
    "text": "you I'm gonna go ahead and wrap things",
    "start": "696410",
    "end": "698630"
  },
  {
    "text": "up there if you have any questions or",
    "start": "698630",
    "end": "700279"
  },
  {
    "text": "want to see more energy excess content",
    "start": "700279",
    "end": "702290"
  },
  {
    "text": "please let me know in the comments",
    "start": "702290",
    "end": "703610"
  },
  {
    "text": "thanks for watching and I'll see you",
    "start": "703610",
    "end": "705830"
  },
  {
    "text": "soon",
    "start": "705830",
    "end": "708010"
  }
]