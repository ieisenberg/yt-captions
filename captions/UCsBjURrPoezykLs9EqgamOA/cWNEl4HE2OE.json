[
  {
    "text": "a graph is a nonlinear data structure",
    "start": "0",
    "end": "2310"
  },
  {
    "text": "that contains nodes and edges a node or",
    "start": "2310",
    "end": "4740"
  },
  {
    "text": "vertex is just a single unique value",
    "start": "4740",
    "end": "6930"
  },
  {
    "text": "while an edge represents a connection or",
    "start": "6930",
    "end": "8970"
  },
  {
    "text": "relationship between two of these nodes",
    "start": "8970",
    "end": "10559"
  },
  {
    "text": "think of something like Instagram every",
    "start": "10559",
    "end": "12599"
  },
  {
    "text": "user is a node every time you follow a",
    "start": "12599",
    "end": "14670"
  },
  {
    "text": "user you create a new edge connecting",
    "start": "14670",
    "end": "16710"
  },
  {
    "text": "two nodes together this is known as a",
    "start": "16710",
    "end": "18480"
  },
  {
    "text": "directed graph because the relationship",
    "start": "18480",
    "end": "20310"
  },
  {
    "text": "flows one way the follower follows the",
    "start": "20310",
    "end": "22289"
  },
  {
    "text": "following and not vice-versa",
    "start": "22289",
    "end": "24060"
  },
  {
    "text": "now consider facebook your edges in the",
    "start": "24060",
    "end": "26010"
  },
  {
    "text": "graph are friendships this relationship",
    "start": "26010",
    "end": "27900"
  },
  {
    "text": "goes both ways which is known as an",
    "start": "27900",
    "end": "29789"
  },
  {
    "text": "undirected graph graphs can also be",
    "start": "29789",
    "end": "31740"
  },
  {
    "text": "weighted which means the node has some",
    "start": "31740",
    "end": "33480"
  },
  {
    "text": "additional data about the relationship",
    "start": "33480",
    "end": "35190"
  },
  {
    "text": "like the distance between two airports a",
    "start": "35190",
    "end": "37260"
  },
  {
    "text": "node might also point to itself like an",
    "start": "37260",
    "end": "39570"
  },
  {
    "text": "airplane that takes off and comes back",
    "start": "39570",
    "end": "41190"
  },
  {
    "text": "to land at the same airport this is",
    "start": "41190",
    "end": "42960"
  },
  {
    "text": "known as a cycle graphs are used in many",
    "start": "42960",
    "end": "45059"
  },
  {
    "text": "real-life software products and you'll",
    "start": "45059",
    "end": "46710"
  },
  {
    "text": "often be asked to represent a graphic",
    "start": "46710",
    "end": "48329"
  },
  {
    "text": "code in a technical interview one way to",
    "start": "48329",
    "end": "50430"
  },
  {
    "text": "represent a graph is with a 2d array or",
    "start": "50430",
    "end": "52500"
  },
  {
    "text": "adjacency matrix create one row and one",
    "start": "52500",
    "end": "54719"
  },
  {
    "text": "column for every node when two nodes",
    "start": "54719",
    "end": "56940"
  },
  {
    "text": "have an edge or connection add a one at",
    "start": "56940",
    "end": "59250"
  },
  {
    "text": "the point they intersect this makes it",
    "start": "59250",
    "end": "60989"
  },
  {
    "text": "fast and easy to look up a specific age",
    "start": "60989",
    "end": "62910"
  },
  {
    "text": "or to add a new edge but as a 2d array",
    "start": "62910",
    "end": "65460"
  },
  {
    "text": "it takes quadratic space complexity and",
    "start": "65460",
    "end": "67680"
  },
  {
    "text": "quadratic time to insert a new node into",
    "start": "67680",
    "end": "69780"
  },
  {
    "text": "the graph an alternative approach is an",
    "start": "69780",
    "end": "71520"
  },
  {
    "text": "adjacency list in this representation we",
    "start": "71520",
    "end": "73890"
  },
  {
    "text": "start with a collection of nodes then",
    "start": "73890",
    "end": "75570"
  },
  {
    "text": "each item has its own array of its",
    "start": "75570",
    "end": "77430"
  },
  {
    "text": "neighbors this makes it faster to",
    "start": "77430",
    "end": "78900"
  },
  {
    "text": "iterate over a nodes edges and is more",
    "start": "78900",
    "end": "81030"
  },
  {
    "text": "efficient with memory especially when",
    "start": "81030",
    "end": "82560"
  },
  {
    "text": "you have many nodes and few edges in",
    "start": "82560",
    "end": "84540"
  },
  {
    "text": "your interview you'll likely need to",
    "start": "84540",
    "end": "86340"
  },
  {
    "text": "traverse your graph one option is a",
    "start": "86340",
    "end": "88229"
  },
  {
    "text": "depth-first search start with any random",
    "start": "88229",
    "end": "90150"
  },
  {
    "text": "node go to its first child then its",
    "start": "90150",
    "end": "92280"
  },
  {
    "text": "first child and do that for as long as",
    "start": "92280",
    "end": "93930"
  },
  {
    "text": "you can when there are no more children",
    "start": "93930",
    "end": "95549"
  },
  {
    "text": "backtrack to the last node and continue",
    "start": "95549",
    "end": "97710"
  },
  {
    "text": "the process this algorithm is usually",
    "start": "97710",
    "end": "99630"
  },
  {
    "text": "implemented with a recursive function",
    "start": "99630",
    "end": "101130"
  },
  {
    "text": "another option is a breadth-first search",
    "start": "101130",
    "end": "103500"
  },
  {
    "text": "from your starting node add all of the",
    "start": "103500",
    "end": "105360"
  },
  {
    "text": "direct children to a queue once they've",
    "start": "105360",
    "end": "107070"
  },
  {
    "text": "been visited move on to the",
    "start": "107070",
    "end": "108329"
  },
  {
    "text": "grandchildren and continue following",
    "start": "108329",
    "end": "109950"
  },
  {
    "text": "this pattern and layers this has been",
    "start": "109950",
    "end": "111750"
  },
  {
    "text": "graphs in 100 seconds but hang out for a",
    "start": "111750",
    "end": "114000"
  },
  {
    "text": "few minutes because now we're going to",
    "start": "114000",
    "end": "115200"
  },
  {
    "text": "implement these algorithms in JavaScript",
    "start": "115200",
    "end": "117119"
  },
  {
    "text": "if you're new here like and subscribe",
    "start": "117119",
    "end": "118740"
  },
  {
    "text": "hit the like button open your IDE and",
    "start": "118740",
    "end": "120840"
  },
  {
    "text": "get ready to go beyond 100 seconds as a",
    "start": "120840",
    "end": "125430"
  },
  {
    "text": "developer you'll come across all kinds",
    "start": "125430",
    "end": "126840"
  },
  {
    "text": "of different real-life implementations",
    "start": "126840",
    "end": "128759"
  },
  {
    "text": "of graphs I mentioned Facebook social",
    "start": "128759",
    "end": "130770"
  },
  {
    "text": "graph at the beginning of the video and",
    "start": "130770",
    "end": "132150"
  },
  {
    "text": "they're commonly used for recommend",
    "start": "132150",
    "end": "133590"
  },
  {
    "text": "engines like Yelp for example to connect",
    "start": "133590",
    "end": "135870"
  },
  {
    "text": "businesses to users to reviews or",
    "start": "135870",
    "end": "138120"
  },
  {
    "text": "Netflix to connect the movies that you",
    "start": "138120",
    "end": "139830"
  },
  {
    "text": "watch two movies that you might want to",
    "start": "139830",
    "end": "141510"
  },
  {
    "text": "watch in the future they're also used to",
    "start": "141510",
    "end": "143819"
  },
  {
    "text": "represent Geographic data for example on",
    "start": "143819",
    "end": "146069"
  },
  {
    "text": "Google Maps you can think of every",
    "start": "146069",
    "end": "147569"
  },
  {
    "text": "intersection as a node and then every",
    "start": "147569",
    "end": "149730"
  },
  {
    "text": "Road and its distance as the edge",
    "start": "149730",
    "end": "151319"
  },
  {
    "text": "connecting these two nodes over the next",
    "start": "151319",
    "end": "153629"
  },
  {
    "text": "few minutes we'll implement a basic",
    "start": "153629",
    "end": "155310"
  },
  {
    "text": "graph in JavaScript based on the flight",
    "start": "155310",
    "end": "157200"
  },
  {
    "text": "connections between airports in this",
    "start": "157200",
    "end": "159510"
  },
  {
    "text": "case every airport is a node and the",
    "start": "159510",
    "end": "161489"
  },
  {
    "text": "edge represents whether or not you can",
    "start": "161489",
    "end": "163049"
  },
  {
    "text": "fly from one Airport to another this",
    "start": "163049",
    "end": "165269"
  },
  {
    "text": "edge could contain additional",
    "start": "165269",
    "end": "166230"
  },
  {
    "text": "information like the kilometers between",
    "start": "166230",
    "end": "168120"
  },
  {
    "text": "the two airports in which case that",
    "start": "168120",
    "end": "169950"
  },
  {
    "text": "would give us a weighted graph the",
    "start": "169950",
    "end": "171720"
  },
  {
    "text": "routes between two airports could be",
    "start": "171720",
    "end": "173220"
  },
  {
    "text": "one-way or two-way when they go one way",
    "start": "173220",
    "end": "175290"
  },
  {
    "text": "we have a directed graph if they go both",
    "start": "175290",
    "end": "177209"
  },
  {
    "text": "ways",
    "start": "177209",
    "end": "177480"
  },
  {
    "text": "it's an undirected graph for this demo",
    "start": "177480",
    "end": "179879"
  },
  {
    "text": "we'll try to keep things simple we'll",
    "start": "179879",
    "end": "181470"
  },
  {
    "text": "make an undirected graph assuming that",
    "start": "181470",
    "end": "183209"
  },
  {
    "text": "when an airplane has a route it can fly",
    "start": "183209",
    "end": "184950"
  },
  {
    "text": "back and forth between the two airports",
    "start": "184950",
    "end": "186720"
  },
  {
    "text": "it'll be unweighted so the routes",
    "start": "186720",
    "end": "188579"
  },
  {
    "text": "between the two airports won't carry any",
    "start": "188579",
    "end": "190319"
  },
  {
    "text": "additional data and we'll assume cycles",
    "start": "190319",
    "end": "192329"
  },
  {
    "text": "are not possible the first thing we'll",
    "start": "192329",
    "end": "194459"
  },
  {
    "text": "need to do is represent our graphing",
    "start": "194459",
    "end": "196049"
  },
  {
    "text": "code most programming interviews will",
    "start": "196049",
    "end": "197819"
  },
  {
    "text": "have you write code in whatever language",
    "start": "197819",
    "end": "199109"
  },
  {
    "text": "you prefer we'll be using Java Script",
    "start": "199109",
    "end": "201269"
  },
  {
    "text": "here but the most important tip I can",
    "start": "201269",
    "end": "202799"
  },
  {
    "text": "give you is to simply explain your",
    "start": "202799",
    "end": "204600"
  },
  {
    "text": "thinking process as you're writing your",
    "start": "204600",
    "end": "206280"
  },
  {
    "text": "code most technical interviewers are",
    "start": "206280",
    "end": "208019"
  },
  {
    "text": "trying to get some insight into your",
    "start": "208019",
    "end": "209489"
  },
  {
    "text": "thinking process and care less if you",
    "start": "209489",
    "end": "211470"
  },
  {
    "text": "write perfectly formatted code let's go",
    "start": "211470",
    "end": "213480"
  },
  {
    "text": "ahead and walk through a few examples",
    "start": "213480",
    "end": "214739"
  },
  {
    "text": "you might get a question like this",
    "start": "214739",
    "end": "216090"
  },
  {
    "text": "here's a list of airports and it was two",
    "start": "216090",
    "end": "218220"
  },
  {
    "text": "routes connecting these airports now",
    "start": "218220",
    "end": "219930"
  },
  {
    "text": "represent this data as a graph so given",
    "start": "219930",
    "end": "222269"
  },
  {
    "text": "this data we can represent the graph in",
    "start": "222269",
    "end": "224069"
  },
  {
    "text": "two ways a matrix or an adjacency list a",
    "start": "224069",
    "end": "226829"
  },
  {
    "text": "matrix takes up more space but is",
    "start": "226829",
    "end": "229019"
  },
  {
    "text": "generally easier to visualize and",
    "start": "229019",
    "end": "230669"
  },
  {
    "text": "represent because it's just a",
    "start": "230669",
    "end": "232109"
  },
  {
    "text": "two-dimensional array filled with ones",
    "start": "232109",
    "end": "233730"
  },
  {
    "text": "and zeros now looking at this data I can",
    "start": "233730",
    "end": "236010"
  },
  {
    "text": "see there are not very many routes",
    "start": "236010",
    "end": "237450"
  },
  {
    "text": "relative to the number of possible",
    "start": "237450",
    "end": "239280"
  },
  {
    "text": "combinations between these airports that",
    "start": "239280",
    "end": "241739"
  },
  {
    "text": "means our matrix would be very sparse or",
    "start": "241739",
    "end": "243450"
  },
  {
    "text": "in other words filled with a bunch of",
    "start": "243450",
    "end": "244980"
  },
  {
    "text": "zeros and take up a lot of unnecessary",
    "start": "244980",
    "end": "246780"
  },
  {
    "text": "space and it would be less efficient to",
    "start": "246780",
    "end": "249060"
  },
  {
    "text": "iterate over and search through",
    "start": "249060",
    "end": "250650"
  },
  {
    "text": "therefore I choose to represent my graph",
    "start": "250650",
    "end": "252480"
  },
  {
    "text": "as an adjacency list we can implement an",
    "start": "252480",
    "end": "255150"
  },
  {
    "text": "adjacency list as a set of key value",
    "start": "255150",
    "end": "256979"
  },
  {
    "text": "pairs where the key is the name of the",
    "start": "256979",
    "end": "259109"
  },
  {
    "text": "airport or the node and the value is an",
    "start": "259109",
    "end": "261479"
  },
  {
    "text": "array of edges or the other airports",
    "start": "261479",
    "end": "263370"
  },
  {
    "text": "that it's connected to we could",
    "start": "263370",
    "end": "264900"
  },
  {
    "text": "implement this with a regular JavaScript",
    "start": "264900",
    "end": "266640"
  },
  {
    "text": "object",
    "start": "266640",
    "end": "267160"
  },
  {
    "text": "but a better option might be a map when",
    "start": "267160",
    "end": "269350"
  },
  {
    "text": "you're doing algorithm problems in",
    "start": "269350",
    "end": "270580"
  },
  {
    "text": "JavaScript a map tends to be a better",
    "start": "270580",
    "end": "272500"
  },
  {
    "text": "option than a regular object it has some",
    "start": "272500",
    "end": "274600"
  },
  {
    "text": "additional API methods that can be",
    "start": "274600",
    "end": "276070"
  },
  {
    "text": "useful for problems like this and it",
    "start": "276070",
    "end": "278080"
  },
  {
    "text": "just behaves more like a regular",
    "start": "278080",
    "end": "279400"
  },
  {
    "text": "dictionary or hash map that you'll find",
    "start": "279400",
    "end": "281170"
  },
  {
    "text": "in other languages so the map is our",
    "start": "281170",
    "end": "283150"
  },
  {
    "text": "graph and at this point it's empty the",
    "start": "283150",
    "end": "285100"
  },
  {
    "text": "first thing we'll do is define a",
    "start": "285100",
    "end": "286300"
  },
  {
    "text": "function that can add a node to the map",
    "start": "286300",
    "end": "288490"
  },
  {
    "text": "this function takes the airport code as",
    "start": "288490",
    "end": "290500"
  },
  {
    "text": "its argument and then calls adjacency",
    "start": "290500",
    "end": "292420"
  },
  {
    "text": "list set on the airport and starts it",
    "start": "292420",
    "end": "294940"
  },
  {
    "text": "off with an empty array and that's all",
    "start": "294940",
    "end": "296620"
  },
  {
    "text": "it takes to represent a node on the",
    "start": "296620",
    "end": "297970"
  },
  {
    "text": "graph to add an edge we need to update",
    "start": "297970",
    "end": "300130"
  },
  {
    "text": "the entries for both the origin Airport",
    "start": "300130",
    "end": "302110"
  },
  {
    "text": "and the destination first we'll grab the",
    "start": "302110",
    "end": "303970"
  },
  {
    "text": "entry for the origin Airport and then",
    "start": "303970",
    "end": "305800"
  },
  {
    "text": "push the destination onto its list and",
    "start": "305800",
    "end": "307840"
  },
  {
    "text": "then we'll do the inverse of that by",
    "start": "307840",
    "end": "309610"
  },
  {
    "text": "getting the destination and then pushing",
    "start": "309610",
    "end": "311410"
  },
  {
    "text": "the origin onto its list and that's our",
    "start": "311410",
    "end": "313390"
  },
  {
    "text": "entire API for building a graph as an",
    "start": "313390",
    "end": "315520"
  },
  {
    "text": "adjacency list the next step is to use",
    "start": "315520",
    "end": "317710"
  },
  {
    "text": "this API with our source data we can",
    "start": "317710",
    "end": "320320"
  },
  {
    "text": "loop over the airport's with for each",
    "start": "320320",
    "end": "321760"
  },
  {
    "text": "and for each one call the add node",
    "start": "321760",
    "end": "323830"
  },
  {
    "text": "method to add a node to the graph once",
    "start": "323830",
    "end": "326320"
  },
  {
    "text": "we have our nodes we can then loop over",
    "start": "326320",
    "end": "327880"
  },
  {
    "text": "the routes and add an edge for each",
    "start": "327880",
    "end": "329890"
  },
  {
    "text": "route in that array that function takes",
    "start": "329890",
    "end": "332110"
  },
  {
    "text": "two arguments so I'm going to use the",
    "start": "332110",
    "end": "333880"
  },
  {
    "text": "rest syntax here 2d structure them now",
    "start": "333880",
    "end": "336250"
  },
  {
    "text": "you can go ahead and console.log this",
    "start": "336250",
    "end": "337420"
  },
  {
    "text": "graph by running it and ojs and you",
    "start": "337420",
    "end": "339460"
  },
  {
    "text": "should get an output that looks similar",
    "start": "339460",
    "end": "340750"
  },
  {
    "text": "to this congratulations you just got",
    "start": "340750",
    "end": "342910"
  },
  {
    "text": "through the first part of the interview",
    "start": "342910",
    "end": "344050"
  },
  {
    "text": "but that was the easy part",
    "start": "344050",
    "end": "345580"
  },
  {
    "text": "now the interviewer wants you to",
    "start": "345580",
    "end": "347050"
  },
  {
    "text": "implement an algorithm to figure out if",
    "start": "347050",
    "end": "349030"
  },
  {
    "text": "there's a route between Phoenix and",
    "start": "349030",
    "end": "350650"
  },
  {
    "text": "Bangkok and as you know from earlier in",
    "start": "350650",
    "end": "353050"
  },
  {
    "text": "the video there are two main ways we can",
    "start": "353050",
    "end": "354640"
  },
  {
    "text": "approach this depth-first search or",
    "start": "354640",
    "end": "356410"
  },
  {
    "text": "breadth-first search i think the easier",
    "start": "356410",
    "end": "358600"
  },
  {
    "text": "one to understand is BFS you know in",
    "start": "358600",
    "end": "361240"
  },
  {
    "text": "order to search a graph you have to",
    "start": "361240",
    "end": "362590"
  },
  {
    "text": "start somewhere",
    "start": "362590",
    "end": "363190"
  },
  {
    "text": "in this case we'll start with the",
    "start": "363190",
    "end": "364510"
  },
  {
    "text": "phoenix node so we need a function that",
    "start": "364510",
    "end": "366700"
  },
  {
    "text": "takes a starting node as its argument",
    "start": "366700",
    "end": "368290"
  },
  {
    "text": "write that out on the whiteboard or as",
    "start": "368290",
    "end": "370450"
  },
  {
    "text": "pseudocode in whatever editing toy",
    "start": "370450",
    "end": "372160"
  },
  {
    "text": "you're using for the interview from the",
    "start": "372160",
    "end": "373990"
  },
  {
    "text": "starting node you want to visit all the",
    "start": "373990",
    "end": "375580"
  },
  {
    "text": "children and see if any of them are",
    "start": "375580",
    "end": "377140"
  },
  {
    "text": "bankok if not you'll want to visit their",
    "start": "377140",
    "end": "379540"
  },
  {
    "text": "children and do the same thing and then",
    "start": "379540",
    "end": "381370"
  },
  {
    "text": "you'll continue doing this in layers",
    "start": "381370",
    "end": "382720"
  },
  {
    "text": "until you find the airport you're",
    "start": "382720",
    "end": "384250"
  },
  {
    "text": "looking for we can represent this",
    "start": "384250",
    "end": "385810"
  },
  {
    "text": "process as a queue which in JavaScript",
    "start": "385810",
    "end": "387970"
  },
  {
    "text": "is just an array where the first item in",
    "start": "387970",
    "end": "389980"
  },
  {
    "text": "is the first item out and of course the",
    "start": "389980",
    "end": "392230"
  },
  {
    "text": "first item in your queue should be the",
    "start": "392230",
    "end": "393700"
  },
  {
    "text": "starting node now while the queue has",
    "start": "393700",
    "end": "395650"
  },
  {
    "text": "items in it or the length is greater",
    "start": "395650",
    "end": "397540"
  },
  {
    "text": "than 0 we'll grab the first item in the",
    "start": "397540",
    "end": "399669"
  },
  {
    "text": "array using the",
    "start": "399669",
    "end": "400750"
  },
  {
    "text": "Raye shift method this method will",
    "start": "400750",
    "end": "402700"
  },
  {
    "text": "mutate the original array by removing",
    "start": "402700",
    "end": "404500"
  },
  {
    "text": "the first item in it and then return",
    "start": "404500",
    "end": "406000"
  },
  {
    "text": "that item to us here that we set as the",
    "start": "406000",
    "end": "407950"
  },
  {
    "text": "airport variable our next step is to",
    "start": "407950",
    "end": "410230"
  },
  {
    "text": "grab all the edges for this node in the",
    "start": "410230",
    "end": "412420"
  },
  {
    "text": "graph we can do that by calling",
    "start": "412420",
    "end": "413890"
  },
  {
    "text": "adjacency lists to get with that airport",
    "start": "413890",
    "end": "416200"
  },
  {
    "text": "name as the key that'll give us all the",
    "start": "416200",
    "end": "418120"
  },
  {
    "text": "destinations for the airport where it's",
    "start": "418120",
    "end": "419950"
  },
  {
    "text": "children so we can loop over them and",
    "start": "419950",
    "end": "421930"
  },
  {
    "text": "add them to the queue as well we can",
    "start": "421930",
    "end": "423940"
  },
  {
    "text": "also go ahead and log out if any of",
    "start": "423940",
    "end": "425470"
  },
  {
    "text": "these airports are Bangkok the airport",
    "start": "425470",
    "end": "427300"
  },
  {
    "text": "we're looking for now one major problem",
    "start": "427300",
    "end": "429520"
  },
  {
    "text": "with this code at the moment is that",
    "start": "429520",
    "end": "430690"
  },
  {
    "text": "airports have many interconnected routes",
    "start": "430690",
    "end": "432910"
  },
  {
    "text": "and that means our algorithm will be",
    "start": "432910",
    "end": "434650"
  },
  {
    "text": "visiting the same nodes over and over",
    "start": "434650",
    "end": "436390"
  },
  {
    "text": "again and in our case this creates an",
    "start": "436390",
    "end": "438250"
  },
  {
    "text": "infinite loop because the queue is never",
    "start": "438250",
    "end": "439900"
  },
  {
    "text": "emptied we can avoid that by keeping",
    "start": "439900",
    "end": "441550"
  },
  {
    "text": "track of the airports that we visited in",
    "start": "441550",
    "end": "443440"
  },
  {
    "text": "the past an easy way to do that in",
    "start": "443440",
    "end": "445270"
  },
  {
    "text": "JavaScript is with a set which is",
    "start": "445270",
    "end": "447130"
  },
  {
    "text": "basically an array but all the values in",
    "start": "447130",
    "end": "448990"
  },
  {
    "text": "it are unique we set it up as an empty",
    "start": "448990",
    "end": "451480"
  },
  {
    "text": "set when the function is first called",
    "start": "451480",
    "end": "452890"
  },
  {
    "text": "then we can use it to set up some",
    "start": "452890",
    "end": "454720"
  },
  {
    "text": "conditional logic in our loop we will",
    "start": "454720",
    "end": "456730"
  },
  {
    "text": "only in queue an item if it does not",
    "start": "456730",
    "end": "458470"
  },
  {
    "text": "have this destination a set has a has",
    "start": "458470",
    "end": "460960"
  },
  {
    "text": "method where you can pass a value to see",
    "start": "460960",
    "end": "463060"
  },
  {
    "text": "if it exists currently in the set and",
    "start": "463060",
    "end": "464710"
  },
  {
    "text": "then we'll mark the destination as",
    "start": "464710",
    "end": "466510"
  },
  {
    "text": "visited by adding it to the set then",
    "start": "466510",
    "end": "468550"
  },
  {
    "text": "we'll move the line of code that adds",
    "start": "468550",
    "end": "469750"
  },
  {
    "text": "this item to the queue inside of our",
    "start": "469750",
    "end": "471520"
  },
  {
    "text": "condition here so an item only gets in",
    "start": "471520",
    "end": "473500"
  },
  {
    "text": "queued if it has not been visited",
    "start": "473500",
    "end": "475120"
  },
  {
    "text": "already now let's go ahead and call our",
    "start": "475120",
    "end": "476860"
  },
  {
    "text": "function using Phoenix as the starting",
    "start": "476860",
    "end": "478720"
  },
  {
    "text": "node what you'll notice is that it goes",
    "start": "478720",
    "end": "480610"
  },
  {
    "text": "through nine airports before it finally",
    "start": "480610",
    "end": "482290"
  },
  {
    "text": "finds Bangkok it starts with all the",
    "start": "482290",
    "end": "484330"
  },
  {
    "text": "connections to Phoenix then all the",
    "start": "484330",
    "end": "485919"
  },
  {
    "text": "connections to JFK then from Mexico City",
    "start": "485919",
    "end": "488320"
  },
  {
    "text": "it finds a route to Bangkok and then it",
    "start": "488320",
    "end": "490390"
  },
  {
    "text": "also finds a second route through Lima",
    "start": "490390",
    "end": "492100"
  },
  {
    "text": "Peru so breadth-first search would be",
    "start": "492100",
    "end": "493990"
  },
  {
    "text": "really good for finding all the possible",
    "start": "493990",
    "end": "495729"
  },
  {
    "text": "routes to determine which one is the",
    "start": "495729",
    "end": "497260"
  },
  {
    "text": "most efficient at this point your",
    "start": "497260",
    "end": "498940"
  },
  {
    "text": "interviewer is super impressed but then",
    "start": "498940",
    "end": "501160"
  },
  {
    "text": "he or she says our only concern is if a",
    "start": "501160",
    "end": "503500"
  },
  {
    "text": "route from Phoenix to Bangkok exists we",
    "start": "503500",
    "end": "506020"
  },
  {
    "text": "don't care if there are multiple routes",
    "start": "506020",
    "end": "507130"
  },
  {
    "text": "we don't care if it's the best route we",
    "start": "507130",
    "end": "508900"
  },
  {
    "text": "just want to find a route as quickly as",
    "start": "508900",
    "end": "510700"
  },
  {
    "text": "possible",
    "start": "510700",
    "end": "511180"
  },
  {
    "text": "how can you traverse this graph more",
    "start": "511180",
    "end": "512710"
  },
  {
    "text": "efficiently to meet that need an",
    "start": "512710",
    "end": "514120"
  },
  {
    "text": "approach that would be more efficient",
    "start": "514120",
    "end": "515620"
  },
  {
    "text": "for this particular requirement is a",
    "start": "515620",
    "end": "517180"
  },
  {
    "text": "depth-first search instead of going",
    "start": "517180",
    "end": "519219"
  },
  {
    "text": "through all the children or destinations",
    "start": "519219",
    "end": "520930"
  },
  {
    "text": "for each Airport will go to its first",
    "start": "520930",
    "end": "522880"
  },
  {
    "text": "child and then to its first child and",
    "start": "522880",
    "end": "524560"
  },
  {
    "text": "its first child and so on until we hit",
    "start": "524560",
    "end": "526750"
  },
  {
    "text": "Bangkok and if we don't find it will",
    "start": "526750",
    "end": "528580"
  },
  {
    "text": "backtrack to the top of the graph and",
    "start": "528580",
    "end": "530020"
  },
  {
    "text": "follow the same pattern in the last",
    "start": "530020",
    "end": "531760"
  },
  {
    "text": "example we used a queue but in this",
    "start": "531760",
    "end": "533530"
  },
  {
    "text": "example we're",
    "start": "533530",
    "end": "534380"
  },
  {
    "text": "- use a recursive function or in other",
    "start": "534380",
    "end": "536420"
  },
  {
    "text": "words a function that calls itself until",
    "start": "536420",
    "end": "538460"
  },
  {
    "text": "it reaches some kind of stopping point",
    "start": "538460",
    "end": "539960"
  },
  {
    "text": "this function will take a starting node",
    "start": "539960",
    "end": "541670"
  },
  {
    "text": "as its first argument and then a set as",
    "start": "541670",
    "end": "543830"
  },
  {
    "text": "a second argument that keeps track of",
    "start": "543830",
    "end": "545600"
  },
  {
    "text": "the different cities that we visited",
    "start": "545600",
    "end": "547310"
  },
  {
    "text": "because again we don't want to visit the",
    "start": "547310",
    "end": "549380"
  },
  {
    "text": "same node more than once from there",
    "start": "549380",
    "end": "551240"
  },
  {
    "text": "we'll grab the edges or destinations",
    "start": "551240",
    "end": "553220"
  },
  {
    "text": "from our adjacency list we'll loop over",
    "start": "553220",
    "end": "555380"
  },
  {
    "text": "them just like we did before and when we",
    "start": "555380",
    "end": "556970"
  },
  {
    "text": "find what we're looking for we'll just",
    "start": "556970",
    "end": "558350"
  },
  {
    "text": "return from the function now here's the",
    "start": "558350",
    "end": "559910"
  },
  {
    "text": "interesting part if a node has not been",
    "start": "559910",
    "end": "561710"
  },
  {
    "text": "visited then we'll go ahead and call the",
    "start": "561710",
    "end": "563390"
  },
  {
    "text": "same function or in other words call it",
    "start": "563390",
    "end": "565250"
  },
  {
    "text": "recursively with the current destination",
    "start": "565250",
    "end": "566720"
  },
  {
    "text": "and the loop as well as our visited set",
    "start": "566720",
    "end": "568970"
  },
  {
    "text": "that means this function call will be",
    "start": "568970",
    "end": "570680"
  },
  {
    "text": "pushed to the top of the call stack",
    "start": "570680",
    "end": "571820"
  },
  {
    "text": "making the algorithm go deeper and",
    "start": "571820",
    "end": "573650"
  },
  {
    "text": "deeper into the tree until it reaches a",
    "start": "573650",
    "end": "575360"
  },
  {
    "text": "stopping point and that means this",
    "start": "575360",
    "end": "577070"
  },
  {
    "text": "function will continue calling itself",
    "start": "577070",
    "end": "578600"
  },
  {
    "text": "recursively until all the airports have",
    "start": "578600",
    "end": "580430"
  },
  {
    "text": "been visited or until it finds Bangkok",
    "start": "580430",
    "end": "582260"
  },
  {
    "text": "in this example it only takes three",
    "start": "582260",
    "end": "584390"
  },
  {
    "text": "steps or three function calls to find",
    "start": "584390",
    "end": "586220"
  },
  {
    "text": "the route as opposed to eight in our",
    "start": "586220",
    "end": "588200"
  },
  {
    "text": "previous algorithm but the interviewer",
    "start": "588200",
    "end": "589940"
  },
  {
    "text": "has one last question what is the time",
    "start": "589940",
    "end": "591890"
  },
  {
    "text": "complexity of the algorithm that you",
    "start": "591890",
    "end": "593570"
  },
  {
    "text": "just implemented as expressed in Big O",
    "start": "593570",
    "end": "595940"
  },
  {
    "text": "notation for both breadth-first and",
    "start": "595940",
    "end": "598250"
  },
  {
    "text": "depth-first search Big O is expressed as",
    "start": "598250",
    "end": "600650"
  },
  {
    "text": "V Plus E which is the total number of",
    "start": "600650",
    "end": "602750"
  },
  {
    "text": "nodes or vertices plus the number of",
    "start": "602750",
    "end": "604910"
  },
  {
    "text": "edges or in other words the time",
    "start": "604910",
    "end": "606860"
  },
  {
    "text": "performance of the algorithm will scale",
    "start": "606860",
    "end": "608660"
  },
  {
    "text": "linear based on the number of nodes and",
    "start": "608660",
    "end": "610550"
  },
  {
    "text": "edges that are added to the graph I'm",
    "start": "610550",
    "end": "612590"
  },
  {
    "text": "gonna go ahead and wrap things up there",
    "start": "612590",
    "end": "613910"
  },
  {
    "text": "but there are many other algorithms you",
    "start": "613910",
    "end": "615590"
  },
  {
    "text": "can use to traverse a graph so if you",
    "start": "615590",
    "end": "617360"
  },
  {
    "text": "want to see more videos like this let me",
    "start": "617360",
    "end": "618920"
  },
  {
    "text": "know in the comments thanks for watching",
    "start": "618920",
    "end": "620720"
  },
  {
    "text": "and I will see you in the next",
    "start": "620720",
    "end": "623450"
  },
  {
    "text": "[Music]",
    "start": "623450",
    "end": "631660"
  }
]