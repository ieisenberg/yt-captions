[
  {
    "text": "the time scale DB an open- Source Time",
    "start": "359",
    "end": "2760"
  },
  {
    "text": "series database built on top of",
    "start": "2760",
    "end": "4560"
  },
  {
    "text": "postgress that can query time-based",
    "start": "4560",
    "end": "6600"
  },
  {
    "text": "workloads exponentially faster imagine",
    "start": "6600",
    "end": "9040"
  },
  {
    "text": "building an application that needs to",
    "start": "9040",
    "end": "10719"
  },
  {
    "text": "collect terabytes of timestamp data",
    "start": "10719",
    "end": "12360"
  },
  {
    "text": "points every day like a website",
    "start": "12360",
    "end": "14160"
  },
  {
    "text": "analytics platform or an iot smart",
    "start": "14160",
    "end": "16400"
  },
  {
    "text": "toilet a general purpose SQL database",
    "start": "16400",
    "end": "18720"
  },
  {
    "text": "like MySQL or postgress is not ideal it",
    "start": "18720",
    "end": "21480"
  },
  {
    "text": "doesn't ingest data fast enough and",
    "start": "21480",
    "end": "23279"
  },
  {
    "text": "isn't optimized to scale queries of Time",
    "start": "23279",
    "end": "25400"
  },
  {
    "text": "series data a time scale DB fixes this",
    "start": "25400",
    "end": "28039"
  },
  {
    "text": "by storing data in hyper tabls which are",
    "start": "28039",
    "end": "30519"
  },
  {
    "text": "abstract tables composed of many smaller",
    "start": "30519",
    "end": "32758"
  },
  {
    "text": "postgress tables called chunks this can",
    "start": "32759",
    "end": "34960"
  },
  {
    "text": "increase inest speeds up to 40% and make",
    "start": "34960",
    "end": "37520"
  },
  {
    "text": "queries a staggering 350 times faster in",
    "start": "37520",
    "end": "40640"
  },
  {
    "text": "addition time buckets can automatically",
    "start": "40640",
    "end": "42680"
  },
  {
    "text": "aggregate data into set intervals while",
    "start": "42680",
    "end": "44920"
  },
  {
    "text": "hyper functions allow you to analyze",
    "start": "44920",
    "end": "46920"
  },
  {
    "text": "this data like a mad scientist they can",
    "start": "46920",
    "end": "49039"
  },
  {
    "text": "compute time weighted averages for",
    "start": "49039",
    "end": "50680"
  },
  {
    "text": "financial data and build Candlestick",
    "start": "50680",
    "end": "52359"
  },
  {
    "text": "charts or aggregate the daily water",
    "start": "52359",
    "end": "54160"
  },
  {
    "text": "consumption of your iot smart toilet",
    "start": "54160",
    "end": "56239"
  },
  {
    "text": "best of all it does this while",
    "start": "56239",
    "end": "57680"
  },
  {
    "text": "maintaining full SQL support before",
    "start": "57680",
    "end": "59519"
  },
  {
    "text": "traditional relational workloads to get",
    "start": "59519",
    "end": "61399"
  },
  {
    "text": "started you can run it locally and",
    "start": "61399",
    "end": "63079"
  },
  {
    "text": "self-host it with Docker but the easiest",
    "start": "63079",
    "end": "65400"
  },
  {
    "text": "option is to try it for free right now",
    "start": "65400",
    "end": "67560"
  },
  {
    "text": "with time scale Cloud but first create a",
    "start": "67560",
    "end": "69640"
  },
  {
    "text": "service for free to launch your database",
    "start": "69640",
    "end": "71640"
  },
  {
    "text": "and get connection credentials then",
    "start": "71640",
    "end": "73360"
  },
  {
    "text": "connect to it with your favorite client",
    "start": "73360",
    "end": "74799"
  },
  {
    "text": "library or as I'm doing here make a",
    "start": "74799",
    "end": "76840"
  },
  {
    "text": "connection in your IDE to write raw SQL",
    "start": "76840",
    "end": "79159"
  },
  {
    "text": "code now I run a popular app where",
    "start": "79159",
    "end": "81079"
  },
  {
    "text": "people can get matched up to horses and",
    "start": "81079",
    "end": "82880"
  },
  {
    "text": "I want to query the total number of",
    "start": "82880",
    "end": "84240"
  },
  {
    "text": "trips taken in a month I can make that",
    "start": "84240",
    "end": "86040"
  },
  {
    "text": "query in plain postgress by selecting",
    "start": "86040",
    "end": "88040"
  },
  {
    "text": "the count from the trips table then",
    "start": "88040",
    "end": "89600"
  },
  {
    "text": "filter out records for a date range with",
    "start": "89600",
    "end": "91439"
  },
  {
    "text": "a wear Clause the problem though is that",
    "start": "91439",
    "end": "93360"
  },
  {
    "text": "it's extremely slow because I have over",
    "start": "93360",
    "end": "95280"
  },
  {
    "text": "7 million records just on this one query",
    "start": "95280",
    "end": "97479"
  },
  {
    "text": "we can start to see the power of time",
    "start": "97479",
    "end": "98799"
  },
  {
    "text": "scale when we alter the code slightly to",
    "start": "98799",
    "end": "100720"
  },
  {
    "text": "use a hypertable which cuts the",
    "start": "100720",
    "end": "102240"
  },
  {
    "text": "execution time in half that's not all",
    "start": "102240",
    "end": "104200"
  },
  {
    "text": "though we can also compress this",
    "start": "104200",
    "end": "105560"
  },
  {
    "text": "hypertable to make the query even faster",
    "start": "105560",
    "end": "107840"
  },
  {
    "text": "and reduce dis usage by up to 90% but",
    "start": "107840",
    "end": "110600"
  },
  {
    "text": "now let's imagine we want to show a",
    "start": "110600",
    "end": "112200"
  },
  {
    "text": "chart in the analytics dashboard that",
    "start": "112200",
    "end": "114079"
  },
  {
    "text": "shows the highest amount paid for a ride",
    "start": "114079",
    "end": "115920"
  },
  {
    "text": "each day A Time bucket query takes that",
    "start": "115920",
    "end": "118039"
  },
  {
    "text": "original date range and aggregates data",
    "start": "118039",
    "end": "120240"
  },
  {
    "text": "over a specific interval like in this",
    "start": "120240",
    "end": "122039"
  },
  {
    "text": "case the max value for each day but",
    "start": "122039",
    "end": "124000"
  },
  {
    "text": "there's more to time scale than just",
    "start": "124000",
    "end": "125479"
  },
  {
    "text": "time when combined with open source",
    "start": "125479",
    "end": "127159"
  },
  {
    "text": "tools like PG Ai and PG Vector scale the",
    "start": "127159",
    "end": "129920"
  },
  {
    "text": "postgress becomes a high performance",
    "start": "129920",
    "end": "131599"
  },
  {
    "text": "Vector database that can query distances",
    "start": "131599",
    "end": "133680"
  },
  {
    "text": "in a high-dimensional space for AI and",
    "start": "133680",
    "end": "135879"
  },
  {
    "text": "rag stack apps at speeds even faster",
    "start": "135879",
    "end": "137959"
  },
  {
    "text": "than the most specialized Vector",
    "start": "137959",
    "end": "139280"
  },
  {
    "text": "databases the end result is one",
    "start": "139280",
    "end": "141239"
  },
  {
    "text": "postgress database that can do",
    "start": "141239",
    "end": "142920"
  },
  {
    "text": "everything and do everything fast this",
    "start": "142920",
    "end": "145040"
  },
  {
    "text": "has been time scale DB in 100 seconds",
    "start": "145040",
    "end": "147599"
  },
  {
    "text": "huge thanks to time scale for making",
    "start": "147599",
    "end": "149160"
  },
  {
    "text": "this video possible thanks for watching",
    "start": "149160",
    "end": "151120"
  },
  {
    "text": "and I will see you in the next one",
    "start": "151120",
    "end": "155080"
  }
]