[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "llvm a toolkit used to build and",
    "start": "160",
    "end": "3040"
  },
  {
    "text": "optimize compilers building a",
    "start": "3040",
    "end": "4799"
  },
  {
    "text": "programming language from scratch is",
    "start": "4799",
    "end": "6319"
  },
  {
    "text": "hard you have humans who want to write",
    "start": "6319",
    "end": "8000"
  },
  {
    "text": "code in a nice simple syntax than",
    "start": "8000",
    "end": "9920"
  },
  {
    "text": "machines that need to run it on all",
    "start": "9920",
    "end": "11759"
  },
  {
    "text": "sorts of architectures llvm standardizes",
    "start": "11759",
    "end": "14559"
  },
  {
    "text": "the extremely complex process of turning",
    "start": "14559",
    "end": "16720"
  },
  {
    "text": "source code into machine code it was",
    "start": "16720",
    "end": "18560"
  },
  {
    "text": "created in 2003 by grad student chris",
    "start": "18560",
    "end": "21119"
  },
  {
    "text": "lattner at the university of illinois",
    "start": "21119",
    "end": "23039"
  },
  {
    "text": "and today it's the magic behind clang",
    "start": "23039",
    "end": "24960"
  },
  {
    "text": "for c and c plus as well as languages",
    "start": "24960",
    "end": "27359"
  },
  {
    "text": "like rust swift julia and many others",
    "start": "27359",
    "end": "30080"
  },
  {
    "start": "30000",
    "end": "64000"
  },
  {
    "text": "most importantly it represents high",
    "start": "30080",
    "end": "31920"
  },
  {
    "text": "level source code in a language agnostic",
    "start": "31920",
    "end": "34160"
  },
  {
    "text": "code called intermediate representation",
    "start": "34160",
    "end": "36320"
  },
  {
    "text": "or ir this means vastly different",
    "start": "36320",
    "end": "38399"
  },
  {
    "text": "languages like cuda and ruby produce the",
    "start": "38399",
    "end": "40719"
  },
  {
    "text": "same ir allowing them to share tools for",
    "start": "40719",
    "end": "42960"
  },
  {
    "text": "analysis and optimization before they're",
    "start": "42960",
    "end": "45039"
  },
  {
    "text": "converted to machine code for a specific",
    "start": "45039",
    "end": "46960"
  },
  {
    "text": "chip architecture a compiler can be",
    "start": "46960",
    "end": "48800"
  },
  {
    "text": "broken down into three parts the front",
    "start": "48800",
    "end": "50719"
  },
  {
    "text": "end parses the source code text and",
    "start": "50719",
    "end": "52480"
  },
  {
    "text": "converts it into ir the middle end",
    "start": "52480",
    "end": "54719"
  },
  {
    "text": "analyzes and optimizes this generated",
    "start": "54719",
    "end": "57039"
  },
  {
    "text": "code and finally the backend converts",
    "start": "57039",
    "end": "59039"
  },
  {
    "text": "the ir into native machine code to build",
    "start": "59039",
    "end": "61520"
  },
  {
    "text": "your own programming language from",
    "start": "61520",
    "end": "62719"
  },
  {
    "text": "scratch right now install llvm then",
    "start": "62719",
    "end": "65040"
  },
  {
    "start": "64000",
    "end": "122000"
  },
  {
    "text": "create a c",
    "start": "65040",
    "end": "66240"
  },
  {
    "text": "file now envision the programming",
    "start": "66240",
    "end": "67760"
  },
  {
    "text": "language syntax of your dreams to make",
    "start": "67760",
    "end": "69600"
  },
  {
    "text": "that high level code work you'll first",
    "start": "69600",
    "end": "71200"
  },
  {
    "text": "need to write a lexer to scan the raw",
    "start": "71200",
    "end": "73119"
  },
  {
    "text": "source code and break it into a",
    "start": "73119",
    "end": "74720"
  },
  {
    "text": "collection of tokens like literals",
    "start": "74720",
    "end": "76560"
  },
  {
    "text": "identifiers keywords operators and so on",
    "start": "76560",
    "end": "79040"
  },
  {
    "text": "next we'll need to define an abstract",
    "start": "79040",
    "end": "80720"
  },
  {
    "text": "syntax tree to represent the actual",
    "start": "80720",
    "end": "82640"
  },
  {
    "text": "structure of the code and how different",
    "start": "82640",
    "end": "84240"
  },
  {
    "text": "tokens relate to each other which is",
    "start": "84240",
    "end": "85840"
  },
  {
    "text": "accomplished by giving each node its own",
    "start": "85840",
    "end": "87600"
  },
  {
    "text": "class third we need a parser to loop",
    "start": "87600",
    "end": "90000"
  },
  {
    "text": "over each token and build out the",
    "start": "90000",
    "end": "91759"
  },
  {
    "text": "abstract syntax tree if you made it this",
    "start": "91759",
    "end": "93680"
  },
  {
    "text": "far congratulations because the hard",
    "start": "93680",
    "end": "95600"
  },
  {
    "text": "part is over now we can import a bunch",
    "start": "95600",
    "end": "97280"
  },
  {
    "text": "of llvm primitives to generate the",
    "start": "97280",
    "end": "99439"
  },
  {
    "text": "intermediate representation each type in",
    "start": "99439",
    "end": "101520"
  },
  {
    "text": "the abstract syntax tree is given a",
    "start": "101520",
    "end": "103439"
  },
  {
    "text": "method called cogen which always returns",
    "start": "103439",
    "end": "105520"
  },
  {
    "text": "an llbm value object used to represent a",
    "start": "105520",
    "end": "108560"
  },
  {
    "text": "single assignment register which is a",
    "start": "108560",
    "end": "110320"
  },
  {
    "text": "variable for the compiler that can only",
    "start": "110320",
    "end": "112079"
  },
  {
    "text": "be assigned once what's interesting",
    "start": "112079",
    "end": "113600"
  },
  {
    "text": "about these ir primitives is that unlike",
    "start": "113600",
    "end": "115600"
  },
  {
    "text": "assembly they're independent of any",
    "start": "115600",
    "end": "117439"
  },
  {
    "text": "particular machine architecture and that",
    "start": "117439",
    "end": "119280"
  },
  {
    "text": "dramatically simplifies things for",
    "start": "119280",
    "end": "120799"
  },
  {
    "text": "language developers who no longer need",
    "start": "120799",
    "end": "122399"
  },
  {
    "text": "to match the output to a processor's",
    "start": "122399",
    "end": "124240"
  },
  {
    "text": "instruction set now that the front end",
    "start": "124240",
    "end": "125840"
  },
  {
    "text": "can generate ir the op tool is used to",
    "start": "125840",
    "end": "128479"
  },
  {
    "text": "analyze and optimize the generated code",
    "start": "128479",
    "end": "130959"
  },
  {
    "text": "it makes multiple passes over the ir and",
    "start": "130959",
    "end": "133120"
  },
  {
    "text": "does things like dead code elimination",
    "start": "133120",
    "end": "134879"
  },
  {
    "text": "and scalar replacement of aggregates and",
    "start": "134879",
    "end": "137040"
  },
  {
    "text": "finally that brings us to the back end",
    "start": "137040",
    "end": "138640"
  },
  {
    "text": "where we write a module that takes ir as",
    "start": "138640",
    "end": "140879"
  },
  {
    "text": "an input that emits object code that can",
    "start": "140879",
    "end": "143120"
  },
  {
    "text": "run on any architecture congratulations",
    "start": "143120",
    "end": "145599"
  },
  {
    "text": "you just built your own custom",
    "start": "145599",
    "end": "146959"
  },
  {
    "text": "programming language and compiler in 100",
    "start": "146959",
    "end": "149280"
  },
  {
    "text": "seconds hit the like button and",
    "start": "149280",
    "end": "150560"
  },
  {
    "text": "subscribe if you want to see more short",
    "start": "150560",
    "end": "152000"
  },
  {
    "text": "videos like this thanks for watching and",
    "start": "152000",
    "end": "153920"
  },
  {
    "text": "i will see you in the next one",
    "start": "153920",
    "end": "157760"
  }
]