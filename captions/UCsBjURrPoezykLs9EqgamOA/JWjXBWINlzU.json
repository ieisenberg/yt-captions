[
  {
    "start": "0",
    "end": "46000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "6379"
  },
  {
    "text": "one of the most valuable things you can",
    "start": "6379",
    "end": "8460"
  },
  {
    "text": "learn in rxjs is how to create custom",
    "start": "8460",
    "end": "10980"
  },
  {
    "text": "operators they will help you reuse",
    "start": "10980",
    "end": "13170"
  },
  {
    "text": "common logic throughout your application",
    "start": "13170",
    "end": "14280"
  },
  {
    "text": "but more importantly you'll understand",
    "start": "14280",
    "end": "16710"
  },
  {
    "text": "how observables work at a more",
    "start": "16710",
    "end": "18240"
  },
  {
    "text": "fundamental level in this video we'll",
    "start": "18240",
    "end": "20340"
  },
  {
    "text": "cover the basics of custom operators",
    "start": "20340",
    "end": "22140"
  },
  {
    "text": "rxjs and if you're a pro member there's",
    "start": "22140",
    "end": "24449"
  },
  {
    "text": "a follow up video about performing joins",
    "start": "24449",
    "end": "26609"
  },
  {
    "text": "and firestore using custom operators if",
    "start": "26609",
    "end": "29789"
  },
  {
    "text": "you're new to the channel I can",
    "start": "29789",
    "end": "30840"
  },
  {
    "text": "subscribe and you can find the source",
    "start": "30840",
    "end": "32550"
  },
  {
    "text": "code at angular firebase comm I like to",
    "start": "32550",
    "end": "35219"
  },
  {
    "text": "think of an rxjs operator as middleware",
    "start": "35219",
    "end": "37649"
  },
  {
    "text": "for an observable stream a chicken goes",
    "start": "37649",
    "end": "40110"
  },
  {
    "text": "in the operator does something and",
    "start": "40110",
    "end": "41940"
  },
  {
    "text": "nuggets come out there are tons of",
    "start": "41940",
    "end": "43920"
  },
  {
    "text": "operators built into rxjs already but",
    "start": "43920",
    "end": "46289"
  },
  {
    "start": "46000",
    "end": "70000"
  },
  {
    "text": "oftentimes you'll have complex business",
    "start": "46289",
    "end": "47940"
  },
  {
    "text": "logic that doesn't fit one of the",
    "start": "47940",
    "end": "49800"
  },
  {
    "text": "generic operators a common use case that",
    "start": "49800",
    "end": "52199"
  },
  {
    "text": "I run into is joining collections and",
    "start": "52199",
    "end": "54300"
  },
  {
    "text": "documents together from the firestore no",
    "start": "54300",
    "end": "56550"
  },
  {
    "text": "sequel database the code to do this is",
    "start": "56550",
    "end": "58649"
  },
  {
    "text": "relatively complex but I can wrap it all",
    "start": "58649",
    "end": "60600"
  },
  {
    "text": "up in a custom operator and reuse it",
    "start": "60600",
    "end": "62730"
  },
  {
    "text": "throughout my application as needed and",
    "start": "62730",
    "end": "64408"
  },
  {
    "text": "I can even do things like state",
    "start": "64409",
    "end": "65909"
  },
  {
    "text": "management air handling custom logging",
    "start": "65909",
    "end": "68369"
  },
  {
    "text": "inside the operator itself now let's go",
    "start": "68369",
    "end": "71040"
  },
  {
    "start": "70000",
    "end": "552000"
  },
  {
    "text": "ahead and jump into the code for this",
    "start": "71040",
    "end": "72390"
  },
  {
    "text": "video I'll be using the blank typescript",
    "start": "72390",
    "end": "74189"
  },
  {
    "text": "project on stack blitz I have installed",
    "start": "74189",
    "end": "76619"
  },
  {
    "text": "rxjs and then I'm writing a function",
    "start": "76619",
    "end": "78570"
  },
  {
    "text": "called log that will simply write the",
    "start": "78570",
    "end": "80759"
  },
  {
    "text": "value that's emitted from the observable",
    "start": "80759",
    "end": "82590"
  },
  {
    "text": "on the screen to the right so we'll use",
    "start": "82590",
    "end": "84900"
  },
  {
    "text": "the of method to create an observable of",
    "start": "84900",
    "end": "87150"
  },
  {
    "text": "the string hello and you can see that",
    "start": "87150",
    "end": "89070"
  },
  {
    "text": "it's logged here in that browser I'm",
    "start": "89070",
    "end": "91140"
  },
  {
    "text": "going to start by creating a more",
    "start": "91140",
    "end": "93090"
  },
  {
    "text": "explicit complex operator and then we'll",
    "start": "93090",
    "end": "95700"
  },
  {
    "text": "break this down to make it more simple",
    "start": "95700",
    "end": "97229"
  },
  {
    "text": "for your more practical use cases an",
    "start": "97229",
    "end": "99890"
  },
  {
    "text": "operator itself is just a pure function",
    "start": "99890",
    "end": "102240"
  },
  {
    "text": "we'll go ahead and create one called to",
    "start": "102240",
    "end": "104280"
  },
  {
    "text": "uppercase and it will just up case the",
    "start": "104280",
    "end": "106860"
  },
  {
    "text": "characters in the string so this outer",
    "start": "106860",
    "end": "108869"
  },
  {
    "text": "function is our operator and then it",
    "start": "108869",
    "end": "111000"
  },
  {
    "text": "returns an inner function that returns",
    "start": "111000",
    "end": "112860"
  },
  {
    "text": "an observable that feels a little",
    "start": "112860",
    "end": "114600"
  },
  {
    "text": "confusing at first but after you do it a",
    "start": "114600",
    "end": "116549"
  },
  {
    "text": "couple times it'll feel pretty natural",
    "start": "116549",
    "end": "118079"
  },
  {
    "text": "the inner function gives you access to",
    "start": "118079",
    "end": "120060"
  },
  {
    "text": "the source observable at that given",
    "start": "120060",
    "end": "121920"
  },
  {
    "text": "point in time so what you can do is",
    "start": "121920",
    "end": "124649"
  },
  {
    "text": "create a new observable by subscribing",
    "start": "124649",
    "end": "127170"
  },
  {
    "text": "to this source observable now there's a",
    "start": "127170",
    "end": "129509"
  },
  {
    "text": "much cleaner way to do this but I just",
    "start": "129509",
    "end": "130920"
  },
  {
    "text": "want to show you how it works at a more",
    "start": "130920",
    "end": "132450"
  },
  {
    "text": "fundamental level",
    "start": "132450",
    "end": "133330"
  },
  {
    "text": "we can have this function return a new",
    "start": "133330",
    "end": "135070"
  },
  {
    "text": "observable that subscribes to the source",
    "start": "135070",
    "end": "137410"
  },
  {
    "text": "observable then we can implement the",
    "start": "137410",
    "end": "139300"
  },
  {
    "text": "next callback with this source",
    "start": "139300",
    "end": "140830"
  },
  {
    "text": "observable and transform it to whatever",
    "start": "140830",
    "end": "142900"
  },
  {
    "text": "value we want to be emitted next in our",
    "start": "142900",
    "end": "145570"
  },
  {
    "text": "case we can just call X dot to uppercase",
    "start": "145570",
    "end": "147850"
  },
  {
    "text": "and that will transform the string to",
    "start": "147850",
    "end": "149920"
  },
  {
    "text": "uppercase then inside this method you",
    "start": "149920",
    "end": "152470"
  },
  {
    "text": "can also implement the error and",
    "start": "152470",
    "end": "154510"
  },
  {
    "text": "complete methods if you want to control",
    "start": "154510",
    "end": "156280"
  },
  {
    "text": "the behavior of those callbacks as well",
    "start": "156280",
    "end": "158170"
  },
  {
    "text": "and that gives us a completely custom",
    "start": "158170",
    "end": "160810"
  },
  {
    "text": "pipeable operator from scratch now we",
    "start": "160810",
    "end": "163810"
  },
  {
    "text": "can put it to use by going down to our",
    "start": "163810",
    "end": "165580"
  },
  {
    "text": "observable of hello and before",
    "start": "165580",
    "end": "167740"
  },
  {
    "text": "subscribing we'll pipe in the to",
    "start": "167740",
    "end": "169690"
  },
  {
    "text": "uppercase operator and as you can see",
    "start": "169690",
    "end": "171790"
  },
  {
    "text": "that transforms the value to uppercase",
    "start": "171790",
    "end": "173880"
  },
  {
    "text": "another thing you might want to do is",
    "start": "173880",
    "end": "175870"
  },
  {
    "text": "pass arguments into your operator let's",
    "start": "175870",
    "end": "178510"
  },
  {
    "text": "go ahead and refactor our operator to",
    "start": "178510",
    "end": "180250"
  },
  {
    "text": "take the emitted value and raise it to",
    "start": "180250",
    "end": "182770"
  },
  {
    "text": "the power of whatever number is passed",
    "start": "182770",
    "end": "184630"
  },
  {
    "text": "in as the argument we'll go ahead and",
    "start": "184630",
    "end": "186970"
  },
  {
    "text": "rename our function to Pio W and in the",
    "start": "186970",
    "end": "189820"
  },
  {
    "text": "first function we can name whatever",
    "start": "189820",
    "end": "191050"
  },
  {
    "text": "arguments are able to be passed into it",
    "start": "191050",
    "end": "193390"
  },
  {
    "text": "then I'll go down to the operator as",
    "start": "193390",
    "end": "195820"
  },
  {
    "text": "it's used in the pipe passing the number",
    "start": "195820",
    "end": "197739"
  },
  {
    "text": "three and then I'll change our",
    "start": "197739",
    "end": "199269"
  },
  {
    "text": "observable to two so basically we're",
    "start": "199269",
    "end": "201940"
  },
  {
    "text": "raising two to the power of three then",
    "start": "201940",
    "end": "204610"
  },
  {
    "text": "this method is already implemented in",
    "start": "204610",
    "end": "206260"
  },
  {
    "text": "plain JavaScript in the math class so we",
    "start": "206260",
    "end": "208630"
  },
  {
    "text": "can just go into next and take the",
    "start": "208630",
    "end": "210790"
  },
  {
    "text": "emitted value and raise it to the power",
    "start": "210790",
    "end": "212709"
  },
  {
    "text": "of n and if we run that you can see it",
    "start": "212709",
    "end": "215500"
  },
  {
    "text": "emits a value of eight and if we change",
    "start": "215500",
    "end": "218260"
  },
  {
    "text": "our argument to 100 you can see it emits",
    "start": "218260",
    "end": "220690"
  },
  {
    "text": "a much larger value so that's pretty",
    "start": "220690",
    "end": "223269"
  },
  {
    "text": "cool but that's a lot of code for not a",
    "start": "223269",
    "end": "225430"
  },
  {
    "text": "whole lot of impact we can simplify this",
    "start": "225430",
    "end": "227739"
  },
  {
    "text": "code dramatically by piggybacking on",
    "start": "227739",
    "end": "229780"
  },
  {
    "text": "existing rxjs operators in a lot of",
    "start": "229780",
    "end": "232840"
  },
  {
    "text": "cases you'll be mapping one value to",
    "start": "232840",
    "end": "234880"
  },
  {
    "text": "another value that's what we're doing",
    "start": "234880",
    "end": "236680"
  },
  {
    "text": "right now with this power function so",
    "start": "236680",
    "end": "238660"
  },
  {
    "text": "let's go ahead and delete this whole",
    "start": "238660",
    "end": "239950"
  },
  {
    "text": "part about creating a new observable and",
    "start": "239950",
    "end": "241810"
  },
  {
    "text": "instead we'll use the existing map",
    "start": "241810",
    "end": "243580"
  },
  {
    "text": "operator from rxjs",
    "start": "243580",
    "end": "245019"
  },
  {
    "text": "as our second function maps already",
    "start": "245019",
    "end": "247720"
  },
  {
    "text": "going to subscribe to the source",
    "start": "247720",
    "end": "249040"
  },
  {
    "text": "observable for us so all we have to do",
    "start": "249040",
    "end": "251080"
  },
  {
    "text": "is return the actual math logic that we",
    "start": "251080",
    "end": "253330"
  },
  {
    "text": "want implemented in this operator much",
    "start": "253330",
    "end": "255700"
  },
  {
    "text": "cleaner and much easier to read and it",
    "start": "255700",
    "end": "257799"
  },
  {
    "text": "works exactly the same way as the",
    "start": "257799",
    "end": "259600"
  },
  {
    "text": "previous operator did a fun exercise is",
    "start": "259600",
    "end": "262780"
  },
  {
    "text": "to combine rxjs with low - they're both",
    "start": "262780",
    "end": "265780"
  },
  {
    "text": "functional libraries and",
    "start": "265780",
    "end": "267190"
  },
  {
    "text": "get a lot done with very little code I'm",
    "start": "267190",
    "end": "269470"
  },
  {
    "text": "going to create a pick numbers operator",
    "start": "269470",
    "end": "271810"
  },
  {
    "text": "and what this will do is filter out any",
    "start": "271810",
    "end": "274300"
  },
  {
    "text": "object properties that have number",
    "start": "274300",
    "end": "276430"
  },
  {
    "text": "values this would take a good amount of",
    "start": "276430",
    "end": "278380"
  },
  {
    "text": "code if you are doing it from scratch",
    "start": "278380",
    "end": "279370"
  },
  {
    "text": "but with lodash we can use that pick by",
    "start": "279370",
    "end": "282010"
  },
  {
    "text": "function then pass the emitted value as",
    "start": "282010",
    "end": "284290"
  },
  {
    "text": "the first argument and then another",
    "start": "284290",
    "end": "286060"
  },
  {
    "text": "lodash function as the second argument",
    "start": "286060",
    "end": "287890"
  },
  {
    "text": "that checks whether or not the property",
    "start": "287890",
    "end": "289540"
  },
  {
    "text": "is a number now if we have an observable",
    "start": "289540",
    "end": "291790"
  },
  {
    "text": "object for example a response from an",
    "start": "291790",
    "end": "294370"
  },
  {
    "text": "HTTP call we can use our custom operator",
    "start": "294370",
    "end": "297070"
  },
  {
    "text": "to filter only the object properties",
    "start": "297070",
    "end": "298990"
  },
  {
    "text": "that we actually want you'll notice in",
    "start": "298990",
    "end": "301150"
  },
  {
    "text": "our object that the bar property is a",
    "start": "301150",
    "end": "302800"
  },
  {
    "text": "string so when we pipe in our operator",
    "start": "302800",
    "end": "304840"
  },
  {
    "text": "it filters that property out from the",
    "start": "304840",
    "end": "307030"
  },
  {
    "text": "emitted value now keep in mind that when",
    "start": "307030",
    "end": "309700"
  },
  {
    "text": "you're creating custom operators you're",
    "start": "309700",
    "end": "311170"
  },
  {
    "text": "not just limited to map you can use any",
    "start": "311170",
    "end": "313120"
  },
  {
    "text": "existing rxjs operator to create your",
    "start": "313120",
    "end": "315610"
  },
  {
    "text": "own custom operator and you could even",
    "start": "315610",
    "end": "317590"
  },
  {
    "text": "use multiple operators together in a",
    "start": "317590",
    "end": "319360"
  },
  {
    "text": "pipe for example if I want to create an",
    "start": "319360",
    "end": "321700"
  },
  {
    "text": "operator that filters only numbers",
    "start": "321700",
    "end": "323770"
  },
  {
    "text": "through the stream I can just use rxjs",
    "start": "323770",
    "end": "326170"
  },
  {
    "text": "filter then pass in that is number",
    "start": "326170",
    "end": "328060"
  },
  {
    "text": "function from lodash now if we have an",
    "start": "328060",
    "end": "330070"
  },
  {
    "text": "observable that we're only expecting to",
    "start": "330070",
    "end": "332020"
  },
  {
    "text": "emit numbers we can pipe in this",
    "start": "332020",
    "end": "333880"
  },
  {
    "text": "operator and filter out anything that's",
    "start": "333880",
    "end": "335919"
  },
  {
    "text": "not an actual number in this case 3 & 4",
    "start": "335919",
    "end": "338800"
  },
  {
    "text": "are strings so we should only get one",
    "start": "338800",
    "end": "341169"
  },
  {
    "text": "two and five emitted from the observable",
    "start": "341169",
    "end": "343270"
  },
  {
    "text": "so now that you know the basics of",
    "start": "343270",
    "end": "345130"
  },
  {
    "text": "custom rxjs operators I want to show you",
    "start": "345130",
    "end": "347740"
  },
  {
    "text": "a more advanced example but first I want",
    "start": "347740",
    "end": "350410"
  },
  {
    "text": "to give a shout out to nicholas jameson",
    "start": "350410",
    "end": "352060"
  },
  {
    "text": "who puts out some amazing content on",
    "start": "352060",
    "end": "354040"
  },
  {
    "text": "advanced rxjs concepts and who is also",
    "start": "354040",
    "end": "356500"
  },
  {
    "text": "an rxjs core team member you should",
    "start": "356500",
    "end": "358750"
  },
  {
    "text": "definitely follow him on medium and",
    "start": "358750",
    "end": "360340"
  },
  {
    "text": "Twitter if you're doing anything with",
    "start": "360340",
    "end": "361840"
  },
  {
    "text": "rxjs",
    "start": "361840",
    "end": "362530"
  },
  {
    "text": "but in this next example we're going to",
    "start": "362530",
    "end": "364390"
  },
  {
    "text": "build an operator that has its own",
    "start": "364390",
    "end": "366400"
  },
  {
    "text": "internal state and uses multiple",
    "start": "366400",
    "end": "368350"
  },
  {
    "text": "built-in rx operators within the custom",
    "start": "368350",
    "end": "371260"
  },
  {
    "text": "operator itself this can be useful when",
    "start": "371260",
    "end": "373300"
  },
  {
    "text": "you have complex business logic within",
    "start": "373300",
    "end": "375010"
  },
  {
    "text": "your stream and also need to share data",
    "start": "375010",
    "end": "377500"
  },
  {
    "text": "between multiple operators and multiple",
    "start": "377500",
    "end": "379900"
  },
  {
    "text": "limited values normally you want to keep",
    "start": "379900",
    "end": "382419"
  },
  {
    "text": "your functions as pure as possible",
    "start": "382419",
    "end": "384130"
  },
  {
    "text": "meaning given the same inputs they",
    "start": "384130",
    "end": "385810"
  },
  {
    "text": "always produce the same outputs so if",
    "start": "385810",
    "end": "388270"
  },
  {
    "text": "you declare a variable inside the",
    "start": "388270",
    "end": "389800"
  },
  {
    "text": "operator and have other operators read",
    "start": "389800",
    "end": "392080"
  },
  {
    "text": "and mutate it you are violating the",
    "start": "392080",
    "end": "393730"
  },
  {
    "text": "principle of peer functions however",
    "start": "393730",
    "end": "395890"
  },
  {
    "text": "there are some very practical use cases",
    "start": "395890",
    "end": "397720"
  },
  {
    "text": "for doing so and we can do it in a way",
    "start": "397720",
    "end": "399700"
  },
  {
    "text": "that's responsible",
    "start": "399700",
    "end": "400990"
  },
  {
    "text": "predictable across all subscribers to an",
    "start": "400990",
    "end": "403270"
  },
  {
    "text": "observable so if you want to share",
    "start": "403270",
    "end": "405910"
  },
  {
    "text": "information between operators you should",
    "start": "405910",
    "end": "408160"
  },
  {
    "text": "first wrap it in defer this is an",
    "start": "408160",
    "end": "410860"
  },
  {
    "text": "observable factory function that will",
    "start": "410860",
    "end": "412600"
  },
  {
    "text": "ensure any state kept in this operator",
    "start": "412600",
    "end": "414820"
  },
  {
    "text": "will happen on a per subscriber this",
    "start": "414820",
    "end": "422590"
  },
  {
    "text": "stream we can declare the stateful",
    "start": "422590",
    "end": "425020"
  },
  {
    "text": "variable inside the defer callback then",
    "start": "425020",
    "end": "427540"
  },
  {
    "text": "all of the operators or functions inside",
    "start": "427540",
    "end": "429850"
  },
  {
    "text": "of it will have the ability to read and",
    "start": "429850",
    "end": "431830"
  },
  {
    "text": "mutate this variable so at this point we",
    "start": "431830",
    "end": "434290"
  },
  {
    "text": "can construct our own custom pipe on the",
    "start": "434290",
    "end": "436450"
  },
  {
    "text": "source observable then the operators can",
    "start": "436450",
    "end": "438940"
  },
  {
    "text": "do whatever they want to the state in",
    "start": "438940",
    "end": "440920"
  },
  {
    "text": "this example we'll just add a new value",
    "start": "440920",
    "end": "443440"
  },
  {
    "text": "to the existing string so we get an",
    "start": "443440",
    "end": "445480"
  },
  {
    "text": "ever-growing string based on each newly",
    "start": "445480",
    "end": "447700"
  },
  {
    "text": "emitted item that's just a trivial",
    "start": "447700",
    "end": "450250"
  },
  {
    "text": "example but in the real world you might",
    "start": "450250",
    "end": "452080"
  },
  {
    "text": "need to share data between multiple",
    "start": "452080",
    "end": "453730"
  },
  {
    "text": "operators and you might need to do more",
    "start": "453730",
    "end": "455740"
  },
  {
    "text": "advanced things like caching API calls",
    "start": "455740",
    "end": "458110"
  },
  {
    "text": "and things like that or you might need",
    "start": "458110",
    "end": "460300"
  },
  {
    "text": "to switch map to multiple related",
    "start": "460300",
    "end": "461710"
  },
  {
    "text": "observables which just becomes really",
    "start": "461710",
    "end": "463240"
  },
  {
    "text": "hard to do in a purely functional way",
    "start": "463240",
    "end": "465040"
  },
  {
    "text": "but in any case the operator we just",
    "start": "465040",
    "end": "467620"
  },
  {
    "text": "built will return a cold observable that",
    "start": "467620",
    "end": "470110"
  },
  {
    "text": "has its own internal state so each",
    "start": "470110",
    "end": "472120"
  },
  {
    "text": "subscriber will get a refreshed state",
    "start": "472120",
    "end": "474280"
  },
  {
    "text": "based on that subscription so I'm",
    "start": "474280",
    "end": "477460"
  },
  {
    "text": "actually going to change history to a",
    "start": "477460",
    "end": "478900"
  },
  {
    "text": "random number just to demonstrate this a",
    "start": "478900",
    "end": "480700"
  },
  {
    "text": "little bit better then we can go and",
    "start": "480700",
    "end": "482770"
  },
  {
    "text": "create an interval and we'll pipe in",
    "start": "482770",
    "end": "484690"
  },
  {
    "text": "this custom operator if we subscribe to",
    "start": "484690",
    "end": "486760"
  },
  {
    "text": "it twice you'll notice that we get two",
    "start": "486760",
    "end": "488650"
  },
  {
    "text": "different random numbers that's because",
    "start": "488650",
    "end": "490570"
  },
  {
    "text": "we're dealing with a cold observable so",
    "start": "490570",
    "end": "492460"
  },
  {
    "text": "they're each creating a new observable",
    "start": "492460",
    "end": "493990"
  },
  {
    "text": "on the subscription so if you want to",
    "start": "493990",
    "end": "496420"
  },
  {
    "text": "make this observable hot and share the",
    "start": "496420",
    "end": "498430"
  },
  {
    "text": "state between multiple subscribers you",
    "start": "498430",
    "end": "500440"
  },
  {
    "text": "can just pipe in the share operator when",
    "start": "500440",
    "end": "502450"
  },
  {
    "text": "creating the observable and then that",
    "start": "502450",
    "end": "504190"
  },
  {
    "text": "state will be shared between all",
    "start": "504190",
    "end": "505390"
  },
  {
    "text": "subscribers so now you can see that both",
    "start": "505390",
    "end": "508390"
  },
  {
    "text": "subscribers are logging the same random",
    "start": "508390",
    "end": "510370"
  },
  {
    "text": "number because they're sharing the same",
    "start": "510370",
    "end": "511900"
  },
  {
    "text": "source and the state still only gets",
    "start": "511900",
    "end": "514060"
  },
  {
    "text": "mutated once even though there's",
    "start": "514060",
    "end": "515409"
  },
  {
    "text": "multiple subscribers in the next video",
    "start": "515410",
    "end": "517719"
  },
  {
    "text": "we'll cover even more advanced concepts",
    "start": "517720",
    "end": "519430"
  },
  {
    "text": "with angular fire - and fire store to",
    "start": "519430",
    "end": "522010"
  },
  {
    "text": "join and merge collections and documents",
    "start": "522010",
    "end": "524830"
  },
  {
    "text": "together",
    "start": "524830",
    "end": "525820"
  },
  {
    "text": "I'm gonna go ahead and wrap things up",
    "start": "525820",
    "end": "527350"
  },
  {
    "text": "there if this video helped you please",
    "start": "527350",
    "end": "528790"
  },
  {
    "text": "like and subscribe and if you want to",
    "start": "528790",
    "end": "530800"
  },
  {
    "text": "take your development to the next level",
    "start": "530800",
    "end": "532420"
  },
  {
    "text": "consider becoming a pro member at",
    "start": "532420",
    "end": "534130"
  },
  {
    "text": "angular firebase comm you'll get access",
    "start": "534130",
    "end": "536110"
  },
  {
    "text": "to my full-length courses as well as a",
    "start": "536110",
    "end": "538420"
  },
  {
    "text": "free book and a whole bunch of other",
    "start": "538420",
    "end": "540130"
  },
  {
    "text": "exclusive content thanks for watching",
    "start": "540130",
    "end": "542380"
  },
  {
    "text": "and I'll talk to you soon",
    "start": "542380",
    "end": "545580"
  }
]