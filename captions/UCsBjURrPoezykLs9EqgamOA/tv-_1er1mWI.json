[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "when you first become a junior developer",
    "start": "80",
    "end": "2000"
  },
  {
    "text": "your code will look like Playdoh snakes",
    "start": "2000",
    "end": "4000"
  },
  {
    "text": "but as you progress to senior developer",
    "start": "4000",
    "end": "5839"
  },
  {
    "text": "and learn about software design patterns",
    "start": "5839",
    "end": "7680"
  },
  {
    "text": "your code will look like the cysteine",
    "start": "7680",
    "end": "9200"
  },
  {
    "text": "chapel but when you then progress to",
    "start": "9200",
    "end": "11360"
  },
  {
    "text": "principal engineer you'll realize that",
    "start": "11360",
    "end": "13080"
  },
  {
    "text": "nobody wants to maintain the cine Chapel",
    "start": "13080",
    "end": "15000"
  },
  {
    "text": "for a silly website and go back to",
    "start": "15000",
    "end": "16720"
  },
  {
    "text": "making Play-Doh snakes in today's video",
    "start": "16720",
    "end": "18720"
  },
  {
    "text": "you'll learn about 10 different software",
    "start": "18720",
    "end": "20279"
  },
  {
    "text": "design patterns along with the pros and",
    "start": "20279",
    "end": "22000"
  },
  {
    "text": "cons of using them which can be very",
    "start": "22000",
    "end": "23640"
  },
  {
    "text": "subjective and controversial one of the",
    "start": "23640",
    "end": "25519"
  },
  {
    "text": "most influential books in the history of",
    "start": "25519",
    "end": "27199"
  },
  {
    "text": "programming is design patterns by four",
    "start": "27199",
    "end": "29359"
  },
  {
    "text": "C++ Engineers called The Gang of four it",
    "start": "29359",
    "end": "31920"
  },
  {
    "text": "breaks down 23 different approaches to",
    "start": "31920",
    "end": "33920"
  },
  {
    "text": "address recurring problems that",
    "start": "33920",
    "end": "35360"
  },
  {
    "text": "programmers face which are categorized",
    "start": "35360",
    "end": "37160"
  },
  {
    "text": "as creational patterns how objects are",
    "start": "37160",
    "end": "39079"
  },
  {
    "text": "created structural patterns how objects",
    "start": "39079",
    "end": "41120"
  },
  {
    "text": "relate to each other and behavioral",
    "start": "41120",
    "end": "42719"
  },
  {
    "text": "patterns how objects communicate with",
    "start": "42719",
    "end": "44520"
  },
  {
    "text": "each other becoming a proficient",
    "start": "44520",
    "end": "46079"
  },
  {
    "text": "software engineer is not about",
    "start": "46079",
    "end": "47559"
  },
  {
    "text": "memorizing the syntax of a programming",
    "start": "47559",
    "end": "49440"
  },
  {
    "text": "language but rather the ability to solve",
    "start": "49440",
    "end": "51719"
  },
  {
    "text": "problems with it by the end of this",
    "start": "51719",
    "end": "53399"
  },
  {
    "text": "video you'll understand a variety of",
    "start": "53399",
    "end": "55239"
  },
  {
    "text": "different patterns for solving problems",
    "start": "55239",
    "end": "57120"
  },
  {
    "text": "as they relate to Modern app developers",
    "start": "57120",
    "end": "59120"
  },
  {
    "text": "before we get started I want to give a",
    "start": "59120",
    "end": "60559"
  },
  {
    "start": "60000",
    "end": "94000"
  },
  {
    "text": "big shout out to refactoring doguru they",
    "start": "60559",
    "end": "62960"
  },
  {
    "text": "gave me permission to use some of their",
    "start": "62960",
    "end": "64559"
  },
  {
    "text": "Graphics that explain design patterns",
    "start": "64559",
    "end": "66400"
  },
  {
    "text": "better than anything else out there",
    "start": "66400",
    "end": "67759"
  },
  {
    "text": "they're based in Ukraine and it's",
    "start": "67759",
    "end": "69119"
  },
  {
    "text": "seriously one of the coolest programming",
    "start": "69119",
    "end": "70640"
  },
  {
    "text": "websites on the internet design patterns",
    "start": "70640",
    "end": "72400"
  },
  {
    "text": "are really interesting because they're",
    "start": "72400",
    "end": "73759"
  },
  {
    "text": "not just like algorithms that you can",
    "start": "73759",
    "end": "75479"
  },
  {
    "text": "copy and paste from stack Overflow you",
    "start": "75479",
    "end": "77320"
  },
  {
    "text": "actually need to use your brain to",
    "start": "77320",
    "end": "78520"
  },
  {
    "text": "implement them it can be tempting to",
    "start": "78520",
    "end": "80079"
  },
  {
    "text": "implement them all over the place but",
    "start": "80079",
    "end": "81680"
  },
  {
    "text": "when used improperly they can add",
    "start": "81680",
    "end": "83200"
  },
  {
    "text": "additional complexity and boilerplate to",
    "start": "83200",
    "end": "85200"
  },
  {
    "text": "a code basee the book is not the Bible",
    "start": "85200",
    "end": "87079"
  },
  {
    "text": "and there are many criticisms of it",
    "start": "87079",
    "end": "88600"
  },
  {
    "text": "regardless knowing how to write",
    "start": "88600",
    "end": "89920"
  },
  {
    "text": "recognized design patterns will help you",
    "start": "89920",
    "end": "91600"
  },
  {
    "text": "level up as a programmer the first",
    "start": "91600",
    "end": "93240"
  },
  {
    "text": "pattern we'll look at is Singleton which",
    "start": "93240",
    "end": "95000"
  },
  {
    "start": "94000",
    "end": "144000"
  },
  {
    "text": "is very easy to understand it's a type",
    "start": "95000",
    "end": "96880"
  },
  {
    "text": "of object that can only be instantiated",
    "start": "96880",
    "end": "99119"
  },
  {
    "text": "once in typescript we might Implement a",
    "start": "99119",
    "end": "101040"
  },
  {
    "text": "Singleton class called settings to",
    "start": "101040",
    "end": "102920"
  },
  {
    "text": "represent the global app settings data",
    "start": "102920",
    "end": "105079"
  },
  {
    "text": "we'll give it a static instance property",
    "start": "105079",
    "end": "107040"
  },
  {
    "text": "and then make its Constructor private so",
    "start": "107040",
    "end": "108640"
  },
  {
    "text": "that it cannot be instantiated with the",
    "start": "108640",
    "end": "110159"
  },
  {
    "text": "new keyword we then create a static get",
    "start": "110159",
    "end": "112280"
  },
  {
    "text": "instance method that will check to see",
    "start": "112280",
    "end": "114119"
  },
  {
    "text": "if the instance has already been created",
    "start": "114119",
    "end": "115799"
  },
  {
    "text": "and if not it will create a new one and",
    "start": "115799",
    "end": "117719"
  },
  {
    "text": "that ensures that only one object can be",
    "start": "117719",
    "end": "119520"
  },
  {
    "text": "created that's great and all but here's",
    "start": "119520",
    "end": "121280"
  },
  {
    "text": "where things become a little more",
    "start": "121280",
    "end": "122320"
  },
  {
    "text": "nuanced in JavaScript we have object",
    "start": "122320",
    "end": "124240"
  },
  {
    "text": "literals and also the concept of global",
    "start": "124240",
    "end": "126520"
  },
  {
    "text": "data and objects are passed around by",
    "start": "126520",
    "end": "128440"
  },
  {
    "text": "reference we get all the same basic",
    "start": "128440",
    "end": "130080"
  },
  {
    "text": "characteristics as this pattern by",
    "start": "130080",
    "end": "131800"
  },
  {
    "text": "simply creating a global object the",
    "start": "131800",
    "end": "133760"
  },
  {
    "text": "pattern itself is really just extra",
    "start": "133760",
    "end": "135480"
  },
  {
    "text": "boiler plate that we don't need it's an",
    "start": "135480",
    "end": "137160"
  },
  {
    "text": "entirely different story in C++ but the",
    "start": "137160",
    "end": "139400"
  },
  {
    "text": "moral is to lean on your languages",
    "start": "139400",
    "end": "141080"
  },
  {
    "text": "built-in features before implementing a",
    "start": "141080",
    "end": "143040"
  },
  {
    "text": "fancy design pattern now let's take a",
    "start": "143040",
    "end": "144800"
  },
  {
    "start": "144000",
    "end": "226000"
  },
  {
    "text": "look at the Prototype pattern which is",
    "start": "144800",
    "end": "146680"
  },
  {
    "text": "just a fancy word for clone if you've",
    "start": "146680",
    "end": "148840"
  },
  {
    "text": "done object oriented programming you",
    "start": "148840",
    "end": "150599"
  },
  {
    "text": "should be familiar with inheritance",
    "start": "150599",
    "end": "152319"
  },
  {
    "text": "where a class can be extended with a",
    "start": "152319",
    "end": "154360"
  },
  {
    "text": "subclass one problem with inheritance is",
    "start": "154360",
    "end": "156480"
  },
  {
    "text": "that it can lead to a complex hierarchy",
    "start": "156480",
    "end": "158560"
  },
  {
    "text": "of code the Prototype pattern is an",
    "start": "158560",
    "end": "160360"
  },
  {
    "text": "alternative way to implement inheritance",
    "start": "160360",
    "end": "162560"
  },
  {
    "text": "but instead of inheriting functionality",
    "start": "162560",
    "end": "164159"
  },
  {
    "text": "from a class it comes from an object",
    "start": "164159",
    "end": "166040"
  },
  {
    "text": "that's already been created this creates",
    "start": "166040",
    "end": "167720"
  },
  {
    "text": "a flat prototype chain that makes it",
    "start": "167720",
    "end": "169599"
  },
  {
    "text": "much easier to share functionality",
    "start": "169599",
    "end": "171239"
  },
  {
    "text": "between objects especially in a dynamic",
    "start": "171239",
    "end": "173360"
  },
  {
    "text": "language like JavaScript which supports",
    "start": "173360",
    "end": "175319"
  },
  {
    "text": "prototypal inheritance out of the box",
    "start": "175319",
    "end": "177280"
  },
  {
    "text": "imagine we have an object named zombie",
    "start": "177280",
    "end": "179159"
  },
  {
    "text": "this is our prototyp type but now we",
    "start": "179159",
    "end": "180680"
  },
  {
    "text": "want to create a new object based on it",
    "start": "180680",
    "end": "182760"
  },
  {
    "text": "that also has a name we can do that with",
    "start": "182760",
    "end": "184920"
  },
  {
    "text": "object create by passing the zombie as",
    "start": "184920",
    "end": "187159"
  },
  {
    "text": "the Prototype then specify additional",
    "start": "187159",
    "end": "189120"
  },
  {
    "text": "properties like name for the new object",
    "start": "189120",
    "end": "191280"
  },
  {
    "text": "the interesting thing is that if you log",
    "start": "191280",
    "end": "192920"
  },
  {
    "text": "this object you'll only see the name and",
    "start": "192920",
    "end": "194959"
  },
  {
    "text": "not the eat brain's method however if",
    "start": "194959",
    "end": "197120"
  },
  {
    "text": "you try to call that method it will",
    "start": "197120",
    "end": "198680"
  },
  {
    "text": "still work that's because JavaScript",
    "start": "198680",
    "end": "200560"
  },
  {
    "text": "will go up the Prototype chain until it",
    "start": "200560",
    "end": "202440"
  },
  {
    "text": "reaches the root looking for any methods",
    "start": "202440",
    "end": "204360"
  },
  {
    "text": "or properties on the parent objects you",
    "start": "204360",
    "end": "206239"
  },
  {
    "text": "can always get the Prototype from an",
    "start": "206239",
    "end": "207760"
  },
  {
    "text": "object by using this Proto property",
    "start": "207760",
    "end": "209959"
  },
  {
    "text": "however that's not a modern best",
    "start": "209959",
    "end": "211239"
  },
  {
    "text": "practice and instead you should use",
    "start": "211239",
    "end": "212920"
  },
  {
    "text": "object get prototype of now when it",
    "start": "212920",
    "end": "215040"
  },
  {
    "text": "comes to classes in JavaScript prototype",
    "start": "215040",
    "end": "217319"
  },
  {
    "text": "refers to its Constructor and that means",
    "start": "217319",
    "end": "219519"
  },
  {
    "text": "that we can extend a class with",
    "start": "219519",
    "end": "221080"
  },
  {
    "text": "additional functions if we want to",
    "start": "221080",
    "end": "222840"
  },
  {
    "text": "however that's also generally considered",
    "start": "222840",
    "end": "224400"
  },
  {
    "text": "a bad practice now let's switch gears to",
    "start": "224400",
    "end": "226439"
  },
  {
    "start": "226000",
    "end": "263000"
  },
  {
    "text": "the Builder pattern imagine you're",
    "start": "226439",
    "end": "227680"
  },
  {
    "text": "running a hot dog stand and when a",
    "start": "227680",
    "end": "229239"
  },
  {
    "text": "customer places an order they need to",
    "start": "229239",
    "end": "230720"
  },
  {
    "text": "tell you everything they want in the",
    "start": "230720",
    "end": "231760"
  },
  {
    "text": "sandwich and the Constructor that works",
    "start": "231760",
    "end": "233959"
  },
  {
    "text": "but it's kind of hard to keep track of",
    "start": "233959",
    "end": "235120"
  },
  {
    "text": "all these options and we might want to",
    "start": "235120",
    "end": "236720"
  },
  {
    "text": "defer each step to a later point with",
    "start": "236720",
    "end": "238519"
  },
  {
    "text": "the builder pattern we create the object",
    "start": "238519",
    "end": "240400"
  },
  {
    "text": "step by step using methods rather than",
    "start": "240400",
    "end": "242360"
  },
  {
    "text": "the Constructor and we could even",
    "start": "242360",
    "end": "243680"
  },
  {
    "text": "delegate the building logic to an",
    "start": "243680",
    "end": "245200"
  },
  {
    "text": "entirely different class in JavaScript",
    "start": "245200",
    "end": "247200"
  },
  {
    "text": "We'll have each method return this which",
    "start": "247200",
    "end": "249040"
  },
  {
    "text": "is a reference to the object instance",
    "start": "249040",
    "end": "251079"
  },
  {
    "text": "that allows us to implement method",
    "start": "251079",
    "end": "252519"
  },
  {
    "text": "chaining where we instantiate an object",
    "start": "252519",
    "end": "254519"
  },
  {
    "text": "then chain methods to it but always get",
    "start": "254519",
    "end": "256239"
  },
  {
    "text": "the object as the return value you'll",
    "start": "256239",
    "end": "258199"
  },
  {
    "text": "come across this pattern frequently with",
    "start": "258199",
    "end": "259639"
  },
  {
    "text": "libraries like jQuery but it's gone a",
    "start": "259639",
    "end": "261560"
  },
  {
    "text": "bit out of style in recent years another",
    "start": "261560",
    "end": "263479"
  },
  {
    "start": "263000",
    "end": "294000"
  },
  {
    "text": "pattern you may come across is Factory",
    "start": "263479",
    "end": "265560"
  },
  {
    "text": "instead of using the new keyword to",
    "start": "265560",
    "end": "267040"
  },
  {
    "text": "instantiate an object you use a function",
    "start": "267040",
    "end": "269320"
  },
  {
    "text": "or method to do it for you that may",
    "start": "269320",
    "end": "271120"
  },
  {
    "text": "sound trivial but here's a practical",
    "start": "271120",
    "end": "272919"
  },
  {
    "text": "example let's imagine we're building a",
    "start": "272919",
    "end": "274560"
  },
  {
    "text": "crossplatform app that runs on both IOS",
    "start": "274560",
    "end": "276840"
  },
  {
    "text": "and Android they both have the same",
    "start": "276840",
    "end": "278479"
  },
  {
    "text": "interface but in our code we're doing a",
    "start": "278479",
    "end": "280479"
  },
  {
    "text": "bunch of conditional checking to",
    "start": "280479",
    "end": "281880"
  },
  {
    "text": "determine which button to show that's",
    "start": "281880",
    "end": "283639"
  },
  {
    "text": "not very maintainable instead we can",
    "start": "283639",
    "end": "285400"
  },
  {
    "text": "create a subass or function that will",
    "start": "285400",
    "end": "287600"
  },
  {
    "text": "determine which object to instantiate",
    "start": "287600",
    "end": "289560"
  },
  {
    "text": "now instead of repeating the same logic",
    "start": "289560",
    "end": "291160"
  },
  {
    "text": "we use the factory to determine which",
    "start": "291160",
    "end": "292880"
  },
  {
    "text": "button should be rendered now we're",
    "start": "292880",
    "end": "294400"
  },
  {
    "start": "294000",
    "end": "347000"
  },
  {
    "text": "ready to look at the first structural",
    "start": "294400",
    "end": "295800"
  },
  {
    "text": "pattern facade a facade is the face of a",
    "start": "295800",
    "end": "298479"
  },
  {
    "text": "building inside that building there's",
    "start": "298479",
    "end": "300199"
  },
  {
    "text": "all kinds of shenanigans corruption and",
    "start": "300199",
    "end": "302320"
  },
  {
    "text": "complexity that the end user doesn't",
    "start": "302320",
    "end": "304080"
  },
  {
    "text": "need to know about a facade is basically",
    "start": "304080",
    "end": "306400"
  },
  {
    "text": "just a simplified API to hide other",
    "start": "306400",
    "end": "308479"
  },
  {
    "text": "low-level details in your code base",
    "start": "308479",
    "end": "310520"
  },
  {
    "text": "let's imagine we have classes for the",
    "start": "310520",
    "end": "312160"
  },
  {
    "text": "plumbing system and electrical system",
    "start": "312160",
    "end": "314360"
  },
  {
    "text": "and inside of them we have all kinds of",
    "start": "314360",
    "end": "316120"
  },
  {
    "text": "complex stuff going on like pressure and",
    "start": "316120",
    "end": "318039"
  },
  {
    "text": "voltage the people living in the house",
    "start": "318039",
    "end": "319880"
  },
  {
    "text": "don't need access to these low-level",
    "start": "319880",
    "end": "321479"
  },
  {
    "text": "details so we create a facade class that",
    "start": "321479",
    "end": "324000"
  },
  {
    "text": "contains the low-l systems as",
    "start": "324000",
    "end": "325600"
  },
  {
    "text": "dependencies but then simplifies their",
    "start": "325600",
    "end": "327720"
  },
  {
    "text": "operation like we might combine all the",
    "start": "327720",
    "end": "329840"
  },
  {
    "text": "electrical and plumbing details into a",
    "start": "329840",
    "end": "331919"
  },
  {
    "text": "single method so the end user can simply",
    "start": "331919",
    "end": "334080"
  },
  {
    "text": "turn them on or off with a single method",
    "start": "334080",
    "end": "336479"
  },
  {
    "text": "almost every package that you install",
    "start": "336479",
    "end": "338000"
  },
  {
    "text": "with JavaScript could be considered a",
    "start": "338000",
    "end": "339720"
  },
  {
    "text": "facade in some way like jQuery is a",
    "start": "339720",
    "end": "341919"
  },
  {
    "text": "great example of a facade for the more",
    "start": "341919",
    "end": "343880"
  },
  {
    "text": "annoying low-level JavaScript features",
    "start": "343880",
    "end": "346000"
  },
  {
    "text": "the next structural pattern we'll look",
    "start": "346000",
    "end": "347440"
  },
  {
    "start": "347000",
    "end": "405000"
  },
  {
    "text": "at is proxy which is just a fancy word",
    "start": "347440",
    "end": "349880"
  },
  {
    "text": "for a substitute like in school you",
    "start": "349880",
    "end": "351639"
  },
  {
    "text": "might have a substitute teacher to",
    "start": "351639",
    "end": "353280"
  },
  {
    "text": "replace the real thing in programming",
    "start": "353280",
    "end": "355199"
  },
  {
    "text": "you can replace a Target object with a",
    "start": "355199",
    "end": "357280"
  },
  {
    "text": "proxy but why would you ever want to do",
    "start": "357280",
    "end": "359199"
  },
  {
    "text": "that well well a great case study is the",
    "start": "359199",
    "end": "361120"
  },
  {
    "text": "reactivity system in vue.js in view you",
    "start": "361120",
    "end": "363919"
  },
  {
    "text": "create data but the framework itself",
    "start": "363919",
    "end": "365639"
  },
  {
    "text": "needs a way to intercept that data and",
    "start": "365639",
    "end": "367720"
  },
  {
    "text": "update the UI whenever that data changes",
    "start": "367720",
    "end": "370160"
  },
  {
    "text": "the way view handles that is by",
    "start": "370160",
    "end": "371680"
  },
  {
    "text": "replacing the original object with a",
    "start": "371680",
    "end": "373520"
  },
  {
    "text": "proxy a proxy takes the original object",
    "start": "373520",
    "end": "375800"
  },
  {
    "text": "as the first argument then a Handler as",
    "start": "375800",
    "end": "377680"
  },
  {
    "text": "the second argument inside of which we",
    "start": "377680",
    "end": "379560"
  },
  {
    "text": "can override methods like get and set",
    "start": "379560",
    "end": "381840"
  },
  {
    "text": "which allows us to run code whenever a",
    "start": "381840",
    "end": "383639"
  },
  {
    "text": "property is accessed on the object or",
    "start": "383639",
    "end": "385520"
  },
  {
    "text": "changed for example inside of set we",
    "start": "385520",
    "end": "387720"
  },
  {
    "text": "might tell the framework to render use",
    "start": "387720",
    "end": "389880"
  },
  {
    "text": "reflect to update the data on the",
    "start": "389880",
    "end": "391599"
  },
  {
    "text": "original object the end user can now",
    "start": "391599",
    "end": "393560"
  },
  {
    "text": "work with the proxy just like the",
    "start": "393560",
    "end": "395000"
  },
  {
    "text": "original object but it can trigger the",
    "start": "395000",
    "end": "396919"
  },
  {
    "text": "side effects behind the scenes proxies",
    "start": "396919",
    "end": "398759"
  },
  {
    "text": "are also commonly used when you have a",
    "start": "398759",
    "end": "400479"
  },
  {
    "text": "very large object that would be",
    "start": "400479",
    "end": "401960"
  },
  {
    "text": "expensive to duplicate in memory and now",
    "start": "401960",
    "end": "404000"
  },
  {
    "text": "we're ready to look at some behavioral",
    "start": "404000",
    "end": "405680"
  },
  {
    "start": "405000",
    "end": "467000"
  },
  {
    "text": "patterns starting with iterator the",
    "start": "405680",
    "end": "407720"
  },
  {
    "text": "iterator pattern allows you to Traverse",
    "start": "407720",
    "end": "409960"
  },
  {
    "text": "through a collection of objects modern",
    "start": "409960",
    "end": "411800"
  },
  {
    "text": "languages already provide abstractions",
    "start": "411800",
    "end": "413639"
  },
  {
    "text": "for the iterator pattern like the for",
    "start": "413639",
    "end": "415599"
  },
  {
    "text": "Loop when you Loop over an array of",
    "start": "415599",
    "end": "416960"
  },
  {
    "text": "items you're using the iterator pattern",
    "start": "416960",
    "end": "419319"
  },
  {
    "text": "but one thing that really chaps my ass",
    "start": "419319",
    "end": "420879"
  },
  {
    "text": "about JavaScript is that there's no",
    "start": "420879",
    "end": "422560"
  },
  {
    "text": "built-in range function what I wish I",
    "start": "422560",
    "end": "424360"
  },
  {
    "text": "could do is easily iterate 10 times at a",
    "start": "424360",
    "end": "426919"
  },
  {
    "text": "certain interval we can actually do that",
    "start": "426919",
    "end": "428560"
  },
  {
    "text": "fairly easily by implementing our own",
    "start": "428560",
    "end": "430639"
  },
  {
    "text": "iterator pattern in JavaScript you can",
    "start": "430639",
    "end": "432759"
  },
  {
    "text": "do that by defining an object that has a",
    "start": "432759",
    "end": "435160"
  },
  {
    "text": "next method on it that function needs to",
    "start": "435160",
    "end": "437360"
  },
  {
    "text": "return an object that has a value which",
    "start": "437360",
    "end": "439759"
  },
  {
    "text": "would be the current value in the loop",
    "start": "439759",
    "end": "441520"
  },
  {
    "text": "and a done property so it knows when to",
    "start": "441520",
    "end": "443599"
  },
  {
    "text": "finish iterating in this case we will",
    "start": "443599",
    "end": "445479"
  },
  {
    "text": "keep moving on to the next step if the",
    "start": "445479",
    "end": "447479"
  },
  {
    "text": "start value is less than the end value",
    "start": "447479",
    "end": "449919"
  },
  {
    "text": "but for each iteration we will increment",
    "start": "449919",
    "end": "452080"
  },
  {
    "text": "the start value with a step eventually",
    "start": "452080",
    "end": "454319"
  },
  {
    "text": "the start will be greater than the end",
    "start": "454319",
    "end": "455759"
  },
  {
    "text": "at which point we can return an object",
    "start": "455759",
    "end": "457639"
  },
  {
    "text": "with the done property as true and that",
    "start": "457639",
    "end": "459800"
  },
  {
    "text": "tells JavaScript to stop iterating now a",
    "start": "459800",
    "end": "462280"
  },
  {
    "text": "cool technique here is that we can add",
    "start": "462280",
    "end": "464080"
  },
  {
    "text": "symbol iterator to this object which",
    "start": "464080",
    "end": "466080"
  },
  {
    "text": "allows us to use it in a regular four of",
    "start": "466080",
    "end": "468560"
  },
  {
    "start": "467000",
    "end": "538000"
  },
  {
    "text": "loop at the end of the day with",
    "start": "468560",
    "end": "470000"
  },
  {
    "text": "iteration you start with a collection",
    "start": "470000",
    "end": "472000"
  },
  {
    "text": "and then write some code that determines",
    "start": "472000",
    "end": "473680"
  },
  {
    "text": "how to get from the beginning to the end",
    "start": "473680",
    "end": "475720"
  },
  {
    "text": "it's a pole-based system unlike the next",
    "start": "475720",
    "end": "477720"
  },
  {
    "text": "pattern we'll look at Observer which is",
    "start": "477720",
    "end": "479800"
  },
  {
    "text": "a push based system The Observer pattern",
    "start": "479800",
    "end": "482039"
  },
  {
    "text": "allows many objects to subscribe to",
    "start": "482039",
    "end": "484159"
  },
  {
    "text": "events that are broadcast by another",
    "start": "484159",
    "end": "486199"
  },
  {
    "text": "object it's a on to many relationship in",
    "start": "486199",
    "end": "488560"
  },
  {
    "text": "the real world you might have a radio",
    "start": "488560",
    "end": "490199"
  },
  {
    "text": "tower that sends out a signal then a",
    "start": "490199",
    "end": "492199"
  },
  {
    "text": "bunch of receivers who listen in at the",
    "start": "492199",
    "end": "494039"
  },
  {
    "text": "same time this pattern is used all over",
    "start": "494039",
    "end": "495800"
  },
  {
    "text": "the place in app development like in",
    "start": "495800",
    "end": "497400"
  },
  {
    "text": "Firebase when your data changes on the",
    "start": "497400",
    "end": "499159"
  },
  {
    "text": "server all your client apps are",
    "start": "499159",
    "end": "500720"
  },
  {
    "text": "subscribed to it and automatically",
    "start": "500720",
    "end": "502440"
  },
  {
    "text": "updated with the latest data in our code",
    "start": "502440",
    "end": "504400"
  },
  {
    "text": "here I'm going to bring in the rxjs",
    "start": "504400",
    "end": "506280"
  },
  {
    "text": "library to simplify the demonstration of",
    "start": "506280",
    "end": "508319"
  },
  {
    "text": "this pattern it provides a subject class",
    "start": "508319",
    "end": "510599"
  },
  {
    "text": "which is the data that we want to listen",
    "start": "510599",
    "end": "512200"
  },
  {
    "text": "to now once we have a subject we can add",
    "start": "512200",
    "end": "514279"
  },
  {
    "text": "multiple subscriptions to it the subject",
    "start": "514279",
    "end": "516399"
  },
  {
    "text": "will keep track of all these",
    "start": "516399",
    "end": "517479"
  },
  {
    "text": "subscriptions and call their callback",
    "start": "517479",
    "end": "519479"
  },
  {
    "text": "functions whenever the data changes",
    "start": "519479",
    "end": "521680"
  },
  {
    "text": "experiment with this pattern right now",
    "start": "521680",
    "end": "523200"
  },
  {
    "text": "by clicking like And subscribe on this",
    "start": "523200",
    "end": "524920"
  },
  {
    "text": "video now at some later point we can",
    "start": "524920",
    "end": "526720"
  },
  {
    "text": "call the next method to push a new value",
    "start": "526720",
    "end": "529080"
  },
  {
    "text": "to the subject whenever that happens",
    "start": "529080",
    "end": "531000"
  },
  {
    "text": "every subscription will be notified",
    "start": "531000",
    "end": "532680"
  },
  {
    "text": "personally I like to think of this as a",
    "start": "532680",
    "end": "534440"
  },
  {
    "text": "loop that unfolds over the dimension of",
    "start": "534440",
    "end": "536399"
  },
  {
    "text": "time but now let's move on to the",
    "start": "536399",
    "end": "538560"
  },
  {
    "start": "538000",
    "end": "590000"
  },
  {
    "text": "mediator pattern a mediator is like a",
    "start": "538560",
    "end": "540800"
  },
  {
    "text": "middleman or broker imagine we have a",
    "start": "540800",
    "end": "542880"
  },
  {
    "text": "class for airplane and Runway we might",
    "start": "542880",
    "end": "545160"
  },
  {
    "text": "have multiple runways and multiple",
    "start": "545160",
    "end": "546839"
  },
  {
    "text": "airplanes and somehow we need to figure",
    "start": "546839",
    "end": "548720"
  },
  {
    "text": "out if an airplane is clear to land on a",
    "start": "548720",
    "end": "550920"
  },
  {
    "text": "given Runway currently to do that all",
    "start": "550920",
    "end": "553040"
  },
  {
    "text": "these objects would have to communicate",
    "start": "553040",
    "end": "554720"
  },
  {
    "text": "with each other we have a many to many",
    "start": "554720",
    "end": "556640"
  },
  {
    "text": "relationship that's very dangerous both",
    "start": "556640",
    "end": "558560"
  },
  {
    "text": "in real life and in programming a",
    "start": "558560",
    "end": "560440"
  },
  {
    "text": "solution is to create a mediator like an",
    "start": "560440",
    "end": "562720"
  },
  {
    "text": "air traffic controller that sits between",
    "start": "562720",
    "end": "564800"
  },
  {
    "text": "the runways and the airplanes to provide",
    "start": "564800",
    "end": "566959"
  },
  {
    "text": "coordination and communication here's a",
    "start": "566959",
    "end": "568959"
  },
  {
    "text": "more prac iCal example in the expressjs",
    "start": "568959",
    "end": "571120"
  },
  {
    "text": "web framework there is a middleware",
    "start": "571120",
    "end": "572880"
  },
  {
    "text": "system you have incoming requests and",
    "start": "572880",
    "end": "574880"
  },
  {
    "text": "outgoing responses middleware sits in",
    "start": "574880",
    "end": "576920"
  },
  {
    "text": "the middle by intercepting every request",
    "start": "576920",
    "end": "579120"
  },
  {
    "text": "like an airplane and transforms it into",
    "start": "579120",
    "end": "581120"
  },
  {
    "text": "the proper format for the response the",
    "start": "581120",
    "end": "583160"
  },
  {
    "text": "runway it provides a separation of",
    "start": "583160",
    "end": "584959"
  },
  {
    "text": "concerns and eliminates code duplication",
    "start": "584959",
    "end": "587320"
  },
  {
    "text": "and that brings us to our 10th and final",
    "start": "587320",
    "end": "589160"
  },
  {
    "text": "design pattern state where an object",
    "start": "589160",
    "end": "591120"
  },
  {
    "start": "590000",
    "end": "664000"
  },
  {
    "text": "behaves differently based on a finite",
    "start": "591120",
    "end": "593000"
  },
  {
    "text": "number of states in your code you've",
    "start": "593000",
    "end": "594880"
  },
  {
    "text": "likely Ed conditional logic or switch",
    "start": "594880",
    "end": "596880"
  },
  {
    "text": "statements to handle a bunch of",
    "start": "596880",
    "end": "598640"
  },
  {
    "text": "different possibili ities based on the",
    "start": "598640",
    "end": "600480"
  },
  {
    "text": "state or data in your application code",
    "start": "600480",
    "end": "602800"
  },
  {
    "text": "like this generally doesn't scale very",
    "start": "602800",
    "end": "604360"
  },
  {
    "text": "well the state pattern allows you to",
    "start": "604360",
    "end": "606320"
  },
  {
    "text": "start with one base class then provide",
    "start": "606320",
    "end": "608399"
  },
  {
    "text": "it with different functionality based on",
    "start": "608399",
    "end": "610399"
  },
  {
    "text": "its internal State the idea is related",
    "start": "610399",
    "end": "612560"
  },
  {
    "text": "to finite State machines in libraries",
    "start": "612560",
    "end": "614560"
  },
  {
    "text": "like xstate where the goal is to make an",
    "start": "614560",
    "end": "616560"
  },
  {
    "text": "object's Behavior predictable based on",
    "start": "616560",
    "end": "618480"
  },
  {
    "text": "its underlying state in this example we",
    "start": "618480",
    "end": "620560"
  },
  {
    "text": "have a human class that will think",
    "start": "620560",
    "end": "622279"
  },
  {
    "text": "something different based on its mood",
    "start": "622279",
    "end": "624240"
  },
  {
    "text": "currently we're doing that with a switch",
    "start": "624240",
    "end": "625959"
  },
  {
    "text": "statement but another way to go about it",
    "start": "625959",
    "end": "627760"
  },
  {
    "text": "would be to create a separate class",
    "start": "627760",
    "end": "629320"
  },
  {
    "text": "class for each possible State inside",
    "start": "629320",
    "end": "631519"
  },
  {
    "text": "each class we will have an identical",
    "start": "631519",
    "end": "633360"
  },
  {
    "text": "method that behaves differently now in",
    "start": "633360",
    "end": "635480"
  },
  {
    "text": "the human class we set the state as a",
    "start": "635480",
    "end": "637639"
  },
  {
    "text": "property and whenever that method is",
    "start": "637639",
    "end": "639120"
  },
  {
    "text": "called we delegate it to its current",
    "start": "639120",
    "end": "641160"
  },
  {
    "text": "state that means whenever the state",
    "start": "641160",
    "end": "642519"
  },
  {
    "text": "changes the object will behave in a",
    "start": "642519",
    "end": "644560"
  },
  {
    "text": "completely different way but at the same",
    "start": "644560",
    "end": "646399"
  },
  {
    "text": "time we don't have to change the API or",
    "start": "646399",
    "end": "648560"
  },
  {
    "text": "use a bunch of conditional logic I'm",
    "start": "648560",
    "end": "650279"
  },
  {
    "text": "going to keep things simple and wrap it",
    "start": "650279",
    "end": "651839"
  },
  {
    "text": "up there but remember there are a bunch",
    "start": "651839",
    "end": "653800"
  },
  {
    "text": "of other designed patterns out there to",
    "start": "653800",
    "end": "655320"
  },
  {
    "text": "learn become a PR member at fireship iio",
    "start": "655320",
    "end": "657880"
  },
  {
    "text": "to learn how to apply patterns like this",
    "start": "657880",
    "end": "659760"
  },
  {
    "text": "in real applications thanks for watching",
    "start": "659760",
    "end": "662000"
  },
  {
    "text": "and I will see you in the next one",
    "start": "662000",
    "end": "665720"
  }
]