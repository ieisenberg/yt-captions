[
  {
    "start": "0",
    "end": "85000"
  },
  {
    "text": "today on how they do it JavaScript today",
    "start": "30",
    "end": "2970"
  },
  {
    "text": "we'll look at the computer science",
    "start": "2970",
    "end": "4200"
  },
  {
    "text": "behind it so by the end of this video",
    "start": "4200",
    "end": "5700"
  },
  {
    "text": "you should understand what a high-level",
    "start": "5700",
    "end": "7230"
  },
  {
    "text": "single-threaded garbage-collected",
    "start": "7230",
    "end": "8370"
  },
  {
    "text": "interpreted or just-in-time compiled",
    "start": "8370",
    "end": "10200"
  },
  {
    "text": "prototype-based multi-paradigm dynamic",
    "start": "10200",
    "end": "12150"
  },
  {
    "text": "language with a non-blocking event loop",
    "start": "12150",
    "end": "13679"
  },
  {
    "text": "concurrency model really means if you're",
    "start": "13679",
    "end": "22109"
  },
  {
    "text": "new you're like and subscribe because",
    "start": "22109",
    "end": "23369"
  },
  {
    "text": "this is part 2 of the full javascript",
    "start": "23369",
    "end": "25140"
  },
  {
    "text": "course on fire ship i/o last week we",
    "start": "25140",
    "end": "27210"
  },
  {
    "text": "learn that javascript is a programming",
    "start": "27210",
    "end": "28260"
  },
  {
    "text": "language based on the ECMO 262 spec but",
    "start": "28260",
    "end": "31080"
  },
  {
    "text": "in order to really understand how it",
    "start": "31080",
    "end": "32279"
  },
  {
    "text": "works in a computer system we need to go",
    "start": "32279",
    "end": "34020"
  },
  {
    "text": "to the very bottom of the stack and by",
    "start": "34020",
    "end": "35489"
  },
  {
    "text": "that I mean the bare metal CPU and",
    "start": "35489",
    "end": "37170"
  },
  {
    "text": "memory on a machine this is a riddle",
    "start": "37170",
    "end": "38940"
  },
  {
    "text": "computer on hearing Ishida the tips that",
    "start": "38940",
    "end": "41969"
  },
  {
    "text": "make the computer work when you run a",
    "start": "41969",
    "end": "44010"
  },
  {
    "text": "JavaScript program whether that be a web",
    "start": "44010",
    "end": "45719"
  },
  {
    "text": "application in the browser or something",
    "start": "45719",
    "end": "47489"
  },
  {
    "text": "server side with nodejs it needs to",
    "start": "47489",
    "end": "49469"
  },
  {
    "text": "allocate memory on your RAM to store",
    "start": "49469",
    "end": "51300"
  },
  {
    "text": "things for the runtime and for variables",
    "start": "51300",
    "end": "53460"
  },
  {
    "text": "and objects that you reference in your",
    "start": "53460",
    "end": "54930"
  },
  {
    "text": "code then it also needs a thread from",
    "start": "54930",
    "end": "57090"
  },
  {
    "text": "your CPU to actually execute the",
    "start": "57090",
    "end": "59160"
  },
  {
    "text": "instructions in your code but here's the",
    "start": "59160",
    "end": "61260"
  },
  {
    "text": "thing as a JavaScript developer you",
    "start": "61260",
    "end": "63000"
  },
  {
    "text": "never really have to think about this",
    "start": "63000",
    "end": "64350"
  },
  {
    "text": "stuff because it's a high-level",
    "start": "64350",
    "end": "65460"
  },
  {
    "text": "programming language but what do we",
    "start": "65460",
    "end": "67380"
  },
  {
    "text": "really mean when we say high-level we're",
    "start": "67380",
    "end": "69210"
  },
  {
    "text": "talking about the degree of abstraction",
    "start": "69210",
    "end": "70650"
  },
  {
    "text": "or simplification that the language",
    "start": "70650",
    "end": "72479"
  },
  {
    "text": "provides over the computer's hardware",
    "start": "72479",
    "end": "74040"
  },
  {
    "text": "the lowest level language is machine",
    "start": "74040",
    "end": "76409"
  },
  {
    "text": "code",
    "start": "76409",
    "end": "76830"
  },
  {
    "text": "it's a numeric language that can be",
    "start": "76830",
    "end": "78150"
  },
  {
    "text": "executed directly by the CPU but it",
    "start": "78150",
    "end": "80130"
  },
  {
    "text": "would be extremely difficult to build a",
    "start": "80130",
    "end": "81659"
  },
  {
    "text": "website with it because you would have",
    "start": "81659",
    "end": "82920"
  },
  {
    "text": "to memorize a number for every single",
    "start": "82920",
    "end": "84509"
  },
  {
    "text": "instruction that you want to run if we",
    "start": "84509",
    "end": "86340"
  },
  {
    "start": "85000",
    "end": "310000"
  },
  {
    "text": "go up one level to assembly we get some",
    "start": "86340",
    "end": "88200"
  },
  {
    "text": "syntactic sugar but each assembly",
    "start": "88200",
    "end": "89729"
  },
  {
    "text": "language is specific to a particular CPU",
    "start": "89729",
    "end": "91770"
  },
  {
    "text": "or operating system so we can move up",
    "start": "91770",
    "end": "93960"
  },
  {
    "text": "another level to the C language which",
    "start": "93960",
    "end": "96000"
  },
  {
    "text": "provides a modern syntax and the ability",
    "start": "96000",
    "end": "97920"
  },
  {
    "text": "to write cross-platform programs but the",
    "start": "97920",
    "end": "100049"
  },
  {
    "text": "developers still has to be concerned",
    "start": "100049",
    "end": "101250"
  },
  {
    "text": "with low-level issues like memory",
    "start": "101250",
    "end": "102780"
  },
  {
    "text": "allocation if we go one more step higher",
    "start": "102780",
    "end": "105000"
  },
  {
    "text": "we reach the level of languages like",
    "start": "105000",
    "end": "106680"
  },
  {
    "text": "JavaScript and Python that use",
    "start": "106680",
    "end": "108210"
  },
  {
    "text": "abstractions like garbage collectors and",
    "start": "108210",
    "end": "110100"
  },
  {
    "text": "dynamic typing to simplify the way",
    "start": "110100",
    "end": "111840"
  },
  {
    "text": "developers write their applications so",
    "start": "111840",
    "end": "114090"
  },
  {
    "text": "now that we're at this high level let's",
    "start": "114090",
    "end": "115560"
  },
  {
    "text": "go ahead and unpack a few of the key",
    "start": "115560",
    "end": "117119"
  },
  {
    "text": "terms related to JavaScript now there",
    "start": "117119",
    "end": "119159"
  },
  {
    "text": "are two fundamental ways that we can",
    "start": "119159",
    "end": "120420"
  },
  {
    "text": "translate the code written in a",
    "start": "120420",
    "end": "121649"
  },
  {
    "text": "programming language to something that",
    "start": "121649",
    "end": "123119"
  },
  {
    "text": "the CPU can actually execute one of them",
    "start": "123119",
    "end": "125520"
  },
  {
    "text": "is called an interpreter and the other",
    "start": "125520",
    "end": "127920"
  },
  {
    "text": "is called a compiler javascript is an",
    "start": "127920",
    "end": "131160"
  },
  {
    "text": "interpreted language which means that it",
    "start": "131160",
    "end": "132930"
  },
  {
    "text": "needs to have an",
    "start": "132930",
    "end": "133920"
  },
  {
    "text": "in the environment to read the actual",
    "start": "133920",
    "end": "135810"
  },
  {
    "text": "source code and executed we can",
    "start": "135810",
    "end": "138030"
  },
  {
    "text": "demonstrate this by simply going into",
    "start": "138030",
    "end": "139620"
  },
  {
    "text": "the browser and running some JavaScript",
    "start": "139620",
    "end": "141390"
  },
  {
    "text": "code from the console now notice how the",
    "start": "141390",
    "end": "144090"
  },
  {
    "text": "interpreter works he stays with you all",
    "start": "144090",
    "end": "146940"
  },
  {
    "text": "the time",
    "start": "146940",
    "end": "147510"
  },
  {
    "text": "and he translates each of your",
    "start": "147510",
    "end": "149700"
  },
  {
    "text": "instructions immediately one by one now",
    "start": "149700",
    "end": "153030"
  },
  {
    "text": "this differs from a compiled language",
    "start": "153030",
    "end": "154350"
  },
  {
    "text": "like Java or C which will statically",
    "start": "154350",
    "end": "156900"
  },
  {
    "text": "analyze all of your code in advance and",
    "start": "156900",
    "end": "158640"
  },
  {
    "text": "then compile it down to a binary that",
    "start": "158640",
    "end": "160590"
  },
  {
    "text": "you can actually run on the machine he",
    "start": "160590",
    "end": "162630"
  },
  {
    "text": "takes you a complete list of",
    "start": "162630",
    "end": "163860"
  },
  {
    "text": "instructions and without further ado",
    "start": "163860",
    "end": "165630"
  },
  {
    "text": "translates the whole lot he then hands",
    "start": "165630",
    "end": "168300"
  },
  {
    "text": "them back to you and goes away leaving",
    "start": "168300",
    "end": "170820"
  },
  {
    "text": "you all on your own javascript was never",
    "start": "170820",
    "end": "173190"
  },
  {
    "text": "designed to be a compiled language but",
    "start": "173190",
    "end": "175080"
  },
  {
    "text": "in a few minutes we'll see how modern",
    "start": "175080",
    "end": "176400"
  },
  {
    "text": "JavaScript engines can use features of a",
    "start": "176400",
    "end": "178260"
  },
  {
    "text": "compiler to squeeze out additional",
    "start": "178260",
    "end": "179640"
  },
  {
    "text": "performance from the language now",
    "start": "179640",
    "end": "181709"
  },
  {
    "text": "another thing you might hear is that",
    "start": "181709",
    "end": "182940"
  },
  {
    "text": "JavaScript is a dynamically typed",
    "start": "182940",
    "end": "184650"
  },
  {
    "text": "language which tends to be a common",
    "start": "184650",
    "end": "186510"
  },
  {
    "text": "characteristic with high-level",
    "start": "186510",
    "end": "187530"
  },
  {
    "text": "interpreted languages and that just",
    "start": "187530",
    "end": "189600"
  },
  {
    "text": "means that we don't use any explicit",
    "start": "189600",
    "end": "190980"
  },
  {
    "text": "type definitions in vanilla JavaScript",
    "start": "190980",
    "end": "192690"
  },
  {
    "text": "code we can look at this by comparing",
    "start": "192690",
    "end": "194910"
  },
  {
    "text": "some statically typed dart code to some",
    "start": "194910",
    "end": "196800"
  },
  {
    "text": "dynamically typed JavaScript in the dart",
    "start": "196800",
    "end": "198720"
  },
  {
    "text": "code you'll notice that we're annotating",
    "start": "198720",
    "end": "200100"
  },
  {
    "text": "things like integers and strings but the",
    "start": "200100",
    "end": "202320"
  },
  {
    "text": "jas types are unknown or implicit and",
    "start": "202320",
    "end": "204690"
  },
  {
    "text": "that's because the type is associated",
    "start": "204690",
    "end": "206070"
  },
  {
    "text": "with a runtime value and not the actual",
    "start": "206070",
    "end": "208019"
  },
  {
    "text": "variables or functions in your code now",
    "start": "208019",
    "end": "210480"
  },
  {
    "text": "you might also hear that javascript is a",
    "start": "210480",
    "end": "212220"
  },
  {
    "text": "multi-paradigm language the vast",
    "start": "212220",
    "end": "214230"
  },
  {
    "text": "majority of general-purpose programming",
    "start": "214230",
    "end": "215640"
  },
  {
    "text": "languages are multi-paradigm allowing",
    "start": "215640",
    "end": "217799"
  },
  {
    "text": "you to combine styles from declarative",
    "start": "217799",
    "end": "219540"
  },
  {
    "text": "functional approaches or imperative",
    "start": "219540",
    "end": "221310"
  },
  {
    "text": "object-oriented approaches now one of",
    "start": "221310",
    "end": "223680"
  },
  {
    "text": "the weirder things that you'll hear is",
    "start": "223680",
    "end": "225030"
  },
  {
    "text": "that javascript is based on prototypal",
    "start": "225030",
    "end": "226980"
  },
  {
    "text": "inheritance this course will have an",
    "start": "226980",
    "end": "228630"
  },
  {
    "text": "entire video dedicated just to this",
    "start": "228630",
    "end": "230220"
  },
  {
    "text": "topic but the general idea is that",
    "start": "230220",
    "end": "231870"
  },
  {
    "text": "everything in JavaScript is an object",
    "start": "231870",
    "end": "233640"
  },
  {
    "text": "and each object holds a link to its",
    "start": "233640",
    "end": "235769"
  },
  {
    "text": "prototype and this creates a prototype",
    "start": "235769",
    "end": "237660"
  },
  {
    "text": "chain where objects can inherit",
    "start": "237660",
    "end": "238769"
  },
  {
    "text": "behaviors from other objects this can be",
    "start": "238769",
    "end": "241230"
  },
  {
    "text": "a weird thing to get used to if you're",
    "start": "241230",
    "end": "242640"
  },
  {
    "text": "familiar with class-based inheritance",
    "start": "242640",
    "end": "244140"
  },
  {
    "text": "but it's one of the low-level concepts",
    "start": "244140",
    "end": "245820"
  },
  {
    "text": "that makes JavaScript a very flexible",
    "start": "245820",
    "end": "247260"
  },
  {
    "text": "multi-paradigm language now let's take a",
    "start": "247260",
    "end": "249930"
  },
  {
    "text": "second to recap we know that javascript",
    "start": "249930",
    "end": "251970"
  },
  {
    "text": "is a high-level interpreted dynamically",
    "start": "251970",
    "end": "253739"
  },
  {
    "text": "typed multi-paradigm prototype based",
    "start": "253739",
    "end": "255180"
  },
  {
    "text": "language but it's also a single threaded",
    "start": "255180",
    "end": "257190"
  },
  {
    "text": "garbage collected non-blocking language",
    "start": "257190",
    "end": "258840"
  },
  {
    "text": "with an event loop that can be",
    "start": "258840",
    "end": "259890"
  },
  {
    "text": "just-in-time compiled the first set of",
    "start": "259890",
    "end": "261750"
  },
  {
    "text": "definitions are mostly related to how",
    "start": "261750",
    "end": "263729"
  },
  {
    "text": "javascript is laid out in ECMO - 6 - but",
    "start": "263729",
    "end": "266580"
  },
  {
    "text": "it doesn't specify how the",
    "start": "266580",
    "end": "267840"
  },
  {
    "text": "should be implemented how to manage",
    "start": "267840",
    "end": "269520"
  },
  {
    "text": "memory and it doesn't even mention the",
    "start": "269520",
    "end": "271110"
  },
  {
    "text": "event loop in the entire 800 page",
    "start": "271110",
    "end": "272880"
  },
  {
    "text": "document",
    "start": "272880",
    "end": "273570"
  },
  {
    "text": "so that means it's up to the browser",
    "start": "273570",
    "end": "274919"
  },
  {
    "text": "vendors to handle these implementation",
    "start": "274919",
    "end": "276630"
  },
  {
    "text": "details and two of the most popular",
    "start": "276630",
    "end": "278190"
  },
  {
    "text": "implementations are spider monkey from",
    "start": "278190",
    "end": "280230"
  },
  {
    "text": "Mozilla and v8 from Google the way they",
    "start": "280230",
    "end": "282780"
  },
  {
    "text": "work is slightly different but they both",
    "start": "282780",
    "end": "284220"
  },
  {
    "text": "do a thing called just-in-time",
    "start": "284220",
    "end": "285540"
  },
  {
    "text": "compilation in the case of v8 it will",
    "start": "285540",
    "end": "287880"
  },
  {
    "text": "compile all of your JavaScript down to",
    "start": "287880",
    "end": "289650"
  },
  {
    "text": "native machine code before running it as",
    "start": "289650",
    "end": "291389"
  },
  {
    "text": "opposed to interpreting bytecode line by",
    "start": "291389",
    "end": "293370"
  },
  {
    "text": "line like a normal interpreter anyone up",
    "start": "293370",
    "end": "295800"
  },
  {
    "text": "there",
    "start": "295800",
    "end": "296450"
  },
  {
    "text": "fans anybody",
    "start": "296450",
    "end": "298900"
  },
  {
    "text": "[Music]",
    "start": "298900",
    "end": "301919"
  },
  {
    "text": "so these JavaScript engines don't",
    "start": "301919",
    "end": "304120"
  },
  {
    "text": "fundamentally change the way developers",
    "start": "304120",
    "end": "305500"
  },
  {
    "text": "write their code but the JIT compiler",
    "start": "305500",
    "end": "307150"
  },
  {
    "text": "helps improve performance and browsers",
    "start": "307150",
    "end": "308590"
  },
  {
    "text": "and on node but here's the thing",
    "start": "308590",
    "end": "310479"
  },
  {
    "start": "310000",
    "end": "653000"
  },
  {
    "text": "javascript is a single threaded language",
    "start": "310479",
    "end": "312520"
  },
  {
    "text": "so it can only do one computation at a",
    "start": "312520",
    "end": "314470"
  },
  {
    "text": "time",
    "start": "314470",
    "end": "314979"
  },
  {
    "text": "what I want you to do right now in this",
    "start": "314979",
    "end": "316389"
  },
  {
    "text": "browser tab is open up the console with",
    "start": "316389",
    "end": "318699"
  },
  {
    "text": "ctrl shift j and then create a while",
    "start": "318699",
    "end": "320710"
  },
  {
    "text": "loop that never ends you'll notice that",
    "start": "320710",
    "end": "322539"
  },
  {
    "text": "nothing works in this browser tab now if",
    "start": "322539",
    "end": "324310"
  },
  {
    "text": "you try to click on something it will",
    "start": "324310",
    "end": "325780"
  },
  {
    "text": "never capture that event because the",
    "start": "325780",
    "end": "327669"
  },
  {
    "text": "single thread is stuck in that while",
    "start": "327669",
    "end": "329050"
  },
  {
    "text": "loop and it can't move on to the next",
    "start": "329050",
    "end": "330490"
  },
  {
    "text": "event",
    "start": "330490",
    "end": "330970"
  },
  {
    "text": "go into the chrome task manager and you",
    "start": "330970",
    "end": "333100"
  },
  {
    "text": "should see that browser tab using close",
    "start": "333100",
    "end": "334690"
  },
  {
    "text": "to 100% of that CPU cores resources go",
    "start": "334690",
    "end": "337600"
  },
  {
    "text": "ahead and end the process refresh the",
    "start": "337600",
    "end": "339250"
  },
  {
    "text": "tab and then meet me back here to learn",
    "start": "339250",
    "end": "340900"
  },
  {
    "text": "more about why that happened when",
    "start": "340900",
    "end": "342820"
  },
  {
    "text": "executing your JavaScript code to",
    "start": "342820",
    "end": "344560"
  },
  {
    "text": "regions of memory are allocated on the",
    "start": "344560",
    "end": "346270"
  },
  {
    "text": "machine the call stack and the heap the",
    "start": "346270",
    "end": "348550"
  },
  {
    "text": "call stack is designed to be a high",
    "start": "348550",
    "end": "350080"
  },
  {
    "text": "performance continuous region of memory",
    "start": "350080",
    "end": "351789"
  },
  {
    "text": "used to execute your functions when you",
    "start": "351789",
    "end": "353919"
  },
  {
    "text": "call a function it creates a frame and",
    "start": "353919",
    "end": "355810"
  },
  {
    "text": "the call stack that contains a copy of",
    "start": "355810",
    "end": "357669"
  },
  {
    "text": "its local variables if you call a",
    "start": "357669",
    "end": "359680"
  },
  {
    "text": "function within a function it will add",
    "start": "359680",
    "end": "361419"
  },
  {
    "text": "another frame to the stack but if you",
    "start": "361419",
    "end": "363280"
  },
  {
    "text": "return from a function it will pop that",
    "start": "363280",
    "end": "365020"
  },
  {
    "text": "frame off the stack I think the best way",
    "start": "365020",
    "end": "367150"
  },
  {
    "text": "to understand the call stack is to go",
    "start": "367150",
    "end": "368800"
  },
  {
    "text": "through some of your own code",
    "start": "368800",
    "end": "369760"
  },
  {
    "text": "frame-by-frame you can go into these",
    "start": "369760",
    "end": "371650"
  },
  {
    "text": "sources tab in chrome dev tools and",
    "start": "371650",
    "end": "373210"
  },
  {
    "text": "pause the execution of a script and then",
    "start": "373210",
    "end": "375490"
  },
  {
    "text": "you can follow the call stack step by",
    "start": "375490",
    "end": "376900"
  },
  {
    "text": "step if you look down here at the bottom",
    "start": "376900",
    "end": "378699"
  },
  {
    "text": "you can see we're calling this function",
    "start": "378699",
    "end": "379810"
  },
  {
    "text": "called current status when we call that",
    "start": "379810",
    "end": "382060"
  },
  {
    "text": "function it then moves us up to the",
    "start": "382060",
    "end": "383680"
  },
  {
    "text": "function body that first starts with a",
    "start": "383680",
    "end": "385449"
  },
  {
    "text": "console log a console log is a",
    "start": "385449",
    "end": "387610"
  },
  {
    "text": "one-and-done operation so it gets pushed",
    "start": "387610",
    "end": "389590"
  },
  {
    "text": "onto the stack and then executed and",
    "start": "389590",
    "end": "391630"
  },
  {
    "text": "immediately popped off the stack but",
    "start": "391630",
    "end": "393610"
  },
  {
    "text": "then if we go to the next line you can",
    "start": "393610",
    "end": "395080"
  },
  {
    "text": "see it returns a function that also",
    "start": "395080",
    "end": "396880"
  },
  {
    "text": "calls a function for its argument so the",
    "start": "396880",
    "end": "399130"
  },
  {
    "text": "next step is to call that happy function",
    "start": "399130",
    "end": "401199"
  },
  {
    "text": "for the argument and you can see it gets",
    "start": "401199",
    "end": "402970"
  },
  {
    "text": "pushed on to the call stack here and",
    "start": "402970",
    "end": "404620"
  },
  {
    "text": "this happy function has its own local",
    "start": "404620",
    "end": "406659"
  },
  {
    "text": "variable named foo which we can see on",
    "start": "406659",
    "end": "408370"
  },
  {
    "text": "the local scope for this frame in the",
    "start": "408370",
    "end": "410409"
  },
  {
    "text": "call stack and another nice thing is",
    "start": "410409",
    "end": "412300"
  },
  {
    "text": "that you can see that this context for",
    "start": "412300",
    "end": "414280"
  },
  {
    "text": "the function which in this case is the",
    "start": "414280",
    "end": "416020"
  },
  {
    "text": "window so the call stack will push as",
    "start": "416020",
    "end": "418000"
  },
  {
    "text": "many frames as it needs and then start",
    "start": "418000",
    "end": "419710"
  },
  {
    "text": "popping them off as they're executed on",
    "start": "419710",
    "end": "421510"
  },
  {
    "text": "the machine but what happens if we have",
    "start": "421510",
    "end": "423070"
  },
  {
    "text": "a situation where the call stack never",
    "start": "423070",
    "end": "424930"
  },
  {
    "text": "reaches a return statement for example a",
    "start": "424930",
    "end": "427060"
  },
  {
    "text": "recursive function in the stack overflow",
    "start": "427060",
    "end": "429130"
  },
  {
    "text": "function were incrementing a count for",
    "start": "429130",
    "end": "431229"
  },
  {
    "text": "every frame in the call stack now",
    "start": "431229",
    "end": "433000"
  },
  {
    "text": "eventually chrome will throw",
    "start": "433000",
    "end": "434260"
  },
  {
    "text": "a call stack size exceeded error but an",
    "start": "434260",
    "end": "436270"
  },
  {
    "text": "interesting thing to note here is that",
    "start": "436270",
    "end": "437620"
  },
  {
    "text": "each frame in the call stack will",
    "start": "437620",
    "end": "439240"
  },
  {
    "text": "contain a copy of the local count which",
    "start": "439240",
    "end": "441370"
  },
  {
    "text": "we can inspect by traversing through the",
    "start": "441370",
    "end": "442960"
  },
  {
    "text": "call stack but what happens when we run",
    "start": "442960",
    "end": "445090"
  },
  {
    "text": "into something a little more complex",
    "start": "445090",
    "end": "446530"
  },
  {
    "text": "like an object that might be referenced",
    "start": "446530",
    "end": "448600"
  },
  {
    "text": "by multiple function calls outside of",
    "start": "448600",
    "end": "450430"
  },
  {
    "text": "this local context that's when the heap",
    "start": "450430",
    "end": "452440"
  },
  {
    "text": "comes into play it's a mostly",
    "start": "452440",
    "end": "454090"
  },
  {
    "text": "unstructured memory pool where we store",
    "start": "454090",
    "end": "455980"
  },
  {
    "text": "things like objects or primitive values",
    "start": "455980",
    "end": "457960"
  },
  {
    "text": "inside of closures in this code example",
    "start": "457960",
    "end": "459970"
  },
  {
    "text": "we have an object called my counter and",
    "start": "459970",
    "end": "462100"
  },
  {
    "text": "then we're incrementing it with a",
    "start": "462100",
    "end": "463390"
  },
  {
    "text": "function call from there we'll go over",
    "start": "463390",
    "end": "464980"
  },
  {
    "text": "to the memory tab in chrome and take a",
    "start": "464980",
    "end": "466840"
  },
  {
    "text": "heap snapshot and then we can search for",
    "start": "466840",
    "end": "469180"
  },
  {
    "text": "that variable by name and see it in the",
    "start": "469180",
    "end": "470980"
  },
  {
    "text": "heap the special thing about the heap is",
    "start": "470980",
    "end": "472930"
  },
  {
    "text": "that it's garbage collected that means",
    "start": "472930",
    "end": "474610"
  },
  {
    "text": "that v8 or the j/s runtime will try to",
    "start": "474610",
    "end": "477010"
  },
  {
    "text": "clear up free memory when it's no longer",
    "start": "477010",
    "end": "478840"
  },
  {
    "text": "referenced in your code that doesn't",
    "start": "478840",
    "end": "480700"
  },
  {
    "text": "mean you don't need to worry about",
    "start": "480700",
    "end": "481840"
  },
  {
    "text": "memory but it just means that you don't",
    "start": "481840",
    "end": "483430"
  },
  {
    "text": "need to manually allocate and free up",
    "start": "483430",
    "end": "485620"
  },
  {
    "text": "memory like you would in a C language so",
    "start": "485620",
    "end": "488140"
  },
  {
    "text": "now that you know what the call stack",
    "start": "488140",
    "end": "489220"
  },
  {
    "text": "and the heap are all about",
    "start": "489220",
    "end": "490270"
  },
  {
    "text": "we can introduce the event loop now we",
    "start": "490270",
    "end": "492100"
  },
  {
    "text": "already saw how a simple while loop can",
    "start": "492100",
    "end": "493900"
  },
  {
    "text": "entirely break a single-threaded",
    "start": "493900",
    "end": "495040"
  },
  {
    "text": "language so that leads to the question",
    "start": "495040",
    "end": "496930"
  },
  {
    "text": "of how do we handle any kind of",
    "start": "496930",
    "end": "498490"
  },
  {
    "text": "long-running task the answer is the",
    "start": "498490",
    "end": "500320"
  },
  {
    "text": "event loop so let's go ahead and write",
    "start": "500320",
    "end": "501970"
  },
  {
    "text": "our own from scratch in the most basic",
    "start": "501970",
    "end": "503650"
  },
  {
    "text": "sense it's just a while loop that waits",
    "start": "503650",
    "end": "505450"
  },
  {
    "text": "for messages from a queue then processes",
    "start": "505450",
    "end": "507460"
  },
  {
    "text": "their synchronous instructions to",
    "start": "507460",
    "end": "508840"
  },
  {
    "text": "completion in the browser you're already",
    "start": "508840",
    "end": "510670"
  },
  {
    "text": "doing this all the time without even",
    "start": "510670",
    "end": "511960"
  },
  {
    "text": "thinking about it you might set up an",
    "start": "511960",
    "end": "513700"
  },
  {
    "text": "event listener for a button click when",
    "start": "513700",
    "end": "515590"
  },
  {
    "text": "the user clicks that button it sends a",
    "start": "515590",
    "end": "517270"
  },
  {
    "text": "message to the queue and then the",
    "start": "517270",
    "end": "519039"
  },
  {
    "text": "runtime will process whatever JavaScript",
    "start": "519040",
    "end": "520870"
  },
  {
    "text": "you defined as the callback for that",
    "start": "520870",
    "end": "522370"
  },
  {
    "text": "event and that's what makes javascript",
    "start": "522370",
    "end": "524229"
  },
  {
    "text": "non-blocking",
    "start": "524229",
    "end": "524920"
  },
  {
    "text": "because the only thing it ever does is",
    "start": "524920",
    "end": "526420"
  },
  {
    "text": "listen to events and handle callbacks so",
    "start": "526420",
    "end": "528640"
  },
  {
    "text": "it's never actually waiting for the",
    "start": "528640",
    "end": "530080"
  },
  {
    "text": "return value of a function the only",
    "start": "530080",
    "end": "531970"
  },
  {
    "text": "thing it's actually waiting for is the",
    "start": "531970",
    "end": "533410"
  },
  {
    "text": "CPU to process your synchronous code and",
    "start": "533410",
    "end": "535810"
  },
  {
    "text": "for most things that's on a scale of",
    "start": "535810",
    "end": "537370"
  },
  {
    "text": "microseconds now let's imagine the first",
    "start": "537370",
    "end": "539650"
  },
  {
    "text": "iteration of the event loop it will",
    "start": "539650",
    "end": "541510"
  },
  {
    "text": "first handle all of these synchronous",
    "start": "541510",
    "end": "543010"
  },
  {
    "text": "code in the script after it's done",
    "start": "543010",
    "end": "544630"
  },
  {
    "text": "running the synchronous code it checks",
    "start": "544630",
    "end": "546130"
  },
  {
    "text": "if there are any messages or callbacks",
    "start": "546130",
    "end": "547900"
  },
  {
    "text": "in the queue ready to be executed we can",
    "start": "547900",
    "end": "549880"
  },
  {
    "text": "demonstrate this behavior very simply by",
    "start": "549880",
    "end": "551560"
  },
  {
    "text": "adding a set timeout to the top of the",
    "start": "551560",
    "end": "553180"
  },
  {
    "text": "script for 0 seconds now you might",
    "start": "553180",
    "end": "555130"
  },
  {
    "text": "intuitively think that this timeout",
    "start": "555130",
    "end": "556510"
  },
  {
    "text": "should be executed first because it's at",
    "start": "556510",
    "end": "558190"
  },
  {
    "text": "the top of the file and it's a timeout",
    "start": "558190",
    "end": "559840"
  },
  {
    "text": "for 0 seconds but the event loop won't",
    "start": "559840",
    "end": "561880"
  },
  {
    "text": "actually get to it till it's done",
    "start": "561880",
    "end": "563080"
  },
  {
    "text": "running this first iteration of",
    "start": "563080",
    "end": "564430"
  },
  {
    "text": "synchronous code now what makes this so",
    "start": "564430",
    "end": "566380"
  },
  {
    "text": "special is that you can offload",
    "start": "566380",
    "end": "567910"
  },
  {
    "text": "long running jobs two completely",
    "start": "567910",
    "end": "569320"
  },
  {
    "text": "separate thread pools in the browser you",
    "start": "569320",
    "end": "571540"
  },
  {
    "text": "might make an HTTP call that takes a few",
    "start": "571540",
    "end": "573550"
  },
  {
    "text": "seconds to resolve or I know jsut might",
    "start": "573550",
    "end": "575830"
  },
  {
    "text": "need to interact with the file system",
    "start": "575830",
    "end": "577330"
  },
  {
    "text": "but you can do these things without",
    "start": "577330",
    "end": "578590"
  },
  {
    "text": "blocking the main JavaScript thread and",
    "start": "578590",
    "end": "580540"
  },
  {
    "text": "that's almost everything you need to",
    "start": "580540",
    "end": "582190"
  },
  {
    "text": "know about the event loop but javascript",
    "start": "582190",
    "end": "583960"
  },
  {
    "text": "had to go and make things a little more",
    "start": "583960",
    "end": "585370"
  },
  {
    "text": "weird with the introduction of promises",
    "start": "585370",
    "end": "587200"
  },
  {
    "text": "and the micro task queue if we go back",
    "start": "587200",
    "end": "589720"
  },
  {
    "text": "to our script and add a promise resolve",
    "start": "589720",
    "end": "591670"
  },
  {
    "text": "after the set timeout you would think",
    "start": "591670",
    "end": "593530"
  },
  {
    "text": "that we have two asynchronous operations",
    "start": "593530",
    "end": "595240"
  },
  {
    "text": "here with zero delay so the set timeout",
    "start": "595240",
    "end": "597310"
  },
  {
    "text": "would fire first and in the promised",
    "start": "597310",
    "end": "598780"
  },
  {
    "text": "second but there's actually this thing",
    "start": "598780",
    "end": "600250"
  },
  {
    "text": "called the micro task queue for promises",
    "start": "600250",
    "end": "602260"
  },
  {
    "text": "which has priority over the main task",
    "start": "602260",
    "end": "604390"
  },
  {
    "text": "queue used for Dom API s and set",
    "start": "604390",
    "end": "606460"
  },
  {
    "text": "timeouts and things like that that means",
    "start": "606460",
    "end": "608200"
  },
  {
    "text": "the handler for the promise will be",
    "start": "608200",
    "end": "609670"
  },
  {
    "text": "called back first in this case as the",
    "start": "609670",
    "end": "611650"
  },
  {
    "text": "event loop goes through an iteration it",
    "start": "611650",
    "end": "613180"
  },
  {
    "text": "will first handle the synchronous code",
    "start": "613180",
    "end": "614620"
  },
  {
    "text": "then it's going to go to the micro task",
    "start": "614620",
    "end": "616420"
  },
  {
    "text": "queue and handle any of the callbacks",
    "start": "616420",
    "end": "618130"
  },
  {
    "text": "that are ready from your promises and",
    "start": "618130",
    "end": "619750"
  },
  {
    "text": "lastly it will finish up by running the",
    "start": "619750",
    "end": "621730"
  },
  {
    "text": "callbacks that are ready from your set",
    "start": "621730",
    "end": "623230"
  },
  {
    "text": "timeouts or Dom API s and that's how",
    "start": "623230",
    "end": "626140"
  },
  {
    "text": "JavaScript works I guess if all this",
    "start": "626140",
    "end": "628120"
  },
  {
    "text": "sounded overwhelming to you don't worry",
    "start": "628120",
    "end": "629590"
  },
  {
    "text": "too much because you don't really need",
    "start": "629590",
    "end": "630850"
  },
  {
    "text": "to know any of it to start building",
    "start": "630850",
    "end": "632170"
  },
  {
    "text": "stuff with JavaScript in the upcoming",
    "start": "632170",
    "end": "634150"
  },
  {
    "text": "videos in this series we'll look at the",
    "start": "634150",
    "end": "635800"
  },
  {
    "text": "practical applications of JavaScript as",
    "start": "635800",
    "end": "637660"
  },
  {
    "text": "they relate to building real products so",
    "start": "637660",
    "end": "639820"
  },
  {
    "text": "make sure to subscribe and follow along",
    "start": "639820",
    "end": "641470"
  },
  {
    "text": "with the source code on by airship IO",
    "start": "641470",
    "end": "643000"
  },
  {
    "text": "thanks for watching and I will talk to",
    "start": "643000",
    "end": "645190"
  },
  {
    "text": "you soon",
    "start": "645190",
    "end": "647020"
  },
  {
    "text": "[Music]",
    "start": "647020",
    "end": "655179"
  }
]