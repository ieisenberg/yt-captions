[
  {
    "text": "[Music]",
    "start": "0",
    "end": "320"
  },
  {
    "text": "typescript validate your javascript",
    "start": "320",
    "end": "2080"
  },
  {
    "text": "ahead of time with static type checking",
    "start": "2080",
    "end": "4319"
  },
  {
    "text": "javascript is a dynamic language where",
    "start": "4319",
    "end": "6319"
  },
  {
    "text": "we can do all kinds of crazy things",
    "start": "6319",
    "end": "8080"
  },
  {
    "text": "like reference variables that don't",
    "start": "8080",
    "end": "9519"
  },
  {
    "text": "exist or work with objects of an unknown",
    "start": "9519",
    "end": "11759"
  },
  {
    "text": "shape the code is interpreted by a",
    "start": "11759",
    "end": "13200"
  },
  {
    "text": "browser",
    "start": "13200",
    "end": "13840"
  },
  {
    "text": "but if your code is broken you won't",
    "start": "13840",
    "end": "15360"
  },
  {
    "text": "catch it until runtime when the browser",
    "start": "15360",
    "end": "17199"
  },
  {
    "text": "rows an error",
    "start": "17199",
    "end": "18000"
  },
  {
    "text": "typescript prevents errors like this",
    "start": "18000",
    "end": "19520"
  },
  {
    "text": "from ever happening by extending",
    "start": "19520",
    "end": "21119"
  },
  {
    "text": "javascript with types",
    "start": "21119",
    "end": "22400"
  },
  {
    "text": "the language is a strict superset of",
    "start": "22400",
    "end": "24320"
  },
  {
    "text": "javascript which means when you open up",
    "start": "24320",
    "end": "26240"
  },
  {
    "text": "a ts file you can write plain javascript",
    "start": "26240",
    "end": "28480"
  },
  {
    "text": "with all of its extra features",
    "start": "28480",
    "end": "30000"
  },
  {
    "text": "being completely optional but notice in",
    "start": "30000",
    "end": "31760"
  },
  {
    "text": "the code here how the ide",
    "start": "31760",
    "end": "33360"
  },
  {
    "text": "is providing feedback about using a",
    "start": "33360",
    "end": "35200"
  },
  {
    "text": "variable that doesn't exist",
    "start": "35200",
    "end": "36719"
  },
  {
    "text": "instead of fixing this issue weeks later",
    "start": "36719",
    "end": "38399"
  },
  {
    "text": "in a stack trace after the company has",
    "start": "38399",
    "end": "40000"
  },
  {
    "text": "lost millions of dollars we can fix it",
    "start": "40000",
    "end": "41840"
  },
  {
    "text": "right here right now",
    "start": "41840",
    "end": "43200"
  },
  {
    "text": "the reason we get this instant feedback",
    "start": "43200",
    "end": "45039"
  },
  {
    "text": "is because typescript behaves like a",
    "start": "45039",
    "end": "46719"
  },
  {
    "text": "compiled language",
    "start": "46719",
    "end": "47840"
  },
  {
    "text": "where javascript is the compilation",
    "start": "47840",
    "end": "49680"
  },
  {
    "text": "target you can run the typescript",
    "start": "49680",
    "end": "51199"
  },
  {
    "text": "compiler",
    "start": "51199",
    "end": "52000"
  },
  {
    "text": "using the tsc command it will take the",
    "start": "52000",
    "end": "54000"
  },
  {
    "text": "ts file and transpile it into vanilla",
    "start": "54000",
    "end": "56480"
  },
  {
    "text": "javascript",
    "start": "56480",
    "end": "57120"
  },
  {
    "text": "and you can choose any flavor of",
    "start": "57120",
    "end": "58320"
  },
  {
    "text": "javascript you want if you need to",
    "start": "58320",
    "end": "59920"
  },
  {
    "text": "target ancient browsers",
    "start": "59920",
    "end": "61280"
  },
  {
    "text": "and that means you can use the latest",
    "start": "61280",
    "end": "62800"
  },
  {
    "text": "and greatest syntax features of",
    "start": "62800",
    "end": "64239"
  },
  {
    "text": "javascript without having to worry if",
    "start": "64239",
    "end": "66000"
  },
  {
    "text": "they'll be supported in an older",
    "start": "66000",
    "end": "67439"
  },
  {
    "text": "environment your typescript project will",
    "start": "67439",
    "end": "69360"
  },
  {
    "text": "likely have a ts config file",
    "start": "69360",
    "end": "71119"
  },
  {
    "text": "which provides an infinite number of",
    "start": "71119",
    "end": "72479"
  },
  {
    "text": "ways to customize the behavior of the",
    "start": "72479",
    "end": "74320"
  },
  {
    "text": "compiler",
    "start": "74320",
    "end": "75200"
  },
  {
    "text": "but the primary goal of typescript is to",
    "start": "75200",
    "end": "77119"
  },
  {
    "text": "enable static typing",
    "start": "77119",
    "end": "78479"
  },
  {
    "text": "one way it achieves that is by allowing",
    "start": "78479",
    "end": "80240"
  },
  {
    "text": "you to annotate your code with types",
    "start": "80240",
    "end": "82080"
  },
  {
    "text": "we can strongly type a variable using a",
    "start": "82080",
    "end": "84159"
  },
  {
    "text": "colon followed by its type like a string",
    "start": "84159",
    "end": "86720"
  },
  {
    "text": "boolean or number",
    "start": "86720",
    "end": "87759"
  },
  {
    "text": "that's known as an explicit type if we",
    "start": "87759",
    "end": "89920"
  },
  {
    "text": "then try to assign its value as the",
    "start": "89920",
    "end": "91600"
  },
  {
    "text": "wrong type we get an error",
    "start": "91600",
    "end": "93119"
  },
  {
    "text": "alternatively if we set an initial value",
    "start": "93119",
    "end": "95439"
  },
  {
    "text": "it will implicitly infer the type",
    "start": "95439",
    "end": "97200"
  },
  {
    "text": "however there may be cases where you",
    "start": "97200",
    "end": "98799"
  },
  {
    "text": "want to opt out of this behavior",
    "start": "98799",
    "end": "100400"
  },
  {
    "text": "in which case you can annotate with the",
    "start": "100400",
    "end": "102240"
  },
  {
    "text": "any type that allows you to loosely type",
    "start": "102240",
    "end": "104560"
  },
  {
    "text": "or opt out of type checking when working",
    "start": "104560",
    "end": "106720"
  },
  {
    "text": "with an array",
    "start": "106720",
    "end": "107520"
  },
  {
    "text": "use brackets to strongly type a list in",
    "start": "107520",
    "end": "110000"
  },
  {
    "text": "addition you can define your own custom",
    "start": "110000",
    "end": "111840"
  },
  {
    "text": "types and interfaces",
    "start": "111840",
    "end": "113280"
  },
  {
    "text": "which is especially powerful when",
    "start": "113280",
    "end": "114720"
  },
  {
    "text": "working with objects the car interface",
    "start": "114720",
    "end": "116719"
  },
  {
    "text": "here defines various types",
    "start": "116719",
    "end": "118320"
  },
  {
    "text": "of the properties on an object we can",
    "start": "118320",
    "end": "120240"
  },
  {
    "text": "then apply the interface to a plain",
    "start": "120240",
    "end": "121840"
  },
  {
    "text": "javascript object",
    "start": "121840",
    "end": "123040"
  },
  {
    "text": "the beauty of having strongly typed code",
    "start": "123040",
    "end": "125119"
  },
  {
    "text": "is that we get autocomplete everywhere",
    "start": "125119",
    "end": "126799"
  },
  {
    "text": "in our ide",
    "start": "126799",
    "end": "127680"
  },
  {
    "text": "we don't have to jump back and forth to",
    "start": "127680",
    "end": "129200"
  },
  {
    "text": "documentation or dig through stack",
    "start": "129200",
    "end": "131039"
  },
  {
    "text": "traces to figure out why our code's not",
    "start": "131039",
    "end": "132720"
  },
  {
    "text": "working",
    "start": "132720",
    "end": "133200"
  },
  {
    "text": "if you like typescript as much as i do",
    "start": "133200",
    "end": "134800"
  },
  {
    "text": "consider becoming a pro member at",
    "start": "134800",
    "end": "136480"
  },
  {
    "text": "fireship io for the next few days",
    "start": "136480",
    "end": "138319"
  },
  {
    "text": "everything will be 40 off including",
    "start": "138319",
    "end": "140239"
  },
  {
    "text": "lifetime memberships thanks for watching",
    "start": "140239",
    "end": "142080"
  },
  {
    "text": "and i will see you in the next one",
    "start": "142080",
    "end": "146400"
  }
]