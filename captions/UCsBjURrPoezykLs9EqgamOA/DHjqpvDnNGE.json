[
  {
    "text": "javascript a high level single threaded",
    "start": "2080",
    "end": "4400"
  },
  {
    "text": "garbage collected interpreted or just in",
    "start": "4400",
    "end": "6319"
  },
  {
    "text": "time compiled prototype-based",
    "start": "6319",
    "end": "7759"
  },
  {
    "text": "multi-paradigm dynamic language with a",
    "start": "7759",
    "end": "9679"
  },
  {
    "text": "non-blocking event loop made famous for",
    "start": "9679",
    "end": "11840"
  },
  {
    "text": "building websites it was created in 1995",
    "start": "11840",
    "end": "14719"
  },
  {
    "text": "in just one week by brendan ike with the",
    "start": "14719",
    "end": "16640"
  },
  {
    "text": "goal of adding an easy to learn",
    "start": "16640",
    "end": "18240"
  },
  {
    "text": "scripting language to the netscape",
    "start": "18240",
    "end": "19920"
  },
  {
    "text": "browser it was originally named mocha",
    "start": "19920",
    "end": "21920"
  },
  {
    "text": "but the genius marketing people of the",
    "start": "21920",
    "end": "23519"
  },
  {
    "text": "time wanted it to sound like that sexy",
    "start": "23519",
    "end": "25439"
  },
  {
    "text": "new java language today it's a fully",
    "start": "25439",
    "end": "27279"
  },
  {
    "text": "featured language that continues to",
    "start": "27279",
    "end": "28880"
  },
  {
    "text": "evolve through the ecmascript standard",
    "start": "28880",
    "end": "30720"
  },
  {
    "text": "it's most well known for building",
    "start": "30720",
    "end": "32320"
  },
  {
    "text": "front-end web applications because it's",
    "start": "32320",
    "end": "34000"
  },
  {
    "text": "the only language other than web",
    "start": "34000",
    "end": "35440"
  },
  {
    "text": "assembly that is natively supported in",
    "start": "35440",
    "end": "37360"
  },
  {
    "text": "browsers however anything that can be",
    "start": "37360",
    "end": "39440"
  },
  {
    "text": "built with javascript will be built with",
    "start": "39440",
    "end": "41120"
  },
  {
    "text": "javascript like server-side applications",
    "start": "41120",
    "end": "43120"
  },
  {
    "text": "with node.js mobile applications with",
    "start": "43120",
    "end": "45280"
  },
  {
    "text": "react native or ionic and desktop apps",
    "start": "45280",
    "end": "47680"
  },
  {
    "text": "with electron it's an interpreted",
    "start": "47680",
    "end": "49280"
  },
  {
    "text": "scripting language but tools like the v8",
    "start": "49280",
    "end": "51440"
  },
  {
    "text": "engine and chromium use a just-in-time",
    "start": "51440",
    "end": "53360"
  },
  {
    "text": "compiler to convert it to machine code",
    "start": "53360",
    "end": "55440"
  },
  {
    "text": "at runtime it's also excellent at",
    "start": "55440",
    "end": "57520"
  },
  {
    "text": "handling i o intensive jobs despite the",
    "start": "57520",
    "end": "59840"
  },
  {
    "text": "fact that it's a single threaded",
    "start": "59840",
    "end": "61199"
  },
  {
    "text": "language made possible by a non-blocking",
    "start": "61199",
    "end": "63520"
  },
  {
    "text": "event loop that can queue up work in the",
    "start": "63520",
    "end": "65198"
  },
  {
    "text": "background without blocking the main",
    "start": "65199",
    "end": "66880"
  },
  {
    "text": "thread to get started create a file",
    "start": "66880",
    "end": "68960"
  },
  {
    "text": "ending in.js your code will start",
    "start": "68960",
    "end": "71280"
  },
  {
    "text": "executing from the global context use",
    "start": "71280",
    "end": "73439"
  },
  {
    "text": "the console to log a value with the",
    "start": "73439",
    "end": "75200"
  },
  {
    "text": "built-in debugger now think about where",
    "start": "75200",
    "end": "77040"
  },
  {
    "text": "you want to run this file is it a",
    "start": "77040",
    "end": "78640"
  },
  {
    "text": "front-end browser or a back-end node.js",
    "start": "78640",
    "end": "80960"
  },
  {
    "text": "server in the browser you can reference",
    "start": "80960",
    "end": "82720"
  },
  {
    "text": "it with a script tag then the browser",
    "start": "82720",
    "end": "84320"
  },
  {
    "text": "will execute it when you open that html",
    "start": "84320",
    "end": "86400"
  },
  {
    "text": "file on a website javascript is often",
    "start": "86400",
    "end": "88560"
  },
  {
    "text": "used to grab an element from the dom",
    "start": "88560",
    "end": "90560"
  },
  {
    "text": "document query selector will grab the",
    "start": "90560",
    "end": "92320"
  },
  {
    "text": "first button then we can assign it to a",
    "start": "92320",
    "end": "94000"
  },
  {
    "text": "variable with either var let or const",
    "start": "94000",
    "end": "96640"
  },
  {
    "text": "var is the og way to do it but is",
    "start": "96640",
    "end": "98240"
  },
  {
    "text": "typically avoided let is for variables",
    "start": "98240",
    "end": "100159"
  },
  {
    "text": "that can be reassigned while const is",
    "start": "100159",
    "end": "102079"
  },
  {
    "text": "for variables that cannot be reassigned",
    "start": "102079",
    "end": "104000"
  },
  {
    "text": "now to make the button interactive we",
    "start": "104000",
    "end": "105680"
  },
  {
    "text": "can add an event listener to it by",
    "start": "105680",
    "end": "107360"
  },
  {
    "text": "defining a function for the on click",
    "start": "107360",
    "end": "109520"
  },
  {
    "text": "event we can use the function keyword",
    "start": "109520",
    "end": "111280"
  },
  {
    "text": "here or the more concise arrow syntax",
    "start": "111280",
    "end": "113520"
  },
  {
    "text": "now the event loop will execute this",
    "start": "113520",
    "end": "115119"
  },
  {
    "text": "function whenever a new click occurs",
    "start": "115119",
    "end": "117040"
  },
  {
    "text": "functions are first class objects to",
    "start": "117040",
    "end": "118640"
  },
  {
    "text": "support functional programming patterns",
    "start": "118640",
    "end": "120560"
  },
  {
    "text": "but javascript also supports classes and",
    "start": "120560",
    "end": "122560"
  },
  {
    "text": "inheritance for object oriented patterns",
    "start": "122560",
    "end": "124880"
  },
  {
    "text": "even though it's single threaded it can",
    "start": "124880",
    "end": "126320"
  },
  {
    "text": "do work asynchronously with the promise",
    "start": "126320",
    "end": "128319"
  },
  {
    "text": "api which also supports the async await",
    "start": "128319",
    "end": "130959"
  },
  {
    "text": "syntax js code can also run on the",
    "start": "130959",
    "end": "133200"
  },
  {
    "text": "server thanks to the nodejs runtime",
    "start": "133200",
    "end": "135360"
  },
  {
    "text": "instead of buttons on a web page it",
    "start": "135360",
    "end": "136959"
  },
  {
    "text": "interacts with things like the file",
    "start": "136959",
    "end": "138400"
  },
  {
    "text": "system api execute your code on the",
    "start": "138400",
    "end": "140160"
  },
  {
    "text": "server by pulling up the terminal and",
    "start": "140160",
    "end": "142000"
  },
  {
    "text": "entering the node command this has been",
    "start": "142000",
    "end": "143599"
  },
  {
    "text": "javascript in 100 seconds hit the like",
    "start": "143599",
    "end": "145760"
  },
  {
    "text": "button and subscribe if you want to see",
    "start": "145760",
    "end": "147280"
  },
  {
    "text": "more short videos like this and become a",
    "start": "147280",
    "end": "149040"
  },
  {
    "text": "fireship pro member if you want to learn",
    "start": "149040",
    "end": "150480"
  },
  {
    "text": "how to do all kinds of crazy stuff with",
    "start": "150480",
    "end": "152319"
  },
  {
    "text": "javascript thanks for watching and i",
    "start": "152319",
    "end": "154160"
  },
  {
    "text": "will see you in the next one",
    "start": "154160",
    "end": "157599"
  }
]