[
  {
    "text": "a recursive function is a function that",
    "start": "399",
    "end": "2280"
  },
  {
    "text": "calls itself inside of its own",
    "start": "2280",
    "end": "4000"
  },
  {
    "text": "definition it's like having a dream",
    "start": "4000",
    "end": "6080"
  },
  {
    "text": "inside of a dream when you have a",
    "start": "6080",
    "end": "7680"
  },
  {
    "text": "recursive function that calls itself",
    "start": "7680",
    "end": "9679"
  },
  {
    "text": "without anything to stop it you have",
    "start": "9679",
    "end": "11240"
  },
  {
    "text": "created an infinite Loop the first",
    "start": "11240",
    "end": "13160"
  },
  {
    "text": "function gets pushed onto the call stack",
    "start": "13160",
    "end": "14879"
  },
  {
    "text": "the next one on top of it then another",
    "start": "14879",
    "end": "16480"
  },
  {
    "text": "one on top of that and so on forever or",
    "start": "16480",
    "end": "19279"
  },
  {
    "text": "until your runtime throws a stack",
    "start": "19279",
    "end": "20760"
  },
  {
    "text": "Overflow error or the computer just runs",
    "start": "20760",
    "end": "22680"
  },
  {
    "text": "out of memory so recursion is just",
    "start": "22680",
    "end": "24920"
  },
  {
    "text": "another way to create a loop but",
    "start": "24920",
    "end": "26840"
  },
  {
    "text": "infinite Loops aren't very useful in",
    "start": "26840",
    "end": "28359"
  },
  {
    "text": "practice that's why recursive function",
    "start": "28359",
    "end": "30240"
  },
  {
    "text": "have some sort of stopping point like",
    "start": "30240",
    "end": "32119"
  },
  {
    "text": "some conditional logic that tells the",
    "start": "32119",
    "end": "33640"
  },
  {
    "text": "function to stop calling itself when a",
    "start": "33640",
    "end": "35640"
  },
  {
    "text": "condition has been met on an interview",
    "start": "35640",
    "end": "37440"
  },
  {
    "text": "you might be asked to implement some",
    "start": "37440",
    "end": "38760"
  },
  {
    "text": "code that finds a specific index in the",
    "start": "38760",
    "end": "41000"
  },
  {
    "text": "Fibonacci sequence you'll notice a given",
    "start": "41000",
    "end": "43120"
  },
  {
    "text": "index of the sequence is just the sum of",
    "start": "43120",
    "end": "45280"
  },
  {
    "text": "the two previous values so how do we",
    "start": "45280",
    "end": "47199"
  },
  {
    "text": "find index number 2023 your first",
    "start": "47199",
    "end": "50079"
  },
  {
    "text": "thought might be to implement an",
    "start": "50079",
    "end": "51360"
  },
  {
    "text": "iterative solution with a for Loop",
    "start": "51360",
    "end": "53280"
  },
  {
    "text": "compute the Fibonacci value for each",
    "start": "53280",
    "end": "54920"
  },
  {
    "text": "index until we get to the Target index",
    "start": "54920",
    "end": "56920"
  },
  {
    "text": "of 2023 but then you're asked to",
    "start": "56920",
    "end": "59239"
  },
  {
    "text": "implement a cursive solution we can do",
    "start": "59239",
    "end": "61519"
  },
  {
    "text": "that by writing a function that starts",
    "start": "61519",
    "end": "63280"
  },
  {
    "text": "with the index and then Works its way",
    "start": "63280",
    "end": "64960"
  },
  {
    "text": "backwards until it gets to a base case",
    "start": "64960",
    "end": "67200"
  },
  {
    "text": "of being less than or equal to one",
    "start": "67200",
    "end": "69439"
  },
  {
    "text": "notice how we're calling the same",
    "start": "69439",
    "end": "70799"
  },
  {
    "text": "function inside the function body and",
    "start": "70799",
    "end": "72640"
  },
  {
    "text": "we're doing it twice there's a big",
    "start": "72640",
    "end": "74400"
  },
  {
    "text": "problem here though it will Traverse",
    "start": "74400",
    "end": "75880"
  },
  {
    "text": "down the entire sequence for every",
    "start": "75880",
    "end": "77560"
  },
  {
    "text": "single index that's o to the N squ time",
    "start": "77560",
    "end": "80000"
  },
  {
    "text": "complexity which is not good at all in",
    "start": "80000",
    "end": "81920"
  },
  {
    "text": "the next video I'll explain how to",
    "start": "81920",
    "end": "83280"
  },
  {
    "text": "improve this with memorization recursive",
    "start": "83280",
    "end": "85560"
  },
  {
    "text": "functions are not the right choice in",
    "start": "85560",
    "end": "86880"
  },
  {
    "text": "every situation but they are very good",
    "start": "86880",
    "end": "88759"
  },
  {
    "text": "for tree and graph Travers rals this has",
    "start": "88759",
    "end": "90960"
  },
  {
    "text": "been recursion in 100 seconds thanks for",
    "start": "90960",
    "end": "93320"
  },
  {
    "text": "watching and I will see you in the next",
    "start": "93320",
    "end": "95240"
  },
  {
    "text": "one",
    "start": "95240",
    "end": "98240"
  }
]