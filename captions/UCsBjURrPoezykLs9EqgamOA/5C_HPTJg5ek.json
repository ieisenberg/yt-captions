[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "rust a memory safe compiled programming",
    "start": "160",
    "end": "2679"
  },
  {
    "text": "language that delivers highlevel",
    "start": "2679",
    "end": "4160"
  },
  {
    "text": "Simplicity with low-level performance",
    "start": "4160",
    "end": "6279"
  },
  {
    "text": "it's a popular choice for Building",
    "start": "6279",
    "end": "7839"
  },
  {
    "text": "Systems where performance is absolutely",
    "start": "7839",
    "end": "9960"
  },
  {
    "text": "critical like game engines databases or",
    "start": "9960",
    "end": "12599"
  },
  {
    "text": "operating systems and is an excellent",
    "start": "12599",
    "end": "14519"
  },
  {
    "text": "choice when targeting web assembly it",
    "start": "14519",
    "end": "16320"
  },
  {
    "text": "started as a side project of gr on",
    "start": "16320",
    "end": "18680"
  },
  {
    "text": "in 2007 who named it after the rust",
    "start": "18680",
    "end": "21039"
  },
  {
    "start": "20000",
    "end": "40000"
  },
  {
    "text": "fungus it was sponsored by Mozilla in",
    "start": "21039",
    "end": "23279"
  },
  {
    "text": "2009 and has been ranked the most Lov",
    "start": "23279",
    "end": "25400"
  },
  {
    "text": "programming language every year since",
    "start": "25400",
    "end": "27119"
  },
  {
    "text": "2016 with its fans being known as",
    "start": "27119",
    "end": "29359"
  },
  {
    "text": "restation traditionally highle languages",
    "start": "29359",
    "end": "32078"
  },
  {
    "text": "provide a garbage collector to Nerf your",
    "start": "32079",
    "end": "34280"
  },
  {
    "text": "control over memory management while",
    "start": "34280",
    "end": "36200"
  },
  {
    "text": "lower level languages provide functions",
    "start": "36200",
    "end": "38280"
  },
  {
    "text": "like free and allocate to shoot yourself",
    "start": "38280",
    "end": "40440"
  },
  {
    "start": "40000",
    "end": "90000"
  },
  {
    "text": "in the foot rust takes a different",
    "start": "40440",
    "end": "42000"
  },
  {
    "text": "approach it has no garbage collector but",
    "start": "42000",
    "end": "44000"
  },
  {
    "text": "achieves memory safety with a concept",
    "start": "44000",
    "end": "46039"
  },
  {
    "text": "known as ownership and borrowing by",
    "start": "46039",
    "end": "48239"
  },
  {
    "text": "default every variable in Rust is",
    "start": "48239",
    "end": "50160"
  },
  {
    "text": "immutable this allows values to be used",
    "start": "50160",
    "end": "52160"
  },
  {
    "text": "in the stack memory which has minimal",
    "start": "52160",
    "end": "53840"
  },
  {
    "text": "performance overhead however mutable",
    "start": "53840",
    "end": "55920"
  },
  {
    "text": "values or objects with an unknown size",
    "start": "55920",
    "end": "58039"
  },
  {
    "text": "at compile time are stored in the keep",
    "start": "58039",
    "end": "60239"
  },
  {
    "text": "memory every value in a rust program is",
    "start": "60239",
    "end": "62600"
  },
  {
    "text": "assigned to a single variable known as",
    "start": "62600",
    "end": "64760"
  },
  {
    "text": "its owner when that variable goes out of",
    "start": "64760",
    "end": "66640"
  },
  {
    "text": "scope the memory allocated to it is",
    "start": "66640",
    "end": "68600"
  },
  {
    "text": "dropped automatically in some cases",
    "start": "68600",
    "end": "70640"
  },
  {
    "text": "though you may want to pass a reference",
    "start": "70640",
    "end": "72240"
  },
  {
    "text": "to a different part of the program",
    "start": "72240",
    "end": "73960"
  },
  {
    "text": "borrowing allows you to access a",
    "start": "73960",
    "end": "75960"
  },
  {
    "text": "reference in memory without taking",
    "start": "75960",
    "end": "77520"
  },
  {
    "text": "ownership of it there are a ton of rules",
    "start": "77520",
    "end": "79479"
  },
  {
    "text": "to go along with the system that the r",
    "start": "79479",
    "end": "81439"
  },
  {
    "text": "borrow Checker will validate at compile",
    "start": "81439",
    "end": "83520"
  },
  {
    "text": "time these rules keep your code safe",
    "start": "83520",
    "end": "85479"
  },
  {
    "text": "while providing absolute control over",
    "start": "85479",
    "end": "87400"
  },
  {
    "text": "performance rust also has a package",
    "start": "87400",
    "end": "89360"
  },
  {
    "text": "manager called cargo where each",
    "start": "89360",
    "end": "90960"
  },
  {
    "start": "90000",
    "end": "122000"
  },
  {
    "text": "individual package is a crate to get",
    "start": "90960",
    "end": "93079"
  },
  {
    "text": "started install rest then run cargo new",
    "start": "93079",
    "end": "95560"
  },
  {
    "text": "from the command line in the main. RS",
    "start": "95560",
    "end": "97720"
  },
  {
    "text": "file you'll find a main function which",
    "start": "97720",
    "end": "99799"
  },
  {
    "text": "is where the program will start",
    "start": "99799",
    "end": "101119"
  },
  {
    "text": "executing declare a variable with let",
    "start": "101119",
    "end": "103479"
  },
  {
    "text": "followed by its name and type the value",
    "start": "103479",
    "end": "105719"
  },
  {
    "text": "can't be changed or reassigned by",
    "start": "105719",
    "end": "107360"
  },
  {
    "text": "default so add mut to make it mutable",
    "start": "107360",
    "end": "109520"
  },
  {
    "text": "the name of the variable is the owner a",
    "start": "109520",
    "end": "111479"
  },
  {
    "text": "reference to its location and memory can",
    "start": "111479",
    "end": "113280"
  },
  {
    "text": "be Borrowed by other parts of the",
    "start": "113280",
    "end": "114799"
  },
  {
    "text": "program by prefixing it with an Amper",
    "start": "114799",
    "end": "116960"
  },
  {
    "text": "sand then use a macro like print line to",
    "start": "116960",
    "end": "119159"
  },
  {
    "text": "log the value to the standard output",
    "start": "119159",
    "end": "121000"
  },
  {
    "text": "rust also comes with a standard library",
    "start": "121000",
    "end": "123000"
  },
  {
    "start": "122000",
    "end": "148000"
  },
  {
    "text": "that contains modules to handle IO the",
    "start": "123000",
    "end": "125439"
  },
  {
    "text": "file system concurrency among many other",
    "start": "125439",
    "end": "127960"
  },
  {
    "text": "things now compile your code to an",
    "start": "127960",
    "end": "129720"
  },
  {
    "text": "executable with the rust compiler you",
    "start": "129720",
    "end": "131640"
  },
  {
    "text": "just built a memory safe executable that",
    "start": "131640",
    "end": "133760"
  },
  {
    "text": "can handle the most performance",
    "start": "133760",
    "end": "135000"
  },
  {
    "text": "intensive system requirements this has",
    "start": "135000",
    "end": "137000"
  },
  {
    "text": "been rust in 100 seconds hit the like",
    "start": "137000",
    "end": "139280"
  },
  {
    "text": "button and subscribe if you want to see",
    "start": "139280",
    "end": "140840"
  },
  {
    "text": "more short videos like this and leave a",
    "start": "140840",
    "end": "142560"
  },
  {
    "text": "comment if you want to see a full R",
    "start": "142560",
    "end": "144200"
  },
  {
    "text": "tutorial thanks for watching and I will",
    "start": "144200",
    "end": "146319"
  },
  {
    "text": "see you in the next one",
    "start": "146319",
    "end": "150239"
  }
]