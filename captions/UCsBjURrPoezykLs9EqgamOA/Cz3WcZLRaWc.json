[
  {
    "start": "0",
    "end": "49000"
  },
  {
    "text": "relational databases using sql are king",
    "start": "320",
    "end": "3199"
  },
  {
    "text": "in my recent poll nearly two-thirds of",
    "start": "3199",
    "end": "5040"
  },
  {
    "text": "viewers said that sql was their go-to",
    "start": "5040",
    "end": "7200"
  },
  {
    "text": "database",
    "start": "7200",
    "end": "7759"
  },
  {
    "text": "and that's despite the fact that it's 40",
    "start": "7759",
    "end": "9519"
  },
  {
    "text": "year old tech with billions of dollars",
    "start": "9519",
    "end": "11120"
  },
  {
    "text": "invested in disruptive technologies that",
    "start": "11120",
    "end": "12960"
  },
  {
    "text": "try to knock sql off its throne today",
    "start": "12960",
    "end": "15280"
  },
  {
    "text": "you'll learn everything you need to know",
    "start": "15280",
    "end": "16400"
  },
  {
    "text": "about mysql an",
    "start": "16400",
    "end": "17760"
  },
  {
    "text": "open source database that powers content",
    "start": "17760",
    "end": "19680"
  },
  {
    "text": "management systems like wordpress",
    "start": "19680",
    "end": "21199"
  },
  {
    "text": "ecommerce platforms like shopify",
    "start": "21199",
    "end": "23119"
  },
  {
    "text": "and social media giants like twitter",
    "start": "23119",
    "end": "24880"
  },
  {
    "text": "we'll take a hands-on approach by",
    "start": "24880",
    "end": "26240"
  },
  {
    "text": "recreating airbnb's database which",
    "start": "26240",
    "end": "28320"
  },
  {
    "text": "happens to use mysql in real life in the",
    "start": "28320",
    "end": "30720"
  },
  {
    "text": "process you'll learn why sql is so",
    "start": "30720",
    "end": "32558"
  },
  {
    "text": "popular",
    "start": "32559",
    "end": "33120"
  },
  {
    "text": "how to install and interact with the",
    "start": "33120",
    "end": "34800"
  },
  {
    "text": "database using modern tooling and vs",
    "start": "34800",
    "end": "36559"
  },
  {
    "text": "code the essential syntax to create read",
    "start": "36559",
    "end": "38800"
  },
  {
    "text": "update and delete data and most",
    "start": "38800",
    "end": "40320"
  },
  {
    "text": "importantly how to model and",
    "start": "40320",
    "end": "41920"
  },
  {
    "text": "join relational data there's also",
    "start": "41920",
    "end": "43440"
  },
  {
    "text": "another giveaway with this video the",
    "start": "43440",
    "end": "45039"
  },
  {
    "text": "mysql pillow all you have to do is be a",
    "start": "45039",
    "end": "47120"
  },
  {
    "text": "subscriber and leave a comment below",
    "start": "47120",
    "end": "49039"
  },
  {
    "start": "49000",
    "end": "84000"
  },
  {
    "text": "to start things off let's travel back in",
    "start": "49039",
    "end": "50719"
  },
  {
    "text": "time 50 years to meet ted codd",
    "start": "50719",
    "end": "52719"
  },
  {
    "text": "the author of the legendary paper a",
    "start": "52719",
    "end": "54800"
  },
  {
    "text": "relational model of data for",
    "start": "54800",
    "end": "56640"
  },
  {
    "text": "large shared data banks prior to this",
    "start": "56640",
    "end": "58559"
  },
  {
    "text": "paper databases were not relational",
    "start": "58559",
    "end": "60640"
  },
  {
    "text": "they were network-based or hierarchical",
    "start": "60640",
    "end": "62879"
  },
  {
    "text": "in the paper he outlines how a",
    "start": "62879",
    "end": "64400"
  },
  {
    "text": "relational model can reduce duplication",
    "start": "64400",
    "end": "66640"
  },
  {
    "text": "and redundancy and it changed the way",
    "start": "66640",
    "end": "68320"
  },
  {
    "text": "people would approach databases going",
    "start": "68320",
    "end": "69840"
  },
  {
    "text": "forward",
    "start": "69840",
    "end": "70320"
  },
  {
    "text": "a few years later donald chamberlain and",
    "start": "70320",
    "end": "72320"
  },
  {
    "text": "raymond boyce would use this paper as",
    "start": "72320",
    "end": "74320"
  },
  {
    "text": "the basis for developing",
    "start": "74320",
    "end": "75759"
  },
  {
    "text": "structured query language aka sql or sql",
    "start": "75759",
    "end": "79040"
  },
  {
    "text": "and is the language we still use today",
    "start": "79040",
    "end": "80640"
  },
  {
    "text": "to interact with data in a wide variety",
    "start": "80640",
    "end": "82799"
  },
  {
    "text": "of relational databases",
    "start": "82799",
    "end": "84479"
  },
  {
    "start": "84000",
    "end": "120000"
  },
  {
    "text": "but now i need to let you in on a little",
    "start": "84479",
    "end": "85920"
  },
  {
    "text": "secret and that's the fact that most",
    "start": "85920",
    "end": "87520"
  },
  {
    "text": "developers using relational databases",
    "start": "87520",
    "end": "89600"
  },
  {
    "text": "aren't actually writing raw sql code",
    "start": "89600",
    "end": "91920"
  },
  {
    "text": "more often they use libraries that",
    "start": "91920",
    "end": "93600"
  },
  {
    "text": "perform",
    "start": "93600",
    "end": "94159"
  },
  {
    "text": "object relational mapping which are",
    "start": "94159",
    "end": "96240"
  },
  {
    "text": "tools that allow you to work with",
    "start": "96240",
    "end": "97759"
  },
  {
    "text": "relational databases",
    "start": "97759",
    "end": "99040"
  },
  {
    "text": "using the object-oriented programming",
    "start": "99040",
    "end": "100720"
  },
  {
    "text": "language of your choice javascript has",
    "start": "100720",
    "end": "102560"
  },
  {
    "text": "sqlize python has",
    "start": "102560",
    "end": "104000"
  },
  {
    "text": "alchemy and ruby on rails has active",
    "start": "104000",
    "end": "106079"
  },
  {
    "text": "record orms make it so you never have to",
    "start": "106079",
    "end": "108240"
  },
  {
    "text": "touch raw sql code and that can actually",
    "start": "108240",
    "end": "110399"
  },
  {
    "text": "be a great thing for productivity most",
    "start": "110399",
    "end": "112000"
  },
  {
    "text": "of the time",
    "start": "112000",
    "end": "112640"
  },
  {
    "text": "but learning how raw sql works will help",
    "start": "112640",
    "end": "114960"
  },
  {
    "text": "you understand some of the magic that an",
    "start": "114960",
    "end": "116560"
  },
  {
    "text": "orm does under the hood and that's what",
    "start": "116560",
    "end": "118240"
  },
  {
    "text": "this video is all about",
    "start": "118240",
    "end": "119600"
  },
  {
    "text": "when i say the word relational database",
    "start": "119600",
    "end": "121520"
  },
  {
    "start": "120000",
    "end": "157000"
  },
  {
    "text": "i'm talking about a relational database",
    "start": "121520",
    "end": "123439"
  },
  {
    "text": "management system",
    "start": "123439",
    "end": "124479"
  },
  {
    "text": "which is comprised of two main things",
    "start": "124479",
    "end": "126479"
  },
  {
    "text": "you have the database itself which is a",
    "start": "126479",
    "end": "128399"
  },
  {
    "text": "collection of tables and in each table",
    "start": "128399",
    "end": "130560"
  },
  {
    "text": "you have your actual data organized in",
    "start": "130560",
    "end": "132640"
  },
  {
    "text": "columns and rows",
    "start": "132640",
    "end": "133760"
  },
  {
    "text": "very similar to an excel spreadsheet the",
    "start": "133760",
    "end": "136000"
  },
  {
    "text": "second component in the system",
    "start": "136000",
    "end": "137440"
  },
  {
    "text": "is a language used to manipulate and",
    "start": "137440",
    "end": "139760"
  },
  {
    "text": "read data in the database",
    "start": "139760",
    "end": "141200"
  },
  {
    "text": "which is most often a variation of",
    "start": "141200",
    "end": "143360"
  },
  {
    "text": "structured query language",
    "start": "143360",
    "end": "144720"
  },
  {
    "text": "in addition to mysql there are many",
    "start": "144720",
    "end": "146480"
  },
  {
    "text": "popular database options out there",
    "start": "146480",
    "end": "148160"
  },
  {
    "text": "like postgres sql server sql lite and",
    "start": "148160",
    "end": "151040"
  },
  {
    "text": "tools like cockroachdb that can easily",
    "start": "151040",
    "end": "153040"
  },
  {
    "text": "be distributed on the cloud to scale",
    "start": "153040",
    "end": "154879"
  },
  {
    "text": "high traffic apps",
    "start": "154879",
    "end": "156080"
  },
  {
    "text": "now let's take a look at the data model",
    "start": "156080",
    "end": "157760"
  },
  {
    "start": "157000",
    "end": "176000"
  },
  {
    "text": "for our airbnb clone using a tool called",
    "start": "157760",
    "end": "160239"
  },
  {
    "text": "drawsql which can help you visualize and",
    "start": "160239",
    "end": "162800"
  },
  {
    "text": "model data relationships we'll refer",
    "start": "162800",
    "end": "164800"
  },
  {
    "text": "back to this diagram throughout the",
    "start": "164800",
    "end": "166000"
  },
  {
    "text": "video",
    "start": "166000",
    "end": "166480"
  },
  {
    "text": "but all you need to know for right now",
    "start": "166480",
    "end": "168080"
  },
  {
    "text": "is that each one of these boxes here",
    "start": "168080",
    "end": "169680"
  },
  {
    "text": "represents a database table then the",
    "start": "169680",
    "end": "171599"
  },
  {
    "text": "lines between them represent different",
    "start": "171599",
    "end": "173280"
  },
  {
    "text": "relationships like one-to-one or",
    "start": "173280",
    "end": "175360"
  },
  {
    "text": "one-to-many",
    "start": "175360",
    "end": "176160"
  },
  {
    "start": "176000",
    "end": "252000"
  },
  {
    "text": "what we're looking at here is the",
    "start": "176160",
    "end": "177519"
  },
  {
    "text": "database schema which is basically a",
    "start": "177519",
    "end": "179599"
  },
  {
    "text": "blueprint that defines the different",
    "start": "179599",
    "end": "181360"
  },
  {
    "text": "rules or constraints within the database",
    "start": "181360",
    "end": "183599"
  },
  {
    "text": "if we look at a table you'll notice that",
    "start": "183599",
    "end": "185280"
  },
  {
    "text": "it's a dictionary where the key",
    "start": "185280",
    "end": "186879"
  },
  {
    "text": "represents a column in the database",
    "start": "186879",
    "end": "188640"
  },
  {
    "text": "and the value represents a data type",
    "start": "188640",
    "end": "190640"
  },
  {
    "text": "that can be stored there",
    "start": "190640",
    "end": "191840"
  },
  {
    "text": "there are many different data types and",
    "start": "191840",
    "end": "193360"
  },
  {
    "text": "they can vary between different sql",
    "start": "193360",
    "end": "195040"
  },
  {
    "text": "databases",
    "start": "195040",
    "end": "195920"
  },
  {
    "text": "but for the most part they just",
    "start": "195920",
    "end": "197360"
  },
  {
    "text": "represent different types of numbers and",
    "start": "197360",
    "end": "199200"
  },
  {
    "text": "strings",
    "start": "199200",
    "end": "199840"
  },
  {
    "text": "like in mysql we have int for integer or",
    "start": "199840",
    "end": "203040"
  },
  {
    "text": "float for floating point numbers for",
    "start": "203040",
    "end": "205200"
  },
  {
    "text": "small strings we might use",
    "start": "205200",
    "end": "206560"
  },
  {
    "text": "varchar or varchar if you prefer or use",
    "start": "206560",
    "end": "209040"
  },
  {
    "text": "text for",
    "start": "209040",
    "end": "209680"
  },
  {
    "text": "longer strings you don't need to know",
    "start": "209680",
    "end": "211200"
  },
  {
    "text": "all the data types at the beginning",
    "start": "211200",
    "end": "212720"
  },
  {
    "text": "but choosing the right one will help you",
    "start": "212720",
    "end": "214480"
  },
  {
    "text": "optimize the size and performance of",
    "start": "214480",
    "end": "216319"
  },
  {
    "text": "your database when you build a serious",
    "start": "216319",
    "end": "218000"
  },
  {
    "text": "app",
    "start": "218000",
    "end": "218319"
  },
  {
    "text": "in addition to a data type a column",
    "start": "218319",
    "end": "220239"
  },
  {
    "text": "might also have a special constraint",
    "start": "220239",
    "end": "222239"
  },
  {
    "text": "a column may not be able to store a null",
    "start": "222239",
    "end": "223920"
  },
  {
    "text": "value or maybe each value in that column",
    "start": "223920",
    "end": "226560"
  },
  {
    "text": "needs to be unique",
    "start": "226560",
    "end": "227599"
  },
  {
    "text": "in this schema you'll notice that every",
    "start": "227599",
    "end": "229280"
  },
  {
    "text": "table has an id",
    "start": "229280",
    "end": "230640"
  },
  {
    "text": "with the primary key constraint which",
    "start": "230640",
    "end": "232400"
  },
  {
    "text": "means that it cannot be null",
    "start": "232400",
    "end": "233840"
  },
  {
    "text": "and it must be unique that ensures that",
    "start": "233840",
    "end": "235680"
  },
  {
    "text": "every row in the table can be identified",
    "start": "235680",
    "end": "237920"
  },
  {
    "text": "that's essential when building",
    "start": "237920",
    "end": "239040"
  },
  {
    "text": "relationships because that unique id",
    "start": "239040",
    "end": "241120"
  },
  {
    "text": "can then be saved on another table to",
    "start": "241120",
    "end": "243280"
  },
  {
    "text": "represent a one-to-one",
    "start": "243280",
    "end": "244560"
  },
  {
    "text": "or one-to-many relationship like a user",
    "start": "244560",
    "end": "246879"
  },
  {
    "text": "can have many rooms",
    "start": "246879",
    "end": "248159"
  },
  {
    "text": "and a room can have many reviews and",
    "start": "248159",
    "end": "250239"
  },
  {
    "text": "we'll look at that in more detail later",
    "start": "250239",
    "end": "251680"
  },
  {
    "text": "in the video",
    "start": "251680",
    "end": "252480"
  },
  {
    "start": "252000",
    "end": "300000"
  },
  {
    "text": "now the other thing i want to point out",
    "start": "252480",
    "end": "253760"
  },
  {
    "text": "in this diagram is that there is very",
    "start": "253760",
    "end": "255599"
  },
  {
    "text": "little data duplication between the",
    "start": "255599",
    "end": "257280"
  },
  {
    "text": "tables",
    "start": "257280",
    "end": "257919"
  },
  {
    "text": "every table is a unique entity which",
    "start": "257919",
    "end": "259759"
  },
  {
    "text": "means that the rooms table for example",
    "start": "259759",
    "end": "261840"
  },
  {
    "text": "doesn't need to store any information",
    "start": "261840",
    "end": "263680"
  },
  {
    "text": "about the user just a reference to the",
    "start": "263680",
    "end": "265680"
  },
  {
    "text": "user id",
    "start": "265680",
    "end": "266560"
  },
  {
    "text": "we call this a normalized data structure",
    "start": "266560",
    "end": "268639"
  },
  {
    "text": "because every entity",
    "start": "268639",
    "end": "269840"
  },
  {
    "text": "is organized into its smallest normal",
    "start": "269840",
    "end": "272000"
  },
  {
    "text": "form a concept that ted cod laid out",
    "start": "272000",
    "end": "274240"
  },
  {
    "text": "over half a century ago for example we",
    "start": "274240",
    "end": "276400"
  },
  {
    "text": "have a bookings table that requires",
    "start": "276400",
    "end": "278160"
  },
  {
    "text": "information about a user and a room we",
    "start": "278160",
    "end": "280080"
  },
  {
    "text": "could save user data and room data on",
    "start": "280080",
    "end": "282000"
  },
  {
    "text": "that table but that would result in a",
    "start": "282000",
    "end": "283840"
  },
  {
    "text": "lot of data duplication",
    "start": "283840",
    "end": "285120"
  },
  {
    "text": "a better approach is to separate users",
    "start": "285120",
    "end": "287280"
  },
  {
    "text": "and rooms into their own entities",
    "start": "287280",
    "end": "289280"
  },
  {
    "text": "then join them back together with",
    "start": "289280",
    "end": "290720"
  },
  {
    "text": "bookings when needed a great analogy is",
    "start": "290720",
    "end": "292960"
  },
  {
    "text": "that normalized data is like breaking",
    "start": "292960",
    "end": "294720"
  },
  {
    "text": "down a car",
    "start": "294720",
    "end": "295440"
  },
  {
    "text": "into all of its individual parts when it",
    "start": "295440",
    "end": "297360"
  },
  {
    "text": "comes time to build a car you just join",
    "start": "297360",
    "end": "299360"
  },
  {
    "text": "all those parts back together",
    "start": "299360",
    "end": "300880"
  },
  {
    "start": "300000",
    "end": "350000"
  },
  {
    "text": "okay so now that we know a little bit",
    "start": "300880",
    "end": "302320"
  },
  {
    "text": "about sql from a high level",
    "start": "302320",
    "end": "304000"
  },
  {
    "text": "it's time to get hands-on by first",
    "start": "304000",
    "end": "306000"
  },
  {
    "text": "installing mysql",
    "start": "306000",
    "end": "307520"
  },
  {
    "text": "on our system i use arch by the way but",
    "start": "307520",
    "end": "309600"
  },
  {
    "text": "for this video we'll install mysql on",
    "start": "309600",
    "end": "311759"
  },
  {
    "text": "windows",
    "start": "311759",
    "end": "312320"
  },
  {
    "text": "if you go to the website there's an",
    "start": "312320",
    "end": "313680"
  },
  {
    "text": "installer that you can download go ahead",
    "start": "313680",
    "end": "315440"
  },
  {
    "text": "and download it",
    "start": "315440",
    "end": "316240"
  },
  {
    "text": "and the only thing you need for this",
    "start": "316240",
    "end": "317520"
  },
  {
    "text": "tutorial is mysql server",
    "start": "317520",
    "end": "319919"
  },
  {
    "text": "go ahead and stick with the default",
    "start": "319919",
    "end": "321280"
  },
  {
    "text": "settings for everything then it will ask",
    "start": "321280",
    "end": "323039"
  },
  {
    "text": "you to create a password",
    "start": "323039",
    "end": "324400"
  },
  {
    "text": "make sure to remember the password",
    "start": "324400",
    "end": "325840"
  },
  {
    "text": "because we'll need it later to connect",
    "start": "325840",
    "end": "327280"
  },
  {
    "text": "to the database",
    "start": "327280",
    "end": "328160"
  },
  {
    "text": "then the installer should take care of",
    "start": "328160",
    "end": "329440"
  },
  {
    "text": "everything else to configure your system",
    "start": "329440",
    "end": "331360"
  },
  {
    "text": "if you're on a mac there's also an",
    "start": "331360",
    "end": "332880"
  },
  {
    "text": "installer you can download that follows",
    "start": "332880",
    "end": "334320"
  },
  {
    "text": "the same process or you can just use",
    "start": "334320",
    "end": "336000"
  },
  {
    "text": "homebrew",
    "start": "336000",
    "end": "336639"
  },
  {
    "text": "after the installation is done you",
    "start": "336639",
    "end": "338160"
  },
  {
    "text": "should then have access to the mysql",
    "start": "338160",
    "end": "340400"
  },
  {
    "text": "command from the command line",
    "start": "340400",
    "end": "341840"
  },
  {
    "text": "now to access the database from the",
    "start": "341840",
    "end": "343360"
  },
  {
    "text": "command line you'll run mysql",
    "start": "343360",
    "end": "345520"
  },
  {
    "text": "followed by the u flag for username and",
    "start": "345520",
    "end": "347600"
  },
  {
    "text": "then also add flag p",
    "start": "347600",
    "end": "349039"
  },
  {
    "text": "if you used a password we now have",
    "start": "349039",
    "end": "350960"
  },
  {
    "start": "350000",
    "end": "373000"
  },
  {
    "text": "access to mysql",
    "start": "350960",
    "end": "352240"
  },
  {
    "text": "in the command line and the first thing",
    "start": "352240",
    "end": "353759"
  },
  {
    "text": "we'll want to do is create a database",
    "start": "353759",
    "end": "355840"
  },
  {
    "text": "we can do that by executing an sql",
    "start": "355840",
    "end": "358080"
  },
  {
    "text": "statement that says",
    "start": "358080",
    "end": "359360"
  },
  {
    "text": "create database followed by the database",
    "start": "359360",
    "end": "361759"
  },
  {
    "text": "name which in this case will be airbnb",
    "start": "361759",
    "end": "364240"
  },
  {
    "text": "we can then verify that it was actually",
    "start": "364240",
    "end": "366000"
  },
  {
    "text": "created by typing",
    "start": "366000",
    "end": "367360"
  },
  {
    "text": "show databases now we could do this",
    "start": "367360",
    "end": "369360"
  },
  {
    "text": "entire tutorial from the command line",
    "start": "369360",
    "end": "371039"
  },
  {
    "text": "but that wouldn't be very developer",
    "start": "371039",
    "end": "372560"
  },
  {
    "text": "friendly",
    "start": "372560",
    "end": "373039"
  },
  {
    "start": "373000",
    "end": "406000"
  },
  {
    "text": "a better option is to install the sql",
    "start": "373039",
    "end": "375520"
  },
  {
    "text": "tools extension for vs code",
    "start": "375520",
    "end": "377600"
  },
  {
    "text": "it allows us to store our connection",
    "start": "377600",
    "end": "379120"
  },
  {
    "text": "details visualize the database",
    "start": "379120",
    "end": "381120"
  },
  {
    "text": "and view a history of all the queries",
    "start": "381120",
    "end": "383120"
  },
  {
    "text": "that we've run to set it up just install",
    "start": "383120",
    "end": "385280"
  },
  {
    "text": "the extension and driver for mysql",
    "start": "385280",
    "end": "387919"
  },
  {
    "text": "and then create a new connection you",
    "start": "387919",
    "end": "389440"
  },
  {
    "text": "should be able to stick to the default",
    "start": "389440",
    "end": "390880"
  },
  {
    "text": "settings",
    "start": "390880",
    "end": "391440"
  },
  {
    "text": "just make sure to add the name of the",
    "start": "391440",
    "end": "392800"
  },
  {
    "text": "database you just created along with",
    "start": "392800",
    "end": "394560"
  },
  {
    "text": "your username and password",
    "start": "394560",
    "end": "396160"
  },
  {
    "text": "go ahead and test the connection and",
    "start": "396160",
    "end": "397680"
  },
  {
    "text": "hopefully you get a success message",
    "start": "397680",
    "end": "399199"
  },
  {
    "text": "otherwise google is your best friend now",
    "start": "399199",
    "end": "401120"
  },
  {
    "text": "go ahead and click the button to connect",
    "start": "401120",
    "end": "402880"
  },
  {
    "text": "and we're ready to start writing some",
    "start": "402880",
    "end": "404240"
  },
  {
    "text": "code to build out this database",
    "start": "404240",
    "end": "405919"
  },
  {
    "text": "the first thing i want to point out is",
    "start": "405919",
    "end": "407360"
  },
  {
    "start": "406000",
    "end": "422000"
  },
  {
    "text": "that you can create a comment in sql",
    "start": "407360",
    "end": "409120"
  },
  {
    "text": "using a double dash a cool thing about",
    "start": "409120",
    "end": "411039"
  },
  {
    "text": "this vs code extension",
    "start": "411039",
    "end": "412319"
  },
  {
    "text": "is that if we create a comment followed",
    "start": "412319",
    "end": "414000"
  },
  {
    "text": "by at block it will put a play button on",
    "start": "414000",
    "end": "416560"
  },
  {
    "text": "top of that statement",
    "start": "416560",
    "end": "417680"
  },
  {
    "text": "allowing us to run it individually so we",
    "start": "417680",
    "end": "419520"
  },
  {
    "text": "don't have to jump around to a bunch of",
    "start": "419520",
    "end": "421199"
  },
  {
    "text": "different files",
    "start": "421199",
    "end": "422160"
  },
  {
    "start": "422000",
    "end": "484000"
  },
  {
    "text": "at this point we've already created a",
    "start": "422160",
    "end": "423759"
  },
  {
    "text": "database now we just need to add the",
    "start": "423759",
    "end": "425520"
  },
  {
    "text": "first table to it",
    "start": "425520",
    "end": "426560"
  },
  {
    "text": "which can be accomplished with a create",
    "start": "426560",
    "end": "428400"
  },
  {
    "text": "table statement now a couple things to",
    "start": "428400",
    "end": "430479"
  },
  {
    "text": "note here",
    "start": "430479",
    "end": "431120"
  },
  {
    "text": "a statement is code that does something",
    "start": "431120",
    "end": "433440"
  },
  {
    "text": "and we know this is a statement because",
    "start": "433440",
    "end": "435120"
  },
  {
    "text": "it ends with a semicolon",
    "start": "435120",
    "end": "436800"
  },
  {
    "text": "the words highlighted in purple are sql",
    "start": "436800",
    "end": "439120"
  },
  {
    "text": "keywords they're reserved words that the",
    "start": "439120",
    "end": "440880"
  },
  {
    "text": "language will interpret to do something",
    "start": "440880",
    "end": "443039"
  },
  {
    "text": "by convention we write them in uppercase",
    "start": "443039",
    "end": "445199"
  },
  {
    "text": "but they're actually not case sensitive",
    "start": "445199",
    "end": "446880"
  },
  {
    "text": "and we could write them in lowercase if",
    "start": "446880",
    "end": "448400"
  },
  {
    "text": "we wanted to",
    "start": "448400",
    "end": "449199"
  },
  {
    "text": "the third word users is known as an",
    "start": "449199",
    "end": "451520"
  },
  {
    "text": "identifier",
    "start": "451520",
    "end": "452400"
  },
  {
    "text": "and in this case it just identifies the",
    "start": "452400",
    "end": "454240"
  },
  {
    "text": "name of the table",
    "start": "454240",
    "end": "455520"
  },
  {
    "text": "inside the parentheses we can add a list",
    "start": "455520",
    "end": "457520"
  },
  {
    "text": "of columns that we want to include on",
    "start": "457520",
    "end": "459520"
  },
  {
    "text": "this table",
    "start": "459520",
    "end": "460240"
  },
  {
    "text": "in this case we have an id email bio and",
    "start": "460240",
    "end": "463120"
  },
  {
    "text": "country",
    "start": "463120",
    "end": "463759"
  },
  {
    "text": "those are the column identifiers or",
    "start": "463759",
    "end": "465440"
  },
  {
    "text": "names but they also need to have a data",
    "start": "465440",
    "end": "467360"
  },
  {
    "text": "type",
    "start": "467360",
    "end": "467759"
  },
  {
    "text": "and optionally one or more constraints",
    "start": "467759",
    "end": "469840"
  },
  {
    "text": "let's give the id field an",
    "start": "469840",
    "end": "471280"
  },
  {
    "text": "integer data type which means we can",
    "start": "471280",
    "end": "472960"
  },
  {
    "text": "only store whole numbers here",
    "start": "472960",
    "end": "474560"
  },
  {
    "text": "no decimals or strings the data type is",
    "start": "474560",
    "end": "476960"
  },
  {
    "text": "important because if you try to save the",
    "start": "476960",
    "end": "478560"
  },
  {
    "text": "wrong data to that column",
    "start": "478560",
    "end": "480080"
  },
  {
    "text": "the database will throw an error because",
    "start": "480080",
    "end": "482000"
  },
  {
    "text": "sql is very strict about data integrity",
    "start": "482000",
    "end": "484720"
  },
  {
    "start": "484000",
    "end": "511000"
  },
  {
    "text": "next we'll add a constraint to this",
    "start": "484720",
    "end": "486319"
  },
  {
    "text": "column called primarykey what that tells",
    "start": "486319",
    "end": "488479"
  },
  {
    "text": "the database",
    "start": "488479",
    "end": "489199"
  },
  {
    "text": "is that this column identifies a unique",
    "start": "489199",
    "end": "491280"
  },
  {
    "text": "row therefore the id must be unique",
    "start": "491280",
    "end": "493440"
  },
  {
    "text": "and must not be null constraints are",
    "start": "493440",
    "end": "495360"
  },
  {
    "text": "kind of like an extra layer of data",
    "start": "495360",
    "end": "497039"
  },
  {
    "text": "validation that you can add beyond just",
    "start": "497039",
    "end": "499039"
  },
  {
    "text": "the data type",
    "start": "499039",
    "end": "500080"
  },
  {
    "text": "one additional constraint that you'll",
    "start": "500080",
    "end": "501440"
  },
  {
    "text": "often see on ids is auto increment",
    "start": "501440",
    "end": "504080"
  },
  {
    "text": "this tells the database to automatically",
    "start": "504080",
    "end": "506000"
  },
  {
    "text": "create the id for you",
    "start": "506000",
    "end": "507360"
  },
  {
    "text": "it'll start at 1 then increment to 2 3 4",
    "start": "507360",
    "end": "510639"
  },
  {
    "text": "and so on from there we have email which",
    "start": "510639",
    "end": "512640"
  },
  {
    "start": "511000",
    "end": "571000"
  },
  {
    "text": "is a string value",
    "start": "512640",
    "end": "513760"
  },
  {
    "text": "so we'll give it a type of varchar it",
    "start": "513760",
    "end": "515919"
  },
  {
    "text": "takes an argument of a number that",
    "start": "515919",
    "end": "517599"
  },
  {
    "text": "represents the maximum length that",
    "start": "517599",
    "end": "519200"
  },
  {
    "text": "string can be",
    "start": "519200",
    "end": "520240"
  },
  {
    "text": "you'll often see it set to 255 because",
    "start": "520240",
    "end": "522560"
  },
  {
    "text": "that's the max amount of characters that",
    "start": "522560",
    "end": "524480"
  },
  {
    "text": "can be counted with an 8-bit number",
    "start": "524480",
    "end": "526480"
  },
  {
    "text": "so adding one more character would just",
    "start": "526480",
    "end": "528320"
  },
  {
    "text": "be a waste of a byte",
    "start": "528320",
    "end": "529519"
  },
  {
    "text": "the email column will also have a",
    "start": "529519",
    "end": "531120"
  },
  {
    "text": "constraint of not null",
    "start": "531120",
    "end": "532959"
  },
  {
    "text": "that means there has to be something",
    "start": "532959",
    "end": "534480"
  },
  {
    "text": "added to the email field on every row",
    "start": "534480",
    "end": "536880"
  },
  {
    "text": "and we'll also add the unique constraint",
    "start": "536880",
    "end": "538720"
  },
  {
    "text": "to ensure that every email is unique now",
    "start": "538720",
    "end": "540880"
  },
  {
    "text": "moving on to the bio we need to",
    "start": "540880",
    "end": "542560"
  },
  {
    "text": "potentially store a much larger string",
    "start": "542560",
    "end": "544560"
  },
  {
    "text": "here",
    "start": "544560",
    "end": "544880"
  },
  {
    "text": "so instead of varchar we'll use text",
    "start": "544880",
    "end": "547120"
  },
  {
    "text": "which can store a string value of an",
    "start": "547120",
    "end": "548959"
  },
  {
    "text": "unspecified size",
    "start": "548959",
    "end": "550240"
  },
  {
    "text": "and lastly we have the country value",
    "start": "550240",
    "end": "552000"
  },
  {
    "text": "which is also a string but in this case",
    "start": "552000",
    "end": "553839"
  },
  {
    "text": "we know the country code will always be",
    "start": "553839",
    "end": "555600"
  },
  {
    "text": "two characters",
    "start": "555600",
    "end": "556480"
  },
  {
    "text": "so we'll go ahead and enforce that rule",
    "start": "556480",
    "end": "558160"
  },
  {
    "text": "on the data type we're now ready to",
    "start": "558160",
    "end": "559839"
  },
  {
    "text": "execute this sql statement by pushing",
    "start": "559839",
    "end": "561920"
  },
  {
    "text": "the play button",
    "start": "561920",
    "end": "562720"
  },
  {
    "text": "you should get a success message back",
    "start": "562720",
    "end": "564399"
  },
  {
    "text": "then if you open up the vs code",
    "start": "564399",
    "end": "565760"
  },
  {
    "text": "extension",
    "start": "565760",
    "end": "566480"
  },
  {
    "text": "you should be able to see the schema for",
    "start": "566480",
    "end": "568000"
  },
  {
    "text": "this table in the ide",
    "start": "568000",
    "end": "569920"
  },
  {
    "text": "now that we have a table it's time to",
    "start": "569920",
    "end": "571680"
  },
  {
    "start": "571000",
    "end": "628000"
  },
  {
    "text": "insert data or rows into it the way we",
    "start": "571680",
    "end": "574160"
  },
  {
    "text": "do that is with an insert into",
    "start": "574160",
    "end": "576000"
  },
  {
    "text": "statement we reference the user's table",
    "start": "576000",
    "end": "578000"
  },
  {
    "text": "with its identifier then in parentheses",
    "start": "578000",
    "end": "580240"
  },
  {
    "text": "add the columns that we want to update",
    "start": "580240",
    "end": "581920"
  },
  {
    "text": "the order of the columns is important",
    "start": "581920",
    "end": "583519"
  },
  {
    "text": "because after that we have values which",
    "start": "583519",
    "end": "585600"
  },
  {
    "text": "is a list of values that should be",
    "start": "585600",
    "end": "587120"
  },
  {
    "text": "inserted into these columns the first",
    "start": "587120",
    "end": "588959"
  },
  {
    "text": "value is the email the second is the bio",
    "start": "588959",
    "end": "591120"
  },
  {
    "text": "and the third is the country",
    "start": "591120",
    "end": "592880"
  },
  {
    "text": "one thing you might notice is that i'm",
    "start": "592880",
    "end": "594320"
  },
  {
    "text": "leaving out the id field because if you",
    "start": "594320",
    "end": "596240"
  },
  {
    "text": "remember from the last step",
    "start": "596240",
    "end": "597600"
  },
  {
    "text": "we added auto increment to it so it's",
    "start": "597600",
    "end": "599680"
  },
  {
    "text": "going to be created by mysql",
    "start": "599680",
    "end": "601519"
  },
  {
    "text": "automatically if i go ahead and run the",
    "start": "601519",
    "end": "603120"
  },
  {
    "text": "query you'll notice i get an error back",
    "start": "603120",
    "end": "604959"
  },
  {
    "text": "that says the value used for the country",
    "start": "604959",
    "end": "606959"
  },
  {
    "text": "is too long if you remember earlier we",
    "start": "606959",
    "end": "609040"
  },
  {
    "text": "gave it a max length of two",
    "start": "609040",
    "end": "610640"
  },
  {
    "text": "so because it has three characters here",
    "start": "610640",
    "end": "612320"
  },
  {
    "text": "it's not allowed to write that data to",
    "start": "612320",
    "end": "614240"
  },
  {
    "text": "the database",
    "start": "614240",
    "end": "615040"
  },
  {
    "text": "when we change it back to two characters",
    "start": "615040",
    "end": "616640"
  },
  {
    "text": "the query then runs successfully",
    "start": "616640",
    "end": "618560"
  },
  {
    "text": "that inserted the first row into the",
    "start": "618560",
    "end": "620000"
  },
  {
    "text": "database and it's also worth noting",
    "start": "620000",
    "end": "622079"
  },
  {
    "text": "that you can insert multiple rows at the",
    "start": "622079",
    "end": "623920"
  },
  {
    "text": "same time by separating them with commas",
    "start": "623920",
    "end": "626640"
  },
  {
    "text": "so now that we have some data in the",
    "start": "626640",
    "end": "628000"
  },
  {
    "start": "628000",
    "end": "657000"
  },
  {
    "text": "database the question becomes how do we",
    "start": "628000",
    "end": "630000"
  },
  {
    "text": "retrieve it",
    "start": "630000",
    "end": "630720"
  },
  {
    "text": "or query it a select statement allows us",
    "start": "630720",
    "end": "633040"
  },
  {
    "text": "to read data in the database",
    "start": "633040",
    "end": "634720"
  },
  {
    "text": "and have it returned to us in a result",
    "start": "634720",
    "end": "636720"
  },
  {
    "text": "table if we want to read an entire table",
    "start": "636720",
    "end": "638959"
  },
  {
    "text": "we can say select",
    "start": "638959",
    "end": "640160"
  },
  {
    "text": "star from the users table that will",
    "start": "640160",
    "end": "642959"
  },
  {
    "text": "return the entire table",
    "start": "642959",
    "end": "644240"
  },
  {
    "text": "along with every single column but in",
    "start": "644240",
    "end": "646160"
  },
  {
    "text": "most cases you are not going to want all",
    "start": "646160",
    "end": "647920"
  },
  {
    "text": "that data",
    "start": "647920",
    "end": "648720"
  },
  {
    "text": "you can filter out columns by simply",
    "start": "648720",
    "end": "650640"
  },
  {
    "text": "separating them with",
    "start": "650640",
    "end": "651760"
  },
  {
    "text": "commas in the select statement for",
    "start": "651760",
    "end": "653600"
  },
  {
    "text": "example we might only want the email and",
    "start": "653600",
    "end": "655760"
  },
  {
    "text": "id",
    "start": "655760",
    "end": "656240"
  },
  {
    "text": "in the result set but a table might also",
    "start": "656240",
    "end": "659440"
  },
  {
    "start": "657000",
    "end": "683000"
  },
  {
    "text": "have millions upon millions of rows",
    "start": "659440",
    "end": "661279"
  },
  {
    "text": "an easy way to limit the number of rows",
    "start": "661279",
    "end": "663120"
  },
  {
    "text": "returned is to use the limit keyword",
    "start": "663120",
    "end": "665120"
  },
  {
    "text": "followed by the number of rows that you",
    "start": "665120",
    "end": "666720"
  },
  {
    "text": "want notice how only two rows are return",
    "start": "666720",
    "end": "668800"
  },
  {
    "text": "now",
    "start": "668800",
    "end": "669200"
  },
  {
    "text": "but what if we want them to be ordered",
    "start": "669200",
    "end": "670880"
  },
  {
    "text": "by a certain field like a timestamp or",
    "start": "670880",
    "end": "673279"
  },
  {
    "text": "id",
    "start": "673279",
    "end": "673760"
  },
  {
    "text": "we can achieve that by adding an order",
    "start": "673760",
    "end": "675440"
  },
  {
    "text": "by clause that specifies a column we",
    "start": "675440",
    "end": "677680"
  },
  {
    "text": "want to order by",
    "start": "677680",
    "end": "678640"
  },
  {
    "text": "then ascending or descending based on",
    "start": "678640",
    "end": "680959"
  },
  {
    "text": "the direction of ordering",
    "start": "680959",
    "end": "682399"
  },
  {
    "text": "ordering is useful but you'll often need",
    "start": "682399",
    "end": "684320"
  },
  {
    "start": "683000",
    "end": "710000"
  },
  {
    "text": "to filter out rows with more complex",
    "start": "684320",
    "end": "686320"
  },
  {
    "text": "logic",
    "start": "686320",
    "end": "687040"
  },
  {
    "text": "sql starts to feel more like a real",
    "start": "687040",
    "end": "689040"
  },
  {
    "text": "programming language when you introduce",
    "start": "689040",
    "end": "690640"
  },
  {
    "text": "the where clause",
    "start": "690640",
    "end": "691600"
  },
  {
    "text": "for example we may only want the rows",
    "start": "691600",
    "end": "693519"
  },
  {
    "text": "that have a country code of us",
    "start": "693519",
    "end": "695279"
  },
  {
    "text": "a where clause allows us to run",
    "start": "695279",
    "end": "696959"
  },
  {
    "text": "conditional logic on the query",
    "start": "696959",
    "end": "698720"
  },
  {
    "text": "in this case it will only return rows",
    "start": "698720",
    "end": "700720"
  },
  {
    "text": "where the country equals us",
    "start": "700720",
    "end": "702640"
  },
  {
    "text": "we can also chain additional conditions",
    "start": "702640",
    "end": "704560"
  },
  {
    "text": "to it using and",
    "start": "704560",
    "end": "705760"
  },
  {
    "text": "or or like where the country equals us",
    "start": "705760",
    "end": "708320"
  },
  {
    "text": "and the id",
    "start": "708320",
    "end": "709200"
  },
  {
    "text": "is greater than one but in some cases",
    "start": "709200",
    "end": "711760"
  },
  {
    "start": "710000",
    "end": "739000"
  },
  {
    "text": "you may not want to filter by an exact",
    "start": "711760",
    "end": "713600"
  },
  {
    "text": "value but rather a pattern",
    "start": "713600",
    "end": "715519"
  },
  {
    "text": "like maybe you want all the emails that",
    "start": "715519",
    "end": "717600"
  },
  {
    "text": "start with an h",
    "start": "717600",
    "end": "718639"
  },
  {
    "text": "in which case you can say where email",
    "start": "718639",
    "end": "721360"
  },
  {
    "text": "like",
    "start": "721360",
    "end": "721920"
  },
  {
    "text": "followed by a pattern in this case it'll",
    "start": "721920",
    "end": "724160"
  },
  {
    "text": "find all the columns where the email",
    "start": "724160",
    "end": "726079"
  },
  {
    "text": "starts with an",
    "start": "726079",
    "end": "726720"
  },
  {
    "text": "h we get two results back from that",
    "start": "726720",
    "end": "728560"
  },
  {
    "text": "query but if we change the pattern to",
    "start": "728560",
    "end": "730399"
  },
  {
    "text": "hello",
    "start": "730399",
    "end": "731040"
  },
  {
    "text": "then we only get one result back so like",
    "start": "731040",
    "end": "733680"
  },
  {
    "text": "is kind of like a basic",
    "start": "733680",
    "end": "735120"
  },
  {
    "text": "full text search feature the problem",
    "start": "735120",
    "end": "736959"
  },
  {
    "text": "with this query though is that it's",
    "start": "736959",
    "end": "738320"
  },
  {
    "text": "going to become very slow as our data",
    "start": "738320",
    "end": "740160"
  },
  {
    "start": "739000",
    "end": "776000"
  },
  {
    "text": "set grows larger",
    "start": "740160",
    "end": "741279"
  },
  {
    "text": "if you need to retrieve data quickly",
    "start": "741279",
    "end": "743040"
  },
  {
    "text": "you'll need an index which is basically",
    "start": "743040",
    "end": "745120"
  },
  {
    "text": "a lookup table that allows you to",
    "start": "745120",
    "end": "746959"
  },
  {
    "text": "retrieve data faster",
    "start": "746959",
    "end": "748399"
  },
  {
    "text": "a database index is just like the index",
    "start": "748399",
    "end": "750720"
  },
  {
    "text": "in the back of a textbook",
    "start": "750720",
    "end": "752000"
  },
  {
    "text": "it helps the database find important",
    "start": "752000",
    "end": "753519"
  },
  {
    "text": "keywords without having to scan the",
    "start": "753519",
    "end": "755360"
  },
  {
    "text": "entire data set",
    "start": "755360",
    "end": "756480"
  },
  {
    "text": "but it comes at a cost of slower rights",
    "start": "756480",
    "end": "758480"
  },
  {
    "text": "and the requirement of additional memory",
    "start": "758480",
    "end": "760399"
  },
  {
    "text": "in this case though we'll definitely",
    "start": "760399",
    "end": "761839"
  },
  {
    "text": "want an index on the email field which",
    "start": "761839",
    "end": "763839"
  },
  {
    "text": "we can do",
    "start": "763839",
    "end": "764480"
  },
  {
    "text": "by creating a statement that says create",
    "start": "764480",
    "end": "766880"
  },
  {
    "text": "index which will give a name of",
    "start": "766880",
    "end": "768639"
  },
  {
    "text": "email index and point it to the users",
    "start": "768639",
    "end": "771040"
  },
  {
    "text": "table email",
    "start": "771040",
    "end": "772079"
  },
  {
    "text": "column and now when making a query for",
    "start": "772079",
    "end": "773920"
  },
  {
    "text": "the email based on a pattern",
    "start": "773920",
    "end": "775440"
  },
  {
    "text": "it should be much faster now that we",
    "start": "775440",
    "end": "777279"
  },
  {
    "start": "776000",
    "end": "941000"
  },
  {
    "text": "have our users table set up we're ready",
    "start": "777279",
    "end": "779120"
  },
  {
    "text": "to create our first relationship",
    "start": "779120",
    "end": "781200"
  },
  {
    "text": "if you're a host on airbnb you might",
    "start": "781200",
    "end": "782959"
  },
  {
    "text": "have multiple properties available",
    "start": "782959",
    "end": "784800"
  },
  {
    "text": "so the relationship is that a user can",
    "start": "784800",
    "end": "787040"
  },
  {
    "text": "have many rooms",
    "start": "787040",
    "end": "788240"
  },
  {
    "text": "or a one-to-many relationship between",
    "start": "788240",
    "end": "790320"
  },
  {
    "text": "users and rooms",
    "start": "790320",
    "end": "791760"
  },
  {
    "text": "let's go ahead and write a query to",
    "start": "791760",
    "end": "793200"
  },
  {
    "text": "create another table called rooms",
    "start": "793200",
    "end": "795200"
  },
  {
    "text": "it has an id field for the room itself",
    "start": "795200",
    "end": "797440"
  },
  {
    "text": "but also notice how it has an owner id",
    "start": "797440",
    "end": "799519"
  },
  {
    "text": "field",
    "start": "799519",
    "end": "800079"
  },
  {
    "text": "that represents the landlord or the id",
    "start": "800079",
    "end": "802560"
  },
  {
    "text": "of the user who owns this room",
    "start": "802560",
    "end": "804480"
  },
  {
    "text": "the id of the room is our primary key",
    "start": "804480",
    "end": "806880"
  },
  {
    "text": "then the owner id",
    "start": "806880",
    "end": "808079"
  },
  {
    "text": "is known as a foreign key because it",
    "start": "808079",
    "end": "810079"
  },
  {
    "text": "references an id",
    "start": "810079",
    "end": "811279"
  },
  {
    "text": "in a different table on the next line we",
    "start": "811279",
    "end": "813279"
  },
  {
    "text": "can set up the primary key by pointing",
    "start": "813279",
    "end": "815120"
  },
  {
    "text": "it to the id field",
    "start": "815120",
    "end": "816399"
  },
  {
    "text": "then we can do the same thing for the",
    "start": "816399",
    "end": "818079"
  },
  {
    "text": "foreign key but we also need to tell it",
    "start": "818079",
    "end": "820079"
  },
  {
    "text": "which table and column to reference",
    "start": "820079",
    "end": "822079"
  },
  {
    "text": "which in this case will be the user's",
    "start": "822079",
    "end": "823519"
  },
  {
    "text": "table id column",
    "start": "823519",
    "end": "825120"
  },
  {
    "text": "when you set up a foreign key constraint",
    "start": "825120",
    "end": "826720"
  },
  {
    "text": "like this it tells the database",
    "start": "826720",
    "end": "828480"
  },
  {
    "text": "not to delete anything that holds data",
    "start": "828480",
    "end": "830880"
  },
  {
    "text": "about that relationship",
    "start": "830880",
    "end": "832160"
  },
  {
    "text": "so that means it'll be impossible to",
    "start": "832160",
    "end": "833760"
  },
  {
    "text": "delete users who have an associated room",
    "start": "833760",
    "end": "836240"
  },
  {
    "text": "at the same time",
    "start": "836240",
    "end": "837199"
  },
  {
    "text": "in other words you're guaranteed to have",
    "start": "837199",
    "end": "838800"
  },
  {
    "text": "data integrity let's go ahead and create",
    "start": "838800",
    "end": "841040"
  },
  {
    "text": "the table",
    "start": "841040",
    "end": "841760"
  },
  {
    "text": "and then we'll need to insert some data",
    "start": "841760",
    "end": "843600"
  },
  {
    "text": "into it i'm using an insert into",
    "start": "843600",
    "end": "845519"
  },
  {
    "text": "statement",
    "start": "845519",
    "end": "846079"
  },
  {
    "text": "just like we did in the previous example",
    "start": "846079",
    "end": "848079"
  },
  {
    "text": "and notice how i'm setting the owner id",
    "start": "848079",
    "end": "849839"
  },
  {
    "text": "to one",
    "start": "849839",
    "end": "850399"
  },
  {
    "text": "that means that the user with an id of",
    "start": "850399",
    "end": "852320"
  },
  {
    "text": "one owns these four properties",
    "start": "852320",
    "end": "854399"
  },
  {
    "text": "and now we're ready to make our first",
    "start": "854399",
    "end": "856240"
  },
  {
    "text": "relational query using a join",
    "start": "856240",
    "end": "858160"
  },
  {
    "text": "in this case we want to query the users",
    "start": "858160",
    "end": "860160"
  },
  {
    "text": "that own rooms",
    "start": "860160",
    "end": "861199"
  },
  {
    "text": "and include some information about each",
    "start": "861199",
    "end": "863360"
  },
  {
    "text": "room that they own",
    "start": "863360",
    "end": "864480"
  },
  {
    "text": "there are four different types of joins",
    "start": "864480",
    "end": "866480"
  },
  {
    "text": "inner left",
    "start": "866480",
    "end": "867519"
  },
  {
    "text": "right and outer to understand the",
    "start": "867519",
    "end": "869440"
  },
  {
    "text": "difference you first need to understand",
    "start": "869440",
    "end": "871360"
  },
  {
    "text": "that when you make a join",
    "start": "871360",
    "end": "872560"
  },
  {
    "text": "you're reading data from two different",
    "start": "872560",
    "end": "874399"
  },
  {
    "text": "tables think of users as the left table",
    "start": "874399",
    "end": "876720"
  },
  {
    "text": "and rooms as the right table when you",
    "start": "876720",
    "end": "878639"
  },
  {
    "text": "perform a join you'll be matching the",
    "start": "878639",
    "end": "880240"
  },
  {
    "text": "user id",
    "start": "880240",
    "end": "881040"
  },
  {
    "text": "to the owner id on a room so the",
    "start": "881040",
    "end": "883120"
  },
  {
    "text": "relationship will only exist between",
    "start": "883120",
    "end": "885040"
  },
  {
    "text": "certain rows on each table the type of",
    "start": "885040",
    "end": "887120"
  },
  {
    "text": "join you use will determine whether or",
    "start": "887120",
    "end": "888800"
  },
  {
    "text": "not",
    "start": "888800",
    "end": "889120"
  },
  {
    "text": "data with a corresponding relationship",
    "start": "889120",
    "end": "891199"
  },
  {
    "text": "will still be returned in the query",
    "start": "891199",
    "end": "892959"
  },
  {
    "text": "let's take a look at a few examples",
    "start": "892959",
    "end": "895199"
  },
  {
    "text": "first we'll say select everything from",
    "start": "895199",
    "end": "896959"
  },
  {
    "text": "the users table",
    "start": "896959",
    "end": "898160"
  },
  {
    "text": "then run an inner join for rooms on the",
    "start": "898160",
    "end": "900639"
  },
  {
    "text": "condition where the room owner id",
    "start": "900639",
    "end": "902800"
  },
  {
    "text": "equals the user id that gives us a",
    "start": "902800",
    "end": "904880"
  },
  {
    "text": "result set with four rows in it one for",
    "start": "904880",
    "end": "907120"
  },
  {
    "text": "each room that has a corresponding owner",
    "start": "907120",
    "end": "909360"
  },
  {
    "text": "in this case the owner is the same for",
    "start": "909360",
    "end": "910880"
  },
  {
    "text": "every room but each row",
    "start": "910880",
    "end": "912560"
  },
  {
    "text": "has also been joined with the room data",
    "start": "912560",
    "end": "915040"
  },
  {
    "text": "now in some cases you may want to fetch",
    "start": "915040",
    "end": "917279"
  },
  {
    "text": "all the users even if they don't have an",
    "start": "917279",
    "end": "919199"
  },
  {
    "text": "associated room",
    "start": "919199",
    "end": "920320"
  },
  {
    "text": "you can do that with a left join this",
    "start": "920320",
    "end": "922560"
  },
  {
    "text": "time the result set has three more rows",
    "start": "922560",
    "end": "924639"
  },
  {
    "text": "for the other users",
    "start": "924639",
    "end": "926000"
  },
  {
    "text": "but all the room data is just null as",
    "start": "926000",
    "end": "928160"
  },
  {
    "text": "you might imagine",
    "start": "928160",
    "end": "929040"
  },
  {
    "text": "a right join is the exact opposite of",
    "start": "929040",
    "end": "931040"
  },
  {
    "text": "this it would return all the rooms that",
    "start": "931040",
    "end": "932880"
  },
  {
    "text": "don't have an associated owner",
    "start": "932880",
    "end": "934560"
  },
  {
    "text": "and lastly you have a full outer join",
    "start": "934560",
    "end": "936639"
  },
  {
    "text": "which actually isn't supported in mysql",
    "start": "936639",
    "end": "938800"
  },
  {
    "text": "but it would look something like this in",
    "start": "938800",
    "end": "940240"
  },
  {
    "text": "other databases now one thing you'll",
    "start": "940240",
    "end": "942079"
  },
  {
    "start": "941000",
    "end": "968000"
  },
  {
    "text": "notice in the result set",
    "start": "942079",
    "end": "943279"
  },
  {
    "text": "is that when we have conflicting column",
    "start": "943279",
    "end": "944959"
  },
  {
    "text": "names in the join mysql will",
    "start": "944959",
    "end": "947120"
  },
  {
    "text": "automatically rename them for us",
    "start": "947120",
    "end": "948880"
  },
  {
    "text": "like it did with user's id and room's id",
    "start": "948880",
    "end": "951759"
  },
  {
    "text": "you can easily change that",
    "start": "951759",
    "end": "953040"
  },
  {
    "text": "by selecting a specific column then use",
    "start": "953040",
    "end": "955440"
  },
  {
    "text": "the as operator",
    "start": "955440",
    "end": "956639"
  },
  {
    "text": "to cast it to a different name let's use",
    "start": "956639",
    "end": "958880"
  },
  {
    "text": "underscores to make the name more",
    "start": "958880",
    "end": "960560"
  },
  {
    "text": "friendly with programming languages that",
    "start": "960560",
    "end": "962240"
  },
  {
    "text": "use dot notation",
    "start": "962240",
    "end": "963680"
  },
  {
    "text": "that's pretty cool but there's one more",
    "start": "963680",
    "end": "965199"
  },
  {
    "text": "big question that we need to answer with",
    "start": "965199",
    "end": "966959"
  },
  {
    "text": "our data model and that is how does a",
    "start": "966959",
    "end": "968720"
  },
  {
    "start": "968000",
    "end": "1018000"
  },
  {
    "text": "user",
    "start": "968720",
    "end": "969199"
  },
  {
    "text": "book a room from another user we can",
    "start": "969199",
    "end": "971440"
  },
  {
    "text": "model that relationship",
    "start": "971440",
    "end": "972560"
  },
  {
    "text": "by creating a third intermediate table",
    "start": "972560",
    "end": "974720"
  },
  {
    "text": "called reservations or bookings",
    "start": "974720",
    "end": "977040"
  },
  {
    "text": "most importantly a row in the bookings",
    "start": "977040",
    "end": "979199"
  },
  {
    "text": "table will have",
    "start": "979199",
    "end": "980240"
  },
  {
    "text": "a check in time along with a guest id or",
    "start": "980240",
    "end": "982800"
  },
  {
    "text": "user id",
    "start": "982800",
    "end": "983680"
  },
  {
    "text": "and the room id both of which are",
    "start": "983680",
    "end": "986000"
  },
  {
    "text": "foreign keys",
    "start": "986000",
    "end": "986959"
  },
  {
    "text": "that allows us to create complex",
    "start": "986959",
    "end": "988639"
  },
  {
    "text": "relationships where a user has reserved",
    "start": "988639",
    "end": "990959"
  },
  {
    "text": "many rooms through the bookings table",
    "start": "990959",
    "end": "993040"
  },
  {
    "text": "or on the other side a room has many",
    "start": "993040",
    "end": "995600"
  },
  {
    "text": "past guests through the bookings table",
    "start": "995600",
    "end": "997600"
  },
  {
    "text": "once we have that data model established",
    "start": "997600",
    "end": "999440"
  },
  {
    "text": "we can then run joins through the",
    "start": "999440",
    "end": "1000959"
  },
  {
    "text": "bookings table",
    "start": "1000959",
    "end": "1001839"
  },
  {
    "text": "for example we can get all the rooms a",
    "start": "1001839",
    "end": "1003920"
  },
  {
    "text": "user has booked by joining rooms to",
    "start": "1003920",
    "end": "1006000"
  },
  {
    "text": "bookings and filtering by the guest id",
    "start": "1006000",
    "end": "1008320"
  },
  {
    "text": "or we can get a history of all the",
    "start": "1008320",
    "end": "1009920"
  },
  {
    "text": "guests who stayed in a room by joining",
    "start": "1009920",
    "end": "1011839"
  },
  {
    "text": "users to bookings",
    "start": "1011839",
    "end": "1012959"
  },
  {
    "text": "and filtering by the room id and that's",
    "start": "1012959",
    "end": "1015040"
  },
  {
    "text": "all you need to know about databases to",
    "start": "1015040",
    "end": "1016560"
  },
  {
    "text": "build a multi-billion dollar startup",
    "start": "1016560",
    "end": "1018560"
  },
  {
    "start": "1018000",
    "end": "1037000"
  },
  {
    "text": "actually wait there is one last thing i",
    "start": "1018560",
    "end": "1020560"
  },
  {
    "text": "forgot to show you but you need to be",
    "start": "1020560",
    "end": "1022079"
  },
  {
    "text": "careful with this one because if you use",
    "start": "1022079",
    "end": "1023519"
  },
  {
    "text": "it incorrectly you could delete your",
    "start": "1023519",
    "end": "1025038"
  },
  {
    "text": "entire database and lose a lot of money",
    "start": "1025039",
    "end": "1027120"
  },
  {
    "text": "a drop statement allows you to delete",
    "start": "1027120",
    "end": "1028959"
  },
  {
    "text": "data like an individual table or an",
    "start": "1028959",
    "end": "1030880"
  },
  {
    "text": "entire database in fact youtube uses",
    "start": "1030880",
    "end": "1033038"
  },
  {
    "text": "mysql under the hood so i should be able",
    "start": "1033039",
    "end": "1034959"
  },
  {
    "text": "to delete this video by clicking",
    "start": "1034959",
    "end": "1038400"
  }
]