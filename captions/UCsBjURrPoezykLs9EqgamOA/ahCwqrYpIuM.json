[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "I can pretty easily say that the one",
    "start": "0",
    "end": "8309"
  },
  {
    "text": "tool that's had the biggest impact on my",
    "start": "8309",
    "end": "9900"
  },
  {
    "text": "productivity as a web developer is",
    "start": "9900",
    "end": "11460"
  },
  {
    "text": "typescript and that's pretty amazing",
    "start": "11460",
    "end": "13230"
  },
  {
    "text": "considering a few years ago I had no",
    "start": "13230",
    "end": "14759"
  },
  {
    "text": "interest in learning it and was only",
    "start": "14759",
    "end": "16289"
  },
  {
    "text": "exposed to it because I had a client",
    "start": "16289",
    "end": "17670"
  },
  {
    "text": "that required an angular app in today's",
    "start": "17670",
    "end": "19439"
  },
  {
    "text": "video I'm gonna show you all the basic",
    "start": "19439",
    "end": "20850"
  },
  {
    "text": "concepts needed to be successful with",
    "start": "20850",
    "end": "22680"
  },
  {
    "text": "typescript and I'll throw in a few pro",
    "start": "22680",
    "end": "24210"
  },
  {
    "text": "tips here and there that I find",
    "start": "24210",
    "end": "25350"
  },
  {
    "text": "especially useful if you're new here",
    "start": "25350",
    "end": "27119"
  },
  {
    "text": "like and subscribe and there will be a",
    "start": "27119",
    "end": "28650"
  },
  {
    "text": "t-shirt giveaway with this video all you",
    "start": "28650",
    "end": "30510"
  },
  {
    "text": "have to do is leave a comment below and",
    "start": "30510",
    "end": "31650"
  },
  {
    "text": "we'll pick a random winner next week I",
    "start": "31650",
    "end": "33719"
  },
  {
    "text": "want to start with a shout-out to",
    "start": "33719",
    "end": "35219"
  },
  {
    "text": "basarat Syed who is the author of the",
    "start": "35219",
    "end": "37290"
  },
  {
    "text": "typescript deep dive book it's my go-to",
    "start": "37290",
    "end": "39300"
  },
  {
    "text": "resource for advanced concepts and it's",
    "start": "39300",
    "end": "41370"
  },
  {
    "text": "free and open source so originally I was",
    "start": "41370",
    "end": "43530"
  },
  {
    "text": "resistant to even learn typescript",
    "start": "43530",
    "end": "45059"
  },
  {
    "text": "because I wasn't super comfortable with",
    "start": "45059",
    "end": "46530"
  },
  {
    "text": "strong typed languages and I really",
    "start": "46530",
    "end": "48239"
  },
  {
    "text": "tried to avoid writing any more code",
    "start": "48239",
    "end": "49710"
  },
  {
    "text": "than I have to but this is the situation",
    "start": "49710",
    "end": "51660"
  },
  {
    "start": "50000",
    "end": "103000"
  },
  {
    "text": "where writing a little more code upfront",
    "start": "51660",
    "end": "52920"
  },
  {
    "text": "will pay big dividends as your project",
    "start": "52920",
    "end": "54840"
  },
  {
    "text": "grows the biggest benefit is actually",
    "start": "54840",
    "end": "56550"
  },
  {
    "text": "just tooling what you get in your IDE",
    "start": "56550",
    "end": "58109"
  },
  {
    "text": "like vs code when you use type",
    "start": "58109",
    "end": "60180"
  },
  {
    "text": "annotations or work with libraries that",
    "start": "60180",
    "end": "62010"
  },
  {
    "text": "are strong typed your code will be",
    "start": "62010",
    "end": "63600"
  },
  {
    "text": "automatically documented in the IDE so",
    "start": "63600",
    "end": "65670"
  },
  {
    "text": "you really have to refer back to online",
    "start": "65670",
    "end": "67290"
  },
  {
    "text": "documentation for the libraries that you",
    "start": "67290",
    "end": "69180"
  },
  {
    "text": "use in addition that compiler can catch",
    "start": "69180",
    "end": "71159"
  },
  {
    "text": "bugs in advance which is a far more",
    "start": "71159",
    "end": "72689"
  },
  {
    "text": "efficient way to refactor code",
    "start": "72689",
    "end": "74490"
  },
  {
    "text": "I think this reddit post says it best",
    "start": "74490",
    "end": "76200"
  },
  {
    "text": "would you rather have silly errors",
    "start": "76200",
    "end": "77640"
  },
  {
    "text": "during development or insanity inducing",
    "start": "77640",
    "end": "79590"
  },
  {
    "text": "errors in production another cool",
    "start": "79590",
    "end": "81869"
  },
  {
    "text": "benefit of typescript is that there's",
    "start": "81869",
    "end": "83310"
  },
  {
    "text": "virtually no learning curve if you know",
    "start": "83310",
    "end": "84780"
  },
  {
    "text": "JavaScript that's because it's a",
    "start": "84780",
    "end": "86759"
  },
  {
    "text": "superset of JavaScript so any valid jsk",
    "start": "86759",
    "end": "89340"
  },
  {
    "text": "is also valid in typescript so you can",
    "start": "89340",
    "end": "91530"
  },
  {
    "text": "learn it incrementally as you go and it",
    "start": "91530",
    "end": "93659"
  },
  {
    "text": "also allows us to write our code with",
    "start": "93659",
    "end": "95189"
  },
  {
    "text": "future JavaScript features without",
    "start": "95189",
    "end": "96930"
  },
  {
    "text": "having to worry about whether or not",
    "start": "96930",
    "end": "98189"
  },
  {
    "text": "this code will be supported in our",
    "start": "98189",
    "end": "99509"
  },
  {
    "text": "environment because we can transpile it",
    "start": "99509",
    "end": "101520"
  },
  {
    "text": "to multiple JavaScript flavors",
    "start": "101520",
    "end": "103200"
  },
  {
    "text": "now that you know typescript is awesome",
    "start": "103200",
    "end": "104880"
  },
  {
    "text": "let's go ahead and get started the first",
    "start": "104880",
    "end": "106439"
  },
  {
    "text": "thing you want to do is install",
    "start": "106439",
    "end": "107939"
  },
  {
    "text": "typescript globally with NPM doing this",
    "start": "107939",
    "end": "110759"
  },
  {
    "text": "will give you access to the TSC command",
    "start": "110759",
    "end": "112890"
  },
  {
    "text": "which will run the typescript compiler",
    "start": "112890",
    "end": "114740"
  },
  {
    "text": "at the time of this video I'm running",
    "start": "114740",
    "end": "117090"
  },
  {
    "text": "version 3.1 so the first thing we'll do",
    "start": "117090",
    "end": "119850"
  },
  {
    "text": "is create an indexed ES file and",
    "start": "119850",
    "end": "122340"
  },
  {
    "text": "typescript code on its own can't run",
    "start": "122340",
    "end": "124649"
  },
  {
    "text": "anywhere it won't work in the browser or",
    "start": "124649",
    "end": "126540"
  },
  {
    "text": "an ojs or anything like that what we do",
    "start": "126540",
    "end": "129239"
  },
  {
    "text": "is use the typescript compiler to",
    "start": "129239",
    "end": "130770"
  },
  {
    "text": "convert that typescript code to vanilla",
    "start": "130770",
    "end": "132720"
  },
  {
    "text": "JavaScript",
    "start": "132720",
    "end": "133860"
  },
  {
    "text": "let's start by writing some plain",
    "start": "133860",
    "end": "135240"
  },
  {
    "text": "JavaScript in our typescript file and",
    "start": "135240",
    "end": "137160"
  },
  {
    "text": "then compile it so we'll just say",
    "start": "137160",
    "end": "139320"
  },
  {
    "text": "console.log hello world then we'll go",
    "start": "139320",
    "end": "141120"
  },
  {
    "text": "down here to the command line and run TS",
    "start": "141120",
    "end": "143190"
  },
  {
    "text": "c index TS you'll notice that creates an",
    "start": "143190",
    "end": "146640"
  },
  {
    "text": "index j s file that's our actual",
    "start": "146640",
    "end": "148740"
  },
  {
    "text": "JavaScript code that we can run in the",
    "start": "148740",
    "end": "150180"
  },
  {
    "text": "browser or node and because we just",
    "start": "150180",
    "end": "152430"
  },
  {
    "text": "wrote plain JavaScript that code is",
    "start": "152430",
    "end": "153930"
  },
  {
    "text": "identical to what's in the index TS file",
    "start": "153930",
    "end": "156030"
  },
  {
    "text": "by default",
    "start": "156030",
    "end": "157440"
  },
  {
    "text": "typescript will compile to es 3 which",
    "start": "157440",
    "end": "159690"
  },
  {
    "text": "doesn't have support for async await so",
    "start": "159690",
    "end": "161910"
  },
  {
    "text": "let's see what happens when we write an",
    "start": "161910",
    "end": "163170"
  },
  {
    "text": "async function in our TS C file and then",
    "start": "163170",
    "end": "165570"
  },
  {
    "text": "compile it so you'll notice here that",
    "start": "165570",
    "end": "167370"
  },
  {
    "text": "our code gets transpiled to this",
    "start": "167370",
    "end": "169140"
  },
  {
    "text": "crazy-looking javascript just so we can",
    "start": "169140",
    "end": "171000"
  },
  {
    "text": "use async await in our main typescript",
    "start": "171000",
    "end": "173010"
  },
  {
    "text": "code the compiler is actually very",
    "start": "173010",
    "end": "174990"
  },
  {
    "text": "sophisticated and there's a ton of",
    "start": "174990",
    "end": "176580"
  },
  {
    "text": "different options that you can pass to",
    "start": "176580",
    "end": "178080"
  },
  {
    "text": "it to customize its behavior you could",
    "start": "178080",
    "end": "180600"
  },
  {
    "text": "pass these options and from the command",
    "start": "180600",
    "end": "182040"
  },
  {
    "text": "line but the standard way to do it is to",
    "start": "182040",
    "end": "183750"
  },
  {
    "text": "create a TS config JSON which will",
    "start": "183750",
    "end": "186090"
  },
  {
    "text": "automatically get picked up when you run",
    "start": "186090",
    "end": "187709"
  },
  {
    "text": "TS c the TS config can seem pretty",
    "start": "187709",
    "end": "190560"
  },
  {
    "text": "overwhelming at first but there is",
    "start": "190560",
    "end": "191970"
  },
  {
    "text": "usually only a few options that you have",
    "start": "191970",
    "end": "193590"
  },
  {
    "text": "to think about for the most part the",
    "start": "193590",
    "end": "195630"
  },
  {
    "text": "first one is the target and this is the",
    "start": "195630",
    "end": "197730"
  },
  {
    "text": "flavor of javascript that your code will",
    "start": "197730",
    "end": "199380"
  },
  {
    "text": "be compiled to so if we set our target",
    "start": "199380",
    "end": "202080"
  },
  {
    "text": "to es next and then run TS c you'll see",
    "start": "202080",
    "end": "204900"
  },
  {
    "text": "that it compiles our code with",
    "start": "204900",
    "end": "206130"
  },
  {
    "text": "async/await natively because it's",
    "start": "206130",
    "end": "207840"
  },
  {
    "text": "targeting the latest version of",
    "start": "207840",
    "end": "209250"
  },
  {
    "text": "javascript which supports that syntax",
    "start": "209250",
    "end": "211080"
  },
  {
    "text": "another option that we'll want to set",
    "start": "211080",
    "end": "213030"
  },
  {
    "text": "right away is watch true which will just",
    "start": "213030",
    "end": "215280"
  },
  {
    "text": "recompile our code every time we save",
    "start": "215280",
    "end": "217140"
  },
  {
    "text": "the file that'll just save us from",
    "start": "217140",
    "end": "218970"
  },
  {
    "text": "rerunning that TS c command after every",
    "start": "218970",
    "end": "221010"
  },
  {
    "text": "change the next option will look at is",
    "start": "221010",
    "end": "223170"
  },
  {
    "text": "Lib which allows us to automatically",
    "start": "223170",
    "end": "225030"
  },
  {
    "text": "include typings for certain environments",
    "start": "225030",
    "end": "227280"
  },
  {
    "text": "such as the Dom or ES 2017 so if you're",
    "start": "227280",
    "end": "230790"
  },
  {
    "text": "building a web application you'd want to",
    "start": "230790",
    "end": "232350"
  },
  {
    "text": "include that Dom library which allows",
    "start": "232350",
    "end": "234030"
  },
  {
    "text": "typescript to compile your code with all",
    "start": "234030",
    "end": "235950"
  },
  {
    "text": "the native Dom classes without any",
    "start": "235950",
    "end": "237840"
  },
  {
    "text": "compilation errors for example if we go",
    "start": "237840",
    "end": "240510"
  },
  {
    "text": "back to our code we can use the URL",
    "start": "240510",
    "end": "242489"
  },
  {
    "text": "class which is part of the Dom and we'll",
    "start": "242489",
    "end": "245010"
  },
  {
    "text": "get autocomplete and intellisense on",
    "start": "245010",
    "end": "246900"
  },
  {
    "text": "this class so this is where the",
    "start": "246900",
    "end": "249060"
  },
  {
    "text": "incredible tone of typescript starts to",
    "start": "249060",
    "end": "250739"
  },
  {
    "text": "come in if we hover over the class we",
    "start": "250739",
    "end": "252450"
  },
  {
    "text": "have integrated documentation as well as",
    "start": "252450",
    "end": "254340"
  },
  {
    "text": "an error message telling us exactly why",
    "start": "254340",
    "end": "256109"
  },
  {
    "text": "this code won't run and if we want a",
    "start": "256109",
    "end": "258060"
  },
  {
    "text": "really explicit view of the interface we",
    "start": "258060",
    "end": "259829"
  },
  {
    "text": "can right click and go to the Taipings",
    "start": "259830",
    "end": "261840"
  },
  {
    "text": "then we'll have a view of every property",
    "start": "261840",
    "end": "263610"
  },
  {
    "text": "and method that exists on this class but",
    "start": "263610",
    "end": "265979"
  },
  {
    "text": "usually that's not necessary because",
    "start": "265979",
    "end": "267760"
  },
  {
    "text": "the stuff will just autocomplete for you",
    "start": "267760",
    "end": "269290"
  },
  {
    "text": "as you start typing the next thing we'll",
    "start": "269290",
    "end": "271480"
  },
  {
    "text": "look at is the use of third-party",
    "start": "271480",
    "end": "272800"
  },
  {
    "text": "libraries so let's go ahead and install",
    "start": "272800",
    "end": "274840"
  },
  {
    "text": "lodash with NPM and you'll see that",
    "start": "274840",
    "end": "277060"
  },
  {
    "text": "creates a node modules folder with the",
    "start": "277060",
    "end": "278740"
  },
  {
    "text": "source code for lodash a lot of",
    "start": "278740",
    "end": "280990"
  },
  {
    "text": "mainstream libraries like firebase for",
    "start": "280990",
    "end": "282760"
  },
  {
    "text": "example ship with type declarations",
    "start": "282760",
    "end": "284590"
  },
  {
    "text": "automatically but load a shiaa is not",
    "start": "284590",
    "end": "286900"
  },
  {
    "text": "one of them so if we go into our index",
    "start": "286900",
    "end": "288850"
  },
  {
    "text": "TS and import lodash we'll get a warning",
    "start": "288850",
    "end": "291220"
  },
  {
    "text": "from typescript saying that there are no",
    "start": "291220",
    "end": "292840"
  },
  {
    "text": "declarations found which means we're not",
    "start": "292840",
    "end": "294640"
  },
  {
    "text": "going to get any auto complete or",
    "start": "294640",
    "end": "296230"
  },
  {
    "text": "intellisense in the IDE but the good",
    "start": "296230",
    "end": "298660"
  },
  {
    "text": "news is there's a giant mono repo out",
    "start": "298660",
    "end": "300430"
  },
  {
    "text": "there with community maintain types if",
    "start": "300430",
    "end": "302650"
  },
  {
    "text": "we go ahead and install the types in our",
    "start": "302650",
    "end": "304240"
  },
  {
    "text": "development environment will have",
    "start": "304240",
    "end": "305470"
  },
  {
    "text": "autocomplete and intellisense for every",
    "start": "305470",
    "end": "307660"
  },
  {
    "text": "lodash function so now that we know how",
    "start": "307660",
    "end": "310210"
  },
  {
    "text": "the typescript compiler works let's go",
    "start": "310210",
    "end": "311980"
  },
  {
    "text": "ahead and write some code that uses type",
    "start": "311980",
    "end": "313600"
  },
  {
    "text": "annotations there are two ways you can",
    "start": "313600",
    "end": "315790"
  },
  {
    "start": "314000",
    "end": "397000"
  },
  {
    "text": "strong type your code implicitly or",
    "start": "315790",
    "end": "317980"
  },
  {
    "text": "explicitly so let's say we have a",
    "start": "317980",
    "end": "320140"
  },
  {
    "text": "variable that should be a number if we",
    "start": "320140",
    "end": "322270"
  },
  {
    "text": "assign a value to this variable when",
    "start": "322270",
    "end": "323770"
  },
  {
    "text": "it's declared its type will",
    "start": "323770",
    "end": "325300"
  },
  {
    "text": "automatically be inferred as you can see",
    "start": "325300",
    "end": "327100"
  },
  {
    "text": "here it's a primitive number type then",
    "start": "327100",
    "end": "329890"
  },
  {
    "text": "if we go down here and try to assign a",
    "start": "329890",
    "end": "331600"
  },
  {
    "text": "string value to this variable it's going",
    "start": "331600",
    "end": "333790"
  },
  {
    "text": "to give us an error because a string is",
    "start": "333790",
    "end": "335740"
  },
  {
    "text": "not assignable to a number if this code",
    "start": "335740",
    "end": "338140"
  },
  {
    "text": "were vanilla JavaScript we wouldn't",
    "start": "338140",
    "end": "339640"
  },
  {
    "text": "catch this bug until we actually run our",
    "start": "339640",
    "end": "341320"
  },
  {
    "text": "code somewhere but with typescript we",
    "start": "341320",
    "end": "343240"
  },
  {
    "text": "know about it right away",
    "start": "343240",
    "end": "344380"
  },
  {
    "text": "unlike languages like C sharp or Java we",
    "start": "344380",
    "end": "347290"
  },
  {
    "text": "can actually opt out of the type system",
    "start": "347290",
    "end": "348730"
  },
  {
    "text": "by annotating our variable with any this",
    "start": "348730",
    "end": "351670"
  },
  {
    "text": "just means that this variable can be",
    "start": "351670",
    "end": "352960"
  },
  {
    "text": "assigned any value and the compiler",
    "start": "352960",
    "end": "354850"
  },
  {
    "text": "won't type check it ideally you want to",
    "start": "354850",
    "end": "356920"
  },
  {
    "text": "avoid doing things like this when",
    "start": "356920",
    "end": "358150"
  },
  {
    "text": "possible but it does give typescript a",
    "start": "358150",
    "end": "359950"
  },
  {
    "text": "ton of flexibility in the last example",
    "start": "359950",
    "end": "362230"
  },
  {
    "text": "we gave our variable an implicit number",
    "start": "362230",
    "end": "364360"
  },
  {
    "text": "type but what if we don't have a value",
    "start": "364360",
    "end": "366100"
  },
  {
    "text": "to assigned to it upfront if we don't",
    "start": "366100",
    "end": "368530"
  },
  {
    "text": "add any type annotations to it it's",
    "start": "368530",
    "end": "370210"
  },
  {
    "text": "going to be inferred as an any type so",
    "start": "370210",
    "end": "372820"
  },
  {
    "text": "we can assign both a string and a number",
    "start": "372820",
    "end": "374470"
  },
  {
    "text": "to it if we want to annotate it with a",
    "start": "374470",
    "end": "376750"
  },
  {
    "text": "type we can just do colon followed by",
    "start": "376750",
    "end": "378730"
  },
  {
    "text": "number which is one of the built-in",
    "start": "378730",
    "end": "380110"
  },
  {
    "text": "primitive types in JavaScript when we do",
    "start": "380110",
    "end": "382420"
  },
  {
    "text": "that we get an error under the string",
    "start": "382420",
    "end": "384130"
  },
  {
    "text": "value because we can't assign it as that",
    "start": "384130",
    "end": "385870"
  },
  {
    "text": "type one tip that I'll give you here is",
    "start": "385870",
    "end": "387820"
  },
  {
    "text": "that if you have an implicit type don't",
    "start": "387820",
    "end": "389800"
  },
  {
    "text": "bother",
    "start": "389800",
    "end": "390190"
  },
  {
    "text": "explicitly strong type in it for example",
    "start": "390190",
    "end": "392470"
  },
  {
    "text": "here we're assigning a value that's a",
    "start": "392470",
    "end": "394270"
  },
  {
    "text": "number so adding the number annotation",
    "start": "394270",
    "end": "396310"
  },
  {
    "text": "is really just redundant so we've looked",
    "start": "396310",
    "end": "398650"
  },
  {
    "text": "at some of the built-in types in",
    "start": "398650",
    "end": "400000"
  },
  {
    "text": "JavaScript but you",
    "start": "400000",
    "end": "401200"
  },
  {
    "text": "and also create your own types from",
    "start": "401200",
    "end": "402640"
  },
  {
    "text": "scratch first you'll give the type a",
    "start": "402640",
    "end": "404440"
  },
  {
    "text": "name which is typically in Pascal case",
    "start": "404440",
    "end": "406540"
  },
  {
    "text": "and for right now we'll just go ahead",
    "start": "406540",
    "end": "408640"
  },
  {
    "text": "and arbitrarily assign our style type to",
    "start": "408640",
    "end": "410950"
  },
  {
    "text": "a string then we can declare a variable",
    "start": "410950",
    "end": "413050"
  },
  {
    "text": "that's annotated with this style type",
    "start": "413050",
    "end": "414910"
  },
  {
    "text": "and then we'll get feedback for this",
    "start": "414910",
    "end": "416980"
  },
  {
    "text": "custom type instead of just a regular",
    "start": "416980",
    "end": "418450"
  },
  {
    "text": "string right now this is super redundant",
    "start": "418450",
    "end": "420940"
  },
  {
    "text": "but let's say our style type can only be",
    "start": "420940",
    "end": "423280"
  },
  {
    "text": "bold or italic we can create a union",
    "start": "423280",
    "end": "426040"
  },
  {
    "text": "type by separating them with a pipe and",
    "start": "426040",
    "end": "427960"
  },
  {
    "text": "now we can only assign this variable to",
    "start": "427960",
    "end": "430030"
  },
  {
    "text": "these two specific values and we're not",
    "start": "430030",
    "end": "432520"
  },
  {
    "text": "limited to just strings we could even",
    "start": "432520",
    "end": "434050"
  },
  {
    "text": "extend this custom type with a number so",
    "start": "434050",
    "end": "436240"
  },
  {
    "text": "that's pretty cool but more often than",
    "start": "436240",
    "end": "437890"
  },
  {
    "text": "not you'll be strong typing objects that",
    "start": "437890",
    "end": "439510"
  },
  {
    "text": "have multiple properties with multiple",
    "start": "439510",
    "end": "441280"
  },
  {
    "text": "different types let's imagine we have",
    "start": "441280",
    "end": "443290"
  },
  {
    "text": "two objects and we want to enforce that",
    "start": "443290",
    "end": "445300"
  },
  {
    "text": "this object shape has a first and last",
    "start": "445300",
    "end": "447220"
  },
  {
    "text": "name with string types composing objects",
    "start": "447220",
    "end": "450100"
  },
  {
    "text": "or class instances that don't have the",
    "start": "450100",
    "end": "452020"
  },
  {
    "text": "correct shape is an easy way to create",
    "start": "452020",
    "end": "453700"
  },
  {
    "text": "bugs in your program but with typescript",
    "start": "453700",
    "end": "455770"
  },
  {
    "text": "we can enforce the shape of an object",
    "start": "455770",
    "end": "457270"
  },
  {
    "text": "with an interface if we know that the",
    "start": "457270",
    "end": "460000"
  },
  {
    "text": "shape of the person object walls be the",
    "start": "460000",
    "end": "461740"
  },
  {
    "text": "same then we can define an interface",
    "start": "461740",
    "end": "463000"
  },
  {
    "text": "that defines the types on each property",
    "start": "463000",
    "end": "465310"
  },
  {
    "text": "now we can use this interface to strong",
    "start": "465310",
    "end": "467680"
  },
  {
    "text": "type these objects directly or we could",
    "start": "467680",
    "end": "469630"
  },
  {
    "text": "use it as the return value from a",
    "start": "469630",
    "end": "470830"
  },
  {
    "text": "function or as an argument or anywhere",
    "start": "470830",
    "end": "473200"
  },
  {
    "text": "else in our code now sometimes an",
    "start": "473200",
    "end": "475240"
  },
  {
    "text": "interface like this can be a little too",
    "start": "475240",
    "end": "476920"
  },
  {
    "text": "restrictive but you can actually",
    "start": "476920",
    "end": "478330"
  },
  {
    "text": "maintain the required properties and",
    "start": "478330",
    "end": "480220"
  },
  {
    "text": "then add any additional properties to be",
    "start": "480220",
    "end": "482110"
  },
  {
    "text": "added by creating a key with a type of",
    "start": "482110",
    "end": "484330"
  },
  {
    "text": "string with a value type of any so now a",
    "start": "484330",
    "end": "486850"
  },
  {
    "text": "first and last name will be required but",
    "start": "486850",
    "end": "488800"
  },
  {
    "text": "you can also add any additional property",
    "start": "488800",
    "end": "490540"
  },
  {
    "text": "that you want to this object now let's",
    "start": "490540",
    "end": "492880"
  },
  {
    "start": "492000",
    "end": "561000"
  },
  {
    "text": "go ahead and switch gears to functions",
    "start": "492880",
    "end": "494760"
  },
  {
    "text": "strong typing a function can be a little",
    "start": "494760",
    "end": "496870"
  },
  {
    "text": "more complex because you have types for",
    "start": "496870",
    "end": "498760"
  },
  {
    "text": "the arguments and also the return value",
    "start": "498760",
    "end": "500920"
  },
  {
    "text": "so here we just have a plain JavaScript",
    "start": "500920",
    "end": "503020"
  },
  {
    "text": "function without any types that raises X",
    "start": "503020",
    "end": "505090"
  },
  {
    "text": "to the power of Y so currently we could",
    "start": "505090",
    "end": "507790"
  },
  {
    "text": "add string values as the arguments here",
    "start": "507790",
    "end": "509680"
  },
  {
    "text": "and we wouldn't get any air from the",
    "start": "509680",
    "end": "511270"
  },
  {
    "text": "compiler but obviously this function is",
    "start": "511270",
    "end": "513640"
  },
  {
    "text": "going to fail if we try to pass it any",
    "start": "513640",
    "end": "515440"
  },
  {
    "text": "non-number value you can annotate",
    "start": "515440",
    "end": "517930"
  },
  {
    "text": "arguments the same way we do with",
    "start": "517930",
    "end": "519400"
  },
  {
    "text": "variables by just adding a colon and",
    "start": "519400",
    "end": "521409"
  },
  {
    "text": "then the type after it and that will",
    "start": "521410",
    "end": "523479"
  },
  {
    "text": "ensure that only numbers can be passed",
    "start": "523479",
    "end": "525160"
  },
  {
    "text": "to this function so the function",
    "start": "525160",
    "end": "526930"
  },
  {
    "text": "implicitly has a number return value",
    "start": "526930",
    "end": "529330"
  },
  {
    "text": "because we're using the native math",
    "start": "529330",
    "end": "530680"
  },
  {
    "text": "javascript library but we can annotate a",
    "start": "530680",
    "end": "533110"
  },
  {
    "text": "specific return value ty",
    "start": "533110",
    "end": "535000"
  },
  {
    "text": "after the parentheses and before the",
    "start": "535000",
    "end": "536649"
  },
  {
    "text": "brackets so if we set that type to a",
    "start": "536649",
    "end": "538629"
  },
  {
    "text": "string you'll see it's underlined in red",
    "start": "538629",
    "end": "540129"
  },
  {
    "text": "because it's returning a number to",
    "start": "540129",
    "end": "542379"
  },
  {
    "text": "implement this function correctly we can",
    "start": "542379",
    "end": "543970"
  },
  {
    "text": "call to string which will then clear out",
    "start": "543970",
    "end": "545649"
  },
  {
    "text": "that underlined error and in many cases",
    "start": "545649",
    "end": "548079"
  },
  {
    "text": "you might have functions that don't",
    "start": "548079",
    "end": "549550"
  },
  {
    "text": "return a value or create some kind of",
    "start": "549550",
    "end": "551350"
  },
  {
    "text": "side effect in that case you can type",
    "start": "551350",
    "end": "553540"
  },
  {
    "text": "your function return value to void so",
    "start": "553540",
    "end": "556360"
  },
  {
    "text": "you'll commonly see the void type on",
    "start": "556360",
    "end": "557680"
  },
  {
    "text": "functions like event listeners or",
    "start": "557680",
    "end": "559540"
  },
  {
    "text": "side-effects that just don't return a",
    "start": "559540",
    "end": "561129"
  },
  {
    "start": "561000",
    "end": "631000"
  },
  {
    "text": "value the next thing we'll look at is",
    "start": "561129",
    "end": "563560"
  },
  {
    "text": "how to strong type an array so we'll",
    "start": "563560",
    "end": "565480"
  },
  {
    "text": "start by creating an empty array and",
    "start": "565480",
    "end": "567009"
  },
  {
    "text": "then pushing a few different values to",
    "start": "567009",
    "end": "568569"
  },
  {
    "text": "it with different types we can force",
    "start": "568569",
    "end": "571149"
  },
  {
    "text": "this array to only have number types by",
    "start": "571149",
    "end": "573100"
  },
  {
    "text": "doing a number type followed by bracket",
    "start": "573100",
    "end": "575350"
  },
  {
    "text": "signifying that it's an array now you",
    "start": "575350",
    "end": "577600"
  },
  {
    "text": "can see we get an error every time we",
    "start": "577600",
    "end": "579100"
  },
  {
    "text": "try to push a value that's not a number",
    "start": "579100",
    "end": "581189"
  },
  {
    "text": "this is especially useful when you're",
    "start": "581189",
    "end": "583600"
  },
  {
    "text": "working with an array of objects and you",
    "start": "583600",
    "end": "585279"
  },
  {
    "text": "want to get some intellisense as you're",
    "start": "585279",
    "end": "586660"
  },
  {
    "text": "iterating over those objects for example",
    "start": "586660",
    "end": "588910"
  },
  {
    "text": "if we retrieved an array of people from",
    "start": "588910",
    "end": "591370"
  },
  {
    "text": "our database we could use our person",
    "start": "591370",
    "end": "593110"
  },
  {
    "text": "interface to know the exact shape of",
    "start": "593110",
    "end": "595060"
  },
  {
    "text": "those objects as they're retrieved",
    "start": "595060",
    "end": "596939"
  },
  {
    "text": "typescript also opens the door to a new",
    "start": "596939",
    "end": "599230"
  },
  {
    "text": "data structure called a tuple these are",
    "start": "599230",
    "end": "601600"
  },
  {
    "text": "found in other programming languages",
    "start": "601600",
    "end": "602889"
  },
  {
    "text": "like Python and basically they're just a",
    "start": "602889",
    "end": "605019"
  },
  {
    "text": "fixed length array where each item in",
    "start": "605019",
    "end": "606850"
  },
  {
    "text": "that array has its own type so we can",
    "start": "606850",
    "end": "608559"
  },
  {
    "text": "name our type my list and then we'll",
    "start": "608559",
    "end": "610269"
  },
  {
    "text": "give each of its values a different type",
    "start": "610269",
    "end": "612279"
  },
  {
    "text": "currently this is giving us an error",
    "start": "612279",
    "end": "614019"
  },
  {
    "text": "because we're initializing this array as",
    "start": "614019",
    "end": "615759"
  },
  {
    "text": "an empty array but the compiler is",
    "start": "615759",
    "end": "617769"
  },
  {
    "text": "expecting all these values to be defined",
    "start": "617769",
    "end": "619509"
  },
  {
    "text": "up front so one thing you can do is make",
    "start": "619509",
    "end": "621490"
  },
  {
    "text": "these values optional by putting a",
    "start": "621490",
    "end": "623050"
  },
  {
    "text": "question mark after the type and you can",
    "start": "623050",
    "end": "625209"
  },
  {
    "text": "also use this question mark syntax and",
    "start": "625209",
    "end": "627129"
  },
  {
    "text": "other places in typescript for example",
    "start": "627129",
    "end": "629050"
  },
  {
    "text": "to make function arguments optional the",
    "start": "629050",
    "end": "631779"
  },
  {
    "start": "631000",
    "end": "720000"
  },
  {
    "text": "last thing I want to show you is",
    "start": "631779",
    "end": "632920"
  },
  {
    "text": "typescript generics you may run into",
    "start": "632920",
    "end": "635500"
  },
  {
    "text": "situations where you want to use a type",
    "start": "635500",
    "end": "637029"
  },
  {
    "text": "internally inside of a class or function",
    "start": "637029",
    "end": "639699"
  },
  {
    "text": "a good example is an rxjs observable",
    "start": "639699",
    "end": "642309"
  },
  {
    "text": "which itself is just a class that has an",
    "start": "642309",
    "end": "644350"
  },
  {
    "text": "internal value that you can observe so",
    "start": "644350",
    "end": "646899"
  },
  {
    "text": "the capital T in this code represents a",
    "start": "646899",
    "end": "649029"
  },
  {
    "text": "variable type that we can pass in to",
    "start": "649029",
    "end": "651129"
  },
  {
    "text": "strong type this observables internal",
    "start": "651129",
    "end": "653379"
  },
  {
    "text": "value so this allows us to specify the",
    "start": "653379",
    "end": "655720"
  },
  {
    "text": "internal type at some later point in our",
    "start": "655720",
    "end": "657850"
  },
  {
    "text": "code for example we might have an",
    "start": "657850",
    "end": "659740"
  },
  {
    "text": "observable of a number or maybe we have",
    "start": "659740",
    "end": "661750"
  },
  {
    "text": "an observable of our person interface",
    "start": "661750",
    "end": "663639"
  },
  {
    "text": "and we can also do this implicitly if we",
    "start": "663639",
    "end": "666189"
  },
  {
    "text": "create a new observable of a number it's",
    "start": "666189",
    "end": "668410"
  },
  {
    "text": "going to implicit",
    "start": "668410",
    "end": "669350"
  },
  {
    "text": "we have that internal number type so",
    "start": "669350",
    "end": "671540"
  },
  {
    "text": "more often than not you'll be using",
    "start": "671540",
    "end": "672950"
  },
  {
    "text": "generics rather than creating them but",
    "start": "672950",
    "end": "674750"
  },
  {
    "text": "it's definitely an important thing to",
    "start": "674750",
    "end": "675980"
  },
  {
    "text": "know I'm gonna go ahead and wrap things",
    "start": "675980",
    "end": "677600"
  },
  {
    "text": "up there hopefully this video gave you",
    "start": "677600",
    "end": "679040"
  },
  {
    "text": "an idea of why typescript is so powerful",
    "start": "679040",
    "end": "680990"
  },
  {
    "text": "but we really only scratched the surface",
    "start": "680990",
    "end": "682550"
  },
  {
    "text": "here I'd like to do a video on object",
    "start": "682550",
    "end": "684890"
  },
  {
    "text": "oriented versus functional programming",
    "start": "684890",
    "end": "686570"
  },
  {
    "text": "and typescript or possibly decorators so",
    "start": "686570",
    "end": "689150"
  },
  {
    "text": "let me know what you want to see next in",
    "start": "689150",
    "end": "690620"
  },
  {
    "text": "the comments if this video helped you",
    "start": "690620",
    "end": "692630"
  },
  {
    "text": "please like and subscribe and if you",
    "start": "692630",
    "end": "694340"
  },
  {
    "text": "want to learn more consider becoming a",
    "start": "694340",
    "end": "696170"
  },
  {
    "text": "pro member at angular firebase comm",
    "start": "696170",
    "end": "698210"
  },
  {
    "text": "you'll get unlimited access to my",
    "start": "698210",
    "end": "700040"
  },
  {
    "text": "following courses as well as project",
    "start": "700040",
    "end": "701960"
  },
  {
    "text": "support on slack and of course I will",
    "start": "701960",
    "end": "703910"
  },
  {
    "text": "mail you this laptop sticker that you",
    "start": "703910",
    "end": "705530"
  },
  {
    "text": "see on the screen now thanks for",
    "start": "705530",
    "end": "707420"
  },
  {
    "text": "watching and I will talk to you soon",
    "start": "707420",
    "end": "711130"
  }
]