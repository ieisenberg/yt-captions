[
  {
    "text": "mastering the basics of angular's HTTP",
    "start": "0",
    "end": "2790"
  },
  {
    "text": "module well open up the door to interact",
    "start": "2790",
    "end": "4770"
  },
  {
    "text": "with thousands of exciting web-based",
    "start": "4770",
    "end": "6299"
  },
  {
    "text": "api's by the end of this lesson you'll",
    "start": "6299",
    "end": "8460"
  },
  {
    "text": "have the basic tools you would need to",
    "start": "8460",
    "end": "9780"
  },
  {
    "text": "do things like request weather data",
    "start": "9780",
    "end": "11280"
  },
  {
    "text": "stock quotes nutrition facts as well as",
    "start": "11280",
    "end": "13889"
  },
  {
    "text": "interact with major platforms like",
    "start": "13889",
    "end": "15450"
  },
  {
    "text": "Facebook Twitter and Amazon Web Services",
    "start": "15450",
    "end": "18119"
  },
  {
    "text": "the one thing these products all have in",
    "start": "18119",
    "end": "19830"
  },
  {
    "text": "common is that they provide a restful",
    "start": "19830",
    "end": "21570"
  },
  {
    "text": "api that you can consume from your",
    "start": "21570",
    "end": "23460"
  },
  {
    "text": "angular app Before we jump into the code",
    "start": "23460",
    "end": "25529"
  },
  {
    "text": "let's quickly look at what a restful api",
    "start": "25529",
    "end": "27359"
  },
  {
    "text": "is and how communication works between",
    "start": "27359",
    "end": "29550"
  },
  {
    "text": "the client and the server so here we",
    "start": "29550",
    "end": "32279"
  },
  {
    "text": "have a client on the left and a server",
    "start": "32279",
    "end": "34320"
  },
  {
    "text": "on the right rest is simply a way for",
    "start": "34320",
    "end": "36809"
  },
  {
    "text": "these two parties to communicate in a",
    "start": "36809",
    "end": "38640"
  },
  {
    "text": "standardized way when the client makes a",
    "start": "38640",
    "end": "40829"
  },
  {
    "text": "request it's going to use a specific",
    "start": "40829",
    "end": "42270"
  },
  {
    "text": "verb or method to interact with the",
    "start": "42270",
    "end": "44520"
  },
  {
    "text": "server first we'll go ahead and make a",
    "start": "44520",
    "end": "46079"
  },
  {
    "text": "get request this tells the server that",
    "start": "46079",
    "end": "48329"
  },
  {
    "text": "we only want to retrieve data and we're",
    "start": "48329",
    "end": "50250"
  },
  {
    "text": "not going to modify it in any way the",
    "start": "50250",
    "end": "52500"
  },
  {
    "text": "server will respond with the status code",
    "start": "52500",
    "end": "54180"
  },
  {
    "text": "as well as the data that was requested",
    "start": "54180",
    "end": "55890"
  },
  {
    "text": "if it was a successful request it should",
    "start": "55890",
    "end": "58050"
  },
  {
    "text": "be a 200 level response but if the",
    "start": "58050",
    "end": "60539"
  },
  {
    "text": "request wasn't valid it should be a 400",
    "start": "60539",
    "end": "62730"
  },
  {
    "text": "or 500 level error response a 400",
    "start": "62730",
    "end": "65700"
  },
  {
    "text": "response generally means the client",
    "start": "65700",
    "end": "67260"
  },
  {
    "text": "screwed something up and a 500 level",
    "start": "67260",
    "end": "69299"
  },
  {
    "text": "response generally means there was an",
    "start": "69299",
    "end": "71070"
  },
  {
    "text": "error on the server itself if we send a",
    "start": "71070",
    "end": "73770"
  },
  {
    "text": "post request we're telling the server",
    "start": "73770",
    "end": "75210"
  },
  {
    "text": "that we intend to create new data when",
    "start": "75210",
    "end": "77610"
  },
  {
    "text": "you send a post request you also send",
    "start": "77610",
    "end": "79110"
  },
  {
    "text": "that data payload with it which is the",
    "start": "79110",
    "end": "81240"
  },
  {
    "text": "data you intend to save on the server",
    "start": "81240",
    "end": "83189"
  },
  {
    "text": "after the server successfully saves it",
    "start": "83189",
    "end": "85650"
  },
  {
    "text": "it should respond with a 201 success",
    "start": "85650",
    "end": "87810"
  },
  {
    "text": "message this time saying that the",
    "start": "87810",
    "end": "89490"
  },
  {
    "text": "resource was created in addition to",
    "start": "89490",
    "end": "91979"
  },
  {
    "text": "getting post you also have other verbs",
    "start": "91979",
    "end": "93630"
  },
  {
    "text": "such as put patch and delete they all",
    "start": "93630",
    "end": "96720"
  },
  {
    "text": "work in a similar way just conveying a",
    "start": "96720",
    "end": "98340"
  },
  {
    "text": "slightly different message for what you",
    "start": "98340",
    "end": "99930"
  },
  {
    "text": "intend to do on the server and that's",
    "start": "99930",
    "end": "102150"
  },
  {
    "text": "basically the gist of how rest works",
    "start": "102150",
    "end": "103770"
  },
  {
    "text": "from a very high level now let's start",
    "start": "103770",
    "end": "106170"
  },
  {
    "text": "retrieving data from a restful endpoint",
    "start": "106170",
    "end": "107700"
  },
  {
    "text": "using angular for this lesson I'm going",
    "start": "107700",
    "end": "110460"
  },
  {
    "text": "to be working from a stack blitz project",
    "start": "110460",
    "end": "112320"
  },
  {
    "text": "this allows me to include a link in the",
    "start": "112320",
    "end": "114210"
  },
  {
    "text": "description where you can run this code",
    "start": "114210",
    "end": "115560"
  },
  {
    "text": "and fork it for yourself the first thing",
    "start": "115560",
    "end": "118439"
  },
  {
    "text": "we're going to do is go into the app",
    "start": "118439",
    "end": "119850"
  },
  {
    "text": "module and import the HTTP client module",
    "start": "119850",
    "end": "123390"
  },
  {
    "text": "from angular common ever since angular",
    "start": "123390",
    "end": "126780"
  },
  {
    "text": "4.3 we've had a client module built into",
    "start": "126780",
    "end": "129539"
  },
  {
    "text": "common so just make sure that's the one",
    "start": "129539",
    "end": "131670"
  },
  {
    "text": "you're actually using from there we can",
    "start": "131670",
    "end": "133410"
  },
  {
    "text": "go into the",
    "start": "133410",
    "end": "133980"
  },
  {
    "text": "the app component and import the HTTP",
    "start": "133980",
    "end": "136530"
  },
  {
    "text": "client which works just like an angular",
    "start": "136530",
    "end": "138599"
  },
  {
    "text": "service its injectable so we can just",
    "start": "138599",
    "end": "141060"
  },
  {
    "text": "add it right in the constructor then I'm",
    "start": "141060",
    "end": "143280"
  },
  {
    "text": "going to define a root URL variable that",
    "start": "143280",
    "end": "145620"
  },
  {
    "text": "represents the main HTTP endpoint that",
    "start": "145620",
    "end": "148200"
  },
  {
    "text": "we're going to be using for this demo",
    "start": "148200",
    "end": "150360"
  },
  {
    "text": "I'm using JSON placeholder which is just",
    "start": "150360",
    "end": "152489"
  },
  {
    "text": "a mock API that we can send request to",
    "start": "152489",
    "end": "154860"
  },
  {
    "text": "and receive responses from so we'll just",
    "start": "154860",
    "end": "157410"
  },
  {
    "text": "go ahead and copy and paste the URL and",
    "start": "157410",
    "end": "159120"
  },
  {
    "text": "then we'll do the rest of the work in",
    "start": "159120",
    "end": "160709"
  },
  {
    "text": "angular so first I'm going to opt out of",
    "start": "160709",
    "end": "163739"
  },
  {
    "text": "typescript static typing and we're going",
    "start": "163739",
    "end": "165989"
  },
  {
    "text": "to make a get request to the API first I",
    "start": "165989",
    "end": "169500"
  },
  {
    "text": "define a get post method and then I'll",
    "start": "169500",
    "end": "171930"
  },
  {
    "text": "define the post variable by a coin HTTP",
    "start": "171930",
    "end": "175079"
  },
  {
    "text": "GET and that's going to return an",
    "start": "175079",
    "end": "177510"
  },
  {
    "text": "observable so we'll pass in the route",
    "start": "177510",
    "end": "180060"
  },
  {
    "text": "URL and that should return in observable",
    "start": "180060",
    "end": "183150"
  },
  {
    "text": "of the response from the API and the",
    "start": "183150",
    "end": "186060"
  },
  {
    "text": "HTML the first thing I'll do is set up a",
    "start": "186060",
    "end": "187709"
  },
  {
    "text": "button that will trigger the API call",
    "start": "187709",
    "end": "189840"
  },
  {
    "text": "and then from there I'm going to use",
    "start": "189840",
    "end": "192569"
  },
  {
    "text": "ng-if to loop over the observable and",
    "start": "192569",
    "end": "195450"
  },
  {
    "text": "unwrap it with the async pipe then I",
    "start": "195450",
    "end": "198480"
  },
  {
    "text": "print it as a JSON object but you could",
    "start": "198480",
    "end": "200340"
  },
  {
    "text": "do anything you want here with the",
    "start": "200340",
    "end": "201660"
  },
  {
    "text": "underlying data now if we load the",
    "start": "201660",
    "end": "204720"
  },
  {
    "text": "actual app in stack blitz we should see",
    "start": "204720",
    "end": "206519"
  },
  {
    "text": "the response from JSON placeholder so",
    "start": "206519",
    "end": "209310"
  },
  {
    "text": "after clicking the post button we get a",
    "start": "209310",
    "end": "210959"
  },
  {
    "text": "response of an array of different post",
    "start": "210959",
    "end": "213569"
  },
  {
    "text": "objects for this first example I opted",
    "start": "213569",
    "end": "217380"
  },
  {
    "text": "out of typescript but now I'm going to",
    "start": "217380",
    "end": "219000"
  },
  {
    "text": "show you how to use your own interface",
    "start": "219000",
    "end": "220380"
  },
  {
    "text": "and pass it down to the get method so",
    "start": "220380",
    "end": "223769"
  },
  {
    "text": "we're exporting an interface called post",
    "start": "223769",
    "end": "225660"
  },
  {
    "text": "and it's just going to have a couple of",
    "start": "225660",
    "end": "227849"
  },
  {
    "text": "properties here for an ID user ID title",
    "start": "227849",
    "end": "231389"
  },
  {
    "text": "and body now we can import it back in",
    "start": "231389",
    "end": "234450"
  },
  {
    "text": "the app component and we'll also import",
    "start": "234450",
    "end": "236609"
  },
  {
    "text": "the rxjs observable and then we'll apply",
    "start": "236609",
    "end": "240030"
  },
  {
    "text": "these to the post variable so we're",
    "start": "240030",
    "end": "243060"
  },
  {
    "text": "going to say our post variable is an",
    "start": "243060",
    "end": "244560"
  },
  {
    "text": "observable that contains an array of",
    "start": "244560",
    "end": "246389"
  },
  {
    "text": "post objects that adhere to the post",
    "start": "246389",
    "end": "249450"
  },
  {
    "text": "interface the return value on HTTP GET",
    "start": "249450",
    "end": "252660"
  },
  {
    "text": "is typed as an object so we need to",
    "start": "252660",
    "end": "254970"
  },
  {
    "text": "change that to our post array so if we",
    "start": "254970",
    "end": "258359"
  },
  {
    "text": "go ahead and run this code we get the",
    "start": "258359",
    "end": "259590"
  },
  {
    "text": "exact same result but we have the",
    "start": "259590",
    "end": "261299"
  },
  {
    "text": "benefit of strong typing in our code at",
    "start": "261299",
    "end": "263340"
  },
  {
    "text": "this point so now I'll go ahead and opt",
    "start": "263340",
    "end": "265650"
  },
  {
    "text": "back out of typescript",
    "start": "265650",
    "end": "267720"
  },
  {
    "text": "show you how to send URL parameters with",
    "start": "267720",
    "end": "270000"
  },
  {
    "text": "your requests it's really common to send",
    "start": "270000",
    "end": "272670"
  },
  {
    "text": "a parameter with the request to limit it",
    "start": "272670",
    "end": "275040"
  },
  {
    "text": "or filter it in some kind of way on the",
    "start": "275040",
    "end": "277140"
  },
  {
    "text": "server with JSON placeholder we can",
    "start": "277140",
    "end": "280020"
  },
  {
    "text": "filter posts by the user ID so this is",
    "start": "280020",
    "end": "282720"
  },
  {
    "text": "how we would do it if we were going to",
    "start": "282720",
    "end": "283800"
  },
  {
    "text": "hard-code the parameter we'd have a",
    "start": "283800",
    "end": "285600"
  },
  {
    "text": "question mark followed by the parameter",
    "start": "285600",
    "end": "287280"
  },
  {
    "text": "and equals some value this works fine",
    "start": "287280",
    "end": "290820"
  },
  {
    "text": "but it's not a very maintainable way to",
    "start": "290820",
    "end": "292410"
  },
  {
    "text": "go because if we have multiple",
    "start": "292410",
    "end": "293790"
  },
  {
    "text": "parameters or if they get created",
    "start": "293790",
    "end": "295320"
  },
  {
    "text": "dynamically it's going to be hard to",
    "start": "295320",
    "end": "296910"
  },
  {
    "text": "hard-code them directly in a string what",
    "start": "296910",
    "end": "300390"
  },
  {
    "text": "we can do instead is use angular's HTTP",
    "start": "300390",
    "end": "302850"
  },
  {
    "text": "params class to build these parameters",
    "start": "302850",
    "end": "305130"
  },
  {
    "text": "dynamically we do that by instantiating",
    "start": "305130",
    "end": "307590"
  },
  {
    "text": "a new instance of the class and then we",
    "start": "307590",
    "end": "309570"
  },
  {
    "text": "can call set or append on the parameter",
    "start": "309570",
    "end": "311940"
  },
  {
    "text": "and the value that we want to set and",
    "start": "311940",
    "end": "313650"
  },
  {
    "text": "then we passed that as an object as the",
    "start": "313650",
    "end": "316470"
  },
  {
    "text": "second argument to our get request when",
    "start": "316470",
    "end": "320190"
  },
  {
    "text": "we send this parameter JSON placeholder",
    "start": "320190",
    "end": "322200"
  },
  {
    "text": "will only return the posts that have",
    "start": "322200",
    "end": "323760"
  },
  {
    "text": "this matching user ID we can follow a",
    "start": "323760",
    "end": "326370"
  },
  {
    "text": "very similar process for HTTP headers",
    "start": "326370",
    "end": "329070"
  },
  {
    "text": "which is going to be a very common use",
    "start": "329070",
    "end": "330930"
  },
  {
    "text": "case if you're using authentication in",
    "start": "330930",
    "end": "332880"
  },
  {
    "text": "your app let's imagine that we want to",
    "start": "332880",
    "end": "335160"
  },
  {
    "text": "send a request that can only be",
    "start": "335160",
    "end": "336450"
  },
  {
    "text": "performed by that currently logged in",
    "start": "336450",
    "end": "338100"
  },
  {
    "text": "user in that case we could",
    "start": "338100",
    "end": "340140"
  },
  {
    "text": "hypothetically send a JSON web token",
    "start": "340140",
    "end": "342330"
  },
  {
    "text": "with their authentication details in the",
    "start": "342330",
    "end": "344520"
  },
  {
    "text": "header then the server could decode that",
    "start": "344520",
    "end": "346650"
  },
  {
    "text": "token to validate that this user does",
    "start": "346650",
    "end": "348630"
  },
  {
    "text": "have the right permission to make this",
    "start": "348630",
    "end": "350220"
  },
  {
    "text": "request so just like before we pass the",
    "start": "350220",
    "end": "353010"
  },
  {
    "text": "headers as the second argument in the",
    "start": "353010",
    "end": "355770"
  },
  {
    "text": "get request so now I'm going to test",
    "start": "355770",
    "end": "359160"
  },
  {
    "text": "this out by going to that network tab in",
    "start": "359160",
    "end": "361229"
  },
  {
    "text": "chrome we can inspect the request in the",
    "start": "361229",
    "end": "364200"
  },
  {
    "text": "headers tab and we can see here that it",
    "start": "364200",
    "end": "366720"
  },
  {
    "text": "has the authorization token that we had",
    "start": "366720",
    "end": "369000"
  },
  {
    "text": "defined in angular so now let's go ahead",
    "start": "369000",
    "end": "372060"
  },
  {
    "text": "and send a post request where we",
    "start": "372060",
    "end": "374010"
  },
  {
    "text": "actually modify data on the server so",
    "start": "374010",
    "end": "376890"
  },
  {
    "text": "we'll create a new variable called new",
    "start": "376890",
    "end": "378300"
  },
  {
    "text": "post and also create a new method to",
    "start": "378300",
    "end": "381060"
  },
  {
    "text": "handle this operation post is almost",
    "start": "381060",
    "end": "384210"
  },
  {
    "text": "identical to get the only difference is",
    "start": "384210",
    "end": "385950"
  },
  {
    "text": "we send a body with the request that",
    "start": "385950",
    "end": "387900"
  },
  {
    "text": "represents the data that we want to",
    "start": "387900",
    "end": "389610"
  },
  {
    "text": "modify on the server so we'll go ahead",
    "start": "389610",
    "end": "392280"
  },
  {
    "text": "and create some random post data here",
    "start": "392280",
    "end": "394020"
  },
  {
    "text": "and then we'll send this object as the",
    "start": "394020",
    "end": "395880"
  },
  {
    "text": "second argument to the post request so",
    "start": "395880",
    "end": "399330"
  },
  {
    "text": "we call HTTP post",
    "start": "399330",
    "end": "401040"
  },
  {
    "text": "to the same URL and pass it the data",
    "start": "401040",
    "end": "404580"
  },
  {
    "text": "payload and the HTML will create another",
    "start": "404580",
    "end": "407910"
  },
  {
    "text": "button that triggers that create post",
    "start": "407910",
    "end": "409830"
  },
  {
    "text": "method the new post variable is just a",
    "start": "409830",
    "end": "412680"
  },
  {
    "text": "single object observable so we can get",
    "start": "412680",
    "end": "414660"
  },
  {
    "text": "that data by calling async and JSON then",
    "start": "414660",
    "end": "418770"
  },
  {
    "text": "we can load the app and if we click",
    "start": "418770",
    "end": "420210"
  },
  {
    "text": "create post you see we get back here the",
    "start": "420210",
    "end": "422160"
  },
  {
    "text": "object itself with that new data that",
    "start": "422160",
    "end": "424320"
  },
  {
    "text": "was created on the server one of the",
    "start": "424320",
    "end": "426930"
  },
  {
    "text": "most powerful features about angular's",
    "start": "426930",
    "end": "428610"
  },
  {
    "text": "HTTP client is that you can use any rxjs",
    "start": "428610",
    "end": "431550"
  },
  {
    "text": "operator on it so let's say we want to",
    "start": "431550",
    "end": "434310"
  },
  {
    "text": "map the post down to just the title we",
    "start": "434310",
    "end": "436860"
  },
  {
    "text": "can just throw in the map operator and",
    "start": "436860",
    "end": "438600"
  },
  {
    "text": "then map the post down to just its title",
    "start": "438600",
    "end": "441090"
  },
  {
    "text": "so if we rerun the same method we get",
    "start": "441090",
    "end": "443370"
  },
  {
    "text": "just the title back instead of the full",
    "start": "443370",
    "end": "445140"
  },
  {
    "text": "object as you can imagine there's all",
    "start": "445140",
    "end": "447510"
  },
  {
    "text": "kinds of clever things you can do with",
    "start": "447510",
    "end": "448800"
  },
  {
    "text": "rxjs",
    "start": "448800",
    "end": "449550"
  },
  {
    "text": "to handle multiple requests and map",
    "start": "449550",
    "end": "451830"
  },
  {
    "text": "everything down to the exact data format",
    "start": "451830",
    "end": "454410"
  },
  {
    "text": "that you want you can also use rxjs to",
    "start": "454410",
    "end": "457320"
  },
  {
    "text": "handle errors so in this case we'll",
    "start": "457320",
    "end": "459180"
  },
  {
    "text": "import the catch and retry operators and",
    "start": "459180",
    "end": "461910"
  },
  {
    "text": "also the observable of operator then I'm",
    "start": "461910",
    "end": "465630"
  },
  {
    "text": "going to make the post request on an",
    "start": "465630",
    "end": "467190"
  },
  {
    "text": "endpoint that doesn't actually exist",
    "start": "467190",
    "end": "468420"
  },
  {
    "text": "which is going to trigger an error",
    "start": "468420",
    "end": "470250"
  },
  {
    "text": "response first I'm going to tell rxjs to",
    "start": "470250",
    "end": "473220"
  },
  {
    "text": "retry the request three times if it",
    "start": "473220",
    "end": "475320"
  },
  {
    "text": "fails and if it continues to fail we'll",
    "start": "475320",
    "end": "477780"
  },
  {
    "text": "go ahead and catch it and we'll",
    "start": "477780",
    "end": "479370"
  },
  {
    "text": "console.log it as well as return it back",
    "start": "479370",
    "end": "481620"
  },
  {
    "text": "as an observable I'm doing this just to",
    "start": "481620",
    "end": "483540"
  },
  {
    "text": "show you the response on the front end",
    "start": "483540",
    "end": "485340"
  },
  {
    "text": "and we can do that by returning and",
    "start": "485340",
    "end": "487170"
  },
  {
    "text": "observable of the error itself so if we",
    "start": "487170",
    "end": "489990"
  },
  {
    "text": "try this out we can see we get four post",
    "start": "489990",
    "end": "492030"
  },
  {
    "text": "requests here the original one plus the",
    "start": "492030",
    "end": "493920"
  },
  {
    "text": "three retries and when it fails for good",
    "start": "493920",
    "end": "496170"
  },
  {
    "text": "it console logs the error and displays",
    "start": "496170",
    "end": "498330"
  },
  {
    "text": "the error object in the user facing",
    "start": "498330",
    "end": "500820"
  },
  {
    "text": "front end so that covers the basic HTTP",
    "start": "500820",
    "end": "503820"
  },
  {
    "text": "concepts that you need to know to get",
    "start": "503820",
    "end": "505260"
  },
  {
    "text": "started using third-party API is an",
    "start": "505260",
    "end": "507300"
  },
  {
    "text": "angular but there is one really cool",
    "start": "507300",
    "end": "509040"
  },
  {
    "text": "tool I want to show you before the end",
    "start": "509040",
    "end": "510300"
  },
  {
    "text": "of this video called swagger it's a",
    "start": "510300",
    "end": "512640"
  },
  {
    "text": "framework for building an API is both",
    "start": "512640",
    "end": "514440"
  },
  {
    "text": "server-side and client-side it allows",
    "start": "514440",
    "end": "516840"
  },
  {
    "text": "you to define API code in a readable",
    "start": "516840",
    "end": "518729"
  },
  {
    "text": "Yambol format and it can actually",
    "start": "518729",
    "end": "520830"
  },
  {
    "text": "automatically generate a lot of your",
    "start": "520830",
    "end": "522810"
  },
  {
    "text": "angular client-side code so you would",
    "start": "522810",
    "end": "525540"
  },
  {
    "text": "define the details of your API here on",
    "start": "525540",
    "end": "527490"
  },
  {
    "text": "the left and then it gives you a",
    "start": "527490",
    "end": "528960"
  },
  {
    "text": "readable documented format of it on the",
    "start": "528960",
    "end": "531480"
  },
  {
    "text": "right then if you go up to generate",
    "start": "531480",
    "end": "533490"
  },
  {
    "text": "client and go to typescript angular 2 it",
    "start": "533490",
    "end": "536880"
  },
  {
    "text": "will generate an entire angular app with",
    "start": "536880",
    "end": "539040"
  },
  {
    "text": "the swagger API built into it you can",
    "start": "539040",
    "end": "542459"
  },
  {
    "text": "download the generated code and then",
    "start": "542459",
    "end": "544019"
  },
  {
    "text": "open it in your editor and you'll see",
    "start": "544019",
    "end": "545970"
  },
  {
    "text": "you have a bunch of angular code here",
    "start": "545970",
    "end": "547889"
  },
  {
    "text": "with the HTTP module but I should warn",
    "start": "547889",
    "end": "550800"
  },
  {
    "text": "you this is the previous version of HTTP",
    "start": "550800",
    "end": "553199"
  },
  {
    "text": "and angular so just keep that in mind",
    "start": "553199",
    "end": "555380"
  },
  {
    "text": "many of the methods and concepts will be",
    "start": "555380",
    "end": "557850"
  },
  {
    "text": "identical but you won't be able to use",
    "start": "557850",
    "end": "559529"
  },
  {
    "text": "this code line for line in any case it",
    "start": "559529",
    "end": "562139"
  },
  {
    "text": "should give you some good ideas and help",
    "start": "562139",
    "end": "563790"
  },
  {
    "text": "you jump-start the process of building",
    "start": "563790",
    "end": "565470"
  },
  {
    "text": "your own front-end API client that's it",
    "start": "565470",
    "end": "568829"
  },
  {
    "text": "for angular HTTP if this video helped",
    "start": "568829",
    "end": "571440"
  },
  {
    "text": "you please like and subscribe and if you",
    "start": "571440",
    "end": "573300"
  },
  {
    "text": "want to go beyond the basics consider",
    "start": "573300",
    "end": "574800"
  },
  {
    "text": "becoming a pro subscriber at angular",
    "start": "574800",
    "end": "576930"
  },
  {
    "text": "firebase comm you'll get a free copy of",
    "start": "576930",
    "end": "579240"
  },
  {
    "text": "my book as well as one on one project",
    "start": "579240",
    "end": "581160"
  },
  {
    "text": "consulting thanks for watching and I'll",
    "start": "581160",
    "end": "583889"
  },
  {
    "text": "see you next time",
    "start": "583889",
    "end": "586579"
  },
  {
    "text": "[Music]",
    "start": "590220",
    "end": "594940"
  },
  {
    "text": "[Applause]",
    "start": "594940",
    "end": "597489"
  }
]