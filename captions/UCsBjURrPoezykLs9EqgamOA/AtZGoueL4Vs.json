[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "version two of the paypal api was",
    "start": "0",
    "end": "1860"
  },
  {
    "text": "released earlier this year and it makes",
    "start": "1860",
    "end": "3570"
  },
  {
    "text": "the extremely easy to start accepting",
    "start": "3570",
    "end": "5130"
  },
  {
    "text": "payments from your progressive web app",
    "start": "5130",
    "end": "6720"
  },
  {
    "text": "it's so easy in fact that I can show you",
    "start": "6720",
    "end": "8309"
  },
  {
    "text": "how to integrate it into angular react",
    "start": "8309",
    "end": "10230"
  },
  {
    "text": "and view in a single video dollar dollar",
    "start": "10230",
    "end": "13019"
  },
  {
    "text": "bill y'all in today's video you'll learn",
    "start": "13019",
    "end": "15089"
  },
  {
    "text": "the basics of the paypal version two API",
    "start": "15089",
    "end": "17190"
  },
  {
    "text": "and how to start accepting and capturing",
    "start": "17190",
    "end": "19199"
  },
  {
    "text": "real payments from your front-end",
    "start": "19199",
    "end": "20550"
  },
  {
    "text": "JavaScript app and it's a lot easier",
    "start": "20550",
    "end": "22380"
  },
  {
    "text": "than you might think if you're new here",
    "start": "22380",
    "end": "23640"
  },
  {
    "text": "like and subscribe and you can find the",
    "start": "23640",
    "end": "25350"
  },
  {
    "text": "full source code on fire ship io now",
    "start": "25350",
    "end": "27660"
  },
  {
    "start": "27000",
    "end": "127000"
  },
  {
    "text": "just a few days ago I implemented",
    "start": "27660",
    "end": "29460"
  },
  {
    "text": "PayPal payments on fire ship and also",
    "start": "29460",
    "end": "31380"
  },
  {
    "text": "added the ability to purchase individual",
    "start": "31380",
    "end": "33180"
  },
  {
    "text": "courses so ironically you can now use",
    "start": "33180",
    "end": "35370"
  },
  {
    "text": "PayPal to pay for my strength payments",
    "start": "35370",
    "end": "37140"
  },
  {
    "text": "course if you want now during this",
    "start": "37140",
    "end": "38610"
  },
  {
    "text": "integration I learned that PayPal 2.0",
    "start": "38610",
    "end": "40620"
  },
  {
    "text": "delivers a really nice developer",
    "start": "40620",
    "end": "42090"
  },
  {
    "text": "experience they've completely revamped",
    "start": "42090",
    "end": "43710"
  },
  {
    "text": "the documentation and the API in a way",
    "start": "43710",
    "end": "46050"
  },
  {
    "text": "that resembles stripe payments now in my",
    "start": "46050",
    "end": "48059"
  },
  {
    "text": "case I already have stripe implemented",
    "start": "48059",
    "end": "49530"
  },
  {
    "text": "so I'm using PayPal alongside it as an",
    "start": "49530",
    "end": "51510"
  },
  {
    "text": "additional option but you can actually",
    "start": "51510",
    "end": "52949"
  },
  {
    "text": "use PayPal as a standalone payment",
    "start": "52949",
    "end": "54690"
  },
  {
    "text": "solution to accept credit cards venmo",
    "start": "54690",
    "end": "56820"
  },
  {
    "text": "crypto and more well we'll be looking at",
    "start": "56820",
    "end": "58800"
  },
  {
    "text": "today as PayPal checkout which allows",
    "start": "58800",
    "end": "60420"
  },
  {
    "text": "you to mount this payment button",
    "start": "60420",
    "end": "61859"
  },
  {
    "text": "directly in your application and it will",
    "start": "61859",
    "end": "63719"
  },
  {
    "text": "take care of collecting payment details",
    "start": "63719",
    "end": "65189"
  },
  {
    "text": "from the user and can also capture and",
    "start": "65189",
    "end": "67140"
  },
  {
    "text": "charge the payment entirely from the",
    "start": "67140",
    "end": "68580"
  },
  {
    "text": "front end the first thing you'll need to",
    "start": "68580",
    "end": "69960"
  },
  {
    "text": "get started is a PayPal business account",
    "start": "69960",
    "end": "71700"
  },
  {
    "text": "from there you can go to the PayPal",
    "start": "71700",
    "end": "73290"
  },
  {
    "text": "developers dashboard and the first thing",
    "start": "73290",
    "end": "75090"
  },
  {
    "text": "you'll want to do is create an",
    "start": "75090",
    "end": "76320"
  },
  {
    "text": "application when you create this",
    "start": "76320",
    "end": "77790"
  },
  {
    "text": "application it will give you two sets of",
    "start": "77790",
    "end": "79500"
  },
  {
    "text": "API keys these sandbox keys are used to",
    "start": "79500",
    "end": "81570"
  },
  {
    "text": "make mock payments and to test your",
    "start": "81570",
    "end": "83159"
  },
  {
    "text": "integration and live keys are used for",
    "start": "83159",
    "end": "84900"
  },
  {
    "text": "actual payments in your production app",
    "start": "84900",
    "end": "86369"
  },
  {
    "text": "now each of these environments contains",
    "start": "86369",
    "end": "88080"
  },
  {
    "text": "two API keys the client ID and the",
    "start": "88080",
    "end": "90540"
  },
  {
    "text": "secret the client ID is perfectly safe",
    "start": "90540",
    "end": "92700"
  },
  {
    "text": "to expose in your front-end application",
    "start": "92700",
    "end": "94320"
  },
  {
    "text": "and we'll use that client ID in the",
    "start": "94320",
    "end": "96119"
  },
  {
    "text": "angular react and view apps the secret",
    "start": "96119",
    "end": "98400"
  },
  {
    "text": "on the other hand should never be",
    "start": "98400",
    "end": "99540"
  },
  {
    "text": "exposed in your front-end code or a",
    "start": "99540",
    "end": "100950"
  },
  {
    "text": "public github repo a secret is used to",
    "start": "100950",
    "end": "103229"
  },
  {
    "text": "identify your app to a back-end server",
    "start": "103229",
    "end": "104759"
  },
  {
    "text": "like node or firebase cloud functions so",
    "start": "104759",
    "end": "107340"
  },
  {
    "text": "you can use it to interact with the API",
    "start": "107340",
    "end": "108720"
  },
  {
    "text": "from the backend but we actually don't",
    "start": "108720",
    "end": "110640"
  },
  {
    "text": "even need to use it in this demo and",
    "start": "110640",
    "end": "112140"
  },
  {
    "text": "that's because you can use PayPal",
    "start": "112140",
    "end": "113399"
  },
  {
    "text": "checkout to do everything entirely from",
    "start": "113399",
    "end": "114960"
  },
  {
    "text": "the front-end and we'll talk a little",
    "start": "114960",
    "end": "116310"
  },
  {
    "text": "bit more about the trade-offs later in",
    "start": "116310",
    "end": "117600"
  },
  {
    "text": "the video",
    "start": "117600",
    "end": "117960"
  },
  {
    "text": "now we're going to implement the same",
    "start": "117960",
    "end": "119909"
  },
  {
    "text": "basic payment spec in angular reactant",
    "start": "119909",
    "end": "122070"
  },
  {
    "text": "view and even though each app is solving",
    "start": "122070",
    "end": "123960"
  },
  {
    "text": "the same exact problem the",
    "start": "123960",
    "end": "125250"
  },
  {
    "text": "implementation details vary widely let's",
    "start": "125250",
    "end": "127829"
  },
  {
    "start": "127000",
    "end": "342000"
  },
  {
    "text": "go ahead and get started with my",
    "start": "127829",
    "end": "128759"
  },
  {
    "text": "personal favorite and generate a new",
    "start": "128759",
    "end": "130470"
  },
  {
    "text": "angular app with the CLI the first thing",
    "start": "130470",
    "end": "132870"
  },
  {
    "text": "we'll do is go into the",
    "start": "132870",
    "end": "133890"
  },
  {
    "text": "XHTML file and include the script tag",
    "start": "133890",
    "end": "136290"
  },
  {
    "text": "for paypal Jas when you include the",
    "start": "136290",
    "end": "138630"
  },
  {
    "text": "script tag you'll also need to pass in",
    "start": "138630",
    "end": "140340"
  },
  {
    "text": "your client ID and you want to stick to",
    "start": "140340",
    "end": "142110"
  },
  {
    "text": "the sandbox client ID for now and again",
    "start": "142110",
    "end": "144390"
  },
  {
    "text": "you can retrieve that from the PayPal",
    "start": "144390",
    "end": "145770"
  },
  {
    "text": "developer dashboard now a quick side",
    "start": "145770",
    "end": "147930"
  },
  {
    "text": "note you might be wondering why we're",
    "start": "147930",
    "end": "149160"
  },
  {
    "text": "using a script tag and not installing an",
    "start": "149160",
    "end": "150840"
  },
  {
    "text": "NPM module the reason payment systems",
    "start": "150840",
    "end": "152910"
  },
  {
    "text": "generally use script tags is because",
    "start": "152910",
    "end": "154530"
  },
  {
    "text": "they want your site to always have the",
    "start": "154530",
    "end": "156060"
  },
  {
    "text": "latest version of the SDK a security",
    "start": "156060",
    "end": "158430"
  },
  {
    "text": "flaw on a payment system is a very big",
    "start": "158430",
    "end": "160140"
  },
  {
    "text": "deal so they want to make sure that",
    "start": "160140",
    "end": "161310"
  },
  {
    "text": "you're not running outdated code the",
    "start": "161310",
    "end": "163560"
  },
  {
    "text": "next thing I'll do is generate a",
    "start": "163560",
    "end": "164550"
  },
  {
    "text": "component then in the top of that",
    "start": "164550",
    "end": "165930"
  },
  {
    "text": "component",
    "start": "165930",
    "end": "166440"
  },
  {
    "text": "I'll declare a variable for PayPal that",
    "start": "166440",
    "end": "168630"
  },
  {
    "text": "PayPal script creates a global variable",
    "start": "168630",
    "end": "170190"
  },
  {
    "text": "called PayPal that lives on the window",
    "start": "170190",
    "end": "171959"
  },
  {
    "text": "object and that's how we make it known",
    "start": "171959",
    "end": "173519"
  },
  {
    "text": "to typescript the first thing that",
    "start": "173519",
    "end": "175019"
  },
  {
    "text": "PayPal needs to do is Mount the actual",
    "start": "175019",
    "end": "176820"
  },
  {
    "text": "button to the Dom so we need to grab an",
    "start": "176820",
    "end": "179100"
  },
  {
    "text": "HTML element that PayPal can attach",
    "start": "179100",
    "end": "181110"
  },
  {
    "text": "itself to in angular we can do that with",
    "start": "181110",
    "end": "183450"
  },
  {
    "text": "the view child decorator and then pass",
    "start": "183450",
    "end": "185280"
  },
  {
    "text": "in the name of the template reference",
    "start": "185280",
    "end": "186930"
  },
  {
    "text": "variable and we can make that reference",
    "start": "186930",
    "end": "188760"
  },
  {
    "text": "in the HTML with a hash tag now in these",
    "start": "188760",
    "end": "191220"
  },
  {
    "text": "examples we're just going to hard code",
    "start": "191220",
    "end": "192780"
  },
  {
    "text": "the product data directly into the",
    "start": "192780",
    "end": "194400"
  },
  {
    "text": "components but in real life you'll most",
    "start": "194400",
    "end": "196350"
  },
  {
    "text": "likely be pulling this information from",
    "start": "196350",
    "end": "197760"
  },
  {
    "text": "an API or a database somewhere in this",
    "start": "197760",
    "end": "200160"
  },
  {
    "text": "example here we just need some data for",
    "start": "200160",
    "end": "201690"
  },
  {
    "text": "the product and then we'll set a boolean",
    "start": "201690",
    "end": "203549"
  },
  {
    "text": "that will tell us whether or not that",
    "start": "203549",
    "end": "204720"
  },
  {
    "text": "products been paid for when the",
    "start": "204720",
    "end": "206340"
  },
  {
    "text": "component is initialized is when we'll",
    "start": "206340",
    "end": "207900"
  },
  {
    "text": "mount the PayPal button to the Dom",
    "start": "207900",
    "end": "209549"
  },
  {
    "text": "element so we call PayPal buttons and",
    "start": "209549",
    "end": "211739"
  },
  {
    "text": "then pass in the native Dom element to",
    "start": "211739",
    "end": "213630"
  },
  {
    "text": "the render method we can pass an object",
    "start": "213630",
    "end": "215640"
  },
  {
    "text": "to buttons",
    "start": "215640",
    "end": "216570"
  },
  {
    "text": "that contains the callbacks used to",
    "start": "216570",
    "end": "218340"
  },
  {
    "text": "handle different events that happen in",
    "start": "218340",
    "end": "219780"
  },
  {
    "text": "the payment lifecycle the first thing",
    "start": "219780",
    "end": "221400"
  },
  {
    "text": "that happens in the lifecycle is the",
    "start": "221400",
    "end": "222959"
  },
  {
    "text": "user clicks on the PayPal button and we",
    "start": "222959",
    "end": "224790"
  },
  {
    "text": "need to configure the order details to",
    "start": "224790",
    "end": "226350"
  },
  {
    "text": "send a paypal so they can process the",
    "start": "226350",
    "end": "228000"
  },
  {
    "text": "payment so we call actions or to create",
    "start": "228000",
    "end": "229920"
  },
  {
    "text": "and we can pass in a bunch of custom",
    "start": "229920",
    "end": "231750"
  },
  {
    "text": "options here but at the bare minimum",
    "start": "231750",
    "end": "233100"
  },
  {
    "text": "you'll want to have at least one",
    "start": "233100",
    "end": "234390"
  },
  {
    "text": "purchase unit and that should at least",
    "start": "234390",
    "end": "235860"
  },
  {
    "text": "contain a description and an amount with",
    "start": "235860",
    "end": "237720"
  },
  {
    "text": "a currency code this will send the user",
    "start": "237720",
    "end": "239430"
  },
  {
    "text": "over to PayPal where they can authorize",
    "start": "239430",
    "end": "240959"
  },
  {
    "text": "the order they can check out as a guest",
    "start": "240959",
    "end": "242489"
  },
  {
    "text": "with their credit card details or they",
    "start": "242489",
    "end": "244170"
  },
  {
    "text": "can use their PayPal balance or some",
    "start": "244170",
    "end": "245940"
  },
  {
    "text": "other form of payment on their account",
    "start": "245940",
    "end": "247230"
  },
  {
    "text": "at this point the order is authorized",
    "start": "247230",
    "end": "249390"
  },
  {
    "text": "and approved but the actual funds have",
    "start": "249390",
    "end": "251040"
  },
  {
    "text": "not been captured yet or in other words",
    "start": "251040",
    "end": "252600"
  },
  {
    "text": "the credit card has not been charged for",
    "start": "252600",
    "end": "254220"
  },
  {
    "text": "most simple use cases you can simply",
    "start": "254220",
    "end": "256470"
  },
  {
    "text": "capture the payment directly in your",
    "start": "256470",
    "end": "257729"
  },
  {
    "text": "front-end code by calling actions order",
    "start": "257729",
    "end": "259769"
  },
  {
    "text": "capture now it's important to point out",
    "start": "259769",
    "end": "261810"
  },
  {
    "text": "that you don't actually need to capture",
    "start": "261810",
    "end": "263280"
  },
  {
    "text": "the funds here if you don't want to an",
    "start": "263280",
    "end": "265229"
  },
  {
    "text": "alternative would be to send the data",
    "start": "265229",
    "end": "266729"
  },
  {
    "text": "from the",
    "start": "266729",
    "end": "267270"
  },
  {
    "text": "call back to your back-end server and",
    "start": "267270",
    "end": "268830"
  },
  {
    "text": "then process the charge there and that",
    "start": "268830",
    "end": "270629"
  },
  {
    "text": "tends to be a better option for more",
    "start": "270629",
    "end": "272129"
  },
  {
    "text": "advanced use cases where you might need",
    "start": "272129",
    "end": "273629"
  },
  {
    "text": "to validate the payment and then do",
    "start": "273629",
    "end": "275250"
  },
  {
    "text": "additional backend work after the",
    "start": "275250",
    "end": "276720"
  },
  {
    "text": "payment has been captured we're just",
    "start": "276720",
    "end": "278610"
  },
  {
    "text": "going to stick with the EZ wrap here and",
    "start": "278610",
    "end": "280289"
  },
  {
    "text": "capture the payment directly an angular",
    "start": "280289",
    "end": "281940"
  },
  {
    "text": "and then we'll set the paid for property",
    "start": "281940",
    "end": "283710"
  },
  {
    "text": "to true and that's something that you",
    "start": "283710",
    "end": "285300"
  },
  {
    "text": "would obviously want to persist in a",
    "start": "285300",
    "end": "286770"
  },
  {
    "text": "back-end as well in a real application",
    "start": "286770",
    "end": "288030"
  },
  {
    "text": "and the last thing I'll point out is",
    "start": "288030",
    "end": "290039"
  },
  {
    "text": "that there are additional callbacks we",
    "start": "290039",
    "end": "291479"
  },
  {
    "text": "can use here as well for example if we",
    "start": "291479",
    "end": "293159"
  },
  {
    "text": "want to catch errors we can use on error",
    "start": "293159",
    "end": "295020"
  },
  {
    "text": "to do that that takes care of our",
    "start": "295020",
    "end": "296729"
  },
  {
    "text": "typescript code now we can go over to",
    "start": "296729",
    "end": "298229"
  },
  {
    "text": "the HTML and set up our template logic",
    "start": "298229",
    "end": "300599"
  },
  {
    "text": "we'll use ng if to see if the item has",
    "start": "300599",
    "end": "302909"
  },
  {
    "text": "not been paid for and if not we'll go",
    "start": "302909",
    "end": "304710"
  },
  {
    "text": "ahead and show the price and product",
    "start": "304710",
    "end": "306060"
  },
  {
    "text": "details as well as the PayPal button and",
    "start": "306060",
    "end": "308099"
  },
  {
    "text": "if it has been paid for then we'll just",
    "start": "308099",
    "end": "310080"
  },
  {
    "text": "go ahead and show an order confirmation",
    "start": "310080",
    "end": "311370"
  },
  {
    "text": "and just like that we now have a full",
    "start": "311370",
    "end": "313740"
  },
  {
    "text": "stack payment solution in angular now",
    "start": "313740",
    "end": "315690"
  },
  {
    "text": "one thing I really like about PayPal is",
    "start": "315690",
    "end": "317190"
  },
  {
    "text": "that you can set up multiple mock",
    "start": "317190",
    "end": "318449"
  },
  {
    "text": "accounts and then you could add funds to",
    "start": "318449",
    "end": "320069"
  },
  {
    "text": "those mock accounts as well as credit",
    "start": "320069",
    "end": "321419"
  },
  {
    "text": "cards and bank accounts and things like",
    "start": "321419",
    "end": "323009"
  },
  {
    "text": "that so it makes it really easy to test",
    "start": "323009",
    "end": "325199"
  },
  {
    "text": "your implementation details in the",
    "start": "325199",
    "end": "326639"
  },
  {
    "text": "sandbox and that also makes it easy to",
    "start": "326639",
    "end": "328440"
  },
  {
    "text": "perform negative testing where you",
    "start": "328440",
    "end": "330030"
  },
  {
    "text": "handle different error conditions in our",
    "start": "330030",
    "end": "331919"
  },
  {
    "text": "demo here you can see we have a",
    "start": "331919",
    "end": "333180"
  },
  {
    "text": "successful mock payment and then at",
    "start": "333180",
    "end": "334830"
  },
  {
    "text": "console logs the payment details to the",
    "start": "334830",
    "end": "336569"
  },
  {
    "text": "browser and you can send this data to",
    "start": "336569",
    "end": "338159"
  },
  {
    "text": "your back-end to record in a database or",
    "start": "338159",
    "end": "340229"
  },
  {
    "text": "send a user a confirmation email and",
    "start": "340229",
    "end": "341759"
  },
  {
    "text": "stuff like that that takes care of our",
    "start": "341759",
    "end": "343889"
  },
  {
    "start": "342000",
    "end": "541000"
  },
  {
    "text": "angular integration now let's move on to",
    "start": "343889",
    "end": "345599"
  },
  {
    "text": "react I'll use create react app to",
    "start": "345599",
    "end": "347699"
  },
  {
    "text": "generate a new application and we'll",
    "start": "347699",
    "end": "349680"
  },
  {
    "text": "want to build this app the modern way so",
    "start": "349680",
    "end": "351449"
  },
  {
    "text": "we'll go ahead and import some hooks",
    "start": "351449",
    "end": "352680"
  },
  {
    "text": "like you state use ref and use a fact",
    "start": "352680",
    "end": "354990"
  },
  {
    "text": "now including a script tag and react",
    "start": "354990",
    "end": "356759"
  },
  {
    "text": "isn't quite as easy as it is an angular",
    "start": "356759",
    "end": "358319"
  },
  {
    "text": "and we need to manually create the",
    "start": "358319",
    "end": "360360"
  },
  {
    "text": "script and then append it to the Dom so",
    "start": "360360",
    "end": "362099"
  },
  {
    "text": "we have two different pieces of state",
    "start": "362099",
    "end": "363240"
  },
  {
    "text": "the first one paid for will tell us",
    "start": "363240",
    "end": "365099"
  },
  {
    "text": "whether or not the product has been paid",
    "start": "365099",
    "end": "366419"
  },
  {
    "text": "for and then we'll have a loaded State",
    "start": "366419",
    "end": "367949"
  },
  {
    "text": "that will tell us when the actual paypal",
    "start": "367949",
    "end": "369630"
  },
  {
    "text": "script has been loaded and if you know",
    "start": "369630",
    "end": "371130"
  },
  {
    "text": "of a better way to do this with react",
    "start": "371130",
    "end": "372419"
  },
  {
    "text": "hooks let me know in the comments then",
    "start": "372419",
    "end": "374159"
  },
  {
    "text": "we'll also use the use ref hooks so we",
    "start": "374159",
    "end": "375960"
  },
  {
    "text": "can set up a reference to a Dom element",
    "start": "375960",
    "end": "377370"
  },
  {
    "text": "that the actual PayPal button can be",
    "start": "377370",
    "end": "379289"
  },
  {
    "text": "mounted to now at this point I'm going",
    "start": "379289",
    "end": "381000"
  },
  {
    "text": "to jump into the JSX and build out the",
    "start": "381000",
    "end": "382860"
  },
  {
    "text": "template this fall is the same general",
    "start": "382860",
    "end": "384509"
  },
  {
    "text": "structure that we saw in angular if the",
    "start": "384509",
    "end": "386190"
  },
  {
    "text": "item has been paid for then we'll show",
    "start": "386190",
    "end": "387509"
  },
  {
    "text": "the confirmation otherwise we'll go",
    "start": "387509",
    "end": "389279"
  },
  {
    "text": "ahead and show the actual product",
    "start": "389279",
    "end": "390870"
  },
  {
    "text": "details and the payment button and to",
    "start": "390870",
    "end": "392940"
  },
  {
    "text": "grab an empty div from the Dom for the",
    "start": "392940",
    "end": "394650"
  },
  {
    "text": "button we'll go ahead and use that",
    "start": "394650",
    "end": "395699"
  },
  {
    "text": "reference that we defined with the use",
    "start": "395699",
    "end": "397740"
  },
  {
    "text": "ref hook now the next thing we need to",
    "start": "397740",
    "end": "399509"
  },
  {
    "text": "do is get the actual paypal J",
    "start": "399509",
    "end": "401139"
  },
  {
    "text": "script into our code we can do that",
    "start": "401139",
    "end": "402849"
  },
  {
    "text": "imperative Lee in the use effect hook",
    "start": "402849",
    "end": "404409"
  },
  {
    "text": "and then we'll define the script source",
    "start": "404409",
    "end": "405789"
  },
  {
    "text": "as the same source that we used in the",
    "start": "405789",
    "end": "407439"
  },
  {
    "text": "angular app but this time we want to add",
    "start": "407439",
    "end": "409479"
  },
  {
    "text": "an event listener to the load event and",
    "start": "409479",
    "end": "411249"
  },
  {
    "text": "then when it's finished loading will set",
    "start": "411249",
    "end": "412870"
  },
  {
    "text": "the loaded property to true on this",
    "start": "412870",
    "end": "414460"
  },
  {
    "text": "react component once we know that the",
    "start": "414460",
    "end": "416110"
  },
  {
    "text": "scripts been loaded we can then",
    "start": "416110",
    "end": "417249"
  },
  {
    "text": "initialize our paypal button but for",
    "start": "417249",
    "end": "419199"
  },
  {
    "text": "whatever reason I had to wrap this in a",
    "start": "419199",
    "end": "420789"
  },
  {
    "text": "set timeout because there seems to be",
    "start": "420789",
    "end": "422199"
  },
  {
    "text": "some weird issue between one of the",
    "start": "422199",
    "end": "423669"
  },
  {
    "text": "dependencies in PayPal Jas and react but",
    "start": "423669",
    "end": "425979"
  },
  {
    "text": "feel free to submit a pull request if",
    "start": "425979",
    "end": "427479"
  },
  {
    "text": "you have a good workaround for this demo",
    "start": "427479",
    "end": "428919"
  },
  {
    "text": "now at this point we can access PayPal",
    "start": "428919",
    "end": "430990"
  },
  {
    "text": "from the window object and then we'll",
    "start": "430990",
    "end": "432490"
  },
  {
    "text": "have the exact same code that we wrote",
    "start": "432490",
    "end": "433810"
  },
  {
    "text": "previously in the angular example the",
    "start": "433810",
    "end": "435759"
  },
  {
    "text": "only difference is that we're using",
    "start": "435759",
    "end": "436719"
  },
  {
    "text": "react hooks to update the state and to",
    "start": "436719",
    "end": "438939"
  },
  {
    "text": "grab the Dom element to mount the actual",
    "start": "438939",
    "end": "440919"
  },
  {
    "text": "button itself and that's all it takes to",
    "start": "440919",
    "end": "442599"
  },
  {
    "text": "get started with react and if you check",
    "start": "442599",
    "end": "444279"
  },
  {
    "text": "out the PayPal J's repo you'll see an",
    "start": "444279",
    "end": "445900"
  },
  {
    "text": "example for react in there as well but",
    "start": "445900",
    "end": "447550"
  },
  {
    "text": "it doesn't use hooks but enough of react",
    "start": "447550",
    "end": "449409"
  },
  {
    "text": "let's go ahead and move on to view we",
    "start": "449409",
    "end": "451569"
  },
  {
    "text": "can start by generating a new view app",
    "start": "451569",
    "end": "453219"
  },
  {
    "text": "with the view CLI and then we'll start",
    "start": "453219",
    "end": "455169"
  },
  {
    "text": "by defining the template because it's",
    "start": "455169",
    "end": "456669"
  },
  {
    "text": "conveniently located at the top of the",
    "start": "456669",
    "end": "458259"
  },
  {
    "text": "file the template logic is very similar",
    "start": "458259",
    "end": "460089"
  },
  {
    "text": "to angular because view also uses",
    "start": "460089",
    "end": "461919"
  },
  {
    "text": "directives so again we'll show the item",
    "start": "461919",
    "end": "463779"
  },
  {
    "text": "details if the item is not paid for and",
    "start": "463779",
    "end": "465879"
  },
  {
    "text": "then if it is paid for we'll show the",
    "start": "465879",
    "end": "467199"
  },
  {
    "text": "order confirmation and then we'll also",
    "start": "467199",
    "end": "469120"
  },
  {
    "text": "make a reference to an empty div with a",
    "start": "469120",
    "end": "470830"
  },
  {
    "text": "ref of PayPal the next thing we'll do is",
    "start": "470830",
    "end": "473229"
  },
  {
    "text": "define the data for this component which",
    "start": "473229",
    "end": "474879"
  },
  {
    "text": "is exactly the same as react but instead",
    "start": "474879",
    "end": "477279"
  },
  {
    "text": "of hooks we use a data function that",
    "start": "477279",
    "end": "479289"
  },
  {
    "text": "returns an object with the data that we",
    "start": "479289",
    "end": "481029"
  },
  {
    "text": "use in this component and view will",
    "start": "481029",
    "end": "483099"
  },
  {
    "text": "react automatically if we change any of",
    "start": "483099",
    "end": "484870"
  },
  {
    "text": "the properties on this object the next",
    "start": "484870",
    "end": "487000"
  },
  {
    "text": "thing we'll do is append the paypal",
    "start": "487000",
    "end": "488199"
  },
  {
    "text": "script to this application in the",
    "start": "488199",
    "end": "489819"
  },
  {
    "text": "mounted life-cycle hook this is the",
    "start": "489819",
    "end": "491800"
  },
  {
    "text": "exact same thing we did and they use",
    "start": "491800",
    "end": "493240"
  },
  {
    "text": "effect hook with react when the script",
    "start": "493240",
    "end": "495250"
  },
  {
    "text": "is loaded we'll have access to the",
    "start": "495250",
    "end": "496629"
  },
  {
    "text": "global paypal object and then we'll",
    "start": "496629",
    "end": "498759"
  },
  {
    "text": "mount it to that empty div that we made",
    "start": "498759",
    "end": "500379"
  },
  {
    "text": "a reference to earlier from there the",
    "start": "500379",
    "end": "502360"
  },
  {
    "text": "callbacks will be the same as the",
    "start": "502360",
    "end": "503500"
  },
  {
    "text": "previous examples where we first create",
    "start": "503500",
    "end": "505270"
  },
  {
    "text": "the order and then we capture the order",
    "start": "505270",
    "end": "506860"
  },
  {
    "text": "and handle any errors if necessary and",
    "start": "506860",
    "end": "508960"
  },
  {
    "text": "that's all it takes to implement paypal",
    "start": "508960",
    "end": "510639"
  },
  {
    "text": "in a view app",
    "start": "510639",
    "end": "513330"
  },
  {
    "text": "well that was easy yeah I guess it was",
    "start": "513909",
    "end": "517120"
  },
  {
    "text": "my goal with these three examples was to",
    "start": "517120",
    "end": "519399"
  },
  {
    "text": "show you how easy it is to start",
    "start": "519399",
    "end": "520690"
  },
  {
    "text": "monetizing your progressive web app but",
    "start": "520690",
    "end": "522370"
  },
  {
    "text": "if you want to learn more advanced",
    "start": "522370",
    "end": "523508"
  },
  {
    "text": "techniques consider becoming a pro",
    "start": "523509",
    "end": "524949"
  },
  {
    "text": "member to enroll in the stripe payments",
    "start": "524949",
    "end": "526509"
  },
  {
    "text": "master course you'll learn how to build",
    "start": "526509",
    "end": "528310"
  },
  {
    "text": "and test a reliable payment system that",
    "start": "528310",
    "end": "530079"
  },
  {
    "text": "can work with any front-end framework",
    "start": "530079",
    "end": "531490"
  },
  {
    "text": "thanks for watching and I will talk to",
    "start": "531490",
    "end": "533350"
  },
  {
    "text": "you soon",
    "start": "533350",
    "end": "535540"
  },
  {
    "text": "[Music]",
    "start": "535540",
    "end": "543699"
  }
]