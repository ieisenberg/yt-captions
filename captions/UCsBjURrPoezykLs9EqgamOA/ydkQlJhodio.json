[
  {
    "text": "when I started this YouTube channel four",
    "start": "0",
    "end": "1680"
  },
  {
    "text": "years ago most react developers would",
    "start": "1680",
    "end": "3540"
  },
  {
    "text": "have laughed at the idea of using",
    "start": "3540",
    "end": "4859"
  },
  {
    "text": "something like typescript you should",
    "start": "4859",
    "end": "7020"
  },
  {
    "text": "you should nah bro like why would you",
    "start": "7020",
    "end": "9120"
  },
  {
    "text": "take your beautiful functional",
    "start": "9120",
    "end": "10320"
  },
  {
    "text": "JavaScript and bloat it with a bunch of",
    "start": "10320",
    "end": "11880"
  },
  {
    "text": "type definitions that make it look like",
    "start": "11880",
    "end": "13440"
  },
  {
    "text": "the real Jabba I was very skeptical of",
    "start": "13440",
    "end": "15420"
  },
  {
    "text": "it myself when I first started using it",
    "start": "15420",
    "end": "17100"
  },
  {
    "text": "in an angular project in 2017. now maybe",
    "start": "17100",
    "end": "19619"
  },
  {
    "text": "it's just the Stockholm syndrome talking",
    "start": "19619",
    "end": "21060"
  },
  {
    "text": "but after using it I've never wanted to",
    "start": "21060",
    "end": "23100"
  },
  {
    "text": "go back but I don't think I'm alone",
    "start": "23100",
    "end": "24359"
  },
  {
    "text": "because it was the second most loved",
    "start": "24359",
    "end": "25920"
  },
  {
    "text": "technology on the 2020 stack Overflow",
    "start": "25920",
    "end": "28080"
  },
  {
    "text": "survey in today's video you'll learn",
    "start": "28080",
    "end": "29760"
  },
  {
    "text": "everything you need to know to get",
    "start": "29760",
    "end": "30960"
  },
  {
    "text": "started with typescript and react but",
    "start": "30960",
    "end": "32880"
  },
  {
    "text": "more importantly we'll talk about why or",
    "start": "32880",
    "end": "34860"
  },
  {
    "text": "why not you should use it because",
    "start": "34860",
    "end": "36239"
  },
  {
    "text": "there's a good case to be made for both",
    "start": "36239",
    "end": "37980"
  },
  {
    "text": "sides of that argument if you're new",
    "start": "37980",
    "end": "39420"
  },
  {
    "text": "here like And subscribe and become a pro",
    "start": "39420",
    "end": "41160"
  },
  {
    "text": "member at fireship i o to get access to",
    "start": "41160",
    "end": "43320"
  },
  {
    "text": "my full next JS react course to decide",
    "start": "43320",
    "end": "45780"
  },
  {
    "text": "whether or not you want to use",
    "start": "45780",
    "end": "46620"
  },
  {
    "text": "typescript let's take a look at two",
    "start": "46620",
    "end": "48180"
  },
  {
    "text": "different projects side by side one with",
    "start": "48180",
    "end": "50100"
  },
  {
    "text": "typescript and one without there are",
    "start": "50100",
    "end": "51960"
  },
  {
    "text": "many different ways to add typescript to",
    "start": "51960",
    "end": "53520"
  },
  {
    "text": "a react app in this case I'm using the",
    "start": "53520",
    "end": "55620"
  },
  {
    "text": "create react app tool but specifying the",
    "start": "55620",
    "end": "57899"
  },
  {
    "text": "typescript template the docs also have",
    "start": "57899",
    "end": "59820"
  },
  {
    "text": "instructions for adding it to an",
    "start": "59820",
    "end": "61379"
  },
  {
    "text": "existing project or you can learn how to",
    "start": "61379",
    "end": "63059"
  },
  {
    "text": "set it up in next.js in my course if we",
    "start": "63059",
    "end": "65220"
  },
  {
    "text": "look at the file system on these two",
    "start": "65220",
    "end": "66600"
  },
  {
    "text": "projects side by side the most obvious",
    "start": "66600",
    "end": "68700"
  },
  {
    "text": "difference is that the typescript",
    "start": "68700",
    "end": "70020"
  },
  {
    "text": "project has files ending in dot TS or",
    "start": "70020",
    "end": "72780"
  },
  {
    "text": "dot TSX but the weird thing is that if",
    "start": "72780",
    "end": "75119"
  },
  {
    "text": "we look inside one of these files the",
    "start": "75119",
    "end": "76860"
  },
  {
    "text": "code is exactly the same as the",
    "start": "76860",
    "end": "78659"
  },
  {
    "text": "Javascript file and that actually brings",
    "start": "78659",
    "end": "80280"
  },
  {
    "text": "up a good question what is typescript if",
    "start": "80280",
    "end": "82200"
  },
  {
    "text": "my code is exactly the same typescript",
    "start": "82200",
    "end": "84000"
  },
  {
    "text": "as a language is a superset of",
    "start": "84000",
    "end": "85920"
  },
  {
    "text": "JavaScript that means vanilla JavaScript",
    "start": "85920",
    "end": "87840"
  },
  {
    "text": "is also 100 valid typescript in other",
    "start": "87840",
    "end": "90900"
  },
  {
    "text": "words it just adds extra optional",
    "start": "90900",
    "end": "92820"
  },
  {
    "text": "features on top of regular JavaScript",
    "start": "92820",
    "end": "94680"
  },
  {
    "text": "the relationship between scss and CSS is",
    "start": "94680",
    "end": "97920"
  },
  {
    "text": "the same as typescript and JavaScript",
    "start": "97920",
    "end": "99780"
  },
  {
    "text": "and that's really cool because it means",
    "start": "99780",
    "end": "101400"
  },
  {
    "text": "you don't really have to learn anything",
    "start": "101400",
    "end": "102479"
  },
  {
    "text": "to get started with it but here's the",
    "start": "102479",
    "end": "104460"
  },
  {
    "text": "catch browsers don't know how to run",
    "start": "104460",
    "end": "106560"
  },
  {
    "text": "typescript code what is this crap which",
    "start": "106560",
    "end": "108899"
  },
  {
    "text": "means that we need a compiler to take",
    "start": "108899",
    "end": "110880"
  },
  {
    "text": "our typescript code and transpile it or",
    "start": "110880",
    "end": "113399"
  },
  {
    "text": "compile it down to regular JavaScript in",
    "start": "113399",
    "end": "115740"
  },
  {
    "text": "our TS project you'll notice a special",
    "start": "115740",
    "end": "117600"
  },
  {
    "text": "file called tsconfig its purpose is to",
    "start": "117600",
    "end": "120540"
  },
  {
    "text": "customize the behavior of the compiler",
    "start": "120540",
    "end": "122520"
  },
  {
    "text": "which itself is able to take your",
    "start": "122520",
    "end": "124200"
  },
  {
    "text": "typescript code and convert it to any",
    "start": "124200",
    "end": "126180"
  },
  {
    "text": "flavor of JavaScript trip that you want",
    "start": "126180",
    "end": "127799"
  },
  {
    "text": "to run in the browser compilers are",
    "start": "127799",
    "end": "129780"
  },
  {
    "text": "really cool because they allow you to",
    "start": "129780",
    "end": "131160"
  },
  {
    "text": "use special features and modern",
    "start": "131160",
    "end": "132780"
  },
  {
    "text": "JavaScript syntax without having to",
    "start": "132780",
    "end": "134700"
  },
  {
    "text": "worry whether or not that code is going",
    "start": "134700",
    "end": "136020"
  },
  {
    "text": "to be supported on Old Legacy browsers",
    "start": "136020",
    "end": "138060"
  },
  {
    "text": "the drawback is that you now have this",
    "start": "138060",
    "end": "139800"
  },
  {
    "text": "giant configuration file to worry about",
    "start": "139800",
    "end": "141360"
  },
  {
    "text": "normally everything just works but when",
    "start": "141360",
    "end": "143400"
  },
  {
    "text": "it doesn't you have to Google all these",
    "start": "143400",
    "end": "144840"
  },
  {
    "text": "different options and figure out what",
    "start": "144840",
    "end": "146099"
  },
  {
    "text": "they do many of the options are related",
    "start": "146099",
    "end": "148020"
  },
  {
    "text": "to how strict typescript is with its",
    "start": "148020",
    "end": "149940"
  },
  {
    "text": "type checking rules and I'd highly",
    "start": "149940",
    "end": "151560"
  },
  {
    "text": "recommend making it as strict as",
    "start": "151560",
    "end": "153180"
  },
  {
    "text": "possible by putting strict mode to True",
    "start": "153180",
    "end": "155160"
  },
  {
    "text": "that'll make your code initially more",
    "start": "155160",
    "end": "156959"
  },
  {
    "text": "difficult to write but in the long run",
    "start": "156959",
    "end": "158519"
  },
  {
    "text": "it makes refactoring and collaborating",
    "start": "158519",
    "end": "160500"
  },
  {
    "text": "with other developers way easier another",
    "start": "160500",
    "end": "162540"
  },
  {
    "text": "important option is Target which is the",
    "start": "162540",
    "end": "164340"
  },
  {
    "text": "flavor of JavaScript that typescript",
    "start": "164340",
    "end": "165959"
  },
  {
    "text": "will compile your code to es5 is the",
    "start": "165959",
    "end": "168480"
  },
  {
    "text": "2009 version of JavaScript but your code",
    "start": "168480",
    "end": "170879"
  },
  {
    "text": "base can write 2021 JavaScript sounds",
    "start": "170879",
    "end": "173280"
  },
  {
    "text": "amazing but do you really need",
    "start": "173280",
    "end": "174660"
  },
  {
    "text": "typescript to do that under the hood the",
    "start": "174660",
    "end": "176819"
  },
  {
    "text": "JavaScript version of create react app",
    "start": "176819",
    "end": "178739"
  },
  {
    "text": "uses a compiler called Babel that does",
    "start": "178739",
    "end": "181080"
  },
  {
    "text": "the exact same thing so the bottom line",
    "start": "181080",
    "end": "182940"
  },
  {
    "text": "is that you can write modern code in",
    "start": "182940",
    "end": "184800"
  },
  {
    "text": "both a react.js or TS project now one",
    "start": "184800",
    "end": "187739"
  },
  {
    "text": "thing you'll often hear typescript",
    "start": "187739",
    "end": "188819"
  },
  {
    "text": "developers say is that it helps them",
    "start": "188819",
    "end": "190500"
  },
  {
    "text": "catch silly bugs in development before",
    "start": "190500",
    "end": "192540"
  },
  {
    "text": "they become huge disasters in production",
    "start": "192540",
    "end": "194519"
  },
  {
    "text": "let's take a look at an example to see",
    "start": "194519",
    "end": "196620"
  },
  {
    "text": "if that's true or not in the JavaScript",
    "start": "196620",
    "end": "198180"
  },
  {
    "text": "project I have some state that starts",
    "start": "198180",
    "end": "200220"
  },
  {
    "text": "off as an empty object now somewhere",
    "start": "200220",
    "end": "202260"
  },
  {
    "text": "else I might reference that object and",
    "start": "202260",
    "end": "204300"
  },
  {
    "text": "try to access a deeply nested property",
    "start": "204300",
    "end": "206459"
  },
  {
    "text": "on it that looks like valid code but",
    "start": "206459",
    "end": "208260"
  },
  {
    "text": "when we run the app we get an error that",
    "start": "208260",
    "end": "210000"
  },
  {
    "text": "it cannot read that property bugs like",
    "start": "210000",
    "end": "211860"
  },
  {
    "text": "this get shipped to production all the",
    "start": "211860",
    "end": "213299"
  },
  {
    "text": "time but if we try to do the same thing",
    "start": "213299",
    "end": "214860"
  },
  {
    "text": "in typescript it's like a goddamn precog",
    "start": "214860",
    "end": "217140"
  },
  {
    "text": "that lets us know the error exists",
    "start": "217140",
    "end": "218640"
  },
  {
    "text": "before the app even runs I really",
    "start": "218640",
    "end": "220319"
  },
  {
    "text": "appreciate that because I make silly",
    "start": "220319",
    "end": "222120"
  },
  {
    "text": "mistakes like that all the time but keep",
    "start": "222120",
    "end": "224040"
  },
  {
    "text": "in mind that it doesn't replace test",
    "start": "224040",
    "end": "225540"
  },
  {
    "text": "driven development it can detect poorly",
    "start": "225540",
    "end": "227459"
  },
  {
    "text": "structured code in advance but can't",
    "start": "227459",
    "end": "229140"
  },
  {
    "text": "detect batlogic but now let's look at",
    "start": "229140",
    "end": "231180"
  },
  {
    "text": "the most important feature of typescript",
    "start": "231180",
    "end": "232739"
  },
  {
    "text": "its type system and the pros and cons of",
    "start": "232739",
    "end": "235260"
  },
  {
    "text": "using it if we build a functional",
    "start": "235260",
    "end": "236819"
  },
  {
    "text": "component in JavaScript you'll notice",
    "start": "236819",
    "end": "238620"
  },
  {
    "text": "that it has a type of jsx element in",
    "start": "238620",
    "end": "241319"
  },
  {
    "text": "addition if we reference props they",
    "start": "241319",
    "end": "243120"
  },
  {
    "text": "automatically have a type of any that's",
    "start": "243120",
    "end": "245280"
  },
  {
    "text": "a pretty vague type definition overall",
    "start": "245280",
    "end": "247140"
  },
  {
    "text": "in typescript we can be much more",
    "start": "247140",
    "end": "248939"
  },
  {
    "text": "explicit about what our code actually is",
    "start": "248939",
    "end": "250980"
  },
  {
    "text": "react has a built-in type called FC",
    "start": "250980",
    "end": "253439"
  },
  {
    "text": "which stands for function component and",
    "start": "253439",
    "end": "255420"
  },
  {
    "text": "we can assign that type to the component",
    "start": "255420",
    "end": "257100"
  },
  {
    "text": "using a colon followed by the type that",
    "start": "257100",
    "end": "259620"
  },
  {
    "text": "tells the compiler the shape of this",
    "start": "259620",
    "end": "261060"
  },
  {
    "text": "code which will throw an error for",
    "start": "261060",
    "end": "262560"
  },
  {
    "text": "anything that's not a valid prop and",
    "start": "262560",
    "end": "264360"
  },
  {
    "text": "autocomplete everything else by default",
    "start": "264360",
    "end": "266580"
  },
  {
    "text": "the only known react prop is children",
    "start": "266580",
    "end": "268680"
  },
  {
    "text": "but we can Define the shape of our own",
    "start": "268680",
    "end": "270600"
  },
  {
    "text": "props using a typescript interface an",
    "start": "270600",
    "end": "273060"
  },
  {
    "text": "interface allows you to define the shape",
    "start": "273060",
    "end": "274860"
  },
  {
    "text": "of an object by matching a property name",
    "start": "274860",
    "end": "277199"
  },
  {
    "text": "to a type like here we have an interface",
    "start": "277199",
    "end": "279360"
  },
  {
    "text": "called cool props that should be an",
    "start": "279360",
    "end": "281220"
  },
  {
    "text": "object with two properties one of which",
    "start": "281220",
    "end": "283020"
  },
  {
    "text": "is a number and the other a string in",
    "start": "283020",
    "end": "285300"
  },
  {
    "text": "its current form the interface will make",
    "start": "285300",
    "end": "286979"
  },
  {
    "text": "these properties required on the object",
    "start": "286979",
    "end": "288840"
  },
  {
    "text": "but you can make them optional by adding",
    "start": "288840",
    "end": "290880"
  },
  {
    "text": "a question mark after the property name",
    "start": "290880",
    "end": "292620"
  },
  {
    "text": "we can now take this interface and pass",
    "start": "292620",
    "end": "294840"
  },
  {
    "text": "it to the function component type by",
    "start": "294840",
    "end": "296880"
  },
  {
    "text": "wrapping it in angle brackets this is",
    "start": "296880",
    "end": "298740"
  },
  {
    "text": "like saying we have a function component",
    "start": "298740",
    "end": "300360"
  },
  {
    "text": "that also includes props of its own",
    "start": "300360",
    "end": "302039"
  },
  {
    "text": "custom shape and now we get really",
    "start": "302039",
    "end": "303600"
  },
  {
    "text": "useful intellisense on any props when",
    "start": "303600",
    "end": "305580"
  },
  {
    "text": "working with this component and it also",
    "start": "305580",
    "end": "307080"
  },
  {
    "text": "guarantees that we use the required",
    "start": "307080",
    "end": "309000"
  },
  {
    "text": "props when working with this component",
    "start": "309000",
    "end": "310620"
  },
  {
    "text": "in jsx however that did come at a pretty",
    "start": "310620",
    "end": "313139"
  },
  {
    "text": "significant cost we've added a lot of",
    "start": "313139",
    "end": "314940"
  },
  {
    "text": "boilerplate to the code base without",
    "start": "314940",
    "end": "316560"
  },
  {
    "text": "adding any new functionality for the",
    "start": "316560",
    "end": "318360"
  },
  {
    "text": "user now it is possible to bypass type",
    "start": "318360",
    "end": "320639"
  },
  {
    "text": "checking whenever you want by simply",
    "start": "320639",
    "end": "322320"
  },
  {
    "text": "adding the any type that allows you to",
    "start": "322320",
    "end": "324300"
  },
  {
    "text": "opt out of typescript but also negates",
    "start": "324300",
    "end": "326340"
  },
  {
    "text": "all of its benefits it's also worth",
    "start": "326340",
    "end": "327900"
  },
  {
    "text": "noting that typescript can provide",
    "start": "327900",
    "end": "329580"
  },
  {
    "text": "automatic documentation for your code",
    "start": "329580",
    "end": "331500"
  },
  {
    "text": "because your editor will automatically",
    "start": "331500",
    "end": "333300"
  },
  {
    "text": "pick up the type definitions so anybody",
    "start": "333300",
    "end": "335400"
  },
  {
    "text": "using your code will get intellisense on",
    "start": "335400",
    "end": "337440"
  },
  {
    "text": "the shape and purpose of it and that's",
    "start": "337440",
    "end": "339180"
  },
  {
    "text": "way way more efficient than having to go",
    "start": "339180",
    "end": "340919"
  },
  {
    "text": "read some documentation online now in",
    "start": "340919",
    "end": "343500"
  },
  {
    "text": "many cases typescript can automatically",
    "start": "343500",
    "end": "345360"
  },
  {
    "text": "infer the type without you having to add",
    "start": "345360",
    "end": "347639"
  },
  {
    "text": "any additional code to the code base for",
    "start": "347639",
    "end": "349560"
  },
  {
    "text": "example you might want to strongly type",
    "start": "349560",
    "end": "351479"
  },
  {
    "text": "the use statehook however the angle",
    "start": "351479",
    "end": "353639"
  },
  {
    "text": "brackets may not be necessary here",
    "start": "353639",
    "end": "355259"
  },
  {
    "text": "because if you have a default value of a",
    "start": "355259",
    "end": "357180"
  },
  {
    "text": "string you don't need to give it an",
    "start": "357180",
    "end": "358680"
  },
  {
    "text": "explicit type it'll have a string type",
    "start": "358680",
    "end": "360419"
  },
  {
    "text": "automatically and if you try to change",
    "start": "360419",
    "end": "362400"
  },
  {
    "text": "it to a value that's not a string you'll",
    "start": "362400",
    "end": "364020"
  },
  {
    "text": "get that precog error in vs code so",
    "start": "364020",
    "end": "365940"
  },
  {
    "text": "that's pretty nice but is typescript",
    "start": "365940",
    "end": "367560"
  },
  {
    "text": "really worth it it's managed by",
    "start": "367560",
    "end": "369060"
  },
  {
    "text": "Microsoft Enterprise loves it but some",
    "start": "369060",
    "end": "370979"
  },
  {
    "text": "guy on the internet said it only catches",
    "start": "370979",
    "end": "372360"
  },
  {
    "text": "15 percent of bugs while Airbnb said it",
    "start": "372360",
    "end": "374520"
  },
  {
    "text": "catches 38 percent of bugs would you",
    "start": "374520",
    "end": "376319"
  },
  {
    "text": "rather write more code or would you",
    "start": "376319",
    "end": "377639"
  },
  {
    "text": "rather be more confident in the code you",
    "start": "377639",
    "end": "379139"
  },
  {
    "text": "do write would you rather look at your",
    "start": "379139",
    "end": "380520"
  },
  {
    "text": "documentation on a website or would you",
    "start": "380520",
    "end": "382139"
  },
  {
    "text": "rather have it be automatic in your",
    "start": "382139",
    "end": "383639"
  },
  {
    "text": "editor would you rather write faster",
    "start": "383639",
    "end": "384900"
  },
  {
    "text": "code now or deal with chaotic",
    "start": "384900",
    "end": "386520"
  },
  {
    "text": "refactoring later do your friends and",
    "start": "386520",
    "end": "388139"
  },
  {
    "text": "family love it or do they hate it these",
    "start": "388139",
    "end": "389940"
  },
  {
    "text": "are all trade-offs that you need to",
    "start": "389940",
    "end": "390960"
  },
  {
    "text": "think about but in my opinion the answer",
    "start": "390960",
    "end": "392880"
  },
  {
    "text": "to should you use typescript with react",
    "start": "392880",
    "end": "394800"
  },
  {
    "text": "is obviously",
    "start": "394800",
    "end": "397638"
  }
]