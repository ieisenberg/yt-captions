[
  {
    "text": "[Music]",
    "start": "140",
    "end": "6560"
  },
  {
    "text": "welcome to another episode of code this",
    "start": "6560",
    "end": "9059"
  },
  {
    "text": "not that where we try to write the best",
    "start": "9059",
    "end": "10620"
  },
  {
    "text": "code possible and avoid the bad stuff",
    "start": "10620",
    "end": "12630"
  },
  {
    "text": "today we'll look at loops or iteration",
    "start": "12630",
    "end": "14639"
  },
  {
    "text": "and JavaScript which is a lot more",
    "start": "14639",
    "end": "16440"
  },
  {
    "text": "interesting than you might think we'll",
    "start": "16440",
    "end": "17880"
  },
  {
    "text": "look at this from both a readability and",
    "start": "17880",
    "end": "19529"
  },
  {
    "text": "performance perspective to figure out",
    "start": "19529",
    "end": "21270"
  },
  {
    "text": "the best loop to write in your code if",
    "start": "21270",
    "end": "22949"
  },
  {
    "text": "you're new here like and subscribe and I",
    "start": "22949",
    "end": "24660"
  },
  {
    "text": "recommend following along with the",
    "start": "24660",
    "end": "25800"
  },
  {
    "text": "source code on fire ship IO and if you",
    "start": "25800",
    "end": "27900"
  },
  {
    "text": "want to see more videos like this one",
    "start": "27900",
    "end": "29130"
  },
  {
    "text": "let me know in the comments when we talk",
    "start": "29130",
    "end": "31170"
  },
  {
    "text": "about loops we're actually talking about",
    "start": "31170",
    "end": "32610"
  },
  {
    "text": "iteration which happens when we tell a",
    "start": "32610",
    "end": "34410"
  },
  {
    "text": "computer to do something over and over",
    "start": "34410",
    "end": "36239"
  },
  {
    "text": "again until we tell it to stop the best",
    "start": "36239",
    "end": "38250"
  },
  {
    "text": "way to understand this is by looking at",
    "start": "38250",
    "end": "40020"
  },
  {
    "text": "the traditional for loop first we need",
    "start": "40020",
    "end": "42030"
  },
  {
    "text": "to keep track of the number of",
    "start": "42030",
    "end": "43079"
  },
  {
    "text": "iterations that we've made which usually",
    "start": "43079",
    "end": "44850"
  },
  {
    "text": "starts at zero then we need a condition",
    "start": "44850",
    "end": "46770"
  },
  {
    "text": "to stop the loop and then we need to",
    "start": "46770",
    "end": "48600"
  },
  {
    "text": "increment the counter each time an",
    "start": "48600",
    "end": "50160"
  },
  {
    "text": "iteration is completed it's kind of like",
    "start": "50160",
    "end": "51930"
  },
  {
    "text": "saying start here stop here and do this",
    "start": "51930",
    "end": "54449"
  },
  {
    "text": "after each completed loop this loop is",
    "start": "54449",
    "end": "56940"
  },
  {
    "text": "very explicit because we can look at it",
    "start": "56940",
    "end": "58800"
  },
  {
    "text": "and understand exactly what it's doing",
    "start": "58800",
    "end": "60390"
  },
  {
    "text": "without making any assumptions but this",
    "start": "60390",
    "end": "62520"
  },
  {
    "text": "code is kind of hard to digest and",
    "start": "62520",
    "end": "64228"
  },
  {
    "text": "usually as programmers we want to write",
    "start": "64229",
    "end": "66119"
  },
  {
    "text": "as little code as possible and make that",
    "start": "66119",
    "end": "67890"
  },
  {
    "text": "code understandable to other human",
    "start": "67890",
    "end": "69659"
  },
  {
    "text": "beings",
    "start": "69659",
    "end": "70110"
  },
  {
    "text": "luckily javascript provides two other",
    "start": "70110",
    "end": "72090"
  },
  {
    "text": "ways to loop over things that are much",
    "start": "72090",
    "end": "73830"
  },
  {
    "text": "more sugary and easier to understand for",
    "start": "73830",
    "end": "75840"
  },
  {
    "text": "the average person the first one is the",
    "start": "75840",
    "end": "77880"
  },
  {
    "text": "for of loop and it's very similar to a",
    "start": "77880",
    "end": "80100"
  },
  {
    "text": "for loop except we use the of keyword",
    "start": "80100",
    "end": "82229"
  },
  {
    "text": "and pass and the thing that we're",
    "start": "82229",
    "end": "83610"
  },
  {
    "text": "iterating over certain things in",
    "start": "83610",
    "end": "85350"
  },
  {
    "text": "JavaScript are iterable for example",
    "start": "85350",
    "end": "87390"
  },
  {
    "text": "arrays maps and strings so in this case",
    "start": "87390",
    "end": "90150"
  },
  {
    "text": "javascript will assume that we're",
    "start": "90150",
    "end": "91439"
  },
  {
    "text": "iterating to the end of this array and",
    "start": "91439",
    "end": "93210"
  },
  {
    "text": "will give us access to the elements in",
    "start": "93210",
    "end": "94860"
  },
  {
    "text": "the array inside of the brackets so when",
    "start": "94860",
    "end": "97020"
  },
  {
    "text": "just looping over an array this is a lot",
    "start": "97020",
    "end": "98610"
  },
  {
    "text": "less mental overhead than a traditional",
    "start": "98610",
    "end": "100170"
  },
  {
    "text": "for loop but in order to really",
    "start": "100170",
    "end": "102390"
  },
  {
    "text": "understand what's going on here let's",
    "start": "102390",
    "end": "103890"
  },
  {
    "text": "look at things at a lower level the",
    "start": "103890",
    "end": "105570"
  },
  {
    "text": "array itself is iterable and it",
    "start": "105570",
    "end": "107369"
  },
  {
    "text": "implements an iterator function that",
    "start": "107369",
    "end": "109229"
  },
  {
    "text": "allows it to be looped over we can",
    "start": "109229",
    "end": "111210"
  },
  {
    "text": "actually override the default behavior",
    "start": "111210",
    "end": "112590"
  },
  {
    "text": "of the for of loop by implementing our",
    "start": "112590",
    "end": "115079"
  },
  {
    "text": "own iterator function so when we use the",
    "start": "115079",
    "end": "117540"
  },
  {
    "text": "object in a for loop it's going to call",
    "start": "117540",
    "end": "119549"
  },
  {
    "text": "this iterator function over and over",
    "start": "119549",
    "end": "121259"
  },
  {
    "text": "again so what that means is we need to",
    "start": "121259",
    "end": "123390"
  },
  {
    "text": "implement the same logic that we had in",
    "start": "123390",
    "end": "125280"
  },
  {
    "text": "that traditional for loop so first we",
    "start": "125280",
    "end": "127079"
  },
  {
    "text": "set up an index at 0 then the array",
    "start": "127079",
    "end": "129360"
  },
  {
    "text": "itself will be that this context inside",
    "start": "129360",
    "end": "131459"
  },
  {
    "text": "of this function",
    "start": "131459",
    "end": "132690"
  },
  {
    "text": "now the actual spec itself requires us",
    "start": "132690",
    "end": "135330"
  },
  {
    "text": "to return an object that has a next",
    "start": "135330",
    "end": "137580"
  },
  {
    "text": "property which is itself a function that",
    "start": "137580",
    "end": "140340"
  },
  {
    "text": "returns an object that will tell the",
    "start": "140340",
    "end": "142290"
  },
  {
    "text": "loop whether or not it's done and also",
    "start": "142290",
    "end": "143970"
  },
  {
    "text": "provide the current value at this",
    "start": "143970",
    "end": "145530"
  },
  {
    "text": "iteration so this isn't something that",
    "start": "145530",
    "end": "147600"
  },
  {
    "text": "you would have to deal with on a daily",
    "start": "147600",
    "end": "148950"
  },
  {
    "text": "basis but it's good to know that",
    "start": "148950",
    "end": "150690"
  },
  {
    "text": "JavaScript provides a way for you to",
    "start": "150690",
    "end": "152340"
  },
  {
    "text": "make your own classes iterable or",
    "start": "152340",
    "end": "154440"
  },
  {
    "text": "override the default iteration behavior",
    "start": "154440",
    "end": "156600"
  },
  {
    "text": "on an existing object so I like to put",
    "start": "156600",
    "end": "159420"
  },
  {
    "text": "emojis everywhere so I'm gonna go ahead",
    "start": "159420",
    "end": "160830"
  },
  {
    "text": "and add an emoji to every item in the",
    "start": "160830",
    "end": "163140"
  },
  {
    "text": "loop so obviously it's not a very",
    "start": "163140",
    "end": "165120"
  },
  {
    "text": "practical use case but you can see we're",
    "start": "165120",
    "end": "166860"
  },
  {
    "text": "just doing a regular for of loop here",
    "start": "166860",
    "end": "168660"
  },
  {
    "text": "but we're getting additional emojis",
    "start": "168660",
    "end": "170280"
  },
  {
    "text": "added to the items in the loop well look",
    "start": "170280",
    "end": "173040"
  },
  {
    "text": "at some more tricks we can do with four",
    "start": "173040",
    "end": "174180"
  },
  {
    "text": "of in just a minute but there's also one",
    "start": "174180",
    "end": "175980"
  },
  {
    "text": "other way we can loop over items and",
    "start": "175980",
    "end": "177630"
  },
  {
    "text": "that's using a for each loop in this",
    "start": "177630",
    "end": "179790"
  },
  {
    "text": "case we're calling a method that exists",
    "start": "179790",
    "end": "181590"
  },
  {
    "text": "on JavaScript arrays and we'll look at a",
    "start": "181590",
    "end": "183780"
  },
  {
    "text": "bunch of these a little bit later but",
    "start": "183780",
    "end": "185310"
  },
  {
    "text": "basically it just allows us to pass a",
    "start": "185310",
    "end": "187170"
  },
  {
    "text": "callback function that will be executed",
    "start": "187170",
    "end": "189150"
  },
  {
    "text": "for every item in that array so we could",
    "start": "189150",
    "end": "191820"
  },
  {
    "text": "go ahead and console.log the value or we",
    "start": "191820",
    "end": "193890"
  },
  {
    "text": "could even simplify this because",
    "start": "193890",
    "end": "195030"
  },
  {
    "text": "console.log itself is a function and we",
    "start": "195030",
    "end": "197040"
  },
  {
    "text": "can just pass it in like this so it",
    "start": "197040",
    "end": "199080"
  },
  {
    "text": "gives you the opportunity to write",
    "start": "199080",
    "end": "200340"
  },
  {
    "text": "really concise functional code but when",
    "start": "200340",
    "end": "202470"
  },
  {
    "text": "I did my original code this not that",
    "start": "202470",
    "end": "204060"
  },
  {
    "text": "video a few months ago that main",
    "start": "204060",
    "end": "205650"
  },
  {
    "text": "criticism was not considering the",
    "start": "205650",
    "end": "207120"
  },
  {
    "text": "performance implications of these",
    "start": "207120",
    "end": "208590"
  },
  {
    "text": "different types of loops those are",
    "start": "208590",
    "end": "210720"
  },
  {
    "text": "absolutely valid points so let's go",
    "start": "210720",
    "end": "212400"
  },
  {
    "text": "ahead and look at the performance side",
    "start": "212400",
    "end": "213660"
  },
  {
    "text": "by side I've created an array with a",
    "start": "213660",
    "end": "215610"
  },
  {
    "text": "million items in it and we'll go ahead",
    "start": "215610",
    "end": "217440"
  },
  {
    "text": "and run our loops inside of a console",
    "start": "217440",
    "end": "219150"
  },
  {
    "text": "timer first up is the traditional for",
    "start": "219150",
    "end": "221670"
  },
  {
    "text": "loop and you want to try to optimize",
    "start": "221670",
    "end": "223140"
  },
  {
    "text": "your loop to do as little work in the",
    "start": "223140",
    "end": "225000"
  },
  {
    "text": "loop itself as possible for example you",
    "start": "225000",
    "end": "227220"
  },
  {
    "text": "don't want to call array dot length if",
    "start": "227220",
    "end": "228870"
  },
  {
    "text": "you don't have to so in this case we'll",
    "start": "228870",
    "end": "231180"
  },
  {
    "text": "start by calling array dot length in the",
    "start": "231180",
    "end": "232680"
  },
  {
    "text": "loop and we get about 1.7 milliseconds",
    "start": "232680",
    "end": "235320"
  },
  {
    "text": "if we just go ahead and pass in the",
    "start": "235320",
    "end": "237000"
  },
  {
    "text": "number directly we get slightly better",
    "start": "237000",
    "end": "238500"
  },
  {
    "text": "performance at about 1.6 milliseconds",
    "start": "238500",
    "end": "241290"
  },
  {
    "text": "next up is the for of loop and when we",
    "start": "241290",
    "end": "244350"
  },
  {
    "text": "run this you can see we get about 11 to",
    "start": "244350",
    "end": "246390"
  },
  {
    "text": "12 milliseconds that's about 6 times",
    "start": "246390",
    "end": "248550"
  },
  {
    "text": "longer which is pretty crazy but when",
    "start": "248550",
    "end": "250530"
  },
  {
    "text": "you think about all the extra work in",
    "start": "250530",
    "end": "251940"
  },
  {
    "text": "that iterator function that we",
    "start": "251940",
    "end": "253170"
  },
  {
    "text": "implemented earlier then that",
    "start": "253170",
    "end": "254580"
  },
  {
    "text": "performance loss makes sense but that",
    "start": "254580",
    "end": "256919"
  },
  {
    "text": "shouldn't scare you away from using 4 of",
    "start": "256919",
    "end": "258510"
  },
  {
    "text": "because if you're only looping over say",
    "start": "258510",
    "end": "259980"
  },
  {
    "text": "a thousand things it's not going to",
    "start": "259980",
    "end": "261329"
  },
  {
    "text": "matter it's really only a concern when",
    "start": "261330",
    "end": "262979"
  },
  {
    "text": "every nanosecond counts and at that",
    "start": "262979",
    "end": "264630"
  },
  {
    "text": "point you might want to consider",
    "start": "264630",
    "end": "265530"
  },
  {
    "text": "something other than",
    "start": "265530",
    "end": "266500"
  },
  {
    "text": "javascript now back in our tests will",
    "start": "266500",
    "end": "268870"
  },
  {
    "text": "try for each and we'll see that we get",
    "start": "268870",
    "end": "270700"
  },
  {
    "text": "much better performance than for of at",
    "start": "270700",
    "end": "272620"
  },
  {
    "text": "around two milliseconds or so but the",
    "start": "272620",
    "end": "274510"
  },
  {
    "text": "interesting thing about these methods is",
    "start": "274510",
    "end": "275980"
  },
  {
    "text": "that they can be chained together and",
    "start": "275980",
    "end": "277420"
  },
  {
    "text": "each one that you've chained together is",
    "start": "277420",
    "end": "278950"
  },
  {
    "text": "a another iteration over the entire",
    "start": "278950",
    "end": "280600"
  },
  {
    "text": "array so this time we'll add nap before",
    "start": "280600",
    "end": "283480"
  },
  {
    "text": "we do our for each loop and now you can",
    "start": "283480",
    "end": "285190"
  },
  {
    "text": "see our performances around 10",
    "start": "285190",
    "end": "286450"
  },
  {
    "text": "milliseconds so that's roughly 2",
    "start": "286450",
    "end": "288790"
  },
  {
    "text": "milliseconds from the for each loop and",
    "start": "288790",
    "end": "290500"
  },
  {
    "text": "then another 8 seconds for map we can",
    "start": "290500",
    "end": "293230"
  },
  {
    "text": "add another map in there and the",
    "start": "293230",
    "end": "294550"
  },
  {
    "text": "performance will continue to decrease",
    "start": "294550",
    "end": "296230"
  },
  {
    "text": "this time around 18 to 20 milliseconds",
    "start": "296230",
    "end": "298570"
  },
  {
    "text": "so again this probably won't matter if",
    "start": "298570",
    "end": "300490"
  },
  {
    "text": "you have a small array but something to",
    "start": "300490",
    "end": "301990"
  },
  {
    "text": "keep in mind if performance is critical",
    "start": "301990",
    "end": "303760"
  },
  {
    "text": "now for the rest of the video we're",
    "start": "303760",
    "end": "305440"
  },
  {
    "text": "going to switch gears and just write",
    "start": "305440",
    "end": "307030"
  },
  {
    "text": "some code that solves common problems",
    "start": "307030",
    "end": "308560"
  },
  {
    "text": "that you'll encounter when running a",
    "start": "308560",
    "end": "309850"
  },
  {
    "text": "loop the first one is how do you loop",
    "start": "309850",
    "end": "312340"
  },
  {
    "text": "over an object because an object is not",
    "start": "312340",
    "end": "314230"
  },
  {
    "text": "iterable by default although you could",
    "start": "314230",
    "end": "316300"
  },
  {
    "text": "technically implement your own symbol",
    "start": "316300",
    "end": "317830"
  },
  {
    "text": "iterator like we did earlier the easiest",
    "start": "317830",
    "end": "320169"
  },
  {
    "text": "method is to just change your for of",
    "start": "320169",
    "end": "321820"
  },
  {
    "text": "loop to a for in loop that will loop",
    "start": "321820",
    "end": "324310"
  },
  {
    "text": "over all of the keys in the object then",
    "start": "324310",
    "end": "326200"
  },
  {
    "text": "you can simply use that key to access",
    "start": "326200",
    "end": "328000"
  },
  {
    "text": "the value from the original object",
    "start": "328000",
    "end": "329770"
  },
  {
    "text": "itself another alternative would be to",
    "start": "329770",
    "end": "332440"
  },
  {
    "text": "keep the for of loop in its original",
    "start": "332440",
    "end": "334240"
  },
  {
    "text": "form but this time use object values on",
    "start": "334240",
    "end": "337180"
  },
  {
    "text": "the original object that will convert",
    "start": "337180",
    "end": "338890"
  },
  {
    "text": "all of the values to an array which of",
    "start": "338890",
    "end": "340690"
  },
  {
    "text": "course is iterable and if you have an",
    "start": "340690",
    "end": "342669"
  },
  {
    "text": "object that you know you need to loop",
    "start": "342669",
    "end": "344050"
  },
  {
    "text": "over in different ways I recommend",
    "start": "344050",
    "end": "345669"
  },
  {
    "text": "converting it to a map a map shares a",
    "start": "345669",
    "end": "347979"
  },
  {
    "text": "lot of similarities with a regular",
    "start": "347979",
    "end": "349330"
  },
  {
    "text": "object except it maintains the order of",
    "start": "349330",
    "end": "351640"
  },
  {
    "text": "the keys in which they were inserted in",
    "start": "351640",
    "end": "353560"
  },
  {
    "text": "other words if you want to maintain a",
    "start": "353560",
    "end": "355120"
  },
  {
    "text": "specific order of the key value pairs in",
    "start": "355120",
    "end": "357160"
  },
  {
    "text": "the object then you definitely want to",
    "start": "357160",
    "end": "358690"
  },
  {
    "text": "use a map and not a plain JavaScript",
    "start": "358690",
    "end": "360490"
  },
  {
    "text": "object we can convert it by a calling",
    "start": "360490",
    "end": "362800"
  },
  {
    "text": "object entries on the original object",
    "start": "362800",
    "end": "364479"
  },
  {
    "text": "inside of the map constructor and we can",
    "start": "364479",
    "end": "367330"
  },
  {
    "text": "loop over it by simply calling the",
    "start": "367330",
    "end": "368710"
  },
  {
    "text": "values method on the map itself now",
    "start": "368710",
    "end": "371260"
  },
  {
    "text": "let's take a look at some of the very",
    "start": "371260",
    "end": "372550"
  },
  {
    "text": "awesome methods that are available on",
    "start": "372550",
    "end": "374229"
  },
  {
    "text": "the modern JavaScript array so here we",
    "start": "374229",
    "end": "376810"
  },
  {
    "text": "have an array of faces but you might",
    "start": "376810",
    "end": "378430"
  },
  {
    "text": "notice one that doesn't quite fit it was",
    "start": "378430",
    "end": "381070"
  },
  {
    "text": "meant to go in a completely different",
    "start": "381070",
    "end": "382210"
  },
  {
    "text": "array so let's go ahead and create that",
    "start": "382210",
    "end": "384250"
  },
  {
    "text": "array by filtering it out of the",
    "start": "384250",
    "end": "385930"
  },
  {
    "text": "original we can do that by calling",
    "start": "385930",
    "end": "387820"
  },
  {
    "text": "filter on the original array and keep in",
    "start": "387820",
    "end": "390160"
  },
  {
    "text": "mind this is not removing it from the",
    "start": "390160",
    "end": "391510"
  },
  {
    "text": "original array but instead creating a",
    "start": "391510",
    "end": "393310"
  },
  {
    "text": "new array with only that value so we can",
    "start": "393310",
    "end": "396039"
  },
  {
    "text": "do this all in one line with array",
    "start": "396039",
    "end": "397419"
  },
  {
    "text": "filter instead of setting up a for loop",
    "start": "397419",
    "end": "399250"
  },
  {
    "text": "which would at least take",
    "start": "399250",
    "end": "400240"
  },
  {
    "text": "five lines of code filter is pretty",
    "start": "400240",
    "end": "401860"
  },
  {
    "text": "useful but I think the most useful",
    "start": "401860",
    "end": "403389"
  },
  {
    "text": "method is map it allows you to take the",
    "start": "403389",
    "end": "405580"
  },
  {
    "text": "incoming elements in the array and",
    "start": "405580",
    "end": "406930"
  },
  {
    "text": "transform them into something else",
    "start": "406930",
    "end": "408940"
  },
  {
    "text": "but a lot of times when you're looping",
    "start": "408940",
    "end": "410770"
  },
  {
    "text": "over an array you're just testing that",
    "start": "410770",
    "end": "412030"
  },
  {
    "text": "it contains something or maybe it",
    "start": "412030",
    "end": "413530"
  },
  {
    "text": "doesn't contain something in our case",
    "start": "413530",
    "end": "415599"
  },
  {
    "text": "we're going to iterate over our faces",
    "start": "415599",
    "end": "417280"
  },
  {
    "text": "array to see if it contains a certain",
    "start": "417280",
    "end": "419050"
  },
  {
    "text": "unwanted emoji if any of the elements",
    "start": "419050",
    "end": "421000"
  },
  {
    "text": "return true on this function then the",
    "start": "421000",
    "end": "423340"
  },
  {
    "text": "sum method on the array will return true",
    "start": "423340",
    "end": "425259"
  },
  {
    "text": "and on a similar note we can use the",
    "start": "425259",
    "end": "427870"
  },
  {
    "text": "every method to ensure that every",
    "start": "427870",
    "end": "429910"
  },
  {
    "text": "element in the array follows some",
    "start": "429910",
    "end": "431560"
  },
  {
    "text": "pattern in our case we're just making",
    "start": "431560",
    "end": "433120"
  },
  {
    "text": "sure that it's a high Unicode character",
    "start": "433120",
    "end": "435039"
  },
  {
    "text": "which is where the emojis live now let's",
    "start": "435039",
    "end": "437949"
  },
  {
    "text": "say we had some more unwanted characters",
    "start": "437949",
    "end": "439569"
  },
  {
    "text": "in this array and we want to see how bad",
    "start": "439569",
    "end": "441610"
  },
  {
    "text": "the situation is by counting all of the",
    "start": "441610",
    "end": "443500"
  },
  {
    "text": "unwanted characters the array reduce",
    "start": "443500",
    "end": "445990"
  },
  {
    "text": "method allows us to loop over the array",
    "start": "445990",
    "end": "447520"
  },
  {
    "text": "while accumulating a certain value and",
    "start": "447520",
    "end": "449860"
  },
  {
    "text": "by accumulate I just mean a value that",
    "start": "449860",
    "end": "452139"
  },
  {
    "text": "changes after each iteration of the loop",
    "start": "452139",
    "end": "454289"
  },
  {
    "text": "so the callback value contains that",
    "start": "454289",
    "end": "456639"
  },
  {
    "text": "accumulated value as the first argument",
    "start": "456639",
    "end": "458169"
  },
  {
    "text": "and then the current value in the loop",
    "start": "458169",
    "end": "460000"
  },
  {
    "text": "as the second argument so all we're",
    "start": "460000",
    "end": "462550"
  },
  {
    "text": "going to do is test that the emoji is",
    "start": "462550",
    "end": "464199"
  },
  {
    "text": "the unwanted character and if so we'll",
    "start": "464199",
    "end": "466389"
  },
  {
    "text": "add one otherwise we'll add zero and",
    "start": "466389",
    "end": "468370"
  },
  {
    "text": "when using reduce you have the option to",
    "start": "468370",
    "end": "470229"
  },
  {
    "text": "pass the second argument which is the",
    "start": "470229",
    "end": "471729"
  },
  {
    "text": "starting value to accumulate from which",
    "start": "471729",
    "end": "474190"
  },
  {
    "text": "in our case would just be zero so now we",
    "start": "474190",
    "end": "476830"
  },
  {
    "text": "know that we have three unwanted",
    "start": "476830",
    "end": "478090"
  },
  {
    "text": "characters in this array so let's go",
    "start": "478090",
    "end": "480250"
  },
  {
    "text": "ahead and sort it so all of the unwanted",
    "start": "480250",
    "end": "481840"
  },
  {
    "text": "characters are at the end we have a",
    "start": "481840",
    "end": "484150"
  },
  {
    "text": "another array method just for that",
    "start": "484150",
    "end": "485469"
  },
  {
    "text": "called a race sort it allows you to pass",
    "start": "485469",
    "end": "487810"
  },
  {
    "text": "in a compare function to sort the array",
    "start": "487810",
    "end": "489610"
  },
  {
    "text": "based on whatever logic you want once we",
    "start": "489610",
    "end": "491919"
  },
  {
    "text": "have that sort of the way we want it we",
    "start": "491919",
    "end": "493419"
  },
  {
    "text": "can then call splice on the array to get",
    "start": "493419",
    "end": "495280"
  },
  {
    "text": "rid of the elements that we don't need",
    "start": "495280",
    "end": "496719"
  },
  {
    "text": "I'm going to go ahead and wrap things up",
    "start": "496719",
    "end": "498460"
  },
  {
    "text": "there hopefully this video showed you",
    "start": "498460",
    "end": "499930"
  },
  {
    "text": "that there is always more than one way",
    "start": "499930",
    "end": "501520"
  },
  {
    "text": "to solve a problem in JavaScript make",
    "start": "501520",
    "end": "503289"
  },
  {
    "text": "sure to grab the full source code from",
    "start": "503289",
    "end": "504550"
  },
  {
    "text": "fire ship IO thanks for watching and I",
    "start": "504550",
    "end": "506860"
  },
  {
    "text": "will talk to you soon",
    "start": "506860",
    "end": "509698"
  },
  {
    "text": "[Music]",
    "start": "509980",
    "end": "513949"
  }
]