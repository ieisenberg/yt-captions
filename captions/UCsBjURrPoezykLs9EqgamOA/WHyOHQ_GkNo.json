[
  {
    "text": "Nim a general purpose systems",
    "start": "0",
    "end": "2460"
  },
  {
    "text": "programming language that can deliver",
    "start": "2460",
    "end": "3899"
  },
  {
    "text": "high performance native apps with",
    "start": "3899",
    "end": "5700"
  },
  {
    "text": "concise elegant code it was created by",
    "start": "5700",
    "end": "8040"
  },
  {
    "text": "Andreas rump in Germany in 2005 who",
    "start": "8040",
    "end": "10559"
  },
  {
    "text": "wanted a language with the performance",
    "start": "10559",
    "end": "12179"
  },
  {
    "text": "of C the productivity of Python and the",
    "start": "12179",
    "end": "14639"
  },
  {
    "text": "extensibility of lisp like other systems",
    "start": "14639",
    "end": "16980"
  },
  {
    "text": "languages Nim is statically typed and",
    "start": "16980",
    "end": "19140"
  },
  {
    "text": "compiled however it's Unique because its",
    "start": "19140",
    "end": "21420"
  },
  {
    "text": "source code is first translated to a",
    "start": "21420",
    "end": "23340"
  },
  {
    "text": "different language usually C then uses a",
    "start": "23340",
    "end": "25500"
  },
  {
    "text": "compiler like clang to convert it to",
    "start": "25500",
    "end": "27359"
  },
  {
    "text": "machine code and it can also transpile",
    "start": "27359",
    "end": "29220"
  },
  {
    "text": "to C plus plus Objective C and even",
    "start": "29220",
    "end": "31859"
  },
  {
    "text": "JavaScript by default it uses a",
    "start": "31859",
    "end": "34320"
  },
  {
    "text": "deterministic memory management strategy",
    "start": "34320",
    "end": "36360"
  },
  {
    "text": "based on reference counting but this",
    "start": "36360",
    "end": "38399"
  },
  {
    "text": "Behavior can be customized or removed",
    "start": "38399",
    "end": "40500"
  },
  {
    "text": "altogether allowing low-level control",
    "start": "40500",
    "end": "42300"
  },
  {
    "text": "over memory with pointers syntactically",
    "start": "42300",
    "end": "44640"
  },
  {
    "text": "it feels like a statically typed python",
    "start": "44640",
    "end": "46920"
  },
  {
    "text": "but it also provides extensive support",
    "start": "46920",
    "end": "48780"
  },
  {
    "text": "for meta programming with a macro system",
    "start": "48780",
    "end": "51120"
  },
  {
    "text": "that allows direct access to the",
    "start": "51120",
    "end": "53160"
  },
  {
    "text": "abstract syntax tree allowing you to",
    "start": "53160",
    "end": "55020"
  },
  {
    "text": "mold the language to your exact needs",
    "start": "55020",
    "end": "56760"
  },
  {
    "text": "much like the list family of languages",
    "start": "56760",
    "end": "58680"
  },
  {
    "text": "to get started install an on your",
    "start": "58680",
    "end": "60480"
  },
  {
    "text": "machine then create a new file ending in",
    "start": "60480",
    "end": "62340"
  },
  {
    "text": "dot Nim unlike C no main function is",
    "start": "62340",
    "end": "64799"
  },
  {
    "text": "necessary use Echo to print to the",
    "start": "64799",
    "end": "66840"
  },
  {
    "text": "standard output or create a variable",
    "start": "66840",
    "end": "68460"
  },
  {
    "text": "with the VAR keyword and follow it with",
    "start": "68460",
    "end": "70560"
  },
  {
    "text": "an optional type annotation variables",
    "start": "70560",
    "end": "72720"
  },
  {
    "text": "can be reassigned but we can make them",
    "start": "72720",
    "end": "74640"
  },
  {
    "text": "single assignment with let or use cons",
    "start": "74640",
    "end": "76799"
  },
  {
    "text": "to make the assigned value immutable",
    "start": "76799",
    "end": "78840"
  },
  {
    "text": "when writing a complex statement like an",
    "start": "78840",
    "end": "81060"
  },
  {
    "text": "if condition indentation matters like",
    "start": "81060",
    "end": "83159"
  },
  {
    "text": "python this keeps the code nice and",
    "start": "83159",
    "end": "84960"
  },
  {
    "text": "readable like when declaring multiple",
    "start": "84960",
    "end": "86820"
  },
  {
    "text": "variables for Loops it has a variety of",
    "start": "86820",
    "end": "89100"
  },
  {
    "text": "built-in iterators like count up and",
    "start": "89100",
    "end": "91259"
  },
  {
    "text": "countdown or you can use the iterator",
    "start": "91259",
    "end": "93119"
  },
  {
    "text": "keyword along with yield to build your",
    "start": "93119",
    "end": "95280"
  },
  {
    "text": "own from scratch to Define functions or",
    "start": "95280",
    "end": "97560"
  },
  {
    "text": "methods we use procedures which can take",
    "start": "97560",
    "end": "99780"
  },
  {
    "text": "input arguments and return a value it",
    "start": "99780",
    "end": "102180"
  },
  {
    "text": "also supports closures and using",
    "start": "102180",
    "end": "103920"
  },
  {
    "text": "procedures as arguments or return values",
    "start": "103920",
    "end": "106259"
  },
  {
    "text": "for functional programming patterns",
    "start": "106259",
    "end": "108180"
  },
  {
    "text": "however it's also possible to use object",
    "start": "108180",
    "end": "110640"
  },
  {
    "text": "oriented patterns by first creating a",
    "start": "110640",
    "end": "112920"
  },
  {
    "text": "complex type which can then be",
    "start": "112920",
    "end": "114360"
  },
  {
    "text": "instantiated like a class and it also",
    "start": "114360",
    "end": "116520"
  },
  {
    "text": "supports generics allowing you to use",
    "start": "116520",
    "end": "118259"
  },
  {
    "text": "types as parameters what makes Nim",
    "start": "118259",
    "end": "120420"
  },
  {
    "text": "really special though is its support for",
    "start": "120420",
    "end": "122100"
  },
  {
    "text": "meta programming for example we can get",
    "start": "122100",
    "end": "124140"
  },
  {
    "text": "the abstract syntax tree at any time",
    "start": "124140",
    "end": "126060"
  },
  {
    "text": "using dumptree with this information we",
    "start": "126060",
    "end": "128759"
  },
  {
    "text": "can now write our own macros which are",
    "start": "128759",
    "end": "130500"
  },
  {
    "text": "like functions that modify the abstract",
    "start": "130500",
    "end": "132599"
  },
  {
    "text": "syntax tree at compile time it's like",
    "start": "132599",
    "end": "134760"
  },
  {
    "text": "writing Nim code that writes more Nim",
    "start": "134760",
    "end": "136620"
  },
  {
    "text": "code for you now open the terminal and",
    "start": "136620",
    "end": "138720"
  },
  {
    "text": "use the compiler to convert your Nim",
    "start": "138720",
    "end": "140700"
  },
  {
    "text": "code into C and then into a machine code",
    "start": "140700",
    "end": "143099"
  },
  {
    "text": "executable or use the JS command to",
    "start": "143099",
    "end": "145440"
  },
  {
    "text": "transpile it to JavaScript this has been",
    "start": "145440",
    "end": "147599"
  },
  {
    "text": "Nim in 100 seconds hit the like button",
    "start": "147599",
    "end": "149940"
  },
  {
    "text": "if you want to see more short videos",
    "start": "149940",
    "end": "151080"
  },
  {
    "text": "like this thanks for watching and I will",
    "start": "151080",
    "end": "153180"
  },
  {
    "text": "see you in the next one",
    "start": "153180",
    "end": "156260"
  }
]