[
  {
    "start": "0",
    "end": "35000"
  },
  {
    "text": "[Music]",
    "start": "190",
    "end": "299"
  },
  {
    "text": "Zig a high performance system",
    "start": "299",
    "end": "2220"
  },
  {
    "text": "programming language often labeled as a",
    "start": "2220",
    "end": "4380"
  },
  {
    "text": "Next Generation alternative to C it was",
    "start": "4380",
    "end": "6540"
  },
  {
    "text": "created by Andrew Kelly in 2016 and has",
    "start": "6540",
    "end": "8880"
  },
  {
    "text": "quickly evolved into one of the most",
    "start": "8880",
    "end": "10200"
  },
  {
    "text": "desired new languages in the world like",
    "start": "10200",
    "end": "12000"
  },
  {
    "text": "C it's minimal extremely fast and allows",
    "start": "12000",
    "end": "14460"
  },
  {
    "text": "for low-level memory control but instead",
    "start": "14460",
    "end": "16560"
  },
  {
    "text": "of managing memory directly in the",
    "start": "16560",
    "end": "18119"
  },
  {
    "text": "language with functions like Malik and",
    "start": "18119",
    "end": "19920"
  },
  {
    "text": "free the zig standard Library ships",
    "start": "19920",
    "end": "21840"
  },
  {
    "text": "allocators to provide a consistent",
    "start": "21840",
    "end": "23699"
  },
  {
    "text": "interface for memory management Zig is",
    "start": "23699",
    "end": "25800"
  },
  {
    "text": "not a memory safe language like rust or",
    "start": "25800",
    "end": "27779"
  },
  {
    "text": "go but it doesn't have any hidden memory",
    "start": "27779",
    "end": "29760"
  },
  {
    "text": "allocations making the code far more",
    "start": "29760",
    "end": "31500"
  },
  {
    "text": "explicit and portable because allocators",
    "start": "31500",
    "end": "33420"
  },
  {
    "text": "can be easily swapped out in the code to",
    "start": "33420",
    "end": "35219"
  },
  {
    "start": "35000",
    "end": "65000"
  },
  {
    "text": "Target different architectures like x86",
    "start": "35219",
    "end": "37500"
  },
  {
    "text": "arm webassembly and bare metal in",
    "start": "37500",
    "end": "39960"
  },
  {
    "text": "addition Zig has no hidden control flow",
    "start": "39960",
    "end": "41940"
  },
  {
    "text": "if it looks like a function and quacks",
    "start": "41940",
    "end": "43559"
  },
  {
    "text": "like a function it's a function there's",
    "start": "43559",
    "end": "45180"
  },
  {
    "text": "no operator overloading and it doesn't",
    "start": "45180",
    "end": "47040"
  },
  {
    "text": "even have exceptions if a function can",
    "start": "47040",
    "end": "48780"
  },
  {
    "text": "fail it needs to return an explicit",
    "start": "48780",
    "end": "50579"
  },
  {
    "text": "error value the language also has a",
    "start": "50579",
    "end": "52440"
  },
  {
    "text": "unique comp time keyword that makes it",
    "start": "52440",
    "end": "54120"
  },
  {
    "text": "trivial to run Kodak compile time",
    "start": "54120",
    "end": "55800"
  },
  {
    "text": "instead of runtime no preprocessor or",
    "start": "55800",
    "end": "57840"
  },
  {
    "text": "macros are necessary and finally Zig can",
    "start": "57840",
    "end": "59940"
  },
  {
    "text": "integrate well into a c or C plus plus",
    "start": "59940",
    "end": "61800"
  },
  {
    "text": "code base and supports cross compilation",
    "start": "61800",
    "end": "63899"
  },
  {
    "text": "out of the box with llvm although",
    "start": "63899",
    "end": "65880"
  },
  {
    "start": "65000",
    "end": "158000"
  },
  {
    "text": "divorce paperwork has been filed to get",
    "start": "65880",
    "end": "67740"
  },
  {
    "text": "started install Zig then create a new",
    "start": "67740",
    "end": "69540"
  },
  {
    "text": "project with the zignet exe command in",
    "start": "69540",
    "end": "72000"
  },
  {
    "text": "the main file first to import the",
    "start": "72000",
    "end": "73500"
  },
  {
    "text": "standard library then Define a main",
    "start": "73500",
    "end": "75240"
  },
  {
    "text": "function notice how the function returns",
    "start": "75240",
    "end": "77100"
  },
  {
    "text": "a type of void with an exclamation point",
    "start": "77100",
    "end": "79020"
  },
  {
    "text": "that exclamation point means that the",
    "start": "79020",
    "end": "80939"
  },
  {
    "text": "function might return an error declare a",
    "start": "80939",
    "end": "82740"
  },
  {
    "text": "mutable variable with the VAR keyword",
    "start": "82740",
    "end": "84299"
  },
  {
    "text": "followed by a type like you wait to",
    "start": "84299",
    "end": "86340"
  },
  {
    "text": "represent a single byte then assign and",
    "start": "86340",
    "end": "88500"
  },
  {
    "text": "modify its value later or use cons to",
    "start": "88500",
    "end": "90780"
  },
  {
    "text": "Define an immutable variable that cannot",
    "start": "90780",
    "end": "92700"
  },
  {
    "text": "be changed we can also bundle multiple",
    "start": "92700",
    "end": "94500"
  },
  {
    "text": "variables together into a struct then",
    "start": "94500",
    "end": "96479"
  },
  {
    "text": "access them on that namespace with DOT",
    "start": "96479",
    "end": "98460"
  },
  {
    "text": "notation now things start to get more",
    "start": "98460",
    "end": "100079"
  },
  {
    "text": "interesting when memory management comes",
    "start": "100079",
    "end": "101939"
  },
  {
    "text": "into play when initializing an array of",
    "start": "101939",
    "end": "103799"
  },
  {
    "text": "integers we can allocate it to a slice",
    "start": "103799",
    "end": "105659"
  },
  {
    "text": "of memory in the Heap using the built-in",
    "start": "105659",
    "end": "107280"
  },
  {
    "text": "page allocator from the standard Library",
    "start": "107280",
    "end": "108900"
  },
  {
    "text": "what's so cool about this is that we",
    "start": "108900",
    "end": "110579"
  },
  {
    "text": "could swap it out with other allocators",
    "start": "110579",
    "end": "112320"
  },
  {
    "text": "to use different memory management",
    "start": "112320",
    "end": "113579"
  },
  {
    "text": "strategies now when we're done with this",
    "start": "113579",
    "end": "115320"
  },
  {
    "text": "memory we need to set it free otherwise",
    "start": "115320",
    "end": "117060"
  },
  {
    "text": "we could have a memory leak the defer",
    "start": "117060",
    "end": "118860"
  },
  {
    "text": "keyword allows us to put that code right",
    "start": "118860",
    "end": "120180"
  },
  {
    "text": "right next to the allocation itself and",
    "start": "120180",
    "end": "122159"
  },
  {
    "text": "will automatically de-initialize the",
    "start": "122159",
    "end": "123600"
  },
  {
    "text": "list when it goes out of scope now as we",
    "start": "123600",
    "end": "125520"
  },
  {
    "text": "operate on the list the try keyword",
    "start": "125520",
    "end": "127200"
  },
  {
    "text": "provides explicit error handling if this",
    "start": "127200",
    "end": "129239"
  },
  {
    "text": "line fails it will automatically catch",
    "start": "129239",
    "end": "131160"
  },
  {
    "text": "and return the error you can't just",
    "start": "131160",
    "end": "132720"
  },
  {
    "text": "ignore it and that will make your code",
    "start": "132720",
    "end": "134040"
  },
  {
    "text": "more reliable and speaking of",
    "start": "134040",
    "end": "135480"
  },
  {
    "text": "reliability Zig has a built-in testing",
    "start": "135480",
    "end": "137760"
  },
  {
    "text": "framework use the test keyword to",
    "start": "137760",
    "end": "139440"
  },
  {
    "text": "evaluate code outside of the main",
    "start": "139440",
    "end": "140819"
  },
  {
    "text": "program then use the zig test command to",
    "start": "140819",
    "end": "143040"
  },
  {
    "text": "run it and finally build an executable",
    "start": "143040",
    "end": "144900"
  },
  {
    "text": "with the zig build command and choose a",
    "start": "144900",
    "end": "146640"
  },
  {
    "text": "build mode to optimize for Speed size or",
    "start": "146640",
    "end": "149160"
  },
  {
    "text": "safety this has been the zig programming",
    "start": "149160",
    "end": "151020"
  },
  {
    "text": "language in 100 seconds hit the like",
    "start": "151020",
    "end": "152879"
  },
  {
    "text": "button if you want to see more short",
    "start": "152879",
    "end": "153900"
  },
  {
    "text": "videos like this thanks for watching and",
    "start": "153900",
    "end": "156000"
  },
  {
    "text": "I will see you in the next one",
    "start": "156000",
    "end": "157470"
  },
  {
    "text": "[Music]",
    "start": "157470",
    "end": "160020"
  }
]