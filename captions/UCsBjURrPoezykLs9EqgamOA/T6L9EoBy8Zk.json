[
  {
    "text": "neo4j an acid compliant graph database",
    "start": "140",
    "end": "3060"
  },
  {
    "text": "that can handle the extremely complex",
    "start": "3060",
    "end": "4980"
  },
  {
    "text": "relational data of the modern world it",
    "start": "4980",
    "end": "7140"
  },
  {
    "text": "was created in 2007 by Emil ifram is",
    "start": "7140",
    "end": "9720"
  },
  {
    "text": "written in Java and pioneered the",
    "start": "9720",
    "end": "11519"
  },
  {
    "text": "property graph model traditional",
    "start": "11519",
    "end": "13139"
  },
  {
    "text": "relational databases use a tabular model",
    "start": "13139",
    "end": "15420"
  },
  {
    "text": "but joining normalized tables together",
    "start": "15420",
    "end": "17220"
  },
  {
    "text": "is not how real humans think about",
    "start": "17220",
    "end": "19080"
  },
  {
    "text": "relationships naturally we think about",
    "start": "19080",
    "end": "20939"
  },
  {
    "text": "connections between entities like Bob",
    "start": "20939",
    "end": "23220"
  },
  {
    "text": "asked a question on stack Overflow then",
    "start": "23220",
    "end": "25320"
  },
  {
    "text": "Alice and Chad downvoted it so Bob gave",
    "start": "25320",
    "end": "27420"
  },
  {
    "text": "up on his dream of programming a graph",
    "start": "27420",
    "end": "29160"
  },
  {
    "text": "can model this data the same way you",
    "start": "29160",
    "end": "30840"
  },
  {
    "text": "might visualize it on a whiteboard nodes",
    "start": "30840",
    "end": "32460"
  },
  {
    "text": "represent entities edges represent",
    "start": "32460",
    "end": "34320"
  },
  {
    "text": "relationships between entities and",
    "start": "34320",
    "end": "36180"
  },
  {
    "text": "properties are key value pairs that",
    "start": "36180",
    "end": "37739"
  },
  {
    "text": "store data on these objects under the",
    "start": "37739",
    "end": "39660"
  },
  {
    "text": "hood neo4j is a true native graph",
    "start": "39660",
    "end": "41820"
  },
  {
    "text": "database that applies this model all the",
    "start": "41820",
    "end": "43739"
  },
  {
    "text": "way down to the storage level queries",
    "start": "43739",
    "end": "45300"
  },
  {
    "text": "are written in a declarative language",
    "start": "45300",
    "end": "46800"
  },
  {
    "text": "called Cipher that resembles SQL except",
    "start": "46800",
    "end": "49500"
  },
  {
    "text": "nodes are surrounded by parentheses then",
    "start": "49500",
    "end": "51539"
  },
  {
    "text": "connect to other nodes with arrows via",
    "start": "51539",
    "end": "53700"
  },
  {
    "text": "relationships and brackets today neo4j",
    "start": "53700",
    "end": "56100"
  },
  {
    "text": "is used in applications like",
    "start": "56100",
    "end": "57420"
  },
  {
    "text": "recommendation engines social media",
    "start": "57420",
    "end": "59399"
  },
  {
    "text": "platforms and knowledge graphs for",
    "start": "59399",
    "end": "61260"
  },
  {
    "text": "artificial intelligence and just to name",
    "start": "61260",
    "end": "63000"
  },
  {
    "text": "a few to get started it can be",
    "start": "63000",
    "end": "64619"
  },
  {
    "text": "self-hosted with Docker but the easiest",
    "start": "64619",
    "end": "66540"
  },
  {
    "text": "approach is to sign up for Aura which",
    "start": "66540",
    "end": "68520"
  },
  {
    "text": "provides a free fully managed database",
    "start": "68520",
    "end": "70380"
  },
  {
    "text": "in the cloud from there we can build the",
    "start": "70380",
    "end": "72060"
  },
  {
    "text": "next Twitter by making queries with",
    "start": "72060",
    "end": "73799"
  },
  {
    "text": "Cipher use create followed by",
    "start": "73799",
    "end": "75420"
  },
  {
    "text": "parentheses to create a new entity or",
    "start": "75420",
    "end": "77460"
  },
  {
    "text": "node this node has a label of user that",
    "start": "77460",
    "end": "79740"
  },
  {
    "text": "can be used to group similar nodes",
    "start": "79740",
    "end": "81240"
  },
  {
    "text": "together inside the braces we can add",
    "start": "81240",
    "end": "83159"
  },
  {
    "text": "key value pairs to represent the data on",
    "start": "83159",
    "end": "85500"
  },
  {
    "text": "that node now a user might want to",
    "start": "85500",
    "end": "87180"
  },
  {
    "text": "follow another user which can be",
    "start": "87180",
    "end": "88799"
  },
  {
    "text": "represented with a relationship inside",
    "start": "88799",
    "end": "90659"
  },
  {
    "text": "of brackets then notice how the arrow",
    "start": "90659",
    "end": "92700"
  },
  {
    "text": "points to another node with a label of",
    "start": "92700",
    "end": "94619"
  },
  {
    "text": "user and that's all it takes to create",
    "start": "94619",
    "end": "96299"
  },
  {
    "text": "relational data no foreign keys or join",
    "start": "96299",
    "end": "98820"
  },
  {
    "text": "tables required although we can add",
    "start": "98820",
    "end": "100799"
  },
  {
    "text": "constraints to the schema such as the",
    "start": "100799",
    "end": "102360"
  },
  {
    "text": "one here that will ensure every username",
    "start": "102360",
    "end": "104040"
  },
  {
    "text": "is unique in addition we can define",
    "start": "104040",
    "end": "105720"
  },
  {
    "text": "local variables in this query then",
    "start": "105720",
    "end": "107579"
  },
  {
    "text": "return them from the statement to get",
    "start": "107579",
    "end": "109079"
  },
  {
    "text": "the data back as the result and what's",
    "start": "109079",
    "end": "110820"
  },
  {
    "text": "especially awesome is that we can",
    "start": "110820",
    "end": "112200"
  },
  {
    "text": "visualize it as an interactive graph or",
    "start": "112200",
    "end": "114299"
  },
  {
    "text": "even as a table now to continue building",
    "start": "114299",
    "end": "116100"
  },
  {
    "text": "Twitter we can connect multiple tweet",
    "start": "116100",
    "end": "117899"
  },
  {
    "text": "nodes to a user we also need a query",
    "start": "117899",
    "end": "119880"
  },
  {
    "text": "that will return all the tweets from all",
    "start": "119880",
    "end": "122100"
  },
  {
    "text": "the users that are being followed this",
    "start": "122100",
    "end": "123899"
  },
  {
    "text": "can be easily represented with nodes and",
    "start": "123899",
    "end": "125880"
  },
  {
    "text": "relationships but we can also filter",
    "start": "125880",
    "end": "127680"
  },
  {
    "text": "this query with a where Clause to only",
    "start": "127680",
    "end": "129660"
  },
  {
    "text": "return tweets that were posted recently",
    "start": "129660",
    "end": "131520"
  },
  {
    "text": "in addition we can match on string",
    "start": "131520",
    "end": "133140"
  },
  {
    "text": "patterns and regular expressions or",
    "start": "133140",
    "end": "134760"
  },
  {
    "text": "filter on complex patterns based on the",
    "start": "134760",
    "end": "136739"
  },
  {
    "text": "graph itself like only return tweets",
    "start": "136739",
    "end": "138720"
  },
  {
    "text": "from users that have not been muted so",
    "start": "138720",
    "end": "140819"
  },
  {
    "text": "not only is it intuitive for developers",
    "start": "140819",
    "end": "142500"
  },
  {
    "text": "but it also allows patterns in your data",
    "start": "142500",
    "end": "144480"
  },
  {
    "text": "to emerge naturally which is a huge",
    "start": "144480",
    "end": "146400"
  },
  {
    "text": "Advantage when it comes to data analysis",
    "start": "146400",
    "end": "148379"
  },
  {
    "text": "and machine learning this has been neo4j",
    "start": "148379",
    "end": "150480"
  },
  {
    "text": "in 100 seconds hit the like button for",
    "start": "150480",
    "end": "152580"
  },
  {
    "text": "more short videos like this thanks for",
    "start": "152580",
    "end": "154379"
  },
  {
    "text": "watching and I will see you in the next",
    "start": "154379",
    "end": "156120"
  },
  {
    "text": "one",
    "start": "156120",
    "end": "158239"
  }
]