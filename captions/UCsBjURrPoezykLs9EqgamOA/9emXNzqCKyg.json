[
  {
    "text": "some people call javascript a virus and",
    "start": "30",
    "end": "2399"
  },
  {
    "text": "if that's true it means developers are",
    "start": "2399",
    "end": "4230"
  },
  {
    "text": "the host no matter what you label",
    "start": "4230",
    "end": "5910"
  },
  {
    "text": "yourself ads today you have to face the",
    "start": "5910",
    "end": "7500"
  },
  {
    "text": "reality that one day you may join the",
    "start": "7500",
    "end": "9330"
  },
  {
    "text": "hordes of JavaScript developers out",
    "start": "9330",
    "end": "10740"
  },
  {
    "text": "there and when that day comes you need",
    "start": "10740",
    "end": "12509"
  },
  {
    "text": "to be prepared by understanding the",
    "start": "12509",
    "end": "14009"
  },
  {
    "text": "practical fundamental concepts of the",
    "start": "14009",
    "end": "15929"
  },
  {
    "text": "JavaScript programming language today's",
    "start": "15929",
    "end": "17880"
  },
  {
    "text": "video is not about victory it's about",
    "start": "17880",
    "end": "19710"
  },
  {
    "text": "survival welcome to episode 3 of the",
    "start": "19710",
    "end": "26160"
  },
  {
    "text": "full JavaScript course in the last video",
    "start": "26160",
    "end": "28140"
  },
  {
    "text": "we looked at how JavaScript works under",
    "start": "28140",
    "end": "29699"
  },
  {
    "text": "the hood and today we'll look at many of",
    "start": "29699",
    "end": "31230"
  },
  {
    "text": "the fundamental features of the language",
    "start": "31230",
    "end": "32880"
  },
  {
    "text": "as they relate to practical programming",
    "start": "32880",
    "end": "34559"
  },
  {
    "text": "but more importantly I want to help you",
    "start": "34559",
    "end": "36600"
  },
  {
    "text": "survive some of the weirder parts of",
    "start": "36600",
    "end": "37950"
  },
  {
    "text": "JavaScript that might trip you up or",
    "start": "37950",
    "end": "39629"
  },
  {
    "text": "that you might find on an interview",
    "start": "39629",
    "end": "40829"
  },
  {
    "text": "question and many of these concepts like",
    "start": "40829",
    "end": "42690"
  },
  {
    "text": "closures and hoisting can be easily",
    "start": "42690",
    "end": "44610"
  },
  {
    "text": "understood by removing the head or",
    "start": "44610",
    "end": "46890"
  },
  {
    "text": "destroying the brain",
    "start": "46890",
    "end": "50360"
  },
  {
    "text": "chapter 1 where and how do I run my",
    "start": "50360",
    "end": "53000"
  },
  {
    "text": "JavaScript code let's find out by",
    "start": "53000",
    "end": "54800"
  },
  {
    "text": "creating a hello world app open up an",
    "start": "54800",
    "end": "56720"
  },
  {
    "text": "editor like vs code create a file called",
    "start": "56720",
    "end": "58730"
  },
  {
    "text": "index J s and type in console.log hello",
    "start": "58730",
    "end": "62059"
  },
  {
    "text": "world now assuming you have no js'",
    "start": "62059",
    "end": "64158"
  },
  {
    "text": "installed you can run the script",
    "start": "64159",
    "end": "65478"
  },
  {
    "text": "directly on your machine via the command",
    "start": "65479",
    "end": "67159"
  },
  {
    "text": "line we'll have an entire video",
    "start": "67159",
    "end": "68540"
  },
  {
    "text": "dedicated to node.js later in the course",
    "start": "68540",
    "end": "70520"
  },
  {
    "text": "but all you need to know for right now",
    "start": "70520",
    "end": "72080"
  },
  {
    "text": "is that if you type in node index J s in",
    "start": "72080",
    "end": "74810"
  },
  {
    "text": "the command line it will execute the",
    "start": "74810",
    "end": "76430"
  },
  {
    "text": "code in your script so you just wrote a",
    "start": "76430",
    "end": "78290"
  },
  {
    "text": "back-end server side JavaScript",
    "start": "78290",
    "end": "79940"
  },
  {
    "text": "application but when most people think",
    "start": "79940",
    "end": "81560"
  },
  {
    "text": "about J s they're thinking about",
    "start": "81560",
    "end": "82850"
  },
  {
    "text": "browsers and web applications it's",
    "start": "82850",
    "end": "85100"
  },
  {
    "text": "possible to run code in the browser just",
    "start": "85100",
    "end": "86840"
  },
  {
    "text": "like we did from the command line by",
    "start": "86840",
    "end": "88250"
  },
  {
    "text": "opening the developer console in the",
    "start": "88250",
    "end": "90050"
  },
  {
    "text": "previous video we learned that",
    "start": "90050",
    "end": "91220"
  },
  {
    "text": "javascript has an interpreter or JIT",
    "start": "91220",
    "end": "93110"
  },
  {
    "text": "compiler to be precise that will execute",
    "start": "93110",
    "end": "95090"
  },
  {
    "text": "your code when you type it in here but",
    "start": "95090",
    "end": "96860"
  },
  {
    "text": "the browser console is really just a",
    "start": "96860",
    "end": "98660"
  },
  {
    "text": "debugging tool the way that web",
    "start": "98660",
    "end": "100160"
  },
  {
    "text": "applications actually work is they",
    "start": "100160",
    "end": "101720"
  },
  {
    "text": "declare a script tag in an HTML document",
    "start": "101720",
    "end": "103750"
  },
  {
    "text": "we can go ahead and create an index.html",
    "start": "103750",
    "end": "105979"
  },
  {
    "text": "file then we'll add a script tag and set",
    "start": "105979",
    "end": "108830"
  },
  {
    "text": "the source attribute to the JavaScript",
    "start": "108830",
    "end": "110690"
  },
  {
    "text": "file when the browser parses this HTML",
    "start": "110690",
    "end": "113119"
  },
  {
    "text": "file it's going to see the script tag",
    "start": "113119",
    "end": "114920"
  },
  {
    "text": "and then try to load and execute the",
    "start": "114920",
    "end": "116720"
  },
  {
    "text": "script in our case it won't execute the",
    "start": "116720",
    "end": "118489"
  },
  {
    "text": "JavaScript until the document is fully",
    "start": "118489",
    "end": "120020"
  },
  {
    "text": "loaded because we use this defer",
    "start": "120020",
    "end": "121640"
  },
  {
    "text": "attribute this is useful because a lot",
    "start": "121640",
    "end": "123500"
  },
  {
    "text": "of times your JavaScript will reference",
    "start": "123500",
    "end": "124849"
  },
  {
    "text": "HTML elements in the body which won't be",
    "start": "124849",
    "end": "127459"
  },
  {
    "text": "available until the document is fully",
    "start": "127459",
    "end": "129229"
  },
  {
    "text": "loaded now the big caveat here is that",
    "start": "129229",
    "end": "131090"
  },
  {
    "text": "most developers are using frameworks",
    "start": "131090",
    "end": "132860"
  },
  {
    "text": "which will set up the script tag for you",
    "start": "132860",
    "end": "134660"
  },
  {
    "text": "but if you're doing any kind of web",
    "start": "134660",
    "end": "135950"
  },
  {
    "text": "development it's important to understand",
    "start": "135950",
    "end": "137630"
  },
  {
    "text": "how script tags work but now it's time",
    "start": "137630",
    "end": "139670"
  },
  {
    "text": "to move on to chapter 2 primitives and",
    "start": "139670",
    "end": "141590"
  },
  {
    "text": "objects which are two of the lowest",
    "start": "141590",
    "end": "143420"
  },
  {
    "text": "level building blocks in the language",
    "start": "143420",
    "end": "144860"
  },
  {
    "text": "there is a total of seven primitive",
    "start": "144860",
    "end": "146989"
  },
  {
    "text": "types in modern JavaScript with the most",
    "start": "146989",
    "end": "148879"
  },
  {
    "text": "common ones being string number boolean",
    "start": "148879",
    "end": "151069"
  },
  {
    "text": "null and undefined a special",
    "start": "151069",
    "end": "152930"
  },
  {
    "text": "characteristic of primitives is that",
    "start": "152930",
    "end": "154640"
  },
  {
    "text": "they're immutable which means their",
    "start": "154640",
    "end": "155959"
  },
  {
    "text": "value can't be directly changed once",
    "start": "155959",
    "end": "157730"
  },
  {
    "text": "they've been assigned to a variable they",
    "start": "157730",
    "end": "159349"
  },
  {
    "text": "can be reassigned to a different value",
    "start": "159349",
    "end": "160879"
  },
  {
    "text": "but they just can't be changed directly",
    "start": "160879",
    "end": "162739"
  },
  {
    "text": "and because JavaScript is a dynamic",
    "start": "162739",
    "end": "164930"
  },
  {
    "text": "weakly typed language we don't actually",
    "start": "164930",
    "end": "166489"
  },
  {
    "text": "use type annotations in our code but we",
    "start": "166489",
    "end": "168530"
  },
  {
    "text": "can use this type of operator to check a",
    "start": "168530",
    "end": "170480"
  },
  {
    "text": "type at runtime if needed and just for",
    "start": "170480",
    "end": "172730"
  },
  {
    "text": "those who are wondering I'm using the",
    "start": "172730",
    "end": "173989"
  },
  {
    "text": "quota plugin for vs code which displays",
    "start": "173989",
    "end": "176090"
  },
  {
    "text": "the output of my code on the right here",
    "start": "176090",
    "end": "177800"
  },
  {
    "text": "in blue look at these data types in more",
    "start": "177800",
    "end": "179930"
  },
  {
    "text": "detail as we go through the video but",
    "start": "179930",
    "end": "181520"
  },
  {
    "text": "for right now you should know the",
    "start": "181520",
    "end": "182510"
  },
  {
    "text": "difference between undefined in",
    "start": "182510",
    "end": "184020"
  },
  {
    "text": "Knowle undefined is the default value",
    "start": "184020",
    "end": "186030"
  },
  {
    "text": "that you'll see for a variable that",
    "start": "186030",
    "end": "187200"
  },
  {
    "text": "doesn't have a value assigned to it or",
    "start": "187200",
    "end": "189030"
  },
  {
    "text": "for a function that just returns nothing",
    "start": "189030",
    "end": "190770"
  },
  {
    "text": "Knowle is similar in the sense that it",
    "start": "190770",
    "end": "192480"
  },
  {
    "text": "represents an empty value but it's",
    "start": "192480",
    "end": "194190"
  },
  {
    "text": "something that you the developer would",
    "start": "194190",
    "end": "195540"
  },
  {
    "text": "assign explicitly now these primitive",
    "start": "195540",
    "end": "198000"
  },
  {
    "text": "data types can be contrasted with the",
    "start": "198000",
    "end": "199650"
  },
  {
    "text": "object type which represents more",
    "start": "199650",
    "end": "201480"
  },
  {
    "text": "complex data structures like arrays",
    "start": "201480",
    "end": "203310"
  },
  {
    "text": "objects and functions the big difference",
    "start": "203310",
    "end": "205770"
  },
  {
    "text": "is that objects can be seen as a",
    "start": "205770",
    "end": "207150"
  },
  {
    "text": "collection of keys and values or",
    "start": "207150",
    "end": "208890"
  },
  {
    "text": "properties and they can be mutated after",
    "start": "208890",
    "end": "210900"
  },
  {
    "text": "being assigned to a variable so the",
    "start": "210900",
    "end": "212490"
  },
  {
    "text": "bottom line that you need to understand",
    "start": "212490",
    "end": "213810"
  },
  {
    "text": "is that anything that's not a primitive",
    "start": "213810",
    "end": "215280"
  },
  {
    "text": "type is going to inherit from object",
    "start": "215280",
    "end": "217200"
  },
  {
    "text": "that includes things like functions",
    "start": "217200",
    "end": "218970"
  },
  {
    "text": "arrays or any class instances now",
    "start": "218970",
    "end": "221520"
  },
  {
    "text": "there's one other little piece of",
    "start": "221520",
    "end": "222690"
  },
  {
    "text": "weirdness that you might encounter and",
    "start": "222690",
    "end": "224190"
  },
  {
    "text": "that is primitive wrapper objects the",
    "start": "224190",
    "end": "226440"
  },
  {
    "text": "reason I bring this up is because you",
    "start": "226440",
    "end": "227820"
  },
  {
    "text": "may see these out there in the wild and",
    "start": "227820",
    "end": "229440"
  },
  {
    "text": "they allow you to basically wrap a",
    "start": "229440",
    "end": "230850"
  },
  {
    "text": "primitive type in a class instance but",
    "start": "230850",
    "end": "233010"
  },
  {
    "text": "you should never really use them unless",
    "start": "233010",
    "end": "234330"
  },
  {
    "text": "you have a good reason to chapter 3",
    "start": "234330",
    "end": "236670"
  },
  {
    "text": "control flow and truthy versus falsey in",
    "start": "236670",
    "end": "239180"
  },
  {
    "text": "JavaScript we can implement conditional",
    "start": "239180",
    "end": "241230"
  },
  {
    "text": "logic with an if statement if a",
    "start": "241230",
    "end": "243090"
  },
  {
    "text": "condition is true the-- then we execute",
    "start": "243090",
    "end": "244800"
  },
  {
    "text": "this block of code else we execute this",
    "start": "244800",
    "end": "246960"
  },
  {
    "text": "other block of code and we can also use",
    "start": "246960",
    "end": "248970"
  },
  {
    "text": "else--if if there are multiple",
    "start": "248970",
    "end": "250170"
  },
  {
    "text": "conditions to check but the more",
    "start": "250170",
    "end": "252060"
  },
  {
    "text": "important thing to understand here is",
    "start": "252060",
    "end": "253590"
  },
  {
    "text": "what is truthy and what is false e in",
    "start": "253590",
    "end": "255360"
  },
  {
    "text": "JavaScript because JavaScript will",
    "start": "255360",
    "end": "257250"
  },
  {
    "text": "always try to coerce a value into a",
    "start": "257250",
    "end": "259049"
  },
  {
    "text": "boolean when it's encountered inside of",
    "start": "259049",
    "end": "260670"
  },
  {
    "text": "a conditional statement true is",
    "start": "260670",
    "end": "262230"
  },
  {
    "text": "obviously true the-- and anything that's",
    "start": "262230",
    "end": "263970"
  },
  {
    "text": "an object is also true the-- even if",
    "start": "263970",
    "end": "265920"
  },
  {
    "text": "it's an empty array or an empty object",
    "start": "265920",
    "end": "267510"
  },
  {
    "text": "the ones you have to watch out for are",
    "start": "267510",
    "end": "269460"
  },
  {
    "text": "strings and numbers a string that has",
    "start": "269460",
    "end": "271680"
  },
  {
    "text": "length will be true the-- but an empty",
    "start": "271680",
    "end": "273180"
  },
  {
    "text": "string will be false e then the number 0",
    "start": "273180",
    "end": "275520"
  },
  {
    "text": "will be false e but all other numbers",
    "start": "275520",
    "end": "277470"
  },
  {
    "text": "will be true the-- and if you're ever",
    "start": "277470",
    "end": "279150"
  },
  {
    "text": "unsure about a value you can simply add",
    "start": "279150",
    "end": "280920"
  },
  {
    "text": "a double bang in front of it to coerce a",
    "start": "280920",
    "end": "282810"
  },
  {
    "text": "to a boolean yourself now the reason",
    "start": "282810",
    "end": "284640"
  },
  {
    "text": "this works is because the exclamation",
    "start": "284640",
    "end": "286350"
  },
  {
    "text": "mark is a logical not operator a single",
    "start": "286350",
    "end": "289470"
  },
  {
    "text": "exclamation mark will return false if a",
    "start": "289470",
    "end": "291419"
  },
  {
    "text": "value can be converted to true so if you",
    "start": "291419",
    "end": "293340"
  },
  {
    "text": "add two of them then it will give you",
    "start": "293340",
    "end": "294480"
  },
  {
    "text": "the actual boolean that that value will",
    "start": "294480",
    "end": "296340"
  },
  {
    "text": "be course two and what we're talking",
    "start": "296340",
    "end": "298380"
  },
  {
    "text": "about logical operators you should also",
    "start": "298380",
    "end": "300090"
  },
  {
    "text": "know that a double ampersand is logical",
    "start": "300090",
    "end": "302520"
  },
  {
    "text": "and which ensures that all expressions",
    "start": "302520",
    "end": "304350"
  },
  {
    "text": "in the condition will be converted to",
    "start": "304350",
    "end": "305940"
  },
  {
    "text": "true and we also have logical or which",
    "start": "305940",
    "end": "308100"
  },
  {
    "text": "returns true if at least one of the",
    "start": "308100",
    "end": "309780"
  },
  {
    "text": "expressions is true the-- now another",
    "start": "309780",
    "end": "311310"
  },
  {
    "text": "thing you should know is that JavaScript",
    "start": "311310",
    "end": "312570"
  },
  {
    "text": "provides two different equality",
    "start": "312570",
    "end": "314040"
  },
  {
    "text": "operators a double equal sign is called",
    "start": "314040",
    "end": "316530"
  },
  {
    "text": "an abstract",
    "start": "316530",
    "end": "317289"
  },
  {
    "text": "comparison and it will try to make a",
    "start": "317289",
    "end": "318610"
  },
  {
    "text": "type conversion before actually running",
    "start": "318610",
    "end": "320469"
  },
  {
    "text": "the comparison that's pretty weird",
    "start": "320469",
    "end": "322270"
  },
  {
    "text": "so most linters will tell you to never",
    "start": "322270",
    "end": "323979"
  },
  {
    "text": "use it in contrast the strict equality",
    "start": "323979",
    "end": "330520"
  },
  {
    "text": "operator will check for equality on both",
    "start": "330520",
    "end": "332589"
  },
  {
    "text": "the type and the value which will give",
    "start": "332589",
    "end": "334449"
  },
  {
    "text": "you much more predictable behavior when",
    "start": "334449",
    "end": "336729"
  },
  {
    "text": "it comes to conditional logic it can get",
    "start": "336729",
    "end": "338409"
  },
  {
    "text": "pretty verbose if you use an if",
    "start": "338409",
    "end": "339879"
  },
  {
    "text": "statement to define a variable you'll",
    "start": "339879",
    "end": "342369"
  },
  {
    "text": "commonly see this done with the ternary",
    "start": "342369",
    "end": "343749"
  },
  {
    "text": "operator which gives you a shorthand",
    "start": "343749",
    "end": "345430"
  },
  {
    "text": "syntax for defining a variable based on",
    "start": "345430",
    "end": "347649"
  },
  {
    "text": "an if-else statement it has a logical",
    "start": "347649",
    "end": "349899"
  },
  {
    "text": "condition on the left side then a",
    "start": "349899",
    "end": "351459"
  },
  {
    "text": "question mark then the first value is",
    "start": "351459",
    "end": "353319"
  },
  {
    "text": "what will be assigned if the condition",
    "start": "353319",
    "end": "354789"
  },
  {
    "text": "is true the-- and the second value after",
    "start": "354789",
    "end": "356709"
  },
  {
    "text": "the colon is the value if it's false II",
    "start": "356709",
    "end": "358889"
  },
  {
    "text": "now before we leave the topic of control",
    "start": "358889",
    "end": "361419"
  },
  {
    "text": "flow it's also worth noting that",
    "start": "361419",
    "end": "362800"
  },
  {
    "text": "javascript has a switch statement which",
    "start": "362800",
    "end": "364930"
  },
  {
    "text": "allows you to start with an expression",
    "start": "364930",
    "end": "366430"
  },
  {
    "text": "and then compare it to multiple cases",
    "start": "366430",
    "end": "368439"
  },
  {
    "text": "and this can be a good alternative to",
    "start": "368439",
    "end": "369939"
  },
  {
    "text": "if-else statements if you have a lot of",
    "start": "369939",
    "end": "371740"
  },
  {
    "text": "conditions to check and we can also wrap",
    "start": "371740",
    "end": "373809"
  },
  {
    "text": "our code in a try-catch statement which",
    "start": "373809",
    "end": "375969"
  },
  {
    "text": "will attempt to run the code in the try",
    "start": "375969",
    "end": "377439"
  },
  {
    "text": "block but if an error is thrown then it",
    "start": "377439",
    "end": "379330"
  },
  {
    "text": "will move to the catch block you can try",
    "start": "379330",
    "end": "381339"
  },
  {
    "text": "this out yourself by using throw inside",
    "start": "381339",
    "end": "383289"
  },
  {
    "text": "of the try block and then you'll see",
    "start": "383289",
    "end": "384789"
  },
  {
    "text": "that it runs the code inside of catch",
    "start": "384789",
    "end": "386229"
  },
  {
    "text": "and provides that error that was thrown",
    "start": "386229",
    "end": "387969"
  },
  {
    "text": "up above and try if an error is not",
    "start": "387969",
    "end": "390069"
  },
  {
    "text": "thrown then the code inside of catch",
    "start": "390069",
    "end": "391719"
  },
  {
    "text": "will never be run and you can also add a",
    "start": "391719",
    "end": "393819"
  },
  {
    "text": "finally block to the end of all this to",
    "start": "393819",
    "end": "395620"
  },
  {
    "text": "run some code after both try and catch",
    "start": "395620",
    "end": "397330"
  },
  {
    "text": "have been executed and finally a full",
    "start": "397330",
    "end": "399279"
  },
  {
    "text": "six and a half minutes into this video",
    "start": "399279",
    "end": "400599"
  },
  {
    "text": "we're ready for chapter four variables",
    "start": "400599",
    "end": "402699"
  },
  {
    "text": "we'll look at the difference between",
    "start": "402699",
    "end": "403990"
  },
  {
    "text": "varlet and const and also figure out",
    "start": "403990",
    "end": "406119"
  },
  {
    "text": "what hoisting means borrow allows you to",
    "start": "406119",
    "end": "408519"
  },
  {
    "text": "initialize a variable assign a value to",
    "start": "408519",
    "end": "410559"
  },
  {
    "text": "it and then also reassign a value to it",
    "start": "410559",
    "end": "412539"
  },
  {
    "text": "later now before you can really",
    "start": "412539",
    "end": "413830"
  },
  {
    "text": "understand anything else about variables",
    "start": "413830",
    "end": "415569"
  },
  {
    "text": "you need to understand the execution",
    "start": "415569",
    "end": "417339"
  },
  {
    "text": "context and this simply refers to the",
    "start": "417339",
    "end": "419379"
  },
  {
    "text": "way your code is being interpreted",
    "start": "419379",
    "end": "420610"
  },
  {
    "text": "because your JavaScript program likely",
    "start": "420610",
    "end": "422649"
  },
  {
    "text": "contains variables and functions defined",
    "start": "422649",
    "end": "424360"
  },
  {
    "text": "all over the place",
    "start": "424360",
    "end": "425259"
  },
  {
    "text": "so the context defines the relationship",
    "start": "425259",
    "end": "427180"
  },
  {
    "text": "between how your code is written to how",
    "start": "427180",
    "end": "428830"
  },
  {
    "text": "it will be interpreted by the JavaScript",
    "start": "428830",
    "end": "430779"
  },
  {
    "text": "engine we can define a variable anywhere",
    "start": "430779",
    "end": "432939"
  },
  {
    "text": "in our script and that will be",
    "start": "432939",
    "end": "434080"
  },
  {
    "text": "considered a global variable in other",
    "start": "434080",
    "end": "435999"
  },
  {
    "text": "words it's available in the global",
    "start": "435999",
    "end": "437529"
  },
  {
    "text": "execution context that means if I have a",
    "start": "437529",
    "end": "439779"
  },
  {
    "text": "function somewhere else in my code I can",
    "start": "439779",
    "end": "441399"
  },
  {
    "text": "still reference that variable I like to",
    "start": "441399",
    "end": "443619"
  },
  {
    "text": "think of global as an imaginary function",
    "start": "443619",
    "end": "445569"
  },
  {
    "text": "that wraps my script in other words",
    "start": "445569",
    "end": "447430"
  },
  {
    "text": "running a script is just like calling",
    "start": "447430",
    "end": "449289"
  },
  {
    "text": "this imaginary glow",
    "start": "449289",
    "end": "450200"
  },
  {
    "text": "function and that means if we define",
    "start": "450200",
    "end": "451910"
  },
  {
    "text": "additional functions in our code we have",
    "start": "451910",
    "end": "453830"
  },
  {
    "text": "a different execution context for",
    "start": "453830",
    "end": "455540"
  },
  {
    "text": "defining variables for example if we try",
    "start": "455540",
    "end": "458090"
  },
  {
    "text": "to define a variable inside this",
    "start": "458090",
    "end": "459830"
  },
  {
    "text": "function and then reference it in the",
    "start": "459830",
    "end": "461330"
  },
  {
    "text": "global context we'll get a reference",
    "start": "461330",
    "end": "463310"
  },
  {
    "text": "error because the local variable is not",
    "start": "463310",
    "end": "465380"
  },
  {
    "text": "available in this context now that's",
    "start": "465380",
    "end": "467510"
  },
  {
    "text": "pretty straightforward",
    "start": "467510",
    "end": "468380"
  },
  {
    "text": "but there are a few pieces of weirdness",
    "start": "468380",
    "end": "469910"
  },
  {
    "text": "that you need to be aware of if you",
    "start": "469910",
    "end": "471560"
  },
  {
    "text": "assign a value to an undeclared variable",
    "start": "471560",
    "end": "473420"
  },
  {
    "text": "which you should really never do it will",
    "start": "473420",
    "end": "475040"
  },
  {
    "text": "automatically be assigned as a global",
    "start": "475040",
    "end": "476690"
  },
  {
    "text": "variable even if it's done inside of an",
    "start": "476690",
    "end": "478400"
  },
  {
    "text": "enclosing function and the other thing",
    "start": "478400",
    "end": "480440"
  },
  {
    "text": "you need to know about is hoisting which",
    "start": "480440",
    "end": "482150"
  },
  {
    "text": "applies to variables but also function",
    "start": "482150",
    "end": "484130"
  },
  {
    "text": "declarations as well now whenever",
    "start": "484130",
    "end": "485810"
  },
  {
    "text": "JavaScript processes in execution",
    "start": "485810",
    "end": "487760"
  },
  {
    "text": "context it will basically put all the",
    "start": "487760",
    "end": "489650"
  },
  {
    "text": "variables at the top or in other words",
    "start": "489650",
    "end": "491360"
  },
  {
    "text": "hoist them to the top of the context",
    "start": "491360",
    "end": "493370"
  },
  {
    "text": "that means if we initialize a variable",
    "start": "493370",
    "end": "494630"
  },
  {
    "text": "down here at the bottom and then",
    "start": "494630",
    "end": "496220"
  },
  {
    "text": "reference it somewhere higher up in the",
    "start": "496220",
    "end": "497780"
  },
  {
    "text": "code it will still be considered",
    "start": "497780",
    "end": "498980"
  },
  {
    "text": "declared within this scope but the",
    "start": "498980",
    "end": "500840"
  },
  {
    "text": "actual assignment of a value will still",
    "start": "500840",
    "end": "502580"
  },
  {
    "text": "happen wherever you define it in the",
    "start": "502580",
    "end": "504080"
  },
  {
    "text": "code so if you want to keep your sanity",
    "start": "504080",
    "end": "506060"
  },
  {
    "text": "it's always a good idea to declare your",
    "start": "506060",
    "end": "507650"
  },
  {
    "text": "variables at the top of the context but",
    "start": "507650",
    "end": "509810"
  },
  {
    "text": "the bigger problem with var is that it",
    "start": "509810",
    "end": "511460"
  },
  {
    "text": "becomes very hard to keep track of the",
    "start": "511460",
    "end": "512810"
  },
  {
    "text": "scope of variables and there can be a",
    "start": "512810",
    "end": "514340"
  },
  {
    "text": "lot of name collisions as your app grows",
    "start": "514340",
    "end": "516169"
  },
  {
    "text": "more complex luckily we no longer have",
    "start": "516170",
    "end": "518210"
  },
  {
    "text": "to use var because in modern JavaScript",
    "start": "518210",
    "end": "520070"
  },
  {
    "text": "we have let and Const let is similar to",
    "start": "520070",
    "end": "522680"
  },
  {
    "text": "var in most ways but it's limited to the",
    "start": "522680",
    "end": "524810"
  },
  {
    "text": "scope of a block statement that means if",
    "start": "524810",
    "end": "527270"
  },
  {
    "text": "you define a variable inside of an if",
    "start": "527270",
    "end": "528890"
  },
  {
    "text": "statement or a loop it will be limited",
    "start": "528890",
    "end": "530870"
  },
  {
    "text": "to that block and this differs from bar",
    "start": "530870",
    "end": "532820"
  },
  {
    "text": "which would leak out into the parent",
    "start": "532820",
    "end": "534500"
  },
  {
    "text": "scope and also like var variables",
    "start": "534500",
    "end": "536540"
  },
  {
    "text": "defined with let can be a reassigned to",
    "start": "536540",
    "end": "538220"
  },
  {
    "text": "different values later in the code but",
    "start": "538220",
    "end": "539960"
  },
  {
    "text": "in many cases you'll have values that",
    "start": "539960",
    "end": "541670"
  },
  {
    "text": "should never be reassigned this makes it",
    "start": "541670",
    "end": "543470"
  },
  {
    "text": "a lot more difficult to accidentally",
    "start": "543470",
    "end": "545120"
  },
  {
    "text": "override values in your code so when it",
    "start": "545120",
    "end": "546980"
  },
  {
    "text": "comes to variables a good rule to follow",
    "start": "546980",
    "end": "548540"
  },
  {
    "text": "is to always use Const unless you",
    "start": "548540",
    "end": "550610"
  },
  {
    "text": "absolutely know that you'll override",
    "start": "550610",
    "end": "552080"
  },
  {
    "text": "that value later in which case you can",
    "start": "552080",
    "end": "553820"
  },
  {
    "text": "use let and you should respect the",
    "start": "553820",
    "end": "555380"
  },
  {
    "text": "legacy of our but just never use it and",
    "start": "555380",
    "end": "557480"
  },
  {
    "text": "with that we're ready for chapter 5",
    "start": "557480",
    "end": "559100"
  },
  {
    "text": "functions",
    "start": "559100",
    "end": "561150"
  },
  {
    "text": "I think you don't say hello this course",
    "start": "561150",
    "end": "564720"
  },
  {
    "text": "will have an entire video on functions",
    "start": "564720",
    "end": "566279"
  },
  {
    "text": "but there are a few basic things you",
    "start": "566279",
    "end": "567720"
  },
  {
    "text": "should know so let's start by answering",
    "start": "567720",
    "end": "569460"
  },
  {
    "text": "the question of what is a function and",
    "start": "569460",
    "end": "571440"
  },
  {
    "text": "the answer is that it's simply a piece",
    "start": "571440",
    "end": "573270"
  },
  {
    "text": "of code that takes an input and produces",
    "start": "573270",
    "end": "575250"
  },
  {
    "text": "an output when it's called you can use",
    "start": "575250",
    "end": "577080"
  },
  {
    "text": "the function keyword as we're doing here",
    "start": "577080",
    "end": "578850"
  },
  {
    "text": "or you can use the more concise arrow",
    "start": "578850",
    "end": "580500"
  },
  {
    "text": "syntax in modern JavaScript if you omit",
    "start": "580500",
    "end": "582870"
  },
  {
    "text": "braces the code following the arrow will",
    "start": "582870",
    "end": "584820"
  },
  {
    "text": "implicitly return a value so you can",
    "start": "584820",
    "end": "586710"
  },
  {
    "text": "define a function that returns something",
    "start": "586710",
    "end": "588330"
  },
  {
    "text": "on a single line",
    "start": "588330",
    "end": "589380"
  },
  {
    "text": "but as easy as that sounds there's all",
    "start": "589380",
    "end": "591240"
  },
  {
    "text": "kinds of complexity and terminology that",
    "start": "591240",
    "end": "593100"
  },
  {
    "text": "goes along with functions so let's try",
    "start": "593100",
    "end": "595200"
  },
  {
    "text": "to unpack some of the most important",
    "start": "595200",
    "end": "596850"
  },
  {
    "text": "concepts that you should understand as",
    "start": "596850",
    "end": "598470"
  },
  {
    "text": "ajs developer first of all functions can",
    "start": "598470",
    "end": "600720"
  },
  {
    "text": "be anonymous or they can have a name",
    "start": "600720",
    "end": "602400"
  },
  {
    "text": "which will immediately follow the",
    "start": "602400",
    "end": "603870"
  },
  {
    "text": "function keyword and you'll also",
    "start": "603870",
    "end": "605160"
  },
  {
    "text": "commonly see anonymous functions",
    "start": "605160",
    "end": "606690"
  },
  {
    "text": "assigned to the value of a variable and",
    "start": "606690",
    "end": "608670"
  },
  {
    "text": "another thing you'll hear is that",
    "start": "608670",
    "end": "609839"
  },
  {
    "text": "JavaScript supports higher-order",
    "start": "609839",
    "end": "611130"
  },
  {
    "text": "functions and that means we can provide",
    "start": "611130",
    "end": "612960"
  },
  {
    "text": "functions as the input or arguments to",
    "start": "612960",
    "end": "615390"
  },
  {
    "text": "another function or as the return value",
    "start": "615390",
    "end": "617400"
  },
  {
    "text": "from a function in the previous video we",
    "start": "617400",
    "end": "619260"
  },
  {
    "text": "talked about the JavaScript event loop",
    "start": "619260",
    "end": "620850"
  },
  {
    "text": "and callbacks and this is important with",
    "start": "620850",
    "end": "622650"
  },
  {
    "text": "functions because you'll often use",
    "start": "622650",
    "end": "624150"
  },
  {
    "text": "anonymous functions as arguments to",
    "start": "624150",
    "end": "626160"
  },
  {
    "text": "other functions that will be called back",
    "start": "626160",
    "end": "627720"
  },
  {
    "text": "later after some asynchronous code is",
    "start": "627720",
    "end": "629820"
  },
  {
    "text": "finished executing in addition you can",
    "start": "629820",
    "end": "632220"
  },
  {
    "text": "define new functions within a function",
    "start": "632220",
    "end": "633810"
  },
  {
    "text": "and this example the outer function is",
    "start": "633810",
    "end": "636150"
  },
  {
    "text": "the one that wraps the inner function",
    "start": "636150",
    "end": "637740"
  },
  {
    "text": "and that's related to a very important",
    "start": "637740",
    "end": "639510"
  },
  {
    "text": "question that you'll hear in a lot of",
    "start": "639510",
    "end": "640620"
  },
  {
    "text": "JavaScript interviews what is a closure",
    "start": "640620",
    "end": "642480"
  },
  {
    "text": "in the most simple sense a closure is",
    "start": "642480",
    "end": "644700"
  },
  {
    "text": "just a function within a function where",
    "start": "644700",
    "end": "646770"
  },
  {
    "text": "the inner function references a variable",
    "start": "646770",
    "end": "648900"
  },
  {
    "text": "that was declared in the scope of the",
    "start": "648900",
    "end": "650730"
  },
  {
    "text": "outer function now what makes this",
    "start": "650730",
    "end": "652350"
  },
  {
    "text": "special versus a lot of other",
    "start": "652350",
    "end": "653640"
  },
  {
    "text": "programming languages is that the",
    "start": "653640",
    "end": "655260"
  },
  {
    "text": "variable in the outer function will be",
    "start": "655260",
    "end": "657330"
  },
  {
    "text": "maintained in memory even after that",
    "start": "657330",
    "end": "659310"
  },
  {
    "text": "function returns and has popped off the",
    "start": "659310",
    "end": "660959"
  },
  {
    "text": "call stack so this means the inner",
    "start": "660959",
    "end": "662670"
  },
  {
    "text": "function always has access to this state",
    "start": "662670",
    "end": "664589"
  },
  {
    "text": "from the outer function at the time it",
    "start": "664589",
    "end": "666150"
  },
  {
    "text": "was created in the code here you can see",
    "start": "666150",
    "end": "667980"
  },
  {
    "text": "we define a couple of variables in the",
    "start": "667980",
    "end": "669510"
  },
  {
    "text": "outer function then we operate on them",
    "start": "669510",
    "end": "671730"
  },
  {
    "text": "and return them from the inner function",
    "start": "671730",
    "end": "673380"
  },
  {
    "text": "and then expose the inner function by",
    "start": "673380",
    "end": "675570"
  },
  {
    "text": "simply returning it and now because that",
    "start": "675570",
    "end": "677760"
  },
  {
    "text": "outer function has closed over the inner",
    "start": "677760",
    "end": "679620"
  },
  {
    "text": "function we can call it and still have",
    "start": "679620",
    "end": "681450"
  },
  {
    "text": "reference to the state in the outer",
    "start": "681450",
    "end": "683279"
  },
  {
    "text": "function even though we only called the",
    "start": "683279",
    "end": "684930"
  },
  {
    "text": "outer function once we still have access",
    "start": "684930",
    "end": "686640"
  },
  {
    "text": "to its local variables and that's how",
    "start": "686640",
    "end": "688680"
  },
  {
    "text": "you make a closure if you have",
    "start": "688680",
    "end": "690270"
  },
  {
    "text": "experience with an object-oriented",
    "start": "690270",
    "end": "691650"
  },
  {
    "text": "programming language a closure is very",
    "start": "691650",
    "end": "693720"
  },
  {
    "text": "similar to a class",
    "start": "693720",
    "end": "694710"
  },
  {
    "text": "instance at least from a conceptual",
    "start": "694710",
    "end": "696630"
  },
  {
    "text": "standpoint because you have a function",
    "start": "696630",
    "end": "698370"
  },
  {
    "text": "that contains some state and then you",
    "start": "698370",
    "end": "699870"
  },
  {
    "text": "have an inner function that can operate",
    "start": "699870",
    "end": "701250"
  },
  {
    "text": "and change that state in the same way",
    "start": "701250",
    "end": "703290"
  },
  {
    "text": "that a class instance has some",
    "start": "703290",
    "end": "704610"
  },
  {
    "text": "properties and then you have methods",
    "start": "704610",
    "end": "706170"
  },
  {
    "text": "that can change those properties in fact",
    "start": "706170",
    "end": "708270"
  },
  {
    "text": "the class keyword in JavaScript is just",
    "start": "708270",
    "end": "710520"
  },
  {
    "text": "syntactic sugar for functions and",
    "start": "710520",
    "end": "712200"
  },
  {
    "text": "closures but we'll look at classes and",
    "start": "712200",
    "end": "714270"
  },
  {
    "text": "object-oriented programming in a future",
    "start": "714270",
    "end": "716040"
  },
  {
    "text": "video because now we're ready for",
    "start": "716040",
    "end": "717450"
  },
  {
    "text": "chapter 6 objects an object is just a",
    "start": "717450",
    "end": "720450"
  },
  {
    "text": "data structure that allows you to",
    "start": "720450",
    "end": "722130"
  },
  {
    "text": "associate a collection of key value",
    "start": "722130",
    "end": "724020"
  },
  {
    "text": "pairs which is similar to a map or a",
    "start": "724020",
    "end": "726030"
  },
  {
    "text": "hash map in other languages it's",
    "start": "726030",
    "end": "728010"
  },
  {
    "text": "possible to instantiate an object and",
    "start": "728010",
    "end": "729930"
  },
  {
    "text": "then add properties to it one by one but",
    "start": "729930",
    "end": "731940"
  },
  {
    "text": "in most cases you'll use the object",
    "start": "731940",
    "end": "733500"
  },
  {
    "text": "literal syntax this allows you to define",
    "start": "733500",
    "end": "735660"
  },
  {
    "text": "an object by simply enclosing your key",
    "start": "735660",
    "end": "737760"
  },
  {
    "text": "value pairs inside of braces you can",
    "start": "737760",
    "end": "739980"
  },
  {
    "text": "access the value of a key by using dot",
    "start": "739980",
    "end": "741840"
  },
  {
    "text": "notation or with brackets and a string",
    "start": "741840",
    "end": "744300"
  },
  {
    "text": "and you can mutate properties on an",
    "start": "744300",
    "end": "746220"
  },
  {
    "text": "object even when it's defined as a Const",
    "start": "746220",
    "end": "748320"
  },
  {
    "text": "variable and it's also important to",
    "start": "748320",
    "end": "750090"
  },
  {
    "text": "point out that functions can be used as",
    "start": "750090",
    "end": "751860"
  },
  {
    "text": "values on an object then inside a",
    "start": "751860",
    "end": "754200"
  },
  {
    "text": "function we can actually reference",
    "start": "754200",
    "end": "755550"
  },
  {
    "text": "properties on this object by using this",
    "start": "755550",
    "end": "757950"
  },
  {
    "text": "but what the hell is this this is one of",
    "start": "757950",
    "end": "761040"
  },
  {
    "text": "the more challenging concepts to grasp",
    "start": "761040",
    "end": "762420"
  },
  {
    "text": "in JavaScript now remember earlier I",
    "start": "762420",
    "end": "765090"
  },
  {
    "text": "said that anything that's not a",
    "start": "765090",
    "end": "766230"
  },
  {
    "text": "primitive value is an object and this is",
    "start": "766230",
    "end": "768870"
  },
  {
    "text": "just a keyword that refers to the",
    "start": "768870",
    "end": "770640"
  },
  {
    "text": "current object that the code is",
    "start": "770640",
    "end": "771900"
  },
  {
    "text": "operating in if you go into the browser",
    "start": "771900",
    "end": "774000"
  },
  {
    "text": "console and say console like this it's",
    "start": "774000",
    "end": "776400"
  },
  {
    "text": "going to print out the window object",
    "start": "776400",
    "end": "777870"
  },
  {
    "text": "that's because window is the global",
    "start": "777870",
    "end": "779820"
  },
  {
    "text": "scope and browsers when referenced by",
    "start": "779820",
    "end": "781740"
  },
  {
    "text": "itself or if used in a function that's",
    "start": "781740",
    "end": "783630"
  },
  {
    "text": "called normally it will reference the",
    "start": "783630",
    "end": "785250"
  },
  {
    "text": "global object that's easy enough but",
    "start": "785250",
    "end": "787470"
  },
  {
    "text": "what if we have our own custom object",
    "start": "787470",
    "end": "789000"
  },
  {
    "text": "and on that object we have two",
    "start": "789000",
    "end": "790530"
  },
  {
    "text": "properties that define functions the",
    "start": "790530",
    "end": "792660"
  },
  {
    "text": "first function uses the function keyword",
    "start": "792660",
    "end": "794490"
  },
  {
    "text": "but the second function it uses the",
    "start": "794490",
    "end": "796530"
  },
  {
    "text": "arrow syntax now intuitively you might",
    "start": "796530",
    "end": "798720"
  },
  {
    "text": "think that these functions are exactly",
    "start": "798720",
    "end": "800130"
  },
  {
    "text": "the same but that's not the case in the",
    "start": "800130",
    "end": "802290"
  },
  {
    "text": "first function this refers to the object",
    "start": "802290",
    "end": "804720"
  },
  {
    "text": "that it's defined on but when it comes",
    "start": "804720",
    "end": "806250"
  },
  {
    "text": "to the arrow function it doesn't have",
    "start": "806250",
    "end": "807810"
  },
  {
    "text": "its own bindings to this which means it",
    "start": "807810",
    "end": "809700"
  },
  {
    "text": "bypasses our custom function and this",
    "start": "809700",
    "end": "811890"
  },
  {
    "text": "becomes the global object now the other",
    "start": "811890",
    "end": "814470"
  },
  {
    "text": "thing you should know is that when you",
    "start": "814470",
    "end": "815790"
  },
  {
    "text": "have a function there are other ways to",
    "start": "815790",
    "end": "817650"
  },
  {
    "text": "call it beyond just using parentheses",
    "start": "817650",
    "end": "819420"
  },
  {
    "text": "for example you can use it's call method",
    "start": "819420",
    "end": "821730"
  },
  {
    "text": "and in pass in the this context that you",
    "start": "821730",
    "end": "823740"
  },
  {
    "text": "want to buy into the function now any",
    "start": "823740",
    "end": "825690"
  },
  {
    "text": "references that you have to this and the",
    "start": "825690",
    "end": "827370"
  },
  {
    "text": "function will",
    "start": "827370",
    "end": "828240"
  },
  {
    "text": "prints the object that you passed a call",
    "start": "828240",
    "end": "830160"
  },
  {
    "text": "in the code here we're calling this face",
    "start": "830160",
    "end": "832170"
  },
  {
    "text": "and the function but it's currently",
    "start": "832170",
    "end": "833850"
  },
  {
    "text": "bound to the global object which doesn't",
    "start": "833850",
    "end": "836010"
  },
  {
    "text": "have a face property but if we pass in",
    "start": "836010",
    "end": "837990"
  },
  {
    "text": "an object that does have a face property",
    "start": "837990",
    "end": "839760"
  },
  {
    "text": "like a clown or a ghost then it will",
    "start": "839760",
    "end": "841740"
  },
  {
    "text": "return a defined value understanding",
    "start": "841740",
    "end": "844080"
  },
  {
    "text": "this will make you a better JavaScript",
    "start": "844080",
    "end": "845880"
  },
  {
    "text": "developer but it won't be something that",
    "start": "845880",
    "end": "847440"
  },
  {
    "text": "you have to use on a daily basis and",
    "start": "847440",
    "end": "849060"
  },
  {
    "text": "with that being said I think we've",
    "start": "849060",
    "end": "850529"
  },
  {
    "text": "covered enough information for one video",
    "start": "850529",
    "end": "852240"
  },
  {
    "text": "and don't worry too much if that felt",
    "start": "852240",
    "end": "853740"
  },
  {
    "text": "overwhelming we can't have anyone",
    "start": "853740",
    "end": "855180"
  },
  {
    "text": "freaked out out there ok gotta keep our",
    "start": "855180",
    "end": "857850"
  },
  {
    "text": "composure we'll revisit many of these",
    "start": "857850",
    "end": "865350"
  },
  {
    "text": "concepts when we look at the practical",
    "start": "865350",
    "end": "866940"
  },
  {
    "text": "applications of functions objects and",
    "start": "866940",
    "end": "869040"
  },
  {
    "text": "more I'm gonna go ahead and wrap things",
    "start": "869040",
    "end": "870480"
  },
  {
    "text": "up there if this video helped you please",
    "start": "870480",
    "end": "872130"
  },
  {
    "text": "like and subscribe and make sure to",
    "start": "872130",
    "end": "873959"
  },
  {
    "text": "check out the full source code on fire",
    "start": "873959",
    "end": "875700"
  },
  {
    "text": "ship IO",
    "start": "875700",
    "end": "876450"
  },
  {
    "text": "thanks for watching and I will talk to",
    "start": "876450",
    "end": "878220"
  },
  {
    "text": "you soon",
    "start": "878220",
    "end": "879310"
  },
  {
    "text": "[Music]",
    "start": "879310",
    "end": "885440"
  },
  {
    "text": "you",
    "start": "885440",
    "end": "887500"
  }
]