[
  {
    "text": "[Music]",
    "start": "0",
    "end": "4660"
  },
  {
    "text": "fire base summit wrapped up a few days",
    "start": "6230",
    "end": "8340"
  },
  {
    "text": "ago and although I wasn't able to make",
    "start": "8340",
    "end": "9840"
  },
  {
    "text": "it in person they did announce a bunch",
    "start": "9840",
    "end": "11490"
  },
  {
    "text": "of cool new features the feature that is",
    "start": "11490",
    "end": "13290"
  },
  {
    "text": "most exciting to me is the local",
    "start": "13290",
    "end": "14910"
  },
  {
    "text": "emulator for Fighter Store and the",
    "start": "14910",
    "end": "16619"
  },
  {
    "text": "real-time database the emulators allow",
    "start": "16619",
    "end": "18510"
  },
  {
    "text": "you to run an instance of your database",
    "start": "18510",
    "end": "19980"
  },
  {
    "text": "locally meaning you can build up a test",
    "start": "19980",
    "end": "21900"
  },
  {
    "text": "suite around your security rules",
    "start": "21900",
    "end": "23490"
  },
  {
    "text": "this not only speeds up development time",
    "start": "23490",
    "end": "25140"
  },
  {
    "text": "but it also increases the integrity of",
    "start": "25140",
    "end": "27029"
  },
  {
    "text": "your back-end security in today's video",
    "start": "27029",
    "end": "29310"
  },
  {
    "text": "you'll learn how to set up the emulator",
    "start": "29310",
    "end": "30960"
  },
  {
    "text": "and build out a full test suite using",
    "start": "30960",
    "end": "32880"
  },
  {
    "text": "chests if you're new here like and",
    "start": "32880",
    "end": "34559"
  },
  {
    "text": "subscribe and make sure to grab the full",
    "start": "34559",
    "end": "36180"
  },
  {
    "text": "source code from angular firebase comm",
    "start": "36180",
    "end": "38219"
  },
  {
    "text": "now before we get going with the",
    "start": "38219",
    "end": "39899"
  },
  {
    "text": "emulator I'd also like to point out that",
    "start": "39899",
    "end": "41460"
  },
  {
    "text": "firebase announced a new project",
    "start": "41460",
    "end": "42930"
  },
  {
    "text": "management API this API makes it",
    "start": "42930",
    "end": "45510"
  },
  {
    "text": "possible for apps to manage firebase",
    "start": "45510",
    "end": "47399"
  },
  {
    "text": "projects of other users for example you",
    "start": "47399",
    "end": "49950"
  },
  {
    "text": "can now deploy your firebase projects",
    "start": "49950",
    "end": "51539"
  },
  {
    "text": "directly from stack blitz or glitch but",
    "start": "51539",
    "end": "53610"
  },
  {
    "text": "the more exciting thing going on there",
    "start": "53610",
    "end": "54840"
  },
  {
    "text": "is that you can use this project",
    "start": "54840",
    "end": "56100"
  },
  {
    "text": "management API to build your own apps",
    "start": "56100",
    "end": "58079"
  },
  {
    "text": "that do the exact same thing so let me",
    "start": "58079",
    "end": "60090"
  },
  {
    "text": "know in the comments if you want to see",
    "start": "60090",
    "end": "61199"
  },
  {
    "text": "that covered in a future video so now",
    "start": "61199",
    "end": "63690"
  },
  {
    "text": "let's get started talking about the",
    "start": "63690",
    "end": "64890"
  },
  {
    "text": "emulator the emulator just runs fire",
    "start": "64890",
    "end": "66900"
  },
  {
    "text": "store or the real-time database locally",
    "start": "66900",
    "end": "68939"
  },
  {
    "text": "on your machine this means you can now",
    "start": "68939",
    "end": "70590"
  },
  {
    "text": "simulate interaction with the database",
    "start": "70590",
    "end": "72240"
  },
  {
    "text": "without actually having to run it in the",
    "start": "72240",
    "end": "73890"
  },
  {
    "text": "cloud this makes it so much easier to be",
    "start": "73890",
    "end": "76439"
  },
  {
    "text": "confident that a complex set of security",
    "start": "76439",
    "end": "78390"
  },
  {
    "text": "rules are working the way that they",
    "start": "78390",
    "end": "79710"
  },
  {
    "text": "should I'm gonna go ahead and set this",
    "start": "79710",
    "end": "81119"
  },
  {
    "text": "project up with just a vanilla",
    "start": "81119",
    "end": "82259"
  },
  {
    "text": "JavaScript and just as the testing",
    "start": "82259",
    "end": "84600"
  },
  {
    "text": "library the reason I choose jest is",
    "start": "84600",
    "end": "86549"
  },
  {
    "text": "because it's very developer friendly and",
    "start": "86549",
    "end": "88259"
  },
  {
    "text": "also really good at testing asynchronous",
    "start": "88259",
    "end": "90119"
  },
  {
    "text": "code to start testing your rules in",
    "start": "90119",
    "end": "92070"
  },
  {
    "text": "isolation",
    "start": "92070",
    "end": "92729"
  },
  {
    "text": "I'd recommend starting from a brand new",
    "start": "92729",
    "end": "94259"
  },
  {
    "text": "directory and then install the latest",
    "start": "94259",
    "end": "96119"
  },
  {
    "text": "version of firebase tools once that's",
    "start": "96119",
    "end": "98820"
  },
  {
    "text": "done you can run firebase init fire",
    "start": "98820",
    "end": "100530"
  },
  {
    "text": "store and that will pull in your",
    "start": "100530",
    "end": "102060"
  },
  {
    "text": "existing security rules from whichever",
    "start": "102060",
    "end": "103680"
  },
  {
    "text": "project you select from there you can",
    "start": "103680",
    "end": "105750"
  },
  {
    "text": "run NPM in it to set up a package.json",
    "start": "105750",
    "end": "107820"
  },
  {
    "text": "in this folder then after that we can",
    "start": "107820",
    "end": "110130"
  },
  {
    "text": "install our testing utilities which",
    "start": "110130",
    "end": "111630"
  },
  {
    "text": "include at firebase testing and jest",
    "start": "111630",
    "end": "114470"
  },
  {
    "text": "then we'll give us a directory structure",
    "start": "114470",
    "end": "116640"
  },
  {
    "text": "that looks something like this I've also",
    "start": "116640",
    "end": "118590"
  },
  {
    "text": "created a spec folder that includes our",
    "start": "118590",
    "end": "120570"
  },
  {
    "text": "testing files all of our testing code",
    "start": "120570",
    "end": "122969"
  },
  {
    "text": "will be written there and then the thing",
    "start": "122969",
    "end": "124409"
  },
  {
    "text": "we're actually testing is this firestore",
    "start": "124409",
    "end": "126329"
  },
  {
    "text": "rules file if you're not already",
    "start": "126329",
    "end": "127979"
  },
  {
    "text": "familiar with fire store security rules",
    "start": "127979",
    "end": "129690"
  },
  {
    "text": "I recommend checking out episode 92",
    "start": "129690",
    "end": "131430"
  },
  {
    "text": "where I teach you all about rules and",
    "start": "131430",
    "end": "133379"
  },
  {
    "text": "how to",
    "start": "133379",
    "end": "133800"
  },
  {
    "text": "hack a firebase app and one additional",
    "start": "133800",
    "end": "136050"
  },
  {
    "text": "pro tip I have for you here is to",
    "start": "136050",
    "end": "137370"
  },
  {
    "text": "install the firebase security rules",
    "start": "137370",
    "end": "139170"
  },
  {
    "text": "plugin for BS code to get syntax",
    "start": "139170",
    "end": "141180"
  },
  {
    "text": "highlighting and autocomplete while you",
    "start": "141180",
    "end": "142950"
  },
  {
    "text": "write out your rules now there are a few",
    "start": "142950",
    "end": "145020"
  },
  {
    "text": "additional steps to install the emulator",
    "start": "145020",
    "end": "146730"
  },
  {
    "text": "you can do it directly from the command",
    "start": "146730",
    "end": "148320"
  },
  {
    "text": "line with the instructions here or you",
    "start": "148320",
    "end": "150090"
  },
  {
    "text": "can install the Java jar file directly",
    "start": "150090",
    "end": "152280"
  },
  {
    "text": "you'll probably wanna go at the",
    "start": "152280",
    "end": "153540"
  },
  {
    "text": "command-line option but in either case",
    "start": "153540",
    "end": "155220"
  },
  {
    "text": "you need to have Java installed on your",
    "start": "155220",
    "end": "156660"
  },
  {
    "text": "system",
    "start": "156660",
    "end": "157230"
  },
  {
    "text": "if Java is not already on your system",
    "start": "157230",
    "end": "159030"
  },
  {
    "text": "head over to there super-modern website",
    "start": "159030",
    "end": "160740"
  },
  {
    "text": "and get it installed today now I want to",
    "start": "160740",
    "end": "163320"
  },
  {
    "text": "show you what a basic test run will look",
    "start": "163320",
    "end": "164850"
  },
  {
    "text": "like we have two terminal windows setup",
    "start": "164850",
    "end": "166650"
  },
  {
    "text": "here on the left side we'll go ahead and",
    "start": "166650",
    "end": "168690"
  },
  {
    "text": "run the emulator which we can do with",
    "start": "168690",
    "end": "170550"
  },
  {
    "text": "firebase serve only fire store that will",
    "start": "170550",
    "end": "173790"
  },
  {
    "text": "run the local emulator in the background",
    "start": "173790",
    "end": "175500"
  },
  {
    "text": "you really just need to keep this in",
    "start": "175500",
    "end": "176910"
  },
  {
    "text": "mind for debugging if it's not behaving",
    "start": "176910",
    "end": "178770"
  },
  {
    "text": "the way you expect then on the right",
    "start": "178770",
    "end": "180600"
  },
  {
    "text": "side we can run the Jess command to run",
    "start": "180600",
    "end": "182520"
  },
  {
    "text": "our actual specs now I've been working",
    "start": "182520",
    "end": "184710"
  },
  {
    "text": "with the emulator for a couple days now",
    "start": "184710",
    "end": "186330"
  },
  {
    "text": "and I want to start this video off by",
    "start": "186330",
    "end": "188130"
  },
  {
    "text": "giving you some helpers that will just",
    "start": "188130",
    "end": "189750"
  },
  {
    "text": "make your test easier to write and also",
    "start": "189750",
    "end": "192660"
  },
  {
    "text": "just to warn you we're going to be",
    "start": "192660",
    "end": "193650"
  },
  {
    "text": "writing a lot of async functions so if",
    "start": "193650",
    "end": "195780"
  },
  {
    "text": "you haven't seen the async/await video",
    "start": "195780",
    "end": "197220"
  },
  {
    "text": "make sure to check that out as well",
    "start": "197220",
    "end": "198739"
  },
  {
    "text": "the first helper function is called",
    "start": "198739",
    "end": "200910"
  },
  {
    "text": "setup and this will create an instance",
    "start": "200910",
    "end": "202800"
  },
  {
    "text": "of the emulated firestore database it",
    "start": "202800",
    "end": "205650"
  },
  {
    "text": "also has the option to take an auth",
    "start": "205650",
    "end": "207239"
  },
  {
    "text": "object which will create a fake user and",
    "start": "207239",
    "end": "209489"
  },
  {
    "text": "also mock data that will be written to",
    "start": "209489",
    "end": "211709"
  },
  {
    "text": "the database when it's initialized every",
    "start": "211709",
    "end": "214170"
  },
  {
    "text": "time you initialize a test database",
    "start": "214170",
    "end": "215760"
  },
  {
    "text": "you'll want to give it a unique project",
    "start": "215760",
    "end": "217500"
  },
  {
    "text": "ID you can do this easily by just making",
    "start": "217500",
    "end": "219989"
  },
  {
    "text": "your project ID a random number or a",
    "start": "219989",
    "end": "222180"
  },
  {
    "text": "date/time stamp from this point you'll",
    "start": "222180",
    "end": "224880"
  },
  {
    "text": "want to go ahead and call firebase",
    "start": "224880",
    "end": "226650"
  },
  {
    "text": "initialize test app it's important to",
    "start": "226650",
    "end": "229350"
  },
  {
    "text": "note that when you initialize the app",
    "start": "229350",
    "end": "230880"
  },
  {
    "text": "for the first time it will not have any",
    "start": "230880",
    "end": "232890"
  },
  {
    "text": "security rules applied to it this is",
    "start": "232890",
    "end": "235260"
  },
  {
    "text": "actually very useful because we can see",
    "start": "235260",
    "end": "237000"
  },
  {
    "text": "the database with some mock data before",
    "start": "237000",
    "end": "238920"
  },
  {
    "text": "the rules are applied to it and you can",
    "start": "238920",
    "end": "241140"
  },
  {
    "text": "also provide a user context which would",
    "start": "241140",
    "end": "243090"
  },
  {
    "text": "just be an object with a user ID that",
    "start": "243090",
    "end": "245040"
  },
  {
    "text": "you could then use to test your rules",
    "start": "245040",
    "end": "246690"
  },
  {
    "text": "the way that I see the database is I",
    "start": "246690",
    "end": "249300"
  },
  {
    "text": "provide a data object where every key in",
    "start": "249300",
    "end": "251850"
  },
  {
    "text": "that object is the path to the document",
    "start": "251850",
    "end": "253800"
  },
  {
    "text": "and then the value is the data that we",
    "start": "253800",
    "end": "255870"
  },
  {
    "text": "want to write to the database this makes",
    "start": "255870",
    "end": "257790"
  },
  {
    "text": "it really easy to see the database",
    "start": "257790",
    "end": "259079"
  },
  {
    "text": "because we can just loop over the keys",
    "start": "259080",
    "end": "260609"
  },
  {
    "text": "and that object and then write the data",
    "start": "260609",
    "end": "262470"
  },
  {
    "text": "to their corresponding paths now that we",
    "start": "262470",
    "end": "264750"
  },
  {
    "text": "have the mock data seated in the",
    "start": "264750",
    "end": "266130"
  },
  {
    "text": "database we'll go ahead and",
    "start": "266130",
    "end": "267420"
  },
  {
    "text": "applied the security rules that can be",
    "start": "267420",
    "end": "269760"
  },
  {
    "text": "done by calling load firestore rules and",
    "start": "269760",
    "end": "271800"
  },
  {
    "text": "then we'll want to use the file system",
    "start": "271800",
    "end": "273510"
  },
  {
    "text": "to point to the actual raw rules file",
    "start": "273510",
    "end": "275640"
  },
  {
    "text": "and finally we'll return the actual",
    "start": "275640",
    "end": "278070"
  },
  {
    "text": "database instance from this method so we",
    "start": "278070",
    "end": "280020"
  },
  {
    "text": "can use it throughout our specs so now",
    "start": "280020",
    "end": "282780"
  },
  {
    "text": "that we have our setup done I'm also",
    "start": "282780",
    "end": "284220"
  },
  {
    "text": "going to export a function called",
    "start": "284220",
    "end": "285840"
  },
  {
    "text": "teardown which will just look for all",
    "start": "285840",
    "end": "287820"
  },
  {
    "text": "the firebase apps that were created on",
    "start": "287820",
    "end": "289230"
  },
  {
    "text": "this test run and then delete them once",
    "start": "289230",
    "end": "291270"
  },
  {
    "text": "the tests are finished so those should",
    "start": "291270",
    "end": "293220"
  },
  {
    "text": "make your life a lot easier now let's",
    "start": "293220",
    "end": "294750"
  },
  {
    "text": "look at how we can use them in an actual",
    "start": "294750",
    "end": "296280"
  },
  {
    "text": "test you typically want your database to",
    "start": "296280",
    "end": "298680"
  },
  {
    "text": "be secure by default which means that",
    "start": "298680",
    "end": "300600"
  },
  {
    "text": "you'll have allow read and write if",
    "start": "300600",
    "end": "302310"
  },
  {
    "text": "false at the very top level of the",
    "start": "302310",
    "end": "304410"
  },
  {
    "text": "database this means that all paths are",
    "start": "304410",
    "end": "306330"
  },
  {
    "text": "locked down by default unless you",
    "start": "306330",
    "end": "308070"
  },
  {
    "text": "specifically allow access to them let's",
    "start": "308070",
    "end": "310530"
  },
  {
    "text": "go ahead and test that this actually",
    "start": "310530",
    "end": "311640"
  },
  {
    "text": "works by first importing our setup and",
    "start": "311640",
    "end": "313650"
  },
  {
    "text": "teardown methods then firebase provides",
    "start": "313650",
    "end": "315750"
  },
  {
    "text": "us with two tests and utilities that we",
    "start": "315750",
    "end": "317460"
  },
  {
    "text": "can use to determine whether or not an",
    "start": "317460",
    "end": "319050"
  },
  {
    "text": "operation was successful or failed the",
    "start": "319050",
    "end": "321870"
  },
  {
    "text": "first thing we'll do is describe our",
    "start": "321870",
    "end": "323400"
  },
  {
    "text": "test suite which is just our database",
    "start": "323400",
    "end": "324960"
  },
  {
    "text": "rules then we'll declare the database as",
    "start": "324960",
    "end": "327060"
  },
  {
    "text": "a global variable that we can reuse",
    "start": "327060",
    "end": "328680"
  },
  {
    "text": "throughout the tests then we can use the",
    "start": "328680",
    "end": "330900"
  },
  {
    "text": "before all hook to define the database",
    "start": "330900",
    "end": "332820"
  },
  {
    "text": "with our setup method that we define in",
    "start": "332820",
    "end": "334710"
  },
  {
    "text": "the helpers file the thing we actually",
    "start": "334710",
    "end": "336930"
  },
  {
    "text": "want to test here is that our database",
    "start": "336930",
    "end": "338160"
  },
  {
    "text": "is secure by default so if we try to",
    "start": "338160",
    "end": "340200"
  },
  {
    "text": "read or write to any random collection",
    "start": "340200",
    "end": "341970"
  },
  {
    "text": "it should give us a permission denied",
    "start": "341970",
    "end": "343740"
  },
  {
    "text": "error and after all the test run will",
    "start": "343740",
    "end": "346560"
  },
  {
    "text": "also want to run our teardown method to",
    "start": "346560",
    "end": "348810"
  },
  {
    "text": "delete those app instances ingest you",
    "start": "348810",
    "end": "352140"
  },
  {
    "text": "can write a test by using the test",
    "start": "352140",
    "end": "353550"
  },
  {
    "text": "method and then describing what you're",
    "start": "353550",
    "end": "355290"
  },
  {
    "text": "testing in this case the operation",
    "start": "355290",
    "end": "357180"
  },
  {
    "text": "should fail when reading or writing to",
    "start": "357180",
    "end": "358770"
  },
  {
    "text": "an unauthorized collection so there are",
    "start": "358770",
    "end": "361350"
  },
  {
    "text": "a few different ways to write your",
    "start": "361350",
    "end": "362580"
  },
  {
    "text": "actual tests and this really just boils",
    "start": "362580",
    "end": "364440"
  },
  {
    "text": "down to the developers preference I",
    "start": "364440",
    "end": "366420"
  },
  {
    "text": "would definitely recommend making this",
    "start": "366420",
    "end": "368040"
  },
  {
    "text": "an async function if you like readable",
    "start": "368040",
    "end": "369780"
  },
  {
    "text": "code then the firebase assertion helpers",
    "start": "369780",
    "end": "372180"
  },
  {
    "text": "will take a promise as their argument",
    "start": "372180",
    "end": "374070"
  },
  {
    "text": "such as a document read if the read is",
    "start": "374070",
    "end": "376710"
  },
  {
    "text": "blocked by security rules in this case",
    "start": "376710",
    "end": "378270"
  },
  {
    "text": "then this promise will resolve but if",
    "start": "378270",
    "end": "380340"
  },
  {
    "text": "the reads successful then the promise",
    "start": "380340",
    "end": "381750"
  },
  {
    "text": "will be rejected all we have to do is",
    "start": "381750",
    "end": "383640"
  },
  {
    "text": "add the result to an expectation and our",
    "start": "383640",
    "end": "385650"
  },
  {
    "text": "first test is completed if you want to",
    "start": "385650",
    "end": "388260"
  },
  {
    "text": "make your code even more concise you can",
    "start": "388260",
    "end": "390060"
  },
  {
    "text": "actually just inline the await statement",
    "start": "390060",
    "end": "391860"
  },
  {
    "text": "directly in the expectation that'll give",
    "start": "391860",
    "end": "394200"
  },
  {
    "text": "you a nice and concise single line test",
    "start": "394200",
    "end": "396030"
  },
  {
    "text": "but these get very hard to read as your",
    "start": "396030",
    "end": "398370"
  },
  {
    "text": "tests get more complex",
    "start": "398370",
    "end": "400610"
  },
  {
    "text": "to give you one more option here which",
    "start": "400610",
    "end": "401930"
  },
  {
    "text": "is slightly more advanced and that's",
    "start": "401930",
    "end": "403460"
  },
  {
    "text": "creating your own custom matcher with",
    "start": "403460",
    "end": "405229"
  },
  {
    "text": "just what we can do is pass our read",
    "start": "405229",
    "end": "407930"
  },
  {
    "text": "directly into expect and then we can",
    "start": "407930",
    "end": "409939"
  },
  {
    "text": "resolve it as a custom matcher that will",
    "start": "409939",
    "end": "412069"
  },
  {
    "text": "either be to deny or to allow basically",
    "start": "412069",
    "end": "415219"
  },
  {
    "text": "every test that you write will be",
    "start": "415219",
    "end": "416449"
  },
  {
    "text": "checking whether or not a document",
    "start": "416449",
    "end": "418099"
  },
  {
    "text": "operation was denied or allowed so",
    "start": "418099",
    "end": "420830"
  },
  {
    "text": "having a custom matcher here is super",
    "start": "420830",
    "end": "422449"
  },
  {
    "text": "useful because it not only keeps you our",
    "start": "422449",
    "end": "424159"
  },
  {
    "text": "code concise but also readable let's go",
    "start": "424159",
    "end": "427069"
  },
  {
    "text": "ahead and switch back to our helpers",
    "start": "427069",
    "end": "428599"
  },
  {
    "text": "file and that I'm going to write expect",
    "start": "428599",
    "end": "430430"
  },
  {
    "text": "extend and provide it with an async",
    "start": "430430",
    "end": "432500"
  },
  {
    "text": "function called to allow the X argument",
    "start": "432500",
    "end": "435800"
  },
  {
    "text": "to this function is whatever you pass to",
    "start": "435800",
    "end": "437659"
  },
  {
    "text": "the expectation which should be a",
    "start": "437659",
    "end": "439400"
  },
  {
    "text": "firebase promise for example reading or",
    "start": "439400",
    "end": "442400"
  },
  {
    "text": "writing a certain path in the database",
    "start": "442400",
    "end": "444550"
  },
  {
    "text": "we will try to resolve the promise and",
    "start": "444550",
    "end": "447199"
  },
  {
    "text": "if it resolves we know that the test",
    "start": "447199",
    "end": "448819"
  },
  {
    "text": "should pass otherwise we're going to",
    "start": "448819",
    "end": "450439"
  },
  {
    "text": "have the test fail then from the custom",
    "start": "450439",
    "end": "453319"
  },
  {
    "text": "assertion you just need to return an",
    "start": "453319",
    "end": "454729"
  },
  {
    "text": "object that has a pass value which",
    "start": "454729",
    "end": "456710"
  },
  {
    "text": "should either be true or false and then",
    "start": "456710",
    "end": "458479"
  },
  {
    "text": "a message which is a function that",
    "start": "458479",
    "end": "460069"
  },
  {
    "text": "returns a string and keep in mind that",
    "start": "460069",
    "end": "462650"
  },
  {
    "text": "this message will only be shown if the",
    "start": "462650",
    "end": "464360"
  },
  {
    "text": "test fails so now we have a match for",
    "start": "464360",
    "end": "466789"
  },
  {
    "text": "that will fail if the database reader",
    "start": "466789",
    "end": "468650"
  },
  {
    "text": "right is blocked by firebase rules then",
    "start": "468650",
    "end": "471650"
  },
  {
    "text": "we'll also want to create an inverse",
    "start": "471650",
    "end": "473120"
  },
  {
    "text": "matcher to check if a firebase rule is",
    "start": "473120",
    "end": "475279"
  },
  {
    "text": "allowed when it should have been denied",
    "start": "475279",
    "end": "476629"
  },
  {
    "text": "so we'll say to deny and just check with",
    "start": "476629",
    "end": "478909"
  },
  {
    "text": "the assert fails method from firebase",
    "start": "478909",
    "end": "481060"
  },
  {
    "text": "you can use whatever testing methods you",
    "start": "481060",
    "end": "483469"
  },
  {
    "text": "want but I'll be using my custom",
    "start": "483469",
    "end": "485060"
  },
  {
    "text": "matchers throughout this lesson now I'm",
    "start": "485060",
    "end": "487190"
  },
  {
    "text": "going to open up our comment spec which",
    "start": "487190",
    "end": "488960"
  },
  {
    "text": "defines the rules for our comments",
    "start": "488960",
    "end": "490520"
  },
  {
    "text": "collection and in this particular app a",
    "start": "490520",
    "end": "492680"
  },
  {
    "text": "user needs to be authenticated to view",
    "start": "492680",
    "end": "494659"
  },
  {
    "text": "comments and when writing a comment it",
    "start": "494659",
    "end": "496939"
  },
  {
    "text": "must have a user ID that matches the",
    "start": "496939",
    "end": "498889"
  },
  {
    "text": "auth user ID if we look at the actual",
    "start": "498889",
    "end": "501439"
  },
  {
    "text": "rules logic you can see we're allowing",
    "start": "501439",
    "end": "502969"
  },
  {
    "text": "reads if the request auth UID does not",
    "start": "502969",
    "end": "505580"
  },
  {
    "text": "equal null and then we're allowing",
    "start": "505580",
    "end": "507229"
  },
  {
    "text": "rights if the UID is equal to the",
    "start": "507229",
    "end": "509810"
  },
  {
    "text": "request resource data user ID in other",
    "start": "509810",
    "end": "512990"
  },
  {
    "text": "words the document that the user is",
    "start": "512990",
    "end": "514518"
  },
  {
    "text": "trying to write to the database has the",
    "start": "514519",
    "end": "516229"
  },
  {
    "text": "same user ID as the actual",
    "start": "516229",
    "end": "518060"
  },
  {
    "text": "authentication object user ID ensuring",
    "start": "518060",
    "end": "520909"
  },
  {
    "text": "that these rights fail is pretty easy",
    "start": "520909",
    "end": "522409"
  },
  {
    "text": "all we have to do is set up the database",
    "start": "522409",
    "end": "523909"
  },
  {
    "text": "with an authenticated user and then we",
    "start": "523909",
    "end": "526279"
  },
  {
    "text": "can make a reference to our collection",
    "start": "526279",
    "end": "527810"
  },
  {
    "text": "and expect that that read or write is",
    "start": "527810",
    "end": "530329"
  },
  {
    "text": "denied but it's even more important that",
    "start": "530329",
    "end": "533029"
  },
  {
    "text": "we verify that the",
    "start": "533029",
    "end": "534320"
  },
  {
    "text": "operations are allowed when the user has",
    "start": "534320",
    "end": "535880"
  },
  {
    "text": "the proper credentials so this time",
    "start": "535880",
    "end": "538010"
  },
  {
    "text": "we'll set up our database with an auth",
    "start": "538010",
    "end": "539570"
  },
  {
    "text": "object that has a user ID and an email",
    "start": "539570",
    "end": "541850"
  },
  {
    "text": "address this time we'll expect the reads",
    "start": "541850",
    "end": "544610"
  },
  {
    "text": "to be allowed because we have a user",
    "start": "544610",
    "end": "546440"
  },
  {
    "text": "that's logged in I currently have my",
    "start": "546440",
    "end": "548510"
  },
  {
    "text": "test running in watch mode so you can",
    "start": "548510",
    "end": "550310"
  },
  {
    "text": "see here if we switch out the matcher",
    "start": "550310",
    "end": "551630"
  },
  {
    "text": "that the test will fail if we expect",
    "start": "551630",
    "end": "553880"
  },
  {
    "text": "this to be denied",
    "start": "553880",
    "end": "555670"
  },
  {
    "text": "now when writing to the database we'll",
    "start": "555670",
    "end": "558050"
  },
  {
    "text": "expect the right to succeed if the user",
    "start": "558050",
    "end": "560180"
  },
  {
    "text": "sends an object that has the",
    "start": "560180",
    "end": "561410"
  },
  {
    "text": "corresponding user ID so we would expect",
    "start": "561410",
    "end": "563990"
  },
  {
    "text": "this add operation to be allowed because",
    "start": "563990",
    "end": "566030"
  },
  {
    "text": "it has the same user ID as the off.you",
    "start": "566030",
    "end": "567980"
  },
  {
    "text": "ID then we can add another line here",
    "start": "567980",
    "end": "569870"
  },
  {
    "text": "that tries to add an item to the",
    "start": "569870",
    "end": "571610"
  },
  {
    "text": "database with a different user ID and",
    "start": "571610",
    "end": "573650"
  },
  {
    "text": "we'll expect that one to be denied so",
    "start": "573650",
    "end": "575720"
  },
  {
    "text": "that's how you test basic user",
    "start": "575720",
    "end": "577700"
  },
  {
    "text": "authentication logic in the next step",
    "start": "577700",
    "end": "579590"
  },
  {
    "text": "we'll look at how we can see the",
    "start": "579590",
    "end": "580700"
  },
  {
    "text": "database with mock data and handle",
    "start": "580700",
    "end": "582770"
  },
  {
    "text": "things like role based access control",
    "start": "582770",
    "end": "584560"
  },
  {
    "text": "now going back to our rules I have a",
    "start": "584560",
    "end": "587030"
  },
  {
    "text": "function here called get user data which",
    "start": "587030",
    "end": "589190"
  },
  {
    "text": "will read a document in the users",
    "start": "589190",
    "end": "590990"
  },
  {
    "text": "collection in the database so in order",
    "start": "590990",
    "end": "593270"
  },
  {
    "text": "to test this function will need to first",
    "start": "593270",
    "end": "594950"
  },
  {
    "text": "seed our database with some mock data",
    "start": "594950",
    "end": "596630"
  },
  {
    "text": "for the user then in that document we'll",
    "start": "596630",
    "end": "599780"
  },
  {
    "text": "have an object that has different roles",
    "start": "599780",
    "end": "601460"
  },
  {
    "text": "that the user can have such as an admin",
    "start": "601460",
    "end": "603440"
  },
  {
    "text": "role so now in our projects collection",
    "start": "603440",
    "end": "605750"
  },
  {
    "text": "we can see if the user has this admin",
    "start": "605750",
    "end": "607550"
  },
  {
    "text": "role and if they do we'll allow access",
    "start": "607550",
    "end": "609440"
  },
  {
    "text": "and then we could also do the inverse of",
    "start": "609440",
    "end": "611510"
  },
  {
    "text": "this and have the actual document itself",
    "start": "611510",
    "end": "613340"
  },
  {
    "text": "defined who has access in that case we",
    "start": "613340",
    "end": "615650"
  },
  {
    "text": "would be building an access control list",
    "start": "615650",
    "end": "617240"
  },
  {
    "text": "and we would check if the resource data",
    "start": "617240",
    "end": "619490"
  },
  {
    "text": "has any members with the current auth",
    "start": "619490",
    "end": "621740"
  },
  {
    "text": "user ID so essentially we have one rule",
    "start": "621740",
    "end": "624590"
  },
  {
    "text": "here that defines logic for role based",
    "start": "624590",
    "end": "626570"
  },
  {
    "text": "access control and also access control",
    "start": "626570",
    "end": "629120"
  },
  {
    "text": "lists the last thing I want to show you",
    "start": "629120",
    "end": "631280"
  },
  {
    "text": "is how to set up the mock data we",
    "start": "631280",
    "end": "633500"
  },
  {
    "text": "defined this earlier in the setup",
    "start": "633500",
    "end": "634850"
  },
  {
    "text": "function and we're going to create an",
    "start": "634850",
    "end": "636410"
  },
  {
    "text": "object where each key in that object is",
    "start": "636410",
    "end": "638600"
  },
  {
    "text": "the path to the document then its value",
    "start": "638600",
    "end": "640850"
  },
  {
    "text": "is the object that we want to write to",
    "start": "640850",
    "end": "642890"
  },
  {
    "text": "the database for example we might have a",
    "start": "642890",
    "end": "645260"
  },
  {
    "text": "user that has an admin role or you might",
    "start": "645260",
    "end": "647660"
  },
  {
    "text": "have a project that has an access",
    "start": "647660",
    "end": "649610"
  },
  {
    "text": "control list with a certain user in it",
    "start": "649610",
    "end": "651800"
  },
  {
    "text": "now when we set up the database we can",
    "start": "651800",
    "end": "654080"
  },
  {
    "text": "add the first argument as the",
    "start": "654080",
    "end": "655580"
  },
  {
    "text": "authenticated user and in the second",
    "start": "655580",
    "end": "657410"
  },
  {
    "text": "argument will be the mock data object",
    "start": "657410",
    "end": "659480"
  },
  {
    "text": "that will automatically see our database",
    "start": "659480",
    "end": "661580"
  },
  {
    "text": "with the required data and then we can",
    "start": "661580",
    "end": "663200"
  },
  {
    "text": "test it in relation to the authenticated",
    "start": "663200",
    "end": "665420"
  },
  {
    "text": "user then the remaining test will look",
    "start": "665420",
    "end": "667550"
  },
  {
    "text": "basically this",
    "start": "667550",
    "end": "668170"
  },
  {
    "text": "they've looked in the past we'll try to",
    "start": "668170",
    "end": "669760"
  },
  {
    "text": "do a read or write operation and then",
    "start": "669760",
    "end": "671829"
  },
  {
    "text": "see if it's denied or allowed so just to",
    "start": "671829",
    "end": "674589"
  },
  {
    "text": "wrap things up writing solid security",
    "start": "674589",
    "end": "676450"
  },
  {
    "text": "rules is essential to securing your",
    "start": "676450",
    "end": "678310"
  },
  {
    "text": "firebase app I am super excited about",
    "start": "678310",
    "end": "680050"
  },
  {
    "text": "the emulator because it makes testing",
    "start": "680050",
    "end": "681519"
  },
  {
    "text": "rules much easier and reliable",
    "start": "681519",
    "end": "683620"
  },
  {
    "text": "especially when you're dealing with a",
    "start": "683620",
    "end": "684820"
  },
  {
    "text": "big complex app I'm gonna go ahead and",
    "start": "684820",
    "end": "686620"
  },
  {
    "text": "wrap the video up there if it helped you",
    "start": "686620",
    "end": "688180"
  },
  {
    "text": "like and subscribe and if you want to",
    "start": "688180",
    "end": "689920"
  },
  {
    "text": "take your development to the next level",
    "start": "689920",
    "end": "691449"
  },
  {
    "text": "consider becoming a pro member at",
    "start": "691449",
    "end": "693070"
  },
  {
    "text": "angular firebase comm you'll get access",
    "start": "693070",
    "end": "695019"
  },
  {
    "text": "to all kinds of exclusive resources",
    "start": "695019",
    "end": "696880"
  },
  {
    "text": "designed to help you build and ship your",
    "start": "696880",
    "end": "698470"
  },
  {
    "text": "app faster thanks for watching and I'll",
    "start": "698470",
    "end": "700870"
  },
  {
    "text": "talk to you soon",
    "start": "700870",
    "end": "703529"
  }
]