[
  {
    "text": "anyone who has ever graduated from",
    "start": "0",
    "end": "1760"
  },
  {
    "text": "kindergarten should know the seven",
    "start": "1760",
    "end": "3360"
  },
  {
    "text": "foundational data structures of computer",
    "start": "3360",
    "end": "5279"
  },
  {
    "text": "science which include arrays link list",
    "start": "5279",
    "end": "8000"
  },
  {
    "text": "hashts stacks cues graphs and trees but",
    "start": "8000",
    "end": "11200"
  },
  {
    "text": "if you didn't graduate from kindergarten",
    "start": "11200",
    "end": "12800"
  },
  {
    "text": "here's a quick crash course a data",
    "start": "12800",
    "end": "14639"
  },
  {
    "text": "structure is just a way to organize data",
    "start": "14639",
    "end": "16720"
  },
  {
    "text": "in a computer so you can do CRUD to it",
    "start": "16720",
    "end": "18720"
  },
  {
    "text": "efficiently create read update and",
    "start": "18720",
    "end": "20800"
  },
  {
    "text": "delete it an array is like a row of",
    "start": "20800",
    "end": "22560"
  },
  {
    "text": "numbered cubbies a linked list is like a",
    "start": "22560",
    "end": "24720"
  },
  {
    "text": "treasure map of clues a hash table is",
    "start": "24720",
    "end": "26800"
  },
  {
    "text": "like a locker with your name on it a",
    "start": "26800",
    "end": "28560"
  },
  {
    "text": "stack is like a stack of books a Q is",
    "start": "28560",
    "end": "30880"
  },
  {
    "text": "like a line of kids at the cafeteria a",
    "start": "30880",
    "end": "32880"
  },
  {
    "text": "graph is a spiderweb and a tree is well",
    "start": "32880",
    "end": "35280"
  },
  {
    "text": "like a tree the programming is all about",
    "start": "35280",
    "end": "37440"
  },
  {
    "text": "solving problems i've got 99 problems",
    "start": "37440",
    "end": "39840"
  },
  {
    "text": "but a data structure ain't one but for",
    "start": "39840",
    "end": "41680"
  },
  {
    "text": "some programmers data structures do",
    "start": "41680",
    "end": "43440"
  },
  {
    "text": "become a problem and in today's video",
    "start": "43440",
    "end": "45200"
  },
  {
    "text": "we'll look at a few unusual situations",
    "start": "45200",
    "end": "47280"
  },
  {
    "text": "where these simple data structures were",
    "start": "47280",
    "end": "48879"
  },
  {
    "text": "not good enough or smart enough to get",
    "start": "48879",
    "end": "50480"
  },
  {
    "text": "the job done let's start by talking",
    "start": "50480",
    "end": "52160"
  },
  {
    "text": "about the B tree not to be confused with",
    "start": "52160",
    "end": "54399"
  },
  {
    "text": "a binary tree one of the most",
    "start": "54399",
    "end": "56079"
  },
  {
    "text": "exhilarating things that ever happened",
    "start": "56079",
    "end": "57440"
  },
  {
    "text": "in my life was the first time I",
    "start": "57440",
    "end": "58960"
  },
  {
    "text": "implemented a binary search tree which",
    "start": "58960",
    "end": "61039"
  },
  {
    "text": "prevented my algorithm's time complexity",
    "start": "61039",
    "end": "62960"
  },
  {
    "text": "from going burr turning O of N squared",
    "start": "62960",
    "end": "65198"
  },
  {
    "text": "into a much faster O of login but binary",
    "start": "65199",
    "end": "68000"
  },
  {
    "text": "search trees have one problem each node",
    "start": "68000",
    "end": "70000"
  },
  {
    "text": "in the tree can only have two children",
    "start": "70000",
    "end": "71920"
  },
  {
    "text": "which means the depth of the tree grows",
    "start": "71920",
    "end": "73520"
  },
  {
    "text": "rapidly and doesn't scale very well for",
    "start": "73520",
    "end": "75680"
  },
  {
    "text": "things like modern hard drives with",
    "start": "75680",
    "end": "77600"
  },
  {
    "text": "massive amounts of data to search",
    "start": "77600",
    "end": "79040"
  },
  {
    "text": "through to address this problem a long",
    "start": "79040",
    "end": "81119"
  },
  {
    "text": "time ago programmers at Boeing developed",
    "start": "81119",
    "end": "83360"
  },
  {
    "text": "the self-balancing tree or B tree",
    "start": "83360",
    "end": "85680"
  },
  {
    "text": "although nowadays you'll mostly find B+",
    "start": "85680",
    "end": "87600"
  },
  {
    "text": "trees in file systems and databases at a",
    "start": "87600",
    "end": "90159"
  },
  {
    "text": "high level what makes them special is",
    "start": "90159",
    "end": "91840"
  },
  {
    "text": "that each node can have multiple",
    "start": "91840",
    "end": "93360"
  },
  {
    "text": "children of sorted keys these are called",
    "start": "93360",
    "end": "95680"
  },
  {
    "text": "internal nodes and they work like",
    "start": "95680",
    "end": "97119"
  },
  {
    "text": "signposts that point to leaf nodes that",
    "start": "97119",
    "end": "99200"
  },
  {
    "text": "hold the actual data or pointers to data",
    "start": "99200",
    "end": "101840"
  },
  {
    "text": "so it works kind of like a binary tree",
    "start": "101840",
    "end": "103759"
  },
  {
    "text": "but greatly reduces the dis IO",
    "start": "103759",
    "end": "105680"
  },
  {
    "text": "operations by cutting down the height of",
    "start": "105680",
    "end": "107439"
  },
  {
    "text": "the tree pretty cool but there are many",
    "start": "107439",
    "end": "109360"
  },
  {
    "text": "other types of trees in nature and in",
    "start": "109360",
    "end": "111360"
  },
  {
    "text": "computers like the radex tree like there",
    "start": "111360",
    "end": "113840"
  },
  {
    "text": "are billions of IP addresses in the",
    "start": "113840",
    "end": "115520"
  },
  {
    "text": "world but have you ever wondered how",
    "start": "115520",
    "end": "117200"
  },
  {
    "text": "computers route between them so",
    "start": "117200",
    "end": "118640"
  },
  {
    "text": "efficiently to make the internet work a",
    "start": "118640",
    "end": "120479"
  },
  {
    "text": "radix tree is special because nodes with",
    "start": "120479",
    "end": "122560"
  },
  {
    "text": "only one child are merged with their",
    "start": "122560",
    "end": "124399"
  },
  {
    "text": "parent and that makes them highly",
    "start": "124399",
    "end": "125840"
  },
  {
    "text": "efficient when finding values with a",
    "start": "125840",
    "end": "127600"
  },
  {
    "text": "shared prefix like an IP address for",
    "start": "127600",
    "end": "130000"
  },
  {
    "text": "example if I made a tree to find words",
    "start": "130000",
    "end": "132000"
  },
  {
    "text": "that start with C our tree might look",
    "start": "132000",
    "end": "133920"
  },
  {
    "text": "like this but in a radics tree we can",
    "start": "133920",
    "end": "136160"
  },
  {
    "text": "reduce the depth by merging the last",
    "start": "136160",
    "end": "137920"
  },
  {
    "text": "child that's ideal when you have many",
    "start": "137920",
    "end": "139840"
  },
  {
    "text": "shared prefixes but doesn't work so well",
    "start": "139840",
    "end": "142000"
  },
  {
    "text": "with big complex strings like all the",
    "start": "142000",
    "end": "144080"
  },
  {
    "text": "vibecoded slop you're trying to debug in",
    "start": "144080",
    "end": "145920"
  },
  {
    "text": "your IDE right now a rope is yet another",
    "start": "145920",
    "end": "148319"
  },
  {
    "text": "type of tree that breaks down strings",
    "start": "148319",
    "end": "150000"
  },
  {
    "text": "into manageable chunks instead of one",
    "start": "150000",
    "end": "152160"
  },
  {
    "text": "continuous strand you cut it into many",
    "start": "152160",
    "end": "154400"
  },
  {
    "text": "smaller manageable segments then you tie",
    "start": "154400",
    "end": "156800"
  },
  {
    "text": "these segments together using smaller",
    "start": "156800",
    "end": "158480"
  },
  {
    "text": "knots that also tell you how long each",
    "start": "158480",
    "end": "160480"
  },
  {
    "text": "segment they represent is this allows",
    "start": "160480",
    "end": "162640"
  },
  {
    "text": "tools like text editors to more",
    "start": "162640",
    "end": "164080"
  },
  {
    "text": "efficiently modify large documents but",
    "start": "164080",
    "end": "166239"
  },
  {
    "text": "in some cases figuring out what not to",
    "start": "166239",
    "end": "168239"
  },
  {
    "text": "search is more important and that's",
    "start": "168239",
    "end": "169920"
  },
  {
    "text": "where Bloom filters come in it's a",
    "start": "169920",
    "end": "171920"
  },
  {
    "text": "probabilistic data structure that can",
    "start": "171920",
    "end": "173760"
  },
  {
    "text": "tell you if an item is definitely not in",
    "start": "173760",
    "end": "175920"
  },
  {
    "text": "a set or maybe is in a set it works by",
    "start": "175920",
    "end": "178720"
  },
  {
    "text": "using multiple hash functions to set and",
    "start": "178720",
    "end": "181120"
  },
  {
    "text": "check bits in a fixed-sized array",
    "start": "181120",
    "end": "183200"
  },
  {
    "text": "allowing fast membership tests with",
    "start": "183200",
    "end": "185120"
  },
  {
    "text": "possible false positives but no false",
    "start": "185120",
    "end": "187280"
  },
  {
    "text": "negatives it's like a bouncer at a club",
    "start": "187280",
    "end": "189360"
  },
  {
    "text": "who always knows exactly who to kick out",
    "start": "189360",
    "end": "191440"
  },
  {
    "text": "one of the weirdest things in nature",
    "start": "191440",
    "end": "192800"
  },
  {
    "text": "though is the cuckoo bird a bird that",
    "start": "192800",
    "end": "194800"
  },
  {
    "text": "sneaks into another bird's nest and",
    "start": "194800",
    "end": "196560"
  },
  {
    "text": "replaces its eggs with its own tricking",
    "start": "196560",
    "end": "198640"
  },
  {
    "text": "the host to incubate and care for the",
    "start": "198640",
    "end": "200400"
  },
  {
    "text": "cuckoo chick this behavior not only",
    "start": "200400",
    "end": "202319"
  },
  {
    "text": "inspired the term cuckled but also",
    "start": "202319",
    "end": "204319"
  },
  {
    "text": "cuckoo hashing and programming according",
    "start": "204319",
    "end": "206319"
  },
  {
    "text": "to my wife's boyfriend it's a collision",
    "start": "206319",
    "end": "208239"
  },
  {
    "text": "resolution technique where each key in a",
    "start": "208239",
    "end": "210159"
  },
  {
    "text": "hash table has two or more possible",
    "start": "210159",
    "end": "212080"
  },
  {
    "text": "positions and if one spot is taken the",
    "start": "212080",
    "end": "214480"
  },
  {
    "text": "existing key is kicked out like a cuckoo",
    "start": "214480",
    "end": "216720"
  },
  {
    "text": "and reinserted in an alternate location",
    "start": "216720",
    "end": "218959"
  },
  {
    "text": "the end result is constant time worst",
    "start": "218959",
    "end": "221040"
  },
  {
    "text": "case complexity for lookups which is as",
    "start": "221040",
    "end": "223120"
  },
  {
    "text": "fast as you can possibly go when it",
    "start": "223120",
    "end": "224560"
  },
  {
    "text": "comes to algorithms but if you want to",
    "start": "224560",
    "end": "226239"
  },
  {
    "text": "optimize your own code with these weird",
    "start": "226239",
    "end": "228000"
  },
  {
    "text": "data structures you need to know about",
    "start": "228000",
    "end": "229599"
  },
  {
    "text": "Code Rabbit the sponsor of today's video",
    "start": "229599",
    "end": "232239"
  },
  {
    "text": "they just released a new VS Code",
    "start": "232239",
    "end": "234000"
  },
  {
    "text": "extension that gives you advanced code",
    "start": "234000",
    "end": "235840"
  },
  {
    "text": "reviews right in your editor so you can",
    "start": "235840",
    "end": "237680"
  },
  {
    "text": "catch the majority of bugs before you",
    "start": "237680",
    "end": "239360"
  },
  {
    "text": "even submit a pull request unlike other",
    "start": "239360",
    "end": "241519"
  },
  {
    "text": "tools the extension understands the",
    "start": "241519",
    "end": "243360"
  },
  {
    "text": "context of your entire codebase allowing",
    "start": "243360",
    "end": "245360"
  },
  {
    "text": "it to catch more bugs like all the AI",
    "start": "245360",
    "end": "247599"
  },
  {
    "text": "slop your favorite codegen tool left",
    "start": "247599",
    "end": "249439"
  },
  {
    "text": "behind it gives you lineby-line comments",
    "start": "249439",
    "end": "251599"
  },
  {
    "text": "on all issues so you can see it",
    "start": "251599",
    "end": "253360"
  },
  {
    "text": "reasoning then it offers simple",
    "start": "253360",
    "end": "255120"
  },
  {
    "text": "one-click fixes to help you clean things",
    "start": "255120",
    "end": "256959"
  },
  {
    "text": "up quickly the Code Rabbit is free to",
    "start": "256959",
    "end": "258720"
  },
  {
    "text": "use in the IDE and works seamlessly with",
    "start": "258720",
    "end": "260959"
  },
  {
    "text": "VS Code as well as forks like Cursor and",
    "start": "260959",
    "end": "263199"
  },
  {
    "text": "Windsurf download the extension using",
    "start": "263199",
    "end": "265120"
  },
  {
    "text": "the link below to try it out thanks for",
    "start": "265120",
    "end": "267040"
  },
  {
    "text": "watching and I will see you in the next",
    "start": "267040",
    "end": "270639"
  }
]