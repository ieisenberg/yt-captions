[
  {
    "text": "it is May 4th 2023 and you are watching",
    "start": "0",
    "end": "3120"
  },
  {
    "text": "the code report python is a wonderful",
    "start": "3120",
    "end": "5100"
  },
  {
    "text": "language for productive programming but",
    "start": "5100",
    "end": "7020"
  },
  {
    "text": "it has one big problem it's too slow and",
    "start": "7020",
    "end": "9599"
  },
  {
    "text": "going slow means you'll get made fun of",
    "start": "9599",
    "end": "11099"
  },
  {
    "text": "by the rust and C plus Chads of the",
    "start": "11099",
    "end": "13139"
  },
  {
    "text": "world but the tables are about to turn",
    "start": "13139",
    "end": "14580"
  },
  {
    "text": "thanks to a brand new programming",
    "start": "14580",
    "end": "16198"
  },
  {
    "text": "language called Mojo a superset of",
    "start": "16199",
    "end": "18240"
  },
  {
    "text": "python that's not just two times faster",
    "start": "18240",
    "end": "20100"
  },
  {
    "text": "not ten times faster but up to 35 000",
    "start": "20100",
    "end": "23220"
  },
  {
    "text": "times faster than your grandpa's Python",
    "start": "23220",
    "end": "25260"
  },
  {
    "text": "and that's a huge deal because Python's",
    "start": "25260",
    "end": "27119"
  },
  {
    "text": "the dominant language for artificial",
    "start": "27119",
    "end": "28740"
  },
  {
    "text": "intelligence but behind the curtain",
    "start": "28740",
    "end": "30420"
  },
  {
    "text": "anything that needs to go fast is",
    "start": "30420",
    "end": "31859"
  },
  {
    "text": "written in C or C plus plus in today's",
    "start": "31859",
    "end": "33780"
  },
  {
    "text": "video we'll take Mojo for a spin but",
    "start": "33780",
    "end": "35940"
  },
  {
    "text": "first here are five things that you need",
    "start": "35940",
    "end": "37500"
  },
  {
    "text": "to know about it one this is not some",
    "start": "37500",
    "end": "39540"
  },
  {
    "text": "random guy's side project on GitHub but",
    "start": "39540",
    "end": "41640"
  },
  {
    "text": "rather it comes from a company founded",
    "start": "41640",
    "end": "43079"
  },
  {
    "text": "by Chris lattner the guy who created the",
    "start": "43079",
    "end": "44940"
  },
  {
    "text": "Swift programming language and the llvm",
    "start": "44940",
    "end": "46980"
  },
  {
    "text": "compiler tool chain if anybody could fix",
    "start": "46980",
    "end": "48840"
  },
  {
    "text": "Python's problems it's him and if you",
    "start": "48840",
    "end": "50700"
  },
  {
    "text": "have no idea what llvm is check out this",
    "start": "50700",
    "end": "52739"
  },
  {
    "text": "video two it's a language designed for",
    "start": "52739",
    "end": "54660"
  },
  {
    "text": "programming on AI Hardware like gpus",
    "start": "54660",
    "end": "56940"
  },
  {
    "text": "running Cuda and other accelerators it",
    "start": "56940",
    "end": "59160"
  },
  {
    "text": "achieves this by Leverage multi-level",
    "start": "59160",
    "end": "61020"
  },
  {
    "text": "intermediate representation to scale to",
    "start": "61020",
    "end": "63000"
  },
  {
    "text": "Exotic Hardware types without a ton of",
    "start": "63000",
    "end": "64978"
  },
  {
    "text": "complexity and it even has built-in Auto",
    "start": "64979",
    "end": "66840"
  },
  {
    "text": "tuning to optimize your code for your",
    "start": "66840",
    "end": "68760"
  },
  {
    "text": "Target Hardware three it's designed as a",
    "start": "68760",
    "end": "70979"
  },
  {
    "text": "super set of python in the same way",
    "start": "70979",
    "end": "72479"
  },
  {
    "text": "typescript is a superset of JavaScript",
    "start": "72479",
    "end": "74280"
  },
  {
    "text": "so you don't need to learn another",
    "start": "74280",
    "end": "75360"
  },
  {
    "text": "language to take advantage of it and",
    "start": "75360",
    "end": "77100"
  },
  {
    "text": "this is unique compared to other modern",
    "start": "77100",
    "end": "78780"
  },
  {
    "text": "systems languages like rust Zig Nim and",
    "start": "78780",
    "end": "81720"
  },
  {
    "text": "so on which would have a higher learning",
    "start": "81720",
    "end": "83220"
  },
  {
    "text": "curve for existing python programmers it",
    "start": "83220",
    "end": "85320"
  },
  {
    "text": "does have a bunch of features on top of",
    "start": "85320",
    "end": "86820"
  },
  {
    "text": "python like VAR and Lut declarations and",
    "start": "86820",
    "end": "89040"
  },
  {
    "text": "structs but the base language is fully",
    "start": "89040",
    "end": "91020"
  },
  {
    "text": "compatible with python and it can also",
    "start": "91020",
    "end": "92759"
  },
  {
    "text": "interop with the python ecosystem which",
    "start": "92759",
    "end": "94740"
  },
  {
    "text": "means you can still use your favorite",
    "start": "94740",
    "end": "95820"
  },
  {
    "text": "libraries like numpy pandas Etc or it",
    "start": "95820",
    "end": "99180"
  },
  {
    "text": "adds strong type checking to the",
    "start": "99180",
    "end": "100500"
  },
  {
    "text": "language you can still use Dynamic types",
    "start": "100500",
    "end": "102479"
  },
  {
    "text": "if you prefer but static types are",
    "start": "102479",
    "end": "104159"
  },
  {
    "text": "essential for optimized performance and",
    "start": "104159",
    "end": "105960"
  },
  {
    "text": "error checking for memory management it",
    "start": "105960",
    "end": "108000"
  },
  {
    "text": "has an ownership system and borrow",
    "start": "108000",
    "end": "109619"
  },
  {
    "text": "Checkers similar to rust and also",
    "start": "109619",
    "end": "111780"
  },
  {
    "text": "supports manual memory management with",
    "start": "111780",
    "end": "113340"
  },
  {
    "text": "pointers like C plus plus it's a",
    "start": "113340",
    "end": "115259"
  },
  {
    "text": "pragmatic language that gives you safety",
    "start": "115259",
    "end": "116939"
  },
  {
    "text": "but also the flexibility to be unsafe",
    "start": "116939",
    "end": "118920"
  },
  {
    "text": "when needed now the final thing to know",
    "start": "118920",
    "end": "120780"
  },
  {
    "text": "is that currently it's not available to",
    "start": "120780",
    "end": "122399"
  },
  {
    "text": "the public it's still in very early",
    "start": "122399",
    "end": "123840"
  },
  {
    "text": "development it will be open sourced in",
    "start": "123840",
    "end": "125700"
  },
  {
    "text": "the future but currently there is a wait",
    "start": "125700",
    "end": "127200"
  },
  {
    "text": "list to try it out I was lucky enough to",
    "start": "127200",
    "end": "128940"
  },
  {
    "text": "get Early Access so let's fire it up to",
    "start": "128940",
    "end": "131039"
  },
  {
    "text": "run it you can create a file ending in",
    "start": "131039",
    "end": "132420"
  },
  {
    "text": "dot Mojo or dot fire Emoji that's a huge",
    "start": "132420",
    "end": "135180"
  },
  {
    "text": "advantage over python which doesn't",
    "start": "135180",
    "end": "136560"
  },
  {
    "text": "allow you to name your files in dot",
    "start": "136560",
    "end": "138120"
  },
  {
    "text": "snake but we can also run the code in a",
    "start": "138120",
    "end": "139980"
  },
  {
    "text": "Jupiter notebook where it behaves like",
    "start": "139980",
    "end": "141540"
  },
  {
    "text": "an interpreted language here we have a",
    "start": "141540",
    "end": "143280"
  },
  {
    "text": "matrix multiplication demo that computes",
    "start": "143280",
    "end": "145200"
  },
  {
    "text": "a DOT product to demonstrate the crazy",
    "start": "145200",
    "end": "146879"
  },
  {
    "text": "performance gains we get with Mojo first",
    "start": "146879",
    "end": "148860"
  },
  {
    "text": "it benchmarks a basic function in Python",
    "start": "148860",
    "end": "150959"
  },
  {
    "text": "then by simply importing that code into",
    "start": "150959",
    "end": "153000"
  },
  {
    "text": "Mojo it's executed 14 times faster with",
    "start": "153000",
    "end": "155760"
  },
  {
    "text": "no modifications to the code but we're",
    "start": "155760",
    "end": "157920"
  },
  {
    "text": "only just getting started we can further",
    "start": "157920",
    "end": "159720"
  },
  {
    "text": "optimize this code by adding types to",
    "start": "159720",
    "end": "161640"
  },
  {
    "text": "the python implementation Mojo allows us",
    "start": "161640",
    "end": "163800"
  },
  {
    "text": "to do that with its built-in struct",
    "start": "163800",
    "end": "165599"
  },
  {
    "text": "keyword a struct is very similar to a",
    "start": "165599",
    "end": "167640"
  },
  {
    "text": "python class but structs are static",
    "start": "167640",
    "end": "169739"
  },
  {
    "text": "unlike classes which are Dynamic inside",
    "start": "169739",
    "end": "171660"
  },
  {
    "text": "this truck we ALS have keywords like VAR",
    "start": "171660",
    "end": "173819"
  },
  {
    "text": "and let which can Define mutable and",
    "start": "173819",
    "end": "175860"
  },
  {
    "text": "immutable variables and Def is replaced",
    "start": "175860",
    "end": "178319"
  },
  {
    "text": "with FN which is a stricter type type of",
    "start": "178319",
    "end": "180300"
  },
  {
    "text": "function also notice single instruction",
    "start": "180300",
    "end": "181800"
  },
  {
    "text": "multiple data which is a built-in type",
    "start": "181800",
    "end": "183780"
  },
  {
    "text": "that represents a vector where a single",
    "start": "183780",
    "end": "185700"
  },
  {
    "text": "instruction can be executed across",
    "start": "185700",
    "end": "187319"
  },
  {
    "text": "multiple elements in parallel on the",
    "start": "187319",
    "end": "189180"
  },
  {
    "text": "underlying Hardware once we have this",
    "start": "189180",
    "end": "190739"
  },
  {
    "text": "struct we can then use it as a type in",
    "start": "190739",
    "end": "192720"
  },
  {
    "text": "the python implementation then when we",
    "start": "192720",
    "end": "194340"
  },
  {
    "text": "Benchmark the code again we get a",
    "start": "194340",
    "end": "195959"
  },
  {
    "text": "ridiculous 500x performance boost but",
    "start": "195959",
    "end": "198360"
  },
  {
    "text": "we're still not happy yet in the Inner",
    "start": "198360",
    "end": "200220"
  },
  {
    "text": "Loop we can query the vector width",
    "start": "200220",
    "end": "201780"
  },
  {
    "text": "instead of hard coding it and that gives",
    "start": "201780",
    "end": "203459"
  },
  {
    "text": "us a thousand X gain but that's nothing",
    "start": "203459",
    "end": "205319"
  },
  {
    "text": "compared to what we're about to do",
    "start": "205319",
    "end": "206640"
  },
  {
    "text": "linear algebra is perfect for parallel",
    "start": "206640",
    "end": "209099"
  },
  {
    "text": "Computing and we can easily make our",
    "start": "209099",
    "end": "210659"
  },
  {
    "text": "code multi-threaded with the built-in",
    "start": "210659",
    "end": "212340"
  },
  {
    "text": "parallelized function increasing our",
    "start": "212340",
    "end": "214140"
  },
  {
    "text": "speed buff to 2000x but now I've got a",
    "start": "214140",
    "end": "216599"
  },
  {
    "text": "fever and the only prescription is more",
    "start": "216599",
    "end": "218400"
  },
  {
    "text": "performance luckily Mojo has built-in",
    "start": "218400",
    "end": "220560"
  },
  {
    "text": "tiling utilities that basically allow us",
    "start": "220560",
    "end": "222780"
  },
  {
    "text": "to cache and reuse data more efficiently",
    "start": "222780",
    "end": "224760"
  },
  {
    "text": "and we can even auto-tune it to find the",
    "start": "224760",
    "end": "226980"
  },
  {
    "text": "optimal parameters for our Hardware the",
    "start": "226980",
    "end": "229019"
  },
  {
    "text": "end result is over four thousand times",
    "start": "229019",
    "end": "230760"
  },
  {
    "text": "faster execution compared to the",
    "start": "230760",
    "end": "232620"
  },
  {
    "text": "original python code that's pretty crazy",
    "start": "232620",
    "end": "234420"
  },
  {
    "text": "and if you want to see this code broken",
    "start": "234420",
    "end": "235860"
  },
  {
    "text": "down in Greater detail I'd highly",
    "start": "235860",
    "end": "237480"
  },
  {
    "text": "recommend this video from Jeremy Howard",
    "start": "237480",
    "end": "239220"
  },
  {
    "text": "but I'm curious is what you guys think",
    "start": "239220",
    "end": "240720"
  },
  {
    "text": "do you really think Mojo could kill",
    "start": "240720",
    "end": "242159"
  },
  {
    "text": "Python and C plus at the same time I'm a",
    "start": "242159",
    "end": "244500"
  },
  {
    "text": "bit skeptical but employers are already",
    "start": "244500",
    "end": "246120"
  },
  {
    "text": "hiring Mojo developers with 10 years of",
    "start": "246120",
    "end": "248159"
  },
  {
    "text": "experience this has been the code report",
    "start": "248159",
    "end": "249659"
  },
  {
    "text": "thanks for watching and I will see you",
    "start": "249659",
    "end": "251519"
  },
  {
    "text": "in the next one",
    "start": "251519",
    "end": "253000"
  },
  {
    "text": "[Music]",
    "start": "253000",
    "end": "255530"
  }
]