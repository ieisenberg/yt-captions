[
  {
    "text": "[Music]",
    "start": "0",
    "end": "480"
  },
  {
    "text": "next js create fast search engine",
    "start": "480",
    "end": "2960"
  },
  {
    "text": "optimize react apps with zero",
    "start": "2960",
    "end": "4640"
  },
  {
    "text": "configuration",
    "start": "4640",
    "end": "5600"
  },
  {
    "text": "a traditional react app is rendered",
    "start": "5600",
    "end": "7440"
  },
  {
    "text": "client side where the browser starts",
    "start": "7440",
    "end": "9120"
  },
  {
    "text": "with a shell of an html page",
    "start": "9120",
    "end": "11040"
  },
  {
    "text": "lacking any rendered content from there",
    "start": "11040",
    "end": "13040"
  },
  {
    "text": "the browser fetches the javascript file",
    "start": "13040",
    "end": "14719"
  },
  {
    "text": "containing the react code to render",
    "start": "14719",
    "end": "16560"
  },
  {
    "text": "content to the page",
    "start": "16560",
    "end": "17600"
  },
  {
    "text": "and make it interactive but there are",
    "start": "17600",
    "end": "19439"
  },
  {
    "text": "two major drawbacks with client-side",
    "start": "19439",
    "end": "21199"
  },
  {
    "text": "rendering",
    "start": "21199",
    "end": "22000"
  },
  {
    "text": "one the content is not reliably indexed",
    "start": "22000",
    "end": "24160"
  },
  {
    "text": "by all search engines",
    "start": "24160",
    "end": "25279"
  },
  {
    "text": "or read by social media link bots and",
    "start": "25279",
    "end": "27439"
  },
  {
    "text": "two it can take longer to reach the",
    "start": "27439",
    "end": "29279"
  },
  {
    "text": "first contentful paint when a user first",
    "start": "29279",
    "end": "31359"
  },
  {
    "text": "lands on the web page",
    "start": "31359",
    "end": "32719"
  },
  {
    "text": "next is a framework that allows you to",
    "start": "32719",
    "end": "34480"
  },
  {
    "text": "build a react app but render the content",
    "start": "34480",
    "end": "36800"
  },
  {
    "text": "in advance on the server",
    "start": "36800",
    "end": "38079"
  },
  {
    "text": "so the first thing a user or search bot",
    "start": "38079",
    "end": "40239"
  },
  {
    "text": "sees is the fully rendered html",
    "start": "40239",
    "end": "42480"
  },
  {
    "text": "after receiving this initial page",
    "start": "42480",
    "end": "44079"
  },
  {
    "text": "client-side rendering takes over",
    "start": "44079",
    "end": "45680"
  },
  {
    "text": "and it works just like a traditional",
    "start": "45680",
    "end": "47280"
  },
  {
    "text": "react app it's the best of both worlds",
    "start": "47280",
    "end": "49440"
  },
  {
    "text": "fully rendered content for bots highly",
    "start": "49440",
    "end": "51440"
  },
  {
    "text": "interactive content for users",
    "start": "51440",
    "end": "53120"
  },
  {
    "text": "inside of a next project you have a",
    "start": "53120",
    "end": "54800"
  },
  {
    "text": "pages directory each javascript file",
    "start": "54800",
    "end": "56800"
  },
  {
    "text": "defined here",
    "start": "56800",
    "end": "57520"
  },
  {
    "text": "exports a react component that",
    "start": "57520",
    "end": "59359"
  },
  {
    "text": "represents a route in the application",
    "start": "59359",
    "end": "61520"
  },
  {
    "text": "in other words the file structure here",
    "start": "61520",
    "end": "63680"
  },
  {
    "text": "mirrors the actual urls that the user",
    "start": "63680",
    "end": "65600"
  },
  {
    "text": "will navigate to",
    "start": "65600",
    "end": "66560"
  },
  {
    "text": "and next provides its own router to make",
    "start": "66560",
    "end": "68320"
  },
  {
    "text": "navigation seamless",
    "start": "68320",
    "end": "69680"
  },
  {
    "text": "but the real magic comes into play when",
    "start": "69680",
    "end": "71360"
  },
  {
    "text": "we talk about data fetching",
    "start": "71360",
    "end": "72880"
  },
  {
    "text": "because next can perform multiple server",
    "start": "72880",
    "end": "74799"
  },
  {
    "text": "rendering strategies from a single",
    "start": "74799",
    "end": "76560"
  },
  {
    "text": "project",
    "start": "76560",
    "end": "77280"
  },
  {
    "text": "static generation or pre-rendering",
    "start": "77280",
    "end": "79520"
  },
  {
    "text": "allows you to render your pages",
    "start": "79520",
    "end": "81280"
  },
  {
    "text": "at build time each page or component can",
    "start": "81280",
    "end": "83680"
  },
  {
    "text": "implement a function called",
    "start": "83680",
    "end": "85119"
  },
  {
    "text": "get static props it might fetch data",
    "start": "85119",
    "end": "87119"
  },
  {
    "text": "from a cloud database then pass the data",
    "start": "87119",
    "end": "89040"
  },
  {
    "text": "as props to the component",
    "start": "89040",
    "end": "90560"
  },
  {
    "text": "you can then build your app to render",
    "start": "90560",
    "end": "92159"
  },
  {
    "text": "out all the html locally",
    "start": "92159",
    "end": "93759"
  },
  {
    "text": "and upload it to a storage bucket where",
    "start": "93759",
    "end": "95600"
  },
  {
    "text": "it can be easily cached by a cdn",
    "start": "95600",
    "end": "97840"
  },
  {
    "text": "that works great for a blog or any kind",
    "start": "97840",
    "end": "99680"
  },
  {
    "text": "of app where the data doesn't change",
    "start": "99680",
    "end": "101200"
  },
  {
    "text": "often",
    "start": "101200",
    "end": "101680"
  },
  {
    "text": "but if the data does change often you",
    "start": "101680",
    "end": "103439"
  },
  {
    "text": "can implement server side rendering",
    "start": "103439",
    "end": "105280"
  },
  {
    "text": "which builds the html page",
    "start": "105280",
    "end": "106960"
  },
  {
    "text": "each time it's requested by the user in",
    "start": "106960",
    "end": "109200"
  },
  {
    "text": "the component we implement data fetching",
    "start": "109200",
    "end": "111200"
  },
  {
    "text": "with the get server side props function",
    "start": "111200",
    "end": "113360"
  },
  {
    "text": "instead of running at build time this",
    "start": "113360",
    "end": "115040"
  },
  {
    "text": "function runs at request time",
    "start": "115040",
    "end": "116880"
  },
  {
    "text": "that means the page will fetch the",
    "start": "116880",
    "end": "118240"
  },
  {
    "text": "latest data on the server each time a",
    "start": "118240",
    "end": "120320"
  },
  {
    "text": "new request comes in",
    "start": "120320",
    "end": "121600"
  },
  {
    "text": "that's great for pages with rapidly",
    "start": "121600",
    "end": "123200"
  },
  {
    "text": "changing data but maybe you want",
    "start": "123200",
    "end": "125040"
  },
  {
    "text": "something in between yet another option",
    "start": "125040",
    "end": "127200"
  },
  {
    "text": "is incremental static regeneration by",
    "start": "127200",
    "end": "129759"
  },
  {
    "text": "simply adding a revalidate option to get",
    "start": "129759",
    "end": "132239"
  },
  {
    "text": "static props",
    "start": "132239",
    "end": "133280"
  },
  {
    "text": "next can regenerate a page whenever a",
    "start": "133280",
    "end": "135200"
  },
  {
    "text": "new request comes in",
    "start": "135200",
    "end": "136400"
  },
  {
    "text": "within a certain time interval this has",
    "start": "136400",
    "end": "138400"
  },
  {
    "text": "been next js in 100 seconds",
    "start": "138400",
    "end": "140560"
  },
  {
    "text": "if you want to see more short videos",
    "start": "140560",
    "end": "141840"
  },
  {
    "text": "like this make sure to subscribe and hit",
    "start": "141840",
    "end": "143920"
  },
  {
    "text": "the like button",
    "start": "143920",
    "end": "144800"
  },
  {
    "text": "then open up the s code and get ready to",
    "start": "144800",
    "end": "146800"
  },
  {
    "text": "go beyond 100 seconds with a full",
    "start": "146800",
    "end": "148640"
  },
  {
    "text": "breakdown of next",
    "start": "148640",
    "end": "149760"
  },
  {
    "text": "before we get going i'd like to point",
    "start": "149760",
    "end": "151360"
  },
  {
    "text": "out that i'm working on a full react",
    "start": "151360",
    "end": "153200"
  },
  {
    "text": "next firebase course which i hope to",
    "start": "153200",
    "end": "155360"
  },
  {
    "text": "have finally finished by the end of",
    "start": "155360",
    "end": "156959"
  },
  {
    "text": "january",
    "start": "156959",
    "end": "157599"
  },
  {
    "text": "which will be available to fireship pro",
    "start": "157599",
    "end": "159440"
  },
  {
    "text": "members my goal over the next few",
    "start": "159440",
    "end": "161200"
  },
  {
    "text": "minutes",
    "start": "161200",
    "end": "161680"
  },
  {
    "text": "is to teach you the fundamentals of next",
    "start": "161680",
    "end": "163840"
  },
  {
    "text": "while also explaining the complexities",
    "start": "163840",
    "end": "165840"
  },
  {
    "text": "of server-side rendering",
    "start": "165840",
    "end": "167120"
  },
  {
    "text": "to follow along open up the terminal and",
    "start": "167120",
    "end": "169440"
  },
  {
    "text": "run npx",
    "start": "169440",
    "end": "170560"
  },
  {
    "text": "create next app followed by the name of",
    "start": "170560",
    "end": "172640"
  },
  {
    "text": "your app and if you get lost at any",
    "start": "172640",
    "end": "174319"
  },
  {
    "text": "point",
    "start": "174319",
    "end": "174720"
  },
  {
    "text": "make sure to grab the source code on",
    "start": "174720",
    "end": "176480"
  },
  {
    "text": "github or fireship io",
    "start": "176480",
    "end": "178319"
  },
  {
    "text": "let's open up the project in vs code and",
    "start": "178319",
    "end": "180560"
  },
  {
    "text": "then go into the package.json file",
    "start": "180560",
    "end": "182879"
  },
  {
    "text": "in development the only script we need",
    "start": "182879",
    "end": "184720"
  },
  {
    "text": "to worry about is dev",
    "start": "184720",
    "end": "186239"
  },
  {
    "text": "which you can execute by running npm run",
    "start": "186239",
    "end": "188959"
  },
  {
    "text": "dev",
    "start": "188959",
    "end": "189360"
  },
  {
    "text": "from the command line which will run our",
    "start": "189360",
    "end": "191120"
  },
  {
    "text": "app on localhost 3000",
    "start": "191120",
    "end": "193040"
  },
  {
    "text": "that should give you the default",
    "start": "193040",
    "end": "194159"
  },
  {
    "text": "boilerplate in the browser now before we",
    "start": "194159",
    "end": "196159"
  },
  {
    "text": "get into the react code",
    "start": "196159",
    "end": "197280"
  },
  {
    "text": "there's a few things that i want to",
    "start": "197280",
    "end": "198560"
  },
  {
    "text": "point out first in the styles directory",
    "start": "198560",
    "end": "200720"
  },
  {
    "text": "here you'll notice how next supports css",
    "start": "200720",
    "end": "203200"
  },
  {
    "text": "modules",
    "start": "203200",
    "end": "204080"
  },
  {
    "text": "in the globals file you can define",
    "start": "204080",
    "end": "205760"
  },
  {
    "text": "styles that apply to the entire",
    "start": "205760",
    "end": "207280"
  },
  {
    "text": "application",
    "start": "207280",
    "end": "208239"
  },
  {
    "text": "but in other files with dot module you",
    "start": "208239",
    "end": "210560"
  },
  {
    "text": "can define classes that only apply to a",
    "start": "210560",
    "end": "212879"
  },
  {
    "text": "specific route or component",
    "start": "212879",
    "end": "214879"
  },
  {
    "text": "and you don't have to worry about coming",
    "start": "214879",
    "end": "216239"
  },
  {
    "text": "up with a bunch of unique class names or",
    "start": "216239",
    "end": "218080"
  },
  {
    "text": "naming conventions when managing your",
    "start": "218080",
    "end": "219920"
  },
  {
    "text": "styles",
    "start": "219920",
    "end": "220640"
  },
  {
    "text": "if you want to use styles from a certain",
    "start": "220640",
    "end": "222319"
  },
  {
    "text": "module you just import the style sheet",
    "start": "222319",
    "end": "224560"
  },
  {
    "text": "in your javascript",
    "start": "224560",
    "end": "225760"
  },
  {
    "text": "then reference your styles in jsx as if",
    "start": "225760",
    "end": "228080"
  },
  {
    "text": "the styles were a javascript object",
    "start": "228080",
    "end": "230080"
  },
  {
    "text": "that's pretty awesome but from there",
    "start": "230080",
    "end": "231840"
  },
  {
    "text": "let's shift our attention over to the",
    "start": "231840",
    "end": "233360"
  },
  {
    "text": "pages directory",
    "start": "233360",
    "end": "234480"
  },
  {
    "text": "inside this directory we define all the",
    "start": "234480",
    "end": "236480"
  },
  {
    "text": "pages and routes for the application",
    "start": "236480",
    "end": "239040"
  },
  {
    "text": "at the highest level we have this",
    "start": "239040",
    "end": "240640"
  },
  {
    "text": "underscore app.js file which is like the",
    "start": "240640",
    "end": "242959"
  },
  {
    "text": "main entry point into the app",
    "start": "242959",
    "end": "244799"
  },
  {
    "text": "in other words every individual page",
    "start": "244799",
    "end": "246720"
  },
  {
    "text": "will start from this template",
    "start": "246720",
    "end": "248239"
  },
  {
    "text": "currently the application only has one",
    "start": "248239",
    "end": "250159"
  },
  {
    "text": "page which points to the root url",
    "start": "250159",
    "end": "252319"
  },
  {
    "text": "and is defined by the component in the",
    "start": "252319",
    "end": "254319"
  },
  {
    "text": "index.js file",
    "start": "254319",
    "end": "255680"
  },
  {
    "text": "when a user navigates to this url next",
    "start": "255680",
    "end": "258079"
  },
  {
    "text": "will find the default export which is a",
    "start": "258079",
    "end": "260239"
  },
  {
    "text": "react component",
    "start": "260239",
    "end": "261280"
  },
  {
    "text": "in this file so every file or page in",
    "start": "261280",
    "end": "264000"
  },
  {
    "text": "your application",
    "start": "264000",
    "end": "264880"
  },
  {
    "text": "needs to have one default export to",
    "start": "264880",
    "end": "267280"
  },
  {
    "text": "demonstrate this further",
    "start": "267280",
    "end": "268479"
  },
  {
    "text": "let's create our first route in the",
    "start": "268479",
    "end": "270000"
  },
  {
    "text": "pages directory create a new file called",
    "start": "270000",
    "end": "272320"
  },
  {
    "text": "hello.js",
    "start": "272320",
    "end": "273520"
  },
  {
    "text": "then we can define the content of this",
    "start": "273520",
    "end": "275199"
  },
  {
    "text": "page by exporting a default react",
    "start": "275199",
    "end": "277600"
  },
  {
    "text": "component from it",
    "start": "277600",
    "end": "278720"
  },
  {
    "text": "from there we can go back to the browser",
    "start": "278720",
    "end": "280720"
  },
  {
    "text": "and navigate to localhost 3000",
    "start": "280720",
    "end": "283040"
  },
  {
    "text": "slash hello and we should get the",
    "start": "283040",
    "end": "284800"
  },
  {
    "text": "content of that component",
    "start": "284800",
    "end": "286160"
  },
  {
    "text": "congratulations you just built your",
    "start": "286160",
    "end": "287759"
  },
  {
    "text": "first web page with next",
    "start": "287759",
    "end": "289360"
  },
  {
    "text": "but now let's imagine a route that's a",
    "start": "289360",
    "end": "290960"
  },
  {
    "text": "little more complex we have a cars route",
    "start": "290960",
    "end": "293040"
  },
  {
    "text": "that should show a list of cars",
    "start": "293040",
    "end": "294800"
  },
  {
    "text": "then an infinite number of cars that",
    "start": "294800",
    "end": "296479"
  },
  {
    "text": "might be dynamically generated",
    "start": "296479",
    "end": "298080"
  },
  {
    "text": "under that url we can implement a",
    "start": "298080",
    "end": "300000"
  },
  {
    "text": "dynamic route like that",
    "start": "300000",
    "end": "301199"
  },
  {
    "text": "by first creating a cars directory then",
    "start": "301199",
    "end": "304160"
  },
  {
    "text": "inside the directory we'll add an",
    "start": "304160",
    "end": "305759"
  },
  {
    "text": "index.js file",
    "start": "305759",
    "end": "307039"
  },
  {
    "text": "which will show the main list of cars",
    "start": "307039",
    "end": "309280"
  },
  {
    "text": "then for each individual car",
    "start": "309280",
    "end": "311120"
  },
  {
    "text": "we'll add a component that has a file",
    "start": "311120",
    "end": "313280"
  },
  {
    "text": "name of brackets",
    "start": "313280",
    "end": "314800"
  },
  {
    "text": "paramname dot js the brackets make this",
    "start": "314800",
    "end": "318160"
  },
  {
    "text": "route dynamic",
    "start": "318160",
    "end": "319199"
  },
  {
    "text": "which means anytime a user navigates to",
    "start": "319199",
    "end": "321680"
  },
  {
    "text": "cars",
    "start": "321680",
    "end": "322240"
  },
  {
    "text": "slash whatever or cars slash tesla",
    "start": "322240",
    "end": "325680"
  },
  {
    "text": "it will render the component in this",
    "start": "325680",
    "end": "327120"
  },
  {
    "text": "file to see that in action",
    "start": "327120",
    "end": "328960"
  },
  {
    "text": "let's go ahead and implement the",
    "start": "328960",
    "end": "330080"
  },
  {
    "text": "component logic in the index file we'll",
    "start": "330080",
    "end": "332400"
  },
  {
    "text": "just add a placeholder for the car's",
    "start": "332400",
    "end": "334160"
  },
  {
    "text": "list for now",
    "start": "334160",
    "end": "335280"
  },
  {
    "text": "but in the dynamic component we'll",
    "start": "335280",
    "end": "337199"
  },
  {
    "text": "import the use router hook from the next",
    "start": "337199",
    "end": "339199"
  },
  {
    "text": "router",
    "start": "339199",
    "end": "339680"
  },
  {
    "text": "it allows us to access the query",
    "start": "339680",
    "end": "341360"
  },
  {
    "text": "parameters from the url",
    "start": "341360",
    "end": "342960"
  },
  {
    "text": "in this example the value is id but you",
    "start": "342960",
    "end": "345039"
  },
  {
    "text": "can give it a name of whatever you want",
    "start": "345039",
    "end": "346880"
  },
  {
    "text": "and then we'll render that value out to",
    "start": "346880",
    "end": "348400"
  },
  {
    "text": "the template now back in the browser",
    "start": "348400",
    "end": "350479"
  },
  {
    "text": "if we go to the car's url it renders out",
    "start": "350479",
    "end": "352720"
  },
  {
    "text": "the car's component",
    "start": "352720",
    "end": "353759"
  },
  {
    "text": "then if we add any string after the",
    "start": "353759",
    "end": "355280"
  },
  {
    "text": "car's url it renders out the dynamic",
    "start": "355280",
    "end": "357440"
  },
  {
    "text": "component",
    "start": "357440",
    "end": "358240"
  },
  {
    "text": "now one other thing you may have noticed",
    "start": "358240",
    "end": "359520"
  },
  {
    "text": "in the pages directory is this api",
    "start": "359520",
    "end": "361680"
  },
  {
    "text": "directory",
    "start": "361680",
    "end": "362400"
  },
  {
    "text": "so what is that all about the api",
    "start": "362400",
    "end": "364400"
  },
  {
    "text": "directory is a special part of next",
    "start": "364400",
    "end": "366400"
  },
  {
    "text": "for setting up routes that will only",
    "start": "366400",
    "end": "368560"
  },
  {
    "text": "apply to the server",
    "start": "368560",
    "end": "369680"
  },
  {
    "text": "that can be useful because the code you",
    "start": "369680",
    "end": "371360"
  },
  {
    "text": "write here won't increase the",
    "start": "371360",
    "end": "372800"
  },
  {
    "text": "client-side javascript bundle that needs",
    "start": "372800",
    "end": "374639"
  },
  {
    "text": "to ultimately be sent over the network",
    "start": "374639",
    "end": "376639"
  },
  {
    "text": "we're not going to get into api routes",
    "start": "376639",
    "end": "378080"
  },
  {
    "text": "in this video but just know that it's a",
    "start": "378080",
    "end": "379919"
  },
  {
    "text": "useful feature when you have work that",
    "start": "379919",
    "end": "381600"
  },
  {
    "text": "needs to be done on the back end",
    "start": "381600",
    "end": "383039"
  },
  {
    "text": "or if you simply want to expose an api",
    "start": "383039",
    "end": "385360"
  },
  {
    "text": "for your end users",
    "start": "385360",
    "end": "386639"
  },
  {
    "text": "but now let's shift our attention over",
    "start": "386639",
    "end": "388560"
  },
  {
    "text": "to the most valuable feature in next",
    "start": "388560",
    "end": "390560"
  },
  {
    "text": "which of course is data fetching next",
    "start": "390560",
    "end": "392800"
  },
  {
    "text": "allows us to fetch data",
    "start": "392800",
    "end": "394240"
  },
  {
    "text": "and render html on the server and again",
    "start": "394240",
    "end": "397039"
  },
  {
    "text": "the benefit of doing that",
    "start": "397039",
    "end": "398160"
  },
  {
    "text": "is that the end user gets rendered",
    "start": "398160",
    "end": "399919"
  },
  {
    "text": "content quicker and the content can be",
    "start": "399919",
    "end": "402160"
  },
  {
    "text": "reliably crawled by search bots and",
    "start": "402160",
    "end": "404319"
  },
  {
    "text": "social media link bots",
    "start": "404319",
    "end": "405840"
  },
  {
    "text": "now when it comes to server rendering",
    "start": "405840",
    "end": "407520"
  },
  {
    "text": "there are two main options",
    "start": "407520",
    "end": "409120"
  },
  {
    "text": "static generation and server side",
    "start": "409120",
    "end": "411280"
  },
  {
    "text": "rendering",
    "start": "411280",
    "end": "412160"
  },
  {
    "text": "static generation is also called",
    "start": "412160",
    "end": "413840"
  },
  {
    "text": "pre-rendering because you generate all",
    "start": "413840",
    "end": "415919"
  },
  {
    "text": "the html",
    "start": "415919",
    "end": "416880"
  },
  {
    "text": "at build time it makes life very simple",
    "start": "416880",
    "end": "419199"
  },
  {
    "text": "because you generate a bunch of html",
    "start": "419199",
    "end": "421039"
  },
  {
    "text": "files",
    "start": "421039",
    "end": "421599"
  },
  {
    "text": "then upload them to a storage bucket or",
    "start": "421599",
    "end": "423759"
  },
  {
    "text": "static host",
    "start": "423759",
    "end": "424639"
  },
  {
    "text": "and they can be delivered with very high",
    "start": "424639",
    "end": "426160"
  },
  {
    "text": "performance over a cdn",
    "start": "426160",
    "end": "428240"
  },
  {
    "text": "but there's a couple of big trade-offs",
    "start": "428240",
    "end": "429680"
  },
  {
    "text": "here the first one is that your data may",
    "start": "429680",
    "end": "431840"
  },
  {
    "text": "become stale",
    "start": "431840",
    "end": "432880"
  },
  {
    "text": "if the data on the server changes you",
    "start": "432880",
    "end": "434720"
  },
  {
    "text": "need to rebuild and redeploy your site",
    "start": "434720",
    "end": "436960"
  },
  {
    "text": "in order for those changes to be",
    "start": "436960",
    "end": "438319"
  },
  {
    "text": "reflected",
    "start": "438319",
    "end": "439199"
  },
  {
    "text": "another important trait i have to think",
    "start": "439199",
    "end": "440479"
  },
  {
    "text": "about is scale if your website has a",
    "start": "440479",
    "end": "442400"
  },
  {
    "text": "million pages it'll be very slow and",
    "start": "442400",
    "end": "444240"
  },
  {
    "text": "difficult to pre-render all of them",
    "start": "444240",
    "end": "446160"
  },
  {
    "text": "that makes static generation most",
    "start": "446160",
    "end": "447680"
  },
  {
    "text": "well-suited for data that doesn't change",
    "start": "447680",
    "end": "449599"
  },
  {
    "text": "often",
    "start": "449599",
    "end": "450000"
  },
  {
    "text": "and for sites that have a relatively low",
    "start": "450000",
    "end": "452000"
  },
  {
    "text": "number of total pages",
    "start": "452000",
    "end": "453280"
  },
  {
    "text": "a good example would be a blog because",
    "start": "453280",
    "end": "455360"
  },
  {
    "text": "it might have a few hundred pages and",
    "start": "455360",
    "end": "456800"
  },
  {
    "text": "those pages likely don't change on a",
    "start": "456800",
    "end": "458400"
  },
  {
    "text": "daily basis",
    "start": "458400",
    "end": "459440"
  },
  {
    "text": "let's go ahead and take a look at how we",
    "start": "459440",
    "end": "460720"
  },
  {
    "text": "might implement static generation in",
    "start": "460720",
    "end": "462479"
  },
  {
    "text": "next",
    "start": "462479",
    "end": "463199"
  },
  {
    "text": "in the car component let's imagine we",
    "start": "463199",
    "end": "464960"
  },
  {
    "text": "need to fetch data from an external",
    "start": "464960",
    "end": "466720"
  },
  {
    "text": "source",
    "start": "466720",
    "end": "467360"
  },
  {
    "text": "like a database or api to simulate that",
    "start": "467360",
    "end": "470240"
  },
  {
    "text": "for the demo i've added a couple of json",
    "start": "470240",
    "end": "472400"
  },
  {
    "text": "files to the public directory",
    "start": "472400",
    "end": "474319"
  },
  {
    "text": "we have a file that returns an array of",
    "start": "474319",
    "end": "476000"
  },
  {
    "text": "ids then an individual response",
    "start": "476000",
    "end": "478080"
  },
  {
    "text": "for each car which contains an image and",
    "start": "478080",
    "end": "480639"
  },
  {
    "text": "other data about the car",
    "start": "480639",
    "end": "482319"
  },
  {
    "text": "now we can fetch this data for the car",
    "start": "482319",
    "end": "483919"
  },
  {
    "text": "component by implementing",
    "start": "483919",
    "end": "485840"
  },
  {
    "text": "the get static props function inside the",
    "start": "485840",
    "end": "488319"
  },
  {
    "text": "component file",
    "start": "488319",
    "end": "489520"
  },
  {
    "text": "when you build your site next will",
    "start": "489520",
    "end": "491280"
  },
  {
    "text": "automatically call this function",
    "start": "491280",
    "end": "492879"
  },
  {
    "text": "then send the result as props to the",
    "start": "492879",
    "end": "494960"
  },
  {
    "text": "component itself",
    "start": "494960",
    "end": "496080"
  },
  {
    "text": "what we want to do here is fetch the",
    "start": "496080",
    "end": "497680"
  },
  {
    "text": "json for an individual car",
    "start": "497680",
    "end": "499599"
  },
  {
    "text": "so it can be used in the html or ui for",
    "start": "499599",
    "end": "502400"
  },
  {
    "text": "the cart page",
    "start": "502400",
    "end": "503520"
  },
  {
    "text": "in this case we need the id from the url",
    "start": "503520",
    "end": "505919"
  },
  {
    "text": "to know which car was requested",
    "start": "505919",
    "end": "507919"
  },
  {
    "text": "we can get that information from the",
    "start": "507919",
    "end": "509520"
  },
  {
    "text": "params argument and the function",
    "start": "509520",
    "end": "511360"
  },
  {
    "text": "then from there we'll use the fetch api",
    "start": "511360",
    "end": "513599"
  },
  {
    "text": "to make a request to localhost",
    "start": "513599",
    "end": "515440"
  },
  {
    "text": "to request the json file with that id",
    "start": "515440",
    "end": "518479"
  },
  {
    "text": "we can then convert it to json then the",
    "start": "518479",
    "end": "520560"
  },
  {
    "text": "final step is to return an object",
    "start": "520560",
    "end": "522800"
  },
  {
    "text": "that has a props property where each",
    "start": "522800",
    "end": "525120"
  },
  {
    "text": "prop can then be accessed by the",
    "start": "525120",
    "end": "526880"
  },
  {
    "text": "component",
    "start": "526880",
    "end": "527600"
  },
  {
    "text": "up in the component code we can",
    "start": "527600",
    "end": "528959"
  },
  {
    "text": "destructure the car prop and then use it",
    "start": "528959",
    "end": "531279"
  },
  {
    "text": "in the jsx",
    "start": "531279",
    "end": "532480"
  },
  {
    "text": "which i'm doing here by adding an image",
    "start": "532480",
    "end": "534399"
  },
  {
    "text": "tag which relies on the data fetched by",
    "start": "534399",
    "end": "536399"
  },
  {
    "text": "the server as the image source",
    "start": "536399",
    "end": "538399"
  },
  {
    "text": "now if you're concerned about search",
    "start": "538399",
    "end": "539600"
  },
  {
    "text": "engine optimization you likely want to",
    "start": "539600",
    "end": "541839"
  },
  {
    "text": "add an",
    "start": "541839",
    "end": "542320"
  },
  {
    "text": "seo friendly title as well as meta tags",
    "start": "542320",
    "end": "544800"
  },
  {
    "text": "to the head of the document",
    "start": "544800",
    "end": "546480"
  },
  {
    "text": "next makes that very easy to accomplish",
    "start": "546480",
    "end": "548480"
  },
  {
    "text": "by simply importing the head component",
    "start": "548480",
    "end": "550640"
  },
  {
    "text": "anything inside this component will be",
    "start": "550640",
    "end": "552320"
  },
  {
    "text": "rendered out to the head of the document",
    "start": "552320",
    "end": "554080"
  },
  {
    "text": "like in this case we add a title with",
    "start": "554080",
    "end": "555920"
  },
  {
    "text": "the car color and id",
    "start": "555920",
    "end": "557600"
  },
  {
    "text": "and we could also add meta tags for",
    "start": "557600",
    "end": "559440"
  },
  {
    "text": "twitter and facebook cards if we wanted",
    "start": "559440",
    "end": "561279"
  },
  {
    "text": "to",
    "start": "561279",
    "end": "562560"
  },
  {
    "text": "now because we're working with a dynamic",
    "start": "562560",
    "end": "564399"
  },
  {
    "text": "route there's one other thing we have to",
    "start": "564399",
    "end": "565920"
  },
  {
    "text": "keep in mind",
    "start": "565920",
    "end": "566640"
  },
  {
    "text": "and that's the fact that next has no way",
    "start": "566640",
    "end": "568720"
  },
  {
    "text": "of knowing how many pages we actually",
    "start": "568720",
    "end": "570399"
  },
  {
    "text": "have associated",
    "start": "570399",
    "end": "571519"
  },
  {
    "text": "to a dynamic route in order to",
    "start": "571519",
    "end": "573680"
  },
  {
    "text": "pre-render all the car ids",
    "start": "573680",
    "end": "575600"
  },
  {
    "text": "next needs to know those ids in advance",
    "start": "575600",
    "end": "578320"
  },
  {
    "text": "and the way we provide that information",
    "start": "578320",
    "end": "580240"
  },
  {
    "text": "is by implementing the get static paths",
    "start": "580240",
    "end": "582880"
  },
  {
    "text": "function",
    "start": "582880",
    "end": "583760"
  },
  {
    "text": "this function can also request data from",
    "start": "583760",
    "end": "586080"
  },
  {
    "text": "an api",
    "start": "586080",
    "end": "586800"
  },
  {
    "text": "or database then its job is to return a",
    "start": "586800",
    "end": "589839"
  },
  {
    "text": "paths object",
    "start": "589839",
    "end": "590959"
  },
  {
    "text": "that contains an array with every route",
    "start": "590959",
    "end": "593200"
  },
  {
    "text": "for this dynamic url",
    "start": "593200",
    "end": "595200"
  },
  {
    "text": "in this demo we only have three routes",
    "start": "595200",
    "end": "597440"
  },
  {
    "text": "tesla forward and lambo",
    "start": "597440",
    "end": "599200"
  },
  {
    "text": "we map those values to an array of",
    "start": "599200",
    "end": "600880"
  },
  {
    "text": "objects then return them from the",
    "start": "600880",
    "end": "602800"
  },
  {
    "text": "function",
    "start": "602800",
    "end": "603519"
  },
  {
    "text": "along with additional options like the",
    "start": "603519",
    "end": "605440"
  },
  {
    "text": "fallback behavior",
    "start": "605440",
    "end": "606880"
  },
  {
    "text": "now if we go visit the app in the",
    "start": "606880",
    "end": "608079"
  },
  {
    "text": "browser we should see a fully rendered",
    "start": "608079",
    "end": "609920"
  },
  {
    "text": "web page",
    "start": "609920",
    "end": "610800"
  },
  {
    "text": "it doesn't look any different than a",
    "start": "610800",
    "end": "612160"
  },
  {
    "text": "regular react app however",
    "start": "612160",
    "end": "614160"
  },
  {
    "text": "if you open up the sources panel in",
    "start": "614160",
    "end": "615839"
  },
  {
    "text": "chrome dev tools it'll show you the",
    "start": "615839",
    "end": "617600"
  },
  {
    "text": "fully rendered html",
    "start": "617600",
    "end": "618959"
  },
  {
    "text": "before it was touched by javascript",
    "start": "618959",
    "end": "620959"
  },
  {
    "text": "notice how it contains the title",
    "start": "620959",
    "end": "622480"
  },
  {
    "text": "and pre-rendered content which is",
    "start": "622480",
    "end": "624160"
  },
  {
    "text": "essential for seo",
    "start": "624160",
    "end": "625600"
  },
  {
    "text": "and sharing content on social media",
    "start": "625600",
    "end": "627519"
  },
  {
    "text": "sites so that's how you implement server",
    "start": "627519",
    "end": "629600"
  },
  {
    "text": "side generation",
    "start": "629600",
    "end": "630800"
  },
  {
    "text": "but another big strategy is server side",
    "start": "630800",
    "end": "633040"
  },
  {
    "text": "rendering",
    "start": "633040",
    "end": "633920"
  },
  {
    "text": "the big difference is that with ssr the",
    "start": "633920",
    "end": "636320"
  },
  {
    "text": "content is generated on a server",
    "start": "636320",
    "end": "638240"
  },
  {
    "text": "when requested by the user this approach",
    "start": "638240",
    "end": "640560"
  },
  {
    "text": "is ideal when data changes constantly",
    "start": "640560",
    "end": "642800"
  },
  {
    "text": "because it ensures the end user will",
    "start": "642800",
    "end": "644480"
  },
  {
    "text": "always get the latest and greatest data",
    "start": "644480",
    "end": "646160"
  },
  {
    "text": "from whatever your data source happens",
    "start": "646160",
    "end": "647760"
  },
  {
    "text": "to be",
    "start": "647760",
    "end": "648399"
  },
  {
    "text": "however it's far less efficient because",
    "start": "648399",
    "end": "650399"
  },
  {
    "text": "you need to have a server in place to",
    "start": "650399",
    "end": "652160"
  },
  {
    "text": "respond to those requests",
    "start": "652160",
    "end": "653600"
  },
  {
    "text": "as opposed to caching everything on a",
    "start": "653600",
    "end": "655519"
  },
  {
    "text": "global cdn",
    "start": "655519",
    "end": "656720"
  },
  {
    "text": "imagine something like an ebay auction",
    "start": "656720",
    "end": "658480"
  },
  {
    "text": "where you have millions of listings",
    "start": "658480",
    "end": "660000"
  },
  {
    "text": "and those listings are changing all the",
    "start": "660000",
    "end": "661760"
  },
  {
    "text": "time that's probably a good candidate",
    "start": "661760",
    "end": "663760"
  },
  {
    "text": "for",
    "start": "663760",
    "end": "664079"
  },
  {
    "text": "ssr in any case it's very easy to",
    "start": "664079",
    "end": "666640"
  },
  {
    "text": "implement it next",
    "start": "666640",
    "end": "667760"
  },
  {
    "text": "back in our page file we'll go ahead and",
    "start": "667760",
    "end": "669519"
  },
  {
    "text": "implement another function",
    "start": "669519",
    "end": "671279"
  },
  {
    "text": "called get server side props the only",
    "start": "671279",
    "end": "673600"
  },
  {
    "text": "thing that actually changes in our code",
    "start": "673600",
    "end": "675279"
  },
  {
    "text": "is the name of the function",
    "start": "675279",
    "end": "676640"
  },
  {
    "text": "we can simply copy the body of the git",
    "start": "676640",
    "end": "678800"
  },
  {
    "text": "static props function",
    "start": "678800",
    "end": "680160"
  },
  {
    "text": "and paste it into our new function it",
    "start": "680160",
    "end": "682399"
  },
  {
    "text": "does the exact same thing",
    "start": "682399",
    "end": "683839"
  },
  {
    "text": "but does it on every request instead of",
    "start": "683839",
    "end": "685920"
  },
  {
    "text": "it build time",
    "start": "685920",
    "end": "686880"
  },
  {
    "text": "then we can comment out get static props",
    "start": "686880",
    "end": "689120"
  },
  {
    "text": "and get static paths because we no",
    "start": "689120",
    "end": "690800"
  },
  {
    "text": "longer need those functions",
    "start": "690800",
    "end": "692720"
  },
  {
    "text": "but the real beauty of next is that we",
    "start": "692720",
    "end": "694399"
  },
  {
    "text": "can apply both of these paradigms",
    "start": "694399",
    "end": "695920"
  },
  {
    "text": "wherever we want in the application",
    "start": "695920",
    "end": "698000"
  },
  {
    "text": "we're not limited to one or the other",
    "start": "698000",
    "end": "700160"
  },
  {
    "text": "i'm going to go ahead and wrap things up",
    "start": "700160",
    "end": "701360"
  },
  {
    "text": "there if there's anything you want to",
    "start": "701360",
    "end": "702800"
  },
  {
    "text": "see in my full next course",
    "start": "702800",
    "end": "704240"
  },
  {
    "text": "make sure to let me know in the comments",
    "start": "704240",
    "end": "706240"
  },
  {
    "text": "thanks for watching and i will see you",
    "start": "706240",
    "end": "708079"
  },
  {
    "text": "in the next one",
    "start": "708079",
    "end": "713760"
  }
]