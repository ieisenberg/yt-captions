[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "prisma an open source tool that makes it",
    "start": "320",
    "end": "2560"
  },
  {
    "text": "fun and safe to work with your database",
    "start": "2560",
    "end": "4799"
  },
  {
    "text": "the relational database is ancient",
    "start": "4799",
    "end": "6560"
  },
  {
    "text": "technology that has stood the test of",
    "start": "6560",
    "end": "8320"
  },
  {
    "text": "time but writing sql code is not an",
    "start": "8320",
    "end": "10719"
  },
  {
    "text": "ideal abstraction for modern app",
    "start": "10719",
    "end": "12639"
  },
  {
    "text": "development it provides too much low",
    "start": "12639",
    "end": "14320"
  },
  {
    "text": "level control and you'll probably blow",
    "start": "14320",
    "end": "15920"
  },
  {
    "text": "your foot off writing it to address this",
    "start": "15920",
    "end": "17520"
  },
  {
    "text": "concern orms like sqlize implement",
    "start": "17520",
    "end": "20000"
  },
  {
    "start": "20000",
    "end": "40000"
  },
  {
    "text": "object relational mapping to express",
    "start": "20000",
    "end": "22000"
  },
  {
    "text": "data with object oriented code like",
    "start": "22000",
    "end": "24160"
  },
  {
    "text": "javascript classes prisma is also an orm",
    "start": "24160",
    "end": "26960"
  },
  {
    "text": "that addresses similar problems but",
    "start": "26960",
    "end": "28880"
  },
  {
    "text": "instead it has its own declarative",
    "start": "28880",
    "end": "30880"
  },
  {
    "text": "schema definition language you write a",
    "start": "30880",
    "end": "32800"
  },
  {
    "text": "schema to express your data and",
    "start": "32800",
    "end": "34559"
  },
  {
    "text": "relationships in a human readable way or",
    "start": "34559",
    "end": "36640"
  },
  {
    "text": "the schema can be automatically inferred",
    "start": "36640",
    "end": "38559"
  },
  {
    "text": "from any existing database prisma then",
    "start": "38559",
    "end": "40559"
  },
  {
    "start": "40000",
    "end": "59000"
  },
  {
    "text": "converts the schema into type",
    "start": "40559",
    "end": "42000"
  },
  {
    "text": "definitions allowing you to perform",
    "start": "42000",
    "end": "43680"
  },
  {
    "text": "typesafe crud operations with your own",
    "start": "43680",
    "end": "45520"
  },
  {
    "text": "database models which means you get ide",
    "start": "45520",
    "end": "47520"
  },
  {
    "text": "autocompletion tailored to your own",
    "start": "47520",
    "end": "49280"
  },
  {
    "text": "custom schema in addition it handles",
    "start": "49280",
    "end": "51199"
  },
  {
    "text": "migrations as your data structure",
    "start": "51199",
    "end": "53039"
  },
  {
    "text": "evolves and if you want to visualize",
    "start": "53039",
    "end": "54719"
  },
  {
    "text": "your data prisma studio allows you to",
    "start": "54719",
    "end": "56719"
  },
  {
    "text": "view and manage all of your tables and",
    "start": "56719",
    "end": "58480"
  },
  {
    "text": "rows in the browser to get started",
    "start": "58480",
    "end": "60480"
  },
  {
    "start": "59000",
    "end": "153000"
  },
  {
    "text": "you'll need a relational database like",
    "start": "60480",
    "end": "62079"
  },
  {
    "text": "mysql or postgres although mongodb is",
    "start": "62079",
    "end": "64799"
  },
  {
    "text": "supported as well from a nodejs project",
    "start": "64799",
    "end": "67200"
  },
  {
    "text": "run npx prisma init this creates a env",
    "start": "67200",
    "end": "70400"
  },
  {
    "text": "file where you can add your database url",
    "start": "70400",
    "end": "72479"
  },
  {
    "text": "and a prisma directory to define the",
    "start": "72479",
    "end": "74320"
  },
  {
    "text": "schema if the existing database already",
    "start": "74320",
    "end": "76320"
  },
  {
    "text": "has data we can run prismadb pool to",
    "start": "76320",
    "end": "79119"
  },
  {
    "text": "introspect it and automatically generate",
    "start": "79119",
    "end": "81119"
  },
  {
    "text": "the schema from it notice how each table",
    "start": "81119",
    "end": "83200"
  },
  {
    "text": "is represented with the model keyword",
    "start": "83200",
    "end": "84880"
  },
  {
    "text": "then inside the braces we have column",
    "start": "84880",
    "end": "86640"
  },
  {
    "text": "names and their data types as well as",
    "start": "86640",
    "end": "88880"
  },
  {
    "text": "optional constraints like for example we",
    "start": "88880",
    "end": "91119"
  },
  {
    "text": "might use relation to create a foreign",
    "start": "91119",
    "end": "93280"
  },
  {
    "text": "key constraint between a weapon and a",
    "start": "93280",
    "end": "95280"
  },
  {
    "text": "human and we can also index the weapon",
    "start": "95280",
    "end": "97119"
  },
  {
    "text": "id while we're at it the beauty of this",
    "start": "97119",
    "end": "98880"
  },
  {
    "text": "is that the code is significantly more",
    "start": "98880",
    "end": "100400"
  },
  {
    "text": "concise than what you would write",
    "start": "100400",
    "end": "101759"
  },
  {
    "text": "otherwise in raw sql now if we decide to",
    "start": "101759",
    "end": "104320"
  },
  {
    "text": "modify our schema like add an extra",
    "start": "104320",
    "end": "106159"
  },
  {
    "text": "timestamp column we'll also need to",
    "start": "106159",
    "end": "107920"
  },
  {
    "text": "modify the database structure which can",
    "start": "107920",
    "end": "109600"
  },
  {
    "text": "be handled automatically with the prisma",
    "start": "109600",
    "end": "111520"
  },
  {
    "text": "migrate command now to interact with the",
    "start": "111520",
    "end": "113520"
  },
  {
    "text": "database on the server we tell prisma to",
    "start": "113520",
    "end": "115600"
  },
  {
    "text": "generate the client library import the",
    "start": "115600",
    "end": "117360"
  },
  {
    "text": "client into a javascript file and notice",
    "start": "117360",
    "end": "119360"
  },
  {
    "text": "how it auto-completes the models in the",
    "start": "119360",
    "end": "120880"
  },
  {
    "text": "schema if you do something wrong you'll",
    "start": "120880",
    "end": "122719"
  },
  {
    "text": "know about it right away now find all",
    "start": "122719",
    "end": "124479"
  },
  {
    "text": "the humans with the find menu method to",
    "start": "124479",
    "end": "126719"
  },
  {
    "text": "filter the results we can add a where",
    "start": "126719",
    "end": "128319"
  },
  {
    "text": "clause as a plain javascript object and",
    "start": "128319",
    "end": "130479"
  },
  {
    "text": "if we want to join a related table we",
    "start": "130479",
    "end": "132319"
  },
  {
    "text": "can do that by adding the include object",
    "start": "132319",
    "end": "134319"
  },
  {
    "text": "prisma already knows how to run the",
    "start": "134319",
    "end": "135599"
  },
  {
    "text": "complicated sql code under the hood and",
    "start": "135599",
    "end": "137599"
  },
  {
    "text": "returns the data as an array of",
    "start": "137599",
    "end": "139040"
  },
  {
    "text": "javascript objects ready to use in your",
    "start": "139040",
    "end": "141040"
  },
  {
    "text": "application this has been prisma in 100",
    "start": "141040",
    "end": "143360"
  },
  {
    "text": "seconds if you want to see more short",
    "start": "143360",
    "end": "144879"
  },
  {
    "text": "videos like this hit the like button and",
    "start": "144879",
    "end": "146640"
  },
  {
    "text": "subscribe and let me know if you want to",
    "start": "146640",
    "end": "148080"
  },
  {
    "text": "see a full prisma tutorial in the",
    "start": "148080",
    "end": "149680"
  },
  {
    "text": "comments thanks for watching and i will",
    "start": "149680",
    "end": "151599"
  },
  {
    "text": "see you in the next one",
    "start": "151599",
    "end": "155120"
  }
]