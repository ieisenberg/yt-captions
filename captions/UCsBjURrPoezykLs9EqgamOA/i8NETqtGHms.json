[
  {
    "text": "tensorflow an open source machine",
    "start": "240",
    "end": "2320"
  },
  {
    "text": "learning framework famous for powering",
    "start": "2320",
    "end": "4480"
  },
  {
    "text": "deep neural networks with high-level",
    "start": "4480",
    "end": "6399"
  },
  {
    "text": "code it was developed by the google",
    "start": "6399",
    "end": "8080"
  },
  {
    "text": "brain team and first released in 2015.",
    "start": "8080",
    "end": "10719"
  },
  {
    "text": "it's most commonly used with python but",
    "start": "10719",
    "end": "12719"
  },
  {
    "text": "can run in other languages like",
    "start": "12719",
    "end": "14240"
  },
  {
    "text": "javascript c plus plus and java at its",
    "start": "14240",
    "end": "16640"
  },
  {
    "text": "core it's just a library for programming",
    "start": "16640",
    "end": "18800"
  },
  {
    "text": "with linear algebra and statistics as",
    "start": "18800",
    "end": "20800"
  },
  {
    "text": "you know the word tensor describes a",
    "start": "20800",
    "end": "22480"
  },
  {
    "text": "multilinear relationship between sets of",
    "start": "22480",
    "end": "24320"
  },
  {
    "text": "algebraic objects within a vector space",
    "start": "24320",
    "end": "26400"
  },
  {
    "text": "aka a multi-dimensional array what makes",
    "start": "26400",
    "end": "28800"
  },
  {
    "text": "it special is its collection of apis for",
    "start": "28800",
    "end": "31199"
  },
  {
    "text": "data processing visualization model",
    "start": "31199",
    "end": "33600"
  },
  {
    "text": "evaluation and deployment that make deep",
    "start": "33600",
    "end": "35920"
  },
  {
    "text": "learning accessible to the average",
    "start": "35920",
    "end": "37680"
  },
  {
    "text": "developer it's extremely portable and is",
    "start": "37680",
    "end": "39760"
  },
  {
    "text": "able to run on tiny mobile cpus or",
    "start": "39760",
    "end": "42160"
  },
  {
    "text": "microcontrollers with tensorflow lite",
    "start": "42160",
    "end": "44000"
  },
  {
    "text": "can run in the browser with",
    "start": "44000",
    "end": "45160"
  },
  {
    "text": "tensorflow.js while the core library can",
    "start": "45160",
    "end": "47360"
  },
  {
    "text": "scale up to multiple gpus or run on",
    "start": "47360",
    "end": "49840"
  },
  {
    "text": "tensor processing units ships engineered",
    "start": "49840",
    "end": "52000"
  },
  {
    "text": "specifically to run tensorflow at a",
    "start": "52000",
    "end": "54000"
  },
  {
    "text": "massive scale it's used in medicine for",
    "start": "54000",
    "end": "56079"
  },
  {
    "text": "object detection and mri images by",
    "start": "56079",
    "end": "58239"
  },
  {
    "text": "twitter to sort your timeline by tweet",
    "start": "58239",
    "end": "60239"
  },
  {
    "text": "relevance by spotify to recommend music",
    "start": "60239",
    "end": "62559"
  },
  {
    "text": "by paypal for fraud detection in",
    "start": "62559",
    "end": "64478"
  },
  {
    "text": "addition to many other applications like",
    "start": "64479",
    "end": "66400"
  },
  {
    "text": "self-driving cars natural language",
    "start": "66400",
    "end": "68080"
  },
  {
    "text": "processing and so on to build your own",
    "start": "68080",
    "end": "70159"
  },
  {
    "text": "neural network right now create a python",
    "start": "70159",
    "end": "72080"
  },
  {
    "text": "file and install tensorflow next we'll",
    "start": "72080",
    "end": "74159"
  },
  {
    "text": "need some data like fashion mnist which",
    "start": "74159",
    "end": "76320"
  },
  {
    "text": "we can automatically import the goal is",
    "start": "76320",
    "end": "78159"
  },
  {
    "text": "to train a model that can predict the",
    "start": "78159",
    "end": "79600"
  },
  {
    "text": "clothing type of each image tensorflow",
    "start": "79600",
    "end": "81600"
  },
  {
    "text": "has a subclassing api for expert users",
    "start": "81600",
    "end": "84000"
  },
  {
    "text": "but also integrates with the",
    "start": "84000",
    "end": "85360"
  },
  {
    "text": "beginner-friendly keras library which",
    "start": "85360",
    "end": "87119"
  },
  {
    "text": "has a sequential api that can easily",
    "start": "87119",
    "end": "89360"
  },
  {
    "text": "build neural networks layer by layer we",
    "start": "89360",
    "end": "91600"
  },
  {
    "text": "start with a flattened layer that takes",
    "start": "91600",
    "end": "93200"
  },
  {
    "text": "the 28 by 28 pixel image as an input and",
    "start": "93200",
    "end": "95840"
  },
  {
    "text": "converts it into a one-dimensional array",
    "start": "95840",
    "end": "97920"
  },
  {
    "text": "this input layer is then fed into a",
    "start": "97920",
    "end": "99759"
  },
  {
    "text": "dense layer with 128 fully connected",
    "start": "99759",
    "end": "102240"
  },
  {
    "text": "neurons or nodes you can think of each",
    "start": "102240",
    "end": "104320"
  },
  {
    "text": "node like its own linear regression as",
    "start": "104320",
    "end": "106320"
  },
  {
    "text": "each data point flows through it it'll",
    "start": "106320",
    "end": "107840"
  },
  {
    "text": "try to guess the output and gradually",
    "start": "107840",
    "end": "109759"
  },
  {
    "text": "update a mapping of weights to determine",
    "start": "109759",
    "end": "111600"
  },
  {
    "text": "the importance of a given variable in",
    "start": "111600",
    "end": "113439"
  },
  {
    "text": "this case it uses a rectified linear",
    "start": "113439",
    "end": "115520"
  },
  {
    "text": "activation function that will output the",
    "start": "115520",
    "end": "117600"
  },
  {
    "text": "input if a certain threshold is met",
    "start": "117600",
    "end": "119439"
  },
  {
    "text": "otherwise it will just output zero and",
    "start": "119439",
    "end": "121360"
  },
  {
    "text": "the behavior of this layer can be",
    "start": "121360",
    "end": "122719"
  },
  {
    "text": "customized by tuning as hyperparameters",
    "start": "122719",
    "end": "125040"
  },
  {
    "text": "finally we have our output layer which",
    "start": "125040",
    "end": "126799"
  },
  {
    "text": "is also dense but is limited to 10 nodes",
    "start": "126799",
    "end": "129280"
  },
  {
    "text": "which corresponds to the total number of",
    "start": "129280",
    "end": "131039"
  },
  {
    "text": "clothing types in the data set now we",
    "start": "131039",
    "end": "132879"
  },
  {
    "text": "can compile the model and tell it to",
    "start": "132879",
    "end": "134640"
  },
  {
    "text": "optimize a certain loss function like",
    "start": "134640",
    "end": "136720"
  },
  {
    "text": "sparse categorical cross entropy as we",
    "start": "136720",
    "end": "138879"
  },
  {
    "text": "train the model for multiple epochs its",
    "start": "138879",
    "end": "140879"
  },
  {
    "text": "accuracy should gradually improve the",
    "start": "140879",
    "end": "142879"
  },
  {
    "text": "end result is a model that makes a",
    "start": "142879",
    "end": "144400"
  },
  {
    "text": "prediction with the likelihood that an",
    "start": "144400",
    "end": "146080"
  },
  {
    "text": "image is a certain type of clothing",
    "start": "146080",
    "end": "147760"
  },
  {
    "text": "congratulations you just built a neural",
    "start": "147760",
    "end": "149920"
  },
  {
    "text": "network this has been tensorflow in 100",
    "start": "149920",
    "end": "152160"
  },
  {
    "text": "seconds hit the like button if you want",
    "start": "152160",
    "end": "153599"
  },
  {
    "text": "to see more short videos like this",
    "start": "153599",
    "end": "155040"
  },
  {
    "text": "thanks for watching and i will see you",
    "start": "155040",
    "end": "156959"
  },
  {
    "text": "in the next one",
    "start": "156959",
    "end": "160440"
  }
]