[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "when building a location driven app it's",
    "start": "30",
    "end": "2280"
  },
  {
    "text": "critical to be able to query data based",
    "start": "2280",
    "end": "4410"
  },
  {
    "text": "on that current user's location in this",
    "start": "4410",
    "end": "6930"
  },
  {
    "text": "episode we're going to use angular",
    "start": "6930",
    "end": "8340"
  },
  {
    "text": "Google Maps along with firebase geo fire",
    "start": "8340",
    "end": "11099"
  },
  {
    "text": "to accomplish this task the app will",
    "start": "11099",
    "end": "13679"
  },
  {
    "text": "first detect the current users location",
    "start": "13679",
    "end": "15509"
  },
  {
    "text": "and then query firebase for any items",
    "start": "15509",
    "end": "17970"
  },
  {
    "text": "within a certain radius of that location",
    "start": "17970",
    "end": "19980"
  },
  {
    "text": "then we'll display those items on the",
    "start": "19980",
    "end": "21779"
  },
  {
    "text": "map along with their distance from the",
    "start": "21779",
    "end": "23580"
  },
  {
    "text": "current user to help us along the way",
    "start": "23580",
    "end": "25769"
  },
  {
    "start": "24000",
    "end": "138000"
  },
  {
    "text": "we're going to use the angular Google",
    "start": "25769",
    "end": "27570"
  },
  {
    "text": "Maps package which includes several",
    "start": "27570",
    "end": "29429"
  },
  {
    "text": "pre-built components and directives for",
    "start": "29429",
    "end": "31560"
  },
  {
    "text": "common Google Maps elements you can",
    "start": "31560",
    "end": "33719"
  },
  {
    "text": "install it with NPM install a GM / Corps",
    "start": "33719",
    "end": "36600"
  },
  {
    "text": "flag save from there you need to go to",
    "start": "36600",
    "end": "39149"
  },
  {
    "text": "the Google cloud platform console and",
    "start": "39149",
    "end": "41219"
  },
  {
    "text": "enable the Google Maps API once enabled",
    "start": "41219",
    "end": "44520"
  },
  {
    "text": "you can generate an API key and then",
    "start": "44520",
    "end": "47100"
  },
  {
    "text": "we'll use that API key in that angular",
    "start": "47100",
    "end": "49020"
  },
  {
    "text": "environment here we already have",
    "start": "49020",
    "end": "50879"
  },
  {
    "text": "firebase configured via angularfire -",
    "start": "50879",
    "end": "53250"
  },
  {
    "text": "and then we'll also add our Google Maps",
    "start": "53250",
    "end": "55440"
  },
  {
    "text": "API key here then we can go over to our",
    "start": "55440",
    "end": "57780"
  },
  {
    "text": "app module and we'll import the",
    "start": "57780",
    "end": "59640"
  },
  {
    "text": "environment as well as the angularfire",
    "start": "59640",
    "end": "61559"
  },
  {
    "text": "module and angular Google Maps then we",
    "start": "61559",
    "end": "64978"
  },
  {
    "text": "can pass a GM or Google Maps API key",
    "start": "64979",
    "end": "67560"
  },
  {
    "text": "when we import it in the module from",
    "start": "67560",
    "end": "70530"
  },
  {
    "text": "here we'll go ahead and create a new",
    "start": "70530",
    "end": "71490"
  },
  {
    "text": "component to handle the map called",
    "start": "71490",
    "end": "73260"
  },
  {
    "text": "Google map then we need to give the map",
    "start": "73260",
    "end": "75930"
  },
  {
    "text": "a CSS style we want it to be full screen",
    "start": "75930",
    "end": "78150"
  },
  {
    "text": "so we'll just do 100 width and height in",
    "start": "78150",
    "end": "80729"
  },
  {
    "text": "the HTML we'll wrap the map in a div so",
    "start": "80729",
    "end": "83130"
  },
  {
    "text": "it only displays if the latitude and",
    "start": "83130",
    "end": "84780"
  },
  {
    "text": "longitude is defined then we can use the",
    "start": "84780",
    "end": "87360"
  },
  {
    "text": "AGM map selector and pass it the",
    "start": "87360",
    "end": "89880"
  },
  {
    "text": "latitude and longitude as input",
    "start": "89880",
    "end": "91860"
  },
  {
    "text": "arguments this will define the center",
    "start": "91860",
    "end": "94380"
  },
  {
    "text": "point of the map then we can nest ajm",
    "start": "94380",
    "end": "97259"
  },
  {
    "text": "markers inside the map and display them",
    "start": "97259",
    "end": "99420"
  },
  {
    "text": "at whichever coordinates we want and if",
    "start": "99420",
    "end": "101909"
  },
  {
    "text": "we want that marker to have a popup",
    "start": "101909",
    "end": "103140"
  },
  {
    "text": "window then we can add the ajm info",
    "start": "103140",
    "end": "105689"
  },
  {
    "text": "window and we can transclude any HTML we",
    "start": "105689",
    "end": "108930"
  },
  {
    "text": "want in here so now we just need to get",
    "start": "108930",
    "end": "111479"
  },
  {
    "text": "the current users location so we can do",
    "start": "111479",
    "end": "113729"
  },
  {
    "text": "this in that component by defining a",
    "start": "113729",
    "end": "115500"
  },
  {
    "text": "Latin longitude variable then during ng",
    "start": "115500",
    "end": "118469"
  },
  {
    "text": "on an it we tap into the global",
    "start": "118469",
    "end": "119880"
  },
  {
    "text": "navigator object and we call get current",
    "start": "119880",
    "end": "122880"
  },
  {
    "text": "position and this will return the user's",
    "start": "122880",
    "end": "125880"
  },
  {
    "text": "current position latitude and longitude",
    "start": "125880",
    "end": "127920"
  },
  {
    "text": "on their browser or device now if you go",
    "start": "127920",
    "end": "131069"
  },
  {
    "text": "to the app and check it out you should",
    "start": "131069",
    "end": "132180"
  },
  {
    "text": "see the map centered on your current",
    "start": "132180",
    "end": "133590"
  },
  {
    "text": "location",
    "start": "133590",
    "end": "133890"
  },
  {
    "text": "along with a marker exactly where you",
    "start": "133890",
    "end": "136080"
  },
  {
    "text": "presently are now that we have a basic",
    "start": "136080",
    "end": "138510"
  },
  {
    "start": "138000",
    "end": "335000"
  },
  {
    "text": "map to work with let's use geo fire to",
    "start": "138510",
    "end": "140760"
  },
  {
    "text": "query firebase based on a GPS location",
    "start": "140760",
    "end": "143190"
  },
  {
    "text": "you can install it by running npm",
    "start": "143190",
    "end": "145560"
  },
  {
    "text": "installed geo fire flag save when you",
    "start": "145560",
    "end": "148800"
  },
  {
    "text": "update the firebase database with geo",
    "start": "148800",
    "end": "150540"
  },
  {
    "text": "fire it saves a unique string along with",
    "start": "150540",
    "end": "153060"
  },
  {
    "text": "the GPS coordinates for a location this",
    "start": "153060",
    "end": "155700"
  },
  {
    "text": "makes it possible to run queries in real",
    "start": "155700",
    "end": "157950"
  },
  {
    "text": "time based on a given locations distance",
    "start": "157950",
    "end": "160440"
  },
  {
    "text": "from these coordinates now let's create",
    "start": "160440",
    "end": "162660"
  },
  {
    "text": "a service to interact with geo fire",
    "start": "162660",
    "end": "164570"
  },
  {
    "text": "first we'll import the angular fire",
    "start": "164570",
    "end": "166980"
  },
  {
    "text": "database and we'll also import the geo",
    "start": "166980",
    "end": "169650"
  },
  {
    "text": "fire library and we're also going to use",
    "start": "169650",
    "end": "171720"
  },
  {
    "text": "an rxjs behavior subject to save the",
    "start": "171720",
    "end": "174480"
  },
  {
    "text": "ultimate results we get back from geo",
    "start": "174480",
    "end": "176220"
  },
  {
    "text": "fire so I'm calling the results hits and",
    "start": "176220",
    "end": "178739"
  },
  {
    "text": "for now they're just gonna be an empty",
    "start": "178739",
    "end": "180390"
  },
  {
    "text": "array to work with geo fire you need to",
    "start": "180390",
    "end": "183300"
  },
  {
    "text": "send it a database reference of the",
    "start": "183300",
    "end": "185489"
  },
  {
    "text": "location that you're working with this",
    "start": "185489",
    "end": "187290"
  },
  {
    "text": "can be done with angular fire - by",
    "start": "187290",
    "end": "188790"
  },
  {
    "text": "calling DB list and then passing that",
    "start": "188790",
    "end": "191160"
  },
  {
    "text": "reference to a new geo fire instance",
    "start": "191160",
    "end": "193860"
  },
  {
    "text": "first we'll create a function to create",
    "start": "193860",
    "end": "196200"
  },
  {
    "text": "new data using geo fire it takes the",
    "start": "196200",
    "end": "198720"
  },
  {
    "text": "firebase push key as an argument along",
    "start": "198720",
    "end": "200549"
  },
  {
    "text": "with the Latin longitude in an array and",
    "start": "200549",
    "end": "203190"
  },
  {
    "text": "then we can call geo fire dot set and",
    "start": "203190",
    "end": "206070"
  },
  {
    "text": "pass at the key and the coordinates this",
    "start": "206070",
    "end": "208830"
  },
  {
    "text": "will update the firebase database in the",
    "start": "208830",
    "end": "210660"
  },
  {
    "text": "proper format the next thing we'll do is",
    "start": "210660",
    "end": "212640"
  },
  {
    "text": "query data based on their presence",
    "start": "212640",
    "end": "214530"
  },
  {
    "text": "within a radius and kilometers from a",
    "start": "214530",
    "end": "216720"
  },
  {
    "text": "given set of coordinates we do this by",
    "start": "216720",
    "end": "219150"
  },
  {
    "text": "calling geo fire query pass at the",
    "start": "219150",
    "end": "221190"
  },
  {
    "text": "center which is the GPS coordinates and",
    "start": "221190",
    "end": "223470"
  },
  {
    "text": "the radius that's how far out we want",
    "start": "223470",
    "end": "225360"
  },
  {
    "text": "the query to go then we can listen to",
    "start": "225360",
    "end": "227310"
  },
  {
    "text": "the key entered event which occurs when",
    "start": "227310",
    "end": "228600"
  },
  {
    "text": "firebase is returned a relevant data",
    "start": "228600",
    "end": "230820"
  },
  {
    "text": "point it's going to have the key the",
    "start": "230820",
    "end": "232830"
  },
  {
    "text": "location and GPS coordinates as well as",
    "start": "232830",
    "end": "234810"
  },
  {
    "text": "the distance from the center of that",
    "start": "234810",
    "end": "236220"
  },
  {
    "text": "circle we'll go ahead and save this as",
    "start": "236220",
    "end": "238380"
  },
  {
    "text": "our own data object called hit then we",
    "start": "238380",
    "end": "240900"
  },
  {
    "text": "can get the current value from the",
    "start": "240900",
    "end": "242370"
  },
  {
    "text": "behavior subject append the latest hit",
    "start": "242370",
    "end": "244200"
  },
  {
    "text": "to it and then update the value of the",
    "start": "244200",
    "end": "246060"
  },
  {
    "text": "behavior subject by calling next on it",
    "start": "246060",
    "end": "248299"
  },
  {
    "text": "now let's go back to the component and",
    "start": "248299",
    "end": "250980"
  },
  {
    "text": "inject the geo service into it then",
    "start": "250980",
    "end": "253650"
  },
  {
    "text": "we'll display the hits from geo Fire as",
    "start": "253650",
    "end": "255510"
  },
  {
    "text": "markers in the map so since we have the",
    "start": "255510",
    "end": "258600"
  },
  {
    "text": "hits as a behavior subject we can just",
    "start": "258600",
    "end": "260370"
  },
  {
    "text": "subscribe to them during ng on a knit or",
    "start": "260370",
    "end": "262560"
  },
  {
    "text": "you could also use the async pipe in the",
    "start": "262560",
    "end": "264780"
  },
  {
    "text": "template to subscribe to them as well",
    "start": "264780",
    "end": "267480"
  },
  {
    "text": "then we just need to tell geo fire to",
    "start": "267480",
    "end": "269310"
  },
  {
    "text": "make the query by calling geo get",
    "start": "269310",
    "end": "271560"
  },
  {
    "text": "locations and in this example we'll do",
    "start": "271560",
    "end": "273720"
  },
  {
    "text": "it within a 500 kilometer radius in the",
    "start": "273720",
    "end": "277140"
  },
  {
    "text": "HTML we can add another AGM marker",
    "start": "277140",
    "end": "279270"
  },
  {
    "text": "inside of our AGM map and this time",
    "start": "279270",
    "end": "281820"
  },
  {
    "text": "we'll loop over it with ng 4 and we can",
    "start": "281820",
    "end": "284730"
  },
  {
    "text": "pass it the latitude and longitude for",
    "start": "284730",
    "end": "286470"
  },
  {
    "text": "each marker as well as a custom icon",
    "start": "286470",
    "end": "289430"
  },
  {
    "text": "then inside the pop-up window we can",
    "start": "289430",
    "end": "291810"
  },
  {
    "text": "tell users exactly how far away they are",
    "start": "291810",
    "end": "293880"
  },
  {
    "text": "in kilometers from any of these markers",
    "start": "293880",
    "end": "296750"
  },
  {
    "text": "now if we go to the app we can see when",
    "start": "296750",
    "end": "299190"
  },
  {
    "text": "we navigate up to the markers and click",
    "start": "299190",
    "end": "301080"
  },
  {
    "text": "on them it'll tell us exactly how many",
    "start": "301080",
    "end": "302790"
  },
  {
    "text": "kilometers we are away from that point",
    "start": "302790",
    "end": "304910"
  },
  {
    "text": "that's it for angular Google Maps and",
    "start": "304910",
    "end": "307680"
  },
  {
    "text": "geo fire if this video helped you please",
    "start": "307680",
    "end": "309690"
  },
  {
    "text": "like and subscribe",
    "start": "309690",
    "end": "310920"
  },
  {
    "text": "and if you want to support the channel",
    "start": "310920",
    "end": "312150"
  },
  {
    "text": "consider becoming a pro member at",
    "start": "312150",
    "end": "313920"
  },
  {
    "text": "angular firebase comm or you'll get a",
    "start": "313920",
    "end": "315930"
  },
  {
    "text": "free copy of my book as well as one on",
    "start": "315930",
    "end": "318000"
  },
  {
    "text": "one project consulting thanks for",
    "start": "318000",
    "end": "320280"
  },
  {
    "text": "watching and I'll see you soon",
    "start": "320280",
    "end": "323840"
  },
  {
    "text": "[Music]",
    "start": "326580",
    "end": "331608"
  }
]