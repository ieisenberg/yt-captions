[
  {
    "text": "[Music]",
    "start": "0",
    "end": "6440"
  },
  {
    "text": "real-time geolocation is behind some of",
    "start": "6440",
    "end": "8940"
  },
  {
    "text": "the most awesome apps in the world such",
    "start": "8940",
    "end": "10530"
  },
  {
    "text": "as uber Instagram and ways to name a few",
    "start": "10530",
    "end": "12750"
  },
  {
    "text": "but building these features from scratch",
    "start": "12750",
    "end": "14549"
  },
  {
    "text": "requires a lot of complex math and",
    "start": "14549",
    "end": "16320"
  },
  {
    "text": "advanced data modeling but fortunately",
    "start": "16320",
    "end": "18480"
  },
  {
    "text": "there's tools we can use to build",
    "start": "18480",
    "end": "19800"
  },
  {
    "text": "features like this without any",
    "start": "19800",
    "end": "21000"
  },
  {
    "text": "trigonometry and we can do it in the",
    "start": "21000",
    "end": "23010"
  },
  {
    "text": "next few minutes if you're new here like",
    "start": "23010",
    "end": "24779"
  },
  {
    "text": "and subscribe and if you're serious",
    "start": "24779",
    "end": "26220"
  },
  {
    "text": "about building apps like this consider",
    "start": "26220",
    "end": "27660"
  },
  {
    "text": "becoming a pro member at angular",
    "start": "27660",
    "end": "29099"
  },
  {
    "text": "firebase com",
    "start": "29099",
    "end": "30269"
  },
  {
    "text": "our goal today is to use firestore and",
    "start": "30269",
    "end": "32520"
  },
  {
    "text": "angular google maps to build a real-time",
    "start": "32520",
    "end": "34890"
  },
  {
    "text": "geolocation feature so we'll be able to",
    "start": "34890",
    "end": "37050"
  },
  {
    "text": "say give us all the documents that are",
    "start": "37050",
    "end": "38640"
  },
  {
    "text": "within X kilometers of some center point",
    "start": "38640",
    "end": "40860"
  },
  {
    "text": "and have that query update in real time",
    "start": "40860",
    "end": "43020"
  },
  {
    "text": "but before we get going I have a couple",
    "start": "43020",
    "end": "45270"
  },
  {
    "text": "examples of real-world angular firebase",
    "start": "45270",
    "end": "47370"
  },
  {
    "text": "apps that use geolocation features the",
    "start": "47370",
    "end": "49890"
  },
  {
    "text": "first one is cipher links which was",
    "start": "49890",
    "end": "51390"
  },
  {
    "text": "built by an angular firebase Pro member",
    "start": "51390",
    "end": "53129"
  },
  {
    "text": "and is essentially a LinkedIn for coders",
    "start": "53129",
    "end": "55289"
  },
  {
    "text": "that allows you to find programmers",
    "start": "55289",
    "end": "57149"
  },
  {
    "text": "geographically based on a filtered set",
    "start": "57149",
    "end": "59100"
  },
  {
    "text": "of criteria and the next one is pod",
    "start": "59100",
    "end": "61440"
  },
  {
    "text": "mapped word which is an open source",
    "start": "61440",
    "end": "63180"
  },
  {
    "text": "project using angular and firebase that",
    "start": "63180",
    "end": "65189"
  },
  {
    "text": "allows you to locate podcasts from",
    "start": "65189",
    "end": "67200"
  },
  {
    "text": "around the world",
    "start": "67200",
    "end": "68070"
  },
  {
    "text": "check out those links in the description",
    "start": "68070",
    "end": "69900"
  },
  {
    "text": "but the next thing I want to talk about",
    "start": "69900",
    "end": "71250"
  },
  {
    "text": "is how geo queries actually work because",
    "start": "71250",
    "end": "73560"
  },
  {
    "text": "they're a lot different than a normal",
    "start": "73560",
    "end": "74670"
  },
  {
    "text": "query that you would make in firestore",
    "start": "74670",
    "end": "76520"
  },
  {
    "text": "so we create this fractal pattern where",
    "start": "76520",
    "end": "79080"
  },
  {
    "text": "we have a grid of numbers and letters",
    "start": "79080",
    "end": "80850"
  },
  {
    "text": "that segment the globe then we can build",
    "start": "80850",
    "end": "83369"
  },
  {
    "text": "out a string value by repeating this",
    "start": "83369",
    "end": "85229"
  },
  {
    "text": "pattern over and over again inside of",
    "start": "85229",
    "end": "86939"
  },
  {
    "text": "each cell so every additional character",
    "start": "86939",
    "end": "89310"
  },
  {
    "text": "in the string will be an additional",
    "start": "89310",
    "end": "90659"
  },
  {
    "text": "level of precision for the location",
    "start": "90659",
    "end": "92820"
  },
  {
    "text": "we're going to be saving our geohashes",
    "start": "92820",
    "end": "94829"
  },
  {
    "text": "as 9 characters which is precise to",
    "start": "94829",
    "end": "97229"
  },
  {
    "text": "about four and a half meters squared if",
    "start": "97229",
    "end": "100049"
  },
  {
    "text": "you go to movable-type store you can",
    "start": "100049",
    "end": "102479"
  },
  {
    "text": "explore the bounding boxes for different",
    "start": "102479",
    "end": "104670"
  },
  {
    "text": "geohashes if we want to query firestore",
    "start": "104670",
    "end": "107640"
  },
  {
    "text": "for all of the documents inside of a",
    "start": "107640",
    "end": "109259"
  },
  {
    "text": "single geo hash it's actually pretty",
    "start": "109259",
    "end": "111329"
  },
  {
    "text": "straightforward we can set the starting",
    "start": "111329",
    "end": "113700"
  },
  {
    "text": "point as the Geo hash the endpoint as",
    "start": "113700",
    "end": "115890"
  },
  {
    "text": "the hash plus a high Unicode character",
    "start": "115890",
    "end": "118200"
  },
  {
    "text": "then we can order by the property it has",
    "start": "118200",
    "end": "120149"
  },
  {
    "text": "that hash and then do start at end at",
    "start": "120149",
    "end": "122280"
  },
  {
    "text": "but here's the problem let's imagine",
    "start": "122280",
    "end": "124380"
  },
  {
    "text": "Kathy and Tim our next-door neighbor's",
    "start": "124380",
    "end": "126180"
  },
  {
    "text": "and Tim does a search within this geo",
    "start": "126180",
    "end": "128190"
  },
  {
    "text": "hash even though Kathy's right next door",
    "start": "128190",
    "end": "130140"
  },
  {
    "text": "he's only going to get results inside of",
    "start": "130140",
    "end": "132330"
  },
  {
    "text": "his geo hash",
    "start": "132330",
    "end": "133500"
  },
  {
    "text": "so to get the true results you would",
    "start": "133500",
    "end": "135120"
  },
  {
    "text": "have to get all of the neighboring",
    "start": "135120",
    "end": "136590"
  },
  {
    "text": "geohashes as well and then draw a radius",
    "start": "136590",
    "end": "138810"
  },
  {
    "text": "around them to find anything within that",
    "start": "138810",
    "end": "140610"
  },
  {
    "text": "radius and there's a bunch of other",
    "start": "140610",
    "end": "142440"
  },
  {
    "text": "little edge cases that you'll run into",
    "start": "142440",
    "end": "143820"
  },
  {
    "text": "as well which is why I decided to just",
    "start": "143820",
    "end": "145710"
  },
  {
    "text": "create a library that handles all this",
    "start": "145710",
    "end": "147210"
  },
  {
    "text": "stuff under the hood it's called geo",
    "start": "147210",
    "end": "149550"
  },
  {
    "text": "fire X and it uses rxjs and fire a store",
    "start": "149550",
    "end": "152670"
  },
  {
    "text": "to make these queries possible but don't",
    "start": "152670",
    "end": "154860"
  },
  {
    "text": "worry I didn't do any of the",
    "start": "154860",
    "end": "155670"
  },
  {
    "text": "trigonometry myself I left all that to",
    "start": "155670",
    "end": "157710"
  },
  {
    "text": "an awesome library called turf Jas and",
    "start": "157710",
    "end": "159900"
  },
  {
    "text": "it's compatible with both flat earth and",
    "start": "159900",
    "end": "161700"
  },
  {
    "text": "rounder theories it's also compatible",
    "start": "161700",
    "end": "164010"
  },
  {
    "text": "with any JavaScript framework as long as",
    "start": "164010",
    "end": "166110"
  },
  {
    "text": "it's using firebase in rxjs let's go",
    "start": "166110",
    "end": "168900"
  },
  {
    "text": "ahead and get started from a brand new",
    "start": "168900",
    "end": "170250"
  },
  {
    "text": "angular app and then the first thing",
    "start": "170250",
    "end": "171750"
  },
  {
    "text": "we'll do is install the angular Google",
    "start": "171750",
    "end": "173430"
  },
  {
    "text": "Maps package which is a great component",
    "start": "173430",
    "end": "175290"
  },
  {
    "text": "library if using Google Maps from your",
    "start": "175290",
    "end": "178170"
  },
  {
    "text": "firebase project you can go to the",
    "start": "178170",
    "end": "179700"
  },
  {
    "text": "Google cloud platform console and enable",
    "start": "179700",
    "end": "182100"
  },
  {
    "text": "the Google Maps JavaScript API from",
    "start": "182100",
    "end": "184770"
  },
  {
    "text": "there we can install angular Google Maps",
    "start": "184770",
    "end": "186360"
  },
  {
    "text": "in our app as well as firebase and geo",
    "start": "186360",
    "end": "188670"
  },
  {
    "text": "fire X now at this point if you're using",
    "start": "188670",
    "end": "191100"
  },
  {
    "text": "angular or ionic I would recommend using",
    "start": "191100",
    "end": "193170"
  },
  {
    "text": "the angular fire to library but the bare",
    "start": "193170",
    "end": "195510"
  },
  {
    "text": "minimum thing you need to do is just",
    "start": "195510",
    "end": "196860"
  },
  {
    "text": "initialize a firebase app so that should",
    "start": "196860",
    "end": "199380"
  },
  {
    "text": "look something like this code here then",
    "start": "199380",
    "end": "201330"
  },
  {
    "text": "you'll also want to initialize angular",
    "start": "201330",
    "end": "203070"
  },
  {
    "text": "Google Maps with your API key which you",
    "start": "203070",
    "end": "205140"
  },
  {
    "text": "can do here in the app module now let's",
    "start": "205140",
    "end": "207810"
  },
  {
    "text": "create a basic map with a GM which is",
    "start": "207810",
    "end": "209760"
  },
  {
    "text": "super easy the first thing we want to do",
    "start": "209760",
    "end": "211440"
  },
  {
    "text": "is go into our CSS and make sure we give",
    "start": "211440",
    "end": "213540"
  },
  {
    "text": "it a width and height of something other",
    "start": "213540",
    "end": "215250"
  },
  {
    "text": "than zero otherwise you won't be able to",
    "start": "215250",
    "end": "217260"
  },
  {
    "text": "see the map at all after that we can",
    "start": "217260",
    "end": "219239"
  },
  {
    "text": "just declare an AGM map component and",
    "start": "219239",
    "end": "221370"
  },
  {
    "text": "give it a starting the latitude and",
    "start": "221370",
    "end": "222750"
  },
  {
    "text": "longitude point we can also drop in a",
    "start": "222750",
    "end": "225480"
  },
  {
    "text": "marker and give it a latitude and",
    "start": "225480",
    "end": "227190"
  },
  {
    "text": "longitude as well and that will just pop",
    "start": "227190",
    "end": "229049"
  },
  {
    "text": "up on the map at that point what we'll",
    "start": "229049",
    "end": "231720"
  },
  {
    "text": "do next is loop over a collection of",
    "start": "231720",
    "end": "233250"
  },
  {
    "text": "documents and firestore and render them",
    "start": "233250",
    "end": "235290"
  },
  {
    "text": "on the map as these markers one of the",
    "start": "235290",
    "end": "238170"
  },
  {
    "text": "special thing is that geo Firex does is",
    "start": "238170",
    "end": "240060"
  },
  {
    "text": "that it saves data in a format that can",
    "start": "240060",
    "end": "241860"
  },
  {
    "text": "be queried in order to make geo queries",
    "start": "241860",
    "end": "245220"
  },
  {
    "text": "you need to have an object on the",
    "start": "245220",
    "end": "246750"
  },
  {
    "text": "document that contains a geo hash and a",
    "start": "246750",
    "end": "249180"
  },
  {
    "text": "geo point the library will format this",
    "start": "249180",
    "end": "251760"
  },
  {
    "text": "for you automatically but you can save",
    "start": "251760",
    "end": "253500"
  },
  {
    "text": "multiple geo points on a single document",
    "start": "253500",
    "end": "255120"
  },
  {
    "text": "so you can do geo queries against",
    "start": "255120",
    "end": "256919"
  },
  {
    "text": "multiple parameters so let's go ahead",
    "start": "256919",
    "end": "259530"
  },
  {
    "text": "and make a query against this existing",
    "start": "259530",
    "end": "261299"
  },
  {
    "text": "data set I'm going to go ahead and",
    "start": "261299",
    "end": "262950"
  },
  {
    "text": "import geo Firex as well as our firebase",
    "start": "262950",
    "end": "265470"
  },
  {
    "text": "app",
    "start": "265470",
    "end": "266930"
  },
  {
    "text": "then we can initialize GFI rx by passing",
    "start": "266930",
    "end": "270090"
  },
  {
    "text": "it a reference to our firebase app and",
    "start": "270090",
    "end": "272900"
  },
  {
    "text": "then we'll also declare a property",
    "start": "272900",
    "end": "275129"
  },
  {
    "text": "called points which is an observable of",
    "start": "275129",
    "end": "276900"
  },
  {
    "text": "the actual documents that we query there",
    "start": "276900",
    "end": "280349"
  },
  {
    "text": "are several variables that are needed to",
    "start": "280349",
    "end": "282270"
  },
  {
    "text": "make a geo query the first one is your",
    "start": "282270",
    "end": "284370"
  },
  {
    "text": "center point which can just be a",
    "start": "284370",
    "end": "285750"
  },
  {
    "text": "latitude and longitude you can create a",
    "start": "285750",
    "end": "287909"
  },
  {
    "text": "geo hash with the library by calling the",
    "start": "287909",
    "end": "289800"
  },
  {
    "text": "point method it can do a bunch of other",
    "start": "289800",
    "end": "291599"
  },
  {
    "text": "things like return geo JSON and",
    "start": "291599",
    "end": "293759"
  },
  {
    "text": "calculate distance and bearing and",
    "start": "293759",
    "end": "295590"
  },
  {
    "text": "things like that then the next variable",
    "start": "295590",
    "end": "299189"
  },
  {
    "text": "that you'll need is the radius that",
    "start": "299189",
    "end": "300810"
  },
  {
    "text": "you'll draw around the center point",
    "start": "300810",
    "end": "302430"
  },
  {
    "text": "which will always be in kilometers under",
    "start": "302430",
    "end": "305099"
  },
  {
    "text": "the hood the library uses Turf j s to",
    "start": "305099",
    "end": "307139"
  },
  {
    "text": "calculate the haversine distance which",
    "start": "307139",
    "end": "309180"
  },
  {
    "text": "also takes into account the curvature of",
    "start": "309180",
    "end": "310860"
  },
  {
    "text": "the earth and lastly we need to specify",
    "start": "310860",
    "end": "313259"
  },
  {
    "text": "the object that contains the geo data",
    "start": "313259",
    "end": "315210"
  },
  {
    "text": "because remember a single document can",
    "start": "315210",
    "end": "317550"
  },
  {
    "text": "have multiple geo points that can be",
    "start": "317550",
    "end": "319199"
  },
  {
    "text": "queried against then the next thing we",
    "start": "319199",
    "end": "321300"
  },
  {
    "text": "do is make a reference to the firestore",
    "start": "321300",
    "end": "323099"
  },
  {
    "text": "collection this is just a wrapper for",
    "start": "323099",
    "end": "325050"
  },
  {
    "text": "the main SDK that provides some",
    "start": "325050",
    "end": "326729"
  },
  {
    "text": "additional functionality for geolocation",
    "start": "326729",
    "end": "328669"
  },
  {
    "text": "to perform a geo query you can use",
    "start": "328669",
    "end": "331289"
  },
  {
    "text": "though within method that we'll take in",
    "start": "331289",
    "end": "333270"
  },
  {
    "text": "the center radius and field and that",
    "start": "333270",
    "end": "336210"
  },
  {
    "text": "returns an observable that you can just",
    "start": "336210",
    "end": "337770"
  },
  {
    "text": "subscribe to and it will stay in sync",
    "start": "337770",
    "end": "339629"
  },
  {
    "text": "with any changes that happen in real",
    "start": "339629",
    "end": "341099"
  },
  {
    "text": "time to that collection but because",
    "start": "341099",
    "end": "343469"
  },
  {
    "text": "we're using rxjs we can do this in a",
    "start": "343469",
    "end": "345300"
  },
  {
    "text": "little bit more of a dynamic way for",
    "start": "345300",
    "end": "347580"
  },
  {
    "text": "example let's say the user clicks a",
    "start": "347580",
    "end": "349080"
  },
  {
    "text": "button that will expand the radius to a",
    "start": "349080",
    "end": "351120"
  },
  {
    "text": "different value for that we could set up",
    "start": "351120",
    "end": "354120"
  },
  {
    "text": "the radius as a behavior subject which",
    "start": "354120",
    "end": "356250"
  },
  {
    "text": "itself isn't observable that can happen",
    "start": "356250",
    "end": "358020"
  },
  {
    "text": "new values push to it then we'll define",
    "start": "358020",
    "end": "361259"
  },
  {
    "text": "our observable points as the radius",
    "start": "361259",
    "end": "363629"
  },
  {
    "text": "behavior subject that has then switch",
    "start": "363629",
    "end": "365610"
  },
  {
    "text": "mapped to the actual observable geo",
    "start": "365610",
    "end": "367949"
  },
  {
    "text": "query and I would like to point out that",
    "start": "367949",
    "end": "370620"
  },
  {
    "text": "within returns a hot observable that is",
    "start": "370620",
    "end": "372719"
  },
  {
    "text": "cash to the last value that means you",
    "start": "372719",
    "end": "374639"
  },
  {
    "text": "can have multiple subscribers to it and",
    "start": "374639",
    "end": "376259"
  },
  {
    "text": "you will only be charged for the initial",
    "start": "376259",
    "end": "378000"
  },
  {
    "text": "document read so by setting this up with",
    "start": "378000",
    "end": "380909"
  },
  {
    "text": "a switch map we can now change the",
    "start": "380909",
    "end": "382379"
  },
  {
    "text": "radius and get a whole new query each",
    "start": "382379",
    "end": "384240"
  },
  {
    "text": "time the user clicks a button for",
    "start": "384240",
    "end": "386639"
  },
  {
    "text": "example we just need to call radius next",
    "start": "386639",
    "end": "388560"
  },
  {
    "text": "and everything else will change",
    "start": "388560",
    "end": "389669"
  },
  {
    "text": "reactively now we need to unwrap the",
    "start": "389669",
    "end": "392849"
  },
  {
    "text": "observable of our locations in angular",
    "start": "392849",
    "end": "395849"
  },
  {
    "text": "we can do this very conveniently with",
    "start": "395849",
    "end": "397259"
  },
  {
    "text": "the async pipe but in other frameworks",
    "start": "397259",
    "end": "399149"
  },
  {
    "text": "you'd want to call",
    "start": "399149",
    "end": "400020"
  },
  {
    "text": "subscribe on the observable and handle",
    "start": "400020",
    "end": "402060"
  },
  {
    "text": "it accordingly inside of our AGM marker",
    "start": "402060",
    "end": "405930"
  },
  {
    "text": "we'll do an ng for loop and we'll loop",
    "start": "405930",
    "end": "408210"
  },
  {
    "text": "over each point of points using the",
    "start": "408210",
    "end": "410340"
  },
  {
    "text": "async pipe to unwrap it because it",
    "start": "410340",
    "end": "412710"
  },
  {
    "text": "returns an observable array of document",
    "start": "412710",
    "end": "415199"
  },
  {
    "text": "data this gives us access to all of the",
    "start": "415199",
    "end": "418349"
  },
  {
    "text": "data on each document but it also",
    "start": "418349",
    "end": "420240"
  },
  {
    "text": "returns some additional metadata that's",
    "start": "420240",
    "end": "421979"
  },
  {
    "text": "specifically designed for building",
    "start": "421979",
    "end": "423569"
  },
  {
    "text": "real-time map features for example it",
    "start": "423569",
    "end": "426509"
  },
  {
    "text": "returns the distance and bearing that",
    "start": "426509",
    "end": "428310"
  },
  {
    "text": "this document was found at relative to",
    "start": "428310",
    "end": "430560"
  },
  {
    "text": "the query center point which can only be",
    "start": "430560",
    "end": "432330"
  },
  {
    "text": "figured out at runtime you might query a",
    "start": "432330",
    "end": "434550"
  },
  {
    "text": "collection of restaurants that are",
    "start": "434550",
    "end": "435840"
  },
  {
    "text": "relative to a user's current GPS",
    "start": "435840",
    "end": "437699"
  },
  {
    "text": "position on their phone and the query",
    "start": "437699",
    "end": "439500"
  },
  {
    "text": "metadata gives you the information",
    "start": "439500",
    "end": "440880"
  },
  {
    "text": "needed to show the distance to that",
    "start": "440880",
    "end": "442650"
  },
  {
    "text": "point to the user in the UI and that",
    "start": "442650",
    "end": "445289"
  },
  {
    "text": "will be by default on the query metadata",
    "start": "445289",
    "end": "447599"
  },
  {
    "text": "on the return points I have a premade",
    "start": "447599",
    "end": "450240"
  },
  {
    "text": "demo that I'd use for integration",
    "start": "450240",
    "end": "451889"
  },
  {
    "text": "testing and every point in the document",
    "start": "451889",
    "end": "454229"
  },
  {
    "text": "is a specific distance and bearing from",
    "start": "454229",
    "end": "456419"
  },
  {
    "text": "the center and the actual gray circle is",
    "start": "456419",
    "end": "459120"
  },
  {
    "text": "the radius of the query and if we click",
    "start": "459120",
    "end": "461430"
  },
  {
    "text": "on any of these points we'll also see",
    "start": "461430",
    "end": "462840"
  },
  {
    "text": "that query metadata which again is the",
    "start": "462840",
    "end": "464550"
  },
  {
    "text": "distance and bearing what's really cool",
    "start": "464550",
    "end": "467280"
  },
  {
    "text": "that fire store is everything is just",
    "start": "467280",
    "end": "468960"
  },
  {
    "text": "real time by default so imagine we have",
    "start": "468960",
    "end": "471120"
  },
  {
    "text": "one of these documents that are being",
    "start": "471120",
    "end": "472500"
  },
  {
    "text": "written to every couple of seconds as",
    "start": "472500",
    "end": "474240"
  },
  {
    "text": "the users position moves it will update",
    "start": "474240",
    "end": "476460"
  },
  {
    "text": "in the UI like we see happening here",
    "start": "476460",
    "end": "478080"
  },
  {
    "text": "with the blue marker but as soon as it",
    "start": "478080",
    "end": "480599"
  },
  {
    "text": "falls out of range",
    "start": "480599",
    "end": "481319"
  },
  {
    "text": "it disappears from the query and also",
    "start": "481319",
    "end": "483240"
  },
  {
    "text": "the UI there's a bunch of other little",
    "start": "483240",
    "end": "485099"
  },
  {
    "text": "features that I've added to geo by rx",
    "start": "485099",
    "end": "487020"
  },
  {
    "text": "specifically for working with tools like",
    "start": "487020",
    "end": "488969"
  },
  {
    "text": "map box and Google Maps if you find it",
    "start": "488969",
    "end": "491699"
  },
  {
    "text": "useful make sure to star it and please",
    "start": "491699",
    "end": "493620"
  },
  {
    "text": "report any issues that you encounter",
    "start": "493620",
    "end": "495360"
  },
  {
    "text": "when using it I'm gonna go ahead and",
    "start": "495360",
    "end": "497099"
  },
  {
    "text": "wrap things up there thanks so much for",
    "start": "497099",
    "end": "498779"
  },
  {
    "text": "watching and I'll talk to you soon",
    "start": "498779",
    "end": "502430"
  },
  {
    "text": "[Music]",
    "start": "503520",
    "end": "506649"
  }
]