[
  {
    "text": "go a statically typed compiled language",
    "start": "199",
    "end": "3000"
  },
  {
    "text": "often described as C for the 21st",
    "start": "3000",
    "end": "5560"
  },
  {
    "text": "century it's a popular choice for high",
    "start": "5560",
    "end": "7799"
  },
  {
    "text": "performance serers side applications and",
    "start": "7799",
    "end": "9960"
  },
  {
    "text": "is the language that built tools like",
    "start": "9960",
    "end": "11639"
  },
  {
    "text": "Docker cockroach DB and dgraph it was",
    "start": "11639",
    "end": "14599"
  },
  {
    "text": "created at Google in 2007 by Legends who",
    "start": "14599",
    "end": "17480"
  },
  {
    "text": "really know their stuff like Ken",
    "start": "17480",
    "end": "19000"
  },
  {
    "text": "Thompson the inventor of the B and C",
    "start": "19000",
    "end": "21480"
  },
  {
    "text": "programming languages version 1.0 was",
    "start": "21480",
    "end": "23640"
  },
  {
    "text": "released as open-source software in 2012",
    "start": "23640",
    "end": "26439"
  },
  {
    "text": "it was designed for Simplicity and",
    "start": "26439",
    "end": "28359"
  },
  {
    "text": "efficiency and that's why we call it go",
    "start": "28359",
    "end": "30320"
  },
  {
    "text": "and not go Lang the source code is",
    "start": "30320",
    "end": "32439"
  },
  {
    "text": "compiled down to machine code which",
    "start": "32439",
    "end": "34000"
  },
  {
    "text": "means it generally outperforms",
    "start": "34000",
    "end": "35360"
  },
  {
    "text": "interpreted languages but it's famous",
    "start": "35360",
    "end": "37239"
  },
  {
    "text": "for its extremely fast compile times",
    "start": "37239",
    "end": "39360"
  },
  {
    "text": "made possible by Innovations to",
    "start": "39360",
    "end": "41079"
  },
  {
    "text": "dependency analysis and even though it's",
    "start": "41079",
    "end": "43079"
  },
  {
    "text": "a statically typed language it performs",
    "start": "43079",
    "end": "45200"
  },
  {
    "text": "type inference to deliver a syntax that",
    "start": "45200",
    "end": "47440"
  },
  {
    "text": "is very concise and practical it also",
    "start": "47440",
    "end": "49559"
  },
  {
    "text": "has a package and module system making",
    "start": "49559",
    "end": "51760"
  },
  {
    "text": "it easy to Import and Export code",
    "start": "51760",
    "end": "54120"
  },
  {
    "text": "between projects to get started install",
    "start": "54120",
    "end": "56440"
  },
  {
    "text": "go and then open an empty directory on",
    "start": "56440",
    "end": "58440"
  },
  {
    "text": "your system create a file ending and.go",
    "start": "58440",
    "end": "61199"
  },
  {
    "text": "then add package main at the top to",
    "start": "61199",
    "end": "63519"
  },
  {
    "text": "create a standalone executable then",
    "start": "63519",
    "end": "65840"
  },
  {
    "text": "declare a main function which is where",
    "start": "65840",
    "end": "67720"
  },
  {
    "text": "your program will start executing go has",
    "start": "67720",
    "end": "70119"
  },
  {
    "text": "a standard library of core packages to",
    "start": "70119",
    "end": "72439"
  },
  {
    "text": "handle common requirements like math",
    "start": "72439",
    "end": "74520"
  },
  {
    "text": "networking or formatted IO by importing",
    "start": "74520",
    "end": "77439"
  },
  {
    "text": "fmt we can print a line to the standard",
    "start": "77439",
    "end": "79920"
  },
  {
    "text": "output then run the go build command and",
    "start": "79920",
    "end": "82280"
  },
  {
    "text": "it quickly compiles the source code and",
    "start": "82280",
    "end": "84079"
  },
  {
    "text": "dependencies into an executable binary",
    "start": "84079",
    "end": "86479"
  },
  {
    "text": "when it comes to dependencies we can",
    "start": "86479",
    "end": "88040"
  },
  {
    "text": "also link to remote packages on GitHub",
    "start": "88040",
    "end": "90159"
  },
  {
    "text": "run go mod a knit from the command line",
    "start": "90159",
    "end": "92360"
  },
  {
    "text": "and that creates a go module file that",
    "start": "92360",
    "end": "94200"
  },
  {
    "text": "enables dependency tracking",
    "start": "94200",
    "end": "95799"
  },
  {
    "text": "syntactically go is like a concise",
    "start": "95799",
    "end": "97759"
  },
  {
    "text": "version of C or C++ declare a variable",
    "start": "97759",
    "end": "100799"
  },
  {
    "text": "with the VAR keyword followed by its",
    "start": "100799",
    "end": "102600"
  },
  {
    "text": "name and type and initialize it with a",
    "start": "102600",
    "end": "104840"
  },
  {
    "text": "value or you might use the short",
    "start": "104840",
    "end": "106360"
  },
  {
    "text": "assignment syntax to replace VAR and let",
    "start": "106360",
    "end": "108799"
  },
  {
    "text": "go automatically infer the type and you",
    "start": "108799",
    "end": "111000"
  },
  {
    "text": "can Define multiple variables from a",
    "start": "111000",
    "end": "112680"
  },
  {
    "text": "single line go has all the other",
    "start": "112680",
    "end": "114360"
  },
  {
    "text": "features you would expect in a",
    "start": "114360",
    "end": "115439"
  },
  {
    "text": "programming language like arrays Maps",
    "start": "115439",
    "end": "117399"
  },
  {
    "text": "loops and control flow but also allows",
    "start": "117399",
    "end": "119479"
  },
  {
    "text": "you to store the memory address of a",
    "start": "119479",
    "end": "121159"
  },
  {
    "text": "value using pointers while disallowing",
    "start": "121159",
    "end": "123320"
  },
  {
    "text": "pointer arithmetic which often leads to",
    "start": "123320",
    "end": "125479"
  },
  {
    "text": "dangerous and unpredictable behavior in",
    "start": "125479",
    "end": "127759"
  },
  {
    "text": "addition it supports concurrency with go",
    "start": "127759",
    "end": "130000"
  },
  {
    "text": "routines which are functions that can",
    "start": "130000",
    "end": "131640"
  },
  {
    "text": "run at the same time as other functions",
    "start": "131640",
    "end": "133800"
  },
  {
    "text": "by utilizing multiple threads on a CPU",
    "start": "133800",
    "end": "136519"
  },
  {
    "text": "this has been go in 100 seconds hit the",
    "start": "136519",
    "end": "138840"
  },
  {
    "text": "like button if you want to see more",
    "start": "138840",
    "end": "139959"
  },
  {
    "text": "short videos like this and check out the",
    "start": "139959",
    "end": "141640"
  },
  {
    "text": "full article to write your first 100",
    "start": "141640",
    "end": "143440"
  },
  {
    "text": "lines of go on fireship iio thanks for",
    "start": "143440",
    "end": "145720"
  },
  {
    "text": "watching and I will see you in the next",
    "start": "145720",
    "end": "147599"
  },
  {
    "text": "one",
    "start": "147599",
    "end": "150599"
  }
]