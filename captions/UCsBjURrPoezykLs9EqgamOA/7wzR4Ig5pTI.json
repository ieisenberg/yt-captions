[
  {
    "text": "graph QL a query language for AP is you",
    "start": "0",
    "end": "3360"
  },
  {
    "text": "define a schema for your data then tell",
    "start": "3360",
    "end": "5310"
  },
  {
    "text": "graph QL how to fetch and supply that",
    "start": "5310",
    "end": "7140"
  },
  {
    "text": "schema and in doing so amazing things",
    "start": "7140",
    "end": "9360"
  },
  {
    "text": "might happen as we'll see in this video",
    "start": "9360",
    "end": "10830"
  },
  {
    "text": "and 9 ignition sequence start in today's",
    "start": "10830",
    "end": "15809"
  },
  {
    "text": "video you'll learn the fundamental",
    "start": "15809",
    "end": "17160"
  },
  {
    "text": "concepts of graph QL by interacting with",
    "start": "17160",
    "end": "19230"
  },
  {
    "text": "the public space X API if you're new",
    "start": "19230",
    "end": "21720"
  },
  {
    "text": "here like and subscribe and I'd like to",
    "start": "21720",
    "end": "23279"
  },
  {
    "text": "give a special thanks to Arjun ulam and",
    "start": "23279",
    "end": "25109"
  },
  {
    "text": "Shelley who is the mastermind behind",
    "start": "25109",
    "end": "26640"
  },
  {
    "text": "this video if you're looking for a graph",
    "start": "26640",
    "end": "28529"
  },
  {
    "text": "QL expert you can find his LinkedIn and",
    "start": "28529",
    "end": "30630"
  },
  {
    "text": "github in the description below let's",
    "start": "30630",
    "end": "32250"
  },
  {
    "text": "start by answering the question of what",
    "start": "32250",
    "end": "34110"
  },
  {
    "text": "is graph QL in the most basic sense it's",
    "start": "34110",
    "end": "36809"
  },
  {
    "text": "a language that allows your front-end",
    "start": "36809",
    "end": "38370"
  },
  {
    "text": "applications to communicate with your",
    "start": "38370",
    "end": "40140"
  },
  {
    "text": "back-end applications a rosetta stone if",
    "start": "40140",
    "end": "42450"
  },
  {
    "text": "you will a consistent way for your",
    "start": "42450",
    "end": "44190"
  },
  {
    "text": "front-end to request data from your",
    "start": "44190",
    "end": "45690"
  },
  {
    "text": "back-end despite any differences in the",
    "start": "45690",
    "end": "47670"
  },
  {
    "text": "underlying programming language for",
    "start": "47670",
    "end": "49500"
  },
  {
    "text": "example you're a mobile application",
    "start": "49500",
    "end": "50820"
  },
  {
    "text": "might need to request a sandwich from",
    "start": "50820",
    "end": "53070"
  },
  {
    "text": "your API it can make that request by",
    "start": "53070",
    "end": "55350"
  },
  {
    "text": "sending a graph QL query the query will",
    "start": "55350",
    "end": "58289"
  },
  {
    "text": "have the same shape that you expect to",
    "start": "58289",
    "end": "59850"
  },
  {
    "text": "receive back from the API as JSON so in",
    "start": "59850",
    "end": "62910"
  },
  {
    "text": "this case we expect a sandwich object",
    "start": "62910",
    "end": "64860"
  },
  {
    "text": "with bread ham and cheese on the server",
    "start": "64860",
    "end": "67350"
  },
  {
    "text": "graph QL also functions as a runtime for",
    "start": "67350",
    "end": "69930"
  },
  {
    "text": "executing queries the server defines",
    "start": "69930",
    "end": "71880"
  },
  {
    "text": "types for the data that's available",
    "start": "71880",
    "end": "73080"
  },
  {
    "text": "there and also resolvers to actually",
    "start": "73080",
    "end": "75659"
  },
  {
    "text": "fetch the data from a database or some",
    "start": "75659",
    "end": "77580"
  },
  {
    "text": "other data source now because everything",
    "start": "77580",
    "end": "79890"
  },
  {
    "text": "on the server is strongly typed we can",
    "start": "79890",
    "end": "81720"
  },
  {
    "text": "get some really amazing tooling with",
    "start": "81720",
    "end": "83100"
  },
  {
    "text": "graph QL to demonstrate this let's head",
    "start": "83100",
    "end": "85500"
  },
  {
    "text": "over to the graph QL Explorer for the",
    "start": "85500",
    "end": "87360"
  },
  {
    "text": "public space X API if you're the",
    "start": "87360",
    "end": "89460"
  },
  {
    "text": "consumer or using the API in your",
    "start": "89460",
    "end": "91200"
  },
  {
    "text": "front-end application you can do",
    "start": "91200",
    "end": "92759"
  },
  {
    "text": "introspection to the backend to see what",
    "start": "92759",
    "end": "94890"
  },
  {
    "text": "data is available there as you can see",
    "start": "94890",
    "end": "96869"
  },
  {
    "text": "here we have a whole bunch of different",
    "start": "96869",
    "end": "98130"
  },
  {
    "text": "checkboxes that represent different",
    "start": "98130",
    "end": "99869"
  },
  {
    "text": "queries we can make to the space X API",
    "start": "99869",
    "end": "102090"
  },
  {
    "text": "in the middle panel we already have an",
    "start": "102090",
    "end": "104399"
  },
  {
    "text": "example graph ul query ready to go now",
    "start": "104399",
    "end": "106799"
  },
  {
    "text": "go ahead and hit the play button to",
    "start": "106799",
    "end": "108000"
  },
  {
    "text": "execute the query and then you'll see on",
    "start": "108000",
    "end": "109829"
  },
  {
    "text": "the right side we get a JSON payload",
    "start": "109829",
    "end": "111960"
  },
  {
    "text": "returned from the server and what you'll",
    "start": "111960",
    "end": "113850"
  },
  {
    "text": "notice is that the properties on this",
    "start": "113850",
    "end": "115619"
  },
  {
    "text": "JSON object are identical to the way we",
    "start": "115619",
    "end": "117990"
  },
  {
    "text": "structured them in our graph QL query",
    "start": "117990",
    "end": "119729"
  },
  {
    "text": "and on top of that everything is",
    "start": "119729",
    "end": "121770"
  },
  {
    "text": "strongly typed if we hover over a field",
    "start": "121770",
    "end": "123899"
  },
  {
    "text": "in our graph QL query you can see that",
    "start": "123899",
    "end": "125880"
  },
  {
    "text": "it gives us a type there are several",
    "start": "125880",
    "end": "127619"
  },
  {
    "text": "built-in types like string integer etc",
    "start": "127619",
    "end": "130110"
  },
  {
    "text": "and the server can also define its own",
    "start": "130110",
    "end": "132150"
  },
  {
    "text": "custom types so when working with",
    "start": "132150",
    "end": "134550"
  },
  {
    "text": "QL as a front-end developer you'll",
    "start": "134550",
    "end": "136170"
  },
  {
    "text": "always know the exact shape of the data",
    "start": "136170",
    "end": "137760"
  },
  {
    "text": "that you're expecting back from the",
    "start": "137760",
    "end": "139410"
  },
  {
    "text": "server and speaking of that let's take a",
    "start": "139410",
    "end": "141570"
  },
  {
    "text": "second to look at the differences",
    "start": "141570",
    "end": "142950"
  },
  {
    "text": "between REST API s and graph QL api's",
    "start": "142950",
    "end": "145530"
  },
  {
    "text": "rest stands for representational state",
    "start": "145530",
    "end": "148200"
  },
  {
    "text": "transfer and it's the status quo for API",
    "start": "148200",
    "end": "150750"
  },
  {
    "text": "design that we've been following for the",
    "start": "150750",
    "end": "152340"
  },
  {
    "text": "last 20 years now let's say our",
    "start": "152340",
    "end": "154260"
  },
  {
    "text": "front-end application wants to make a",
    "start": "154260",
    "end": "155520"
  },
  {
    "text": "sandwich and rest we might make three",
    "start": "155520",
    "end": "157710"
  },
  {
    "text": "different requests one for bread ham and",
    "start": "157710",
    "end": "159990"
  },
  {
    "text": "cheese each request is mapped to its own",
    "start": "159990",
    "end": "162420"
  },
  {
    "text": "unique URL and each response from the",
    "start": "162420",
    "end": "164490"
  },
  {
    "text": "server would contain the full JSON",
    "start": "164490",
    "end": "166290"
  },
  {
    "text": "payload with everything that we need",
    "start": "166290",
    "end": "167790"
  },
  {
    "text": "like the full loaf of bread a full Pig",
    "start": "167790",
    "end": "169860"
  },
  {
    "text": "and a full wedge of cheese even though",
    "start": "169860",
    "end": "172200"
  },
  {
    "text": "our front-end application doesn't",
    "start": "172200",
    "end": "173370"
  },
  {
    "text": "necessarily need all that data we can",
    "start": "173370",
    "end": "175110"
  },
  {
    "text": "just filter it out in the front-end code",
    "start": "175110",
    "end": "176750"
  },
  {
    "text": "now in graph QL world things are quite a",
    "start": "176750",
    "end": "179580"
  },
  {
    "text": "bit different instead of having multiple",
    "start": "179580",
    "end": "181230"
  },
  {
    "text": "URL endpoints we just have a single",
    "start": "181230",
    "end": "183450"
  },
  {
    "text": "entry point into the API so it's the",
    "start": "183450",
    "end": "186000"
  },
  {
    "text": "actual query sent from the front end",
    "start": "186000",
    "end": "187560"
  },
  {
    "text": "that determines what the back end will",
    "start": "187560",
    "end": "189120"
  },
  {
    "text": "return it's not based on a URL or any",
    "start": "189120",
    "end": "191520"
  },
  {
    "text": "specific mapping like that in addition",
    "start": "191520",
    "end": "194070"
  },
  {
    "text": "the graph QL API will only return the",
    "start": "194070",
    "end": "196410"
  },
  {
    "text": "actual fields that were requested",
    "start": "196410",
    "end": "198090"
  },
  {
    "text": "instead of requesting ingredients one by",
    "start": "198090",
    "end": "200190"
  },
  {
    "text": "one we just get the full sandwich all",
    "start": "200190",
    "end": "202080"
  },
  {
    "text": "put together now let's say we also want",
    "start": "202080",
    "end": "204120"
  },
  {
    "text": "to add a side salad and a drink to this",
    "start": "204120",
    "end": "206190"
  },
  {
    "text": "query in graph QL it's a simple matter",
    "start": "206190",
    "end": "208470"
  },
  {
    "text": "of updating the query but in rest we",
    "start": "208470",
    "end": "210480"
  },
  {
    "text": "would likely have to make at least two",
    "start": "210480",
    "end": "211830"
  },
  {
    "text": "more requests to two different unique",
    "start": "211830",
    "end": "213420"
  },
  {
    "text": "URLs to get this data the beauty of",
    "start": "213420",
    "end": "215640"
  },
  {
    "text": "graph QL is that it simplifies the way",
    "start": "215640",
    "end": "217350"
  },
  {
    "text": "you request data from your front-end",
    "start": "217350",
    "end": "218760"
  },
  {
    "text": "code",
    "start": "218760",
    "end": "219180"
  },
  {
    "text": "so obviously graph QL is way better than",
    "start": "219180",
    "end": "221340"
  },
  {
    "text": "rest and you should never use rest ever",
    "start": "221340",
    "end": "223140"
  },
  {
    "text": "again right well it's really not that",
    "start": "223140",
    "end": "225390"
  },
  {
    "text": "simple",
    "start": "225390",
    "end": "225810"
  },
  {
    "text": "while graph QL provides a lot of",
    "start": "225810",
    "end": "227190"
  },
  {
    "text": "advantages there are some disadvantages",
    "start": "227190",
    "end": "228989"
  },
  {
    "text": "as well the biggest disadvantage in my",
    "start": "228989",
    "end": "231209"
  },
  {
    "text": "opinion is that there is some added",
    "start": "231209",
    "end": "232739"
  },
  {
    "text": "complexity up front you can build a",
    "start": "232739",
    "end": "234840"
  },
  {
    "text": "restful service with Express j/s with",
    "start": "234840",
    "end": "236850"
  },
  {
    "text": "like five lines of code but with graph",
    "start": "236850",
    "end": "238590"
  },
  {
    "text": "QL you have some additional dependencies",
    "start": "238590",
    "end": "239910"
  },
  {
    "text": "a type system and the benefits might not",
    "start": "239910",
    "end": "242640"
  },
  {
    "text": "be that substantial if you're a small",
    "start": "242640",
    "end": "244290"
  },
  {
    "text": "team or have a relatively simple API the",
    "start": "244290",
    "end": "246690"
  },
  {
    "text": "benefits of graph QL really kick in when",
    "start": "246690",
    "end": "248610"
  },
  {
    "text": "you have multiple developers working",
    "start": "248610",
    "end": "249900"
  },
  {
    "text": "with a large API that needs to map",
    "start": "249900",
    "end": "252000"
  },
  {
    "text": "together a whole bunch of different",
    "start": "252000",
    "end": "253230"
  },
  {
    "text": "back-end data sources in any case graph",
    "start": "253230",
    "end": "255870"
  },
  {
    "text": "QL is very fun to work with as a",
    "start": "255870",
    "end": "257280"
  },
  {
    "text": "developer so let's go ahead and play",
    "start": "257280",
    "end": "259140"
  },
  {
    "text": "around with some queries to space X",
    "start": "259140",
    "end": "260730"
  },
  {
    "text": "let's go ahead and delete the default",
    "start": "260730",
    "end": "262530"
  },
  {
    "text": "and then we'll make a query for all of",
    "start": "262530",
    "end": "264630"
  },
  {
    "text": "the rockets in space X click the box for",
    "start": "264630",
    "end": "267030"
  },
  {
    "text": "Rockets and then",
    "start": "267030",
    "end": "268230"
  },
  {
    "text": "you hover over rockets you'll notice",
    "start": "268230",
    "end": "269790"
  },
  {
    "text": "that it returns a query of an array of",
    "start": "269790",
    "end": "272160"
  },
  {
    "text": "rockets a rocket is a custom type",
    "start": "272160",
    "end": "274650"
  },
  {
    "text": "defined by the server and if we click on",
    "start": "274650",
    "end": "276510"
  },
  {
    "text": "it we can see all the different data",
    "start": "276510",
    "end": "278070"
  },
  {
    "text": "properties available there and then we",
    "start": "278070",
    "end": "279960"
  },
  {
    "text": "can simply click the checkboxes for the",
    "start": "279960",
    "end": "281850"
  },
  {
    "text": "properties that we want returned from",
    "start": "281850",
    "end": "283410"
  },
  {
    "text": "this query and what you'll also notice",
    "start": "283410",
    "end": "285390"
  },
  {
    "text": "is that queries can take arguments in",
    "start": "285390",
    "end": "287220"
  },
  {
    "text": "this case we can set a limit to a",
    "start": "287220",
    "end": "289170"
  },
  {
    "text": "specific number of rockets or we can",
    "start": "289170",
    "end": "290970"
  },
  {
    "text": "offset it if we're doing pagination so",
    "start": "290970",
    "end": "293520"
  },
  {
    "text": "now that we have a list of rockets let's",
    "start": "293520",
    "end": "295140"
  },
  {
    "text": "go ahead and copy one of the IDS and",
    "start": "295140",
    "end": "296850"
  },
  {
    "text": "make a request for an individual rocket",
    "start": "296850",
    "end": "298980"
  },
  {
    "text": "go ahead and click the rocket box and",
    "start": "298980",
    "end": "301110"
  },
  {
    "text": "you'll notice this query takes an ID as",
    "start": "301110",
    "end": "303150"
  },
  {
    "text": "its argument and simply select the",
    "start": "303150",
    "end": "305220"
  },
  {
    "text": "properties that you want to read on the",
    "start": "305220",
    "end": "306840"
  },
  {
    "text": "rocket object and that's really all",
    "start": "306840",
    "end": "308700"
  },
  {
    "text": "there is to it when it comes to fetching",
    "start": "308700",
    "end": "310260"
  },
  {
    "text": "data from a graph QL API but there are a",
    "start": "310260",
    "end": "312780"
  },
  {
    "text": "couple more advanced things that you",
    "start": "312780",
    "end": "314160"
  },
  {
    "text": "should know about you can reuse values",
    "start": "314160",
    "end": "316290"
  },
  {
    "text": "throughout your queries by using",
    "start": "316290",
    "end": "317520"
  },
  {
    "text": "variables which you'll see prefixed with",
    "start": "317520",
    "end": "319350"
  },
  {
    "text": "a dollar sign but sometimes you might",
    "start": "319350",
    "end": "321720"
  },
  {
    "text": "actually want to change the query",
    "start": "321720",
    "end": "323070"
  },
  {
    "text": "entirely based on the value of a",
    "start": "323070",
    "end": "324780"
  },
  {
    "text": "variable for example you can see we have",
    "start": "324780",
    "end": "327120"
  },
  {
    "text": "this glutton free variable so we might",
    "start": "327120",
    "end": "328950"
  },
  {
    "text": "not want to include bread if that option",
    "start": "328950",
    "end": "331110"
  },
  {
    "text": "is set to true so if the gluten-free",
    "start": "331110",
    "end": "332670"
  },
  {
    "text": "boolean is true then it will include",
    "start": "332670",
    "end": "334470"
  },
  {
    "text": "bread on this order but that's not",
    "start": "334470",
    "end": "336390"
  },
  {
    "text": "exactly right so let's go ahead and do",
    "start": "336390",
    "end": "338010"
  },
  {
    "text": "the exact opposite with the skip",
    "start": "338010",
    "end": "339660"
  },
  {
    "text": "directive to exclude bread if it's set",
    "start": "339660",
    "end": "341940"
  },
  {
    "text": "to true and it's also possible that your",
    "start": "341940",
    "end": "344850"
  },
  {
    "text": "graph QL schema has a certain property",
    "start": "344850",
    "end": "346920"
  },
  {
    "text": "that returns multiple types or a union",
    "start": "346920",
    "end": "349230"
  },
  {
    "text": "type for example our sandwich might come",
    "start": "349230",
    "end": "351600"
  },
  {
    "text": "with a side and that side might either",
    "start": "351600",
    "end": "353220"
  },
  {
    "text": "be french fries or a salad if it's a",
    "start": "353220",
    "end": "355500"
  },
  {
    "text": "salad if then we might want to return",
    "start": "355500",
    "end": "357030"
  },
  {
    "text": "the dressing field and if it's french",
    "start": "357030",
    "end": "358770"
  },
  {
    "text": "fries then we might want to return the",
    "start": "358770",
    "end": "360450"
  },
  {
    "text": "side field so as a front-end developer",
    "start": "360450",
    "end": "362550"
  },
  {
    "text": "graph QL gives you a lot of flexibility",
    "start": "362550",
    "end": "364740"
  },
  {
    "text": "for structuring your queries and then",
    "start": "364740",
    "end": "366510"
  },
  {
    "text": "it's up to your back-end developers to",
    "start": "366510",
    "end": "367920"
  },
  {
    "text": "write the code to resolve the queries",
    "start": "367920",
    "end": "369450"
  },
  {
    "text": "which tends to be the more difficult",
    "start": "369450",
    "end": "370980"
  },
  {
    "text": "part in addition to reading data by",
    "start": "370980",
    "end": "373050"
  },
  {
    "text": "making queries you might also want to",
    "start": "373050",
    "end": "374730"
  },
  {
    "text": "write data or modify data on the server",
    "start": "374730",
    "end": "376830"
  },
  {
    "text": "by using a mutation a mutation works",
    "start": "376830",
    "end": "379710"
  },
  {
    "text": "just like a query but it's a convention",
    "start": "379710",
    "end": "381360"
  },
  {
    "text": "that signals that some data will be",
    "start": "381360",
    "end": "383280"
  },
  {
    "text": "modified on the server so now that you",
    "start": "383280",
    "end": "385410"
  },
  {
    "text": "know the basics of graph QL I want to",
    "start": "385410",
    "end": "387210"
  },
  {
    "text": "show you how to put it to use in an",
    "start": "387210",
    "end": "388650"
  },
  {
    "text": "actual real-world front-end application",
    "start": "388650",
    "end": "390510"
  },
  {
    "text": "the most popular way to work with graph",
    "start": "390510",
    "end": "392310"
  },
  {
    "text": "QL from a front-end application is to",
    "start": "392310",
    "end": "394410"
  },
  {
    "text": "use the Apollo client it's essentially a",
    "start": "394410",
    "end": "396570"
  },
  {
    "text": "state management library that allows you",
    "start": "396570",
    "end": "398580"
  },
  {
    "text": "to write graph QL queries then see the",
    "start": "398580",
    "end": "400740"
  },
  {
    "text": "results automatically update",
    "start": "400740",
    "end": "402000"
  },
  {
    "text": "in your UI Apollo has integrations for",
    "start": "402000",
    "end": "404610"
  },
  {
    "text": "all the major JavaScript frameworks like",
    "start": "404610",
    "end": "406350"
  },
  {
    "text": "angular react view etc including vanilla",
    "start": "406350",
    "end": "409050"
  },
  {
    "text": "web components and also native platforms",
    "start": "409050",
    "end": "411180"
  },
  {
    "text": "like iOS and Android what I want to show",
    "start": "411180",
    "end": "413670"
  },
  {
    "text": "you over the next few minutes is a",
    "start": "413670",
    "end": "414840"
  },
  {
    "text": "practical example combining Apollo graph",
    "start": "414840",
    "end": "417450"
  },
  {
    "text": "QL and angular our goal is to create a",
    "start": "417450",
    "end": "419910"
  },
  {
    "text": "simple web app that will fetch the",
    "start": "419910",
    "end": "421500"
  },
  {
    "text": "recent launches from SpaceX and when we",
    "start": "421500",
    "end": "423930"
  },
  {
    "text": "click on a specific launch it will take",
    "start": "423930",
    "end": "425550"
  },
  {
    "text": "us to the details for that launch along",
    "start": "425550",
    "end": "427410"
  },
  {
    "text": "with some pictures now as I mentioned",
    "start": "427410",
    "end": "429690"
  },
  {
    "text": "earlier one of the big advantages of",
    "start": "429690",
    "end": "431160"
  },
  {
    "text": "graph QL is the awesome tooling that it",
    "start": "431160",
    "end": "433140"
  },
  {
    "text": "provides and when combined with",
    "start": "433140",
    "end": "434370"
  },
  {
    "text": "typescript it gets even better you'll",
    "start": "434370",
    "end": "436440"
  },
  {
    "text": "also learn how to convert your graph QL",
    "start": "436440",
    "end": "438120"
  },
  {
    "text": "API into a series of interfaces that you",
    "start": "438120",
    "end": "440669"
  },
  {
    "text": "can use directly in your front-end",
    "start": "440669",
    "end": "442050"
  },
  {
    "text": "application so when you combine angular",
    "start": "442050",
    "end": "444180"
  },
  {
    "text": "with graph QL you get end and type",
    "start": "444180",
    "end": "445950"
  },
  {
    "text": "safety providing an amazing developer",
    "start": "445950",
    "end": "447870"
  },
  {
    "text": "experience you can see here I'm in a",
    "start": "447870",
    "end": "450090"
  },
  {
    "text": "brand new angular app and the first",
    "start": "450090",
    "end": "451530"
  },
  {
    "text": "thing I want to do is install the Apollo",
    "start": "451530",
    "end": "453510"
  },
  {
    "text": "graph QL extension for vs code it",
    "start": "453510",
    "end": "456210"
  },
  {
    "text": "provides syntax highlighting and",
    "start": "456210",
    "end": "457650"
  },
  {
    "text": "everything else you need to work with",
    "start": "457650",
    "end": "459030"
  },
  {
    "text": "graph QL and vs code from there we'll go",
    "start": "459030",
    "end": "461430"
  },
  {
    "text": "to the root of the project and create a",
    "start": "461430",
    "end": "463080"
  },
  {
    "text": "new file called Apollo config KS this",
    "start": "463080",
    "end": "466890"
  },
  {
    "text": "will tell Apollo where to find our",
    "start": "466890",
    "end": "468419"
  },
  {
    "text": "back-end API which in this case should",
    "start": "468419",
    "end": "470280"
  },
  {
    "text": "point to the public space X API the next",
    "start": "470280",
    "end": "472950"
  },
  {
    "text": "step is to generate a couple of",
    "start": "472950",
    "end": "474240"
  },
  {
    "text": "components that we can use for the",
    "start": "474240",
    "end": "475740"
  },
  {
    "text": "screens in this app we have a ListView",
    "start": "475740",
    "end": "477840"
  },
  {
    "text": "that will show all the recent launches",
    "start": "477840",
    "end": "479340"
  },
  {
    "text": "from SpaceX and then also a detailed",
    "start": "479340",
    "end": "481470"
  },
  {
    "text": "view we can generate these components",
    "start": "481470",
    "end": "483479"
  },
  {
    "text": "with the angular CLI and we'll also set",
    "start": "483479",
    "end": "485850"
  },
  {
    "text": "the change detection to on push which is",
    "start": "485850",
    "end": "488310"
  },
  {
    "text": "just a little performance optimization",
    "start": "488310",
    "end": "489990"
  },
  {
    "text": "that we can use here because with Apollo",
    "start": "489990",
    "end": "491760"
  },
  {
    "text": "and graph QL the only thing that we",
    "start": "491760",
    "end": "493410"
  },
  {
    "text": "actually need to do is subscribe to",
    "start": "493410",
    "end": "495030"
  },
  {
    "text": "observables for our data so we don't",
    "start": "495030",
    "end": "497040"
  },
  {
    "text": "need to use angular's built-in change",
    "start": "497040",
    "end": "498479"
  },
  {
    "text": "detection the next thing we'll do is",
    "start": "498479",
    "end": "500340"
  },
  {
    "text": "jump into the app routing module and set",
    "start": "500340",
    "end": "502740"
  },
  {
    "text": "up routes for these actual components",
    "start": "502740",
    "end": "504570"
  },
  {
    "text": "we'll set the route route to our launch",
    "start": "504570",
    "end": "506610"
  },
  {
    "text": "list component that's the default route",
    "start": "506610",
    "end": "508470"
  },
  {
    "text": "that user lands on then if they click on",
    "start": "508470",
    "end": "510390"
  },
  {
    "text": "one of the launch cards it will take",
    "start": "510390",
    "end": "512190"
  },
  {
    "text": "them to a URL parameter with that ID and",
    "start": "512190",
    "end": "514770"
  },
  {
    "text": "show additional details about that",
    "start": "514770",
    "end": "516120"
  },
  {
    "text": "specific launch that takes care of our",
    "start": "516120",
    "end": "518159"
  },
  {
    "text": "routing configuration now let's go into",
    "start": "518159",
    "end": "520110"
  },
  {
    "text": "the app component and delete all of the",
    "start": "520110",
    "end": "522000"
  },
  {
    "text": "boilerplate code that comes with a",
    "start": "522000",
    "end": "523349"
  },
  {
    "text": "default angular app just make sure to",
    "start": "523349",
    "end": "525270"
  },
  {
    "text": "leave the router outlet and now we're",
    "start": "525270",
    "end": "527610"
  },
  {
    "text": "ready to write our first graph QL query",
    "start": "527610",
    "end": "529500"
  },
  {
    "text": "and the reason I want to do this first",
    "start": "529500",
    "end": "531330"
  },
  {
    "text": "is because as you'll see in a minute",
    "start": "531330",
    "end": "532680"
  },
  {
    "text": "here we can use the query to",
    "start": "532680",
    "end": "534240"
  },
  {
    "text": "automatically generate",
    "start": "534240",
    "end": "535240"
  },
  {
    "text": "angular services interfaces and",
    "start": "535240",
    "end": "537399"
  },
  {
    "text": "basically everything else we need to",
    "start": "537399",
    "end": "538899"
  },
  {
    "text": "work with our back-end data go into the",
    "start": "538899",
    "end": "541450"
  },
  {
    "text": "launch list component and create a new",
    "start": "541450",
    "end": "543310"
  },
  {
    "text": "file called launch list graph QL now",
    "start": "543310",
    "end": "545980"
  },
  {
    "text": "unlike the interactive editor we'll",
    "start": "545980",
    "end": "547720"
  },
  {
    "text": "start out our query by writing the query",
    "start": "547720",
    "end": "549490"
  },
  {
    "text": "keyword and then we can give that a name",
    "start": "549490",
    "end": "551290"
  },
  {
    "text": "called past launches list and we'll have",
    "start": "551290",
    "end": "553510"
  },
  {
    "text": "it take a parameter called limit which",
    "start": "553510",
    "end": "555370"
  },
  {
    "text": "will take an integer argument and the",
    "start": "555370",
    "end": "557620"
  },
  {
    "text": "exclamation mark after the type makes it",
    "start": "557620",
    "end": "559480"
  },
  {
    "text": "required then inside the query we'll",
    "start": "559480",
    "end": "561670"
  },
  {
    "text": "write some graph QL code just like we",
    "start": "561670",
    "end": "563410"
  },
  {
    "text": "did earlier in the video",
    "start": "563410",
    "end": "564459"
  },
  {
    "text": "we'll make a reference to the launches",
    "start": "564459",
    "end": "566560"
  },
  {
    "text": "past query that's provided by SpaceX and",
    "start": "566560",
    "end": "568660"
  },
  {
    "text": "then we'll pass in our limit argument",
    "start": "568660",
    "end": "570459"
  },
  {
    "text": "from there we'll add the actual fields",
    "start": "570459",
    "end": "572529"
  },
  {
    "text": "that we want for each individual launch",
    "start": "572529",
    "end": "574180"
  },
  {
    "text": "object like the idea mission name links",
    "start": "574180",
    "end": "577180"
  },
  {
    "text": "to some images and so on so this defines",
    "start": "577180",
    "end": "579730"
  },
  {
    "text": "all the data that we want to show in our",
    "start": "579730",
    "end": "581380"
  },
  {
    "text": "launch list component and now we'll move",
    "start": "581380",
    "end": "583660"
  },
  {
    "text": "over to our launch details component and",
    "start": "583660",
    "end": "585399"
  },
  {
    "text": "do the same thing by creating a launch",
    "start": "585399",
    "end": "587230"
  },
  {
    "text": "details graph QL file one thing you'll",
    "start": "587230",
    "end": "589720"
  },
  {
    "text": "notice on this query is that we have a",
    "start": "589720",
    "end": "591220"
  },
  {
    "text": "required type of ID the ID type works",
    "start": "591220",
    "end": "593980"
  },
  {
    "text": "just like a string except that it",
    "start": "593980",
    "end": "595510"
  },
  {
    "text": "signals that it's a unique value and we",
    "start": "595510",
    "end": "597850"
  },
  {
    "text": "can pass that ID to the launch query in",
    "start": "597850",
    "end": "599620"
  },
  {
    "text": "graph QL and then filter by the fields",
    "start": "599620",
    "end": "601839"
  },
  {
    "text": "that we actually want from the API so",
    "start": "601839",
    "end": "604270"
  },
  {
    "text": "now that we have our graph QL queries in",
    "start": "604270",
    "end": "605920"
  },
  {
    "text": "place we can generate a whole bunch of",
    "start": "605920",
    "end": "607720"
  },
  {
    "text": "code automatically the first thing we'll",
    "start": "607720",
    "end": "609880"
  },
  {
    "text": "need to do is integrate Apollo into this",
    "start": "609880",
    "end": "611800"
  },
  {
    "text": "project so head over to the command line",
    "start": "611800",
    "end": "613720"
  },
  {
    "text": "and run ng add Apollo angular this",
    "start": "613720",
    "end": "617020"
  },
  {
    "text": "command will install our Apollo",
    "start": "617020",
    "end": "618399"
  },
  {
    "text": "dependencies and also create a graph QL",
    "start": "618399",
    "end": "620800"
  },
  {
    "text": "module in the app directory go ahead and",
    "start": "620800",
    "end": "623680"
  },
  {
    "text": "open up that file and tell it where to",
    "start": "623680",
    "end": "625660"
  },
  {
    "text": "find the graph QL API by modifying this",
    "start": "625660",
    "end": "628209"
  },
  {
    "text": "URI variable so that takes care of the",
    "start": "628209",
    "end": "630459"
  },
  {
    "text": "setup for Apollo but we want to generate",
    "start": "630459",
    "end": "632500"
  },
  {
    "text": "a lot of our code automatically as",
    "start": "632500",
    "end": "634060"
  },
  {
    "text": "opposed to writing it manually",
    "start": "634060",
    "end": "635560"
  },
  {
    "text": "the tool that can help us do that is the",
    "start": "635560",
    "end": "637600"
  },
  {
    "text": "graph QL code generator this is a really",
    "start": "637600",
    "end": "639790"
  },
  {
    "text": "awesome tool that you can use on both",
    "start": "639790",
    "end": "641260"
  },
  {
    "text": "the backend and front-end to look at",
    "start": "641260",
    "end": "643240"
  },
  {
    "text": "your graph QL schema and then",
    "start": "643240",
    "end": "644680"
  },
  {
    "text": "automatically generate typescript",
    "start": "644680",
    "end": "646089"
  },
  {
    "text": "interfaces and in our case angular",
    "start": "646089",
    "end": "647950"
  },
  {
    "text": "services that can fetch the data from",
    "start": "647950",
    "end": "649690"
  },
  {
    "text": "the backend we have this big long",
    "start": "649690",
    "end": "651430"
  },
  {
    "text": "install command and you can copy and",
    "start": "651430",
    "end": "653110"
  },
  {
    "text": "paste that from the lesson repo once",
    "start": "653110",
    "end": "655810"
  },
  {
    "text": "those are installed we'll create a code",
    "start": "655810",
    "end": "657490"
  },
  {
    "text": "gen Yama file in the root of the project",
    "start": "657490",
    "end": "659260"
  },
  {
    "text": "this simply tells the code generator",
    "start": "659260",
    "end": "661390"
  },
  {
    "text": "where to find our graph QL files and",
    "start": "661390",
    "end": "663370"
  },
  {
    "text": "what to generate once it finds them and",
    "start": "663370",
    "end": "665430"
  },
  {
    "text": "now that we have that configuration in",
    "start": "665430",
    "end": "667660"
  },
  {
    "text": "place we just need a commander",
    "start": "667660",
    "end": "669230"
  },
  {
    "text": "that will actually run the generator we",
    "start": "669230",
    "end": "671540"
  },
  {
    "text": "can do that by going into the",
    "start": "671540",
    "end": "672740"
  },
  {
    "text": "package.json and going into these",
    "start": "672740",
    "end": "674690"
  },
  {
    "text": "scripts will create a new command called",
    "start": "674690",
    "end": "676700"
  },
  {
    "text": "cogent that runs the generator then we",
    "start": "676700",
    "end": "679340"
  },
  {
    "text": "can open up the terminal and run that",
    "start": "679340",
    "end": "680810"
  },
  {
    "text": "command and you'll see it generates a",
    "start": "680810",
    "end": "682520"
  },
  {
    "text": "new directory called services with a",
    "start": "682520",
    "end": "684350"
  },
  {
    "text": "service that we can use to fetch data",
    "start": "684350",
    "end": "686210"
  },
  {
    "text": "from the graph QL API now the cool thing",
    "start": "686210",
    "end": "688520"
  },
  {
    "text": "about the code generator is that it",
    "start": "688520",
    "end": "689990"
  },
  {
    "text": "looked at the actual schema of the",
    "start": "689990",
    "end": "691370"
  },
  {
    "text": "SpaceX API and also our local graph QL",
    "start": "691370",
    "end": "694070"
  },
  {
    "text": "queries and combine the two together so",
    "start": "694070",
    "end": "696740"
  },
  {
    "text": "we now have an angular service that has",
    "start": "696740",
    "end": "698630"
  },
  {
    "text": "all the interfaces from the SpaceX API",
    "start": "698630",
    "end": "700730"
  },
  {
    "text": "and also methods to fetch the data that",
    "start": "700730",
    "end": "703490"
  },
  {
    "text": "we actually want based on our own local",
    "start": "703490",
    "end": "705260"
  },
  {
    "text": "graph QL queries that was quite a bit of",
    "start": "705260",
    "end": "707720"
  },
  {
    "text": "configuration to get started but now",
    "start": "707720",
    "end": "709400"
  },
  {
    "text": "that we have that done we really only",
    "start": "709400",
    "end": "711020"
  },
  {
    "text": "have to focus on writing components and",
    "start": "711020",
    "end": "712910"
  },
  {
    "text": "writing graph QL queries now let's go",
    "start": "712910",
    "end": "715250"
  },
  {
    "text": "ahead and finish things up by writing",
    "start": "715250",
    "end": "716480"
  },
  {
    "text": "the components for the user interface to",
    "start": "716480",
    "end": "718430"
  },
  {
    "text": "make things look nice I'll go ahead and",
    "start": "718430",
    "end": "720380"
  },
  {
    "text": "add angular material to this project by",
    "start": "720380",
    "end": "722300"
  },
  {
    "text": "running ng ad at angular material and",
    "start": "722300",
    "end": "724580"
  },
  {
    "text": "then in the app component I'll import",
    "start": "724580",
    "end": "726980"
  },
  {
    "text": "the material card module from there I'm",
    "start": "726980",
    "end": "729920"
  },
  {
    "text": "going to head over to the launch list",
    "start": "729920",
    "end": "731600"
  },
  {
    "text": "component type script and the first",
    "start": "731600",
    "end": "733280"
  },
  {
    "text": "thing I'll do is inject the past",
    "start": "733280",
    "end": "734930"
  },
  {
    "text": "launches service in the constructor",
    "start": "734930",
    "end": "736670"
  },
  {
    "text": "remember this service was automatically",
    "start": "736670",
    "end": "738530"
  },
  {
    "text": "generated by the code generator the",
    "start": "738530",
    "end": "740840"
  },
  {
    "text": "service is able to fetch the past",
    "start": "740840",
    "end": "742430"
  },
  {
    "text": "launches from SpaceX by using the fetch",
    "start": "742430",
    "end": "744470"
  },
  {
    "text": "method and then we can pass in a limit",
    "start": "744470",
    "end": "746360"
  },
  {
    "text": "argument and set it to 30 the response",
    "start": "746360",
    "end": "749330"
  },
  {
    "text": "is going to have some additional data",
    "start": "749330",
    "end": "750710"
  },
  {
    "text": "that we don't really need so what we'll",
    "start": "750710",
    "end": "752390"
  },
  {
    "text": "do is pipe in the map operator and then",
    "start": "752390",
    "end": "754640"
  },
  {
    "text": "we'll just map the response down to the",
    "start": "754640",
    "end": "756410"
  },
  {
    "text": "actual data that we want to show in the",
    "start": "756410",
    "end": "758030"
  },
  {
    "text": "UI which in this case will be the",
    "start": "758030",
    "end": "759980"
  },
  {
    "text": "response data launches past now if we go",
    "start": "759980",
    "end": "762830"
  },
  {
    "text": "into the template we can unwrap the past",
    "start": "762830",
    "end": "764990"
  },
  {
    "text": "launches observable by using the async",
    "start": "764990",
    "end": "767060"
  },
  {
    "text": "pipe and then we'll set the result as a",
    "start": "767060",
    "end": "768950"
  },
  {
    "text": "template variable called past launches",
    "start": "768950",
    "end": "771400"
  },
  {
    "text": "the past launches will be an array of",
    "start": "771400",
    "end": "773900"
  },
  {
    "text": "launch objects so we can simply loop",
    "start": "773900",
    "end": "776150"
  },
  {
    "text": "over them using the ng for directive and",
    "start": "776150",
    "end": "778280"
  },
  {
    "text": "angular that will give us a material",
    "start": "778280",
    "end": "780530"
  },
  {
    "text": "card for each individual launch and then",
    "start": "780530",
    "end": "782720"
  },
  {
    "text": "we can add a router link that will point",
    "start": "782720",
    "end": "784550"
  },
  {
    "text": "to that specific launch ID so when the",
    "start": "784550",
    "end": "786860"
  },
  {
    "text": "user clicks on a card it will route them",
    "start": "786860",
    "end": "788690"
  },
  {
    "text": "to the launch details component and then",
    "start": "788690",
    "end": "791090"
  },
  {
    "text": "everything after that is pretty standard",
    "start": "791090",
    "end": "792620"
  },
  {
    "text": "angular templating will display a",
    "start": "792620",
    "end": "794390"
  },
  {
    "text": "material cart header with an image and",
    "start": "794390",
    "end": "796400"
  },
  {
    "text": "then a title and a subtitle at this",
    "start": "796400",
    "end": "798950"
  },
  {
    "text": "point you should be able to run ng serve",
    "start": "798950",
    "end": "800780"
  },
  {
    "text": "from the terminal and then open up local",
    "start": "800780",
    "end": "802819"
  },
  {
    "text": "4,200 and see a list of launches from",
    "start": "802819",
    "end": "805279"
  },
  {
    "text": "the SpaceX API now at this point when",
    "start": "805279",
    "end": "807919"
  },
  {
    "text": "you click on an actual item it will take",
    "start": "807919",
    "end": "809600"
  },
  {
    "text": "you to the launch details component but",
    "start": "809600",
    "end": "811459"
  },
  {
    "text": "we haven't actually built that one out",
    "start": "811459",
    "end": "812660"
  },
  {
    "text": "yet so let's go ahead and do that now go",
    "start": "812660",
    "end": "815269"
  },
  {
    "text": "ahead and open up the launch details",
    "start": "815269",
    "end": "816679"
  },
  {
    "text": "component type script and then we'll",
    "start": "816679",
    "end": "818509"
  },
  {
    "text": "import activated route from angular",
    "start": "818509",
    "end": "820249"
  },
  {
    "text": "router and also our launch details graph",
    "start": "820249",
    "end": "822829"
  },
  {
    "text": "QL service and then we'll go ahead and",
    "start": "822829",
    "end": "825410"
  },
  {
    "text": "inject those and the constructor the",
    "start": "825410",
    "end": "827419"
  },
  {
    "text": "reason we need activated route is",
    "start": "827419",
    "end": "828979"
  },
  {
    "text": "because our graph QL query takes an ID",
    "start": "828979",
    "end": "831109"
  },
  {
    "text": "as its argument and we get that ID from",
    "start": "831109",
    "end": "833509"
  },
  {
    "text": "the URL in the browser angular provides",
    "start": "833509",
    "end": "835970"
  },
  {
    "text": "all of the URL parameters as an",
    "start": "835970",
    "end": "837589"
  },
  {
    "text": "observable which we can access on the",
    "start": "837589",
    "end": "839539"
  },
  {
    "text": "activated route per a map when we have",
    "start": "839539",
    "end": "842029"
  },
  {
    "text": "that observable we want to switch to an",
    "start": "842029",
    "end": "844189"
  },
  {
    "text": "observable of the actual data from graph",
    "start": "844189",
    "end": "846169"
  },
  {
    "text": "QL that's a perfect use case for the",
    "start": "846169",
    "end": "848479"
  },
  {
    "text": "rxjs switch map operator in other words",
    "start": "848479",
    "end": "851359"
  },
  {
    "text": "once we have the ID parameter from the",
    "start": "851359",
    "end": "853220"
  },
  {
    "text": "URL we'll go ahead and switch to another",
    "start": "853220",
    "end": "855350"
  },
  {
    "text": "observable which in this case is the",
    "start": "855350",
    "end": "857209"
  },
  {
    "text": "launch detail service fetch of that",
    "start": "857209",
    "end": "859100"
  },
  {
    "text": "specific ID and then like we did in the",
    "start": "859100",
    "end": "861410"
  },
  {
    "text": "previous example we'll go ahead and map",
    "start": "861410",
    "end": "863209"
  },
  {
    "text": "the response down just to the raw data",
    "start": "863209",
    "end": "865309"
  },
  {
    "text": "because we don't need any of the",
    "start": "865309",
    "end": "866689"
  },
  {
    "text": "additional metadata that comes back with",
    "start": "866689",
    "end": "868249"
  },
  {
    "text": "the response and then also like we did",
    "start": "868249",
    "end": "870649"
  },
  {
    "text": "in the previous example we'll unwrap the",
    "start": "870649",
    "end": "872389"
  },
  {
    "text": "observable at the top of the file by",
    "start": "872389",
    "end": "874129"
  },
  {
    "text": "using the async pipe and then we'll set",
    "start": "874129",
    "end": "876019"
  },
  {
    "text": "a template variable as launch details",
    "start": "876019",
    "end": "877959"
  },
  {
    "text": "and from there we simply add some HTML",
    "start": "877959",
    "end": "880939"
  },
  {
    "text": "for the UI and interpolate the values",
    "start": "880939",
    "end": "882829"
  },
  {
    "text": "that we want to show to the user and",
    "start": "882829",
    "end": "884629"
  },
  {
    "text": "keep in mind I am using a few custom CSS",
    "start": "884629",
    "end": "887539"
  },
  {
    "text": "Styles here you can find those in the",
    "start": "887539",
    "end": "889249"
  },
  {
    "text": "full lesson repo and if we go back to",
    "start": "889249",
    "end": "891409"
  },
  {
    "text": "our app you'll notice that when we click",
    "start": "891409",
    "end": "892850"
  },
  {
    "text": "on a launch it will show the actual",
    "start": "892850",
    "end": "894499"
  },
  {
    "text": "launch details and some additional",
    "start": "894499",
    "end": "895850"
  },
  {
    "text": "photos in the detail page",
    "start": "895850",
    "end": "898239"
  },
  {
    "text": "congratulations you now have a full",
    "start": "898239",
    "end": "900019"
  },
  {
    "text": "stack Apollo graph QL powered angular",
    "start": "900019",
    "end": "902509"
  },
  {
    "text": "app now if you want some extra credit",
    "start": "902509",
    "end": "904399"
  },
  {
    "text": "I'd recommend going to the full lesson",
    "start": "904399",
    "end": "906019"
  },
  {
    "text": "repo give it a star and check out the",
    "start": "906019",
    "end": "908299"
  },
  {
    "text": "extra credit section at the very end",
    "start": "908299",
    "end": "909829"
  },
  {
    "text": "it'll show you how to build an angular",
    "start": "909829",
    "end": "911959"
  },
  {
    "text": "pipe that will format the actual dates",
    "start": "911959",
    "end": "913999"
  },
  {
    "text": "of the launches in relative time for",
    "start": "913999",
    "end": "916159"
  },
  {
    "text": "example it will say a launch occurred 10",
    "start": "916159",
    "end": "918109"
  },
  {
    "text": "seconds ago yesterday 5 days ago and so",
    "start": "918109",
    "end": "920809"
  },
  {
    "text": "on I'm gonna go ahead and wrap things up",
    "start": "920809",
    "end": "922699"
  },
  {
    "text": "there if this video helped you please",
    "start": "922699",
    "end": "924199"
  },
  {
    "text": "like and subscribe and consider becoming",
    "start": "924199",
    "end": "926059"
  },
  {
    "text": "a pro member at fire ship IO to get",
    "start": "926059",
    "end": "928339"
  },
  {
    "text": "access to even more",
    "start": "928339",
    "end": "929550"
  },
  {
    "text": "thanks for watching and I will talk to",
    "start": "929550",
    "end": "931740"
  },
  {
    "text": "you soon five four three two one zero",
    "start": "931740",
    "end": "937250"
  },
  {
    "text": "all engine running",
    "start": "937250",
    "end": "940910"
  },
  {
    "text": "[Music]",
    "start": "943910",
    "end": "948839"
  }
]