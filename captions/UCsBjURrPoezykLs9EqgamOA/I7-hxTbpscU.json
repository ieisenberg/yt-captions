[
  {
    "text": "Scola a highlevel statically typed",
    "start": "240",
    "end": "2800"
  },
  {
    "text": "programming language famous for fusing",
    "start": "2800",
    "end": "5120"
  },
  {
    "text": "objectoriented and functional",
    "start": "5120",
    "end": "6799"
  },
  {
    "text": "programming paradigms together in a",
    "start": "6799",
    "end": "8639"
  },
  {
    "text": "clean concise syntax it was designed in",
    "start": "8639",
    "end": "10800"
  },
  {
    "text": "Switzerland by computer scientist Martin",
    "start": "10800",
    "end": "12719"
  },
  {
    "text": "ODI and first released in ' 04 the name",
    "start": "12719",
    "end": "15160"
  },
  {
    "text": "Scola means scalable language and it's",
    "start": "15160",
    "end": "17439"
  },
  {
    "text": "lived up to that name by powering the",
    "start": "17439",
    "end": "19160"
  },
  {
    "text": "large scale analytics engine Apache",
    "start": "19160",
    "end": "21080"
  },
  {
    "text": "spark the large scale social media",
    "start": "21080",
    "end": "22920"
  },
  {
    "text": "platforms of X and Linkedin and",
    "start": "22920",
    "end": "24880"
  },
  {
    "text": "large-scale genomics projects like atom",
    "start": "24880",
    "end": "27240"
  },
  {
    "text": "it's one of many jvm languages that",
    "start": "27240",
    "end": "29279"
  },
  {
    "text": "compile to code to run on the Java",
    "start": "29279",
    "end": "31359"
  },
  {
    "text": "virtual machine it can interupt with",
    "start": "31359",
    "end": "33239"
  },
  {
    "text": "Java and use Java libraries but what it",
    "start": "33239",
    "end": "35640"
  },
  {
    "text": "doesn't have is Java's boilerplate no",
    "start": "35640",
    "end": "37680"
  },
  {
    "text": "static void main string args just to say",
    "start": "37680",
    "end": "39960"
  },
  {
    "text": "hello world but most importantly it gets",
    "start": "39960",
    "end": "42120"
  },
  {
    "text": "functional by making no distinction",
    "start": "42120",
    "end": "44160"
  },
  {
    "text": "between statements and expressions",
    "start": "44160",
    "end": "46039"
  },
  {
    "text": "everything is a value that means every",
    "start": "46039",
    "end": "48120"
  },
  {
    "text": "if statement or for Loop can be assigned",
    "start": "48120",
    "end": "50000"
  },
  {
    "text": "to a variable when combined with type",
    "start": "50000",
    "end": "51879"
  },
  {
    "text": "inference the end result is concise",
    "start": "51879",
    "end": "54039"
  },
  {
    "text": "expressive and safe code and it provides",
    "start": "54039",
    "end": "56199"
  },
  {
    "text": "features like higher order functions",
    "start": "56199",
    "end": "58079"
  },
  {
    "text": "null safety pattern matching and",
    "start": "58079",
    "end": "60199"
  },
  {
    "text": "algebraic data types that dramatically",
    "start": "60199",
    "end": "62079"
  },
  {
    "text": "reduce the amount of pain you'll suffer",
    "start": "62079",
    "end": "63680"
  },
  {
    "text": "as a Java developer to get started",
    "start": "63680",
    "end": "65478"
  },
  {
    "text": "you'll first want to install the jvm and",
    "start": "65479",
    "end": "67360"
  },
  {
    "text": "then the skulla compiler from there",
    "start": "67360",
    "end": "69040"
  },
  {
    "text": "we'll create an SBT file which is",
    "start": "69040",
    "end": "70840"
  },
  {
    "text": "scola's build tool and includes metadata",
    "start": "70840",
    "end": "72920"
  },
  {
    "text": "about the application and then we'll",
    "start": "72920",
    "end": "74360"
  },
  {
    "text": "write the actual code in a DOT Scola",
    "start": "74360",
    "end": "76159"
  },
  {
    "text": "file just like in Java we can create a",
    "start": "76159",
    "end": "78200"
  },
  {
    "text": "class and then inside that class Define",
    "start": "78200",
    "end": "80079"
  },
  {
    "text": "a main function we can also Define a",
    "start": "80079",
    "end": "81880"
  },
  {
    "text": "trait to apply a type interface to this",
    "start": "81880",
    "end": "84159"
  },
  {
    "text": "class or by changing the class keyword",
    "start": "84159",
    "end": "86000"
  },
  {
    "text": "to object we automatically create a",
    "start": "86000",
    "end": "88040"
  },
  {
    "text": "Singleton it looks like typical o P but",
    "start": "88040",
    "end": "90520"
  },
  {
    "text": "here's where things get weird any",
    "start": "90520",
    "end": "92000"
  },
  {
    "text": "variable declared with vow is immutable",
    "start": "92000",
    "end": "94040"
  },
  {
    "text": "and most data structures in the standard",
    "start": "94040",
    "end": "95600"
  },
  {
    "text": "Library like list are also immutable",
    "start": "95600",
    "end": "97759"
  },
  {
    "text": "although it is possible to make values",
    "start": "97759",
    "end": "99439"
  },
  {
    "text": "mutable with VAR and notice how the type",
    "start": "99439",
    "end": "101520"
  },
  {
    "text": "is automatically inferred as an integer",
    "start": "101520",
    "end": "103560"
  },
  {
    "text": "although it could be made explicit now",
    "start": "103560",
    "end": "105280"
  },
  {
    "text": "everything is a value so if we have an",
    "start": "105280",
    "end": "107119"
  },
  {
    "text": "if statement like this we can assign it",
    "start": "107119",
    "end": "108960"
  },
  {
    "text": "to a variable like that that's cool but",
    "start": "108960",
    "end": "111040"
  },
  {
    "text": "if you're a Java developer you've likely",
    "start": "111040",
    "end": "112680"
  },
  {
    "text": "been tortured by null pointer exceptions",
    "start": "112680",
    "end": "114840"
  },
  {
    "text": "this bad code example is trying to cast",
    "start": "114840",
    "end": "116960"
  },
  {
    "text": "null as an integer which could lead to",
    "start": "116960",
    "end": "118840"
  },
  {
    "text": "runtime errors but in skola you can use",
    "start": "118840",
    "end": "121240"
  },
  {
    "text": "the option type which itself is a monab",
    "start": "121240",
    "end": "123719"
  },
  {
    "text": "to safely represent an object of some or",
    "start": "123719",
    "end": "126200"
  },
  {
    "text": "none without the need to write annoying",
    "start": "126200",
    "end": "127920"
  },
  {
    "text": "null checks in your code furthermore",
    "start": "127920",
    "end": "129879"
  },
  {
    "text": "higher order functions like flatmap",
    "start": "129879",
    "end": "131800"
  },
  {
    "text": "allow us to transform the output of the",
    "start": "131800",
    "end": "133840"
  },
  {
    "text": "original function by passing a function",
    "start": "133840",
    "end": "136160"
  },
  {
    "text": "as an argument in this case an anonymous",
    "start": "136160",
    "end": "138280"
  },
  {
    "text": "function but it could easily be passed",
    "start": "138280",
    "end": "140040"
  },
  {
    "text": "by name as well but there's more monads",
    "start": "140040",
    "end": "142160"
  },
  {
    "text": "you should know about either represents",
    "start": "142160",
    "end": "143959"
  },
  {
    "text": "one of two possible types like left or",
    "start": "143959",
    "end": "146200"
  },
  {
    "text": "right a triy represents a computation",
    "start": "146200",
    "end": "148480"
  },
  {
    "text": "that might throw an exception and future",
    "start": "148480",
    "end": "150599"
  },
  {
    "text": "represents an asynchronous value that",
    "start": "150599",
    "end": "152599"
  },
  {
    "text": "might resolve in the future and when you",
    "start": "152599",
    "end": "154519"
  },
  {
    "text": "combine these types with pattern",
    "start": "154519",
    "end": "155760"
  },
  {
    "text": "matching you get concise readable and",
    "start": "155760",
    "end": "158200"
  },
  {
    "text": "scalable code if this has been schola in",
    "start": "158200",
    "end": "160720"
  },
  {
    "text": "100 seconds but if your goal is to",
    "start": "160720",
    "end": "162280"
  },
  {
    "text": "master a functional programming language",
    "start": "162280",
    "end": "164040"
  },
  {
    "text": "you'll need a strong foundation in math",
    "start": "164040",
    "end": "166080"
  },
  {
    "text": "and problem solving and you can start",
    "start": "166080",
    "end": "167640"
  },
  {
    "text": "building that Foundation today thanks to",
    "start": "167640",
    "end": "169440"
  },
  {
    "text": "this video sponsor brilliant their",
    "start": "169440",
    "end": "171280"
  },
  {
    "text": "platform helps you build critical",
    "start": "171280",
    "end": "172640"
  },
  {
    "text": "thinking skills through problem solving",
    "start": "172640",
    "end": "174440"
  },
  {
    "text": "not memorizing which is a method proven",
    "start": "174440",
    "end": "176400"
  },
  {
    "text": "to be six times more effective than",
    "start": "176400",
    "end": "178080"
  },
  {
    "text": "watching lecture videos becoming a a",
    "start": "178080",
    "end": "179959"
  },
  {
    "text": "proficient programmer is not about",
    "start": "179959",
    "end": "181440"
  },
  {
    "text": "memorizing syntax it's all about",
    "start": "181440",
    "end": "183159"
  },
  {
    "text": "critical thinking and problem solving",
    "start": "183159",
    "end": "185040"
  },
  {
    "text": "and by practicing with short interactive",
    "start": "185040",
    "end": "187000"
  },
  {
    "text": "exercises every day you'll quickly gain",
    "start": "187000",
    "end": "188920"
  },
  {
    "text": "a deeper understanding of the",
    "start": "188920",
    "end": "190440"
  },
  {
    "text": "mathematical Concepts behind functional",
    "start": "190440",
    "end": "192519"
  },
  {
    "text": "programming and you can even do the",
    "start": "192519",
    "end": "194040"
  },
  {
    "text": "exercises from your phone to try",
    "start": "194040",
    "end": "195799"
  },
  {
    "text": "everything brilliant has to offer for",
    "start": "195799",
    "end": "197319"
  },
  {
    "text": "free for 30 days head over to",
    "start": "197319",
    "end": "199200"
  },
  {
    "text": "brilliant.org fhip or scan this QR code",
    "start": "199200",
    "end": "202360"
  },
  {
    "text": "for 20% off a premium annual",
    "start": "202360",
    "end": "204480"
  },
  {
    "text": "subscription thanks for watching and I",
    "start": "204480",
    "end": "206319"
  },
  {
    "text": "will see you in the next one",
    "start": "206319",
    "end": "209680"
  }
]