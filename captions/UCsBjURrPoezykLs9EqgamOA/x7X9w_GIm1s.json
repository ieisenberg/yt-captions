[
  {
    "start": "0",
    "end": "12000"
  },
  {
    "text": "python a highlevel interpreted",
    "start": "160",
    "end": "2360"
  },
  {
    "text": "programming language famous for its",
    "start": "2360",
    "end": "4240"
  },
  {
    "text": "zen-like code it's arguably the most",
    "start": "4240",
    "end": "6440"
  },
  {
    "text": "popular language in the world because",
    "start": "6440",
    "end": "8120"
  },
  {
    "text": "it's easy to learn yet practical for",
    "start": "8120",
    "end": "10320"
  },
  {
    "text": "serious projects in fact you're watching",
    "start": "10320",
    "end": "12519"
  },
  {
    "start": "12000",
    "end": "30000"
  },
  {
    "text": "this YouTube video in a python web",
    "start": "12519",
    "end": "14559"
  },
  {
    "text": "application right now it was created by",
    "start": "14559",
    "end": "16320"
  },
  {
    "text": "Guido van rossom and released in 1991",
    "start": "16320",
    "end": "19039"
  },
  {
    "text": "who named it after Monty Python's Flying",
    "start": "19039",
    "end": "21199"
  },
  {
    "text": "Circus which is why you'll sometimes",
    "start": "21199",
    "end": "22880"
  },
  {
    "text": "find spaming eggs instead of Foo and bar",
    "start": "22880",
    "end": "25240"
  },
  {
    "text": "and code samples it's commonly used to",
    "start": "25240",
    "end": "27279"
  },
  {
    "text": "build serers side applications like web",
    "start": "27279",
    "end": "29279"
  },
  {
    "text": "apps with the framework and is the",
    "start": "29279",
    "end": "31119"
  },
  {
    "start": "30000",
    "end": "47000"
  },
  {
    "text": "language of choice for Big Data analysis",
    "start": "31119",
    "end": "33480"
  },
  {
    "text": "and machine learning many students",
    "start": "33480",
    "end": "35120"
  },
  {
    "text": "choose python to start learning decode",
    "start": "35120",
    "end": "37160"
  },
  {
    "text": "because of its emphasis on readability",
    "start": "37160",
    "end": "39120"
  },
  {
    "text": "as outlined by the Zen of python",
    "start": "39120",
    "end": "41239"
  },
  {
    "text": "beautiful is better than ugly while",
    "start": "41239",
    "end": "43039"
  },
  {
    "text": "explicit is better than implicit python",
    "start": "43039",
    "end": "45280"
  },
  {
    "text": "is very simple but avoids the temptation",
    "start": "45280",
    "end": "47239"
  },
  {
    "start": "47000",
    "end": "59000"
  },
  {
    "text": "to sprinkle in Magic that causes",
    "start": "47239",
    "end": "49160"
  },
  {
    "text": "ambiguity its code is often organized",
    "start": "49160",
    "end": "51440"
  },
  {
    "text": "into notebooks where individual cells",
    "start": "51440",
    "end": "53359"
  },
  {
    "text": "can be executed then documented in the",
    "start": "53359",
    "end": "55600"
  },
  {
    "text": "same place we're currently at version",
    "start": "55600",
    "end": "57320"
  },
  {
    "text": "three of the language and you can get",
    "start": "57320",
    "end": "58800"
  },
  {
    "text": "started by creating a file that ends in",
    "start": "58800",
    "end": "61079"
  },
  {
    "text": "py or iynb to create an interactive",
    "start": "61079",
    "end": "64119"
  },
  {
    "text": "notebook create a variable by setting a",
    "start": "64119",
    "end": "66320"
  },
  {
    "text": "name equal to a value it's strongly",
    "start": "66320",
    "end": "68400"
  },
  {
    "text": "typed which means values won't change in",
    "start": "68400",
    "end": "70080"
  },
  {
    "text": "unexpected ways but Dynamic so type",
    "start": "70080",
    "end": "72400"
  },
  {
    "text": "annotations are not required the syntax",
    "start": "72400",
    "end": "74400"
  },
  {
    "text": "is highly efficient allowing you to",
    "start": "74400",
    "end": "76159"
  },
  {
    "text": "declare multiple variables on a single",
    "start": "76159",
    "end": "77840"
  },
  {
    "text": "line and Define tupal lists and",
    "start": "77840",
    "end": "80000"
  },
  {
    "text": "dictionaries with a literal syntax",
    "start": "80000",
    "end": "82000"
  },
  {
    "text": "semicolons are not required and if you",
    "start": "82000",
    "end": "83799"
  },
  {
    "text": "use them and experience pythonista will",
    "start": "83799",
    "end": "86040"
  },
  {
    "text": "say that your code is not pythonic",
    "start": "86040",
    "end": "87880"
  },
  {
    "text": "instead of semicolons python uses",
    "start": "87880",
    "end": "90000"
  },
  {
    "text": "indentation to terminate or determine",
    "start": "90000",
    "end": "92159"
  },
  {
    "text": "the scope of a line of code Define a",
    "start": "92159",
    "end": "94040"
  },
  {
    "text": "function with the def keyword then",
    "start": "94040",
    "end": "95680"
  },
  {
    "text": "indent the next line usually by four",
    "start": "95680",
    "end": "97560"
  },
  {
    "text": "spaces to define the function body we",
    "start": "97560",
    "end": "99720"
  },
  {
    "text": "might then add a for Loop to it and",
    "start": "99720",
    "end": "101200"
  },
  {
    "text": "indent that by another four spaces this",
    "start": "101200",
    "end": "103520"
  },
  {
    "text": "eliminates the need for curly braces and",
    "start": "103520",
    "end": "105479"
  },
  {
    "text": "semicolons found in many other languages",
    "start": "105479",
    "end": "107759"
  },
  {
    "text": "python is a multiparadigm language we",
    "start": "107759",
    "end": "109759"
  },
  {
    "text": "can apply functional programming",
    "start": "109759",
    "end": "111040"
  },
  {
    "text": "patterns with things like Anonymous",
    "start": "111040",
    "end": "112640"
  },
  {
    "text": "functions using Lambda it also uses",
    "start": "112640",
    "end": "114759"
  },
  {
    "text": "objects as an abstraction for data",
    "start": "114759",
    "end": "116640"
  },
  {
    "text": "allowing you to implement objectoriented",
    "start": "116640",
    "end": "118600"
  },
  {
    "text": "patterns with things like classes and",
    "start": "118600",
    "end": "120439"
  },
  {
    "text": "inheritance it also has a huge ecosystem",
    "start": "120439",
    "end": "123079"
  },
  {
    "start": "122000",
    "end": "143000"
  },
  {
    "text": "of thirdparty libraries such as deep",
    "start": "123079",
    "end": "125119"
  },
  {
    "text": "learning Frameworks like tensorflow and",
    "start": "125119",
    "end": "127039"
  },
  {
    "text": "rappers for many high performance",
    "start": "127039",
    "end": "128599"
  },
  {
    "text": "low-level packages like open computer",
    "start": "128599",
    "end": "130679"
  },
  {
    "text": "vision which are most often installed",
    "start": "130679",
    "end": "132520"
  },
  {
    "text": "with the PIP package manager this has",
    "start": "132520",
    "end": "134519"
  },
  {
    "text": "been the Python programming language in",
    "start": "134519",
    "end": "136560"
  },
  {
    "text": "100 seconds hit the like button if you",
    "start": "136560",
    "end": "138040"
  },
  {
    "text": "want to see more short videos like this",
    "start": "138040",
    "end": "139760"
  },
  {
    "text": "thanks for watching and I will see you",
    "start": "139760",
    "end": "141640"
  },
  {
    "text": "in the next one",
    "start": "141640",
    "end": "145160"
  }
]