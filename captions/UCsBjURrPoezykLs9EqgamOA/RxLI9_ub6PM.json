[
  {
    "text": "router guards are used in angular to",
    "start": "210",
    "end": "2760"
  },
  {
    "text": "prevent unauthorized users from",
    "start": "2760",
    "end": "4410"
  },
  {
    "text": "navigating anywhere they want in your",
    "start": "4410",
    "end": "6420"
  },
  {
    "text": "app at this point our app has a working",
    "start": "6420",
    "end": "9059"
  },
  {
    "text": "fire based authentication system but any",
    "start": "9059",
    "end": "12090"
  },
  {
    "text": "visitor can access routes intended only",
    "start": "12090",
    "end": "14400"
  },
  {
    "text": "for logged in users guards handled this",
    "start": "14400",
    "end": "17220"
  },
  {
    "text": "problem by implementing the can activate",
    "start": "17220",
    "end": "19800"
  },
  {
    "text": "interface which tells angular whether or",
    "start": "19800",
    "end": "22439"
  },
  {
    "text": "not to activate a certain route in this",
    "start": "22439",
    "end": "25170"
  },
  {
    "text": "example we will protect pages from",
    "start": "25170",
    "end": "27830"
  },
  {
    "text": "unauthenticated users and redirect them",
    "start": "27830",
    "end": "30420"
  },
  {
    "text": "to a sign-in page we use the CLI and",
    "start": "30420",
    "end": "36450"
  },
  {
    "text": "angular 4 to generate a default guard",
    "start": "36450",
    "end": "39290"
  },
  {
    "text": "guards use the injectable decorator",
    "start": "39290",
    "end": "42120"
  },
  {
    "text": "so they need to be registered as",
    "start": "42120",
    "end": "43860"
  },
  {
    "text": "provider just like any other service and",
    "start": "43860",
    "end": "46140"
  },
  {
    "text": "the app module our users are",
    "start": "46140",
    "end": "51120"
  },
  {
    "text": "authenticating via firebase and angular",
    "start": "51120",
    "end": "52980"
  },
  {
    "text": "fire to package in the service we are",
    "start": "52980",
    "end": "56430"
  },
  {
    "text": "subscribing the firebase off-state than",
    "start": "56430",
    "end": "59100"
  },
  {
    "text": "using a getter to see if the auth object",
    "start": "59100",
    "end": "60809"
  },
  {
    "text": "is null check out the OAuth tutorial for",
    "start": "60809",
    "end": "64080"
  },
  {
    "text": "more details on this code router guards",
    "start": "64080",
    "end": "68549"
  },
  {
    "text": "always return a boolean type or boolean",
    "start": "68549",
    "end": "71040"
  },
  {
    "text": "observable the logic here is simple if",
    "start": "71040",
    "end": "73439"
  },
  {
    "text": "the firebase off state is defined we",
    "start": "73439",
    "end": "76170"
  },
  {
    "text": "activate the route otherwise we return",
    "start": "76170",
    "end": "78330"
  },
  {
    "text": "false and navigate the user to the login",
    "start": "78330",
    "end": "80939"
  },
  {
    "text": "page",
    "start": "80939",
    "end": "83119"
  },
  {
    "text": "now that the guard is complete we just",
    "start": "83780",
    "end": "86340"
  },
  {
    "text": "need to apply it to specific routes in",
    "start": "86340",
    "end": "88470"
  },
  {
    "text": "the routing module that's it for router",
    "start": "88470",
    "end": "90840"
  },
  {
    "text": "guards I'll see you next time",
    "start": "90840",
    "end": "92300"
  },
  {
    "text": "[Music]",
    "start": "92300",
    "end": "94800"
  },
  {
    "text": "Oh",
    "start": "94800",
    "end": "96830"
  },
  {
    "text": "[Music]",
    "start": "97230",
    "end": "100370"
  }
]