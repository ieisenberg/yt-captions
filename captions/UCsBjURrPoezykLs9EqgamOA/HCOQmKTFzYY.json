[
  {
    "start": "0",
    "end": "47000"
  },
  {
    "text": "yesterday the clouds opened up and a",
    "start": "120",
    "end": "1920"
  },
  {
    "text": "weird new programming language came down",
    "start": "1920",
    "end": "3520"
  },
  {
    "text": "to earth with a promise of parallelism",
    "start": "3520",
    "end": "5720"
  },
  {
    "text": "for allou who writeth code this is big",
    "start": "5720",
    "end": "8040"
  },
  {
    "text": "if true because parallel Computing is a",
    "start": "8040",
    "end": "9960"
  },
  {
    "text": "superpower it allows a programmer to",
    "start": "9960",
    "end": "11759"
  },
  {
    "text": "take a problem that could be solved in a",
    "start": "11759",
    "end": "13320"
  },
  {
    "text": "week and instead solve it in seven days",
    "start": "13320",
    "end": "15320"
  },
  {
    "text": "using seven different computers",
    "start": "15320",
    "end": "16960"
  },
  {
    "text": "unfortunately running code in parallel",
    "start": "16960",
    "end": "18880"
  },
  {
    "text": "is like conducting a symphony one wrong",
    "start": "18880",
    "end": "20600"
  },
  {
    "text": "note and the entire thing becomes a",
    "start": "20600",
    "end": "22199"
  },
  {
    "text": "total disaster but luckily Bend offers",
    "start": "22199",
    "end": "24480"
  },
  {
    "text": "Hope by making a bold promise everything",
    "start": "24480",
    "end": "26640"
  },
  {
    "text": "that can run in parallel will run in",
    "start": "26640",
    "end": "28519"
  },
  {
    "text": "parallel you don't need to know anything",
    "start": "28519",
    "end": "30080"
  },
  {
    "text": "about Cuda blocks locks mutexes or",
    "start": "30080",
    "end": "32960"
  },
  {
    "text": "regex's to write algorithms that take",
    "start": "32960",
    "end": "35200"
  },
  {
    "text": "advantage of all 24 of your CPU cores or",
    "start": "35200",
    "end": "37800"
  },
  {
    "text": "even all 16,000 of your GPU cores you",
    "start": "37800",
    "end": "40719"
  },
  {
    "text": "just write some highlevel python looking",
    "start": "40719",
    "end": "42559"
  },
  {
    "text": "code and the rest is Magic it is May",
    "start": "42559",
    "end": "44600"
  },
  {
    "text": "17th 2024 and you're watching the code",
    "start": "44600",
    "end": "47120"
  },
  {
    "start": "47000",
    "end": "95000"
  },
  {
    "text": "report when you write code in a language",
    "start": "47120",
    "end": "48600"
  },
  {
    "text": "like python your code runs on a single",
    "start": "48600",
    "end": "50600"
  },
  {
    "text": "thread that means only one thing can",
    "start": "50600",
    "end": "52320"
  },
  {
    "text": "happen at a time it's like going to a",
    "start": "52320",
    "end": "54039"
  },
  {
    "text": "KFC with only one employee who takes the",
    "start": "54039",
    "end": "56000"
  },
  {
    "text": "order cleans the toilets and Cooks the",
    "start": "56000",
    "end": "57719"
  },
  {
    "text": "food in that order now on a modern CPU",
    "start": "57719",
    "end": "60120"
  },
  {
    "text": "you might have a clock cycle around 4",
    "start": "60120",
    "end": "61840"
  },
  {
    "text": "GHz and if it's handling one instruction",
    "start": "61840",
    "end": "64000"
  },
  {
    "text": "per cycle you're only able to perform 4",
    "start": "64000",
    "end": "66119"
  },
  {
    "text": "billion instructions per second now if",
    "start": "66119",
    "end": "68000"
  },
  {
    "text": "four giips is not enough you can modify",
    "start": "68000",
    "end": "70920"
  },
  {
    "text": "your python code to take advantage of",
    "start": "70920",
    "end": "72680"
  },
  {
    "text": "multiple threads but it adds a lot of",
    "start": "72680",
    "end": "74600"
  },
  {
    "text": "complexity to your code and there's all",
    "start": "74600",
    "end": "76360"
  },
  {
    "text": "kinds of gotas like race conditions",
    "start": "76360",
    "end": "78640"
  },
  {
    "text": "Deadlocks thread starvation and may even",
    "start": "78640",
    "end": "80880"
  },
  {
    "text": "lead to conflicts with demons even if",
    "start": "80880",
    "end": "82680"
  },
  {
    "text": "you do manage to get it working you",
    "start": "82680",
    "end": "84200"
  },
  {
    "text": "might find that your CPU just doesn't",
    "start": "84200",
    "end": "85840"
  },
  {
    "text": "have enough juice at which point you",
    "start": "85840",
    "end": "87400"
  },
  {
    "text": "look into using the thousands of cacor",
    "start": "87400",
    "end": "89320"
  },
  {
    "text": "on your GPU you but now you'll need to",
    "start": "89320",
    "end": "91040"
  },
  {
    "text": "write some C++ code and likely blow your",
    "start": "91040",
    "end": "93200"
  },
  {
    "text": "leg off in the process well what if",
    "start": "93200",
    "end": "94840"
  },
  {
    "text": "there is a language that just knew how",
    "start": "94840",
    "end": "96360"
  },
  {
    "start": "95000",
    "end": "154000"
  },
  {
    "text": "to run things in parallel by default",
    "start": "96360",
    "end": "98280"
  },
  {
    "text": "that's the promise of Bend imagine we",
    "start": "98280",
    "end": "99960"
  },
  {
    "text": "have a computation that adds two",
    "start": "99960",
    "end": "101600"
  },
  {
    "text": "completely random numbers together in",
    "start": "101600",
    "end": "103439"
  },
  {
    "text": "Python The Interpreter is going to",
    "start": "103439",
    "end": "104880"
  },
  {
    "text": "convert this into B code and then",
    "start": "104880",
    "end": "106399"
  },
  {
    "text": "eventually run it on the python virtual",
    "start": "106399",
    "end": "108079"
  },
  {
    "text": "machine pretty simple but in Bend things",
    "start": "108079",
    "end": "110280"
  },
  {
    "text": "are a little more complex the elements",
    "start": "110280",
    "end": "112000"
  },
  {
    "text": "of the computation are structured into a",
    "start": "112000",
    "end": "114079"
  },
  {
    "text": "graph which are called interaction",
    "start": "114079",
    "end": "115680"
  },
  {
    "text": "combinators you can think of it as a big",
    "start": "115680",
    "end": "117479"
  },
  {
    "text": "network of all the computations that",
    "start": "117479",
    "end": "119000"
  },
  {
    "text": "need to be done when two nodes run into",
    "start": "119000",
    "end": "120680"
  },
  {
    "text": "each other the computation progresses by",
    "start": "120680",
    "end": "123039"
  },
  {
    "text": "following a simple set of rules that",
    "start": "123039",
    "end": "124719"
  },
  {
    "text": "rewrite the computation in a way that",
    "start": "124719",
    "end": "126479"
  },
  {
    "text": "can be done in parallel it continues",
    "start": "126479",
    "end": "128080"
  },
  {
    "text": "this pattern until all computations are",
    "start": "128080",
    "end": "129759"
  },
  {
    "text": "done it then merges the result back into",
    "start": "129759",
    "end": "131800"
  },
  {
    "text": "whatever expression was returned from",
    "start": "131800",
    "end": "133400"
  },
  {
    "text": "the function this concept of interaction",
    "start": "133400",
    "end": "135400"
  },
  {
    "text": "combinators goes all the way back to the",
    "start": "135400",
    "end": "137000"
  },
  {
    "text": "1990s and is implemented in a runtime",
    "start": "137000",
    "end": "139400"
  },
  {
    "text": "called the higher order virtual machine",
    "start": "139400",
    "end": "141360"
  },
  {
    "text": "hbm is not meant to be used directly and",
    "start": "141360",
    "end": "143519"
  },
  {
    "text": "that's why they build bend a highle",
    "start": "143519",
    "end": "145280"
  },
  {
    "text": "language to interface with it and the",
    "start": "145280",
    "end": "146879"
  },
  {
    "text": "language itself is implemented in Rust",
    "start": "146879",
    "end": "149000"
  },
  {
    "text": "its syntax is very similar to Python and",
    "start": "149000",
    "end": "151040"
  },
  {
    "text": "we can write a Hello World by defining a",
    "start": "151040",
    "end": "152840"
  },
  {
    "text": "main function that returns a string now",
    "start": "152840",
    "end": "154840"
  },
  {
    "start": "154000",
    "end": "240000"
  },
  {
    "text": "to execute this code we can pull up the",
    "start": "154840",
    "end": "156519"
  },
  {
    "text": "terminal and use the Ben run command by",
    "start": "156519",
    "end": "159040"
  },
  {
    "text": "default this is going to use the rust",
    "start": "159040",
    "end": "160560"
  },
  {
    "text": "interpreter which will execute it",
    "start": "160560",
    "end": "162280"
  },
  {
    "text": "sequentially just like any other boring",
    "start": "162280",
    "end": "164440"
  },
  {
    "text": "language but now here's where things get",
    "start": "164440",
    "end": "166239"
  },
  {
    "text": "interesting imagine we have an algorithm",
    "start": "166239",
    "end": "168200"
  },
  {
    "text": "that needs to count a bunch of numbers",
    "start": "168200",
    "end": "169840"
  },
  {
    "text": "and then add them together the first",
    "start": "169840",
    "end": "171319"
  },
  {
    "text": "thing that might blow your mind is that",
    "start": "171319",
    "end": "172840"
  },
  {
    "text": "bend does not have loops like we can't",
    "start": "172840",
    "end": "174760"
  },
  {
    "text": "just do a for Loop like we would in",
    "start": "174760",
    "end": "176120"
  },
  {
    "text": "Python instead Bend has something",
    "start": "176120",
    "end": "178040"
  },
  {
    "text": "entirely different called a fold that",
    "start": "178040",
    "end": "180080"
  },
  {
    "text": "works like a search and replace for data",
    "start": "180080",
    "end": "181959"
  },
  {
    "text": "types and any algorithm that requires a",
    "start": "181959",
    "end": "184000"
  },
  {
    "text": "loop can be replaced with a fold",
    "start": "184000",
    "end": "185840"
  },
  {
    "text": "basically a fold allows you to consume",
    "start": "185840",
    "end": "187840"
  },
  {
    "text": "recursive data types in parallel like a",
    "start": "187840",
    "end": "189840"
  },
  {
    "text": "list or a tree but first we need to",
    "start": "189840",
    "end": "191560"
  },
  {
    "text": "construct a recursive data type and for",
    "start": "191560",
    "end": "193360"
  },
  {
    "text": "that we have the bend keyword which is",
    "start": "193360",
    "end": "195120"
  },
  {
    "text": "like the opposite of fold now if that's",
    "start": "195120",
    "end": "196840"
  },
  {
    "text": "a little too mind-bending maybe check",
    "start": "196840",
    "end": "198440"
  },
  {
    "text": "out my back catalog for recursion in 100",
    "start": "198440",
    "end": "200879"
  },
  {
    "text": "seconds but now let's see what this",
    "start": "200879",
    "end": "202239"
  },
  {
    "text": "looks like from a performance standpoint",
    "start": "202239",
    "end": "204080"
  },
  {
    "text": "when I try to run this algorithm on a",
    "start": "204080",
    "end": "205560"
  },
  {
    "text": "single thread it takes forever like 10",
    "start": "205560",
    "end": "207680"
  },
  {
    "text": "minutes or more however I can run the",
    "start": "207680",
    "end": "209480"
  },
  {
    "text": "same code without any modification",
    "start": "209480",
    "end": "211200"
  },
  {
    "text": "whatsoever with the bend run C command",
    "start": "211200",
    "end": "213799"
  },
  {
    "text": "when I do that it's now utilizing all 24",
    "start": "213799",
    "end": "216360"
  },
  {
    "text": "threads on my CPU and now it only takes",
    "start": "216360",
    "end": "218519"
  },
  {
    "text": "about 30 seconds to run the computation",
    "start": "218519",
    "end": "220599"
  },
  {
    "text": "that's a huge Improvement but I think we",
    "start": "220599",
    "end": "222159"
  },
  {
    "text": "can still do better because I'm a baller",
    "start": "222159",
    "end": "224040"
  },
  {
    "text": "I have an Nvidia RTX 490 and once again",
    "start": "224040",
    "end": "227040"
  },
  {
    "text": "I can run this code without any",
    "start": "227040",
    "end": "228319"
  },
  {
    "text": "modification on Cuda with Bend run- cuu",
    "start": "228319",
    "end": "231760"
  },
  {
    "text": "and now this code only takes 1 and 1",
    "start": "231760",
    "end": "233280"
  },
  {
    "text": "half seconds to run and I'll just go",
    "start": "233280",
    "end": "234959"
  },
  {
    "text": "ahead and drop the mic right there this",
    "start": "234959",
    "end": "236640"
  },
  {
    "text": "has been the code report thanks for",
    "start": "236640",
    "end": "238120"
  },
  {
    "text": "watching and I will see you in the next",
    "start": "238120",
    "end": "239840"
  },
  {
    "text": "one",
    "start": "239840",
    "end": "242439"
  }
]