[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "the question mark it's one of the most",
    "start": "1760",
    "end": "3439"
  },
  {
    "text": "powerful characters in the javascript",
    "start": "3439",
    "end": "5200"
  },
  {
    "text": "universe providing syntactic sugar in",
    "start": "5200",
    "end": "7200"
  },
  {
    "text": "three awesome yet totally unrelated ways",
    "start": "7200",
    "end": "9679"
  },
  {
    "text": "first up we have the ternary operator",
    "start": "9679",
    "end": "11679"
  },
  {
    "text": "the word ternary literally means",
    "start": "11679",
    "end": "13360"
  },
  {
    "text": "composed of three parts",
    "start": "13360",
    "end": "14880"
  },
  {
    "text": "using the question mark as our starting",
    "start": "14880",
    "end": "16480"
  },
  {
    "text": "place we add a condition",
    "start": "16480",
    "end": "18240"
  },
  {
    "text": "on the left side then on the right side",
    "start": "18240",
    "end": "20240"
  },
  {
    "text": "we add a value to a sign",
    "start": "20240",
    "end": "21760"
  },
  {
    "text": "when the condition is truthy but if the",
    "start": "21760",
    "end": "23519"
  },
  {
    "text": "condition is falsy we add a colon to",
    "start": "23519",
    "end": "25840"
  },
  {
    "text": "assign a different value the operator is",
    "start": "25840",
    "end": "28160"
  },
  {
    "text": "often used to replace a traditional",
    "start": "28160",
    "end": "30080"
  },
  {
    "text": "if statement the code in a ternary",
    "start": "30080",
    "end": "32160"
  },
  {
    "text": "expression is far more concise",
    "start": "32160",
    "end": "33920"
  },
  {
    "text": "but you might argue that it's much less",
    "start": "33920",
    "end": "35520"
  },
  {
    "text": "readable than an if statement",
    "start": "35520",
    "end": "37120"
  },
  {
    "text": "and you might be right that is until you",
    "start": "37120",
    "end": "38800"
  },
  {
    "text": "need to assign a variable",
    "start": "38800",
    "end": "40239"
  },
  {
    "text": "a statement like if is code that does",
    "start": "40239",
    "end": "42719"
  },
  {
    "text": "something it's imperative",
    "start": "42719",
    "end": "44079"
  },
  {
    "text": "it begins with state then as the",
    "start": "44079",
    "end": "45680"
  },
  {
    "text": "program's executed it mutates the state",
    "start": "45680",
    "end": "48239"
  },
  {
    "text": "and takes multiple lines of code just to",
    "start": "48239",
    "end": "50079"
  },
  {
    "text": "assign a variable based on a simple",
    "start": "50079",
    "end": "52000"
  },
  {
    "text": "condition",
    "start": "52000",
    "end": "52559"
  },
  {
    "text": "the ternary operator on the other hand",
    "start": "52559",
    "end": "54480"
  },
  {
    "text": "creates an expression which means that",
    "start": "54480",
    "end": "56320"
  },
  {
    "text": "it produces a value",
    "start": "56320",
    "end": "57440"
  },
  {
    "text": "that we can then assign to a variable",
    "start": "57440",
    "end": "59600"
  },
  {
    "text": "this code is declarative",
    "start": "59600",
    "end": "61039"
  },
  {
    "text": "it describes the state of the variable",
    "start": "61039",
    "end": "62800"
  },
  {
    "text": "as opposed to mutating it that's why we",
    "start": "62800",
    "end": "64878"
  },
  {
    "text": "can use const here but require",
    "start": "64879",
    "end": "66560"
  },
  {
    "text": "let in the if statement declarative code",
    "start": "66560",
    "end": "68640"
  },
  {
    "text": "is awesome because it can also be used",
    "start": "68640",
    "end": "70400"
  },
  {
    "text": "in function arguments and in array and",
    "start": "70400",
    "end": "72640"
  },
  {
    "text": "object literals but the question mark",
    "start": "72640",
    "end": "74720"
  },
  {
    "text": "isn't done there in 2020",
    "start": "74720",
    "end": "76479"
  },
  {
    "start": "75000",
    "end": "105000"
  },
  {
    "text": "an awesome new feature landed in",
    "start": "76479",
    "end": "77840"
  },
  {
    "text": "javascript called optional chaining",
    "start": "77840",
    "end": "79920"
  },
  {
    "text": "at some point you've likely written code",
    "start": "79920",
    "end": "81680"
  },
  {
    "text": "that calls an object property that does",
    "start": "81680",
    "end": "83680"
  },
  {
    "text": "not exist and when that happens it",
    "start": "83680",
    "end": "85280"
  },
  {
    "text": "triggers an error",
    "start": "85280",
    "end": "86080"
  },
  {
    "text": "at runtime you could write some code",
    "start": "86080",
    "end": "87840"
  },
  {
    "text": "that asserts a property exists before",
    "start": "87840",
    "end": "89840"
  },
  {
    "text": "calling it",
    "start": "89840",
    "end": "90560"
  },
  {
    "text": "but this can get really ugly nowadays",
    "start": "90560",
    "end": "92640"
  },
  {
    "text": "you can just insert a question mark",
    "start": "92640",
    "end": "94240"
  },
  {
    "text": "between the property name and the period",
    "start": "94240",
    "end": "96159"
  },
  {
    "text": "between the next property",
    "start": "96159",
    "end": "97360"
  },
  {
    "text": "if the parent property is undefined",
    "start": "97360",
    "end": "99119"
  },
  {
    "text": "it'll just return undefined instead of",
    "start": "99119",
    "end": "101200"
  },
  {
    "text": "throwing an error",
    "start": "101200",
    "end": "102240"
  },
  {
    "text": "that's a truly life-changing feature for",
    "start": "102240",
    "end": "104079"
  },
  {
    "text": "the javascript developer",
    "start": "104079",
    "end": "105439"
  },
  {
    "start": "105000",
    "end": "153000"
  },
  {
    "text": "but the question mark has one more trick",
    "start": "105439",
    "end": "107280"
  },
  {
    "text": "up its sleeve nolish coalescing",
    "start": "107280",
    "end": "109439"
  },
  {
    "text": "in many cases you may want to set a",
    "start": "109439",
    "end": "111360"
  },
  {
    "text": "default value for a missing variable or",
    "start": "111360",
    "end": "113680"
  },
  {
    "text": "property name",
    "start": "113680",
    "end": "114560"
  },
  {
    "text": "you can easily do that with a logical or",
    "start": "114560",
    "end": "116719"
  },
  {
    "text": "operator if the left side is falsy",
    "start": "116719",
    "end": "118719"
  },
  {
    "text": "then use the value on the right side but",
    "start": "118719",
    "end": "120880"
  },
  {
    "text": "because javascript has a bunch of weird",
    "start": "120880",
    "end": "122799"
  },
  {
    "text": "rules for what is truthy and falsey",
    "start": "122799",
    "end": "124719"
  },
  {
    "text": "you may get weird results like an empty",
    "start": "124719",
    "end": "126799"
  },
  {
    "text": "string or zero being set to a default",
    "start": "126799",
    "end": "128959"
  },
  {
    "text": "value because it resolves to falsey",
    "start": "128959",
    "end": "131120"
  },
  {
    "text": "instead of logical or you can add a",
    "start": "131120",
    "end": "133040"
  },
  {
    "text": "double question mark which works just",
    "start": "133040",
    "end": "134959"
  },
  {
    "text": "like logical or",
    "start": "134959",
    "end": "136080"
  },
  {
    "text": "except undefined and null are the only",
    "start": "136080",
    "end": "138000"
  },
  {
    "text": "values that short circuit to the right",
    "start": "138000",
    "end": "139920"
  },
  {
    "text": "side making the behavior of your code",
    "start": "139920",
    "end": "141360"
  },
  {
    "text": "much more predictable",
    "start": "141360",
    "end": "142560"
  },
  {
    "text": "this has been the javascript question",
    "start": "142560",
    "end": "144080"
  },
  {
    "text": "mark in 100 seconds",
    "start": "144080",
    "end": "145599"
  },
  {
    "text": "if you want to see more short videos",
    "start": "145599",
    "end": "146800"
  },
  {
    "text": "like this make sure to hit the like",
    "start": "146800",
    "end": "148319"
  },
  {
    "text": "button and subscribe",
    "start": "148319",
    "end": "149599"
  },
  {
    "text": "thanks for watching and i will see you",
    "start": "149599",
    "end": "151519"
  },
  {
    "text": "in the next one",
    "start": "151519",
    "end": "154480"
  }
]