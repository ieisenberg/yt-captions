[
  {
    "text": "a few days ago a shocking new blog post",
    "start": "40",
    "end": "2240"
  },
  {
    "text": "from the reactjs team dropped as a react",
    "start": "2240",
    "end": "4520"
  },
  {
    "text": "hater I hate to say it but they fixed",
    "start": "4520",
    "end": "6680"
  },
  {
    "text": "react I tried to let the hate flow",
    "start": "6680",
    "end": "8280"
  },
  {
    "text": "through me but the react team made some",
    "start": "8280",
    "end": "9960"
  },
  {
    "text": "brilliant moves that will dramatically",
    "start": "9960",
    "end": "11599"
  },
  {
    "text": "improve the developer experience just",
    "start": "11599",
    "end": "13400"
  },
  {
    "text": "when you thought react had become the",
    "start": "13400",
    "end": "14719"
  },
  {
    "text": "new jQuery and the JavaScript framework",
    "start": "14719",
    "end": "16600"
  },
  {
    "text": "wars were coming to an end the react",
    "start": "16600",
    "end": "18119"
  },
  {
    "text": "team has Unleashed their secret weapon a",
    "start": "18119",
    "end": "20119"
  },
  {
    "text": "compiler and in today's video we'll find",
    "start": "20119",
    "end": "22039"
  },
  {
    "text": "out what that word means it is February",
    "start": "22039",
    "end": "24000"
  },
  {
    "text": "26 2024 and you're watching the code",
    "start": "24000",
    "end": "26439"
  },
  {
    "text": "report speaking of jQuery one thing that",
    "start": "26439",
    "end": "28240"
  },
  {
    "text": "you may have missed is that after nearly",
    "start": "28240",
    "end": "29759"
  },
  {
    "text": "a decade of anticipation jQuery just",
    "start": "29759",
    "end": "32040"
  },
  {
    "text": "announced version 4.0 it got rid of a",
    "start": "32040",
    "end": "34280"
  },
  {
    "text": "bunch of stuff made obsolete by the",
    "start": "34280",
    "end": "35800"
  },
  {
    "text": "JavaScript language itself dropped ie1",
    "start": "35800",
    "end": "38160"
  },
  {
    "text": "support and migrated to es modules most",
    "start": "38160",
    "end": "40559"
  },
  {
    "text": "frontend developers nowadays are too",
    "start": "40559",
    "end": "42120"
  },
  {
    "text": "smug and arrogant to use jQuery but this",
    "start": "42120",
    "end": "44360"
  },
  {
    "text": "is great news for the millions of",
    "start": "44360",
    "end": "45760"
  },
  {
    "text": "websites out there that still use it the",
    "start": "45760",
    "end": "47440"
  },
  {
    "text": "big news though is that reactjs is",
    "start": "47440",
    "end": "49320"
  },
  {
    "text": "getting a compiler meta is already using",
    "start": "49320",
    "end": "51320"
  },
  {
    "text": "this compiler in production to power",
    "start": "51320",
    "end": "52960"
  },
  {
    "text": "Instagram and will likely bring solid",
    "start": "52960",
    "end": "54680"
  },
  {
    "text": "performance improvements but most",
    "start": "54680",
    "end": "56280"
  },
  {
    "text": "importantly it will simplify the code we",
    "start": "56280",
    "end": "58000"
  },
  {
    "text": "write as developers Developers L react",
    "start": "58000",
    "end": "60480"
  },
  {
    "text": "code is pretty ridiculous compared to",
    "start": "60480",
    "end": "62160"
  },
  {
    "text": "Frameworks like view felt and solid like",
    "start": "62160",
    "end": "64478"
  },
  {
    "text": "imagine we have some state that needs to",
    "start": "64479",
    "end": "66240"
  },
  {
    "text": "be computed into another value we can do",
    "start": "66240",
    "end": "68439"
  },
  {
    "text": "it like this in react but that value",
    "start": "68439",
    "end": "70280"
  },
  {
    "text": "will be unnecessarily recomputed every",
    "start": "70280",
    "end": "72320"
  },
  {
    "text": "time the component reeners it's",
    "start": "72320",
    "end": "74040"
  },
  {
    "text": "inefficient to address this react",
    "start": "74040",
    "end": "75680"
  },
  {
    "text": "provides a hook called use memo memo",
    "start": "75680",
    "end": "77759"
  },
  {
    "text": "means memoization which itself means",
    "start": "77759",
    "end": "79720"
  },
  {
    "text": "remember it wraps the computation in",
    "start": "79720",
    "end": "81520"
  },
  {
    "text": "another function which will only run",
    "start": "81520",
    "end": "83240"
  },
  {
    "text": "when the state that it's dependent on",
    "start": "83240",
    "end": "84600"
  },
  {
    "text": "changes which has to be explicitly put",
    "start": "84600",
    "end": "86520"
  },
  {
    "text": "in this array if we look at all the",
    "start": "86520",
    "end": "87880"
  },
  {
    "text": "other Frameworks though they don't do",
    "start": "87880",
    "end": "89439"
  },
  {
    "text": "stuff like this like in view we have",
    "start": "89439",
    "end": "91159"
  },
  {
    "text": "this computed function but there's no",
    "start": "91159",
    "end": "92759"
  },
  {
    "text": "need to include that dependency array",
    "start": "92759",
    "end": "94520"
  },
  {
    "text": "and in spell 3 it's even more simple",
    "start": "94520",
    "end": "96000"
  },
  {
    "text": "with the dollar sign syntax although",
    "start": "96000",
    "end": "97560"
  },
  {
    "text": "it's being replaced with a rune in spel",
    "start": "97560",
    "end": "99159"
  },
  {
    "text": "5 the reason these Frameworks can let",
    "start": "99159",
    "end": "100720"
  },
  {
    "text": "you write more simplified code is",
    "start": "100720",
    "end": "102280"
  },
  {
    "text": "because they have a compiler unlike",
    "start": "102280",
    "end": "103920"
  },
  {
    "text": "react which is purely runtime based they",
    "start": "103920",
    "end": "106200"
  },
  {
    "text": "look at your code in advance to figure",
    "start": "106200",
    "end": "107880"
  },
  {
    "text": "out where the reactivity is and bundle",
    "start": "107880",
    "end": "109799"
  },
  {
    "text": "that into the final product that goes to",
    "start": "109799",
    "end": "111320"
  },
  {
    "text": "the browser but now that react is",
    "start": "111320",
    "end": "112920"
  },
  {
    "text": "getting its own compiler it means hooks",
    "start": "112920",
    "end": "114920"
  },
  {
    "text": "like use memo and use callback are a",
    "start": "114920",
    "end": "116880"
  },
  {
    "text": "thing of the past and that's huge",
    "start": "116880",
    "end": "118399"
  },
  {
    "text": "because not only is the code ugly as as",
    "start": "118399",
    "end": "120000"
  },
  {
    "text": "hell but it also removes the mental",
    "start": "120000",
    "end": "121439"
  },
  {
    "text": "boiler plate of asking the question to",
    "start": "121439",
    "end": "123520"
  },
  {
    "text": "memoize or not to memoize and they",
    "start": "123520",
    "end": "125759"
  },
  {
    "text": "confirmed my conspiracy theory that",
    "start": "125759",
    "end": "127240"
  },
  {
    "text": "react intentionally adds bad apis like",
    "start": "127240",
    "end": "129440"
  },
  {
    "text": "this just to look like Geniuses when",
    "start": "129440",
    "end": "130879"
  },
  {
    "text": "they remove them later on but use memo",
    "start": "130879",
    "end": "132840"
  },
  {
    "text": "is not the only bad feature going away",
    "start": "132840",
    "end": "134760"
  },
  {
    "text": "another thing you won't need in the",
    "start": "134760",
    "end": "135800"
  },
  {
    "text": "future is forward ref which creates a",
    "start": "135800",
    "end": "137760"
  },
  {
    "text": "higher order component when you need to",
    "start": "137760",
    "end": "139440"
  },
  {
    "text": "expose a Dom node to the parent instead",
    "start": "139440",
    "end": "141440"
  },
  {
    "text": "ref will just be a prop so you can",
    "start": "141440",
    "end": "142879"
  },
  {
    "text": "easily access it without having to wrap",
    "start": "142879",
    "end": "144800"
  },
  {
    "text": "another function that's an easy win but",
    "start": "144800",
    "end": "146680"
  },
  {
    "text": "a more controversial feature is server",
    "start": "146680",
    "end": "148720"
  },
  {
    "text": "actions you can already use actions in",
    "start": "148720",
    "end": "150400"
  },
  {
    "text": "nextjs and many have described the",
    "start": "150400",
    "end": "152239"
  },
  {
    "text": "developer experience as being like PHP",
    "start": "152239",
    "end": "154760"
  },
  {
    "text": "but without Lambos the general idea",
    "start": "154760",
    "end": "156599"
  },
  {
    "text": "though is that react handles the data",
    "start": "156599",
    "end": "158239"
  },
  {
    "text": "submission cycle for you from client to",
    "start": "158239",
    "end": "160440"
  },
  {
    "text": "server and then back again what's cool",
    "start": "160440",
    "end": "162319"
  },
  {
    "text": "about this is react provides hooks like",
    "start": "162319",
    "end": "164280"
  },
  {
    "text": "use form status or use form state to",
    "start": "164280",
    "end": "166720"
  },
  {
    "text": "easily handle the data in a form but",
    "start": "166720",
    "end": "168720"
  },
  {
    "text": "then alongside that you have hooks like",
    "start": "168720",
    "end": "170400"
  },
  {
    "text": "use optimistic to get that Ultra fast",
    "start": "170400",
    "end": "172760"
  },
  {
    "text": "Firebase like feel on any backend",
    "start": "172760",
    "end": "174800"
  },
  {
    "text": "database the UI updates instantly based",
    "start": "174800",
    "end": "176840"
  },
  {
    "text": "on the expected change then in the rare",
    "start": "176840",
    "end": "178480"
  },
  {
    "text": "case it fails it reverts back but",
    "start": "178480",
    "end": "180360"
  },
  {
    "text": "another thing that sucks about react is",
    "start": "180360",
    "end": "182000"
  },
  {
    "text": "working with promises in react server",
    "start": "182000",
    "end": "183879"
  },
  {
    "text": "components like in nextjs you can use",
    "start": "183879",
    "end": "185959"
  },
  {
    "text": "async await to fetch data directly in a",
    "start": "185959",
    "end": "188040"
  },
  {
    "text": "component that's awesome but you can't",
    "start": "188040",
    "end": "189840"
  },
  {
    "text": "do it in a client side component and you",
    "start": "189840",
    "end": "191599"
  },
  {
    "text": "still can't in react 19 but you can use",
    "start": "191599",
    "end": "193720"
  },
  {
    "text": "the use hook which is the next best",
    "start": "193720",
    "end": "195440"
  },
  {
    "text": "thing it works on both promises and",
    "start": "195440",
    "end": "197159"
  },
  {
    "text": "react context which means it makes the",
    "start": "197159",
    "end": "199159"
  },
  {
    "text": "Ed context hook obsolete because unlike",
    "start": "199159",
    "end": "201159"
  },
  {
    "text": "used context use can also be used inside",
    "start": "201159",
    "end": "203440"
  },
  {
    "text": "of loops and conditionals but using use",
    "start": "203440",
    "end": "205760"
  },
  {
    "text": "allows you to use the value of a",
    "start": "205760",
    "end": "207319"
  },
  {
    "text": "resolved promise directly in the UI now",
    "start": "207319",
    "end": "209439"
  },
  {
    "text": "a promis is asynchronous and its value",
    "start": "209439",
    "end": "211480"
  },
  {
    "text": "is initially pending so you can handle",
    "start": "211480",
    "end": "213280"
  },
  {
    "text": "the loading state by wrapping it in a",
    "start": "213280",
    "end": "215040"
  },
  {
    "text": "suspense boundary and it might also",
    "start": "215040",
    "end": "216680"
  },
  {
    "text": "reject and throw an error in which case",
    "start": "216680",
    "end": "218519"
  },
  {
    "text": "you can wrap it in an error boundary I",
    "start": "218519",
    "end": "220239"
  },
  {
    "text": "don't really love this code myself but",
    "start": "220239",
    "end": "221799"
  },
  {
    "text": "it's way better than the common approach",
    "start": "221799",
    "end": "223200"
  },
  {
    "text": "of resolving a promise with the use",
    "start": "223200",
    "end": "224840"
  },
  {
    "text": "effect hook bottom line is that these",
    "start": "224840",
    "end": "226360"
  },
  {
    "text": "are some huge improvements for react",
    "start": "226360",
    "end": "228239"
  },
  {
    "text": "what's funny though is that if we take a",
    "start": "228239",
    "end": "229599"
  },
  {
    "text": "step back all the major Frameworks are",
    "start": "229599",
    "end": "231400"
  },
  {
    "text": "starting to look identical and have all",
    "start": "231400",
    "end": "233040"
  },
  {
    "text": "copied each other's abstractions leading",
    "start": "233040",
    "end": "234760"
  },
  {
    "text": "to nearly identical apis just with",
    "start": "234760",
    "end": "236799"
  },
  {
    "text": "things named slightly different as a",
    "start": "236799",
    "end": "238400"
  },
  {
    "text": "civilized society it's about time we",
    "start": "238400",
    "end": "240239"
  },
  {
    "text": "decide on the one true framework then we",
    "start": "240239",
    "end": "242400"
  },
  {
    "text": "build that framework into the browser to",
    "start": "242400",
    "end": "244079"
  },
  {
    "text": "put an end to this Bloodshed once and",
    "start": "244079",
    "end": "245560"
  },
  {
    "text": "for all this has been the code report",
    "start": "245560",
    "end": "247280"
  },
  {
    "text": "thanks for watching and I will see you",
    "start": "247280",
    "end": "248879"
  },
  {
    "text": "in the next JS one",
    "start": "248879",
    "end": "252680"
  }
]