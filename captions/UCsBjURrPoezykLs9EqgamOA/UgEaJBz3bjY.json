[
  {
    "start": "0",
    "end": "11000"
  },
  {
    "text": "destructuring assignment take values",
    "start": "399",
    "end": "2480"
  },
  {
    "text": "from arrays or properties from objects",
    "start": "2480",
    "end": "4640"
  },
  {
    "text": "and set them",
    "start": "4640",
    "end": "5440"
  },
  {
    "text": "as local variables it's a technique that",
    "start": "5440",
    "end": "7839"
  },
  {
    "text": "can make your javascript code more",
    "start": "7839",
    "end": "9440"
  },
  {
    "text": "concise and readable",
    "start": "9440",
    "end": "10800"
  },
  {
    "text": "imagine you have an array and you want",
    "start": "10800",
    "end": "12320"
  },
  {
    "start": "11000",
    "end": "128000"
  },
  {
    "text": "to assign some of its values to local",
    "start": "12320",
    "end": "14320"
  },
  {
    "text": "variables",
    "start": "14320",
    "end": "15120"
  },
  {
    "text": "one option is to assign each variable by",
    "start": "15120",
    "end": "17279"
  },
  {
    "text": "referencing its index in the array",
    "start": "17279",
    "end": "19520"
  },
  {
    "text": "that works fine but it's not very",
    "start": "19520",
    "end": "21039"
  },
  {
    "text": "elegant with destructuring we can do the",
    "start": "21039",
    "end": "23039"
  },
  {
    "text": "same thing with a single line of code",
    "start": "23039",
    "end": "25039"
  },
  {
    "text": "by using brackets after const we can",
    "start": "25039",
    "end": "27199"
  },
  {
    "text": "assign a variable name",
    "start": "27199",
    "end": "28320"
  },
  {
    "text": "to each index in the array the position",
    "start": "28320",
    "end": "30640"
  },
  {
    "text": "of the variable name",
    "start": "30640",
    "end": "31679"
  },
  {
    "text": "matches the values index in the array",
    "start": "31679",
    "end": "33840"
  },
  {
    "text": "the syntax may look familiar to you if",
    "start": "33840",
    "end": "35600"
  },
  {
    "text": "you've ever used react which relies on",
    "start": "35600",
    "end": "37280"
  },
  {
    "text": "destructuring for the used state hook",
    "start": "37280",
    "end": "39280"
  },
  {
    "text": "when working with arrays you may want to",
    "start": "39280",
    "end": "40960"
  },
  {
    "text": "emit a variable which you can do by",
    "start": "40960",
    "end": "42719"
  },
  {
    "text": "adding a comma without a variable name",
    "start": "42719",
    "end": "44559"
  },
  {
    "text": "to skip that index",
    "start": "44559",
    "end": "46000"
  },
  {
    "text": "in other cases you might want to name",
    "start": "46000",
    "end": "47760"
  },
  {
    "text": "the first couple variables",
    "start": "47760",
    "end": "49200"
  },
  {
    "text": "then put the remainder in their own",
    "start": "49200",
    "end": "50640"
  },
  {
    "text": "array that can be achieved by putting",
    "start": "50640",
    "end": "52399"
  },
  {
    "text": "three dots in front of the variable name",
    "start": "52399",
    "end": "54399"
  },
  {
    "text": "you might also want to set a default",
    "start": "54399",
    "end": "55840"
  },
  {
    "text": "value in case the value in the array is",
    "start": "55840",
    "end": "58000"
  },
  {
    "text": "undefined use the equal sign to provide",
    "start": "58000",
    "end": "60480"
  },
  {
    "text": "the fallback value",
    "start": "60480",
    "end": "61600"
  },
  {
    "text": "in addition to arrays destructuring also",
    "start": "61600",
    "end": "63840"
  },
  {
    "text": "applies to objects",
    "start": "63840",
    "end": "65040"
  },
  {
    "text": "notice how we're duplicating the",
    "start": "65040",
    "end": "66320"
  },
  {
    "text": "object's property name as a variable",
    "start": "66320",
    "end": "68400"
  },
  {
    "text": "with dot notation",
    "start": "68400",
    "end": "69760"
  },
  {
    "text": "by putting braces after const you can",
    "start": "69760",
    "end": "71840"
  },
  {
    "text": "reference property names which will",
    "start": "71840",
    "end": "73600"
  },
  {
    "text": "automatically become local variables",
    "start": "73600",
    "end": "75600"
  },
  {
    "text": "which is much cleaner than referencing",
    "start": "75600",
    "end": "77119"
  },
  {
    "text": "them line by line with dot notation",
    "start": "77119",
    "end": "79200"
  },
  {
    "text": "and just like arrays you can use the",
    "start": "79200",
    "end": "80880"
  },
  {
    "text": "equal sign to set a default value",
    "start": "80880",
    "end": "83119"
  },
  {
    "text": "but in some cases you may want to use a",
    "start": "83119",
    "end": "84960"
  },
  {
    "text": "different name than what's provided on",
    "start": "84960",
    "end": "86720"
  },
  {
    "text": "the object itself",
    "start": "86720",
    "end": "87840"
  },
  {
    "text": "adding a colon after the property name",
    "start": "87840",
    "end": "89920"
  },
  {
    "text": "allows you to rename it which is",
    "start": "89920",
    "end": "91520"
  },
  {
    "text": "especially useful when dealing with name",
    "start": "91520",
    "end": "93360"
  },
  {
    "text": "collisions or when working with objects",
    "start": "93360",
    "end": "95200"
  },
  {
    "text": "that use property names that are not",
    "start": "95200",
    "end": "97040"
  },
  {
    "text": "valid variable names",
    "start": "97040",
    "end": "98400"
  },
  {
    "text": "in addition to renaming you can also use",
    "start": "98400",
    "end": "100560"
  },
  {
    "text": "a colon to access",
    "start": "100560",
    "end": "101840"
  },
  {
    "text": "nested properties or in other words set",
    "start": "101840",
    "end": "104000"
  },
  {
    "text": "a variable from an object within an",
    "start": "104000",
    "end": "105840"
  },
  {
    "text": "object",
    "start": "105840",
    "end": "106479"
  },
  {
    "text": "in addition to destructuring top level",
    "start": "106479",
    "end": "108320"
  },
  {
    "text": "variables you can also use the syntax in",
    "start": "108320",
    "end": "110640"
  },
  {
    "text": "for loops",
    "start": "110640",
    "end": "111360"
  },
  {
    "text": "which is awesome when you have an array",
    "start": "111360",
    "end": "112960"
  },
  {
    "text": "of objects when working with functions",
    "start": "112960",
    "end": "115040"
  },
  {
    "text": "you can destructure arrays and objects",
    "start": "115040",
    "end": "117040"
  },
  {
    "text": "passed as arguments",
    "start": "117040",
    "end": "118240"
  },
  {
    "text": "providing yet another way to obliterate",
    "start": "118240",
    "end": "120320"
  },
  {
    "text": "unnecessary lines of javascript from",
    "start": "120320",
    "end": "122000"
  },
  {
    "text": "your code base",
    "start": "122000",
    "end": "122799"
  },
  {
    "text": "this has been destructuring assignment",
    "start": "122799",
    "end": "124320"
  },
  {
    "text": "in javascript in 100 seconds",
    "start": "124320",
    "end": "126399"
  },
  {
    "text": "make sure to hit the like button it",
    "start": "126399",
    "end": "128080"
  },
  {
    "start": "128000",
    "end": "210000"
  },
  {
    "text": "really helps out these short videos",
    "start": "128080",
    "end": "129599"
  },
  {
    "text": "thanks for watching and if you want to",
    "start": "129599",
    "end": "130959"
  },
  {
    "text": "learn more hang out for a minute while",
    "start": "130959",
    "end": "132560"
  },
  {
    "text": "we go over a few more advanced tricks",
    "start": "132560",
    "end": "134400"
  },
  {
    "text": "that you may not know about",
    "start": "134400",
    "end": "136160"
  },
  {
    "text": "one thing that array destructuring",
    "start": "136160",
    "end": "137599"
  },
  {
    "text": "enables is variable swapping without the",
    "start": "137599",
    "end": "139920"
  },
  {
    "text": "need for an intermediate variable it",
    "start": "139920",
    "end": "142000"
  },
  {
    "text": "doesn't come up often in javascript but",
    "start": "142000",
    "end": "143840"
  },
  {
    "text": "it is a useful thing to know for",
    "start": "143840",
    "end": "145280"
  },
  {
    "text": "computer science in general",
    "start": "145280",
    "end": "146879"
  },
  {
    "text": "normally to swap two variables you need",
    "start": "146879",
    "end": "148959"
  },
  {
    "text": "a temporary variable because once the",
    "start": "148959",
    "end": "150720"
  },
  {
    "text": "first variable is reassigned you lose",
    "start": "150720",
    "end": "152640"
  },
  {
    "text": "its value",
    "start": "152640",
    "end": "153519"
  },
  {
    "text": "but with a radius structuring we have",
    "start": "153519",
    "end": "155040"
  },
  {
    "text": "the syntax available to perform a swap",
    "start": "155040",
    "end": "157040"
  },
  {
    "text": "without the need for the intermediate",
    "start": "157040",
    "end": "158640"
  },
  {
    "text": "variable",
    "start": "158640",
    "end": "159280"
  },
  {
    "text": "use destructuring to reassign the values",
    "start": "159280",
    "end": "162000"
  },
  {
    "text": "by putting the original two",
    "start": "162000",
    "end": "163360"
  },
  {
    "text": "in an array but in reverse order you'll",
    "start": "163360",
    "end": "166000"
  },
  {
    "text": "probably almost never do that but you",
    "start": "166000",
    "end": "167599"
  },
  {
    "text": "might be able to use it to impress",
    "start": "167599",
    "end": "168879"
  },
  {
    "text": "someone on a technical interview someday",
    "start": "168879",
    "end": "170800"
  },
  {
    "text": "the other thing i wanted to show you is",
    "start": "170800",
    "end": "172160"
  },
  {
    "text": "that destructuring can also be used with",
    "start": "172160",
    "end": "174160"
  },
  {
    "text": "regular expressions",
    "start": "174160",
    "end": "175280"
  },
  {
    "text": "when you run the match function on a",
    "start": "175280",
    "end": "176720"
  },
  {
    "text": "string it returns an array of results",
    "start": "176720",
    "end": "178879"
  },
  {
    "text": "you can then easily provide descriptive",
    "start": "178879",
    "end": "180480"
  },
  {
    "text": "variable names for the regular",
    "start": "180480",
    "end": "181920"
  },
  {
    "text": "expression matches",
    "start": "181920",
    "end": "183360"
  },
  {
    "text": "that's cool but i have one last thing to",
    "start": "183360",
    "end": "185040"
  },
  {
    "text": "mention imagine you want to destructure",
    "start": "185040",
    "end": "186959"
  },
  {
    "text": "an object",
    "start": "186959",
    "end": "187760"
  },
  {
    "text": "but you don't know the property name",
    "start": "187760",
    "end": "189280"
  },
  {
    "text": "until runtime you can use computed",
    "start": "189280",
    "end": "191599"
  },
  {
    "text": "properties in destructuring",
    "start": "191599",
    "end": "193040"
  },
  {
    "text": "just like you can with object literals",
    "start": "193040",
    "end": "195680"
  },
  {
    "text": "by wrapping a property name in brackets",
    "start": "195680",
    "end": "197519"
  },
  {
    "text": "it now takes a variable as its value",
    "start": "197519",
    "end": "199840"
  },
  {
    "text": "instead of a static name",
    "start": "199840",
    "end": "201440"
  },
  {
    "text": "in other words it's computed at runtime",
    "start": "201440",
    "end": "204000"
  },
  {
    "text": "which you can then follow with a colon",
    "start": "204000",
    "end": "205599"
  },
  {
    "text": "to provide it with a static variable",
    "start": "205599",
    "end": "207280"
  },
  {
    "text": "name to use in your code and that's",
    "start": "207280",
    "end": "208720"
  },
  {
    "text": "pretty much everything i know about",
    "start": "208720",
    "end": "210080"
  },
  {
    "text": "destructuring",
    "start": "210080",
    "end": "212799"
  }
]