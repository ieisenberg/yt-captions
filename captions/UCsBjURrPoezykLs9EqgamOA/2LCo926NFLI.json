[
  {
    "text": "reactive X has revolutionized the way",
    "start": "30",
    "end": "2190"
  },
  {
    "text": "modern developers think about building",
    "start": "2190",
    "end": "3750"
  },
  {
    "text": "apps it allows us to treat all data as a",
    "start": "3750",
    "end": "6120"
  },
  {
    "text": "stream as it unfolds through the",
    "start": "6120",
    "end": "7980"
  },
  {
    "text": "dimension of time in this lesson I'm",
    "start": "7980",
    "end": "10050"
  },
  {
    "text": "going to cover about 25 different ways",
    "start": "10050",
    "end": "11670"
  },
  {
    "text": "you can use our XJS so you have a solid",
    "start": "11670",
    "end": "13769"
  },
  {
    "text": "foundation to use it in your own",
    "start": "13769",
    "end": "15269"
  },
  {
    "text": "projects for this tutorial I've just",
    "start": "15269",
    "end": "17430"
  },
  {
    "text": "created a basic HTML page and imported",
    "start": "17430",
    "end": "20279"
  },
  {
    "text": "the rxjs script from a CDN in the head",
    "start": "20279",
    "end": "22769"
  },
  {
    "text": "of that page then we'll write all of our",
    "start": "22769",
    "end": "24750"
  },
  {
    "text": "custom code in this lesson J's file and",
    "start": "24750",
    "end": "27240"
  },
  {
    "text": "import that in the body of the page then",
    "start": "27240",
    "end": "29609"
  },
  {
    "text": "inside lesson Jas I'm creating a helper",
    "start": "29609",
    "end": "31590"
  },
  {
    "text": "function that will just append the",
    "start": "31590",
    "end": "33059"
  },
  {
    "text": "results from an observable to the",
    "start": "33059",
    "end": "34620"
  },
  {
    "text": "browser on the right side here so when",
    "start": "34620",
    "end": "36750"
  },
  {
    "text": "you see me use the print function it's",
    "start": "36750",
    "end": "38100"
  },
  {
    "text": "to add the values to the browser here on",
    "start": "38100",
    "end": "39989"
  },
  {
    "text": "the right the first thing we're going to",
    "start": "39989",
    "end": "41489"
  },
  {
    "text": "talk about is the observable and I think",
    "start": "41489",
    "end": "43620"
  },
  {
    "text": "the easiest way to think about it is",
    "start": "43620",
    "end": "44940"
  },
  {
    "text": "just an array that gets built over time",
    "start": "44940",
    "end": "47070"
  },
  {
    "text": "and you can loop over this array in the",
    "start": "47070",
    "end": "49079"
  },
  {
    "text": "dimension of time by subscribing to it",
    "start": "49079",
    "end": "51170"
  },
  {
    "text": "the first thing we're gonna do is create",
    "start": "51170",
    "end": "53520"
  },
  {
    "text": "an observable from scratch",
    "start": "53520",
    "end": "55079"
  },
  {
    "text": "we do this by calling our X dot",
    "start": "55079",
    "end": "57390"
  },
  {
    "text": "observable create and then create takes",
    "start": "57390",
    "end": "60510"
  },
  {
    "text": "a observer function where we can define",
    "start": "60510",
    "end": "62730"
  },
  {
    "text": "what the observable sends to the",
    "start": "62730",
    "end": "64739"
  },
  {
    "text": "subscriber to send values you call",
    "start": "64739",
    "end": "67020"
  },
  {
    "text": "observer next with the value you want to",
    "start": "67020",
    "end": "69150"
  },
  {
    "text": "send and that value can be anything it",
    "start": "69150",
    "end": "70860"
  },
  {
    "text": "could be a string and object or whatever",
    "start": "70860",
    "end": "72630"
  },
  {
    "text": "you want then to make the observable",
    "start": "72630",
    "end": "75030"
  },
  {
    "text": "start emitting values you call subscribe",
    "start": "75030",
    "end": "77130"
  },
  {
    "text": "on it in this case we'll take each value",
    "start": "77130",
    "end": "78930"
  },
  {
    "text": "and just print it to the screen if we",
    "start": "78930",
    "end": "81330"
  },
  {
    "text": "refresh our page you can see we get",
    "start": "81330",
    "end": "83189"
  },
  {
    "text": "hello world print it to the screen so",
    "start": "83189",
    "end": "85619"
  },
  {
    "text": "that's pretty cool but we don't normally",
    "start": "85619",
    "end": "87330"
  },
  {
    "text": "need to create observables manually like",
    "start": "87330",
    "end": "89460"
  },
  {
    "text": "this let's say we wanted to create an",
    "start": "89460",
    "end": "91560"
  },
  {
    "text": "observable from click events in the Dom",
    "start": "91560",
    "end": "93270"
  },
  {
    "text": "we can call observable from event pass",
    "start": "93270",
    "end": "96090"
  },
  {
    "text": "at the document and the event we want to",
    "start": "96090",
    "end": "98070"
  },
  {
    "text": "observe in this case clicks so just like",
    "start": "98070",
    "end": "100350"
  },
  {
    "text": "before we subscribe to it but at this",
    "start": "100350",
    "end": "102420"
  },
  {
    "text": "time we'll console.log it just to show",
    "start": "102420",
    "end": "103649"
  },
  {
    "text": "the full event object each time we click",
    "start": "103649",
    "end": "105750"
  },
  {
    "text": "the page we get the mouse event logged",
    "start": "105750",
    "end": "107430"
  },
  {
    "text": "along with all of its associated data if",
    "start": "107430",
    "end": "110070"
  },
  {
    "text": "you work with asynchronous JavaScript",
    "start": "110070",
    "end": "111600"
  },
  {
    "text": "you're probably used to working with",
    "start": "111600",
    "end": "112590"
  },
  {
    "text": "promises and we can convert a promise",
    "start": "112590",
    "end": "115320"
  },
  {
    "text": "directly into an observable so here",
    "start": "115320",
    "end": "117810"
  },
  {
    "text": "we're just creating a promise with a",
    "start": "117810",
    "end": "119579"
  },
  {
    "text": "timeout that resolves after one second",
    "start": "119579",
    "end": "121890"
  },
  {
    "text": "the idea here is to simulate an API call",
    "start": "121890",
    "end": "124259"
  },
  {
    "text": "or some other asynchronous operation to",
    "start": "124259",
    "end": "126750"
  },
  {
    "text": "convert this promise to an observable we",
    "start": "126750",
    "end": "128340"
  },
  {
    "text": "just call observable from promise and",
    "start": "128340",
    "end": "130770"
  },
  {
    "text": "pass it the promise this is extremely",
    "start": "130770",
    "end": "133050"
  },
  {
    "text": "useful when you're",
    "start": "133050",
    "end": "133950"
  },
  {
    "text": "working with a JavaScript library that's",
    "start": "133950",
    "end": "135629"
  },
  {
    "text": "built on promises you can also convert",
    "start": "135629",
    "end": "137730"
  },
  {
    "text": "the observable back to a promise by",
    "start": "137730",
    "end": "139410"
  },
  {
    "text": "calling to promise on it so when we",
    "start": "139410",
    "end": "141810"
  },
  {
    "text": "subscribe to this observable we get a",
    "start": "141810",
    "end": "143550"
  },
  {
    "text": "one-second delay and then it prints",
    "start": "143550",
    "end": "145440"
  },
  {
    "text": "resolved on the page we can also create",
    "start": "145440",
    "end": "148319"
  },
  {
    "text": "a timer by calling observable timer with",
    "start": "148319",
    "end": "150720"
  },
  {
    "text": "the amount of milliseconds we want to",
    "start": "150720",
    "end": "152459"
  },
  {
    "text": "wind it up for to start the timer we",
    "start": "152459",
    "end": "154920"
  },
  {
    "text": "just call subscribe on it and then it",
    "start": "154920",
    "end": "156750"
  },
  {
    "text": "will emit a value once the timer runs",
    "start": "156750",
    "end": "159180"
  },
  {
    "text": "out so we refresh the page and one",
    "start": "159180",
    "end": "162000"
  },
  {
    "text": "second later our timer runs out if we",
    "start": "162000",
    "end": "164459"
  },
  {
    "text": "want a timer that keeps repeating we can",
    "start": "164459",
    "end": "165989"
  },
  {
    "text": "use an interval which emits a value",
    "start": "165989",
    "end": "167849"
  },
  {
    "text": "after the specified time frame so every",
    "start": "167849",
    "end": "170519"
  },
  {
    "text": "1000 milliseconds we'll get a new value",
    "start": "170519",
    "end": "172530"
  },
  {
    "text": "emitted in this case here we'll print",
    "start": "172530",
    "end": "174870"
  },
  {
    "text": "out a date with the number of seconds in",
    "start": "174870",
    "end": "177269"
  },
  {
    "text": "the minute to show how this works we",
    "start": "177269",
    "end": "179519"
  },
  {
    "text": "reload the page and then every second we",
    "start": "179519",
    "end": "181920"
  },
  {
    "text": "get a new value emitted from the",
    "start": "181920",
    "end": "183239"
  },
  {
    "text": "observable now I'm going to show you one",
    "start": "183239",
    "end": "185549"
  },
  {
    "text": "last way to create an observable there's",
    "start": "185549",
    "end": "187230"
  },
  {
    "text": "actually more ways than this but I think",
    "start": "187230",
    "end": "188730"
  },
  {
    "text": "this covers the basics for now so we'll",
    "start": "188730",
    "end": "191430"
  },
  {
    "text": "do observable of which allows us to pass",
    "start": "191430",
    "end": "193980"
  },
  {
    "text": "any static value we want to be",
    "start": "193980",
    "end": "195900"
  },
  {
    "text": "observable so we'll go ahead and pass it",
    "start": "195900",
    "end": "197940"
  },
  {
    "text": "a string and array a number a boolean",
    "start": "197940",
    "end": "201030"
  },
  {
    "text": "and an object this example shows how any",
    "start": "201030",
    "end": "204600"
  },
  {
    "text": "type of data can be a stream which is an",
    "start": "204600",
    "end": "206790"
  },
  {
    "text": "important concept to keep in mind when",
    "start": "206790",
    "end": "208470"
  },
  {
    "text": "building reactive software the next",
    "start": "208470",
    "end": "211709"
  },
  {
    "text": "concept will look at is hot versus cold",
    "start": "211709",
    "end": "213480"
  },
  {
    "text": "observables a cold observable is",
    "start": "213480",
    "end": "216329"
  },
  {
    "text": "basically just an observable where the",
    "start": "216329",
    "end": "218760"
  },
  {
    "text": "data is created inside of it so this",
    "start": "218760",
    "end": "221370"
  },
  {
    "text": "means it won't actually create the",
    "start": "221370",
    "end": "222750"
  },
  {
    "text": "underlying data until something",
    "start": "222750",
    "end": "224400"
  },
  {
    "text": "subscribes to it inside this observable",
    "start": "224400",
    "end": "226620"
  },
  {
    "text": "I'm just generating a random number and",
    "start": "226620",
    "end": "228660"
  },
  {
    "text": "then I'll create two different",
    "start": "228660",
    "end": "230160"
  },
  {
    "text": "subscribers and you might intuitively",
    "start": "230160",
    "end": "232079"
  },
  {
    "text": "think that they should get the same",
    "start": "232079",
    "end": "233190"
  },
  {
    "text": "value but what happens is the random",
    "start": "233190",
    "end": "235590"
  },
  {
    "text": "number gets generated once the",
    "start": "235590",
    "end": "236790"
  },
  {
    "text": "subscription starts so each subscriber",
    "start": "236790",
    "end": "238829"
  },
  {
    "text": "gets a different number that's how you",
    "start": "238829",
    "end": "240989"
  },
  {
    "text": "know you're working with a cold",
    "start": "240989",
    "end": "242220"
  },
  {
    "text": "observable but you can make an",
    "start": "242220",
    "end": "244109"
  },
  {
    "text": "observable hot by simply building that",
    "start": "244109",
    "end": "246510"
  },
  {
    "text": "value outside of the observable itself",
    "start": "246510",
    "end": "248760"
  },
  {
    "text": "so here we set the random number outside",
    "start": "248760",
    "end": "251099"
  },
  {
    "text": "the observable and then pass it in as a",
    "start": "251099",
    "end": "253109"
  },
  {
    "text": "variable reload the page and then we'll",
    "start": "253109",
    "end": "255060"
  },
  {
    "text": "see both subscribers get the same random",
    "start": "255060",
    "end": "257130"
  },
  {
    "text": "number that technically makes our",
    "start": "257130",
    "end": "259109"
  },
  {
    "text": "observable hot but there is a way to do",
    "start": "259109",
    "end": "261510"
  },
  {
    "text": "this without decoupling the data from",
    "start": "261510",
    "end": "263370"
  },
  {
    "text": "the observable itself so we'll put the",
    "start": "263370",
    "end": "265380"
  },
  {
    "text": "random number back in the observable",
    "start": "265380",
    "end": "266610"
  },
  {
    "text": "then",
    "start": "266610",
    "end": "267620"
  },
  {
    "text": "will create a new hot observable by",
    "start": "267620",
    "end": "269270"
  },
  {
    "text": "calling publish on the cold observable",
    "start": "269270",
    "end": "271310"
  },
  {
    "text": "this tells it only to emit data once we",
    "start": "271310",
    "end": "273740"
  },
  {
    "text": "called a corresponding connect method on",
    "start": "273740",
    "end": "275630"
  },
  {
    "text": "it so we'll build the subscriptions and",
    "start": "275630",
    "end": "277639"
  },
  {
    "text": "at this point nothing will happen then",
    "start": "277639",
    "end": "279620"
  },
  {
    "text": "call connect on the hot observable and",
    "start": "279620",
    "end": "281449"
  },
  {
    "text": "that will trigger these subscriptions to",
    "start": "281449",
    "end": "283370"
  },
  {
    "text": "emit data and this time it'll be shared",
    "start": "283370",
    "end": "285380"
  },
  {
    "text": "between the two of them and we can",
    "start": "285380",
    "end": "287090"
  },
  {
    "text": "verify this by reloading the page and",
    "start": "287090",
    "end": "289010"
  },
  {
    "text": "they should get the same random number",
    "start": "289010",
    "end": "290389"
  },
  {
    "text": "the next thing you should know is how to",
    "start": "290389",
    "end": "292370"
  },
  {
    "text": "complete an observable when the",
    "start": "292370",
    "end": "294500"
  },
  {
    "text": "observable has reached the end of its",
    "start": "294500",
    "end": "295699"
  },
  {
    "text": "life cycle it will send a completed",
    "start": "295699",
    "end": "297620"
  },
  {
    "text": "signal we can see this with a timer",
    "start": "297620",
    "end": "299419"
  },
  {
    "text": "using the finally operator which will",
    "start": "299419",
    "end": "302449"
  },
  {
    "text": "run the code once the observable is",
    "start": "302449",
    "end": "304190"
  },
  {
    "text": "completed in this case it will be",
    "start": "304190",
    "end": "305900"
  },
  {
    "text": "completed after one second so we",
    "start": "305900",
    "end": "308120"
  },
  {
    "text": "subscribe and then we get the all done",
    "start": "308120",
    "end": "310160"
  },
  {
    "text": "signal back however there are other",
    "start": "310160",
    "end": "312680"
  },
  {
    "text": "observables that won't complete",
    "start": "312680",
    "end": "314240"
  },
  {
    "text": "automatically and in some cases this can",
    "start": "314240",
    "end": "316490"
  },
  {
    "text": "result in memory leaks if it's a very",
    "start": "316490",
    "end": "318560"
  },
  {
    "text": "data-intensive stream here we have an",
    "start": "318560",
    "end": "321110"
  },
  {
    "text": "interval which doesn't complete on its",
    "start": "321110",
    "end": "322669"
  },
  {
    "text": "own so what we do is subscribe to it",
    "start": "322669",
    "end": "325100"
  },
  {
    "text": "first then set a timeout for three",
    "start": "325100",
    "end": "327169"
  },
  {
    "text": "seconds and call unsubscribe this",
    "start": "327169",
    "end": "329960"
  },
  {
    "text": "manually forces the observable to send",
    "start": "329960",
    "end": "332000"
  },
  {
    "text": "the complete signal there's also more",
    "start": "332000",
    "end": "333860"
  },
  {
    "text": "clever ways to do this which we're going",
    "start": "333860",
    "end": "335300"
  },
  {
    "text": "to see a little bit later in the lesson",
    "start": "335300",
    "end": "337210"
  },
  {
    "text": "now we're going to look at a whole bunch",
    "start": "337210",
    "end": "339050"
  },
  {
    "text": "of rxjs operators starting with map map",
    "start": "339050",
    "end": "342740"
  },
  {
    "text": "allows you to transform the emitted",
    "start": "342740",
    "end": "344479"
  },
  {
    "text": "value based on some underlying logic in",
    "start": "344479",
    "end": "346970"
  },
  {
    "text": "this case we created an observable of",
    "start": "346970",
    "end": "348650"
  },
  {
    "text": "some numbers and we're going to",
    "start": "348650",
    "end": "350090"
  },
  {
    "text": "transform them to their logarithm so",
    "start": "350090",
    "end": "352729"
  },
  {
    "text": "when we subscribe instead of getting the",
    "start": "352729",
    "end": "354320"
  },
  {
    "text": "actual numbers we get the log of that",
    "start": "354320",
    "end": "356300"
  },
  {
    "text": "number a more practical example for app",
    "start": "356300",
    "end": "359000"
  },
  {
    "text": "developers is when you send an API",
    "start": "359000",
    "end": "360979"
  },
  {
    "text": "request that responds in JSON you need",
    "start": "360979",
    "end": "364099"
  },
  {
    "text": "to convert the JSON string to JavaScript",
    "start": "364099",
    "end": "366440"
  },
  {
    "text": "so what you can do is use the map",
    "start": "366440",
    "end": "368120"
  },
  {
    "text": "operator to run json.parse on that",
    "start": "368120",
    "end": "370970"
  },
  {
    "text": "string from the API then the observable",
    "start": "370970",
    "end": "373880"
  },
  {
    "text": "will you met JavaScript objects that you",
    "start": "373880",
    "end": "375830"
  },
  {
    "text": "can actually use in your app the next",
    "start": "375830",
    "end": "378139"
  },
  {
    "text": "operator we're going to look at is do",
    "start": "378139",
    "end": "379880"
  },
  {
    "text": "this will allow us to execute code",
    "start": "379880",
    "end": "382010"
  },
  {
    "text": "without affecting the underlying",
    "start": "382010",
    "end": "383840"
  },
  {
    "text": "observable so we create observable of a",
    "start": "383840",
    "end": "386270"
  },
  {
    "text": "couple strings and then we'll print out",
    "start": "386270",
    "end": "387979"
  },
  {
    "text": "their names as they first appear then",
    "start": "387979",
    "end": "390199"
  },
  {
    "text": "we'll transform them to uppercase and",
    "start": "390199",
    "end": "392479"
  },
  {
    "text": "then we'll print them again when we",
    "start": "392479",
    "end": "395000"
  },
  {
    "text": "actually run this code you can see that",
    "start": "395000",
    "end": "396380"
  },
  {
    "text": "it gives us a glimpse into the",
    "start": "396380",
    "end": "397729"
  },
  {
    "text": "observable data at any given point in",
    "start": "397729",
    "end": "400010"
  },
  {
    "text": "time so here we see the",
    "start": "400010",
    "end": "401810"
  },
  {
    "text": "value and the upper case value now let's",
    "start": "401810",
    "end": "405260"
  },
  {
    "text": "take a look at filter this does pretty",
    "start": "405260",
    "end": "406940"
  },
  {
    "text": "much what you'd expect you give it a",
    "start": "406940",
    "end": "408710"
  },
  {
    "text": "condition and only values meeting that",
    "start": "408710",
    "end": "410870"
  },
  {
    "text": "condition make it through so here we",
    "start": "410870",
    "end": "413060"
  },
  {
    "text": "have an observable of a bunch of",
    "start": "413060",
    "end": "414440"
  },
  {
    "text": "positive and negative numbers and we'll",
    "start": "414440",
    "end": "416930"
  },
  {
    "text": "filter it to only show the positive",
    "start": "416930",
    "end": "418430"
  },
  {
    "text": "numbers so only value is greater than or",
    "start": "418430",
    "end": "421760"
  },
  {
    "text": "equal to zero will be displayed and we",
    "start": "421760",
    "end": "424250"
  },
  {
    "text": "reload the page and we only see the",
    "start": "424250",
    "end": "426230"
  },
  {
    "text": "positive numbers if we flip greater than",
    "start": "426230",
    "end": "428900"
  },
  {
    "text": "to less than then we get only the",
    "start": "428900",
    "end": "430970"
  },
  {
    "text": "negative numbers displayed using this",
    "start": "430970",
    "end": "433850"
  },
  {
    "text": "same example I'm going to show you the",
    "start": "433850",
    "end": "435380"
  },
  {
    "text": "first and last operator the first",
    "start": "435380",
    "end": "437720"
  },
  {
    "text": "operator will just take the very first",
    "start": "437720",
    "end": "439760"
  },
  {
    "text": "element from the observable in this case",
    "start": "439760",
    "end": "442820"
  },
  {
    "text": "the first element is negative three so",
    "start": "442820",
    "end": "444650"
  },
  {
    "text": "that's what we see here on the screen we",
    "start": "444650",
    "end": "446630"
  },
  {
    "text": "can also do the inverse of this with the",
    "start": "446630",
    "end": "448550"
  },
  {
    "text": "last operator and negative two is the",
    "start": "448550",
    "end": "451460"
  },
  {
    "text": "last element so we'll see it updated to",
    "start": "451460",
    "end": "453620"
  },
  {
    "text": "negative two now let's take a look at D",
    "start": "453620",
    "end": "456650"
  },
  {
    "text": "balance and throttle these two operators",
    "start": "456650",
    "end": "458990"
  },
  {
    "text": "allow you to deal with events that you",
    "start": "458990",
    "end": "460850"
  },
  {
    "text": "met way more values than you actually",
    "start": "460850",
    "end": "462290"
  },
  {
    "text": "need",
    "start": "462290",
    "end": "462770"
  },
  {
    "text": "the mousemove event is a perfect example",
    "start": "462770",
    "end": "465500"
  },
  {
    "text": "in the Dom so we'll subscribe to the",
    "start": "465500",
    "end": "467360"
  },
  {
    "text": "mouse event and then we'll print the",
    "start": "467360",
    "end": "469130"
  },
  {
    "text": "type of event here on the screen let's",
    "start": "469130",
    "end": "471440"
  },
  {
    "text": "first do this without any throttling or",
    "start": "471440",
    "end": "473150"
  },
  {
    "text": "debouncing you can see it only takes",
    "start": "473150",
    "end": "475280"
  },
  {
    "text": "about two seconds to get hundreds of",
    "start": "475280",
    "end": "476780"
  },
  {
    "text": "events printed here on the screen we can",
    "start": "476780",
    "end": "479030"
  },
  {
    "text": "use throttle to get the very first event",
    "start": "479030",
    "end": "481160"
  },
  {
    "text": "and then set a delay before it starts",
    "start": "481160",
    "end": "483110"
  },
  {
    "text": "emitting any other events in this case",
    "start": "483110",
    "end": "485360"
  },
  {
    "text": "we'll use the throttle time helper and",
    "start": "485360",
    "end": "487160"
  },
  {
    "text": "pass it 1000 milliseconds so now if we",
    "start": "487160",
    "end": "490310"
  },
  {
    "text": "mouse over the screen we'll get the",
    "start": "490310",
    "end": "491570"
  },
  {
    "text": "first event and then it will wait at",
    "start": "491570",
    "end": "493580"
  },
  {
    "text": "least one second before sending any",
    "start": "493580",
    "end": "495229"
  },
  {
    "text": "additional events debounce does almost",
    "start": "495229",
    "end": "498139"
  },
  {
    "text": "the same exact thing but instead of",
    "start": "498139",
    "end": "500000"
  },
  {
    "text": "giving us the first event it gives us",
    "start": "500000",
    "end": "501889"
  },
  {
    "text": "the last event so first we mouse over",
    "start": "501889",
    "end": "503870"
  },
  {
    "text": "and there's a delay then after that",
    "start": "503870",
    "end": "505970"
  },
  {
    "text": "delay it will emit the most recent event",
    "start": "505970",
    "end": "508039"
  },
  {
    "text": "debounce is especially useful when you",
    "start": "508039",
    "end": "510080"
  },
  {
    "text": "want to make sure the user is stopped",
    "start": "510080",
    "end": "511280"
  },
  {
    "text": "doing something such as typing in an",
    "start": "511280",
    "end": "513110"
  },
  {
    "text": "autocomplete form or something similar",
    "start": "513110",
    "end": "515620"
  },
  {
    "text": "now we're going to move on to the scan",
    "start": "515620",
    "end": "518089"
  },
  {
    "text": "operator this one seems confusing at",
    "start": "518089",
    "end": "520490"
  },
  {
    "text": "first but it's actually very simple",
    "start": "520490",
    "end": "521900"
  },
  {
    "text": "we're going to do this in the context of",
    "start": "521900",
    "end": "524000"
  },
  {
    "text": "a video game so first we're gonna",
    "start": "524000",
    "end": "525860"
  },
  {
    "text": "subscribe to the click events in the",
    "start": "525860",
    "end": "528050"
  },
  {
    "text": "browser and then for each click we're",
    "start": "528050",
    "end": "530420"
  },
  {
    "text": "gonna assign a random number that's",
    "start": "530420",
    "end": "532130"
  },
  {
    "text": "going to represent the score for that",
    "start": "532130",
    "end": "534410"
  },
  {
    "text": "click",
    "start": "534410",
    "end": "534930"
  },
  {
    "text": "then we'll use the do operator to print",
    "start": "534930",
    "end": "537060"
  },
  {
    "text": "that score on the screen and then will",
    "start": "537060",
    "end": "539160"
  },
  {
    "text": "you scan to keep a running total of the",
    "start": "539160",
    "end": "541560"
  },
  {
    "text": "high score which is just the combined",
    "start": "541560",
    "end": "543690"
  },
  {
    "text": "score up all the clicks so scan is just",
    "start": "543690",
    "end": "546630"
  },
  {
    "text": "keeping a running total of each emitted",
    "start": "546630",
    "end": "548670"
  },
  {
    "text": "value from the observable it works just",
    "start": "548670",
    "end": "550800"
  },
  {
    "text": "like the array reduced function and",
    "start": "550800",
    "end": "553020"
  },
  {
    "text": "vanilla JavaScript so we'll go ahead and",
    "start": "553020",
    "end": "555209"
  },
  {
    "text": "print out the high score here and we",
    "start": "555209",
    "end": "556740"
  },
  {
    "text": "should see it get increasingly larger",
    "start": "556740",
    "end": "558660"
  },
  {
    "text": "with each additional click so on that",
    "start": "558660",
    "end": "561330"
  },
  {
    "text": "first click the high score and the click",
    "start": "561330",
    "end": "562709"
  },
  {
    "text": "score are the same and then the high",
    "start": "562709",
    "end": "564180"
  },
  {
    "text": "score gets increasingly larger with each",
    "start": "564180",
    "end": "566459"
  },
  {
    "text": "additional click now let's move on to",
    "start": "566459",
    "end": "569010"
  },
  {
    "text": "switch map this operator is especially",
    "start": "569010",
    "end": "571350"
  },
  {
    "text": "useful when you have one observable that",
    "start": "571350",
    "end": "573149"
  },
  {
    "text": "you need a value from before you can get",
    "start": "573149",
    "end": "574649"
  },
  {
    "text": "a second observable in this example we",
    "start": "574649",
    "end": "577529"
  },
  {
    "text": "have an observable of clicks but we",
    "start": "577529",
    "end": "579209"
  },
  {
    "text": "actually don't care about the click data",
    "start": "579209",
    "end": "580709"
  },
  {
    "text": "we want to start an interval timer after",
    "start": "580709",
    "end": "583200"
  },
  {
    "text": "each click so on the first click the",
    "start": "583200",
    "end": "585600"
  },
  {
    "text": "interval should start and then when we",
    "start": "585600",
    "end": "587459"
  },
  {
    "text": "get a new click it'll reset the interval",
    "start": "587459",
    "end": "589500"
  },
  {
    "text": "back to zero",
    "start": "589500",
    "end": "590370"
  },
  {
    "text": "so we'll go ahead and click the page and",
    "start": "590370",
    "end": "592620"
  },
  {
    "text": "then we'll let the interval count up to",
    "start": "592620",
    "end": "594450"
  },
  {
    "text": "6 and then click again and it'll reset",
    "start": "594450",
    "end": "597029"
  },
  {
    "text": "back to zero",
    "start": "597029",
    "end": "597899"
  },
  {
    "text": "switch map is commonly used in app",
    "start": "597899",
    "end": "599910"
  },
  {
    "text": "development when you have an observable",
    "start": "599910",
    "end": "601770"
  },
  {
    "text": "of say a user ID and then you need that",
    "start": "601770",
    "end": "604140"
  },
  {
    "text": "user ID first before querying a database",
    "start": "604140",
    "end": "606750"
  },
  {
    "text": "for that users data the next operator is",
    "start": "606750",
    "end": "610110"
  },
  {
    "text": "take until this one allows us to",
    "start": "610110",
    "end": "612570"
  },
  {
    "text": "complete an observable based on the",
    "start": "612570",
    "end": "614730"
  },
  {
    "text": "value of another observable so here we",
    "start": "614730",
    "end": "616920"
  },
  {
    "text": "have an interval and a timer the",
    "start": "616920",
    "end": "619080"
  },
  {
    "text": "interval is going to emit values every",
    "start": "619080",
    "end": "620940"
  },
  {
    "text": "500 milliseconds until the timer runs",
    "start": "620940",
    "end": "623520"
  },
  {
    "text": "out after 2 seconds this is a clever way",
    "start": "623520",
    "end": "626370"
  },
  {
    "text": "to unsubscribe from data without",
    "start": "626370",
    "end": "628080"
  },
  {
    "text": "actually having to call unsubscribe on",
    "start": "628080",
    "end": "630300"
  },
  {
    "text": "the observable itself so here we get the",
    "start": "630300",
    "end": "633060"
  },
  {
    "text": "first few emitted values then the timer",
    "start": "633060",
    "end": "634709"
  },
  {
    "text": "runs out and so it logs complete a",
    "start": "634709",
    "end": "637400"
  },
  {
    "text": "closely related operator is take while",
    "start": "637400",
    "end": "640079"
  },
  {
    "text": "this one will tell the observable to",
    "start": "640079",
    "end": "642360"
  },
  {
    "text": "emit values until a certain condition",
    "start": "642360",
    "end": "644579"
  },
  {
    "text": "turns true in this example we have a",
    "start": "644579",
    "end": "647010"
  },
  {
    "text": "collection of names and we want to stop",
    "start": "647010",
    "end": "649470"
  },
  {
    "text": "the observable once it reaches the name",
    "start": "649470",
    "end": "651149"
  },
  {
    "text": "of dugg in other words we want it to",
    "start": "651149",
    "end": "653160"
  },
  {
    "text": "take values while the name does not",
    "start": "653160",
    "end": "654870"
  },
  {
    "text": "equal done then we'll use the finally",
    "start": "654870",
    "end": "657270"
  },
  {
    "text": "operator to verify that the observable",
    "start": "657270",
    "end": "659279"
  },
  {
    "text": "completed successfully",
    "start": "659279",
    "end": "660570"
  },
  {
    "text": "so when we run this in the browser we",
    "start": "660570",
    "end": "662730"
  },
  {
    "text": "can see we only get the values that came",
    "start": "662730",
    "end": "664529"
  },
  {
    "text": "before Doug now let's look at a few ways",
    "start": "664529",
    "end": "667920"
  },
  {
    "text": "we can can",
    "start": "667920",
    "end": "668760"
  },
  {
    "text": "observables starting with zip zip is",
    "start": "668760",
    "end": "671670"
  },
  {
    "text": "something that might be useful if you",
    "start": "671670",
    "end": "672870"
  },
  {
    "text": "have two observables that are the same",
    "start": "672870",
    "end": "674490"
  },
  {
    "text": "length and connected in some kind of way",
    "start": "674490",
    "end": "676760"
  },
  {
    "text": "so here we have observables yin and yang",
    "start": "676760",
    "end": "679530"
  },
  {
    "text": "and we're going to combine them with zip",
    "start": "679530",
    "end": "682100"
  },
  {
    "text": "which will combine them into arrays",
    "start": "682100",
    "end": "684450"
  },
  {
    "text": "based on their index position in the",
    "start": "684450",
    "end": "686550"
  },
  {
    "text": "observable so peanut butter will be",
    "start": "686550",
    "end": "688560"
  },
  {
    "text": "matched with jelly wine with cheese",
    "start": "688560",
    "end": "690180"
  },
  {
    "text": "rainbows with unicorns another way to",
    "start": "690180",
    "end": "693960"
  },
  {
    "text": "merge observables is with fork join this",
    "start": "693960",
    "end": "696570"
  },
  {
    "text": "one will wait for both of the",
    "start": "696570",
    "end": "698070"
  },
  {
    "text": "observables to complete and then it will",
    "start": "698070",
    "end": "700290"
  },
  {
    "text": "combine the last two values together so",
    "start": "700290",
    "end": "703200"
  },
  {
    "text": "I'm going to put a delay on the yang",
    "start": "703200",
    "end": "704730"
  },
  {
    "text": "observable then we'll use the fork join",
    "start": "704730",
    "end": "707940"
  },
  {
    "text": "operator to combine them just like zip",
    "start": "707940",
    "end": "710060"
  },
  {
    "text": "but at this time we should see a",
    "start": "710060",
    "end": "712020"
  },
  {
    "text": "two-second delay and then only the last",
    "start": "712020",
    "end": "714270"
  },
  {
    "text": "two values rainbows and unicorns should",
    "start": "714270",
    "end": "716310"
  },
  {
    "text": "be emitted this operator is useful if",
    "start": "716310",
    "end": "718410"
  },
  {
    "text": "you have a bunch of related API calls",
    "start": "718410",
    "end": "720240"
  },
  {
    "text": "and you want to wait for all of them to",
    "start": "720240",
    "end": "721890"
  },
  {
    "text": "resolve before sending any data through",
    "start": "721890",
    "end": "724020"
  },
  {
    "text": "to the UI now we're going to look at",
    "start": "724020",
    "end": "726720"
  },
  {
    "text": "catch for handling errors in this",
    "start": "726720",
    "end": "729450"
  },
  {
    "text": "example I create a new observable from",
    "start": "729450",
    "end": "731400"
  },
  {
    "text": "scratch but in the middle of it I throw",
    "start": "731400",
    "end": "733710"
  },
  {
    "text": "an error when we get errors in the real",
    "start": "733710",
    "end": "736020"
  },
  {
    "text": "world we want to be able to catch them",
    "start": "736020",
    "end": "737820"
  },
  {
    "text": "and then do some error handling in this",
    "start": "737820",
    "end": "740250"
  },
  {
    "text": "case we'll use the catch operator to",
    "start": "740250",
    "end": "742020"
  },
  {
    "text": "complete the observable and just print",
    "start": "742020",
    "end": "744330"
  },
  {
    "text": "out the error so notice that we get the",
    "start": "744330",
    "end": "747030"
  },
  {
    "text": "first three values in the observable but",
    "start": "747030",
    "end": "748860"
  },
  {
    "text": "the very last one doesn't get emitted",
    "start": "748860",
    "end": "751100"
  },
  {
    "text": "overall the idea is very similar to how",
    "start": "751100",
    "end": "753660"
  },
  {
    "text": "promises work in JavaScript we also have",
    "start": "753660",
    "end": "757230"
  },
  {
    "text": "a useful retry operator that will rerun",
    "start": "757230",
    "end": "759930"
  },
  {
    "text": "the observable as many times as we want",
    "start": "759930",
    "end": "761820"
  },
  {
    "text": "when an error is occurred so right after",
    "start": "761820",
    "end": "764670"
  },
  {
    "text": "catch we can add retry and in this case",
    "start": "764670",
    "end": "767340"
  },
  {
    "text": "we'll retry it twice when we run it this",
    "start": "767340",
    "end": "770040"
  },
  {
    "text": "time we'll get the same sequence of",
    "start": "770040",
    "end": "771300"
  },
  {
    "text": "events but they'll happen three times",
    "start": "771300",
    "end": "772770"
  },
  {
    "text": "the initial run plus the two retries so",
    "start": "772770",
    "end": "777300"
  },
  {
    "text": "that's all the operators I'm gonna cover",
    "start": "777300",
    "end": "778530"
  },
  {
    "text": "for today there's tons more in rxjs but",
    "start": "778530",
    "end": "781200"
  },
  {
    "text": "I think these are some of the most",
    "start": "781200",
    "end": "782370"
  },
  {
    "text": "useful and powerful ones that you'll",
    "start": "782370",
    "end": "783900"
  },
  {
    "text": "find we just have one more topic to",
    "start": "783900",
    "end": "786120"
  },
  {
    "text": "cover and that's the rxjs subject a",
    "start": "786120",
    "end": "789290"
  },
  {
    "text": "subject is just an observable with a few",
    "start": "789290",
    "end": "792120"
  },
  {
    "text": "extra bonus features it has the ability",
    "start": "792120",
    "end": "794430"
  },
  {
    "text": "to emit new data to its subscribers by",
    "start": "794430",
    "end": "796980"
  },
  {
    "text": "acting as a proxy to some other data",
    "start": "796980",
    "end": "799200"
  },
  {
    "text": "source this will make more sense after",
    "start": "799200",
    "end": "801570"
  },
  {
    "text": "the next couple",
    "start": "801570",
    "end": "802499"
  },
  {
    "text": "samples so here we have a plain",
    "start": "802499",
    "end": "804929"
  },
  {
    "text": "observable and we're going to convert it",
    "start": "804929",
    "end": "807239"
  },
  {
    "text": "to a subject when we subscribe to it it",
    "start": "807239",
    "end": "810449"
  },
  {
    "text": "emits the values just like a normal",
    "start": "810449",
    "end": "811859"
  },
  {
    "text": "observable would but the real benefit of",
    "start": "811859",
    "end": "814769"
  },
  {
    "text": "subject is to be able to call next on it",
    "start": "814769",
    "end": "816929"
  },
  {
    "text": "so what we do is create a new subject",
    "start": "816929",
    "end": "818819"
  },
  {
    "text": "and then we'll create us a couple of",
    "start": "818819",
    "end": "820499"
  },
  {
    "text": "subscriptions to it and then we can just",
    "start": "820499",
    "end": "822899"
  },
  {
    "text": "call subject next with some value that's",
    "start": "822899",
    "end": "825599"
  },
  {
    "text": "not something you can do on a normal",
    "start": "825599",
    "end": "826949"
  },
  {
    "text": "observable then we'll set another next",
    "start": "826949",
    "end": "829649"
  },
  {
    "text": "call inside of a timeout so the main",
    "start": "829649",
    "end": "832769"
  },
  {
    "text": "benefit of a subject is being able to",
    "start": "832769",
    "end": "834749"
  },
  {
    "text": "broadcast new values to subscribers",
    "start": "834749",
    "end": "836999"
  },
  {
    "text": "without having to rely on some source",
    "start": "836999",
    "end": "839249"
  },
  {
    "text": "data to build on this topic we're gonna",
    "start": "839249",
    "end": "842849"
  },
  {
    "text": "look at one last thing and that's",
    "start": "842849",
    "end": "844079"
  },
  {
    "text": "multicast it's used to send values to",
    "start": "844079",
    "end": "847379"
  },
  {
    "text": "multiple subscribers but not any related",
    "start": "847379",
    "end": "849809"
  },
  {
    "text": "side effects so we create a data source",
    "start": "849809",
    "end": "852629"
  },
  {
    "text": "that is the click events happening in",
    "start": "852629",
    "end": "854789"
  },
  {
    "text": "the DOM and then we use the do operator",
    "start": "854789",
    "end": "857039"
  },
  {
    "text": "to print do one time this is an example",
    "start": "857039",
    "end": "859829"
  },
  {
    "text": "of a side effect imagine we had a",
    "start": "859829",
    "end": "861479"
  },
  {
    "text": "hundred subscribers it would run this",
    "start": "861479",
    "end": "863879"
  },
  {
    "text": "code for every single one a bomb so if",
    "start": "863879",
    "end": "866729"
  },
  {
    "text": "you had a hundred clicks and a hundred",
    "start": "866729",
    "end": "868019"
  },
  {
    "text": "subscribers this code would run 10,000",
    "start": "868019",
    "end": "870569"
  },
  {
    "text": "times",
    "start": "870569",
    "end": "870959"
  },
  {
    "text": "well we actually want is for it to only",
    "start": "870959",
    "end": "872939"
  },
  {
    "text": "run on the 100 clicks coming from the",
    "start": "872939",
    "end": "875009"
  },
  {
    "text": "source observable we can do this by",
    "start": "875009",
    "end": "878039"
  },
  {
    "text": "calling multicast on the original",
    "start": "878039",
    "end": "879899"
  },
  {
    "text": "observable and have it return a new",
    "start": "879899",
    "end": "882089"
  },
  {
    "text": "subject then we can add a couple of",
    "start": "882089",
    "end": "885119"
  },
  {
    "text": "subscriptions to the subject then lastly",
    "start": "885119",
    "end": "888509"
  },
  {
    "text": "we need to call connect on that subject",
    "start": "888509",
    "end": "890809"
  },
  {
    "text": "when we start clicking in the Dom we'll",
    "start": "890809",
    "end": "893220"
  },
  {
    "text": "see that we get the values sent to the",
    "start": "893220",
    "end": "895529"
  },
  {
    "text": "subscribers and the side effect only",
    "start": "895529",
    "end": "897749"
  },
  {
    "text": "runs once even though there's multiple",
    "start": "897749",
    "end": "899429"
  },
  {
    "text": "subscribers this could be highly",
    "start": "899429",
    "end": "901349"
  },
  {
    "text": "beneficial if you have multiple",
    "start": "901349",
    "end": "902849"
  },
  {
    "text": "subscribers to a single data source that",
    "start": "902849",
    "end": "904889"
  },
  {
    "text": "is running some sort of side effect",
    "start": "904889",
    "end": "907220"
  },
  {
    "text": "that's it for my rxjs QuickStart if this",
    "start": "907220",
    "end": "910559"
  },
  {
    "text": "video helped you please like and",
    "start": "910559",
    "end": "911759"
  },
  {
    "text": "subscribe and if you want to get the",
    "start": "911759",
    "end": "913379"
  },
  {
    "text": "full source code and additional",
    "start": "913379",
    "end": "914669"
  },
  {
    "text": "commentary head over to angular firebase",
    "start": "914669",
    "end": "917009"
  },
  {
    "text": "com",
    "start": "917009",
    "end": "917729"
  },
  {
    "text": "thanks for watching and I'll see you",
    "start": "917729",
    "end": "919979"
  },
  {
    "text": "next time",
    "start": "919979",
    "end": "922309"
  },
  {
    "text": "[Music]",
    "start": "926380",
    "end": "932830"
  }
]