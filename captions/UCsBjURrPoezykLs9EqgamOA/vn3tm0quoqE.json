[
  {
    "text": "[Music]",
    "start": "140",
    "end": "6830"
  },
  {
    "text": "javascript is a single-threaded",
    "start": "6830",
    "end": "8429"
  },
  {
    "text": "programming language yet everything we",
    "start": "8429",
    "end": "10290"
  },
  {
    "text": "do on the web tends to be blocking or",
    "start": "10290",
    "end": "11969"
  },
  {
    "text": "time-consuming which means that",
    "start": "11969",
    "end": "13620"
  },
  {
    "text": "asynchronous programming is an essential",
    "start": "13620",
    "end": "15420"
  },
  {
    "text": "skill for any JavaScript developer",
    "start": "15420",
    "end": "17310"
  },
  {
    "text": "today's video will focus primarily on",
    "start": "17310",
    "end": "19380"
  },
  {
    "text": "the amazing syntactic sugar provided by",
    "start": "19380",
    "end": "21539"
  },
  {
    "text": "async await but before we can get there",
    "start": "21539",
    "end": "23640"
  },
  {
    "text": "we really need to understand things from",
    "start": "23640",
    "end": "24990"
  },
  {
    "text": "the ground up starting with the browser",
    "start": "24990",
    "end": "26789"
  },
  {
    "text": "or nodejs event loop callbacks promises",
    "start": "26789",
    "end": "29699"
  },
  {
    "text": "and then finally async await and we're",
    "start": "29699",
    "end": "31890"
  },
  {
    "text": "going to do this without making a single",
    "start": "31890",
    "end": "33540"
  },
  {
    "text": "joke about a sink or a wave if you're",
    "start": "33540",
    "end": "35760"
  },
  {
    "text": "new here like and subscribe and we'll be",
    "start": "35760",
    "end": "37320"
  },
  {
    "text": "giving away another one of a kind",
    "start": "37320",
    "end": "38550"
  },
  {
    "text": "t-shirt with this video all you have to",
    "start": "38550",
    "end": "39989"
  },
  {
    "text": "do is leave a comment below and we'll",
    "start": "39989",
    "end": "41520"
  },
  {
    "text": "pick a random winner next week in order",
    "start": "41520",
    "end": "43590"
  },
  {
    "text": "to understand anything async you really",
    "start": "43590",
    "end": "45750"
  },
  {
    "text": "need to first understand the event loop",
    "start": "45750",
    "end": "47640"
  },
  {
    "text": "this is ace I hope that clears up any",
    "start": "47640",
    "end": "50340"
  },
  {
    "text": "questions you have I'm going to give you",
    "start": "50340",
    "end": "52949"
  },
  {
    "text": "the general overview but I highly",
    "start": "52949",
    "end": "54449"
  },
  {
    "text": "recommend you watch this talk from Jake",
    "start": "54449",
    "end": "55800"
  },
  {
    "text": "Archibald which is the best explanation",
    "start": "55800",
    "end": "57510"
  },
  {
    "text": "of the event loop that I've ever seen",
    "start": "57510",
    "end": "59370"
  },
  {
    "text": "then after you're done watching that",
    "start": "59370",
    "end": "60870"
  },
  {
    "text": "talk you should check out Stephen",
    "start": "60870",
    "end": "62190"
  },
  {
    "text": "fluence demos with angular Channel which",
    "start": "62190",
    "end": "64170"
  },
  {
    "text": "just released a video about callbacks",
    "start": "64170",
    "end": "65670"
  },
  {
    "text": "which are one of the things that happen",
    "start": "65670",
    "end": "67170"
  },
  {
    "text": "within the event loop so what is the",
    "start": "67170",
    "end": "69119"
  },
  {
    "text": "event loop and what does it have to do",
    "start": "69119",
    "end": "70619"
  },
  {
    "text": "with async away both the browser and",
    "start": "70619",
    "end": "73140"
  },
  {
    "text": "nodejs are always running a single",
    "start": "73140",
    "end": "75240"
  },
  {
    "text": "threaded event loop to run your code on",
    "start": "75240",
    "end": "77220"
  },
  {
    "text": "the first go around it will run all of",
    "start": "77220",
    "end": "79170"
  },
  {
    "text": "your synchronous code but it might also",
    "start": "79170",
    "end": "81030"
  },
  {
    "text": "queue up asynchronous events to be",
    "start": "81030",
    "end": "82619"
  },
  {
    "text": "called back later you say here's a",
    "start": "82619",
    "end": "84210"
  },
  {
    "text": "function that I need to run but first I",
    "start": "84210",
    "end": "85950"
  },
  {
    "text": "need to go get some data from the",
    "start": "85950",
    "end": "87270"
  },
  {
    "text": "network the event loop says okay I'll",
    "start": "87270",
    "end": "89280"
  },
  {
    "text": "keep doing my thing while you do your",
    "start": "89280",
    "end": "90930"
  },
  {
    "text": "thing in a separate thread pool then at",
    "start": "90930",
    "end": "92970"
  },
  {
    "text": "some point in the future get data will",
    "start": "92970",
    "end": "94500"
  },
  {
    "text": "finish and let the event loop know that",
    "start": "94500",
    "end": "96210"
  },
  {
    "text": "it's ready to be called back now this is",
    "start": "96210",
    "end": "98280"
  },
  {
    "text": "where things get interesting if it's a",
    "start": "98280",
    "end": "99960"
  },
  {
    "text": "macro task like a set timeout or set",
    "start": "99960",
    "end": "102299"
  },
  {
    "text": "interval it will be executed on the next",
    "start": "102299",
    "end": "104520"
  },
  {
    "text": "event loop but if it's a micro task like",
    "start": "104520",
    "end": "106860"
  },
  {
    "text": "a fulfilled promise then it will be",
    "start": "106860",
    "end": "108689"
  },
  {
    "text": "called back before the start of the next",
    "start": "108689",
    "end": "110460"
  },
  {
    "text": "event loop let's look at the",
    "start": "110460",
    "end": "111810"
  },
  {
    "text": "implications of this by writing some",
    "start": "111810",
    "end": "113340"
  },
  {
    "text": "actual code first we will write a",
    "start": "113340",
    "end": "115229"
  },
  {
    "text": "console log which is synchronous then",
    "start": "115229",
    "end": "117180"
  },
  {
    "text": "we'll throw in a set timeout but give it",
    "start": "117180",
    "end": "118740"
  },
  {
    "text": "a time delay of zero milliseconds then",
    "start": "118740",
    "end": "121200"
  },
  {
    "text": "we'll have a promise that resolves right",
    "start": "121200",
    "end": "122880"
  },
  {
    "text": "away and lastly we will add another",
    "start": "122880",
    "end": "125399"
  },
  {
    "text": "console log for one more synchronous",
    "start": "125399",
    "end": "127350"
  },
  {
    "text": "line of code so nothing here has any",
    "start": "127350",
    "end": "129660"
  },
  {
    "text": "actual time delay so intuitively I would",
    "start": "129660",
    "end": "131879"
  },
  {
    "text": "think that",
    "start": "131879",
    "end": "132340"
  },
  {
    "text": "each line of code would be executed one",
    "start": "132340",
    "end": "134110"
  },
  {
    "text": "by one but that's not how things work in",
    "start": "134110",
    "end": "136420"
  },
  {
    "text": "the event loop if we execute this code",
    "start": "136420",
    "end": "138580"
  },
  {
    "text": "you can see that first line gets logged",
    "start": "138580",
    "end": "140230"
  },
  {
    "text": "up right away because it's running on",
    "start": "140230",
    "end": "141580"
  },
  {
    "text": "the main thread then if we run the",
    "start": "141580",
    "end": "143290"
  },
  {
    "text": "second line it's being queued for a",
    "start": "143290",
    "end": "145150"
  },
  {
    "text": "future task then the promise is being",
    "start": "145150",
    "end": "147910"
  },
  {
    "text": "cued to run in the micro task queue",
    "start": "147910",
    "end": "149530"
  },
  {
    "text": "immediately after this current task and",
    "start": "149530",
    "end": "151780"
  },
  {
    "text": "finally the last console log gets",
    "start": "151780",
    "end": "153819"
  },
  {
    "text": "executed right away so even though the",
    "start": "153819",
    "end": "156160"
  },
  {
    "text": "set timeout call back was queued up",
    "start": "156160",
    "end": "157690"
  },
  {
    "text": "before the promise the promise still",
    "start": "157690",
    "end": "159519"
  },
  {
    "text": "gets executed first because of the",
    "start": "159519",
    "end": "160989"
  },
  {
    "text": "priority of the micro task queue so now",
    "start": "160989",
    "end": "164049"
  },
  {
    "text": "that you know how the event loop works",
    "start": "164049",
    "end": "165190"
  },
  {
    "text": "we can start looking at promises first",
    "start": "165190",
    "end": "167530"
  },
  {
    "text": "I'll show you how a promise based API",
    "start": "167530",
    "end": "168970"
  },
  {
    "text": "might be consumed and then we'll look at",
    "start": "168970",
    "end": "170799"
  },
  {
    "text": "how we actually create our own promises",
    "start": "170799",
    "end": "172480"
  },
  {
    "text": "from scratch so fetch is a browser-based",
    "start": "172480",
    "end": "175030"
  },
  {
    "text": "API but it's also available on node via",
    "start": "175030",
    "end": "177310"
  },
  {
    "text": "the node fetch library and it allows us",
    "start": "177310",
    "end": "179410"
  },
  {
    "text": "to hit an HTTP endpoint and have the",
    "start": "179410",
    "end": "181870"
  },
  {
    "text": "response returned to us as a promise of",
    "start": "181870",
    "end": "184060"
  },
  {
    "text": "the response fetching data from a remote",
    "start": "184060",
    "end": "186250"
  },
  {
    "text": "server is always going to be a sync so",
    "start": "186250",
    "end": "188110"
  },
  {
    "text": "we can queue up the promise then provide",
    "start": "188110",
    "end": "190030"
  },
  {
    "text": "it with a callback to map it to JSON the",
    "start": "190030",
    "end": "192790"
  },
  {
    "text": "great thing about promises is that we",
    "start": "192790",
    "end": "194440"
  },
  {
    "text": "can chain them together mapping to JSON",
    "start": "194440",
    "end": "196780"
  },
  {
    "text": "is also a promise so we can return that",
    "start": "196780",
    "end": "199000"
  },
  {
    "text": "promise from the original then callback",
    "start": "199000",
    "end": "201130"
  },
  {
    "text": "and then in the next one we'll have the",
    "start": "201130",
    "end": "202930"
  },
  {
    "text": "actual user data as a plain JavaScript",
    "start": "202930",
    "end": "205420"
  },
  {
    "text": "object if we go ahead and run this code",
    "start": "205420",
    "end": "207849"
  },
  {
    "text": "you'll see it runs our console log first",
    "start": "207849",
    "end": "209590"
  },
  {
    "text": "and then it retrieves the data from the",
    "start": "209590",
    "end": "211329"
  },
  {
    "text": "API and console logs that afterwards the",
    "start": "211329",
    "end": "214510"
  },
  {
    "text": "great thing about promises is that you",
    "start": "214510",
    "end": "216190"
  },
  {
    "text": "can catch all errors in the chain with a",
    "start": "216190",
    "end": "217989"
  },
  {
    "text": "single function we can do this by adding",
    "start": "217989",
    "end": "220540"
  },
  {
    "text": "catch to the bottom of our promise chain",
    "start": "220540",
    "end": "222519"
  },
  {
    "text": "and it will handle errors that happen",
    "start": "222519",
    "end": "224530"
  },
  {
    "text": "anywhere within our asynchronous code if",
    "start": "224530",
    "end": "226540"
  },
  {
    "text": "this code were callback based we'd have",
    "start": "226540",
    "end": "228190"
  },
  {
    "text": "to have a separate error handler for",
    "start": "228190",
    "end": "229930"
  },
  {
    "text": "every single one of the asynchronous",
    "start": "229930",
    "end": "231730"
  },
  {
    "text": "operations so if an error is thrown",
    "start": "231730",
    "end": "234400"
  },
  {
    "text": "anywhere in our code it's going to",
    "start": "234400",
    "end": "236019"
  },
  {
    "text": "bypass all of the future then callbacks",
    "start": "236019",
    "end": "238450"
  },
  {
    "text": "and go straight to the catch callback",
    "start": "238450",
    "end": "240400"
  },
  {
    "text": "when you start creating promises that's",
    "start": "240400",
    "end": "242829"
  },
  {
    "text": "when you're more likely to screw things",
    "start": "242829",
    "end": "244450"
  },
  {
    "text": "up first I'm setting up a log function",
    "start": "244450",
    "end": "246700"
  },
  {
    "text": "so I can show you the elapsed time",
    "start": "246700",
    "end": "248650"
  },
  {
    "text": "between each line of code up a while",
    "start": "248650",
    "end": "250780"
  },
  {
    "text": "loop that loops a billion times",
    "start": "250780",
    "end": "252370"
  },
  {
    "text": "arbitrarily if we run this on the main",
    "start": "252370",
    "end": "254560"
  },
  {
    "text": "thread it's going to block all of their",
    "start": "254560",
    "end": "256539"
  },
  {
    "text": "code from executing until the billion",
    "start": "256539",
    "end": "258910"
  },
  {
    "text": "loops are done so we'll do one console",
    "start": "258910",
    "end": "261039"
  },
  {
    "text": "log run our while loop and then do",
    "start": "261039",
    "end": "262690"
  },
  {
    "text": "another console log after that and you",
    "start": "262690",
    "end": "264669"
  },
  {
    "text": "can see it takes about seven",
    "start": "264669",
    "end": "266050"
  },
  {
    "text": "milliseconds to finish the while loop",
    "start": "266050",
    "end": "267789"
  },
  {
    "text": "our script is essentially frozen until",
    "start": "267789",
    "end": "270159"
  },
  {
    "text": "that while loop is complete so let's go",
    "start": "270159",
    "end": "272379"
  },
  {
    "text": "ahead and wrap this code in a promise so",
    "start": "272379",
    "end": "274030"
  },
  {
    "text": "we can get it off the main thread and",
    "start": "274030",
    "end": "275470"
  },
  {
    "text": "execute it as a micro task this is one",
    "start": "275470",
    "end": "277990"
  },
  {
    "text": "tricky little way you might screw things",
    "start": "277990",
    "end": "279460"
  },
  {
    "text": "up so we create a new promise we add our",
    "start": "279460",
    "end": "281860"
  },
  {
    "text": "code inside that promise and then we",
    "start": "281860",
    "end": "283840"
  },
  {
    "text": "have it resolved to that value when done",
    "start": "283840",
    "end": "285610"
  },
  {
    "text": "so you might think that because we're",
    "start": "285610",
    "end": "287830"
  },
  {
    "text": "wrapping this in a promise that we're",
    "start": "287830",
    "end": "289240"
  },
  {
    "text": "going to execute this off the main",
    "start": "289240",
    "end": "290680"
  },
  {
    "text": "thread but the actual creation of the",
    "start": "290680",
    "end": "292960"
  },
  {
    "text": "promise and that big while loop is still",
    "start": "292960",
    "end": "295300"
  },
  {
    "text": "happening on the main thread it's only",
    "start": "295300",
    "end": "297430"
  },
  {
    "text": "the resolving of the value that happens",
    "start": "297430",
    "end": "299469"
  },
  {
    "text": "as a micro task",
    "start": "299469",
    "end": "300520"
  },
  {
    "text": "so the first synchronous line gets",
    "start": "300520",
    "end": "302289"
  },
  {
    "text": "logged right away and the second one",
    "start": "302289",
    "end": "303969"
  },
  {
    "text": "should too but there's still a 700",
    "start": "303969",
    "end": "305860"
  },
  {
    "text": "millisecond delay because that while",
    "start": "305860",
    "end": "307509"
  },
  {
    "text": "loop is still blocking on the main",
    "start": "307509",
    "end": "309250"
  },
  {
    "text": "thread so to ensure that all of our",
    "start": "309250",
    "end": "311500"
  },
  {
    "text": "synchronous code runs as fast as",
    "start": "311500",
    "end": "313120"
  },
  {
    "text": "possible we'll refactor our code once",
    "start": "313120",
    "end": "315009"
  },
  {
    "text": "again to say promise resolve then we'll",
    "start": "315009",
    "end": "317560"
  },
  {
    "text": "run the while loop inside of that result",
    "start": "317560",
    "end": "319659"
  },
  {
    "text": "promises callback by putting this code",
    "start": "319659",
    "end": "322030"
  },
  {
    "text": "inside of a resolved promise we can be",
    "start": "322030",
    "end": "323650"
  },
  {
    "text": "guaranteed that it will be executed",
    "start": "323650",
    "end": "325509"
  },
  {
    "text": "after all the synchronous code in the",
    "start": "325509",
    "end": "327370"
  },
  {
    "text": "current macro task has completed if we",
    "start": "327370",
    "end": "330310"
  },
  {
    "text": "go ahead and run our script again you",
    "start": "330310",
    "end": "331630"
  },
  {
    "text": "can see we get our two console logs",
    "start": "331630",
    "end": "333069"
  },
  {
    "text": "right away and then finally the promise",
    "start": "333069",
    "end": "334990"
  },
  {
    "text": "resolves after 700 milliseconds so now",
    "start": "334990",
    "end": "337810"
  },
  {
    "text": "that you know all that stuff you should",
    "start": "337810",
    "end": "339069"
  },
  {
    "text": "be in the clear to use async await",
    "start": "339069",
    "end": "340539"
  },
  {
    "text": "responsibly we already know that",
    "start": "340539",
    "end": "342969"
  },
  {
    "text": "promises are a huge improvement over",
    "start": "342969",
    "end": "344440"
  },
  {
    "text": "callbacks but promises can still be",
    "start": "344440",
    "end": "346569"
  },
  {
    "text": "really hard to read and follow",
    "start": "346569",
    "end": "347740"
  },
  {
    "text": "especially when you have a long chain of",
    "start": "347740",
    "end": "349659"
  },
  {
    "text": "multiple asynchronous events async await",
    "start": "349659",
    "end": "352509"
  },
  {
    "text": "really just boils down to syntactic",
    "start": "352509",
    "end": "354610"
  },
  {
    "text": "sugar to make your asynchronous code",
    "start": "354610",
    "end": "356469"
  },
  {
    "text": "read like synchronous code first let's",
    "start": "356469",
    "end": "359229"
  },
  {
    "text": "look at the async part of the equation",
    "start": "359229",
    "end": "360849"
  },
  {
    "text": "and see what that does so here we have a",
    "start": "360849",
    "end": "363490"
  },
  {
    "text": "regular function that does nothing and",
    "start": "363490",
    "end": "365199"
  },
  {
    "text": "if we put the async keyword in front of",
    "start": "365199",
    "end": "367300"
  },
  {
    "text": "it we have a function that returns a",
    "start": "367300",
    "end": "369099"
  },
  {
    "text": "promise of nothing so whatever gets",
    "start": "369099",
    "end": "371500"
  },
  {
    "text": "returned inside this function will be a",
    "start": "371500",
    "end": "373419"
  },
  {
    "text": "promise of that value I'm going to reuse",
    "start": "373419",
    "end": "376599"
  },
  {
    "text": "this get fruit function throughout the",
    "start": "376599",
    "end": "378039"
  },
  {
    "text": "lesson just to simulate what a promise",
    "start": "378039",
    "end": "380050"
  },
  {
    "text": "based API looks like in this case the",
    "start": "380050",
    "end": "382389"
  },
  {
    "text": "user can pass in the name of a fruit and",
    "start": "382389",
    "end": "384190"
  },
  {
    "text": "then the function will resolve to the",
    "start": "384190",
    "end": "386319"
  },
  {
    "text": "value of the fruit emoji from this",
    "start": "386319",
    "end": "388240"
  },
  {
    "text": "object and just to make this a little",
    "start": "388240",
    "end": "390490"
  },
  {
    "text": "more clear if we didn't use the async",
    "start": "390490",
    "end": "392440"
  },
  {
    "text": "keyword we could write this function by",
    "start": "392440",
    "end": "394300"
  },
  {
    "text": "just returning a promise that resolves",
    "start": "394300",
    "end": "396639"
  },
  {
    "text": "to this value so when you use the async",
    "start": "396639",
    "end": "398860"
  },
  {
    "text": "keyword the matte",
    "start": "398860",
    "end": "399880"
  },
  {
    "text": "that happens is that it takes the return",
    "start": "399880",
    "end": "401860"
  },
  {
    "text": "value and automatically resolves it as a",
    "start": "401860",
    "end": "404080"
  },
  {
    "text": "promise but that's not everything that",
    "start": "404080",
    "end": "406390"
  },
  {
    "text": "it does it also sets up a context for",
    "start": "406390",
    "end": "408970"
  },
  {
    "text": "you to use the await keyword the real",
    "start": "408970",
    "end": "411550"
  },
  {
    "text": "power of an async function comes when",
    "start": "411550",
    "end": "413620"
  },
  {
    "text": "you combine it with the away keyword to",
    "start": "413620",
    "end": "415480"
  },
  {
    "text": "pause the execution of the function now",
    "start": "415480",
    "end": "418030"
  },
  {
    "text": "I'm going to write a second async",
    "start": "418030",
    "end": "419650"
  },
  {
    "text": "function called make smoothie what we",
    "start": "419650",
    "end": "422110"
  },
  {
    "text": "need to do is get multiple fruits and",
    "start": "422110",
    "end": "423760"
  },
  {
    "text": "then combine them together as a single",
    "start": "423760",
    "end": "425530"
  },
  {
    "text": "value instead of chaining together a",
    "start": "425530",
    "end": "427810"
  },
  {
    "text": "bunch of then callbacks we can just have",
    "start": "427810",
    "end": "429700"
  },
  {
    "text": "a promise resolve to the value of a",
    "start": "429700",
    "end": "431890"
  },
  {
    "text": "variable a weight is like saying pause",
    "start": "431890",
    "end": "434110"
  },
  {
    "text": "the execution of this function until the",
    "start": "434110",
    "end": "436270"
  },
  {
    "text": "get fruit promise results to a value at",
    "start": "436270",
    "end": "438340"
  },
  {
    "text": "which point we can use it as the",
    "start": "438340",
    "end": "440020"
  },
  {
    "text": "variable a and then we'll move on to the",
    "start": "440020",
    "end": "442360"
  },
  {
    "text": "next line of code after we get a",
    "start": "442360",
    "end": "444220"
  },
  {
    "text": "pineapple we can then get a strawberry",
    "start": "444220",
    "end": "446170"
  },
  {
    "text": "and then we'll turn them together as an",
    "start": "446170",
    "end": "448240"
  },
  {
    "text": "array one of the most annoying things",
    "start": "448240",
    "end": "450040"
  },
  {
    "text": "with promises is that it's kind of",
    "start": "450040",
    "end": "451690"
  },
  {
    "text": "difficult to share result values between",
    "start": "451690",
    "end": "453850"
  },
  {
    "text": "multiple steps in the promise chain but",
    "start": "453850",
    "end": "456490"
  },
  {
    "text": "async/await solves this problem really",
    "start": "456490",
    "end": "458350"
  },
  {
    "text": "nicely the code on the right is what",
    "start": "458350",
    "end": "460540"
  },
  {
    "text": "this would look like if we wrote it with",
    "start": "460540",
    "end": "462010"
  },
  {
    "text": "just regular promises and as you can see",
    "start": "462010",
    "end": "463930"
  },
  {
    "text": "there's a lot more code and a lot more",
    "start": "463930",
    "end": "465370"
  },
  {
    "text": "complexity there now if you're already a",
    "start": "465370",
    "end": "467770"
  },
  {
    "text": "JavaScript expert then I'm kind of",
    "start": "467770",
    "end": "469330"
  },
  {
    "text": "trolling you because you know that the",
    "start": "469330",
    "end": "470710"
  },
  {
    "text": "code on the left is making the single",
    "start": "470710",
    "end": "472450"
  },
  {
    "text": "biggest mistake that people make when",
    "start": "472450",
    "end": "474040"
  },
  {
    "text": "using async await and that is failing to",
    "start": "474040",
    "end": "476470"
  },
  {
    "text": "run the code concurrently if we go back",
    "start": "476470",
    "end": "478750"
  },
  {
    "text": "to the code on the left you can see that",
    "start": "478750",
    "end": "480400"
  },
  {
    "text": "we're waiting for a pineapple to resolve",
    "start": "480400",
    "end": "482170"
  },
  {
    "text": "and then we're getting a strawberry",
    "start": "482170",
    "end": "483670"
  },
  {
    "text": "afterwards but we could get both of",
    "start": "483670",
    "end": "485530"
  },
  {
    "text": "these things at the same time you really",
    "start": "485530",
    "end": "487780"
  },
  {
    "text": "only need to await one thing after the",
    "start": "487780",
    "end": "489550"
  },
  {
    "text": "other if the second value is dependent",
    "start": "489550",
    "end": "491560"
  },
  {
    "text": "on the first value for example if you",
    "start": "491560",
    "end": "493450"
  },
  {
    "text": "need to get a user ID before you can",
    "start": "493450",
    "end": "495130"
  },
  {
    "text": "then retrieve some data from the",
    "start": "495130",
    "end": "496510"
  },
  {
    "text": "database let's imagine we're making",
    "start": "496510",
    "end": "498670"
  },
  {
    "text": "these calls from a remote API and",
    "start": "498670",
    "end": "500500"
  },
  {
    "text": "there's about a second of latency if we",
    "start": "500500",
    "end": "502780"
  },
  {
    "text": "run this code again with a delay you can",
    "start": "502780",
    "end": "504250"
  },
  {
    "text": "see it takes a full second to get the",
    "start": "504250",
    "end": "505840"
  },
  {
    "text": "first fruit and then a full second to",
    "start": "505840",
    "end": "507430"
  },
  {
    "text": "get the second fruit but the whole point",
    "start": "507430",
    "end": "509470"
  },
  {
    "text": "of the event loop is to avoid blocking",
    "start": "509470",
    "end": "511090"
  },
  {
    "text": "code like this so we know that an async",
    "start": "511090",
    "end": "513640"
  },
  {
    "text": "function always returns a promise so",
    "start": "513640",
    "end": "515469"
  },
  {
    "text": "instead of doing one after the other we",
    "start": "515469",
    "end": "517900"
  },
  {
    "text": "can add both of our promises to promise",
    "start": "517900",
    "end": "520120"
  },
  {
    "text": "all this will tell all the promises in",
    "start": "520120",
    "end": "522430"
  },
  {
    "text": "the array to run concurrently and then",
    "start": "522430",
    "end": "524500"
  },
  {
    "text": "have the resolved values be at that",
    "start": "524500",
    "end": "526030"
  },
  {
    "text": "index in the array so this is something",
    "start": "526030",
    "end": "528490"
  },
  {
    "text": "that you should always be thinking about",
    "start": "528490",
    "end": "529750"
  },
  {
    "text": "when working with async functions you",
    "start": "529750",
    "end": "531760"
  },
  {
    "text": "don't want to accidentally pause",
    "start": "531760",
    "end": "533260"
  },
  {
    "text": "function unnecessarily so instead of",
    "start": "533260",
    "end": "535660"
  },
  {
    "text": "awaiting a whole bunch of individual",
    "start": "535660",
    "end": "537340"
  },
  {
    "text": "promises you might want to add all your",
    "start": "537340",
    "end": "539140"
  },
  {
    "text": "promises to an array and then await that",
    "start": "539140",
    "end": "541270"
  },
  {
    "text": "promise all call and as you can see here",
    "start": "541270",
    "end": "543820"
  },
  {
    "text": "we've doubled the speed of the original",
    "start": "543820",
    "end": "545590"
  },
  {
    "text": "function another nice benefit of async",
    "start": "545590",
    "end": "547960"
  },
  {
    "text": "await is error handling instead of",
    "start": "547960",
    "end": "550540"
  },
  {
    "text": "chaining a catch callback to our promise",
    "start": "550540",
    "end": "552310"
  },
  {
    "text": "chain we can just wrap our code in a",
    "start": "552310",
    "end": "553960"
  },
  {
    "text": "try-catch block this offers much better",
    "start": "553960",
    "end": "556240"
  },
  {
    "text": "flexibility when handling errors that",
    "start": "556240",
    "end": "558100"
  },
  {
    "text": "might occur across multiple promises if",
    "start": "558100",
    "end": "560380"
  },
  {
    "text": "we take our code from the last example",
    "start": "560380",
    "end": "562120"
  },
  {
    "text": "and throw an error in the middle of it",
    "start": "562120",
    "end": "563980"
  },
  {
    "text": "we can then catch that error down here",
    "start": "563980",
    "end": "565720"
  },
  {
    "text": "in the catch block the first thing we'll",
    "start": "565720",
    "end": "567760"
  },
  {
    "text": "probably want to do here is console.log",
    "start": "567760",
    "end": "569290"
  },
  {
    "text": "the error and then we can either catch",
    "start": "569290",
    "end": "571180"
  },
  {
    "text": "the error and throw another error or we",
    "start": "571180",
    "end": "573580"
  },
  {
    "text": "can catch the error and return a value",
    "start": "573580",
    "end": "575190"
  },
  {
    "text": "your decision here will dictate the",
    "start": "575190",
    "end": "577660"
  },
  {
    "text": "control flow for the consumer of this",
    "start": "577660",
    "end": "579520"
  },
  {
    "text": "promise if you return a value it's",
    "start": "579520",
    "end": "581530"
  },
  {
    "text": "basically like ignoring the error and",
    "start": "581530",
    "end": "583270"
  },
  {
    "text": "then providing some replacement value so",
    "start": "583270",
    "end": "585820"
  },
  {
    "text": "the consumer the promise won't get an",
    "start": "585820",
    "end": "587170"
  },
  {
    "text": "error but instead they'll get the result",
    "start": "587170",
    "end": "588640"
  },
  {
    "text": "value inside of the then callback in",
    "start": "588640",
    "end": "590740"
  },
  {
    "text": "contrast if we throw an error inside of",
    "start": "590740",
    "end": "592990"
  },
  {
    "text": "our catch block it will break the",
    "start": "592990",
    "end": "594490"
  },
  {
    "text": "consumers promise chain and be handled",
    "start": "594490",
    "end": "596260"
  },
  {
    "text": "by their catch callback now I want to",
    "start": "596260",
    "end": "598510"
  },
  {
    "text": "show you a couple of tricks to make your",
    "start": "598510",
    "end": "600040"
  },
  {
    "text": "code as sweet as possible let's imagine",
    "start": "600040",
    "end": "602230"
  },
  {
    "text": "we have a string of IDs and then we want",
    "start": "602230",
    "end": "604270"
  },
  {
    "text": "to retrieve all these ideas from the",
    "start": "604270",
    "end": "605710"
  },
  {
    "text": "database we can use a ray map to convert",
    "start": "605710",
    "end": "608050"
  },
  {
    "text": "them to an array of promises and then",
    "start": "608050",
    "end": "609910"
  },
  {
    "text": "resolve them all concurrently using",
    "start": "609910",
    "end": "611590"
  },
  {
    "text": "promise doll that looks great but you",
    "start": "611590",
    "end": "614350"
  },
  {
    "text": "need to be careful when using",
    "start": "614350",
    "end": "615310"
  },
  {
    "text": "async/await",
    "start": "615310",
    "end": "616120"
  },
  {
    "text": "in a map or for each loop because it",
    "start": "616120",
    "end": "618850"
  },
  {
    "text": "won't actually pause the function in",
    "start": "618850",
    "end": "620530"
  },
  {
    "text": "this context so normally we would expect",
    "start": "620530",
    "end": "622480"
  },
  {
    "text": "this loop to stop if we do a wait get",
    "start": "622480",
    "end": "624520"
  },
  {
    "text": "fruit but that's actually not what",
    "start": "624520",
    "end": "626200"
  },
  {
    "text": "happens in this case instead it will run",
    "start": "626200",
    "end": "628240"
  },
  {
    "text": "all these promises concurrently so that",
    "start": "628240",
    "end": "630340"
  },
  {
    "text": "might not be the behavior that you're",
    "start": "630340",
    "end": "631600"
  },
  {
    "text": "expecting if you want to run a loop and",
    "start": "631600",
    "end": "634090"
  },
  {
    "text": "have every iteration in that loop a way",
    "start": "634090",
    "end": "636190"
  },
  {
    "text": "to promise you need to use a traditional",
    "start": "636190",
    "end": "638170"
  },
  {
    "text": "for loop so you can write async",
    "start": "638170",
    "end": "640390"
  },
  {
    "text": "functions and then write a for loop",
    "start": "640390",
    "end": "642310"
  },
  {
    "text": "inside that function and then use the",
    "start": "642310",
    "end": "644200"
  },
  {
    "text": "await keyword inside the loop when you",
    "start": "644200",
    "end": "646540"
  },
  {
    "text": "write your code like this it will pause",
    "start": "646540",
    "end": "648070"
  },
  {
    "text": "each step of a loop until that promise",
    "start": "648070",
    "end": "650080"
  },
  {
    "text": "is resolved but more often than not",
    "start": "650080",
    "end": "652240"
  },
  {
    "text": "you'll probably want to run everything",
    "start": "652240",
    "end": "653710"
  },
  {
    "text": "concurrently and a cool thing you can do",
    "start": "653710",
    "end": "655690"
  },
  {
    "text": "is use the await keyword directly in a",
    "start": "655690",
    "end": "657820"
  },
  {
    "text": "for loop if you have a promise that you",
    "start": "657820",
    "end": "660220"
  },
  {
    "text": "know results to an array you can",
    "start": "660220",
    "end": "661510"
  },
  {
    "text": "actually just use the await keyword",
    "start": "661510",
    "end": "663130"
  },
  {
    "text": "directly in your loop so you can say for",
    "start": "663130",
    "end": "665140"
  },
  {
    "text": "await in your code what",
    "start": "665140",
    "end": "666790"
  },
  {
    "text": "we'll await the array of items to",
    "start": "666790",
    "end": "668650"
  },
  {
    "text": "resolve and then loop over them",
    "start": "668650",
    "end": "670210"
  },
  {
    "text": "immediately after and as you can",
    "start": "670210",
    "end": "672760"
  },
  {
    "text": "probably imagine you can also use the",
    "start": "672760",
    "end": "674410"
  },
  {
    "text": "await keyword in your conditionals on",
    "start": "674410",
    "end": "677440"
  },
  {
    "text": "the left side of the conditional we can",
    "start": "677440",
    "end": "679000"
  },
  {
    "text": "await the result value from a promise",
    "start": "679000",
    "end": "680950"
  },
  {
    "text": "and then we can see if it's equal to",
    "start": "680950",
    "end": "682390"
  },
  {
    "text": "some other value so that gives you a",
    "start": "682390",
    "end": "685000"
  },
  {
    "text": "super concise way to write conditional",
    "start": "685000",
    "end": "686860"
  },
  {
    "text": "expressions when working with promises",
    "start": "686860",
    "end": "688720"
  },
  {
    "text": "hopefully that gives you some ideas on",
    "start": "688720",
    "end": "690730"
  },
  {
    "text": "what you can do with async await in ES 7",
    "start": "690730",
    "end": "693220"
  },
  {
    "text": "or typescript it is truly one of the",
    "start": "693220",
    "end": "695560"
  },
  {
    "text": "sweetest things to ever happen to",
    "start": "695560",
    "end": "697060"
  },
  {
    "text": "JavaScript if this video helped you",
    "start": "697060",
    "end": "698980"
  },
  {
    "text": "please like and subscribe and make sure",
    "start": "698980",
    "end": "700600"
  },
  {
    "text": "to join the live stream next week for",
    "start": "700600",
    "end": "702280"
  },
  {
    "text": "the t-shirt giveaway and if you want to",
    "start": "702280",
    "end": "703930"
  },
  {
    "text": "take your development to the next level",
    "start": "703930",
    "end": "705490"
  },
  {
    "text": "consider becoming a pro member at",
    "start": "705490",
    "end": "707200"
  },
  {
    "text": "angular firebase comm you'll get access",
    "start": "707200",
    "end": "709330"
  },
  {
    "text": "to all kinds of advanced content",
    "start": "709330",
    "end": "711070"
  },
  {
    "text": "designed to help you build and ship your",
    "start": "711070",
    "end": "712540"
  },
  {
    "text": "app faster thanks for watching and I'll",
    "start": "712540",
    "end": "714790"
  },
  {
    "text": "talk to you soon",
    "start": "714790",
    "end": "717449"
  }
]