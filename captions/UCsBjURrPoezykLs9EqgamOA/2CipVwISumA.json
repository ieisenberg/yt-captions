[
  {
    "text": "when you build an app one of the main",
    "start": "160",
    "end": "1520"
  },
  {
    "text": "pain points that you'll face is your",
    "start": "1520",
    "end": "2960"
  },
  {
    "text": "database",
    "start": "2960",
    "end": "3600"
  },
  {
    "text": "you often hear developers debate the",
    "start": "3600",
    "end": "5120"
  },
  {
    "text": "merits of sql versus nosql",
    "start": "5120",
    "end": "7600"
  },
  {
    "text": "on one hand you have safety security and",
    "start": "7600",
    "end": "9440"
  },
  {
    "text": "consistency and on the other you have",
    "start": "9440",
    "end": "11280"
  },
  {
    "text": "flexibility scalability and productivity",
    "start": "11280",
    "end": "13920"
  },
  {
    "text": "but what if there's a database that",
    "start": "13920",
    "end": "15200"
  },
  {
    "text": "could put an end to this debate once and",
    "start": "15200",
    "end": "16560"
  },
  {
    "text": "for all",
    "start": "16560",
    "end": "17039"
  },
  {
    "text": "fauna db is the cloud database that i've",
    "start": "17039",
    "end": "19279"
  },
  {
    "text": "always dreamed of",
    "start": "19279",
    "end": "20160"
  },
  {
    "text": "it's entirely serverless so we don't",
    "start": "20160",
    "end": "21760"
  },
  {
    "text": "have to provision anything and we only",
    "start": "21760",
    "end": "23439"
  },
  {
    "text": "pay for what we actually use beyond the",
    "start": "23439",
    "end": "24960"
  },
  {
    "text": "free tier",
    "start": "24960",
    "end": "25599"
  },
  {
    "text": "it's as easy to use as a document",
    "start": "25599",
    "end": "27359"
  },
  {
    "text": "database and you can manage your data",
    "start": "27359",
    "end": "29039"
  },
  {
    "text": "from its web interface",
    "start": "29039",
    "end": "30080"
  },
  {
    "text": "or the command line it's extremely fast",
    "start": "30080",
    "end": "32000"
  },
  {
    "text": "and scales infinitely in the cloud",
    "start": "32000",
    "end": "33600"
  },
  {
    "text": "and is the first database in the world",
    "start": "33600",
    "end": "35040"
  },
  {
    "text": "to implement the calvin model for",
    "start": "35040",
    "end": "36719"
  },
  {
    "text": "partition database systems most",
    "start": "36719",
    "end": "38640"
  },
  {
    "text": "importantly though is its ability to",
    "start": "38640",
    "end": "40239"
  },
  {
    "text": "handle complex data modeling use cases",
    "start": "40239",
    "end": "42559"
  },
  {
    "text": "like the ones you would find in a",
    "start": "42559",
    "end": "43840"
  },
  {
    "text": "relational graph or time series database",
    "start": "43840",
    "end": "46399"
  },
  {
    "text": "over the next few minutes you'll learn",
    "start": "46399",
    "end": "47760"
  },
  {
    "text": "everything you need to know to get up",
    "start": "47760",
    "end": "49039"
  },
  {
    "text": "and running with fonodb",
    "start": "49039",
    "end": "50399"
  },
  {
    "text": "we'll use it to model the data",
    "start": "50399",
    "end": "51680"
  },
  {
    "text": "relationships that you would find on",
    "start": "51680",
    "end": "53120"
  },
  {
    "text": "twitter",
    "start": "53120",
    "end": "53680"
  },
  {
    "text": "a user has many tweets users can follow",
    "start": "53680",
    "end": "56079"
  },
  {
    "text": "each other and retrieve a feed of tweets",
    "start": "56079",
    "end": "57920"
  },
  {
    "text": "from all the users that they follow",
    "start": "57920",
    "end": "59440"
  },
  {
    "text": "we'll write our code in node.js",
    "start": "59440",
    "end": "60879"
  },
  {
    "text": "and by the end of the video you'll have",
    "start": "60879",
    "end": "62320"
  },
  {
    "text": "an api that you can use to connect to",
    "start": "62320",
    "end": "64080"
  },
  {
    "text": "your frontend application",
    "start": "64080",
    "end": "65360"
  },
  {
    "text": "if you're new here like and subscribe",
    "start": "65360",
    "end": "66799"
  },
  {
    "text": "and check out the full write-up on",
    "start": "66799",
    "end": "68159"
  },
  {
    "text": "fireship io",
    "start": "68159",
    "end": "69119"
  },
  {
    "text": "to follow along today the first thing",
    "start": "69119",
    "end": "70640"
  },
  {
    "text": "you'll need is a free fauna account",
    "start": "70640",
    "end": "72640"
  },
  {
    "text": "once logged in you'll see the fauna",
    "start": "72640",
    "end": "74159"
  },
  {
    "text": "dashboard at this point you won't have a",
    "start": "74159",
    "end": "75680"
  },
  {
    "text": "database",
    "start": "75680",
    "end": "76320"
  },
  {
    "text": "so go ahead and click the button to",
    "start": "76320",
    "end": "77680"
  },
  {
    "text": "create a new one this is what's known as",
    "start": "77680",
    "end": "79439"
  },
  {
    "text": "a top level database",
    "start": "79439",
    "end": "80720"
  },
  {
    "text": "and an awesome thing about fauna is that",
    "start": "80720",
    "end": "82400"
  },
  {
    "text": "it supports multi-tenancy it's beyond",
    "start": "82400",
    "end": "84159"
  },
  {
    "text": "the scope of this video but a cool",
    "start": "84159",
    "end": "85600"
  },
  {
    "text": "feature you should know about a database",
    "start": "85600",
    "end": "87280"
  },
  {
    "text": "can have an unlimited number of child",
    "start": "87280",
    "end": "88880"
  },
  {
    "text": "databases",
    "start": "88880",
    "end": "89680"
  },
  {
    "text": "allowing you to scope data and",
    "start": "89680",
    "end": "91119"
  },
  {
    "text": "privileges to a specific organization or",
    "start": "91119",
    "end": "93200"
  },
  {
    "text": "team",
    "start": "93200",
    "end": "93600"
  },
  {
    "text": "in most cases though you'll just need",
    "start": "93600",
    "end": "95040"
  },
  {
    "text": "one single database for your entire",
    "start": "95040",
    "end": "96720"
  },
  {
    "text": "application",
    "start": "96720",
    "end": "97520"
  },
  {
    "text": "now that we have a database we'll create",
    "start": "97520",
    "end": "99119"
  },
  {
    "text": "a collection a collection is like an sql",
    "start": "99119",
    "end": "101520"
  },
  {
    "text": "table",
    "start": "101520",
    "end": "102159"
  },
  {
    "text": "and works very similar to other",
    "start": "102159",
    "end": "103680"
  },
  {
    "text": "document-oriented databases like mongodb",
    "start": "103680",
    "end": "106320"
  },
  {
    "text": "or firestore a collection is kind of",
    "start": "106320",
    "end": "108320"
  },
  {
    "text": "like a folder that contains many",
    "start": "108320",
    "end": "109920"
  },
  {
    "text": "documents",
    "start": "109920",
    "end": "110560"
  },
  {
    "text": "then you can make queries against that",
    "start": "110560",
    "end": "111920"
  },
  {
    "text": "collection to filter out a set of",
    "start": "111920",
    "end": "113600"
  },
  {
    "text": "documents that you need for your",
    "start": "113600",
    "end": "114960"
  },
  {
    "text": "frontend ui",
    "start": "114960",
    "end": "115840"
  },
  {
    "text": "when you create a collection you give it",
    "start": "115840",
    "end": "117280"
  },
  {
    "text": "a name which is usually plural and in",
    "start": "117280",
    "end": "119280"
  },
  {
    "text": "our case it will store all of our user",
    "start": "119280",
    "end": "121040"
  },
  {
    "text": "data",
    "start": "121040",
    "end": "121840"
  },
  {
    "text": "now a unique thing about fauna is that",
    "start": "121840",
    "end": "123520"
  },
  {
    "text": "you'll also notice an option for history",
    "start": "123520",
    "end": "125439"
  },
  {
    "text": "it retains all of the changes that",
    "start": "125439",
    "end": "126960"
  },
  {
    "text": "happen to a document over time when you",
    "start": "126960",
    "end": "128879"
  },
  {
    "text": "write to the database",
    "start": "128879",
    "end": "129759"
  },
  {
    "text": "fauna never actually changes a stored",
    "start": "129759",
    "end": "131520"
  },
  {
    "text": "document instead it creates a copy of",
    "start": "131520",
    "end": "133360"
  },
  {
    "text": "the original with the changes",
    "start": "133360",
    "end": "134800"
  },
  {
    "text": "then archives the original document to",
    "start": "134800",
    "end": "136560"
  },
  {
    "text": "the history that's extremely useful when",
    "start": "136560",
    "end": "138400"
  },
  {
    "text": "working with time series data",
    "start": "138400",
    "end": "139920"
  },
  {
    "text": "and also for time traveling through any",
    "start": "139920",
    "end": "141760"
  },
  {
    "text": "changes to your data you also have a ttl",
    "start": "141760",
    "end": "144239"
  },
  {
    "text": "or time to live option which can",
    "start": "144239",
    "end": "146000"
  },
  {
    "text": "automatically delete ephemeral data that",
    "start": "146000",
    "end": "147760"
  },
  {
    "text": "you no longer need",
    "start": "147760",
    "end": "148879"
  },
  {
    "text": "now that we have our user's collection",
    "start": "148879",
    "end": "150480"
  },
  {
    "text": "let's go ahead and add a document to it",
    "start": "150480",
    "end": "152480"
  },
  {
    "text": "a document is represented as a plain",
    "start": "152480",
    "end": "154400"
  },
  {
    "text": "javascript object",
    "start": "154400",
    "end": "155519"
  },
  {
    "text": "the data you save here does not need to",
    "start": "155519",
    "end": "157200"
  },
  {
    "text": "follow a rigid structure",
    "start": "157200",
    "end": "158800"
  },
  {
    "text": "however when you query multiple",
    "start": "158800",
    "end": "160239"
  },
  {
    "text": "documents from a collection it's based",
    "start": "160239",
    "end": "162080"
  },
  {
    "text": "on the keys in this object",
    "start": "162080",
    "end": "163680"
  },
  {
    "text": "so if we want to match all of the users",
    "start": "163680",
    "end": "165280"
  },
  {
    "text": "with a certain name or email address",
    "start": "165280",
    "end": "167040"
  },
  {
    "text": "we'll want to use the same key name in",
    "start": "167040",
    "end": "168640"
  },
  {
    "text": "every document go ahead and click save",
    "start": "168640",
    "end": "170959"
  },
  {
    "text": "and now you should see that document in",
    "start": "170959",
    "end": "172560"
  },
  {
    "text": "the collection what you'll notice",
    "start": "172560",
    "end": "174080"
  },
  {
    "text": "is that it's automatically assigned a",
    "start": "174080",
    "end": "175680"
  },
  {
    "text": "unique id to the document",
    "start": "175680",
    "end": "177360"
  },
  {
    "text": "now if we expand the document you can",
    "start": "177360",
    "end": "179040"
  },
  {
    "text": "see in addition to our custom data we",
    "start": "179040",
    "end": "181200"
  },
  {
    "text": "also have a ref property",
    "start": "181200",
    "end": "182720"
  },
  {
    "text": "that points to the user's collection",
    "start": "182720",
    "end": "184480"
  },
  {
    "text": "along with that unique id",
    "start": "184480",
    "end": "186000"
  },
  {
    "text": "the reference is very important because",
    "start": "186000",
    "end": "187680"
  },
  {
    "text": "eventually we'll use it to join data",
    "start": "187680",
    "end": "189599"
  },
  {
    "text": "together from multiple collections",
    "start": "189599",
    "end": "191519"
  },
  {
    "text": "in our case for example we could save a",
    "start": "191519",
    "end": "193440"
  },
  {
    "text": "reference to this user on a tweet",
    "start": "193440",
    "end": "195280"
  },
  {
    "text": "document",
    "start": "195280",
    "end": "196000"
  },
  {
    "text": "so we know who a tweet belongs to which",
    "start": "196000",
    "end": "198080"
  },
  {
    "text": "is very similar to a foreign key in an",
    "start": "198080",
    "end": "200000"
  },
  {
    "text": "sql database",
    "start": "200000",
    "end": "201200"
  },
  {
    "text": "at this point i'm going to add a few",
    "start": "201200",
    "end": "202560"
  },
  {
    "text": "more users to the database and now we",
    "start": "202560",
    "end": "204400"
  },
  {
    "text": "need to think about how we want to",
    "start": "204400",
    "end": "205920"
  },
  {
    "text": "access this data there are multiple",
    "start": "205920",
    "end": "207599"
  },
  {
    "text": "native apis you can use to access data",
    "start": "207599",
    "end": "209760"
  },
  {
    "text": "in fauna the first one that you might be",
    "start": "209760",
    "end": "211280"
  },
  {
    "text": "familiar with",
    "start": "211280",
    "end": "212080"
  },
  {
    "text": "is graphql that's not the api we'll be",
    "start": "212080",
    "end": "214239"
  },
  {
    "text": "using in this video",
    "start": "214239",
    "end": "215280"
  },
  {
    "text": "however if you're familiar with graphql",
    "start": "215280",
    "end": "217280"
  },
  {
    "text": "you can actually upload a schema to",
    "start": "217280",
    "end": "218879"
  },
  {
    "text": "fauna and it will automatically create",
    "start": "218879",
    "end": "220400"
  },
  {
    "text": "the collections and indexes required to",
    "start": "220400",
    "end": "222640"
  },
  {
    "text": "retrieve your data based on that schema",
    "start": "222640",
    "end": "224640"
  },
  {
    "text": "it's really powerful stuff but i think",
    "start": "224640",
    "end": "226400"
  },
  {
    "text": "to really understand fauna you should",
    "start": "226400",
    "end": "228080"
  },
  {
    "text": "learn its custom query language called",
    "start": "228080",
    "end": "229599"
  },
  {
    "text": "fql",
    "start": "229599",
    "end": "230400"
  },
  {
    "text": "you can execute fql right here on the",
    "start": "230400",
    "end": "232159"
  },
  {
    "text": "console or you can install fonichel on",
    "start": "232159",
    "end": "234000"
  },
  {
    "text": "your local system to execute it from the",
    "start": "234000",
    "end": "235840"
  },
  {
    "text": "command line",
    "start": "235840",
    "end": "236560"
  },
  {
    "text": "and a little bit later we'll learn how",
    "start": "236560",
    "end": "237920"
  },
  {
    "text": "to use it in node.js fql is a functional",
    "start": "237920",
    "end": "240480"
  },
  {
    "text": "language",
    "start": "240480",
    "end": "241040"
  },
  {
    "text": "and is very intuitive and flexible but",
    "start": "241040",
    "end": "242879"
  },
  {
    "text": "there is a lot to learn and i recommend",
    "start": "242879",
    "end": "244560"
  },
  {
    "text": "keeping the fql cheat sheet nearby",
    "start": "244560",
    "end": "246560"
  },
  {
    "text": "we'll look at about 10 of the most",
    "start": "246560",
    "end": "247760"
  },
  {
    "text": "common functions but just keep in mind",
    "start": "247760",
    "end": "249439"
  },
  {
    "text": "that fql can do a lot more than i",
    "start": "249439",
    "end": "251200"
  },
  {
    "text": "present in this video",
    "start": "251200",
    "end": "252799"
  },
  {
    "text": "one of the first functions you'll want",
    "start": "252799",
    "end": "254000"
  },
  {
    "text": "to know is get which retrieves a single",
    "start": "254000",
    "end": "256000"
  },
  {
    "text": "document",
    "start": "256000",
    "end": "256479"
  },
  {
    "text": "based on a reference get is just a",
    "start": "256479",
    "end": "258479"
  },
  {
    "text": "function that takes a reference as an",
    "start": "258479",
    "end": "260239"
  },
  {
    "text": "argument we make a reference",
    "start": "260239",
    "end": "261759"
  },
  {
    "text": "with the ref function which takes a",
    "start": "261759",
    "end": "263360"
  },
  {
    "text": "collection and a document id",
    "start": "263360",
    "end": "265280"
  },
  {
    "text": "as its argument if we then execute the",
    "start": "265280",
    "end": "267520"
  },
  {
    "text": "query we get the document data back as a",
    "start": "267520",
    "end": "269440"
  },
  {
    "text": "result",
    "start": "269440",
    "end": "270160"
  },
  {
    "text": "and as an added bonus you'll notice if",
    "start": "270160",
    "end": "271840"
  },
  {
    "text": "we hover over the information icon it",
    "start": "271840",
    "end": "273919"
  },
  {
    "text": "will tell us exactly how many bytes were",
    "start": "273919",
    "end": "275440"
  },
  {
    "text": "transferred",
    "start": "275440",
    "end": "276000"
  },
  {
    "text": "and a bunch of other useful information",
    "start": "276000",
    "end": "277680"
  },
  {
    "text": "now reading a single document is very",
    "start": "277680",
    "end": "279520"
  },
  {
    "text": "easy when you have the id",
    "start": "279520",
    "end": "280720"
  },
  {
    "text": "but in the real world the document id",
    "start": "280720",
    "end": "282479"
  },
  {
    "text": "might not be readily available",
    "start": "282479",
    "end": "283840"
  },
  {
    "text": "and that brings us to our next big topic",
    "start": "283840",
    "end": "285759"
  },
  {
    "text": "indexes an index provides a way for you",
    "start": "285759",
    "end": "288080"
  },
  {
    "text": "to define how to query documents from a",
    "start": "288080",
    "end": "290240"
  },
  {
    "text": "collection",
    "start": "290240",
    "end": "290960"
  },
  {
    "text": "for example we might want to fetch a",
    "start": "290960",
    "end": "292720"
  },
  {
    "text": "user based on their email address or",
    "start": "292720",
    "end": "294479"
  },
  {
    "text": "username instead of the actual",
    "start": "294479",
    "end": "296000"
  },
  {
    "text": "document id a collection can have",
    "start": "296000",
    "end": "297759"
  },
  {
    "text": "millions of documents so an index",
    "start": "297759",
    "end": "299520"
  },
  {
    "text": "provides a way to create a lookup table",
    "start": "299520",
    "end": "301680"
  },
  {
    "text": "to quickly retrieve documents based on",
    "start": "301680",
    "end": "303360"
  },
  {
    "text": "their actual internal data first we'll",
    "start": "303360",
    "end": "305199"
  },
  {
    "text": "give our index a name which in our case",
    "start": "305199",
    "end": "306880"
  },
  {
    "text": "will be users by name",
    "start": "306880",
    "end": "308639"
  },
  {
    "text": "from there we can specify one or more",
    "start": "308639",
    "end": "310320"
  },
  {
    "text": "terms which is a field on the document",
    "start": "310320",
    "end": "312400"
  },
  {
    "text": "itself that can be searched",
    "start": "312400",
    "end": "313680"
  },
  {
    "text": "in our case every user document has a",
    "start": "313680",
    "end": "315440"
  },
  {
    "text": "name and we want to be able to fetch a",
    "start": "315440",
    "end": "317199"
  },
  {
    "text": "user by the name",
    "start": "317199",
    "end": "318240"
  },
  {
    "text": "by default the index will only return",
    "start": "318240",
    "end": "320160"
  },
  {
    "text": "the document reference",
    "start": "320160",
    "end": "321360"
  },
  {
    "text": "but another cool thing about fauna is",
    "start": "321360",
    "end": "322960"
  },
  {
    "text": "that you can tell the database which",
    "start": "322960",
    "end": "324400"
  },
  {
    "text": "values from the document you want to",
    "start": "324400",
    "end": "325919"
  },
  {
    "text": "return",
    "start": "325919",
    "end": "326479"
  },
  {
    "text": "in other words you search a document by",
    "start": "326479",
    "end": "328560"
  },
  {
    "text": "the username and then return the email",
    "start": "328560",
    "end": "330400"
  },
  {
    "text": "address or whatever other data you want",
    "start": "330400",
    "end": "332160"
  },
  {
    "text": "for the ui",
    "start": "332160",
    "end": "333199"
  },
  {
    "text": "that's an extremely useful little",
    "start": "333199",
    "end": "334479"
  },
  {
    "text": "feature and we'll put it to use later in",
    "start": "334479",
    "end": "336080"
  },
  {
    "text": "the video",
    "start": "336080",
    "end": "336960"
  },
  {
    "text": "now let's go back to the shell and we'll",
    "start": "336960",
    "end": "338479"
  },
  {
    "text": "see how we can read a document with this",
    "start": "338479",
    "end": "340160"
  },
  {
    "text": "index",
    "start": "340160",
    "end": "340880"
  },
  {
    "text": "inside of git we'll use the match",
    "start": "340880",
    "end": "342320"
  },
  {
    "text": "function to search across an index",
    "start": "342320",
    "end": "344560"
  },
  {
    "text": "it takes the index as its first argument",
    "start": "344560",
    "end": "346720"
  },
  {
    "text": "and then an array of search terms as the",
    "start": "346720",
    "end": "348479"
  },
  {
    "text": "second argument",
    "start": "348479",
    "end": "349440"
  },
  {
    "text": "in this case we just have the username",
    "start": "349440",
    "end": "351039"
  },
  {
    "text": "which we can add as the second argument",
    "start": "351039",
    "end": "352960"
  },
  {
    "text": "and go ahead and execute the query and",
    "start": "352960",
    "end": "354800"
  },
  {
    "text": "you should get that same document back",
    "start": "354800",
    "end": "356400"
  },
  {
    "text": "as the result",
    "start": "356400",
    "end": "357680"
  },
  {
    "text": "now that we've explored the fauna",
    "start": "357680",
    "end": "358800"
  },
  {
    "text": "dashboard a little bit we're going to",
    "start": "358800",
    "end": "360319"
  },
  {
    "text": "switch gears into an actual nodejs",
    "start": "360319",
    "end": "362400"
  },
  {
    "text": "application",
    "start": "362400",
    "end": "363039"
  },
  {
    "text": "our goal is to build a simple rest api",
    "start": "363039",
    "end": "364960"
  },
  {
    "text": "with express that enables us to read and",
    "start": "364960",
    "end": "367120"
  },
  {
    "text": "write to the database with our own",
    "start": "367120",
    "end": "368400"
  },
  {
    "text": "custom code",
    "start": "368400",
    "end": "369360"
  },
  {
    "text": "by making http requests you can follow",
    "start": "369360",
    "end": "371919"
  },
  {
    "text": "along at this point by opening your ide",
    "start": "371919",
    "end": "373919"
  },
  {
    "text": "to an empty directory",
    "start": "373919",
    "end": "375199"
  },
  {
    "text": "you'll need to have node.js installed on",
    "start": "375199",
    "end": "376800"
  },
  {
    "text": "your system and i'd also recommend",
    "start": "376800",
    "end": "378479"
  },
  {
    "text": "installing the fauna vs code extension",
    "start": "378479",
    "end": "380560"
  },
  {
    "text": "it allows you to see all of your",
    "start": "380560",
    "end": "381919"
  },
  {
    "text": "collections and indexes right here in vs",
    "start": "381919",
    "end": "383919"
  },
  {
    "text": "code which is much easier than going",
    "start": "383919",
    "end": "385600"
  },
  {
    "text": "back and forth to the dashboard",
    "start": "385600",
    "end": "387039"
  },
  {
    "text": "from this empty directory we'll",
    "start": "387039",
    "end": "388400"
  },
  {
    "text": "initialize a new npm project by running",
    "start": "388400",
    "end": "390880"
  },
  {
    "text": "npm",
    "start": "390880",
    "end": "391440"
  },
  {
    "text": "init with the y flag that will give us a",
    "start": "391440",
    "end": "394080"
  },
  {
    "text": "package.json and then we can install",
    "start": "394080",
    "end": "396000"
  },
  {
    "text": "faunadb",
    "start": "396000",
    "end": "396880"
  },
  {
    "text": "and express from there i'll create a",
    "start": "396880",
    "end": "398720"
  },
  {
    "text": "source directory and add an index.js",
    "start": "398720",
    "end": "401120"
  },
  {
    "text": "file to it which is where we'll write",
    "start": "401120",
    "end": "402560"
  },
  {
    "text": "all of our source code",
    "start": "402560",
    "end": "403840"
  },
  {
    "text": "inside this file we'll first require",
    "start": "403840",
    "end": "405440"
  },
  {
    "text": "express which will serve all of our api",
    "start": "405440",
    "end": "407600"
  },
  {
    "text": "endpoints and to interact with the",
    "start": "407600",
    "end": "409360"
  },
  {
    "text": "database we'll require fanadb",
    "start": "409360",
    "end": "411440"
  },
  {
    "text": "and initialize the fonodb client the",
    "start": "411440",
    "end": "413840"
  },
  {
    "text": "client will connect your source code to",
    "start": "413840",
    "end": "415440"
  },
  {
    "text": "the actual database in the cloud",
    "start": "415440",
    "end": "417039"
  },
  {
    "text": "and to do that it requires a secret key",
    "start": "417039",
    "end": "419039"
  },
  {
    "text": "so let's head back to the fauna",
    "start": "419039",
    "end": "420319"
  },
  {
    "text": "dashboard",
    "start": "420319",
    "end": "420960"
  },
  {
    "text": "find the security tab then create a new",
    "start": "420960",
    "end": "422720"
  },
  {
    "text": "key to authenticate your server",
    "start": "422720",
    "end": "424560"
  },
  {
    "text": "by default it gives you the choice",
    "start": "424560",
    "end": "425759"
  },
  {
    "text": "between an admin and a server key",
    "start": "425759",
    "end": "427599"
  },
  {
    "text": "for our use case we just need a server",
    "start": "427599",
    "end": "429199"
  },
  {
    "text": "key however i would like to point out",
    "start": "429199",
    "end": "431120"
  },
  {
    "text": "that you can implement fine grain",
    "start": "431120",
    "end": "432639"
  },
  {
    "text": "access control right here from the fauna",
    "start": "432639",
    "end": "434560"
  },
  {
    "text": "dashboard that makes it easy to follow",
    "start": "434560",
    "end": "436639"
  },
  {
    "text": "the principle of least privilege",
    "start": "436639",
    "end": "437919"
  },
  {
    "text": "where you only grant access to the bare",
    "start": "437919",
    "end": "439599"
  },
  {
    "text": "minimum set of operations that are",
    "start": "439599",
    "end": "441440"
  },
  {
    "text": "actually needed on the server",
    "start": "441440",
    "end": "443120"
  },
  {
    "text": "in any case go ahead and copy the server",
    "start": "443120",
    "end": "445120"
  },
  {
    "text": "key and then paste it into the fontadb",
    "start": "445120",
    "end": "447199"
  },
  {
    "text": "client the next thing we'll do in this",
    "start": "447199",
    "end": "448720"
  },
  {
    "text": "file is start up our express server by",
    "start": "448720",
    "end": "450720"
  },
  {
    "text": "calling app listen",
    "start": "450720",
    "end": "452000"
  },
  {
    "text": "on port 5000 now if you open the command",
    "start": "452000",
    "end": "454400"
  },
  {
    "text": "line and run node",
    "start": "454400",
    "end": "455599"
  },
  {
    "text": "pointed to your source directory it will",
    "start": "455599",
    "end": "457680"
  },
  {
    "text": "start up the server",
    "start": "457680",
    "end": "458639"
  },
  {
    "text": "and keep in mind that you'll need to",
    "start": "458639",
    "end": "459840"
  },
  {
    "text": "restart it anytime the code changes",
    "start": "459840",
    "end": "461919"
  },
  {
    "text": "if that's too annoying for you then",
    "start": "461919",
    "end": "463360"
  },
  {
    "text": "check out nodemon to automatically",
    "start": "463360",
    "end": "465120"
  },
  {
    "text": "reload anytime there's a change",
    "start": "465120",
    "end": "466879"
  },
  {
    "text": "now if you remember earlier i mentioned",
    "start": "466879",
    "end": "468479"
  },
  {
    "text": "that fql is a functional language",
    "start": "468479",
    "end": "470879"
  },
  {
    "text": "and we can import those functions and",
    "start": "470879",
    "end": "472319"
  },
  {
    "text": "use them in javascript from the faunadb",
    "start": "472319",
    "end": "474720"
  },
  {
    "text": "query namespace as you can see i've",
    "start": "474720",
    "end": "477039"
  },
  {
    "text": "imported 10 different functions here",
    "start": "477039",
    "end": "478639"
  },
  {
    "text": "and you don't need to know what they do",
    "start": "478639",
    "end": "479840"
  },
  {
    "text": "at this point the only important thing",
    "start": "479840",
    "end": "481599"
  },
  {
    "text": "to know is that we use these functions",
    "start": "481599",
    "end": "483280"
  },
  {
    "text": "to interact with the database",
    "start": "483280",
    "end": "485039"
  },
  {
    "text": "now let's go ahead and set up our first",
    "start": "485039",
    "end": "486560"
  },
  {
    "text": "api endpoint to read",
    "start": "486560",
    "end": "488160"
  },
  {
    "text": "an individual tweet we'll use express to",
    "start": "488160",
    "end": "490560"
  },
  {
    "text": "set up a get endpoint",
    "start": "490560",
    "end": "491840"
  },
  {
    "text": "that points to a tweet with its id in",
    "start": "491840",
    "end": "493840"
  },
  {
    "text": "the url then for the callback we'll set",
    "start": "493840",
    "end": "496080"
  },
  {
    "text": "up an async function",
    "start": "496080",
    "end": "497199"
  },
  {
    "text": "because any query you make to fauna will",
    "start": "497199",
    "end": "498960"
  },
  {
    "text": "return a promise for this endpoint we",
    "start": "498960",
    "end": "500960"
  },
  {
    "text": "simply want to read a single document",
    "start": "500960",
    "end": "502800"
  },
  {
    "text": "like we did earlier from the shell in",
    "start": "502800",
    "end": "504720"
  },
  {
    "text": "the fauna dashboard",
    "start": "504720",
    "end": "506000"
  },
  {
    "text": "then we'll use the document itself as",
    "start": "506000",
    "end": "507680"
  },
  {
    "text": "the response we can make a request to",
    "start": "507680",
    "end": "509599"
  },
  {
    "text": "fauna for a document",
    "start": "509599",
    "end": "510879"
  },
  {
    "text": "by awaiting a client query query takes",
    "start": "510879",
    "end": "513680"
  },
  {
    "text": "an fql expression as its argument",
    "start": "513680",
    "end": "515760"
  },
  {
    "text": "and remember it's a functional language",
    "start": "515760",
    "end": "517680"
  },
  {
    "text": "so what you end up doing here is",
    "start": "517680",
    "end": "519200"
  },
  {
    "text": "composing multiple javascript functions",
    "start": "519200",
    "end": "521120"
  },
  {
    "text": "together",
    "start": "521120",
    "end": "521680"
  },
  {
    "text": "conceptually it's very similar to",
    "start": "521680",
    "end": "523440"
  },
  {
    "text": "component composition in a ui framework",
    "start": "523440",
    "end": "525600"
  },
  {
    "text": "like react",
    "start": "525600",
    "end": "526480"
  },
  {
    "text": "we'll start with the get function to",
    "start": "526480",
    "end": "528160"
  },
  {
    "text": "read a single document then we use the",
    "start": "528160",
    "end": "529920"
  },
  {
    "text": "ref function to make a reference to the",
    "start": "529920",
    "end": "531920"
  },
  {
    "text": "document that we want",
    "start": "531920",
    "end": "533120"
  },
  {
    "text": "ref takes two arguments one is the",
    "start": "533120",
    "end": "534880"
  },
  {
    "text": "collection that we want to read from",
    "start": "534880",
    "end": "536640"
  },
  {
    "text": "and the second is the document id which",
    "start": "536640",
    "end": "538640"
  },
  {
    "text": "we'll get from the request parameters id",
    "start": "538640",
    "end": "540880"
  },
  {
    "text": "in the url and that's basically all",
    "start": "540880",
    "end": "542640"
  },
  {
    "text": "there is to it the promise will resolve",
    "start": "542640",
    "end": "544480"
  },
  {
    "text": "with the actual document data which we",
    "start": "544480",
    "end": "546160"
  },
  {
    "text": "then send back as the response one thing",
    "start": "546160",
    "end": "548240"
  },
  {
    "text": "we're not doing here though",
    "start": "548240",
    "end": "549279"
  },
  {
    "text": "is catching errors but that would be a",
    "start": "549279",
    "end": "551040"
  },
  {
    "text": "good idea you can wrap the code in a try",
    "start": "551040",
    "end": "553120"
  },
  {
    "text": "catch block or you could simply chain",
    "start": "553120",
    "end": "554560"
  },
  {
    "text": "the catch method to the other end of the",
    "start": "554560",
    "end": "556399"
  },
  {
    "text": "promise",
    "start": "556399",
    "end": "557040"
  },
  {
    "text": "now let's go ahead and test it out at",
    "start": "557040",
    "end": "558720"
  },
  {
    "text": "this point we don't have any tweets in",
    "start": "558720",
    "end": "560320"
  },
  {
    "text": "the database",
    "start": "560320",
    "end": "561040"
  },
  {
    "text": "so let's go back to fauna and create a",
    "start": "561040",
    "end": "563120"
  },
  {
    "text": "new collection for tweets",
    "start": "563120",
    "end": "564560"
  },
  {
    "text": "and then we'll add a document to it with",
    "start": "564560",
    "end": "566240"
  },
  {
    "text": "the text of hello world",
    "start": "566240",
    "end": "567760"
  },
  {
    "text": "once created go ahead and copy the",
    "start": "567760",
    "end": "569760"
  },
  {
    "text": "document id now at this point we need to",
    "start": "569760",
    "end": "571760"
  },
  {
    "text": "make a request to the url in my case i'm",
    "start": "571760",
    "end": "573839"
  },
  {
    "text": "using an http client known as insomnia",
    "start": "573839",
    "end": "576399"
  },
  {
    "text": "however you could just use curl from the",
    "start": "576399",
    "end": "578080"
  },
  {
    "text": "command line or a vs code extension",
    "start": "578080",
    "end": "580240"
  },
  {
    "text": "to make these requests in any case what",
    "start": "580240",
    "end": "582160"
  },
  {
    "text": "we need to do is make a get request to",
    "start": "582160",
    "end": "584399"
  },
  {
    "text": "localhost 5000",
    "start": "584399",
    "end": "586320"
  },
  {
    "text": "tweet followed by the tweet id when we",
    "start": "586320",
    "end": "588880"
  },
  {
    "text": "send it we should get the document back",
    "start": "588880",
    "end": "590720"
  },
  {
    "text": "including the document data with the",
    "start": "590720",
    "end": "592399"
  },
  {
    "text": "text of hello world",
    "start": "592399",
    "end": "594000"
  },
  {
    "text": "now that we know our api is working",
    "start": "594000",
    "end": "595519"
  },
  {
    "text": "we're going to look at some more complex",
    "start": "595519",
    "end": "597200"
  },
  {
    "text": "examples of relational data",
    "start": "597200",
    "end": "599040"
  },
  {
    "text": "in this app a user can have many tweets",
    "start": "599040",
    "end": "601600"
  },
  {
    "text": "but how do we connect a user document to",
    "start": "601600",
    "end": "603519"
  },
  {
    "text": "a tweet document",
    "start": "603519",
    "end": "604640"
  },
  {
    "text": "well first we need a way to create a",
    "start": "604640",
    "end": "606399"
  },
  {
    "text": "tweet and to handle that",
    "start": "606399",
    "end": "607839"
  },
  {
    "text": "we'll create a post endpoint that points",
    "start": "607839",
    "end": "609839"
  },
  {
    "text": "to the tweet url",
    "start": "609839",
    "end": "611200"
  },
  {
    "text": "and then we'll start with the same async",
    "start": "611200",
    "end": "612720"
  },
  {
    "text": "function setup that we used in the",
    "start": "612720",
    "end": "614160"
  },
  {
    "text": "previous endpoint",
    "start": "614160",
    "end": "615360"
  },
  {
    "text": "creating a document is really easy we",
    "start": "615360",
    "end": "617200"
  },
  {
    "text": "just use the create function",
    "start": "617200",
    "end": "618720"
  },
  {
    "text": "point to the collection we want and then",
    "start": "618720",
    "end": "620480"
  },
  {
    "text": "pass it whatever custom data we want to",
    "start": "620480",
    "end": "622320"
  },
  {
    "text": "save there",
    "start": "622320",
    "end": "622959"
  },
  {
    "text": "when we construct the data object we can",
    "start": "622959",
    "end": "624800"
  },
  {
    "text": "use regular javascript values",
    "start": "624800",
    "end": "626560"
  },
  {
    "text": "or we can use fql functions to get data",
    "start": "626560",
    "end": "629519"
  },
  {
    "text": "from the database",
    "start": "629519",
    "end": "630560"
  },
  {
    "text": "in this case we want the user field to",
    "start": "630560",
    "end": "632480"
  },
  {
    "text": "be a reference to another user document",
    "start": "632480",
    "end": "634720"
  },
  {
    "text": "in fauna",
    "start": "634720",
    "end": "635440"
  },
  {
    "text": "there are many possible ways to do this",
    "start": "635440",
    "end": "637120"
  },
  {
    "text": "but one way is to use the select",
    "start": "637120",
    "end": "638880"
  },
  {
    "text": "function",
    "start": "638880",
    "end": "639440"
  },
  {
    "text": "which will select a specific value from",
    "start": "639440",
    "end": "641600"
  },
  {
    "text": "a document which in this case",
    "start": "641600",
    "end": "643120"
  },
  {
    "text": "is the reference now at this point we",
    "start": "643120",
    "end": "645440"
  },
  {
    "text": "might assume we only have the username",
    "start": "645440",
    "end": "647440"
  },
  {
    "text": "in which case we can use our index users",
    "start": "647440",
    "end": "649600"
  },
  {
    "text": "by name",
    "start": "649600",
    "end": "650480"
  },
  {
    "text": "to get the corresponding user document",
    "start": "650480",
    "end": "652399"
  },
  {
    "text": "reference so the main takeaway here",
    "start": "652399",
    "end": "654399"
  },
  {
    "text": "is that you can read one or more",
    "start": "654399",
    "end": "655600"
  },
  {
    "text": "documents when performing some kind of",
    "start": "655600",
    "end": "657519"
  },
  {
    "text": "other operation",
    "start": "657519",
    "end": "658399"
  },
  {
    "text": "like a write to the database and that",
    "start": "658399",
    "end": "660240"
  },
  {
    "text": "allows you to model relational data in a",
    "start": "660240",
    "end": "662079"
  },
  {
    "text": "way that's very similar to an sql",
    "start": "662079",
    "end": "663839"
  },
  {
    "text": "database with foreign keys",
    "start": "663839",
    "end": "665519"
  },
  {
    "text": "and it's also worth noting that fauna is",
    "start": "665519",
    "end": "667519"
  },
  {
    "text": "100 acid compliant",
    "start": "667519",
    "end": "669279"
  },
  {
    "text": "which means when you run this database",
    "start": "669279",
    "end": "670800"
  },
  {
    "text": "transaction it'll be globally consistent",
    "start": "670800",
    "end": "673120"
  },
  {
    "text": "or in other words all future reads will",
    "start": "673120",
    "end": "675040"
  },
  {
    "text": "reflect the value of the right",
    "start": "675040",
    "end": "676640"
  },
  {
    "text": "even when distributed across thousands",
    "start": "676640",
    "end": "678480"
  },
  {
    "text": "of users around the world",
    "start": "678480",
    "end": "680079"
  },
  {
    "text": "if we go back to our http client we can",
    "start": "680079",
    "end": "682079"
  },
  {
    "text": "make a post request to localhost 5000",
    "start": "682079",
    "end": "684720"
  },
  {
    "text": "slash tweet then we should get the newly",
    "start": "684720",
    "end": "686880"
  },
  {
    "text": "created tweet back as the response",
    "start": "686880",
    "end": "688800"
  },
  {
    "text": "and if you go to the fauna dashboard you",
    "start": "688800",
    "end": "690399"
  },
  {
    "text": "should see it created in the users",
    "start": "690399",
    "end": "691760"
  },
  {
    "text": "collection there as well",
    "start": "691760",
    "end": "692959"
  },
  {
    "text": "now that we have multiple tweets in the",
    "start": "692959",
    "end": "694079"
  },
  {
    "text": "database let's create an endpoint that",
    "start": "694079",
    "end": "696000"
  },
  {
    "text": "can retrieve or query multiple tweets",
    "start": "696000",
    "end": "698320"
  },
  {
    "text": "based on a username before we can make",
    "start": "698320",
    "end": "701279"
  },
  {
    "text": "that query we'll need an index",
    "start": "701279",
    "end": "702880"
  },
  {
    "text": "so let's go back to the fauna dashboard",
    "start": "702880",
    "end": "704720"
  },
  {
    "text": "and create a new index",
    "start": "704720",
    "end": "706000"
  },
  {
    "text": "called tweets by user the field we want",
    "start": "706000",
    "end": "708079"
  },
  {
    "text": "to index here is the user reference",
    "start": "708079",
    "end": "710079"
  },
  {
    "text": "to give us all the tweets owned by a",
    "start": "710079",
    "end": "711760"
  },
  {
    "text": "user and because we already have the",
    "start": "711760",
    "end": "713360"
  },
  {
    "text": "user reference we don't really need to",
    "start": "713360",
    "end": "714959"
  },
  {
    "text": "have that returned on",
    "start": "714959",
    "end": "716000"
  },
  {
    "text": "every single document we can tell fauna",
    "start": "716000",
    "end": "718079"
  },
  {
    "text": "to only return the tweet text by setting",
    "start": "718079",
    "end": "720240"
  },
  {
    "text": "it as a value",
    "start": "720240",
    "end": "721200"
  },
  {
    "text": "that way we're only returning the actual",
    "start": "721200",
    "end": "722639"
  },
  {
    "text": "data that we need for the ui",
    "start": "722639",
    "end": "724480"
  },
  {
    "text": "when we make this query it's very",
    "start": "724480",
    "end": "725920"
  },
  {
    "text": "similar to reading a single document",
    "start": "725920",
    "end": "727680"
  },
  {
    "text": "but instead of get we use the paginate",
    "start": "727680",
    "end": "729760"
  },
  {
    "text": "function the difference here",
    "start": "729760",
    "end": "731279"
  },
  {
    "text": "is that git returns the first match",
    "start": "731279",
    "end": "733040"
  },
  {
    "text": "whereas paginate will return a set of",
    "start": "733040",
    "end": "734959"
  },
  {
    "text": "documents",
    "start": "734959",
    "end": "735600"
  },
  {
    "text": "that match that query we then point to",
    "start": "735600",
    "end": "737279"
  },
  {
    "text": "the index and then use select to grab",
    "start": "737279",
    "end": "739360"
  },
  {
    "text": "the reference to the user",
    "start": "739360",
    "end": "741360"
  },
  {
    "text": "now there is one thing that is bothering",
    "start": "741360",
    "end": "743040"
  },
  {
    "text": "me at this point we have some code",
    "start": "743040",
    "end": "744560"
  },
  {
    "text": "duplication going on in our code base",
    "start": "744560",
    "end": "746399"
  },
  {
    "text": "notice we're using the same exact",
    "start": "746399",
    "end": "747920"
  },
  {
    "text": "select code for this query as we are in",
    "start": "747920",
    "end": "750320"
  },
  {
    "text": "the previous endpoint",
    "start": "750320",
    "end": "751600"
  },
  {
    "text": "and getting a user is something we'll do",
    "start": "751600",
    "end": "753360"
  },
  {
    "text": "often so it's only going to get worse as",
    "start": "753360",
    "end": "755200"
  },
  {
    "text": "we move forward",
    "start": "755200",
    "end": "756160"
  },
  {
    "text": "and that brings us to yet another",
    "start": "756160",
    "end": "757680"
  },
  {
    "text": "awesome feature in fauna called",
    "start": "757680",
    "end": "759040"
  },
  {
    "text": "functions",
    "start": "759040",
    "end": "760000"
  },
  {
    "text": "go ahead and copy the duplicated code",
    "start": "760000",
    "end": "761839"
  },
  {
    "text": "and then head over to the fauna",
    "start": "761839",
    "end": "763040"
  },
  {
    "text": "dashboard and find the functions tab",
    "start": "763040",
    "end": "765360"
  },
  {
    "text": "a function allows you to extract some",
    "start": "765360",
    "end": "767279"
  },
  {
    "text": "fql code so it can be used on any server",
    "start": "767279",
    "end": "769839"
  },
  {
    "text": "or any platform we'll give our function",
    "start": "769839",
    "end": "771760"
  },
  {
    "text": "a name of getuser",
    "start": "771760",
    "end": "773120"
  },
  {
    "text": "and then apply it to the server role",
    "start": "773120",
    "end": "775120"
  },
  {
    "text": "then in the function body we have a",
    "start": "775120",
    "end": "776800"
  },
  {
    "text": "query",
    "start": "776800",
    "end": "777440"
  },
  {
    "text": "followed by a lambda function if you're",
    "start": "777440",
    "end": "779440"
  },
  {
    "text": "not familiar with a lambda function",
    "start": "779440",
    "end": "781040"
  },
  {
    "text": "just think of it like an anonymous arrow",
    "start": "781040",
    "end": "782800"
  },
  {
    "text": "function in javascript",
    "start": "782800",
    "end": "784160"
  },
  {
    "text": "the value of x is something we pass into",
    "start": "784160",
    "end": "786160"
  },
  {
    "text": "the function then in the function body",
    "start": "786160",
    "end": "788079"
  },
  {
    "text": "we'll add our duplicated code",
    "start": "788079",
    "end": "789920"
  },
  {
    "text": "instead of the hard-coded username we'll",
    "start": "789920",
    "end": "791839"
  },
  {
    "text": "add a variable that points to x",
    "start": "791839",
    "end": "794480"
  },
  {
    "text": "and then we'll actually change the name",
    "start": "794480",
    "end": "795680"
  },
  {
    "text": "of x to user just to make our code a",
    "start": "795680",
    "end": "797839"
  },
  {
    "text": "little more readable",
    "start": "797839",
    "end": "798880"
  },
  {
    "text": "now we can go back into our node app and",
    "start": "798880",
    "end": "800560"
  },
  {
    "text": "reference this function we'll need to",
    "start": "800560",
    "end": "802240"
  },
  {
    "text": "import call",
    "start": "802240",
    "end": "803120"
  },
  {
    "text": "and function and when you import",
    "start": "803120",
    "end": "804880"
  },
  {
    "text": "function you'll want to rename it",
    "start": "804880",
    "end": "806480"
  },
  {
    "text": "something else using a colon",
    "start": "806480",
    "end": "808079"
  },
  {
    "text": "because it collides with the built-in",
    "start": "808079",
    "end": "809680"
  },
  {
    "text": "function in javascript next",
    "start": "809680",
    "end": "811440"
  },
  {
    "text": "let's find the duplicated lines of code",
    "start": "811440",
    "end": "813120"
  },
  {
    "text": "that we want to replace",
    "start": "813120",
    "end": "814480"
  },
  {
    "text": "now we can call the function by its name",
    "start": "814480",
    "end": "816480"
  },
  {
    "text": "getuser and then pass in whatever custom",
    "start": "816480",
    "end": "818720"
  },
  {
    "text": "argument we want here and it will be",
    "start": "818720",
    "end": "820320"
  },
  {
    "text": "executed by fauna remotely",
    "start": "820320",
    "end": "821839"
  },
  {
    "text": "so if you ever need to update this code",
    "start": "821839",
    "end": "823680"
  },
  {
    "text": "it gets updated throughout your entire",
    "start": "823680",
    "end": "825199"
  },
  {
    "text": "code base atomically",
    "start": "825199",
    "end": "826639"
  },
  {
    "text": "the bottom line here is that functions",
    "start": "826639",
    "end": "828320"
  },
  {
    "text": "provide an awesome way to keep your code",
    "start": "828320",
    "end": "829920"
  },
  {
    "text": "concise",
    "start": "829920",
    "end": "830560"
  },
  {
    "text": "and maintainable what we created is a",
    "start": "830560",
    "end": "832800"
  },
  {
    "text": "one-to-many relationship where a user",
    "start": "832800",
    "end": "834639"
  },
  {
    "text": "has many tweets and a tweet belongs to a",
    "start": "834639",
    "end": "836800"
  },
  {
    "text": "user",
    "start": "836800",
    "end": "837440"
  },
  {
    "text": "what we're going to look at next is the",
    "start": "837440",
    "end": "838959"
  },
  {
    "text": "relationship between users",
    "start": "838959",
    "end": "840480"
  },
  {
    "text": "where a user can follow another user and",
    "start": "840480",
    "end": "842560"
  },
  {
    "text": "or be followed by that user",
    "start": "842560",
    "end": "844240"
  },
  {
    "text": "or in other words a user can have and",
    "start": "844240",
    "end": "846320"
  },
  {
    "text": "belong to many different relationships",
    "start": "846320",
    "end": "848320"
  },
  {
    "text": "it's your typical social graph data",
    "start": "848320",
    "end": "850160"
  },
  {
    "text": "model first we'll go to the fauna",
    "start": "850160",
    "end": "851680"
  },
  {
    "text": "dashboard",
    "start": "851680",
    "end": "852320"
  },
  {
    "text": "and create a new collection for",
    "start": "852320",
    "end": "853600"
  },
  {
    "text": "relationships each document in this",
    "start": "853600",
    "end": "855440"
  },
  {
    "text": "collection",
    "start": "855440",
    "end": "856000"
  },
  {
    "text": "will contain a follower and a followee",
    "start": "856000",
    "end": "858399"
  },
  {
    "text": "whose values are user document",
    "start": "858399",
    "end": "860240"
  },
  {
    "text": "references",
    "start": "860240",
    "end": "861120"
  },
  {
    "text": "you can think of this document as an",
    "start": "861120",
    "end": "862639"
  },
  {
    "text": "edge in a graph that connects two user",
    "start": "862639",
    "end": "864560"
  },
  {
    "text": "accounts together",
    "start": "864560",
    "end": "865519"
  },
  {
    "text": "a one-way graph where the follower",
    "start": "865519",
    "end": "867519"
  },
  {
    "text": "points to the following",
    "start": "867519",
    "end": "868800"
  },
  {
    "text": "back in our code we'll set up a new",
    "start": "868800",
    "end": "870399"
  },
  {
    "text": "relationship endpoint that creates the",
    "start": "870399",
    "end": "872320"
  },
  {
    "text": "relationship document",
    "start": "872320",
    "end": "873519"
  },
  {
    "text": "it creates a document just like we did",
    "start": "873519",
    "end": "875040"
  },
  {
    "text": "for a tweet the only difference is that",
    "start": "875040",
    "end": "876800"
  },
  {
    "text": "we point to the relationships collection",
    "start": "876800",
    "end": "878800"
  },
  {
    "text": "in the data object the follower and the",
    "start": "878800",
    "end": "880800"
  },
  {
    "text": "followee are just user references which",
    "start": "880800",
    "end": "882959"
  },
  {
    "text": "we can get by calling our get user",
    "start": "882959",
    "end": "884800"
  },
  {
    "text": "function that we created previously",
    "start": "884800",
    "end": "886959"
  },
  {
    "text": "for now we'll just hard code a couple of",
    "start": "886959",
    "end": "888639"
  },
  {
    "text": "usernames in here to show that bob",
    "start": "888639",
    "end": "890639"
  },
  {
    "text": "follows fireship we can now go ahead and",
    "start": "890639",
    "end": "892639"
  },
  {
    "text": "make a post request to the relationship",
    "start": "892639",
    "end": "894639"
  },
  {
    "text": "endpoint",
    "start": "894639",
    "end": "895440"
  },
  {
    "text": "and we should get a new document back",
    "start": "895440",
    "end": "897120"
  },
  {
    "text": "that has a follower and a followee with",
    "start": "897120",
    "end": "899279"
  },
  {
    "text": "a user reference on it",
    "start": "899279",
    "end": "900560"
  },
  {
    "text": "now that we can establish a relationship",
    "start": "900560",
    "end": "902320"
  },
  {
    "text": "i want to show you how we can get all",
    "start": "902320",
    "end": "903760"
  },
  {
    "text": "the accounts that are followed by a",
    "start": "903760",
    "end": "905279"
  },
  {
    "text": "given user",
    "start": "905279",
    "end": "906160"
  },
  {
    "text": "and not just the accounts but also the",
    "start": "906160",
    "end": "907920"
  },
  {
    "text": "tweets that are owned by those accounts",
    "start": "907920",
    "end": "909600"
  },
  {
    "text": "so we can show the end user a feed of",
    "start": "909600",
    "end": "911760"
  },
  {
    "text": "tweets from the people that they follow",
    "start": "911760",
    "end": "913680"
  },
  {
    "text": "the first step of course will be to",
    "start": "913680",
    "end": "915199"
  },
  {
    "text": "create a new index which will give a",
    "start": "915199",
    "end": "916959"
  },
  {
    "text": "name",
    "start": "916959",
    "end": "917360"
  },
  {
    "text": "of followers by followee it will take",
    "start": "917360",
    "end": "919440"
  },
  {
    "text": "the followees user reference",
    "start": "919440",
    "end": "921040"
  },
  {
    "text": "then return all the accounts that that",
    "start": "921040",
    "end": "922639"
  },
  {
    "text": "user is following from there we'll go",
    "start": "922639",
    "end": "924639"
  },
  {
    "text": "back to our code and create a new git",
    "start": "924639",
    "end": "926320"
  },
  {
    "text": "endpoint for feed",
    "start": "926320",
    "end": "927360"
  },
  {
    "text": "we'll again use the paginate function in",
    "start": "927360",
    "end": "928959"
  },
  {
    "text": "the query but this time",
    "start": "928959",
    "end": "930639"
  },
  {
    "text": "instead of retrieving a single index",
    "start": "930639",
    "end": "932560"
  },
  {
    "text": "we're going to join two indexes together",
    "start": "932560",
    "end": "935040"
  },
  {
    "text": "the join function takes two arguments",
    "start": "935040",
    "end": "937040"
  },
  {
    "text": "the first one is the initial thing that",
    "start": "937040",
    "end": "938880"
  },
  {
    "text": "you want to query which in our case is",
    "start": "938880",
    "end": "941120"
  },
  {
    "text": "all the followed users which we can get",
    "start": "941120",
    "end": "943040"
  },
  {
    "text": "by pointing to our recently created",
    "start": "943040",
    "end": "944560"
  },
  {
    "text": "index",
    "start": "944560",
    "end": "945120"
  },
  {
    "text": "and then a specific username like bob",
    "start": "945120",
    "end": "947600"
  },
  {
    "text": "that will give us all of the user",
    "start": "947600",
    "end": "948800"
  },
  {
    "text": "references that are followed by bob",
    "start": "948800",
    "end": "950800"
  },
  {
    "text": "we can then join all the tweets from",
    "start": "950800",
    "end": "952399"
  },
  {
    "text": "those users by using the index",
    "start": "952399",
    "end": "954480"
  },
  {
    "text": "tweets by user as the second argument if",
    "start": "954480",
    "end": "957040"
  },
  {
    "text": "we go ahead and make that request",
    "start": "957040",
    "end": "958399"
  },
  {
    "text": "you can see that we now get the text",
    "start": "958399",
    "end": "959759"
  },
  {
    "text": "from multiple tweets back from that",
    "start": "959759",
    "end": "961199"
  },
  {
    "text": "index",
    "start": "961199",
    "end": "961680"
  },
  {
    "text": "and there's a lot more we could do with",
    "start": "961680",
    "end": "962800"
  },
  {
    "text": "joins here instead of returning the",
    "start": "962800",
    "end": "964320"
  },
  {
    "text": "entire index we could use a lambda",
    "start": "964320",
    "end": "966240"
  },
  {
    "text": "function",
    "start": "966240",
    "end": "966800"
  },
  {
    "text": "to filter and sort the results with our",
    "start": "966800",
    "end": "968560"
  },
  {
    "text": "own custom logic but i think we'll save",
    "start": "968560",
    "end": "970240"
  },
  {
    "text": "that for a future video",
    "start": "970240",
    "end": "971759"
  },
  {
    "text": "i'm going to go ahead and wrap things up",
    "start": "971759",
    "end": "972959"
  },
  {
    "text": "there fauna is a truly awesome database",
    "start": "972959",
    "end": "975120"
  },
  {
    "text": "and the more i use it the more i like it",
    "start": "975120",
    "end": "976800"
  },
  {
    "text": "if i were starting a new project today",
    "start": "976800",
    "end": "978480"
  },
  {
    "text": "fauna would definitely be at the top of",
    "start": "978480",
    "end": "980079"
  },
  {
    "text": "my list for the tech stack",
    "start": "980079",
    "end": "981600"
  },
  {
    "text": "if you want to see more videos on this",
    "start": "981600",
    "end": "982800"
  },
  {
    "text": "topic let me know in the comments",
    "start": "982800",
    "end": "984240"
  },
  {
    "text": "consider supporting my work with a",
    "start": "984240",
    "end": "985600"
  },
  {
    "text": "github sponsorship or by becoming a pro",
    "start": "985600",
    "end": "987680"
  },
  {
    "text": "member at fire ship io",
    "start": "987680",
    "end": "989279"
  },
  {
    "text": "thanks for watching and i will see you",
    "start": "989279",
    "end": "991040"
  },
  {
    "text": "in the next one",
    "start": "991040",
    "end": "997040"
  }
]