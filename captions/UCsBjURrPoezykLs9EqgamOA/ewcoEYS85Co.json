[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "5360"
  },
  {
    "text": "one of the most difficult but also most",
    "start": "6170",
    "end": "8730"
  },
  {
    "text": "rewarding javascript libraries to learn",
    "start": "8730",
    "end": "10320"
  },
  {
    "text": "is rxjs it's a tool that helps us",
    "start": "10320",
    "end": "12750"
  },
  {
    "text": "control data as it flows through the",
    "start": "12750",
    "end": "14429"
  },
  {
    "text": "dimension of time in today's episode of",
    "start": "14429",
    "end": "16080"
  },
  {
    "text": "code that's notthat you'll learn ten",
    "start": "16080",
    "end": "17460"
  },
  {
    "text": "fundamental concepts in rxjs and how to",
    "start": "17460",
    "end": "19740"
  },
  {
    "text": "avoid the bad stuff if you're new here",
    "start": "19740",
    "end": "21600"
  },
  {
    "text": "like and subscribe and leave me a",
    "start": "21600",
    "end": "23010"
  },
  {
    "text": "comment below for a chance to win this",
    "start": "23010",
    "end": "24600"
  },
  {
    "text": "t-shirt next week rxjs is getting pretty",
    "start": "24600",
    "end": "26849"
  },
  {
    "text": "popular these days in fact it gets more",
    "start": "26849",
    "end": "28650"
  },
  {
    "text": "daily npm downloads than angular",
    "start": "28650",
    "end": "30359"
  },
  {
    "text": "reactive view and the only functional",
    "start": "30359",
    "end": "32250"
  },
  {
    "text": "library that i'm aware of it's bigger is",
    "start": "32250",
    "end": "33780"
  },
  {
    "text": "low - and the reason it's so popular is",
    "start": "33780",
    "end": "35820"
  },
  {
    "text": "because javascript alone doesn't give us",
    "start": "35820",
    "end": "37500"
  },
  {
    "text": "quite everything we would like to work",
    "start": "37500",
    "end": "39059"
  },
  {
    "text": "with asynchronous streams of data we",
    "start": "39059",
    "end": "41040"
  },
  {
    "text": "have promises but they only work with a",
    "start": "41040",
    "end": "42660"
  },
  {
    "text": "single ASIC value so we use callbacks",
    "start": "42660",
    "end": "44940"
  },
  {
    "text": "for real time streams but you've",
    "start": "44940",
    "end": "46289"
  },
  {
    "text": "probably heard the term callback hell",
    "start": "46289",
    "end": "47700"
  },
  {
    "text": "rxjs addresses these issues and gives us",
    "start": "47700",
    "end": "50129"
  },
  {
    "text": "a powerful functional library for",
    "start": "50129",
    "end": "51930"
  },
  {
    "text": "dealing with strings and when I say",
    "start": "51930",
    "end": "53820"
  },
  {
    "text": "stream I'm talking about any data source",
    "start": "53820",
    "end": "55590"
  },
  {
    "text": "that unfolds over the dimension of time",
    "start": "55590",
    "end": "57329"
  },
  {
    "text": "things like data from firebase Dom",
    "start": "57329",
    "end": "59430"
  },
  {
    "text": "events WebSockets file uploads etc the",
    "start": "59430",
    "end": "62940"
  },
  {
    "text": "first thing you'll need to do is install",
    "start": "62940",
    "end": "64049"
  },
  {
    "text": "rxjs I'm currently running version 6.4",
    "start": "64049",
    "end": "66990"
  },
  {
    "text": "now I'm just using vanilla JavaScript",
    "start": "66990",
    "end": "68610"
  },
  {
    "text": "with webpack but feel free to follow",
    "start": "68610",
    "end": "70770"
  },
  {
    "text": "along with your favorite JavaScript",
    "start": "70770",
    "end": "72150"
  },
  {
    "text": "framework the most fundamental class in",
    "start": "72150",
    "end": "74040"
  },
  {
    "start": "73000",
    "end": "73000"
  },
  {
    "text": "rxjs is the observable you can think of",
    "start": "74040",
    "end": "76439"
  },
  {
    "text": "it as a wrapper for some data that can",
    "start": "76439",
    "end": "78240"
  },
  {
    "text": "be subscribed to and then the subscriber",
    "start": "78240",
    "end": "80130"
  },
  {
    "text": "will be notified anytime the data",
    "start": "80130",
    "end": "81780"
  },
  {
    "text": "changes when working with rxjs you",
    "start": "81780",
    "end": "83790"
  },
  {
    "text": "should think of yourself as a plumber",
    "start": "83790",
    "end": "85020"
  },
  {
    "text": "and I mean that in the most literal",
    "start": "85020",
    "end": "86009"
  },
  {
    "text": "sense because an observable is",
    "start": "86009",
    "end": "87630"
  },
  {
    "text": "essentially a pipe for data and rxjs",
    "start": "87630",
    "end": "90000"
  },
  {
    "text": "gives you all kinds of tools to modify",
    "start": "90000",
    "end": "91920"
  },
  {
    "text": "those pipes let's go ahead and create",
    "start": "91920",
    "end": "93750"
  },
  {
    "text": "our first observable but first we need",
    "start": "93750",
    "end": "95520"
  },
  {
    "text": "to import the rxjs library and there's a",
    "start": "95520",
    "end": "97950"
  },
  {
    "text": "right and a wrong way to do this",
    "start": "97950",
    "end": "99210"
  },
  {
    "text": "currently I'm doing it the wrong way by",
    "start": "99210",
    "end": "101070"
  },
  {
    "text": "using import star as our X but that's",
    "start": "101070",
    "end": "103740"
  },
  {
    "text": "going to cause the entire library to be",
    "start": "103740",
    "end": "105600"
  },
  {
    "text": "bundled up in our code you can see down",
    "start": "105600",
    "end": "107490"
  },
  {
    "text": "here we have a bundle size of 47",
    "start": "107490",
    "end": "109470"
  },
  {
    "text": "kilobytes but rxjs is a tree shakable",
    "start": "109470",
    "end": "111960"
  },
  {
    "text": "library which means we only have to",
    "start": "111960",
    "end": "113729"
  },
  {
    "text": "import the code that we actually need so",
    "start": "113729",
    "end": "115680"
  },
  {
    "text": "when working with rxjs you should only",
    "start": "115680",
    "end": "117420"
  },
  {
    "text": "import the classes and operators that",
    "start": "117420",
    "end": "119100"
  },
  {
    "text": "you actually need in your source code",
    "start": "119100",
    "end": "120509"
  },
  {
    "text": "and by doing that we reduce our bundle",
    "start": "120509",
    "end": "122250"
  },
  {
    "text": "size to less than 2 kilobytes now that",
    "start": "122250",
    "end": "124530"
  },
  {
    "text": "you know that let's go ahead and create",
    "start": "124530",
    "end": "125759"
  },
  {
    "text": "an observable from scratch now you won't",
    "start": "125759",
    "end": "128009"
  },
  {
    "text": "normally create observables like this in",
    "start": "128009",
    "end": "129420"
  },
  {
    "text": "your own code but it's a good exercise",
    "start": "129420",
    "end": "130920"
  },
  {
    "text": "to understand what an observable is when",
    "start": "130920",
    "end": "133170"
  },
  {
    "text": "we call observable",
    "start": "133170",
    "end": "134099"
  },
  {
    "text": "it gives us a callback function that we",
    "start": "134099",
    "end": "136230"
  },
  {
    "text": "can use to notify a subscriber with some",
    "start": "136230",
    "end": "138329"
  },
  {
    "text": "new data this can be synchronous or",
    "start": "138329",
    "end": "140129"
  },
  {
    "text": "asynchronous but basically every time we",
    "start": "140129",
    "end": "142200"
  },
  {
    "text": "call next it's like emitting an event to",
    "start": "142200",
    "end": "144269"
  },
  {
    "text": "the subscriber that they can listen to",
    "start": "144269",
    "end": "145739"
  },
  {
    "text": "and react to now that we have our",
    "start": "145739",
    "end": "147870"
  },
  {
    "text": "observable created we can create a",
    "start": "147870",
    "end": "149519"
  },
  {
    "text": "subscription to that observable by",
    "start": "149519",
    "end": "151079"
  },
  {
    "text": "calling subscribe on it",
    "start": "151079",
    "end": "152459"
  },
  {
    "text": "subscribe takes a function that will be",
    "start": "152459",
    "end": "154170"
  },
  {
    "text": "called every time the observable emits a",
    "start": "154170",
    "end": "156030"
  },
  {
    "text": "new value and this is why they call it",
    "start": "156030",
    "end": "157560"
  },
  {
    "text": "reactive programming because with your",
    "start": "157560",
    "end": "159180"
  },
  {
    "text": "subscription you're reacting to changes",
    "start": "159180",
    "end": "160739"
  },
  {
    "text": "in the observable data throughout this",
    "start": "160739",
    "end": "163200"
  },
  {
    "text": "video I'm using my own helper method",
    "start": "163200",
    "end": "164700"
  },
  {
    "text": "called print' which will react to each",
    "start": "164700",
    "end": "166290"
  },
  {
    "text": "newly emitted item and print it to the",
    "start": "166290",
    "end": "168120"
  },
  {
    "text": "Dom so we can visualize what's happening",
    "start": "168120",
    "end": "169560"
  },
  {
    "text": "in the observable and if we open this in",
    "start": "169560",
    "end": "171510"
  },
  {
    "text": "the browser you can see we get ABC",
    "start": "171510",
    "end": "173129"
  },
  {
    "text": "logged one after the other another",
    "start": "173129",
    "end": "175199"
  },
  {
    "text": "important concept to keep in mind is",
    "start": "175199",
    "end": "176790"
  },
  {
    "text": "that observables can be completed which",
    "start": "176790",
    "end": "178530"
  },
  {
    "text": "means they'll be shut off and no longer",
    "start": "178530",
    "end": "180120"
  },
  {
    "text": "a net values if we had observer complete",
    "start": "180120",
    "end": "182459"
  },
  {
    "text": "and then go back to the browser you can",
    "start": "182459",
    "end": "183900"
  },
  {
    "text": "see that only a and B are emitted and",
    "start": "183900",
    "end": "185939"
  },
  {
    "text": "that's because this stream has been",
    "start": "185939",
    "end": "187199"
  },
  {
    "text": "closed if you think like a plumber",
    "start": "187199",
    "end": "188790"
  },
  {
    "text": "creating the observable is like",
    "start": "188790",
    "end": "190109"
  },
  {
    "text": "connecting a pipe to a water source and",
    "start": "190109",
    "end": "191939"
  },
  {
    "text": "then subscribing is like opening the",
    "start": "191939",
    "end": "193560"
  },
  {
    "text": "valve that lets that water out rxjs",
    "start": "193560",
    "end": "195659"
  },
  {
    "text": "provides a bunch of helper functions",
    "start": "195659",
    "end": "196739"
  },
  {
    "text": "that make it easier to create",
    "start": "196739",
    "end": "198299"
  },
  {
    "text": "observables for example if we want to",
    "start": "198299",
    "end": "200370"
  },
  {
    "text": "just create an observable of a raw value",
    "start": "200370",
    "end": "202470"
  },
  {
    "text": "we can use of this we'll just take the",
    "start": "202470",
    "end": "204299"
  },
  {
    "text": "value that you pass in and wrap it in an",
    "start": "204299",
    "end": "206099"
  },
  {
    "text": "observable if we subscribe to this then",
    "start": "206099",
    "end": "207959"
  },
  {
    "text": "we'll just get hello printed out in the",
    "start": "207959",
    "end": "209370"
  },
  {
    "text": "console now the of function is very easy",
    "start": "209370",
    "end": "212040"
  },
  {
    "text": "to mix up with the from function which",
    "start": "212040",
    "end": "214620"
  },
  {
    "text": "takes an array promise or iterable and",
    "start": "214620",
    "end": "216840"
  },
  {
    "text": "then emits each individual item from the",
    "start": "216840",
    "end": "218819"
  },
  {
    "text": "observable we can see the difference by",
    "start": "218819",
    "end": "220530"
  },
  {
    "text": "passing in a string which itself is",
    "start": "220530",
    "end": "222090"
  },
  {
    "text": "iterable instead of emitting the entire",
    "start": "222090",
    "end": "223799"
  },
  {
    "text": "string as one event it emits each",
    "start": "223799",
    "end": "225540"
  },
  {
    "text": "individual character in that string",
    "start": "225540",
    "end": "227069"
  },
  {
    "text": "another thing we can do is create an",
    "start": "227069",
    "end": "229049"
  },
  {
    "text": "observable from events in the Dom using",
    "start": "229049",
    "end": "231269"
  },
  {
    "text": "from event we first pass in a Dom",
    "start": "231269",
    "end": "233099"
  },
  {
    "text": "element and in the event that we want to",
    "start": "233099",
    "end": "234720"
  },
  {
    "text": "listen to if we listen to clicks on the",
    "start": "234720",
    "end": "236699"
  },
  {
    "text": "document and subscribe to the observable",
    "start": "236699",
    "end": "238439"
  },
  {
    "text": "we'll get an event every time we click",
    "start": "238439",
    "end": "240060"
  },
  {
    "text": "on the page another thing we can do is",
    "start": "240060",
    "end": "242129"
  },
  {
    "text": "set up an observable based on a time",
    "start": "242129",
    "end": "243719"
  },
  {
    "text": "interval it takes the number of",
    "start": "243719",
    "end": "245189"
  },
  {
    "text": "milliseconds as its argument and then",
    "start": "245189",
    "end": "246870"
  },
  {
    "text": "will emit a number each time that",
    "start": "246870",
    "end": "248280"
  },
  {
    "text": "interval passes now one thing that a lot",
    "start": "248280",
    "end": "250139"
  },
  {
    "text": "of people don't realize is that rxjs can",
    "start": "250139",
    "end": "252389"
  },
  {
    "text": "be synchronous or asynchronous and",
    "start": "252389",
    "end": "254250"
  },
  {
    "text": "you'll probably never have to do this",
    "start": "254250",
    "end": "255329"
  },
  {
    "text": "but you can control that behavior by",
    "start": "255329",
    "end": "256889"
  },
  {
    "text": "modifying schedulers if you get lost in",
    "start": "256889",
    "end": "259049"
  },
  {
    "text": "this next example I would recommend",
    "start": "259049",
    "end": "260400"
  },
  {
    "text": "watching my async/await video which will",
    "start": "260400",
    "end": "262169"
  },
  {
    "text": "teach you all about the event loop and",
    "start": "262169",
    "end": "263699"
  },
  {
    "text": "JavaScript let's go ahead and define a",
    "start": "263699",
    "end": "265320"
  },
  {
    "text": "string observable using of",
    "start": "265320",
    "end": "267180"
  },
  {
    "text": "and then we'll just synchronously call",
    "start": "267180",
    "end": "268320"
  },
  {
    "text": "our print method with world in this case",
    "start": "268320",
    "end": "270389"
  },
  {
    "text": "rxjs is going to treat that observable",
    "start": "270389",
    "end": "272130"
  },
  {
    "text": "as asynchronous value so the",
    "start": "272130",
    "end": "273690"
  },
  {
    "text": "subscription will happen on the main",
    "start": "273690",
    "end": "274919"
  },
  {
    "text": "thread therefore we get hello world",
    "start": "274919",
    "end": "276240"
  },
  {
    "text": "printed one after the other you can",
    "start": "276240",
    "end": "278310"
  },
  {
    "text": "change this behavior by modifying the",
    "start": "278310",
    "end": "279750"
  },
  {
    "text": "schedule or of the observable if we pass",
    "start": "279750",
    "end": "281669"
  },
  {
    "text": "in the async scheduler it will emit the",
    "start": "281669",
    "end": "283500"
  },
  {
    "text": "value of the observable on the next",
    "start": "283500",
    "end": "285180"
  },
  {
    "text": "iteration of the event loop this time in",
    "start": "285180",
    "end": "286889"
  },
  {
    "text": "the browser we get world hello and again",
    "start": "286889",
    "end": "288960"
  },
  {
    "text": "you'll probably never need to mess with",
    "start": "288960",
    "end": "289949"
  },
  {
    "text": "that but I just want to give you an idea",
    "start": "289949",
    "end": "291150"
  },
  {
    "text": "of what schedulers do the next thing",
    "start": "291150",
    "end": "293250"
  },
  {
    "text": "we'll do is look at the difference",
    "start": "293250",
    "end": "294180"
  },
  {
    "text": "between hot and cold observables I don't",
    "start": "294180",
    "end": "296639"
  },
  {
    "text": "really like this terminology and I think",
    "start": "296639",
    "end": "298110"
  },
  {
    "text": "the best way to think of it is hot",
    "start": "298110",
    "end": "299370"
  },
  {
    "text": "observables can have multiple",
    "start": "299370",
    "end": "300449"
  },
  {
    "text": "subscriptions whereas cold observables",
    "start": "300449",
    "end": "302340"
  },
  {
    "text": "can only have one subscription cold",
    "start": "302340",
    "end": "304590"
  },
  {
    "text": "observables don't actually create the",
    "start": "304590",
    "end": "306180"
  },
  {
    "text": "underlying value until they're",
    "start": "306180",
    "end": "307590"
  },
  {
    "text": "subscribed to will go ahead and create",
    "start": "307590",
    "end": "309389"
  },
  {
    "text": "an observable from scratch and just have",
    "start": "309389",
    "end": "311099"
  },
  {
    "text": "it generate a random number now if we",
    "start": "311099",
    "end": "313530"
  },
  {
    "text": "subscribe to this observable twice",
    "start": "313530",
    "end": "314880"
  },
  {
    "text": "you'll see that we get two different",
    "start": "314880",
    "end": "316050"
  },
  {
    "text": "random numbers that's because that",
    "start": "316050",
    "end": "317970"
  },
  {
    "text": "create callback function isn't called",
    "start": "317970",
    "end": "319740"
  },
  {
    "text": "until the subscription is created but",
    "start": "319740",
    "end": "321630"
  },
  {
    "text": "often in the real world that's not what",
    "start": "321630",
    "end": "322949"
  },
  {
    "text": "you actually want a lot of times rxjs is",
    "start": "322949",
    "end": "325110"
  },
  {
    "text": "valuable because you can share a value",
    "start": "325110",
    "end": "327060"
  },
  {
    "text": "across multiple subscribers if you have",
    "start": "327060",
    "end": "329310"
  },
  {
    "text": "an existing cold observable there are",
    "start": "329310",
    "end": "330990"
  },
  {
    "text": "multiple ways to make it hot or in other",
    "start": "330990",
    "end": "332550"
  },
  {
    "text": "words allow it to be broadcast to",
    "start": "332550",
    "end": "334020"
  },
  {
    "text": "multiple subscribers now in this example",
    "start": "334020",
    "end": "336090"
  },
  {
    "text": "only the first subscriber will get the",
    "start": "336090",
    "end": "337889"
  },
  {
    "text": "actual value but what's often useful in",
    "start": "337889",
    "end": "340139"
  },
  {
    "text": "the real world is to use the share",
    "start": "340139",
    "end": "341669"
  },
  {
    "text": "replay operator which will cache the",
    "start": "341669",
    "end": "343620"
  },
  {
    "text": "last value as well if instead we pipe",
    "start": "343620",
    "end": "345479"
  },
  {
    "text": "and share replay one you can see that",
    "start": "345479",
    "end": "347099"
  },
  {
    "text": "both subscribers will get the same",
    "start": "347099",
    "end": "348659"
  },
  {
    "text": "random number now in my experience I'm",
    "start": "348659",
    "end": "350669"
  },
  {
    "text": "not usually taking cold observables and",
    "start": "350669",
    "end": "352289"
  },
  {
    "start": "351000",
    "end": "351000"
  },
  {
    "text": "making them hot instead I'm creating",
    "start": "352289",
    "end": "353940"
  },
  {
    "text": "subjects or behavior subjects you can",
    "start": "353940",
    "end": "356130"
  },
  {
    "text": "think of a subject as a hot observable",
    "start": "356130",
    "end": "358020"
  },
  {
    "text": "but it has the added benefit of being",
    "start": "358020",
    "end": "359580"
  },
  {
    "text": "able to have new values pushed to it in",
    "start": "359580",
    "end": "361650"
  },
  {
    "text": "plumbing terms it's more like a pump",
    "start": "361650",
    "end": "363360"
  },
  {
    "text": "where you can add new values to the",
    "start": "363360",
    "end": "364740"
  },
  {
    "text": "stream after it's been created we can do",
    "start": "364740",
    "end": "367320"
  },
  {
    "text": "this easily by just instantiating a new",
    "start": "367320",
    "end": "369240"
  },
  {
    "text": "subject and then we can subscribe to it",
    "start": "369240",
    "end": "370889"
  },
  {
    "text": "just like we've done with our other",
    "start": "370889",
    "end": "371909"
  },
  {
    "text": "observables what's unique about it is",
    "start": "371909",
    "end": "374070"
  },
  {
    "text": "that it has a next method that we can",
    "start": "374070",
    "end": "375720"
  },
  {
    "text": "call to add new values to the stream now",
    "start": "375720",
    "end": "378120"
  },
  {
    "text": "a potential gotcha with a regular",
    "start": "378120",
    "end": "379740"
  },
  {
    "text": "subject is that you need to have the",
    "start": "379740",
    "end": "381150"
  },
  {
    "text": "subscription setup before you start",
    "start": "381150",
    "end": "382740"
  },
  {
    "text": "adding values to it you can see here in",
    "start": "382740",
    "end": "384990"
  },
  {
    "text": "this first example we subscribe then we",
    "start": "384990",
    "end": "387000"
  },
  {
    "text": "add two new values to it and then we set",
    "start": "387000",
    "end": "389099"
  },
  {
    "text": "up a second subscriber and what you",
    "start": "389099",
    "end": "390750"
  },
  {
    "text": "intuitively might think is that both",
    "start": "390750",
    "end": "392250"
  },
  {
    "text": "subscribers will get the same values but",
    "start": "392250",
    "end": "394259"
  },
  {
    "text": "that's not true for the second",
    "start": "394259",
    "end": "395310"
  },
  {
    "text": "subscriber which will get nothing",
    "start": "395310",
    "end": "396389"
  },
  {
    "text": "because it's subscribed late after the",
    "start": "396389",
    "end": "398219"
  },
  {
    "text": "values were already at",
    "start": "398219",
    "end": "399440"
  },
  {
    "text": "and that brings me to one of the most",
    "start": "399440",
    "end": "401090"
  },
  {
    "text": "useful things in rxjs which is the",
    "start": "401090",
    "end": "402980"
  },
  {
    "text": "behavior subject it's similar to the",
    "start": "402980",
    "end": "404870"
  },
  {
    "text": "subject we just looked at except it has",
    "start": "404870",
    "end": "406520"
  },
  {
    "text": "the concept of a current value this",
    "start": "406520",
    "end": "408560"
  },
  {
    "text": "means the last emitted value will be",
    "start": "408560",
    "end": "410060"
  },
  {
    "text": "cached similar to how we set it up with",
    "start": "410060",
    "end": "411920"
  },
  {
    "text": "share replay earlier but most",
    "start": "411920",
    "end": "413630"
  },
  {
    "text": "importantly it means that every",
    "start": "413630",
    "end": "414710"
  },
  {
    "text": "subscription will always receive a value",
    "start": "414710",
    "end": "416450"
  },
  {
    "text": "even though our second subscriber came",
    "start": "416450",
    "end": "418280"
  },
  {
    "text": "in late it still gets the last emitted",
    "start": "418280",
    "end": "419960"
  },
  {
    "text": "value in the stream and that tends to be",
    "start": "419960",
    "end": "421700"
  },
  {
    "text": "a very powerful feature when doing",
    "start": "421700",
    "end": "423080"
  },
  {
    "text": "things like state management and",
    "start": "423080",
    "end": "424430"
  },
  {
    "text": "front-end applications at this point",
    "start": "424430",
    "end": "426650"
  },
  {
    "start": "426000",
    "end": "426000"
  },
  {
    "text": "we've only been talking about creating",
    "start": "426650",
    "end": "427850"
  },
  {
    "text": "observables now it's time to look at",
    "start": "427850",
    "end": "429350"
  },
  {
    "text": "operators which help you control the",
    "start": "429350",
    "end": "430940"
  },
  {
    "text": "flow of data going through your",
    "start": "430940",
    "end": "432440"
  },
  {
    "text": "observables there are a ton of operators",
    "start": "432440",
    "end": "434660"
  },
  {
    "text": "built into rxjs so we'll just look at a",
    "start": "434660",
    "end": "436610"
  },
  {
    "text": "handful of some of the most popular ones",
    "start": "436610",
    "end": "438260"
  },
  {
    "text": "first we'll create a source observable",
    "start": "438260",
    "end": "440000"
  },
  {
    "text": "the NIEM it's the integer is 1 through",
    "start": "440000",
    "end": "441680"
  },
  {
    "text": "10 you can compose multiple operators",
    "start": "441680",
    "end": "443900"
  },
  {
    "text": "together by using a pipe and just like",
    "start": "443900",
    "end": "446450"
  },
  {
    "text": "it sounds your data will flow through",
    "start": "446450",
    "end": "447860"
  },
  {
    "text": "this pipe and then be modified by each",
    "start": "447860",
    "end": "449480"
  },
  {
    "text": "function or operator in the pipe if we",
    "start": "449480",
    "end": "451850"
  },
  {
    "text": "subscribe to the empty pipe it just",
    "start": "451850",
    "end": "453500"
  },
  {
    "text": "emits the values of 1 through 10 to take",
    "start": "453500",
    "end": "455930"
  },
  {
    "text": "the input and simply transform it to a",
    "start": "455930",
    "end": "457910"
  },
  {
    "text": "new output you can use the map operator",
    "start": "457910",
    "end": "459890"
  },
  {
    "text": "for example we can take each number and",
    "start": "459890",
    "end": "461870"
  },
  {
    "text": "then raise it to the power of 2 now the",
    "start": "461870",
    "end": "463460"
  },
  {
    "text": "observable emits the square of the",
    "start": "463460",
    "end": "465140"
  },
  {
    "text": "initial numbers another thing we can do",
    "start": "465140",
    "end": "467000"
  },
  {
    "text": "is accumulate values as they flow",
    "start": "467000",
    "end": "468830"
  },
  {
    "text": "through the observable similar to a rate",
    "start": "468830",
    "end": "470540"
  },
  {
    "text": "reduce if we want to keep a running",
    "start": "470540",
    "end": "472190"
  },
  {
    "text": "total of all the values that were",
    "start": "472190",
    "end": "473510"
  },
  {
    "text": "emitted in this observable we can use",
    "start": "473510",
    "end": "475130"
  },
  {
    "text": "the scan operator and then add the",
    "start": "475130",
    "end": "476900"
  },
  {
    "text": "current value to the accumulated value",
    "start": "476900",
    "end": "478820"
  },
  {
    "text": "now each emitted value gets added on top",
    "start": "478820",
    "end": "480770"
  },
  {
    "text": "of the previous one an important thing",
    "start": "480770",
    "end": "482450"
  },
  {
    "text": "to keep in mind here is that the order",
    "start": "482450",
    "end": "483920"
  },
  {
    "text": "of operation matters for example if we",
    "start": "483920",
    "end": "485870"
  },
  {
    "text": "move the scan operator before the map",
    "start": "485870",
    "end": "487280"
  },
  {
    "text": "operator we're going to get different",
    "start": "487280",
    "end": "488510"
  },
  {
    "text": "results because the underlying math is",
    "start": "488510",
    "end": "490460"
  },
  {
    "text": "now different so that's how you",
    "start": "490460",
    "end": "491480"
  },
  {
    "text": "transform values but another useful",
    "start": "491480",
    "end": "493220"
  },
  {
    "text": "operator is filter which prevents",
    "start": "493220",
    "end": "494870"
  },
  {
    "text": "certain items from being emitted in the",
    "start": "494870",
    "end": "496370"
  },
  {
    "text": "stream for example if we only want",
    "start": "496370",
    "end": "498110"
  },
  {
    "text": "values that are greater than 10 we can",
    "start": "498110",
    "end": "499730"
  },
  {
    "text": "use the filter operator and that will",
    "start": "499730",
    "end": "501410"
  },
  {
    "text": "only emit values that meet this",
    "start": "501410",
    "end": "502850"
  },
  {
    "text": "condition and now we only see values",
    "start": "502850",
    "end": "504620"
  },
  {
    "text": "that are greater than 10 printed in the",
    "start": "504620",
    "end": "506000"
  },
  {
    "text": "UI another thing we can do with",
    "start": "506000",
    "end": "507680"
  },
  {
    "text": "operators is tell the observable to",
    "start": "507680",
    "end": "509390"
  },
  {
    "text": "complete for example if we pipe in take",
    "start": "509390",
    "end": "511430"
  },
  {
    "text": "3 it will only emit three values from",
    "start": "511430",
    "end": "513440"
  },
  {
    "text": "this observable then complete it the",
    "start": "513440",
    "end": "515390"
  },
  {
    "text": "next thing I want to show you is an",
    "start": "515390",
    "end": "516289"
  },
  {
    "text": "operator called tap which allows you to",
    "start": "516289",
    "end": "518090"
  },
  {
    "text": "trigger side effects from inside the",
    "start": "518090",
    "end": "519800"
  },
  {
    "text": "observable pipe in all the examples so",
    "start": "519800",
    "end": "522440"
  },
  {
    "text": "far I've been printing values to the",
    "start": "522440",
    "end": "524060"
  },
  {
    "text": "screen by using the callback in the",
    "start": "524060",
    "end": "525800"
  },
  {
    "text": "SUBSCRIBE method but that only gives us",
    "start": "525800",
    "end": "527960"
  },
  {
    "text": "access to the value at the end of the",
    "start": "527960",
    "end": "529670"
  },
  {
    "text": "pipe the most simple use case that",
    "start": "529670",
    "end": "531110"
  },
  {
    "text": "you'll find is just console logging at",
    "start": "531110",
    "end": "532760"
  },
  {
    "text": "different",
    "start": "532760",
    "end": "533150"
  },
  {
    "text": "points within the observable pipe the",
    "start": "533150",
    "end": "534950"
  },
  {
    "text": "pipe modifies things from top to bottom",
    "start": "534950",
    "end": "536420"
  },
  {
    "text": "so if we add a tap to the very beginning",
    "start": "536420",
    "end": "538550"
  },
  {
    "text": "it's going to print the initial value",
    "start": "538550",
    "end": "540140"
  },
  {
    "text": "and if we map it to something else and",
    "start": "540140",
    "end": "541790"
  },
  {
    "text": "add another tap after that it's going to",
    "start": "541790",
    "end": "543560"
  },
  {
    "text": "print a different value and you can use",
    "start": "543560",
    "end": "545690"
  },
  {
    "text": "tap to trigger more complex side effects",
    "start": "545690",
    "end": "547640"
  },
  {
    "text": "for example you might want to save a",
    "start": "547640",
    "end": "549260"
  },
  {
    "text": "value from the observable to a back-end",
    "start": "549260",
    "end": "550940"
  },
  {
    "text": "database if you're using something like",
    "start": "550940",
    "end": "552530"
  },
  {
    "text": "firebase you'll probably wanna use an",
    "start": "552530",
    "end": "553880"
  },
  {
    "text": "async function so basically it just",
    "start": "553880",
    "end": "555770"
  },
  {
    "text": "gives you a context to tap into the",
    "start": "555770",
    "end": "557420"
  },
  {
    "text": "observable and do something another term",
    "start": "557420",
    "end": "559580"
  },
  {
    "text": "you might hear with rxjs is back",
    "start": "559580",
    "end": "561320"
  },
  {
    "start": "560000",
    "end": "560000"
  },
  {
    "text": "pressure and basically that means you",
    "start": "561320",
    "end": "562820"
  },
  {
    "text": "have an observable that's emitting way",
    "start": "562820",
    "end": "564410"
  },
  {
    "text": "more values than you actually need we",
    "start": "564410",
    "end": "566270"
  },
  {
    "text": "can simulate this in the code by",
    "start": "566270",
    "end": "567440"
  },
  {
    "text": "listening to the mousemove event on the",
    "start": "567440",
    "end": "569150"
  },
  {
    "text": "Dom moving the mouse across the screen",
    "start": "569150",
    "end": "571010"
  },
  {
    "text": "will cause the observable to emit",
    "start": "571010",
    "end": "572270"
  },
  {
    "text": "multiple events every second rxjs has",
    "start": "572270",
    "end": "574760"
  },
  {
    "text": "several operators that can help us with",
    "start": "574760",
    "end": "576200"
  },
  {
    "text": "this situation the first strategy we'll",
    "start": "576200",
    "end": "578030"
  },
  {
    "text": "look at is to debounce the events ad",
    "start": "578030",
    "end": "580220"
  },
  {
    "text": "bounce will filter out all events until",
    "start": "580220",
    "end": "581810"
  },
  {
    "text": "they have stopped happening for a",
    "start": "581810",
    "end": "583220"
  },
  {
    "text": "certain period of time in this case",
    "start": "583220",
    "end": "584660"
  },
  {
    "text": "8,000 milliseconds ad bounce is really",
    "start": "584660",
    "end": "587000"
  },
  {
    "text": "useful for something like a type-ahead",
    "start": "587000",
    "end": "588380"
  },
  {
    "text": "where you don't want to make an API call",
    "start": "588380",
    "end": "589850"
  },
  {
    "text": "until the user is done typing you can",
    "start": "589850",
    "end": "591980"
  },
  {
    "text": "see here if we mouse around for a little",
    "start": "591980",
    "end": "593270"
  },
  {
    "text": "while nothing happens then if we stop",
    "start": "593270",
    "end": "595010"
  },
  {
    "text": "our event will be emitted after one",
    "start": "595010",
    "end": "596750"
  },
  {
    "text": "second",
    "start": "596750",
    "end": "597290"
  },
  {
    "text": "an alternative to ad balance is a",
    "start": "597290",
    "end": "598790"
  },
  {
    "text": "throttle it will emit the first value",
    "start": "598790",
    "end": "600440"
  },
  {
    "text": "but make sure that no additional values",
    "start": "600440",
    "end": "602150"
  },
  {
    "text": "can be emitted until a certain time",
    "start": "602150",
    "end": "603740"
  },
  {
    "text": "period has passed if we go back to the",
    "start": "603740",
    "end": "605360"
  },
  {
    "text": "demo and start moving around at the very",
    "start": "605360",
    "end": "607010"
  },
  {
    "text": "most we'll get one event emitted per",
    "start": "607010",
    "end": "608690"
  },
  {
    "text": "second these operators are alleviating",
    "start": "608690",
    "end": "610700"
  },
  {
    "text": "the back pressure but they're also",
    "start": "610700",
    "end": "612020"
  },
  {
    "text": "filtering out a lot of data if we want",
    "start": "612020",
    "end": "614000"
  },
  {
    "text": "to keep all the data but just not listen",
    "start": "614000",
    "end": "615710"
  },
  {
    "text": "to it all at once we can use a buffer",
    "start": "615710",
    "end": "617540"
  },
  {
    "text": "this will collect all the events into an",
    "start": "617540",
    "end": "619550"
  },
  {
    "text": "array and then only emit them when they",
    "start": "619550",
    "end": "621110"
  },
  {
    "text": "get to a length of 20 now we're going to",
    "start": "621110",
    "end": "623480"
  },
  {
    "start": "623000",
    "end": "623000"
  },
  {
    "text": "switch gears to another very important",
    "start": "623480",
    "end": "625130"
  },
  {
    "text": "operator called switch map this allows",
    "start": "625130",
    "end": "627410"
  },
  {
    "text": "you to start with one observable and",
    "start": "627410",
    "end": "629060"
  },
  {
    "text": "then switch to another one which is very",
    "start": "629060",
    "end": "630800"
  },
  {
    "text": "important when we're talking about",
    "start": "630800",
    "end": "631910"
  },
  {
    "text": "relational data for example if you're a",
    "start": "631910",
    "end": "634370"
  },
  {
    "text": "firebase user you probably have an",
    "start": "634370",
    "end": "635810"
  },
  {
    "text": "observable of a user logged into your",
    "start": "635810",
    "end": "637520"
  },
  {
    "text": "app and then you might want to switch to",
    "start": "637520",
    "end": "639320"
  },
  {
    "text": "another observable of some information",
    "start": "639320",
    "end": "641210"
  },
  {
    "text": "about that user in the database we can",
    "start": "641210",
    "end": "643610"
  },
  {
    "text": "simulate that in our code by creating an",
    "start": "643610",
    "end": "645260"
  },
  {
    "text": "observable of an object and then I'll",
    "start": "645260",
    "end": "647060"
  },
  {
    "text": "create a function that returns an",
    "start": "647060",
    "end": "648530"
  },
  {
    "text": "observable of some information based on",
    "start": "648530",
    "end": "650660"
  },
  {
    "text": "a user ID we can't call this function",
    "start": "650660",
    "end": "652760"
  },
  {
    "text": "until we have a user ID so the question",
    "start": "652760",
    "end": "654530"
  },
  {
    "text": "becomes how do we get the user ID out of",
    "start": "654530",
    "end": "656390"
  },
  {
    "text": "the observable the naive way to do this",
    "start": "656390",
    "end": "658160"
  },
  {
    "text": "is to nest subscriptions within each",
    "start": "658160",
    "end": "659990"
  },
  {
    "text": "other so first we subscribe to the user",
    "start": "659990",
    "end": "662150"
  },
  {
    "text": "that will give us the user ID then we",
    "start": "662150",
    "end": "663950"
  },
  {
    "text": "create another subscription inside of",
    "start": "663950",
    "end": "665570"
  },
  {
    "text": "that call",
    "start": "665570",
    "end": "666260"
  },
  {
    "text": "for the orders that code will actually",
    "start": "666260",
    "end": "668360"
  },
  {
    "text": "work but there's a better way to do this",
    "start": "668360",
    "end": "670280"
  },
  {
    "text": "instead we'll start with our user",
    "start": "670280",
    "end": "671960"
  },
  {
    "text": "observable to compose a new observable",
    "start": "671960",
    "end": "674000"
  },
  {
    "text": "called orders we first add a pipe to the",
    "start": "674000",
    "end": "676940"
  },
  {
    "text": "user and then we use the switch map",
    "start": "676940",
    "end": "678650"
  },
  {
    "text": "operator which will give us access to",
    "start": "678650",
    "end": "680360"
  },
  {
    "text": "the user ID and then we just returned an",
    "start": "680360",
    "end": "682640"
  },
  {
    "text": "observable from it and you can also",
    "start": "682640",
    "end": "684020"
  },
  {
    "text": "return a promise or an array here as",
    "start": "684020",
    "end": "685850"
  },
  {
    "text": "well so if you ever have one value that",
    "start": "685850",
    "end": "687920"
  },
  {
    "text": "depends on another value switch map",
    "start": "687920",
    "end": "689600"
  },
  {
    "text": "might be the operator that you're",
    "start": "689600",
    "end": "690680"
  },
  {
    "text": "looking for but there might be other",
    "start": "690680",
    "end": "691880"
  },
  {
    "text": "cases where you have multiple",
    "start": "691880",
    "end": "692960"
  },
  {
    "text": "observables that you just want to",
    "start": "692960",
    "end": "694430"
  },
  {
    "start": "694000",
    "end": "694000"
  },
  {
    "text": "combine into a single stream we'll look",
    "start": "694430",
    "end": "696800"
  },
  {
    "text": "at two different functions here called",
    "start": "696800",
    "end": "698180"
  },
  {
    "text": "combine latest and merge and keep in",
    "start": "698180",
    "end": "700190"
  },
  {
    "text": "mind these are not technically operators",
    "start": "700190",
    "end": "701720"
  },
  {
    "text": "so we import them directly from rxjs",
    "start": "701720",
    "end": "704210"
  },
  {
    "text": "I'm creating a cold observable of a",
    "start": "704210",
    "end": "706310"
  },
  {
    "text": "random number and then I'm creating a",
    "start": "706310",
    "end": "707990"
  },
  {
    "text": "second observable that just adds a delay",
    "start": "707990",
    "end": "709790"
  },
  {
    "text": "to that random number first we'll use",
    "start": "709790",
    "end": "711590"
  },
  {
    "text": "combined latest and it takes an array of",
    "start": "711590",
    "end": "713600"
  },
  {
    "text": "observables and it will wait for each",
    "start": "713600",
    "end": "715220"
  },
  {
    "text": "observable - you made a value and then",
    "start": "715220",
    "end": "717050"
  },
  {
    "text": "he met everything together as an array",
    "start": "717050",
    "end": "718790"
  },
  {
    "text": "even though the random numbers are going",
    "start": "718790",
    "end": "720530"
  },
  {
    "text": "to emit something right away it's going",
    "start": "720530",
    "end": "722300"
  },
  {
    "text": "to wait for that delay to resolve into a",
    "start": "722300",
    "end": "724130"
  },
  {
    "text": "value before it emits anything then if",
    "start": "724130",
    "end": "726050"
  },
  {
    "text": "any of the observables emit anything",
    "start": "726050",
    "end": "727460"
  },
  {
    "text": "after that it will emit everything again",
    "start": "727460",
    "end": "729170"
  },
  {
    "text": "as an array in other words it gives you",
    "start": "729170",
    "end": "730880"
  },
  {
    "text": "the current state of every observable in",
    "start": "730880",
    "end": "732680"
  },
  {
    "text": "this array so initially it's blank for",
    "start": "732680",
    "end": "734660"
  },
  {
    "text": "one second waiting for that delay and",
    "start": "734660",
    "end": "736160"
  },
  {
    "text": "then it emits out the four random",
    "start": "736160",
    "end": "737600"
  },
  {
    "text": "numbers in many cases though you don't",
    "start": "737600",
    "end": "739760"
  },
  {
    "text": "want to wait for that delay so instead",
    "start": "739760",
    "end": "741740"
  },
  {
    "text": "you can use merge which will just emit",
    "start": "741740",
    "end": "743420"
  },
  {
    "text": "each value one by one as it comes in",
    "start": "743420",
    "end": "745460"
  },
  {
    "text": "through the stream merge doesn't care",
    "start": "745460",
    "end": "747170"
  },
  {
    "text": "about the array position of the",
    "start": "747170",
    "end": "748370"
  },
  {
    "text": "observable it only cares about when it",
    "start": "748370",
    "end": "750170"
  },
  {
    "text": "emits it in the context of time so it",
    "start": "750170",
    "end": "752570"
  },
  {
    "text": "emits the first three values and in the",
    "start": "752570",
    "end": "754370"
  },
  {
    "text": "delayed value a second later another",
    "start": "754370",
    "end": "756740"
  },
  {
    "start": "756000",
    "end": "756000"
  },
  {
    "text": "thing you might be wondering is how to",
    "start": "756740",
    "end": "757910"
  },
  {
    "text": "catch errors in the context of a stream",
    "start": "757910",
    "end": "759830"
  },
  {
    "text": "you have a lot of flexibility here",
    "start": "759830",
    "end": "761780"
  },
  {
    "text": "but one of the most common strategies is",
    "start": "761780",
    "end": "763370"
  },
  {
    "text": "to catch the error and then replace it",
    "start": "763370",
    "end": "765110"
  },
  {
    "text": "with some other value we can do this",
    "start": "765110",
    "end": "767030"
  },
  {
    "text": "easily with the catch error operator it",
    "start": "767030",
    "end": "768890"
  },
  {
    "text": "can intercept the error and then you met",
    "start": "768890",
    "end": "770540"
  },
  {
    "text": "some other default value out of the",
    "start": "770540",
    "end": "772130"
  },
  {
    "text": "stream and one thing that's really nice",
    "start": "772130",
    "end": "773750"
  },
  {
    "text": "about rxjs is you can easily retry",
    "start": "773750",
    "end": "775760"
  },
  {
    "text": "things by just piping and the retry",
    "start": "775760",
    "end": "777320"
  },
  {
    "text": "operator I'm not going to get into it",
    "start": "777320",
    "end": "779150"
  },
  {
    "text": "here but it's super useful when working",
    "start": "779150",
    "end": "780560"
  },
  {
    "text": "with HTTP calls",
    "start": "780560",
    "end": "781850"
  },
  {
    "text": "first of all push a regular value and",
    "start": "781850",
    "end": "783590"
  },
  {
    "text": "then an error to the subject if we don't",
    "start": "783590",
    "end": "785540"
  },
  {
    "text": "catch the error",
    "start": "785540",
    "end": "786200"
  },
  {
    "text": "we'll get this uncaught error in the",
    "start": "786200",
    "end": "787670"
  },
  {
    "text": "console but by using the catch error",
    "start": "787670",
    "end": "789440"
  },
  {
    "text": "operator we can handle it in the",
    "start": "789440",
    "end": "790850"
  },
  {
    "text": "background and then provide some useful",
    "start": "790850",
    "end": "792410"
  },
  {
    "text": "information to the user and the front",
    "start": "792410",
    "end": "794000"
  },
  {
    "text": "end now if you're a good plumber then",
    "start": "794000",
    "end": "796010"
  },
  {
    "start": "795000",
    "end": "795000"
  },
  {
    "text": "you shouldn't have pipes that leak and",
    "start": "796010",
    "end": "797480"
  },
  {
    "text": "by that I'm talking about memory",
    "start": "797480",
    "end": "798889"
  },
  {
    "text": "weeks there are two main ways to prevent",
    "start": "798889",
    "end": "801109"
  },
  {
    "text": "memory leaks with rxjs",
    "start": "801109",
    "end": "802459"
  },
  {
    "text": "the first way is to unsubscribe from",
    "start": "802459",
    "end": "804439"
  },
  {
    "text": "your subscriptions take for example this",
    "start": "804439",
    "end": "806689"
  },
  {
    "text": "interval this interval is going to run",
    "start": "806689",
    "end": "808579"
  },
  {
    "text": "forever so if we don't close the",
    "start": "808579",
    "end": "810019"
  },
  {
    "text": "subscription it's just going to create a",
    "start": "810019",
    "end": "811609"
  },
  {
    "text": "memory leak in the background one",
    "start": "811609",
    "end": "813170"
  },
  {
    "text": "potential way to handle this is to",
    "start": "813170",
    "end": "814579"
  },
  {
    "text": "create a variable for the subscription",
    "start": "814579",
    "end": "815989"
  },
  {
    "text": "and then call subscription unsubscribe",
    "start": "815989",
    "end": "818149"
  },
  {
    "text": "at some other point in the code this",
    "start": "818149",
    "end": "819949"
  },
  {
    "text": "will stop the leak because we can see",
    "start": "819949",
    "end": "821329"
  },
  {
    "text": "here the observable only emits 10 values",
    "start": "821329",
    "end": "823309"
  },
  {
    "text": "but there's actually a better way we can",
    "start": "823309",
    "end": "824899"
  },
  {
    "text": "do this we can pipe in the take while",
    "start": "824899",
    "end": "826669"
  },
  {
    "text": "operator to the interval itself and that",
    "start": "826669",
    "end": "828919"
  },
  {
    "text": "will tell it to emit values only while a",
    "start": "828919",
    "end": "830689"
  },
  {
    "text": "certain condition is true when that",
    "start": "830689",
    "end": "832639"
  },
  {
    "text": "condition becomes false it will stop",
    "start": "832639",
    "end": "834049"
  },
  {
    "text": "your minion values therefore preventing",
    "start": "834049",
    "end": "835819"
  },
  {
    "text": "the memory leak and we don't need to",
    "start": "835819",
    "end": "837470"
  },
  {
    "text": "manually unsubscribe anywhere in our",
    "start": "837470",
    "end": "839119"
  },
  {
    "text": "code that works well in a lot of",
    "start": "839119",
    "end": "840829"
  },
  {
    "text": "situations but sometimes you want some",
    "start": "840829",
    "end": "842720"
  },
  {
    "text": "other observable or subject to be the",
    "start": "842720",
    "end": "844699"
  },
  {
    "text": "thing that triggers the subscription to",
    "start": "844699",
    "end": "846439"
  },
  {
    "text": "stop for that we have the take and tell",
    "start": "846439",
    "end": "848720"
  },
  {
    "text": "operator and it takes an observable as",
    "start": "848720",
    "end": "851029"
  },
  {
    "text": "its argument and when that observable",
    "start": "851029",
    "end": "852799"
  },
  {
    "text": "emits something it will cancel the",
    "start": "852799",
    "end": "854419"
  },
  {
    "text": "subscription on the source for example",
    "start": "854419",
    "end": "856429"
  },
  {
    "text": "if we wanted to set a timer for two",
    "start": "856429",
    "end": "858259"
  },
  {
    "text": "seconds on this interval we could do",
    "start": "858259",
    "end": "859999"
  },
  {
    "text": "that by using take and tell with a timer",
    "start": "859999",
    "end": "861919"
  },
  {
    "text": "observable when the timer finishes it",
    "start": "861919",
    "end": "863929"
  },
  {
    "text": "will complete the interval and then end",
    "start": "863929",
    "end": "865699"
  },
  {
    "text": "the subscription I'm gonna go ahead and",
    "start": "865699",
    "end": "866959"
  },
  {
    "text": "wrap things up there we barely just",
    "start": "866959",
    "end": "868399"
  },
  {
    "text": "scratch the surface with rxjs so let me",
    "start": "868399",
    "end": "870649"
  },
  {
    "text": "know what you want to see next in the",
    "start": "870649",
    "end": "871610"
  },
  {
    "text": "comments if this video helped you please",
    "start": "871610",
    "end": "873350"
  },
  {
    "text": "like and subscribe thanks for watching",
    "start": "873350",
    "end": "874850"
  },
  {
    "text": "and I will talk to you soon",
    "start": "874850",
    "end": "877370"
  },
  {
    "text": "[Music]",
    "start": "877370",
    "end": "885210"
  }
]