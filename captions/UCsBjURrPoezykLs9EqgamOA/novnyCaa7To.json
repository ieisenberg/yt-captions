[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "react query a react library that",
    "start": "480",
    "end": "2960"
  },
  {
    "text": "simplifies the way we fetch cache and",
    "start": "2960",
    "end": "5200"
  },
  {
    "text": "synchronize data from a server react",
    "start": "5200",
    "end": "7279"
  },
  {
    "text": "itself has no opinions about how you",
    "start": "7279",
    "end": "9040"
  },
  {
    "text": "fetch data from the front end the most",
    "start": "9040",
    "end": "10960"
  },
  {
    "text": "basic approach is to use the browser",
    "start": "10960",
    "end": "12960"
  },
  {
    "text": "fetch api when a component first mounts",
    "start": "12960",
    "end": "15120"
  },
  {
    "text": "and use effect then manage the response",
    "start": "15120",
    "end": "16880"
  },
  {
    "text": "with use state that works but becomes",
    "start": "16880",
    "end": "18880"
  },
  {
    "text": "increasingly difficult when requirements",
    "start": "18880",
    "end": "20720"
  },
  {
    "text": "like caching retries and deduping come",
    "start": "20720",
    "end": "23119"
  },
  {
    "text": "into play react query not only",
    "start": "23119",
    "end": "24800"
  },
  {
    "start": "24000",
    "end": "53000"
  },
  {
    "text": "simplifies your data fetching code but",
    "start": "24800",
    "end": "26800"
  },
  {
    "text": "also handles these complex requirements",
    "start": "26800",
    "end": "28880"
  },
  {
    "text": "out of the box for example you might",
    "start": "28880",
    "end": "30640"
  },
  {
    "text": "want to refetch data when the user",
    "start": "30640",
    "end": "32480"
  },
  {
    "text": "leaves and then comes back to the same",
    "start": "32480",
    "end": "34079"
  },
  {
    "text": "window fetch on windowfocus handles that",
    "start": "34079",
    "end": "35920"
  },
  {
    "text": "for you if you're building an infinite",
    "start": "35920",
    "end": "37360"
  },
  {
    "text": "scroll feature the use infinite query",
    "start": "37360",
    "end": "39360"
  },
  {
    "text": "hook will make your life much easier or",
    "start": "39360",
    "end": "41200"
  },
  {
    "text": "if you're writing data to the server you",
    "start": "41200",
    "end": "42879"
  },
  {
    "text": "can make changes appear instantly in the",
    "start": "42879",
    "end": "44480"
  },
  {
    "text": "ui with optimistic updates and you can",
    "start": "44480",
    "end": "46719"
  },
  {
    "text": "debug all your data fetching logic with",
    "start": "46719",
    "end": "48640"
  },
  {
    "text": "its integrated dev tools they've thought",
    "start": "48640",
    "end": "50239"
  },
  {
    "text": "of pretty much everything and it's so",
    "start": "50239",
    "end": "51760"
  },
  {
    "text": "good at what it does that it might even",
    "start": "51760",
    "end": "53199"
  },
  {
    "start": "53000",
    "end": "152000"
  },
  {
    "text": "eliminate your need for a global state",
    "start": "53199",
    "end": "55039"
  },
  {
    "text": "management solution to get started",
    "start": "55039",
    "end": "56879"
  },
  {
    "text": "install it with npm then instantiate the",
    "start": "56879",
    "end": "58879"
  },
  {
    "text": "query client and provide it somewhere in",
    "start": "58879",
    "end": "60879"
  },
  {
    "text": "your component tree now every child",
    "start": "60879",
    "end": "62640"
  },
  {
    "text": "component will be able to fetch data",
    "start": "62640",
    "end": "64400"
  },
  {
    "text": "like a pro also add the react query",
    "start": "64400",
    "end": "66240"
  },
  {
    "text": "devtools here to debug and development",
    "start": "66240",
    "end": "68240"
  },
  {
    "text": "now define a function anywhere you'd",
    "start": "68240",
    "end": "69920"
  },
  {
    "text": "like to fetch data from your server and",
    "start": "69920",
    "end": "71760"
  },
  {
    "text": "the component that consumes that data",
    "start": "71760",
    "end": "73439"
  },
  {
    "text": "add the use query hook it takes a key",
    "start": "73439",
    "end": "75360"
  },
  {
    "text": "that allows react query to manage this",
    "start": "75360",
    "end": "77119"
  },
  {
    "text": "data efficiently then the data fetching",
    "start": "77119",
    "end": "78799"
  },
  {
    "text": "function as the second argument it will",
    "start": "78799",
    "end": "80560"
  },
  {
    "text": "make the request then return the data",
    "start": "80560",
    "end": "82479"
  },
  {
    "text": "and also the status of the request if",
    "start": "82479",
    "end": "84479"
  },
  {
    "text": "it's loading we show a loading screen if",
    "start": "84479",
    "end": "86240"
  },
  {
    "text": "the request fails it will actually retry",
    "start": "86240",
    "end": "88240"
  },
  {
    "text": "the request three times and if it still",
    "start": "88240",
    "end": "90079"
  },
  {
    "text": "fails at that point the status will",
    "start": "90079",
    "end": "91680"
  },
  {
    "text": "change to error now if it was a success",
    "start": "91680",
    "end": "93759"
  },
  {
    "text": "we can render out the data in the ui and",
    "start": "93759",
    "end": "95759"
  },
  {
    "text": "that's a lot of functionality with not a",
    "start": "95759",
    "end": "97680"
  },
  {
    "text": "lot of code but you might be wondering",
    "start": "97680",
    "end": "99200"
  },
  {
    "text": "what this key is all about well now",
    "start": "99200",
    "end": "100799"
  },
  {
    "text": "let's imagine that we want to update",
    "start": "100799",
    "end": "102560"
  },
  {
    "text": "this data on the server to handle that",
    "start": "102560",
    "end": "104399"
  },
  {
    "text": "we can bring in the use mutation hook",
    "start": "104399",
    "end": "106240"
  },
  {
    "text": "when data is written to the server we",
    "start": "106240",
    "end": "107920"
  },
  {
    "text": "can hook into it with the on success",
    "start": "107920",
    "end": "109840"
  },
  {
    "text": "function and automatically invalidate",
    "start": "109840",
    "end": "111840"
  },
  {
    "text": "the query we already made based on its",
    "start": "111840",
    "end": "113600"
  },
  {
    "text": "key this tells react query to invalidate",
    "start": "113600",
    "end": "115920"
  },
  {
    "text": "and refetch the original request and we",
    "start": "115920",
    "end": "117920"
  },
  {
    "text": "can even tap into the state of this",
    "start": "117920",
    "end": "119439"
  },
  {
    "text": "process by referencing is fetching from",
    "start": "119439",
    "end": "121439"
  },
  {
    "text": "use query to keep tabs on the loading",
    "start": "121439",
    "end": "123280"
  },
  {
    "text": "state now if you want to run multiple",
    "start": "123280",
    "end": "124799"
  },
  {
    "text": "queries in the same component you can",
    "start": "124799",
    "end": "126079"
  },
  {
    "text": "easily do that and it will automatically",
    "start": "126079",
    "end": "127759"
  },
  {
    "text": "run them in parallel to ensure optimal",
    "start": "127759",
    "end": "129599"
  },
  {
    "text": "performance but sometimes one query",
    "start": "129599",
    "end": "131520"
  },
  {
    "text": "might depend on data from another like",
    "start": "131520",
    "end": "133280"
  },
  {
    "text": "all the cars owned by a user that's also",
    "start": "133280",
    "end": "135440"
  },
  {
    "text": "made easy with the enabled option like i",
    "start": "135440",
    "end": "137520"
  },
  {
    "text": "said before they've thought of",
    "start": "137520",
    "end": "138879"
  },
  {
    "text": "everything this has been react query in",
    "start": "138879",
    "end": "140800"
  },
  {
    "text": "100 seconds if you want to see more",
    "start": "140800",
    "end": "142400"
  },
  {
    "text": "content like this enroll in my full",
    "start": "142400",
    "end": "144160"
  },
  {
    "text": "react course on fireship io that breaks",
    "start": "144160",
    "end": "146239"
  },
  {
    "text": "down a ton of react concepts in 100",
    "start": "146239",
    "end": "148080"
  },
  {
    "text": "seconds or less thanks for watching and",
    "start": "148080",
    "end": "150000"
  },
  {
    "text": "i will see you in the next one",
    "start": "150000",
    "end": "154000"
  }
]