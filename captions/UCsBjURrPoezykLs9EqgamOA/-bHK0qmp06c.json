[
  {
    "text": "it is july 22nd 2022 and you're watching",
    "start": "1360",
    "end": "4560"
  },
  {
    "text": "the code report the programming",
    "start": "4560",
    "end": "5920"
  },
  {
    "text": "languages that people love to hate are",
    "start": "5920",
    "end": "7680"
  },
  {
    "text": "disappearing quickly microsoft killed",
    "start": "7680",
    "end": "9519"
  },
  {
    "text": "javascript with typescript apple killed",
    "start": "9519",
    "end": "11440"
  },
  {
    "text": "objective c with swift jetbrains killed",
    "start": "11440",
    "end": "13599"
  },
  {
    "text": "java with kotlin and now google is",
    "start": "13599",
    "end": "15440"
  },
  {
    "text": "stepping up to the plate for the biggest",
    "start": "15440",
    "end": "16800"
  },
  {
    "text": "challenge of all c plus plus it just",
    "start": "16800",
    "end": "18880"
  },
  {
    "text": "announced a new experimental language",
    "start": "18880",
    "end": "20480"
  },
  {
    "text": "called carbon which is designed to match",
    "start": "20480",
    "end": "22320"
  },
  {
    "text": "the performance of c plus with llvm",
    "start": "22320",
    "end": "24720"
  },
  {
    "text": "while being able to interrupt with",
    "start": "24720",
    "end": "26240"
  },
  {
    "text": "existing c plus plus code bases that's a",
    "start": "26240",
    "end": "28400"
  },
  {
    "text": "big deal because c plus plus is by far",
    "start": "28400",
    "end": "30560"
  },
  {
    "text": "the most prolific language when it comes",
    "start": "30560",
    "end": "32238"
  },
  {
    "text": "to building high performance low level",
    "start": "32239",
    "end": "34000"
  },
  {
    "text": "systems c plus has been around since",
    "start": "34000",
    "end": "35920"
  },
  {
    "text": "1983 and it's accumulated a lot of",
    "start": "35920",
    "end": "38079"
  },
  {
    "text": "technical debt in the process the",
    "start": "38079",
    "end": "39680"
  },
  {
    "text": "creator of c plus plus once said quote",
    "start": "39680",
    "end": "41840"
  },
  {
    "text": "within c plus plus there is a much",
    "start": "41840",
    "end": "43680"
  },
  {
    "text": "smaller and cleaner language struggling",
    "start": "43680",
    "end": "45600"
  },
  {
    "text": "to get out the problem with making c",
    "start": "45600",
    "end": "47360"
  },
  {
    "text": "plus better today is that it's such an",
    "start": "47360",
    "end": "48960"
  },
  {
    "text": "important language for so many code",
    "start": "48960",
    "end": "50559"
  },
  {
    "text": "bases that it needs to focus more on",
    "start": "50559",
    "end": "52239"
  },
  {
    "text": "standardization as opposed to evolving",
    "start": "52239",
    "end": "54079"
  },
  {
    "text": "the design to what modern developers",
    "start": "54079",
    "end": "55920"
  },
  {
    "text": "want it's really hard to change and",
    "start": "55920",
    "end": "57199"
  },
  {
    "text": "establish technology this sucks change",
    "start": "57199",
    "end": "59520"
  },
  {
    "text": "it",
    "start": "59520",
    "end": "60879"
  },
  {
    "text": "like when python 2 went to python 3 the",
    "start": "60879",
    "end": "62719"
  },
  {
    "text": "changes weren't that extreme but it's",
    "start": "62719",
    "end": "64320"
  },
  {
    "text": "still very painful for anybody wanting",
    "start": "64320",
    "end": "65920"
  },
  {
    "text": "to migrate a code base and also all the",
    "start": "65920",
    "end": "67760"
  },
  {
    "text": "content on the web and stack overflow",
    "start": "67760",
    "end": "69600"
  },
  {
    "text": "becomes stale one could argue it's",
    "start": "69600",
    "end": "71200"
  },
  {
    "text": "actually a good thing that c plus",
    "start": "71200",
    "end": "72799"
  },
  {
    "text": "doesn't try to change too aggressively",
    "start": "72799",
    "end": "74400"
  },
  {
    "text": "carbon is designed to be a successor",
    "start": "74400",
    "end": "76000"
  },
  {
    "text": "language for c plus plus which is no",
    "start": "76000",
    "end": "78000"
  },
  {
    "text": "small undertaking but google is no",
    "start": "78000",
    "end": "79920"
  },
  {
    "text": "stranger to creating programming",
    "start": "79920",
    "end": "81439"
  },
  {
    "text": "languages it gave us go and dart which",
    "start": "81439",
    "end": "83600"
  },
  {
    "text": "are both very well liked in the industry",
    "start": "83600",
    "end": "85280"
  },
  {
    "text": "at this point carbon doesn't have a good",
    "start": "85280",
    "end": "86799"
  },
  {
    "text": "logo or mascot but i'm sure it will get",
    "start": "86799",
    "end": "88640"
  },
  {
    "text": "one eventually you might also be",
    "start": "88640",
    "end": "90000"
  },
  {
    "text": "wondering why not just use a modern",
    "start": "90000",
    "end": "91759"
  },
  {
    "text": "memory safe language like rust first of",
    "start": "91759",
    "end": "93840"
  },
  {
    "text": "all not all c plus developers actually",
    "start": "93840",
    "end": "96000"
  },
  {
    "text": "like rust but more importantly carbon is",
    "start": "96000",
    "end": "98079"
  },
  {
    "text": "designed for easy adoption by existing c",
    "start": "98079",
    "end": "100799"
  },
  {
    "text": "plus code bases and developers it has",
    "start": "100799",
    "end": "102640"
  },
  {
    "text": "bi-directional interoperability with c",
    "start": "102640",
    "end": "104720"
  },
  {
    "text": "plus which means you can use existing c",
    "start": "104720",
    "end": "106479"
  },
  {
    "text": "plus plus libraries and carbon",
    "start": "106479",
    "end": "107840"
  },
  {
    "text": "seamlessly or vice versa now i've only",
    "start": "107840",
    "end": "110079"
  },
  {
    "text": "been coding for about 12 years which",
    "start": "110079",
    "end": "111759"
  },
  {
    "text": "isn't nearly enough time to learn c plus",
    "start": "111759",
    "end": "113439"
  },
  {
    "text": "plus but let's take a look at some code",
    "start": "113439",
    "end": "115040"
  },
  {
    "text": "anyway to run carbon at this point",
    "start": "115040",
    "end": "116640"
  },
  {
    "text": "you'll need to install google's build",
    "start": "116640",
    "end": "118000"
  },
  {
    "text": "tool bazel as well as llvm to build it",
    "start": "118000",
    "end": "120560"
  },
  {
    "text": "to say hello world we have a main",
    "start": "120560",
    "end": "122159"
  },
  {
    "text": "function that uses print with a string",
    "start": "122159",
    "end": "124240"
  },
  {
    "text": "literal it looks pretty simple but if",
    "start": "124240",
    "end": "125920"
  },
  {
    "text": "you've never seen a c plus plus hello",
    "start": "125920",
    "end": "127520"
  },
  {
    "text": "world that uses this character out",
    "start": "127520",
    "end": "128959"
  },
  {
    "text": " then it looks like a",
    "start": "128959",
    "end": "130160"
  },
  {
    "text": "revolutionary improvement but a bigger",
    "start": "130160",
    "end": "132000"
  },
  {
    "text": "feature is the fact that it supports a",
    "start": "132000",
    "end": "133680"
  },
  {
    "text": "modern generic system generics allow you",
    "start": "133680",
    "end": "135680"
  },
  {
    "text": "to pass types as parameters to classes",
    "start": "135680",
    "end": "137840"
  },
  {
    "text": "and functions a common pattern in",
    "start": "137840",
    "end": "139440"
  },
  {
    "text": "statically typed languages but c plus",
    "start": "139440",
    "end": "141680"
  },
  {
    "text": "takes a different approach that's often",
    "start": "141680",
    "end": "143360"
  },
  {
    "text": "misused and abused called templates",
    "start": "143360",
    "end": "145280"
  },
  {
    "text": "carbon still supports templates but",
    "start": "145280",
    "end": "146959"
  },
  {
    "text": "generics will provide a bunch of",
    "start": "146959",
    "end": "148160"
  },
  {
    "text": "advantages in most situations but more",
    "start": "148160",
    "end": "150480"
  },
  {
    "text": "importantly carbon looks to improve upon",
    "start": "150480",
    "end": "152319"
  },
  {
    "text": "memory safety patterns in c plus plus",
    "start": "152319",
    "end": "154640"
  },
  {
    "text": "you can have uninitialized variables",
    "start": "154640",
    "end": "156480"
  },
  {
    "text": "which can sometimes be important for",
    "start": "156480",
    "end": "158000"
  },
  {
    "text": "performance but more often than not they",
    "start": "158000",
    "end": "159599"
  },
  {
    "text": "just result in bugs and memory access",
    "start": "159599",
    "end": "161599"
  },
  {
    "text": "bugs can be very dangerous when hackers",
    "start": "161599",
    "end": "163360"
  },
  {
    "text": "learn to exploit them carbon has an",
    "start": "163360",
    "end": "164879"
  },
  {
    "text": "entire dock on its safety strategy and",
    "start": "164879",
    "end": "166879"
  },
  {
    "text": "basically it tries to be as safe as",
    "start": "166879",
    "end": "168239"
  },
  {
    "text": "possible without hurting performance or",
    "start": "168239",
    "end": "170160"
  },
  {
    "text": "interoperability with c plus and it can",
    "start": "170160",
    "end": "172239"
  },
  {
    "text": "be run in different modes like debug",
    "start": "172239",
    "end": "174080"
  },
  {
    "text": "performance and hardened depending on",
    "start": "174080",
    "end": "175760"
  },
  {
    "text": "how much you want to prioritize memory",
    "start": "175760",
    "end": "177440"
  },
  {
    "text": "safety notably it doesn't use mechanisms",
    "start": "177440",
    "end": "179440"
  },
  {
    "text": "like borrow checking reference counting",
    "start": "179440",
    "end": "181440"
  },
  {
    "text": "or garbage collection like you might",
    "start": "181440",
    "end": "183120"
  },
  {
    "text": "find in other languages sounds pretty",
    "start": "183120",
    "end": "184959"
  },
  {
    "text": "cool so when can i start using it well",
    "start": "184959",
    "end": "186879"
  },
  {
    "text": "at this point it's experimental and it's",
    "start": "186879",
    "end": "188720"
  },
  {
    "text": "an extremely ambitious project it'll",
    "start": "188720",
    "end": "190400"
  },
  {
    "text": "likely be multiple years before this",
    "start": "190400",
    "end": "192000"
  },
  {
    "text": "language is production ready now even",
    "start": "192000",
    "end": "193760"
  },
  {
    "text": "though google just implemented a hiring",
    "start": "193760",
    "end": "195360"
  },
  {
    "text": "freeze employers are already looking to",
    "start": "195360",
    "end": "197280"
  },
  {
    "text": "hire carbon developers you just need to",
    "start": "197280",
    "end": "199120"
  },
  {
    "text": "have 10 years of carbon experience to",
    "start": "199120",
    "end": "200720"
  },
  {
    "text": "apply this has been the code report",
    "start": "200720",
    "end": "202400"
  },
  {
    "text": "thanks for watching and i will see you",
    "start": "202400",
    "end": "204319"
  },
  {
    "text": "in the next one",
    "start": "204319",
    "end": "207720"
  }
]