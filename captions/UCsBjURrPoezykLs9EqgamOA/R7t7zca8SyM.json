[
  {
    "start": "0",
    "end": "25000"
  },
  {
    "text": "Elixir a dynamic general purpose",
    "start": "80",
    "end": "2200"
  },
  {
    "text": "programming language designed to build",
    "start": "2200",
    "end": "3959"
  },
  {
    "text": "scalable concurrent applications with a",
    "start": "3959",
    "end": "6120"
  },
  {
    "text": "beautiful functional syntax it was",
    "start": "6120",
    "end": "8040"
  },
  {
    "text": "created by Jose valim and first released",
    "start": "8040",
    "end": "10280"
  },
  {
    "text": "in 2012 and today it consistently ranks",
    "start": "10280",
    "end": "12559"
  },
  {
    "text": "among the most loved programming",
    "start": "12559",
    "end": "13920"
  },
  {
    "text": "languages it runs on top of the erlang",
    "start": "13920",
    "end": "16039"
  },
  {
    "text": "beam virtual machine which itself is",
    "start": "16039",
    "end": "18039"
  },
  {
    "text": "developed in the 1980s to scale the",
    "start": "18039",
    "end": "19960"
  },
  {
    "text": "massive demands of phone switching which",
    "start": "19960",
    "end": "21800"
  },
  {
    "text": "it did with extreme reliability and",
    "start": "21800",
    "end": "23599"
  },
  {
    "text": "Vault tolerance Elixir was created to",
    "start": "23599",
    "end": "25720"
  },
  {
    "start": "25000",
    "end": "60000"
  },
  {
    "text": "make this powerful technology accessible",
    "start": "25720",
    "end": "27800"
  },
  {
    "text": "to the modern developer it's dynamically",
    "start": "27800",
    "end": "29679"
  },
  {
    "text": "tight with a minimal Ruby inspired",
    "start": "29679",
    "end": "31560"
  },
  {
    "text": "syntax making it more approachable than",
    "start": "31560",
    "end": "33399"
  },
  {
    "text": "statically typed functional languages",
    "start": "33399",
    "end": "35000"
  },
  {
    "text": "like hasle however because it's compiled",
    "start": "35000",
    "end": "37160"
  },
  {
    "text": "to beam Bode it delivers better",
    "start": "37160",
    "end": "39160"
  },
  {
    "text": "performance and scalability compared to",
    "start": "39160",
    "end": "41239"
  },
  {
    "text": "interpreted languages it's used by",
    "start": "41239",
    "end": "42879"
  },
  {
    "text": "companies like Discord to handle massive",
    "start": "42879",
    "end": "44800"
  },
  {
    "text": "amounts of concurrent users by Motorola",
    "start": "44800",
    "end": "47120"
  },
  {
    "text": "to build fault tolerant communication",
    "start": "47120",
    "end": "48879"
  },
  {
    "text": "systems by Pinterest to scale up their",
    "start": "48879",
    "end": "51079"
  },
  {
    "text": "real-time notification system and The",
    "start": "51079",
    "end": "52920"
  },
  {
    "text": "Elixir based Phoenix framework is",
    "start": "52920",
    "end": "54840"
  },
  {
    "text": "responsible for thousands of full stack",
    "start": "54840",
    "end": "56879"
  },
  {
    "text": "web applications to get started install",
    "start": "56879",
    "end": "59039"
  },
  {
    "text": "llang Andy then create a file ending",
    "start": "59039",
    "end": "61600"
  },
  {
    "start": "60000",
    "end": "154000"
  },
  {
    "text": "inexs to create a variable give it a",
    "start": "61600",
    "end": "63879"
  },
  {
    "text": "name followed by a value it's Dynamic so",
    "start": "63879",
    "end": "66320"
  },
  {
    "text": "no type annotations are necessary now",
    "start": "66320",
    "end": "68240"
  },
  {
    "text": "print it to the standard output with IO",
    "start": "68240",
    "end": "70400"
  },
  {
    "text": "puts and like Ruby parentheses are",
    "start": "70400",
    "end": "72360"
  },
  {
    "text": "usually optional alternatively you might",
    "start": "72360",
    "end": "74439"
  },
  {
    "text": "create an atom which is a constant whose",
    "start": "74439",
    "end": "76560"
  },
  {
    "text": "value is its own name Anonymous",
    "start": "76560",
    "end": "78159"
  },
  {
    "text": "functions can be created with the FN",
    "start": "78159",
    "end": "79960"
  },
  {
    "text": "keyword which can then be assigned to",
    "start": "79960",
    "end": "81439"
  },
  {
    "text": "variables or passed around to other",
    "start": "81439",
    "end": "83400"
  },
  {
    "text": "functions and you can even simplify this",
    "start": "83400",
    "end": "85280"
  },
  {
    "text": "expression further using the Amper sand",
    "start": "85280",
    "end": "87119"
  },
  {
    "text": "shorthand when working with function",
    "start": "87119",
    "end": "88720"
  },
  {
    "text": "Expressions you can use the pipe",
    "start": "88720",
    "end": "90240"
  },
  {
    "text": "operator to pass the value of one",
    "start": "90240",
    "end": "92159"
  },
  {
    "text": "expression to another without the need",
    "start": "92159",
    "end": "93880"
  },
  {
    "text": "for deeply nested function calls create",
    "start": "93880",
    "end": "95920"
  },
  {
    "text": "a list of items with brackets or create",
    "start": "95920",
    "end": "97720"
  },
  {
    "text": "a map to represent key value pairs the",
    "start": "97720",
    "end": "99960"
  },
  {
    "text": "equal sign can be used to assign",
    "start": "99960",
    "end": "101399"
  },
  {
    "text": "variables but it's actually called the",
    "start": "101399",
    "end": "103119"
  },
  {
    "text": "match operator to support pattern",
    "start": "103119",
    "end": "104799"
  },
  {
    "text": "matching features for example we might",
    "start": "104799",
    "end": "106719"
  },
  {
    "text": "destructure a list into a set of",
    "start": "106719",
    "end": "108640"
  },
  {
    "text": "variables if a pattern doesn't match it",
    "start": "108640",
    "end": "110600"
  },
  {
    "text": "will raise an error and this Behavior",
    "start": "110600",
    "end": "112360"
  },
  {
    "text": "can be used to implement advanc control",
    "start": "112360",
    "end": "114320"
  },
  {
    "text": "flow logic if and its inverse and less",
    "start": "114320",
    "end": "116840"
  },
  {
    "text": "can be used for basic situations but the",
    "start": "116840",
    "end": "119079"
  },
  {
    "text": "case keyword all allows us to compare a",
    "start": "119079",
    "end": "120880"
  },
  {
    "text": "value against many patterns until we",
    "start": "120880",
    "end": "122719"
  },
  {
    "text": "find a matching one application code can",
    "start": "122719",
    "end": "124680"
  },
  {
    "text": "be organized and shared with modules",
    "start": "124680",
    "end": "126759"
  },
  {
    "text": "inside a module we can Define multiple",
    "start": "126759",
    "end": "128800"
  },
  {
    "text": "functions but one of the killer features",
    "start": "128800",
    "end": "130520"
  },
  {
    "text": "of this language is its concurrency",
    "start": "130520",
    "end": "132120"
  },
  {
    "text": "model thanks to the llang BM all code",
    "start": "132120",
    "end": "134239"
  },
  {
    "text": "runs in processes that are isolated from",
    "start": "134239",
    "end": "136360"
  },
  {
    "text": "each other which communicate by passing",
    "start": "136360",
    "end": "138160"
  },
  {
    "text": "messages they are extremely lightweight",
    "start": "138160",
    "end": "140120"
  },
  {
    "text": "and your application can run thousands",
    "start": "140120",
    "end": "141680"
  },
  {
    "text": "of them simultaneously resulting in high",
    "start": "141680",
    "end": "143959"
  },
  {
    "text": "performance fault tolerant execution",
    "start": "143959",
    "end": "145959"
  },
  {
    "text": "this has been elixir in 100 seconds if",
    "start": "145959",
    "end": "148200"
  },
  {
    "text": "you want to see more short videos like",
    "start": "148200",
    "end": "149599"
  },
  {
    "text": "this hit the like button and subscribe",
    "start": "149599",
    "end": "151480"
  },
  {
    "text": "thanks for watching and I will see you",
    "start": "151480",
    "end": "153200"
  },
  {
    "text": "in the next one",
    "start": "153200",
    "end": "156160"
  }
]