[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "I gotta check this out MySQL is the most",
    "start": "100",
    "end": "12579"
  },
  {
    "text": "popular database flavor in the world",
    "start": "12579",
    "end": "14410"
  },
  {
    "text": "how are you millions of WordPress blogs",
    "start": "14410",
    "end": "16059"
  },
  {
    "text": "and large complex enterprise",
    "start": "16059",
    "end": "17830"
  },
  {
    "text": "applications today you'll learn how to",
    "start": "17830",
    "end": "19480"
  },
  {
    "text": "combine cloud functions along with",
    "start": "19480",
    "end": "20920"
  },
  {
    "text": "Google Cloud SQL to build an entirely",
    "start": "20920",
    "end": "23019"
  },
  {
    "text": "server list cloud database and we'll",
    "start": "23019",
    "end": "25000"
  },
  {
    "text": "combine it with an awesome tool called",
    "start": "25000",
    "end": "26470"
  },
  {
    "text": "type o RM which will help us efficiently",
    "start": "26470",
    "end": "28630"
  },
  {
    "text": "model in query relational data using",
    "start": "28630",
    "end": "30609"
  },
  {
    "text": "nothing but typescript and nodejs",
    "start": "30609",
    "end": "32648"
  },
  {
    "text": "if you're new here like and subscribe",
    "start": "32649",
    "end": "34239"
  },
  {
    "text": "and congrats to Fabian how listen you're",
    "start": "34239",
    "end": "36370"
  },
  {
    "text": "the t-shirt winner from last week's",
    "start": "36370",
    "end": "37780"
  },
  {
    "text": "video",
    "start": "37780",
    "end": "38110"
  },
  {
    "text": "send me your details on slack and if you",
    "start": "38110",
    "end": "40059"
  },
  {
    "text": "missed out just leave a comment below",
    "start": "40059",
    "end": "41440"
  },
  {
    "text": "because I'm giving away another t-shirt",
    "start": "41440",
    "end": "43120"
  },
  {
    "text": "with this video let's go ahead and start",
    "start": "43120",
    "end": "46030"
  },
  {
    "start": "45000",
    "end": "115000"
  },
  {
    "text": "by addressing the obvious question of",
    "start": "46030",
    "end": "47680"
  },
  {
    "text": "why would you ever want to use a MySQL",
    "start": "47680",
    "end": "49899"
  },
  {
    "text": "database with firebase the platform",
    "start": "49899",
    "end": "51879"
  },
  {
    "text": "already has fire store which is a fast",
    "start": "51879",
    "end": "53590"
  },
  {
    "text": "and expensive database that scales out",
    "start": "53590",
    "end": "55600"
  },
  {
    "text": "of the box while fire store will take",
    "start": "55600",
    "end": "57460"
  },
  {
    "text": "care of the majority of your relational",
    "start": "57460",
    "end": "59079"
  },
  {
    "text": "data modeling needs there may be times",
    "start": "59079",
    "end": "60820"
  },
  {
    "text": "when an SQL database is just the better",
    "start": "60820",
    "end": "63100"
  },
  {
    "text": "tool for the job",
    "start": "63100",
    "end": "64088"
  },
  {
    "text": "or you might just be working with a",
    "start": "64089",
    "end": "65408"
  },
  {
    "text": "legacy database where you have no choice",
    "start": "65409",
    "end": "67270"
  },
  {
    "text": "in the matter no matter what the use",
    "start": "67270",
    "end": "68890"
  },
  {
    "text": "case my goal today is to show you how",
    "start": "68890",
    "end": "70540"
  },
  {
    "text": "easy it is to integrate mysql with",
    "start": "70540",
    "end": "72820"
  },
  {
    "text": "firebase the first thing you'll learn is",
    "start": "72820",
    "end": "74799"
  },
  {
    "text": "how to provision a cloud SQL instance",
    "start": "74799",
    "end": "76720"
  },
  {
    "text": "and then how to connect it to the cloud",
    "start": "76720",
    "end": "78700"
  },
  {
    "text": "functions environment the second big",
    "start": "78700",
    "end": "80619"
  },
  {
    "text": "thing you learn is how to use a tool",
    "start": "80619",
    "end": "82240"
  },
  {
    "text": "called typo RM which provides object",
    "start": "82240",
    "end": "84430"
  },
  {
    "text": "relational mapping with typescript and",
    "start": "84430",
    "end": "86140"
  },
  {
    "text": "this allows us to completely manage our",
    "start": "86140",
    "end": "88090"
  },
  {
    "text": "database structure and queries without",
    "start": "88090",
    "end": "89680"
  },
  {
    "text": "ever having to write a raw SQL query and",
    "start": "89680",
    "end": "92020"
  },
  {
    "text": "using a tool like this will dramatically",
    "start": "92020",
    "end": "93790"
  },
  {
    "text": "increase your productivity and developer",
    "start": "93790",
    "end": "95770"
  },
  {
    "text": "happiness the feature we're building",
    "start": "95770",
    "end": "98079"
  },
  {
    "text": "today is a collection of HTTP cloud",
    "start": "98079",
    "end": "100030"
  },
  {
    "text": "functions that allow us to read and",
    "start": "100030",
    "end": "101920"
  },
  {
    "text": "write to the database our database",
    "start": "101920",
    "end": "103840"
  },
  {
    "text": "contains a hippo table and those hippos",
    "start": "103840",
    "end": "105820"
  },
  {
    "text": "can own many hats but the hats live in",
    "start": "105820",
    "end": "108280"
  },
  {
    "text": "their own database table so we'll need",
    "start": "108280",
    "end": "109930"
  },
  {
    "text": "to build a join query to join all that",
    "start": "109930",
    "end": "112119"
  },
  {
    "text": "data together into a single request",
    "start": "112119",
    "end": "113790"
  },
  {
    "text": "you'll need a few things to get started",
    "start": "113790",
    "end": "116079"
  },
  {
    "start": "115000",
    "end": "230000"
  },
  {
    "text": "with this project first you'll want to",
    "start": "116079",
    "end": "118119"
  },
  {
    "text": "have a firebase or a Google cloud",
    "start": "118119",
    "end": "119770"
  },
  {
    "text": "platform project and then I highly",
    "start": "119770",
    "end": "121539"
  },
  {
    "text": "recommend you have a rest client like",
    "start": "121539",
    "end": "123130"
  },
  {
    "text": "insomnia or postman or the rest client",
    "start": "123130",
    "end": "125380"
  },
  {
    "text": "plugin for vs code so we can make",
    "start": "125380",
    "end": "127090"
  },
  {
    "text": "requests to the cloud function endpoints",
    "start": "127090",
    "end": "128979"
  },
  {
    "text": "after we deploy them from there we'll go",
    "start": "128980",
    "end": "131230"
  },
  {
    "text": "ahead and open an empty directory with",
    "start": "131230",
    "end": "132820"
  },
  {
    "text": "the s",
    "start": "132820",
    "end": "133240"
  },
  {
    "text": "and then run firebase event functions",
    "start": "133240",
    "end": "135250"
  },
  {
    "text": "from the command line you want to select",
    "start": "135250",
    "end": "137020"
  },
  {
    "text": "typescript although it is worth noting",
    "start": "137020",
    "end": "138730"
  },
  {
    "text": "that it's possible to use Type O RM with",
    "start": "138730",
    "end": "140710"
  },
  {
    "text": "vanilla JavaScript if you prefer that",
    "start": "140710",
    "end": "143230"
  },
  {
    "text": "will generate a functions directory so",
    "start": "143230",
    "end": "145120"
  },
  {
    "text": "we'll go ahead and CD in there and then",
    "start": "145120",
    "end": "146740"
  },
  {
    "text": "install type ORM reflect metadata and",
    "start": "146740",
    "end": "149320"
  },
  {
    "text": "MySQL from there we'll jump into the",
    "start": "149320",
    "end": "151900"
  },
  {
    "text": "automatically generated TS config and",
    "start": "151900",
    "end": "153970"
  },
  {
    "text": "make a few updates we'll set strict mode",
    "start": "153970",
    "end": "156280"
  },
  {
    "text": "to false and enable experimental",
    "start": "156280",
    "end": "157930"
  },
  {
    "text": "decorators as well as their metadata and",
    "start": "157930",
    "end": "160000"
  },
  {
    "text": "one last thing I'll mention is that you",
    "start": "160000",
    "end": "161890"
  },
  {
    "text": "want to make sure you're running",
    "start": "161890",
    "end": "162610"
  },
  {
    "text": "typescript version 3.5 or greater so",
    "start": "162610",
    "end": "164710"
  },
  {
    "text": "double check that in the package JSON so",
    "start": "164710",
    "end": "167950"
  },
  {
    "text": "that takes care of these setup for cloud",
    "start": "167950",
    "end": "169330"
  },
  {
    "text": "functions now let's head over to Google",
    "start": "169330",
    "end": "171250"
  },
  {
    "text": "cloud platform and create a MySQL",
    "start": "171250",
    "end": "173050"
  },
  {
    "text": "instance but first I'd like to point out",
    "start": "173050",
    "end": "175570"
  },
  {
    "text": "that this is not a free service on GCP",
    "start": "175570",
    "end": "178270"
  },
  {
    "text": "the smallest SQL instance will cost",
    "start": "178270",
    "end": "180160"
  },
  {
    "text": "about seven dollars per month but I",
    "start": "180160",
    "end": "181810"
  },
  {
    "text": "actually think that's the lowest price",
    "start": "181810",
    "end": "183340"
  },
  {
    "text": "that you'll find on any cloud and your",
    "start": "183340",
    "end": "184960"
  },
  {
    "text": "build by the second so you can pause or",
    "start": "184960",
    "end": "186670"
  },
  {
    "text": "resume it at any time we can create the",
    "start": "186670",
    "end": "189010"
  },
  {
    "text": "instance by going to the SQL tab on the",
    "start": "189010",
    "end": "191320"
  },
  {
    "text": "GCP console make sure that you select",
    "start": "191320",
    "end": "193060"
  },
  {
    "text": "MySQL because the setup is slightly",
    "start": "193060",
    "end": "195220"
  },
  {
    "text": "different for Postgres you'll want to",
    "start": "195220",
    "end": "197020"
  },
  {
    "text": "make a note of the root user password",
    "start": "197020",
    "end": "198730"
  },
  {
    "text": "and then when you get to the instance",
    "start": "198730",
    "end": "200170"
  },
  {
    "text": "details page you'll also want to copy",
    "start": "200170",
    "end": "202060"
  },
  {
    "text": "the instance connection name now one",
    "start": "202060",
    "end": "204580"
  },
  {
    "text": "thing to keep in mind is that this",
    "start": "204580",
    "end": "205900"
  },
  {
    "text": "instance isn't just a single database",
    "start": "205900",
    "end": "207550"
  },
  {
    "text": "it's multiple databases pulled together",
    "start": "207550",
    "end": "209590"
  },
  {
    "text": "along with a bunch of other fully",
    "start": "209590",
    "end": "211480"
  },
  {
    "text": "managed features like automated backups",
    "start": "211480",
    "end": "213370"
  },
  {
    "text": "and logging and all that good stuff",
    "start": "213370",
    "end": "215110"
  },
  {
    "text": "if you're building a real app you likely",
    "start": "215110",
    "end": "217150"
  },
  {
    "text": "want to have at least two databases one",
    "start": "217150",
    "end": "219070"
  },
  {
    "text": "for development and then one for",
    "start": "219070",
    "end": "220690"
  },
  {
    "text": "production for your live customer data",
    "start": "220690",
    "end": "222520"
  },
  {
    "text": "so go ahead and create those on the",
    "start": "222520",
    "end": "224200"
  },
  {
    "text": "databases tab and I'll show you how to",
    "start": "224200",
    "end": "225850"
  },
  {
    "text": "connect to them automatically based on",
    "start": "225850",
    "end": "227650"
  },
  {
    "text": "the environment when we get to our",
    "start": "227650",
    "end": "228910"
  },
  {
    "text": "functions code so now that we have a",
    "start": "228910",
    "end": "231160"
  },
  {
    "start": "230000",
    "end": "405000"
  },
  {
    "text": "cloud SQL instance we need a way to",
    "start": "231160",
    "end": "233260"
  },
  {
    "text": "connect to it in our local development",
    "start": "233260",
    "end": "234760"
  },
  {
    "text": "environment the easiest way to handle",
    "start": "234760",
    "end": "237160"
  },
  {
    "text": "this is to download the cloud SQL proxy",
    "start": "237160",
    "end": "239740"
  },
  {
    "text": "this is just a convenient way to connect",
    "start": "239740",
    "end": "241600"
  },
  {
    "text": "because it means you don't have to worry",
    "start": "241600",
    "end": "242860"
  },
  {
    "text": "about IP addresses or SSL to connect to",
    "start": "242860",
    "end": "245770"
  },
  {
    "text": "the instance go ahead and download it",
    "start": "245770",
    "end": "247540"
  },
  {
    "text": "into the root of the project then run",
    "start": "247540",
    "end": "249130"
  },
  {
    "text": "this command from the command line just",
    "start": "249130",
    "end": "250750"
  },
  {
    "text": "make sure to replace the instance",
    "start": "250750",
    "end": "252280"
  },
  {
    "text": "connection name and hopefully everything",
    "start": "252280",
    "end": "254110"
  },
  {
    "text": "went well and it says ready for new",
    "start": "254110",
    "end": "255850"
  },
  {
    "text": "connections go ahead and leave this",
    "start": "255850",
    "end": "257620"
  },
  {
    "text": "terminal tab open because we want this",
    "start": "257620",
    "end": "259269"
  },
  {
    "text": "process running in the background while",
    "start": "259270",
    "end": "260739"
  },
  {
    "text": "we do everything else the next thing",
    "start": "260739",
    "end": "262390"
  },
  {
    "text": "we'll do is create a config PS file in",
    "start": "262390",
    "end": "264640"
  },
  {
    "text": "the source directory the purpose of this",
    "start": "264640",
    "end": "266919"
  },
  {
    "text": "file",
    "start": "266919",
    "end": "267160"
  },
  {
    "text": "is to handle the connection to the",
    "start": "267160",
    "end": "268900"
  },
  {
    "text": "actual database and also to switch",
    "start": "268900",
    "end": "270670"
  },
  {
    "text": "between our development and production",
    "start": "270670",
    "end": "271840"
  },
  {
    "text": "databases depending on the environment",
    "start": "271840",
    "end": "273610"
  },
  {
    "text": "and we also need to import reflect",
    "start": "273610",
    "end": "275770"
  },
  {
    "text": "metadata for type o RM that just gives",
    "start": "275770",
    "end": "278080"
  },
  {
    "text": "JavaScript some better runtime type",
    "start": "278080",
    "end": "279820"
  },
  {
    "text": "checking capabilities then cloud",
    "start": "279820",
    "end": "282010"
  },
  {
    "text": "functions has an environment variable",
    "start": "282010",
    "end": "283240"
  },
  {
    "text": "called node underscore env it's",
    "start": "283240",
    "end": "285910"
  },
  {
    "text": "undefined when you're working locally",
    "start": "285910",
    "end": "287230"
  },
  {
    "text": "but when you're in production it's set",
    "start": "287230",
    "end": "289150"
  },
  {
    "text": "to the string of production so we can",
    "start": "289150",
    "end": "291070"
  },
  {
    "text": "use that to switch between our",
    "start": "291070",
    "end": "292210"
  },
  {
    "text": "production and development databases",
    "start": "292210",
    "end": "293950"
  },
  {
    "text": "from there we'll set up an object for",
    "start": "293950",
    "end": "295900"
  },
  {
    "text": "the connection options and then I want",
    "start": "295900",
    "end": "297520"
  },
  {
    "text": "to point out a few things that I've",
    "start": "297520",
    "end": "298660"
  },
  {
    "text": "modified specifically for the cloud",
    "start": "298660",
    "end": "300430"
  },
  {
    "text": "functions environment first you'll want",
    "start": "300430",
    "end": "302170"
  },
  {
    "text": "to make sure to point it to the",
    "start": "302170",
    "end": "303280"
  },
  {
    "text": "development database and then you'll",
    "start": "303280",
    "end": "304930"
  },
  {
    "text": "want to set synchronize to true when",
    "start": "304930",
    "end": "306670"
  },
  {
    "text": "you're in development now normally with",
    "start": "306670",
    "end": "308920"
  },
  {
    "text": "an SQL database you need to create the",
    "start": "308920",
    "end": "311050"
  },
  {
    "text": "database tables and then migrate changes",
    "start": "311050",
    "end": "313180"
  },
  {
    "text": "whenever there's a change but one of the",
    "start": "313180",
    "end": "314770"
  },
  {
    "text": "magical things about type ORM is that it",
    "start": "314770",
    "end": "316780"
  },
  {
    "text": "can handle all this stuff automatically",
    "start": "316780",
    "end": "318280"
  },
  {
    "text": "now I would like to point out that it's",
    "start": "318280",
    "end": "320110"
  },
  {
    "text": "not always safe to use synchronize in",
    "start": "320110",
    "end": "321670"
  },
  {
    "text": "production but it's a super useful thing",
    "start": "321670",
    "end": "323470"
  },
  {
    "text": "to have during development in a few",
    "start": "323470",
    "end": "325480"
  },
  {
    "text": "minutes we're going to write some",
    "start": "325480",
    "end": "326410"
  },
  {
    "text": "classes called entities and those get",
    "start": "326410",
    "end": "328390"
  },
  {
    "text": "compiled to the Lib folder and that",
    "start": "328390",
    "end": "330700"
  },
  {
    "text": "takes care of the options that we want",
    "start": "330700",
    "end": "332020"
  },
  {
    "text": "for the development database and most of",
    "start": "332020",
    "end": "334450"
  },
  {
    "text": "those will be the same in production but",
    "start": "334450",
    "end": "336100"
  },
  {
    "text": "there's a few things that we want to",
    "start": "336100",
    "end": "337240"
  },
  {
    "text": "override if that node environment",
    "start": "337240",
    "end": "339040"
  },
  {
    "text": "variable is set to production and we can",
    "start": "339040",
    "end": "341200"
  },
  {
    "text": "easily do that by conditionally merging",
    "start": "341200",
    "end": "342970"
  },
  {
    "text": "in an additional object with the spread",
    "start": "342970",
    "end": "344950"
  },
  {
    "text": "syntax we'll go ahead and point it to",
    "start": "344950",
    "end": "346780"
  },
  {
    "text": "the production database and you may want",
    "start": "346780",
    "end": "348700"
  },
  {
    "text": "to set synchronize to false but we'll",
    "start": "348700",
    "end": "350230"
  },
  {
    "text": "leave it enabled for now and then we",
    "start": "350230",
    "end": "351880"
  },
  {
    "text": "have this extra option here called",
    "start": "351880",
    "end": "353200"
  },
  {
    "text": "socket path which will point to cloud",
    "start": "353200",
    "end": "355270"
  },
  {
    "text": "sequel slash or instance connection name",
    "start": "355270",
    "end": "357840"
  },
  {
    "text": "now that gives us a configuration object",
    "start": "357840",
    "end": "360580"
  },
  {
    "text": "to connect to both a production and",
    "start": "360580",
    "end": "362200"
  },
  {
    "text": "development database and now I'm going",
    "start": "362200",
    "end": "364210"
  },
  {
    "text": "to write a function called connect that",
    "start": "364210",
    "end": "365920"
  },
  {
    "text": "will actually make the connection or use",
    "start": "365920",
    "end": "367690"
  },
  {
    "text": "an existing connection designed to",
    "start": "367690",
    "end": "369460"
  },
  {
    "text": "optimize the use of the database in the",
    "start": "369460",
    "end": "371620"
  },
  {
    "text": "cloud functions environment the",
    "start": "371620",
    "end": "373000"
  },
  {
    "text": "interesting thing about cloud functions",
    "start": "373000",
    "end": "374530"
  },
  {
    "text": "is that they're short-lived and the",
    "start": "374530",
    "end": "376090"
  },
  {
    "text": "resources are provisioned on demand but",
    "start": "376090",
    "end": "378160"
  },
  {
    "text": "it is possible for a database connection",
    "start": "378160",
    "end": "379930"
  },
  {
    "text": "to be shared between the functions so",
    "start": "379930",
    "end": "382870"
  },
  {
    "text": "we're creating this custom connect",
    "start": "382870",
    "end": "384310"
  },
  {
    "text": "method in order to check for an existing",
    "start": "384310",
    "end": "386470"
  },
  {
    "text": "connection by the configuration name but",
    "start": "386470",
    "end": "389050"
  },
  {
    "text": "if that connection doesn't exist then",
    "start": "389050",
    "end": "390670"
  },
  {
    "text": "it's going to throw an error so we'll go",
    "start": "390670",
    "end": "392290"
  },
  {
    "text": "ahead and catch the error then create a",
    "start": "392290",
    "end": "393940"
  },
  {
    "text": "new connection based on our",
    "start": "393940",
    "end": "395290"
  },
  {
    "text": "configuration options so this should",
    "start": "395290",
    "end": "397300"
  },
  {
    "text": "help us optimize the response time of",
    "start": "397300",
    "end": "399010"
  },
  {
    "text": "the function",
    "start": "399010",
    "end": "399550"
  },
  {
    "text": "and limit the number of connections to",
    "start": "399550",
    "end": "401110"
  },
  {
    "text": "the SQL database because that is a",
    "start": "401110",
    "end": "403000"
  },
  {
    "text": "finite resource now we're ready to get",
    "start": "403000",
    "end": "405880"
  },
  {
    "start": "405000",
    "end": "840000"
  },
  {
    "text": "into the fun stuff starting with our",
    "start": "405880",
    "end": "407350"
  },
  {
    "text": "entities and type ORM an entity is just",
    "start": "407350",
    "end": "410350"
  },
  {
    "text": "a typescript class that maps a database",
    "start": "410350",
    "end": "412480"
  },
  {
    "text": "table to your code so simply think of an",
    "start": "412480",
    "end": "414850"
  },
  {
    "text": "entity as a database table we'll start",
    "start": "414850",
    "end": "417460"
  },
  {
    "text": "by creating an entity called hippo that",
    "start": "417460",
    "end": "419320"
  },
  {
    "text": "uses the entity decorator",
    "start": "419320",
    "end": "421000"
  },
  {
    "text": "now because we have synchronized set to",
    "start": "421000",
    "end": "422920"
  },
  {
    "text": "true type ORM will automatically migrate",
    "start": "422920",
    "end": "425260"
  },
  {
    "text": "this model to the database and sync it",
    "start": "425260",
    "end": "427330"
  },
  {
    "text": "up every time we run the application now",
    "start": "427330",
    "end": "429280"
  },
  {
    "text": "we need to add some columns to it",
    "start": "429280",
    "end": "430750"
  },
  {
    "text": "starting with a primary key this value",
    "start": "430750",
    "end": "433300"
  },
  {
    "text": "needs to be unique and the easiest way",
    "start": "433300",
    "end": "434920"
  },
  {
    "text": "to make it unique is to use the primary",
    "start": "434920",
    "end": "436960"
  },
  {
    "text": "generated column decorator this will",
    "start": "436960",
    "end": "439180"
  },
  {
    "text": "automatically increment the ID for each",
    "start": "439180",
    "end": "441010"
  },
  {
    "text": "new record you add to the database so",
    "start": "441010",
    "end": "442810"
  },
  {
    "text": "one two three and so on from there we",
    "start": "442810",
    "end": "445150"
  },
  {
    "text": "can use the column decorator and Type O",
    "start": "445150",
    "end": "447070"
  },
  {
    "text": "RM will try to infer the type that we",
    "start": "447070",
    "end": "448900"
  },
  {
    "text": "use in typescript now types in SQL are",
    "start": "448900",
    "end": "451480"
  },
  {
    "text": "different than types in JavaScript so",
    "start": "451480",
    "end": "453220"
  },
  {
    "text": "you can manually set the SQL type by",
    "start": "453220",
    "end": "455170"
  },
  {
    "text": "passing it as the first argument to the",
    "start": "455170",
    "end": "457060"
  },
  {
    "text": "decorator and that's all it takes to",
    "start": "457060",
    "end": "458890"
  },
  {
    "text": "build a database table and model with",
    "start": "458890",
    "end": "460600"
  },
  {
    "text": "type ORM now let's perform some cred",
    "start": "460600",
    "end": "462730"
  },
  {
    "text": "operations on this model from our",
    "start": "462730",
    "end": "464260"
  },
  {
    "text": "functions code well go into the index TS",
    "start": "464260",
    "end": "466720"
  },
  {
    "text": "and import our connect helper as well as",
    "start": "466720",
    "end": "469240"
  },
  {
    "text": "the hippo entity now in this demo we're",
    "start": "469240",
    "end": "471490"
  },
  {
    "text": "just going to set up HTTP functions for",
    "start": "471490",
    "end": "473710"
  },
  {
    "text": "simplicity but you could also set these",
    "start": "473710",
    "end": "475600"
  },
  {
    "text": "up with callable functions or you could",
    "start": "475600",
    "end": "477580"
  },
  {
    "text": "even set them up with firestore",
    "start": "477580",
    "end": "478870"
  },
  {
    "text": "functions if you wanted to pass data",
    "start": "478870",
    "end": "480700"
  },
  {
    "text": "from firestore to your SQL database to",
    "start": "480700",
    "end": "483340"
  },
  {
    "text": "handle real-time features this first",
    "start": "483340",
    "end": "485590"
  },
  {
    "text": "function we're looking at here is called",
    "start": "485590",
    "end": "486760"
  },
  {
    "text": "get hippos and you'll want to make sure",
    "start": "486760",
    "end": "488470"
  },
  {
    "text": "that it's an async function the first",
    "start": "488470",
    "end": "490420"
  },
  {
    "text": "thing you'll do in any function with the",
    "start": "490420",
    "end": "491770"
  },
  {
    "text": "database is get the connection the",
    "start": "491770",
    "end": "493780"
  },
  {
    "text": "connection will allow you to interact",
    "start": "493780",
    "end": "495160"
  },
  {
    "text": "with the database in a variety of",
    "start": "495160",
    "end": "496600"
  },
  {
    "text": "different ways but one of the most",
    "start": "496600",
    "end": "498190"
  },
  {
    "text": "useful ways is with the repository API",
    "start": "498190",
    "end": "500470"
  },
  {
    "text": "this allows you to use one of your",
    "start": "500470",
    "end": "502570"
  },
  {
    "text": "entities as a starting point and then",
    "start": "502570",
    "end": "504460"
  },
  {
    "text": "make queries to update that entity or to",
    "start": "504460",
    "end": "507010"
  },
  {
    "text": "query it or join it with other entities",
    "start": "507010",
    "end": "508930"
  },
  {
    "text": "and all you have to do is pass in the",
    "start": "508930",
    "end": "510670"
  },
  {
    "text": "class name now if we want to query all",
    "start": "510670",
    "end": "512650"
  },
  {
    "text": "the rows from this database table we can",
    "start": "512650",
    "end": "514630"
  },
  {
    "text": "just call hippos find and that's just",
    "start": "514630",
    "end": "516729"
  },
  {
    "text": "one of the many methods that you'll find",
    "start": "516730",
    "end": "518050"
  },
  {
    "text": "on the repo to read and write to the",
    "start": "518050",
    "end": "519729"
  },
  {
    "text": "database and again the benefit of Type O",
    "start": "519730",
    "end": "521860"
  },
  {
    "text": "RM is that you have all of these really",
    "start": "521860",
    "end": "523539"
  },
  {
    "text": "easy to use methods instead of writing",
    "start": "523540",
    "end": "525370"
  },
  {
    "text": "in raw SQL queries although it is",
    "start": "525370",
    "end": "527620"
  },
  {
    "text": "possible to pass in some raw SQL with",
    "start": "527620",
    "end": "529900"
  },
  {
    "text": "the query method if you prefer we can",
    "start": "529900",
    "end": "531760"
  },
  {
    "text": "simply take the result of that read",
    "start": "531760",
    "end": "533320"
  },
  {
    "text": "and then Senate as the response from the",
    "start": "533320",
    "end": "535150"
  },
  {
    "text": "function and that will send it back to",
    "start": "535150",
    "end": "536500"
  },
  {
    "text": "the client as JSON so that function",
    "start": "536500",
    "end": "539050"
  },
  {
    "text": "allows us to read all the hippos in the",
    "start": "539050",
    "end": "540730"
  },
  {
    "text": "database but currently the database is",
    "start": "540730",
    "end": "542530"
  },
  {
    "text": "empty so we need another function to",
    "start": "542530",
    "end": "544360"
  },
  {
    "text": "write to it this next function is called",
    "start": "544360",
    "end": "546550"
  },
  {
    "text": "create hippo and it will create a new",
    "start": "546550",
    "end": "548530"
  },
  {
    "text": "hippo record based on the name and",
    "start": "548530",
    "end": "550480"
  },
  {
    "text": "weight passed in the request body from",
    "start": "550480",
    "end": "552190"
  },
  {
    "text": "the client when working with an async",
    "start": "552190",
    "end": "554080"
  },
  {
    "text": "function it's a good idea to set up a",
    "start": "554080",
    "end": "555790"
  },
  {
    "text": "try-catch block which will allow you to",
    "start": "555790",
    "end": "557710"
  },
  {
    "text": "catch errors and then send them back to",
    "start": "557710",
    "end": "559240"
  },
  {
    "text": "the client if necessary well go ahead",
    "start": "559240",
    "end": "561430"
  },
  {
    "text": "and set up the connection and make a",
    "start": "561430",
    "end": "562930"
  },
  {
    "text": "reference to the repository just like we",
    "start": "562930",
    "end": "564970"
  },
  {
    "text": "did in the previous function then this",
    "start": "564970",
    "end": "566800"
  },
  {
    "text": "time we'll create a new instance of the",
    "start": "566800",
    "end": "568690"
  },
  {
    "text": "hippo class and then we can set the",
    "start": "568690",
    "end": "570880"
  },
  {
    "text": "properties on that class to the data",
    "start": "570880",
    "end": "572800"
  },
  {
    "text": "that was passed in in the request body",
    "start": "572800",
    "end": "574420"
  },
  {
    "text": "and in the context of a real application",
    "start": "574420",
    "end": "576220"
  },
  {
    "text": "that data would likely come from a form",
    "start": "576220",
    "end": "578230"
  },
  {
    "text": "filled out on your website or from some",
    "start": "578230",
    "end": "580000"
  },
  {
    "text": "other mechanism in your front-end",
    "start": "580000",
    "end": "581320"
  },
  {
    "text": "application after those properties are",
    "start": "581320",
    "end": "583090"
  },
  {
    "text": "set we'll pass the class instance to the",
    "start": "583090",
    "end": "585130"
  },
  {
    "text": "save method",
    "start": "585130",
    "end": "585940"
  },
  {
    "text": "now these saved method might be",
    "start": "585940",
    "end": "587530"
  },
  {
    "text": "different than the hippo class because",
    "start": "587530",
    "end": "589120"
  },
  {
    "text": "you might have listeners on your",
    "start": "589120",
    "end": "590470"
  },
  {
    "text": "database that modified the record before",
    "start": "590470",
    "end": "592390"
  },
  {
    "text": "it actually gets committed to the",
    "start": "592390",
    "end": "593740"
  },
  {
    "text": "database so the data in the new hippo",
    "start": "593740",
    "end": "595840"
  },
  {
    "text": "variable might be different than the",
    "start": "595840",
    "end": "597250"
  },
  {
    "text": "data in the saved hippo variable so just",
    "start": "597250",
    "end": "599320"
  },
  {
    "text": "something to keep in mind there now",
    "start": "599320",
    "end": "601330"
  },
  {
    "text": "you'll want to make sure that you have",
    "start": "601330",
    "end": "602290"
  },
  {
    "text": "your sequel proxy running in the",
    "start": "602290",
    "end": "603700"
  },
  {
    "text": "background and then open up a new",
    "start": "603700",
    "end": "605320"
  },
  {
    "text": "terminal tab and run CD functions and",
    "start": "605320",
    "end": "607810"
  },
  {
    "text": "NPM runs serve this will serve the",
    "start": "607810",
    "end": "610750"
  },
  {
    "text": "functions locally and you should see",
    "start": "610750",
    "end": "612370"
  },
  {
    "text": "URLs to the local functions here which",
    "start": "612370",
    "end": "614470"
  },
  {
    "text": "you can copy and paste and then bring",
    "start": "614470",
    "end": "616030"
  },
  {
    "text": "those over to a rest client like",
    "start": "616030",
    "end": "617500"
  },
  {
    "text": "insomnia in the rest client we can set",
    "start": "617500",
    "end": "620170"
  },
  {
    "text": "up a new request that points to the get",
    "start": "620170",
    "end": "622120"
  },
  {
    "text": "hippos function if we make a call to",
    "start": "622120",
    "end": "624130"
  },
  {
    "text": "that function right now we should get an",
    "start": "624130",
    "end": "625720"
  },
  {
    "text": "empty array as the response and you may",
    "start": "625720",
    "end": "628240"
  },
  {
    "text": "have noticed that requests took two",
    "start": "628240",
    "end": "629350"
  },
  {
    "text": "seconds but don't worry it won't be that",
    "start": "629350",
    "end": "631030"
  },
  {
    "text": "slow in production it's just the",
    "start": "631030",
    "end": "632620"
  },
  {
    "text": "firebase functions emulator that makes",
    "start": "632620",
    "end": "634360"
  },
  {
    "text": "that slow now let's go ahead and point",
    "start": "634360",
    "end": "635920"
  },
  {
    "text": "to the create hippo function and this",
    "start": "635920",
    "end": "637780"
  },
  {
    "text": "time we'll pass in a JSON body with the",
    "start": "637780",
    "end": "639610"
  },
  {
    "text": "request and notice how there's no ID or",
    "start": "639610",
    "end": "642100"
  },
  {
    "text": "timestamp with the JSON body but when we",
    "start": "642100",
    "end": "644770"
  },
  {
    "text": "get the response back you can see an ID",
    "start": "644770",
    "end": "646510"
  },
  {
    "text": "has been automatically generated and we",
    "start": "646510",
    "end": "648640"
  },
  {
    "text": "also have a timestamp which is created",
    "start": "648640",
    "end": "650560"
  },
  {
    "text": "with a listener and I'll show you how to",
    "start": "650560",
    "end": "652060"
  },
  {
    "text": "do that in just a minute but for now",
    "start": "652060",
    "end": "654160"
  },
  {
    "text": "I'll go ahead and create a few more",
    "start": "654160",
    "end": "655450"
  },
  {
    "text": "hippo records and then we'll make",
    "start": "655450",
    "end": "656860"
  },
  {
    "text": "another query with our get hippos",
    "start": "656860",
    "end": "658360"
  },
  {
    "text": "function and now you see that all three",
    "start": "658360",
    "end": "660340"
  },
  {
    "text": "hippos are returned as an array of",
    "start": "660340",
    "end": "661960"
  },
  {
    "text": "objects from the cloud function",
    "start": "661960",
    "end": "664590"
  },
  {
    "text": "[Music]",
    "start": "664590",
    "end": "665680"
  },
  {
    "text": "[Applause]",
    "start": "665680",
    "end": "666140"
  },
  {
    "text": "[Music]",
    "start": "666140",
    "end": "670510"
  },
  {
    "text": "what I want to show you next is how I'm",
    "start": "670879",
    "end": "673050"
  },
  {
    "text": "generating that created at timestamp",
    "start": "673050",
    "end": "674730"
  },
  {
    "text": "even though it's not a piece of data",
    "start": "674730",
    "end": "676319"
  },
  {
    "text": "that we're explicitly passing to the",
    "start": "676319",
    "end": "677970"
  },
  {
    "text": "database if we go back to our hippo",
    "start": "677970",
    "end": "680249"
  },
  {
    "text": "entity we'll go ahead and create another",
    "start": "680249",
    "end": "681930"
  },
  {
    "text": "column called created at and then we'll",
    "start": "681930",
    "end": "683999"
  },
  {
    "text": "use the before insert listener or hook",
    "start": "683999",
    "end": "686279"
  },
  {
    "text": "which allows us to run some code before",
    "start": "686279",
    "end": "688410"
  },
  {
    "text": "the item is actually inserted into the",
    "start": "688410",
    "end": "690569"
  },
  {
    "text": "database so this allows you to basically",
    "start": "690569",
    "end": "692699"
  },
  {
    "text": "hook into the lifecycle of the database",
    "start": "692699",
    "end": "694589"
  },
  {
    "text": "to run code after records created or",
    "start": "694589",
    "end": "696629"
  },
  {
    "text": "before which is another very powerful",
    "start": "696629",
    "end": "698730"
  },
  {
    "text": "feature of type ORM but if you're using",
    "start": "698730",
    "end": "701129"
  },
  {
    "text": "MySQL then you must likely want to take",
    "start": "701129",
    "end": "703379"
  },
  {
    "text": "advantage of its relational data",
    "start": "703379",
    "end": "704879"
  },
  {
    "text": "modeling features now if you remember",
    "start": "704879",
    "end": "706949"
  },
  {
    "text": "earlier I said hippos can have many hats",
    "start": "706949",
    "end": "708779"
  },
  {
    "text": "so we can create that relationship by",
    "start": "708779",
    "end": "710879"
  },
  {
    "text": "using the one-to-many decorator the",
    "start": "710879",
    "end": "712889"
  },
  {
    "text": "decorator takes two arguments the first",
    "start": "712889",
    "end": "714720"
  },
  {
    "text": "argument is a function that map's the",
    "start": "714720",
    "end": "717089"
  },
  {
    "text": "type for the relationship which is the",
    "start": "717089",
    "end": "718920"
  },
  {
    "text": "Hat entity that will create next and",
    "start": "718920",
    "end": "720809"
  },
  {
    "text": "that entity will have an owner property",
    "start": "720809",
    "end": "723089"
  },
  {
    "text": "that contains the ID of the hippo that",
    "start": "723089",
    "end": "725160"
  },
  {
    "text": "owns that hat because a hippo can own",
    "start": "725160",
    "end": "727350"
  },
  {
    "text": "many hats but a hat can only be owned by",
    "start": "727350",
    "end": "729360"
  },
  {
    "text": "one hippo at a time from there we'll",
    "start": "729360",
    "end": "731309"
  },
  {
    "text": "switch over to the Hat TS file which is",
    "start": "731309",
    "end": "733319"
  },
  {
    "text": "our hat entity the initial code for this",
    "start": "733319",
    "end": "735540"
  },
  {
    "text": "entity is basically identical and then",
    "start": "735540",
    "end": "737490"
  },
  {
    "text": "we have the second half of the",
    "start": "737490",
    "end": "738600"
  },
  {
    "text": "relationship which is many to one",
    "start": "738600",
    "end": "740370"
  },
  {
    "text": "between hats and hippos in this case it",
    "start": "740370",
    "end": "743069"
  },
  {
    "text": "will set up an actual database column",
    "start": "743069",
    "end": "744600"
  },
  {
    "text": "called owner which contains the foreign",
    "start": "744600",
    "end": "746370"
  },
  {
    "text": "key with the ID of the hippo that owns",
    "start": "746370",
    "end": "748589"
  },
  {
    "text": "that hat and what we've done here is set",
    "start": "748589",
    "end": "750420"
  },
  {
    "text": "up a relationship with two database",
    "start": "750420",
    "end": "751920"
  },
  {
    "text": "tables using minimal code now let's jump",
    "start": "751920",
    "end": "754350"
  },
  {
    "text": "back into our git hippos cloud function",
    "start": "754350",
    "end": "756029"
  },
  {
    "text": "and make a join query we still want to",
    "start": "756029",
    "end": "758370"
  },
  {
    "text": "query all the hippos in their database",
    "start": "758370",
    "end": "759689"
  },
  {
    "text": "but we also want to join all of their",
    "start": "759689",
    "end": "761550"
  },
  {
    "text": "hats from the separate database table",
    "start": "761550",
    "end": "763230"
  },
  {
    "text": "when we make that query we'll call",
    "start": "763230",
    "end": "765059"
  },
  {
    "text": "create query builder on the hippo repo",
    "start": "765059",
    "end": "767100"
  },
  {
    "text": "and then this is an example of a left",
    "start": "767100",
    "end": "769379"
  },
  {
    "text": "join basically we'll get all of the hats",
    "start": "769379",
    "end": "772079"
  },
  {
    "text": "that are owned by hippo and then join",
    "start": "772079",
    "end": "773850"
  },
  {
    "text": "the Hat entity data for each hippo",
    "start": "773850",
    "end": "775860"
  },
  {
    "text": "record and lastly we'll call get many to",
    "start": "775860",
    "end": "778139"
  },
  {
    "text": "return all the hats on that query that's",
    "start": "778139",
    "end": "780360"
  },
  {
    "text": "how we make the query but we also need a",
    "start": "780360",
    "end": "782040"
  },
  {
    "text": "way to create new hats because currently",
    "start": "782040",
    "end": "783809"
  },
  {
    "text": "there aren't any in the database this",
    "start": "783809",
    "end": "785730"
  },
  {
    "text": "function will look identical to the",
    "start": "785730",
    "end": "787319"
  },
  {
    "text": "create hippo function except it will",
    "start": "787319",
    "end": "789179"
  },
  {
    "text": "take the owner ID of a hippo and then",
    "start": "789179",
    "end": "791550"
  },
  {
    "text": "also the color of the Hat to create the",
    "start": "791550",
    "end": "793259"
  },
  {
    "text": "record at this point you can serve the",
    "start": "793259",
    "end": "794759"
  },
  {
    "text": "functions and then we'll go back over to",
    "start": "794759",
    "end": "796379"
  },
  {
    "text": "insomnia what I'm doing now is creating",
    "start": "796379",
    "end": "798750"
  },
  {
    "text": "a few new hat records in the database",
    "start": "798750",
    "end": "800370"
  },
  {
    "text": "and each one will be assigned to hippo",
    "start": "800370",
    "end": "802439"
  },
  {
    "text": "ID number one then if we go back and",
    "start": "802439",
    "end": "804540"
  },
  {
    "text": "they get hippos endpoint you can see",
    "start": "804540",
    "end": "806220"
  },
  {
    "text": "that it still retrieves all the hippo",
    "start": "806220",
    "end": "807660"
  },
  {
    "text": "records but it will also join the Hat",
    "start": "807660",
    "end": "809490"
  },
  {
    "text": "records to each one as well so we now",
    "start": "809490",
    "end": "811650"
  },
  {
    "text": "have a classic one-to-many relationship",
    "start": "811650",
    "end": "813480"
  },
  {
    "text": "in an SQL database within our firebase",
    "start": "813480",
    "end": "815670"
  },
  {
    "text": "project we've really just scratched the",
    "start": "815670",
    "end": "817860"
  },
  {
    "text": "surface of what's possible with type ORM",
    "start": "817860",
    "end": "819810"
  },
  {
    "text": "and MySQL but I'm gonna go ahead and",
    "start": "819810",
    "end": "821820"
  },
  {
    "text": "wrap things up there if this video",
    "start": "821820",
    "end": "823350"
  },
  {
    "text": "helped you please like and subscribe and",
    "start": "823350",
    "end": "825030"
  },
  {
    "text": "if you want to learn how to build",
    "start": "825030",
    "end": "826140"
  },
  {
    "text": "awesome applications with firebase",
    "start": "826140",
    "end": "827730"
  },
  {
    "text": "consider becoming a pro member at fire",
    "start": "827730",
    "end": "829800"
  },
  {
    "text": "ship IO thanks for watching and I will",
    "start": "829800",
    "end": "832170"
  },
  {
    "text": "talk to you soon",
    "start": "832170",
    "end": "834140"
  },
  {
    "text": "[Music]",
    "start": "834140",
    "end": "842299"
  }
]