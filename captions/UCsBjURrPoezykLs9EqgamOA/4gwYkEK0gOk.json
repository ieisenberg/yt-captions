[
  {
    "start": "0",
    "end": "14000"
  },
  {
    "text": "assembly a low-level programming",
    "start": "280",
    "end": "2159"
  },
  {
    "text": "language designed to simplify the",
    "start": "2159",
    "end": "3840"
  },
  {
    "text": "instructions fed into a computer CPU in",
    "start": "3840",
    "end": "6520"
  },
  {
    "text": "other words it's a human readable",
    "start": "6520",
    "end": "8120"
  },
  {
    "text": "abstraction on top of machine code so",
    "start": "8120",
    "end": "10000"
  },
  {
    "text": "programmers don't have to manually count",
    "start": "10000",
    "end": "11759"
  },
  {
    "text": "ones and zeros the First Assembly",
    "start": "11759",
    "end": "13480"
  },
  {
    "text": "Language was created by Kathleen booth",
    "start": "13480",
    "end": "15519"
  },
  {
    "start": "14000",
    "end": "50000"
  },
  {
    "text": "in 1947 for the allpurpose electronic",
    "start": "15519",
    "end": "18359"
  },
  {
    "text": "computer over the next decade it evolved",
    "start": "18359",
    "end": "20439"
  },
  {
    "text": "into many different formats to power the",
    "start": "20439",
    "end": "22439"
  },
  {
    "text": "supercomputers of the day like the IBM",
    "start": "22439",
    "end": "24519"
  },
  {
    "text": "790 which had a $20 million price tag in",
    "start": "24519",
    "end": "27359"
  },
  {
    "text": "today's dollars writing code in assembly",
    "start": "27359",
    "end": "29359"
  },
  {
    "text": "was standard until the emergence of",
    "start": "29359",
    "end": "31000"
  },
  {
    "text": "highlevel languages like Fortran a few",
    "start": "31000",
    "end": "33280"
  },
  {
    "text": "years later however assembly is still",
    "start": "33280",
    "end": "35280"
  },
  {
    "text": "used today for direct access to the bare",
    "start": "35280",
    "end": "37399"
  },
  {
    "text": "metal hardware and to address low-level",
    "start": "37399",
    "end": "39360"
  },
  {
    "text": "performance issues often on device",
    "start": "39360",
    "end": "41079"
  },
  {
    "text": "drivers and embedded systems and it's",
    "start": "41079",
    "end": "43000"
  },
  {
    "text": "also used to run native software in a",
    "start": "43000",
    "end": "44520"
  },
  {
    "text": "web browser via web assembly what's",
    "start": "44520",
    "end": "46399"
  },
  {
    "text": "tricky is that each Assembly Language",
    "start": "46399",
    "end": "48320"
  },
  {
    "text": "only works on a specific CPU",
    "start": "48320",
    "end": "50239"
  },
  {
    "start": "50000",
    "end": "163000"
  },
  {
    "text": "architecture like arm for Apple silicon",
    "start": "50239",
    "end": "52320"
  },
  {
    "text": "and Raspberry Pi or x86 for Intel chips",
    "start": "52320",
    "end": "55320"
  },
  {
    "text": "to get started you'll first need an",
    "start": "55320",
    "end": "56680"
  },
  {
    "text": "assembler like the netwide assembler for",
    "start": "56680",
    "end": "58640"
  },
  {
    "text": "x86 chips in assembly program is divided",
    "start": "58640",
    "end": "61480"
  },
  {
    "text": "into three sections the text section",
    "start": "61480",
    "end": "63399"
  },
  {
    "text": "contains the actual Logic for the",
    "start": "63399",
    "end": "64920"
  },
  {
    "text": "program by convention it contains an",
    "start": "64920",
    "end": "66760"
  },
  {
    "text": "entry point called start which is where",
    "start": "66760",
    "end": "68360"
  },
  {
    "text": "the code will start executing next we",
    "start": "68360",
    "end": "70240"
  },
  {
    "text": "have the block starting symbol section",
    "start": "70240",
    "end": "71960"
  },
  {
    "text": "which contains variables that might",
    "start": "71960",
    "end": "73280"
  },
  {
    "text": "change throughout the life cycle of the",
    "start": "73280",
    "end": "74759"
  },
  {
    "text": "app and finally the data section is",
    "start": "74759",
    "end": "76680"
  },
  {
    "text": "where we can initialize constants or",
    "start": "76680",
    "end": "78479"
  },
  {
    "text": "data that does not change to declare a",
    "start": "78479",
    "end": "80240"
  },
  {
    "text": "constant like a string we start with a",
    "start": "80240",
    "end": "81920"
  },
  {
    "text": "label then use DB for defined bite to",
    "start": "81920",
    "end": "84400"
  },
  {
    "text": "place the hello world string into memory",
    "start": "84400",
    "end": "86520"
  },
  {
    "text": "by itself it doesn't do anything and to",
    "start": "86520",
    "end": "88280"
  },
  {
    "text": "print it to the standard output we will",
    "start": "88280",
    "end": "89920"
  },
  {
    "text": "will also need its length we can use",
    "start": "89920",
    "end": "91360"
  },
  {
    "text": "equate to convert a symbol into a",
    "start": "91360",
    "end": "93320"
  },
  {
    "text": "constant the dollar sign will subtract",
    "start": "93320",
    "end": "95000"
  },
  {
    "text": "the current position from the hello",
    "start": "95000",
    "end": "96439"
  },
  {
    "text": "label providing the length of the string",
    "start": "96439",
    "end": "98200"
  },
  {
    "text": "and now these constants can be",
    "start": "98200",
    "end": "99280"
  },
  {
    "text": "referenced from the start label in the",
    "start": "99280",
    "end": "100840"
  },
  {
    "text": "main program each line of code contains",
    "start": "100840",
    "end": "102560"
  },
  {
    "text": "an instruction along with one or more",
    "start": "102560",
    "end": "104320"
  },
  {
    "text": "operands and there are hundreds of",
    "start": "104320",
    "end": "105799"
  },
  {
    "text": "instructions built into the language now",
    "start": "105799",
    "end": "107680"
  },
  {
    "text": "to perform operations quickly the CPU",
    "start": "107680",
    "end": "110000"
  },
  {
    "text": "has a limited number of registers which",
    "start": "110000",
    "end": "111759"
  },
  {
    "text": "are like 64-bit chunks of memory built",
    "start": "111759",
    "end": "114119"
  },
  {
    "text": "directly into the CPU instead of the ram",
    "start": "114119",
    "end": "116280"
  },
  {
    "text": "we can insert data into a register with",
    "start": "116280",
    "end": "118119"
  },
  {
    "text": "the move instruction by providing",
    "start": "118119",
    "end": "119920"
  },
  {
    "text": "operands for the register name and the",
    "start": "119920",
    "end": "121640"
  },
  {
    "text": "data to store there in this case number",
    "start": "121640",
    "end": "123439"
  },
  {
    "text": "one is used because it corresponds to",
    "start": "123439",
    "end": "125280"
  },
  {
    "text": "system right on Linux next we need to",
    "start": "125280",
    "end": "127399"
  },
  {
    "text": "tell the system where to write in which",
    "start": "127399",
    "end": "129039"
  },
  {
    "text": "case we'll move one into the RDI",
    "start": "129039",
    "end": "130920"
  },
  {
    "text": "register which corresponds to the",
    "start": "130920",
    "end": "132640"
  },
  {
    "text": "standard output in the terminal the next",
    "start": "132640",
    "end": "134400"
  },
  {
    "text": "register stores the message to write",
    "start": "134400",
    "end": "136120"
  },
  {
    "text": "along with its length now execute the",
    "start": "136120",
    "end": "137720"
  },
  {
    "text": "code stored in the CPU by calling the",
    "start": "137720",
    "end": "139720"
  },
  {
    "text": "operating system kernel almost done but",
    "start": "139720",
    "end": "141760"
  },
  {
    "text": "we'll get a segmentation fault if we try",
    "start": "141760",
    "end": "143319"
  },
  {
    "text": "to run it at this point update the RX",
    "start": "143319",
    "end": "144920"
  },
  {
    "text": "register with 60 for system exit and",
    "start": "144920",
    "end": "147040"
  },
  {
    "text": "provide an error code of zero for a",
    "start": "147040",
    "end": "148480"
  },
  {
    "text": "success now use the assembler to compile",
    "start": "148480",
    "end": "150599"
  },
  {
    "text": "or assemble your code into an object",
    "start": "150599",
    "end": "152400"
  },
  {
    "text": "file then use the Linker to convert it",
    "start": "152400",
    "end": "154160"
  },
  {
    "text": "into the final executable this has been",
    "start": "154160",
    "end": "155879"
  },
  {
    "text": "Assembly Language in 100 seconds if you",
    "start": "155879",
    "end": "158040"
  },
  {
    "text": "want to see more short videos like this",
    "start": "158040",
    "end": "159519"
  },
  {
    "text": "hit the like button and subscribe thanks",
    "start": "159519",
    "end": "161319"
  },
  {
    "text": "for watching and I will see you in the",
    "start": "161319",
    "end": "163120"
  },
  {
    "text": "next one",
    "start": "163120",
    "end": "165840"
  }
]