[
  {
    "text": "[Music]",
    "start": "0",
    "end": "6350"
  },
  {
    "text": "one of the big predictions people are",
    "start": "6350",
    "end": "8429"
  },
  {
    "text": "making in 2018 is that graph QL will",
    "start": "8429",
    "end": "10769"
  },
  {
    "text": "make restful api is obsolete in today's",
    "start": "10769",
    "end": "13290"
  },
  {
    "text": "episode we'll learn how to build a graph",
    "start": "13290",
    "end": "14610"
  },
  {
    "text": "QL API from scratch using Apollo server",
    "start": "14610",
    "end": "17220"
  },
  {
    "text": "2.0 and node KS if you're new here make",
    "start": "17220",
    "end": "20130"
  },
  {
    "text": "sure to LIKE and subscribe and I want to",
    "start": "20130",
    "end": "21840"
  },
  {
    "text": "send a huge thank you out to Arjun",
    "start": "21840",
    "end": "23490"
  },
  {
    "text": "yellow man celli he's the mastermind",
    "start": "23490",
    "end": "25230"
  },
  {
    "text": "behind the code in this video and if you",
    "start": "25230",
    "end": "26760"
  },
  {
    "text": "need a talented developer in Denver he",
    "start": "26760",
    "end": "28560"
  },
  {
    "text": "comes highly recommended so let's kick",
    "start": "28560",
    "end": "30779"
  },
  {
    "text": "things off by talking about graph QL",
    "start": "30779",
    "end": "32340"
  },
  {
    "text": "from a very high level imagine you have",
    "start": "32340",
    "end": "34320"
  },
  {
    "text": "an angular app that communicates with a",
    "start": "34320",
    "end": "36030"
  },
  {
    "text": "bunch of different back-end data sources",
    "start": "36030",
    "end": "38030"
  },
  {
    "text": "traditionally you would do this with",
    "start": "38030",
    "end": "39600"
  },
  {
    "text": "either a REST API or a client-side SDK",
    "start": "39600",
    "end": "42360"
  },
  {
    "text": "when you hit a restful endpoint it's the",
    "start": "42360",
    "end": "44789"
  },
  {
    "text": "server that determines the shape of the",
    "start": "44789",
    "end": "46680"
  },
  {
    "text": "data that gets sent back to the client",
    "start": "46680",
    "end": "48180"
  },
  {
    "text": "what happens is that you'll hit a rest",
    "start": "48180",
    "end": "49920"
  },
  {
    "text": "one point and it will respond with a",
    "start": "49920",
    "end": "51539"
  },
  {
    "text": "bunch of data that you don't know",
    "start": "51539",
    "end": "52680"
  },
  {
    "text": "anything about and that you don't need",
    "start": "52680",
    "end": "54149"
  },
  {
    "text": "graph QL is a query language that solves",
    "start": "54149",
    "end": "56969"
  },
  {
    "text": "this problem by sitting in between your",
    "start": "56969",
    "end": "58649"
  },
  {
    "text": "back-end and front-end it allows the",
    "start": "58649",
    "end": "60539"
  },
  {
    "text": "server to define exactly what data is",
    "start": "60539",
    "end": "62579"
  },
  {
    "text": "available and it allows the client to",
    "start": "62579",
    "end": "64559"
  },
  {
    "text": "only request the data that it actually",
    "start": "64559",
    "end": "66270"
  },
  {
    "text": "needs to provide the user experience",
    "start": "66270",
    "end": "68000"
  },
  {
    "text": "what's really cool is that you can use",
    "start": "68000",
    "end": "70049"
  },
  {
    "text": "it with any back-end data source and",
    "start": "70049",
    "end": "71580"
  },
  {
    "text": "this video will use fire store and set",
    "start": "71580",
    "end": "73710"
  },
  {
    "text": "up a node J a server with Apollo to",
    "start": "73710",
    "end": "75600"
  },
  {
    "text": "deliver the API this video is a two part",
    "start": "75600",
    "end": "78570"
  },
  {
    "text": "series in this first installment we will",
    "start": "78570",
    "end": "80729"
  },
  {
    "text": "set up the back-end API and in the",
    "start": "80729",
    "end": "82860"
  },
  {
    "text": "second part we will use angular to",
    "start": "82860",
    "end": "84750"
  },
  {
    "text": "consume this API from the front end when",
    "start": "84750",
    "end": "87570"
  },
  {
    "text": "you set up a graph QL API it provides",
    "start": "87570",
    "end": "89670"
  },
  {
    "text": "this really nice playground that you can",
    "start": "89670",
    "end": "91200"
  },
  {
    "text": "use to start sending requests and this",
    "start": "91200",
    "end": "93119"
  },
  {
    "text": "just works out of the box what we're",
    "start": "93119",
    "end": "95220"
  },
  {
    "text": "going to do in the code is set up",
    "start": "95220",
    "end": "96659"
  },
  {
    "text": "interfaces that describe the data that's",
    "start": "96659",
    "end": "98700"
  },
  {
    "text": "available on the server this is super",
    "start": "98700",
    "end": "100920"
  },
  {
    "text": "powerful because the client can probe",
    "start": "100920",
    "end": "102689"
  },
  {
    "text": "the backend in advance to find out what",
    "start": "102689",
    "end": "104790"
  },
  {
    "text": "types are available and how they can be",
    "start": "104790",
    "end": "106500"
  },
  {
    "text": "requested this means you get amazing",
    "start": "106500",
    "end": "108899"
  },
  {
    "text": "developer tooling even on a foreign API",
    "start": "108899",
    "end": "110880"
  },
  {
    "text": "because you know exactly what's",
    "start": "110880",
    "end": "112259"
  },
  {
    "text": "available and how it can be requested",
    "start": "112259",
    "end": "114170"
  },
  {
    "text": "you can see here I requested all the",
    "start": "114170",
    "end": "116460"
  },
  {
    "text": "interface names and the ones we're",
    "start": "116460",
    "end": "118020"
  },
  {
    "text": "interested in our tweet and user let's",
    "start": "118020",
    "end": "120810"
  },
  {
    "text": "say we want to request all of the tweets",
    "start": "120810",
    "end": "122579"
  },
  {
    "text": "from our database but we only want the",
    "start": "122579",
    "end": "124590"
  },
  {
    "text": "ID and the number of likes all we need",
    "start": "124590",
    "end": "127409"
  },
  {
    "text": "to do is type out the shape of our data",
    "start": "127409",
    "end": "129030"
  },
  {
    "text": "on the left and then send it to the",
    "start": "129030",
    "end": "130709"
  },
  {
    "text": "server on the right and it will respond",
    "start": "130709",
    "end": "132690"
  },
  {
    "text": "with J",
    "start": "132690",
    "end": "133330"
  },
  {
    "text": "Sahn in the exact shape that we",
    "start": "133330",
    "end": "135010"
  },
  {
    "text": "requested and this is live data you're",
    "start": "135010",
    "end": "136900"
  },
  {
    "text": "looking at that lives in the firestore",
    "start": "136900",
    "end": "138460"
  },
  {
    "text": "database but it can come from any data",
    "start": "138460",
    "end": "140500"
  },
  {
    "text": "source or even multiple data sources at",
    "start": "140500",
    "end": "142660"
  },
  {
    "text": "the same time the tweets also have a",
    "start": "142660",
    "end": "145060"
  },
  {
    "text": "text property so if we want to include",
    "start": "145060",
    "end": "146800"
  },
  {
    "text": "text in our request we just add that to",
    "start": "146800",
    "end": "148690"
  },
  {
    "text": "the interface and it returns the text",
    "start": "148690",
    "end": "150580"
  },
  {
    "text": "from the database this can be extremely",
    "start": "150580",
    "end": "153280"
  },
  {
    "text": "useful if you have relational data that",
    "start": "153280",
    "end": "155380"
  },
  {
    "text": "you need to join from multiple sources",
    "start": "155380",
    "end": "156850"
  },
  {
    "text": "which is commonly the case with no",
    "start": "156850",
    "end": "158590"
  },
  {
    "text": "sequel databases let's imagine we want",
    "start": "158590",
    "end": "161890"
  },
  {
    "text": "to query a user plus all of that users",
    "start": "161890",
    "end": "164170"
  },
  {
    "text": "tweets which live in a completely",
    "start": "164170",
    "end": "165730"
  },
  {
    "text": "different collection and firestore you",
    "start": "165730",
    "end": "168040"
  },
  {
    "text": "can pass arguments to graph QL which in",
    "start": "168040",
    "end": "170080"
  },
  {
    "text": "this case will be the user ID then we'll",
    "start": "170080",
    "end": "172510"
  },
  {
    "text": "get autocomplete for all the properties",
    "start": "172510",
    "end": "174340"
  },
  {
    "text": "available so if we want to just pull the",
    "start": "174340",
    "end": "176140"
  },
  {
    "text": "screen name we can do that easily but",
    "start": "176140",
    "end": "179410"
  },
  {
    "text": "tweets can also belong to a user and",
    "start": "179410",
    "end": "181120"
  },
  {
    "text": "it's a property on the user interface so",
    "start": "181120",
    "end": "183459"
  },
  {
    "text": "we can apply it here and then request",
    "start": "183459",
    "end": "185170"
  },
  {
    "text": "some data about the tweets that we want",
    "start": "185170",
    "end": "186880"
  },
  {
    "text": "to return back that will only belong to",
    "start": "186880",
    "end": "188680"
  },
  {
    "text": "this user so that's really only the tip",
    "start": "188680",
    "end": "191980"
  },
  {
    "text": "of the iceberg with graph QL but the",
    "start": "191980",
    "end": "193870"
  },
  {
    "text": "main takeaway is that it allows you to",
    "start": "193870",
    "end": "195459"
  },
  {
    "text": "request data in exactly the way it",
    "start": "195459",
    "end": "197410"
  },
  {
    "text": "should be consumed in the front end",
    "start": "197410",
    "end": "198760"
  },
  {
    "text": "which is a big difference from rest",
    "start": "198760",
    "end": "200380"
  },
  {
    "text": "api's now we're ready to write some code",
    "start": "200380",
    "end": "202720"
  },
  {
    "text": "but first I have some really good news",
    "start": "202720",
    "end": "204070"
  },
  {
    "text": "just a couple days ago nodejs became",
    "start": "204070",
    "end": "206410"
  },
  {
    "text": "available on the App Engine standard",
    "start": "206410",
    "end": "208420"
  },
  {
    "text": "runtime which means you can use it for",
    "start": "208420",
    "end": "210280"
  },
  {
    "text": "free and it's super easy to integrate",
    "start": "210280",
    "end": "212050"
  },
  {
    "text": "into a firebase project I first want to",
    "start": "212050",
    "end": "214660"
  },
  {
    "text": "point out that you can find the full",
    "start": "214660",
    "end": "215800"
  },
  {
    "text": "setup instructions on the github repo",
    "start": "215800",
    "end": "217570"
  },
  {
    "text": "for this video but I do want to point",
    "start": "217570",
    "end": "219550"
  },
  {
    "text": "out a few the more important parts I'll",
    "start": "219550",
    "end": "221560"
  },
  {
    "text": "be writing this in typescript but the",
    "start": "221560",
    "end": "223239"
  },
  {
    "text": "code is fully compatible with vanilla",
    "start": "223239",
    "end": "224739"
  },
  {
    "text": "Jas if you prefer that the first thing I",
    "start": "224739",
    "end": "227470"
  },
  {
    "text": "want to do is install a palo server 2.0",
    "start": "227470",
    "end": "229690"
  },
  {
    "text": "as well as graph QL then to make things",
    "start": "229690",
    "end": "233200"
  },
  {
    "text": "fully compatible with typescript there's",
    "start": "233200",
    "end": "234820"
  },
  {
    "text": "a few extra things we added to the TS",
    "start": "234820",
    "end": "236470"
  },
  {
    "text": "config so make sure to grab the TS",
    "start": "236470",
    "end": "238239"
  },
  {
    "text": "config from the repo from here we can",
    "start": "238239",
    "end": "240850"
  },
  {
    "text": "install firebase admin and then we'll",
    "start": "240850",
    "end": "242830"
  },
  {
    "text": "need to go to the firebase console and",
    "start": "242830",
    "end": "244750"
  },
  {
    "text": "download our service account you can",
    "start": "244750",
    "end": "246790"
  },
  {
    "text": "find it under settings and then go to",
    "start": "246790",
    "end": "248470"
  },
  {
    "text": "service accounts and then download it",
    "start": "248470",
    "end": "250450"
  },
  {
    "text": "into the Roo the project as service",
    "start": "250450",
    "end": "252400"
  },
  {
    "text": "account JSON I have set up an indexed es",
    "start": "252400",
    "end": "255880"
  },
  {
    "text": "file and in this file I'm first going to",
    "start": "255880",
    "end": "258160"
  },
  {
    "text": "import a few dependencies starting with",
    "start": "258160",
    "end": "260950"
  },
  {
    "text": "firebase admin and then a reference to",
    "start": "260950",
    "end": "262900"
  },
  {
    "text": "our service account and then we'll",
    "start": "262900",
    "end": "264280"
  },
  {
    "text": "initialize the app with that service",
    "start": "264280",
    "end": "265870"
  },
  {
    "text": "account",
    "start": "265870",
    "end": "266710"
  },
  {
    "text": "that gives us full access to the data",
    "start": "266710",
    "end": "268509"
  },
  {
    "text": "and firestore from here we'll import",
    "start": "268509",
    "end": "271090"
  },
  {
    "text": "Apollo server and graph QL will also",
    "start": "271090",
    "end": "273970"
  },
  {
    "text": "bring in Apollo error and validation so",
    "start": "273970",
    "end": "276069"
  },
  {
    "text": "we can handle errors gracefully on the",
    "start": "276069",
    "end": "277900"
  },
  {
    "text": "server there are two main pieces to a",
    "start": "277900",
    "end": "280150"
  },
  {
    "text": "graph QL API the first one is your graph",
    "start": "280150",
    "end": "282970"
  },
  {
    "text": "QL type definitions which is where you",
    "start": "282970",
    "end": "285400"
  },
  {
    "text": "write actual graph QL code to define the",
    "start": "285400",
    "end": "287620"
  },
  {
    "text": "shape of the data that's available on",
    "start": "287620",
    "end": "289330"
  },
  {
    "text": "the server the second half of this",
    "start": "289330",
    "end": "291280"
  },
  {
    "text": "puzzle are your resolvers this is where",
    "start": "291280",
    "end": "293740"
  },
  {
    "text": "you tell graph QL how to return the",
    "start": "293740",
    "end": "295569"
  },
  {
    "text": "actual data to the client through the",
    "start": "295569",
    "end": "297340"
  },
  {
    "text": "API so first let's start by defining our",
    "start": "297340",
    "end": "300250"
  },
  {
    "text": "type definitions you can define an",
    "start": "300250",
    "end": "302229"
  },
  {
    "text": "object by calling type with the name of",
    "start": "302229",
    "end": "304509"
  },
  {
    "text": "the object and then there's a number of",
    "start": "304509",
    "end": "306250"
  },
  {
    "text": "built-in data types for example ID is",
    "start": "306250",
    "end": "308530"
  },
  {
    "text": "just a string that is supposed to be",
    "start": "308530",
    "end": "310090"
  },
  {
    "text": "unique then you have common data types",
    "start": "310090",
    "end": "312070"
  },
  {
    "text": "that you would expect like string",
    "start": "312070",
    "end": "313479"
  },
  {
    "text": "integer and things like that when you",
    "start": "313479",
    "end": "315789"
  },
  {
    "text": "put brackets around something that means",
    "start": "315789",
    "end": "317590"
  },
  {
    "text": "that it should return an array of that",
    "start": "317590",
    "end": "319180"
  },
  {
    "text": "interface you might also notice the",
    "start": "319180",
    "end": "321310"
  },
  {
    "text": "exclamation point after each property",
    "start": "321310",
    "end": "323020"
  },
  {
    "text": "that just means the API will always",
    "start": "323020",
    "end": "325210"
  },
  {
    "text": "promise to return that data type it",
    "start": "325210",
    "end": "327190"
  },
  {
    "text": "won't return a null value so a user can",
    "start": "327190",
    "end": "329710"
  },
  {
    "text": "have an array of tweets which we've",
    "start": "329710",
    "end": "330909"
  },
  {
    "text": "modeled here but a tweet can only have",
    "start": "330909",
    "end": "333070"
  },
  {
    "text": "one user so we'll set some properties",
    "start": "333070",
    "end": "335320"
  },
  {
    "text": "for our tweet object but this time we'll",
    "start": "335320",
    "end": "337840"
  },
  {
    "text": "type the user to the user schema that we",
    "start": "337840",
    "end": "340330"
  },
  {
    "text": "just defined in the previous step but if",
    "start": "340330",
    "end": "342490"
  },
  {
    "text": "you look in the database you'll notice",
    "start": "342490",
    "end": "343690"
  },
  {
    "text": "that our actual user data doesn't have",
    "start": "343690",
    "end": "345639"
  },
  {
    "text": "any tweets objects nested on it tweets",
    "start": "345639",
    "end": "348130"
  },
  {
    "text": "are their own isolated collection that",
    "start": "348130",
    "end": "349840"
  },
  {
    "text": "are completely decoupled from users",
    "start": "349840",
    "end": "351460"
  },
  {
    "text": "that's important to make note of because",
    "start": "351460",
    "end": "353080"
  },
  {
    "text": "in the next step we'll use resolvers to",
    "start": "353080",
    "end": "354820"
  },
  {
    "text": "combine all this stuff together now the",
    "start": "354820",
    "end": "356949"
  },
  {
    "text": "last thing we need in our schema is the",
    "start": "356949",
    "end": "358780"
  },
  {
    "text": "query which can be thought of as like",
    "start": "358780",
    "end": "360460"
  },
  {
    "text": "the main entry point into your API in",
    "start": "360460",
    "end": "363490"
  },
  {
    "text": "this case we can enter the API through",
    "start": "363490",
    "end": "365199"
  },
  {
    "text": "tweets or we can enter it through the",
    "start": "365199",
    "end": "367240"
  },
  {
    "text": "user with their user ID at this point",
    "start": "367240",
    "end": "369940"
  },
  {
    "text": "everything that's available to be",
    "start": "369940",
    "end": "371259"
  },
  {
    "text": "fetched on our API is well-defined but",
    "start": "371259",
    "end": "373900"
  },
  {
    "text": "we still need a method to actually",
    "start": "373900",
    "end": "375639"
  },
  {
    "text": "retrieve this data for that we'll define",
    "start": "375639",
    "end": "378280"
  },
  {
    "text": "an object called resolvers where each",
    "start": "378280",
    "end": "380320"
  },
  {
    "text": "property in this object matches one of",
    "start": "380320",
    "end": "382270"
  },
  {
    "text": "our interfaces data that already exists",
    "start": "382270",
    "end": "384909"
  },
  {
    "text": "on the firestore document can be",
    "start": "384909",
    "end": "386169"
  },
  {
    "text": "inferred automatically but remember we",
    "start": "386169",
    "end": "388690"
  },
  {
    "text": "don't have any tweets available on the",
    "start": "388690",
    "end": "390370"
  },
  {
    "text": "actual user itself so we need to write a",
    "start": "390370",
    "end": "392680"
  },
  {
    "text": "method that can resolve that data in",
    "start": "392680",
    "end": "394509"
  },
  {
    "text": "firebase this is really easy because we",
    "start": "394509",
    "end": "396849"
  },
  {
    "text": "can use the admin database called the",
    "start": "396849",
    "end": "398949"
  },
  {
    "text": "tweets collection",
    "start": "398949",
    "end": "400060"
  },
  {
    "text": "and then just query where the user ID",
    "start": "400060",
    "end": "401919"
  },
  {
    "text": "equals the user ID on this object then",
    "start": "401919",
    "end": "405550"
  },
  {
    "text": "we call get to return that as a promise",
    "start": "405550",
    "end": "407410"
  },
  {
    "text": "and that'll be a snapshot and the final",
    "start": "407410",
    "end": "409780"
  },
  {
    "text": "step is to just map that snapshot down",
    "start": "409780",
    "end": "411550"
  },
  {
    "text": "to its actual raw data object if this",
    "start": "411550",
    "end": "414130"
  },
  {
    "text": "code fails at runtime we want to throw",
    "start": "414130",
    "end": "416139"
  },
  {
    "text": "an error to handle it gracefully which",
    "start": "416139",
    "end": "418030"
  },
  {
    "text": "we can do inside of the try catch block",
    "start": "418030",
    "end": "419830"
  },
  {
    "text": "by throwing an Apollo error tweets will",
    "start": "419830",
    "end": "422919"
  },
  {
    "text": "follow a very similar process in this",
    "start": "422919",
    "end": "425020"
  },
  {
    "text": "case we just need to return a single",
    "start": "425020",
    "end": "426669"
  },
  {
    "text": "firestore document because every tweet",
    "start": "426669",
    "end": "428980"
  },
  {
    "text": "has an Associated user ID but we want to",
    "start": "428980",
    "end": "431800"
  },
  {
    "text": "be able to return additional data if the",
    "start": "431800",
    "end": "433510"
  },
  {
    "text": "user requests it on their graph QL query",
    "start": "433510",
    "end": "435820"
  },
  {
    "text": "the last resolver that we need is the",
    "start": "435820",
    "end": "438220"
  },
  {
    "text": "query this defines how we get the data",
    "start": "438220",
    "end": "439810"
  },
  {
    "text": "for the route documents being that tweet",
    "start": "439810",
    "end": "442240"
  },
  {
    "text": "and the user tweets are a collection so",
    "start": "442240",
    "end": "444850"
  },
  {
    "text": "we can simply return those as a",
    "start": "444850",
    "end": "446350"
  },
  {
    "text": "firestore collection so what we're",
    "start": "446350",
    "end": "448840"
  },
  {
    "text": "looking at here is just firebase 101",
    "start": "448840",
    "end": "450580"
  },
  {
    "text": "we're pointing to a collection and then",
    "start": "450580",
    "end": "452410"
  },
  {
    "text": "retrieving it as an array of documents",
    "start": "452410",
    "end": "454979"
  },
  {
    "text": "the user query is also very similar but",
    "start": "454979",
    "end": "457960"
  },
  {
    "text": "the main difference is we're passing an",
    "start": "457960",
    "end": "459550"
  },
  {
    "text": "argument to the method being the user ID",
    "start": "459550",
    "end": "461560"
  },
  {
    "text": "we can access the argument data as the",
    "start": "461560",
    "end": "464560"
  },
  {
    "text": "second argument in this method so now we",
    "start": "464560",
    "end": "467110"
  },
  {
    "text": "can retrieve our user based on the user",
    "start": "467110",
    "end": "469090"
  },
  {
    "text": "ID that's passed in by whoever is making",
    "start": "469090",
    "end": "471250"
  },
  {
    "text": "the graph QL query it's very possible",
    "start": "471250",
    "end": "473650"
  },
  {
    "text": "that they will pass in an ID that",
    "start": "473650",
    "end": "475600"
  },
  {
    "text": "doesn't exist so we want to handle that",
    "start": "475600",
    "end": "477580"
  },
  {
    "text": "with a validation error if you remember",
    "start": "477580",
    "end": "479500"
  },
  {
    "text": "earlier we used exclamation points to",
    "start": "479500",
    "end": "481450"
  },
  {
    "text": "only return valid types if that user",
    "start": "481450",
    "end": "483580"
  },
  {
    "text": "doesn't exist we need to return a",
    "start": "483580",
    "end": "485169"
  },
  {
    "text": "validation error instead okay just a",
    "start": "485169",
    "end": "487930"
  },
  {
    "text": "couple of lines of code left",
    "start": "487930",
    "end": "489250"
  },
  {
    "text": "we just need to combine these two pieces",
    "start": "489250",
    "end": "491200"
  },
  {
    "text": "together by passing them to an Apollo",
    "start": "491200",
    "end": "493210"
  },
  {
    "text": "server instance the Apollo server feels",
    "start": "493210",
    "end": "495460"
  },
  {
    "text": "just like an Express Jas server we just",
    "start": "495460",
    "end": "497740"
  },
  {
    "text": "call listen on it and we're good to go",
    "start": "497740",
    "end": "499210"
  },
  {
    "text": "all you need to do at this point is",
    "start": "499210",
    "end": "501190"
  },
  {
    "text": "compile your typescript code which you",
    "start": "501190",
    "end": "502750"
  },
  {
    "text": "can do with the TSC command or there's a",
    "start": "502750",
    "end": "504760"
  },
  {
    "text": "command in the main repo when you run",
    "start": "504760",
    "end": "506800"
  },
  {
    "text": "the script you can pull up localhost and",
    "start": "506800",
    "end": "508450"
  },
  {
    "text": "get the playground to start sending",
    "start": "508450",
    "end": "509950"
  },
  {
    "text": "queries to your API but we're not just",
    "start": "509950",
    "end": "512409"
  },
  {
    "text": "going to stop here there's this really",
    "start": "512409",
    "end": "514060"
  },
  {
    "text": "cool thing called Apollo engine that can",
    "start": "514060",
    "end": "516490"
  },
  {
    "text": "handle things like caching and tracing",
    "start": "516490",
    "end": "518320"
  },
  {
    "text": "and it does it all in a really nice UI",
    "start": "518320",
    "end": "520349"
  },
  {
    "text": "you'll first need to register for an",
    "start": "520349",
    "end": "522610"
  },
  {
    "text": "Apollo Engine API key then all you need",
    "start": "522610",
    "end": "524800"
  },
  {
    "text": "to do is add it to your Apollo server",
    "start": "524800",
    "end": "526660"
  },
  {
    "text": "config and you're good to go",
    "start": "526660",
    "end": "529180"
  },
  {
    "text": "this gives you access to a dashboard",
    "start": "529180",
    "end": "531370"
  },
  {
    "text": "where you can monitor all the queries to",
    "start": "531370",
    "end": "533020"
  },
  {
    "text": "see the exact latency of each one and",
    "start": "533020",
    "end": "534820"
  },
  {
    "text": "also inspect errors in real time and",
    "start": "534820",
    "end": "537310"
  },
  {
    "text": "let's also go ahead and deploy our app",
    "start": "537310",
    "end": "539050"
  },
  {
    "text": "to a production server assuming you have",
    "start": "539050",
    "end": "541720"
  },
  {
    "text": "the Google Cloud command-line tools",
    "start": "541720",
    "end": "543190"
  },
  {
    "text": "installed all you have to do is create",
    "start": "543190",
    "end": "544660"
  },
  {
    "text": "an app damo file with the nodejs 8",
    "start": "544660",
    "end": "547330"
  },
  {
    "text": "runtime in it run g-cloud app deploy and",
    "start": "547330",
    "end": "550660"
  },
  {
    "text": "your graph QL api is now available for",
    "start": "550660",
    "end": "553029"
  },
  {
    "text": "the world to use I'm gonna go ahead and",
    "start": "553029",
    "end": "554890"
  },
  {
    "text": "wrap things up there if this video",
    "start": "554890",
    "end": "556360"
  },
  {
    "text": "helped you please like and subscribe and",
    "start": "556360",
    "end": "558100"
  },
  {
    "text": "stay tuned for the second installment",
    "start": "558100",
    "end": "559600"
  },
  {
    "text": "where we build out the front-end and",
    "start": "559600",
    "end": "561190"
  },
  {
    "text": "angular with the Apolo angular library",
    "start": "561190",
    "end": "563380"
  },
  {
    "text": "and if you want to take things to the",
    "start": "563380",
    "end": "564820"
  },
  {
    "text": "next level consider becoming a pro",
    "start": "564820",
    "end": "566410"
  },
  {
    "text": "member at angular firebase com thanks",
    "start": "566410",
    "end": "568930"
  },
  {
    "text": "for watching and I'll talk to you soon",
    "start": "568930",
    "end": "572520"
  }
]