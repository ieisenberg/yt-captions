[
  {
    "text": "lisp a dynamic general purpose",
    "start": "240",
    "end": "2360"
  },
  {
    "text": "programming language famous for",
    "start": "2360",
    "end": "3879"
  },
  {
    "text": "pioneering many of the programming",
    "start": "3879",
    "end": "5359"
  },
  {
    "text": "techniques we take for granted today it",
    "start": "5359",
    "end": "7439"
  },
  {
    "text": "was created in 1958 by John McCarthy at",
    "start": "7439",
    "end": "10000"
  },
  {
    "text": "MIT making it the second highlevel",
    "start": "10000",
    "end": "12120"
  },
  {
    "text": "language ever after Fortran the year",
    "start": "12120",
    "end": "14000"
  },
  {
    "text": "before however it was the first",
    "start": "14000",
    "end": "15519"
  },
  {
    "text": "interpreted language that could be",
    "start": "15519",
    "end": "17039"
  },
  {
    "text": "executed step by step without a compiler",
    "start": "17039",
    "end": "19240"
  },
  {
    "text": "in addition it's responsible for a",
    "start": "19240",
    "end": "20880"
  },
  {
    "text": "variety of other language Innovations",
    "start": "20880",
    "end": "22920"
  },
  {
    "text": "like recursion Dynamic typing garbage",
    "start": "22920",
    "end": "25240"
  },
  {
    "text": "collection first class functions and",
    "start": "25240",
    "end": "27160"
  },
  {
    "text": "more its name stands for list processor",
    "start": "27160",
    "end": "29599"
  },
  {
    "text": "and since tactically it's known for its",
    "start": "29599",
    "end": "31320"
  },
  {
    "text": "prolific use of parentheses because at",
    "start": "31320",
    "end": "33440"
  },
  {
    "text": "its core almost everything is treated as",
    "start": "33440",
    "end": "35280"
  },
  {
    "text": "a linked list data structure each",
    "start": "35280",
    "end": "37239"
  },
  {
    "text": "element in the list is called aons or",
    "start": "37239",
    "end": "39360"
  },
  {
    "text": "Constructor which contains two pointers",
    "start": "39360",
    "end": "41719"
  },
  {
    "text": "the car points to the actual data while",
    "start": "41719",
    "end": "43879"
  },
  {
    "text": "the CDR points to the next element in",
    "start": "43879",
    "end": "46000"
  },
  {
    "text": "the list developers write s Expressions",
    "start": "46000",
    "end": "48360"
  },
  {
    "text": "which might start with a function or",
    "start": "48360",
    "end": "49920"
  },
  {
    "text": "operator followed by one or more",
    "start": "49920",
    "end": "51600"
  },
  {
    "text": "arguments this gives rise to a powerful",
    "start": "51600",
    "end": "53640"
  },
  {
    "text": "macros feature where developers can",
    "start": "53640",
    "end": "55440"
  },
  {
    "text": "extend the syntax of list and create",
    "start": "55440",
    "end": "57239"
  },
  {
    "text": "domain specific languages it's like a",
    "start": "57239",
    "end": "59160"
  },
  {
    "text": "programmable programming language common",
    "start": "59160",
    "end": "61160"
  },
  {
    "text": "lisp is still in use today but it's",
    "start": "61160",
    "end": "63039"
  },
  {
    "text": "directly inspired many other languages",
    "start": "63039",
    "end": "65080"
  },
  {
    "text": "like scheme closure Ruby and JavaScript",
    "start": "65080",
    "end": "67680"
  },
  {
    "text": "just to name a few to get started",
    "start": "67680",
    "end": "69360"
  },
  {
    "text": "install common Lis on your machine then",
    "start": "69360",
    "end": "71280"
  },
  {
    "text": "create a file ending in LSP first create",
    "start": "71280",
    "end": "74159"
  },
  {
    "text": "an S expression which can represent an",
    "start": "74159",
    "end": "76159"
  },
  {
    "text": "atom like a number or symbol or a list",
    "start": "76159",
    "end": "78840"
  },
  {
    "text": "of multiple values to print to the",
    "start": "78840",
    "end": "80479"
  },
  {
    "text": "standard output we can reference the",
    "start": "80479",
    "end": "82240"
  },
  {
    "text": "format function followed by T for true",
    "start": "82240",
    "end": "84759"
  },
  {
    "text": "then the string we want to print out and",
    "start": "84759",
    "end": "86360"
  },
  {
    "text": "it contains a ton of built-in functions",
    "start": "86360",
    "end": "88040"
  },
  {
    "text": "like print to simplify things Define a",
    "start": "88040",
    "end": "90240"
  },
  {
    "text": "local variable with a let keyword and it",
    "start": "90240",
    "end": "92000"
  },
  {
    "text": "will be lexically scoped to the context",
    "start": "92000",
    "end": "93799"
  },
  {
    "text": "in which it's defined however you can",
    "start": "93799",
    "end": "95560"
  },
  {
    "text": "also define global variables with def",
    "start": "95560",
    "end": "97560"
  },
  {
    "text": "parameter or def VAR which are",
    "start": "97560",
    "end": "99360"
  },
  {
    "text": "dynamically scoped and can be used",
    "start": "99360",
    "end": "100960"
  },
  {
    "text": "anywhere all these variables can be",
    "start": "100960",
    "end": "102479"
  },
  {
    "text": "modified however you can also create",
    "start": "102479",
    "end": "104320"
  },
  {
    "text": "immutable data with def constant lisp is",
    "start": "104320",
    "end": "106759"
  },
  {
    "text": "multi Paradigm but most wellknown as a",
    "start": "106759",
    "end": "108880"
  },
  {
    "text": "functional language use the def unkey",
    "start": "108880",
    "end": "110799"
  },
  {
    "text": "word which is definitely the way you",
    "start": "110799",
    "end": "112159"
  },
  {
    "text": "pronounce it to define a function it can",
    "start": "112159",
    "end": "114159"
  },
  {
    "text": "take one or more parameters and is",
    "start": "114159",
    "end": "115840"
  },
  {
    "text": "optionally followed by a string to",
    "start": "115840",
    "end": "117360"
  },
  {
    "text": "Define its purpose we can use the star",
    "start": "117360",
    "end": "119200"
  },
  {
    "text": "operator to multiply Pi by the input",
    "start": "119200",
    "end": "121560"
  },
  {
    "text": "radius and the last expression in the",
    "start": "121560",
    "end": "123159"
  },
  {
    "text": "function body will automatically be used",
    "start": "123159",
    "end": "125159"
  },
  {
    "text": "as the return value it was the first",
    "start": "125159",
    "end": "126880"
  },
  {
    "text": "language to support higher order",
    "start": "126880",
    "end": "128360"
  },
  {
    "text": "functions where we might do something",
    "start": "128360",
    "end": "129840"
  },
  {
    "text": "like create a list then use another",
    "start": "129840",
    "end": "131879"
  },
  {
    "text": "function called mapar to Loop over that",
    "start": "131879",
    "end": "134040"
  },
  {
    "text": "list and call the function we just",
    "start": "134040",
    "end": "135480"
  },
  {
    "text": "defined on every single element inside",
    "start": "135480",
    "end": "137360"
  },
  {
    "text": "of it it also includes a built-in macro",
    "start": "137360",
    "end": "139319"
  },
  {
    "text": "called Loop for general purpose",
    "start": "139319",
    "end": "140840"
  },
  {
    "text": "iteration what it doesn't have though is",
    "start": "140840",
    "end": "142800"
  },
  {
    "text": "a while loop not a problem though if you",
    "start": "142800",
    "end": "144680"
  },
  {
    "text": "want to create one just write your own",
    "start": "144680",
    "end": "146440"
  },
  {
    "text": "macro to extend the language now run",
    "start": "146440",
    "end": "148440"
  },
  {
    "text": "your code with the clisp inter this has",
    "start": "148440",
    "end": "150480"
  },
  {
    "text": "been lisp in 100 seconds hit the like",
    "start": "150480",
    "end": "152680"
  },
  {
    "text": "button if you want to see more short",
    "start": "152680",
    "end": "153800"
  },
  {
    "text": "videos like this thanks for watching and",
    "start": "153800",
    "end": "155760"
  },
  {
    "text": "I will see you in the next one",
    "start": "155760",
    "end": "158150"
  },
  {
    "text": "[Music]",
    "start": "158150",
    "end": "160308"
  }
]