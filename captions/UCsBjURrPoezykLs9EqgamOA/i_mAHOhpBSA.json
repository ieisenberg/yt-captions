[
  {
    "text": "drizzle om a lightweight set of tools",
    "start": "199",
    "end": "2879"
  },
  {
    "text": "that makes type safe object relational",
    "start": "2879",
    "end": "4759"
  },
  {
    "text": "mapping with your favorite relational",
    "start": "4759",
    "end": "6240"
  },
  {
    "text": "database fun again most apps in the real",
    "start": "6240",
    "end": "8400"
  },
  {
    "text": "world rely on databases like MySQL",
    "start": "8400",
    "end": "11040"
  },
  {
    "text": "postgressql and SQL light to store their",
    "start": "11040",
    "end": "13799"
  },
  {
    "text": "critical user data but working with raw",
    "start": "13799",
    "end": "15719"
  },
  {
    "text": "SQL can be painful and even",
    "start": "15719",
    "end": "17439"
  },
  {
    "text": "life-threatening when you screw up over",
    "start": "17439",
    "end": "19039"
  },
  {
    "text": "the decades hundreds of libraries have",
    "start": "19039",
    "end": "20680"
  },
  {
    "text": "been built to abstract away SQL code to",
    "start": "20680",
    "end": "23199"
  },
  {
    "text": "hide its complexity inside your favorite",
    "start": "23199",
    "end": "25439"
  },
  {
    "text": "objectoriented programming language this",
    "start": "25439",
    "end": "27599"
  },
  {
    "text": "technique is called object relational",
    "start": "27599",
    "end": "29320"
  },
  {
    "text": "mapping it's great and null but can",
    "start": "29320",
    "end": "31000"
  },
  {
    "text": "often bring unnecessary performance",
    "start": "31000",
    "end": "32800"
  },
  {
    "text": "overhead and cause leaky abstractions",
    "start": "32800",
    "end": "35120"
  },
  {
    "text": "because the developers have no idea how",
    "start": "35120",
    "end": "36920"
  },
  {
    "text": "their underlying SQL code actually works",
    "start": "36920",
    "end": "39160"
  },
  {
    "text": "drizzle is an omm that takes the",
    "start": "39160",
    "end": "41000"
  },
  {
    "text": "opposite approach it provides an API and",
    "start": "41000",
    "end": "42920"
  },
  {
    "text": "typescript that closely matches the",
    "start": "42920",
    "end": "44840"
  },
  {
    "text": "native underly SQL code this gives you",
    "start": "44840",
    "end": "47120"
  },
  {
    "text": "the benefits of type safety and",
    "start": "47120",
    "end": "48640"
  },
  {
    "text": "intellisense without all the crazy",
    "start": "48640",
    "end": "50320"
  },
  {
    "text": "abstractions but how is that possible",
    "start": "50320",
    "end": "52280"
  },
  {
    "text": "when every database is different instead",
    "start": "52280",
    "end": "54079"
  },
  {
    "text": "of trying to jam everything into a",
    "start": "54079",
    "end": "55600"
  },
  {
    "text": "single API drizzle provides dedicated",
    "start": "55600",
    "end": "57719"
  },
  {
    "text": "adapters for each one of them along with",
    "start": "57719",
    "end": "59480"
  },
  {
    "text": "dedicated tools for popular Cloud hosts",
    "start": "59480",
    "end": "61800"
  },
  {
    "text": "like RDS and neon but if this code looks",
    "start": "61800",
    "end": "64040"
  },
  {
    "text": "too raw and uncensored for you it also",
    "start": "64040",
    "end": "66159"
  },
  {
    "text": "provides an optional Prisma likee query",
    "start": "66159",
    "end": "68119"
  },
  {
    "text": "API that keeps your data fetching and",
    "start": "68119",
    "end": "70240"
  },
  {
    "text": "join code concise and readable in",
    "start": "70240",
    "end": "72080"
  },
  {
    "text": "addition it provides an optional CLI for",
    "start": "72080",
    "end": "74400"
  },
  {
    "text": "handling database migrations called",
    "start": "74400",
    "end": "76159"
  },
  {
    "text": "drizzle kit but the cherry on top is",
    "start": "76159",
    "end": "78080"
  },
  {
    "text": "drizzle Studio A guey you can run",
    "start": "78080",
    "end": "80000"
  },
  {
    "text": "locally to manage your data to get",
    "start": "80000",
    "end": "81880"
  },
  {
    "text": "started you'll first need a relational",
    "start": "81880",
    "end": "83600"
  },
  {
    "text": "database I'm going with neon my go-to",
    "start": "83600",
    "end": "85799"
  },
  {
    "text": "pick for a postgress database and the",
    "start": "85799",
    "end": "87640"
  },
  {
    "text": "sponsor of today's video neon is awesome",
    "start": "87640",
    "end": "89920"
  },
  {
    "text": "because it's easy to use there's a",
    "start": "89920",
    "end": "91400"
  },
  {
    "text": "generous free tier and it even has a",
    "start": "91400",
    "end": "93320"
  },
  {
    "text": "fast serverless driver with a drizzle",
    "start": "93320",
    "end": "95240"
  },
  {
    "text": "adapter you don't even need to install",
    "start": "95240",
    "end": "96840"
  },
  {
    "text": "postgress locally just create a new",
    "start": "96840",
    "end": "98640"
  },
  {
    "text": "database on the dashboard both drizzle",
    "start": "98640",
    "end": "100520"
  },
  {
    "text": "and neon are designed to run on any",
    "start": "100520",
    "end": "102240"
  },
  {
    "text": "JavaScript runtime like node.js bun and",
    "start": "102240",
    "end": "104680"
  },
  {
    "text": "Dino as well as Edge run times like",
    "start": "104680",
    "end": "106520"
  },
  {
    "text": "cloudflare workers now install drizzle",
    "start": "106520",
    "end": "108640"
  },
  {
    "text": "and your database driver then connect to",
    "start": "108640",
    "end": "110360"
  },
  {
    "text": "the database in your typescript code we",
    "start": "110360",
    "end": "112079"
  },
  {
    "text": "could start making queries now but we",
    "start": "112079",
    "end": "113600"
  },
  {
    "text": "don't have any data yet first we need a",
    "start": "113600",
    "end": "115439"
  },
  {
    "text": "schema create a schema file then Define",
    "start": "115439",
    "end": "117520"
  },
  {
    "text": "tables with the PG table function each",
    "start": "117520",
    "end": "119640"
  },
  {
    "text": "table table has a name followed by",
    "start": "119640",
    "end": "121320"
  },
  {
    "text": "columns defined in this JavaScript",
    "start": "121320",
    "end": "123200"
  },
  {
    "text": "object columns are given constraints",
    "start": "123200",
    "end": "124840"
  },
  {
    "text": "with JavaScript functions that match",
    "start": "124840",
    "end": "126680"
  },
  {
    "text": "their SQL equivalents once a table is",
    "start": "126680",
    "end": "128759"
  },
  {
    "text": "defined we can reference it in other",
    "start": "128759",
    "end": "130759"
  },
  {
    "text": "tables to create relationships with",
    "start": "130759",
    "end": "132800"
  },
  {
    "text": "foreign keys and optionally we can use",
    "start": "132800",
    "end": "134720"
  },
  {
    "text": "the relations function to simplify",
    "start": "134720",
    "end": "136480"
  },
  {
    "text": "relational queries and Joints now let's",
    "start": "136480",
    "end": "138360"
  },
  {
    "text": "convert this typescript code into",
    "start": "138360",
    "end": "139959"
  },
  {
    "text": "postgressql by running the drizzle kit",
    "start": "139959",
    "end": "142080"
  },
  {
    "text": "generate command that creates a",
    "start": "142080",
    "end": "143599"
  },
  {
    "text": "directory with our migration files which",
    "start": "143599",
    "end": "145519"
  },
  {
    "text": "we can then apply to Neon with this",
    "start": "145519",
    "end": "147080"
  },
  {
    "text": "migrate function and now we can use",
    "start": "147080",
    "end": "148640"
  },
  {
    "text": "drizzle SQL like a to insert data into",
    "start": "148640",
    "end": "151319"
  },
  {
    "text": "the database and because the schema is",
    "start": "151319",
    "end": "153239"
  },
  {
    "text": "strongly typed it's impossible to write",
    "start": "153239",
    "end": "155040"
  },
  {
    "text": "incorrect queries in addition because we",
    "start": "155040",
    "end": "157239"
  },
  {
    "text": "also created a relation in our schema we",
    "start": "157239",
    "end": "159159"
  },
  {
    "text": "can use the query API to fetch records",
    "start": "159159",
    "end": "161360"
  },
  {
    "text": "based on one to one one to many or many",
    "start": "161360",
    "end": "163599"
  },
  {
    "text": "to many relationships this has been",
    "start": "163599",
    "end": "165280"
  },
  {
    "text": "drizzle in 100 seconds shout out to Neon",
    "start": "165280",
    "end": "167720"
  },
  {
    "text": "for making this video possible and check",
    "start": "167720",
    "end": "169599"
  },
  {
    "text": "out their drizzle tutorial to learn more",
    "start": "169599",
    "end": "171440"
  },
  {
    "text": "thanks for watching and I will see you",
    "start": "171440",
    "end": "173040"
  },
  {
    "text": "in the next one",
    "start": "173040",
    "end": "175920"
  }
]