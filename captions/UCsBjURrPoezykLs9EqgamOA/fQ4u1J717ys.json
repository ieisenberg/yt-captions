[
  {
    "start": "0",
    "end": "57000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "5360"
  },
  {
    "text": "one of the most frustrating things about",
    "start": "6259",
    "end": "8280"
  },
  {
    "text": "firestore is modeling your data as a",
    "start": "8280",
    "end": "10320"
  },
  {
    "text": "hierarchy of subcollections because even",
    "start": "10320",
    "end": "12840"
  },
  {
    "text": "though this is a very intuitive data",
    "start": "12840",
    "end": "14219"
  },
  {
    "text": "model that represents relationships very",
    "start": "14219",
    "end": "15990"
  },
  {
    "text": "well it's not very practical because you",
    "start": "15990",
    "end": "17970"
  },
  {
    "text": "can't join these collections together to",
    "start": "17970",
    "end": "19619"
  },
  {
    "text": "query them at the same time well at",
    "start": "19619",
    "end": "21480"
  },
  {
    "text": "least that was the case until now",
    "start": "21480",
    "end": "23100"
  },
  {
    "text": "firebase just recently released a new",
    "start": "23100",
    "end": "24960"
  },
  {
    "text": "feature called collection group queries",
    "start": "24960",
    "end": "26760"
  },
  {
    "text": "in today's video you'll learn how this",
    "start": "26760",
    "end": "28439"
  },
  {
    "text": "new feature makes working with",
    "start": "28439",
    "end": "29550"
  },
  {
    "text": "subcollections a lot more intuitive and",
    "start": "29550",
    "end": "31470"
  },
  {
    "text": "we'll put this new feature to use to",
    "start": "31470",
    "end": "33180"
  },
  {
    "text": "make a deeply nested threaded comments",
    "start": "33180",
    "end": "34950"
  },
  {
    "text": "feature with angular if you're new here",
    "start": "34950",
    "end": "36630"
  },
  {
    "text": "like and subscribe and you can grab the",
    "start": "36630",
    "end": "38309"
  },
  {
    "text": "full source code from fire ship IO and",
    "start": "38309",
    "end": "40200"
  },
  {
    "text": "if you're building a product with fire",
    "start": "40200",
    "end": "41460"
  },
  {
    "text": "store consider becoming a pro member to",
    "start": "41460",
    "end": "43379"
  },
  {
    "text": "get access to the data modeling course",
    "start": "43379",
    "end": "45140"
  },
  {
    "text": "let's first take a look at the problem",
    "start": "45140",
    "end": "47309"
  },
  {
    "text": "that we can now solve with a collection",
    "start": "47309",
    "end": "48809"
  },
  {
    "text": "group query let's consider the very",
    "start": "48809",
    "end": "50399"
  },
  {
    "text": "typical data model of blog post comments",
    "start": "50399",
    "end": "52440"
  },
  {
    "text": "users can have many comments post",
    "start": "52440",
    "end": "54180"
  },
  {
    "text": "connect many comments and a comment",
    "start": "54180",
    "end": "55680"
  },
  {
    "text": "belongs to a post and a user will have",
    "start": "55680",
    "end": "58170"
  },
  {
    "start": "57000",
    "end": "100000"
  },
  {
    "text": "at least two screens in the app that we",
    "start": "58170",
    "end": "59760"
  },
  {
    "text": "want to fill with data most commonly",
    "start": "59760",
    "end": "61770"
  },
  {
    "text": "we'll want to show all of the comments",
    "start": "61770",
    "end": "63059"
  },
  {
    "text": "associated to a given post but we might",
    "start": "63059",
    "end": "65430"
  },
  {
    "text": "also have something like a user activity",
    "start": "65430",
    "end": "67170"
  },
  {
    "text": "feed that queries all the most recent",
    "start": "67170",
    "end": "68880"
  },
  {
    "text": "comments from that user read it would be",
    "start": "68880",
    "end": "70740"
  },
  {
    "text": "a perfect example of this and reddit",
    "start": "70740",
    "end": "72630"
  },
  {
    "text": "also allows users to respond to comments",
    "start": "72630",
    "end": "74549"
  },
  {
    "text": "so you can get these deeply nested",
    "start": "74549",
    "end": "76140"
  },
  {
    "text": "threads of comments which is another",
    "start": "76140",
    "end": "77880"
  },
  {
    "text": "problem that is much easier to solve",
    "start": "77880",
    "end": "79619"
  },
  {
    "text": "with collection group queries now if",
    "start": "79619",
    "end": "81780"
  },
  {
    "text": "you've been using firestore for a while",
    "start": "81780",
    "end": "83070"
  },
  {
    "text": "the most likely way that you modeled a",
    "start": "83070",
    "end": "84689"
  },
  {
    "text": "relationship like this was to create a",
    "start": "84689",
    "end": "86460"
  },
  {
    "text": "root collection of comments and then",
    "start": "86460",
    "end": "88110"
  },
  {
    "text": "save a post ID as well as a user ID on",
    "start": "88110",
    "end": "90600"
  },
  {
    "text": "each individual comment the reason you",
    "start": "90600",
    "end": "92490"
  },
  {
    "text": "wouldn't make comments a sub collection",
    "start": "92490",
    "end": "93720"
  },
  {
    "text": "of a post is because you then wouldn't",
    "start": "93720",
    "end": "95430"
  },
  {
    "text": "be able to query all of the comments",
    "start": "95430",
    "end": "97079"
  },
  {
    "text": "created by an individual user and that's",
    "start": "97079",
    "end": "99390"
  },
  {
    "text": "the exact problem that collection group",
    "start": "99390",
    "end": "100860"
  },
  {
    "start": "100000",
    "end": "247000"
  },
  {
    "text": "solves because it allows you to group",
    "start": "100860",
    "end": "102630"
  },
  {
    "text": "all the collections in the database",
    "start": "102630",
    "end": "104159"
  },
  {
    "text": "based on a shared name or ID and it",
    "start": "104159",
    "end": "106649"
  },
  {
    "text": "doesn't matter how deeply nested these",
    "start": "106649",
    "end": "108119"
  },
  {
    "text": "collections are they can be nested up to",
    "start": "108119",
    "end": "110009"
  },
  {
    "text": "a hundred levels deep and still be",
    "start": "110009",
    "end": "111570"
  },
  {
    "text": "included in a collection group query and",
    "start": "111570",
    "end": "113549"
  },
  {
    "text": "that's extremely useful when you have a",
    "start": "113549",
    "end": "115170"
  },
  {
    "text": "complex hierarchy of data like you would",
    "start": "115170",
    "end": "117180"
  },
  {
    "text": "with reddit comments in this example",
    "start": "117180",
    "end": "119159"
  },
  {
    "text": "here we have a collection of posts and",
    "start": "119159",
    "end": "120930"
  },
  {
    "text": "then you can see an individual demo post",
    "start": "120930",
    "end": "122700"
  },
  {
    "text": "has a sub collection of comments the",
    "start": "122700",
    "end": "124560"
  },
  {
    "text": "comment document itself has a user ID",
    "start": "124560",
    "end": "126509"
  },
  {
    "text": "and the comment text now in order to",
    "start": "126509",
    "end": "128819"
  },
  {
    "text": "create a reddit style hierarchy we can",
    "start": "128819",
    "end": "130860"
  },
  {
    "text": "also give each individual comment its",
    "start": "130860",
    "end": "132540"
  },
  {
    "text": "own sub collection of calm",
    "start": "132540",
    "end": "133860"
  },
  {
    "text": "the only important part for the query is",
    "start": "133860",
    "end": "135960"
  },
  {
    "text": "that the subcollection shares the same",
    "start": "135960",
    "end": "137460"
  },
  {
    "text": "name and we can just continue to follow",
    "start": "137460",
    "end": "139170"
  },
  {
    "text": "this pattern until we hit fire stores",
    "start": "139170",
    "end": "140670"
  },
  {
    "text": "limit of 100 nested sub collections so",
    "start": "140670",
    "end": "143850"
  },
  {
    "text": "this data model preserves the hierarchy",
    "start": "143850",
    "end": "145590"
  },
  {
    "text": "of comments and replies but now let's",
    "start": "145590",
    "end": "147750"
  },
  {
    "text": "take a look at how we can group these",
    "start": "147750",
    "end": "148800"
  },
  {
    "text": "collections together to query them based",
    "start": "148800",
    "end": "150570"
  },
  {
    "text": "on the user ID and also some of the",
    "start": "150570",
    "end": "152760"
  },
  {
    "text": "caveats that you'll run into along the",
    "start": "152760",
    "end": "154260"
  },
  {
    "text": "way first let's take a look at some",
    "start": "154260",
    "end": "156030"
  },
  {
    "text": "vanilla JavaScript using the firebase",
    "start": "156030",
    "end": "157830"
  },
  {
    "text": "SDK version 6.0 or greater to join all",
    "start": "157830",
    "end": "161160"
  },
  {
    "text": "of these sub collections together we",
    "start": "161160",
    "end": "162660"
  },
  {
    "text": "just called database collection group",
    "start": "162660",
    "end": "164070"
  },
  {
    "text": "with the name of the collections which",
    "start": "164070",
    "end": "166140"
  },
  {
    "text": "in this case is comments that's going to",
    "start": "166140",
    "end": "168540"
  },
  {
    "text": "find all of the comments collections",
    "start": "168540",
    "end": "170070"
  },
  {
    "text": "throughout the entire database and join",
    "start": "170070",
    "end": "171900"
  },
  {
    "text": "them together and then we can make",
    "start": "171900",
    "end": "173340"
  },
  {
    "text": "queries across them just like we would",
    "start": "173340",
    "end": "174930"
  },
  {
    "text": "with a normal collection for example we",
    "start": "174930",
    "end": "176880"
  },
  {
    "text": "can call where the user equals a certain",
    "start": "176880",
    "end": "178890"
  },
  {
    "text": "user ID to filter just by that user or",
    "start": "178890",
    "end": "181410"
  },
  {
    "text": "we might want to order by a created at",
    "start": "181410",
    "end": "183840"
  },
  {
    "text": "timestamp but if you try to actually run",
    "start": "183840",
    "end": "185700"
  },
  {
    "text": "this query in your own code the first",
    "start": "185700",
    "end": "187470"
  },
  {
    "text": "thing you'll see is this firebase error",
    "start": "187470",
    "end": "188970"
  },
  {
    "text": "missing or insufficient permissions",
    "start": "188970",
    "end": "190770"
  },
  {
    "text": "that's because there are some special",
    "start": "190770",
    "end": "192690"
  },
  {
    "text": "rules in place for collection group",
    "start": "192690",
    "end": "194220"
  },
  {
    "text": "queries first of all at the very top of",
    "start": "194220",
    "end": "196709"
  },
  {
    "text": "my rules you'll notice that I'm enabling",
    "start": "196709",
    "end": "198239"
  },
  {
    "text": "the rules version two in this example we",
    "start": "198239",
    "end": "200790"
  },
  {
    "text": "just want to go ahead and make all the",
    "start": "200790",
    "end": "201989"
  },
  {
    "text": "comments readable and writeable so we'll",
    "start": "201989",
    "end": "203940"
  },
  {
    "text": "say path equals star star slash comments",
    "start": "203940",
    "end": "206790"
  },
  {
    "text": "and that will allow access to any",
    "start": "206790",
    "end": "208650"
  },
  {
    "text": "document in a comment sub collection but",
    "start": "208650",
    "end": "210780"
  },
  {
    "text": "in a real app you would most likely lock",
    "start": "210780",
    "end": "212430"
  },
  {
    "text": "down write access for the logged in user",
    "start": "212430",
    "end": "214140"
  },
  {
    "text": "with a matching user ID so that's going",
    "start": "214140",
    "end": "216900"
  },
  {
    "text": "to take care of the permission error but",
    "start": "216900",
    "end": "218370"
  },
  {
    "text": "now we're going to see an error that",
    "start": "218370",
    "end": "219480"
  },
  {
    "text": "says that we need an index for this",
    "start": "219480",
    "end": "221550"
  },
  {
    "text": "query that will also give you a link",
    "start": "221550",
    "end": "223290"
  },
  {
    "text": "directly to the firebase console to",
    "start": "223290",
    "end": "224940"
  },
  {
    "text": "create the index so go ahead and click",
    "start": "224940",
    "end": "226650"
  },
  {
    "text": "on that unlike a regular collection",
    "start": "226650",
    "end": "228420"
  },
  {
    "text": "query you'll need an index for every",
    "start": "228420",
    "end": "230340"
  },
  {
    "text": "collection group that is filtered by a",
    "start": "230340",
    "end": "231930"
  },
  {
    "text": "certain property that'll take a minute",
    "start": "231930",
    "end": "233970"
  },
  {
    "text": "or two to set up but once it's done you",
    "start": "233970",
    "end": "235560"
  },
  {
    "text": "should be able to make this query",
    "start": "235560",
    "end": "236760"
  },
  {
    "text": "successfully now that you know how",
    "start": "236760",
    "end": "238709"
  },
  {
    "text": "collection group queries work I want to",
    "start": "238709",
    "end": "240420"
  },
  {
    "text": "show you how you can actually make use",
    "start": "240420",
    "end": "241769"
  },
  {
    "text": "of these deeply nested data structures",
    "start": "241769",
    "end": "243420"
  },
  {
    "text": "in a real-world JavaScript application",
    "start": "243420",
    "end": "245370"
  },
  {
    "text": "will be using angular and at the time of",
    "start": "245370",
    "end": "247830"
  },
  {
    "text": "this video you'll need to install",
    "start": "247830",
    "end": "248910"
  },
  {
    "text": "angular fire using the next tag and what",
    "start": "248910",
    "end": "251910"
  },
  {
    "text": "we're building is just the front-end",
    "start": "251910",
    "end": "253350"
  },
  {
    "text": "application that can query the data that",
    "start": "253350",
    "end": "255390"
  },
  {
    "text": "I showed you earlier in the data model",
    "start": "255390",
    "end": "257070"
  },
  {
    "text": "first we query the top level sub",
    "start": "257070",
    "end": "259169"
  },
  {
    "text": "collection associated with the post then",
    "start": "259169",
    "end": "261359"
  },
  {
    "text": "from there the user can lazily load",
    "start": "261359",
    "end": "263160"
  },
  {
    "text": "additional comments or replies to an",
    "start": "263160",
    "end": "265020"
  },
  {
    "text": "individual comment by clicking this more",
    "start": "265020",
    "end": "266850"
  },
  {
    "text": "button",
    "start": "266850",
    "end": "267330"
  },
  {
    "text": "and another nice thing about this data",
    "start": "267330",
    "end": "269159"
  },
  {
    "text": "model is that we can query the data very",
    "start": "269159",
    "end": "270810"
  },
  {
    "text": "efficiently and as we'll see we can do",
    "start": "270810",
    "end": "272729"
  },
  {
    "text": "so in a way that doesn't require any",
    "start": "272729",
    "end": "274199"
  },
  {
    "text": "complex query code and will also create",
    "start": "274199",
    "end": "276509"
  },
  {
    "text": "a second view that uses the collection",
    "start": "276509",
    "end": "278159"
  },
  {
    "text": "group query to flatten all of this data",
    "start": "278159",
    "end": "279780"
  },
  {
    "text": "out for a single user the first thing",
    "start": "279780",
    "end": "282300"
  },
  {
    "text": "we'll do is go into this post component",
    "start": "282300",
    "end": "283889"
  },
  {
    "text": "which is responsible for displaying the",
    "start": "283889",
    "end": "285419"
  },
  {
    "text": "post itself as well as the sub",
    "start": "285419",
    "end": "287280"
  },
  {
    "text": "collection of comments nested under it",
    "start": "287280",
    "end": "288780"
  },
  {
    "text": "now to get the first level of comments",
    "start": "288780",
    "end": "291300"
  },
  {
    "text": "that are nested under a post all we have",
    "start": "291300",
    "end": "293189"
  },
  {
    "text": "to do is make a reference to that sub",
    "start": "293189",
    "end": "294900"
  },
  {
    "text": "collection in the database and then",
    "start": "294900",
    "end": "296580"
  },
  {
    "text": "we'll make sure to call snapshot changes",
    "start": "296580",
    "end": "298050"
  },
  {
    "text": "here as opposed to value changes and the",
    "start": "298050",
    "end": "300810"
  },
  {
    "text": "reason we call snapshot changes here is",
    "start": "300810",
    "end": "302460"
  },
  {
    "text": "because it contains additional data",
    "start": "302460",
    "end": "303960"
  },
  {
    "text": "about the document itself like the ID",
    "start": "303960",
    "end": "305849"
  },
  {
    "text": "but more importantly the full path to",
    "start": "305849",
    "end": "307889"
  },
  {
    "text": "the document in the database now in the",
    "start": "307889",
    "end": "310800"
  },
  {
    "text": "component HTML we can go ahead and loop",
    "start": "310800",
    "end": "313110"
  },
  {
    "text": "over that observable of snapshots and",
    "start": "313110",
    "end": "315060"
  },
  {
    "text": "then we'll pass each individual snapshot",
    "start": "315060",
    "end": "317129"
  },
  {
    "text": "into this app comic component which will",
    "start": "317129",
    "end": "319199"
  },
  {
    "text": "create in the next step setting up an ng",
    "start": "319199",
    "end": "321690"
  },
  {
    "text": "for loop with the async pipe will",
    "start": "321690",
    "end": "323400"
  },
  {
    "text": "automatically subscribe to that",
    "start": "323400",
    "end": "324539"
  },
  {
    "text": "observable to retrieve the items from",
    "start": "324539",
    "end": "326159"
  },
  {
    "text": "the database and then we'll handle all",
    "start": "326159",
    "end": "327840"
  },
  {
    "text": "the presentation logic in this child",
    "start": "327840",
    "end": "329550"
  },
  {
    "text": "comment component in the comic component",
    "start": "329550",
    "end": "332129"
  },
  {
    "text": "the first thing we'll do is set up the",
    "start": "332129",
    "end": "333330"
  },
  {
    "text": "input property so we can pass the",
    "start": "333330",
    "end": "335009"
  },
  {
    "text": "document snapshot from the parent to the",
    "start": "335009",
    "end": "336870"
  },
  {
    "text": "child the query document snapshot",
    "start": "336870",
    "end": "338879"
  },
  {
    "text": "contains all the data from that document",
    "start": "338879",
    "end": "340500"
  },
  {
    "text": "in the database but it also contains the",
    "start": "340500",
    "end": "342509"
  },
  {
    "text": "document ID and the full path to that",
    "start": "342509",
    "end": "344610"
  },
  {
    "text": "document in the database but each",
    "start": "344610",
    "end": "346589"
  },
  {
    "text": "individual comment might also contain",
    "start": "346589",
    "end": "348389"
  },
  {
    "text": "its own sub collection of comments which",
    "start": "348389",
    "end": "349979"
  },
  {
    "text": "will go ahead and call replies here as",
    "start": "349979",
    "end": "351509"
  },
  {
    "text": "the property on this component now we",
    "start": "351509",
    "end": "353699"
  },
  {
    "text": "can come down here to ng on an it to",
    "start": "353699",
    "end": "355440"
  },
  {
    "text": "define all these properties the idea and",
    "start": "355440",
    "end": "357569"
  },
  {
    "text": "the data just live directly on the",
    "start": "357569",
    "end": "359190"
  },
  {
    "text": "document snapshot we can get the full",
    "start": "359190",
    "end": "361199"
  },
  {
    "text": "path to the document as a string by",
    "start": "361199",
    "end": "363240"
  },
  {
    "text": "calling comment ref path we need this",
    "start": "363240",
    "end": "366089"
  },
  {
    "text": "full path to make a reference to the",
    "start": "366089",
    "end": "367830"
  },
  {
    "text": "subcollection",
    "start": "367830",
    "end": "368580"
  },
  {
    "text": "we can make that reference by calling",
    "start": "368580",
    "end": "370469"
  },
  {
    "text": "database collection then passing in the",
    "start": "370469",
    "end": "372360"
  },
  {
    "text": "path and appending comments to the end",
    "start": "372360",
    "end": "374129"
  },
  {
    "text": "of it that'll give us a reference to the",
    "start": "374129",
    "end": "376110"
  },
  {
    "text": "sub collection of comments nested under",
    "start": "376110",
    "end": "377669"
  },
  {
    "text": "this particular comment and we can use",
    "start": "377669",
    "end": "379650"
  },
  {
    "text": "snapshot changes to get the actual data",
    "start": "379650",
    "end": "381599"
  },
  {
    "text": "snapshots as an observable now the last",
    "start": "381599",
    "end": "384089"
  },
  {
    "text": "thing I'll do is add a method down here",
    "start": "384089",
    "end": "385319"
  },
  {
    "text": "that allows the user to flip the show",
    "start": "385319",
    "end": "387000"
  },
  {
    "text": "property to true and that will be fired",
    "start": "387000",
    "end": "388860"
  },
  {
    "text": "when the user clicks the show replies",
    "start": "388860",
    "end": "390509"
  },
  {
    "text": "button in the template I'm going to go",
    "start": "390509",
    "end": "392699"
  },
  {
    "text": "ahead and show the full path to the",
    "start": "392699",
    "end": "394169"
  },
  {
    "text": "document in the database as well as the",
    "start": "394169",
    "end": "395759"
  },
  {
    "text": "actual text of the comment then I'm",
    "start": "395759",
    "end": "397889"
  },
  {
    "text": "going to set up a div here with ng if so",
    "start": "397889",
    "end": "400080"
  },
  {
    "text": "this will not be rendered",
    "start": "400080",
    "end": "401160"
  },
  {
    "text": "unless that show property is true and",
    "start": "401160",
    "end": "402720"
  },
  {
    "text": "then inside that div I'm going to add",
    "start": "402720",
    "end": "404820"
  },
  {
    "text": "the app comment template which is the",
    "start": "404820",
    "end": "406650"
  },
  {
    "text": "same template that we're defining right",
    "start": "406650",
    "end": "408120"
  },
  {
    "text": "now so we're calling it recursively and",
    "start": "408120",
    "end": "410190"
  },
  {
    "text": "this works really well because the",
    "start": "410190",
    "end": "411810"
  },
  {
    "text": "observable won't be created or subscribe",
    "start": "411810",
    "end": "413730"
  },
  {
    "text": "to until the show property equals true",
    "start": "413730",
    "end": "415620"
  },
  {
    "text": "so that gives us a very easy way to lazy",
    "start": "415620",
    "end": "418020"
  },
  {
    "text": "load data on a deeply nested thread now",
    "start": "418020",
    "end": "420720"
  },
  {
    "text": "if you wanted to traverse the entire",
    "start": "420720",
    "end": "421800"
  },
  {
    "text": "tree of comments by default all you'd",
    "start": "421800",
    "end": "423840"
  },
  {
    "text": "have to do is set the show property to",
    "start": "423840",
    "end": "425190"
  },
  {
    "text": "true and it would fetch every single",
    "start": "425190",
    "end": "426930"
  },
  {
    "text": "comment nested under the starting point",
    "start": "426930",
    "end": "428640"
  },
  {
    "text": "and that's all it takes to access deeply",
    "start": "428640",
    "end": "430830"
  },
  {
    "text": "nested data like this so using a",
    "start": "430830",
    "end": "432450"
  },
  {
    "text": "recursive pattern like that can be very",
    "start": "432450",
    "end": "433860"
  },
  {
    "text": "powerful and very simple at the same",
    "start": "433860",
    "end": "435600"
  },
  {
    "text": "time and the great thing about a",
    "start": "435600",
    "end": "437400"
  },
  {
    "text": "collection group query is that it's now",
    "start": "437400",
    "end": "439050"
  },
  {
    "text": "practical to do this because we can also",
    "start": "439050",
    "end": "440640"
  },
  {
    "text": "make additional queries across this data",
    "start": "440640",
    "end": "442410"
  },
  {
    "text": "without having to worry about it being",
    "start": "442410",
    "end": "443820"
  },
  {
    "text": "deeply nested and that actually becomes",
    "start": "443820",
    "end": "445740"
  },
  {
    "text": "the easiest part of all because all we",
    "start": "445740",
    "end": "447270"
  },
  {
    "text": "have to do now is go into our user",
    "start": "447270",
    "end": "448710"
  },
  {
    "text": "comments component and we call a",
    "start": "448710",
    "end": "450180"
  },
  {
    "text": "database collection group point to the",
    "start": "450180",
    "end": "452220"
  },
  {
    "text": "comments collection name and then just",
    "start": "452220",
    "end": "454110"
  },
  {
    "text": "call snapshot changes with whatever",
    "start": "454110",
    "end": "455580"
  },
  {
    "text": "query logic that we want to apply there",
    "start": "455580",
    "end": "457290"
  },
  {
    "text": "and that will give us all the comments",
    "start": "457290",
    "end": "459270"
  },
  {
    "text": "for that user but without the hierarchy",
    "start": "459270",
    "end": "460740"
  },
  {
    "text": "structure so we get them flattened out",
    "start": "460740",
    "end": "462690"
  },
  {
    "text": "and just a regular array that we can",
    "start": "462690",
    "end": "464340"
  },
  {
    "text": "loop over over all the collection group",
    "start": "464340",
    "end": "466410"
  },
  {
    "text": "query is a very simple feature but one",
    "start": "466410",
    "end": "468270"
  },
  {
    "text": "that adds a ton of flexibility to data",
    "start": "468270",
    "end": "469950"
  },
  {
    "text": "modeling and fired store I wouldn't",
    "start": "469950",
    "end": "471870"
  },
  {
    "text": "recommend going and restructuring your",
    "start": "471870",
    "end": "473250"
  },
  {
    "text": "existing database but it is definitely a",
    "start": "473250",
    "end": "475140"
  },
  {
    "text": "feature you should consider going",
    "start": "475140",
    "end": "476190"
  },
  {
    "text": "forward I'm gonna go ahead and wrap",
    "start": "476190",
    "end": "477840"
  },
  {
    "text": "things up there if this video helped you",
    "start": "477840",
    "end": "479460"
  },
  {
    "text": "please like and subscribe and consider",
    "start": "479460",
    "end": "481140"
  },
  {
    "text": "becoming a pro member at fire ship IO",
    "start": "481140",
    "end": "483060"
  },
  {
    "text": "you'll get access to the full fire store",
    "start": "483060",
    "end": "485310"
  },
  {
    "text": "data modeling course as well as a bunch",
    "start": "485310",
    "end": "486900"
  },
  {
    "text": "of other exclusive content thanks for",
    "start": "486900",
    "end": "488790"
  },
  {
    "text": "watching and I will talk to you soon",
    "start": "488790",
    "end": "492320"
  },
  {
    "text": "[Music]",
    "start": "492320",
    "end": "500179"
  }
]