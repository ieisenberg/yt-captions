[
  {
    "start": "0",
    "end": "12000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "240"
  },
  {
    "text": "cassandra a wide column store nosql",
    "start": "240",
    "end": "2879"
  },
  {
    "text": "database famous for its ability to",
    "start": "2879",
    "end": "4720"
  },
  {
    "text": "distribute petabytes of data with",
    "start": "4720",
    "end": "6399"
  },
  {
    "text": "unmatched reliability and performance it",
    "start": "6399",
    "end": "8559"
  },
  {
    "text": "was created in 2008 by avinash lakshman",
    "start": "8559",
    "end": "11280"
  },
  {
    "text": "who was responsible for scaling",
    "start": "11280",
    "end": "12880"
  },
  {
    "start": "12000",
    "end": "68000"
  },
  {
    "text": "facebook's inbox search feature by 2010",
    "start": "12880",
    "end": "15280"
  },
  {
    "text": "it became a top-level apache project and",
    "start": "15280",
    "end": "17359"
  },
  {
    "text": "today is used at scale by big companies",
    "start": "17359",
    "end": "19199"
  },
  {
    "text": "like apple which manages a staggering",
    "start": "19199",
    "end": "21279"
  },
  {
    "text": "100 petabytes of data across hundreds of",
    "start": "21279",
    "end": "23519"
  },
  {
    "text": "thousands of server instances it's a",
    "start": "23519",
    "end": "25279"
  },
  {
    "text": "general purpose database with use cases",
    "start": "25279",
    "end": "27279"
  },
  {
    "text": "for e-commerce content management audit",
    "start": "27279",
    "end": "29439"
  },
  {
    "text": "logging and everything in between each",
    "start": "29439",
    "end": "31439"
  },
  {
    "text": "instance of cassandra is called a node",
    "start": "31439",
    "end": "33280"
  },
  {
    "text": "and typically stores about two terabytes",
    "start": "33280",
    "end": "35120"
  },
  {
    "text": "of data what makes it special though is",
    "start": "35120",
    "end": "36800"
  },
  {
    "text": "that nodes can be easily distributed to",
    "start": "36800",
    "end": "38879"
  },
  {
    "text": "scale horizontally every node has the",
    "start": "38879",
    "end": "41120"
  },
  {
    "text": "same read write capabilities of another",
    "start": "41120",
    "end": "43040"
  },
  {
    "text": "node but is responsible for its own",
    "start": "43040",
    "end": "44800"
  },
  {
    "text": "partition of data nodes are grouped",
    "start": "44800",
    "end": "46559"
  },
  {
    "text": "together in a cluster or ring and data",
    "start": "46559",
    "end": "48960"
  },
  {
    "text": "is typically replicated on multiple",
    "start": "48960",
    "end": "50640"
  },
  {
    "text": "nodes which means no single point of",
    "start": "50640",
    "end": "52160"
  },
  {
    "text": "failure and 100 uptime the data is",
    "start": "52160",
    "end": "54879"
  },
  {
    "text": "wrapped in a key space giving developers",
    "start": "54879",
    "end": "56640"
  },
  {
    "text": "control over how it replicates in the",
    "start": "56640",
    "end": "58399"
  },
  {
    "text": "cluster each key space contains one or",
    "start": "58399",
    "end": "60480"
  },
  {
    "text": "more tables which represent tabular data",
    "start": "60480",
    "end": "62559"
  },
  {
    "text": "like you might find in a relational",
    "start": "62559",
    "end": "64158"
  },
  {
    "text": "database however it's schema-less and",
    "start": "64159",
    "end": "66159"
  },
  {
    "text": "can handle unstructured data which",
    "start": "66159",
    "end": "68000"
  },
  {
    "start": "68000",
    "end": "90000"
  },
  {
    "text": "developers can manage with the cassandra",
    "start": "68000",
    "end": "69840"
  },
  {
    "text": "query language the easiest way to get",
    "start": "69840",
    "end": "71520"
  },
  {
    "text": "started is by creating a free serverless",
    "start": "71520",
    "end": "73840"
  },
  {
    "text": "database with astra it deploys to the",
    "start": "73840",
    "end": "75920"
  },
  {
    "text": "cloud of your choice then scales",
    "start": "75920",
    "end": "77360"
  },
  {
    "text": "automatically on demand first we'll need",
    "start": "77360",
    "end": "79439"
  },
  {
    "text": "to define a key space which acts as a",
    "start": "79439",
    "end": "81360"
  },
  {
    "text": "container for replication next we'll",
    "start": "81360",
    "end": "83520"
  },
  {
    "text": "need to connect to the database which",
    "start": "83520",
    "end": "85040"
  },
  {
    "text": "can be accomplished in a variety of ways",
    "start": "85040",
    "end": "86960"
  },
  {
    "text": "it has sdks for major languages and a",
    "start": "86960",
    "end": "89360"
  },
  {
    "text": "tool called stargate that makes data",
    "start": "89360",
    "end": "91119"
  },
  {
    "start": "90000",
    "end": "145000"
  },
  {
    "text": "accessible via ras graphql and grpc or",
    "start": "91119",
    "end": "94400"
  },
  {
    "text": "you can execute raw cql code which is a",
    "start": "94400",
    "end": "96799"
  },
  {
    "text": "subset of sql create a table and include",
    "start": "96799",
    "end": "99520"
  },
  {
    "text": "a primary key to uniquely identify every",
    "start": "99520",
    "end": "102159"
  },
  {
    "text": "row then each column will have its own",
    "start": "102159",
    "end": "104159"
  },
  {
    "text": "name and data type now add data to that",
    "start": "104159",
    "end": "106399"
  },
  {
    "text": "table with the insert into statement",
    "start": "106399",
    "end": "108560"
  },
  {
    "text": "then you select to read data from the",
    "start": "108560",
    "end": "110799"
  },
  {
    "text": "table it's also possible to use the",
    "start": "110799",
    "end": "112560"
  },
  {
    "text": "where clause to filter and query the",
    "start": "112560",
    "end": "114479"
  },
  {
    "text": "data but an index will be required on",
    "start": "114479",
    "end": "116479"
  },
  {
    "text": "the column on the surface this may look",
    "start": "116479",
    "end": "118240"
  },
  {
    "text": "a lot like a relational database but it",
    "start": "118240",
    "end": "120159"
  },
  {
    "text": "doesn't support joins and that's by",
    "start": "120159",
    "end": "121920"
  },
  {
    "text": "design instead of modeling data into",
    "start": "121920",
    "end": "124159"
  },
  {
    "text": "small normalized tables in cassandra",
    "start": "124159",
    "end": "126479"
  },
  {
    "text": "it's denormalized to match the structure",
    "start": "126479",
    "end": "128560"
  },
  {
    "text": "of known queries making reads much",
    "start": "128560",
    "end": "130560"
  },
  {
    "text": "faster at scale and it's also possible",
    "start": "130560",
    "end": "132560"
  },
  {
    "text": "to implement storage attached indexing",
    "start": "132560",
    "end": "134720"
  },
  {
    "text": "to handle complex relational queries",
    "start": "134720",
    "end": "136720"
  },
  {
    "text": "this has been cassandra in 100 seconds",
    "start": "136720",
    "end": "139040"
  },
  {
    "text": "let me know if you want to see a full",
    "start": "139040",
    "end": "140239"
  },
  {
    "text": "tutorial in the comments thanks for",
    "start": "140239",
    "end": "141920"
  },
  {
    "text": "watching and i will see you in the next",
    "start": "141920",
    "end": "143920"
  },
  {
    "text": "one",
    "start": "143920",
    "end": "146920"
  }
]