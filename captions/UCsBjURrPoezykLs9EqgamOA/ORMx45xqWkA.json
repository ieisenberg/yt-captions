[
  {
    "text": "pie torch an open source deep learning",
    "start": "60",
    "end": "2580"
  },
  {
    "text": "framework used to build some of the",
    "start": "2580",
    "end": "4259"
  },
  {
    "text": "world's most famous artificial",
    "start": "4259",
    "end": "5580"
  },
  {
    "text": "intelligence products it was created at",
    "start": "5580",
    "end": "7680"
  },
  {
    "text": "The Meta AI research lab in 2016 but is",
    "start": "7680",
    "end": "10380"
  },
  {
    "text": "actually derived from the Lua based",
    "start": "10380",
    "end": "12120"
  },
  {
    "text": "torch library that dates back to 2002.",
    "start": "12120",
    "end": "14580"
  },
  {
    "text": "fundamentally it's a library for",
    "start": "14580",
    "end": "16379"
  },
  {
    "text": "programming with tensors which are",
    "start": "16379",
    "end": "18060"
  },
  {
    "text": "basically just multi-dimensional arrays",
    "start": "18060",
    "end": "19800"
  },
  {
    "text": "that represent data and parameters in",
    "start": "19800",
    "end": "22080"
  },
  {
    "text": "deep neural networks sounds complicated",
    "start": "22080",
    "end": "23880"
  },
  {
    "text": "but its focused on usability will have",
    "start": "23880",
    "end": "25740"
  },
  {
    "text": "you training machine learning models",
    "start": "25740",
    "end": "27180"
  },
  {
    "text": "with just a few lines of python in",
    "start": "27180",
    "end": "28980"
  },
  {
    "text": "addition it facilitates high performance",
    "start": "28980",
    "end": "30779"
  },
  {
    "text": "parallel Computing on a GPU thanks to",
    "start": "30779",
    "end": "33120"
  },
  {
    "text": "nvidia's Cuda platform developers love",
    "start": "33120",
    "end": "35520"
  },
  {
    "text": "prototyping with it because it supports",
    "start": "35520",
    "end": "37380"
  },
  {
    "text": "a dynamic computational graph allowing",
    "start": "37380",
    "end": "39420"
  },
  {
    "text": "models to be optimized at runtime it",
    "start": "39420",
    "end": "41460"
  },
  {
    "text": "does this by constructing a directed",
    "start": "41460",
    "end": "43440"
  },
  {
    "text": "acyclic graph consisting of functions",
    "start": "43440",
    "end": "45660"
  },
  {
    "text": "that keeps track of all the executed",
    "start": "45660",
    "end": "47280"
  },
  {
    "text": "operations on the tensors allowing you",
    "start": "47280",
    "end": "49079"
  },
  {
    "text": "to change the shape size and operations",
    "start": "49079",
    "end": "50940"
  },
  {
    "text": "after every iteration if needed pytorch",
    "start": "50940",
    "end": "53340"
  },
  {
    "text": "has been used to train models for",
    "start": "53340",
    "end": "54660"
  },
  {
    "text": "computer vision AI like Tesla autopilot",
    "start": "54660",
    "end": "57059"
  },
  {
    "text": "image generators like stable diffusion",
    "start": "57059",
    "end": "59039"
  },
  {
    "text": "and speech recognition models like open",
    "start": "59039",
    "end": "61140"
  },
  {
    "text": "AI whisper just to name a few to get",
    "start": "61140",
    "end": "63180"
  },
  {
    "text": "started install Pi torque and optionally",
    "start": "63180",
    "end": "65158"
  },
  {
    "text": "Cuda if you want to accelerate Computing",
    "start": "65159",
    "end": "67200"
  },
  {
    "text": "on your GPU now import it into a python",
    "start": "67200",
    "end": "69659"
  },
  {
    "text": "file or notebook like I mentioned a",
    "start": "69659",
    "end": "71820"
  },
  {
    "text": "tensor is similar to a multi-dimensional",
    "start": "71820",
    "end": "73619"
  },
  {
    "text": "array create a 2d array or Matrix with",
    "start": "73619",
    "end": "75780"
  },
  {
    "text": "python then use torch to convert it into",
    "start": "75780",
    "end": "77880"
  },
  {
    "text": "a tensor now we can run all kinds of",
    "start": "77880",
    "end": "79799"
  },
  {
    "text": "computations on it like we might convert",
    "start": "79799",
    "end": "81780"
  },
  {
    "text": "all these integers into random floating",
    "start": "81780",
    "end": "83700"
  },
  {
    "text": "points we can also perform linear",
    "start": "83700",
    "end": "85500"
  },
  {
    "text": "algebra by taking multiple tensors and",
    "start": "85500",
    "end": "87900"
  },
  {
    "text": "multiplying them together what you came",
    "start": "87900",
    "end": "89700"
  },
  {
    "text": "here to do though is build a deep neural",
    "start": "89700",
    "end": "91619"
  },
  {
    "text": "network like an image classifier to",
    "start": "91619",
    "end": "93720"
  },
  {
    "text": "handle that we can define a new class",
    "start": "93720",
    "end": "95520"
  },
  {
    "text": "that inherits from the neural network",
    "start": "95520",
    "end": "97079"
  },
  {
    "text": "module class inside the Constructor we",
    "start": "97079",
    "end": "99540"
  },
  {
    "text": "can build it out layer by layer the",
    "start": "99540",
    "end": "101220"
  },
  {
    "text": "flattened layer will take a",
    "start": "101220",
    "end": "102540"
  },
  {
    "text": "multi-dimensional input like an image",
    "start": "102540",
    "end": "104460"
  },
  {
    "text": "and convert it to one dimension from",
    "start": "104460",
    "end": "106380"
  },
  {
    "text": "there sequential is used to create a",
    "start": "106380",
    "end": "108240"
  },
  {
    "text": "container of layers that the data will",
    "start": "108240",
    "end": "109860"
  },
  {
    "text": "flow through each layer has multiple",
    "start": "109860",
    "end": "111600"
  },
  {
    "text": "nodes where each node is like its own",
    "start": "111600",
    "end": "113399"
  },
  {
    "text": "mini statistical model as each data",
    "start": "113399",
    "end": "115439"
  },
  {
    "text": "point flows through it it'll try to",
    "start": "115439",
    "end": "116759"
  },
  {
    "text": "guess the output and gradually update a",
    "start": "116759",
    "end": "118860"
  },
  {
    "text": "mapping of weights to determine in the",
    "start": "118860",
    "end": "120479"
  },
  {
    "text": "importance of a given variable linear is",
    "start": "120479",
    "end": "122520"
  },
  {
    "text": "a fully connected layer that takes the",
    "start": "122520",
    "end": "124200"
  },
  {
    "text": "flat and 28 by 28 image and transforms",
    "start": "124200",
    "end": "126600"
  },
  {
    "text": "it to an output of 512. this layer is",
    "start": "126600",
    "end": "129239"
  },
  {
    "text": "followed by a non-linear activation",
    "start": "129239",
    "end": "131280"
  },
  {
    "text": "function when activated it means that",
    "start": "131280",
    "end": "133260"
  },
  {
    "text": "feature might be important and outputs",
    "start": "133260",
    "end": "135000"
  },
  {
    "text": "the node otherwise it just outputs zero",
    "start": "135000",
    "end": "136980"
  },
  {
    "text": "and finally we finish with a fully",
    "start": "136980",
    "end": "138599"
  },
  {
    "text": "connected layer that outputs the 10",
    "start": "138599",
    "end": "139980"
  },
  {
    "text": "labels the model is trying to predict",
    "start": "139980",
    "end": "141660"
  },
  {
    "text": "with these pieces in place that next",
    "start": "141660",
    "end": "143640"
  },
  {
    "text": "step is to define a forward method that",
    "start": "143640",
    "end": "145620"
  },
  {
    "text": "describes the flow of data and now",
    "start": "145620",
    "end": "147239"
  },
  {
    "text": "instantiate the model to a GPU and pass",
    "start": "147239",
    "end": "149580"
  },
  {
    "text": "it some input data this will",
    "start": "149580",
    "end": "151080"
  },
  {
    "text": "automatically call its forward method",
    "start": "151080",
    "end": "152700"
  },
  {
    "text": "for training and prediction",
    "start": "152700",
    "end": "153900"
  },
  {
    "text": "congratulations you just built a neural",
    "start": "153900",
    "end": "156300"
  },
  {
    "text": "network this has been pytorch in 100",
    "start": "156300",
    "end": "158160"
  },
  {
    "text": "seconds thanks for watching and I will",
    "start": "158160",
    "end": "160260"
  },
  {
    "text": "see you in the next one",
    "start": "160260",
    "end": "163280"
  }
]