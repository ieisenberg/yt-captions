[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "haskell a statically typed",
    "start": "160",
    "end": "1839"
  },
  {
    "text": "general-purpose language made famous for",
    "start": "1839",
    "end": "3840"
  },
  {
    "text": "expanding the minds of developers into",
    "start": "3840",
    "end": "5680"
  },
  {
    "text": "the functional programming paradigm you",
    "start": "5680",
    "end": "7440"
  },
  {
    "text": "see haskell is a purely functional",
    "start": "7440",
    "end": "9440"
  },
  {
    "text": "language based on lambda calculus which",
    "start": "9440",
    "end": "11599"
  },
  {
    "text": "means a function always produces the",
    "start": "11599",
    "end": "13360"
  },
  {
    "text": "same output given the same input unlike",
    "start": "13360",
    "end": "15759"
  },
  {
    "text": "an imperative language your code can't",
    "start": "15759",
    "end": "17520"
  },
  {
    "text": "modify the inputs or produce side",
    "start": "17520",
    "end": "19279"
  },
  {
    "text": "effects that would otherwise change the",
    "start": "19279",
    "end": "20880"
  },
  {
    "text": "behavior of the application it was first",
    "start": "20880",
    "end": "22960"
  },
  {
    "start": "22000",
    "end": "29000"
  },
  {
    "text": "developed in 1987 and named after",
    "start": "22960",
    "end": "25199"
  },
  {
    "text": "logician haskell curry whose work had a",
    "start": "25199",
    "end": "27519"
  },
  {
    "text": "massive influence on the functional",
    "start": "27519",
    "end": "29039"
  },
  {
    "start": "29000",
    "end": "43000"
  },
  {
    "text": "programming world it's been used to",
    "start": "29039",
    "end": "30720"
  },
  {
    "text": "build a wide variety of server-side",
    "start": "30720",
    "end": "32480"
  },
  {
    "text": "applications like the hasura api",
    "start": "32480",
    "end": "34640"
  },
  {
    "text": "platform spam filtering at facebook and",
    "start": "34640",
    "end": "37040"
  },
  {
    "text": "compilers for other languages like elm",
    "start": "37040",
    "end": "39360"
  },
  {
    "text": "and purescript and it's responsible for",
    "start": "39360",
    "end": "41200"
  },
  {
    "text": "a countless number of blog posts about",
    "start": "41200",
    "end": "42960"
  },
  {
    "text": "monads in haskell you write declarative",
    "start": "42960",
    "end": "45120"
  },
  {
    "text": "code where the program is a single",
    "start": "45120",
    "end": "46960"
  },
  {
    "text": "expression that is executed by",
    "start": "46960",
    "end": "48800"
  },
  {
    "text": "evaluating that expression it also uses",
    "start": "48800",
    "end": "50960"
  },
  {
    "start": "50000",
    "end": "56000"
  },
  {
    "text": "lazy evaluation which means an",
    "start": "50960",
    "end": "52719"
  },
  {
    "text": "expression is not evaluated until it's",
    "start": "52719",
    "end": "55039"
  },
  {
    "text": "actually used by a function this can",
    "start": "55039",
    "end": "56719"
  },
  {
    "start": "56000",
    "end": "60000"
  },
  {
    "text": "result in big performance gains but",
    "start": "56719",
    "end": "58480"
  },
  {
    "text": "unpredictable memory use at runtime all",
    "start": "58480",
    "end": "60640"
  },
  {
    "text": "data in a haskell program is immutable",
    "start": "60640",
    "end": "62719"
  },
  {
    "text": "which produces a lot of memory garbage",
    "start": "62719",
    "end": "64640"
  },
  {
    "text": "so it contains a garbage collector to",
    "start": "64640",
    "end": "66560"
  },
  {
    "text": "clean things up to get started install",
    "start": "66560",
    "end": "68479"
  },
  {
    "text": "the glasgow haskell compiler then create",
    "start": "68479",
    "end": "70640"
  },
  {
    "start": "70000",
    "end": "77000"
  },
  {
    "text": "a file ending in dot hs we don't work",
    "start": "70640",
    "end": "72799"
  },
  {
    "text": "with statements here only expressions",
    "start": "72799",
    "end": "74880"
  },
  {
    "text": "which is code that will always evaluate",
    "start": "74880",
    "end": "76640"
  },
  {
    "text": "to a value create a string with double",
    "start": "76640",
    "end": "78799"
  },
  {
    "start": "77000",
    "end": "118000"
  },
  {
    "text": "quotes then give it a name with the",
    "start": "78799",
    "end": "80479"
  },
  {
    "text": "equal sign the value is immutable and",
    "start": "80479",
    "end": "82479"
  },
  {
    "text": "can never be changed the type will",
    "start": "82479",
    "end": "84080"
  },
  {
    "text": "automatically be inferred or we can",
    "start": "84080",
    "end": "85680"
  },
  {
    "text": "strongly type it with a double colon as",
    "start": "85680",
    "end": "87759"
  },
  {
    "text": "a list of characters now to define a",
    "start": "87759",
    "end": "90000"
  },
  {
    "text": "function start with a name followed by",
    "start": "90000",
    "end": "91840"
  },
  {
    "text": "the arguments that you want to pass to",
    "start": "91840",
    "end": "93520"
  },
  {
    "text": "it on the right side define the logic of",
    "start": "93520",
    "end": "95280"
  },
  {
    "text": "the function and it will automatically",
    "start": "95280",
    "end": "96960"
  },
  {
    "text": "return a value based on the result of",
    "start": "96960",
    "end": "98720"
  },
  {
    "text": "the expression we can also statically",
    "start": "98720",
    "end": "100560"
  },
  {
    "text": "type it using an arrow to separate the",
    "start": "100560",
    "end": "102479"
  },
  {
    "text": "argument and return value we can call",
    "start": "102479",
    "end": "104399"
  },
  {
    "text": "the function by referencing its name",
    "start": "104399",
    "end": "106159"
  },
  {
    "text": "with the arguments all values including",
    "start": "106159",
    "end": "108240"
  },
  {
    "text": "functions are first class which means",
    "start": "108240",
    "end": "110159"
  },
  {
    "text": "they can be passed as arguments to other",
    "start": "110159",
    "end": "112079"
  },
  {
    "text": "functions if we try to print the result",
    "start": "112079",
    "end": "113920"
  },
  {
    "text": "to the standard output we get an error",
    "start": "113920",
    "end": "115680"
  },
  {
    "text": "that's because working with io creates a",
    "start": "115680",
    "end": "117680"
  },
  {
    "text": "side effect to write a program that",
    "start": "117680",
    "end": "119280"
  },
  {
    "start": "118000",
    "end": "149000"
  },
  {
    "text": "actually does something we write a main",
    "start": "119280",
    "end": "121119"
  },
  {
    "text": "function with a do block here we can",
    "start": "121119",
    "end": "123200"
  },
  {
    "text": "chain together a sequence of actions",
    "start": "123200",
    "end": "125119"
  },
  {
    "text": "where the side effects are abstracted",
    "start": "125119",
    "end": "126640"
  },
  {
    "text": "away made possible by a mathematical",
    "start": "126640",
    "end": "128879"
  },
  {
    "text": "concept known as the monad which is",
    "start": "128879",
    "end": "130959"
  },
  {
    "text": "basically a wrapper that can make",
    "start": "130959",
    "end": "132560"
  },
  {
    "text": "functional code more modular now to run",
    "start": "132560",
    "end": "134800"
  },
  {
    "text": "your code you can use the interactive",
    "start": "134800",
    "end": "136480"
  },
  {
    "text": "interpreter or compile it to an",
    "start": "136480",
    "end": "138160"
  },
  {
    "text": "executable by running ghc make this has",
    "start": "138160",
    "end": "140800"
  },
  {
    "text": "been haskell in 100 seconds hit the like",
    "start": "140800",
    "end": "143120"
  },
  {
    "text": "button and subscribe if you want to see",
    "start": "143120",
    "end": "144640"
  },
  {
    "text": "more short videos like this thanks for",
    "start": "144640",
    "end": "146319"
  },
  {
    "text": "watching and i will see you in the next",
    "start": "146319",
    "end": "148319"
  },
  {
    "text": "one",
    "start": "148319",
    "end": "151280"
  }
]