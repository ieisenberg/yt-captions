[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "in this episode I'm going to talk about",
    "start": "399",
    "end": "2159"
  },
  {
    "text": "ways to associate Firebase users with",
    "start": "2159",
    "end": "4759"
  },
  {
    "text": "data in the real-time database I'll go",
    "start": "4759",
    "end": "7439"
  },
  {
    "text": "over three different methods and when to",
    "start": "7439",
    "end": "9719"
  },
  {
    "text": "use them and also talk about ways to",
    "start": "9719",
    "end": "12000"
  },
  {
    "text": "keep them secure on the back end but",
    "start": "12000",
    "end": "14360"
  },
  {
    "text": "before we get into that it's important",
    "start": "14360",
    "end": "15679"
  },
  {
    "text": "to go over a couple nosql database",
    "start": "15679",
    "end": "18520"
  },
  {
    "start": "17000",
    "end": "53000"
  },
  {
    "text": "design best practices if you come from a",
    "start": "18520",
    "end": "21480"
  },
  {
    "text": "SQL background you're used to designing",
    "start": "21480",
    "end": "23160"
  },
  {
    "text": "a database that is completely centered",
    "start": "23160",
    "end": "25119"
  },
  {
    "text": "around relationships in no SQL we care",
    "start": "25119",
    "end": "27920"
  },
  {
    "text": "less about relationships and more about",
    "start": "27920",
    "end": "30039"
  },
  {
    "text": "about the efficiency of the actual query",
    "start": "30039",
    "end": "31960"
  },
  {
    "text": "that we're making consider a database",
    "start": "31960",
    "end": "34719"
  },
  {
    "text": "design that has everything nested under",
    "start": "34719",
    "end": "36239"
  },
  {
    "text": "the user ID if you wanted to Loop over",
    "start": "36239",
    "end": "38960"
  },
  {
    "text": "just the users and display their",
    "start": "38960",
    "end": "40320"
  },
  {
    "text": "username you'd also have to load all the",
    "start": "40320",
    "end": "42239"
  },
  {
    "text": "nested data further down the tree which",
    "start": "42239",
    "end": "44559"
  },
  {
    "text": "would become very inefficient if you",
    "start": "44559",
    "end": "46199"
  },
  {
    "text": "have a lot of Records a better way to",
    "start": "46199",
    "end": "48039"
  },
  {
    "text": "handle this is to keep the data shallow",
    "start": "48039",
    "end": "50199"
  },
  {
    "text": "so you only query for the actual data",
    "start": "50199",
    "end": "52399"
  },
  {
    "text": "you need now we can start building some",
    "start": "52399",
    "end": "55199"
  },
  {
    "start": "53000",
    "end": "169000"
  },
  {
    "text": "user relationships with Firebase and",
    "start": "55199",
    "end": "57600"
  },
  {
    "text": "angular 4 the first method work works by",
    "start": "57600",
    "end": "60519"
  },
  {
    "text": "nesting a user's items under their own",
    "start": "60519",
    "end": "63239"
  },
  {
    "text": "user ID this is ideal when you're",
    "start": "63239",
    "end": "65280"
  },
  {
    "text": "showing data that's organized by user",
    "start": "65280",
    "end": "67560"
  },
  {
    "text": "for example a Twitter",
    "start": "67560",
    "end": "70119"
  },
  {
    "text": "feed here we have an item service and",
    "start": "70119",
    "end": "73400"
  },
  {
    "text": "we're going to import both the angular",
    "start": "73400",
    "end": "75360"
  },
  {
    "text": "fire database and the angular fire off",
    "start": "75360",
    "end": "78119"
  },
  {
    "text": "module then we create an item class",
    "start": "78119",
    "end": "80759"
  },
  {
    "text": "which represents our data at this point",
    "start": "80759",
    "end": "82640"
  },
  {
    "text": "with just one body string",
    "start": "82640",
    "end": "85320"
  },
  {
    "text": "attribute this class will be returned to",
    "start": "85320",
    "end": "87640"
  },
  {
    "text": "us as an angular fire list Observer",
    "start": "87640",
    "end": "91240"
  },
  {
    "text": "when we inject the service we want to",
    "start": "91240",
    "end": "93320"
  },
  {
    "text": "subscribe to the angular fire off State",
    "start": "93320",
    "end": "96680"
  },
  {
    "text": "and we'll set the user ID return from",
    "start": "96680",
    "end": "98799"
  },
  {
    "text": "that off state to the user ID on the",
    "start": "98799",
    "end": "101320"
  },
  {
    "text": "service this allows us to make queries",
    "start": "101320",
    "end": "103759"
  },
  {
    "text": "based on the currently logged in users",
    "start": "103759",
    "end": "106799"
  },
  {
    "text": "ID now that we have the user ID we can",
    "start": "106799",
    "end": "110000"
  },
  {
    "text": "hit the database for the list that is",
    "start": "110000",
    "end": "112240"
  },
  {
    "text": "nested under that user ID if it's",
    "start": "112240",
    "end": "114960"
  },
  {
    "text": "undefined we just return null it's",
    "start": "114960",
    "end": "116880"
  },
  {
    "text": "defined we interpolate it into the path",
    "start": "116880",
    "end": "119439"
  },
  {
    "text": "to the",
    "start": "119439",
    "end": "121280"
  },
  {
    "text": "database if we want to create a new item",
    "start": "121280",
    "end": "123719"
  },
  {
    "text": "it's as simple as pushing another item",
    "start": "123719",
    "end": "126119"
  },
  {
    "text": "object onto this list",
    "start": "126119",
    "end": "129240"
  },
  {
    "text": "observable back in the app we can see",
    "start": "129560",
    "end": "131680"
  },
  {
    "text": "that when we create a new item it's",
    "start": "131680",
    "end": "133319"
  },
  {
    "text": "nested under that user's user ID as",
    "start": "133319",
    "end": "136519"
  },
  {
    "text": "expected if we log out and log in with a",
    "start": "136519",
    "end": "138879"
  },
  {
    "text": "different user we shouldn't see any",
    "start": "138879",
    "end": "140800"
  },
  {
    "text": "items in the feed which we don't and if",
    "start": "140800",
    "end": "144519"
  },
  {
    "text": "we create a new item with this user",
    "start": "144519",
    "end": "146920"
  },
  {
    "text": "their data is nested under their user ID",
    "start": "146920",
    "end": "149040"
  },
  {
    "text": "essentially separ ating the data by",
    "start": "149040",
    "end": "151680"
  },
  {
    "text": "user this works great on the front end",
    "start": "151680",
    "end": "154000"
  },
  {
    "text": "but we also need to secure the backend",
    "start": "154000",
    "end": "155640"
  },
  {
    "text": "data with a Firebase database rule in",
    "start": "155640",
    "end": "158920"
  },
  {
    "text": "this example we match the user ID that",
    "start": "158920",
    "end": "161760"
  },
  {
    "text": "the data is nested under with the actual",
    "start": "161760",
    "end": "164040"
  },
  {
    "text": "o ID and Firebase if it's a match then",
    "start": "164040",
    "end": "167239"
  },
  {
    "text": "we allow the right operation to take",
    "start": "167239",
    "end": "168840"
  },
  {
    "text": "place a second way to associate users",
    "start": "168840",
    "end": "171200"
  },
  {
    "start": "169000",
    "end": "241000"
  },
  {
    "text": "with items is to save the user ID as an",
    "start": "171200",
    "end": "174400"
  },
  {
    "text": "attribute on the item",
    "start": "174400",
    "end": "176239"
  },
  {
    "text": "itself this approach is useful when you",
    "start": "176239",
    "end": "178840"
  },
  {
    "text": "need the association but you're not",
    "start": "178840",
    "end": "180400"
  },
  {
    "text": "quering by the user for example comments",
    "start": "180400",
    "end": "182760"
  },
  {
    "text": "on a blog post or something similar we",
    "start": "182760",
    "end": "186360"
  },
  {
    "text": "can make this work by modifying three",
    "start": "186360",
    "end": "187959"
  },
  {
    "text": "lines of code first we add a user ID to",
    "start": "187959",
    "end": "190319"
  },
  {
    "text": "the item",
    "start": "190319",
    "end": "191680"
  },
  {
    "text": "class then we set that user ID on the",
    "start": "191680",
    "end": "194239"
  },
  {
    "text": "item when it's",
    "start": "194239",
    "end": "196319"
  },
  {
    "text": "created then we remove the user ID from",
    "start": "196319",
    "end": "198879"
  },
  {
    "text": "the database path because we're no",
    "start": "198879",
    "end": "200480"
  },
  {
    "text": "longer nesting under the user",
    "start": "200480",
    "end": "204000"
  },
  {
    "text": "ID back in the app we create a new item",
    "start": "204239",
    "end": "207480"
  },
  {
    "text": "and we can see that user ID is on the",
    "start": "207480",
    "end": "209840"
  },
  {
    "text": "item itself then if we create another",
    "start": "209840",
    "end": "212959"
  },
  {
    "text": "item with a different user we should",
    "start": "212959",
    "end": "214760"
  },
  {
    "text": "have a different user ID on that item",
    "start": "214760",
    "end": "217400"
  },
  {
    "text": "but still both items are coming up in",
    "start": "217400",
    "end": "219159"
  },
  {
    "text": "the feed",
    "start": "219159",
    "end": "220519"
  },
  {
    "text": "now in Firebase we can see the user ID",
    "start": "220519",
    "end": "223720"
  },
  {
    "text": "attribute is on each",
    "start": "223720",
    "end": "226400"
  },
  {
    "text": "item to secure the back end we see if",
    "start": "226400",
    "end": "229840"
  },
  {
    "text": "the existing data in the database has a",
    "start": "229840",
    "end": "231959"
  },
  {
    "text": "matching user ID and we also allow the",
    "start": "231959",
    "end": "234879"
  },
  {
    "text": "right to occur if it's null because that",
    "start": "234879",
    "end": "236720"
  },
  {
    "text": "means the user is creating a new item",
    "start": "236720",
    "end": "241680"
  },
  {
    "text": "the third scenario is when you have",
    "start": "242439",
    "end": "243959"
  },
  {
    "text": "items that can be associated with",
    "start": "243959",
    "end": "245560"
  },
  {
    "text": "multiple users in this case we create a",
    "start": "245560",
    "end": "248239"
  },
  {
    "text": "collection of members that are nested",
    "start": "248239",
    "end": "250000"
  },
  {
    "text": "under the item ID and the key for each",
    "start": "250000",
    "end": "252799"
  },
  {
    "text": "member is that user's user",
    "start": "252799",
    "end": "255840"
  },
  {
    "text": "ID back in the service we'll create a",
    "start": "255840",
    "end": "258359"
  },
  {
    "text": "new function to join an item passing it",
    "start": "258359",
    "end": "260600"
  },
  {
    "text": "the items key as an",
    "start": "260600",
    "end": "262479"
  },
  {
    "text": "argument the data will be the user ID",
    "start": "262479",
    "end": "265800"
  },
  {
    "text": "for the key set to true we return the",
    "start": "265800",
    "end": "268960"
  },
  {
    "text": "current members as an object",
    "start": "268960",
    "end": "271560"
  },
  {
    "text": "observable then update that observable",
    "start": "271560",
    "end": "274479"
  },
  {
    "text": "with the new",
    "start": "274479",
    "end": "277039"
  },
  {
    "text": "data to leave an item we follow the same",
    "start": "277600",
    "end": "280639"
  },
  {
    "text": "basic",
    "start": "280639",
    "end": "281560"
  },
  {
    "text": "approach we query for an object",
    "start": "281560",
    "end": "283800"
  },
  {
    "text": "observable with the current user ID and",
    "start": "283800",
    "end": "286759"
  },
  {
    "text": "if it exists we remove",
    "start": "286759",
    "end": "290120"
  },
  {
    "text": "it back in the app we create a new item",
    "start": "290120",
    "end": "293479"
  },
  {
    "text": "that defaults to no members and then we",
    "start": "293479",
    "end": "296199"
  },
  {
    "text": "can click the join button which will add",
    "start": "296199",
    "end": "299039"
  },
  {
    "text": "that user ID to the list of",
    "start": "299039",
    "end": "302360"
  },
  {
    "text": "members when we log in with a different",
    "start": "302360",
    "end": "304600"
  },
  {
    "text": "user we should see that they can also",
    "start": "304600",
    "end": "307039"
  },
  {
    "text": "add their user ID to this",
    "start": "307039",
    "end": "309520"
  },
  {
    "text": "item going into Firebase we can see that",
    "start": "309520",
    "end": "312720"
  },
  {
    "text": "the members collection on this item gets",
    "start": "312720",
    "end": "314960"
  },
  {
    "text": "updated with the key after each button",
    "start": "314960",
    "end": "317360"
  },
  {
    "text": "is",
    "start": "317360",
    "end": "319560"
  },
  {
    "text": "[Music]",
    "start": "319950",
    "end": "322199"
  },
  {
    "text": "clicked that's it for this episode if",
    "start": "322199",
    "end": "324800"
  },
  {
    "text": "you found the video helpful please like",
    "start": "324800",
    "end": "326319"
  },
  {
    "text": "And subscribe and if you want to support",
    "start": "326319",
    "end": "328319"
  },
  {
    "text": "the channel consider becoming a pro",
    "start": "328319",
    "end": "330120"
  },
  {
    "text": "subscriber at angular firebase.com for",
    "start": "330120",
    "end": "333440"
  },
  {
    "text": "just a few bucks a month you'll get",
    "start": "333440",
    "end": "334600"
  },
  {
    "text": "access to exclusive content as well as",
    "start": "334600",
    "end": "336960"
  },
  {
    "text": "free oneon-one project Consulting thanks",
    "start": "336960",
    "end": "339880"
  },
  {
    "text": "for watching and I'll see you next",
    "start": "339880",
    "end": "341810"
  },
  {
    "text": "[Music]",
    "start": "341810",
    "end": "349430"
  },
  {
    "text": "time",
    "start": "351360",
    "end": "354360"
  }
]