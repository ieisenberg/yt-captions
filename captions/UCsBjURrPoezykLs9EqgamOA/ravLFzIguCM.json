[
  {
    "text": "CP A statically typed general purpose",
    "start": "160",
    "end": "2800"
  },
  {
    "text": "programming language famous for being",
    "start": "2800",
    "end": "4400"
  },
  {
    "text": "the Workhorse of the windows.net",
    "start": "4400",
    "end": "6040"
  },
  {
    "text": "framework it was created in the year",
    "start": "6040",
    "end": "7640"
  },
  {
    "text": "2000 by Anders hilburg at Microsoft it",
    "start": "7640",
    "end": "10480"
  },
  {
    "text": "was designed as a modern sealike",
    "start": "10480",
    "end": "12400"
  },
  {
    "text": "objectoriented language and was",
    "start": "12400",
    "end": "14200"
  },
  {
    "text": "originally going to be called cool",
    "start": "14200",
    "end": "15759"
  },
  {
    "text": "initially it was criticized as imitation",
    "start": "15759",
    "end": "18119"
  },
  {
    "text": "Java but it's evolved into one of the",
    "start": "18119",
    "end": "20000"
  },
  {
    "text": "most popular and well- Lov languages to",
    "start": "20000",
    "end": "22080"
  },
  {
    "text": "this day it can be used to build almost",
    "start": "22080",
    "end": "23720"
  },
  {
    "text": "anything like desktop apps on net core",
    "start": "23720",
    "end": "26160"
  },
  {
    "text": "crossplatform mobile apps with zamarin",
    "start": "26160",
    "end": "28279"
  },
  {
    "text": "web applications with Blazer and video",
    "start": "28279",
    "end": "30400"
  },
  {
    "text": "games with the unity framework it became",
    "start": "30400",
    "end": "32320"
  },
  {
    "text": "open source software in 2014 and can be",
    "start": "32320",
    "end": "34440"
  },
  {
    "text": "used to build apps outside of the Net",
    "start": "34440",
    "end": "36280"
  },
  {
    "text": "Framework C code is compiled into an",
    "start": "36280",
    "end": "38440"
  },
  {
    "text": "intermediate language which can then be",
    "start": "38440",
    "end": "40120"
  },
  {
    "text": "interpreted by the common language",
    "start": "40120",
    "end": "41559"
  },
  {
    "text": "runtime where it can be executed as",
    "start": "41559",
    "end": "43440"
  },
  {
    "text": "native machine code on any operating",
    "start": "43440",
    "end": "45440"
  },
  {
    "text": "system without the need to recompile",
    "start": "45440",
    "end": "47360"
  },
  {
    "text": "it's known primarily as an",
    "start": "47360",
    "end": "48559"
  },
  {
    "text": "objectoriented language but also",
    "start": "48559",
    "end": "50399"
  },
  {
    "text": "supports functional Lambda expressions",
    "start": "50399",
    "end": "52280"
  },
  {
    "text": "and has the ability to write a",
    "start": "52280",
    "end": "53640"
  },
  {
    "text": "declarative query on any data structure",
    "start": "53640",
    "end": "55840"
  },
  {
    "text": "with a feature called link it's a Memory",
    "start": "55840",
    "end": "57879"
  },
  {
    "text": "safe language thanks to garbage",
    "start": "57879",
    "end": "59359"
  },
  {
    "text": "collection although it is possible to",
    "start": "59359",
    "end": "61120"
  },
  {
    "text": "create an unsaved context if you want to",
    "start": "61120",
    "end": "63079"
  },
  {
    "text": "allocate your own memory with pointers",
    "start": "63079",
    "end": "65000"
  },
  {
    "text": "to get started install the net core SDK",
    "start": "65000",
    "end": "67840"
  },
  {
    "text": "then open the terminal to an empty",
    "start": "67840",
    "end": "69280"
  },
  {
    "text": "directory and Run net new to create a",
    "start": "69280",
    "end": "71560"
  },
  {
    "text": "new application that creates a",
    "start": "71560",
    "end": "73159"
  },
  {
    "text": "program.cs file that Imports the system",
    "start": "73159",
    "end": "75640"
  },
  {
    "text": "namespace at the top then provides a",
    "start": "75640",
    "end": "77439"
  },
  {
    "text": "class with a main function which is",
    "start": "77439",
    "end": "79080"
  },
  {
    "text": "where your code will start executing",
    "start": "79080",
    "end": "80640"
  },
  {
    "text": "declare a variable by starting with a",
    "start": "80640",
    "end": "82640"
  },
  {
    "text": "type followed by a name and value by",
    "start": "82640",
    "end": "85000"
  },
  {
    "text": "default a value cannot be null but you",
    "start": "85000",
    "end": "87040"
  },
  {
    "text": "can make it nullable by adding a",
    "start": "87040",
    "end": "88600"
  },
  {
    "text": "question mark to the type now to",
    "start": "88600",
    "end": "90159"
  },
  {
    "text": "organize our code and share it in other",
    "start": "90159",
    "end": "92040"
  },
  {
    "text": "files we will wrap it in a namespace we",
    "start": "92040",
    "end": "94439"
  },
  {
    "text": "can then create a new class inside the",
    "start": "94439",
    "end": "95920"
  },
  {
    "text": "namespace that has a Constructor when",
    "start": "95920",
    "end": "97759"
  },
  {
    "text": "the class is instantiated and a",
    "start": "97759",
    "end": "99479"
  },
  {
    "text": "Destructor when the class goes out of",
    "start": "99479",
    "end": "101240"
  },
  {
    "text": "scope classes support inheritance",
    "start": "101240",
    "end": "103119"
  },
  {
    "text": "polymorphism and everything else you",
    "start": "103119",
    "end": "104920"
  },
  {
    "text": "would expect in a modern object-oriented",
    "start": "104920",
    "end": "106960"
  },
  {
    "text": "language we can define a property on the",
    "start": "106960",
    "end": "109079"
  },
  {
    "text": "class and make it readable with get or",
    "start": "109079",
    "end": "111040"
  },
  {
    "text": "writable with set the language doesn't",
    "start": "111040",
    "end": "112840"
  },
  {
    "text": "have top level functions but rather",
    "start": "112840",
    "end": "114560"
  },
  {
    "text": "methods that are defined as a member of",
    "start": "114560",
    "end": "116439"
  },
  {
    "text": "a class however it does support Lambda",
    "start": "116439",
    "end": "118719"
  },
  {
    "text": "expressions or anonymous functions and",
    "start": "118719",
    "end": "120880"
  },
  {
    "text": "other functional programming patterns",
    "start": "120880",
    "end": "122640"
  },
  {
    "text": "when it comes to asynchronous",
    "start": "122640",
    "end": "123880"
  },
  {
    "text": "programming it supports a task based",
    "start": "123880",
    "end": "125799"
  },
  {
    "text": "asynchronous pattern allowing you to",
    "start": "125799",
    "end": "127439"
  },
  {
    "text": "write nonblocking code using the async",
    "start": "127439",
    "end": "129599"
  },
  {
    "text": "await syntax now to compile and execute",
    "start": "129599",
    "end": "132120"
  },
  {
    "text": "your code use the net run command this",
    "start": "132120",
    "end": "134319"
  },
  {
    "text": "has been C in 100 seconds hit the like",
    "start": "134319",
    "end": "137040"
  },
  {
    "text": "button and subscribe if you want to see",
    "start": "137040",
    "end": "138480"
  },
  {
    "text": "more short videos like this and let me",
    "start": "138480",
    "end": "140160"
  },
  {
    "text": "know in the comments if you want to see",
    "start": "140160",
    "end": "141319"
  },
  {
    "text": "a fullnet or Unity tutorial thanks for",
    "start": "141319",
    "end": "143800"
  },
  {
    "text": "watching and I will see you in the next",
    "start": "143800",
    "end": "145720"
  },
  {
    "text": "one",
    "start": "145720",
    "end": "148640"
  }
]