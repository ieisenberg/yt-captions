[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "structured query language sql or sql for",
    "start": "320",
    "end": "3439"
  },
  {
    "text": "short is the gold standard language for",
    "start": "3439",
    "end": "5600"
  },
  {
    "text": "communicating with relational database",
    "start": "5600",
    "end": "7520"
  },
  {
    "text": "management systems you've likely heard",
    "start": "7520",
    "end": "9280"
  },
  {
    "text": "of databases like mysql",
    "start": "9280",
    "end": "11280"
  },
  {
    "start": "10000",
    "end": "26000"
  },
  {
    "text": "postgres microsoft sql server and oracle",
    "start": "11280",
    "end": "14240"
  },
  {
    "text": "all of which are based on sql with their",
    "start": "14240",
    "end": "16160"
  },
  {
    "text": "own little variations",
    "start": "16160",
    "end": "17359"
  },
  {
    "text": "it was initially developed in the early",
    "start": "17359",
    "end": "19039"
  },
  {
    "text": "70s to mutate and retrieve data from",
    "start": "19039",
    "end": "21600"
  },
  {
    "text": "ibm's system r database by 1986",
    "start": "21600",
    "end": "24800"
  },
  {
    "text": "it was standardized into the syntax that",
    "start": "24800",
    "end": "26960"
  },
  {
    "start": "26000",
    "end": "72000"
  },
  {
    "text": "remains extremely popular in technical",
    "start": "26960",
    "end": "28880"
  },
  {
    "text": "applications today a relational database",
    "start": "28880",
    "end": "31119"
  },
  {
    "text": "organizes data into tables",
    "start": "31119",
    "end": "33120"
  },
  {
    "text": "kind of like an excel spreadsheet where",
    "start": "33120",
    "end": "34960"
  },
  {
    "text": "columns contain attributes or types of",
    "start": "34960",
    "end": "36960"
  },
  {
    "text": "data",
    "start": "36960",
    "end": "37440"
  },
  {
    "text": "while each row represents an individual",
    "start": "37440",
    "end": "39440"
  },
  {
    "text": "record or data point with its own unique",
    "start": "39440",
    "end": "41600"
  },
  {
    "text": "id",
    "start": "41600",
    "end": "42000"
  },
  {
    "text": "known as a primary key we can establish",
    "start": "42000",
    "end": "44320"
  },
  {
    "text": "relationships between data points",
    "start": "44320",
    "end": "46239"
  },
  {
    "text": "by taking the unique id from one row and",
    "start": "46239",
    "end": "48399"
  },
  {
    "text": "storing it on a different row in a",
    "start": "48399",
    "end": "50160"
  },
  {
    "text": "different table",
    "start": "50160",
    "end": "50960"
  },
  {
    "text": "in a special column known as a foreign",
    "start": "50960",
    "end": "53120"
  },
  {
    "text": "key in the teams table the team id",
    "start": "53120",
    "end": "55199"
  },
  {
    "text": "is the primary key but in the players",
    "start": "55199",
    "end": "57199"
  },
  {
    "text": "table it's the foreign key",
    "start": "57199",
    "end": "58800"
  },
  {
    "text": "and what that data structure tells us is",
    "start": "58800",
    "end": "60719"
  },
  {
    "text": "that a player belongs to one team",
    "start": "60719",
    "end": "62960"
  },
  {
    "text": "while a team can have many players what",
    "start": "62960",
    "end": "65439"
  },
  {
    "text": "we've done here",
    "start": "65439",
    "end": "66159"
  },
  {
    "text": "is structured our data in its smallest",
    "start": "66159",
    "end": "68240"
  },
  {
    "text": "normal form to eliminate duplication and",
    "start": "68240",
    "end": "70560"
  },
  {
    "text": "redundancy",
    "start": "70560",
    "end": "71520"
  },
  {
    "text": "now the role of sql is not only to read",
    "start": "71520",
    "end": "74560"
  },
  {
    "start": "72000",
    "end": "84000"
  },
  {
    "text": "create",
    "start": "74560",
    "end": "75119"
  },
  {
    "text": "update and delete data but also to join",
    "start": "75119",
    "end": "77759"
  },
  {
    "text": "data together",
    "start": "77759",
    "end": "78720"
  },
  {
    "text": "based on the relationships embedded",
    "start": "78720",
    "end": "80320"
  },
  {
    "text": "within it the syntax",
    "start": "80320",
    "end": "81759"
  },
  {
    "text": "is comprised of several key parts if we",
    "start": "81759",
    "end": "84240"
  },
  {
    "start": "84000",
    "end": "129000"
  },
  {
    "text": "zoom all the way out",
    "start": "84240",
    "end": "85280"
  },
  {
    "text": "we have a statement or a piece of code",
    "start": "85280",
    "end": "87439"
  },
  {
    "text": "that does something",
    "start": "87439",
    "end": "88400"
  },
  {
    "text": "like reads or writes to the database",
    "start": "88400",
    "end": "90400"
  },
  {
    "text": "within a statement we have a variety of",
    "start": "90400",
    "end": "92320"
  },
  {
    "text": "keywords that can manipulate the",
    "start": "92320",
    "end": "93920"
  },
  {
    "text": "database",
    "start": "93920",
    "end": "94640"
  },
  {
    "text": "select can be used to make a query for",
    "start": "94640",
    "end": "96880"
  },
  {
    "text": "the columns that you want",
    "start": "96880",
    "end": "98159"
  },
  {
    "text": "from a table the column and table names",
    "start": "98159",
    "end": "101040"
  },
  {
    "text": "are known as",
    "start": "101040",
    "end": "101840"
  },
  {
    "text": "identifiers but we may not want every",
    "start": "101840",
    "end": "103920"
  },
  {
    "text": "row in the table so we filter the",
    "start": "103920",
    "end": "105439"
  },
  {
    "text": "results with the where keyword to only",
    "start": "105439",
    "end": "107280"
  },
  {
    "text": "include records that meet a certain",
    "start": "107280",
    "end": "108799"
  },
  {
    "text": "condition",
    "start": "108799",
    "end": "109439"
  },
  {
    "text": "it's like looping over every row in the",
    "start": "109439",
    "end": "111119"
  },
  {
    "text": "table and only returning rows in the",
    "start": "111119",
    "end": "112720"
  },
  {
    "text": "query where the predicate evaluates to",
    "start": "112720",
    "end": "114560"
  },
  {
    "text": "true",
    "start": "114560",
    "end": "115119"
  },
  {
    "text": "then we might use the join keyword to",
    "start": "115119",
    "end": "117119"
  },
  {
    "text": "connect data from an entirely different",
    "start": "117119",
    "end": "118719"
  },
  {
    "text": "table",
    "start": "118719",
    "end": "119360"
  },
  {
    "text": "by matching the primary key on this",
    "start": "119360",
    "end": "121119"
  },
  {
    "text": "table to the foreign key on another",
    "start": "121119",
    "end": "123040"
  },
  {
    "text": "table",
    "start": "123040",
    "end": "123600"
  },
  {
    "text": "what we've created is a collection of",
    "start": "123600",
    "end": "125439"
  },
  {
    "text": "clauses that make up",
    "start": "125439",
    "end": "126960"
  },
  {
    "text": "a full sql statement we can now go and",
    "start": "126960",
    "end": "129280"
  },
  {
    "start": "129000",
    "end": "142000"
  },
  {
    "text": "execute this code on the hundreds of",
    "start": "129280",
    "end": "130800"
  },
  {
    "text": "different databases that support",
    "start": "130800",
    "end": "132400"
  },
  {
    "text": "sql this has been structured query",
    "start": "132400",
    "end": "134400"
  },
  {
    "text": "language in 100 seconds",
    "start": "134400",
    "end": "136000"
  },
  {
    "text": "like and subscribe if you want to see a",
    "start": "136000",
    "end": "137680"
  },
  {
    "text": "full sql tutorial",
    "start": "137680",
    "end": "139040"
  },
  {
    "text": "thanks for watching and i will see you",
    "start": "139040",
    "end": "140879"
  },
  {
    "text": "in the next one",
    "start": "140879",
    "end": "143840"
  }
]