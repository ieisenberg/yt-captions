[
  {
    "text": "kotlin a statically typed multi-paradigm",
    "start": "160",
    "end": "2800"
  },
  {
    "text": "language designed quite simply as a",
    "start": "2800",
    "end": "4799"
  },
  {
    "text": "better alternative to java like java it",
    "start": "4799",
    "end": "7359"
  },
  {
    "text": "compiles to bytecode that runs on the",
    "start": "7359",
    "end": "9440"
  },
  {
    "text": "java virtual machine but kotlin provides",
    "start": "9440",
    "end": "11840"
  },
  {
    "text": "a more concise syntax and language",
    "start": "11840",
    "end": "13840"
  },
  {
    "text": "features loved by modern developers like",
    "start": "13840",
    "end": "15920"
  },
  {
    "text": "type inference functional patterns null",
    "start": "15920",
    "end": "18080"
  },
  {
    "text": "safety and more it was announced in 2011",
    "start": "18080",
    "end": "20800"
  },
  {
    "text": "by jetbrains with the first stable",
    "start": "20800",
    "end": "22480"
  },
  {
    "text": "release coming in 2016. it's named after",
    "start": "22480",
    "end": "25039"
  },
  {
    "text": "kotlin island in russia and it just got",
    "start": "25039",
    "end": "26960"
  },
  {
    "text": "a mascot in october 2021 but it still",
    "start": "26960",
    "end": "29599"
  },
  {
    "text": "doesn't have a name yet one of its key",
    "start": "29599",
    "end": "31199"
  },
  {
    "text": "features is that it can interop with",
    "start": "31199",
    "end": "32960"
  },
  {
    "text": "existing java code which means",
    "start": "32960",
    "end": "34480"
  },
  {
    "text": "developers can gradually adopt it",
    "start": "34480",
    "end": "36320"
  },
  {
    "text": "without throwing all of their code in",
    "start": "36320",
    "end": "37600"
  },
  {
    "text": "the garbage in addition to jvm kotlin",
    "start": "37600",
    "end": "39920"
  },
  {
    "text": "can also compile to native code and",
    "start": "39920",
    "end": "42079"
  },
  {
    "text": "javascript opening the door to",
    "start": "42079",
    "end": "43760"
  },
  {
    "text": "multi-platform apps it's been most",
    "start": "43760",
    "end": "45520"
  },
  {
    "text": "influential in the android development",
    "start": "45520",
    "end": "47280"
  },
  {
    "text": "community and as of 2019 google named it",
    "start": "47280",
    "end": "49840"
  },
  {
    "text": "the preferred language for android",
    "start": "49840",
    "end": "51360"
  },
  {
    "text": "development over java one of its killer",
    "start": "51360",
    "end": "53520"
  },
  {
    "text": "features is co-routines which provides a",
    "start": "53520",
    "end": "55760"
  },
  {
    "text": "simplified way to write asynchronous",
    "start": "55760",
    "end": "57760"
  },
  {
    "text": "non-blocking code a common requirement",
    "start": "57760",
    "end": "59920"
  },
  {
    "text": "for mobile developers to get started",
    "start": "59920",
    "end": "61920"
  },
  {
    "text": "create a file ending in.kt most kotlin",
    "start": "61920",
    "end": "64720"
  },
  {
    "text": "developers use something like intellij",
    "start": "64720",
    "end": "66640"
  },
  {
    "text": "idea which is an ide brought to you by",
    "start": "66640",
    "end": "68640"
  },
  {
    "text": "the same company that invented the",
    "start": "68640",
    "end": "70240"
  },
  {
    "text": "language inside the file use the fun",
    "start": "70240",
    "end": "72159"
  },
  {
    "text": "keyword to define a main function this",
    "start": "72159",
    "end": "74479"
  },
  {
    "text": "is where your code will start executing",
    "start": "74479",
    "end": "76159"
  },
  {
    "text": "and that syntax is a lot more fun to",
    "start": "76159",
    "end": "77920"
  },
  {
    "text": "write than public static void main",
    "start": "77920",
    "end": "79840"
  },
  {
    "text": "string args declare a variable with the",
    "start": "79840",
    "end": "81840"
  },
  {
    "text": "var keyword assign a value and its type",
    "start": "81840",
    "end": "84240"
  },
  {
    "text": "will be inferred automatically or you",
    "start": "84240",
    "end": "85920"
  },
  {
    "text": "can add a colon after the variable name",
    "start": "85920",
    "end": "87759"
  },
  {
    "text": "with an explicit type a variable can't",
    "start": "87759",
    "end": "89680"
  },
  {
    "text": "be null unless you explicitly allow it",
    "start": "89680",
    "end": "91680"
  },
  {
    "text": "with a question mark on the type now use",
    "start": "91680",
    "end": "93600"
  },
  {
    "text": "printline to log the variable to the",
    "start": "93600",
    "end": "95360"
  },
  {
    "text": "standard output notice how semicolons",
    "start": "95360",
    "end": "97439"
  },
  {
    "text": "are optional which means that line",
    "start": "97439",
    "end": "99040"
  },
  {
    "text": "breaks are significant kotlin supports",
    "start": "99040",
    "end": "100880"
  },
  {
    "text": "familiar object-oriented patterns but",
    "start": "100880",
    "end": "102880"
  },
  {
    "text": "can do special functional things that",
    "start": "102880",
    "end": "104560"
  },
  {
    "text": "java cannot like modify the behavior of",
    "start": "104560",
    "end": "106880"
  },
  {
    "text": "a class without inheritance using",
    "start": "106880",
    "end": "108720"
  },
  {
    "text": "extension functions functions are first",
    "start": "108720",
    "end": "110560"
  },
  {
    "text": "class objects which means they can be",
    "start": "110560",
    "end": "112159"
  },
  {
    "text": "stored as variables passed as arguments",
    "start": "112159",
    "end": "114479"
  },
  {
    "text": "or used anonymously with lambdas kotlin",
    "start": "114479",
    "end": "116719"
  },
  {
    "text": "also reduces boilerplate with things",
    "start": "116719",
    "end": "118399"
  },
  {
    "text": "like data classes so you don't have to",
    "start": "118399",
    "end": "120079"
  },
  {
    "text": "write constructors getters and setters",
    "start": "120079",
    "end": "121840"
  },
  {
    "text": "and supports destructuring when",
    "start": "121840",
    "end": "123360"
  },
  {
    "text": "accessing the values on an object",
    "start": "123360",
    "end": "125200"
  },
  {
    "text": "allowing you to write concise efficient",
    "start": "125200",
    "end": "127040"
  },
  {
    "text": "code that you can then compile to a jar",
    "start": "127040",
    "end": "129039"
  },
  {
    "text": "file by pulling up the terminal and",
    "start": "129039",
    "end": "130800"
  },
  {
    "text": "running the kotlin compiler this has",
    "start": "130800",
    "end": "132560"
  },
  {
    "text": "been kotlin in 100 seconds hit the like",
    "start": "132560",
    "end": "134800"
  },
  {
    "text": "button and subscribe if you want to see",
    "start": "134800",
    "end": "136319"
  },
  {
    "text": "more short videos like this thanks for",
    "start": "136319",
    "end": "138000"
  },
  {
    "text": "watching and i will see you in the next",
    "start": "138000",
    "end": "140000"
  },
  {
    "text": "one",
    "start": "140000",
    "end": "143000"
  }
]