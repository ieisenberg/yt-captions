[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "i recently built a chat app that can",
    "start": "160",
    "end": "1760"
  },
  {
    "text": "handle thousands of messages per second",
    "start": "1760",
    "end": "3520"
  },
  {
    "text": "scales around the world and cost me",
    "start": "3520",
    "end": "5440"
  },
  {
    "text": "nothing to run but the real weird thing",
    "start": "5440",
    "end": "7279"
  },
  {
    "text": "about it is that the data and",
    "start": "7279",
    "end": "8639"
  },
  {
    "text": "infrastructure is not controlled by a",
    "start": "8639",
    "end": "10559"
  },
  {
    "text": "big tech company instead it's",
    "start": "10559",
    "end": "12320"
  },
  {
    "text": "decentralized across the entire user",
    "start": "12320",
    "end": "14240"
  },
  {
    "text": "base using web technologies in fact you",
    "start": "14240",
    "end": "16640"
  },
  {
    "text": "can chat with me right now on the live",
    "start": "16640",
    "end": "18240"
  },
  {
    "text": "demo by going to gunchatdap.web.app",
    "start": "18240",
    "end": "21439"
  },
  {
    "text": "again that's",
    "start": "21439",
    "end": "22760"
  },
  {
    "text": "gunchatdap.web.app and i'm trusting you",
    "start": "22760",
    "end": "24560"
  },
  {
    "text": "not to hack it to pieces this time in",
    "start": "24560",
    "end": "26240"
  },
  {
    "text": "today's video we'll build a",
    "start": "26240",
    "end": "27680"
  },
  {
    "text": "decentralized chat app or dap if you",
    "start": "27680",
    "end": "29840"
  },
  {
    "text": "prefer similar to youtube super chat",
    "start": "29840",
    "end": "32238"
  },
  {
    "text": "using a library called gun js in the",
    "start": "32239",
    "end": "34800"
  },
  {
    "text": "process you'll learn about the benefits",
    "start": "34800",
    "end": "36399"
  },
  {
    "text": "of building a decentralized app along",
    "start": "36399",
    "end": "38320"
  },
  {
    "text": "with the weird trade-offs and challenges",
    "start": "38320",
    "end": "40160"
  },
  {
    "text": "for the front end ui we'll use svelt a",
    "start": "40160",
    "end": "42239"
  },
  {
    "text": "javascript library that's not sponsored",
    "start": "42239",
    "end": "44079"
  },
  {
    "text": "by big tech if you're new here like and",
    "start": "44079",
    "end": "45600"
  },
  {
    "text": "subscribe and you'll find the full",
    "start": "45600",
    "end": "47120"
  },
  {
    "text": "source code on github then i want to",
    "start": "47120",
    "end": "48879"
  },
  {
    "text": "give a shout out to mark nadal the",
    "start": "48879",
    "end": "50879"
  },
  {
    "text": "creator of gun js who donated a bunch of",
    "start": "50879",
    "end": "53039"
  },
  {
    "text": "his time to answer all my questions and",
    "start": "53039",
    "end": "54960"
  },
  {
    "text": "help make this video happen before we",
    "start": "54960",
    "end": "56719"
  },
  {
    "start": "56000",
    "end": "191000"
  },
  {
    "text": "jump into the code let's first answer",
    "start": "56719",
    "end": "58480"
  },
  {
    "text": "the question of how does this thing",
    "start": "58480",
    "end": "60079"
  },
  {
    "text": "actually work i made a short video about",
    "start": "60079",
    "end": "62160"
  },
  {
    "text": "gun js a few weeks ago and you guys had",
    "start": "62160",
    "end": "64158"
  },
  {
    "text": "a ton of questions about it at a high",
    "start": "64159",
    "end": "66000"
  },
  {
    "text": "level gun js is a decentralized graph",
    "start": "66000",
    "end": "68560"
  },
  {
    "text": "database a normal database would store",
    "start": "68560",
    "end": "70799"
  },
  {
    "text": "all of your data in a hard disk",
    "start": "70799",
    "end": "72320"
  },
  {
    "text": "somewhere in the cloud it may be sharded",
    "start": "72320",
    "end": "74159"
  },
  {
    "text": "across multiple machines but for all",
    "start": "74159",
    "end": "75920"
  },
  {
    "text": "intents and purposes you can imagine",
    "start": "75920",
    "end": "77600"
  },
  {
    "text": "your entire data set on a single disk",
    "start": "77600",
    "end": "79920"
  },
  {
    "text": "gun on the other hand stores a small",
    "start": "79920",
    "end": "81920"
  },
  {
    "text": "subset of data on each user based on the",
    "start": "81920",
    "end": "84640"
  },
  {
    "text": "actual data that they consume in the",
    "start": "84640",
    "end": "86320"
  },
  {
    "text": "application when a user makes a query",
    "start": "86320",
    "end": "88320"
  },
  {
    "text": "for some data it will search across the",
    "start": "88320",
    "end": "90159"
  },
  {
    "text": "network for other users that have that",
    "start": "90159",
    "end": "91920"
  },
  {
    "text": "data and sync it up using technologies",
    "start": "91920",
    "end": "94320"
  },
  {
    "text": "like webrtc so you can think of the",
    "start": "94320",
    "end": "96400"
  },
  {
    "text": "entire database as the union of all",
    "start": "96400",
    "end": "98720"
  },
  {
    "text": "peers on the network the idea is very",
    "start": "98720",
    "end": "100640"
  },
  {
    "text": "similar to a blockchain ledger where no",
    "start": "100640",
    "end": "102799"
  },
  {
    "text": "one individual has control of the entire",
    "start": "102799",
    "end": "104880"
  },
  {
    "text": "network but it's important to point out",
    "start": "104880",
    "end": "106560"
  },
  {
    "text": "that this is not blockchain technology",
    "start": "106560",
    "end": "108560"
  },
  {
    "text": "which tends to be too slow and just",
    "start": "108560",
    "end": "110399"
  },
  {
    "text": "unnecessary to build something like a",
    "start": "110399",
    "end": "112240"
  },
  {
    "text": "super chat however it does rely heavily",
    "start": "112240",
    "end": "114399"
  },
  {
    "text": "on cryptography to implement things like",
    "start": "114399",
    "end": "116640"
  },
  {
    "text": "user authentication when you create a",
    "start": "116640",
    "end": "118479"
  },
  {
    "text": "new user account a cryptographically",
    "start": "118479",
    "end": "120479"
  },
  {
    "text": "secure key pair is generated the",
    "start": "120479",
    "end": "122240"
  },
  {
    "text": "username is associated with a public key",
    "start": "122240",
    "end": "124320"
  },
  {
    "text": "so past messages can be found and the",
    "start": "124320",
    "end": "126079"
  },
  {
    "text": "password is a proof of work seed to",
    "start": "126079",
    "end": "128239"
  },
  {
    "text": "prove and decrypt access to the",
    "start": "128239",
    "end": "130160"
  },
  {
    "text": "account's private keys in addition it's",
    "start": "130160",
    "end": "132400"
  },
  {
    "text": "possible to implement end-to-end",
    "start": "132400",
    "end": "133840"
  },
  {
    "text": "encryption which we'll do in this demo",
    "start": "133840",
    "end": "135840"
  },
  {
    "text": "but we'll talk more about that later in",
    "start": "135840",
    "end": "137360"
  },
  {
    "text": "the video another good question is how",
    "start": "137360",
    "end": "139680"
  },
  {
    "text": "is data persisted and what happens if a",
    "start": "139680",
    "end": "141840"
  },
  {
    "text": "user just clears out their browser cache",
    "start": "141840",
    "end": "143840"
  },
  {
    "text": "by default data is stored in the",
    "start": "143840",
    "end": "145520"
  },
  {
    "text": "browser's local storage which is limited",
    "start": "145520",
    "end": "147599"
  },
  {
    "text": "to 5 megabytes and if a user clears out",
    "start": "147599",
    "end": "149840"
  },
  {
    "text": "the data in local storage it could",
    "start": "149840",
    "end": "151519"
  },
  {
    "text": "potentially be lost if it's not",
    "start": "151519",
    "end": "152959"
  },
  {
    "text": "somewhere else on the network that's",
    "start": "152959",
    "end": "154560"
  },
  {
    "text": "probably not acceptable if you're",
    "start": "154560",
    "end": "155920"
  },
  {
    "text": "building a production grade app but what",
    "start": "155920",
    "end": "157840"
  },
  {
    "text": "you can do is deploy a relay server that",
    "start": "157840",
    "end": "160480"
  },
  {
    "text": "uses a different storage mechanism",
    "start": "160480",
    "end": "162160"
  },
  {
    "text": "called radix that can store a lot more",
    "start": "162160",
    "end": "163840"
  },
  {
    "text": "data on the disk of an actual server and",
    "start": "163840",
    "end": "166080"
  },
  {
    "text": "that makes the network more robust",
    "start": "166080",
    "end": "167599"
  },
  {
    "text": "because a query can fall back to a relay",
    "start": "167599",
    "end": "169680"
  },
  {
    "text": "if it's not available from another peer",
    "start": "169680",
    "end": "171680"
  },
  {
    "text": "now another really important concept to",
    "start": "171680",
    "end": "173440"
  },
  {
    "text": "understand is that when you create a",
    "start": "173440",
    "end": "175120"
  },
  {
    "text": "node in the database it'll be available",
    "start": "175120",
    "end": "177040"
  },
  {
    "text": "to the entire decentralized network that",
    "start": "177040",
    "end": "179280"
  },
  {
    "text": "means another developer can easily",
    "start": "179280",
    "end": "181040"
  },
  {
    "text": "access your public data by simply",
    "start": "181040",
    "end": "182879"
  },
  {
    "text": "knowing the name of the node where it's",
    "start": "182879",
    "end": "184480"
  },
  {
    "text": "stored now it is possible to encrypt",
    "start": "184480",
    "end": "186560"
  },
  {
    "text": "data and things like that but it just",
    "start": "186560",
    "end": "188400"
  },
  {
    "text": "requires a completely different mental",
    "start": "188400",
    "end": "190000"
  },
  {
    "text": "model than you might be used to let's go",
    "start": "190000",
    "end": "191840"
  },
  {
    "start": "191000",
    "end": "210000"
  },
  {
    "text": "ahead and jump into the source code i'm",
    "start": "191840",
    "end": "193120"
  },
  {
    "text": "not going to cover every single line of",
    "start": "193120",
    "end": "194560"
  },
  {
    "text": "code in this project and instead just",
    "start": "194560",
    "end": "196319"
  },
  {
    "text": "focus on the important parts related to",
    "start": "196319",
    "end": "198000"
  },
  {
    "text": "the database what we have here is a",
    "start": "198000",
    "end": "199920"
  },
  {
    "text": "spelt app with two main features email",
    "start": "199920",
    "end": "202159"
  },
  {
    "text": "password user authentication and then a",
    "start": "202159",
    "end": "204159"
  },
  {
    "text": "massive group chat room that anybody can",
    "start": "204159",
    "end": "206080"
  },
  {
    "text": "join the only dependency in this project",
    "start": "206080",
    "end": "208239"
  },
  {
    "text": "is gun which can be installed with npm",
    "start": "208239",
    "end": "210799"
  },
  {
    "start": "210000",
    "end": "463000"
  },
  {
    "text": "the first thing we'll focus on is user",
    "start": "210799",
    "end": "212640"
  },
  {
    "text": "authentication and to do that i'm",
    "start": "212640",
    "end": "214480"
  },
  {
    "text": "creating a file called user.js at the",
    "start": "214480",
    "end": "217120"
  },
  {
    "text": "top of the file we'll import gun and",
    "start": "217120",
    "end": "219120"
  },
  {
    "text": "below that import two supporting",
    "start": "219120",
    "end": "220879"
  },
  {
    "text": "libraries the first one c which stands",
    "start": "220879",
    "end": "223280"
  },
  {
    "text": "for security encryption and",
    "start": "223280",
    "end": "225280"
  },
  {
    "text": "authorization and is the module that",
    "start": "225280",
    "end": "227440"
  },
  {
    "text": "enables user authentication next we have",
    "start": "227440",
    "end": "229760"
  },
  {
    "text": "ax which stands for advanced exchange",
    "start": "229760",
    "end": "232000"
  },
  {
    "text": "equation and is basically an alternative",
    "start": "232000",
    "end": "234319"
  },
  {
    "text": "way to connect peers together and tends",
    "start": "234319",
    "end": "236400"
  },
  {
    "text": "to be more performant for a chat app",
    "start": "236400",
    "end": "238239"
  },
  {
    "text": "like this and there's a whole dock on it",
    "start": "238239",
    "end": "240080"
  },
  {
    "text": "if you want to learn more from there",
    "start": "240080",
    "end": "241439"
  },
  {
    "text": "we'll create a variable called db to",
    "start": "241439",
    "end": "243599"
  },
  {
    "text": "initialize the database then we'll use",
    "start": "243599",
    "end": "245280"
  },
  {
    "text": "it to make a reference to the currently",
    "start": "245280",
    "end": "247280"
  },
  {
    "text": "authenticated user i'm also chaining the",
    "start": "247280",
    "end": "249360"
  },
  {
    "text": "option of recall to session storage here",
    "start": "249360",
    "end": "251680"
  },
  {
    "text": "so the user stays logged in between",
    "start": "251680",
    "end": "253439"
  },
  {
    "text": "browser sessions now to manage the user",
    "start": "253439",
    "end": "255840"
  },
  {
    "text": "in the app we need to know if the user",
    "start": "255840",
    "end": "257680"
  },
  {
    "text": "is logged in and we also want their",
    "start": "257680",
    "end": "259680"
  },
  {
    "text": "username so we can show it in the ui we",
    "start": "259680",
    "end": "262240"
  },
  {
    "text": "can get the username by making a",
    "start": "262240",
    "end": "263840"
  },
  {
    "text": "reference to the user then calling git",
    "start": "263840",
    "end": "266240"
  },
  {
    "text": "alias which will be the value of",
    "start": "266240",
    "end": "268000"
  },
  {
    "text": "whatever username they choose when they",
    "start": "268000",
    "end": "269600"
  },
  {
    "text": "sign up now we're going to use this",
    "start": "269600",
    "end": "271280"
  },
  {
    "text": "value frequently throughout the",
    "start": "271280",
    "end": "272479"
  },
  {
    "text": "application so i'm importing writable",
    "start": "272479",
    "end": "274800"
  },
  {
    "text": "from spelt store to make it reactive a",
    "start": "274800",
    "end": "277360"
  },
  {
    "text": "store is like an observable value that",
    "start": "277360",
    "end": "279520"
  },
  {
    "text": "will re-render the ui whenever it's",
    "start": "279520",
    "end": "281440"
  },
  {
    "text": "changed and it can be shared across",
    "start": "281440",
    "end": "283199"
  },
  {
    "text": "multiple components so whenever the",
    "start": "283199",
    "end": "285040"
  },
  {
    "text": "alias for the current user updates we'll",
    "start": "285040",
    "end": "287040"
  },
  {
    "text": "set the value of the store to that value",
    "start": "287040",
    "end": "289520"
  },
  {
    "text": "but we also want to listen to changes to",
    "start": "289520",
    "end": "291440"
  },
  {
    "text": "the auth state when the user signs in or",
    "start": "291440",
    "end": "293600"
  },
  {
    "text": "signs out to handle that we'll listen to",
    "start": "293600",
    "end": "295759"
  },
  {
    "text": "the auth event on the database and",
    "start": "295759",
    "end": "297840"
  },
  {
    "text": "basically do the same thing here where",
    "start": "297840",
    "end": "299360"
  },
  {
    "text": "we fetch the alias and then set that as",
    "start": "299360",
    "end": "301680"
  },
  {
    "text": "the value on the store now i'm going to",
    "start": "301680",
    "end": "304080"
  },
  {
    "text": "kind of do things in reverse here",
    "start": "304080",
    "end": "305440"
  },
  {
    "text": "because i first want to show you how the",
    "start": "305440",
    "end": "307440"
  },
  {
    "text": "store works in spelt we have this header",
    "start": "307440",
    "end": "309360"
  },
  {
    "text": "component here that will show the title",
    "start": "309360",
    "end": "311039"
  },
  {
    "text": "of the app if you're not logged in but",
    "start": "311039",
    "end": "312800"
  },
  {
    "text": "if you are logged in it'll show your",
    "start": "312800",
    "end": "314400"
  },
  {
    "text": "username as well as your avatar now",
    "start": "314400",
    "end": "316800"
  },
  {
    "text": "implementing sign out is really easy all",
    "start": "316800",
    "end": "318880"
  },
  {
    "text": "we have to do is import the username",
    "start": "318880",
    "end": "320880"
  },
  {
    "text": "store and the gun user object then we'll",
    "start": "320880",
    "end": "323280"
  },
  {
    "text": "create a function called sign out that",
    "start": "323280",
    "end": "325120"
  },
  {
    "text": "calls leave on the user and sets the",
    "start": "325120",
    "end": "327440"
  },
  {
    "text": "username store to an empty string then",
    "start": "327440",
    "end": "329680"
  },
  {
    "text": "down in the html we have a button that",
    "start": "329680",
    "end": "332000"
  },
  {
    "text": "when clicked we'll call the sign out",
    "start": "332000",
    "end": "333680"
  },
  {
    "text": "function but we only want to show that",
    "start": "333680",
    "end": "335680"
  },
  {
    "text": "button if the user is signed in and the",
    "start": "335680",
    "end": "337520"
  },
  {
    "text": "way we can tell if a user is signed in",
    "start": "337520",
    "end": "339280"
  },
  {
    "text": "is if their username is present the cool",
    "start": "339280",
    "end": "341520"
  },
  {
    "text": "thing about svelt is that we can easily",
    "start": "341520",
    "end": "343280"
  },
  {
    "text": "do that with a store in any component by",
    "start": "343280",
    "end": "345520"
  },
  {
    "text": "adding an if statement followed by a",
    "start": "345520",
    "end": "347759"
  },
  {
    "text": "dollar sign and then the name of the",
    "start": "347759",
    "end": "349520"
  },
  {
    "text": "store the dollar sign will subscribe to",
    "start": "349520",
    "end": "351520"
  },
  {
    "text": "the store and react to any changes that",
    "start": "351520",
    "end": "353600"
  },
  {
    "text": "happen to it if the username does exist",
    "start": "353600",
    "end": "355840"
  },
  {
    "text": "then we'll go ahead and show the",
    "start": "355840",
    "end": "357120"
  },
  {
    "text": "username by subscribing to the store",
    "start": "357120",
    "end": "359039"
  },
  {
    "text": "once again we can also do the same thing",
    "start": "359039",
    "end": "361120"
  },
  {
    "text": "to show an avatar with the user's",
    "start": "361120",
    "end": "362720"
  },
  {
    "text": "initials by using the awesome dicepare",
    "start": "362720",
    "end": "365199"
  },
  {
    "text": "api i made a short video about this",
    "start": "365199",
    "end": "367039"
  },
  {
    "text": "already but dicebear will basically make",
    "start": "367039",
    "end": "368960"
  },
  {
    "text": "a unique avatar based on the username as",
    "start": "368960",
    "end": "371440"
  },
  {
    "text": "the random seat then after that we have",
    "start": "371440",
    "end": "373280"
  },
  {
    "text": "a button that fires the sign out",
    "start": "373280",
    "end": "375039"
  },
  {
    "text": "function when clicked and finally we'll",
    "start": "375039",
    "end": "377039"
  },
  {
    "text": "add an else block here to show something",
    "start": "377039",
    "end": "378960"
  },
  {
    "text": "else if the user is not logged in that",
    "start": "378960",
    "end": "381199"
  },
  {
    "text": "takes care of the header component and",
    "start": "381199",
    "end": "382720"
  },
  {
    "text": "you'll notice that i'm declaring it here",
    "start": "382720",
    "end": "384639"
  },
  {
    "text": "in the app component and now we can move",
    "start": "384639",
    "end": "386479"
  },
  {
    "text": "on to the login component that will",
    "start": "386479",
    "end": "388080"
  },
  {
    "text": "allow the user to sign in or sign up",
    "start": "388080",
    "end": "390400"
  },
  {
    "text": "with their username and password in the",
    "start": "390400",
    "end": "392240"
  },
  {
    "text": "component we'll import the user object",
    "start": "392240",
    "end": "394400"
  },
  {
    "text": "then set up local state for the username",
    "start": "394400",
    "end": "396720"
  },
  {
    "text": "and password in svelt we can implement",
    "start": "396720",
    "end": "398800"
  },
  {
    "text": "two-way data binding with a variable by",
    "start": "398800",
    "end": "401120"
  },
  {
    "text": "creating a form input and then saying",
    "start": "401120",
    "end": "403440"
  },
  {
    "text": "bind value to that variable that means",
    "start": "403440",
    "end": "405919"
  },
  {
    "text": "anytime the user types into the form the",
    "start": "405919",
    "end": "407919"
  },
  {
    "text": "value of the variable will change we",
    "start": "407919",
    "end": "410000"
  },
  {
    "text": "have separate form inputs for username",
    "start": "410000",
    "end": "411840"
  },
  {
    "text": "and password and we'll share them for",
    "start": "411840",
    "end": "413599"
  },
  {
    "text": "both the login and signup process which",
    "start": "413599",
    "end": "416080"
  },
  {
    "text": "itself just consists of two different",
    "start": "416080",
    "end": "417919"
  },
  {
    "text": "buttons that will either call the login",
    "start": "417919",
    "end": "420000"
  },
  {
    "text": "function or the sign up function to log",
    "start": "420000",
    "end": "422240"
  },
  {
    "text": "a user in we use the user auth method it",
    "start": "422240",
    "end": "425120"
  },
  {
    "text": "takes the username and password as",
    "start": "425120",
    "end": "427199"
  },
  {
    "text": "arguments then the third argument allows",
    "start": "427199",
    "end": "429199"
  },
  {
    "text": "you to define a callback in this case",
    "start": "429199",
    "end": "431199"
  },
  {
    "text": "the value of the store that we set up",
    "start": "431199",
    "end": "432720"
  },
  {
    "text": "earlier will update automatically but we",
    "start": "432720",
    "end": "434720"
  },
  {
    "text": "can do other things here as well like",
    "start": "434720",
    "end": "436479"
  },
  {
    "text": "error handling now the process to sign",
    "start": "436479",
    "end": "438560"
  },
  {
    "text": "up a new user is very similar but",
    "start": "438560",
    "end": "440639"
  },
  {
    "text": "instead of calling auth we call that",
    "start": "440639",
    "end": "442400"
  },
  {
    "text": "create method on the user and if the",
    "start": "442400",
    "end": "444160"
  },
  {
    "text": "user creation is successful then we will",
    "start": "444160",
    "end": "446240"
  },
  {
    "text": "log that user in automatically now at",
    "start": "446240",
    "end": "448319"
  },
  {
    "text": "this point we have a working user",
    "start": "448319",
    "end": "450080"
  },
  {
    "text": "authentication system but one thing to",
    "start": "450080",
    "end": "452080"
  },
  {
    "text": "keep in mind here is that we're not",
    "start": "452080",
    "end": "453680"
  },
  {
    "text": "enforcing the uniqueness of the username",
    "start": "453680",
    "end": "455919"
  },
  {
    "text": "which is just a caveat you'll want to",
    "start": "455919",
    "end": "457440"
  },
  {
    "text": "keep in mind i should mention that it is",
    "start": "457440",
    "end": "459280"
  },
  {
    "text": "possible to enforce username uniqueness",
    "start": "459280",
    "end": "461280"
  },
  {
    "text": "but it's beyond the scope of this video",
    "start": "461280",
    "end": "463199"
  },
  {
    "start": "463000",
    "end": "647000"
  },
  {
    "text": "now we can move on to the chat component",
    "start": "463199",
    "end": "464800"
  },
  {
    "text": "which is where we will query items from",
    "start": "464800",
    "end": "466800"
  },
  {
    "text": "the database and also give the user the",
    "start": "466800",
    "end": "468560"
  },
  {
    "text": "ability to send a message the component",
    "start": "468560",
    "end": "470879"
  },
  {
    "text": "has two pieces of state a string for a",
    "start": "470879",
    "end": "472879"
  },
  {
    "text": "new message that the user will type into",
    "start": "472879",
    "end": "474800"
  },
  {
    "text": "a form input and an array of messages",
    "start": "474800",
    "end": "476879"
  },
  {
    "text": "which will contain the message text",
    "start": "476879",
    "end": "478879"
  },
  {
    "text": "along with the user who sent it and a",
    "start": "478879",
    "end": "480720"
  },
  {
    "text": "time stamp to query messages i'm going",
    "start": "480720",
    "end": "483120"
  },
  {
    "text": "to set up the on mount lifecycle hook",
    "start": "483120",
    "end": "485680"
  },
  {
    "text": "that will run whenever the component is",
    "start": "485680",
    "end": "487520"
  },
  {
    "text": "first initialized inside of it we'll use",
    "start": "487520",
    "end": "489680"
  },
  {
    "text": "the database to make a reference to the",
    "start": "489680",
    "end": "492000"
  },
  {
    "text": "chat node in this demo since we have one",
    "start": "492000",
    "end": "494160"
  },
  {
    "text": "giant super chat we can just give it a",
    "start": "494160",
    "end": "495919"
  },
  {
    "text": "name of chat but if you have multiple",
    "start": "495919",
    "end": "497599"
  },
  {
    "text": "chat rooms you'd likely want to give",
    "start": "497599",
    "end": "499199"
  },
  {
    "text": "each one a different name after that",
    "start": "499199",
    "end": "500960"
  },
  {
    "text": "we'll call map to basically loop over",
    "start": "500960",
    "end": "503360"
  },
  {
    "text": "every single message in the chat and",
    "start": "503360",
    "end": "505120"
  },
  {
    "text": "then call once to only read each message",
    "start": "505120",
    "end": "507360"
  },
  {
    "text": "once in this case each message is",
    "start": "507360",
    "end": "509280"
  },
  {
    "text": "immutable so we don't need to listen to",
    "start": "509280",
    "end": "510800"
  },
  {
    "text": "changes in real time but you could do",
    "start": "510800",
    "end": "512640"
  },
  {
    "text": "that if you wanted to using the on",
    "start": "512640",
    "end": "514399"
  },
  {
    "text": "method we can then define a callback",
    "start": "514399",
    "end": "516240"
  },
  {
    "text": "that will be called on each new message",
    "start": "516240",
    "end": "518320"
  },
  {
    "text": "that will give us access to the data and",
    "start": "518320",
    "end": "520399"
  },
  {
    "text": "the id of that node now if the data is",
    "start": "520399",
    "end": "522959"
  },
  {
    "text": "defined we're going to format a message",
    "start": "522959",
    "end": "525120"
  },
  {
    "text": "that's more suitable for the ui with the",
    "start": "525120",
    "end": "527279"
  },
  {
    "text": "properties of who what and when who is",
    "start": "527279",
    "end": "530399"
  },
  {
    "text": "the user that sent the message and we",
    "start": "530399",
    "end": "532160"
  },
  {
    "text": "can figure out who sent it by taking",
    "start": "532160",
    "end": "534320"
  },
  {
    "text": "that data of the raw message and using",
    "start": "534320",
    "end": "536640"
  },
  {
    "text": "it to get the alias next we have what",
    "start": "536640",
    "end": "539120"
  },
  {
    "text": "which is the actual text of the user's",
    "start": "539120",
    "end": "541040"
  },
  {
    "text": "message but the interesting thing here",
    "start": "541040",
    "end": "542959"
  },
  {
    "text": "is that we're actually implementing",
    "start": "542959",
    "end": "544640"
  },
  {
    "text": "end-to-end encryption that means the",
    "start": "544640",
    "end": "546320"
  },
  {
    "text": "value in the database is encrypted and",
    "start": "546320",
    "end": "548480"
  },
  {
    "text": "the only way to decrypt it is to have",
    "start": "548480",
    "end": "550480"
  },
  {
    "text": "the corresponding key in this demo our",
    "start": "550480",
    "end": "552640"
  },
  {
    "text": "data is encrypted but it's not really",
    "start": "552640",
    "end": "554399"
  },
  {
    "text": "secure because i'm just hard coding the",
    "start": "554399",
    "end": "556240"
  },
  {
    "text": "encryption key right here in the source",
    "start": "556240",
    "end": "557760"
  },
  {
    "text": "code so anybody could find it but if it",
    "start": "557760",
    "end": "559920"
  },
  {
    "text": "was an actual secret between two users",
    "start": "559920",
    "end": "562000"
  },
  {
    "text": "you could use it to encrypt and decrypt",
    "start": "562000",
    "end": "564000"
  },
  {
    "text": "messages and finally we have the win",
    "start": "564000",
    "end": "566080"
  },
  {
    "text": "property to get an accurate timestamp",
    "start": "566080",
    "end": "568080"
  },
  {
    "text": "across all of our users we're using gun",
    "start": "568080",
    "end": "570399"
  },
  {
    "text": "state as the final source of truth with",
    "start": "570399",
    "end": "572399"
  },
  {
    "text": "the raw data that'll give us all the",
    "start": "572399",
    "end": "574240"
  },
  {
    "text": "data we need for the ui then the final",
    "start": "574240",
    "end": "576160"
  },
  {
    "text": "step is to take each message and add it",
    "start": "576160",
    "end": "578240"
  },
  {
    "text": "to an array that we can then loop over",
    "start": "578240",
    "end": "580080"
  },
  {
    "text": "in the ui with spelled you can loop over",
    "start": "580080",
    "end": "582320"
  },
  {
    "text": "an array of items in svelt with each",
    "start": "582320",
    "end": "584560"
  },
  {
    "text": "this will render the chat message",
    "start": "584560",
    "end": "586000"
  },
  {
    "text": "component for each message in the array",
    "start": "586000",
    "end": "588640"
  },
  {
    "text": "and also notice how i'm adding",
    "start": "588640",
    "end": "590160"
  },
  {
    "text": "parentheses with message win which",
    "start": "590160",
    "end": "592720"
  },
  {
    "text": "provides felt with a unique key to sort",
    "start": "592720",
    "end": "595200"
  },
  {
    "text": "all of the messages efficiently that",
    "start": "595200",
    "end": "597040"
  },
  {
    "text": "gives us a way to read messages in the",
    "start": "597040",
    "end": "598880"
  },
  {
    "text": "chat now we just need a form to submit",
    "start": "598880",
    "end": "601120"
  },
  {
    "text": "them in the ui you'll notice that i have",
    "start": "601120",
    "end": "603360"
  },
  {
    "text": "a form that on the submit event we'll",
    "start": "603360",
    "end": "605760"
  },
  {
    "text": "call the send message function inside",
    "start": "605760",
    "end": "607920"
  },
  {
    "text": "the function the first thing we'll want",
    "start": "607920",
    "end": "609440"
  },
  {
    "text": "to do is use c to encrypt the actual",
    "start": "609440",
    "end": "612079"
  },
  {
    "text": "message text and notice how the key is",
    "start": "612079",
    "end": "613920"
  },
  {
    "text": "the same as the one we used earlier to",
    "start": "613920",
    "end": "615920"
  },
  {
    "text": "decrypt the messages from there we can",
    "start": "615920",
    "end": "617920"
  },
  {
    "text": "associate the message to the current",
    "start": "617920",
    "end": "619600"
  },
  {
    "text": "user using the encrypted message as the",
    "start": "619600",
    "end": "621839"
  },
  {
    "text": "value then we'll create a date to serve",
    "start": "621839",
    "end": "624000"
  },
  {
    "text": "as the index for the message so it can",
    "start": "624000",
    "end": "625920"
  },
  {
    "text": "be sorted properly at which point we can",
    "start": "625920",
    "end": "627920"
  },
  {
    "text": "reference the chat collection create a",
    "start": "627920",
    "end": "629680"
  },
  {
    "text": "new node based on that index and store",
    "start": "629680",
    "end": "631839"
  },
  {
    "text": "the message value congratulations you",
    "start": "631839",
    "end": "634000"
  },
  {
    "text": "just built a decentralized chat app",
    "start": "634000",
    "end": "636160"
  },
  {
    "text": "it'll be interesting to see if this",
    "start": "636160",
    "end": "637519"
  },
  {
    "text": "thing actually works when the video is",
    "start": "637519",
    "end": "638959"
  },
  {
    "text": "released let me know how things go for",
    "start": "638959",
    "end": "640640"
  },
  {
    "text": "you in the comments make sure to like",
    "start": "640640",
    "end": "642320"
  },
  {
    "text": "and subscribe thanks for watching and i",
    "start": "642320",
    "end": "644399"
  },
  {
    "text": "will see you in the next one",
    "start": "644399",
    "end": "647839"
  }
]