[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "560"
  },
  {
    "text": "ruby a dynamic interpreted scripting",
    "start": "560",
    "end": "2639"
  },
  {
    "text": "language made famous for taking",
    "start": "2639",
    "end": "4240"
  },
  {
    "text": "simplicity and code readability to the",
    "start": "4240",
    "end": "6319"
  },
  {
    "text": "extreme it was first conceived by",
    "start": "6319",
    "end": "7919"
  },
  {
    "text": "yukihiro matsumoto aka mats in 1993 as",
    "start": "7919",
    "end": "11679"
  },
  {
    "text": "an easy-to-use scripting language like",
    "start": "11679",
    "end": "13280"
  },
  {
    "text": "python but with genuine object-oriented",
    "start": "13280",
    "end": "15519"
  },
  {
    "text": "features like smalltalk it exploded in",
    "start": "15519",
    "end": "17440"
  },
  {
    "text": "popularity after david hanemeyer hansen",
    "start": "17440",
    "end": "19920"
  },
  {
    "text": "aka dhh created rails in 2005 a model",
    "start": "19920",
    "end": "23760"
  },
  {
    "text": "view controller framework at the time it",
    "start": "23760",
    "end": "25519"
  },
  {
    "text": "was a game changer for startups because",
    "start": "25519",
    "end": "27359"
  },
  {
    "text": "it reduced the complexity required to",
    "start": "27359",
    "end": "29039"
  },
  {
    "text": "build a full stack web application and",
    "start": "29039",
    "end": "30880"
  },
  {
    "text": "has been used to build unicorns like",
    "start": "30880",
    "end": "32398"
  },
  {
    "text": "twitter shopify github and airbnb just",
    "start": "32399",
    "end": "34960"
  },
  {
    "text": "to name a few ruby is often called a",
    "start": "34960",
    "end": "36800"
  },
  {
    "text": "programmer's best friend thanks to its",
    "start": "36800",
    "end": "38399"
  },
  {
    "start": "38000",
    "end": "61000"
  },
  {
    "text": "minimal syntax that relies on plain",
    "start": "38399",
    "end": "40399"
  },
  {
    "text": "english words and the use of blocks to",
    "start": "40399",
    "end": "42320"
  },
  {
    "text": "write concise functional code at the",
    "start": "42320",
    "end": "44320"
  },
  {
    "text": "same time it's a true object-oriented",
    "start": "44320",
    "end": "46399"
  },
  {
    "text": "language where everything is an object",
    "start": "46399",
    "end": "48320"
  },
  {
    "text": "and every object can be modified giving",
    "start": "48320",
    "end": "50399"
  },
  {
    "text": "developers the flexibility to extend or",
    "start": "50399",
    "end": "52559"
  },
  {
    "text": "modify the behavior of the underlying",
    "start": "52559",
    "end": "54399"
  },
  {
    "text": "language the developer ecosystem is",
    "start": "54399",
    "end": "56399"
  },
  {
    "text": "large and mature code is shared between",
    "start": "56399",
    "end": "58160"
  },
  {
    "text": "developers with the rubygems package",
    "start": "58160",
    "end": "60000"
  },
  {
    "text": "manager where a program is organized",
    "start": "60000",
    "end": "61920"
  },
  {
    "start": "61000",
    "end": "156000"
  },
  {
    "text": "into a self-contained format called a",
    "start": "61920",
    "end": "63600"
  },
  {
    "text": "gem to get started install ruby then",
    "start": "63600",
    "end": "65840"
  },
  {
    "text": "create a file ending in rb to declare a",
    "start": "65840",
    "end": "68400"
  },
  {
    "text": "local variable give it a name followed",
    "start": "68400",
    "end": "70240"
  },
  {
    "text": "by a value there's no variable keyword",
    "start": "70240",
    "end": "72080"
  },
  {
    "text": "but you can define constants in all caps",
    "start": "72080",
    "end": "74080"
  },
  {
    "text": "or global variables with a dollar sign",
    "start": "74080",
    "end": "76159"
  },
  {
    "text": "every value is an instance of an object",
    "start": "76159",
    "end": "78080"
  },
  {
    "text": "which means we can call methods directly",
    "start": "78080",
    "end": "79759"
  },
  {
    "text": "on a string like so and parentheses are",
    "start": "79759",
    "end": "81840"
  },
  {
    "text": "usually optional ruby is dynamically",
    "start": "81840",
    "end": "83759"
  },
  {
    "text": "typed which means there's no type",
    "start": "83759",
    "end": "85040"
  },
  {
    "text": "annotations however modern tools like",
    "start": "85040",
    "end": "87119"
  },
  {
    "text": "rbs can add a type system on top of it",
    "start": "87119",
    "end": "89439"
  },
  {
    "text": "kind of like how typescript does for",
    "start": "89439",
    "end": "90799"
  },
  {
    "text": "javascript now to print a value to the",
    "start": "90799",
    "end": "92640"
  },
  {
    "text": "standard output use the puts method we",
    "start": "92640",
    "end": "94880"
  },
  {
    "text": "can define our own custom methods using",
    "start": "94880",
    "end": "96640"
  },
  {
    "text": "the def keyword which end with the end",
    "start": "96640",
    "end": "98560"
  },
  {
    "text": "keyword every method will always return",
    "start": "98560",
    "end": "100400"
  },
  {
    "text": "exactly one object no return keyword is",
    "start": "100400",
    "end": "102640"
  },
  {
    "text": "necessary or if you don't want a named",
    "start": "102640",
    "end": "104479"
  },
  {
    "text": "method you might create a block with a",
    "start": "104479",
    "end": "106240"
  },
  {
    "text": "do keyword which works like an anonymous",
    "start": "106240",
    "end": "108159"
  },
  {
    "text": "function blocks can also take arguments",
    "start": "108159",
    "end": "110240"
  },
  {
    "text": "found in between the pipe characters now",
    "start": "110240",
    "end": "112320"
  },
  {
    "text": "use the class keyword to create",
    "start": "112320",
    "end": "113759"
  },
  {
    "text": "blueprints for your own custom objects",
    "start": "113759",
    "end": "115840"
  },
  {
    "text": "an interesting point is that ruby",
    "start": "115840",
    "end": "117360"
  },
  {
    "text": "supports duct typing which means that if",
    "start": "117360",
    "end": "119119"
  },
  {
    "text": "it walks like a duck and quacks like a",
    "start": "119119",
    "end": "120640"
  },
  {
    "text": "duck then it's a duck in other words it",
    "start": "120640",
    "end": "122399"
  },
  {
    "text": "won't throw type errors based on the",
    "start": "122399",
    "end": "123759"
  },
  {
    "text": "class itself but rather the methods that",
    "start": "123759",
    "end": "125520"
  },
  {
    "text": "are implemented on it define the",
    "start": "125520",
    "end": "126880"
  },
  {
    "text": "initialize method to run code when a new",
    "start": "126880",
    "end": "128879"
  },
  {
    "text": "object is constructed any variable that",
    "start": "128879",
    "end": "130720"
  },
  {
    "text": "starts with at belongs to an object",
    "start": "130720",
    "end": "132560"
  },
  {
    "text": "instance while any variable with a",
    "start": "132560",
    "end": "134239"
  },
  {
    "text": "double at is static and belongs to the",
    "start": "134239",
    "end": "136239"
  },
  {
    "text": "class itself you can easily add getters",
    "start": "136239",
    "end": "138239"
  },
  {
    "text": "and setters to a class using the",
    "start": "138239",
    "end": "139599"
  },
  {
    "text": "attribute accessor method and now we can",
    "start": "139599",
    "end": "141599"
  },
  {
    "text": "create a new object instance by calling",
    "start": "141599",
    "end": "143360"
  },
  {
    "text": "the new method on the class now run your",
    "start": "143360",
    "end": "145360"
  },
  {
    "text": "code with the ruby interpreter from the",
    "start": "145360",
    "end": "146800"
  },
  {
    "text": "terminal this has been ruby in 100",
    "start": "146800",
    "end": "148800"
  },
  {
    "text": "seconds hit the like button and",
    "start": "148800",
    "end": "150239"
  },
  {
    "text": "subscribe if you want to see more short",
    "start": "150239",
    "end": "151680"
  },
  {
    "text": "videos like this thanks for watching and",
    "start": "151680",
    "end": "153519"
  },
  {
    "text": "i will see you in the next one",
    "start": "153519",
    "end": "157720"
  }
]