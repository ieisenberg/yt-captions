[
  {
    "text": "Fortran a compiled imperative",
    "start": "40",
    "end": "2000"
  },
  {
    "text": "programming language famous as the first",
    "start": "2000",
    "end": "3879"
  },
  {
    "text": "ever highle language designed for humans",
    "start": "3879",
    "end": "6200"
  },
  {
    "text": "it was developed in the 1950s at IBM by",
    "start": "6200",
    "end": "8800"
  },
  {
    "text": "John bakus a guy who is too lazy to",
    "start": "8800",
    "end": "10920"
  },
  {
    "text": "write assembly for the IBM 704 Mainframe",
    "start": "10920",
    "end": "13759"
  },
  {
    "text": "computer the haters said it would never",
    "start": "13759",
    "end": "15280"
  },
  {
    "text": "be as performant as hand-coded programs",
    "start": "15280",
    "end": "17560"
  },
  {
    "text": "but by 1957 formula translator became",
    "start": "17560",
    "end": "20320"
  },
  {
    "text": "the first computer language standard at",
    "start": "20320",
    "end": "22279"
  },
  {
    "text": "the time computers were extremely rare",
    "start": "22279",
    "end": "24359"
  },
  {
    "text": "but Fortran was a huge technical",
    "start": "24359",
    "end": "25960"
  },
  {
    "text": "breakthrough because For the First Time",
    "start": "25960",
    "end": "27519"
  },
  {
    "text": "Ever people outside the computer science",
    "start": "27519",
    "end": "29359"
  },
  {
    "text": "realm could use a computer most",
    "start": "29359",
    "end": "31320"
  },
  {
    "text": "importantly the language implemented the",
    "start": "31320",
    "end": "33079"
  },
  {
    "text": "first optimizing compiler which was able",
    "start": "33079",
    "end": "35200"
  },
  {
    "text": "to produce machine code just as fast as",
    "start": "35200",
    "end": "37079"
  },
  {
    "text": "anything coded by hand the language has",
    "start": "37079",
    "end": "38960"
  },
  {
    "text": "evolved into many different versions",
    "start": "38960",
    "end": "40480"
  },
  {
    "text": "over the years and is still in use today",
    "start": "40480",
    "end": "42399"
  },
  {
    "text": "primarily for heavy duty number",
    "start": "42399",
    "end": "43840"
  },
  {
    "text": "crunching and scientific Computing when",
    "start": "43840",
    "end": "45800"
  },
  {
    "text": "you're grandma wrote Fortran back in the",
    "start": "45800",
    "end": "47399"
  },
  {
    "text": "70s she didn't have access to fancy",
    "start": "47399",
    "end": "49360"
  },
  {
    "text": "tools like editors and Terminals and",
    "start": "49360",
    "end": "51199"
  },
  {
    "text": "instead wrote her code on a punch card",
    "start": "51199",
    "end": "53199"
  },
  {
    "text": "each card represents one line of code",
    "start": "53199",
    "end": "54960"
  },
  {
    "text": "and is kept neatly in a stack where it",
    "start": "54960",
    "end": "56640"
  },
  {
    "text": "can then be fed into a card reader to be",
    "start": "56640",
    "end": "58600"
  },
  {
    "text": "compiled the modern developer can get",
    "start": "58600",
    "end": "60399"
  },
  {
    "text": "started by installing the Fortran",
    "start": "60399",
    "end": "61920"
  },
  {
    "text": "compiler then create a file ending in f",
    "start": "61920",
    "end": "64439"
  },
  {
    "text": "or f95 to specify a certain version like",
    "start": "64439",
    "end": "67200"
  },
  {
    "text": "Fortran 95 use the program keyword to",
    "start": "67200",
    "end": "69799"
  },
  {
    "text": "give your app a name in older versions",
    "start": "69799",
    "end": "71680"
  },
  {
    "text": "keywords used all caps because the shift",
    "start": "71680",
    "end": "73560"
  },
  {
    "text": "key didn't exist on punch card machines",
    "start": "73560",
    "end": "75200"
  },
  {
    "text": "until the 1970s declare variables by",
    "start": "75200",
    "end": "77560"
  },
  {
    "text": "starting with a type followed by a name",
    "start": "77560",
    "end": "79759"
  },
  {
    "text": "and optionally a default value any",
    "start": "79759",
    "end": "81799"
  },
  {
    "text": "variable names that start with ik JK LMN",
    "start": "81799",
    "end": "84439"
  },
  {
    "text": "will automatically be considered",
    "start": "84439",
    "end": "85799"
  },
  {
    "text": "integers to disable this ancient feature",
    "start": "85799",
    "end": "87880"
  },
  {
    "text": "use the implicit nun directive at the",
    "start": "87880",
    "end": "89720"
  },
  {
    "text": "top use the character type to create a",
    "start": "89720",
    "end": "91520"
  },
  {
    "text": "string by declaring it with a fixed",
    "start": "91520",
    "end": "93439"
  },
  {
    "text": "maximum length now print that value to",
    "start": "93439",
    "end": "95200"
  },
  {
    "text": "the standard output using the executable",
    "start": "95200",
    "end": "97119"
  },
  {
    "text": "statement of Print Star in addition the",
    "start": "97119",
    "end": "99439"
  },
  {
    "text": "dimension keyword can be used to create",
    "start": "99439",
    "end": "101320"
  },
  {
    "text": "an array of numbers and multiple",
    "start": "101320",
    "end": "103119"
  },
  {
    "text": "Dimensions will create a matrix just be",
    "start": "103119",
    "end": "104960"
  },
  {
    "text": "careful not to allocate too much memory",
    "start": "104960",
    "end": "106680"
  },
  {
    "text": "because your Apple 2 only has 4 kiloby",
    "start": "106680",
    "end": "108799"
  },
  {
    "text": "of ram early versions of the language",
    "start": "108799",
    "end": "110479"
  },
  {
    "text": "didn't perform fine grain memory",
    "start": "110479",
    "end": "112079"
  },
  {
    "text": "management but modern versions support",
    "start": "112079",
    "end": "114000"
  },
  {
    "text": "pointers that can manually allocate and",
    "start": "114000",
    "end": "116240"
  },
  {
    "text": "deallocate memory but the real killer",
    "start": "116240",
    "end": "118240"
  },
  {
    "text": "feature of for tram when it came out in",
    "start": "118240",
    "end": "119520"
  },
  {
    "text": "the these is the ability to perform",
    "start": "119520",
    "end": "121520"
  },
  {
    "text": "Loops perform Loops perform Loops the do",
    "start": "121520",
    "end": "124200"
  },
  {
    "text": "and do while Loops made it relatively",
    "start": "124200",
    "end": "126159"
  },
  {
    "text": "easy for anybody to tell a computer how",
    "start": "126159",
    "end": "128239"
  },
  {
    "text": "to do something multiple times on top of",
    "start": "128239",
    "end": "130280"
  },
  {
    "text": "that Fortran also made code reusable",
    "start": "130280",
    "end": "132440"
  },
  {
    "text": "with procedures a function procedure",
    "start": "132440",
    "end": "134280"
  },
  {
    "text": "takes immutable arguments performs some",
    "start": "134280",
    "end": "136360"
  },
  {
    "text": "kind of calculation then returns a value",
    "start": "136360",
    "end": "138640"
  },
  {
    "text": "it can be called with its name elsewhere",
    "start": "138640",
    "end": "140239"
  },
  {
    "text": "in the code a sub routine is another",
    "start": "140239",
    "end": "142200"
  },
  {
    "text": "type of procedure which can take mutable",
    "start": "142200",
    "end": "144120"
  },
  {
    "text": "arguments but does not provide a return",
    "start": "144120",
    "end": "146120"
  },
  {
    "text": "value now use your favorite",
    "start": "146120",
    "end": "147599"
  },
  {
    "text": "implementation of the compiler to",
    "start": "147599",
    "end": "149080"
  },
  {
    "text": "convert your code into an executable",
    "start": "149080",
    "end": "150920"
  },
  {
    "text": "binary this has been for Tran in 100",
    "start": "150920",
    "end": "153239"
  },
  {
    "text": "seconds let me know if you want to see a",
    "start": "153239",
    "end": "154599"
  },
  {
    "text": "full tutorial in the comments thanks for",
    "start": "154599",
    "end": "156280"
  },
  {
    "text": "watching and I will see you in the next",
    "start": "156280",
    "end": "158160"
  },
  {
    "text": "one",
    "start": "158160",
    "end": "160959"
  }
]