[
  {
    "text": "Julia a dynamic general purpose",
    "start": "0",
    "end": "2340"
  },
  {
    "text": "programming language capable of high",
    "start": "2340",
    "end": "4140"
  },
  {
    "text": "performance scientific Computing with",
    "start": "4140",
    "end": "5940"
  },
  {
    "text": "high-level code it was created in 2012",
    "start": "5940",
    "end": "8160"
  },
  {
    "text": "by a gang of computer scientists who set",
    "start": "8160",
    "end": "10320"
  },
  {
    "text": "out to build a language with the speed",
    "start": "10320",
    "end": "11880"
  },
  {
    "text": "of C the dynamism of Ruby the",
    "start": "11880",
    "end": "13740"
  },
  {
    "text": "practicality of python that can do",
    "start": "13740",
    "end": "15420"
  },
  {
    "text": "statistics like R and linear algebra",
    "start": "15420",
    "end": "17460"
  },
  {
    "text": "like Matlab out of the box it's a",
    "start": "17460",
    "end": "19380"
  },
  {
    "text": "general purpose language but is most",
    "start": "19380",
    "end": "20820"
  },
  {
    "text": "well known for its use in numerical",
    "start": "20820",
    "end": "22320"
  },
  {
    "text": "analysis data visualization and machine",
    "start": "22320",
    "end": "24660"
  },
  {
    "text": "learning it's extremely fast because",
    "start": "24660",
    "end": "26400"
  },
  {
    "text": "unlike most high-level languages it uses",
    "start": "26400",
    "end": "28740"
  },
  {
    "text": "a just-in-time compiler to convert your",
    "start": "28740",
    "end": "30840"
  },
  {
    "text": "source code into machine code before",
    "start": "30840",
    "end": "32340"
  },
  {
    "text": "running it and unlike most dynamic",
    "start": "32340",
    "end": "34079"
  },
  {
    "text": "languages it has a flexible parametric",
    "start": "34079",
    "end": "36300"
  },
  {
    "text": "type system that means static typing is",
    "start": "36300",
    "end": "38219"
  },
  {
    "text": "optional by default and types can take",
    "start": "38219",
    "end": "40020"
  },
  {
    "text": "parameters allowing one type to",
    "start": "40020",
    "end": "41879"
  },
  {
    "text": "represent many different possibilities",
    "start": "41879",
    "end": "43379"
  },
  {
    "text": "this opens the door to the multiple",
    "start": "43379",
    "end": "45120"
  },
  {
    "text": "dispatch pattern where one function can",
    "start": "45120",
    "end": "47160"
  },
  {
    "text": "have multiple methods or implementations",
    "start": "47160",
    "end": "49020"
  },
  {
    "text": "based on its input parameters and the",
    "start": "49020",
    "end": "51360"
  },
  {
    "text": "language will determine which method to",
    "start": "51360",
    "end": "52920"
  },
  {
    "text": "dispatch at runtime in fact even",
    "start": "52920",
    "end": "54899"
  },
  {
    "text": "operators like Plus or functions that",
    "start": "54899",
    "end": "56940"
  },
  {
    "text": "use multiple dispatch to handle a",
    "start": "56940",
    "end": "58800"
  },
  {
    "text": "variety of different type common Nations",
    "start": "58800",
    "end": "60480"
  },
  {
    "text": "to get started install Julia then create",
    "start": "60480",
    "end": "62699"
  },
  {
    "text": "a file ending in JL declare a variable",
    "start": "62699",
    "end": "65100"
  },
  {
    "text": "by providing a name then assign a value",
    "start": "65100",
    "end": "67140"
  },
  {
    "text": "to it names support utf-8 encoding like",
    "start": "67140",
    "end": "69420"
  },
  {
    "text": "emojis or mathematical symbols it uses",
    "start": "69420",
    "end": "71760"
  },
  {
    "text": "symbols to represent built-in constants",
    "start": "71760",
    "end": "73619"
  },
  {
    "text": "like Pi allowing you to write equations",
    "start": "73619",
    "end": "75420"
  },
  {
    "text": "more elegantly in your code like Pearl",
    "start": "75420",
    "end": "77460"
  },
  {
    "text": "it's very good at string parsing and",
    "start": "77460",
    "end": "79140"
  },
  {
    "text": "supports multiple Expressions on a",
    "start": "79140",
    "end": "80700"
  },
  {
    "text": "single line resulting in tourists yet",
    "start": "80700",
    "end": "82500"
  },
  {
    "text": "powerful code Define a function with the",
    "start": "82500",
    "end": "84540"
  },
  {
    "text": "function keyword and close it with the",
    "start": "84540",
    "end": "86400"
  },
  {
    "text": "end keyword or shorten it to a single",
    "start": "86400",
    "end": "88080"
  },
  {
    "text": "line with the equal sign or because",
    "start": "88080",
    "end": "89640"
  },
  {
    "text": "functions are first class objects they",
    "start": "89640",
    "end": "91560"
  },
  {
    "text": "can be assigned to a variable or pass to",
    "start": "91560",
    "end": "93420"
  },
  {
    "text": "another function anonymously what's",
    "start": "93420",
    "end": "95040"
  },
  {
    "text": "interesting though is that by default a",
    "start": "95040",
    "end": "96960"
  },
  {
    "text": "function is untyped which means it",
    "start": "96960",
    "end": "98460"
  },
  {
    "text": "implements one method to handle all",
    "start": "98460",
    "end": "100320"
  },
  {
    "text": "inputs if the function is redefined but",
    "start": "100320",
    "end": "102420"
  },
  {
    "text": "this time with a type for the arguments",
    "start": "102420",
    "end": "104280"
  },
  {
    "text": "another method is added to it when this",
    "start": "104280",
    "end": "106259"
  },
  {
    "text": "function is called at runtime Julia will",
    "start": "106259",
    "end": "108119"
  },
  {
    "text": "look at the type of the arguments and",
    "start": "108119",
    "end": "109860"
  },
  {
    "text": "dispatch the corresponding method in",
    "start": "109860",
    "end": "111600"
  },
  {
    "text": "addition we can pass a type as a",
    "start": "111600",
    "end": "113340"
  },
  {
    "text": "parameter then use keywords like where",
    "start": "113340",
    "end": "115020"
  },
  {
    "text": "to perform Logic on the type itself in",
    "start": "115020",
    "end": "117360"
  },
  {
    "text": "this case it will assert that both types",
    "start": "117360",
    "end": "119040"
  },
  {
    "text": "are the same now Julia is not an",
    "start": "119040",
    "end": "120780"
  },
  {
    "text": "object-oriented language in the classic",
    "start": "120780",
    "end": "122399"
  },
  {
    "text": "sense however it does support composite",
    "start": "122399",
    "end": "124740"
  },
  {
    "text": "types with structs which contain",
    "start": "124740",
    "end": "126479"
  },
  {
    "text": "multiple fields and optional types like",
    "start": "126479",
    "end": "128819"
  },
  {
    "text": "any good scientific language it has very",
    "start": "128819",
    "end": "130739"
  },
  {
    "text": "well thought out support for arrays with",
    "start": "130739",
    "end": "132660"
  },
  {
    "text": "many built-in functions to initialize",
    "start": "132660",
    "end": "134340"
  },
  {
    "text": "and compute values over",
    "start": "134340",
    "end": "135660"
  },
  {
    "text": "multi-dimensional arrays it supports",
    "start": "135660",
    "end": "137520"
  },
  {
    "text": "asynchronous Computing with its task",
    "start": "137520",
    "end": "139140"
  },
  {
    "text": "model which can pause and synchronize",
    "start": "139140",
    "end": "141060"
  },
  {
    "text": "the execution of code like co-routines",
    "start": "141060",
    "end": "143040"
  },
  {
    "text": "in other languages and finally when it",
    "start": "143040",
    "end": "145020"
  },
  {
    "text": "comes to Big Data it can even distribute",
    "start": "145020",
    "end": "146940"
  },
  {
    "text": "processing to multiple memory spaces or",
    "start": "146940",
    "end": "149040"
  },
  {
    "text": "machines and run natively on a GPU this",
    "start": "149040",
    "end": "151560"
  },
  {
    "text": "has been Julia in 100 seconds if you",
    "start": "151560",
    "end": "153660"
  },
  {
    "text": "want to see more short videos like this",
    "start": "153660",
    "end": "155040"
  },
  {
    "text": "hit the like button and subscribe thanks",
    "start": "155040",
    "end": "157019"
  },
  {
    "text": "for watching and I will see you in the",
    "start": "157019",
    "end": "158879"
  },
  {
    "text": "next one",
    "start": "158879",
    "end": "161180"
  }
]