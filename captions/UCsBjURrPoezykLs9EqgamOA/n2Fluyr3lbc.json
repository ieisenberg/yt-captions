[
  {
    "text": "postgresql the most trusted name in Open",
    "start": "20",
    "end": "2940"
  },
  {
    "text": "Source relational databases its",
    "start": "2940",
    "end": "5040"
  },
  {
    "text": "development dates all the way back to",
    "start": "5040",
    "end": "6359"
  },
  {
    "text": "1986 at UC Berkeley under the direction",
    "start": "6359",
    "end": "8820"
  },
  {
    "text": "of Michael Stonebreaker like other pure",
    "start": "8820",
    "end": "11340"
  },
  {
    "text": "relational databases it stores data in",
    "start": "11340",
    "end": "13620"
  },
  {
    "text": "tables columns and rows and uses",
    "start": "13620",
    "end": "15599"
  },
  {
    "text": "structured query language to read and",
    "start": "15599",
    "end": "17520"
  },
  {
    "text": "write data however postgres is",
    "start": "17520",
    "end": "19320"
  },
  {
    "text": "technically an object relational",
    "start": "19320",
    "end": "20760"
  },
  {
    "text": "database which means it can create its",
    "start": "20760",
    "end": "22619"
  },
  {
    "text": "own custom data types to store objects",
    "start": "22619",
    "end": "24660"
  },
  {
    "text": "with properties and support Advanced",
    "start": "24660",
    "end": "26279"
  },
  {
    "text": "features like inheritance and",
    "start": "26279",
    "end": "27720"
  },
  {
    "text": "polymorphism when writing data it runs",
    "start": "27720",
    "end": "29880"
  },
  {
    "text": "fully acid compliant transactions but",
    "start": "29880",
    "end": "32160"
  },
  {
    "text": "also adds its own special sauce called",
    "start": "32160",
    "end": "34020"
  },
  {
    "text": "multiversion concurrency control which",
    "start": "34020",
    "end": "36059"
  },
  {
    "text": "gives each transaction a snapshot of the",
    "start": "36059",
    "end": "38340"
  },
  {
    "text": "database allowing multiple transactions",
    "start": "38340",
    "end": "40200"
  },
  {
    "text": "to run at the same time without traffic",
    "start": "40200",
    "end": "42000"
  },
  {
    "text": "jams or locks developers also love its",
    "start": "42000",
    "end": "44579"
  },
  {
    "text": "extensibility queries can be reused by",
    "start": "44579",
    "end": "46680"
  },
  {
    "text": "writing stored procedures and it even",
    "start": "46680",
    "end": "48539"
  },
  {
    "text": "supports languages Beyond SQL like",
    "start": "48539",
    "end": "50700"
  },
  {
    "text": "Python and c and it has a robust",
    "start": "50700",
    "end": "52680"
  },
  {
    "text": "ecosystem of extensions like post GIS to",
    "start": "52680",
    "end": "55559"
  },
  {
    "text": "provide geospatial data for apps like",
    "start": "55559",
    "end": "57539"
  },
  {
    "text": "Uber or cytus who Shard and distribute",
    "start": "57539",
    "end": "59699"
  },
  {
    "text": "the data base to any scale or PG",
    "start": "59699",
    "end": "61860"
  },
  {
    "text": "embedding to give AI chatbots long-term",
    "start": "61860",
    "end": "63899"
  },
  {
    "text": "memory and the list goes on to get",
    "start": "63899",
    "end": "65580"
  },
  {
    "text": "started you can download and install it",
    "start": "65580",
    "end": "67260"
  },
  {
    "text": "locally or better yet use a free Cloud",
    "start": "67260",
    "end": "69240"
  },
  {
    "text": "database like neon which provides Auto",
    "start": "69240",
    "end": "71280"
  },
  {
    "text": "scaling out of the box and a nice UI to",
    "start": "71280",
    "end": "73619"
  },
  {
    "text": "manage your data in addition to a bunch",
    "start": "73619",
    "end": "75360"
  },
  {
    "text": "of other Advanced features like",
    "start": "75360",
    "end": "76740"
  },
  {
    "text": "branching create a new database then",
    "start": "76740",
    "end": "78360"
  },
  {
    "text": "head over to the SQL Editor to run your",
    "start": "78360",
    "end": "80220"
  },
  {
    "text": "first query or connect it to your IDE",
    "start": "80220",
    "end": "81720"
  },
  {
    "text": "with an extension like SQL tools we",
    "start": "81720",
    "end": "83820"
  },
  {
    "text": "could get started by creating a new",
    "start": "83820",
    "end": "85320"
  },
  {
    "text": "table but because this is an object",
    "start": "85320",
    "end": "86939"
  },
  {
    "text": "relational database let's begin by",
    "start": "86939",
    "end": "88979"
  },
  {
    "text": "creating a custom data type which",
    "start": "88979",
    "end": "90659"
  },
  {
    "text": "defines the structure of an object with",
    "start": "90659",
    "end": "92460"
  },
  {
    "text": "corresponding properties and types",
    "start": "92460",
    "end": "94200"
  },
  {
    "text": "what's awesome about postgres though is",
    "start": "94200",
    "end": "95880"
  },
  {
    "text": "that we have more exotic data modeling",
    "start": "95880",
    "end": "97740"
  },
  {
    "text": "options like arrays can be used by",
    "start": "97740",
    "end": "99659"
  },
  {
    "text": "putting brackets in front of a type then",
    "start": "99659",
    "end": "101460"
  },
  {
    "text": "make it a two-dimensional array by",
    "start": "101460",
    "end": "103020"
  },
  {
    "text": "adding another set of brackets we also",
    "start": "103020",
    "end": "104939"
  },
  {
    "text": "have Json data types to handle",
    "start": "104939",
    "end": "106619"
  },
  {
    "text": "unstructured data and even key value",
    "start": "106619",
    "end": "108479"
  },
  {
    "text": "pairs with extensions like h-store now",
    "start": "108479",
    "end": "110640"
  },
  {
    "text": "that we have this custom type we can use",
    "start": "110640",
    "end": "112380"
  },
  {
    "text": "it within one or more tables like one",
    "start": "112380",
    "end": "114240"
  },
  {
    "text": "table for programmers and another for",
    "start": "114240",
    "end": "116040"
  },
  {
    "text": "designers once the table is created we",
    "start": "116040",
    "end": "118079"
  },
  {
    "text": "can then use an insert statement to add",
    "start": "118079",
    "end": "119640"
  },
  {
    "text": "a row of data into it notice the use of",
    "start": "119640",
    "end": "121680"
  },
  {
    "text": "a double colon to cast a string into",
    "start": "121680",
    "end": "123720"
  },
  {
    "text": "Json or H store types and now finally we",
    "start": "123720",
    "end": "126540"
  },
  {
    "text": "can read the data with a select",
    "start": "126540",
    "end": "127860"
  },
  {
    "text": "statement that uses dot notation to",
    "start": "127860",
    "end": "129720"
  },
  {
    "text": "access the properties on our custom",
    "start": "129720",
    "end": "131280"
  },
  {
    "text": "object every table has a unique primary",
    "start": "131280",
    "end": "133500"
  },
  {
    "text": "key and we can create Relationships by",
    "start": "133500",
    "end": "135540"
  },
  {
    "text": "storing the primary key from one table",
    "start": "135540",
    "end": "137160"
  },
  {
    "text": "as the foreign key on another like a",
    "start": "137160",
    "end": "139319"
  },
  {
    "text": "programmer might own many Lambos we can",
    "start": "139319",
    "end": "141480"
  },
  {
    "text": "then find those Lambos by doing a join",
    "start": "141480",
    "end": "143340"
  },
  {
    "text": "query that compares the programmer's ID",
    "start": "143340",
    "end": "145080"
  },
  {
    "text": "to the lambo's owner ID this has been",
    "start": "145080",
    "end": "147360"
  },
  {
    "text": "postgresql in 100 seconds big shout out",
    "start": "147360",
    "end": "150060"
  },
  {
    "text": "to Neon DB for sponsoring and making",
    "start": "150060",
    "end": "152099"
  },
  {
    "text": "this awesome database free to use in the",
    "start": "152099",
    "end": "153900"
  },
  {
    "text": "cloud thanks for watching and I will see",
    "start": "153900",
    "end": "155760"
  },
  {
    "text": "you in the next one",
    "start": "155760",
    "end": "158299"
  }
]