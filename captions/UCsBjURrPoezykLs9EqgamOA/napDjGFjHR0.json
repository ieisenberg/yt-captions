[
  {
    "text": "[Music]",
    "start": "70",
    "end": "1610"
  },
  {
    "text": "you unlock this door with the key of",
    "start": "1610",
    "end": "4200"
  },
  {
    "text": "imagination this is an object a",
    "start": "4200",
    "end": "6660"
  },
  {
    "text": "collection of properties where each",
    "start": "6660",
    "end": "8280"
  },
  {
    "text": "property associate say key to a value",
    "start": "8280",
    "end": "10559"
  },
  {
    "text": "earlier in the course we learned that",
    "start": "10559",
    "end": "12030"
  },
  {
    "text": "there are seven primitive data types in",
    "start": "12030",
    "end": "13679"
  },
  {
    "text": "Java Script primitives represent a",
    "start": "13679",
    "end": "15660"
  },
  {
    "text": "single value like a number or a string",
    "start": "15660",
    "end": "17310"
  },
  {
    "text": "and anything that's not a primitive is",
    "start": "17310",
    "end": "19470"
  },
  {
    "text": "an object in other words everything",
    "start": "19470",
    "end": "21300"
  },
  {
    "text": "interesting that happens in JavaScript",
    "start": "21300",
    "end": "22920"
  },
  {
    "text": "is made possible by the object datatype",
    "start": "22920",
    "end": "27020"
  },
  {
    "text": "today we'll take a deep dive into how",
    "start": "28040",
    "end": "30510"
  },
  {
    "text": "the JavaScript object works and look at",
    "start": "30510",
    "end": "32339"
  },
  {
    "text": "modern syntax and methods we can use to",
    "start": "32339",
    "end": "34230"
  },
  {
    "text": "make our code cleaner and more efficient",
    "start": "34230",
    "end": "35910"
  },
  {
    "text": "if you're new here like and subscribe",
    "start": "35910",
    "end": "37440"
  },
  {
    "text": "and grab all of the videos on this free",
    "start": "37440",
    "end": "39179"
  },
  {
    "text": "JavaScript course from bioship io an",
    "start": "39179",
    "end": "41600"
  },
  {
    "text": "object is conceptually similar to a",
    "start": "41600",
    "end": "43980"
  },
  {
    "text": "dictionary or a map that you might find",
    "start": "43980",
    "end": "45690"
  },
  {
    "text": "in other programming languages the most",
    "start": "45690",
    "end": "47309"
  },
  {
    "text": "straightforward way to create an object",
    "start": "47309",
    "end": "48870"
  },
  {
    "text": "is to use the literal syntax simply",
    "start": "48870",
    "end": "51659"
  },
  {
    "text": "define a variable equal to curly braces",
    "start": "51659",
    "end": "53909"
  },
  {
    "text": "inside the braces you define properties",
    "start": "53909",
    "end": "56219"
  },
  {
    "text": "separated by commas a property is",
    "start": "56219",
    "end": "59010"
  },
  {
    "text": "essentially a key value pair where the",
    "start": "59010",
    "end": "60960"
  },
  {
    "text": "left side is the property name and the",
    "start": "60960",
    "end": "62819"
  },
  {
    "text": "right side is the property value the",
    "start": "62819",
    "end": "65280"
  },
  {
    "text": "property name needs to be a unique value",
    "start": "65280",
    "end": "67440"
  },
  {
    "text": "that can be coerced to a string the",
    "start": "67440",
    "end": "69360"
  },
  {
    "text": "value can be anything you want a",
    "start": "69360",
    "end": "70860"
  },
  {
    "text": "primitive another object a function or",
    "start": "70860",
    "end": "73170"
  },
  {
    "text": "whatever now even though we define this",
    "start": "73170",
    "end": "75420"
  },
  {
    "text": "object as a const variable we can still",
    "start": "75420",
    "end": "77760"
  },
  {
    "text": "set properties on it after it's been",
    "start": "77760",
    "end": "79380"
  },
  {
    "text": "created we can use bracket notation on",
    "start": "79380",
    "end": "81690"
  },
  {
    "text": "the object followed by the name of the",
    "start": "81690",
    "end": "83340"
  },
  {
    "text": "property equal to whatever value we want",
    "start": "83340",
    "end": "85530"
  },
  {
    "text": "to set there then later in the code we",
    "start": "85530",
    "end": "87450"
  },
  {
    "text": "can read or get that property using the",
    "start": "87450",
    "end": "89460"
  },
  {
    "text": "same bracket notation",
    "start": "89460",
    "end": "92210"
  },
  {
    "text": "now let's imagine that we've walked into",
    "start": "92240",
    "end": "94460"
  },
  {
    "text": "an alternate universe because in",
    "start": "94460",
    "end": "96049"
  },
  {
    "text": "JavaScript there is always more than one",
    "start": "96049",
    "end": "97850"
  },
  {
    "text": "way to do things",
    "start": "97850",
    "end": "98720"
  },
  {
    "text": "this time we'll create a new object",
    "start": "98720",
    "end": "100100"
  },
  {
    "text": "using the constructor syntax then we'll",
    "start": "100100",
    "end": "102650"
  },
  {
    "text": "set properties on it using dot notation",
    "start": "102650",
    "end": "104360"
  },
  {
    "text": "dot notation looks a lot cleaner but",
    "start": "104360",
    "end": "106790"
  },
  {
    "text": "your property names will need to be a",
    "start": "106790",
    "end": "108229"
  },
  {
    "text": "continuous string that does not start",
    "start": "108229",
    "end": "110060"
  },
  {
    "text": "with a number if you have property names",
    "start": "110060",
    "end": "111830"
  },
  {
    "text": "with spaces or that start with numbers",
    "start": "111830",
    "end": "113390"
  },
  {
    "text": "you'll get a syntax error if you try to",
    "start": "113390",
    "end": "115040"
  },
  {
    "text": "call them with dot notation but now",
    "start": "115040",
    "end": "118940"
  },
  {
    "text": "we've fallen into yet another alternate",
    "start": "118940",
    "end": "120740"
  },
  {
    "text": "universe this time we'll use a static",
    "start": "120740",
    "end": "122509"
  },
  {
    "text": "method on the object class called create",
    "start": "122509",
    "end": "124670"
  },
  {
    "text": "you wouldn't normally use this one for",
    "start": "124670",
    "end": "126590"
  },
  {
    "text": "an empty object it's most useful when",
    "start": "126590",
    "end": "128420"
  },
  {
    "text": "you have an existing object and you want",
    "start": "128420",
    "end": "129979"
  },
  {
    "text": "it to inherit its properties or in other",
    "start": "129979",
    "end": "131720"
  },
  {
    "text": "words use the existing object as a",
    "start": "131720",
    "end": "133640"
  },
  {
    "text": "prototype and this is one of the weirder",
    "start": "133640",
    "end": "135500"
  },
  {
    "text": "parts of JavaScript so let's look at it",
    "start": "135500",
    "end": "137239"
  },
  {
    "text": "a little more closely first we have a",
    "start": "137239",
    "end": "138920"
  },
  {
    "text": "plain JavaScript object called organism",
    "start": "138920",
    "end": "140989"
  },
  {
    "text": "it contains a DNA property of a random",
    "start": "140989",
    "end": "143269"
  },
  {
    "text": "number and we create a new object with",
    "start": "143269",
    "end": "145190"
  },
  {
    "text": "object create passing the organism as",
    "start": "145190",
    "end": "147410"
  },
  {
    "text": "the prototype when we console.log the",
    "start": "147410",
    "end": "149330"
  },
  {
    "text": "new object you'll notice that it's still",
    "start": "149330",
    "end": "150980"
  },
  {
    "text": "a blank object but if we call the DNA",
    "start": "150980",
    "end": "153019"
  },
  {
    "text": "property on this object we get a result",
    "start": "153019",
    "end": "154850"
  },
  {
    "text": "back so it's almost like an invisible",
    "start": "154850",
    "end": "156799"
  },
  {
    "text": "property on the new object that's",
    "start": "156799",
    "end": "158930"
  },
  {
    "text": "because it exists on this objects",
    "start": "158930",
    "end": "160549"
  },
  {
    "text": "prototype and we can see this property",
    "start": "160549",
    "end": "162410"
  },
  {
    "text": "actually lives on the prototype by",
    "start": "162410",
    "end": "164120"
  },
  {
    "text": "calling object get prototype of which",
    "start": "164120",
    "end": "166340"
  },
  {
    "text": "returns the original object we created",
    "start": "166340",
    "end": "169230"
  },
  {
    "text": "[Music]",
    "start": "169230",
    "end": "172349"
  },
  {
    "text": "[Music]",
    "start": "174730",
    "end": "176440"
  },
  {
    "text": "we're going to add a property to the",
    "start": "176440",
    "end": "178760"
  },
  {
    "text": "object by using object defined property",
    "start": "178760",
    "end": "181250"
  },
  {
    "text": "it takes the object as its first",
    "start": "181250",
    "end": "182840"
  },
  {
    "text": "argument the name of the key as the",
    "start": "182840",
    "end": "184700"
  },
  {
    "text": "second argument then an object with some",
    "start": "184700",
    "end": "186410"
  },
  {
    "text": "options on it known as a descriptor as",
    "start": "186410",
    "end": "188420"
  },
  {
    "text": "the third argument we can use the value",
    "start": "188420",
    "end": "190310"
  },
  {
    "text": "option in the descriptor to create an",
    "start": "190310",
    "end": "192019"
  },
  {
    "text": "object that is identical to the ones in",
    "start": "192019",
    "end": "193880"
  },
  {
    "text": "the previous examples however we can now",
    "start": "193880",
    "end": "196130"
  },
  {
    "text": "do more advanced things here as well",
    "start": "196130",
    "end": "197480"
  },
  {
    "text": "like to find a getter and that would",
    "start": "197480",
    "end": "199370"
  },
  {
    "text": "access the property by calling a",
    "start": "199370",
    "end": "200780"
  },
  {
    "text": "function now most casual users of",
    "start": "200780",
    "end": "202640"
  },
  {
    "text": "JavaScript won't need to use defined",
    "start": "202640",
    "end": "204200"
  },
  {
    "text": "property on a regular basis but it is",
    "start": "204200",
    "end": "206239"
  },
  {
    "text": "important to know how it works if you",
    "start": "206239",
    "end": "207680"
  },
  {
    "text": "really want to understand the language",
    "start": "207680",
    "end": "209060"
  },
  {
    "text": "in most cases you'll likely be working",
    "start": "209060",
    "end": "211280"
  },
  {
    "text": "with the literal syntax and it does have",
    "start": "211280",
    "end": "212900"
  },
  {
    "text": "a few cool tricks up its sleeve let's",
    "start": "212900",
    "end": "214640"
  },
  {
    "text": "say we have a couple of variables and we",
    "start": "214640",
    "end": "216260"
  },
  {
    "text": "want to set those variables on an object",
    "start": "216260",
    "end": "218269"
  },
  {
    "text": "with the same property names as the",
    "start": "218269",
    "end": "219890"
  },
  {
    "text": "variable in the olden days we would have",
    "start": "219890",
    "end": "221750"
  },
  {
    "text": "to duplicate the property name with the",
    "start": "221750",
    "end": "223730"
  },
  {
    "text": "variable but in modern times we can",
    "start": "223730",
    "end": "225660"
  },
  {
    "text": "simply add the variable to the object",
    "start": "225660",
    "end": "227370"
  },
  {
    "text": "literal and it will coerce the variable",
    "start": "227370",
    "end": "229320"
  },
  {
    "text": "name to the property name and we can do",
    "start": "229320",
    "end": "231420"
  },
  {
    "text": "a similar thing in Reverse with",
    "start": "231420",
    "end": "232740"
  },
  {
    "text": "destructuring this time we want to read",
    "start": "232740",
    "end": "234630"
  },
  {
    "text": "an object's properties and set them as",
    "start": "234630",
    "end": "236400"
  },
  {
    "text": "variables to use in our local code in",
    "start": "236400",
    "end": "238290"
  },
  {
    "text": "the olden days we would have to declare",
    "start": "238290",
    "end": "240180"
  },
  {
    "text": "a variable and then set its value equal",
    "start": "240180",
    "end": "242370"
  },
  {
    "text": "to the object property nowadays we can",
    "start": "242370",
    "end": "244560"
  },
  {
    "text": "define multiple variables with a single",
    "start": "244560",
    "end": "246210"
  },
  {
    "text": "line of code and JavaScript will match",
    "start": "246210",
    "end": "247950"
  },
  {
    "text": "the variable names to the property names",
    "start": "247950",
    "end": "249780"
  },
  {
    "text": "on the object but what if you want to",
    "start": "249780",
    "end": "251730"
  },
  {
    "text": "use this awesome syntax but give your",
    "start": "251730",
    "end": "253440"
  },
  {
    "text": "variable a different name sometimes you",
    "start": "253440",
    "end": "255570"
  },
  {
    "text": "might have to do this to avoid a name",
    "start": "255570",
    "end": "257070"
  },
  {
    "text": "collision with an existing variable just",
    "start": "257070",
    "end": "259230"
  },
  {
    "text": "add a colon after the property name and",
    "start": "259230",
    "end": "260940"
  },
  {
    "text": "then you can name your D structured",
    "start": "260940",
    "end": "262440"
  },
  {
    "text": "variable whatever you want now what if",
    "start": "262440",
    "end": "264300"
  },
  {
    "text": "your to try to take this code and then",
    "start": "264300",
    "end": "265890"
  },
  {
    "text": "add another property with the same name",
    "start": "265890",
    "end": "267600"
  },
  {
    "text": "this code won't throw an error instead",
    "start": "267600",
    "end": "269460"
  },
  {
    "text": "it will overwrite the value on the left",
    "start": "269460",
    "end": "270690"
  },
  {
    "text": "with the value on the right this is",
    "start": "270690",
    "end": "272580"
  },
  {
    "text": "important to know because sometimes you",
    "start": "272580",
    "end": "274140"
  },
  {
    "text": "might compute properties that you don't",
    "start": "274140",
    "end": "275610"
  },
  {
    "text": "know until run time like you might want",
    "start": "275610",
    "end": "277380"
  },
  {
    "text": "to create an object based on some data",
    "start": "277380",
    "end": "279240"
  },
  {
    "text": "you fetch from a database you can",
    "start": "279240",
    "end": "280830"
  },
  {
    "text": "compute property names by wrapping them",
    "start": "280830",
    "end": "282420"
  },
  {
    "text": "in brackets and then place an expression",
    "start": "282420",
    "end": "284310"
  },
  {
    "text": "inside and it will compute that value",
    "start": "284310",
    "end": "286020"
  },
  {
    "text": "when the object is created in this",
    "start": "286020",
    "end": "287520"
  },
  {
    "text": "example we have a function that",
    "start": "287520",
    "end": "288780"
  },
  {
    "text": "generates a random number we can then",
    "start": "288780",
    "end": "290520"
  },
  {
    "text": "call that function inside of the",
    "start": "290520",
    "end": "291780"
  },
  {
    "text": "brackets to generate the key for this",
    "start": "291780",
    "end": "293370"
  },
  {
    "text": "object when the object is created and",
    "start": "293370",
    "end": "295350"
  },
  {
    "text": "you'll notice every time we refresh we",
    "start": "295350",
    "end": "296790"
  },
  {
    "text": "get a different key or a name for this",
    "start": "296790",
    "end": "298770"
  },
  {
    "text": "property now object properties can also",
    "start": "298770",
    "end": "301260"
  },
  {
    "text": "take functions as their value and when a",
    "start": "301260",
    "end": "303450"
  },
  {
    "text": "function lives on an object it's called",
    "start": "303450",
    "end": "305250"
  },
  {
    "text": "a method you can define a method using",
    "start": "305250",
    "end": "307320"
  },
  {
    "text": "the shorthand syntax where you omit the",
    "start": "307320",
    "end": "309150"
  },
  {
    "text": "property name and just define a named",
    "start": "309150",
    "end": "310919"
  },
  {
    "text": "function directly in the object literal",
    "start": "310919",
    "end": "312750"
  },
  {
    "text": "and we can also use get and set keywords",
    "start": "312750",
    "end": "315030"
  },
  {
    "text": "here to define getters and setters on",
    "start": "315030",
    "end": "316650"
  },
  {
    "text": "this object when you define a method on",
    "start": "316650",
    "end": "318450"
  },
  {
    "text": "an object this refers to this object",
    "start": "318450",
    "end": "320970"
  },
  {
    "text": "however if you remember from the last",
    "start": "320970",
    "end": "322710"
  },
  {
    "text": "video if you use the arrow function",
    "start": "322710",
    "end": "324690"
  },
  {
    "text": "syntax here it will refer to the global",
    "start": "324690",
    "end": "327030"
  },
  {
    "text": "this context for example if we convert",
    "start": "327030",
    "end": "329370"
  },
  {
    "text": "our make web method into an arrow",
    "start": "329370",
    "end": "331020"
  },
  {
    "text": "function this dot web will refer to the",
    "start": "331020",
    "end": "333540"
  },
  {
    "text": "global web value as opposed to the",
    "start": "333540",
    "end": "335580"
  },
  {
    "text": "internal property on this object so",
    "start": "335580",
    "end": "337350"
  },
  {
    "text": "that's just a weird little thing to get",
    "start": "337350",
    "end": "338850"
  },
  {
    "text": "used to in JavaScript an interesting",
    "start": "338850",
    "end": "340740"
  },
  {
    "text": "thing you can do with the this keyword",
    "start": "340740",
    "end": "342270"
  },
  {
    "text": "is chain methods together you'll see the",
    "start": "342270",
    "end": "344490"
  },
  {
    "text": "syntax used in different JavaScript",
    "start": "344490",
    "end": "345750"
  },
  {
    "text": "libraries with the most famous example",
    "start": "345750",
    "end": "347790"
  },
  {
    "text": "being jQuery so the question is how do",
    "start": "347790",
    "end": "350040"
  },
  {
    "text": "we chained together methods while",
    "start": "350040",
    "end": "351270"
  },
  {
    "text": "keeping a reference to the same object I",
    "start": "351270",
    "end": "353220"
  },
  {
    "text": "kind of already gave you the answer",
    "start": "353220",
    "end": "354750"
  },
  {
    "text": "because remember I said the this keyword",
    "start": "354750",
    "end": "356700"
  },
  {
    "text": "refers to the parent object when defined",
    "start": "356700",
    "end": "358950"
  },
  {
    "text": "in name",
    "start": "358950",
    "end": "359759"
  },
  {
    "text": "so if you want to chain method calls",
    "start": "359759",
    "end": "361139"
  },
  {
    "text": "together all you have to do is return",
    "start": "361139",
    "end": "362699"
  },
  {
    "text": "this from the method now any method you",
    "start": "362699",
    "end": "364800"
  },
  {
    "text": "call will return the reference to the",
    "start": "364800",
    "end": "366330"
  },
  {
    "text": "original object and that provides a good",
    "start": "366330",
    "end": "368280"
  },
  {
    "text": "segue into the topic of object",
    "start": "368280",
    "end": "370229"
  },
  {
    "text": "references previously in the course we",
    "start": "370229",
    "end": "372330"
  },
  {
    "text": "learned the difference between the call",
    "start": "372330",
    "end": "373680"
  },
  {
    "text": "stack and the heap primitive values are",
    "start": "373680",
    "end": "375569"
  },
  {
    "text": "short-lived in most cases in the call",
    "start": "375569",
    "end": "377130"
  },
  {
    "text": "stack while javascript objects are kept",
    "start": "377130",
    "end": "379319"
  },
  {
    "text": "as references in the heap let's take a",
    "start": "379319",
    "end": "381479"
  },
  {
    "text": "second to look at the implications of",
    "start": "381479",
    "end": "383069"
  },
  {
    "text": "this because it's very important let's",
    "start": "383069",
    "end": "385050"
  },
  {
    "text": "look at how things work first with",
    "start": "385050",
    "end": "386280"
  },
  {
    "text": "primitives we'll initialize a variable a",
    "start": "386280",
    "end": "388410"
  },
  {
    "text": "and then set B equal to a as you would",
    "start": "388410",
    "end": "391259"
  },
  {
    "text": "expect they're both the same value but",
    "start": "391259",
    "end": "393419"
  },
  {
    "text": "they're actually both pointing to their",
    "start": "393419",
    "end": "394889"
  },
  {
    "text": "own primitive value so that means if we",
    "start": "394889",
    "end": "396960"
  },
  {
    "text": "change a to a different value",
    "start": "396960",
    "end": "398250"
  },
  {
    "text": "console.log them again you can see a has",
    "start": "398250",
    "end": "400740"
  },
  {
    "text": "the new value but B still has the",
    "start": "400740",
    "end": "402419"
  },
  {
    "text": "original value that it got from a now",
    "start": "402419",
    "end": "404550"
  },
  {
    "text": "let's go ahead and refactor things to",
    "start": "404550",
    "end": "406050"
  },
  {
    "text": "make a and object the big difference",
    "start": "406050",
    "end": "408180"
  },
  {
    "text": "here is that B is making a reference to",
    "start": "408180",
    "end": "410460"
  },
  {
    "text": "the object created in a they are both",
    "start": "410460",
    "end": "412530"
  },
  {
    "text": "referencing the same object kept in the",
    "start": "412530",
    "end": "414330"
  },
  {
    "text": "heap memory as opposed to copying the",
    "start": "414330",
    "end": "416340"
  },
  {
    "text": "value like it did with a primitive after",
    "start": "416340",
    "end": "418409"
  },
  {
    "text": "we update the property you can see that",
    "start": "418409",
    "end": "419940"
  },
  {
    "text": "they both console.log the same object",
    "start": "419940",
    "end": "421650"
  },
  {
    "text": "because again they're both sharing the",
    "start": "421650",
    "end": "423150"
  },
  {
    "text": "same reference to it now that you know",
    "start": "423150",
    "end": "424800"
  },
  {
    "text": "how it references work let's take a look",
    "start": "424800",
    "end": "426419"
  },
  {
    "text": "at how we can combine objects together",
    "start": "426419",
    "end": "427979"
  },
  {
    "text": "if you're updating the same object in",
    "start": "427979",
    "end": "430139"
  },
  {
    "text": "multiple places it can be kind of",
    "start": "430139",
    "end": "431550"
  },
  {
    "text": "difficult because of the weight",
    "start": "431550",
    "end": "432630"
  },
  {
    "text": "references work in many cases you simply",
    "start": "432630",
    "end": "435330"
  },
  {
    "text": "want to clone that object's property",
    "start": "435330",
    "end": "436949"
  },
  {
    "text": "into a new object and one way to achieve",
    "start": "436949",
    "end": "438990"
  },
  {
    "text": "that is with object to sign let's see",
    "start": "438990",
    "end": "441479"
  },
  {
    "text": "how it can change the behavior of our",
    "start": "441479",
    "end": "442860"
  },
  {
    "text": "previous example instead of setting B",
    "start": "442860",
    "end": "444840"
  },
  {
    "text": "equal to a we use object to sign to take",
    "start": "444840",
    "end": "447630"
  },
  {
    "text": "a brand new object and assign A's",
    "start": "447630",
    "end": "449639"
  },
  {
    "text": "properties to it now it's important to",
    "start": "449639",
    "end": "451710"
  },
  {
    "text": "keep in mind that this only uses the",
    "start": "451710",
    "end": "453449"
  },
  {
    "text": "internal and numerable properties of a",
    "start": "453449",
    "end": "455849"
  },
  {
    "text": "you can see exactly which properties",
    "start": "455849",
    "end": "457800"
  },
  {
    "text": "will be copied over by using object get",
    "start": "457800",
    "end": "460169"
  },
  {
    "text": "own property names and that will give",
    "start": "460169",
    "end": "461759"
  },
  {
    "text": "you an array of all the property names",
    "start": "461759",
    "end": "463409"
  },
  {
    "text": "owned directly by this object that means",
    "start": "463409",
    "end": "465539"
  },
  {
    "text": "any other properties that had inherited",
    "start": "465539",
    "end": "467370"
  },
  {
    "text": "higher up in the prototype chain would",
    "start": "467370",
    "end": "469080"
  },
  {
    "text": "not be copied over in addition if this",
    "start": "469080",
    "end": "471690"
  },
  {
    "text": "object were to reference other objects",
    "start": "471690",
    "end": "473849"
  },
  {
    "text": "in its properties those objects would",
    "start": "473849",
    "end": "475770"
  },
  {
    "text": "not be recursively deep copied over as",
    "start": "475770",
    "end": "477810"
  },
  {
    "text": "well that means if a was making a",
    "start": "477810",
    "end": "479699"
  },
  {
    "text": "reference to other objects those objects",
    "start": "479699",
    "end": "481860"
  },
  {
    "text": "would still be copied over by reference",
    "start": "481860",
    "end": "483630"
  },
  {
    "text": "it wouldn't recursively copy all the",
    "start": "483630",
    "end": "485370"
  },
  {
    "text": "values in those nested objects",
    "start": "485370",
    "end": "489050"
  },
  {
    "text": "I'm not sure at all if you're looking to",
    "start": "489300",
    "end": "494740"
  },
  {
    "text": "clone objects like this a better",
    "start": "494740",
    "end": "496330"
  },
  {
    "text": "alternative might be to use these spread",
    "start": "496330",
    "end": "498190"
  },
  {
    "text": "syntax there are some very minor",
    "start": "498190",
    "end": "499780"
  },
  {
    "text": "differences between the two but they can",
    "start": "499780",
    "end": "501580"
  },
  {
    "text": "be used interchangeably in most cases",
    "start": "501580",
    "end": "503080"
  },
  {
    "text": "and the spread syntax just looks a lot",
    "start": "503080",
    "end": "504970"
  },
  {
    "text": "nicer when you're combining a lot of",
    "start": "504970",
    "end": "506470"
  },
  {
    "text": "objects together now at the very",
    "start": "506470",
    "end": "508270"
  },
  {
    "text": "beginning of the video I defined an",
    "start": "508270",
    "end": "509979"
  },
  {
    "text": "object as a collection of key-value",
    "start": "509979",
    "end": "511840"
  },
  {
    "text": "pairs and when you have a collection of",
    "start": "511840",
    "end": "513700"
  },
  {
    "text": "something you likely want to loop over",
    "start": "513700",
    "end": "515560"
  },
  {
    "text": "it looping over an array is easy",
    "start": "515560",
    "end": "517330"
  },
  {
    "text": "but how do we loop over an object well",
    "start": "517330",
    "end": "519580"
  },
  {
    "text": "one option is to use a four in loop this",
    "start": "519580",
    "end": "521950"
  },
  {
    "text": "will loop over all of the enumerable",
    "start": "521950",
    "end": "523510"
  },
  {
    "text": "properties in the object as well as its",
    "start": "523510",
    "end": "525520"
  },
  {
    "text": "prototypes and this can be very very",
    "start": "525520",
    "end": "527560"
  },
  {
    "text": "confusing so most people tend to avoid",
    "start": "527560",
    "end": "529570"
  },
  {
    "text": "the for in loop a better alternative is",
    "start": "529570",
    "end": "531700"
  },
  {
    "text": "to get the keys or values as an array",
    "start": "531700",
    "end": "533890"
  },
  {
    "text": "you can use object keys or values to do",
    "start": "533890",
    "end": "536649"
  },
  {
    "text": "exactly that then you can loop over them",
    "start": "536649",
    "end": "538690"
  },
  {
    "text": "with a regular for loop or you can use",
    "start": "538690",
    "end": "540790"
  },
  {
    "text": "one of the built-in array methods like",
    "start": "540790",
    "end": "542380"
  },
  {
    "text": "for each but what if you want to loop",
    "start": "542380",
    "end": "544540"
  },
  {
    "text": "over both the keys and the values",
    "start": "544540",
    "end": "546190"
  },
  {
    "text": "together you can get an array of tuples",
    "start": "546190",
    "end": "548050"
  },
  {
    "text": "using object entries and you can D",
    "start": "548050",
    "end": "550480"
  },
  {
    "text": "structure that key and value variables",
    "start": "550480",
    "end": "552370"
  },
  {
    "text": "in the loop now I showed you earlier how",
    "start": "552370",
    "end": "554709"
  },
  {
    "text": "to create a new object using the new",
    "start": "554709",
    "end": "556480"
  },
  {
    "text": "keyword but what if you want to",
    "start": "556480",
    "end": "558130"
  },
  {
    "text": "customize the way that object is created",
    "start": "558130",
    "end": "560079"
  },
  {
    "text": "you can do that easily in JavaScript by",
    "start": "560079",
    "end": "562510"
  },
  {
    "text": "writing a constructor function by",
    "start": "562510",
    "end": "564760"
  },
  {
    "text": "convention you should always capitalize",
    "start": "564760",
    "end": "566560"
  },
  {
    "text": "the name of this function in this case",
    "start": "566560",
    "end": "568600"
  },
  {
    "text": "we have a zombie function and it takes",
    "start": "568600",
    "end": "570339"
  },
  {
    "text": "an argument of name we'll take that",
    "start": "570339",
    "end": "572230"
  },
  {
    "text": "argument and define it as an internal",
    "start": "572230",
    "end": "573970"
  },
  {
    "text": "property on the object and then we can",
    "start": "573970",
    "end": "576040"
  },
  {
    "text": "handle additional setup in this function",
    "start": "576040",
    "end": "577660"
  },
  {
    "text": "like setting a timestamp and also",
    "start": "577660",
    "end": "579790"
  },
  {
    "text": "defining some methods you'll notice that",
    "start": "579790",
    "end": "581589"
  },
  {
    "text": "it's the this keyword that allows us to",
    "start": "581589",
    "end": "583420"
  },
  {
    "text": "reference internal properties on this",
    "start": "583420",
    "end": "585279"
  },
  {
    "text": "object when it's created or instantiated",
    "start": "585279",
    "end": "587529"
  },
  {
    "text": "so this function is actually very",
    "start": "587529",
    "end": "589510"
  },
  {
    "text": "similar to a class like you might find",
    "start": "589510",
    "end": "591190"
  },
  {
    "text": "in other object-oriented programming",
    "start": "591190",
    "end": "592930"
  },
  {
    "text": "languages when you define a constructor",
    "start": "592930",
    "end": "594910"
  },
  {
    "text": "function like this the way you",
    "start": "594910",
    "end": "596440"
  },
  {
    "text": "initialize a new object is to put the",
    "start": "596440",
    "end": "598510"
  },
  {
    "text": "new keyword in front of it now in modern",
    "start": "598510",
    "end": "600430"
  },
  {
    "text": "JavaScript we could actually skip the",
    "start": "600430",
    "end": "602079"
  },
  {
    "text": "function and just use the class keyword",
    "start": "602079",
    "end": "603880"
  },
  {
    "text": "but the important takeaway here is that",
    "start": "603880",
    "end": "605740"
  },
  {
    "text": "we're using a function to instantiate or",
    "start": "605740",
    "end": "607899"
  },
  {
    "text": "create a new object the class keyword is",
    "start": "607899",
    "end": "610180"
  },
  {
    "text": "mostly just syntactic sugar for this",
    "start": "610180",
    "end": "611860"
  },
  {
    "text": "process as you can see javascript",
    "start": "611860",
    "end": "613959"
  },
  {
    "text": "objects are very flexible and a core",
    "start": "613959",
    "end": "615820"
  },
  {
    "text": "building block up a language I'm going",
    "start": "615820",
    "end": "617470"
  },
  {
    "text": "to go ahead and wrap things up there if",
    "start": "617470",
    "end": "618970"
  },
  {
    "text": "this video helped you please like and",
    "start": "618970",
    "end": "620410"
  },
  {
    "text": "subscribe and make sure",
    "start": "620410",
    "end": "621560"
  },
  {
    "text": "to check out the full JavaScript",
    "start": "621560",
    "end": "622580"
  },
  {
    "text": "Khorasan buyer ship IO thanks for",
    "start": "622580",
    "end": "624890"
  },
  {
    "text": "watching and I will talk to you soon",
    "start": "624890",
    "end": "626750"
  },
  {
    "text": "beauty is in the eye of beholder",
    "start": "626750",
    "end": "630970"
  },
  {
    "text": "[Music]",
    "start": "630970",
    "end": "638870"
  }
]