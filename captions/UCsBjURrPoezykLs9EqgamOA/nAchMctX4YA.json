[
  {
    "text": "swift a multi-paradigm compiled language",
    "start": "240",
    "end": "2800"
  },
  {
    "text": "created by apple famous for building",
    "start": "2800",
    "end": "4720"
  },
  {
    "text": "apps that grow inside of apple's walled",
    "start": "4720",
    "end": "6720"
  },
  {
    "text": "garden it was first introduced in 2014",
    "start": "6720",
    "end": "9120"
  },
  {
    "text": "at the worldwide developers conference",
    "start": "9120",
    "end": "10880"
  },
  {
    "text": "and was designed as a modern successor",
    "start": "10880",
    "end": "12960"
  },
  {
    "text": "to objective-c the original apple",
    "start": "12960",
    "end": "14880"
  },
  {
    "text": "platform language that had been in use",
    "start": "14880",
    "end": "16480"
  },
  {
    "text": "since the 1980s swift interops with",
    "start": "16480",
    "end": "18800"
  },
  {
    "text": "objective-c but provides a shorter more",
    "start": "18800",
    "end": "20960"
  },
  {
    "text": "readable syntax and features like memory",
    "start": "20960",
    "end": "23199"
  },
  {
    "text": "safety and type inference to improve",
    "start": "23199",
    "end": "25199"
  },
  {
    "text": "developer productivity today it's used",
    "start": "25199",
    "end": "27279"
  },
  {
    "text": "to build mobile apps on ios desktop apps",
    "start": "27279",
    "end": "29760"
  },
  {
    "text": "on mac os wearable apps for watch os but",
    "start": "29760",
    "end": "32719"
  },
  {
    "text": "is also open source which means it can",
    "start": "32719",
    "end": "34640"
  },
  {
    "text": "be used to build software outside of",
    "start": "34640",
    "end": "36399"
  },
  {
    "text": "apple platforms it compiles to native",
    "start": "36399",
    "end": "38559"
  },
  {
    "text": "machine code and is built on top of the",
    "start": "38559",
    "end": "40399"
  },
  {
    "text": "llvm tool chain like many other modern",
    "start": "40399",
    "end": "42800"
  },
  {
    "text": "languages however it also supports a",
    "start": "42800",
    "end": "44879"
  },
  {
    "text": "readable print loop allowing you to",
    "start": "44879",
    "end": "46559"
  },
  {
    "text": "experiment with code in a playground",
    "start": "46559",
    "end": "47920"
  },
  {
    "text": "without needing to recompile making it a",
    "start": "47920",
    "end": "50160"
  },
  {
    "text": "great language for beginners in addition",
    "start": "50160",
    "end": "52239"
  },
  {
    "text": "it provides memory safety by preventing",
    "start": "52239",
    "end": "54160"
  },
  {
    "text": "you from writing unsafe code by default",
    "start": "54160",
    "end": "56320"
  },
  {
    "text": "and uses automatic reference counting to",
    "start": "56320",
    "end": "58480"
  },
  {
    "text": "manage memory automatically to get",
    "start": "58480",
    "end": "60480"
  },
  {
    "text": "started install it then create a file",
    "start": "60480",
    "end": "62559"
  },
  {
    "text": "ending in.swift your code will start",
    "start": "62559",
    "end": "64640"
  },
  {
    "text": "executing in the global scope there's no",
    "start": "64640",
    "end": "66640"
  },
  {
    "text": "need for a main function create a",
    "start": "66640",
    "end": "68640"
  },
  {
    "text": "variable with the var keyword followed",
    "start": "68640",
    "end": "70560"
  },
  {
    "text": "by its name and value var creates a",
    "start": "70560",
    "end": "72960"
  },
  {
    "text": "mutable variable which means its value",
    "start": "72960",
    "end": "74880"
  },
  {
    "text": "can change in the future let on the",
    "start": "74880",
    "end": "76640"
  },
  {
    "text": "other hand creates an immutable variable",
    "start": "76640",
    "end": "78799"
  },
  {
    "text": "or constant it uses type inference to",
    "start": "78799",
    "end": "81200"
  },
  {
    "text": "strongly type the value as a string but",
    "start": "81200",
    "end": "83280"
  },
  {
    "text": "we can explicitly type it by adding a",
    "start": "83280",
    "end": "85280"
  },
  {
    "text": "semicolon after the variable name every",
    "start": "85280",
    "end": "87520"
  },
  {
    "text": "variable must be initialized with a",
    "start": "87520",
    "end": "89040"
  },
  {
    "text": "value unless the type has a question",
    "start": "89040",
    "end": "91119"
  },
  {
    "text": "mark which makes it an optional type",
    "start": "91119",
    "end": "92880"
  },
  {
    "text": "allowing it to also contain a nil value",
    "start": "92880",
    "end": "95280"
  },
  {
    "text": "it also supports optional chaining",
    "start": "95280",
    "end": "97040"
  },
  {
    "text": "making it really easy to work with nil",
    "start": "97040",
    "end": "98960"
  },
  {
    "text": "values functions are declared with the",
    "start": "98960",
    "end": "100799"
  },
  {
    "text": "fun keyword and will use named",
    "start": "100799",
    "end": "102320"
  },
  {
    "text": "parameters by default place an",
    "start": "102320",
    "end": "103920"
  },
  {
    "text": "underscore before the name to use",
    "start": "103920",
    "end": "105360"
  },
  {
    "text": "positional arguments instead now use a",
    "start": "105360",
    "end": "107439"
  },
  {
    "text": "backslash with parentheses to",
    "start": "107439",
    "end": "109040"
  },
  {
    "text": "interpolate these values into a string",
    "start": "109040",
    "end": "111040"
  },
  {
    "text": "functions in swift are first class",
    "start": "111040",
    "end": "112720"
  },
  {
    "text": "objects they can be passed as arguments",
    "start": "112720",
    "end": "114720"
  },
  {
    "text": "used as return values and nested to",
    "start": "114720",
    "end": "116880"
  },
  {
    "text": "create closures it also supports",
    "start": "116880",
    "end": "118719"
  },
  {
    "text": "object-oriented patterns like classes",
    "start": "118719",
    "end": "120880"
  },
  {
    "text": "and inheritance to encapsulate the var",
    "start": "120880",
    "end": "122960"
  },
  {
    "text": "and fung keywords that you just learned",
    "start": "122960",
    "end": "124799"
  },
  {
    "text": "now pull up the terminal and run the",
    "start": "124799",
    "end": "126240"
  },
  {
    "text": "swift compiler to convert your code into",
    "start": "126240",
    "end": "128399"
  },
  {
    "text": "a high performance executable",
    "start": "128399",
    "end": "130000"
  },
  {
    "text": "congratulations your code is now ready",
    "start": "130000",
    "end": "132000"
  },
  {
    "text": "to seek approval on the apple app store",
    "start": "132000",
    "end": "134160"
  },
  {
    "text": "this has been the swift programming",
    "start": "134160",
    "end": "135520"
  },
  {
    "text": "language in 100 seconds if you want to",
    "start": "135520",
    "end": "137520"
  },
  {
    "text": "see more short videos like this make",
    "start": "137520",
    "end": "139040"
  },
  {
    "text": "sure to hit the like button and",
    "start": "139040",
    "end": "140400"
  },
  {
    "text": "subscribe thanks for watching and i will",
    "start": "140400",
    "end": "142560"
  },
  {
    "text": "see you in the next one",
    "start": "142560",
    "end": "146319"
  }
]