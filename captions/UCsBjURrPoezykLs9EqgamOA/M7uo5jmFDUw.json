[
  {
    "text": "erlang a functional fault tolerant",
    "start": "399",
    "end": "2639"
  },
  {
    "text": "programming language and runtime famous",
    "start": "2639",
    "end": "4600"
  },
  {
    "text": "for scaling up the entire",
    "start": "4600",
    "end": "5960"
  },
  {
    "text": "telecommunications industry with its",
    "start": "5960",
    "end": "7640"
  },
  {
    "text": "bare hands it was developed in 1986 at",
    "start": "7640",
    "end": "10360"
  },
  {
    "text": "Swedish company Ericson where massive",
    "start": "10360",
    "end": "12400"
  },
  {
    "text": "concurrent systems were needed to handle",
    "start": "12400",
    "end": "14280"
  },
  {
    "text": "millions of phone calls in parallel",
    "start": "14280",
    "end": "15920"
  },
  {
    "text": "early implementations were written in",
    "start": "15920",
    "end": "17400"
  },
  {
    "text": "prologue but that was too slow and that",
    "start": "17400",
    "end": "19560"
  },
  {
    "text": "led to the development of beam a virtual",
    "start": "19560",
    "end": "21760"
  },
  {
    "text": "machine that compiles earling to bite",
    "start": "21760",
    "end": "23760"
  },
  {
    "text": "code which is then executed in a",
    "start": "23760",
    "end": "25640"
  },
  {
    "text": "threaded environment where millions of",
    "start": "25640",
    "end": "27439"
  },
  {
    "text": "processes can run concurrently with very",
    "start": "27439",
    "end": "29400"
  },
  {
    "text": "low overhead but when your code breaks a",
    "start": "29400",
    "end": "31599"
  },
  {
    "text": "process the earling philosophy is to let",
    "start": "31599",
    "end": "33960"
  },
  {
    "text": "it fail so the entire system doesn't",
    "start": "33960",
    "end": "35719"
  },
  {
    "text": "come crashing down that process",
    "start": "35719",
    "end": "37640"
  },
  {
    "text": "isolation is what makes it fall tolerant",
    "start": "37640",
    "end": "39760"
  },
  {
    "text": "in addition this facilitates hot code",
    "start": "39760",
    "end": "41680"
  },
  {
    "text": "swapping at runtime to perform software",
    "start": "41680",
    "end": "43800"
  },
  {
    "text": "updates with zero downtime in the late",
    "start": "43800",
    "end": "45680"
  },
  {
    "text": "9s the llang ecosystem was open source",
    "start": "45680",
    "end": "48320"
  },
  {
    "text": "as the open Telecom platform and the",
    "start": "48320",
    "end": "50239"
  },
  {
    "text": "beam BM is still in use today by modern",
    "start": "50239",
    "end": "52600"
  },
  {
    "text": "languages like elixir and gleam and beam",
    "start": "52600",
    "end": "54760"
  },
  {
    "text": "has help messaging tools like rabit mq",
    "start": "54760",
    "end": "57039"
  },
  {
    "text": "Discord and WhatsApp handle billions of",
    "start": "57039",
    "end": "59079"
  },
  {
    "text": "messages every day and that's all thanks",
    "start": "59079",
    "end": "60840"
  },
  {
    "text": "to a programming model based on message",
    "start": "60840",
    "end": "62640"
  },
  {
    "text": "passing that works just like your",
    "start": "62640",
    "end": "64320"
  },
  {
    "text": "mailbox to understand erl Lang's",
    "start": "64320",
    "end": "66119"
  },
  {
    "text": "legendary concurrency model though we",
    "start": "66119",
    "end": "67759"
  },
  {
    "text": "need to look at some code get started by",
    "start": "67759",
    "end": "69560"
  },
  {
    "text": "installing it then create a file ending",
    "start": "69560",
    "end": "71280"
  },
  {
    "text": "in Earl first declare a module then",
    "start": "71280",
    "end": "73520"
  },
  {
    "text": "write a function that contains one or",
    "start": "73520",
    "end": "75159"
  },
  {
    "text": "more Expressions separated by commas",
    "start": "75159",
    "end": "77360"
  },
  {
    "text": "just like a sentence the function ends",
    "start": "77360",
    "end": "79040"
  },
  {
    "text": "when you hit a period Then export the",
    "start": "79040",
    "end": "80840"
  },
  {
    "text": "function from the module and notice this",
    "start": "80840",
    "end": "82640"
  },
  {
    "text": "sl0 here that indicates the function",
    "start": "82640",
    "end": "85040"
  },
  {
    "text": "takes zero arguments now open the",
    "start": "85040",
    "end": "87040"
  },
  {
    "text": "terminal and run Earl C to compile this",
    "start": "87040",
    "end": "89479"
  },
  {
    "text": "code in into a Beam file and now we can",
    "start": "89479",
    "end": "91320"
  },
  {
    "text": "use Earl to open the llang shell and",
    "start": "91320",
    "end": "93720"
  },
  {
    "text": "execute this code pretty cool but now",
    "start": "93720",
    "end": "95759"
  },
  {
    "text": "let's run the same function a thousand",
    "start": "95759",
    "end": "97439"
  },
  {
    "text": "times concurrently in this function",
    "start": "97439",
    "end": "99399"
  },
  {
    "text": "we'll use spawn one of LL Lang's",
    "start": "99399",
    "end": "101040"
  },
  {
    "text": "concurrency Primitives that executes",
    "start": "101040",
    "end": "102960"
  },
  {
    "text": "each function independently on its own",
    "start": "102960",
    "end": "104719"
  },
  {
    "text": "process and returns a process ID for",
    "start": "104719",
    "end": "107000"
  },
  {
    "text": "each one of them the double bars here",
    "start": "107000",
    "end": "108840"
  },
  {
    "text": "will map those IDs to a new list now",
    "start": "108840",
    "end": "111079"
  },
  {
    "text": "when we execute this code we get a lot",
    "start": "111079",
    "end": "112920"
  },
  {
    "text": "more hello worlds and an array of their",
    "start": "112920",
    "end": "115000"
  },
  {
    "text": "process IDs where this concurrency model",
    "start": "115000",
    "end": "117119"
  },
  {
    "text": "really shines though is with message",
    "start": "117119",
    "end": "118759"
  },
  {
    "text": "passing in this example the start",
    "start": "118759",
    "end": "120600"
  },
  {
    "text": "function spawns a new process then",
    "start": "120600",
    "end": "122479"
  },
  {
    "text": "passes it to the sender function from",
    "start": "122479",
    "end": "124039"
  },
  {
    "text": "there we can use a bang which is called",
    "start": "124039",
    "end": "125560"
  },
  {
    "text": "the send operator to send a message to",
    "start": "125560",
    "end": "127520"
  },
  {
    "text": "itself with self or some other process",
    "start": "127520",
    "end": "129599"
  },
  {
    "text": "ID we can then handle that message in",
    "start": "129599",
    "end": "131319"
  },
  {
    "text": "another function that implements a",
    "start": "131319",
    "end": "133120"
  },
  {
    "text": "receive block which allows a process to",
    "start": "133120",
    "end": "135480"
  },
  {
    "text": "suspend execution until a message is",
    "start": "135480",
    "end": "137840"
  },
  {
    "text": "received in its mailbox it uses pattern",
    "start": "137840",
    "end": "139640"
  },
  {
    "text": "matching to look for the process ID and",
    "start": "139640",
    "end": "141879"
  },
  {
    "text": "message then executes code when the",
    "start": "141879",
    "end": "143800"
  },
  {
    "text": "message is received conceptually receive",
    "start": "143800",
    "end": "145920"
  },
  {
    "text": "is kind of like a weight in C or",
    "start": "145920",
    "end": "147879"
  },
  {
    "text": "JavaScript however it blocks the entire",
    "start": "147879",
    "end": "150000"
  },
  {
    "text": "process until a message is received",
    "start": "150000",
    "end": "151920"
  },
  {
    "text": "therefore we might want to add an",
    "start": "151920",
    "end": "153440"
  },
  {
    "text": "optional after Clause to run some code",
    "start": "153440",
    "end": "155400"
  },
  {
    "text": "after a timeout this has been earling in",
    "start": "155400",
    "end": "157680"
  },
  {
    "text": "100 seconds let me know what you want to",
    "start": "157680",
    "end": "159159"
  },
  {
    "text": "see next in the comments thanks for",
    "start": "159159",
    "end": "160840"
  },
  {
    "text": "watching and I will see you in the next",
    "start": "160840",
    "end": "162560"
  },
  {
    "text": "one",
    "start": "162560",
    "end": "165440"
  }
]