[
  {
    "start": "0",
    "end": "82000"
  },
  {
    "start": "0",
    "end": "6580"
  },
  {
    "text": "SRINI DEVADAS: So, so\nfar we haven't really done much with the\ndata structures",
    "start": "6580",
    "end": "11809"
  },
  {
    "text": "outside of Python lists. We looked at two\ndimensional lists but, you know, they\nare still lists.",
    "start": "11810",
    "end": "18490"
  },
  {
    "text": "And so this particular\npuzzle that we're going to do today, I--",
    "start": "18490",
    "end": "23920"
  },
  {
    "text": "has a graph structure\nassociated with it. So for the first time,\nat least in this class,",
    "start": "23920",
    "end": "30730"
  },
  {
    "text": "we'll be looking at\ntraversing graphs, and we're going to do\nthis in a recursive way.",
    "start": "30730",
    "end": "39820"
  },
  {
    "text": "And, also, we'll have\na graph representation using dictionaries.",
    "start": "39820",
    "end": "45680"
  },
  {
    "text": "So most of you have\nprobably seen dictionaries. If you haven't, I'm\ngoing to explain them. They're essentially\nways that you",
    "start": "45680",
    "end": "53110"
  },
  {
    "text": "can index into\nlists, not just using",
    "start": "53110",
    "end": "58480"
  },
  {
    "text": "nonzero integers, indices, zero\nthrough n, or what have you.",
    "start": "58480",
    "end": "63850"
  },
  {
    "text": "But things like\nstrings or tuples, and so they're just more general\nand-- they're more general data",
    "start": "63850",
    "end": "72610"
  },
  {
    "text": "structure than Python lists. And so they're very\nconvenient when",
    "start": "72610",
    "end": "78040"
  },
  {
    "text": "it comes to representing\ngraphs and traversing graphs. So the puzzle we can\nlook at is, as always,",
    "start": "78040",
    "end": "87160"
  },
  {
    "start": "82000",
    "end": "360000"
  },
  {
    "text": "is a little bit contrived. It's about weekend\ndinner scheduling.",
    "start": "87160",
    "end": "93039"
  },
  {
    "text": "So you have a bunch of friends. And let me draw your\nsocial network here,",
    "start": "93040",
    "end": "106630"
  },
  {
    "text": "or someone's social network. So we won't name names,\nbut each node in this graph",
    "start": "106630",
    "end": "115620"
  },
  {
    "text": "represents a friend,\nand a couple more.",
    "start": "115620",
    "end": "122740"
  },
  {
    "text": " And so that's the set\nof friends, a through h,",
    "start": "122740",
    "end": "130629"
  },
  {
    "text": "and that won't be particularly\ninteresting as a graph. If it just had nodes,\nyou want to add edges",
    "start": "130630",
    "end": "135970"
  },
  {
    "text": "to it, what do these\nedges represent? Well, you like all\nof your friends,",
    "start": "135970",
    "end": "142420"
  },
  {
    "text": "but your friends don't\nnecessarily like each other. And so an edge between nodes--",
    "start": "142420",
    "end": "152110"
  },
  {
    "text": "so nodes are friends, and an\nedge between a pair of nodes",
    "start": "152110",
    "end": "162810"
  },
  {
    "text": "implies a dislike relationship. All right. ",
    "start": "162810",
    "end": "171250"
  },
  {
    "text": "So b dislikes c,\nand it's symmetric. I mean, you could argue\nthat dislikes is not necessarily symmetric, but\nwe'll just call it that.",
    "start": "171250",
    "end": "180050"
  },
  {
    "text": "That implies that c\ndislikes b as well. So this is not necessarily\na directed graph.",
    "start": "180050",
    "end": "185360"
  },
  {
    "text": "Some of the time,\nespecially when you're doing group planning,\ngoing from point A to point B,",
    "start": "185360",
    "end": "191390"
  },
  {
    "text": "you have to take into\naccount one-way streets, and so you have directed graphs.",
    "start": "191390",
    "end": "196459"
  },
  {
    "text": "But many a time, you can get\naway with undirected graphs. So you just-- the existence\nof an edge between B and C",
    "start": "196460",
    "end": "203840"
  },
  {
    "text": "implies that in a traversal, you\ncan get from B to C or C to B, and there's no direction there.",
    "start": "203840",
    "end": "211710"
  },
  {
    "text": "And so I'm going to fill\nin the rest of this, and then get to the question\nthat we want to answer. ",
    "start": "211710",
    "end": "220990"
  },
  {
    "text": "And so that's your-- your friend graph. And it also has these six or\nseven dislike relationships.",
    "start": "220990",
    "end": "231120"
  },
  {
    "text": "And your job is to, well,\nkeep all your friends happy.",
    "start": "231120",
    "end": "237220"
  },
  {
    "text": "And the way you're\ngoing to do that is by-- is by having a couple of\nparties on the weekend.",
    "start": "237220",
    "end": "244000"
  },
  {
    "text": "So this is a regular weekend. Let's call it Friday\nand Saturday--",
    "start": "244000",
    "end": "249480"
  },
  {
    "text": "Friday and Saturday\nnight parties. And the only constraint--",
    "start": "249480",
    "end": "254980"
  },
  {
    "text": "actually, there's\ntwo constraints. There's-- the two constraints\nthat you need to follow are",
    "start": "254980",
    "end": "260898"
  },
  {
    "text": "satisfy when you have\nthese two parties. So you have your Friday party\nand your Saturday party,",
    "start": "260899",
    "end": "269419"
  },
  {
    "text": "is you can't leave\nanybody out, right? So you-- effectively, they're\nconstrained as each friend--",
    "start": "269420",
    "end": "279455"
  },
  {
    "start": "279455",
    "end": "285150"
  },
  {
    "text": "--comes to-- ",
    "start": "285150",
    "end": "290710"
  },
  {
    "text": "--exactly one party. No one gets left out,\nno one comes to both.",
    "start": "290710",
    "end": "298160"
  },
  {
    "text": "So that's fair. And then the second constraint\nas you can probably guess",
    "start": "298160",
    "end": "304860"
  },
  {
    "text": "is no pair-- ",
    "start": "304860",
    "end": "310140"
  },
  {
    "text": "--of friends who\ndislike each other, they're not friendly,\nthey're your friends,",
    "start": "310140",
    "end": "317548"
  },
  {
    "text": "can be invited on the same day. ",
    "start": "317549",
    "end": "338710"
  },
  {
    "text": "And so you want an\nalgorithm that is going to give you a schedule.",
    "start": "338710",
    "end": "343870"
  },
  {
    "text": "And, obviously, the schedule\nis not necessarily unique. I mean, if you had a bunch of\nhappy-go-lucky low overhead",
    "start": "343870",
    "end": "352690"
  },
  {
    "text": "friends, you know, they\nall like each other and you could just randomly\nbreak them up into two groups.",
    "start": "352690",
    "end": "359992"
  },
  {
    "text": "You can think of\nit as a partition. A partition is a\ngrouping where--",
    "start": "359992",
    "end": "366590"
  },
  {
    "start": "360000",
    "end": "597000"
  },
  {
    "text": "then you have anything in a\nset of nodes, for example, and you partition it,\nyou're essentially",
    "start": "366590",
    "end": "371620"
  },
  {
    "text": "saying you're breaking\nit up into two groups,",
    "start": "371620",
    "end": "377139"
  },
  {
    "text": "such that each node\nis in exactly one group, and each node--",
    "start": "377140",
    "end": "384136"
  },
  {
    "text": "and then we have\nanother property associated with\nthe partition that corresponds to the edges\nbetween these nodes.",
    "start": "384136",
    "end": "390729"
  },
  {
    "text": "But we'll get to that in just-- just a minute. Yeah, go ahead, Fadi. AUDIENCE: How are we going\nto deal with the-- with FGH,",
    "start": "390730",
    "end": "397740"
  },
  {
    "text": "because we only have\ntwo parties and-- SRINI DEVADAS:\nThat's exactly right. So-- so the purpose of this\npuzzle is to determine whether",
    "start": "397740",
    "end": "408670"
  },
  {
    "text": "you can actually do this or\nnot, and so you are certainly welcome to--",
    "start": "408670",
    "end": "415480"
  },
  {
    "text": "when you write a\ncomputer program-- or when we write a computer\nprogram here, it might say,",
    "start": "415480",
    "end": "421150"
  },
  {
    "text": "no can do, you know, find\na different set of friends or maybe identify\na problem case.",
    "start": "421150",
    "end": "426639"
  },
  {
    "text": "You know, there's one\nperson who dislikes all of your other friends. Maybe you should drop\nthat person, right?",
    "start": "426640",
    "end": "432850"
  },
  {
    "text": "And so you can imagine that-- that you would\nnot necessarily be",
    "start": "432850",
    "end": "438970"
  },
  {
    "text": "able to satisfy these two\nconstraints for all graphs,",
    "start": "438970",
    "end": "444130"
  },
  {
    "text": "right? And so that's really the\nessence of the puzzle. For what kind of graphs?",
    "start": "444130",
    "end": "449610"
  },
  {
    "text": "And this, it turns out that a\nfairly famous kind of graph, does-- does this puzzle have\na solution, right?",
    "start": "449610",
    "end": "457870"
  },
  {
    "text": "And so you-- you\nhave to look at this and you kind of go, and\nthe first thing that",
    "start": "457870",
    "end": "464110"
  },
  {
    "text": "occurred to you was, hey, if I\nhad F, G, and H, if I invite F",
    "start": "464110",
    "end": "471639"
  },
  {
    "text": "on Friday, I have to\ninvite G and H on Saturday.",
    "start": "471640",
    "end": "477010"
  },
  {
    "text": "But then G and H don't\nlike each other, right? So that's a problem, right?",
    "start": "477010",
    "end": "482650"
  },
  {
    "text": "And so in this\nparticular case, you've identified this cycle that\nindicates that this problem is",
    "start": "482650",
    "end": "490180"
  },
  {
    "text": "not solvable. But, let's say, that\nsomehow you've placated G",
    "start": "490180",
    "end": "498610"
  },
  {
    "text": "and you patch-- they're patched up. All right. So-- so you end up having a\nfairly complex graph structure",
    "start": "498610",
    "end": "506050"
  },
  {
    "text": "that looks like this, right? And now what happens? Now, is there-- is there a\nsolution to this problem,",
    "start": "506050",
    "end": "513494"
  },
  {
    "text": "to this particular puzzle? ",
    "start": "513494",
    "end": "520429"
  },
  {
    "text": "I mean, A can come on any day\nso let's ignore A. All right. A is easy.",
    "start": "520429",
    "end": "526520"
  },
  {
    "text": "Suppose you invite-- you\ncan try and figure this out by saying let's go ahead\nand invite B on Friday.",
    "start": "526520",
    "end": "537620"
  },
  {
    "text": "So what does that imply? That immediately implies that?",
    "start": "537620",
    "end": "542910"
  },
  {
    "text": "C is on Saturday, right? What does that imply?",
    "start": "542910",
    "end": "548330"
  },
  {
    "text": "D is on Friday, right? So you see-- you see\nhow this is going to go. What does that imply? ",
    "start": "548330",
    "end": "555770"
  },
  {
    "text": "E and F are on-- are on Saturday. So I have E and F\non Saturday, OK?",
    "start": "555770",
    "end": "562340"
  },
  {
    "text": "And then what does that imply? That F being on Saturday\nimplies that G, H, and I",
    "start": "562340",
    "end": "568810"
  },
  {
    "text": "have to be on Friday, right? And then I-- don't forget\nA. So let's just stick",
    "start": "568810",
    "end": "574810"
  },
  {
    "text": "A in here to even things out. All right. So-- so we kind of\ndid an algorithm here,",
    "start": "574810",
    "end": "581910"
  },
  {
    "text": "we executed an algorithm, right? And it turns out that graphs\nthat can be partitioned",
    "start": "581910",
    "end": "592590"
  },
  {
    "text": "in this manner are-- I have a special name.",
    "start": "592590",
    "end": "598680"
  },
  {
    "start": "597000",
    "end": "880000"
  },
  {
    "text": "They're called bipartite graphs. Bipartite graphs. I'll write it out.",
    "start": "598680",
    "end": "603930"
  },
  {
    "start": "603930",
    "end": "613850"
  },
  {
    "text": "And that-- the reason they're\ncalled bipartite graphs is if you have a\nbipartite graph,",
    "start": "613850",
    "end": "623120"
  },
  {
    "text": "you can always draw\nit in this fashion. ",
    "start": "623120",
    "end": "631810"
  },
  {
    "text": "Where you have A,\nC, E, F, and then",
    "start": "631810",
    "end": "637990"
  },
  {
    "text": "you have B, D, G, H, I, such\nthat you never see edges",
    "start": "637990",
    "end": "649470"
  },
  {
    "text": "like this or like that. All the edges go\nfrom left to right-- or right to left.",
    "start": "649470",
    "end": "654990"
  },
  {
    "text": "They're undirected. OK. So that's really\na bipartite graph.",
    "start": "654990",
    "end": "660030"
  },
  {
    "text": "And if I draw this out-- oop, don't need that. ",
    "start": "660030",
    "end": "669060"
  },
  {
    "text": "C goes to B and\nD. A goes nowhere. E goes to D. And F goes to\na bunch of different places.",
    "start": "669060",
    "end": "679594"
  },
  {
    "text": "Yeah. ",
    "start": "679594",
    "end": "686360"
  },
  {
    "text": "So you're allowed to have-- this will still be a bipartite-- I won't-- this is not\nthe graph that we had,",
    "start": "686360",
    "end": "692620"
  },
  {
    "text": "but it's not that-- the edges can be crossing edges.",
    "start": "692620",
    "end": "698140"
  },
  {
    "text": "OK. They just all have to\ngo from left to right. You just can't have an\nedge between A and C,",
    "start": "698140",
    "end": "704470"
  },
  {
    "text": "or C and A. You can't\nhave an edge between D and H, et cetera. All right. So you want to-- you have\nto be able to separate out",
    "start": "704470",
    "end": "711790"
  },
  {
    "text": "the nodes such that there are\nno edges in this set of nodes,",
    "start": "711790",
    "end": "716829"
  },
  {
    "text": "and no edges between\nthis set of nodes, and no edges between\nthat set of nodes. And this is just a\ntopological property",
    "start": "716830",
    "end": "723250"
  },
  {
    "text": "that corresponds to\nbipartite graphs. And there's another\nproperty that essentially",
    "start": "723250",
    "end": "730690"
  },
  {
    "text": "is equivalent to our\npuzzle, which says, bipartite graphs\nare two colorable.",
    "start": "730690",
    "end": "736480"
  },
  {
    "text": "And it's obvious\nas to why a bipar--",
    "start": "736480",
    "end": "741860"
  },
  {
    "text": "bipartite graph\nis two colorable, and what does it mean\nto be two colorable. Well, you need to\ncolor each node",
    "start": "741860",
    "end": "749800"
  },
  {
    "text": "with two colors, in this case,\nFriday and Saturday, such",
    "start": "749800",
    "end": "757959"
  },
  {
    "text": "that no pair of nodes\nwith an edge between them",
    "start": "757960",
    "end": "774940"
  },
  {
    "text": "have the same color.  So exactly equivalent to\nwhat we've talked about here.",
    "start": "774940",
    "end": "780760"
  },
  {
    "text": " So our goal now is to discover\nwhether a bipartite graph--",
    "start": "780760",
    "end": "790320"
  },
  {
    "text": "or a given graph, excuse me-- is bipartite or not. Once you know that a\ngraph is bipartite,",
    "start": "790320",
    "end": "796459"
  },
  {
    "text": "you know it's two\ncolorable, you know it's a solution to our\nproblem, to our puzzle problem.",
    "start": "796459",
    "end": "802820"
  },
  {
    "text": "OK. And, of course, in order\nto do this, and if you had a graph with-- you had thousands of friends\nand, perhaps, tens of thousands",
    "start": "802820",
    "end": "811590"
  },
  {
    "text": "of edges, and you need to\ndiscover it's not your dinner problem, maybe. But you need to discover whether\nthe graph is two colorable",
    "start": "811590",
    "end": "818280"
  },
  {
    "text": "or not, then you need to write\na computer program for this. You need a graph representation.",
    "start": "818280",
    "end": "825060"
  },
  {
    "text": "You need to do this traversal,\net cetera, et cetera. Go ahead, Josh. AUDIENCE: If a graph\nis two colorable,",
    "start": "825060",
    "end": "830282"
  },
  {
    "text": "is it always bipartite? SRINI DEVADAS: Yes. They're equivalent definitions. Absolutely right.",
    "start": "830282",
    "end": "835320"
  },
  {
    "text": "Because what would happen\nis if you can color it, then it means that you can take\nall of the red colors, you--",
    "start": "835320",
    "end": "844300"
  },
  {
    "text": "red could be equivalent\nto Friday, and-- and then blue could be\nequivalent to Saturday,",
    "start": "844300",
    "end": "849420"
  },
  {
    "text": "and all of the red colors could\nbe placed on the left, and-- and the blue on the right.",
    "start": "849420",
    "end": "857170"
  },
  {
    "text": "Fadi. AUDIENCE: But then a graph\nwith no edges is one colorable but also, by definition,\nconsidered bipartite?",
    "start": "857170",
    "end": "862862"
  },
  {
    "text": "SRINI DEVADAS: Yes. That's it. That-- there's always\npathological cases, and they're usually things\nthat get swept under the rug.",
    "start": "862862",
    "end": "872190"
  },
  {
    "text": "But one colorable is-- it is considered two colorable.",
    "start": "872190",
    "end": "877290"
  },
  {
    "text": "You can color it the two colors,\nthat's really what it is. Let's talk about cycles to\nget a sense for this property.",
    "start": "877290",
    "end": "885540"
  },
  {
    "start": "880000",
    "end": "1240000"
  },
  {
    "text": "So immediately I\nthink you recognize that when you have\nsomething like,",
    "start": "885540",
    "end": "891820"
  },
  {
    "text": "I forget what it was\nexactly, FGI or FGH, whatever, that if you\nhad a cycle like this,",
    "start": "891820",
    "end": "900240"
  },
  {
    "text": "that a graph is not\nbipartite, right? A three cycle is not bipartite.",
    "start": "900240",
    "end": "909550"
  },
  {
    "text": " Is any cycle a problem?",
    "start": "909550",
    "end": "915650"
  },
  {
    "text": "If I have a cycle\nin the graph, which means that I can go from one\nnode back to the same node",
    "start": "915650",
    "end": "922699"
  },
  {
    "text": "through a sequence of edges and,\nobviously, traversing nodes,",
    "start": "922700",
    "end": "927837"
  },
  {
    "text": "do I have a problem? Is that can be immediately\ndeclared that the graph is not bipartite? Yeah.",
    "start": "927837",
    "end": "933219"
  },
  {
    "text": "Go ahead, Julia, why not? AUDIENCE: Well, like an\neven cycle if it was, for example, A, B, C & D--",
    "start": "933219",
    "end": "938772"
  },
  {
    "text": "SRINI DEVADAS: Ah, beautiful. That's exactly what\nI wanted to bring up. So if I had something\nlike A, B, C, D, right?",
    "start": "938772",
    "end": "947610"
  },
  {
    "text": "That's clearly a cyclic graph,\nand I could put on A and C",
    "start": "947610",
    "end": "956089"
  },
  {
    "text": "on here, and B and D up\nhere, and clearly there's",
    "start": "956090",
    "end": "962550"
  },
  {
    "text": "no edge between A and C,\nthere's no edge between B and D. There's an edge between\nA and B, there's",
    "start": "962550",
    "end": "967650"
  },
  {
    "text": "an edge between C and\nD, and there's also an edge between A and D and\nC and B. So as I mentioned,",
    "start": "967650",
    "end": "975160"
  },
  {
    "text": "you're allowed crossing edges. They all have to go from\nleft to right or right",
    "start": "975160",
    "end": "980220"
  },
  {
    "text": "to left, whichever way\nyou're looking at it. So interestingly enough, I\nmean, this is two colorable.",
    "start": "980220",
    "end": "988900"
  },
  {
    "text": "But when you get to-- when you get to odd cycles-- so I'll draw one out here--",
    "start": "988900",
    "end": "997440"
  },
  {
    "text": "in the middle, and let's say\nI want to mark these nodes-- ",
    "start": "997440",
    "end": "1006500"
  },
  {
    "text": "--the names, but let's say\nthat you have a five cycle now. All right. If you have a five\ncycle, think about it.",
    "start": "1006500",
    "end": "1014510"
  },
  {
    "text": "You-- you are going to\ngo-- color this red. So let me just go\nahead and say this",
    "start": "1014510",
    "end": "1019830"
  },
  {
    "text": "is red, which means\nthis needs to be blue, that needs to be blue. This blue implies this needs\nto be red, which now implies",
    "start": "1019830",
    "end": "1028530"
  },
  {
    "text": "that this needs to be blue. And it's like, whoops,\nthat's a problem, right? So, interestingly\nenough, the odd evenness",
    "start": "1028530",
    "end": "1038810"
  },
  {
    "text": "of the parity of\na cycle determines whether a graph is\nbipartite or not,",
    "start": "1038810",
    "end": "1045480"
  },
  {
    "text": "it doesn't mean that a graph\nthat only has four cycles in it",
    "start": "1045480",
    "end": "1052030"
  },
  {
    "text": "is necessarily\nbipartite, because there",
    "start": "1052030",
    "end": "1059560"
  },
  {
    "text": "could be other reasons\nfor it not to be-- not to be bipartite.",
    "start": "1059560",
    "end": "1066430"
  },
  {
    "text": "Because you don't know about\nthe other cycles in the graph. I mean, they could be--",
    "start": "1066430",
    "end": "1071710"
  },
  {
    "text": "you say it's only\nup to four cycles. Well, there could be\na three cycle in it, and things get pretty\ncomplicated when",
    "start": "1071710",
    "end": "1077560"
  },
  {
    "text": "you have things like that. There's a lot of cycles in here. This is a cycle like that,\nthere's a cycle like this,",
    "start": "1077560",
    "end": "1083500"
  },
  {
    "text": "and the moment you\nput an edge in here, now you're saying this goes\nover here, goes like this.",
    "start": "1083500",
    "end": "1088760"
  },
  {
    "text": "There's a three cycle here. But even if this\ndidn't exist, there would be a five cycle,\net cetera, et cetera.",
    "start": "1088760",
    "end": "1094520"
  },
  {
    "text": "So there's a lot of\ncycles and graphs, right? And your algorithm,\nessentially, needs",
    "start": "1094520",
    "end": "1100450"
  },
  {
    "text": "to ensure that for-- that\nevery cycle is an even cycle.",
    "start": "1100450",
    "end": "1105929"
  },
  {
    "text": "OK. And that is exactly equivalent\nto coloring it with two colors.",
    "start": "1105930",
    "end": "1111580"
  },
  {
    "text": "OK. So we, obviously, need to\nhave a way of stopping here",
    "start": "1111580",
    "end": "1121360"
  },
  {
    "text": "in the sense that\nwhen you have a cycle, you are going to come back\nand the cycle may be fine",
    "start": "1121360",
    "end": "1128919"
  },
  {
    "text": "because it's an even cycle. But you, obviously, can't\nkeep going around the cycle",
    "start": "1128920",
    "end": "1134410"
  },
  {
    "text": "without terminating\nin a computer program. So we're going to have\nto do a recursive search.",
    "start": "1134410",
    "end": "1140960"
  },
  {
    "text": "Which has interesting\ntermination conditions, you know, as opposed\nto the divide and conquer, or even the\niterative enumeration",
    "start": "1140960",
    "end": "1150264"
  },
  {
    "text": "that we did where it was pretty\nclear what the termination condition was. That the base case was\nfairly straightforward",
    "start": "1150264",
    "end": "1155530"
  },
  {
    "text": "because you came down\nto a list of length 1, or you had something where you\nbroke things up to the point",
    "start": "1155530",
    "end": "1164050"
  },
  {
    "text": "where you had really\nsmall problems and that corresponded to\nyour base case, right? But cycle detection,\nespecially when",
    "start": "1164050",
    "end": "1170535"
  },
  {
    "text": "you're doing\nrecursive traversal, can be pretty tricky. And we also, of course,\nas I said initially,",
    "start": "1170535",
    "end": "1176470"
  },
  {
    "text": "we have to be able to\nrepresent this graph structure. Right. I mean, you could\nrepresent it as a matrix.",
    "start": "1176470",
    "end": "1183235"
  },
  {
    "text": "Right. This-- or you could say,\nwell, I hate dictionaries, I love lists, and that's\nall I'm going to use",
    "start": "1183235",
    "end": "1189249"
  },
  {
    "text": "for the rest of my life, right? Not a good idea. But if you did that,\nyou could certainly",
    "start": "1189249",
    "end": "1194710"
  },
  {
    "text": "represent the graphs as a\nmatrix or two dimensional list.",
    "start": "1194710",
    "end": "1201080"
  },
  {
    "text": "It's called an adjacency\nmatrix representation-- and I won't write it out--\nbut, effectively, your rows",
    "start": "1201080",
    "end": "1207610"
  },
  {
    "text": "are all the nodes, and your\ncolumns are all the nodes. And you have a 1 or a zero\nin the appropriate location",
    "start": "1207610",
    "end": "1216760"
  },
  {
    "text": "based on whether there's\nan edge between the row node and the column node.",
    "start": "1216760",
    "end": "1222550"
  },
  {
    "text": "And you can certainly do that. And it's-- for most\ncases-- in most cases,",
    "start": "1222550",
    "end": "1230890"
  },
  {
    "text": "it's a painful\nrepresentation to deal with. Graphs are much easier\nto deal with, especially",
    "start": "1230890",
    "end": "1238071"
  },
  {
    "text": "when you want to do traversal. So we'll stick with\na graph structure. All right. So let's talk algorithms.",
    "start": "1238071",
    "end": "1245019"
  },
  {
    "start": "1240000",
    "end": "1720000"
  },
  {
    "text": "I want to take a slightly\ndifferent example. It's similar to what\nwe have here, but--",
    "start": "1245020",
    "end": "1251620"
  },
  {
    "text": "and I want to talk about exactly\nhow an algorithm would work. And we kind of did that.",
    "start": "1251620",
    "end": "1257649"
  },
  {
    "text": "So, actually, let's\nrun it on this one, and then I'll write out what\nthe pseudocode for the algorithm",
    "start": "1257650",
    "end": "1265070"
  },
  {
    "text": "would be.  I'm going to ignore A here.",
    "start": "1265071",
    "end": "1270920"
  },
  {
    "text": "You can imagine that this\nparticular algorithm would be run on this degenerate\ncase that corresponds to A,",
    "start": "1270920",
    "end": "1278305"
  },
  {
    "text": "and you'd end up coloring\nthis red or blue. So I'm just going to go\nahead and color this red.",
    "start": "1278305",
    "end": "1284690"
  },
  {
    "text": "And I'm not done\nwith my problem, but I'm done with the\nparticular graph that",
    "start": "1284690",
    "end": "1290450"
  },
  {
    "text": "corresponds to A,\nbecause A can't reach any other node in the graph. So you ought to be a\nlittle bit careful.",
    "start": "1290450",
    "end": "1296930"
  },
  {
    "text": "And the code I'm\ngoing to show you would need to be generalized\nto take into account this forest of graphs.",
    "start": "1296930",
    "end": "1304160"
  },
  {
    "text": "OK. Because there's really a\nbunch of different graphs that are disconnected that are\npart of the overall problem.",
    "start": "1304160",
    "end": "1309899"
  },
  {
    "text": "But if I start with B,\nthen I get connectivity to all of the remaining\nedges, and so I'm good there.",
    "start": "1309900",
    "end": "1316980"
  },
  {
    "text": "So let me go ahead\nand color this red. And so the way we\ndescribed it, we say,",
    "start": "1316980",
    "end": "1324500"
  },
  {
    "text": "I'm going to look for\nthe neighbors of B. And so B is connected\nto just C in this case.",
    "start": "1324500",
    "end": "1330889"
  },
  {
    "text": "And when I traverse\nan edge, what do I do with respect to the color?",
    "start": "1330890",
    "end": "1338120"
  },
  {
    "text": "I flip the color. Right. I change the color. There's only two\ncolors so I can think of it as flipping the color.",
    "start": "1338120",
    "end": "1344270"
  },
  {
    "text": "So I go and I traverse an edge. I need to flip the color to-- to blue, right?",
    "start": "1344270",
    "end": "1350390"
  },
  {
    "text": "And then I get to C,\nand when I get to C,",
    "start": "1350390",
    "end": "1355460"
  },
  {
    "text": "I then start traversing edges. But when I traverse an edge,\nI need to flip the color.",
    "start": "1355460",
    "end": "1360500"
  },
  {
    "text": "So this goes to R.\nIn the case of D, I can go to two\ndifferent places,",
    "start": "1360500",
    "end": "1366320"
  },
  {
    "text": "and so I need to go\nahead and traverse to E. And just for the\nheck of it, I'm going to add another edge there.",
    "start": "1366320",
    "end": "1372151"
  },
  {
    "text": "Right. Because now you're\ngoing to see how-- the code is going to get\na little more complicated",
    "start": "1372151",
    "end": "1377580"
  },
  {
    "text": "with respect to the\ntermination condition that I described to\nyou, and the checks that we need to perform\nwith respect to the fact",
    "start": "1377580",
    "end": "1384020"
  },
  {
    "text": "that we wanted this graph\nto be two colorable. OK. So when I-- the way-- the way\nthis code is going to work",
    "start": "1384020",
    "end": "1390820"
  },
  {
    "text": "is I'm going to get to D,\nand with that color red, and I'm going to now see\nfor the first time-- this",
    "start": "1390820",
    "end": "1397460"
  },
  {
    "text": "is an interesting case. For the first time, I'm going\nto see that D has two neighbors.",
    "start": "1397460",
    "end": "1402620"
  },
  {
    "text": "OK. Now, I need to traverse\nboth of these edges that correspond to these two\nneighbors in sequence.",
    "start": "1402620",
    "end": "1410540"
  },
  {
    "text": "I'm going to pick\none and go with that. And then I'm going to\npick the other one, right? In general, there's two\nstrategies that you can follow.",
    "start": "1410540",
    "end": "1419240"
  },
  {
    "text": "And one of which is called depth\nfirst search, and the other is called breadth first search. OK.",
    "start": "1419240",
    "end": "1424970"
  },
  {
    "text": "So I'm not going to-- you're\ngoing to see effectively a depth first algorithm.",
    "start": "1424970",
    "end": "1430250"
  },
  {
    "text": "And I'm happy to tell you\nabout breadth first in detail",
    "start": "1430250",
    "end": "1435340"
  },
  {
    "text": "off line, but I'll mention\nwhat the difference is here so you get a sense of\nwhat the differences are.",
    "start": "1435340",
    "end": "1440590"
  },
  {
    "text": "And they're two fundamental\nsearch techniques, traversal techniques. And the depth first technique\nsays I'm going to take D,",
    "start": "1440590",
    "end": "1450650"
  },
  {
    "text": "and I'm going to pick\none of its neighbors, and I'm going to go ahead\nand say that, effectively,",
    "start": "1450650",
    "end": "1455755"
  },
  {
    "text": "that that's the only\nneighbor, and I'm going to explore\neverything that I can get to from that neighbor.",
    "start": "1455755",
    "end": "1463130"
  },
  {
    "text": "And then once I'm all done\nand there's some termination condition that happens,\nI'm going to come back",
    "start": "1463130",
    "end": "1468380"
  },
  {
    "text": "and I'm going to look at this\nother neighbor corresponding to F. So-- so what would\nhappen here in depth",
    "start": "1468380",
    "end": "1473790"
  },
  {
    "text": "first search is the following. D would go to E, and when\nI go through an edge,",
    "start": "1473790",
    "end": "1480440"
  },
  {
    "text": "I need to flip the color. Right. So I get a B here. At this point,\nunlike what we did",
    "start": "1480440",
    "end": "1488210"
  },
  {
    "text": "early on when we did\nthis particular example, or something similar, I--",
    "start": "1488210",
    "end": "1494480"
  },
  {
    "text": "what I did was\nwhen I saw R here, I colored F and E both blue.",
    "start": "1494480",
    "end": "1500110"
  },
  {
    "text": "That's effectively what I did. Remember that? Right? But now I'm actually\ndoing something different. Right.",
    "start": "1500110",
    "end": "1505420"
  },
  {
    "text": "This is a different\nexecution corresponding to depth first search. Right.",
    "start": "1505420",
    "end": "1510740"
  },
  {
    "text": "When I looked at\nall of my neighbors, including the F case, I remember\nwe had some color for this,",
    "start": "1510740",
    "end": "1516210"
  },
  {
    "text": "and then we immediately\ntook G, H and I and we colored them, right? That is breadth first search. OK.",
    "start": "1516210",
    "end": "1521540"
  },
  {
    "text": "That is looking at taking\none step in all directions that you can take\nand, essentially, it's",
    "start": "1521540",
    "end": "1527330"
  },
  {
    "text": "a frontier based\napproach where I'm taking the frontier\nof my neighbors",
    "start": "1527330",
    "end": "1533120"
  },
  {
    "text": "and pushing it outward\none step at a time, right? Contrast that with\nwhat we're doing here.",
    "start": "1533120",
    "end": "1540170"
  },
  {
    "text": "You are going to take this-- the neighbor E\ncorresponding to D,",
    "start": "1540170",
    "end": "1546830"
  },
  {
    "text": "and then you're not\ngoing to go to F, you're, in fact, going\nto go ahead and pick one of the neighbors of E, right.",
    "start": "1546830",
    "end": "1554030"
  },
  {
    "text": "And you might even have in your\nrepresentation E's neighbor being D. Because, you\nknow, D has E as a neighbor",
    "start": "1554030",
    "end": "1561980"
  },
  {
    "text": "and so does E having-- has D as a neighbor. But you'll say,\noh, look, look, I",
    "start": "1561980",
    "end": "1567320"
  },
  {
    "text": "don't need to go look at D\nnow in my depth first search, because D's already\nbeen colored.",
    "start": "1567320",
    "end": "1573260"
  },
  {
    "text": "Right. So you check that. And then you say, oh,\nwhat has not been colored? I has not been colored.",
    "start": "1573260",
    "end": "1578540"
  },
  {
    "text": "And when I traverse an edge,\nI need to flip the color, and I'm going to go\nahead and put R in here. All right.",
    "start": "1578540",
    "end": "1584240"
  },
  {
    "text": "And it's not that you\neven go back to F now from D. You don't go\nback to D at this point. You now look at I and you do\nanother recursion corresponding",
    "start": "1584240",
    "end": "1593300"
  },
  {
    "text": "to I, and you say, OK,\nwhat about I's neighbors. Well, E may be first,\nbut you already",
    "start": "1593300",
    "end": "1598400"
  },
  {
    "text": "done with E. I'm\ngoing to go ahead and I'm going to get to\nF. And you do the flip and you get B over here, right?",
    "start": "1598400",
    "end": "1605450"
  },
  {
    "text": "You still don't go-- go\nback to D. You look at F and you say I'm going to now\nlook at the neighbors of F,",
    "start": "1605450",
    "end": "1615140"
  },
  {
    "text": "and maybe you get H. And you\nsay this is R. Then you go back",
    "start": "1615140",
    "end": "1620150"
  },
  {
    "text": "and, now, for the\nfirst time, you're going to look at exhausting\nthe neighbors of a node",
    "start": "1620150",
    "end": "1626360"
  },
  {
    "text": "that you've actually reached\nand you've gone to one neighbor for. And so-- so at this point\nyou go and you make this R.",
    "start": "1626360",
    "end": "1633530"
  },
  {
    "text": "So now you come back\nand you say, am-- have I exhausted F's neighbors?",
    "start": "1633530",
    "end": "1639580"
  },
  {
    "text": "Yes, in the sense that all-- the neighbors that\nI needed to look at,",
    "start": "1639580",
    "end": "1644799"
  },
  {
    "text": "because they didn't have\ncolors, have been exhausted. And, of course, F had\nD and I as neighbors.",
    "start": "1644800",
    "end": "1650140"
  },
  {
    "text": "And they already had colors\nso I'm cool with that, right? I don't need to--",
    "start": "1650140",
    "end": "1656049"
  },
  {
    "text": "I don't need to touch them. Now, at this point,\nI'm popping up because I've exhausted\nF's neighbors.",
    "start": "1656050",
    "end": "1663309"
  },
  {
    "text": "I'm going to go back\nto where I came from. How did I get to F? I did not get to F from D.\nI actually got to F from I,",
    "start": "1663310",
    "end": "1671480"
  },
  {
    "text": "right? So I'm going to go to I.\nBut the fact of the matter is that I is done because I\ndidn't have to deal with E",
    "start": "1671480",
    "end": "1679030"
  },
  {
    "text": "and I've already-- I'm already done with that. Then I go back to E,\nsame thing, right?",
    "start": "1679030",
    "end": "1684670"
  },
  {
    "text": "Then, finally, I get\nback to D, and I say, oh, now I need to go look\nat F, and I go and I say,",
    "start": "1684670",
    "end": "1690730"
  },
  {
    "text": "oh, F is already colored\nso, therefore, I'm done. This is the simplest\nrepresentation",
    "start": "1690730",
    "end": "1696610"
  },
  {
    "text": "that I can think of for a graph\nthat's also very efficient.",
    "start": "1696610",
    "end": "1702640"
  },
  {
    "text": "So I've messed with\nthis graph quite a bit, so I want to claim that that\ndictionary representation that",
    "start": "1702640",
    "end": "1710860"
  },
  {
    "text": "says graph equals\nopen curly brackets, and then eventually close curly\nbrackets, corresponds to that, but it's kind of roughly\ncorresponds to that.",
    "start": "1710860",
    "end": "1718430"
  },
  {
    "text": "And I can certainly write\nout any graph representation in Python for any\ntopological representation",
    "start": "1718430",
    "end": "1729039"
  },
  {
    "text": "that you give me. But if you look at\nwhat's up there, the important thing is\nI want to show you--",
    "start": "1729040",
    "end": "1736240"
  },
  {
    "text": "or tell you about the\nconstituents of this graph.",
    "start": "1736240",
    "end": "1742380"
  },
  {
    "text": "So graph is a dictionary, OK. A dictionary is a set\nof key value pairs.",
    "start": "1742380",
    "end": "1750664"
  },
  {
    "start": "1750665",
    "end": "1759220"
  },
  {
    "text": "You represent sets in\nPython using curly brackets. Right. And each of the key value\npairs is represented",
    "start": "1759220",
    "end": "1767590"
  },
  {
    "text": "using some key colon val. And you see a set\nof key value pairs,",
    "start": "1767590",
    "end": "1773950"
  },
  {
    "text": "because you see these\ncommas between them, and so what you see\nhere is the key.",
    "start": "1773950",
    "end": "1779040"
  },
  {
    "text": "And the keys could be\nstrings, they could be tuples, you can have many\npossibilities for keys.",
    "start": "1779040",
    "end": "1786910"
  },
  {
    "text": "And the key comes first. And in this case, the\nkey is the string B. OK.",
    "start": "1786910",
    "end": "1792840"
  },
  {
    "text": "And so that represents\nthe name of the node B, and the value is usually a list.",
    "start": "1792840",
    "end": "1806030"
  },
  {
    "text": "And in this case,\nyou have a list that has a single entry\nin it because B only has",
    "start": "1806030",
    "end": "1811330"
  },
  {
    "text": "one edge that goes to C. Right. And so a more interesting\ncase, as you can see up there,",
    "start": "1811330",
    "end": "1819160"
  },
  {
    "text": "is D. And D connects to C,\nF and E. And so you see D--",
    "start": "1819160",
    "end": "1825496"
  },
  {
    "text": "see E and F. Right. So that's exactly what\nthe point here is. Right. This algorithm would\nrun differently",
    "start": "1825496",
    "end": "1832210"
  },
  {
    "text": "if you had a representation\nthat was equivalent from a topological\nstandpoint, because there's",
    "start": "1832210",
    "end": "1838780"
  },
  {
    "text": "no order in the topology. But I chose C, E, F. I-- you\nknow, it got typed somewhere,",
    "start": "1838780",
    "end": "1846280"
  },
  {
    "text": "C, E, F, and so the\norder of neighbors is C followed by\nE followed by F.",
    "start": "1846280",
    "end": "1851380"
  },
  {
    "text": "Now, that is if you took\nthis list of neighbors and you went from 0, 1, 2, in\nterms of indices of that list.",
    "start": "1851380",
    "end": "1858760"
  },
  {
    "text": "There's nothing that's stopping\nyou from going 2, 1, zero. In which case, you\nwould go F, E, C. Right.",
    "start": "1858760",
    "end": "1864790"
  },
  {
    "text": "Or you could do some crazy,\nrandom ordering for the list",
    "start": "1864790",
    "end": "1871120"
  },
  {
    "text": "itself. Right. But it's all entirely up to you. Right. It is deterministic. It's entirely up to you. But, now, you see how the order\nof the values that corresponds",
    "start": "1871120",
    "end": "1881200"
  },
  {
    "text": "to these lists that give you\nthe neighbors for every node affects the execution\nof the algorithm.",
    "start": "1881200",
    "end": "1887180"
  },
  {
    "text": "Right. Now, you do not want the\nresult of the algorithm yes or no, this graph\nis bipartite or not,",
    "start": "1887180",
    "end": "1894220"
  },
  {
    "text": "to be affected by the\norder that you see there. Right. Because when I draw a\ngraph like this, I mean,",
    "start": "1894220",
    "end": "1900190"
  },
  {
    "text": "this graph is\neffectively something that doesn't have order. You can't really say anything\nabout the order of G,",
    "start": "1900190",
    "end": "1908230"
  },
  {
    "text": "H and I in relation to\nF. I mean, they're-- well, that one is to the\nleft of it, they're all--",
    "start": "1908230",
    "end": "1914340"
  },
  {
    "text": "two of them are at the bottom. But that's not\nwhat this is about. And so, obviously, that graph,\nregardless of whether I--",
    "start": "1914340",
    "end": "1922330"
  },
  {
    "text": "I drew it like this or I--\nyou know, I drew it like that,",
    "start": "1922330",
    "end": "1928590"
  },
  {
    "text": "should be bipartite. Both of those graphs that I-- that correspond to H\nand G with their names",
    "start": "1928590",
    "end": "1934870"
  },
  {
    "text": "flipped, are either\nbipartite or not bipartite. Right. So you absolutely cannot have\nthe algorithm being affected",
    "start": "1934870",
    "end": "1942169"
  },
  {
    "text": "by the order in which you\nsee C, E, F or what have you. That make sense?",
    "start": "1942170",
    "end": "1948840"
  },
  {
    "text": "So you can do a lot of\noperations on dictionaries. It's probably\nsomething that you want",
    "start": "1948840",
    "end": "1955460"
  },
  {
    "text": "to look at by looking at\nthe code that we have here and looking at the code from\ngraph analysis algorithms,",
    "start": "1955460",
    "end": "1968059"
  },
  {
    "start": "1960000",
    "end": "2080000"
  },
  {
    "text": "and I'm happy to point\nyou to other literature. But the way you access\na dictionary is--",
    "start": "1968060",
    "end": "1976220"
  },
  {
    "text": "looks a lot like\naccessing a list. So you can say\nsomething like graph A,",
    "start": "1976220",
    "end": "1981720"
  },
  {
    "text": "and you say something\nlike graph A, if A is not a key in the graph,\nit would give you an error.",
    "start": "1981720",
    "end": "1988950"
  },
  {
    "text": " But you can certainly\nget values back,",
    "start": "1988950",
    "end": "2000159"
  },
  {
    "text": "and you can also assign values. So graph A, B would give-- it\nwould give you this list C,",
    "start": "2000160",
    "end": "2009950"
  },
  {
    "text": "and you can go off and you can\nsay something like graph A, B dot append-- ",
    "start": "2009950",
    "end": "2018970"
  },
  {
    "text": "--and you can say D. And if you\ndid that, if you did graph A, B dot append D, then\nthat's effectively",
    "start": "2018970",
    "end": "2026260"
  },
  {
    "text": "taking this and adding D to it.",
    "start": "2026260",
    "end": "2031910"
  },
  {
    "text": "So you can mutate the\ngraph if you wanted. We don't have to\ndo that in our code for bipartite, graph\nchecking, because we are not",
    "start": "2031910",
    "end": "2038779"
  },
  {
    "text": "mutating the graph, we're\njust traversing the graph. But you could certainly do that. So the dictionaries are a\npretty cool representation.",
    "start": "2038780",
    "end": "2046830"
  },
  {
    "text": "Encourage you to\nlearn about them. And they're useful\nin many instances.",
    "start": "2046830",
    "end": "2054949"
  },
  {
    "text": "Clearly, they replace lists\nbecause you can certainly have keys as integers, right?",
    "start": "2054949",
    "end": "2061760"
  },
  {
    "text": "You can also have\nnegative numbers as keys. There's nothing that's\nstopping you from doing that.",
    "start": "2061760",
    "end": "2066888"
  },
  {
    "text": "And you don't have to\nrepresent the negative number as a string. I mean, you could just\nhave keys that are--",
    "start": "2066889",
    "end": "2073210"
  },
  {
    "text": "that go from minus 22\nto 27, what have you.",
    "start": "2073210",
    "end": "2078839"
  },
  {
    "text": "So, hopefully, you\nhave some sense of what this code is\ngoing to look like. Both from a standpoint\nof the algorithm, which",
    "start": "2078840",
    "end": "2085250"
  },
  {
    "text": "we executed a few times,\nand from the standpoint of the structure, the\nrepresentation of the graph.",
    "start": "2085250",
    "end": "2091619"
  },
  {
    "text": "So let's take a look at\nabout 10 lines of code that corresponds to\nbipartite graph coloring.",
    "start": "2091620",
    "end": "2099349"
  },
  {
    "text": "So it fits on a screen. OK. And so this is a\npretty tight code. It does exactly what\nwe want it to do",
    "start": "2099350",
    "end": "2107000"
  },
  {
    "text": "in the sense of it's going to\ndetermine whether a graph is bipartite or not. And it has a bunch of arguments.",
    "start": "2107000",
    "end": "2114770"
  },
  {
    "text": "A graph is what you\nimagine it to be. It's the input graph. We have to start from somewhere.",
    "start": "2114770",
    "end": "2121580"
  },
  {
    "text": "This graph has a list\nof key value pairs. The keys happen to be the nodes.",
    "start": "2121580",
    "end": "2127369"
  },
  {
    "text": "You should never depend\non the keys being stored in a particular order. There's ways of saying--",
    "start": "2127370",
    "end": "2133490"
  },
  {
    "text": "you know, you can say\nthings like graph dot keys. ",
    "start": "2133490",
    "end": "2140750"
  },
  {
    "text": "And this is going to give\nyou back a list of keys.",
    "start": "2140750",
    "end": "2146540"
  },
  {
    "text": "And it's possible that\nwhen you say graph dot keys, at one point\nin the program, you get the keys in\na particular order.",
    "start": "2146540",
    "end": "2152889"
  },
  {
    "text": "And when you say it at a\ndifferent part of the program, you get the keys in\na different order. OK. But all-- the keys won't change.",
    "start": "2152889",
    "end": "2160000"
  },
  {
    "text": "If there's no bugs\nin your program, you'll get the same\nset of keys, but they may be in different order. So you obviously want to start\nwith some node in the graph,",
    "start": "2160000",
    "end": "2171230"
  },
  {
    "text": "and you're going to color\nit with a particular color, color it red. I think I had shaded and hatched\nhere, so sha stands for shaded,",
    "start": "2171230",
    "end": "2177830"
  },
  {
    "text": "and hat stands for hatched. But you can use what you want.",
    "start": "2177830",
    "end": "2183369"
  },
  {
    "text": "So if you see the invocation\nhere, bipartite graph color-- graph three starts with a node.",
    "start": "2183370",
    "end": "2190980"
  },
  {
    "text": "This is an-- its\ncoloring is a dictionary, and so we are also\nrepresenting not only the graph",
    "start": "2190980",
    "end": "2197480"
  },
  {
    "text": "as a dictionary, but we're\nalso representing the mapping that we get. Namely, the node B\nwas colored with red.",
    "start": "2197480",
    "end": "2204170"
  },
  {
    "text": "So B is a key in this\ncoloring dictionary. And R red is--",
    "start": "2204170",
    "end": "2210809"
  },
  {
    "text": "is the color that's a value. Right. So you can represent mappings. Key values or mappings. Right.",
    "start": "2210810",
    "end": "2216200"
  },
  {
    "text": "So the coloring of a node\nis also a dictionary. And so that's\nessentially what we have.",
    "start": "2216200",
    "end": "2221790"
  },
  {
    "text": "So I'm going to start with-- none of the nodes are colored,\nso that's why this is empty, and I'm going to\nstart with A, and I'm",
    "start": "2221790",
    "end": "2227900"
  },
  {
    "text": "going to start with the color\nshaded, which means that A is going to be colored shaded. Or A is going to be shaded.",
    "start": "2227900",
    "end": "2233329"
  },
  {
    "text": "OK. And this is going to return\ntrue or false depending",
    "start": "2233330",
    "end": "2238460"
  },
  {
    "text": "on whether the graph\nis bipartite or not. And if it's true,\nthen I'm going to get",
    "start": "2238460",
    "end": "2244760"
  },
  {
    "text": "something interesting with\nrespect to the mapping of nodes to colors.",
    "start": "2244760",
    "end": "2249830"
  },
  {
    "text": "That's my dictionary coloring. And, otherwise,\nI get false back, which an empty dictionary.",
    "start": "2249830",
    "end": "2255470"
  },
  {
    "text": "Because when I have something\nthat's false, I mean, you could imagine saying, well,\nthere's a problem case here.",
    "start": "2255470",
    "end": "2262350"
  },
  {
    "text": "You can color all of\nthese different nodes, but I'm kind of stuck here\nbecause of that five cycle.",
    "start": "2262350",
    "end": "2268520"
  },
  {
    "text": "But that's kind of\nindeterminate in terms of what the colors need to be.",
    "start": "2268520",
    "end": "2275760"
  },
  {
    "text": "And so-- unless you were\nactually going to go off and mutate the graph\nand remove a node and--",
    "start": "2275760",
    "end": "2281420"
  },
  {
    "text": "and say this is the friend\nyou want to dump today, and then the rest of them are\ngoing to be invited for dinner.",
    "start": "2281420",
    "end": "2288265"
  },
  {
    "text": "In that case, you\ncould obviously return a coloring\ndictionary, even in this case of the graph-- original graph not\nbeing bipartite.",
    "start": "2288265",
    "end": "2295280"
  },
  {
    "text": "But most of the time you're\nprobably in a situation where if it's not bipartite,\nyou don't return anything other",
    "start": "2295280",
    "end": "2301579"
  },
  {
    "text": "than false. All right. So let's take a look at\nwhat each of these things",
    "start": "2301580",
    "end": "2308210"
  },
  {
    "text": "do, and then you'll also get\na sense of how we manipulate dictionary structures.",
    "start": "2308210",
    "end": "2313310"
  },
  {
    "text": "So I'm just going to explain\nvery quickly each line of code here. So this pair of lines of--\nthis pair of lines of code,",
    "start": "2313310",
    "end": "2322790"
  },
  {
    "text": "essentially, say\nsomething like, well, if you've given me\na starting node,",
    "start": "2322790",
    "end": "2329000"
  },
  {
    "text": "it's just a check on the input. The starting node\nis not in the graph, it's not a key in\nthe graph, then",
    "start": "2329000",
    "end": "2334951"
  },
  {
    "text": "I'm throwing up my hands here. This is not a graph. It's not a bipartite graph. I can give you a\ncoloring, right.",
    "start": "2334951",
    "end": "2340550"
  },
  {
    "text": "So easy check. Not much there. This is an interesting check.",
    "start": "2340550",
    "end": "2345950"
  },
  {
    "text": "This, essentially,\nis going to check to see whether the particular\nnode that you have,",
    "start": "2345950",
    "end": "2352490"
  },
  {
    "text": "this is going to be\ndone recursively. So anytime you\narrive at a node, you have to check whether there's\nalready a color there or not.",
    "start": "2352490",
    "end": "2360170"
  },
  {
    "text": "If there's no color, then you\nmove forward, and you color it, and you also move\nforward in the sense",
    "start": "2360170",
    "end": "2366800"
  },
  {
    "text": "that you'll probably go ahead\nand if it has neighbors, you will traverse the neighbors. Right. But if it has a color, if\nit's already in coloring,",
    "start": "2366800",
    "end": "2374750"
  },
  {
    "text": "that means it\nalready has a color. Right. Because the keys that correspond\nto the coloring dictionary",
    "start": "2374750",
    "end": "2380480"
  },
  {
    "text": "are exactly the same in the\nsense that they're graph nodes and they're also in\nthe graph dictionary.",
    "start": "2380480",
    "end": "2386300"
  },
  {
    "text": "Right. The mappings are, of course,\ncompletely different, and the coloring dictionary\nis being grown as we speak,",
    "start": "2386300",
    "end": "2392195"
  },
  {
    "text": "or as we execute. But the graph dictionary\nis actually not mutated.",
    "start": "2392195",
    "end": "2397220"
  },
  {
    "text": "It's static. OK. And so this check here says\nthat I'm going to go ahead,",
    "start": "2397220",
    "end": "2403579"
  },
  {
    "text": "and if it's not in\ncoloring, oh, that's great. I'm going to go ahead and\nwhatever color I have, I'm going to go ahead\nand color it with that.",
    "start": "2403580",
    "end": "2410030"
  },
  {
    "text": "That's what coloring\nstart equals color does. It just colors the node. OK. And then that effectively\nis adding the key value pair",
    "start": "2410030",
    "end": "2418970"
  },
  {
    "text": "start comma color to\nthe coloring dictionary. That's what it does. Otherwise-- well, I\ngot two cases here.",
    "start": "2418970",
    "end": "2426750"
  },
  {
    "text": "Right. This thing has already been\ncolored, but I have two cases. I want to color it with\nsomething different from what",
    "start": "2426750",
    "end": "2433910"
  },
  {
    "text": "it's already been colored. That's a problem. That's a problem. That's exactly when\nwe get a five cycle",
    "start": "2433910",
    "end": "2439760"
  },
  {
    "text": "and we throw up our hands. So we're done here. We just say doesn't matter\nwhat we've colored so far,",
    "start": "2439760",
    "end": "2446869"
  },
  {
    "text": "it's all garbage. You know, this thing can't be\ncolored with two colors given the constraints I\nhave, so I'm just",
    "start": "2446870",
    "end": "2452990"
  },
  {
    "text": "going to return false\nand an empty dictionary. So anything that coloring\nhad in it, I mean, is gone.",
    "start": "2452990",
    "end": "2459029"
  },
  {
    "text": "Right. Because it's bogus. Otherwise, this\nrecursion would say,",
    "start": "2459030",
    "end": "2464630"
  },
  {
    "text": "oh, well, I'm going to return\ntrue for this thing here,",
    "start": "2464630",
    "end": "2469849"
  },
  {
    "text": "and I'm going to-- it has been colored, which means\nthat, you know, I haven't--",
    "start": "2469850",
    "end": "2476330"
  },
  {
    "text": "I don't want to do\nany more work on it. I mean, I got this node here. It's already-- it\nwas already colored and was consistently colored.",
    "start": "2476330",
    "end": "2482360"
  },
  {
    "text": "So if I don't want to\nget into infinite loops, I better not, you know, start\ntraversing nodes from this node",
    "start": "2482360",
    "end": "2487910"
  },
  {
    "text": "because I've already\nseen it before. All right. So the fact that it's\nalready colored correctly",
    "start": "2487910",
    "end": "2493190"
  },
  {
    "text": "is a termination condition. This is important. That says that I don't want\nto keep repeating myself,",
    "start": "2493190",
    "end": "2499820"
  },
  {
    "text": "that is like going through\nthe cycle over and over. Right. If you didn't have that, right? That make sense?",
    "start": "2499820",
    "end": "2505530"
  },
  {
    "text": "Yep. That's important. So, now-- well, this is a flip.",
    "start": "2505530",
    "end": "2512250"
  },
  {
    "text": "So there's no recursion,\nthere's no procedure calls here, this is just flipping the color.",
    "start": "2512250",
    "end": "2517650"
  },
  {
    "text": "That make sense? So, now, the last part, which\nis the part where I'm actually",
    "start": "2517650",
    "end": "2523110"
  },
  {
    "text": "doing depth first search\nis the part which says, OK,",
    "start": "2523110",
    "end": "2528300"
  },
  {
    "text": "I got to the point now\nwhere I'm-- essentially,",
    "start": "2528300",
    "end": "2534900"
  },
  {
    "text": "haven't done any returns here. Right. I've colored this with color,\nand I've flipped the color.",
    "start": "2534900",
    "end": "2541809"
  },
  {
    "text": "Right. So these two lines are executed. No returns. These lines are executed.",
    "start": "2541810",
    "end": "2547710"
  },
  {
    "text": "And, now, I have clearly\nalready colored start",
    "start": "2547710",
    "end": "2553429"
  },
  {
    "text": "and I flipped the\ncolor and I'm going to go ahead and make the\nrecursive call corresponding to the neighbors\nof start, and all",
    "start": "2553429",
    "end": "2563520"
  },
  {
    "text": "I have to do to look at\nthe neighbors of start is to return the\nlist corresponding to the value of graph start.",
    "start": "2563520",
    "end": "2569510"
  },
  {
    "text": "Remember, I said,\ngraph A or graph start is going to give you this-- this list, and I can go\nahead and append to it and--",
    "start": "2569510",
    "end": "2577800"
  },
  {
    "text": "I'm not going to mutate,\nbut I could have done that. And so that is going\nto give me my list and I'm just going to\ngo through, enumerate",
    "start": "2577800",
    "end": "2583911"
  },
  {
    "text": "that list in whatever order that\nit came to me, and start with-- I'm going to call\nthe first element",
    "start": "2583911",
    "end": "2590130"
  },
  {
    "text": "vertex, because that's also a\nvertex or a node synonymous. And I'm going to send in vertex\nhere, graph stays the same,",
    "start": "2590130",
    "end": "2597330"
  },
  {
    "text": "vertex is the same. I've modified colorings, so\nI want to pass that over. And, obviously, I'm going\nto pass new color here",
    "start": "2597330",
    "end": "2603450"
  },
  {
    "text": "because I've done the flip. Right. And if I ever-- I get something\nthat's false, that",
    "start": "2603450",
    "end": "2609390"
  },
  {
    "text": "means I've found an odd\ncycle and I return false. And then if\neverything works out,",
    "start": "2609390",
    "end": "2614880"
  },
  {
    "text": "I return true in the coloring. OK. So if I go ahead and run that,\nif my machine hasn't gone",
    "start": "2614880",
    "end": "2621970"
  },
  {
    "start": "2620000",
    "end": "2719000"
  },
  {
    "text": "to sleep, doesn't do very much. You know, the first graph,\nit was not colorable.",
    "start": "2621970",
    "end": "2629910"
  },
  {
    "text": "You can check these\nresults by yourself. But this is more-- the reason I'm\nputting this up is",
    "start": "2629910",
    "end": "2636250"
  },
  {
    "text": "to give you a sense of what the\ncoloring dictionary looks like. It's just so you get some\nmore exposure to these things.",
    "start": "2636250",
    "end": "2643850"
  },
  {
    "text": "So in this case you get a\nnon-empty coloring dictionary for the second run. So I ran it four times\non four different graphs.",
    "start": "2643850",
    "end": "2650650"
  },
  {
    "text": "You get a non-empty\ncoloring dictionary. It's true. The graph is bipartite. And notice that the order in\nwhich this coloring dictionary",
    "start": "2650650",
    "end": "2657670"
  },
  {
    "text": "was-- what was created was\ncertainly a function of the execution\nof the algorithm.",
    "start": "2657670",
    "end": "2663920"
  },
  {
    "text": "But this order might\nactually change if I keep running\nthis algorithm,",
    "start": "2663920",
    "end": "2669280"
  },
  {
    "text": "and if my machine had different\nloads, and so on and so forth. But you would always get through\nfor any graph representation",
    "start": "2669280",
    "end": "2676540"
  },
  {
    "text": "that is bipartite\nor too colorable. But you have no control over\nwhether F hat comes first,",
    "start": "2676540",
    "end": "2684890"
  },
  {
    "text": "or E hat comes first. Those could be flipped. All right. So never depend on the order\nof keys in a dictionary.",
    "start": "2684890",
    "end": "2692880"
  },
  {
    "text": "OK. But, certainly, the\nexistence of keys in a dictionary you can-- or the\nnonexistence you can depend on.",
    "start": "2692880",
    "end": "2698930"
  },
  {
    "text": "All right. Good. So that's really\nall I had to say.",
    "start": "2698930",
    "end": "2704099"
  },
  {
    "text": "Any questions?  All right.",
    "start": "2704100",
    "end": "2709270"
  },
  {
    "text": "Excellent. I want credit for\nfinishing one minute early. ",
    "start": "2709270",
    "end": "2719520"
  }
]