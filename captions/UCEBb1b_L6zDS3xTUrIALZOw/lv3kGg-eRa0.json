[
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5580"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high-quality,\neducational resources for free.",
    "start": "5580",
    "end": "12270"
  },
  {
    "text": "To make a donation or\nview additional materials from hundreds of MIT courses,\nvisit MIT OpenCourseWare",
    "start": "12270",
    "end": "18830"
  },
  {
    "text": "at ocw.mit.edu. TOMER ULLMAN: And today,\nwith your active help",
    "start": "18830",
    "end": "24590"
  },
  {
    "text": "and participation, I hope to\nrun a probabilistic programming tutorial in the time\nthat we have left.",
    "start": "24590",
    "end": "30459"
  },
  {
    "text": "And we're going to\nfocus specifically on a language\ncalled Church, which is a probabilistic programming\nlanguage that was developed",
    "start": "30459",
    "end": "36290"
  },
  {
    "text": "in Josh Tenenbaum's\nGroup, but it's now taken on a life of\nits own and has set up",
    "start": "36290",
    "end": "41600"
  },
  {
    "text": "shop in other places. Before I get started,\nI should say, I was, sort of, looking\nfor a good image.",
    "start": "41600",
    "end": "47719"
  },
  {
    "text": "I didn't like a\nblank page, so I was googling just Church tutorial. This is the first thing I found. It's an image for\nMinecraft about how",
    "start": "47720",
    "end": "54290"
  },
  {
    "text": "to build a church in Minecraft. Does any of us-- people have heard of Minecraft? AUDIENCE: Yeah. TOMER ULLMAN: They've\nplayed with Minecraft?",
    "start": "54290",
    "end": "59900"
  },
  {
    "text": "OK-- just in case\nyou don't know, Minecraft is a sort of\nprocedurally-generated world",
    "start": "59900",
    "end": "64959"
  },
  {
    "text": "where you get some\nbuilding blocks, literally, building blocks, that\nyou can build stuff with. And you can build an infinite\nnumber of things, including",
    "start": "64959",
    "end": "71330"
  },
  {
    "text": "a computer, and a church. And it's very cool. And I thought it's\nactually not that bad of an image for a tutorial\nabout probabilistic programming",
    "start": "71330",
    "end": "78542"
  },
  {
    "text": "language, which is\nalso about, sort of, procedurally-generative\nthings that use small building blocks\nto build up an entire world.",
    "start": "78542",
    "end": "84984"
  },
  {
    "text": "And I thought, OK, that's\nthe first hit I got. What's the other hit? Well, it's just another\nchurch, and another church, and another church, another\nchurch, another church",
    "start": "84984",
    "end": "91340"
  },
  {
    "text": "that you can build in Minecraft\nfrom many different angles and many different tutorials,\nso maybe, instead of this,",
    "start": "91340",
    "end": "96620"
  },
  {
    "text": "you can just train some\ndeep-learning algorithm to, I don't know, learn a\nbillion churches and do that.",
    "start": "96620",
    "end": "103110"
  },
  {
    "text": "That's not what we're after. So probabilistic\nprogramming, Josh already talked a bunch\nabout this, so I'll",
    "start": "103110",
    "end": "108887"
  },
  {
    "text": "sort of be repeating\nhim, or channeling him. It's about combining\nthe best of both worlds in the, sort of,\ntwo states of AI",
    "start": "108887",
    "end": "114620"
  },
  {
    "text": "right now, which is\nstatistical modeling and logic. And in many models,\nyou have this,",
    "start": "114620",
    "end": "119770"
  },
  {
    "text": "sort of, dual question of\nrepresentation and learning. And it's really, sort of, a\nproblem for cognitive science,",
    "start": "119770",
    "end": "125270"
  },
  {
    "text": "going back to the days of\nbefore cognitive science, right? I mean, this is the sort of\nproblem that a lot of people had when they tried to\nmodel the human mind.",
    "start": "125270",
    "end": "132170"
  },
  {
    "text": "This goes back to Turing. Sort of, when we want\nto build a system that is human-like in\nits intelligence,",
    "start": "132170",
    "end": "138380"
  },
  {
    "text": "the two questions\nthat we face are, what are the representations\nthat it will have, and how is it\ngoing to learn them or how is it going to\nlearn anything new?",
    "start": "138380",
    "end": "145190"
  },
  {
    "text": "And you often have\nto, sort of-- it's a short blanket problem, right? If you try to cover\nyour head, your feet are sort of not\ngetting anything. If you try to cover\nyour feet, your head's",
    "start": "145190",
    "end": "150950"
  },
  {
    "text": "not getting anything. Because oftentimes, you\nfind that, if you stick to a particularly easy\nrepresentation that's",
    "start": "150950",
    "end": "156110"
  },
  {
    "text": "sort of easy to code\nor rather something, a kind of a presentation\nthat's easy to learn,",
    "start": "156110",
    "end": "161390"
  },
  {
    "text": "like say a vector of weights\nthat you're just trying to shift your weights\naround, then, yes, that",
    "start": "161390",
    "end": "167600"
  },
  {
    "text": "might be easy, relatively\neasy, but you're sort of stuck with\nthe representation that you can learn are weights.",
    "start": "167600",
    "end": "173270"
  },
  {
    "text": "Or Josh was making a\nbig point about this, and it is a big point, that\nif you try to learn something like causal Bayes nets,\nthen you're sort of limited",
    "start": "173270",
    "end": "181190"
  },
  {
    "text": "by that representation. That is your representation\nof these sort of circles and arrows that\ngo into other circles.",
    "start": "181190",
    "end": "187010"
  },
  {
    "text": "And that might get\nyou very, very far. And you might even have very\ngood learning algorithms for those particular\nmodels, for those particular",
    "start": "187010",
    "end": "194000"
  },
  {
    "text": "representations,\nthat are tailored for those representations. Like, in these causal\ncircles and arrows,",
    "start": "194000",
    "end": "199040"
  },
  {
    "text": "belief propagation might be a\nvery good learning algorithm, but if you commit to\nthat representation,",
    "start": "199040",
    "end": "204560"
  },
  {
    "text": "then you are sort of stuck\nwith that representation. And you might not\nbe flexible enough to learn all the stuff\nthat you want to.",
    "start": "204560",
    "end": "210530"
  },
  {
    "text": "And a very flexible\nrepresentation, sort of, one of the more\nflexible ones that have come onto the\nscene in the past years",
    "start": "210530",
    "end": "216860"
  },
  {
    "text": "is why don't we try\nto learn a program? I say it's come onto the\nscene in recent years. That's not exactly true.",
    "start": "216860",
    "end": "222400"
  },
  {
    "text": "People have been interested\nin learning programs for many, many years,\nfor many, many decades, but they sort of\ntry to infer them",
    "start": "222400",
    "end": "228350"
  },
  {
    "text": "from kind of a\nlogical perspective, not really getting these\nprobabilistic learning algorithms. I'm sort of throwing\nwords out there,",
    "start": "228350",
    "end": "233611"
  },
  {
    "text": "but it'll make more\nsense as I go through it. And you already have\nsome of Josh's stuff to carry you through. But the point is, there's\nalways these questions",
    "start": "233611",
    "end": "240470"
  },
  {
    "text": "of learning and representation. For probabilistic\nprogramming languages, the representation is\nnot circles and arrows,",
    "start": "240470",
    "end": "245930"
  },
  {
    "text": "it's not vectors of\nweights, it is programs. That's what you're\ntrying to learn. That's what you're trying to\nfigure out the world with.",
    "start": "245930",
    "end": "252810"
  },
  {
    "text": "And then there's\na question of how do you learn these programs,\nbut we'll get to that.",
    "start": "252810",
    "end": "258708"
  },
  {
    "text": "OK, let's see, so we think it's\na good representation for AI and cognition for\nall the reasons",
    "start": "258709",
    "end": "264020"
  },
  {
    "text": "that Josh just talked about. And there's been\na growing interest in these things for\nthe past 10 years,",
    "start": "264020",
    "end": "269450"
  },
  {
    "text": "witnessed both by\nthe proliferation of many, many different types\nof programming languages-- sorry, probabilistic\nprogramming languages.",
    "start": "269450",
    "end": "276690"
  },
  {
    "text": "I don't know whether to\ncall them PPL, or people, or what exactly. But probabilistic\nprogramming languages, there's been PyMC\nbased on Python,",
    "start": "276690",
    "end": "282979"
  },
  {
    "text": "there's Church,\nwhich you're going to play with right now, but\nalso BLOG, WinBUGS, ProbLog,",
    "start": "282980",
    "end": "289100"
  },
  {
    "text": "Venture, many others that\nI haven't mentioned here. So first of all,\nthere's many of them. And also, DARPA has\nstarted taking interest",
    "start": "289100",
    "end": "295250"
  },
  {
    "text": "and has given a large grant\nto advance this field. They think it might be big.",
    "start": "295250",
    "end": "300602"
  },
  {
    "text": "If you're in, sort of,\nprobabilistic programming more generally than Church, you think\nit's interesting to follow, you want to learn more about\nit, you should go to this thing,",
    "start": "300602",
    "end": "307940"
  },
  {
    "text": "probabilistic-programming.org\nwiki. It sort of keeps\nit up-to-date with many, many, many, different\ntypes of programming languages.",
    "start": "307940",
    "end": "315267"
  },
  {
    "text": "You don't necessarily have\nto write this down right now. I will send you\nthe slides later, but just, sort of,\nkeep it in mind form,",
    "start": "315267",
    "end": "321110"
  },
  {
    "text": "link to it in your head. There's also this, sort of,\nnice summary from this DARPA-- so DARPA started sending\nthis about a year ago.",
    "start": "321110",
    "end": "328310"
  },
  {
    "text": "And someone already\nwent to a summer school on probabilistic\nprogramming and, sort of, wrote the state of the field. It's six months ago.",
    "start": "328310",
    "end": "334110"
  },
  {
    "text": "It's a bit outdated,\nbut it also makes for an interesting\nread for those of you who want to follow that.",
    "start": "334110",
    "end": "340134"
  },
  {
    "text": "OK, so that's about\nprobabilistic programming, very, very, very generally. What about Church very,\nvery, very generally?",
    "start": "340134",
    "end": "345919"
  },
  {
    "text": "So as I said, Church\nis one example of a probabilistic\nprogramming language. It was developed\nby several people",
    "start": "345920",
    "end": "351560"
  },
  {
    "text": "at MIT who have\nsince gone on to do other different\nthings like continue to develop Church at Stanford.",
    "start": "351560",
    "end": "358039"
  },
  {
    "text": "That's Professor Noah Goodman. Although, of course, he's\ndoing many, many other things. There's also been\nVikash Mansinghka,",
    "start": "358040",
    "end": "364460"
  },
  {
    "text": "who has gone on to develop\nother probabilistic programming languages like Venture at MIT.",
    "start": "364460",
    "end": "371330"
  },
  {
    "text": "And one thing to say generally\nabout probabilistic programming languages is that,\nusually they are",
    "start": "371330",
    "end": "376430"
  },
  {
    "text": "based on an already\nexisting language. So you take MATLAB and you\ntry to make it probabilistic. You take Python and you try\nto make it probabilistic.",
    "start": "376430",
    "end": "384920"
  },
  {
    "text": "Julia has a probabilistic\nprogramming implementation. Church in particular\nis based on Scheme,",
    "start": "384920",
    "end": "390050"
  },
  {
    "text": "which is the derivative\nof LISP, which is itself sort of an attempt to capture\nlambda calculus, which is not",
    "start": "390050",
    "end": "395452"
  },
  {
    "text": "a programming language,\nit is an approach to trying to think about all\npossible functions developed",
    "start": "395452",
    "end": "401750"
  },
  {
    "text": "by Alonzo Church. And that's why Church\nis called Church. It has nothing to do with\nthe actual buildings.",
    "start": "401750",
    "end": "408930"
  },
  {
    "text": "So the point about\nScheme which is very nice is that it's very compositional. And anything that\nyou write can then",
    "start": "408930",
    "end": "414740"
  },
  {
    "text": "be passed off into the\nother functions as the data. You'll see some\nexamples of that. Church has several\ninference engines",
    "start": "414740",
    "end": "421001"
  },
  {
    "text": "that you can try to run. We'll get into that. The backbone of it is\nMetropolis-Hastings-type",
    "start": "421001",
    "end": "426020"
  },
  {
    "text": "sampling over possible\nprograms, but it has other types of programming,\nincluding explicit enumeration.",
    "start": "426020",
    "end": "431815"
  },
  {
    "text": "If your space is\nsmall enough, it can just look at all the\npossible ways to run a program. It has rejection query.",
    "start": "431815",
    "end": "437500"
  },
  {
    "text": "Again, we'll get to this. Don't worry about, like,\nwhat is he talking about. ",
    "start": "437500",
    "end": "443427"
  },
  {
    "text": "Yeah, so it has a\nwhole bunch of-- you know, particle filtering\nis one attempt at that. But the point is there are--",
    "start": "443427",
    "end": "449270"
  },
  {
    "text": "each probabilistic\nprogramming language has its own set of\ninference engine. Some of them try to go the\nMetropolis-Hastings route.",
    "start": "449270",
    "end": "456000"
  },
  {
    "text": "Some of them try\nto say, well, it's a probabilistic\nprogramming language, but it's really limited\nto causal Bayes nets,",
    "start": "456000",
    "end": "461414"
  },
  {
    "text": "so the inference\nengines are going to be stuff that's good\nfor causal Bayes nets. But all of them sort\nof share this dream of,",
    "start": "461414",
    "end": "469530"
  },
  {
    "text": "it's easier to write the forward\nmodel than the inference. And it's really annoying.",
    "start": "469530",
    "end": "474949"
  },
  {
    "text": "Those of you who have ever tried\nto write an inference engine or to write inference\nover any sort of model, it's really annoying\nto write that.",
    "start": "474950",
    "end": "481400"
  },
  {
    "text": "And it usually sort of only\nworks for the one thing that you've built.\nAnd one of the selling points of probabilistic\nprogramming languages,",
    "start": "481400",
    "end": "487100"
  },
  {
    "text": "one of the reasons\nthat DARPA took an interest, beyond the fact\nthat they can try to capture the human mind, and flexible\nAI, and all that, is they",
    "start": "487100",
    "end": "494240"
  },
  {
    "text": "have this sort of promise,\nthis pitch that, why don't you just write down\nthe forward model, how you think the world works,\nand we'll, kind of, take",
    "start": "494240",
    "end": "501530"
  },
  {
    "text": "care of inference for you. And in many cases,\nit turns out to be a lot easier to write\nthe forward model",
    "start": "501530",
    "end": "508549"
  },
  {
    "text": "than to try to write the\ninference engine for it. In fact, you can\nvery quickly get to something that's even, like,\nfive or six lines of code long,",
    "start": "508549",
    "end": "516500"
  },
  {
    "text": "that would be intractable,\nwould be very hard to write down the analytic\nexpression for, would be very hard to think\nabout what would",
    "start": "516500",
    "end": "523070"
  },
  {
    "text": "be the inference engine for, but\nit's really just easy to write. I mean, all you have is\na set of assumptions. And you're trying to figure\nout how they work together.",
    "start": "523070",
    "end": "529490"
  },
  {
    "text": "Again, we'll see some\nexamples of that. But my point was all\nprobabilistic programming languages are about writing the\nforward model and then, sort",
    "start": "529490",
    "end": "535880"
  },
  {
    "text": "of, trying to do the\ninference for you. Another point about\nChurch in particular, it is under construction,\nso you'll notice",
    "start": "535880",
    "end": "542675"
  },
  {
    "text": "this when you write it now. It will break. It will freeze. It will do all sorts\nof annoying things,",
    "start": "542675",
    "end": "548810"
  },
  {
    "text": "so it is under construction. It's not exactly something\nthat you would then go and work with like MATLAB.",
    "start": "548810",
    "end": "554330"
  },
  {
    "text": "Let me put some caveats on\nthat caveat, which is these two asterisks right here. First of all, despite being\na, sort of, a toy language,",
    "start": "554330",
    "end": "561200"
  },
  {
    "text": "it's already been used in\nseveral serious scientific papers, including\na paper in Science, because it is very easy to make\ncertain points about cognition",
    "start": "561200",
    "end": "569370"
  },
  {
    "text": "or about computational\ncognition in Church that is very hard to do in\ncertain other languages.",
    "start": "569370",
    "end": "574399"
  },
  {
    "text": "In particular, things that\nrequire recursion, or inference over inference, where you\nwrite down sort of the way",
    "start": "574400",
    "end": "579675"
  },
  {
    "text": "that you think about\nan agent, then you put that into\nanother agent, that can be very hard to write\nin certain languages.",
    "start": "579675",
    "end": "585260"
  },
  {
    "text": "Church can kind of\ndo that more easily. Let's see, I had another\ncaveat, which is--",
    "start": "585260",
    "end": "592337"
  },
  {
    "text": "what was that? Oh, another caveat\nis that, despite it being under construction, you\nsort of think, well, why should I worry about this thing?",
    "start": "592337",
    "end": "597641"
  },
  {
    "text": "Why should I even\nbother hacking with it? Is because, you'll notice\nthere's probmods.org.",
    "start": "597641",
    "end": "603470"
  },
  {
    "text": "And there are just a\nton, a ton of examples. There's a semester\nworth of examples of all sorts of things from\nboth cognition, and AI,",
    "start": "603470",
    "end": "611380"
  },
  {
    "text": "and interesting\nstatistical models that are very easy to\nunderstand in Church.",
    "start": "611380",
    "end": "616449"
  },
  {
    "text": "And for me at least,\nit was very much a process of demystification\nthat something like this can help with.",
    "start": "616449",
    "end": "621649"
  },
  {
    "text": "You learn about something\nlike the Chinese restaurant process, the Dirichlet\nprocess, nonparametrics, and it's kind of hard to read\nthe textbook description of it.",
    "start": "621650",
    "end": "628430"
  },
  {
    "text": "It's hard to wrap\nyour head around. And then you go and you\nwrite three lines of code, or five lines of code. And you think, oh, that\nwasn't so bad, right?",
    "start": "628430",
    "end": "635187"
  },
  {
    "text": "And it's sort of\neasy to write a bunch of these things in Church,\nso it's a useful tool for demystification.",
    "start": "635187",
    "end": "640640"
  },
  {
    "text": "It's a useful tool\nto get a handle on certain models in\ncognition and statistics, so those are the two asterisks.",
    "start": "640640",
    "end": "646370"
  },
  {
    "text": "Be warned, but also, you\nknow, do play around with it.",
    "start": "646370",
    "end": "651592"
  },
  {
    "text": "Let's see, the founding\npaper, for those of you who are interested, you can\nlook at this link later on. It was by Goodman,\nMansinghka, Dan Roy, Bonawitz,",
    "start": "651592",
    "end": "658260"
  },
  {
    "text": "and Tenenbaum. And for those of\nyou who, by the way, have already read\nabout Church a bit,",
    "start": "658260",
    "end": "663290"
  },
  {
    "text": "you think that this tutorial\nis a bit-- maybe it was-- I should say, we'll start\noff very, very easy, OK?",
    "start": "663290",
    "end": "668720"
  },
  {
    "text": "We'll do things like addition. We'll do things like\nflipping coins, OK? If you think that this is-- maybe you've already\nread through probmods,",
    "start": "668720",
    "end": "674590"
  },
  {
    "text": "you've already done a few\nchapters of that, by all means, use this time to\ncontinue to think about probabilistic\nprogramming, for example,",
    "start": "674590",
    "end": "681230"
  },
  {
    "text": "either by talking\nto me, and I'll find something for you, or\nby going to forestdb.org.",
    "start": "681230",
    "end": "686930"
  },
  {
    "text": "Again, I'll give you that link\nfor those of you who want it. It has a whole repository\nof different probabilistic programming models that you\ncan play with, think about, see",
    "start": "686930",
    "end": "694610"
  },
  {
    "text": "how you would change them,\nand things like that. Also after this tutorial,\nif you're still interested, you can go to that link.",
    "start": "694610",
    "end": "701330"
  },
  {
    "text": "Oh and one last thing. There's sort of a-- you\ncan't see that right there. One last thing that I\nshould say about Church,",
    "start": "701330",
    "end": "708820"
  },
  {
    "text": "it's based on Scheme. But a lot of the people\nthat have sort of been doing a lot of work\non it have become more in love with JavaScript.",
    "start": "708820",
    "end": "715682"
  },
  {
    "text": "In fact, the thing that\nyou're going to be working on is sort of a JavaScript\nimplementation of Church under the hood.",
    "start": "715682",
    "end": "721240"
  },
  {
    "text": "And they've started to implement\nsomething called WebPPL, so Web Probabilistic\nProgramming Language.",
    "start": "721240",
    "end": "727040"
  },
  {
    "text": "It's a language\nthat's specifically a derivative of JavaScript. For those of you\nwho like JavaScript, you can play with that.",
    "start": "727040",
    "end": "732540"
  },
  {
    "text": "And if you go to WebPPL.org,\nif you search for WebPPL, again, I can leave\nyou the link for that. It's sort of here,\nbut you can't see it.",
    "start": "732540",
    "end": "738950"
  },
  {
    "text": "There are, again, a lot\nof nice examples there of different programming\nlanguage-- programs that you can write\nin JavaScript.",
    "start": "738950",
    "end": "744920"
  },
  {
    "text": "OK, that was a very\nlong-winded introduction, caveats, and setting\nup different things.",
    "start": "744920",
    "end": "751807"
  },
  {
    "text": "The objectives for this\ntutorial is, first of all, to become familiar\nwith the Church syntax, it can be a little wonky, if you\ndon't know it, at first, to run",
    "start": "751807",
    "end": "758720"
  },
  {
    "text": "forward a few models to\ngive you an example of just, before inference, an example\nof, here's my forward model,",
    "start": "758720",
    "end": "764300"
  },
  {
    "text": "here's how I describe the world,\nnow let's try sampling from it. Let's sample, sample\nagain, sample again, sample again, see what\ndistributions we get.",
    "start": "764300",
    "end": "771665"
  },
  {
    "text": "Get a sense for\nthe point that I'm going to make a few times,\nwhich is once you write your forward model,\nthat is a representation",
    "start": "771665",
    "end": "778250"
  },
  {
    "text": "of a distribution-- and I'll come back\nto this point, but just, sort of,\nkeep that in mind. You write down a program.",
    "start": "778250",
    "end": "783950"
  },
  {
    "text": "And you run it forward. And you get a sample. You run it again and you\nget a different sample. You run it in the limit,\nyou get some distribution.",
    "start": "783950",
    "end": "792200"
  },
  {
    "text": "Some other constructs\nlike memoization-- after we do all\nof this, we'll try to get at sampling, and the\nquery operator, and really,",
    "start": "792200",
    "end": "800316"
  },
  {
    "text": "conditioning and inference. So we said we'll try to\nrun a few models forward. Once we do that, we'll try\nto get the hang of inference.",
    "start": "800316",
    "end": "806910"
  },
  {
    "text": "So you'll try to write down\na forward model about things like a coin, or goal\ninference, or things like that.",
    "start": "806910",
    "end": "812639"
  },
  {
    "text": "And you'll try to\nactually infer something, like what is the\nweight of the coin, from some data, like some coin\nflips, some very simple stuff.",
    "start": "812639",
    "end": "821510"
  },
  {
    "text": "OK, and we'll go through some\nexamples, like, as I said, coin flipping, maybe causal\nnetworks, maybe intuitive",
    "start": "821510",
    "end": "826520"
  },
  {
    "text": "physics and\nintuitive psychology. I do hope to get to\nintuitive psychology. We'll see if we get to that.",
    "start": "826520",
    "end": "832300"
  },
  {
    "text": "So some prerequisites\nand set up, that's what I asked you\nto do at the beginning. If you happen to have\na local implementation,",
    "start": "832300",
    "end": "838340"
  },
  {
    "text": "you can open that now. If you didn't, just go to\nprobmods.org/play-space.html",
    "start": "838340",
    "end": "845720"
  },
  {
    "text": "and open that up. And we're going to play a\ngame of Noisy Tomer Says.",
    "start": "845720",
    "end": "851510"
  },
  {
    "text": "So now you should also-- open this, open a\nbrowser, go to that, or open your local\nimplementation.",
    "start": "851510",
    "end": "857270"
  },
  {
    "text": "Also open up the file\nthat I sent you of--",
    "start": "857270",
    "end": "863144"
  },
  {
    "text": "it should have have been\ncalled, like, student copy, something like that. It contains a bunch of\nthings that we're basically",
    "start": "863144",
    "end": "868713"
  },
  {
    "text": "going to just sort of copy,\npaste into the browser. Now, the nice thing\nabout this browser is, it is sort of a working\nimplementation of Church.",
    "start": "868713",
    "end": "875269"
  },
  {
    "text": "You just paste in the code. You hit run. It runs, OK? So you guys should all more or\nless have a screen like this.",
    "start": "875270",
    "end": "881405"
  },
  {
    "text": " I'll take this out so I\ndon't sit on it right now. Does everyone have\nmore or less something",
    "start": "881405",
    "end": "887990"
  },
  {
    "text": "like this, some sort\nof browser that you can type things into and press run? Over there? OK, we'll start off with\nsome very, very simple stuff",
    "start": "887990",
    "end": "895730"
  },
  {
    "text": "that you should already have\nin the syntax of the Church tutorial, so just try\neither pasting in or typing",
    "start": "895730",
    "end": "902960"
  },
  {
    "text": "in things like this thing. So the first thing you'll\nnotice is that, over here, it's",
    "start": "902960",
    "end": "909080"
  },
  {
    "text": "what's called-- sorry, let me adjust this\nscreen so it's not actually-- so that you can see it.",
    "start": "909080",
    "end": "915110"
  },
  {
    "text": " Zone C over here, you\nshould be looking--",
    "start": "915110",
    "end": "920320"
  },
  {
    "text": "I've sort of done over here,\nplus 2 2, and the result is 4.",
    "start": "920320",
    "end": "926977"
  },
  {
    "text": "So the first thing\nto see, some of you may be familiar with this, who's\nsomebody with Polish notation, where you just go plus 2 2?",
    "start": "926977",
    "end": "934020"
  },
  {
    "text": "Instead of going 2 plus-- who is not familiar\nwith Polish notation? OK, good, thank you.",
    "start": "934020",
    "end": "940709"
  },
  {
    "text": "Polish notation just means that,\ninstead of writing 2 plus 2, you write plus 2 2, so you write\nthat the thing that operates,",
    "start": "940710",
    "end": "946710"
  },
  {
    "text": "the function, outside, and\nyou write all the arguments for the function like that. In fact, most of the\ntime, you do this.",
    "start": "946710",
    "end": "952920"
  },
  {
    "text": "When you write down\nfunctions for code, you usually write the\nfunction then the things that it operates on. But here, it's going\nto work for everything.",
    "start": "952920",
    "end": "959160"
  },
  {
    "text": "And it can be a bit\nconfusing at first when you do things\nlike plus 2 2. The second thing is that\nyou put brackets on anything",
    "start": "959160",
    "end": "965460"
  },
  {
    "text": "that you want to evaluate, OK? So, for example, here\nis an expression. The expression is plus 2 2.",
    "start": "965460",
    "end": "970740"
  },
  {
    "text": "And you want to evaluate\nthat expression. So for example, I wanted to\nevaluate the expression--",
    "start": "970740",
    "end": "977550"
  },
  {
    "text": "I think I put some,\nlike, cursor for-- so you can see what I'm\ndoing with my thing. OK, if you want to do something\nlike, you know, times 2 2,",
    "start": "977550",
    "end": "984960"
  },
  {
    "text": "that would be the same thing. And I would go to run.",
    "start": "984960",
    "end": "990519"
  },
  {
    "text": "And that would be,\nof course, 4 again. It let's you do some\nother examples from here. Like there's a bunch\nof simple logic,",
    "start": "990520",
    "end": "996660"
  },
  {
    "text": "like you might do display. Display is just a way\nto run it, to-- sorry, to display the result over here.",
    "start": "996660",
    "end": "1003200"
  },
  {
    "text": "You can do a bunch of\nlogic things, like equal. So again, the\noperator is outside. And you would do equal\nquestion mark 2 2,",
    "start": "1003200",
    "end": "1009914"
  },
  {
    "text": "and then evaluate\nthat expression. And you can do\nbigger than equals, all these different things. AUDIENCE: the question mark?",
    "start": "1009914",
    "end": "1015079"
  },
  {
    "text": "TOMER ULLMAN: The\nquestion mark is just-- I've just named it that way. It doesn't actually\nhave any sense. I could have just called it\nequal-- sorry, no, sorry.",
    "start": "1015080",
    "end": "1022754"
  },
  {
    "text": "There is no particular\nmeaning to the question mark. It's just that this\nthing, this operator, is called equal question mark.",
    "start": "1022754",
    "end": "1028431"
  },
  {
    "text": "That's the name for it. And it's just-- it is\nthe equals operator. That's how you check\nif two things are equal to one another.",
    "start": "1028432",
    "end": "1033661"
  },
  {
    "text": "In languages like\nPython, you would do, you know, equals\nequals, like that. This is how you do it here, OK?",
    "start": "1033661",
    "end": "1042170"
  },
  {
    "text": "Let's see, a few other\nsimple syntax things. So you might say, for\nexample, the statement for defining variables\nis, shockingly enough,",
    "start": "1042170",
    "end": "1050060"
  },
  {
    "text": "define, so you\nwould do define x 3. And now, the next time that\nI do x, then hopefully--",
    "start": "1050060",
    "end": "1057220"
  },
  {
    "text": "and I run that--\nthen it'll show 3. There are a few other\nbasic syntax things,",
    "start": "1057220",
    "end": "1062300"
  },
  {
    "text": "like lists, that might be\nimportant, like, you know, define x to be a list of 1 2 3.",
    "start": "1062300",
    "end": "1068300"
  },
  {
    "text": "And if you run that,\nthen you'll get 1 2 3. Again, we're starting\nout very, very slow,",
    "start": "1068300",
    "end": "1073490"
  },
  {
    "text": "but we'll hopefully\nget soon to more things like Gaussian processes.",
    "start": "1073490",
    "end": "1078509"
  },
  {
    "text": "Some simple things like\nif-then statements-- OK, I'm just copying and\npasting off of this document",
    "start": "1078510",
    "end": "1084679"
  },
  {
    "text": "that you should\nall have, so that's why I'm, sort of,\nrunning through it. But the point is that\nyou would do-- the syntax",
    "start": "1084680",
    "end": "1089900"
  },
  {
    "text": "for doing an if-then conditional\nstatement is like this.",
    "start": "1089900",
    "end": "1097280"
  },
  {
    "text": "You write down if, and then\nyou write down the condition that either evaluates\nto true or to false.",
    "start": "1097280",
    "end": "1104934"
  },
  {
    "text": "So it's if this condition,\ndo the first thing. If it's false, do\nthe second thing.",
    "start": "1104935",
    "end": "1113206"
  },
  {
    "text": "In this particular\ncase, I have defined a variable called socrates. I've defined it as drunk.",
    "start": "1113206",
    "end": "1118399"
  },
  {
    "text": "And then I run the condition\nequal socrates drunk, if that's true, then\nreturn the answer true.",
    "start": "1118400",
    "end": "1125462"
  },
  {
    "text": "Or, you know, I could have\nwritten return the answer, Socrates is a drunk. If it's false, return\nthe answer false.",
    "start": "1125462",
    "end": "1130730"
  },
  {
    "text": "Did everyone more or\nless get the conditional? It just says, if condition,\nreturn the first thing",
    "start": "1130730",
    "end": "1136160"
  },
  {
    "text": "otherwise, the thing\non the second line. Another important\nthing before we start getting at more\nthings like recursion",
    "start": "1136160",
    "end": "1142467"
  },
  {
    "text": "and forward sampling\nis the notion of, how would I define a function? So, so far we've defined\nvariables, right?",
    "start": "1142467",
    "end": "1148160"
  },
  {
    "text": "I could have defined something\nlike define x 2, right? And then that would\nhave just been that.",
    "start": "1148160",
    "end": "1153790"
  },
  {
    "text": "But I want to define,\nprobably, functions, so I might define something like define-- and now I have two options.",
    "start": "1153790",
    "end": "1159049"
  },
  {
    "text": "There are two ways of\ndefining functions in Church. One of them is to\ndo the following.",
    "start": "1159050",
    "end": "1164570"
  },
  {
    "text": "You define square. And then you say, well, square\nis, itself, a procedure.",
    "start": "1164570",
    "end": "1171230"
  },
  {
    "text": "It is a lambda. And I'll explain this\nas I go along, just watch me, sort of, type it. It takes in a particular\nargument, say, x.",
    "start": "1171230",
    "end": "1178059"
  },
  {
    "text": "And then what it does to,\nis it multiplies x by x. So the point is, you say, well,\nhere, x is a particular thing.",
    "start": "1178060",
    "end": "1186179"
  },
  {
    "text": "It is an object. What is it? It is just 2. Here, square is a thing. What sort of thing is it?",
    "start": "1186180",
    "end": "1192289"
  },
  {
    "text": "It is this thing. Ah, what is this thing? This thing is a procedure that--\nthis is the only thing that you",
    "start": "1192290",
    "end": "1199940"
  },
  {
    "text": "need to know about functions. Lambda is the thing that\nactually defines functions, OK? It is a procedure that takes\nin some number of arguments,",
    "start": "1199940",
    "end": "1206870"
  },
  {
    "text": "in this case, just one argument. You could have\ncalled it anything. I just called it x. You could have\ncalled it argument1. You could have\ncalled it socrates.",
    "start": "1206870",
    "end": "1212540"
  },
  {
    "text": "You could have called it fubar. But the point is, it\ntakes in this argument. And then what does it do\nwith it is the next thing?",
    "start": "1212540",
    "end": "1217760"
  },
  {
    "text": "So you say, lambda, number of\narguments that you take in. And then what do you do with it? In this case, you\njust do times x x.",
    "start": "1217760",
    "end": "1224320"
  },
  {
    "text": "So this is a function called\nsquare, very basic stuff. It takes in an argument and\nit multiplies it by itself,",
    "start": "1224320",
    "end": "1230250"
  },
  {
    "text": "so it is the square of x,\nx times x, very simple. There's another way of\ndoing that if you don't want",
    "start": "1230250",
    "end": "1237110"
  },
  {
    "text": "to type out lambdas,\nif you don't want to start doing lambda\nthis, lambda that, it's sort of annoying.",
    "start": "1237110",
    "end": "1243117"
  },
  {
    "text": "Let me just give you\none more example. Like, if I wanted something\nwith two arguments, I could have done-- you know, I\ncould have called it something",
    "start": "1243117",
    "end": "1248843"
  },
  {
    "text": "like my-proc lambda x y. And now, what it does\nis, it multiplies xy.",
    "start": "1248843",
    "end": "1253950"
  },
  {
    "text": "OK, this is an\nexample of a thing. What sort of thing is it? It is a procedure. I know it's a procedure\nbecause it starts with lambda.",
    "start": "1253950",
    "end": "1260900"
  },
  {
    "text": "It takes in two arguments. Here they're called x and y. What does that do with it? It multiplies x times y.",
    "start": "1260900",
    "end": "1266900"
  },
  {
    "text": "Really, this is\njust multiplication. So after I define\nthis procedure, I could then do,\nlike, my-proc-- sorry,",
    "start": "1266900",
    "end": "1272120"
  },
  {
    "text": "I should have explained that. Then you do my-proc, say, 2\n8, or something like that. AUDIENCE: [INAUDIBLE] TOMER ULLMAN: Yeah, sorry--",
    "start": "1272120",
    "end": "1277894"
  },
  {
    "text": "that's a very good question. And it would bring back 16. Sorry, once I define my thing,\nthis is an operator now.",
    "start": "1277894",
    "end": "1285590"
  },
  {
    "text": "This is an operator that\ncan be applied to arguments. And you apply it by doing that\nparentheses that we just saw.",
    "start": "1285590",
    "end": "1293059"
  },
  {
    "text": "If I just tried, by the way,\nlike, without applying it, if I just tried something like\nthis, what you would get back is, it would say, this is a\nfunction, because it just says,",
    "start": "1293060",
    "end": "1304050"
  },
  {
    "text": "what is this thing? You try to evaluate it. You're not evaluating on\nanything, so it just returns, what is this thing? It's a function.",
    "start": "1304050",
    "end": "1309519"
  },
  {
    "text": "It's a function that expects\nx y and then multiplies them. If you actually want to\napply it on something,",
    "start": "1309520",
    "end": "1315510"
  },
  {
    "text": "you would need to provide\nwith some input arguments. So I said, let's try to define\nsquare as a lambda of x.",
    "start": "1315510",
    "end": "1322220"
  },
  {
    "text": "That does-- it takes in an\nx and multiplies x by x. There's one more way to\ndefine a function, which,",
    "start": "1322220",
    "end": "1329400"
  },
  {
    "text": "it sort of gets rid of\nthis lambda type thing. It's exactly equivalent to\nthe thing I just showed you, it just takes a bit less\nwriting, which is to say,",
    "start": "1329400",
    "end": "1336234"
  },
  {
    "text": "define-- I just misspelled\nsquare, didn't I? Yes. Define square x-- like that--",
    "start": "1336234",
    "end": "1343529"
  },
  {
    "text": "times x x. Now what this is\nsaying, so this just",
    "start": "1343530",
    "end": "1348570"
  },
  {
    "text": "goes straight to saying,\nlike, before I would say, define this thing 2.",
    "start": "1348570",
    "end": "1353730"
  },
  {
    "text": "OK, and then I said, define\nthis thing, the square, as this procedure.",
    "start": "1353730",
    "end": "1358830"
  },
  {
    "text": "Here you can say, I want to\ndirectly define a procedure. I'm not going to bother\nwith this lambda stuff. I want to directly\ndefine a function.",
    "start": "1358830",
    "end": "1365190"
  },
  {
    "text": "I want to directly\ndefine a procedure. Can I do that? Yes, you could if you wanted to. You would just directly put\nthese brackets right there.",
    "start": "1365190",
    "end": "1371370"
  },
  {
    "text": "You would say define. And if the next thing is\nsome brackets, then it says, OK, I'm going to\ndefine a procedure",
    "start": "1371370",
    "end": "1377190"
  },
  {
    "text": "where the name of the\nprocedure is square. And it takes in one\nargument, which is x. And what it does\nto it is times x x.",
    "start": "1377190",
    "end": "1384562"
  },
  {
    "text": "And if you do it that\nway, then under the hood, what Scheme does is actually\nwrites it out like this. It puts in the lambda\nwhere it expects,",
    "start": "1384562",
    "end": "1390600"
  },
  {
    "text": "but again, this is not\nterribly important stuff. And those of you are,\nsort of, tuning out, and saying, well, fine.",
    "start": "1390600",
    "end": "1396150"
  },
  {
    "text": "And you just wanted to\nlearn about-- a bit more about how probabilistic\nprogramming works, don't worry. We'll get to some examples\nin about 10 minutes.",
    "start": "1396150",
    "end": "1403254"
  },
  {
    "text": "Here's another very useful\nthing that you might want to do in many of your things. This is called the map.",
    "start": "1403254",
    "end": "1408539"
  },
  {
    "text": "And the way map works\nis, you map a function to a bunch of arguments. So you would say--",
    "start": "1408540",
    "end": "1414750"
  },
  {
    "text": "map is just a\nhigh-level function which takes in a\nparticular procedure. Then it applies it to each one\nof these things individually,",
    "start": "1414750",
    "end": "1422640"
  },
  {
    "text": "OK? So square, in this\ncase, as we said, it is a thing that\ntakes in one argument. So this is now going to take\nsquare and apply it to 1.",
    "start": "1422640",
    "end": "1429520"
  },
  {
    "text": "So then I'm going to take\nsquare and apply it to 2, take square and apply it to 3. And the result of\nthis is just going to be a list of squares, 1\n4, 9, 16, 25, simple enough?",
    "start": "1429520",
    "end": "1441660"
  },
  {
    "text": "Yes. But map is very useful. You should probably\nknow about it. OK, some simple things\nlike, recursion, OK,",
    "start": "1441660",
    "end": "1448710"
  },
  {
    "text": "so suppose I wanted to\napply square to the list from 1 to 100, and suppose I\ndidn't have the range 1 to 100.",
    "start": "1448710",
    "end": "1455730"
  },
  {
    "text": "Most languages in\nScheme actually does have something called\nrange, which gives you all the numbers from 1 to 100.",
    "start": "1455730",
    "end": "1461850"
  },
  {
    "text": "Suppose I didn't. Suppose I want to construct\nall the numbers 1 to 100. I don't want to actually\nwrite them down-- 1, 2, 3, 4, 5, 6, all\nthe way up to 100.",
    "start": "1461850",
    "end": "1469830"
  },
  {
    "text": "I can write down\nsomething that does that. And it uses a little\nbit of recursion. And the way it does it is this.",
    "start": "1469830",
    "end": "1475140"
  },
  {
    "text": "This is just to get\nyou used to recursion, because we'll be seeing\nit a little bit later.",
    "start": "1475140",
    "end": "1480960"
  },
  {
    "text": "And this says, OK, I'm going to\ndefine something called range,",
    "start": "1480960",
    "end": "1486753"
  },
  {
    "text": "which takes in an argument--\nyou should now be used to it, this is the same thing\nthat we defined over here. We're going to call\nsomething a procedure.",
    "start": "1486754",
    "end": "1493235"
  },
  {
    "text": "And we're going to call-- we're going to\ndefine a procedure. It's called range. It takes in an argument,\nn, one argument.",
    "start": "1493235",
    "end": "1499470"
  },
  {
    "text": "What does it do? Well, it depends. It does a conditional. A conditional, it depends,\nlet's see, is n equal to 0?",
    "start": "1499470",
    "end": "1506720"
  },
  {
    "text": "If it's 0, just give\nme back an empty list. Does everyone sort of\nsee that, if equal n 0,",
    "start": "1506720",
    "end": "1513080"
  },
  {
    "text": "give me back a list. What if it's not 0? What if I did range 10? Oh, well, in that case, append--",
    "start": "1513080",
    "end": "1518739"
  },
  {
    "text": "another thing that you might\nwant to know, so it's just combine these two things--\nappend what with what?",
    "start": "1518739",
    "end": "1524690"
  },
  {
    "text": "Append range again with\nn minus 1 and with n.",
    "start": "1524690",
    "end": "1531679"
  },
  {
    "text": "The point here is\nto say, OK, how do I get the numbers 1 to 100? I just, sort of, say range-- I want the range 1 to 100, so\nI say, 100-- am I at 0 yet?",
    "start": "1531680",
    "end": "1541429"
  },
  {
    "text": "No, so take 100 and\nappend it with range 99. What does range 99 do?",
    "start": "1541430",
    "end": "1547740"
  },
  {
    "text": "Well, is 99 0? No, so give me\nback 99 plus what? Plus range 98.",
    "start": "1547740",
    "end": "1553060"
  },
  {
    "text": "Is 98 0? No, keep going, so it's\nbasically recursing-- range is a recursive function\nthat calls itself until it",
    "start": "1553060",
    "end": "1560720"
  },
  {
    "text": "hits 0, very simple recursion. And now you can do\nthis to write out all the numbers from 1 to 100.",
    "start": "1560720",
    "end": "1567980"
  },
  {
    "text": "And then you, if you\nwere so inclined, you could do math\nsquare to that.",
    "start": "1567980",
    "end": "1574440"
  },
  {
    "text": "OK, and we run that. And it gives me all the\nnumbers from-- the squares of the numbers from 1 to 100.",
    "start": "1574440",
    "end": "1579690"
  },
  {
    "text": "So far we've talked just\nabout very basic stuff. This is no different\nfrom Scheme.",
    "start": "1579690",
    "end": "1586290"
  },
  {
    "text": "You are all experts in Scheme\nnotation and things like that. Let's move on to something a\nlittle bit more interesting that Church can do, which\nis, for example, take",
    "start": "1586290",
    "end": "1593940"
  },
  {
    "text": "random sequences, and\nit can take random--",
    "start": "1593940",
    "end": "1599340"
  },
  {
    "text": "how should I put this? Kind of like plus is a basic\nthing in certain programming",
    "start": "1599340",
    "end": "1605430"
  },
  {
    "text": "languages, it's a\nprimitive, right? It's written into\nthe language what plus means, what times means.",
    "start": "1605430",
    "end": "1612030"
  },
  {
    "text": "You don't have to define that. The way most languages\nwork is that they have this sort of\nlong list of things",
    "start": "1612030",
    "end": "1617160"
  },
  {
    "text": "that they need to evaluate. And they start evaluating them. And they're, sort of, OK, did\nI hit an expression I know,",
    "start": "1617160",
    "end": "1622650"
  },
  {
    "text": "like a number or not? And it's, sort of, no,\nyou didn't hit it yet. OK, fine, keep evaluating,\nkeep evaluating,",
    "start": "1622650",
    "end": "1628039"
  },
  {
    "text": "keep evaluating until you\nget some sort of primitive. And a primitive procedure\ncould be something like plus or a number.",
    "start": "1628040",
    "end": "1633992"
  },
  {
    "text": "In Church, there are\nprimitive procedures which are random\nprimitive procedures. They are procedures\nthat, when you hit them,",
    "start": "1633992",
    "end": "1639900"
  },
  {
    "text": "what you do is, you just return\na value, a sampled value, from this expression, from\nthis probability distribution.",
    "start": "1639900",
    "end": "1646480"
  },
  {
    "text": "So the most basic\nrandom primitive, the most basic distribution\nthat you can do in Church",
    "start": "1646480",
    "end": "1652410"
  },
  {
    "text": "is something called flip. And if you just write\ndown flip in Church,",
    "start": "1652410",
    "end": "1658300"
  },
  {
    "text": "what you'll get, if you run\nit like that, is it tells you, well, it's a function. And it depends on\ncertain arguments.",
    "start": "1658300",
    "end": "1665050"
  },
  {
    "text": "And it tells you many,\nmany things about it, but that's not what we want. We want to evaluate it, so put\nsome parentheses around it.",
    "start": "1665050",
    "end": "1670450"
  },
  {
    "text": "And we'll run it. And it will give us back false. OK, let's try that again.",
    "start": "1670450",
    "end": "1675575"
  },
  {
    "text": "So let's run that again. It will gave us back\ntrue, OK, interesting. And if we run that again,\nyou know, we get false.",
    "start": "1675575",
    "end": "1681670"
  },
  {
    "text": "We run it again, and we get\nmaybe true, maybe false. You could do repeat\n1,000 times flip.",
    "start": "1681670",
    "end": "1687610"
  },
  {
    "text": "OK, repeat is another\nimportant thing that you would need to know. It just says repeat\nas many times",
    "start": "1687610",
    "end": "1692860"
  },
  {
    "text": "as you want to repeat\nsome sort of function. In this case, the\nfunction is flip. OK, so repeat flip 1,000 times.",
    "start": "1692860",
    "end": "1699289"
  },
  {
    "text": "I hope you guys are trying\nthis while I'm saying this. Are people trying\nthis more or less? OK, cool. So repeat 1,000 times flip.",
    "start": "1699290",
    "end": "1705450"
  },
  {
    "text": "And what you'll get\nback is this long list of true, false, true, false,\nfalse, true, false, true. And it's independent\nfrom one another,",
    "start": "1705451",
    "end": "1711253"
  },
  {
    "text": "because it's an exchangeable\nrandom sequence. And if you want to see\nwhat this looks like, well, you could just\ndo something like hist.",
    "start": "1711253",
    "end": "1717293"
  },
  {
    "text": " And you would run that. And you would get, you\nknow, more or less 50-50. Not exactly 50-50, because\nI only ran it 1,000 times.",
    "start": "1717293",
    "end": "1726640"
  },
  {
    "text": "If I had run this in the\nlimit, what I would get is 50-50 on true-false.",
    "start": "1726640",
    "end": "1732549"
  },
  {
    "text": "Now, what's nice about this\nis that this sort of gets at this thing that I was talking\nabout earlier, where there's dual representation for any sort\nof probability distribution.",
    "start": "1732550",
    "end": "1740860"
  },
  {
    "text": "You could either write the\nprobability distribution in math. You could sort of say, well,\nthe probability of true is 0.5.",
    "start": "1740860",
    "end": "1748310"
  },
  {
    "text": "And the probability\nof false is 0.5. Now I've defined a\ndistribution in math.",
    "start": "1748310",
    "end": "1753885"
  },
  {
    "text": "And now you can\nsay, well, what's conditioned on this, what can\nyou do, and things like that. Or what you can do is, you\ncan write a program such that,",
    "start": "1753885",
    "end": "1762310"
  },
  {
    "text": "when you run it, it will\nsample one of these values. And in the limit,\nit samples it's such",
    "start": "1762310",
    "end": "1768820"
  },
  {
    "text": "that it approximated the thing\nthat we just defined in math. And you might say, well, why\nnot just define it in math?",
    "start": "1768820",
    "end": "1774160"
  },
  {
    "text": "Because oftentimes, it gets\nvery, very, hairy very, very fast. And in fact, any sort of\nprobability distribution",
    "start": "1774160",
    "end": "1780200"
  },
  {
    "text": "that's well-defined\nand well-behaved, you can write as a program. A program which, if you run\nit many times, its sampling",
    "start": "1780200",
    "end": "1789140"
  },
  {
    "text": "profile, the thing it will give\nyou back if you sample it many, many different times,\nwill give you back that probability distribution.",
    "start": "1789140",
    "end": "1795880"
  },
  {
    "text": "Or you could\nequivalently say that, what it means for a\nprobability distribution to be a probability distribution\nis to be some sort of program,",
    "start": "1795880",
    "end": "1802540"
  },
  {
    "text": "to be some sort of procedure\nthat gives you back a sample. And in the limit, you\nget some sort of thing that we're going to call the\nprobability distribution.",
    "start": "1802540",
    "end": "1809590"
  },
  {
    "text": "Actually, that's the way\nwe define the probability distribution. And again, this\ngets in-- so one way",
    "start": "1809590",
    "end": "1816250"
  },
  {
    "text": "to think about Church programs\nis that any Church program that you write-- if you\njust write plus 2 2,",
    "start": "1816250",
    "end": "1821590"
  },
  {
    "text": "you'll get back 4. That's, in a way, a\ndeterministic program, right? The probability of getting back\n4 on this execution equals 1,",
    "start": "1821590",
    "end": "1829419"
  },
  {
    "text": "but there are many other\nthings that you could write and you could get back\ninteresting things for them. And the point is\nto write something",
    "start": "1829420",
    "end": "1835808"
  },
  {
    "text": "like a generative model that\ndescribes some sort of thing about the world. And when you run it forward,\nyou get to a certain sample,",
    "start": "1835808",
    "end": "1843005"
  },
  {
    "text": "but if you run in many,\nmany different times, it gives you the\nprobability distribution that this model describes.",
    "start": "1843005",
    "end": "1848819"
  },
  {
    "text": "And now, if you-- and again,\nI'm getting slightly ahead of myself. If you change that model,\nif you, for example, condition on something,\nyou'll get a different model.",
    "start": "1848819",
    "end": "1856690"
  },
  {
    "text": "You'll get a different program. And you're trying to\nfind the program such that its output\nwill match the data.",
    "start": "1856690",
    "end": "1862280"
  },
  {
    "text": "OK, but let's back\nup a little bit. And we're still in flip land. So we have here\nsomething which is flip.",
    "start": "1862280",
    "end": "1868660"
  },
  {
    "text": "That's very, very basic. Flip can also be-- AUDIENCE: [INAUDIBLE] TOMER ULLMAN: OK.",
    "start": "1868660",
    "end": "1873740"
  },
  {
    "text": "Flip can also be a biased coin. So for example, if I do-- I define something\nlike, you know, define--",
    "start": "1873740",
    "end": "1879745"
  },
  {
    "text": " let's do this\nslightly differently.",
    "start": "1879745",
    "end": "1884850"
  },
  {
    "text": "Let's call this\nlambda something. And what it does is flip 0.9.",
    "start": "1884850",
    "end": "1892450"
  },
  {
    "text": "So if you run this forward,\nwhat you'll get now is that flip can actually\ntake in some arguments. If you don't give\nit any arguments,",
    "start": "1892450",
    "end": "1898420"
  },
  {
    "text": "it'll just do flip 50-50. If you give it some\narguments, it'll do flip a biased coin, where\nthe coin is biased towards 0.9.",
    "start": "1898420",
    "end": "1905920"
  },
  {
    "text": "And you can see that, after\nI repeated that 1,000 times, I get, you know, it's\napproximately 90% heads,",
    "start": "1905920",
    "end": "1912700"
  },
  {
    "text": "or true, and about 10% tails. AUDIENCE: Why did you\nmake the lambda in there? TOMER ULLMAN: Ah,\nperfect, I'm glad somebody",
    "start": "1912700",
    "end": "1918730"
  },
  {
    "text": "has asked that question. So if I were just to do\nthe following-- suppose that I were just do\nrepeat flip 0.9 like that,",
    "start": "1918730",
    "end": "1929140"
  },
  {
    "text": "think about what would happen. What would happen is, I would\nfirst evaluate flip 0.9. OK, that would give me back a\nvalue, either true or false.",
    "start": "1929140",
    "end": "1937370"
  },
  {
    "text": "And then this would say,\nrepeat that 1,000 times. You would get, like, 1,000\ntrues, or 1,000 falses,",
    "start": "1937370",
    "end": "1944049"
  },
  {
    "text": "or whatever it was\nthat was first. In fact, it's going to\nfail, because repeat expects a function. But the point is, the reason\nthat this is going to fail",
    "start": "1944050",
    "end": "1950710"
  },
  {
    "text": "is because it wants a\nparticular function. This is not a function,\nthis is a value.",
    "start": "1950710",
    "end": "1955780"
  },
  {
    "text": "You evaluate this first. It gives you a value\nlike true or false. And then you repeat\nthat value 1,000 times. That's not what you want.",
    "start": "1955780",
    "end": "1961561"
  },
  {
    "text": "What you want is a procedure. A procedure, or a distribution,\nor something like that,",
    "start": "1961561",
    "end": "1966799"
  },
  {
    "text": "some sort of function\nthat, when you run it, you get a biased sample, so\nwhat would that look like?",
    "start": "1966800",
    "end": "1972580"
  },
  {
    "text": "That would look like this. It would be-- or I could\ndo something like this. Define my-coin weight--",
    "start": "1972580",
    "end": "1979990"
  },
  {
    "text": "OK, something like this. And what it does is this.",
    "start": "1979990",
    "end": "1987799"
  },
  {
    "text": "Now what I've defined is,\nI've defined a procedure that takes in a particular weight.",
    "start": "1987800",
    "end": "1993919"
  },
  {
    "text": "And what it does is\nthat it gives you back a flip on that weight. AUDIENCE: [INAUDIBLE]",
    "start": "1993919",
    "end": "1999195"
  },
  {
    "text": "TOMER ULLMAN: Yes,\nalthough you might, again, run into some problems, but\nwe can get to that, because--",
    "start": "1999196",
    "end": "2004200"
  },
  {
    "text": "well, OK. So let's see--",
    "start": "2004200",
    "end": "2009992"
  },
  {
    "text": "AUDIENCE: How would define\nit as a lambda calculus? TOMER ULLMAN: OK, so how you\nwould define it with the lambda",
    "start": "2009992",
    "end": "2015360"
  },
  {
    "text": "calculus is, you would\nsay my-coin lambda weight this thing.",
    "start": "2015360",
    "end": "2022860"
  },
  {
    "text": "OK, now we're saying, what\nsort of thing is coin? Coin is a procedure. How do we know it's a procedure?",
    "start": "2022860",
    "end": "2028033"
  },
  {
    "text": "Because we have this\nlambda right here. How many arguments\ndoes it expect? One, it's called weight. What does it do?",
    "start": "2028033",
    "end": "2033825"
  },
  {
    "text": "It flips a coin. It gives you back that sample. AUDIENCE: Can I do-- TOMER ULLMAN: The\nequivalent way of doing",
    "start": "2033825",
    "end": "2039118"
  },
  {
    "text": "that is by writing this\nthing without any lambdas. You would just write\ndefine my-coin--",
    "start": "2039118",
    "end": "2047400"
  },
  {
    "text": "notice the brackets\nthere, right? Before we didn't have brackets\naround that-- define my-coin weight flip weight, like that.",
    "start": "2047400",
    "end": "2055408"
  },
  {
    "text": "And now you're sort of saying,\nlike, this is a procedure. You should know it's a\nprocedure, because it's the first thing that you're\nhitting after define because",
    "start": "2055409",
    "end": "2061643"
  },
  {
    "text": "of the parentheses. What sort of procedure is it? It's called my-coin. It takes in weight.",
    "start": "2061643",
    "end": "2066784"
  },
  {
    "text": "Again, these are equivalent. And to answer Nori's question\nabout how would I just do that without having\nto define things,",
    "start": "2066785",
    "end": "2072109"
  },
  {
    "text": "I would say something\nlike, hist repeat 1,000. Now, what do I want to repeat? I want to repeat some sort of\nprocedure that samples things.",
    "start": "2072110",
    "end": "2080370"
  },
  {
    "text": "So it's-- I'll call it lambda. It's an empty lambda. It doesn't take\nin any arguments. It's just the procedure.",
    "start": "2080370",
    "end": "2086429"
  },
  {
    "text": "And what it does is,\nit flips a coin 0.9.",
    "start": "2086429",
    "end": "2091888"
  },
  {
    "text": "And if I run that,\nI'll get that. OK, yes, no? OK, good.",
    "start": "2091889",
    "end": "2098290"
  },
  {
    "text": "OK, so let's see, there\nare many other primitives that we could get to. There is uniform-draw.",
    "start": "2098290",
    "end": "2104600"
  },
  {
    "text": "You can look at this\nonline, but there's-- the basic primitives\nare things like multinomial, uniform, random\ninteger, beta, Dirichlet,",
    "start": "2104600",
    "end": "2110710"
  },
  {
    "text": "there's also the Chinese\nrestaurant process. So let's see, we can build in\nour own little distribution.",
    "start": "2110710",
    "end": "2116450"
  },
  {
    "text": "OK, let's try doing that. So here I've defined something\nwhich, under the hood,",
    "start": "2116450",
    "end": "2121939"
  },
  {
    "text": "it's actually-- it's an\ninteresting distribution. You all probably know it. But the way I'm\ngoing to define it is, I'm going to call it\ntimes it counts until heads.",
    "start": "2121939",
    "end": "2131060"
  },
  {
    "text": "This is a procedure that's\ngoing to flip a coin. And if it comes up-- it's going to flip a coin\nwith a particular weight.",
    "start": "2131060",
    "end": "2138200"
  },
  {
    "text": "If it comes up true,\nif it comes up heads, then it's just going to stop. It's going to give you back 0.",
    "start": "2138200",
    "end": "2143420"
  },
  {
    "text": "If it doesn't stop, if\nit comes back tails, it's going to tell you that. It's going to write\ndown somewhere, like, 1.",
    "start": "2143420",
    "end": "2149870"
  },
  {
    "text": "And it's going to keep going. It's going to recurse somehow,\ncall itself, and then keep",
    "start": "2149870",
    "end": "2155460"
  },
  {
    "text": "going. So this is for you, this\nis an exercise for you. You have it under\nthe files, under 3.4,",
    "start": "2155460",
    "end": "2163070"
  },
  {
    "text": "build your own distribution. I've left this open. Why don't you take two minutes.",
    "start": "2163070",
    "end": "2168320"
  },
  {
    "text": "We're trying to build a\nprocedure that gives me the amount of times that I\nneed to flip a coin before I",
    "start": "2168320",
    "end": "2173960"
  },
  {
    "text": "get back heads, OK? If I take a particular coin-- I guess I don't want\nto have one handy--",
    "start": "2173960",
    "end": "2179090"
  },
  {
    "text": "but I flip a coin. And I just-- you\nknow, I flip it. If it comes back heads, I\nwrite down 0 and I'm done.",
    "start": "2179090",
    "end": "2184670"
  },
  {
    "text": "If it comes back tails, I'm\ngoing to keep flipping it, so I flip it again. And you know, I might flip it\n10 times until I get heads,",
    "start": "2184670",
    "end": "2191739"
  },
  {
    "text": "so the point is that this\nprocedure will, in that case, return 10. That would be one\nparticular sample. Now, of course, if I take the\ncoin again and I flip it again,",
    "start": "2191739",
    "end": "2198916"
  },
  {
    "text": "sometimes I get 10 times\nuntil heads, sometimes once, sometimes 5,\nsometimes 20, so I'm",
    "start": "2198916",
    "end": "2205279"
  },
  {
    "text": "going to get a\nparticular distribution on the number of times I\nneed until I hit heads.",
    "start": "2205280",
    "end": "2210770"
  },
  {
    "text": "And the thing that we're\ntrying to implement right now is just a procedure\nthat, what it does is, it implements this\ncounting thing that I just",
    "start": "2210770",
    "end": "2217040"
  },
  {
    "text": "said by literally\nflipping a coin-- well, I don't know if literally,\nbut under the hood, flipping a coin.",
    "start": "2217040",
    "end": "2223084"
  },
  {
    "text": "If the coin comes back heads,\nbecause this thing evaluates to true, give back 0. If it doesn't, give\nback plus 1 plus what?",
    "start": "2223084",
    "end": "2231200"
  },
  {
    "text": "So fill in those\ndots-- it shouldn't be a long expression--\nsuch that you'll get what I was just talking about.",
    "start": "2231200",
    "end": "2236490"
  },
  {
    "text": "So, guys, let me tell\nyou what I was going for. An int plus 1\ncountsTillHeads coinweight.",
    "start": "2236490",
    "end": "2247590"
  },
  {
    "text": "OK, and now if you do\nsomething like countsTillHeads, I don't know, 0.1 or something\nlike that, and you run it.",
    "start": "2247590",
    "end": "2255940"
  },
  {
    "text": "And it gets saved-- so let's read through\nthis for a second. What happens is, you\ndefined a procedure.",
    "start": "2255940",
    "end": "2262304"
  },
  {
    "text": "It's called countsTillHeads. It takes in a coin weight. It flips a coin. If it comes back head,\nit gives you back 0.",
    "start": "2262304",
    "end": "2269440"
  },
  {
    "text": "If it didn't come back heads,\nthen you just do plus 1. And then you just\ncall that thing again. You do countTillHeads\ncoinweight again and again.",
    "start": "2269440",
    "end": "2277750"
  },
  {
    "text": "If it comes back 0, then this\ntime, you'll have plus 1 plus 0",
    "start": "2277750",
    "end": "2282790"
  },
  {
    "text": "if it came back heads in here. But if it didn't, then this\nwill be plus 1 plus something.",
    "start": "2282790",
    "end": "2289549"
  },
  {
    "text": "In effect, what\nwe've defined here-- those of you that have\ndefined it, and if not, just look at this-- what you've defined here\nis sort of a procedure that",
    "start": "2289550",
    "end": "2296079"
  },
  {
    "text": "might give us back\ninfinity in some way, except it's becoming\nextremely unlikely to do so",
    "start": "2296080",
    "end": "2301240"
  },
  {
    "text": "with each particular\nflip of the coin. Now, I run it once with 0.1. I get 15. I can run it again and\nI'll get, you know, 8.",
    "start": "2301240",
    "end": "2308824"
  },
  {
    "text": "That just means\nthat, on that run, I flipped it eight times\nbefore I got heads. And again, I can do this\nmany, many different times.",
    "start": "2308824",
    "end": "2315400"
  },
  {
    "text": "Like, I can do hist repeat\n1,000 and then this thing,",
    "start": "2315400",
    "end": "2321880"
  },
  {
    "text": "some empty procedure\nthat does that. And what you gets is\nthis, which, in case it",
    "start": "2321880",
    "end": "2329620"
  },
  {
    "text": "doesn't look\nfamiliar-- sorry, it's just the way these\nthings usually look. This is sort of flipping\nthe x- and y-axis.",
    "start": "2329620",
    "end": "2334630"
  },
  {
    "text": "But the point is,\nhow many times did I have to flip it to get, you\nknow-- how many times did it happen?",
    "start": "2334630",
    "end": "2339659"
  },
  {
    "text": "Did I flip it three times,\nor one, or two, three times? That's about 24%.",
    "start": "2339659",
    "end": "2344950"
  },
  {
    "text": "And it sort of goes\ndown, and down, and down, because it becomes much,\nmuch, much more unlikely that I'll flip it 40\ntimes until I get heads.",
    "start": "2344950",
    "end": "2351886"
  },
  {
    "text": "It could be that I'll keep\nflipping it to infinity, but it's not going to happen. This, in case you didn't\nknow, falls off geometrically.",
    "start": "2351886",
    "end": "2358900"
  },
  {
    "text": "It's the geometric distribution. That's a very fundamental,\nsimple distribution.",
    "start": "2358900",
    "end": "2364180"
  },
  {
    "text": "And one way to\nwrite it is to say, what's the probability of k? The probability of k is--",
    "start": "2364180",
    "end": "2370090"
  },
  {
    "text": "let's say, we have a\ncoin which has the-- it's probability of\ncoming up heads is p.",
    "start": "2370090",
    "end": "2376750"
  },
  {
    "text": "Then we say the\nprobability of k is p to the k minus 1\ntimes 1 minus p, yes?",
    "start": "2376750",
    "end": "2384010"
  },
  {
    "text": "It's I flip the coin 1\nminus p times to the k. The point is, you can define the\ngeometric distribution by sort",
    "start": "2384010",
    "end": "2391745"
  },
  {
    "text": "of saying, what's\nthe probability of any particular number? Or you can define the\nprocedure for it, OK?",
    "start": "2391746",
    "end": "2399071"
  },
  {
    "text": "Instead of writing\ndown what should be the probability of\nany particular sequence,",
    "start": "2399072",
    "end": "2404580"
  },
  {
    "text": "you can just write down the\nprocedure that it describes. This is the procedure. The procedure doesn't\nexplicitly tell you",
    "start": "2404580",
    "end": "2409628"
  },
  {
    "text": "what the distribution\nis, it just samples it. You've built a procedure\nfor flipping a coin. And if you do it many,\nmany, many different times,",
    "start": "2409628",
    "end": "2415993"
  },
  {
    "text": "what you'll get is the\ngeometric distribution. This is will approach the\ngeometric distribution.",
    "start": "2415993",
    "end": "2422610"
  },
  {
    "text": "I can probably also do\ndensity, and then it'll show you it like that. ",
    "start": "2422610",
    "end": "2428912"
  },
  {
    "text": "So that's what I was talking\nabout before with, like, trying to wrap your\nhead around something like the equivalence between\na probability distribution",
    "start": "2428912",
    "end": "2434641"
  },
  {
    "text": "that you can write down in math\nor as an analytical expression and writing down the equivalent\nprocedure for generating",
    "start": "2434641",
    "end": "2440390"
  },
  {
    "text": "that probability distribution. Let's move on to something a\nlittle bit more interesting like Gaussian sampling.",
    "start": "2440390",
    "end": "2446992"
  },
  {
    "text": "If you're not with\nus, you can look at it in 3.5, Gaussian Samples. What I've done here\nis, basically, I'm",
    "start": "2446992",
    "end": "2453769"
  },
  {
    "text": "defining a particular center. Let's walk through\nthis for a second. I'm defining a\ntwo-dimensional Gaussian.",
    "start": "2453770",
    "end": "2460339"
  },
  {
    "text": "What it does is, it takes\na particular center. A center is just an x-y point. And it does, you know,\nGaussian around the first one.",
    "start": "2460340",
    "end": "2470040"
  },
  {
    "text": "I'm trying to define a\ntwo-dimensional Gaussian. The way I do it\nis, I take a point around-- a one-dimensional\nGaussian around this point.",
    "start": "2470040",
    "end": "2477349"
  },
  {
    "text": "And I take a\none-dimensional Gaussian around the second point. And then I just draw it. So in this particular case,\nI'm going to define my Gaussian",
    "start": "2477350",
    "end": "2483950"
  },
  {
    "text": "center as 3, 2. OK, I'm going to take it\nx equals 3, y equals 2.",
    "start": "2483950",
    "end": "2489710"
  },
  {
    "text": "And I want to sample a\nGaussian around 3, 2. So I'm going to sample\nof Gaussian around 3",
    "start": "2489710",
    "end": "2497070"
  },
  {
    "text": "and a Gaussian around 2. And I'm going to\ngive you that back. And if I repeat this 1,000\ntimes, then-- and I scatter it,",
    "start": "2497070",
    "end": "2504530"
  },
  {
    "text": "I'll end up with a plot\nthat looks a bit like this. And you can see on\nthe x-axis, this is 3.",
    "start": "2504530",
    "end": "2511340"
  },
  {
    "text": "And this is 2. And it's basically a\nGaussian with sampling points from around this thing,\nanother forward procedure",
    "start": "2511340",
    "end": "2517250"
  },
  {
    "text": "that I can sample. OK, is everyone more or\nless on board with this? Let's take two seconds\nto read this again.",
    "start": "2517250",
    "end": "2524610"
  },
  {
    "text": "A basic procedure in\nChurch is Gaussian. What I do is I basically--",
    "start": "2524610",
    "end": "2529980"
  },
  {
    "text": "I try to call Gaussian\non some number. Gaussian takes in two arguments.",
    "start": "2529980",
    "end": "2536280"
  },
  {
    "text": "Gaussian takes in a\nmean and a variance. In particular, I'm going\nto take a Gaussian.",
    "start": "2536280",
    "end": "2542220"
  },
  {
    "text": "And its mean is going to be\nthe first argument of center. Its variance it's going to be 1.",
    "start": "2542220",
    "end": "2548970"
  },
  {
    "text": "I'm going to take\na Gaussian sampled from the second argument,\nthe y, and a variance of 1.",
    "start": "2548970",
    "end": "2555250"
  },
  {
    "text": "And then I'm going to just\ngive you back to that point. So this is a procedure that\ntakes in a center point.",
    "start": "2555250",
    "end": "2562240"
  },
  {
    "text": "And each time you sample it,\nit will give you a sample from around the mean 3, 2.",
    "start": "2562240",
    "end": "2568420"
  },
  {
    "text": "And if I run that-- so now I've defined\na particular center. You know, I've defined it 3, 2. I could have done many\nother different things.",
    "start": "2568420",
    "end": "2575114"
  },
  {
    "text": "And I repeat that 100 times. I've basically drawn a sample\nfrom something around 3, 2.",
    "start": "2575114",
    "end": "2583416"
  },
  {
    "text": "This can quickly get more\ninteresting if you do something like a mixture of Gaussians. So a Gaussian mixture model\nis usually just saying, OK,",
    "start": "2583416",
    "end": "2589480"
  },
  {
    "text": "I have some particular space. And I'm trying to figure\nout how many Gaussians are in this scene, so let's\nwrite down the forward model",
    "start": "2589480",
    "end": "2595599"
  },
  {
    "text": "for that thing. What's the forward model\nfor a mixture model? The forward model saying,\nI'm going to draw out some number of Gaussians.",
    "start": "2595600",
    "end": "2602080"
  },
  {
    "text": "I don't know how many. And I don't\nnecessarily know what their center point is, right? And from each one\nof these, I'm going",
    "start": "2602080",
    "end": "2608560"
  },
  {
    "text": "to draw some number of samples. Does everyone understand,\nmore or less, that description that I just gave? We're going to write it out now.",
    "start": "2608560",
    "end": "2614780"
  },
  {
    "text": "But the point is,\nthe generative model in your head for a\nmixture of Gaussians should be, there are\nsome number of Gaussians. I don't know what it is.",
    "start": "2614780",
    "end": "2620509"
  },
  {
    "text": "Each one of them is\ncentered on some point. I don't know what it is. Let's say I know the\nvariance just for simplicity,",
    "start": "2620509",
    "end": "2626079"
  },
  {
    "text": "but I could obviously\nput a prior on that. And then I just\nsample from that. And I'll get some distribution.",
    "start": "2626080",
    "end": "2633100"
  },
  {
    "text": "And then you could use--\nwe'll later on see, once you write down\nthat forward model, it's pretty simple to then\njust invert it and say,",
    "start": "2633100",
    "end": "2638940"
  },
  {
    "text": "OK, I see some number of points. How many Gaussians\nare there actually? But let's write down\nthe forward model.",
    "start": "2638940",
    "end": "2645609"
  },
  {
    "text": "So I have already done\nthis ahead of time. And I'll do it here.",
    "start": "2645610",
    "end": "2653300"
  },
  {
    "text": "So what I've done here,\nminus the typo, thanks, is to say something like, I\nwant a sample of Gaussian center",
    "start": "2653300",
    "end": "2660096"
  },
  {
    "text": "where I don't know\nwhere it is, but I'm going to say that it's in this\ntwo-dimensional space between 0 and 10, a box that's\n10 wide and 10 tall.",
    "start": "2660096",
    "end": "2669882"
  },
  {
    "text": "So for each new Gaussian, I\ndon't know where its center is, but I'm assuming it's\nsomewhere in this box that we're looking at.",
    "start": "2669882",
    "end": "2675280"
  },
  {
    "text": "And the way I do\nthat is, I say, OK, I define some sort of procedure. Each time you evaluate\nthis procedure, what",
    "start": "2675280",
    "end": "2680829"
  },
  {
    "text": "it's going to give\nyou back is a pair, where the first\nthing in the pair is a uniform between 0 and 10,\nthe second thing in the pair",
    "start": "2680830",
    "end": "2687890"
  },
  {
    "text": "is a uniform between 0 and 10. If all you were to do are\nto sample Gaussian center, you would get back some number\nuniformly-distributed in the 10",
    "start": "2687890",
    "end": "2697300"
  },
  {
    "text": "box, where the first\none is, let's say, x, and the second one is y.",
    "start": "2697300",
    "end": "2703649"
  },
  {
    "text": "And the next thing\nI do is, let's say I want to define some\nnumber of Gaussians and I don't know\nhow many there are.",
    "start": "2703649",
    "end": "2712230"
  },
  {
    "text": "Let's say, for\nexample, that I want to put some sort of ignorance\nprior on Gaussians between--",
    "start": "2712230",
    "end": "2721560"
  },
  {
    "text": "there might be one, there might\nbe two, there might be 10. Let's say I stop it at 10\nor something like that.",
    "start": "2721560",
    "end": "2728282"
  },
  {
    "text": "So in this case, I just say,\nsample the number of Gaussians from something like random\ninteger 10, since this goes to 0, and you\ndon't want 0, I'm",
    "start": "2728282",
    "end": "2734700"
  },
  {
    "text": "just adding the number 1 here. But what I also could\nhave done, and I",
    "start": "2734700",
    "end": "2741266"
  },
  {
    "text": "think I was going to\ndo this is an exercise, but since we want to get\nto physics, and psychology, and some more interesting stuff,\nwhat I could have done here",
    "start": "2741267",
    "end": "2747840"
  },
  {
    "text": "is define number of Gaussians-- suppose I wanted to\nput a prior on there being potentially an\ninfinite number of Gaussian,",
    "start": "2747840",
    "end": "2754710"
  },
  {
    "text": "what would I do? AUDIENCE: Dirichlet. TOMER ULLMAN: A\nDirichlet, right? Or what else can I do that\nwe've already learned?",
    "start": "2754710",
    "end": "2761471"
  },
  {
    "text": " We could do the\ngeometric, right?",
    "start": "2761471",
    "end": "2766530"
  },
  {
    "text": "We just defined the\ngeometric a second ago. The geometric gives\nus a probability on numbers basically\ngoing from 0 to infinity.",
    "start": "2766530",
    "end": "2773284"
  },
  {
    "text": "And it dies off very\nquickly, so this gives us sort of a natural prior\nof some sort to say, I think that there are some\nnumber of Gaussians here.",
    "start": "2773284",
    "end": "2779610"
  },
  {
    "text": "I don't know what it is. I'm pretty sure it dies off. Like, I don't think 100 is\nas equally likely as 10.",
    "start": "2779610",
    "end": "2785789"
  },
  {
    "text": "I don't think 10 is as\nequally likely as 1. So I could have said,\ndefine number of Gaussians, just draw from geometric.",
    "start": "2785790",
    "end": "2791340"
  },
  {
    "text": "And then I would have gotten\nsome number, potentially infinite. You've just defined an infinite\nGaussian mixture model.",
    "start": "2791340",
    "end": "2798270"
  },
  {
    "text": "And then I draw some\nnumber of centers by basically repeating\nthis procedure.",
    "start": "2798270",
    "end": "2804090"
  },
  {
    "text": "I sample the Gaussians. And then I scatter the points. Let's see, and then you\ncan look at the points.",
    "start": "2804090",
    "end": "2810690"
  },
  {
    "text": "And this is a fun game to play. It's basically recapturing a\nbit of what Josh said before, which is to say,\nhow many Gaussians",
    "start": "2810690",
    "end": "2817950"
  },
  {
    "text": "do you think are in this image? And you can sort of\nplay that with yourself to get a sense of it. You know, you've\ndefined some procedure.",
    "start": "2817950",
    "end": "2823816"
  },
  {
    "text": "You don't know how many\nGaussians you actually created. You don't know exactly\nwhere they are, but you can run it forward.",
    "start": "2823816",
    "end": "2829230"
  },
  {
    "text": "And you can look at it\nand say, well, here I think it's pretty obvious. I think there's\nsort of a Gaussian",
    "start": "2829230",
    "end": "2834750"
  },
  {
    "text": "here, maybe a Gaussian here. So I guess the number\nhere is 2, but here it's a bit less obvious.",
    "start": "2834750",
    "end": "2840599"
  },
  {
    "text": "And again, you can\nplay with this. So those of you who've\nwritten this down,",
    "start": "2840600",
    "end": "2847259"
  },
  {
    "text": "and assuming you've\ndone either a Dirichlet or a geometric distribution\nwhat you've basically done is written down the forward\nmodel for an infinite Gaussian",
    "start": "2847259",
    "end": "2856520"
  },
  {
    "text": "mixture model. And you did it in, more or\nless, five lines of code. Yeah?",
    "start": "2856520",
    "end": "2862005"
  },
  {
    "text": "AUDIENCE: What is\nthe fold there?  TOMER ULLMAN: Where\ndo you see fold here?",
    "start": "2862006",
    "end": "2867750"
  },
  {
    "text": "AUDIENCE: Visualize\nscatter fold append TOMER ULLMAN: Ah,\nyes, so fold is",
    "start": "2867750",
    "end": "2873680"
  },
  {
    "text": "another high-level procedure. It's not terribly important for\nthe purposes of this tutorial, but what it does is, it\nbasically takes in a function.",
    "start": "2873680",
    "end": "2882390"
  },
  {
    "text": "It takes in a list of stuff. And it basically applies\nit to the first argument. Then it takes it and\napplies it to whatever",
    "start": "2882390",
    "end": "2889369"
  },
  {
    "text": "the result was plus\nthe next item-- AUDIENCE: Plus? TOMER ULLMAN: --in the list. Well, not exactly plus--",
    "start": "2889370",
    "end": "2894569"
  },
  {
    "text": "AUDIENCE: In addition? TOMER ULLMAN: --but,\nyes, in addition, so you can have\na fold which has, for example, two arguments.",
    "start": "2894570",
    "end": "2899720"
  },
  {
    "text": "And what it does\nis it multiplies. So then you would take a list. And you would basically do--",
    "start": "2899720",
    "end": "2905420"
  },
  {
    "text": "or rather, what is sum. what some is basically is\na fold of plus over a list,",
    "start": "2905420",
    "end": "2910980"
  },
  {
    "text": "because it takes\nthe first number, sums it up with the second\none, takes that result, sums it up with a third one-- AUDIENCE: [INAUDIBLE]",
    "start": "2910980",
    "end": "2917650"
  },
  {
    "text": "TOMER ULLMAN: Fold\nneeds three arguments. Fold needs a particular--\nwell, it needs the function",
    "start": "2917650",
    "end": "2923060"
  },
  {
    "text": "that you're going to apply. It needs a starting\npoint to start from. And it needs a lot that\nit's going to work on,",
    "start": "2923060",
    "end": "2930490"
  },
  {
    "text": "again, not terribly\nimportant for-- AUDIENCE: So why do this? TOMER ULLMAN: So in\nthis particular case,",
    "start": "2930490",
    "end": "2936560"
  },
  {
    "text": "what I'm trying to\ndo in the background is, I'm going to get\na lot of Gaussians.",
    "start": "2936560",
    "end": "2941810"
  },
  {
    "text": "I don't know how many. I'm going to get\nbasically a list of lists. It could be one. It could be three.",
    "start": "2941810",
    "end": "2947480"
  },
  {
    "text": "It could be 10. Each one of them is going to\ndefine some number of points. And I just want to scatter them.",
    "start": "2947480",
    "end": "2952700"
  },
  {
    "text": "But scatter works by\ntaking in one list, so it's basically just\na way of collapsing. Say I have three, or 10,\nI don't know how many.",
    "start": "2952700",
    "end": "2959498"
  },
  {
    "text": "I'm trying to collapse\nsome number of lists into a single list. We've defined some\nnumber of Gaussians.",
    "start": "2959498",
    "end": "2966079"
  },
  {
    "text": "This is a London Blitz example. Josh was talking about\nthis a little bit. Those of you who want to,\nsort of, jump back in again,",
    "start": "2966080",
    "end": "2972620"
  },
  {
    "text": "you can go to 3.5.2 in\nthe student document.",
    "start": "2972620",
    "end": "2978590"
  },
  {
    "text": "You can copy and whatever\nis under that and paste it. And let's talk about that\nexample for a second. ",
    "start": "2978590",
    "end": "2985880"
  },
  {
    "text": "What this thing is doing is,\nit's sort of Josh's example-- do you remember his example\nof, we have some sort of grid.",
    "start": "2985880",
    "end": "2992390"
  },
  {
    "text": "And we're trying\nto say, is there a suspicious cluster\nsomewhere, a disease cluster?",
    "start": "2992390",
    "end": "2998660"
  },
  {
    "text": "We have some dots. And we're trying to\nfigure out is there something going on here? You know, there's sort of\na faulty, I don't know,",
    "start": "2998660",
    "end": "3004571"
  },
  {
    "text": "whatever, asbestos or\nsomething like that. And I want to figure that out. So what you're going to\nget is sort of a 2D map.",
    "start": "3004571",
    "end": "3010897"
  },
  {
    "text": "You're going to get\nsome dots from that map. And you're trying to figure\nout-- your hypothesis is either this is sort of\nrandomly-distributed,",
    "start": "3010897",
    "end": "3017109"
  },
  {
    "text": "it's a uniform, or there's\nsome sort of center here. So how do we write down the\nforward model for something",
    "start": "3017110",
    "end": "3024190"
  },
  {
    "text": "like that? We would write down either-- the particular\nexample, I'm doing here is another example\nthat Tom Griffiths did,",
    "start": "3024190",
    "end": "3029980"
  },
  {
    "text": "which is, during the Blitz,\nduring the London bombing-- this is actually a very old\nexample of finding patterns.",
    "start": "3029980",
    "end": "3038030"
  },
  {
    "text": "Some of the British,\nthe people of London, were convinced that there\nwere spies in London that",
    "start": "3038030",
    "end": "3043270"
  },
  {
    "text": "were telling the Germans where\nto bomb during the Blitz. And the way that they\nreasoned this is, they looked at the\npattern of bombings.",
    "start": "3043270",
    "end": "3050380"
  },
  {
    "text": "And they said, there's no\nway that this is random. They just looked at,\nlike, dots on a map. And to them, it looked\na bit like Gaussians,",
    "start": "3050380",
    "end": "3056830"
  },
  {
    "text": "or things like that. They were working from,\nsort of, few examples. When you look at, there's, sort\nof, these nice web-- \"nice,\"",
    "start": "3056830",
    "end": "3062800"
  },
  {
    "text": "I don't know if it's nice--\nbut there's these websites that show you the entire\nBlitz from when",
    "start": "3062800",
    "end": "3068980"
  },
  {
    "text": "it started to when it ended. And it's basically a\nrandom distribution. If you run statistical\ntests on it,",
    "start": "3068980",
    "end": "3074859"
  },
  {
    "text": "it's no different from\na random distribution. How would you run\nsuch a test on it? What you would do,\nfor example, is",
    "start": "3074860",
    "end": "3081420"
  },
  {
    "text": "you would write a forward model\nthat says it's either random, uniform, or it's not. Now, tell me which\none is more likely.",
    "start": "3081420",
    "end": "3088510"
  },
  {
    "text": "And that's what people\nhave, kind of, done. That's a nice data set\nto play around with. The way that we've\nwritten it over here",
    "start": "3088510",
    "end": "3094060"
  },
  {
    "text": "is to say, look, we\nhave two options. Either it's a uniform bombing\nor it's some targeted bombing.",
    "start": "3094060",
    "end": "3101500"
  },
  {
    "text": "The uniform bombing is\nbasically going to give us just some point between 0--",
    "start": "3101500",
    "end": "3106809"
  },
  {
    "text": "between this box of 0 to\n10, just this thing that we were talking about before. It's going to sample\nuniformly from this box.",
    "start": "3106810",
    "end": "3112960"
  },
  {
    "text": "The targeted bombing is going\nto sample some Gaussians, just like we defined before. You don't know how many. You don't know\nwhere the center is.",
    "start": "3112960",
    "end": "3119980"
  },
  {
    "text": "And it's going to then\nsample from those Gaussians. And it's going to give you\nback some sort of scatter.",
    "start": "3119980",
    "end": "3125817"
  },
  {
    "text": "And you're basically\ngoing to say, OK, I don't know if it's\nrandom, uniform, or if there's some targeted\nbombing going on here,",
    "start": "3125817",
    "end": "3132219"
  },
  {
    "text": "so I'm going to place,\nbasically, some inference. I'm going to flip a coin. If it comes up heads, I'm\ngoing to do uniform bombing.",
    "start": "3132219",
    "end": "3137980"
  },
  {
    "text": "If it comes up tails, I'm\ngoing to do targeted bombing. And then you could look\nat something like this.",
    "start": "3137980",
    "end": "3143090"
  },
  {
    "text": "And you can say,\nwell, I don't know. That's kind of odd. I mean, it doesn't exactly\nlook like a uniform bombing.",
    "start": "3143090",
    "end": "3149980"
  },
  {
    "text": "There's all this missing\nempty space over here, right? It doesn't exactly look\nlike one particular target.",
    "start": "3149980",
    "end": "3155960"
  },
  {
    "text": "And again, you can\nsort of play with this. And we'll get into the inference\nabout how to invert this thing. But just as a forward model,\nyou can play with this,",
    "start": "3155960",
    "end": "3162326"
  },
  {
    "text": "run it forward, and try\nto see if you can guess. ",
    "start": "3162326",
    "end": "3166527"
  }
]