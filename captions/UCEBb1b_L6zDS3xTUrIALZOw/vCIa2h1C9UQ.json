[
  {
    "text": "okay welcome back to 6006 we're going to have a this problem session we're doing a quiz",
    "start": "12480",
    "end": "18560"
  },
  {
    "text": "2 review we're in a much bigger room today so i have a little bit more board space so",
    "start": "18560",
    "end": "24880"
  },
  {
    "text": "i just want to go through what's going to be covered on the exam first off the scope uh now quiz one",
    "start": "24880",
    "end": "32480"
  },
  {
    "text": "material will be fair game for this uh this quiz but it's not something that's",
    "start": "32480",
    "end": "38960"
  },
  {
    "text": "gonna be explicitly emphasized or anything like that right you should know that you know when we're storing graph data",
    "start": "38960",
    "end": "45600"
  },
  {
    "text": "structures that they can achieve certain running time bounds and and and that kind of thing but we're",
    "start": "45600",
    "end": "51600"
  },
  {
    "text": "really going to be concentrating on graphs the six lectures that we've had on graphs the two on unweighted",
    "start": "51600",
    "end": "58160"
  },
  {
    "text": "graph algorithms and the four that we had on weighted graph algorithms they covered the material that was uh",
    "start": "58160",
    "end": "64478"
  },
  {
    "text": "covered in the two problem sets uh problem set five and problem set six now",
    "start": "64479",
    "end": "69680"
  },
  {
    "text": "uh we only usually this this material covers uh three problem sets worth of material",
    "start": "69680",
    "end": "75439"
  },
  {
    "text": "uh this term it's covering two problem sets worth of material uh so just keep that in mind when you're when",
    "start": "75439",
    "end": "81600"
  },
  {
    "text": "you're studying and you wanna go look back on previous material okay in general",
    "start": "81600",
    "end": "87759"
  },
  {
    "text": "there's lots of graph problems that we've talked about how to solve there's really a small number of graph",
    "start": "87759",
    "end": "92960"
  },
  {
    "text": "algorithms but they can solve a lot of different problems okay and so we we saw two algorithms to",
    "start": "92960",
    "end": "100240"
  },
  {
    "text": "solve the graph reachability problem single source uh what is reachable from",
    "start": "100240",
    "end": "105280"
  },
  {
    "text": "me right uh and i can only search a connected component of my graph",
    "start": "105280",
    "end": "110640"
  },
  {
    "text": "from me right and the connected component from me is actually upper bounded",
    "start": "110640",
    "end": "117600"
  },
  {
    "text": "asymptotically by the number of edges in my graph because a a spanning tree",
    "start": "117600",
    "end": "123920"
  },
  {
    "text": "of my component has at least or has v plus one edges right and so",
    "start": "123920",
    "end": "130239"
  },
  {
    "text": "uh the number of vertices i can reach is upper bounded by the number of edges in my graph asymptotically anyway uh",
    "start": "130239",
    "end": "137280"
  },
  {
    "text": "graph then then uh we talked about exploring an entire graph even if it's disconnected",
    "start": "137280",
    "end": "142720"
  },
  {
    "text": "not necessarily from a source right just just touching every vertex in a graph of",
    "start": "142720",
    "end": "148640"
  },
  {
    "text": "course we can just you know touch every vertex in a graph right i can look at the adjacency representation of my graph",
    "start": "148640",
    "end": "155040"
  },
  {
    "text": "and just go through it but this is really we're trying to explore the whole graph maybe count how many things are reachable from",
    "start": "155040",
    "end": "161680"
  },
  {
    "text": "each other in the graph and this is what we had a we talked about",
    "start": "161680",
    "end": "167120"
  },
  {
    "text": "exploring a graph and counting the size of connected components in a graph in an unweighted graph right and we",
    "start": "167120",
    "end": "173920"
  },
  {
    "text": "could do this via full bfs or full dfs it's basically putting a loop around",
    "start": "173920",
    "end": "179040"
  },
  {
    "text": "one of these graph reachability algorithms to explore an entire graph by exploring",
    "start": "179040",
    "end": "184959"
  },
  {
    "text": "component by component and when i'm done with a component i find a vertex i haven't reached yet before",
    "start": "184959",
    "end": "190400"
  },
  {
    "text": "and explore it again okay and that still gets linear time in the graph v",
    "start": "190400",
    "end": "195440"
  },
  {
    "text": "plus e then we had uh special types of graphs directed graphs directed acyclic",
    "start": "195440",
    "end": "201760"
  },
  {
    "text": "graphs uh that we could use we proved this property of if we ran dfs",
    "start": "201760",
    "end": "207760"
  },
  {
    "text": "full dfs on that graph we could actually get topological sort of that graph basically an ordering",
    "start": "207760",
    "end": "214480"
  },
  {
    "text": "of the vertices in the graph such that all edges go in one direction with respect to that",
    "start": "214480",
    "end": "220879"
  },
  {
    "text": "ordering like all forward in that ordering right and we could actually use that to detect cycles in a directed graph",
    "start": "220879",
    "end": "227840"
  },
  {
    "text": "by just looking at the topological sort order and seeing if if",
    "start": "227840",
    "end": "234000"
  },
  {
    "text": "look at the finishing time the reverse finishing time order of dfs and just checking to see whether it was",
    "start": "234000",
    "end": "240319"
  },
  {
    "text": "a topological sorter right because any back edge there would correspond to a cycle in our graph",
    "start": "240319",
    "end": "246879"
  },
  {
    "text": "because the proposition was that if our graph was acyclic doing this procedure would give us a",
    "start": "246879",
    "end": "251920"
  },
  {
    "text": "topological report okay then we had an algorithm bellman ford that uh",
    "start": "251920",
    "end": "258160"
  },
  {
    "text": "was able to detect and find negative weight cycles in our graph in the way that we've presented it in",
    "start": "258160",
    "end": "265040"
  },
  {
    "text": "lecture and but but normally we concentrated on these two problems single source",
    "start": "265040",
    "end": "270880"
  },
  {
    "text": "shortest paths and some a little bit all pair shortest path shortest paths right uh first in the unweighted context",
    "start": "270880",
    "end": "278560"
  },
  {
    "text": "and then in the weighted context for the majority of the lectures okay so let's move on to what those",
    "start": "278560",
    "end": "285759"
  },
  {
    "text": "single source shortest paths algorithms were we had kind of to me in increasing in",
    "start": "285759",
    "end": "292000"
  },
  {
    "text": "generality here the first restriction is bfs already",
    "start": "292000",
    "end": "298160"
  },
  {
    "text": "solves unweighted shortest paths in linear time in the unweighted context that's all good but for uh weighted graphs",
    "start": "298160",
    "end": "306400"
  },
  {
    "text": "regardless of the weights if we had this very strong property on the graph that the property",
    "start": "306400",
    "end": "311759"
  },
  {
    "text": "that the graph didn't have any directed cycles then we could get this in linear time",
    "start": "311759",
    "end": "318000"
  },
  {
    "text": "via dag relaxation and then for general graphs we had these",
    "start": "318000",
    "end": "323199"
  },
  {
    "text": "increasing or decreasing restrictions on the weights first we had the restriction was that",
    "start": "323199",
    "end": "330240"
  },
  {
    "text": "they were unweighted and that that's the bfs constraint or that they're non-negative",
    "start": "330240",
    "end": "336160"
  },
  {
    "text": "that's the dijkstra constraint and if we have no constraints that gives us bellman ford and they",
    "start": "336160",
    "end": "341360"
  },
  {
    "text": "increase in time in general you want to choose an algorithm that's higher on this list but sometimes",
    "start": "341360",
    "end": "349120"
  },
  {
    "text": "the algorithms higher on this list don't apply right if you if on a quiz you come to",
    "start": "349120",
    "end": "355520"
  },
  {
    "text": "a graph for which uh so it's not a dag but you use dag",
    "start": "355520",
    "end": "361680"
  },
  {
    "text": "relaxation that's no longer a correct algorithm right and so you're going to get fewer points",
    "start": "361680",
    "end": "366960"
  },
  {
    "text": "than if you happen to use an inefficient algorithm that is correct right so if i just whenever i saw",
    "start": "366960",
    "end": "373039"
  },
  {
    "text": "shortest paths i used bellman ford right it's the slowest thing",
    "start": "373039",
    "end": "378960"
  },
  {
    "text": "that's probably going to be a correct algorithm it's not necessarily going to be the most efficient algorithm but you'll get more points because it is",
    "start": "378960",
    "end": "385120"
  },
  {
    "text": "a correct algorithm then if you apply a faster algorithm that doesn't apply to your problem",
    "start": "385120",
    "end": "391440"
  },
  {
    "text": "because it's not going to solve it correctly does that make sense okay so",
    "start": "391440",
    "end": "397600"
  },
  {
    "text": "and then in the last lecture we had we talked about all pair shortest paths",
    "start": "397600",
    "end": "402960"
  },
  {
    "text": "and really running a single source for just paths from each vertex is pretty good in most circumstances",
    "start": "402960",
    "end": "411520"
  },
  {
    "text": "we don't know how to do a lot better for for a lot of these and then johnson gives us",
    "start": "411520",
    "end": "418960"
  },
  {
    "text": "basically in this last line of our graph restrictions and weight restrictions",
    "start": "418960",
    "end": "424400"
  },
  {
    "text": "uh where bellman ford is right there we can actually get a speed up over v times bellman ford uh by",
    "start": "424400",
    "end": "431680"
  },
  {
    "text": "kind of two tricks right re-weight the find if the graph has",
    "start": "431680",
    "end": "437919"
  },
  {
    "text": "negative weight cycles and if it doesn't then there exists a re-weighting of this graph",
    "start": "437919",
    "end": "443360"
  },
  {
    "text": "so that all the weights are non-negative but the shortest paths are preserved and so we can use",
    "start": "443360",
    "end": "449039"
  },
  {
    "text": "dijkstra v times and get that that running time instead okay so that's that's just an overview",
    "start": "449039",
    "end": "455680"
  },
  {
    "text": "of the contents that we've covered so far just want to go right just brief",
    "start": "455680",
    "end": "460720"
  },
  {
    "text": "overview of what these algorithms actually do dag relaxation uh you know finds a",
    "start": "460720",
    "end": "467440"
  },
  {
    "text": "topological order of the thing using dfs looking at the reverse order of the",
    "start": "467440",
    "end": "472479"
  },
  {
    "text": "finishing times you prove that that's a top a reverse topological order",
    "start": "472479",
    "end": "477680"
  },
  {
    "text": "and then we relax edges forward in that order because we know that we'll have found shortest path distance to everything",
    "start": "477680",
    "end": "483440"
  },
  {
    "text": "before us before and we use that invariant to prove that this constructs it in linear time",
    "start": "483440",
    "end": "491520"
  },
  {
    "text": "bfs explores things in levels right out increasing",
    "start": "491520",
    "end": "498160"
  },
  {
    "text": "in the number of edges as we go out and i just process all of the ones in the same level at the same time and dijkstra",
    "start": "498160",
    "end": "506639"
  },
  {
    "text": "generalizes this notion by saying well i don't know all of the",
    "start": "506639",
    "end": "511680"
  },
  {
    "text": "things that are in the same level per se from fr as i'm going but i can using a clever",
    "start": "511680",
    "end": "519279"
  },
  {
    "text": "use of a data structure find the next one i should process in kind of a topological relaxation order",
    "start": "519279",
    "end": "527360"
  },
  {
    "text": "to find shortest paths when the weights are non-negative because in some sense i know that once",
    "start": "527360",
    "end": "532720"
  },
  {
    "text": "i've reached things from a short distance i will never have to update their distance again",
    "start": "532720",
    "end": "538560"
  },
  {
    "text": "that's that's kind of the invariant that we're having with dijkstra and then bellman ford essentially duplicates our graph so that",
    "start": "538560",
    "end": "546080"
  },
  {
    "text": "each node corresponds to reaching a vertex using at most a certain number of edges",
    "start": "546080",
    "end": "553200"
  },
  {
    "text": "and then that duplicated graph is a dag and we can run dag relaxation so that's the basic idea of all these",
    "start": "553200",
    "end": "559760"
  },
  {
    "text": "algorithms uh when i approach problems on a quiz",
    "start": "559760",
    "end": "566480"
  },
  {
    "text": "uh there's a couple things to keep in mind there's kind of two two things that we have to worry about",
    "start": "566480",
    "end": "571760"
  },
  {
    "text": "when we're you're looking at a graph problem in this class the first thing is i might not see a",
    "start": "571760",
    "end": "577839"
  },
  {
    "text": "graph in my problem right i mean on quiz 2 you know that there's going to be a graph in your problem because we cover",
    "start": "577839",
    "end": "584240"
  },
  {
    "text": "graph algorithms on on this quiz but in general some of the word problems",
    "start": "584240",
    "end": "590560"
  },
  {
    "text": "you've been seeing on your problem sets there's no graph defined for you they give you a an array of things or a set",
    "start": "590560",
    "end": "596959"
  },
  {
    "text": "of things or you know some connections between some things right and that might be",
    "start": "596959",
    "end": "602000"
  },
  {
    "text": "a graph that you want to make but uh kind of defining a graph is an important",
    "start": "602000",
    "end": "608560"
  },
  {
    "text": "aspect of that problem solving that is not necessarily something that we've covered in lecture",
    "start": "608560",
    "end": "614079"
  },
  {
    "text": "right we've not emphasized that in lecture so much right but it's something that you've had",
    "start": "614079",
    "end": "619200"
  },
  {
    "text": "to do on your problem sets and something that will appear on the quiz right so it's the part of this is a",
    "start": "619200",
    "end": "624480"
  },
  {
    "text": "modeling context can you look at a real real world situation or maybe not so real world but non mathematical context",
    "start": "624480",
    "end": "632399"
  },
  {
    "text": "right and you're trying to abstractify put it in the language of this class the",
    "start": "632399",
    "end": "637519"
  },
  {
    "text": "mathematics of this class make a graph so that solving one of the problems that you know how to solve",
    "start": "637519",
    "end": "644000"
  },
  {
    "text": "can adequately solve the word problem that we gave you right this is a modeling part so i",
    "start": "644000",
    "end": "649440"
  },
  {
    "text": "always suggest when you see a word problem on quiz 2 or on your problem set right",
    "start": "649440",
    "end": "654880"
  },
  {
    "text": "it's that uh see if you can state cleanly an abstract",
    "start": "654880",
    "end": "661200"
  },
  {
    "text": "problem related that if you knew the answer to that abstract problem you could easily solve your word problem",
    "start": "661200",
    "end": "668240"
  },
  {
    "text": "can make it a little easier to decouple the complexity of the word problem right then you don't have to think about i",
    "start": "668240",
    "end": "675040"
  },
  {
    "text": "don't know uh you know various strange characters we come up with in in weird contexts and they're weird",
    "start": "675040",
    "end": "681360"
  },
  {
    "text": "conditions right if you can map that to just a graph with a certain with certain properties",
    "start": "681360",
    "end": "689440"
  },
  {
    "text": "and solving an abstract problem on that graph that might be easier for you to think about and apply the material in this class",
    "start": "689440",
    "end": "694880"
  },
  {
    "text": "so you don't have to worry about oh do i have to remember that roads are connected to five other things",
    "start": "694880",
    "end": "701760"
  },
  {
    "text": "or do i have to remember you you maybe you're given as the input a sparse graph or something like that",
    "start": "701760",
    "end": "707519"
  },
  {
    "text": "right that's a little easier to think about for when applying this material okay and so con converting your problem",
    "start": "707519",
    "end": "715440"
  },
  {
    "text": "into a finding a shortest path problem or finding a cycle or finding a topological sword or connected component",
    "start": "715440",
    "end": "721120"
  },
  {
    "text": "or a negative weight cycle or any of these kinds of things right can make it easier for you to think about",
    "start": "721120",
    "end": "726959"
  },
  {
    "text": "uh it's not like fundamental material in this class that's that's",
    "start": "726959",
    "end": "732079"
  },
  {
    "text": "that's super uh that we need to lecture on but it is really important for you when you're out in the real world",
    "start": "732079",
    "end": "738160"
  },
  {
    "text": "looking at problems to be able to make that transformation from a a non-mathematical",
    "start": "738160",
    "end": "744639"
  },
  {
    "text": "context to a mathematical i like to think of this as a modeling part of the problem but in general once",
    "start": "744639",
    "end": "750079"
  },
  {
    "text": "you've got that nice abstract problem uh then in general you you might have a",
    "start": "750079",
    "end": "755120"
  },
  {
    "text": "graph but it might not be the graph that you the only graph you want when you're solving this problem right that might be",
    "start": "755120",
    "end": "760800"
  },
  {
    "text": "the input graph that you have but in general a lot of the kind of tricks of this thing is not modifying",
    "start": "760800",
    "end": "767519"
  },
  {
    "text": "the algorithms that we gave you if you find yourself trying to modify the algorithms we gave you",
    "start": "767519",
    "end": "772800"
  },
  {
    "text": "that we spent entire lectures on proving their correctness and things like that that's maybe not something you want to",
    "start": "772800",
    "end": "779120"
  },
  {
    "text": "be doing on an exam because then you're going to be writing pages of derivation and proof",
    "start": "779120",
    "end": "784880"
  },
  {
    "text": "that these algorithms work this unit in particular is much more on the let's reduce to some",
    "start": "784880",
    "end": "792079"
  },
  {
    "text": "very powerful black box that we showed you how it works and so because that's the framework here",
    "start": "792079",
    "end": "799680"
  },
  {
    "text": "the way in which we introduce complexity into problems is to make the graph non-obvious on the",
    "start": "799680",
    "end": "805360"
  },
  {
    "text": "thing that you're supposed to apply right and so the graph that we give you as the input may be different than the",
    "start": "805360",
    "end": "812079"
  },
  {
    "text": "graph that you'll want to use to solve the problem and here are some strategies that you can use to modify a",
    "start": "812079",
    "end": "820320"
  },
  {
    "text": "graph like if if you uh if you want to store state as you're traversing this graph right",
    "start": "820320",
    "end": "827440"
  },
  {
    "text": "you can expand the number of vertices in your graph to keep track of what state i'm in right",
    "start": "827440",
    "end": "833440"
  },
  {
    "text": "i can have a different vertex for every possible state i could be at that vertex right you know in your",
    "start": "833440",
    "end": "840000"
  },
  {
    "text": "problem session you had this guy who's drinking when he got to bars right and or or every third time and you need to",
    "start": "840000",
    "end": "846720"
  },
  {
    "text": "remember how many times it's been since i've been to a bar right or i had a drunk at a bar and and",
    "start": "846720",
    "end": "852560"
  },
  {
    "text": "so you can duplicate the vertices to be able to store that information another thing if",
    "start": "852560",
    "end": "857839"
  },
  {
    "text": "you if you if you need to search from multiple locations at the same time",
    "start": "857839",
    "end": "863120"
  },
  {
    "text": "or search to multiple locations at the same time right you can simulate that without",
    "start": "863120",
    "end": "870160"
  },
  {
    "text": "having to run an algorithm many times you can simulate that by adding a an auxiliary node an extra node in your",
    "start": "870160",
    "end": "876800"
  },
  {
    "text": "graph with edges to those sources or to those sinks",
    "start": "876800",
    "end": "882639"
  },
  {
    "text": "and run a a single source shortest path algorithm from that that that super node sometimes we call it uh",
    "start": "882800",
    "end": "889839"
  },
  {
    "text": "to get better performance it's kind of a an efficiency we're adding efficiency by changing our",
    "start": "889839",
    "end": "895680"
  },
  {
    "text": "graph to fit the algorithms that we know to solve efficiently and then the last thing maybe it helps",
    "start": "895680",
    "end": "901839"
  },
  {
    "text": "to pre-process the graph in some way right some edges in the graph that we gave you",
    "start": "901839",
    "end": "907279"
  },
  {
    "text": "might be forbidden or may need to be traversed in one direction rather than the other even though the problem statement seems",
    "start": "907279",
    "end": "913519"
  },
  {
    "text": "kind of seems like they should be traversable in either direction right and doing this pre-processing of",
    "start": "913519",
    "end": "919199"
  },
  {
    "text": "the graph could mean that you break up your graph into your connected graph into a set of",
    "start": "919199",
    "end": "924959"
  },
  {
    "text": "you know disconnected components that you need to find or makes a undirect makes a a",
    "start": "924959",
    "end": "931680"
  },
  {
    "text": "cyclic graph acyclic right or prunes part of the graph that you don't",
    "start": "931680",
    "end": "937440"
  },
  {
    "text": "want to explore i never want to touch on my my way to get to to a location right so these are all",
    "start": "937440",
    "end": "944000"
  },
  {
    "text": "really common strategies that we have you know uh duplicating graph",
    "start": "944000",
    "end": "949600"
  },
  {
    "text": "adding auxiliary vertex vertices or edges to the graph i don't know the context in which we add edges it's",
    "start": "949600",
    "end": "956880"
  },
  {
    "text": "an interesting question and then preprocessing kind of filtering out the graph or transforming it in some",
    "start": "956880",
    "end": "962160"
  },
  {
    "text": "way to to give it properties that will allow us to solve the problem better okay so any questions about the problem",
    "start": "962160",
    "end": "970240"
  },
  {
    "text": "solving strategies that we have or or the content the kind of baseline",
    "start": "970240",
    "end": "975360"
  },
  {
    "text": "content of this class this is kind of an overview of the lecture type material where we're not necessarily applying",
    "start": "975360",
    "end": "981279"
  },
  {
    "text": "this material in lecture the rest of this uh you know quiz review session will be on",
    "start": "981279",
    "end": "986880"
  },
  {
    "text": "applying this material to some uh a quiz from a previous term uh some",
    "start": "986880",
    "end": "992240"
  },
  {
    "text": "of those problems okay so yeah",
    "start": "992240",
    "end": "996959"
  },
  {
    "text": "what are some common ways people uh lose points that's that's great thing we i'll add it to the notes uh when we",
    "start": "998720",
    "end": "1005519"
  },
  {
    "text": "post uh so common things that people lose points on in this unit when they're solving problems",
    "start": "1005519",
    "end": "1012720"
  },
  {
    "text": "you're given a word problem and you don't define a graph right super it's as easy as that you",
    "start": "1012720",
    "end": "1018639"
  },
  {
    "text": "start solving assuming that we know what graph you're talking about when the implicit graph in the problem",
    "start": "1018639",
    "end": "1025600"
  },
  {
    "text": "may or may not be correct but we don't there's no graph defined in the problem right so you need to define a graph in the problem so that's the first thing",
    "start": "1025600",
    "end": "1032079"
  },
  {
    "text": "the second thing is a lot of times it's really useful just as a strategy when you construct that graph tell us",
    "start": "1032079",
    "end": "1039038"
  },
  {
    "text": "how many vertices and edges are in it tell if tell us if it's acyclic right",
    "start": "1039039",
    "end": "1044400"
  },
  {
    "text": "tell us what the weights are on each edge if you don't tell us these things it's really hard for us to base",
    "start": "1044400",
    "end": "1050640"
  },
  {
    "text": "to judge your application of algorithms based on that graph because you know you if there's",
    "start": "1050640",
    "end": "1057919"
  },
  {
    "text": "redundancy there even if you define for every vertex in my original graph i have 10 vertices or blah blah",
    "start": "1057919",
    "end": "1064640"
  },
  {
    "text": "right and maybe you're adding a super node or all these things it can be difficult for us to follow how",
    "start": "1064640",
    "end": "1069679"
  },
  {
    "text": "many things are so you do that bookkeeping for us your graders are going to be a lot happier um",
    "start": "1069679",
    "end": "1075280"
  },
  {
    "text": "and that so so uh common mistakes not defined a graph not uh specifying your graph",
    "start": "1075280",
    "end": "1083919"
  },
  {
    "text": "completely and then uh not uh i i would also suggest that instead of",
    "start": "1083919",
    "end": "1090799"
  },
  {
    "text": "just applying an algorithm to a graph that you clearly state the problem you're solving on the graph first",
    "start": "1090799",
    "end": "1098160"
  },
  {
    "text": "right i want to solve this problem because we've given you number of ways to solve that problem on the graph",
    "start": "1098160",
    "end": "1104320"
  },
  {
    "text": "right and if you happen to choose the wrong algorithm then maybe that's like separating off the problem",
    "start": "1104320",
    "end": "1112960"
  },
  {
    "text": "from your implementation of how you solved that problem can maybe help you get some points for",
    "start": "1112960",
    "end": "1119600"
  },
  {
    "text": "stating the problem you're solving even if you choose the wrong or an inefficient way to solve it",
    "start": "1119600",
    "end": "1125679"
  },
  {
    "text": "right so that that can really help decouple uh uh some of the",
    "start": "1125679",
    "end": "1132480"
  },
  {
    "text": "the things that we're going to give points on in this class right so usually what we're we're breaking up the",
    "start": "1132480",
    "end": "1139360"
  },
  {
    "text": "uh a graph rubric on grading in did you describe a graph right did you",
    "start": "1139360",
    "end": "1146640"
  },
  {
    "text": "modify it in in a way that's going to help you solve the problem did you identify a problem that you need",
    "start": "1146640",
    "end": "1153679"
  },
  {
    "text": "to solve on this thing did you use a correct algorithm to solve it did you analyze the runtime",
    "start": "1153679",
    "end": "1160240"
  },
  {
    "text": "usually involves is the size of my graph not too large and what is the running time based on",
    "start": "1160240",
    "end": "1166640"
  },
  {
    "text": "that graph and then the argument of correctness in this unit is basically like",
    "start": "1166640",
    "end": "1172880"
  },
  {
    "text": "i constructed a graph that has properties so that shortest paths in this new graph correspond to whatever",
    "start": "1172880",
    "end": "1179679"
  },
  {
    "text": "it is that i want in the original problem right some statement that links the problem you're solving in your problem",
    "start": "1179679",
    "end": "1186000"
  },
  {
    "text": "statement to the the problem you're solving on your graph it's that's a really good statement to have",
    "start": "1186000",
    "end": "1191360"
  },
  {
    "text": "to bring together correctness but aside from that statement you're mostly relying on the correctness",
    "start": "1191360",
    "end": "1196400"
  },
  {
    "text": "of the algorithm so you don't need to do much on the correctness side okay but",
    "start": "1196400",
    "end": "1202000"
  },
  {
    "text": "uh forgetting to analyze runtime is a is a big thing okay so those are a bunch of tips i'm",
    "start": "1202000",
    "end": "1207039"
  },
  {
    "text": "going to add them to the end of this slide after after the lecture great question",
    "start": "1207039",
    "end": "1212240"
  },
  {
    "text": "any other questions all right let's get to solving problems",
    "start": "1212240",
    "end": "1217520"
  },
  {
    "text": "all right so these uh problems that we're gonna solve are from uh spring 18",
    "start": "1217520",
    "end": "1225120"
  },
  {
    "text": "quiz two uh slightly modified um but uh you know we're just gonna go",
    "start": "1225120",
    "end": "1231200"
  },
  {
    "text": "through them uh one at a time so the first problem we have uh we have an image of black and white",
    "start": "1231200",
    "end": "1238640"
  },
  {
    "text": "squares so this is like a pixel grid you think of it like as a you know a bitmap on your computer",
    "start": "1238640",
    "end": "1244240"
  },
  {
    "text": "right and what we say is each white pixel is contained in a blob okay",
    "start": "1244240",
    "end": "1250320"
  },
  {
    "text": "but what what what is a blob i don't know right okay i'm kind of giving you an implicit representation definition of",
    "start": "1250320",
    "end": "1257520"
  },
  {
    "text": "what a blob is two white pixels are in the same blob if they share an edge of the grid",
    "start": "1257520",
    "end": "1262880"
  },
  {
    "text": "okay so this kind of tells me this this graph has an edge if these these pixels are adjacent they're both white",
    "start": "1262880",
    "end": "1269919"
  },
  {
    "text": "right that's what it means but an interesting part about that",
    "start": "1269919",
    "end": "1275120"
  },
  {
    "text": "definition is that it kind of is transitive right if i have a white pixel that",
    "start": "1275120",
    "end": "1280400"
  },
  {
    "text": "shares an edge with a white pixel a that shares a uh what",
    "start": "1280400",
    "end": "1285440"
  },
  {
    "text": "let's start writing things on the board shall we probably instead of me just talking at you",
    "start": "1285440",
    "end": "1292080"
  },
  {
    "text": "right we have kind of a pixel grid here okay and i don't know how to do this",
    "start": "1292080",
    "end": "1298559"
  },
  {
    "text": "with the chalkboard because it's white versus black i guess i have to color in the white things",
    "start": "1298559",
    "end": "1304159"
  },
  {
    "text": "these are all white",
    "start": "1304159",
    "end": "1307039"
  },
  {
    "text": "all right so these guys are in the same blob right because they",
    "start": "1313120",
    "end": "1318640"
  },
  {
    "text": "share an edge these guys are in the same blob okay but because they share an edge in the pixel",
    "start": "1318640",
    "end": "1325600"
  },
  {
    "text": "grid these guys are also in the same blob because if these are in the same blob and these are in the same blob there's a transitivity argument here",
    "start": "1325600",
    "end": "1331840"
  },
  {
    "text": "right this this guy needs to be in the same blob as that guy and then it says that black pixels are",
    "start": "1331840",
    "end": "1337520"
  },
  {
    "text": "not in any blob okay and so i'm given an n by m array",
    "start": "1337520",
    "end": "1342640"
  },
  {
    "text": "i never remember which one comes first but we have dimensions of this thing as n by m so we have n times m pixels uh and so",
    "start": "1342640",
    "end": "1350799"
  },
  {
    "text": "we're describing uh essentially in a linear time algorithm",
    "start": "1350799",
    "end": "1355840"
  },
  {
    "text": "to compute the number of blobs in the image why do i say linear time it's because for every pixel in my grid",
    "start": "1355840",
    "end": "1364480"
  },
  {
    "text": "i needed to give you a specification of whether that was white or black right and so yeah if i",
    "start": "1364480",
    "end": "1371520"
  },
  {
    "text": "naively gave you the input of this algorithm with a word per per one of these pixels that would",
    "start": "1371520",
    "end": "1379280"
  },
  {
    "text": "be the input size of my right and so even though this has looks quadratic",
    "start": "1379280",
    "end": "1384640"
  },
  {
    "text": "right the actual input size has is what we define as linear",
    "start": "1384640",
    "end": "1391200"
  },
  {
    "text": "right and so we're looking for a linear time algorithm to count the number of blobs in the image okay so what is a this is a little",
    "start": "1391200",
    "end": "1398480"
  },
  {
    "text": "underspecified as a problem i admit um i i hate to admit that i was involved",
    "start": "1398480",
    "end": "1404400"
  },
  {
    "text": "in this class at that time but the idea here is if these are uh share an",
    "start": "1404400",
    "end": "1411440"
  },
  {
    "text": "edge then everything the the observation here is if i just draw this picture",
    "start": "1411440",
    "end": "1417520"
  },
  {
    "text": "i notice that anything kind of that's reachable through white white connections",
    "start": "1417520",
    "end": "1424400"
  },
  {
    "text": "is going to be in the same blob right so this is a blob and this is a blob and this is a blob",
    "start": "1424400",
    "end": "1429520"
  },
  {
    "text": "and this is a blob but right there's no path here this this black part is not part of a blob now",
    "start": "1429520",
    "end": "1435840"
  },
  {
    "text": "actually there's nothing in this specification that doesn't say that says that we",
    "start": "1435840",
    "end": "1441360"
  },
  {
    "text": "couldn't have these things be in the same blob okay so that's a little confusing maybe",
    "start": "1441360",
    "end": "1446400"
  },
  {
    "text": "a source of error that there's a source of error that i had when reading this problem after a couple years",
    "start": "1446400",
    "end": "1451760"
  },
  {
    "text": "um but you know when you are looking at a problem the if",
    "start": "1451760",
    "end": "1458320"
  },
  {
    "text": "if everything could just be in the same blob then you just return one and this problem is not so interesting",
    "start": "1458320",
    "end": "1463520"
  },
  {
    "text": "right so the right way to interpret this problem i mean i would not need n times m time i could just say",
    "start": "1463520",
    "end": "1471440"
  },
  {
    "text": "one right so in in some sense i'd like there to be something interesting in this problem",
    "start": "1471440",
    "end": "1477840"
  },
  {
    "text": "uh and and having these things that are not reachable from each other be different blobs is kind of",
    "start": "1477840",
    "end": "1484159"
  },
  {
    "text": "the more algorithmically interesting thing to have and so what what is this then right this",
    "start": "1484159",
    "end": "1489520"
  },
  {
    "text": "is just a pixel grid there's there's adjacencies right there's connections between pixels",
    "start": "1489520",
    "end": "1496000"
  },
  {
    "text": "but in particular i really only care about the connections between white pixels right",
    "start": "1496000",
    "end": "1501440"
  },
  {
    "text": "hard to draw on here but this component has a graph that",
    "start": "1501440",
    "end": "1506960"
  },
  {
    "text": "looks like this this component is a single vertex this one's a an edge here",
    "start": "1506960",
    "end": "1513039"
  },
  {
    "text": "and here's a singleton there and if we were to construct this graph we would have an unweighted graph such",
    "start": "1513039",
    "end": "1519120"
  },
  {
    "text": "that the number of blobs in my pic image would be",
    "start": "1519120",
    "end": "1524559"
  },
  {
    "text": "the number of connected components in this graph right see how i'm relating the thing that",
    "start": "1524559",
    "end": "1529679"
  },
  {
    "text": "they're asking for in the problem to a property of a graph that i'm constructing",
    "start": "1529679",
    "end": "1535360"
  },
  {
    "text": "okay so that's that's that's really the key part of argument of correctness that",
    "start": "1535360",
    "end": "1540720"
  },
  {
    "text": "we're looking for is for you to to make some kind of statement connecting the two otherwise",
    "start": "1540720",
    "end": "1546000"
  },
  {
    "text": "you're just constructing a graph and i have no idea what you're doing to that graph right you have to tell me part of it it's about communication to",
    "start": "1546000",
    "end": "1552720"
  },
  {
    "text": "us uh so how do i construct this graph well i can just loop through all of the pixels right",
    "start": "1552720",
    "end": "1561039"
  },
  {
    "text": "look at its four neighbors at most for and if those uh things",
    "start": "1561039",
    "end": "1568559"
  },
  {
    "text": "share are both white then i add an edge we have a we have we're going to",
    "start": "1568559",
    "end": "1573760"
  },
  {
    "text": "essentially have a graph we're going to construct a graph this i told you to do this okay",
    "start": "1573760",
    "end": "1579600"
  },
  {
    "text": "so what is v here then uh v is a",
    "start": "1579600",
    "end": "1587200"
  },
  {
    "text": "vertex for each white",
    "start": "1587200",
    "end": "1594640"
  },
  {
    "text": "pixel right and i can just i mean from the beginning i can just",
    "start": "1596840",
    "end": "1601919"
  },
  {
    "text": "walk through all the things find all the white vertices maybe i identify them uniquely by their",
    "start": "1601919",
    "end": "1607600"
  },
  {
    "text": "x y coordinates in this in this grid that's fine okay so now i",
    "start": "1607600",
    "end": "1613600"
  },
  {
    "text": "have all the vertices and now i want to see what the edges are i can loop through the pixels again and",
    "start": "1613600",
    "end": "1619120"
  },
  {
    "text": "just look at its four possible adjacencies see if any of them are white stick that edge in this set",
    "start": "1619120",
    "end": "1624720"
  },
  {
    "text": "so edge is any two",
    "start": "1624720",
    "end": "1633120"
  },
  {
    "text": "white pixels",
    "start": "1633279",
    "end": "1638640"
  },
  {
    "text": "that share [Music] an edge",
    "start": "1638840",
    "end": "1645679"
  },
  {
    "text": "okay so i can construct both of these things in this in order n times m because there's",
    "start": "1646399",
    "end": "1654080"
  },
  {
    "text": "at most that many vertices i just loop through them and the edges for each pixel i'm only checking a",
    "start": "1654080",
    "end": "1659919"
  },
  {
    "text": "constant number of things and i'm adding them to a set so the number of edges the size of",
    "start": "1659919",
    "end": "1665039"
  },
  {
    "text": "the number of vertices in my graph is at most n times m and the number of edges is at most",
    "start": "1665039",
    "end": "1671679"
  },
  {
    "text": "n times m times four right it's upper bounded by that because that's the number of adjacencies i have in the",
    "start": "1671679",
    "end": "1676799"
  },
  {
    "text": "graph okay you can probably get a better bound in terms of the number of vertices right it can be at most",
    "start": "1676799",
    "end": "1682480"
  },
  {
    "text": "v times four right but that's that's a little stronger it doesn't really matter we're trying to get within the",
    "start": "1682480",
    "end": "1688320"
  },
  {
    "text": "order n times m time bound so anything's fine here so that's the graph we construct",
    "start": "1688320",
    "end": "1693520"
  },
  {
    "text": "and then we can run full bfs or full dfs we've identified a graph we've identified that we want to count",
    "start": "1693520",
    "end": "1700159"
  },
  {
    "text": "the number of connected components in my graph so idea right",
    "start": "1700159",
    "end": "1706240"
  },
  {
    "text": "count connect connected components and then",
    "start": "1706240",
    "end": "1712559"
  },
  {
    "text": "for example using full bfs or full",
    "start": "1712559",
    "end": "1720080"
  },
  {
    "text": "dfs right i wouldn't want you to write both of these algorithms there but when we write up our solutions we",
    "start": "1720080",
    "end": "1726320"
  },
  {
    "text": "want them to uh you know cover the space of student solutions and so we will usually mention it you",
    "start": "1726320",
    "end": "1732240"
  },
  {
    "text": "only have to mention one of them and because these run in linear time this also",
    "start": "1732240",
    "end": "1738000"
  },
  {
    "text": "runs into n times m so all of these things are n times m and we're golden any questions on this question yeah",
    "start": "1738000",
    "end": "1746640"
  },
  {
    "text": "what sort of things would you be looking for to make sure right so when i'm writing down i've i've described to you the algorithm",
    "start": "1749600",
    "end": "1756799"
  },
  {
    "text": "and uh so the question is what kinds of things do i need to write down",
    "start": "1756799",
    "end": "1761919"
  },
  {
    "text": "when i'm proving or when i'm arguing running time of my algorithm and i'm arguing correctness right for",
    "start": "1761919",
    "end": "1769520"
  },
  {
    "text": "running time mostly just check out the size of your graph right",
    "start": "1769520",
    "end": "1776480"
  },
  {
    "text": "state to me what the size of your graph is here in this case it's order n times m and",
    "start": "1776480",
    "end": "1782159"
  },
  {
    "text": "then i state the what the running time is of the algorithm that i have is applied to that right and so because",
    "start": "1782159",
    "end": "1790240"
  },
  {
    "text": "uh full bfs runs in o of v plus e time right",
    "start": "1790240",
    "end": "1797120"
  },
  {
    "text": "it's useful to actually write this down even though right it's not in the terms of our",
    "start": "1797120",
    "end": "1803039"
  },
  {
    "text": "original problem variables it's useful to write this down so that if i mess up when plugging these",
    "start": "1803039",
    "end": "1809120"
  },
  {
    "text": "variables in uh that you know you're showing your steps and so if you",
    "start": "1809120",
    "end": "1815600"
  },
  {
    "text": "mess up arithmetically then we can still give you points but because the size the number of vertices",
    "start": "1815600",
    "end": "1822000"
  },
  {
    "text": "in the graph is n times m the number of edges is n times m i add them together it's still order n",
    "start": "1822000",
    "end": "1827600"
  },
  {
    "text": "times m and that would be a sufficient for an argument of running time and then i was saying for correctness uh",
    "start": "1827600",
    "end": "1834720"
  },
  {
    "text": "most of this the correctness of this algorithm is relying on the fact that this thing counts connected components correctly in",
    "start": "1834720",
    "end": "1841600"
  },
  {
    "text": "my in my graph the key observation on a word problem that i uh",
    "start": "1841600",
    "end": "1848559"
  },
  {
    "text": "uh or or even a graph transformation problem is that the property that you're wanting",
    "start": "1848559",
    "end": "1853600"
  },
  {
    "text": "of the original graph for the original problem corresponds to the thing you're solving",
    "start": "1853600",
    "end": "1859039"
  },
  {
    "text": "in a new graph that you've made right and so here an argument of correctness that i would",
    "start": "1859039",
    "end": "1865200"
  },
  {
    "text": "be looking for that we might allow some weaker statements is",
    "start": "1865200",
    "end": "1870880"
  },
  {
    "text": "uh that the number of blobs in the image corresponds to the number of",
    "start": "1870880",
    "end": "1876399"
  },
  {
    "text": "connected components in this graph that i made okay that's that's really all it needs",
    "start": "1876399",
    "end": "1881519"
  },
  {
    "text": "but i would like a connection between those values okay now why why would you be constructing",
    "start": "1881519",
    "end": "1888320"
  },
  {
    "text": "this graph and finding connected components if that if if you didn't uh if",
    "start": "1888320",
    "end": "1893840"
  },
  {
    "text": "that wasn't what your thought was uh i don't know but it's real it's good",
    "start": "1893840",
    "end": "1899279"
  },
  {
    "text": "when you're communicating to make sure that that's abundantly clear that that's why this is uh i mean you",
    "start": "1899279",
    "end": "1905440"
  },
  {
    "text": "should be able to argue why why these things are uh that is a connected component you",
    "start": "1905440",
    "end": "1911919"
  },
  {
    "text": "could say something like because anything reachable is in the same blob or something like that right",
    "start": "1911919",
    "end": "1917679"
  },
  {
    "text": "okay so that's problem one",
    "start": "1917679",
    "end": "1921840"
  },
  {
    "text": "we got these nice mechanical boards all right so that's problem one problem two is a",
    "start": "1922720",
    "end": "1928159"
  },
  {
    "text": "little funky okay uh it's been reworded a little bit",
    "start": "1928159",
    "end": "1934720"
  },
  {
    "text": "from uh it's from spring 18 so that i could uh point out some other",
    "start": "1934720",
    "end": "1941760"
  },
  {
    "text": "features of this graph we're given a connected so connected is in bold so that might be",
    "start": "1941760",
    "end": "1946799"
  },
  {
    "text": "an important property of our graph that we're trying to communicate to you a connected undirected graph",
    "start": "1946799",
    "end": "1954240"
  },
  {
    "text": "with strictly positive edge weights right so they're mapping to the positive integers where",
    "start": "1954240",
    "end": "1961279"
  },
  {
    "text": "e is the same size as v right so the size of e is the same size as the size of v right so i have",
    "start": "1961279",
    "end": "1967440"
  },
  {
    "text": "the same number of edges as i have vertices we're trying to find a order v time",
    "start": "1967440",
    "end": "1974640"
  },
  {
    "text": "algorithm to determine a path from some vertex s if to some vertex t",
    "start": "1974640",
    "end": "1981600"
  },
  {
    "text": "with minimum weight okay so what's the first thing i noticed i",
    "start": "1981600",
    "end": "1988000"
  },
  {
    "text": "noticed that on this thing i've got a graph problem",
    "start": "1988000",
    "end": "1994080"
  },
  {
    "text": "problem 2 we've got a graph it's undirected",
    "start": "1994080",
    "end": "2001840"
  },
  {
    "text": "it's connected it has this weird property that v equals",
    "start": "2001840",
    "end": "2008559"
  },
  {
    "text": "e or e equals v and weights are positive",
    "start": "2008559",
    "end": "2019840"
  },
  {
    "text": "okay and we're asking for a single pair shortest paths right we want",
    "start": "2020240",
    "end": "2026960"
  },
  {
    "text": "uh a path the shortest path a shortest path between two vertices",
    "start": "2026960",
    "end": "2033840"
  },
  {
    "text": "now if if we just we're given this graph and we want to solve this problem a very easy way to do that would be to",
    "start": "2036559",
    "end": "2042799"
  },
  {
    "text": "just say let's run dijkstra on the graph right this is a graph it has only positive edge weights",
    "start": "2042799",
    "end": "2050480"
  },
  {
    "text": "one direction on this graph how long does dijkstra take on this graph idea one right",
    "start": "2050480",
    "end": "2061839"
  },
  {
    "text": "what's the problem with this it applies right we're in the context of non-negative edge weights",
    "start": "2068960",
    "end": "2074638"
  },
  {
    "text": "we can find single source paths from s to everything else in the graph in using dijkstra it applies it's a",
    "start": "2074639",
    "end": "2082240"
  },
  {
    "text": "correct algorithm what's the what's the difficulty with this algorithm slow",
    "start": "2082240",
    "end": "2088480"
  },
  {
    "text": "too slow right that algorithm would run in o of v",
    "start": "2088480",
    "end": "2095839"
  },
  {
    "text": "log v plus e and in this case these are the same so this",
    "start": "2095839",
    "end": "2101599"
  },
  {
    "text": "is asymptotically smaller than this one it runs in v log v so we're a little off",
    "start": "2101599",
    "end": "2108799"
  },
  {
    "text": "we're off by a logarithmic factor in our running time but you know this would at least be a correct algorithm",
    "start": "2109119",
    "end": "2114720"
  },
  {
    "text": "you know if whenever you approach a problem on the exam and you see a really stupid uh",
    "start": "2114720",
    "end": "2121040"
  },
  {
    "text": "polynomial algorithm that still solves your problem correctly you might as well write that write that",
    "start": "2121040",
    "end": "2126400"
  },
  {
    "text": "down in a line it doesn't it doesn't uh hurt you that much to just write that down because it's",
    "start": "2126400",
    "end": "2132720"
  },
  {
    "text": "possible we give you points for that right but this but but on your exam",
    "start": "2132720",
    "end": "2138800"
  },
  {
    "text": "notice why it doesn't is not sufficient right notice that oh this right this is",
    "start": "2138800",
    "end": "2145520"
  },
  {
    "text": "v notice that this is not the running time bound we're looking for we got to exploit something different okay now",
    "start": "2145520",
    "end": "2152400"
  },
  {
    "text": "this doesn't seem this is a weighted context we have weighted paths it doesn't seem to be in one of the the",
    "start": "2152400",
    "end": "2159760"
  },
  {
    "text": "conditions that we can get a linear time weighted single source shortest path algorithm",
    "start": "2159760",
    "end": "2165200"
  },
  {
    "text": "right uh in particular using bfs we saw a transformation where if as long",
    "start": "2165200",
    "end": "2171359"
  },
  {
    "text": "as the sum of your weights was linear in the combinatorial size of your graph we could use bfs",
    "start": "2171359",
    "end": "2177200"
  },
  {
    "text": "by by making each edge a bunch of undirected edges we don't have that in this context and",
    "start": "2177200",
    "end": "2182400"
  },
  {
    "text": "this graph is undirected i mean so it definitely contains cycles so we can't use dag shortest paths",
    "start": "2182400",
    "end": "2188640"
  },
  {
    "text": "so how the heck can we do this well what does this graph look like here",
    "start": "2188640",
    "end": "2194079"
  },
  {
    "text": "i'm going to take a look at this condition v equals e okay",
    "start": "2194079",
    "end": "2200560"
  },
  {
    "text": "so what does this graph look like it's connected and it's v plus e well how many edges",
    "start": "2200560",
    "end": "2207440"
  },
  {
    "text": "does a tree have v minus one right",
    "start": "2207440",
    "end": "2215599"
  },
  {
    "text": "so in a sense if a tree is the is the smallest number of edges",
    "start": "2215599",
    "end": "2221839"
  },
  {
    "text": "you can have in a connected graph so this has one more edge than a tree",
    "start": "2221839",
    "end": "2228160"
  },
  {
    "text": "right so really what this looks like what our graph g looks like is some kind of tree",
    "start": "2228160",
    "end": "2234640"
  },
  {
    "text": "and somewhere we've got an extra edge",
    "start": "2234640",
    "end": "2240640"
  },
  {
    "text": "in this graph right it's a tree plus an extra edge that's what our graph is",
    "start": "2241680",
    "end": "2247440"
  },
  {
    "text": "okay so well let's take a step back if i just",
    "start": "2247440",
    "end": "2252640"
  },
  {
    "text": "had a tree and i had weighed a weighted graph here undirected",
    "start": "2252640",
    "end": "2258960"
  },
  {
    "text": "and the weights are all positive",
    "start": "2258960",
    "end": "2262720"
  },
  {
    "text": "if if any of the weights were negative how could i solve this problem well every edge is reachable from every",
    "start": "2264000",
    "end": "2270320"
  },
  {
    "text": "vertex i can just go to that edge and traverse a negative weight back and forth and my shortest pathway would be uh",
    "start": "2270320",
    "end": "2278320"
  },
  {
    "text": "infinite for all our vertices that's not the case we have here we have positive edge weights only which",
    "start": "2278320",
    "end": "2283920"
  },
  {
    "text": "means shortest paths are simple and actually there's only one simple path between any pair of vertices",
    "start": "2283920",
    "end": "2291200"
  },
  {
    "text": "in a tree right i basically there's there's one thing i can do and in fact",
    "start": "2291200",
    "end": "2298320"
  },
  {
    "text": "if i took if this was s and this was t t that's that's an x what am i doing",
    "start": "2298320",
    "end": "2305440"
  },
  {
    "text": "okay t if i just ran any unweighted short i mean",
    "start": "2305440",
    "end": "2312480"
  },
  {
    "text": "reachability algorithm i would get a a tree right a bfs tree or a dfs tree right it",
    "start": "2312480",
    "end": "2318960"
  },
  {
    "text": "would visit vertices in some order now actually in a tree it i have to output a tree that connects all the",
    "start": "2318960",
    "end": "2325440"
  },
  {
    "text": "vertices right and that would be this tree",
    "start": "2325440",
    "end": "2330880"
  },
  {
    "text": "right and so in a sense the paths that i got from bfs or dfs in this graph would be",
    "start": "2330880",
    "end": "2338560"
  },
  {
    "text": "exactly shortest paths i would just have to then go and add up all the pa path edge weights along the edges",
    "start": "2338560",
    "end": "2346320"
  },
  {
    "text": "that make sense okay so uh bfs or dfs in the unweighted context",
    "start": "2346320",
    "end": "2356160"
  },
  {
    "text": "can give me the shortest path in the weighted context because there's only one simple path in",
    "start": "2356160",
    "end": "2362079"
  },
  {
    "text": "this graph but we have a complication here that's not the question that we're asking we have an extra edge",
    "start": "2362079",
    "end": "2369440"
  },
  {
    "text": "and now we have a property where there's not just one simple path to t there could be two",
    "start": "2369440",
    "end": "2376800"
  },
  {
    "text": "simple paths right i could go this way around the cycle or it could go this way around the cycle",
    "start": "2376800",
    "end": "2384480"
  },
  {
    "text": "so that's a complication but there's only one cycle",
    "start": "2386240",
    "end": "2391200"
  },
  {
    "text": "if t is over here there's only one path right so if there there is only one path",
    "start": "2394560",
    "end": "2402000"
  },
  {
    "text": "i'll be golden but if basically the cycle can be reached between these two things i could have two simple paths that's the",
    "start": "2402000",
    "end": "2408000"
  },
  {
    "text": "property right we have the closest vertex on so this is the cycle",
    "start": "2408000",
    "end": "2413359"
  },
  {
    "text": "right there's a cycle here if this is the closest vertex to s",
    "start": "2413359",
    "end": "2420720"
  },
  {
    "text": "and this is the closest vertex to t on the cycle then i could take either path around the cycle",
    "start": "2420720",
    "end": "2426160"
  },
  {
    "text": "to get from one to the other and that gives me my two paths",
    "start": "2426160",
    "end": "2431440"
  },
  {
    "text": "but this path and this path right these are completely edge disjoint",
    "start": "2432960",
    "end": "2438960"
  },
  {
    "text": "right in other words any simple path from s to t",
    "start": "2438960",
    "end": "2444560"
  },
  {
    "text": "if i if i find this vertex going through here it can only use one of these edges",
    "start": "2444560",
    "end": "2452240"
  },
  {
    "text": "right because i can't i can't come back to this vertex once i go into it here i got to go out",
    "start": "2452240",
    "end": "2458240"
  },
  {
    "text": "one direction and i can't come back right so it's only one of these two edges",
    "start": "2458240",
    "end": "2463599"
  },
  {
    "text": "so the the idea behind this algorithm is i'm going to find the cycle or in particular i'm going to find this",
    "start": "2463599",
    "end": "2470720"
  },
  {
    "text": "thing s prime on the cycle find the",
    "start": "2470720",
    "end": "2475760"
  },
  {
    "text": "outgoing two edges here remove one and then do my tree searching",
    "start": "2475760",
    "end": "2483040"
  },
  {
    "text": "basically find the shortest path by by running a an undirected i mean an unweighted",
    "start": "2483040",
    "end": "2488560"
  },
  {
    "text": "reachability algorithm which will give me a path back to f the only simple path in that tree right",
    "start": "2488560",
    "end": "2493760"
  },
  {
    "text": "i get rid of this this edge and i do that once and i do it again without this edge so that's that's the",
    "start": "2493760",
    "end": "2500560"
  },
  {
    "text": "idea of my algorithm okay so how can i do fir so i first have",
    "start": "2500560",
    "end": "2505680"
  },
  {
    "text": "to find s prime how can i do that well",
    "start": "2505680",
    "end": "2510720"
  },
  {
    "text": "i don't know what this edge is but if i ran uh un uh uh an unweighted shortest path",
    "start": "2510720",
    "end": "2516960"
  },
  {
    "text": "algorithm like bfs or dfs on here i would get back a tree right some",
    "start": "2516960",
    "end": "2523040"
  },
  {
    "text": "edge of my graph will not be in my tree",
    "start": "2523040",
    "end": "2528000"
  },
  {
    "text": "something like here right the shortest path to this so i look through i i run b so",
    "start": "2529119",
    "end": "2535520"
  },
  {
    "text": "algorithm idea two two first find",
    "start": "2535520",
    "end": "2543200"
  },
  {
    "text": "s prime okay and i can find s prime by run i don't know",
    "start": "2543200",
    "end": "2550960"
  },
  {
    "text": "a single source shortest path unweighted",
    "start": "2550960",
    "end": "2556400"
  },
  {
    "text": "uh i guess run single source reachability",
    "start": "2557200",
    "end": "2565040"
  },
  {
    "text": "unweighted from s using bfs or dfs",
    "start": "2565040",
    "end": "2572319"
  },
  {
    "text": "to explore a tree of my graph then some edge is not in my tree of the graph",
    "start": "2573040",
    "end": "2578160"
  },
  {
    "text": "that will exist on the cycle kind of by definition right it's cons it's connecting two part parts",
    "start": "2578160",
    "end": "2585200"
  },
  {
    "text": "of my tree now i can look at those two paths",
    "start": "2585200",
    "end": "2592319"
  },
  {
    "text": "from here and the last one that they're in common from s is going to be my split point s prime",
    "start": "2592319",
    "end": "2598400"
  },
  {
    "text": "it's the it's the closest one to my source that is on the cycle right",
    "start": "2598400",
    "end": "2605920"
  },
  {
    "text": "because i constructed this cycle here okay so i can uh",
    "start": "2605920",
    "end": "2613599"
  },
  {
    "text": "find edge u v not in",
    "start": "2613599",
    "end": "2621280"
  },
  {
    "text": "the parent tree right so maybe this is u v right",
    "start": "2621280",
    "end": "2628480"
  },
  {
    "text": "not in the parent tree and then find",
    "start": "2628480",
    "end": "2636720"
  },
  {
    "text": "last common vertex in",
    "start": "2636720",
    "end": "2646078"
  },
  {
    "text": "paths from s to u and s",
    "start": "2646839",
    "end": "2654720"
  },
  {
    "text": "to v okay that's going to give me my s prime okay and i can do that by i mean these",
    "start": "2654720",
    "end": "2660720"
  },
  {
    "text": "are each of linear size and i can just look at their prefix i can start from s",
    "start": "2660720",
    "end": "2666079"
  },
  {
    "text": "i can walk forward until they diverge and the one before they diverge is s",
    "start": "2666079",
    "end": "2671920"
  },
  {
    "text": "prime right that's s prime right here once i have s prime",
    "start": "2671920",
    "end": "2676960"
  },
  {
    "text": "i know what the edges are when they diverge i remove one of those from the graph i",
    "start": "2676960",
    "end": "2684000"
  },
  {
    "text": "do the same algorithm again to find a path to t and i do the same algorithm again to find the path to t",
    "start": "2684000",
    "end": "2691839"
  },
  {
    "text": "and i see which one is shorter that's it there's only two of them and so i check or they could be the same",
    "start": "2691839",
    "end": "2697839"
  },
  {
    "text": "path in which case uh my my t",
    "start": "2697839",
    "end": "2703440"
  },
  {
    "text": "is actually before s prime on on my cycle does that make sense so that's that's",
    "start": "2703440",
    "end": "2709200"
  },
  {
    "text": "the idea uh the last thing is remove an",
    "start": "2709200",
    "end": "2717040"
  },
  {
    "text": "edge from s prime i don't even have to be picky",
    "start": "2717040",
    "end": "2723200"
  },
  {
    "text": "about this it has degree three i can just run single sorted paths on all of them and",
    "start": "2723200",
    "end": "2728640"
  },
  {
    "text": "take them in right uh for eat",
    "start": "2728640",
    "end": "2735760"
  },
  {
    "text": "remove each edge from v at from s prime",
    "start": "2735760",
    "end": "2744720"
  },
  {
    "text": "uh remove let's for",
    "start": "2744839",
    "end": "2751760"
  },
  {
    "text": "each edge from s remove",
    "start": "2751760",
    "end": "2758640"
  },
  {
    "text": "and run ssr from s okay",
    "start": "2758839",
    "end": "2766960"
  },
  {
    "text": "and one of the paths there to t will be shortest my shortest path in the",
    "start": "2766960",
    "end": "2772880"
  },
  {
    "text": "original graph because it can't use uh more than two of those edges that's",
    "start": "2772880",
    "end": "2778720"
  },
  {
    "text": "that's the claim okay and this runs in uh linear time because what i'm doing is",
    "start": "2778720",
    "end": "2785359"
  },
  {
    "text": "i'm running single source reachability once",
    "start": "2785359",
    "end": "2790720"
  },
  {
    "text": "and maybe two more times or three more times a constant number of times",
    "start": "2790720",
    "end": "2796240"
  },
  {
    "text": "on a graph that has size v right and this prefix finding also only takes",
    "start": "2796240",
    "end": "2803440"
  },
  {
    "text": "order v and so we're done okay any questions about this problem",
    "start": "2803440",
    "end": "2811280"
  },
  {
    "text": "no no questions all right we will move on to uh",
    "start": "2813520",
    "end": "2820160"
  },
  {
    "text": "what's up there's a yeah there's a hint in the title actually",
    "start": "2820160",
    "end": "2825280"
  },
  {
    "text": "the original version of this problem said instead of this e equals v specification it said there's",
    "start": "2825280",
    "end": "2831119"
  },
  {
    "text": "only one cycle in the graph but it's in the context of undirected",
    "start": "2831119",
    "end": "2836480"
  },
  {
    "text": "cycles as opposed to directed cycles which is usually what we talk about in this class right we say that there's a negative",
    "start": "2836480",
    "end": "2843040"
  },
  {
    "text": "edge weight cycle in the graph if we can you know it's usually we're talking about we're allowing non-simple",
    "start": "2843040",
    "end": "2850240"
  },
  {
    "text": "cycles in this class so to to you know remember this this uh property about",
    "start": "2850240",
    "end": "2857359"
  },
  {
    "text": "trees and to enforce this property without talking about sicklicity i changed the condition uh",
    "start": "2857359",
    "end": "2865119"
  },
  {
    "text": "for this problem session this review yeah could i also just run depth first search",
    "start": "2865119",
    "end": "2871839"
  },
  {
    "text": "on this graph could you just run depth first search on this graph to do what",
    "start": "2871839",
    "end": "2878640"
  },
  {
    "text": "to find the shortest path right so depth first search on this path",
    "start": "2879359",
    "end": "2884480"
  },
  {
    "text": "if i ran it from s when i got to s prime i would have a choice on what the next",
    "start": "2884480",
    "end": "2889599"
  },
  {
    "text": "outgoing edge to do right so if i ran depth first choice for",
    "start": "2889599",
    "end": "2894880"
  },
  {
    "text": "one of those choices i would find a path to t right",
    "start": "2894880",
    "end": "2901599"
  },
  {
    "text": "and then i would find then then i could run and i would find a path to t right there's only two of them or at",
    "start": "2901599",
    "end": "2908880"
  },
  {
    "text": "most two of them but then there's the possibility i missed this other path that could be shorter well how would i miss it",
    "start": "2908880",
    "end": "2915440"
  },
  {
    "text": "has to go through the other edge too it doesn't go through the other edge that's the point right um it won't go through",
    "start": "2915440",
    "end": "2924160"
  },
  {
    "text": "no so depth first search will actually go through this thing traverse an edge go all the way around",
    "start": "2924160",
    "end": "2930319"
  },
  {
    "text": "the cycle because everything here is reachable from here because it's an undirected graph",
    "start": "2930319",
    "end": "2936000"
  },
  {
    "text": "it will reach back to here and then backtrack all the way so we'll actually never traverse this last edge here of",
    "start": "2936000",
    "end": "2942559"
  },
  {
    "text": "the cycle so it's something you can actually prove with dfs now you could actually while you're running dfs try every",
    "start": "2942559",
    "end": "2949920"
  },
  {
    "text": "possibility right because my branching factors at most three at some of these things right",
    "start": "2949920",
    "end": "2956800"
  },
  {
    "text": "so what i i could do is uh or it could be at most four right i",
    "start": "2956800",
    "end": "2963040"
  },
  {
    "text": "could i could connect two things with the same uh branching but in general it's a constant",
    "start": "2963040",
    "end": "2968079"
  },
  {
    "text": "and and with with every choice dfs could make i could try all possibilities",
    "start": "2968079",
    "end": "2973839"
  },
  {
    "text": "how many possibilities would that be you get a blow up of the degree of",
    "start": "2973839",
    "end": "2981680"
  },
  {
    "text": "every vertex in my graph so the degree",
    "start": "2981680",
    "end": "2988800"
  },
  {
    "text": "time multiplied by each other that's the number of times i would have to run dfs which is exponential right a constant",
    "start": "2988800",
    "end": "2996839"
  },
  {
    "text": "degree so a constant uh [Music]",
    "start": "2996839",
    "end": "3001920"
  },
  {
    "text": "multiplied like like two or three right uh multiplied v",
    "start": "3001920",
    "end": "3008559"
  },
  {
    "text": "times is three to the v which is exponential in the size of my graph",
    "start": "3008559",
    "end": "3016400"
  },
  {
    "text": "uh sure right because i could still have large branching for a large number of",
    "start": "3018319",
    "end": "3024160"
  },
  {
    "text": "vertices okay good great question",
    "start": "3024160",
    "end": "3029359"
  },
  {
    "text": "all right cool so that's that problem problem three",
    "start": "3030640",
    "end": "3035920"
  },
  {
    "text": "i have half an hour for the last two problems i think that should be fine this one's uh okay this is doughnut",
    "start": "3037520",
    "end": "3045040"
  },
  {
    "text": "is the problem name uh momar has just uh finished work at the fing sprilled",
    "start": "3045040",
    "end": "3052160"
  },
  {
    "text": "power plant at a particular location p and needs to drive home",
    "start": "3052160",
    "end": "3057680"
  },
  {
    "text": "to a known location h but along the way if his driving route ever comes within driving distance k of a",
    "start": "3057680",
    "end": "3064319"
  },
  {
    "text": "donut shop he won't be able to resist himself and will have to go there and eat donuts",
    "start": "3064319",
    "end": "3069520"
  },
  {
    "text": "and his wife harge will be angry okay maybe you can get the reference here",
    "start": "3069520",
    "end": "3075119"
  },
  {
    "text": "mohmer knows the layout of finn sprielled which can be modeled as a set of n locations with",
    "start": "3075119",
    "end": "3080480"
  },
  {
    "text": "two-way roads of known driving distance connecting some pairs of them and you may assume that no location is",
    "start": "3080480",
    "end": "3086880"
  },
  {
    "text": "incident to more than five roads okay so we've got a degree bound here as well as the location and and he knows",
    "start": "3086880",
    "end": "3093920"
  },
  {
    "text": "the locations that all the locations that contain doughnut shops there's at most d of them okay",
    "start": "3093920",
    "end": "3102319"
  },
  {
    "text": "describe an n log n time algorithm to find the shortest driving route from the",
    "start": "3102319",
    "end": "3107599"
  },
  {
    "text": "power plant back to home that avoids driving within distance k of a doughnut shop",
    "start": "3107599",
    "end": "3114400"
  },
  {
    "text": "okay so we got a couple variables in here we've got k we've got d but a running time bound",
    "start": "3114400",
    "end": "3120240"
  },
  {
    "text": "only relies on n right",
    "start": "3120240",
    "end": "3125839"
  },
  {
    "text": "okay i see shortest paths i see that uh i don't see an explicit mention",
    "start": "3126559",
    "end": "3135599"
  },
  {
    "text": "of positive distances of the i i see lengths right they say he knows",
    "start": "3135599",
    "end": "3141839"
  },
  {
    "text": "the uh known driving distance connecting some pairs of locations",
    "start": "3141839",
    "end": "3147839"
  },
  {
    "text": "so usually i think if if i were writing this problem now i'd probably be a little bit more explicit",
    "start": "3147839",
    "end": "3153119"
  },
  {
    "text": "the distance is positive but that's you know something that you might come into contact with right distances",
    "start": "3153119",
    "end": "3159760"
  },
  {
    "text": "are positive right and so we can't have negative distances here okay uh so",
    "start": "3159760",
    "end": "3166240"
  },
  {
    "text": "i look at n log n i'm like hey what has a log in it in this unit",
    "start": "3166240",
    "end": "3171520"
  },
  {
    "text": "dykstra maybe i can use dijkstra okay so let's see if if we ran dijkstra",
    "start": "3171520",
    "end": "3177119"
  },
  {
    "text": "from p to h okay so we've got we've got a graph here we've got our graph so",
    "start": "3177119",
    "end": "3185119"
  },
  {
    "text": "i'm this is a word problem so there's no graph there so i have to define a graph okay so i'm",
    "start": "3185119",
    "end": "3192240"
  },
  {
    "text": "going to define a graph v e and we've got v",
    "start": "3192240",
    "end": "3198880"
  },
  {
    "text": "that's going to be my set of locations",
    "start": "3198880",
    "end": "3202640"
  },
  {
    "text": "locations so this has their order n of them there's actually n",
    "start": "3204520",
    "end": "3211839"
  },
  {
    "text": "n of them and then e what are we going to have we're going to have",
    "start": "3211839",
    "end": "3218960"
  },
  {
    "text": "uh it's a known pair of things right road roads",
    "start": "3220880",
    "end": "3228800"
  },
  {
    "text": "with weight equal to driving",
    "start": "3228800",
    "end": "3235359"
  },
  {
    "text": "driving drive",
    "start": "3235359",
    "end": "3240880"
  },
  {
    "text": "driving distance which uh by my assumption is going to be",
    "start": "3241200",
    "end": "3248559"
  },
  {
    "text": "greater than zero right now it's not stated explicitly but you know that would be a reasonable",
    "start": "3248559",
    "end": "3254400"
  },
  {
    "text": "assumption for you to make on your exam because distances are positive we would probably be more",
    "start": "3254400",
    "end": "3260880"
  },
  {
    "text": "explicit about that these days okay all right so this is a graph i could make and i",
    "start": "3260880",
    "end": "3267440"
  },
  {
    "text": "have a vertex s or a vertex p and a vertex h and i'm trying to find a",
    "start": "3267440",
    "end": "3275200"
  },
  {
    "text": "shortest path between them right shortest driving distance driving route",
    "start": "3275200",
    "end": "3280240"
  },
  {
    "text": "right okay so i could run dijkstra wait so what do i know about this how",
    "start": "3280240",
    "end": "3286559"
  },
  {
    "text": "many edges do i have my graph i have at most five per vertex right so this is upper bounded by five",
    "start": "3286559",
    "end": "3294559"
  },
  {
    "text": "times v which is order v okay so i have a order",
    "start": "3294559",
    "end": "3299599"
  },
  {
    "text": "v size graph that's a good thing order n because n is the number of vertices and",
    "start": "3299599",
    "end": "3306480"
  },
  {
    "text": "so if i were to just run dijkstra on here from p",
    "start": "3306480",
    "end": "3312720"
  },
  {
    "text": "doing dijkstra",
    "start": "3313599",
    "end": "3318160"
  },
  {
    "text": "on g from any s takes",
    "start": "3318960",
    "end": "3328078"
  },
  {
    "text": "order n log n right n log n plus n and n log n is bigger",
    "start": "3328319",
    "end": "3335839"
  },
  {
    "text": "than n okay so that's that's a nice observation we may be we have we can at least afford to use",
    "start": "3335839",
    "end": "3341599"
  },
  {
    "text": "dijkstra in this problem to find shortest distances but what's the problem with a shortest distance found by dijkstra in this graph",
    "start": "3341599",
    "end": "3349280"
  },
  {
    "text": "donuts like the entire point of the problem right i need to avoid being too close to donut",
    "start": "3349280",
    "end": "3355359"
  },
  {
    "text": "shops okay so we might have a donut shop here and we need to stay outside of that",
    "start": "3355359",
    "end": "3363200"
  },
  {
    "text": "distance k right or we might have another donut shop here right and so we got to find a path that",
    "start": "3363200",
    "end": "3369200"
  },
  {
    "text": "kind of goes around these donut shops okay so in other words if",
    "start": "3369200",
    "end": "3374960"
  },
  {
    "text": "if i have a vertex in my graph where i can reach a doughnut shot within shop within distance k i got i can never",
    "start": "3374960",
    "end": "3382960"
  },
  {
    "text": "visit that vertex right because then i you know",
    "start": "3382960",
    "end": "3388079"
  },
  {
    "text": "momer will not be able to resist himself and have to go eat a donut okay so that's the thing we're trying to",
    "start": "3388079",
    "end": "3394000"
  },
  {
    "text": "avoid so how can we do this well here's a",
    "start": "3394000",
    "end": "3399440"
  },
  {
    "text": "silly thing i could run dijkstra from each of these vertices these donut shops find all the things",
    "start": "3399440",
    "end": "3406799"
  },
  {
    "text": "reachable in k driving distance from them right and then remove those vertices",
    "start": "3406799",
    "end": "3415200"
  },
  {
    "text": "from the graph that's an idea but how long would that take that would mean",
    "start": "3415200",
    "end": "3420240"
  },
  {
    "text": "need me to run dijkstra d times right because there's d doughnut chops i",
    "start": "3420240",
    "end": "3425839"
  },
  {
    "text": "gotta run dijkstra d times so that gives me a running time bound of i run d times to filter out the graph right to",
    "start": "3425839",
    "end": "3432720"
  },
  {
    "text": "modify this graph and then i do one more to find the shortest path if there is one",
    "start": "3432720",
    "end": "3438880"
  },
  {
    "text": "but in general that's going to take d times n log n not n log n i i have no bound on d",
    "start": "3438880",
    "end": "3444799"
  },
  {
    "text": "except that it's under n right so it could be n and that would give me a bad running time",
    "start": "3444799",
    "end": "3449839"
  },
  {
    "text": "so we're going to use a very similar trick here to one of your i think a previous review",
    "start": "3449839",
    "end": "3456720"
  },
  {
    "text": "session uh stop here we go uh",
    "start": "3456720",
    "end": "3464400"
  },
  {
    "text": "is to when you want to find things if we're on a prunograph from multiple",
    "start": "3464400",
    "end": "3470640"
  },
  {
    "text": "locations one of the things we can do is any tricks",
    "start": "3470640",
    "end": "3475680"
  },
  {
    "text": "super node right i can have a vertex well maybe i don't want to put it up yet",
    "start": "3475680",
    "end": "3483040"
  },
  {
    "text": "okay if i have all of these donut shops what i can do is provide a",
    "start": "3483040",
    "end": "3490720"
  },
  {
    "text": "i guess i guess these are unweighted undirected edges right here we can model all of those",
    "start": "3490720",
    "end": "3497200"
  },
  {
    "text": "directed things by two undirected edges it doesn't really matter but here you know i don't want to go be able to",
    "start": "3497200",
    "end": "3503599"
  },
  {
    "text": "go back to my super node okay but what i'm going to do is i'm",
    "start": "3503599",
    "end": "3509280"
  },
  {
    "text": "going to add a super node with edge weight say 0 to everything else",
    "start": "3509280",
    "end": "3514880"
  },
  {
    "text": "right and then if i ran dykstra from the super node",
    "start": "3514880",
    "end": "3521920"
  },
  {
    "text": "and found all vertices reachable within distance k well i didn't i didn't spend any of that distance",
    "start": "3521920",
    "end": "3528000"
  },
  {
    "text": "going through this first edge right and i didn't come back to s because these things are directed",
    "start": "3528000",
    "end": "3533920"
  },
  {
    "text": "into the things and so anything i reach is going to be within",
    "start": "3533920",
    "end": "3540079"
  },
  {
    "text": "distance k of this donut shop but for all donut shops and in some sense i'm doing this search",
    "start": "3540079",
    "end": "3545599"
  },
  {
    "text": "in parallel so this is the same trick that we had in the like you're looking through the",
    "start": "3545599",
    "end": "3552160"
  },
  {
    "text": "the sewer network or something and they're trying to avoid monitors or uh you know sensors",
    "start": "3552160",
    "end": "3558720"
  },
  {
    "text": "or something like that we actually did this transformation and then binary searched on the distance it was",
    "start": "3558720",
    "end": "3564640"
  },
  {
    "text": "kind of involved but this is an easier example now you can actually generalize this further what if each",
    "start": "3564640",
    "end": "3571520"
  },
  {
    "text": "donut shop had had us uh a like a",
    "start": "3571520",
    "end": "3579440"
  },
  {
    "text": "an amount that moamer liked it right so if uh momar is within a",
    "start": "3579440",
    "end": "3586160"
  },
  {
    "text": "larger distance of a donut shop he really likes he still won't be able to resist right but a donut shop that doesn't make",
    "start": "3586160",
    "end": "3593200"
  },
  {
    "text": "very good donuts you know he'll be able to resist a shorter distance without without having",
    "start": "3593200",
    "end": "3600079"
  },
  {
    "text": "to to uh go to that donut shop so in other words",
    "start": "3600079",
    "end": "3605119"
  },
  {
    "text": "each one of these donut shops has a different k right a different radius that momar will",
    "start": "3605119",
    "end": "3612839"
  },
  {
    "text": "allow is there any way to generalize this technique to be able to prune all of those",
    "start": "3612839",
    "end": "3619119"
  },
  {
    "text": "vertices instead ah all of these had weight zero before",
    "start": "3619119",
    "end": "3626480"
  },
  {
    "text": "the same weight i mean the algorithm would have worked for any weight i put on all of these edges",
    "start": "3626480",
    "end": "3632799"
  },
  {
    "text": "as long as i search the distance that weight plus k right here i can just make the distance",
    "start": "3632799",
    "end": "3640559"
  },
  {
    "text": "of this frontier for each one of the the donut shops the same",
    "start": "3640559",
    "end": "3646000"
  },
  {
    "text": "by modifying the distance to the of the incoming edge right so i can set the length",
    "start": "3646000",
    "end": "3652799"
  },
  {
    "text": "uh the disc the weight from the to the donut shop with the largest radius to zero",
    "start": "3652799",
    "end": "3661440"
  },
  {
    "text": "and then put the difference between the largest radius to all the other ones i put that as the weight on the other",
    "start": "3661440",
    "end": "3667920"
  },
  {
    "text": "edges and then we still have a graph with positive edge weights and i can run dijkstra from this and",
    "start": "3667920",
    "end": "3674400"
  },
  {
    "text": "that would generalize this problem and something that we've done in some practice exams and or in in exams",
    "start": "3674400",
    "end": "3680559"
  },
  {
    "text": "and problem sets in the past okay so that's another common way so we filter",
    "start": "3680559",
    "end": "3687119"
  },
  {
    "text": "filter uh forbidden",
    "start": "3687200",
    "end": "3692400"
  },
  {
    "text": "there's two b's in forbidden or two d's two d's there's a three ds",
    "start": "3693359",
    "end": "3700160"
  },
  {
    "text": "right vertices",
    "start": "3700160",
    "end": "3705119"
  },
  {
    "text": "by using",
    "start": "3705680",
    "end": "3709680"
  },
  {
    "text": "supernode plus one run of dijkstra",
    "start": "3711280",
    "end": "3727839"
  },
  {
    "text": "those are the extra letters okay so on your exam you would probably want to be a little",
    "start": "3728480",
    "end": "3733599"
  },
  {
    "text": "bit more explicit this is this is a summary of the things that we just talked about i just you know talked 10 minutes about the",
    "start": "3733599",
    "end": "3739839"
  },
  {
    "text": "algorithm but it doesn't hurt to add a summary at",
    "start": "3739839",
    "end": "3745440"
  },
  {
    "text": "the top of what you're going to write this is the approach that we're going to have we're going to filter out the vertices",
    "start": "3745440",
    "end": "3751119"
  },
  {
    "text": "from g essentially by running dijkstra from each of these",
    "start": "3751119",
    "end": "3756880"
  },
  {
    "text": "these donut chops but we're going to do it in parallel by adding the super node okay so actually on",
    "start": "3756880",
    "end": "3763760"
  },
  {
    "text": "another uh uh recommendation i have for you on an exam",
    "start": "3763760",
    "end": "3770319"
  },
  {
    "text": "is that almost any problem that we give you in this class",
    "start": "3770319",
    "end": "3774960"
  },
  {
    "text": "can get 80 to 90 of the points by writing like maybe three lines",
    "start": "3775760",
    "end": "3783599"
  },
  {
    "text": "right almost and maybe not some of the data structures problems but almost any question in this class",
    "start": "3783599",
    "end": "3790160"
  },
  {
    "text": "can like uh can be solved with not all of the the points but most",
    "start": "3790160",
    "end": "3796799"
  },
  {
    "text": "of the points by just writing a couple lines that we know that you know how to solve the",
    "start": "3796799",
    "end": "3802880"
  },
  {
    "text": "problem right and this this would be one of those situations",
    "start": "3802880",
    "end": "3809440"
  },
  {
    "text": "right now i would want to give you full points i would want all the details here",
    "start": "3809440",
    "end": "3815280"
  },
  {
    "text": "did i construct a new graph i add this vertex here i have to add edges to each of the d",
    "start": "3815280",
    "end": "3822079"
  },
  {
    "text": "things but i've only added d more edges and one more vertex so it still has this",
    "start": "3822079",
    "end": "3828000"
  },
  {
    "text": "linear size in my input right and then i want to say that i'm you know",
    "start": "3828000",
    "end": "3833520"
  },
  {
    "text": "putting the weights on here based on what the distance is now they're all the same weight because i don't have that",
    "start": "3833520",
    "end": "3838559"
  },
  {
    "text": "generalization and then i run this thing and i remove all those graphs",
    "start": "3838559",
    "end": "3843599"
  },
  {
    "text": "and construct a new graph from g right that's a third graph that i'm constructing now",
    "start": "3843599",
    "end": "3848720"
  },
  {
    "text": "but notice that the graph that was implicit in my problem was very different than the graph that",
    "start": "3848720",
    "end": "3854720"
  },
  {
    "text": "i'm ultimately running a shortest path algorithm like dijkstra from p to c if one a path",
    "start": "3854720",
    "end": "3860559"
  },
  {
    "text": "exists does that make sense any questions on this problem all right we've got 20 minutes for my",
    "start": "3860559",
    "end": "3867680"
  },
  {
    "text": "last problem uh man i'm not using i write much less than some of your",
    "start": "3867680",
    "end": "3874240"
  },
  {
    "text": "other instructors so i like to talk more than i",
    "start": "3874240",
    "end": "3880160"
  },
  {
    "text": "to write apparently okay so problem",
    "start": "3880160",
    "end": "3885838"
  },
  {
    "text": "four let's take a look at this this one's one i made up last night",
    "start": "3886720",
    "end": "3891839"
  },
  {
    "text": "kind of fun long shortest paths okay given a directed graph having",
    "start": "3891839",
    "end": "3898400"
  },
  {
    "text": "arbitrary edge weights basically these could be positive or negative or zero and two vertices from the graph describe",
    "start": "3898400",
    "end": "3905920"
  },
  {
    "text": "a v cubed time algorithm to find the minimum weight of any path from s to t",
    "start": "3905920",
    "end": "3911920"
  },
  {
    "text": "okay that sounds like bellman ford right there but i have this last condition",
    "start": "3911920",
    "end": "3916960"
  },
  {
    "text": "and the last condition is a little weird containing at least the edges",
    "start": "3916960",
    "end": "3925119"
  },
  {
    "text": "so i want a short path in terms of weight",
    "start": "3925119",
    "end": "3930160"
  },
  {
    "text": "but i want a long path in some sense in terms of the number of edges i traverse",
    "start": "3930160",
    "end": "3937839"
  },
  {
    "text": "does that make sense so of all paths having at least the edges i want a shortest one among",
    "start": "3938319",
    "end": "3946000"
  },
  {
    "text": "them in terms of weight this is a weird freaking problem right usually we're not trying to do",
    "start": "3946000",
    "end": "3952079"
  },
  {
    "text": "this max min kind of thing we've got two different quantities here we're trying to optimize",
    "start": "3952079",
    "end": "3958880"
  },
  {
    "text": "anyone have any ideas on how i could approach this problem what does this sound what does the at",
    "start": "3959200",
    "end": "3965839"
  },
  {
    "text": "least v edges sound kind of similar to that we might talked about in lecture",
    "start": "3965839",
    "end": "3971760"
  },
  {
    "text": "uh so uh when we were talking about min ford we defined this thing called a",
    "start": "3971760",
    "end": "3977920"
  },
  {
    "text": "k edge weight right is the weight of any path using at most",
    "start": "3977920",
    "end": "3983359"
  },
  {
    "text": "k edges this kind of edge constraint seems similar except it's kind of the",
    "start": "3983359",
    "end": "3989920"
  },
  {
    "text": "reverse it's not at least it's a mo it's a it's not at most it's at least",
    "start": "3989920",
    "end": "3996079"
  },
  {
    "text": "right well here's an observation i have for",
    "start": "3996079",
    "end": "4002480"
  },
  {
    "text": "you if i want a a path that goes through at least the edges some prefix of that pass",
    "start": "4002480",
    "end": "4011200"
  },
  {
    "text": "path uses exactly the edges right that makes sense right so maybe it",
    "start": "4011200",
    "end": "4018000"
  },
  {
    "text": "makes sense for me to maybe it might make this problem easier",
    "start": "4018000",
    "end": "4024079"
  },
  {
    "text": "if it's not at least the edges but if it's exactly the edges maybe i think about it that way that",
    "start": "4024079",
    "end": "4030000"
  },
  {
    "text": "that seemed a reasonable other way to think about this problem i knew how to do",
    "start": "4030000",
    "end": "4035280"
  },
  {
    "text": "up to a certain set of edges here we're asking for at most",
    "start": "4035280",
    "end": "4042480"
  },
  {
    "text": "maybe the thing in between is a little easier to think about",
    "start": "4042480",
    "end": "4048160"
  },
  {
    "text": "okay so what we're doing we're given a graph g it has any",
    "start": "4048160",
    "end": "4057039"
  },
  {
    "text": "weights it's possible that this graph has e",
    "start": "4057039",
    "end": "4065359"
  },
  {
    "text": "lower bounded by a quadratic in the vertices right i have no restrictions on how many edges this thing could be and",
    "start": "4065359",
    "end": "4072240"
  },
  {
    "text": "so the worst thing i could have is that this thing i mean my graphs are simple the worst thing i could do is have this",
    "start": "4072240",
    "end": "4078720"
  },
  {
    "text": "be quadratic in the number of edges say if it's the complete graph that's the maximum number",
    "start": "4078720",
    "end": "4084000"
  },
  {
    "text": "of edges that i could have and i'm trying to find in my graph",
    "start": "4084000",
    "end": "4091440"
  },
  {
    "text": "a path that uses a lot of vertices but has small weight now what's another",
    "start": "4091440",
    "end": "4098400"
  },
  {
    "text": "thing to notice here is if i use at least v edges can my path be simple",
    "start": "4098400",
    "end": "4105679"
  },
  {
    "text": "no right because i need to use at least v plus one vertices",
    "start": "4105679",
    "end": "4110880"
  },
  {
    "text": "and there are that's more than the vertices i have in the graph obviously right now it could go through",
    "start": "4110880",
    "end": "4116400"
  },
  {
    "text": "vertices more than once but it's definitely not going to be a simple path okay",
    "start": "4116400",
    "end": "4122560"
  },
  {
    "text": "so what's one thing like here's what if there's a negative weight cycle in my graph",
    "start": "4124880",
    "end": "4133679"
  },
  {
    "text": "what's the minimum weight of any path from s to t if the negative weight cycle is",
    "start": "4133679",
    "end": "4139199"
  },
  {
    "text": "reachable from s reachable on a path from s to t what is",
    "start": "4139199",
    "end": "4144318"
  },
  {
    "text": "the answer to my problem then negative infinity right because certainly",
    "start": "4144319",
    "end": "4150159"
  },
  {
    "text": "an infinite length path is going to use an infinite number of edges",
    "start": "4150159",
    "end": "4155278"
  },
  {
    "text": "right if it's going arbitrarily long that's i then i can just run bellman",
    "start": "4155279",
    "end": "4161278"
  },
  {
    "text": "ford right so that's one thing i can do i can just run bellman ford on this graph i have enough time to do that because",
    "start": "4161279",
    "end": "4167359"
  },
  {
    "text": "e is upper bounded by v squared and i have v cube time and if there's a negative weight cycle",
    "start": "4167359",
    "end": "4173679"
  },
  {
    "text": "in my graph i can know that the minimum weight of any path is minus infinity",
    "start": "4173679",
    "end": "4179278"
  },
  {
    "text": "i detect that that's the case if if if basically t is reachable from s with a minimum",
    "start": "4179279",
    "end": "4185120"
  },
  {
    "text": "shortest path distance minus infinity that the path that achieves that is going to have more than",
    "start": "4185120",
    "end": "4190880"
  },
  {
    "text": "v edges so you know i'm done and that no path actually achieves that but you know that's the in the in fema",
    "start": "4190880",
    "end": "4198880"
  },
  {
    "text": "yeah supremum supreme or infimum sorry we're going lower bound i'm thinking of long paths though so the",
    "start": "4198880",
    "end": "4205600"
  },
  {
    "text": "number of edges is approaching infinity okay but in the context where i don't",
    "start": "4205600",
    "end": "4212239"
  },
  {
    "text": "have negative weight cycles actually one of the things we showed was that if you're",
    "start": "4212239",
    "end": "4220400"
  },
  {
    "text": "reachable not through a negative weight cycle or if no negative weight cycle is traversable from s to t then my shortest",
    "start": "4220400",
    "end": "4227440"
  },
  {
    "text": "path is going to be simple but that doesn't seem to apply",
    "start": "4227440",
    "end": "4233440"
  },
  {
    "text": "here either because we need to have a non-simple path so what do we do",
    "start": "4233440",
    "end": "4240320"
  },
  {
    "text": "so let's go back to this idea of trying to figure out the minimum weight of any path using exactly the edges can we use some",
    "start": "4243040",
    "end": "4251120"
  },
  {
    "text": "of the tricks that we had in bellman ford when we're keeping track of the number of edges we're going through at a given",
    "start": "4251120",
    "end": "4256840"
  },
  {
    "text": "time that's the idea right",
    "start": "4256840",
    "end": "4262159"
  },
  {
    "text": "if we have a vertex if we have a new vertex for each vertex",
    "start": "4262159",
    "end": "4268640"
  },
  {
    "text": "different versions of it that talk about exactly how many edges i went through then maybe",
    "start": "4268640",
    "end": "4274719"
  },
  {
    "text": "i could keep track of this while i'm i'm working on this graph right so so let's say i have multiple",
    "start": "4274719",
    "end": "4280800"
  },
  {
    "text": "layers of the graph this is the idea maybe we start at level level 0",
    "start": "4280800",
    "end": "4289280"
  },
  {
    "text": "down here to level how many edges do i want i want v plus 1 vertices so i'm going to have v",
    "start": "4289280",
    "end": "4297920"
  },
  {
    "text": "plus 1 levels which is v right so a level here",
    "start": "4297920",
    "end": "4304158"
  },
  {
    "text": "v how many levels are there there's v plus the zero yeah and so there i'm going to have",
    "start": "4304880",
    "end": "4311280"
  },
  {
    "text": "for every edge in my graph i'm going to take",
    "start": "4311280",
    "end": "4316880"
  },
  {
    "text": "it so this is a directed graph right so i direct it down into the next level for each",
    "start": "4316880",
    "end": "4325040"
  },
  {
    "text": "version of this graph that i have i take that edge that was originally",
    "start": "4325440",
    "end": "4331600"
  },
  {
    "text": "between u and v here in the graph right it was originally here in g but here i've pointed all of",
    "start": "4331600",
    "end": "4340400"
  },
  {
    "text": "those edges downward okay isn't that what we did in bowman",
    "start": "4340400",
    "end": "4346239"
  },
  {
    "text": "ford we made one other addition in bellman ford to make it be the at most",
    "start": "4346239",
    "end": "4354080"
  },
  {
    "text": "property right what was that transformation we did we had zero eight edges going from each",
    "start": "4354080",
    "end": "4360960"
  },
  {
    "text": "vertex to another right it meant that we didn't have to traverse an edge right but here if we don't add those",
    "start": "4360960",
    "end": "4367280"
  },
  {
    "text": "edges actually this transformation gives us that any path that goes through v edges",
    "start": "4367280",
    "end": "4374239"
  },
  {
    "text": "will be some path from a vertex in layer 0 to a vertex in layer v",
    "start": "4374239",
    "end": "4381120"
  },
  {
    "text": "right just because to get down here i had to traverse exactly the edges and they're the edges",
    "start": "4381120",
    "end": "4386960"
  },
  {
    "text": "of my original graph now notice this encodes non-simple paths as well right because",
    "start": "4386960",
    "end": "4395199"
  },
  {
    "text": "these non these things could go i could go here and back to you and back to v and back to you if i had a cycle in my",
    "start": "4395199",
    "end": "4402159"
  },
  {
    "text": "graph but right actually what kind of graph is",
    "start": "4402159",
    "end": "4409120"
  },
  {
    "text": "this this is a dac right so this is dag",
    "start": "4409120",
    "end": "4416800"
  },
  {
    "text": "uh maybe i call this g prime how many vertices are in g prime",
    "start": "4417199",
    "end": "4427520"
  },
  {
    "text": "v times v plus 1 right so i'm going to say order v squared and how many edges are on my",
    "start": "4427520",
    "end": "4438000"
  },
  {
    "text": "graph v times e right i i copied every edge made it directed down between",
    "start": "4438840",
    "end": "4445760"
  },
  {
    "text": "each level there are v transitions between levels and i copy each edge",
    "start": "4445760",
    "end": "4451120"
  },
  {
    "text": "for each of those so the number of edges is order v times e",
    "start": "4451120",
    "end": "4458320"
  },
  {
    "text": "okay so this graph is blown up there's a lot of things in this graph",
    "start": "4458320",
    "end": "4465120"
  },
  {
    "text": "but i notice that you know this graph has size order v cubed is what we're going for",
    "start": "4465120",
    "end": "4474080"
  },
  {
    "text": "so i can afford to construct this graph since v is actually also",
    "start": "4474080",
    "end": "4481760"
  },
  {
    "text": "upper bounded by v squared by simplicity right okay so we have this graph",
    "start": "4481760",
    "end": "4488960"
  },
  {
    "text": "we could find our our vertex s here as 0 up here",
    "start": "4488960",
    "end": "4496239"
  },
  {
    "text": "and we could afford to compute the shortest path distance to all other vertices using",
    "start": "4496239",
    "end": "4503440"
  },
  {
    "text": "exactly the edges in my graph exactly right",
    "start": "4503440",
    "end": "4510800"
  },
  {
    "text": "that's what we could do i can find everything reachable from s",
    "start": "4510800",
    "end": "4517040"
  },
  {
    "text": "0 in this graph and calculate the shortest path down here at the bottom so i can do that",
    "start": "4517040",
    "end": "4524719"
  },
  {
    "text": "in v cube time because dag relaxation is linear in the size of the graph",
    "start": "4524719",
    "end": "4530880"
  },
  {
    "text": "but that's not what the problem's asking me unfortunately right uh in particular i could find the",
    "start": "4530880",
    "end": "4537120"
  },
  {
    "text": "path to t to t v and that would give me",
    "start": "4537120",
    "end": "4542239"
  },
  {
    "text": "the shortest path using exactly the edges but that's not what i'm asking for i'm asking for at least",
    "start": "4542239",
    "end": "4550960"
  },
  {
    "text": "so it's possible that i get down here to some other vertex and maybe there's a negative weight path",
    "start": "4550960",
    "end": "4558800"
  },
  {
    "text": "going to t and i want to be able to find that",
    "start": "4558800",
    "end": "4563440"
  },
  {
    "text": "so how can i do that how can i allow paths to continue past this",
    "start": "4564640",
    "end": "4570880"
  },
  {
    "text": "an arbitrary amount i could have more layers right right",
    "start": "4571679",
    "end": "4577679"
  },
  {
    "text": "actually simple paths uh from any ver i mean shortest paths that are",
    "start": "4577679",
    "end": "4584719"
  },
  {
    "text": "simple right that use fewer edges right here here i'm not restricted on the number of",
    "start": "4584719",
    "end": "4590080"
  },
  {
    "text": "edges i use right so shortest paths in this graph are going to be simple because there's",
    "start": "4590080",
    "end": "4596080"
  },
  {
    "text": "no negative i've already i can already like throw away the case where i have negative cycles because i ran bellman",
    "start": "4596080",
    "end": "4601440"
  },
  {
    "text": "ford at the beginning right i can uh i so i know that i'm going to want",
    "start": "4601440",
    "end": "4609840"
  },
  {
    "text": "a short pat a simple path after i've reached the edges",
    "start": "4609840",
    "end": "4617840"
  },
  {
    "text": "because it's never going to be beneficial to me to come back to a vertex because that will",
    "start": "4617840",
    "end": "4624400"
  },
  {
    "text": "be a path of longer weight right this is the the kind of surgery argument we had both in unweighted and weighted context",
    "start": "4624400",
    "end": "4632159"
  },
  {
    "text": "okay so these are going to be simple so i know that i only have to go v more layers",
    "start": "4632159",
    "end": "4639520"
  },
  {
    "text": "at most okay so that's one way to look at it i could add more layers of this thing find the shortest path distance to all",
    "start": "4639520",
    "end": "4647520"
  },
  {
    "text": "vertices using uh up to two v edges right maybe even",
    "start": "4647520",
    "end": "4655760"
  },
  {
    "text": "two v minus one but order v and then for all of the ones down below",
    "start": "4655760",
    "end": "4662159"
  },
  {
    "text": "here i just look at each vertex and see which weight is the minimum",
    "start": "4662159",
    "end": "4667199"
  },
  {
    "text": "right another way the way i like to look at it",
    "start": "4667199",
    "end": "4672320"
  },
  {
    "text": "which is a little bit more fun i think is once i'm down here i'm just trying to find simple paths in",
    "start": "4672320",
    "end": "4679360"
  },
  {
    "text": "the graph from this vertex v right",
    "start": "4679360",
    "end": "4684560"
  },
  {
    "text": "to this vertex v right so one of the so actually um add these",
    "start": "4684560",
    "end": "4692000"
  },
  {
    "text": "go up",
    "start": "4692000",
    "end": "4694640"
  },
  {
    "text": "so actually on this bottom layer right i want to find ver uh",
    "start": "4697199",
    "end": "4704320"
  },
  {
    "text": "short paths to t from actually every vertex right and i actually know",
    "start": "4704320",
    "end": "4711600"
  },
  {
    "text": "what the short just from from what i did up here dag relaxation on this graph",
    "start": "4711600",
    "end": "4716800"
  },
  {
    "text": "i knew what the shortest path distance was from s0 to each of these vertices because i did",
    "start": "4716800",
    "end": "4722960"
  },
  {
    "text": "that in v cube time up here with dag relaxation so i could add a super node to this thing with a",
    "start": "4722960",
    "end": "4728719"
  },
  {
    "text": "directed edge to each vertex with the shortest with weighted by the shortest",
    "start": "4728719",
    "end": "4735520"
  },
  {
    "text": "path distance i found up above now i have a graph where any",
    "start": "4735520",
    "end": "4742960"
  },
  {
    "text": "path from s0 to v to t v here",
    "start": "4742960",
    "end": "4749360"
  },
  {
    "text": "will be a path that uses at least the edges in my original graph right",
    "start": "4749360",
    "end": "4755679"
  },
  {
    "text": "because these represent the shortest path weights of anything using exactly the edges",
    "start": "4755679",
    "end": "4762320"
  },
  {
    "text": "and then the path can continue in the original graph right so now i have a new graph here",
    "start": "4762320",
    "end": "4770239"
  },
  {
    "text": "such that every path from here to there corresponds to a path that i'm looking for",
    "start": "4770239",
    "end": "4776080"
  },
  {
    "text": "so i want to find a minimum weight path in this graph how can i do that now this graph might have negative",
    "start": "4776080",
    "end": "4781280"
  },
  {
    "text": "negative weights i can run this with bellman ford",
    "start": "4781280",
    "end": "4788000"
  },
  {
    "text": "fellman ford i can do that again sure why not",
    "start": "4788840",
    "end": "4794640"
  },
  {
    "text": "now jason why couldn't we just add a bunch of edges here right",
    "start": "4794880",
    "end": "4801600"
  },
  {
    "text": "at our original edges here in the bottom layer of this graph and run bellman ford on this entire graph why couldn't i do that",
    "start": "4801600",
    "end": "4810239"
  },
  {
    "text": "it's too big right the number of vertices is v squared the number of edges is v",
    "start": "4810400",
    "end": "4815520"
  },
  {
    "text": "potentially v cubed running bellman ford on that huge duplicated graph would give me a v to the fifth running",
    "start": "4815520",
    "end": "4822400"
  },
  {
    "text": "time which is awful right in a sense we're separating out the complexity the upper part of the graph has very",
    "start": "4822400",
    "end": "4828880"
  },
  {
    "text": "nice dag structure so let's do shortest paths in that dag structure and then reduce that complexity down",
    "start": "4828880",
    "end": "4837120"
  },
  {
    "text": "to just being the thing that has the cycles that we are are worried about that reduce the",
    "start": "4837120",
    "end": "4842960"
  },
  {
    "text": "complexity down here so how big is this graph this graph has you know uh v plus",
    "start": "4842960",
    "end": "4850800"
  },
  {
    "text": "one vertices right because i only added one super node here and it has e plus",
    "start": "4850800",
    "end": "4858639"
  },
  {
    "text": "you know order v edges i don't want to be careful here but it's this is linear in the size of",
    "start": "4858639",
    "end": "4864719"
  },
  {
    "text": "the original graph so running bellman ford here only takes v times e time which is v cubed so that's two different",
    "start": "4864719",
    "end": "4872840"
  },
  {
    "text": "ways how to solve this problem one using a bunch of graph duplication",
    "start": "4872840",
    "end": "4877920"
  },
  {
    "text": "and having the the insights that going at most the more steps of this graph duplication",
    "start": "4877920",
    "end": "4886960"
  },
  {
    "text": "could never get a better thing so i can stop or recognizing that well i have this",
    "start": "4886960",
    "end": "4893120"
  },
  {
    "text": "very powerful algorithm here that can find shortest paths simple paths in a graph without negative weight",
    "start": "4893120",
    "end": "4899120"
  },
  {
    "text": "cycles and i can use this super note to transfer",
    "start": "4899120",
    "end": "4904159"
  },
  {
    "text": "a part of my graph with a lot of nice structure down to this other graph okay",
    "start": "4904159",
    "end": "4910480"
  },
  {
    "text": "any questions about this problem so these are some we got two abstract problems for you two",
    "start": "4910480",
    "end": "4916480"
  },
  {
    "text": "word problems for you uh with a lot of different transformations and a lot of different",
    "start": "4916480",
    "end": "4922239"
  },
  {
    "text": "tricks of your trade uh any of these would be a uh",
    "start": "4922239",
    "end": "4929840"
  },
  {
    "text": "something that is either appeared on an exam or is at a level of something that could appear on your exam uh so go ahead and take a look at the",
    "start": "4929840",
    "end": "4936800"
  },
  {
    "text": "practice material that we've posted and are accessible from previous years uh websites",
    "start": "4936800",
    "end": "4942960"
  },
  {
    "text": "and wish you luck in working on graph problems on your exam",
    "start": "4942960",
    "end": "4956320"
  }
]