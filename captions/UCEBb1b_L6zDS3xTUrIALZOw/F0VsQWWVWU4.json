[
  {
    "text": " OK, good morning.\nSo today, we're going to continue our exploration of\nmultithreaded algorithms.",
    "start": "7000",
    "end": "16000"
  },
  {
    "text": "Last time we talked about some\naspects of scheduling, and a little bit about\nlinguistics to describe a",
    "start": "16000",
    "end": "26000"
  },
  {
    "text": "multithreaded competition.\nAnd today, we're going to actually deal with some\nalgorithms.",
    "start": "26000",
    "end": "32000"
  },
  {
    "start": "32000",
    "end": "47000"
  },
  {
    "text": "So, we're going to start out\nwith a really simple, actually, what's fun about\nthis, actually,",
    "start": "47000",
    "end": "53000"
  },
  {
    "text": "is that everything I'm going to\nteach you today I could have taught you in week two,\nOK, because basically it's just",
    "start": "53000",
    "end": "61000"
  },
  {
    "text": "taking the divide and conquer\nhammer, and just smashing problem after problem with it.\nOK, and so, actually next",
    "start": "61000",
    "end": "70000"
  },
  {
    "text": "week's lectures on caching,\nalso very similar. So, everybody should bone up on\ntheir master theorem and",
    "start": "70000",
    "end": "78000"
  },
  {
    "text": "substitution methods for\noccurrences, and so forth because that's our going to be\ndoing.",
    "start": "78000",
    "end": "85000"
  },
  {
    "text": "And of course,\nall the stuff will be on the final.\nSo let's start with matrix",
    "start": "85000",
    "end": "91000"
  },
  {
    "text": "multiplication. ",
    "start": "91000",
    "end": "100000"
  },
  {
    "text": "And we'll do n by n.\nSo, our problem is to do C equals A times B.\nAnd the way we'll do that is",
    "start": "100000",
    "end": "110000"
  },
  {
    "text": "using divide and conquer,\nas we saw before, although we're not going to use\nStrassen's method.",
    "start": "110000",
    "end": "122000"
  },
  {
    "text": "OK, we'll just use the ordinary\nthing, and I'll leave Strassen's",
    "start": "122000",
    "end": "128000"
  },
  {
    "text": "as an exercise.\nSo, the idea is we're going to look at matrix multiplication in\nterms of an n by n matrix,",
    "start": "128000",
    "end": "138000"
  },
  {
    "text": "in terms of n over 2 by n over\n2 matrices. So, I partition C into four\nblocks, and likewise with A and",
    "start": "138000",
    "end": "148000"
  },
  {
    "text": "B. ",
    "start": "148000",
    "end": "170000"
  },
  {
    "text": "OK, and we multiply those out,\nand that gives us the",
    "start": "170000",
    "end": "178000"
  },
  {
    "text": "following.\nMake sure I get all my indices right.",
    "start": "178000",
    "end": "184000"
  },
  {
    "start": "184000",
    "end": "220000"
  },
  {
    "text": "OK, so it gives us the sum of\nthese two n by n matrices. OK, so for example,\nif I multiply the first row by",
    "start": "220000",
    "end": "229000"
  },
  {
    "text": "the first column,\nI'm putting the first term, A_1-1 times B_1-1 in this\nmatrix, in the second one,",
    "start": "229000",
    "end": "238000"
  },
  {
    "text": "A_1-2 times B_2-1 gets placed\nhere. So, when I sum them,\nand so forth,",
    "start": "238000",
    "end": "246000"
  },
  {
    "text": "for the other entries,\nand when I sum them, I'm going to get my result.\nSo, we can write that out as a,",
    "start": "246000",
    "end": "256000"
  },
  {
    "text": "let's see, I'm not sure this is\ngoing to all fit on one board,",
    "start": "256000",
    "end": "262000"
  },
  {
    "text": "but we'll see we can do.\nOK, so we can write that out as",
    "start": "262000",
    "end": "268000"
  },
  {
    "text": "a multithreaded program.\nSo this, we're going to see",
    "start": "268000",
    "end": "275000"
  },
  {
    "text": "that n is an exact power of two\nfor simplicity.",
    "start": "275000",
    "end": "281000"
  },
  {
    "text": "And since we're going to have\ntwo matrices that we have to",
    "start": "281000",
    "end": "289000"
  },
  {
    "text": "add, we're going to basically\nput one of them in our output,",
    "start": "289000",
    "end": "297000"
  },
  {
    "text": "C; that'll be the first one,\nand we're going to use a",
    "start": "297000",
    "end": "304000"
  },
  {
    "text": "temporary matrix,\nT, which is also n by n.",
    "start": "304000",
    "end": "311000"
  },
  {
    "text": "OK, and the code looks\nsomething like this,",
    "start": "311000",
    "end": "321000"
  },
  {
    "text": "OK, n equals one,\nand C of one gets A of 1-1",
    "start": "321000",
    "end": "332000"
  },
  {
    "text": "times B of 1-1.\nOtherwise, what we do then is",
    "start": "332000",
    "end": "341000"
  },
  {
    "text": "we partition the matrices.\nOK, so we partition them into",
    "start": "341000",
    "end": "349000"
  },
  {
    "text": "the block.\nSo, how long does it take me to",
    "start": "349000",
    "end": "355000"
  },
  {
    "text": "partition at matrix into blocks\nif I'm clever at my programming?",
    "start": "355000",
    "end": "365000"
  },
  {
    "text": "Yeah?\nNo time, or it actually does take a little bit of time.\nYeah, order one, basically, OK,\nbecause all it is is just index",
    "start": "365000",
    "end": "373000"
  },
  {
    "text": "calculations.\nYou have to change what the index is.\nYou have to pass in what you're passing these in addition to A,\nB, and C for example,",
    "start": "373000",
    "end": "382000"
  },
  {
    "text": "pass and arrange which would\nhave essentially a constant overhead.\nBut it's basically order one",
    "start": "382000",
    "end": "388000"
  },
  {
    "text": "time. ",
    "start": "388000",
    "end": "396000"
  },
  {
    "text": "Basically order one time,\nOK, to partition the matrices because all we are doing is\nindex calculations.",
    "start": "396000",
    "end": "403000"
  },
  {
    "text": "And all we have to do is just\nas we go through, is just make sure we keep track\nof the indices,",
    "start": "403000",
    "end": "410000"
  },
  {
    "text": "OK?\nAny questions about that? People follow?\nOK, that's sort of standard programming.\nSo then, what I do is I spawn",
    "start": "410000",
    "end": "425000"
  },
  {
    "text": "multiplication of,\nwoops, the sub-matrices,",
    "start": "425000",
    "end": "437000"
  },
  {
    "text": "and spawn -- ",
    "start": "437000",
    "end": "456000"
  },
  {
    "text": "-- and continue,\nC_2-1, gets A_2-1,",
    "start": "456000",
    "end": "463000"
  },
  {
    "text": "B_1-1, two, and let's see,\n2-2, yeah, it's 2-1.",
    "start": "463000",
    "end": "473000"
  },
  {
    "text": "OK, and continuing onto the\nnext page.",
    "start": "473000",
    "end": "482000"
  },
  {
    "text": "Let me just make sure I somehow\nget the indentation right.",
    "start": "482000",
    "end": "490000"
  },
  {
    "text": "This is my level of\nindentation, and I'm continuing",
    "start": "490000",
    "end": "498000"
  },
  {
    "text": "right along.\nAnd now what I do is put the",
    "start": "498000",
    "end": "505000"
  },
  {
    "text": "results in T,\nand then -- ",
    "start": "505000",
    "end": "538000"
  },
  {
    "text": "OK, so I've spawn off all these\nmultiplications. So that means when I spawn,\nI get to, after I spawn",
    "start": "538000",
    "end": "546000"
  },
  {
    "text": "something I can go onto the next\nstatement, and execute that even as this is executing.\nOK, so that's our notion of",
    "start": "546000",
    "end": "555000"
  },
  {
    "text": "multithreaded programming.\nI spawn off these eight things. What do I do next?\nWhat's the next step in this",
    "start": "555000",
    "end": "564000"
  },
  {
    "text": "code?\nSync. Yeah.\nOK, I've got to wait for them to be done before I can use\ntheir results.",
    "start": "564000",
    "end": "573000"
  },
  {
    "text": "OK, so I put a sync in,\nsay wait for all those things I spawned off to be done,\nand then what?",
    "start": "573000",
    "end": "582000"
  },
  {
    "start": "582000",
    "end": "588000"
  },
  {
    "text": "Yeah.\nThat you have to add T and C. So let's do that with a\nsubroutine call.",
    "start": "588000",
    "end": "595000"
  },
  {
    "text": "OK, and then we are done.\nWe do a return at the end.",
    "start": "595000",
    "end": "602000"
  },
  {
    "text": "OK, so let's write the code for\nadd, because add,",
    "start": "602000",
    "end": "608000"
  },
  {
    "text": "we also would like to do in\nparallel if we can.",
    "start": "608000",
    "end": "614000"
  },
  {
    "text": "And what we are doing here is\ndoing C gets C plus T,",
    "start": "614000",
    "end": "621000"
  },
  {
    "text": "OK?\nSo, we're going to add T into C.\nSo, we have some code here to",
    "start": "621000",
    "end": "629000"
  },
  {
    "text": "do our base case,\nand partitioning because we're",
    "start": "629000",
    "end": "635000"
  },
  {
    "text": "going to do it divide and\nconquer as before.",
    "start": "635000",
    "end": "643000"
  },
  {
    "text": "And this one's actually a lot\neasier.",
    "start": "643000",
    "end": "649000"
  },
  {
    "text": "We just spawn,\nadd a C_1-1, T_1-1, n over 2,\nC_1-2, T_1-2,",
    "start": "649000",
    "end": "660000"
  },
  {
    "text": "n over 2, C_2-1,\nT_2-1, n over 2,",
    "start": "660000",
    "end": "666000"
  },
  {
    "text": "C_2-2, 2-2-2,\nn over 2, and then sync,",
    "start": "666000",
    "end": "673000"
  },
  {
    "text": "and return the result.\nOK, so all we're doing here is",
    "start": "673000",
    "end": "681000"
  },
  {
    "text": "just dividing it into four\npieces, spawning them off. That's it.\nOK, wait until they're all",
    "start": "681000",
    "end": "690000"
  },
  {
    "text": "done, then we return with the\nresult. OK, so any questions about how\nthis code works?",
    "start": "690000",
    "end": "696000"
  },
  {
    "text": "So, remember that,\nhere, we're going to have a scheduler underneath which is\nscheduling this onto our",
    "start": "696000",
    "end": "703000"
  },
  {
    "text": "processors.\nAnd we're going to have to worry about how well that\nscheduler is doing.",
    "start": "703000",
    "end": "710000"
  },
  {
    "text": "And, from last time,\nwe learned that there were two important measures,\nOK, that can be used",
    "start": "710000",
    "end": "716000"
  },
  {
    "text": "essentially to predict the\nperformance on any number of processors.\nAnd what are those two",
    "start": "716000",
    "end": "723000"
  },
  {
    "text": "measures?\nYeah, T_1 and T infinity so that we had some names.\nT_1 is the work,",
    "start": "723000",
    "end": "732000"
  },
  {
    "text": "good, and T infinity is\ncritical path length, good.\nSo, you have to work in the",
    "start": "732000",
    "end": "739000"
  },
  {
    "text": "critical path length.\nIf we know the work in the critical path length,\nwe can do things like say what",
    "start": "739000",
    "end": "748000"
  },
  {
    "text": "the parallelism is of our\nprogram, and from that, understand how many processors\nit makes sense to run this",
    "start": "748000",
    "end": "758000"
  },
  {
    "text": "program on.\nOK, so let's do that analysis.",
    "start": "758000",
    "end": "767000"
  },
  {
    "text": "OK, so let's let M_P of n be\nthe p processor execution time",
    "start": "767000",
    "end": "779000"
  },
  {
    "text": "for our mult code,\nand A_P of n be the same thing",
    "start": "779000",
    "end": "789000"
  },
  {
    "text": "for our matrix addition code.\nSo, the first thing we're going",
    "start": "789000",
    "end": "799000"
  },
  {
    "text": "to analyze is work.\nAnd, what do we hope our answer to our work is?\nWhat we analyze work,",
    "start": "799000",
    "end": "806000"
  },
  {
    "text": "what do we hope it's going to\nbe? ",
    "start": "806000",
    "end": "819000"
  },
  {
    "text": "Well, we hope it's going to be\nsmall. I'll grant you that.\nWhat could we benchmark it",
    "start": "819000",
    "end": "825000"
  },
  {
    "text": "against?\nYeah, if we wrote just something that didn't used to\nhave any parallelism.",
    "start": "825000",
    "end": "832000"
  },
  {
    "text": "We'd like our parallel code\nwhen run on one processor to be just as fast as our serial code,\nthe normal code that we would",
    "start": "832000",
    "end": "842000"
  },
  {
    "text": "use to write to do this problem.\nThat's generally the way that",
    "start": "842000",
    "end": "848000"
  },
  {
    "text": "we would like these things to\noperate, OK? So, what is that for matrix\nmultiplication in the naÔve way?",
    "start": "848000",
    "end": "856000"
  },
  {
    "text": "Yeah, it's n^3.\nOf course, we use Strassen's algorithm, or one of the other,\nfaster algorithms beat n^3.",
    "start": "856000",
    "end": "864000"
  },
  {
    "text": "But, for this problem,\nwe are just going to focus on n^3.\nI'm going to let you do the",
    "start": "864000",
    "end": "872000"
  },
  {
    "text": "Strassen as an exercise.\nSo, let's analyze the work. OK, since we have a subroutine\nfor add that we are using in the",
    "start": "872000",
    "end": "883000"
  },
  {
    "text": "multiply code,\nOK, we start by analyzing the add.\nSo, we have A_1 of n,",
    "start": "883000",
    "end": "889000"
  },
  {
    "text": "OK, is, well,\ncan somebody give me a recurrence here?\nWhat's the recurrence for",
    "start": "889000",
    "end": "896000"
  },
  {
    "text": "understanding the running time\nof this code?",
    "start": "896000",
    "end": "902000"
  },
  {
    "start": "902000",
    "end": "910000"
  },
  {
    "text": "OK, this is basically week two.\nThis is lecture one actually.",
    "start": "910000",
    "end": "916000"
  },
  {
    "text": "This is like lecture two or,\nat worst, lecture three.",
    "start": "916000",
    "end": "922000"
  },
  {
    "text": "Well, A of 1 of n. ",
    "start": "922000",
    "end": "934000"
  },
  {
    "text": "Plus order one,\nright. OK, that's right.\nSo, we have four problems of size n over 2 that we are\nsolving.",
    "start": "934000",
    "end": "941000"
  },
  {
    "text": "OK, so to see this,\nyou don't even have to know that we are doing this in\nparallel, because the work is",
    "start": "941000",
    "end": "949000"
  },
  {
    "text": "basically what would happen if\nit executed on a serial machine. So, we have four problems of\nsize n over 2 plus order one is",
    "start": "949000",
    "end": "959000"
  },
  {
    "text": "the total work.\nAny questions about how I got",
    "start": "959000",
    "end": "965000"
  },
  {
    "text": "that recurrence?\nIs that pretty straightforward? If not, let me know.\nOK, and so, what's the solution",
    "start": "965000",
    "end": "975000"
  },
  {
    "text": "to this recurrence?\nYeah, order n^2. How do we know that?\nYeah, master method,",
    "start": "975000",
    "end": "983000"
  },
  {
    "text": "so n to the log base two of\nfour, right, is n^2.",
    "start": "983000",
    "end": "990000"
  },
  {
    "text": "Compare that with order one.\nThis dramatically dominates. So this is the answer,\nthe n to the log base two of",
    "start": "990000",
    "end": "997000"
  },
  {
    "text": "four, n^2.\nOK, everybody remember that? OK, so I want people to bone up\nbecause this is going to be",
    "start": "997000",
    "end": "1003000"
  },
  {
    "text": "recurrences, and divide and\nconquer and stuff is going to be on the final,\nOK, even though we haven't seen",
    "start": "1003000",
    "end": "1010000"
  },
  {
    "text": "it in many moons.\nOK, so that's good. That's the same as the serial.\nIf I had to add 2N by n",
    "start": "1010000",
    "end": "1016000"
  },
  {
    "text": "matrices, how long does it take\nme to do it? n^2 time.\nOK, so the input is size n^2.",
    "start": "1016000",
    "end": "1024000"
  },
  {
    "text": "So, you're not going to be the\nsize of the input if you have to",
    "start": "1024000",
    "end": "1032000"
  },
  {
    "text": "look at every piece of the\ninput. OK, let's now do the work of\nthe matrix multiplication.",
    "start": "1032000",
    "end": "1043000"
  },
  {
    "text": "So once again,\nwe want to get a recurrence here.\nSo, what's our recurrence here?",
    "start": "1043000",
    "end": "1056000"
  },
  {
    "text": "Yeah?\nNot quite. Eight, right,\ngood.",
    "start": "1056000",
    "end": "1062000"
  },
  {
    "text": "OK, eight, M1,\nn over 2, plus,",
    "start": "1062000",
    "end": "1068000"
  },
  {
    "text": "yeah, there's theta n^2 for the\naddition, and then there's extra",
    "start": "1068000",
    "end": "1080000"
  },
  {
    "text": "theta one that we can absorb\ninto theta n^2.",
    "start": "1080000",
    "end": "1091000"
  },
  {
    "text": "Isn't asymptotics great?\nOK, it's just great.",
    "start": "1091000",
    "end": "1099000"
  },
  {
    "text": "And so, what's the solution to\nthat one?",
    "start": "1099000",
    "end": "1107000"
  },
  {
    "text": "Theta n^3, why is that?\nMan, we are exercising old",
    "start": "1107000",
    "end": "1115000"
  },
  {
    "text": "muscles.\nAren't we? And they're just creaking.\nI can hear them. Why is that?\nYeah, master method because",
    "start": "1115000",
    "end": "1122000"
  },
  {
    "text": "we're looking at,\nwhat are we comparing? Yeah, n to the log base two of\neight, or n^3 versus n^2,",
    "start": "1122000",
    "end": "1130000"
  },
  {
    "text": "this one dominates order n^3.\nOK, so this is same as serial. This was the same as serial.\nThis was the same as serial.",
    "start": "1130000",
    "end": "1139000"
  },
  {
    "text": "That's good.\nOK, we know we have a program that on one processor,\nwill execute the same as our",
    "start": "1139000",
    "end": "1146000"
  },
  {
    "text": "serial code on which it's based.\nNamely, we could have done",
    "start": "1146000",
    "end": "1152000"
  },
  {
    "text": "this.\nIf I had just got rid of all the spawns and syncs,\nthat would have just been a",
    "start": "1152000",
    "end": "1159000"
  },
  {
    "text": "perfectly good piece of\npseudocode describing the runtime of the algorithm,\ndescribing the serial",
    "start": "1159000",
    "end": "1166000"
  },
  {
    "text": "algorithm.\nAnd its run time ends up being exactly the same,\nnot too surprising.",
    "start": "1166000",
    "end": "1173000"
  },
  {
    "text": "OK?\nOK, so now we do the new stuff, critical path length.\nOK, so here we have A infinity",
    "start": "1173000",
    "end": "1187000"
  },
  {
    "text": "of n.\nOoh, OK, so we're going to add",
    "start": "1187000",
    "end": "1194000"
  },
  {
    "text": "up the critical path of this\ncode here.",
    "start": "1194000",
    "end": "1202000"
  },
  {
    "text": "Hmm, how do I figure out the\ncritical path on a piece of code like that?",
    "start": "1202000",
    "end": "1208000"
  },
  {
    "start": "1208000",
    "end": "1226000"
  },
  {
    "text": "So, it's going to expand into\none of those DAG's. What's the DAG going to look\nlike?",
    "start": "1226000",
    "end": "1233000"
  },
  {
    "text": "How do I reason?\nSo, it's actually easier not to think about the DAG,\nbut to simply think about",
    "start": "1233000",
    "end": "1242000"
  },
  {
    "text": "what's going on in the code.\nYeah? Yeah, so it's basically,\nsince all four spawns are",
    "start": "1242000",
    "end": "1249000"
  },
  {
    "text": "spawning off the same thing,\nand they're operating in parallel, I could just look at\none.",
    "start": "1249000",
    "end": "1259000"
  },
  {
    "text": "Or in general,\nif I spawned off several things, I look at which everyone\nis going to have the maximum",
    "start": "1259000",
    "end": "1266000"
  },
  {
    "text": "critical path for the things\nthat I've spawned off. So, when we do work,\nwe're usually doing plus when I",
    "start": "1266000",
    "end": "1273000"
  },
  {
    "text": "have multiple subroutines.\nWhen we do critical path, I'm doing max.\nIt's going to be the max over",
    "start": "1273000",
    "end": "1280000"
  },
  {
    "text": "the critical paths of the\nsubroutines that I call. OK, and here they are all\nequal.",
    "start": "1280000",
    "end": "1286000"
  },
  {
    "text": "So what's the recurrence that I\nget? ",
    "start": "1286000",
    "end": "1301000"
  },
  {
    "text": "What's the recurrence I'm going\nto get out of this one?",
    "start": "1301000",
    "end": "1307000"
  },
  {
    "text": "Yeah, A infinity,\nn over 2, plus constant, OK, because this is what the\nworst is of any of those four",
    "start": "1307000",
    "end": "1318000"
  },
  {
    "text": "because they're all the same.\nThey're all a problem looking",
    "start": "1318000",
    "end": "1325000"
  },
  {
    "text": "at the critical path of\nsomething that's half the size,",
    "start": "1325000",
    "end": "1331000"
  },
  {
    "text": "for a problem that's half the\nsize. OK, people with me?\nOK, so what's the solution to",
    "start": "1331000",
    "end": "1341000"
  },
  {
    "text": "this?\nYeah, that's theta log n. That's just,\nonce again, master theorem,",
    "start": "1341000",
    "end": "1349000"
  },
  {
    "text": "case two, because the solution\nto this is n to the log base two",
    "start": "1349000",
    "end": "1356000"
  },
  {
    "text": "of one, which is n to the zero.\nSo we have, on this side,",
    "start": "1356000",
    "end": "1364000"
  },
  {
    "text": "we have one,\nand here, we're comparing it with one.\nThey're the same,",
    "start": "1364000",
    "end": "1370000"
  },
  {
    "text": "so therefore we tack on that\nextra log n. OK, so tack on one log n.\nOK, so case two of the master",
    "start": "1370000",
    "end": "1378000"
  },
  {
    "text": "method.\nPretty good. OK, so that's pretty good,\nbecause the critical path is",
    "start": "1378000",
    "end": "1386000"
  },
  {
    "text": "pretty short,\nlog n compared to the work, n^2.\nSo, let's do,",
    "start": "1386000",
    "end": "1392000"
  },
  {
    "text": "then, this one which is a\nlittle bit more interesting,",
    "start": "1392000",
    "end": "1398000"
  },
  {
    "text": "but not much harder.\nHow about this one? What's the recurrence going to\nbe?",
    "start": "1398000",
    "end": "1405000"
  },
  {
    "text": "Critical path of the\nmultiplication?",
    "start": "1405000",
    "end": "1411000"
  },
  {
    "start": "1411000",
    "end": "1418000"
  },
  {
    "text": "So once again,\nit's going to be the maximum of everything we spawned off in\nparallel, which is,",
    "start": "1418000",
    "end": "1426000"
  },
  {
    "text": "by symmetry,\nthe same as one of them. So what do I get here?\nM infinity, n over 2,",
    "start": "1426000",
    "end": "1434000"
  },
  {
    "text": "plus theta log n.\nWhere'd the theta log n come from?\nYeah, from the addition.",
    "start": "1434000",
    "end": "1442000"
  },
  {
    "text": "That's the critical path of the\naddition. Now, why is it that the maximum\nof that with all the spawns?",
    "start": "1442000",
    "end": "1451000"
  },
  {
    "text": "You said that when you spawn\nthings off, you're going to do them, yeah, you sync first.\nAnd, sync says you wait for all",
    "start": "1451000",
    "end": "1462000"
  },
  {
    "text": "those to be done.\nSo, you're only taking the maximum, and across syncs you're\nadding.",
    "start": "1462000",
    "end": "1471000"
  },
  {
    "text": "So, you add across syncs,\nand across things that you spawned off in parallel.\nThat's where you are doing the",
    "start": "1471000",
    "end": "1477000"
  },
  {
    "text": "max.\nOK, but if you have a sync, it says that that's the end.\nYou've got to wait for everything there to end.\nThis isn't going on in parallel",
    "start": "1477000",
    "end": "1485000"
  },
  {
    "text": "with it.\nThis is going on after it. So, whatever the critical path\nis here, OK, if I have an infinite number of processors,\nI'd still have to wait up at",
    "start": "1485000",
    "end": "1493000"
  },
  {
    "text": "this point, and that would\ntherefore make it so that the remaining execution gear was\nwhatever the critical,",
    "start": "1493000",
    "end": "1500000"
  },
  {
    "text": "I would have to add whatever\nthe critical path was to this one.\nIs that clear to everybody?",
    "start": "1500000",
    "end": "1508000"
  },
  {
    "text": "OK, so we get this recurrence.\nAnd, that has solution what?",
    "start": "1508000",
    "end": "1516000"
  },
  {
    "text": "Yeah, theta log squared n.\nOK, once again, by master method,\ncase two, where this ends up",
    "start": "1516000",
    "end": "1527000"
  },
  {
    "text": "being a constant versus log n,\nthose don't differ by a",
    "start": "1527000",
    "end": "1534000"
  },
  {
    "text": "polynomial amount,\nor equal to a log factor.",
    "start": "1534000",
    "end": "1541000"
  },
  {
    "text": "What we do in that circumstance\nis tack on an extra log factor.",
    "start": "1541000",
    "end": "1548000"
  },
  {
    "text": "OK, so as I say,\ngood idea to review the master method.\nOK, that's great.",
    "start": "1548000",
    "end": "1556000"
  },
  {
    "text": "So now, let's take a look at\nthe parallelism that we get.",
    "start": "1556000",
    "end": "1564000"
  },
  {
    "text": "We'll just do it right here for\nthe multiplication.",
    "start": "1564000",
    "end": "1572000"
  },
  {
    "text": "OK, so parallelism is what for\nthe multiplication?",
    "start": "1572000",
    "end": "1581000"
  },
  {
    "text": "What's the formula for\nparallelism? So, we have p bar is the\nnotation we use for this",
    "start": "1581000",
    "end": "1595000"
  },
  {
    "text": "problem.\nWhat's the parallelism going to",
    "start": "1595000",
    "end": "1603000"
  },
  {
    "text": "be?\nWhat's the ratio I take? Yeah, it's M_1 of n divided by\nM infinity of n.",
    "start": "1603000",
    "end": "1614000"
  },
  {
    "text": "OK, and that's equal to,\nthat's n^3.",
    "start": "1614000",
    "end": "1620000"
  },
  {
    "text": "That's n^2, or log n^2,\nsorry, log squared n.",
    "start": "1620000",
    "end": "1629000"
  },
  {
    "text": "OK, so this is the parallelism.\nThat says you could run up to this many processors and expect\nto be getting linear speed up.",
    "start": "1629000",
    "end": "1636000"
  },
  {
    "text": "If I ran with more processors\nthan the parallelism, I don't expect to be getting\nlinear speed up anymore,",
    "start": "1636000",
    "end": "1643000"
  },
  {
    "text": "OK, because what I expect to\nrun in, is just time proportional to critical path\nlength, and throwing more",
    "start": "1643000",
    "end": "1650000"
  },
  {
    "text": "processors at the problem is not\ngoing to help me very much, OK?\nSo let's just look at this just",
    "start": "1650000",
    "end": "1659000"
  },
  {
    "text": "to get a sense of what's going\non here. Let's imagine that the\nconstants are irrelevant,",
    "start": "1659000",
    "end": "1670000"
  },
  {
    "text": "and we have,\nsay, thousand by thousand matrices, OK,\nso in that case,",
    "start": "1670000",
    "end": "1679000"
  },
  {
    "text": "our parallelism is 1,000^3\ndivided by log of 1,000^2.",
    "start": "1679000",
    "end": "1688000"
  },
  {
    "text": "What's log of 1,000?\nTen, approximately, right?\nLog base two of 1,000 is about",
    "start": "1688000",
    "end": "1696000"
  },
  {
    "text": "ten, so that's 10^2.\nSo, you have about 10^7 parallelism.\nHow big is 10^7?",
    "start": "1696000",
    "end": "1704000"
  },
  {
    "text": "Ten million processors.\nOK, so who knows of a machine",
    "start": "1704000",
    "end": "1710000"
  },
  {
    "text": "with ten million processors?\nWhat's the most number of",
    "start": "1710000",
    "end": "1718000"
  },
  {
    "text": "processors anybody knows about?\nYeah, not quite,",
    "start": "1718000",
    "end": "1724000"
  },
  {
    "text": "the IBM Blue Jean has a\nhumungous number of processors,",
    "start": "1724000",
    "end": "1732000"
  },
  {
    "text": "exceeding 10,000.\nYeah. Those were one bit processors.\nOK, so this is actually a",
    "start": "1732000",
    "end": "1743000"
  },
  {
    "text": "pretty big number,\nand so, our parallelism is much",
    "start": "1743000",
    "end": "1749000"
  },
  {
    "text": "bigger than a typical,\nactual number of processors.",
    "start": "1749000",
    "end": "1755000"
  },
  {
    "text": "So, we would expect to be able\nto run this and get very good",
    "start": "1755000",
    "end": "1762000"
  },
  {
    "text": "performance, OK,\nbecause we're never going to be",
    "start": "1762000",
    "end": "1768000"
  },
  {
    "text": "limited in this algorithm by\nperformance.",
    "start": "1768000",
    "end": "1775000"
  },
  {
    "text": "However, there are some tricks\nwe can do. One of the things in this code\nis that we actually have some",
    "start": "1775000",
    "end": "1782000"
  },
  {
    "text": "overhead that's not apparent\nbecause I haven't run this code with you, although I could,\nwhich is that we have this",
    "start": "1782000",
    "end": "1791000"
  },
  {
    "text": "temporary matrix,\nT, and if you look at the execution stack,\nwe're always allocating T and",
    "start": "1791000",
    "end": "1798000"
  },
  {
    "text": "getting rid of it,\netc. And, one of the things when you\nactually look at the performance",
    "start": "1798000",
    "end": "1804000"
  },
  {
    "text": "of real code,\nwhich is now that you have your algorithmic background,\nyou're ready to go and do that",
    "start": "1804000",
    "end": "1810000"
  },
  {
    "text": "with some insight.\nOf course, you're interested in getting more than just\nasymptotic behavior.",
    "start": "1810000",
    "end": "1816000"
  },
  {
    "text": "You're interested in getting\nreal performance behavior on real things.\nSo, you do care about constants in that nature.\nOK, and one of the things is",
    "start": "1816000",
    "end": "1824000"
  },
  {
    "text": "having a large,\ntemporary variable. That turns out to be a lot of\noverhead.",
    "start": "1824000",
    "end": "1830000"
  },
  {
    "text": "And, in fact,\nit's often the case when you're looking at real code that if you\ncan optimize for space,",
    "start": "1830000",
    "end": "1837000"
  },
  {
    "text": "you also optimized for time.\nIf you can run your code with smaller space,\nyou can actually run it with",
    "start": "1837000",
    "end": "1845000"
  },
  {
    "text": "smaller time,\ntends to be a constant factor advantage.\nBut, those constants can add",
    "start": "1845000",
    "end": "1852000"
  },
  {
    "text": "up, and can make a difference in\nwhether somebody else's code is faster or your code is faster,\nonce you have your basic",
    "start": "1852000",
    "end": "1861000"
  },
  {
    "text": "algorithm.\nSo, the idea is to, in this case,\nwe're going to get rid of it by",
    "start": "1861000",
    "end": "1867000"
  },
  {
    "text": "trading parallelism because\nwe've got oodles of parallelism here for space efficiency.\nOK, and the idea is we're going",
    "start": "1867000",
    "end": "1882000"
  },
  {
    "text": "to get rid of T.\nOK, so let's throw this up.",
    "start": "1882000",
    "end": "1893000"
  },
  {
    "text": "So, who can suggest how I might\nget rid of T here,",
    "start": "1893000",
    "end": "1900000"
  },
  {
    "text": "get rid of this temporary\nmatrix? Yeah?",
    "start": "1900000",
    "end": "1906000"
  },
  {
    "start": "1906000",
    "end": "1918000"
  },
  {
    "text": "Yeah? ",
    "start": "1918000",
    "end": "1934000"
  },
  {
    "text": "So, if you just did adding it\ninto C? So, the issue that you get\nthere if they're both adding into C is you get interference\nbetween the two subcomputations.",
    "start": "1934000",
    "end": "1941000"
  },
  {
    "text": "Now, there are ways of doing\nthat that work out, but you now have to worry about\nthings we're not going to talk",
    "start": "1941000",
    "end": "1947000"
  },
  {
    "text": "about such as mutual exclusion\nto make sure that as you're updating it, somebody else isn't\nupdating it, and you don't have",
    "start": "1947000",
    "end": "1953000"
  },
  {
    "text": "race conditions.\nBut you can actually do it in this context with no race\nconditions.",
    "start": "1953000",
    "end": "1961000"
  },
  {
    "text": "Yeah, exactly.\nExactly, OK, exactly.\nSo, the idea is spawn off four",
    "start": "1961000",
    "end": "1968000"
  },
  {
    "text": "of them.\nOK, they all update their copy of C, and then spawn off the\nother four that add their values",
    "start": "1968000",
    "end": "1978000"
  },
  {
    "text": "in.\nSo, that is a piece of code we'll call mult add.\nAnd, it's actually going to do",
    "start": "1978000",
    "end": "1988000"
  },
  {
    "text": "C gets C plus A times B.\nOK, so it's actually going to",
    "start": "1988000",
    "end": "1995000"
  },
  {
    "text": "add it in.\nSo, initially you'd have to zero out C, but we can do that\nwith code very similar to the",
    "start": "1995000",
    "end": "2006000"
  },
  {
    "text": "addition code with order n^2\nwork, and order log n critical",
    "start": "2006000",
    "end": "2013000"
  },
  {
    "text": "path.\nSo that's not going to be a big part of what we have to deal\nwith.",
    "start": "2013000",
    "end": "2021000"
  },
  {
    "text": "OK, so here's the code.\nWe basically, once again, do the base and\npartition which I'm not going to",
    "start": "2021000",
    "end": "2031000"
  },
  {
    "text": "write out the code for.\nWe spawn a mult add of C1-1,",
    "start": "2031000",
    "end": "2040000"
  },
  {
    "text": "A1-1, B1-1, n over 2,\nand we do a few more of those",
    "start": "2040000",
    "end": "2049000"
  },
  {
    "text": "down to the fourth one. ",
    "start": "2049000",
    "end": "2065000"
  },
  {
    "text": "And then we put in a sync.\nAnd then we do the other four --",
    "start": "2065000",
    "end": "2072000"
  },
  {
    "start": "2072000",
    "end": "2101000"
  },
  {
    "text": "-- and then sync when we're\ndone with that. ",
    "start": "2101000",
    "end": "2112000"
  },
  {
    "text": "OK, does everybody understand\nthat code? See that it basically does the\nsame calculation.",
    "start": "2112000",
    "end": "2118000"
  },
  {
    "text": "We actually don't need to call\nadd anymore, because we are doing that as part of the\nmultiply because we're adding it",
    "start": "2118000",
    "end": "2126000"
  },
  {
    "text": "in.\nBut we do have to initialize. OK, we do have to initialize\nthe matrix in this case.",
    "start": "2126000",
    "end": "2133000"
  },
  {
    "text": "OK, so there is another phase.\nSo, people understand the",
    "start": "2133000",
    "end": "2142000"
  },
  {
    "text": "semantics of this code.\nSo let's analyze it.",
    "start": "2142000",
    "end": "2150000"
  },
  {
    "text": "OK, so what's the work of\nmultiply, add of n?",
    "start": "2150000",
    "end": "2158000"
  },
  {
    "text": "It's basically the same thing,\nright?",
    "start": "2158000",
    "end": "2166000"
  },
  {
    "text": "It's order n^3 because the\nserial code is almost the same as the serial code up there,\nOK, not quite,",
    "start": "2166000",
    "end": "2174000"
  },
  {
    "text": "OK, but you get essentially the\nsame recurrence except you don't even have the add.\nYou just get the same",
    "start": "2174000",
    "end": "2183000"
  },
  {
    "text": "recurrence but with order one\nhere, oops, order one up here. So, it's still got the order\nn^3 solution.",
    "start": "2183000",
    "end": "2193000"
  },
  {
    "text": "OK, so that,\nI think, is not too hard. OK, so the critical path\nlength, so there,",
    "start": "2193000",
    "end": "2202000"
  },
  {
    "text": "let's write out,\nso multiply, add, of n, OK,\nwhat's my recurrence for this",
    "start": "2202000",
    "end": "2210000"
  },
  {
    "text": "code? ",
    "start": "2210000",
    "end": "2222000"
  },
  {
    "text": "Yeah, 2M infinity,\nM over 2 [ost that, so order one.\nPlus order one,",
    "start": "2222000",
    "end": "2229000"
  },
  {
    "text": "yeah.\nOK, so the point is that we're going to have,\nfor the critical path,",
    "start": "2229000",
    "end": "2237000"
  },
  {
    "text": "we're going to spawn these four\noff, and so I take the maximum",
    "start": "2237000",
    "end": "2243000"
  },
  {
    "text": "of whatever those is,\nwhich since they're symmetric",
    "start": "2243000",
    "end": "2249000"
  },
  {
    "text": "is any one of them,\nOK, and then I have to wait.",
    "start": "2249000",
    "end": "2256000"
  },
  {
    "text": "And then I do it again.\nSo, that sync, once again, translates into,\nin the analysis,",
    "start": "2256000",
    "end": "2262000"
  },
  {
    "text": "it translates into a plus of\nthe critical path, which are the things I spawn\noff in parallel,",
    "start": "2262000",
    "end": "2270000"
  },
  {
    "text": "I do the max.\nOK, so people see that? So, I get this recurrence,\n2MA of n over 2 plus order one,",
    "start": "2270000",
    "end": "2278000"
  },
  {
    "text": "and what's the solution to\nthat? OK, that's order n,\nOK, because n to the log base",
    "start": "2278000",
    "end": "2290000"
  },
  {
    "text": "two of two is n,\nand that's bigger than one so",
    "start": "2290000",
    "end": "2298000"
  },
  {
    "text": "we get order n.\nOK, so the parallelism,",
    "start": "2298000",
    "end": "2305000"
  },
  {
    "text": "we have p bar is equal to MA\none of n over MA infinity of n",
    "start": "2305000",
    "end": "2316000"
  },
  {
    "text": "is equal to, in this case,\nn^3 over n, or order n^2.",
    "start": "2316000",
    "end": "2327000"
  },
  {
    "text": "OK, so for 1,000 by 1,000\nmatrices, for example, by the way, 1,000 by 1,000 is\nconsidered a small matrix,",
    "start": "2327000",
    "end": "2336000"
  },
  {
    "text": "these days, because that's only\none million entries.",
    "start": "2336000",
    "end": "2342000"
  },
  {
    "text": "You can put that on your laptop\nno sweat. OK, so, but for 1,000 by 1,000\nmatrices, our parallelism is",
    "start": "2342000",
    "end": "2354000"
  },
  {
    "text": "about 10^6.\nOK, so once again, ample parallelism for anything\nwe would run it on today.",
    "start": "2354000",
    "end": "2367000"
  },
  {
    "text": "And as it turns out,\nit's faster in practice -- ",
    "start": "2367000",
    "end": "2378000"
  },
  {
    "text": "-- because we have less space.\nOK, so here's a game where, so, often the game you'll see\nin theory papers if you look at",
    "start": "2378000",
    "end": "2389000"
  },
  {
    "text": "research papers,\npeople are often striving to get the most parallelism,\nand that's a good game to play,",
    "start": "2389000",
    "end": "2399000"
  },
  {
    "text": "OK, but it's not necessarily\nthe only game. Particularly,\nif you have a lot of",
    "start": "2399000",
    "end": "2406000"
  },
  {
    "text": "parallelism, one of the things\nthat's very easy to do is to retreat on the parallelism and\ngain other aspects that you may",
    "start": "2406000",
    "end": "2414000"
  },
  {
    "text": "want in your code.\nOK, and so this is a good example of that.\nIn fact, and this is an exercise, you can actually\nachieve work n^3,",
    "start": "2414000",
    "end": "2422000"
  },
  {
    "text": "order n^3 work,\nand a critical path of log n, so even better than either of\nthese two algorithms in terms of",
    "start": "2422000",
    "end": "2429000"
  },
  {
    "text": "parallelism.\nOK, so that gives you n^3 over log n parallelism.\nSo, that's an exercise.",
    "start": "2429000",
    "end": "2436000"
  },
  {
    "text": "And then, the other exercise\nthat I mention that that's good to do is parallel Strassen,\nOK, doing the same thing with",
    "start": "2436000",
    "end": "2444000"
  },
  {
    "text": "Strassen, and analyze,\nwhat's the working critical path and parallelism of the\nStrassen code?",
    "start": "2444000",
    "end": "2451000"
  },
  {
    "text": "OK, any questions about matrix\nmultiplication? Yeah? ",
    "start": "2451000",
    "end": "2463000"
  },
  {
    "text": "Yeah, so that would take,\nthat would add a log n to the critical path,\nwhich is nothing compared to",
    "start": "2463000",
    "end": "2470000"
  },
  {
    "text": "the n.\nExcuse me? Well, you got to make sure C is\nzero to begin with.",
    "start": "2470000",
    "end": "2476000"
  },
  {
    "text": "OK, so you have to set all the\nentries to zero, and so that will take you n^2\nwork, which is nothing compared",
    "start": "2476000",
    "end": "2485000"
  },
  {
    "text": "to the n^3 work you're doing\nhere, and it will cost you log n additional to the critical path,\nwhich is nothing compared to",
    "start": "2485000",
    "end": "2494000"
  },
  {
    "text": "the order n that you're\nspending. Any other questions about\nmatrix multiplication?",
    "start": "2494000",
    "end": "2505000"
  },
  {
    "text": "OK, as they say,\nthis all goes back to week two,",
    "start": "2505000",
    "end": "2511000"
  },
  {
    "text": "or something,\nin the class. Did you have a comment?\nYes, you can.",
    "start": "2511000",
    "end": "2521000"
  },
  {
    "text": "OK, yes you can.\nIt's actually kind of interesting to look at that.\nActually, we'll talk later.",
    "start": "2521000",
    "end": "2531000"
  },
  {
    "text": "We'll write a research paper\nafter the class is over,",
    "start": "2531000",
    "end": "2537000"
  },
  {
    "text": "OK, because there's actually\nsome interesting open questions",
    "start": "2537000",
    "end": "2544000"
  },
  {
    "text": "there.\nOK, let's move on to something that you thought you'd gotten\nrid of weeks ago,",
    "start": "2544000",
    "end": "2554000"
  },
  {
    "text": "and that would be the topic of\nsorting.",
    "start": "2554000",
    "end": "2560000"
  },
  {
    "text": "Back to sorting.\nOK, so we want to parallel sort now, OK?\nHugely important problem.",
    "start": "2560000",
    "end": "2567000"
  },
  {
    "text": "So, let's take a look at,\nso if I think about algorithms for sorting that sound easy to\nparallelize, which ones sound",
    "start": "2567000",
    "end": "2577000"
  },
  {
    "text": "kind of easy to parallelize?\nQuick sort, yeah, that's a good one.\nYeah, quick sort is a pretty",
    "start": "2577000",
    "end": "2585000"
  },
  {
    "text": "good one to parallelize and\nanalyze. But remember,\nquick sort has a little bit more complicated analysis than\nsome other sorts.",
    "start": "2585000",
    "end": "2593000"
  },
  {
    "text": "What's another one that looks\nlike it should be pretty easy to parallelize?\nMerge sort.",
    "start": "2593000",
    "end": "2599000"
  },
  {
    "text": "When did we teach merge sort?\nDay one. OK, so do merge sort because\nit's just a little bit easier to",
    "start": "2599000",
    "end": "2605000"
  },
  {
    "text": "analyze.\nOK, we could do the same thing for quick sort.\nHere's merge sort,",
    "start": "2605000",
    "end": "2612000"
  },
  {
    "text": "OK, and it's going to sort A of\np to r.",
    "start": "2612000",
    "end": "2618000"
  },
  {
    "text": "So, if p is less than r,\nthen we get the middle element,",
    "start": "2618000",
    "end": "2627000"
  },
  {
    "text": "and then we'll spawn off since\nwe have to, as you recall,",
    "start": "2627000",
    "end": "2635000"
  },
  {
    "text": "when you merge sort you first\nrecursively sort the two",
    "start": "2635000",
    "end": "2643000"
  },
  {
    "text": "sub-arrays.\nThere's no reason not to do",
    "start": "2643000",
    "end": "2651000"
  },
  {
    "text": "those parallel.\nLet's just do them in parallel.",
    "start": "2651000",
    "end": "2658000"
  },
  {
    "text": "Let's spawn off,\nmerge sort of A, p, q, and spawn off,\nthen, merge sort of A,",
    "start": "2658000",
    "end": "2670000"
  },
  {
    "text": "q plus one r.\nAnd then, we wait for them to",
    "start": "2670000",
    "end": "2678000"
  },
  {
    "text": "be done.\nDon't forget your syncs. Sync or swim.\nOK, and then what to do what we",
    "start": "2678000",
    "end": "2688000"
  },
  {
    "text": "are done with this?\nOK, we merge.",
    "start": "2688000",
    "end": "2694000"
  },
  {
    "text": "OK, so we merge of A,\np, q, r, which is merge A of p",
    "start": "2694000",
    "end": "2703000"
  },
  {
    "text": "up to q with A of q plus one up\nto r.",
    "start": "2703000",
    "end": "2710000"
  },
  {
    "text": "And, once we've merged,\nwe're done.",
    "start": "2710000",
    "end": "2716000"
  },
  {
    "text": "OK, so this is the same code as\nwe saw before in day one except",
    "start": "2716000",
    "end": "2727000"
  },
  {
    "text": "we've got a couple of spawns in\nthe sync.",
    "start": "2727000",
    "end": "2737000"
  },
  {
    "text": "So let's analyze this.\nSo, the work is called T_1 of",
    "start": "2737000",
    "end": "2752000"
  },
  {
    "text": "n, what's the recurrence for\nthis?",
    "start": "2752000",
    "end": "2763000"
  },
  {
    "text": "This really is going back to\nday one, right? We actually did this on day\none.",
    "start": "2763000",
    "end": "2771000"
  },
  {
    "text": "OK, so what's the recurrence?\n2T1 of n over 2 plus order n",
    "start": "2771000",
    "end": "2777000"
  },
  {
    "text": "merges order n time operation,\nOK? And so, that gives us a\nsolution of n log n,",
    "start": "2777000",
    "end": "2785000"
  },
  {
    "text": "OK, even if you didn't know the\nsolution, you should know the",
    "start": "2785000",
    "end": "2792000"
  },
  {
    "text": "answer, OK, which is the same as\nthe serial code, not surprisingly.\nThat's what we want.",
    "start": "2792000",
    "end": "2805000"
  },
  {
    "text": "OK, critical path length,\nAT infinity of n is equal to,",
    "start": "2805000",
    "end": "2817000"
  },
  {
    "text": "OK, T infinity of n over 2 plus\norder n again.",
    "start": "2817000",
    "end": "2828000"
  },
  {
    "text": "And that's equal to order n,\nOK?",
    "start": "2828000",
    "end": "2835000"
  },
  {
    "text": "So, the parallelism is then p\nbar equals T_1 of n over T",
    "start": "2835000",
    "end": "2849000"
  },
  {
    "text": "infinity of n is equal to theta\nof log n.",
    "start": "2849000",
    "end": "2860000"
  },
  {
    "text": "Is that a lot of parallelism?\nNo, we have a technical name for that.\nWe call it puny.",
    "start": "2860000",
    "end": "2867000"
  },
  {
    "text": "OK, that's puny parallelism.\nLog n? Now, so this is actually\nprobably a decent algorithm for",
    "start": "2867000",
    "end": "2875000"
  },
  {
    "text": "some of the small scale\nprocessors, especially the multicore processors that are\ncoming on the market,",
    "start": "2875000",
    "end": "2884000"
  },
  {
    "text": "and some of the smaller SMP,\nsymmetric multiprocessors, that are available.\nYou know, they have four or",
    "start": "2884000",
    "end": "2895000"
  },
  {
    "text": "eight processors or something.\nIt might be OK. There's not a lot of\nparallelism.",
    "start": "2895000",
    "end": "2902000"
  },
  {
    "text": "For a million elements,\nlog n is about 20. OK, and so and then there's\nconstant overheads,",
    "start": "2902000",
    "end": "2909000"
  },
  {
    "text": "etc.\nThis is not very much parallelism at all.\nQuestion?",
    "start": "2909000",
    "end": "2919000"
  },
  {
    "text": "Yeah, so how can we do better?\nI mean, it's like,",
    "start": "2919000",
    "end": "2926000"
  },
  {
    "text": "man, at merge,\nright, it takes order n.",
    "start": "2926000",
    "end": "2933000"
  },
  {
    "text": "if I want to do better,\nwhat should I do?",
    "start": "2933000",
    "end": "2939000"
  },
  {
    "text": "Yeah?\nSort in-place, but for example if you do quick\nsort and partition,",
    "start": "2939000",
    "end": "2948000"
  },
  {
    "text": "you still have a linear time\npartition. So you're going to be very much\nin the same situation.",
    "start": "2948000",
    "end": "2957000"
  },
  {
    "text": "But what can I do here?\nParallel merge. OK, let's make merge go in\nparallel.",
    "start": "2957000",
    "end": "2964000"
  },
  {
    "text": "That's where all the critical\npath is. Let's figure out a way of\nbuilding a merge program that",
    "start": "2964000",
    "end": "2973000"
  },
  {
    "text": "has a very short critical path.\nYou have to parallelize the",
    "start": "2973000",
    "end": "2981000"
  },
  {
    "text": "merge.\nThis is great. It's so nice to see at the end\nof a course like this that",
    "start": "2981000",
    "end": "2990000"
  },
  {
    "text": "people have the intuition that,\noh, you can look at it and sort",
    "start": "2990000",
    "end": "2997000"
  },
  {
    "text": "of see, where should you put in\nyour work?",
    "start": "2997000",
    "end": "3003000"
  },
  {
    "text": "OK, the one thing about\nalgorithms is it doesn't stop you from having to engineer a\nprogram when you code it.",
    "start": "3003000",
    "end": "3009000"
  },
  {
    "text": "There's a lot more to coding a\nprogram well than just having the algorithm as we talked\nabout, also, in day one.",
    "start": "3009000",
    "end": "3015000"
  },
  {
    "text": "There's things like making it\nmodular, and making it maintainable,\nand a whole bunch of things like that.\nBut one of the things that",
    "start": "3015000",
    "end": "3022000"
  },
  {
    "text": "algorithms does is it tells you,\nwhere should you focus your work?\nOK, there's no point in,",
    "start": "3022000",
    "end": "3028000"
  },
  {
    "text": "for example,\nsort of saying, OK, let me spawn off four of\nthese things of size n over 4 in",
    "start": "3028000",
    "end": "3034000"
  },
  {
    "text": "hopes of getting,\nI mean, it's like, that's not where you put the\nwork. You put the work in merge\nbecause that's the one that's",
    "start": "3034000",
    "end": "3042000"
  },
  {
    "text": "the bottleneck,\nOK? And, that's the nice thing\nabout algorithms is it very quickly lets you hone in on\nwhere you should put your",
    "start": "3042000",
    "end": "3051000"
  },
  {
    "text": "effort, OK, when you're doing\nalgorithmic design in engineering practice.\nSo you must parallelize the",
    "start": "3051000",
    "end": "3058000"
  },
  {
    "text": "merge. ",
    "start": "3058000",
    "end": "3069000"
  },
  {
    "text": "The merge we're taking,\nso here's the basic idea we're going to use.\nSo, in general, when we merge,\nwhen we do our recursive merge,",
    "start": "3069000",
    "end": "3077000"
  },
  {
    "text": "we're going to have two arrays.\nLet's call them A and B. I called them A there.\nI probably shouldn't have used",
    "start": "3077000",
    "end": "3085000"
  },
  {
    "text": "A.\nI probably should have called them something else,\nbut that's what my notes have, so we're going to stick to it.\nBut we get a little bit more",
    "start": "3085000",
    "end": "3096000"
  },
  {
    "text": "space there and see what's going\non. We have two arrays.\nI'll call them A and B,",
    "start": "3096000",
    "end": "3103000"
  },
  {
    "text": "OK?\nAnd, what we're going to do, these are going to be already\nsorted.",
    "start": "3103000",
    "end": "3109000"
  },
  {
    "text": "And our job is going to be to\nmerge them together. So, what I'll do is I'll take\nthe middle element of A.",
    "start": "3109000",
    "end": "3120000"
  },
  {
    "text": "So this, let's say,\ngoes from one to l, and this goes from one to m.\nOK, I'll take the middle",
    "start": "3120000",
    "end": "3131000"
  },
  {
    "text": "element, the element at l over\n2, say, and what I'll do is use",
    "start": "3131000",
    "end": "3140000"
  },
  {
    "text": "binary search to figure out,\nwhere does it go in the array",
    "start": "3140000",
    "end": "3147000"
  },
  {
    "text": "B?\nWhere does this element go? It goes to some point here\nwhere we have j here and j plus",
    "start": "3147000",
    "end": "3156000"
  },
  {
    "text": "one here.\nSo, we know, since this is sorted,\nthat all these things are less",
    "start": "3156000",
    "end": "3163000"
  },
  {
    "text": "than or equal to A of l over 2,\nand all these things are greater than or equal to A of l\nover 2.",
    "start": "3163000",
    "end": "3172000"
  },
  {
    "text": "And similarly,\nsince that element falls here, all these are less than or\nequal to A of l over 2.",
    "start": "3172000",
    "end": "3182000"
  },
  {
    "text": "And all these are going to be\nless greater than or equal to",
    "start": "3182000",
    "end": "3189000"
  },
  {
    "text": "two.\nOK, and so now what I can do is once I figured out where this\ngoes, I can recursively merge",
    "start": "3189000",
    "end": "3200000"
  },
  {
    "text": "this array with this one,\nand this one with this one,",
    "start": "3200000",
    "end": "3207000"
  },
  {
    "text": "and then if I can just\nconcatenate them altogether,",
    "start": "3207000",
    "end": "3213000"
  },
  {
    "text": "I've got my merged array.\nOK, so let's write that code.",
    "start": "3213000",
    "end": "3221000"
  },
  {
    "text": "Everybody get the gist of\nwhat's going on there,",
    "start": "3221000",
    "end": "3227000"
  },
  {
    "text": "how we're going to parallelize\nthe merge? Of course, you can see,\nit's going to get a little",
    "start": "3227000",
    "end": "3238000"
  },
  {
    "text": "messy because j could be\nanywhere. Secures my code,\nparallel merge of,",
    "start": "3238000",
    "end": "3246000"
  },
  {
    "text": "and we're going to put it in C\nof one to n, so I'm going to",
    "start": "3246000",
    "end": "3253000"
  },
  {
    "text": "have n elements.\nSo, this is doing merge A and B",
    "start": "3253000",
    "end": "3261000"
  },
  {
    "text": "into C, and n is equal to l plus\nn.",
    "start": "3261000",
    "end": "3267000"
  },
  {
    "text": "OK, so we're going to take two\narrays and merge it into the",
    "start": "3267000",
    "end": "3276000"
  },
  {
    "text": "third array, OK?\nSo, without loss of generality,",
    "start": "3276000",
    "end": "3282000"
  },
  {
    "text": "I'm going to say,\nlet's see, without loss of generality, I'm going to say l\nis bigger than m as I show here",
    "start": "3282000",
    "end": "3289000"
  },
  {
    "text": "because if it's not,\nwhat do I do? Just do it the other way\naround, right?",
    "start": "3289000",
    "end": "3295000"
  },
  {
    "text": "So, I figure out which one was\nbigger. So that only cost me order one\nto test that,",
    "start": "3295000",
    "end": "3301000"
  },
  {
    "text": "or whatever.\nAnd then, I basically do a base case, you know,\nif the two arrays are empty or",
    "start": "3301000",
    "end": "3307000"
  },
  {
    "text": "whatever, what you do in\npractice, of course, is if they're small enough,\nyou just do a serial merge,",
    "start": "3307000",
    "end": "3314000"
  },
  {
    "text": "OK, if they're small enough,\nand I don't really expect to get much parallelism.\nThere isn't much work there.",
    "start": "3314000",
    "end": "3320000"
  },
  {
    "text": "You might as well just do\nserial merge, and be a little bit more\nefficient, OK? So, do the base case.\nSo then, what I do is I find",
    "start": "3320000",
    "end": "3332000"
  },
  {
    "text": "the j such that B of j is less\nthan or equal to A of l over 2,",
    "start": "3332000",
    "end": "3341000"
  },
  {
    "text": "less than or equal to B of j\nplus one, using binary search.",
    "start": "3341000",
    "end": "3350000"
  },
  {
    "text": "What did recover binary search?\nOh yeah, that was week one,",
    "start": "3350000",
    "end": "3359000"
  },
  {
    "text": "right?\nThat was first recitation or",
    "start": "3359000",
    "end": "3367000"
  },
  {
    "text": "something.\nYeah, it's amazing.",
    "start": "3367000",
    "end": "3373000"
  },
  {
    "text": "OK, and now,\nwhat we do is we spawn off p",
    "start": "3373000",
    "end": "3380000"
  },
  {
    "text": "merge of A of one,\nl over 2, B of one to j,",
    "start": "3380000",
    "end": "3389000"
  },
  {
    "text": "and stick it into C of one,\ntwo, l over 2 plus j.",
    "start": "3389000",
    "end": "3400000"
  },
  {
    "text": "OK, and similarly now,\nwe can spawn off a merge of A",
    "start": "3400000",
    "end": "3413000"
  },
  {
    "text": "of l over 2 plus one up to l.\nB of j plus one up to M,",
    "start": "3413000",
    "end": "3427000"
  },
  {
    "text": "and a C of l over two plus j\nplus one up to n.",
    "start": "3427000",
    "end": "3439000"
  },
  {
    "text": "And then, I sync. ",
    "start": "3439000",
    "end": "3452000"
  },
  {
    "text": "So, code is pretty\nstraightforward, doing exactly what I said we\nwere going to do over here,",
    "start": "3452000",
    "end": "3462000"
  },
  {
    "text": "analysis, a little messier,\na little messier. So, let's just try to\nunderstand us before we do the",
    "start": "3462000",
    "end": "3473000"
  },
  {
    "text": "analysis.\nWhy is it that I want to pick the middle of the big array\nrather than the small array?",
    "start": "3473000",
    "end": "3485000"
  },
  {
    "text": "What sort of my rationale\nthere?",
    "start": "3485000",
    "end": "3493000"
  },
  {
    "text": "That's actually a key part,\ngoing to be a key part of the",
    "start": "3493000",
    "end": "3507000"
  },
  {
    "text": "analysis.\nYeah? OK.\nYeah, imagine that B,",
    "start": "3507000",
    "end": "3516000"
  },
  {
    "text": "for example,\nhad only one element in it, OK, or just a few elements,\nthen finding it in A might mean",
    "start": "3516000",
    "end": "3526000"
  },
  {
    "text": "finding it right near the\nbeginning of A. And now, I'd be left with\nsubproblems that were very big,",
    "start": "3526000",
    "end": "3536000"
  },
  {
    "text": "whereas here,\nas you're pointing out, if I start here,\nif my total number of elements",
    "start": "3536000",
    "end": "3544000"
  },
  {
    "text": "is n, what's the smallest that\none of these recursions could",
    "start": "3544000",
    "end": "3551000"
  },
  {
    "text": "be?\nn over 4 is the smallest it could be, OK,\nbecause I would have at least a",
    "start": "3551000",
    "end": "3558000"
  },
  {
    "text": "quarter of the total number of\nelements to the left here or to the right here.\nIf I do it the other way",
    "start": "3558000",
    "end": "3566000"
  },
  {
    "text": "around, my recursion,\nI might get a recursion that was nearly as big as n,\nand that's sort of,",
    "start": "3566000",
    "end": "3573000"
  },
  {
    "text": "once again, sort of like the\ndifference when we were analyzing quick sort with\nwhether we got a good",
    "start": "3573000",
    "end": "3581000"
  },
  {
    "text": "partitioning element or not.\nThe partitioning element is somewhere in the middle,\nwe're really good,",
    "start": "3581000",
    "end": "3589000"
  },
  {
    "text": "but it's always at one end,\nit's no better than insertion sort.\nYou want to cut off at least a constant fraction in your\ndivided and conquered in order",
    "start": "3589000",
    "end": "3597000"
  },
  {
    "text": "to get the logarithmic behavior.\nOK, so we'll see that in the",
    "start": "3597000",
    "end": "3602326"
  },
  {
    "text": "analysis.\nBut the key thing here is that what we are going to do the\nrecursion, we're going to have",
    "start": "3602326",
    "end": "3610302"
  },
  {
    "text": "at least n over 4 elements in\nwhatever the smaller thing is. OK, but let's start.\nIt turns out the work is the",
    "start": "3610302",
    "end": "3619192"
  },
  {
    "text": "hard part of this.\nLet's start with critical path length.\nOK, look at that,",
    "start": "3619192",
    "end": "3625174"
  },
  {
    "text": "critical path length.\nOK, so parallel merge,",
    "start": "3625175",
    "end": "3632045"
  },
  {
    "text": "so infinity of n is going to\nbe, at most, so if the smaller",
    "start": "3632045",
    "end": "3642712"
  },
  {
    "text": "piece has at least a quarter,\nwhat's the larger piece going",
    "start": "3642712",
    "end": "3653379"
  },
  {
    "text": "to be of these two things here?\nSo, we have two problems",
    "start": "3653379",
    "end": "3663588"
  },
  {
    "text": "responding off.\nNow, we really have to do max",
    "start": "3663588",
    "end": "3670165"
  },
  {
    "text": "because they're not symmetric.\nWhich one's going to be worse?",
    "start": "3670166",
    "end": "3679136"
  },
  {
    "text": "One could have,\nat most, three quarters,",
    "start": "3679136",
    "end": "3684966"
  },
  {
    "text": "OK, of n.\nWoops, 3n, of 3n over 4 plus,",
    "start": "3684966",
    "end": "3690647"
  },
  {
    "text": "OK, so the worst of those two\nis going to be three quarters of",
    "start": "3690647",
    "end": "3699767"
  },
  {
    "text": "the elements plus,\nwhat?",
    "start": "3699767",
    "end": "3705000"
  },
  {
    "text": "Plus log n.\nWhat's the log n?",
    "start": "3705000",
    "end": "3712000"
  },
  {
    "text": "The binary search.\nOK, and that gives me a",
    "start": "3712000",
    "end": "3722250"
  },
  {
    "text": "solution of, this ends up being\nn to the, what?",
    "start": "3722250",
    "end": "3735000"
  },
  {
    "text": "n to the zero,\nright. OK, it's n to the log base four\nthirds of one.",
    "start": "3735000",
    "end": "3740995"
  },
  {
    "text": "OK, it was the log of anything\nof one is zero. So, it's n to the zero.\nSo that's just one compared",
    "start": "3740996",
    "end": "3749760"
  },
  {
    "text": "with log n, tack on this log\nsquared n. So, we have a critical path of\nlog squared n.",
    "start": "3749760",
    "end": "3757324"
  },
  {
    "text": "That's good news.\nNow, let's hope that we didn't",
    "start": "3757324",
    "end": "3764090"
  },
  {
    "text": "blow up the work by a\nsubstantial amount.",
    "start": "3764090",
    "end": "3769545"
  },
  {
    "text": "OK, so the work is PM_1 of n is\nequal to, OK,",
    "start": "3769545",
    "end": "3775545"
  },
  {
    "text": "so we don't know what the split\nis.",
    "start": "3775545",
    "end": "3781000"
  },
  {
    "text": "So let's call it alpha.\nOK, so alpha n in one side,",
    "start": "3781000",
    "end": "3787529"
  },
  {
    "text": "and then the work on the other\nside will be PM of one of one",
    "start": "3787529",
    "end": "3795235"
  },
  {
    "text": "minus alpha n plus,\nand then still order of log n",
    "start": "3795235",
    "end": "3801503"
  },
  {
    "text": "to the binary search where,\nas we've said,",
    "start": "3801503",
    "end": "3806858"
  },
  {
    "text": "alpha is going to fall between\none quarter and three quarters.",
    "start": "3806858",
    "end": "3816000"
  },
  {
    "start": "3816000",
    "end": "3826000"
  },
  {
    "text": "OK, how do we solve a\nrecurrence like this?",
    "start": "3826000",
    "end": "3831090"
  },
  {
    "text": "What's the technical name for\nthis kind of recurrence?",
    "start": "3831090",
    "end": "3837515"
  },
  {
    "text": "Hairy.\nIt's a hairy recurrence. How do we solve hairy\nrecurrences?",
    "start": "3837515",
    "end": "3846000"
  },
  {
    "text": "Substitution.\nOK, good. Substitution.\nOK, so we're going to say PM",
    "start": "3846000",
    "end": "3855502"
  },
  {
    "text": "one of k is less than or equal\nto, OK, I want to make a good",
    "start": "3855502",
    "end": "3864401"
  },
  {
    "text": "guess here, OK,\nbecause I've fooled around with",
    "start": "3864402",
    "end": "3871340"
  },
  {
    "text": "it.\nI want it to be linear, so it's going to have a linear\nterm, a times k minus,",
    "start": "3871340",
    "end": "3877869"
  },
  {
    "text": "and then I'm going to do b log\nk. So, this is this trick of\nsubtracting a low order term.",
    "start": "3877870",
    "end": "3883454"
  },
  {
    "text": "Remember that in substitution\nin order to make it stronger? If I just did ak it's not going\nto work because here I would get",
    "start": "3883454",
    "end": "3891311"
  },
  {
    "text": "n, and then when I did this\nsubstitution I'm going to get a alpha n, and then a one minus\nalpha n, and those two together",
    "start": "3891311",
    "end": "3898974"
  },
  {
    "text": "are already going to add up to\neverything here. So, there's no way I'm going to\nget it down when I add this term",
    "start": "3898974",
    "end": "3908411"
  },
  {
    "text": "in.\nSo, I need to subtract something from both of these so\nas to absorb this term,",
    "start": "3908411",
    "end": "3915196"
  },
  {
    "text": "OK?\nSo, I'm skipping over those steps, OK, because we did those\nsteps in lecture two or",
    "start": "3915196",
    "end": "3922411"
  },
  {
    "text": "something.\nOK, so that's the thing I'm going to guess where a and b are\ngreater than zero.",
    "start": "3922411",
    "end": "3931000"
  },
  {
    "text": "OK, so let's do the\nsubstitution. ",
    "start": "3931000",
    "end": "3946000"
  },
  {
    "text": "OK, so we have PM one of n is\nless than or equal to,",
    "start": "3946000",
    "end": "3952000"
  },
  {
    "text": "OK, we substitute this\ninductive hypothesis in for",
    "start": "3952000",
    "end": "3957764"
  },
  {
    "text": "these two guys.\nSo, we get a alpha n minus b log of alpha n plus a of one\nminus alpha n minus b log of one",
    "start": "3957764",
    "end": "3967023"
  },
  {
    "text": "minus alpha, maybe another\nparentheses there, one minus alpha n,\nand even leave myself enough",
    "start": "3967023",
    "end": "3974205"
  },
  {
    "text": "space here plus a of one minus\nalpha n minus b log of one minus alpha, maybe another parenthesis\nthere, one minus alpha n.",
    "start": "3974206",
    "end": "3983704"
  },
  {
    "text": "I didn't even leave myself\nenough space here. Plus, let me just move this\nover so I don't end up using too",
    "start": "3983704",
    "end": "3991924"
  },
  {
    "text": "much space.\nSo, b log of one minus alpha n",
    "start": "3991924",
    "end": "3999704"
  },
  {
    "text": "plus theta of log n.\nHow's that?",
    "start": "3999704",
    "end": "4005598"
  },
  {
    "text": "Are we OK on that?\nOK, so that's just",
    "start": "4005598",
    "end": "4012442"
  },
  {
    "text": "substitution.\nLet's do a little algebra.",
    "start": "4012443",
    "end": "4021000"
  },
  {
    "text": "That's equal to a of times\nalpha na times one minus alpha",
    "start": "4021000",
    "end": "4027977"
  },
  {
    "text": "n.\nThat's just an, OK, minus, well,\nthe b isn't quite so simple.",
    "start": "4027977",
    "end": "4035578"
  },
  {
    "text": "OK, so I have a b term.\nNow I've got a whole bunch of",
    "start": "4035578",
    "end": "4042057"
  },
  {
    "text": "stuff there.\nI've got log of alpha n. I have, then,\nthis log of one minus alpha n,",
    "start": "4042057",
    "end": "4051900"
  },
  {
    "text": "OK, I'll start with the n,\nand then plus theta log n.",
    "start": "4051900",
    "end": "4060000"
  },
  {
    "text": "Did I do that right?\nDoes that look OK?",
    "start": "4060000",
    "end": "4065947"
  },
  {
    "text": "OK, so look at that.\nOK, so now let's just multiply",
    "start": "4065947",
    "end": "4073773"
  },
  {
    "text": "some of this stuff out.\nSo, I have an minus b times,",
    "start": "4073773",
    "end": "4081942"
  },
  {
    "text": "well, log of alpha n is just\nlog alpha plus log n.",
    "start": "4081943",
    "end": "4088845"
  },
  {
    "text": "And then I have plus log of one\nminus alpha plus log n,",
    "start": "4088845",
    "end": "4096450"
  },
  {
    "text": "OK, plus theta log n.\nThat's just more algebra,",
    "start": "4096450",
    "end": "4102929"
  },
  {
    "text": "OK, using our rules for logs.\nNow let me express this as my",
    "start": "4102929",
    "end": "4112035"
  },
  {
    "text": "solution minus my desired\nsolution minus a residual,",
    "start": "4112035",
    "end": "4119130"
  },
  {
    "text": "an minus b log n,\nOK, minus, OK, and so that was one of these b\nlog n's, right,",
    "start": "4119131",
    "end": "4129707"
  },
  {
    "text": "is here.\nAnd the other one's going to",
    "start": "4129707",
    "end": "4134717"
  },
  {
    "text": "end up in here.\nI have B times log n plus log",
    "start": "4134718",
    "end": "4140840"
  },
  {
    "text": "of alpha times one minus alpha\nminus, oops, I've got too many.",
    "start": "4140841",
    "end": "4151000"
  },
  {
    "text": "Do I have the right number of\ncloses.",
    "start": "4151000",
    "end": "4157715"
  },
  {
    "text": "Close that, close that,\nthat's good,",
    "start": "4157716",
    "end": "4164245"
  },
  {
    "text": "minus theta log n.\nTwo there.",
    "start": "4164246",
    "end": "4169470"
  },
  {
    "text": "Boy, my writing is degrading.\nOK, did I do that right?",
    "start": "4169470",
    "end": "4178895"
  },
  {
    "text": "Do I have the parentheses\nright? That matches,\nthat matches,",
    "start": "4178895",
    "end": "4185774"
  },
  {
    "text": "that matches,\ngood. And then B goes to that,\nOK, good.",
    "start": "4185774",
    "end": "4191931"
  },
  {
    "text": "OK, and I claim that is less\nthan or equal to AN minus B log",
    "start": "4191931",
    "end": "4199051"
  },
  {
    "text": "n if we choose B large enough.\nOK, this mess dominates this",
    "start": "4199051",
    "end": "4209860"
  },
  {
    "text": "because this is basically a log\nn here, and this is essentially",
    "start": "4209860",
    "end": "4222837"
  },
  {
    "text": "a constant.\nOK, so if I increase B,",
    "start": "4222837",
    "end": "4229952"
  },
  {
    "text": "OK, times log n,\nI can overcome that log n,",
    "start": "4229952",
    "end": "4240000"
  },
  {
    "text": "whatever the constant is,\nhidden by the asymptotic",
    "start": "4240000",
    "end": "4247587"
  },
  {
    "text": "notation, OK,\nsuch that B times log n plus",
    "start": "4247587",
    "end": "4253934"
  },
  {
    "text": "log of alpha times one minus\nalpha dominates the theta log n.",
    "start": "4253934",
    "end": "4264000"
  },
  {
    "text": "OK, and I can also choose my\nbase condition to be big enough",
    "start": "4264000",
    "end": "4273961"
  },
  {
    "text": "to handle the initial\nconditions, whatever they might",
    "start": "4273961",
    "end": "4282739"
  },
  {
    "text": "be.\nOK, so we'll choose A big enough --",
    "start": "4282740",
    "end": "4290000"
  },
  {
    "start": "4290000",
    "end": "4308000"
  },
  {
    "text": "-- to satisfy the base of the\ninduction.",
    "start": "4308000",
    "end": "4315172"
  },
  {
    "text": "OK, so thus PM_1 of n is equal\nto theta n, OK?",
    "start": "4315172",
    "end": "4324000"
  },
  {
    "text": "So I actually showed O,\nand it turns out, the lower bound that it is\nomega n is more straightforward",
    "start": "4324000",
    "end": "4332207"
  },
  {
    "text": "because the recurrence is easier\nbecause I can do the same substitution.\nI just don't have to subtract",
    "start": "4332207",
    "end": "4340584"
  },
  {
    "text": "off low order terms.\nOK, so it's actually theta, not just O.\nOK, so that gives us a log,",
    "start": "4340584",
    "end": "4347776"
  },
  {
    "text": "what did we say the critical\npath was? The critical path is log\nsquared n for the parallel",
    "start": "4347776",
    "end": "4355138"
  },
  {
    "text": "merge.\nSo, let's do the analysis of",
    "start": "4355138",
    "end": "4360787"
  },
  {
    "text": "merge sort using this.\nSo, the work is,",
    "start": "4360787",
    "end": "4365927"
  },
  {
    "text": "as we know already,\nT_1 of n is theta of n log n",
    "start": "4365927",
    "end": "4372284"
  },
  {
    "text": "because our work that we just\nanalyzed was order n,",
    "start": "4372285",
    "end": "4379048"
  },
  {
    "text": "same as for the serial\nalgorithm, OK?",
    "start": "4379048",
    "end": "4385000"
  },
  {
    "text": "The critical path length,\nnow, is T infinity of n is",
    "start": "4385000",
    "end": "4390481"
  },
  {
    "text": "equal to, OK,\nso in normal merge sort, we have a problem of half the\nsize, T of n over 2 plus,",
    "start": "4390481",
    "end": "4400261"
  },
  {
    "text": "now, my critical path for\nmerging is not order n as it was",
    "start": "4400261",
    "end": "4406387"
  },
  {
    "text": "before.\nInstead, it's just over there.",
    "start": "4406387",
    "end": "4417428"
  },
  {
    "text": "Log squared n,\nthere we go.",
    "start": "4417428",
    "end": "4425600"
  },
  {
    "text": "OK, and so that gives us theta\nof log cubed n.",
    "start": "4425600",
    "end": "4441000"
  },
  {
    "text": "So, our parallelism is then\ntheta of n over log cubed n.",
    "start": "4441000",
    "end": "4450312"
  },
  {
    "text": "And, in fact,\nthe best that's been done is,",
    "start": "4450312",
    "end": "4457423"
  },
  {
    "text": "sorry, log squared n,\nyou're right.",
    "start": "4457423",
    "end": "4463178"
  },
  {
    "text": "Log squared n because it's n\nlog n over log cubed n.",
    "start": "4463179",
    "end": "4473000"
  },
  {
    "text": "It's n over log squared n,\nOK? And the best,\nso now I wonder if I have a",
    "start": "4473000",
    "end": "4483106"
  },
  {
    "text": "typo here.\nI have that the best is, p bar is theta of n over log n.\nIs that right?",
    "start": "4483106",
    "end": "4494676"
  },
  {
    "text": "I think so.\nYeah, that's the best to date.",
    "start": "4494676",
    "end": "4502000"
  },
  {
    "text": "That's the best to date.\nBy Occoli, I believe, is who did this.\nOK, so you can actually get a",
    "start": "4502000",
    "end": "4509153"
  },
  {
    "text": "fairly good, but it turns out\nsorting is a really tough problem to parallelize to get\nreally good constants where you",
    "start": "4509153",
    "end": "4518215"
  },
  {
    "text": "want to make it so it's running\nexactly the same. Matrix multiplication,\nyou can make it run in parallel",
    "start": "4518215",
    "end": "4526242"
  },
  {
    "text": "and get straight,\nhard rail, linear speed up with a number of processors.\nThere is plenty of parallelism,",
    "start": "4526243",
    "end": "4535356"
  },
  {
    "text": "and running on more processors,\nevery processor carries a full weight.\nWith sorting,",
    "start": "4535356",
    "end": "4541514"
  },
  {
    "text": "typically you lose,\nI don't know, 20% in my experience,\nOK, in terms of other stuff",
    "start": "4541514",
    "end": "4547595"
  },
  {
    "text": "going on because you have to\nwork really hard to get the constants of this merge\nalgorithm down to the constants",
    "start": "4547596",
    "end": "4555883"
  },
  {
    "text": "of that normal merge,\nright? I mean that's a pretty good\nalgorithm, right,",
    "start": "4555883",
    "end": "4562337"
  },
  {
    "text": "the one that just goes,\nBUZZING SOUND, and just takes two lists and\nmerges them like that.",
    "start": "4562337",
    "end": "4568934"
  },
  {
    "text": "So, it's an interesting issue.\nAnd a lot of people work very hard on sorting,\nbecause it's a hugely important",
    "start": "4568934",
    "end": "4576975"
  },
  {
    "text": "problem, and how it is that you\ncan actually get the constants down while still guaranteeing\nthat it will scale up with a",
    "start": "4576975",
    "end": "4585924"
  },
  {
    "text": "number of processors.\nOK, that's our little sojourn into parallel land,\nand next week we're going to",
    "start": "4585924",
    "end": "4593281"
  },
  {
    "text": "talk about caching,\nwhich is another very important area of algorithms,\nand of programming in general.",
    "start": "4593281",
    "end": "4600000"
  }
]