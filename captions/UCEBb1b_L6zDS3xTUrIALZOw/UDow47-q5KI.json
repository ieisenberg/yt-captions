[
  {
    "start": "0",
    "end": "179000"
  },
  {
    "text": "We'll describe the operation of the FSM for\nour combination lock using a state transition",
    "start": "1449",
    "end": "6529"
  },
  {
    "text": "diagram.",
    "start": "6529",
    "end": "7540"
  },
  {
    "text": "Initially, the FSM has received no bits of\nthe combination, a state we'll call SX.",
    "start": "7540",
    "end": "14170"
  },
  {
    "text": "In the state transition diagram, states are\nrepresented as circles, each labeled for now",
    "start": "14170",
    "end": "18800"
  },
  {
    "text": "with a symbolic name chosen to remind us of\nwhat history it represents.",
    "start": "18800",
    "end": "23599"
  },
  {
    "text": "For this FSM, the unlock output U will be\na function of the current state, so we'll",
    "start": "23600",
    "end": "30321"
  },
  {
    "text": "indicate the value of U inside the circle.",
    "start": "30321",
    "end": "33730"
  },
  {
    "text": "Since in state SX we know nothing about past\ninput bits, the lock should stay locked and",
    "start": "33730",
    "end": "38980"
  },
  {
    "text": "so U = 0.",
    "start": "38980",
    "end": "41620"
  },
  {
    "text": "We'll indicate the initial state with a wide\nborder on the circle.",
    "start": "41620",
    "end": "46930"
  },
  {
    "text": "We'll use the successive states to remember\nwhat we've seen so far of the input combination.",
    "start": "46930",
    "end": "52350"
  },
  {
    "text": "So if the FSM is in state SX and it receives\na 0 input, it should transition to state S0",
    "start": "52350",
    "end": "59320"
  },
  {
    "text": "to remind us that we've seen the first bit\nof the combination of 0-1-1-0.",
    "start": "59320",
    "end": "65250"
  },
  {
    "text": "We use arrows to indicate transitions between\nstates and each arrow has a label telling",
    "start": "65250",
    "end": "69880"
  },
  {
    "text": "us when that transition should occur.",
    "start": "69880",
    "end": "72048"
  },
  {
    "text": "So this particular arrow is telling us that\nwhen the FSM is in state SX and the next input",
    "start": "72049",
    "end": "78289"
  },
  {
    "text": "is a 0, the FSM should transition to state\nS0.",
    "start": "78289",
    "end": "83909"
  },
  {
    "text": "Transitions are triggered by the rising edge\nof the FSM's clock input.",
    "start": "83909",
    "end": "88450"
  },
  {
    "text": "Let's add the states for the remainder of\nthe specified combination.",
    "start": "88450",
    "end": "92310"
  },
  {
    "text": "The rightmost state, S0110, represents the\npoint at which the FSM has detected the specified",
    "start": "92310",
    "end": "98850"
  },
  {
    "text": "sequence of inputs, so the unlock signal is\n1 in this state.",
    "start": "98850",
    "end": "104149"
  },
  {
    "text": "Looking at the state transition diagram, we\nsee that if the FSM starts in state SX, the",
    "start": "104149",
    "end": "110529"
  },
  {
    "text": "input sequence 0-1-1-0 will leave the FSM\nin state S0110.",
    "start": "110529",
    "end": "117349"
  },
  {
    "text": "So far, so good.",
    "start": "117349",
    "end": "119130"
  },
  {
    "text": "What should the FSM do if an input bit is\nnot the next bit in the combination?",
    "start": "119130",
    "end": "123718"
  },
  {
    "text": "For example, if the FSM is in state SX and\nthe input bit is a 1, it still has not received",
    "start": "123719",
    "end": "129979"
  },
  {
    "text": "any correct combination bits, so the next\nstate is SX again.",
    "start": "129979",
    "end": "135629"
  },
  {
    "text": "Here are the appropriate non-combination transitions\nfor the other states.",
    "start": "135629",
    "end": "140239"
  },
  {
    "text": "Note that an incorrect combination entry doesn't\nnecessarily take the FSM to state SX.",
    "start": "140239",
    "end": "146739"
  },
  {
    "text": "For example, if the FSM is in state S0110,\nthe last four input bits have been 0-1-1-0.",
    "start": "146739",
    "end": "156200"
  },
  {
    "text": "If the next input is a 1, then the last four\ninputs bits are now 1-1-0-1, which won't lead",
    "start": "156200",
    "end": "162870"
  },
  {
    "text": "to an open lock.",
    "start": "162870",
    "end": "164849"
  },
  {
    "text": "But the last two bits might be the first two\nbits of a valid combination sequence and so",
    "start": "164849",
    "end": "170689"
  },
  {
    "text": "the FSM transitions to S01, indicating that\na sequence of 0-1 has been entered over the",
    "start": "170689",
    "end": "177010"
  },
  {
    "text": "last two bits.",
    "start": "177010",
    "end": "179390"
  },
  {
    "start": "179000",
    "end": "179000"
  },
  {
    "text": "We've been working with an FSM where the outputs\nare function of the current state, called",
    "start": "179390",
    "end": "183909"
  },
  {
    "text": "a Moore machine.",
    "start": "183909",
    "end": "185629"
  },
  {
    "text": "Here the outputs are written inside the state\ncircle.",
    "start": "185629",
    "end": "189439"
  },
  {
    "text": "If the outputs are a function of both the\ncurrent state and the current inputs, it's",
    "start": "189439",
    "end": "193400"
  },
  {
    "text": "called a Mealy machine.",
    "start": "193400",
    "end": "194890"
  },
  {
    "text": "Since the transitions are also a function\nof the current state and current inputs, we'll",
    "start": "194890",
    "end": "199880"
  },
  {
    "text": "label each transition with appropriate output\nvalues using a slash to separate input values",
    "start": "199880",
    "end": "205469"
  },
  {
    "text": "from output values.",
    "start": "205469",
    "end": "207090"
  },
  {
    "text": "So, looking at the state transition diagram\non the right, suppose the FSM is in state",
    "start": "207090",
    "end": "213019"
  },
  {
    "text": "S3.",
    "start": "213019",
    "end": "215040"
  },
  {
    "text": "If the input is a 0, look for the arrow leaving\nS3 labeled \"0/\".",
    "start": "215040",
    "end": "219129"
  },
  {
    "text": "The value after the slash tells us the output\nvalue, in this case 1.",
    "start": "219130",
    "end": "225359"
  },
  {
    "text": "If the input had been a 1, the output value\nwould be 0.",
    "start": "225359",
    "end": "231120"
  },
  {
    "text": "There are some simple rules we can use to\ncheck that a state transition diagram is well",
    "start": "231120",
    "end": "235349"
  },
  {
    "text": "formed.",
    "start": "235349",
    "end": "236700"
  },
  {
    "text": "The transitions from a particular state must\nbe mutually exclusive, i.e., for a each state,",
    "start": "236700",
    "end": "242349"
  },
  {
    "text": "there can't be more than one transition with\nthe same input label.",
    "start": "242349",
    "end": "246549"
  },
  {
    "text": "This makes sense: if the FSM is to operate\nconsistently there can't be any ambiguity",
    "start": "246549",
    "end": "251560"
  },
  {
    "text": "about the next state for a given current state\nand input.",
    "start": "251560",
    "end": "255170"
  },
  {
    "text": "By \"consistently\" we mean that the FSM should\nmake the same transitions if it's restarted",
    "start": "255170",
    "end": "260700"
  },
  {
    "text": "at the same starting state and given the same\ninput sequences.",
    "start": "260700",
    "end": "264950"
  },
  {
    "text": "Moreover, the transitions leaving each state\nshould be collectively exhaustive, i.e., there",
    "start": "264950",
    "end": "271711"
  },
  {
    "text": "should a transition specified for each possible\ninput value.",
    "start": "271711",
    "end": "276730"
  },
  {
    "text": "If we wish the FSM to stay in it's current\nstate for that particular input value, we",
    "start": "276730",
    "end": "281390"
  },
  {
    "text": "need to show a transition from the current\nstate back to itself.",
    "start": "281390",
    "end": "286230"
  },
  {
    "text": "With these rules there will be exactly one\ntransition selected for every combination",
    "start": "286230",
    "end": "290560"
  },
  {
    "text": "of current state and input value.",
    "start": "290560",
    "end": "294830"
  },
  {
    "start": "294000",
    "end": "294000"
  },
  {
    "text": "All the information in a state transition\ndiagram can be represented in tabular form",
    "start": "294830",
    "end": "299449"
  },
  {
    "text": "as a truth table.",
    "start": "299450",
    "end": "301360"
  },
  {
    "text": "The rows of the truth table list all the possible\ncombinations of current state and inputs.",
    "start": "301360",
    "end": "306330"
  },
  {
    "text": "And the output columns of the truth table\ntell us the next state and output value associated",
    "start": "306330",
    "end": "311449"
  },
  {
    "text": "with each row.",
    "start": "311450",
    "end": "313990"
  },
  {
    "text": "If we substitute binary values for the symbolic\nstate names, we end up with a truth table",
    "start": "313990",
    "end": "319150"
  },
  {
    "text": "just like the ones we saw in Chapter 4.",
    "start": "319150",
    "end": "322380"
  },
  {
    "text": "If we have K states in our state transition\ndiagram we'll need log_2(K) state bits, rounded",
    "start": "322380",
    "end": "328680"
  },
  {
    "text": "up to the next integer since we don't have\nfractional bits!",
    "start": "328680",
    "end": "331949"
  },
  {
    "text": "In our example, we have a 5-state FSM, so\nwe'll need 3 state bits.",
    "start": "331950",
    "end": "338740"
  },
  {
    "text": "We can assign the state encodings in any convenient\nway, e.g., 000 for the first state, 001 for",
    "start": "338740",
    "end": "345560"
  },
  {
    "text": "the second state, and so on.",
    "start": "345560",
    "end": "348389"
  },
  {
    "text": "But the choice of state encodings can have\na big effect on the logic needed to implement",
    "start": "348390",
    "end": "352360"
  },
  {
    "text": "the truth table.",
    "start": "352360",
    "end": "353379"
  },
  {
    "text": "It's actually fun to figure out the state\nencoding that produces the simplest possible",
    "start": "353380",
    "end": "358050"
  },
  {
    "text": "logic.",
    "start": "358050",
    "end": "360169"
  },
  {
    "text": "With a truth table in hand, we can use the\ntechniques from Chapter 4 to design logic",
    "start": "360170",
    "end": "364830"
  },
  {
    "text": "circuits that implement the combinational\nlogic for the FSM.",
    "start": "364830",
    "end": "368090"
  },
  {
    "text": "Of course, we can take the easy way out and\nsimply use a read-only memory to do the job!",
    "start": "368090",
    "end": "375100"
  },
  {
    "start": "375000",
    "end": "375000"
  },
  {
    "text": "In this circuit, a read-only memory is used\nto compute the next state and outputs from",
    "start": "375100",
    "end": "379310"
  },
  {
    "text": "the current state and inputs.",
    "start": "379310",
    "end": "382010"
  },
  {
    "text": "We're encoding the 5 states of the FSM using\na 3-bit binary value, so we have a 3-bit state",
    "start": "382010",
    "end": "387720"
  },
  {
    "text": "register.",
    "start": "387720",
    "end": "388720"
  },
  {
    "text": "The rectangle with the edge-triggered input\nis schematic shorthand for a multi-bit register.",
    "start": "388720",
    "end": "394840"
  },
  {
    "text": "If a wire in the diagram represents a multi-bit\nsignal, we use a little slash across the wire",
    "start": "394840",
    "end": "400340"
  },
  {
    "text": "with a number to indicate how many bits are\nin the signal.",
    "start": "400340",
    "end": "404440"
  },
  {
    "text": "In this example, both current_state and next_state\nare 3-bit signals.",
    "start": "404440",
    "end": "407500"
  },
  {
    "text": "The read-only memory has a total of 4 input\nsignals - 3 for the current state and 1 for",
    "start": "407500",
    "end": "414930"
  },
  {
    "text": "the input value -\nso the read-only memory has 2^4 or 16 locations,",
    "start": "414930",
    "end": "420470"
  },
  {
    "text": "which correspond to the 16 rows in the truth\ntable.",
    "start": "420470",
    "end": "424680"
  },
  {
    "text": "Each location in the ROM supplies the output\nvalues for a particular row of the truth table.",
    "start": "424680",
    "end": "430770"
  },
  {
    "text": "Since we have 4 output signals - 3 for the\nnext state and 1 for the output value - each",
    "start": "430770",
    "end": "436120"
  },
  {
    "text": "location supplies 4 bits of information.",
    "start": "436120",
    "end": "440510"
  },
  {
    "text": "Memories are often annotated with their number\nof locations and the number of bits in each",
    "start": "440510",
    "end": "445020"
  },
  {
    "text": "location.",
    "start": "445020",
    "end": "446500"
  },
  {
    "text": "So our memory is a 16-by-4 ROM: 16 locations\nof 4-bits each.",
    "start": "446500",
    "end": "452700"
  },
  {
    "text": "Of course, in order for the state registers\nto work correctly, we need to ensure that",
    "start": "452700",
    "end": "458110"
  },
  {
    "text": "the dynamic discipline is obeyed.",
    "start": "458110",
    "end": "461219"
  },
  {
    "text": "We can use the timing analysis techniques\ndescribed at the end of Chapter 5 to check",
    "start": "461220",
    "end": "465530"
  },
  {
    "text": "that this is so.",
    "start": "465530",
    "end": "467639"
  },
  {
    "text": "For now, we'll assume that the timing of transitions\non the inputs are properly synchronized with",
    "start": "467640",
    "end": "472150"
  },
  {
    "text": "the rising edges of the clock.",
    "start": "472150",
    "end": "473870"
  },
  {
    "text": "So now we have the FSM abstraction to use\nwhen designing the functionality of a sequential",
    "start": "473870",
    "end": "479600"
  },
  {
    "start": "474000",
    "end": "474000"
  },
  {
    "text": "logic system, and a general-purpose circuit\nimplementation of the FSM using a ROM and",
    "start": "479600",
    "end": "485260"
  },
  {
    "text": "a multi-bit state register.",
    "start": "485260",
    "end": "487240"
  },
  {
    "text": "Recapping our design choices: the output bits\ncan be strictly a function of the current",
    "start": "487240",
    "end": "492370"
  },
  {
    "text": "state (the FSM would then be called a Moore\nmachine),",
    "start": "492370",
    "end": "496250"
  },
  {
    "text": "or they can be a function of both the current\nstate and current inputs, in which case the",
    "start": "496250",
    "end": "500600"
  },
  {
    "text": "FSM is called a Mealy machine.",
    "start": "500600",
    "end": "503720"
  },
  {
    "text": "We can choose the number of state bits - S\nstate bits will give us the ability to encode",
    "start": "503720",
    "end": "508520"
  },
  {
    "text": "2^S possible states.",
    "start": "508520",
    "end": "511520"
  },
  {
    "text": "Note that each extra state bit DOUBLES the\nnumber of locations in the ROM!",
    "start": "511520",
    "end": "516630"
  },
  {
    "text": "So when using ROMs to implement the necessary\nlogic, we're very interested in minimizing",
    "start": "516630",
    "end": "521450"
  },
  {
    "text": "the number of state bits.",
    "start": "521450",
    "end": "524920"
  },
  {
    "text": "The waveforms for our circuitry are pretty\nstraightforward.",
    "start": "524920",
    "end": "528389"
  },
  {
    "text": "The rising edge of the clock triggers a transition\nin the state register outputs.",
    "start": "528390",
    "end": "534170"
  },
  {
    "text": "The ROM then does its thing, calculating the\nnext state, which becomes valid at some point",
    "start": "534170",
    "end": "538769"
  },
  {
    "text": "in the clock cycle.",
    "start": "538770",
    "end": "540890"
  },
  {
    "text": "This is the value that gets loaded into the\nstate registers at the next rising clock edge.",
    "start": "540890",
    "end": "546620"
  },
  {
    "text": "This process repeats over-and-over as the\nFSM follows the state transitions dictated",
    "start": "546620",
    "end": "551370"
  },
  {
    "text": "by the state transition diagram.",
    "start": "551370",
    "end": "554550"
  },
  {
    "start": "554000",
    "end": "554000"
  },
  {
    "text": "There are a few housekeeping details that\nneed our attention.",
    "start": "554550",
    "end": "558690"
  },
  {
    "text": "On start-up we need some way to set the initial\ncontents of the state register to the correct",
    "start": "558690",
    "end": "563250"
  },
  {
    "text": "encoding for the initial state.",
    "start": "563250",
    "end": "566300"
  },
  {
    "text": "Many designs use a RESET signal that's set\nto 1 to force some initial state and then",
    "start": "566300",
    "end": "570990"
  },
  {
    "text": "set to 0 to start execution.",
    "start": "570990",
    "end": "574260"
  },
  {
    "text": "We could adopt that approach here, using the\nRESET signal to select an initial value to",
    "start": "574260",
    "end": "579340"
  },
  {
    "text": "be loaded into the state register.",
    "start": "579340",
    "end": "583360"
  },
  {
    "text": "In our example, we used a 3-bit state encoding\nwhich would allow us to implement an FSM with",
    "start": "583360",
    "end": "588610"
  },
  {
    "text": "up to 2^3 = 8 states.",
    "start": "588610",
    "end": "592180"
  },
  {
    "text": "We're only using 5 of these encodings, which\nmeans there are locations in the ROM we'll",
    "start": "592180",
    "end": "596240"
  },
  {
    "text": "never access.",
    "start": "596240",
    "end": "597240"
  },
  {
    "text": "If that's a concern, we can always use logic\ngates to implement the necessary combinational",
    "start": "597240",
    "end": "602700"
  },
  {
    "text": "logic instead of ROMs.",
    "start": "602700",
    "end": "606460"
  },
  {
    "text": "Suppose the state register somehow got loaded\nwith one of the unused encodings?",
    "start": "606460",
    "end": "611160"
  },
  {
    "text": "Well, that would be like being in a state\nthat's not listed in our state transition",
    "start": "611160",
    "end": "615370"
  },
  {
    "text": "diagram.",
    "start": "615370",
    "end": "616860"
  },
  {
    "text": "One way to defend against this problem is\ndesign the ROM contents so that unused states",
    "start": "616860",
    "end": "622010"
  },
  {
    "text": "always point to the initial state.",
    "start": "622010",
    "end": "625840"
  },
  {
    "text": "In theory the problem should never arise,\nbut with this fix at least it won't lead to",
    "start": "625840",
    "end": "630000"
  },
  {
    "text": "unknown behavior.",
    "start": "630000",
    "end": "632050"
  },
  {
    "text": "We mentioned earlier the interesting problem\nof finding a state encoding that minimized",
    "start": "632050",
    "end": "637709"
  },
  {
    "text": "the combinational logic.",
    "start": "637710",
    "end": "640730"
  },
  {
    "text": "There are computer-aided design tools to help\ndo this as part of the larger problem of finding",
    "start": "640730",
    "end": "646019"
  },
  {
    "text": "minimal logic implementations for Boolean\nfunctions.",
    "start": "646020",
    "end": "650760"
  },
  {
    "text": "Mr. Blue is showing us another approach to\nbuilding the state register for the combination",
    "start": "650760",
    "end": "654760"
  },
  {
    "text": "lock:\nuse a shift register to capture the last four",
    "start": "654760",
    "end": "658350"
  },
  {
    "text": "input bits, then simply look at the recorded\nhistory to determine if it matches the combination.",
    "start": "658350",
    "end": "664740"
  },
  {
    "text": "No fancy next0state logic here!",
    "start": "664740",
    "end": "667230"
  },
  {
    "text": "Finally, we still have to address the problem\nof ensuring that input transitions don't violate",
    "start": "667230",
    "end": "672220"
  },
  {
    "text": "the dynamic discipline for the state register.",
    "start": "672220",
    "end": "675420"
  },
  {
    "text": "We'll get to this in the last section of this\nchapter.",
    "start": "675420",
    "end": "677709"
  }
]