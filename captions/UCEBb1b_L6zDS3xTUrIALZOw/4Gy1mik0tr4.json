[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6330"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6330",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13320",
    "end": "18450"
  },
  {
    "start": "18450",
    "end": "47901"
  },
  {
    "text": "ALAN OPPENHEIM: In\nthe last lecture, we began the discussion\nof the computation of the discrete\nFourier transform.",
    "start": "47901",
    "end": "54470"
  },
  {
    "text": "And in particular, we developed\na flow graph for one algorithm. The algorithm that we\ntalked about last time,",
    "start": "54470",
    "end": "62010"
  },
  {
    "text": "which is referred to as\nthe decimation in time form of the fast Fourier\ntransform algorithm,",
    "start": "62010",
    "end": "68570"
  },
  {
    "text": "was derived by decomposing\nthe original sequence",
    "start": "68570",
    "end": "74420"
  },
  {
    "text": "into subsequences. First, two subsequences\nconsisting of the even numbered",
    "start": "74420",
    "end": "81470"
  },
  {
    "text": "points and the odd\nnumbered points, implementing an N-over-2-point\nDFT on the even numbered points",
    "start": "81470",
    "end": "90079"
  },
  {
    "text": "and an N-over-2-point DFT\non the odd numbered points, and then combining those results\nin an appropriate way to obtain",
    "start": "90080",
    "end": "98510"
  },
  {
    "text": "the discrete Fourier transform\nof the overall sequence. And we saw, first\nof all, that there",
    "start": "98510",
    "end": "104689"
  },
  {
    "text": "was a computational efficiency\nthat resulted from doing this. And furthermore, we\nrecognized that we",
    "start": "104690",
    "end": "112670"
  },
  {
    "text": "could continue\nthis decomposition and thereby achieve an\neven greater efficiency.",
    "start": "112670",
    "end": "119790"
  },
  {
    "text": "In particular, with N\nexpressed as a power of 2, we could continue decomposing\nthe N-over-2-point DFTs",
    "start": "119790",
    "end": "128360"
  },
  {
    "text": "into N-over-4-point DFTs,\nthe N-over-4-point DFTs into N-over-8-point\nDFTs, et cetera.",
    "start": "128360",
    "end": "135650"
  },
  {
    "text": "The flow graph\nthat resulted when we did this was the flow\ngraph indicated here,",
    "start": "135650",
    "end": "143180"
  },
  {
    "text": "which is the one that\nwe derived last time. It consists essentially of a\nset of butterfly computations--",
    "start": "143180",
    "end": "152269"
  },
  {
    "text": "what we refer to\nas butterflies-- a multiplication on\nthe bottom branch",
    "start": "152270",
    "end": "157910"
  },
  {
    "text": "of the butterfly at the\ninput to the butterfly, and then an addition\nand subtraction.",
    "start": "157910",
    "end": "163610"
  },
  {
    "text": "And that basically is\nthe type of computation that follows throughout\nthe flow graph.",
    "start": "163610",
    "end": "171260"
  },
  {
    "text": "Now, this is a flow\ngraph representing the computation of the\ndiscrete Fourier transform.",
    "start": "171260",
    "end": "177800"
  },
  {
    "text": "And what is important\nabout the flow graph are the nodes and the\nconnections between the nodes",
    "start": "177800",
    "end": "186110"
  },
  {
    "text": "and the transmittances\non the branches that connect the nodes together.",
    "start": "186110",
    "end": "192080"
  },
  {
    "text": "However, the flow graph in\nthe form that is depicted here",
    "start": "192080",
    "end": "198140"
  },
  {
    "text": "suggests a strategy\nfor organizing the computation of the DFT.",
    "start": "198140",
    "end": "204500"
  },
  {
    "text": "In particular, what we recognize\nis that the flow graph in this",
    "start": "204500",
    "end": "209780"
  },
  {
    "text": "form tends, in a natural\nway, to suggest organizing",
    "start": "209780",
    "end": "215720"
  },
  {
    "text": "the computation corresponding\nto a computation of an input",
    "start": "215720",
    "end": "220910"
  },
  {
    "text": "array-- a computation\non an input array-- computing a second array at\nthis stage, from these points,",
    "start": "220910",
    "end": "230150"
  },
  {
    "text": "computing this array,\nand from these points, finally computing the\nDFT output points.",
    "start": "230150",
    "end": "239940"
  },
  {
    "text": "If we do that and we in\nfact think of these points",
    "start": "239940",
    "end": "246420"
  },
  {
    "text": "as corresponding to\nsequential memory registers, then we know, first of\nall, that the input points",
    "start": "246420",
    "end": "255840"
  },
  {
    "text": "would be stored sequentially,\nnot in their normal order, but in fact, in\nsome altered order.",
    "start": "255840",
    "end": "263880"
  },
  {
    "text": "And as you'll see\nin a few minutes, what this order corresponds\nto and will be referred to as is bit reversed order.",
    "start": "263880",
    "end": "273290"
  },
  {
    "text": "However, an additional\npoint that I'd like to make first\nabout this flow graph, and that is that\nit corresponds--",
    "start": "273290",
    "end": "280020"
  },
  {
    "text": "when thought of as a\nprocedure for organizing the computation-- corresponds to an\nin-place computation",
    "start": "280020",
    "end": "287910"
  },
  {
    "text": "of the discrete\nFourier transform. Now, what I mean by\nthat is the following.",
    "start": "287910",
    "end": "293890"
  },
  {
    "text": "Let's suppose that we\nthink of this set of points as corresponding to\nsequential registers in memory",
    "start": "293890",
    "end": "302370"
  },
  {
    "text": "and we'd like to compute\nfrom this set of points this second array that is\nthe set of points here.",
    "start": "302370",
    "end": "311010"
  },
  {
    "text": "What we notice is that\nbecause of the butterfly structure of this\ncomputation, it",
    "start": "311010",
    "end": "318360"
  },
  {
    "text": "is these two points that are\nused to compute these two points in the next array.",
    "start": "318360",
    "end": "324960"
  },
  {
    "text": "These points are used\nto compute these two points in the next\narray, et cetera,",
    "start": "324960",
    "end": "330210"
  },
  {
    "text": "so that in fact, we can organize\nthe computation by implementing",
    "start": "330210",
    "end": "337199"
  },
  {
    "text": "the computation required\non these two input points, storing the results in a\ncorresponding set of memory",
    "start": "337200",
    "end": "346169"
  },
  {
    "text": "locations, which in fact\ncould be the original memory locations from which we\ntook these data points.",
    "start": "346170",
    "end": "353849"
  },
  {
    "text": "The reason for that\nis that once we've used these two data points,\nwe don't need them any longer.",
    "start": "353850",
    "end": "360849"
  },
  {
    "text": "And so the result\nof this butterfly we could in fact store back in\nthe original memory locations.",
    "start": "360850",
    "end": "368010"
  },
  {
    "text": "And a few minutes of reflection\non this flow graph in general",
    "start": "368010",
    "end": "373020"
  },
  {
    "text": "would indicate that this is\ntrue throughout the computation. It's clearly true in\ngoing from the first stage",
    "start": "373020",
    "end": "379920"
  },
  {
    "text": "to the second stage. In proceeding from this\nstage to the next stage,",
    "start": "379920",
    "end": "385740"
  },
  {
    "text": "we see again, for example in\ncomputing these two points,",
    "start": "385740",
    "end": "390900"
  },
  {
    "text": "the only input points\nthat we use are these two. So again we could\nthink of storing",
    "start": "390900",
    "end": "396630"
  },
  {
    "text": "the result of this computation\nfor this butterfly, for example, back in the\noriginal memory locations.",
    "start": "396630",
    "end": "405190"
  },
  {
    "text": "So if we think of nodes on\nthe same horizontal line",
    "start": "405190",
    "end": "411840"
  },
  {
    "text": "as corresponding to\nidentical memory registers,",
    "start": "411840",
    "end": "416850"
  },
  {
    "text": "then we see that with\nthe computation organized in the way that this\nflow graph suggests,",
    "start": "416850",
    "end": "424080"
  },
  {
    "text": "that in fact the computation\ncan be done in place. And we'll see that with\nsome other alternative forms",
    "start": "424080",
    "end": "432900"
  },
  {
    "text": "of the FFT algorithm, some\nalternative forms of this flow graph, there perhaps\nare other advantages,",
    "start": "432900",
    "end": "440130"
  },
  {
    "text": "but for some of the\nother flow graphs, the computation can no\nlonger be done in-place.",
    "start": "440130",
    "end": "446190"
  },
  {
    "text": "So first of all, this\nflow graph represents an in-place algorithm.",
    "start": "446190",
    "end": "453300"
  },
  {
    "text": "Second of all, the input points\nare in some altered order,",
    "start": "453300",
    "end": "458560"
  },
  {
    "text": "although the DFT\noutput points come out in what is normal order.",
    "start": "458560",
    "end": "464040"
  },
  {
    "text": "That is, sequential order if\nwe think of these as sequential registers. Well, let's examine in a little\nmore detail what the order is",
    "start": "464040",
    "end": "472560"
  },
  {
    "text": "that is being generated here. If we simply look at\nthe memory registers",
    "start": "472560",
    "end": "485990"
  },
  {
    "text": "and the corresponding data index\nfrom the previous flow graph,",
    "start": "485990",
    "end": "491199"
  },
  {
    "text": "in storage registers 0\nwe're storing x of 0, in storage register 1\nwe're storing x of 4,",
    "start": "491200",
    "end": "498310"
  },
  {
    "text": "storage register 2, x\nof 2, and et cetera. These are the storage\nregister locations.",
    "start": "498310",
    "end": "504640"
  },
  {
    "text": "These are the data indices. If we write the storage\nregister locations in binary",
    "start": "504640",
    "end": "513120"
  },
  {
    "text": "and we write the data index\nin binary, what we see, interestingly enough,\nis that the data index",
    "start": "513120",
    "end": "521099"
  },
  {
    "text": "is the bit reversed counterpart\nof the storage register index.",
    "start": "521100",
    "end": "527730"
  },
  {
    "text": "So here, for example, we\nhave 001, storage register 1.",
    "start": "527730",
    "end": "532949"
  },
  {
    "text": "Here we have 100,\nwhich is data index 4. And this continues\non throughout.",
    "start": "532950",
    "end": "540689"
  },
  {
    "text": "110 is storage register\n6, bit reversed is 011,",
    "start": "540690",
    "end": "546240"
  },
  {
    "text": "which is data index 3. Now, it's not accidental that\nthis developed in such a way",
    "start": "546240",
    "end": "555690"
  },
  {
    "text": "that the data is in fact\nstored in a bit reversed order. The reason for that basically\nis because of the way",
    "start": "555690",
    "end": "564029"
  },
  {
    "text": "in which we originally\nsorted the sequence into the even numbered\npoints and the odd numbered",
    "start": "564030",
    "end": "571170"
  },
  {
    "text": "points, then the even numbered\nof the even numbered points, and the odd numbered of the\neven numbered points, et cetera.",
    "start": "571170",
    "end": "578339"
  },
  {
    "text": "In particular, suppose that we\nconsidered a tree to carry out",
    "start": "578340",
    "end": "587030"
  },
  {
    "text": "the sorting that we\nimplemented in breaking the original sequence\nup into subsequences.",
    "start": "587030",
    "end": "594520"
  },
  {
    "text": "Well, we started with\nthe original sequence and we divided that into two\nsubsequences, one corresponding",
    "start": "594520",
    "end": "603790"
  },
  {
    "text": "to the even numbered points,\nthe second corresponding to the odd numbered points.",
    "start": "603790",
    "end": "608959"
  },
  {
    "text": "If you look at the binary\nrepresentation of the data index, you can identify\nthe even numbered points",
    "start": "608960",
    "end": "617440"
  },
  {
    "text": "by the points for which the\nleast significant binary bit is",
    "start": "617440",
    "end": "622940"
  },
  {
    "text": "a 0 and the odd numbered\npoints for which the least significant binary bit is a 1.",
    "start": "622940",
    "end": "629450"
  },
  {
    "text": "So we divided the original\nsequence into two subsequences. The top half all had 0 as\nthe least significant bit.",
    "start": "629450",
    "end": "637990"
  },
  {
    "text": "The bottom half all had 1 as\nthe least significant bit. Well, then for the\neven numbered points",
    "start": "637990",
    "end": "645070"
  },
  {
    "text": "we wanted to divide those into\nthe even numbered of the even numbered and the odd numbered\nof the even numbered.",
    "start": "645070",
    "end": "650980"
  },
  {
    "text": "How would we do that? Well, we would do\nthat by examining the next least significant bit.",
    "start": "650980",
    "end": "657730"
  },
  {
    "text": "If that's a 0, then we\nwould identify the data as being an even numbered\nof the even numbered points.",
    "start": "657730",
    "end": "665379"
  },
  {
    "text": "If it's a 1, it's\nan odd numbered of the even numbered points. So this data was sorted\nas we've indicated here.",
    "start": "665380",
    "end": "674380"
  },
  {
    "text": "And then, of course,\nwe continue on looking at the bits from the\nright to the left.",
    "start": "674380",
    "end": "680950"
  },
  {
    "text": "So sorting, then we could\nsort in the order that resulted by constructing a\ntree, as I've indicated here,",
    "start": "680950",
    "end": "689089"
  },
  {
    "text": "and examining the bits\nfrom the right to the left.",
    "start": "689090",
    "end": "694940"
  },
  {
    "text": "Suppose that we wanted\ninstead to sort the data, not as I've indicated\nhere, but in normal order.",
    "start": "694940",
    "end": "703500"
  },
  {
    "text": "In other words, we\nhave a bucket of data. We want to sort the data so\nthat the data index comes out",
    "start": "703500",
    "end": "711110"
  },
  {
    "text": "in normal order. How would we do that with a\nsimilar type of tree structure?",
    "start": "711110",
    "end": "716180"
  },
  {
    "text": "Well, to decide whether\nthe data index is",
    "start": "716180",
    "end": "721370"
  },
  {
    "text": "in the top half\nor the bottom half we would look at the\nmost significant bit.",
    "start": "721370",
    "end": "726380"
  },
  {
    "text": "If the most\nsignificant bit is a 0, then the data is in the top\nhalf of the entire set of data.",
    "start": "726380",
    "end": "732410"
  },
  {
    "text": "And if the most\nsignificant bit is a 1, the data is in the bottom half. Next, we would proceed to the\nsecond most significant bit.",
    "start": "732410",
    "end": "740810"
  },
  {
    "text": "If the second most\nsignificant bit is a 0, then we fall either into\nthe top half of the top half",
    "start": "740810",
    "end": "747530"
  },
  {
    "text": "or the top half of\nthe bottom half. And we continue on like that\ngoing through a tree exactly",
    "start": "747530",
    "end": "753470"
  },
  {
    "text": "identical to this,\nbut examining the bits for sorting in normal order from\nthe most significant bit down",
    "start": "753470",
    "end": "761420"
  },
  {
    "text": "to the least significant bit. So it is basically that in\nsorting the data as we sorted",
    "start": "761420",
    "end": "768500"
  },
  {
    "text": "it to develop the flow\ngraph that we developed,",
    "start": "768500",
    "end": "774080"
  },
  {
    "text": "we examined the bits in\nexactly the reverse order that we would examine\nthe bits if we wanted",
    "start": "774080",
    "end": "779779"
  },
  {
    "text": "to sort the data normally. And consequently what results\nis data that's sorted in bit",
    "start": "779780",
    "end": "786560"
  },
  {
    "text": "reversed order.  Incidentally, speaking of\nthings being bit reversed,",
    "start": "786560",
    "end": "797440"
  },
  {
    "text": "the view graph as I first\ngot it back from drafting I",
    "start": "797440",
    "end": "803690"
  },
  {
    "text": "thought you might\nenjoy looking at. And if you find\nyour mind wandering",
    "start": "803690",
    "end": "809342"
  },
  {
    "text": "during the rest of\nthe lecture, you might try to figure out exactly\nwhat happened with this view graph.",
    "start": "809342",
    "end": "815030"
  },
  {
    "text": "The first inclination is that\nI simply have it turned around, so we can try that.",
    "start": "815030",
    "end": "822020"
  },
  {
    "text": "Well, that doesn't quite do it. So maybe we should turn it over. And that doesn't quite do it.",
    "start": "822020",
    "end": "827760"
  },
  {
    "text": "And in fact, I haven't yet\nbeen able to figure out a way of sorting this particular\nview graph in any normal order",
    "start": "827760",
    "end": "836089"
  },
  {
    "text": "and I'd be curious as to\nwhether you can figure out a way to straighten it out. Well, in any case,\nwhat we have then is",
    "start": "836090",
    "end": "845660"
  },
  {
    "text": "a sorting of the original data-- returning now to the flow\ngraph that we saw previously--",
    "start": "845660",
    "end": "852639"
  },
  {
    "text": "a sorting of the\noriginal data in bit reversed order and the output\nresulting in normal order.",
    "start": "852640",
    "end": "862250"
  },
  {
    "text": "Well, of course this\nisn't the only way to organize the computation of\nthe discrete Fourier transform.",
    "start": "862250",
    "end": "869250"
  },
  {
    "text": "And in fact, an important\naspect of the flow graph",
    "start": "869250",
    "end": "874400"
  },
  {
    "text": "is as I stressed previously\nthat what counts about the flow graph are the nodes and the\nway they're connected and not",
    "start": "874400",
    "end": "882350"
  },
  {
    "text": "the way the flow graph\nis laid out in a sheet. When it's laid\nout in a sheet, we",
    "start": "882350",
    "end": "888290"
  },
  {
    "text": "were able to apply some\nadditional interpretation having to do with a way of\norganizing the computation",
    "start": "888290",
    "end": "897260"
  },
  {
    "text": "from stage to stage. But it's important to recognize\nthat if you take this flow",
    "start": "897260",
    "end": "904100"
  },
  {
    "text": "graph, roll it up in a ball,\nas long as the right points are",
    "start": "904100",
    "end": "909649"
  },
  {
    "text": "connected to the\nright points, then it still represents\na computation",
    "start": "909650",
    "end": "914690"
  },
  {
    "text": "of the discrete\nFourier transform. So in particular, we are free\nto rearrange this flow graph",
    "start": "914690",
    "end": "921320"
  },
  {
    "text": "in any way that we\nwould like to as long as we don't change the\nconnections between the notes.",
    "start": "921320",
    "end": "928740"
  },
  {
    "text": "Well, one possible thought is\nto rearrange the flow graph so that we avoid this problem\nof bit reversal on the input.",
    "start": "928740",
    "end": "937860"
  },
  {
    "text": "We can think of\nrearranging these lines so that the input is changed\nto an input in normal order.",
    "start": "937860",
    "end": "949360"
  },
  {
    "text": "And one way of\ndoing that, in fact, is to simply take all\nof the horizontal lines",
    "start": "949360",
    "end": "955920"
  },
  {
    "text": "and rearrange them so that\nthe data is sorted correctly.",
    "start": "955920",
    "end": "962180"
  },
  {
    "text": "So we would leave\nthis line where it is, we would take this\nline and move it up to here,",
    "start": "962180",
    "end": "967709"
  },
  {
    "text": "this line would then stay where\nit is, this line would move up, and they would continue\nto be rearranged.",
    "start": "967710",
    "end": "974430"
  },
  {
    "text": "The input would be\nthen in normal order, the output, of course,\nwould be disturbed,",
    "start": "974430",
    "end": "981839"
  },
  {
    "text": "and we could anticipate\nexactly how it's going to be disturbed, in fact. The output then will come\nout in bit reversed order.",
    "start": "981840",
    "end": "992320"
  },
  {
    "text": "That flow graph is then\nas I've indicated here.",
    "start": "992320",
    "end": "1000760"
  },
  {
    "text": "And this then corresponds\nto a rearrangement of the previous\nflow graph, where",
    "start": "1000760",
    "end": "1006959"
  },
  {
    "text": "we have rearranged the\ncomputation so that the input is now in normal order.",
    "start": "1006960",
    "end": "1014300"
  },
  {
    "text": "The way in which we rearranged\nit, the output then comes out in bit reversed order.",
    "start": "1014300",
    "end": "1021400"
  },
  {
    "text": "Incidentally, on most of\nthe following view graphs, I have indicated a reference to\nthe figure in the text, which",
    "start": "1021400",
    "end": "1030430"
  },
  {
    "text": "this view graph corresponds\nto, because in fact, many of these flow graphs will\nbe going through quite",
    "start": "1030430",
    "end": "1036339"
  },
  {
    "text": "a number of flow graphs. Many of them look\nvery similar, so I",
    "start": "1036339",
    "end": "1041680"
  },
  {
    "text": "thought perhaps a reference\nto the figure in the text will help you keep\nthem organized.",
    "start": "1041680",
    "end": "1048230"
  },
  {
    "text": "So now we have a modification\nof the decimation",
    "start": "1048230",
    "end": "1054280"
  },
  {
    "text": "in time form of\nthe FFT algorithm, which is such that\nif we now think",
    "start": "1054280",
    "end": "1061970"
  },
  {
    "text": "of this as the procedure for\norganizing the computation, the input is now\nin normal order,",
    "start": "1061970",
    "end": "1069360"
  },
  {
    "text": "the output is in\nbit reversed order. Have we destroyed the fact\nthat the original computation",
    "start": "1069360",
    "end": "1076760"
  },
  {
    "text": "was an in-place computation? Well, in fact, we\nhaven't, because if we look at this now the way\nthat it's organized, again,",
    "start": "1076760",
    "end": "1086150"
  },
  {
    "text": "thinking of this as\nsequential memory registers, then, again, if we, for\nexample, select this butterfly,",
    "start": "1086150",
    "end": "1096200"
  },
  {
    "text": "the computation of\nthese two points requires only these\ntwo input points.",
    "start": "1096200",
    "end": "1103970"
  },
  {
    "text": "So once we have used\nthese two points, we can store them back in the\noriginal memory locations.",
    "start": "1103970",
    "end": "1110390"
  },
  {
    "text": "What makes the flow\ngraph correspond to an in-place\ncomputation is the fact",
    "start": "1110390",
    "end": "1117230"
  },
  {
    "text": "that the output nodes\nof the butterfly are horizontally adjacent to the\ninput nodes of the butterfly.",
    "start": "1117230",
    "end": "1125720"
  },
  {
    "text": "If that property of the\nflow graph is destroyed, then the flow graph will\nno longer correspond",
    "start": "1125720",
    "end": "1133040"
  },
  {
    "text": "to an in-place\ncomputation if we think of all nodes on the\nsame horizontal line",
    "start": "1133040",
    "end": "1139400"
  },
  {
    "text": "as corresponding to\nidentical memory registers, or equivalently, that\nvertical nodes correspond",
    "start": "1139400",
    "end": "1148100"
  },
  {
    "text": "to sequential memory registers. Well, there are a\nvariety of other ways",
    "start": "1148100",
    "end": "1153980"
  },
  {
    "text": "in which we can rearrange\nthis flow graph. We can, of course,\nmodify the flow graph",
    "start": "1153980",
    "end": "1159740"
  },
  {
    "text": "so that we have not only\nnormal order at the input,",
    "start": "1159740",
    "end": "1167010"
  },
  {
    "text": "but so that we also have\nnormal order at the output. And we can do that\nsimply by demanding it.",
    "start": "1167010",
    "end": "1173600"
  },
  {
    "text": "In other words, by\nrearranging these nodes, keeping these nodes in normal\norder, rearranging these",
    "start": "1173600",
    "end": "1179690"
  },
  {
    "text": "nodes so that they also\ncorrespond to normal order. And the flow graph that\nresults in that case",
    "start": "1179690",
    "end": "1189080"
  },
  {
    "text": "is the one that\nI've indicated here. ",
    "start": "1189080",
    "end": "1194780"
  },
  {
    "text": "So this is now the\ndecimation in time form of the algorithm\nwith the input sorted",
    "start": "1194780",
    "end": "1201020"
  },
  {
    "text": "in normal order and the output\nalso sorted in normal order.",
    "start": "1201020",
    "end": "1206840"
  },
  {
    "text": "The computation still is\nrepresented by butterflies, but the butterflies\nare distorted.",
    "start": "1206840",
    "end": "1213340"
  },
  {
    "text": "In other words, each\nof the butterflies no longer corresponds\nto the computation",
    "start": "1213340",
    "end": "1221950"
  },
  {
    "text": "of horizontally adjacent\nnodes in the flow graph.",
    "start": "1221950",
    "end": "1226980"
  },
  {
    "text": "So in fact, this\ncomputation is no longer an in-place computation.",
    "start": "1226980",
    "end": "1234620"
  },
  {
    "text": "Well, is it an in-place\ncomputation from this array to this one? As it happens, it is in the\ncomputation of the first array,",
    "start": "1234620",
    "end": "1242330"
  },
  {
    "text": "the reason being that in each\nof the butterflies, again,",
    "start": "1242330",
    "end": "1247350"
  },
  {
    "text": "the output nodes\nare horizontally adjacent to the input nodes. But that property is\nlost after this array.",
    "start": "1247350",
    "end": "1255230"
  },
  {
    "text": "And proceeding from this\narray to this array, we see that to compute\nthese two points--",
    "start": "1255230",
    "end": "1262700"
  },
  {
    "text": "let's take this\none and this one-- we need this point\nand this point.",
    "start": "1262700",
    "end": "1270529"
  },
  {
    "text": "So we couldn't store then\nthis answer back in here because we're going\nto need this point to compute some other\noutput points, et cetera.",
    "start": "1270530",
    "end": "1278029"
  },
  {
    "text": "So this flow graph in this\nform has the disadvantage that the in-place computational\naspects of the flow graph",
    "start": "1278030",
    "end": "1286870"
  },
  {
    "text": "are lost although the\ninput is in normal order and the output is\nin normal order.",
    "start": "1286870",
    "end": "1293530"
  },
  {
    "text": "It has another\ndisadvantage incidentally, and that is that the indexing is\nsomewhat difficult in contrast",
    "start": "1293530",
    "end": "1299860"
  },
  {
    "text": "to the two flow graphs\nthat we've talked about so far where the indexing\nstrategy is relatively",
    "start": "1299860",
    "end": "1306640"
  },
  {
    "text": "straightforward\nfrom stage to stage. Now, there's another\nrearrangement",
    "start": "1306640",
    "end": "1313510"
  },
  {
    "text": "of this flow graph which\nhas some advantages and also",
    "start": "1313510",
    "end": "1324290"
  },
  {
    "text": "some disadvantages. First, let me return to\nthe original flow graph",
    "start": "1324290",
    "end": "1329960"
  },
  {
    "text": "that we began with, which\nconsisted of the input sorted in bit reversed order and the\noutput sorted in normal order.",
    "start": "1329960",
    "end": "1341010"
  },
  {
    "text": "The indexing in\nthis flow graph is relatively straightforward\nin that you should notice",
    "start": "1341010",
    "end": "1348290"
  },
  {
    "text": "that as you proceed\nfrom stage to stage, the width of the butterflies\ncontinues to double.",
    "start": "1348290",
    "end": "1355010"
  },
  {
    "text": "So here the width\nof the butterfly is 1, here the width\nof the butterfly is 2--",
    "start": "1355010",
    "end": "1360889"
  },
  {
    "text": "or the height of the butterfly-- here the height of\nthe butterfly is 4.",
    "start": "1360890",
    "end": "1366040"
  },
  {
    "text": "If we were computing a\nlarger order transform, then that procedure\nwould continue.",
    "start": "1366040",
    "end": "1371870"
  },
  {
    "text": "But as you can imagine, if\nwe were implementing this",
    "start": "1371870",
    "end": "1380070"
  },
  {
    "text": "on a computer or with\nspecial purpose hardware, because of the fact that\nthe data separation as we",
    "start": "1380070",
    "end": "1387480"
  },
  {
    "text": "compute each butterfly\nincreases or changes as we go from stage to\nstage, what is required",
    "start": "1387480",
    "end": "1394559"
  },
  {
    "text": "is random access memory. We require random access\nmemory because in each array",
    "start": "1394560",
    "end": "1403320"
  },
  {
    "text": "we are not accessing data\nfrom sequential registers. We are going from this\narray to this one.",
    "start": "1403320",
    "end": "1409740"
  },
  {
    "text": "After that, in\ncomputing a butterfly, we no longer are accessing\nsequential registers.",
    "start": "1409740",
    "end": "1417360"
  },
  {
    "text": "There is, however, a\nmodification of this algorithm which is useful in the sense\nthat it permits the computation",
    "start": "1417360",
    "end": "1427350"
  },
  {
    "text": "without random access\nmemory and in particular is organized so that it can\nutilize sequential memory,",
    "start": "1427350",
    "end": "1433980"
  },
  {
    "text": "although it does not correspond\nto an in-place computation. And that form of the algorithm,\nI have indicated here,",
    "start": "1433980",
    "end": "1444760"
  },
  {
    "text": "is a form of the\nalgorithm that originally was proposed by singleton.",
    "start": "1444760",
    "end": "1451919"
  },
  {
    "text": "This then is a form of the\ndecimation in time algorithm.",
    "start": "1451920",
    "end": "1457380"
  },
  {
    "text": "It's a rearrangement\nof the flowchart so that sequential memory can be\nused rather than random access",
    "start": "1457380",
    "end": "1465630"
  },
  {
    "text": "memory. Let me point out first\nof all that the input is in bit reversed order, the\noutput is in normal order,",
    "start": "1465630",
    "end": "1474039"
  },
  {
    "text": "and now let me explain\nin a little more detail why this flow graph allows\nthe use of sequential memory",
    "start": "1474040",
    "end": "1482520"
  },
  {
    "text": "rather than random\naccess memory. First of all, let me indicate\nthat the organization",
    "start": "1482520",
    "end": "1489300"
  },
  {
    "text": "of this flow graph is\nidentical from stage to stage. In other words, if you think\nof how this piece of the flow",
    "start": "1489300",
    "end": "1498600"
  },
  {
    "text": "graph looks in computing\nthe first stage, it is exactly the same\nwith regard to data",
    "start": "1498600",
    "end": "1504180"
  },
  {
    "text": "access as computing\nthis stage is in relation to\nthe one before it,",
    "start": "1504180",
    "end": "1510510"
  },
  {
    "text": "and this continues on through. So as opposed to the other\nforms of the algorithm,",
    "start": "1510510",
    "end": "1516030"
  },
  {
    "text": "the indexing is\nidentical from stage to stage in this form\nof the algorithm.",
    "start": "1516030",
    "end": "1521940"
  },
  {
    "text": "Now, to utilize sequential\nmemory-- sequential memory might be disk memory or drum\nmemory or shift register",
    "start": "1521940",
    "end": "1529200"
  },
  {
    "text": "memory, for example. Generally, bulk memory is\nsequential memory rather than",
    "start": "1529200",
    "end": "1535530"
  },
  {
    "text": "random access. Let's think of the original\ndata first shuffled",
    "start": "1535530",
    "end": "1542890"
  },
  {
    "text": "in bit reversed\norder and then stored in two separate memories.",
    "start": "1542890",
    "end": "1548710"
  },
  {
    "text": "Let's call them M\nsub A and M sub B. The first half of\nthe data is stored in memory A. The second half of\nthe data is stored in memory B.",
    "start": "1548710",
    "end": "1558370"
  },
  {
    "text": "And then let's permit two\nadditional sequential memory registers, memories\nM sub C and M sub D",
    "start": "1558370",
    "end": "1567220"
  },
  {
    "text": "for storing the output\nof the computation. Then the computation would\nproceed essentially as follows.",
    "start": "1567220",
    "end": "1575390"
  },
  {
    "text": "We would access the first two\ndata points from memory A, use those to compute the\nfirst point in this array,",
    "start": "1575390",
    "end": "1585010"
  },
  {
    "text": "store that in memory C, and use\nthat to compute the first point",
    "start": "1585010",
    "end": "1590770"
  },
  {
    "text": "in the second half of\nthis array and store that in memory D. Next, we\nwould access the next two input",
    "start": "1590770",
    "end": "1598570"
  },
  {
    "text": "points from memory\nA, add those-- we would do the required\ncomputation-- store",
    "start": "1598570",
    "end": "1605860"
  },
  {
    "text": "the result in the next\nlocation in memory A,",
    "start": "1605860",
    "end": "1611559"
  },
  {
    "text": "also store the second\nhalf of the butterfly output in the second\nregister in memory D.",
    "start": "1611560",
    "end": "1619539"
  },
  {
    "text": "So as we proceed along, we\naccess the first two points",
    "start": "1619540",
    "end": "1624790"
  },
  {
    "text": "from memory A then the next\ntwo points from memory A, storing in memory\nC and memory D.",
    "start": "1624790",
    "end": "1631610"
  },
  {
    "text": "When we have gone through\nthe first half of the data, we now access the data from\nthe second input memory,",
    "start": "1631610",
    "end": "1638710"
  },
  {
    "text": "memory B, the first two points,\ndo the required computation,",
    "start": "1638710",
    "end": "1644950"
  },
  {
    "text": "and store in the next\nsequential registers in memory C and memory D, et cetera.",
    "start": "1644950",
    "end": "1652060"
  },
  {
    "text": "So the strategy\nin this case, then is that the input is stored half\nin memory A, half in memory B.",
    "start": "1652060",
    "end": "1663240"
  },
  {
    "text": "The data is first\naccessed from memory A and we alternately put\nresults in memories C and D.",
    "start": "1663240",
    "end": "1671490"
  },
  {
    "text": "When we finish with memory A,\nwe then proceed to memory B, access data sequentially,\nand continue",
    "start": "1671490",
    "end": "1679140"
  },
  {
    "text": "to store the results\nalternating in memory C and D. Now that gives us the\nresult at this stage.",
    "start": "1679140",
    "end": "1687660"
  },
  {
    "text": "To compute the next stage,\nwe now start with the memory C and D as the inputs and store\nthe results of the computation",
    "start": "1687660",
    "end": "1697140"
  },
  {
    "text": "back into memories A\nand B. So in a sense, you can think of\nthe computation then",
    "start": "1697140",
    "end": "1703680"
  },
  {
    "text": "as involving four memory, four\nseparate sequential memories, A, B, C, and D. We\nstart with A and B,",
    "start": "1703680",
    "end": "1711690"
  },
  {
    "text": "flush the data into memory C and\nD, then flush the results back.",
    "start": "1711690",
    "end": "1718110"
  },
  {
    "text": "And in fact, you can\nthink of the computation much the same way\nas a slinky toy",
    "start": "1718110",
    "end": "1723870"
  },
  {
    "text": "where you bounce the data back\nand forth between these two sets of sequential memories.",
    "start": "1723870",
    "end": "1729580"
  },
  {
    "text": " That then is a form of\nthe computation which",
    "start": "1729580",
    "end": "1735860"
  },
  {
    "text": "is not an in-place computation. And furthermore, the\ninput is bit reversed, although the output\nis in normal order,",
    "start": "1735860",
    "end": "1743400"
  },
  {
    "text": "and it has the\nadvantage, though, that the indexing is\nidentical from stage to stage",
    "start": "1743400",
    "end": "1749780"
  },
  {
    "text": "and consequently can utilize\nsequential memory rather than requiring\nrandom access memory.",
    "start": "1749780",
    "end": "1757809"
  },
  {
    "text": "Well, that then completes the\ndiscussion of the decimation in time form of the algorithm.",
    "start": "1757810",
    "end": "1764890"
  },
  {
    "text": "There are, of course, a number\nof other variations on this and some of them are\ndiscussed in the text.",
    "start": "1764890",
    "end": "1772520"
  },
  {
    "text": "What I'd like to proceed to now\nis a slightly different form of FFT algorithms\nwhich are really",
    "start": "1772520",
    "end": "1781550"
  },
  {
    "text": "derived on a somewhat different\nbasis than the decimation in time form of the algorithms.",
    "start": "1781550",
    "end": "1787040"
  },
  {
    "text": "But we'll see as\nwe finally continue the discussion that there\nis a very close relationship",
    "start": "1787040",
    "end": "1793820"
  },
  {
    "text": "between the decimation\nin time algorithms as we've just talked about and\nthe class of algorithms which",
    "start": "1793820",
    "end": "1800150"
  },
  {
    "text": "I would now like\nto introduce, which are the decimation in frequency\nforms of the FFT algorithm.",
    "start": "1800150",
    "end": "1808149"
  },
  {
    "text": "Well, in particular,\nthe notion in deriving the decimation and frequency\nforms of the FFT algorithm",
    "start": "1808150",
    "end": "1818740"
  },
  {
    "text": "is, essentially, rather\nthan breaking the input up into the even numbered and\nthe odd numbered points,",
    "start": "1818740",
    "end": "1825660"
  },
  {
    "text": "organize the computation so that\nwe compute separately the even numbered and odd\nnumbered output points.",
    "start": "1825660",
    "end": "1833620"
  },
  {
    "text": "In particular, let's look\nagain at the general form",
    "start": "1833620",
    "end": "1838840"
  },
  {
    "text": "for the discrete\nFourier transform x of k given by this sum and let's\nconsider decomposing this",
    "start": "1838840",
    "end": "1847270"
  },
  {
    "text": "into a sum over the first\nhalf of the input points and a sum over the second\nhalf of the input points.",
    "start": "1847270",
    "end": "1856480"
  },
  {
    "text": "Well, the sum over the\nsecond half of the input points we can rearrange somewhat\ndifferently by essentially",
    "start": "1856480",
    "end": "1864460"
  },
  {
    "text": "implementing a\nsubstitution of variables so that the index on the sum\nis changed to an index from 0",
    "start": "1864460",
    "end": "1872440"
  },
  {
    "text": "to N over 2 minus 1. And if we do that, the\nsum that results then,",
    "start": "1872440",
    "end": "1879340"
  },
  {
    "text": "the expression that\nresults, is W sub N to the N over 2 k times the sum\nof x of n plus capital N over 2",
    "start": "1879340",
    "end": "1887620"
  },
  {
    "text": "times W sub N to the nk. And you can easily check\nthat this is correct.",
    "start": "1887620",
    "end": "1893770"
  },
  {
    "text": "For example, for little n\nequal to capital N over 2 here, we have x of\ncapital N over 2 W sub N",
    "start": "1893770",
    "end": "1902080"
  },
  {
    "text": "to the capital N over 2 k. Here, for little n equals 0,\nwe get W sub N to the capital",
    "start": "1902080",
    "end": "1908590"
  },
  {
    "text": "N over 2 k times x\nof capital N over 2,",
    "start": "1908590",
    "end": "1914210"
  },
  {
    "text": "and this term becomes 1. Just simply a\nsubstitution of variables.",
    "start": "1914210",
    "end": "1920300"
  },
  {
    "text": "Well, we recognize this term,\nW sub n to the N over 2 k,",
    "start": "1920300",
    "end": "1927290"
  },
  {
    "text": "is equal to minus 1. And consequently,\nthen we can rewrite",
    "start": "1927290",
    "end": "1933950"
  },
  {
    "text": "this as I've\nindicated here, x of k is equal to a sum from n equals\n0 to N over 2 minus 1 of x of n",
    "start": "1933950",
    "end": "1944960"
  },
  {
    "text": "plus minus 1 to the k-- k being the index on the DFT--",
    "start": "1944960",
    "end": "1951230"
  },
  {
    "text": "times x of n plus capital\nN over 2 W sub N to the nk.",
    "start": "1951230",
    "end": "1956580"
  },
  {
    "text": "Well, it's tempting to look at\nthis and say kind of in analogy with the decimation in time--",
    "start": "1956580",
    "end": "1962850"
  },
  {
    "text": "the steps we took in the\ndecimation time algorithm, that this is an\nN-over-2-point DFT.",
    "start": "1962850",
    "end": "1969480"
  },
  {
    "text": "It is a sum from 0\nto N over 2 minus 1, it's a modified input sequence,\nbut it's not, in fact,",
    "start": "1969480",
    "end": "1976905"
  },
  {
    "text": "an N-over-2-point DFT. And the reason that it isn't is\nthat this is W sub N to the nk",
    "start": "1976905",
    "end": "1985200"
  },
  {
    "text": "whereas if it was an\nN-over-2-point DFT, this would be W sub\ncapital N over 2 to the nk.",
    "start": "1985200",
    "end": "1994169"
  },
  {
    "text": "However, let's look at these DFT\npoints for two separate cases,",
    "start": "1994170",
    "end": "2001040"
  },
  {
    "text": "one being that for which\nthe index, the output index, is even and the second for\nwhich the output index is odd.",
    "start": "2001040",
    "end": "2010970"
  },
  {
    "text": "The output index\nis even, then we can think of that as indexing\nthrough the DFT points",
    "start": "2010970",
    "end": "2018350"
  },
  {
    "text": "with an argument x of 2r,\nwhere r ranges from 0 to N",
    "start": "2018350",
    "end": "2024289"
  },
  {
    "text": "over 2 minus 1. And we then have this sum since\nk is even, minus 1 to the k",
    "start": "2024290",
    "end": "2032540"
  },
  {
    "text": "is positive and we have\nthen this sum that I've indicated here,\nwhereas for k odd,",
    "start": "2032540",
    "end": "2041630"
  },
  {
    "text": "we choose an index 2r plus 1,\nwhere again r ranges from 0",
    "start": "2041630",
    "end": "2048138"
  },
  {
    "text": "to N over 2 minus 1. And because k is odd,\nwhat results in the sum",
    "start": "2048139",
    "end": "2055190"
  },
  {
    "text": "is a subtraction rather\nthan an addition. And then we have\nsubstituting in also.",
    "start": "2055190",
    "end": "2062780"
  },
  {
    "text": "We have W sub capital N to the\nlittle n times W sub capital N to the 2rn.",
    "start": "2062780",
    "end": "2069610"
  },
  {
    "text": "Now, finally, we can take\nadvantage of the fact that W sub N to the 2rn\ncan be written in terms",
    "start": "2069610",
    "end": "2078370"
  },
  {
    "text": "of W sub capital N over 2. In particular, W sub\ncapital N to the 2rn",
    "start": "2078370",
    "end": "2085899"
  },
  {
    "text": "is equal to W sub capital\nN over 2 to the rn.",
    "start": "2085900",
    "end": "2091149"
  },
  {
    "text": "And that follows as it did\nand we utilize that fact also in deriving the decimation in\ntime form of the algorithm.",
    "start": "2091150",
    "end": "2099400"
  },
  {
    "text": "It follows simply\nby substituting in to the expression\nfor W sub capital N.",
    "start": "2099400",
    "end": "2107020"
  },
  {
    "text": "Finally utilizing\nthis, we recognize",
    "start": "2107020",
    "end": "2113520"
  },
  {
    "text": "that for the\ncomputation of the DFT for that the output index\neven, the computation",
    "start": "2113520",
    "end": "2124349"
  },
  {
    "text": "can be reduced to a sum of a\nsequence g of n, where g of n",
    "start": "2124350",
    "end": "2129660"
  },
  {
    "text": "is the sum of the first half and\nthe last half of the input data points.",
    "start": "2129660",
    "end": "2135930"
  },
  {
    "text": "That multiplied by W sub\ncapital N over 2 to the rn. ",
    "start": "2135930",
    "end": "2142130"
  },
  {
    "text": "Well, this is now an\nN-over-2-point discrete Fourier",
    "start": "2142130",
    "end": "2147920"
  },
  {
    "text": "transform. It involves N-over-2-points and\nthe powers of W involved are",
    "start": "2147920",
    "end": "2155569"
  },
  {
    "text": "the appropriate\npowers of W for-- or rather the W is involved\nis the appropriate W",
    "start": "2155570",
    "end": "2162355"
  },
  {
    "text": "for an N-over-2-point DFT. That's indicated by\nthis subscript N over 2.",
    "start": "2162355",
    "end": "2169540"
  },
  {
    "text": "So this is to compute\nthe even numbered points. To compute the odd\nnumbered points,",
    "start": "2169540",
    "end": "2175720"
  },
  {
    "text": "we have a similar expression. We have the sum of h of n\ntimes W sub capital N to the n,",
    "start": "2175720",
    "end": "2185200"
  },
  {
    "text": "and that times W sub N over\n2 to the rn, where h of n",
    "start": "2185200",
    "end": "2190460"
  },
  {
    "text": "is the difference between the\nfirst half of the data points and the last half\nof the data points.",
    "start": "2190460",
    "end": "2198359"
  },
  {
    "text": "So basically, following\nthis strategy, what this says is that we can\ncompute the discrete Fourier",
    "start": "2198360",
    "end": "2206210"
  },
  {
    "text": "transform by forming\na subsequence, which is the sum of the first\nand last half of the points,",
    "start": "2206210",
    "end": "2214619"
  },
  {
    "text": "and computing the\nN-over-2-point DFT of that, and then forming a sequence,\nwhich is the difference",
    "start": "2214620",
    "end": "2222720"
  },
  {
    "text": "of the first and the last\nhalf of the input points, multiplying that by W sub\ncapital N to the little n,",
    "start": "2222720",
    "end": "2230640"
  },
  {
    "text": "and computing the\nN-over-2-point DFT of that.",
    "start": "2230640",
    "end": "2236269"
  },
  {
    "text": "And if you count up the\nnumber of operations involved, multiplications\nand additions, you",
    "start": "2236270",
    "end": "2243010"
  },
  {
    "text": "will find that there is\nexactly the same computational efficiency implied\nin this decomposition",
    "start": "2243010",
    "end": "2249470"
  },
  {
    "text": "as there was as we went\nthrough the decimation in time form of the algorithm.",
    "start": "2249470",
    "end": "2255799"
  },
  {
    "text": "So this then is the basis for\nthe decimation in time form",
    "start": "2255800",
    "end": "2262040"
  },
  {
    "text": "of the computation and it\nbasically states that we would",
    "start": "2262040",
    "end": "2270560"
  },
  {
    "text": "compute the discrete Fourier\ntransform by first forming",
    "start": "2270560",
    "end": "2276890"
  },
  {
    "text": "a subsequence, which\nwe denoted as g,",
    "start": "2276890",
    "end": "2282440"
  },
  {
    "text": "which we obtain by adding the\nfirst half of the input points to the last half of\nthe input points,",
    "start": "2282440",
    "end": "2289099"
  },
  {
    "text": "and implementing an\nN-over-2-point DFT of that",
    "start": "2289100",
    "end": "2294340"
  },
  {
    "text": "to obtain the even\nnumbered output points.",
    "start": "2294340",
    "end": "2300080"
  },
  {
    "text": "And then we would subtract the\nfirst half of the input points from the last half\nof the input points,",
    "start": "2300080",
    "end": "2307359"
  },
  {
    "text": "multiply that subsequence,\nh, by successive powers of W,",
    "start": "2307360",
    "end": "2314140"
  },
  {
    "text": "compute an N-over-2-point\nDFT of that, and the result would then be\nthe odd numbered output points.",
    "start": "2314140",
    "end": "2324530"
  },
  {
    "text": "Well, just as we did\nwith the decimation in time form of the algorithm,\nwe can continue this procedure.",
    "start": "2324530",
    "end": "2331790"
  },
  {
    "text": "In other words, we can decompose\nthe N-over-2-point DFTs into N-over-4-point DFTs\nby adding the first half",
    "start": "2331790",
    "end": "2339940"
  },
  {
    "text": "of the input points here to\nthe last half, et cetera. As we proceed\nthrough, we would then",
    "start": "2339940",
    "end": "2346030"
  },
  {
    "text": "develop a flow graph in\nwhich we would compute first the even numbered of the\neven numbered output points",
    "start": "2346030",
    "end": "2352030"
  },
  {
    "text": "and then the odd numbered of\nthe even numbered output points, et cetera.",
    "start": "2352030",
    "end": "2357700"
  },
  {
    "text": "So you can imagine that as\nwe proceed through this, we'll get a flow graph.",
    "start": "2357700",
    "end": "2362950"
  },
  {
    "text": "Similar in many respects\nto the flow graph that we developed\nfor the decimation in time form of the algorithm,\nand furthermore, the flow graph",
    "start": "2362950",
    "end": "2370570"
  },
  {
    "text": "as it naturally\ndevelops this way will result in data, the DFT output,\nsorted in a bit reversed order.",
    "start": "2370570",
    "end": "2381880"
  },
  {
    "text": "So continuing on then, here\nis the decomposition with",
    "start": "2381880",
    "end": "2387369"
  },
  {
    "text": "the N-over-2-point DFTs broken\ninto N-over-4-point DFTs,",
    "start": "2387370",
    "end": "2393520"
  },
  {
    "text": "and we are now computing the\neven numbered of the even numbered output points first.",
    "start": "2393520",
    "end": "2400800"
  },
  {
    "text": "The N-over-4-point DFTs, if we\nconsider the specific case of N",
    "start": "2400800",
    "end": "2405970"
  },
  {
    "text": "equals 8, the N-over-4-point\nDFTs are just simply 2-point",
    "start": "2405970",
    "end": "2411263"
  },
  {
    "text": "DFTs, which involve, as they did\nin the decimation in time form",
    "start": "2411263",
    "end": "2417849"
  },
  {
    "text": "of the algorithm, just simply\na computation involving an addition and a subtraction.",
    "start": "2417850",
    "end": "2425050"
  },
  {
    "text": "In other words, just\na simple butterfly. So the resulting\nflow graph based",
    "start": "2425050",
    "end": "2432250"
  },
  {
    "text": "on pursuing this strategy\nthrough the entire computation is as I've indicated\nhere, which is",
    "start": "2432250",
    "end": "2440020"
  },
  {
    "text": "one form of the\ndecimation in frequency form of the algorithm.",
    "start": "2440020",
    "end": "2446400"
  },
  {
    "text": "Notice that the input\nis in normal order, the output is in bit reversed\norder, the flow graph",
    "start": "2446400",
    "end": "2455560"
  },
  {
    "text": "as it developed here,\nagain, if we think of it as a\ncomputational strategy,",
    "start": "2455560",
    "end": "2465010"
  },
  {
    "text": "a strategy for organizing\nthe computation, again, corresponds to\nan in-place computation.",
    "start": "2465010",
    "end": "2473500"
  },
  {
    "text": "It's an in-place computation\nbecause output nodes",
    "start": "2473500",
    "end": "2481230"
  },
  {
    "text": "for a butterfly are horizontally\nadjacent to the input nodes of the butterfly.",
    "start": "2481230",
    "end": "2487950"
  },
  {
    "text": "In many respects,\nin fact, it looks somewhat like the decimation\nin time form of the algorithm",
    "start": "2487950",
    "end": "2495600"
  },
  {
    "text": "when we sorted things such that\nthe input was in normal order and the output was in\nbit reversed order.",
    "start": "2495600",
    "end": "2503010"
  },
  {
    "text": "In fact, there is a\ndifference between this class of algorithms and the decimation\nin time form of the algorithm.",
    "start": "2503010",
    "end": "2510480"
  },
  {
    "text": "One difference that I would\njust draw your attention to quickly is the fact that the\nbutterflies in the decimation",
    "start": "2510480",
    "end": "2521339"
  },
  {
    "text": "in frequency form\nof the algorithm, as we've just been\ntalking about it, involve additions\nand subtractions,",
    "start": "2521340",
    "end": "2529640"
  },
  {
    "text": "and the multiplication\nby powers of W is implemented on the\noutput of the butterfly.",
    "start": "2529640",
    "end": "2536839"
  },
  {
    "text": "Whereas for the decimation in\ntime form of the algorithm,",
    "start": "2536840",
    "end": "2544260"
  },
  {
    "text": "the multiplication by a power of\nW was implemented at the input to the butterfly followed by\nan addition and subtraction.",
    "start": "2544260",
    "end": "2553660"
  },
  {
    "text": "So in fact, the decimation\nand frequency form",
    "start": "2553660",
    "end": "2559109"
  },
  {
    "text": "of the algorithm as\nwe've just developed it is somewhat different\nthan the decimation",
    "start": "2559110",
    "end": "2565950"
  },
  {
    "text": "in time form of the algorithm. As we'll see as we continue\nin the next lecture,",
    "start": "2565950",
    "end": "2572820"
  },
  {
    "text": "there are modifications of\nthis form of the algorithm just as there were\nfor the decimation",
    "start": "2572820",
    "end": "2578820"
  },
  {
    "text": "in time form of the algorithm. And we'll also see\nthat in fact there",
    "start": "2578820",
    "end": "2584040"
  },
  {
    "text": "is a very close relationship\nbetween these two",
    "start": "2584040",
    "end": "2589770"
  },
  {
    "text": "forms of the algorithm, the\nrelationship being suggested by properties of flow graphs\nthat we've discussed in some",
    "start": "2589770",
    "end": "2598320"
  },
  {
    "text": "of the previous lectures. So at this point, then we\nhave concluded our discussion",
    "start": "2598320",
    "end": "2607140"
  },
  {
    "text": "of the decimation in time\nforms of the algorithm, we've introduced the\ndecimation in frequency form",
    "start": "2607140",
    "end": "2614310"
  },
  {
    "text": "of the algorithm. In the next lecture,\nwhat I would like to do is continue on a discussion\nof the decimation in frequency",
    "start": "2614310",
    "end": "2623040"
  },
  {
    "text": "forms, in particular discussing\nalternative forms which",
    "start": "2623040",
    "end": "2628890"
  },
  {
    "text": "are similar to the\nalternative forms that we discussed for\ndecimation in time. Thank you.",
    "start": "2628890",
    "end": "2634430"
  },
  {
    "start": "2634430",
    "end": "2640897"
  }
]